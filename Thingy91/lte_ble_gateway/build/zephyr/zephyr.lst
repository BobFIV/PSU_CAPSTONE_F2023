
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	20 77 01 20 05 0d 01 00 c1 fa 02 00 d9 0c 01 00      w. ............
    8010:	d9 0c 01 00 d9 0c 01 00 d9 0c 01 00 d9 0c 01 00     ................
	...
    802c:	3d 05 01 00 d9 0c 01 00 00 00 00 00 dd 04 01 00     =...............
    803c:	d9 0c 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8050:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8060:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8070:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8080:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8090:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80a0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80b0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80c0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80d0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80e0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    80f0:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8100:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8110:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8120:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8130:	c5 05 01 00 c5 05 01 00 c5 05 01 00 c5 05 01 00     ................
    8140:	c5 05 01 00                                         ....

00008144 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
    8210:	7c 9f 03 00 01 00 00 00 00 80 00 00 00 80 00 00     |...............
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_fmul>:
    8240:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8248:	bf1e      	ittt	ne
    824a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    824e:	ea92 0f0c 	teqne	r2, ip
    8252:	ea93 0f0c 	teqne	r3, ip
    8256:	d06f      	beq.n	8338 <__aeabi_fmul+0xf8>
    8258:	441a      	add	r2, r3
    825a:	ea80 0c01 	eor.w	ip, r0, r1
    825e:	0240      	lsls	r0, r0, #9
    8260:	bf18      	it	ne
    8262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8266:	d01e      	beq.n	82a6 <__aeabi_fmul+0x66>
    8268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    826c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8274:	fba0 3101 	umull	r3, r1, r0, r1
    8278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    827c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8280:	bf3e      	ittt	cc
    8282:	0049      	lslcc	r1, r1, #1
    8284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8288:	005b      	lslcc	r3, r3, #1
    828a:	ea40 0001 	orr.w	r0, r0, r1
    828e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8292:	2afd      	cmp	r2, #253	; 0xfd
    8294:	d81d      	bhi.n	82d2 <__aeabi_fmul+0x92>
    8296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    829a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    829e:	bf08      	it	eq
    82a0:	f020 0001 	biceq.w	r0, r0, #1
    82a4:	4770      	bx	lr
    82a6:	f090 0f00 	teq	r0, #0
    82aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    82ae:	bf08      	it	eq
    82b0:	0249      	lsleq	r1, r1, #9
    82b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    82b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    82ba:	3a7f      	subs	r2, #127	; 0x7f
    82bc:	bfc2      	ittt	gt
    82be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    82c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    82c6:	4770      	bxgt	lr
    82c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    82cc:	f04f 0300 	mov.w	r3, #0
    82d0:	3a01      	subs	r2, #1
    82d2:	dc5d      	bgt.n	8390 <__aeabi_fmul+0x150>
    82d4:	f112 0f19 	cmn.w	r2, #25
    82d8:	bfdc      	itt	le
    82da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    82de:	4770      	bxle	lr
    82e0:	f1c2 0200 	rsb	r2, r2, #0
    82e4:	0041      	lsls	r1, r0, #1
    82e6:	fa21 f102 	lsr.w	r1, r1, r2
    82ea:	f1c2 0220 	rsb	r2, r2, #32
    82ee:	fa00 fc02 	lsl.w	ip, r0, r2
    82f2:	ea5f 0031 	movs.w	r0, r1, rrx
    82f6:	f140 0000 	adc.w	r0, r0, #0
    82fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    82fe:	bf08      	it	eq
    8300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8304:	4770      	bx	lr
    8306:	f092 0f00 	teq	r2, #0
    830a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    830e:	bf02      	ittt	eq
    8310:	0040      	lsleq	r0, r0, #1
    8312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8316:	3a01      	subeq	r2, #1
    8318:	d0f9      	beq.n	830e <__aeabi_fmul+0xce>
    831a:	ea40 000c 	orr.w	r0, r0, ip
    831e:	f093 0f00 	teq	r3, #0
    8322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8326:	bf02      	ittt	eq
    8328:	0049      	lsleq	r1, r1, #1
    832a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    832e:	3b01      	subeq	r3, #1
    8330:	d0f9      	beq.n	8326 <__aeabi_fmul+0xe6>
    8332:	ea41 010c 	orr.w	r1, r1, ip
    8336:	e78f      	b.n	8258 <__aeabi_fmul+0x18>
    8338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    833c:	ea92 0f0c 	teq	r2, ip
    8340:	bf18      	it	ne
    8342:	ea93 0f0c 	teqne	r3, ip
    8346:	d00a      	beq.n	835e <__aeabi_fmul+0x11e>
    8348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    834c:	bf18      	it	ne
    834e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8352:	d1d8      	bne.n	8306 <__aeabi_fmul+0xc6>
    8354:	ea80 0001 	eor.w	r0, r0, r1
    8358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    835c:	4770      	bx	lr
    835e:	f090 0f00 	teq	r0, #0
    8362:	bf17      	itett	ne
    8364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8368:	4608      	moveq	r0, r1
    836a:	f091 0f00 	teqne	r1, #0
    836e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8372:	d014      	beq.n	839e <__aeabi_fmul+0x15e>
    8374:	ea92 0f0c 	teq	r2, ip
    8378:	d101      	bne.n	837e <__aeabi_fmul+0x13e>
    837a:	0242      	lsls	r2, r0, #9
    837c:	d10f      	bne.n	839e <__aeabi_fmul+0x15e>
    837e:	ea93 0f0c 	teq	r3, ip
    8382:	d103      	bne.n	838c <__aeabi_fmul+0x14c>
    8384:	024b      	lsls	r3, r1, #9
    8386:	bf18      	it	ne
    8388:	4608      	movne	r0, r1
    838a:	d108      	bne.n	839e <__aeabi_fmul+0x15e>
    838c:	ea80 0001 	eor.w	r0, r0, r1
    8390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    839c:	4770      	bx	lr
    839e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    83a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    83a6:	4770      	bx	lr

000083a8 <__aeabi_drsub>:
    83a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    83ac:	e002      	b.n	83b4 <__adddf3>
    83ae:	bf00      	nop

000083b0 <__aeabi_dsub>:
    83b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000083b4 <__adddf3>:
    83b4:	b530      	push	{r4, r5, lr}
    83b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    83ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
    83be:	ea94 0f05 	teq	r4, r5
    83c2:	bf08      	it	eq
    83c4:	ea90 0f02 	teqeq	r0, r2
    83c8:	bf1f      	itttt	ne
    83ca:	ea54 0c00 	orrsne.w	ip, r4, r0
    83ce:	ea55 0c02 	orrsne.w	ip, r5, r2
    83d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    83d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    83da:	f000 80e2 	beq.w	85a2 <__adddf3+0x1ee>
    83de:	ea4f 5454 	mov.w	r4, r4, lsr #21
    83e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    83e6:	bfb8      	it	lt
    83e8:	426d      	neglt	r5, r5
    83ea:	dd0c      	ble.n	8406 <__adddf3+0x52>
    83ec:	442c      	add	r4, r5
    83ee:	ea80 0202 	eor.w	r2, r0, r2
    83f2:	ea81 0303 	eor.w	r3, r1, r3
    83f6:	ea82 0000 	eor.w	r0, r2, r0
    83fa:	ea83 0101 	eor.w	r1, r3, r1
    83fe:	ea80 0202 	eor.w	r2, r0, r2
    8402:	ea81 0303 	eor.w	r3, r1, r3
    8406:	2d36      	cmp	r5, #54	; 0x36
    8408:	bf88      	it	hi
    840a:	bd30      	pophi	{r4, r5, pc}
    840c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8410:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    8418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    841c:	d002      	beq.n	8424 <__adddf3+0x70>
    841e:	4240      	negs	r0, r0
    8420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    8428:	ea4f 3303 	mov.w	r3, r3, lsl #12
    842c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    8430:	d002      	beq.n	8438 <__adddf3+0x84>
    8432:	4252      	negs	r2, r2
    8434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8438:	ea94 0f05 	teq	r4, r5
    843c:	f000 80a7 	beq.w	858e <__adddf3+0x1da>
    8440:	f1a4 0401 	sub.w	r4, r4, #1
    8444:	f1d5 0e20 	rsbs	lr, r5, #32
    8448:	db0d      	blt.n	8466 <__adddf3+0xb2>
    844a:	fa02 fc0e 	lsl.w	ip, r2, lr
    844e:	fa22 f205 	lsr.w	r2, r2, r5
    8452:	1880      	adds	r0, r0, r2
    8454:	f141 0100 	adc.w	r1, r1, #0
    8458:	fa03 f20e 	lsl.w	r2, r3, lr
    845c:	1880      	adds	r0, r0, r2
    845e:	fa43 f305 	asr.w	r3, r3, r5
    8462:	4159      	adcs	r1, r3
    8464:	e00e      	b.n	8484 <__adddf3+0xd0>
    8466:	f1a5 0520 	sub.w	r5, r5, #32
    846a:	f10e 0e20 	add.w	lr, lr, #32
    846e:	2a01      	cmp	r2, #1
    8470:	fa03 fc0e 	lsl.w	ip, r3, lr
    8474:	bf28      	it	cs
    8476:	f04c 0c02 	orrcs.w	ip, ip, #2
    847a:	fa43 f305 	asr.w	r3, r3, r5
    847e:	18c0      	adds	r0, r0, r3
    8480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8488:	d507      	bpl.n	849a <__adddf3+0xe6>
    848a:	f04f 0e00 	mov.w	lr, #0
    848e:	f1dc 0c00 	rsbs	ip, ip, #0
    8492:	eb7e 0000 	sbcs.w	r0, lr, r0
    8496:	eb6e 0101 	sbc.w	r1, lr, r1
    849a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    849e:	d31b      	bcc.n	84d8 <__adddf3+0x124>
    84a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    84a4:	d30c      	bcc.n	84c0 <__adddf3+0x10c>
    84a6:	0849      	lsrs	r1, r1, #1
    84a8:	ea5f 0030 	movs.w	r0, r0, rrx
    84ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
    84b0:	f104 0401 	add.w	r4, r4, #1
    84b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    84b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    84bc:	f080 809a 	bcs.w	85f4 <__adddf3+0x240>
    84c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    84c4:	bf08      	it	eq
    84c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    84ca:	f150 0000 	adcs.w	r0, r0, #0
    84ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    84d2:	ea41 0105 	orr.w	r1, r1, r5
    84d6:	bd30      	pop	{r4, r5, pc}
    84d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    84dc:	4140      	adcs	r0, r0
    84de:	eb41 0101 	adc.w	r1, r1, r1
    84e2:	3c01      	subs	r4, #1
    84e4:	bf28      	it	cs
    84e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    84ea:	d2e9      	bcs.n	84c0 <__adddf3+0x10c>
    84ec:	f091 0f00 	teq	r1, #0
    84f0:	bf04      	itt	eq
    84f2:	4601      	moveq	r1, r0
    84f4:	2000      	moveq	r0, #0
    84f6:	fab1 f381 	clz	r3, r1
    84fa:	bf08      	it	eq
    84fc:	3320      	addeq	r3, #32
    84fe:	f1a3 030b 	sub.w	r3, r3, #11
    8502:	f1b3 0220 	subs.w	r2, r3, #32
    8506:	da0c      	bge.n	8522 <__adddf3+0x16e>
    8508:	320c      	adds	r2, #12
    850a:	dd08      	ble.n	851e <__adddf3+0x16a>
    850c:	f102 0c14 	add.w	ip, r2, #20
    8510:	f1c2 020c 	rsb	r2, r2, #12
    8514:	fa01 f00c 	lsl.w	r0, r1, ip
    8518:	fa21 f102 	lsr.w	r1, r1, r2
    851c:	e00c      	b.n	8538 <__adddf3+0x184>
    851e:	f102 0214 	add.w	r2, r2, #20
    8522:	bfd8      	it	le
    8524:	f1c2 0c20 	rsble	ip, r2, #32
    8528:	fa01 f102 	lsl.w	r1, r1, r2
    852c:	fa20 fc0c 	lsr.w	ip, r0, ip
    8530:	bfdc      	itt	le
    8532:	ea41 010c 	orrle.w	r1, r1, ip
    8536:	4090      	lslle	r0, r2
    8538:	1ae4      	subs	r4, r4, r3
    853a:	bfa2      	ittt	ge
    853c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    8540:	4329      	orrge	r1, r5
    8542:	bd30      	popge	{r4, r5, pc}
    8544:	ea6f 0404 	mvn.w	r4, r4
    8548:	3c1f      	subs	r4, #31
    854a:	da1c      	bge.n	8586 <__adddf3+0x1d2>
    854c:	340c      	adds	r4, #12
    854e:	dc0e      	bgt.n	856e <__adddf3+0x1ba>
    8550:	f104 0414 	add.w	r4, r4, #20
    8554:	f1c4 0220 	rsb	r2, r4, #32
    8558:	fa20 f004 	lsr.w	r0, r0, r4
    855c:	fa01 f302 	lsl.w	r3, r1, r2
    8560:	ea40 0003 	orr.w	r0, r0, r3
    8564:	fa21 f304 	lsr.w	r3, r1, r4
    8568:	ea45 0103 	orr.w	r1, r5, r3
    856c:	bd30      	pop	{r4, r5, pc}
    856e:	f1c4 040c 	rsb	r4, r4, #12
    8572:	f1c4 0220 	rsb	r2, r4, #32
    8576:	fa20 f002 	lsr.w	r0, r0, r2
    857a:	fa01 f304 	lsl.w	r3, r1, r4
    857e:	ea40 0003 	orr.w	r0, r0, r3
    8582:	4629      	mov	r1, r5
    8584:	bd30      	pop	{r4, r5, pc}
    8586:	fa21 f004 	lsr.w	r0, r1, r4
    858a:	4629      	mov	r1, r5
    858c:	bd30      	pop	{r4, r5, pc}
    858e:	f094 0f00 	teq	r4, #0
    8592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8596:	bf06      	itte	eq
    8598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    859c:	3401      	addeq	r4, #1
    859e:	3d01      	subne	r5, #1
    85a0:	e74e      	b.n	8440 <__adddf3+0x8c>
    85a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    85a6:	bf18      	it	ne
    85a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    85ac:	d029      	beq.n	8602 <__adddf3+0x24e>
    85ae:	ea94 0f05 	teq	r4, r5
    85b2:	bf08      	it	eq
    85b4:	ea90 0f02 	teqeq	r0, r2
    85b8:	d005      	beq.n	85c6 <__adddf3+0x212>
    85ba:	ea54 0c00 	orrs.w	ip, r4, r0
    85be:	bf04      	itt	eq
    85c0:	4619      	moveq	r1, r3
    85c2:	4610      	moveq	r0, r2
    85c4:	bd30      	pop	{r4, r5, pc}
    85c6:	ea91 0f03 	teq	r1, r3
    85ca:	bf1e      	ittt	ne
    85cc:	2100      	movne	r1, #0
    85ce:	2000      	movne	r0, #0
    85d0:	bd30      	popne	{r4, r5, pc}
    85d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    85d6:	d105      	bne.n	85e4 <__adddf3+0x230>
    85d8:	0040      	lsls	r0, r0, #1
    85da:	4149      	adcs	r1, r1
    85dc:	bf28      	it	cs
    85de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    85e2:	bd30      	pop	{r4, r5, pc}
    85e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    85e8:	bf3c      	itt	cc
    85ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    85ee:	bd30      	popcc	{r4, r5, pc}
    85f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    85f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    85f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    85fc:	f04f 0000 	mov.w	r0, #0
    8600:	bd30      	pop	{r4, r5, pc}
    8602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8606:	bf1a      	itte	ne
    8608:	4619      	movne	r1, r3
    860a:	4610      	movne	r0, r2
    860c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    8610:	bf1c      	itt	ne
    8612:	460b      	movne	r3, r1
    8614:	4602      	movne	r2, r0
    8616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    861a:	bf06      	itte	eq
    861c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    8620:	ea91 0f03 	teqeq	r1, r3
    8624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    8628:	bd30      	pop	{r4, r5, pc}
    862a:	bf00      	nop

0000862c <__aeabi_ui2d>:
    862c:	f090 0f00 	teq	r0, #0
    8630:	bf04      	itt	eq
    8632:	2100      	moveq	r1, #0
    8634:	4770      	bxeq	lr
    8636:	b530      	push	{r4, r5, lr}
    8638:	f44f 6480 	mov.w	r4, #1024	; 0x400
    863c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8640:	f04f 0500 	mov.w	r5, #0
    8644:	f04f 0100 	mov.w	r1, #0
    8648:	e750      	b.n	84ec <__adddf3+0x138>
    864a:	bf00      	nop

0000864c <__aeabi_i2d>:
    864c:	f090 0f00 	teq	r0, #0
    8650:	bf04      	itt	eq
    8652:	2100      	moveq	r1, #0
    8654:	4770      	bxeq	lr
    8656:	b530      	push	{r4, r5, lr}
    8658:	f44f 6480 	mov.w	r4, #1024	; 0x400
    865c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8664:	bf48      	it	mi
    8666:	4240      	negmi	r0, r0
    8668:	f04f 0100 	mov.w	r1, #0
    866c:	e73e      	b.n	84ec <__adddf3+0x138>
    866e:	bf00      	nop

00008670 <__aeabi_f2d>:
    8670:	0042      	lsls	r2, r0, #1
    8672:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8676:	ea4f 0131 	mov.w	r1, r1, rrx
    867a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    867e:	bf1f      	itttt	ne
    8680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    868c:	4770      	bxne	lr
    868e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8692:	bf08      	it	eq
    8694:	4770      	bxeq	lr
    8696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    869a:	bf04      	itt	eq
    869c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    86a0:	4770      	bxeq	lr
    86a2:	b530      	push	{r4, r5, lr}
    86a4:	f44f 7460 	mov.w	r4, #896	; 0x380
    86a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    86ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86b0:	e71c      	b.n	84ec <__adddf3+0x138>
    86b2:	bf00      	nop

000086b4 <__aeabi_ul2d>:
    86b4:	ea50 0201 	orrs.w	r2, r0, r1
    86b8:	bf08      	it	eq
    86ba:	4770      	bxeq	lr
    86bc:	b530      	push	{r4, r5, lr}
    86be:	f04f 0500 	mov.w	r5, #0
    86c2:	e00a      	b.n	86da <__aeabi_l2d+0x16>

000086c4 <__aeabi_l2d>:
    86c4:	ea50 0201 	orrs.w	r2, r0, r1
    86c8:	bf08      	it	eq
    86ca:	4770      	bxeq	lr
    86cc:	b530      	push	{r4, r5, lr}
    86ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    86d2:	d502      	bpl.n	86da <__aeabi_l2d+0x16>
    86d4:	4240      	negs	r0, r0
    86d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    86da:	f44f 6480 	mov.w	r4, #1024	; 0x400
    86de:	f104 0432 	add.w	r4, r4, #50	; 0x32
    86e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    86e6:	f43f aed8 	beq.w	849a <__adddf3+0xe6>
    86ea:	f04f 0203 	mov.w	r2, #3
    86ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    86f2:	bf18      	it	ne
    86f4:	3203      	addne	r2, #3
    86f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    86fa:	bf18      	it	ne
    86fc:	3203      	addne	r2, #3
    86fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    8702:	f1c2 0320 	rsb	r3, r2, #32
    8706:	fa00 fc03 	lsl.w	ip, r0, r3
    870a:	fa20 f002 	lsr.w	r0, r0, r2
    870e:	fa01 fe03 	lsl.w	lr, r1, r3
    8712:	ea40 000e 	orr.w	r0, r0, lr
    8716:	fa21 f102 	lsr.w	r1, r1, r2
    871a:	4414      	add	r4, r2
    871c:	e6bd      	b.n	849a <__adddf3+0xe6>
    871e:	bf00      	nop

00008720 <__aeabi_dmul>:
    8720:	b570      	push	{r4, r5, r6, lr}
    8722:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    872e:	bf1d      	ittte	ne
    8730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8734:	ea94 0f0c 	teqne	r4, ip
    8738:	ea95 0f0c 	teqne	r5, ip
    873c:	f000 f8de 	bleq	88fc <__aeabi_dmul+0x1dc>
    8740:	442c      	add	r4, r5
    8742:	ea81 0603 	eor.w	r6, r1, r3
    8746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    874a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    874e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8752:	bf18      	it	ne
    8754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    875c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8760:	d038      	beq.n	87d4 <__aeabi_dmul+0xb4>
    8762:	fba0 ce02 	umull	ip, lr, r0, r2
    8766:	f04f 0500 	mov.w	r5, #0
    876a:	fbe1 e502 	umlal	lr, r5, r1, r2
    876e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8772:	fbe0 e503 	umlal	lr, r5, r0, r3
    8776:	f04f 0600 	mov.w	r6, #0
    877a:	fbe1 5603 	umlal	r5, r6, r1, r3
    877e:	f09c 0f00 	teq	ip, #0
    8782:	bf18      	it	ne
    8784:	f04e 0e01 	orrne.w	lr, lr, #1
    8788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    878c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8794:	d204      	bcs.n	87a0 <__aeabi_dmul+0x80>
    8796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    879a:	416d      	adcs	r5, r5
    879c:	eb46 0606 	adc.w	r6, r6, r6
    87a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    87a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    87a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    87ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    87b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    87b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    87b8:	bf88      	it	hi
    87ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    87be:	d81e      	bhi.n	87fe <__aeabi_dmul+0xde>
    87c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    87c4:	bf08      	it	eq
    87c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    87ca:	f150 0000 	adcs.w	r0, r0, #0
    87ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    87d2:	bd70      	pop	{r4, r5, r6, pc}
    87d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    87d8:	ea46 0101 	orr.w	r1, r6, r1
    87dc:	ea40 0002 	orr.w	r0, r0, r2
    87e0:	ea81 0103 	eor.w	r1, r1, r3
    87e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    87e8:	bfc2      	ittt	gt
    87ea:	ebd4 050c 	rsbsgt	r5, r4, ip
    87ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    87f2:	bd70      	popgt	{r4, r5, r6, pc}
    87f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    87f8:	f04f 0e00 	mov.w	lr, #0
    87fc:	3c01      	subs	r4, #1
    87fe:	f300 80ab 	bgt.w	8958 <__aeabi_dmul+0x238>
    8802:	f114 0f36 	cmn.w	r4, #54	; 0x36
    8806:	bfde      	ittt	le
    8808:	2000      	movle	r0, #0
    880a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    880e:	bd70      	pople	{r4, r5, r6, pc}
    8810:	f1c4 0400 	rsb	r4, r4, #0
    8814:	3c20      	subs	r4, #32
    8816:	da35      	bge.n	8884 <__aeabi_dmul+0x164>
    8818:	340c      	adds	r4, #12
    881a:	dc1b      	bgt.n	8854 <__aeabi_dmul+0x134>
    881c:	f104 0414 	add.w	r4, r4, #20
    8820:	f1c4 0520 	rsb	r5, r4, #32
    8824:	fa00 f305 	lsl.w	r3, r0, r5
    8828:	fa20 f004 	lsr.w	r0, r0, r4
    882c:	fa01 f205 	lsl.w	r2, r1, r5
    8830:	ea40 0002 	orr.w	r0, r0, r2
    8834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    8838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    883c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8840:	fa21 f604 	lsr.w	r6, r1, r4
    8844:	eb42 0106 	adc.w	r1, r2, r6
    8848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    884c:	bf08      	it	eq
    884e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8852:	bd70      	pop	{r4, r5, r6, pc}
    8854:	f1c4 040c 	rsb	r4, r4, #12
    8858:	f1c4 0520 	rsb	r5, r4, #32
    885c:	fa00 f304 	lsl.w	r3, r0, r4
    8860:	fa20 f005 	lsr.w	r0, r0, r5
    8864:	fa01 f204 	lsl.w	r2, r1, r4
    8868:	ea40 0002 	orr.w	r0, r0, r2
    886c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8874:	f141 0100 	adc.w	r1, r1, #0
    8878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    887c:	bf08      	it	eq
    887e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8882:	bd70      	pop	{r4, r5, r6, pc}
    8884:	f1c4 0520 	rsb	r5, r4, #32
    8888:	fa00 f205 	lsl.w	r2, r0, r5
    888c:	ea4e 0e02 	orr.w	lr, lr, r2
    8890:	fa20 f304 	lsr.w	r3, r0, r4
    8894:	fa01 f205 	lsl.w	r2, r1, r5
    8898:	ea43 0302 	orr.w	r3, r3, r2
    889c:	fa21 f004 	lsr.w	r0, r1, r4
    88a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    88a4:	fa21 f204 	lsr.w	r2, r1, r4
    88a8:	ea20 0002 	bic.w	r0, r0, r2
    88ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    88b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    88b4:	bf08      	it	eq
    88b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    88ba:	bd70      	pop	{r4, r5, r6, pc}
    88bc:	f094 0f00 	teq	r4, #0
    88c0:	d10f      	bne.n	88e2 <__aeabi_dmul+0x1c2>
    88c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    88c6:	0040      	lsls	r0, r0, #1
    88c8:	eb41 0101 	adc.w	r1, r1, r1
    88cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    88d0:	bf08      	it	eq
    88d2:	3c01      	subeq	r4, #1
    88d4:	d0f7      	beq.n	88c6 <__aeabi_dmul+0x1a6>
    88d6:	ea41 0106 	orr.w	r1, r1, r6
    88da:	f095 0f00 	teq	r5, #0
    88de:	bf18      	it	ne
    88e0:	4770      	bxne	lr
    88e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    88e6:	0052      	lsls	r2, r2, #1
    88e8:	eb43 0303 	adc.w	r3, r3, r3
    88ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    88f0:	bf08      	it	eq
    88f2:	3d01      	subeq	r5, #1
    88f4:	d0f7      	beq.n	88e6 <__aeabi_dmul+0x1c6>
    88f6:	ea43 0306 	orr.w	r3, r3, r6
    88fa:	4770      	bx	lr
    88fc:	ea94 0f0c 	teq	r4, ip
    8900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8904:	bf18      	it	ne
    8906:	ea95 0f0c 	teqne	r5, ip
    890a:	d00c      	beq.n	8926 <__aeabi_dmul+0x206>
    890c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8910:	bf18      	it	ne
    8912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8916:	d1d1      	bne.n	88bc <__aeabi_dmul+0x19c>
    8918:	ea81 0103 	eor.w	r1, r1, r3
    891c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8920:	f04f 0000 	mov.w	r0, #0
    8924:	bd70      	pop	{r4, r5, r6, pc}
    8926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    892a:	bf06      	itte	eq
    892c:	4610      	moveq	r0, r2
    892e:	4619      	moveq	r1, r3
    8930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8934:	d019      	beq.n	896a <__aeabi_dmul+0x24a>
    8936:	ea94 0f0c 	teq	r4, ip
    893a:	d102      	bne.n	8942 <__aeabi_dmul+0x222>
    893c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    8940:	d113      	bne.n	896a <__aeabi_dmul+0x24a>
    8942:	ea95 0f0c 	teq	r5, ip
    8946:	d105      	bne.n	8954 <__aeabi_dmul+0x234>
    8948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    894c:	bf1c      	itt	ne
    894e:	4610      	movne	r0, r2
    8950:	4619      	movne	r1, r3
    8952:	d10a      	bne.n	896a <__aeabi_dmul+0x24a>
    8954:	ea81 0103 	eor.w	r1, r1, r3
    8958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    895c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8964:	f04f 0000 	mov.w	r0, #0
    8968:	bd70      	pop	{r4, r5, r6, pc}
    896a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    896e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8972:	bd70      	pop	{r4, r5, r6, pc}

00008974 <__aeabi_ddiv>:
    8974:	b570      	push	{r4, r5, r6, lr}
    8976:	f04f 0cff 	mov.w	ip, #255	; 0xff
    897a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    897e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8982:	bf1d      	ittte	ne
    8984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8988:	ea94 0f0c 	teqne	r4, ip
    898c:	ea95 0f0c 	teqne	r5, ip
    8990:	f000 f8a7 	bleq	8ae2 <__aeabi_ddiv+0x16e>
    8994:	eba4 0405 	sub.w	r4, r4, r5
    8998:	ea81 0e03 	eor.w	lr, r1, r3
    899c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    89a4:	f000 8088 	beq.w	8ab8 <__aeabi_ddiv+0x144>
    89a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    89ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    89b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    89b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    89b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    89bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    89c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    89c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    89c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    89cc:	429d      	cmp	r5, r3
    89ce:	bf08      	it	eq
    89d0:	4296      	cmpeq	r6, r2
    89d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    89d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    89da:	d202      	bcs.n	89e2 <__aeabi_ddiv+0x6e>
    89dc:	085b      	lsrs	r3, r3, #1
    89de:	ea4f 0232 	mov.w	r2, r2, rrx
    89e2:	1ab6      	subs	r6, r6, r2
    89e4:	eb65 0503 	sbc.w	r5, r5, r3
    89e8:	085b      	lsrs	r3, r3, #1
    89ea:	ea4f 0232 	mov.w	r2, r2, rrx
    89ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    89f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    89f6:	ebb6 0e02 	subs.w	lr, r6, r2
    89fa:	eb75 0e03 	sbcs.w	lr, r5, r3
    89fe:	bf22      	ittt	cs
    8a00:	1ab6      	subcs	r6, r6, r2
    8a02:	4675      	movcs	r5, lr
    8a04:	ea40 000c 	orrcs.w	r0, r0, ip
    8a08:	085b      	lsrs	r3, r3, #1
    8a0a:	ea4f 0232 	mov.w	r2, r2, rrx
    8a0e:	ebb6 0e02 	subs.w	lr, r6, r2
    8a12:	eb75 0e03 	sbcs.w	lr, r5, r3
    8a16:	bf22      	ittt	cs
    8a18:	1ab6      	subcs	r6, r6, r2
    8a1a:	4675      	movcs	r5, lr
    8a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8a20:	085b      	lsrs	r3, r3, #1
    8a22:	ea4f 0232 	mov.w	r2, r2, rrx
    8a26:	ebb6 0e02 	subs.w	lr, r6, r2
    8a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
    8a2e:	bf22      	ittt	cs
    8a30:	1ab6      	subcs	r6, r6, r2
    8a32:	4675      	movcs	r5, lr
    8a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8a38:	085b      	lsrs	r3, r3, #1
    8a3a:	ea4f 0232 	mov.w	r2, r2, rrx
    8a3e:	ebb6 0e02 	subs.w	lr, r6, r2
    8a42:	eb75 0e03 	sbcs.w	lr, r5, r3
    8a46:	bf22      	ittt	cs
    8a48:	1ab6      	subcs	r6, r6, r2
    8a4a:	4675      	movcs	r5, lr
    8a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8a50:	ea55 0e06 	orrs.w	lr, r5, r6
    8a54:	d018      	beq.n	8a88 <__aeabi_ddiv+0x114>
    8a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
    8a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    8a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8a72:	d1c0      	bne.n	89f6 <__aeabi_ddiv+0x82>
    8a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8a78:	d10b      	bne.n	8a92 <__aeabi_ddiv+0x11e>
    8a7a:	ea41 0100 	orr.w	r1, r1, r0
    8a7e:	f04f 0000 	mov.w	r0, #0
    8a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8a86:	e7b6      	b.n	89f6 <__aeabi_ddiv+0x82>
    8a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8a8c:	bf04      	itt	eq
    8a8e:	4301      	orreq	r1, r0
    8a90:	2000      	moveq	r0, #0
    8a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8a96:	bf88      	it	hi
    8a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8a9c:	f63f aeaf 	bhi.w	87fe <__aeabi_dmul+0xde>
    8aa0:	ebb5 0c03 	subs.w	ip, r5, r3
    8aa4:	bf04      	itt	eq
    8aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
    8aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8aae:	f150 0000 	adcs.w	r0, r0, #0
    8ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8ab6:	bd70      	pop	{r4, r5, r6, pc}
    8ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8ac4:	bfc2      	ittt	gt
    8ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
    8aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8ace:	bd70      	popgt	{r4, r5, r6, pc}
    8ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8ad4:	f04f 0e00 	mov.w	lr, #0
    8ad8:	3c01      	subs	r4, #1
    8ada:	e690      	b.n	87fe <__aeabi_dmul+0xde>
    8adc:	ea45 0e06 	orr.w	lr, r5, r6
    8ae0:	e68d      	b.n	87fe <__aeabi_dmul+0xde>
    8ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8ae6:	ea94 0f0c 	teq	r4, ip
    8aea:	bf08      	it	eq
    8aec:	ea95 0f0c 	teqeq	r5, ip
    8af0:	f43f af3b 	beq.w	896a <__aeabi_dmul+0x24a>
    8af4:	ea94 0f0c 	teq	r4, ip
    8af8:	d10a      	bne.n	8b10 <__aeabi_ddiv+0x19c>
    8afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8afe:	f47f af34 	bne.w	896a <__aeabi_dmul+0x24a>
    8b02:	ea95 0f0c 	teq	r5, ip
    8b06:	f47f af25 	bne.w	8954 <__aeabi_dmul+0x234>
    8b0a:	4610      	mov	r0, r2
    8b0c:	4619      	mov	r1, r3
    8b0e:	e72c      	b.n	896a <__aeabi_dmul+0x24a>
    8b10:	ea95 0f0c 	teq	r5, ip
    8b14:	d106      	bne.n	8b24 <__aeabi_ddiv+0x1b0>
    8b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8b1a:	f43f aefd 	beq.w	8918 <__aeabi_dmul+0x1f8>
    8b1e:	4610      	mov	r0, r2
    8b20:	4619      	mov	r1, r3
    8b22:	e722      	b.n	896a <__aeabi_dmul+0x24a>
    8b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8b28:	bf18      	it	ne
    8b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8b2e:	f47f aec5 	bne.w	88bc <__aeabi_dmul+0x19c>
    8b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    8b36:	f47f af0d 	bne.w	8954 <__aeabi_dmul+0x234>
    8b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    8b3e:	f47f aeeb 	bne.w	8918 <__aeabi_dmul+0x1f8>
    8b42:	e712      	b.n	896a <__aeabi_dmul+0x24a>

00008b44 <__gedf2>:
    8b44:	f04f 3cff 	mov.w	ip, #4294967295
    8b48:	e006      	b.n	8b58 <__cmpdf2+0x4>
    8b4a:	bf00      	nop

00008b4c <__ledf2>:
    8b4c:	f04f 0c01 	mov.w	ip, #1
    8b50:	e002      	b.n	8b58 <__cmpdf2+0x4>
    8b52:	bf00      	nop

00008b54 <__cmpdf2>:
    8b54:	f04f 0c01 	mov.w	ip, #1
    8b58:	f84d cd04 	str.w	ip, [sp, #-4]!
    8b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8b68:	bf18      	it	ne
    8b6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8b6e:	d01b      	beq.n	8ba8 <__cmpdf2+0x54>
    8b70:	b001      	add	sp, #4
    8b72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8b76:	bf0c      	ite	eq
    8b78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8b7c:	ea91 0f03 	teqne	r1, r3
    8b80:	bf02      	ittt	eq
    8b82:	ea90 0f02 	teqeq	r0, r2
    8b86:	2000      	moveq	r0, #0
    8b88:	4770      	bxeq	lr
    8b8a:	f110 0f00 	cmn.w	r0, #0
    8b8e:	ea91 0f03 	teq	r1, r3
    8b92:	bf58      	it	pl
    8b94:	4299      	cmppl	r1, r3
    8b96:	bf08      	it	eq
    8b98:	4290      	cmpeq	r0, r2
    8b9a:	bf2c      	ite	cs
    8b9c:	17d8      	asrcs	r0, r3, #31
    8b9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8ba2:	f040 0001 	orr.w	r0, r0, #1
    8ba6:	4770      	bx	lr
    8ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8bb0:	d102      	bne.n	8bb8 <__cmpdf2+0x64>
    8bb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8bb6:	d107      	bne.n	8bc8 <__cmpdf2+0x74>
    8bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8bc0:	d1d6      	bne.n	8b70 <__cmpdf2+0x1c>
    8bc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8bc6:	d0d3      	beq.n	8b70 <__cmpdf2+0x1c>
    8bc8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8bcc:	4770      	bx	lr
    8bce:	bf00      	nop

00008bd0 <__aeabi_cdrcmple>:
    8bd0:	4684      	mov	ip, r0
    8bd2:	4610      	mov	r0, r2
    8bd4:	4662      	mov	r2, ip
    8bd6:	468c      	mov	ip, r1
    8bd8:	4619      	mov	r1, r3
    8bda:	4663      	mov	r3, ip
    8bdc:	e000      	b.n	8be0 <__aeabi_cdcmpeq>
    8bde:	bf00      	nop

00008be0 <__aeabi_cdcmpeq>:
    8be0:	b501      	push	{r0, lr}
    8be2:	f7ff ffb7 	bl	8b54 <__cmpdf2>
    8be6:	2800      	cmp	r0, #0
    8be8:	bf48      	it	mi
    8bea:	f110 0f00 	cmnmi.w	r0, #0
    8bee:	bd01      	pop	{r0, pc}

00008bf0 <__aeabi_dcmpeq>:
    8bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8bf4:	f7ff fff4 	bl	8be0 <__aeabi_cdcmpeq>
    8bf8:	bf0c      	ite	eq
    8bfa:	2001      	moveq	r0, #1
    8bfc:	2000      	movne	r0, #0
    8bfe:	f85d fb08 	ldr.w	pc, [sp], #8
    8c02:	bf00      	nop

00008c04 <__aeabi_dcmplt>:
    8c04:	f84d ed08 	str.w	lr, [sp, #-8]!
    8c08:	f7ff ffea 	bl	8be0 <__aeabi_cdcmpeq>
    8c0c:	bf34      	ite	cc
    8c0e:	2001      	movcc	r0, #1
    8c10:	2000      	movcs	r0, #0
    8c12:	f85d fb08 	ldr.w	pc, [sp], #8
    8c16:	bf00      	nop

00008c18 <__aeabi_dcmple>:
    8c18:	f84d ed08 	str.w	lr, [sp, #-8]!
    8c1c:	f7ff ffe0 	bl	8be0 <__aeabi_cdcmpeq>
    8c20:	bf94      	ite	ls
    8c22:	2001      	movls	r0, #1
    8c24:	2000      	movhi	r0, #0
    8c26:	f85d fb08 	ldr.w	pc, [sp], #8
    8c2a:	bf00      	nop

00008c2c <__aeabi_dcmpge>:
    8c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8c30:	f7ff ffce 	bl	8bd0 <__aeabi_cdrcmple>
    8c34:	bf94      	ite	ls
    8c36:	2001      	movls	r0, #1
    8c38:	2000      	movhi	r0, #0
    8c3a:	f85d fb08 	ldr.w	pc, [sp], #8
    8c3e:	bf00      	nop

00008c40 <__aeabi_dcmpgt>:
    8c40:	f84d ed08 	str.w	lr, [sp, #-8]!
    8c44:	f7ff ffc4 	bl	8bd0 <__aeabi_cdrcmple>
    8c48:	bf34      	ite	cc
    8c4a:	2001      	movcc	r0, #1
    8c4c:	2000      	movcs	r0, #0
    8c4e:	f85d fb08 	ldr.w	pc, [sp], #8
    8c52:	bf00      	nop

00008c54 <__aeabi_dcmpun>:
    8c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8c5c:	d102      	bne.n	8c64 <__aeabi_dcmpun+0x10>
    8c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8c62:	d10a      	bne.n	8c7a <__aeabi_dcmpun+0x26>
    8c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8c6c:	d102      	bne.n	8c74 <__aeabi_dcmpun+0x20>
    8c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8c72:	d102      	bne.n	8c7a <__aeabi_dcmpun+0x26>
    8c74:	f04f 0000 	mov.w	r0, #0
    8c78:	4770      	bx	lr
    8c7a:	f04f 0001 	mov.w	r0, #1
    8c7e:	4770      	bx	lr

00008c80 <__aeabi_d2iz>:
    8c80:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8c84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8c88:	d215      	bcs.n	8cb6 <__aeabi_d2iz+0x36>
    8c8a:	d511      	bpl.n	8cb0 <__aeabi_d2iz+0x30>
    8c8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8c90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8c94:	d912      	bls.n	8cbc <__aeabi_d2iz+0x3c>
    8c96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8c9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8ca6:	fa23 f002 	lsr.w	r0, r3, r2
    8caa:	bf18      	it	ne
    8cac:	4240      	negne	r0, r0
    8cae:	4770      	bx	lr
    8cb0:	f04f 0000 	mov.w	r0, #0
    8cb4:	4770      	bx	lr
    8cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8cba:	d105      	bne.n	8cc8 <__aeabi_d2iz+0x48>
    8cbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8cc0:	bf08      	it	eq
    8cc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    8cc6:	4770      	bx	lr
    8cc8:	f04f 0000 	mov.w	r0, #0
    8ccc:	4770      	bx	lr
    8cce:	bf00      	nop

00008cd0 <__aeabi_d2uiz>:
    8cd0:	004a      	lsls	r2, r1, #1
    8cd2:	d211      	bcs.n	8cf8 <__aeabi_d2uiz+0x28>
    8cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8cd8:	d211      	bcs.n	8cfe <__aeabi_d2uiz+0x2e>
    8cda:	d50d      	bpl.n	8cf8 <__aeabi_d2uiz+0x28>
    8cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8ce4:	d40e      	bmi.n	8d04 <__aeabi_d2uiz+0x34>
    8ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8cf2:	fa23 f002 	lsr.w	r0, r3, r2
    8cf6:	4770      	bx	lr
    8cf8:	f04f 0000 	mov.w	r0, #0
    8cfc:	4770      	bx	lr
    8cfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8d02:	d102      	bne.n	8d0a <__aeabi_d2uiz+0x3a>
    8d04:	f04f 30ff 	mov.w	r0, #4294967295
    8d08:	4770      	bx	lr
    8d0a:	f04f 0000 	mov.w	r0, #0
    8d0e:	4770      	bx	lr

00008d10 <__aeabi_d2f>:
    8d10:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8d14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8d18:	bf24      	itt	cs
    8d1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8d1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8d22:	d90d      	bls.n	8d40 <__aeabi_d2f+0x30>
    8d24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8d28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8d2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8d30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8d34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8d38:	bf08      	it	eq
    8d3a:	f020 0001 	biceq.w	r0, r0, #1
    8d3e:	4770      	bx	lr
    8d40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8d44:	d121      	bne.n	8d8a <__aeabi_d2f+0x7a>
    8d46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8d4a:	bfbc      	itt	lt
    8d4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8d50:	4770      	bxlt	lr
    8d52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8d56:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8d5a:	f1c2 0218 	rsb	r2, r2, #24
    8d5e:	f1c2 0c20 	rsb	ip, r2, #32
    8d62:	fa10 f30c 	lsls.w	r3, r0, ip
    8d66:	fa20 f002 	lsr.w	r0, r0, r2
    8d6a:	bf18      	it	ne
    8d6c:	f040 0001 	orrne.w	r0, r0, #1
    8d70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8d74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8d78:	fa03 fc0c 	lsl.w	ip, r3, ip
    8d7c:	ea40 000c 	orr.w	r0, r0, ip
    8d80:	fa23 f302 	lsr.w	r3, r3, r2
    8d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8d88:	e7cc      	b.n	8d24 <__aeabi_d2f+0x14>
    8d8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8d8e:	d107      	bne.n	8da0 <__aeabi_d2f+0x90>
    8d90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8d94:	bf1e      	ittt	ne
    8d96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8d9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8d9e:	4770      	bxne	lr
    8da0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dac:	4770      	bx	lr
    8dae:	bf00      	nop

00008db0 <__aeabi_frsub>:
    8db0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8db4:	e002      	b.n	8dbc <__addsf3>
    8db6:	bf00      	nop

00008db8 <__aeabi_fsub>:
    8db8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008dbc <__addsf3>:
    8dbc:	0042      	lsls	r2, r0, #1
    8dbe:	bf1f      	itttt	ne
    8dc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8dc4:	ea92 0f03 	teqne	r2, r3
    8dc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8dcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8dd0:	d06a      	beq.n	8ea8 <__addsf3+0xec>
    8dd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8dd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8dda:	bfc1      	itttt	gt
    8ddc:	18d2      	addgt	r2, r2, r3
    8dde:	4041      	eorgt	r1, r0
    8de0:	4048      	eorgt	r0, r1
    8de2:	4041      	eorgt	r1, r0
    8de4:	bfb8      	it	lt
    8de6:	425b      	neglt	r3, r3
    8de8:	2b19      	cmp	r3, #25
    8dea:	bf88      	it	hi
    8dec:	4770      	bxhi	lr
    8dee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8df2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8df6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8dfa:	bf18      	it	ne
    8dfc:	4240      	negne	r0, r0
    8dfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8e02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8e06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8e0a:	bf18      	it	ne
    8e0c:	4249      	negne	r1, r1
    8e0e:	ea92 0f03 	teq	r2, r3
    8e12:	d03f      	beq.n	8e94 <__addsf3+0xd8>
    8e14:	f1a2 0201 	sub.w	r2, r2, #1
    8e18:	fa41 fc03 	asr.w	ip, r1, r3
    8e1c:	eb10 000c 	adds.w	r0, r0, ip
    8e20:	f1c3 0320 	rsb	r3, r3, #32
    8e24:	fa01 f103 	lsl.w	r1, r1, r3
    8e28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8e2c:	d502      	bpl.n	8e34 <__addsf3+0x78>
    8e2e:	4249      	negs	r1, r1
    8e30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8e34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8e38:	d313      	bcc.n	8e62 <__addsf3+0xa6>
    8e3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8e3e:	d306      	bcc.n	8e4e <__addsf3+0x92>
    8e40:	0840      	lsrs	r0, r0, #1
    8e42:	ea4f 0131 	mov.w	r1, r1, rrx
    8e46:	f102 0201 	add.w	r2, r2, #1
    8e4a:	2afe      	cmp	r2, #254	; 0xfe
    8e4c:	d251      	bcs.n	8ef2 <__addsf3+0x136>
    8e4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8e52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8e56:	bf08      	it	eq
    8e58:	f020 0001 	biceq.w	r0, r0, #1
    8e5c:	ea40 0003 	orr.w	r0, r0, r3
    8e60:	4770      	bx	lr
    8e62:	0049      	lsls	r1, r1, #1
    8e64:	eb40 0000 	adc.w	r0, r0, r0
    8e68:	3a01      	subs	r2, #1
    8e6a:	bf28      	it	cs
    8e6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8e70:	d2ed      	bcs.n	8e4e <__addsf3+0x92>
    8e72:	fab0 fc80 	clz	ip, r0
    8e76:	f1ac 0c08 	sub.w	ip, ip, #8
    8e7a:	ebb2 020c 	subs.w	r2, r2, ip
    8e7e:	fa00 f00c 	lsl.w	r0, r0, ip
    8e82:	bfaa      	itet	ge
    8e84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8e88:	4252      	neglt	r2, r2
    8e8a:	4318      	orrge	r0, r3
    8e8c:	bfbc      	itt	lt
    8e8e:	40d0      	lsrlt	r0, r2
    8e90:	4318      	orrlt	r0, r3
    8e92:	4770      	bx	lr
    8e94:	f092 0f00 	teq	r2, #0
    8e98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8e9c:	bf06      	itte	eq
    8e9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8ea2:	3201      	addeq	r2, #1
    8ea4:	3b01      	subne	r3, #1
    8ea6:	e7b5      	b.n	8e14 <__addsf3+0x58>
    8ea8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8eb0:	bf18      	it	ne
    8eb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8eb6:	d021      	beq.n	8efc <__addsf3+0x140>
    8eb8:	ea92 0f03 	teq	r2, r3
    8ebc:	d004      	beq.n	8ec8 <__addsf3+0x10c>
    8ebe:	f092 0f00 	teq	r2, #0
    8ec2:	bf08      	it	eq
    8ec4:	4608      	moveq	r0, r1
    8ec6:	4770      	bx	lr
    8ec8:	ea90 0f01 	teq	r0, r1
    8ecc:	bf1c      	itt	ne
    8ece:	2000      	movne	r0, #0
    8ed0:	4770      	bxne	lr
    8ed2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8ed6:	d104      	bne.n	8ee2 <__addsf3+0x126>
    8ed8:	0040      	lsls	r0, r0, #1
    8eda:	bf28      	it	cs
    8edc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ee0:	4770      	bx	lr
    8ee2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8ee6:	bf3c      	itt	cc
    8ee8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8eec:	4770      	bxcc	lr
    8eee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ef2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8efa:	4770      	bx	lr
    8efc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8f00:	bf16      	itet	ne
    8f02:	4608      	movne	r0, r1
    8f04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8f08:	4601      	movne	r1, r0
    8f0a:	0242      	lsls	r2, r0, #9
    8f0c:	bf06      	itte	eq
    8f0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8f12:	ea90 0f01 	teqeq	r0, r1
    8f16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8f1a:	4770      	bx	lr

00008f1c <__aeabi_ui2f>:
    8f1c:	f04f 0300 	mov.w	r3, #0
    8f20:	e004      	b.n	8f2c <__aeabi_i2f+0x8>
    8f22:	bf00      	nop

00008f24 <__aeabi_i2f>:
    8f24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8f28:	bf48      	it	mi
    8f2a:	4240      	negmi	r0, r0
    8f2c:	ea5f 0c00 	movs.w	ip, r0
    8f30:	bf08      	it	eq
    8f32:	4770      	bxeq	lr
    8f34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8f38:	4601      	mov	r1, r0
    8f3a:	f04f 0000 	mov.w	r0, #0
    8f3e:	e01c      	b.n	8f7a <__aeabi_l2f+0x2a>

00008f40 <__aeabi_ul2f>:
    8f40:	ea50 0201 	orrs.w	r2, r0, r1
    8f44:	bf08      	it	eq
    8f46:	4770      	bxeq	lr
    8f48:	f04f 0300 	mov.w	r3, #0
    8f4c:	e00a      	b.n	8f64 <__aeabi_l2f+0x14>
    8f4e:	bf00      	nop

00008f50 <__aeabi_l2f>:
    8f50:	ea50 0201 	orrs.w	r2, r0, r1
    8f54:	bf08      	it	eq
    8f56:	4770      	bxeq	lr
    8f58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8f5c:	d502      	bpl.n	8f64 <__aeabi_l2f+0x14>
    8f5e:	4240      	negs	r0, r0
    8f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f64:	ea5f 0c01 	movs.w	ip, r1
    8f68:	bf02      	ittt	eq
    8f6a:	4684      	moveq	ip, r0
    8f6c:	4601      	moveq	r1, r0
    8f6e:	2000      	moveq	r0, #0
    8f70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8f74:	bf08      	it	eq
    8f76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8f7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8f7e:	fabc f28c 	clz	r2, ip
    8f82:	3a08      	subs	r2, #8
    8f84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8f88:	db10      	blt.n	8fac <__aeabi_l2f+0x5c>
    8f8a:	fa01 fc02 	lsl.w	ip, r1, r2
    8f8e:	4463      	add	r3, ip
    8f90:	fa00 fc02 	lsl.w	ip, r0, r2
    8f94:	f1c2 0220 	rsb	r2, r2, #32
    8f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8f9c:	fa20 f202 	lsr.w	r2, r0, r2
    8fa0:	eb43 0002 	adc.w	r0, r3, r2
    8fa4:	bf08      	it	eq
    8fa6:	f020 0001 	biceq.w	r0, r0, #1
    8faa:	4770      	bx	lr
    8fac:	f102 0220 	add.w	r2, r2, #32
    8fb0:	fa01 fc02 	lsl.w	ip, r1, r2
    8fb4:	f1c2 0220 	rsb	r2, r2, #32
    8fb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8fbc:	fa21 f202 	lsr.w	r2, r1, r2
    8fc0:	eb43 0002 	adc.w	r0, r3, r2
    8fc4:	bf08      	it	eq
    8fc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8fca:	4770      	bx	lr

00008fcc <__aeabi_uldivmod>:
    8fcc:	b953      	cbnz	r3, 8fe4 <__aeabi_uldivmod+0x18>
    8fce:	b94a      	cbnz	r2, 8fe4 <__aeabi_uldivmod+0x18>
    8fd0:	2900      	cmp	r1, #0
    8fd2:	bf08      	it	eq
    8fd4:	2800      	cmpeq	r0, #0
    8fd6:	bf1c      	itt	ne
    8fd8:	f04f 31ff 	movne.w	r1, #4294967295
    8fdc:	f04f 30ff 	movne.w	r0, #4294967295
    8fe0:	f000 b82a 	b.w	9038 <__aeabi_idiv0>
    8fe4:	f1ad 0c08 	sub.w	ip, sp, #8
    8fe8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8fec:	f000 f83d 	bl	906a <__udivmoddi4>
    8ff0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ff8:	b004      	add	sp, #16
    8ffa:	4770      	bx	lr

00008ffc <__aeabi_d2ulz>:
    8ffc:	b5d0      	push	{r4, r6, r7, lr}
    8ffe:	2200      	movs	r2, #0
    9000:	4b0b      	ldr	r3, [pc, #44]	; (9030 <__aeabi_d2ulz+0x34>)
    9002:	4606      	mov	r6, r0
    9004:	460f      	mov	r7, r1
    9006:	f7ff fb8b 	bl	8720 <__aeabi_dmul>
    900a:	f7ff fe61 	bl	8cd0 <__aeabi_d2uiz>
    900e:	4604      	mov	r4, r0
    9010:	f7ff fb0c 	bl	862c <__aeabi_ui2d>
    9014:	2200      	movs	r2, #0
    9016:	4b07      	ldr	r3, [pc, #28]	; (9034 <__aeabi_d2ulz+0x38>)
    9018:	f7ff fb82 	bl	8720 <__aeabi_dmul>
    901c:	4602      	mov	r2, r0
    901e:	460b      	mov	r3, r1
    9020:	4630      	mov	r0, r6
    9022:	4639      	mov	r1, r7
    9024:	f7ff f9c4 	bl	83b0 <__aeabi_dsub>
    9028:	f7ff fe52 	bl	8cd0 <__aeabi_d2uiz>
    902c:	4621      	mov	r1, r4
    902e:	bdd0      	pop	{r4, r6, r7, pc}
    9030:	3df00000 	.word	0x3df00000
    9034:	41f00000 	.word	0x41f00000

00009038 <__aeabi_idiv0>:
    9038:	4770      	bx	lr
    903a:	bf00      	nop

0000903c <__aeabi_d2lz>:
    903c:	b538      	push	{r3, r4, r5, lr}
    903e:	2200      	movs	r2, #0
    9040:	2300      	movs	r3, #0
    9042:	4604      	mov	r4, r0
    9044:	460d      	mov	r5, r1
    9046:	f7ff fddd 	bl	8c04 <__aeabi_dcmplt>
    904a:	b928      	cbnz	r0, 9058 <__aeabi_d2lz+0x1c>
    904c:	4620      	mov	r0, r4
    904e:	4629      	mov	r1, r5
    9050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9054:	f7ff bfd2 	b.w	8ffc <__aeabi_d2ulz>
    9058:	4620      	mov	r0, r4
    905a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    905e:	f7ff ffcd 	bl	8ffc <__aeabi_d2ulz>
    9062:	4240      	negs	r0, r0
    9064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9068:	bd38      	pop	{r3, r4, r5, pc}

0000906a <__udivmoddi4>:
    906a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    906e:	4686      	mov	lr, r0
    9070:	468c      	mov	ip, r1
    9072:	4608      	mov	r0, r1
    9074:	9e08      	ldr	r6, [sp, #32]
    9076:	4615      	mov	r5, r2
    9078:	4674      	mov	r4, lr
    907a:	4619      	mov	r1, r3
    907c:	2b00      	cmp	r3, #0
    907e:	f040 80c1 	bne.w	9204 <__udivmoddi4+0x19a>
    9082:	4285      	cmp	r5, r0
    9084:	fab2 f282 	clz	r2, r2
    9088:	d945      	bls.n	9116 <__udivmoddi4+0xac>
    908a:	b14a      	cbz	r2, 90a0 <__udivmoddi4+0x36>
    908c:	f1c2 0320 	rsb	r3, r2, #32
    9090:	fa00 fc02 	lsl.w	ip, r0, r2
    9094:	4095      	lsls	r5, r2
    9096:	4094      	lsls	r4, r2
    9098:	fa2e f303 	lsr.w	r3, lr, r3
    909c:	ea43 0c0c 	orr.w	ip, r3, ip
    90a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90a4:	b2a8      	uxth	r0, r5
    90a6:	0c23      	lsrs	r3, r4, #16
    90a8:	fbbc f8fe 	udiv	r8, ip, lr
    90ac:	fb0e cc18 	mls	ip, lr, r8, ip
    90b0:	fb08 f900 	mul.w	r9, r8, r0
    90b4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90b8:	4599      	cmp	r9, r3
    90ba:	d928      	bls.n	910e <__udivmoddi4+0xa4>
    90bc:	18eb      	adds	r3, r5, r3
    90be:	f108 37ff 	add.w	r7, r8, #4294967295
    90c2:	d204      	bcs.n	90ce <__udivmoddi4+0x64>
    90c4:	4599      	cmp	r9, r3
    90c6:	d902      	bls.n	90ce <__udivmoddi4+0x64>
    90c8:	f1a8 0702 	sub.w	r7, r8, #2
    90cc:	442b      	add	r3, r5
    90ce:	eba3 0309 	sub.w	r3, r3, r9
    90d2:	b2a4      	uxth	r4, r4
    90d4:	fbb3 fcfe 	udiv	ip, r3, lr
    90d8:	fb0e 331c 	mls	r3, lr, ip, r3
    90dc:	fb0c f000 	mul.w	r0, ip, r0
    90e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    90e4:	42a0      	cmp	r0, r4
    90e6:	d914      	bls.n	9112 <__udivmoddi4+0xa8>
    90e8:	192c      	adds	r4, r5, r4
    90ea:	f10c 33ff 	add.w	r3, ip, #4294967295
    90ee:	d204      	bcs.n	90fa <__udivmoddi4+0x90>
    90f0:	42a0      	cmp	r0, r4
    90f2:	d902      	bls.n	90fa <__udivmoddi4+0x90>
    90f4:	f1ac 0302 	sub.w	r3, ip, #2
    90f8:	442c      	add	r4, r5
    90fa:	1a24      	subs	r4, r4, r0
    90fc:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9100:	b11e      	cbz	r6, 910a <__udivmoddi4+0xa0>
    9102:	40d4      	lsrs	r4, r2
    9104:	2300      	movs	r3, #0
    9106:	6034      	str	r4, [r6, #0]
    9108:	6073      	str	r3, [r6, #4]
    910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    910e:	4647      	mov	r7, r8
    9110:	e7dd      	b.n	90ce <__udivmoddi4+0x64>
    9112:	4663      	mov	r3, ip
    9114:	e7f1      	b.n	90fa <__udivmoddi4+0x90>
    9116:	bb92      	cbnz	r2, 917e <__udivmoddi4+0x114>
    9118:	1b43      	subs	r3, r0, r5
    911a:	2101      	movs	r1, #1
    911c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9120:	b2af      	uxth	r7, r5
    9122:	0c20      	lsrs	r0, r4, #16
    9124:	fbb3 fcfe 	udiv	ip, r3, lr
    9128:	fb0e 331c 	mls	r3, lr, ip, r3
    912c:	fb0c f807 	mul.w	r8, ip, r7
    9130:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9134:	4598      	cmp	r8, r3
    9136:	d961      	bls.n	91fc <__udivmoddi4+0x192>
    9138:	18eb      	adds	r3, r5, r3
    913a:	f10c 30ff 	add.w	r0, ip, #4294967295
    913e:	d204      	bcs.n	914a <__udivmoddi4+0xe0>
    9140:	4598      	cmp	r8, r3
    9142:	d902      	bls.n	914a <__udivmoddi4+0xe0>
    9144:	f1ac 0002 	sub.w	r0, ip, #2
    9148:	442b      	add	r3, r5
    914a:	eba3 0308 	sub.w	r3, r3, r8
    914e:	b2a4      	uxth	r4, r4
    9150:	fbb3 fcfe 	udiv	ip, r3, lr
    9154:	fb0e 331c 	mls	r3, lr, ip, r3
    9158:	fb0c f707 	mul.w	r7, ip, r7
    915c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9160:	42a7      	cmp	r7, r4
    9162:	d94d      	bls.n	9200 <__udivmoddi4+0x196>
    9164:	192c      	adds	r4, r5, r4
    9166:	f10c 33ff 	add.w	r3, ip, #4294967295
    916a:	d204      	bcs.n	9176 <__udivmoddi4+0x10c>
    916c:	42a7      	cmp	r7, r4
    916e:	d902      	bls.n	9176 <__udivmoddi4+0x10c>
    9170:	f1ac 0302 	sub.w	r3, ip, #2
    9174:	442c      	add	r4, r5
    9176:	1be4      	subs	r4, r4, r7
    9178:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    917c:	e7c0      	b.n	9100 <__udivmoddi4+0x96>
    917e:	f1c2 0320 	rsb	r3, r2, #32
    9182:	4095      	lsls	r5, r2
    9184:	4094      	lsls	r4, r2
    9186:	fa20 f103 	lsr.w	r1, r0, r3
    918a:	fa2e f303 	lsr.w	r3, lr, r3
    918e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9192:	4090      	lsls	r0, r2
    9194:	b2af      	uxth	r7, r5
    9196:	4303      	orrs	r3, r0
    9198:	fbb1 fcfe 	udiv	ip, r1, lr
    919c:	fb0e 101c 	mls	r0, lr, ip, r1
    91a0:	0c19      	lsrs	r1, r3, #16
    91a2:	fb0c f807 	mul.w	r8, ip, r7
    91a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91aa:	4588      	cmp	r8, r1
    91ac:	d922      	bls.n	91f4 <__udivmoddi4+0x18a>
    91ae:	1869      	adds	r1, r5, r1
    91b0:	f10c 30ff 	add.w	r0, ip, #4294967295
    91b4:	d204      	bcs.n	91c0 <__udivmoddi4+0x156>
    91b6:	4588      	cmp	r8, r1
    91b8:	d902      	bls.n	91c0 <__udivmoddi4+0x156>
    91ba:	f1ac 0002 	sub.w	r0, ip, #2
    91be:	4429      	add	r1, r5
    91c0:	eba1 0108 	sub.w	r1, r1, r8
    91c4:	b29b      	uxth	r3, r3
    91c6:	fbb1 fcfe 	udiv	ip, r1, lr
    91ca:	fb0e 111c 	mls	r1, lr, ip, r1
    91ce:	fb0c f707 	mul.w	r7, ip, r7
    91d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    91d6:	429f      	cmp	r7, r3
    91d8:	d90e      	bls.n	91f8 <__udivmoddi4+0x18e>
    91da:	18eb      	adds	r3, r5, r3
    91dc:	f10c 31ff 	add.w	r1, ip, #4294967295
    91e0:	d204      	bcs.n	91ec <__udivmoddi4+0x182>
    91e2:	429f      	cmp	r7, r3
    91e4:	d902      	bls.n	91ec <__udivmoddi4+0x182>
    91e6:	f1ac 0102 	sub.w	r1, ip, #2
    91ea:	442b      	add	r3, r5
    91ec:	1bdb      	subs	r3, r3, r7
    91ee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f2:	e793      	b.n	911c <__udivmoddi4+0xb2>
    91f4:	4660      	mov	r0, ip
    91f6:	e7e3      	b.n	91c0 <__udivmoddi4+0x156>
    91f8:	4661      	mov	r1, ip
    91fa:	e7f7      	b.n	91ec <__udivmoddi4+0x182>
    91fc:	4660      	mov	r0, ip
    91fe:	e7a4      	b.n	914a <__udivmoddi4+0xe0>
    9200:	4663      	mov	r3, ip
    9202:	e7b8      	b.n	9176 <__udivmoddi4+0x10c>
    9204:	4283      	cmp	r3, r0
    9206:	d906      	bls.n	9216 <__udivmoddi4+0x1ac>
    9208:	b916      	cbnz	r6, 9210 <__udivmoddi4+0x1a6>
    920a:	2100      	movs	r1, #0
    920c:	4608      	mov	r0, r1
    920e:	e77c      	b.n	910a <__udivmoddi4+0xa0>
    9210:	e9c6 e000 	strd	lr, r0, [r6]
    9214:	e7f9      	b.n	920a <__udivmoddi4+0x1a0>
    9216:	fab3 f783 	clz	r7, r3
    921a:	b98f      	cbnz	r7, 9240 <__udivmoddi4+0x1d6>
    921c:	4283      	cmp	r3, r0
    921e:	d301      	bcc.n	9224 <__udivmoddi4+0x1ba>
    9220:	4572      	cmp	r2, lr
    9222:	d808      	bhi.n	9236 <__udivmoddi4+0x1cc>
    9224:	ebbe 0402 	subs.w	r4, lr, r2
    9228:	eb60 0303 	sbc.w	r3, r0, r3
    922c:	2001      	movs	r0, #1
    922e:	469c      	mov	ip, r3
    9230:	b91e      	cbnz	r6, 923a <__udivmoddi4+0x1d0>
    9232:	2100      	movs	r1, #0
    9234:	e769      	b.n	910a <__udivmoddi4+0xa0>
    9236:	4638      	mov	r0, r7
    9238:	e7fa      	b.n	9230 <__udivmoddi4+0x1c6>
    923a:	e9c6 4c00 	strd	r4, ip, [r6]
    923e:	e7f8      	b.n	9232 <__udivmoddi4+0x1c8>
    9240:	f1c7 0c20 	rsb	ip, r7, #32
    9244:	40bb      	lsls	r3, r7
    9246:	fa0e f507 	lsl.w	r5, lr, r7
    924a:	fa22 f40c 	lsr.w	r4, r2, ip
    924e:	fa2e f10c 	lsr.w	r1, lr, ip
    9252:	40ba      	lsls	r2, r7
    9254:	431c      	orrs	r4, r3
    9256:	fa20 f30c 	lsr.w	r3, r0, ip
    925a:	40b8      	lsls	r0, r7
    925c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9260:	4301      	orrs	r1, r0
    9262:	fa1f fe84 	uxth.w	lr, r4
    9266:	fbb3 f8f9 	udiv	r8, r3, r9
    926a:	fb09 3018 	mls	r0, r9, r8, r3
    926e:	0c0b      	lsrs	r3, r1, #16
    9270:	fb08 fa0e 	mul.w	sl, r8, lr
    9274:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9278:	459a      	cmp	sl, r3
    927a:	d940      	bls.n	92fe <__udivmoddi4+0x294>
    927c:	18e3      	adds	r3, r4, r3
    927e:	f108 30ff 	add.w	r0, r8, #4294967295
    9282:	d204      	bcs.n	928e <__udivmoddi4+0x224>
    9284:	459a      	cmp	sl, r3
    9286:	d902      	bls.n	928e <__udivmoddi4+0x224>
    9288:	f1a8 0002 	sub.w	r0, r8, #2
    928c:	4423      	add	r3, r4
    928e:	eba3 030a 	sub.w	r3, r3, sl
    9292:	b289      	uxth	r1, r1
    9294:	fbb3 f8f9 	udiv	r8, r3, r9
    9298:	fb09 3318 	mls	r3, r9, r8, r3
    929c:	fb08 fe0e 	mul.w	lr, r8, lr
    92a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92a4:	458e      	cmp	lr, r1
    92a6:	d92c      	bls.n	9302 <__udivmoddi4+0x298>
    92a8:	1861      	adds	r1, r4, r1
    92aa:	f108 33ff 	add.w	r3, r8, #4294967295
    92ae:	d204      	bcs.n	92ba <__udivmoddi4+0x250>
    92b0:	458e      	cmp	lr, r1
    92b2:	d902      	bls.n	92ba <__udivmoddi4+0x250>
    92b4:	f1a8 0302 	sub.w	r3, r8, #2
    92b8:	4421      	add	r1, r4
    92ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    92be:	eba1 010e 	sub.w	r1, r1, lr
    92c2:	fba0 9802 	umull	r9, r8, r0, r2
    92c6:	4541      	cmp	r1, r8
    92c8:	46ce      	mov	lr, r9
    92ca:	4643      	mov	r3, r8
    92cc:	d302      	bcc.n	92d4 <__udivmoddi4+0x26a>
    92ce:	d106      	bne.n	92de <__udivmoddi4+0x274>
    92d0:	454d      	cmp	r5, r9
    92d2:	d204      	bcs.n	92de <__udivmoddi4+0x274>
    92d4:	3801      	subs	r0, #1
    92d6:	ebb9 0e02 	subs.w	lr, r9, r2
    92da:	eb68 0304 	sbc.w	r3, r8, r4
    92de:	2e00      	cmp	r6, #0
    92e0:	d0a7      	beq.n	9232 <__udivmoddi4+0x1c8>
    92e2:	ebb5 020e 	subs.w	r2, r5, lr
    92e6:	eb61 0103 	sbc.w	r1, r1, r3
    92ea:	fa01 fc0c 	lsl.w	ip, r1, ip
    92ee:	fa22 f307 	lsr.w	r3, r2, r7
    92f2:	40f9      	lsrs	r1, r7
    92f4:	ea4c 0303 	orr.w	r3, ip, r3
    92f8:	e9c6 3100 	strd	r3, r1, [r6]
    92fc:	e799      	b.n	9232 <__udivmoddi4+0x1c8>
    92fe:	4640      	mov	r0, r8
    9300:	e7c5      	b.n	928e <__udivmoddi4+0x224>
    9302:	4643      	mov	r3, r8
    9304:	e7d9      	b.n	92ba <__udivmoddi4+0x250>

00009306 <strcmp>:
    9306:	f810 2b01 	ldrb.w	r2, [r0], #1
    930a:	f811 3b01 	ldrb.w	r3, [r1], #1
    930e:	2a01      	cmp	r2, #1
    9310:	bf28      	it	cs
    9312:	429a      	cmpcs	r2, r3
    9314:	d0f7      	beq.n	9306 <strcmp>
    9316:	1ad0      	subs	r0, r2, r3
    9318:	4770      	bx	lr

0000931a <strlen>:
    931a:	4603      	mov	r3, r0
    931c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9320:	2a00      	cmp	r2, #0
    9322:	d1fb      	bne.n	931c <strlen+0x2>
    9324:	1a18      	subs	r0, r3, r0
    9326:	3801      	subs	r0, #1
    9328:	4770      	bx	lr
    932a:	0000      	movs	r0, r0
    932c:	0000      	movs	r0, r0
	...

00009330 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    9330:	2300      	movs	r3, #0
{
    9332:	b5f0      	push	{r4, r5, r6, r7, lr}
    9334:	b08d      	sub	sp, #52	; 0x34
    9336:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
    9338:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    933c:	2304      	movs	r3, #4
{
    933e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    9340:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
    9342:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
    9344:	2800      	cmp	r0, #0
    9346:	f000 80e0 	beq.w	950a <parse_edrx+0x1da>
    934a:	2900      	cmp	r1, #0
    934c:	f000 80dd 	beq.w	950a <parse_edrx+0x1da>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    9350:	2106      	movs	r1, #6
    9352:	f107 0010 	add.w	r0, r7, #16
    9356:	f029 fe31 	bl	32fbc <at_params_list_init>
	if (err) {
    935a:	4604      	mov	r4, r0
    935c:	b190      	cbz	r0, 9384 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
    935e:	466d      	mov	r5, sp
    9360:	b088      	sub	sp, #32
    9362:	466a      	mov	r2, sp
    9364:	4b6c      	ldr	r3, [pc, #432]	; (9518 <parse_edrx+0x1e8>)
    9366:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    936a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    936e:	2303      	movs	r3, #3
    9370:	486a      	ldr	r0, [pc, #424]	; (951c <parse_edrx+0x1ec>)
    9372:	f842 3f10 	str.w	r3, [r2, #16]!
    9376:	f029 ff71 	bl	3325c <z_log_msg_static_create.constprop.0>
    937a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
    937c:	4620      	mov	r0, r4
    937e:	3734      	adds	r7, #52	; 0x34
    9380:	46bd      	mov	sp, r7
    9382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
    9384:	4601      	mov	r1, r0
    9386:	f107 0210 	add.w	r2, r7, #16
    938a:	4630      	mov	r0, r6
    938c:	f029 fe13 	bl	32fb6 <at_parser_params_from_str>
	if (err) {
    9390:	4604      	mov	r4, r0
    9392:	b198      	cbz	r0, 93bc <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    9394:	466d      	mov	r5, sp
    9396:	b088      	sub	sp, #32
    9398:	466a      	mov	r2, sp
    939a:	4b61      	ldr	r3, [pc, #388]	; (9520 <parse_edrx+0x1f0>)
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    939c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    93a0:	2303      	movs	r3, #3
    93a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    93a6:	485d      	ldr	r0, [pc, #372]	; (951c <parse_edrx+0x1ec>)
    93a8:	f842 3f10 	str.w	r3, [r2, #16]!
    93ac:	f029 ff56 	bl	3325c <z_log_msg_static_create.constprop.0>
    93b0:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
    93b2:	f107 0010 	add.w	r0, r7, #16
    93b6:	f029 fe14 	bl	32fe2 <at_params_list_free>
	return err;
    93ba:	e7df      	b.n	937c <parse_edrx+0x4c>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    93bc:	463a      	mov	r2, r7
    93be:	2101      	movs	r1, #1
    93c0:	f107 0010 	add.w	r0, r7, #16
    93c4:	f029 fec1 	bl	3314a <at_params_int_get>
	if (err) {
    93c8:	4604      	mov	r4, r0
    93ca:	b120      	cbz	r0, 93d6 <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    93cc:	466d      	mov	r5, sp
    93ce:	b088      	sub	sp, #32
    93d0:	466a      	mov	r2, sp
    93d2:	4b54      	ldr	r3, [pc, #336]	; (9524 <parse_edrx+0x1f4>)
    93d4:	e7e2      	b.n	939c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    93d6:	683c      	ldr	r4, [r7, #0]
    93d8:	b1ac      	cbz	r4, 9406 <parse_edrx+0xd6>
    93da:	2c04      	cmp	r4, #4
    93dc:	d018      	beq.n	9410 <parse_edrx+0xe0>
    93de:	2c05      	cmp	r4, #5
    93e0:	bf0c      	ite	eq
    93e2:	2309      	moveq	r3, #9
    93e4:	23ff      	movne	r3, #255	; 0xff
    93e6:	702b      	strb	r3, [r5, #0]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    93e8:	2103      	movs	r1, #3
    93ea:	1d3b      	adds	r3, r7, #4
    93ec:	f107 0208 	add.w	r2, r7, #8
    93f0:	f107 0010 	add.w	r0, r7, #16
    93f4:	f029 fed7 	bl	331a6 <at_params_string_get>
	if (err) {
    93f8:	4604      	mov	r4, r0
    93fa:	b158      	cbz	r0, 9414 <parse_edrx+0xe4>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    93fc:	466d      	mov	r5, sp
    93fe:	b088      	sub	sp, #32
    9400:	466a      	mov	r2, sp
    9402:	4b49      	ldr	r3, [pc, #292]	; (9528 <parse_edrx+0x1f8>)
    9404:	e7ca      	b.n	939c <parse_edrx+0x6c>
		cfg->edrx = 0;
    9406:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9408:	702c      	strb	r4, [r5, #0]
		cfg->edrx = 0;
    940a:	606b      	str	r3, [r5, #4]
		cfg->ptw = 0;
    940c:	60ab      	str	r3, [r5, #8]
		return 0;
    940e:	e7b5      	b.n	937c <parse_edrx+0x4c>
    9410:	2307      	movs	r3, #7
    9412:	e7e8      	b.n	93e6 <parse_edrx+0xb6>
	tmp_buf[len] = '\0';
    9414:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    9416:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9418:	3330      	adds	r3, #48	; 0x30
    941a:	443b      	add	r3, r7
    941c:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
    9420:	2202      	movs	r2, #2
    9422:	f107 0008 	add.w	r0, r7, #8
    9426:	f023 f9f3 	bl	2c810 <strtoul>
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
    942a:	782b      	ldrb	r3, [r5, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    942c:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
    942e:	2b07      	cmp	r3, #7
    9430:	d025      	beq.n	947e <parse_edrx+0x14e>
    9432:	2b09      	cmp	r3, #9
    9434:	d115      	bne.n	9462 <parse_edrx+0x132>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9436:	280f      	cmp	r0, #15
    9438:	d942      	bls.n	94c0 <parse_edrx+0x190>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    943a:	466c      	mov	r4, sp
    943c:	b088      	sub	sp, #32
    943e:	466a      	mov	r2, sp
    9440:	4b3a      	ldr	r3, [pc, #232]	; (952c <parse_edrx+0x1fc>)
    9442:	6153      	str	r3, [r2, #20]
    9444:	f06f 0315 	mvn.w	r3, #21
    9448:	6193      	str	r3, [r2, #24]
    944a:	2303      	movs	r3, #3
    944c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9450:	4832      	ldr	r0, [pc, #200]	; (951c <parse_edrx+0x1ec>)
    9452:	f842 3f10 	str.w	r3, [r2, #16]!
    9456:	f029 ff01 	bl	3325c <z_log_msg_static_create.constprop.0>
    945a:	46a5      	mov	sp, r4
		return -ENOTCONN;
    945c:	f06f 0415 	mvn.w	r4, #21
    9460:	e7a7      	b.n	93b2 <parse_edrx+0x82>
		LOG_WRN("Active LTE mode could not be determined");
    9462:	4b33      	ldr	r3, [pc, #204]	; (9530 <parse_edrx+0x200>)
    9464:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9468:	62fb      	str	r3, [r7, #44]	; 0x2c
    946a:	2302      	movs	r3, #2
    946c:	482b      	ldr	r0, [pc, #172]	; (951c <parse_edrx+0x1ec>)
    946e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    9472:	62bb      	str	r3, [r7, #40]	; 0x28
		return -ENOTCONN;
    9474:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_WRN("Active LTE mode could not be determined");
    9478:	f029 fef0 	bl	3325c <z_log_msg_static_create.constprop.0>
		goto clean_exit;
    947c:	e799      	b.n	93b2 <parse_edrx+0x82>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    947e:	280f      	cmp	r0, #15
    9480:	d8db      	bhi.n	943a <parse_edrx+0x10a>
		multiplier = edrx_lookup_ltem[idx];
    9482:	4b2c      	ldr	r3, [pc, #176]	; (9534 <parse_edrx+0x204>)
		*ptw_multiplier = 1.28;
    9484:	4e2c      	ldr	r6, [pc, #176]	; (9538 <parse_edrx+0x208>)
		multiplier = edrx_lookup_ltem[idx];
    9486:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    948a:	b1f0      	cbz	r0, 94ca <parse_edrx+0x19a>
    948c:	f7ff f8de 	bl	864c <__aeabi_i2d>
    9490:	a31f      	add	r3, pc, #124	; (adr r3, 9510 <parse_edrx+0x1e0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7ff f943 	bl	8720 <__aeabi_dmul>
    949a:	f7ff fc39 	bl	8d10 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    949e:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    94a0:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    94a2:	187b      	adds	r3, r7, r1
    94a4:	f107 0208 	add.w	r2, r7, #8
    94a8:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
    94ac:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    94ae:	f029 fe7a 	bl	331a6 <at_params_string_get>
	if (err) {
    94b2:	4604      	mov	r4, r0
    94b4:	b158      	cbz	r0, 94ce <parse_edrx+0x19e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    94b6:	466d      	mov	r5, sp
    94b8:	b088      	sub	sp, #32
    94ba:	466a      	mov	r2, sp
    94bc:	4b1f      	ldr	r3, [pc, #124]	; (953c <parse_edrx+0x20c>)
    94be:	e76d      	b.n	939c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
    94c0:	4b1f      	ldr	r3, [pc, #124]	; (9540 <parse_edrx+0x210>)
		*ptw_multiplier = 2.56;
    94c2:	4e20      	ldr	r6, [pc, #128]	; (9544 <parse_edrx+0x214>)
		multiplier = edrx_lookup_nbiot[idx];
    94c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    94c8:	e7df      	b.n	948a <parse_edrx+0x15a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    94ca:	481f      	ldr	r0, [pc, #124]	; (9548 <parse_edrx+0x218>)
    94cc:	e7e7      	b.n	949e <parse_edrx+0x16e>
	tmp_buf[len] = '\0';
    94ce:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    94d0:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    94d2:	3330      	adds	r3, #48	; 0x30
    94d4:	443b      	add	r3, r7
    94d6:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
    94da:	2202      	movs	r2, #2
    94dc:	f107 0008 	add.w	r0, r7, #8
    94e0:	f023 f996 	bl	2c810 <strtoul>
    94e4:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    94e6:	280f      	cmp	r0, #15
    94e8:	d906      	bls.n	94f8 <parse_edrx+0x1c8>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    94ea:	466c      	mov	r4, sp
    94ec:	b088      	sub	sp, #32
    94ee:	466a      	mov	r2, sp
    94f0:	4b16      	ldr	r3, [pc, #88]	; (954c <parse_edrx+0x21c>)
    94f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    94f6:	e7a8      	b.n	944a <parse_edrx+0x11a>
	idx += 1;
    94f8:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    94fa:	b2c0      	uxtb	r0, r0
    94fc:	f7ff fd12 	bl	8f24 <__aeabi_i2f>
    9500:	4631      	mov	r1, r6
    9502:	f7fe fe9d 	bl	8240 <__aeabi_fmul>
    9506:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    9508:	e753      	b.n	93b2 <parse_edrx+0x82>
		return -EINVAL;
    950a:	f06f 0415 	mvn.w	r4, #21
    950e:	e735      	b.n	937c <parse_edrx+0x4c>
    9510:	47ae147b 	.word	0x47ae147b
    9514:	40247ae1 	.word	0x40247ae1
    9518:	0003d102 	.word	0x0003d102
    951c:	000364c8 	.word	0x000364c8
    9520:	0003d12b 	.word	0x0003d12b
    9524:	0003d157 	.word	0x0003d157
    9528:	0003d179 	.word	0x0003d179
    952c:	0003d1cd 	.word	0x0003d1cd
    9530:	0003d1a5 	.word	0x0003d1a5
    9534:	00037860 	.word	0x00037860
    9538:	3fa3d70a 	.word	0x3fa3d70a
    953c:	0003d1f1 	.word	0x0003d1f1
    9540:	00037840 	.word	0x00037840
    9544:	4023d70a 	.word	0x4023d70a
    9548:	40a3d70a 	.word	0x40a3d70a
    954c:	0003d21c 	.word	0x0003d21c

00009550 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
    9550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9554:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    9556:	460c      	mov	r4, r1
{
    9558:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    955a:	2900      	cmp	r1, #0
    955c:	f000 80bd 	beq.w	96da <parse_value+0x18a>
    9560:	680f      	ldr	r7, [r1, #0]
    9562:	2f00      	cmp	r7, #0
    9564:	f000 80b9 	beq.w	96da <parse_value+0x18a>
        return false; /* no input */
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
    9568:	688d      	ldr	r5, [r1, #8]
    956a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    956e:	f105 0904 	add.w	r9, r5, #4
    9572:	45c1      	cmp	r9, r8
    9574:	d80a      	bhi.n	958c <parse_value+0x3c>
    9576:	2204      	movs	r2, #4
    9578:	49ab      	ldr	r1, [pc, #684]	; (9828 <parse_value+0x2d8>)
    957a:	1978      	adds	r0, r7, r5
    957c:	f02b fefc 	bl	35378 <strncmp>
    9580:	b9a8      	cbnz	r0, 95ae <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
    9582:	2304      	movs	r3, #4
    9584:	60f3      	str	r3, [r6, #12]
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    {
        item->type = cJSON_True;
        item->valueint = 1;
        input_buffer->offset += 4;
    9586:	68a3      	ldr	r3, [r4, #8]
    9588:	3304      	adds	r3, #4
        return true;
    958a:	e01d      	b.n	95c8 <parse_value+0x78>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    958c:	1d6b      	adds	r3, r5, #5
    958e:	4598      	cmp	r8, r3
    9590:	d210      	bcs.n	95b4 <parse_value+0x64>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
    9592:	4545      	cmp	r5, r8
    9594:	f080 80a1 	bcs.w	96da <parse_value+0x18a>
    9598:	5d7b      	ldrb	r3, [r7, r5]
    959a:	1978      	adds	r0, r7, r5
    959c:	2b22      	cmp	r3, #34	; 0x22
    959e:	d124      	bne.n	95ea <parse_value+0x9a>
    {
        return parse_string(item, input_buffer);
    95a0:	4621      	mov	r1, r4
    95a2:	4630      	mov	r0, r6
    {
        return parse_object(item, input_buffer);
    }

    return false;
}
    95a4:	b012      	add	sp, #72	; 0x48
    95a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
    95aa:	f01a bf5f 	b.w	2446c <parse_string>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    95ae:	1d6b      	adds	r3, r5, #5
    95b0:	4598      	cmp	r8, r3
    95b2:	d30e      	bcc.n	95d2 <parse_value+0x82>
    95b4:	2205      	movs	r2, #5
    95b6:	499d      	ldr	r1, [pc, #628]	; (982c <parse_value+0x2dc>)
    95b8:	1978      	adds	r0, r7, r5
    95ba:	f02b fedd 	bl	35378 <strncmp>
    95be:	b930      	cbnz	r0, 95ce <parse_value+0x7e>
        item->type = cJSON_False;
    95c0:	2301      	movs	r3, #1
    95c2:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 5;
    95c4:	68a3      	ldr	r3, [r4, #8]
    95c6:	3305      	adds	r3, #5
        return true;
    95c8:	2001      	movs	r0, #1
        input_buffer->offset += 4;
    95ca:	60a3      	str	r3, [r4, #8]
    95cc:	e086      	b.n	96dc <parse_value+0x18c>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    95ce:	45c1      	cmp	r9, r8
    95d0:	d8df      	bhi.n	9592 <parse_value+0x42>
    95d2:	2204      	movs	r2, #4
    95d4:	4996      	ldr	r1, [pc, #600]	; (9830 <parse_value+0x2e0>)
    95d6:	1978      	adds	r0, r7, r5
    95d8:	f02b fece 	bl	35378 <strncmp>
    95dc:	2800      	cmp	r0, #0
    95de:	d1d8      	bne.n	9592 <parse_value+0x42>
        item->type = cJSON_True;
    95e0:	2302      	movs	r3, #2
    95e2:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
    95e4:	2301      	movs	r3, #1
    95e6:	6173      	str	r3, [r6, #20]
    95e8:	e7cd      	b.n	9586 <parse_value+0x36>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
    95ea:	2b2d      	cmp	r3, #45	; 0x2d
    95ec:	d003      	beq.n	95f6 <parse_value+0xa6>
    95ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    95f2:	2a09      	cmp	r2, #9
    95f4:	d853      	bhi.n	969e <parse_value+0x14e>
    unsigned char *after_end = NULL;
    95f6:	2300      	movs	r3, #0
    95f8:	f10d 0c08 	add.w	ip, sp, #8
    95fc:	4667      	mov	r7, ip
        switch (buffer_at_offset(input_buffer)[i])
    95fe:	f04f 0e01 	mov.w	lr, #1
    9602:	eba8 0505 	sub.w	r5, r8, r5
    9606:	f8df 822c 	ldr.w	r8, [pc, #556]	; 9834 <parse_value+0x2e4>
    unsigned char *after_end = NULL;
    960a:	9301      	str	r3, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
    960c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9610:	2a45      	cmp	r2, #69	; 0x45
    9612:	d83c      	bhi.n	968e <parse_value+0x13e>
    9614:	2a2a      	cmp	r2, #42	; 0x2a
    9616:	d910      	bls.n	963a <parse_value+0xea>
    9618:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
    961c:	b2c9      	uxtb	r1, r1
    961e:	fa0e f101 	lsl.w	r1, lr, r1
    9622:	ea11 0f08 	tst.w	r1, r8
    9626:	d101      	bne.n	962c <parse_value+0xdc>
    9628:	2a2e      	cmp	r2, #46	; 0x2e
    962a:	d106      	bne.n	963a <parse_value+0xea>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    962c:	3301      	adds	r3, #1
    962e:	2b3f      	cmp	r3, #63	; 0x3f
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
    9630:	f80c 2b01 	strb.w	r2, [ip], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    9634:	d001      	beq.n	963a <parse_value+0xea>
    9636:	42ab      	cmp	r3, r5
    9638:	d1e8      	bne.n	960c <parse_value+0xbc>
    number_c_string[i] = '\0';
    963a:	2500      	movs	r5, #0
    963c:	3348      	adds	r3, #72	; 0x48
    963e:	446b      	add	r3, sp
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9640:	4638      	mov	r0, r7
    9642:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
    9644:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9648:	f022 ff3e 	bl	2c4c8 <strtod>
    if (number_c_string == after_end)
    964c:	f8dd a004 	ldr.w	sl, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9650:	4680      	mov	r8, r0
    if (number_c_string == after_end)
    9652:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9654:	4689      	mov	r9, r1
    if (number_c_string == after_end)
    9656:	d040      	beq.n	96da <parse_value+0x18a>
    if (number >= INT_MAX)
    9658:	a371      	add	r3, pc, #452	; (adr r3, 9820 <parse_value+0x2d0>)
    965a:	e9d3 2300 	ldrd	r2, r3, [r3]
    965e:	f7ff fae5 	bl	8c2c <__aeabi_dcmpge>
    9662:	b9b0      	cbnz	r0, 9692 <parse_value+0x142>
    else if (number <= (double)INT_MIN)
    9664:	2200      	movs	r2, #0
    9666:	4640      	mov	r0, r8
    9668:	4649      	mov	r1, r9
    966a:	4b73      	ldr	r3, [pc, #460]	; (9838 <parse_value+0x2e8>)
    966c:	f7ff fad4 	bl	8c18 <__aeabi_dcmple>
    9670:	b990      	cbnz	r0, 9698 <parse_value+0x148>
        item->valueint = (int)number;
    9672:	4640      	mov	r0, r8
    9674:	4649      	mov	r1, r9
    9676:	f7ff fb03 	bl	8c80 <__aeabi_d2iz>
    item->type = cJSON_Number;
    967a:	2308      	movs	r3, #8
    item->valuedouble = number;
    967c:	e9c6 8906 	strd	r8, r9, [r6, #24]
        item->valueint = INT_MAX;
    9680:	6170      	str	r0, [r6, #20]
    item->type = cJSON_Number;
    9682:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
    9684:	68a3      	ldr	r3, [r4, #8]
    9686:	ebaa 0a07 	sub.w	sl, sl, r7
    968a:	4453      	add	r3, sl
    968c:	e79c      	b.n	95c8 <parse_value+0x78>
        switch (buffer_at_offset(input_buffer)[i])
    968e:	2a65      	cmp	r2, #101	; 0x65
    9690:	e7cb      	b.n	962a <parse_value+0xda>
    9692:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9696:	e7f0      	b.n	967a <parse_value+0x12a>
    9698:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    969c:	e7ed      	b.n	967a <parse_value+0x12a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
    969e:	2b5b      	cmp	r3, #91	; 0x5b
    96a0:	d158      	bne.n	9754 <parse_value+0x204>
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
    cJSON *head = NULL; /* head of the linked list */
    cJSON *current_item = NULL;

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    96a2:	f8d4 900c 	ldr.w	r9, [r4, #12]
    96a6:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    96aa:	d216      	bcs.n	96da <parse_value+0x18a>
    {
        return false; /* to deeply nested */
    }
    input_buffer->depth++;
    96ac:	f109 0301 	add.w	r3, r9, #1
    96b0:	60e3      	str	r3, [r4, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
    96b2:	5d7b      	ldrb	r3, [r7, r5]
    96b4:	2b5b      	cmp	r3, #91	; 0x5b
    96b6:	d110      	bne.n	96da <parse_value+0x18a>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
    96b8:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    96ba:	4620      	mov	r0, r4
    input_buffer->offset++;
    96bc:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    96be:	f029 fffa 	bl	336b6 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
    96c2:	68a3      	ldr	r3, [r4, #8]
    96c4:	4598      	cmp	r8, r3
    96c6:	d906      	bls.n	96d6 <parse_value+0x186>
    96c8:	5cfa      	ldrb	r2, [r7, r3]
    96ca:	2a5d      	cmp	r2, #93	; 0x5d
    96cc:	d109      	bne.n	96e2 <parse_value+0x192>
    cJSON *head = NULL; /* head of the linked list */
    96ce:	2700      	movs	r7, #0
    {
        goto fail; /* expected end of array */
    }

success:
    input_buffer->depth--;
    96d0:	f8c4 900c 	str.w	r9, [r4, #12]

    if (head != NULL) {
    96d4:	e036      	b.n	9744 <parse_value+0x1f4>
        input_buffer->offset--;
    96d6:	3b01      	subs	r3, #1
    96d8:	60a3      	str	r3, [r4, #8]
        return false; /* to deeply nested */
    96da:	2000      	movs	r0, #0
}
    96dc:	b012      	add	sp, #72	; 0x48
    96de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cJSON *current_item = NULL;
    96e2:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
    96e4:	462f      	mov	r7, r5
    input_buffer->offset--;
    96e6:	3b01      	subs	r3, #1
    96e8:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    96ea:	6920      	ldr	r0, [r4, #16]
    96ec:	f02a f861 	bl	337b2 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    96f0:	46a8      	mov	r8, r5
    96f2:	4605      	mov	r5, r0
    96f4:	2800      	cmp	r0, #0
    96f6:	f000 80a3 	beq.w	9840 <parse_value+0x2f0>
        if (head == NULL)
    96fa:	b34f      	cbz	r7, 9750 <parse_value+0x200>
            current_item->next = new_item;
    96fc:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
    9700:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
    9704:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    9706:	4620      	mov	r0, r4
        input_buffer->offset++;
    9708:	3301      	adds	r3, #1
    970a:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    970c:	f029 ffd3 	bl	336b6 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    9710:	4621      	mov	r1, r4
    9712:	4628      	mov	r0, r5
    9714:	f7ff ff1c 	bl	9550 <parse_value>
    9718:	2800      	cmp	r0, #0
    971a:	f000 8091 	beq.w	9840 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    971e:	4620      	mov	r0, r4
    9720:	f029 ffc9 	bl	336b6 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    9724:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    9728:	4293      	cmp	r3, r2
    972a:	f080 808c 	bcs.w	9846 <parse_value+0x2f6>
    972e:	6822      	ldr	r2, [r4, #0]
    9730:	5cd3      	ldrb	r3, [r2, r3]
    9732:	2b2c      	cmp	r3, #44	; 0x2c
    9734:	d0d9      	beq.n	96ea <parse_value+0x19a>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
    9736:	2b5d      	cmp	r3, #93	; 0x5d
    9738:	f040 8085 	bne.w	9846 <parse_value+0x2f6>
    input_buffer->depth--;
    973c:	68e3      	ldr	r3, [r4, #12]
    973e:	3b01      	subs	r3, #1
    9740:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    9742:	607d      	str	r5, [r7, #4]
    }

    item->type = cJSON_Array;
    9744:	2320      	movs	r3, #32
    if (head != NULL) {
        head->prev = current_item;
    }

    item->type = cJSON_Object;
    item->child = head;
    9746:	e9c6 7302 	strd	r7, r3, [r6, #8]

    input_buffer->offset++;
    974a:	68a3      	ldr	r3, [r4, #8]
    974c:	3301      	adds	r3, #1
    return true;
    974e:	e73b      	b.n	95c8 <parse_value+0x78>
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9750:	4607      	mov	r7, r0
    9752:	e7d7      	b.n	9704 <parse_value+0x1b4>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
    9754:	2b7b      	cmp	r3, #123	; 0x7b
    9756:	d1c0      	bne.n	96da <parse_value+0x18a>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    9758:	f8d4 900c 	ldr.w	r9, [r4, #12]
    975c:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    9760:	d2bb      	bcs.n	96da <parse_value+0x18a>
    input_buffer->depth++;
    9762:	f109 0301 	add.w	r3, r9, #1
    9766:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
    9768:	5d7b      	ldrb	r3, [r7, r5]
    976a:	2b7b      	cmp	r3, #123	; 0x7b
    976c:	d1b5      	bne.n	96da <parse_value+0x18a>
    input_buffer->offset++;
    976e:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    9770:	4620      	mov	r0, r4
    input_buffer->offset++;
    9772:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    9774:	f029 ff9f 	bl	336b6 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
    9778:	68a3      	ldr	r3, [r4, #8]
    977a:	4598      	cmp	r8, r3
    977c:	d9ab      	bls.n	96d6 <parse_value+0x186>
    977e:	5cfa      	ldrb	r2, [r7, r3]
    9780:	2a7d      	cmp	r2, #125	; 0x7d
    9782:	d103      	bne.n	978c <parse_value+0x23c>
    cJSON *head = NULL; /* linked list head */
    9784:	2700      	movs	r7, #0
    input_buffer->depth--;
    9786:	f8c4 900c 	str.w	r9, [r4, #12]
    if (head != NULL) {
    978a:	e047      	b.n	981c <parse_value+0x2cc>
    cJSON *current_item = NULL;
    978c:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
    978e:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
    9790:	46a8      	mov	r8, r5
    input_buffer->offset--;
    9792:	3b01      	subs	r3, #1
    9794:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9796:	6920      	ldr	r0, [r4, #16]
    9798:	f02a f80b 	bl	337b2 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    979c:	46a9      	mov	r9, r5
    979e:	4605      	mov	r5, r0
    97a0:	2800      	cmp	r0, #0
    97a2:	d04d      	beq.n	9840 <parse_value+0x2f0>
        if (head == NULL)
    97a4:	2f00      	cmp	r7, #0
    97a6:	d049      	beq.n	983c <parse_value+0x2ec>
            current_item->next = new_item;
    97a8:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
    97ac:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
    97b0:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    97b2:	4620      	mov	r0, r4
        input_buffer->offset++;
    97b4:	3301      	adds	r3, #1
    97b6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    97b8:	f029 ff7d 	bl	336b6 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
    97bc:	4621      	mov	r1, r4
    97be:	4628      	mov	r0, r5
    97c0:	f01a fe54 	bl	2446c <parse_string>
    97c4:	2800      	cmp	r0, #0
    97c6:	d03b      	beq.n	9840 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    97c8:	4620      	mov	r0, r4
    97ca:	f029 ff74 	bl	336b6 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
    97ce:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
    97d0:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
    97d4:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
    97d6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    97da:	4293      	cmp	r3, r2
    97dc:	d230      	bcs.n	9840 <parse_value+0x2f0>
    97de:	6822      	ldr	r2, [r4, #0]
    97e0:	5cd2      	ldrb	r2, [r2, r3]
    97e2:	2a3a      	cmp	r2, #58	; 0x3a
    97e4:	d12c      	bne.n	9840 <parse_value+0x2f0>
        input_buffer->offset++;
    97e6:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
    97e8:	4620      	mov	r0, r4
        input_buffer->offset++;
    97ea:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    97ec:	f029 ff63 	bl	336b6 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    97f0:	4621      	mov	r1, r4
    97f2:	4628      	mov	r0, r5
    97f4:	f7ff feac 	bl	9550 <parse_value>
    97f8:	b310      	cbz	r0, 9840 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    97fa:	4620      	mov	r0, r4
    97fc:	f029 ff5b 	bl	336b6 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    9800:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    9804:	4293      	cmp	r3, r2
    9806:	d21e      	bcs.n	9846 <parse_value+0x2f6>
    9808:	6822      	ldr	r2, [r4, #0]
    980a:	5cd3      	ldrb	r3, [r2, r3]
    980c:	2b2c      	cmp	r3, #44	; 0x2c
    980e:	d0c2      	beq.n	9796 <parse_value+0x246>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
    9810:	2b7d      	cmp	r3, #125	; 0x7d
    9812:	d118      	bne.n	9846 <parse_value+0x2f6>
    input_buffer->depth--;
    9814:	68e3      	ldr	r3, [r4, #12]
    9816:	3b01      	subs	r3, #1
    9818:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    981a:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
    981c:	2340      	movs	r3, #64	; 0x40
    981e:	e792      	b.n	9746 <parse_value+0x1f6>
    9820:	ffc00000 	.word	0xffc00000
    9824:	41dfffff 	.word	0x41dfffff
    9828:	0003f89a 	.word	0x0003f89a
    982c:	0003f8b1 	.word	0x0003f8b1
    9830:	0003f8b7 	.word	0x0003f8b7
    9834:	04007fe5 	.word	0x04007fe5
    9838:	c1e00000 	.word	0xc1e00000
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    983c:	4607      	mov	r7, r0
    983e:	e7b7      	b.n	97b0 <parse_value+0x260>

fail:
    if (head != NULL)
    9840:	2f00      	cmp	r7, #0
    9842:	f43f af4a 	beq.w	96da <parse_value+0x18a>
    {
        cJSON_Delete(head);
    9846:	4638      	mov	r0, r7
    9848:	f01b fa56 	bl	24cf8 <cJSON_Delete>
    984c:	e745      	b.n	96da <parse_value+0x18a>
    984e:	bf00      	nop

00009850 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    9850:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
    9852:	4b17      	ldr	r3, [pc, #92]	; (98b0 <cJSON_CreateNumber+0x60>)
{
    9854:	4606      	mov	r6, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
    9856:	6818      	ldr	r0, [r3, #0]
{
    9858:	460f      	mov	r7, r1
    cJSON *item = cJSON_New_Item(&global_hooks);
    985a:	f029 ffaa 	bl	337b2 <cJSON_New_Item.isra.0>
    if(item)
    985e:	4604      	mov	r4, r0
    9860:	b170      	cbz	r0, 9880 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
    9862:	2308      	movs	r3, #8
        item->valuedouble = num;
    9864:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
    9868:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
    986a:	4639      	mov	r1, r7
    986c:	a30e      	add	r3, pc, #56	; (adr r3, 98a8 <cJSON_CreateNumber+0x58>)
    986e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9872:	4630      	mov	r0, r6
    9874:	f7ff f9da 	bl	8c2c <__aeabi_dcmpge>
    9878:	b120      	cbz	r0, 9884 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
    987a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
    987e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
    9880:	4620      	mov	r0, r4
    9882:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
    9884:	2200      	movs	r2, #0
    9886:	4630      	mov	r0, r6
    9888:	4639      	mov	r1, r7
    988a:	4b0a      	ldr	r3, [pc, #40]	; (98b4 <cJSON_CreateNumber+0x64>)
    988c:	f7ff f9c4 	bl	8c18 <__aeabi_dcmple>
    9890:	b110      	cbz	r0, 9898 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
    9892:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    9896:	e7f2      	b.n	987e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
    9898:	4630      	mov	r0, r6
    989a:	4639      	mov	r1, r7
    989c:	f7ff f9f0 	bl	8c80 <__aeabi_d2iz>
    98a0:	6160      	str	r0, [r4, #20]
    return item;
    98a2:	e7ed      	b.n	9880 <cJSON_CreateNumber+0x30>
    98a4:	f3af 8000 	nop.w
    98a8:	ffc00000 	.word	0xffc00000
    98ac:	41dfffff 	.word	0x41dfffff
    98b0:	2000c9e4 	.word	0x2000c9e4
    98b4:	c1e00000 	.word	0xc1e00000

000098b8 <_strtod_l>:
    98b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98bc:	461f      	mov	r7, r3
    98be:	b09d      	sub	sp, #116	; 0x74
    98c0:	2300      	movs	r3, #0
    98c2:	460c      	mov	r4, r1
    98c4:	4682      	mov	sl, r0
    98c6:	920e      	str	r2, [sp, #56]	; 0x38
    98c8:	9318      	str	r3, [sp, #96]	; 0x60
    98ca:	f04f 0800 	mov.w	r8, #0
    98ce:	4b97      	ldr	r3, [pc, #604]	; (9b2c <_strtod_l+0x274>)
    98d0:	f04f 0900 	mov.w	r9, #0
    98d4:	681d      	ldr	r5, [r3, #0]
    98d6:	4628      	mov	r0, r5
    98d8:	f7ff fd1f 	bl	931a <strlen>
    98dc:	4622      	mov	r2, r4
    98de:	4683      	mov	fp, r0
    98e0:	9217      	str	r2, [sp, #92]	; 0x5c
    98e2:	7813      	ldrb	r3, [r2, #0]
    98e4:	2b2b      	cmp	r3, #43	; 0x2b
    98e6:	d03b      	beq.n	9960 <_strtod_l+0xa8>
    98e8:	d82c      	bhi.n	9944 <_strtod_l+0x8c>
    98ea:	2b0d      	cmp	r3, #13
    98ec:	d826      	bhi.n	993c <_strtod_l+0x84>
    98ee:	2b08      	cmp	r3, #8
    98f0:	d826      	bhi.n	9940 <_strtod_l+0x88>
    98f2:	2b00      	cmp	r3, #0
    98f4:	d02f      	beq.n	9956 <_strtod_l+0x9e>
    98f6:	2300      	movs	r3, #0
    98f8:	930c      	str	r3, [sp, #48]	; 0x30
    98fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    98fc:	7833      	ldrb	r3, [r6, #0]
    98fe:	2b30      	cmp	r3, #48	; 0x30
    9900:	d172      	bne.n	99e8 <_strtod_l+0x130>
    9902:	7873      	ldrb	r3, [r6, #1]
    9904:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9908:	2b58      	cmp	r3, #88	; 0x58
    990a:	d163      	bne.n	99d4 <_strtod_l+0x11c>
    990c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    990e:	a917      	add	r1, sp, #92	; 0x5c
    9910:	4a87      	ldr	r2, [pc, #540]	; (9b30 <_strtod_l+0x278>)
    9912:	4650      	mov	r0, sl
    9914:	9301      	str	r3, [sp, #4]
    9916:	ab18      	add	r3, sp, #96	; 0x60
    9918:	9702      	str	r7, [sp, #8]
    991a:	9300      	str	r3, [sp, #0]
    991c:	ab19      	add	r3, sp, #100	; 0x64
    991e:	f023 f9b9 	bl	2cc94 <__gethex>
    9922:	f010 0507 	ands.w	r5, r0, #7
    9926:	4604      	mov	r4, r0
    9928:	d035      	beq.n	9996 <_strtod_l+0xde>
    992a:	2d06      	cmp	r5, #6
    992c:	d11a      	bne.n	9964 <_strtod_l+0xac>
    992e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9930:	b10b      	cbz	r3, 9936 <_strtod_l+0x7e>
    9932:	3601      	adds	r6, #1
    9934:	601e      	str	r6, [r3, #0]
    9936:	4640      	mov	r0, r8
    9938:	4649      	mov	r1, r9
    993a:	e037      	b.n	99ac <_strtod_l+0xf4>
    993c:	2b20      	cmp	r3, #32
    993e:	d1da      	bne.n	98f6 <_strtod_l+0x3e>
    9940:	3201      	adds	r2, #1
    9942:	e7cd      	b.n	98e0 <_strtod_l+0x28>
    9944:	2b2d      	cmp	r3, #45	; 0x2d
    9946:	d1d6      	bne.n	98f6 <_strtod_l+0x3e>
    9948:	2301      	movs	r3, #1
    994a:	930c      	str	r3, [sp, #48]	; 0x30
    994c:	1c53      	adds	r3, r2, #1
    994e:	9317      	str	r3, [sp, #92]	; 0x5c
    9950:	7853      	ldrb	r3, [r2, #1]
    9952:	2b00      	cmp	r3, #0
    9954:	d1d1      	bne.n	98fa <_strtod_l+0x42>
    9956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9958:	2b00      	cmp	r3, #0
    995a:	d0ec      	beq.n	9936 <_strtod_l+0x7e>
    995c:	601c      	str	r4, [r3, #0]
    995e:	e7ea      	b.n	9936 <_strtod_l+0x7e>
    9960:	2300      	movs	r3, #0
    9962:	e7f2      	b.n	994a <_strtod_l+0x92>
    9964:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9966:	b13a      	cbz	r2, 9978 <_strtod_l+0xc0>
    9968:	2135      	movs	r1, #53	; 0x35
    996a:	a81a      	add	r0, sp, #104	; 0x68
    996c:	f02c f8e8 	bl	35b40 <__copybits>
    9970:	9918      	ldr	r1, [sp, #96]	; 0x60
    9972:	4650      	mov	r0, sl
    9974:	f023 fc60 	bl	2d238 <_Bfree>
    9978:	3d01      	subs	r5, #1
    997a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    997c:	2d04      	cmp	r5, #4
    997e:	d806      	bhi.n	998e <_strtod_l+0xd6>
    9980:	e8df f005 	tbb	[pc, r5]
    9984:	23200317 	.word	0x23200317
    9988:	17          	.byte	0x17
    9989:	00          	.byte	0x00
    998a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    998e:	0721      	lsls	r1, r4, #28
    9990:	d501      	bpl.n	9996 <_strtod_l+0xde>
    9992:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9998:	b113      	cbz	r3, 99a0 <_strtod_l+0xe8>
    999a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    999c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    999e:	6013      	str	r3, [r2, #0]
    99a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    99a2:	2b00      	cmp	r3, #0
    99a4:	d0c7      	beq.n	9936 <_strtod_l+0x7e>
    99a6:	4640      	mov	r0, r8
    99a8:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    99ac:	b01d      	add	sp, #116	; 0x74
    99ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99b2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    99b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
    99ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    99be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    99c2:	e7e4      	b.n	998e <_strtod_l+0xd6>
    99c4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 9b34 <_strtod_l+0x27c>
    99c8:	e7e1      	b.n	998e <_strtod_l+0xd6>
    99ca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    99ce:	f04f 38ff 	mov.w	r8, #4294967295
    99d2:	e7dc      	b.n	998e <_strtod_l+0xd6>
    99d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99d6:	1c5a      	adds	r2, r3, #1
    99d8:	9217      	str	r2, [sp, #92]	; 0x5c
    99da:	785b      	ldrb	r3, [r3, #1]
    99dc:	2b30      	cmp	r3, #48	; 0x30
    99de:	d0f9      	beq.n	99d4 <_strtod_l+0x11c>
    99e0:	2b00      	cmp	r3, #0
    99e2:	d0d8      	beq.n	9996 <_strtod_l+0xde>
    99e4:	2301      	movs	r3, #1
    99e6:	e000      	b.n	99ea <_strtod_l+0x132>
    99e8:	2300      	movs	r3, #0
    99ea:	2700      	movs	r7, #0
    99ec:	9304      	str	r3, [sp, #16]
    99ee:	220a      	movs	r2, #10
    99f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99f2:	e9cd 7705 	strd	r7, r7, [sp, #20]
    99f6:	930a      	str	r3, [sp, #40]	; 0x28
    99f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    99fa:	7806      	ldrb	r6, [r0, #0]
    99fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9a00:	b2d9      	uxtb	r1, r3
    9a02:	2909      	cmp	r1, #9
    9a04:	d924      	bls.n	9a50 <_strtod_l+0x198>
    9a06:	465a      	mov	r2, fp
    9a08:	4629      	mov	r1, r5
    9a0a:	f02b fcb5 	bl	35378 <strncmp>
    9a0e:	2800      	cmp	r0, #0
    9a10:	d02d      	beq.n	9a6e <_strtod_l+0x1b6>
    9a12:	2000      	movs	r0, #0
    9a14:	4632      	mov	r2, r6
    9a16:	9d05      	ldr	r5, [sp, #20]
    9a18:	4683      	mov	fp, r0
    9a1a:	4603      	mov	r3, r0
    9a1c:	2a65      	cmp	r2, #101	; 0x65
    9a1e:	d001      	beq.n	9a24 <_strtod_l+0x16c>
    9a20:	2a45      	cmp	r2, #69	; 0x45
    9a22:	d113      	bne.n	9a4c <_strtod_l+0x194>
    9a24:	b91d      	cbnz	r5, 9a2e <_strtod_l+0x176>
    9a26:	9a04      	ldr	r2, [sp, #16]
    9a28:	4302      	orrs	r2, r0
    9a2a:	d094      	beq.n	9956 <_strtod_l+0x9e>
    9a2c:	2500      	movs	r5, #0
    9a2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9a30:	1c62      	adds	r2, r4, #1
    9a32:	9217      	str	r2, [sp, #92]	; 0x5c
    9a34:	7862      	ldrb	r2, [r4, #1]
    9a36:	2a2b      	cmp	r2, #43	; 0x2b
    9a38:	d06e      	beq.n	9b18 <_strtod_l+0x260>
    9a3a:	2a2d      	cmp	r2, #45	; 0x2d
    9a3c:	d072      	beq.n	9b24 <_strtod_l+0x26c>
    9a3e:	f04f 0c00 	mov.w	ip, #0
    9a42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9a46:	2909      	cmp	r1, #9
    9a48:	d97a      	bls.n	9b40 <_strtod_l+0x288>
    9a4a:	9417      	str	r4, [sp, #92]	; 0x5c
    9a4c:	2600      	movs	r6, #0
    9a4e:	e099      	b.n	9b84 <_strtod_l+0x2cc>
    9a50:	9905      	ldr	r1, [sp, #20]
    9a52:	3001      	adds	r0, #1
    9a54:	2908      	cmp	r1, #8
    9a56:	9017      	str	r0, [sp, #92]	; 0x5c
    9a58:	bfd7      	itett	le
    9a5a:	9906      	ldrle	r1, [sp, #24]
    9a5c:	fb02 3707 	mlagt	r7, r2, r7, r3
    9a60:	fb02 3301 	mlale	r3, r2, r1, r3
    9a64:	9306      	strle	r3, [sp, #24]
    9a66:	9b05      	ldr	r3, [sp, #20]
    9a68:	3301      	adds	r3, #1
    9a6a:	9305      	str	r3, [sp, #20]
    9a6c:	e7c4      	b.n	99f8 <_strtod_l+0x140>
    9a6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9a70:	eb03 020b 	add.w	r2, r3, fp
    9a74:	9217      	str	r2, [sp, #92]	; 0x5c
    9a76:	f813 200b 	ldrb.w	r2, [r3, fp]
    9a7a:	9b05      	ldr	r3, [sp, #20]
    9a7c:	b3a3      	cbz	r3, 9ae8 <_strtod_l+0x230>
    9a7e:	4683      	mov	fp, r0
    9a80:	461d      	mov	r5, r3
    9a82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9a86:	2b09      	cmp	r3, #9
    9a88:	d912      	bls.n	9ab0 <_strtod_l+0x1f8>
    9a8a:	2301      	movs	r3, #1
    9a8c:	e7c6      	b.n	9a1c <_strtod_l+0x164>
    9a8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9a90:	3001      	adds	r0, #1
    9a92:	1c5a      	adds	r2, r3, #1
    9a94:	9217      	str	r2, [sp, #92]	; 0x5c
    9a96:	785a      	ldrb	r2, [r3, #1]
    9a98:	2a30      	cmp	r2, #48	; 0x30
    9a9a:	d0f8      	beq.n	9a8e <_strtod_l+0x1d6>
    9a9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    9aa0:	2b08      	cmp	r3, #8
    9aa2:	f200 84ea 	bhi.w	a47a <_strtod_l+0xbc2>
    9aa6:	4683      	mov	fp, r0
    9aa8:	2000      	movs	r0, #0
    9aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9aac:	4605      	mov	r5, r0
    9aae:	930a      	str	r3, [sp, #40]	; 0x28
    9ab0:	3a30      	subs	r2, #48	; 0x30
    9ab2:	f100 0301 	add.w	r3, r0, #1
    9ab6:	d011      	beq.n	9adc <_strtod_l+0x224>
    9ab8:	449b      	add	fp, r3
    9aba:	eb00 0c05 	add.w	ip, r0, r5
    9abe:	462b      	mov	r3, r5
    9ac0:	210a      	movs	r1, #10
    9ac2:	4563      	cmp	r3, ip
    9ac4:	d112      	bne.n	9aec <_strtod_l+0x234>
    9ac6:	182b      	adds	r3, r5, r0
    9ac8:	3501      	adds	r5, #1
    9aca:	2b08      	cmp	r3, #8
    9acc:	4405      	add	r5, r0
    9ace:	dc19      	bgt.n	9b04 <_strtod_l+0x24c>
    9ad0:	9906      	ldr	r1, [sp, #24]
    9ad2:	230a      	movs	r3, #10
    9ad4:	fb03 2301 	mla	r3, r3, r1, r2
    9ad8:	9306      	str	r3, [sp, #24]
    9ada:	2300      	movs	r3, #0
    9adc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9ade:	4618      	mov	r0, r3
    9ae0:	1c51      	adds	r1, r2, #1
    9ae2:	9117      	str	r1, [sp, #92]	; 0x5c
    9ae4:	7852      	ldrb	r2, [r2, #1]
    9ae6:	e7cc      	b.n	9a82 <_strtod_l+0x1ca>
    9ae8:	9805      	ldr	r0, [sp, #20]
    9aea:	e7d5      	b.n	9a98 <_strtod_l+0x1e0>
    9aec:	2b08      	cmp	r3, #8
    9aee:	f103 0301 	add.w	r3, r3, #1
    9af2:	dc03      	bgt.n	9afc <_strtod_l+0x244>
    9af4:	9e06      	ldr	r6, [sp, #24]
    9af6:	434e      	muls	r6, r1
    9af8:	9606      	str	r6, [sp, #24]
    9afa:	e7e2      	b.n	9ac2 <_strtod_l+0x20a>
    9afc:	2b10      	cmp	r3, #16
    9afe:	bfd8      	it	le
    9b00:	434f      	mulle	r7, r1
    9b02:	e7de      	b.n	9ac2 <_strtod_l+0x20a>
    9b04:	2b0f      	cmp	r3, #15
    9b06:	bfdc      	itt	le
    9b08:	230a      	movle	r3, #10
    9b0a:	fb03 2707 	mlale	r7, r3, r7, r2
    9b0e:	e7e4      	b.n	9ada <_strtod_l+0x222>
    9b10:	f04f 0b00 	mov.w	fp, #0
    9b14:	2301      	movs	r3, #1
    9b16:	e786      	b.n	9a26 <_strtod_l+0x16e>
    9b18:	f04f 0c00 	mov.w	ip, #0
    9b1c:	1ca2      	adds	r2, r4, #2
    9b1e:	9217      	str	r2, [sp, #92]	; 0x5c
    9b20:	78a2      	ldrb	r2, [r4, #2]
    9b22:	e78e      	b.n	9a42 <_strtod_l+0x18a>
    9b24:	f04f 0c01 	mov.w	ip, #1
    9b28:	e7f8      	b.n	9b1c <_strtod_l+0x264>
    9b2a:	bf00      	nop
    9b2c:	00037828 	.word	0x00037828
    9b30:	000377b4 	.word	0x000377b4
    9b34:	7ff00000 	.word	0x7ff00000
    9b38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9b3a:	1c51      	adds	r1, r2, #1
    9b3c:	9117      	str	r1, [sp, #92]	; 0x5c
    9b3e:	7852      	ldrb	r2, [r2, #1]
    9b40:	2a30      	cmp	r2, #48	; 0x30
    9b42:	d0f9      	beq.n	9b38 <_strtod_l+0x280>
    9b44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    9b48:	2908      	cmp	r1, #8
    9b4a:	f63f af7f 	bhi.w	9a4c <_strtod_l+0x194>
    9b4e:	3a30      	subs	r2, #48	; 0x30
    9b50:	9207      	str	r2, [sp, #28]
    9b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9b54:	920d      	str	r2, [sp, #52]	; 0x34
    9b56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9b58:	1c56      	adds	r6, r2, #1
    9b5a:	9617      	str	r6, [sp, #92]	; 0x5c
    9b5c:	7852      	ldrb	r2, [r2, #1]
    9b5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    9b62:	f1be 0f09 	cmp.w	lr, #9
    9b66:	d938      	bls.n	9bda <_strtod_l+0x322>
    9b68:	990d      	ldr	r1, [sp, #52]	; 0x34
    9b6a:	1a76      	subs	r6, r6, r1
    9b6c:	2e08      	cmp	r6, #8
    9b6e:	f644 661f 	movw	r6, #19999	; 0x4e1f
    9b72:	dc03      	bgt.n	9b7c <_strtod_l+0x2c4>
    9b74:	9907      	ldr	r1, [sp, #28]
    9b76:	428e      	cmp	r6, r1
    9b78:	bfa8      	it	ge
    9b7a:	460e      	movge	r6, r1
    9b7c:	f1bc 0f00 	cmp.w	ip, #0
    9b80:	d000      	beq.n	9b84 <_strtod_l+0x2cc>
    9b82:	4276      	negs	r6, r6
    9b84:	2d00      	cmp	r5, #0
    9b86:	d14f      	bne.n	9c28 <_strtod_l+0x370>
    9b88:	9904      	ldr	r1, [sp, #16]
    9b8a:	4308      	orrs	r0, r1
    9b8c:	f47f af03 	bne.w	9996 <_strtod_l+0xde>
    9b90:	2b00      	cmp	r3, #0
    9b92:	f47f aee0 	bne.w	9956 <_strtod_l+0x9e>
    9b96:	2a69      	cmp	r2, #105	; 0x69
    9b98:	d029      	beq.n	9bee <_strtod_l+0x336>
    9b9a:	dc26      	bgt.n	9bea <_strtod_l+0x332>
    9b9c:	2a49      	cmp	r2, #73	; 0x49
    9b9e:	d026      	beq.n	9bee <_strtod_l+0x336>
    9ba0:	2a4e      	cmp	r2, #78	; 0x4e
    9ba2:	f47f aed8 	bne.w	9956 <_strtod_l+0x9e>
    9ba6:	499d      	ldr	r1, [pc, #628]	; (9e1c <_strtod_l+0x564>)
    9ba8:	a817      	add	r0, sp, #92	; 0x5c
    9baa:	f02b fe49 	bl	35840 <__match>
    9bae:	2800      	cmp	r0, #0
    9bb0:	f43f aed1 	beq.w	9956 <_strtod_l+0x9e>
    9bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9bb6:	781b      	ldrb	r3, [r3, #0]
    9bb8:	2b28      	cmp	r3, #40	; 0x28
    9bba:	d12f      	bne.n	9c1c <_strtod_l+0x364>
    9bbc:	aa1a      	add	r2, sp, #104	; 0x68
    9bbe:	4998      	ldr	r1, [pc, #608]	; (9e20 <_strtod_l+0x568>)
    9bc0:	a817      	add	r0, sp, #92	; 0x5c
    9bc2:	f02b fe51 	bl	35868 <__hexnan>
    9bc6:	2805      	cmp	r0, #5
    9bc8:	d128      	bne.n	9c1c <_strtod_l+0x364>
    9bca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9bcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    9bd0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    9bd4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    9bd8:	e6dd      	b.n	9996 <_strtod_l+0xde>
    9bda:	9e07      	ldr	r6, [sp, #28]
    9bdc:	210a      	movs	r1, #10
    9bde:	fb01 2106 	mla	r1, r1, r6, r2
    9be2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    9be6:	9207      	str	r2, [sp, #28]
    9be8:	e7b5      	b.n	9b56 <_strtod_l+0x29e>
    9bea:	2a6e      	cmp	r2, #110	; 0x6e
    9bec:	e7d9      	b.n	9ba2 <_strtod_l+0x2ea>
    9bee:	498d      	ldr	r1, [pc, #564]	; (9e24 <_strtod_l+0x56c>)
    9bf0:	a817      	add	r0, sp, #92	; 0x5c
    9bf2:	f02b fe25 	bl	35840 <__match>
    9bf6:	2800      	cmp	r0, #0
    9bf8:	f43f aead 	beq.w	9956 <_strtod_l+0x9e>
    9bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9bfe:	a817      	add	r0, sp, #92	; 0x5c
    9c00:	4989      	ldr	r1, [pc, #548]	; (9e28 <_strtod_l+0x570>)
    9c02:	3b01      	subs	r3, #1
    9c04:	9317      	str	r3, [sp, #92]	; 0x5c
    9c06:	f02b fe1b 	bl	35840 <__match>
    9c0a:	b910      	cbnz	r0, 9c12 <_strtod_l+0x35a>
    9c0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9c0e:	3301      	adds	r3, #1
    9c10:	9317      	str	r3, [sp, #92]	; 0x5c
    9c12:	f8df 9218 	ldr.w	r9, [pc, #536]	; 9e2c <_strtod_l+0x574>
    9c16:	f04f 0800 	mov.w	r8, #0
    9c1a:	e6bc      	b.n	9996 <_strtod_l+0xde>
    9c1c:	4884      	ldr	r0, [pc, #528]	; (9e30 <_strtod_l+0x578>)
    9c1e:	f024 fa7b 	bl	2e118 <nan>
    9c22:	4680      	mov	r8, r0
    9c24:	4689      	mov	r9, r1
    9c26:	e6b6      	b.n	9996 <_strtod_l+0xde>
    9c28:	eba6 030b 	sub.w	r3, r6, fp
    9c2c:	9806      	ldr	r0, [sp, #24]
    9c2e:	462c      	mov	r4, r5
    9c30:	930f      	str	r3, [sp, #60]	; 0x3c
    9c32:	9b05      	ldr	r3, [sp, #20]
    9c34:	2b00      	cmp	r3, #0
    9c36:	bf08      	it	eq
    9c38:	462b      	moveq	r3, r5
    9c3a:	2d10      	cmp	r5, #16
    9c3c:	9305      	str	r3, [sp, #20]
    9c3e:	bfa8      	it	ge
    9c40:	2410      	movge	r4, #16
    9c42:	f7fe fcf3 	bl	862c <__aeabi_ui2d>
    9c46:	2d09      	cmp	r5, #9
    9c48:	4680      	mov	r8, r0
    9c4a:	4689      	mov	r9, r1
    9c4c:	dc14      	bgt.n	9c78 <_strtod_l+0x3c0>
    9c4e:	eba6 030b 	sub.w	r3, r6, fp
    9c52:	2b00      	cmp	r3, #0
    9c54:	f43f ae9f 	beq.w	9996 <_strtod_l+0xde>
    9c58:	eba6 030b 	sub.w	r3, r6, fp
    9c5c:	dd79      	ble.n	9d52 <_strtod_l+0x49a>
    9c5e:	2b16      	cmp	r3, #22
    9c60:	dc45      	bgt.n	9cee <_strtod_l+0x436>
    9c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c64:	4642      	mov	r2, r8
    9c66:	4973      	ldr	r1, [pc, #460]	; (9e34 <_strtod_l+0x57c>)
    9c68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9c6c:	464b      	mov	r3, r9
    9c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
    9c72:	f7fe fd55 	bl	8720 <__aeabi_dmul>
    9c76:	e7d4      	b.n	9c22 <_strtod_l+0x36a>
    9c78:	4b6e      	ldr	r3, [pc, #440]	; (9e34 <_strtod_l+0x57c>)
    9c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    9c7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    9c82:	f7fe fd4d 	bl	8720 <__aeabi_dmul>
    9c86:	4680      	mov	r8, r0
    9c88:	4689      	mov	r9, r1
    9c8a:	4638      	mov	r0, r7
    9c8c:	f7fe fcce 	bl	862c <__aeabi_ui2d>
    9c90:	4602      	mov	r2, r0
    9c92:	460b      	mov	r3, r1
    9c94:	4640      	mov	r0, r8
    9c96:	4649      	mov	r1, r9
    9c98:	f7fe fb8c 	bl	83b4 <__adddf3>
    9c9c:	2d0f      	cmp	r5, #15
    9c9e:	4680      	mov	r8, r0
    9ca0:	4689      	mov	r9, r1
    9ca2:	ddd4      	ble.n	9c4e <_strtod_l+0x396>
    9ca4:	1b2c      	subs	r4, r5, r4
    9ca6:	eba6 030b 	sub.w	r3, r6, fp
    9caa:	441c      	add	r4, r3
    9cac:	2c00      	cmp	r4, #0
    9cae:	dc26      	bgt.n	9cfe <_strtod_l+0x446>
    9cb0:	f000 80a3 	beq.w	9dfa <_strtod_l+0x542>
    9cb4:	4264      	negs	r4, r4
    9cb6:	f014 020f 	ands.w	r2, r4, #15
    9cba:	d00a      	beq.n	9cd2 <_strtod_l+0x41a>
    9cbc:	4b5d      	ldr	r3, [pc, #372]	; (9e34 <_strtod_l+0x57c>)
    9cbe:	4640      	mov	r0, r8
    9cc0:	4649      	mov	r1, r9
    9cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cca:	f7fe fe53 	bl	8974 <__aeabi_ddiv>
    9cce:	4680      	mov	r8, r0
    9cd0:	4689      	mov	r9, r1
    9cd2:	1124      	asrs	r4, r4, #4
    9cd4:	f000 8091 	beq.w	9dfa <_strtod_l+0x542>
    9cd8:	2c1f      	cmp	r4, #31
    9cda:	f340 80b3 	ble.w	9e44 <_strtod_l+0x58c>
    9cde:	2322      	movs	r3, #34	; 0x22
    9ce0:	f04f 0800 	mov.w	r8, #0
    9ce4:	f04f 0900 	mov.w	r9, #0
    9ce8:	f8ca 3000 	str.w	r3, [sl]
    9cec:	e653      	b.n	9996 <_strtod_l+0xde>
    9cee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    9cf2:	eba6 020b 	sub.w	r2, r6, fp
    9cf6:	4293      	cmp	r3, r2
    9cf8:	da19      	bge.n	9d2e <_strtod_l+0x476>
    9cfa:	1b2c      	subs	r4, r5, r4
    9cfc:	4414      	add	r4, r2
    9cfe:	f014 030f 	ands.w	r3, r4, #15
    9d02:	d00a      	beq.n	9d1a <_strtod_l+0x462>
    9d04:	494b      	ldr	r1, [pc, #300]	; (9e34 <_strtod_l+0x57c>)
    9d06:	4642      	mov	r2, r8
    9d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9d0c:	464b      	mov	r3, r9
    9d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
    9d12:	f7fe fd05 	bl	8720 <__aeabi_dmul>
    9d16:	4680      	mov	r8, r0
    9d18:	4689      	mov	r9, r1
    9d1a:	f034 040f 	bics.w	r4, r4, #15
    9d1e:	d06c      	beq.n	9dfa <_strtod_l+0x542>
    9d20:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    9d24:	dd41      	ble.n	9daa <_strtod_l+0x4f2>
    9d26:	2322      	movs	r3, #34	; 0x22
    9d28:	f8ca 3000 	str.w	r3, [sl]
    9d2c:	e771      	b.n	9c12 <_strtod_l+0x35a>
    9d2e:	f1c5 050f 	rsb	r5, r5, #15
    9d32:	4c40      	ldr	r4, [pc, #256]	; (9e34 <_strtod_l+0x57c>)
    9d34:	4642      	mov	r2, r8
    9d36:	464b      	mov	r3, r9
    9d38:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    9d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
    9d40:	f7fe fcee 	bl	8720 <__aeabi_dmul>
    9d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9d46:	1b5d      	subs	r5, r3, r5
    9d48:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    9d4c:	e9d4 2300 	ldrd	r2, r3, [r4]
    9d50:	e78f      	b.n	9c72 <_strtod_l+0x3ba>
    9d52:	3316      	adds	r3, #22
    9d54:	dba6      	blt.n	9ca4 <_strtod_l+0x3ec>
    9d56:	ebab 0206 	sub.w	r2, fp, r6
    9d5a:	4b36      	ldr	r3, [pc, #216]	; (9e34 <_strtod_l+0x57c>)
    9d5c:	4640      	mov	r0, r8
    9d5e:	4649      	mov	r1, r9
    9d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9d64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d68:	f7fe fe04 	bl	8974 <__aeabi_ddiv>
    9d6c:	e759      	b.n	9c22 <_strtod_l+0x36a>
    9d6e:	2300      	movs	r3, #0
    9d70:	9306      	str	r3, [sp, #24]
    9d72:	2322      	movs	r3, #34	; 0x22
    9d74:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9e2c <_strtod_l+0x574>
    9d78:	f04f 0800 	mov.w	r8, #0
    9d7c:	f8ca 3000 	str.w	r3, [sl]
    9d80:	9918      	ldr	r1, [sp, #96]	; 0x60
    9d82:	4650      	mov	r0, sl
    9d84:	f023 fa58 	bl	2d238 <_Bfree>
    9d88:	9906      	ldr	r1, [sp, #24]
    9d8a:	4650      	mov	r0, sl
    9d8c:	f023 fa54 	bl	2d238 <_Bfree>
    9d90:	9905      	ldr	r1, [sp, #20]
    9d92:	4650      	mov	r0, sl
    9d94:	f023 fa50 	bl	2d238 <_Bfree>
    9d98:	9910      	ldr	r1, [sp, #64]	; 0x40
    9d9a:	4650      	mov	r0, sl
    9d9c:	f023 fa4c 	bl	2d238 <_Bfree>
    9da0:	9907      	ldr	r1, [sp, #28]
    9da2:	4650      	mov	r0, sl
    9da4:	f023 fa48 	bl	2d238 <_Bfree>
    9da8:	e5f5      	b.n	9996 <_strtod_l+0xde>
    9daa:	2300      	movs	r3, #0
    9dac:	1124      	asrs	r4, r4, #4
    9dae:	4640      	mov	r0, r8
    9db0:	4649      	mov	r1, r9
    9db2:	4f21      	ldr	r7, [pc, #132]	; (9e38 <_strtod_l+0x580>)
    9db4:	9304      	str	r3, [sp, #16]
    9db6:	2c01      	cmp	r4, #1
    9db8:	dc22      	bgt.n	9e00 <_strtod_l+0x548>
    9dba:	b10b      	cbz	r3, 9dc0 <_strtod_l+0x508>
    9dbc:	4680      	mov	r8, r0
    9dbe:	4689      	mov	r9, r1
    9dc0:	9b04      	ldr	r3, [sp, #16]
    9dc2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    9dc6:	491c      	ldr	r1, [pc, #112]	; (9e38 <_strtod_l+0x580>)
    9dc8:	4642      	mov	r2, r8
    9dca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9dce:	464b      	mov	r3, r9
    9dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
    9dd4:	f7fe fca4 	bl	8720 <__aeabi_dmul>
    9dd8:	4b14      	ldr	r3, [pc, #80]	; (9e2c <_strtod_l+0x574>)
    9dda:	460a      	mov	r2, r1
    9ddc:	4680      	mov	r8, r0
    9dde:	400b      	ands	r3, r1
    9de0:	4916      	ldr	r1, [pc, #88]	; (9e3c <_strtod_l+0x584>)
    9de2:	428b      	cmp	r3, r1
    9de4:	d89f      	bhi.n	9d26 <_strtod_l+0x46e>
    9de6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    9dea:	428b      	cmp	r3, r1
    9dec:	bf86      	itte	hi
    9dee:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; 9e40 <_strtod_l+0x588>
    9df2:	f04f 38ff 	movhi.w	r8, #4294967295
    9df6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    9dfa:	2300      	movs	r3, #0
    9dfc:	9304      	str	r3, [sp, #16]
    9dfe:	e04c      	b.n	9e9a <_strtod_l+0x5e2>
    9e00:	07e2      	lsls	r2, r4, #31
    9e02:	d504      	bpl.n	9e0e <_strtod_l+0x556>
    9e04:	e9d7 2300 	ldrd	r2, r3, [r7]
    9e08:	f7fe fc8a 	bl	8720 <__aeabi_dmul>
    9e0c:	2301      	movs	r3, #1
    9e0e:	9a04      	ldr	r2, [sp, #16]
    9e10:	1064      	asrs	r4, r4, #1
    9e12:	3708      	adds	r7, #8
    9e14:	3201      	adds	r2, #1
    9e16:	9204      	str	r2, [sp, #16]
    9e18:	e7cd      	b.n	9db6 <_strtod_l+0x4fe>
    9e1a:	bf00      	nop
    9e1c:	0003a97b 	.word	0x0003a97b
    9e20:	000377a0 	.word	0x000377a0
    9e24:	00038a03 	.word	0x00038a03
    9e28:	000410c8 	.word	0x000410c8
    9e2c:	7ff00000 	.word	0x7ff00000
    9e30:	00038b1b 	.word	0x00038b1b
    9e34:	000367d8 	.word	0x000367d8
    9e38:	000367b0 	.word	0x000367b0
    9e3c:	7ca00000 	.word	0x7ca00000
    9e40:	7fefffff 	.word	0x7fefffff
    9e44:	f014 0310 	ands.w	r3, r4, #16
    9e48:	4640      	mov	r0, r8
    9e4a:	4649      	mov	r1, r9
    9e4c:	4fab      	ldr	r7, [pc, #684]	; (a0fc <_strtod_l+0x844>)
    9e4e:	bf18      	it	ne
    9e50:	236a      	movne	r3, #106	; 0x6a
    9e52:	9304      	str	r3, [sp, #16]
    9e54:	2300      	movs	r3, #0
    9e56:	07e2      	lsls	r2, r4, #31
    9e58:	d504      	bpl.n	9e64 <_strtod_l+0x5ac>
    9e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
    9e5e:	f7fe fc5f 	bl	8720 <__aeabi_dmul>
    9e62:	2301      	movs	r3, #1
    9e64:	1064      	asrs	r4, r4, #1
    9e66:	f107 0708 	add.w	r7, r7, #8
    9e6a:	d1f4      	bne.n	9e56 <_strtod_l+0x59e>
    9e6c:	b10b      	cbz	r3, 9e72 <_strtod_l+0x5ba>
    9e6e:	4680      	mov	r8, r0
    9e70:	4689      	mov	r9, r1
    9e72:	9b04      	ldr	r3, [sp, #16]
    9e74:	b143      	cbz	r3, 9e88 <_strtod_l+0x5d0>
    9e76:	f3c9 520a 	ubfx	r2, r9, #20, #11
    9e7a:	4649      	mov	r1, r9
    9e7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    9e80:	2b00      	cmp	r3, #0
    9e82:	dc50      	bgt.n	9f26 <_strtod_l+0x66e>
    9e84:	236a      	movs	r3, #106	; 0x6a
    9e86:	9304      	str	r3, [sp, #16]
    9e88:	2200      	movs	r2, #0
    9e8a:	2300      	movs	r3, #0
    9e8c:	4640      	mov	r0, r8
    9e8e:	4649      	mov	r1, r9
    9e90:	f7fe feae 	bl	8bf0 <__aeabi_dcmpeq>
    9e94:	2800      	cmp	r0, #0
    9e96:	f47f af22 	bne.w	9cde <_strtod_l+0x426>
    9e9a:	9b06      	ldr	r3, [sp, #24]
    9e9c:	4650      	mov	r0, sl
    9e9e:	9a05      	ldr	r2, [sp, #20]
    9ea0:	9300      	str	r3, [sp, #0]
    9ea2:	462b      	mov	r3, r5
    9ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ea6:	f023 fa31 	bl	2d30c <__s2b>
    9eaa:	9010      	str	r0, [sp, #64]	; 0x40
    9eac:	2800      	cmp	r0, #0
    9eae:	f43f af3a 	beq.w	9d26 <_strtod_l+0x46e>
    9eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9eb4:	ebab 0b06 	sub.w	fp, fp, r6
    9eb8:	2b00      	cmp	r3, #0
    9eba:	bfb4      	ite	lt
    9ebc:	465b      	movlt	r3, fp
    9ebe:	2300      	movge	r3, #0
    9ec0:	9311      	str	r3, [sp, #68]	; 0x44
    9ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9ec8:	9314      	str	r3, [sp, #80]	; 0x50
    9eca:	2300      	movs	r3, #0
    9ecc:	9307      	str	r3, [sp, #28]
    9ece:	9305      	str	r3, [sp, #20]
    9ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ed2:	4650      	mov	r0, sl
    9ed4:	6859      	ldr	r1, [r3, #4]
    9ed6:	f023 f96f 	bl	2d1b8 <_Balloc>
    9eda:	9006      	str	r0, [sp, #24]
    9edc:	2800      	cmp	r0, #0
    9ede:	f43f af48 	beq.w	9d72 <_strtod_l+0x4ba>
    9ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ee4:	300c      	adds	r0, #12
    9ee6:	691a      	ldr	r2, [r3, #16]
    9ee8:	f103 010c 	add.w	r1, r3, #12
    9eec:	3202      	adds	r2, #2
    9eee:	0092      	lsls	r2, r2, #2
    9ef0:	f02b f87c 	bl	34fec <memcpy>
    9ef4:	ab1a      	add	r3, sp, #104	; 0x68
    9ef6:	4642      	mov	r2, r8
    9ef8:	4650      	mov	r0, sl
    9efa:	9301      	str	r3, [sp, #4]
    9efc:	ab19      	add	r3, sp, #100	; 0x64
    9efe:	9300      	str	r3, [sp, #0]
    9f00:	464b      	mov	r3, r9
    9f02:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    9f06:	f023 fcd1 	bl	2d8ac <__d2b>
    9f0a:	9018      	str	r0, [sp, #96]	; 0x60
    9f0c:	2800      	cmp	r0, #0
    9f0e:	f43f af30 	beq.w	9d72 <_strtod_l+0x4ba>
    9f12:	2101      	movs	r1, #1
    9f14:	4650      	mov	r0, sl
    9f16:	f023 fa43 	bl	2d3a0 <__i2b>
    9f1a:	4603      	mov	r3, r0
    9f1c:	9005      	str	r0, [sp, #20]
    9f1e:	b9d0      	cbnz	r0, 9f56 <_strtod_l+0x69e>
    9f20:	2300      	movs	r3, #0
    9f22:	9305      	str	r3, [sp, #20]
    9f24:	e725      	b.n	9d72 <_strtod_l+0x4ba>
    9f26:	2b1f      	cmp	r3, #31
    9f28:	dd0e      	ble.n	9f48 <_strtod_l+0x690>
    9f2a:	2b34      	cmp	r3, #52	; 0x34
    9f2c:	f04f 0800 	mov.w	r8, #0
    9f30:	bfdb      	ittet	le
    9f32:	f04f 33ff 	movle.w	r3, #4294967295
    9f36:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    9f3a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    9f3e:	4093      	lslle	r3, r2
    9f40:	bfd8      	it	le
    9f42:	ea03 0901 	andle.w	r9, r3, r1
    9f46:	e79d      	b.n	9e84 <_strtod_l+0x5cc>
    9f48:	f04f 32ff 	mov.w	r2, #4294967295
    9f4c:	fa02 f303 	lsl.w	r3, r2, r3
    9f50:	ea03 0808 	and.w	r8, r3, r8
    9f54:	e796      	b.n	9e84 <_strtod_l+0x5cc>
    9f56:	9c19      	ldr	r4, [sp, #100]	; 0x64
    9f58:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9f5a:	2c00      	cmp	r4, #0
    9f5c:	bfa9      	itett	ge
    9f5e:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    9f60:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    9f62:	18e7      	addge	r7, r4, r3
    9f64:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    9f66:	bfb8      	it	lt
    9f68:	1b1e      	sublt	r6, r3, r4
    9f6a:	9b04      	ldr	r3, [sp, #16]
    9f6c:	bfb8      	it	lt
    9f6e:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    9f70:	1ae4      	subs	r4, r4, r3
    9f72:	4b63      	ldr	r3, [pc, #396]	; (a100 <_strtod_l+0x848>)
    9f74:	4414      	add	r4, r2
    9f76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    9f7a:	3c01      	subs	r4, #1
    9f7c:	429c      	cmp	r4, r3
    9f7e:	f280 80b0 	bge.w	a0e2 <_strtod_l+0x82a>
    9f82:	1b1b      	subs	r3, r3, r4
    9f84:	2501      	movs	r5, #1
    9f86:	2b1f      	cmp	r3, #31
    9f88:	eba2 0203 	sub.w	r2, r2, r3
    9f8c:	bfcd      	iteet	gt
    9f8e:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    9f92:	409d      	lslle	r5, r3
    9f94:	2400      	movle	r4, #0
    9f96:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    9f9a:	bfc2      	ittt	gt
    9f9c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    9fa0:	34e2      	addgt	r4, #226	; 0xe2
    9fa2:	fa05 f404 	lslgt.w	r4, r5, r4
    9fa6:	eb07 0b02 	add.w	fp, r7, r2
    9faa:	9b04      	ldr	r3, [sp, #16]
    9fac:	4416      	add	r6, r2
    9fae:	455f      	cmp	r7, fp
    9fb0:	441e      	add	r6, r3
    9fb2:	463b      	mov	r3, r7
    9fb4:	bfa8      	it	ge
    9fb6:	465b      	movge	r3, fp
    9fb8:	42b3      	cmp	r3, r6
    9fba:	bfa8      	it	ge
    9fbc:	4633      	movge	r3, r6
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	bfc2      	ittt	gt
    9fc2:	ebab 0b03 	subgt.w	fp, fp, r3
    9fc6:	1af6      	subgt	r6, r6, r3
    9fc8:	1aff      	subgt	r7, r7, r3
    9fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9fcc:	2b00      	cmp	r3, #0
    9fce:	dd16      	ble.n	9ffe <_strtod_l+0x746>
    9fd0:	461a      	mov	r2, r3
    9fd2:	9905      	ldr	r1, [sp, #20]
    9fd4:	4650      	mov	r0, sl
    9fd6:	f023 faa3 	bl	2d520 <__pow5mult>
    9fda:	9005      	str	r0, [sp, #20]
    9fdc:	2800      	cmp	r0, #0
    9fde:	d09f      	beq.n	9f20 <_strtod_l+0x668>
    9fe0:	4601      	mov	r1, r0
    9fe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9fe4:	4650      	mov	r0, sl
    9fe6:	f023 f9f1 	bl	2d3cc <__multiply>
    9fea:	900d      	str	r0, [sp, #52]	; 0x34
    9fec:	2800      	cmp	r0, #0
    9fee:	f43f aec0 	beq.w	9d72 <_strtod_l+0x4ba>
    9ff2:	9918      	ldr	r1, [sp, #96]	; 0x60
    9ff4:	4650      	mov	r0, sl
    9ff6:	f023 f91f 	bl	2d238 <_Bfree>
    9ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ffc:	9318      	str	r3, [sp, #96]	; 0x60
    9ffe:	f1bb 0f00 	cmp.w	fp, #0
    a002:	dc71      	bgt.n	a0e8 <_strtod_l+0x830>
    a004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a006:	2b00      	cmp	r3, #0
    a008:	dd08      	ble.n	a01c <_strtod_l+0x764>
    a00a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a00c:	4650      	mov	r0, sl
    a00e:	9906      	ldr	r1, [sp, #24]
    a010:	f023 fa86 	bl	2d520 <__pow5mult>
    a014:	9006      	str	r0, [sp, #24]
    a016:	2800      	cmp	r0, #0
    a018:	f43f aea9 	beq.w	9d6e <_strtod_l+0x4b6>
    a01c:	2e00      	cmp	r6, #0
    a01e:	dd08      	ble.n	a032 <_strtod_l+0x77a>
    a020:	4632      	mov	r2, r6
    a022:	9906      	ldr	r1, [sp, #24]
    a024:	4650      	mov	r0, sl
    a026:	f023 fad5 	bl	2d5d4 <__lshift>
    a02a:	9006      	str	r0, [sp, #24]
    a02c:	2800      	cmp	r0, #0
    a02e:	f43f ae9e 	beq.w	9d6e <_strtod_l+0x4b6>
    a032:	2f00      	cmp	r7, #0
    a034:	dd08      	ble.n	a048 <_strtod_l+0x790>
    a036:	463a      	mov	r2, r7
    a038:	9905      	ldr	r1, [sp, #20]
    a03a:	4650      	mov	r0, sl
    a03c:	f023 faca 	bl	2d5d4 <__lshift>
    a040:	9005      	str	r0, [sp, #20]
    a042:	2800      	cmp	r0, #0
    a044:	f43f ae95 	beq.w	9d72 <_strtod_l+0x4ba>
    a048:	9a06      	ldr	r2, [sp, #24]
    a04a:	4650      	mov	r0, sl
    a04c:	9918      	ldr	r1, [sp, #96]	; 0x60
    a04e:	f023 fb2d 	bl	2d6ac <__mdiff>
    a052:	9007      	str	r0, [sp, #28]
    a054:	2800      	cmp	r0, #0
    a056:	f43f ae8c 	beq.w	9d72 <_strtod_l+0x4ba>
    a05a:	68c3      	ldr	r3, [r0, #12]
    a05c:	9905      	ldr	r1, [sp, #20]
    a05e:	930d      	str	r3, [sp, #52]	; 0x34
    a060:	2300      	movs	r3, #0
    a062:	60c3      	str	r3, [r0, #12]
    a064:	f02b fd21 	bl	35aaa <__mcmp>
    a068:	2800      	cmp	r0, #0
    a06a:	da4b      	bge.n	a104 <_strtod_l+0x84c>
    a06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a06e:	ea53 0308 	orrs.w	r3, r3, r8
    a072:	f040 80bc 	bne.w	a1ee <_strtod_l+0x936>
    a076:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a07a:	2b00      	cmp	r3, #0
    a07c:	f040 80b7 	bne.w	a1ee <_strtod_l+0x936>
    a080:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a084:	0d1b      	lsrs	r3, r3, #20
    a086:	051b      	lsls	r3, r3, #20
    a088:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a08c:	f240 80af 	bls.w	a1ee <_strtod_l+0x936>
    a090:	9b07      	ldr	r3, [sp, #28]
    a092:	695b      	ldr	r3, [r3, #20]
    a094:	b923      	cbnz	r3, a0a0 <_strtod_l+0x7e8>
    a096:	9b07      	ldr	r3, [sp, #28]
    a098:	691b      	ldr	r3, [r3, #16]
    a09a:	2b01      	cmp	r3, #1
    a09c:	f340 80a7 	ble.w	a1ee <_strtod_l+0x936>
    a0a0:	2201      	movs	r2, #1
    a0a2:	9907      	ldr	r1, [sp, #28]
    a0a4:	4650      	mov	r0, sl
    a0a6:	f023 fa95 	bl	2d5d4 <__lshift>
    a0aa:	9905      	ldr	r1, [sp, #20]
    a0ac:	9007      	str	r0, [sp, #28]
    a0ae:	f02b fcfc 	bl	35aaa <__mcmp>
    a0b2:	2800      	cmp	r0, #0
    a0b4:	f340 809b 	ble.w	a1ee <_strtod_l+0x936>
    a0b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a0bc:	9a04      	ldr	r2, [sp, #16]
    a0be:	0d1b      	lsrs	r3, r3, #20
    a0c0:	051b      	lsls	r3, r3, #20
    a0c2:	2a00      	cmp	r2, #0
    a0c4:	d079      	beq.n	a1ba <_strtod_l+0x902>
    a0c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a0ca:	d86d      	bhi.n	a1a8 <_strtod_l+0x8f0>
    a0cc:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a0d0:	d846      	bhi.n	a160 <_strtod_l+0x8a8>
    a0d2:	f04f 0800 	mov.w	r8, #0
    a0d6:	f04f 0900 	mov.w	r9, #0
    a0da:	2322      	movs	r3, #34	; 0x22
    a0dc:	f8ca 3000 	str.w	r3, [sl]
    a0e0:	e64e      	b.n	9d80 <_strtod_l+0x4c8>
    a0e2:	2400      	movs	r4, #0
    a0e4:	2501      	movs	r5, #1
    a0e6:	e75e      	b.n	9fa6 <_strtod_l+0x6ee>
    a0e8:	465a      	mov	r2, fp
    a0ea:	9918      	ldr	r1, [sp, #96]	; 0x60
    a0ec:	4650      	mov	r0, sl
    a0ee:	f023 fa71 	bl	2d5d4 <__lshift>
    a0f2:	9018      	str	r0, [sp, #96]	; 0x60
    a0f4:	2800      	cmp	r0, #0
    a0f6:	d185      	bne.n	a004 <_strtod_l+0x74c>
    a0f8:	e63b      	b.n	9d72 <_strtod_l+0x4ba>
    a0fa:	bf00      	nop
    a0fc:	00036788 	.word	0x00036788
    a100:	fffffc02 	.word	0xfffffc02
    a104:	46cb      	mov	fp, r9
    a106:	f040 80a3 	bne.w	a250 <_strtod_l+0x998>
    a10a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a10c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a110:	2a00      	cmp	r2, #0
    a112:	d040      	beq.n	a196 <_strtod_l+0x8de>
    a114:	4a96      	ldr	r2, [pc, #600]	; (a370 <_strtod_l+0xab8>)
    a116:	4293      	cmp	r3, r2
    a118:	d158      	bne.n	a1cc <_strtod_l+0x914>
    a11a:	9b04      	ldr	r3, [sp, #16]
    a11c:	4642      	mov	r2, r8
    a11e:	b97b      	cbnz	r3, a140 <_strtod_l+0x888>
    a120:	f1b8 3fff 	cmp.w	r8, #4294967295
    a124:	f040 8089 	bne.w	a23a <_strtod_l+0x982>
    a128:	4b92      	ldr	r3, [pc, #584]	; (a374 <_strtod_l+0xabc>)
    a12a:	4599      	cmp	r9, r3
    a12c:	f43f ae21 	beq.w	9d72 <_strtod_l+0x4ba>
    a130:	4b91      	ldr	r3, [pc, #580]	; (a378 <_strtod_l+0xac0>)
    a132:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a136:	ea09 0303 	and.w	r3, r9, r3
    a13a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a13e:	e61f      	b.n	9d80 <_strtod_l+0x4c8>
    a140:	4b8d      	ldr	r3, [pc, #564]	; (a378 <_strtod_l+0xac0>)
    a142:	ea09 0303 	and.w	r3, r9, r3
    a146:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a14a:	d916      	bls.n	a17a <_strtod_l+0x8c2>
    a14c:	f118 0101 	adds.w	r1, r8, #1
    a150:	d11b      	bne.n	a18a <_strtod_l+0x8d2>
    a152:	4a88      	ldr	r2, [pc, #544]	; (a374 <_strtod_l+0xabc>)
    a154:	4591      	cmp	r9, r2
    a156:	f43f ae0c 	beq.w	9d72 <_strtod_l+0x4ba>
    a15a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a15e:	4680      	mov	r8, r0
    a160:	4b86      	ldr	r3, [pc, #536]	; (a37c <_strtod_l+0xac4>)
    a162:	4640      	mov	r0, r8
    a164:	4649      	mov	r1, r9
    a166:	2200      	movs	r2, #0
    a168:	f7fe fada 	bl	8720 <__aeabi_dmul>
    a16c:	460b      	mov	r3, r1
    a16e:	4680      	mov	r8, r0
    a170:	4689      	mov	r9, r1
    a172:	4303      	orrs	r3, r0
    a174:	f47f ae04 	bne.w	9d80 <_strtod_l+0x4c8>
    a178:	e7af      	b.n	a0da <_strtod_l+0x822>
    a17a:	0d1e      	lsrs	r6, r3, #20
    a17c:	f04f 31ff 	mov.w	r1, #4294967295
    a180:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a184:	40b1      	lsls	r1, r6
    a186:	4588      	cmp	r8, r1
    a188:	d0e7      	beq.n	a15a <_strtod_l+0x8a2>
    a18a:	2c00      	cmp	r4, #0
    a18c:	d05e      	beq.n	a24c <_strtod_l+0x994>
    a18e:	ea14 0f0b 	tst.w	r4, fp
    a192:	d0e5      	beq.n	a160 <_strtod_l+0x8a8>
    a194:	e01e      	b.n	a1d4 <_strtod_l+0x91c>
    a196:	2b00      	cmp	r3, #0
    a198:	d14a      	bne.n	a230 <_strtod_l+0x978>
    a19a:	f1b8 0f00 	cmp.w	r8, #0
    a19e:	d08b      	beq.n	a0b8 <_strtod_l+0x800>
    a1a0:	b364      	cbz	r4, a1fc <_strtod_l+0x944>
    a1a2:	ea14 0f0b 	tst.w	r4, fp
    a1a6:	e02b      	b.n	a200 <_strtod_l+0x948>
    a1a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a1ac:	f04f 38ff 	mov.w	r8, #4294967295
    a1b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a1b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a1b8:	e7d2      	b.n	a160 <_strtod_l+0x8a8>
    a1ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a1be:	f04f 38ff 	mov.w	r8, #4294967295
    a1c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a1c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a1ca:	e5d9      	b.n	9d80 <_strtod_l+0x4c8>
    a1cc:	b19c      	cbz	r4, a1f6 <_strtod_l+0x93e>
    a1ce:	ea14 0f09 	tst.w	r4, r9
    a1d2:	d00c      	beq.n	a1ee <_strtod_l+0x936>
    a1d4:	9a04      	ldr	r2, [sp, #16]
    a1d6:	4640      	mov	r0, r8
    a1d8:	4649      	mov	r1, r9
    a1da:	f02b f928 	bl	3542e <sulp>
    a1de:	4602      	mov	r2, r0
    a1e0:	460b      	mov	r3, r1
    a1e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a1e6:	f7fe f8e5 	bl	83b4 <__adddf3>
    a1ea:	4680      	mov	r8, r0
    a1ec:	4689      	mov	r9, r1
    a1ee:	9b04      	ldr	r3, [sp, #16]
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d1b5      	bne.n	a160 <_strtod_l+0x8a8>
    a1f4:	e5c4      	b.n	9d80 <_strtod_l+0x4c8>
    a1f6:	ea15 0f08 	tst.w	r5, r8
    a1fa:	e7ea      	b.n	a1d2 <_strtod_l+0x91a>
    a1fc:	ea18 0f05 	tst.w	r8, r5
    a200:	d0f5      	beq.n	a1ee <_strtod_l+0x936>
    a202:	9a04      	ldr	r2, [sp, #16]
    a204:	4640      	mov	r0, r8
    a206:	4649      	mov	r1, r9
    a208:	f02b f911 	bl	3542e <sulp>
    a20c:	4602      	mov	r2, r0
    a20e:	460b      	mov	r3, r1
    a210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a214:	f7fe f8cc 	bl	83b0 <__aeabi_dsub>
    a218:	2200      	movs	r2, #0
    a21a:	2300      	movs	r3, #0
    a21c:	4604      	mov	r4, r0
    a21e:	460d      	mov	r5, r1
    a220:	f7fe fce6 	bl	8bf0 <__aeabi_dcmpeq>
    a224:	2800      	cmp	r0, #0
    a226:	f47f af54 	bne.w	a0d2 <_strtod_l+0x81a>
    a22a:	46a0      	mov	r8, r4
    a22c:	46a9      	mov	r9, r5
    a22e:	e7de      	b.n	a1ee <_strtod_l+0x936>
    a230:	2c00      	cmp	r4, #0
    a232:	d1b6      	bne.n	a1a2 <_strtod_l+0x8ea>
    a234:	ea15 0f08 	tst.w	r5, r8
    a238:	e7e2      	b.n	a200 <_strtod_l+0x948>
    a23a:	b124      	cbz	r4, a246 <_strtod_l+0x98e>
    a23c:	ea14 0f09 	tst.w	r4, r9
    a240:	f43f ad9e 	beq.w	9d80 <_strtod_l+0x4c8>
    a244:	e7c6      	b.n	a1d4 <_strtod_l+0x91c>
    a246:	ea18 0f05 	tst.w	r8, r5
    a24a:	e7f9      	b.n	a240 <_strtod_l+0x988>
    a24c:	422a      	tst	r2, r5
    a24e:	e7a0      	b.n	a192 <_strtod_l+0x8da>
    a250:	9905      	ldr	r1, [sp, #20]
    a252:	9807      	ldr	r0, [sp, #28]
    a254:	f02b fc44 	bl	35ae0 <__ratio>
    a258:	2200      	movs	r2, #0
    a25a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a25e:	4604      	mov	r4, r0
    a260:	460d      	mov	r5, r1
    a262:	f7fe fcd9 	bl	8c18 <__aeabi_dcmple>
    a266:	2800      	cmp	r0, #0
    a268:	d06d      	beq.n	a346 <_strtod_l+0xa8e>
    a26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a26c:	2b00      	cmp	r3, #0
    a26e:	d178      	bne.n	a362 <_strtod_l+0xaaa>
    a270:	f1b8 0f00 	cmp.w	r8, #0
    a274:	d156      	bne.n	a324 <_strtod_l+0xa6c>
    a276:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a27a:	2b00      	cmp	r3, #0
    a27c:	d159      	bne.n	a332 <_strtod_l+0xa7a>
    a27e:	2200      	movs	r2, #0
    a280:	4b3f      	ldr	r3, [pc, #252]	; (a380 <_strtod_l+0xac8>)
    a282:	4620      	mov	r0, r4
    a284:	4629      	mov	r1, r5
    a286:	f7fe fcbd 	bl	8c04 <__aeabi_dcmplt>
    a28a:	2800      	cmp	r0, #0
    a28c:	d158      	bne.n	a340 <_strtod_l+0xa88>
    a28e:	4620      	mov	r0, r4
    a290:	4629      	mov	r1, r5
    a292:	2200      	movs	r2, #0
    a294:	4b3b      	ldr	r3, [pc, #236]	; (a384 <_strtod_l+0xacc>)
    a296:	f7fe fa43 	bl	8720 <__aeabi_dmul>
    a29a:	4604      	mov	r4, r0
    a29c:	460d      	mov	r5, r1
    a29e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a2a2:	9408      	str	r4, [sp, #32]
    a2a4:	9309      	str	r3, [sp, #36]	; 0x24
    a2a6:	4b34      	ldr	r3, [pc, #208]	; (a378 <_strtod_l+0xac0>)
    a2a8:	4a33      	ldr	r2, [pc, #204]	; (a378 <_strtod_l+0xac0>)
    a2aa:	ea0b 0303 	and.w	r3, fp, r3
    a2ae:	ea0b 0202 	and.w	r2, fp, r2
    a2b2:	9315      	str	r3, [sp, #84]	; 0x54
    a2b4:	4b34      	ldr	r3, [pc, #208]	; (a388 <_strtod_l+0xad0>)
    a2b6:	429a      	cmp	r2, r3
    a2b8:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a2bc:	f040 809e 	bne.w	a3fc <_strtod_l+0xb44>
    a2c0:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a2c4:	4640      	mov	r0, r8
    a2c6:	4649      	mov	r1, r9
    a2c8:	f023 fa86 	bl	2d7d8 <__ulp>
    a2cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a2d0:	f7fe fa26 	bl	8720 <__aeabi_dmul>
    a2d4:	4642      	mov	r2, r8
    a2d6:	464b      	mov	r3, r9
    a2d8:	f7fe f86c 	bl	83b4 <__adddf3>
    a2dc:	460b      	mov	r3, r1
    a2de:	4926      	ldr	r1, [pc, #152]	; (a378 <_strtod_l+0xac0>)
    a2e0:	4680      	mov	r8, r0
    a2e2:	4a2a      	ldr	r2, [pc, #168]	; (a38c <_strtod_l+0xad4>)
    a2e4:	4019      	ands	r1, r3
    a2e6:	4291      	cmp	r1, r2
    a2e8:	d954      	bls.n	a394 <_strtod_l+0xadc>
    a2ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a2ec:	4b21      	ldr	r3, [pc, #132]	; (a374 <_strtod_l+0xabc>)
    a2ee:	429a      	cmp	r2, r3
    a2f0:	d103      	bne.n	a2fa <_strtod_l+0xa42>
    a2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2f4:	3301      	adds	r3, #1
    a2f6:	f43f ad3c 	beq.w	9d72 <_strtod_l+0x4ba>
    a2fa:	f8df 9078 	ldr.w	r9, [pc, #120]	; a374 <_strtod_l+0xabc>
    a2fe:	f04f 38ff 	mov.w	r8, #4294967295
    a302:	9918      	ldr	r1, [sp, #96]	; 0x60
    a304:	4650      	mov	r0, sl
    a306:	f022 ff97 	bl	2d238 <_Bfree>
    a30a:	9906      	ldr	r1, [sp, #24]
    a30c:	4650      	mov	r0, sl
    a30e:	f022 ff93 	bl	2d238 <_Bfree>
    a312:	9905      	ldr	r1, [sp, #20]
    a314:	4650      	mov	r0, sl
    a316:	f022 ff8f 	bl	2d238 <_Bfree>
    a31a:	9907      	ldr	r1, [sp, #28]
    a31c:	4650      	mov	r0, sl
    a31e:	f022 ff8b 	bl	2d238 <_Bfree>
    a322:	e5d5      	b.n	9ed0 <_strtod_l+0x618>
    a324:	f1b8 0f01 	cmp.w	r8, #1
    a328:	d103      	bne.n	a332 <_strtod_l+0xa7a>
    a32a:	f1b9 0f00 	cmp.w	r9, #0
    a32e:	f43f aed0 	beq.w	a0d2 <_strtod_l+0x81a>
    a332:	4c17      	ldr	r4, [pc, #92]	; (a390 <_strtod_l+0xad8>)
    a334:	2300      	movs	r3, #0
    a336:	4d12      	ldr	r5, [pc, #72]	; (a380 <_strtod_l+0xac8>)
    a338:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a33c:	2400      	movs	r4, #0
    a33e:	e7b2      	b.n	a2a6 <_strtod_l+0x9ee>
    a340:	2400      	movs	r4, #0
    a342:	4d10      	ldr	r5, [pc, #64]	; (a384 <_strtod_l+0xacc>)
    a344:	e7ab      	b.n	a29e <_strtod_l+0x9e6>
    a346:	4b0f      	ldr	r3, [pc, #60]	; (a384 <_strtod_l+0xacc>)
    a348:	4620      	mov	r0, r4
    a34a:	4629      	mov	r1, r5
    a34c:	2200      	movs	r2, #0
    a34e:	f7fe f9e7 	bl	8720 <__aeabi_dmul>
    a352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a354:	4604      	mov	r4, r0
    a356:	460d      	mov	r5, r1
    a358:	2b00      	cmp	r3, #0
    a35a:	d0a0      	beq.n	a29e <_strtod_l+0x9e6>
    a35c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a360:	e7a1      	b.n	a2a6 <_strtod_l+0x9ee>
    a362:	4c07      	ldr	r4, [pc, #28]	; (a380 <_strtod_l+0xac8>)
    a364:	2300      	movs	r3, #0
    a366:	4625      	mov	r5, r4
    a368:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a36c:	461c      	mov	r4, r3
    a36e:	e79a      	b.n	a2a6 <_strtod_l+0x9ee>
    a370:	000fffff 	.word	0x000fffff
    a374:	7fefffff 	.word	0x7fefffff
    a378:	7ff00000 	.word	0x7ff00000
    a37c:	39500000 	.word	0x39500000
    a380:	3ff00000 	.word	0x3ff00000
    a384:	3fe00000 	.word	0x3fe00000
    a388:	7fe00000 	.word	0x7fe00000
    a38c:	7c9fffff 	.word	0x7c9fffff
    a390:	bff00000 	.word	0xbff00000
    a394:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a398:	9b04      	ldr	r3, [sp, #16]
    a39a:	464e      	mov	r6, r9
    a39c:	2b00      	cmp	r3, #0
    a39e:	d1b0      	bne.n	a302 <_strtod_l+0xa4a>
    a3a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a3a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a3a6:	0d1b      	lsrs	r3, r3, #20
    a3a8:	051b      	lsls	r3, r3, #20
    a3aa:	429a      	cmp	r2, r3
    a3ac:	d1a9      	bne.n	a302 <_strtod_l+0xa4a>
    a3ae:	4620      	mov	r0, r4
    a3b0:	4629      	mov	r1, r5
    a3b2:	f7fe fe43 	bl	903c <__aeabi_d2lz>
    a3b6:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a3ba:	f7fe f983 	bl	86c4 <__aeabi_l2d>
    a3be:	460b      	mov	r3, r1
    a3c0:	4602      	mov	r2, r0
    a3c2:	4629      	mov	r1, r5
    a3c4:	4620      	mov	r0, r4
    a3c6:	ea46 0608 	orr.w	r6, r6, r8
    a3ca:	f7fd fff1 	bl	83b0 <__aeabi_dsub>
    a3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a3d0:	4604      	mov	r4, r0
    a3d2:	460d      	mov	r5, r1
    a3d4:	431e      	orrs	r6, r3
    a3d6:	d04a      	beq.n	a46e <_strtod_l+0xbb6>
    a3d8:	a32d      	add	r3, pc, #180	; (adr r3, a490 <_strtod_l+0xbd8>)
    a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3de:	f7fe fc11 	bl	8c04 <__aeabi_dcmplt>
    a3e2:	2800      	cmp	r0, #0
    a3e4:	f47f accc 	bne.w	9d80 <_strtod_l+0x4c8>
    a3e8:	4620      	mov	r0, r4
    a3ea:	4629      	mov	r1, r5
    a3ec:	a32a      	add	r3, pc, #168	; (adr r3, a498 <_strtod_l+0xbe0>)
    a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3f2:	f7fe fc25 	bl	8c40 <__aeabi_dcmpgt>
    a3f6:	2800      	cmp	r0, #0
    a3f8:	d083      	beq.n	a302 <_strtod_l+0xa4a>
    a3fa:	e4c1      	b.n	9d80 <_strtod_l+0x4c8>
    a3fc:	9b04      	ldr	r3, [sp, #16]
    a3fe:	b313      	cbz	r3, a446 <_strtod_l+0xb8e>
    a400:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a402:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a406:	d81e      	bhi.n	a446 <_strtod_l+0xb8e>
    a408:	4620      	mov	r0, r4
    a40a:	4629      	mov	r1, r5
    a40c:	a324      	add	r3, pc, #144	; (adr r3, a4a0 <_strtod_l+0xbe8>)
    a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a412:	f7fe fc01 	bl	8c18 <__aeabi_dcmple>
    a416:	b190      	cbz	r0, a43e <_strtod_l+0xb86>
    a418:	4629      	mov	r1, r5
    a41a:	4620      	mov	r0, r4
    a41c:	f7fe fc58 	bl	8cd0 <__aeabi_d2uiz>
    a420:	2801      	cmp	r0, #1
    a422:	bf38      	it	cc
    a424:	2001      	movcc	r0, #1
    a426:	f7fe f901 	bl	862c <__aeabi_ui2d>
    a42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a42c:	4604      	mov	r4, r0
    a42e:	460d      	mov	r5, r1
    a430:	b9d3      	cbnz	r3, a468 <_strtod_l+0xbb0>
    a432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a436:	9012      	str	r0, [sp, #72]	; 0x48
    a438:	9313      	str	r3, [sp, #76]	; 0x4c
    a43a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a43e:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a442:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a444:	1a9f      	subs	r7, r3, r2
    a446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a44a:	f023 f9c5 	bl	2d7d8 <__ulp>
    a44e:	4602      	mov	r2, r0
    a450:	460b      	mov	r3, r1
    a452:	4630      	mov	r0, r6
    a454:	4639      	mov	r1, r7
    a456:	f7fe f963 	bl	8720 <__aeabi_dmul>
    a45a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a45e:	f7fd ffa9 	bl	83b4 <__adddf3>
    a462:	4680      	mov	r8, r0
    a464:	4689      	mov	r9, r1
    a466:	e797      	b.n	a398 <_strtod_l+0xae0>
    a468:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a46c:	e7e5      	b.n	a43a <_strtod_l+0xb82>
    a46e:	a30e      	add	r3, pc, #56	; (adr r3, a4a8 <_strtod_l+0xbf0>)
    a470:	e9d3 2300 	ldrd	r2, r3, [r3]
    a474:	f7fe fbc6 	bl	8c04 <__aeabi_dcmplt>
    a478:	e7bd      	b.n	a3f6 <_strtod_l+0xb3e>
    a47a:	2a65      	cmp	r2, #101	; 0x65
    a47c:	f43f ab48 	beq.w	9b10 <_strtod_l+0x258>
    a480:	2a45      	cmp	r2, #69	; 0x45
    a482:	f43f ab45 	beq.w	9b10 <_strtod_l+0x258>
    a486:	2301      	movs	r3, #1
    a488:	f7ff bb7e 	b.w	9b88 <_strtod_l+0x2d0>
    a48c:	f3af 8000 	nop.w
    a490:	94a03595 	.word	0x94a03595
    a494:	3fdfffff 	.word	0x3fdfffff
    a498:	35afe535 	.word	0x35afe535
    a49c:	3fe00000 	.word	0x3fe00000
    a4a0:	ffc00000 	.word	0xffc00000
    a4a4:	41dfffff 	.word	0x41dfffff
    a4a8:	94a03595 	.word	0x94a03595
    a4ac:	3fcfffff 	.word	0x3fcfffff

0000a4b0 <_dtoa_r>:
    a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4b4:	4614      	mov	r4, r2
    a4b6:	b097      	sub	sp, #92	; 0x5c
    a4b8:	461d      	mov	r5, r3
    a4ba:	6a47      	ldr	r7, [r0, #36]	; 0x24
    a4bc:	4683      	mov	fp, r0
    a4be:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    a4c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    a4c4:	b97f      	cbnz	r7, a4e6 <_dtoa_r+0x36>
    a4c6:	2010      	movs	r0, #16
    a4c8:	f021 fb70 	bl	2bbac <malloc>
    a4cc:	4602      	mov	r2, r0
    a4ce:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    a4d2:	b920      	cbnz	r0, a4de <_dtoa_r+0x2e>
    a4d4:	4ba2      	ldr	r3, [pc, #648]	; (a760 <_dtoa_r+0x2b0>)
    a4d6:	21ea      	movs	r1, #234	; 0xea
    a4d8:	48a2      	ldr	r0, [pc, #648]	; (a764 <_dtoa_r+0x2b4>)
    a4da:	f023 fe23 	bl	2e124 <__assert_func>
    a4de:	e9c0 7701 	strd	r7, r7, [r0, #4]
    a4e2:	6007      	str	r7, [r0, #0]
    a4e4:	60c7      	str	r7, [r0, #12]
    a4e6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a4ea:	6819      	ldr	r1, [r3, #0]
    a4ec:	b159      	cbz	r1, a506 <_dtoa_r+0x56>
    a4ee:	685a      	ldr	r2, [r3, #4]
    a4f0:	2301      	movs	r3, #1
    a4f2:	4658      	mov	r0, fp
    a4f4:	4093      	lsls	r3, r2
    a4f6:	604a      	str	r2, [r1, #4]
    a4f8:	608b      	str	r3, [r1, #8]
    a4fa:	f022 fe9d 	bl	2d238 <_Bfree>
    a4fe:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a502:	2200      	movs	r2, #0
    a504:	601a      	str	r2, [r3, #0]
    a506:	1e2b      	subs	r3, r5, #0
    a508:	bfb7      	itett	lt
    a50a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    a50e:	2300      	movge	r3, #0
    a510:	2201      	movlt	r2, #1
    a512:	9305      	strlt	r3, [sp, #20]
    a514:	bfa8      	it	ge
    a516:	6033      	strge	r3, [r6, #0]
    a518:	9f05      	ldr	r7, [sp, #20]
    a51a:	4b93      	ldr	r3, [pc, #588]	; (a768 <_dtoa_r+0x2b8>)
    a51c:	bfb8      	it	lt
    a51e:	6032      	strlt	r2, [r6, #0]
    a520:	43bb      	bics	r3, r7
    a522:	d119      	bne.n	a558 <_dtoa_r+0xa8>
    a524:	f242 730f 	movw	r3, #9999	; 0x270f
    a528:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a52a:	6013      	str	r3, [r2, #0]
    a52c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    a530:	4323      	orrs	r3, r4
    a532:	f000 85e0 	beq.w	b0f6 <_dtoa_r+0xc46>
    a536:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a538:	b953      	cbnz	r3, a550 <_dtoa_r+0xa0>
    a53a:	4b8c      	ldr	r3, [pc, #560]	; (a76c <_dtoa_r+0x2bc>)
    a53c:	e021      	b.n	a582 <_dtoa_r+0xd2>
    a53e:	4b8c      	ldr	r3, [pc, #560]	; (a770 <_dtoa_r+0x2c0>)
    a540:	9308      	str	r3, [sp, #32]
    a542:	3308      	adds	r3, #8
    a544:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a546:	6013      	str	r3, [r2, #0]
    a548:	9808      	ldr	r0, [sp, #32]
    a54a:	b017      	add	sp, #92	; 0x5c
    a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a550:	4b86      	ldr	r3, [pc, #536]	; (a76c <_dtoa_r+0x2bc>)
    a552:	9308      	str	r3, [sp, #32]
    a554:	3303      	adds	r3, #3
    a556:	e7f5      	b.n	a544 <_dtoa_r+0x94>
    a558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a55c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    a560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a564:	2200      	movs	r2, #0
    a566:	2300      	movs	r3, #0
    a568:	f7fe fb42 	bl	8bf0 <__aeabi_dcmpeq>
    a56c:	4680      	mov	r8, r0
    a56e:	b150      	cbz	r0, a586 <_dtoa_r+0xd6>
    a570:	2301      	movs	r3, #1
    a572:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a574:	6013      	str	r3, [r2, #0]
    a576:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a578:	b113      	cbz	r3, a580 <_dtoa_r+0xd0>
    a57a:	4b7e      	ldr	r3, [pc, #504]	; (a774 <_dtoa_r+0x2c4>)
    a57c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a57e:	6013      	str	r3, [r2, #0]
    a580:	4b7d      	ldr	r3, [pc, #500]	; (a778 <_dtoa_r+0x2c8>)
    a582:	9308      	str	r3, [sp, #32]
    a584:	e7e0      	b.n	a548 <_dtoa_r+0x98>
    a586:	ab14      	add	r3, sp, #80	; 0x50
    a588:	f3c7 560a 	ubfx	r6, r7, #20, #11
    a58c:	4658      	mov	r0, fp
    a58e:	9301      	str	r3, [sp, #4]
    a590:	ab15      	add	r3, sp, #84	; 0x54
    a592:	9300      	str	r3, [sp, #0]
    a594:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    a598:	f023 f988 	bl	2d8ac <__d2b>
    a59c:	9003      	str	r0, [sp, #12]
    a59e:	2e00      	cmp	r6, #0
    a5a0:	d078      	beq.n	a694 <_dtoa_r+0x1e4>
    a5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5a4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    a5a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    a5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a5b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    a5b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a5b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    a5bc:	4619      	mov	r1, r3
    a5be:	2200      	movs	r2, #0
    a5c0:	4b6e      	ldr	r3, [pc, #440]	; (a77c <_dtoa_r+0x2cc>)
    a5c2:	f7fd fef5 	bl	83b0 <__aeabi_dsub>
    a5c6:	a360      	add	r3, pc, #384	; (adr r3, a748 <_dtoa_r+0x298>)
    a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5cc:	f7fe f8a8 	bl	8720 <__aeabi_dmul>
    a5d0:	a35f      	add	r3, pc, #380	; (adr r3, a750 <_dtoa_r+0x2a0>)
    a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5d6:	f7fd feed 	bl	83b4 <__adddf3>
    a5da:	4604      	mov	r4, r0
    a5dc:	460d      	mov	r5, r1
    a5de:	4630      	mov	r0, r6
    a5e0:	f7fe f834 	bl	864c <__aeabi_i2d>
    a5e4:	a35c      	add	r3, pc, #368	; (adr r3, a758 <_dtoa_r+0x2a8>)
    a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5ea:	f7fe f899 	bl	8720 <__aeabi_dmul>
    a5ee:	4602      	mov	r2, r0
    a5f0:	460b      	mov	r3, r1
    a5f2:	4620      	mov	r0, r4
    a5f4:	4629      	mov	r1, r5
    a5f6:	f7fd fedd 	bl	83b4 <__adddf3>
    a5fa:	4604      	mov	r4, r0
    a5fc:	460d      	mov	r5, r1
    a5fe:	f7fe fb3f 	bl	8c80 <__aeabi_d2iz>
    a602:	2200      	movs	r2, #0
    a604:	4607      	mov	r7, r0
    a606:	2300      	movs	r3, #0
    a608:	4620      	mov	r0, r4
    a60a:	4629      	mov	r1, r5
    a60c:	f7fe fafa 	bl	8c04 <__aeabi_dcmplt>
    a610:	b140      	cbz	r0, a624 <_dtoa_r+0x174>
    a612:	4638      	mov	r0, r7
    a614:	f7fe f81a 	bl	864c <__aeabi_i2d>
    a618:	4622      	mov	r2, r4
    a61a:	462b      	mov	r3, r5
    a61c:	f7fe fae8 	bl	8bf0 <__aeabi_dcmpeq>
    a620:	b900      	cbnz	r0, a624 <_dtoa_r+0x174>
    a622:	3f01      	subs	r7, #1
    a624:	2f16      	cmp	r7, #22
    a626:	d854      	bhi.n	a6d2 <_dtoa_r+0x222>
    a628:	4b55      	ldr	r3, [pc, #340]	; (a780 <_dtoa_r+0x2d0>)
    a62a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a62e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a632:	e9d3 2300 	ldrd	r2, r3, [r3]
    a636:	f7fe fae5 	bl	8c04 <__aeabi_dcmplt>
    a63a:	2800      	cmp	r0, #0
    a63c:	d04b      	beq.n	a6d6 <_dtoa_r+0x226>
    a63e:	3f01      	subs	r7, #1
    a640:	2300      	movs	r3, #0
    a642:	9312      	str	r3, [sp, #72]	; 0x48
    a644:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a646:	1b9b      	subs	r3, r3, r6
    a648:	1e5a      	subs	r2, r3, #1
    a64a:	bf4c      	ite	mi
    a64c:	f1c3 0301 	rsbmi	r3, r3, #1
    a650:	2300      	movpl	r3, #0
    a652:	920a      	str	r2, [sp, #40]	; 0x28
    a654:	bf45      	ittet	mi
    a656:	9306      	strmi	r3, [sp, #24]
    a658:	2300      	movmi	r3, #0
    a65a:	9306      	strpl	r3, [sp, #24]
    a65c:	930a      	strmi	r3, [sp, #40]	; 0x28
    a65e:	2f00      	cmp	r7, #0
    a660:	db3b      	blt.n	a6da <_dtoa_r+0x22a>
    a662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a664:	970f      	str	r7, [sp, #60]	; 0x3c
    a666:	443b      	add	r3, r7
    a668:	930a      	str	r3, [sp, #40]	; 0x28
    a66a:	2300      	movs	r3, #0
    a66c:	930b      	str	r3, [sp, #44]	; 0x2c
    a66e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a670:	2b09      	cmp	r3, #9
    a672:	f200 8089 	bhi.w	a788 <_dtoa_r+0x2d8>
    a676:	2b05      	cmp	r3, #5
    a678:	bfc5      	ittet	gt
    a67a:	3b04      	subgt	r3, #4
    a67c:	2400      	movgt	r4, #0
    a67e:	2401      	movle	r4, #1
    a680:	9320      	strgt	r3, [sp, #128]	; 0x80
    a682:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a684:	3b02      	subs	r3, #2
    a686:	2b03      	cmp	r3, #3
    a688:	f200 8089 	bhi.w	a79e <_dtoa_r+0x2ee>
    a68c:	e8df f003 	tbb	[pc, r3]
    a690:	59383a2d 	.word	0x59383a2d
    a694:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    a698:	441e      	add	r6, r3
    a69a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    a69e:	2b20      	cmp	r3, #32
    a6a0:	bfc9      	itett	gt
    a6a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    a6a6:	f1c3 0320 	rsble	r3, r3, #32
    a6aa:	409f      	lslgt	r7, r3
    a6ac:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    a6b0:	bfd8      	it	le
    a6b2:	fa04 f003 	lslle.w	r0, r4, r3
    a6b6:	f106 36ff 	add.w	r6, r6, #4294967295
    a6ba:	bfc4      	itt	gt
    a6bc:	fa24 f303 	lsrgt.w	r3, r4, r3
    a6c0:	ea47 0003 	orrgt.w	r0, r7, r3
    a6c4:	f7fd ffb2 	bl	862c <__aeabi_ui2d>
    a6c8:	2201      	movs	r2, #1
    a6ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    a6ce:	9213      	str	r2, [sp, #76]	; 0x4c
    a6d0:	e774      	b.n	a5bc <_dtoa_r+0x10c>
    a6d2:	2301      	movs	r3, #1
    a6d4:	e7b5      	b.n	a642 <_dtoa_r+0x192>
    a6d6:	9012      	str	r0, [sp, #72]	; 0x48
    a6d8:	e7b4      	b.n	a644 <_dtoa_r+0x194>
    a6da:	9b06      	ldr	r3, [sp, #24]
    a6dc:	1bdb      	subs	r3, r3, r7
    a6de:	9306      	str	r3, [sp, #24]
    a6e0:	427b      	negs	r3, r7
    a6e2:	930b      	str	r3, [sp, #44]	; 0x2c
    a6e4:	2300      	movs	r3, #0
    a6e6:	930f      	str	r3, [sp, #60]	; 0x3c
    a6e8:	e7c1      	b.n	a66e <_dtoa_r+0x1be>
    a6ea:	2300      	movs	r3, #0
    a6ec:	930e      	str	r3, [sp, #56]	; 0x38
    a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	dc57      	bgt.n	a7a4 <_dtoa_r+0x2f4>
    a6f4:	2301      	movs	r3, #1
    a6f6:	4699      	mov	r9, r3
    a6f8:	461a      	mov	r2, r3
    a6fa:	9309      	str	r3, [sp, #36]	; 0x24
    a6fc:	9221      	str	r2, [sp, #132]	; 0x84
    a6fe:	e00c      	b.n	a71a <_dtoa_r+0x26a>
    a700:	2301      	movs	r3, #1
    a702:	e7f3      	b.n	a6ec <_dtoa_r+0x23c>
    a704:	2300      	movs	r3, #0
    a706:	930e      	str	r3, [sp, #56]	; 0x38
    a708:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a70a:	18fb      	adds	r3, r7, r3
    a70c:	f103 0901 	add.w	r9, r3, #1
    a710:	9309      	str	r3, [sp, #36]	; 0x24
    a712:	464b      	mov	r3, r9
    a714:	2b01      	cmp	r3, #1
    a716:	bfb8      	it	lt
    a718:	2301      	movlt	r3, #1
    a71a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    a71e:	2100      	movs	r1, #0
    a720:	2204      	movs	r2, #4
    a722:	f102 0514 	add.w	r5, r2, #20
    a726:	429d      	cmp	r5, r3
    a728:	d940      	bls.n	a7ac <_dtoa_r+0x2fc>
    a72a:	6041      	str	r1, [r0, #4]
    a72c:	4658      	mov	r0, fp
    a72e:	f022 fd43 	bl	2d1b8 <_Balloc>
    a732:	9008      	str	r0, [sp, #32]
    a734:	2800      	cmp	r0, #0
    a736:	d13c      	bne.n	a7b2 <_dtoa_r+0x302>
    a738:	4b12      	ldr	r3, [pc, #72]	; (a784 <_dtoa_r+0x2d4>)
    a73a:	4602      	mov	r2, r0
    a73c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    a740:	e6ca      	b.n	a4d8 <_dtoa_r+0x28>
    a742:	2301      	movs	r3, #1
    a744:	e7df      	b.n	a706 <_dtoa_r+0x256>
    a746:	bf00      	nop
    a748:	636f4361 	.word	0x636f4361
    a74c:	3fd287a7 	.word	0x3fd287a7
    a750:	8b60c8b3 	.word	0x8b60c8b3
    a754:	3fc68a28 	.word	0x3fc68a28
    a758:	509f79fb 	.word	0x509f79fb
    a75c:	3fd34413 	.word	0x3fd34413
    a760:	000410d2 	.word	0x000410d2
    a764:	000410e9 	.word	0x000410e9
    a768:	7ff00000 	.word	0x7ff00000
    a76c:	000410ce 	.word	0x000410ce
    a770:	000410c5 	.word	0x000410c5
    a774:	0003c13e 	.word	0x0003c13e
    a778:	0003c13d 	.word	0x0003c13d
    a77c:	3ff80000 	.word	0x3ff80000
    a780:	000367d8 	.word	0x000367d8
    a784:	0004115d 	.word	0x0004115d
    a788:	2401      	movs	r4, #1
    a78a:	2300      	movs	r3, #0
    a78c:	940e      	str	r4, [sp, #56]	; 0x38
    a78e:	9320      	str	r3, [sp, #128]	; 0x80
    a790:	f04f 33ff 	mov.w	r3, #4294967295
    a794:	2200      	movs	r2, #0
    a796:	4699      	mov	r9, r3
    a798:	9309      	str	r3, [sp, #36]	; 0x24
    a79a:	2312      	movs	r3, #18
    a79c:	e7ae      	b.n	a6fc <_dtoa_r+0x24c>
    a79e:	2301      	movs	r3, #1
    a7a0:	930e      	str	r3, [sp, #56]	; 0x38
    a7a2:	e7f5      	b.n	a790 <_dtoa_r+0x2e0>
    a7a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a7a6:	4699      	mov	r9, r3
    a7a8:	9309      	str	r3, [sp, #36]	; 0x24
    a7aa:	e7b6      	b.n	a71a <_dtoa_r+0x26a>
    a7ac:	3101      	adds	r1, #1
    a7ae:	0052      	lsls	r2, r2, #1
    a7b0:	e7b7      	b.n	a722 <_dtoa_r+0x272>
    a7b2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a7b6:	f1b9 0f0e 	cmp.w	r9, #14
    a7ba:	9a08      	ldr	r2, [sp, #32]
    a7bc:	601a      	str	r2, [r3, #0]
    a7be:	d86f      	bhi.n	a8a0 <_dtoa_r+0x3f0>
    a7c0:	2c00      	cmp	r4, #0
    a7c2:	d06d      	beq.n	a8a0 <_dtoa_r+0x3f0>
    a7c4:	2f00      	cmp	r7, #0
    a7c6:	dd36      	ble.n	a836 <_dtoa_r+0x386>
    a7c8:	f007 020f 	and.w	r2, r7, #15
    a7cc:	4ba0      	ldr	r3, [pc, #640]	; (aa50 <_dtoa_r+0x5a0>)
    a7ce:	05f8      	lsls	r0, r7, #23
    a7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a7d4:	e9d3 3400 	ldrd	r3, r4, [r3]
    a7d8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    a7dc:	ea4f 1427 	mov.w	r4, r7, asr #4
    a7e0:	d517      	bpl.n	a812 <_dtoa_r+0x362>
    a7e2:	4b9c      	ldr	r3, [pc, #624]	; (aa54 <_dtoa_r+0x5a4>)
    a7e4:	f004 040f 	and.w	r4, r4, #15
    a7e8:	f04f 0803 	mov.w	r8, #3
    a7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    a7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a7f4:	f7fe f8be 	bl	8974 <__aeabi_ddiv>
    a7f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a7fc:	4d95      	ldr	r5, [pc, #596]	; (aa54 <_dtoa_r+0x5a4>)
    a7fe:	b95c      	cbnz	r4, a818 <_dtoa_r+0x368>
    a800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a808:	f7fe f8b4 	bl	8974 <__aeabi_ddiv>
    a80c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a810:	e02b      	b.n	a86a <_dtoa_r+0x3ba>
    a812:	f04f 0802 	mov.w	r8, #2
    a816:	e7f1      	b.n	a7fc <_dtoa_r+0x34c>
    a818:	07e1      	lsls	r1, r4, #31
    a81a:	d509      	bpl.n	a830 <_dtoa_r+0x380>
    a81c:	f108 0801 	add.w	r8, r8, #1
    a820:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a824:	e9d5 2300 	ldrd	r2, r3, [r5]
    a828:	f7fd ff7a 	bl	8720 <__aeabi_dmul>
    a82c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a830:	1064      	asrs	r4, r4, #1
    a832:	3508      	adds	r5, #8
    a834:	e7e3      	b.n	a7fe <_dtoa_r+0x34e>
    a836:	f000 8107 	beq.w	aa48 <_dtoa_r+0x598>
    a83a:	427c      	negs	r4, r7
    a83c:	4b84      	ldr	r3, [pc, #528]	; (aa50 <_dtoa_r+0x5a0>)
    a83e:	4d85      	ldr	r5, [pc, #532]	; (aa54 <_dtoa_r+0x5a4>)
    a840:	f04f 0802 	mov.w	r8, #2
    a844:	f004 020f 	and.w	r2, r4, #15
    a848:	1124      	asrs	r4, r4, #4
    a84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a852:	e9d3 2300 	ldrd	r2, r3, [r3]
    a856:	f7fd ff63 	bl	8720 <__aeabi_dmul>
    a85a:	2300      	movs	r3, #0
    a85c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a860:	2c00      	cmp	r4, #0
    a862:	f040 80e5 	bne.w	aa30 <_dtoa_r+0x580>
    a866:	2b00      	cmp	r3, #0
    a868:	d1d0      	bne.n	a80c <_dtoa_r+0x35c>
    a86a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a86c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a870:	2b00      	cmp	r3, #0
    a872:	f000 814c 	beq.w	ab0e <_dtoa_r+0x65e>
    a876:	2200      	movs	r2, #0
    a878:	4b77      	ldr	r3, [pc, #476]	; (aa58 <_dtoa_r+0x5a8>)
    a87a:	4620      	mov	r0, r4
    a87c:	4629      	mov	r1, r5
    a87e:	f7fe f9c1 	bl	8c04 <__aeabi_dcmplt>
    a882:	2800      	cmp	r0, #0
    a884:	f000 8143 	beq.w	ab0e <_dtoa_r+0x65e>
    a888:	f1b9 0f00 	cmp.w	r9, #0
    a88c:	f000 813f 	beq.w	ab0e <_dtoa_r+0x65e>
    a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a892:	2b00      	cmp	r3, #0
    a894:	f300 80e4 	bgt.w	aa60 <_dtoa_r+0x5b0>
    a898:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a89c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	db02      	blt.n	a8ac <_dtoa_r+0x3fc>
    a8a6:	2f0e      	cmp	r7, #14
    a8a8:	f340 8242 	ble.w	ad30 <_dtoa_r+0x880>
    a8ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a8ae:	2a00      	cmp	r2, #0
    a8b0:	f040 8267 	bne.w	ad82 <_dtoa_r+0x8d2>
    a8b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a8b6:	2500      	movs	r5, #0
    a8b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a8bc:	f1b8 0f00 	cmp.w	r8, #0
    a8c0:	d00d      	beq.n	a8de <_dtoa_r+0x42e>
    a8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	dd0a      	ble.n	a8de <_dtoa_r+0x42e>
    a8c8:	4543      	cmp	r3, r8
    a8ca:	9a06      	ldr	r2, [sp, #24]
    a8cc:	bfa8      	it	ge
    a8ce:	4643      	movge	r3, r8
    a8d0:	1ad2      	subs	r2, r2, r3
    a8d2:	eba8 0803 	sub.w	r8, r8, r3
    a8d6:	9206      	str	r2, [sp, #24]
    a8d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a8da:	1ad3      	subs	r3, r2, r3
    a8dc:	930a      	str	r3, [sp, #40]	; 0x28
    a8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8e0:	b30b      	cbz	r3, a926 <_dtoa_r+0x476>
    a8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	f000 82a6 	beq.w	ae36 <_dtoa_r+0x986>
    a8ea:	2c00      	cmp	r4, #0
    a8ec:	f000 82a1 	beq.w	ae32 <_dtoa_r+0x982>
    a8f0:	4629      	mov	r1, r5
    a8f2:	4622      	mov	r2, r4
    a8f4:	4658      	mov	r0, fp
    a8f6:	f022 fe13 	bl	2d520 <__pow5mult>
    a8fa:	9a03      	ldr	r2, [sp, #12]
    a8fc:	4601      	mov	r1, r0
    a8fe:	4605      	mov	r5, r0
    a900:	4658      	mov	r0, fp
    a902:	f022 fd63 	bl	2d3cc <__multiply>
    a906:	9903      	ldr	r1, [sp, #12]
    a908:	4606      	mov	r6, r0
    a90a:	4658      	mov	r0, fp
    a90c:	f022 fc94 	bl	2d238 <_Bfree>
    a910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a912:	1b1b      	subs	r3, r3, r4
    a914:	930b      	str	r3, [sp, #44]	; 0x2c
    a916:	f000 8291 	beq.w	ae3c <_dtoa_r+0x98c>
    a91a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a91c:	4631      	mov	r1, r6
    a91e:	4658      	mov	r0, fp
    a920:	f022 fdfe 	bl	2d520 <__pow5mult>
    a924:	9003      	str	r0, [sp, #12]
    a926:	2101      	movs	r1, #1
    a928:	4658      	mov	r0, fp
    a92a:	f022 fd39 	bl	2d3a0 <__i2b>
    a92e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a930:	4604      	mov	r4, r0
    a932:	2b00      	cmp	r3, #0
    a934:	f000 8284 	beq.w	ae40 <_dtoa_r+0x990>
    a938:	461a      	mov	r2, r3
    a93a:	4601      	mov	r1, r0
    a93c:	4658      	mov	r0, fp
    a93e:	f022 fdef 	bl	2d520 <__pow5mult>
    a942:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a944:	4604      	mov	r4, r0
    a946:	2b01      	cmp	r3, #1
    a948:	dc03      	bgt.n	a952 <_dtoa_r+0x4a2>
    a94a:	9b04      	ldr	r3, [sp, #16]
    a94c:	2b00      	cmp	r3, #0
    a94e:	f000 827c 	beq.w	ae4a <_dtoa_r+0x99a>
    a952:	2600      	movs	r6, #0
    a954:	6923      	ldr	r3, [r4, #16]
    a956:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a95a:	6918      	ldr	r0, [r3, #16]
    a95c:	f02b f856 	bl	35a0c <__hi0bits>
    a960:	f1c0 0020 	rsb	r0, r0, #32
    a964:	960f      	str	r6, [sp, #60]	; 0x3c
    a966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a968:	4418      	add	r0, r3
    a96a:	f010 001f 	ands.w	r0, r0, #31
    a96e:	f000 8291 	beq.w	ae94 <_dtoa_r+0x9e4>
    a972:	f1c0 0320 	rsb	r3, r0, #32
    a976:	2b04      	cmp	r3, #4
    a978:	f340 8281 	ble.w	ae7e <_dtoa_r+0x9ce>
    a97c:	f1c0 001c 	rsb	r0, r0, #28
    a980:	9b06      	ldr	r3, [sp, #24]
    a982:	4403      	add	r3, r0
    a984:	4480      	add	r8, r0
    a986:	9306      	str	r3, [sp, #24]
    a988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a98a:	4403      	add	r3, r0
    a98c:	930a      	str	r3, [sp, #40]	; 0x28
    a98e:	9b06      	ldr	r3, [sp, #24]
    a990:	2b00      	cmp	r3, #0
    a992:	dd05      	ble.n	a9a0 <_dtoa_r+0x4f0>
    a994:	461a      	mov	r2, r3
    a996:	9903      	ldr	r1, [sp, #12]
    a998:	4658      	mov	r0, fp
    a99a:	f022 fe1b 	bl	2d5d4 <__lshift>
    a99e:	9003      	str	r0, [sp, #12]
    a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	dd05      	ble.n	a9b2 <_dtoa_r+0x502>
    a9a6:	4621      	mov	r1, r4
    a9a8:	461a      	mov	r2, r3
    a9aa:	4658      	mov	r0, fp
    a9ac:	f022 fe12 	bl	2d5d4 <__lshift>
    a9b0:	4604      	mov	r4, r0
    a9b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	f000 8276 	beq.w	aea6 <_dtoa_r+0x9f6>
    a9ba:	4621      	mov	r1, r4
    a9bc:	9803      	ldr	r0, [sp, #12]
    a9be:	f02b f874 	bl	35aaa <__mcmp>
    a9c2:	2800      	cmp	r0, #0
    a9c4:	f280 826f 	bge.w	aea6 <_dtoa_r+0x9f6>
    a9c8:	2300      	movs	r3, #0
    a9ca:	220a      	movs	r2, #10
    a9cc:	9903      	ldr	r1, [sp, #12]
    a9ce:	4658      	mov	r0, fp
    a9d0:	f022 fc54 	bl	2d27c <__multadd>
    a9d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9d6:	1e7e      	subs	r6, r7, #1
    a9d8:	9003      	str	r0, [sp, #12]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	f000 825c 	beq.w	ae98 <_dtoa_r+0x9e8>
    a9e0:	2300      	movs	r3, #0
    a9e2:	4629      	mov	r1, r5
    a9e4:	220a      	movs	r2, #10
    a9e6:	4658      	mov	r0, fp
    a9e8:	f022 fc48 	bl	2d27c <__multadd>
    a9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9ee:	4605      	mov	r5, r0
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	dc03      	bgt.n	a9fc <_dtoa_r+0x54c>
    a9f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a9f6:	2b02      	cmp	r3, #2
    a9f8:	f300 825e 	bgt.w	aeb8 <_dtoa_r+0xa08>
    a9fc:	f1b8 0f00 	cmp.w	r8, #0
    aa00:	dd05      	ble.n	aa0e <_dtoa_r+0x55e>
    aa02:	4629      	mov	r1, r5
    aa04:	4642      	mov	r2, r8
    aa06:	4658      	mov	r0, fp
    aa08:	f022 fde4 	bl	2d5d4 <__lshift>
    aa0c:	4605      	mov	r5, r0
    aa0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aa10:	2b00      	cmp	r3, #0
    aa12:	f000 82d0 	beq.w	afb6 <_dtoa_r+0xb06>
    aa16:	6869      	ldr	r1, [r5, #4]
    aa18:	4658      	mov	r0, fp
    aa1a:	f022 fbcd 	bl	2d1b8 <_Balloc>
    aa1e:	4607      	mov	r7, r0
    aa20:	2800      	cmp	r0, #0
    aa22:	f040 827f 	bne.w	af24 <_dtoa_r+0xa74>
    aa26:	4b0d      	ldr	r3, [pc, #52]	; (aa5c <_dtoa_r+0x5ac>)
    aa28:	4602      	mov	r2, r0
    aa2a:	f240 21ea 	movw	r1, #746	; 0x2ea
    aa2e:	e553      	b.n	a4d8 <_dtoa_r+0x28>
    aa30:	07e2      	lsls	r2, r4, #31
    aa32:	d506      	bpl.n	aa42 <_dtoa_r+0x592>
    aa34:	f108 0801 	add.w	r8, r8, #1
    aa38:	e9d5 2300 	ldrd	r2, r3, [r5]
    aa3c:	f7fd fe70 	bl	8720 <__aeabi_dmul>
    aa40:	2301      	movs	r3, #1
    aa42:	1064      	asrs	r4, r4, #1
    aa44:	3508      	adds	r5, #8
    aa46:	e70b      	b.n	a860 <_dtoa_r+0x3b0>
    aa48:	f04f 0802 	mov.w	r8, #2
    aa4c:	e70d      	b.n	a86a <_dtoa_r+0x3ba>
    aa4e:	bf00      	nop
    aa50:	000367d8 	.word	0x000367d8
    aa54:	000367b0 	.word	0x000367b0
    aa58:	3ff00000 	.word	0x3ff00000
    aa5c:	0004115d 	.word	0x0004115d
    aa60:	4620      	mov	r0, r4
    aa62:	2200      	movs	r2, #0
    aa64:	4bac      	ldr	r3, [pc, #688]	; (ad18 <_dtoa_r+0x868>)
    aa66:	4629      	mov	r1, r5
    aa68:	f7fd fe5a 	bl	8720 <__aeabi_dmul>
    aa6c:	1e7e      	subs	r6, r7, #1
    aa6e:	f108 0801 	add.w	r8, r8, #1
    aa72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aa74:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aa78:	4640      	mov	r0, r8
    aa7a:	f7fd fde7 	bl	864c <__aeabi_i2d>
    aa7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aa82:	f7fd fe4d 	bl	8720 <__aeabi_dmul>
    aa86:	4ba5      	ldr	r3, [pc, #660]	; (ad1c <_dtoa_r+0x86c>)
    aa88:	2200      	movs	r2, #0
    aa8a:	f7fd fc93 	bl	83b4 <__adddf3>
    aa8e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    aa92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aa96:	9311      	str	r3, [sp, #68]	; 0x44
    aa98:	2c00      	cmp	r4, #0
    aa9a:	d13b      	bne.n	ab14 <_dtoa_r+0x664>
    aa9c:	2200      	movs	r2, #0
    aa9e:	4ba0      	ldr	r3, [pc, #640]	; (ad20 <_dtoa_r+0x870>)
    aaa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aaa4:	f7fd fc84 	bl	83b0 <__aeabi_dsub>
    aaa8:	4602      	mov	r2, r0
    aaaa:	460b      	mov	r3, r1
    aaac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    aab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    aab4:	f7fe f8c4 	bl	8c40 <__aeabi_dcmpgt>
    aab8:	2800      	cmp	r0, #0
    aaba:	f040 8157 	bne.w	ad6c <_dtoa_r+0x8bc>
    aabe:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    aac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    aac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aaca:	f7fe f89b 	bl	8c04 <__aeabi_dcmplt>
    aace:	2800      	cmp	r0, #0
    aad0:	f43f aee2 	beq.w	a898 <_dtoa_r+0x3e8>
    aad4:	2400      	movs	r4, #0
    aad6:	4625      	mov	r5, r4
    aad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    aada:	f8dd a020 	ldr.w	sl, [sp, #32]
    aade:	43de      	mvns	r6, r3
    aae0:	f04f 0800 	mov.w	r8, #0
    aae4:	4621      	mov	r1, r4
    aae6:	4658      	mov	r0, fp
    aae8:	f022 fba6 	bl	2d238 <_Bfree>
    aaec:	2d00      	cmp	r5, #0
    aaee:	f000 80a9 	beq.w	ac44 <_dtoa_r+0x794>
    aaf2:	f1b8 0f00 	cmp.w	r8, #0
    aaf6:	d005      	beq.n	ab04 <_dtoa_r+0x654>
    aaf8:	45a8      	cmp	r8, r5
    aafa:	d003      	beq.n	ab04 <_dtoa_r+0x654>
    aafc:	4641      	mov	r1, r8
    aafe:	4658      	mov	r0, fp
    ab00:	f022 fb9a 	bl	2d238 <_Bfree>
    ab04:	4629      	mov	r1, r5
    ab06:	4658      	mov	r0, fp
    ab08:	f022 fb96 	bl	2d238 <_Bfree>
    ab0c:	e09a      	b.n	ac44 <_dtoa_r+0x794>
    ab0e:	463e      	mov	r6, r7
    ab10:	464c      	mov	r4, r9
    ab12:	e7b1      	b.n	aa78 <_dtoa_r+0x5c8>
    ab14:	4b83      	ldr	r3, [pc, #524]	; (ad24 <_dtoa_r+0x874>)
    ab16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ab1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    ab1e:	9b08      	ldr	r3, [sp, #32]
    ab20:	441c      	add	r4, r3
    ab22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab24:	2b00      	cmp	r3, #0
    ab26:	d04a      	beq.n	abbe <_dtoa_r+0x70e>
    ab28:	4602      	mov	r2, r0
    ab2a:	460b      	mov	r3, r1
    ab2c:	2000      	movs	r0, #0
    ab2e:	497e      	ldr	r1, [pc, #504]	; (ad28 <_dtoa_r+0x878>)
    ab30:	f7fd ff20 	bl	8974 <__aeabi_ddiv>
    ab34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ab38:	f7fd fc3a 	bl	83b0 <__aeabi_dsub>
    ab3c:	f8dd a020 	ldr.w	sl, [sp, #32]
    ab40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ab44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ab48:	f7fe f89a 	bl	8c80 <__aeabi_d2iz>
    ab4c:	4605      	mov	r5, r0
    ab4e:	f7fd fd7d 	bl	864c <__aeabi_i2d>
    ab52:	4602      	mov	r2, r0
    ab54:	3530      	adds	r5, #48	; 0x30
    ab56:	460b      	mov	r3, r1
    ab58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ab5c:	f7fd fc28 	bl	83b0 <__aeabi_dsub>
    ab60:	f80a 5b01 	strb.w	r5, [sl], #1
    ab64:	4602      	mov	r2, r0
    ab66:	460b      	mov	r3, r1
    ab68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ab6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ab70:	f7fe f866 	bl	8c40 <__aeabi_dcmpgt>
    ab74:	2800      	cmp	r0, #0
    ab76:	d165      	bne.n	ac44 <_dtoa_r+0x794>
    ab78:	2000      	movs	r0, #0
    ab7a:	496c      	ldr	r1, [pc, #432]	; (ad2c <_dtoa_r+0x87c>)
    ab7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ab80:	f7fd fc16 	bl	83b0 <__aeabi_dsub>
    ab84:	4602      	mov	r2, r0
    ab86:	460b      	mov	r3, r1
    ab88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ab8c:	f7fe f858 	bl	8c40 <__aeabi_dcmpgt>
    ab90:	2800      	cmp	r0, #0
    ab92:	f040 810d 	bne.w	adb0 <_dtoa_r+0x900>
    ab96:	45a2      	cmp	sl, r4
    ab98:	f000 80ea 	beq.w	ad70 <_dtoa_r+0x8c0>
    ab9c:	2200      	movs	r2, #0
    ab9e:	4b5e      	ldr	r3, [pc, #376]	; (ad18 <_dtoa_r+0x868>)
    aba0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    aba4:	f7fd fdbc 	bl	8720 <__aeabi_dmul>
    aba8:	2200      	movs	r2, #0
    abaa:	4b5b      	ldr	r3, [pc, #364]	; (ad18 <_dtoa_r+0x868>)
    abac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    abb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    abb4:	f7fd fdb4 	bl	8720 <__aeabi_dmul>
    abb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    abbc:	e7c2      	b.n	ab44 <_dtoa_r+0x694>
    abbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    abc2:	f7fd fdad 	bl	8720 <__aeabi_dmul>
    abc6:	46a0      	mov	r8, r4
    abc8:	f8dd a020 	ldr.w	sl, [sp, #32]
    abcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    abd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    abd4:	f7fe f854 	bl	8c80 <__aeabi_d2iz>
    abd8:	4605      	mov	r5, r0
    abda:	f7fd fd37 	bl	864c <__aeabi_i2d>
    abde:	4602      	mov	r2, r0
    abe0:	3530      	adds	r5, #48	; 0x30
    abe2:	460b      	mov	r3, r1
    abe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    abe8:	f7fd fbe2 	bl	83b0 <__aeabi_dsub>
    abec:	f80a 5b01 	strb.w	r5, [sl], #1
    abf0:	4602      	mov	r2, r0
    abf2:	460b      	mov	r3, r1
    abf4:	45a2      	cmp	sl, r4
    abf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    abfa:	f04f 0200 	mov.w	r2, #0
    abfe:	d123      	bne.n	ac48 <_dtoa_r+0x798>
    ac00:	4b49      	ldr	r3, [pc, #292]	; (ad28 <_dtoa_r+0x878>)
    ac02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ac06:	f7fd fbd5 	bl	83b4 <__adddf3>
    ac0a:	4602      	mov	r2, r0
    ac0c:	460b      	mov	r3, r1
    ac0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ac12:	f7fe f815 	bl	8c40 <__aeabi_dcmpgt>
    ac16:	2800      	cmp	r0, #0
    ac18:	f040 80ca 	bne.w	adb0 <_dtoa_r+0x900>
    ac1c:	2000      	movs	r0, #0
    ac1e:	4942      	ldr	r1, [pc, #264]	; (ad28 <_dtoa_r+0x878>)
    ac20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ac24:	f7fd fbc4 	bl	83b0 <__aeabi_dsub>
    ac28:	4602      	mov	r2, r0
    ac2a:	460b      	mov	r3, r1
    ac2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ac30:	f7fd ffe8 	bl	8c04 <__aeabi_dcmplt>
    ac34:	b170      	cbz	r0, ac54 <_dtoa_r+0x7a4>
    ac36:	46c2      	mov	sl, r8
    ac38:	f108 38ff 	add.w	r8, r8, #4294967295
    ac3c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    ac40:	2b30      	cmp	r3, #48	; 0x30
    ac42:	d0f8      	beq.n	ac36 <_dtoa_r+0x786>
    ac44:	4637      	mov	r7, r6
    ac46:	e055      	b.n	acf4 <_dtoa_r+0x844>
    ac48:	4b33      	ldr	r3, [pc, #204]	; (ad18 <_dtoa_r+0x868>)
    ac4a:	f7fd fd69 	bl	8720 <__aeabi_dmul>
    ac4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac52:	e7bd      	b.n	abd0 <_dtoa_r+0x720>
    ac54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ac58:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ac5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac5e:	2b00      	cmp	r3, #0
    ac60:	f6ff ae28 	blt.w	a8b4 <_dtoa_r+0x404>
    ac64:	2f0e      	cmp	r7, #14
    ac66:	f73f ae25 	bgt.w	a8b4 <_dtoa_r+0x404>
    ac6a:	4b2e      	ldr	r3, [pc, #184]	; (ad24 <_dtoa_r+0x874>)
    ac6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ac70:	e9d3 3400 	ldrd	r3, r4, [r3]
    ac74:	e9cd 3406 	strd	r3, r4, [sp, #24]
    ac78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	da02      	bge.n	ac84 <_dtoa_r+0x7d4>
    ac7e:	f1b9 0f00 	cmp.w	r9, #0
    ac82:	d064      	beq.n	ad4e <_dtoa_r+0x89e>
    ac84:	f8dd a020 	ldr.w	sl, [sp, #32]
    ac88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ac8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ac90:	4620      	mov	r0, r4
    ac92:	4629      	mov	r1, r5
    ac94:	f7fd fe6e 	bl	8974 <__aeabi_ddiv>
    ac98:	f7fd fff2 	bl	8c80 <__aeabi_d2iz>
    ac9c:	4606      	mov	r6, r0
    ac9e:	f7fd fcd5 	bl	864c <__aeabi_i2d>
    aca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    aca6:	f7fd fd3b 	bl	8720 <__aeabi_dmul>
    acaa:	4602      	mov	r2, r0
    acac:	4620      	mov	r0, r4
    acae:	f106 0430 	add.w	r4, r6, #48	; 0x30
    acb2:	460b      	mov	r3, r1
    acb4:	4629      	mov	r1, r5
    acb6:	f7fd fb7b 	bl	83b0 <__aeabi_dsub>
    acba:	f80a 4b01 	strb.w	r4, [sl], #1
    acbe:	9c08      	ldr	r4, [sp, #32]
    acc0:	4602      	mov	r2, r0
    acc2:	460b      	mov	r3, r1
    acc4:	ebaa 0404 	sub.w	r4, sl, r4
    acc8:	45a1      	cmp	r9, r4
    acca:	f040 8082 	bne.w	add2 <_dtoa_r+0x922>
    acce:	f7fd fb71 	bl	83b4 <__adddf3>
    acd2:	4604      	mov	r4, r0
    acd4:	460d      	mov	r5, r1
    acd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    acda:	f7fd ffb1 	bl	8c40 <__aeabi_dcmpgt>
    acde:	2800      	cmp	r0, #0
    ace0:	d165      	bne.n	adae <_dtoa_r+0x8fe>
    ace2:	4620      	mov	r0, r4
    ace4:	4629      	mov	r1, r5
    ace6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    acea:	f7fd ff81 	bl	8bf0 <__aeabi_dcmpeq>
    acee:	b108      	cbz	r0, acf4 <_dtoa_r+0x844>
    acf0:	07f3      	lsls	r3, r6, #31
    acf2:	d45c      	bmi.n	adae <_dtoa_r+0x8fe>
    acf4:	9903      	ldr	r1, [sp, #12]
    acf6:	4658      	mov	r0, fp
    acf8:	f022 fa9e 	bl	2d238 <_Bfree>
    acfc:	2300      	movs	r3, #0
    acfe:	3701      	adds	r7, #1
    ad00:	f88a 3000 	strb.w	r3, [sl]
    ad04:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad06:	601f      	str	r7, [r3, #0]
    ad08:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	f43f ac1c 	beq.w	a548 <_dtoa_r+0x98>
    ad10:	f8c3 a000 	str.w	sl, [r3]
    ad14:	e418      	b.n	a548 <_dtoa_r+0x98>
    ad16:	bf00      	nop
    ad18:	40240000 	.word	0x40240000
    ad1c:	401c0000 	.word	0x401c0000
    ad20:	40140000 	.word	0x40140000
    ad24:	000367d8 	.word	0x000367d8
    ad28:	3fe00000 	.word	0x3fe00000
    ad2c:	3ff00000 	.word	0x3ff00000
    ad30:	4ba2      	ldr	r3, [pc, #648]	; (afbc <_dtoa_r+0xb0c>)
    ad32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ad36:	e9d3 3400 	ldrd	r3, r4, [r3]
    ad3a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ad40:	2b00      	cmp	r3, #0
    ad42:	da9f      	bge.n	ac84 <_dtoa_r+0x7d4>
    ad44:	f1b9 0f00 	cmp.w	r9, #0
    ad48:	dc9c      	bgt.n	ac84 <_dtoa_r+0x7d4>
    ad4a:	f47f aec3 	bne.w	aad4 <_dtoa_r+0x624>
    ad4e:	2200      	movs	r2, #0
    ad50:	4b9b      	ldr	r3, [pc, #620]	; (afc0 <_dtoa_r+0xb10>)
    ad52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    ad56:	f7fd fce3 	bl	8720 <__aeabi_dmul>
    ad5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ad5e:	f7fd ff65 	bl	8c2c <__aeabi_dcmpge>
    ad62:	4604      	mov	r4, r0
    ad64:	2800      	cmp	r0, #0
    ad66:	f47f aeb5 	bne.w	aad4 <_dtoa_r+0x624>
    ad6a:	463e      	mov	r6, r7
    ad6c:	4625      	mov	r5, r4
    ad6e:	e0b4      	b.n	aeda <_dtoa_r+0xa2a>
    ad70:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ad74:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ad78:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	db01      	blt.n	ad82 <_dtoa_r+0x8d2>
    ad7e:	2f0e      	cmp	r7, #14
    ad80:	ddd6      	ble.n	ad30 <_dtoa_r+0x880>
    ad82:	9a20      	ldr	r2, [sp, #128]	; 0x80
    ad84:	2a01      	cmp	r2, #1
    ad86:	dc36      	bgt.n	adf6 <_dtoa_r+0x946>
    ad88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ad8a:	b382      	cbz	r2, adee <_dtoa_r+0x93e>
    ad8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    ad90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ad92:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ad96:	9a06      	ldr	r2, [sp, #24]
    ad98:	2101      	movs	r1, #1
    ad9a:	4658      	mov	r0, fp
    ad9c:	441a      	add	r2, r3
    ad9e:	9206      	str	r2, [sp, #24]
    ada0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ada2:	441a      	add	r2, r3
    ada4:	920a      	str	r2, [sp, #40]	; 0x28
    ada6:	f022 fafb 	bl	2d3a0 <__i2b>
    adaa:	4605      	mov	r5, r0
    adac:	e586      	b.n	a8bc <_dtoa_r+0x40c>
    adae:	463e      	mov	r6, r7
    adb0:	4653      	mov	r3, sl
    adb2:	469a      	mov	sl, r3
    adb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    adb8:	2a39      	cmp	r2, #57	; 0x39
    adba:	d106      	bne.n	adca <_dtoa_r+0x91a>
    adbc:	9a08      	ldr	r2, [sp, #32]
    adbe:	429a      	cmp	r2, r3
    adc0:	d1f7      	bne.n	adb2 <_dtoa_r+0x902>
    adc2:	2230      	movs	r2, #48	; 0x30
    adc4:	9908      	ldr	r1, [sp, #32]
    adc6:	3601      	adds	r6, #1
    adc8:	700a      	strb	r2, [r1, #0]
    adca:	781a      	ldrb	r2, [r3, #0]
    adcc:	3201      	adds	r2, #1
    adce:	701a      	strb	r2, [r3, #0]
    add0:	e738      	b.n	ac44 <_dtoa_r+0x794>
    add2:	2200      	movs	r2, #0
    add4:	4b7b      	ldr	r3, [pc, #492]	; (afc4 <_dtoa_r+0xb14>)
    add6:	f7fd fca3 	bl	8720 <__aeabi_dmul>
    adda:	2200      	movs	r2, #0
    addc:	2300      	movs	r3, #0
    adde:	4604      	mov	r4, r0
    ade0:	460d      	mov	r5, r1
    ade2:	f7fd ff05 	bl	8bf0 <__aeabi_dcmpeq>
    ade6:	2800      	cmp	r0, #0
    ade8:	f43f af50 	beq.w	ac8c <_dtoa_r+0x7dc>
    adec:	e782      	b.n	acf4 <_dtoa_r+0x844>
    adee:	9b14      	ldr	r3, [sp, #80]	; 0x50
    adf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    adf4:	e7cc      	b.n	ad90 <_dtoa_r+0x8e0>
    adf6:	f109 34ff 	add.w	r4, r9, #4294967295
    adfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adfc:	42a3      	cmp	r3, r4
    adfe:	db08      	blt.n	ae12 <_dtoa_r+0x962>
    ae00:	f1b9 0f00 	cmp.w	r9, #0
    ae04:	eba3 0404 	sub.w	r4, r3, r4
    ae08:	db0e      	blt.n	ae28 <_dtoa_r+0x978>
    ae0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ae0e:	464b      	mov	r3, r9
    ae10:	e7c1      	b.n	ad96 <_dtoa_r+0x8e6>
    ae12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ae16:	1ae3      	subs	r3, r4, r3
    ae18:	940b      	str	r4, [sp, #44]	; 0x2c
    ae1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ae1e:	2400      	movs	r4, #0
    ae20:	441a      	add	r2, r3
    ae22:	464b      	mov	r3, r9
    ae24:	920f      	str	r2, [sp, #60]	; 0x3c
    ae26:	e7b6      	b.n	ad96 <_dtoa_r+0x8e6>
    ae28:	9b06      	ldr	r3, [sp, #24]
    ae2a:	eba3 0809 	sub.w	r8, r3, r9
    ae2e:	2300      	movs	r3, #0
    ae30:	e7b1      	b.n	ad96 <_dtoa_r+0x8e6>
    ae32:	9e03      	ldr	r6, [sp, #12]
    ae34:	e571      	b.n	a91a <_dtoa_r+0x46a>
    ae36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae38:	9903      	ldr	r1, [sp, #12]
    ae3a:	e570      	b.n	a91e <_dtoa_r+0x46e>
    ae3c:	9603      	str	r6, [sp, #12]
    ae3e:	e572      	b.n	a926 <_dtoa_r+0x476>
    ae40:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ae42:	2b01      	cmp	r3, #1
    ae44:	dc17      	bgt.n	ae76 <_dtoa_r+0x9c6>
    ae46:	9b04      	ldr	r3, [sp, #16]
    ae48:	b9ab      	cbnz	r3, ae76 <_dtoa_r+0x9c6>
    ae4a:	9b05      	ldr	r3, [sp, #20]
    ae4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ae50:	b99b      	cbnz	r3, ae7a <_dtoa_r+0x9ca>
    ae52:	9b05      	ldr	r3, [sp, #20]
    ae54:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    ae58:	0d36      	lsrs	r6, r6, #20
    ae5a:	0536      	lsls	r6, r6, #20
    ae5c:	b136      	cbz	r6, ae6c <_dtoa_r+0x9bc>
    ae5e:	9b06      	ldr	r3, [sp, #24]
    ae60:	2601      	movs	r6, #1
    ae62:	3301      	adds	r3, #1
    ae64:	9306      	str	r3, [sp, #24]
    ae66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae68:	3301      	adds	r3, #1
    ae6a:	930a      	str	r3, [sp, #40]	; 0x28
    ae6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae6e:	2b00      	cmp	r3, #0
    ae70:	f47f ad70 	bne.w	a954 <_dtoa_r+0x4a4>
    ae74:	960f      	str	r6, [sp, #60]	; 0x3c
    ae76:	2001      	movs	r0, #1
    ae78:	e575      	b.n	a966 <_dtoa_r+0x4b6>
    ae7a:	2600      	movs	r6, #0
    ae7c:	e7f6      	b.n	ae6c <_dtoa_r+0x9bc>
    ae7e:	f43f ad86 	beq.w	a98e <_dtoa_r+0x4de>
    ae82:	331c      	adds	r3, #28
    ae84:	9a06      	ldr	r2, [sp, #24]
    ae86:	441a      	add	r2, r3
    ae88:	4498      	add	r8, r3
    ae8a:	9206      	str	r2, [sp, #24]
    ae8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae8e:	441a      	add	r2, r3
    ae90:	920a      	str	r2, [sp, #40]	; 0x28
    ae92:	e57c      	b.n	a98e <_dtoa_r+0x4de>
    ae94:	4603      	mov	r3, r0
    ae96:	e7f4      	b.n	ae82 <_dtoa_r+0x9d2>
    ae98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae9a:	2b00      	cmp	r3, #0
    ae9c:	dc2b      	bgt.n	aef6 <_dtoa_r+0xa46>
    ae9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aea0:	2b02      	cmp	r3, #2
    aea2:	dc09      	bgt.n	aeb8 <_dtoa_r+0xa08>
    aea4:	e027      	b.n	aef6 <_dtoa_r+0xa46>
    aea6:	f1b9 0f00 	cmp.w	r9, #0
    aeaa:	dc1d      	bgt.n	aee8 <_dtoa_r+0xa38>
    aeac:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aeae:	2b02      	cmp	r3, #2
    aeb0:	dd1a      	ble.n	aee8 <_dtoa_r+0xa38>
    aeb2:	463e      	mov	r6, r7
    aeb4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aeba:	2b00      	cmp	r3, #0
    aebc:	f47f ae0c 	bne.w	aad8 <_dtoa_r+0x628>
    aec0:	4621      	mov	r1, r4
    aec2:	2205      	movs	r2, #5
    aec4:	4658      	mov	r0, fp
    aec6:	f022 f9d9 	bl	2d27c <__multadd>
    aeca:	4601      	mov	r1, r0
    aecc:	4604      	mov	r4, r0
    aece:	9803      	ldr	r0, [sp, #12]
    aed0:	f02a fdeb 	bl	35aaa <__mcmp>
    aed4:	2800      	cmp	r0, #0
    aed6:	f77f adff 	ble.w	aad8 <_dtoa_r+0x628>
    aeda:	f8dd a020 	ldr.w	sl, [sp, #32]
    aede:	2331      	movs	r3, #49	; 0x31
    aee0:	3601      	adds	r6, #1
    aee2:	f80a 3b01 	strb.w	r3, [sl], #1
    aee6:	e5fb      	b.n	aae0 <_dtoa_r+0x630>
    aee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aeea:	463e      	mov	r6, r7
    aeec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    aef0:	2b00      	cmp	r3, #0
    aef2:	f47f ad83 	bne.w	a9fc <_dtoa_r+0x54c>
    aef6:	9f08      	ldr	r7, [sp, #32]
    aef8:	4621      	mov	r1, r4
    aefa:	9803      	ldr	r0, [sp, #12]
    aefc:	f02a fae7 	bl	354ce <quorem>
    af00:	9b08      	ldr	r3, [sp, #32]
    af02:	f100 0930 	add.w	r9, r0, #48	; 0x30
    af06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af08:	f807 9b01 	strb.w	r9, [r7], #1
    af0c:	1afb      	subs	r3, r7, r3
    af0e:	429a      	cmp	r2, r3
    af10:	f340 80cb 	ble.w	b0aa <_dtoa_r+0xbfa>
    af14:	2300      	movs	r3, #0
    af16:	220a      	movs	r2, #10
    af18:	9903      	ldr	r1, [sp, #12]
    af1a:	4658      	mov	r0, fp
    af1c:	f022 f9ae 	bl	2d27c <__multadd>
    af20:	9003      	str	r0, [sp, #12]
    af22:	e7e9      	b.n	aef8 <_dtoa_r+0xa48>
    af24:	692a      	ldr	r2, [r5, #16]
    af26:	f105 010c 	add.w	r1, r5, #12
    af2a:	300c      	adds	r0, #12
    af2c:	3202      	adds	r2, #2
    af2e:	0092      	lsls	r2, r2, #2
    af30:	f02a f85c 	bl	34fec <memcpy>
    af34:	2201      	movs	r2, #1
    af36:	4639      	mov	r1, r7
    af38:	4658      	mov	r0, fp
    af3a:	f022 fb4b 	bl	2d5d4 <__lshift>
    af3e:	9b08      	ldr	r3, [sp, #32]
    af40:	46a8      	mov	r8, r5
    af42:	4605      	mov	r5, r0
    af44:	f103 0a01 	add.w	sl, r3, #1
    af48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    af4c:	4413      	add	r3, r2
    af4e:	930a      	str	r3, [sp, #40]	; 0x28
    af50:	9b04      	ldr	r3, [sp, #16]
    af52:	f003 0301 	and.w	r3, r3, #1
    af56:	930b      	str	r3, [sp, #44]	; 0x2c
    af58:	f10a 33ff 	add.w	r3, sl, #4294967295
    af5c:	4621      	mov	r1, r4
    af5e:	9803      	ldr	r0, [sp, #12]
    af60:	9306      	str	r3, [sp, #24]
    af62:	f02a fab4 	bl	354ce <quorem>
    af66:	4641      	mov	r1, r8
    af68:	9009      	str	r0, [sp, #36]	; 0x24
    af6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    af6e:	9803      	ldr	r0, [sp, #12]
    af70:	f02a fd9b 	bl	35aaa <__mcmp>
    af74:	462a      	mov	r2, r5
    af76:	4621      	mov	r1, r4
    af78:	4607      	mov	r7, r0
    af7a:	4658      	mov	r0, fp
    af7c:	f022 fb96 	bl	2d6ac <__mdiff>
    af80:	68c2      	ldr	r2, [r0, #12]
    af82:	4601      	mov	r1, r0
    af84:	b302      	cbz	r2, afc8 <_dtoa_r+0xb18>
    af86:	4658      	mov	r0, fp
    af88:	f022 f956 	bl	2d238 <_Bfree>
    af8c:	2f00      	cmp	r7, #0
    af8e:	da3a      	bge.n	b006 <_dtoa_r+0xb56>
    af90:	2201      	movs	r2, #1
    af92:	9903      	ldr	r1, [sp, #12]
    af94:	4658      	mov	r0, fp
    af96:	f022 fb1d 	bl	2d5d4 <__lshift>
    af9a:	4621      	mov	r1, r4
    af9c:	9003      	str	r0, [sp, #12]
    af9e:	f02a fd84 	bl	35aaa <__mcmp>
    afa2:	2800      	cmp	r0, #0
    afa4:	dc03      	bgt.n	afae <_dtoa_r+0xafe>
    afa6:	d129      	bne.n	affc <_dtoa_r+0xb4c>
    afa8:	f019 0f01 	tst.w	r9, #1
    afac:	d026      	beq.n	affc <_dtoa_r+0xb4c>
    afae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    afb2:	d11d      	bne.n	aff0 <_dtoa_r+0xb40>
    afb4:	e032      	b.n	b01c <_dtoa_r+0xb6c>
    afb6:	4628      	mov	r0, r5
    afb8:	e7c1      	b.n	af3e <_dtoa_r+0xa8e>
    afba:	bf00      	nop
    afbc:	000367d8 	.word	0x000367d8
    afc0:	40140000 	.word	0x40140000
    afc4:	40240000 	.word	0x40240000
    afc8:	900e      	str	r0, [sp, #56]	; 0x38
    afca:	9803      	ldr	r0, [sp, #12]
    afcc:	f02a fd6d 	bl	35aaa <__mcmp>
    afd0:	990e      	ldr	r1, [sp, #56]	; 0x38
    afd2:	900c      	str	r0, [sp, #48]	; 0x30
    afd4:	4658      	mov	r0, fp
    afd6:	f022 f92f 	bl	2d238 <_Bfree>
    afda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    afdc:	bb5a      	cbnz	r2, b036 <_dtoa_r+0xb86>
    afde:	9b20      	ldr	r3, [sp, #128]	; 0x80
    afe0:	b953      	cbnz	r3, aff8 <_dtoa_r+0xb48>
    afe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    afe4:	b943      	cbnz	r3, aff8 <_dtoa_r+0xb48>
    afe6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    afea:	d017      	beq.n	b01c <_dtoa_r+0xb6c>
    afec:	2f00      	cmp	r7, #0
    afee:	dd05      	ble.n	affc <_dtoa_r+0xb4c>
    aff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aff2:	f103 0931 	add.w	r9, r3, #49	; 0x31
    aff6:	e001      	b.n	affc <_dtoa_r+0xb4c>
    aff8:	2f00      	cmp	r7, #0
    affa:	da2a      	bge.n	b052 <_dtoa_r+0xba2>
    affc:	f8dd a018 	ldr.w	sl, [sp, #24]
    b000:	f80a 9b01 	strb.w	r9, [sl], #1
    b004:	e56e      	b.n	aae4 <_dtoa_r+0x634>
    b006:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b008:	433b      	orrs	r3, r7
    b00a:	d104      	bne.n	b016 <_dtoa_r+0xb66>
    b00c:	9b04      	ldr	r3, [sp, #16]
    b00e:	f003 0301 	and.w	r3, r3, #1
    b012:	2b00      	cmp	r3, #0
    b014:	d0bc      	beq.n	af90 <_dtoa_r+0xae0>
    b016:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b01a:	d136      	bne.n	b08a <_dtoa_r+0xbda>
    b01c:	9f06      	ldr	r7, [sp, #24]
    b01e:	2339      	movs	r3, #57	; 0x39
    b020:	f807 3b01 	strb.w	r3, [r7], #1
    b024:	46ba      	mov	sl, r7
    b026:	3f01      	subs	r7, #1
    b028:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b02c:	2b39      	cmp	r3, #57	; 0x39
    b02e:	d05a      	beq.n	b0e6 <_dtoa_r+0xc36>
    b030:	3301      	adds	r3, #1
    b032:	703b      	strb	r3, [r7, #0]
    b034:	e556      	b.n	aae4 <_dtoa_r+0x634>
    b036:	2f00      	cmp	r7, #0
    b038:	db06      	blt.n	b048 <_dtoa_r+0xb98>
    b03a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b03c:	433b      	orrs	r3, r7
    b03e:	d106      	bne.n	b04e <_dtoa_r+0xb9e>
    b040:	9b04      	ldr	r3, [sp, #16]
    b042:	f003 0301 	and.w	r3, r3, #1
    b046:	b913      	cbnz	r3, b04e <_dtoa_r+0xb9e>
    b048:	2a00      	cmp	r2, #0
    b04a:	dca1      	bgt.n	af90 <_dtoa_r+0xae0>
    b04c:	e7d6      	b.n	affc <_dtoa_r+0xb4c>
    b04e:	2a00      	cmp	r2, #0
    b050:	dce1      	bgt.n	b016 <_dtoa_r+0xb66>
    b052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b054:	4657      	mov	r7, sl
    b056:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b05a:	4553      	cmp	r3, sl
    b05c:	d02e      	beq.n	b0bc <_dtoa_r+0xc0c>
    b05e:	2300      	movs	r3, #0
    b060:	220a      	movs	r2, #10
    b062:	9903      	ldr	r1, [sp, #12]
    b064:	4658      	mov	r0, fp
    b066:	f022 f909 	bl	2d27c <__multadd>
    b06a:	45a8      	cmp	r8, r5
    b06c:	9003      	str	r0, [sp, #12]
    b06e:	f04f 0300 	mov.w	r3, #0
    b072:	f04f 020a 	mov.w	r2, #10
    b076:	4641      	mov	r1, r8
    b078:	4658      	mov	r0, fp
    b07a:	d10b      	bne.n	b094 <_dtoa_r+0xbe4>
    b07c:	f022 f8fe 	bl	2d27c <__multadd>
    b080:	4680      	mov	r8, r0
    b082:	4605      	mov	r5, r0
    b084:	f10a 0a01 	add.w	sl, sl, #1
    b088:	e766      	b.n	af58 <_dtoa_r+0xaa8>
    b08a:	f8dd a018 	ldr.w	sl, [sp, #24]
    b08e:	f109 0901 	add.w	r9, r9, #1
    b092:	e7b5      	b.n	b000 <_dtoa_r+0xb50>
    b094:	f022 f8f2 	bl	2d27c <__multadd>
    b098:	4629      	mov	r1, r5
    b09a:	4680      	mov	r8, r0
    b09c:	2300      	movs	r3, #0
    b09e:	220a      	movs	r2, #10
    b0a0:	4658      	mov	r0, fp
    b0a2:	f022 f8eb 	bl	2d27c <__multadd>
    b0a6:	4605      	mov	r5, r0
    b0a8:	e7ec      	b.n	b084 <_dtoa_r+0xbd4>
    b0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0ac:	f04f 0800 	mov.w	r8, #0
    b0b0:	2b00      	cmp	r3, #0
    b0b2:	bfcc      	ite	gt
    b0b4:	461f      	movgt	r7, r3
    b0b6:	2701      	movle	r7, #1
    b0b8:	9b08      	ldr	r3, [sp, #32]
    b0ba:	441f      	add	r7, r3
    b0bc:	2201      	movs	r2, #1
    b0be:	9903      	ldr	r1, [sp, #12]
    b0c0:	4658      	mov	r0, fp
    b0c2:	f022 fa87 	bl	2d5d4 <__lshift>
    b0c6:	4621      	mov	r1, r4
    b0c8:	9003      	str	r0, [sp, #12]
    b0ca:	f02a fcee 	bl	35aaa <__mcmp>
    b0ce:	2800      	cmp	r0, #0
    b0d0:	dca8      	bgt.n	b024 <_dtoa_r+0xb74>
    b0d2:	d102      	bne.n	b0da <_dtoa_r+0xc2a>
    b0d4:	f019 0f01 	tst.w	r9, #1
    b0d8:	d1a4      	bne.n	b024 <_dtoa_r+0xb74>
    b0da:	46ba      	mov	sl, r7
    b0dc:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b0e0:	2b30      	cmp	r3, #48	; 0x30
    b0e2:	d0fa      	beq.n	b0da <_dtoa_r+0xc2a>
    b0e4:	e4fe      	b.n	aae4 <_dtoa_r+0x634>
    b0e6:	9b08      	ldr	r3, [sp, #32]
    b0e8:	42bb      	cmp	r3, r7
    b0ea:	d19b      	bne.n	b024 <_dtoa_r+0xb74>
    b0ec:	2331      	movs	r3, #49	; 0x31
    b0ee:	9a08      	ldr	r2, [sp, #32]
    b0f0:	3601      	adds	r6, #1
    b0f2:	7013      	strb	r3, [r2, #0]
    b0f4:	e4f6      	b.n	aae4 <_dtoa_r+0x634>
    b0f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	f47f aa20 	bne.w	a53e <_dtoa_r+0x8e>
    b0fe:	4b01      	ldr	r3, [pc, #4]	; (b104 <_dtoa_r+0xc54>)
    b100:	f7ff ba3f 	b.w	a582 <_dtoa_r+0xd2>
    b104:	000410c5 	.word	0x000410c5

0000b108 <data_print>:
}

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
    b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buf[len + 1];
    b10a:	f102 0308 	add.w	r3, r2, #8
    b10e:	f023 0307 	bic.w	r3, r3, #7
{
    b112:	af00      	add	r7, sp, #0
	char buf[len + 1];
    b114:	ebad 0d03 	sub.w	sp, sp, r3
{
    b118:	4605      	mov	r5, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b11a:	4668      	mov	r0, sp
    b11c:	4614      	mov	r4, r2
    b11e:	f029 ff65 	bl	34fec <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
    b122:	2300      	movs	r3, #0
	char buf[len + 1];
    b124:	466e      	mov	r6, sp
	buf[len] = 0;
    b126:	f80d 3004 	strb.w	r3, [sp, r4]
	LOG_INF("%s%s", (char *)prefix, (char *)buf);
    b12a:	b08a      	sub	sp, #40	; 0x28
    b12c:	466a      	mov	r2, sp
    b12e:	4b08      	ldr	r3, [pc, #32]	; (b150 <data_print+0x48>)
    b130:	61d6      	str	r6, [r2, #28]
    b132:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b136:	4b07      	ldr	r3, [pc, #28]	; (b154 <data_print+0x4c>)
    b138:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    b13c:	6213      	str	r3, [r2, #32]
    b13e:	4b06      	ldr	r3, [pc, #24]	; (b158 <data_print+0x50>)
    b140:	4806      	ldr	r0, [pc, #24]	; (b15c <data_print+0x54>)
    b142:	f842 3f10 	str.w	r3, [r2, #16]!
    b146:	f023 f985 	bl	2e454 <z_log_msg_static_create.constprop.0>
}
    b14a:	46bd      	mov	sp, r7
    b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b14e:	bf00      	nop
    b150:	0003f280 	.word	0x0003f280
    b154:	03010200 	.word	0x03010200
    b158:	02000004 	.word	0x02000004
    b15c:	000364b8 	.word	0x000364b8

0000b160 <mqtt_evt_handler>:
}
/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
    b160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b164:	b089      	sub	sp, #36	; 0x24
	int err;

	switch (evt->type) {
    b166:	780b      	ldrb	r3, [r1, #0]
{
    b168:	4606      	mov	r6, r0
    b16a:	460c      	mov	r4, r1
    b16c:	af00      	add	r7, sp, #0
	switch (evt->type) {
    b16e:	2b09      	cmp	r3, #9
    b170:	f200 8121 	bhi.w	b3b6 <mqtt_evt_handler+0x256>
    b174:	e8df f013 	tbh	[pc, r3, lsl #1]
    b178:	0048000a 	.word	0x0048000a
    b17c:	00fc0055 	.word	0x00fc0055
    b180:	011f011f 	.word	0x011f011f
    b184:	0109011f 	.word	0x0109011f
    b188:	0116011f 	.word	0x0116011f
	case MQTT_EVT_CONNACK:
	/* STEP 5 - Subscribe to the topic CONFIG_MQTT_SUB_TOPIC when we have a successful connection */
		if (evt->result != 0) {
    b18c:	69cb      	ldr	r3, [r1, #28]
    b18e:	b14b      	cbz	r3, b1a4 <mqtt_evt_handler+0x44>
			LOG_ERR("MQTT connect failed: %d", evt->result);
    b190:	466c      	mov	r4, sp
    b192:	b088      	sub	sp, #32
    b194:	466a      	mov	r2, sp
    b196:	498a      	ldr	r1, [pc, #552]	; (b3c0 <mqtt_evt_handler+0x260>)
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
		break;

	case MQTT_EVT_PINGRESP:
		if (evt->result != 0) {
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b198:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b19c:	2303      	movs	r3, #3
    b19e:	f842 3f10 	str.w	r3, [r2, #16]!
    b1a2:	e0e2      	b.n	b36a <mqtt_evt_handler+0x20a>
		LOG_INF("MQTT client connected");
    b1a4:	466d      	mov	r5, sp
    b1a6:	4b87      	ldr	r3, [pc, #540]	; (b3c4 <mqtt_evt_handler+0x264>)
    b1a8:	f107 0218 	add.w	r2, r7, #24
    b1ac:	61fb      	str	r3, [r7, #28]
    b1ae:	2302      	movs	r3, #2
    b1b0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b1b4:	61bb      	str	r3, [r7, #24]
    b1b6:	4884      	ldr	r0, [pc, #528]	; (b3c8 <mqtt_evt_handler+0x268>)
    b1b8:	f023 f94c 	bl	2e454 <z_log_msg_static_create.constprop.0>
	struct mqtt_topic subscribe_topic = {
    b1bc:	4b83      	ldr	r3, [pc, #524]	; (b3cc <mqtt_evt_handler+0x26c>)
		LOG_INF("MQTT client connected");
    b1be:	f107 0408 	add.w	r4, r7, #8
	struct mqtt_topic subscribe_topic = {
    b1c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b1c6:	4b82      	ldr	r3, [pc, #520]	; (b3d0 <mqtt_evt_handler+0x270>)
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b1c8:	b08a      	sub	sp, #40	; 0x28
	struct mqtt_topic subscribe_topic = {
    b1ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b1ce:	603c      	str	r4, [r7, #0]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b1d0:	466a      	mov	r2, sp
	const struct mqtt_subscription_list subscription_list = {
    b1d2:	607b      	str	r3, [r7, #4]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b1d4:	4b7f      	ldr	r3, [pc, #508]	; (b3d4 <mqtt_evt_handler+0x274>)
    b1d6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b1da:	6153      	str	r3, [r2, #20]
    b1dc:	4b7e      	ldr	r3, [pc, #504]	; (b3d8 <mqtt_evt_handler+0x278>)
    b1de:	487a      	ldr	r0, [pc, #488]	; (b3c8 <mqtt_evt_handler+0x268>)
    b1e0:	6193      	str	r3, [r2, #24]
    b1e2:	2321      	movs	r3, #33	; 0x21
    b1e4:	61d3      	str	r3, [r2, #28]
    b1e6:	f44f 7300 	mov.w	r3, #512	; 0x200
    b1ea:	8413      	strh	r3, [r2, #32]
    b1ec:	4b7b      	ldr	r3, [pc, #492]	; (b3dc <mqtt_evt_handler+0x27c>)
    b1ee:	f842 3f10 	str.w	r3, [r2, #16]!
    b1f2:	f023 f92f 	bl	2e454 <z_log_msg_static_create.constprop.0>
	return mqtt_subscribe(c, &subscription_list);
    b1f6:	4639      	mov	r1, r7
    b1f8:	46ad      	mov	sp, r5
    b1fa:	4630      	mov	r0, r6
    b1fc:	f026 fd6b 	bl	31cd6 <mqtt_subscribe>

	default:
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
		break;
	}
}
    b200:	3724      	adds	r7, #36	; 0x24
    b202:	46bd      	mov	sp, r7
    b204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_INF("MQTT client disconnected: %d", evt->result);
    b208:	466c      	mov	r4, sp
    b20a:	b088      	sub	sp, #32
    b20c:	69cb      	ldr	r3, [r1, #28]
    b20e:	466a      	mov	r2, sp
    b210:	4973      	ldr	r1, [pc, #460]	; (b3e0 <mqtt_evt_handler+0x280>)
	switch (evt->type) {
    b212:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b216:	2303      	movs	r3, #3
    b218:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b21c:	f842 3f10 	str.w	r3, [r2, #16]!
    b220:	e04d      	b.n	b2be <mqtt_evt_handler+0x15e>
		LOG_INF("MQTT PUBLISH result=%d len=%d",
    b222:	466d      	mov	r5, sp
    b224:	b088      	sub	sp, #32
    b226:	466a      	mov	r2, sp
    b228:	69c9      	ldr	r1, [r1, #28]
    b22a:	6963      	ldr	r3, [r4, #20]
    b22c:	61d3      	str	r3, [r2, #28]
    b22e:	2304      	movs	r3, #4
    b230:	486c      	ldr	r0, [pc, #432]	; (b3e4 <mqtt_evt_handler+0x284>)
    b232:	e9c2 0105 	strd	r0, r1, [r2, #20]
    b236:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b23a:	4863      	ldr	r0, [pc, #396]	; (b3c8 <mqtt_evt_handler+0x268>)
    b23c:	f842 3f10 	str.w	r3, [r2, #16]!
    b240:	f023 f908 	bl	2e454 <z_log_msg_static_create.constprop.0>
		err = get_received_payload(c, p->message.payload.len);
    b244:	f8d4 8014 	ldr.w	r8, [r4, #20]
    b248:	46ad      	mov	sp, r5
	if (length > sizeof(payload_buf)) {
    b24a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    b24e:	d912      	bls.n	b276 <mqtt_evt_handler+0x116>
		ret = mqtt_read_publish_payload_blocking(
    b250:	f8df 9194 	ldr.w	r9, [pc, #404]	; b3e8 <mqtt_evt_handler+0x288>
    b254:	4649      	mov	r1, r9
    b256:	4630      	mov	r0, r6
    b258:	f1a8 0280 	sub.w	r2, r8, #128	; 0x80
    b25c:	f026 fe0e 	bl	31e7c <mqtt_read_publish_payload_blocking>
		if (ret == 0) {
    b260:	1e05      	subs	r5, r0, #0
    b262:	d031      	beq.n	b2c8 <mqtt_evt_handler+0x168>
		} else if (ret < 0) {
    b264:	db32      	blt.n	b2cc <mqtt_evt_handler+0x16c>
		length -= ret;
    b266:	eba8 0805 	sub.w	r8, r8, r5
	while (length > sizeof(payload_buf)) {
    b26a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    b26e:	d8f1      	bhi.n	b254 <mqtt_evt_handler+0xf4>
		err = -EMSGSIZE;
    b270:	f06f 0979 	mvn.w	r9, #121	; 0x79
    b274:	e001      	b.n	b27a <mqtt_evt_handler+0x11a>
	int err = 0;
    b276:	f04f 0900 	mov.w	r9, #0
	ret = mqtt_readall_publish_payload(c, payload_buf, length);
    b27a:	4642      	mov	r2, r8
    b27c:	4630      	mov	r0, r6
    b27e:	495a      	ldr	r1, [pc, #360]	; (b3e8 <mqtt_evt_handler+0x288>)
    b280:	f026 fdff 	bl	31e82 <mqtt_readall_publish_payload>
	if (ret) {
    b284:	4605      	mov	r5, r0
    b286:	bb08      	cbnz	r0, b2cc <mqtt_evt_handler+0x16c>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b288:	7b23      	ldrb	r3, [r4, #12]
    b28a:	2b01      	cmp	r3, #1
    b28c:	d106      	bne.n	b29c <mqtt_evt_handler+0x13c>
			const struct mqtt_puback_param ack = {
    b28e:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b290:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
    b292:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
    b294:	f107 0108 	add.w	r1, r7, #8
    b298:	f026 fccf 	bl	31c3a <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b29c:	f1b9 0f00 	cmp.w	r9, #0
    b2a0:	d020      	beq.n	b2e4 <mqtt_evt_handler+0x184>
			LOG_ERR("Received payload (%d bytes) is larger than the payload buffer size (%d bytes).",
    b2a2:	6963      	ldr	r3, [r4, #20]
    b2a4:	466c      	mov	r4, sp
    b2a6:	b088      	sub	sp, #32
    b2a8:	466a      	mov	r2, sp
    b2aa:	4950      	ldr	r1, [pc, #320]	; (b3ec <mqtt_evt_handler+0x28c>)
    b2ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b2b0:	2380      	movs	r3, #128	; 0x80
    b2b2:	61d3      	str	r3, [r2, #28]
    b2b4:	2304      	movs	r3, #4
    b2b6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b2ba:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b2be:	4842      	ldr	r0, [pc, #264]	; (b3c8 <mqtt_evt_handler+0x268>)
    b2c0:	f023 f8c8 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b2c4:	46a5      	mov	sp, r4
}
    b2c6:	e79b      	b.n	b200 <mqtt_evt_handler+0xa0>
			return -EIO;
    b2c8:	f06f 0504 	mvn.w	r5, #4
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b2cc:	7b23      	ldrb	r3, [r4, #12]
    b2ce:	2b01      	cmp	r3, #1
    b2d0:	d106      	bne.n	b2e0 <mqtt_evt_handler+0x180>
			const struct mqtt_puback_param ack = {
    b2d2:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b2d4:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
    b2d6:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
    b2d8:	f107 0108 	add.w	r1, r7, #8
    b2dc:	f026 fcad 	bl	31c3a <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b2e0:	2d00      	cmp	r5, #0
    b2e2:	db18      	blt.n	b316 <mqtt_evt_handler+0x1b6>
			data_print("Received: ", payload_buf, p->message.payload.len);
    b2e4:	6962      	ldr	r2, [r4, #20]
    b2e6:	4940      	ldr	r1, [pc, #256]	; (b3e8 <mqtt_evt_handler+0x288>)
    b2e8:	4841      	ldr	r0, [pc, #260]	; (b3f0 <mqtt_evt_handler+0x290>)
    b2ea:	f7ff ff0d 	bl	b108 <data_print>
			if(strncmp(payload_buf,"{\"to\":\"cse-in\",\"op\":2,\"rqi\":\"LED_ON\",\"rvi\":\"3\",\"fr\":\"CAdmin\"}",sizeof("{\"to\":\"cse-in\",\"op\":2,\"rqi\":\"LED_ON\",\"rvi\":\"3\",\"fr\":\"CAdmin\"}")-1) == 0){
    b2ee:	223d      	movs	r2, #61	; 0x3d
    b2f0:	4940      	ldr	r1, [pc, #256]	; (b3f4 <mqtt_evt_handler+0x294>)
    b2f2:	483d      	ldr	r0, [pc, #244]	; (b3e8 <mqtt_evt_handler+0x288>)
    b2f4:	f02a f840 	bl	35378 <strncmp>
    b2f8:	b910      	cbnz	r0, b300 <mqtt_evt_handler+0x1a0>
				dk_set_led_on(LED_CONTROL_OVER_MQTT);
    b2fa:	f027 fe31 	bl	32f60 <dk_set_led_on>
    b2fe:	e77f      	b.n	b200 <mqtt_evt_handler+0xa0>
			else if(strncmp(payload_buf,"{\"to\":\"cse-in\",\"op\":2,\"rqi\":\"LED_OFF\",\"rvi\":\"3\",\"fr\":\"CAdmin\"}",sizeof("{\"to\":\"cse-in\",\"op\":2,\"rqi\":\"LED_OFF\",\"rvi\":\"3\",\"fr\":\"CAdmin\"}")-1) == 0){
    b300:	223e      	movs	r2, #62	; 0x3e
    b302:	493d      	ldr	r1, [pc, #244]	; (b3f8 <mqtt_evt_handler+0x298>)
    b304:	4838      	ldr	r0, [pc, #224]	; (b3e8 <mqtt_evt_handler+0x288>)
    b306:	f02a f837 	bl	35378 <strncmp>
    b30a:	2800      	cmp	r0, #0
    b30c:	f47f af78 	bne.w	b200 <mqtt_evt_handler+0xa0>
				dk_set_led_off(LED_CONTROL_OVER_MQTT);
    b310:	f027 fe29 	bl	32f66 <dk_set_led_off>
    b314:	e774      	b.n	b200 <mqtt_evt_handler+0xa0>
		} else if (err == -EMSGSIZE) {
    b316:	f115 0f7a 	cmn.w	r5, #122	; 0x7a
    b31a:	d0c2      	beq.n	b2a2 <mqtt_evt_handler+0x142>
			LOG_ERR("get_received_payload failed: %d", err);
    b31c:	466c      	mov	r4, sp
    b31e:	b088      	sub	sp, #32
    b320:	466a      	mov	r2, sp
    b322:	4b36      	ldr	r3, [pc, #216]	; (b3fc <mqtt_evt_handler+0x29c>)
    b324:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b328:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b32c:	2503      	movs	r5, #3
    b32e:	4826      	ldr	r0, [pc, #152]	; (b3c8 <mqtt_evt_handler+0x268>)
    b330:	f842 5f10 	str.w	r5, [r2, #16]!
    b334:	f023 f88e 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b338:	46a5      	mov	sp, r4
			LOG_INF("Disconnecting MQTT client...");
    b33a:	4b31      	ldr	r3, [pc, #196]	; (b400 <mqtt_evt_handler+0x2a0>)
    b33c:	4822      	ldr	r0, [pc, #136]	; (b3c8 <mqtt_evt_handler+0x268>)
    b33e:	61fb      	str	r3, [r7, #28]
    b340:	2302      	movs	r3, #2
    b342:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b346:	61bb      	str	r3, [r7, #24]
    b348:	f107 0218 	add.w	r2, r7, #24
    b34c:	f023 f882 	bl	2e454 <z_log_msg_static_create.constprop.0>
			err = mqtt_disconnect(c);
    b350:	4630      	mov	r0, r6
    b352:	f026 fc98 	bl	31c86 <mqtt_disconnect>
			if (err) {
    b356:	2800      	cmp	r0, #0
    b358:	f43f af52 	beq.w	b200 <mqtt_evt_handler+0xa0>
				LOG_ERR("Could not disconnect: %d", err);
    b35c:	b088      	sub	sp, #32
    b35e:	466a      	mov	r2, sp
    b360:	4b28      	ldr	r3, [pc, #160]	; (b404 <mqtt_evt_handler+0x2a4>)
    b362:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b366:	f842 5f10 	str.w	r5, [r2, #16]!
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b36a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b36e:	e7a6      	b.n	b2be <mqtt_evt_handler+0x15e>
		if (evt->result != 0) {
    b370:	69cb      	ldr	r3, [r1, #28]
    b372:	b123      	cbz	r3, b37e <mqtt_evt_handler+0x21e>
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
    b374:	466c      	mov	r4, sp
    b376:	b088      	sub	sp, #32
    b378:	466a      	mov	r2, sp
    b37a:	4923      	ldr	r1, [pc, #140]	; (b408 <mqtt_evt_handler+0x2a8>)
    b37c:	e70c      	b.n	b198 <mqtt_evt_handler+0x38>
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
    b37e:	466c      	mov	r4, sp
    b380:	b088      	sub	sp, #32
    b382:	466a      	mov	r2, sp
    b384:	888b      	ldrh	r3, [r1, #4]
    b386:	4921      	ldr	r1, [pc, #132]	; (b40c <mqtt_evt_handler+0x2ac>)
    b388:	e743      	b.n	b212 <mqtt_evt_handler+0xb2>
		if (evt->result != 0) {
    b38a:	69cb      	ldr	r3, [r1, #28]
    b38c:	b123      	cbz	r3, b398 <mqtt_evt_handler+0x238>
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
    b38e:	466c      	mov	r4, sp
    b390:	b088      	sub	sp, #32
    b392:	466a      	mov	r2, sp
    b394:	491e      	ldr	r1, [pc, #120]	; (b410 <mqtt_evt_handler+0x2b0>)
    b396:	e6ff      	b.n	b198 <mqtt_evt_handler+0x38>
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
    b398:	466c      	mov	r4, sp
    b39a:	b088      	sub	sp, #32
    b39c:	466a      	mov	r2, sp
    b39e:	888b      	ldrh	r3, [r1, #4]
    b3a0:	491c      	ldr	r1, [pc, #112]	; (b414 <mqtt_evt_handler+0x2b4>)
    b3a2:	e736      	b.n	b212 <mqtt_evt_handler+0xb2>
		if (evt->result != 0) {
    b3a4:	69cb      	ldr	r3, [r1, #28]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	f43f af2a 	beq.w	b200 <mqtt_evt_handler+0xa0>
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b3ac:	466c      	mov	r4, sp
    b3ae:	b088      	sub	sp, #32
    b3b0:	466a      	mov	r2, sp
    b3b2:	4919      	ldr	r1, [pc, #100]	; (b418 <mqtt_evt_handler+0x2b8>)
    b3b4:	e6f0      	b.n	b198 <mqtt_evt_handler+0x38>
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b3b6:	466c      	mov	r4, sp
    b3b8:	b088      	sub	sp, #32
    b3ba:	466a      	mov	r2, sp
    b3bc:	4917      	ldr	r1, [pc, #92]	; (b41c <mqtt_evt_handler+0x2bc>)
    b3be:	e728      	b.n	b212 <mqtt_evt_handler+0xb2>
    b3c0:	00037880 	.word	0x00037880
    b3c4:	00037898 	.word	0x00037898
    b3c8:	000364b8 	.word	0x000364b8
    b3cc:	00036640 	.word	0x00036640
    b3d0:	04d20001 	.word	0x04d20001
    b3d4:	000378ae 	.word	0x000378ae
    b3d8:	000378c8 	.word	0x000378c8
    b3dc:	01000004 	.word	0x01000004
    b3e0:	000378ea 	.word	0x000378ea
    b3e4:	00037907 	.word	0x00037907
    b3e8:	2001106a 	.word	0x2001106a
    b3ec:	00037925 	.word	0x00037925
    b3f0:	00037974 	.word	0x00037974
    b3f4:	0003797f 	.word	0x0003797f
    b3f8:	000379bd 	.word	0x000379bd
    b3fc:	000379fc 	.word	0x000379fc
    b400:	00037a1c 	.word	0x00037a1c
    b404:	00037a39 	.word	0x00037a39
    b408:	00037a52 	.word	0x00037a52
    b40c:	00037a68 	.word	0x00037a68
    b410:	00037a7d 	.word	0x00037a7d
    b414:	00037a93 	.word	0x00037a93
    b418:	00037aa8 	.word	0x00037aa8
    b41c:	00037ac0 	.word	0x00037ac0

0000b420 <data_publish>:
{
    b420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b424:	f04f 0821 	mov.w	r8, #33	; 0x21
{
    b428:	b087      	sub	sp, #28
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b42a:	f8df 9068 	ldr.w	r9, [pc, #104]	; b494 <data_publish+0x74>
{
    b42e:	af00      	add	r7, sp, #0
    b430:	4606      	mov	r6, r0
    b432:	4614      	mov	r4, r2
    b434:	461d      	mov	r5, r3
	param.message.payload.len = len;
    b436:	e9c7 2303 	strd	r2, r3, [r7, #12]
	param.message.topic.qos = qos;
    b43a:	7239      	strb	r1, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b43c:	f8c7 9000 	str.w	r9, [r7]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b440:	f8c7 8004 	str.w	r8, [r7, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    b444:	f006 f8da 	bl	115fc <z_impl_sys_rand32_get>
	param.dup_flag = 0;
    b448:	7dbb      	ldrb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b44a:	462a      	mov	r2, r5
    b44c:	4621      	mov	r1, r4
	param.message_id = sys_rand32_get();
    b44e:	82b8      	strh	r0, [r7, #20]
	param.dup_flag = 0;
    b450:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
    b454:	4810      	ldr	r0, [pc, #64]	; (b498 <data_publish+0x78>)
	LOG_INF("to topic: %s len: %u",
    b456:	466c      	mov	r4, sp
	param.dup_flag = 0;
    b458:	75bb      	strb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b45a:	f7ff fe55 	bl	b108 <data_print>
	LOG_INF("to topic: %s len: %u",
    b45e:	b08a      	sub	sp, #40	; 0x28
    b460:	466a      	mov	r2, sp
    b462:	4b0e      	ldr	r3, [pc, #56]	; (b49c <data_publish+0x7c>)
    b464:	f8c2 801c 	str.w	r8, [r2, #28]
    b468:	e9c2 3905 	strd	r3, r9, [r2, #20]
    b46c:	f44f 7300 	mov.w	r3, #512	; 0x200
    b470:	8413      	strh	r3, [r2, #32]
    b472:	4b0b      	ldr	r3, [pc, #44]	; (b4a0 <data_publish+0x80>)
    b474:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b478:	f842 3f10 	str.w	r3, [r2, #16]!
    b47c:	4809      	ldr	r0, [pc, #36]	; (b4a4 <data_publish+0x84>)
    b47e:	f022 ffe9 	bl	2e454 <z_log_msg_static_create.constprop.0>
	return mqtt_publish(c, &param);
    b482:	4639      	mov	r1, r7
    b484:	46a5      	mov	sp, r4
    b486:	4630      	mov	r0, r6
    b488:	f026 fb93 	bl	31bb2 <mqtt_publish>
}
    b48c:	371c      	adds	r7, #28
    b48e:	46bd      	mov	sp, r7
    b490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b494:	000378c8 	.word	0x000378c8
    b498:	00037ade 	.word	0x00037ade
    b49c:	00037aeb 	.word	0x00037aeb
    b4a0:	01000004 	.word	0x01000004
    b4a4:	000364b8 	.word	0x000364b8

0000b4a8 <client_init>:

/**@brief Initialize the MQTT client structure
 */
/* STEP 3 - Define the function client_init() to initialize the MQTT client instance.  */
int client_init(struct mqtt_client *client)
{
    b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4ac:	b09d      	sub	sp, #116	; 0x74
    b4ae:	af02      	add	r7, sp, #8
	struct addrinfo hints = {
    b4b0:	f107 0818 	add.w	r8, r7, #24
{
    b4b4:	4604      	mov	r4, r0
	int err;
	/* Initializes the client instance. */
	mqtt_client_init(client);
    b4b6:	f026 fb23 	bl	31b00 <mqtt_client_init>
	struct addrinfo hints = {
    b4ba:	2250      	movs	r2, #80	; 0x50
    b4bc:	2100      	movs	r1, #0
    b4be:	4640      	mov	r0, r8
    b4c0:	f029 fdb4 	bl	3502c <memset>
    b4c4:	2301      	movs	r3, #1
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    b4c6:	4642      	mov	r2, r8
    b4c8:	e9c7 3308 	strd	r3, r3, [r7, #32]
    b4cc:	2100      	movs	r1, #0
    b4ce:	4852      	ldr	r0, [pc, #328]	; (b618 <client_init+0x170>)
    b4d0:	1d3b      	adds	r3, r7, #4
    b4d2:	f023 fbf6 	bl	2ecc2 <zsock_getaddrinfo>
	if (err) {
    b4d6:	4605      	mov	r5, r0
    b4d8:	b300      	cbz	r0, b51c <client_init+0x74>
		LOG_ERR("getaddrinfo failed: %d", err);
    b4da:	466c      	mov	r4, sp
    b4dc:	b088      	sub	sp, #32
    b4de:	aa02      	add	r2, sp, #8
    b4e0:	4b4e      	ldr	r3, [pc, #312]	; (b61c <client_init+0x174>)
    b4e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b4e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b4ea:	2303      	movs	r3, #3
    b4ec:	484c      	ldr	r0, [pc, #304]	; (b620 <client_init+0x178>)
    b4ee:	f842 3f10 	str.w	r3, [r2, #16]!
    b4f2:	f022 ffaf 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b4f6:	46a5      	mov	sp, r4

	/* Resolves the configured hostname and initializes the MQTT broker structure */
	err = broker_init();
	if (err) {
		LOG_ERR("Failed to initialize broker connection");
    b4f8:	4b4a      	ldr	r3, [pc, #296]	; (b624 <client_init+0x17c>)
		return -ECHILD;
    b4fa:	f06f 0509 	mvn.w	r5, #9
		LOG_ERR("Failed to initialize broker connection");
    b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    b500:	2302      	movs	r3, #2
    b502:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b506:	4846      	ldr	r0, [pc, #280]	; (b620 <client_init+0x178>)
    b508:	62bb      	str	r3, [r7, #40]	; 0x28
    b50a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b50e:	f022 ffa1 	bl	2e454 <z_log_msg_static_create.constprop.0>
	/* We are not using TLS in Exercise 1 */
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;


	return err;
}
    b512:	4628      	mov	r0, r5
    b514:	376c      	adds	r7, #108	; 0x6c
    b516:	46bd      	mov	sp, r7
    b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    b51c:	f04f 0a08 	mov.w	sl, #8
	addr = result;
    b520:	687e      	ldr	r6, [r7, #4]
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    b522:	f8df 9104 	ldr.w	r9, [pc, #260]	; b628 <client_init+0x180>
		addr = addr->ai_next;
    b526:	483e      	ldr	r0, [pc, #248]	; (b620 <client_init+0x178>)
	while (addr != NULL) {
    b528:	b32e      	cbz	r6, b576 <client_init+0xce>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    b52a:	6973      	ldr	r3, [r6, #20]
    b52c:	2b08      	cmp	r3, #8
    b52e:	d154      	bne.n	b5da <client_init+0x132>
				->sin_addr.s_addr;
    b530:	69b3      	ldr	r3, [r6, #24]
			broker4->sin_addr.s_addr =
    b532:	493e      	ldr	r1, [pc, #248]	; (b62c <client_init+0x184>)
				->sin_addr.s_addr;
    b534:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
    b536:	2001      	movs	r0, #1
			broker4->sin_addr.s_addr =
    b538:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    b53a:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
    b53e:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    b540:	804b      	strh	r3, [r1, #2]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    b542:	f107 0608 	add.w	r6, r7, #8
    b546:	2310      	movs	r3, #16
    b548:	4632      	mov	r2, r6
    b54a:	3104      	adds	r1, #4
    b54c:	f00d f9fe 	bl	1894c <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", (char *)(ipv4_addr));
    b550:	46e9      	mov	r9, sp
    b552:	b088      	sub	sp, #32
    b554:	ab02      	add	r3, sp, #8
    b556:	4a36      	ldr	r2, [pc, #216]	; (b630 <client_init+0x188>)
    b558:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    b55c:	e9c3 2605 	strd	r2, r6, [r3, #20]
    b560:	f44f 7200 	mov.w	r2, #512	; 0x200
    b564:	839a      	strh	r2, [r3, #28]
    b566:	461a      	mov	r2, r3
    b568:	4b32      	ldr	r3, [pc, #200]	; (b634 <client_init+0x18c>)
    b56a:	482d      	ldr	r0, [pc, #180]	; (b620 <client_init+0x178>)
    b56c:	f842 3f10 	str.w	r3, [r2, #16]!
    b570:	f022 ff70 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b574:	46cd      	mov	sp, r9
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    b576:	6878      	ldr	r0, [r7, #4]
    b578:	f023 fba5 	bl	2ecc6 <zsock_freeaddrinfo>
	client->broker = &broker;
    b57c:	4b2b      	ldr	r3, [pc, #172]	; (b62c <client_init+0x184>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b57e:	2117      	movs	r1, #23
	client->broker = &broker;
    b580:	65a3      	str	r3, [r4, #88]	; 0x58
	client->evt_cb = mqtt_evt_handler;
    b582:	4b2d      	ldr	r3, [pc, #180]	; (b638 <client_init+0x190>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b584:	4640      	mov	r0, r8
    b586:	4a2d      	ldr	r2, [pc, #180]	; (b63c <client_init+0x194>)
	client->evt_cb = mqtt_evt_handler;
    b588:	66e3      	str	r3, [r4, #108]	; 0x6c
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b58a:	f01b f8c7 	bl	2671c <nrf_modem_at_cmd>
	if (err) {
    b58e:	2800      	cmp	r0, #0
    b590:	d036      	beq.n	b600 <client_init+0x158>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
    b592:	466e      	mov	r6, sp
    b594:	b088      	sub	sp, #32
    b596:	aa02      	add	r2, sp, #8
    b598:	4b29      	ldr	r3, [pc, #164]	; (b640 <client_init+0x198>)
    b59a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b59e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b5a2:	2303      	movs	r3, #3
    b5a4:	481e      	ldr	r0, [pc, #120]	; (b620 <client_init+0x178>)
    b5a6:	f842 3f10 	str.w	r3, [r2, #16]!
    b5aa:	f022 ff53 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b5ae:	46b5      	mov	sp, r6
	client->client_id.utf8 = client_id_get();
    b5b0:	4824      	ldr	r0, [pc, #144]	; (b644 <client_init+0x19c>)
    b5b2:	6520      	str	r0, [r4, #80]	; 0x50
	client->client_id.size = strlen(client->client_id.utf8);
    b5b4:	f7fd feb1 	bl	931a <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    b5b8:	2204      	movs	r2, #4
    b5ba:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
	client->rx_buf = rx_buffer;
    b5be:	4a22      	ldr	r2, [pc, #136]	; (b648 <client_init+0x1a0>)
	client->password = NULL;
    b5c0:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    b5c2:	6722      	str	r2, [r4, #112]	; 0x70
	client->rx_buf_size = sizeof(rx_buffer);
    b5c4:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
    b5c6:	4921      	ldr	r1, [pc, #132]	; (b64c <client_init+0x1a4>)
	client->user_name = NULL;
    b5c8:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
	client->tx_buf_size = sizeof(tx_buffer);
    b5cc:	e9c4 121e 	strd	r1, r2, [r4, #120]	; 0x78
	client->client_id.size = strlen(client->client_id.utf8);
    b5d0:	6560      	str	r0, [r4, #84]	; 0x54
	client->rx_buf_size = sizeof(rx_buffer);
    b5d2:	6762      	str	r2, [r4, #116]	; 0x74
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    b5d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return err;
    b5d8:	e79b      	b.n	b512 <client_init+0x6a>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    b5da:	46eb      	mov	fp, sp
    b5dc:	b08a      	sub	sp, #40	; 0x28
    b5de:	aa02      	add	r2, sp, #8
    b5e0:	e9c2 9305 	strd	r9, r3, [r2, #20]
    b5e4:	2318      	movs	r3, #24
    b5e6:	6213      	str	r3, [r2, #32]
    b5e8:	2305      	movs	r3, #5
    b5ea:	f8c2 a01c 	str.w	sl, [r2, #28]
    b5ee:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b5f2:	f842 3f10 	str.w	r3, [r2, #16]!
    b5f6:	f022 ff2d 	bl	2e454 <z_log_msg_static_create.constprop.0>
    b5fa:	46dd      	mov	sp, fp
		addr = addr->ai_next;
    b5fc:	6836      	ldr	r6, [r6, #0]
    b5fe:	e792      	b.n	b526 <client_init+0x7e>
	imei_buf[IMEI_LEN] = '\0';
    b600:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
	snprintf(client_id, sizeof(client_id), "nrf-%.*s", IMEI_LEN, imei_buf);
    b604:	230f      	movs	r3, #15
    b606:	2114      	movs	r1, #20
    b608:	4a11      	ldr	r2, [pc, #68]	; (b650 <client_init+0x1a8>)
    b60a:	f8cd 8000 	str.w	r8, [sp]
    b60e:	480d      	ldr	r0, [pc, #52]	; (b644 <client_init+0x19c>)
    b610:	f020 fefc 	bl	2c40c <sniprintf>
    b614:	e7cc      	b.n	b5b0 <client_init+0x108>
    b616:	bf00      	nop
    b618:	00037b00 	.word	0x00037b00
    b61c:	00037b0c 	.word	0x00037b0c
    b620:	000364b8 	.word	0x000364b8
    b624:	00037b23 	.word	0x00037b23
    b628:	00037b60 	.word	0x00037b60
    b62c:	20011024 	.word	0x20011024
    b630:	00037b4a 	.word	0x00037b4a
    b634:	01000003 	.word	0x01000003
    b638:	0000b161 	.word	0x0000b161
    b63c:	00037b83 	.word	0x00037b83
    b640:	00037b8b 	.word	0x00037b8b
    b644:	20011056 	.word	0x20011056
    b648:	2001116a 	.word	0x2001116a
    b64c:	200110ea 	.word	0x200110ea
    b650:	00037bac 	.word	0x00037bac

0000b654 <leds_update>:
	error_handler(ERROR_MODEM_RECOVERABLE, (int)fault_info->reason);
}

/**@brief Update LEDs state. */
static void leds_update(struct k_work *work)
{
    b654:	b570      	push	{r4, r5, r6, lr}
	static bool led_on;
	static uint8_t current_led_on_mask;
	uint8_t led_on_mask = current_led_on_mask;
    b656:	4d11      	ldr	r5, [pc, #68]	; (b69c <leds_update+0x48>)
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);

	/* Set LED3 and LED4 to match current state. */
	led_on_mask |= LED_GET_ON(display_state);

	led_on = !led_on;
    b658:	4811      	ldr	r0, [pc, #68]	; (b6a0 <leds_update+0x4c>)
	led_on_mask |= LED_GET_ON(display_state);
    b65a:	4b12      	ldr	r3, [pc, #72]	; (b6a4 <leds_update+0x50>)
	uint8_t led_on_mask = current_led_on_mask;
    b65c:	7829      	ldrb	r1, [r5, #0]
	led_on_mask |= LED_GET_ON(display_state);
    b65e:	881b      	ldrh	r3, [r3, #0]
	led_on = !led_on;
    b660:	7802      	ldrb	r2, [r0, #0]
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);
    b662:	f021 040c 	bic.w	r4, r1, #12
	led_on_mask |= LED_GET_ON(display_state);
    b666:	431c      	orrs	r4, r3
	led_on = !led_on;
    b668:	f082 0201 	eor.w	r2, r2, #1
	led_on_mask |= LED_GET_ON(display_state);
    b66c:	b264      	sxtb	r4, r4
	led_on = !led_on;
    b66e:	7002      	strb	r2, [r0, #0]
	if (led_on) {
		led_on_mask |= LED_GET_BLINK(display_state);
    b670:	f343 2307 	sbfx	r3, r3, #8, #8
	if (led_on) {
    b674:	b17a      	cbz	r2, b696 <leds_update+0x42>
		led_on_mask |= LED_GET_BLINK(display_state);
    b676:	431c      	orrs	r4, r3
	} else {
		led_on_mask &= ~LED_GET_BLINK(display_state);
    b678:	b2e4      	uxtb	r4, r4
	}

	if (led_on_mask != current_led_on_mask) {
    b67a:	428c      	cmp	r4, r1
    b67c:	d003      	beq.n	b686 <leds_update+0x32>
		dk_set_leds(led_on_mask);
    b67e:	4620      	mov	r0, r4
    b680:	f027 fc6b 	bl	32f5a <dk_set_leds>
		current_led_on_mask = led_on_mask;
    b684:	702c      	strb	r4, [r5, #0]
	}

	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
    b68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b68e:	2300      	movs	r3, #0
    b690:	4805      	ldr	r0, [pc, #20]	; (b6a8 <leds_update+0x54>)
    b692:	f01d bff1 	b.w	29678 <k_work_schedule>
		led_on_mask &= ~LED_GET_BLINK(display_state);
    b696:	ea24 0403 	bic.w	r4, r4, r3
    b69a:	e7ed      	b.n	b678 <leds_update+0x24>
    b69c:	200111eb 	.word	0x200111eb
    b6a0:	200111ea 	.word	0x200111ea
    b6a4:	2001103c 	.word	0x2001103c
    b6a8:	2000d1f0 	.word	0x2000d1f0

0000b6ac <button_handler.part.0>:


/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t buttons, uint32_t has_changed)
    b6ac:	b598      	push	{r3, r4, r7, lr}
{
	switch (has_changed) {
	case DK_BTN1_MSK:
		/* STEP 7.2 - When button 1 is pressed, call data_publish() to publish a message */
		if (buttons & DK_BTN1_MSK){
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    b6ae:	2101      	movs	r1, #1
static void button_handler(uint32_t buttons, uint32_t has_changed)
    b6b0:	af00      	add	r7, sp, #0
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    b6b2:	234e      	movs	r3, #78	; 0x4e
    b6b4:	4a0a      	ldr	r2, [pc, #40]	; (b6e0 <button_handler.part.0+0x34>)
    b6b6:	480b      	ldr	r0, [pc, #44]	; (b6e4 <button_handler.part.0+0x38>)
    b6b8:	f7ff feb2 	bl	b420 <data_publish>
				   CONFIG_BUTTON_EVENT_PUBLISH_MSG, sizeof(CONFIG_BUTTON_EVENT_PUBLISH_MSG)-1);
			if (err) {
    b6bc:	b170      	cbz	r0, b6dc <button_handler.part.0+0x30>
				LOG_INF("Failed to send message, %d", err);
    b6be:	466c      	mov	r4, sp
    b6c0:	b088      	sub	sp, #32
    b6c2:	466a      	mov	r2, sp
    b6c4:	4b08      	ldr	r3, [pc, #32]	; (b6e8 <button_handler.part.0+0x3c>)
    b6c6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b6ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b6ce:	2303      	movs	r3, #3
    b6d0:	4806      	ldr	r0, [pc, #24]	; (b6ec <button_handler.part.0+0x40>)
    b6d2:	f842 3f10 	str.w	r3, [r2, #16]!
    b6d6:	f022 fecc 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b6da:	46a5      	mov	sp, r4
				return;
			}
		}
		break;
	}
}
    b6dc:	46bd      	mov	sp, r7
    b6de:	bd98      	pop	{r3, r4, r7, pc}
    b6e0:	00037bb5 	.word	0x00037bb5
    b6e4:	2000f810 	.word	0x2000f810
    b6e8:	00037c04 	.word	0x00037c04
    b6ec:	000364b8 	.word	0x000364b8

0000b6f0 <lte_handler>:
{
    b6f0:	b598      	push	{r3, r4, r7, lr}
     switch (evt->type) {
    b6f2:	7803      	ldrb	r3, [r0, #0]
{
    b6f4:	af00      	add	r7, sp, #0
     switch (evt->type) {
    b6f6:	b11b      	cbz	r3, b700 <lte_handler+0x10>
    b6f8:	2b03      	cmp	r3, #3
    b6fa:	d01f      	beq.n	b73c <lte_handler+0x4c>
}
    b6fc:	46bd      	mov	sp, r7
    b6fe:	bd98      	pop	{r3, r4, r7, pc}
        if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    b700:	7a03      	ldrb	r3, [r0, #8]
    b702:	2b01      	cmp	r3, #1
    b704:	d018      	beq.n	b738 <lte_handler+0x48>
    b706:	2b05      	cmp	r3, #5
    b708:	d1f8      	bne.n	b6fc <lte_handler+0xc>
		LOG_INF("Network registration status: %s",
    b70a:	4b19      	ldr	r3, [pc, #100]	; (b770 <lte_handler+0x80>)
    b70c:	466c      	mov	r4, sp
    b70e:	b088      	sub	sp, #32
    b710:	466a      	mov	r2, sp
    b712:	4918      	ldr	r1, [pc, #96]	; (b774 <lte_handler+0x84>)
    b714:	4818      	ldr	r0, [pc, #96]	; (b778 <lte_handler+0x88>)
    b716:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b71a:	f44f 7300 	mov.w	r3, #512	; 0x200
    b71e:	8393      	strh	r3, [r2, #28]
    b720:	4b16      	ldr	r3, [pc, #88]	; (b77c <lte_handler+0x8c>)
    b722:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    b726:	f842 3f10 	str.w	r3, [r2, #16]!
    b72a:	f022 fea2 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b72e:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b730:	4813      	ldr	r0, [pc, #76]	; (b780 <lte_handler+0x90>)
    b732:	f01d fb09 	bl	28d48 <z_impl_k_sem_give>
}
    b736:	e7e1      	b.n	b6fc <lte_handler+0xc>
    b738:	4b12      	ldr	r3, [pc, #72]	; (b784 <lte_handler+0x94>)
    b73a:	e7e7      	b.n	b70c <lte_handler+0x1c>
		LOG_INF("RRC mode: %s", evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED ?
    b73c:	7a01      	ldrb	r1, [r0, #8]
    b73e:	4a12      	ldr	r2, [pc, #72]	; (b788 <lte_handler+0x98>)
    b740:	4b12      	ldr	r3, [pc, #72]	; (b78c <lte_handler+0x9c>)
    b742:	466c      	mov	r4, sp
    b744:	b088      	sub	sp, #32
    b746:	2901      	cmp	r1, #1
    b748:	bf08      	it	eq
    b74a:	4613      	moveq	r3, r2
    b74c:	466a      	mov	r2, sp
    b74e:	4910      	ldr	r1, [pc, #64]	; (b790 <lte_handler+0xa0>)
    b750:	4809      	ldr	r0, [pc, #36]	; (b778 <lte_handler+0x88>)
    b752:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b756:	f44f 7300 	mov.w	r3, #512	; 0x200
    b75a:	8393      	strh	r3, [r2, #28]
    b75c:	4b07      	ldr	r3, [pc, #28]	; (b77c <lte_handler+0x8c>)
    b75e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    b762:	f842 3f10 	str.w	r3, [r2, #16]!
    b766:	f022 fe84 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b76a:	46a5      	mov	sp, r4
}
    b76c:	e7c6      	b.n	b6fc <lte_handler+0xc>
    b76e:	bf00      	nop
    b770:	00037c38 	.word	0x00037c38
    b774:	00037c5b 	.word	0x00037c5b
    b778:	000364b8 	.word	0x000364b8
    b77c:	01000003 	.word	0x01000003
    b780:	2000cfc8 	.word	0x2000cfc8
    b784:	00037c1f 	.word	0x00037c1f
    b788:	00037c4c 	.word	0x00037c4c
    b78c:	00037c56 	.word	0x00037c56
    b790:	00037c7b 	.word	0x00037c7b

0000b794 <main>:

	return 0;
}

int main(void)
{
    b794:	b5f0      	push	{r4, r5, r6, r7, lr}
    b796:	b087      	sub	sp, #28
    b798:	af00      	add	r7, sp, #0
	int err;
	uint32_t connect_attempt = 0;
	LOG_INF("LTE Sensor Gateway sample started");
    b79a:	2402      	movs	r4, #2
    b79c:	4b9f      	ldr	r3, [pc, #636]	; (ba1c <main+0x288>)
    b79e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b7a2:	489f      	ldr	r0, [pc, #636]	; (ba20 <main+0x28c>)
    b7a4:	617b      	str	r3, [r7, #20]
    b7a6:	f107 0210 	add.w	r2, r7, #16
    b7aa:	613c      	str	r4, [r7, #16]
    b7ac:	f022 fe61 	bl	2e472 <z_log_msg_static_create.constprop.0>

	
	ble_init();		//Initializes bluetooth (ble.c)
    b7b0:	f000 fc22 	bl	bff8 <ble_init>
	

	if (dk_leds_init() != 0) {
    b7b4:	f011 f89c 	bl	1c8f0 <dk_leds_init>
    b7b8:	b148      	cbz	r0, b7ce <main+0x3a>
		LOG_ERR("Failed to initialize the LED library");
    b7ba:	4b9a      	ldr	r3, [pc, #616]	; (ba24 <main+0x290>)
    b7bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7c0:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b7c4:	4896      	ldr	r0, [pc, #600]	; (ba20 <main+0x28c>)
    b7c6:	f107 0210 	add.w	r2, r7, #16
    b7ca:	f022 fe52 	bl	2e472 <z_log_msg_static_create.constprop.0>
	LOG_INF("Initializing modem library");
    b7ce:	466d      	mov	r5, sp
    b7d0:	2402      	movs	r4, #2
    b7d2:	4b95      	ldr	r3, [pc, #596]	; (ba28 <main+0x294>)
    b7d4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b7d8:	4891      	ldr	r0, [pc, #580]	; (ba20 <main+0x28c>)
    b7da:	617b      	str	r3, [r7, #20]
    b7dc:	f107 0210 	add.w	r2, r7, #16
    b7e0:	613c      	str	r4, [r7, #16]
    b7e2:	f022 fe46 	bl	2e472 <z_log_msg_static_create.constprop.0>
	err = nrf_modem_lib_init();
    b7e6:	f00f ff91 	bl	1b70c <nrf_modem_lib_init>
	if (err) {
    b7ea:	b1e0      	cbz	r0, b826 <main+0x92>
		LOG_ERR("Failed to initialize the modem library, error: %d", err);
    b7ec:	b088      	sub	sp, #32
    b7ee:	466a      	mov	r2, sp
    b7f0:	4b8e      	ldr	r3, [pc, #568]	; (ba2c <main+0x298>)
    b7f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b7f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b7fa:	2303      	movs	r3, #3
    b7fc:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Modem could not be configured, error: %d", err);
    b800:	4887      	ldr	r0, [pc, #540]	; (ba20 <main+0x28c>)
    b802:	f022 fe36 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b806:	46ad      	mov	sp, r5
	}

	err = modem_configure();
	if (err) {
		LOG_ERR("Failed to configure the modem");
    b808:	4b89      	ldr	r3, [pc, #548]	; (ba30 <main+0x29c>)
    b80a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b80e:	617b      	str	r3, [r7, #20]
    b810:	2302      	movs	r3, #2
    b812:	4883      	ldr	r0, [pc, #524]	; (ba20 <main+0x28c>)
    b814:	613b      	str	r3, [r7, #16]
    b816:	f107 0210 	add.w	r2, r7, #16
    b81a:	f022 fe2a 	bl	2e472 <z_log_msg_static_create.constprop.0>
	}
	goto do_connect;

	/* This is never reached */
	return 0;
}
    b81e:	2000      	movs	r0, #0
    b820:	371c      	adds	r7, #28
    b822:	46bd      	mov	sp, r7
    b824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Connecting to LTE network");
    b826:	4b83      	ldr	r3, [pc, #524]	; (ba34 <main+0x2a0>)
    b828:	487d      	ldr	r0, [pc, #500]	; (ba20 <main+0x28c>)
    b82a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b82e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b832:	f107 0210 	add.w	r2, r7, #16
    b836:	f022 fe1c 	bl	2e472 <z_log_msg_static_create.constprop.0>
	err = lte_lc_init_and_connect_async(lte_handler);
    b83a:	487f      	ldr	r0, [pc, #508]	; (ba38 <main+0x2a4>)
    b83c:	f027 fd01 	bl	33242 <lte_lc_init_and_connect_async>
	if (err) {
    b840:	b150      	cbz	r0, b858 <main+0xc4>
		LOG_INF("Modem could not be configured, error: %d", err);
    b842:	b088      	sub	sp, #32
    b844:	466a      	mov	r2, sp
    b846:	4b7d      	ldr	r3, [pc, #500]	; (ba3c <main+0x2a8>)
    b848:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b84c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b850:	2303      	movs	r3, #3
    b852:	f842 3f10 	str.w	r3, [r2, #16]!
    b856:	e7d3      	b.n	b800 <main+0x6c>
	return z_impl_k_sem_take(sem, timeout);
    b858:	f04f 32ff 	mov.w	r2, #4294967295
    b85c:	f04f 33ff 	mov.w	r3, #4294967295
    b860:	4877      	ldr	r0, [pc, #476]	; (ba40 <main+0x2ac>)
    b862:	f01d fab5 	bl	28dd0 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE network");
    b866:	4b77      	ldr	r3, [pc, #476]	; (ba44 <main+0x2b0>)
    b868:	486d      	ldr	r0, [pc, #436]	; (ba20 <main+0x28c>)
    b86a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b86e:	f107 0210 	add.w	r2, r7, #16
    b872:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b876:	f022 fdfc 	bl	2e472 <z_log_msg_static_create.constprop.0>
	display_state = LEDS_LTE_CONNECTED;
    b87a:	2204      	movs	r2, #4
    b87c:	4b72      	ldr	r3, [pc, #456]	; (ba48 <main+0x2b4>)
	if (dk_buttons_init(button_handler) != 0) {
    b87e:	4873      	ldr	r0, [pc, #460]	; (ba4c <main+0x2b8>)
	display_state = LEDS_LTE_CONNECTED;
    b880:	801a      	strh	r2, [r3, #0]
	if (dk_buttons_init(button_handler) != 0) {
    b882:	f011 f871 	bl	1c968 <dk_buttons_init>
    b886:	b148      	cbz	r0, b89c <main+0x108>
		LOG_ERR("Failed to initialize the buttons library");
    b888:	4b71      	ldr	r3, [pc, #452]	; (ba50 <main+0x2bc>)
    b88a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b88e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b892:	4863      	ldr	r0, [pc, #396]	; (ba20 <main+0x28c>)
    b894:	f107 0210 	add.w	r2, r7, #16
    b898:	f022 fdeb 	bl	2e472 <z_log_msg_static_create.constprop.0>
	err = client_init(&client);
    b89c:	486d      	ldr	r0, [pc, #436]	; (ba54 <main+0x2c0>)
    b89e:	f7ff fe03 	bl	b4a8 <client_init>
	if (err) {
    b8a2:	4604      	mov	r4, r0
    b8a4:	b178      	cbz	r0, b8c6 <main+0x132>
		LOG_ERR("Failed to initialize MQTT client: %d", err);
    b8a6:	466d      	mov	r5, sp
    b8a8:	b088      	sub	sp, #32
    b8aa:	466a      	mov	r2, sp
    b8ac:	4b6a      	ldr	r3, [pc, #424]	; (ba58 <main+0x2c4>)
    b8ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b8b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b8b6:	2303      	movs	r3, #3
    b8b8:	4859      	ldr	r0, [pc, #356]	; (ba20 <main+0x28c>)
    b8ba:	f842 3f10 	str.w	r3, [r2, #16]!
    b8be:	f022 fdd8 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b8c2:	46ad      	mov	sp, r5
		return 0;
    b8c4:	e7ab      	b.n	b81e <main+0x8a>
	k_work_init_delayable(&leds_update_work, leds_update);
    b8c6:	4965      	ldr	r1, [pc, #404]	; (ba5c <main+0x2c8>)
    b8c8:	4865      	ldr	r0, [pc, #404]	; (ba60 <main+0x2cc>)
    b8ca:	f01d fe33 	bl	29534 <k_work_init_delayable>
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b8ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b8d2:	2300      	movs	r3, #0
    b8d4:	4862      	ldr	r0, [pc, #392]	; (ba60 <main+0x2cc>)
    b8d6:	f01d fecf 	bl	29678 <k_work_schedule>
	err = fds_init(&client,&fds);
    b8da:	4d62      	ldr	r5, [pc, #392]	; (ba64 <main+0x2d0>)
	err = mqtt_connect(&client);
    b8dc:	485d      	ldr	r0, [pc, #372]	; (ba54 <main+0x2c0>)
    b8de:	f026 f926 	bl	31b2e <mqtt_connect>
	if (err) {
    b8e2:	b330      	cbz	r0, b932 <main+0x19e>
		LOG_ERR("Error in mqtt_connect: %d", err);
    b8e4:	466e      	mov	r6, sp
    b8e6:	b088      	sub	sp, #32
    b8e8:	466a      	mov	r2, sp
    b8ea:	4b5f      	ldr	r3, [pc, #380]	; (ba68 <main+0x2d4>)
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    b8ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b8f0:	2303      	movs	r3, #3
    b8f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b8f6:	484a      	ldr	r0, [pc, #296]	; (ba20 <main+0x28c>)
    b8f8:	f842 3f10 	str.w	r3, [r2, #16]!
    b8fc:	f022 fdb9 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b900:	46b5      	mov	sp, r6
	if (connect_attempt++ > 0) {
    b902:	3401      	adds	r4, #1
    b904:	d0ea      	beq.n	b8dc <main+0x148>
		LOG_INF("Reconnecting in %d seconds...",
    b906:	466e      	mov	r6, sp
    b908:	b088      	sub	sp, #32
    b90a:	466a      	mov	r2, sp
    b90c:	4b57      	ldr	r3, [pc, #348]	; (ba6c <main+0x2d8>)
    b90e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b912:	6153      	str	r3, [r2, #20]
    b914:	233c      	movs	r3, #60	; 0x3c
    b916:	6193      	str	r3, [r2, #24]
    b918:	2303      	movs	r3, #3
    b91a:	4841      	ldr	r0, [pc, #260]	; (ba20 <main+0x28c>)
    b91c:	f842 3f10 	str.w	r3, [r2, #16]!
    b920:	f022 fda7 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b924:	46b5      	mov	sp, r6
	return z_impl_k_sleep(timeout);
    b926:	2100      	movs	r1, #0
    b928:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    b92c:	f01f f85e 	bl	2a9ec <z_impl_k_sleep>
    b930:	e7d4      	b.n	b8dc <main+0x148>
	err = fds_init(&client,&fds);
    b932:	4629      	mov	r1, r5
    b934:	4847      	ldr	r0, [pc, #284]	; (ba54 <main+0x2c0>)
    b936:	f022 fd90 	bl	2e45a <fds_init>
	if (err) {
    b93a:	bb88      	cbnz	r0, b9a0 <main+0x20c>
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    b93c:	4e45      	ldr	r6, [pc, #276]	; (ba54 <main+0x2c0>)
    b93e:	4630      	mov	r0, r6
    b940:	f026 fa64 	bl	31e0c <mqtt_keepalive_time_left>
    b944:	4602      	mov	r2, r0
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    b946:	2101      	movs	r1, #1
    b948:	4628      	mov	r0, r5
    b94a:	f023 fad1 	bl	2eef0 <z_impl_zsock_poll>
		if (err < 0) {
    b94e:	2800      	cmp	r0, #0
    b950:	da36      	bge.n	b9c0 <main+0x22c>
			LOG_ERR("Error in poll(): %d", errno);
    b952:	f024 f90e 	bl	2fb72 <__errno>
    b956:	466e      	mov	r6, sp
    b958:	b088      	sub	sp, #32
    b95a:	6803      	ldr	r3, [r0, #0]
    b95c:	466a      	mov	r2, sp
    b95e:	4944      	ldr	r1, [pc, #272]	; (ba70 <main+0x2dc>)
    b960:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Error in mqtt_live: %d", err);
    b964:	2303      	movs	r3, #3
    b966:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b96a:	482d      	ldr	r0, [pc, #180]	; (ba20 <main+0x28c>)
    b96c:	f842 3f10 	str.w	r3, [r2, #16]!
    b970:	f022 fd7f 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b974:	46b5      	mov	sp, r6
	LOG_INF("Disconnecting MQTT client");
    b976:	466e      	mov	r6, sp
    b978:	4b3e      	ldr	r3, [pc, #248]	; (ba74 <main+0x2e0>)
    b97a:	4829      	ldr	r0, [pc, #164]	; (ba20 <main+0x28c>)
    b97c:	617b      	str	r3, [r7, #20]
    b97e:	2302      	movs	r3, #2
    b980:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b984:	613b      	str	r3, [r7, #16]
    b986:	f107 0210 	add.w	r2, r7, #16
    b98a:	f022 fd72 	bl	2e472 <z_log_msg_static_create.constprop.0>
	err = mqtt_disconnect(&client);
    b98e:	4831      	ldr	r0, [pc, #196]	; (ba54 <main+0x2c0>)
    b990:	f026 f979 	bl	31c86 <mqtt_disconnect>
	if (err) {
    b994:	2800      	cmp	r0, #0
    b996:	d0b4      	beq.n	b902 <main+0x16e>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    b998:	b088      	sub	sp, #32
    b99a:	466a      	mov	r2, sp
    b99c:	4b36      	ldr	r3, [pc, #216]	; (ba78 <main+0x2e4>)
    b99e:	e7a5      	b.n	b8ec <main+0x158>
		LOG_ERR("Error in fds_init: %d", err);
    b9a0:	466c      	mov	r4, sp
    b9a2:	b088      	sub	sp, #32
    b9a4:	466a      	mov	r2, sp
    b9a6:	4b35      	ldr	r3, [pc, #212]	; (ba7c <main+0x2e8>)
    b9a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b9ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b9b0:	2303      	movs	r3, #3
    b9b2:	481b      	ldr	r0, [pc, #108]	; (ba20 <main+0x28c>)
    b9b4:	f842 3f10 	str.w	r3, [r2, #16]!
    b9b8:	f022 fd5b 	bl	2e472 <z_log_msg_static_create.constprop.0>
    b9bc:	46a5      	mov	sp, r4
		return 0;
    b9be:	e72e      	b.n	b81e <main+0x8a>
		err = mqtt_live(&client);
    b9c0:	4630      	mov	r0, r6
    b9c2:	f026 f9fe 	bl	31dc2 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    b9c6:	b148      	cbz	r0, b9dc <main+0x248>
    b9c8:	f110 0f0b 	cmn.w	r0, #11
    b9cc:	d006      	beq.n	b9dc <main+0x248>
			LOG_ERR("Error in mqtt_live: %d", err);
    b9ce:	466e      	mov	r6, sp
    b9d0:	b088      	sub	sp, #32
    b9d2:	466a      	mov	r2, sp
    b9d4:	4b2a      	ldr	r3, [pc, #168]	; (ba80 <main+0x2ec>)
    b9d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b9da:	e7c3      	b.n	b964 <main+0x1d0>
		if ((fds.revents & POLLIN) == POLLIN) {
    b9dc:	88eb      	ldrh	r3, [r5, #6]
    b9de:	07d9      	lsls	r1, r3, #31
    b9e0:	d508      	bpl.n	b9f4 <main+0x260>
			err = mqtt_input(&client);
    b9e2:	4630      	mov	r0, r6
    b9e4:	f026 fa29 	bl	31e3a <mqtt_input>
			if (err != 0) {
    b9e8:	b120      	cbz	r0, b9f4 <main+0x260>
				LOG_ERR("Error in mqtt_input: %d", err);
    b9ea:	466e      	mov	r6, sp
    b9ec:	b088      	sub	sp, #32
    b9ee:	466a      	mov	r2, sp
    b9f0:	4b24      	ldr	r3, [pc, #144]	; (ba84 <main+0x2f0>)
    b9f2:	e7f0      	b.n	b9d6 <main+0x242>
		if ((fds.revents & POLLERR) == POLLERR) {
    b9f4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    b9f8:	071a      	lsls	r2, r3, #28
    b9fa:	d50b      	bpl.n	ba14 <main+0x280>
			LOG_ERR("POLLERR");
    b9fc:	4b22      	ldr	r3, [pc, #136]	; (ba88 <main+0x2f4>)
			LOG_ERR("POLLNVAL");
    b9fe:	617b      	str	r3, [r7, #20]
    ba00:	2302      	movs	r3, #2
    ba02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba06:	4806      	ldr	r0, [pc, #24]	; (ba20 <main+0x28c>)
    ba08:	613b      	str	r3, [r7, #16]
    ba0a:	f107 0210 	add.w	r2, r7, #16
    ba0e:	f022 fd30 	bl	2e472 <z_log_msg_static_create.constprop.0>
    ba12:	e7b0      	b.n	b976 <main+0x1e2>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    ba14:	069b      	lsls	r3, r3, #26
    ba16:	d592      	bpl.n	b93e <main+0x1aa>
			LOG_ERR("POLLNVAL");
    ba18:	4b1c      	ldr	r3, [pc, #112]	; (ba8c <main+0x2f8>)
    ba1a:	e7f0      	b.n	b9fe <main+0x26a>
    ba1c:	00037c88 	.word	0x00037c88
    ba20:	000364b8 	.word	0x000364b8
    ba24:	00037caa 	.word	0x00037caa
    ba28:	00037ccf 	.word	0x00037ccf
    ba2c:	00037cea 	.word	0x00037cea
    ba30:	00037d78 	.word	0x00037d78
    ba34:	00037d1c 	.word	0x00037d1c
    ba38:	0000b6f1 	.word	0x0000b6f1
    ba3c:	00037d36 	.word	0x00037d36
    ba40:	2000cfc8 	.word	0x2000cfc8
    ba44:	00037d5f 	.word	0x00037d5f
    ba48:	2001103c 	.word	0x2001103c
    ba4c:	0002e479 	.word	0x0002e479
    ba50:	00037d96 	.word	0x00037d96
    ba54:	2000f810 	.word	0x2000f810
    ba58:	00037dbf 	.word	0x00037dbf
    ba5c:	0000b655 	.word	0x0000b655
    ba60:	2000d1f0 	.word	0x2000d1f0
    ba64:	2000f808 	.word	0x2000f808
    ba68:	00037e02 	.word	0x00037e02
    ba6c:	00037de4 	.word	0x00037de4
    ba70:	00037e32 	.word	0x00037e32
    ba74:	00037e86 	.word	0x00037e86
    ba78:	00037ea0 	.word	0x00037ea0
    ba7c:	00037e1c 	.word	0x00037e1c
    ba80:	00037e46 	.word	0x00037e46
    ba84:	00037e5d 	.word	0x00037e5d
    ba88:	00037e75 	.word	0x00037e75
    ba8c:	00037e7d 	.word	0x00037e7d

0000ba90 <scan_connecting_error>:

	LOG_INF("Device found: %s", addr);
}

void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    ba90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Connection to peer failed!");
    ba92:	4b07      	ldr	r3, [pc, #28]	; (bab0 <scan_connecting_error+0x20>)
    ba94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba98:	9305      	str	r3, [sp, #20]
    ba9a:	2302      	movs	r3, #2
    ba9c:	4805      	ldr	r0, [pc, #20]	; (bab4 <scan_connecting_error+0x24>)
    ba9e:	9304      	str	r3, [sp, #16]
    baa0:	aa04      	add	r2, sp, #16
    baa2:	2300      	movs	r3, #0
    baa4:	f022 fcf3 	bl	2e48e <z_log_msg_static_create>
}
    baa8:	b007      	add	sp, #28
    baaa:	f85d fb04 	ldr.w	pc, [sp], #4
    baae:	bf00      	nop
    bab0:	00037ed0 	.word	0x00037ed0
    bab4:	000364b8 	.word	0x000364b8

0000bab8 <discovery_error_found>:
{
    bab8:	b580      	push	{r7, lr}
    baba:	af00      	add	r7, sp, #0
	LOG_ERR("The discovery procedure failed, err %d", err);
    babc:	b088      	sub	sp, #32
    babe:	466a      	mov	r2, sp
    bac0:	4b06      	ldr	r3, [pc, #24]	; (badc <discovery_error_found+0x24>)
    bac2:	4807      	ldr	r0, [pc, #28]	; (bae0 <discovery_error_found+0x28>)
    bac4:	e9c2 3105 	strd	r3, r1, [r2, #20]
    bac8:	2303      	movs	r3, #3
    baca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bace:	f842 3f10 	str.w	r3, [r2, #16]!
    bad2:	2300      	movs	r3, #0
    bad4:	f022 fcdb 	bl	2e48e <z_log_msg_static_create>
}
    bad8:	46bd      	mov	sp, r7
    bada:	bd80      	pop	{r7, pc}
    badc:	00037eeb 	.word	0x00037eeb
    bae0:	000364b8 	.word	0x000364b8

0000bae4 <discovery_service_not_found>:
{
    bae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Thingy orientation service not found!");
    bae6:	4b07      	ldr	r3, [pc, #28]	; (bb04 <discovery_service_not_found+0x20>)
    bae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    baec:	9305      	str	r3, [sp, #20]
    baee:	2302      	movs	r3, #2
    baf0:	4805      	ldr	r0, [pc, #20]	; (bb08 <discovery_service_not_found+0x24>)
    baf2:	9304      	str	r3, [sp, #16]
    baf4:	aa04      	add	r2, sp, #16
    baf6:	2300      	movs	r3, #0
    baf8:	f022 fcc9 	bl	2e48e <z_log_msg_static_create>
}
    bafc:	b007      	add	sp, #28
    bafe:	f85d fb04 	ldr.w	pc, [sp], #4
    bb02:	bf00      	nop
    bb04:	00037f12 	.word	0x00037f12
    bb08:	000364b8 	.word	0x000364b8

0000bb0c <on_transmitted>:
{
    bb0c:	b590      	push	{r4, r7, lr}
    bb0e:	b087      	sub	sp, #28
	if (!data) {
    bb10:	460b      	mov	r3, r1
{
    bb12:	af00      	add	r7, sp, #0
	if (!data) {
    bb14:	b969      	cbnz	r1, bb32 <on_transmitted+0x26>
		LOG_INF("Unsubscribed from TX notifications");
    bb16:	4a11      	ldr	r2, [pc, #68]	; (bb5c <on_transmitted+0x50>)
    bb18:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bb1c:	617a      	str	r2, [r7, #20]
    bb1e:	2202      	movs	r2, #2
    bb20:	480f      	ldr	r0, [pc, #60]	; (bb60 <on_transmitted+0x54>)
    bb22:	613a      	str	r2, [r7, #16]
    bb24:	f107 0210 	add.w	r2, r7, #16
    bb28:	f022 fcb1 	bl	2e48e <z_log_msg_static_create>
}
    bb2c:	371c      	adds	r7, #28
    bb2e:	46bd      	mov	sp, r7
    bb30:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Transmitted data: %s", (char *)data);
    bb32:	466c      	mov	r4, sp
    bb34:	b088      	sub	sp, #32
    bb36:	466a      	mov	r2, sp
    bb38:	490a      	ldr	r1, [pc, #40]	; (bb64 <on_transmitted+0x58>)
    bb3a:	4809      	ldr	r0, [pc, #36]	; (bb60 <on_transmitted+0x54>)
    bb3c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bb40:	f44f 7300 	mov.w	r3, #512	; 0x200
    bb44:	8393      	strh	r3, [r2, #28]
    bb46:	4b08      	ldr	r3, [pc, #32]	; (bb68 <on_transmitted+0x5c>)
    bb48:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    bb4c:	f842 3f10 	str.w	r3, [r2, #16]!
    bb50:	2300      	movs	r3, #0
    bb52:	f022 fc9c 	bl	2e48e <z_log_msg_static_create>
    bb56:	46a5      	mov	sp, r4
    bb58:	e7e8      	b.n	bb2c <on_transmitted+0x20>
    bb5a:	bf00      	nop
    bb5c:	00037f38 	.word	0x00037f38
    bb60:	000364b8 	.word	0x000364b8
    bb64:	00037f5b 	.word	0x00037f5b
    bb68:	01000003 	.word	0x01000003

0000bb6c <discovery_completed>:
{
    bb6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bb70:	b093      	sub	sp, #76	; 0x4c
    bb72:	af00      	add	r7, sp, #0
    chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_RX);
    bb74:	f107 0208 	add.w	r2, r7, #8
{
    bb78:	4604      	mov	r4, r0
    bb7a:	4616      	mov	r6, r2
    chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_RX);
    bb7c:	4b4f      	ldr	r3, [pc, #316]	; (bcbc <discovery_completed+0x150>)
    bb7e:	f103 0c10 	add.w	ip, r3, #16
    bb82:	4615      	mov	r5, r2
    bb84:	6818      	ldr	r0, [r3, #0]
    bb86:	6859      	ldr	r1, [r3, #4]
    bb88:	3308      	adds	r3, #8
    bb8a:	c503      	stmia	r5!, {r0, r1}
    bb8c:	4563      	cmp	r3, ip
    bb8e:	462a      	mov	r2, r5
    bb90:	d1f7      	bne.n	bb82 <discovery_completed+0x16>
    bb92:	781b      	ldrb	r3, [r3, #0]
    bb94:	4631      	mov	r1, r6
    bb96:	702b      	strb	r3, [r5, #0]
    bb98:	4620      	mov	r0, r4
    bb9a:	f003 ff61 	bl	fa60 <bt_gatt_dm_char_by_uuid>
    if (!chrc) {
    bb9e:	4603      	mov	r3, r0
    bba0:	bb10      	cbnz	r0, bbe8 <discovery_completed+0x7c>
        LOG_ERR("Missing ESP32 RX characteristic");
    bba2:	4a47      	ldr	r2, [pc, #284]	; (bcc0 <discovery_completed+0x154>)
        LOG_ERR("Missing ESP32 TX characteristic");
    bba4:	647a      	str	r2, [r7, #68]	; 0x44
    bba6:	2202      	movs	r2, #2
    bba8:	643a      	str	r2, [r7, #64]	; 0x40
    bbaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bbae:	4845      	ldr	r0, [pc, #276]	; (bcc4 <discovery_completed+0x158>)
    bbb0:	f107 0240 	add.w	r2, r7, #64	; 0x40
    bbb4:	f022 fc6b 	bl	2e48e <z_log_msg_static_create>
    err = bt_gatt_dm_data_release(disc);
    bbb8:	4620      	mov	r0, r4
    bbba:	f023 faf2 	bl	2f1a2 <bt_gatt_dm_data_release>
    if (err) {
    bbbe:	b178      	cbz	r0, bbe0 <discovery_completed+0x74>
        LOG_ERR("Could not release discovery data, err: %d", err);
    bbc0:	466c      	mov	r4, sp
    bbc2:	b088      	sub	sp, #32
    bbc4:	466a      	mov	r2, sp
    bbc6:	4b40      	ldr	r3, [pc, #256]	; (bcc8 <discovery_completed+0x15c>)
    bbc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bbcc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bbd0:	2303      	movs	r3, #3
    bbd2:	483c      	ldr	r0, [pc, #240]	; (bcc4 <discovery_completed+0x158>)
    bbd4:	f842 3f10 	str.w	r3, [r2, #16]!
    bbd8:	2300      	movs	r3, #0
    bbda:	f022 fc58 	bl	2e48e <z_log_msg_static_create>
    bbde:	46a5      	mov	sp, r4
}
    bbe0:	374c      	adds	r7, #76	; 0x4c
    bbe2:	46bd      	mov	sp, r7
    bbe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_TX);
    bbe8:	f107 021c 	add.w	r2, r7, #28
    bbec:	4616      	mov	r6, r2
    param_rx.value_handle = chrc->handle;
    bbee:	8883      	ldrh	r3, [r0, #4]
    bbf0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; bccc <discovery_completed+0x160>
    bbf4:	f8a9 300c 	strh.w	r3, [r9, #12]
    chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_TX);
    bbf8:	4b35      	ldr	r3, [pc, #212]	; (bcd0 <discovery_completed+0x164>)
    bbfa:	f103 0c10 	add.w	ip, r3, #16
    bbfe:	4615      	mov	r5, r2
    bc00:	6818      	ldr	r0, [r3, #0]
    bc02:	6859      	ldr	r1, [r3, #4]
    bc04:	3308      	adds	r3, #8
    bc06:	c503      	stmia	r5!, {r0, r1}
    bc08:	4563      	cmp	r3, ip
    bc0a:	462a      	mov	r2, r5
    bc0c:	d1f7      	bne.n	bbfe <discovery_completed+0x92>
    bc0e:	781b      	ldrb	r3, [r3, #0]
    bc10:	4631      	mov	r1, r6
    bc12:	702b      	strb	r3, [r5, #0]
    bc14:	4620      	mov	r0, r4
    bc16:	f003 ff23 	bl	fa60 <bt_gatt_dm_char_by_uuid>
    if (!chrc) {
    bc1a:	4603      	mov	r3, r0
    bc1c:	b908      	cbnz	r0, bc22 <discovery_completed+0xb6>
        LOG_ERR("Missing ESP32 TX characteristic");
    bc1e:	4a2d      	ldr	r2, [pc, #180]	; (bcd4 <discovery_completed+0x168>)
    bc20:	e7c0      	b.n	bba4 <discovery_completed+0x38>
    param_tx.value_handle = chrc->handle;
    bc22:	8882      	ldrh	r2, [r0, #4]
    bc24:	4e2c      	ldr	r6, [pc, #176]	; (bcd8 <discovery_completed+0x16c>)
    desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    bc26:	f04f 0800 	mov.w	r8, #0
    param_tx.value_handle = chrc->handle;
    bc2a:	81b2      	strh	r2, [r6, #12]
    desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    bc2c:	f642 1202 	movw	r2, #10498	; 0x2902
    bc30:	4601      	mov	r1, r0
    bc32:	80fa      	strh	r2, [r7, #6]
    bc34:	4620      	mov	r0, r4
    bc36:	1d3a      	adds	r2, r7, #4
    bc38:	f887 8004 	strb.w	r8, [r7, #4]
    bc3c:	f023 fa9f 	bl	2f17e <bt_gatt_dm_desc_by_uuid>
    if (!desc) {
    bc40:	4605      	mov	r5, r0
    bc42:	b928      	cbnz	r0, bc50 <discovery_completed+0xe4>
        LOG_ERR("Missing CCC descriptor");
    bc44:	4b25      	ldr	r3, [pc, #148]	; (bcdc <discovery_completed+0x170>)
    bc46:	647b      	str	r3, [r7, #68]	; 0x44
    bc48:	2302      	movs	r3, #2
    bc4a:	643b      	str	r3, [r7, #64]	; 0x40
    bc4c:	4603      	mov	r3, r0
    bc4e:	e7ac      	b.n	bbaa <discovery_completed+0x3e>
    param_rx.ccc_handle = desc->handle;
    bc50:	8883      	ldrh	r3, [r0, #4]
    err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_rx);
    bc52:	4620      	mov	r0, r4
    param_rx.ccc_handle = desc->handle;
    bc54:	f8a9 300e 	strh.w	r3, [r9, #14]
    err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_rx);
    bc58:	f023 fa42 	bl	2f0e0 <bt_gatt_dm_conn_get>
    bc5c:	491b      	ldr	r1, [pc, #108]	; (bccc <discovery_completed+0x160>)
    bc5e:	f00c f83f 	bl	17ce0 <bt_gatt_subscribe>
    if (err) {
    bc62:	b178      	cbz	r0, bc84 <discovery_completed+0x118>
        LOG_ERR("Subscribe RX failed (err %d)", err);
    bc64:	46e9      	mov	r9, sp
    bc66:	b088      	sub	sp, #32
    bc68:	466a      	mov	r2, sp
    bc6a:	4b1d      	ldr	r3, [pc, #116]	; (bce0 <discovery_completed+0x174>)
    bc6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc70:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bc74:	2303      	movs	r3, #3
    bc76:	4813      	ldr	r0, [pc, #76]	; (bcc4 <discovery_completed+0x158>)
    bc78:	f842 3f10 	str.w	r3, [r2, #16]!
    bc7c:	4643      	mov	r3, r8
    bc7e:	f022 fc06 	bl	2e48e <z_log_msg_static_create>
    bc82:	46cd      	mov	sp, r9
    param_tx.ccc_handle = desc->handle;
    bc84:	88ab      	ldrh	r3, [r5, #4]
    err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_tx);
    bc86:	4620      	mov	r0, r4
    param_tx.ccc_handle = desc->handle;
    bc88:	81f3      	strh	r3, [r6, #14]
    err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_tx);
    bc8a:	f023 fa29 	bl	2f0e0 <bt_gatt_dm_conn_get>
    bc8e:	4912      	ldr	r1, [pc, #72]	; (bcd8 <discovery_completed+0x16c>)
    bc90:	f00c f826 	bl	17ce0 <bt_gatt_subscribe>
    if (err) {
    bc94:	2800      	cmp	r0, #0
    bc96:	d08f      	beq.n	bbb8 <discovery_completed+0x4c>
        LOG_ERR("Subscribe TX failed (err %d)", err);
    bc98:	466d      	mov	r5, sp
    bc9a:	b088      	sub	sp, #32
    bc9c:	466a      	mov	r2, sp
    bc9e:	4b11      	ldr	r3, [pc, #68]	; (bce4 <discovery_completed+0x178>)
    bca0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bca4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bca8:	2303      	movs	r3, #3
    bcaa:	4806      	ldr	r0, [pc, #24]	; (bcc4 <discovery_completed+0x158>)
    bcac:	f842 3f10 	str.w	r3, [r2, #16]!
    bcb0:	2300      	movs	r3, #0
    bcb2:	f022 fbec 	bl	2e48e <z_log_msg_static_create>
    bcb6:	46ad      	mov	sp, r5
    bcb8:	e77e      	b.n	bbb8 <discovery_completed+0x4c>
    bcba:	bf00      	nop
    bcbc:	0003673c 	.word	0x0003673c
    bcc0:	00037f70 	.word	0x00037f70
    bcc4:	000364b8 	.word	0x000364b8
    bcc8:	00038001 	.word	0x00038001
    bccc:	2000c7cc 	.word	0x2000c7cc
    bcd0:	0003674d 	.word	0x0003674d
    bcd4:	00037f90 	.word	0x00037f90
    bcd8:	2000c7b0 	.word	0x2000c7b0
    bcdc:	00037fb0 	.word	0x00037fb0
    bce0:	00037fc7 	.word	0x00037fc7
    bce4:	00037fe4 	.word	0x00037fe4

0000bce8 <ble_ready>:

	LOG_INF("Scanning...");
}

static void ble_ready(int err)
{
    bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcea:	b097      	sub	sp, #92	; 0x5c
    bcec:	af00      	add	r7, sp, #0
	LOG_INF("Bluetooth ready");
    bcee:	4b40      	ldr	r3, [pc, #256]	; (bdf0 <ble_ready+0x108>)
    bcf0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bcf4:	657b      	str	r3, [r7, #84]	; 0x54
    bcf6:	2302      	movs	r3, #2
    bcf8:	f107 0250 	add.w	r2, r7, #80	; 0x50
    bcfc:	483d      	ldr	r0, [pc, #244]	; (bdf4 <ble_ready+0x10c>)
    bcfe:	653b      	str	r3, [r7, #80]	; 0x50
    bd00:	2300      	movs	r3, #0
    bd02:	f022 fbc4 	bl	2e48e <z_log_msg_static_create>

	bt_conn_cb_register(&conn_callbacks);
    bd06:	483c      	ldr	r0, [pc, #240]	; (bdf8 <ble_ready+0x110>)
	struct bt_le_scan_param scan_param = {
    bd08:	f107 042c 	add.w	r4, r7, #44	; 0x2c
	bt_conn_cb_register(&conn_callbacks);
    bd0c:	f008 fe2c 	bl	14968 <bt_conn_cb_register>
	struct bt_le_scan_param scan_param = {
    bd10:	2100      	movs	r1, #0
    bd12:	2214      	movs	r2, #20
    bd14:	4620      	mov	r0, r4
    bd16:	f029 f989 	bl	3502c <memset>
    bd1a:	2301      	movs	r3, #1
    bd1c:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    bd20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    bd24:	633b      	str	r3, [r7, #48]	; 0x30
	struct bt_scan_init_param scan_init = {
    bd26:	743b      	strb	r3, [r7, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd28:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
	struct bt_le_scan_param scan_param = {
    bd2c:	637a      	str	r2, [r7, #52]	; 0x34
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd2e:	4a33      	ldr	r2, [pc, #204]	; (bdfc <ble_ready+0x114>)
	bt_scan_init(&scan_init);
    bd30:	f107 000c 	add.w	r0, r7, #12
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd34:	e9c7 2301 	strd	r2, r3, [r7, #4]
	struct bt_scan_init_param scan_init = {
    bd38:	1d3b      	adds	r3, r7, #4
    bd3a:	617b      	str	r3, [r7, #20]
    bd3c:	60fc      	str	r4, [r7, #12]
	bt_scan_init(&scan_init);
    bd3e:	f004 f8f3 	bl	ff28 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    bd42:	482f      	ldr	r0, [pc, #188]	; (be00 <ble_ready+0x118>)
    bd44:	f003 ffb4 	bl	fcb0 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_ESP32_SERVICE);
    bd48:	f107 0218 	add.w	r2, r7, #24
    bd4c:	4615      	mov	r5, r2
    bd4e:	4b2d      	ldr	r3, [pc, #180]	; (be04 <ble_ready+0x11c>)
    bd50:	f103 0610 	add.w	r6, r3, #16
    bd54:	4614      	mov	r4, r2
    bd56:	6818      	ldr	r0, [r3, #0]
    bd58:	6859      	ldr	r1, [r3, #4]
    bd5a:	3308      	adds	r3, #8
    bd5c:	c403      	stmia	r4!, {r0, r1}
    bd5e:	42b3      	cmp	r3, r6
    bd60:	4622      	mov	r2, r4
    bd62:	d1f7      	bne.n	bd54 <ble_ready+0x6c>
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	4629      	mov	r1, r5
    bd68:	7023      	strb	r3, [r4, #0]
    bd6a:	2003      	movs	r0, #3
    bd6c:	f003 ffb0 	bl	fcd0 <bt_scan_filter_add>
	if (err) {
    bd70:	4604      	mov	r4, r0
    bd72:	b170      	cbz	r0, bd92 <ble_ready+0xaa>
		LOG_ERR("Scanning filters cannot be set");
    bd74:	4b24      	ldr	r3, [pc, #144]	; (be08 <ble_ready+0x120>)
    bd76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd7a:	657b      	str	r3, [r7, #84]	; 0x54
    bd7c:	2302      	movs	r3, #2
    bd7e:	653b      	str	r3, [r7, #80]	; 0x50
    bd80:	2300      	movs	r3, #0
    bd82:	f107 0250 	add.w	r2, r7, #80	; 0x50
	LOG_INF("Scanning...");
    bd86:	481b      	ldr	r0, [pc, #108]	; (bdf4 <ble_ready+0x10c>)
    bd88:	f022 fb81 	bl	2e48e <z_log_msg_static_create>
	scan_start();
}
    bd8c:	375c      	adds	r7, #92	; 0x5c
    bd8e:	46bd      	mov	sp, r7
    bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    bd92:	4601      	mov	r1, r0
    bd94:	2004      	movs	r0, #4
    bd96:	f003 fffd 	bl	fd94 <bt_scan_filter_enable>
	if (err) {
    bd9a:	b158      	cbz	r0, bdb4 <ble_ready+0xcc>
		LOG_ERR("Filters cannot be turned on");
    bd9c:	4b1b      	ldr	r3, [pc, #108]	; (be0c <ble_ready+0x124>)
    bd9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bda2:	657b      	str	r3, [r7, #84]	; 0x54
    bda4:	2302      	movs	r3, #2
    bda6:	4813      	ldr	r0, [pc, #76]	; (bdf4 <ble_ready+0x10c>)
    bda8:	653b      	str	r3, [r7, #80]	; 0x50
    bdaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
    bdae:	4623      	mov	r3, r4
    bdb0:	f022 fb6d 	bl	2e48e <z_log_msg_static_create>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    bdb4:	2001      	movs	r0, #1
    bdb6:	f004 f8e9 	bl	ff8c <bt_scan_start>
	if (err) {
    bdba:	b178      	cbz	r0, bddc <ble_ready+0xf4>
		LOG_ERR("Scanning failed to start, err %d", err);
    bdbc:	466c      	mov	r4, sp
    bdbe:	b088      	sub	sp, #32
    bdc0:	466a      	mov	r2, sp
    bdc2:	4b13      	ldr	r3, [pc, #76]	; (be10 <ble_ready+0x128>)
    bdc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bdc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bdcc:	2303      	movs	r3, #3
    bdce:	4809      	ldr	r0, [pc, #36]	; (bdf4 <ble_ready+0x10c>)
    bdd0:	f842 3f10 	str.w	r3, [r2, #16]!
    bdd4:	2300      	movs	r3, #0
    bdd6:	f022 fb5a 	bl	2e48e <z_log_msg_static_create>
    bdda:	46a5      	mov	sp, r4
	LOG_INF("Scanning...");
    bddc:	4b0d      	ldr	r3, [pc, #52]	; (be14 <ble_ready+0x12c>)
    bdde:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bde2:	657b      	str	r3, [r7, #84]	; 0x54
    bde4:	2302      	movs	r3, #2
    bde6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    bdea:	653b      	str	r3, [r7, #80]	; 0x50
    bdec:	2300      	movs	r3, #0
    bdee:	e7ca      	b.n	bd86 <ble_ready+0x9e>
    bdf0:	0003802b 	.word	0x0003802b
    bdf4:	000364b8 	.word	0x000364b8
    bdf8:	2000c7f0 	.word	0x2000c7f0
    bdfc:	00280018 	.word	0x00280018
    be00:	2000c7e8 	.word	0x2000c7e8
    be04:	0003675e 	.word	0x0003675e
    be08:	0003803b 	.word	0x0003803b
    be0c:	0003805a 	.word	0x0003805a
    be10:	00038076 	.word	0x00038076
    be14:	00038097 	.word	0x00038097

0000be18 <on_received.part.0>:
static uint8_t on_received(struct bt_conn *conn,
    be18:	b580      	push	{r7, lr}
    be1a:	af00      	add	r7, sp, #0
		LOG_HEXDUMP_INF(data, length, "Received data:");
    be1c:	b088      	sub	sp, #32
static uint8_t on_received(struct bt_conn *conn,
    be1e:	4603      	mov	r3, r0
		LOG_HEXDUMP_INF(data, length, "Received data:");
    be20:	466a      	mov	r2, sp
    be22:	4809      	ldr	r0, [pc, #36]	; (be48 <on_received.part.0+0x30>)
    be24:	0509      	lsls	r1, r1, #20
    be26:	6150      	str	r0, [r2, #20]
    be28:	4808      	ldr	r0, [pc, #32]	; (be4c <on_received.part.0+0x34>)
    be2a:	f441 51e6 	orr.w	r1, r1, #7360	; 0x1cc0
    be2e:	6190      	str	r0, [r2, #24]
    be30:	f44f 7000 	mov.w	r0, #512	; 0x200
    be34:	8390      	strh	r0, [r2, #28]
    be36:	4806      	ldr	r0, [pc, #24]	; (be50 <on_received.part.0+0x38>)
    be38:	f842 0f10 	str.w	r0, [r2, #16]!
    be3c:	4805      	ldr	r0, [pc, #20]	; (be54 <on_received.part.0+0x3c>)
    be3e:	f022 fb26 	bl	2e48e <z_log_msg_static_create>
}
    be42:	46bd      	mov	sp, r7
    be44:	bd80      	pop	{r7, pc}
    be46:	bf00      	nop
    be48:	0003cc0c 	.word	0x0003cc0c
    be4c:	000380a3 	.word	0x000380a3
    be50:	01000003 	.word	0x01000003
    be54:	000364b8 	.word	0x000364b8

0000be58 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    be58:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    be5a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    be5c:	b08a      	sub	sp, #40	; 0x28
    be5e:	4604      	mov	r4, r0
    be60:	460e      	mov	r6, r1
    be62:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    be64:	2b03      	cmp	r3, #3
    be66:	d820      	bhi.n	beaa <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    be68:	e8df f003 	tbb	[pc, r3]
    be6c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    be70:	4911      	ldr	r1, [pc, #68]	; (beb8 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    be72:	4628      	mov	r0, r5
    be74:	f029 fa78 	bl	35368 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    be78:	9505      	str	r5, [sp, #20]
    be7a:	7863      	ldrb	r3, [r4, #1]
    be7c:	211e      	movs	r1, #30
    be7e:	9304      	str	r3, [sp, #16]
    be80:	78a3      	ldrb	r3, [r4, #2]
    be82:	4630      	mov	r0, r6
    be84:	9303      	str	r3, [sp, #12]
    be86:	78e3      	ldrb	r3, [r4, #3]
    be88:	4a0c      	ldr	r2, [pc, #48]	; (bebc <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    be8a:	9302      	str	r3, [sp, #8]
    be8c:	7923      	ldrb	r3, [r4, #4]
    be8e:	9301      	str	r3, [sp, #4]
    be90:	7963      	ldrb	r3, [r4, #5]
    be92:	9300      	str	r3, [sp, #0]
    be94:	79a3      	ldrb	r3, [r4, #6]
    be96:	f022 fb8d 	bl	2e5b4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    be9a:	b00a      	add	sp, #40	; 0x28
    be9c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    be9e:	4908      	ldr	r1, [pc, #32]	; (bec0 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    bea0:	e7e7      	b.n	be72 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    bea2:	4908      	ldr	r1, [pc, #32]	; (bec4 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    bea4:	e7e5      	b.n	be72 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    bea6:	4908      	ldr	r1, [pc, #32]	; (bec8 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    bea8:	e7e3      	b.n	be72 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    beaa:	210a      	movs	r1, #10
    beac:	4628      	mov	r0, r5
    beae:	4a07      	ldr	r2, [pc, #28]	; (becc <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    beb0:	f022 fb80 	bl	2e5b4 <snprintk>
		break;
    beb4:	e7e0      	b.n	be78 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    beb6:	bf00      	nop
    beb8:	000380b2 	.word	0x000380b2
    bebc:	000380d4 	.word	0x000380d4
    bec0:	000380b9 	.word	0x000380b9
    bec4:	000380c0 	.word	0x000380c0
    bec8:	000380ca 	.word	0x000380ca
    becc:	0003ad5b 	.word	0x0003ad5b

0000bed0 <scan_filter_match>:
{
    bed0:	b580      	push	{r7, lr}
    bed2:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    bed4:	6803      	ldr	r3, [r0, #0]
{
    bed6:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    bed8:	4639      	mov	r1, r7
    beda:	6818      	ldr	r0, [r3, #0]
    bedc:	f7ff ffbc 	bl	be58 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Device found: %s", addr);
    bee0:	b088      	sub	sp, #32
    bee2:	466a      	mov	r2, sp
    bee4:	4b08      	ldr	r3, [pc, #32]	; (bf08 <scan_filter_match+0x38>)
    bee6:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    beea:	e9c2 3705 	strd	r3, r7, [r2, #20]
    beee:	f44f 7300 	mov.w	r3, #512	; 0x200
    bef2:	8393      	strh	r3, [r2, #28]
    bef4:	4b05      	ldr	r3, [pc, #20]	; (bf0c <scan_filter_match+0x3c>)
    bef6:	4806      	ldr	r0, [pc, #24]	; (bf10 <scan_filter_match+0x40>)
    bef8:	f842 3f10 	str.w	r3, [r2, #16]!
    befc:	2300      	movs	r3, #0
    befe:	f022 fac6 	bl	2e48e <z_log_msg_static_create>
}
    bf02:	3720      	adds	r7, #32
    bf04:	46bd      	mov	sp, r7
    bf06:	bd80      	pop	{r7, pc}
    bf08:	000380f7 	.word	0x000380f7
    bf0c:	01000003 	.word	0x01000003
    bf10:	000364b8 	.word	0x000364b8

0000bf14 <connected>:
{
    bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf18:	460c      	mov	r4, r1
    bf1a:	b08e      	sub	sp, #56	; 0x38
    bf1c:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bf1e:	f107 0618 	add.w	r6, r7, #24
{
    bf22:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bf24:	f024 f837 	bl	2ff96 <bt_conn_get_dst>
    bf28:	4631      	mov	r1, r6
    bf2a:	f7ff ff95 	bl	be58 <bt_addr_le_to_str.constprop.0.isra.0>
	if (conn_err) {
    bf2e:	b1bc      	cbz	r4, bf60 <connected+0x4c>
		LOG_ERR("Failed to connect to %s (%u)", addr, conn_err);
    bf30:	466d      	mov	r5, sp
    bf32:	b08a      	sub	sp, #40	; 0x28
    bf34:	466a      	mov	r2, sp
    bf36:	4b28      	ldr	r3, [pc, #160]	; (bfd8 <connected+0xc4>)
    bf38:	61d4      	str	r4, [r2, #28]
    bf3a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    bf3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    bf42:	8413      	strh	r3, [r2, #32]
    bf44:	4b25      	ldr	r3, [pc, #148]	; (bfdc <connected+0xc8>)
    bf46:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    bf4a:	f842 3f10 	str.w	r3, [r2, #16]!
    bf4e:	4824      	ldr	r0, [pc, #144]	; (bfe0 <connected+0xcc>)
    bf50:	2300      	movs	r3, #0
    bf52:	f022 fa9c 	bl	2e48e <z_log_msg_static_create>
    bf56:	46ad      	mov	sp, r5
}
    bf58:	3738      	adds	r7, #56	; 0x38
    bf5a:	46bd      	mov	sp, r7
    bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Connected: %s", addr);
    bf60:	46e8      	mov	r8, sp
    bf62:	b088      	sub	sp, #32
    bf64:	466a      	mov	r2, sp
    bf66:	4b1f      	ldr	r3, [pc, #124]	; (bfe4 <connected+0xd0>)
    bf68:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    bf6c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    bf70:	f44f 7300 	mov.w	r3, #512	; 0x200
    bf74:	8393      	strh	r3, [r2, #28]
    bf76:	4b1c      	ldr	r3, [pc, #112]	; (bfe8 <connected+0xd4>)
    bf78:	4819      	ldr	r0, [pc, #100]	; (bfe0 <connected+0xcc>)
    bf7a:	f842 3f10 	str.w	r3, [r2, #16]!
    bf7e:	4623      	mov	r3, r4
    bf80:	f022 fa85 	bl	2e48e <z_log_msg_static_create>
	err = bt_gatt_dm_start(conn, BT_UUID_ESP32_SERVICE, &discovery_cb, NULL);
    bf84:	1d3a      	adds	r2, r7, #4
    bf86:	46c5      	mov	sp, r8
    bf88:	4616      	mov	r6, r2
    bf8a:	4b18      	ldr	r3, [pc, #96]	; (bfec <connected+0xd8>)
    bf8c:	f103 0c10 	add.w	ip, r3, #16
    bf90:	4614      	mov	r4, r2
    bf92:	6818      	ldr	r0, [r3, #0]
    bf94:	6859      	ldr	r1, [r3, #4]
    bf96:	3308      	adds	r3, #8
    bf98:	c403      	stmia	r4!, {r0, r1}
    bf9a:	4563      	cmp	r3, ip
    bf9c:	4622      	mov	r2, r4
    bf9e:	d1f7      	bne.n	bf90 <connected+0x7c>
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	4631      	mov	r1, r6
    bfa4:	7023      	strb	r3, [r4, #0]
    bfa6:	4628      	mov	r0, r5
    bfa8:	2300      	movs	r3, #0
    bfaa:	4a11      	ldr	r2, [pc, #68]	; (bff0 <connected+0xdc>)
    bfac:	f003 fd80 	bl	fab0 <bt_gatt_dm_start>
	if (err) {
    bfb0:	2800      	cmp	r0, #0
    bfb2:	d0d1      	beq.n	bf58 <connected+0x44>
		LOG_ERR("Could not start service discovery, err %d", err);
    bfb4:	466c      	mov	r4, sp
    bfb6:	b088      	sub	sp, #32
    bfb8:	466a      	mov	r2, sp
    bfba:	4b0e      	ldr	r3, [pc, #56]	; (bff4 <connected+0xe0>)
    bfbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bfc0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bfc4:	2303      	movs	r3, #3
    bfc6:	4806      	ldr	r0, [pc, #24]	; (bfe0 <connected+0xcc>)
    bfc8:	f842 3f10 	str.w	r3, [r2, #16]!
    bfcc:	2300      	movs	r3, #0
    bfce:	f022 fa5e 	bl	2e48e <z_log_msg_static_create>
    bfd2:	46a5      	mov	sp, r4
    bfd4:	e7c0      	b.n	bf58 <connected+0x44>
    bfd6:	bf00      	nop
    bfd8:	00038108 	.word	0x00038108
    bfdc:	01000004 	.word	0x01000004
    bfe0:	000364b8 	.word	0x000364b8
    bfe4:	00038125 	.word	0x00038125
    bfe8:	01000003 	.word	0x01000003
    bfec:	0003675e 	.word	0x0003675e
    bff0:	2000c804 	.word	0x2000c804
    bff4:	00038133 	.word	0x00038133

0000bff8 <ble_init>:

void ble_init(void)
{
    bff8:	b590      	push	{r4, r7, lr}
    bffa:	b087      	sub	sp, #28
	int err;

	LOG_INF("Initializing Bluetooth..");
    bffc:	466c      	mov	r4, sp
{
    bffe:	af00      	add	r7, sp, #0
	LOG_INF("Initializing Bluetooth..");
    c000:	4b10      	ldr	r3, [pc, #64]	; (c044 <ble_init+0x4c>)
    c002:	4811      	ldr	r0, [pc, #68]	; (c048 <ble_init+0x50>)
    c004:	617b      	str	r3, [r7, #20]
    c006:	2302      	movs	r3, #2
    c008:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c00c:	613b      	str	r3, [r7, #16]
    c00e:	f107 0210 	add.w	r2, r7, #16
    c012:	2300      	movs	r3, #0
    c014:	f022 fa3b 	bl	2e48e <z_log_msg_static_create>
	err = bt_enable(ble_ready);
    c018:	480c      	ldr	r0, [pc, #48]	; (c04c <ble_init+0x54>)
    c01a:	f007 f983 	bl	13324 <bt_enable>
	if (err) {
    c01e:	b170      	cbz	r0, c03e <ble_init+0x46>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    c020:	b088      	sub	sp, #32
    c022:	466a      	mov	r2, sp
    c024:	4b0a      	ldr	r3, [pc, #40]	; (c050 <ble_init+0x58>)
    c026:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c02a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c02e:	2303      	movs	r3, #3
    c030:	4805      	ldr	r0, [pc, #20]	; (c048 <ble_init+0x50>)
    c032:	f842 3f10 	str.w	r3, [r2, #16]!
    c036:	2300      	movs	r3, #0
    c038:	f022 fa29 	bl	2e48e <z_log_msg_static_create>
    c03c:	46a5      	mov	sp, r4
		return;
	}
}
    c03e:	371c      	adds	r7, #28
    c040:	46bd      	mov	sp, r7
    c042:	bd90      	pop	{r4, r7, pc}
    c044:	0003815d 	.word	0x0003815d
    c048:	000364b8 	.word	0x000364b8
    c04c:	0000bce9 	.word	0x0000bce9
    c050:	00038176 	.word	0x00038176

0000c054 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c058:	b091      	sub	sp, #68	; 0x44
    c05a:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c05c:	f002 0304 	and.w	r3, r2, #4
    c060:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c062:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c066:	3301      	adds	r3, #1
    c068:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c06a:	0783      	lsls	r3, r0, #30
{
    c06c:	4605      	mov	r5, r0
    c06e:	460e      	mov	r6, r1
    c070:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    c074:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c076:	f040 81fe 	bne.w	c476 <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c07a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c07c:	b130      	cbz	r0, c08c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c07e:	2907      	cmp	r1, #7
    c080:	d809      	bhi.n	c096 <cbvprintf_package+0x42>
		return -ENOSPC;
    c082:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c086:	b011      	add	sp, #68	; 0x44
    c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c08c:	f001 0607 	and.w	r6, r1, #7
    c090:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c092:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c096:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    c09a:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    c09e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c0a0:	4647      	mov	r7, r8
	s = fmt--;
    c0a2:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c0a4:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    c0a8:	4643      	mov	r3, r8
	size = sizeof(char *);
    c0aa:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c0ac:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    c0b0:	b10d      	cbz	r5, c0b6 <cbvprintf_package+0x62>
				*(const char **)buf = s;
    c0b2:	9800      	ldr	r0, [sp, #0]
    c0b4:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c0b6:	9804      	ldr	r0, [sp, #16]
    c0b8:	2800      	cmp	r0, #0
    c0ba:	f300 80e1 	bgt.w	c280 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c0be:	489c      	ldr	r0, [pc, #624]	; (c330 <cbvprintf_package+0x2dc>)
    c0c0:	f8dd c000 	ldr.w	ip, [sp]
    c0c4:	4584      	cmp	ip, r0
    c0c6:	d303      	bcc.n	c0d0 <cbvprintf_package+0x7c>
    c0c8:	489a      	ldr	r0, [pc, #616]	; (c334 <cbvprintf_package+0x2e0>)
    c0ca:	4584      	cmp	ip, r0
    c0cc:	f0c0 80d8 	bcc.w	c280 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c0d0:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c0d4:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c0d8:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c0dc:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c0e0:	f000 80e9 	beq.w	c2b6 <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c0e4:	f04f 0c00 	mov.w	ip, #0
    c0e8:	e0d3      	b.n	c292 <cbvprintf_package+0x23e>
			switch (*fmt) {
    c0ea:	287a      	cmp	r0, #122	; 0x7a
    c0ec:	d864      	bhi.n	c1b8 <cbvprintf_package+0x164>
    c0ee:	284b      	cmp	r0, #75	; 0x4b
    c0f0:	d80f      	bhi.n	c112 <cbvprintf_package+0xbe>
    c0f2:	2847      	cmp	r0, #71	; 0x47
    c0f4:	d860      	bhi.n	c1b8 <cbvprintf_package+0x164>
    c0f6:	2829      	cmp	r0, #41	; 0x29
    c0f8:	d82f      	bhi.n	c15a <cbvprintf_package+0x106>
    c0fa:	2825      	cmp	r0, #37	; 0x25
    c0fc:	d05b      	beq.n	c1b6 <cbvprintf_package+0x162>
    c0fe:	d85b      	bhi.n	c1b8 <cbvprintf_package+0x164>
    c100:	2820      	cmp	r0, #32
    c102:	d07f      	beq.n	c204 <cbvprintf_package+0x1b0>
    c104:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    c108:	f1d9 0300 	rsbs	r3, r9, #0
    c10c:	eb43 0309 	adc.w	r3, r3, r9
    c110:	e078      	b.n	c204 <cbvprintf_package+0x1b0>
    c112:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    c116:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    c11a:	d84d      	bhi.n	c1b8 <cbvprintf_package+0x164>
    c11c:	e8df f00e 	tbb	[pc, lr]
    c120:	4c4c4c72 	.word	0x4c4c4c72
    c124:	4c4c4c4c 	.word	0x4c4c4c4c
    c128:	4c4c4c4c 	.word	0x4c4c4c4c
    c12c:	4c4c4c4e 	.word	0x4c4c4c4e
    c130:	4c4c4c4c 	.word	0x4c4c4c4c
    c134:	4e4c5c4c 	.word	0x4e4c5c4c
    c138:	5c5c5c4e 	.word	0x5c5c5c4e
    c13c:	4c6f4e72 	.word	0x4c6f4e72
    c140:	4e184c72 	.word	0x4e184c72
    c144:	814c4c18 	.word	0x814c4c18
    c148:	4c4c4e7e 	.word	0x4c4c4e7e
    c14c:	4c4e      	.short	0x4c4e
    c14e:	7e          	.byte	0x7e
    c14f:	00          	.byte	0x00
    c150:	2000      	movs	r0, #0
    c152:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    c154:	f04f 0b04 	mov.w	fp, #4
    c158:	e03c      	b.n	c1d4 <cbvprintf_package+0x180>
			switch (*fmt) {
    c15a:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    c15e:	2001      	movs	r0, #1
    c160:	fa5f fe8e 	uxtb.w	lr, lr
    c164:	fa00 fe0e 	lsl.w	lr, r0, lr
    c168:	f64f 70da 	movw	r0, #65498	; 0xffda
    c16c:	ea1e 0f00 	tst.w	lr, r0
    c170:	d148      	bne.n	c204 <cbvprintf_package+0x1b0>
    c172:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    c176:	d12f      	bne.n	c1d8 <cbvprintf_package+0x184>
    c178:	f01e 0301 	ands.w	r3, lr, #1
    c17c:	d042      	beq.n	c204 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    c17e:	3c01      	subs	r4, #1
    c180:	445c      	add	r4, fp
    c182:	f1cb 0e00 	rsb	lr, fp, #0
    c186:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    c18a:	2d00      	cmp	r5, #0
    c18c:	d05e      	beq.n	c24c <cbvprintf_package+0x1f8>
    c18e:	ebaa 0e05 	sub.w	lr, sl, r5
    c192:	44a6      	add	lr, r4
    c194:	4576      	cmp	r6, lr
    c196:	f4ff af74 	bcc.w	c082 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    c19a:	2800      	cmp	r0, #0
    c19c:	d168      	bne.n	c270 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c19e:	f1ba 0f04 	cmp.w	sl, #4
    c1a2:	d143      	bne.n	c22c <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    c1a4:	46e1      	mov	r9, ip
    c1a6:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    c1aa:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    c1ac:	46cc      	mov	ip, r9
    c1ae:	f04f 0a04 	mov.w	sl, #4
    c1b2:	3404      	adds	r4, #4
    c1b4:	e026      	b.n	c204 <cbvprintf_package+0x1b0>
				arg_idx--;
    c1b6:	3a01      	subs	r2, #1
				parsing = false;
    c1b8:	2300      	movs	r3, #0
				continue;
    c1ba:	e023      	b.n	c204 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    c1bc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    c1c0:	2b6c      	cmp	r3, #108	; 0x6c
    c1c2:	d130      	bne.n	c226 <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    c1c4:	2000      	movs	r0, #0
    c1c6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    c1ca:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    c1cc:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    c1ce:	d1c1      	bne.n	c154 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    c1d0:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    c1d4:	46da      	mov	sl, fp
    c1d6:	e7d2      	b.n	c17e <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    c1d8:	f10c 0907 	add.w	r9, ip, #7
    c1dc:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    c1e0:	3407      	adds	r4, #7
    c1e2:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    c1e6:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    c1ea:	b135      	cbz	r5, c1fa <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    c1ec:	9805      	ldr	r0, [sp, #20]
    c1ee:	4420      	add	r0, r4
    c1f0:	42b0      	cmp	r0, r6
    c1f2:	f63f af46 	bhi.w	c082 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    c1f6:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    c1fa:	2300      	movs	r3, #0
				buf += size;
    c1fc:	3408      	adds	r4, #8
			switch (*fmt) {
    c1fe:	f04f 0b08 	mov.w	fp, #8
    c202:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    c204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c208:	2800      	cmp	r0, #0
    c20a:	f000 80bc 	beq.w	c386 <cbvprintf_package+0x332>
			if (!parsing) {
    c20e:	2b00      	cmp	r3, #0
    c210:	f47f af6b 	bne.w	c0ea <cbvprintf_package+0x96>
				if (*fmt == '%') {
    c214:	2825      	cmp	r0, #37	; 0x25
    c216:	d1f5      	bne.n	c204 <cbvprintf_package+0x1b0>
					parsing = true;
    c218:	2301      	movs	r3, #1
					arg_idx++;
    c21a:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    c21c:	f04f 0b04 	mov.w	fp, #4
    c220:	e7ef      	b.n	c202 <cbvprintf_package+0x1ae>
			switch (*fmt) {
    c222:	4618      	mov	r0, r3
    c224:	e795      	b.n	c152 <cbvprintf_package+0xfe>
    c226:	2000      	movs	r0, #0
				parsing = false;
    c228:	4603      	mov	r3, r0
    c22a:	e7a8      	b.n	c17e <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    c22c:	f1ba 0f08 	cmp.w	sl, #8
    c230:	f040 809b 	bne.w	c36a <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c234:	f10c 0907 	add.w	r9, ip, #7
    c238:	f029 0c07 	bic.w	ip, r9, #7
    c23c:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    c240:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    c244:	f04f 0a08 	mov.w	sl, #8
    c248:	3408      	adds	r4, #8
    c24a:	e7db      	b.n	c204 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    c24c:	b980      	cbnz	r0, c270 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c24e:	f1ba 0f04 	cmp.w	sl, #4
    c252:	d102      	bne.n	c25a <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    c254:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    c258:	e7a8      	b.n	c1ac <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    c25a:	f1ba 0f08 	cmp.w	sl, #8
    c25e:	f040 8084 	bne.w	c36a <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c262:	f10c 0907 	add.w	r9, ip, #7
    c266:	f029 0907 	bic.w	r9, r9, #7
    c26a:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    c26e:	e7e9      	b.n	c244 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    c270:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c272:	9804      	ldr	r0, [sp, #16]
    c274:	3801      	subs	r0, #1
    c276:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    c278:	f859 0b04 	ldr.w	r0, [r9], #4
    c27c:	9000      	str	r0, [sp, #0]
    c27e:	e717      	b.n	c0b0 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    c280:	9802      	ldr	r0, [sp, #8]
    c282:	0780      	lsls	r0, r0, #30
    c284:	d548      	bpl.n	c318 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c286:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c28a:	eba4 0e05 	sub.w	lr, r4, r5
    c28e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c292:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    c296:	d31d      	bcc.n	c2d4 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    c298:	4927      	ldr	r1, [pc, #156]	; (c338 <cbvprintf_package+0x2e4>)
    c29a:	f240 237b 	movw	r3, #635	; 0x27b
    c29e:	4a27      	ldr	r2, [pc, #156]	; (c33c <cbvprintf_package+0x2e8>)
    c2a0:	4827      	ldr	r0, [pc, #156]	; (c340 <cbvprintf_package+0x2ec>)
    c2a2:	f022 fb57 	bl	2e954 <assert_print>
    c2a6:	4827      	ldr	r0, [pc, #156]	; (c344 <cbvprintf_package+0x2f0>)
    c2a8:	f022 fb54 	bl	2e954 <assert_print>
    c2ac:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    c2b0:	4822      	ldr	r0, [pc, #136]	; (c33c <cbvprintf_package+0x2e8>)
    c2b2:	f022 fb48 	bl	2e946 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c2b6:	2f0f      	cmp	r7, #15
    c2b8:	d80e      	bhi.n	c2d8 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    c2ba:	2d00      	cmp	r5, #0
    c2bc:	d046      	beq.n	c34c <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c2be:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    c2c2:	44ec      	add	ip, sp
    c2c4:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c2c8:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    c2cc:	9803      	ldr	r0, [sp, #12]
    c2ce:	3001      	adds	r0, #1
    c2d0:	9003      	str	r0, [sp, #12]
    c2d2:	e020      	b.n	c316 <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c2d4:	2f0f      	cmp	r7, #15
    c2d6:	d90c      	bls.n	c2f2 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    c2d8:	4917      	ldr	r1, [pc, #92]	; (c338 <cbvprintf_package+0x2e4>)
    c2da:	f44f 7320 	mov.w	r3, #640	; 0x280
    c2de:	4a17      	ldr	r2, [pc, #92]	; (c33c <cbvprintf_package+0x2e8>)
    c2e0:	4817      	ldr	r0, [pc, #92]	; (c340 <cbvprintf_package+0x2ec>)
    c2e2:	f022 fb37 	bl	2e954 <assert_print>
    c2e6:	4818      	ldr	r0, [pc, #96]	; (c348 <cbvprintf_package+0x2f4>)
    c2e8:	f022 fb34 	bl	2e954 <assert_print>
    c2ec:	f44f 7120 	mov.w	r1, #640	; 0x280
    c2f0:	e7de      	b.n	c2b0 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    c2f2:	b1bd      	cbz	r5, c324 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c2f4:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    c2f8:	44ee      	add	lr, sp
    c2fa:	b2c0      	uxtb	r0, r0
    c2fc:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c300:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    c304:	f1bc 0f00 	cmp.w	ip, #0
    c308:	d0e0      	beq.n	c2cc <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    c30a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c30e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    c312:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    c316:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    c318:	f1c5 0008 	rsb	r0, r5, #8
    c31c:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    c31e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    c320:	9005      	str	r0, [sp, #20]
    c322:	e76f      	b.n	c204 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    c324:	f1bc 0f00 	cmp.w	ip, #0
    c328:	d010      	beq.n	c34c <cbvprintf_package+0x2f8>
					len += 1;
    c32a:	3601      	adds	r6, #1
    c32c:	e7f3      	b.n	c316 <cbvprintf_package+0x2c2>
    c32e:	bf00      	nop
    c330:	00035f8c 	.word	0x00035f8c
    c334:	000412f0 	.word	0x000412f0
    c338:	0003c13d 	.word	0x0003c13d
    c33c:	00038195 	.word	0x00038195
    c340:	000381c3 	.word	0x000381c3
    c344:	000381e0 	.word	0x000381e0
    c348:	00038201 	.word	0x00038201
				} else if (rws_pos_en) {
    c34c:	9801      	ldr	r0, [sp, #4]
					len += 2;
    c34e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    c350:	2800      	cmp	r0, #0
    c352:	d1e0      	bne.n	c316 <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    c354:	9800      	ldr	r0, [sp, #0]
    c356:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c35a:	9205      	str	r2, [sp, #20]
    c35c:	f7fc ffdd 	bl	931a <strlen>
    c360:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    c364:	9a05      	ldr	r2, [sp, #20]
    c366:	4406      	add	r6, r0
    c368:	e7d5      	b.n	c316 <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    c36a:	f240 23c5 	movw	r3, #709	; 0x2c5
    c36e:	4a43      	ldr	r2, [pc, #268]	; (c47c <cbvprintf_package+0x428>)
    c370:	4943      	ldr	r1, [pc, #268]	; (c480 <cbvprintf_package+0x42c>)
    c372:	4844      	ldr	r0, [pc, #272]	; (c484 <cbvprintf_package+0x430>)
    c374:	f022 faee 	bl	2e954 <assert_print>
    c378:	4651      	mov	r1, sl
    c37a:	4843      	ldr	r0, [pc, #268]	; (c488 <cbvprintf_package+0x434>)
    c37c:	f022 faea 	bl	2e954 <assert_print>
    c380:	f240 21c5 	movw	r1, #709	; 0x2c5
    c384:	e794      	b.n	c2b0 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    c386:	1b63      	subs	r3, r4, r5
    c388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c38c:	d30c      	bcc.n	c3a8 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    c38e:	493c      	ldr	r1, [pc, #240]	; (c480 <cbvprintf_package+0x42c>)
    c390:	f240 23d1 	movw	r3, #721	; 0x2d1
    c394:	4a39      	ldr	r2, [pc, #228]	; (c47c <cbvprintf_package+0x428>)
    c396:	483b      	ldr	r0, [pc, #236]	; (c484 <cbvprintf_package+0x430>)
    c398:	f022 fadc 	bl	2e954 <assert_print>
    c39c:	483b      	ldr	r0, [pc, #236]	; (c48c <cbvprintf_package+0x438>)
    c39e:	f022 fad9 	bl	2e954 <assert_print>
    c3a2:	f240 21d1 	movw	r1, #721	; 0x2d1
    c3a6:	e783      	b.n	c2b0 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    c3a8:	b91d      	cbnz	r5, c3b2 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    c3aa:	f1a6 0408 	sub.w	r4, r6, #8
    c3ae:	18e0      	adds	r0, r4, r3
    c3b0:	e669      	b.n	c086 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    c3b2:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c3b4:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    c3b6:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c3b8:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c3ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    c3be:	b1c2      	cbz	r2, c3f2 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c3c0:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    c3c2:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    c3c6:	f1b8 0f00 	cmp.w	r8, #0
    c3ca:	d005      	beq.n	c3d8 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    c3cc:	2200      	movs	r2, #0
    c3ce:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    c3d0:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    c3d4:	4297      	cmp	r7, r2
    c3d6:	d10e      	bne.n	c3f6 <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    c3d8:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    c3dc:	f1c5 0301 	rsb	r3, r5, #1
    c3e0:	f10d 0920 	add.w	r9, sp, #32
    c3e4:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    c3e6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    c3ea:	4557      	cmp	r7, sl
    c3ec:	d112      	bne.n	c414 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    c3ee:	1b60      	subs	r0, r4, r5
    c3f0:	e649      	b.n	c086 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    c3f2:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    c3f4:	e7e5      	b.n	c3c2 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    c3f6:	f810 3b01 	ldrb.w	r3, [r0], #1
    c3fa:	0619      	lsls	r1, r3, #24
    c3fc:	d508      	bpl.n	c410 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    c3fe:	eb04 0e0c 	add.w	lr, r4, ip
    c402:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    c404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    c408:	f4ff ae3b 	bcc.w	c082 <cbvprintf_package+0x2e>
			*buf++ = pos;
    c40c:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    c410:	3201      	adds	r2, #1
    c412:	e7df      	b.n	c3d4 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    c414:	f1b8 0f00 	cmp.w	r8, #0
    c418:	d003      	beq.n	c422 <cbvprintf_package+0x3ce>
    c41a:	f999 2000 	ldrsb.w	r2, [r9]
    c41e:	2a00      	cmp	r2, #0
    c420:	db17      	blt.n	c452 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    c422:	9b01      	ldr	r3, [sp, #4]
    c424:	b1d3      	cbz	r3, c45c <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    c426:	f81a 200b 	ldrb.w	r2, [sl, fp]
    c42a:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    c42e:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    c430:	9b02      	ldr	r3, [sp, #8]
    c432:	1898      	adds	r0, r3, r2
    c434:	4420      	add	r0, r4
    c436:	4286      	cmp	r6, r0
    c438:	f4ff ae23 	bcc.w	c082 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    c43c:	f899 0000 	ldrb.w	r0, [r9]
    c440:	9900      	ldr	r1, [sp, #0]
    c442:	f804 0b01 	strb.w	r0, [r4], #1
    c446:	4620      	mov	r0, r4
    c448:	9203      	str	r2, [sp, #12]
    c44a:	f028 fdcf 	bl	34fec <memcpy>
		buf += size;
    c44e:	9a03      	ldr	r2, [sp, #12]
    c450:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    c452:	f10a 0a01 	add.w	sl, sl, #1
    c456:	f109 0901 	add.w	r9, r9, #1
    c45a:	e7c6      	b.n	c3ea <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    c45c:	f899 2000 	ldrb.w	r2, [r9]
    c460:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    c464:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c466:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    c468:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c46a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    c46e:	f7fc ff54 	bl	931a <strlen>
    c472:	1c42      	adds	r2, r0, #1
    c474:	e7dc      	b.n	c430 <cbvprintf_package+0x3dc>
		return -EFAULT;
    c476:	f06f 000d 	mvn.w	r0, #13
    c47a:	e604      	b.n	c086 <cbvprintf_package+0x32>
    c47c:	00038195 	.word	0x00038195
    c480:	0003c13d 	.word	0x0003c13d
    c484:	000381c3 	.word	0x000381c3
    c488:	0003821b 	.word	0x0003821b
    c48c:	00038230 	.word	0x00038230

0000c490 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c494:	b095      	sub	sp, #84	; 0x54
    c496:	af00      	add	r7, sp, #0
    c498:	468a      	mov	sl, r1
	__ASSERT_NO_MSG(in_packaged != NULL);
    c49a:	4604      	mov	r4, r0
{
    c49c:	627a      	str	r2, [r7, #36]	; 0x24
    c49e:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4a0:	b958      	cbnz	r0, c4ba <cbprintf_package_convert+0x2a>
    c4a2:	49a8      	ldr	r1, [pc, #672]	; (c744 <cbprintf_package_convert+0x2b4>)
    c4a4:	f44f 7365 	mov.w	r3, #916	; 0x394
    c4a8:	4aa7      	ldr	r2, [pc, #668]	; (c748 <cbprintf_package_convert+0x2b8>)
    c4aa:	48a8      	ldr	r0, [pc, #672]	; (c74c <cbprintf_package_convert+0x2bc>)
    c4ac:	f022 fa52 	bl	2e954 <assert_print>
    c4b0:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c4b4:	48a4      	ldr	r0, [pc, #656]	; (c748 <cbprintf_package_convert+0x2b8>)
    c4b6:	f022 fa46 	bl	2e946 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c4ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	ros_nbr   = buf[2];
    c4bc:	f890 b002 	ldrb.w	fp, [r0, #2]
    c4c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    c4c4:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c4c6:	b941      	cbnz	r1, c4da <cbprintf_package_convert+0x4a>
	s_nbr     = buf[1];
    c4c8:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
    c4ca:	7800      	ldrb	r0, [r0, #0]
    c4cc:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    c4d0:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    c4d2:	4555      	cmp	r5, sl
    c4d4:	d817      	bhi.n	c506 <cbprintf_package_convert+0x76>
	return (size_t)(uintptr_t)(buf - start);
    c4d6:	eba0 0a04 	sub.w	sl, r0, r4
	rws_nbr = in_desc->rw_str_cnt;
    c4da:	78e3      	ldrb	r3, [r4, #3]
    c4dc:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    c4de:	f1bb 0f00 	cmp.w	fp, #0
    c4e2:	d002      	beq.n	c4ea <cbprintf_package_convert+0x5a>
    c4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c4e6:	07d8      	lsls	r0, r3, #31
    c4e8:	d416      	bmi.n	c518 <cbprintf_package_convert+0x88>
	rw_cpy = rws_nbr > 0 &&
    c4ea:	697b      	ldr	r3, [r7, #20]
    c4ec:	bb53      	cbnz	r3, c544 <cbprintf_package_convert+0xb4>
		if (cb) {
    c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4f0:	b11b      	cbz	r3, c4fa <cbprintf_package_convert+0x6a>
			cb(in_packaged, in_len, ctx);
    c4f2:	4651      	mov	r1, sl
    c4f4:	4620      	mov	r0, r4
    c4f6:	69ba      	ldr	r2, [r7, #24]
    c4f8:	4798      	blx	r3
		return in_len;
    c4fa:	4655      	mov	r5, sl

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c4fc:	4628      	mov	r0, r5
    c4fe:	3754      	adds	r7, #84	; 0x54
    c500:	46bd      	mov	sp, r7
    c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c506:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
    c508:	4630      	mov	r0, r6
    c50a:	f7fc ff06 	bl	931a <strlen>
    c50e:	3001      	adds	r0, #1
    c510:	4430      	add	r0, r6
	for (unsigned int i = 0; i < s_nbr; i++) {
    c512:	f10a 0a01 	add.w	sl, sl, #1
    c516:	e7dc      	b.n	c4d2 <cbprintf_package_convert+0x42>
	rw_cpy = rws_nbr > 0 &&
    c518:	7823      	ldrb	r3, [r4, #0]
    c51a:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c51c:	623b      	str	r3, [r7, #32]
    c51e:	009b      	lsls	r3, r3, #2
    c520:	60fb      	str	r3, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    c522:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c524:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
    c526:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c52c:	2b00      	cmp	r3, #0
    c52e:	f040 8100 	bne.w	c732 <cbprintf_package_convert+0x2a2>
		out_len = (int)in_len;
    c532:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c534:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c536:	4655      	mov	r5, sl
		if (ro_cpy) {
    c538:	eb09 0a0b 	add.w	sl, r9, fp
			for (unsigned int i = 0; i < ros_nbr; i++) {
    c53c:	45c2      	cmp	sl, r8
    c53e:	d151      	bne.n	c5e4 <cbprintf_package_convert+0x154>
    c540:	44d9      	add	r9, fp
    c542:	e013      	b.n	c56c <cbprintf_package_convert+0xdc>
	rw_cpy = rws_nbr > 0 &&
    c544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c546:	0799      	lsls	r1, r3, #30
    c548:	d5d1      	bpl.n	c4ee <cbprintf_package_convert+0x5e>
	args_size = in_desc->len * sizeof(int);
    c54a:	7823      	ldrb	r3, [r4, #0]
    c54c:	4699      	mov	r9, r3
    c54e:	623b      	str	r3, [r7, #32]
    c550:	009b      	lsls	r3, r3, #2
    c552:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c554:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c556:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c55a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c55e:	2b00      	cmp	r3, #0
    c560:	d17a      	bne.n	c658 <cbprintf_package_convert+0x1c8>
		out_len = (int)in_len;
    c562:	4655      	mov	r5, sl
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c564:	f1bb 0f00 	cmp.w	fp, #0
    c568:	d14f      	bne.n	c60a <cbprintf_package_convert+0x17a>
	size_t strl_cnt = 0;
    c56a:	465e      	mov	r6, fp
		for (unsigned int i = 0; i < rws_nbr; i++) {
    c56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c56e:	f013 0f05 	tst.w	r3, #5
    c572:	bf0c      	ite	eq
    c574:	f04f 0b02 	moveq.w	fp, #2
    c578:	f04f 0b01 	movne.w	fp, #1
    c57c:	697b      	ldr	r3, [r7, #20]
    c57e:	eb09 0a43 	add.w	sl, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c584:	f003 0302 	and.w	r3, r3, #2
    c588:	627b      	str	r3, [r7, #36]	; 0x24
		for (unsigned int i = 0; i < rws_nbr; i++) {
    c58a:	45d1      	cmp	r9, sl
    c58c:	d0b6      	beq.n	c4fc <cbprintf_package_convert+0x6c>
			uint8_t arg_idx = *str_pos++;
    c58e:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c592:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c596:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    c59a:	4b6d      	ldr	r3, [pc, #436]	; (c750 <cbprintf_package_convert+0x2c0>)
    c59c:	4598      	cmp	r8, r3
    c59e:	d302      	bcc.n	c5a6 <cbprintf_package_convert+0x116>
    c5a0:	4b6c      	ldr	r3, [pc, #432]	; (c754 <cbprintf_package_convert+0x2c4>)
    c5a2:	4598      	cmp	r8, r3
    c5a4:	d338      	bcc.n	c618 <cbprintf_package_convert+0x188>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c5a6:	693b      	ldr	r3, [r7, #16]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d042      	beq.n	c632 <cbprintf_package_convert+0x1a2>
    c5ac:	69f8      	ldr	r0, [r7, #28]
    c5ae:	f021 ffa9 	bl	2e504 <is_ptr>
    c5b2:	2800      	cmp	r0, #0
    c5b4:	d03d      	beq.n	c632 <cbprintf_package_convert+0x1a2>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c5b6:	46e8      	mov	r8, sp
    c5b8:	b08a      	sub	sp, #40	; 0x28
    c5ba:	466a      	mov	r2, sp
    c5bc:	4b66      	ldr	r3, [pc, #408]	; (c758 <cbprintf_package_convert+0x2c8>)
    c5be:	6153      	str	r3, [r2, #20]
    c5c0:	69fb      	ldr	r3, [r7, #28]
    c5c2:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    c5ca:	8413      	strh	r3, [r2, #32]
    c5cc:	4b63      	ldr	r3, [pc, #396]	; (c75c <cbprintf_package_convert+0x2cc>)
    c5ce:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c5d2:	2300      	movs	r3, #0
    c5d4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c5d8:	4861      	ldr	r0, [pc, #388]	; (c760 <cbprintf_package_convert+0x2d0>)
    c5da:	f002 f91f 	bl	e81c <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c5de:	3d02      	subs	r5, #2
    c5e0:	46c5      	mov	sp, r8
				continue;
    c5e2:	e7d2      	b.n	c58a <cbprintf_package_convert+0xfa>
				const char *str = *(const char **)&buf32[*str_pos];
    c5e4:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
    c5e8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    c5ec:	f7fc fe95 	bl	931a <strlen>
				if (strl && strl_cnt < strl_len) {
    c5f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    c5f2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c5f4:	b13b      	cbz	r3, c606 <cbprintf_package_convert+0x176>
    c5f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    c5fa:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c5fc:	bf3e      	ittt	cc
    c5fe:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
    c600:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
    c604:	3601      	addcc	r6, #1
				out_len += len;
    c606:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    c608:	e798      	b.n	c53c <cbprintf_package_convert+0xac>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c60a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c60c:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
    c610:	bf1c      	itt	ne
    c612:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    c614:	44d9      	addne	r9, fp
    c616:	e7a9      	b.n	c56c <cbprintf_package_convert+0xdc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c618:	693b      	ldr	r3, [r7, #16]
    c61a:	b123      	cbz	r3, c626 <cbprintf_package_convert+0x196>
    c61c:	69f8      	ldr	r0, [r7, #28]
    c61e:	f021 ff71 	bl	2e504 <is_ptr>
    c622:	2800      	cmp	r0, #0
    c624:	d1c7      	bne.n	c5b6 <cbprintf_package_convert+0x126>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c628:	07da      	lsls	r2, r3, #31
    c62a:	d405      	bmi.n	c638 <cbprintf_package_convert+0x1a8>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c62c:	eba5 050b 	sub.w	r5, r5, fp
    c630:	e7ab      	b.n	c58a <cbprintf_package_convert+0xfa>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c634:	2b00      	cmp	r3, #0
    c636:	d0a8      	beq.n	c58a <cbprintf_package_convert+0xfa>
		return 1 + strlen(str);
    c638:	4640      	mov	r0, r8
    c63a:	f7fc fe6e 	bl	931a <strlen>
				if (strl && strl_cnt < strl_len) {
    c63e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c640:	b143      	cbz	r3, c654 <cbprintf_package_convert+0x1c4>
    c642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    c646:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c648:	bf3f      	itttt	cc
    c64a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    c64c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c64e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c652:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c654:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    c656:	e798      	b.n	c58a <cbprintf_package_convert+0xfa>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c658:	f1bb 0f00 	cmp.w	fp, #0
    c65c:	d06f      	beq.n	c73e <cbprintf_package_convert+0x2ae>
    c65e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c660:	f013 0604 	ands.w	r6, r3, #4
    c664:	d07e      	beq.n	c764 <cbprintf_package_convert+0x2d4>
		keep_cnt = ros_nbr;
    c666:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c668:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c66a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    c66e:	465a      	mov	r2, fp
    c670:	4649      	mov	r1, r9
    c672:	f028 fcbb 	bl	34fec <memcpy>
	str_pos += ros_nbr;
    c676:	697b      	ldr	r3, [r7, #20]
    c678:	44d9      	add	r9, fp
	for (unsigned int i = 0; i < rws_nbr; i++) {
    c67a:	005b      	lsls	r3, r3, #1
    c67c:	607b      	str	r3, [r7, #4]
    c67e:	697b      	ldr	r3, [r7, #20]
    c680:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c684:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c688:	f003 0302 	and.w	r3, r3, #2
    c68c:	603b      	str	r3, [r7, #0]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	4599      	cmp	r9, r3
    c692:	d169      	bne.n	c768 <cbprintf_package_convert+0x2d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c694:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c696:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c698:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c69a:	0789      	lsls	r1, r1, #30
    c69c:	bf48      	it	mi
    c69e:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6a0:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6a4:	bf58      	it	pl
    c6a6:	ea4f 0158 	movpl.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6aa:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6ac:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6ae:	f100 80df 	bmi.w	c870 <cbprintf_package_convert+0x3e0>
    c6b2:	f010 0f04 	tst.w	r0, #4
    c6b6:	bf14      	ite	ne
    c6b8:	4640      	movne	r0, r8
    c6ba:	2000      	moveq	r0, #0
    c6bc:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    c6be:	7062      	strb	r2, [r4, #1]
    c6c0:	70a0      	strb	r0, [r4, #2]
    c6c2:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c6c4:	4620      	mov	r0, r4
    c6c6:	69ba      	ldr	r2, [r7, #24]
    c6c8:	68f9      	ldr	r1, [r7, #12]
    c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6cc:	4798      	blx	r3
	if (rv < 0) {
    c6ce:	1e05      	subs	r5, r0, #0
    c6d0:	f6ff af14 	blt.w	c4fc <cbprintf_package_convert+0x6c>
	*in_desc = in_desc_backup;
    c6d4:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c6d6:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c6d8:	7023      	strb	r3, [r4, #0]
    c6da:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c6dc:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    c6de:	7063      	strb	r3, [r4, #1]
    c6e0:	697b      	ldr	r3, [r7, #20]
    c6e2:	f884 b002 	strb.w	fp, [r4, #2]
    c6e6:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c6e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6ee:	4798      	blx	r3
	if (rv < 0) {
    c6f0:	f1b0 0800 	subs.w	r8, r0, #0
    c6f4:	f2c0 80e9 	blt.w	c8ca <cbprintf_package_convert+0x43a>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c6f8:	68fb      	ldr	r3, [r7, #12]
    c6fa:	ebaa 010b 	sub.w	r1, sl, fp
    c6fe:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	4648      	mov	r0, r9
    c704:	1ac9      	subs	r1, r1, r3
    c706:	69ba      	ldr	r2, [r7, #24]
    c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c70a:	4798      	blx	r3
	if (rv < 0) {
    c70c:	2800      	cmp	r0, #0
    c70e:	f2c0 80de 	blt.w	c8ce <cbprintf_package_convert+0x43e>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    c712:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c716:	44a8      	add	r8, r5
	out_len += rv;
    c718:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c71c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    c720:	45b3      	cmp	fp, r6
    c722:	f0c0 80a7 	bcc.w	c874 <cbprintf_package_convert+0x3e4>
	(void)cb(NULL, 0, ctx);
    c726:	2100      	movs	r1, #0
    c728:	69ba      	ldr	r2, [r7, #24]
    c72a:	4608      	mov	r0, r1
    c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c72e:	4798      	blx	r3
	return out_len;
    c730:	e6e4      	b.n	c4fc <cbprintf_package_convert+0x6c>
	if (cb == NULL) {
    c732:	465e      	mov	r6, fp
    c734:	f04f 0800 	mov.w	r8, #0
    c738:	f107 0030 	add.w	r0, r7, #48	; 0x30
    c73c:	e797      	b.n	c66e <cbprintf_package_convert+0x1de>
		scpy_cnt = 0;
    c73e:	465e      	mov	r6, fp
		keep_cnt = 0;
    c740:	46d8      	mov	r8, fp
    c742:	e798      	b.n	c676 <cbprintf_package_convert+0x1e6>
    c744:	00038247 	.word	0x00038247
    c748:	00038195 	.word	0x00038195
    c74c:	000381c3 	.word	0x000381c3
    c750:	00035f8c 	.word	0x00035f8c
    c754:	000412f0 	.word	0x000412f0
    c758:	00038262 	.word	0x00038262
    c75c:	01000004 	.word	0x01000004
    c760:	00036450 	.word	0x00036450
    c764:	46b0      	mov	r8, r6
    c766:	e786      	b.n	c676 <cbprintf_package_convert+0x1e6>
		uint8_t arg_idx = *str_pos++;
    c768:	f819 1b02 	ldrb.w	r1, [r9], #2
    c76c:	4b59      	ldr	r3, [pc, #356]	; (c8d4 <cbprintf_package_convert+0x444>)
		uint8_t arg_pos = *str_pos++;
    c76e:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c772:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c776:	4298      	cmp	r0, r3
    c778:	d302      	bcc.n	c780 <cbprintf_package_convert+0x2f0>
    c77a:	4b57      	ldr	r3, [pc, #348]	; (c8d8 <cbprintf_package_convert+0x448>)
    c77c:	4298      	cmp	r0, r3
    c77e:	d316      	bcc.n	c7ae <cbprintf_package_convert+0x31e>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c780:	693b      	ldr	r3, [r7, #16]
    c782:	b12b      	cbz	r3, c790 <cbprintf_package_convert+0x300>
    c784:	69f8      	ldr	r0, [r7, #28]
    c786:	f021 febd 	bl	2e504 <is_ptr>
    c78a:	2800      	cmp	r0, #0
    c78c:	f47f af7f 	bne.w	c68e <cbprintf_package_convert+0x1fe>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c790:	683b      	ldr	r3, [r7, #0]
    c792:	2b00      	cmp	r3, #0
    c794:	d04a      	beq.n	c82c <cbprintf_package_convert+0x39c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c796:	2e0f      	cmp	r6, #15
    c798:	d93e      	bls.n	c818 <cbprintf_package_convert+0x388>
    c79a:	4950      	ldr	r1, [pc, #320]	; (c8dc <cbprintf_package_convert+0x44c>)
    c79c:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c7a0:	4a4f      	ldr	r2, [pc, #316]	; (c8e0 <cbprintf_package_convert+0x450>)
    c7a2:	4850      	ldr	r0, [pc, #320]	; (c8e4 <cbprintf_package_convert+0x454>)
    c7a4:	f022 f8d6 	bl	2e954 <assert_print>
    c7a8:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c7ac:	e682      	b.n	c4b4 <cbprintf_package_convert+0x24>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7ae:	693b      	ldr	r3, [r7, #16]
    c7b0:	b12b      	cbz	r3, c7be <cbprintf_package_convert+0x32e>
    c7b2:	69f8      	ldr	r0, [r7, #28]
    c7b4:	f021 fea6 	bl	2e504 <is_ptr>
    c7b8:	2800      	cmp	r0, #0
    c7ba:	f47f af68 	bne.w	c68e <cbprintf_package_convert+0x1fe>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c7be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c7c0:	07db      	lsls	r3, r3, #31
    c7c2:	d50b      	bpl.n	c7dc <cbprintf_package_convert+0x34c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c7c4:	2e0f      	cmp	r6, #15
    c7c6:	d927      	bls.n	c818 <cbprintf_package_convert+0x388>
    c7c8:	4944      	ldr	r1, [pc, #272]	; (c8dc <cbprintf_package_convert+0x44c>)
    c7ca:	f240 433e 	movw	r3, #1086	; 0x43e
    c7ce:	4a44      	ldr	r2, [pc, #272]	; (c8e0 <cbprintf_package_convert+0x450>)
    c7d0:	4844      	ldr	r0, [pc, #272]	; (c8e4 <cbprintf_package_convert+0x454>)
    c7d2:	f022 f8bf 	bl	2e954 <assert_print>
    c7d6:	f240 413e 	movw	r1, #1086	; 0x43e
    c7da:	e66b      	b.n	c4b4 <cbprintf_package_convert+0x24>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c7dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c7de:	0758      	lsls	r0, r3, #29
    c7e0:	f57f af55 	bpl.w	c68e <cbprintf_package_convert+0x1fe>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c7e4:	f1b8 0f0f 	cmp.w	r8, #15
    c7e8:	d909      	bls.n	c7fe <cbprintf_package_convert+0x36e>
    c7ea:	493f      	ldr	r1, [pc, #252]	; (c8e8 <cbprintf_package_convert+0x458>)
    c7ec:	f240 4341 	movw	r3, #1089	; 0x441
    c7f0:	4a3b      	ldr	r2, [pc, #236]	; (c8e0 <cbprintf_package_convert+0x450>)
    c7f2:	483c      	ldr	r0, [pc, #240]	; (c8e4 <cbprintf_package_convert+0x454>)
    c7f4:	f022 f8ae 	bl	2e954 <assert_print>
    c7f8:	f240 4141 	movw	r1, #1089	; 0x441
    c7fc:	e65a      	b.n	c4b4 <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_pos;
    c7fe:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c802:	f107 0228 	add.w	r2, r7, #40	; 0x28
    c806:	f108 0101 	add.w	r1, r8, #1
    c80a:	eb03 0802 	add.w	r8, r3, r2
    c80e:	f808 5c10 	strb.w	r5, [r8, #-16]
    c812:	fa5f f881 	uxtb.w	r8, r1
    c816:	e73a      	b.n	c68e <cbprintf_package_convert+0x1fe>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c818:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c81c:	f107 0228 	add.w	r2, r7, #40	; 0x28
    c820:	1c71      	adds	r1, r6, #1
    c822:	189e      	adds	r6, r3, r2
    c824:	f806 5c20 	strb.w	r5, [r6, #-32]
    c828:	b2ce      	uxtb	r6, r1
    c82a:	e730      	b.n	c68e <cbprintf_package_convert+0x1fe>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c82c:	f1b8 0f0f 	cmp.w	r8, #15
    c830:	d909      	bls.n	c846 <cbprintf_package_convert+0x3b6>
    c832:	492d      	ldr	r1, [pc, #180]	; (c8e8 <cbprintf_package_convert+0x458>)
    c834:	f240 434b 	movw	r3, #1099	; 0x44b
    c838:	4a29      	ldr	r2, [pc, #164]	; (c8e0 <cbprintf_package_convert+0x450>)
    c83a:	482a      	ldr	r0, [pc, #168]	; (c8e4 <cbprintf_package_convert+0x454>)
    c83c:	f022 f88a 	bl	2e954 <assert_print>
    c840:	f240 414b 	movw	r1, #1099	; 0x44b
    c844:	e636      	b.n	c4b4 <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_idx;
    c846:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c84a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    c84e:	f108 0001 	add.w	r0, r8, #1
    c852:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c856:	f107 0350 	add.w	r3, r7, #80	; 0x50
    c85a:	f108 0802 	add.w	r8, r8, #2
    c85e:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c862:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c866:	fa5f f888 	uxtb.w	r8, r8
    c86a:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    c86e:	e70e      	b.n	c68e <cbprintf_package_convert+0x1fe>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c870:	2000      	movs	r0, #0
    c872:	e723      	b.n	c6bc <cbprintf_package_convert+0x22c>
		uint8_t loc = cpy_str_pos[i];
    c874:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c878:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    c880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c882:	b1fb      	cbz	r3, c8c4 <cbprintf_package_convert+0x434>
    c884:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c888:	2101      	movs	r1, #1
    c88a:	69ba      	ldr	r2, [r7, #24]
    c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c88e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    c892:	4798      	blx	r3
		if (rv < 0) {
    c894:	2800      	cmp	r0, #0
    c896:	db1a      	blt.n	c8ce <cbprintf_package_convert+0x43e>
		out_len += rv;
    c898:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c89a:	f1b8 0f00 	cmp.w	r8, #0
    c89e:	d106      	bne.n	c8ae <cbprintf_package_convert+0x41e>
    c8a0:	4648      	mov	r0, r9
    c8a2:	f7fc fd3a 	bl	931a <strlen>
    c8a6:	f100 0801 	add.w	r8, r0, #1
    c8aa:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c8ae:	4641      	mov	r1, r8
    c8b0:	4648      	mov	r0, r9
    c8b2:	69ba      	ldr	r2, [r7, #24]
    c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8b6:	4798      	blx	r3
		if (rv < 0) {
    c8b8:	2800      	cmp	r0, #0
    c8ba:	db08      	blt.n	c8ce <cbprintf_package_convert+0x43e>
		out_len += rv;
    c8bc:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    c8be:	f10b 0b01 	add.w	fp, fp, #1
    c8c2:	e72d      	b.n	c720 <cbprintf_package_convert+0x290>
		uint16_t str_len = strl ? strl[i] : 0;
    c8c4:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    c8c8:	e7de      	b.n	c888 <cbprintf_package_convert+0x3f8>
    c8ca:	4645      	mov	r5, r8
    c8cc:	e616      	b.n	c4fc <cbprintf_package_convert+0x6c>
    c8ce:	4605      	mov	r5, r0
    c8d0:	e614      	b.n	c4fc <cbprintf_package_convert+0x6c>
    c8d2:	bf00      	nop
    c8d4:	00035f8c 	.word	0x00035f8c
    c8d8:	000412f0 	.word	0x000412f0
    c8dc:	00038305 	.word	0x00038305
    c8e0:	00038195 	.word	0x00038195
    c8e4:	000381c3 	.word	0x000381c3
    c8e8:	00038324 	.word	0x00038324

0000c8ec <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    c8ec:	2803      	cmp	r0, #3
{
    c8ee:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    c8f0:	d906      	bls.n	c900 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    c8f2:	f023 f93e 	bl	2fb72 <__errno>
    c8f6:	2309      	movs	r3, #9
    c8f8:	6003      	str	r3, [r0, #0]
		return -1;
    c8fa:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    c8fe:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c900:	4b04      	ldr	r3, [pc, #16]	; (c914 <_check_fd+0x28>)
    c902:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    c906:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
    c90a:	2b00      	cmp	r3, #0
    c90c:	d0f1      	beq.n	c8f2 <_check_fd+0x6>
	return 0;
    c90e:	2000      	movs	r0, #0
    c910:	e7f5      	b.n	c8fe <_check_fd+0x12>
    c912:	bf00      	nop
    c914:	2000f8a0 	.word	0x2000f8a0

0000c918 <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    c918:	b570      	push	{r4, r5, r6, lr}
    c91a:	4604      	mov	r4, r0
    c91c:	460e      	mov	r6, r1
    c91e:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    c920:	f7ff ffe4 	bl	c8ec <_check_fd>
    c924:	2800      	cmp	r0, #0
    c926:	db0c      	blt.n	c942 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    c928:	4b07      	ldr	r3, [pc, #28]	; (c948 <z_get_fd_obj_and_vtable+0x30>)
    c92a:	0161      	lsls	r1, r4, #5
    c92c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    c930:	6862      	ldr	r2, [r4, #4]
    c932:	6032      	str	r2, [r6, #0]

	if (lock) {
    c934:	b11d      	cbz	r5, c93e <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
    c936:	f101 020c 	add.w	r2, r1, #12
    c93a:	441a      	add	r2, r3
    c93c:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
    c93e:	5858      	ldr	r0, [r3, r1]
}
    c940:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    c942:	2000      	movs	r0, #0
    c944:	e7fc      	b.n	c940 <z_get_fd_obj_and_vtable+0x28>
    c946:	bf00      	nop
    c948:	2000f898 	.word	0x2000f898

0000c94c <z_reserve_fd>:

int z_reserve_fd(void)
{
    c94c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    c94e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    c950:	f04f 33ff 	mov.w	r3, #4294967295
    c954:	f04f 32ff 	mov.w	r2, #4294967295
    c958:	4814      	ldr	r0, [pc, #80]	; (c9ac <z_reserve_fd+0x60>)
    c95a:	f01b ff93 	bl	28884 <z_impl_k_mutex_lock>
    c95e:	4b14      	ldr	r3, [pc, #80]	; (c9b0 <z_reserve_fd+0x64>)
    c960:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    c964:	b17a      	cbz	r2, c986 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    c966:	3401      	adds	r4, #1
    c968:	2c04      	cmp	r4, #4
    c96a:	f103 0320 	add.w	r3, r3, #32
    c96e:	d1f7      	bne.n	c960 <z_reserve_fd+0x14>
	errno = ENFILE;
    c970:	f023 f8ff 	bl	2fb72 <__errno>
    c974:	2317      	movs	r3, #23
	return -1;
    c976:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    c97a:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    c97c:	480b      	ldr	r0, [pc, #44]	; (c9ac <z_reserve_fd+0x60>)
    c97e:	f01c f851 	bl	28a24 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    c982:	4620      	mov	r0, r4
    c984:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c986:	e8d3 0fef 	ldaex	r0, [r3]
    c98a:	3001      	adds	r0, #1
    c98c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c990:	2900      	cmp	r1, #0
    c992:	d1f8      	bne.n	c986 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    c994:	4807      	ldr	r0, [pc, #28]	; (c9b4 <z_reserve_fd+0x68>)
    c996:	0163      	lsls	r3, r4, #5
    c998:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    c99c:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    c99e:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    c9a0:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    c9a2:	4418      	add	r0, r3
    c9a4:	f028 f90c 	bl	34bc0 <z_impl_k_mutex_init>
    c9a8:	e7e8      	b.n	c97c <z_reserve_fd+0x30>
    c9aa:	bf00      	nop
    c9ac:	2000ceb8 	.word	0x2000ceb8
    c9b0:	2000f8a0 	.word	0x2000f8a0
    c9b4:	2000f898 	.word	0x2000f898

0000c9b8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    c9b8:	b410      	push	{r4}
    c9ba:	4604      	mov	r4, r0
    c9bc:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    c9be:	4b09      	ldr	r3, [pc, #36]	; (c9e4 <z_finalize_fd+0x2c>)
    c9c0:	0162      	lsls	r2, r4, #5
    c9c2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    c9c6:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    c9c8:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    c9ca:	b140      	cbz	r0, c9de <z_finalize_fd+0x26>
    c9cc:	68c4      	ldr	r4, [r0, #12]
    c9ce:	b134      	cbz	r4, c9de <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    c9d0:	320c      	adds	r2, #12
    c9d2:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    c9d4:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    c9d6:	f240 1205 	movw	r2, #261	; 0x105
    c9da:	f021 bdb8 	b.w	2e54e <z_fdtable_call_ioctl.constprop.0>
}
    c9de:	bc10      	pop	{r4}
    c9e0:	4770      	bx	lr
    c9e2:	bf00      	nop
    c9e4:	2000f898 	.word	0x2000f898

0000c9e8 <z_free_fd>:

void z_free_fd(int fd)
{
    c9e8:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    c9ea:	490d      	ldr	r1, [pc, #52]	; (ca20 <z_free_fd+0x38>)
    c9ec:	0140      	lsls	r0, r0, #5
    c9ee:	f100 0308 	add.w	r3, r0, #8
    c9f2:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c9f4:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    c9f8:	b182      	cbz	r2, ca1c <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    c9fa:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c9fc:	e8d3 5fef 	ldaex	r5, [r3]
    ca00:	4295      	cmp	r5, r2
    ca02:	d104      	bne.n	ca0e <z_free_fd+0x26>
    ca04:	e8c3 4fec 	stlex	ip, r4, [r3]
    ca08:	f1bc 0f00 	cmp.w	ip, #0
    ca0c:	d1f6      	bne.n	c9fc <z_free_fd+0x14>
    ca0e:	d1f1      	bne.n	c9f4 <z_free_fd+0xc>
	if (old_rc != 1) {
    ca10:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    ca12:	bf01      	itttt	eq
    ca14:	2300      	moveq	r3, #0
    ca16:	180a      	addeq	r2, r1, r0
    ca18:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    ca1a:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    ca1c:	bd30      	pop	{r4, r5, pc}
    ca1e:	bf00      	nop
    ca20:	2000f898 	.word	0x2000f898

0000ca24 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    ca24:	4b01      	ldr	r3, [pc, #4]	; (ca2c <__printk_hook_install+0x8>)
    ca26:	6018      	str	r0, [r3, #0]
}
    ca28:	4770      	bx	lr
    ca2a:	bf00      	nop
    ca2c:	2000c810 	.word	0x2000c810

0000ca30 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ca30:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    ca32:	2500      	movs	r5, #0
{
    ca34:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    ca36:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    ca3a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    ca3c:	9500      	str	r5, [sp, #0]
    ca3e:	a903      	add	r1, sp, #12
    ca40:	4805      	ldr	r0, [pc, #20]	; (ca58 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    ca42:	9505      	str	r5, [sp, #20]
    ca44:	f000 fd60 	bl	d508 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    ca48:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    ca4c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    ca4e:	bfb8      	it	lt
    ca50:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    ca52:	b007      	add	sp, #28
    ca54:	bd30      	pop	{r4, r5, pc}
    ca56:	bf00      	nop
    ca58:	0002e571 	.word	0x0002e571

0000ca5c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    ca5c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    ca5e:	460c      	mov	r4, r1
    ca60:	2900      	cmp	r1, #0
    ca62:	d034      	beq.n	cace <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    ca64:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca66:	1f0b      	subs	r3, r1, #4
    ca68:	1a9b      	subs	r3, r3, r2
    ca6a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    ca6c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    ca70:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ca72:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    ca74:	07e8      	lsls	r0, r5, #31
    ca76:	d40d      	bmi.n	ca94 <sys_heap_free+0x38>
    ca78:	23af      	movs	r3, #175	; 0xaf
    ca7a:	4a15      	ldr	r2, [pc, #84]	; (cad0 <sys_heap_free+0x74>)
    ca7c:	4915      	ldr	r1, [pc, #84]	; (cad4 <sys_heap_free+0x78>)
    ca7e:	4816      	ldr	r0, [pc, #88]	; (cad8 <sys_heap_free+0x7c>)
    ca80:	f021 ff68 	bl	2e954 <assert_print>
    ca84:	4621      	mov	r1, r4
    ca86:	4815      	ldr	r0, [pc, #84]	; (cadc <sys_heap_free+0x80>)
    ca88:	f021 ff64 	bl	2e954 <assert_print>
    ca8c:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    ca8e:	4810      	ldr	r0, [pc, #64]	; (cad0 <sys_heap_free+0x74>)
    ca90:	f021 ff59 	bl	2e946 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    ca94:	4610      	mov	r0, r2
    ca96:	f021 fda4 	bl	2e5e2 <chunk_size>
    ca9a:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    ca9c:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    caa0:	1b80      	subs	r0, r0, r6
    caa2:	4281      	cmp	r1, r0
    caa4:	d00b      	beq.n	cabe <sys_heap_free+0x62>
    caa6:	23b7      	movs	r3, #183	; 0xb7
    caa8:	4a09      	ldr	r2, [pc, #36]	; (cad0 <sys_heap_free+0x74>)
    caaa:	490d      	ldr	r1, [pc, #52]	; (cae0 <sys_heap_free+0x84>)
    caac:	480a      	ldr	r0, [pc, #40]	; (cad8 <sys_heap_free+0x7c>)
    caae:	f021 ff51 	bl	2e954 <assert_print>
    cab2:	4621      	mov	r1, r4
    cab4:	480b      	ldr	r0, [pc, #44]	; (cae4 <sys_heap_free+0x88>)
    cab6:	f021 ff4d 	bl	2e954 <assert_print>
    caba:	21b7      	movs	r1, #183	; 0xb7
    cabc:	e7e7      	b.n	ca8e <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    cabe:	f025 0501 	bic.w	r5, r5, #1
    cac2:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    cac4:	4610      	mov	r0, r2
}
    cac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    caca:	f021 be47 	b.w	2e75c <free_chunk>
}
    cace:	bd70      	pop	{r4, r5, r6, pc}
    cad0:	00038355 	.word	0x00038355
    cad4:	00038376 	.word	0x00038376
    cad8:	000381c3 	.word	0x000381c3
    cadc:	00038387 	.word	0x00038387
    cae0:	000383bf 	.word	0x000383bf
    cae4:	000383e5 	.word	0x000383e5

0000cae8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    caec:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    caee:	400b      	ands	r3, r1
{
    caf0:	460f      	mov	r7, r1
    caf2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    caf4:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    caf6:	d010      	beq.n	cb1a <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    caf8:	f1c1 0900 	rsb	r9, r1, #0
    cafc:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    cb00:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cb02:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    cb04:	2a04      	cmp	r2, #4
    cb06:	bf28      	it	cs
    cb08:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cb0a:	4219      	tst	r1, r3
    cb0c:	d10c      	bne.n	cb28 <sys_heap_aligned_alloc+0x40>
    cb0e:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    cb10:	b9e4      	cbnz	r4, cb4c <sys_heap_aligned_alloc+0x64>
		return NULL;
    cb12:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    cb14:	4628      	mov	r0, r5
    cb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    cb1a:	2904      	cmp	r1, #4
    cb1c:	d813      	bhi.n	cb46 <sys_heap_aligned_alloc+0x5e>
}
    cb1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    cb22:	4611      	mov	r1, r2
    cb24:	f021 be4b 	b.w	2e7be <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cb28:	492c      	ldr	r1, [pc, #176]	; (cbdc <sys_heap_aligned_alloc+0xf4>)
    cb2a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    cb2e:	4a2c      	ldr	r2, [pc, #176]	; (cbe0 <sys_heap_aligned_alloc+0xf8>)
    cb30:	482c      	ldr	r0, [pc, #176]	; (cbe4 <sys_heap_aligned_alloc+0xfc>)
    cb32:	f021 ff0f 	bl	2e954 <assert_print>
    cb36:	482c      	ldr	r0, [pc, #176]	; (cbe8 <sys_heap_aligned_alloc+0x100>)
    cb38:	f021 ff0c 	bl	2e954 <assert_print>
    cb3c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    cb40:	4827      	ldr	r0, [pc, #156]	; (cbe0 <sys_heap_aligned_alloc+0xf8>)
    cb42:	f021 ff00 	bl	2e946 <assert_post_action>
		rew = 0;
    cb46:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    cb48:	2204      	movs	r2, #4
    cb4a:	e7e1      	b.n	cb10 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    cb4c:	68b3      	ldr	r3, [r6, #8]
    cb4e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    cb52:	d9de      	bls.n	cb12 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb54:	f104 010b 	add.w	r1, r4, #11
    cb58:	4439      	add	r1, r7
    cb5a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    cb5c:	4630      	mov	r0, r6
    cb5e:	08c9      	lsrs	r1, r1, #3
    cb60:	f021 fd95 	bl	2e68e <alloc_chunk>
	if (c0 == 0) {
    cb64:	4680      	mov	r8, r0
    cb66:	2800      	cmp	r0, #0
    cb68:	d0d3      	beq.n	cb12 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cb6a:	f109 0504 	add.w	r5, r9, #4
    cb6e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    cb72:	1e7b      	subs	r3, r7, #1
    cb74:	4435      	add	r5, r6
    cb76:	441d      	add	r5, r3
    cb78:	427f      	negs	r7, r7
    cb7a:	403d      	ands	r5, r7
    cb7c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb80:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb82:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb84:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb86:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cb88:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cb8c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cb8e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cb92:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    cb96:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cb9a:	d208      	bcs.n	cbae <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    cb9c:	4601      	mov	r1, r0
    cb9e:	463a      	mov	r2, r7
    cba0:	4630      	mov	r0, r6
    cba2:	f021 fdc1 	bl	2e728 <split_chunks>
		free_list_add(h, c0);
    cba6:	4641      	mov	r1, r8
    cba8:	4630      	mov	r0, r6
    cbaa:	f021 fd1f 	bl	2e5ec <free_list_add>
	return c + chunk_size(h, c);
    cbae:	4639      	mov	r1, r7
    cbb0:	4630      	mov	r0, r6
    cbb2:	f021 fd16 	bl	2e5e2 <chunk_size>
    cbb6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cbb8:	4284      	cmp	r4, r0
    cbba:	d207      	bcs.n	cbcc <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cbbc:	4630      	mov	r0, r6
    cbbe:	4622      	mov	r2, r4
    cbc0:	f021 fdb2 	bl	2e728 <split_chunks>
		free_list_add(h, c_end);
    cbc4:	4621      	mov	r1, r4
    cbc6:	4630      	mov	r0, r6
    cbc8:	f021 fd10 	bl	2e5ec <free_list_add>
	void *cmem = &buf[c];
    cbcc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbd0:	8873      	ldrh	r3, [r6, #2]
    cbd2:	f043 0301 	orr.w	r3, r3, #1
    cbd6:	8073      	strh	r3, [r6, #2]
    cbd8:	e79c      	b.n	cb14 <sys_heap_aligned_alloc+0x2c>
    cbda:	bf00      	nop
    cbdc:	00038421 	.word	0x00038421
    cbe0:	00038355 	.word	0x00038355
    cbe4:	000381c3 	.word	0x000381c3
    cbe8:	0003843c 	.word	0x0003843c

0000cbec <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cbec:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cbf4:	d30e      	bcc.n	cc14 <sys_heap_init+0x28>
    cbf6:	493c      	ldr	r1, [pc, #240]	; (cce8 <sys_heap_init+0xfc>)
    cbf8:	f240 13eb 	movw	r3, #491	; 0x1eb
    cbfc:	4a3b      	ldr	r2, [pc, #236]	; (ccec <sys_heap_init+0x100>)
    cbfe:	483c      	ldr	r0, [pc, #240]	; (ccf0 <sys_heap_init+0x104>)
    cc00:	f021 fea8 	bl	2e954 <assert_print>
    cc04:	483b      	ldr	r0, [pc, #236]	; (ccf4 <sys_heap_init+0x108>)
    cc06:	f021 fea5 	bl	2e954 <assert_print>
    cc0a:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cc0e:	4837      	ldr	r0, [pc, #220]	; (ccec <sys_heap_init+0x100>)
    cc10:	f021 fe99 	bl	2e946 <assert_post_action>
    cc14:	2a04      	cmp	r2, #4
    cc16:	d80c      	bhi.n	cc32 <sys_heap_init+0x46>
    cc18:	4937      	ldr	r1, [pc, #220]	; (ccf8 <sys_heap_init+0x10c>)
    cc1a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cc1e:	4a33      	ldr	r2, [pc, #204]	; (ccec <sys_heap_init+0x100>)
    cc20:	4833      	ldr	r0, [pc, #204]	; (ccf0 <sys_heap_init+0x104>)
    cc22:	f021 fe97 	bl	2e954 <assert_print>
    cc26:	4835      	ldr	r0, [pc, #212]	; (ccfc <sys_heap_init+0x110>)
    cc28:	f021 fe94 	bl	2e954 <assert_print>
    cc2c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cc30:	e7ed      	b.n	cc0e <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cc32:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc34:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc36:	188e      	adds	r6, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cc38:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cc3c:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cc40:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cc42:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cc44:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cc48:	d80c      	bhi.n	cc64 <sys_heap_init+0x78>
    cc4a:	492d      	ldr	r1, [pc, #180]	; (cd00 <sys_heap_init+0x114>)
    cc4c:	f240 13fb 	movw	r3, #507	; 0x1fb
    cc50:	4a26      	ldr	r2, [pc, #152]	; (ccec <sys_heap_init+0x100>)
    cc52:	4827      	ldr	r0, [pc, #156]	; (ccf0 <sys_heap_init+0x104>)
    cc54:	f021 fe7e 	bl	2e954 <assert_print>
    cc58:	4828      	ldr	r0, [pc, #160]	; (ccfc <sys_heap_init+0x110>)
    cc5a:	f021 fe7b 	bl	2e954 <assert_print>
    cc5e:	f240 11fb 	movw	r1, #507	; 0x1fb
    cc62:	e7d4      	b.n	cc0e <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cc64:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cc68:	f04f 0800 	mov.w	r8, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cc6c:	f1c4 0220 	rsb	r2, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cc70:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    cc74:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cc76:	3407      	adds	r4, #7
    cc78:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cc7a:	1c63      	adds	r3, r4, #1
    cc7c:	42bb      	cmp	r3, r7
	heap->heap = h;
    cc7e:	6005      	str	r5, [r0, #0]
	h->end_chunk = heap_sz;
    cc80:	60af      	str	r7, [r5, #8]
	h->avail_buckets = 0;
    cc82:	f8c5 800c 	str.w	r8, [r5, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cc86:	d90c      	bls.n	cca2 <sys_heap_init+0xb6>
    cc88:	491e      	ldr	r1, [pc, #120]	; (cd04 <sys_heap_init+0x118>)
    cc8a:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cc8e:	4a17      	ldr	r2, [pc, #92]	; (ccec <sys_heap_init+0x100>)
    cc90:	4817      	ldr	r0, [pc, #92]	; (ccf0 <sys_heap_init+0x104>)
    cc92:	f021 fe5f 	bl	2e954 <assert_print>
    cc96:	4819      	ldr	r0, [pc, #100]	; (ccfc <sys_heap_init+0x110>)
    cc98:	f021 fe5c 	bl	2e954 <assert_print>
    cc9c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cca0:	e7b5      	b.n	cc0e <sys_heap_init+0x22>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cca2:	4641      	mov	r1, r8
    cca4:	0092      	lsls	r2, r2, #2
    cca6:	f105 0010 	add.w	r0, r5, #16
    ccaa:	f028 f9bf 	bl	3502c <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccae:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ccb0:	f043 0301 	orr.w	r3, r3, #1
    ccb4:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ccb6:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
    ccb8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ccbc:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    ccbe:	f8a5 8000 	strh.w	r8, [r5]
    ccc2:	8051      	strh	r1, [r2, #2]
    ccc4:	19aa      	adds	r2, r5, r6
    ccc6:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    ccca:	f8a2 8002 	strh.w	r8, [r2, #2]
    ccce:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    ccd0:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ccd4:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    ccd6:	4621      	mov	r1, r4
    ccd8:	f042 0201 	orr.w	r2, r2, #1
    ccdc:	805a      	strh	r2, [r3, #2]
    ccde:	4628      	mov	r0, r5
}
    cce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    cce4:	f021 bc82 	b.w	2e5ec <free_list_add>
    cce8:	00038459 	.word	0x00038459
    ccec:	00038355 	.word	0x00038355
    ccf0:	000381c3 	.word	0x000381c3
    ccf4:	0003846f 	.word	0x0003846f
    ccf8:	00038486 	.word	0x00038486
    ccfc:	000384a7 	.word	0x000384a7
    cd00:	000384c0 	.word	0x000384c0
    cd04:	000384e9 	.word	0x000384e9

0000cd08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd0c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd0e:	8ba3      	ldrh	r3, [r4, #28]
{
    cd10:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cd12:	0719      	lsls	r1, r3, #28
{
    cd14:	4615      	mov	r5, r2
	if (processing) {
    cd16:	d412      	bmi.n	cd3e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cd18:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd1a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cd1e:	d164      	bne.n	cdea <process_event+0xe2>
			evt = process_recheck(mgr);
    cd20:	4620      	mov	r0, r4
    cd22:	f021 fd90 	bl	2e846 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cd26:	b188      	cbz	r0, cd4c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cd28:	3801      	subs	r0, #1
    cd2a:	2804      	cmp	r0, #4
    cd2c:	f200 8134 	bhi.w	cf98 <process_event+0x290>
    cd30:	e8df f010 	tbh	[pc, r0, lsl #1]
    cd34:	0132005b 	.word	0x0132005b
    cd38:	00d10081 	.word	0x00d10081
    cd3c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cd3e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cd40:	bf0c      	ite	eq
    cd42:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd46:	f043 0120 	orrne.w	r1, r3, #32
    cd4a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cd4c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd4e:	4620      	mov	r0, r4
    cd50:	f01b fd50 	bl	287f4 <z_spin_unlock_valid>
    cd54:	2800      	cmp	r0, #0
    cd56:	f040 819b 	bne.w	d090 <process_event+0x388>
    cd5a:	4998      	ldr	r1, [pc, #608]	; (cfbc <process_event+0x2b4>)
    cd5c:	23c2      	movs	r3, #194	; 0xc2
    cd5e:	4a98      	ldr	r2, [pc, #608]	; (cfc0 <process_event+0x2b8>)
    cd60:	4898      	ldr	r0, [pc, #608]	; (cfc4 <process_event+0x2bc>)
    cd62:	f021 fdf7 	bl	2e954 <assert_print>
    cd66:	4621      	mov	r1, r4
    cd68:	e0b0      	b.n	cecc <process_event+0x1c4>
    cd6a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cd6e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cd70:	2801      	cmp	r0, #1
    cd72:	d81e      	bhi.n	cdb2 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cd74:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cd76:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cd78:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cd7a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cd7e:	d114      	bne.n	cdaa <process_event+0xa2>
		*clients = mgr->clients;
    cd80:	463a      	mov	r2, r7
    cd82:	e003      	b.n	cd8c <process_event+0x84>
				mgr->refs += 1U;
    cd84:	8be0      	ldrh	r0, [r4, #30]
    cd86:	3001      	adds	r0, #1
    cd88:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cd8a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cd8c:	2a00      	cmp	r2, #0
    cd8e:	d1f9      	bne.n	cd84 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd90:	f023 0307 	bic.w	r3, r3, #7
    cd94:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cd98:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd9a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cd9c:	f021 fd53 	bl	2e846 <process_recheck>
    cda0:	b390      	cbz	r0, ce08 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cda2:	f042 0220 	orr.w	r2, r2, #32
    cda6:	83a2      	strh	r2, [r4, #28]
    cda8:	e02e      	b.n	ce08 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdaa:	f023 0307 	bic.w	r3, r3, #7
    cdae:	b29a      	uxth	r2, r3
}
    cdb0:	e7f2      	b.n	cd98 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cdb2:	2a04      	cmp	r2, #4
    cdb4:	d133      	bne.n	ce1e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdb6:	f023 0307 	bic.w	r3, r3, #7
    cdba:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    cdbc:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdbe:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cdc0:	f021 fd41 	bl	2e846 <process_recheck>
    cdc4:	b110      	cbz	r0, cdcc <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cdc6:	f042 0220 	orr.w	r2, r2, #32
    cdca:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdcc:	8ba3      	ldrh	r3, [r4, #28]
    cdce:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cdd2:	4589      	cmp	r9, r1
    cdd4:	f040 80ea 	bne.w	cfac <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cdd8:	8ba1      	ldrh	r1, [r4, #28]
    cdda:	06ca      	lsls	r2, r1, #27
    cddc:	f140 814f 	bpl.w	d07e <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cde0:	f021 0310 	bic.w	r3, r1, #16
    cde4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cde6:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    cdea:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cdee:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    cdf0:	f1b8 0f00 	cmp.w	r8, #0
    cdf4:	dab9      	bge.n	cd6a <process_event+0x62>
	list->head = NULL;
    cdf6:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cdf8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdfa:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    cdfe:	e9c4 2200 	strd	r2, r2, [r4]
    ce02:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce06:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce08:	8ba3      	ldrh	r3, [r4, #28]
    ce0a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ce0e:	4589      	cmp	r9, r1
    ce10:	f040 80cd 	bne.w	cfae <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    ce14:	2f00      	cmp	r7, #0
    ce16:	d0df      	beq.n	cdd8 <process_event+0xd0>
    ce18:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce1a:	46b2      	mov	sl, r6
    ce1c:	e044      	b.n	cea8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    ce1e:	496a      	ldr	r1, [pc, #424]	; (cfc8 <process_event+0x2c0>)
    ce20:	f240 131b 	movw	r3, #283	; 0x11b
    ce24:	4a69      	ldr	r2, [pc, #420]	; (cfcc <process_event+0x2c4>)
    ce26:	4867      	ldr	r0, [pc, #412]	; (cfc4 <process_event+0x2bc>)
    ce28:	f021 fd94 	bl	2e954 <assert_print>
    ce2c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    ce30:	4866      	ldr	r0, [pc, #408]	; (cfcc <process_event+0x2c4>)
    ce32:	f021 fd88 	bl	2e946 <assert_post_action>
    ce36:	b149      	cbz	r1, ce4c <process_event+0x144>
    ce38:	4965      	ldr	r1, [pc, #404]	; (cfd0 <process_event+0x2c8>)
    ce3a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    ce3e:	4a63      	ldr	r2, [pc, #396]	; (cfcc <process_event+0x2c4>)
    ce40:	4860      	ldr	r0, [pc, #384]	; (cfc4 <process_event+0x2bc>)
    ce42:	f021 fd87 	bl	2e954 <assert_print>
    ce46:	f44f 71ab 	mov.w	r1, #342	; 0x156
    ce4a:	e7f1      	b.n	ce30 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce4c:	6823      	ldr	r3, [r4, #0]
    ce4e:	b94b      	cbnz	r3, ce64 <process_event+0x15c>
    ce50:	4960      	ldr	r1, [pc, #384]	; (cfd4 <process_event+0x2cc>)
    ce52:	f240 1357 	movw	r3, #343	; 0x157
    ce56:	4a5d      	ldr	r2, [pc, #372]	; (cfcc <process_event+0x2c4>)
    ce58:	485a      	ldr	r0, [pc, #360]	; (cfc4 <process_event+0x2bc>)
    ce5a:	f021 fd7b 	bl	2e954 <assert_print>
    ce5e:	f240 1157 	movw	r1, #343	; 0x157
    ce62:	e7e5      	b.n	ce30 <process_event+0x128>
			transit = mgr->transitions->start;
    ce64:	6923      	ldr	r3, [r4, #16]
    ce66:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    ce68:	b94e      	cbnz	r6, ce7e <process_event+0x176>
    ce6a:	495b      	ldr	r1, [pc, #364]	; (cfd8 <process_event+0x2d0>)
    ce6c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    ce70:	4a56      	ldr	r2, [pc, #344]	; (cfcc <process_event+0x2c4>)
    ce72:	4854      	ldr	r0, [pc, #336]	; (cfc4 <process_event+0x2bc>)
    ce74:	f021 fd6e 	bl	2e954 <assert_print>
    ce78:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    ce7c:	e7d8      	b.n	ce30 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce7e:	460f      	mov	r7, r1
		res = 0;
    ce80:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce82:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce86:	8ba3      	ldrh	r3, [r4, #28]
    ce88:	f023 0307 	bic.w	r3, r3, #7
    ce8c:	f043 0306 	orr.w	r3, r3, #6
    ce90:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce92:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    ce94:	68a2      	ldr	r2, [r4, #8]
    ce96:	2a00      	cmp	r2, #0
    ce98:	f040 808b 	bne.w	cfb2 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    ce9c:	2f00      	cmp	r7, #0
    ce9e:	f040 808b 	bne.w	cfb8 <process_event+0x2b0>
		    || (transit != NULL)) {
    cea2:	2e00      	cmp	r6, #0
    cea4:	d098      	beq.n	cdd8 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cea6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cea8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    ceac:	f104 0b14 	add.w	fp, r4, #20
    ceb0:	4658      	mov	r0, fp
			mgr->flags = flags;
    ceb2:	83a3      	strh	r3, [r4, #28]
    ceb4:	f01b fc9e 	bl	287f4 <z_spin_unlock_valid>
    ceb8:	2800      	cmp	r0, #0
    ceba:	f040 8097 	bne.w	cfec <process_event+0x2e4>
    cebe:	493f      	ldr	r1, [pc, #252]	; (cfbc <process_event+0x2b4>)
    cec0:	23c2      	movs	r3, #194	; 0xc2
    cec2:	4a3f      	ldr	r2, [pc, #252]	; (cfc0 <process_event+0x2b8>)
    cec4:	483f      	ldr	r0, [pc, #252]	; (cfc4 <process_event+0x2bc>)
    cec6:	f021 fd45 	bl	2e954 <assert_print>
    ceca:	4659      	mov	r1, fp
    cecc:	4843      	ldr	r0, [pc, #268]	; (cfdc <process_event+0x2d4>)
    cece:	f021 fd41 	bl	2e954 <assert_print>
    ced2:	21c2      	movs	r1, #194	; 0xc2
    ced4:	e0ae      	b.n	d034 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ced6:	2902      	cmp	r1, #2
    ced8:	d009      	beq.n	ceee <process_event+0x1e6>
    ceda:	4941      	ldr	r1, [pc, #260]	; (cfe0 <process_event+0x2d8>)
    cedc:	f240 135d 	movw	r3, #349	; 0x15d
    cee0:	4a3a      	ldr	r2, [pc, #232]	; (cfcc <process_event+0x2c4>)
    cee2:	4838      	ldr	r0, [pc, #224]	; (cfc4 <process_event+0x2bc>)
    cee4:	f021 fd36 	bl	2e954 <assert_print>
    cee8:	f240 115d 	movw	r1, #349	; 0x15d
    ceec:	e7a0      	b.n	ce30 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ceee:	8be7      	ldrh	r7, [r4, #30]
    cef0:	b14f      	cbz	r7, cf06 <process_event+0x1fe>
    cef2:	493c      	ldr	r1, [pc, #240]	; (cfe4 <process_event+0x2dc>)
    cef4:	f44f 73af 	mov.w	r3, #350	; 0x15e
    cef8:	4a34      	ldr	r2, [pc, #208]	; (cfcc <process_event+0x2c4>)
    cefa:	4832      	ldr	r0, [pc, #200]	; (cfc4 <process_event+0x2bc>)
    cefc:	f021 fd2a 	bl	2e954 <assert_print>
    cf00:	f44f 71af 	mov.w	r1, #350	; 0x15e
    cf04:	e794      	b.n	ce30 <process_event+0x128>
			transit = mgr->transitions->stop;
    cf06:	6923      	ldr	r3, [r4, #16]
    cf08:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    cf0a:	b94e      	cbnz	r6, cf20 <process_event+0x218>
    cf0c:	4932      	ldr	r1, [pc, #200]	; (cfd8 <process_event+0x2d0>)
    cf0e:	f240 1361 	movw	r3, #353	; 0x161
    cf12:	4a2e      	ldr	r2, [pc, #184]	; (cfcc <process_event+0x2c4>)
    cf14:	482b      	ldr	r0, [pc, #172]	; (cfc4 <process_event+0x2bc>)
    cf16:	f021 fd1d 	bl	2e954 <assert_print>
    cf1a:	f240 1161 	movw	r1, #353	; 0x161
    cf1e:	e787      	b.n	ce30 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf20:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cf22:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf24:	f023 0307 	bic.w	r3, r3, #7
    cf28:	f043 0304 	orr.w	r3, r3, #4
    cf2c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf2e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf32:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf34:	e7ae      	b.n	ce94 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    cf36:	2901      	cmp	r1, #1
    cf38:	d009      	beq.n	cf4e <process_event+0x246>
    cf3a:	492b      	ldr	r1, [pc, #172]	; (cfe8 <process_event+0x2e0>)
    cf3c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    cf40:	4a22      	ldr	r2, [pc, #136]	; (cfcc <process_event+0x2c4>)
    cf42:	4820      	ldr	r0, [pc, #128]	; (cfc4 <process_event+0x2bc>)
    cf44:	f021 fd06 	bl	2e954 <assert_print>
    cf48:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cf4c:	e770      	b.n	ce30 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cf4e:	6823      	ldr	r3, [r4, #0]
    cf50:	b94b      	cbnz	r3, cf66 <process_event+0x25e>
    cf52:	4920      	ldr	r1, [pc, #128]	; (cfd4 <process_event+0x2cc>)
    cf54:	f240 1365 	movw	r3, #357	; 0x165
    cf58:	4a1c      	ldr	r2, [pc, #112]	; (cfcc <process_event+0x2c4>)
    cf5a:	481a      	ldr	r0, [pc, #104]	; (cfc4 <process_event+0x2bc>)
    cf5c:	f021 fcfa 	bl	2e954 <assert_print>
    cf60:	f240 1165 	movw	r1, #357	; 0x165
    cf64:	e764      	b.n	ce30 <process_event+0x128>
			transit = mgr->transitions->reset;
    cf66:	6923      	ldr	r3, [r4, #16]
    cf68:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    cf6a:	b94e      	cbnz	r6, cf80 <process_event+0x278>
    cf6c:	491a      	ldr	r1, [pc, #104]	; (cfd8 <process_event+0x2d0>)
    cf6e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cf72:	4a16      	ldr	r2, [pc, #88]	; (cfcc <process_event+0x2c4>)
    cf74:	4813      	ldr	r0, [pc, #76]	; (cfc4 <process_event+0x2bc>)
    cf76:	f021 fced 	bl	2e954 <assert_print>
    cf7a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cf7e:	e757      	b.n	ce30 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf80:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf82:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cf84:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cf86:	f023 0307 	bic.w	r3, r3, #7
    cf8a:	f043 0305 	orr.w	r3, r3, #5
    cf8e:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf90:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    cf94:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf96:	e77d      	b.n	ce94 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cf98:	490b      	ldr	r1, [pc, #44]	; (cfc8 <process_event+0x2c0>)
    cf9a:	f240 136b 	movw	r3, #363	; 0x16b
    cf9e:	4a0b      	ldr	r2, [pc, #44]	; (cfcc <process_event+0x2c4>)
    cfa0:	4808      	ldr	r0, [pc, #32]	; (cfc4 <process_event+0x2bc>)
    cfa2:	f021 fcd7 	bl	2e954 <assert_print>
    cfa6:	f240 116b 	movw	r1, #363	; 0x16b
    cfaa:	e741      	b.n	ce30 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    cfac:	2700      	movs	r7, #0
    cfae:	2600      	movs	r6, #0
    cfb0:	e770      	b.n	ce94 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cfb2:	f04f 0a01 	mov.w	sl, #1
    cfb6:	e777      	b.n	cea8 <process_event+0x1a0>
    cfb8:	4692      	mov	sl, r2
    cfba:	e775      	b.n	cea8 <process_event+0x1a0>
    cfbc:	000385e4 	.word	0x000385e4
    cfc0:	000385b7 	.word	0x000385b7
    cfc4:	000381c3 	.word	0x000381c3
    cfc8:	0003c13d 	.word	0x0003c13d
    cfcc:	00038514 	.word	0x00038514
    cfd0:	00038536 	.word	0x00038536
    cfd4:	00038542 	.word	0x00038542
    cfd8:	00038565 	.word	0x00038565
    cfdc:	000385fb 	.word	0x000385fb
    cfe0:	0003857c 	.word	0x0003857c
    cfe4:	00038592 	.word	0x00038592
    cfe8:	000385a1 	.word	0x000385a1
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cfec:	f385 8811 	msr	BASEPRI, r5
    cff0:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cff4:	f1ba 0f00 	cmp.w	sl, #0
    cff8:	d11e      	bne.n	d038 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cffa:	2f00      	cmp	r7, #0
    cffc:	d12f      	bne.n	d05e <process_event+0x356>
			if (transit != NULL) {
    cffe:	b116      	cbz	r6, d006 <process_event+0x2fe>
				transit(mgr, transition_complete);
    d000:	4620      	mov	r0, r4
    d002:	4926      	ldr	r1, [pc, #152]	; (d09c <process_event+0x394>)
    d004:	47b0      	blx	r6
	__asm__ volatile(
    d006:	f04f 0320 	mov.w	r3, #32
    d00a:	f3ef 8511 	mrs	r5, BASEPRI
    d00e:	f383 8812 	msr	BASEPRI_MAX, r3
    d012:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d016:	4658      	mov	r0, fp
    d018:	f01b fbde 	bl	287d8 <z_spin_lock_valid>
    d01c:	bb38      	cbnz	r0, d06e <process_event+0x366>
    d01e:	2394      	movs	r3, #148	; 0x94
    d020:	4a1f      	ldr	r2, [pc, #124]	; (d0a0 <process_event+0x398>)
    d022:	4920      	ldr	r1, [pc, #128]	; (d0a4 <process_event+0x39c>)
    d024:	4820      	ldr	r0, [pc, #128]	; (d0a8 <process_event+0x3a0>)
    d026:	f021 fc95 	bl	2e954 <assert_print>
    d02a:	4659      	mov	r1, fp
    d02c:	481f      	ldr	r0, [pc, #124]	; (d0ac <process_event+0x3a4>)
    d02e:	f021 fc91 	bl	2e954 <assert_print>
    d032:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d034:	481a      	ldr	r0, [pc, #104]	; (d0a0 <process_event+0x398>)
    d036:	e6fc      	b.n	ce32 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d038:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d03a:	2900      	cmp	r1, #0
    d03c:	d0dd      	beq.n	cffa <process_event+0x2f2>
	return node->next;
    d03e:	680d      	ldr	r5, [r1, #0]
    d040:	2900      	cmp	r1, #0
    d042:	d0da      	beq.n	cffa <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    d044:	4643      	mov	r3, r8
    d046:	464a      	mov	r2, r9
    d048:	4620      	mov	r0, r4
    d04a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    d04e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d050:	b11d      	cbz	r5, d05a <process_event+0x352>
    d052:	682b      	ldr	r3, [r5, #0]
    d054:	4629      	mov	r1, r5
    d056:	461d      	mov	r5, r3
    d058:	e7f2      	b.n	d040 <process_event+0x338>
    d05a:	462b      	mov	r3, r5
    d05c:	e7fa      	b.n	d054 <process_event+0x34c>
    d05e:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    d060:	4643      	mov	r3, r8
    d062:	464a      	mov	r2, r9
    d064:	4620      	mov	r0, r4
    d066:	683f      	ldr	r7, [r7, #0]
    d068:	f021 fc19 	bl	2e89e <notify_one>
    d06c:	e7c5      	b.n	cffa <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    d06e:	4658      	mov	r0, fp
    d070:	f01b fbce 	bl	28810 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d074:	8ba3      	ldrh	r3, [r4, #28]
    d076:	f023 0308 	bic.w	r3, r3, #8
    d07a:	83a3      	strh	r3, [r4, #28]
    d07c:	e6ac      	b.n	cdd8 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d07e:	068b      	lsls	r3, r1, #26
    d080:	f57f ae64 	bpl.w	cd4c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d084:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d088:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d08a:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    d08e:	e647      	b.n	cd20 <process_event+0x18>
	__asm__ volatile(
    d090:	f385 8811 	msr	BASEPRI, r5
    d094:	f3bf 8f6f 	isb	sy
}
    d098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d09c:	0000d0b1 	.word	0x0000d0b1
    d0a0:	000385b7 	.word	0x000385b7
    d0a4:	00038610 	.word	0x00038610
    d0a8:	000381c3 	.word	0x000381c3
    d0ac:	00038625 	.word	0x00038625

0000d0b0 <transition_complete>:
{
    d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0b2:	4604      	mov	r4, r0
    d0b4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d0b6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d0ba:	f04f 0320 	mov.w	r3, #32
    d0be:	f3ef 8711 	mrs	r7, BASEPRI
    d0c2:	f383 8812 	msr	BASEPRI_MAX, r3
    d0c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d0ca:	4630      	mov	r0, r6
    d0cc:	f01b fb84 	bl	287d8 <z_spin_lock_valid>
    d0d0:	b968      	cbnz	r0, d0ee <transition_complete+0x3e>
    d0d2:	2394      	movs	r3, #148	; 0x94
    d0d4:	4a0b      	ldr	r2, [pc, #44]	; (d104 <transition_complete+0x54>)
    d0d6:	490c      	ldr	r1, [pc, #48]	; (d108 <transition_complete+0x58>)
    d0d8:	480c      	ldr	r0, [pc, #48]	; (d10c <transition_complete+0x5c>)
    d0da:	f021 fc3b 	bl	2e954 <assert_print>
    d0de:	4631      	mov	r1, r6
    d0e0:	480b      	ldr	r0, [pc, #44]	; (d110 <transition_complete+0x60>)
    d0e2:	f021 fc37 	bl	2e954 <assert_print>
    d0e6:	2194      	movs	r1, #148	; 0x94
    d0e8:	4806      	ldr	r0, [pc, #24]	; (d104 <transition_complete+0x54>)
    d0ea:	f021 fc2c 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
    d0ee:	4630      	mov	r0, r6
    d0f0:	f01b fb8e 	bl	28810 <z_spin_lock_set_owner>
	mgr->last_res = res;
    d0f4:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d0f6:	463a      	mov	r2, r7
    d0f8:	4620      	mov	r0, r4
}
    d0fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d0fe:	2101      	movs	r1, #1
    d100:	f7ff be02 	b.w	cd08 <process_event>
    d104:	000385b7 	.word	0x000385b7
    d108:	00038610 	.word	0x00038610
    d10c:	000381c3 	.word	0x000381c3
    d110:	00038625 	.word	0x00038625

0000d114 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d118:	4604      	mov	r4, r0
    d11a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d11c:	f021 fbaf 	bl	2e87e <validate_args>

	if (rv < 0) {
    d120:	1e05      	subs	r5, r0, #0
    d122:	db67      	blt.n	d1f4 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d124:	f104 0914 	add.w	r9, r4, #20
    d128:	f04f 0320 	mov.w	r3, #32
    d12c:	f3ef 8a11 	mrs	sl, BASEPRI
    d130:	f383 8812 	msr	BASEPRI_MAX, r3
    d134:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d138:	4648      	mov	r0, r9
    d13a:	f01b fb4d 	bl	287d8 <z_spin_lock_valid>
    d13e:	4680      	mov	r8, r0
    d140:	b960      	cbnz	r0, d15c <onoff_request+0x48>
    d142:	2394      	movs	r3, #148	; 0x94
    d144:	4a37      	ldr	r2, [pc, #220]	; (d224 <onoff_request+0x110>)
    d146:	4938      	ldr	r1, [pc, #224]	; (d228 <onoff_request+0x114>)
    d148:	4838      	ldr	r0, [pc, #224]	; (d22c <onoff_request+0x118>)
    d14a:	f021 fc03 	bl	2e954 <assert_print>
    d14e:	4649      	mov	r1, r9
    d150:	4837      	ldr	r0, [pc, #220]	; (d230 <onoff_request+0x11c>)
    d152:	f021 fbff 	bl	2e954 <assert_print>
    d156:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d158:	4832      	ldr	r0, [pc, #200]	; (d224 <onoff_request+0x110>)
    d15a:	e040      	b.n	d1de <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d15c:	4648      	mov	r0, r9
    d15e:	f01b fb57 	bl	28810 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d162:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d166:	8be3      	ldrh	r3, [r4, #30]
    d168:	8ba6      	ldrh	r6, [r4, #28]
    d16a:	4293      	cmp	r3, r2
    d16c:	f006 0607 	and.w	r6, r6, #7
    d170:	d043      	beq.n	d1fa <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d172:	2e02      	cmp	r6, #2
    d174:	d113      	bne.n	d19e <onoff_request+0x8a>
	rv = state;
    d176:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d178:	3301      	adds	r3, #1
    d17a:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d17c:	4648      	mov	r0, r9
    d17e:	f01b fb39 	bl	287f4 <z_spin_unlock_valid>
    d182:	2800      	cmp	r0, #0
    d184:	d13f      	bne.n	d206 <onoff_request+0xf2>
    d186:	23c2      	movs	r3, #194	; 0xc2
    d188:	4a26      	ldr	r2, [pc, #152]	; (d224 <onoff_request+0x110>)
    d18a:	492a      	ldr	r1, [pc, #168]	; (d234 <onoff_request+0x120>)
    d18c:	4827      	ldr	r0, [pc, #156]	; (d22c <onoff_request+0x118>)
    d18e:	f021 fbe1 	bl	2e954 <assert_print>
    d192:	4649      	mov	r1, r9
    d194:	4828      	ldr	r0, [pc, #160]	; (d238 <onoff_request+0x124>)
    d196:	f021 fbdd 	bl	2e954 <assert_print>
    d19a:	21c2      	movs	r1, #194	; 0xc2
    d19c:	e7dc      	b.n	d158 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d19e:	2e06      	cmp	r6, #6
    d1a0:	d813      	bhi.n	d1ca <onoff_request+0xb6>
    d1a2:	e8df f006 	tbb	[pc, r6]
    d1a6:	2d09      	.short	0x2d09
    d1a8:	04091212 	.word	0x04091212
    d1ac:	09          	.byte	0x09
    d1ad:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d1ae:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d1b2:	f04f 0800 	mov.w	r8, #0
    d1b6:	e7e1      	b.n	d17c <onoff_request+0x68>
	parent->next = child;
    d1b8:	2300      	movs	r3, #0
    d1ba:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d1bc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d1be:	b983      	cbnz	r3, d1e2 <onoff_request+0xce>
	list->head = node;
    d1c0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d1c4:	b186      	cbz	r6, d1e8 <onoff_request+0xd4>
	rv = state;
    d1c6:	4635      	mov	r5, r6
    d1c8:	e7f3      	b.n	d1b2 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d1ca:	491c      	ldr	r1, [pc, #112]	; (d23c <onoff_request+0x128>)
    d1cc:	4817      	ldr	r0, [pc, #92]	; (d22c <onoff_request+0x118>)
    d1ce:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d1d2:	4a1b      	ldr	r2, [pc, #108]	; (d240 <onoff_request+0x12c>)
    d1d4:	f021 fbbe 	bl	2e954 <assert_print>
    d1d8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d1dc:	4818      	ldr	r0, [pc, #96]	; (d240 <onoff_request+0x12c>)
    d1de:	f021 fbb2 	bl	2e946 <assert_post_action>
	parent->next = child;
    d1e2:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d1e4:	6067      	str	r7, [r4, #4]
}
    d1e6:	e7ed      	b.n	d1c4 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d1e8:	4652      	mov	r2, sl
    d1ea:	2102      	movs	r1, #2
    d1ec:	4620      	mov	r0, r4
    d1ee:	f7ff fd8b 	bl	cd08 <process_event>
    d1f2:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d1f4:	4628      	mov	r0, r5
    d1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d1fa:	f06f 050a 	mvn.w	r5, #10
    d1fe:	e7d8      	b.n	d1b2 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d200:	f06f 0504 	mvn.w	r5, #4
    d204:	e7d5      	b.n	d1b2 <onoff_request+0x9e>
	__asm__ volatile(
    d206:	f38a 8811 	msr	BASEPRI, sl
    d20a:	f3bf 8f6f 	isb	sy
		if (notify) {
    d20e:	f1b8 0f00 	cmp.w	r8, #0
    d212:	d0ef      	beq.n	d1f4 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d214:	2300      	movs	r3, #0
    d216:	4632      	mov	r2, r6
    d218:	4639      	mov	r1, r7
    d21a:	4620      	mov	r0, r4
    d21c:	f021 fb3f 	bl	2e89e <notify_one>
    d220:	e7e8      	b.n	d1f4 <onoff_request+0xe0>
    d222:	bf00      	nop
    d224:	000385b7 	.word	0x000385b7
    d228:	00038610 	.word	0x00038610
    d22c:	000381c3 	.word	0x000381c3
    d230:	00038625 	.word	0x00038625
    d234:	000385e4 	.word	0x000385e4
    d238:	000385fb 	.word	0x000385fb
    d23c:	000385a1 	.word	0x000385a1
    d240:	00038514 	.word	0x00038514

0000d244 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d246:	4605      	mov	r5, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d248:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d24c:	f04f 0320 	mov.w	r3, #32
    d250:	f3ef 8711 	mrs	r7, BASEPRI
    d254:	f383 8812 	msr	BASEPRI_MAX, r3
    d258:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d25c:	4630      	mov	r0, r6
    d25e:	f01b fabb 	bl	287d8 <z_spin_lock_valid>
    d262:	b960      	cbnz	r0, d27e <onoff_release+0x3a>
    d264:	2394      	movs	r3, #148	; 0x94
    d266:	4a24      	ldr	r2, [pc, #144]	; (d2f8 <onoff_release+0xb4>)
    d268:	4924      	ldr	r1, [pc, #144]	; (d2fc <onoff_release+0xb8>)
    d26a:	4825      	ldr	r0, [pc, #148]	; (d300 <onoff_release+0xbc>)
    d26c:	f021 fb72 	bl	2e954 <assert_print>
    d270:	4631      	mov	r1, r6
    d272:	4824      	ldr	r0, [pc, #144]	; (d304 <onoff_release+0xc0>)
    d274:	f021 fb6e 	bl	2e954 <assert_print>
    d278:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d27a:	481f      	ldr	r0, [pc, #124]	; (d2f8 <onoff_release+0xb4>)
    d27c:	e029      	b.n	d2d2 <onoff_release+0x8e>
	z_spin_lock_set_owner(l);
    d27e:	4630      	mov	r0, r6
    d280:	f01b fac6 	bl	28810 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d284:	8bac      	ldrh	r4, [r5, #28]
    d286:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    d28a:	2c02      	cmp	r4, #2
    d28c:	d015      	beq.n	d2ba <onoff_release+0x76>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    d28e:	2c01      	cmp	r4, #1
    d290:	bf0c      	ite	eq
    d292:	f06f 0404 	mvneq.w	r4, #4
    d296:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d29a:	4630      	mov	r0, r6
    d29c:	f01b faaa 	bl	287f4 <z_spin_unlock_valid>
    d2a0:	bb28      	cbnz	r0, d2ee <onoff_release+0xaa>
    d2a2:	23c2      	movs	r3, #194	; 0xc2
    d2a4:	4a14      	ldr	r2, [pc, #80]	; (d2f8 <onoff_release+0xb4>)
    d2a6:	4918      	ldr	r1, [pc, #96]	; (d308 <onoff_release+0xc4>)
    d2a8:	4815      	ldr	r0, [pc, #84]	; (d300 <onoff_release+0xbc>)
    d2aa:	f021 fb53 	bl	2e954 <assert_print>
    d2ae:	4631      	mov	r1, r6
    d2b0:	4816      	ldr	r0, [pc, #88]	; (d30c <onoff_release+0xc8>)
    d2b2:	f021 fb4f 	bl	2e954 <assert_print>
    d2b6:	21c2      	movs	r1, #194	; 0xc2
    d2b8:	e7df      	b.n	d27a <onoff_release+0x36>
		}
		goto out;
	}

	__ASSERT_NO_MSG(mgr->refs > 0);
    d2ba:	8beb      	ldrh	r3, [r5, #30]
    d2bc:	b95b      	cbnz	r3, d2d6 <onoff_release+0x92>
    d2be:	4914      	ldr	r1, [pc, #80]	; (d310 <onoff_release+0xcc>)
    d2c0:	480f      	ldr	r0, [pc, #60]	; (d300 <onoff_release+0xbc>)
    d2c2:	f240 13ef 	movw	r3, #495	; 0x1ef
    d2c6:	4a13      	ldr	r2, [pc, #76]	; (d314 <onoff_release+0xd0>)
    d2c8:	f021 fb44 	bl	2e954 <assert_print>
    d2cc:	f240 11ef 	movw	r1, #495	; 0x1ef
    d2d0:	4810      	ldr	r0, [pc, #64]	; (d314 <onoff_release+0xd0>)
    d2d2:	f021 fb38 	bl	2e946 <assert_post_action>
	mgr->refs -= 1U;
    d2d6:	3b01      	subs	r3, #1
    d2d8:	b29b      	uxth	r3, r3
    d2da:	83eb      	strh	r3, [r5, #30]
	stop = (mgr->refs == 0);

out:
	if (stop) {
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d1dc      	bne.n	d29a <onoff_release+0x56>
		process_event(mgr, EVT_RECHECK, key);
    d2e0:	463a      	mov	r2, r7
    d2e2:	4621      	mov	r1, r4
    d2e4:	4628      	mov	r0, r5
    d2e6:	f7ff fd0f 	bl	cd08 <process_event>
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    d2ea:	4620      	mov	r0, r4
    d2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    d2ee:	f387 8811 	msr	BASEPRI, r7
    d2f2:	f3bf 8f6f 	isb	sy
	return rv;
    d2f6:	e7f8      	b.n	d2ea <onoff_release+0xa6>
    d2f8:	000385b7 	.word	0x000385b7
    d2fc:	00038610 	.word	0x00038610
    d300:	000381c3 	.word	0x000381c3
    d304:	00038625 	.word	0x00038625
    d308:	000385e4 	.word	0x000385e4
    d30c:	000385fb 	.word	0x000385fb
    d310:	0003863d 	.word	0x0003863d
    d314:	00038514 	.word	0x00038514

0000d318 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d31c:	460f      	mov	r7, r1
	if ((mgr == NULL) || (cli == NULL)) {
    d31e:	4605      	mov	r5, r0
    d320:	2800      	cmp	r0, #0
    d322:	d04f      	beq.n	d3c4 <onoff_cancel+0xac>
    d324:	2900      	cmp	r1, #0
    d326:	d04d      	beq.n	d3c4 <onoff_cancel+0xac>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d328:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d32c:	f04f 0320 	mov.w	r3, #32
    d330:	f3ef 8811 	mrs	r8, BASEPRI
    d334:	f383 8812 	msr	BASEPRI_MAX, r3
    d338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d33c:	4630      	mov	r0, r6
    d33e:	f01b fa4b 	bl	287d8 <z_spin_lock_valid>
    d342:	b960      	cbnz	r0, d35e <onoff_cancel+0x46>
    d344:	2394      	movs	r3, #148	; 0x94
    d346:	4a21      	ldr	r2, [pc, #132]	; (d3cc <onoff_cancel+0xb4>)
    d348:	4921      	ldr	r1, [pc, #132]	; (d3d0 <onoff_cancel+0xb8>)
    d34a:	4822      	ldr	r0, [pc, #136]	; (d3d4 <onoff_cancel+0xbc>)
    d34c:	f021 fb02 	bl	2e954 <assert_print>
    d350:	4631      	mov	r1, r6
    d352:	4821      	ldr	r0, [pc, #132]	; (d3d8 <onoff_cancel+0xc0>)
    d354:	f021 fafe 	bl	2e954 <assert_print>
    d358:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d35a:	481c      	ldr	r0, [pc, #112]	; (d3cc <onoff_cancel+0xb4>)
    d35c:	e017      	b.n	d38e <onoff_cancel+0x76>
	z_spin_lock_set_owner(l);
    d35e:	4630      	mov	r0, r6
    d360:	f01b fa56 	bl	28810 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    d364:	4639      	mov	r1, r7
    d366:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d368:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    d36a:	f021 fa51 	bl	2e810 <sys_slist_find_and_remove>
    d36e:	b180      	cbz	r0, d392 <onoff_cancel+0x7a>
    d370:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
    d374:	1f23      	subs	r3, r4, #4
    d376:	2b02      	cmp	r3, #2
    d378:	d90d      	bls.n	d396 <onoff_cancel+0x7e>
    d37a:	4918      	ldr	r1, [pc, #96]	; (d3dc <onoff_cancel+0xc4>)
    d37c:	4815      	ldr	r0, [pc, #84]	; (d3d4 <onoff_cancel+0xbc>)
    d37e:	f240 232d 	movw	r3, #557	; 0x22d
    d382:	4a17      	ldr	r2, [pc, #92]	; (d3e0 <onoff_cancel+0xc8>)
    d384:	f021 fae6 	bl	2e954 <assert_print>
    d388:	f240 212d 	movw	r1, #557	; 0x22d
    d38c:	4814      	ldr	r0, [pc, #80]	; (d3e0 <onoff_cancel+0xc8>)
    d38e:	f021 fada 	bl	2e946 <assert_post_action>
	int rv = -EALREADY;
    d392:	f06f 0477 	mvn.w	r4, #119	; 0x77
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d396:	4630      	mov	r0, r6
    d398:	f01b fa2c 	bl	287f4 <z_spin_unlock_valid>
    d39c:	b958      	cbnz	r0, d3b6 <onoff_cancel+0x9e>
    d39e:	23c2      	movs	r3, #194	; 0xc2
    d3a0:	4a0a      	ldr	r2, [pc, #40]	; (d3cc <onoff_cancel+0xb4>)
    d3a2:	4910      	ldr	r1, [pc, #64]	; (d3e4 <onoff_cancel+0xcc>)
    d3a4:	480b      	ldr	r0, [pc, #44]	; (d3d4 <onoff_cancel+0xbc>)
    d3a6:	f021 fad5 	bl	2e954 <assert_print>
    d3aa:	4631      	mov	r1, r6
    d3ac:	480e      	ldr	r0, [pc, #56]	; (d3e8 <onoff_cancel+0xd0>)
    d3ae:	f021 fad1 	bl	2e954 <assert_print>
    d3b2:	21c2      	movs	r1, #194	; 0xc2
    d3b4:	e7d1      	b.n	d35a <onoff_cancel+0x42>
	__asm__ volatile(
    d3b6:	f388 8811 	msr	BASEPRI, r8
    d3ba:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    d3be:	4620      	mov	r0, r4
    d3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    d3c4:	f06f 0415 	mvn.w	r4, #21
    d3c8:	e7f9      	b.n	d3be <onoff_cancel+0xa6>
    d3ca:	bf00      	nop
    d3cc:	000385b7 	.word	0x000385b7
    d3d0:	00038610 	.word	0x00038610
    d3d4:	000381c3 	.word	0x000381c3
    d3d8:	00038625 	.word	0x00038625
    d3dc:	0003864b 	.word	0x0003864b
    d3e0:	00038514 	.word	0x00038514
    d3e4:	000385e4 	.word	0x000385e4
    d3e8:	000385fb 	.word	0x000385fb

0000d3ec <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d3ec:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d3ee:	6842      	ldr	r2, [r0, #4]
    d3f0:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d3f2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d3f6:	2a02      	cmp	r2, #2
	notify->result = res;
    d3f8:	6081      	str	r1, [r0, #8]
	switch (method) {
    d3fa:	d00a      	beq.n	d412 <sys_notify_finalize+0x26>
    d3fc:	2a03      	cmp	r2, #3
    d3fe:	f04f 0100 	mov.w	r1, #0
    d402:	d003      	beq.n	d40c <sys_notify_finalize+0x20>
    d404:	2a01      	cmp	r2, #1
    d406:	d10a      	bne.n	d41e <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d408:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d40a:	e006      	b.n	d41a <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d40c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d40e:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d410:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d412:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d414:	2200      	movs	r2, #0
    d416:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d418:	b958      	cbnz	r0, d432 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d41a:	2000      	movs	r0, #0
    d41c:	e7f8      	b.n	d410 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d41e:	4906      	ldr	r1, [pc, #24]	; (d438 <sys_notify_finalize+0x4c>)
    d420:	4806      	ldr	r0, [pc, #24]	; (d43c <sys_notify_finalize+0x50>)
    d422:	2345      	movs	r3, #69	; 0x45
    d424:	4a06      	ldr	r2, [pc, #24]	; (d440 <sys_notify_finalize+0x54>)
    d426:	f021 fa95 	bl	2e954 <assert_print>
    d42a:	2145      	movs	r1, #69	; 0x45
    d42c:	4804      	ldr	r0, [pc, #16]	; (d440 <sys_notify_finalize+0x54>)
    d42e:	f021 fa8a 	bl	2e946 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d432:	f01e fad3 	bl	2b9dc <z_impl_k_poll_signal_raise>
    d436:	e7f0      	b.n	d41a <sys_notify_finalize+0x2e>
    d438:	0003c13d 	.word	0x0003c13d
    d43c:	000381c3 	.word	0x000381c3
    d440:	000386c2 	.word	0x000386c2

0000d444 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d444:	b5f0      	push	{r4, r5, r6, r7, lr}
    d446:	4602      	mov	r2, r0
    d448:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    d44a:	270a      	movs	r7, #10
	size_t val = 0;
    d44c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    d44e:	4e07      	ldr	r6, [pc, #28]	; (d46c <extract_decimal+0x28>)
    d450:	460b      	mov	r3, r1
    d452:	781c      	ldrb	r4, [r3, #0]
    d454:	3101      	adds	r1, #1
    d456:	5d35      	ldrb	r5, [r6, r4]
    d458:	076d      	lsls	r5, r5, #29
    d45a:	d401      	bmi.n	d460 <extract_decimal+0x1c>
	}
	*str = sp;
    d45c:	6013      	str	r3, [r2, #0]
	return val;
}
    d45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d460:	fb07 4300 	mla	r3, r7, r0, r4
    d464:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d468:	e7f2      	b.n	d450 <extract_decimal+0xc>
    d46a:	bf00      	nop
    d46c:	00040f97 	.word	0x00040f97

0000d470 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d474:	4615      	mov	r5, r2
    d476:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    d478:	78d3      	ldrb	r3, [r2, #3]
    d47a:	4a22      	ldr	r2, [pc, #136]	; (d504 <encode_uint+0x94>)
	switch (specifier) {
    d47c:	2b6f      	cmp	r3, #111	; 0x6f
    d47e:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d482:	4680      	mov	r8, r0
    d484:	460f      	mov	r7, r1
    d486:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d48a:	d029      	beq.n	d4e0 <encode_uint+0x70>
    d48c:	d824      	bhi.n	d4d8 <encode_uint+0x68>
		return 10;
    d48e:	2b58      	cmp	r3, #88	; 0x58
    d490:	bf0c      	ite	eq
    d492:	2610      	moveq	r6, #16
    d494:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d496:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d49a:	4632      	mov	r2, r6
    d49c:	2300      	movs	r3, #0
    d49e:	4640      	mov	r0, r8
    d4a0:	4639      	mov	r1, r7
    d4a2:	f7fb fd93 	bl	8fcc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d4a6:	2a09      	cmp	r2, #9
    d4a8:	b2d4      	uxtb	r4, r2
    d4aa:	d81e      	bhi.n	d4ea <encode_uint+0x7a>
    d4ac:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d4ae:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d4b0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d4b2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d4b6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d4ba:	d301      	bcc.n	d4c0 <encode_uint+0x50>
    d4bc:	45d1      	cmp	r9, sl
    d4be:	d811      	bhi.n	d4e4 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d4c0:	782b      	ldrb	r3, [r5, #0]
    d4c2:	069b      	lsls	r3, r3, #26
    d4c4:	d505      	bpl.n	d4d2 <encode_uint+0x62>
		if (radix == 8) {
    d4c6:	2e08      	cmp	r6, #8
    d4c8:	d115      	bne.n	d4f6 <encode_uint+0x86>
			conv->altform_0 = true;
    d4ca:	78ab      	ldrb	r3, [r5, #2]
    d4cc:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d4d0:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d4d2:	4648      	mov	r0, r9
    d4d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d4d8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d4dc:	2b70      	cmp	r3, #112	; 0x70
    d4de:	e7d7      	b.n	d490 <encode_uint+0x20>
	switch (specifier) {
    d4e0:	2608      	movs	r6, #8
    d4e2:	e7d8      	b.n	d496 <encode_uint+0x26>
		value /= radix;
    d4e4:	4680      	mov	r8, r0
    d4e6:	460f      	mov	r7, r1
    d4e8:	e7d7      	b.n	d49a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d4ea:	f1bb 0f01 	cmp.w	fp, #1
    d4ee:	bf0c      	ite	eq
    d4f0:	3437      	addeq	r4, #55	; 0x37
    d4f2:	3457      	addne	r4, #87	; 0x57
    d4f4:	e7db      	b.n	d4ae <encode_uint+0x3e>
		} else if (radix == 16) {
    d4f6:	2e10      	cmp	r6, #16
    d4f8:	d1eb      	bne.n	d4d2 <encode_uint+0x62>
			conv->altform_0c = true;
    d4fa:	78ab      	ldrb	r3, [r5, #2]
    d4fc:	f043 0310 	orr.w	r3, r3, #16
    d500:	e7e6      	b.n	d4d0 <encode_uint+0x60>
    d502:	bf00      	nop
    d504:	00040f97 	.word	0x00040f97

0000d508 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	468a      	mov	sl, r1
    d50e:	4616      	mov	r6, r2
    d510:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d512:	2500      	movs	r5, #0
{
    d514:	b097      	sub	sp, #92	; 0x5c
    d516:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d518:	7830      	ldrb	r0, [r6, #0]
    d51a:	b908      	cbnz	r0, d520 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d51c:	4628      	mov	r0, r5
    d51e:	e34a      	b.n	dbb6 <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    d520:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    d522:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d524:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d526:	d007      	beq.n	d538 <z_cbvprintf_impl+0x30>
			OUTC('%');
    d528:	4651      	mov	r1, sl
    d52a:	9b03      	ldr	r3, [sp, #12]
    d52c:	4798      	blx	r3
    d52e:	2800      	cmp	r0, #0
    d530:	f2c0 8341 	blt.w	dbb6 <z_cbvprintf_impl+0x6ae>
    d534:	3501      	adds	r5, #1
		if (bps == NULL) {
    d536:	e1f0      	b.n	d91a <z_cbvprintf_impl+0x412>
		} state = {
    d538:	2218      	movs	r2, #24
    d53a:	2100      	movs	r1, #0
    d53c:	a810      	add	r0, sp, #64	; 0x40
    d53e:	f027 fd75 	bl	3502c <memset>
	if (*sp == '%') {
    d542:	7873      	ldrb	r3, [r6, #1]
    d544:	2b25      	cmp	r3, #37	; 0x25
    d546:	f000 80a3 	beq.w	d690 <z_cbvprintf_impl+0x188>
    d54a:	2300      	movs	r3, #0
    d54c:	4698      	mov	r8, r3
    d54e:	469e      	mov	lr, r3
    d550:	469c      	mov	ip, r3
    d552:	4618      	mov	r0, r3
    d554:	1c71      	adds	r1, r6, #1
    d556:	460f      	mov	r7, r1
		switch (*sp) {
    d558:	f811 2b01 	ldrb.w	r2, [r1], #1
    d55c:	2a2b      	cmp	r2, #43	; 0x2b
    d55e:	f000 80c6 	beq.w	d6ee <z_cbvprintf_impl+0x1e6>
    d562:	f200 80bd 	bhi.w	d6e0 <z_cbvprintf_impl+0x1d8>
    d566:	2a20      	cmp	r2, #32
    d568:	f000 80c4 	beq.w	d6f4 <z_cbvprintf_impl+0x1ec>
    d56c:	2a23      	cmp	r2, #35	; 0x23
    d56e:	f000 80c4 	beq.w	d6fa <z_cbvprintf_impl+0x1f2>
    d572:	b12b      	cbz	r3, d580 <z_cbvprintf_impl+0x78>
    d574:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d57c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d580:	f1b8 0f00 	cmp.w	r8, #0
    d584:	d005      	beq.n	d592 <z_cbvprintf_impl+0x8a>
    d586:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d58a:	f043 0320 	orr.w	r3, r3, #32
    d58e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d592:	f1be 0f00 	cmp.w	lr, #0
    d596:	d005      	beq.n	d5a4 <z_cbvprintf_impl+0x9c>
    d598:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d59c:	f043 0310 	orr.w	r3, r3, #16
    d5a0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d5a4:	f1bc 0f00 	cmp.w	ip, #0
    d5a8:	d005      	beq.n	d5b6 <z_cbvprintf_impl+0xae>
    d5aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d5ae:	f043 0308 	orr.w	r3, r3, #8
    d5b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d5b6:	b128      	cbz	r0, d5c4 <z_cbvprintf_impl+0xbc>
    d5b8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d5bc:	f043 0304 	orr.w	r3, r3, #4
    d5c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d5c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d5c8:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d5cc:	2944      	cmp	r1, #68	; 0x44
    d5ce:	d103      	bne.n	d5d8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    d5d0:	f36f 1386 	bfc	r3, #6, #1
    d5d4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d5d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d5dc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5e2:	9709      	str	r7, [sp, #36]	; 0x24
    d5e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d5e8:	f040 808c 	bne.w	d704 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    d5ec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d5f0:	f043 0301 	orr.w	r3, r3, #1
    d5f4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d5f8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    d5fa:	781a      	ldrb	r2, [r3, #0]
    d5fc:	2a2e      	cmp	r2, #46	; 0x2e
    d5fe:	bf0c      	ite	eq
    d600:	2101      	moveq	r1, #1
    d602:	2100      	movne	r1, #0
    d604:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d608:	f361 0241 	bfi	r2, r1, #1, #1
    d60c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d610:	d10c      	bne.n	d62c <z_cbvprintf_impl+0x124>
	++sp;
    d612:	1c5a      	adds	r2, r3, #1
    d614:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d616:	785a      	ldrb	r2, [r3, #1]
    d618:	2a2a      	cmp	r2, #42	; 0x2a
    d61a:	f040 8083 	bne.w	d724 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    d61e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d622:	3302      	adds	r3, #2
		conv->prec_star = true;
    d624:	f042 0204 	orr.w	r2, r2, #4
    d628:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d62c:	781a      	ldrb	r2, [r3, #0]
    d62e:	2a6c      	cmp	r2, #108	; 0x6c
    d630:	f000 80a4 	beq.w	d77c <z_cbvprintf_impl+0x274>
    d634:	f200 8086 	bhi.w	d744 <z_cbvprintf_impl+0x23c>
    d638:	2a68      	cmp	r2, #104	; 0x68
    d63a:	f000 808c 	beq.w	d756 <z_cbvprintf_impl+0x24e>
    d63e:	2a6a      	cmp	r2, #106	; 0x6a
    d640:	f000 80a5 	beq.w	d78e <z_cbvprintf_impl+0x286>
    d644:	2a4c      	cmp	r2, #76	; 0x4c
    d646:	f000 80aa 	beq.w	d79e <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    d64a:	461a      	mov	r2, r3
    d64c:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d650:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d652:	9204      	str	r2, [sp, #16]
    d654:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d658:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d65c:	f200 8117 	bhi.w	d88e <z_cbvprintf_impl+0x386>
    d660:	2b6d      	cmp	r3, #109	; 0x6d
    d662:	f200 80a9 	bhi.w	d7b8 <z_cbvprintf_impl+0x2b0>
    d666:	2b69      	cmp	r3, #105	; 0x69
    d668:	f200 8111 	bhi.w	d88e <z_cbvprintf_impl+0x386>
    d66c:	2b57      	cmp	r3, #87	; 0x57
    d66e:	f200 80be 	bhi.w	d7ee <z_cbvprintf_impl+0x2e6>
    d672:	2b41      	cmp	r3, #65	; 0x41
    d674:	d003      	beq.n	d67e <z_cbvprintf_impl+0x176>
    d676:	3b45      	subs	r3, #69	; 0x45
    d678:	2b02      	cmp	r3, #2
    d67a:	f200 8108 	bhi.w	d88e <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    d67e:	2204      	movs	r2, #4
    d680:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d684:	f362 0302 	bfi	r3, r2, #0, #3
    d688:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d68c:	2301      	movs	r3, #1
			break;
    d68e:	e0ca      	b.n	d826 <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    d690:	1cb2      	adds	r2, r6, #2
    d692:	9204      	str	r2, [sp, #16]
    d694:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d698:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d69c:	07d9      	lsls	r1, r3, #31
    d69e:	f140 80fd 	bpl.w	d89c <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    d6a2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    d6a6:	f1b8 0f00 	cmp.w	r8, #0
    d6aa:	da07      	bge.n	d6bc <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    d6ac:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d6b0:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    d6b4:	f042 0204 	orr.w	r2, r2, #4
    d6b8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d6bc:	075a      	lsls	r2, r3, #29
    d6be:	f140 80f6 	bpl.w	d8ae <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    d6c2:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d6c6:	f1bb 0f00 	cmp.w	fp, #0
    d6ca:	f280 80f5 	bge.w	d8b8 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    d6ce:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d6d2:	f36f 0341 	bfc	r3, #1, #1
    d6d6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d6da:	f04f 3bff 	mov.w	fp, #4294967295
    d6de:	e0eb      	b.n	d8b8 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    d6e0:	2a2d      	cmp	r2, #45	; 0x2d
    d6e2:	d00d      	beq.n	d700 <z_cbvprintf_impl+0x1f8>
    d6e4:	2a30      	cmp	r2, #48	; 0x30
    d6e6:	f47f af44 	bne.w	d572 <z_cbvprintf_impl+0x6a>
    d6ea:	2301      	movs	r3, #1
	} while (loop);
    d6ec:	e733      	b.n	d556 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    d6ee:	f04f 0c01 	mov.w	ip, #1
    d6f2:	e730      	b.n	d556 <z_cbvprintf_impl+0x4e>
    d6f4:	f04f 0e01 	mov.w	lr, #1
    d6f8:	e72d      	b.n	d556 <z_cbvprintf_impl+0x4e>
    d6fa:	f04f 0801 	mov.w	r8, #1
    d6fe:	e72a      	b.n	d556 <z_cbvprintf_impl+0x4e>
    d700:	2001      	movs	r0, #1
    d702:	e728      	b.n	d556 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    d704:	a809      	add	r0, sp, #36	; 0x24
    d706:	f7ff fe9d 	bl	d444 <extract_decimal>
	if (sp != wp) {
    d70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d70c:	42bb      	cmp	r3, r7
    d70e:	f43f af74 	beq.w	d5fa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    d712:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d716:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d718:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d71a:	f360 0241 	bfi	r2, r0, #1, #1
    d71e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d722:	e76a      	b.n	d5fa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    d724:	a809      	add	r0, sp, #36	; 0x24
    d726:	f7ff fe8d 	bl	d444 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d72a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d72e:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d730:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d734:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d738:	f362 0341 	bfi	r3, r2, #1, #1
    d73c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d740:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d742:	e773      	b.n	d62c <z_cbvprintf_impl+0x124>
	switch (*sp) {
    d744:	2a74      	cmp	r2, #116	; 0x74
    d746:	d026      	beq.n	d796 <z_cbvprintf_impl+0x28e>
    d748:	2a7a      	cmp	r2, #122	; 0x7a
    d74a:	f47f af7e 	bne.w	d64a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    d74e:	2106      	movs	r1, #6
    d750:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d754:	e00c      	b.n	d770 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    d756:	785a      	ldrb	r2, [r3, #1]
    d758:	2a68      	cmp	r2, #104	; 0x68
    d75a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d75e:	d106      	bne.n	d76e <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    d760:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d762:	f361 02c6 	bfi	r2, r1, #3, #4
    d766:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d76a:	3302      	adds	r3, #2
    d76c:	e76d      	b.n	d64a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    d76e:	2102      	movs	r1, #2
    d770:	f361 02c6 	bfi	r2, r1, #3, #4
    d774:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d778:	3301      	adds	r3, #1
    d77a:	e766      	b.n	d64a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    d77c:	785a      	ldrb	r2, [r3, #1]
    d77e:	2a6c      	cmp	r2, #108	; 0x6c
    d780:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d784:	d101      	bne.n	d78a <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    d786:	2104      	movs	r1, #4
    d788:	e7eb      	b.n	d762 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    d78a:	2103      	movs	r1, #3
    d78c:	e7f0      	b.n	d770 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    d78e:	2105      	movs	r1, #5
    d790:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d794:	e7ec      	b.n	d770 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    d796:	2107      	movs	r1, #7
    d798:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d79c:	e7e8      	b.n	d770 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    d79e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d7a2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d7a6:	f022 0202 	bic.w	r2, r2, #2
    d7aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d7ae:	f042 0202 	orr.w	r2, r2, #2
    d7b2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d7b6:	e7df      	b.n	d778 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    d7b8:	3b6e      	subs	r3, #110	; 0x6e
    d7ba:	b2d9      	uxtb	r1, r3
    d7bc:	2301      	movs	r3, #1
    d7be:	408b      	lsls	r3, r1
    d7c0:	f240 4182 	movw	r1, #1154	; 0x482
    d7c4:	420b      	tst	r3, r1
    d7c6:	d138      	bne.n	d83a <z_cbvprintf_impl+0x332>
    d7c8:	f013 0f24 	tst.w	r3, #36	; 0x24
    d7cc:	d152      	bne.n	d874 <z_cbvprintf_impl+0x36c>
    d7ce:	07df      	lsls	r7, r3, #31
    d7d0:	d55d      	bpl.n	d88e <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    d7d2:	2103      	movs	r1, #3
    d7d4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d7d8:	f361 0302 	bfi	r3, r1, #0, #3
    d7dc:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d7e0:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d7e4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    d7e8:	4243      	negs	r3, r0
    d7ea:	4143      	adcs	r3, r0
    d7ec:	e01b      	b.n	d826 <z_cbvprintf_impl+0x31e>
    d7ee:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d7f0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d7f4:	b2c9      	uxtb	r1, r1
    d7f6:	fa00 f101 	lsl.w	r1, r0, r1
    d7fa:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d7fe:	f47f af3e 	bne.w	d67e <z_cbvprintf_impl+0x176>
    d802:	f640 0701 	movw	r7, #2049	; 0x801
    d806:	4239      	tst	r1, r7
    d808:	d11d      	bne.n	d846 <z_cbvprintf_impl+0x33e>
    d80a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d80e:	d03e      	beq.n	d88e <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    d810:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d814:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d818:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d81c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d81e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d822:	d034      	beq.n	d88e <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    d824:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d826:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d82a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d82e:	430b      	orrs	r3, r1
    d830:	f363 0241 	bfi	r2, r3, #1, #1
    d834:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d838:	e72e      	b.n	d698 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    d83a:	2102      	movs	r1, #2
    d83c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d840:	f361 0302 	bfi	r3, r1, #0, #3
    d844:	e7e8      	b.n	d818 <z_cbvprintf_impl+0x310>
    d846:	2002      	movs	r0, #2
    d848:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d84c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d850:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d854:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d856:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d85a:	bf02      	ittt	eq
    d85c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d860:	f041 0101 	orreq.w	r1, r1, #1
    d864:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d868:	2b63      	cmp	r3, #99	; 0x63
    d86a:	d1db      	bne.n	d824 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d86c:	1e13      	subs	r3, r2, #0
    d86e:	bf18      	it	ne
    d870:	2301      	movne	r3, #1
    d872:	e7d8      	b.n	d826 <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    d874:	2103      	movs	r1, #3
    d876:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d87a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d87e:	f361 0302 	bfi	r3, r1, #0, #3
    d882:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d886:	bf14      	ite	ne
    d888:	2301      	movne	r3, #1
    d88a:	2300      	moveq	r3, #0
    d88c:	e7cb      	b.n	d826 <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    d88e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d892:	f043 0301 	orr.w	r3, r3, #1
    d896:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d89a:	e7c3      	b.n	d824 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    d89c:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d8a0:	2a00      	cmp	r2, #0
		int width = -1;
    d8a2:	bfac      	ite	ge
    d8a4:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    d8a8:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    d8ac:	e706      	b.n	d6bc <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    d8ae:	079f      	lsls	r7, r3, #30
    d8b0:	f57f af13 	bpl.w	d6da <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    d8b4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d8b8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d8ba:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d8be:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d8c2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d8c6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d8ca:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d8cc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d8d0:	d133      	bne.n	d93a <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    d8d2:	1ecb      	subs	r3, r1, #3
    d8d4:	2b04      	cmp	r3, #4
    d8d6:	d804      	bhi.n	d8e2 <z_cbvprintf_impl+0x3da>
    d8d8:	e8df f003 	tbb	[pc, r3]
    d8dc:	21464621 	.word	0x21464621
    d8e0:	21          	.byte	0x21
    d8e1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d8e2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d8e4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d8e6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d8ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d8ee:	d11c      	bne.n	d92a <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    d8f0:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d8f4:	17da      	asrs	r2, r3, #31
    d8f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d8fa:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d8fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d900:	f013 0703 	ands.w	r7, r3, #3
    d904:	d050      	beq.n	d9a8 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    d906:	4632      	mov	r2, r6
    d908:	4651      	mov	r1, sl
    d90a:	9b04      	ldr	r3, [sp, #16]
    d90c:	9803      	ldr	r0, [sp, #12]
    d90e:	f021 f803 	bl	2e918 <outs>
    d912:	2800      	cmp	r0, #0
    d914:	f2c0 814f 	blt.w	dbb6 <z_cbvprintf_impl+0x6ae>
    d918:	4405      	add	r5, r0
			continue;
    d91a:	9e04      	ldr	r6, [sp, #16]
    d91c:	e5fc      	b.n	d518 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d91e:	f854 3b04 	ldr.w	r3, [r4], #4
    d922:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d924:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d928:	e7e8      	b.n	d8fc <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    d92a:	2902      	cmp	r1, #2
    d92c:	d1e5      	bne.n	d8fa <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    d92e:	b21a      	sxth	r2, r3
    d930:	f343 33c0 	sbfx	r3, r3, #15, #1
    d934:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d938:	e7df      	b.n	d8fa <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d93a:	2b02      	cmp	r3, #2
    d93c:	d124      	bne.n	d988 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    d93e:	1ecb      	subs	r3, r1, #3
    d940:	2b04      	cmp	r3, #4
    d942:	d804      	bhi.n	d94e <z_cbvprintf_impl+0x446>
    d944:	e8df f003 	tbb	[pc, r3]
    d948:	18101018 	.word	0x18101018
    d94c:	18          	.byte	0x18
    d94d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d94e:	2901      	cmp	r1, #1
    d950:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d954:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d958:	d014      	beq.n	d984 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    d95a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d95c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d960:	d1cc      	bne.n	d8fc <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    d962:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d964:	9310      	str	r3, [sp, #64]	; 0x40
    d966:	e7c9      	b.n	d8fc <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    d968:	3407      	adds	r4, #7
    d96a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d96e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d972:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d976:	e7c1      	b.n	d8fc <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    d978:	f854 3b04 	ldr.w	r3, [r4], #4
    d97c:	9310      	str	r3, [sp, #64]	; 0x40
    d97e:	2300      	movs	r3, #0
    d980:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d982:	e7bb      	b.n	d8fc <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    d984:	b2db      	uxtb	r3, r3
    d986:	e7cd      	b.n	d924 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    d988:	2b04      	cmp	r3, #4
    d98a:	d108      	bne.n	d99e <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    d98c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d98e:	f024 0407 	bic.w	r4, r4, #7
    d992:	e9d4 2300 	ldrd	r2, r3, [r4]
    d996:	3408      	adds	r4, #8
    d998:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d99c:	e7ae      	b.n	d8fc <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d99e:	2b03      	cmp	r3, #3
    d9a0:	d1ac      	bne.n	d8fc <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    d9a2:	f854 3b04 	ldr.w	r3, [r4], #4
    d9a6:	e7dd      	b.n	d964 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    d9a8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d9ac:	2878      	cmp	r0, #120	; 0x78
    d9ae:	d8b4      	bhi.n	d91a <z_cbvprintf_impl+0x412>
    d9b0:	2862      	cmp	r0, #98	; 0x62
    d9b2:	d81d      	bhi.n	d9f0 <z_cbvprintf_impl+0x4e8>
    d9b4:	2825      	cmp	r0, #37	; 0x25
    d9b6:	f43f adb7 	beq.w	d528 <z_cbvprintf_impl+0x20>
    d9ba:	2858      	cmp	r0, #88	; 0x58
    d9bc:	d1ad      	bne.n	d91a <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d9be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d9c2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d9c6:	9300      	str	r3, [sp, #0]
    d9c8:	aa12      	add	r2, sp, #72	; 0x48
    d9ca:	ab0a      	add	r3, sp, #40	; 0x28
    d9cc:	f7ff fd50 	bl	d470 <encode_uint>
			if (precision >= 0) {
    d9d0:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d9d4:	4681      	mov	r9, r0
			if (precision >= 0) {
    d9d6:	f280 8098 	bge.w	db0a <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    d9da:	f1b9 0f00 	cmp.w	r9, #0
    d9de:	d09c      	beq.n	d91a <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    d9e0:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    d9e4:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    d9e8:	2f00      	cmp	r7, #0
    d9ea:	d050      	beq.n	da8e <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    d9ec:	3301      	adds	r3, #1
    d9ee:	e04e      	b.n	da8e <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    d9f0:	3863      	subs	r0, #99	; 0x63
    d9f2:	2815      	cmp	r0, #21
    d9f4:	d891      	bhi.n	d91a <z_cbvprintf_impl+0x412>
    d9f6:	a201      	add	r2, pc, #4	; (adr r2, d9fc <z_cbvprintf_impl+0x4f4>)
    d9f8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d9fc:	0000da7d 	.word	0x0000da7d
    da00:	0000dae1 	.word	0x0000dae1
    da04:	0000d91b 	.word	0x0000d91b
    da08:	0000d91b 	.word	0x0000d91b
    da0c:	0000d91b 	.word	0x0000d91b
    da10:	0000d91b 	.word	0x0000d91b
    da14:	0000dae1 	.word	0x0000dae1
    da18:	0000d91b 	.word	0x0000d91b
    da1c:	0000d91b 	.word	0x0000d91b
    da20:	0000d91b 	.word	0x0000d91b
    da24:	0000d91b 	.word	0x0000d91b
    da28:	0000db6b 	.word	0x0000db6b
    da2c:	0000db05 	.word	0x0000db05
    da30:	0000db2d 	.word	0x0000db2d
    da34:	0000d91b 	.word	0x0000d91b
    da38:	0000d91b 	.word	0x0000d91b
    da3c:	0000da55 	.word	0x0000da55
    da40:	0000d91b 	.word	0x0000d91b
    da44:	0000db05 	.word	0x0000db05
    da48:	0000d91b 	.word	0x0000d91b
    da4c:	0000d91b 	.word	0x0000d91b
    da50:	0000db05 	.word	0x0000db05
			if (precision >= 0) {
    da54:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    da58:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    da5c:	db0a      	blt.n	da74 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    da5e:	4659      	mov	r1, fp
    da60:	4648      	mov	r0, r9
    da62:	f027 fcae 	bl	353c2 <strnlen>
		if (bps == NULL) {
    da66:	f1b9 0f00 	cmp.w	r9, #0
    da6a:	f43f af56 	beq.w	d91a <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    da6e:	eb09 0600 	add.w	r6, r9, r0
    da72:	e076      	b.n	db62 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    da74:	4648      	mov	r0, r9
    da76:	f7fb fc50 	bl	931a <strlen>
    da7a:	e7f8      	b.n	da6e <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    da7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    da7e:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    da80:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    da84:	2301      	movs	r3, #1
			bpe = buf + 1;
    da86:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    da8a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    da8e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    da92:	f011 0210 	ands.w	r2, r1, #16
    da96:	9206      	str	r2, [sp, #24]
    da98:	f000 8081 	beq.w	db9e <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    da9c:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    da9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    daa0:	4413      	add	r3, r2
    daa2:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    daa4:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    daa6:	bf44      	itt	mi
    daa8:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    daaa:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    daac:	f1b8 0f00 	cmp.w	r8, #0
    dab0:	f340 808e 	ble.w	dbd0 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    dab4:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    dab8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    dabc:	0758      	lsls	r0, r3, #29
    dabe:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    dac2:	f100 8085 	bmi.w	dbd0 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    dac6:	0659      	lsls	r1, r3, #25
    dac8:	d578      	bpl.n	dbbc <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    daca:	b13f      	cbz	r7, dadc <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    dacc:	4651      	mov	r1, sl
    dace:	4638      	mov	r0, r7
    dad0:	9b03      	ldr	r3, [sp, #12]
    dad2:	4798      	blx	r3
    dad4:	2800      	cmp	r0, #0
    dad6:	db6e      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dad8:	465f      	mov	r7, fp
    dada:	3501      	adds	r5, #1
					pad = '0';
    dadc:	2330      	movs	r3, #48	; 0x30
    dade:	e06e      	b.n	dbbe <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    dae0:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    dae2:	bf5a      	itte	pl
    dae4:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    dae8:	015f      	lslpl	r7, r3, #5
				sign = '+';
    daea:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    daec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    daf0:	2b00      	cmp	r3, #0
    daf2:	f6bf af64 	bge.w	d9be <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    daf6:	4252      	negs	r2, r2
    daf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    dafc:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    dafe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    db02:	e75c      	b.n	d9be <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    db04:	2700      	movs	r7, #0
    db06:	e75a      	b.n	d9be <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    db08:	2700      	movs	r7, #0
				conv->flag_zero = false;
    db0a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    db0e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    db12:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    db16:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    db1a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    db1c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    db20:	f67f af5b 	bls.w	d9da <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    db24:	ebab 0303 	sub.w	r3, fp, r3
    db28:	9313      	str	r3, [sp, #76]	; 0x4c
    db2a:	e756      	b.n	d9da <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    db2c:	9810      	ldr	r0, [sp, #64]	; 0x40
    db2e:	b380      	cbz	r0, db92 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    db30:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    db34:	ab0a      	add	r3, sp, #40	; 0x28
    db36:	2100      	movs	r1, #0
    db38:	9600      	str	r6, [sp, #0]
    db3a:	aa12      	add	r2, sp, #72	; 0x48
    db3c:	f7ff fc98 	bl	d470 <encode_uint>
				conv->altform_0c = true;
    db40:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    db44:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    db48:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    db4c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    db50:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    db54:	4681      	mov	r9, r0
				conv->altform_0c = true;
    db56:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    db5a:	dad5      	bge.n	db08 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    db5c:	2800      	cmp	r0, #0
    db5e:	f43f aedc 	beq.w	d91a <z_cbvprintf_impl+0x412>
		char sign = 0;
    db62:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    db64:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    db68:	e791      	b.n	da8e <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    db6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    db6c:	2907      	cmp	r1, #7
    db6e:	f63f aed4 	bhi.w	d91a <z_cbvprintf_impl+0x412>
    db72:	e8df f001 	tbb	[pc, r1]
    db76:	040c      	.short	0x040c
    db78:	08080c06 	.word	0x08080c06
    db7c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    db7e:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    db80:	e6cb      	b.n	d91a <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    db82:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    db84:	e6c9      	b.n	d91a <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    db86:	17ea      	asrs	r2, r5, #31
    db88:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    db8c:	e6c5      	b.n	d91a <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    db8e:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    db90:	e6c3      	b.n	d91a <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    db92:	4e31      	ldr	r6, [pc, #196]	; (dc58 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    db94:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    db96:	2305      	movs	r3, #5
    db98:	f1a6 0905 	sub.w	r9, r6, #5
    db9c:	e777      	b.n	da8e <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    db9e:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    dba0:	bf48      	it	mi
    dba2:	3301      	addmi	r3, #1
    dba4:	e77b      	b.n	da9e <z_cbvprintf_impl+0x596>
					OUTC(pad);
    dba6:	4618      	mov	r0, r3
    dba8:	9307      	str	r3, [sp, #28]
    dbaa:	4651      	mov	r1, sl
    dbac:	9b03      	ldr	r3, [sp, #12]
    dbae:	4798      	blx	r3
    dbb0:	2800      	cmp	r0, #0
    dbb2:	9b07      	ldr	r3, [sp, #28]
    dbb4:	da04      	bge.n	dbc0 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    dbb6:	b017      	add	sp, #92	; 0x5c
    dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    dbbc:	2320      	movs	r3, #32
					pad = '0';
    dbbe:	46c3      	mov	fp, r8
				while (width-- > 0) {
    dbc0:	4659      	mov	r1, fp
    dbc2:	2900      	cmp	r1, #0
    dbc4:	f10b 3bff 	add.w	fp, fp, #4294967295
    dbc8:	dced      	bgt.n	dba6 <z_cbvprintf_impl+0x69e>
    dbca:	4445      	add	r5, r8
    dbcc:	46d8      	mov	r8, fp
    dbce:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    dbd0:	b137      	cbz	r7, dbe0 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    dbd2:	4651      	mov	r1, sl
    dbd4:	4638      	mov	r0, r7
    dbd6:	9b03      	ldr	r3, [sp, #12]
    dbd8:	4798      	blx	r3
    dbda:	2800      	cmp	r0, #0
    dbdc:	dbeb      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dbde:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    dbe0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    dbe4:	06da      	lsls	r2, r3, #27
    dbe6:	d401      	bmi.n	dbec <z_cbvprintf_impl+0x6e4>
    dbe8:	071b      	lsls	r3, r3, #28
    dbea:	d506      	bpl.n	dbfa <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    dbec:	4651      	mov	r1, sl
    dbee:	2030      	movs	r0, #48	; 0x30
    dbf0:	9b03      	ldr	r3, [sp, #12]
    dbf2:	4798      	blx	r3
    dbf4:	2800      	cmp	r0, #0
    dbf6:	dbde      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dbf8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    dbfa:	9b06      	ldr	r3, [sp, #24]
    dbfc:	b13b      	cbz	r3, dc0e <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    dbfe:	4651      	mov	r1, sl
    dc00:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    dc04:	9b03      	ldr	r3, [sp, #12]
    dc06:	4798      	blx	r3
    dc08:	2800      	cmp	r0, #0
    dc0a:	dbd4      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dc0c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    dc0e:	9f05      	ldr	r7, [sp, #20]
    dc10:	442f      	add	r7, r5
    dc12:	e006      	b.n	dc22 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    dc14:	4651      	mov	r1, sl
    dc16:	2030      	movs	r0, #48	; 0x30
    dc18:	9b03      	ldr	r3, [sp, #12]
    dc1a:	4798      	blx	r3
    dc1c:	2800      	cmp	r0, #0
    dc1e:	dbca      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dc20:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    dc22:	1b7b      	subs	r3, r7, r5
    dc24:	2b00      	cmp	r3, #0
    dc26:	dcf5      	bgt.n	dc14 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    dc28:	4633      	mov	r3, r6
    dc2a:	464a      	mov	r2, r9
    dc2c:	4651      	mov	r1, sl
    dc2e:	9803      	ldr	r0, [sp, #12]
    dc30:	f020 fe72 	bl	2e918 <outs>
    dc34:	2800      	cmp	r0, #0
    dc36:	dbbe      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dc38:	4405      	add	r5, r0
		while (width > 0) {
    dc3a:	44a8      	add	r8, r5
    dc3c:	eba8 0305 	sub.w	r3, r8, r5
    dc40:	2b00      	cmp	r3, #0
    dc42:	f77f ae6a 	ble.w	d91a <z_cbvprintf_impl+0x412>
			OUTC(' ');
    dc46:	4651      	mov	r1, sl
    dc48:	2020      	movs	r0, #32
    dc4a:	9b03      	ldr	r3, [sp, #12]
    dc4c:	4798      	blx	r3
    dc4e:	2800      	cmp	r0, #0
    dc50:	dbb1      	blt.n	dbb6 <z_cbvprintf_impl+0x6ae>
    dc52:	3501      	adds	r5, #1
			--width;
    dc54:	e7f2      	b.n	dc3c <z_cbvprintf_impl+0x734>
    dc56:	bf00      	nop
    dc58:	000386ea 	.word	0x000386ea

0000dc5c <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    dc5c:	b538      	push	{r3, r4, r5, lr}
    dc5e:	460d      	mov	r5, r1
    dc60:	4604      	mov	r4, r0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    dc62:	2220      	movs	r2, #32
    dc64:	2100      	movs	r1, #0
    dc66:	f027 f9e1 	bl	3502c <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    dc6a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    dc6c:	68eb      	ldr	r3, [r5, #12]
    dc6e:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    dc70:	68ab      	ldr	r3, [r5, #8]
    dc72:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    dc74:	682b      	ldr	r3, [r5, #0]
    dc76:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    dc78:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    dc7a:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    dc7c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    dc7e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    dc80:	b123      	cbz	r3, dc8c <mpsc_pbuf_init+0x30>
    dc82:	1e59      	subs	r1, r3, #1
    dc84:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    dc86:	bf08      	it	eq
    dc88:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    dc8c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    dc8e:	2201      	movs	r2, #1
    dc90:	2100      	movs	r1, #0
    dc92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dc96:	f026 ffcc 	bl	34c32 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    dc9a:	b148      	cbz	r0, dcb0 <mpsc_pbuf_init+0x54>
    dc9c:	4905      	ldr	r1, [pc, #20]	; (dcb4 <mpsc_pbuf_init+0x58>)
    dc9e:	4806      	ldr	r0, [pc, #24]	; (dcb8 <mpsc_pbuf_init+0x5c>)
    dca0:	232e      	movs	r3, #46	; 0x2e
    dca2:	4a06      	ldr	r2, [pc, #24]	; (dcbc <mpsc_pbuf_init+0x60>)
    dca4:	f020 fe56 	bl	2e954 <assert_print>
    dca8:	212e      	movs	r1, #46	; 0x2e
    dcaa:	4804      	ldr	r0, [pc, #16]	; (dcbc <mpsc_pbuf_init+0x60>)
    dcac:	f020 fe4b 	bl	2e946 <assert_post_action>
	ARG_UNUSED(err);
}
    dcb0:	bd38      	pop	{r3, r4, r5, pc}
    dcb2:	bf00      	nop
    dcb4:	00038711 	.word	0x00038711
    dcb8:	000381c3 	.word	0x000381c3
    dcbc:	000386eb 	.word	0x000386eb

0000dcc0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    dcc4:	2700      	movs	r7, #0
{
    dcc6:	b089      	sub	sp, #36	; 0x24
    dcc8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    dccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    dcce:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
    dcd0:	428b      	cmp	r3, r1
{
    dcd2:	4688      	mov	r8, r1
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    dcd4:	46ba      	mov	sl, r7
	union mpsc_pbuf_generic *dropped_item = NULL;
    dcd6:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
    dcd8:	9707      	str	r7, [sp, #28]
	if (wlen > (buffer->size)) {
    dcda:	d353      	bcc.n	dd84 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
    dcdc:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    dce0:	f04f 0320 	mov.w	r3, #32
    dce4:	f3ef 8b11 	mrs	fp, BASEPRI
    dce8:	f383 8812 	msr	BASEPRI_MAX, r3
    dcec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dcf0:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
    dcf2:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dcf4:	f01a fd70 	bl	287d8 <z_spin_lock_valid>
    dcf8:	b958      	cbnz	r0, dd12 <mpsc_pbuf_alloc+0x52>
    dcfa:	2394      	movs	r3, #148	; 0x94
    dcfc:	4a4a      	ldr	r2, [pc, #296]	; (de28 <mpsc_pbuf_alloc+0x168>)
    dcfe:	494b      	ldr	r1, [pc, #300]	; (de2c <mpsc_pbuf_alloc+0x16c>)
    dd00:	484b      	ldr	r0, [pc, #300]	; (de30 <mpsc_pbuf_alloc+0x170>)
    dd02:	f020 fe27 	bl	2e954 <assert_print>
    dd06:	4631      	mov	r1, r6
    dd08:	484a      	ldr	r0, [pc, #296]	; (de34 <mpsc_pbuf_alloc+0x174>)
    dd0a:	f020 fe23 	bl	2e954 <assert_print>
    dd0e:	2194      	movs	r1, #148	; 0x94
    dd10:	e05e      	b.n	ddd0 <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
    dd12:	4630      	mov	r0, r6
    dd14:	f01a fd7c 	bl	28810 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
    dd18:	9a07      	ldr	r2, [sp, #28]
    dd1a:	b12a      	cbz	r2, dd28 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    dd1c:	4639      	mov	r1, r7
    dd1e:	4620      	mov	r0, r4
    dd20:	f020 fef9 	bl	2eb16 <post_drop_action>
			tmp_wr_idx_shift = 0;
    dd24:	2300      	movs	r3, #0
    dd26:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
    dd28:	a906      	add	r1, sp, #24
    dd2a:	4620      	mov	r0, r4
    dd2c:	f020 fe1f 	bl	2e96e <free_space>

		if (free_wlen >= wlen) {
    dd30:	9906      	ldr	r1, [sp, #24]
		wrap = free_space(buffer, &free_wlen);
    dd32:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
    dd34:	4541      	cmp	r1, r8
    dd36:	d32e      	bcc.n	dd96 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    dd38:	6822      	ldr	r2, [r4, #0]
			item =
    dd3a:	6a23      	ldr	r3, [r4, #32]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    dd3c:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    dd3e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    dd42:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    dd46:	f021 0103 	bic.w	r1, r1, #3
    dd4a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    dd4e:	6821      	ldr	r1, [r4, #0]
    dd50:	4642      	mov	r2, r8
    dd52:	f020 fe30 	bl	2e9b6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    dd56:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    dd58:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    dd5a:	4298      	cmp	r0, r3
    dd5c:	d016      	beq.n	dd8c <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    dd5e:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd60:	4630      	mov	r0, r6
    dd62:	f01a fd47 	bl	287f4 <z_spin_unlock_valid>
    dd66:	b340      	cbz	r0, ddba <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
    dd68:	f389 8811 	msr	BASEPRI, r9
    dd6c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    dd70:	9905      	ldr	r1, [sp, #20]
    dd72:	b129      	cbz	r1, dd80 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    dd74:	69a2      	ldr	r2, [r4, #24]
    dd76:	b10a      	cbz	r2, dd7c <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
    dd78:	4620      	mov	r0, r4
    dd7a:	4790      	blx	r2
			}
			dropped_item = NULL;
    dd7c:	2300      	movs	r3, #0
    dd7e:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    dd80:	2d00      	cmp	r5, #0
    dd82:	d1ad      	bne.n	dce0 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    dd84:	4650      	mov	r0, sl
    dd86:	b009      	add	sp, #36	; 0x24
    dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    dd8c:	6923      	ldr	r3, [r4, #16]
    dd8e:	f043 0308 	orr.w	r3, r3, #8
    dd92:	6123      	str	r3, [r4, #16]
    dd94:	e7e3      	b.n	dd5e <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
    dd96:	b118      	cbz	r0, dda0 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
    dd98:	4620      	mov	r0, r4
    dd9a:	f020 fe26 	bl	2e9ea <add_skip_item>
			cont = true;
    dd9e:	e7df      	b.n	dd60 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    dda0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    dda4:	4313      	orrs	r3, r2
    dda6:	d036      	beq.n	de16 <mpsc_pbuf_alloc+0x156>
    dda8:	9103      	str	r1, [sp, #12]
    ddaa:	f026 feed 	bl	34b88 <k_is_in_isr>
    ddae:	9903      	ldr	r1, [sp, #12]
    ddb0:	bb88      	cbnz	r0, de16 <mpsc_pbuf_alloc+0x156>
    ddb2:	4630      	mov	r0, r6
    ddb4:	f01a fd1e 	bl	287f4 <z_spin_unlock_valid>
    ddb8:	b968      	cbnz	r0, ddd6 <mpsc_pbuf_alloc+0x116>
    ddba:	23c2      	movs	r3, #194	; 0xc2
    ddbc:	4a1a      	ldr	r2, [pc, #104]	; (de28 <mpsc_pbuf_alloc+0x168>)
    ddbe:	491e      	ldr	r1, [pc, #120]	; (de38 <mpsc_pbuf_alloc+0x178>)
    ddc0:	481b      	ldr	r0, [pc, #108]	; (de30 <mpsc_pbuf_alloc+0x170>)
    ddc2:	f020 fdc7 	bl	2e954 <assert_print>
    ddc6:	4631      	mov	r1, r6
    ddc8:	481c      	ldr	r0, [pc, #112]	; (de3c <mpsc_pbuf_alloc+0x17c>)
    ddca:	f020 fdc3 	bl	2e954 <assert_print>
    ddce:	21c2      	movs	r1, #194	; 0xc2
    ddd0:	4815      	ldr	r0, [pc, #84]	; (de28 <mpsc_pbuf_alloc+0x168>)
    ddd2:	f020 fdb8 	bl	2e946 <assert_post_action>
    ddd6:	f38b 8811 	msr	BASEPRI, fp
    ddda:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    ddde:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dde2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    dde6:	f01a fff3 	bl	28dd0 <z_impl_k_sem_take>
    ddea:	4605      	mov	r5, r0
	__asm__ volatile(
    ddec:	f04f 0320 	mov.w	r3, #32
    ddf0:	f3ef 8911 	mrs	r9, BASEPRI
    ddf4:	f383 8812 	msr	BASEPRI_MAX, r3
    ddf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ddfc:	4630      	mov	r0, r6
    ddfe:	f01a fceb 	bl	287d8 <z_spin_lock_valid>
    de02:	2800      	cmp	r0, #0
    de04:	f43f af79 	beq.w	dcfa <mpsc_pbuf_alloc+0x3a>
			cont = (err == 0) ? true : false;
    de08:	fab5 f585 	clz	r5, r5
	z_spin_lock_set_owner(l);
    de0c:	4630      	mov	r0, r6
    de0e:	f01a fcff 	bl	28810 <z_spin_lock_set_owner>
    de12:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    de14:	e7a4      	b.n	dd60 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
    de16:	4620      	mov	r0, r4
    de18:	ab07      	add	r3, sp, #28
    de1a:	aa05      	add	r2, sp, #20
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    de1c:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    de1e:	f020 fe03 	bl	2ea28 <drop_item_locked>
    de22:	4605      	mov	r5, r0
    de24:	e79c      	b.n	dd60 <mpsc_pbuf_alloc+0xa0>
    de26:	bf00      	nop
    de28:	000385b7 	.word	0x000385b7
    de2c:	00038610 	.word	0x00038610
    de30:	000381c3 	.word	0x000381c3
    de34:	00038625 	.word	0x00038625
    de38:	000385e4 	.word	0x000385e4
    de3c:	000385fb 	.word	0x000385fb

0000de40 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de44:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    de46:	69c3      	ldr	r3, [r0, #28]
    de48:	4608      	mov	r0, r1
{
    de4a:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    de4c:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    de4e:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    de52:	4607      	mov	r7, r0
    de54:	f04f 0320 	mov.w	r3, #32
    de58:	f3ef 8811 	mrs	r8, BASEPRI
    de5c:	f383 8812 	msr	BASEPRI_MAX, r3
    de60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    de64:	4628      	mov	r0, r5
    de66:	f01a fcb7 	bl	287d8 <z_spin_lock_valid>
    de6a:	b968      	cbnz	r0, de88 <mpsc_pbuf_commit+0x48>
    de6c:	2394      	movs	r3, #148	; 0x94
    de6e:	4a19      	ldr	r2, [pc, #100]	; (ded4 <mpsc_pbuf_commit+0x94>)
    de70:	4919      	ldr	r1, [pc, #100]	; (ded8 <mpsc_pbuf_commit+0x98>)
    de72:	481a      	ldr	r0, [pc, #104]	; (dedc <mpsc_pbuf_commit+0x9c>)
    de74:	f020 fd6e 	bl	2e954 <assert_print>
    de78:	4629      	mov	r1, r5
    de7a:	4819      	ldr	r0, [pc, #100]	; (dee0 <mpsc_pbuf_commit+0xa0>)
    de7c:	f020 fd6a 	bl	2e954 <assert_print>
    de80:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de82:	4814      	ldr	r0, [pc, #80]	; (ded4 <mpsc_pbuf_commit+0x94>)
    de84:	f020 fd5f 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
    de88:	4628      	mov	r0, r5
    de8a:	f01a fcc1 	bl	28810 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    de8e:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    de90:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    de92:	f043 0301 	orr.w	r3, r3, #1
    de96:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    de98:	6861      	ldr	r1, [r4, #4]
    de9a:	4620      	mov	r0, r4
    de9c:	f020 fd8b 	bl	2e9b6 <idx_inc>
    dea0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    dea2:	4620      	mov	r0, r4
    dea4:	f020 fe52 	bl	2eb4c <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dea8:	4628      	mov	r0, r5
    deaa:	f01a fca3 	bl	287f4 <z_spin_unlock_valid>
    deae:	b958      	cbnz	r0, dec8 <mpsc_pbuf_commit+0x88>
    deb0:	23c2      	movs	r3, #194	; 0xc2
    deb2:	4a08      	ldr	r2, [pc, #32]	; (ded4 <mpsc_pbuf_commit+0x94>)
    deb4:	490b      	ldr	r1, [pc, #44]	; (dee4 <mpsc_pbuf_commit+0xa4>)
    deb6:	4809      	ldr	r0, [pc, #36]	; (dedc <mpsc_pbuf_commit+0x9c>)
    deb8:	f020 fd4c 	bl	2e954 <assert_print>
    debc:	4629      	mov	r1, r5
    debe:	480a      	ldr	r0, [pc, #40]	; (dee8 <mpsc_pbuf_commit+0xa8>)
    dec0:	f020 fd48 	bl	2e954 <assert_print>
    dec4:	21c2      	movs	r1, #194	; 0xc2
    dec6:	e7dc      	b.n	de82 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    dec8:	f388 8811 	msr	BASEPRI, r8
    decc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    ded0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ded4:	000385b7 	.word	0x000385b7
    ded8:	00038610 	.word	0x00038610
    dedc:	000381c3 	.word	0x000381c3
    dee0:	00038625 	.word	0x00038625
    dee4:	000385e4 	.word	0x000385e4
    dee8:	000385fb 	.word	0x000385fb

0000deec <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    def0:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    def2:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    def6:	f04f 0320 	mov.w	r3, #32
    defa:	f3ef 8811 	mrs	r8, BASEPRI
    defe:	f383 8812 	msr	BASEPRI_MAX, r3
    df02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df06:	4638      	mov	r0, r7
    df08:	f01a fc66 	bl	287d8 <z_spin_lock_valid>
    df0c:	4605      	mov	r5, r0
    df0e:	b968      	cbnz	r0, df2c <mpsc_pbuf_claim+0x40>
    df10:	2394      	movs	r3, #148	; 0x94
    df12:	4a34      	ldr	r2, [pc, #208]	; (dfe4 <mpsc_pbuf_claim+0xf8>)
    df14:	4934      	ldr	r1, [pc, #208]	; (dfe8 <mpsc_pbuf_claim+0xfc>)
    df16:	4835      	ldr	r0, [pc, #212]	; (dfec <mpsc_pbuf_claim+0x100>)
    df18:	f020 fd1c 	bl	2e954 <assert_print>
    df1c:	4639      	mov	r1, r7
    df1e:	4834      	ldr	r0, [pc, #208]	; (dff0 <mpsc_pbuf_claim+0x104>)
    df20:	f020 fd18 	bl	2e954 <assert_print>
    df24:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df26:	482f      	ldr	r0, [pc, #188]	; (dfe4 <mpsc_pbuf_claim+0xf8>)
    df28:	f020 fd0d 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
    df2c:	4638      	mov	r0, r7
    df2e:	f01a fc6f 	bl	28810 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    df32:	6923      	ldr	r3, [r4, #16]
    df34:	68a2      	ldr	r2, [r4, #8]
    df36:	f013 0f08 	tst.w	r3, #8
    df3a:	d102      	bne.n	df42 <mpsc_pbuf_claim+0x56>
    df3c:	6863      	ldr	r3, [r4, #4]
    df3e:	429a      	cmp	r2, r3
    df40:	d900      	bls.n	df44 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
    df42:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    df44:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    df46:	2b00      	cmp	r3, #0
    df48:	d03d      	beq.n	dfc6 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
    df4a:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    df4c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    df50:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    df54:	f013 0003 	ands.w	r0, r3, #3
    df58:	d038      	beq.n	dfcc <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
    df5a:	2802      	cmp	r0, #2
    df5c:	d103      	bne.n	df66 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
    df5e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    df62:	08b6      	lsrs	r6, r6, #2
    df64:	d105      	bne.n	df72 <mpsc_pbuf_claim+0x86>
    df66:	07d8      	lsls	r0, r3, #31
    df68:	d41d      	bmi.n	dfa6 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    df6a:	4648      	mov	r0, r9
    df6c:	69e3      	ldr	r3, [r4, #28]
    df6e:	4798      	blx	r3
    df70:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    df72:	68a1      	ldr	r1, [r4, #8]
    df74:	4632      	mov	r2, r6
    df76:	4620      	mov	r0, r4
    df78:	f020 fd1d 	bl	2e9b6 <idx_inc>
				rd_idx_inc(buffer, inc);
    df7c:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
    df7e:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    df80:	4620      	mov	r0, r4
    df82:	f020 fd26 	bl	2e9d2 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df86:	4638      	mov	r0, r7
    df88:	f01a fc34 	bl	287f4 <z_spin_unlock_valid>
    df8c:	bb00      	cbnz	r0, dfd0 <mpsc_pbuf_claim+0xe4>
    df8e:	23c2      	movs	r3, #194	; 0xc2
    df90:	4a14      	ldr	r2, [pc, #80]	; (dfe4 <mpsc_pbuf_claim+0xf8>)
    df92:	4918      	ldr	r1, [pc, #96]	; (dff4 <mpsc_pbuf_claim+0x108>)
    df94:	4815      	ldr	r0, [pc, #84]	; (dfec <mpsc_pbuf_claim+0x100>)
    df96:	f020 fcdd 	bl	2e954 <assert_print>
    df9a:	4639      	mov	r1, r7
    df9c:	4816      	ldr	r0, [pc, #88]	; (dff8 <mpsc_pbuf_claim+0x10c>)
    df9e:	f020 fcd9 	bl	2e954 <assert_print>
    dfa2:	21c2      	movs	r1, #194	; 0xc2
    dfa4:	e7bf      	b.n	df26 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    dfa6:	f043 0302 	orr.w	r3, r3, #2
    dfaa:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    dfae:	69e3      	ldr	r3, [r4, #28]
    dfb0:	4648      	mov	r0, r9
					idx_inc(buffer, buffer->tmp_rd_idx,
    dfb2:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    dfb4:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    dfb6:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    dfb8:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    dfba:	4620      	mov	r0, r4
    dfbc:	f020 fcfb 	bl	2e9b6 <idx_inc>
		cont = false;
    dfc0:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    dfc2:	60a0      	str	r0, [r4, #8]
    dfc4:	e7df      	b.n	df86 <mpsc_pbuf_claim+0x9a>
		cont = false;
    dfc6:	461d      	mov	r5, r3
			item = NULL;
    dfc8:	46a9      	mov	r9, r5
    dfca:	e7dc      	b.n	df86 <mpsc_pbuf_claim+0x9a>
		cont = false;
    dfcc:	4605      	mov	r5, r0
    dfce:	e7fb      	b.n	dfc8 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
    dfd0:	f388 8811 	msr	BASEPRI, r8
    dfd4:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    dfd8:	2d00      	cmp	r5, #0
    dfda:	d18c      	bne.n	def6 <mpsc_pbuf_claim+0xa>

	return item;
}
    dfdc:	4648      	mov	r0, r9
    dfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfe2:	bf00      	nop
    dfe4:	000385b7 	.word	0x000385b7
    dfe8:	00038610 	.word	0x00038610
    dfec:	000381c3 	.word	0x000381c3
    dff0:	00038625 	.word	0x00038625
    dff4:	000385e4 	.word	0x000385e4
    dff8:	000385fb 	.word	0x000385fb

0000dffc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    dffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e000:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    e002:	69c3      	ldr	r3, [r0, #28]
    e004:	4608      	mov	r0, r1
{
    e006:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    e008:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    e00a:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    e00e:	4607      	mov	r7, r0
	__asm__ volatile(
    e010:	f04f 0320 	mov.w	r3, #32
    e014:	f3ef 8811 	mrs	r8, BASEPRI
    e018:	f383 8812 	msr	BASEPRI_MAX, r3
    e01c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e020:	4630      	mov	r0, r6
    e022:	f01a fbd9 	bl	287d8 <z_spin_lock_valid>
    e026:	b968      	cbnz	r0, e044 <mpsc_pbuf_free+0x48>
    e028:	2394      	movs	r3, #148	; 0x94
    e02a:	4a26      	ldr	r2, [pc, #152]	; (e0c4 <mpsc_pbuf_free+0xc8>)
    e02c:	4926      	ldr	r1, [pc, #152]	; (e0c8 <mpsc_pbuf_free+0xcc>)
    e02e:	4827      	ldr	r0, [pc, #156]	; (e0cc <mpsc_pbuf_free+0xd0>)
    e030:	f020 fc90 	bl	2e954 <assert_print>
    e034:	4631      	mov	r1, r6
    e036:	4826      	ldr	r0, [pc, #152]	; (e0d0 <mpsc_pbuf_free+0xd4>)
    e038:	f020 fc8c 	bl	2e954 <assert_print>
    e03c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e03e:	4821      	ldr	r0, [pc, #132]	; (e0c4 <mpsc_pbuf_free+0xc8>)
    e040:	f020 fc81 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
    e044:	4630      	mov	r0, r6
    e046:	f01a fbe3 	bl	28810 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    e04a:	782b      	ldrb	r3, [r5, #0]
    e04c:	f36f 0300 	bfc	r3, #0, #1
    e050:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    e052:	6923      	ldr	r3, [r4, #16]
    e054:	079b      	lsls	r3, r3, #30
    e056:	d505      	bpl.n	e064 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    e058:	68e2      	ldr	r2, [r4, #12]
    e05a:	6a23      	ldr	r3, [r4, #32]
    e05c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    e060:	429d      	cmp	r5, r3
    e062:	d120      	bne.n	e0a6 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
    e064:	782b      	ldrb	r3, [r5, #0]
    e066:	f36f 0341 	bfc	r3, #1, #1
    e06a:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    e06c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    e070:	4299      	cmp	r1, r3
    e072:	d104      	bne.n	e07e <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    e074:	463a      	mov	r2, r7
    e076:	4620      	mov	r0, r4
    e078:	f020 fc9d 	bl	2e9b6 <idx_inc>
    e07c:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    e07e:	4639      	mov	r1, r7
    e080:	4620      	mov	r0, r4
    e082:	f020 fca6 	bl	2e9d2 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e086:	4630      	mov	r0, r6
    e088:	f01a fbb4 	bl	287f4 <z_spin_unlock_valid>
    e08c:	b980      	cbnz	r0, e0b0 <mpsc_pbuf_free+0xb4>
    e08e:	23c2      	movs	r3, #194	; 0xc2
    e090:	4a0c      	ldr	r2, [pc, #48]	; (e0c4 <mpsc_pbuf_free+0xc8>)
    e092:	4910      	ldr	r1, [pc, #64]	; (e0d4 <mpsc_pbuf_free+0xd8>)
    e094:	480d      	ldr	r0, [pc, #52]	; (e0cc <mpsc_pbuf_free+0xd0>)
    e096:	f020 fc5d 	bl	2e954 <assert_print>
    e09a:	4631      	mov	r1, r6
    e09c:	480e      	ldr	r0, [pc, #56]	; (e0d8 <mpsc_pbuf_free+0xdc>)
    e09e:	f020 fc59 	bl	2e954 <assert_print>
    e0a2:	21c2      	movs	r1, #194	; 0xc2
    e0a4:	e7cb      	b.n	e03e <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    e0a6:	682b      	ldr	r3, [r5, #0]
    e0a8:	f367 039f 	bfi	r3, r7, #2, #30
    e0ac:	602b      	str	r3, [r5, #0]
    e0ae:	e7ea      	b.n	e086 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
    e0b0:	f388 8811 	msr	BASEPRI, r8
    e0b4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    e0b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    e0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e0c0:	f01a be42 	b.w	28d48 <z_impl_k_sem_give>
    e0c4:	000385b7 	.word	0x000385b7
    e0c8:	00038610 	.word	0x00038610
    e0cc:	000381c3 	.word	0x000381c3
    e0d0:	00038625 	.word	0x00038625
    e0d4:	000385e4 	.word	0x000385e4
    e0d8:	000385fb 	.word	0x000385fb

0000e0dc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    e0dc:	4604      	mov	r4, r0
    e0de:	b508      	push	{r3, lr}
	__asm__ volatile(
    e0e0:	f04f 0220 	mov.w	r2, #32
    e0e4:	f3ef 8311 	mrs	r3, BASEPRI
    e0e8:	f382 8812 	msr	BASEPRI_MAX, r2
    e0ec:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    e0f0:	f00d faf4 	bl	1b6dc <sys_clock_disable>
	}

	sys_arch_reboot(type);
    e0f4:	4620      	mov	r0, r4
    e0f6:	f002 fe35 	bl	10d64 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    e0fa:	4803      	ldr	r0, [pc, #12]	; (e108 <sys_reboot+0x2c>)
    e0fc:	f020 fa4d 	bl	2e59a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    e100:	f002 f8d0 	bl	102a4 <arch_cpu_idle>
    e104:	e7fc      	b.n	e100 <sys_reboot+0x24>
    e106:	bf00      	nop
    e108:	0003871a 	.word	0x0003871a

0000e10c <nordicsemi_nrf91_init>:
    e10c:	f04f 0220 	mov.w	r2, #32
    e110:	f3ef 8311 	mrs	r3, BASEPRI
    e114:	f382 8812 	msr	BASEPRI_MAX, r2
    e118:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e11c:	2101      	movs	r1, #1
    e11e:	4a04      	ldr	r2, [pc, #16]	; (e130 <nordicsemi_nrf91_init+0x24>)
    e120:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    e124:	f383 8811 	msr	BASEPRI, r3
    e128:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e12c:	2000      	movs	r0, #0
    e12e:	4770      	bx	lr
    e130:	40039000 	.word	0x40039000

0000e134 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e134:	b120      	cbz	r0, e140 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e136:	4b03      	ldr	r3, [pc, #12]	; (e144 <arch_busy_wait+0x10>)
    e138:	0180      	lsls	r0, r0, #6
    e13a:	f043 0301 	orr.w	r3, r3, #1
    e13e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    e140:	4770      	bx	lr
    e142:	bf00      	nop
    e144:	00036780 	.word	0x00036780

0000e148 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e148:	f025 bc79 	b.w	33a3e <SystemInit>

0000e14c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    e14c:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e14e:	2200      	movs	r2, #0
{
    e150:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e152:	490f      	ldr	r1, [pc, #60]	; (e190 <enable_logger+0x44>)
    e154:	480f      	ldr	r0, [pc, #60]	; (e194 <enable_logger+0x48>)
    e156:	f026 fe42 	bl	34dde <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e15a:	2200      	movs	r2, #0
    e15c:	2300      	movs	r3, #0
    e15e:	2400      	movs	r4, #0
    e160:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e164:	230e      	movs	r3, #14
    e166:	4d0c      	ldr	r5, [pc, #48]	; (e198 <enable_logger+0x4c>)
    e168:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e16c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e170:	4628      	mov	r0, r5
    e172:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e176:	4b09      	ldr	r3, [pc, #36]	; (e19c <enable_logger+0x50>)
    e178:	4909      	ldr	r1, [pc, #36]	; (e1a0 <enable_logger+0x54>)
    e17a:	9400      	str	r4, [sp, #0]
    e17c:	f01a fa62 	bl	28644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e180:	4908      	ldr	r1, [pc, #32]	; (e1a4 <enable_logger+0x58>)
    e182:	4628      	mov	r0, r5
    e184:	f026 fd06 	bl	34b94 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    e188:	4620      	mov	r0, r4
    e18a:	b009      	add	sp, #36	; 0x24
    e18c:	bd30      	pop	{r4, r5, pc}
    e18e:	bf00      	nop
    e190:	0000e2ed 	.word	0x0000e2ed
    e194:	2000d6b0 	.word	0x2000d6b0
    e198:	2000d220 	.word	0x2000d220
    e19c:	0000e5c5 	.word	0x0000e5c5
    e1a0:	20012888 	.word	0x20012888
    e1a4:	00038747 	.word	0x00038747

0000e1a8 <activate_foreach_backend>:
{
    e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ac:	4604      	mov	r4, r0
	while (mask_cpy) {
    e1ae:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    e1b0:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e1b4:	f8df 8050 	ldr.w	r8, [pc, #80]	; e208 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    e1b8:	b914      	cbnz	r4, e1c0 <activate_foreach_backend+0x18>
}
    e1ba:	4638      	mov	r0, r7
    e1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    e1c0:	fa94 f5a4 	rbit	r5, r4
    e1c4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    e1c8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e1cc:	012e      	lsls	r6, r5, #4
    e1ce:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    e1d2:	ea6f 0a03 	mvn.w	sl, r3
    e1d6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e1da:	7b2b      	ldrb	r3, [r5, #12]
    e1dc:	2b00      	cmp	r3, #0
    e1de:	d0eb      	beq.n	e1b8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    e1e0:	f858 3006 	ldr.w	r3, [r8, r6]
    e1e4:	691b      	ldr	r3, [r3, #16]
    e1e6:	b94b      	cbnz	r3, e1fc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    e1e8:	4446      	add	r6, r8
			log_backend_enable(backend,
    e1ea:	6873      	ldr	r3, [r6, #4]
    e1ec:	2204      	movs	r2, #4
    e1ee:	4628      	mov	r0, r5
    e1f0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e1f2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    e1f6:	f000 faeb 	bl	e7d0 <log_backend_enable>
    e1fa:	e7dd      	b.n	e1b8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    e1fc:	4628      	mov	r0, r5
    e1fe:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e200:	2800      	cmp	r0, #0
    e202:	d1d9      	bne.n	e1b8 <activate_foreach_backend+0x10>
    e204:	e7f0      	b.n	e1e8 <activate_foreach_backend+0x40>
    e206:	bf00      	nop
    e208:	000365f0 	.word	0x000365f0

0000e20c <z_log_init>:
{
    e20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e210:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e2cc <z_log_init+0xc0>
    e214:	4c2e      	ldr	r4, [pc, #184]	; (e2d0 <z_log_init+0xc4>)
    e216:	4680      	mov	r8, r0
    e218:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e21c:	2b9f      	cmp	r3, #159	; 0x9f
{
    e21e:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e220:	d90b      	bls.n	e23a <z_log_init+0x2e>
    e222:	492c      	ldr	r1, [pc, #176]	; (e2d4 <z_log_init+0xc8>)
    e224:	f44f 738c 	mov.w	r3, #280	; 0x118
    e228:	4a2b      	ldr	r2, [pc, #172]	; (e2d8 <z_log_init+0xcc>)
    e22a:	482c      	ldr	r0, [pc, #176]	; (e2dc <z_log_init+0xd0>)
    e22c:	f020 fb92 	bl	2e954 <assert_print>
    e230:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e234:	4828      	ldr	r0, [pc, #160]	; (e2d8 <z_log_init+0xcc>)
    e236:	f020 fb86 	bl	2e946 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e23a:	4829      	ldr	r0, [pc, #164]	; (e2e0 <z_log_init+0xd4>)
    e23c:	f020 fcc7 	bl	2ebce <atomic_inc>
    e240:	4606      	mov	r6, r0
    e242:	b360      	cbz	r0, e29e <z_log_init+0x92>
	uint32_t mask = 0;
    e244:	2500      	movs	r5, #0
}
    e246:	4628      	mov	r0, r5
    e248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    e24c:	7b23      	ldrb	r3, [r4, #12]
    e24e:	b173      	cbz	r3, e26e <z_log_init+0x62>
	if (backend->api->init) {
    e250:	6823      	ldr	r3, [r4, #0]
    e252:	68db      	ldr	r3, [r3, #12]
    e254:	b10b      	cbz	r3, e25a <z_log_init+0x4e>
		backend->api->init(backend);
    e256:	4620      	mov	r0, r4
    e258:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e25a:	6823      	ldr	r3, [r4, #0]
    e25c:	691b      	ldr	r3, [r3, #16]
    e25e:	b9b3      	cbnz	r3, e28e <z_log_init+0x82>
				log_backend_enable(backend,
    e260:	6863      	ldr	r3, [r4, #4]
    e262:	2204      	movs	r2, #4
    e264:	4620      	mov	r0, r4
    e266:	6819      	ldr	r1, [r3, #0]
    e268:	f000 fab2 	bl	e7d0 <log_backend_enable>
			i++;
    e26c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e26e:	3410      	adds	r4, #16
    e270:	454c      	cmp	r4, r9
    e272:	d918      	bls.n	e2a6 <z_log_init+0x9a>
    e274:	491b      	ldr	r1, [pc, #108]	; (e2e4 <z_log_init+0xd8>)
    e276:	f240 1325 	movw	r3, #293	; 0x125
    e27a:	4a17      	ldr	r2, [pc, #92]	; (e2d8 <z_log_init+0xcc>)
    e27c:	4817      	ldr	r0, [pc, #92]	; (e2dc <z_log_init+0xd0>)
    e27e:	f020 fb69 	bl	2e954 <assert_print>
    e282:	4819      	ldr	r0, [pc, #100]	; (e2e8 <z_log_init+0xdc>)
    e284:	f020 fb66 	bl	2e954 <assert_print>
    e288:	f240 1125 	movw	r1, #293	; 0x125
    e28c:	e7d2      	b.n	e234 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e28e:	4620      	mov	r0, r4
    e290:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e292:	2800      	cmp	r0, #0
    e294:	d0e4      	beq.n	e260 <z_log_init+0x54>
				mask |= BIT(i);
    e296:	fa0a f306 	lsl.w	r3, sl, r6
    e29a:	431d      	orrs	r5, r3
    e29c:	e7e6      	b.n	e26c <z_log_init+0x60>
	uint32_t mask = 0;
    e29e:	4605      	mov	r5, r0
				mask |= BIT(i);
    e2a0:	f04f 0a01 	mov.w	sl, #1
    e2a4:	e7e4      	b.n	e270 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2a6:	d3d1      	bcc.n	e24c <z_log_init+0x40>
	if (blocking) {
    e2a8:	f1b8 0f00 	cmp.w	r8, #0
    e2ac:	d0cb      	beq.n	e246 <z_log_init+0x3a>
		while (mask) {
    e2ae:	2d00      	cmp	r5, #0
    e2b0:	d0c8      	beq.n	e244 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e2b2:	4628      	mov	r0, r5
    e2b4:	f7ff ff78 	bl	e1a8 <activate_foreach_backend>
    e2b8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e2ba:	2f00      	cmp	r7, #0
    e2bc:	d0f7      	beq.n	e2ae <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e2be:	2100      	movs	r1, #0
    e2c0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e2c4:	f01c fb92 	bl	2a9ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e2c8:	e7f1      	b.n	e2ae <z_log_init+0xa2>
    e2ca:	bf00      	nop
    e2cc:	00036600 	.word	0x00036600
    e2d0:	000365f0 	.word	0x000365f0
    e2d4:	0003877c 	.word	0x0003877c
    e2d8:	0003874f 	.word	0x0003874f
    e2dc:	000381c3 	.word	0x000381c3
    e2e0:	2000f92c 	.word	0x2000f92c
    e2e4:	000387a0 	.word	0x000387a0
    e2e8:	000387c1 	.word	0x000387c1

0000e2ec <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e2ec:	4801      	ldr	r0, [pc, #4]	; (e2f4 <log_process_thread_timer_expiry_fn+0x8>)
    e2ee:	f01a bd2b 	b.w	28d48 <z_impl_k_sem_give>
    e2f2:	bf00      	nop
    e2f4:	2000cfb0 	.word	0x2000cfb0

0000e2f8 <log_format_func_t_get>:
}
    e2f8:	4b01      	ldr	r3, [pc, #4]	; (e300 <log_format_func_t_get+0x8>)
    e2fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e2fe:	4770      	bx	lr
    e300:	000368c4 	.word	0x000368c4

0000e304 <log_set_timestamp_func>:
{
    e304:	b508      	push	{r3, lr}
    e306:	4603      	mov	r3, r0
    e308:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e30a:	b12b      	cbz	r3, e318 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e30c:	4a04      	ldr	r2, [pc, #16]	; (e320 <log_set_timestamp_func+0x1c>)
    e30e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e310:	f000 fd8e 	bl	ee30 <log_output_timestamp_freq_set>
	return 0;
    e314:	2000      	movs	r0, #0
}
    e316:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e318:	f06f 0015 	mvn.w	r0, #21
    e31c:	e7fb      	b.n	e316 <log_set_timestamp_func+0x12>
    e31e:	bf00      	nop
    e320:	2000c814 	.word	0x2000c814

0000e324 <z_log_notify_backend_enabled>:
{
    e324:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e326:	4c04      	ldr	r4, [pc, #16]	; (e338 <z_log_notify_backend_enabled+0x14>)
    e328:	7823      	ldrb	r3, [r4, #0]
    e32a:	b913      	cbnz	r3, e332 <z_log_notify_backend_enabled+0xe>
    e32c:	4803      	ldr	r0, [pc, #12]	; (e33c <z_log_notify_backend_enabled+0x18>)
    e32e:	f01a fd0b 	bl	28d48 <z_impl_k_sem_give>
	backend_attached = true;
    e332:	2301      	movs	r3, #1
    e334:	7023      	strb	r3, [r4, #0]
}
    e336:	bd10      	pop	{r4, pc}
    e338:	200111ec 	.word	0x200111ec
    e33c:	2000cfb0 	.word	0x2000cfb0

0000e340 <z_log_dropped>:
{
    e340:	b510      	push	{r4, lr}
    e342:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e344:	4806      	ldr	r0, [pc, #24]	; (e360 <z_log_dropped+0x20>)
    e346:	f020 fc42 	bl	2ebce <atomic_inc>
	if (buffered) {
    e34a:	b13c      	cbz	r4, e35c <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e34c:	4b05      	ldr	r3, [pc, #20]	; (e364 <z_log_dropped+0x24>)
    e34e:	e8d3 1fef 	ldaex	r1, [r3]
    e352:	3901      	subs	r1, #1
    e354:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e358:	2a00      	cmp	r2, #0
    e35a:	d1f8      	bne.n	e34e <z_log_dropped+0xe>
}
    e35c:	bd10      	pop	{r4, pc}
    e35e:	bf00      	nop
    e360:	2000f924 	.word	0x2000f924
    e364:	2000f928 	.word	0x2000f928

0000e368 <z_log_dropped_read_and_clear>:
}
    e368:	2000      	movs	r0, #0
    e36a:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e36c:	4b03      	ldr	r3, [pc, #12]	; (e37c <z_log_dropped_read_and_clear+0x14>)
    e36e:	e8d3 0fef 	ldaex	r0, [r3]
    e372:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e376:	2a00      	cmp	r2, #0
    e378:	d1f9      	bne.n	e36e <z_log_dropped_read_and_clear+0x6>
    e37a:	4770      	bx	lr
    e37c:	2000f924 	.word	0x2000f924

0000e380 <dropped_notify>:
{
    e380:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e382:	f7ff fff1 	bl	e368 <z_log_dropped_read_and_clear>
    e386:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e388:	4c0f      	ldr	r4, [pc, #60]	; (e3c8 <dropped_notify+0x48>)
    e38a:	4e10      	ldr	r6, [pc, #64]	; (e3cc <dropped_notify+0x4c>)
    e38c:	42b4      	cmp	r4, r6
    e38e:	d919      	bls.n	e3c4 <dropped_notify+0x44>
    e390:	490f      	ldr	r1, [pc, #60]	; (e3d0 <dropped_notify+0x50>)
    e392:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    e396:	4a0f      	ldr	r2, [pc, #60]	; (e3d4 <dropped_notify+0x54>)
    e398:	480f      	ldr	r0, [pc, #60]	; (e3d8 <dropped_notify+0x58>)
    e39a:	f020 fadb 	bl	2e954 <assert_print>
    e39e:	480f      	ldr	r0, [pc, #60]	; (e3dc <dropped_notify+0x5c>)
    e3a0:	f020 fad8 	bl	2e954 <assert_print>
    e3a4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    e3a8:	480a      	ldr	r0, [pc, #40]	; (e3d4 <dropped_notify+0x54>)
    e3aa:	f020 facc 	bl	2e946 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e3ae:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e3b0:	795b      	ldrb	r3, [r3, #5]
    e3b2:	b12b      	cbz	r3, e3c0 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e3b4:	6823      	ldr	r3, [r4, #0]
    e3b6:	685b      	ldr	r3, [r3, #4]
    e3b8:	b113      	cbz	r3, e3c0 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e3ba:	4629      	mov	r1, r5
    e3bc:	4620      	mov	r0, r4
    e3be:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3c0:	3410      	adds	r4, #16
    e3c2:	e7e3      	b.n	e38c <dropped_notify+0xc>
    e3c4:	d3f3      	bcc.n	e3ae <dropped_notify+0x2e>
}
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
    e3c8:	000365f0 	.word	0x000365f0
    e3cc:	00036600 	.word	0x00036600
    e3d0:	000387a0 	.word	0x000387a0
    e3d4:	0003874f 	.word	0x0003874f
    e3d8:	000381c3 	.word	0x000381c3
    e3dc:	000387c1 	.word	0x000387c1

0000e3e0 <z_log_msg_init>:
{
    e3e0:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e3e2:	4c04      	ldr	r4, [pc, #16]	; (e3f4 <z_log_msg_init+0x14>)
    e3e4:	4904      	ldr	r1, [pc, #16]	; (e3f8 <z_log_msg_init+0x18>)
    e3e6:	4620      	mov	r0, r4
    e3e8:	f7ff fc38 	bl	dc5c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e3ec:	4b03      	ldr	r3, [pc, #12]	; (e3fc <z_log_msg_init+0x1c>)
    e3ee:	601c      	str	r4, [r3, #0]
}
    e3f0:	bd10      	pop	{r4, pc}
    e3f2:	bf00      	nop
    e3f4:	2000cd7c 	.word	0x2000cd7c
    e3f8:	000368b0 	.word	0x000368b0
    e3fc:	2000f91c 	.word	0x2000f91c

0000e400 <log_core_init>:
{
    e400:	b508      	push	{r3, lr}
	panic_mode = false;
    e402:	2300      	movs	r3, #0
    e404:	4a07      	ldr	r2, [pc, #28]	; (e424 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e40a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e40c:	4a06      	ldr	r2, [pc, #24]	; (e428 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    e40e:	4807      	ldr	r0, [pc, #28]	; (e42c <log_core_init+0x2c>)
	dropped_cnt = 0;
    e410:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    e412:	4a07      	ldr	r2, [pc, #28]	; (e430 <log_core_init+0x30>)
    e414:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e416:	f7ff ff75 	bl	e304 <log_set_timestamp_func>
}
    e41a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e41e:	f7ff bfdf 	b.w	e3e0 <z_log_msg_init>
    e422:	bf00      	nop
    e424:	200111ed 	.word	0x200111ed
    e428:	2000f924 	.word	0x2000f924
    e42c:	0002ebcb 	.word	0x0002ebcb
    e430:	2000f928 	.word	0x2000f928

0000e434 <z_log_msg_alloc>:
{
    e434:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e436:	2200      	movs	r2, #0
    e438:	2300      	movs	r3, #0
    e43a:	4801      	ldr	r0, [pc, #4]	; (e440 <z_log_msg_alloc+0xc>)
    e43c:	f7ff bc40 	b.w	dcc0 <mpsc_pbuf_alloc>
    e440:	2000cd7c 	.word	0x2000cd7c

0000e444 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e444:	4801      	ldr	r0, [pc, #4]	; (e44c <z_log_msg_local_claim+0x8>)
    e446:	f7ff bd51 	b.w	deec <mpsc_pbuf_claim>
    e44a:	bf00      	nop
    e44c:	2000cd7c 	.word	0x2000cd7c

0000e450 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e450:	4b02      	ldr	r3, [pc, #8]	; (e45c <z_log_msg_free+0xc>)
{
    e452:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e454:	6818      	ldr	r0, [r3, #0]
    e456:	f7ff bdd1 	b.w	dffc <mpsc_pbuf_free>
    e45a:	bf00      	nop
    e45c:	2000f91c 	.word	0x2000f91c

0000e460 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e460:	4801      	ldr	r0, [pc, #4]	; (e468 <z_log_msg_pending+0x8>)
    e462:	f020 bb80 	b.w	2eb66 <mpsc_pbuf_is_pending>
    e466:	bf00      	nop
    e468:	2000cd7c 	.word	0x2000cd7c

0000e46c <z_impl_log_process>:
{
    e46c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e46e:	4b2e      	ldr	r3, [pc, #184]	; (e528 <z_impl_log_process+0xbc>)
    e470:	7818      	ldrb	r0, [r3, #0]
    e472:	2800      	cmp	r0, #0
    e474:	d057      	beq.n	e526 <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e476:	f7ff ffe5 	bl	e444 <z_log_msg_local_claim>
	if (msg) {
    e47a:	4605      	mov	r5, r0
    e47c:	b340      	cbz	r0, e4d0 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e47e:	4b2b      	ldr	r3, [pc, #172]	; (e52c <z_impl_log_process+0xc0>)
    e480:	e8d3 1fef 	ldaex	r1, [r3]
    e484:	3901      	subs	r1, #1
    e486:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e48a:	2a00      	cmp	r2, #0
    e48c:	d1f8      	bne.n	e480 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e48e:	4c28      	ldr	r4, [pc, #160]	; (e530 <z_impl_log_process+0xc4>)
    e490:	4e28      	ldr	r6, [pc, #160]	; (e534 <z_impl_log_process+0xc8>)
    e492:	42b4      	cmp	r4, r6
    e494:	d918      	bls.n	e4c8 <z_impl_log_process+0x5c>
    e496:	4928      	ldr	r1, [pc, #160]	; (e538 <z_impl_log_process+0xcc>)
    e498:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    e49c:	4a27      	ldr	r2, [pc, #156]	; (e53c <z_impl_log_process+0xd0>)
    e49e:	4828      	ldr	r0, [pc, #160]	; (e540 <z_impl_log_process+0xd4>)
    e4a0:	f020 fa58 	bl	2e954 <assert_print>
    e4a4:	4827      	ldr	r0, [pc, #156]	; (e544 <z_impl_log_process+0xd8>)
    e4a6:	f020 fa55 	bl	2e954 <assert_print>
    e4aa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    e4ae:	4823      	ldr	r0, [pc, #140]	; (e53c <z_impl_log_process+0xd0>)
    e4b0:	f020 fa49 	bl	2e946 <assert_post_action>
	return backend->cb->active;
    e4b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e4b6:	795b      	ldrb	r3, [r3, #5]
    e4b8:	b123      	cbz	r3, e4c4 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e4ba:	6823      	ldr	r3, [r4, #0]
    e4bc:	4629      	mov	r1, r5
    e4be:	4620      	mov	r0, r4
    e4c0:	681b      	ldr	r3, [r3, #0]
    e4c2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e4c4:	3410      	adds	r4, #16
    e4c6:	e7e4      	b.n	e492 <z_impl_log_process+0x26>
    e4c8:	d3f4      	bcc.n	e4b4 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e4ca:	4628      	mov	r0, r5
    e4cc:	f7ff ffc0 	bl	e450 <z_log_msg_free>
	return dropped_cnt > 0;
    e4d0:	4b1d      	ldr	r3, [pc, #116]	; (e548 <z_impl_log_process+0xdc>)
    e4d2:	4c1e      	ldr	r4, [pc, #120]	; (e54c <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e4d4:	681b      	ldr	r3, [r3, #0]
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	dd19      	ble.n	e50e <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e4da:	f026 fc58 	bl	34d8e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    e4de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e4e2:	fba0 0302 	umull	r0, r3, r0, r2
    e4e6:	fb02 3101 	mla	r1, r2, r1, r3
    e4ea:	0bc3      	lsrs	r3, r0, #15
    e4ec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e4f0:	e9d4 2000 	ldrd	r2, r0, [r4]
    e4f4:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e4f6:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e4fa:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e4fe:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e502:	4293      	cmp	r3, r2
    e504:	f171 0100 	sbcs.w	r1, r1, #0
    e508:	d301      	bcc.n	e50e <z_impl_log_process+0xa2>
				dropped_notify();
    e50a:	f7ff ff39 	bl	e380 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e50e:	e9d4 3200 	ldrd	r3, r2, [r4]
    e512:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e516:	f142 0200 	adc.w	r2, r2, #0
    e51a:	e9c4 3200 	strd	r3, r2, [r4]
}
    e51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e522:	f7ff bf9d 	b.w	e460 <z_log_msg_pending>
}
    e526:	bd70      	pop	{r4, r5, r6, pc}
    e528:	200111ec 	.word	0x200111ec
    e52c:	2000f928 	.word	0x2000f928
    e530:	000365f0 	.word	0x000365f0
    e534:	00036600 	.word	0x00036600
    e538:	000387a0 	.word	0x000387a0
    e53c:	0003874f 	.word	0x0003874f
    e540:	000381c3 	.word	0x000381c3
    e544:	000387c1 	.word	0x000387c1
    e548:	2000f924 	.word	0x2000f924
    e54c:	2000d6a8 	.word	0x2000d6a8

0000e550 <z_impl_log_panic>:
{
    e550:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e552:	4d15      	ldr	r5, [pc, #84]	; (e5a8 <z_impl_log_panic+0x58>)
    e554:	7829      	ldrb	r1, [r5, #0]
    e556:	bb29      	cbnz	r1, e5a4 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e558:	2001      	movs	r0, #1
    e55a:	f7ff fe57 	bl	e20c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e55e:	4c13      	ldr	r4, [pc, #76]	; (e5ac <z_impl_log_panic+0x5c>)
    e560:	4e13      	ldr	r6, [pc, #76]	; (e5b0 <z_impl_log_panic+0x60>)
    e562:	42b4      	cmp	r4, r6
    e564:	d917      	bls.n	e596 <z_impl_log_panic+0x46>
    e566:	4913      	ldr	r1, [pc, #76]	; (e5b4 <z_impl_log_panic+0x64>)
    e568:	f240 1387 	movw	r3, #391	; 0x187
    e56c:	4a12      	ldr	r2, [pc, #72]	; (e5b8 <z_impl_log_panic+0x68>)
    e56e:	4813      	ldr	r0, [pc, #76]	; (e5bc <z_impl_log_panic+0x6c>)
    e570:	f020 f9f0 	bl	2e954 <assert_print>
    e574:	4812      	ldr	r0, [pc, #72]	; (e5c0 <z_impl_log_panic+0x70>)
    e576:	f020 f9ed 	bl	2e954 <assert_print>
    e57a:	f240 1187 	movw	r1, #391	; 0x187
    e57e:	480e      	ldr	r0, [pc, #56]	; (e5b8 <z_impl_log_panic+0x68>)
    e580:	f020 f9e1 	bl	2e946 <assert_post_action>
	return backend->cb->active;
    e584:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e586:	795b      	ldrb	r3, [r3, #5]
    e588:	b11b      	cbz	r3, e592 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e58a:	6823      	ldr	r3, [r4, #0]
    e58c:	4620      	mov	r0, r4
    e58e:	689b      	ldr	r3, [r3, #8]
    e590:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e592:	3410      	adds	r4, #16
    e594:	e7e5      	b.n	e562 <z_impl_log_panic+0x12>
    e596:	d3f5      	bcc.n	e584 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e598:	f7ff ff68 	bl	e46c <z_impl_log_process>
		while (log_process() == true) {
    e59c:	2800      	cmp	r0, #0
    e59e:	d1fb      	bne.n	e598 <z_impl_log_panic+0x48>
	panic_mode = true;
    e5a0:	2301      	movs	r3, #1
    e5a2:	702b      	strb	r3, [r5, #0]
}
    e5a4:	bd70      	pop	{r4, r5, r6, pc}
    e5a6:	bf00      	nop
    e5a8:	200111ed 	.word	0x200111ed
    e5ac:	000365f0 	.word	0x000365f0
    e5b0:	00036600 	.word	0x00036600
    e5b4:	000387a0 	.word	0x000387a0
    e5b8:	0003874f 	.word	0x0003874f
    e5bc:	000381c3 	.word	0x000381c3
    e5c0:	000387c1 	.word	0x000387c1

0000e5c4 <log_process_thread_func>:
{
    e5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e5c8:	4b2f      	ldr	r3, [pc, #188]	; (e688 <log_process_thread_func+0xc4>)
    e5ca:	4f30      	ldr	r7, [pc, #192]	; (e68c <log_process_thread_func+0xc8>)
    e5cc:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e5ce:	091b      	lsrs	r3, r3, #4
    e5d0:	d10b      	bne.n	e5ea <log_process_thread_func+0x26>
    e5d2:	492f      	ldr	r1, [pc, #188]	; (e690 <log_process_thread_func+0xcc>)
    e5d4:	f240 335b 	movw	r3, #859	; 0x35b
    e5d8:	4a2e      	ldr	r2, [pc, #184]	; (e694 <log_process_thread_func+0xd0>)
    e5da:	482f      	ldr	r0, [pc, #188]	; (e698 <log_process_thread_func+0xd4>)
    e5dc:	f020 f9ba 	bl	2e954 <assert_print>
    e5e0:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5e4:	482b      	ldr	r0, [pc, #172]	; (e694 <log_process_thread_func+0xd0>)
    e5e6:	f020 f9ae 	bl	2e946 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e5ea:	2100      	movs	r1, #0
    e5ec:	4608      	mov	r0, r1
    e5ee:	f7ff fe0d 	bl	e20c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e5f2:	4604      	mov	r4, r0
    e5f4:	b340      	cbz	r0, e648 <log_process_thread_func+0x84>
    e5f6:	f240 6867 	movw	r8, #1639	; 0x667
    e5fa:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e5fe:	f01c fa29 	bl	2aa54 <z_impl_z_current_get>
	proc_tid = process_tid;
    e602:	4b26      	ldr	r3, [pc, #152]	; (e69c <log_process_thread_func+0xd8>)
    e604:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e606:	b130      	cbz	r0, e616 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e608:	4b25      	ldr	r3, [pc, #148]	; (e6a0 <log_process_thread_func+0xdc>)
	    process_tid &&
    e60a:	681b      	ldr	r3, [r3, #0]
    e60c:	2b09      	cmp	r3, #9
    e60e:	dd02      	ble.n	e616 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e610:	4824      	ldr	r0, [pc, #144]	; (e6a4 <log_process_thread_func+0xe0>)
    e612:	f01a fb99 	bl	28d48 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e616:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e618:	f8df a088 	ldr.w	sl, [pc, #136]	; e6a4 <log_process_thread_func+0xe0>
		if (activate_mask) {
    e61c:	b144      	cbz	r4, e630 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e61e:	4620      	mov	r0, r4
    e620:	f7ff fdc2 	bl	e1a8 <activate_foreach_backend>
			if (!activate_mask) {
    e624:	4604      	mov	r4, r0
    e626:	b918      	cbnz	r0, e630 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e628:	f04f 38ff 	mov.w	r8, #4294967295
    e62c:	f04f 39ff 	mov.w	r9, #4294967295
    e630:	f7ff ff1c 	bl	e46c <z_impl_log_process>
		if (log_process() == false) {
    e634:	4606      	mov	r6, r0
    e636:	b928      	cbnz	r0, e644 <log_process_thread_func+0x80>
			if (processed_any) {
    e638:	b95d      	cbnz	r5, e652 <log_process_thread_func+0x8e>
    e63a:	4642      	mov	r2, r8
    e63c:	464b      	mov	r3, r9
    e63e:	4650      	mov	r0, sl
    e640:	f01a fbc6 	bl	28dd0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e644:	4635      	mov	r5, r6
    e646:	e7e9      	b.n	e61c <log_process_thread_func+0x58>
    e648:	f04f 38ff 	mov.w	r8, #4294967295
    e64c:	f04f 39ff 	mov.w	r9, #4294967295
    e650:	e7d5      	b.n	e5fe <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e652:	4d0d      	ldr	r5, [pc, #52]	; (e688 <log_process_thread_func+0xc4>)
    e654:	e008      	b.n	e668 <log_process_thread_func+0xa4>
    e656:	d2f0      	bcs.n	e63a <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e658:	682b      	ldr	r3, [r5, #0]
    e65a:	699b      	ldr	r3, [r3, #24]
    e65c:	b11b      	cbz	r3, e666 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e65e:	2200      	movs	r2, #0
    e660:	4628      	mov	r0, r5
    e662:	4611      	mov	r1, r2
    e664:	4798      	blx	r3
    e666:	3510      	adds	r5, #16
    e668:	42bd      	cmp	r5, r7
    e66a:	d9f4      	bls.n	e656 <log_process_thread_func+0x92>
    e66c:	490e      	ldr	r1, [pc, #56]	; (e6a8 <log_process_thread_func+0xe4>)
    e66e:	f240 334f 	movw	r3, #847	; 0x34f
    e672:	4a08      	ldr	r2, [pc, #32]	; (e694 <log_process_thread_func+0xd0>)
    e674:	4808      	ldr	r0, [pc, #32]	; (e698 <log_process_thread_func+0xd4>)
    e676:	f020 f96d 	bl	2e954 <assert_print>
    e67a:	480c      	ldr	r0, [pc, #48]	; (e6ac <log_process_thread_func+0xe8>)
    e67c:	f020 f96a 	bl	2e954 <assert_print>
    e680:	f240 314f 	movw	r1, #847	; 0x34f
    e684:	e7ae      	b.n	e5e4 <log_process_thread_func+0x20>
    e686:	bf00      	nop
    e688:	000365f0 	.word	0x000365f0
    e68c:	00036600 	.word	0x00036600
    e690:	000387e0 	.word	0x000387e0
    e694:	0003874f 	.word	0x0003874f
    e698:	000381c3 	.word	0x000381c3
    e69c:	2000f920 	.word	0x2000f920
    e6a0:	2000f928 	.word	0x2000f928
    e6a4:	2000cfb0 	.word	0x2000cfb0
    e6a8:	000387a0 	.word	0x000387a0
    e6ac:	000387c1 	.word	0x000387c1

0000e6b0 <z_log_msg_post_finalize>:
{
    e6b0:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e6b2:	482b      	ldr	r0, [pc, #172]	; (e760 <z_log_msg_post_finalize+0xb0>)
    e6b4:	f020 fa8b 	bl	2ebce <atomic_inc>
	if (panic_mode) {
    e6b8:	4b2a      	ldr	r3, [pc, #168]	; (e764 <z_log_msg_post_finalize+0xb4>)
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d034      	beq.n	e72a <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e6c0:	f04f 0320 	mov.w	r3, #32
    e6c4:	f3ef 8411 	mrs	r4, BASEPRI
    e6c8:	f383 8812 	msr	BASEPRI_MAX, r3
    e6cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e6d0:	4825      	ldr	r0, [pc, #148]	; (e768 <z_log_msg_post_finalize+0xb8>)
    e6d2:	f01a f881 	bl	287d8 <z_spin_lock_valid>
    e6d6:	b968      	cbnz	r0, e6f4 <z_log_msg_post_finalize+0x44>
    e6d8:	2394      	movs	r3, #148	; 0x94
    e6da:	4a24      	ldr	r2, [pc, #144]	; (e76c <z_log_msg_post_finalize+0xbc>)
    e6dc:	4924      	ldr	r1, [pc, #144]	; (e770 <z_log_msg_post_finalize+0xc0>)
    e6de:	4825      	ldr	r0, [pc, #148]	; (e774 <z_log_msg_post_finalize+0xc4>)
    e6e0:	f020 f938 	bl	2e954 <assert_print>
    e6e4:	4920      	ldr	r1, [pc, #128]	; (e768 <z_log_msg_post_finalize+0xb8>)
    e6e6:	4824      	ldr	r0, [pc, #144]	; (e778 <z_log_msg_post_finalize+0xc8>)
    e6e8:	f020 f934 	bl	2e954 <assert_print>
    e6ec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6ee:	481f      	ldr	r0, [pc, #124]	; (e76c <z_log_msg_post_finalize+0xbc>)
    e6f0:	f020 f929 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
    e6f4:	481c      	ldr	r0, [pc, #112]	; (e768 <z_log_msg_post_finalize+0xb8>)
    e6f6:	f01a f88b 	bl	28810 <z_spin_lock_set_owner>
    e6fa:	f7ff feb7 	bl	e46c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6fe:	481a      	ldr	r0, [pc, #104]	; (e768 <z_log_msg_post_finalize+0xb8>)
    e700:	f01a f878 	bl	287f4 <z_spin_unlock_valid>
    e704:	b958      	cbnz	r0, e71e <z_log_msg_post_finalize+0x6e>
    e706:	23c2      	movs	r3, #194	; 0xc2
    e708:	4a18      	ldr	r2, [pc, #96]	; (e76c <z_log_msg_post_finalize+0xbc>)
    e70a:	491c      	ldr	r1, [pc, #112]	; (e77c <z_log_msg_post_finalize+0xcc>)
    e70c:	4819      	ldr	r0, [pc, #100]	; (e774 <z_log_msg_post_finalize+0xc4>)
    e70e:	f020 f921 	bl	2e954 <assert_print>
    e712:	4915      	ldr	r1, [pc, #84]	; (e768 <z_log_msg_post_finalize+0xb8>)
    e714:	481a      	ldr	r0, [pc, #104]	; (e780 <z_log_msg_post_finalize+0xd0>)
    e716:	f020 f91d 	bl	2e954 <assert_print>
    e71a:	21c2      	movs	r1, #194	; 0xc2
    e71c:	e7e7      	b.n	e6ee <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e71e:	f384 8811 	msr	BASEPRI, r4
    e722:	f3bf 8f6f 	isb	sy
}
    e726:	b002      	add	sp, #8
    e728:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e72a:	4b16      	ldr	r3, [pc, #88]	; (e784 <z_log_msg_post_finalize+0xd4>)
    e72c:	681b      	ldr	r3, [r3, #0]
    e72e:	2b00      	cmp	r3, #0
    e730:	d0f9      	beq.n	e726 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e732:	b950      	cbnz	r0, e74a <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e734:	2200      	movs	r2, #0
    e736:	2300      	movs	r3, #0
    e738:	4813      	ldr	r0, [pc, #76]	; (e788 <z_log_msg_post_finalize+0xd8>)
    e73a:	e9cd 2300 	strd	r2, r3, [sp]
    e73e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e742:	2300      	movs	r3, #0
    e744:	f01c fe2a 	bl	2b39c <z_impl_k_timer_start>
    e748:	e7ed      	b.n	e726 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e74a:	280a      	cmp	r0, #10
    e74c:	d1eb      	bne.n	e726 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e74e:	480e      	ldr	r0, [pc, #56]	; (e788 <z_log_msg_post_finalize+0xd8>)
    e750:	f026 fb51 	bl	34df6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e754:	480d      	ldr	r0, [pc, #52]	; (e78c <z_log_msg_post_finalize+0xdc>)
}
    e756:	b002      	add	sp, #8
    e758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e75c:	f01a baf4 	b.w	28d48 <z_impl_k_sem_give>
    e760:	2000f928 	.word	0x2000f928
    e764:	200111ed 	.word	0x200111ed
    e768:	2000f918 	.word	0x2000f918
    e76c:	000385b7 	.word	0x000385b7
    e770:	00038610 	.word	0x00038610
    e774:	000381c3 	.word	0x000381c3
    e778:	00038625 	.word	0x00038625
    e77c:	000385e4 	.word	0x000385e4
    e780:	000385fb 	.word	0x000385fb
    e784:	2000f920 	.word	0x2000f920
    e788:	2000d6b0 	.word	0x2000d6b0
    e78c:	2000cfb0 	.word	0x2000cfb0

0000e790 <z_log_msg_commit>:
{
    e790:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e792:	4b06      	ldr	r3, [pc, #24]	; (e7ac <z_log_msg_commit+0x1c>)
{
    e794:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e796:	681b      	ldr	r3, [r3, #0]
    e798:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e79a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e79c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e79e:	4804      	ldr	r0, [pc, #16]	; (e7b0 <z_log_msg_commit+0x20>)
    e7a0:	f7ff fb4e 	bl	de40 <mpsc_pbuf_commit>
}
    e7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e7a8:	f7ff bf82 	b.w	e6b0 <z_log_msg_post_finalize>
    e7ac:	2000c814 	.word	0x2000c814
    e7b0:	2000cd7c 	.word	0x2000cd7c

0000e7b4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e7b4:	4a04      	ldr	r2, [pc, #16]	; (e7c8 <log_source_name_get+0x14>)
    e7b6:	4b05      	ldr	r3, [pc, #20]	; (e7cc <log_source_name_get+0x18>)
    e7b8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e7ba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e7be:	bf34      	ite	cc
    e7c0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e7c4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e7c6:	4770      	bx	lr
    e7c8:	000363c0 	.word	0x000363c0
    e7cc:	000365f0 	.word	0x000365f0

0000e7d0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e7d0:	4b0e      	ldr	r3, [pc, #56]	; (e80c <log_backend_enable+0x3c>)
{
    e7d2:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e7d4:	1ac3      	subs	r3, r0, r3
    e7d6:	111b      	asrs	r3, r3, #4
    e7d8:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e7da:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e7dc:	b948      	cbnz	r0, e7f2 <log_backend_enable+0x22>
    e7de:	490c      	ldr	r1, [pc, #48]	; (e810 <log_backend_enable+0x40>)
    e7e0:	480c      	ldr	r0, [pc, #48]	; (e814 <log_backend_enable+0x44>)
    e7e2:	23de      	movs	r3, #222	; 0xde
    e7e4:	4a0c      	ldr	r2, [pc, #48]	; (e818 <log_backend_enable+0x48>)
    e7e6:	f020 f8b5 	bl	2e954 <assert_print>
    e7ea:	21de      	movs	r1, #222	; 0xde
    e7ec:	480a      	ldr	r0, [pc, #40]	; (e818 <log_backend_enable+0x48>)
    e7ee:	f020 f8aa 	bl	2e946 <assert_post_action>
	backend->cb->id = id;
    e7f2:	6844      	ldr	r4, [r0, #4]
    e7f4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e7f6:	6843      	ldr	r3, [r0, #4]
    e7f8:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e7fa:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e7fc:	6843      	ldr	r3, [r0, #4]
    e7fe:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e800:	6843      	ldr	r3, [r0, #4]
    e802:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e808:	f7ff bd8c 	b.w	e324 <z_log_notify_backend_enabled>
    e80c:	000365f0 	.word	0x000365f0
    e810:	0003887c 	.word	0x0003887c
    e814:	000381c3 	.word	0x000381c3
    e818:	00038844 	.word	0x00038844

0000e81c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e820:	b08f      	sub	sp, #60	; 0x3c
    e822:	f3c1 284a 	ubfx	r8, r1, #9, #11
    e826:	af04      	add	r7, sp, #16
    e828:	460d      	mov	r5, r1
    e82a:	4691      	mov	r9, r2
    e82c:	60b8      	str	r0, [r7, #8]
    e82e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    e830:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e832:	f1b8 0f00 	cmp.w	r8, #0
    e836:	d066      	beq.n	e906 <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
    e838:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e83a:	f04f 0b04 	mov.w	fp, #4
    e83e:	f04f 0a0a 	mov.w	sl, #10
    e842:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e846:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    e84a:	e9c7 6607 	strd	r6, r6, [r7, #28]
    e84e:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    e850:	9301      	str	r3, [sp, #4]
    e852:	f8cd b008 	str.w	fp, [sp, #8]
    e856:	f8cd a000 	str.w	sl, [sp]
    e85a:	f107 031c 	add.w	r3, r7, #28
    e85e:	4632      	mov	r2, r6
    e860:	4648      	mov	r0, r9
    e862:	68f9      	ldr	r1, [r7, #12]
    e864:	f7fd fe14 	bl	c490 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    e868:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e86c:	4603      	mov	r3, r0
    e86e:	d31c      	bcc.n	e8aa <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    e870:	466c      	mov	r4, sp
    e872:	b08a      	sub	sp, #40	; 0x28
    e874:	f8d9 1004 	ldr.w	r1, [r9, #4]
    e878:	ab04      	add	r3, sp, #16
    e87a:	482b      	ldr	r0, [pc, #172]	; (e928 <z_impl_z_log_msg_static_create+0x10c>)
    e87c:	461a      	mov	r2, r3
    e87e:	e9c3 0105 	strd	r0, r1, [r3, #20]
    e882:	f240 71ff 	movw	r1, #2047	; 0x7ff
    e886:	61d9      	str	r1, [r3, #28]
    e888:	f44f 7100 	mov.w	r1, #512	; 0x200
    e88c:	8419      	strh	r1, [r3, #32]
    e88e:	4b27      	ldr	r3, [pc, #156]	; (e92c <z_impl_z_log_msg_static_create+0x110>)
    e890:	f842 3f10 	str.w	r3, [r2, #16]!
    e894:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    e898:	4633      	mov	r3, r6
    e89a:	4825      	ldr	r0, [pc, #148]	; (e930 <z_impl_z_log_msg_static_create+0x114>)
    e89c:	f7ff ffbe 	bl	e81c <z_impl_z_log_msg_static_create>
    e8a0:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    e8a2:	372c      	adds	r7, #44	; 0x2c
    e8a4:	46bd      	mov	sp, r7
    e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    e8aa:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e8ae:	f104 0017 	add.w	r0, r4, #23
    e8b2:	4418      	add	r0, r3
    e8b4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8b8:	0880      	lsrs	r0, r0, #2
    e8ba:	603b      	str	r3, [r7, #0]
    e8bc:	f7ff fdba 	bl	e434 <z_log_msg_alloc>
    e8c0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    e8c4:	4604      	mov	r4, r0
    e8c6:	b330      	cbz	r0, e916 <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
    e8c8:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    e8ca:	f100 0110 	add.w	r1, r0, #16
    e8ce:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    e8d2:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    e8d6:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    e8d8:	e9cd a300 	strd	sl, r3, [sp]
    e8dc:	f8cd b008 	str.w	fp, [sp, #8]
    e8e0:	4648      	mov	r0, r9
    e8e2:	4a14      	ldr	r2, [pc, #80]	; (e934 <z_impl_z_log_msg_static_create+0x118>)
    e8e4:	68f9      	ldr	r1, [r7, #12]
    e8e6:	f107 031c 	add.w	r3, r7, #28
    e8ea:	f7fd fdd1 	bl	c490 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
    e8ee:	2800      	cmp	r0, #0
    e8f0:	da11      	bge.n	e916 <z_impl_z_log_msg_static_create+0xfa>
    e8f2:	4911      	ldr	r1, [pc, #68]	; (e938 <z_impl_z_log_msg_static_create+0x11c>)
    e8f4:	4811      	ldr	r0, [pc, #68]	; (e93c <z_impl_z_log_msg_static_create+0x120>)
    e8f6:	2356      	movs	r3, #86	; 0x56
    e8f8:	4a11      	ldr	r2, [pc, #68]	; (e940 <z_impl_z_log_msg_static_create+0x124>)
    e8fa:	f020 f82b 	bl	2e954 <assert_print>
    e8fe:	2156      	movs	r1, #86	; 0x56
    e900:	480f      	ldr	r0, [pc, #60]	; (e940 <z_impl_z_log_msg_static_create+0x124>)
    e902:	f020 f820 	bl	2e946 <assert_post_action>
    e906:	f104 0017 	add.w	r0, r4, #23
    e90a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e90e:	0880      	lsrs	r0, r0, #2
    e910:	f7ff fd90 	bl	e434 <z_log_msg_alloc>
    e914:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
    e916:	f368 2553 	bfi	r5, r8, #9, #11
    e91a:	462a      	mov	r2, r5
    e91c:	4620      	mov	r0, r4
    e91e:	687b      	ldr	r3, [r7, #4]
    e920:	68b9      	ldr	r1, [r7, #8]
    e922:	f020 f986 	bl	2ec32 <z_log_msg_finalize>
    e926:	e7bc      	b.n	e8a2 <z_impl_z_log_msg_static_create+0x86>
    e928:	0003889c 	.word	0x0003889c
    e92c:	01000004 	.word	0x01000004
    e930:	00036498 	.word	0x00036498
    e934:	0002ec07 	.word	0x0002ec07
    e938:	00038908 	.word	0x00038908
    e93c:	000381c3 	.word	0x000381c3
    e940:	000388db 	.word	0x000388db

0000e944 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    e944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e948:	b087      	sub	sp, #28
    e94a:	4604      	mov	r4, r0
    e94c:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    e950:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    e954:	460f      	mov	r7, r1
    e956:	4693      	mov	fp, r2
    e958:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    e95a:	b1ae      	cbz	r6, e988 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    e95c:	2110      	movs	r1, #16
    e95e:	4633      	mov	r3, r6
    e960:	4652      	mov	r2, sl
    e962:	2000      	movs	r0, #0
    e964:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    e968:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    e96c:	f7fd fb72 	bl	c054 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    e970:	1e01      	subs	r1, r0, #0
    e972:	da0a      	bge.n	e98a <z_impl_z_log_msg_runtime_vcreate+0x46>
    e974:	491f      	ldr	r1, [pc, #124]	; (e9f4 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    e976:	2375      	movs	r3, #117	; 0x75
    e978:	4a1f      	ldr	r2, [pc, #124]	; (e9f8 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e97a:	4820      	ldr	r0, [pc, #128]	; (e9fc <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e97c:	f01f ffea 	bl	2e954 <assert_print>
    e980:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    e982:	481d      	ldr	r0, [pc, #116]	; (e9f8 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e984:	f01f ffdf 	bl	2e946 <assert_post_action>
		plen = 0;
    e988:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    e98a:	f105 0017 	add.w	r0, r5, #23
    e98e:	4408      	add	r0, r1
	struct log_msg_desc desc =
    e990:	4b1b      	ldr	r3, [pc, #108]	; (ea00 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e992:	f004 0407 	and.w	r4, r4, #7
    e996:	f00b 0b07 	and.w	fp, fp, #7
    e99a:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    e99c:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    e9a0:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    e9a4:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
    e9a8:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    e9aa:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    e9ac:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    e9ae:	f7ff fd41 	bl	e434 <z_log_msg_alloc>
	struct log_msg_desc desc =
    e9b2:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
    e9b6:	4605      	mov	r5, r0
    e9b8:	b190      	cbz	r0, e9e0 <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
    e9ba:	b18e      	cbz	r6, e9e0 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    e9bc:	4633      	mov	r3, r6
    e9be:	4652      	mov	r2, sl
    e9c0:	9903      	ldr	r1, [sp, #12]
    e9c2:	f8cd 9000 	str.w	r9, [sp]
    e9c6:	3010      	adds	r0, #16
    e9c8:	f7fd fb44 	bl	c054 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    e9cc:	2800      	cmp	r0, #0
    e9ce:	da07      	bge.n	e9e0 <z_impl_z_log_msg_runtime_vcreate+0x9c>
    e9d0:	4908      	ldr	r1, [pc, #32]	; (e9f4 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    e9d2:	238f      	movs	r3, #143	; 0x8f
    e9d4:	4a08      	ldr	r2, [pc, #32]	; (e9f8 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e9d6:	4809      	ldr	r0, [pc, #36]	; (e9fc <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e9d8:	f01f ffbc 	bl	2e954 <assert_print>
    e9dc:	218f      	movs	r1, #143	; 0x8f
    e9de:	e7d0      	b.n	e982 <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    e9e0:	4643      	mov	r3, r8
    e9e2:	4622      	mov	r2, r4
    e9e4:	4639      	mov	r1, r7
    e9e6:	4628      	mov	r0, r5
	}
}
    e9e8:	b007      	add	sp, #28
    e9ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    e9ee:	f020 b920 	b.w	2ec32 <z_log_msg_finalize>
    e9f2:	bf00      	nop
    e9f4:	00038907 	.word	0x00038907
    e9f8:	000388db 	.word	0x000388db
    e9fc:	000381c3 	.word	0x000381c3
    ea00:	000ffe00 	.word	0x000ffe00

0000ea04 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    ea04:	b40e      	push	{r1, r2, r3}
    ea06:	b503      	push	{r0, r1, lr}
    ea08:	ab03      	add	r3, sp, #12
    ea0a:	f853 2b04 	ldr.w	r2, [r3], #4
    ea0e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    ea10:	4804      	ldr	r0, [pc, #16]	; (ea24 <print_formatted+0x20>)
	va_start(args, fmt);
    ea12:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    ea14:	f020 f933 	bl	2ec7e <cbvprintf>
	va_end(args);

	return length;
}
    ea18:	b002      	add	sp, #8
    ea1a:	f85d eb04 	ldr.w	lr, [sp], #4
    ea1e:	b003      	add	sp, #12
    ea20:	4770      	bx	lr
    ea22:	bf00      	nop
    ea24:	0000ea45 	.word	0x0000ea45

0000ea28 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ea28:	06ca      	lsls	r2, r1, #27
    ea2a:	d405      	bmi.n	ea38 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ea2c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    ea2e:	bf4c      	ite	mi
    ea30:	4902      	ldrmi	r1, [pc, #8]	; (ea3c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    ea32:	4903      	ldrpl	r1, [pc, #12]	; (ea40 <newline_print+0x18>)
    ea34:	f7ff bfe6 	b.w	ea04 <print_formatted>
	}
}
    ea38:	4770      	bx	lr
    ea3a:	bf00      	nop
    ea3c:	00038b1a 	.word	0x00038b1a
    ea40:	0003f88e 	.word	0x0003f88e

0000ea44 <out_func>:
{
    ea44:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea46:	684b      	ldr	r3, [r1, #4]
{
    ea48:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea4a:	681a      	ldr	r2, [r3, #0]
    ea4c:	68cb      	ldr	r3, [r1, #12]
{
    ea4e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ea50:	429a      	cmp	r2, r3
    ea52:	d102      	bne.n	ea5a <out_func+0x16>
		log_output_flush(out_ctx);
    ea54:	4608      	mov	r0, r1
    ea56:	f020 f919 	bl	2ec8c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ea5a:	6863      	ldr	r3, [r4, #4]
    ea5c:	e8d3 2fef 	ldaex	r2, [r3]
    ea60:	1c51      	adds	r1, r2, #1
    ea62:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ea66:	2800      	cmp	r0, #0
    ea68:	d1f8      	bne.n	ea5c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ea6a:	68a3      	ldr	r3, [r4, #8]
    ea6c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    ea6e:	6863      	ldr	r3, [r4, #4]
    ea70:	681a      	ldr	r2, [r3, #0]
    ea72:	68e3      	ldr	r3, [r4, #12]
    ea74:	429a      	cmp	r2, r3
    ea76:	d909      	bls.n	ea8c <out_func+0x48>
    ea78:	4905      	ldr	r1, [pc, #20]	; (ea90 <out_func+0x4c>)
    ea7a:	4806      	ldr	r0, [pc, #24]	; (ea94 <out_func+0x50>)
    ea7c:	237a      	movs	r3, #122	; 0x7a
    ea7e:	4a06      	ldr	r2, [pc, #24]	; (ea98 <out_func+0x54>)
    ea80:	f01f ff68 	bl	2e954 <assert_print>
    ea84:	217a      	movs	r1, #122	; 0x7a
    ea86:	4804      	ldr	r0, [pc, #16]	; (ea98 <out_func+0x54>)
    ea88:	f01f ff5d 	bl	2e946 <assert_post_action>
}
    ea8c:	2000      	movs	r0, #0
    ea8e:	bd38      	pop	{r3, r4, r5, pc}
    ea90:	00038940 	.word	0x00038940
    ea94:	000381c3 	.word	0x000381c3
    ea98:	00038911 	.word	0x00038911

0000ea9c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaa0:	b089      	sub	sp, #36	; 0x24
    eaa2:	469a      	mov	sl, r3
    eaa4:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    eaa8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    eaac:	9305      	str	r3, [sp, #20]
    eaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eab0:	4604      	mov	r4, r0
    eab2:	460d      	mov	r5, r1
    eab4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    eab6:	9206      	str	r2, [sp, #24]
    eab8:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    eaba:	f1bb 0f00 	cmp.w	fp, #0
    eabe:	f000 8085 	beq.w	ebcc <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    eac2:	f006 0308 	and.w	r3, r6, #8
    eac6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    eac8:	f020 f89b 	bl	2ec02 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    eacc:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    ead0:	4602      	mov	r2, r0
    ead2:	2800      	cmp	r0, #0
    ead4:	d049      	beq.n	eb6a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    ead6:	4620      	mov	r0, r4
    ead8:	498c      	ldr	r1, [pc, #560]	; (ed0c <log_output_process+0x270>)
    eada:	f7ff ff93 	bl	ea04 <print_formatted>
    eade:	4680      	mov	r8, r0
	if (stamp) {
    eae0:	f1b9 0f00 	cmp.w	r9, #0
    eae4:	d008      	beq.n	eaf8 <log_output_process+0x5c>
	if (!format) {
    eae6:	f016 0f44 	tst.w	r6, #68	; 0x44
    eaea:	d140      	bne.n	eb6e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    eaec:	462a      	mov	r2, r5
    eaee:	4620      	mov	r0, r4
    eaf0:	4987      	ldr	r1, [pc, #540]	; (ed10 <log_output_process+0x274>)
    eaf2:	f7ff ff87 	bl	ea04 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    eaf6:	4480      	add	r8, r0
	if (color) {
    eaf8:	f006 0301 	and.w	r3, r6, #1
    eafc:	b153      	cbz	r3, eb14 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    eafe:	4b85      	ldr	r3, [pc, #532]	; (ed14 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    eb00:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    eb02:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    eb06:	4b84      	ldr	r3, [pc, #528]	; (ed18 <log_output_process+0x27c>)
    eb08:	4984      	ldr	r1, [pc, #528]	; (ed1c <log_output_process+0x280>)
    eb0a:	2a00      	cmp	r2, #0
    eb0c:	bf08      	it	eq
    eb0e:	461a      	moveq	r2, r3
    eb10:	f7ff ff78 	bl	ea04 <print_formatted>
	if (level_on) {
    eb14:	f006 0308 	and.w	r3, r6, #8
    eb18:	2b00      	cmp	r3, #0
    eb1a:	d054      	beq.n	ebc6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    eb1c:	4b80      	ldr	r3, [pc, #512]	; (ed20 <log_output_process+0x284>)
    eb1e:	4620      	mov	r0, r4
    eb20:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    eb24:	497f      	ldr	r1, [pc, #508]	; (ed24 <log_output_process+0x288>)
    eb26:	f7ff ff6d 	bl	ea04 <print_formatted>
    eb2a:	4605      	mov	r5, r0
	if (domain) {
    eb2c:	9b06      	ldr	r3, [sp, #24]
    eb2e:	b12b      	cbz	r3, eb3c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    eb30:	461a      	mov	r2, r3
    eb32:	4620      	mov	r0, r4
    eb34:	497c      	ldr	r1, [pc, #496]	; (ed28 <log_output_process+0x28c>)
    eb36:	f7ff ff65 	bl	ea04 <print_formatted>
    eb3a:	4405      	add	r5, r0
	if (source) {
    eb3c:	f1ba 0f00 	cmp.w	sl, #0
    eb40:	d005      	beq.n	eb4e <log_output_process+0xb2>
		total += print_formatted(output,
    eb42:	4652      	mov	r2, sl
    eb44:	4620      	mov	r0, r4
    eb46:	4979      	ldr	r1, [pc, #484]	; (ed2c <log_output_process+0x290>)
    eb48:	f7ff ff5c 	bl	ea04 <print_formatted>
    eb4c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    eb4e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    eb50:	2f00      	cmp	r7, #0
    eb52:	d149      	bne.n	ebe8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    eb54:	9b04      	ldr	r3, [sp, #16]
    eb56:	2b00      	cmp	r3, #0
    eb58:	d160      	bne.n	ec1c <log_output_process+0x180>
	if (color) {
    eb5a:	07f3      	lsls	r3, r6, #31
    eb5c:	f100 80cf 	bmi.w	ecfe <log_output_process+0x262>
	newline_print(output, flags);
    eb60:	4631      	mov	r1, r6
    eb62:	4620      	mov	r0, r4
    eb64:	f7ff ff60 	bl	ea28 <newline_print>
}
    eb68:	e0c3      	b.n	ecf2 <log_output_process+0x256>
	uint32_t length = 0U;
    eb6a:	4680      	mov	r8, r0
    eb6c:	e7b8      	b.n	eae0 <log_output_process+0x44>
	} else if (freq != 0U) {
    eb6e:	4b70      	ldr	r3, [pc, #448]	; (ed30 <log_output_process+0x294>)
    eb70:	6818      	ldr	r0, [r3, #0]
    eb72:	2800      	cmp	r0, #0
    eb74:	d0bf      	beq.n	eaf6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    eb76:	4b6f      	ldr	r3, [pc, #444]	; (ed34 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    eb78:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    eb7c:	681b      	ldr	r3, [r3, #0]
    eb7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    eb82:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    eb86:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    eb8a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    eb8e:	fb09 f505 	mul.w	r5, r9, r5
    eb92:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eb96:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    eb9a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    eb9e:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eba2:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    eba6:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ebaa:	fb09 f505 	mul.w	r5, r9, r5
    ebae:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    ebb2:	fb0c 1113 	mls	r1, ip, r3, r1
    ebb6:	4620      	mov	r0, r4
    ebb8:	9100      	str	r1, [sp, #0]
    ebba:	e9cd e501 	strd	lr, r5, [sp, #4]
    ebbe:	495e      	ldr	r1, [pc, #376]	; (ed38 <log_output_process+0x29c>)
    ebc0:	f7ff ff20 	bl	ea04 <print_formatted>
    ebc4:	e797      	b.n	eaf6 <log_output_process+0x5a>
	int total = 0;
    ebc6:	f006 0508 	and.w	r5, r6, #8
    ebca:	e7af      	b.n	eb2c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ebcc:	f1ba 0f01 	cmp.w	sl, #1
    ebd0:	d106      	bne.n	ebe0 <log_output_process+0x144>
	if (package) {
    ebd2:	b9ef      	cbnz	r7, ec10 <log_output_process+0x174>
	if (data_len) {
    ebd4:	9b04      	ldr	r3, [sp, #16]
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	f000 808b 	beq.w	ecf2 <log_output_process+0x256>
		prefix_offset = 0;
    ebdc:	2500      	movs	r5, #0
    ebde:	e01d      	b.n	ec1c <log_output_process+0x180>
	if (package) {
    ebe0:	2f00      	cmp	r7, #0
    ebe2:	d0f7      	beq.n	ebd4 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ebe4:	4855      	ldr	r0, [pc, #340]	; (ed3c <log_output_process+0x2a0>)
    ebe6:	e014      	b.n	ec12 <log_output_process+0x176>
		cb = out_func;
    ebe8:	4855      	ldr	r0, [pc, #340]	; (ed40 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    ebea:	463b      	mov	r3, r7
    ebec:	4622      	mov	r2, r4
    ebee:	4955      	ldr	r1, [pc, #340]	; (ed44 <log_output_process+0x2a8>)
    ebf0:	f01f fc57 	bl	2e4a2 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    ebf4:	2800      	cmp	r0, #0
    ebf6:	da0e      	bge.n	ec16 <log_output_process+0x17a>
    ebf8:	4953      	ldr	r1, [pc, #332]	; (ed48 <log_output_process+0x2ac>)
    ebfa:	4854      	ldr	r0, [pc, #336]	; (ed4c <log_output_process+0x2b0>)
    ebfc:	f44f 7302 	mov.w	r3, #520	; 0x208
    ec00:	4a53      	ldr	r2, [pc, #332]	; (ed50 <log_output_process+0x2b4>)
    ec02:	f01f fea7 	bl	2e954 <assert_print>
    ec06:	f44f 7102 	mov.w	r1, #520	; 0x208
    ec0a:	4851      	ldr	r0, [pc, #324]	; (ed50 <log_output_process+0x2b4>)
    ec0c:	f01f fe9b 	bl	2e946 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ec10:	484b      	ldr	r0, [pc, #300]	; (ed40 <log_output_process+0x2a4>)
		prefix_offset = 0;
    ec12:	465d      	mov	r5, fp
    ec14:	e7e9      	b.n	ebea <log_output_process+0x14e>
	if (data_len) {
    ec16:	9b04      	ldr	r3, [sp, #16]
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d066      	beq.n	ecea <log_output_process+0x24e>
		print_formatted(output, " ");
    ec1c:	f8df 8134 	ldr.w	r8, [pc, #308]	; ed54 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    ec20:	f8df 9134 	ldr.w	r9, [pc, #308]	; ed58 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec24:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    ec26:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec28:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    ec2a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ec2c:	bf28      	it	cs
    ec2e:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    ec30:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    ec34:	f7ff fef8 	bl	ea28 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    ec38:	4555      	cmp	r5, sl
    ec3a:	dc43      	bgt.n	ecc4 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    ec3c:	9b05      	ldr	r3, [sp, #20]
    ec3e:	4649      	mov	r1, r9
    ec40:	4620      	mov	r0, r4
    ec42:	781a      	ldrb	r2, [r3, #0]
    ec44:	f7ff fede 	bl	ea04 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec48:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    ec4c:	f01a 0f07 	tst.w	sl, #7
    ec50:	d103      	bne.n	ec5a <log_output_process+0x1be>
			print_formatted(output, " ");
    ec52:	4641      	mov	r1, r8
    ec54:	4620      	mov	r0, r4
    ec56:	f7ff fed5 	bl	ea04 <print_formatted>
		if (i < length) {
    ec5a:	4557      	cmp	r7, sl
    ec5c:	d939      	bls.n	ecd2 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    ec5e:	9b05      	ldr	r3, [sp, #20]
    ec60:	4649      	mov	r1, r9
    ec62:	4620      	mov	r0, r4
    ec64:	f813 200a 	ldrb.w	r2, [r3, sl]
    ec68:	f7ff fecc 	bl	ea04 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec6c:	f10a 0a01 	add.w	sl, sl, #1
    ec70:	f1ba 0f10 	cmp.w	sl, #16
    ec74:	d1ea      	bne.n	ec4c <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec76:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    ec7a:	4620      	mov	r0, r4
    ec7c:	4937      	ldr	r1, [pc, #220]	; (ed5c <log_output_process+0x2c0>)
    ec7e:	f7ff fec1 	bl	ea04 <print_formatted>
		if (i < length) {
    ec82:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    ec84:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    ec86:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    ec88:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    ec8a:	4b35      	ldr	r3, [pc, #212]	; (ed60 <log_output_process+0x2c4>)
    ec8c:	5c99      	ldrb	r1, [r3, r2]
    ec8e:	f011 0f97 	tst.w	r1, #151	; 0x97
    ec92:	bf08      	it	eq
    ec94:	222e      	moveq	r2, #46	; 0x2e
    ec96:	4933      	ldr	r1, [pc, #204]	; (ed64 <log_output_process+0x2c8>)
    ec98:	f7ff feb4 	bl	ea04 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec9c:	f10a 0a01 	add.w	sl, sl, #1
    eca0:	f1ba 0f10 	cmp.w	sl, #16
    eca4:	d01a      	beq.n	ecdc <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    eca6:	f01a 0f07 	tst.w	sl, #7
    ecaa:	d103      	bne.n	ecb4 <log_output_process+0x218>
			print_formatted(output, " ");
    ecac:	4641      	mov	r1, r8
    ecae:	4620      	mov	r0, r4
    ecb0:	f7ff fea8 	bl	ea04 <print_formatted>
		if (i < length) {
    ecb4:	4557      	cmp	r7, sl
    ecb6:	4652      	mov	r2, sl
    ecb8:	d8e4      	bhi.n	ec84 <log_output_process+0x1e8>
			print_formatted(output, " ");
    ecba:	4641      	mov	r1, r8
    ecbc:	4620      	mov	r0, r4
    ecbe:	f7ff fea1 	bl	ea04 <print_formatted>
    ecc2:	e7eb      	b.n	ec9c <log_output_process+0x200>
		print_formatted(output, " ");
    ecc4:	4641      	mov	r1, r8
    ecc6:	4620      	mov	r0, r4
    ecc8:	f7ff fe9c 	bl	ea04 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    eccc:	f10a 0a01 	add.w	sl, sl, #1
    ecd0:	e7b2      	b.n	ec38 <log_output_process+0x19c>
			print_formatted(output, "   ");
    ecd2:	4620      	mov	r0, r4
    ecd4:	4924      	ldr	r1, [pc, #144]	; (ed68 <log_output_process+0x2cc>)
    ecd6:	f7ff fe95 	bl	ea04 <print_formatted>
    ecda:	e7c7      	b.n	ec6c <log_output_process+0x1d0>
		data += length;
    ecdc:	9b05      	ldr	r3, [sp, #20]
    ecde:	443b      	add	r3, r7
    ece0:	9305      	str	r3, [sp, #20]
	} while (len);
    ece2:	9b04      	ldr	r3, [sp, #16]
    ece4:	1bdb      	subs	r3, r3, r7
    ece6:	9304      	str	r3, [sp, #16]
    ece8:	d19c      	bne.n	ec24 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ecea:	f1bb 0f00 	cmp.w	fp, #0
    ecee:	f47f af34 	bne.w	eb5a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ecf2:	4620      	mov	r0, r4
}
    ecf4:	b009      	add	sp, #36	; 0x24
    ecf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ecfa:	f01f bfc7 	b.w	2ec8c <log_output_flush>
		print_formatted(output, "%s", log_color);
    ecfe:	4620      	mov	r0, r4
    ed00:	4a05      	ldr	r2, [pc, #20]	; (ed18 <log_output_process+0x27c>)
    ed02:	4906      	ldr	r1, [pc, #24]	; (ed1c <log_output_process+0x280>)
    ed04:	f7ff fe7e 	bl	ea04 <print_formatted>
}
    ed08:	e72a      	b.n	eb60 <log_output_process+0xc4>
    ed0a:	bf00      	nop
    ed0c:	00038975 	.word	0x00038975
    ed10:	00038979 	.word	0x00038979
    ed14:	000368d4 	.word	0x000368d4
    ed18:	00038970 	.word	0x00038970
    ed1c:	0003cc0c 	.word	0x0003cc0c
    ed20:	000368e8 	.word	0x000368e8
    ed24:	0003899e 	.word	0x0003899e
    ed28:	000389a4 	.word	0x000389a4
    ed2c:	000389a8 	.word	0x000389a8
    ed30:	2000f934 	.word	0x2000f934
    ed34:	2000f930 	.word	0x2000f930
    ed38:	00038982 	.word	0x00038982
    ed3c:	0002eca7 	.word	0x0002eca7
    ed40:	0000ea45 	.word	0x0000ea45
    ed44:	0002ec7f 	.word	0x0002ec7f
    ed48:	000389ad 	.word	0x000389ad
    ed4c:	000381c3 	.word	0x000381c3
    ed50:	00038911 	.word	0x00038911
    ed54:	000389be 	.word	0x000389be
    ed58:	000389b6 	.word	0x000389b6
    ed5c:	000389c0 	.word	0x000389c0
    ed60:	00040f97 	.word	0x00040f97
    ed64:	0003cd8e 	.word	0x0003cd8e
    ed68:	000389bc 	.word	0x000389bc

0000ed6c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    ed70:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    ed72:	684b      	ldr	r3, [r1, #4]
    ed74:	4605      	mov	r5, r0
    ed76:	460c      	mov	r4, r1
    ed78:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ed7a:	688e      	ldr	r6, [r1, #8]
    ed7c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ed7e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ed82:	b15b      	cbz	r3, ed9c <log_output_msg_process+0x30>
    ed84:	4a13      	ldr	r2, [pc, #76]	; (edd4 <log_output_msg_process+0x68>)
    ed86:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    ed88:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ed8c:	2900      	cmp	r1, #0
    ed8e:	db1f      	blt.n	edd0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    ed90:	7820      	ldrb	r0, [r4, #0]
    ed92:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ed96:	f7ff fd0d 	bl	e7b4 <log_source_name_get>
    ed9a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    ed9c:	4621      	mov	r1, r4
    ed9e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    eda2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    eda4:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    eda8:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    edaa:	eb01 0402 	add.w	r4, r1, r2
    edae:	bf08      	it	eq
    edb0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    edb2:	f3c0 100b 	ubfx	r0, r0, #4, #12
    edb6:	e9cd 0803 	strd	r0, r8, [sp, #12]
    edba:	e9cd 1401 	strd	r1, r4, [sp, #4]
    edbe:	2200      	movs	r2, #0
    edc0:	4631      	mov	r1, r6
    edc2:	4628      	mov	r0, r5
    edc4:	9700      	str	r7, [sp, #0]
    edc6:	f7ff fe69 	bl	ea9c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    edca:	b006      	add	sp, #24
    edcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    edd0:	2300      	movs	r3, #0
    edd2:	e7e3      	b.n	ed9c <log_output_msg_process+0x30>
    edd4:	000363c0 	.word	0x000363c0

0000edd8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    edd8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    eddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    edde:	428b      	cmp	r3, r1
    ede0:	bf28      	it	cs
    ede2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ede4:	6805      	ldr	r5, [r0, #0]
{
    ede6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ede8:	2105      	movs	r1, #5
    edea:	4668      	mov	r0, sp
    edec:	4a0d      	ldr	r2, [pc, #52]	; (ee24 <log_output_dropped_process+0x4c>)
    edee:	f01f fbe1 	bl	2e5b4 <snprintk>
    edf2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    edf4:	6863      	ldr	r3, [r4, #4]
    edf6:	4628      	mov	r0, r5
    edf8:	220b      	movs	r2, #11
    edfa:	685b      	ldr	r3, [r3, #4]
    edfc:	490a      	ldr	r1, [pc, #40]	; (ee28 <log_output_dropped_process+0x50>)
    edfe:	f01f ff31 	bl	2ec64 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ee02:	6863      	ldr	r3, [r4, #4]
    ee04:	4632      	mov	r2, r6
    ee06:	4669      	mov	r1, sp
    ee08:	4628      	mov	r0, r5
    ee0a:	685b      	ldr	r3, [r3, #4]
    ee0c:	f01f ff2a 	bl	2ec64 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ee10:	6863      	ldr	r3, [r4, #4]
    ee12:	221b      	movs	r2, #27
    ee14:	4628      	mov	r0, r5
    ee16:	685b      	ldr	r3, [r3, #4]
    ee18:	4904      	ldr	r1, [pc, #16]	; (ee2c <log_output_dropped_process+0x54>)
    ee1a:	f01f ff23 	bl	2ec64 <buffer_write>
		     output->control_block->ctx);
}
    ee1e:	b002      	add	sp, #8
    ee20:	bd70      	pop	{r4, r5, r6, pc}
    ee22:	bf00      	nop
    ee24:	0003ea8e 	.word	0x0003ea8e
    ee28:	000389de 	.word	0x000389de
    ee2c:	000389c2 	.word	0x000389c2

0000ee30 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ee30:	2100      	movs	r1, #0
    ee32:	2301      	movs	r3, #1
    ee34:	4a06      	ldr	r2, [pc, #24]	; (ee50 <log_output_timestamp_freq_set+0x20>)
    ee36:	4290      	cmp	r0, r2
    ee38:	d806      	bhi.n	ee48 <log_output_timestamp_freq_set+0x18>
    ee3a:	4a06      	ldr	r2, [pc, #24]	; (ee54 <log_output_timestamp_freq_set+0x24>)
    ee3c:	b901      	cbnz	r1, ee40 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ee3e:	2301      	movs	r3, #1
    ee40:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ee42:	4b05      	ldr	r3, [pc, #20]	; (ee58 <log_output_timestamp_freq_set+0x28>)
    ee44:	6018      	str	r0, [r3, #0]
}
    ee46:	4770      	bx	lr
		timestamp_div *= 2U;
    ee48:	2101      	movs	r1, #1
		frequency /= 2U;
    ee4a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ee4c:	005b      	lsls	r3, r3, #1
    ee4e:	e7f2      	b.n	ee36 <log_output_timestamp_freq_set+0x6>
    ee50:	000f4240 	.word	0x000f4240
    ee54:	2000f930 	.word	0x2000f930
    ee58:	2000f934 	.word	0x2000f934

0000ee5c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ee5c:	4b01      	ldr	r3, [pc, #4]	; (ee64 <format_set+0x8>)
	return 0;
}
    ee5e:	2000      	movs	r0, #0
	log_format_current = log_type;
    ee60:	6019      	str	r1, [r3, #0]
}
    ee62:	4770      	bx	lr
    ee64:	2000f94c 	.word	0x2000f94c

0000ee68 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    ee68:	2201      	movs	r2, #1
    ee6a:	4b02      	ldr	r3, [pc, #8]	; (ee74 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ee6c:	4802      	ldr	r0, [pc, #8]	; (ee78 <panic+0x10>)
    ee6e:	701a      	strb	r2, [r3, #0]
    ee70:	f01f bf0c 	b.w	2ec8c <log_output_flush>
    ee74:	200111ef 	.word	0x200111ef
    ee78:	00036918 	.word	0x00036918

0000ee7c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    ee7c:	4801      	ldr	r0, [pc, #4]	; (ee84 <dropped+0x8>)
    ee7e:	f7ff bfab 	b.w	edd8 <log_output_dropped_process>
    ee82:	bf00      	nop
    ee84:	00036918 	.word	0x00036918

0000ee88 <process>:
{
    ee88:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee8a:	4b06      	ldr	r3, [pc, #24]	; (eea4 <process+0x1c>)
{
    ee8c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee8e:	6818      	ldr	r0, [r3, #0]
    ee90:	f7ff fa32 	bl	e2f8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    ee94:	4621      	mov	r1, r4
}
    ee96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee9a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    ee9c:	220f      	movs	r2, #15
    ee9e:	4802      	ldr	r0, [pc, #8]	; (eea8 <process+0x20>)
    eea0:	4718      	bx	r3
    eea2:	bf00      	nop
    eea4:	2000f94c 	.word	0x2000f94c
    eea8:	00036918 	.word	0x00036918

0000eeac <char_out>:
{
    eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeae:	460d      	mov	r5, r1
    eeb0:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    eeb2:	4f06      	ldr	r7, [pc, #24]	; (eecc <char_out+0x20>)
    eeb4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    eeb6:	42b4      	cmp	r4, r6
    eeb8:	d101      	bne.n	eebe <char_out+0x12>
}
    eeba:	4628      	mov	r0, r5
    eebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    eebe:	f814 1b01 	ldrb.w	r1, [r4], #1
    eec2:	68bb      	ldr	r3, [r7, #8]
    eec4:	4801      	ldr	r0, [pc, #4]	; (eecc <char_out+0x20>)
    eec6:	69db      	ldr	r3, [r3, #28]
    eec8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    eeca:	e7f4      	b.n	eeb6 <char_out+0xa>
    eecc:	000360cc 	.word	0x000360cc

0000eed0 <log_backend_uart_init>:
{
    eed0:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    eed2:	4807      	ldr	r0, [pc, #28]	; (eef0 <log_backend_uart_init+0x20>)
    eed4:	f025 fe21 	bl	34b1a <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    eed8:	b948      	cbnz	r0, eeee <log_backend_uart_init+0x1e>
    eeda:	4906      	ldr	r1, [pc, #24]	; (eef4 <log_backend_uart_init+0x24>)
    eedc:	4806      	ldr	r0, [pc, #24]	; (eef8 <log_backend_uart_init+0x28>)
    eede:	237f      	movs	r3, #127	; 0x7f
    eee0:	4a06      	ldr	r2, [pc, #24]	; (eefc <log_backend_uart_init+0x2c>)
    eee2:	f01f fd37 	bl	2e954 <assert_print>
    eee6:	217f      	movs	r1, #127	; 0x7f
    eee8:	4804      	ldr	r0, [pc, #16]	; (eefc <log_backend_uart_init+0x2c>)
    eeea:	f01f fd2c 	bl	2e946 <assert_post_action>
}
    eeee:	bd08      	pop	{r3, pc}
    eef0:	000360cc 	.word	0x000360cc
    eef4:	00038a48 	.word	0x00038a48
    eef8:	000381c3 	.word	0x000381c3
    eefc:	00038a0a 	.word	0x00038a0a

0000ef00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ef00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef04:	4605      	mov	r5, r0
	__asm__ volatile(
    ef06:	f04f 0320 	mov.w	r3, #32
    ef0a:	f3ef 8611 	mrs	r6, BASEPRI
    ef0e:	f383 8812 	msr	BASEPRI_MAX, r3
    ef12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef16:	4820      	ldr	r0, [pc, #128]	; (ef98 <pm_state_notify+0x98>)
    ef18:	f019 fc5e 	bl	287d8 <z_spin_lock_valid>
    ef1c:	b968      	cbnz	r0, ef3a <pm_state_notify+0x3a>
    ef1e:	2394      	movs	r3, #148	; 0x94
    ef20:	4a1e      	ldr	r2, [pc, #120]	; (ef9c <pm_state_notify+0x9c>)
    ef22:	491f      	ldr	r1, [pc, #124]	; (efa0 <pm_state_notify+0xa0>)
    ef24:	481f      	ldr	r0, [pc, #124]	; (efa4 <pm_state_notify+0xa4>)
    ef26:	f01f fd15 	bl	2e954 <assert_print>
    ef2a:	491b      	ldr	r1, [pc, #108]	; (ef98 <pm_state_notify+0x98>)
    ef2c:	481e      	ldr	r0, [pc, #120]	; (efa8 <pm_state_notify+0xa8>)
    ef2e:	f01f fd11 	bl	2e954 <assert_print>
    ef32:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef34:	4819      	ldr	r0, [pc, #100]	; (ef9c <pm_state_notify+0x9c>)
    ef36:	f01f fd06 	bl	2e946 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ef3a:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    ef3e:	4816      	ldr	r0, [pc, #88]	; (ef98 <pm_state_notify+0x98>)
    ef40:	f019 fc66 	bl	28810 <z_spin_lock_set_owner>
	return list->head;
    ef44:	4b19      	ldr	r3, [pc, #100]	; (efac <pm_state_notify+0xac>)
    ef46:	4f1a      	ldr	r7, [pc, #104]	; (efb0 <pm_state_notify+0xb0>)
    ef48:	681c      	ldr	r4, [r3, #0]
    ef4a:	f8df 8068 	ldr.w	r8, [pc, #104]	; efb4 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ef4e:	b97c      	cbnz	r4, ef70 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef50:	4811      	ldr	r0, [pc, #68]	; (ef98 <pm_state_notify+0x98>)
    ef52:	f019 fc4f 	bl	287f4 <z_spin_unlock_valid>
    ef56:	b9c8      	cbnz	r0, ef8c <pm_state_notify+0x8c>
    ef58:	23c2      	movs	r3, #194	; 0xc2
    ef5a:	4a10      	ldr	r2, [pc, #64]	; (ef9c <pm_state_notify+0x9c>)
    ef5c:	4916      	ldr	r1, [pc, #88]	; (efb8 <pm_state_notify+0xb8>)
    ef5e:	4811      	ldr	r0, [pc, #68]	; (efa4 <pm_state_notify+0xa4>)
    ef60:	f01f fcf8 	bl	2e954 <assert_print>
    ef64:	490c      	ldr	r1, [pc, #48]	; (ef98 <pm_state_notify+0x98>)
    ef66:	4815      	ldr	r0, [pc, #84]	; (efbc <pm_state_notify+0xbc>)
    ef68:	f01f fcf4 	bl	2e954 <assert_print>
    ef6c:	21c2      	movs	r1, #194	; 0xc2
    ef6e:	e7e1      	b.n	ef34 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    ef70:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ef74:	2d00      	cmp	r5, #0
    ef76:	bf18      	it	ne
    ef78:	4613      	movne	r3, r2
		if (callback) {
    ef7a:	b12b      	cbz	r3, ef88 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ef7c:	f898 2010 	ldrb.w	r2, [r8, #16]
    ef80:	fb09 f202 	mul.w	r2, r9, r2
    ef84:	5cb8      	ldrb	r0, [r7, r2]
    ef86:	4798      	blx	r3
	return node->next;
    ef88:	6824      	ldr	r4, [r4, #0]
    ef8a:	e7e0      	b.n	ef4e <pm_state_notify+0x4e>
	__asm__ volatile(
    ef8c:	f386 8811 	msr	BASEPRI, r6
    ef90:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ef94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef98:	2000f950 	.word	0x2000f950
    ef9c:	000385b7 	.word	0x000385b7
    efa0:	00038610 	.word	0x00038610
    efa4:	000381c3 	.word	0x000381c3
    efa8:	00038625 	.word	0x00038625
    efac:	2000f970 	.word	0x2000f970
    efb0:	2000f964 	.word	0x2000f964
    efb4:	20010fc0 	.word	0x20010fc0
    efb8:	000385e4 	.word	0x000385e4
    efbc:	000385fb 	.word	0x000385fb

0000efc0 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    efc0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    efc2:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    efc4:	4b16      	ldr	r3, [pc, #88]	; (f020 <pm_system_resume+0x60>)
    efc6:	7c1c      	ldrb	r4, [r3, #16]
    efc8:	f004 031f 	and.w	r3, r4, #31
    efcc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    efce:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    efd0:	4b14      	ldr	r3, [pc, #80]	; (f024 <pm_system_resume+0x64>)
    efd2:	0961      	lsrs	r1, r4, #5
    efd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    efd8:	e8d3 1fef 	ldaex	r1, [r3]
    efdc:	ea01 0500 	and.w	r5, r1, r0
    efe0:	e8c3 5fe6 	stlex	r6, r5, [r3]
    efe4:	2e00      	cmp	r6, #0
    efe6:	d1f7      	bne.n	efd8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    efe8:	420a      	tst	r2, r1
    efea:	d013      	beq.n	f014 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    efec:	4b0e      	ldr	r3, [pc, #56]	; (f028 <pm_system_resume+0x68>)
    efee:	4d0f      	ldr	r5, [pc, #60]	; (f02c <pm_system_resume+0x6c>)
    eff0:	b18b      	cbz	r3, f016 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    eff2:	230c      	movs	r3, #12
    eff4:	4363      	muls	r3, r4
    eff6:	18ea      	adds	r2, r5, r3
    eff8:	7851      	ldrb	r1, [r2, #1]
    effa:	5ce8      	ldrb	r0, [r5, r3]
    effc:	f01f fdcd 	bl	2eb9a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    f000:	2000      	movs	r0, #0
    f002:	f7ff ff7d 	bl	ef00 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    f006:	230c      	movs	r3, #12
    f008:	435c      	muls	r4, r3
    f00a:	2300      	movs	r3, #0
    f00c:	192a      	adds	r2, r5, r4
    f00e:	512b      	str	r3, [r5, r4]
    f010:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    f014:	bd70      	pop	{r4, r5, r6, pc}
    f016:	f383 8811 	msr	BASEPRI, r3
    f01a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    f01e:	e7ef      	b.n	f000 <pm_system_resume+0x40>
    f020:	20010fc0 	.word	0x20010fc0
    f024:	2000f978 	.word	0x2000f978
    f028:	0002eb9b 	.word	0x0002eb9b
    f02c:	2000f964 	.word	0x2000f964

0000f030 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    f034:	4b45      	ldr	r3, [pc, #276]	; (f14c <pm_system_suspend+0x11c>)
{
    f036:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    f038:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    f03a:	f04f 0320 	mov.w	r3, #32
    f03e:	f3ef 8811 	mrs	r8, BASEPRI
    f042:	f383 8812 	msr	BASEPRI_MAX, r3
    f046:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f04a:	4841      	ldr	r0, [pc, #260]	; (f150 <pm_system_suspend+0x120>)
    f04c:	f019 fbc4 	bl	287d8 <z_spin_lock_valid>
    f050:	b968      	cbnz	r0, f06e <pm_system_suspend+0x3e>
    f052:	2394      	movs	r3, #148	; 0x94
    f054:	4a3f      	ldr	r2, [pc, #252]	; (f154 <pm_system_suspend+0x124>)
    f056:	4940      	ldr	r1, [pc, #256]	; (f158 <pm_system_suspend+0x128>)
    f058:	4840      	ldr	r0, [pc, #256]	; (f15c <pm_system_suspend+0x12c>)
    f05a:	f01f fc7b 	bl	2e954 <assert_print>
    f05e:	493c      	ldr	r1, [pc, #240]	; (f150 <pm_system_suspend+0x120>)
    f060:	483f      	ldr	r0, [pc, #252]	; (f160 <pm_system_suspend+0x130>)
    f062:	f01f fc77 	bl	2e954 <assert_print>
    f066:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f068:	483a      	ldr	r0, [pc, #232]	; (f154 <pm_system_suspend+0x124>)
    f06a:	f01f fc6c 	bl	2e946 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    f06e:	240c      	movs	r4, #12
    f070:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    f072:	4837      	ldr	r0, [pc, #220]	; (f150 <pm_system_suspend+0x120>)
    f074:	f019 fbcc 	bl	28810 <z_spin_lock_set_owner>
    f078:	4b3a      	ldr	r3, [pc, #232]	; (f164 <pm_system_suspend+0x134>)
    f07a:	4e3b      	ldr	r6, [pc, #236]	; (f168 <pm_system_suspend+0x138>)
    f07c:	5d19      	ldrb	r1, [r3, r4]
    f07e:	191a      	adds	r2, r3, r4
    f080:	b1b9      	cbz	r1, f0b2 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    f082:	ca07      	ldmia	r2, {r0, r1, r2}
    f084:	eb06 0c04 	add.w	ip, r6, r4
    f088:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    f08c:	2200      	movs	r2, #0
    f08e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f090:	482f      	ldr	r0, [pc, #188]	; (f150 <pm_system_suspend+0x120>)
    f092:	f019 fbaf 	bl	287f4 <z_spin_unlock_valid>
    f096:	4604      	mov	r4, r0
    f098:	b9b0      	cbnz	r0, f0c8 <pm_system_suspend+0x98>
    f09a:	23c2      	movs	r3, #194	; 0xc2
    f09c:	4a2d      	ldr	r2, [pc, #180]	; (f154 <pm_system_suspend+0x124>)
    f09e:	4933      	ldr	r1, [pc, #204]	; (f16c <pm_system_suspend+0x13c>)
    f0a0:	482e      	ldr	r0, [pc, #184]	; (f15c <pm_system_suspend+0x12c>)
    f0a2:	f01f fc57 	bl	2e954 <assert_print>
    f0a6:	492a      	ldr	r1, [pc, #168]	; (f150 <pm_system_suspend+0x120>)
    f0a8:	4831      	ldr	r0, [pc, #196]	; (f170 <pm_system_suspend+0x140>)
    f0aa:	f01f fc53 	bl	2e954 <assert_print>
    f0ae:	21c2      	movs	r1, #194	; 0xc2
    f0b0:	e7da      	b.n	f068 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    f0b2:	4639      	mov	r1, r7
    f0b4:	4628      	mov	r0, r5
    f0b6:	f000 f865 	bl	f184 <pm_policy_next_state>
		if (info != NULL) {
    f0ba:	2800      	cmp	r0, #0
    f0bc:	d0e8      	beq.n	f090 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    f0be:	c807      	ldmia	r0, {r0, r1, r2}
    f0c0:	4434      	add	r4, r6
    f0c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    f0c6:	e7e3      	b.n	f090 <pm_system_suspend+0x60>
	__asm__ volatile(
    f0c8:	f388 8811 	msr	BASEPRI, r8
    f0cc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    f0d0:	230c      	movs	r3, #12
    f0d2:	436b      	muls	r3, r5
    f0d4:	18f2      	adds	r2, r6, r3
    f0d6:	5cf3      	ldrb	r3, [r6, r3]
    f0d8:	b3ab      	cbz	r3, f146 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    f0da:	1c7b      	adds	r3, r7, #1
    f0dc:	d00f      	beq.n	f0fe <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f0de:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    f0e2:	2100      	movs	r1, #0
    f0e4:	f8d2 e008 	ldr.w	lr, [r2, #8]
    f0e8:	4822      	ldr	r0, [pc, #136]	; (f174 <pm_system_suspend+0x144>)
    f0ea:	2300      	movs	r3, #0
    f0ec:	fbee 010c 	umlal	r0, r1, lr, ip
    f0f0:	4a21      	ldr	r2, [pc, #132]	; (f178 <pm_system_suspend+0x148>)
    f0f2:	f7f9 ff6b 	bl	8fcc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    f0f6:	2101      	movs	r1, #1
    f0f8:	1a38      	subs	r0, r7, r0
    f0fa:	f00c fab9 	bl	1b670 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    f0fe:	f01a fe3b 	bl	29d78 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    f102:	2001      	movs	r0, #1
    f104:	f7ff fefc 	bl	ef00 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f108:	4b1c      	ldr	r3, [pc, #112]	; (f17c <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f10a:	096a      	lsrs	r2, r5, #5
    f10c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    f110:	2201      	movs	r2, #1
    f112:	f005 011f 	and.w	r1, r5, #31
    f116:	408a      	lsls	r2, r1
    f118:	e8d3 0fef 	ldaex	r0, [r3]
    f11c:	4310      	orrs	r0, r2
    f11e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f122:	2900      	cmp	r1, #0
    f124:	d1f8      	bne.n	f118 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    f126:	4b16      	ldr	r3, [pc, #88]	; (f180 <pm_system_suspend+0x150>)
    f128:	b133      	cbz	r3, f138 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    f12a:	230c      	movs	r3, #12
    f12c:	436b      	muls	r3, r5
    f12e:	18f2      	adds	r2, r6, r3
    f130:	7851      	ldrb	r1, [r2, #1]
    f132:	5cf0      	ldrb	r0, [r6, r3]
    f134:	f01f fd25 	bl	2eb82 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    f138:	f7ff ff42 	bl	efc0 <pm_system_resume>
	k_sched_unlock();
    f13c:	f01a fe88 	bl	29e50 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    f140:	4620      	mov	r0, r4
    f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    f146:	461c      	mov	r4, r3
    f148:	e7fa      	b.n	f140 <pm_system_suspend+0x110>
    f14a:	bf00      	nop
    f14c:	20010fc0 	.word	0x20010fc0
    f150:	2000f954 	.word	0x2000f954
    f154:	000385b7 	.word	0x000385b7
    f158:	00038610 	.word	0x00038610
    f15c:	000381c3 	.word	0x000381c3
    f160:	00038625 	.word	0x00038625
    f164:	2000f958 	.word	0x2000f958
    f168:	2000f964 	.word	0x2000f964
    f16c:	000385e4 	.word	0x000385e4
    f170:	000385fb 	.word	0x000385fb
    f174:	000f423f 	.word	0x000f423f
    f178:	000f4240 	.word	0x000f4240
    f17c:	2000f978 	.word	0x2000f978
    f180:	0002eb83 	.word	0x0002eb83

0000f184 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f188:	b085      	sub	sp, #20
    f18a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    f18c:	a903      	add	r1, sp, #12
    f18e:	f000 f843 	bl	f218 <pm_state_cpu_get_all>
    f192:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    f196:	4604      	mov	r4, r0
    f198:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f19c:	4b1b      	ldr	r3, [pc, #108]	; (f20c <pm_policy_next_state+0x88>)
    f19e:	9d03      	ldr	r5, [sp, #12]
    f1a0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f1a4:	1e43      	subs	r3, r0, #1
    f1a6:	b21b      	sxth	r3, r3
    f1a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f1ac:	f8df 8060 	ldr.w	r8, [pc, #96]	; f210 <pm_policy_next_state+0x8c>
    f1b0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f1b4:	b924      	cbnz	r4, f1c0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    f1b6:	46a1      	mov	r9, r4
}
    f1b8:	4648      	mov	r0, r9
    f1ba:	b005      	add	sp, #20
    f1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1c0:	46c4      	mov	ip, r8
    f1c2:	4659      	mov	r1, fp
    f1c4:	6868      	ldr	r0, [r5, #4]
    f1c6:	2300      	movs	r3, #0
    f1c8:	fbe0 c107 	umlal	ip, r1, r0, r7
    f1cc:	4a11      	ldr	r2, [pc, #68]	; (f214 <pm_policy_next_state+0x90>)
    f1ce:	4660      	mov	r0, ip
    f1d0:	f7f9 fefc 	bl	8fcc <__aeabi_uldivmod>
    f1d4:	46c4      	mov	ip, r8
    f1d6:	4659      	mov	r1, fp
    f1d8:	9001      	str	r0, [sp, #4]
    f1da:	68a8      	ldr	r0, [r5, #8]
    f1dc:	2300      	movs	r3, #0
    f1de:	fbe0 c107 	umlal	ip, r1, r0, r7
    f1e2:	4a0c      	ldr	r2, [pc, #48]	; (f214 <pm_policy_next_state+0x90>)
    f1e4:	4660      	mov	r0, ip
    f1e6:	f7f9 fef1 	bl	8fcc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f1ea:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    f1ee:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f1f0:	d001      	beq.n	f1f6 <pm_policy_next_state+0x72>
    f1f2:	4582      	cmp	sl, r0
    f1f4:	d905      	bls.n	f202 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    f1f6:	1c73      	adds	r3, r6, #1
    f1f8:	d0de      	beq.n	f1b8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    f1fa:	9b01      	ldr	r3, [sp, #4]
    f1fc:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    f1fe:	42b0      	cmp	r0, r6
    f200:	d9da      	bls.n	f1b8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f202:	3c01      	subs	r4, #1
    f204:	b2a4      	uxth	r4, r4
    f206:	3d0c      	subs	r5, #12
    f208:	e7d4      	b.n	f1b4 <pm_policy_next_state+0x30>
    f20a:	bf00      	nop
    f20c:	2000c818 	.word	0x2000c818
    f210:	000f423f 	.word	0x000f423f
    f214:	000f4240 	.word	0x000f4240

0000f218 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    f218:	b908      	cbnz	r0, f21e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    f21a:	4b02      	ldr	r3, [pc, #8]	; (f224 <pm_state_cpu_get_all+0xc>)
    f21c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    f21e:	2000      	movs	r0, #0
    f220:	4770      	bx	lr
    f222:	bf00      	nop
    f224:	00036928 	.word	0x00036928

0000f228 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
    f228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f22c:	4605      	mov	r5, r0
    f22e:	460e      	mov	r6, r1
    f230:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f232:	4c1d      	ldr	r4, [pc, #116]	; (f2a8 <z_impl_zsock_socket+0x80>)
    f234:	f8df 8074 	ldr.w	r8, [pc, #116]	; f2ac <z_impl_zsock_socket+0x84>
    f238:	4544      	cmp	r4, r8
    f23a:	d92b      	bls.n	f294 <z_impl_zsock_socket+0x6c>
    f23c:	491c      	ldr	r1, [pc, #112]	; (f2b0 <z_impl_zsock_socket+0x88>)
    f23e:	23dd      	movs	r3, #221	; 0xdd
    f240:	4a1c      	ldr	r2, [pc, #112]	; (f2b4 <z_impl_zsock_socket+0x8c>)
    f242:	481d      	ldr	r0, [pc, #116]	; (f2b8 <z_impl_zsock_socket+0x90>)
    f244:	f01f fb86 	bl	2e954 <assert_print>
    f248:	481c      	ldr	r0, [pc, #112]	; (f2bc <z_impl_zsock_socket+0x94>)
    f24a:	f01f fb83 	bl	2e954 <assert_print>
    f24e:	21dd      	movs	r1, #221	; 0xdd
    f250:	e00f      	b.n	f272 <z_impl_zsock_socket+0x4a>
		if (sock_family->family != family &&
    f252:	6823      	ldr	r3, [r4, #0]
    f254:	42ab      	cmp	r3, r5
    f256:	d000      	beq.n	f25a <z_impl_zsock_socket+0x32>
    f258:	b9d3      	cbnz	r3, f290 <z_impl_zsock_socket+0x68>
		    sock_family->family != AF_UNSPEC) {
			continue;
		}

		NET_ASSERT(sock_family->is_supported);
    f25a:	68a3      	ldr	r3, [r4, #8]
    f25c:	b963      	cbnz	r3, f278 <z_impl_zsock_socket+0x50>
    f25e:	4918      	ldr	r1, [pc, #96]	; (f2c0 <z_impl_zsock_socket+0x98>)
    f260:	23e3      	movs	r3, #227	; 0xe3
    f262:	4a14      	ldr	r2, [pc, #80]	; (f2b4 <z_impl_zsock_socket+0x8c>)
    f264:	4814      	ldr	r0, [pc, #80]	; (f2b8 <z_impl_zsock_socket+0x90>)
    f266:	f01f fb75 	bl	2e954 <assert_print>
    f26a:	4816      	ldr	r0, [pc, #88]	; (f2c4 <z_impl_zsock_socket+0x9c>)
    f26c:	f01f fb72 	bl	2e954 <assert_print>
    f270:	21e3      	movs	r1, #227	; 0xe3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f272:	4810      	ldr	r0, [pc, #64]	; (f2b4 <z_impl_zsock_socket+0x8c>)
    f274:	f01f fb67 	bl	2e946 <assert_post_action>

		if (!sock_family->is_supported(family, type, proto)) {
    f278:	463a      	mov	r2, r7
    f27a:	4631      	mov	r1, r6
    f27c:	4628      	mov	r0, r5
    f27e:	4798      	blx	r3
    f280:	b130      	cbz	r0, f290 <z_impl_zsock_socket+0x68>
			continue;
		}

		return sock_family->handler(family, type, proto);
    f282:	463a      	mov	r2, r7
    f284:	4631      	mov	r1, r6
    f286:	4628      	mov	r0, r5
    f288:	68e3      	ldr	r3, [r4, #12]
	}

	errno = EAFNOSUPPORT;
	return -1;
}
    f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
    f28e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f290:	3410      	adds	r4, #16
    f292:	e7d1      	b.n	f238 <z_impl_zsock_socket+0x10>
    f294:	d3dd      	bcc.n	f252 <z_impl_zsock_socket+0x2a>
	errno = EAFNOSUPPORT;
    f296:	f020 fc6c 	bl	2fb72 <__errno>
    f29a:	236a      	movs	r3, #106	; 0x6a
    f29c:	6003      	str	r3, [r0, #0]
}
    f29e:	f04f 30ff 	mov.w	r0, #4294967295
    f2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2a6:	bf00      	nop
    f2a8:	0003637c 	.word	0x0003637c
    f2ac:	0003638c 	.word	0x0003638c
    f2b0:	00038b6a 	.word	0x00038b6a
    f2b4:	00038b1c 	.word	0x00038b1c
    f2b8:	000381c3 	.word	0x000381c3
    f2bc:	000387c1 	.word	0x000387c1
    f2c0:	00038b50 	.word	0x00038b50
    f2c4:	00038b19 	.word	0x00038b19

0000f2c8 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
    f2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2cc:	460f      	mov	r7, r1
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
    f2ce:	2600      	movs	r6, #0
{
    f2d0:	b09b      	sub	sp, #108	; 0x6c
    f2d2:	9003      	str	r0, [sp, #12]

	end = sys_clock_timeout_end_calc(timeout);
    f2d4:	4619      	mov	r1, r3
    f2d6:	4610      	mov	r0, r2
{
    f2d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	end = sys_clock_timeout_end_calc(timeout);
    f2dc:	f025 fd5d 	bl	34d9a <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
    f2e0:	46bb      	mov	fp, r7
	bool offload = false;
    f2e2:	4634      	mov	r4, r6
	end = sys_clock_timeout_end_calc(timeout);
    f2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	pev = poll_events;
    f2e8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
    f2ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
	pev = poll_events;
    f2f0:	f8cd 8020 	str.w	r8, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
    f2f4:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
    f2f6:	f1bb 0f00 	cmp.w	fp, #0
    f2fa:	d121      	bne.n	f340 <zsock_poll_internal+0x78>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
    f2fc:	2c00      	cmp	r4, #0
    f2fe:	d066      	beq.n	f3ce <zsock_poll_internal+0x106>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f300:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    f304:	f1b2 3fff 	cmp.w	r2, #4294967295
    f308:	bf08      	it	eq
    f30a:	f1b3 3fff 	cmpeq.w	r3, #4294967295
    f30e:	bf17      	itett	ne
    f310:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
    f314:	f04f 33ff 	moveq.w	r3, #4294967295
    f318:	fba3 3202 	umullne	r3, r2, r3, r2
    f31c:	0bdb      	lsrne	r3, r3, #15
    f31e:	bf18      	it	ne
    f320:	ea43 4342 	orrne.w	r3, r3, r2, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
    f324:	e9cd 7300 	strd	r7, r3, [sp]
    f328:	f44f 7282 	mov.w	r2, #260	; 0x104
    f32c:	4631      	mov	r1, r6
    f32e:	9b03      	ldr	r3, [sp, #12]
    f330:	9802      	ldr	r0, [sp, #8]
    f332:	f01f fcca 	bl	2ecca <z_fdtable_call_ioctl>
    f336:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
    f338:	4620      	mov	r0, r4
    f33a:	b01b      	add	sp, #108	; 0x6c
    f33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
    f340:	f8d9 0000 	ldr.w	r0, [r9]
    f344:	2800      	cmp	r0, #0
    f346:	db22      	blt.n	f38e <zsock_poll_internal+0xc6>
	ctx = z_get_fd_obj_and_vtable(sock,
    f348:	aa0a      	add	r2, sp, #40	; 0x28
    f34a:	a909      	add	r1, sp, #36	; 0x24
    f34c:	f7fd fae4 	bl	c918 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    f350:	4605      	mov	r5, r0
    f352:	b1e0      	cbz	r0, f38e <zsock_poll_internal+0xc6>
		(void)k_mutex_lock(lock, K_FOREVER);
    f354:	f04f 32ff 	mov.w	r2, #4294967295
    f358:	f04f 33ff 	mov.w	r3, #4294967295
    f35c:	980a      	ldr	r0, [sp, #40]	; 0x28
    f35e:	f01f fce1 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
    f362:	ab1a      	add	r3, sp, #104	; 0x68
    f364:	9301      	str	r3, [sp, #4]
    f366:	ab08      	add	r3, sp, #32
    f368:	9300      	str	r3, [sp, #0]
    f36a:	f44f 7281 	mov.w	r2, #258	; 0x102
    f36e:	464b      	mov	r3, r9
    f370:	4629      	mov	r1, r5
    f372:	9809      	ldr	r0, [sp, #36]	; 0x24
    f374:	f01f fca9 	bl	2ecca <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
    f378:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
    f37c:	4682      	mov	sl, r0
		if (result == -EALREADY) {
    f37e:	d10b      	bne.n	f398 <zsock_poll_internal+0xd0>
			timeout = K_NO_WAIT;
    f380:	2200      	movs	r2, #0
    f382:	2300      	movs	r3, #0
		k_mutex_unlock(lock);
    f384:	980a      	ldr	r0, [sp, #40]	; 0x28
			timeout = K_NO_WAIT;
    f386:	e9cd 2306 	strd	r2, r3, [sp, #24]
		k_mutex_unlock(lock);
    f38a:	f01f fccd 	bl	2ed28 <k_mutex_unlock.isra.0>
	for (pfd = fds, i = nfds; i--; pfd++) {
    f38e:	f109 0908 	add.w	r9, r9, #8
    f392:	f10b 3bff 	add.w	fp, fp, #4294967295
    f396:	e7ae      	b.n	f2f6 <zsock_poll_internal+0x2e>
		} else if (result == -EXDEV) {
    f398:	f11a 0f12 	cmn.w	sl, #18
		k_mutex_unlock(lock);
    f39c:	980a      	ldr	r0, [sp, #40]	; 0x28
		} else if (result == -EXDEV) {
    f39e:	d10b      	bne.n	f3b8 <zsock_poll_internal+0xf0>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
    f3a0:	9b02      	ldr	r3, [sp, #8]
    f3a2:	b11b      	cbz	r3, f3ac <zsock_poll_internal+0xe4>
		k_mutex_unlock(lock);
    f3a4:	f01f fcc0 	bl	2ed28 <k_mutex_unlock.isra.0>
			offload = true;
    f3a8:	2401      	movs	r4, #1
    f3aa:	e7f0      	b.n	f38e <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
    f3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
    f3ae:	462e      	mov	r6, r5
				offl_vtable = vtable;
    f3b0:	9302      	str	r3, [sp, #8]
		k_mutex_unlock(lock);
    f3b2:	f01f fcb9 	bl	2ed28 <k_mutex_unlock.isra.0>
		if (result < 0) {
    f3b6:	e7f7      	b.n	f3a8 <zsock_poll_internal+0xe0>
		k_mutex_unlock(lock);
    f3b8:	f01f fcb6 	bl	2ed28 <k_mutex_unlock.isra.0>
		if (result < 0) {
    f3bc:	f1ba 0f00 	cmp.w	sl, #0
    f3c0:	dae5      	bge.n	f38e <zsock_poll_internal+0xc6>
			errno = -result;
    f3c2:	f020 fbd6 	bl	2fb72 <__errno>
    f3c6:	f1ca 0300 	rsb	r3, sl, #0
				errno = -result;
    f3ca:	6003      	str	r3, [r0, #0]
				return -1;
    f3cc:	e020      	b.n	f410 <zsock_poll_internal+0x148>
	timeout_recalc(end, &timeout);
    f3ce:	aa06      	add	r2, sp, #24
    f3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		ret = k_poll(poll_events, pev - poll_events, timeout);
    f3d4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; f4b0 <zsock_poll_internal+0x1e8>
	timeout_recalc(end, &timeout);
    f3d8:	f01f fc86 	bl	2ece8 <timeout_recalc>
		retry = false;
    f3dc:	9402      	str	r4, [sp, #8]
		ret = k_poll(poll_events, pev - poll_events, timeout);
    f3de:	9908      	ldr	r1, [sp, #32]
    f3e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f3e4:	eba1 0108 	sub.w	r1, r1, r8
    f3e8:	1089      	asrs	r1, r1, #2
    f3ea:	fb0a f101 	mul.w	r1, sl, r1
	return z_impl_k_poll(events, num_events, timeout);
    f3ee:	4640      	mov	r0, r8
    f3f0:	f01c fa18 	bl	2b824 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    f3f4:	f100 030b 	add.w	r3, r0, #11
    f3f8:	2b0b      	cmp	r3, #11
    f3fa:	4605      	mov	r5, r0
    f3fc:	d804      	bhi.n	f408 <zsock_poll_internal+0x140>
    f3fe:	4c2d      	ldr	r4, [pc, #180]	; (f4b4 <zsock_poll_internal+0x1ec>)
    f400:	411c      	asrs	r4, r3
    f402:	f014 0401 	ands.w	r4, r4, #1
    f406:	d006      	beq.n	f416 <zsock_poll_internal+0x14e>
			errno = -ret;
    f408:	f020 fbb3 	bl	2fb72 <__errno>
    f40c:	426d      	negs	r5, r5
    f40e:	6005      	str	r5, [r0, #0]
			return -1;
    f410:	f04f 34ff 	mov.w	r4, #4294967295
    f414:	e790      	b.n	f338 <zsock_poll_internal+0x70>
		for (pfd = fds, i = nfds; i--; pfd++) {
    f416:	46b9      	mov	r9, r7
		retry = false;
    f418:	46a3      	mov	fp, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
    f41a:	9d03      	ldr	r5, [sp, #12]
		pev = poll_events;
    f41c:	f8cd 8020 	str.w	r8, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
    f420:	f1b9 0f00 	cmp.w	r9, #0
    f424:	d10e      	bne.n	f444 <zsock_poll_internal+0x17c>
		if (retry) {
    f426:	f1bb 0f00 	cmp.w	fp, #0
    f42a:	d085      	beq.n	f338 <zsock_poll_internal+0x70>
			if (ret > 0) {
    f42c:	2c00      	cmp	r4, #0
    f42e:	d183      	bne.n	f338 <zsock_poll_internal+0x70>
			timeout_recalc(end, &timeout);
    f430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f434:	aa06      	add	r2, sp, #24
    f436:	f01f fc57 	bl	2ece8 <timeout_recalc>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f43a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    f43e:	4313      	orrs	r3, r2
    f440:	d1cd      	bne.n	f3de <zsock_poll_internal+0x116>
    f442:	e779      	b.n	f338 <zsock_poll_internal+0x70>
			if (pfd->fd < 0) {
    f444:	6828      	ldr	r0, [r5, #0]
			pfd->revents = 0;
    f446:	9b02      	ldr	r3, [sp, #8]
			if (pfd->fd < 0) {
    f448:	2800      	cmp	r0, #0
			pfd->revents = 0;
    f44a:	80eb      	strh	r3, [r5, #6]
			if (pfd->fd < 0) {
    f44c:	db29      	blt.n	f4a2 <zsock_poll_internal+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
    f44e:	aa0a      	add	r2, sp, #40	; 0x28
    f450:	a909      	add	r1, sp, #36	; 0x24
    f452:	f7fd fa61 	bl	c918 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    f456:	4606      	mov	r6, r0
    f458:	b918      	cbnz	r0, f462 <zsock_poll_internal+0x19a>
				pfd->revents = ZSOCK_POLLNVAL;
    f45a:	2320      	movs	r3, #32
    f45c:	80eb      	strh	r3, [r5, #6]
				ret++;
    f45e:	3401      	adds	r4, #1
    f460:	e01f      	b.n	f4a2 <zsock_poll_internal+0x1da>
			(void)k_mutex_lock(lock, K_FOREVER);
    f462:	f04f 32ff 	mov.w	r2, #4294967295
    f466:	f04f 33ff 	mov.w	r3, #4294967295
    f46a:	980a      	ldr	r0, [sp, #40]	; 0x28
    f46c:	f01f fc5a 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
    f470:	ab08      	add	r3, sp, #32
    f472:	4631      	mov	r1, r6
    f474:	f240 1203 	movw	r2, #259	; 0x103
    f478:	9300      	str	r3, [sp, #0]
    f47a:	9809      	ldr	r0, [sp, #36]	; 0x24
    f47c:	462b      	mov	r3, r5
    f47e:	f01f fc24 	bl	2ecca <z_fdtable_call_ioctl>
    f482:	4606      	mov	r6, r0
			k_mutex_unlock(lock);
    f484:	980a      	ldr	r0, [sp, #40]	; 0x28
    f486:	f01f fc4f 	bl	2ed28 <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
    f48a:	f116 0f0b 	cmn.w	r6, #11
    f48e:	d00c      	beq.n	f4aa <zsock_poll_internal+0x1e2>
			} else if (result != 0) {
    f490:	b11e      	cbz	r6, f49a <zsock_poll_internal+0x1d2>
				errno = -result;
    f492:	f020 fb6e 	bl	2fb72 <__errno>
    f496:	4273      	negs	r3, r6
    f498:	e797      	b.n	f3ca <zsock_poll_internal+0x102>
			if (pfd->revents != 0) {
    f49a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    f49e:	2b00      	cmp	r3, #0
    f4a0:	d1dd      	bne.n	f45e <zsock_poll_internal+0x196>
		for (pfd = fds, i = nfds; i--; pfd++) {
    f4a2:	3508      	adds	r5, #8
    f4a4:	f109 39ff 	add.w	r9, r9, #4294967295
    f4a8:	e7ba      	b.n	f420 <zsock_poll_internal+0x158>
				retry = true;
    f4aa:	f04f 0b01 	mov.w	fp, #1
    f4ae:	e7f8      	b.n	f4a2 <zsock_poll_internal+0x1da>
    f4b0:	cccccccd 	.word	0xcccccccd
    f4b4:	fffff77e 	.word	0xfffff77e

0000f4b8 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
    f4b8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(ops);
    f4ba:	b948      	cbnz	r0, f4d0 <socket_offload_dns_register+0x18>
    f4bc:	490b      	ldr	r1, [pc, #44]	; (f4ec <socket_offload_dns_register+0x34>)
    f4be:	2313      	movs	r3, #19
    f4c0:	4a0b      	ldr	r2, [pc, #44]	; (f4f0 <socket_offload_dns_register+0x38>)
    f4c2:	480c      	ldr	r0, [pc, #48]	; (f4f4 <socket_offload_dns_register+0x3c>)
    f4c4:	f01f fa46 	bl	2e954 <assert_print>
    f4c8:	2113      	movs	r1, #19
	__ASSERT_NO_MSG(dns_offload == NULL);
    f4ca:	4809      	ldr	r0, [pc, #36]	; (f4f0 <socket_offload_dns_register+0x38>)
    f4cc:	f01f fa3b 	bl	2e946 <assert_post_action>
    f4d0:	4b09      	ldr	r3, [pc, #36]	; (f4f8 <socket_offload_dns_register+0x40>)
    f4d2:	681a      	ldr	r2, [r3, #0]
    f4d4:	b13a      	cbz	r2, f4e6 <socket_offload_dns_register+0x2e>
    f4d6:	4909      	ldr	r1, [pc, #36]	; (f4fc <socket_offload_dns_register+0x44>)
    f4d8:	2314      	movs	r3, #20
    f4da:	4a05      	ldr	r2, [pc, #20]	; (f4f0 <socket_offload_dns_register+0x38>)
    f4dc:	4805      	ldr	r0, [pc, #20]	; (f4f4 <socket_offload_dns_register+0x3c>)
    f4de:	f01f fa39 	bl	2e954 <assert_print>
    f4e2:	2114      	movs	r1, #20
    f4e4:	e7f1      	b.n	f4ca <socket_offload_dns_register+0x12>

	dns_offload = ops;
    f4e6:	6018      	str	r0, [r3, #0]
}
    f4e8:	bd08      	pop	{r3, pc}
    f4ea:	bf00      	nop
    f4ec:	000404d3 	.word	0x000404d3
    f4f0:	00038ba0 	.word	0x00038ba0
    f4f4:	000381c3 	.word	0x000381c3
    f4f8:	2000f97c 	.word	0x2000f97c
    f4fc:	00038bdb 	.word	0x00038bdb

0000f500 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    f500:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
    f502:	4c0d      	ldr	r4, [pc, #52]	; (f538 <socket_offload_getaddrinfo+0x38>)
    f504:	6824      	ldr	r4, [r4, #0]
    f506:	b94c      	cbnz	r4, f51c <socket_offload_getaddrinfo+0x1c>
    f508:	490c      	ldr	r1, [pc, #48]	; (f53c <socket_offload_getaddrinfo+0x3c>)
    f50a:	231d      	movs	r3, #29
    f50c:	4a0c      	ldr	r2, [pc, #48]	; (f540 <socket_offload_getaddrinfo+0x40>)
    f50e:	480d      	ldr	r0, [pc, #52]	; (f544 <socket_offload_getaddrinfo+0x44>)
    f510:	f01f fa20 	bl	2e954 <assert_print>
    f514:	211d      	movs	r1, #29
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
    f516:	480a      	ldr	r0, [pc, #40]	; (f540 <socket_offload_getaddrinfo+0x40>)
    f518:	f01f fa15 	bl	2e946 <assert_post_action>
    f51c:	6824      	ldr	r4, [r4, #0]
    f51e:	b93c      	cbnz	r4, f530 <socket_offload_getaddrinfo+0x30>
    f520:	4909      	ldr	r1, [pc, #36]	; (f548 <socket_offload_getaddrinfo+0x48>)
    f522:	231e      	movs	r3, #30
    f524:	4a06      	ldr	r2, [pc, #24]	; (f540 <socket_offload_getaddrinfo+0x40>)
    f526:	4807      	ldr	r0, [pc, #28]	; (f544 <socket_offload_getaddrinfo+0x44>)
    f528:	f01f fa14 	bl	2e954 <assert_print>
    f52c:	211e      	movs	r1, #30
    f52e:	e7f2      	b.n	f516 <socket_offload_getaddrinfo+0x16>

	return dns_offload->getaddrinfo(node, service, hints, res);
    f530:	46a4      	mov	ip, r4
}
    f532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
    f536:	4760      	bx	ip
    f538:	2000f97c 	.word	0x2000f97c
    f53c:	00038bf6 	.word	0x00038bf6
    f540:	00038ba0 	.word	0x00038ba0
    f544:	000381c3 	.word	0x000381c3
    f548:	00038c02 	.word	0x00038c02

0000f54c <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
    f54c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
    f54e:	4b0d      	ldr	r3, [pc, #52]	; (f584 <socket_offload_freeaddrinfo+0x38>)
    f550:	681b      	ldr	r3, [r3, #0]
    f552:	b94b      	cbnz	r3, f568 <socket_offload_freeaddrinfo+0x1c>
    f554:	490c      	ldr	r1, [pc, #48]	; (f588 <socket_offload_freeaddrinfo+0x3c>)
    f556:	2325      	movs	r3, #37	; 0x25
    f558:	4a0c      	ldr	r2, [pc, #48]	; (f58c <socket_offload_freeaddrinfo+0x40>)
    f55a:	480d      	ldr	r0, [pc, #52]	; (f590 <socket_offload_freeaddrinfo+0x44>)
    f55c:	f01f f9fa 	bl	2e954 <assert_print>
    f560:	2125      	movs	r1, #37	; 0x25
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
    f562:	480a      	ldr	r0, [pc, #40]	; (f58c <socket_offload_freeaddrinfo+0x40>)
    f564:	f01f f9ef 	bl	2e946 <assert_post_action>
    f568:	685b      	ldr	r3, [r3, #4]
    f56a:	b93b      	cbnz	r3, f57c <socket_offload_freeaddrinfo+0x30>
    f56c:	4909      	ldr	r1, [pc, #36]	; (f594 <socket_offload_freeaddrinfo+0x48>)
    f56e:	2326      	movs	r3, #38	; 0x26
    f570:	4a06      	ldr	r2, [pc, #24]	; (f58c <socket_offload_freeaddrinfo+0x40>)
    f572:	4807      	ldr	r0, [pc, #28]	; (f590 <socket_offload_freeaddrinfo+0x44>)
    f574:	f01f f9ee 	bl	2e954 <assert_print>
    f578:	2126      	movs	r1, #38	; 0x26
    f57a:	e7f2      	b.n	f562 <socket_offload_freeaddrinfo+0x16>

	return dns_offload->freeaddrinfo(res);
}
    f57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->freeaddrinfo(res);
    f580:	4718      	bx	r3
    f582:	bf00      	nop
    f584:	2000f97c 	.word	0x2000f97c
    f588:	00038bf6 	.word	0x00038bf6
    f58c:	00038ba0 	.word	0x00038ba0
    f590:	000381c3 	.word	0x000381c3
    f594:	00038c1b 	.word	0x00038c1b

0000f598 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    f598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    f59c:	4b0f      	ldr	r3, [pc, #60]	; (f5dc <settings_save_one+0x44>)
{
    f59e:	4605      	mov	r5, r0
	cs = settings_save_dst;
    f5a0:	681c      	ldr	r4, [r3, #0]
{
    f5a2:	460e      	mov	r6, r1
    f5a4:	4617      	mov	r7, r2
	if (!cs) {
    f5a6:	b1ac      	cbz	r4, f5d4 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    f5a8:	f04f 32ff 	mov.w	r2, #4294967295
    f5ac:	f04f 33ff 	mov.w	r3, #4294967295
    f5b0:	480b      	ldr	r0, [pc, #44]	; (f5e0 <settings_save_one+0x48>)
    f5b2:	f019 f967 	bl	28884 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    f5b6:	6863      	ldr	r3, [r4, #4]
    f5b8:	4632      	mov	r2, r6
    f5ba:	f8d3 8008 	ldr.w	r8, [r3, #8]
    f5be:	4629      	mov	r1, r5
    f5c0:	463b      	mov	r3, r7
    f5c2:	4620      	mov	r0, r4
    f5c4:	47c0      	blx	r8
    f5c6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    f5c8:	4805      	ldr	r0, [pc, #20]	; (f5e0 <settings_save_one+0x48>)
    f5ca:	f019 fa2b 	bl	28a24 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    f5ce:	4620      	mov	r0, r4
    f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    f5d4:	f06f 0401 	mvn.w	r4, #1
    f5d8:	e7f9      	b.n	f5ce <settings_save_one+0x36>
    f5da:	bf00      	nop
    f5dc:	2000f980 	.word	0x2000f980
    f5e0:	2000cf44 	.word	0x2000cf44

0000f5e4 <get_uuid_size.part.0>:

	dm->cur_chunk_len = 0;
}

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
    f5e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
    f5e6:	4b07      	ldr	r3, [pc, #28]	; (f604 <get_uuid_size.part.0+0x20>)
    f5e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5ec:	9305      	str	r3, [sp, #20]
    f5ee:	2302      	movs	r3, #2
    f5f0:	4805      	ldr	r0, [pc, #20]	; (f608 <get_uuid_size.part.0+0x24>)
    f5f2:	aa04      	add	r2, sp, #16
    f5f4:	9304      	str	r3, [sp, #16]
    f5f6:	f01f fd12 	bl	2f01e <z_log_msg_static_create.constprop.0>
		return 0;
	}
}
    f5fa:	2000      	movs	r0, #0
    f5fc:	b007      	add	sp, #28
    f5fe:	f85d fb04 	ldr.w	pc, [sp], #4
    f602:	bf00      	nop
    f604:	00038c51 	.word	0x00038c51
    f608:	00036418 	.word	0x00036418

0000f60c <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
    f60c:	b538      	push	{r3, r4, r5, lr}
	len = ROUND_UP(len, DATA_ALIGN);
    f60e:	1cc5      	adds	r5, r0, #3
    f610:	f025 0503 	bic.w	r5, r5, #3
	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    f614:	2d74      	cmp	r5, #116	; 0x74
    f616:	d909      	bls.n	f62c <user_data_alloc.constprop.0+0x20>
    f618:	4917      	ldr	r1, [pc, #92]	; (f678 <user_data_alloc.constprop.0+0x6c>)
    f61a:	4818      	ldr	r0, [pc, #96]	; (f67c <user_data_alloc.constprop.0+0x70>)
    f61c:	235b      	movs	r3, #91	; 0x5b
    f61e:	4a18      	ldr	r2, [pc, #96]	; (f680 <user_data_alloc.constprop.0+0x74>)
    f620:	f01f f998 	bl	2e954 <assert_print>
    f624:	215b      	movs	r1, #91	; 0x5b
    f626:	4816      	ldr	r0, [pc, #88]	; (f680 <user_data_alloc.constprop.0+0x74>)
    f628:	f01f f98d 	bl	2e946 <assert_post_action>
	return list->head;
    f62c:	4c15      	ldr	r4, [pc, #84]	; (f684 <user_data_alloc.constprop.0+0x78>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
    f62e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    f632:	b123      	cbz	r3, f63e <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    f634:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    f638:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    f63a:	2b74      	cmp	r3, #116	; 0x74
    f63c:	d919      	bls.n	f672 <user_data_alloc.constprop.0+0x66>
		item = k_calloc(1, sizeof(struct data_chunk_item));
    f63e:	2178      	movs	r1, #120	; 0x78
    f640:	2001      	movs	r0, #1
    f642:	f025 fca3 	bl	34f8c <k_calloc>
		if (!item) {
    f646:	b178      	cbz	r0, f668 <user_data_alloc.constprop.0+0x5c>
	parent->next = child;
    f648:	2300      	movs	r3, #0
    f64a:	6003      	str	r3, [r0, #0]
	return list->tail;
    f64c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
Z_GENLIST_APPEND(slist, snode)
    f650:	b95a      	cbnz	r2, f66a <user_data_alloc.constprop.0+0x5e>
	list->head = node;
    f652:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
		dm->cur_chunk_len = 0;
    f656:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	user_data_loc = &item->data[dm->cur_chunk_len];
    f65a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
    f65e:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    f660:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    f662:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    f664:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
}
    f668:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    f66a:	6010      	str	r0, [r2, #0]
	list->tail = node;
    f66c:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
    f670:	e7f1      	b.n	f656 <user_data_alloc.constprop.0+0x4a>
	return list->tail;
    f672:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    f676:	e7f0      	b.n	f65a <user_data_alloc.constprop.0+0x4e>
    f678:	00038c93 	.word	0x00038c93
    f67c:	000381c3 	.word	0x000381c3
    f680:	00038c68 	.word	0x00038c68
    f684:	2000f984 	.word	0x2000f984

0000f688 <discovery_complete.constprop.0>:
    f688:	4808      	ldr	r0, [pc, #32]	; (f6ac <discovery_complete.constprop.0+0x24>)
    f68a:	e8d0 3fef 	ldaex	r3, [r0]
    f68e:	f043 0302 	orr.w	r3, r3, #2
    f692:	e8c0 3fe2 	stlex	r2, r3, [r0]
    f696:	2a00      	cmp	r2, #0
    f698:	d1f7      	bne.n	f68a <discovery_complete.constprop.0+0x2>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    f69a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f69c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
    f6a0:	681b      	ldr	r3, [r3, #0]
    f6a2:	b10b      	cbz	r3, f6a8 <discovery_complete.constprop.0+0x20>
		dm->callback->completed(dm, dm->context);
    f6a4:	6841      	ldr	r1, [r0, #4]
    f6a6:	4718      	bx	r3
	}
}
    f6a8:	4770      	bx	lr
    f6aa:	bf00      	nop
    f6ac:	2000fabc 	.word	0x2000fabc

0000f6b0 <get_uuid_size.isra.0>:
	switch (uuid->type) {
    f6b0:	2802      	cmp	r0, #2
    f6b2:	d901      	bls.n	f6b8 <get_uuid_size.isra.0+0x8>
    f6b4:	f7ff bf96 	b.w	f5e4 <get_uuid_size.part.0>
    f6b8:	4b01      	ldr	r3, [pc, #4]	; (f6c0 <get_uuid_size.isra.0+0x10>)
    f6ba:	5c18      	ldrb	r0, [r3, r0]
}
    f6bc:	4770      	bx	lr
    f6be:	bf00      	nop
    f6c0:	0003903c 	.word	0x0003903c

0000f6c4 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    f6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    f6c8:	4c1c      	ldr	r4, [pc, #112]	; (f73c <attr_store.constprop.0+0x78>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    f6ca:	4605      	mov	r5, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    f6cc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    f6d0:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    f6d2:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    f6d4:	b086      	sub	sp, #24
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    f6d6:	d90f      	bls.n	f6f8 <attr_store.constprop.0+0x34>
		LOG_ERR("No space for new attribute.");
    f6d8:	4b19      	ldr	r3, [pc, #100]	; (f740 <attr_store.constprop.0+0x7c>)
		LOG_ERR("No space for attribute data.");
    f6da:	9305      	str	r3, [sp, #20]
		return NULL;
    f6dc:	f04f 0800 	mov.w	r8, #0
		LOG_ERR("No space for attribute data.");
    f6e0:	2302      	movs	r3, #2
    f6e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f6e6:	4817      	ldr	r0, [pc, #92]	; (f744 <attr_store.constprop.0+0x80>)
    f6e8:	aa04      	add	r2, sp, #16
    f6ea:	9304      	str	r3, [sp, #16]
    f6ec:	f01f fc97 	bl	2f01e <z_log_msg_static_create.constprop.0>
}
    f6f0:	4640      	mov	r0, r8
    f6f2:	b006      	add	sp, #24
    f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    f6f8:	6803      	ldr	r3, [r0, #0]
    f6fa:	7818      	ldrb	r0, [r3, #0]
    f6fc:	f7ff ffd8 	bl	f6b0 <get_uuid_size.isra.0>
    f700:	4607      	mov	r7, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    f702:	4430      	add	r0, r6
    f704:	f7ff ff82 	bl	f60c <user_data_alloc.constprop.0>
	if (!attr_data) {
    f708:	b908      	cbnz	r0, f70e <attr_store.constprop.0+0x4a>
		LOG_ERR("No space for attribute data.");
    f70a:	4b0f      	ldr	r3, [pc, #60]	; (f748 <attr_store.constprop.0+0x84>)
    f70c:	e7e5      	b.n	f6da <attr_store.constprop.0+0x16>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    f70e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    f712:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    f714:	1c5a      	adds	r2, r3, #1
    f716:	3303      	adds	r3, #3
    f718:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    f71c:	00db      	lsls	r3, r3, #3
	cur_attr->handle = attr->handle;
    f71e:	8a2a      	ldrh	r2, [r5, #16]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    f720:	f103 0804 	add.w	r8, r3, #4
    f724:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    f726:	441c      	add	r4, r3
    f728:	8122      	strh	r2, [r4, #8]
	cur_attr->perm = attr->perm;
    f72a:	8a6b      	ldrh	r3, [r5, #18]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    f72c:	6060      	str	r0, [r4, #4]
	cur_attr->perm = attr->perm;
    f72e:	72a3      	strb	r3, [r4, #10]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f730:	463a      	mov	r2, r7
    f732:	6829      	ldr	r1, [r5, #0]
    f734:	f025 fc5a 	bl	34fec <memcpy>
    f738:	e7da      	b.n	f6f0 <attr_store.constprop.0+0x2c>
    f73a:	bf00      	nop
    f73c:	2000f984 	.word	0x2000f984
    f740:	00038ce3 	.word	0x00038ce3
    f744:	00036418 	.word	0x00036418
    f748:	00038cff 	.word	0x00038cff

0000f74c <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    f74c:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    f74e:	4605      	mov	r5, r0
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    f750:	b086      	sub	sp, #24
	if (!uuid) {
    f752:	b968      	cbnz	r0, f770 <uuid_store.constprop.0+0x24>
		LOG_ERR("Uninitialized UUID.");
    f754:	4b0e      	ldr	r3, [pc, #56]	; (f790 <uuid_store.constprop.0+0x44>)
		LOG_ERR("No space for a UUID.");
    f756:	9305      	str	r3, [sp, #20]
		return NULL;
    f758:	2400      	movs	r4, #0
		LOG_ERR("No space for a UUID.");
    f75a:	2302      	movs	r3, #2
    f75c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f760:	480c      	ldr	r0, [pc, #48]	; (f794 <uuid_store.constprop.0+0x48>)
    f762:	aa04      	add	r2, sp, #16
    f764:	9304      	str	r3, [sp, #16]
    f766:	f01f fc5a 	bl	2f01e <z_log_msg_static_create.constprop.0>
}
    f76a:	4620      	mov	r0, r4
    f76c:	b006      	add	sp, #24
    f76e:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    f770:	7800      	ldrb	r0, [r0, #0]
    f772:	f7ff ff9d 	bl	f6b0 <get_uuid_size.isra.0>
    f776:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
    f778:	f7ff ff48 	bl	f60c <user_data_alloc.constprop.0>
    f77c:	4604      	mov	r4, r0
	if (!buffer) {
    f77e:	b908      	cbnz	r0, f784 <uuid_store.constprop.0+0x38>
		LOG_ERR("No space for a UUID.");
    f780:	4b05      	ldr	r3, [pc, #20]	; (f798 <uuid_store.constprop.0+0x4c>)
    f782:	e7e8      	b.n	f756 <uuid_store.constprop.0+0xa>
    f784:	4632      	mov	r2, r6
    f786:	4629      	mov	r1, r5
    f788:	f025 fc30 	bl	34fec <memcpy>
    f78c:	e7ed      	b.n	f76a <uuid_store.constprop.0+0x1e>
    f78e:	bf00      	nop
    f790:	00038d1c 	.word	0x00038d1c
    f794:	00036418 	.word	0x00036418
    f798:	00038d30 	.word	0x00038d30

0000f79c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    f79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7a0:	b089      	sub	sp, #36	; 0x24
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    f7a2:	4c9e      	ldr	r4, [pc, #632]	; (fa1c <discovery_callback+0x280>)
{
    f7a4:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    f7a6:	6823      	ldr	r3, [r4, #0]
{
    f7a8:	af00      	add	r7, sp, #0
	if (conn != bt_gatt_dm_inst.conn) {
    f7aa:	4283      	cmp	r3, r0
    f7ac:	d014      	beq.n	f7d8 <discovery_callback+0x3c>
		LOG_ERR("Unexpected conn object. Aborting.");
    f7ae:	4b9c      	ldr	r3, [pc, #624]	; (fa20 <discovery_callback+0x284>)
    f7b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f7b4:	61fb      	str	r3, [r7, #28]
    f7b6:	2302      	movs	r3, #2
    f7b8:	489a      	ldr	r0, [pc, #616]	; (fa24 <discovery_callback+0x288>)
    f7ba:	61bb      	str	r3, [r7, #24]
    f7bc:	f107 0218 	add.w	r2, r7, #24
    f7c0:	f01f fc2d 	bl	2f01e <z_log_msg_static_create.constprop.0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    f7c4:	f06f 010d 	mvn.w	r1, #13
    f7c8:	4620      	mov	r0, r4
    f7ca:	f01f fc2b 	bl	2f024 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
    f7ce:	2000      	movs	r0, #0

		break;
	}

	return BT_GATT_ITER_STOP;
}
    f7d0:	3724      	adds	r7, #36	; 0x24
    f7d2:	46bd      	mov	sp, r7
    f7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (params->type) {
    f7d8:	7c13      	ldrb	r3, [r2, #16]
    f7da:	2b03      	cmp	r3, #3
    f7dc:	f000 80e5 	beq.w	f9aa <discovery_callback+0x20e>
    f7e0:	d80e      	bhi.n	f800 <discovery_callback+0x64>
    f7e2:	2b02      	cmp	r3, #2
    f7e4:	d131      	bne.n	f84a <discovery_callback+0xae>
		__ASSERT(false, "Unknown param type.");
    f7e6:	4990      	ldr	r1, [pc, #576]	; (fa28 <discovery_callback+0x28c>)
    f7e8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    f7ec:	4a8f      	ldr	r2, [pc, #572]	; (fa2c <discovery_callback+0x290>)
    f7ee:	4890      	ldr	r0, [pc, #576]	; (fa30 <discovery_callback+0x294>)
    f7f0:	f01f f8b0 	bl	2e954 <assert_print>
    f7f4:	488f      	ldr	r0, [pc, #572]	; (fa34 <discovery_callback+0x298>)
    f7f6:	f01f f8ad 	bl	2e954 <assert_print>
    f7fa:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    f7fe:	e050      	b.n	f8a2 <discovery_callback+0x106>
	switch (params->type) {
    f800:	2b05      	cmp	r3, #5
    f802:	d1f0      	bne.n	f7e6 <discovery_callback+0x4a>
	if (!attr) {
    f804:	2900      	cmp	r1, #0
    f806:	f040 80a1 	bne.w	f94c <discovery_callback+0x1b0>
		if (dm->cur_attr_id > 1) {
    f80a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    f80e:	2b01      	cmp	r3, #1
    f810:	d97b      	bls.n	f90a <discovery_callback+0x16e>
			dm->discover_params.type =
    f812:	2603      	movs	r6, #3
				dm->attrs[0].handle + 1;
    f814:	8c23      	ldrh	r3, [r4, #32]
			int err = bt_gatt_discover(dm->conn,
    f816:	f104 0108 	add.w	r1, r4, #8
				dm->attrs[0].handle + 1;
    f81a:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    f81c:	8223      	strh	r3, [r4, #16]
			dm->discover_params.type =
    f81e:	7626      	strb	r6, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
    f820:	f007 fe2e 	bl	17480 <bt_gatt_discover>
			if (err) {
    f824:	4605      	mov	r5, r0
    f826:	2800      	cmp	r0, #0
    f828:	d0d1      	beq.n	f7ce <discovery_callback+0x32>
				LOG_ERR("Characteristic discover failed,"
    f82a:	46e8      	mov	r8, sp
    f82c:	b088      	sub	sp, #32
    f82e:	466a      	mov	r2, sp
    f830:	4b81      	ldr	r3, [pc, #516]	; (fa38 <discovery_callback+0x29c>)
    f832:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f836:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f83a:	487a      	ldr	r0, [pc, #488]	; (fa24 <discovery_callback+0x288>)
    f83c:	f842 6f10 	str.w	r6, [r2, #16]!
    f840:	f01f fbed 	bl	2f01e <z_log_msg_static_create.constprop.0>
				discovery_complete_error(dm, err);
    f844:	4629      	mov	r1, r5
    f846:	46c5      	mov	sp, r8
    f848:	e7be      	b.n	f7c8 <discovery_callback+0x2c>
	if (!attr) {
    f84a:	b919      	cbnz	r1, f854 <discovery_callback+0xb8>
		discovery_complete_not_found(dm);
    f84c:	4620      	mov	r0, r4
    f84e:	f01f fbff 	bl	2f050 <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
    f852:	e7bc      	b.n	f7ce <discovery_callback+0x32>
	struct bt_gatt_service_val *service_val = attr->user_data;
    f854:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    f858:	4628      	mov	r0, r5
    f85a:	2108      	movs	r1, #8
    f85c:	f7ff ff32 	bl	f6c4 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    f860:	f04f 0900 	mov.w	r9, #0
    f864:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    f868:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    f86a:	1d39      	adds	r1, r7, #4
    f86c:	6828      	ldr	r0, [r5, #0]
    f86e:	f887 9004 	strb.w	r9, [r7, #4]
    f872:	80fb      	strh	r3, [r7, #6]
    f874:	f020 f97f 	bl	2fb76 <bt_uuid_cmp>
    f878:	b1b0      	cbz	r0, f8a8 <discovery_callback+0x10c>
    f87a:	f642 0301 	movw	r3, #10241	; 0x2801
    f87e:	6828      	ldr	r0, [r5, #0]
    f880:	f887 9008 	strb.w	r9, [r7, #8]
    f884:	817b      	strh	r3, [r7, #10]
    f886:	f107 0108 	add.w	r1, r7, #8
    f88a:	f020 f974 	bl	2fb76 <bt_uuid_cmp>
    f88e:	b158      	cbz	r0, f8a8 <discovery_callback+0x10c>
    f890:	496a      	ldr	r1, [pc, #424]	; (fa3c <discovery_callback+0x2a0>)
    f892:	f240 1327 	movw	r3, #295	; 0x127
    f896:	4a65      	ldr	r2, [pc, #404]	; (fa2c <discovery_callback+0x290>)
    f898:	4865      	ldr	r0, [pc, #404]	; (fa30 <discovery_callback+0x294>)
    f89a:	f01f f85b 	bl	2e954 <assert_print>
    f89e:	f240 1127 	movw	r1, #295	; 0x127
	__ASSERT_NO_MSG(cur_service_val != NULL);
    f8a2:	4862      	ldr	r0, [pc, #392]	; (fa2c <discovery_callback+0x290>)
    f8a4:	f01f f84f 	bl	2e946 <assert_post_action>
	if (!cur_attr) {
    f8a8:	b976      	cbnz	r6, f8c8 <discovery_callback+0x12c>
		LOG_ERR("Not enough memory for service attribute.");
    f8aa:	4b65      	ldr	r3, [pc, #404]	; (fa40 <discovery_callback+0x2a4>)
		LOG_ERR("Not enough memory for service attribute data.");
    f8ac:	61fb      	str	r3, [r7, #28]
    f8ae:	2302      	movs	r3, #2
    f8b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f8b4:	485b      	ldr	r0, [pc, #364]	; (fa24 <discovery_callback+0x288>)
    f8b6:	61bb      	str	r3, [r7, #24]
    f8b8:	f107 0218 	add.w	r2, r7, #24
    f8bc:	f01f fbaf 	bl	2f01e <z_log_msg_static_create.constprop.0>
		discovery_complete_error(dm, -ENOMEM);
    f8c0:	f06f 010b 	mvn.w	r1, #11
    f8c4:	4855      	ldr	r0, [pc, #340]	; (fa1c <discovery_callback+0x280>)
    f8c6:	e780      	b.n	f7ca <discovery_callback+0x2e>
		bt_gatt_dm_attr_service_val(cur_attr);
    f8c8:	4630      	mov	r0, r6
    f8ca:	f01f fbd5 	bl	2f078 <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
    f8ce:	4605      	mov	r5, r0
    f8d0:	b948      	cbnz	r0, f8e6 <discovery_callback+0x14a>
    f8d2:	495c      	ldr	r1, [pc, #368]	; (fa44 <discovery_callback+0x2a8>)
    f8d4:	f240 133b 	movw	r3, #315	; 0x13b
    f8d8:	4a54      	ldr	r2, [pc, #336]	; (fa2c <discovery_callback+0x290>)
    f8da:	4855      	ldr	r0, [pc, #340]	; (fa30 <discovery_callback+0x294>)
    f8dc:	f01f f83a 	bl	2e954 <assert_print>
    f8e0:	f240 113b 	movw	r1, #315	; 0x13b
    f8e4:	e7dd      	b.n	f8a2 <discovery_callback+0x106>
    f8e6:	f8d8 3000 	ldr.w	r3, [r8]
    f8ea:	6003      	str	r3, [r0, #0]
    f8ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f8f0:	6043      	str	r3, [r0, #4]
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    f8f2:	6800      	ldr	r0, [r0, #0]
    f8f4:	f7ff ff2a 	bl	f74c <uuid_store.constprop.0>
    f8f8:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    f8fa:	b908      	cbnz	r0, f900 <discovery_callback+0x164>
		LOG_ERR("Not enough memory for service attribute data.");
    f8fc:	4b52      	ldr	r3, [pc, #328]	; (fa48 <discovery_callback+0x2ac>)
    f8fe:	e7d5      	b.n	f8ac <discovery_callback+0x110>
	dm->discover_params.end_handle = cur_service_val->end_handle;
    f900:	88ab      	ldrh	r3, [r5, #4]
    f902:	82e3      	strh	r3, [r4, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
    f904:	88b2      	ldrh	r2, [r6, #4]
    f906:	429a      	cmp	r2, r3
    f908:	d102      	bne.n	f910 <discovery_callback+0x174>
		discovery_complete(dm);
    f90a:	f7ff febd 	bl	f688 <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
    f90e:	e75e      	b.n	f7ce <discovery_callback+0x32>
	dm->discover_params.uuid         = NULL;
    f910:	2300      	movs	r3, #0
    f912:	60a3      	str	r3, [r4, #8]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    f914:	2305      	movs	r3, #5
    f916:	7623      	strb	r3, [r4, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    f918:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    f91a:	494c      	ldr	r1, [pc, #304]	; (fa4c <discovery_callback+0x2b0>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
    f91c:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    f91e:	6820      	ldr	r0, [r4, #0]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    f920:	8223      	strh	r3, [r4, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    f922:	f007 fdad 	bl	17480 <bt_gatt_discover>
	if (err) {
    f926:	2800      	cmp	r0, #0
    f928:	f43f af51 	beq.w	f7ce <discovery_callback+0x32>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    f92c:	466c      	mov	r4, sp
    f92e:	b088      	sub	sp, #32
    f930:	466a      	mov	r2, sp
    f932:	4b47      	ldr	r3, [pc, #284]	; (fa50 <discovery_callback+0x2b4>)
    f934:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f938:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f93c:	2303      	movs	r3, #3
    f93e:	4839      	ldr	r0, [pc, #228]	; (fa24 <discovery_callback+0x288>)
    f940:	f842 3f10 	str.w	r3, [r2, #16]!
    f944:	f01f fb6b 	bl	2f01e <z_log_msg_static_create.constprop.0>
    f948:	46a5      	mov	sp, r4
    f94a:	e7b9      	b.n	f8c0 <discovery_callback+0x124>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    f94c:	2600      	movs	r6, #0
    f94e:	f642 0303 	movw	r3, #10243	; 0x2803
    f952:	6828      	ldr	r0, [r5, #0]
    f954:	723e      	strb	r6, [r7, #8]
    f956:	817b      	strh	r3, [r7, #10]
    f958:	f107 0108 	add.w	r1, r7, #8
    f95c:	f020 f90b 	bl	2fb76 <bt_uuid_cmp>
    f960:	b950      	cbnz	r0, f978 <discovery_callback+0x1dc>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    f962:	2108      	movs	r1, #8
    f964:	4628      	mov	r0, r5
    f966:	f7ff fead 	bl	f6c4 <attr_store.constprop.0>
    f96a:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    f96c:	f01f fba4 	bl	2f0b8 <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
    f970:	6823      	ldr	r3, [r4, #0]
    f972:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
    f974:	2001      	movs	r0, #1
    f976:	e72b      	b.n	f7d0 <discovery_callback+0x34>
		cur_attr = attr_store(dm, attr, 0);
    f978:	4631      	mov	r1, r6
    f97a:	4628      	mov	r0, r5
    f97c:	f7ff fea2 	bl	f6c4 <attr_store.constprop.0>
	if (!cur_attr) {
    f980:	2800      	cmp	r0, #0
    f982:	d1f7      	bne.n	f974 <discovery_callback+0x1d8>
		LOG_ERR("Not enough memory for next attribute descriptor"
    f984:	8a2b      	ldrh	r3, [r5, #16]
    f986:	466d      	mov	r5, sp
    f988:	b088      	sub	sp, #32
    f98a:	466a      	mov	r2, sp
    f98c:	4931      	ldr	r1, [pc, #196]	; (fa54 <discovery_callback+0x2b8>)
    f98e:	4825      	ldr	r0, [pc, #148]	; (fa24 <discovery_callback+0x288>)
    f990:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f994:	2303      	movs	r3, #3
    f996:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f99a:	f842 3f10 	str.w	r3, [r2, #16]!
    f99e:	f01f fb3e 	bl	2f01e <z_log_msg_static_create.constprop.0>
    f9a2:	46ad      	mov	sp, r5
		discovery_complete_error(dm, -ENOMEM);
    f9a4:	f06f 010b 	mvn.w	r1, #11
    f9a8:	e70e      	b.n	f7c8 <discovery_callback+0x2c>
	if (!attr) {
    f9aa:	2900      	cmp	r1, #0
    f9ac:	d0ad      	beq.n	f90a <discovery_callback+0x16e>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    f9ae:	2300      	movs	r3, #0
    f9b0:	723b      	strb	r3, [r7, #8]
    f9b2:	f642 0303 	movw	r3, #10243	; 0x2803
    f9b6:	6828      	ldr	r0, [r5, #0]
    f9b8:	817b      	strh	r3, [r7, #10]
    f9ba:	f107 0108 	add.w	r1, r7, #8
    f9be:	f020 f8da 	bl	2fb76 <bt_uuid_cmp>
    f9c2:	b148      	cbz	r0, f9d8 <discovery_callback+0x23c>
    f9c4:	4924      	ldr	r1, [pc, #144]	; (fa58 <discovery_callback+0x2bc>)
    f9c6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    f9ca:	4a18      	ldr	r2, [pc, #96]	; (fa2c <discovery_callback+0x290>)
    f9cc:	4818      	ldr	r0, [pc, #96]	; (fa30 <discovery_callback+0x294>)
    f9ce:	f01e ffc1 	bl	2e954 <assert_print>
    f9d2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    f9d6:	e764      	b.n	f8a2 <discovery_callback+0x106>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    f9d8:	4620      	mov	r0, r4
    f9da:	8a29      	ldrh	r1, [r5, #16]
    f9dc:	f01f fadf 	bl	2ef9e <attr_find_by_handle>
	if (!cur_attr) {
    f9e0:	b910      	cbnz	r0, f9e8 <discovery_callback+0x24c>
		discovery_complete_error(dm, -ESRCH);
    f9e2:	f06f 0102 	mvn.w	r1, #2
    f9e6:	e6ef      	b.n	f7c8 <discovery_callback+0x2c>
	gatt_chrc = attr->user_data;
    f9e8:	68ee      	ldr	r6, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    f9ea:	f01f fb65 	bl	2f0b8 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
    f9ee:	4605      	mov	r5, r0
    f9f0:	b948      	cbnz	r0, fa06 <discovery_callback+0x26a>
    f9f2:	491a      	ldr	r1, [pc, #104]	; (fa5c <discovery_callback+0x2c0>)
    f9f4:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    f9f8:	4a0c      	ldr	r2, [pc, #48]	; (fa2c <discovery_callback+0x290>)
    f9fa:	480d      	ldr	r0, [pc, #52]	; (fa30 <discovery_callback+0x294>)
    f9fc:	f01e ffaa 	bl	2e954 <assert_print>
    fa00:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    fa04:	e74d      	b.n	f8a2 <discovery_callback+0x106>
    fa06:	6833      	ldr	r3, [r6, #0]
    fa08:	6003      	str	r3, [r0, #0]
    fa0a:	6873      	ldr	r3, [r6, #4]
    fa0c:	6043      	str	r3, [r0, #4]
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    fa0e:	6800      	ldr	r0, [r0, #0]
    fa10:	f7ff fe9c 	bl	f74c <uuid_store.constprop.0>
    fa14:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    fa16:	2800      	cmp	r0, #0
    fa18:	d1ac      	bne.n	f974 <discovery_callback+0x1d8>
    fa1a:	e7c3      	b.n	f9a4 <discovery_callback+0x208>
    fa1c:	2000f984 	.word	0x2000f984
    fa20:	00038d45 	.word	0x00038d45
    fa24:	00036418 	.word	0x00036418
    fa28:	0003c13d 	.word	0x0003c13d
    fa2c:	00038c68 	.word	0x00038c68
    fa30:	000381c3 	.word	0x000381c3
    fa34:	0003900a 	.word	0x0003900a
    fa38:	00038f05 	.word	0x00038f05
    fa3c:	00038d67 	.word	0x00038d67
    fa40:	00038e68 	.word	0x00038e68
    fa44:	00038e91 	.word	0x00038e91
    fa48:	00038eb0 	.word	0x00038eb0
    fa4c:	2000f98c 	.word	0x2000f98c
    fa50:	00038ede 	.word	0x00038ede
    fa54:	00038f30 	.word	0x00038f30
    fa58:	00038f6e 	.word	0x00038f6e
    fa5c:	00038fed 	.word	0x00038fed

0000fa60 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    fa60:	b570      	push	{r4, r5, r6, lr}
    fa62:	4605      	mov	r5, r0
    fa64:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    fa66:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    fa68:	4621      	mov	r1, r4
    fa6a:	4628      	mov	r0, r5
    fa6c:	f01f fb3a 	bl	2f0e4 <bt_gatt_dm_char_next>
    fa70:	4604      	mov	r4, r0
    fa72:	b1a0      	cbz	r0, fa9e <bt_gatt_dm_char_by_uuid+0x3e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    fa74:	f01f fb20 	bl	2f0b8 <bt_gatt_dm_attr_chrc_val>

		__ASSERT_NO_MSG(chrc != NULL);
    fa78:	b958      	cbnz	r0, fa92 <bt_gatt_dm_char_by_uuid+0x32>
    fa7a:	490a      	ldr	r1, [pc, #40]	; (faa4 <bt_gatt_dm_char_by_uuid+0x44>)
    fa7c:	480a      	ldr	r0, [pc, #40]	; (faa8 <bt_gatt_dm_char_by_uuid+0x48>)
    fa7e:	f44f 7307 	mov.w	r3, #540	; 0x21c
    fa82:	4a0a      	ldr	r2, [pc, #40]	; (faac <bt_gatt_dm_char_by_uuid+0x4c>)
    fa84:	f01e ff66 	bl	2e954 <assert_print>
    fa88:	f44f 7107 	mov.w	r1, #540	; 0x21c
    fa8c:	4807      	ldr	r0, [pc, #28]	; (faac <bt_gatt_dm_char_by_uuid+0x4c>)
    fa8e:	f01e ff5a 	bl	2e946 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    fa92:	6801      	ldr	r1, [r0, #0]
    fa94:	4630      	mov	r0, r6
    fa96:	f020 f86e 	bl	2fb76 <bt_uuid_cmp>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	d1e4      	bne.n	fa68 <bt_gatt_dm_char_by_uuid+0x8>
			return curr;
		}
	}

	return NULL;
}
    fa9e:	4620      	mov	r0, r4
    faa0:	bd70      	pop	{r4, r5, r6, pc}
    faa2:	bf00      	nop
    faa4:	00038ff6 	.word	0x00038ff6
    faa8:	000381c3 	.word	0x000381c3
    faac:	00038c68 	.word	0x00038c68

0000fab0 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fab2:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    fab4:	460d      	mov	r5, r1
{
    fab6:	af00      	add	r7, sp, #0
	if (svc_uuid &&
    fab8:	b119      	cbz	r1, fac2 <bt_gatt_dm_start+0x12>
    faba:	7809      	ldrb	r1, [r1, #0]
    fabc:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    fac0:	d154      	bne.n	fb6c <bt_gatt_dm_start+0xbc>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    fac2:	2a00      	cmp	r2, #0
    fac4:	d052      	beq.n	fb6c <bt_gatt_dm_start+0xbc>
    fac6:	4c2c      	ldr	r4, [pc, #176]	; (fb78 <bt_gatt_dm_start+0xc8>)
    fac8:	e8d4 1fef 	ldaex	r1, [r4]
    facc:	f041 0001 	orr.w	r0, r1, #1
    fad0:	e8c4 0fec 	stlex	ip, r0, [r4]
    fad4:	f1bc 0f00 	cmp.w	ip, #0
    fad8:	d1f6      	bne.n	fac8 <bt_gatt_dm_start+0x18>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    fada:	f011 0101 	ands.w	r1, r1, #1
    fade:	d148      	bne.n	fb72 <bt_gatt_dm_start+0xc2>
		return -EALREADY;
	}

	dm->conn = conn;
    fae0:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
    fae4:	2d00      	cmp	r5, #0
	dm->context = context;
    fae6:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
    faea:	bf14      	ite	ne
    faec:	2301      	movne	r3, #1
    faee:	2300      	moveq	r3, #0
	list->tail = NULL;
    faf0:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
    faf4:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	dm->callback = cb;
    faf8:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
    fafc:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
    fb00:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158

	if (svc_uuid) {
    fb04:	d00b      	beq.n	fb1e <bt_gatt_dm_start+0x6e>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
    fb06:	7828      	ldrb	r0, [r5, #0]
    fb08:	f7ff fdd2 	bl	f6b0 <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
    fb0c:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
    fb0e:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
    fb10:	2328      	movs	r3, #40	; 0x28
    fb12:	f504 709e 	add.w	r0, r4, #316	; 0x13c
    fb16:	f025 fa76 	bl	35006 <__memcpy_chk>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
    fb1a:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
    fb1e:	4b17      	ldr	r3, [pc, #92]	; (fb7c <bt_gatt_dm_start+0xcc>)
	dm->discover_params.start_handle = 0x0001;
	dm->discover_params.end_handle = 0xffff;
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
    fb20:	4630      	mov	r0, r6
	dm->discover_params.func = discovery_callback;
    fb22:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    fb24:	2301      	movs	r3, #1
    fb26:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    fb28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fb2c:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    fb2e:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
    fb30:	4913      	ldr	r1, [pc, #76]	; (fb80 <bt_gatt_dm_start+0xd0>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
    fb32:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    fb34:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    fb36:	f007 fca3 	bl	17480 <bt_gatt_discover>
	if (err) {
    fb3a:	4604      	mov	r4, r0
    fb3c:	b198      	cbz	r0, fb66 <bt_gatt_dm_start+0xb6>
		LOG_ERR("Discover failed, error: %d.", err);
    fb3e:	466d      	mov	r5, sp
    fb40:	b088      	sub	sp, #32
    fb42:	466a      	mov	r2, sp
    fb44:	4b0f      	ldr	r3, [pc, #60]	; (fb84 <bt_gatt_dm_start+0xd4>)
    fb46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fb4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    fb4e:	2303      	movs	r3, #3
    fb50:	480d      	ldr	r0, [pc, #52]	; (fb88 <bt_gatt_dm_start+0xd8>)
    fb52:	f842 3f10 	str.w	r3, [r2, #16]!
    fb56:	f01f fa62 	bl	2f01e <z_log_msg_static_create.constprop.0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fb5a:	f06f 0101 	mvn.w	r1, #1
    fb5e:	46ad      	mov	sp, r5
    fb60:	4805      	ldr	r0, [pc, #20]	; (fb78 <bt_gatt_dm_start+0xc8>)
    fb62:	f01f fa51 	bl	2f008 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    fb66:	4620      	mov	r0, r4
    fb68:	46bd      	mov	sp, r7
    fb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    fb6c:	f06f 0415 	mvn.w	r4, #21
    fb70:	e7f9      	b.n	fb66 <bt_gatt_dm_start+0xb6>
		return -EALREADY;
    fb72:	f06f 0477 	mvn.w	r4, #119	; 0x77
    fb76:	e7f6      	b.n	fb66 <bt_gatt_dm_start+0xb6>
    fb78:	2000fabc 	.word	0x2000fabc
    fb7c:	0000f79d 	.word	0x0000f79d
    fb80:	2000f98c 	.word	0x2000f98c
    fb84:	00039020 	.word	0x00039020
    fb88:	00036418 	.word	0x00036418

0000fb8c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    fb8c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    fb8e:	4c06      	ldr	r4, [pc, #24]	; (fba8 <scan_default_param_set+0x1c>)
{
    fb90:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    fb92:	ad01      	add	r5, sp, #4
    fb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    fb96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fb98:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    fb9a:	4c04      	ldr	r4, [pc, #16]	; (fbac <scan_default_param_set+0x20>)
    fb9c:	ad01      	add	r5, sp, #4
    fb9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fba2:	6026      	str	r6, [r4, #0]
}
    fba4:	b006      	add	sp, #24
    fba6:	bd70      	pop	{r4, r5, r6, pc}
    fba8:	0003664c 	.word	0x0003664c
    fbac:	2000fb20 	.word	0x2000fb20

0000fbb0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    fbb0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    fbb4:	4b02      	ldr	r3, [pc, #8]	; (fbc0 <scan_default_conn_param_set+0x10>)
    fbb6:	4903      	ldr	r1, [pc, #12]	; (fbc4 <scan_default_conn_param_set+0x14>)
    fbb8:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    fbbc:	4770      	bx	lr
    fbbe:	bf00      	nop
    fbc0:	2000faf0 	.word	0x2000faf0
    fbc4:	00280018 	.word	0x00280018

0000fbc8 <uuid_check>:
{
    fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
    fbcc:	4e2b      	ldr	r6, [pc, #172]	; (fc7c <uuid_check+0xb4>)
{
    fbce:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    fbd0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
{
    fbd4:	4604      	mov	r4, r0
    fbd6:	4688      	mov	r8, r1
    fbd8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    fbda:	b313      	cbz	r3, fc22 <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
    fbdc:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    fbde:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    fbe0:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    fbe2:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    fbe6:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
    fbea:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    fbec:	4557      	cmp	r7, sl
    fbee:	d305      	bcc.n	fbfc <uuid_check+0x34>
	control->filter_status.uuid.count = uuid_match_cnt;
    fbf0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    fbf4:	f1bb 0f00 	cmp.w	fp, #0
    fbf8:	d111      	bne.n	fc1e <uuid_check+0x56>
    fbfa:	e031      	b.n	fc60 <uuid_check+0x98>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    fbfc:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    fc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fc04:	9a03      	ldr	r2, [sp, #12]
    fc06:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    fc08:	4b1d      	ldr	r3, [pc, #116]	; (fc80 <uuid_check+0xb8>)
    fc0a:	5c9b      	ldrb	r3, [r3, r2]
    fc0c:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    fc0e:	9b01      	ldr	r3, [sp, #4]
    fc10:	4599      	cmp	r9, r3
    fc12:	d309      	bcc.n	fc28 <uuid_check+0x60>
		} else if (all_filters_mode) {
    fc14:	f1bb 0f00 	cmp.w	fp, #0
    fc18:	d02c      	beq.n	fc74 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
    fc1a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    fc1e:	45aa      	cmp	sl, r5
    fc20:	d020      	beq.n	fc64 <uuid_check+0x9c>
}
    fc22:	b00b      	add	sp, #44	; 0x2c
    fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    fc28:	9b02      	ldr	r3, [sp, #8]
    fc2a:	9a00      	ldr	r2, [sp, #0]
    fc2c:	eb03 0109 	add.w	r1, r3, r9
    fc30:	a805      	add	r0, sp, #20
    fc32:	f01f ffce 	bl	2fbd2 <bt_uuid_create>
    fc36:	2800      	cmp	r0, #0
    fc38:	d0ec      	beq.n	fc14 <uuid_check+0x4c>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    fc3a:	68b1      	ldr	r1, [r6, #8]
    fc3c:	a805      	add	r0, sp, #20
    fc3e:	f01f ff9a 	bl	2fb76 <bt_uuid_cmp>
    fc42:	b110      	cbz	r0, fc4a <uuid_check+0x82>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    fc44:	9b00      	ldr	r3, [sp, #0]
    fc46:	4499      	add	r9, r3
    fc48:	e7e1      	b.n	fc0e <uuid_check+0x46>
				uuid_filter->uuid[i].uuid;
    fc4a:	68b1      	ldr	r1, [r6, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    fc4c:	eb04 0285 	add.w	r2, r4, r5, lsl #2
			uuid_match_cnt++;
    fc50:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    fc52:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    fc54:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    fc56:	f1bb 0f00 	cmp.w	fp, #0
    fc5a:	d10b      	bne.n	fc74 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
    fc5c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    fc60:	2d00      	cmp	r5, #0
    fc62:	d0de      	beq.n	fc22 <uuid_check+0x5a>
			control->filter_match_cnt++;
    fc64:	7863      	ldrb	r3, [r4, #1]
    fc66:	3301      	adds	r3, #1
    fc68:	7063      	strb	r3, [r4, #1]
			control->filter_status.uuid.match = true;
    fc6a:	2301      	movs	r3, #1
    fc6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			control->filter_match = true;
    fc70:	70a3      	strb	r3, [r4, #2]
}
    fc72:	e7d6      	b.n	fc22 <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
    fc74:	3701      	adds	r7, #1
    fc76:	3618      	adds	r6, #24
    fc78:	e7b8      	b.n	fbec <uuid_check+0x24>
    fc7a:	bf00      	nop
    fc7c:	2000faf0 	.word	0x2000faf0
    fc80:	0003904a 	.word	0x0003904a

0000fc84 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc86:	4605      	mov	r5, r0
    fc88:	460e      	mov	r6, r1
    fc8a:	4617      	mov	r7, r2
	return list->head;
    fc8c:	4b07      	ldr	r3, [pc, #28]	; (fcac <notify_filter_matched.constprop.0+0x28>)
    fc8e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fc90:	b154      	cbz	r4, fca8 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
    fc92:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fc96:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
    fc98:	681b      	ldr	r3, [r3, #0]
    fc9a:	b11b      	cbz	r3, fca4 <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
    fc9c:	463a      	mov	r2, r7
    fc9e:	4631      	mov	r1, r6
    fca0:	4628      	mov	r0, r5
    fca2:	4798      	blx	r3
	return node->next;
    fca4:	6864      	ldr	r4, [r4, #4]
    fca6:	e7f3      	b.n	fc90 <notify_filter_matched.constprop.0+0xc>
}
    fca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fcaa:	bf00      	nop
    fcac:	2000fae8 	.word	0x2000fae8

0000fcb0 <bt_scan_cb_register>:
	if (!cb) {
    fcb0:	b150      	cbz	r0, fcc8 <bt_scan_cb_register+0x18>
	parent->next = child;
    fcb2:	2300      	movs	r3, #0
    fcb4:	6043      	str	r3, [r0, #4]
	return list->tail;
    fcb6:	4b05      	ldr	r3, [pc, #20]	; (fccc <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    fcb8:	1d02      	adds	r2, r0, #4
    fcba:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fcbc:	b911      	cbnz	r1, fcc4 <bt_scan_cb_register+0x14>
	list->head = node;
    fcbe:	e9c3 2200 	strd	r2, r2, [r3]
}
    fcc2:	4770      	bx	lr
	parent->next = child;
    fcc4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    fcc6:	605a      	str	r2, [r3, #4]
}
    fcc8:	4770      	bx	lr
    fcca:	bf00      	nop
    fccc:	2000fae8 	.word	0x2000fae8

0000fcd0 <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
    fcd0:	b570      	push	{r4, r5, r6, lr}
    fcd2:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
    fcd4:	460c      	mov	r4, r1
    fcd6:	2900      	cmp	r1, #0
    fcd8:	d045      	beq.n	fd66 <bt_scan_filter_add+0x96>
	return z_impl_k_mutex_lock(mutex, timeout);
    fcda:	f04f 32ff 	mov.w	r2, #4294967295
    fcde:	f04f 33ff 	mov.w	r3, #4294967295
    fce2:	4822      	ldr	r0, [pc, #136]	; (fd6c <bt_scan_filter_add+0x9c>)
    fce4:	f018 fdce 	bl	28884 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
    fce8:	2d03      	cmp	r5, #3
    fcea:	d00c      	beq.n	fd06 <bt_scan_filter_add+0x36>
    fcec:	d935      	bls.n	fd5a <bt_scan_filter_add+0x8a>
    fcee:	3d04      	subs	r5, #4
    fcf0:	2d01      	cmp	r5, #1
    fcf2:	bf8c      	ite	hi
    fcf4:	f06f 0415 	mvnhi.w	r4, #21
    fcf8:	f06f 040b 	mvnls.w	r4, #11
	return z_impl_k_mutex_unlock(mutex);
    fcfc:	481b      	ldr	r0, [pc, #108]	; (fd6c <bt_scan_filter_add+0x9c>)
    fcfe:	f018 fe91 	bl	28a24 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
    fd02:	4620      	mov	r0, r4
    fd04:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    fd06:	4a1a      	ldr	r2, [pc, #104]	; (fd70 <bt_scan_filter_add+0xa0>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    fd08:	f892 3020 	ldrb.w	r3, [r2, #32]
    fd0c:	bb2b      	cbnz	r3, fd5a <bt_scan_filter_add+0x8a>
	switch (uuid->type) {
    fd0e:	7823      	ldrb	r3, [r4, #0]
    fd10:	2b01      	cmp	r3, #1
    fd12:	d00b      	beq.n	fd2c <bt_scan_filter_add+0x5c>
    fd14:	2b02      	cmp	r3, #2
    fd16:	d010      	beq.n	fd3a <bt_scan_filter_add+0x6a>
    fd18:	bb13      	cbnz	r3, fd60 <bt_scan_filter_add+0x90>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    fd1a:	6820      	ldr	r0, [r4, #0]
    fd1c:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    fd1e:	4b15      	ldr	r3, [pc, #84]	; (fd74 <bt_scan_filter_add+0xa4>)
	return 0;
    fd20:	2400      	movs	r4, #0
		uuid_filter[counter].uuid =
    fd22:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    fd24:	2301      	movs	r3, #1
    fd26:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    fd2a:	e7e7      	b.n	fcfc <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    fd2c:	f102 030c 	add.w	r3, r2, #12
    fd30:	e894 0003 	ldmia.w	r4, {r0, r1}
    fd34:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
    fd38:	e7f1      	b.n	fd1e <bt_scan_filter_add+0x4e>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    fd3a:	4623      	mov	r3, r4
    fd3c:	f102 040c 	add.w	r4, r2, #12
    fd40:	f103 0610 	add.w	r6, r3, #16
    fd44:	4625      	mov	r5, r4
    fd46:	6818      	ldr	r0, [r3, #0]
    fd48:	6859      	ldr	r1, [r3, #4]
    fd4a:	3308      	adds	r3, #8
    fd4c:	c503      	stmia	r5!, {r0, r1}
    fd4e:	42b3      	cmp	r3, r6
    fd50:	462c      	mov	r4, r5
    fd52:	d1f7      	bne.n	fd44 <bt_scan_filter_add+0x74>
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	702b      	strb	r3, [r5, #0]
		break;
    fd58:	e7e1      	b.n	fd1e <bt_scan_filter_add+0x4e>
    fd5a:	f06f 040b 	mvn.w	r4, #11
    fd5e:	e7cd      	b.n	fcfc <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    fd60:	f06f 0415 	mvn.w	r4, #21
    fd64:	e7ca      	b.n	fcfc <bt_scan_filter_add+0x2c>
		return -EINVAL;
    fd66:	f06f 0415 	mvn.w	r4, #21
    fd6a:	e7ca      	b.n	fd02 <bt_scan_filter_add+0x32>
    fd6c:	2000cf1c 	.word	0x2000cf1c
    fd70:	2000faf0 	.word	0x2000faf0
    fd74:	2000fafc 	.word	0x2000fafc

0000fd78 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
    fd78:	2200      	movs	r2, #0
    fd7a:	4b05      	ldr	r3, [pc, #20]	; (fd90 <bt_scan_filter_disable+0x18>)
    fd7c:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    fd7e:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    fd80:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    fd82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    fd86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    fd8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    fd8e:	4770      	bx	lr
    fd90:	2000faf0 	.word	0x2000faf0

0000fd94 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
    fd94:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
    fd96:	0683      	lsls	r3, r0, #26
    fd98:	d025      	beq.n	fde6 <bt_scan_filter_enable+0x52>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
    fd9a:	f7ff ffed 	bl	fd78 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
    fd9e:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    fda2:	bf18      	it	ne
    fda4:	2201      	movne	r2, #1
    fda6:	4b11      	ldr	r3, [pc, #68]	; (fdec <bt_scan_filter_enable+0x58>)
    fda8:	bf18      	it	ne
    fdaa:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
    fdac:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    fdae:	bf44      	itt	mi
    fdb0:	2201      	movmi	r2, #1
    fdb2:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    fdb4:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    fdb6:	bf44      	itt	mi
    fdb8:	2201      	movmi	r2, #1
    fdba:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
    fdbc:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    fdbe:	bf44      	itt	mi
    fdc0:	2201      	movmi	r2, #1
    fdc2:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    fdc6:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    fdc8:	bf44      	itt	mi
    fdca:	2201      	movmi	r2, #1
    fdcc:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    fdd0:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    fdd2:	bf48      	it	mi
    fdd4:	2201      	movmi	r2, #1
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;

	return 0;
    fdd6:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    fdda:	bf48      	it	mi
    fddc:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    fde0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    fde4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    fde6:	f06f 0015 	mvn.w	r0, #21
    fdea:	e7fb      	b.n	fde4 <bt_scan_filter_enable+0x50>
    fdec:	2000faf0 	.word	0x2000faf0

0000fdf0 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    fdf0:	b570      	push	{r4, r5, r6, lr}
    fdf2:	460e      	mov	r6, r1
    fdf4:	b086      	sub	sp, #24
    fdf6:	4605      	mov	r5, r0
	bt_scan_stop();
    fdf8:	f01f fa04 	bl	2f204 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    fdfc:	4b15      	ldr	r3, [pc, #84]	; (fe54 <scan_connect_with_target.part.0+0x64>)
    fdfe:	ac02      	add	r4, sp, #8
    fe00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    fe02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    fe06:	ab01      	add	r3, sp, #4
    fe08:	4621      	mov	r1, r4
    fe0a:	4630      	mov	r0, r6
    fe0c:	4a12      	ldr	r2, [pc, #72]	; (fe58 <scan_connect_with_target.part.0+0x68>)
    fe0e:	f004 fe69 	bl	14ae4 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
    fe12:	3508      	adds	r5, #8
    fe14:	4b11      	ldr	r3, [pc, #68]	; (fe5c <scan_connect_with_target.part.0+0x6c>)
	if (err) {
    fe16:	b150      	cbz	r0, fe2e <scan_connect_with_target.part.0+0x3e>
	return list->head;
    fe18:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fe1a:	b1c4      	cbz	r4, fe4e <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
    fe1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fe20:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
    fe22:	689b      	ldr	r3, [r3, #8]
    fe24:	b10b      	cbz	r3, fe2a <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
    fe26:	4628      	mov	r0, r5
    fe28:	4798      	blx	r3
	return node->next;
    fe2a:	6864      	ldr	r4, [r4, #4]
    fe2c:	e7f5      	b.n	fe1a <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
    fe2e:	9e01      	ldr	r6, [sp, #4]
	return list->head;
    fe30:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fe32:	b14c      	cbz	r4, fe48 <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
    fe34:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    fe38:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
    fe3a:	68db      	ldr	r3, [r3, #12]
    fe3c:	b113      	cbz	r3, fe44 <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
    fe3e:	4631      	mov	r1, r6
    fe40:	4628      	mov	r0, r5
    fe42:	4798      	blx	r3
	return node->next;
    fe44:	6864      	ldr	r4, [r4, #4]
    fe46:	e7f4      	b.n	fe32 <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
    fe48:	9801      	ldr	r0, [sp, #4]
    fe4a:	f004 fb37 	bl	144bc <bt_conn_unref>
}
    fe4e:	b006      	add	sp, #24
    fe50:	bd70      	pop	{r4, r5, r6, pc}
    fe52:	bf00      	nop
    fe54:	00036660 	.word	0x00036660
    fe58:	2000fb34 	.word	0x2000fb34
    fe5c:	2000fae8 	.word	0x2000fae8

0000fe60 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    fe64:	4f2c      	ldr	r7, [pc, #176]	; (ff18 <scan_recv+0xb8>)
{
    fe66:	b096      	sub	sp, #88	; 0x58
    fe68:	4605      	mov	r5, r0
    fe6a:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
    fe6c:	2254      	movs	r2, #84	; 0x54
    fe6e:	2100      	movs	r1, #0
    fe70:	a801      	add	r0, sp, #4
    fe72:	f025 f8db 	bl	3502c <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    fe76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    fe7a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (is_uuid_filter_enabled()) {
    fe7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    fe82:	b113      	cbz	r3, fe8a <scan_recv+0x2a>
		control->filter_cnt++;
    fe84:	2301      	movs	r3, #1
    fe86:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    fe8a:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    fe8c:	4620      	mov	r0, r4
    fe8e:	f003 0301 	and.w	r3, r3, #1
    fe92:	f88d 3008 	strb.w	r3, [sp, #8]
    fe96:	f021 f9a6 	bl	311e6 <net_buf_simple_headroom>
    fe9a:	4606      	mov	r6, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    fe9c:	491f      	ldr	r1, [pc, #124]	; (ff1c <scan_recv+0xbc>)
    fe9e:	4620      	mov	r0, r4
    fea0:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    fea2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    fea6:	f001 fcef 	bl	11888 <bt_data_parse>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    feaa:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    feac:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    feb0:	fa13 f686 	uxtah	r6, r3, r6
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    feb4:	4b1a      	ldr	r3, [pc, #104]	; (ff20 <scan_recv+0xc0>)
    feb6:	6026      	str	r6, [r4, #0]
	scan_control.device_info.adv_data = ad;
    feb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
    febc:	f89d 3007 	ldrb.w	r3, [sp, #7]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    fec0:	682c      	ldr	r4, [r5, #0]
	scan_control.device_info.recv_info = info;
    fec2:	9503      	str	r5, [sp, #12]
	if (control->all_mode &&
    fec4:	f89d 5008 	ldrb.w	r5, [sp, #8]
    fec8:	b1a3      	cbz	r3, fef4 <scan_recv+0x94>
    feca:	f89d 2005 	ldrb.w	r2, [sp, #5]
    fece:	f89d 3004 	ldrb.w	r3, [sp, #4]
    fed2:	429a      	cmp	r2, r3
    fed4:	d112      	bne.n	fefc <scan_recv+0x9c>
		notify_filter_matched(&control->device_info,
    fed6:	462a      	mov	r2, r5
    fed8:	a906      	add	r1, sp, #24
    feda:	a803      	add	r0, sp, #12
    fedc:	f7ff fed2 	bl	fc84 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    fee0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    fee4:	b11b      	cbz	r3, feee <scan_recv+0x8e>
    fee6:	4621      	mov	r1, r4
    fee8:	a801      	add	r0, sp, #4
    feea:	f7ff ff81 	bl	fdf0 <scan_connect_with_target.part.0>
}
    feee:	b016      	add	sp, #88	; 0x58
    fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
    fef4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fef8:	2b00      	cmp	r3, #0
    fefa:	d1ec      	bne.n	fed6 <scan_recv+0x76>
	return list->head;
    fefc:	4b09      	ldr	r3, [pc, #36]	; (ff24 <scan_recv+0xc4>)
    fefe:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ff00:	2c00      	cmp	r4, #0
    ff02:	d0f4      	beq.n	feee <scan_recv+0x8e>
		if (cb->cb_addr->filter_no_match) {
    ff04:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ff08:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
    ff0a:	685b      	ldr	r3, [r3, #4]
    ff0c:	b113      	cbz	r3, ff14 <scan_recv+0xb4>
			cb->cb_addr->filter_no_match(device_info, connectable);
    ff0e:	4629      	mov	r1, r5
    ff10:	a803      	add	r0, sp, #12
    ff12:	4798      	blx	r3
	return node->next;
    ff14:	6864      	ldr	r4, [r4, #4]
    ff16:	e7f3      	b.n	ff00 <scan_recv+0xa0>
    ff18:	2000faf0 	.word	0x2000faf0
    ff1c:	0002f1d3 	.word	0x0002f1d3
    ff20:	2000fb34 	.word	0x2000fb34
    ff24:	2000fae8 	.word	0x2000fae8

0000ff28 <bt_scan_init>:
{
    ff28:	b570      	push	{r4, r5, r6, lr}
    ff2a:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    ff2c:	4c14      	ldr	r4, [pc, #80]	; (ff80 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    ff2e:	4815      	ldr	r0, [pc, #84]	; (ff84 <bt_scan_init+0x5c>)
    ff30:	f003 feb4 	bl	13c9c <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    ff34:	222c      	movs	r2, #44	; 0x2c
    ff36:	2100      	movs	r1, #0
    ff38:	4620      	mov	r0, r4
    ff3a:	f025 f877 	bl	3502c <memset>
	if (init) {
    ff3e:	b1be      	cbz	r6, ff70 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    ff40:	7933      	ldrb	r3, [r6, #4]
    ff42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    ff46:	6835      	ldr	r5, [r6, #0]
    ff48:	b15d      	cbz	r5, ff62 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    ff4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ff4c:	3430      	adds	r4, #48	; 0x30
    ff4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ff50:	682b      	ldr	r3, [r5, #0]
    ff52:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    ff54:	68b2      	ldr	r2, [r6, #8]
    ff56:	b13a      	cbz	r2, ff68 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    ff58:	4b0b      	ldr	r3, [pc, #44]	; (ff88 <bt_scan_init+0x60>)
    ff5a:	6810      	ldr	r0, [r2, #0]
    ff5c:	6851      	ldr	r1, [r2, #4]
    ff5e:	c303      	stmia	r3!, {r0, r1}
}
    ff60:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    ff62:	f7ff fe13 	bl	fb8c <scan_default_param_set>
    ff66:	e7f5      	b.n	ff54 <bt_scan_init+0x2c>
}
    ff68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    ff6c:	f7ff be20 	b.w	fbb0 <scan_default_conn_param_set>
		scan_default_param_set();
    ff70:	f7ff fe0c 	bl	fb8c <scan_default_param_set>
		scan_default_conn_param_set();
    ff74:	f7ff fe1c 	bl	fbb0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    ff78:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    ff7c:	e7f0      	b.n	ff60 <bt_scan_init+0x38>
    ff7e:	bf00      	nop
    ff80:	2000faf0 	.word	0x2000faf0
    ff84:	2000c81c 	.word	0x2000c81c
    ff88:	2000fb34 	.word	0x2000fb34

0000ff8c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    ff8c:	4603      	mov	r3, r0
    ff8e:	b108      	cbz	r0, ff94 <bt_scan_start+0x8>
    ff90:	2801      	cmp	r0, #1
    ff92:	d105      	bne.n	ffa0 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
    ff94:	4804      	ldr	r0, [pc, #16]	; (ffa8 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ff96:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
    ff98:	f800 3f30 	strb.w	r3, [r0, #48]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ff9c:	f003 bdf4 	b.w	13b88 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    ffa0:	f06f 0015 	mvn.w	r0, #21
    ffa4:	4770      	bx	lr
    ffa6:	bf00      	nop
    ffa8:	2000faf0 	.word	0x2000faf0

0000ffac <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    ffac:	4904      	ldr	r1, [pc, #16]	; (ffc0 <sub_bytes+0x14>)
    ffae:	1e43      	subs	r3, r0, #1
    ffb0:	300f      	adds	r0, #15
    ffb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ffb6:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    ffb8:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    ffba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    ffbc:	d1f9      	bne.n	ffb2 <sub_bytes+0x6>
	}
}
    ffbe:	4770      	bx	lr
    ffc0:	00039059 	.word	0x00039059

0000ffc4 <tc_aes128_set_encrypt_key>:
{
    ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffc6:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    ffc8:	4e26      	ldr	r6, [pc, #152]	; (10064 <tc_aes128_set_encrypt_key+0xa0>)
{
    ffca:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    ffcc:	ad01      	add	r5, sp, #4
{
    ffce:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    ffd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ffd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ffd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ffd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ffd8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    ffdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    ffe0:	4638      	mov	r0, r7
    ffe2:	2f00      	cmp	r7, #0
    ffe4:	d039      	beq.n	1005a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    ffe6:	2c00      	cmp	r4, #0
    ffe8:	d039      	beq.n	1005e <tc_aes128_set_encrypt_key+0x9a>
    ffea:	1f38      	subs	r0, r7, #4
    ffec:	4602      	mov	r2, r0
    ffee:	4621      	mov	r1, r4
    fff0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fff2:	784b      	ldrb	r3, [r1, #1]
    fff4:	780d      	ldrb	r5, [r1, #0]
    fff6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fff8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    fffc:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    fffe:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10000:	432b      	orrs	r3, r5
   10002:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10006:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10008:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1000c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10010:	d1ef      	bne.n	fff2 <tc_aes128_set_encrypt_key+0x2e>
   10012:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10014:	4c14      	ldr	r4, [pc, #80]	; (10068 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10016:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10018:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1001a:	d116      	bne.n	1004a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1001c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10020:	5ca5      	ldrb	r5, [r4, r2]
   10022:	0e1a      	lsrs	r2, r3, #24
   10024:	5ca2      	ldrb	r2, [r4, r2]
   10026:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1002a:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1002e:	5d65      	ldrb	r5, [r4, r5]
   10030:	b2db      	uxtb	r3, r3
   10032:	5ce3      	ldrb	r3, [r4, r3]
   10034:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10038:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1003c:	f021 0303 	bic.w	r3, r1, #3
   10040:	3330      	adds	r3, #48	; 0x30
   10042:	446b      	add	r3, sp
   10044:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10048:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1004a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1004e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10050:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10052:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10054:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10056:	d1de      	bne.n	10016 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10058:	2001      	movs	r0, #1
}
   1005a:	b00d      	add	sp, #52	; 0x34
   1005c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1005e:	4620      	mov	r0, r4
   10060:	e7fb      	b.n	1005a <tc_aes128_set_encrypt_key+0x96>
   10062:	bf00      	nop
   10064:	00036670 	.word	0x00036670
   10068:	00039059 	.word	0x00039059

0001006c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   1006c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10070:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10072:	6803      	ldr	r3, [r0, #0]
{
   10074:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10076:	9302      	str	r3, [sp, #8]
   10078:	6843      	ldr	r3, [r0, #4]
   1007a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 10238 <compress+0x1cc>
   1007e:	9303      	str	r3, [sp, #12]
   10080:	6883      	ldr	r3, [r0, #8]
   10082:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10086:	9304      	str	r3, [sp, #16]
   10088:	68c3      	ldr	r3, [r0, #12]
   1008a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1008c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1008e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10092:	9306      	str	r3, [sp, #24]
   10094:	6943      	ldr	r3, [r0, #20]
   10096:	9307      	str	r3, [sp, #28]
   10098:	6983      	ldr	r3, [r0, #24]
   1009a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   1009e:	9308      	str	r3, [sp, #32]
   100a0:	69c3      	ldr	r3, [r0, #28]
   100a2:	4698      	mov	r8, r3
   100a4:	9309      	str	r3, [sp, #36]	; 0x24
   100a6:	9b08      	ldr	r3, [sp, #32]
   100a8:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   100aa:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   100ac:	ab0c      	add	r3, sp, #48	; 0x30
   100ae:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   100b0:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   100b4:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   100b6:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   100ba:	44a9      	add	r9, r5
   100bc:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   100c0:	9d00      	ldr	r5, [sp, #0]
   100c2:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   100c6:	444b      	add	r3, r9
   100c8:	ea25 0502 	bic.w	r5, r5, r2
   100cc:	ea02 090c 	and.w	r9, r2, ip
   100d0:	ea85 0509 	eor.w	r5, r5, r9
   100d4:	442b      	add	r3, r5
   100d6:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   100d8:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   100dc:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   100e0:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   100e4:	4025      	ands	r5, r4
   100e6:	ea06 090b 	and.w	r9, r6, fp
   100ea:	ea85 0509 	eor.w	r5, r5, r9
   100ee:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   100f2:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   100f4:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   100f6:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   100f8:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   100fc:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   100fe:	46de      	mov	lr, fp
   10100:	f8dd 8000 	ldr.w	r8, [sp]
   10104:	f040 8088 	bne.w	10218 <compress+0x1ac>
   10108:	f04f 0a10 	mov.w	sl, #16
   1010c:	494b      	ldr	r1, [pc, #300]	; (1023c <compress+0x1d0>)
   1010e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10110:	4651      	mov	r1, sl
   10112:	f10a 0a01 	add.w	sl, sl, #1
   10116:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1011a:	f00a 070f 	and.w	r7, sl, #15
   1011e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10122:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10126:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   1012a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   1012e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10130:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10134:	f101 070e 	add.w	r7, r1, #14
   10138:	f007 070f 	and.w	r7, r7, #15
   1013c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10140:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10144:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10146:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   1014a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   1014e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10152:	f001 010f 	and.w	r1, r1, #15
   10156:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1015a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   1015e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   10162:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10166:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   1016a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1016e:	4471      	add	r1, lr
		s0 = sigma0(s0);
   10170:	f8dd e004 	ldr.w	lr, [sp, #4]
   10174:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10178:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1017c:	4441      	add	r1, r8
		s1 = sigma1(s1);
   1017e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10182:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10184:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10188:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1018c:	ea2c 0705 	bic.w	r7, ip, r5
   10190:	ea87 0708 	eor.w	r7, r7, r8
   10194:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10198:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1019c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   101a0:	4477      	add	r7, lr
   101a2:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   101a6:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   101aa:	4477      	add	r7, lr
   101ac:	440f      	add	r7, r1
   101ae:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   101b0:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   101b4:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   101b6:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   101ba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   101be:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   101c2:	ea07 0703 	and.w	r7, r7, r3
   101c6:	ea04 0806 	and.w	r8, r4, r6
   101ca:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   101ce:	ea87 0708 	eor.w	r7, r7, r8
   101d2:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   101d4:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   101d6:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   101da:	f8cd c000 	str.w	ip, [sp]
   101de:	46b3      	mov	fp, r6
   101e0:	d122      	bne.n	10228 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   101e2:	9902      	ldr	r1, [sp, #8]
   101e4:	4439      	add	r1, r7
   101e6:	6001      	str	r1, [r0, #0]
   101e8:	9903      	ldr	r1, [sp, #12]
   101ea:	4419      	add	r1, r3
   101ec:	9b04      	ldr	r3, [sp, #16]
   101ee:	6041      	str	r1, [r0, #4]
   101f0:	4423      	add	r3, r4
   101f2:	6083      	str	r3, [r0, #8]
   101f4:	9b05      	ldr	r3, [sp, #20]
   101f6:	4433      	add	r3, r6
   101f8:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   101fa:	9b06      	ldr	r3, [sp, #24]
   101fc:	4473      	add	r3, lr
   101fe:	6103      	str	r3, [r0, #16]
   10200:	9b07      	ldr	r3, [sp, #28]
   10202:	442b      	add	r3, r5
   10204:	6143      	str	r3, [r0, #20]
   10206:	9b08      	ldr	r3, [sp, #32]
   10208:	4413      	add	r3, r2
   1020a:	6183      	str	r3, [r0, #24]
   1020c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1020e:	4463      	add	r3, ip
   10210:	61c3      	str	r3, [r0, #28]
}
   10212:	b01d      	add	sp, #116	; 0x74
   10214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10218:	46b3      	mov	fp, r6
   1021a:	f8cd c000 	str.w	ip, [sp]
   1021e:	4626      	mov	r6, r4
   10220:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10222:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10224:	462a      	mov	r2, r5
   10226:	e740      	b.n	100aa <compress+0x3e>
   10228:	4694      	mov	ip, r2
   1022a:	4626      	mov	r6, r4
   1022c:	462a      	mov	r2, r5
   1022e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10230:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10232:	463b      	mov	r3, r7
   10234:	e76c      	b.n	10110 <compress+0xa4>
   10236:	bf00      	nop
   10238:	00036928 	.word	0x00036928
   1023c:	00036964 	.word	0x00036964

00010240 <tc_sha256_init>:
{
   10240:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10242:	4604      	mov	r4, r0
   10244:	b1c8      	cbz	r0, 1027a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10246:	2270      	movs	r2, #112	; 0x70
   10248:	2100      	movs	r1, #0
   1024a:	f01e ffea 	bl	2f222 <_set>
	s->iv[1] = 0xbb67ae85;
   1024e:	4b0b      	ldr	r3, [pc, #44]	; (1027c <tc_sha256_init+0x3c>)
   10250:	4a0b      	ldr	r2, [pc, #44]	; (10280 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   10252:	490c      	ldr	r1, [pc, #48]	; (10284 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10254:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10258:	4b0b      	ldr	r3, [pc, #44]	; (10288 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   1025a:	480c      	ldr	r0, [pc, #48]	; (1028c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   1025c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   10260:	4b0b      	ldr	r3, [pc, #44]	; (10290 <tc_sha256_init+0x50>)
   10262:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10266:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10268:	4b0a      	ldr	r3, [pc, #40]	; (10294 <tc_sha256_init+0x54>)
   1026a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   1026c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   10270:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10274:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10278:	61e3      	str	r3, [r4, #28]
}
   1027a:	bd10      	pop	{r4, pc}
   1027c:	bb67ae85 	.word	0xbb67ae85
   10280:	6a09e667 	.word	0x6a09e667
   10284:	3c6ef372 	.word	0x3c6ef372
   10288:	a54ff53a 	.word	0xa54ff53a
   1028c:	510e527f 	.word	0x510e527f
   10290:	9b05688c 	.word	0x9b05688c
   10294:	1f83d9ab 	.word	0x1f83d9ab

00010298 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10298:	4901      	ldr	r1, [pc, #4]	; (102a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1029a:	2210      	movs	r2, #16
	str	r2, [r1]
   1029c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1029e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   102a0:	e000ed10 	.word	0xe000ed10

000102a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   102a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   102a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   102a8:	f380 8811 	msr	BASEPRI, r0
	isb
   102ac:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   102b0:	f3bf 8f4f 	dsb	sy
   102b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   102b6:	b662      	cpsie	i
	isb
   102b8:	f3bf 8f6f 	isb	sy

	bx	lr
   102bc:	4770      	bx	lr
   102be:	bf00      	nop

000102c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   102c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   102c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   102c4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   102c8:	f3bf 8f4f 	dsb	sy
   102cc:	bf20      	wfe

	msr	BASEPRI, r0
   102ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   102d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   102d4:	4770      	bx	lr
   102d6:	bf00      	nop

000102d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   102d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   102dc:	4681      	mov	r9, r0

	if (esf != NULL) {
   102de:	460c      	mov	r4, r1
{
   102e0:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   102e2:	2900      	cmp	r1, #0
   102e4:	d04c      	beq.n	10380 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   102e6:	e9d1 1200 	ldrd	r1, r2, [r1]
   102ea:	466e      	mov	r6, sp
   102ec:	b08a      	sub	sp, #40	; 0x28
   102ee:	68a3      	ldr	r3, [r4, #8]
   102f0:	466d      	mov	r5, sp
   102f2:	f04f 0a05 	mov.w	sl, #5
   102f6:	46a8      	mov	r8, r5
   102f8:	4825      	ldr	r0, [pc, #148]	; (10390 <z_arm_fatal_error+0xb8>)
   102fa:	e9c5 2307 	strd	r2, r3, [r5, #28]
   102fe:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10302:	f848 af10 	str.w	sl, [r8, #16]!
   10306:	2300      	movs	r3, #0
   10308:	4642      	mov	r2, r8
   1030a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1030e:	4821      	ldr	r0, [pc, #132]	; (10394 <z_arm_fatal_error+0xbc>)
   10310:	f7fe fa84 	bl	e81c <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10314:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   10318:	46b5      	mov	sp, r6
   1031a:	6963      	ldr	r3, [r4, #20]
   1031c:	46ad      	mov	sp, r5
   1031e:	481e      	ldr	r0, [pc, #120]	; (10398 <z_arm_fatal_error+0xc0>)
   10320:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10324:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10328:	f8c5 a010 	str.w	sl, [r5, #16]
   1032c:	2300      	movs	r3, #0
   1032e:	4642      	mov	r2, r8
   10330:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10334:	4817      	ldr	r0, [pc, #92]	; (10394 <z_arm_fatal_error+0xbc>)
   10336:	f7fe fa71 	bl	e81c <z_impl_z_log_msg_static_create>
   1033a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1033c:	b088      	sub	sp, #32
   1033e:	69e3      	ldr	r3, [r4, #28]
   10340:	466d      	mov	r5, sp
   10342:	f04f 0a03 	mov.w	sl, #3
   10346:	46a8      	mov	r8, r5
   10348:	4a14      	ldr	r2, [pc, #80]	; (1039c <z_arm_fatal_error+0xc4>)
   1034a:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1034e:	f848 af10 	str.w	sl, [r8, #16]!
   10352:	2300      	movs	r3, #0
   10354:	4642      	mov	r2, r8
   10356:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1035a:	480e      	ldr	r0, [pc, #56]	; (10394 <z_arm_fatal_error+0xbc>)
   1035c:	f7fe fa5e 	bl	e81c <z_impl_z_log_msg_static_create>
   10360:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   10362:	69a3      	ldr	r3, [r4, #24]
   10364:	46ad      	mov	sp, r5
   10366:	4a0e      	ldr	r2, [pc, #56]	; (103a0 <z_arm_fatal_error+0xc8>)
   10368:	f8c5 a010 	str.w	sl, [r5, #16]
   1036c:	e9c5 2305 	strd	r2, r3, [r5, #20]
   10370:	2300      	movs	r3, #0
   10372:	4642      	mov	r2, r8
   10374:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10378:	4806      	ldr	r0, [pc, #24]	; (10394 <z_arm_fatal_error+0xbc>)
   1037a:	f7fe fa4f 	bl	e81c <z_impl_z_log_msg_static_create>
   1037e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10380:	4621      	mov	r1, r4
   10382:	4648      	mov	r0, r9
   10384:	f017 fd76 	bl	27e74 <z_fatal_error>
}
   10388:	46bd      	mov	sp, r7
   1038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1038e:	bf00      	nop
   10390:	00039159 	.word	0x00039159
   10394:	000365c8 	.word	0x000365c8
   10398:	00039188 	.word	0x00039188
   1039c:	000391b7 	.word	0x000391b7
   103a0:	000391c6 	.word	0x000391c6

000103a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   103a4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   103a6:	2800      	cmp	r0, #0
   103a8:	db07      	blt.n	103ba <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   103aa:	2301      	movs	r3, #1
   103ac:	0941      	lsrs	r1, r0, #5
   103ae:	4a03      	ldr	r2, [pc, #12]	; (103bc <arch_irq_enable+0x18>)
   103b0:	f000 001f 	and.w	r0, r0, #31
   103b4:	4083      	lsls	r3, r0
   103b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   103ba:	4770      	bx	lr
   103bc:	e000e100 	.word	0xe000e100

000103c0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   103c0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   103c2:	2800      	cmp	r0, #0
   103c4:	db0c      	blt.n	103e0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   103c6:	2201      	movs	r2, #1
   103c8:	4906      	ldr	r1, [pc, #24]	; (103e4 <arch_irq_disable+0x24>)
   103ca:	0943      	lsrs	r3, r0, #5
   103cc:	f000 001f 	and.w	r0, r0, #31
   103d0:	4082      	lsls	r2, r0
   103d2:	3320      	adds	r3, #32
   103d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   103d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   103dc:	f3bf 8f6f 	isb	sy
}
   103e0:	4770      	bx	lr
   103e2:	bf00      	nop
   103e4:	e000e100 	.word	0xe000e100

000103e8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   103e8:	4b05      	ldr	r3, [pc, #20]	; (10400 <arch_irq_is_enabled+0x18>)
   103ea:	0942      	lsrs	r2, r0, #5
   103ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   103f0:	2301      	movs	r3, #1
   103f2:	f000 001f 	and.w	r0, r0, #31
   103f6:	fa03 f000 	lsl.w	r0, r3, r0
}
   103fa:	4010      	ands	r0, r2
   103fc:	4770      	bx	lr
   103fe:	bf00      	nop
   10400:	e000e100 	.word	0xe000e100

00010404 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10404:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10406:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10408:	2b07      	cmp	r3, #7
{
   1040a:	4604      	mov	r4, r0
   1040c:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1040e:	d90f      	bls.n	10430 <z_arm_irq_priority_set+0x2c>
   10410:	235b      	movs	r3, #91	; 0x5b
   10412:	4a10      	ldr	r2, [pc, #64]	; (10454 <z_arm_irq_priority_set+0x50>)
   10414:	4910      	ldr	r1, [pc, #64]	; (10458 <z_arm_irq_priority_set+0x54>)
   10416:	4811      	ldr	r0, [pc, #68]	; (1045c <z_arm_irq_priority_set+0x58>)
   10418:	f01e fa9c 	bl	2e954 <assert_print>
   1041c:	4629      	mov	r1, r5
   1041e:	4810      	ldr	r0, [pc, #64]	; (10460 <z_arm_irq_priority_set+0x5c>)
   10420:	2307      	movs	r3, #7
   10422:	4622      	mov	r2, r4
   10424:	f01e fa96 	bl	2e954 <assert_print>
   10428:	215b      	movs	r1, #91	; 0x5b
   1042a:	480a      	ldr	r0, [pc, #40]	; (10454 <z_arm_irq_priority_set+0x50>)
   1042c:	f01e fa8b 	bl	2e946 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10430:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10432:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10434:	bfac      	ite	ge
   10436:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1043a:	4a0a      	ldrlt	r2, [pc, #40]	; (10464 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1043c:	ea4f 1343 	mov.w	r3, r3, lsl #5
   10440:	b2db      	uxtb	r3, r3
   10442:	bfab      	itete	ge
   10444:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10448:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1044c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10450:	5413      	strblt	r3, [r2, r0]
}
   10452:	bd38      	pop	{r3, r4, r5, pc}
   10454:	000391f4 	.word	0x000391f4
   10458:	0003922a 	.word	0x0003922a
   1045c:	000381c3 	.word	0x000381c3
   10460:	00039245 	.word	0x00039245
   10464:	e000ed14 	.word	0xe000ed14

00010468 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10468:	bf30      	wfi
    b z_SysNmiOnReset
   1046a:	f7ff bffd 	b.w	10468 <z_SysNmiOnReset>
   1046e:	bf00      	nop

00010470 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10470:	4a0b      	ldr	r2, [pc, #44]	; (104a0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10472:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10474:	4b0b      	ldr	r3, [pc, #44]	; (104a4 <z_arm_prep_c+0x34>)
   10476:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1047a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1047c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10480:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10484:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10488:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1048c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10490:	f017 fdc4 	bl	2801c <z_bss_zero>
	z_data_copy();
   10494:	f01a fc1c 	bl	2acd0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10498:	f000 fc28 	bl	10cec <z_arm_interrupt_init>
	z_cstart();
   1049c:	f017 fdfe 	bl	2809c <z_cstart>
   104a0:	00008000 	.word	0x00008000
   104a4:	e000ed00 	.word	0xe000ed00

000104a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   104a8:	4a09      	ldr	r2, [pc, #36]	; (104d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   104aa:	490a      	ldr	r1, [pc, #40]	; (104d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   104ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   104ae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   104b0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   104b2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   104b4:	4908      	ldr	r1, [pc, #32]	; (104d8 <arch_swap+0x30>)
   104b6:	684b      	ldr	r3, [r1, #4]
   104b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   104bc:	604b      	str	r3, [r1, #4]
   104be:	2300      	movs	r3, #0
   104c0:	f383 8811 	msr	BASEPRI, r3
   104c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   104c8:	6893      	ldr	r3, [r2, #8]
}
   104ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   104cc:	4770      	bx	lr
   104ce:	bf00      	nop
   104d0:	20010fc0 	.word	0x20010fc0
   104d4:	0003776c 	.word	0x0003776c
   104d8:	e000ed00 	.word	0xe000ed00

000104dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   104dc:	4915      	ldr	r1, [pc, #84]	; (10534 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   104de:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   104e0:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   104e4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   104e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   104ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   104ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   104f2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   104f4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   104f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   104fc:	4f0e      	ldr	r7, [pc, #56]	; (10538 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   104fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10502:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   10504:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10506:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10508:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1050c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1050e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10510:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10512:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10516:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1051a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1051e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10522:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10526:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10528:	f01f fad1 	bl	2face <configure_builtin_stack_guard>
    pop {r2, lr}
   1052c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10530:	4770      	bx	lr
   10532:	0000      	.short	0x0000
    ldr r1, =_kernel
   10534:	20010fc0 	.word	0x20010fc0
    ldr v4, =_SCS_ICSR
   10538:	e000ed04 	.word	0xe000ed04

0001053c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1053c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10540:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10542:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10546:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1054a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1054c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10550:	2902      	cmp	r1, #2
    beq _oops
   10552:	d0ff      	beq.n	10554 <_oops>

00010554 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10554:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10556:	f01f faab 	bl	2fab0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1055a:	bd01      	pop	{r0, pc}

0001055c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1055c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10560:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   10562:	490d      	ldr	r1, [pc, #52]	; (10598 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   10564:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10568:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1056a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1056e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10572:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10574:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10578:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1057c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10580:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10584:	2300      	movs	r3, #0
   10586:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10588:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1058c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1058e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10590:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10594:	4770      	bx	lr
   10596:	bf00      	nop
   10598:	0002e5cf 	.word	0x0002e5cf

0001059c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1059c:	4b08      	ldr	r3, [pc, #32]	; (105c0 <arch_switch_to_main_thread+0x24>)
   1059e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   105a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   105a2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   105a6:	4610      	mov	r0, r2
   105a8:	f381 8809 	msr	PSP, r1
   105ac:	2100      	movs	r1, #0
   105ae:	b663      	cpsie	if
   105b0:	f381 8811 	msr	BASEPRI, r1
   105b4:	f3bf 8f6f 	isb	sy
   105b8:	2200      	movs	r2, #0
   105ba:	2300      	movs	r3, #0
   105bc:	f01e f807 	bl	2e5ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   105c0:	20010fc0 	.word	0x20010fc0

000105c4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   105c4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   105c6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   105c8:	4a0b      	ldr	r2, [pc, #44]	; (105f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   105ca:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   105cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   105ce:	bf1e      	ittt	ne
	movne	r1, #0
   105d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   105d2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   105d4:	f024 fae5 	blne	34ba2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   105d8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   105da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   105de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   105e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   105e6:	4905      	ldr	r1, [pc, #20]	; (105fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   105e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   105ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   105ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   105ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   105f2:	4903      	ldr	r1, [pc, #12]	; (10600 <_isr_wrapper+0x3c>)
	bx r1
   105f4:	4708      	bx	r1
   105f6:	0000      	.short	0x0000
	ldr r2, =_kernel
   105f8:	20010fc0 	.word	0x20010fc0
	ldr r1, =_sw_isr_table
   105fc:	00036114 	.word	0x00036114
	ldr r1, =z_arm_int_exit
   10600:	00010605 	.word	0x00010605

00010604 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10604:	4b04      	ldr	r3, [pc, #16]	; (10618 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10606:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10608:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1060a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1060c:	d003      	beq.n	10616 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1060e:	4903      	ldr	r1, [pc, #12]	; (1061c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10614:	600a      	str	r2, [r1, #0]

00010616 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10616:	4770      	bx	lr
	ldr r3, =_kernel
   10618:	20010fc0 	.word	0x20010fc0
	ldr r1, =_SCS_ICSR
   1061c:	e000ed04 	.word	0xe000ed04

00010620 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10624:	b086      	sub	sp, #24
   10626:	4606      	mov	r6, r0
   10628:	460d      	mov	r5, r1
   1062a:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1062c:	2402      	movs	r4, #2
   1062e:	4b4f      	ldr	r3, [pc, #316]	; (1076c <mem_manage_fault.constprop.0+0x14c>)
   10630:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10634:	617b      	str	r3, [r7, #20]
   10636:	484e      	ldr	r0, [pc, #312]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   10638:	613c      	str	r4, [r7, #16]
   1063a:	f107 0210 	add.w	r2, r7, #16
   1063e:	f01f fa4a 	bl	2fad6 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10642:	4b4c      	ldr	r3, [pc, #304]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   10644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10646:	06d9      	lsls	r1, r3, #27
   10648:	d57b      	bpl.n	10742 <mem_manage_fault.constprop.0+0x122>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
   1064a:	4b4b      	ldr	r3, [pc, #300]	; (10778 <mem_manage_fault.constprop.0+0x158>)
   1064c:	4848      	ldr	r0, [pc, #288]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   1064e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10652:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10656:	f107 0210 	add.w	r2, r7, #16
   1065a:	f01f fa3c 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
   1065e:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10660:	4b44      	ldr	r3, [pc, #272]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   10662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10664:	071a      	lsls	r2, r3, #28
   10666:	d50b      	bpl.n	10680 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   10668:	4b44      	ldr	r3, [pc, #272]	; (1077c <mem_manage_fault.constprop.0+0x15c>)
   1066a:	4841      	ldr	r0, [pc, #260]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   1066c:	617b      	str	r3, [r7, #20]
   1066e:	2302      	movs	r3, #2
   10670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10674:	613b      	str	r3, [r7, #16]
   10676:	f107 0210 	add.w	r2, r7, #16
   1067a:	f01f fa2c 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1067e:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10680:	4c3c      	ldr	r4, [pc, #240]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   10682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10684:	079b      	lsls	r3, r3, #30
   10686:	d523      	bpl.n	106d0 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
   10688:	46e8      	mov	r8, sp
   1068a:	4b3d      	ldr	r3, [pc, #244]	; (10780 <mem_manage_fault.constprop.0+0x160>)
   1068c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10690:	617b      	str	r3, [r7, #20]
   10692:	2302      	movs	r3, #2
   10694:	f107 0210 	add.w	r2, r7, #16
   10698:	613b      	str	r3, [r7, #16]
   1069a:	4835      	ldr	r0, [pc, #212]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   1069c:	f01f fa1b 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   106a0:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   106a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   106a4:	0611      	lsls	r1, r2, #24
   106a6:	d512      	bpl.n	106ce <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   106a8:	b088      	sub	sp, #32
   106aa:	466a      	mov	r2, sp
   106ac:	4935      	ldr	r1, [pc, #212]	; (10784 <mem_manage_fault.constprop.0+0x164>)
   106ae:	4830      	ldr	r0, [pc, #192]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   106b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   106b4:	2303      	movs	r3, #3
   106b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   106ba:	f842 3f10 	str.w	r3, [r2, #16]!
   106be:	f01f fa0a 	bl	2fad6 <z_log_msg_static_create.constprop.0>
   106c2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   106c4:	b11e      	cbz	r6, 106ce <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   106c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   106c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   106cc:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   106ce:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   106d0:	4b28      	ldr	r3, [pc, #160]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   106d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106d4:	07da      	lsls	r2, r3, #31
   106d6:	d50b      	bpl.n	106f0 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
   106d8:	4b2b      	ldr	r3, [pc, #172]	; (10788 <mem_manage_fault.constprop.0+0x168>)
   106da:	4825      	ldr	r0, [pc, #148]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   106dc:	617b      	str	r3, [r7, #20]
   106de:	2302      	movs	r3, #2
   106e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   106e4:	613b      	str	r3, [r7, #16]
   106e6:	f107 0210 	add.w	r2, r7, #16
   106ea:	f01f f9f4 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   106ee:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   106f0:	4b20      	ldr	r3, [pc, #128]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   106f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106f4:	069b      	lsls	r3, r3, #26
   106f6:	d50b      	bpl.n	10710 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
   106f8:	4b24      	ldr	r3, [pc, #144]	; (1078c <mem_manage_fault.constprop.0+0x16c>)
   106fa:	481d      	ldr	r0, [pc, #116]	; (10770 <mem_manage_fault.constprop.0+0x150>)
   106fc:	617b      	str	r3, [r7, #20]
   106fe:	2302      	movs	r3, #2
   10700:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10704:	613b      	str	r3, [r7, #16]
   10706:	f107 0210 	add.w	r2, r7, #16
   1070a:	f01f f9e4 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1070e:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10710:	4b18      	ldr	r3, [pc, #96]	; (10774 <mem_manage_fault.constprop.0+0x154>)
   10712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10714:	06d6      	lsls	r6, r2, #27
   10716:	d402      	bmi.n	1071e <mem_manage_fault.constprop.0+0xfe>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1071a:	0794      	lsls	r4, r2, #30
   1071c:	d513      	bpl.n	10746 <mem_manage_fault.constprop.0+0x126>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10720:	06d9      	lsls	r1, r3, #27
   10722:	d510      	bpl.n	10746 <mem_manage_fault.constprop.0+0x126>
   10724:	491a      	ldr	r1, [pc, #104]	; (10790 <mem_manage_fault.constprop.0+0x170>)
   10726:	f240 1361 	movw	r3, #353	; 0x161
   1072a:	4a1a      	ldr	r2, [pc, #104]	; (10794 <mem_manage_fault.constprop.0+0x174>)
   1072c:	481a      	ldr	r0, [pc, #104]	; (10798 <mem_manage_fault.constprop.0+0x178>)
   1072e:	f01e f911 	bl	2e954 <assert_print>
   10732:	481a      	ldr	r0, [pc, #104]	; (1079c <mem_manage_fault.constprop.0+0x17c>)
   10734:	f01e f90e 	bl	2e954 <assert_print>
   10738:	f240 1161 	movw	r1, #353	; 0x161
   1073c:	4815      	ldr	r0, [pc, #84]	; (10794 <mem_manage_fault.constprop.0+0x174>)
   1073e:	f01e f902 	bl	2e946 <assert_post_action>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   10742:	2010      	movs	r0, #16
   10744:	e78c      	b.n	10660 <mem_manage_fault.constprop.0+0x40>
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10746:	4b0b      	ldr	r3, [pc, #44]	; (10774 <mem_manage_fault.constprop.0+0x154>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   10748:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1074a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1074c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1074e:	bf42      	ittt	mi
   10750:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10752:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10756:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1075a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1075e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10760:	2300      	movs	r3, #0
   10762:	702b      	strb	r3, [r5, #0]
}
   10764:	46bd      	mov	sp, r7
   10766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1076a:	bf00      	nop
   1076c:	00039285 	.word	0x00039285
   10770:	000365c8 	.word	0x000365c8
   10774:	e000ed00 	.word	0xe000ed00
   10778:	0003929b 	.word	0x0003929b
   1077c:	000392ce 	.word	0x000392ce
   10780:	000392e1 	.word	0x000392e1
   10784:	000392f9 	.word	0x000392f9
   10788:	0003930f 	.word	0x0003930f
   1078c:	0003932e 	.word	0x0003932e
   10790:	00039397 	.word	0x00039397
   10794:	0003935d 	.word	0x0003935d
   10798:	000381c3 	.word	0x000381c3
   1079c:	000393e1 	.word	0x000393e1

000107a0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   107a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107a4:	b086      	sub	sp, #24
   107a6:	4606      	mov	r6, r0
   107a8:	460d      	mov	r5, r1
   107aa:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   107ac:	2402      	movs	r4, #2
   107ae:	4b47      	ldr	r3, [pc, #284]	; (108cc <bus_fault.constprop.0+0x12c>)
   107b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107b4:	617b      	str	r3, [r7, #20]
   107b6:	4846      	ldr	r0, [pc, #280]	; (108d0 <bus_fault.constprop.0+0x130>)
   107b8:	613c      	str	r4, [r7, #16]
   107ba:	f107 0210 	add.w	r2, r7, #16
   107be:	f01f f98a 	bl	2fad6 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   107c2:	4b44      	ldr	r3, [pc, #272]	; (108d4 <bus_fault.constprop.0+0x134>)
   107c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   107c6:	04d9      	lsls	r1, r3, #19
   107c8:	d56d      	bpl.n	108a6 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   107ca:	4b43      	ldr	r3, [pc, #268]	; (108d8 <bus_fault.constprop.0+0x138>)
   107cc:	4840      	ldr	r0, [pc, #256]	; (108d0 <bus_fault.constprop.0+0x130>)
   107ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107d2:	e9c7 4304 	strd	r4, r3, [r7, #16]
   107d6:	f107 0210 	add.w	r2, r7, #16
   107da:	f01f f97c 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   107de:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   107e0:	4b3c      	ldr	r3, [pc, #240]	; (108d4 <bus_fault.constprop.0+0x134>)
   107e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   107e4:	051a      	lsls	r2, r3, #20
   107e6:	d50b      	bpl.n	10800 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   107e8:	4b3c      	ldr	r3, [pc, #240]	; (108dc <bus_fault.constprop.0+0x13c>)
   107ea:	4839      	ldr	r0, [pc, #228]	; (108d0 <bus_fault.constprop.0+0x130>)
   107ec:	617b      	str	r3, [r7, #20]
   107ee:	2302      	movs	r3, #2
   107f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107f4:	613b      	str	r3, [r7, #16]
   107f6:	f107 0210 	add.w	r2, r7, #16
   107fa:	f01f f96c 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   107fe:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10800:	4c34      	ldr	r4, [pc, #208]	; (108d4 <bus_fault.constprop.0+0x134>)
   10802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10804:	059b      	lsls	r3, r3, #22
   10806:	d523      	bpl.n	10850 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   10808:	46e8      	mov	r8, sp
   1080a:	4b35      	ldr	r3, [pc, #212]	; (108e0 <bus_fault.constprop.0+0x140>)
   1080c:	4830      	ldr	r0, [pc, #192]	; (108d0 <bus_fault.constprop.0+0x130>)
   1080e:	617b      	str	r3, [r7, #20]
   10810:	2302      	movs	r3, #2
   10812:	f107 0210 	add.w	r2, r7, #16
   10816:	613b      	str	r3, [r7, #16]
   10818:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1081c:	f01f f95b 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10820:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10822:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10824:	0410      	lsls	r0, r2, #16
   10826:	d512      	bpl.n	1084e <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10828:	b088      	sub	sp, #32
   1082a:	466a      	mov	r2, sp
   1082c:	492d      	ldr	r1, [pc, #180]	; (108e4 <bus_fault.constprop.0+0x144>)
   1082e:	4828      	ldr	r0, [pc, #160]	; (108d0 <bus_fault.constprop.0+0x130>)
   10830:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10834:	2303      	movs	r3, #3
   10836:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1083a:	f842 3f10 	str.w	r3, [r2, #16]!
   1083e:	f01f f94a 	bl	2fad6 <z_log_msg_static_create.constprop.0>
   10842:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10844:	b11e      	cbz	r6, 1084e <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1084c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   1084e:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10850:	4b20      	ldr	r3, [pc, #128]	; (108d4 <bus_fault.constprop.0+0x134>)
   10852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10854:	0559      	lsls	r1, r3, #21
   10856:	d50b      	bpl.n	10870 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   10858:	4b23      	ldr	r3, [pc, #140]	; (108e8 <bus_fault.constprop.0+0x148>)
   1085a:	481d      	ldr	r0, [pc, #116]	; (108d0 <bus_fault.constprop.0+0x130>)
   1085c:	617b      	str	r3, [r7, #20]
   1085e:	2302      	movs	r3, #2
   10860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10864:	613b      	str	r3, [r7, #16]
   10866:	f107 0210 	add.w	r2, r7, #16
   1086a:	f01f f934 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1086e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10870:	4b18      	ldr	r3, [pc, #96]	; (108d4 <bus_fault.constprop.0+0x134>)
   10872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10874:	05d2      	lsls	r2, r2, #23
   10876:	d518      	bpl.n	108aa <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   10878:	4b1c      	ldr	r3, [pc, #112]	; (108ec <bus_fault.constprop.0+0x14c>)
   1087a:	4815      	ldr	r0, [pc, #84]	; (108d0 <bus_fault.constprop.0+0x130>)
   1087c:	617b      	str	r3, [r7, #20]
   1087e:	2302      	movs	r3, #2
   10880:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10884:	613b      	str	r3, [r7, #16]
   10886:	f107 0210 	add.w	r2, r7, #16
   1088a:	f01f f924 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   1088e:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10890:	4a10      	ldr	r2, [pc, #64]	; (108d4 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   10892:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10894:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10896:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1089a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1089c:	2300      	movs	r3, #0
   1089e:	702b      	strb	r3, [r5, #0]
}
   108a0:	46bd      	mov	sp, r7
   108a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   108a6:	2016      	movs	r0, #22
   108a8:	e79a      	b.n	107e0 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   108aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   108ac:	049b      	lsls	r3, r3, #18
   108ae:	d5ef      	bpl.n	10890 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   108b0:	4b0f      	ldr	r3, [pc, #60]	; (108f0 <bus_fault.constprop.0+0x150>)
   108b2:	4807      	ldr	r0, [pc, #28]	; (108d0 <bus_fault.constprop.0+0x130>)
   108b4:	617b      	str	r3, [r7, #20]
   108b6:	2302      	movs	r3, #2
   108b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   108bc:	613b      	str	r3, [r7, #16]
   108be:	f107 0210 	add.w	r2, r7, #16
   108c2:	f01f f908 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   108c6:	201c      	movs	r0, #28
   108c8:	e7e2      	b.n	10890 <bus_fault.constprop.0+0xf0>
   108ca:	bf00      	nop
   108cc:	00039445 	.word	0x00039445
   108d0:	000365c8 	.word	0x000365c8
   108d4:	e000ed00 	.word	0xe000ed00
   108d8:	0003945b 	.word	0x0003945b
   108dc:	000392ce 	.word	0x000392ce
   108e0:	0003946c 	.word	0x0003946c
   108e4:	00039485 	.word	0x00039485
   108e8:	0003949a 	.word	0x0003949a
   108ec:	000394b5 	.word	0x000394b5
   108f0:	0003932e 	.word	0x0003932e

000108f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   108f4:	b510      	push	{r4, lr}
   108f6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   108f8:	2402      	movs	r4, #2
   108fa:	4b3e      	ldr	r3, [pc, #248]	; (109f4 <usage_fault.constprop.0+0x100>)
   108fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10900:	483d      	ldr	r0, [pc, #244]	; (109f8 <usage_fault.constprop.0+0x104>)
   10902:	aa04      	add	r2, sp, #16
   10904:	9305      	str	r3, [sp, #20]
   10906:	9404      	str	r4, [sp, #16]
   10908:	f01f f8e5 	bl	2fad6 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1090c:	4b3b      	ldr	r3, [pc, #236]	; (109fc <usage_fault.constprop.0+0x108>)
   1090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10910:	0199      	lsls	r1, r3, #6
   10912:	d56c      	bpl.n	109ee <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   10914:	4b3a      	ldr	r3, [pc, #232]	; (10a00 <usage_fault.constprop.0+0x10c>)
   10916:	4838      	ldr	r0, [pc, #224]	; (109f8 <usage_fault.constprop.0+0x104>)
   10918:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1091c:	aa04      	add	r2, sp, #16
   1091e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   10922:	f01f f8d8 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   10926:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10928:	4b34      	ldr	r3, [pc, #208]	; (109fc <usage_fault.constprop.0+0x108>)
   1092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1092c:	01da      	lsls	r2, r3, #7
   1092e:	d50a      	bpl.n	10946 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   10930:	4b34      	ldr	r3, [pc, #208]	; (10a04 <usage_fault.constprop.0+0x110>)
   10932:	4831      	ldr	r0, [pc, #196]	; (109f8 <usage_fault.constprop.0+0x104>)
   10934:	9305      	str	r3, [sp, #20]
   10936:	2302      	movs	r3, #2
   10938:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1093c:	aa04      	add	r2, sp, #16
   1093e:	9304      	str	r3, [sp, #16]
   10940:	f01f f8c9 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   10944:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10946:	4b2d      	ldr	r3, [pc, #180]	; (109fc <usage_fault.constprop.0+0x108>)
   10948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1094a:	02db      	lsls	r3, r3, #11
   1094c:	d50a      	bpl.n	10964 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1094e:	2402      	movs	r4, #2
   10950:	4b2d      	ldr	r3, [pc, #180]	; (10a08 <usage_fault.constprop.0+0x114>)
   10952:	4829      	ldr	r0, [pc, #164]	; (109f8 <usage_fault.constprop.0+0x104>)
   10954:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10958:	aa04      	add	r2, sp, #16
   1095a:	9305      	str	r3, [sp, #20]
   1095c:	9404      	str	r4, [sp, #16]
   1095e:	f01f f8ba 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   10962:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10964:	4b25      	ldr	r3, [pc, #148]	; (109fc <usage_fault.constprop.0+0x108>)
   10966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10968:	031c      	lsls	r4, r3, #12
   1096a:	d50a      	bpl.n	10982 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   1096c:	4b27      	ldr	r3, [pc, #156]	; (10a0c <usage_fault.constprop.0+0x118>)
   1096e:	4822      	ldr	r0, [pc, #136]	; (109f8 <usage_fault.constprop.0+0x104>)
   10970:	9305      	str	r3, [sp, #20]
   10972:	2302      	movs	r3, #2
   10974:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10978:	aa04      	add	r2, sp, #16
   1097a:	9304      	str	r3, [sp, #16]
   1097c:	f01f f8ab 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   10980:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10982:	4b1e      	ldr	r3, [pc, #120]	; (109fc <usage_fault.constprop.0+0x108>)
   10984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10986:	0359      	lsls	r1, r3, #13
   10988:	d50a      	bpl.n	109a0 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1098a:	4b21      	ldr	r3, [pc, #132]	; (10a10 <usage_fault.constprop.0+0x11c>)
   1098c:	481a      	ldr	r0, [pc, #104]	; (109f8 <usage_fault.constprop.0+0x104>)
   1098e:	9305      	str	r3, [sp, #20]
   10990:	2302      	movs	r3, #2
   10992:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10996:	aa04      	add	r2, sp, #16
   10998:	9304      	str	r3, [sp, #16]
   1099a:	f01f f89c 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1099e:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   109a0:	4b16      	ldr	r3, [pc, #88]	; (109fc <usage_fault.constprop.0+0x108>)
   109a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   109a4:	039a      	lsls	r2, r3, #14
   109a6:	d50a      	bpl.n	109be <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   109a8:	4b1a      	ldr	r3, [pc, #104]	; (10a14 <usage_fault.constprop.0+0x120>)
   109aa:	4813      	ldr	r0, [pc, #76]	; (109f8 <usage_fault.constprop.0+0x104>)
   109ac:	9305      	str	r3, [sp, #20]
   109ae:	2302      	movs	r3, #2
   109b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109b4:	aa04      	add	r2, sp, #16
   109b6:	9304      	str	r3, [sp, #16]
   109b8:	f01f f88d 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   109bc:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   109be:	4b0f      	ldr	r3, [pc, #60]	; (109fc <usage_fault.constprop.0+0x108>)
   109c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   109c2:	03db      	lsls	r3, r3, #15
   109c4:	d50a      	bpl.n	109dc <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   109c6:	4b14      	ldr	r3, [pc, #80]	; (10a18 <usage_fault.constprop.0+0x124>)
   109c8:	480b      	ldr	r0, [pc, #44]	; (109f8 <usage_fault.constprop.0+0x104>)
   109ca:	9305      	str	r3, [sp, #20]
   109cc:	2302      	movs	r3, #2
   109ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109d2:	aa04      	add	r2, sp, #16
   109d4:	9304      	str	r3, [sp, #16]
   109d6:	f01f f87e 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   109da:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   109dc:	4a07      	ldr	r2, [pc, #28]	; (109fc <usage_fault.constprop.0+0x108>)
   109de:	6a93      	ldr	r3, [r2, #40]	; 0x28
   109e0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   109e4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   109e8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   109ea:	b006      	add	sp, #24
   109ec:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   109ee:	201d      	movs	r0, #29
   109f0:	e79a      	b.n	10928 <usage_fault.constprop.0+0x34>
   109f2:	bf00      	nop
   109f4:	000394cd 	.word	0x000394cd
   109f8:	000365c8 	.word	0x000365c8
   109fc:	e000ed00 	.word	0xe000ed00
   10a00:	000394e5 	.word	0x000394e5
   10a04:	000394f8 	.word	0x000394f8
   10a08:	00039512 	.word	0x00039512
   10a0c:	0003953c 	.word	0x0003953c
   10a10:	0003955a 	.word	0x0003955a
   10a14:	0003957f 	.word	0x0003957f
   10a18:	00039599 	.word	0x00039599

00010a1c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a20:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10a22:	4b93      	ldr	r3, [pc, #588]	; (10c70 <z_arm_fault+0x254>)
{
   10a24:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10a26:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   10a2a:	4688      	mov	r8, r1
   10a2c:	4616      	mov	r6, r2
   10a2e:	2300      	movs	r3, #0
   10a30:	af00      	add	r7, sp, #0
   10a32:	f3ca 0908 	ubfx	r9, sl, #0, #9
   10a36:	f383 8811 	msr	BASEPRI, r3
   10a3a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10a3e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10a42:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10a46:	d00e      	beq.n	10a66 <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   10a48:	498a      	ldr	r1, [pc, #552]	; (10c74 <z_arm_fault+0x258>)
   10a4a:	f240 433e 	movw	r3, #1086	; 0x43e
   10a4e:	4a8a      	ldr	r2, [pc, #552]	; (10c78 <z_arm_fault+0x25c>)
   10a50:	488a      	ldr	r0, [pc, #552]	; (10c7c <z_arm_fault+0x260>)
   10a52:	f01d ff7f 	bl	2e954 <assert_print>
   10a56:	488a      	ldr	r0, [pc, #552]	; (10c80 <z_arm_fault+0x264>)
   10a58:	f01d ff7c 	bl	2e954 <assert_print>
   10a5c:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   10a60:	4885      	ldr	r0, [pc, #532]	; (10c78 <z_arm_fault+0x25c>)
   10a62:	f01d ff70 	bl	2e946 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10a66:	f012 0401 	ands.w	r4, r2, #1
   10a6a:	d1ed      	bne.n	10a48 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   10a6c:	0653      	lsls	r3, r2, #25
   10a6e:	d404      	bmi.n	10a7a <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10a70:	0710      	lsls	r0, r2, #28
   10a72:	d40f      	bmi.n	10a94 <z_arm_fault+0x78>
			*nested_exc = true;
   10a74:	f04f 0801 	mov.w	r8, #1
   10a78:	e00f      	b.n	10a9a <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   10a7a:	4b82      	ldr	r3, [pc, #520]	; (10c84 <z_arm_fault+0x268>)
   10a7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a80:	61fb      	str	r3, [r7, #28]
   10a82:	2302      	movs	r3, #2
   10a84:	4880      	ldr	r0, [pc, #512]	; (10c88 <z_arm_fault+0x26c>)
   10a86:	61bb      	str	r3, [r7, #24]
   10a88:	f107 0218 	add.w	r2, r7, #24
   10a8c:	f01f f823 	bl	2fad6 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10a90:	0771      	lsls	r1, r6, #29
   10a92:	d500      	bpl.n	10a96 <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   10a94:	4645      	mov	r5, r8
	*nested_exc = false;
   10a96:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   10a9a:	2d00      	cmp	r5, #0
   10a9c:	d0d4      	beq.n	10a48 <z_arm_fault+0x2c>
	*recoverable = false;
   10a9e:	2300      	movs	r3, #0
   10aa0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   10aa2:	f1a9 0303 	sub.w	r3, r9, #3
   10aa6:	2b09      	cmp	r3, #9
   10aa8:	f200 80c1 	bhi.w	10c2e <z_arm_fault+0x212>
   10aac:	e8df f003 	tbb	[pc, r3]
   10ab0:	97b7b405 	.word	0x97b7b405
   10ab4:	bfbfbfbf 	.word	0xbfbfbfbf
   10ab8:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   10aba:	46e9      	mov	r9, sp
   10abc:	f04f 0a02 	mov.w	sl, #2
   10ac0:	4b72      	ldr	r3, [pc, #456]	; (10c8c <z_arm_fault+0x270>)
   10ac2:	f107 0218 	add.w	r2, r7, #24
   10ac6:	61fb      	str	r3, [r7, #28]
   10ac8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10acc:	486e      	ldr	r0, [pc, #440]	; (10c88 <z_arm_fault+0x26c>)
   10ace:	f8c7 a018 	str.w	sl, [r7, #24]
   10ad2:	f01f f800 	bl	2fad6 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   10ad6:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10ad8:	4e65      	ldr	r6, [pc, #404]	; (10c70 <z_arm_fault+0x254>)
	*recoverable = false;
   10ada:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10adc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10ade:	079a      	lsls	r2, r3, #30
   10ae0:	d50a      	bpl.n	10af8 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   10ae2:	4b6b      	ldr	r3, [pc, #428]	; (10c90 <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   10ae4:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   10ae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10aec:	4866      	ldr	r0, [pc, #408]	; (10c88 <z_arm_fault+0x26c>)
   10aee:	f107 0218 	add.w	r2, r7, #24
   10af2:	f01e fff0 	bl	2fad6 <z_log_msg_static_create.constprop.0>
}
   10af6:	e042      	b.n	10b7e <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   10af8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10afa:	2b00      	cmp	r3, #0
   10afc:	da01      	bge.n	10b02 <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   10afe:	4b65      	ldr	r3, [pc, #404]	; (10c94 <z_arm_fault+0x278>)
   10b00:	e7f0      	b.n	10ae4 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10b02:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10b04:	005b      	lsls	r3, r3, #1
   10b06:	d57a      	bpl.n	10bfe <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   10b08:	4b63      	ldr	r3, [pc, #396]	; (10c98 <z_arm_fault+0x27c>)
   10b0a:	f107 0218 	add.w	r2, r7, #24
   10b0e:	e9c7 a306 	strd	sl, r3, [r7, #24]
   10b12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b16:	485c      	ldr	r0, [pc, #368]	; (10c88 <z_arm_fault+0x26c>)
   10b18:	f01e ffdd 	bl	2fad6 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10b1c:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   10b1e:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10b24:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10b2a:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10b2e:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   10b30:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10b38:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10b3e:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   10b42:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10b46:	429a      	cmp	r2, r3
   10b48:	d009      	beq.n	10b5e <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   10b4a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10b4c:	b2db      	uxtb	r3, r3
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d038      	beq.n	10bc4 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   10b52:	2001      	movs	r0, #1
   10b54:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10b56:	f7ff fd63 	bl	10620 <mem_manage_fault.constprop.0>
   10b5a:	4604      	mov	r4, r0
		break;
   10b5c:	e00f      	b.n	10b7e <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   10b5e:	b088      	sub	sp, #32
   10b60:	682b      	ldr	r3, [r5, #0]
   10b62:	466a      	mov	r2, sp
   10b64:	494d      	ldr	r1, [pc, #308]	; (10c9c <z_arm_fault+0x280>)
   10b66:	4848      	ldr	r0, [pc, #288]	; (10c88 <z_arm_fault+0x26c>)
   10b68:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10b6c:	2303      	movs	r3, #3
   10b6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10b72:	f842 3f10 	str.w	r3, [r2, #16]!
   10b76:	f01e ffae 	bl	2fad6 <z_log_msg_static_create.constprop.0>
   10b7a:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   10b7c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10b7e:	79fb      	ldrb	r3, [r7, #7]
   10b80:	b9e3      	cbnz	r3, 10bbc <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10b82:	f107 0208 	add.w	r2, r7, #8
   10b86:	f105 0620 	add.w	r6, r5, #32
   10b8a:	4613      	mov	r3, r2
   10b8c:	6828      	ldr	r0, [r5, #0]
   10b8e:	6869      	ldr	r1, [r5, #4]
   10b90:	3508      	adds	r5, #8
   10b92:	c303      	stmia	r3!, {r0, r1}
   10b94:	42b5      	cmp	r5, r6
   10b96:	461a      	mov	r2, r3
   10b98:	d1f7      	bne.n	10b8a <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b9c:	f1b8 0f00 	cmp.w	r8, #0
   10ba0:	d061      	beq.n	10c66 <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10ba6:	b922      	cbnz	r2, 10bb2 <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10ba8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10bac:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10bb0:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   10bb2:	4620      	mov	r0, r4
   10bb4:	f107 0108 	add.w	r1, r7, #8
   10bb8:	f7ff fb8e 	bl	102d8 <z_arm_fatal_error>
}
   10bbc:	3728      	adds	r7, #40	; 0x28
   10bbe:	46bd      	mov	sp, r7
   10bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   10bc4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10bc6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   10bca:	d004      	beq.n	10bd6 <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   10bcc:	2001      	movs	r0, #1
   10bce:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   10bd0:	f7ff fde6 	bl	107a0 <bus_fault.constprop.0>
   10bd4:	e7c1      	b.n	10b5a <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   10bd6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10bdc:	d302      	bcc.n	10be4 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   10bde:	f7ff fe89 	bl	108f4 <usage_fault.constprop.0>
   10be2:	e7ba      	b.n	10b5a <z_arm_fault+0x13e>
			__ASSERT(0,
   10be4:	492e      	ldr	r1, [pc, #184]	; (10ca0 <z_arm_fault+0x284>)
   10be6:	f44f 7344 	mov.w	r3, #784	; 0x310
   10bea:	4a23      	ldr	r2, [pc, #140]	; (10c78 <z_arm_fault+0x25c>)
   10bec:	4823      	ldr	r0, [pc, #140]	; (10c7c <z_arm_fault+0x260>)
   10bee:	f01d feb1 	bl	2e954 <assert_print>
   10bf2:	482c      	ldr	r0, [pc, #176]	; (10ca4 <z_arm_fault+0x288>)
   10bf4:	f01d feae 	bl	2e954 <assert_print>
   10bf8:	f44f 7144 	mov.w	r1, #784	; 0x310
   10bfc:	e730      	b.n	10a60 <z_arm_fault+0x44>
		__ASSERT(0,
   10bfe:	4928      	ldr	r1, [pc, #160]	; (10ca0 <z_arm_fault+0x284>)
   10c00:	f44f 7345 	mov.w	r3, #788	; 0x314
   10c04:	4a1c      	ldr	r2, [pc, #112]	; (10c78 <z_arm_fault+0x25c>)
   10c06:	481d      	ldr	r0, [pc, #116]	; (10c7c <z_arm_fault+0x260>)
   10c08:	f01d fea4 	bl	2e954 <assert_print>
   10c0c:	4826      	ldr	r0, [pc, #152]	; (10ca8 <z_arm_fault+0x28c>)
   10c0e:	f01d fea1 	bl	2e954 <assert_print>
   10c12:	f44f 7145 	mov.w	r1, #788	; 0x314
   10c16:	e723      	b.n	10a60 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   10c18:	2000      	movs	r0, #0
   10c1a:	1df9      	adds	r1, r7, #7
   10c1c:	e79b      	b.n	10b56 <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   10c1e:	2000      	movs	r0, #0
   10c20:	1df9      	adds	r1, r7, #7
   10c22:	e7d5      	b.n	10bd0 <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   10c24:	4b21      	ldr	r3, [pc, #132]	; (10cac <z_arm_fault+0x290>)
   10c26:	61fb      	str	r3, [r7, #28]
   10c28:	2302      	movs	r3, #2
   10c2a:	61bb      	str	r3, [r7, #24]
   10c2c:	e75c      	b.n	10ae8 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   10c2e:	4a20      	ldr	r2, [pc, #128]	; (10cb0 <z_arm_fault+0x294>)
   10c30:	466e      	mov	r6, sp
   10c32:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   10c36:	b08a      	sub	sp, #40	; 0x28
   10c38:	4b1e      	ldr	r3, [pc, #120]	; (10cb4 <z_arm_fault+0x298>)
   10c3a:	bf18      	it	ne
   10c3c:	4613      	movne	r3, r2
   10c3e:	466a      	mov	r2, sp
   10c40:	491d      	ldr	r1, [pc, #116]	; (10cb8 <z_arm_fault+0x29c>)
   10c42:	4811      	ldr	r0, [pc, #68]	; (10c88 <z_arm_fault+0x26c>)
   10c44:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10c48:	f1a9 0310 	sub.w	r3, r9, #16
   10c4c:	61d3      	str	r3, [r2, #28]
   10c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   10c52:	8413      	strh	r3, [r2, #32]
   10c54:	4b19      	ldr	r3, [pc, #100]	; (10cbc <z_arm_fault+0x2a0>)
   10c56:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   10c5a:	f842 3f10 	str.w	r3, [r2, #16]!
   10c5e:	f01e ff3a 	bl	2fad6 <z_log_msg_static_create.constprop.0>
   10c62:	46b5      	mov	sp, r6
}
   10c64:	e78b      	b.n	10b7e <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10c66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10c6a:	f023 0301 	bic.w	r3, r3, #1
   10c6e:	e79f      	b.n	10bb0 <z_arm_fault+0x194>
   10c70:	e000ed00 	.word	0xe000ed00
   10c74:	000395f2 	.word	0x000395f2
   10c78:	0003935d 	.word	0x0003935d
   10c7c:	000381c3 	.word	0x000381c3
   10c80:	00039605 	.word	0x00039605
   10c84:	00039643 	.word	0x00039643
   10c88:	000365c8 	.word	0x000365c8
   10c8c:	00039666 	.word	0x00039666
   10c90:	0003967d 	.word	0x0003967d
   10c94:	0003969e 	.word	0x0003969e
   10c98:	000396ac 	.word	0x000396ac
   10c9c:	000396cb 	.word	0x000396cb
   10ca0:	0003c13d 	.word	0x0003c13d
   10ca4:	000396e7 	.word	0x000396e7
   10ca8:	0003970b 	.word	0x0003970b
   10cac:	0003973b 	.word	0x0003973b
   10cb0:	000395d9 	.word	0x000395d9
   10cb4:	000395c4 	.word	0x000395c4
   10cb8:	0003975f 	.word	0x0003975f
   10cbc:	01000004 	.word	0x01000004

00010cc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10cc0:	4b04      	ldr	r3, [pc, #16]	; (10cd4 <z_arm_fault_init+0x14>)
   10cc2:	695a      	ldr	r2, [r3, #20]
   10cc4:	f042 0210 	orr.w	r2, r2, #16
   10cc8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10cca:	695a      	ldr	r2, [r3, #20]
   10ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   10cd0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   10cd2:	4770      	bx	lr
   10cd4:	e000ed00 	.word	0xe000ed00

00010cd8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   10cd8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10cdc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   10ce0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   10ce2:	4672      	mov	r2, lr
	bl z_arm_fault
   10ce4:	f7ff fe9a 	bl	10a1c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   10ce8:	bd01      	pop	{r0, pc}
   10cea:	bf00      	nop

00010cec <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10cec:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cee:	2120      	movs	r1, #32
   10cf0:	4803      	ldr	r0, [pc, #12]	; (10d00 <z_arm_interrupt_init+0x14>)
   10cf2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10cf4:	3301      	adds	r3, #1
   10cf6:	2b41      	cmp	r3, #65	; 0x41
   10cf8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10cfc:	d1f9      	bne.n	10cf2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10cfe:	4770      	bx	lr
   10d00:	e000e100 	.word	0xe000e100

00010d04 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   10d04:	2000      	movs	r0, #0
    msr CONTROL, r0
   10d06:	f380 8814 	msr	CONTROL, r0
    isb
   10d0a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   10d0e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   10d10:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   10d14:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   10d18:	f7fd fa16 	bl	e148 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   10d1c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   10d1e:	490e      	ldr	r1, [pc, #56]	; (10d58 <__start+0x54>)
    str r0, [r1]
   10d20:	6008      	str	r0, [r1, #0]
    dsb
   10d22:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10d26:	480d      	ldr	r0, [pc, #52]	; (10d5c <__start+0x58>)
    msr msp, r0
   10d28:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   10d2c:	f000 f83e 	bl	10dac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10d30:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10d32:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   10d36:	480a      	ldr	r0, [pc, #40]	; (10d60 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   10d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   10d3c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10d3e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10d42:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10d46:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10d48:	4308      	orrs	r0, r1
    msr CONTROL, r0
   10d4a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10d4e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10d52:	f7ff fb8d 	bl	10470 <z_arm_prep_c>
   10d56:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   10d58:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10d5c:	20017720 	.word	0x20017720
    ldr r0, =z_interrupt_stacks
   10d60:	20014de0 	.word	0x20014de0

00010d64 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10d64:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10d68:	4905      	ldr	r1, [pc, #20]	; (10d80 <sys_arch_reboot+0x1c>)
   10d6a:	4b06      	ldr	r3, [pc, #24]	; (10d84 <sys_arch_reboot+0x20>)
   10d6c:	68ca      	ldr	r2, [r1, #12]
   10d6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10d72:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10d74:	60cb      	str	r3, [r1, #12]
   10d76:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10d7a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10d7c:	e7fd      	b.n	10d7a <sys_arch_reboot+0x16>
   10d7e:	bf00      	nop
   10d80:	e000ed00 	.word	0xe000ed00
   10d84:	05fa0004 	.word	0x05fa0004

00010d88 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   10d88:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   10d8a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   10d8c:	4906      	ldr	r1, [pc, #24]	; (10da8 <z_arm_clear_arm_mpu_config+0x20>)
   10d8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   10d92:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   10d96:	4293      	cmp	r3, r2
   10d98:	db00      	blt.n	10d9c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   10d9a:	4770      	bx	lr
  mpu->RNR = rnr;
   10d9c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   10da0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   10da4:	3301      	adds	r3, #1
   10da6:	e7f6      	b.n	10d96 <z_arm_clear_arm_mpu_config+0xe>
   10da8:	e000ed00 	.word	0xe000ed00

00010dac <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   10dac:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10dae:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   10db0:	2400      	movs	r4, #0
   10db2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   10db6:	f7ff ffe7 	bl	10d88 <z_arm_clear_arm_mpu_config>
   10dba:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   10dbc:	f04f 30ff 	mov.w	r0, #4294967295
   10dc0:	4a0c      	ldr	r2, [pc, #48]	; (10df4 <z_arm_init_arch_hw_at_boot+0x48>)
   10dc2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10dc6:	3301      	adds	r3, #1
   10dc8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   10dca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10dce:	d1f8      	bne.n	10dc2 <z_arm_init_arch_hw_at_boot+0x16>
   10dd0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10dd2:	f04f 30ff 	mov.w	r0, #4294967295
   10dd6:	4a07      	ldr	r2, [pc, #28]	; (10df4 <z_arm_init_arch_hw_at_boot+0x48>)
   10dd8:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10ddc:	3301      	adds	r3, #1
   10dde:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10de0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10de4:	d1f8      	bne.n	10dd8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   10de6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   10de8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10dec:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   10df0:	bd10      	pop	{r4, pc}
   10df2:	bf00      	nop
   10df4:	e000e100 	.word	0xe000e100

00010df8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   10df8:	4b08      	ldr	r3, [pc, #32]	; (10e1c <z_impl_k_thread_abort+0x24>)
   10dfa:	689b      	ldr	r3, [r3, #8]
   10dfc:	4283      	cmp	r3, r0
   10dfe:	d10b      	bne.n	10e18 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10e00:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   10e04:	b143      	cbz	r3, 10e18 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10e06:	4b06      	ldr	r3, [pc, #24]	; (10e20 <z_impl_k_thread_abort+0x28>)
   10e08:	685a      	ldr	r2, [r3, #4]
   10e0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10e0e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   10e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   10e16:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   10e18:	f019 be22 	b.w	2aa60 <z_thread_abort>
   10e1c:	20010fc0 	.word	0x20010fc0
   10e20:	e000ed00 	.word	0xe000ed00

00010e24 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10e26:	4c09      	ldr	r4, [pc, #36]	; (10e4c <z_arm_configure_static_mpu_regions+0x28>)
   10e28:	4a09      	ldr	r2, [pc, #36]	; (10e50 <z_arm_configure_static_mpu_regions+0x2c>)
   10e2a:	4623      	mov	r3, r4
   10e2c:	2101      	movs	r1, #1
   10e2e:	4809      	ldr	r0, [pc, #36]	; (10e54 <z_arm_configure_static_mpu_regions+0x30>)
   10e30:	f000 f92a 	bl	11088 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10e34:	2300      	movs	r3, #0
   10e36:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   10e38:	4b07      	ldr	r3, [pc, #28]	; (10e58 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10e3a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   10e3c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10e3e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10e40:	9301      	str	r3, [sp, #4]
   10e42:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10e44:	f000 f944 	bl	110d0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10e48:	b004      	add	sp, #16
   10e4a:	bd10      	pop	{r4, pc}
   10e4c:	20040000 	.word	0x20040000
   10e50:	2000c580 	.word	0x2000c580
   10e54:	00036a28 	.word	0x00036a28
   10e58:	2000d1f0 	.word	0x2000d1f0

00010e5c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10e5c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   10e5e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10e60:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10e62:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10e66:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   10e6a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10e6c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10e6e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10e70:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   10e74:	4905      	ldr	r1, [pc, #20]	; (10e8c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10e76:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10e7a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   10e7e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   10e82:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   10e86:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10e8a:	bd10      	pop	{r4, pc}
   10e8c:	e000ed00 	.word	0xe000ed00

00010e90 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   10e90:	b580      	push	{r7, lr}
   10e92:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10e94:	b088      	sub	sp, #32
   10e96:	466a      	mov	r2, sp
   10e98:	4b07      	ldr	r3, [pc, #28]	; (10eb8 <region_allocate_and_init.part.0+0x28>)
   10e9a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10e9e:	2303      	movs	r3, #3
   10ea0:	f842 3f10 	str.w	r3, [r2, #16]!
   10ea4:	2300      	movs	r3, #0
   10ea6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10eaa:	4804      	ldr	r0, [pc, #16]	; (10ebc <region_allocate_and_init.part.0+0x2c>)
   10eac:	f7fd fcb6 	bl	e81c <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10eb0:	f06f 0015 	mvn.w	r0, #21
   10eb4:	46bd      	mov	sp, r7
   10eb6:	bd80      	pop	{r7, pc}
   10eb8:	00039776 	.word	0x00039776
   10ebc:	000364e8 	.word	0x000364e8

00010ec0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ec4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10ec6:	4606      	mov	r6, r0
   10ec8:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10ecc:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   10ece:	4d5f      	ldr	r5, [pc, #380]	; (1104c <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10ed0:	af00      	add	r7, sp, #0
   10ed2:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   10ed4:	687b      	ldr	r3, [r7, #4]
   10ed6:	4599      	cmp	r9, r3
   10ed8:	da35      	bge.n	10f46 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   10eda:	f8d6 8004 	ldr.w	r8, [r6, #4]
   10ede:	f1b8 0f00 	cmp.w	r8, #0
   10ee2:	d054      	beq.n	10f8e <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   10ee4:	f1b8 0f1f 	cmp.w	r8, #31
   10ee8:	d91b      	bls.n	10f22 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   10eea:	f018 0f1f 	tst.w	r8, #31
   10eee:	d118      	bne.n	10f22 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   10ef0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   10ef4:	f01b 0f1f 	tst.w	fp, #31
   10ef8:	d113      	bne.n	10f22 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10efa:	4658      	mov	r0, fp
   10efc:	f01e fdf0 	bl	2fae0 <arm_cmse_mpu_region_get>
   10f00:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10f02:	eb08 000b 	add.w	r0, r8, fp
   10f06:	3801      	subs	r0, #1
   10f08:	f01e fdea 	bl	2fae0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10f0c:	4582      	cmp	sl, r0
   10f0e:	d01f      	beq.n	10f50 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   10f10:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10f14:	466c      	mov	r4, sp
   10f16:	b088      	sub	sp, #32
   10f18:	466a      	mov	r2, sp
   10f1a:	494d      	ldr	r1, [pc, #308]	; (11050 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   10f1c:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   10f20:	e005      	b.n	10f2e <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10f22:	466c      	mov	r4, sp
   10f24:	b088      	sub	sp, #32
   10f26:	466a      	mov	r2, sp
   10f28:	4b4a      	ldr	r3, [pc, #296]	; (11054 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   10f2a:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   10f2e:	2303      	movs	r3, #3
   10f30:	f842 3f10 	str.w	r3, [r2, #16]!
   10f34:	2300      	movs	r3, #0
   10f36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10f3a:	4847      	ldr	r0, [pc, #284]	; (11058 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   10f3c:	f7fd fc6e 	bl	e81c <z_impl_z_log_msg_static_create>
   10f40:	46a5      	mov	sp, r4
			return -EINVAL;
   10f42:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   10f46:	4620      	mov	r0, r4
   10f48:	371c      	adds	r7, #28
   10f4a:	46bd      	mov	sp, r7
   10f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10f50:	f11a 0f16 	cmn.w	sl, #22
   10f54:	d0de      	beq.n	10f14 <mpu_configure_regions_and_partition.constprop.0+0x54>
   10f56:	4554      	cmp	r4, sl
   10f58:	dddc      	ble.n	10f14 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   10f5a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   10f5e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   10f62:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   10f66:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10f6a:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10f6e:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10f72:	e9d6 2100 	ldrd	r2, r1, [r6]
   10f76:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   10f78:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10f7a:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   10f7e:	d11e      	bne.n	10fbe <mpu_configure_regions_and_partition.constprop.0+0xfe>
   10f80:	45d8      	cmp	r8, fp
   10f82:	d108      	bne.n	10f96 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   10f84:	4631      	mov	r1, r6
   10f86:	fa5f f08a 	uxtb.w	r0, sl
   10f8a:	f01e fdb2 	bl	2faf2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10f8e:	f109 0901 	add.w	r9, r9, #1
   10f92:	360c      	adds	r6, #12
   10f94:	e79e      	b.n	10ed4 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   10f96:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   10f9a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   10f9e:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   10fa2:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   10fa6:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   10fa8:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   10faa:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   10fae:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   10fb0:	f01e fd9f 	bl	2faf2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10fb4:	f110 0f16 	cmn.w	r0, #22
   10fb8:	d0c3      	beq.n	10f42 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   10fba:	1c44      	adds	r4, r0, #1
   10fbc:	e7e7      	b.n	10f8e <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   10fbe:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   10fc0:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   10fc2:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10fc4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   10fc8:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   10fcc:	d108      	bne.n	10fe0 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   10fce:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   10fd2:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   10fd4:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10fd8:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   10fda:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   10fde:	e7e7      	b.n	10fb0 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   10fe0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   10fe4:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10fe8:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   10fea:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   10fee:	4631      	mov	r1, r6
   10ff0:	f01e fd7f 	bl	2faf2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10ff4:	f110 0f16 	cmn.w	r0, #22
   10ff8:	d0a3      	beq.n	10f42 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   10ffa:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   10ffe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11002:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11004:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   11008:	f362 0304 	bfi	r3, r2, #0, #5
   1100c:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1100e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11012:	7c3a      	ldrb	r2, [r7, #16]
   11014:	085b      	lsrs	r3, r3, #1
   11016:	f363 1247 	bfi	r2, r3, #5, #3
   1101a:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   1101c:	e9d6 3200 	ldrd	r3, r2, [r6]
   11020:	4413      	add	r3, r2
   11022:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11024:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   11028:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1102a:	4443      	add	r3, r8
   1102c:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   11030:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   11032:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   11036:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   11038:	617b      	str	r3, [r7, #20]
   1103a:	d902      	bls.n	11042 <mpu_configure_regions_and_partition.constprop.0+0x182>
   1103c:	f7ff ff28 	bl	10e90 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   11040:	e7b8      	b.n	10fb4 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   11042:	f107 0108 	add.w	r1, r7, #8
   11046:	f7ff ff09 	bl	10e5c <region_init>
   1104a:	e7b6      	b.n	10fba <mpu_configure_regions_and_partition.constprop.0+0xfa>
   1104c:	e000ed00 	.word	0xe000ed00
   11050:	000397bf 	.word	0x000397bf
   11054:	0003979c 	.word	0x0003979c
   11058:	000364e8 	.word	0x000364e8

0001105c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1105c:	2205      	movs	r2, #5
   1105e:	4b04      	ldr	r3, [pc, #16]	; (11070 <arm_core_mpu_enable+0x14>)
   11060:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11064:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11068:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1106c:	4770      	bx	lr
   1106e:	bf00      	nop
   11070:	e000ed00 	.word	0xe000ed00

00011074 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11074:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11078:	2200      	movs	r2, #0
   1107a:	4b02      	ldr	r3, [pc, #8]	; (11084 <arm_core_mpu_disable+0x10>)
   1107c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11080:	4770      	bx	lr
   11082:	bf00      	nop
   11084:	e000ed00 	.word	0xe000ed00

00011088 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11088:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1108a:	4d0c      	ldr	r5, [pc, #48]	; (110bc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1108c:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1108e:	782a      	ldrb	r2, [r5, #0]
   11090:	f7ff ff16 	bl	10ec0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11094:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11096:	3016      	adds	r0, #22
   11098:	d10f      	bne.n	110ba <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1109a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1109e:	4a08      	ldr	r2, [pc, #32]	; (110c0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   110a0:	4908      	ldr	r1, [pc, #32]	; (110c4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   110a2:	4809      	ldr	r0, [pc, #36]	; (110c8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   110a4:	f01d fc56 	bl	2e954 <assert_print>
   110a8:	4621      	mov	r1, r4
   110aa:	4808      	ldr	r0, [pc, #32]	; (110cc <arm_core_mpu_configure_static_mpu_regions+0x44>)
   110ac:	f01d fc52 	bl	2e954 <assert_print>
   110b0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   110b4:	4802      	ldr	r0, [pc, #8]	; (110c0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   110b6:	f01d fc46 	bl	2e946 <assert_post_action>
			regions_num);
	}
}
   110ba:	bd38      	pop	{r3, r4, r5, pc}
   110bc:	200111f0 	.word	0x200111f0
   110c0:	000397e2 	.word	0x000397e2
   110c4:	0003c13d 	.word	0x0003c13d
   110c8:	000381c3 	.word	0x000381c3
   110cc:	00039819 	.word	0x00039819

000110d0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   110d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110d4:	4e31      	ldr	r6, [pc, #196]	; (1119c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   110d6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   110d8:	4605      	mov	r5, r0
   110da:	f04f 0800 	mov.w	r8, #0
   110de:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   110e0:	4f2f      	ldr	r7, [pc, #188]	; (111a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   110e2:	45c8      	cmp	r8, r9
   110e4:	db02      	blt.n	110ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   110e6:	b003      	add	sp, #12
   110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   110ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
   110f0:	f1ba 0f00 	cmp.w	sl, #0
   110f4:	d04c      	beq.n	11190 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   110f6:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   110f8:	4608      	mov	r0, r1
   110fa:	9101      	str	r1, [sp, #4]
   110fc:	f01e fcf0 	bl	2fae0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11100:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11102:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11104:	eb0a 0001 	add.w	r0, sl, r1
   11108:	3801      	subs	r0, #1
   1110a:	f01e fce9 	bl	2fae0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1110e:	4284      	cmp	r4, r0
   11110:	f04f 0214 	mov.w	r2, #20
   11114:	4b23      	ldr	r3, [pc, #140]	; (111a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   11116:	d015      	beq.n	11144 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   11118:	fb02 f308 	mul.w	r3, r2, r8
   1111c:	f06f 0215 	mvn.w	r2, #21
   11120:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11124:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11128:	4a1f      	ldr	r2, [pc, #124]	; (111a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1112a:	4920      	ldr	r1, [pc, #128]	; (111ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   1112c:	4820      	ldr	r0, [pc, #128]	; (111b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   1112e:	f01d fc11 	bl	2e954 <assert_print>
   11132:	4649      	mov	r1, r9
   11134:	481f      	ldr	r0, [pc, #124]	; (111b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   11136:	f01d fc0d 	bl	2e954 <assert_print>
   1113a:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1113e:	481a      	ldr	r0, [pc, #104]	; (111a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11140:	f01d fc01 	bl	2e946 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11144:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11148:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1114a:	d0eb      	beq.n	11124 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1114c:	7819      	ldrb	r1, [r3, #0]
   1114e:	42a1      	cmp	r1, r4
   11150:	dde8      	ble.n	11124 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   11152:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11156:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1115a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1115e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11162:	f100 0108 	add.w	r1, r0, #8
   11166:	7b00      	ldrb	r0, [r0, #12]
   11168:	f364 0004 	bfi	r0, r4, #0, #5
   1116c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1116e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11172:	790c      	ldrb	r4, [r1, #4]
   11174:	0840      	lsrs	r0, r0, #1
   11176:	f360 1447 	bfi	r4, r0, #5, #3
   1117a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   1117c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11180:	f021 011f 	bic.w	r1, r1, #31
   11184:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   11186:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1118a:	f021 011f 	bic.w	r1, r1, #31
   1118e:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11190:	f108 0801 	add.w	r8, r8, #1
   11194:	3614      	adds	r6, #20
   11196:	350c      	adds	r5, #12
   11198:	e7a3      	b.n	110e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1119a:	bf00      	nop
   1119c:	2000fb3c 	.word	0x2000fb3c
   111a0:	e000ed00 	.word	0xe000ed00
   111a4:	200111f0 	.word	0x200111f0
   111a8:	000397e2 	.word	0x000397e2
   111ac:	0003c13d 	.word	0x0003c13d
   111b0:	000381c3 	.word	0x000381c3
   111b4:	00039845 	.word	0x00039845

000111b8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   111b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   111ba:	4d1f      	ldr	r5, [pc, #124]	; (11238 <z_arm_mpu_init+0x80>)
   111bc:	682c      	ldr	r4, [r5, #0]
   111be:	2c10      	cmp	r4, #16
   111c0:	d910      	bls.n	111e4 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   111c2:	f240 1351 	movw	r3, #337	; 0x151
   111c6:	4a1d      	ldr	r2, [pc, #116]	; (1123c <z_arm_mpu_init+0x84>)
   111c8:	491d      	ldr	r1, [pc, #116]	; (11240 <z_arm_mpu_init+0x88>)
   111ca:	481e      	ldr	r0, [pc, #120]	; (11244 <z_arm_mpu_init+0x8c>)
   111cc:	f01d fbc2 	bl	2e954 <assert_print>
   111d0:	4621      	mov	r1, r4
   111d2:	2210      	movs	r2, #16
   111d4:	481c      	ldr	r0, [pc, #112]	; (11248 <z_arm_mpu_init+0x90>)
   111d6:	f01d fbbd 	bl	2e954 <assert_print>
   111da:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   111de:	4817      	ldr	r0, [pc, #92]	; (1123c <z_arm_mpu_init+0x84>)
   111e0:	f01d fbb1 	bl	2e946 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   111e4:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   111e6:	f7ff ff45 	bl	11074 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   111ea:	4b18      	ldr	r3, [pc, #96]	; (1124c <z_arm_mpu_init+0x94>)
   111ec:	4a18      	ldr	r2, [pc, #96]	; (11250 <z_arm_mpu_init+0x98>)
   111ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   111f2:	4284      	cmp	r4, r0
   111f4:	d117      	bne.n	11226 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   111f6:	4b17      	ldr	r3, [pc, #92]	; (11254 <z_arm_mpu_init+0x9c>)
   111f8:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   111fa:	f7ff ff2f 	bl	1105c <arm_core_mpu_enable>
	__ASSERT(
   111fe:	4b13      	ldr	r3, [pc, #76]	; (1124c <z_arm_mpu_init+0x94>)
   11200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11204:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11208:	2b10      	cmp	r3, #16
   1120a:	d013      	beq.n	11234 <z_arm_mpu_init+0x7c>
   1120c:	4912      	ldr	r1, [pc, #72]	; (11258 <z_arm_mpu_init+0xa0>)
   1120e:	f240 13bb 	movw	r3, #443	; 0x1bb
   11212:	4a0a      	ldr	r2, [pc, #40]	; (1123c <z_arm_mpu_init+0x84>)
   11214:	480b      	ldr	r0, [pc, #44]	; (11244 <z_arm_mpu_init+0x8c>)
   11216:	f01d fb9d 	bl	2e954 <assert_print>
   1121a:	4810      	ldr	r0, [pc, #64]	; (1125c <z_arm_mpu_init+0xa4>)
   1121c:	f01d fb9a 	bl	2e954 <assert_print>
   11220:	f240 11bb 	movw	r1, #443	; 0x1bb
   11224:	e7db      	b.n	111de <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11226:	6869      	ldr	r1, [r5, #4]
   11228:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1122c:	f7ff fe16 	bl	10e5c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11230:	3001      	adds	r0, #1
   11232:	e7de      	b.n	111f2 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11234:	2000      	movs	r0, #0
   11236:	bd38      	pop	{r3, r4, r5, pc}
   11238:	00036a34 	.word	0x00036a34
   1123c:	000397e2 	.word	0x000397e2
   11240:	0003c13d 	.word	0x0003c13d
   11244:	000381c3 	.word	0x000381c3
   11248:	00039874 	.word	0x00039874
   1124c:	e000ed00 	.word	0xe000ed00
   11250:	0044ffaa 	.word	0x0044ffaa
   11254:	200111f0 	.word	0x200111f0
   11258:	000398a8 	.word	0x000398a8
   1125c:	000398f9 	.word	0x000398f9

00011260 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(void)
{
   11260:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11262:	4b0b      	ldr	r3, [pc, #44]	; (11290 <malloc_prepare+0x30>)
   11264:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11268:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1126c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11270:	d20c      	bcs.n	1128c <malloc_prepare+0x2c>
   11272:	4908      	ldr	r1, [pc, #32]	; (11294 <malloc_prepare+0x34>)
   11274:	2380      	movs	r3, #128	; 0x80
   11276:	4a08      	ldr	r2, [pc, #32]	; (11298 <malloc_prepare+0x38>)
   11278:	4808      	ldr	r0, [pc, #32]	; (1129c <malloc_prepare+0x3c>)
   1127a:	f01d fb6b 	bl	2e954 <assert_print>
   1127e:	4808      	ldr	r0, [pc, #32]	; (112a0 <malloc_prepare+0x40>)
   11280:	f01d fb68 	bl	2e954 <assert_print>
   11284:	2180      	movs	r1, #128	; 0x80
   11286:	4804      	ldr	r0, [pc, #16]	; (11298 <malloc_prepare+0x38>)
   11288:	f01d fb5d 	bl	2e946 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1128c:	2000      	movs	r0, #0
   1128e:	bd08      	pop	{r3, pc}
   11290:	2001cc84 	.word	0x2001cc84
   11294:	0003994a 	.word	0x0003994a
   11298:	0003991a 	.word	0x0003991a
   1129c:	000381c3 	.word	0x000381c3
   112a0:	00039991 	.word	0x00039991

000112a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   112a4:	4b01      	ldr	r3, [pc, #4]	; (112ac <__stdout_hook_install+0x8>)
   112a6:	6018      	str	r0, [r3, #0]
}
   112a8:	4770      	bx	lr
   112aa:	bf00      	nop
   112ac:	2000c82c 	.word	0x2000c82c

000112b0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112b2:	4606      	mov	r6, r0
   112b4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   112b6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   112b8:	4f06      	ldr	r7, [pc, #24]	; (112d4 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   112ba:	42ac      	cmp	r4, r5
   112bc:	da08      	bge.n	112d0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   112be:	683b      	ldr	r3, [r7, #0]
   112c0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   112c2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   112c4:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   112c6:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   112ca:	d001      	beq.n	112d0 <z_impl_zephyr_read_stdin+0x20>
   112cc:	280d      	cmp	r0, #13
   112ce:	d1f4      	bne.n	112ba <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   112d0:	4620      	mov	r0, r4
   112d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112d4:	2000c828 	.word	0x2000c828

000112d8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   112d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112da:	460d      	mov	r5, r1
   112dc:	4f09      	ldr	r7, [pc, #36]	; (11304 <z_impl_zephyr_write_stdout+0x2c>)
   112de:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   112e0:	f1c0 0401 	rsb	r4, r0, #1
   112e4:	19a3      	adds	r3, r4, r6
   112e6:	429d      	cmp	r5, r3
   112e8:	dc01      	bgt.n	112ee <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   112ea:	4628      	mov	r0, r5
   112ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   112ee:	7873      	ldrb	r3, [r6, #1]
   112f0:	2b0a      	cmp	r3, #10
   112f2:	d102      	bne.n	112fa <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   112f4:	200d      	movs	r0, #13
   112f6:	683b      	ldr	r3, [r7, #0]
   112f8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   112fa:	683b      	ldr	r3, [r7, #0]
   112fc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11300:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11302:	e7ef      	b.n	112e4 <z_impl_zephyr_write_stdout+0xc>
   11304:	2000c82c 	.word	0x2000c82c

00011308 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11308:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1130a:	2105      	movs	r1, #5
   1130c:	4801      	ldr	r0, [pc, #4]	; (11314 <_exit+0xc>)
   1130e:	f7ff ffe3 	bl	112d8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11312:	e7fe      	b.n	11312 <_exit+0xa>
   11314:	00039a18 	.word	0x00039a18

00011318 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11318:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1131a:	4c07      	ldr	r4, [pc, #28]	; (11338 <_sbrk+0x20>)
   1131c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1131e:	18c2      	adds	r2, r0, r3
   11320:	4806      	ldr	r0, [pc, #24]	; (1133c <_sbrk+0x24>)
   11322:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11326:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1132a:	428a      	cmp	r2, r1
		heap_sz += count;
   1132c:	bf36      	itet	cc
   1132e:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11330:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11334:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11336:	bd10      	pop	{r4, pc}
   11338:	2000fb50 	.word	0x2000fb50
   1133c:	2001cc84 	.word	0x2001cc84

00011340 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11340:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11342:	4604      	mov	r4, r0
   11344:	b958      	cbnz	r0, 1135e <__retarget_lock_init_recursive+0x1e>
   11346:	4911      	ldr	r1, [pc, #68]	; (1138c <__retarget_lock_init_recursive+0x4c>)
   11348:	f240 1379 	movw	r3, #377	; 0x179
   1134c:	4a10      	ldr	r2, [pc, #64]	; (11390 <__retarget_lock_init_recursive+0x50>)
   1134e:	4811      	ldr	r0, [pc, #68]	; (11394 <__retarget_lock_init_recursive+0x54>)
   11350:	f01d fb00 	bl	2e954 <assert_print>
   11354:	f240 1179 	movw	r1, #377	; 0x179
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11358:	480d      	ldr	r0, [pc, #52]	; (11390 <__retarget_lock_init_recursive+0x50>)
   1135a:	f01d faf4 	bl	2e946 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   1135e:	2014      	movs	r0, #20
   11360:	f01a fc24 	bl	2bbac <malloc>
   11364:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11366:	b960      	cbnz	r0, 11382 <__retarget_lock_init_recursive+0x42>
   11368:	490b      	ldr	r1, [pc, #44]	; (11398 <__retarget_lock_init_recursive+0x58>)
   1136a:	f240 1381 	movw	r3, #385	; 0x181
   1136e:	4a08      	ldr	r2, [pc, #32]	; (11390 <__retarget_lock_init_recursive+0x50>)
   11370:	4808      	ldr	r0, [pc, #32]	; (11394 <__retarget_lock_init_recursive+0x54>)
   11372:	f01d faef 	bl	2e954 <assert_print>
   11376:	4809      	ldr	r0, [pc, #36]	; (1139c <__retarget_lock_init_recursive+0x5c>)
   11378:	f01d faec 	bl	2e954 <assert_print>
   1137c:	f240 1181 	movw	r1, #385	; 0x181
   11380:	e7ea      	b.n	11358 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   11382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11386:	f023 bc1b 	b.w	34bc0 <z_impl_k_mutex_init>
   1138a:	bf00      	nop
   1138c:	00039a1f 	.word	0x00039a1f
   11390:	0003991a 	.word	0x0003991a
   11394:	000381c3 	.word	0x000381c3
   11398:	00039a1e 	.word	0x00039a1e
   1139c:	00039a5a 	.word	0x00039a5a

000113a0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   113a0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   113a2:	b958      	cbnz	r0, 113bc <__retarget_lock_acquire_recursive+0x1c>
   113a4:	4909      	ldr	r1, [pc, #36]	; (113cc <__retarget_lock_acquire_recursive+0x2c>)
   113a6:	480a      	ldr	r0, [pc, #40]	; (113d0 <__retarget_lock_acquire_recursive+0x30>)
   113a8:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   113ac:	4a09      	ldr	r2, [pc, #36]	; (113d4 <__retarget_lock_acquire_recursive+0x34>)
   113ae:	f01d fad1 	bl	2e954 <assert_print>
   113b2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   113b6:	4807      	ldr	r0, [pc, #28]	; (113d4 <__retarget_lock_acquire_recursive+0x34>)
   113b8:	f01d fac5 	bl	2e946 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   113bc:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   113c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113c4:	f04f 33ff 	mov.w	r3, #4294967295
   113c8:	f017 ba5c 	b.w	28884 <z_impl_k_mutex_lock>
   113cc:	00039a1f 	.word	0x00039a1f
   113d0:	000381c3 	.word	0x000381c3
   113d4:	0003991a 	.word	0x0003991a

000113d8 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   113d8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   113da:	b958      	cbnz	r0, 113f4 <__retarget_lock_release_recursive+0x1c>
   113dc:	4907      	ldr	r1, [pc, #28]	; (113fc <__retarget_lock_release_recursive+0x24>)
   113de:	4808      	ldr	r0, [pc, #32]	; (11400 <__retarget_lock_release_recursive+0x28>)
   113e0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   113e4:	4a07      	ldr	r2, [pc, #28]	; (11404 <__retarget_lock_release_recursive+0x2c>)
   113e6:	f01d fab5 	bl	2e954 <assert_print>
   113ea:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   113ee:	4805      	ldr	r0, [pc, #20]	; (11404 <__retarget_lock_release_recursive+0x2c>)
   113f0:	f01d faa9 	bl	2e946 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   113f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   113f8:	f017 bb14 	b.w	28a24 <z_impl_k_mutex_unlock>
   113fc:	00039a1f 	.word	0x00039a1f
   11400:	000381c3 	.word	0x000381c3
   11404:	0003991a 	.word	0x0003991a

00011408 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11408:	b508      	push	{r3, lr}
   1140a:	211d      	movs	r1, #29
   1140c:	4804      	ldr	r0, [pc, #16]	; (11420 <__chk_fail+0x18>)
   1140e:	f7ff ff63 	bl	112d8 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11412:	4040      	eors	r0, r0
   11414:	f380 8811 	msr	BASEPRI, r0
   11418:	f04f 0003 	mov.w	r0, #3
   1141c:	df02      	svc	2
	CODE_UNREACHABLE;
   1141e:	bf00      	nop
   11420:	00039a7d 	.word	0x00039a7d

00011424 <gpio_pin_set.constprop.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   11424:	b510      	push	{r4, lr}
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   11426:	4b13      	ldr	r3, [pc, #76]	; (11474 <gpio_pin_set.constprop.0+0x50>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11428:	6859      	ldr	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1142a:	691a      	ldr	r2, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1142c:	6809      	ldr	r1, [r1, #0]
   1142e:	0209      	lsls	r1, r1, #8
   11430:	d40e      	bmi.n	11450 <gpio_pin_set.constprop.0+0x2c>
   11432:	4911      	ldr	r1, [pc, #68]	; (11478 <gpio_pin_set.constprop.0+0x54>)
   11434:	f240 535c 	movw	r3, #1372	; 0x55c
   11438:	4a10      	ldr	r2, [pc, #64]	; (1147c <gpio_pin_set.constprop.0+0x58>)
   1143a:	4811      	ldr	r0, [pc, #68]	; (11480 <gpio_pin_set.constprop.0+0x5c>)
   1143c:	f01d fa8a 	bl	2e954 <assert_print>
   11440:	4810      	ldr	r0, [pc, #64]	; (11484 <gpio_pin_set.constprop.0+0x60>)
   11442:	f01d fa87 	bl	2e954 <assert_print>
   11446:	f240 515c 	movw	r1, #1372	; 0x55c
   1144a:	480c      	ldr	r0, [pc, #48]	; (1147c <gpio_pin_set.constprop.0+0x58>)
   1144c:	f01d fa7b 	bl	2e946 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11450:	6812      	ldr	r2, [r2, #0]
   11452:	0212      	lsls	r2, r2, #8
		value = (value != 0) ? 0 : 1;
   11454:	bf48      	it	mi
   11456:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   1145a:	b138      	cbz	r0, 1146c <gpio_pin_set.constprop.0+0x48>
	return api->port_set_bits_raw(port, pins);
   1145c:	689b      	ldr	r3, [r3, #8]
   1145e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11460:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
	}

	return gpio_pin_set_raw(port, pin, value);
}
   11464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   11468:	4802      	ldr	r0, [pc, #8]	; (11474 <gpio_pin_set.constprop.0+0x50>)
   1146a:	4718      	bx	r3
   1146c:	689b      	ldr	r3, [r3, #8]
   1146e:	691b      	ldr	r3, [r3, #16]
   11470:	e7f6      	b.n	11460 <gpio_pin_set.constprop.0+0x3c>
   11472:	bf00      	nop
   11474:	0003606c 	.word	0x0003606c
   11478:	00039adb 	.word	0x00039adb
   1147c:	00039aaa 	.word	0x00039aaa
   11480:	000381c3 	.word	0x000381c3
   11484:	00039b19 	.word	0x00039b19

00011488 <bt_hci_transport_setup>:
#define RESET_GPIO_CTRL  DT_GPIO_CTLR(RESET_NODE, gpios)
#define RESET_GPIO_PIN   DT_GPIO_PIN(RESET_NODE, gpios)
#define RESET_GPIO_FLAGS DT_GPIO_FLAGS(RESET_NODE, gpios)

int bt_hci_transport_setup(const struct device *h4)
{
   11488:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1148a:	4604      	mov	r4, r0
   1148c:	4d21      	ldr	r5, [pc, #132]	; (11514 <bt_hci_transport_setup+0x8c>)
   1148e:	4628      	mov	r0, r5
   11490:	f023 fb43 	bl	34b1a <z_device_is_ready>
	int err;
	char c;
	const struct device *const port = DEVICE_DT_GET(RESET_GPIO_CTRL);

	if (!device_is_ready(port)) {
   11494:	2800      	cmp	r0, #0
   11496:	d039      	beq.n	1150c <bt_hci_transport_setup+0x84>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11498:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_api *api =
   1149a:	68a9      	ldr	r1, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1149c:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   1149e:	692a      	ldr	r2, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   114a0:	021b      	lsls	r3, r3, #8
   114a2:	d40e      	bmi.n	114c2 <bt_hci_transport_setup+0x3a>
   114a4:	491c      	ldr	r1, [pc, #112]	; (11518 <bt_hci_transport_setup+0x90>)
   114a6:	f240 23f1 	movw	r3, #753	; 0x2f1
   114aa:	4a1c      	ldr	r2, [pc, #112]	; (1151c <bt_hci_transport_setup+0x94>)
   114ac:	481c      	ldr	r0, [pc, #112]	; (11520 <bt_hci_transport_setup+0x98>)
   114ae:	f01d fa51 	bl	2e954 <assert_print>
   114b2:	481c      	ldr	r0, [pc, #112]	; (11524 <bt_hci_transport_setup+0x9c>)
   114b4:	f01d fa4e 	bl	2e954 <assert_print>
   114b8:	f240 21f1 	movw	r1, #753	; 0x2f1
   114bc:	4817      	ldr	r0, [pc, #92]	; (1151c <bt_hci_transport_setup+0x94>)
   114be:	f01d fa42 	bl	2e946 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   114c2:	6813      	ldr	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   114c4:	4628      	mov	r0, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   114c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   114ca:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   114cc:	680b      	ldr	r3, [r1, #0]
   114ce:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   114d2:	2117      	movs	r1, #23
   114d4:	4798      	blx	r3
	}

	/* Configure pin as output and initialize it to inactive state. */
	err = gpio_pin_configure(port, RESET_GPIO_PIN,
				 RESET_GPIO_FLAGS | GPIO_OUTPUT_INACTIVE);
	if (err) {
   114d6:	b9b8      	cbnz	r0, 11508 <bt_hci_transport_setup+0x80>

	/* Reset the nRF52840 and let it wait until the pin is inactive again
	 * before running to main to ensure that it won't send any data until
	 * the H4 device is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 1);
   114d8:	2001      	movs	r0, #1
   114da:	f7ff ffa3 	bl	11424 <gpio_pin_set.constprop.0>
	if (err) {
   114de:	b998      	cbnz	r0, 11508 <bt_hci_transport_setup+0x80>
	return z_impl_k_sleep(timeout);
   114e0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   114e4:	2100      	movs	r1, #0
   114e6:	f019 fa81 	bl	2a9ec <z_impl_k_sleep>
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (h4 && uart_fifo_read(h4, &c, 1)) {
   114ea:	b154      	cbz	r4, 11502 <bt_hci_transport_setup+0x7a>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   114ec:	68a3      	ldr	r3, [r4, #8]
   114ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   114f0:	2b00      	cmp	r3, #0
   114f2:	d0fb      	beq.n	114ec <bt_hci_transport_setup+0x64>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   114f4:	2201      	movs	r2, #1
   114f6:	4620      	mov	r0, r4
   114f8:	f10d 0107 	add.w	r1, sp, #7
   114fc:	4798      	blx	r3
   114fe:	2800      	cmp	r0, #0
   11500:	d1f4      	bne.n	114ec <bt_hci_transport_setup+0x64>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 0);
   11502:	2000      	movs	r0, #0
   11504:	f7ff ff8e 	bl	11424 <gpio_pin_set.constprop.0>
	if (err) {
		return err;
	}

	return 0;
}
   11508:	b003      	add	sp, #12
   1150a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   1150c:	f06f 0004 	mvn.w	r0, #4
   11510:	e7fa      	b.n	11508 <bt_hci_transport_setup+0x80>
   11512:	bf00      	nop
   11514:	0003606c 	.word	0x0003606c
   11518:	00039adb 	.word	0x00039adb
   1151c:	00039aaa 	.word	0x00039aaa
   11520:	000381c3 	.word	0x000381c3
   11524:	00039b19 	.word	0x00039b19

00011528 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   11528:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   1152a:	4b0c      	ldr	r3, [pc, #48]	; (1155c <xoshiro128_next+0x34>)
   1152c:	6819      	ldr	r1, [r3, #0]
   1152e:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   11530:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   11534:	404a      	eors	r2, r1
	state[3] ^= state[1];
   11536:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   1153a:	ea85 0602 	eor.w	r6, r5, r2
   1153e:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   11540:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   11544:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   11548:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   1154c:	4408      	add	r0, r1
	state[0] ^= state[3];
   1154e:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   11550:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   11552:	60dc      	str	r4, [r3, #12]

	return result;
}
   11554:	eb01 6070 	add.w	r0, r1, r0, ror #25
   11558:	bd70      	pop	{r4, r5, r6, pc}
   1155a:	bf00      	nop
   1155c:	2000fb54 	.word	0x2000fb54

00011560 <xoshiro128_init_state>:
{
   11560:	b510      	push	{r4, lr}

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   11562:	4816      	ldr	r0, [pc, #88]	; (115bc <xoshiro128_init_state+0x5c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   11564:	6883      	ldr	r3, [r0, #8]
   11566:	681b      	ldr	r3, [r3, #0]
   11568:	b963      	cbnz	r3, 11584 <xoshiro128_init_state+0x24>
   1156a:	4915      	ldr	r1, [pc, #84]	; (115c0 <xoshiro128_init_state+0x60>)
   1156c:	234d      	movs	r3, #77	; 0x4d
   1156e:	4a15      	ldr	r2, [pc, #84]	; (115c4 <xoshiro128_init_state+0x64>)
   11570:	4815      	ldr	r0, [pc, #84]	; (115c8 <xoshiro128_init_state+0x68>)
   11572:	f01d f9ef 	bl	2e954 <assert_print>
   11576:	4815      	ldr	r0, [pc, #84]	; (115cc <xoshiro128_init_state+0x6c>)
   11578:	f01d f9ec 	bl	2e954 <assert_print>
   1157c:	214d      	movs	r1, #77	; 0x4d
   1157e:	4811      	ldr	r0, [pc, #68]	; (115c4 <xoshiro128_init_state+0x64>)
   11580:	f01d f9e1 	bl	2e946 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   11584:	4c12      	ldr	r4, [pc, #72]	; (115d0 <xoshiro128_init_state+0x70>)
   11586:	2210      	movs	r2, #16
   11588:	4621      	mov	r1, r4
   1158a:	4798      	blx	r3
	if (rc == 0) {
   1158c:	b918      	cbnz	r0, 11596 <xoshiro128_init_state+0x36>
		initialized = true;
   1158e:	2201      	movs	r2, #1
   11590:	4b10      	ldr	r3, [pc, #64]	; (115d4 <xoshiro128_init_state+0x74>)
   11592:	701a      	strb	r2, [r3, #0]
}
   11594:	bd10      	pop	{r4, pc}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   11596:	f021 fb09 	bl	32bac <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   1159a:	6020      	str	r0, [r4, #0]
   1159c:	f021 fb06 	bl	32bac <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   115a0:	4b0d      	ldr	r3, [pc, #52]	; (115d8 <xoshiro128_init_state+0x78>)
   115a2:	4043      	eors	r3, r0
   115a4:	6063      	str	r3, [r4, #4]
   115a6:	f021 fb01 	bl	32bac <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   115aa:	4b0c      	ldr	r3, [pc, #48]	; (115dc <xoshiro128_init_state+0x7c>)
   115ac:	4043      	eors	r3, r0
   115ae:	60a3      	str	r3, [r4, #8]
   115b0:	f021 fafc 	bl	32bac <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   115b4:	4b0a      	ldr	r3, [pc, #40]	; (115e0 <xoshiro128_init_state+0x80>)
   115b6:	4043      	eors	r3, r0
   115b8:	60e3      	str	r3, [r4, #12]
}
   115ba:	e7eb      	b.n	11594 <xoshiro128_init_state+0x34>
   115bc:	0003609c 	.word	0x0003609c
   115c0:	00039b5f 	.word	0x00039b5f
   115c4:	00039b2b 	.word	0x00039b2b
   115c8:	000381c3 	.word	0x000381c3
   115cc:	00039b7f 	.word	0x00039b7f
   115d0:	2000fb54 	.word	0x2000fb54
   115d4:	200111f1 	.word	0x200111f1
   115d8:	9b64c2b0 	.word	0x9b64c2b0
   115dc:	86d3d2d4 	.word	0x86d3d2d4
   115e0:	a00ae278 	.word	0xa00ae278

000115e4 <xoshiro128_initialize>:
{
   115e4:	b508      	push	{r3, lr}
   115e6:	4804      	ldr	r0, [pc, #16]	; (115f8 <xoshiro128_initialize+0x14>)
   115e8:	f023 fa97 	bl	34b1a <z_device_is_ready>
	return 0;
   115ec:	2800      	cmp	r0, #0
}
   115ee:	bf0c      	ite	eq
   115f0:	f06f 0012 	mvneq.w	r0, #18
   115f4:	2000      	movne	r0, #0
   115f6:	bd08      	pop	{r3, pc}
   115f8:	0003609c 	.word	0x0003609c

000115fc <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   115fc:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   115fe:	4b04      	ldr	r3, [pc, #16]	; (11610 <z_impl_sys_rand32_get+0x14>)
   11600:	781b      	ldrb	r3, [r3, #0]
   11602:	b90b      	cbnz	r3, 11608 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   11604:	f7ff ffac 	bl	11560 <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   11608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   1160c:	f7ff bf8c 	b.w	11528 <xoshiro128_next>
   11610:	200111f1 	.word	0x200111f1

00011614 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11614:	4b0e      	ldr	r3, [pc, #56]	; (11650 <bt_hex+0x3c>)
   11616:	2940      	cmp	r1, #64	; 0x40
   11618:	bf28      	it	cs
   1161a:	2140      	movcs	r1, #64	; 0x40
{
   1161c:	b570      	push	{r4, r5, r6, lr}
   1161e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11620:	4c0c      	ldr	r4, [pc, #48]	; (11654 <bt_hex+0x40>)
   11622:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11624:	42b0      	cmp	r0, r6
   11626:	f103 0302 	add.w	r3, r3, #2
   1162a:	d104      	bne.n	11636 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1162c:	2300      	movs	r3, #0
   1162e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11632:	4807      	ldr	r0, [pc, #28]	; (11650 <bt_hex+0x3c>)
   11634:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11636:	7802      	ldrb	r2, [r0, #0]
   11638:	0912      	lsrs	r2, r2, #4
   1163a:	5ca2      	ldrb	r2, [r4, r2]
   1163c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11640:	f810 2b01 	ldrb.w	r2, [r0], #1
   11644:	f002 020f 	and.w	r2, r2, #15
   11648:	5ca2      	ldrb	r2, [r4, r2]
   1164a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1164e:	e7e9      	b.n	11624 <bt_hex+0x10>
   11650:	20011210 	.word	0x20011210
   11654:	00039bb8 	.word	0x00039bb8

00011658 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11658:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1165a:	7803      	ldrb	r3, [r0, #0]
   1165c:	b08b      	sub	sp, #44	; 0x2c
   1165e:	4604      	mov	r4, r0
   11660:	ad07      	add	r5, sp, #28
   11662:	2b03      	cmp	r3, #3
   11664:	d821      	bhi.n	116aa <bt_addr_le_str+0x52>
   11666:	e8df f003 	tbb	[pc, r3]
   1166a:	1a02      	.short	0x1a02
   1166c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1166e:	4912      	ldr	r1, [pc, #72]	; (116b8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11670:	4628      	mov	r0, r5
   11672:	f023 fe79 	bl	35368 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11676:	9505      	str	r5, [sp, #20]
   11678:	7863      	ldrb	r3, [r4, #1]
   1167a:	211e      	movs	r1, #30
   1167c:	9304      	str	r3, [sp, #16]
   1167e:	78a3      	ldrb	r3, [r4, #2]
   11680:	4a0e      	ldr	r2, [pc, #56]	; (116bc <bt_addr_le_str+0x64>)
   11682:	9303      	str	r3, [sp, #12]
   11684:	78e3      	ldrb	r3, [r4, #3]
   11686:	480e      	ldr	r0, [pc, #56]	; (116c0 <bt_addr_le_str+0x68>)
   11688:	9302      	str	r3, [sp, #8]
   1168a:	7923      	ldrb	r3, [r4, #4]
   1168c:	9301      	str	r3, [sp, #4]
   1168e:	7963      	ldrb	r3, [r4, #5]
   11690:	9300      	str	r3, [sp, #0]
   11692:	79a3      	ldrb	r3, [r4, #6]
   11694:	f01c ff8e 	bl	2e5b4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11698:	4809      	ldr	r0, [pc, #36]	; (116c0 <bt_addr_le_str+0x68>)
   1169a:	b00b      	add	sp, #44	; 0x2c
   1169c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1169e:	4909      	ldr	r1, [pc, #36]	; (116c4 <bt_addr_le_str+0x6c>)
   116a0:	e7e6      	b.n	11670 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   116a2:	4909      	ldr	r1, [pc, #36]	; (116c8 <bt_addr_le_str+0x70>)
   116a4:	e7e4      	b.n	11670 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   116a6:	4909      	ldr	r1, [pc, #36]	; (116cc <bt_addr_le_str+0x74>)
   116a8:	e7e2      	b.n	11670 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   116aa:	210a      	movs	r1, #10
   116ac:	4628      	mov	r0, r5
   116ae:	4a08      	ldr	r2, [pc, #32]	; (116d0 <bt_addr_le_str+0x78>)
   116b0:	f01c ff80 	bl	2e5b4 <snprintk>
		break;
   116b4:	e7df      	b.n	11676 <bt_addr_le_str+0x1e>
   116b6:	bf00      	nop
   116b8:	000380b2 	.word	0x000380b2
   116bc:	000380d4 	.word	0x000380d4
   116c0:	200111f2 	.word	0x200111f2
   116c4:	000380b9 	.word	0x000380b9
   116c8:	000380c0 	.word	0x000380c0
   116cc:	000380ca 	.word	0x000380ca
   116d0:	0003ad5b 	.word	0x0003ad5b

000116d4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   116d4:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   116d6:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   116d8:	4d09      	ldr	r5, [pc, #36]	; (11700 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   116da:	4b0a      	ldr	r3, [pc, #40]	; (11704 <long_wq_init+0x30>)
{
   116dc:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   116de:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   116e0:	9302      	str	r3, [sp, #8]
   116e2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   116e4:	f017 fea4 	bl	29430 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   116e8:	ab02      	add	r3, sp, #8
   116ea:	4628      	mov	r0, r5
   116ec:	9300      	str	r3, [sp, #0]
   116ee:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   116f2:	230a      	movs	r3, #10
   116f4:	4904      	ldr	r1, [pc, #16]	; (11708 <long_wq_init+0x34>)
   116f6:	f017 feb5 	bl	29464 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   116fa:	4620      	mov	r0, r4
   116fc:	b005      	add	sp, #20
   116fe:	bd30      	pop	{r4, r5, pc}
   11700:	2000d6e8 	.word	0x2000d6e8
   11704:	00039bc9 	.word	0x00039bc9
   11708:	20013088 	.word	0x20013088

0001170c <bt_long_wq_schedule>:
{
   1170c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1170e:	4801      	ldr	r0, [pc, #4]	; (11714 <bt_long_wq_schedule+0x8>)
   11710:	f017 bf3c 	b.w	2958c <k_work_schedule_for_queue>
   11714:	2000d6e8 	.word	0x2000d6e8

00011718 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11718:	7803      	ldrb	r3, [r0, #0]
{
   1171a:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   1171c:	2b01      	cmp	r3, #1
   1171e:	d013      	beq.n	11748 <uuid_to_uuid128+0x30>
   11720:	2b02      	cmp	r3, #2
   11722:	d027      	beq.n	11774 <uuid_to_uuid128+0x5c>
   11724:	b97b      	cbnz	r3, 11746 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11726:	460a      	mov	r2, r1
   11728:	4b18      	ldr	r3, [pc, #96]	; (1178c <uuid_to_uuid128+0x74>)
   1172a:	f103 0410 	add.w	r4, r3, #16
   1172e:	f853 5b04 	ldr.w	r5, [r3], #4
   11732:	42a3      	cmp	r3, r4
   11734:	f842 5b04 	str.w	r5, [r2], #4
   11738:	d1f9      	bne.n	1172e <uuid_to_uuid128+0x16>
   1173a:	781b      	ldrb	r3, [r3, #0]
   1173c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1173e:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   11740:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11742:	0a1b      	lsrs	r3, r3, #8
   11744:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11746:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11748:	460a      	mov	r2, r1
   1174a:	4b10      	ldr	r3, [pc, #64]	; (1178c <uuid_to_uuid128+0x74>)
   1174c:	f103 0410 	add.w	r4, r3, #16
   11750:	f853 5b04 	ldr.w	r5, [r3], #4
   11754:	42a3      	cmp	r3, r4
   11756:	f842 5b04 	str.w	r5, [r2], #4
   1175a:	d1f9      	bne.n	11750 <uuid_to_uuid128+0x38>
   1175c:	781b      	ldrb	r3, [r3, #0]
   1175e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11760:	6843      	ldr	r3, [r0, #4]
   11762:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11766:	734b      	strb	r3, [r1, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   11768:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1176a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1176c:	0a1b      	lsrs	r3, r3, #8
   1176e:	738a      	strb	r2, [r1, #14]
   11770:	740b      	strb	r3, [r1, #16]
}
   11772:	e7e8      	b.n	11746 <uuid_to_uuid128+0x2e>
   11774:	f100 0310 	add.w	r3, r0, #16
   11778:	f850 2b04 	ldr.w	r2, [r0], #4
   1177c:	4298      	cmp	r0, r3
   1177e:	f841 2b04 	str.w	r2, [r1], #4
   11782:	d1f9      	bne.n	11778 <uuid_to_uuid128+0x60>
   11784:	7803      	ldrb	r3, [r0, #0]
   11786:	700b      	strb	r3, [r1, #0]
   11788:	e7dd      	b.n	11746 <uuid_to_uuid128+0x2e>
   1178a:	bf00      	nop
   1178c:	00039bd2 	.word	0x00039bd2

00011790 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11790:	b538      	push	{r3, r4, r5, lr}
   11792:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11794:	2d01      	cmp	r5, #1
{
   11796:	4610      	mov	r0, r2
   11798:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1179a:	d010      	beq.n	117be <bt_buf_get_rx+0x2e>
   1179c:	2d03      	cmp	r5, #3
   1179e:	d01a      	beq.n	117d6 <bt_buf_get_rx+0x46>
   117a0:	2d05      	cmp	r5, #5
   117a2:	d018      	beq.n	117d6 <bt_buf_get_rx+0x46>
   117a4:	490e      	ldr	r1, [pc, #56]	; (117e0 <bt_buf_get_rx+0x50>)
   117a6:	233d      	movs	r3, #61	; 0x3d
   117a8:	4a0e      	ldr	r2, [pc, #56]	; (117e4 <bt_buf_get_rx+0x54>)
   117aa:	480f      	ldr	r0, [pc, #60]	; (117e8 <bt_buf_get_rx+0x58>)
   117ac:	f01d f8d2 	bl	2e954 <assert_print>
   117b0:	480e      	ldr	r0, [pc, #56]	; (117ec <bt_buf_get_rx+0x5c>)
   117b2:	f01d f8cf 	bl	2e954 <assert_print>
   117b6:	213d      	movs	r1, #61	; 0x3d
   117b8:	480a      	ldr	r0, [pc, #40]	; (117e4 <bt_buf_get_rx+0x54>)
   117ba:	f01d f8c4 	bl	2e946 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   117be:	480c      	ldr	r0, [pc, #48]	; (117f0 <bt_buf_get_rx+0x60>)
   117c0:	f01f fcf4 	bl	311ac <net_buf_alloc_fixed>
   117c4:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   117c6:	b120      	cbz	r0, 117d2 <bt_buf_get_rx+0x42>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   117c8:	2100      	movs	r1, #0
   117ca:	300c      	adds	r0, #12
   117cc:	f006 fed6 	bl	1857c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   117d0:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   117d2:	4620      	mov	r0, r4
   117d4:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   117d6:	4602      	mov	r2, r0
   117d8:	460b      	mov	r3, r1
   117da:	4806      	ldr	r0, [pc, #24]	; (117f4 <bt_buf_get_rx+0x64>)
   117dc:	e7f0      	b.n	117c0 <bt_buf_get_rx+0x30>
   117de:	bf00      	nop
   117e0:	00039c12 	.word	0x00039c12
   117e4:	00039be3 	.word	0x00039be3
   117e8:	000381c3 	.word	0x000381c3
   117ec:	00039c57 	.word	0x00039c57
   117f0:	2000d0e8 	.word	0x2000d0e8
   117f4:	2000d04c 	.word	0x2000d04c

000117f8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   117f8:	460b      	mov	r3, r1
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   117fa:	2100      	movs	r1, #0
   117fc:	b570      	push	{r4, r5, r6, lr}
   117fe:	4602      	mov	r2, r0
   11800:	480a      	ldr	r0, [pc, #40]	; (1182c <bt_buf_get_cmd_complete+0x34>)
   11802:	e8d0 4fef 	ldaex	r4, [r0]
   11806:	e8c0 1fe5 	stlex	r5, r1, [r0]
   1180a:	2d00      	cmp	r5, #0
   1180c:	d1f9      	bne.n	11802 <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   1180e:	b924      	cbnz	r4, 1181a <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11814:	2001      	movs	r0, #1
   11816:	f7ff bfbb 	b.w	11790 <bt_buf_get_rx>
   1181a:	2301      	movs	r3, #1
	net_buf_simple_reserve(&buf->b, reserve);
   1181c:	f104 000c 	add.w	r0, r4, #12
   11820:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   11822:	8221      	strh	r1, [r4, #16]
   11824:	f006 feaa 	bl	1857c <net_buf_simple_reserve>
}
   11828:	4620      	mov	r0, r4
   1182a:	bd70      	pop	{r4, r5, r6, pc}
   1182c:	2000c6b8 	.word	0x2000c6b8

00011830 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11830:	b570      	push	{r4, r5, r6, lr}
   11832:	4604      	mov	r4, r0
	switch (evt) {
   11834:	2c0f      	cmp	r4, #15
{
   11836:	460d      	mov	r5, r1
   11838:	4610      	mov	r0, r2
   1183a:	4619      	mov	r1, r3
	switch (evt) {
   1183c:	d805      	bhi.n	1184a <bt_buf_get_evt+0x1a>
   1183e:	2c0d      	cmp	r4, #13
   11840:	d90d      	bls.n	1185e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11846:	f7ff bfd7 	b.w	117f8 <bt_buf_get_cmd_complete>
	switch (evt) {
   1184a:	2c13      	cmp	r4, #19
   1184c:	d107      	bne.n	1185e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1184e:	480c      	ldr	r0, [pc, #48]	; (11880 <bt_buf_get_evt+0x50>)
   11850:	f01f fcac 	bl	311ac <net_buf_alloc_fixed>
			if (buf) {
   11854:	4604      	mov	r4, r0
   11856:	b938      	cbnz	r0, 11868 <bt_buf_get_evt+0x38>
{
   11858:	2400      	movs	r4, #0
}
   1185a:	4620      	mov	r0, r4
   1185c:	bd70      	pop	{r4, r5, r6, pc}
   1185e:	4602      	mov	r2, r0
   11860:	460b      	mov	r3, r1
		if (discardable) {
   11862:	b145      	cbz	r5, 11876 <bt_buf_get_evt+0x46>
   11864:	4807      	ldr	r0, [pc, #28]	; (11884 <bt_buf_get_evt+0x54>)
   11866:	e7f3      	b.n	11850 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11868:	2100      	movs	r1, #0
   1186a:	300c      	adds	r0, #12
   1186c:	f006 fe86 	bl	1857c <net_buf_simple_reserve>
   11870:	2301      	movs	r3, #1
   11872:	7623      	strb	r3, [r4, #24]
}
   11874:	e7f1      	b.n	1185a <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11876:	2001      	movs	r0, #1
}
   11878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1187c:	f7ff bf88 	b.w	11790 <bt_buf_get_rx>
   11880:	2000d184 	.word	0x2000d184
   11884:	2000d0b4 	.word	0x2000d0b4

00011888 <bt_data_parse>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   11888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1188c:	4605      	mov	r5, r0
   1188e:	460e      	mov	r6, r1
   11890:	4690      	mov	r8, r2
   11892:	b082      	sub	sp, #8
   11894:	af00      	add	r7, sp, #0
	while (ad->len > 1) {
   11896:	88ab      	ldrh	r3, [r5, #4]
   11898:	2b01      	cmp	r3, #1
   1189a:	d918      	bls.n	118ce <bt_data_parse+0x46>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   1189c:	4628      	mov	r0, r5
   1189e:	f01f fc92 	bl	311c6 <net_buf_simple_pull_u8>
		if (len == 0U) {
   118a2:	4604      	mov	r4, r0
   118a4:	b198      	cbz	r0, 118ce <bt_data_parse+0x46>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   118a6:	88ab      	ldrh	r3, [r5, #4]
   118a8:	4298      	cmp	r0, r3
   118aa:	d914      	bls.n	118d6 <bt_data_parse+0x4e>
			LOG_WRN("malformed advertising data %u / %u",
   118ac:	466d      	mov	r5, sp
   118ae:	b088      	sub	sp, #32
   118b0:	466a      	mov	r2, sp
   118b2:	61d3      	str	r3, [r2, #28]
   118b4:	2304      	movs	r3, #4
   118b6:	4911      	ldr	r1, [pc, #68]	; (118fc <bt_data_parse+0x74>)
   118b8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   118bc:	f842 3f10 	str.w	r3, [r2, #16]!
   118c0:	2300      	movs	r3, #0
   118c2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   118c6:	480e      	ldr	r0, [pc, #56]	; (11900 <bt_data_parse+0x78>)
   118c8:	f7fc ffa8 	bl	e81c <z_impl_z_log_msg_static_create>
   118cc:	46ad      	mov	sp, r5
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   118ce:	3708      	adds	r7, #8
   118d0:	46bd      	mov	sp, r7
   118d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.type = net_buf_simple_pull_u8(ad);
   118d6:	4628      	mov	r0, r5
   118d8:	f01f fc75 	bl	311c6 <net_buf_simple_pull_u8>
		data.data = ad->data;
   118dc:	682b      	ldr	r3, [r5, #0]
		data.type = net_buf_simple_pull_u8(ad);
   118de:	7038      	strb	r0, [r7, #0]
		data.data_len = len - 1;
   118e0:	3c01      	subs	r4, #1
		if (!func(&data, user_data)) {
   118e2:	4641      	mov	r1, r8
   118e4:	4638      	mov	r0, r7
		data.data_len = len - 1;
   118e6:	707c      	strb	r4, [r7, #1]
		data.data = ad->data;
   118e8:	607b      	str	r3, [r7, #4]
		if (!func(&data, user_data)) {
   118ea:	47b0      	blx	r6
   118ec:	2800      	cmp	r0, #0
   118ee:	d0ee      	beq.n	118ce <bt_data_parse+0x46>
		net_buf_simple_pull(ad, len - 1);
   118f0:	4621      	mov	r1, r4
   118f2:	4628      	mov	r0, r5
   118f4:	f006 fe84 	bl	18600 <net_buf_simple_pull>
   118f8:	e7cd      	b.n	11896 <bt_data_parse+0xe>
   118fa:	bf00      	nop
   118fc:	00039c77 	.word	0x00039c77
   11900:	00036400 	.word	0x00036400

00011904 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   11904:	b570      	push	{r4, r5, r6, lr}
   11906:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   11908:	466c      	mov	r4, sp
{
   1190a:	4606      	mov	r6, r0
	const char * const str[] = {
   1190c:	4d0a      	ldr	r5, [pc, #40]	; (11938 <ver_str+0x34>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   1190e:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   11910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1191c:	e895 0003 	ldmia.w	r5, {r0, r1}
   11920:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   11924:	bf9d      	ittte	ls
   11926:	ab0e      	addls	r3, sp, #56	; 0x38
   11928:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
   1192c:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	}

	return "unknown";
   11930:	4802      	ldrhi	r0, [pc, #8]	; (1193c <ver_str+0x38>)
}
   11932:	b00e      	add	sp, #56	; 0x38
   11934:	bd70      	pop	{r4, r5, r6, pc}
   11936:	bf00      	nop
   11938:	0003669c 	.word	0x0003669c
   1193c:	00039ca2 	.word	0x00039ca2

00011940 <hci_disconn_complete_prio>:
{
   11940:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11942:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11944:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11948:	781b      	ldrb	r3, [r3, #0]
   1194a:	b963      	cbnz	r3, 11966 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   1194c:	4620      	mov	r0, r4
   1194e:	f002 fdd9 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   11952:	4605      	mov	r5, r0
   11954:	b940      	cbnz	r0, 11968 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11956:	4b08      	ldr	r3, [pc, #32]	; (11978 <hci_disconn_complete_prio+0x38>)
   11958:	881a      	ldrh	r2, [r3, #0]
   1195a:	b922      	cbnz	r2, 11966 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1195c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11960:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11964:	8018      	strh	r0, [r3, #0]
}
   11966:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11968:	2101      	movs	r1, #1
   1196a:	f002 fdd3 	bl	14514 <bt_conn_set_state>
	bt_conn_unref(conn);
   1196e:	4628      	mov	r0, r5
}
   11970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11974:	f002 bda2 	b.w	144bc <bt_conn_unref>
   11978:	2001103e 	.word	0x2001103e

0001197c <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   1197c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   1197e:	4b06      	ldr	r3, [pc, #24]	; (11998 <le_conn_param_neg_reply.part.0+0x1c>)
   11980:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11984:	9305      	str	r3, [sp, #20]
   11986:	2302      	movs	r3, #2
   11988:	4804      	ldr	r0, [pc, #16]	; (1199c <le_conn_param_neg_reply.part.0+0x20>)
   1198a:	aa04      	add	r2, sp, #16
   1198c:	9304      	str	r3, [sp, #16]
   1198e:	f01e f987 	bl	2fca0 <z_log_msg_static_create.constprop.0>
}
   11992:	b007      	add	sp, #28
   11994:	f85d fb04 	ldr.w	pc, [sp], #4
   11998:	00039caa 	.word	0x00039caa
   1199c:	00036420 	.word	0x00036420

000119a0 <le_conn_update_complete>:
{
   119a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119a2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   119a4:	68c5      	ldr	r5, [r0, #12]
{
   119a6:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   119a8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   119ac:	4630      	mov	r0, r6
   119ae:	f002 fda9 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   119b2:	4604      	mov	r4, r0
   119b4:	b988      	cbnz	r0, 119da <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   119b6:	466c      	mov	r4, sp
   119b8:	b088      	sub	sp, #32
   119ba:	466a      	mov	r2, sp
   119bc:	4b1d      	ldr	r3, [pc, #116]	; (11a34 <le_conn_update_complete+0x94>)
   119be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   119c2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   119c6:	2303      	movs	r3, #3
   119c8:	481b      	ldr	r0, [pc, #108]	; (11a38 <le_conn_update_complete+0x98>)
   119ca:	f842 3f10 	str.w	r3, [r2, #16]!
   119ce:	f01e f967 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   119d2:	46a5      	mov	sp, r4
}
   119d4:	370c      	adds	r7, #12
   119d6:	46bd      	mov	sp, r7
   119d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   119da:	782b      	ldrb	r3, [r5, #0]
   119dc:	2b1a      	cmp	r3, #26
   119de:	d117      	bne.n	11a10 <le_conn_update_complete+0x70>
   119e0:	78c3      	ldrb	r3, [r0, #3]
   119e2:	2b01      	cmp	r3, #1
   119e4:	d122      	bne.n	11a2c <le_conn_update_complete+0x8c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   119e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   119ea:	3004      	adds	r0, #4
   119ec:	f01e f941 	bl	2fc72 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   119f0:	0543      	lsls	r3, r0, #21
   119f2:	d40d      	bmi.n	11a10 <le_conn_update_complete+0x70>
		param.interval_min = conn->le.interval_min;
   119f4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   119f8:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   119fa:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   119fc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   11a00:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   11a02:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   11a04:	f003 fbcc 	bl	151a0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   11a08:	4620      	mov	r0, r4
   11a0a:	f002 fd57 	bl	144bc <bt_conn_unref>
   11a0e:	e7e1      	b.n	119d4 <le_conn_update_complete+0x34>
		if (!evt->status) {
   11a10:	782b      	ldrb	r3, [r5, #0]
   11a12:	b95b      	cbnz	r3, 11a2c <le_conn_update_complete+0x8c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   11a14:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   11a18:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   11a1c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   11a20:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11a24:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   11a28:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		notify_le_param_updated(conn);
   11a2c:	4620      	mov	r0, r4
   11a2e:	f002 feed 	bl	1480c <notify_le_param_updated>
   11a32:	e7e9      	b.n	11a08 <le_conn_update_complete+0x68>
   11a34:	00039cc4 	.word	0x00039cc4
   11a38:	00036420 	.word	0x00036420

00011a3c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   11a3c:	460b      	mov	r3, r1
   11a3e:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11a40:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   11a42:	af00      	add	r7, sp, #0
   11a44:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11a46:	4629      	mov	r1, r5
   11a48:	68d8      	ldr	r0, [r3, #12]
   11a4a:	f7ff fde3 	bl	11614 <bt_hex>
   11a4e:	b08a      	sub	sp, #40	; 0x28
   11a50:	466a      	mov	r2, sp
   11a52:	4b09      	ldr	r3, [pc, #36]	; (11a78 <handle_event.part.0+0x3c>)
   11a54:	e9c2 5007 	strd	r5, r0, [r2, #28]
   11a58:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a5c:	f240 4302 	movw	r3, #1026	; 0x402
   11a60:	8493      	strh	r3, [r2, #36]	; 0x24
   11a62:	4b06      	ldr	r3, [pc, #24]	; (11a7c <handle_event.part.0+0x40>)
   11a64:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   11a68:	4805      	ldr	r0, [pc, #20]	; (11a80 <handle_event.part.0+0x44>)
   11a6a:	f842 3f10 	str.w	r3, [r2, #16]!
   11a6e:	f01e f917 	bl	2fca0 <z_log_msg_static_create.constprop.0>
}
   11a72:	46bd      	mov	sp, r7
   11a74:	bdb0      	pop	{r4, r5, r7, pc}
   11a76:	bf00      	nop
   11a78:	00039ce8 	.word	0x00039ce8
   11a7c:	01000005 	.word	0x01000005
   11a80:	00036420 	.word	0x00036420

00011a84 <handle_event>:
{
   11a84:	b5b0      	push	{r4, r5, r7, lr}
   11a86:	4604      	mov	r4, r0
   11a88:	af00      	add	r7, sp, #0
   11a8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   11a8e:	4293      	cmp	r3, r2
   11a90:	d103      	bne.n	11a9a <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   11a92:	4620      	mov	r0, r4
   11a94:	f7ff ffd2 	bl	11a3c <handle_event.part.0>
}
   11a98:	e018      	b.n	11acc <handle_event+0x48>
		if (handler->event != event) {
   11a9a:	4610      	mov	r0, r2
   11a9c:	f810 5b08 	ldrb.w	r5, [r0], #8
   11aa0:	42a5      	cmp	r5, r4
   11aa2:	d119      	bne.n	11ad8 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   11aa4:	8a0b      	ldrh	r3, [r1, #16]
   11aa6:	7850      	ldrb	r0, [r2, #1]
   11aa8:	4298      	cmp	r0, r3
   11aaa:	d911      	bls.n	11ad0 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   11aac:	466d      	mov	r5, sp
   11aae:	b088      	sub	sp, #32
   11ab0:	466a      	mov	r2, sp
   11ab2:	490a      	ldr	r1, [pc, #40]	; (11adc <handle_event+0x58>)
   11ab4:	61d4      	str	r4, [r2, #28]
   11ab6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11aba:	2304      	movs	r3, #4
   11abc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11ac0:	4807      	ldr	r0, [pc, #28]	; (11ae0 <handle_event+0x5c>)
   11ac2:	f842 3f10 	str.w	r3, [r2, #16]!
   11ac6:	f01e f8eb 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11aca:	46ad      	mov	sp, r5
}
   11acc:	46bd      	mov	sp, r7
   11ace:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   11ad0:	4608      	mov	r0, r1
   11ad2:	6853      	ldr	r3, [r2, #4]
   11ad4:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   11ad6:	e7f9      	b.n	11acc <handle_event+0x48>
   11ad8:	4602      	mov	r2, r0
   11ada:	e7d8      	b.n	11a8e <handle_event+0xa>
   11adc:	00039d0a 	.word	0x00039d0a
   11ae0:	00036420 	.word	0x00036420

00011ae4 <hci_le_meta_event>:
{
   11ae4:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11ae6:	2101      	movs	r1, #1
   11ae8:	4604      	mov	r4, r0
   11aea:	300c      	adds	r0, #12
   11aec:	f006 fda6 	bl	1863c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11af0:	4621      	mov	r1, r4
}
   11af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11af6:	2308      	movs	r3, #8
   11af8:	4a01      	ldr	r2, [pc, #4]	; (11b00 <hci_le_meta_event+0x1c>)
   11afa:	7800      	ldrb	r0, [r0, #0]
   11afc:	f7ff bfc2 	b.w	11a84 <handle_event>
   11b00:	00036b14 	.word	0x00036b14

00011b04 <hci_hardware_error>:
{
   11b04:	b580      	push	{r7, lr}
   11b06:	2101      	movs	r1, #1
   11b08:	af00      	add	r7, sp, #0
   11b0a:	300c      	adds	r0, #12
   11b0c:	f006 fd96 	bl	1863c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11b10:	b088      	sub	sp, #32
   11b12:	466a      	mov	r2, sp
   11b14:	7803      	ldrb	r3, [r0, #0]
   11b16:	4906      	ldr	r1, [pc, #24]	; (11b30 <hci_hardware_error+0x2c>)
   11b18:	4806      	ldr	r0, [pc, #24]	; (11b34 <hci_hardware_error+0x30>)
   11b1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11b1e:	2303      	movs	r3, #3
   11b20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b24:	f842 3f10 	str.w	r3, [r2, #16]!
   11b28:	f01e f8ba 	bl	2fca0 <z_log_msg_static_create.constprop.0>
}
   11b2c:	46bd      	mov	sp, r7
   11b2e:	bd80      	pop	{r7, pc}
   11b30:	00039d2c 	.word	0x00039d2c
   11b34:	00036420 	.word	0x00036420

00011b38 <le_data_len_change>:
{
   11b38:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11b3a:	68c3      	ldr	r3, [r0, #12]
{
   11b3c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11b3e:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11b40:	4620      	mov	r0, r4
   11b42:	f002 fcdf 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   11b46:	b980      	cbnz	r0, 11b6a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11b48:	466d      	mov	r5, sp
   11b4a:	b088      	sub	sp, #32
   11b4c:	466a      	mov	r2, sp
   11b4e:	4b08      	ldr	r3, [pc, #32]	; (11b70 <le_data_len_change+0x38>)
   11b50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b54:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11b58:	2303      	movs	r3, #3
   11b5a:	4806      	ldr	r0, [pc, #24]	; (11b74 <le_data_len_change+0x3c>)
   11b5c:	f842 3f10 	str.w	r3, [r2, #16]!
   11b60:	f01e f89e 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11b64:	46ad      	mov	sp, r5
}
   11b66:	46bd      	mov	sp, r7
   11b68:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   11b6a:	f002 fca7 	bl	144bc <bt_conn_unref>
   11b6e:	e7fa      	b.n	11b66 <le_data_len_change+0x2e>
   11b70:	00039cc4 	.word	0x00039cc4
   11b74:	00036420 	.word	0x00036420

00011b78 <le_phy_update_complete>:
{
   11b78:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11b7a:	68c3      	ldr	r3, [r0, #12]
{
   11b7c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11b7e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   11b82:	4620      	mov	r0, r4
   11b84:	f002 fcbe 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   11b88:	b980      	cbnz	r0, 11bac <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11b8a:	466d      	mov	r5, sp
   11b8c:	b088      	sub	sp, #32
   11b8e:	466a      	mov	r2, sp
   11b90:	4b08      	ldr	r3, [pc, #32]	; (11bb4 <le_phy_update_complete+0x3c>)
   11b92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b96:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11b9a:	2303      	movs	r3, #3
   11b9c:	4806      	ldr	r0, [pc, #24]	; (11bb8 <le_phy_update_complete+0x40>)
   11b9e:	f842 3f10 	str.w	r3, [r2, #16]!
   11ba2:	f01e f87d 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11ba6:	46ad      	mov	sp, r5
}
   11ba8:	46bd      	mov	sp, r7
   11baa:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   11bac:	f002 fc86 	bl	144bc <bt_conn_unref>
   11bb0:	e7fa      	b.n	11ba8 <le_phy_update_complete+0x30>
   11bb2:	bf00      	nop
   11bb4:	00039cc4 	.word	0x00039cc4
   11bb8:	00036420 	.word	0x00036420

00011bbc <hci_data_buf_overflow>:
{
   11bbc:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11bbe:	68c3      	ldr	r3, [r0, #12]
{
   11bc0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11bc2:	b088      	sub	sp, #32
   11bc4:	466a      	mov	r2, sp
   11bc6:	781b      	ldrb	r3, [r3, #0]
   11bc8:	4906      	ldr	r1, [pc, #24]	; (11be4 <hci_data_buf_overflow+0x28>)
   11bca:	4807      	ldr	r0, [pc, #28]	; (11be8 <hci_data_buf_overflow+0x2c>)
   11bcc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11bd0:	2303      	movs	r3, #3
   11bd2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11bd6:	f842 3f10 	str.w	r3, [r2, #16]!
   11bda:	f01e f861 	bl	2fca0 <z_log_msg_static_create.constprop.0>
}
   11bde:	46bd      	mov	sp, r7
   11be0:	bd80      	pop	{r7, pc}
   11be2:	bf00      	nop
   11be4:	00039d4e 	.word	0x00039d4e
   11be8:	00036420 	.word	0x00036420

00011bec <le_remote_feat_complete>:
{
   11bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   11bee:	68c5      	ldr	r5, [r0, #12]
{
   11bf0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11bf2:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11bf6:	4630      	mov	r0, r6
   11bf8:	f002 fc84 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   11bfc:	4604      	mov	r4, r0
   11bfe:	b980      	cbnz	r0, 11c22 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11c00:	466c      	mov	r4, sp
   11c02:	b088      	sub	sp, #32
   11c04:	466a      	mov	r2, sp
   11c06:	4b10      	ldr	r3, [pc, #64]	; (11c48 <le_remote_feat_complete+0x5c>)
   11c08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11c0c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   11c10:	2303      	movs	r3, #3
   11c12:	480e      	ldr	r0, [pc, #56]	; (11c4c <le_remote_feat_complete+0x60>)
   11c14:	f842 3f10 	str.w	r3, [r2, #16]!
   11c18:	f01e f842 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11c1c:	46a5      	mov	sp, r4
}
   11c1e:	46bd      	mov	sp, r7
   11c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   11c22:	782b      	ldrb	r3, [r5, #0]
   11c24:	b93b      	cbnz	r3, 11c36 <le_remote_feat_complete+0x4a>
   11c26:	f8d5 3003 	ldr.w	r3, [r5, #3]
   11c2a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   11c2e:	f8d5 3007 	ldr.w	r3, [r5, #7]
   11c32:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   11c3a:	1d20      	adds	r0, r4, #4
   11c3c:	f01e f819 	bl	2fc72 <atomic_or>
	bt_conn_unref(conn);
   11c40:	4620      	mov	r0, r4
   11c42:	f002 fc3b 	bl	144bc <bt_conn_unref>
   11c46:	e7ea      	b.n	11c1e <le_remote_feat_complete+0x32>
   11c48:	00039cc4 	.word	0x00039cc4
   11c4c:	00036420 	.word	0x00036420

00011c50 <hci_cmd_done>:
{
   11c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c54:	4606      	mov	r6, r0
   11c56:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11c58:	7a90      	ldrb	r0, [r2, #10]
{
   11c5a:	4688      	mov	r8, r1
   11c5c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11c5e:	f006 fa79 	bl	18154 <net_buf_pool_get>
   11c62:	4d41      	ldr	r5, [pc, #260]	; (11d68 <hci_cmd_done+0x118>)
   11c64:	4285      	cmp	r5, r0
   11c66:	d018      	beq.n	11c9a <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   11c68:	7aa4      	ldrb	r4, [r4, #10]
   11c6a:	46e8      	mov	r8, sp
   11c6c:	4620      	mov	r0, r4
   11c6e:	f006 fa71 	bl	18154 <net_buf_pool_get>
   11c72:	b08a      	sub	sp, #40	; 0x28
   11c74:	466a      	mov	r2, sp
   11c76:	4b3d      	ldr	r3, [pc, #244]	; (11d6c <hci_cmd_done+0x11c>)
   11c78:	e9c2 4007 	strd	r4, r0, [r2, #28]
   11c7c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   11c80:	2306      	movs	r3, #6
   11c82:	6255      	str	r5, [r2, #36]	; 0x24
   11c84:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   11c88:	4839      	ldr	r0, [pc, #228]	; (11d70 <hci_cmd_done+0x120>)
   11c8a:	f842 3f10 	str.w	r3, [r2, #16]!
   11c8e:	f01e f807 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11c92:	46c5      	mov	sp, r8
}
   11c94:	46bd      	mov	sp, r7
   11c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   11c9a:	4620      	mov	r0, r4
   11c9c:	f006 fa62 	bl	18164 <net_buf_id>
   11ca0:	f04f 090c 	mov.w	r9, #12
   11ca4:	4d33      	ldr	r5, [pc, #204]	; (11d74 <hci_cmd_done+0x124>)
   11ca6:	fb09 5000 	mla	r0, r9, r0, r5
   11caa:	8843      	ldrh	r3, [r0, #2]
   11cac:	42b3      	cmp	r3, r6
   11cae:	d016      	beq.n	11cde <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   11cb0:	4620      	mov	r0, r4
   11cb2:	f006 fa57 	bl	18164 <net_buf_id>
   11cb6:	fb09 5000 	mla	r0, r9, r0, r5
   11cba:	466c      	mov	r4, sp
   11cbc:	b088      	sub	sp, #32
   11cbe:	466a      	mov	r2, sp
   11cc0:	8843      	ldrh	r3, [r0, #2]
   11cc2:	61d3      	str	r3, [r2, #28]
   11cc4:	2304      	movs	r3, #4
   11cc6:	492c      	ldr	r1, [pc, #176]	; (11d78 <hci_cmd_done+0x128>)
   11cc8:	4829      	ldr	r0, [pc, #164]	; (11d70 <hci_cmd_done+0x120>)
   11cca:	e9c2 1605 	strd	r1, r6, [r2, #20]
   11cce:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   11cd2:	f842 3f10 	str.w	r3, [r2, #16]!
   11cd6:	f01d ffe3 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11cda:	46a5      	mov	sp, r4
		return;
   11cdc:	e7da      	b.n	11c94 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   11cde:	4e27      	ldr	r6, [pc, #156]	; (11d7c <hci_cmd_done+0x12c>)
   11ce0:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   11ce4:	b120      	cbz	r0, 11cf0 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   11ce6:	f006 fb83 	bl	183f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11cea:	2300      	movs	r3, #0
   11cec:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   11cf0:	4620      	mov	r0, r4
   11cf2:	f006 fa37 	bl	18164 <net_buf_id>
   11cf6:	260c      	movs	r6, #12
   11cf8:	fb06 5000 	mla	r0, r6, r0, r5
   11cfc:	6843      	ldr	r3, [r0, #4]
   11cfe:	b1ab      	cbz	r3, 11d2c <hci_cmd_done+0xdc>
   11d00:	f1b8 0f00 	cmp.w	r8, #0
   11d04:	d112      	bne.n	11d2c <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11d06:	4620      	mov	r0, r4
   11d08:	f006 fa2c 	bl	18164 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11d0c:	2101      	movs	r1, #1
   11d0e:	fb06 5000 	mla	r0, r6, r0, r5
   11d12:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   11d14:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   11d18:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   11d1a:	f003 061f 	and.w	r6, r3, #31
   11d1e:	40b1      	lsls	r1, r6
	if (val) {
   11d20:	095b      	lsrs	r3, r3, #5
   11d22:	b1da      	cbz	r2, 11d5c <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11d24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11d28:	f01d ffa3 	bl	2fc72 <atomic_or>
	if (cmd(buf)->sync) {
   11d2c:	4620      	mov	r0, r4
   11d2e:	f006 fa19 	bl	18164 <net_buf_id>
   11d32:	260c      	movs	r6, #12
   11d34:	fb06 5000 	mla	r0, r6, r0, r5
   11d38:	6883      	ldr	r3, [r0, #8]
   11d3a:	2b00      	cmp	r3, #0
   11d3c:	d0aa      	beq.n	11c94 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   11d3e:	4620      	mov	r0, r4
   11d40:	f006 fa10 	bl	18164 <net_buf_id>
   11d44:	4370      	muls	r0, r6
   11d46:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   11d4a:	4620      	mov	r0, r4
   11d4c:	f006 fa0a 	bl	18164 <net_buf_id>
   11d50:	fb06 5500 	mla	r5, r6, r0, r5
   11d54:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   11d56:	f016 fff7 	bl	28d48 <z_impl_k_sem_give>
}
   11d5a:	e79b      	b.n	11c94 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11d5c:	43c9      	mvns	r1, r1
   11d5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11d62:	f01d ffa0 	bl	2fca6 <atomic_and.isra.0>
   11d66:	e7e1      	b.n	11d2c <hci_cmd_done+0xdc>
   11d68:	2000d150 	.word	0x2000d150
   11d6c:	00039d76 	.word	0x00039d76
   11d70:	00036420 	.word	0x00036420
   11d74:	2000fb64 	.word	0x2000fb64
   11d78:	00039dab 	.word	0x00039dab
   11d7c:	2000c580 	.word	0x2000c580

00011d80 <hci_cmd_status>:
{
   11d80:	b538      	push	{r3, r4, r5, lr}
   11d82:	2104      	movs	r1, #4
   11d84:	4604      	mov	r4, r0
   11d86:	300c      	adds	r0, #12
   11d88:	f006 fc58 	bl	1863c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   11d8c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   11d8e:	7801      	ldrb	r1, [r0, #0]
   11d90:	4622      	mov	r2, r4
   11d92:	8840      	ldrh	r0, [r0, #2]
   11d94:	f7ff ff5c 	bl	11c50 <hci_cmd_done>
	if (ncmd) {
   11d98:	b125      	cbz	r5, 11da4 <hci_cmd_status+0x24>
}
   11d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   11d9e:	4802      	ldr	r0, [pc, #8]	; (11da8 <hci_cmd_status+0x28>)
   11da0:	f016 bfd2 	b.w	28d48 <z_impl_k_sem_give>
   11da4:	bd38      	pop	{r3, r4, r5, pc}
   11da6:	bf00      	nop
   11da8:	2000c6a0 	.word	0x2000c6a0

00011dac <hci_cmd_complete>:
{
   11dac:	b538      	push	{r3, r4, r5, lr}
   11dae:	2103      	movs	r1, #3
   11db0:	4604      	mov	r4, r0
   11db2:	300c      	adds	r0, #12
   11db4:	f006 fc42 	bl	1863c <net_buf_simple_pull_mem>
	status = buf->data[0];
   11db8:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   11dba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   11dbc:	4622      	mov	r2, r4
   11dbe:	7819      	ldrb	r1, [r3, #0]
   11dc0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   11dc4:	f7ff ff44 	bl	11c50 <hci_cmd_done>
	if (ncmd) {
   11dc8:	b125      	cbz	r5, 11dd4 <hci_cmd_complete+0x28>
}
   11dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11dce:	4802      	ldr	r0, [pc, #8]	; (11dd8 <hci_cmd_complete+0x2c>)
   11dd0:	f016 bfba 	b.w	28d48 <z_impl_k_sem_give>
   11dd4:	bd38      	pop	{r3, r4, r5, pc}
   11dd6:	bf00      	nop
   11dd8:	2000c6a0 	.word	0x2000c6a0

00011ddc <hci_num_completed_packets>:
{
   11ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de0:	b087      	sub	sp, #28
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   11de2:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   11de4:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   11de8:	8a01      	ldrh	r1, [r0, #16]
   11dea:	f898 4000 	ldrb.w	r4, [r8]
{
   11dee:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   11df0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11df4:	428b      	cmp	r3, r1
   11df6:	f240 808c 	bls.w	11f12 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   11dfa:	466d      	mov	r5, sp
   11dfc:	b08a      	sub	sp, #40	; 0x28
   11dfe:	466a      	mov	r2, sp
   11e00:	e9c2 3107 	strd	r3, r1, [r2, #28]
   11e04:	2305      	movs	r3, #5
   11e06:	4845      	ldr	r0, [pc, #276]	; (11f1c <hci_num_completed_packets+0x140>)
   11e08:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   11e0c:	e9c2 0405 	strd	r0, r4, [r2, #20]
   11e10:	4843      	ldr	r0, [pc, #268]	; (11f20 <hci_num_completed_packets+0x144>)
   11e12:	f842 3f10 	str.w	r3, [r2, #16]!
   11e16:	f01d ff43 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11e1a:	46ad      	mov	sp, r5
}
   11e1c:	371c      	adds	r7, #28
   11e1e:	46bd      	mov	sp, r7
   11e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   11e24:	466c      	mov	r4, sp
   11e26:	b088      	sub	sp, #32
   11e28:	466a      	mov	r2, sp
   11e2a:	4b3e      	ldr	r3, [pc, #248]	; (11f24 <hci_num_completed_packets+0x148>)
   11e2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e30:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   11e34:	2303      	movs	r3, #3
   11e36:	483a      	ldr	r0, [pc, #232]	; (11f20 <hci_num_completed_packets+0x144>)
   11e38:	f842 3f10 	str.w	r3, [r2, #16]!
   11e3c:	f01d ff30 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11e40:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   11e42:	3501      	adds	r5, #1
   11e44:	f898 3000 	ldrb.w	r3, [r8]
   11e48:	429d      	cmp	r5, r3
   11e4a:	dae7      	bge.n	11e1c <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   11e4c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   11e50:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   11e54:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   11e58:	4658      	mov	r0, fp
   11e5a:	f002 fb53 	bl	14504 <bt_conn_lookup_handle>
		if (!conn) {
   11e5e:	4604      	mov	r4, r0
   11e60:	2800      	cmp	r0, #0
   11e62:	d0df      	beq.n	11e24 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   11e64:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   11e68:	b346      	cbz	r6, 11ebc <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   11e6a:	f04f 0320 	mov.w	r3, #32
   11e6e:	f3ef 8211 	mrs	r2, BASEPRI
   11e72:	f383 8812 	msr	BASEPRI_MAX, r3
   11e76:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   11e7a:	69e3      	ldr	r3, [r4, #28]
   11e7c:	b16b      	cbz	r3, 11e9a <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   11e7e:	3b01      	subs	r3, #1
   11e80:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11e82:	f382 8811 	msr	BASEPRI, r2
   11e86:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   11e8a:	4620      	mov	r0, r4
   11e8c:	f002 f912 	bl	140b4 <bt_conn_get_pkts>
   11e90:	3e01      	subs	r6, #1
   11e92:	f016 ff59 	bl	28d48 <z_impl_k_sem_give>
   11e96:	b2b6      	uxth	r6, r6
   11e98:	e7e6      	b.n	11e68 <hci_num_completed_packets+0x8c>
	return list->head;
   11e9a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   11e9c:	b993      	cbnz	r3, 11ec4 <hci_num_completed_packets+0xe8>
   11e9e:	f382 8811 	msr	BASEPRI, r2
   11ea2:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   11ea6:	2302      	movs	r3, #2
   11ea8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11eac:	481c      	ldr	r0, [pc, #112]	; (11f20 <hci_num_completed_packets+0x144>)
   11eae:	f107 0210 	add.w	r2, r7, #16
   11eb2:	f8c7 a014 	str.w	sl, [r7, #20]
   11eb6:	613b      	str	r3, [r7, #16]
   11eb8:	f01d fef2 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   11ebc:	4620      	mov	r0, r4
   11ebe:	f002 fafd 	bl	144bc <bt_conn_unref>
   11ec2:	e7be      	b.n	11e42 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11ec4:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   11ec6:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11ec8:	428b      	cmp	r3, r1
	list->head = node;
   11eca:	6160      	str	r0, [r4, #20]
	list->tail = node;
   11ecc:	bf08      	it	eq
   11ece:	61a0      	streq	r0, [r4, #24]
   11ed0:	f382 8811 	msr	BASEPRI, r2
   11ed4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11ed8:	f04f 0220 	mov.w	r2, #32
   11edc:	f3ef 8111 	mrs	r1, BASEPRI
   11ee0:	f382 8812 	msr	BASEPRI_MAX, r2
   11ee4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   11ee8:	68da      	ldr	r2, [r3, #12]
   11eea:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   11eec:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   11ef0:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   11ef4:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   11ef6:	b94a      	cbnz	r2, 11f0c <hci_num_completed_packets+0x130>
	list->head = node;
   11ef8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   11efc:	f381 8811 	msr	BASEPRI, r1
   11f00:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   11f04:	4658      	mov	r0, fp
   11f06:	f017 fa8d 	bl	29424 <k_work_submit>
   11f0a:	e7be      	b.n	11e8a <hci_num_completed_packets+0xae>
	parent->next = child;
   11f0c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11f0e:	6263      	str	r3, [r4, #36]	; 0x24
}
   11f10:	e7f4      	b.n	11efc <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   11f12:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   11f14:	f8df a010 	ldr.w	sl, [pc, #16]	; 11f28 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   11f18:	46a9      	mov	r9, r5
   11f1a:	e793      	b.n	11e44 <hci_num_completed_packets+0x68>
   11f1c:	00039dde 	.word	0x00039dde
   11f20:	00036420 	.word	0x00036420
   11f24:	00039e08 	.word	0x00039e08
   11f28:	00039e24 	.word	0x00039e24

00011f2c <hci_disconn_complete>:
{
   11f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f30:	68c6      	ldr	r6, [r0, #12]
{
   11f32:	af00      	add	r7, sp, #0
	if (evt->status) {
   11f34:	7835      	ldrb	r5, [r6, #0]
   11f36:	b9ad      	cbnz	r5, 11f64 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f38:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   11f3c:	4640      	mov	r0, r8
   11f3e:	f002 fae1 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   11f42:	4604      	mov	r4, r0
   11f44:	b988      	cbnz	r0, 11f6a <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11f46:	466c      	mov	r4, sp
   11f48:	b088      	sub	sp, #32
   11f4a:	466a      	mov	r2, sp
   11f4c:	4b13      	ldr	r3, [pc, #76]	; (11f9c <hci_disconn_complete+0x70>)
   11f4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11f52:	e9c2 3805 	strd	r3, r8, [r2, #20]
   11f56:	2303      	movs	r3, #3
   11f58:	4811      	ldr	r0, [pc, #68]	; (11fa0 <hci_disconn_complete+0x74>)
   11f5a:	f842 3f10 	str.w	r3, [r2, #16]!
   11f5e:	f01d fe9f 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   11f62:	46a5      	mov	sp, r4
}
   11f64:	46bd      	mov	sp, r7
   11f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   11f6a:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11f6c:	4629      	mov	r1, r5
	conn->err = evt->reason;
   11f6e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11f70:	f002 fad0 	bl	14514 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   11f74:	78a3      	ldrb	r3, [r4, #2]
   11f76:	2b01      	cmp	r3, #1
   11f78:	d003      	beq.n	11f82 <hci_disconn_complete+0x56>
	bt_conn_unref(conn);
   11f7a:	4620      	mov	r0, r4
   11f7c:	f002 fa9e 	bl	144bc <bt_conn_unref>
   11f80:	e7f0      	b.n	11f64 <hci_disconn_complete+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f82:	1d23      	adds	r3, r4, #4
   11f84:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   11f88:	07db      	lsls	r3, r3, #31
   11f8a:	d5f6      	bpl.n	11f7a <hci_disconn_complete+0x4e>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   11f8c:	4620      	mov	r0, r4
   11f8e:	2102      	movs	r1, #2
   11f90:	f002 fac0 	bl	14514 <bt_conn_set_state>
		bt_le_scan_update(false);
   11f94:	4628      	mov	r0, r5
   11f96:	f001 fcbb 	bl	13910 <bt_le_scan_update>
   11f9a:	e7ee      	b.n	11f7a <hci_disconn_complete+0x4e>
   11f9c:	00039e3b 	.word	0x00039e3b
   11fa0:	00036420 	.word	0x00036420

00011fa4 <bt_hci_cmd_state_set_init>:
{
   11fa4:	b510      	push	{r4, lr}
	state->bit = bit;
   11fa6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   11faa:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   11fae:	460c      	mov	r4, r1
	state->val = val;
   11fb0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   11fb2:	f006 f8d7 	bl	18164 <net_buf_id>
   11fb6:	220c      	movs	r2, #12
   11fb8:	4b02      	ldr	r3, [pc, #8]	; (11fc4 <bt_hci_cmd_state_set_init+0x20>)
   11fba:	fb02 3300 	mla	r3, r2, r0, r3
   11fbe:	605c      	str	r4, [r3, #4]
}
   11fc0:	bd10      	pop	{r4, pc}
   11fc2:	bf00      	nop
   11fc4:	2000fb64 	.word	0x2000fb64

00011fc8 <bt_hci_cmd_create>:
{
   11fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   11fcc:	f04f 32ff 	mov.w	r2, #4294967295
   11fd0:	4606      	mov	r6, r0
   11fd2:	f04f 33ff 	mov.w	r3, #4294967295
   11fd6:	481e      	ldr	r0, [pc, #120]	; (12050 <bt_hci_cmd_create+0x88>)
   11fd8:	460f      	mov	r7, r1
   11fda:	f01f f8e7 	bl	311ac <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   11fde:	4604      	mov	r4, r0
   11fe0:	b958      	cbnz	r0, 11ffa <bt_hci_cmd_create+0x32>
   11fe2:	491c      	ldr	r1, [pc, #112]	; (12054 <bt_hci_cmd_create+0x8c>)
   11fe4:	481c      	ldr	r0, [pc, #112]	; (12058 <bt_hci_cmd_create+0x90>)
   11fe6:	f44f 7381 	mov.w	r3, #258	; 0x102
   11fea:	4a1c      	ldr	r2, [pc, #112]	; (1205c <bt_hci_cmd_create+0x94>)
   11fec:	f01c fcb2 	bl	2e954 <assert_print>
   11ff0:	f44f 7181 	mov.w	r1, #258	; 0x102
   11ff4:	4819      	ldr	r0, [pc, #100]	; (1205c <bt_hci_cmd_create+0x94>)
   11ff6:	f01c fca6 	bl	2e946 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11ffa:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   11ffe:	f100 0a0c 	add.w	sl, r0, #12
   12002:	2100      	movs	r1, #0
   12004:	4650      	mov	r0, sl
   12006:	f006 fab9 	bl	1857c <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   1200a:	4620      	mov	r0, r4
   1200c:	f884 8018 	strb.w	r8, [r4, #24]
   12010:	f006 f8a8 	bl	18164 <net_buf_id>
   12014:	f04f 090c 	mov.w	r9, #12
   12018:	4d11      	ldr	r5, [pc, #68]	; (12060 <bt_hci_cmd_create+0x98>)
   1201a:	fb09 5000 	mla	r0, r9, r0, r5
   1201e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12020:	4620      	mov	r0, r4
   12022:	f006 f89f 	bl	18164 <net_buf_id>
   12026:	fb09 5000 	mla	r0, r9, r0, r5
   1202a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1202e:	4620      	mov	r0, r4
   12030:	f006 f898 	bl	18164 <net_buf_id>
   12034:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12038:	2103      	movs	r1, #3
   1203a:	4650      	mov	r0, sl
   1203c:	f8c5 8004 	str.w	r8, [r5, #4]
   12040:	f006 fb1a 	bl	18678 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12044:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12046:	7087      	strb	r7, [r0, #2]
}
   12048:	4620      	mov	r0, r4
   1204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1204e:	bf00      	nop
   12050:	2000d150 	.word	0x2000d150
   12054:	0003b28a 	.word	0x0003b28a
   12058:	000381c3 	.word	0x000381c3
   1205c:	00039e61 	.word	0x00039e61
   12060:	2000fb64 	.word	0x2000fb64

00012064 <bt_hci_cmd_send_sync>:
{
   12064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12068:	b087      	sub	sp, #28
   1206a:	4606      	mov	r6, r0
   1206c:	4615      	mov	r5, r2
	if (!buf) {
   1206e:	460c      	mov	r4, r1
{
   12070:	af00      	add	r7, sp, #0
	if (!buf) {
   12072:	b921      	cbnz	r1, 1207e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12074:	f7ff ffa8 	bl	11fc8 <bt_hci_cmd_create>
		if (!buf) {
   12078:	4604      	mov	r4, r0
   1207a:	2800      	cmp	r0, #0
   1207c:	d05f      	beq.n	1213e <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1207e:	2201      	movs	r2, #1
   12080:	2100      	movs	r1, #0
   12082:	4638      	mov	r0, r7
   12084:	f022 fdd5 	bl	34c32 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12088:	4620      	mov	r0, r4
   1208a:	f006 f86b 	bl	18164 <net_buf_id>
   1208e:	230c      	movs	r3, #12
   12090:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 12144 <bt_hci_cmd_send_sync+0xe0>
   12094:	fb03 9000 	mla	r0, r3, r0, r9
   12098:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1209a:	4620      	mov	r0, r4
   1209c:	f006 f9ec 	bl	18478 <net_buf_ref>
   120a0:	4601      	mov	r1, r0
   120a2:	4829      	ldr	r0, [pc, #164]	; (12148 <bt_hci_cmd_send_sync+0xe4>)
   120a4:	f006 f97e 	bl	183a4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   120a8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   120ac:	2300      	movs	r3, #0
   120ae:	4638      	mov	r0, r7
   120b0:	f016 fe8e 	bl	28dd0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   120b4:	4680      	mov	r8, r0
   120b6:	b188      	cbz	r0, 120dc <bt_hci_cmd_send_sync+0x78>
   120b8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   120bc:	4a23      	ldr	r2, [pc, #140]	; (1214c <bt_hci_cmd_send_sync+0xe8>)
   120be:	4924      	ldr	r1, [pc, #144]	; (12150 <bt_hci_cmd_send_sync+0xec>)
   120c0:	4824      	ldr	r0, [pc, #144]	; (12154 <bt_hci_cmd_send_sync+0xf0>)
   120c2:	f01c fc47 	bl	2e954 <assert_print>
   120c6:	4642      	mov	r2, r8
   120c8:	4631      	mov	r1, r6
   120ca:	4823      	ldr	r0, [pc, #140]	; (12158 <bt_hci_cmd_send_sync+0xf4>)
   120cc:	f01c fc42 	bl	2e954 <assert_print>
   120d0:	4040      	eors	r0, r0
   120d2:	f380 8811 	msr	BASEPRI, r0
   120d6:	f04f 0003 	mov.w	r0, #3
   120da:	df02      	svc	2
	status = cmd(buf)->status;
   120dc:	4620      	mov	r0, r4
   120de:	f006 f841 	bl	18164 <net_buf_id>
   120e2:	230c      	movs	r3, #12
   120e4:	4358      	muls	r0, r3
   120e6:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   120ea:	f1b8 0f00 	cmp.w	r8, #0
   120ee:	d01e      	beq.n	1212e <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   120f0:	466d      	mov	r5, sp
   120f2:	b088      	sub	sp, #32
   120f4:	466a      	mov	r2, sp
   120f6:	4b19      	ldr	r3, [pc, #100]	; (1215c <bt_hci_cmd_send_sync+0xf8>)
   120f8:	f8c2 801c 	str.w	r8, [r2, #28]
   120fc:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12100:	2304      	movs	r3, #4
   12102:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12106:	4816      	ldr	r0, [pc, #88]	; (12160 <bt_hci_cmd_send_sync+0xfc>)
   12108:	f842 3f10 	str.w	r3, [r2, #16]!
   1210c:	f01d fdc8 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   12110:	4620      	mov	r0, r4
   12112:	46ad      	mov	sp, r5
   12114:	f006 f96c 	bl	183f0 <net_buf_unref>
			return -ECONNREFUSED;
   12118:	f1b8 0f09 	cmp.w	r8, #9
   1211c:	bf14      	ite	ne
   1211e:	f06f 0004 	mvnne.w	r0, #4
   12122:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   12126:	371c      	adds	r7, #28
   12128:	46bd      	mov	sp, r7
   1212a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   1212e:	b115      	cbz	r5, 12136 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   12130:	602c      	str	r4, [r5, #0]
	return 0;
   12132:	2000      	movs	r0, #0
   12134:	e7f7      	b.n	12126 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   12136:	4620      	mov	r0, r4
   12138:	f006 f95a 	bl	183f0 <net_buf_unref>
   1213c:	e7f9      	b.n	12132 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   1213e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12142:	e7f0      	b.n	12126 <bt_hci_cmd_send_sync+0xc2>
   12144:	2000fb64 	.word	0x2000fb64
   12148:	2000c6bc 	.word	0x2000c6bc
   1214c:	00039e61 	.word	0x00039e61
   12150:	00038711 	.word	0x00038711
   12154:	000381c3 	.word	0x000381c3
   12158:	00039e95 	.word	0x00039e95
   1215c:	00039ec1 	.word	0x00039ec1
   12160:	00036420 	.word	0x00036420

00012164 <hci_le_read_max_data_len>:
{
   12164:	b570      	push	{r4, r5, r6, lr}
   12166:	b088      	sub	sp, #32
   12168:	4606      	mov	r6, r0
   1216a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1216c:	f242 002f 	movw	r0, #8239	; 0x202f
   12170:	2100      	movs	r1, #0
   12172:	aa01      	add	r2, sp, #4
   12174:	f7ff ff76 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12178:	4604      	mov	r4, r0
   1217a:	b160      	cbz	r0, 12196 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   1217c:	4b0b      	ldr	r3, [pc, #44]	; (121ac <hci_le_read_max_data_len+0x48>)
   1217e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12182:	9307      	str	r3, [sp, #28]
   12184:	2302      	movs	r3, #2
   12186:	480a      	ldr	r0, [pc, #40]	; (121b0 <hci_le_read_max_data_len+0x4c>)
   12188:	aa06      	add	r2, sp, #24
   1218a:	9306      	str	r3, [sp, #24]
   1218c:	f01d fd88 	bl	2fca0 <z_log_msg_static_create.constprop.0>
}
   12190:	4620      	mov	r0, r4
   12192:	b008      	add	sp, #32
   12194:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   12196:	9801      	ldr	r0, [sp, #4]
   12198:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1219a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1219e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   121a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   121a4:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   121a6:	f006 f923 	bl	183f0 <net_buf_unref>
	return 0;
   121aa:	e7f1      	b.n	12190 <hci_le_read_max_data_len+0x2c>
   121ac:	00039edd 	.word	0x00039edd
   121b0:	00036420 	.word	0x00036420

000121b4 <bt_hci_le_rand>:
{
   121b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   121b6:	4b14      	ldr	r3, [pc, #80]	; (12208 <bt_hci_le_rand+0x54>)
{
   121b8:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   121ba:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
   121be:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   121c0:	2b00      	cmp	r3, #0
   121c2:	da1d      	bge.n	12200 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   121c4:	b914      	cbnz	r4, 121cc <bt_hci_le_rand+0x18>
	return 0;
   121c6:	4620      	mov	r0, r4
}
   121c8:	b003      	add	sp, #12
   121ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   121cc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   121ce:	f04f 0100 	mov.w	r1, #0
   121d2:	f242 0018 	movw	r0, #8216	; 0x2018
   121d6:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   121d8:	4626      	mov	r6, r4
   121da:	bf28      	it	cs
   121dc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   121de:	f7ff ff41 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   121e2:	2800      	cmp	r0, #0
   121e4:	d1f0      	bne.n	121c8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   121e6:	9f01      	ldr	r7, [sp, #4]
   121e8:	4632      	mov	r2, r6
   121ea:	68f9      	ldr	r1, [r7, #12]
   121ec:	4628      	mov	r0, r5
   121ee:	3101      	adds	r1, #1
   121f0:	f022 fefc 	bl	34fec <memcpy>
		net_buf_unref(rsp);
   121f4:	4638      	mov	r0, r7
   121f6:	f006 f8fb 	bl	183f0 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   121fa:	4435      	add	r5, r6
		len -= count;
   121fc:	1ba4      	subs	r4, r4, r6
   121fe:	e7e1      	b.n	121c4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   12200:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12204:	e7e0      	b.n	121c8 <bt_hci_le_rand+0x14>
   12206:	bf00      	nop
   12208:	2000c580 	.word	0x2000c580

0001220c <bt_le_create_conn>:
{
   1220c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1220e:	b087      	sub	sp, #28
   12210:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   12212:	f10d 010b 	add.w	r1, sp, #11
   12216:	2000      	movs	r0, #0
   12218:	f001 faa0 	bl	1375c <bt_id_set_create_conn_own_addr>
	if (err) {
   1221c:	4604      	mov	r4, r0
   1221e:	2800      	cmp	r0, #0
   12220:	d13c      	bne.n	1229c <bt_le_create_conn+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   12222:	2119      	movs	r1, #25
   12224:	f242 000d 	movw	r0, #8205	; 0x200d
   12228:	f7ff fece 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   1222c:	4607      	mov	r7, r0
   1222e:	b3c0      	cbz	r0, 122a2 <bt_le_create_conn+0x96>
   12230:	2119      	movs	r1, #25
   12232:	300c      	adds	r0, #12
   12234:	f006 fa20 	bl	18678 <net_buf_simple_add>
   12238:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1223a:	4621      	mov	r1, r4
   1223c:	2219      	movs	r2, #25
   1223e:	f022 fef5 	bl	3502c <memset>
	cp->own_addr_type = own_addr_type;
   12242:	f89d 300b 	ldrb.w	r3, [sp, #11]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12246:	4a18      	ldr	r2, [pc, #96]	; (122a8 <bt_le_create_conn+0x9c>)
	cp->own_addr_type = own_addr_type;
   12248:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   1224a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1224e:	1d68      	adds	r0, r5, #5
   12250:	f01d fd1a 	bl	2fc88 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12254:	8993      	ldrh	r3, [r2, #12]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   12256:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12258:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1225a:	89d3      	ldrh	r3, [r2, #14]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1225c:	32d4      	adds	r2, #212	; 0xd4
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1225e:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   12260:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   12264:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   12268:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   1226c:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   12270:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   12274:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   12278:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   1227c:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   12280:	2301      	movs	r3, #1
   12282:	9300      	str	r3, [sp, #0]
   12284:	230c      	movs	r3, #12
   12286:	eb0d 0103 	add.w	r1, sp, r3
   1228a:	f7ff fe8b 	bl	11fa4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1228e:	4622      	mov	r2, r4
   12290:	4639      	mov	r1, r7
   12292:	f242 000d 	movw	r0, #8205	; 0x200d
   12296:	f7ff fee5 	bl	12064 <bt_hci_cmd_send_sync>
   1229a:	4604      	mov	r4, r0
}
   1229c:	4620      	mov	r0, r4
   1229e:	b007      	add	sp, #28
   122a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   122a2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   122a6:	e7f9      	b.n	1229c <bt_le_create_conn+0x90>
   122a8:	2000c580 	.word	0x2000c580

000122ac <bt_le_create_conn_cancel>:
{
   122ac:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   122ae:	2100      	movs	r1, #0
{
   122b0:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   122b2:	f242 000e 	movw	r0, #8206	; 0x200e
   122b6:	f7ff fe87 	bl	11fc8 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   122ba:	2500      	movs	r5, #0
   122bc:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   122be:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   122c0:	eb0d 0103 	add.w	r1, sp, r3
   122c4:	4a05      	ldr	r2, [pc, #20]	; (122dc <bt_le_create_conn_cancel+0x30>)
   122c6:	9500      	str	r5, [sp, #0]
   122c8:	f7ff fe6c 	bl	11fa4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   122cc:	462a      	mov	r2, r5
   122ce:	4621      	mov	r1, r4
   122d0:	f242 000e 	movw	r0, #8206	; 0x200e
   122d4:	f7ff fec6 	bl	12064 <bt_hci_cmd_send_sync>
}
   122d8:	b007      	add	sp, #28
   122da:	bd30      	pop	{r4, r5, pc}
   122dc:	2000c654 	.word	0x2000c654

000122e0 <bt_hci_le_enh_conn_complete>:
{
   122e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122e4:	b08d      	sub	sp, #52	; 0x34
   122e6:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
   122e8:	4ba7      	ldr	r3, [pc, #668]	; (12588 <bt_hci_le_enh_conn_complete+0x2a8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   122ea:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   122ee:	8819      	ldrh	r1, [r3, #0]
   122f0:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
	if (evt->status) {
   122f4:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   122f6:	4291      	cmp	r1, r2
			disconnected_handles[i] = 0;
   122f8:	bf08      	it	eq
   122fa:	801e      	strheq	r6, [r3, #0]
{
   122fc:	4605      	mov	r5, r0
			return true;
   122fe:	bf08      	it	eq
   12300:	2601      	moveq	r6, #1
{
   12302:	af02      	add	r7, sp, #8
	if (evt->status) {
   12304:	2c00      	cmp	r4, #0
   12306:	d03a      	beq.n	1237e <bt_hci_le_enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12308:	2c02      	cmp	r4, #2
   1230a:	d128      	bne.n	1235e <bt_hci_le_enh_conn_complete+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1230c:	2100      	movs	r1, #0
   1230e:	2206      	movs	r2, #6
   12310:	4608      	mov	r0, r1
   12312:	f002 fbc5 	bl	14aa0 <bt_conn_lookup_state_le>
	if (!conn) {
   12316:	4605      	mov	r5, r0
   12318:	b980      	cbnz	r0, 1233c <bt_hci_le_enh_conn_complete+0x5c>
		LOG_ERR("No pending central connection");
   1231a:	4b9c      	ldr	r3, [pc, #624]	; (1258c <bt_hci_le_enh_conn_complete+0x2ac>)
   1231c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12320:	e9c7 4308 	strd	r4, r3, [r7, #32]
   12324:	489a      	ldr	r0, [pc, #616]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   12326:	f107 0220 	add.w	r2, r7, #32
   1232a:	f01d fcb9 	bl	2fca0 <z_log_msg_static_create.constprop.0>
			bt_le_scan_update(false);
   1232e:	2000      	movs	r0, #0
   12330:	f001 faee 	bl	13910 <bt_le_scan_update>
}
   12334:	372c      	adds	r7, #44	; 0x2c
   12336:	46bd      	mov	sp, r7
   12338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1233c:	2100      	movs	r1, #0
	conn->err = err;
   1233e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12340:	f002 f8e8 	bl	14514 <bt_conn_set_state>
   12344:	1d2b      	adds	r3, r5, #4
   12346:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1234a:	07de      	lsls	r6, r3, #31
   1234c:	d503      	bpl.n	12356 <bt_hci_le_enh_conn_complete+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   1234e:	4621      	mov	r1, r4
   12350:	4628      	mov	r0, r5
   12352:	f002 f8df 	bl	14514 <bt_conn_set_state>
	bt_conn_unref(conn);
   12356:	4628      	mov	r0, r5
   12358:	f002 f8b0 	bl	144bc <bt_conn_unref>
   1235c:	e7e7      	b.n	1232e <bt_hci_le_enh_conn_complete+0x4e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1235e:	466d      	mov	r5, sp
   12360:	b088      	sub	sp, #32
   12362:	aa02      	add	r2, sp, #8
   12364:	4b8b      	ldr	r3, [pc, #556]	; (12594 <bt_hci_le_enh_conn_complete+0x2b4>)
   12366:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1236a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1236e:	2303      	movs	r3, #3
   12370:	4887      	ldr	r0, [pc, #540]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   12372:	f842 3f10 	str.w	r3, [r2, #16]!
   12376:	f01d fc93 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   1237a:	46ad      	mov	sp, r5
		return;
   1237c:	e7da      	b.n	12334 <bt_hci_le_enh_conn_complete+0x54>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1237e:	78c3      	ldrb	r3, [r0, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   12380:	f100 0904 	add.w	r9, r0, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   12384:	2b01      	cmp	r3, #1
   12386:	bf08      	it	eq
   12388:	4b83      	ldreq	r3, [pc, #524]	; (12598 <bt_hci_le_enh_conn_complete+0x2b8>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   1238a:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1238c:	bf08      	it	eq
   1238e:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   12392:	f01d fc57 	bl	2fc44 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   12396:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   12398:	b338      	cbz	r0, 123ea <bt_hci_le_enh_conn_complete+0x10a>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   1239a:	f107 0010 	add.w	r0, r7, #16
   1239e:	f01d fc46 	bl	2fc2e <bt_addr_le_copy_resolved>
		bt_addr_copy(&peer_addr->a, &evt->peer_rpa);
   123a2:	f105 0111 	add.w	r1, r5, #17
   123a6:	f107 0009 	add.w	r0, r7, #9
   123aa:	f01d fc74 	bl	2fc96 <bt_addr_copy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   123ae:	2301      	movs	r3, #1
   123b0:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   123b2:	78e8      	ldrb	r0, [r5, #3]
   123b4:	b338      	cbz	r0, 12406 <bt_hci_le_enh_conn_complete+0x126>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   123b6:	4648      	mov	r0, r9
   123b8:	f7ff f94e 	bl	11658 <bt_addr_le_str>
   123bc:	466c      	mov	r4, sp
   123be:	b088      	sub	sp, #32
   123c0:	aa02      	add	r2, sp, #8
   123c2:	4b76      	ldr	r3, [pc, #472]	; (1259c <bt_hci_le_enh_conn_complete+0x2bc>)
   123c4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   123c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   123cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   123d0:	8393      	strh	r3, [r2, #28]
   123d2:	4b73      	ldr	r3, [pc, #460]	; (125a0 <bt_hci_le_enh_conn_complete+0x2c0>)
   123d4:	486e      	ldr	r0, [pc, #440]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   123d6:	f842 3f10 	str.w	r3, [r2, #16]!
   123da:	f01d fc61 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   123de:	211f      	movs	r1, #31
   123e0:	46a5      	mov	sp, r4
   123e2:	4640      	mov	r0, r8
   123e4:	f01d fc67 	bl	2fcb6 <bt_hci_disconnect>
		return;
   123e8:	e7a4      	b.n	12334 <bt_hci_le_enh_conn_complete+0x54>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   123ea:	4620      	mov	r0, r4
   123ec:	f01d fd1e 	bl	2fe2c <bt_lookup_id_addr>
   123f0:	4601      	mov	r1, r0
   123f2:	f107 0010 	add.w	r0, r7, #16
   123f6:	f01d fc47 	bl	2fc88 <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   123fa:	4649      	mov	r1, r9
   123fc:	f107 0008 	add.w	r0, r7, #8
   12400:	f01d fc42 	bl	2fc88 <bt_addr_le_copy>
   12404:	e7d5      	b.n	123b2 <bt_hci_le_enh_conn_complete+0xd2>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12406:	2206      	movs	r2, #6
   12408:	f107 0110 	add.w	r1, r7, #16
   1240c:	f002 fb48 	bl	14aa0 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12410:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12412:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12414:	b923      	cbnz	r3, 12420 <bt_hci_le_enh_conn_complete+0x140>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12416:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1241a:	4862      	ldr	r0, [pc, #392]	; (125a4 <bt_hci_le_enh_conn_complete+0x2c4>)
   1241c:	f01d fc43 	bl	2fca6 <atomic_and.isra.0>
	if (!conn) {
   12420:	2c00      	cmp	r4, #0
   12422:	d0c8      	beq.n	123b6 <bt_hci_le_enh_conn_complete+0xd6>
	conn->handle = sys_le16_to_cpu(evt->handle);
   12424:	4620      	mov	r0, r4
	conn->err = 0U;
   12426:	2200      	movs	r2, #0
	conn->handle = sys_le16_to_cpu(evt->handle);
   12428:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	bt_addr_le_copy(&conn->le.dst, id_addr);
   1242c:	f107 0110 	add.w	r1, r7, #16
	conn->handle = sys_le16_to_cpu(evt->handle);
   12430:	f820 3b90 	strh.w	r3, [r0], #144
	bt_addr_le_copy(&conn->le.dst, id_addr);
   12434:	f01d fc28 	bl	2fc88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12438:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1243c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12440:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12444:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12448:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1244c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12450:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12452:	7262      	strb	r2, [r4, #9]
	conn->role = evt->role;
   12454:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12456:	b973      	cbnz	r3, 12476 <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   12458:	f107 0108 	add.w	r1, r7, #8
   1245c:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12460:	f01d fc12 	bl	2fc88 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   12464:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   12466:	4b4c      	ldr	r3, [pc, #304]	; (12598 <bt_hci_le_enh_conn_complete+0x2b8>)
					&bt_dev.id_addr[conn->id]);
   12468:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1246c:	4419      	add	r1, r3
   1246e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12472:	f01d fc09 	bl	2fc88 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12476:	2107      	movs	r1, #7
   12478:	4620      	mov	r0, r4
   1247a:	f002 f84b 	bl	14514 <bt_conn_set_state>
	if (is_disconnected) {
   1247e:	b11e      	cbz	r6, 12488 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12480:	2101      	movs	r1, #1
   12482:	4620      	mov	r0, r4
   12484:	f002 f846 	bl	14514 <bt_conn_set_state>
	bt_conn_connected(conn);
   12488:	4620      	mov	r0, r4
   1248a:	f01d fd32 	bl	2fef2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1248e:	7aa3      	ldrb	r3, [r4, #10]
   12490:	2b07      	cmp	r3, #7
   12492:	d16e      	bne.n	12572 <bt_hci_le_enh_conn_complete+0x292>
   12494:	1d23      	adds	r3, r4, #4
   12496:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1249a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1249e:	4d3e      	ldr	r5, [pc, #248]	; (12598 <bt_hci_le_enh_conn_complete+0x2b8>)
   124a0:	d129      	bne.n	124f6 <bt_hci_le_enh_conn_complete+0x216>
   124a2:	78e3      	ldrb	r3, [r4, #3]
   124a4:	b11b      	cbz	r3, 124ae <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   124a6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   124aa:	0718      	lsls	r0, r3, #28
   124ac:	d523      	bpl.n	124f6 <bt_hci_le_enh_conn_complete+0x216>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   124ae:	2102      	movs	r1, #2
   124b0:	f242 0016 	movw	r0, #8214	; 0x2016
   124b4:	f7ff fd88 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   124b8:	4606      	mov	r6, r0
   124ba:	2800      	cmp	r0, #0
   124bc:	d061      	beq.n	12582 <bt_hci_le_enh_conn_complete+0x2a2>
   124be:	2102      	movs	r1, #2
   124c0:	300c      	adds	r0, #12
   124c2:	f006 f8d9 	bl	18678 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   124c6:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   124c8:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   124ca:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   124cc:	4631      	mov	r1, r6
   124ce:	f242 0016 	movw	r0, #8214	; 0x2016
   124d2:	f7ff fdc7 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   124d6:	b170      	cbz	r0, 124f6 <bt_hci_le_enh_conn_complete+0x216>
			LOG_ERR("Failed read remote features (%d)", err);
   124d8:	466e      	mov	r6, sp
   124da:	b088      	sub	sp, #32
   124dc:	aa02      	add	r2, sp, #8
   124de:	4b32      	ldr	r3, [pc, #200]	; (125a8 <bt_hci_le_enh_conn_complete+0x2c8>)
   124e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   124e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   124e8:	2303      	movs	r3, #3
   124ea:	4829      	ldr	r0, [pc, #164]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   124ec:	f842 3f10 	str.w	r3, [r2, #16]!
   124f0:	f01d fbd6 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   124f4:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   124f6:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   124fa:	07d9      	lsls	r1, r3, #31
   124fc:	d516      	bpl.n	1252c <bt_hci_le_enh_conn_complete+0x24c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   124fe:	2100      	movs	r1, #0
   12500:	2302      	movs	r3, #2
   12502:	4620      	mov	r0, r4
   12504:	461a      	mov	r2, r3
   12506:	9100      	str	r1, [sp, #0]
   12508:	f01d fc0e 	bl	2fd28 <bt_le_set_phy>
		if (err) {
   1250c:	b170      	cbz	r0, 1252c <bt_hci_le_enh_conn_complete+0x24c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   1250e:	466e      	mov	r6, sp
   12510:	b088      	sub	sp, #32
   12512:	aa02      	add	r2, sp, #8
   12514:	4b25      	ldr	r3, [pc, #148]	; (125ac <bt_hci_le_enh_conn_complete+0x2cc>)
   12516:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1251a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1251e:	2303      	movs	r3, #3
   12520:	481b      	ldr	r0, [pc, #108]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   12522:	f842 3f10 	str.w	r3, [r2, #16]!
   12526:	f01d fbbb 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   1252a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1252c:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   12530:	069a      	lsls	r2, r3, #26
   12532:	d51e      	bpl.n	12572 <bt_hci_le_enh_conn_complete+0x292>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12534:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   12538:	689b      	ldr	r3, [r3, #8]
   1253a:	079b      	lsls	r3, r3, #30
   1253c:	d519      	bpl.n	12572 <bt_hci_le_enh_conn_complete+0x292>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1253e:	1db9      	adds	r1, r7, #6
   12540:	1d38      	adds	r0, r7, #4
   12542:	f7ff fe0f 	bl	12164 <hci_le_read_max_data_len>
			if (!err) {
   12546:	b9a0      	cbnz	r0, 12572 <bt_hci_le_enh_conn_complete+0x292>
				err = bt_le_set_data_len(conn,
   12548:	4620      	mov	r0, r4
   1254a:	88fa      	ldrh	r2, [r7, #6]
   1254c:	88b9      	ldrh	r1, [r7, #4]
   1254e:	f01d fbcd 	bl	2fcec <bt_le_set_data_len>
				if (err) {
   12552:	b170      	cbz	r0, 12572 <bt_hci_le_enh_conn_complete+0x292>
					LOG_ERR("Failed to set data len (%d)", err);
   12554:	466d      	mov	r5, sp
   12556:	b088      	sub	sp, #32
   12558:	aa02      	add	r2, sp, #8
   1255a:	4b15      	ldr	r3, [pc, #84]	; (125b0 <bt_hci_le_enh_conn_complete+0x2d0>)
   1255c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12560:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12564:	2303      	movs	r3, #3
   12566:	480a      	ldr	r0, [pc, #40]	; (12590 <bt_hci_le_enh_conn_complete+0x2b0>)
   12568:	f842 3f10 	str.w	r3, [r2, #16]!
   1256c:	f01d fb98 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   12570:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   12572:	4620      	mov	r0, r4
   12574:	f001 ffa2 	bl	144bc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12578:	78e3      	ldrb	r3, [r4, #3]
   1257a:	2b00      	cmp	r3, #0
   1257c:	f47f aeda 	bne.w	12334 <bt_hci_le_enh_conn_complete+0x54>
   12580:	e6d5      	b.n	1232e <bt_hci_le_enh_conn_complete+0x4e>
		return -ENOBUFS;
   12582:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12586:	e7a7      	b.n	124d8 <bt_hci_le_enh_conn_complete+0x1f8>
   12588:	2001103e 	.word	0x2001103e
   1258c:	00039efd 	.word	0x00039efd
   12590:	00036420 	.word	0x00036420
   12594:	00039f1b 	.word	0x00039f1b
   12598:	2000c580 	.word	0x2000c580
   1259c:	00039f34 	.word	0x00039f34
   125a0:	01000003 	.word	0x01000003
   125a4:	2000c654 	.word	0x2000c654
   125a8:	00039f50 	.word	0x00039f50
   125ac:	00039f71 	.word	0x00039f71
   125b0:	00039f88 	.word	0x00039f88

000125b4 <le_legacy_conn_complete>:
{
   125b4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   125b6:	68c1      	ldr	r1, [r0, #12]
{
   125b8:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   125ba:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   125bc:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   125be:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   125c2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   125c6:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   125c8:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   125cc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   125d0:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   125d4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   125d8:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   125dc:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   125e0:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   125e4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   125e8:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   125ec:	7b4b      	ldrb	r3, [r1, #13]
   125ee:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   125f2:	f01d fb49 	bl	2fc88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   125f6:	4907      	ldr	r1, [pc, #28]	; (12614 <le_legacy_conn_complete+0x60>)
   125f8:	f10d 000b 	add.w	r0, sp, #11
   125fc:	f01d fb4b 	bl	2fc96 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12600:	f10d 0011 	add.w	r0, sp, #17
   12604:	f01d fb47 	bl	2fc96 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12608:	4668      	mov	r0, sp
   1260a:	f7ff fe69 	bl	122e0 <bt_hci_le_enh_conn_complete>
}
   1260e:	b009      	add	sp, #36	; 0x24
   12610:	f85d fb04 	ldr.w	pc, [sp], #4
   12614:	00039bb2 	.word	0x00039bb2

00012618 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
   12618:	4b02      	ldr	r3, [pc, #8]	; (12624 <bt_send+0xc>)
   1261a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1261e:	695b      	ldr	r3, [r3, #20]
   12620:	4718      	bx	r3
   12622:	bf00      	nop
   12624:	2000c580 	.word	0x2000c580

00012628 <bt_hci_cmd_send>:
{
   12628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1262a:	4605      	mov	r5, r0
	if (!buf) {
   1262c:	460c      	mov	r4, r1
{
   1262e:	af00      	add	r7, sp, #0
	if (!buf) {
   12630:	b919      	cbnz	r1, 1263a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12632:	f7ff fcc9 	bl	11fc8 <bt_hci_cmd_create>
		if (!buf) {
   12636:	4604      	mov	r4, r0
   12638:	b318      	cbz	r0, 12682 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1263a:	f640 4335 	movw	r3, #3125	; 0xc35
   1263e:	429d      	cmp	r5, r3
   12640:	d119      	bne.n	12676 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12642:	4620      	mov	r0, r4
   12644:	f7ff ffe8 	bl	12618 <bt_send>
		if (err) {
   12648:	4605      	mov	r5, r0
   1264a:	b188      	cbz	r0, 12670 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1264c:	466e      	mov	r6, sp
   1264e:	b088      	sub	sp, #32
   12650:	466a      	mov	r2, sp
   12652:	4b0d      	ldr	r3, [pc, #52]	; (12688 <bt_hci_cmd_send+0x60>)
   12654:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12658:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1265c:	2303      	movs	r3, #3
   1265e:	480b      	ldr	r0, [pc, #44]	; (1268c <bt_hci_cmd_send+0x64>)
   12660:	f842 3f10 	str.w	r3, [r2, #16]!
   12664:	f01d fb1c 	bl	2fca0 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12668:	4620      	mov	r0, r4
   1266a:	46b5      	mov	sp, r6
   1266c:	f005 fec0 	bl	183f0 <net_buf_unref>
}
   12670:	4628      	mov	r0, r5
   12672:	46bd      	mov	sp, r7
   12674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12676:	4621      	mov	r1, r4
   12678:	4805      	ldr	r0, [pc, #20]	; (12690 <bt_hci_cmd_send+0x68>)
   1267a:	f005 fe93 	bl	183a4 <net_buf_put>
	return 0;
   1267e:	2500      	movs	r5, #0
   12680:	e7f6      	b.n	12670 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12682:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12686:	e7f3      	b.n	12670 <bt_hci_cmd_send+0x48>
   12688:	00039fa4 	.word	0x00039fa4
   1268c:	00036420 	.word	0x00036420
   12690:	2000c6bc 	.word	0x2000c6bc

00012694 <bt_hci_host_num_completed_packets>:
{
   12694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12698:	b086      	sub	sp, #24
   1269a:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1269c:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   1269e:	7e46      	ldrb	r6, [r0, #25]
{
   126a0:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   126a2:	7a80      	ldrb	r0, [r0, #10]
   126a4:	f005 fd56 	bl	18154 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   126a8:	4621      	mov	r1, r4
   126aa:	f022 fab4 	bl	34c16 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   126ae:	4b2d      	ldr	r3, [pc, #180]	; (12764 <bt_hci_host_num_completed_packets+0xd0>)
   126b0:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   126b4:	069b      	lsls	r3, r3, #26
   126b6:	d513      	bpl.n	126e0 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   126b8:	4630      	mov	r0, r6
   126ba:	f002 fbab 	bl	14e14 <bt_conn_lookup_index>
	if (!conn) {
   126be:	4604      	mov	r4, r0
   126c0:	b990      	cbnz	r0, 126e8 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   126c2:	466c      	mov	r4, sp
   126c4:	b088      	sub	sp, #32
   126c6:	466a      	mov	r2, sp
   126c8:	4b27      	ldr	r3, [pc, #156]	; (12768 <bt_hci_host_num_completed_packets+0xd4>)
   126ca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   126ce:	e9c2 3605 	strd	r3, r6, [r2, #20]
   126d2:	2303      	movs	r3, #3
   126d4:	4825      	ldr	r0, [pc, #148]	; (1276c <bt_hci_host_num_completed_packets+0xd8>)
   126d6:	f842 3f10 	str.w	r3, [r2, #16]!
   126da:	f01d fae1 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   126de:	46a5      	mov	sp, r4
}
   126e0:	3718      	adds	r7, #24
   126e2:	46bd      	mov	sp, r7
   126e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   126e8:	7a83      	ldrb	r3, [r0, #10]
   126ea:	3b07      	subs	r3, #7
   126ec:	2b01      	cmp	r3, #1
   126ee:	d90e      	bls.n	1270e <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   126f0:	4b1f      	ldr	r3, [pc, #124]	; (12770 <bt_hci_host_num_completed_packets+0xdc>)
   126f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   126f6:	617b      	str	r3, [r7, #20]
   126f8:	2302      	movs	r3, #2
   126fa:	481c      	ldr	r0, [pc, #112]	; (1276c <bt_hci_host_num_completed_packets+0xd8>)
   126fc:	613b      	str	r3, [r7, #16]
   126fe:	f107 0210 	add.w	r2, r7, #16
   12702:	f01d facd 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12706:	4620      	mov	r0, r4
   12708:	f001 fed8 	bl	144bc <bt_conn_unref>
		return;
   1270c:	e7e8      	b.n	126e0 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   1270e:	f001 fed5 	bl	144bc <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   12712:	2105      	movs	r1, #5
   12714:	f640 4035 	movw	r0, #3125	; 0xc35
   12718:	f7ff fc56 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   1271c:	4604      	mov	r4, r0
   1271e:	b958      	cbnz	r0, 12738 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   12720:	4b14      	ldr	r3, [pc, #80]	; (12774 <bt_hci_host_num_completed_packets+0xe0>)
   12722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12726:	617b      	str	r3, [r7, #20]
   12728:	2302      	movs	r3, #2
   1272a:	4810      	ldr	r0, [pc, #64]	; (1276c <bt_hci_host_num_completed_packets+0xd8>)
   1272c:	613b      	str	r3, [r7, #16]
   1272e:	f107 0210 	add.w	r2, r7, #16
   12732:	f01d fab5 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		return;
   12736:	e7d3      	b.n	126e0 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   12738:	f100 080c 	add.w	r8, r0, #12
   1273c:	2101      	movs	r1, #1
   1273e:	4640      	mov	r0, r8
   12740:	f005 ff9a 	bl	18678 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12744:	2601      	movs	r6, #1
   12746:	2104      	movs	r1, #4
   12748:	7006      	strb	r6, [r0, #0]
   1274a:	4640      	mov	r0, r8
   1274c:	f005 ff94 	bl	18678 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12750:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12752:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12754:	7086      	strb	r6, [r0, #2]
   12756:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12758:	4621      	mov	r1, r4
   1275a:	f640 4035 	movw	r0, #3125	; 0xc35
   1275e:	f7ff ff63 	bl	12628 <bt_hci_cmd_send>
   12762:	e7bd      	b.n	126e0 <bt_hci_host_num_completed_packets+0x4c>
   12764:	2000c580 	.word	0x2000c580
   12768:	00039fc6 	.word	0x00039fc6
   1276c:	00036420 	.word	0x00036420
   12770:	00039fef 	.word	0x00039fef
   12774:	0003a01b 	.word	0x0003a01b

00012778 <le_conn_param_req>:
{
   12778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1277c:	68c3      	ldr	r3, [r0, #12]
{
   1277e:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12780:	78d9      	ldrb	r1, [r3, #3]
   12782:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12784:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12786:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1278a:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1278c:	7959      	ldrb	r1, [r3, #5]
   1278e:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   12790:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12792:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12796:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   12798:	799a      	ldrb	r2, [r3, #6]
   1279a:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1279c:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   1279e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   127a2:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   127a4:	7a1a      	ldrb	r2, [r3, #8]
   127a6:	7a5b      	ldrb	r3, [r3, #9]
   127a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   127ac:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   127ae:	f001 fea9 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   127b2:	4605      	mov	r5, r0
   127b4:	b9a8      	cbnz	r0, 127e2 <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   127b6:	466d      	mov	r5, sp
   127b8:	b088      	sub	sp, #32
   127ba:	466a      	mov	r2, sp
   127bc:	4b1e      	ldr	r3, [pc, #120]	; (12838 <le_conn_param_req+0xc0>)
   127be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   127c2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   127c6:	2303      	movs	r3, #3
   127c8:	481c      	ldr	r0, [pc, #112]	; (1283c <le_conn_param_req+0xc4>)
   127ca:	f842 3f10 	str.w	r3, [r2, #16]!
   127ce:	f01d fa67 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   127d2:	2102      	movs	r1, #2
   127d4:	46ad      	mov	sp, r5
   127d6:	4620      	mov	r0, r4
   127d8:	f01d faf2 	bl	2fdc0 <le_conn_param_neg_reply>
}
   127dc:	370c      	adds	r7, #12
   127de:	46bd      	mov	sp, r7
   127e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   127e2:	4639      	mov	r1, r7
   127e4:	f002 f86e 	bl	148c4 <le_param_req>
   127e8:	b938      	cbnz	r0, 127fa <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   127ea:	211e      	movs	r1, #30
   127ec:	4620      	mov	r0, r4
   127ee:	f01d fae7 	bl	2fdc0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   127f2:	4628      	mov	r0, r5
   127f4:	f001 fe62 	bl	144bc <bt_conn_unref>
   127f8:	e7f0      	b.n	127dc <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   127fa:	210e      	movs	r1, #14
   127fc:	f242 0020 	movw	r0, #8224	; 0x2020
   12800:	f7ff fbe2 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   12804:	4604      	mov	r4, r0
   12806:	2800      	cmp	r0, #0
   12808:	d0f3      	beq.n	127f2 <le_conn_param_req+0x7a>
   1280a:	210e      	movs	r1, #14
   1280c:	300c      	adds	r0, #12
   1280e:	f005 ff33 	bl	18678 <net_buf_simple_add>
   12812:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   12814:	8006      	strh	r6, [r0, #0]
   12816:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1281a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1281c:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1281e:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   12820:	887b      	ldrh	r3, [r7, #2]
   12822:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   12824:	88bb      	ldrh	r3, [r7, #4]
   12826:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12828:	88fb      	ldrh	r3, [r7, #6]
   1282a:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1282c:	f242 0020 	movw	r0, #8224	; 0x2020
   12830:	f7ff fefa 	bl	12628 <bt_hci_cmd_send>
   12834:	e7dd      	b.n	127f2 <le_conn_param_req+0x7a>
   12836:	bf00      	nop
   12838:	00039cc4 	.word	0x00039cc4
   1283c:	00036420 	.word	0x00036420

00012840 <hci_tx_thread>:
{
   12840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12844:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1299c <hci_tx_thread+0x15c>
{
   12848:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   1284a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 129a0 <hci_tx_thread+0x160>
{
   1284e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   12850:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12854:	4853      	ldr	r0, [pc, #332]	; (129a4 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12856:	f36f 3394 	bfc	r3, #14, #7
   1285a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1285e:	f001 fdb9 	bl	143d4 <bt_conn_prepare_events>
   12862:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   12864:	f04f 32ff 	mov.w	r2, #4294967295
   12868:	f04f 33ff 	mov.w	r3, #4294967295
   1286c:	4629      	mov	r1, r5
   1286e:	484b      	ldr	r0, [pc, #300]	; (1299c <hci_tx_thread+0x15c>)
   12870:	f018 ffd8 	bl	2b824 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12874:	b160      	cbz	r0, 12890 <hci_tx_thread+0x50>
   12876:	f640 23c8 	movw	r3, #2760	; 0xac8
   1287a:	464a      	mov	r2, r9
   1287c:	494a      	ldr	r1, [pc, #296]	; (129a8 <hci_tx_thread+0x168>)
   1287e:	484b      	ldr	r0, [pc, #300]	; (129ac <hci_tx_thread+0x16c>)
   12880:	f01c f868 	bl	2e954 <assert_print>
   12884:	4040      	eors	r0, r0
   12886:	f380 8811 	msr	BASEPRI, r0
   1288a:	f04f 0003 	mov.w	r0, #3
   1288e:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12890:	f04f 0a03 	mov.w	sl, #3
{
   12894:	4e41      	ldr	r6, [pc, #260]	; (1299c <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   12896:	b915      	cbnz	r5, 1289e <hci_tx_thread+0x5e>
	z_impl_k_yield();
   12898:	f017 ff6e 	bl	2a778 <z_impl_k_yield>
	while (1) {
   1289c:	e7d8      	b.n	12850 <hci_tx_thread+0x10>
		switch (ev->state) {
   1289e:	68f3      	ldr	r3, [r6, #12]
   128a0:	f3c3 3386 	ubfx	r3, r3, #14, #7
   128a4:	2b02      	cmp	r3, #2
   128a6:	d960      	bls.n	1296a <hci_tx_thread+0x12a>
   128a8:	2b04      	cmp	r3, #4
   128aa:	d168      	bne.n	1297e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   128ac:	7b33      	ldrb	r3, [r6, #12]
   128ae:	2b00      	cmp	r3, #0
   128b0:	d15e      	bne.n	12970 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   128b2:	2200      	movs	r2, #0
   128b4:	2300      	movs	r3, #0
   128b6:	483e      	ldr	r0, [pc, #248]	; (129b0 <hci_tx_thread+0x170>)
   128b8:	f01e fc7d 	bl	311b6 <net_buf_get>
	BT_ASSERT(buf);
   128bc:	4604      	mov	r4, r0
   128be:	b960      	cbnz	r0, 128da <hci_tx_thread+0x9a>
   128c0:	f640 235a 	movw	r3, #2650	; 0xa5a
   128c4:	464a      	mov	r2, r9
   128c6:	493b      	ldr	r1, [pc, #236]	; (129b4 <hci_tx_thread+0x174>)
   128c8:	4838      	ldr	r0, [pc, #224]	; (129ac <hci_tx_thread+0x16c>)
   128ca:	f01c f843 	bl	2e954 <assert_print>
   128ce:	4040      	eors	r0, r0
   128d0:	f380 8811 	msr	BASEPRI, r0
   128d4:	f04f 0003 	mov.w	r0, #3
   128d8:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   128da:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 129b8 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   128de:	f04f 33ff 	mov.w	r3, #4294967295
   128e2:	f04f 32ff 	mov.w	r2, #4294967295
   128e6:	4835      	ldr	r0, [pc, #212]	; (129bc <hci_tx_thread+0x17c>)
   128e8:	f016 fa72 	bl	28dd0 <z_impl_k_sem_take>
   128ec:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   128f0:	b18b      	cbz	r3, 12916 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   128f2:	4b33      	ldr	r3, [pc, #204]	; (129c0 <hci_tx_thread+0x180>)
   128f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   128f8:	617b      	str	r3, [r7, #20]
   128fa:	2302      	movs	r3, #2
   128fc:	4831      	ldr	r0, [pc, #196]	; (129c4 <hci_tx_thread+0x184>)
   128fe:	f107 0210 	add.w	r2, r7, #16
   12902:	613b      	str	r3, [r7, #16]
   12904:	f01d f9cc 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   12908:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   1290c:	f005 fd70 	bl	183f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12910:	2300      	movs	r3, #0
   12912:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   12916:	4620      	mov	r0, r4
   12918:	f005 fdae 	bl	18478 <net_buf_ref>
   1291c:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   12920:	4620      	mov	r0, r4
   12922:	f7ff fe79 	bl	12618 <bt_send>
	if (err) {
   12926:	b300      	cbz	r0, 1296a <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   12928:	46eb      	mov	fp, sp
   1292a:	b088      	sub	sp, #32
   1292c:	466a      	mov	r2, sp
   1292e:	4b26      	ldr	r3, [pc, #152]	; (129c8 <hci_tx_thread+0x188>)
   12930:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12934:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12938:	2303      	movs	r3, #3
   1293a:	4822      	ldr	r0, [pc, #136]	; (129c4 <hci_tx_thread+0x184>)
   1293c:	f842 3f10 	str.w	r3, [r2, #16]!
   12940:	f01d f9ae 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   12944:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   12946:	481d      	ldr	r0, [pc, #116]	; (129bc <hci_tx_thread+0x17c>)
   12948:	f016 f9fe 	bl	28d48 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1294c:	4620      	mov	r0, r4
   1294e:	f005 fc09 	bl	18164 <net_buf_id>
   12952:	220c      	movs	r2, #12
   12954:	4b1d      	ldr	r3, [pc, #116]	; (129cc <hci_tx_thread+0x18c>)
   12956:	211f      	movs	r1, #31
   12958:	fb02 3000 	mla	r0, r2, r0, r3
   1295c:	4622      	mov	r2, r4
   1295e:	8840      	ldrh	r0, [r0, #2]
   12960:	f7ff f976 	bl	11c50 <hci_cmd_done>
		net_buf_unref(buf);
   12964:	4620      	mov	r0, r4
   12966:	f005 fd43 	bl	183f0 <net_buf_unref>
	for (; count; ev++, count--) {
   1296a:	3614      	adds	r6, #20
   1296c:	3d01      	subs	r5, #1
   1296e:	e792      	b.n	12896 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12970:	2b01      	cmp	r3, #1
   12972:	d1fa      	bne.n	1296a <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   12974:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12976:	3838      	subs	r0, #56	; 0x38
   12978:	f002 f9c2 	bl	14d00 <bt_conn_process_tx>
   1297c:	e7f5      	b.n	1296a <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1297e:	466c      	mov	r4, sp
   12980:	b088      	sub	sp, #32
   12982:	466a      	mov	r2, sp
   12984:	4912      	ldr	r1, [pc, #72]	; (129d0 <hci_tx_thread+0x190>)
   12986:	480f      	ldr	r0, [pc, #60]	; (129c4 <hci_tx_thread+0x184>)
		switch (ev->state) {
   12988:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1298c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12990:	f842 af10 	str.w	sl, [r2, #16]!
   12994:	f01d f984 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   12998:	46a5      	mov	sp, r4
   1299a:	e7e6      	b.n	1296a <hci_tx_thread+0x12a>
   1299c:	2000c830 	.word	0x2000c830
   129a0:	00039e61 	.word	0x00039e61
   129a4:	2000c844 	.word	0x2000c844
   129a8:	00038711 	.word	0x00038711
   129ac:	000381c3 	.word	0x000381c3
   129b0:	2000c6bc 	.word	0x2000c6bc
   129b4:	0003b28a 	.word	0x0003b28a
   129b8:	2000c580 	.word	0x2000c580
   129bc:	2000c6a0 	.word	0x2000c6a0
   129c0:	0003a03e 	.word	0x0003a03e
   129c4:	00036420 	.word	0x00036420
   129c8:	00039fa4 	.word	0x00039fa4
   129cc:	2000fb64 	.word	0x2000fb64
   129d0:	0003a059 	.word	0x0003a059

000129d4 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
   129d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129d8:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
   129da:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   129de:	4630      	mov	r0, r6
   129e0:	f01e fc01 	bl	311e6 <net_buf_simple_headroom>
	state->len = buf->len;
   129e4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   129e8:	4605      	mov	r5, r0

	BT_ASSERT(buf->len >= sizeof(*hdr));
   129ea:	f1b8 0f01 	cmp.w	r8, #1
   129ee:	d80c      	bhi.n	12a0a <hci_event_prio+0x36>
   129f0:	f640 636f 	movw	r3, #3695	; 0xe6f
   129f4:	4a1b      	ldr	r2, [pc, #108]	; (12a64 <hci_event_prio+0x90>)
   129f6:	491c      	ldr	r1, [pc, #112]	; (12a68 <hci_event_prio+0x94>)
   129f8:	481c      	ldr	r0, [pc, #112]	; (12a6c <hci_event_prio+0x98>)
   129fa:	f01b ffab 	bl	2e954 <assert_print>
   129fe:	4040      	eors	r0, r0
   12a00:	f380 8811 	msr	BASEPRI, r0
   12a04:	f04f 0003 	mov.w	r0, #3
   12a08:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12a0a:	4630      	mov	r0, r6
   12a0c:	2102      	movs	r1, #2
   12a0e:	f005 fe15 	bl	1863c <net_buf_simple_pull_mem>
   12a12:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12a14:	7800      	ldrb	r0, [r0, #0]
   12a16:	f01d f919 	bl	2fc4c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12a1a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12a1c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12a1e:	d40c      	bmi.n	12a3a <hci_event_prio+0x66>
   12a20:	f640 6373 	movw	r3, #3699	; 0xe73
   12a24:	4a0f      	ldr	r2, [pc, #60]	; (12a64 <hci_event_prio+0x90>)
   12a26:	4912      	ldr	r1, [pc, #72]	; (12a70 <hci_event_prio+0x9c>)
   12a28:	4810      	ldr	r0, [pc, #64]	; (12a6c <hci_event_prio+0x98>)
   12a2a:	f01b ff93 	bl	2e954 <assert_print>
   12a2e:	4040      	eors	r0, r0
   12a30:	f380 8811 	msr	BASEPRI, r0
   12a34:	f04f 0003 	mov.w	r0, #3
   12a38:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12a3a:	2305      	movs	r3, #5
   12a3c:	4621      	mov	r1, r4
   12a3e:	4a0d      	ldr	r2, [pc, #52]	; (12a74 <hci_event_prio+0xa0>)
   12a40:	7838      	ldrb	r0, [r7, #0]
   12a42:	f7ff f81f 	bl	11a84 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12a46:	07b3      	lsls	r3, r6, #30
   12a48:	d507      	bpl.n	12a5a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12a4a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   12a4c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   12a50:	fa13 f585 	uxtah	r5, r3, r5
   12a54:	60e5      	str	r5, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
   12a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12a5a:	4620      	mov	r0, r4
}
   12a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12a60:	f005 bcc6 	b.w	183f0 <net_buf_unref>
   12a64:	00039e61 	.word	0x00039e61
   12a68:	0003a07a 	.word	0x0003a07a
   12a6c:	000381c3 	.word	0x000381c3
   12a70:	0003a093 	.word	0x0003a093
   12a74:	00036acc 	.word	0x00036acc

00012a78 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
   12a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12a7a:	7e03      	ldrb	r3, [r0, #24]
   12a7c:	4604      	mov	r4, r0
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	LOG_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
   12a7e:	2b01      	cmp	r3, #1
{
   12a80:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   12a82:	d054      	beq.n	12b2e <bt_recv+0xb6>
   12a84:	2b03      	cmp	r3, #3
   12a86:	f040 8081 	bne.w	12b8c <bt_recv+0x114>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12a8a:	8a03      	ldrh	r3, [r0, #16]
   12a8c:	2b03      	cmp	r3, #3
   12a8e:	d80c      	bhi.n	12aaa <bt_recv+0x32>
   12a90:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   12a94:	4a48      	ldr	r2, [pc, #288]	; (12bb8 <bt_recv+0x140>)
   12a96:	4949      	ldr	r1, [pc, #292]	; (12bbc <bt_recv+0x144>)
   12a98:	4849      	ldr	r0, [pc, #292]	; (12bc0 <bt_recv+0x148>)
   12a9a:	f01b ff5b 	bl	2e954 <assert_print>
   12a9e:	4040      	eors	r0, r0
   12aa0:	f380 8811 	msr	BASEPRI, r0
   12aa4:	f04f 0003 	mov.w	r0, #3
   12aa8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12aaa:	2104      	movs	r1, #4
   12aac:	f104 000c 	add.w	r0, r4, #12
   12ab0:	f005 fdc4 	bl	1863c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12ab4:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12ab6:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12ab8:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   12aba:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   12abc:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   12ac0:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   12ac2:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12ac4:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12ac6:	d013      	beq.n	12af0 <bt_recv+0x78>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   12ac8:	466d      	mov	r5, sp
   12aca:	b088      	sub	sp, #32
   12acc:	466a      	mov	r2, sp
   12ace:	483d      	ldr	r0, [pc, #244]	; (12bc4 <bt_recv+0x14c>)
   12ad0:	61d3      	str	r3, [r2, #28]
   12ad2:	2304      	movs	r3, #4
   12ad4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   12ad8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12adc:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12ae0:	4839      	ldr	r0, [pc, #228]	; (12bc8 <bt_recv+0x150>)
   12ae2:	f01d f8dd 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   12ae6:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   12ae8:	4620      	mov	r0, r4
   12aea:	f005 fc81 	bl	183f0 <net_buf_unref>
}
   12aee:	e01b      	b.n	12b28 <bt_recv+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12af0:	f001 fd08 	bl	14504 <bt_conn_lookup_handle>
	if (!conn) {
   12af4:	4605      	mov	r5, r0
   12af6:	b960      	cbnz	r0, 12b12 <bt_recv+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12af8:	466d      	mov	r5, sp
   12afa:	b088      	sub	sp, #32
   12afc:	466a      	mov	r2, sp
   12afe:	8b63      	ldrh	r3, [r4, #26]
   12b00:	4932      	ldr	r1, [pc, #200]	; (12bcc <bt_recv+0x154>)
   12b02:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12b06:	2303      	movs	r3, #3
   12b08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b0c:	f842 3f10 	str.w	r3, [r2, #16]!
   12b10:	e7e6      	b.n	12ae0 <bt_recv+0x68>
	acl(buf)->index = bt_conn_index(conn);
   12b12:	f001 fe17 	bl	14744 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12b16:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   12b18:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   12b1a:	0b32      	lsrs	r2, r6, #12
   12b1c:	4628      	mov	r0, r5
   12b1e:	f001 fb4d 	bl	141bc <bt_conn_recv>
	bt_conn_unref(conn);
   12b22:	4628      	mov	r0, r5
   12b24:	f001 fcca 	bl	144bc <bt_conn_unref>
#if defined(CONFIG_BT_RECV_BLOCKING)
		hci_acl(buf);
#else
		rx_queue_put(buf);
#endif
		return 0;
   12b28:	2000      	movs	r0, #0
	default:
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
   12b2a:	46bd      	mov	sp, r7
   12b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12b2e:	8a03      	ldrh	r3, [r0, #16]
   12b30:	2b01      	cmp	r3, #1
   12b32:	d80c      	bhi.n	12b4e <bt_recv+0xd6>
   12b34:	f640 2347 	movw	r3, #2631	; 0xa47
   12b38:	4a1f      	ldr	r2, [pc, #124]	; (12bb8 <bt_recv+0x140>)
   12b3a:	4920      	ldr	r1, [pc, #128]	; (12bbc <bt_recv+0x144>)
   12b3c:	4820      	ldr	r0, [pc, #128]	; (12bc0 <bt_recv+0x148>)
   12b3e:	f01b ff09 	bl	2e954 <assert_print>
   12b42:	4040      	eors	r0, r0
   12b44:	f380 8811 	msr	BASEPRI, r0
   12b48:	f04f 0003 	mov.w	r0, #3
   12b4c:	df02      	svc	2
   12b4e:	2102      	movs	r1, #2
   12b50:	f104 000c 	add.w	r0, r4, #12
   12b54:	f005 fd72 	bl	1863c <net_buf_simple_pull_mem>
   12b58:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12b5a:	7800      	ldrb	r0, [r0, #0]
   12b5c:	f01d f876 	bl	2fc4c <bt_hci_evt_get_flags>
   12b60:	0783      	lsls	r3, r0, #30
   12b62:	d40c      	bmi.n	12b7e <bt_recv+0x106>
   12b64:	f640 234b 	movw	r3, #2635	; 0xa4b
   12b68:	4a13      	ldr	r2, [pc, #76]	; (12bb8 <bt_recv+0x140>)
   12b6a:	4919      	ldr	r1, [pc, #100]	; (12bd0 <bt_recv+0x158>)
   12b6c:	4814      	ldr	r0, [pc, #80]	; (12bc0 <bt_recv+0x148>)
   12b6e:	f01b fef1 	bl	2e954 <assert_print>
   12b72:	4040      	eors	r0, r0
   12b74:	f380 8811 	msr	BASEPRI, r0
   12b78:	f04f 0003 	mov.w	r0, #3
   12b7c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12b7e:	2304      	movs	r3, #4
   12b80:	4621      	mov	r1, r4
   12b82:	4a14      	ldr	r2, [pc, #80]	; (12bd4 <bt_recv+0x15c>)
   12b84:	7828      	ldrb	r0, [r5, #0]
   12b86:	f7fe ff7d 	bl	11a84 <handle_event>
   12b8a:	e7ad      	b.n	12ae8 <bt_recv+0x70>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   12b8c:	466d      	mov	r5, sp
   12b8e:	b088      	sub	sp, #32
   12b90:	466a      	mov	r2, sp
   12b92:	4911      	ldr	r1, [pc, #68]	; (12bd8 <bt_recv+0x160>)
   12b94:	480c      	ldr	r0, [pc, #48]	; (12bc8 <bt_recv+0x150>)
	switch (bt_buf_get_type(buf)) {
   12b96:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   12b9a:	2303      	movs	r3, #3
   12b9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ba0:	f842 3f10 	str.w	r3, [r2, #16]!
   12ba4:	f01d f87c 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   12ba8:	4620      	mov	r0, r4
   12baa:	46ad      	mov	sp, r5
   12bac:	f005 fc20 	bl	183f0 <net_buf_unref>
		return -EINVAL;
   12bb0:	f06f 0015 	mvn.w	r0, #21
   12bb4:	e7b9      	b.n	12b2a <bt_recv+0xb2>
   12bb6:	bf00      	nop
   12bb8:	00039e61 	.word	0x00039e61
   12bbc:	0003a07a 	.word	0x0003a07a
   12bc0:	000381c3 	.word	0x000381c3
   12bc4:	0003a0ac 	.word	0x0003a0ac
   12bc8:	00036420 	.word	0x00036420
   12bcc:	0003a0d0 	.word	0x0003a0d0
   12bd0:	0003a0f2 	.word	0x0003a0f2
   12bd4:	00036af4 	.word	0x00036af4
   12bd8:	0003a120 	.word	0x0003a120

00012bdc <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
   12bdc:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   12bde:	7e03      	ldrb	r3, [r0, #24]
{
   12be0:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   12be2:	2b01      	cmp	r3, #1
   12be4:	d00c      	beq.n	12c00 <bt_recv_prio+0x24>
   12be6:	f640 63c5 	movw	r3, #3781	; 0xec5
   12bea:	4a08      	ldr	r2, [pc, #32]	; (12c0c <bt_recv_prio+0x30>)
   12bec:	4908      	ldr	r1, [pc, #32]	; (12c10 <bt_recv_prio+0x34>)
   12bee:	4809      	ldr	r0, [pc, #36]	; (12c14 <bt_recv_prio+0x38>)
   12bf0:	f01b feb0 	bl	2e954 <assert_print>
   12bf4:	4040      	eors	r0, r0
   12bf6:	f380 8811 	msr	BASEPRI, r0
   12bfa:	f04f 0003 	mov.w	r0, #3
   12bfe:	df02      	svc	2

	hci_event_prio(buf);
   12c00:	4620      	mov	r0, r4
   12c02:	f7ff fee7 	bl	129d4 <hci_event_prio>

	return 0;
}
   12c06:	2000      	movs	r0, #0
   12c08:	bd10      	pop	{r4, pc}
   12c0a:	bf00      	nop
   12c0c:	00039e61 	.word	0x00039e61
   12c10:	0003a134 	.word	0x0003a134
   12c14:	000381c3 	.word	0x000381c3

00012c18 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
   12c18:	4a08      	ldr	r2, [pc, #32]	; (12c3c <bt_hci_driver_register+0x24>)
{
   12c1a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12c1c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
   12c20:	b930      	cbnz	r0, 12c30 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
   12c22:	68d9      	ldr	r1, [r3, #12]
   12c24:	b139      	cbz	r1, 12c36 <bt_hci_driver_register+0x1e>
   12c26:	6959      	ldr	r1, [r3, #20]
   12c28:	b129      	cbz	r1, 12c36 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
   12c2a:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	LOG_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
   12c2e:	4770      	bx	lr
		return -EALREADY;
   12c30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12c34:	4770      	bx	lr
		return -EINVAL;
   12c36:	f06f 0015 	mvn.w	r0, #21
}
   12c3a:	4770      	bx	lr
   12c3c:	2000c580 	.word	0x2000c580

00012c40 <bt_finalize_init>:

void bt_finalize_init(void)
{
   12c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12c44:	2104      	movs	r1, #4
   12c46:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   12c48:	4c3e      	ldr	r4, [pc, #248]	; (12d44 <bt_finalize_init+0x104>)
   12c4a:	483f      	ldr	r0, [pc, #252]	; (12d48 <bt_finalize_init+0x108>)
   12c4c:	f01d f811 	bl	2fc72 <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
   12c50:	2000      	movs	r0, #0
   12c52:	f000 fe5d 	bl	13910 <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   12c56:	4d3d      	ldr	r5, [pc, #244]	; (12d4c <bt_finalize_init+0x10c>)
   12c58:	79e2      	ldrb	r2, [r4, #7]
   12c5a:	4b3d      	ldr	r3, [pc, #244]	; (12d50 <bt_finalize_init+0x110>)
   12c5c:	4620      	mov	r0, r4
   12c5e:	2a01      	cmp	r2, #1
   12c60:	bf88      	it	hi
   12c62:	461d      	movhi	r5, r3
   12c64:	466e      	mov	r6, sp
   12c66:	f7fe fcf7 	bl	11658 <bt_addr_le_str>
   12c6a:	b08a      	sub	sp, #40	; 0x28
   12c6c:	466a      	mov	r2, sp
   12c6e:	4b39      	ldr	r3, [pc, #228]	; (12d54 <bt_finalize_init+0x114>)
   12c70:	46a3      	mov	fp, r4
   12c72:	e9c2 3505 	strd	r3, r5, [r2, #20]
	for (i = 1; i < bt_dev.id_count; i++) {
   12c76:	2501      	movs	r5, #1
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   12c78:	4b37      	ldr	r3, [pc, #220]	; (12d58 <bt_finalize_init+0x118>)
   12c7a:	61d0      	str	r0, [r2, #28]
   12c7c:	6213      	str	r3, [r2, #32]
   12c7e:	4b37      	ldr	r3, [pc, #220]	; (12d5c <bt_finalize_init+0x11c>)
   12c80:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   12c84:	4836      	ldr	r0, [pc, #216]	; (12d60 <bt_finalize_init+0x120>)
   12c86:	f842 3f10 	str.w	r3, [r2, #16]!
   12c8a:	f01d f809 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   12c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 12d64 <bt_finalize_init+0x124>
   12c92:	46b5      	mov	sp, r6
   12c94:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 12d60 <bt_finalize_init+0x120>
   12c98:	4e33      	ldr	r6, [pc, #204]	; (12d68 <bt_finalize_init+0x128>)
	for (i = 1; i < bt_dev.id_count; i++) {
   12c9a:	79e3      	ldrb	r3, [r4, #7]
   12c9c:	f10b 0b07 	add.w	fp, fp, #7
   12ca0:	429d      	cmp	r5, r3
   12ca2:	db38      	blt.n	12d16 <bt_finalize_init+0xd6>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   12ca4:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   12ca8:	466e      	mov	r6, sp
   12caa:	4628      	mov	r0, r5
   12cac:	f7fe fe2a 	bl	11904 <ver_str>
   12cb0:	b08c      	sub	sp, #48	; 0x30
   12cb2:	466a      	mov	r2, sp
   12cb4:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   12cb8:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   12cbc:	e9c2 5107 	strd	r5, r1, [r2, #28]
   12cc0:	f44f 7500 	mov.w	r5, #512	; 0x200
   12cc4:	6253      	str	r3, [r2, #36]	; 0x24
   12cc6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 12d6c <bt_finalize_init+0x12c>
   12cca:	4b29      	ldr	r3, [pc, #164]	; (12d70 <bt_finalize_init+0x130>)
   12ccc:	e9c2 c005 	strd	ip, r0, [r2, #20]
   12cd0:	8515      	strh	r5, [r2, #40]	; 0x28
   12cd2:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   12cd6:	f842 3f10 	str.w	r3, [r2, #16]!
   12cda:	4821      	ldr	r0, [pc, #132]	; (12d60 <bt_finalize_init+0x120>)
   12cdc:	f01c ffe0 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   12ce0:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   12ce2:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   12ce6:	4630      	mov	r0, r6
   12ce8:	f7fe fe0c 	bl	11904 <ver_str>
   12cec:	b08a      	sub	sp, #40	; 0x28
   12cee:	466a      	mov	r2, sp
   12cf0:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   12cf4:	491f      	ldr	r1, [pc, #124]	; (12d74 <bt_finalize_init+0x134>)
   12cf6:	e9c2 6307 	strd	r6, r3, [r2, #28]
   12cfa:	4b1f      	ldr	r3, [pc, #124]	; (12d78 <bt_finalize_init+0x138>)
   12cfc:	e9c2 1005 	strd	r1, r0, [r2, #20]
   12d00:	8495      	strh	r5, [r2, #36]	; 0x24
   12d02:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   12d06:	4816      	ldr	r0, [pc, #88]	; (12d60 <bt_finalize_init+0x120>)
   12d08:	f842 3f10 	str.w	r3, [r2, #16]!
   12d0c:	f01c ffc8 	bl	2fca0 <z_log_msg_static_create.constprop.0>
	}

	bt_dev_show_info();
}
   12d10:	46bd      	mov	sp, r7
   12d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   12d16:	4658      	mov	r0, fp
   12d18:	f7fe fc9e 	bl	11658 <bt_addr_le_str>
   12d1c:	46ea      	mov	sl, sp
   12d1e:	b08a      	sub	sp, #40	; 0x28
   12d20:	466a      	mov	r2, sp
   12d22:	f240 3301 	movw	r3, #769	; 0x301
   12d26:	e9c2 6505 	strd	r6, r5, [r2, #20]
   12d2a:	61d0      	str	r0, [r2, #28]
   12d2c:	8413      	strh	r3, [r2, #32]
   12d2e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   12d32:	4648      	mov	r0, r9
   12d34:	f842 8f10 	str.w	r8, [r2, #16]!
   12d38:	f01c ffb2 	bl	2fca0 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   12d3c:	3501      	adds	r5, #1
   12d3e:	46d5      	mov	sp, sl
   12d40:	e7ab      	b.n	12c9a <bt_finalize_init+0x5a>
   12d42:	bf00      	nop
   12d44:	2000c580 	.word	0x2000c580
   12d48:	2000c654 	.word	0x2000c654
   12d4c:	00038b1b 	.word	0x00038b1b
   12d50:	0003a157 	.word	0x0003a157
   12d54:	0003a15b 	.word	0x0003a15b
   12d58:	03010200 	.word	0x03010200
   12d5c:	02000004 	.word	0x02000004
   12d60:	00036420 	.word	0x00036420
   12d64:	01000004 	.word	0x01000004
   12d68:	0003a16a 	.word	0x0003a16a
   12d6c:	0003a17b 	.word	0x0003a17b
   12d70:	01000006 	.word	0x01000006
   12d74:	0003a1b9 	.word	0x0003a1b9
   12d78:	01000005 	.word	0x01000005

00012d7c <bt_init>:

static int bt_init(void)
{
   12d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d7e:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12d80:	4d68      	ldr	r5, [pc, #416]	; (12f24 <bt_init+0x1a8>)
{
   12d82:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12d84:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   12d88:	6899      	ldr	r1, [r3, #8]
   12d8a:	f011 0101 	ands.w	r1, r1, #1
   12d8e:	d11d      	bne.n	12dcc <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12d90:	f640 4003 	movw	r0, #3075	; 0xc03
   12d94:	1d3a      	adds	r2, r7, #4
   12d96:	f7ff f965 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   12d9a:	4604      	mov	r4, r0
   12d9c:	2800      	cmp	r0, #0
   12d9e:	f040 80bd 	bne.w	12f1c <bt_init+0x1a0>
		hci_reset_complete(rsp);
   12da2:	687c      	ldr	r4, [r7, #4]
	uint8_t status = buf->data[0];
   12da4:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   12da6:	781b      	ldrb	r3, [r3, #0]
   12da8:	b96b      	cbnz	r3, 12dc6 <bt_init+0x4a>
		bt_scan_reset();
   12daa:	f000 fdab 	bl	13904 <bt_scan_reset>
   12dae:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   12db2:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12db6:	f002 0209 	and.w	r2, r2, #9
   12dba:	e8d3 1fef 	ldaex	r1, [r3]
   12dbe:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12dc2:	2800      	cmp	r0, #0
   12dc4:	d1f9      	bne.n	12dba <bt_init+0x3e>
		net_buf_unref(rsp);
   12dc6:	4620      	mov	r0, r4
   12dc8:	f005 fb12 	bl	183f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   12dcc:	2100      	movs	r1, #0
   12dce:	f241 0003 	movw	r0, #4099	; 0x1003
   12dd2:	1d3a      	adds	r2, r7, #4
   12dd4:	f7ff f946 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12dd8:	4604      	mov	r4, r0
   12dda:	2800      	cmp	r0, #0
   12ddc:	f040 809e 	bne.w	12f1c <bt_init+0x1a0>
	read_local_features_complete(rsp);
   12de0:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   12de2:	4e51      	ldr	r6, [pc, #324]	; (12f28 <bt_init+0x1ac>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   12de4:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   12de6:	f8d2 0001 	ldr.w	r0, [r2, #1]
   12dea:	f8d2 1005 	ldr.w	r1, [r2, #5]
   12dee:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   12df0:	4618      	mov	r0, r3
   12df2:	f005 fafd 	bl	183f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   12df6:	4621      	mov	r1, r4
   12df8:	f241 0001 	movw	r0, #4097	; 0x1001
   12dfc:	1d3a      	adds	r2, r7, #4
   12dfe:	f7ff f931 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12e02:	4604      	mov	r4, r0
   12e04:	2800      	cmp	r0, #0
   12e06:	f040 8089 	bne.w	12f1c <bt_init+0x1a0>
	read_local_ver_complete(rsp);
   12e0a:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   12e0c:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   12e0e:	785a      	ldrb	r2, [r3, #1]
   12e10:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   12e14:	885a      	ldrh	r2, [r3, #2]
   12e16:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   12e1a:	791a      	ldrb	r2, [r3, #4]
   12e1c:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12e20:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   12e24:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12e28:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   12e2c:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   12e30:	f005 fade 	bl	183f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   12e34:	4621      	mov	r1, r4
   12e36:	f241 0002 	movw	r0, #4098	; 0x1002
   12e3a:	1d3a      	adds	r2, r7, #4
   12e3c:	f7ff f912 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12e40:	4604      	mov	r4, r0
   12e42:	2800      	cmp	r0, #0
   12e44:	d16a      	bne.n	12f1c <bt_init+0x1a0>
	read_supported_commands_complete(rsp);
   12e46:	f8d7 c004 	ldr.w	ip, [r7, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   12e4a:	f8dc 200c 	ldr.w	r2, [ip, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   12e4e:	1c53      	adds	r3, r2, #1
   12e50:	3241      	adds	r2, #65	; 0x41
   12e52:	4634      	mov	r4, r6
   12e54:	6818      	ldr	r0, [r3, #0]
   12e56:	6859      	ldr	r1, [r3, #4]
   12e58:	3308      	adds	r3, #8
   12e5a:	c403      	stmia	r4!, {r0, r1}
   12e5c:	4293      	cmp	r3, r2
   12e5e:	4626      	mov	r6, r4
   12e60:	d1f7      	bne.n	12e52 <bt_init+0xd6>
	net_buf_unref(rsp);
   12e62:	4660      	mov	r0, ip
   12e64:	f005 fac4 	bl	183f0 <net_buf_unref>
		err = prng_init();
   12e68:	f000 ff5e 	bl	13d28 <prng_init>
		if (err) {
   12e6c:	4604      	mov	r4, r0
   12e6e:	2800      	cmp	r0, #0
   12e70:	d154      	bne.n	12f1c <bt_init+0x1a0>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12e72:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
   12e76:	069b      	lsls	r3, r3, #26
   12e78:	d41c      	bmi.n	12eb4 <bt_init+0x138>
		LOG_WRN("Controller to host flow control not supported");
   12e7a:	4b2c      	ldr	r3, [pc, #176]	; (12f2c <bt_init+0x1b0>)
   12e7c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12e80:	61fb      	str	r3, [r7, #28]
   12e82:	2302      	movs	r3, #2
   12e84:	482a      	ldr	r0, [pc, #168]	; (12f30 <bt_init+0x1b4>)
   12e86:	61bb      	str	r3, [r7, #24]
   12e88:	f107 0218 	add.w	r2, r7, #24
   12e8c:	f01c ff08 	bl	2fca0 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12e90:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   12e94:	065e      	lsls	r6, r3, #25
   12e96:	d44f      	bmi.n	12f38 <bt_init+0x1bc>
		LOG_ERR("Non-LE capable controller detected!");
   12e98:	4b26      	ldr	r3, [pc, #152]	; (12f34 <bt_init+0x1b8>)
   12e9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e9e:	61fb      	str	r3, [r7, #28]
   12ea0:	2302      	movs	r3, #2
   12ea2:	4823      	ldr	r0, [pc, #140]	; (12f30 <bt_init+0x1b4>)
   12ea4:	61bb      	str	r3, [r7, #24]
   12ea6:	f107 0218 	add.w	r2, r7, #24
   12eaa:	f01c fef9 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
   12eae:	f06f 0412 	mvn.w	r4, #18
   12eb2:	e033      	b.n	12f1c <bt_init+0x1a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   12eb4:	2107      	movs	r1, #7
   12eb6:	f640 4033 	movw	r0, #3123	; 0xc33
   12eba:	f7ff f885 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   12ebe:	4606      	mov	r6, r0
   12ec0:	2800      	cmp	r0, #0
   12ec2:	f000 8123 	beq.w	1310c <bt_init+0x390>
	return net_buf_simple_add(&buf->b, len);
   12ec6:	2107      	movs	r1, #7
   12ec8:	300c      	adds	r0, #12
   12eca:	f005 fbd5 	bl	18678 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   12ece:	231b      	movs	r3, #27
   12ed0:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   12ed2:	2303      	movs	r3, #3
   12ed4:	f8c0 4002 	str.w	r4, [r0, #2]
   12ed8:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   12eda:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   12edc:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   12ede:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   12ee0:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   12ee2:	4631      	mov	r1, r6
   12ee4:	f640 4033 	movw	r0, #3123	; 0xc33
   12ee8:	f7ff f8bc 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12eec:	4604      	mov	r4, r0
   12eee:	b9a8      	cbnz	r0, 12f1c <bt_init+0x1a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   12ef0:	2101      	movs	r1, #1
   12ef2:	f640 4031 	movw	r0, #3121	; 0xc31
   12ef6:	f7ff f867 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   12efa:	4606      	mov	r6, r0
   12efc:	2800      	cmp	r0, #0
   12efe:	f000 8105 	beq.w	1310c <bt_init+0x390>
	return net_buf_simple_add_u8(&buf->b, val);
   12f02:	2101      	movs	r1, #1
   12f04:	300c      	adds	r0, #12
   12f06:	f01e f986 	bl	31216 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   12f0a:	4622      	mov	r2, r4
   12f0c:	4631      	mov	r1, r6
   12f0e:	f640 4031 	movw	r0, #3121	; 0xc31
   12f12:	f7ff f8a7 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12f16:	4604      	mov	r4, r0
   12f18:	2800      	cmp	r0, #0
   12f1a:	d0b9      	beq.n	12e90 <bt_init+0x114>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   12f1c:	4620      	mov	r0, r4
   12f1e:	3724      	adds	r7, #36	; 0x24
   12f20:	46bd      	mov	sp, r7
   12f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f24:	2000c580 	.word	0x2000c580
   12f28:	2000c5f8 	.word	0x2000c5f8
   12f2c:	0003a1e0 	.word	0x0003a1e0
   12f30:	00036420 	.word	0x00036420
   12f34:	0003a20e 	.word	0x0003a20e
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12f38:	2100      	movs	r1, #0
   12f3a:	f242 0003 	movw	r0, #8195	; 0x2003
   12f3e:	f107 0208 	add.w	r2, r7, #8
   12f42:	f7ff f88f 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   12f46:	4604      	mov	r4, r0
   12f48:	2800      	cmp	r0, #0
   12f4a:	d1e7      	bne.n	12f1c <bt_init+0x1a0>
	read_le_features_complete(rsp);
   12f4c:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12f4e:	4e96      	ldr	r6, [pc, #600]	; (131a8 <bt_init+0x42c>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   12f50:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12f52:	f8d2 0001 	ldr.w	r0, [r2, #1]
   12f56:	f8d2 1005 	ldr.w	r1, [r2, #5]
   12f5a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   12f5c:	4618      	mov	r0, r3
   12f5e:	f005 fa47 	bl	183f0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   12f62:	4621      	mov	r1, r4
   12f64:	f242 0002 	movw	r0, #8194	; 0x2002
   12f68:	f107 0208 	add.w	r2, r7, #8
   12f6c:	f7ff f87a 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   12f70:	4604      	mov	r4, r0
   12f72:	2800      	cmp	r0, #0
   12f74:	d1d2      	bne.n	12f1c <bt_init+0x1a0>
		le_read_buffer_size_complete(rsp);
   12f76:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   12f78:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   12f7a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12f7e:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   12f80:	b149      	cbz	r1, 12f96 <bt_init+0x21a>
   12f82:	78d9      	ldrb	r1, [r3, #3]
   12f84:	b139      	cbz	r1, 12f96 <bt_init+0x21a>
	bt_dev.le.acl_mtu = acl_mtu;
   12f86:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   12f8a:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12f8c:	4611      	mov	r1, r2
   12f8e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   12f92:	f021 fe4e 	bl	34c32 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   12f96:	4620      	mov	r0, r4
   12f98:	f005 fa2a 	bl	183f0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12f9c:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   12fa0:	f016 0620 	ands.w	r6, r6, #32
   12fa4:	d118      	bne.n	12fd8 <bt_init+0x25c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   12fa6:	2102      	movs	r1, #2
   12fa8:	f640 406d 	movw	r0, #3181	; 0xc6d
   12fac:	f7ff f80c 	bl	11fc8 <bt_hci_cmd_create>
		if (!buf) {
   12fb0:	4604      	mov	r4, r0
   12fb2:	2800      	cmp	r0, #0
   12fb4:	f000 80aa 	beq.w	1310c <bt_init+0x390>
	return net_buf_simple_add(&buf->b, len);
   12fb8:	2102      	movs	r1, #2
   12fba:	300c      	adds	r0, #12
   12fbc:	f005 fb5c 	bl	18678 <net_buf_simple_add>
		cp_le->le = 0x01;
   12fc0:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   12fc2:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   12fc4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   12fc6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   12fc8:	4632      	mov	r2, r6
   12fca:	f640 406d 	movw	r0, #3181	; 0xc6d
   12fce:	f7ff f849 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   12fd2:	4604      	mov	r4, r0
   12fd4:	2800      	cmp	r0, #0
   12fd6:	d1a1      	bne.n	12f1c <bt_init+0x1a0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   12fd8:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   12fdc:	071c      	lsls	r4, r3, #28
   12fde:	d513      	bpl.n	13008 <bt_init+0x28c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   12fe0:	2100      	movs	r1, #0
   12fe2:	f242 001c 	movw	r0, #8220	; 0x201c
   12fe6:	f107 0208 	add.w	r2, r7, #8
   12fea:	f7ff f83b 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   12fee:	4604      	mov	r4, r0
   12ff0:	2800      	cmp	r0, #0
   12ff2:	d193      	bne.n	12f1c <bt_init+0x1a0>
		le_read_supp_states_complete(rsp);
   12ff4:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12ff6:	68c3      	ldr	r3, [r0, #12]
   12ff8:	f8d3 2001 	ldr.w	r2, [r3, #1]
   12ffc:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   13000:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   13004:	f005 f9f4 	bl	183f0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   13008:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1300c:	0698      	lsls	r0, r3, #26
   1300e:	d521      	bpl.n	13054 <bt_init+0x2d8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13010:	1d39      	adds	r1, r7, #4
   13012:	1cb8      	adds	r0, r7, #2
   13014:	f7ff f8a6 	bl	12164 <hci_le_read_max_data_len>
		if (err) {
   13018:	4604      	mov	r4, r0
   1301a:	2800      	cmp	r0, #0
   1301c:	f47f af7e 	bne.w	12f1c <bt_init+0x1a0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13020:	2104      	movs	r1, #4
   13022:	f242 0024 	movw	r0, #8228	; 0x2024
   13026:	f7fe ffcf 	bl	11fc8 <bt_hci_cmd_create>
		if (!buf) {
   1302a:	4606      	mov	r6, r0
   1302c:	2800      	cmp	r0, #0
   1302e:	d06d      	beq.n	1310c <bt_init+0x390>
   13030:	2104      	movs	r1, #4
   13032:	300c      	adds	r0, #12
   13034:	f005 fb20 	bl	18678 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13038:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1303a:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1303c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1303e:	88bb      	ldrh	r3, [r7, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13040:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   13042:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13044:	f242 0024 	movw	r0, #8228	; 0x2024
   13048:	f7ff f80c 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   1304c:	4604      	mov	r4, r0
   1304e:	2800      	cmp	r0, #0
   13050:	f47f af64 	bne.w	12f1c <bt_init+0x1a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   13054:	2108      	movs	r1, #8
   13056:	f242 0001 	movw	r0, #8193	; 0x2001
   1305a:	f7fe ffb5 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   1305e:	4604      	mov	r4, r0
   13060:	2800      	cmp	r0, #0
   13062:	d053      	beq.n	1310c <bt_init+0x390>
   13064:	2108      	movs	r1, #8
   13066:	300c      	adds	r0, #12
   13068:	f005 fb06 	bl	18678 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1306c:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   13070:	f012 0f02 	tst.w	r2, #2
   13074:	bf14      	ite	ne
   13076:	232f      	movne	r3, #47	; 0x2f
   13078:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1307a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1307c:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   13080:	bf48      	it	mi
   13082:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13086:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   1308a:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1308e:	bf18      	it	ne
   13090:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   13094:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   13096:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1309a:	4621      	mov	r1, r4
   1309c:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1309e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   130a0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   130a2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   130a4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   130a6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   130a8:	71c2      	strb	r2, [r0, #7]
   130aa:	f242 0001 	movw	r0, #8193	; 0x2001
   130ae:	f7fe ffd9 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   130b2:	4604      	mov	r4, r0
   130b4:	2800      	cmp	r0, #0
   130b6:	f47f af31 	bne.w	12f1c <bt_init+0x1a0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   130ba:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   130be:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   130c2:	069a      	lsls	r2, r3, #26
   130c4:	d425      	bmi.n	13112 <bt_init+0x396>
	if (bt_dev.le.acl_mtu) {
   130c6:	b9d1      	cbnz	r1, 130fe <bt_init+0x382>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   130c8:	f241 0005 	movw	r0, #4101	; 0x1005
   130cc:	f107 0208 	add.w	r2, r7, #8
   130d0:	f7fe ffc8 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   130d4:	4604      	mov	r4, r0
   130d6:	2800      	cmp	r0, #0
   130d8:	f47f af20 	bne.w	12f1c <bt_init+0x1a0>
	if (bt_dev.le.acl_mtu) {
   130dc:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   130e0:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   130e2:	b94b      	cbnz	r3, 130f8 <bt_init+0x37c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   130e4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   130e6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   130ea:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   130ee:	889a      	ldrh	r2, [r3, #4]
   130f0:	482e      	ldr	r0, [pc, #184]	; (131ac <bt_init+0x430>)
   130f2:	4611      	mov	r1, r2
   130f4:	f021 fd9d 	bl	34c32 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   130f8:	4620      	mov	r0, r4
   130fa:	f005 f979 	bl	183f0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   130fe:	2108      	movs	r1, #8
   13100:	f640 4001 	movw	r0, #3073	; 0xc01
   13104:	f7fe ff60 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   13108:	4604      	mov	r4, r0
   1310a:	b990      	cbnz	r0, 13132 <bt_init+0x3b6>
		return -ENOBUFS;
   1310c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13110:	e704      	b.n	12f1c <bt_init+0x1a0>
	else if (!bt_dev.le.acl_mtu) {
   13112:	2900      	cmp	r1, #0
   13114:	d1f3      	bne.n	130fe <bt_init+0x382>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   13116:	4b26      	ldr	r3, [pc, #152]	; (131b0 <bt_init+0x434>)
   13118:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1311c:	61fb      	str	r3, [r7, #28]
   1311e:	2302      	movs	r3, #2
   13120:	4824      	ldr	r0, [pc, #144]	; (131b4 <bt_init+0x438>)
   13122:	61bb      	str	r3, [r7, #24]
   13124:	f107 0218 	add.w	r2, r7, #24
   13128:	f01c fdba 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1312c:	f06f 0404 	mvn.w	r4, #4
   13130:	e6f4      	b.n	12f1c <bt_init+0x1a0>
   13132:	2108      	movs	r1, #8
   13134:	300c      	adds	r0, #12
   13136:	f005 fa9f 	bl	18678 <net_buf_simple_add>
	dst[0] = val;
   1313a:	2310      	movs	r3, #16
   1313c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1313e:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   13140:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   13142:	7043      	strb	r3, [r0, #1]
   13144:	2602      	movs	r6, #2
   13146:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   13148:	4621      	mov	r1, r4
	dst[0] = val;
   1314a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1314c:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   1314e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   13150:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   13152:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   13154:	71c3      	strb	r3, [r0, #7]
   13156:	f640 4001 	movw	r0, #3073	; 0xc01
   1315a:	f7fe ff83 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   1315e:	4604      	mov	r4, r0
   13160:	2800      	cmp	r0, #0
   13162:	f47f aedb 	bne.w	12f1c <bt_init+0x1a0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   13166:	4601      	mov	r1, r0
   13168:	1d3a      	adds	r2, r7, #4
   1316a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1316e:	f7fe ff79 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   13172:	b318      	cbz	r0, 131bc <bt_init+0x440>
		LOG_WRN("Vendor HCI extensions not available");
   13174:	4b10      	ldr	r3, [pc, #64]	; (131b8 <bt_init+0x43c>)
   13176:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
   1317a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1317e:	480d      	ldr	r0, [pc, #52]	; (131b4 <bt_init+0x438>)
   13180:	f107 0218 	add.w	r2, r7, #24
   13184:	f01c fd8c 	bl	2fca0 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   13188:	f000 fb10 	bl	137ac <bt_id_init>
	if (err) {
   1318c:	4604      	mov	r4, r0
   1318e:	2800      	cmp	r0, #0
   13190:	f47f aec4 	bne.w	12f1c <bt_init+0x1a0>
		err = bt_conn_init();
   13194:	f001 fe46 	bl	14e24 <bt_conn_init>
		if (err) {
   13198:	4604      	mov	r4, r0
   1319a:	2800      	cmp	r0, #0
   1319c:	f47f aebe 	bne.w	12f1c <bt_init+0x1a0>
	bt_finalize_init();
   131a0:	f7ff fd4e 	bl	12c40 <bt_finalize_init>
	return 0;
   131a4:	e6ba      	b.n	12f1c <bt_init+0x1a0>
   131a6:	bf00      	nop
   131a8:	2000c658 	.word	0x2000c658
   131ac:	2000c688 	.word	0x2000c688
   131b0:	0003a232 	.word	0x0003a232
   131b4:	00036420 	.word	0x00036420
   131b8:	0003a255 	.word	0x0003a255
	rp.info = (void *)rsp->data;
   131bc:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   131be:	466e      	mov	r6, sp
	rp.info = (void *)rsp->data;
   131c0:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   131c2:	b08a      	sub	sp, #40	; 0x28
   131c4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   131c8:	2b03      	cmp	r3, #3
		return plat_str[platform];
   131ca:	bf96      	itet	ls
   131cc:	4a43      	ldrls	r2, [pc, #268]	; (132dc <bt_init+0x560>)
	return "unknown";
   131ce:	4944      	ldrhi	r1, [pc, #272]	; (132e0 <bt_init+0x564>)
		return plat_str[platform];
   131d0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   131d4:	466a      	mov	r2, sp
   131d6:	61d3      	str	r3, [r2, #28]
   131d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   131dc:	4841      	ldr	r0, [pc, #260]	; (132e4 <bt_init+0x568>)
   131de:	8413      	strh	r3, [r2, #32]
   131e0:	4b41      	ldr	r3, [pc, #260]	; (132e8 <bt_init+0x56c>)
   131e2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   131e6:	f842 3f10 	str.w	r3, [r2, #16]!
   131ea:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   131ee:	483f      	ldr	r0, [pc, #252]	; (132ec <bt_init+0x570>)
   131f0:	f01c fd56 	bl	2fca0 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   131f4:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   131f8:	46b5      	mov	sp, r6
   131fa:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
   131fc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   13200:	d14c      	bne.n	1329c <bt_init+0x520>
	if (variant < ARRAY_SIZE(nordic_str)) {
   13202:	2b03      	cmp	r3, #3
   13204:	d84a      	bhi.n	1329c <bt_init+0x520>
		return nordic_str[variant];
   13206:	4a3a      	ldr	r2, [pc, #232]	; (132f0 <bt_init+0x574>)
   13208:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1320c:	466e      	mov	r6, sp
   1320e:	b08a      	sub	sp, #40	; 0x28
   13210:	466a      	mov	r2, sp
   13212:	61d3      	str	r3, [r2, #28]
   13214:	f44f 7300 	mov.w	r3, #512	; 0x200
   13218:	4836      	ldr	r0, [pc, #216]	; (132f4 <bt_init+0x578>)
   1321a:	8413      	strh	r3, [r2, #32]
   1321c:	4b32      	ldr	r3, [pc, #200]	; (132e8 <bt_init+0x56c>)
   1321e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   13222:	f842 3f10 	str.w	r3, [r2, #16]!
   13226:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1322a:	4830      	ldr	r0, [pc, #192]	; (132ec <bt_init+0x570>)
   1322c:	f01c fd38 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   13230:	46b5      	mov	sp, r6
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   13232:	7963      	ldrb	r3, [r4, #5]
   13234:	f894 c006 	ldrb.w	ip, [r4, #6]
	if (variant < ARRAY_SIZE(var_str)) {
   13238:	2b03      	cmp	r3, #3
		return var_str[variant];
   1323a:	bf98      	it	ls
   1323c:	4a2e      	ldrls	r2, [pc, #184]	; (132f8 <bt_init+0x57c>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1323e:	f8b4 6007 	ldrh.w	r6, [r4, #7]
   13242:	f8d4 0009 	ldr.w	r0, [r4, #9]
   13246:	466c      	mov	r4, sp
   13248:	b08c      	sub	sp, #48	; 0x30
		return var_str[variant];
   1324a:	bf94      	ite	ls
   1324c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   13250:	4923      	ldrhi	r1, [pc, #140]	; (132e0 <bt_init+0x564>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   13252:	466a      	mov	r2, sp
   13254:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   13258:	f44f 7300 	mov.w	r3, #512	; 0x200
   1325c:	f8df e09c 	ldr.w	lr, [pc, #156]	; 132fc <bt_init+0x580>
   13260:	8593      	strh	r3, [r2, #44]	; 0x2c
   13262:	4b27      	ldr	r3, [pc, #156]	; (13300 <bt_init+0x584>)
   13264:	e9c2 e105 	strd	lr, r1, [r2, #20]
   13268:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   1326c:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   13270:	f842 3f10 	str.w	r3, [r2, #16]!
   13274:	481d      	ldr	r0, [pc, #116]	; (132ec <bt_init+0x570>)
   13276:	f01c fd13 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   1327a:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   1327c:	6878      	ldr	r0, [r7, #4]
   1327e:	f005 f8b7 	bl	183f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13282:	2100      	movs	r1, #0
   13284:	f64f 4002 	movw	r0, #64514	; 0xfc02
   13288:	1d3a      	adds	r2, r7, #4
   1328a:	f7fe feeb 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   1328e:	4604      	mov	r4, r0
   13290:	b130      	cbz	r0, 132a0 <bt_init+0x524>
		LOG_WRN("Failed to read supported vendor commands");
   13292:	4b1c      	ldr	r3, [pc, #112]	; (13304 <bt_init+0x588>)
			LOG_WRN("Failed to read supported vendor features");
   13294:	61fb      	str	r3, [r7, #28]
   13296:	2302      	movs	r3, #2
   13298:	61bb      	str	r3, [r7, #24]
   1329a:	e76e      	b.n	1317a <bt_init+0x3fe>
		return "unknown";
   1329c:	4910      	ldr	r1, [pc, #64]	; (132e0 <bt_init+0x564>)
   1329e:	e7b5      	b.n	1320c <bt_init+0x490>
	rp.cmds = (void *)rsp->data;
   132a0:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   132a2:	68c3      	ldr	r3, [r0, #12]
   132a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   132a8:	f8a5 30c1 	strh.w	r3, [r5, #193]	; 0xc1
	net_buf_unref(rsp);
   132ac:	f005 f8a0 	bl	183f0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   132b0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   132b4:	075b      	lsls	r3, r3, #29
   132b6:	f57f af67 	bpl.w	13188 <bt_init+0x40c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   132ba:	4621      	mov	r1, r4
   132bc:	f64f 4003 	movw	r0, #64515	; 0xfc03
   132c0:	1d3a      	adds	r2, r7, #4
   132c2:	f7fe fecf 	bl	12064 <bt_hci_cmd_send_sync>
		if (err) {
   132c6:	b108      	cbz	r0, 132cc <bt_init+0x550>
			LOG_WRN("Failed to read supported vendor features");
   132c8:	4b0f      	ldr	r3, [pc, #60]	; (13308 <bt_init+0x58c>)
   132ca:	e7e3      	b.n	13294 <bt_init+0x518>
		rp.feat = (void *)rsp->data;
   132cc:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   132ce:	68c3      	ldr	r3, [r0, #12]
   132d0:	785b      	ldrb	r3, [r3, #1]
   132d2:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(rsp);
   132d6:	f005 f88b 	bl	183f0 <net_buf_unref>
   132da:	e755      	b.n	13188 <bt_init+0x40c>
   132dc:	00036abc 	.word	0x00036abc
   132e0:	00039ca2 	.word	0x00039ca2
   132e4:	0003a279 	.word	0x0003a279
   132e8:	01000004 	.word	0x01000004
   132ec:	00036420 	.word	0x00036420
   132f0:	00036aac 	.word	0x00036aac
   132f4:	0003a292 	.word	0x0003a292
   132f8:	00036a9c 	.word	0x00036a9c
   132fc:	0003a2aa 	.word	0x0003a2aa
   13300:	01000007 	.word	0x01000007
   13304:	0003a2d7 	.word	0x0003a2d7
   13308:	0003a300 	.word	0x0003a300

0001330c <init_work>:

static void init_work(struct k_work *work)
{
   1330c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   1330e:	f7ff fd35 	bl	12d7c <bt_init>
	if (ready_cb) {
   13312:	4b03      	ldr	r3, [pc, #12]	; (13320 <init_work+0x14>)
   13314:	681b      	ldr	r3, [r3, #0]
   13316:	b113      	cbz	r3, 1331e <init_work+0x12>
		ready_cb(err);
	}
}
   13318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1331c:	4718      	bx	r3
}
   1331e:	bd10      	pop	{r4, pc}
   13320:	2000fb7c 	.word	0x2000fb7c

00013324 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   13324:	b5f0      	push	{r4, r5, r6, r7, lr}
   13326:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   13328:	4d33      	ldr	r5, [pc, #204]	; (133f8 <bt_enable+0xd4>)
{
   1332a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1332c:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
   13330:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   13332:	b983      	cbnz	r3, 13356 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   13334:	4b31      	ldr	r3, [pc, #196]	; (133fc <bt_enable+0xd8>)
		return -ENODEV;
   13336:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   1333a:	617b      	str	r3, [r7, #20]
   1333c:	2302      	movs	r3, #2
   1333e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13342:	482f      	ldr	r0, [pc, #188]	; (13400 <bt_enable+0xdc>)
   13344:	f107 0210 	add.w	r2, r7, #16
   13348:	613b      	str	r3, [r7, #16]
   1334a:	f01c fca9 	bl	2fca0 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1334e:	4620      	mov	r0, r4
   13350:	371c      	adds	r7, #28
   13352:	46bd      	mov	sp, r7
   13354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13356:	f06f 0102 	mvn.w	r1, #2
   1335a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   1335e:	f01c fca2 	bl	2fca6 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13362:	2101      	movs	r1, #1
   13364:	f01c fc85 	bl	2fc72 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13368:	ea10 0401 	ands.w	r4, r0, r1
   1336c:	d141      	bne.n	133f2 <bt_enable+0xce>
	ready_cb = cb;
   1336e:	4b25      	ldr	r3, [pc, #148]	; (13404 <bt_enable+0xe0>)
   13370:	601e      	str	r6, [r3, #0]
   13372:	460a      	mov	r2, r1
   13374:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13378:	4621      	mov	r1, r4
   1337a:	f021 fc5a 	bl	34c32 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1337e:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   13382:	f021 fc30 	bl	34be6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13386:	2200      	movs	r2, #0
   13388:	2300      	movs	r3, #0
   1338a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1338e:	f06f 0308 	mvn.w	r3, #8
   13392:	f44f 7200 	mov.w	r2, #512	; 0x200
   13396:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1339a:	e9cd 4400 	strd	r4, r4, [sp]
   1339e:	4b1a      	ldr	r3, [pc, #104]	; (13408 <bt_enable+0xe4>)
   133a0:	491a      	ldr	r1, [pc, #104]	; (1340c <bt_enable+0xe8>)
   133a2:	9404      	str	r4, [sp, #16]
   133a4:	481a      	ldr	r0, [pc, #104]	; (13410 <bt_enable+0xec>)
   133a6:	f015 f94d 	bl	28644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   133aa:	491a      	ldr	r1, [pc, #104]	; (13414 <bt_enable+0xf0>)
   133ac:	4818      	ldr	r0, [pc, #96]	; (13410 <bt_enable+0xec>)
   133ae:	f021 fbf1 	bl	34b94 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   133b2:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   133b6:	68db      	ldr	r3, [r3, #12]
   133b8:	4798      	blx	r3
	if (err) {
   133ba:	4604      	mov	r4, r0
   133bc:	b178      	cbz	r0, 133de <bt_enable+0xba>
		LOG_ERR("HCI driver open failed (%d)", err);
   133be:	466d      	mov	r5, sp
   133c0:	b088      	sub	sp, #32
   133c2:	462a      	mov	r2, r5
   133c4:	4b14      	ldr	r3, [pc, #80]	; (13418 <bt_enable+0xf4>)
   133c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   133ca:	e9c5 3005 	strd	r3, r0, [r5, #20]
   133ce:	2303      	movs	r3, #3
   133d0:	480b      	ldr	r0, [pc, #44]	; (13400 <bt_enable+0xdc>)
   133d2:	f842 3f10 	str.w	r3, [r2, #16]!
   133d6:	f01c fc63 	bl	2fca0 <z_log_msg_static_create.constprop.0>
   133da:	46ad      	mov	sp, r5
		return err;
   133dc:	e7b7      	b.n	1334e <bt_enable+0x2a>
	if (!cb) {
   133de:	b91e      	cbnz	r6, 133e8 <bt_enable+0xc4>
		return bt_init();
   133e0:	f7ff fccc 	bl	12d7c <bt_init>
   133e4:	4604      	mov	r4, r0
   133e6:	e7b2      	b.n	1334e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   133e8:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   133ec:	f016 f81a 	bl	29424 <k_work_submit>
	return 0;
   133f0:	e7ad      	b.n	1334e <bt_enable+0x2a>
		return -EALREADY;
   133f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   133f6:	e7aa      	b.n	1334e <bt_enable+0x2a>
   133f8:	2000c580 	.word	0x2000c580
   133fc:	0003a329 	.word	0x0003a329
   13400:	00036420 	.word	0x00036420
   13404:	2000fb7c 	.word	0x2000fb7c
   13408:	00012841 	.word	0x00012841
   1340c:	200135a0 	.word	0x200135a0
   13410:	2000d790 	.word	0x2000d790
   13414:	0003a342 	.word	0x0003a342
   13418:	0003a348 	.word	0x0003a348

0001341c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1341c:	4b02      	ldr	r3, [pc, #8]	; (13428 <bt_is_ready+0xc>)
   1341e:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13422:	f3c0 0080 	ubfx	r0, r0, #2, #1
   13426:	4770      	bx	lr
   13428:	2000c654 	.word	0x2000c654

0001342c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1342c:	4800      	ldr	r0, [pc, #0]	; (13430 <bt_get_name+0x4>)
   1342e:	4770      	bx	lr
   13430:	0003a364 	.word	0x0003a364

00013434 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13436:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13438:	2400      	movs	r4, #0
   1343a:	4d09      	ldr	r5, [pc, #36]	; (13460 <id_find+0x2c>)
   1343c:	79ef      	ldrb	r7, [r5, #7]
   1343e:	b2e3      	uxtb	r3, r4
   13440:	429f      	cmp	r7, r3
   13442:	d802      	bhi.n	1344a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13444:	f06f 0001 	mvn.w	r0, #1
   13448:	e007      	b.n	1345a <id_find+0x26>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1344a:	4629      	mov	r1, r5
   1344c:	4630      	mov	r0, r6
   1344e:	f01c fcd6 	bl	2fdfe <bt_addr_le_eq>
   13452:	3507      	adds	r5, #7
   13454:	1c63      	adds	r3, r4, #1
   13456:	b108      	cbz	r0, 1345c <id_find+0x28>
   13458:	4620      	mov	r0, r4
}
   1345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1345c:	461c      	mov	r4, r3
   1345e:	e7ee      	b.n	1343e <id_find+0xa>
   13460:	2000c580 	.word	0x2000c580

00013464 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13464:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13466:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13468:	460d      	mov	r5, r1
   1346a:	b171      	cbz	r1, 1348a <id_create.constprop.0+0x26>
   1346c:	4628      	mov	r0, r5
   1346e:	4912      	ldr	r1, [pc, #72]	; (134b8 <id_create.constprop.0+0x54>)
   13470:	f01c fcc5 	bl	2fdfe <bt_addr_le_eq>
   13474:	b948      	cbnz	r0, 1348a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   13476:	4629      	mov	r1, r5
   13478:	4810      	ldr	r0, [pc, #64]	; (134bc <id_create.constprop.0+0x58>)
   1347a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1347e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13480:	f01c fcca 	bl	2fe18 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   13484:	2000      	movs	r0, #0
}
   13486:	b003      	add	sp, #12
   13488:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1348a:	4668      	mov	r0, sp
   1348c:	f01c fbc1 	bl	2fc12 <bt_addr_le_create_static>
			if (err) {
   13490:	2800      	cmp	r0, #0
   13492:	d1f8      	bne.n	13486 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   13494:	4668      	mov	r0, sp
   13496:	f7ff ffcd 	bl	13434 <id_find>
   1349a:	2800      	cmp	r0, #0
   1349c:	daf5      	bge.n	1348a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1349e:	4b07      	ldr	r3, [pc, #28]	; (134bc <id_create.constprop.0+0x58>)
   134a0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   134a4:	4669      	mov	r1, sp
   134a6:	4418      	add	r0, r3
   134a8:	f01c fcb6 	bl	2fe18 <bt_addr_le_copy>
		if (addr) {
   134ac:	2d00      	cmp	r5, #0
   134ae:	d0e9      	beq.n	13484 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   134b0:	4601      	mov	r1, r0
   134b2:	4628      	mov	r0, r5
   134b4:	e7e4      	b.n	13480 <id_create.constprop.0+0x1c>
   134b6:	bf00      	nop
   134b8:	00039ba5 	.word	0x00039ba5
   134bc:	2000c580 	.word	0x2000c580

000134c0 <set_random_address>:
{
   134c0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   134c2:	2206      	movs	r2, #6
   134c4:	4911      	ldr	r1, [pc, #68]	; (1350c <set_random_address+0x4c>)
   134c6:	4605      	mov	r5, r0
   134c8:	f021 fd80 	bl	34fcc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   134cc:	b1c8      	cbz	r0, 13502 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   134ce:	2106      	movs	r1, #6
   134d0:	f242 0005 	movw	r0, #8197	; 0x2005
   134d4:	f7fe fd78 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   134d8:	4604      	mov	r4, r0
   134da:	b1a0      	cbz	r0, 13506 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   134dc:	2206      	movs	r2, #6
   134de:	4629      	mov	r1, r5
   134e0:	300c      	adds	r0, #12
   134e2:	f01d fe8c 	bl	311fe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   134e6:	2200      	movs	r2, #0
   134e8:	4621      	mov	r1, r4
   134ea:	f242 0005 	movw	r0, #8197	; 0x2005
   134ee:	f7fe fdb9 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   134f2:	b938      	cbnz	r0, 13504 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   134f4:	4805      	ldr	r0, [pc, #20]	; (1350c <set_random_address+0x4c>)
   134f6:	4629      	mov	r1, r5
   134f8:	f01c fc89 	bl	2fe0e <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   134fc:	2301      	movs	r3, #1
   134fe:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13502:	2000      	movs	r0, #0
}
   13504:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13506:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1350a:	e7fb      	b.n	13504 <set_random_address+0x44>
   1350c:	2000c5e9 	.word	0x2000c5e9

00013510 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13510:	b570      	push	{r4, r5, r6, lr}
   13512:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13514:	4604      	mov	r4, r0
{
   13516:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13518:	b1f0      	cbz	r0, 13558 <bt_id_create+0x48>
   1351a:	4922      	ldr	r1, [pc, #136]	; (135a4 <bt_id_create+0x94>)
   1351c:	f01c fc6f 	bl	2fdfe <bt_addr_le_eq>
   13520:	b9d0      	cbnz	r0, 13558 <bt_id_create+0x48>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13522:	7823      	ldrb	r3, [r4, #0]
   13524:	2b01      	cmp	r3, #1
   13526:	d104      	bne.n	13532 <bt_id_create+0x22>
   13528:	79a3      	ldrb	r3, [r4, #6]
   1352a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1352e:	2bc0      	cmp	r3, #192	; 0xc0
   13530:	d00d      	beq.n	1354e <bt_id_create+0x3e>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
			LOG_ERR("Only static random identity address supported");
   13532:	4b1d      	ldr	r3, [pc, #116]	; (135a8 <bt_id_create+0x98>)
   13534:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13538:	9305      	str	r3, [sp, #20]
   1353a:	2302      	movs	r3, #2
   1353c:	481b      	ldr	r0, [pc, #108]	; (135ac <bt_id_create+0x9c>)
   1353e:	aa04      	add	r2, sp, #16
   13540:	9304      	str	r3, [sp, #16]
   13542:	f01c fc70 	bl	2fe26 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13546:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1354a:	b006      	add	sp, #24
   1354c:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
   1354e:	4620      	mov	r0, r4
   13550:	f7ff ff70 	bl	13434 <id_find>
   13554:	2800      	cmp	r0, #0
   13556:	da1f      	bge.n	13598 <bt_id_create+0x88>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13558:	2d00      	cmp	r5, #0
   1355a:	d1f4      	bne.n	13546 <bt_id_create+0x36>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1355c:	4d14      	ldr	r5, [pc, #80]	; (135b0 <bt_id_create+0xa0>)
   1355e:	79eb      	ldrb	r3, [r5, #7]
   13560:	2b01      	cmp	r3, #1
   13562:	d01c      	beq.n	1359e <bt_id_create+0x8e>
   13564:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   13568:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1356c:	07db      	lsls	r3, r3, #31
   1356e:	d407      	bmi.n	13580 <bt_id_create+0x70>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13570:	2c00      	cmp	r4, #0
   13572:	d0e8      	beq.n	13546 <bt_id_create+0x36>
   13574:	4620      	mov	r0, r4
   13576:	490b      	ldr	r1, [pc, #44]	; (135a4 <bt_id_create+0x94>)
   13578:	f01c fc41 	bl	2fdfe <bt_addr_le_eq>
   1357c:	2800      	cmp	r0, #0
   1357e:	d1e2      	bne.n	13546 <bt_id_create+0x36>
	new_id = bt_dev.id_count;
   13580:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13582:	4621      	mov	r1, r4
   13584:	4630      	mov	r0, r6
   13586:	f7ff ff6d 	bl	13464 <id_create.constprop.0>
	if (err) {
   1358a:	2800      	cmp	r0, #0
   1358c:	d1dd      	bne.n	1354a <bt_id_create+0x3a>
		bt_dev.id_count++;
   1358e:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13590:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13592:	3301      	adds	r3, #1
   13594:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13596:	e7d8      	b.n	1354a <bt_id_create+0x3a>
			return -EALREADY;
   13598:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1359c:	e7d5      	b.n	1354a <bt_id_create+0x3a>
		return -ENOMEM;
   1359e:	f06f 000b 	mvn.w	r0, #11
   135a2:	e7d2      	b.n	1354a <bt_id_create+0x3a>
   135a4:	00039ba5 	.word	0x00039ba5
   135a8:	0003a45a 	.word	0x0003a45a
   135ac:	00036430 	.word	0x00036430
   135b0:	2000c580 	.word	0x2000c580

000135b4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   135b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   135b6:	4604      	mov	r4, r0
{
   135b8:	b089      	sub	sp, #36	; 0x24
	CHECKIF(addr == NULL) {
   135ba:	b960      	cbnz	r0, 135d6 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   135bc:	4b19      	ldr	r3, [pc, #100]	; (13624 <bt_id_read_public_addr+0x70>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   135be:	9307      	str	r3, [sp, #28]
   135c0:	2302      	movs	r3, #2
   135c2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   135c6:	4818      	ldr	r0, [pc, #96]	; (13628 <bt_id_read_public_addr+0x74>)
   135c8:	aa06      	add	r2, sp, #24
   135ca:	9306      	str	r3, [sp, #24]
   135cc:	f01c fc2b 	bl	2fe26 <z_log_msg_static_create.constprop.0>
		return 0U;
   135d0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   135d2:	b009      	add	sp, #36	; 0x24
   135d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   135d6:	2100      	movs	r1, #0
   135d8:	f241 0009 	movw	r0, #4105	; 0x1009
   135dc:	aa01      	add	r2, sp, #4
   135de:	f7fe fd41 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   135e2:	4606      	mov	r6, r0
   135e4:	b108      	cbz	r0, 135ea <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   135e6:	4b11      	ldr	r3, [pc, #68]	; (1362c <bt_id_read_public_addr+0x78>)
   135e8:	e7e9      	b.n	135be <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   135ea:	9f01      	ldr	r7, [sp, #4]
   135ec:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   135ee:	68fd      	ldr	r5, [r7, #12]
   135f0:	490f      	ldr	r1, [pc, #60]	; (13630 <bt_id_read_public_addr+0x7c>)
   135f2:	3501      	adds	r5, #1
   135f4:	4628      	mov	r0, r5
   135f6:	f021 fce9 	bl	34fcc <memcmp>
   135fa:	b128      	cbz	r0, 13608 <bt_id_read_public_addr+0x54>
   135fc:	2206      	movs	r2, #6
   135fe:	4628      	mov	r0, r5
   13600:	490c      	ldr	r1, [pc, #48]	; (13634 <bt_id_read_public_addr+0x80>)
   13602:	f021 fce3 	bl	34fcc <memcmp>
   13606:	b918      	cbnz	r0, 13610 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   13608:	4638      	mov	r0, r7
   1360a:	f004 fef1 	bl	183f0 <net_buf_unref>
		return 0U;
   1360e:	e7df      	b.n	135d0 <bt_id_read_public_addr+0x1c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13610:	4629      	mov	r1, r5
   13612:	1c60      	adds	r0, r4, #1
   13614:	f01c fbfb 	bl	2fe0e <bt_addr_copy>
	net_buf_unref(rsp);
   13618:	4638      	mov	r0, r7
	addr->type = BT_ADDR_LE_PUBLIC;
   1361a:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1361c:	f004 fee8 	bl	183f0 <net_buf_unref>
	return 1U;
   13620:	2001      	movs	r0, #1
   13622:	e7d6      	b.n	135d2 <bt_id_read_public_addr+0x1e>
   13624:	0003a488 	.word	0x0003a488
   13628:	00036430 	.word	0x00036430
   1362c:	0003a4a1 	.word	0x0003a4a1
   13630:	00039bb2 	.word	0x00039bb2
   13634:	00039bac 	.word	0x00039bac

00013638 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13638:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1363a:	4668      	mov	r0, sp
   1363c:	f7ff ffba 	bl	135b4 <bt_id_read_public_addr>
   13640:	4b04      	ldr	r3, [pc, #16]	; (13654 <bt_setup_public_id_addr+0x1c>)
   13642:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13644:	b118      	cbz	r0, 1364e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13646:	4669      	mov	r1, sp
   13648:	2000      	movs	r0, #0
   1364a:	f7ff ff0b 	bl	13464 <id_create.constprop.0>
}
   1364e:	b003      	add	sp, #12
   13650:	f85d fb04 	ldr.w	pc, [sp], #4
   13654:	2000c580 	.word	0x2000c580

00013658 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13658:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1365a:	4b24      	ldr	r3, [pc, #144]	; (136ec <bt_read_static_addr+0x94>)
{
   1365c:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1365e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
   13662:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13664:	07db      	lsls	r3, r3, #31
{
   13666:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13668:	d40d      	bmi.n	13686 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   1366a:	4b21      	ldr	r3, [pc, #132]	; (136f0 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1366c:	9307      	str	r3, [sp, #28]
		return 0;
   1366e:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   13670:	2302      	movs	r3, #2
   13672:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13676:	481f      	ldr	r0, [pc, #124]	; (136f4 <bt_read_static_addr+0x9c>)
   13678:	aa06      	add	r2, sp, #24
   1367a:	9306      	str	r3, [sp, #24]
   1367c:	f01c fbd3 	bl	2fe26 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13680:	4620      	mov	r0, r4
   13682:	b009      	add	sp, #36	; 0x24
   13684:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13686:	2100      	movs	r1, #0
   13688:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1368c:	aa01      	add	r2, sp, #4
   1368e:	f7fe fce9 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   13692:	4603      	mov	r3, r0
   13694:	b108      	cbz	r0, 1369a <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   13696:	4b18      	ldr	r3, [pc, #96]	; (136f8 <bt_read_static_addr+0xa0>)
   13698:	e7e8      	b.n	1366c <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   1369a:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1369c:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   1369e:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   136a0:	7854      	ldrb	r4, [r2, #1]
   136a2:	3202      	adds	r2, #2
   136a4:	42b4      	cmp	r4, r6
   136a6:	bf28      	it	cs
   136a8:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   136aa:	429c      	cmp	r4, r3
   136ac:	dc0e      	bgt.n	136cc <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   136ae:	f004 fe9f 	bl	183f0 <net_buf_unref>
	if (!cnt) {
   136b2:	2c00      	cmp	r4, #0
   136b4:	d1e4      	bne.n	13680 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   136b6:	4b11      	ldr	r3, [pc, #68]	; (136fc <bt_read_static_addr+0xa4>)
   136b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   136bc:	9307      	str	r3, [sp, #28]
   136be:	2302      	movs	r3, #2
   136c0:	480c      	ldr	r0, [pc, #48]	; (136f4 <bt_read_static_addr+0x9c>)
   136c2:	aa06      	add	r2, sp, #24
   136c4:	9306      	str	r3, [sp, #24]
   136c6:	f01c fbae 	bl	2fe26 <z_log_msg_static_create.constprop.0>
   136ca:	e7d9      	b.n	13680 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   136cc:	4611      	mov	r1, r2
   136ce:	fb07 5603 	mla	r6, r7, r3, r5
   136d2:	f102 0c14 	add.w	ip, r2, #20
   136d6:	f851 eb04 	ldr.w	lr, [r1], #4
   136da:	4561      	cmp	r1, ip
   136dc:	f846 eb04 	str.w	lr, [r6], #4
   136e0:	d1f9      	bne.n	136d6 <bt_read_static_addr+0x7e>
   136e2:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   136e4:	3301      	adds	r3, #1
   136e6:	8031      	strh	r1, [r6, #0]
   136e8:	3216      	adds	r2, #22
   136ea:	e7de      	b.n	136aa <bt_read_static_addr+0x52>
   136ec:	2000c580 	.word	0x2000c580
   136f0:	0003a4bf 	.word	0x0003a4bf
   136f4:	00036430 	.word	0x00036430
   136f8:	0003a4eb 	.word	0x0003a4eb
   136fc:	0003a50b 	.word	0x0003a50b

00013700 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13700:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13702:	4d15      	ldr	r5, [pc, #84]	; (13758 <bt_setup_random_id_addr+0x58>)
{
   13704:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13706:	79ec      	ldrb	r4, [r5, #7]
   13708:	b92c      	cbnz	r4, 13716 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1370a:	2101      	movs	r1, #1
   1370c:	a802      	add	r0, sp, #8
   1370e:	f7ff ffa3 	bl	13658 <bt_read_static_addr>
   13712:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13714:	b9c0      	cbnz	r0, 13748 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13716:	2100      	movs	r1, #0
   13718:	4608      	mov	r0, r1
}
   1371a:	b008      	add	sp, #32
   1371c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13720:	f7ff bef6 	b.w	13510 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13724:	ab02      	add	r3, sp, #8
   13726:	fb06 3102 	mla	r1, r6, r2, r3
   1372a:	f10d 0001 	add.w	r0, sp, #1
   1372e:	f01c fb6e 	bl	2fe0e <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13732:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13734:	4669      	mov	r1, sp
   13736:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13738:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1373c:	f7ff fe92 	bl	13464 <id_create.constprop.0>
				if (err) {
   13740:	3401      	adds	r4, #1
   13742:	b110      	cbz	r0, 1374a <bt_setup_random_id_addr+0x4a>
}
   13744:	b008      	add	sp, #32
   13746:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13748:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1374a:	79eb      	ldrb	r3, [r5, #7]
   1374c:	b2e2      	uxtb	r2, r4
   1374e:	4293      	cmp	r3, r2
   13750:	d8e8      	bhi.n	13724 <bt_setup_random_id_addr+0x24>
			return 0;
   13752:	2000      	movs	r0, #0
   13754:	e7f6      	b.n	13744 <bt_setup_random_id_addr+0x44>
   13756:	bf00      	nop
   13758:	2000c580 	.word	0x2000c580

0001375c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   1375c:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   1375e:	460c      	mov	r4, r1
   13760:	b169      	cbz	r1, 1377e <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   13762:	4d08      	ldr	r5, [pc, #32]	; (13784 <bt_id_set_create_conn_own_addr+0x28>)
   13764:	782b      	ldrb	r3, [r5, #0]
   13766:	2b01      	cmp	r3, #1
   13768:	d003      	beq.n	13772 <bt_id_set_create_conn_own_addr+0x16>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   1376a:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   1376c:	782b      	ldrb	r3, [r5, #0]
   1376e:	7023      	strb	r3, [r4, #0]
}
   13770:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   13772:	1c68      	adds	r0, r5, #1
   13774:	f7ff fea4 	bl	134c0 <set_random_address>
			if (err) {
   13778:	2800      	cmp	r0, #0
   1377a:	d0f6      	beq.n	1376a <bt_id_set_create_conn_own_addr+0xe>
   1377c:	e7f8      	b.n	13770 <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   1377e:	f06f 0015 	mvn.w	r0, #21
   13782:	e7f5      	b.n	13770 <bt_id_set_create_conn_own_addr+0x14>
   13784:	2000c580 	.word	0x2000c580

00013788 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   13788:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   1378a:	460c      	mov	r4, r1
   1378c:	b149      	cbz	r1, 137a2 <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1378e:	4b06      	ldr	r3, [pc, #24]	; (137a8 <bt_id_set_scan_own_addr+0x20>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13790:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   13792:	781b      	ldrb	r3, [r3, #0]
   13794:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13796:	f01c fb4e 	bl	2fe36 <bt_id_set_private_addr>
			if (err) {
   1379a:	b908      	cbnz	r0, 137a0 <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   1379c:	2301      	movs	r3, #1
   1379e:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
   137a0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   137a2:	f06f 0015 	mvn.w	r0, #21
   137a6:	e7fb      	b.n	137a0 <bt_id_set_scan_own_addr+0x18>
   137a8:	2000c580 	.word	0x2000c580

000137ac <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   137ac:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   137ae:	4d13      	ldr	r5, [pc, #76]	; (137fc <bt_id_init+0x50>)
{
   137b0:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   137b2:	79eb      	ldrb	r3, [r5, #7]
   137b4:	b11b      	cbz	r3, 137be <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   137b6:	2400      	movs	r4, #0
}
   137b8:	4620      	mov	r0, r4
   137ba:	b007      	add	sp, #28
   137bc:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   137be:	f7ff ff3b 	bl	13638 <bt_setup_public_id_addr>
		if (err) {
   137c2:	4604      	mov	r4, r0
   137c4:	b150      	cbz	r0, 137dc <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   137c6:	4b0e      	ldr	r3, [pc, #56]	; (13800 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   137c8:	9305      	str	r3, [sp, #20]
   137ca:	2302      	movs	r3, #2
   137cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   137d0:	480c      	ldr	r0, [pc, #48]	; (13804 <bt_id_init+0x58>)
   137d2:	aa04      	add	r2, sp, #16
   137d4:	9304      	str	r3, [sp, #16]
   137d6:	f01c fb26 	bl	2fe26 <z_log_msg_static_create.constprop.0>
			return err;
   137da:	e7ed      	b.n	137b8 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   137dc:	79eb      	ldrb	r3, [r5, #7]
   137de:	2b00      	cmp	r3, #0
   137e0:	d1e9      	bne.n	137b6 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   137e2:	f7ff ff8d 	bl	13700 <bt_setup_random_id_addr>
		if (err) {
   137e6:	4604      	mov	r4, r0
   137e8:	2800      	cmp	r0, #0
   137ea:	d1ec      	bne.n	137c6 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   137ec:	1c68      	adds	r0, r5, #1
   137ee:	f7ff fe67 	bl	134c0 <set_random_address>
		if (err) {
   137f2:	4604      	mov	r4, r0
   137f4:	2800      	cmp	r0, #0
   137f6:	d0df      	beq.n	137b8 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   137f8:	4b03      	ldr	r3, [pc, #12]	; (13808 <bt_id_init+0x5c>)
   137fa:	e7e5      	b.n	137c8 <bt_id_init+0x1c>
   137fc:	2000c580 	.word	0x2000c580
   13800:	0003a534 	.word	0x0003a534
   13804:	00036430 	.word	0x00036430
   13808:	0003a553 	.word	0x0003a553

0001380c <atomic_get.constprop.0>:
   1380c:	4b01      	ldr	r3, [pc, #4]	; (13814 <atomic_get.constprop.0+0x8>)
   1380e:	e8d3 0faf 	lda	r0, [r3]
}
   13812:	4770      	bx	lr
   13814:	2000c654 	.word	0x2000c654

00013818 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   13818:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1381a:	2102      	movs	r1, #2
{
   1381c:	4604      	mov	r4, r0
   1381e:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   13820:	f242 000c 	movw	r0, #8204	; 0x200c
   13824:	f7fe fbd0 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   13828:	4605      	mov	r5, r0
   1382a:	b300      	cbz	r0, 1386e <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   1382c:	2102      	movs	r1, #2
   1382e:	300c      	adds	r0, #12
   13830:	f004 ff22 	bl	18678 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   13834:	2c01      	cmp	r4, #1
   13836:	4602      	mov	r2, r0
   13838:	d117      	bne.n	1386a <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1383a:	f7ff ffe7 	bl	1380c <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1383e:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13842:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   13844:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13846:	425c      	negs	r4, r3
   13848:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1384a:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1384c:	a903      	add	r1, sp, #12
   1384e:	4628      	mov	r0, r5
   13850:	4a08      	ldr	r2, [pc, #32]	; (13874 <bt_le_scan_set_enable_legacy+0x5c>)
   13852:	2306      	movs	r3, #6
   13854:	9400      	str	r4, [sp, #0]
   13856:	f7fe fba5 	bl	11fa4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1385a:	2200      	movs	r2, #0
   1385c:	4629      	mov	r1, r5
   1385e:	f242 000c 	movw	r0, #8204	; 0x200c
   13862:	f7fe fbff 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   13866:	b007      	add	sp, #28
   13868:	bd30      	pop	{r4, r5, pc}
   1386a:	2000      	movs	r0, #0
   1386c:	e7e9      	b.n	13842 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   1386e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13872:	e7f8      	b.n	13866 <bt_le_scan_set_enable_legacy+0x4e>
   13874:	2000c654 	.word	0x2000c654

00013878 <start_le_scan_legacy>:
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   13878:	2300      	movs	r3, #0
{
   1387a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	(void)memset(&set_param, 0, sizeof(set_param));
   1387c:	f8ad 3005 	strh.w	r3, [sp, #5]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13880:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   13882:	f88d 0000 	strb.w	r0, [sp]
{
   13886:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13888:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   1388a:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1388e:	4158      	adcs	r0, r3
   13890:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   13894:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   13898:	f7ff ff76 	bl	13788 <bt_id_set_scan_own_addr>
	if (err) {
   1389c:	4604      	mov	r4, r0
   1389e:	bb18      	cbnz	r0, 138e8 <start_le_scan_legacy+0x70>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   138a0:	2107      	movs	r1, #7
   138a2:	f242 000b 	movw	r0, #8203	; 0x200b
   138a6:	f7fe fb8f 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   138aa:	4606      	mov	r6, r0
   138ac:	b328      	cbz	r0, 138fa <start_le_scan_legacy+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   138ae:	2207      	movs	r2, #7
   138b0:	4669      	mov	r1, sp
   138b2:	300c      	adds	r0, #12
   138b4:	f01d fca3 	bl	311fe <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   138b8:	4622      	mov	r2, r4
   138ba:	4631      	mov	r1, r6
   138bc:	f242 000b 	movw	r0, #8203	; 0x200b
   138c0:	f7fe fbd0 	bl	12064 <bt_hci_cmd_send_sync>
	if (err) {
   138c4:	4604      	mov	r4, r0
   138c6:	b978      	cbnz	r0, 138e8 <start_le_scan_legacy+0x70>
	return bt_le_scan_set_enable_legacy(enable);
   138c8:	2001      	movs	r0, #1
   138ca:	f7ff ffa5 	bl	13818 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   138ce:	4604      	mov	r4, r0
   138d0:	b950      	cbnz	r0, 138e8 <start_le_scan_legacy+0x70>
	if (val) {
   138d2:	2d01      	cmp	r5, #1
   138d4:	d10b      	bne.n	138ee <start_le_scan_legacy+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138d6:	4b0a      	ldr	r3, [pc, #40]	; (13900 <start_le_scan_legacy+0x88>)
   138d8:	e8d3 1fef 	ldaex	r1, [r3]
   138dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   138e0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   138e4:	2a00      	cmp	r2, #0
   138e6:	d1f7      	bne.n	138d8 <start_le_scan_legacy+0x60>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   138e8:	4620      	mov	r0, r4
   138ea:	b002      	add	sp, #8
   138ec:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   138ee:	f46f 7180 	mvn.w	r1, #256	; 0x100
   138f2:	4803      	ldr	r0, [pc, #12]	; (13900 <start_le_scan_legacy+0x88>)
   138f4:	f01c fab7 	bl	2fe66 <atomic_and>
   138f8:	e7f6      	b.n	138e8 <start_le_scan_legacy+0x70>
		return -ENOBUFS;
   138fa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   138fe:	e7f3      	b.n	138e8 <start_le_scan_legacy+0x70>
   13900:	2000c654 	.word	0x2000c654

00013904 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   13904:	2200      	movs	r2, #0
   13906:	4b01      	ldr	r3, [pc, #4]	; (1390c <bt_scan_reset+0x8>)
   13908:	601a      	str	r2, [r3, #0]
}
   1390a:	4770      	bx	lr
   1390c:	2000fb88 	.word	0x2000fb88

00013910 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   13910:	b538      	push	{r3, r4, r5, lr}
   13912:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13914:	f7ff ff7a 	bl	1380c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13918:	0601      	lsls	r1, r0, #24
   1391a:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   1391e:	d42e      	bmi.n	1397e <bt_le_scan_update+0x6e>
   13920:	f7ff ff74 	bl	1380c <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   13924:	0643      	lsls	r3, r0, #25
   13926:	d422      	bmi.n	1396e <bt_le_scan_update+0x5e>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   13928:	2100      	movs	r1, #0
   1392a:	2206      	movs	r2, #6
   1392c:	4608      	mov	r0, r1
   1392e:	f001 f8b7 	bl	14aa0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   13932:	4604      	mov	r4, r0
   13934:	bb08      	cbnz	r0, 1397a <bt_le_scan_update+0x6a>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   13936:	2202      	movs	r2, #2
   13938:	4601      	mov	r1, r0
   1393a:	f001 f8b1 	bl	14aa0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   1393e:	b1f0      	cbz	r0, 1397e <bt_le_scan_update+0x6e>
   13940:	4b10      	ldr	r3, [pc, #64]	; (13984 <bt_le_scan_update+0x74>)
   13942:	e8d3 1fef 	ldaex	r1, [r3]
   13946:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   1394a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1394e:	2a00      	cmp	r2, #0
   13950:	d1f7      	bne.n	13942 <bt_le_scan_update+0x32>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   13952:	f000 fdb3 	bl	144bc <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   13956:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   13958:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1395a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1395e:	bf0b      	itete	eq
   13960:	2212      	moveq	r2, #18
   13962:	2230      	movne	r2, #48	; 0x30
   13964:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   13968:	2160      	movne	r1, #96	; 0x60
   1396a:	f7ff bf85 	b.w	13878 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   1396e:	4610      	mov	r0, r2
   13970:	f7ff ff52 	bl	13818 <bt_le_scan_set_enable_legacy>
		if (err) {
   13974:	2800      	cmp	r0, #0
   13976:	d0d7      	beq.n	13928 <bt_le_scan_update+0x18>
}
   13978:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   1397a:	f000 fd9f 	bl	144bc <bt_conn_unref>
		return 0;
   1397e:	2000      	movs	r0, #0
   13980:	e7fa      	b.n	13978 <bt_le_scan_update+0x68>
   13982:	bf00      	nop
   13984:	2000c654 	.word	0x2000c654

00013988 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   13988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1398c:	f100 060c 	add.w	r6, r0, #12
   13990:	4604      	mov	r4, r0
   13992:	b08d      	sub	sp, #52	; 0x34
   13994:	4630      	mov	r0, r6
   13996:	f01d fc16 	bl	311c6 <net_buf_simple_pull_u8>
   1399a:	4680      	mov	r8, r0
	if (scan_dev_found_cb) {
   1399c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 13b70 <bt_hci_le_adv_report+0x1e8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   139a0:	f1b8 0f00 	cmp.w	r8, #0
   139a4:	d00d      	beq.n	139c2 <bt_hci_le_adv_report+0x3a>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   139a6:	8a23      	ldrh	r3, [r4, #16]
   139a8:	2b08      	cmp	r3, #8
   139aa:	d80d      	bhi.n	139c8 <bt_hci_le_adv_report+0x40>
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
			LOG_ERR("Unexpected end of buffer");
   139ac:	4b71      	ldr	r3, [pc, #452]	; (13b74 <bt_hci_le_adv_report+0x1ec>)
   139ae:	930b      	str	r3, [sp, #44]	; 0x2c
   139b0:	2302      	movs	r3, #2
   139b2:	930a      	str	r3, [sp, #40]	; 0x28
   139b4:	2300      	movs	r3, #0
   139b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   139ba:	486f      	ldr	r0, [pc, #444]	; (13b78 <bt_hci_le_adv_report+0x1f0>)
   139bc:	aa0a      	add	r2, sp, #40	; 0x28
   139be:	f7fa ff2d 	bl	e81c <z_impl_z_log_msg_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   139c2:	b00d      	add	sp, #52	; 0x34
   139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   139c8:	2109      	movs	r1, #9
   139ca:	4630      	mov	r0, r6
   139cc:	f004 fe36 	bl	1863c <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   139d0:	7a03      	ldrb	r3, [r0, #8]
   139d2:	8a22      	ldrh	r2, [r4, #16]
   139d4:	3301      	adds	r3, #1
   139d6:	429a      	cmp	r2, r3
   139d8:	4605      	mov	r5, r0
   139da:	d3e7      	bcc.n	139ac <bt_hci_le_adv_report+0x24>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   139dc:	2301      	movs	r3, #1
   139de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   139e2:	237f      	movs	r3, #127	; 0x7f
   139e4:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   139e8:	7a03      	ldrb	r3, [r0, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   139ea:	f100 0901 	add.w	r9, r0, #1
		adv_info.rssi = evt->data[evt->length];
   139ee:	4403      	add	r3, r0
   139f0:	7a5b      	ldrb	r3, [r3, #9]
   139f2:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   139f6:	23ff      	movs	r3, #255	; 0xff
   139f8:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   139fc:	2300      	movs	r3, #0
   139fe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   13a02:	7802      	ldrb	r2, [r0, #0]
   13a04:	2a04      	cmp	r2, #4
   13a06:	bf98      	it	ls
   13a08:	4b5c      	ldrls	r3, [pc, #368]	; (13b7c <bt_hci_le_adv_report+0x1f4>)
   13a0a:	f88d 201f 	strb.w	r2, [sp, #31]
	switch (evt_type) {
   13a0e:	bf98      	it	ls
   13a10:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   13a12:	f8ad 3020 	strh.w	r3, [sp, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   13a16:	7a03      	ldrb	r3, [r0, #8]
   13a18:	9301      	str	r3, [sp, #4]
   13a1a:	f7ff fef7 	bl	1380c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13a1e:	0607      	lsls	r7, r0, #24
   13a20:	d50d      	bpl.n	13a3e <bt_hci_le_adv_report+0xb6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   13a22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13a26:	0758      	lsls	r0, r3, #29
   13a28:	d509      	bpl.n	13a3e <bt_hci_le_adv_report+0xb6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   13a2a:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   13a2c:	4630      	mov	r0, r6
   13a2e:	3101      	adds	r1, #1
   13a30:	f108 38ff 	add.w	r8, r8, #4294967295
   13a34:	f004 fde4 	bl	18600 <net_buf_simple_pull>
   13a38:	fa5f f888 	uxtb.w	r8, r8
   13a3c:	e7b0      	b.n	139a0 <bt_hci_le_adv_report+0x18>
	if (bt_addr_le_is_resolved(addr)) {
   13a3e:	4648      	mov	r0, r9
   13a40:	f01c f900 	bl	2fc44 <bt_addr_le_is_resolved>
   13a44:	2800      	cmp	r0, #0
   13a46:	d048      	beq.n	13ada <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy_resolved(&id_addr, addr);
   13a48:	4649      	mov	r1, r9
   13a4a:	a804      	add	r0, sp, #16
   13a4c:	f01c f8ef 	bl	2fc2e <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
   13a50:	f8da 3000 	ldr.w	r3, [sl]
   13a54:	b1a3      	cbz	r3, 13a80 <bt_hci_le_adv_report+0xf8>
	state->offset = net_buf_simple_headroom(buf);
   13a56:	4630      	mov	r0, r6
   13a58:	f01d fbc5 	bl	311e6 <net_buf_simple_headroom>
   13a5c:	4683      	mov	fp, r0
		buf->len = len;
   13a5e:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   13a60:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   13a62:	f89d 201f 	ldrb.w	r2, [sp, #31]
		buf->len = len;
   13a66:	8223      	strh	r3, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   13a68:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   13a6c:	4633      	mov	r3, r6
   13a6e:	f8da c000 	ldr.w	ip, [sl]
   13a72:	a804      	add	r0, sp, #16
   13a74:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   13a76:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   13a78:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   13a7a:	fa13 f38b 	uxtah	r3, r3, fp
   13a7e:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   13a80:	ab04      	add	r3, sp, #16
   13a82:	9306      	str	r3, [sp, #24]
	return list->head;
   13a84:	4b3e      	ldr	r3, [pc, #248]	; (13b80 <bt_hci_le_adv_report+0x1f8>)
   13a86:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d035      	beq.n	13af8 <bt_hci_le_adv_report+0x170>
	return node->next;
   13a8c:	681a      	ldr	r2, [r3, #0]
   13a8e:	b102      	cbz	r2, 13a92 <bt_hci_le_adv_report+0x10a>
   13a90:	3a08      	subs	r2, #8
		if (listener->recv) {
   13a92:	f853 1c08 	ldr.w	r1, [r3, #-8]
   13a96:	b1b9      	cbz	r1, 13ac8 <bt_hci_le_adv_report+0x140>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13a98:	4617      	mov	r7, r2
   13a9a:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   13a9e:	4630      	mov	r0, r6
   13aa0:	9203      	str	r2, [sp, #12]
   13aa2:	f01d fba0 	bl	311e6 <net_buf_simple_headroom>
   13aa6:	4683      	mov	fp, r0
	state->len = buf->len;
   13aa8:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   13aaa:	9a03      	ldr	r2, [sp, #12]
   13aac:	9302      	str	r3, [sp, #8]
			buf->len = len;
   13aae:	9b01      	ldr	r3, [sp, #4]
			listener->recv(info, buf);
   13ab0:	4631      	mov	r1, r6
			buf->len = len;
   13ab2:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   13ab4:	6812      	ldr	r2, [r2, #0]
   13ab6:	a806      	add	r0, sp, #24
   13ab8:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   13aba:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   13abc:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   13abe:	fa12 f28b 	uxtah	r2, r2, fp
   13ac2:	60e2      	str	r2, [r4, #12]
}
   13ac4:	463a      	mov	r2, r7
	buf->len = state->len;
   13ac6:	8223      	strh	r3, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13ac8:	b1b2      	cbz	r2, 13af8 <bt_hci_le_adv_report+0x170>
   13aca:	6897      	ldr	r7, [r2, #8]
   13acc:	6813      	ldr	r3, [r2, #0]
   13ace:	b18f      	cbz	r7, 13af4 <bt_hci_le_adv_report+0x16c>
   13ad0:	3f08      	subs	r7, #8
		if (listener->recv) {
   13ad2:	2b00      	cmp	r3, #0
   13ad4:	d1e3      	bne.n	13a9e <bt_hci_le_adv_report+0x116>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13ad6:	463a      	mov	r2, r7
   13ad8:	e7f7      	b.n	13aca <bt_hci_le_adv_report+0x142>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   13ada:	786b      	ldrb	r3, [r5, #1]
   13adc:	2bff      	cmp	r3, #255	; 0xff
   13ade:	d104      	bne.n	13aea <bt_hci_le_adv_report+0x162>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   13ae0:	4928      	ldr	r1, [pc, #160]	; (13b84 <bt_hci_le_adv_report+0x1fc>)
		bt_addr_le_copy(&id_addr,
   13ae2:	a804      	add	r0, sp, #16
   13ae4:	f01c f9ca 	bl	2fe7c <bt_addr_le_copy>
   13ae8:	e7b2      	b.n	13a50 <bt_hci_le_adv_report+0xc8>
   13aea:	4649      	mov	r1, r9
   13aec:	f01c f99e 	bl	2fe2c <bt_lookup_id_addr>
   13af0:	4601      	mov	r1, r0
   13af2:	e7f6      	b.n	13ae2 <bt_hci_le_adv_report+0x15a>
		if (listener->recv) {
   13af4:	2b00      	cmp	r3, #0
   13af6:	d1d2      	bne.n	13a9e <bt_hci_le_adv_report+0x116>
	info->addr = NULL;
   13af8:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   13afa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	info->addr = NULL;
   13afe:	9306      	str	r3, [sp, #24]
   13b00:	f7ff fe84 	bl	1380c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13b04:	0601      	lsls	r1, r0, #24
   13b06:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   13b0a:	d48e      	bmi.n	13a2a <bt_hci_le_adv_report+0xa2>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   13b0c:	07d2      	lsls	r2, r2, #31
   13b0e:	d58c      	bpl.n	13a2a <bt_hci_le_adv_report+0xa2>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   13b10:	2202      	movs	r2, #2
   13b12:	4658      	mov	r0, fp
   13b14:	a904      	add	r1, sp, #16
   13b16:	f000 ffc3 	bl	14aa0 <bt_conn_lookup_state_le>
	if (!conn) {
   13b1a:	4607      	mov	r7, r0
   13b1c:	2800      	cmp	r0, #0
   13b1e:	d084      	beq.n	13a2a <bt_hci_le_adv_report+0xa2>
   13b20:	f7ff fe74 	bl	1380c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   13b24:	0643      	lsls	r3, r0, #25
   13b26:	d410      	bmi.n	13b4a <bt_hci_le_adv_report+0x1c2>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   13b28:	f107 009e 	add.w	r0, r7, #158	; 0x9e
   13b2c:	4649      	mov	r1, r9
   13b2e:	f01c f9a5 	bl	2fe7c <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   13b32:	4638      	mov	r0, r7
   13b34:	f7fe fb6a 	bl	1220c <bt_le_create_conn>
   13b38:	b960      	cbnz	r0, 13b54 <bt_hci_le_adv_report+0x1cc>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   13b3a:	4638      	mov	r0, r7
   13b3c:	2106      	movs	r1, #6
   13b3e:	f000 fce9 	bl	14514 <bt_conn_set_state>
	bt_conn_unref(conn);
   13b42:	4638      	mov	r0, r7
   13b44:	f000 fcba 	bl	144bc <bt_conn_unref>
	return;
   13b48:	e76f      	b.n	13a2a <bt_hci_le_adv_report+0xa2>
	return bt_le_scan_set_enable_legacy(enable);
   13b4a:	4658      	mov	r0, fp
   13b4c:	f7ff fe64 	bl	13818 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   13b50:	2800      	cmp	r0, #0
   13b52:	d0e9      	beq.n	13b28 <bt_hci_le_adv_report+0x1a0>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   13b54:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13b56:	2100      	movs	r1, #0
   13b58:	4638      	mov	r0, r7
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   13b5a:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13b5c:	f000 fcda 	bl	14514 <bt_conn_set_state>
	bt_conn_unref(conn);
   13b60:	4638      	mov	r0, r7
   13b62:	f000 fcab 	bl	144bc <bt_conn_unref>
	bt_le_scan_update(false);
   13b66:	2000      	movs	r0, #0
   13b68:	f7ff fed2 	bl	13910 <bt_le_scan_update>
   13b6c:	e75d      	b.n	13a2a <bt_hci_le_adv_report+0xa2>
   13b6e:	bf00      	nop
   13b70:	2000fb88 	.word	0x2000fb88
   13b74:	0003a576 	.word	0x0003a576
   13b78:	00036440 	.word	0x00036440
   13b7c:	0003a58f 	.word	0x0003a58f
   13b80:	2000fb80 	.word	0x2000fb80
   13b84:	00039ba5 	.word	0x00039ba5

00013b88 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   13b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b8a:	4605      	mov	r5, r0
   13b8c:	f7ff fe3e 	bl	1380c <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13b90:	0740      	lsls	r0, r0, #29
{
   13b92:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13b94:	d564      	bpl.n	13c60 <bt_le_scan_start+0xd8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   13b96:	782a      	ldrb	r2, [r5, #0]
   13b98:	2a01      	cmp	r2, #1
   13b9a:	d903      	bls.n	13ba4 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   13b9c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   13ba0:	4620      	mov	r0, r4
   13ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   13ba4:	686b      	ldr	r3, [r5, #4]
   13ba6:	2b0f      	cmp	r3, #15
   13ba8:	d8f8      	bhi.n	13b9c <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   13baa:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   13bae:	8928      	ldrh	r0, [r5, #8]
   13bb0:	1f03      	subs	r3, r0, #4
   13bb2:	b29b      	uxth	r3, r3
   13bb4:	42a3      	cmp	r3, r4
   13bb6:	d8f1      	bhi.n	13b9c <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   13bb8:	8969      	ldrh	r1, [r5, #10]
   13bba:	1f0b      	subs	r3, r1, #4
   13bbc:	b29b      	uxth	r3, r3
   13bbe:	42a3      	cmp	r3, r4
   13bc0:	d8ec      	bhi.n	13b9c <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   13bc2:	4288      	cmp	r0, r1
   13bc4:	d3ea      	bcc.n	13b9c <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   13bc6:	b972      	cbnz	r2, 13be6 <bt_le_scan_start+0x5e>
   13bc8:	4e27      	ldr	r6, [pc, #156]	; (13c68 <bt_le_scan_start+0xe0>)
   13bca:	e8d6 0fef 	ldaex	r0, [r6]
   13bce:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   13bd2:	e8c6 3fe2 	stlex	r2, r3, [r6]
   13bd6:	2a00      	cmp	r2, #0
   13bd8:	d1f7      	bne.n	13bca <bt_le_scan_start+0x42>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13bda:	f010 0280 	ands.w	r2, r0, #128	; 0x80
   13bde:	d007      	beq.n	13bf0 <bt_le_scan_start+0x68>
		return -EALREADY;
   13be0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13be4:	e7dc      	b.n	13ba0 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   13be6:	f01c f93c 	bl	2fe62 <bt_id_scan_random_addr_check>
   13bea:	2800      	cmp	r0, #0
   13bec:	d1ec      	bne.n	13bc8 <bt_le_scan_start+0x40>
   13bee:	e7d5      	b.n	13b9c <bt_le_scan_start+0x14>
   13bf0:	f7ff fe0c 	bl	1380c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   13bf4:	0641      	lsls	r1, r0, #25
   13bf6:	d50a      	bpl.n	13c0e <bt_le_scan_start+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   13bf8:	4610      	mov	r0, r2
   13bfa:	f7ff fe0d 	bl	13818 <bt_le_scan_set_enable_legacy>
		if (err) {
   13bfe:	4604      	mov	r4, r0
   13c00:	b128      	cbz	r0, 13c0e <bt_le_scan_start+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c02:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13c06:	4630      	mov	r0, r6
   13c08:	f01c f92d 	bl	2fe66 <atomic_and>
		return err;
   13c0c:	e7c8      	b.n	13ba0 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   13c0e:	686b      	ldr	r3, [r5, #4]
	if (val) {
   13c10:	07db      	lsls	r3, r3, #31
   13c12:	d511      	bpl.n	13c38 <bt_le_scan_start+0xb0>
   13c14:	e8d6 3fef 	ldaex	r3, [r6]
   13c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13c1c:	e8c6 3fe2 	stlex	r2, r3, [r6]
   13c20:	2a00      	cmp	r2, #0
   13c22:	d1f7      	bne.n	13c14 <bt_le_scan_start+0x8c>
		if (param->timeout) {
   13c24:	89ab      	ldrh	r3, [r5, #12]
   13c26:	b16b      	cbz	r3, 13c44 <bt_le_scan_start+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c28:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13c2c:	480e      	ldr	r0, [pc, #56]	; (13c68 <bt_le_scan_start+0xe0>)
   13c2e:	f01c f91a 	bl	2fe66 <atomic_and>
			return -ENOTSUP;
   13c32:	f06f 0485 	mvn.w	r4, #133	; 0x85
   13c36:	e7b3      	b.n	13ba0 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c38:	f46f 7100 	mvn.w	r1, #512	; 0x200
   13c3c:	480a      	ldr	r0, [pc, #40]	; (13c68 <bt_le_scan_start+0xe0>)
   13c3e:	f01c f912 	bl	2fe66 <atomic_and>
   13c42:	e7ef      	b.n	13c24 <bt_le_scan_start+0x9c>
		err = start_le_scan_legacy(param->type, param->interval,
   13c44:	896a      	ldrh	r2, [r5, #10]
   13c46:	8929      	ldrh	r1, [r5, #8]
   13c48:	7828      	ldrb	r0, [r5, #0]
   13c4a:	f7ff fe15 	bl	13878 <start_le_scan_legacy>
	if (err) {
   13c4e:	4604      	mov	r4, r0
   13c50:	b118      	cbz	r0, 13c5a <bt_le_scan_start+0xd2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c52:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13c56:	4804      	ldr	r0, [pc, #16]	; (13c68 <bt_le_scan_start+0xe0>)
   13c58:	e7d6      	b.n	13c08 <bt_le_scan_start+0x80>
	scan_dev_found_cb = cb;
   13c5a:	4b04      	ldr	r3, [pc, #16]	; (13c6c <bt_le_scan_start+0xe4>)
   13c5c:	601f      	str	r7, [r3, #0]
	return 0;
   13c5e:	e79f      	b.n	13ba0 <bt_le_scan_start+0x18>
		return -EAGAIN;
   13c60:	f06f 040a 	mvn.w	r4, #10
   13c64:	e79c      	b.n	13ba0 <bt_le_scan_start+0x18>
   13c66:	bf00      	nop
   13c68:	2000c654 	.word	0x2000c654
   13c6c:	2000fb88 	.word	0x2000fb88

00013c70 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   13c70:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c72:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13c76:	4807      	ldr	r0, [pc, #28]	; (13c94 <bt_le_scan_stop+0x24>)
   13c78:	f01c f8f5 	bl	2fe66 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13c7c:	0603      	lsls	r3, r0, #24
   13c7e:	d506      	bpl.n	13c8e <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   13c80:	2000      	movs	r0, #0
   13c82:	4b05      	ldr	r3, [pc, #20]	; (13c98 <bt_le_scan_stop+0x28>)
   13c84:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   13c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   13c8a:	f7ff be41 	b.w	13910 <bt_le_scan_update>
}
   13c8e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13c92:	bd08      	pop	{r3, pc}
   13c94:	2000c654 	.word	0x2000c654
   13c98:	2000fb88 	.word	0x2000fb88

00013c9c <bt_le_scan_cb_register>:
	parent->next = child;
   13c9c:	2300      	movs	r3, #0
   13c9e:	6083      	str	r3, [r0, #8]
	return list->tail;
   13ca0:	4b05      	ldr	r3, [pc, #20]	; (13cb8 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   13ca2:	f100 0208 	add.w	r2, r0, #8
   13ca6:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   13ca8:	b911      	cbnz	r1, 13cb0 <bt_le_scan_cb_register+0x14>
	list->head = node;
   13caa:	e9c3 2200 	strd	r2, r2, [r3]
}
   13cae:	4770      	bx	lr
	parent->next = child;
   13cb0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13cb2:	605a      	str	r2, [r3, #4]
}
   13cb4:	4770      	bx	lr
   13cb6:	bf00      	nop
   13cb8:	2000fb80 	.word	0x2000fb80

00013cbc <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   13cbc:	b530      	push	{r4, r5, lr}
   13cbe:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   13cc0:	2120      	movs	r1, #32
   13cc2:	a80a      	add	r0, sp, #40	; 0x28
   13cc4:	f7fe fa76 	bl	121b4 <bt_hci_le_rand>
	if (ret) {
   13cc8:	4604      	mov	r4, r0
   13cca:	bb18      	cbnz	r0, 13d14 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   13ccc:	f021 f85f 	bl	34d8e <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   13cd0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13cd4:	fba0 2305 	umull	r2, r3, r0, r5
   13cd8:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   13cdc:	2308      	movs	r3, #8
   13cde:	0bd2      	lsrs	r2, r2, #15
   13ce0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   13ce4:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   13ce6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   13cea:	9300      	str	r3, [sp, #0]
   13cec:	2220      	movs	r2, #32
   13cee:	480b      	ldr	r0, [pc, #44]	; (13d1c <prng_reseed.constprop.0+0x60>)
   13cf0:	446b      	add	r3, sp
   13cf2:	a90a      	add	r1, sp, #40	; 0x28
   13cf4:	f01b fe7c 	bl	2f9f0 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   13cf8:	b960      	cbnz	r0, 13d14 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   13cfa:	4b09      	ldr	r3, [pc, #36]	; (13d20 <prng_reseed.constprop.0+0x64>)
   13cfc:	9309      	str	r3, [sp, #36]	; 0x24
   13cfe:	2302      	movs	r3, #2
   13d00:	9308      	str	r3, [sp, #32]
   13d02:	4623      	mov	r3, r4
   13d04:	f06f 0404 	mvn.w	r4, #4
   13d08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d0c:	4805      	ldr	r0, [pc, #20]	; (13d24 <prng_reseed.constprop.0+0x68>)
   13d0e:	aa08      	add	r2, sp, #32
   13d10:	f7fa fd84 	bl	e81c <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   13d14:	4620      	mov	r0, r4
   13d16:	b013      	add	sp, #76	; 0x4c
   13d18:	bd30      	pop	{r4, r5, pc}
   13d1a:	bf00      	nop
   13d1c:	2000d818 	.word	0x2000d818
   13d20:	0003a594 	.word	0x0003a594
   13d24:	00036428 	.word	0x00036428

00013d28 <prng_init>:

int prng_init(void)
{
   13d28:	b510      	push	{r4, lr}
   13d2a:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   13d2c:	2108      	movs	r1, #8
   13d2e:	4668      	mov	r0, sp
   13d30:	f7fe fa40 	bl	121b4 <bt_hci_le_rand>
	if (ret) {
   13d34:	4604      	mov	r4, r0
   13d36:	b990      	cbnz	r0, 13d5e <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   13d38:	2208      	movs	r2, #8
   13d3a:	4669      	mov	r1, sp
   13d3c:	480b      	ldr	r0, [pc, #44]	; (13d6c <prng_init+0x44>)
   13d3e:	f01b fe37 	bl	2f9b0 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   13d42:	b978      	cbnz	r0, 13d64 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   13d44:	4b0a      	ldr	r3, [pc, #40]	; (13d70 <prng_init+0x48>)
   13d46:	9307      	str	r3, [sp, #28]
   13d48:	2302      	movs	r3, #2
   13d4a:	9306      	str	r3, [sp, #24]
   13d4c:	4623      	mov	r3, r4
		return -EIO;
   13d4e:	f06f 0404 	mvn.w	r4, #4
   13d52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d56:	4807      	ldr	r0, [pc, #28]	; (13d74 <prng_init+0x4c>)
   13d58:	aa06      	add	r2, sp, #24
   13d5a:	f7fa fd5f 	bl	e81c <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   13d5e:	4620      	mov	r0, r4
   13d60:	b008      	add	sp, #32
   13d62:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   13d64:	f7ff ffaa 	bl	13cbc <prng_reseed.constprop.0>
   13d68:	4604      	mov	r4, r0
   13d6a:	e7f8      	b.n	13d5e <prng_init+0x36>
   13d6c:	2000d818 	.word	0x2000d818
   13d70:	0003a5ab 	.word	0x0003a5ab
   13d74:	00036428 	.word	0x00036428

00013d78 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   13d78:	b538      	push	{r3, r4, r5, lr}
   13d7a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   13d7c:	4604      	mov	r4, r0
   13d7e:	b198      	cbz	r0, 13da8 <bt_rand+0x30>
   13d80:	b191      	cbz	r1, 13da8 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   13d82:	4a0b      	ldr	r2, [pc, #44]	; (13db0 <bt_rand+0x38>)
   13d84:	f01b fe4d 	bl	2fa22 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   13d88:	1c43      	adds	r3, r0, #1
   13d8a:	d107      	bne.n	13d9c <bt_rand+0x24>
		ret = prng_reseed(&prng);
   13d8c:	f7ff ff96 	bl	13cbc <prng_reseed.constprop.0>
		if (ret) {
   13d90:	b948      	cbnz	r0, 13da6 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   13d92:	4629      	mov	r1, r5
   13d94:	4620      	mov	r0, r4
   13d96:	4a06      	ldr	r2, [pc, #24]	; (13db0 <bt_rand+0x38>)
   13d98:	f01b fe43 	bl	2fa22 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   13d9c:	2801      	cmp	r0, #1
   13d9e:	bf0c      	ite	eq
   13da0:	2000      	moveq	r0, #0
   13da2:	f06f 0004 	mvnne.w	r0, #4
}
   13da6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13da8:	f06f 0015 	mvn.w	r0, #21
   13dac:	e7fb      	b.n	13da6 <bt_rand+0x2e>
   13dae:	bf00      	nop
   13db0:	2000d818 	.word	0x2000d818

00013db4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   13db4:	b570      	push	{r4, r5, r6, lr}
   13db6:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   13db8:	4b12      	ldr	r3, [pc, #72]	; (13e04 <notify_connected+0x50>)
   13dba:	681d      	ldr	r5, [r3, #0]
   13dbc:	b995      	cbnz	r5, 13de4 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13dbe:	4d12      	ldr	r5, [pc, #72]	; (13e08 <notify_connected+0x54>)
   13dc0:	4e12      	ldr	r6, [pc, #72]	; (13e0c <notify_connected+0x58>)
   13dc2:	42b5      	cmp	r5, r6
   13dc4:	d91c      	bls.n	13e00 <notify_connected+0x4c>
   13dc6:	4912      	ldr	r1, [pc, #72]	; (13e10 <notify_connected+0x5c>)
   13dc8:	f240 53ba 	movw	r3, #1466	; 0x5ba
   13dcc:	4a11      	ldr	r2, [pc, #68]	; (13e14 <notify_connected+0x60>)
   13dce:	4812      	ldr	r0, [pc, #72]	; (13e18 <notify_connected+0x64>)
   13dd0:	f01a fdc0 	bl	2e954 <assert_print>
   13dd4:	4811      	ldr	r0, [pc, #68]	; (13e1c <notify_connected+0x68>)
   13dd6:	f01a fdbd 	bl	2e954 <assert_print>
   13dda:	f240 51ba 	movw	r1, #1466	; 0x5ba
   13dde:	480d      	ldr	r0, [pc, #52]	; (13e14 <notify_connected+0x60>)
   13de0:	f01a fdb1 	bl	2e946 <assert_post_action>
		if (cb->connected) {
   13de4:	682b      	ldr	r3, [r5, #0]
   13de6:	b113      	cbz	r3, 13dee <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   13de8:	4620      	mov	r0, r4
   13dea:	7a61      	ldrb	r1, [r4, #9]
   13dec:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13dee:	692d      	ldr	r5, [r5, #16]
   13df0:	e7e4      	b.n	13dbc <notify_connected+0x8>
		if (cb->connected) {
   13df2:	682b      	ldr	r3, [r5, #0]
   13df4:	b113      	cbz	r3, 13dfc <notify_connected+0x48>
			cb->connected(conn, conn->err);
   13df6:	4620      	mov	r0, r4
   13df8:	7a61      	ldrb	r1, [r4, #9]
   13dfa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13dfc:	3514      	adds	r5, #20
   13dfe:	e7e0      	b.n	13dc2 <notify_connected+0xe>
   13e00:	d3f7      	bcc.n	13df2 <notify_connected+0x3e>
		}
	}
}
   13e02:	bd70      	pop	{r4, r5, r6, pc}
   13e04:	2000fbbc 	.word	0x2000fbbc
   13e08:	000363b0 	.word	0x000363b0
   13e0c:	000363b0 	.word	0x000363b0
   13e10:	0003a604 	.word	0x0003a604
   13e14:	0003a5d4 	.word	0x0003a5d4
   13e18:	000381c3 	.word	0x000381c3
   13e1c:	000387c1 	.word	0x000387c1

00013e20 <tx_notify>:
{
   13e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e24:	4604      	mov	r4, r0
	tx->cb = NULL;
   13e26:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   13e2a:	4f14      	ldr	r7, [pc, #80]	; (13e7c <tx_notify+0x5c>)
	__asm__ volatile(
   13e2c:	f04f 0220 	mov.w	r2, #32
   13e30:	f3ef 8311 	mrs	r3, BASEPRI
   13e34:	f382 8812 	msr	BASEPRI_MAX, r2
   13e38:	f3bf 8f6f 	isb	sy
	return list->head;
   13e3c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   13e3e:	b929      	cbnz	r1, 13e4c <tx_notify+0x2c>
	__asm__ volatile(
   13e40:	f383 8811 	msr	BASEPRI, r3
   13e44:	f3bf 8f6f 	isb	sy
}
   13e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   13e4e:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13e50:	4281      	cmp	r1, r0
	list->tail = node;
   13e52:	bf08      	it	eq
   13e54:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   13e56:	6222      	str	r2, [r4, #32]
   13e58:	f383 8811 	msr	BASEPRI, r3
   13e5c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13e60:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13e64:	4638      	mov	r0, r7
	tx->user_data = NULL;
   13e66:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   13e6a:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   13e6e:	f020 fec7 	bl	34c00 <k_queue_append>
		cb(conn, user_data, 0);
   13e72:	2200      	movs	r2, #0
   13e74:	4631      	mov	r1, r6
   13e76:	4620      	mov	r0, r4
   13e78:	47a8      	blx	r5
	while (1) {
   13e7a:	e7d7      	b.n	13e2c <tx_notify+0xc>
   13e7c:	2000d030 	.word	0x2000d030

00013e80 <conn_tx_destroy>:
{
   13e80:	b570      	push	{r4, r5, r6, lr}
   13e82:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   13e84:	b949      	cbnz	r1, 13e9a <conn_tx_destroy+0x1a>
   13e86:	490d      	ldr	r1, [pc, #52]	; (13ebc <conn_tx_destroy+0x3c>)
   13e88:	480d      	ldr	r0, [pc, #52]	; (13ec0 <conn_tx_destroy+0x40>)
   13e8a:	2343      	movs	r3, #67	; 0x43
   13e8c:	4a0d      	ldr	r2, [pc, #52]	; (13ec4 <conn_tx_destroy+0x44>)
   13e8e:	f01a fd61 	bl	2e954 <assert_print>
   13e92:	2143      	movs	r1, #67	; 0x43
   13e94:	480b      	ldr	r0, [pc, #44]	; (13ec4 <conn_tx_destroy+0x44>)
   13e96:	f01a fd56 	bl	2e946 <assert_post_action>
	tx->cb = NULL;
   13e9a:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   13e9c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   13ea0:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   13ea2:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13ea6:	4808      	ldr	r0, [pc, #32]	; (13ec8 <conn_tx_destroy+0x48>)
   13ea8:	f020 feaa 	bl	34c00 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   13eac:	4631      	mov	r1, r6
   13eae:	4620      	mov	r0, r4
   13eb0:	462b      	mov	r3, r5
}
   13eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   13eb6:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   13eba:	4718      	bx	r3
   13ebc:	0003a61f 	.word	0x0003a61f
   13ec0:	000381c3 	.word	0x000381c3
   13ec4:	0003a5d4 	.word	0x0003a5d4
   13ec8:	2000d030 	.word	0x2000d030

00013ecc <send_frag>:
{
   13ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed0:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
   13ed2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 14098 <send_frag+0x1cc>
{
   13ed6:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   13ed8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
   13edc:	4604      	mov	r4, r0
	return NULL;
   13ede:	2b00      	cmp	r3, #0
{
   13ee0:	af00      	add	r7, sp, #0
	return NULL;
   13ee2:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   13ee6:	460d      	mov	r5, r1
	return NULL;
   13ee8:	bf08      	it	eq
   13eea:	2000      	moveq	r0, #0
{
   13eec:	4616      	mov	r6, r2
	return z_impl_k_sem_take(sem, timeout);
   13eee:	2200      	movs	r2, #0
   13ef0:	2300      	movs	r3, #0
   13ef2:	f014 ff6d 	bl	28dd0 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   13ef6:	2800      	cmp	r0, #0
   13ef8:	f040 80ca 	bne.w	14090 <send_frag+0x1c4>
	if (frag) {
   13efc:	2e00      	cmp	r6, #0
   13efe:	f000 8090 	beq.w	14022 <send_frag+0x156>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13f02:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   13f06:	f106 0b0c 	add.w	fp, r6, #12
   13f0a:	4658      	mov	r0, fp
   13f0c:	607b      	str	r3, [r7, #4]
   13f0e:	f01d f96e 	bl	311ee <net_buf_simple_tailroom>
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	4298      	cmp	r0, r3
   13f16:	d97f      	bls.n	14018 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
   13f18:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13f1c:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   13f20:	4658      	mov	r0, fp
   13f22:	607a      	str	r2, [r7, #4]
   13f24:	f01d f96b 	bl	311fe <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   13f28:	687a      	ldr	r2, [r7, #4]
   13f2a:	4628      	mov	r0, r5
   13f2c:	4611      	mov	r1, r2
   13f2e:	f004 fb67 	bl	18600 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   13f32:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   13f34:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   13f36:	2b07      	cmp	r3, #7
   13f38:	f040 80a7 	bne.w	1408a <send_frag+0x1be>
	__asm__ volatile(
   13f3c:	f04f 0320 	mov.w	r3, #32
   13f40:	f3ef 8211 	mrs	r2, BASEPRI
   13f44:	f383 8812 	msr	BASEPRI_MAX, r3
   13f48:	f3bf 8f6f 	isb	sy
	if (tx) {
   13f4c:	2d00      	cmp	r5, #0
   13f4e:	d073      	beq.n	14038 <send_frag+0x16c>
	parent->next = child;
   13f50:	2300      	movs	r3, #0
   13f52:	602b      	str	r3, [r5, #0]
	return list->tail;
   13f54:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   13f56:	2b00      	cmp	r3, #0
   13f58:	d16b      	bne.n	14032 <send_frag+0x166>
	list->head = node;
   13f5a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13f5e:	f382 8811 	msr	BASEPRI, r2
   13f62:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13f66:	2104      	movs	r1, #4
   13f68:	f106 000c 	add.w	r0, r6, #12
   13f6c:	f004 fb28 	bl	185c0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13f70:	8823      	ldrh	r3, [r4, #0]
   13f72:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   13f76:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   13f7a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13f7e:	8a33      	ldrh	r3, [r6, #16]
   13f80:	3b04      	subs	r3, #4
   13f82:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13f84:	2302      	movs	r3, #2
	return bt_send(buf);
   13f86:	4630      	mov	r0, r6
   13f88:	7633      	strb	r3, [r6, #24]
   13f8a:	f7fe fb45 	bl	12618 <bt_send>
	if (err) {
   13f8e:	4680      	mov	r8, r0
   13f90:	2800      	cmp	r0, #0
   13f92:	d03c      	beq.n	1400e <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13f94:	46eb      	mov	fp, sp
   13f96:	b088      	sub	sp, #32
   13f98:	466a      	mov	r2, sp
   13f9a:	4b40      	ldr	r3, [pc, #256]	; (1409c <send_frag+0x1d0>)
   13f9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13fa0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13fa4:	2303      	movs	r3, #3
   13fa6:	483e      	ldr	r0, [pc, #248]	; (140a0 <send_frag+0x1d4>)
   13fa8:	f842 3f10 	str.w	r3, [r2, #16]!
   13fac:	f01b ff70 	bl	2fe90 <z_log_msg_static_create.constprop.0>
   13fb0:	46dd      	mov	sp, fp
	__asm__ volatile(
   13fb2:	f04f 0320 	mov.w	r3, #32
   13fb6:	f3ef 8111 	mrs	r1, BASEPRI
   13fba:	f383 8812 	msr	BASEPRI_MAX, r3
   13fbe:	f3bf 8f6f 	isb	sy
		if (tx) {
   13fc2:	2d00      	cmp	r5, #0
   13fc4:	d04e      	beq.n	14064 <send_frag+0x198>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13fc6:	2200      	movs	r2, #0
	return list->head;
   13fc8:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13fca:	b15b      	cbz	r3, 13fe4 <send_frag+0x118>
   13fcc:	429d      	cmp	r5, r3
   13fce:	d146      	bne.n	1405e <send_frag+0x192>
	return node->next;
   13fd0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   13fd2:	2a00      	cmp	r2, #0
   13fd4:	d13d      	bne.n	14052 <send_frag+0x186>
   13fd6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   13fd8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   13fda:	4295      	cmp	r5, r2
   13fdc:	d100      	bne.n	13fe0 <send_frag+0x114>
	list->tail = node;
   13fde:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   13fe0:	2300      	movs	r3, #0
   13fe2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   13fe4:	f381 8811 	msr	BASEPRI, r1
   13fe8:	f3bf 8f6f 	isb	sy
		err = -EIO;
   13fec:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   13ff0:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   13ff4:	482b      	ldr	r0, [pc, #172]	; (140a4 <send_frag+0x1d8>)
   13ff6:	2b00      	cmp	r3, #0
   13ff8:	bf08      	it	eq
   13ffa:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   13ffc:	f014 fea4 	bl	28d48 <z_impl_k_sem_give>
	if (tx) {
   14000:	b12d      	cbz	r5, 1400e <send_frag+0x142>
		tx_data(buf)->tx = NULL;
   14002:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   14004:	4629      	mov	r1, r5
   14006:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14008:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1400a:	f7ff ff39 	bl	13e80 <conn_tx_destroy>
}
   1400e:	4640      	mov	r0, r8
   14010:	370c      	adds	r7, #12
   14012:	46bd      	mov	sp, r7
   14014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   14018:	4658      	mov	r0, fp
   1401a:	f01d f8e8 	bl	311ee <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1401e:	b282      	uxth	r2, r0
   14020:	e77c      	b.n	13f1c <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14022:	2200      	movs	r2, #0
   14024:	2300      	movs	r3, #0
   14026:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1402a:	f01d f8c4 	bl	311b6 <net_buf_get>
   1402e:	4606      	mov	r6, r0
		frag = buf;
   14030:	e77f      	b.n	13f32 <send_frag+0x66>
   14032:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14034:	61a5      	str	r5, [r4, #24]
}
   14036:	e792      	b.n	13f5e <send_frag+0x92>
	return list->tail;
   14038:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1403a:	b133      	cbz	r3, 1404a <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
   1403c:	f103 0a0c 	add.w	sl, r3, #12
   14040:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14042:	3301      	adds	r3, #1
   14044:	f8ca 3000 	str.w	r3, [sl]
   14048:	e789      	b.n	13f5e <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   1404a:	69e3      	ldr	r3, [r4, #28]
   1404c:	f104 0a1c 	add.w	sl, r4, #28
   14050:	e7f7      	b.n	14042 <send_frag+0x176>
	parent->next = child;
   14052:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   14054:	69a3      	ldr	r3, [r4, #24]
   14056:	429d      	cmp	r5, r3
	list->tail = node;
   14058:	bf08      	it	eq
   1405a:	61a2      	streq	r2, [r4, #24]
}
   1405c:	e7c0      	b.n	13fe0 <send_frag+0x114>
	return node->next;
   1405e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14060:	681b      	ldr	r3, [r3, #0]
   14062:	e7b2      	b.n	13fca <send_frag+0xfe>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14064:	f8da 3000 	ldr.w	r3, [sl]
   14068:	b95b      	cbnz	r3, 14082 <send_frag+0x1b6>
   1406a:	490f      	ldr	r1, [pc, #60]	; (140a8 <send_frag+0x1dc>)
   1406c:	480f      	ldr	r0, [pc, #60]	; (140ac <send_frag+0x1e0>)
   1406e:	f240 2351 	movw	r3, #593	; 0x251
   14072:	4a0f      	ldr	r2, [pc, #60]	; (140b0 <send_frag+0x1e4>)
   14074:	f01a fc6e 	bl	2e954 <assert_print>
   14078:	f240 2151 	movw	r1, #593	; 0x251
   1407c:	480c      	ldr	r0, [pc, #48]	; (140b0 <send_frag+0x1e4>)
   1407e:	f01a fc62 	bl	2e946 <assert_post_action>
			(*pending_no_cb)--;
   14082:	3b01      	subs	r3, #1
   14084:	f8ca 3000 	str.w	r3, [sl]
   14088:	e7ac      	b.n	13fe4 <send_frag+0x118>
		err = -ENOTCONN;
   1408a:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1408e:	e7af      	b.n	13ff0 <send_frag+0x124>
		return -ENOBUFS;
   14090:	f06f 0868 	mvn.w	r8, #104	; 0x68
   14094:	e7bb      	b.n	1400e <send_frag+0x142>
   14096:	bf00      	nop
   14098:	2000c580 	.word	0x2000c580
   1409c:	00039fa4 	.word	0x00039fa4
   140a0:	000363f8 	.word	0x000363f8
   140a4:	2000c688 	.word	0x2000c688
   140a8:	0003a622 	.word	0x0003a622
   140ac:	000381c3 	.word	0x000381c3
   140b0:	0003a5d4 	.word	0x0003a5d4

000140b4 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   140b4:	4804      	ldr	r0, [pc, #16]	; (140c8 <bt_conn_get_pkts+0x14>)
   140b6:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   140ba:	f500 7084 	add.w	r0, r0, #264	; 0x108
   140be:	2b00      	cmp	r3, #0
}
   140c0:	bf08      	it	eq
   140c2:	2000      	moveq	r0, #0
   140c4:	4770      	bx	lr
   140c6:	bf00      	nop
   140c8:	2000c580 	.word	0x2000c580

000140cc <bt_conn_new>:
{
   140cc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   140ce:	2200      	movs	r2, #0
   140d0:	4604      	mov	r4, r0
   140d2:	428a      	cmp	r2, r1
   140d4:	d102      	bne.n	140dc <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   140d6:	2400      	movs	r4, #0
}
   140d8:	4620      	mov	r0, r4
   140da:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   140dc:	2001      	movs	r0, #1
   140de:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   140e2:	e8d3 5fef 	ldaex	r5, [r3]
   140e6:	2d00      	cmp	r5, #0
   140e8:	d104      	bne.n	140f4 <bt_conn_new+0x28>
   140ea:	e8c3 0fec 	stlex	ip, r0, [r3]
   140ee:	f1bc 0f00 	cmp.w	ip, #0
   140f2:	d1f6      	bne.n	140e2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   140f4:	d002      	beq.n	140fc <bt_conn_new+0x30>
   140f6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   140f8:	4402      	add	r2, r0
   140fa:	e7ea      	b.n	140d2 <bt_conn_new+0x6>
	if (!conn) {
   140fc:	2c00      	cmp	r4, #0
   140fe:	d0ea      	beq.n	140d6 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14100:	22c0      	movs	r2, #192	; 0xc0
   14102:	2100      	movs	r1, #0
   14104:	4620      	mov	r0, r4
   14106:	f020 ff91 	bl	3502c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1410a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1410e:	4904      	ldr	r1, [pc, #16]	; (14120 <bt_conn_new+0x54>)
   14110:	f015 fa10 	bl	29534 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14114:	4903      	ldr	r1, [pc, #12]	; (14124 <bt_conn_new+0x58>)
   14116:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1411a:	f015 f8bd 	bl	29298 <k_work_init>
	return conn;
   1411e:	e7db      	b.n	140d8 <bt_conn_new+0xc>
   14120:	00014bd9 	.word	0x00014bd9
   14124:	0002fe97 	.word	0x0002fe97

00014128 <conn_cleanup>:
{
   14128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1412c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1412e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14130:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14134:	2300      	movs	r3, #0
   14136:	2200      	movs	r2, #0
   14138:	4630      	mov	r0, r6
   1413a:	f01d f83c 	bl	311b6 <net_buf_get>
   1413e:	4603      	mov	r3, r0
   14140:	b980      	cbnz	r0, 14164 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14142:	6963      	ldr	r3, [r4, #20]
   14144:	b1cb      	cbz	r3, 1417a <conn_cleanup+0x52>
   14146:	4918      	ldr	r1, [pc, #96]	; (141a8 <conn_cleanup+0x80>)
   14148:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1414c:	4a17      	ldr	r2, [pc, #92]	; (141ac <conn_cleanup+0x84>)
   1414e:	4818      	ldr	r0, [pc, #96]	; (141b0 <conn_cleanup+0x88>)
   14150:	f01a fc00 	bl	2e954 <assert_print>
   14154:	4817      	ldr	r0, [pc, #92]	; (141b4 <conn_cleanup+0x8c>)
   14156:	f01a fbfd 	bl	2e954 <assert_print>
   1415a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1415e:	4813      	ldr	r0, [pc, #76]	; (141ac <conn_cleanup+0x84>)
   14160:	f01a fbf1 	bl	2e946 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14164:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14166:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14168:	f004 f942 	bl	183f0 <net_buf_unref>
		if (tx) {
   1416c:	2d00      	cmp	r5, #0
   1416e:	d0e1      	beq.n	14134 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14170:	4629      	mov	r1, r5
   14172:	4620      	mov	r0, r4
   14174:	f7ff fe84 	bl	13e80 <conn_tx_destroy>
   14178:	e7da      	b.n	14130 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1417a:	69e3      	ldr	r3, [r4, #28]
   1417c:	b14b      	cbz	r3, 14192 <conn_cleanup+0x6a>
   1417e:	490e      	ldr	r1, [pc, #56]	; (141b8 <conn_cleanup+0x90>)
   14180:	f240 23f1 	movw	r3, #753	; 0x2f1
   14184:	4a09      	ldr	r2, [pc, #36]	; (141ac <conn_cleanup+0x84>)
   14186:	480a      	ldr	r0, [pc, #40]	; (141b0 <conn_cleanup+0x88>)
   14188:	f01a fbe4 	bl	2e954 <assert_print>
   1418c:	f240 21f1 	movw	r1, #753	; 0x2f1
   14190:	e7e5      	b.n	1415e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14192:	4620      	mov	r0, r4
   14194:	f01b fe82 	bl	2fe9c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14198:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1419c:	2200      	movs	r2, #0
}
   1419e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   141a2:	2300      	movs	r3, #0
   141a4:	f015 bae2 	b.w	2976c <k_work_reschedule>
   141a8:	0003a635 	.word	0x0003a635
   141ac:	0003a5d4 	.word	0x0003a5d4
   141b0:	000381c3 	.word	0x000381c3
   141b4:	0003a65b 	.word	0x0003a65b
   141b8:	0003a670 	.word	0x0003a670

000141bc <bt_conn_recv>:
{
   141bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141c0:	4616      	mov	r6, r2
   141c2:	b086      	sub	sp, #24
   141c4:	af00      	add	r7, sp, #0
   141c6:	4604      	mov	r4, r0
   141c8:	460d      	mov	r5, r1
	tx_notify(conn);
   141ca:	f7ff fe29 	bl	13e20 <tx_notify>
	switch (flags) {
   141ce:	2e01      	cmp	r6, #1
   141d0:	d030      	beq.n	14234 <bt_conn_recv+0x78>
   141d2:	2e02      	cmp	r6, #2
   141d4:	d16a      	bne.n	142ac <bt_conn_recv+0xf0>
		if (conn->rx) {
   141d6:	6923      	ldr	r3, [r4, #16]
   141d8:	b163      	cbz	r3, 141f4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   141da:	4b40      	ldr	r3, [pc, #256]	; (142dc <bt_conn_recv+0x120>)
   141dc:	4840      	ldr	r0, [pc, #256]	; (142e0 <bt_conn_recv+0x124>)
   141de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141e2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   141e6:	f107 0210 	add.w	r2, r7, #16
   141ea:	f01b fe51 	bl	2fe90 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   141ee:	4620      	mov	r0, r4
   141f0:	f01b fe54 	bl	2fe9c <bt_conn_reset_rx_state>
		conn->rx = buf;
   141f4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   141f6:	6921      	ldr	r1, [r4, #16]
   141f8:	8a08      	ldrh	r0, [r1, #16]
   141fa:	2801      	cmp	r0, #1
   141fc:	d930      	bls.n	14260 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   141fe:	68cb      	ldr	r3, [r1, #12]
   14200:	881b      	ldrh	r3, [r3, #0]
   14202:	3304      	adds	r3, #4
   14204:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14206:	4298      	cmp	r0, r3
   14208:	d32a      	bcc.n	14260 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1420a:	d95f      	bls.n	142cc <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1420c:	466d      	mov	r5, sp
   1420e:	b088      	sub	sp, #32
   14210:	466a      	mov	r2, sp
   14212:	61d3      	str	r3, [r2, #28]
   14214:	2304      	movs	r3, #4
   14216:	4933      	ldr	r1, [pc, #204]	; (142e4 <bt_conn_recv+0x128>)
   14218:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1421c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14220:	482f      	ldr	r0, [pc, #188]	; (142e0 <bt_conn_recv+0x124>)
   14222:	f842 3f10 	str.w	r3, [r2, #16]!
   14226:	f01b fe33 	bl	2fe90 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1422a:	4620      	mov	r0, r4
   1422c:	46ad      	mov	sp, r5
   1422e:	f01b fe35 	bl	2fe9c <bt_conn_reset_rx_state>
		return;
   14232:	e015      	b.n	14260 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   14234:	6920      	ldr	r0, [r4, #16]
   14236:	b970      	cbnz	r0, 14256 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   14238:	4b2b      	ldr	r3, [pc, #172]	; (142e8 <bt_conn_recv+0x12c>)
   1423a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1423e:	617b      	str	r3, [r7, #20]
   14240:	2302      	movs	r3, #2
   14242:	4827      	ldr	r0, [pc, #156]	; (142e0 <bt_conn_recv+0x124>)
   14244:	613b      	str	r3, [r7, #16]
   14246:	f107 0210 	add.w	r2, r7, #16
   1424a:	f01b fe21 	bl	2fe90 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1424e:	4620      	mov	r0, r4
   14250:	f01b fe24 	bl	2fe9c <bt_conn_reset_rx_state>
   14254:	e001      	b.n	1425a <bt_conn_recv+0x9e>
		if (!buf->len) {
   14256:	8a2e      	ldrh	r6, [r5, #16]
   14258:	b936      	cbnz	r6, 14268 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1425a:	4628      	mov	r0, r5
   1425c:	f004 f8c8 	bl	183f0 <net_buf_unref>
}
   14260:	3718      	adds	r7, #24
   14262:	46bd      	mov	sp, r7
   14264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14268:	300c      	adds	r0, #12
   1426a:	f01c ffc0 	bl	311ee <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1426e:	4286      	cmp	r6, r0
   14270:	d912      	bls.n	14298 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14272:	4b1e      	ldr	r3, [pc, #120]	; (142ec <bt_conn_recv+0x130>)
   14274:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14278:	617b      	str	r3, [r7, #20]
   1427a:	2302      	movs	r3, #2
   1427c:	4818      	ldr	r0, [pc, #96]	; (142e0 <bt_conn_recv+0x124>)
   1427e:	613b      	str	r3, [r7, #16]
   14280:	f107 0210 	add.w	r2, r7, #16
   14284:	f01b fe04 	bl	2fe90 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14288:	2200      	movs	r2, #0
   1428a:	4620      	mov	r0, r4
   1428c:	6921      	ldr	r1, [r4, #16]
   1428e:	f000 ff49 	bl	15124 <bt_l2cap_recv>
			conn->rx = NULL;
   14292:	2300      	movs	r3, #0
   14294:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14296:	e7e0      	b.n	1425a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14298:	6920      	ldr	r0, [r4, #16]
   1429a:	8a2a      	ldrh	r2, [r5, #16]
   1429c:	68e9      	ldr	r1, [r5, #12]
   1429e:	300c      	adds	r0, #12
   142a0:	f01c ffad 	bl	311fe <net_buf_simple_add_mem>
		net_buf_unref(buf);
   142a4:	4628      	mov	r0, r5
   142a6:	f004 f8a3 	bl	183f0 <net_buf_unref>
		break;
   142aa:	e7a4      	b.n	141f6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   142ac:	46e8      	mov	r8, sp
   142ae:	b088      	sub	sp, #32
   142b0:	466a      	mov	r2, sp
   142b2:	4b0f      	ldr	r3, [pc, #60]	; (142f0 <bt_conn_recv+0x134>)
   142b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   142b8:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   142bc:	2303      	movs	r3, #3
   142be:	4808      	ldr	r0, [pc, #32]	; (142e0 <bt_conn_recv+0x124>)
   142c0:	f842 3f10 	str.w	r3, [r2, #16]!
   142c4:	f01b fde4 	bl	2fe90 <z_log_msg_static_create.constprop.0>
   142c8:	46c5      	mov	sp, r8
   142ca:	e7c0      	b.n	1424e <bt_conn_recv+0x92>
	conn->rx = NULL;
   142cc:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   142ce:	2201      	movs	r2, #1
   142d0:	4620      	mov	r0, r4
	conn->rx = NULL;
   142d2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   142d4:	f000 ff26 	bl	15124 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   142d8:	e7c2      	b.n	14260 <bt_conn_recv+0xa4>
   142da:	bf00      	nop
   142dc:	0003a689 	.word	0x0003a689
   142e0:	000363f8 	.word	0x000363f8
   142e4:	0003a709 	.word	0x0003a709
   142e8:	0003a6a6 	.word	0x0003a6a6
   142ec:	0003a6c4 	.word	0x0003a6c4
   142f0:	0003a6eb 	.word	0x0003a6eb

000142f4 <bt_conn_send_cb>:
{
   142f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142f8:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   142fa:	7acb      	ldrb	r3, [r1, #11]
{
   142fc:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   142fe:	2b07      	cmp	r3, #7
{
   14300:	460d      	mov	r5, r1
   14302:	4617      	mov	r7, r2
   14304:	b086      	sub	sp, #24
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   14306:	d80e      	bhi.n	14326 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   14308:	4b2c      	ldr	r3, [pc, #176]	; (143bc <bt_conn_send_cb+0xc8>)
   1430a:	482d      	ldr	r0, [pc, #180]	; (143c0 <bt_conn_send_cb+0xcc>)
   1430c:	9305      	str	r3, [sp, #20]
   1430e:	2302      	movs	r3, #2
   14310:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14314:	aa04      	add	r2, sp, #16
   14316:	9304      	str	r3, [sp, #16]
   14318:	f01b fdba 	bl	2fe90 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1431c:	f06f 0015 	mvn.w	r0, #21
}
   14320:	b006      	add	sp, #24
   14322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   14326:	7a83      	ldrb	r3, [r0, #10]
   14328:	2b07      	cmp	r3, #7
   1432a:	d00c      	beq.n	14346 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   1432c:	4b25      	ldr	r3, [pc, #148]	; (143c4 <bt_conn_send_cb+0xd0>)
   1432e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14332:	9305      	str	r3, [sp, #20]
   14334:	2302      	movs	r3, #2
   14336:	4822      	ldr	r0, [pc, #136]	; (143c0 <bt_conn_send_cb+0xcc>)
   14338:	aa04      	add	r2, sp, #16
   1433a:	9304      	str	r3, [sp, #16]
   1433c:	f01b fda8 	bl	2fe90 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   14340:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14344:	e7ec      	b.n	14320 <bt_conn_send_cb+0x2c>
	if (cb) {
   14346:	2a00      	cmp	r2, #0
   14348:	d033      	beq.n	143b2 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   1434a:	f016 fb83 	bl	2aa54 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1434e:	4b1e      	ldr	r3, [pc, #120]	; (143c8 <bt_conn_send_cb+0xd4>)
   14350:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14352:	481e      	ldr	r0, [pc, #120]	; (143cc <bt_conn_send_cb+0xd8>)
   14354:	bf07      	ittee	eq
   14356:	2200      	moveq	r2, #0
   14358:	2300      	moveq	r3, #0
   1435a:	f04f 32ff 	movne.w	r2, #4294967295
   1435e:	f04f 33ff 	movne.w	r3, #4294967295
   14362:	f014 fc87 	bl	28c74 <z_impl_k_queue_get>
   14366:	4604      	mov	r4, r0
		if (!tx) {
   14368:	b328      	cbz	r0, 143b6 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   1436a:	7ab3      	ldrb	r3, [r6, #10]
   1436c:	2b07      	cmp	r3, #7
   1436e:	d012      	beq.n	14396 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   14370:	4b17      	ldr	r3, [pc, #92]	; (143d0 <bt_conn_send_cb+0xdc>)
   14372:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14376:	9305      	str	r3, [sp, #20]
   14378:	2302      	movs	r3, #2
   1437a:	4811      	ldr	r0, [pc, #68]	; (143c0 <bt_conn_send_cb+0xcc>)
   1437c:	aa04      	add	r2, sp, #16
   1437e:	9304      	str	r3, [sp, #16]
   14380:	f01b fd86 	bl	2fe90 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14384:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14386:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14388:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1438c:	480f      	ldr	r0, [pc, #60]	; (143cc <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   1438e:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14390:	f020 fc36 	bl	34c00 <k_queue_append>
}
   14394:	e7d4      	b.n	14340 <bt_conn_send_cb+0x4c>
		tx->pending_no_cb = 0U;
   14396:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14398:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1439c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1439e:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   143a0:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   143a2:	f106 0038 	add.w	r0, r6, #56	; 0x38
   143a6:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
   143a8:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   143aa:	f003 fffb 	bl	183a4 <net_buf_put>
	return 0;
   143ae:	4620      	mov	r0, r4
   143b0:	e7b6      	b.n	14320 <bt_conn_send_cb+0x2c>
   143b2:	4614      	mov	r4, r2
   143b4:	e7f3      	b.n	1439e <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   143b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   143ba:	e7b1      	b.n	14320 <bt_conn_send_cb+0x2c>
   143bc:	0003a724 	.word	0x0003a724
   143c0:	000363f8 	.word	0x000363f8
   143c4:	0003a741 	.word	0x0003a741
   143c8:	2000f740 	.word	0x2000f740
   143cc:	2000d030 	.word	0x2000d030
   143d0:	0003a750 	.word	0x0003a750

000143d4 <bt_conn_prepare_events>:
{
   143d4:	b570      	push	{r4, r5, r6, lr}
   143d6:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   143d8:	481e      	ldr	r0, [pc, #120]	; (14454 <bt_conn_prepare_events+0x80>)
   143da:	f020 fdc2 	bl	34f62 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   143de:	4620      	mov	r0, r4
   143e0:	2200      	movs	r2, #0
   143e2:	2101      	movs	r1, #1
   143e4:	4b1b      	ldr	r3, [pc, #108]	; (14454 <bt_conn_prepare_events+0x80>)
   143e6:	f017 f9db 	bl	2b7a0 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   143ea:	481b      	ldr	r0, [pc, #108]	; (14458 <bt_conn_prepare_events+0x84>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   143ec:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   143f0:	f01b fd4b 	bl	2fe8a <atomic_get>
   143f4:	b908      	cbnz	r0, 143fa <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   143f6:	2001      	movs	r0, #1
}
   143f8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   143fa:	4818      	ldr	r0, [pc, #96]	; (1445c <bt_conn_prepare_events+0x88>)
   143fc:	7a83      	ldrb	r3, [r0, #10]
   143fe:	b96b      	cbnz	r3, 1441c <bt_conn_prepare_events+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14400:	1d03      	adds	r3, r0, #4
   14402:	e8d3 2fef 	ldaex	r2, [r3]
   14406:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1440a:	e8c3 1fe6 	stlex	r6, r1, [r3]
   1440e:	2e00      	cmp	r6, #0
   14410:	d1f7      	bne.n	14402 <bt_conn_prepare_events+0x2e>
   14412:	0653      	lsls	r3, r2, #25
   14414:	d502      	bpl.n	1441c <bt_conn_prepare_events+0x48>
		conn_cleanup(conn);
   14416:	f7ff fe87 	bl	14128 <conn_cleanup>
		return -ENOTCONN;
   1441a:	e7ec      	b.n	143f6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1441c:	7a83      	ldrb	r3, [r0, #10]
   1441e:	2b07      	cmp	r3, #7
   14420:	d1e9      	bne.n	143f6 <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
   14422:	4b0f      	ldr	r3, [pc, #60]	; (14460 <bt_conn_prepare_events+0x8c>)
   14424:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   14428:	2a00      	cmp	r2, #0
   1442a:	d0e4      	beq.n	143f6 <bt_conn_prepare_events+0x22>
	return sem->count;
   1442c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   14430:	6b81      	ldr	r1, [r0, #56]	; 0x38
   14432:	b159      	cbz	r1, 1444c <bt_conn_prepare_events+0x78>
   14434:	b952      	cbnz	r2, 1444c <bt_conn_prepare_events+0x78>
		k_poll_event_init(&events[0],
   14436:	2102      	movs	r1, #2
   14438:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
   1443c:	4628      	mov	r0, r5
   1443e:	f017 f9af 	bl	2b7a0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14442:	2301      	movs	r3, #1
			ev_count++;
   14444:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14446:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   1444a:	e7d5      	b.n	143f8 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
   1444c:	2200      	movs	r2, #0
   1444e:	2104      	movs	r1, #4
   14450:	4b04      	ldr	r3, [pc, #16]	; (14464 <bt_conn_prepare_events+0x90>)
   14452:	e7f3      	b.n	1443c <bt_conn_prepare_events+0x68>
   14454:	2000c86c 	.word	0x2000c86c
   14458:	2000da10 	.word	0x2000da10
   1445c:	2000d950 	.word	0x2000d950
   14460:	2000c580 	.word	0x2000c580
   14464:	2000d988 	.word	0x2000d988

00014468 <bt_conn_ref>:
	__ASSERT_NO_MSG(conn);
   14468:	4603      	mov	r3, r0
{
   1446a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1446c:	b190      	cbz	r0, 14494 <bt_conn_ref+0x2c>
		old = atomic_get(&conn->ref);
   1446e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   14472:	4610      	mov	r0, r2
   14474:	f01b fd09 	bl	2fe8a <atomic_get>
		if (!old) {
   14478:	b1c0      	cbz	r0, 144ac <bt_conn_ref+0x44>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1447a:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1447c:	e8d2 4fef 	ldaex	r4, [r2]
   14480:	4284      	cmp	r4, r0
   14482:	d104      	bne.n	1448e <bt_conn_ref+0x26>
   14484:	e8c2 1fec 	stlex	ip, r1, [r2]
   14488:	f1bc 0f00 	cmp.w	ip, #0
   1448c:	d1f6      	bne.n	1447c <bt_conn_ref+0x14>
   1448e:	d1f0      	bne.n	14472 <bt_conn_ref+0xa>
}
   14490:	4618      	mov	r0, r3
   14492:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14494:	4906      	ldr	r1, [pc, #24]	; (144b0 <bt_conn_ref+0x48>)
   14496:	4807      	ldr	r0, [pc, #28]	; (144b4 <bt_conn_ref+0x4c>)
   14498:	f240 43db 	movw	r3, #1243	; 0x4db
   1449c:	4a06      	ldr	r2, [pc, #24]	; (144b8 <bt_conn_ref+0x50>)
   1449e:	f01a fa59 	bl	2e954 <assert_print>
   144a2:	f240 41db 	movw	r1, #1243	; 0x4db
   144a6:	4804      	ldr	r0, [pc, #16]	; (144b8 <bt_conn_ref+0x50>)
   144a8:	f01a fa4d 	bl	2e946 <assert_post_action>
			return NULL;
   144ac:	4603      	mov	r3, r0
   144ae:	e7ef      	b.n	14490 <bt_conn_ref+0x28>
   144b0:	0003a016 	.word	0x0003a016
   144b4:	000381c3 	.word	0x000381c3
   144b8:	0003a5d4 	.word	0x0003a5d4

000144bc <bt_conn_unref>:
{
   144bc:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   144be:	30c0      	adds	r0, #192	; 0xc0
   144c0:	e8d0 3fef 	ldaex	r3, [r0]
   144c4:	1e5a      	subs	r2, r3, #1
   144c6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   144ca:	2900      	cmp	r1, #0
   144cc:	d1f8      	bne.n	144c0 <bt_conn_unref+0x4>
	__ASSERT(old > 0, "Conn reference counter is 0");
   144ce:	2b00      	cmp	r3, #0
   144d0:	dc0e      	bgt.n	144f0 <bt_conn_unref+0x34>
   144d2:	4908      	ldr	r1, [pc, #32]	; (144f4 <bt_conn_unref+0x38>)
   144d4:	f240 43f7 	movw	r3, #1271	; 0x4f7
   144d8:	4a07      	ldr	r2, [pc, #28]	; (144f8 <bt_conn_unref+0x3c>)
   144da:	4808      	ldr	r0, [pc, #32]	; (144fc <bt_conn_unref+0x40>)
   144dc:	f01a fa3a 	bl	2e954 <assert_print>
   144e0:	4807      	ldr	r0, [pc, #28]	; (14500 <bt_conn_unref+0x44>)
   144e2:	f01a fa37 	bl	2e954 <assert_print>
   144e6:	f240 41f7 	movw	r1, #1271	; 0x4f7
   144ea:	4803      	ldr	r0, [pc, #12]	; (144f8 <bt_conn_unref+0x3c>)
   144ec:	f01a fa2b 	bl	2e946 <assert_post_action>
}
   144f0:	bd08      	pop	{r3, pc}
   144f2:	bf00      	nop
   144f4:	0003a776 	.word	0x0003a776
   144f8:	0003a5d4 	.word	0x0003a5d4
   144fc:	000381c3 	.word	0x000381c3
   14500:	0003a77e 	.word	0x0003a77e

00014504 <bt_conn_lookup_handle>:
{
   14504:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14506:	2101      	movs	r1, #1
   14508:	4801      	ldr	r0, [pc, #4]	; (14510 <bt_conn_lookup_handle+0xc>)
   1450a:	f01b bcd0 	b.w	2feae <conn_lookup_handle>
   1450e:	bf00      	nop
   14510:	2000d950 	.word	0x2000d950

00014514 <bt_conn_set_state>:
{
   14514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   14518:	7a85      	ldrb	r5, [r0, #10]
{
   1451a:	4604      	mov	r4, r0
	if (conn->state == state) {
   1451c:	428d      	cmp	r5, r1
{
   1451e:	460e      	mov	r6, r1
   14520:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14522:	d119      	bne.n	14558 <bt_conn_set_state+0x44>
	switch (state) {
   14524:	2d08      	cmp	r5, #8
   14526:	bf98      	it	ls
   14528:	4b7d      	ldrls	r3, [pc, #500]	; (14720 <bt_conn_set_state+0x20c>)
		LOG_WRN("no transition %s", state2str(state));
   1452a:	466c      	mov	r4, sp
   1452c:	b088      	sub	sp, #32
   1452e:	bf94      	ite	ls
   14530:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
	if (conn->state == state) {
   14534:	4b7b      	ldrhi	r3, [pc, #492]	; (14724 <bt_conn_set_state+0x210>)
		LOG_WRN("no transition %s", state2str(state));
   14536:	466a      	mov	r2, sp
   14538:	497b      	ldr	r1, [pc, #492]	; (14728 <bt_conn_set_state+0x214>)
   1453a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1453e:	f44f 7300 	mov.w	r3, #512	; 0x200
   14542:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14546:	8393      	strh	r3, [r2, #28]
   14548:	4b78      	ldr	r3, [pc, #480]	; (1472c <bt_conn_set_state+0x218>)
   1454a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   1454e:	4878      	ldr	r0, [pc, #480]	; (14730 <bt_conn_set_state+0x21c>)
   14550:	f01b fc9e 	bl	2fe90 <z_log_msg_static_create.constprop.0>
   14554:	46a5      	mov	sp, r4
   14556:	e049      	b.n	145ec <bt_conn_set_state+0xd8>
	conn->state = state;
   14558:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1455a:	b165      	cbz	r5, 14576 <bt_conn_set_state+0x62>
   1455c:	2d06      	cmp	r5, #6
   1455e:	d010      	beq.n	14582 <bt_conn_set_state+0x6e>
	switch (conn->state) {
   14560:	7aa3      	ldrb	r3, [r4, #10]
   14562:	2b08      	cmp	r3, #8
   14564:	f200 80d7 	bhi.w	14716 <bt_conn_set_state+0x202>
   14568:	e8df f003 	tbb	[pc, r3]
   1456c:	40401243 	.word	0x40401243
   14570:	32944040 	.word	0x32944040
   14574:	40          	.byte	0x40
   14575:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   14576:	7883      	ldrb	r3, [r0, #2]
   14578:	2b08      	cmp	r3, #8
   1457a:	d0f1      	beq.n	14560 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   1457c:	f7ff ff74 	bl	14468 <bt_conn_ref>
   14580:	e7ee      	b.n	14560 <bt_conn_set_state+0x4c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14582:	7883      	ldrb	r3, [r0, #2]
   14584:	2b01      	cmp	r3, #1
   14586:	d1eb      	bne.n	14560 <bt_conn_set_state+0x4c>
			k_work_cancel_delayable(&conn->deferred_work);
   14588:	3060      	adds	r0, #96	; 0x60
   1458a:	f015 f8f5 	bl	29778 <k_work_cancel_delayable>
   1458e:	e7e7      	b.n	14560 <bt_conn_set_state+0x4c>
		tx->pending_no_cb = 0U;
   14590:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
   14594:	4d67      	ldr	r5, [pc, #412]	; (14734 <bt_conn_set_state+0x220>)
	return NULL;
   14596:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   1459a:	f04f 0220 	mov.w	r2, #32
   1459e:	f3ef 8311 	mrs	r3, BASEPRI
   145a2:	f382 8812 	msr	BASEPRI_MAX, r2
   145a6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   145aa:	69e2      	ldr	r2, [r4, #28]
   145ac:	2a00      	cmp	r2, #0
   145ae:	f000 808d 	beq.w	146cc <bt_conn_set_state+0x1b8>
			conn->pending_no_cb--;
   145b2:	3a01      	subs	r2, #1
   145b4:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   145b6:	f383 8811 	msr	BASEPRI, r3
   145ba:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   145be:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   145c2:	2b00      	cmp	r3, #0
   145c4:	bf14      	ite	ne
   145c6:	4630      	movne	r0, r6
   145c8:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   145ca:	f014 fbbd 	bl	28d48 <z_impl_k_sem_give>
}
   145ce:	e7e4      	b.n	1459a <bt_conn_set_state+0x86>
		if (conn->type == BT_CONN_TYPE_SCO) {
   145d0:	78a3      	ldrb	r3, [r4, #2]
   145d2:	2b04      	cmp	r3, #4
   145d4:	d00a      	beq.n	145ec <bt_conn_set_state+0xd8>
	z_impl_k_queue_init(queue);
   145d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   145da:	f020 fb04 	bl	34be6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   145de:	2100      	movs	r1, #0
   145e0:	4855      	ldr	r0, [pc, #340]	; (14738 <bt_conn_set_state+0x224>)
   145e2:	f017 f9fb 	bl	2b9dc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   145e6:	2300      	movs	r3, #0
	list->tail = NULL;
   145e8:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   145ec:	46bd      	mov	sp, r7
   145ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   145f2:	78a3      	ldrb	r3, [r4, #2]
   145f4:	2b04      	cmp	r3, #4
   145f6:	d103      	bne.n	14600 <bt_conn_set_state+0xec>
			bt_conn_unref(conn);
   145f8:	4620      	mov	r0, r4
   145fa:	f7ff ff5f 	bl	144bc <bt_conn_unref>
			break;
   145fe:	e7f5      	b.n	145ec <bt_conn_set_state+0xd8>
		switch (old_state) {
   14600:	2d08      	cmp	r5, #8
   14602:	d8f3      	bhi.n	145ec <bt_conn_set_state+0xd8>
   14604:	a301      	add	r3, pc, #4	; (adr r3, 1460c <bt_conn_set_state+0xf8>)
   14606:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1460a:	bf00      	nop
   1460c:	0001467d 	.word	0x0001467d
   14610:	00014631 	.word	0x00014631
   14614:	0001466f 	.word	0x0001466f
   14618:	000145f9 	.word	0x000145f9
   1461c:	000145f9 	.word	0x000145f9
   14620:	0001466f 	.word	0x0001466f
   14624:	0001466f 	.word	0x0001466f
   14628:	0001467d 	.word	0x0001467d
   1462c:	0001467d 	.word	0x0001467d
			tx_notify(conn);
   14630:	4620      	mov	r0, r4
   14632:	f7ff fbf5 	bl	13e20 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14636:	78a3      	ldrb	r3, [r4, #2]
   14638:	2b01      	cmp	r3, #1
   1463a:	d10a      	bne.n	14652 <bt_conn_set_state+0x13e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1463c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   14640:	4628      	mov	r0, r5
   14642:	f020 fb6b 	bl	34d1c <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14646:	f010 0f0c 	tst.w	r0, #12
   1464a:	d002      	beq.n	14652 <bt_conn_set_state+0x13e>
				k_work_cancel_delayable(&conn->deferred_work);
   1464c:	4628      	mov	r0, r5
   1464e:	f015 f893 	bl	29778 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14652:	3404      	adds	r4, #4
   14654:	e8d4 3fef 	ldaex	r3, [r4]
   14658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1465c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14660:	2a00      	cmp	r2, #0
   14662:	d1f7      	bne.n	14654 <bt_conn_set_state+0x140>
   14664:	2100      	movs	r1, #0
   14666:	4834      	ldr	r0, [pc, #208]	; (14738 <bt_conn_set_state+0x224>)
   14668:	f017 f9b8 	bl	2b9dc <z_impl_k_poll_signal_raise>
   1466c:	e7be      	b.n	145ec <bt_conn_set_state+0xd8>
			if (conn->err) {
   1466e:	7a63      	ldrb	r3, [r4, #9]
   14670:	2b00      	cmp	r3, #0
   14672:	d0c1      	beq.n	145f8 <bt_conn_set_state+0xe4>
				notify_connected(conn);
   14674:	4620      	mov	r0, r4
   14676:	f7ff fb9d 	bl	13db4 <notify_connected>
   1467a:	e7bd      	b.n	145f8 <bt_conn_set_state+0xe4>
			LOG_WRN("Invalid (%u) old state", state);
   1467c:	466c      	mov	r4, sp
   1467e:	b088      	sub	sp, #32
   14680:	466a      	mov	r2, sp
   14682:	4b2e      	ldr	r3, [pc, #184]	; (1473c <bt_conn_set_state+0x228>)
		LOG_WRN("no valid (%u) state was set", state);
   14684:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14688:	2303      	movs	r3, #3
   1468a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1468e:	f842 3f10 	str.w	r3, [r2, #16]!
   14692:	e75c      	b.n	1454e <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14694:	78a3      	ldrb	r3, [r4, #2]
   14696:	2b01      	cmp	r3, #1
   14698:	d1a8      	bne.n	145ec <bt_conn_set_state+0xd8>
		    bt_dev.create_param.timeout != 0) {
   1469a:	4b26      	ldr	r3, [pc, #152]	; (14734 <bt_conn_set_state+0x220>)
   1469c:	8a9d      	ldrh	r5, [r3, #20]
		    conn->type == BT_CONN_TYPE_LE &&
   1469e:	2d00      	cmp	r5, #0
   146a0:	d0a4      	beq.n	145ec <bt_conn_set_state+0xd8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   146a2:	230a      	movs	r3, #10
   146a4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   146a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   146ac:	2100      	movs	r1, #0
   146ae:	435d      	muls	r5, r3
   146b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   146b4:	2300      	movs	r3, #0
   146b6:	fbc5 0106 	smlal	r0, r1, r5, r6
   146ba:	f7f4 fc87 	bl	8fcc <__aeabi_uldivmod>
   146be:	4602      	mov	r2, r0
   146c0:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   146c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   146c6:	f014 ffd7 	bl	29678 <k_work_schedule>
   146ca:	e78f      	b.n	145ec <bt_conn_set_state+0xd8>
	return list->head;
   146cc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   146ce:	b921      	cbnz	r1, 146da <bt_conn_set_state+0x1c6>
   146d0:	f383 8811 	msr	BASEPRI, r3
   146d4:	f3bf 8f6f 	isb	sy
		if (!node) {
   146d8:	e788      	b.n	145ec <bt_conn_set_state+0xd8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   146da:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   146dc:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   146de:	4281      	cmp	r1, r0
	list->tail = node;
   146e0:	bf08      	it	eq
   146e2:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   146e4:	6162      	str	r2, [r4, #20]
   146e6:	f383 8811 	msr	BASEPRI, r3
   146ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   146ee:	f04f 0220 	mov.w	r2, #32
   146f2:	f3ef 8311 	mrs	r3, BASEPRI
   146f6:	f382 8812 	msr	BASEPRI_MAX, r2
   146fa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   146fe:	68ca      	ldr	r2, [r1, #12]
   14700:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14702:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   14706:	f383 8811 	msr	BASEPRI, r3
   1470a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1470e:	4620      	mov	r0, r4
   14710:	f7ff fbb6 	bl	13e80 <conn_tx_destroy>
   14714:	e753      	b.n	145be <bt_conn_set_state+0xaa>
		LOG_WRN("no valid (%u) state was set", state);
   14716:	466c      	mov	r4, sp
   14718:	b088      	sub	sp, #32
   1471a:	466a      	mov	r2, sp
   1471c:	4b08      	ldr	r3, [pc, #32]	; (14740 <bt_conn_set_state+0x22c>)
   1471e:	e7b1      	b.n	14684 <bt_conn_set_state+0x170>
   14720:	00036b64 	.word	0x00036b64
   14724:	0003a79c 	.word	0x0003a79c
   14728:	0003a7a6 	.word	0x0003a7a6
   1472c:	01000003 	.word	0x01000003
   14730:	000363f8 	.word	0x000363f8
   14734:	2000c580 	.word	0x2000c580
   14738:	2000c86c 	.word	0x2000c86c
   1473c:	0003a7b7 	.word	0x0003a7b7
   14740:	0003a7ce 	.word	0x0003a7ce

00014744 <bt_conn_index>:
		index = conn - acl_conns;
   14744:	4a0c      	ldr	r2, [pc, #48]	; (14778 <bt_conn_index+0x34>)
{
   14746:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   14748:	490c      	ldr	r1, [pc, #48]	; (1477c <bt_conn_index+0x38>)
   1474a:	1a83      	subs	r3, r0, r2
   1474c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1474e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14750:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14754:	d00e      	beq.n	14774 <bt_conn_index+0x30>
   14756:	490a      	ldr	r1, [pc, #40]	; (14780 <bt_conn_index+0x3c>)
   14758:	f240 5315 	movw	r3, #1301	; 0x515
   1475c:	4a09      	ldr	r2, [pc, #36]	; (14784 <bt_conn_index+0x40>)
   1475e:	480a      	ldr	r0, [pc, #40]	; (14788 <bt_conn_index+0x44>)
   14760:	f01a f8f8 	bl	2e954 <assert_print>
   14764:	4809      	ldr	r0, [pc, #36]	; (1478c <bt_conn_index+0x48>)
   14766:	f01a f8f5 	bl	2e954 <assert_print>
   1476a:	f240 5115 	movw	r1, #1301	; 0x515
   1476e:	4805      	ldr	r0, [pc, #20]	; (14784 <bt_conn_index+0x40>)
   14770:	f01a f8e9 	bl	2e946 <assert_post_action>
}
   14774:	b2d8      	uxtb	r0, r3
   14776:	bd08      	pop	{r3, pc}
   14778:	2000d950 	.word	0x2000d950
   1477c:	c28f5c29 	.word	0xc28f5c29
   14780:	0003a7ea 	.word	0x0003a7ea
   14784:	0003a5d4 	.word	0x0003a5d4
   14788:	000381c3 	.word	0x000381c3
   1478c:	0003a8b3 	.word	0x0003a8b3

00014790 <bt_conn_create_pdu_timeout>:
{
   14790:	b5f0      	push	{r4, r5, r6, r7, lr}
   14792:	b087      	sub	sp, #28
   14794:	4604      	mov	r4, r0
   14796:	460d      	mov	r5, r1
   14798:	4617      	mov	r7, r2
   1479a:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1479c:	f020 f9f4 	bl	34b88 <k_is_in_isr>
   147a0:	b158      	cbz	r0, 147ba <bt_conn_create_pdu_timeout+0x2a>
   147a2:	4914      	ldr	r1, [pc, #80]	; (147f4 <bt_conn_create_pdu_timeout+0x64>)
   147a4:	4814      	ldr	r0, [pc, #80]	; (147f8 <bt_conn_create_pdu_timeout+0x68>)
   147a6:	f240 5331 	movw	r3, #1329	; 0x531
   147aa:	4a14      	ldr	r2, [pc, #80]	; (147fc <bt_conn_create_pdu_timeout+0x6c>)
   147ac:	f01a f8d2 	bl	2e954 <assert_print>
   147b0:	f240 5131 	movw	r1, #1329	; 0x531
   147b4:	4811      	ldr	r0, [pc, #68]	; (147fc <bt_conn_create_pdu_timeout+0x6c>)
   147b6:	f01a f8c6 	bl	2e946 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   147ba:	4911      	ldr	r1, [pc, #68]	; (14800 <bt_conn_create_pdu_timeout+0x70>)
   147bc:	463a      	mov	r2, r7
   147be:	2c00      	cmp	r4, #0
   147c0:	bf14      	ite	ne
   147c2:	4620      	movne	r0, r4
   147c4:	4608      	moveq	r0, r1
   147c6:	4633      	mov	r3, r6
   147c8:	f01c fcf0 	bl	311ac <net_buf_alloc_fixed>
	if (!buf) {
   147cc:	4604      	mov	r4, r0
   147ce:	b960      	cbnz	r0, 147ea <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   147d0:	4b0c      	ldr	r3, [pc, #48]	; (14804 <bt_conn_create_pdu_timeout+0x74>)
   147d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   147d6:	9305      	str	r3, [sp, #20]
   147d8:	2302      	movs	r3, #2
   147da:	480b      	ldr	r0, [pc, #44]	; (14808 <bt_conn_create_pdu_timeout+0x78>)
   147dc:	aa04      	add	r2, sp, #16
   147de:	9304      	str	r3, [sp, #16]
   147e0:	f01b fb56 	bl	2fe90 <z_log_msg_static_create.constprop.0>
}
   147e4:	4620      	mov	r0, r4
   147e6:	b007      	add	sp, #28
   147e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   147ea:	1d29      	adds	r1, r5, #4
   147ec:	300c      	adds	r0, #12
   147ee:	f003 fec5 	bl	1857c <net_buf_simple_reserve>
	return buf;
   147f2:	e7f7      	b.n	147e4 <bt_conn_create_pdu_timeout+0x54>
   147f4:	0003a8cd 	.word	0x0003a8cd
   147f8:	000381c3 	.word	0x000381c3
   147fc:	0003a5d4 	.word	0x0003a5d4
   14800:	2000d080 	.word	0x2000d080
   14804:	0003a8dc 	.word	0x0003a8dc
   14808:	000363f8 	.word	0x000363f8

0001480c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1480e:	1d03      	adds	r3, r0, #4
{
   14810:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14812:	4618      	mov	r0, r3
   14814:	f01b fb39 	bl	2fe8a <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14818:	0582      	lsls	r2, r0, #22
   1481a:	d515      	bpl.n	14848 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   1481c:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14820:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   14824:	4291      	cmp	r1, r2
   14826:	d80f      	bhi.n	14848 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   14828:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   1482c:	4291      	cmp	r1, r2
   1482e:	d30b      	bcc.n	14848 <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14830:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   14834:	4291      	cmp	r1, r2
   14836:	d107      	bne.n	14848 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14838:	e8d3 1fef 	ldaex	r1, [r3]
   1483c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   14840:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14844:	2a00      	cmp	r2, #0
   14846:	d1f7      	bne.n	14838 <notify_le_param_updated+0x2c>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14848:	4b17      	ldr	r3, [pc, #92]	; (148a8 <notify_le_param_updated+0x9c>)
   1484a:	681d      	ldr	r5, [r3, #0]
   1484c:	b995      	cbnz	r5, 14874 <notify_le_param_updated+0x68>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1484e:	4d17      	ldr	r5, [pc, #92]	; (148ac <notify_le_param_updated+0xa0>)
   14850:	4f17      	ldr	r7, [pc, #92]	; (148b0 <notify_le_param_updated+0xa4>)
   14852:	42bd      	cmp	r5, r7
   14854:	d926      	bls.n	148a4 <notify_le_param_updated+0x98>
   14856:	4917      	ldr	r1, [pc, #92]	; (148b4 <notify_le_param_updated+0xa8>)
   14858:	f240 6304 	movw	r3, #1540	; 0x604
   1485c:	4a16      	ldr	r2, [pc, #88]	; (148b8 <notify_le_param_updated+0xac>)
   1485e:	4817      	ldr	r0, [pc, #92]	; (148bc <notify_le_param_updated+0xb0>)
   14860:	f01a f878 	bl	2e954 <assert_print>
   14864:	4816      	ldr	r0, [pc, #88]	; (148c0 <notify_le_param_updated+0xb4>)
   14866:	f01a f875 	bl	2e954 <assert_print>
   1486a:	f240 6104 	movw	r1, #1540	; 0x604
   1486e:	4812      	ldr	r0, [pc, #72]	; (148b8 <notify_le_param_updated+0xac>)
   14870:	f01a f869 	bl	2e946 <assert_post_action>
		if (cb->le_param_updated) {
   14874:	68ee      	ldr	r6, [r5, #12]
   14876:	b13e      	cbz	r6, 14888 <notify_le_param_updated+0x7c>
			cb->le_param_updated(conn, conn->le.interval,
   14878:	4620      	mov	r0, r4
   1487a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1487e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14882:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14886:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14888:	692d      	ldr	r5, [r5, #16]
   1488a:	e7df      	b.n	1484c <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
   1488c:	68ee      	ldr	r6, [r5, #12]
   1488e:	b13e      	cbz	r6, 148a0 <notify_le_param_updated+0x94>
			cb->le_param_updated(conn, conn->le.interval,
   14890:	4620      	mov	r0, r4
   14892:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14896:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1489a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1489e:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   148a0:	3514      	adds	r5, #20
   148a2:	e7d6      	b.n	14852 <notify_le_param_updated+0x46>
   148a4:	d3f2      	bcc.n	1488c <notify_le_param_updated+0x80>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   148a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148a8:	2000fbbc 	.word	0x2000fbbc
   148ac:	000363b0 	.word	0x000363b0
   148b0:	000363b0 	.word	0x000363b0
   148b4:	0003a604 	.word	0x0003a604
   148b8:	0003a5d4 	.word	0x0003a5d4
   148bc:	000381c3 	.word	0x000381c3
   148c0:	000387c1 	.word	0x000387c1

000148c4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148c8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   148ca:	4608      	mov	r0, r1
{
   148cc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   148ce:	f01b fa56 	bl	2fd7e <bt_le_conn_params_valid>
   148d2:	4605      	mov	r5, r0
   148d4:	b918      	cbnz	r0, 148de <le_param_req+0x1a>
		return false;
   148d6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   148d8:	4628      	mov	r0, r5
   148da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   148de:	4b1b      	ldr	r3, [pc, #108]	; (1494c <le_param_req+0x88>)
   148e0:	681e      	ldr	r6, [r3, #0]
   148e2:	b99e      	cbnz	r6, 1490c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   148e4:	4e1a      	ldr	r6, [pc, #104]	; (14950 <le_param_req+0x8c>)
   148e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 14954 <le_param_req+0x90>
   148ea:	4546      	cmp	r6, r8
   148ec:	d927      	bls.n	1493e <le_param_req+0x7a>
   148ee:	491a      	ldr	r1, [pc, #104]	; (14958 <le_param_req+0x94>)
   148f0:	f240 634c 	movw	r3, #1612	; 0x64c
   148f4:	4a19      	ldr	r2, [pc, #100]	; (1495c <le_param_req+0x98>)
   148f6:	481a      	ldr	r0, [pc, #104]	; (14960 <le_param_req+0x9c>)
   148f8:	f01a f82c 	bl	2e954 <assert_print>
   148fc:	4819      	ldr	r0, [pc, #100]	; (14964 <le_param_req+0xa0>)
   148fe:	f01a f829 	bl	2e954 <assert_print>
   14902:	f240 614c 	movw	r1, #1612	; 0x64c
   14906:	4815      	ldr	r0, [pc, #84]	; (1495c <le_param_req+0x98>)
   14908:	f01a f81d 	bl	2e946 <assert_post_action>
		if (!cb->le_param_req) {
   1490c:	68b3      	ldr	r3, [r6, #8]
   1490e:	b90b      	cbnz	r3, 14914 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   14910:	6936      	ldr	r6, [r6, #16]
   14912:	e7e6      	b.n	148e2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14914:	4621      	mov	r1, r4
   14916:	4638      	mov	r0, r7
   14918:	4798      	blx	r3
   1491a:	2800      	cmp	r0, #0
   1491c:	d0db      	beq.n	148d6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1491e:	4620      	mov	r0, r4
   14920:	f01b fa2d 	bl	2fd7e <bt_le_conn_params_valid>
   14924:	2800      	cmp	r0, #0
   14926:	d1f3      	bne.n	14910 <le_param_req+0x4c>
   14928:	e7d5      	b.n	148d6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1492a:	4621      	mov	r1, r4
   1492c:	4638      	mov	r0, r7
   1492e:	4798      	blx	r3
   14930:	2800      	cmp	r0, #0
   14932:	d0d0      	beq.n	148d6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14934:	4620      	mov	r0, r4
   14936:	f01b fa22 	bl	2fd7e <bt_le_conn_params_valid>
   1493a:	b920      	cbnz	r0, 14946 <le_param_req+0x82>
   1493c:	e7cb      	b.n	148d6 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1493e:	d2cb      	bcs.n	148d8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14940:	68b3      	ldr	r3, [r6, #8]
   14942:	2b00      	cmp	r3, #0
   14944:	d1f1      	bne.n	1492a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14946:	3614      	adds	r6, #20
   14948:	e7cf      	b.n	148ea <le_param_req+0x26>
   1494a:	bf00      	nop
   1494c:	2000fbbc 	.word	0x2000fbbc
   14950:	000363b0 	.word	0x000363b0
   14954:	000363b0 	.word	0x000363b0
   14958:	0003a604 	.word	0x0003a604
   1495c:	0003a5d4 	.word	0x0003a5d4
   14960:	000381c3 	.word	0x000381c3
   14964:	000387c1 	.word	0x000387c1

00014968 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   14968:	4b02      	ldr	r3, [pc, #8]	; (14974 <bt_conn_cb_register+0xc>)
   1496a:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   1496c:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   1496e:	6102      	str	r2, [r0, #16]
}
   14970:	4770      	bx	lr
   14972:	bf00      	nop
   14974:	2000fbbc 	.word	0x2000fbbc

00014978 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14978:	b538      	push	{r3, r4, r5, lr}
   1497a:	4605      	mov	r5, r0
   1497c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1497e:	480a      	ldr	r0, [pc, #40]	; (149a8 <bt_conn_add_le+0x30>)
   14980:	2101      	movs	r1, #1
   14982:	f7ff fba3 	bl	140cc <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14986:	b170      	cbz	r0, 149a6 <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   14988:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1498a:	6823      	ldr	r3, [r4, #0]
   1498c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   14990:	88a3      	ldrh	r3, [r4, #4]
   14992:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   14996:	79a3      	ldrb	r3, [r4, #6]
   14998:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1499c:	2301      	movs	r3, #1
   1499e:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   149a0:	4b02      	ldr	r3, [pc, #8]	; (149ac <bt_conn_add_le+0x34>)
   149a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   149a6:	bd38      	pop	{r3, r4, r5, pc}
   149a8:	2000d950 	.word	0x2000d950
   149ac:	00280018 	.word	0x00280018

000149b0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   149b0:	b570      	push	{r4, r5, r6, lr}
   149b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   149b4:	480a      	ldr	r0, [pc, #40]	; (149e0 <bt_conn_lookup_addr_le+0x30>)
{
   149b6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   149b8:	f7ff fd56 	bl	14468 <bt_conn_ref>
   149bc:	4604      	mov	r4, r0

		if (!conn) {
   149be:	b120      	cbz	r0, 149ca <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   149c0:	7883      	ldrb	r3, [r0, #2]
   149c2:	2b01      	cmp	r3, #1
   149c4:	d004      	beq.n	149d0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   149c6:	f7ff fd79 	bl	144bc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   149ca:	2400      	movs	r4, #0
}
   149cc:	4620      	mov	r0, r4
   149ce:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   149d0:	4632      	mov	r2, r6
   149d2:	4629      	mov	r1, r5
   149d4:	f01b fabf 	bl	2ff56 <bt_conn_is_peer_addr_le>
   149d8:	2800      	cmp	r0, #0
   149da:	d1f7      	bne.n	149cc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   149dc:	4620      	mov	r0, r4
   149de:	e7f2      	b.n	149c6 <bt_conn_lookup_addr_le+0x16>
   149e0:	2000d950 	.word	0x2000d950

000149e4 <bt_conn_exists_le>:
{
   149e4:	b5b0      	push	{r4, r5, r7, lr}
   149e6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   149e8:	f7ff ffe2 	bl	149b0 <bt_conn_lookup_addr_le>
	if (conn) {
   149ec:	4604      	mov	r4, r0
   149ee:	b1e8      	cbz	r0, 14a2c <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   149f0:	7a83      	ldrb	r3, [r0, #10]
   149f2:	466d      	mov	r5, sp
   149f4:	2b08      	cmp	r3, #8
   149f6:	bf98      	it	ls
   149f8:	4a0d      	ldrls	r2, [pc, #52]	; (14a30 <bt_conn_exists_le+0x4c>)
   149fa:	b088      	sub	sp, #32
   149fc:	bf94      	ite	ls
   149fe:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   14a02:	4b0c      	ldrhi	r3, [pc, #48]	; (14a34 <bt_conn_exists_le+0x50>)
   14a04:	466a      	mov	r2, sp
   14a06:	490c      	ldr	r1, [pc, #48]	; (14a38 <bt_conn_exists_le+0x54>)
   14a08:	480c      	ldr	r0, [pc, #48]	; (14a3c <bt_conn_exists_le+0x58>)
   14a0a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
   14a12:	8393      	strh	r3, [r2, #28]
   14a14:	4b0a      	ldr	r3, [pc, #40]	; (14a40 <bt_conn_exists_le+0x5c>)
   14a16:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14a1a:	f842 3f10 	str.w	r3, [r2, #16]!
   14a1e:	f01b fa37 	bl	2fe90 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   14a22:	4620      	mov	r0, r4
   14a24:	46ad      	mov	sp, r5
   14a26:	f7ff fd49 	bl	144bc <bt_conn_unref>
		return true;
   14a2a:	2001      	movs	r0, #1
}
   14a2c:	46bd      	mov	sp, r7
   14a2e:	bdb0      	pop	{r4, r5, r7, pc}
   14a30:	00036b64 	.word	0x00036b64
   14a34:	0003a79c 	.word	0x0003a79c
   14a38:	0003a905 	.word	0x0003a905
   14a3c:	000363f8 	.word	0x000363f8
   14a40:	01000003 	.word	0x01000003

00014a44 <conn_le_create_common_checks>:
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

static int conn_le_create_common_checks(const bt_addr_le_t *peer,
					const struct bt_le_conn_param *conn_param)
{
   14a44:	b538      	push	{r3, r4, r5, lr}
   14a46:	4604      	mov	r4, r0
   14a48:	4814      	ldr	r0, [pc, #80]	; (14a9c <conn_le_create_common_checks+0x58>)
   14a4a:	f01b fa1e 	bl	2fe8a <atomic_get>

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14a4e:	0740      	lsls	r0, r0, #29
   14a50:	d402      	bmi.n	14a58 <conn_le_create_common_checks+0x14>
		return -EAGAIN;
   14a52:	f06f 000a 	mvn.w	r0, #10
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
		return -EINVAL;
	}

	return 0;
}
   14a56:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   14a58:	4608      	mov	r0, r1
   14a5a:	f01b f990 	bl	2fd7e <bt_le_conn_params_valid>
   14a5e:	b910      	cbnz	r0, 14a66 <conn_le_create_common_checks+0x22>
		return -EINVAL;
   14a60:	f06f 0015 	mvn.w	r0, #21
   14a64:	e7f7      	b.n	14a56 <conn_le_create_common_checks+0x12>
   14a66:	480d      	ldr	r0, [pc, #52]	; (14a9c <conn_le_create_common_checks+0x58>)
   14a68:	f01b fa0f 	bl	2fe8a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14a6c:	0602      	lsls	r2, r0, #24
   14a6e:	d4f0      	bmi.n	14a52 <conn_le_create_common_checks+0xe>
   14a70:	480a      	ldr	r0, [pc, #40]	; (14a9c <conn_le_create_common_checks+0x58>)
   14a72:	f01b fa0a 	bl	2fe8a <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   14a76:	04c3      	lsls	r3, r0, #19
   14a78:	f3c0 3500 	ubfx	r5, r0, #12, #1
   14a7c:	d40a      	bmi.n	14a94 <conn_le_create_common_checks+0x50>
	if (!bt_id_scan_random_addr_check()) {
   14a7e:	f01b f9f0 	bl	2fe62 <bt_id_scan_random_addr_check>
   14a82:	2800      	cmp	r0, #0
   14a84:	d0ec      	beq.n	14a60 <conn_le_create_common_checks+0x1c>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   14a86:	4621      	mov	r1, r4
   14a88:	4628      	mov	r0, r5
   14a8a:	f7ff ffab 	bl	149e4 <bt_conn_exists_le>
   14a8e:	2800      	cmp	r0, #0
   14a90:	d0e1      	beq.n	14a56 <conn_le_create_common_checks+0x12>
   14a92:	e7e5      	b.n	14a60 <conn_le_create_common_checks+0x1c>
		return -EALREADY;
   14a94:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14a98:	e7dd      	b.n	14a56 <conn_le_create_common_checks+0x12>
   14a9a:	bf00      	nop
   14a9c:	2000c654 	.word	0x2000c654

00014aa0 <bt_conn_lookup_state_le>:
{
   14aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14aa2:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14aa4:	480e      	ldr	r0, [pc, #56]	; (14ae0 <bt_conn_lookup_state_le+0x40>)
{
   14aa6:	460e      	mov	r6, r1
   14aa8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14aaa:	f7ff fcdd 	bl	14468 <bt_conn_ref>
		if (!conn) {
   14aae:	4604      	mov	r4, r0
   14ab0:	b120      	cbz	r0, 14abc <bt_conn_lookup_state_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   14ab2:	7883      	ldrb	r3, [r0, #2]
   14ab4:	2b01      	cmp	r3, #1
   14ab6:	d003      	beq.n	14ac0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   14ab8:	f7ff fd00 	bl	144bc <bt_conn_unref>
	return NULL;
   14abc:	2400      	movs	r4, #0
   14abe:	e00d      	b.n	14adc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14ac0:	b136      	cbz	r6, 14ad0 <bt_conn_lookup_state_le+0x30>
   14ac2:	4632      	mov	r2, r6
   14ac4:	4629      	mov	r1, r5
   14ac6:	f01b fa46 	bl	2ff56 <bt_conn_is_peer_addr_le>
   14aca:	b908      	cbnz	r0, 14ad0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   14acc:	4620      	mov	r0, r4
   14ace:	e7f3      	b.n	14ab8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14ad0:	7aa3      	ldrb	r3, [r4, #10]
   14ad2:	42bb      	cmp	r3, r7
   14ad4:	d1fa      	bne.n	14acc <bt_conn_lookup_state_le+0x2c>
   14ad6:	7a23      	ldrb	r3, [r4, #8]
   14ad8:	42ab      	cmp	r3, r5
   14ada:	d1f7      	bne.n	14acc <bt_conn_lookup_state_le+0x2c>
}
   14adc:	4620      	mov	r0, r4
   14ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ae0:	2000d950 	.word	0x2000d950

00014ae4 <bt_conn_le_create>:
	return conn;
}

int bt_conn_le_create(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param, struct bt_conn **ret_conn)
{
   14ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ae8:	460e      	mov	r6, r1
	struct bt_conn *conn;
	int err;

	err = conn_le_create_common_checks(peer, conn_param);
   14aea:	4611      	mov	r1, r2
{
   14aec:	4680      	mov	r8, r0
   14aee:	4615      	mov	r5, r2
   14af0:	461f      	mov	r7, r3
	err = conn_le_create_common_checks(peer, conn_param);
   14af2:	f7ff ffa7 	bl	14a44 <conn_le_create_common_checks>
	if (err) {
   14af6:	4604      	mov	r4, r0
   14af8:	bb78      	cbnz	r0, 14b5a <bt_conn_le_create+0x76>

	if (!create_param_validate(create_param)) {
		return -EINVAL;
	}

	conn = conn_le_create_helper(peer, conn_param);
   14afa:	4629      	mov	r1, r5
   14afc:	4640      	mov	r0, r8
   14afe:	f01b fa01 	bl	2ff04 <conn_le_create_helper>
	if (!conn) {
   14b02:	4605      	mov	r5, r0
   14b04:	b370      	cbz	r0, 14b64 <bt_conn_le_create+0x80>
	bt_dev.create_param = *param;
   14b06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   14b0a:	4c18      	ldr	r4, [pc, #96]	; (14b6c <bt_conn_le_create+0x88>)
   14b0c:	f104 0c08 	add.w	ip, r4, #8
   14b10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   14b14:	8aa2      	ldrh	r2, [r4, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   14b16:	8a23      	ldrh	r3, [r4, #16]
	bt_dev.create_param.timeout =
   14b18:	2a00      	cmp	r2, #0
   14b1a:	bf08      	it	eq
   14b1c:	f44f 7296 	moveq.w	r2, #300	; 0x12c
   14b20:	82a2      	strh	r2, [r4, #20]
	bt_dev.create_param.interval_coded =
   14b22:	b903      	cbnz	r3, 14b26 <bt_conn_le_create+0x42>
   14b24:	89a3      	ldrh	r3, [r4, #12]
   14b26:	8223      	strh	r3, [r4, #16]
		(bt_dev.create_param.window_coded != 0) ?
   14b28:	8a63      	ldrh	r3, [r4, #18]
	bt_dev.create_param.window_coded =
   14b2a:	b903      	cbnz	r3, 14b2e <bt_conn_le_create+0x4a>
   14b2c:	89e3      	ldrh	r3, [r4, #14]
		*ret_conn = conn;
		return 0;
	}
#endif

	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   14b2e:	2106      	movs	r1, #6
   14b30:	4628      	mov	r0, r5
	bt_dev.create_param.window_coded =
   14b32:	8263      	strh	r3, [r4, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   14b34:	f7ff fcee 	bl	14514 <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   14b38:	4628      	mov	r0, r5
   14b3a:	f7fd fb67 	bl	1220c <bt_le_create_conn>
	if (err) {
   14b3e:	4604      	mov	r4, r0
   14b40:	b170      	cbz	r0, 14b60 <bt_conn_le_create+0x7c>
		conn->err = 0;
   14b42:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14b44:	4628      	mov	r0, r5
   14b46:	4631      	mov	r1, r6
		conn->err = 0;
   14b48:	726e      	strb	r6, [r5, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14b4a:	f7ff fce3 	bl	14514 <bt_conn_set_state>
		bt_conn_unref(conn);
   14b4e:	4628      	mov	r0, r5
   14b50:	f7ff fcb4 	bl	144bc <bt_conn_unref>

		bt_le_scan_update(false);
   14b54:	4630      	mov	r0, r6
   14b56:	f7fe fedb 	bl	13910 <bt_le_scan_update>
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   14b5a:	4620      	mov	r0, r4
   14b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*ret_conn = conn;
   14b60:	603d      	str	r5, [r7, #0]
	return 0;
   14b62:	e7fa      	b.n	14b5a <bt_conn_le_create+0x76>
		return -ENOMEM;
   14b64:	f06f 040b 	mvn.w	r4, #11
   14b68:	e7f7      	b.n	14b5a <bt_conn_le_create+0x76>
   14b6a:	bf00      	nop
   14b6c:	2000c580 	.word	0x2000c580

00014b70 <send_conn_le_param_update>:
{
   14b70:	b538      	push	{r3, r4, r5, lr}
   14b72:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   14b74:	4608      	mov	r0, r1
{
   14b76:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14b78:	f01b f901 	bl	2fd7e <bt_le_conn_params_valid>
   14b7c:	b338      	cbz	r0, 14bce <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14b7e:	4b15      	ldr	r3, [pc, #84]	; (14bd4 <send_conn_le_param_update+0x64>)
   14b80:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   14b84:	0799      	lsls	r1, r3, #30
   14b86:	d407      	bmi.n	14b98 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   14b88:	78e3      	ldrb	r3, [r4, #3]
   14b8a:	b173      	cbz	r3, 14baa <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   14b8c:	4629      	mov	r1, r5
   14b8e:	4620      	mov	r0, r4
}
   14b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   14b94:	f000 bb04 	b.w	151a0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14b98:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   14b9c:	079a      	lsls	r2, r3, #30
   14b9e:	d5f3      	bpl.n	14b88 <send_conn_le_param_update+0x18>
   14ba0:	1d20      	adds	r0, r4, #4
   14ba2:	f01b f972 	bl	2fe8a <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   14ba6:	0543      	lsls	r3, r0, #21
   14ba8:	d4ee      	bmi.n	14b88 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   14baa:	4629      	mov	r1, r5
   14bac:	4620      	mov	r0, r4
   14bae:	f01b f9f4 	bl	2ff9a <bt_conn_le_conn_update>
		if (rc == 0) {
   14bb2:	b958      	cbnz	r0, 14bcc <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   14bb4:	882b      	ldrh	r3, [r5, #0]
   14bb6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   14bba:	886b      	ldrh	r3, [r5, #2]
   14bbc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   14bc0:	88ab      	ldrh	r3, [r5, #4]
   14bc2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   14bc6:	88eb      	ldrh	r3, [r5, #6]
   14bc8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   14bcc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14bce:	f06f 0015 	mvn.w	r0, #21
   14bd2:	e7fb      	b.n	14bcc <send_conn_le_param_update+0x5c>
   14bd4:	2000c580 	.word	0x2000c580

00014bd8 <deferred_work>:
{
   14bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bdc:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   14bde:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   14be2:	4604      	mov	r4, r0
   14be4:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   14be6:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   14bea:	bb8b      	cbnz	r3, 14c50 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   14bec:	4630      	mov	r0, r6
   14bee:	f01b fa31 	bl	30054 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   14bf2:	4b37      	ldr	r3, [pc, #220]	; (14cd0 <deferred_work+0xf8>)
   14bf4:	681d      	ldr	r5, [r3, #0]
   14bf6:	b99d      	cbnz	r5, 14c20 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14bf8:	4d36      	ldr	r5, [pc, #216]	; (14cd4 <deferred_work+0xfc>)
   14bfa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14cd8 <deferred_work+0x100>
   14bfe:	4545      	cmp	r5, r8
   14c00:	d91e      	bls.n	14c40 <deferred_work+0x68>
   14c02:	4936      	ldr	r1, [pc, #216]	; (14cdc <deferred_work+0x104>)
   14c04:	f240 53cb 	movw	r3, #1483	; 0x5cb
   14c08:	4a35      	ldr	r2, [pc, #212]	; (14ce0 <deferred_work+0x108>)
   14c0a:	4836      	ldr	r0, [pc, #216]	; (14ce4 <deferred_work+0x10c>)
   14c0c:	f019 fea2 	bl	2e954 <assert_print>
   14c10:	4835      	ldr	r0, [pc, #212]	; (14ce8 <deferred_work+0x110>)
   14c12:	f019 fe9f 	bl	2e954 <assert_print>
   14c16:	f240 51cb 	movw	r1, #1483	; 0x5cb
   14c1a:	4831      	ldr	r0, [pc, #196]	; (14ce0 <deferred_work+0x108>)
   14c1c:	f019 fe93 	bl	2e946 <assert_post_action>
		if (cb->disconnected) {
   14c20:	686b      	ldr	r3, [r5, #4]
   14c22:	b11b      	cbz	r3, 14c2c <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   14c24:	4630      	mov	r0, r6
   14c26:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   14c2a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14c2c:	692d      	ldr	r5, [r5, #16]
   14c2e:	e7e2      	b.n	14bf6 <deferred_work+0x1e>
		if (cb->disconnected) {
   14c30:	686b      	ldr	r3, [r5, #4]
   14c32:	b11b      	cbz	r3, 14c3c <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   14c34:	4630      	mov	r0, r6
   14c36:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   14c3a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14c3c:	3514      	adds	r5, #20
   14c3e:	e7de      	b.n	14bfe <deferred_work+0x26>
   14c40:	d3f6      	bcc.n	14c30 <deferred_work+0x58>
		bt_conn_unref(conn);
   14c42:	4630      	mov	r0, r6
   14c44:	f7ff fc3a 	bl	144bc <bt_conn_unref>
}
   14c48:	3708      	adds	r7, #8
   14c4a:	46bd      	mov	sp, r7
   14c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   14c50:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   14c54:	2b01      	cmp	r3, #1
   14c56:	d1f7      	bne.n	14c48 <deferred_work+0x70>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14c58:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   14c5c:	b913      	cbnz	r3, 14c64 <deferred_work+0x8c>
		bt_le_create_conn_cancel();
   14c5e:	f7fd fb25 	bl	122ac <bt_le_create_conn_cancel>
		return;
   14c62:	e7f1      	b.n	14c48 <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   14c64:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   14c68:	e8d5 3fef 	ldaex	r3, [r5]
   14c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   14c70:	e8c5 2fe1 	stlex	r1, r2, [r5]
   14c74:	2900      	cmp	r1, #0
   14c76:	d1f7      	bne.n	14c68 <deferred_work+0x90>
   14c78:	059b      	lsls	r3, r3, #22
   14c7a:	d510      	bpl.n	14c9e <deferred_work+0xc6>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   14c7e:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14c80:	603b      	str	r3, [r7, #0]
   14c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   14c84:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14c86:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   14c88:	f7ff ff72 	bl	14b70 <send_conn_le_param_update>
		if (!err) {
   14c8c:	b980      	cbnz	r0, 14cb0 <deferred_work+0xd8>
   14c8e:	e8d5 3fef 	ldaex	r3, [r5]
   14c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   14c96:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14c9a:	2a00      	cmp	r2, #0
   14c9c:	d1f7      	bne.n	14c8e <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c9e:	e8d5 3fef 	ldaex	r3, [r5]
   14ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14ca6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14caa:	2a00      	cmp	r2, #0
   14cac:	d0cc      	beq.n	14c48 <deferred_work+0x70>
   14cae:	e7f6      	b.n	14c9e <deferred_work+0xc6>
			LOG_WRN("Send LE param update failed (err %d)", err);
   14cb0:	466c      	mov	r4, sp
   14cb2:	b088      	sub	sp, #32
   14cb4:	466a      	mov	r2, sp
   14cb6:	4b0d      	ldr	r3, [pc, #52]	; (14cec <deferred_work+0x114>)
   14cb8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14cbc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14cc0:	2303      	movs	r3, #3
   14cc2:	480b      	ldr	r0, [pc, #44]	; (14cf0 <deferred_work+0x118>)
   14cc4:	f842 3f10 	str.w	r3, [r2, #16]!
   14cc8:	f01b f8e2 	bl	2fe90 <z_log_msg_static_create.constprop.0>
   14ccc:	46a5      	mov	sp, r4
   14cce:	e7e6      	b.n	14c9e <deferred_work+0xc6>
   14cd0:	2000fbbc 	.word	0x2000fbbc
   14cd4:	000363b0 	.word	0x000363b0
   14cd8:	000363b0 	.word	0x000363b0
   14cdc:	0003a604 	.word	0x0003a604
   14ce0:	0003a5d4 	.word	0x0003a5d4
   14ce4:	000381c3 	.word	0x000381c3
   14ce8:	000387c1 	.word	0x000387c1
   14cec:	0003a928 	.word	0x0003a928
   14cf0:	000363f8 	.word	0x000363f8

00014cf4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   14cf4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14cf6:	4801      	ldr	r0, [pc, #4]	; (14cfc <bt_conn_create_frag_timeout+0x8>)
   14cf8:	f7ff bd4a 	b.w	14790 <bt_conn_create_pdu_timeout>
   14cfc:	2000d11c 	.word	0x2000d11c

00014d00 <bt_conn_process_tx>:
{
   14d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14d04:	7a83      	ldrb	r3, [r0, #10]
{
   14d06:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14d08:	b973      	cbnz	r3, 14d28 <bt_conn_process_tx+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14d0a:	1d03      	adds	r3, r0, #4
   14d0c:	e8d3 2fef 	ldaex	r2, [r3]
   14d10:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   14d14:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14d18:	2c00      	cmp	r4, #0
   14d1a:	d1f7      	bne.n	14d0c <bt_conn_process_tx+0xc>
   14d1c:	0653      	lsls	r3, r2, #25
   14d1e:	d503      	bpl.n	14d28 <bt_conn_process_tx+0x28>
}
   14d20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   14d24:	f7ff ba00 	b.w	14128 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   14d28:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14d2c:	f01f ff7d 	bl	34c2a <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   14d30:	4604      	mov	r4, r0
   14d32:	b960      	cbnz	r0, 14d4e <bt_conn_process_tx+0x4e>
   14d34:	f44f 735d 	mov.w	r3, #884	; 0x374
   14d38:	4a32      	ldr	r2, [pc, #200]	; (14e04 <bt_conn_process_tx+0x104>)
   14d3a:	4933      	ldr	r1, [pc, #204]	; (14e08 <bt_conn_process_tx+0x108>)
   14d3c:	4833      	ldr	r0, [pc, #204]	; (14e0c <bt_conn_process_tx+0x10c>)
   14d3e:	f019 fe09 	bl	2e954 <assert_print>
   14d42:	4040      	eors	r0, r0
   14d44:	f380 8811 	msr	BASEPRI, r0
   14d48:	f04f 0003 	mov.w	r0, #3
   14d4c:	df02      	svc	2
	buf = net_buf_ref(buf);
   14d4e:	4620      	mov	r0, r4
   14d50:	f003 fb92 	bl	18478 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   14d54:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 14e10 <bt_conn_process_tx+0x110>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   14d58:	8a02      	ldrh	r2, [r0, #16]
   14d5a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
   14d5e:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   14d60:	429a      	cmp	r2, r3
   14d62:	7f02      	ldrb	r2, [r0, #28]
   14d64:	d807      	bhi.n	14d76 <bt_conn_process_tx+0x76>
   14d66:	b932      	cbnz	r2, 14d76 <bt_conn_process_tx+0x76>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   14d68:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   14d6a:	4621      	mov	r1, r4
   14d6c:	4628      	mov	r0, r5
   14d6e:	f7ff f8ad 	bl	13ecc <send_frag>
   14d72:	4606      	mov	r6, r0
   14d74:	e030      	b.n	14dd8 <bt_conn_process_tx+0xd8>
	if (tx_data(buf)->is_cont) {
   14d76:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   14d78:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   14d7c:	8a22      	ldrh	r2, [r4, #16]
   14d7e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   14d82:	429a      	cmp	r2, r3
   14d84:	d804      	bhi.n	14d90 <bt_conn_process_tx+0x90>
	tx_data(buf)->is_cont = true;
   14d86:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
   14d88:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
   14d8a:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   14d8c:	2303      	movs	r3, #3
   14d8e:	e7ec      	b.n	14d6a <bt_conn_process_tx+0x6a>
		frag = bt_conn_create_frag(0);
   14d90:	f04f 33ff 	mov.w	r3, #4294967295
   14d94:	f04f 32ff 	mov.w	r2, #4294967295
   14d98:	2000      	movs	r0, #0
   14d9a:	f7ff ffab 	bl	14cf4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14d9e:	7aab      	ldrb	r3, [r5, #10]
		frag = bt_conn_create_frag(0);
   14da0:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14da2:	2b07      	cmp	r3, #7
   14da4:	d006      	beq.n	14db4 <bt_conn_process_tx+0xb4>
		net_buf_unref(frag);
   14da6:	f003 fb23 	bl	183f0 <net_buf_unref>
	net_buf_unref(buf);
   14daa:	4620      	mov	r0, r4
}
   14dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   14db0:	f003 bb1e 	b.w	183f0 <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
   14db4:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
   14db6:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   14dba:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   14dbe:	463b      	mov	r3, r7
   14dc0:	4621      	mov	r1, r4
   14dc2:	4628      	mov	r0, r5
   14dc4:	f7ff f882 	bl	13ecc <send_frag>
		if (err) {
   14dc8:	4606      	mov	r6, r0
   14dca:	b1b8      	cbz	r0, 14dfc <bt_conn_process_tx+0xfc>
			tx_data(buf)->is_cont = flags != FRAG_START;
   14dcc:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
   14dd0:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
   14dd2:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   14dd4:	f003 fb0c 	bl	183f0 <net_buf_unref>
	net_buf_unref(buf);
   14dd8:	4620      	mov	r0, r4
   14dda:	f003 fb09 	bl	183f0 <net_buf_unref>
	if (err  == -EIO) {
   14dde:	3605      	adds	r6, #5
   14de0:	d10e      	bne.n	14e00 <bt_conn_process_tx+0x100>
		tx_data(buf)->tx = NULL;
   14de2:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14de4:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
   14de6:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14de8:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   14dea:	f003 fb01 	bl	183f0 <net_buf_unref>
		if (tx) {
   14dee:	b13e      	cbz	r6, 14e00 <bt_conn_process_tx+0x100>
			conn_tx_destroy(conn, tx);
   14df0:	4631      	mov	r1, r6
   14df2:	4628      	mov	r0, r5
}
   14df4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   14df8:	f7ff b842 	b.w	13e80 <conn_tx_destroy>
		flags = FRAG_CONT;
   14dfc:	2701      	movs	r7, #1
   14dfe:	e7bd      	b.n	14d7c <bt_conn_process_tx+0x7c>
}
   14e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e04:	0003a5d4 	.word	0x0003a5d4
   14e08:	0003b28a 	.word	0x0003b28a
   14e0c:	000381c3 	.word	0x000381c3
   14e10:	2000c580 	.word	0x2000c580

00014e14 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   14e14:	b910      	cbnz	r0, 14e1c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   14e16:	4802      	ldr	r0, [pc, #8]	; (14e20 <bt_conn_lookup_index+0xc>)
   14e18:	f7ff bb26 	b.w	14468 <bt_conn_ref>
}
   14e1c:	2000      	movs	r0, #0
   14e1e:	4770      	bx	lr
   14e20:	2000d950 	.word	0x2000d950

00014e24 <bt_conn_init>:

int bt_conn_init(void)
{
   14e24:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   14e26:	4815      	ldr	r0, [pc, #84]	; (14e7c <bt_conn_init+0x58>)
   14e28:	f01f fedd 	bl	34be6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14e2c:	4914      	ldr	r1, [pc, #80]	; (14e80 <bt_conn_init+0x5c>)
   14e2e:	4813      	ldr	r0, [pc, #76]	; (14e7c <bt_conn_init+0x58>)
   14e30:	f01f fee6 	bl	34c00 <k_queue_append>
   14e34:	4913      	ldr	r1, [pc, #76]	; (14e84 <bt_conn_init+0x60>)
   14e36:	4811      	ldr	r0, [pc, #68]	; (14e7c <bt_conn_init+0x58>)
   14e38:	f01f fee2 	bl	34c00 <k_queue_append>
   14e3c:	4912      	ldr	r1, [pc, #72]	; (14e88 <bt_conn_init+0x64>)
   14e3e:	480f      	ldr	r0, [pc, #60]	; (14e7c <bt_conn_init+0x58>)
   14e40:	f01f fede 	bl	34c00 <k_queue_append>
	}

	bt_att_init();
   14e44:	f001 f994 	bl	16170 <bt_att_init>

	err = bt_smp_init();
   14e48:	f01c f9ad 	bl	311a6 <bt_smp_init>
	if (err) {
   14e4c:	4605      	mov	r5, r0
   14e4e:	b998      	cbnz	r0, 14e78 <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
   14e50:	f01b f95b 	bl	3010a <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14e54:	480d      	ldr	r0, [pc, #52]	; (14e8c <bt_conn_init+0x68>)
   14e56:	f7ff fb07 	bl	14468 <bt_conn_ref>

			if (!conn) {
   14e5a:	4604      	mov	r4, r0
   14e5c:	b160      	cbz	r0, 14e78 <bt_conn_init+0x54>
   14e5e:	3004      	adds	r0, #4
   14e60:	f01b f813 	bl	2fe8a <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   14e64:	07c3      	lsls	r3, r0, #31
   14e66:	d504      	bpl.n	14e72 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn,
   14e68:	2102      	movs	r1, #2
   14e6a:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   14e6c:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   14e6e:	f7ff fb51 	bl	14514 <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   14e72:	4620      	mov	r0, r4
   14e74:	f7ff fb22 	bl	144bc <bt_conn_unref>
		}
	}

	return 0;
}
   14e78:	4628      	mov	r0, r5
   14e7a:	bd38      	pop	{r3, r4, r5, pc}
   14e7c:	2000d030 	.word	0x2000d030
   14e80:	2000fb8c 	.word	0x2000fb8c
   14e84:	2000fb9c 	.word	0x2000fb9c
   14e88:	2000fbac 	.word	0x2000fbac
   14e8c:	2000d950 	.word	0x2000d950

00014e90 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14e90:	b580      	push	{r7, lr}
   14e92:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   14e94:	b088      	sub	sp, #32
   14e96:	466a      	mov	r2, sp
   14e98:	4b06      	ldr	r3, [pc, #24]	; (14eb4 <l2cap_create_le_sig_pdu.part.0+0x24>)
   14e9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e9e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14ea2:	2303      	movs	r3, #3
   14ea4:	4804      	ldr	r0, [pc, #16]	; (14eb8 <l2cap_create_le_sig_pdu.part.0+0x28>)
   14ea6:	f842 3f10 	str.w	r3, [r2, #16]!
   14eaa:	f01b f89f 	bl	2ffec <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   14eae:	2000      	movs	r0, #0
   14eb0:	46bd      	mov	sp, r7
   14eb2:	bd80      	pop	{r7, pc}
   14eb4:	0003a9c6 	.word	0x0003a9c6
   14eb8:	00036438 	.word	0x00036438

00014ebc <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   14ebc:	b580      	push	{r7, lr}
   14ebe:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   14ec0:	b088      	sub	sp, #32
   14ec2:	466a      	mov	r2, sp
   14ec4:	4b07      	ldr	r3, [pc, #28]	; (14ee4 <l2cap_accept.part.0+0x28>)
   14ec6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14eca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14ece:	2303      	movs	r3, #3
   14ed0:	4805      	ldr	r0, [pc, #20]	; (14ee8 <l2cap_accept.part.0+0x2c>)
   14ed2:	f842 3f10 	str.w	r3, [r2, #16]!
   14ed6:	f01b f889 	bl	2ffec <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   14eda:	f06f 000b 	mvn.w	r0, #11
   14ede:	46bd      	mov	sp, r7
   14ee0:	bd80      	pop	{r7, pc}
   14ee2:	bf00      	nop
   14ee4:	0003a9ee 	.word	0x0003a9ee
   14ee8:	00036438 	.word	0x00036438

00014eec <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   14eec:	4b04      	ldr	r3, [pc, #16]	; (14f00 <l2cap_accept+0x14>)
   14eee:	681a      	ldr	r2, [r3, #0]
   14ef0:	b10a      	cbz	r2, 14ef6 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   14ef2:	f7ff bfe3 	b.w	14ebc <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   14ef6:	4803      	ldr	r0, [pc, #12]	; (14f04 <l2cap_accept+0x18>)
   14ef8:	6058      	str	r0, [r3, #4]
}
   14efa:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   14efc:	600b      	str	r3, [r1, #0]
}
   14efe:	4770      	bx	lr
   14f00:	2000fbc0 	.word	0x2000fbc0
   14f04:	00036ba8 	.word	0x00036ba8

00014f08 <bt_l2cap_connected>:
{
   14f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14f0a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14f0c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14f0e:	4d27      	ldr	r5, [pc, #156]	; (14fac <bt_l2cap_connected+0xa4>)
   14f10:	4f27      	ldr	r7, [pc, #156]	; (14fb0 <bt_l2cap_connected+0xa8>)
   14f12:	42bd      	cmp	r5, r7
   14f14:	d946      	bls.n	14fa4 <bt_l2cap_connected+0x9c>
   14f16:	4927      	ldr	r1, [pc, #156]	; (14fb4 <bt_l2cap_connected+0xac>)
   14f18:	f240 1381 	movw	r3, #385	; 0x181
   14f1c:	4a26      	ldr	r2, [pc, #152]	; (14fb8 <bt_l2cap_connected+0xb0>)
   14f1e:	4827      	ldr	r0, [pc, #156]	; (14fbc <bt_l2cap_connected+0xb4>)
   14f20:	f019 fd18 	bl	2e954 <assert_print>
   14f24:	4826      	ldr	r0, [pc, #152]	; (14fc0 <bt_l2cap_connected+0xb8>)
   14f26:	f019 fd15 	bl	2e954 <assert_print>
   14f2a:	f240 1181 	movw	r1, #385	; 0x181
   14f2e:	4822      	ldr	r0, [pc, #136]	; (14fb8 <bt_l2cap_connected+0xb0>)
   14f30:	f019 fd09 	bl	2e946 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   14f34:	4620      	mov	r0, r4
   14f36:	686b      	ldr	r3, [r5, #4]
   14f38:	a901      	add	r1, sp, #4
   14f3a:	4798      	blx	r3
   14f3c:	2800      	cmp	r0, #0
   14f3e:	db2c      	blt.n	14f9a <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   14f40:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   14f42:	882a      	ldrh	r2, [r5, #0]
   14f44:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   14f46:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14f48:	68a8      	ldr	r0, [r5, #8]
   14f4a:	f103 0210 	add.w	r2, r3, #16
   14f4e:	e8d2 1fef 	ldaex	r1, [r2]
   14f52:	e8c2 6fec 	stlex	ip, r6, [r2]
   14f56:	f1bc 0f00 	cmp.w	ip, #0
   14f5a:	d1f8      	bne.n	14f4e <bt_l2cap_connected+0x46>
	parent->next = child;
   14f5c:	609e      	str	r6, [r3, #8]
	return list->tail;
   14f5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   14f60:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   14f64:	b9d9      	cbnz	r1, 14f9e <bt_l2cap_connected+0x96>
	list->head = node;
   14f66:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   14f6a:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   14f6c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   14f6e:	9801      	ldr	r0, [sp, #4]
   14f70:	6843      	ldr	r3, [r0, #4]
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	b103      	cbz	r3, 14f78 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   14f76:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	3310      	adds	r3, #16
   14f7c:	e8d3 1fef 	ldaex	r1, [r3]
   14f80:	f041 0101 	orr.w	r1, r1, #1
   14f84:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14f88:	2a00      	cmp	r2, #0
   14f8a:	d1f7      	bne.n	14f7c <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   14f8c:	9801      	ldr	r0, [sp, #4]
   14f8e:	6843      	ldr	r3, [r0, #4]
   14f90:	69db      	ldr	r3, [r3, #28]
   14f92:	b113      	cbz	r3, 14f9a <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   14f94:	f100 0110 	add.w	r1, r0, #16
   14f98:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14f9a:	350c      	adds	r5, #12
   14f9c:	e7b9      	b.n	14f12 <bt_l2cap_connected+0xa>
	parent->next = child;
   14f9e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14fa0:	65a2      	str	r2, [r4, #88]	; 0x58
}
   14fa2:	e7e2      	b.n	14f6a <bt_l2cap_connected+0x62>
   14fa4:	d3c6      	bcc.n	14f34 <bt_l2cap_connected+0x2c>
}
   14fa6:	b003      	add	sp, #12
   14fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14faa:	bf00      	nop
   14fac:	0003638c 	.word	0x0003638c
   14fb0:	000363b0 	.word	0x000363b0
   14fb4:	0003aa46 	.word	0x0003aa46
   14fb8:	0003aa15 	.word	0x0003aa15
   14fbc:	000381c3 	.word	0x000381c3
   14fc0:	000387c1 	.word	0x000387c1

00014fc4 <l2cap_recv>:
{
   14fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fc8:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   14fca:	8a0b      	ldrh	r3, [r1, #16]
{
   14fcc:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   14fce:	2b03      	cmp	r3, #3
{
   14fd0:	460d      	mov	r5, r1
   14fd2:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   14fd4:	d80b      	bhi.n	14fee <l2cap_recv+0x2a>
		LOG_ERR("Too small L2CAP signaling PDU");
   14fd6:	4b4b      	ldr	r3, [pc, #300]	; (15104 <l2cap_recv+0x140>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   14fd8:	617b      	str	r3, [r7, #20]
   14fda:	2302      	movs	r3, #2
   14fdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14fe0:	613b      	str	r3, [r7, #16]
   14fe2:	f107 0210 	add.w	r2, r7, #16
   14fe6:	4848      	ldr	r0, [pc, #288]	; (15108 <l2cap_recv+0x144>)
   14fe8:	f01b f800 	bl	2ffec <z_log_msg_static_create.constprop.0>
		return 0;
   14fec:	e019      	b.n	15022 <l2cap_recv+0x5e>
	return net_buf_simple_pull_mem(&buf->b, len);
   14fee:	2104      	movs	r1, #4
   14ff0:	f105 000c 	add.w	r0, r5, #12
   14ff4:	f003 fb22 	bl	1863c <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14ff8:	8843      	ldrh	r3, [r0, #2]
   14ffa:	4604      	mov	r4, r0
	if (buf->len != len) {
   14ffc:	8a28      	ldrh	r0, [r5, #16]
   14ffe:	4298      	cmp	r0, r3
   15000:	d014      	beq.n	1502c <l2cap_recv+0x68>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   15002:	466c      	mov	r4, sp
   15004:	b088      	sub	sp, #32
   15006:	aa02      	add	r2, sp, #8
   15008:	61d3      	str	r3, [r2, #28]
   1500a:	2304      	movs	r3, #4
   1500c:	493f      	ldr	r1, [pc, #252]	; (1510c <l2cap_recv+0x148>)
   1500e:	e9c2 1005 	strd	r1, r0, [r2, #20]
   15012:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15016:	483c      	ldr	r0, [pc, #240]	; (15108 <l2cap_recv+0x144>)
   15018:	f842 3f10 	str.w	r3, [r2, #16]!
   1501c:	f01a ffe6 	bl	2ffec <z_log_msg_static_create.constprop.0>
   15020:	46a5      	mov	sp, r4
}
   15022:	2000      	movs	r0, #0
   15024:	3718      	adds	r7, #24
   15026:	46bd      	mov	sp, r7
   15028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   1502c:	7861      	ldrb	r1, [r4, #1]
   1502e:	b909      	cbnz	r1, 15034 <l2cap_recv+0x70>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15030:	4b37      	ldr	r3, [pc, #220]	; (15110 <l2cap_recv+0x14c>)
   15032:	e7d1      	b.n	14fd8 <l2cap_recv+0x14>
	switch (hdr->code) {
   15034:	7823      	ldrb	r3, [r4, #0]
   15036:	2b12      	cmp	r3, #18
   15038:	d019      	beq.n	1506e <l2cap_recv+0xaa>
   1503a:	2b13      	cmp	r3, #19
   1503c:	d013      	beq.n	15066 <l2cap_recv+0xa2>
   1503e:	2b01      	cmp	r3, #1
   15040:	d0ef      	beq.n	15022 <l2cap_recv+0x5e>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15042:	466d      	mov	r5, sp
   15044:	b088      	sub	sp, #32
   15046:	aa02      	add	r2, sp, #8
   15048:	4932      	ldr	r1, [pc, #200]	; (15114 <l2cap_recv+0x150>)
   1504a:	482f      	ldr	r0, [pc, #188]	; (15108 <l2cap_recv+0x144>)
	switch (hdr->code) {
   1504c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15050:	2303      	movs	r3, #3
   15052:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15056:	f842 3f10 	str.w	r3, [r2, #16]!
   1505a:	f01a ffc7 	bl	2ffec <z_log_msg_static_create.constprop.0>
   1505e:	46ad      	mov	sp, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   15060:	7861      	ldrb	r1, [r4, #1]
   15062:	6830      	ldr	r0, [r6, #0]
   15064:	e01b      	b.n	1509e <l2cap_recv+0xda>
	if (buf->len < sizeof(*rsp)) {
   15066:	2801      	cmp	r0, #1
   15068:	d8db      	bhi.n	15022 <l2cap_recv+0x5e>
		LOG_ERR("Too small LE conn param rsp");
   1506a:	4b2b      	ldr	r3, [pc, #172]	; (15118 <l2cap_recv+0x154>)
   1506c:	e7b4      	b.n	14fd8 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
   1506e:	2807      	cmp	r0, #7
   15070:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   15072:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   15074:	d801      	bhi.n	1507a <l2cap_recv+0xb6>
		LOG_ERR("Too small LE conn update param req");
   15076:	4b29      	ldr	r3, [pc, #164]	; (1511c <l2cap_recv+0x158>)
   15078:	e7ae      	b.n	14fd8 <l2cap_recv+0x14>
	if (conn->state != BT_CONN_CONNECTED) {
   1507a:	7aa3      	ldrb	r3, [r4, #10]
   1507c:	2b07      	cmp	r3, #7
   1507e:	d008      	beq.n	15092 <l2cap_recv+0xce>
		LOG_WRN("Not connected");
   15080:	4b27      	ldr	r3, [pc, #156]	; (15120 <l2cap_recv+0x15c>)
   15082:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15086:	617b      	str	r3, [r7, #20]
   15088:	2302      	movs	r3, #2
   1508a:	f107 0210 	add.w	r2, r7, #16
   1508e:	613b      	str	r3, [r7, #16]
   15090:	e7a9      	b.n	14fe6 <l2cap_recv+0x22>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   15092:	f894 8003 	ldrb.w	r8, [r4, #3]
   15096:	f1b8 0f00 	cmp.w	r8, #0
   1509a:	d003      	beq.n	150a4 <l2cap_recv+0xe0>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1509c:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1509e:	f01b f80d 	bl	300bc <l2cap_send_reject.constprop.0>
		break;
   150a2:	e7be      	b.n	15022 <l2cap_recv+0x5e>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   150a4:	8813      	ldrh	r3, [r2, #0]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   150a6:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   150a8:	803b      	strh	r3, [r7, #0]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   150aa:	8853      	ldrh	r3, [r2, #2]
   150ac:	807b      	strh	r3, [r7, #2]
	param.latency = sys_le16_to_cpu(req->latency);
   150ae:	8893      	ldrh	r3, [r2, #4]
   150b0:	80bb      	strh	r3, [r7, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
   150b2:	88d3      	ldrh	r3, [r2, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   150b4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   150b6:	80fb      	strh	r3, [r7, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   150b8:	f01a ff9b 	bl	2fff2 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   150bc:	4605      	mov	r5, r0
   150be:	2800      	cmp	r0, #0
   150c0:	d0af      	beq.n	15022 <l2cap_recv+0x5e>
	accepted = le_param_req(conn, &param);
   150c2:	4639      	mov	r1, r7
   150c4:	4620      	mov	r0, r4
   150c6:	f7ff fbfd 	bl	148c4 <le_param_req>
   150ca:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   150cc:	2102      	movs	r1, #2
   150ce:	f105 000c 	add.w	r0, r5, #12
   150d2:	f003 fad1 	bl	18678 <net_buf_simple_add>
	if (accepted) {
   150d6:	f086 0301 	eor.w	r3, r6, #1
   150da:	b2db      	uxtb	r3, r3
   150dc:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   150de:	462a      	mov	r2, r5
   150e0:	4643      	mov	r3, r8
   150e2:	2105      	movs	r1, #5
   150e4:	4620      	mov	r0, r4
   150e6:	f8cd 8000 	str.w	r8, [sp]
   150ea:	f01a ffce 	bl	3008a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   150ee:	b110      	cbz	r0, 150f6 <l2cap_recv+0x132>
		net_buf_unref(buf);
   150f0:	4628      	mov	r0, r5
   150f2:	f003 f97d 	bl	183f0 <net_buf_unref>
	if (accepted) {
   150f6:	2e00      	cmp	r6, #0
   150f8:	d093      	beq.n	15022 <l2cap_recv+0x5e>
		bt_conn_le_conn_update(conn, &param);
   150fa:	4639      	mov	r1, r7
   150fc:	4620      	mov	r0, r4
   150fe:	f01a ff4c 	bl	2ff9a <bt_conn_le_conn_update>
   15102:	e78e      	b.n	15022 <l2cap_recv+0x5e>
   15104:	0003aa6d 	.word	0x0003aa6d
   15108:	00036438 	.word	0x00036438
   1510c:	0003aa8b 	.word	0x0003aa8b
   15110:	0003aaac 	.word	0x0003aaac
   15114:	0003ab1a 	.word	0x0003ab1a
   15118:	0003aacd 	.word	0x0003aacd
   1511c:	0003aae9 	.word	0x0003aae9
   15120:	0003ab0c 	.word	0x0003ab0c

00015124 <bt_l2cap_recv>:
{
   15124:	b5b0      	push	{r4, r5, r7, lr}
   15126:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15128:	8a0b      	ldrh	r3, [r1, #16]
{
   1512a:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1512c:	2b03      	cmp	r3, #3
{
   1512e:	460c      	mov	r4, r1
   15130:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15132:	d810      	bhi.n	15156 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15134:	4b17      	ldr	r3, [pc, #92]	; (15194 <bt_l2cap_recv+0x70>)
   15136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1513a:	617b      	str	r3, [r7, #20]
   1513c:	2302      	movs	r3, #2
   1513e:	4816      	ldr	r0, [pc, #88]	; (15198 <bt_l2cap_recv+0x74>)
   15140:	f107 0210 	add.w	r2, r7, #16
   15144:	613b      	str	r3, [r7, #16]
   15146:	f01a ff51 	bl	2ffec <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   1514a:	4620      	mov	r0, r4
   1514c:	f003 f950 	bl	183f0 <net_buf_unref>
}
   15150:	3718      	adds	r7, #24
   15152:	46bd      	mov	sp, r7
   15154:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15156:	2104      	movs	r1, #4
   15158:	f104 000c 	add.w	r0, r4, #12
   1515c:	f003 fa6e 	bl	1863c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15160:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15162:	4628      	mov	r0, r5
   15164:	f01a ffc8 	bl	300f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15168:	b978      	cbnz	r0, 1518a <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1516a:	466d      	mov	r5, sp
   1516c:	b088      	sub	sp, #32
   1516e:	466a      	mov	r2, sp
   15170:	4b0a      	ldr	r3, [pc, #40]	; (1519c <bt_l2cap_recv+0x78>)
   15172:	4809      	ldr	r0, [pc, #36]	; (15198 <bt_l2cap_recv+0x74>)
   15174:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15178:	2303      	movs	r3, #3
   1517a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1517e:	f842 3f10 	str.w	r3, [r2, #16]!
   15182:	f01a ff33 	bl	2ffec <z_log_msg_static_create.constprop.0>
   15186:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   15188:	e7df      	b.n	1514a <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1518a:	6843      	ldr	r3, [r0, #4]
   1518c:	4621      	mov	r1, r4
   1518e:	695b      	ldr	r3, [r3, #20]
   15190:	4798      	blx	r3
   15192:	e7da      	b.n	1514a <bt_l2cap_recv+0x26>
   15194:	0003ab42 	.word	0x0003ab42
   15198:	00036438 	.word	0x00036438
   1519c:	0003ab5f 	.word	0x0003ab5f

000151a0 <bt_l2cap_update_conn_param>:
{
   151a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   151a2:	4b17      	ldr	r3, [pc, #92]	; (15200 <bt_l2cap_update_conn_param+0x60>)
{
   151a4:	460e      	mov	r6, r1
	ident++;
   151a6:	7819      	ldrb	r1, [r3, #0]
{
   151a8:	4605      	mov	r5, r0
	ident++;
   151aa:	3101      	adds	r1, #1
   151ac:	b2c9      	uxtb	r1, r1
   151ae:	2901      	cmp	r1, #1
   151b0:	bf38      	it	cc
   151b2:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   151b4:	2208      	movs	r2, #8
   151b6:	2012      	movs	r0, #18
	ident++;
   151b8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   151ba:	f01a ff1a 	bl	2fff2 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   151be:	4604      	mov	r4, r0
   151c0:	b1d0      	cbz	r0, 151f8 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   151c2:	2108      	movs	r1, #8
   151c4:	300c      	adds	r0, #12
   151c6:	f003 fa57 	bl	18678 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   151ca:	8833      	ldrh	r3, [r6, #0]
   151cc:	4622      	mov	r2, r4
   151ce:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   151d0:	8873      	ldrh	r3, [r6, #2]
   151d2:	2105      	movs	r1, #5
   151d4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   151d6:	88b3      	ldrh	r3, [r6, #4]
   151d8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   151da:	88f3      	ldrh	r3, [r6, #6]
   151dc:	80c3      	strh	r3, [r0, #6]
   151de:	2300      	movs	r3, #0
   151e0:	4628      	mov	r0, r5
   151e2:	9300      	str	r3, [sp, #0]
   151e4:	f01a ff51 	bl	3008a <bt_l2cap_send_cb>
	if (err) {
   151e8:	4605      	mov	r5, r0
   151ea:	b110      	cbz	r0, 151f2 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   151ec:	4620      	mov	r0, r4
   151ee:	f003 f8ff 	bl	183f0 <net_buf_unref>
}
   151f2:	4628      	mov	r0, r5
   151f4:	b002      	add	sp, #8
   151f6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   151f8:	f06f 050b 	mvn.w	r5, #11
   151fc:	e7f9      	b.n	151f2 <bt_l2cap_update_conn_param+0x52>
   151fe:	bf00      	nop
   15200:	20011291 	.word	0x20011291

00015204 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15204:	2823      	cmp	r0, #35	; 0x23
   15206:	d81f      	bhi.n	15248 <att_op_get_type+0x44>
   15208:	281a      	cmp	r0, #26
   1520a:	d804      	bhi.n	15216 <att_op_get_type+0x12>
   1520c:	1e43      	subs	r3, r0, #1
   1520e:	2b18      	cmp	r3, #24
   15210:	d90e      	bls.n	15230 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15212:	2006      	movs	r0, #6
   15214:	4770      	bx	lr
	switch (op) {
   15216:	f1a0 031b 	sub.w	r3, r0, #27
   1521a:	2b08      	cmp	r3, #8
   1521c:	d81e      	bhi.n	1525c <att_op_get_type+0x58>
   1521e:	e8df f003 	tbb	[pc, r3]
   15222:	1d05      	.short	0x1d05
   15224:	191d231b 	.word	0x191d231b
   15228:	1d25      	.short	0x1d25
   1522a:	05          	.byte	0x05
   1522b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1522c:	2003      	movs	r0, #3
   1522e:	4770      	bx	lr
   15230:	2301      	movs	r3, #1
	switch (op) {
   15232:	4a0f      	ldr	r2, [pc, #60]	; (15270 <att_op_get_type+0x6c>)
   15234:	4083      	lsls	r3, r0
   15236:	401a      	ands	r2, r3
   15238:	b9c2      	cbnz	r2, 1526c <att_op_get_type+0x68>
   1523a:	4a0e      	ldr	r2, [pc, #56]	; (15274 <att_op_get_type+0x70>)
   1523c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1523e:	2a00      	cmp	r2, #0
   15240:	bf14      	ite	ne
   15242:	2001      	movne	r0, #1
   15244:	2006      	moveq	r0, #6
   15246:	4770      	bx	lr
	switch (op) {
   15248:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1524c:	2b52      	cmp	r3, #82	; 0x52
   1524e:	d105      	bne.n	1525c <att_op_get_type+0x58>
		return ATT_COMMAND;
   15250:	2000      	movs	r0, #0
}
   15252:	4770      	bx	lr
		return ATT_REQUEST;
   15254:	2001      	movs	r0, #1
   15256:	4770      	bx	lr
		return ATT_INDICATION;
   15258:	2005      	movs	r0, #5
   1525a:	4770      	bx	lr
		return ATT_COMMAND;
   1525c:	f010 0f40 	tst.w	r0, #64	; 0x40
   15260:	bf0c      	ite	eq
   15262:	2006      	moveq	r0, #6
   15264:	2000      	movne	r0, #0
   15266:	4770      	bx	lr
	switch (op) {
   15268:	2004      	movs	r0, #4
   1526a:	4770      	bx	lr
		return ATT_RESPONSE;
   1526c:	2002      	movs	r0, #2
   1526e:	4770      	bx	lr
   15270:	028aaaaa 	.word	0x028aaaaa
   15274:	01455554 	.word	0x01455554

00015278 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15278:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1527a:	3804      	subs	r0, #4
   1527c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1527e:	a901      	add	r1, sp, #4
   15280:	4802      	ldr	r0, [pc, #8]	; (1528c <bt_att_released+0x14>)
   15282:	f013 f929 	bl	284d8 <k_mem_slab_free>
}
   15286:	b003      	add	sp, #12
   15288:	f85d fb04 	ldr.w	pc, [sp], #4
   1528c:	2000cde4 	.word	0x2000cde4

00015290 <tx_meta_data_free>:
{
   15290:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15292:	4604      	mov	r4, r0
   15294:	b948      	cbnz	r0, 152aa <tx_meta_data_free+0x1a>
   15296:	490a      	ldr	r1, [pc, #40]	; (152c0 <tx_meta_data_free+0x30>)
   15298:	480a      	ldr	r0, [pc, #40]	; (152c4 <tx_meta_data_free+0x34>)
   1529a:	23ae      	movs	r3, #174	; 0xae
   1529c:	4a0a      	ldr	r2, [pc, #40]	; (152c8 <tx_meta_data_free+0x38>)
   1529e:	f019 fb59 	bl	2e954 <assert_print>
   152a2:	21ae      	movs	r1, #174	; 0xae
   152a4:	4808      	ldr	r0, [pc, #32]	; (152c8 <tx_meta_data_free+0x38>)
   152a6:	f019 fb4e 	bl	2e946 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   152aa:	2100      	movs	r1, #0
   152ac:	2214      	movs	r2, #20
   152ae:	f01f febd 	bl	3502c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   152b2:	4621      	mov	r1, r4
}
   152b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   152b8:	4804      	ldr	r0, [pc, #16]	; (152cc <tx_meta_data_free+0x3c>)
   152ba:	f01f bca1 	b.w	34c00 <k_queue_append>
   152be:	bf00      	nop
   152c0:	0003a6e6 	.word	0x0003a6e6
   152c4:	000381c3 	.word	0x000381c3
   152c8:	0003ab94 	.word	0x0003ab94
   152cc:	2000d014 	.word	0x2000d014

000152d0 <find_type_cb>:
{
   152d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d4:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   152d6:	f8d2 a000 	ldr.w	sl, [r2]
{
   152da:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   152dc:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   152e0:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   152e2:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   152e4:	f642 0301 	movw	r3, #10241	; 0x2801
{
   152e8:	4680      	mov	r8, r0
   152ea:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   152ec:	6800      	ldr	r0, [r0, #0]
   152ee:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   152f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
   152f4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   152f8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   152fa:	f01a fc3c 	bl	2fb76 <bt_uuid_cmp>
   152fe:	2800      	cmp	r0, #0
   15300:	d070      	beq.n	153e4 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15302:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15306:	f8d8 0000 	ldr.w	r0, [r8]
   1530a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1530e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15310:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15314:	f01a fc2f 	bl	2fb76 <bt_uuid_cmp>
   15318:	b138      	cbz	r0, 1532a <find_type_cb+0x5a>
		if (data->group &&
   1531a:	68a3      	ldr	r3, [r4, #8]
   1531c:	b11b      	cbz	r3, 15326 <find_type_cb+0x56>
   1531e:	885a      	ldrh	r2, [r3, #2]
   15320:	42b2      	cmp	r2, r6
   15322:	d200      	bcs.n	15326 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15324:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15326:	2001      	movs	r0, #1
   15328:	e009      	b.n	1533e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1532a:	6861      	ldr	r1, [r4, #4]
   1532c:	4608      	mov	r0, r1
   1532e:	f01a fef7 	bl	30120 <net_buf_frags_len>
   15332:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15336:	1a1b      	subs	r3, r3, r0
   15338:	2b03      	cmp	r3, #3
   1533a:	d804      	bhi.n	15346 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1533c:	2000      	movs	r0, #0
}
   1533e:	3744      	adds	r7, #68	; 0x44
   15340:	46bd      	mov	sp, r7
   15342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15346:	4608      	mov	r0, r1
   15348:	f003 f8ae 	bl	184a8 <net_buf_frag_last>
   1534c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1534e:	6860      	ldr	r0, [r4, #4]
   15350:	f01a fee6 	bl	30120 <net_buf_frags_len>
   15354:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15358:	f105 090c 	add.w	r9, r5, #12
   1535c:	ebab 0b00 	sub.w	fp, fp, r0
   15360:	4648      	mov	r0, r9
   15362:	f01b ff44 	bl	311ee <net_buf_simple_tailroom>
   15366:	4558      	cmp	r0, fp
   15368:	d93f      	bls.n	153ea <find_type_cb+0x11a>
   1536a:	6860      	ldr	r0, [r4, #4]
   1536c:	f01a fed8 	bl	30120 <net_buf_frags_len>
   15370:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15374:	1a18      	subs	r0, r3, r0
	if (!len) {
   15376:	b970      	cbnz	r0, 15396 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15378:	6863      	ldr	r3, [r4, #4]
   1537a:	7a98      	ldrb	r0, [r3, #10]
   1537c:	f002 feea 	bl	18154 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15380:	2200      	movs	r2, #0
   15382:	2300      	movs	r3, #0
   15384:	f01b ff12 	bl	311ac <net_buf_alloc_fixed>
		if (!frag) {
   15388:	4605      	mov	r5, r0
   1538a:	2800      	cmp	r0, #0
   1538c:	d0d6      	beq.n	1533c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1538e:	4601      	mov	r1, r0
   15390:	6860      	ldr	r0, [r4, #4]
   15392:	f003 f8cf 	bl	18534 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15396:	2300      	movs	r3, #0
   15398:	9300      	str	r3, [sp, #0]
   1539a:	4641      	mov	r1, r8
   1539c:	f8d8 a004 	ldr.w	sl, [r8, #4]
   153a0:	2310      	movs	r3, #16
   153a2:	6878      	ldr	r0, [r7, #4]
   153a4:	f107 0208 	add.w	r2, r7, #8
   153a8:	47d0      	blx	sl
	if (read < 0) {
   153aa:	f1b0 0800 	subs.w	r8, r0, #0
   153ae:	db19      	blt.n	153e4 <find_type_cb+0x114>
	if (read != data->value_len) {
   153b0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   153b2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   153b4:	4542      	cmp	r2, r8
   153b6:	d03f      	beq.n	15438 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   153b8:	4601      	mov	r1, r0
   153ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   153be:	f01a fc08 	bl	2fbd2 <bt_uuid_create>
   153c2:	b9b0      	cbnz	r0, 153f2 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   153c4:	466d      	mov	r5, sp
   153c6:	b088      	sub	sp, #32
   153c8:	7c23      	ldrb	r3, [r4, #16]
   153ca:	aa02      	add	r2, sp, #8
   153cc:	491d      	ldr	r1, [pc, #116]	; (15444 <find_type_cb+0x174>)
   153ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   153d2:	2303      	movs	r3, #3
   153d4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   153d8:	481b      	ldr	r0, [pc, #108]	; (15448 <find_type_cb+0x178>)
   153da:	f842 3f10 	str.w	r3, [r2, #16]!
   153de:	f01a ffa7 	bl	30330 <z_log_msg_static_create.constprop.0>
   153e2:	46ad      	mov	sp, r5
	data->group = NULL;
   153e4:	2300      	movs	r3, #0
   153e6:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   153e8:	e79d      	b.n	15326 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   153ea:	4648      	mov	r0, r9
   153ec:	f01b feff 	bl	311ee <net_buf_simple_tailroom>
   153f0:	e7c1      	b.n	15376 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   153f2:	fa5f f288 	uxtb.w	r2, r8
   153f6:	f107 0108 	add.w	r1, r7, #8
   153fa:	f107 0018 	add.w	r0, r7, #24
   153fe:	f01a fbe8 	bl	2fbd2 <bt_uuid_create>
   15402:	b930      	cbnz	r0, 15412 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15404:	466d      	mov	r5, sp
   15406:	b088      	sub	sp, #32
   15408:	aa02      	add	r2, sp, #8
   1540a:	4b10      	ldr	r3, [pc, #64]	; (1544c <find_type_cb+0x17c>)
   1540c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15410:	e7df      	b.n	153d2 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15412:	f107 0118 	add.w	r1, r7, #24
   15416:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1541a:	f01a fbac 	bl	2fb76 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1541e:	2800      	cmp	r0, #0
   15420:	d1e0      	bne.n	153e4 <find_type_cb+0x114>
	data->err = 0x00;
   15422:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15424:	2104      	movs	r1, #4
   15426:	7463      	strb	r3, [r4, #17]
   15428:	f105 000c 	add.w	r0, r5, #12
   1542c:	f003 f924 	bl	18678 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15430:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15432:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15434:	68a3      	ldr	r3, [r4, #8]
   15436:	e775      	b.n	15324 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15438:	f107 0108 	add.w	r1, r7, #8
   1543c:	f01f fdc6 	bl	34fcc <memcmp>
   15440:	e7ed      	b.n	1541e <find_type_cb+0x14e>
   15442:	bf00      	nop
   15444:	0003abc3 	.word	0x0003abc3
   15448:	000363f0 	.word	0x000363f0
   1544c:	0003abe2 	.word	0x0003abe2

00015450 <chan_send>:
{
   15450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15454:	4606      	mov	r6, r0
   15456:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15458:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1545c:	68cb      	ldr	r3, [r1, #12]
{
   1545e:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15460:	2102      	movs	r1, #2
   15462:	3034      	adds	r0, #52	; 0x34
   15464:	f01a fe76 	bl	30154 <atomic_test_bit>
   15468:	b970      	cbnz	r0, 15488 <chan_send+0x38>
		return -EINVAL;
   1546a:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   1546e:	4b35      	ldr	r3, [pc, #212]	; (15544 <chan_send+0xf4>)
   15470:	4835      	ldr	r0, [pc, #212]	; (15548 <chan_send+0xf8>)
   15472:	e9cd 1306 	strd	r1, r3, [sp, #24]
   15476:	aa06      	add	r2, sp, #24
   15478:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1547c:	f01a ff58 	bl	30330 <z_log_msg_static_create.constprop.0>
}
   15480:	4628      	mov	r0, r5
   15482:	b009      	add	sp, #36	; 0x24
   15484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15488:	781b      	ldrb	r3, [r3, #0]
   1548a:	2bd2      	cmp	r3, #210	; 0xd2
   1548c:	d117      	bne.n	154be <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   1548e:	6833      	ldr	r3, [r6, #0]
   15490:	4621      	mov	r1, r4
   15492:	6818      	ldr	r0, [r3, #0]
   15494:	f01b fe84 	bl	311a0 <bt_smp_sign>
		if (err) {
   15498:	4605      	mov	r5, r0
   1549a:	b180      	cbz	r0, 154be <chan_send+0x6e>
			LOG_ERR("Error signing data");
   1549c:	4b2b      	ldr	r3, [pc, #172]	; (1554c <chan_send+0xfc>)
   1549e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154a2:	9307      	str	r3, [sp, #28]
   154a4:	2302      	movs	r3, #2
   154a6:	aa06      	add	r2, sp, #24
   154a8:	4827      	ldr	r0, [pc, #156]	; (15548 <chan_send+0xf8>)
   154aa:	9306      	str	r3, [sp, #24]
   154ac:	f01a ff40 	bl	30330 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   154b0:	69a0      	ldr	r0, [r4, #24]
   154b2:	f7ff feed 	bl	15290 <tx_meta_data_free>
			net_buf_unref(buf);
   154b6:	4620      	mov	r0, r4
   154b8:	f002 ff9a 	bl	183f0 <net_buf_unref>
			return err;
   154bc:	e7e0      	b.n	15480 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   154be:	f104 000c 	add.w	r0, r4, #12
   154c2:	f01b fe90 	bl	311e6 <net_buf_simple_headroom>
	state->len = buf->len;
   154c6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   154ca:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   154ce:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   154d0:	4607      	mov	r7, r0
   154d2:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   154d4:	68e3      	ldr	r3, [r4, #12]
   154d6:	7818      	ldrb	r0, [r3, #0]
   154d8:	f7ff fe94 	bl	15204 <att_op_get_type>
   154dc:	2805      	cmp	r0, #5
   154de:	4605      	mov	r5, r0
	switch (op_type) {
   154e0:	d820      	bhi.n	15524 <chan_send+0xd4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   154e2:	4b1b      	ldr	r3, [pc, #108]	; (15550 <chan_send+0x100>)
   154e4:	4622      	mov	r2, r4
   154e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   154ea:	2104      	movs	r1, #4
   154ec:	4630      	mov	r0, r6
   154ee:	f8cd 9000 	str.w	r9, [sp]
   154f2:	f01a fdca 	bl	3008a <bt_l2cap_send_cb>
	if (err) {
   154f6:	4605      	mov	r5, r0
   154f8:	2800      	cmp	r0, #0
   154fa:	d0c1      	beq.n	15480 <chan_send+0x30>
		if (err == -ENOBUFS) {
   154fc:	f110 0f69 	cmn.w	r0, #105	; 0x69
   15500:	d109      	bne.n	15516 <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   15502:	4b14      	ldr	r3, [pc, #80]	; (15554 <chan_send+0x104>)
   15504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15508:	9307      	str	r3, [sp, #28]
   1550a:	2302      	movs	r3, #2
   1550c:	480e      	ldr	r0, [pc, #56]	; (15548 <chan_send+0xf8>)
   1550e:	aa06      	add	r2, sp, #24
   15510:	9306      	str	r3, [sp, #24]
   15512:	f01a ff0d 	bl	30330 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   15516:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15518:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1551c:	fa13 f787 	uxtah	r7, r3, r7
   15520:	60e7      	str	r7, [r4, #12]
}
   15522:	e7ad      	b.n	15480 <chan_send+0x30>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15524:	f44f 7319 	mov.w	r3, #612	; 0x264
   15528:	4a0b      	ldr	r2, [pc, #44]	; (15558 <chan_send+0x108>)
   1552a:	490c      	ldr	r1, [pc, #48]	; (1555c <chan_send+0x10c>)
   1552c:	480c      	ldr	r0, [pc, #48]	; (15560 <chan_send+0x110>)
   1552e:	f019 fa11 	bl	2e954 <assert_print>
   15532:	4629      	mov	r1, r5
   15534:	480b      	ldr	r0, [pc, #44]	; (15564 <chan_send+0x114>)
   15536:	f019 fa0d 	bl	2e954 <assert_print>
   1553a:	f44f 7119 	mov.w	r1, #612	; 0x264
   1553e:	4806      	ldr	r0, [pc, #24]	; (15558 <chan_send+0x108>)
   15540:	f019 fa01 	bl	2e946 <assert_post_action>
   15544:	0003ac01 	.word	0x0003ac01
   15548:	000363f0 	.word	0x000363f0
   1554c:	0003ac1b 	.word	0x0003ac1b
   15550:	00036bd0 	.word	0x00036bd0
   15554:	0003ac47 	.word	0x0003ac47
   15558:	0003ab94 	.word	0x0003ab94
   1555c:	0003c13d 	.word	0x0003c13d
   15560:	000381c3 	.word	0x000381c3
   15564:	0003ac2e 	.word	0x0003ac2e

00015568 <bt_att_chan_req_send>:
{
   15568:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   1556a:	b958      	cbnz	r0, 15584 <bt_att_chan_req_send+0x1c>
   1556c:	4919      	ldr	r1, [pc, #100]	; (155d4 <bt_att_chan_req_send+0x6c>)
   1556e:	f240 3325 	movw	r3, #805	; 0x325
   15572:	4a19      	ldr	r2, [pc, #100]	; (155d8 <bt_att_chan_req_send+0x70>)
   15574:	4819      	ldr	r0, [pc, #100]	; (155dc <bt_att_chan_req_send+0x74>)
   15576:	f019 f9ed 	bl	2e954 <assert_print>
   1557a:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   1557e:	4816      	ldr	r0, [pc, #88]	; (155d8 <bt_att_chan_req_send+0x70>)
   15580:	f019 f9e1 	bl	2e946 <assert_post_action>
   15584:	b949      	cbnz	r1, 1559a <bt_att_chan_req_send+0x32>
   15586:	4916      	ldr	r1, [pc, #88]	; (155e0 <bt_att_chan_req_send+0x78>)
   15588:	f240 3326 	movw	r3, #806	; 0x326
   1558c:	4a12      	ldr	r2, [pc, #72]	; (155d8 <bt_att_chan_req_send+0x70>)
   1558e:	4813      	ldr	r0, [pc, #76]	; (155dc <bt_att_chan_req_send+0x74>)
   15590:	f019 f9e0 	bl	2e954 <assert_print>
   15594:	f240 3126 	movw	r1, #806	; 0x326
   15598:	e7f1      	b.n	1557e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   1559a:	684a      	ldr	r2, [r1, #4]
   1559c:	b94a      	cbnz	r2, 155b2 <bt_att_chan_req_send+0x4a>
   1559e:	4911      	ldr	r1, [pc, #68]	; (155e4 <bt_att_chan_req_send+0x7c>)
   155a0:	f240 3327 	movw	r3, #807	; 0x327
   155a4:	4a0c      	ldr	r2, [pc, #48]	; (155d8 <bt_att_chan_req_send+0x70>)
   155a6:	480d      	ldr	r0, [pc, #52]	; (155dc <bt_att_chan_req_send+0x74>)
   155a8:	f019 f9d4 	bl	2e954 <assert_print>
   155ac:	f240 3127 	movw	r1, #807	; 0x327
   155b0:	e7e5      	b.n	1557e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   155b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   155b4:	b14b      	cbz	r3, 155ca <bt_att_chan_req_send+0x62>
   155b6:	490c      	ldr	r1, [pc, #48]	; (155e8 <bt_att_chan_req_send+0x80>)
   155b8:	f44f 734a 	mov.w	r3, #808	; 0x328
   155bc:	4a06      	ldr	r2, [pc, #24]	; (155d8 <bt_att_chan_req_send+0x70>)
   155be:	4807      	ldr	r0, [pc, #28]	; (155dc <bt_att_chan_req_send+0x74>)
   155c0:	f019 f9c8 	bl	2e954 <assert_print>
   155c4:	f44f 714a 	mov.w	r1, #808	; 0x328
   155c8:	e7d9      	b.n	1557e <bt_att_chan_req_send+0x16>
}
   155ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   155ce:	f01a beb2 	b.w	30336 <chan_req_send>
   155d2:	bf00      	nop
   155d4:	0003ac6a 	.word	0x0003ac6a
   155d8:	0003ab94 	.word	0x0003ab94
   155dc:	000381c3 	.word	0x000381c3
   155e0:	0003ab08 	.word	0x0003ab08
   155e4:	0003ac6f 	.word	0x0003ac6f
   155e8:	0003ac79 	.word	0x0003ac79

000155ec <att_get>:
{
   155ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   155ee:	7a83      	ldrb	r3, [r0, #10]
   155f0:	2b07      	cmp	r3, #7
   155f2:	d00d      	beq.n	15610 <att_get+0x24>
		LOG_WRN("Not connected");
   155f4:	4b13      	ldr	r3, [pc, #76]	; (15644 <att_get+0x58>)
   155f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   155fa:	9305      	str	r3, [sp, #20]
   155fc:	2302      	movs	r3, #2
   155fe:	aa04      	add	r2, sp, #16
   15600:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15602:	4811      	ldr	r0, [pc, #68]	; (15648 <att_get+0x5c>)
   15604:	f01a fe94 	bl	30330 <z_log_msg_static_create.constprop.0>
		return NULL;
   15608:	2000      	movs	r0, #0
}
   1560a:	b007      	add	sp, #28
   1560c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15610:	2104      	movs	r1, #4
   15612:	f01a fd71 	bl	300f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15616:	4603      	mov	r3, r0
   15618:	b938      	cbnz	r0, 1562a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   1561a:	4b0c      	ldr	r3, [pc, #48]	; (1564c <att_get+0x60>)
   1561c:	9305      	str	r3, [sp, #20]
   1561e:	2302      	movs	r3, #2
   15620:	9304      	str	r3, [sp, #16]
   15622:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15626:	aa04      	add	r2, sp, #16
   15628:	e7eb      	b.n	15602 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1562a:	2102      	movs	r1, #2
   1562c:	3030      	adds	r0, #48	; 0x30
   1562e:	f01a fd91 	bl	30154 <atomic_test_bit>
   15632:	b918      	cbnz	r0, 1563c <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   15634:	4b06      	ldr	r3, [pc, #24]	; (15650 <att_get+0x64>)
   15636:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1563a:	e7f2      	b.n	15622 <att_get+0x36>
	return att_chan->att;
   1563c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15640:	e7e3      	b.n	1560a <att_get+0x1e>
   15642:	bf00      	nop
   15644:	0003ab0c 	.word	0x0003ab0c
   15648:	000363f0 	.word	0x000363f0
   1564c:	0003ac84 	.word	0x0003ac84
   15650:	0003ac01 	.word	0x0003ac01

00015654 <read_group_cb>:
{
   15654:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15658:	f04f 0800 	mov.w	r8, #0
   1565c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15660:	4605      	mov	r5, r0
   15662:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15664:	6800      	ldr	r0, [r0, #0]
   15666:	a902      	add	r1, sp, #8
{
   15668:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1566a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1566c:	f88d 8008 	strb.w	r8, [sp, #8]
   15670:	f8ad 300a 	strh.w	r3, [sp, #10]
   15674:	f01a fa7f 	bl	2fb76 <bt_uuid_cmp>
   15678:	b1a0      	cbz	r0, 156a4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1567a:	f642 0301 	movw	r3, #10241	; 0x2801
   1567e:	6828      	ldr	r0, [r5, #0]
   15680:	a903      	add	r1, sp, #12
   15682:	f88d 800c 	strb.w	r8, [sp, #12]
   15686:	f8ad 300e 	strh.w	r3, [sp, #14]
   1568a:	f01a fa74 	bl	2fb76 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1568e:	b148      	cbz	r0, 156a4 <read_group_cb+0x50>
		if (data->group &&
   15690:	6923      	ldr	r3, [r4, #16]
   15692:	b11b      	cbz	r3, 1569c <read_group_cb+0x48>
   15694:	885a      	ldrh	r2, [r3, #2]
   15696:	42b2      	cmp	r2, r6
   15698:	d200      	bcs.n	1569c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1569a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1569c:	2001      	movs	r0, #1
}
   1569e:	b004      	add	sp, #16
   156a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   156a4:	6861      	ldr	r1, [r4, #4]
   156a6:	6828      	ldr	r0, [r5, #0]
   156a8:	f01a fa65 	bl	2fb76 <bt_uuid_cmp>
   156ac:	b110      	cbz	r0, 156b4 <read_group_cb+0x60>
		data->group = NULL;
   156ae:	2300      	movs	r3, #0
   156b0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   156b2:	e7f3      	b.n	1569c <read_group_cb+0x48>
	if (data->rsp->len &&
   156b4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   156b6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   156b8:	781a      	ldrb	r2, [r3, #0]
   156ba:	b132      	cbz	r2, 156ca <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   156bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   156be:	8a01      	ldrh	r1, [r0, #16]
   156c0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   156c2:	4293      	cmp	r3, r2
   156c4:	da01      	bge.n	156ca <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   156c6:	2000      	movs	r0, #0
   156c8:	e7e9      	b.n	1569e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   156ca:	2104      	movs	r1, #4
   156cc:	300c      	adds	r0, #12
   156ce:	f002 ffd3 	bl	18678 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   156d2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   156d4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   156d6:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   156d8:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   156da:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   156dc:	4b07      	ldr	r3, [pc, #28]	; (156fc <read_group_cb+0xa8>)
   156de:	9401      	str	r4, [sp, #4]
   156e0:	9300      	str	r3, [sp, #0]
   156e2:	4638      	mov	r0, r7
   156e4:	2300      	movs	r3, #0
   156e6:	68a2      	ldr	r2, [r4, #8]
   156e8:	f01a fe64 	bl	303b4 <att_chan_read>
	if (read < 0) {
   156ec:	2800      	cmp	r0, #0
   156ee:	dbea      	blt.n	156c6 <read_group_cb+0x72>
	if (!data->group) {
   156f0:	6920      	ldr	r0, [r4, #16]
   156f2:	3800      	subs	r0, #0
   156f4:	bf18      	it	ne
   156f6:	2001      	movne	r0, #1
   156f8:	e7d1      	b.n	1569e <read_group_cb+0x4a>
   156fa:	bf00      	nop
   156fc:	00030271 	.word	0x00030271

00015700 <bt_att_connected>:
{
   15700:	b510      	push	{r4, lr}
   15702:	4604      	mov	r4, r0
   15704:	f100 0330 	add.w	r3, r0, #48	; 0x30
   15708:	e8d3 1fef 	ldaex	r1, [r3]
   1570c:	f041 0104 	orr.w	r1, r1, #4
   15710:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15714:	2a00      	cmp	r2, #0
   15716:	d1f7      	bne.n	15708 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15718:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1571a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1571c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1571e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15720:	f01a fd37 	bl	30192 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15724:	f104 0054 	add.w	r0, r4, #84	; 0x54
   15728:	4903      	ldr	r1, [pc, #12]	; (15738 <bt_att_connected+0x38>)
   1572a:	f013 ff03 	bl	29534 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1572e:	6820      	ldr	r0, [r4, #0]
}
   15730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15734:	f002 bc60 	b.w	17ff8 <bt_gatt_connected>
   15738:	000163a1 	.word	0x000163a1

0001573c <read_type_cb>:
{
   1573c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15740:	6817      	ldr	r7, [r2, #0]
{
   15742:	4605      	mov	r5, r0
   15744:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15746:	6800      	ldr	r0, [r0, #0]
   15748:	6851      	ldr	r1, [r2, #4]
{
   1574a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1574c:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1574e:	f01a fa12 	bl	2fb76 <bt_uuid_cmp>
   15752:	4681      	mov	r9, r0
   15754:	2800      	cmp	r0, #0
   15756:	d13c      	bne.n	157d2 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15758:	4630      	mov	r0, r6
   1575a:	2295      	movs	r2, #149	; 0x95
   1575c:	4629      	mov	r1, r5
   1575e:	f01b fbec 	bl	30f3a <bt_gatt_check_perm>
   15762:	4606      	mov	r6, r0
   15764:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15766:	b140      	cbz	r0, 1577a <read_type_cb+0x3e>
		if (data->rsp->len) {
   15768:	68e3      	ldr	r3, [r4, #12]
   1576a:	781b      	ldrb	r3, [r3, #0]
   1576c:	b10b      	cbz	r3, 15772 <read_type_cb+0x36>
			data->err = 0x00;
   1576e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   15772:	2000      	movs	r0, #0
}
   15774:	b003      	add	sp, #12
   15776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1577a:	68a0      	ldr	r0, [r4, #8]
   1577c:	f002 fe94 	bl	184a8 <net_buf_frag_last>
   15780:	2102      	movs	r1, #2
   15782:	300c      	adds	r0, #12
   15784:	f002 ff78 	bl	18678 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15788:	4b13      	ldr	r3, [pc, #76]	; (157d8 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1578a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1578c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15790:	9300      	str	r3, [sp, #0]
   15792:	9401      	str	r4, [sp, #4]
   15794:	4633      	mov	r3, r6
   15796:	4629      	mov	r1, r5
   15798:	4638      	mov	r0, r7
   1579a:	68a2      	ldr	r2, [r4, #8]
   1579c:	f01a fe0a 	bl	303b4 <att_chan_read>
	if (read < 0) {
   157a0:	2800      	cmp	r0, #0
   157a2:	da07      	bge.n	157b4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   157a4:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   157a8:	bf32      	itee	cc
   157aa:	200e      	movcc	r0, #14
		return -err;
   157ac:	4240      	negcs	r0, r0
   157ae:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   157b0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   157b2:	e7de      	b.n	15772 <read_type_cb+0x36>
	if (!data->item) {
   157b4:	6923      	ldr	r3, [r4, #16]
   157b6:	2b00      	cmp	r3, #0
   157b8:	d0db      	beq.n	15772 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   157ba:	68a0      	ldr	r0, [r4, #8]
   157bc:	f01a fcb0 	bl	30120 <net_buf_frags_len>
   157c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   157c2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   157c4:	68e3      	ldr	r3, [r4, #12]
   157c6:	781b      	ldrb	r3, [r3, #0]
   157c8:	4298      	cmp	r0, r3
   157ca:	bf94      	ite	ls
   157cc:	2000      	movls	r0, #0
   157ce:	2001      	movhi	r0, #1
   157d0:	e7d0      	b.n	15774 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   157d2:	2001      	movs	r0, #1
   157d4:	e7ce      	b.n	15774 <read_type_cb+0x38>
   157d6:	bf00      	nop
   157d8:	00030131 	.word	0x00030131

000157dc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   157dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157e0:	b082      	sub	sp, #8
   157e2:	af00      	add	r7, sp, #0
   157e4:	4604      	mov	r4, r0
   157e6:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   157e8:	2200      	movs	r2, #0
   157ea:	2300      	movs	r3, #0
   157ec:	4639      	mov	r1, r7
   157ee:	483a      	ldr	r0, [pc, #232]	; (158d8 <bt_att_accept+0xfc>)
   157f0:	f012 fe08 	bl	28404 <k_mem_slab_alloc>
   157f4:	4605      	mov	r5, r0
   157f6:	b1a8      	cbz	r0, 15824 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   157f8:	466d      	mov	r5, sp
   157fa:	b088      	sub	sp, #32
   157fc:	466a      	mov	r2, sp
   157fe:	4b37      	ldr	r3, [pc, #220]	; (158dc <bt_att_accept+0x100>)
   15800:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15804:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15808:	2303      	movs	r3, #3
   1580a:	4835      	ldr	r0, [pc, #212]	; (158e0 <bt_att_accept+0x104>)
   1580c:	f842 3f10 	str.w	r3, [r2, #16]!
   15810:	f01a fd8e 	bl	30330 <z_log_msg_static_create.constprop.0>
   15814:	46ad      	mov	sp, r5
		return -ENOMEM;
   15816:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1581a:	4628      	mov	r0, r5
   1581c:	3708      	adds	r7, #8
   1581e:	46bd      	mov	sp, r7
   15820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   15824:	f015 f916 	bl	2aa54 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   15828:	4b2e      	ldr	r3, [pc, #184]	; (158e4 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1582a:	f8d7 8000 	ldr.w	r8, [r7]
   1582e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   15830:	6018      	str	r0, [r3, #0]
   15832:	222c      	movs	r2, #44	; 0x2c
   15834:	f108 0004 	add.w	r0, r8, #4
   15838:	f01f fbf8 	bl	3502c <memset>
	att->conn = conn;
   1583c:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   15840:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15842:	2200      	movs	r2, #0
	list->tail = NULL;
   15844:	e9c4 5501 	strd	r5, r5, [r4, #4]
   15848:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   1584c:	2300      	movs	r3, #0
   1584e:	4826      	ldr	r0, [pc, #152]	; (158e8 <bt_att_accept+0x10c>)
   15850:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15852:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15854:	f012 fdd6 	bl	28404 <k_mem_slab_alloc>
   15858:	4605      	mov	r5, r0
   1585a:	b180      	cbz	r0, 1587e <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1585c:	6823      	ldr	r3, [r4, #0]
   1585e:	466c      	mov	r4, sp
   15860:	b088      	sub	sp, #32
   15862:	466a      	mov	r2, sp
   15864:	4921      	ldr	r1, [pc, #132]	; (158ec <bt_att_accept+0x110>)
   15866:	481e      	ldr	r0, [pc, #120]	; (158e0 <bt_att_accept+0x104>)
   15868:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1586c:	2303      	movs	r3, #3
   1586e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15872:	f842 3f10 	str.w	r3, [r2, #16]!
   15876:	f01a fd5b 	bl	30330 <z_log_msg_static_create.constprop.0>
   1587a:	46a5      	mov	sp, r4
	if (!chan) {
   1587c:	e7cb      	b.n	15816 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1587e:	687b      	ldr	r3, [r7, #4]
   15880:	4601      	mov	r1, r0
   15882:	2290      	movs	r2, #144	; 0x90
   15884:	4618      	mov	r0, r3
   15886:	f01f fbd1 	bl	3502c <memset>
	chan->chan.chan.ops = &ops;
   1588a:	4a19      	ldr	r2, [pc, #100]	; (158f0 <bt_att_accept+0x114>)
   1588c:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1588e:	303c      	adds	r0, #60	; 0x3c
   15890:	f01f f9a9 	bl	34be6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15894:	687b      	ldr	r3, [r7, #4]
   15896:	3334      	adds	r3, #52	; 0x34
   15898:	e8d3 2fef 	ldaex	r2, [r3]
   1589c:	e8c3 5fe1 	stlex	r1, r5, [r3]
   158a0:	2900      	cmp	r1, #0
   158a2:	d1f9      	bne.n	15898 <bt_att_accept+0xbc>
	chan->att = att;
   158a4:	687b      	ldr	r3, [r7, #4]
   158a6:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   158a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   158aa:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   158ae:	b91b      	cbnz	r3, 158b8 <bt_att_accept+0xdc>
   158b0:	f104 000c 	add.w	r0, r4, #12
   158b4:	f01f f997 	bl	34be6 <z_impl_k_queue_init>
	return list->head;
   158b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   158ba:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
   158be:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   158c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   158c4:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   158c6:	b902      	cbnz	r2, 158ca <bt_att_accept+0xee>
	list->tail = node;
   158c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   158ca:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   158cc:	2b00      	cmp	r3, #0
   158ce:	d0a2      	beq.n	15816 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   158d0:	3304      	adds	r3, #4
   158d2:	6033      	str	r3, [r6, #0]
	return 0;
   158d4:	e7a1      	b.n	1581a <bt_att_accept+0x3e>
   158d6:	bf00      	nop
   158d8:	2000cdc4 	.word	0x2000cdc4
   158dc:	0003ac9f 	.word	0x0003ac9f
   158e0:	000363f0 	.word	0x000363f0
   158e4:	2000fc2c 	.word	0x2000fc2c
   158e8:	2000cde4 	.word	0x2000cde4
   158ec:	0003acc4 	.word	0x0003acc4
   158f0:	2000c87c 	.word	0x2000c87c

000158f4 <bt_att_chan_create_pdu>:
{
   158f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   158f8:	b086      	sub	sp, #24
   158fa:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   158fc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   158fe:	1c53      	adds	r3, r2, #1
   15900:	428b      	cmp	r3, r1
{
   15902:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15904:	d915      	bls.n	15932 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   15906:	466c      	mov	r4, sp
   15908:	b088      	sub	sp, #32
   1590a:	466a      	mov	r2, sp
   1590c:	482d      	ldr	r0, [pc, #180]	; (159c4 <bt_att_chan_create_pdu+0xd0>)
   1590e:	61d3      	str	r3, [r2, #28]
   15910:	2304      	movs	r3, #4
   15912:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15916:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1591a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1591e:	482a      	ldr	r0, [pc, #168]	; (159c8 <bt_att_chan_create_pdu+0xd4>)
   15920:	f01a fd06 	bl	30330 <z_log_msg_static_create.constprop.0>
   15924:	46a5      	mov	sp, r4
		return NULL;
   15926:	2400      	movs	r4, #0
}
   15928:	4620      	mov	r0, r4
   1592a:	3718      	adds	r7, #24
   1592c:	46bd      	mov	sp, r7
   1592e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   15932:	4628      	mov	r0, r5
   15934:	f7ff fc66 	bl	15204 <att_op_get_type>
   15938:	2802      	cmp	r0, #2
   1593a:	d019      	beq.n	15970 <bt_att_chan_create_pdu+0x7c>
   1593c:	2804      	cmp	r0, #4
   1593e:	d017      	beq.n	15970 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   15940:	f04f 38ff 	mov.w	r8, #4294967295
   15944:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   15948:	2100      	movs	r1, #0
   1594a:	4642      	mov	r2, r8
   1594c:	464b      	mov	r3, r9
   1594e:	4608      	mov	r0, r1
   15950:	f01a fb98 	bl	30084 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   15954:	4604      	mov	r4, r0
   15956:	b980      	cbnz	r0, 1597a <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   15958:	466c      	mov	r4, sp
   1595a:	b088      	sub	sp, #32
   1595c:	466a      	mov	r2, sp
   1595e:	4b1b      	ldr	r3, [pc, #108]	; (159cc <bt_att_chan_create_pdu+0xd8>)
   15960:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15964:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15968:	2303      	movs	r3, #3
   1596a:	f842 3f10 	str.w	r3, [r2, #16]!
   1596e:	e7d6      	b.n	1591e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   15970:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   15974:	f04f 0900 	mov.w	r9, #0
   15978:	e7e6      	b.n	15948 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1597a:	f015 f86b 	bl	2aa54 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1597e:	4b14      	ldr	r3, [pc, #80]	; (159d0 <bt_att_chan_create_pdu+0xdc>)
   15980:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15982:	4814      	ldr	r0, [pc, #80]	; (159d4 <bt_att_chan_create_pdu+0xe0>)
   15984:	bf07      	ittee	eq
   15986:	2200      	moveq	r2, #0
   15988:	2300      	moveq	r3, #0
   1598a:	4642      	movne	r2, r8
   1598c:	464b      	movne	r3, r9
   1598e:	f013 f971 	bl	28c74 <z_impl_k_queue_get>
	if (!data) {
   15992:	b970      	cbnz	r0, 159b2 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   15994:	4b10      	ldr	r3, [pc, #64]	; (159d8 <bt_att_chan_create_pdu+0xe4>)
   15996:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1599a:	617b      	str	r3, [r7, #20]
   1599c:	2302      	movs	r3, #2
   1599e:	480a      	ldr	r0, [pc, #40]	; (159c8 <bt_att_chan_create_pdu+0xd4>)
   159a0:	f107 0210 	add.w	r2, r7, #16
   159a4:	613b      	str	r3, [r7, #16]
   159a6:	f01a fcc3 	bl	30330 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   159aa:	4620      	mov	r0, r4
   159ac:	f002 fd20 	bl	183f0 <net_buf_unref>
		return NULL;
   159b0:	e7b9      	b.n	15926 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   159b2:	61a0      	str	r0, [r4, #24]
   159b4:	2101      	movs	r1, #1
   159b6:	f104 000c 	add.w	r0, r4, #12
   159ba:	f002 fe5d 	bl	18678 <net_buf_simple_add>
	hdr->code = op;
   159be:	7005      	strb	r5, [r0, #0]
	return buf;
   159c0:	e7b2      	b.n	15928 <bt_att_chan_create_pdu+0x34>
   159c2:	bf00      	nop
   159c4:	0003ace9 	.word	0x0003ace9
   159c8:	000363f0 	.word	0x000363f0
   159cc:	0003a9c6 	.word	0x0003a9c6
   159d0:	2000f740 	.word	0x2000f740
   159d4:	2000d014 	.word	0x2000d014
   159d8:	0003ad0e 	.word	0x0003ad0e

000159dc <bt_att_recv>:
{
   159dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159e0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   159e2:	8a0b      	ldrh	r3, [r1, #16]
{
   159e4:	4682      	mov	sl, r0
   159e6:	460c      	mov	r4, r1
   159e8:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   159ea:	b97b      	cbnz	r3, 15a0c <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   159ec:	4b4c      	ldr	r3, [pc, #304]	; (15b20 <bt_att_recv+0x144>)
   159ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   159f2:	617b      	str	r3, [r7, #20]
   159f4:	2302      	movs	r3, #2
   159f6:	f107 0210 	add.w	r2, r7, #16
   159fa:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   159fc:	4849      	ldr	r0, [pc, #292]	; (15b24 <bt_att_recv+0x148>)
   159fe:	f01a fc97 	bl	30330 <z_log_msg_static_create.constprop.0>
}
   15a02:	2000      	movs	r0, #0
   15a04:	371c      	adds	r7, #28
   15a06:	46bd      	mov	sp, r7
   15a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15a0c:	2101      	movs	r1, #1
   15a0e:	f104 000c 	add.w	r0, r4, #12
   15a12:	f002 fe13 	bl	1863c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15a16:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   15a1a:	4605      	mov	r5, r0
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	d0f0      	beq.n	15a02 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15a20:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   15a22:	7801      	ldrb	r1, [r0, #0]
   15a24:	f8df 8100 	ldr.w	r8, [pc, #256]	; 15b28 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15a28:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   15a2c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   15a30:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   15a34:	4288      	cmp	r0, r1
   15a36:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   15a3a:	d114      	bne.n	15a66 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   15a3c:	f892 9002 	ldrb.w	r9, [r2, #2]
   15a40:	f1b9 0f01 	cmp.w	r9, #1
   15a44:	d131      	bne.n	15aaa <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   15a46:	2100      	movs	r1, #0
   15a48:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   15a4c:	f01a fd63 	bl	30516 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   15a50:	2800      	cmp	r0, #0
   15a52:	d035      	beq.n	15ac0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   15a54:	4b35      	ldr	r3, [pc, #212]	; (15b2c <bt_att_recv+0x150>)
   15a56:	617b      	str	r3, [r7, #20]
   15a58:	2302      	movs	r3, #2
   15a5a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15a5e:	613b      	str	r3, [r7, #16]
   15a60:	f107 0210 	add.w	r2, r7, #16
   15a64:	e7ca      	b.n	159fc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15a66:	3301      	adds	r3, #1
   15a68:	2b1e      	cmp	r3, #30
   15a6a:	d1df      	bne.n	15a2c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   15a6c:	466c      	mov	r4, sp
   15a6e:	b088      	sub	sp, #32
   15a70:	466a      	mov	r2, sp
   15a72:	4b2f      	ldr	r3, [pc, #188]	; (15b30 <bt_att_recv+0x154>)
   15a74:	482b      	ldr	r0, [pc, #172]	; (15b24 <bt_att_recv+0x148>)
   15a76:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15a7a:	2303      	movs	r3, #3
   15a7c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a80:	f842 3f10 	str.w	r3, [r2, #16]!
   15a84:	f01a fc54 	bl	30330 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   15a88:	7829      	ldrb	r1, [r5, #0]
   15a8a:	46a5      	mov	sp, r4
   15a8c:	4608      	mov	r0, r1
   15a8e:	f7ff fbb9 	bl	15204 <att_op_get_type>
   15a92:	2800      	cmp	r0, #0
   15a94:	d0b5      	beq.n	15a02 <bt_att_recv+0x26>
   15a96:	2805      	cmp	r0, #5
   15a98:	d0b3      	beq.n	15a02 <bt_att_recv+0x26>
	if (!req) {
   15a9a:	2900      	cmp	r1, #0
   15a9c:	d0b1      	beq.n	15a02 <bt_att_recv+0x26>
   15a9e:	2306      	movs	r3, #6
   15aa0:	2200      	movs	r2, #0
   15aa2:	4630      	mov	r0, r6
   15aa4:	f01a fea1 	bl	307ea <send_err_rsp.part.0>
   15aa8:	e7ab      	b.n	15a02 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   15aaa:	f1b9 0f05 	cmp.w	r9, #5
   15aae:	d107      	bne.n	15ac0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   15ab0:	2101      	movs	r1, #1
   15ab2:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   15ab6:	f01a fd2e 	bl	30516 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   15aba:	b108      	cbz	r0, 15ac0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   15abc:	4b1d      	ldr	r3, [pc, #116]	; (15b34 <bt_att_recv+0x158>)
   15abe:	e7ca      	b.n	15a56 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   15ac0:	44d8      	add	r8, fp
   15ac2:	8a23      	ldrh	r3, [r4, #16]
   15ac4:	f898 2001 	ldrb.w	r2, [r8, #1]
   15ac8:	429a      	cmp	r2, r3
   15aca:	d916      	bls.n	15afa <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15acc:	46e9      	mov	r9, sp
   15ace:	b088      	sub	sp, #32
   15ad0:	466a      	mov	r2, sp
   15ad2:	7829      	ldrb	r1, [r5, #0]
   15ad4:	2404      	movs	r4, #4
   15ad6:	4818      	ldr	r0, [pc, #96]	; (15b38 <bt_att_recv+0x15c>)
   15ad8:	61d1      	str	r1, [r2, #28]
   15ada:	e9c2 0305 	strd	r0, r3, [r2, #20]
   15ade:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15ae2:	4810      	ldr	r0, [pc, #64]	; (15b24 <bt_att_recv+0x148>)
   15ae4:	f842 4f10 	str.w	r4, [r2, #16]!
   15ae8:	f01a fc22 	bl	30330 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   15aec:	f898 3002 	ldrb.w	r3, [r8, #2]
   15af0:	46cd      	mov	sp, r9
   15af2:	2b01      	cmp	r3, #1
   15af4:	d185      	bne.n	15a02 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   15af6:	4623      	mov	r3, r4
   15af8:	e00c      	b.n	15b14 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   15afa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   15afe:	4621      	mov	r1, r4
   15b00:	4630      	mov	r0, r6
   15b02:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15b04:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   15b08:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15b0a:	f47f af7a 	bne.w	15a02 <bt_att_recv+0x26>
   15b0e:	2800      	cmp	r0, #0
   15b10:	f43f af77 	beq.w	15a02 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15b14:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   15b16:	2900      	cmp	r1, #0
   15b18:	f43f af73 	beq.w	15a02 <bt_att_recv+0x26>
   15b1c:	e7c0      	b.n	15aa0 <bt_att_recv+0xc4>
   15b1e:	bf00      	nop
   15b20:	0003ad2d 	.word	0x0003ad2d
   15b24:	000363f0 	.word	0x000363f0
   15b28:	00036be8 	.word	0x00036be8
   15b2c:	0003ad62 	.word	0x0003ad62
   15b30:	0003ad48 	.word	0x0003ad48
   15b34:	0003ad7e 	.word	0x0003ad7e
   15b38:	0003ad9d 	.word	0x0003ad9d

00015b3c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b3e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15b40:	6803      	ldr	r3, [r0, #0]
   15b42:	460d      	mov	r5, r1
   15b44:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15b46:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15b48:	bf18      	it	ne
   15b4a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15b4c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15b4e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15b50:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15b52:	f01b fac7 	bl	310e4 <bt_gatt_change_aware>
   15b56:	b948      	cbnz	r0, 15b6c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15b58:	2105      	movs	r1, #5
   15b5a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15b5e:	f01a fcda 	bl	30516 <atomic_test_and_set_bit>
   15b62:	2800      	cmp	r0, #0
   15b64:	d048      	beq.n	15bf8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   15b66:	2000      	movs	r0, #0
}
   15b68:	b007      	add	sp, #28
   15b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   15b6c:	2e00      	cmp	r6, #0
   15b6e:	d045      	beq.n	15bfc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   15b70:	2218      	movs	r2, #24
   15b72:	2100      	movs	r1, #0
   15b74:	4668      	mov	r0, sp
   15b76:	f01f fa59 	bl	3502c <memset>
	if (rsp) {
   15b7a:	bb67      	cbnz	r7, 15bd6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   15b7c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15b7e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   15b80:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15b82:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   15b84:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   15b86:	2300      	movs	r3, #0
   15b88:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   15b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15b8e:	4a1c      	ldr	r2, [pc, #112]	; (15c00 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   15b90:	9303      	str	r3, [sp, #12]
	data.len = len;
   15b92:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   15b96:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   15b9a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15b9e:	2301      	movs	r3, #1
   15ba0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15ba4:	466b      	mov	r3, sp
   15ba6:	f01a fb58 	bl	3025a <bt_gatt_foreach_attr>
	if (data.err) {
   15baa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15bae:	b1e3      	cbz	r3, 15bea <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   15bb0:	2f00      	cmp	r7, #0
   15bb2:	d0d8      	beq.n	15b66 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15bb4:	9b01      	ldr	r3, [sp, #4]
   15bb6:	6998      	ldr	r0, [r3, #24]
   15bb8:	f7ff fb6a 	bl	15290 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15bbc:	9801      	ldr	r0, [sp, #4]
   15bbe:	f002 fc17 	bl	183f0 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   15bc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   15bc6:	2d00      	cmp	r5, #0
   15bc8:	d0cd      	beq.n	15b66 <att_write_rsp.constprop.0+0x2a>
   15bca:	4632      	mov	r2, r6
   15bcc:	4629      	mov	r1, r5
   15bce:	4620      	mov	r0, r4
   15bd0:	f01a fe0b 	bl	307ea <send_err_rsp.part.0>
   15bd4:	e7c7      	b.n	15b66 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15bd6:	2200      	movs	r2, #0
   15bd8:	4639      	mov	r1, r7
   15bda:	4620      	mov	r0, r4
   15bdc:	f7ff fe8a 	bl	158f4 <bt_att_chan_create_pdu>
   15be0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15be2:	2800      	cmp	r0, #0
   15be4:	d1ca      	bne.n	15b7c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   15be6:	200e      	movs	r0, #14
   15be8:	e7be      	b.n	15b68 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   15bea:	9901      	ldr	r1, [sp, #4]
   15bec:	2900      	cmp	r1, #0
   15bee:	d0ba      	beq.n	15b66 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   15bf0:	4620      	mov	r0, r4
   15bf2:	f01a fbd1 	bl	30398 <bt_att_chan_send_rsp>
   15bf6:	e7b6      	b.n	15b66 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15bf8:	2012      	movs	r0, #18
   15bfa:	e7b5      	b.n	15b68 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15bfc:	2001      	movs	r0, #1
   15bfe:	e7b3      	b.n	15b68 <att_write_rsp.constprop.0+0x2c>
   15c00:	000301f9 	.word	0x000301f9

00015c04 <bt_att_create_pdu>:
{
   15c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c06:	af00      	add	r7, sp, #0
   15c08:	460e      	mov	r6, r1
   15c0a:	4615      	mov	r5, r2
	att = att_get(conn);
   15c0c:	f7ff fcee 	bl	155ec <att_get>
	if (!att) {
   15c10:	b1e0      	cbz	r0, 15c4c <bt_att_create_pdu+0x48>
	return list->head;
   15c12:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c14:	4618      	mov	r0, r3
   15c16:	b11b      	cbz	r3, 15c20 <bt_att_create_pdu+0x1c>
	return node->next;
   15c18:	f850 3988 	ldr.w	r3, [r0], #-136
   15c1c:	b103      	cbz	r3, 15c20 <bt_att_create_pdu+0x1c>
   15c1e:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15c20:	1c6c      	adds	r4, r5, #1
   15c22:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c24:	b118      	cbz	r0, 15c2e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15c26:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   15c28:	42a1      	cmp	r1, r4
   15c2a:	d219      	bcs.n	15c60 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c2c:	b983      	cbnz	r3, 15c50 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   15c2e:	466d      	mov	r5, sp
   15c30:	b088      	sub	sp, #32
   15c32:	466a      	mov	r2, sp
   15c34:	4b0e      	ldr	r3, [pc, #56]	; (15c70 <bt_att_create_pdu+0x6c>)
   15c36:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15c3a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15c3e:	2303      	movs	r3, #3
   15c40:	480c      	ldr	r0, [pc, #48]	; (15c74 <bt_att_create_pdu+0x70>)
   15c42:	f842 3f10 	str.w	r3, [r2, #16]!
   15c46:	f01a fb73 	bl	30330 <z_log_msg_static_create.constprop.0>
   15c4a:	46ad      	mov	sp, r5
		return NULL;
   15c4c:	2000      	movs	r0, #0
   15c4e:	e00b      	b.n	15c68 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c50:	4618      	mov	r0, r3
   15c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   15c56:	b14b      	cbz	r3, 15c6c <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15c58:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c5a:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15c5c:	428a      	cmp	r2, r1
   15c5e:	d8f7      	bhi.n	15c50 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   15c60:	462a      	mov	r2, r5
   15c62:	4631      	mov	r1, r6
   15c64:	f7ff fe46 	bl	158f4 <bt_att_chan_create_pdu>
}
   15c68:	46bd      	mov	sp, r7
   15c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15c6c:	4614      	mov	r4, r2
   15c6e:	e7da      	b.n	15c26 <bt_att_create_pdu+0x22>
   15c70:	0003adbc 	.word	0x0003adbc
   15c74:	000363f0 	.word	0x000363f0

00015c78 <att_read_group_req>:
{
   15c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15c7c:	8a0e      	ldrh	r6, [r1, #16]
{
   15c7e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   15c80:	3e04      	subs	r6, #4
   15c82:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   15c84:	2e02      	cmp	r6, #2
{
   15c86:	4608      	mov	r0, r1
   15c88:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15c8a:	d001      	beq.n	15c90 <att_read_group_req+0x18>
   15c8c:	2e10      	cmp	r6, #16
   15c8e:	d16a      	bne.n	15d66 <att_read_group_req+0xee>
   15c90:	2104      	movs	r1, #4
   15c92:	300c      	adds	r0, #12
   15c94:	f002 fcd2 	bl	1863c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15c98:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15c9c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15c9e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15ca0:	1d01      	adds	r1, r0, #4
   15ca2:	4632      	mov	r2, r6
   15ca4:	4640      	mov	r0, r8
   15ca6:	f019 ff94 	bl	2fbd2 <bt_uuid_create>
   15caa:	2800      	cmp	r0, #0
   15cac:	d05d      	beq.n	15d6a <att_read_group_req+0xf2>
	if (!start || !end) {
   15cae:	2d00      	cmp	r5, #0
   15cb0:	d03a      	beq.n	15d28 <att_read_group_req+0xb0>
   15cb2:	2600      	movs	r6, #0
   15cb4:	2f00      	cmp	r7, #0
   15cb6:	d036      	beq.n	15d26 <att_read_group_req+0xae>
	if (start > end) {
   15cb8:	42bd      	cmp	r5, r7
   15cba:	d835      	bhi.n	15d28 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15cbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15cc0:	4640      	mov	r0, r8
   15cc2:	a901      	add	r1, sp, #4
   15cc4:	f88d 6004 	strb.w	r6, [sp, #4]
   15cc8:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ccc:	f019 ff53 	bl	2fb76 <bt_uuid_cmp>
   15cd0:	bb70      	cbnz	r0, 15d30 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   15cd2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15cd4:	2214      	movs	r2, #20
   15cd6:	2100      	movs	r1, #0
   15cd8:	a807      	add	r0, sp, #28
   15cda:	f01f f9a7 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15cde:	2201      	movs	r2, #1
   15ce0:	2111      	movs	r1, #17
   15ce2:	4630      	mov	r0, r6
   15ce4:	f7ff ff8e 	bl	15c04 <bt_att_create_pdu>
   15ce8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15cea:	2800      	cmp	r0, #0
   15cec:	d03d      	beq.n	15d6a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   15cee:	2101      	movs	r1, #1
   15cf0:	300c      	adds	r0, #12
	data.uuid = uuid;
   15cf2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   15cf6:	f002 fcbf 	bl	18678 <net_buf_simple_add>
	data.rsp->len = 0U;
   15cfa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15cfc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15cfe:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   15d00:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15d02:	4a1b      	ldr	r2, [pc, #108]	; (15d70 <att_read_group_req+0xf8>)
	data.group = NULL;
   15d04:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15d06:	4628      	mov	r0, r5
   15d08:	ab07      	add	r3, sp, #28
   15d0a:	f01a faa6 	bl	3025a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d10:	781b      	ldrb	r3, [r3, #0]
   15d12:	bb1b      	cbnz	r3, 15d5c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15d16:	6998      	ldr	r0, [r3, #24]
   15d18:	f7ff faba 	bl	15290 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15d1e:	f002 fb67 	bl	183f0 <net_buf_unref>
	if (!req) {
   15d22:	230a      	movs	r3, #10
   15d24:	e001      	b.n	15d2a <att_read_group_req+0xb2>
			*err = 0U;
   15d26:	463d      	mov	r5, r7
	if (!req) {
   15d28:	2301      	movs	r3, #1
   15d2a:	462a      	mov	r2, r5
   15d2c:	2110      	movs	r1, #16
   15d2e:	e00e      	b.n	15d4e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15d30:	f642 0301 	movw	r3, #10241	; 0x2801
   15d34:	4640      	mov	r0, r8
   15d36:	a907      	add	r1, sp, #28
   15d38:	f88d 601c 	strb.w	r6, [sp, #28]
   15d3c:	f8ad 301e 	strh.w	r3, [sp, #30]
   15d40:	f019 ff19 	bl	2fb76 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15d44:	2800      	cmp	r0, #0
   15d46:	d0c4      	beq.n	15cd2 <att_read_group_req+0x5a>
	if (!req) {
   15d48:	2310      	movs	r3, #16
   15d4a:	462a      	mov	r2, r5
   15d4c:	4619      	mov	r1, r3
   15d4e:	4620      	mov	r0, r4
   15d50:	f01a fd4b 	bl	307ea <send_err_rsp.part.0>
		return 0;
   15d54:	2000      	movs	r0, #0
}
   15d56:	b00c      	add	sp, #48	; 0x30
   15d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   15d5c:	4620      	mov	r0, r4
   15d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15d60:	f01a fb1a 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   15d64:	e7f6      	b.n	15d54 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   15d66:	2004      	movs	r0, #4
   15d68:	e7f5      	b.n	15d56 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   15d6a:	200e      	movs	r0, #14
   15d6c:	e7f3      	b.n	15d56 <att_read_group_req+0xde>
   15d6e:	bf00      	nop
   15d70:	00015655 	.word	0x00015655

00015d74 <att_read_mult_vl_req>:
{
   15d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15d78:	6846      	ldr	r6, [r0, #4]
{
   15d7a:	4604      	mov	r4, r0
   15d7c:	460d      	mov	r5, r1
   15d7e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   15d80:	2101      	movs	r1, #1
   15d82:	4630      	mov	r0, r6
   15d84:	f01b f9ae 	bl	310e4 <bt_gatt_change_aware>
   15d88:	b950      	cbnz	r0, 15da0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15d8a:	2105      	movs	r1, #5
   15d8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15d90:	f01a fbc1 	bl	30516 <atomic_test_and_set_bit>
   15d94:	2800      	cmp	r0, #0
   15d96:	d13b      	bne.n	15e10 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15d98:	2012      	movs	r0, #18
}
   15d9a:	b005      	add	sp, #20
   15d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15da0:	2210      	movs	r2, #16
   15da2:	2100      	movs	r1, #0
   15da4:	4668      	mov	r0, sp
   15da6:	f01f f941 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   15daa:	2200      	movs	r2, #0
   15dac:	2121      	movs	r1, #33	; 0x21
   15dae:	4630      	mov	r0, r6
   15db0:	f7ff ff28 	bl	15c04 <bt_att_create_pdu>
   15db4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15db6:	b368      	cbz	r0, 15e14 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15db8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15dbc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15e18 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   15dc0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15dc2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   15dc6:	8a2b      	ldrh	r3, [r5, #16]
   15dc8:	2b01      	cmp	r3, #1
   15dca:	d804      	bhi.n	15dd6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15dcc:	4620      	mov	r0, r4
   15dce:	9902      	ldr	r1, [sp, #8]
   15dd0:	f01a fae2 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   15dd4:	e01c      	b.n	15e10 <att_read_mult_vl_req+0x9c>
   15dd6:	4638      	mov	r0, r7
   15dd8:	f01b f9fd 	bl	311d6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15ddc:	466b      	mov	r3, sp
   15dde:	464a      	mov	r2, r9
   15de0:	4601      	mov	r1, r0
   15de2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15de4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15de8:	f01a fa37 	bl	3025a <bt_gatt_foreach_attr>
		if (data.err) {
   15dec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15df0:	2b00      	cmp	r3, #0
   15df2:	d0e8      	beq.n	15dc6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15df4:	9b02      	ldr	r3, [sp, #8]
   15df6:	6998      	ldr	r0, [r3, #24]
   15df8:	f7ff fa4a 	bl	15290 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15dfc:	9802      	ldr	r0, [sp, #8]
   15dfe:	f002 faf7 	bl	183f0 <net_buf_unref>
	if (!req) {
   15e02:	4632      	mov	r2, r6
   15e04:	2120      	movs	r1, #32
   15e06:	4620      	mov	r0, r4
   15e08:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15e0c:	f01a fced 	bl	307ea <send_err_rsp.part.0>
			return 0;
   15e10:	2000      	movs	r0, #0
   15e12:	e7c2      	b.n	15d9a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15e14:	200e      	movs	r0, #14
   15e16:	e7c0      	b.n	15d9a <att_read_mult_vl_req+0x26>
   15e18:	0003057f 	.word	0x0003057f

00015e1c <att_read_mult_req>:
{
   15e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15e20:	6846      	ldr	r6, [r0, #4]
{
   15e22:	4604      	mov	r4, r0
   15e24:	460d      	mov	r5, r1
   15e26:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   15e28:	2101      	movs	r1, #1
   15e2a:	4630      	mov	r0, r6
   15e2c:	f01b f95a 	bl	310e4 <bt_gatt_change_aware>
   15e30:	b950      	cbnz	r0, 15e48 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15e32:	2105      	movs	r1, #5
   15e34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15e38:	f01a fb6d 	bl	30516 <atomic_test_and_set_bit>
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d13b      	bne.n	15eb8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15e40:	2012      	movs	r0, #18
}
   15e42:	b005      	add	sp, #20
   15e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15e48:	2210      	movs	r2, #16
   15e4a:	2100      	movs	r1, #0
   15e4c:	4668      	mov	r0, sp
   15e4e:	f01f f8ed 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15e52:	2200      	movs	r2, #0
   15e54:	210f      	movs	r1, #15
   15e56:	4630      	mov	r0, r6
   15e58:	f7ff fed4 	bl	15c04 <bt_att_create_pdu>
   15e5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15e5e:	b368      	cbz	r0, 15ebc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15e60:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15e64:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15ec0 <att_read_mult_req+0xa4>
	data.chan = chan;
   15e68:	9400      	str	r4, [sp, #0]
   15e6a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   15e6e:	8a2b      	ldrh	r3, [r5, #16]
   15e70:	2b01      	cmp	r3, #1
   15e72:	d804      	bhi.n	15e7e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15e74:	4620      	mov	r0, r4
   15e76:	9902      	ldr	r1, [sp, #8]
   15e78:	f01a fa8e 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   15e7c:	e01c      	b.n	15eb8 <att_read_mult_req+0x9c>
   15e7e:	4638      	mov	r0, r7
   15e80:	f01b f9a9 	bl	311d6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15e84:	466b      	mov	r3, sp
   15e86:	464a      	mov	r2, r9
   15e88:	4601      	mov	r1, r0
   15e8a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15e8c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15e90:	f01a f9e3 	bl	3025a <bt_gatt_foreach_attr>
		if (data.err) {
   15e94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15e98:	2b00      	cmp	r3, #0
   15e9a:	d0e8      	beq.n	15e6e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15e9c:	9b02      	ldr	r3, [sp, #8]
   15e9e:	6998      	ldr	r0, [r3, #24]
   15ea0:	f7ff f9f6 	bl	15290 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15ea4:	9802      	ldr	r0, [sp, #8]
   15ea6:	f002 faa3 	bl	183f0 <net_buf_unref>
	if (!req) {
   15eaa:	4632      	mov	r2, r6
   15eac:	210e      	movs	r1, #14
   15eae:	4620      	mov	r0, r4
   15eb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15eb4:	f01a fc99 	bl	307ea <send_err_rsp.part.0>
			return 0;
   15eb8:	2000      	movs	r0, #0
   15eba:	e7c2      	b.n	15e42 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15ebc:	200e      	movs	r0, #14
   15ebe:	e7c0      	b.n	15e42 <att_read_mult_req+0x26>
   15ec0:	00030539 	.word	0x00030539

00015ec4 <att_read_rsp>:
{
   15ec4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15ec8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   15ecc:	4604      	mov	r4, r0
   15ece:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15ed0:	4640      	mov	r0, r8
   15ed2:	2101      	movs	r1, #1
{
   15ed4:	4617      	mov	r7, r2
   15ed6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15ed8:	f01b f904 	bl	310e4 <bt_gatt_change_aware>
   15edc:	b948      	cbnz	r0, 15ef2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15ede:	2105      	movs	r1, #5
   15ee0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15ee4:	f01a fb17 	bl	30516 <atomic_test_and_set_bit>
   15ee8:	bb78      	cbnz	r0, 15f4a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15eea:	2012      	movs	r0, #18
}
   15eec:	b004      	add	sp, #16
   15eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   15ef2:	b38d      	cbz	r5, 15f58 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   15ef4:	2210      	movs	r2, #16
   15ef6:	2100      	movs	r1, #0
   15ef8:	4668      	mov	r0, sp
   15efa:	f01f f897 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15efe:	2200      	movs	r2, #0
   15f00:	4639      	mov	r1, r7
   15f02:	4640      	mov	r0, r8
   15f04:	f7ff fe7e 	bl	15c04 <bt_att_create_pdu>
   15f08:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15f0a:	b338      	cbz	r0, 15f5c <att_read_rsp+0x98>
	data.offset = offset;
   15f0c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f10:	4629      	mov	r1, r5
	data.offset = offset;
   15f12:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f16:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f18:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15f1a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f1e:	4a10      	ldr	r2, [pc, #64]	; (15f60 <att_read_rsp+0x9c>)
   15f20:	466b      	mov	r3, sp
	data.chan = chan;
   15f22:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15f24:	f01a f999 	bl	3025a <bt_gatt_foreach_attr>
	if (data.err) {
   15f28:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15f2c:	b17b      	cbz	r3, 15f4e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15f2e:	9b02      	ldr	r3, [sp, #8]
   15f30:	6998      	ldr	r0, [r3, #24]
   15f32:	f7ff f9ad 	bl	15290 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15f36:	9802      	ldr	r0, [sp, #8]
   15f38:	f002 fa5a 	bl	183f0 <net_buf_unref>
	if (!req) {
   15f3c:	462a      	mov	r2, r5
   15f3e:	4631      	mov	r1, r6
   15f40:	4620      	mov	r0, r4
   15f42:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15f46:	f01a fc50 	bl	307ea <send_err_rsp.part.0>
			return 0;
   15f4a:	2000      	movs	r0, #0
   15f4c:	e7ce      	b.n	15eec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   15f4e:	4620      	mov	r0, r4
   15f50:	9902      	ldr	r1, [sp, #8]
   15f52:	f01a fa21 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   15f56:	e7f8      	b.n	15f4a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   15f58:	2001      	movs	r0, #1
   15f5a:	e7c7      	b.n	15eec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   15f5c:	200e      	movs	r0, #14
   15f5e:	e7c5      	b.n	15eec <att_read_rsp+0x28>
   15f60:	00030539 	.word	0x00030539

00015f64 <att_read_type_req>:
{
   15f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15f68:	8a0d      	ldrh	r5, [r1, #16]
{
   15f6a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   15f6c:	3d04      	subs	r5, #4
   15f6e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   15f70:	2d02      	cmp	r5, #2
{
   15f72:	4608      	mov	r0, r1
   15f74:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15f76:	d001      	beq.n	15f7c <att_read_type_req+0x18>
   15f78:	2d10      	cmp	r5, #16
   15f7a:	d150      	bne.n	1601e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15f7c:	2104      	movs	r1, #4
   15f7e:	300c      	adds	r0, #12
   15f80:	f002 fb5c 	bl	1863c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15f84:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15f88:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15f8a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15f8c:	1d01      	adds	r1, r0, #4
   15f8e:	462a      	mov	r2, r5
   15f90:	4640      	mov	r0, r8
   15f92:	f019 fe1e 	bl	2fbd2 <bt_uuid_create>
   15f96:	b188      	cbz	r0, 15fbc <att_read_type_req+0x58>
	if (!start || !end) {
   15f98:	b19e      	cbz	r6, 15fc2 <att_read_type_req+0x5e>
   15f9a:	b18f      	cbz	r7, 15fc0 <att_read_type_req+0x5c>
	if (start > end) {
   15f9c:	42b7      	cmp	r7, r6
   15f9e:	d310      	bcc.n	15fc2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15fa0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15fa2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15fa4:	2100      	movs	r1, #0
   15fa6:	eb0d 0002 	add.w	r0, sp, r2
   15faa:	f01f f83f 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15fae:	2201      	movs	r2, #1
   15fb0:	2109      	movs	r1, #9
   15fb2:	4628      	mov	r0, r5
   15fb4:	f7ff fe26 	bl	15c04 <bt_att_create_pdu>
   15fb8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15fba:	b960      	cbnz	r0, 15fd6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   15fbc:	200e      	movs	r0, #14
   15fbe:	e007      	b.n	15fd0 <att_read_type_req+0x6c>
			*err = 0U;
   15fc0:	463e      	mov	r6, r7
	if (!req) {
   15fc2:	2301      	movs	r3, #1
   15fc4:	4632      	mov	r2, r6
   15fc6:	2108      	movs	r1, #8
   15fc8:	4620      	mov	r0, r4
   15fca:	f01a fc0e 	bl	307ea <send_err_rsp.part.0>
		return 0;
   15fce:	2000      	movs	r0, #0
}
   15fd0:	b00c      	add	sp, #48	; 0x30
   15fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15fd6:	2101      	movs	r1, #1
   15fd8:	300c      	adds	r0, #12
	data.uuid = uuid;
   15fda:	e9cd 4806 	strd	r4, r8, [sp, #24]
   15fde:	f002 fb4b 	bl	18678 <net_buf_simple_add>
	data.rsp->len = 0U;
   15fe2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15fe4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   15fe6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15fe8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15fea:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15fec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15ff0:	4630      	mov	r0, r6
   15ff2:	ab06      	add	r3, sp, #24
   15ff4:	4a0b      	ldr	r2, [pc, #44]	; (16024 <att_read_type_req+0xc0>)
   15ff6:	f01a f930 	bl	3025a <bt_gatt_foreach_attr>
	if (data.err) {
   15ffa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15ffe:	b14b      	cbz	r3, 16014 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16000:	9b08      	ldr	r3, [sp, #32]
   16002:	6998      	ldr	r0, [r3, #24]
   16004:	f7ff f944 	bl	15290 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16008:	9808      	ldr	r0, [sp, #32]
   1600a:	f002 f9f1 	bl	183f0 <net_buf_unref>
	if (!req) {
   1600e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16012:	e7d7      	b.n	15fc4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16014:	4620      	mov	r0, r4
   16016:	9908      	ldr	r1, [sp, #32]
   16018:	f01a f9be 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   1601c:	e7d7      	b.n	15fce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1601e:	2004      	movs	r0, #4
   16020:	e7d6      	b.n	15fd0 <att_read_type_req+0x6c>
   16022:	bf00      	nop
   16024:	0001573d 	.word	0x0001573d

00016028 <att_find_type_req>:
{
   16028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1602c:	460f      	mov	r7, r1
   1602e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16030:	2106      	movs	r1, #6
   16032:	b086      	sub	sp, #24
   16034:	f107 000c 	add.w	r0, r7, #12
   16038:	f002 fb00 	bl	1863c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1603c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1603e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16042:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16044:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16048:	b1c5      	cbz	r5, 1607c <att_find_type_req+0x54>
   1604a:	2300      	movs	r3, #0
   1604c:	f1b8 0f00 	cmp.w	r8, #0
   16050:	d013      	beq.n	1607a <att_find_type_req+0x52>
	if (start > end) {
   16052:	4545      	cmp	r5, r8
   16054:	d812      	bhi.n	1607c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16056:	f88d 3000 	strb.w	r3, [sp]
   1605a:	f88d 3004 	strb.w	r3, [sp, #4]
   1605e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16062:	4668      	mov	r0, sp
   16064:	a901      	add	r1, sp, #4
   16066:	f8ad 2002 	strh.w	r2, [sp, #2]
   1606a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1606e:	f019 fd82 	bl	2fb76 <bt_uuid_cmp>
   16072:	4606      	mov	r6, r0
   16074:	b160      	cbz	r0, 16090 <att_find_type_req+0x68>
	if (!req) {
   16076:	230a      	movs	r3, #10
   16078:	e001      	b.n	1607e <att_find_type_req+0x56>
			*err = 0U;
   1607a:	4645      	mov	r5, r8
	if (!req) {
   1607c:	2301      	movs	r3, #1
   1607e:	462a      	mov	r2, r5
   16080:	2106      	movs	r1, #6
   16082:	4620      	mov	r0, r4
   16084:	f01a fbb1 	bl	307ea <send_err_rsp.part.0>
		return 0;
   16088:	2000      	movs	r0, #0
}
   1608a:	b006      	add	sp, #24
   1608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   16090:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16094:	4601      	mov	r1, r0
   16096:	2214      	movs	r2, #20
   16098:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1609a:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1609c:	f01e ffc6 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   160a0:	4632      	mov	r2, r6
   160a2:	2107      	movs	r1, #7
   160a4:	4650      	mov	r0, sl
   160a6:	f7ff fdad 	bl	15c04 <bt_att_create_pdu>
   160aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   160ac:	b1f8      	cbz	r0, 160ee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   160ae:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   160b0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   160b2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   160b6:	4628      	mov	r0, r5
   160b8:	ab01      	add	r3, sp, #4
   160ba:	4a0e      	ldr	r2, [pc, #56]	; (160f4 <att_find_type_req+0xcc>)
	data.value = value;
   160bc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   160c0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   160c2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   160c6:	f01a f8c8 	bl	3025a <bt_gatt_foreach_attr>
	if (data.err) {
   160ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   160ce:	b14b      	cbz	r3, 160e4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   160d0:	9b02      	ldr	r3, [sp, #8]
   160d2:	6998      	ldr	r0, [r3, #24]
   160d4:	f7ff f8dc 	bl	15290 <tx_meta_data_free>
		net_buf_unref(data.buf);
   160d8:	9802      	ldr	r0, [sp, #8]
   160da:	f002 f989 	bl	183f0 <net_buf_unref>
	if (!req) {
   160de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   160e2:	e7cc      	b.n	1607e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   160e4:	4620      	mov	r0, r4
   160e6:	9902      	ldr	r1, [sp, #8]
   160e8:	f01a f956 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   160ec:	e7cc      	b.n	16088 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   160ee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   160f0:	e7cb      	b.n	1608a <att_find_type_req+0x62>
   160f2:	bf00      	nop
   160f4:	000152d1 	.word	0x000152d1

000160f8 <att_find_info_req>:
{
   160f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   160fa:	68cb      	ldr	r3, [r1, #12]
{
   160fc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   160fe:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16100:	885e      	ldrh	r6, [r3, #2]
{
   16102:	b085      	sub	sp, #20
	if (!start || !end) {
   16104:	b195      	cbz	r5, 1612c <att_find_info_req+0x34>
   16106:	b186      	cbz	r6, 1612a <att_find_info_req+0x32>
	if (start > end) {
   16108:	42b5      	cmp	r5, r6
   1610a:	d80f      	bhi.n	1612c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1610c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1610e:	2210      	movs	r2, #16
   16110:	2100      	movs	r1, #0
   16112:	4668      	mov	r0, sp
   16114:	f01e ff8a 	bl	3502c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16118:	2200      	movs	r2, #0
   1611a:	2105      	movs	r1, #5
   1611c:	4638      	mov	r0, r7
   1611e:	f7ff fd71 	bl	15c04 <bt_att_create_pdu>
   16122:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16124:	b958      	cbnz	r0, 1613e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16126:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16128:	e007      	b.n	1613a <att_find_info_req+0x42>
			*err = 0U;
   1612a:	4635      	mov	r5, r6
	if (!req) {
   1612c:	2301      	movs	r3, #1
   1612e:	462a      	mov	r2, r5
   16130:	2104      	movs	r1, #4
   16132:	4620      	mov	r0, r4
   16134:	f01a fb59 	bl	307ea <send_err_rsp.part.0>
		return 0;
   16138:	2000      	movs	r0, #0
}
   1613a:	b005      	add	sp, #20
   1613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1613e:	466b      	mov	r3, sp
   16140:	4631      	mov	r1, r6
   16142:	4628      	mov	r0, r5
   16144:	4a09      	ldr	r2, [pc, #36]	; (1616c <att_find_info_req+0x74>)
	data.chan = chan;
   16146:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16148:	f01a f887 	bl	3025a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1614c:	9b02      	ldr	r3, [sp, #8]
   1614e:	b943      	cbnz	r3, 16162 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16150:	9b01      	ldr	r3, [sp, #4]
   16152:	6998      	ldr	r0, [r3, #24]
   16154:	f7ff f89c 	bl	15290 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16158:	9801      	ldr	r0, [sp, #4]
   1615a:	f002 f949 	bl	183f0 <net_buf_unref>
	if (!req) {
   1615e:	230a      	movs	r3, #10
   16160:	e7e5      	b.n	1612e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16162:	4620      	mov	r0, r4
   16164:	9901      	ldr	r1, [sp, #4]
   16166:	f01a f917 	bl	30398 <bt_att_chan_send_rsp>
	return 0;
   1616a:	e7e5      	b.n	16138 <att_find_info_req+0x40>
   1616c:	00030291 	.word	0x00030291

00016170 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16170:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16172:	4c0b      	ldr	r4, [pc, #44]	; (161a0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16174:	4d0b      	ldr	r5, [pc, #44]	; (161a4 <bt_att_init+0x34>)
   16176:	4620      	mov	r0, r4
   16178:	f01e fd35 	bl	34be6 <z_impl_k_queue_init>
   1617c:	4629      	mov	r1, r5
   1617e:	4620      	mov	r0, r4
   16180:	f01e fd3e 	bl	34c00 <k_queue_append>
   16184:	4620      	mov	r0, r4
   16186:	f105 0114 	add.w	r1, r5, #20
   1618a:	f01e fd39 	bl	34c00 <k_queue_append>
   1618e:	4620      	mov	r0, r4
   16190:	f105 0128 	add.w	r1, r5, #40	; 0x28
   16194:	f01e fd34 	bl	34c00 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1619c:	f000 bc28 	b.w	169f0 <bt_gatt_init>
   161a0:	2000d014 	.word	0x2000d014
   161a4:	2000fbf0 	.word	0x2000fbf0

000161a8 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   161a8:	2300      	movs	r3, #0
{
   161aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   161ac:	4605      	mov	r5, r0
   161ae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   161b0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   161b2:	f014 fc4f 	bl	2aa54 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   161b6:	4b0c      	ldr	r3, [pc, #48]	; (161e8 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   161b8:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   161ba:	681b      	ldr	r3, [r3, #0]
   161bc:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   161be:	bf04      	itt	eq
   161c0:	2500      	moveq	r5, #0
   161c2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   161c4:	462a      	mov	r2, r5
   161c6:	4623      	mov	r3, r4
   161c8:	4808      	ldr	r0, [pc, #32]	; (161ec <bt_att_req_alloc+0x44>)
   161ca:	f012 f91b 	bl	28404 <k_mem_slab_alloc>
   161ce:	4601      	mov	r1, r0
   161d0:	b940      	cbnz	r0, 161e4 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   161d2:	9b01      	ldr	r3, [sp, #4]
   161d4:	2210      	movs	r2, #16
   161d6:	4618      	mov	r0, r3
   161d8:	f01e ff28 	bl	3502c <memset>
   161dc:	4603      	mov	r3, r0

	return req;
}
   161de:	4618      	mov	r0, r3
   161e0:	b003      	add	sp, #12
   161e2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   161e4:	2300      	movs	r3, #0
   161e6:	e7fa      	b.n	161de <bt_att_req_alloc+0x36>
   161e8:	2000fc2c 	.word	0x2000fc2c
   161ec:	2000ce04 	.word	0x2000ce04

000161f0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   161f0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   161f2:	6883      	ldr	r3, [r0, #8]
{
   161f4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   161f6:	b14b      	cbz	r3, 1620c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   161f8:	6998      	ldr	r0, [r3, #24]
   161fa:	f7ff f849 	bl	15290 <tx_meta_data_free>
		net_buf_unref(req->buf);
   161fe:	9b01      	ldr	r3, [sp, #4]
   16200:	6898      	ldr	r0, [r3, #8]
   16202:	f002 f8f5 	bl	183f0 <net_buf_unref>
		req->buf = NULL;
   16206:	2200      	movs	r2, #0
   16208:	9b01      	ldr	r3, [sp, #4]
   1620a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1620c:	4803      	ldr	r0, [pc, #12]	; (1621c <bt_att_req_free+0x2c>)
   1620e:	a901      	add	r1, sp, #4
   16210:	f012 f962 	bl	284d8 <k_mem_slab_free>
}
   16214:	b003      	add	sp, #12
   16216:	f85d fb04 	ldr.w	pc, [sp], #4
   1621a:	bf00      	nop
   1621c:	2000ce04 	.word	0x2000ce04

00016220 <att_handle_rsp>:
{
   16220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16224:	4604      	mov	r4, r0
   16226:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   16228:	3058      	adds	r0, #88	; 0x58
{
   1622a:	460e      	mov	r6, r1
   1622c:	4617      	mov	r7, r2
   1622e:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16230:	f013 faa2 	bl	29778 <k_work_cancel_delayable>
	if (!chan->req) {
   16234:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   16236:	b980      	cbnz	r0, 1625a <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   16238:	4b19      	ldr	r3, [pc, #100]	; (162a0 <att_handle_rsp+0x80>)
   1623a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1623e:	9307      	str	r3, [sp, #28]
   16240:	2302      	movs	r3, #2
   16242:	4818      	ldr	r0, [pc, #96]	; (162a4 <att_handle_rsp+0x84>)
   16244:	aa06      	add	r2, sp, #24
   16246:	9306      	str	r3, [sp, #24]
   16248:	f01a f872 	bl	30330 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1624c:	6820      	ldr	r0, [r4, #0]
   1624e:	f01a f9f7 	bl	30640 <att_req_send_process>
}
   16252:	2000      	movs	r0, #0
   16254:	b008      	add	sp, #32
   16256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1625a:	4b13      	ldr	r3, [pc, #76]	; (162a8 <att_handle_rsp+0x88>)
   1625c:	f04f 0800 	mov.w	r8, #0
   16260:	4298      	cmp	r0, r3
   16262:	d102      	bne.n	1626a <att_handle_rsp+0x4a>
		chan->req = NULL;
   16264:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   16268:	e7f0      	b.n	1624c <att_handle_rsp+0x2c>
	func = chan->req->func;
   1626a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1626e:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   16272:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   16274:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   16278:	f7ff ffba 	bl	161f0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1627c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1627e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   16282:	f01a f9dd 	bl	30640 <att_req_send_process>
	if (func) {
   16286:	f1b9 0f00 	cmp.w	r9, #0
   1628a:	d0e2      	beq.n	16252 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1628c:	6820      	ldr	r0, [r4, #0]
   1628e:	f8cd a000 	str.w	sl, [sp]
   16292:	463b      	mov	r3, r7
   16294:	4632      	mov	r2, r6
   16296:	4629      	mov	r1, r5
   16298:	6800      	ldr	r0, [r0, #0]
   1629a:	47c8      	blx	r9
   1629c:	e7d9      	b.n	16252 <att_handle_rsp+0x32>
   1629e:	bf00      	nop
   162a0:	0003add7 	.word	0x0003add7
   162a4:	000363f0 	.word	0x000363f0
   162a8:	2000fc30 	.word	0x2000fc30

000162ac <att_error_rsp>:
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   162ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
	rsp = (void *)buf->data;
   162ae:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   162b0:	b153      	cbz	r3, 162c8 <att_error_rsp+0x1c>
   162b2:	4906      	ldr	r1, [pc, #24]	; (162cc <att_error_rsp+0x20>)
   162b4:	428b      	cmp	r3, r1
   162b6:	d007      	beq.n	162c8 <att_error_rsp+0x1c>
   162b8:	78d3      	ldrb	r3, [r2, #3]
		err = BT_ATT_ERR_UNLIKELY;
   162ba:	2b00      	cmp	r3, #0
   162bc:	bf08      	it	eq
   162be:	230e      	moveq	r3, #14
	return att_handle_rsp(chan, NULL, 0, err);
   162c0:	2200      	movs	r2, #0
   162c2:	4611      	mov	r1, r2
   162c4:	f7ff bfac 	b.w	16220 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   162c8:	230e      	movs	r3, #14
   162ca:	e7f9      	b.n	162c0 <att_error_rsp+0x14>
   162cc:	2000fc30 	.word	0x2000fc30

000162d0 <bt_att_disconnected>:
{
   162d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   162d4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   162d8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   162da:	2e00      	cmp	r6, #0
   162dc:	d05a      	beq.n	16394 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   162de:	f100 0184 	add.w	r1, r0, #132	; 0x84
   162e2:	f106 0028 	add.w	r0, r6, #40	; 0x28
   162e6:	f01a f8f0 	bl	304ca <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   162ea:	1f27      	subs	r7, r4, #4
   162ec:	f104 0838 	add.w	r8, r4, #56	; 0x38
   162f0:	2200      	movs	r2, #0
   162f2:	2300      	movs	r3, #0
   162f4:	4640      	mov	r0, r8
   162f6:	f01a ff5e 	bl	311b6 <net_buf_get>
   162fa:	4605      	mov	r5, r0
   162fc:	bb48      	cbnz	r0, 16352 <bt_att_disconnected+0x82>
	if (chan->req) {
   162fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16300:	b12b      	cbz	r3, 1630e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16302:	4602      	mov	r2, r0
   16304:	4601      	mov	r1, r0
   16306:	230e      	movs	r3, #14
   16308:	4638      	mov	r0, r7
   1630a:	f7ff ff89 	bl	16220 <att_handle_rsp>
	chan->att = NULL;
   1630e:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   16310:	2102      	movs	r1, #2
	chan->att = NULL;
   16312:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   16316:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1631a:	f01a f8ef 	bl	304fc <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1631e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16320:	2b00      	cmp	r3, #0
   16322:	d137      	bne.n	16394 <bt_att_disconnected+0xc4>
	att_reset(att);
   16324:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16326:	9803      	ldr	r0, [sp, #12]
   16328:	2200      	movs	r2, #0
   1632a:	2300      	movs	r3, #0
   1632c:	300c      	adds	r0, #12
   1632e:	f01a ff42 	bl	311b6 <net_buf_get>
   16332:	4605      	mov	r5, r0
   16334:	b9a0      	cbnz	r0, 16360 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   16336:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16338:	6845      	ldr	r5, [r0, #4]
   1633a:	b9c5      	cbnz	r5, 1636e <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1633c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1633e:	a903      	add	r1, sp, #12
   16340:	4816      	ldr	r0, [pc, #88]	; (1639c <bt_att_disconnected+0xcc>)
   16342:	f012 f8c9 	bl	284d8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16346:	6820      	ldr	r0, [r4, #0]
}
   16348:	b004      	add	sp, #16
   1634a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1634e:	f001 be77 	b.w	18040 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16352:	69a8      	ldr	r0, [r5, #24]
   16354:	f7fe ff9c 	bl	15290 <tx_meta_data_free>
		net_buf_unref(buf);
   16358:	4628      	mov	r0, r5
   1635a:	f002 f849 	bl	183f0 <net_buf_unref>
   1635e:	e7c7      	b.n	162f0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16360:	69a8      	ldr	r0, [r5, #24]
   16362:	f7fe ff95 	bl	15290 <tx_meta_data_free>
		net_buf_unref(buf);
   16366:	4628      	mov	r0, r5
   16368:	f002 f842 	bl	183f0 <net_buf_unref>
   1636c:	e7db      	b.n	16326 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1636e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16370:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16372:	4295      	cmp	r5, r2
	list->head = node;
   16374:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16376:	bf08      	it	eq
   16378:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1637a:	686e      	ldr	r6, [r5, #4]
   1637c:	b136      	cbz	r6, 1638c <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1637e:	68eb      	ldr	r3, [r5, #12]
   16380:	210e      	movs	r1, #14
   16382:	9300      	str	r3, [sp, #0]
   16384:	2300      	movs	r3, #0
   16386:	6800      	ldr	r0, [r0, #0]
   16388:	461a      	mov	r2, r3
   1638a:	47b0      	blx	r6
		bt_att_req_free(req);
   1638c:	4628      	mov	r0, r5
   1638e:	f7ff ff2f 	bl	161f0 <bt_att_req_free>
   16392:	e7d0      	b.n	16336 <bt_att_disconnected+0x66>
}
   16394:	b004      	add	sp, #16
   16396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1639a:	bf00      	nop
   1639c:	2000cdc4 	.word	0x2000cdc4

000163a0 <att_timeout>:
{
   163a0:	b510      	push	{r4, lr}
   163a2:	4604      	mov	r4, r0
   163a4:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   163a6:	4b08      	ldr	r3, [pc, #32]	; (163c8 <att_timeout+0x28>)
   163a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   163ac:	9305      	str	r3, [sp, #20]
   163ae:	2302      	movs	r3, #2
   163b0:	4806      	ldr	r0, [pc, #24]	; (163cc <att_timeout+0x2c>)
   163b2:	aa04      	add	r2, sp, #16
   163b4:	9304      	str	r3, [sp, #16]
   163b6:	f019 ffbb 	bl	30330 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   163ba:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   163be:	b006      	add	sp, #24
   163c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   163c4:	f7ff bf84 	b.w	162d0 <bt_att_disconnected>
   163c8:	0003adee 	.word	0x0003adee
   163cc:	000363f0 	.word	0x000363f0

000163d0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   163d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163d2:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   163d4:	b958      	cbnz	r0, 163ee <bt_att_send+0x1e>
   163d6:	4929      	ldr	r1, [pc, #164]	; (1647c <bt_att_send+0xac>)
   163d8:	f640 63ba 	movw	r3, #3770	; 0xeba
   163dc:	4a28      	ldr	r2, [pc, #160]	; (16480 <bt_att_send+0xb0>)
   163de:	4829      	ldr	r0, [pc, #164]	; (16484 <bt_att_send+0xb4>)
   163e0:	f018 fab8 	bl	2e954 <assert_print>
   163e4:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   163e8:	4825      	ldr	r0, [pc, #148]	; (16480 <bt_att_send+0xb0>)
   163ea:	f018 faac 	bl	2e946 <assert_post_action>
   163ee:	b949      	cbnz	r1, 16404 <bt_att_send+0x34>
   163f0:	4925      	ldr	r1, [pc, #148]	; (16488 <bt_att_send+0xb8>)
   163f2:	f640 63bb 	movw	r3, #3771	; 0xebb
   163f6:	4a22      	ldr	r2, [pc, #136]	; (16480 <bt_att_send+0xb0>)
   163f8:	4822      	ldr	r0, [pc, #136]	; (16484 <bt_att_send+0xb4>)
   163fa:	f018 faab 	bl	2e954 <assert_print>
   163fe:	f640 61bb 	movw	r1, #3771	; 0xebb
   16402:	e7f1      	b.n	163e8 <bt_att_send+0x18>

	att = att_get(conn);
   16404:	f7ff f8f2 	bl	155ec <att_get>
	if (!att) {
   16408:	4605      	mov	r5, r0
   1640a:	b940      	cbnz	r0, 1641e <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1640c:	69a0      	ldr	r0, [r4, #24]
   1640e:	f7fe ff3f 	bl	15290 <tx_meta_data_free>
		net_buf_unref(buf);
   16412:	4620      	mov	r0, r4
   16414:	f001 ffec 	bl	183f0 <net_buf_unref>
		return -ENOTCONN;
   16418:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1641e:	f100 060c 	add.w	r6, r0, #12
   16422:	4621      	mov	r1, r4
   16424:	4630      	mov	r0, r6
   16426:	f001 ffbd 	bl	183a4 <net_buf_put>
	return list->head;
   1642a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1642c:	b14d      	cbz	r5, 16442 <bt_att_send+0x72>
	return node->next;
   1642e:	f855 4988 	ldr.w	r4, [r5], #-136
   16432:	b104      	cbz	r4, 16436 <bt_att_send+0x66>
   16434:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   16436:	4631      	mov	r1, r6
   16438:	4628      	mov	r0, r5
   1643a:	f019 ff94 	bl	30366 <process_queue>
		if (!err) {
   1643e:	4603      	mov	r3, r0
   16440:	b980      	cbnz	r0, 16464 <bt_att_send+0x94>
	return 0;
   16442:	2000      	movs	r0, #0
   16444:	e7ea      	b.n	1641c <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16446:	2103      	movs	r1, #3
   16448:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1644c:	f019 fe82 	bl	30154 <atomic_test_bit>
   16450:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16452:	f105 0034 	add.w	r0, r5, #52	; 0x34
   16456:	f019 fe7d 	bl	30154 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1645a:	4287      	cmp	r7, r0
   1645c:	f06f 0301 	mvn.w	r3, #1
   16460:	d107      	bne.n	16472 <bt_att_send+0xa2>
   16462:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16464:	2c00      	cmp	r4, #0
   16466:	d0ec      	beq.n	16442 <bt_att_send+0x72>
   16468:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1646c:	b922      	cbnz	r2, 16478 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   1646e:	3302      	adds	r3, #2
   16470:	d0e9      	beq.n	16446 <bt_att_send+0x76>
{
   16472:	4625      	mov	r5, r4
   16474:	4614      	mov	r4, r2
   16476:	e7de      	b.n	16436 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16478:	3a88      	subs	r2, #136	; 0x88
   1647a:	e7f8      	b.n	1646e <bt_att_send+0x9e>
   1647c:	0003a016 	.word	0x0003a016
   16480:	0003ab94 	.word	0x0003ab94
   16484:	000381c3 	.word	0x000381c3
   16488:	0003b28a 	.word	0x0003b28a

0001648c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1648c:	b510      	push	{r4, lr}
   1648e:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16490:	b958      	cbnz	r0, 164aa <bt_att_req_send+0x1e>
   16492:	4915      	ldr	r1, [pc, #84]	; (164e8 <bt_att_req_send+0x5c>)
   16494:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   16498:	4a14      	ldr	r2, [pc, #80]	; (164ec <bt_att_req_send+0x60>)
   1649a:	4815      	ldr	r0, [pc, #84]	; (164f0 <bt_att_req_send+0x64>)
   1649c:	f018 fa5a 	bl	2e954 <assert_print>
   164a0:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   164a4:	4811      	ldr	r0, [pc, #68]	; (164ec <bt_att_req_send+0x60>)
   164a6:	f018 fa4e 	bl	2e946 <assert_post_action>
   164aa:	b949      	cbnz	r1, 164c0 <bt_att_req_send+0x34>
   164ac:	4911      	ldr	r1, [pc, #68]	; (164f4 <bt_att_req_send+0x68>)
   164ae:	f640 63d1 	movw	r3, #3793	; 0xed1
   164b2:	4a0e      	ldr	r2, [pc, #56]	; (164ec <bt_att_req_send+0x60>)
   164b4:	480e      	ldr	r0, [pc, #56]	; (164f0 <bt_att_req_send+0x64>)
   164b6:	f018 fa4d 	bl	2e954 <assert_print>
   164ba:	f640 61d1 	movw	r1, #3793	; 0xed1
   164be:	e7f1      	b.n	164a4 <bt_att_req_send+0x18>

	att = att_get(conn);
   164c0:	f7ff f894 	bl	155ec <att_get>
	if (!att) {
   164c4:	b160      	cbz	r0, 164e0 <bt_att_req_send+0x54>
	parent->next = child;
   164c6:	2300      	movs	r3, #0
   164c8:	6023      	str	r3, [r4, #0]
	return list->tail;
   164ca:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   164cc:	b92b      	cbnz	r3, 164da <bt_att_req_send+0x4e>
	list->head = node;
   164ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   164d2:	f01a f8b5 	bl	30640 <att_req_send_process>

	return 0;
   164d6:	2000      	movs	r0, #0
}
   164d8:	bd10      	pop	{r4, pc}
	parent->next = child;
   164da:	601c      	str	r4, [r3, #0]
	list->tail = node;
   164dc:	6084      	str	r4, [r0, #8]
}
   164de:	e7f8      	b.n	164d2 <bt_att_req_send+0x46>
		return -ENOTCONN;
   164e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   164e4:	e7f8      	b.n	164d8 <bt_att_req_send+0x4c>
   164e6:	bf00      	nop
   164e8:	0003a016 	.word	0x0003a016
   164ec:	0003ab94 	.word	0x0003ab94
   164f0:	000381c3 	.word	0x000381c3
   164f4:	0003ab08 	.word	0x0003ab08

000164f8 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   164f8:	b510      	push	{r4, lr}
   164fa:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   164fc:	b318      	cbz	r0, 16546 <bt_att_req_cancel+0x4e>
   164fe:	b311      	cbz	r1, 16546 <bt_att_req_cancel+0x4e>
		return;
	}

	att = att_get(conn);
   16500:	f7ff f874 	bl	155ec <att_get>
	if (!att) {
   16504:	b1f8      	cbz	r0, 16546 <bt_att_req_cancel+0x4e>
	return list->head;
   16506:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16508:	b1bb      	cbz	r3, 1653a <bt_att_req_cancel+0x42>
	return node->next;
   1650a:	f853 2988 	ldr.w	r2, [r3], #-136
   1650e:	b102      	cbz	r2, 16512 <bt_att_req_cancel+0x1a>
   16510:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   16512:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16514:	428c      	cmp	r4, r1
   16516:	d009      	beq.n	1652c <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16518:	b17a      	cbz	r2, 1653a <bt_att_req_cancel+0x42>
   1651a:	4613      	mov	r3, r2
   1651c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   16520:	2a00      	cmp	r2, #0
   16522:	d0f6      	beq.n	16512 <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   16524:	6b99      	ldr	r1, [r3, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16526:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   16528:	428c      	cmp	r4, r1
   1652a:	d1f6      	bne.n	1651a <bt_att_req_cancel+0x22>
	bt_att_req_free(req);
   1652c:	4620      	mov	r0, r4
	chan->req = &cancel;
   1652e:	4a06      	ldr	r2, [pc, #24]	; (16548 <bt_att_req_cancel+0x50>)
   16530:	639a      	str	r2, [r3, #56]	; 0x38

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   16532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   16536:	f7ff be5b 	b.w	161f0 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1653a:	3004      	adds	r0, #4
   1653c:	4621      	mov	r1, r4
   1653e:	f019 ffc4 	bl	304ca <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   16542:	4620      	mov	r0, r4
   16544:	e7f5      	b.n	16532 <bt_att_req_cancel+0x3a>
}
   16546:	bd10      	pop	{r4, pc}
   16548:	2000fc30 	.word	0x2000fc30

0001654c <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1654c:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1654e:	b930      	cbnz	r0, 1655e <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16550:	4907      	ldr	r1, [pc, #28]	; (16570 <find_cf_cfg+0x24>)
   16552:	4808      	ldr	r0, [pc, #32]	; (16574 <find_cf_cfg+0x28>)
   16554:	f01a faca 	bl	30aec <bt_addr_le_eq>
   16558:	b138      	cbz	r0, 1656a <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1655a:	4807      	ldr	r0, [pc, #28]	; (16578 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   1655c:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1655e:	4a05      	ldr	r2, [pc, #20]	; (16574 <find_cf_cfg+0x28>)
   16560:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   16564:	f019 fcf7 	bl	2ff56 <bt_conn_is_peer_addr_le>
   16568:	e7f6      	b.n	16558 <find_cf_cfg+0xc>
	return NULL;
   1656a:	2000      	movs	r0, #0
   1656c:	e7f6      	b.n	1655c <find_cf_cfg+0x10>
   1656e:	bf00      	nop
   16570:	00039ba5 	.word	0x00039ba5
   16574:	2000fc59 	.word	0x2000fc59
   16578:	2000fc58 	.word	0x2000fc58

0001657c <find_sc_cfg>:
{
   1657c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1657e:	4c07      	ldr	r4, [pc, #28]	; (1659c <find_sc_cfg+0x20>)
   16580:	7823      	ldrb	r3, [r4, #0]
   16582:	4283      	cmp	r3, r0
   16584:	d107      	bne.n	16596 <find_sc_cfg+0x1a>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16586:	1c60      	adds	r0, r4, #1
   16588:	f01a fab0 	bl	30aec <bt_addr_le_eq>
			return &sc_cfg[i];
   1658c:	2800      	cmp	r0, #0
   1658e:	bf14      	ite	ne
   16590:	4620      	movne	r0, r4
   16592:	2000      	moveq	r0, #0
}
   16594:	bd10      	pop	{r4, pc}
	return NULL;
   16596:	2000      	movs	r0, #0
   16598:	e7fc      	b.n	16594 <find_sc_cfg+0x18>
   1659a:	bf00      	nop
   1659c:	20011040 	.word	0x20011040

000165a0 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   165a0:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   165a2:	1c4a      	adds	r2, r1, #1
{
   165a4:	460c      	mov	r4, r1
		if (conn) {
   165a6:	b138      	cbz	r0, 165b8 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   165a8:	7809      	ldrb	r1, [r1, #0]
   165aa:	f019 fcd4 	bl	2ff56 <bt_conn_is_peer_addr_le>
   165ae:	b108      	cbz	r0, 165b4 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   165b0:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   165b2:	bd10      	pop	{r4, pc}
	return NULL;
   165b4:	2000      	movs	r0, #0
   165b6:	e7fc      	b.n	165b2 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   165b8:	4610      	mov	r0, r2
   165ba:	4902      	ldr	r1, [pc, #8]	; (165c4 <find_ccc_cfg+0x24>)
   165bc:	f01a fa96 	bl	30aec <bt_addr_le_eq>
   165c0:	e7f5      	b.n	165ae <find_ccc_cfg+0xe>
   165c2:	bf00      	nop
   165c4:	00039ba5 	.word	0x00039ba5

000165c8 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   165c8:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   165ca:	b930      	cbnz	r0, 165da <gatt_sub_find+0x12>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   165cc:	4907      	ldr	r1, [pc, #28]	; (165ec <gatt_sub_find+0x24>)
   165ce:	4808      	ldr	r0, [pc, #32]	; (165f0 <gatt_sub_find+0x28>)
   165d0:	f01a fa8c 	bl	30aec <bt_addr_le_eq>
   165d4:	b138      	cbz	r0, 165e6 <gatt_sub_find+0x1e>
		struct gatt_sub *sub = &subscriptions[i];
   165d6:	4807      	ldr	r0, [pc, #28]	; (165f4 <gatt_sub_find+0x2c>)
			return sub;
		}
	}

	return NULL;
}
   165d8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   165da:	4a05      	ldr	r2, [pc, #20]	; (165f0 <gatt_sub_find+0x28>)
   165dc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   165e0:	f019 fcb9 	bl	2ff56 <bt_conn_is_peer_addr_le>
   165e4:	e7f6      	b.n	165d4 <gatt_sub_find+0xc>
	return NULL;
   165e6:	2000      	movs	r0, #0
   165e8:	e7f6      	b.n	165d8 <gatt_sub_find+0x10>
   165ea:	bf00      	nop
   165ec:	00039ba5 	.word	0x00039ba5
   165f0:	2000fc75 	.word	0x2000fc75
   165f4:	2000fc74 	.word	0x2000fc74

000165f8 <gatt_sub_free>:
{
   165f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   165fa:	6883      	ldr	r3, [r0, #8]
   165fc:	b15b      	cbz	r3, 16616 <gatt_sub_free+0x1e>
   165fe:	4909      	ldr	r1, [pc, #36]	; (16624 <gatt_sub_free+0x2c>)
   16600:	4809      	ldr	r0, [pc, #36]	; (16628 <gatt_sub_free+0x30>)
   16602:	f640 5371 	movw	r3, #3441	; 0xd71
   16606:	4a09      	ldr	r2, [pc, #36]	; (1662c <gatt_sub_free+0x34>)
   16608:	f018 f9a4 	bl	2e954 <assert_print>
   1660c:	f640 5171 	movw	r1, #3441	; 0xd71
   16610:	4806      	ldr	r0, [pc, #24]	; (1662c <gatt_sub_free+0x34>)
   16612:	f018 f998 	bl	2e946 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   16616:	4906      	ldr	r1, [pc, #24]	; (16630 <gatt_sub_free+0x38>)
   16618:	3001      	adds	r0, #1
}
   1661a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1661e:	f01a bad2 	b.w	30bc6 <bt_addr_le_copy>
   16622:	bf00      	nop
   16624:	0003ae31 	.word	0x0003ae31
   16628:	000381c3 	.word	0x000381c3
   1662c:	0003ae01 	.word	0x0003ae01
   16630:	00039ba5 	.word	0x00039ba5

00016634 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, uint8_t err,
			       const void *pdu, uint16_t length,
			       void *user_data)
{
   16634:	b5f0      	push	{r4, r5, r6, r7, lr}
   16636:	460e      	mov	r6, r1
   16638:	b087      	sub	sp, #28
   1663a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1663c:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1663e:	f06f 0104 	mvn.w	r1, #4
   16642:	f104 0014 	add.w	r0, r4, #20
   16646:	f01a fa67 	bl	30b18 <atomic_and>
	LOG_DBG("err 0x%02x", err);

	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
   1664a:	b316      	cbz	r6, 16692 <gatt_write_ccc_rsp+0x5e>
		struct gatt_sub *sub;
		sys_snode_t *node, *tmp;

		sub = gatt_sub_find(conn);
   1664c:	4628      	mov	r0, r5
   1664e:	f7ff ffbb 	bl	165c8 <gatt_sub_find>
		if (!sub) {
   16652:	4601      	mov	r1, r0
   16654:	2800      	cmp	r0, #0
   16656:	d037      	beq.n	166c8 <gatt_write_ccc_rsp+0x94>
	return list->head;
   16658:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1665a:	b14b      	cbz	r3, 16670 <gatt_write_ccc_rsp+0x3c>
	return node->next;
   1665c:	681a      	ldr	r2, [r3, #0]
			return;
		}

		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
			if (node == &params->node) {
   1665e:	f104 0718 	add.w	r7, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   16662:	b12b      	cbz	r3, 16670 <gatt_write_ccc_rsp+0x3c>
			if (node == &params->node) {
   16664:	42bb      	cmp	r3, r7
   16666:	d10d      	bne.n	16684 <gatt_write_ccc_rsp+0x50>
				gatt_sub_remove(conn, sub, tmp, params);
   16668:	4623      	mov	r3, r4
   1666a:	4628      	mov	r0, r5
   1666c:	f01a fab2 	bl	30bd4 <gatt_sub_remove>
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	if (params->subscribe) {
   16670:	6867      	ldr	r7, [r4, #4]
   16672:	b1c7      	cbz	r7, 166a6 <gatt_write_ccc_rsp+0x72>
		params->subscribe(conn, err, params);
   16674:	4622      	mov	r2, r4
   16676:	4631      	mov	r1, r6
   16678:	4628      	mov	r0, r5
   1667a:	463b      	mov	r3, r7
	} else if (params->write) {
		/* TODO: Remove after deprecation */
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
		params->write(conn, err, NULL);
	}
}
   1667c:	b007      	add	sp, #28
   1667e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->write(conn, err, NULL);
   16682:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16684:	b11a      	cbz	r2, 1668e <gatt_write_ccc_rsp+0x5a>
	return node->next;
   16686:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   16688:	4613      	mov	r3, r2
   1668a:	4602      	mov	r2, r0
   1668c:	e7e9      	b.n	16662 <gatt_write_ccc_rsp+0x2e>
   1668e:	4610      	mov	r0, r2
   16690:	e7fa      	b.n	16688 <gatt_write_ccc_rsp+0x54>
	} else if (!params->value) {
   16692:	8a23      	ldrh	r3, [r4, #16]
   16694:	2b00      	cmp	r3, #0
   16696:	d1eb      	bne.n	16670 <gatt_write_ccc_rsp+0x3c>
		params->notify(conn, params, NULL, 0);
   16698:	4633      	mov	r3, r6
   1669a:	4632      	mov	r2, r6
   1669c:	4621      	mov	r1, r4
   1669e:	4628      	mov	r0, r5
   166a0:	6827      	ldr	r7, [r4, #0]
   166a2:	47b8      	blx	r7
   166a4:	e7e4      	b.n	16670 <gatt_write_ccc_rsp+0x3c>
	} else if (params->write) {
   166a6:	68a3      	ldr	r3, [r4, #8]
   166a8:	b173      	cbz	r3, 166c8 <gatt_write_ccc_rsp+0x94>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   166aa:	4b08      	ldr	r3, [pc, #32]	; (166cc <gatt_write_ccc_rsp+0x98>)
   166ac:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   166b0:	9305      	str	r3, [sp, #20]
   166b2:	2302      	movs	r3, #2
   166b4:	4806      	ldr	r0, [pc, #24]	; (166d0 <gatt_write_ccc_rsp+0x9c>)
   166b6:	aa04      	add	r2, sp, #16
   166b8:	9304      	str	r3, [sp, #16]
   166ba:	f01a fb38 	bl	30d2e <z_log_msg_static_create.constprop.0>
		params->write(conn, err, NULL);
   166be:	463a      	mov	r2, r7
   166c0:	4631      	mov	r1, r6
   166c2:	4628      	mov	r0, r5
   166c4:	68a3      	ldr	r3, [r4, #8]
   166c6:	e7d9      	b.n	1667c <gatt_write_ccc_rsp+0x48>
}
   166c8:	b007      	add	sp, #28
   166ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   166cc:	0003ae48 	.word	0x0003ae48
   166d0:	00036410 	.word	0x00036410

000166d4 <bt_gatt_attr_write_ccc>:
{
   166d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   166d8:	b087      	sub	sp, #28
   166da:	461e      	mov	r6, r3
   166dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   166e0:	4681      	mov	r9, r0
   166e2:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   166e4:	f8d1 800c 	ldr.w	r8, [r1, #12]
	if (offset) {
   166e8:	2b00      	cmp	r3, #0
   166ea:	d14b      	bne.n	16784 <bt_gatt_attr_write_ccc+0xb0>
	if (!len || len > sizeof(uint16_t)) {
   166ec:	1e73      	subs	r3, r6, #1
   166ee:	2b01      	cmp	r3, #1
   166f0:	d84b      	bhi.n	1678a <bt_gatt_attr_write_ccc+0xb6>
	if (len < sizeof(uint16_t)) {
   166f2:	2e01      	cmp	r6, #1
	cfg = find_ccc_cfg(conn, ccc);
   166f4:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   166f6:	7815      	ldrb	r5, [r2, #0]
   166f8:	bf18      	it	ne
   166fa:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   166fc:	f7ff ff50 	bl	165a0 <find_ccc_cfg>
	if (!cfg) {
   16700:	4604      	mov	r4, r0
   16702:	b9f0      	cbnz	r0, 16742 <bt_gatt_attr_write_ccc+0x6e>
		if (!value) {
   16704:	b91d      	cbnz	r5, 1670e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   16706:	4630      	mov	r0, r6
}
   16708:	b007      	add	sp, #28
   1670a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1670e:	4641      	mov	r1, r8
   16710:	f7ff ff46 	bl	165a0 <find_ccc_cfg>
		if (!cfg) {
   16714:	4604      	mov	r4, r0
   16716:	b960      	cbnz	r0, 16732 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   16718:	4b1d      	ldr	r3, [pc, #116]	; (16790 <bt_gatt_attr_write_ccc+0xbc>)
   1671a:	481e      	ldr	r0, [pc, #120]	; (16794 <bt_gatt_attr_write_ccc+0xc0>)
   1671c:	9305      	str	r3, [sp, #20]
   1671e:	2302      	movs	r3, #2
   16720:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16724:	aa04      	add	r2, sp, #16
   16726:	9304      	str	r3, [sp, #16]
   16728:	f01a fb01 	bl	30d2e <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1672c:	f06f 0010 	mvn.w	r0, #16
   16730:	e7ea      	b.n	16708 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16732:	f109 0190 	add.w	r1, r9, #144	; 0x90
   16736:	3001      	adds	r0, #1
   16738:	f01a fa45 	bl	30bc6 <bt_addr_le_copy>
		cfg->id = conn->id;
   1673c:	f899 3008 	ldrb.w	r3, [r9, #8]
   16740:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   16742:	f8d8 3010 	ldr.w	r3, [r8, #16]
   16746:	b98b      	cbnz	r3, 1676c <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   16748:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1674a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1674e:	42ab      	cmp	r3, r5
   16750:	d003      	beq.n	1675a <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   16752:	4641      	mov	r1, r8
   16754:	4638      	mov	r0, r7
   16756:	f01a f953 	bl	30a00 <gatt_ccc_changed>
	if (!value) {
   1675a:	2d00      	cmp	r5, #0
   1675c:	d1d3      	bne.n	16706 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1675e:	490e      	ldr	r1, [pc, #56]	; (16798 <bt_gatt_attr_write_ccc+0xc4>)
   16760:	1c60      	adds	r0, r4, #1
   16762:	f01a fa30 	bl	30bc6 <bt_addr_le_copy>
	cfg->id = 0U;
   16766:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   16768:	8125      	strh	r5, [r4, #8]
}
   1676a:	e7cc      	b.n	16706 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1676c:	462a      	mov	r2, r5
   1676e:	4639      	mov	r1, r7
   16770:	4648      	mov	r0, r9
   16772:	4798      	blx	r3
		if (write < 0) {
   16774:	2800      	cmp	r0, #0
   16776:	dbc7      	blt.n	16708 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   16778:	3801      	subs	r0, #1
   1677a:	2801      	cmp	r0, #1
   1677c:	d9e4      	bls.n	16748 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1677e:	f06f 000d 	mvn.w	r0, #13
   16782:	e7c1      	b.n	16708 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16784:	f06f 0006 	mvn.w	r0, #6
   16788:	e7be      	b.n	16708 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1678a:	f06f 000c 	mvn.w	r0, #12
   1678e:	e7bb      	b.n	16708 <bt_gatt_attr_write_ccc+0x34>
   16790:	0003ae7f 	.word	0x0003ae7f
   16794:	00036410 	.word	0x00036410
   16798:	00039ba5 	.word	0x00039ba5

0001679c <clear_cf_cfg>:
{
   1679c:	4602      	mov	r2, r0
   1679e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   167a0:	4907      	ldr	r1, [pc, #28]	; (167c0 <clear_cf_cfg+0x24>)
   167a2:	3001      	adds	r0, #1
   167a4:	f01a fa0f 	bl	30bc6 <bt_addr_le_copy>
   167a8:	2300      	movs	r3, #0
   167aa:	320c      	adds	r2, #12
   167ac:	f802 3c04 	strb.w	r3, [r2, #-4]
   167b0:	e8d2 1fef 	ldaex	r1, [r2]
   167b4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   167b8:	2800      	cmp	r0, #0
   167ba:	d1f9      	bne.n	167b0 <clear_cf_cfg+0x14>
}
   167bc:	bd08      	pop	{r3, pc}
   167be:	bf00      	nop
   167c0:	00039ba5 	.word	0x00039ba5

000167c4 <sc_save>:
{
   167c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167c8:	b086      	sub	sp, #24
   167ca:	4680      	mov	r8, r0
   167cc:	460f      	mov	r7, r1
   167ce:	4616      	mov	r6, r2
   167d0:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   167d2:	f7ff fed3 	bl	1657c <find_sc_cfg>
	if (!cfg) {
   167d6:	4604      	mov	r4, r0
   167d8:	b9b0      	cbnz	r0, 16808 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   167da:	4912      	ldr	r1, [pc, #72]	; (16824 <sc_save+0x60>)
   167dc:	f7ff fece 	bl	1657c <find_sc_cfg>
		if (!cfg) {
   167e0:	4604      	mov	r4, r0
   167e2:	b960      	cbnz	r0, 167fe <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   167e4:	4b10      	ldr	r3, [pc, #64]	; (16828 <sc_save+0x64>)
   167e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167ea:	9305      	str	r3, [sp, #20]
   167ec:	2302      	movs	r3, #2
   167ee:	480f      	ldr	r0, [pc, #60]	; (1682c <sc_save+0x68>)
   167f0:	aa04      	add	r2, sp, #16
   167f2:	9304      	str	r3, [sp, #16]
   167f4:	f01a fa9b 	bl	30d2e <z_log_msg_static_create.constprop.0>
}
   167f8:	b006      	add	sp, #24
   167fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   167fe:	4639      	mov	r1, r7
		cfg->id = id;
   16800:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16804:	f01a f9df 	bl	30bc6 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16808:	8922      	ldrh	r2, [r4, #8]
   1680a:	8963      	ldrh	r3, [r4, #10]
   1680c:	b91a      	cbnz	r2, 16816 <sc_save+0x52>
   1680e:	b92b      	cbnz	r3, 1681c <sc_save+0x58>
		cfg->data.start = start;
   16810:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16812:	8165      	strh	r5, [r4, #10]
   16814:	e7f0      	b.n	167f8 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   16816:	4296      	cmp	r6, r2
		*start = new_start;
   16818:	bf38      	it	cc
   1681a:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1681c:	429d      	cmp	r5, r3
   1681e:	d9eb      	bls.n	167f8 <sc_save+0x34>
   16820:	e7f7      	b.n	16812 <sc_save+0x4e>
   16822:	bf00      	nop
   16824:	00039ba5 	.word	0x00039ba5
   16828:	0003ae99 	.word	0x0003ae99
   1682c:	00036410 	.word	0x00036410

00016830 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   16830:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16832:	460c      	mov	r4, r1
   16834:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16836:	2108      	movs	r1, #8
   16838:	f104 0014 	add.w	r0, r4, #20
   1683c:	f01a f961 	bl	30b02 <atomic_or>
	/* The value of the params doesn't matter, this is just so we don't
	 * repeat CCC writes when the AUTO_RESUBSCRIBE quirk is enabled.
	 */
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   16840:	2312      	movs	r3, #18
   16842:	2204      	movs	r2, #4
   16844:	4628      	mov	r0, r5
   16846:	e9cd 3200 	strd	r3, r2, [sp]
   1684a:	4903      	ldr	r1, [pc, #12]	; (16858 <gatt_write_ccc+0x28>)
   1684c:	4622      	mov	r2, r4
   1684e:	4b03      	ldr	r3, [pc, #12]	; (1685c <gatt_write_ccc+0x2c>)
   16850:	f01a fab7 	bl	30dc2 <gatt_req_send.constprop.0>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len,
			     BT_ATT_CHAN_OPT(params));
}
   16854:	b003      	add	sp, #12
   16856:	bd30      	pop	{r4, r5, pc}
   16858:	00016635 	.word	0x00016635
   1685c:	00030e35 	.word	0x00030e35

00016860 <disconnected_cb>:
{
   16860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16864:	4b23      	ldr	r3, [pc, #140]	; (168f4 <disconnected_cb+0x94>)
{
   16866:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16868:	6882      	ldr	r2, [r0, #8]
{
   1686a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1686c:	429a      	cmp	r2, r3
   1686e:	d102      	bne.n	16876 <disconnected_cb+0x16>
	ccc = attr->user_data;
   16870:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   16872:	8963      	ldrh	r3, [r4, #10]
   16874:	bb33      	cbnz	r3, 168c4 <disconnected_cb+0x64>
}
   16876:	2001      	movs	r0, #1
   16878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1687c:	f7fd fe1e 	bl	144bc <bt_conn_unref>
		ccc->value = 0U;
   16880:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   16882:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   16884:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   16886:	2b00      	cmp	r3, #0
   16888:	d0f5      	beq.n	16876 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1688a:	4638      	mov	r0, r7
   1688c:	4798      	blx	r3
   1688e:	e7f2      	b.n	16876 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16890:	f105 0890 	add.w	r8, r5, #144	; 0x90
   16894:	4641      	mov	r1, r8
   16896:	7a28      	ldrb	r0, [r5, #8]
   16898:	f019 faaf 	bl	2fdfa <bt_addr_le_is_bonded>
   1689c:	b968      	cbnz	r0, 168ba <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1689e:	4b16      	ldr	r3, [pc, #88]	; (168f8 <disconnected_cb+0x98>)
   168a0:	429c      	cmp	r4, r3
   168a2:	d102      	bne.n	168aa <disconnected_cb+0x4a>
					sc_clear(conn);
   168a4:	4628      	mov	r0, r5
   168a6:	f01a fa45 	bl	30d34 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   168aa:	4630      	mov	r0, r6
   168ac:	4913      	ldr	r1, [pc, #76]	; (168fc <disconnected_cb+0x9c>)
   168ae:	f01a f98a 	bl	30bc6 <bt_addr_le_copy>
	cfg->id = 0U;
   168b2:	2300      	movs	r3, #0
   168b4:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   168b6:	8123      	strh	r3, [r4, #8]
}
   168b8:	e7e2      	b.n	16880 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   168ba:	4641      	mov	r1, r8
   168bc:	4630      	mov	r0, r6
   168be:	f01a f982 	bl	30bc6 <bt_addr_le_copy>
   168c2:	e7dd      	b.n	16880 <disconnected_cb+0x20>
		if (!cfg->value) {
   168c4:	8923      	ldrh	r3, [r4, #8]
   168c6:	2b00      	cmp	r3, #0
   168c8:	d0da      	beq.n	16880 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   168ca:	4626      	mov	r6, r4
   168cc:	f816 1b01 	ldrb.w	r1, [r6], #1
   168d0:	4628      	mov	r0, r5
   168d2:	4632      	mov	r2, r6
   168d4:	f019 fb3f 	bl	2ff56 <bt_conn_is_peer_addr_le>
   168d8:	2800      	cmp	r0, #0
   168da:	d1d9      	bne.n	16890 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   168dc:	4631      	mov	r1, r6
   168de:	7820      	ldrb	r0, [r4, #0]
   168e0:	f7fe f866 	bl	149b0 <bt_conn_lookup_addr_le>
			if (tmp) {
   168e4:	2800      	cmp	r0, #0
   168e6:	d0cb      	beq.n	16880 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   168e8:	7a83      	ldrb	r3, [r0, #10]
   168ea:	2b07      	cmp	r3, #7
   168ec:	d1c6      	bne.n	1687c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   168ee:	f7fd fde5 	bl	144bc <bt_conn_unref>
	if (!value_used) {
   168f2:	e7c0      	b.n	16876 <disconnected_cb+0x16>
   168f4:	000166d5 	.word	0x000166d5
   168f8:	2000c8bc 	.word	0x2000c8bc
   168fc:	00039ba5 	.word	0x00039ba5

00016900 <cf_write>:
{
   16900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16904:	b086      	sub	sp, #24
   16906:	461f      	mov	r7, r3
   16908:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1690c:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1690e:	2b01      	cmp	r3, #1
{
   16910:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   16912:	d83a      	bhi.n	1698a <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   16914:	443b      	add	r3, r7
   16916:	2b01      	cmp	r3, #1
   16918:	463d      	mov	r5, r7
   1691a:	dc39      	bgt.n	16990 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1691c:	f7ff fe16 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   16920:	4604      	mov	r4, r0
   16922:	b998      	cbnz	r0, 1694c <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   16924:	f7ff fe12 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   16928:	4604      	mov	r4, r0
   1692a:	b978      	cbnz	r0, 1694c <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1692c:	4b1b      	ldr	r3, [pc, #108]	; (1699c <cf_write+0x9c>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1692e:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   16932:	9305      	str	r3, [sp, #20]
   16934:	2302      	movs	r3, #2
   16936:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1693a:	4819      	ldr	r0, [pc, #100]	; (169a0 <cf_write+0xa0>)
   1693c:	aa04      	add	r2, sp, #16
   1693e:	9304      	str	r3, [sp, #16]
   16940:	f01a f9f5 	bl	30d2e <z_log_msg_static_create.constprop.0>
}
   16944:	4628      	mov	r0, r5
   16946:	b006      	add	sp, #24
   16948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1694c:	b197      	cbz	r7, 16974 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1694e:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   16950:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   16952:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   16956:	fa21 f003 	lsr.w	r0, r1, r3
   1695a:	07c7      	lsls	r7, r0, #31
   1695c:	d503      	bpl.n	16966 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1695e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   16962:	07c0      	lsls	r0, r0, #31
   16964:	d517      	bpl.n	16996 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   16966:	3301      	adds	r3, #1
   16968:	2b03      	cmp	r3, #3
   1696a:	d1f4      	bne.n	16956 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1696c:	f002 0207 	and.w	r2, r2, #7
   16970:	4311      	orrs	r1, r2
   16972:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16974:	1c60      	adds	r0, r4, #1
   16976:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1697a:	f01a f924 	bl	30bc6 <bt_addr_le_copy>
	cfg->id = conn->id;
   1697e:	7a33      	ldrb	r3, [r6, #8]
	bool changed = set_change_aware_no_store(cfg, aware);
   16980:	4620      	mov	r0, r4
	cfg->id = conn->id;
   16982:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   16984:	f01a fa6b 	bl	30e5e <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   16988:	e7dc      	b.n	16944 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1698a:	f06f 0506 	mvn.w	r5, #6
   1698e:	e7d9      	b.n	16944 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16990:	f06f 050c 	mvn.w	r5, #12
   16994:	e7d6      	b.n	16944 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   16996:	f06f 0512 	mvn.w	r5, #18
   1699a:	e7d3      	b.n	16944 <cf_write+0x44>
   1699c:	0003aeb8 	.word	0x0003aeb8
   169a0:	00036410 	.word	0x00036410

000169a4 <sc_indicate_rsp>:
{
   169a4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   169a6:	f06f 0102 	mvn.w	r1, #2
   169aa:	4604      	mov	r4, r0
   169ac:	480e      	ldr	r0, [pc, #56]	; (169e8 <sc_indicate_rsp+0x44>)
   169ae:	f01a f8b3 	bl	30b18 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   169b2:	480d      	ldr	r0, [pc, #52]	; (169e8 <sc_indicate_rsp+0x44>)
   169b4:	f01a f8a2 	bl	30afc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   169b8:	07c2      	lsls	r2, r0, #31
   169ba:	d504      	bpl.n	169c6 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   169bc:	2200      	movs	r2, #0
   169be:	2300      	movs	r3, #0
   169c0:	480a      	ldr	r0, [pc, #40]	; (169ec <sc_indicate_rsp+0x48>)
   169c2:	f012 fed3 	bl	2976c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   169c6:	4620      	mov	r0, r4
   169c8:	f019 fff2 	bl	309b0 <bt_att_fixed_chan_only>
   169cc:	b150      	cbz	r0, 169e4 <sc_indicate_rsp+0x40>
		cfg = find_cf_cfg(conn);
   169ce:	4620      	mov	r0, r4
   169d0:	f7ff fdbc 	bl	1654c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   169d4:	b130      	cbz	r0, 169e4 <sc_indicate_rsp+0x40>
   169d6:	7a03      	ldrb	r3, [r0, #8]
   169d8:	07db      	lsls	r3, r3, #31
   169da:	d503      	bpl.n	169e4 <sc_indicate_rsp+0x40>
}
   169dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   169e0:	f01a ba3d 	b.w	30e5e <set_change_aware_no_store.constprop.0.isra.0>
}
   169e4:	bd10      	pop	{r4, pc}
   169e6:	bf00      	nop
   169e8:	2000dad0 	.word	0x2000dad0
   169ec:	2000daa0 	.word	0x2000daa0

000169f0 <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   169f0:	2101      	movs	r1, #1
{
   169f2:	b510      	push	{r4, lr}
   169f4:	481f      	ldr	r0, [pc, #124]	; (16a74 <bt_gatt_init+0x84>)
   169f6:	f01a f884 	bl	30b02 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   169fa:	07c3      	lsls	r3, r0, #31
   169fc:	d439      	bmi.n	16a72 <bt_gatt_init+0x82>
   169fe:	2102      	movs	r1, #2
   16a00:	481c      	ldr	r0, [pc, #112]	; (16a74 <bt_gatt_init+0x84>)
   16a02:	f01a f87e 	bl	30b02 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   16a06:	4008      	ands	r0, r1
   16a08:	d11f      	bne.n	16a4a <bt_gatt_init+0x5a>
   16a0a:	491b      	ldr	r1, [pc, #108]	; (16a78 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a0c:	4a1b      	ldr	r2, [pc, #108]	; (16a7c <bt_gatt_init+0x8c>)
   16a0e:	880b      	ldrh	r3, [r1, #0]
   16a10:	4c1b      	ldr	r4, [pc, #108]	; (16a80 <bt_gatt_init+0x90>)
   16a12:	42a2      	cmp	r2, r4
   16a14:	d916      	bls.n	16a44 <bt_gatt_init+0x54>
   16a16:	b100      	cbz	r0, 16a1a <bt_gatt_init+0x2a>
   16a18:	800b      	strh	r3, [r1, #0]
   16a1a:	491a      	ldr	r1, [pc, #104]	; (16a84 <bt_gatt_init+0x94>)
   16a1c:	f240 53c3 	movw	r3, #1475	; 0x5c3
   16a20:	4a19      	ldr	r2, [pc, #100]	; (16a88 <bt_gatt_init+0x98>)
   16a22:	481a      	ldr	r0, [pc, #104]	; (16a8c <bt_gatt_init+0x9c>)
   16a24:	f017 ff96 	bl	2e954 <assert_print>
   16a28:	4819      	ldr	r0, [pc, #100]	; (16a90 <bt_gatt_init+0xa0>)
   16a2a:	f017 ff93 	bl	2e954 <assert_print>
   16a2e:	f240 51c3 	movw	r1, #1475	; 0x5c3
   16a32:	4815      	ldr	r0, [pc, #84]	; (16a88 <bt_gatt_init+0x98>)
   16a34:	f017 ff87 	bl	2e946 <assert_post_action>
		last_static_handle += svc->attr_count;
   16a38:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a3a:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   16a3c:	4403      	add	r3, r0
   16a3e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a40:	2001      	movs	r0, #1
   16a42:	e7e6      	b.n	16a12 <bt_gatt_init+0x22>
   16a44:	d3f8      	bcc.n	16a38 <bt_gatt_init+0x48>
   16a46:	b100      	cbz	r0, 16a4a <bt_gatt_init+0x5a>
   16a48:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   16a4a:	2200      	movs	r2, #0
   16a4c:	4b11      	ldr	r3, [pc, #68]	; (16a94 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16a4e:	4912      	ldr	r1, [pc, #72]	; (16a98 <bt_gatt_init+0xa8>)
   16a50:	4812      	ldr	r0, [pc, #72]	; (16a9c <bt_gatt_init+0xac>)
	list->tail = NULL;
   16a52:	e9c3 2200 	strd	r2, r2, [r3]
   16a56:	f012 fd6d 	bl	29534 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16a5a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16a5e:	2300      	movs	r3, #0
   16a60:	480e      	ldr	r0, [pc, #56]	; (16a9c <bt_gatt_init+0xac>)
   16a62:	f7fa fe53 	bl	1170c <bt_long_wq_schedule>
}
   16a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16a6a:	490d      	ldr	r1, [pc, #52]	; (16aa0 <bt_gatt_init+0xb0>)
   16a6c:	480d      	ldr	r0, [pc, #52]	; (16aa4 <bt_gatt_init+0xb4>)
   16a6e:	f012 bd61 	b.w	29534 <k_work_init_delayable>
}
   16a72:	bd10      	pop	{r4, pc}
   16a74:	2000fc68 	.word	0x2000fc68
   16a78:	2001104c 	.word	0x2001104c
   16a7c:	000363b0 	.word	0x000363b0
   16a80:	000363c0 	.word	0x000363c0
   16a84:	0003aeeb 	.word	0x0003aeeb
   16a88:	0003ae01 	.word	0x0003ae01
   16a8c:	000381c3 	.word	0x000381c3
   16a90:	000387c1 	.word	0x000387c1
   16a94:	2000fc6c 	.word	0x2000fc6c
   16a98:	00016d0d 	.word	0x00016d0d
   16a9c:	2000da28 	.word	0x2000da28
   16aa0:	0001711d 	.word	0x0001711d
   16aa4:	2000daa0 	.word	0x2000daa0

00016aa8 <bt_gatt_attr_get_handle>:
	if (!attr) {
   16aa8:	4603      	mov	r3, r0
{
   16aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16aae:	b398      	cbz	r0, 16b18 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   16ab0:	8a00      	ldrh	r0, [r0, #16]
   16ab2:	bb88      	cbnz	r0, 16b18 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   16ab4:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ab6:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16aba:	4919      	ldr	r1, [pc, #100]	; (16b20 <bt_gatt_attr_get_handle+0x78>)
   16abc:	f8df e064 	ldr.w	lr, [pc, #100]	; 16b24 <bt_gatt_attr_get_handle+0x7c>
   16ac0:	4571      	cmp	r1, lr
   16ac2:	d928      	bls.n	16b16 <bt_gatt_attr_get_handle+0x6e>
   16ac4:	4918      	ldr	r1, [pc, #96]	; (16b28 <bt_gatt_attr_get_handle+0x80>)
   16ac6:	f240 7329 	movw	r3, #1833	; 0x729
   16aca:	4a18      	ldr	r2, [pc, #96]	; (16b2c <bt_gatt_attr_get_handle+0x84>)
   16acc:	4818      	ldr	r0, [pc, #96]	; (16b30 <bt_gatt_attr_get_handle+0x88>)
   16ace:	f017 ff41 	bl	2e954 <assert_print>
   16ad2:	4818      	ldr	r0, [pc, #96]	; (16b34 <bt_gatt_attr_get_handle+0x8c>)
   16ad4:	f017 ff3e 	bl	2e954 <assert_print>
   16ad8:	f240 7129 	movw	r1, #1833	; 0x729
   16adc:	4813      	ldr	r0, [pc, #76]	; (16b2c <bt_gatt_attr_get_handle+0x84>)
   16ade:	f017 ff32 	bl	2e946 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16ae2:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   16ae6:	42bb      	cmp	r3, r7
   16ae8:	d304      	bcc.n	16af4 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16aea:	fb0c 7206 	mla	r2, ip, r6, r7
   16aee:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16af0:	4293      	cmp	r3, r2
   16af2:	d90e      	bls.n	16b12 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   16af4:	4434      	add	r4, r6
   16af6:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16af8:	4614      	mov	r4, r2
   16afa:	3108      	adds	r1, #8
   16afc:	e7e0      	b.n	16ac0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16afe:	fb0c 7805 	mla	r8, ip, r5, r7
   16b02:	4543      	cmp	r3, r8
   16b04:	d00a      	beq.n	16b1c <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16b06:	3501      	adds	r5, #1
   16b08:	1962      	adds	r2, r4, r5
   16b0a:	42b5      	cmp	r5, r6
   16b0c:	b292      	uxth	r2, r2
   16b0e:	d1f6      	bne.n	16afe <bt_gatt_attr_get_handle+0x56>
   16b10:	e7f2      	b.n	16af8 <bt_gatt_attr_get_handle+0x50>
   16b12:	2500      	movs	r5, #0
   16b14:	e7f8      	b.n	16b08 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16b16:	d3e4      	bcc.n	16ae2 <bt_gatt_attr_get_handle+0x3a>
}
   16b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b1c:	4610      	mov	r0, r2
   16b1e:	e7fb      	b.n	16b18 <bt_gatt_attr_get_handle+0x70>
   16b20:	000363b0 	.word	0x000363b0
   16b24:	000363c0 	.word	0x000363c0
   16b28:	0003aee4 	.word	0x0003aee4
   16b2c:	0003ae01 	.word	0x0003ae01
   16b30:	000381c3 	.word	0x000381c3
   16b34:	000387c1 	.word	0x000387c1

00016b38 <bt_gatt_foreach_attr_type>:
{
   16b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b3c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   16b42:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16b46:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   16b48:	2d00      	cmp	r5, #0
   16b4a:	bf08      	it	eq
   16b4c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16b4e:	4b2b      	ldr	r3, [pc, #172]	; (16bfc <bt_gatt_foreach_attr_type+0xc4>)
{
   16b50:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16b52:	881b      	ldrh	r3, [r3, #0]
{
   16b54:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   16b56:	4283      	cmp	r3, r0
   16b58:	d232      	bcs.n	16bc0 <bt_gatt_foreach_attr_type+0x88>
}
   16b5a:	b003      	add	sp, #12
   16b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b60:	4640      	mov	r0, r8
   16b62:	5889      	ldr	r1, [r1, r2]
   16b64:	9301      	str	r3, [sp, #4]
   16b66:	f019 f806 	bl	2fb76 <bt_uuid_cmp>
   16b6a:	9b01      	ldr	r3, [sp, #4]
   16b6c:	b190      	cbz	r0, 16b94 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16b6e:	3401      	adds	r4, #1
   16b70:	f10a 0a01 	add.w	sl, sl, #1
   16b74:	b2a4      	uxth	r4, r4
   16b76:	6873      	ldr	r3, [r6, #4]
   16b78:	4553      	cmp	r3, sl
   16b7a:	d92c      	bls.n	16bd6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   16b7c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b7e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   16b80:	429c      	cmp	r4, r3
   16b82:	d8ea      	bhi.n	16b5a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16b84:	42bc      	cmp	r4, r7
   16b86:	d3f2      	bcc.n	16b6e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b88:	fb0b f20a 	mul.w	r2, fp, sl
   16b8c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b8e:	f1b8 0f00 	cmp.w	r8, #0
   16b92:	d1e5      	bne.n	16b60 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   16b94:	f1b9 0f00 	cmp.w	r9, #0
   16b98:	d10b      	bne.n	16bb2 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   16b9a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   16b9c:	4618      	mov	r0, r3
	*num_matches -= 1;
   16b9e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16ba0:	4621      	mov	r1, r4
   16ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16ba6:	4798      	blx	r3
	if (!*num_matches) {
   16ba8:	2d00      	cmp	r5, #0
   16baa:	d0d6      	beq.n	16b5a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16bac:	2800      	cmp	r0, #0
   16bae:	d1de      	bne.n	16b6e <bt_gatt_foreach_attr_type+0x36>
   16bb0:	e7d3      	b.n	16b5a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16bb2:	68da      	ldr	r2, [r3, #12]
   16bb4:	4591      	cmp	r9, r2
   16bb6:	d1da      	bne.n	16b6e <bt_gatt_foreach_attr_type+0x36>
   16bb8:	e7ef      	b.n	16b9a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16bba:	f04f 0a00 	mov.w	sl, #0
   16bbe:	e7da      	b.n	16b76 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   16bc0:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16bc2:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16bc6:	4e0e      	ldr	r6, [pc, #56]	; (16c00 <bt_gatt_foreach_attr_type+0xc8>)
   16bc8:	e006      	b.n	16bd8 <bt_gatt_foreach_attr_type+0xa0>
   16bca:	d2c6      	bcs.n	16b5a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   16bcc:	6873      	ldr	r3, [r6, #4]
   16bce:	4423      	add	r3, r4
   16bd0:	42bb      	cmp	r3, r7
   16bd2:	d2f2      	bcs.n	16bba <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   16bd4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16bd6:	3608      	adds	r6, #8
   16bd8:	4b0a      	ldr	r3, [pc, #40]	; (16c04 <bt_gatt_foreach_attr_type+0xcc>)
   16bda:	429e      	cmp	r6, r3
   16bdc:	d9f5      	bls.n	16bca <bt_gatt_foreach_attr_type+0x92>
   16bde:	490a      	ldr	r1, [pc, #40]	; (16c08 <bt_gatt_foreach_attr_type+0xd0>)
   16be0:	f240 73ed 	movw	r3, #2029	; 0x7ed
   16be4:	4a09      	ldr	r2, [pc, #36]	; (16c0c <bt_gatt_foreach_attr_type+0xd4>)
   16be6:	480a      	ldr	r0, [pc, #40]	; (16c10 <bt_gatt_foreach_attr_type+0xd8>)
   16be8:	f017 feb4 	bl	2e954 <assert_print>
   16bec:	4809      	ldr	r0, [pc, #36]	; (16c14 <bt_gatt_foreach_attr_type+0xdc>)
   16bee:	f017 feb1 	bl	2e954 <assert_print>
   16bf2:	f240 71ed 	movw	r1, #2029	; 0x7ed
   16bf6:	4805      	ldr	r0, [pc, #20]	; (16c0c <bt_gatt_foreach_attr_type+0xd4>)
   16bf8:	f017 fea5 	bl	2e946 <assert_post_action>
   16bfc:	2001104c 	.word	0x2001104c
   16c00:	000363b0 	.word	0x000363b0
   16c04:	000363c0 	.word	0x000363c0
   16c08:	0003aee4 	.word	0x0003aee4
   16c0c:	0003ae01 	.word	0x0003ae01
   16c10:	000381c3 	.word	0x000381c3
   16c14:	000387c1 	.word	0x000387c1

00016c18 <db_hash_gen>:
{
   16c18:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   16c1a:	2400      	movs	r4, #0
{
   16c1c:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16c1e:	4669      	mov	r1, sp
   16c20:	aa22      	add	r2, sp, #136	; 0x88
   16c22:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   16c24:	e9cd 4400 	strd	r4, r4, [sp]
   16c28:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16c2c:	f018 fc4c 	bl	2f4c8 <tc_cmac_setup>
   16c30:	b958      	cbnz	r0, 16c4a <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   16c32:	4b15      	ldr	r3, [pc, #84]	; (16c88 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   16c34:	9309      	str	r3, [sp, #36]	; 0x24
   16c36:	2302      	movs	r3, #2
   16c38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c3c:	4813      	ldr	r0, [pc, #76]	; (16c8c <db_hash_gen+0x74>)
   16c3e:	aa08      	add	r2, sp, #32
   16c40:	9308      	str	r3, [sp, #32]
   16c42:	f01a f874 	bl	30d2e <z_log_msg_static_create.constprop.0>
}
   16c46:	b04e      	add	sp, #312	; 0x138
   16c48:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16c4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16c4e:	2001      	movs	r0, #1
   16c50:	4a0f      	ldr	r2, [pc, #60]	; (16c90 <db_hash_gen+0x78>)
   16c52:	ab0a      	add	r3, sp, #40	; 0x28
   16c54:	f01a f966 	bl	30f24 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16c58:	480e      	ldr	r0, [pc, #56]	; (16c94 <db_hash_gen+0x7c>)
   16c5a:	a90a      	add	r1, sp, #40	; 0x28
   16c5c:	f018 fcc9 	bl	2f5f2 <tc_cmac_final>
   16c60:	b908      	cbnz	r0, 16c66 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   16c62:	4b0d      	ldr	r3, [pc, #52]	; (16c98 <db_hash_gen+0x80>)
   16c64:	e7e6      	b.n	16c34 <db_hash_gen+0x1c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   16c66:	4621      	mov	r1, r4
   16c68:	4b0a      	ldr	r3, [pc, #40]	; (16c94 <db_hash_gen+0x7c>)
   16c6a:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   16c6e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16c70:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   16c74:	3101      	adds	r1, #1
   16c76:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16c78:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16c7c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   16c7e:	d1f6      	bne.n	16c6e <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16c80:	4806      	ldr	r0, [pc, #24]	; (16c9c <db_hash_gen+0x84>)
   16c82:	f019 ff3e 	bl	30b02 <atomic_or>
   16c86:	e7de      	b.n	16c46 <db_hash_gen+0x2e>
   16c88:	0003af13 	.word	0x0003af13
   16c8c:	00036410 	.word	0x00036410
   16c90:	00030a47 	.word	0x00030a47
   16c94:	2000da18 	.word	0x2000da18
   16c98:	0003af2c 	.word	0x0003af2c
   16c9c:	2000dad0 	.word	0x2000dad0

00016ca0 <db_hash_read>:
{
   16ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16ca4:	4916      	ldr	r1, [pc, #88]	; (16d00 <db_hash_read+0x60>)
{
   16ca6:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16ca8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16cac:	4615      	mov	r5, r2
   16cae:	461e      	mov	r6, r3
   16cb0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16cb4:	f012 fdba 	bl	2982c <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16cb8:	4812      	ldr	r0, [pc, #72]	; (16d04 <db_hash_read+0x64>)
   16cba:	f019 ff1f 	bl	30afc <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16cbe:	0701      	lsls	r1, r0, #28
   16cc0:	d401      	bmi.n	16cc6 <db_hash_read+0x26>
		db_hash_gen();
   16cc2:	f7ff ffa9 	bl	16c18 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   16cc6:	4620      	mov	r0, r4
   16cc8:	f7ff fc40 	bl	1654c <find_cf_cfg>
	if (cfg &&
   16ccc:	b168      	cbz	r0, 16cea <db_hash_read+0x4a>
   16cce:	7a03      	ldrb	r3, [r0, #8]
   16cd0:	07da      	lsls	r2, r3, #31
   16cd2:	d50a      	bpl.n	16cea <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   16cd4:	f100 040c 	add.w	r4, r0, #12
   16cd8:	4620      	mov	r0, r4
   16cda:	f019 ff0f 	bl	30afc <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   16cde:	07c3      	lsls	r3, r0, #31
   16ce0:	d403      	bmi.n	16cea <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16ce2:	2102      	movs	r1, #2
   16ce4:	4620      	mov	r0, r4
   16ce6:	f019 ff0c 	bl	30b02 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16cea:	2310      	movs	r3, #16
   16cec:	463a      	mov	r2, r7
   16cee:	9306      	str	r3, [sp, #24]
   16cf0:	4631      	mov	r1, r6
   16cf2:	4628      	mov	r0, r5
}
   16cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16cf8:	4b03      	ldr	r3, [pc, #12]	; (16d08 <db_hash_read+0x68>)
   16cfa:	f019 bf90 	b.w	30c1e <bt_gatt_attr_read.constprop.0>
   16cfe:	bf00      	nop
   16d00:	2000da58 	.word	0x2000da58
   16d04:	2000dad0 	.word	0x2000dad0
   16d08:	2000da18 	.word	0x2000da18

00016d0c <db_hash_process>:
{
   16d0c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16d0e:	4805      	ldr	r0, [pc, #20]	; (16d24 <db_hash_process+0x18>)
   16d10:	f019 fef4 	bl	30afc <atomic_get>
	if (new_hash) {
   16d14:	0703      	lsls	r3, r0, #28
   16d16:	d403      	bmi.n	16d20 <db_hash_process+0x14>
}
   16d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   16d1c:	f7ff bf7c 	b.w	16c18 <db_hash_gen>
}
   16d20:	bd08      	pop	{r3, pc}
   16d22:	bf00      	nop
   16d24:	2000dad0 	.word	0x2000dad0

00016d28 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   16d28:	2300      	movs	r3, #0
{
   16d2a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   16d2c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   16d2e:	f7ff febb 	bl	16aa8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   16d32:	1c41      	adds	r1, r0, #1
   16d34:	b289      	uxth	r1, r1
   16d36:	4608      	mov	r0, r1
   16d38:	4a03      	ldr	r2, [pc, #12]	; (16d48 <bt_gatt_attr_next+0x20>)
   16d3a:	ab01      	add	r3, sp, #4
   16d3c:	f01a f8f2 	bl	30f24 <bt_gatt_foreach_attr>
}
   16d40:	9801      	ldr	r0, [sp, #4]
   16d42:	b003      	add	sp, #12
   16d44:	f85d fb04 	ldr.w	pc, [sp], #4
   16d48:	000309fb 	.word	0x000309fb

00016d4c <bt_gatt_is_subscribed>:
{
   16d4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16d50:	460c      	mov	r4, r1
   16d52:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   16d54:	4605      	mov	r5, r0
   16d56:	b970      	cbnz	r0, 16d76 <bt_gatt_is_subscribed+0x2a>
   16d58:	495b      	ldr	r1, [pc, #364]	; (16ec8 <bt_gatt_is_subscribed+0x17c>)
   16d5a:	f640 532e 	movw	r3, #3374	; 0xd2e
   16d5e:	4a5b      	ldr	r2, [pc, #364]	; (16ecc <bt_gatt_is_subscribed+0x180>)
   16d60:	485b      	ldr	r0, [pc, #364]	; (16ed0 <bt_gatt_is_subscribed+0x184>)
   16d62:	f017 fdf7 	bl	2e954 <assert_print>
   16d66:	485b      	ldr	r0, [pc, #364]	; (16ed4 <bt_gatt_is_subscribed+0x188>)
   16d68:	f017 fdf4 	bl	2e954 <assert_print>
   16d6c:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   16d70:	4856      	ldr	r0, [pc, #344]	; (16ecc <bt_gatt_is_subscribed+0x180>)
   16d72:	f017 fde8 	bl	2e946 <assert_post_action>
   16d76:	b961      	cbnz	r1, 16d92 <bt_gatt_is_subscribed+0x46>
   16d78:	4957      	ldr	r1, [pc, #348]	; (16ed8 <bt_gatt_is_subscribed+0x18c>)
   16d7a:	f640 532f 	movw	r3, #3375	; 0xd2f
   16d7e:	4a53      	ldr	r2, [pc, #332]	; (16ecc <bt_gatt_is_subscribed+0x180>)
   16d80:	4853      	ldr	r0, [pc, #332]	; (16ed0 <bt_gatt_is_subscribed+0x184>)
   16d82:	f017 fde7 	bl	2e954 <assert_print>
   16d86:	4853      	ldr	r0, [pc, #332]	; (16ed4 <bt_gatt_is_subscribed+0x188>)
   16d88:	f017 fde4 	bl	2e954 <assert_print>
   16d8c:	f640 512f 	movw	r1, #3375	; 0xd2f
   16d90:	e7ee      	b.n	16d70 <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   16d92:	7a83      	ldrb	r3, [r0, #10]
   16d94:	2b07      	cmp	r3, #7
   16d96:	d110      	bne.n	16dba <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   16d98:	2300      	movs	r3, #0
   16d9a:	f88d 300c 	strb.w	r3, [sp, #12]
   16d9e:	f642 0303 	movw	r3, #10243	; 0x2803
   16da2:	6820      	ldr	r0, [r4, #0]
   16da4:	a903      	add	r1, sp, #12
   16da6:	f8ad 300e 	strh.w	r3, [sp, #14]
   16daa:	f018 fee4 	bl	2fb76 <bt_uuid_cmp>
   16dae:	b9d0      	cbnz	r0, 16de6 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   16db0:	68e3      	ldr	r3, [r4, #12]
   16db2:	799b      	ldrb	r3, [r3, #6]
   16db4:	f013 0f30 	tst.w	r3, #48	; 0x30
   16db8:	d103      	bne.n	16dc2 <bt_gatt_is_subscribed+0x76>
		return false;
   16dba:	2000      	movs	r0, #0
}
   16dbc:	b004      	add	sp, #16
   16dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   16dc2:	4620      	mov	r0, r4
   16dc4:	f7ff ffb0 	bl	16d28 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   16dc8:	4604      	mov	r4, r0
   16dca:	b960      	cbnz	r0, 16de6 <bt_gatt_is_subscribed+0x9a>
   16dcc:	4942      	ldr	r1, [pc, #264]	; (16ed8 <bt_gatt_is_subscribed+0x18c>)
   16dce:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   16dd2:	4a3e      	ldr	r2, [pc, #248]	; (16ecc <bt_gatt_is_subscribed+0x180>)
   16dd4:	483e      	ldr	r0, [pc, #248]	; (16ed0 <bt_gatt_is_subscribed+0x184>)
   16dd6:	f017 fdbd 	bl	2e954 <assert_print>
   16dda:	4840      	ldr	r0, [pc, #256]	; (16edc <bt_gatt_is_subscribed+0x190>)
   16ddc:	f017 fdba 	bl	2e954 <assert_print>
   16de0:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   16de4:	e7c4      	b.n	16d70 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   16de6:	2300      	movs	r3, #0
   16de8:	6820      	ldr	r0, [r4, #0]
   16dea:	f88d 300c 	strb.w	r3, [sp, #12]
   16dee:	f642 1302 	movw	r3, #10498	; 0x2902
   16df2:	a903      	add	r1, sp, #12
   16df4:	f8ad 300e 	strh.w	r3, [sp, #14]
   16df8:	f018 febd 	bl	2fb76 <bt_uuid_cmp>
   16dfc:	b188      	cbz	r0, 16e22 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   16dfe:	4620      	mov	r0, r4
   16e00:	f7ff ff92 	bl	16d28 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   16e04:	4604      	mov	r4, r0
   16e06:	b960      	cbnz	r0, 16e22 <bt_gatt_is_subscribed+0xd6>
   16e08:	4933      	ldr	r1, [pc, #204]	; (16ed8 <bt_gatt_is_subscribed+0x18c>)
   16e0a:	f640 5346 	movw	r3, #3398	; 0xd46
   16e0e:	4a2f      	ldr	r2, [pc, #188]	; (16ecc <bt_gatt_is_subscribed+0x180>)
   16e10:	482f      	ldr	r0, [pc, #188]	; (16ed0 <bt_gatt_is_subscribed+0x184>)
   16e12:	f017 fd9f 	bl	2e954 <assert_print>
   16e16:	4831      	ldr	r0, [pc, #196]	; (16edc <bt_gatt_is_subscribed+0x190>)
   16e18:	f017 fd9c 	bl	2e954 <assert_print>
   16e1c:	f640 5146 	movw	r1, #3398	; 0xd46
   16e20:	e7a6      	b.n	16d70 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   16e22:	2600      	movs	r6, #0
   16e24:	f642 1802 	movw	r8, #10498	; 0x2902
   16e28:	6820      	ldr	r0, [r4, #0]
   16e2a:	4669      	mov	r1, sp
   16e2c:	f88d 6000 	strb.w	r6, [sp]
   16e30:	f8ad 8002 	strh.w	r8, [sp, #2]
   16e34:	f018 fe9f 	bl	2fb76 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16e38:	b9d8      	cbnz	r0, 16e72 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   16e3a:	2300      	movs	r3, #0
   16e3c:	6820      	ldr	r0, [r4, #0]
   16e3e:	f88d 300c 	strb.w	r3, [sp, #12]
   16e42:	f642 1302 	movw	r3, #10498	; 0x2902
   16e46:	a903      	add	r1, sp, #12
   16e48:	f8ad 300e 	strh.w	r3, [sp, #14]
   16e4c:	f018 fe93 	bl	2fb76 <bt_uuid_cmp>
   16e50:	2800      	cmp	r0, #0
   16e52:	d1b2      	bne.n	16dba <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   16e54:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   16e56:	4628      	mov	r0, r5
   16e58:	4622      	mov	r2, r4
   16e5a:	f812 1b01 	ldrb.w	r1, [r2], #1
   16e5e:	f019 f87a 	bl	2ff56 <bt_conn_is_peer_addr_le>
   16e62:	2800      	cmp	r0, #0
   16e64:	d0a9      	beq.n	16dba <bt_gatt_is_subscribed+0x6e>
   16e66:	8923      	ldrh	r3, [r4, #8]
   16e68:	421f      	tst	r7, r3
   16e6a:	bf14      	ite	ne
   16e6c:	2001      	movne	r0, #1
   16e6e:	2000      	moveq	r0, #0
   16e70:	e7a4      	b.n	16dbc <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   16e72:	f642 0303 	movw	r3, #10243	; 0x2803
   16e76:	6820      	ldr	r0, [r4, #0]
   16e78:	a901      	add	r1, sp, #4
   16e7a:	f88d 6004 	strb.w	r6, [sp, #4]
   16e7e:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e82:	f018 fe78 	bl	2fb76 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   16e86:	2800      	cmp	r0, #0
   16e88:	d0d7      	beq.n	16e3a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16e8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16e8e:	6820      	ldr	r0, [r4, #0]
   16e90:	a902      	add	r1, sp, #8
   16e92:	f88d 6008 	strb.w	r6, [sp, #8]
   16e96:	f8ad 300a 	strh.w	r3, [sp, #10]
   16e9a:	f018 fe6c 	bl	2fb76 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   16e9e:	2800      	cmp	r0, #0
   16ea0:	d0cb      	beq.n	16e3a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16ea2:	f642 0301 	movw	r3, #10241	; 0x2801
   16ea6:	6820      	ldr	r0, [r4, #0]
   16ea8:	a903      	add	r1, sp, #12
   16eaa:	f88d 600c 	strb.w	r6, [sp, #12]
   16eae:	f8ad 300e 	strh.w	r3, [sp, #14]
   16eb2:	f018 fe60 	bl	2fb76 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16eb6:	2800      	cmp	r0, #0
   16eb8:	d0bf      	beq.n	16e3a <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   16eba:	4620      	mov	r0, r4
   16ebc:	f7ff ff34 	bl	16d28 <bt_gatt_attr_next>
		if (!attr) {
   16ec0:	4604      	mov	r4, r0
   16ec2:	2800      	cmp	r0, #0
   16ec4:	d1b0      	bne.n	16e28 <bt_gatt_is_subscribed+0xdc>
   16ec6:	e778      	b.n	16dba <bt_gatt_is_subscribed+0x6e>
   16ec8:	0003a016 	.word	0x0003a016
   16ecc:	0003ae01 	.word	0x0003ae01
   16ed0:	000381c3 	.word	0x000381c3
   16ed4:	0003af45 	.word	0x0003af45
   16ed8:	0003af5a 	.word	0x0003af5a
   16edc:	0003af5f 	.word	0x0003af5f

00016ee0 <gatt_indicate>:
{
   16ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ee4:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16ee6:	6851      	ldr	r1, [r2, #4]
{
   16ee8:	4680      	mov	r8, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   16eea:	8a4f      	ldrh	r7, [r1, #18]
{
   16eec:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   16eee:	f017 0714 	ands.w	r7, r7, #20
{
   16ef2:	b086      	sub	sp, #24
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   16ef4:	d00f      	beq.n	16f16 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   16ef6:	4b33      	ldr	r3, [pc, #204]	; (16fc4 <gatt_indicate+0xe4>)
		return -EPERM;
   16ef8:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   16efc:	9305      	str	r3, [sp, #20]
   16efe:	2302      	movs	r3, #2
   16f00:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16f04:	4830      	ldr	r0, [pc, #192]	; (16fc8 <gatt_indicate+0xe8>)
   16f06:	aa04      	add	r2, sp, #16
   16f08:	9304      	str	r3, [sp, #16]
   16f0a:	f019 ff10 	bl	30d2e <z_log_msg_static_create.constprop.0>
}
   16f0e:	4628      	mov	r0, r5
   16f10:	b006      	add	sp, #24
   16f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   16f16:	2202      	movs	r2, #2
   16f18:	f7ff ff18 	bl	16d4c <bt_gatt_is_subscribed>
   16f1c:	b960      	cbnz	r0, 16f38 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   16f1e:	4b2b      	ldr	r3, [pc, #172]	; (16fcc <gatt_indicate+0xec>)
   16f20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16f24:	9305      	str	r3, [sp, #20]
   16f26:	2302      	movs	r3, #2
   16f28:	4827      	ldr	r0, [pc, #156]	; (16fc8 <gatt_indicate+0xe8>)
   16f2a:	aa04      	add	r2, sp, #16
   16f2c:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   16f2e:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   16f32:	f019 fefc 	bl	30d2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   16f36:	e7ea      	b.n	16f0e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16f38:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16f3c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16f3e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16f40:	f7ff f932 	bl	161a8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16f44:	3602      	adds	r6, #2
	if (!req) {
   16f46:	4604      	mov	r4, r0
   16f48:	b1b0      	cbz	r0, 16f78 <gatt_indicate+0x98>
	req->func = func;
   16f4a:	4b21      	ldr	r3, [pc, #132]	; (16fd0 <gatt_indicate+0xf0>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16f4c:	4632      	mov	r2, r6
	req->func = func;
   16f4e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16f50:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16f52:	211d      	movs	r1, #29
   16f54:	4640      	mov	r0, r8
   16f56:	f7fe fe55 	bl	15c04 <bt_att_create_pdu>
	if (!buf) {
   16f5a:	4606      	mov	r6, r0
   16f5c:	b978      	cbnz	r0, 16f7e <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   16f5e:	4b1d      	ldr	r3, [pc, #116]	; (16fd4 <gatt_indicate+0xf4>)
   16f60:	4819      	ldr	r0, [pc, #100]	; (16fc8 <gatt_indicate+0xe8>)
   16f62:	9305      	str	r3, [sp, #20]
   16f64:	2302      	movs	r3, #2
   16f66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16f6a:	aa04      	add	r2, sp, #16
   16f6c:	9304      	str	r3, [sp, #16]
   16f6e:	f019 fede 	bl	30d2e <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   16f72:	4620      	mov	r0, r4
   16f74:	f7ff f93c 	bl	161f0 <bt_att_req_free>
		return -ENOMEM;
   16f78:	f06f 050b 	mvn.w	r5, #11
   16f7c:	e7c7      	b.n	16f0e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   16f7e:	2301      	movs	r3, #1
   16f80:	463a      	mov	r2, r7
   16f82:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   16f84:	f106 0a0c 	add.w	sl, r6, #12
   16f88:	f019 fd30 	bl	309ec <bt_att_set_tx_meta_data>
   16f8c:	2102      	movs	r1, #2
   16f8e:	4650      	mov	r0, sl
   16f90:	f001 fb72 	bl	18678 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16f94:	4607      	mov	r7, r0
   16f96:	f827 9b02 	strh.w	r9, [r7], #2
   16f9a:	8aa9      	ldrh	r1, [r5, #20]
   16f9c:	4650      	mov	r0, sl
   16f9e:	f001 fb6b 	bl	18678 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16fa2:	8aaa      	ldrh	r2, [r5, #20]
   16fa4:	6929      	ldr	r1, [r5, #16]
   16fa6:	4638      	mov	r0, r7
   16fa8:	f01e f820 	bl	34fec <memcpy>
	err = bt_att_req_send(conn, req);
   16fac:	4621      	mov	r1, r4
   16fae:	4640      	mov	r0, r8
	req->buf = buf;
   16fb0:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16fb2:	f7ff fa6b 	bl	1648c <bt_att_req_send>
	if (err) {
   16fb6:	4605      	mov	r5, r0
   16fb8:	2800      	cmp	r0, #0
   16fba:	d0a8      	beq.n	16f0e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   16fbc:	4620      	mov	r0, r4
   16fbe:	f7ff f917 	bl	161f0 <bt_att_req_free>
   16fc2:	e7a4      	b.n	16f0e <gatt_indicate+0x2e>
   16fc4:	0003af75 	.word	0x0003af75
   16fc8:	00036410 	.word	0x00036410
   16fcc:	0003af8b 	.word	0x0003af8b
   16fd0:	00030a15 	.word	0x00030a15
   16fd4:	0003afb6 	.word	0x0003afb6

00016fd8 <bt_gatt_indicate>:
{
   16fd8:	b530      	push	{r4, r5, lr}
   16fda:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16fdc:	460c      	mov	r4, r1
{
   16fde:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16fe0:	b971      	cbnz	r1, 17000 <bt_gatt_indicate+0x28>
   16fe2:	4946      	ldr	r1, [pc, #280]	; (170fc <bt_gatt_indicate+0x124>)
   16fe4:	f640 33da 	movw	r3, #3034	; 0xbda
   16fe8:	4a45      	ldr	r2, [pc, #276]	; (17100 <bt_gatt_indicate+0x128>)
   16fea:	4846      	ldr	r0, [pc, #280]	; (17104 <bt_gatt_indicate+0x12c>)
   16fec:	f017 fcb2 	bl	2e954 <assert_print>
   16ff0:	4845      	ldr	r0, [pc, #276]	; (17108 <bt_gatt_indicate+0x130>)
   16ff2:	f017 fcaf 	bl	2e954 <assert_print>
   16ff6:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16ffa:	4841      	ldr	r0, [pc, #260]	; (17100 <bt_gatt_indicate+0x128>)
   16ffc:	f017 fca3 	bl	2e946 <assert_post_action>
   17000:	684b      	ldr	r3, [r1, #4]
   17002:	b973      	cbnz	r3, 17022 <bt_gatt_indicate+0x4a>
   17004:	680b      	ldr	r3, [r1, #0]
   17006:	b963      	cbnz	r3, 17022 <bt_gatt_indicate+0x4a>
   17008:	4940      	ldr	r1, [pc, #256]	; (1710c <bt_gatt_indicate+0x134>)
   1700a:	f640 33db 	movw	r3, #3035	; 0xbdb
   1700e:	4a3c      	ldr	r2, [pc, #240]	; (17100 <bt_gatt_indicate+0x128>)
   17010:	483c      	ldr	r0, [pc, #240]	; (17104 <bt_gatt_indicate+0x12c>)
   17012:	f017 fc9f 	bl	2e954 <assert_print>
   17016:	483c      	ldr	r0, [pc, #240]	; (17108 <bt_gatt_indicate+0x130>)
   17018:	f017 fc9c 	bl	2e954 <assert_print>
   1701c:	f640 31db 	movw	r1, #3035	; 0xbdb
   17020:	e7eb      	b.n	16ffa <bt_gatt_indicate+0x22>
   17022:	483b      	ldr	r0, [pc, #236]	; (17110 <bt_gatt_indicate+0x138>)
   17024:	f019 fd6a 	bl	30afc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17028:	0742      	lsls	r2, r0, #29
   1702a:	d561      	bpl.n	170f0 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1702c:	b115      	cbz	r5, 17034 <bt_gatt_indicate+0x5c>
   1702e:	7aab      	ldrb	r3, [r5, #10]
   17030:	2b07      	cmp	r3, #7
   17032:	d160      	bne.n	170f6 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   17034:	6860      	ldr	r0, [r4, #4]
   17036:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17038:	f7ff fd36 	bl	16aa8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1703c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1703e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17042:	b33a      	cbz	r2, 17094 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17044:	a905      	add	r1, sp, #20
   17046:	9102      	str	r1, [sp, #8]
   17048:	4932      	ldr	r1, [pc, #200]	; (17114 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1704a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1704c:	9101      	str	r1, [sp, #4]
   1704e:	2101      	movs	r1, #1
   17050:	9100      	str	r1, [sp, #0]
   17052:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17056:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17058:	f7ff fd6e 	bl	16b38 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1705c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1705e:	b91b      	cbnz	r3, 17068 <bt_gatt_indicate+0x90>
			return -ENOENT;
   17060:	f06f 0001 	mvn.w	r0, #1
}
   17064:	b00b      	add	sp, #44	; 0x2c
   17066:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17068:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1706a:	9b05      	ldr	r3, [sp, #20]
   1706c:	a904      	add	r1, sp, #16
   1706e:	6818      	ldr	r0, [r3, #0]
   17070:	2300      	movs	r3, #0
   17072:	f88d 3010 	strb.w	r3, [sp, #16]
   17076:	f642 0303 	movw	r3, #10243	; 0x2803
   1707a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1707e:	f018 fd7a 	bl	2fb76 <bt_uuid_cmp>
   17082:	b970      	cbnz	r0, 170a2 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17084:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17086:	68c3      	ldr	r3, [r0, #12]
   17088:	799b      	ldrb	r3, [r3, #6]
   1708a:	069b      	lsls	r3, r3, #26
   1708c:	d405      	bmi.n	1709a <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1708e:	f06f 0015 	mvn.w	r0, #21
   17092:	e7e7      	b.n	17064 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   17094:	2800      	cmp	r0, #0
   17096:	d1e8      	bne.n	1706a <bt_gatt_indicate+0x92>
   17098:	e7e2      	b.n	17060 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1709a:	f019 fefc 	bl	30e96 <bt_gatt_attr_value_handle>
   1709e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   170a2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   170a6:	b13d      	cbz	r5, 170b8 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   170a8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   170aa:	4601      	mov	r1, r0
   170ac:	4622      	mov	r2, r4
   170ae:	4628      	mov	r0, r5
		params->_ref = 1;
   170b0:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   170b2:	f7ff ff15 	bl	16ee0 <gatt_indicate>
   170b6:	e7d5      	b.n	17064 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   170b8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   170bc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   170be:	2302      	movs	r3, #2
   170c0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   170c4:	f642 1302 	movw	r3, #10498	; 0x2902
   170c8:	f8ad 3012 	strh.w	r3, [sp, #18]
   170cc:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   170ce:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   170d0:	9302      	str	r3, [sp, #8]
   170d2:	4b11      	ldr	r3, [pc, #68]	; (17118 <bt_gatt_indicate+0x140>)
   170d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   170d8:	9301      	str	r3, [sp, #4]
   170da:	2301      	movs	r3, #1
   170dc:	aa04      	add	r2, sp, #16
   170de:	9300      	str	r3, [sp, #0]
   170e0:	462b      	mov	r3, r5
	data.ind_params = params;
   170e2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   170e4:	f88d 5010 	strb.w	r5, [sp, #16]
   170e8:	f7ff fd26 	bl	16b38 <bt_gatt_foreach_attr_type>
	return data.err;
   170ec:	9807      	ldr	r0, [sp, #28]
   170ee:	e7b9      	b.n	17064 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   170f0:	f06f 000a 	mvn.w	r0, #10
   170f4:	e7b6      	b.n	17064 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   170f6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   170fa:	e7b3      	b.n	17064 <bt_gatt_indicate+0x8c>
   170fc:	0003de74 	.word	0x0003de74
   17100:	0003ae01 	.word	0x0003ae01
   17104:	000381c3 	.word	0x000381c3
   17108:	0003afdd 	.word	0x0003afdd
   1710c:	0003aff3 	.word	0x0003aff3
   17110:	2000c654 	.word	0x2000c654
   17114:	00030a3b 	.word	0x00030a3b
   17118:	00017371 	.word	0x00017371

0001711c <sc_process>:
{
   1711c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1711e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   17122:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17124:	f1a0 0720 	sub.w	r7, r0, #32
   17128:	4628      	mov	r0, r5
   1712a:	f019 fce7 	bl	30afc <atomic_get>
   1712e:	0783      	lsls	r3, r0, #30
   17130:	f3c0 0640 	ubfx	r6, r0, #1, #1
   17134:	d50e      	bpl.n	17154 <sc_process+0x38>
   17136:	4919      	ldr	r1, [pc, #100]	; (1719c <sc_process+0x80>)
   17138:	f240 532c 	movw	r3, #1324	; 0x52c
   1713c:	4a18      	ldr	r2, [pc, #96]	; (171a0 <sc_process+0x84>)
   1713e:	4819      	ldr	r0, [pc, #100]	; (171a4 <sc_process+0x88>)
   17140:	f017 fc08 	bl	2e954 <assert_print>
   17144:	4818      	ldr	r0, [pc, #96]	; (171a8 <sc_process+0x8c>)
   17146:	f017 fc05 	bl	2e954 <assert_print>
   1714a:	f240 512c 	movw	r1, #1324	; 0x52c
   1714e:	4814      	ldr	r0, [pc, #80]	; (171a0 <sc_process+0x84>)
   17150:	f017 fbf9 	bl	2e946 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17154:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17158:	f06f 0101 	mvn.w	r1, #1
   1715c:	4628      	mov	r0, r5
   1715e:	9301      	str	r3, [sp, #4]
   17160:	f019 fcda 	bl	30b18 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17164:	4b11      	ldr	r3, [pc, #68]	; (171ac <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17166:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17168:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1716c:	4b10      	ldr	r3, [pc, #64]	; (171b0 <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1716e:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   17170:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   17174:	ab01      	add	r3, sp, #4
   17176:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1717a:	2304      	movs	r3, #4
	sc->start = 0U;
   1717c:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   17180:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   17184:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17188:	f7ff ff26 	bl	16fd8 <bt_gatt_indicate>
   1718c:	b918      	cbnz	r0, 17196 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1718e:	2102      	movs	r1, #2
   17190:	4628      	mov	r0, r5
   17192:	f019 fcb6 	bl	30b02 <atomic_or>
}
   17196:	b003      	add	sp, #12
   17198:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1719a:	bf00      	nop
   1719c:	0003b010 	.word	0x0003b010
   171a0:	0003ae01 	.word	0x0003ae01
   171a4:	000381c3 	.word	0x000381c3
   171a8:	0003b041 	.word	0x0003b041
   171ac:	00036d00 	.word	0x00036d00
   171b0:	000169a5 	.word	0x000169a5

000171b4 <update_ccc>:
{
   171b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   171b6:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   171b8:	4b31      	ldr	r3, [pc, #196]	; (17280 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   171ba:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   171bc:	6882      	ldr	r2, [r0, #8]
{
   171be:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   171c0:	429a      	cmp	r2, r3
{
   171c2:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   171c4:	d11e      	bne.n	17204 <update_ccc+0x50>
	ccc = attr->user_data;
   171c6:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   171c8:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   171ca:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   171cc:	b1d3      	cbz	r3, 17204 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   171ce:	4628      	mov	r0, r5
   171d0:	7831      	ldrb	r1, [r6, #0]
   171d2:	f018 fec0 	bl	2ff56 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   171d6:	b1a8      	cbz	r0, 17204 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   171d8:	f44f 7295 	mov.w	r2, #298	; 0x12a
   171dc:	4621      	mov	r1, r4
   171de:	4628      	mov	r0, r5
   171e0:	f019 feab 	bl	30f3a <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   171e4:	2803      	cmp	r0, #3
   171e6:	d111      	bne.n	1720c <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   171e8:	466d      	mov	r5, sp
   171ea:	b088      	sub	sp, #32
   171ec:	466a      	mov	r2, sp
   171ee:	4b25      	ldr	r3, [pc, #148]	; (17284 <update_ccc+0xd0>)
   171f0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   171f4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   171f8:	f842 0f10 	str.w	r0, [r2, #16]!
   171fc:	4822      	ldr	r0, [pc, #136]	; (17288 <update_ccc+0xd4>)
   171fe:	f019 fd96 	bl	30d2e <z_log_msg_static_create.constprop.0>
   17202:	46ad      	mov	sp, r5
}
   17204:	2001      	movs	r0, #1
   17206:	3724      	adds	r7, #36	; 0x24
   17208:	46bd      	mov	sp, r7
   1720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   1720c:	4631      	mov	r1, r6
   1720e:	4620      	mov	r0, r4
   17210:	f019 fbf6 	bl	30a00 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17214:	4b1d      	ldr	r3, [pc, #116]	; (1728c <update_ccc+0xd8>)
   17216:	429e      	cmp	r6, r3
   17218:	d1f4      	bne.n	17204 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1721a:	7a28      	ldrb	r0, [r5, #8]
   1721c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17220:	f7ff f9ac 	bl	1657c <find_sc_cfg>
	if (!cfg) {
   17224:	2800      	cmp	r0, #0
   17226:	d0ed      	beq.n	17204 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   17228:	8902      	ldrh	r2, [r0, #8]
   1722a:	8943      	ldrh	r3, [r0, #10]
   1722c:	ea52 0103 	orrs.w	r1, r2, r3
   17230:	d0e8      	beq.n	17204 <update_ccc+0x50>
	index = bt_conn_index(conn);
   17232:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17234:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17236:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   17238:	f7fd fa84 	bl	14744 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1723c:	2318      	movs	r3, #24
   1723e:	4914      	ldr	r1, [pc, #80]	; (17290 <update_ccc+0xdc>)
   17240:	4a14      	ldr	r2, [pc, #80]	; (17294 <update_ccc+0xe0>)
   17242:	fb03 1300 	mla	r3, r3, r0, r1
   17246:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17248:	4a13      	ldr	r2, [pc, #76]	; (17298 <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1724a:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1724c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1724e:	1d3a      	adds	r2, r7, #4
   17250:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17252:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17254:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17258:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1725c:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   1725e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17260:	f7ff feba 	bl	16fd8 <bt_gatt_indicate>
   17264:	2800      	cmp	r0, #0
   17266:	d0cd      	beq.n	17204 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   17268:	4b0c      	ldr	r3, [pc, #48]	; (1729c <update_ccc+0xe8>)
   1726a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1726e:	61fb      	str	r3, [r7, #28]
   17270:	2302      	movs	r3, #2
   17272:	4805      	ldr	r0, [pc, #20]	; (17288 <update_ccc+0xd4>)
   17274:	f107 0218 	add.w	r2, r7, #24
   17278:	61bb      	str	r3, [r7, #24]
   1727a:	f019 fd58 	bl	30d2e <z_log_msg_static_create.constprop.0>
   1727e:	e7c1      	b.n	17204 <update_ccc+0x50>
   17280:	000166d5 	.word	0x000166d5
   17284:	0003b05c 	.word	0x0003b05c
   17288:	00036410 	.word	0x00036410
   1728c:	2000c8bc 	.word	0x2000c8bc
   17290:	2000fc40 	.word	0x2000fc40
   17294:	00036d00 	.word	0x00036d00
   17298:	00030e67 	.word	0x00030e67
   1729c:	0003b070 	.word	0x0003b070

000172a0 <gatt_notify>:
{
   172a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   172a4:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   172a6:	6851      	ldr	r1, [r2, #4]
{
   172a8:	4607      	mov	r7, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   172aa:	8a4b      	ldrh	r3, [r1, #18]
{
   172ac:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   172ae:	f003 0314 	and.w	r3, r3, #20
{
   172b2:	b087      	sub	sp, #28
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   172b4:	b173      	cbz	r3, 172d4 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   172b6:	4b2a      	ldr	r3, [pc, #168]	; (17360 <gatt_notify+0xc0>)
   172b8:	482a      	ldr	r0, [pc, #168]	; (17364 <gatt_notify+0xc4>)
   172ba:	9305      	str	r3, [sp, #20]
   172bc:	2302      	movs	r3, #2
   172be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   172c2:	aa04      	add	r2, sp, #16
   172c4:	9304      	str	r3, [sp, #16]
   172c6:	f019 fd32 	bl	30d2e <z_log_msg_static_create.constprop.0>
		return -EPERM;
   172ca:	f04f 30ff 	mov.w	r0, #4294967295
}
   172ce:	b007      	add	sp, #28
   172d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   172d4:	2201      	movs	r2, #1
   172d6:	f7ff fd39 	bl	16d4c <bt_gatt_is_subscribed>
   172da:	b960      	cbnz	r0, 172f6 <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   172dc:	4b22      	ldr	r3, [pc, #136]	; (17368 <gatt_notify+0xc8>)
   172de:	4821      	ldr	r0, [pc, #132]	; (17364 <gatt_notify+0xc4>)
   172e0:	9305      	str	r3, [sp, #20]
   172e2:	2302      	movs	r3, #2
   172e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   172e8:	aa04      	add	r2, sp, #16
   172ea:	9304      	str	r3, [sp, #16]
   172ec:	f019 fd1f 	bl	30d2e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   172f0:	f06f 0015 	mvn.w	r0, #21
   172f4:	e7eb      	b.n	172ce <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   172f6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   172f8:	211b      	movs	r1, #27
   172fa:	4638      	mov	r0, r7
   172fc:	3202      	adds	r2, #2
   172fe:	f7fe fc81 	bl	15c04 <bt_att_create_pdu>
	if (!buf) {
   17302:	4605      	mov	r5, r0
   17304:	b960      	cbnz	r0, 17320 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   17306:	4b19      	ldr	r3, [pc, #100]	; (1736c <gatt_notify+0xcc>)
   17308:	4816      	ldr	r0, [pc, #88]	; (17364 <gatt_notify+0xc4>)
   1730a:	9305      	str	r3, [sp, #20]
   1730c:	2302      	movs	r3, #2
   1730e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17312:	aa04      	add	r2, sp, #16
   17314:	9304      	str	r3, [sp, #16]
   17316:	f019 fd0a 	bl	30d2e <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1731a:	f06f 000b 	mvn.w	r0, #11
   1731e:	e7d6      	b.n	172ce <gatt_notify+0x2e>
   17320:	f100 090c 	add.w	r9, r0, #12
   17324:	2102      	movs	r1, #2
   17326:	4648      	mov	r0, r9
   17328:	f001 f9a6 	bl	18678 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1732c:	4606      	mov	r6, r0
   1732e:	f826 8b02 	strh.w	r8, [r6], #2
   17332:	89a1      	ldrh	r1, [r4, #12]
   17334:	4648      	mov	r0, r9
   17336:	f001 f99f 	bl	18678 <net_buf_simple_add>
   1733a:	89a2      	ldrh	r2, [r4, #12]
   1733c:	68a1      	ldr	r1, [r4, #8]
   1733e:	4630      	mov	r0, r6
   17340:	f01d fe54 	bl	34fec <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   17344:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   17348:	4628      	mov	r0, r5
   1734a:	2301      	movs	r3, #1
   1734c:	f019 fb4e 	bl	309ec <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   17350:	4629      	mov	r1, r5
   17352:	4638      	mov	r0, r7
}
   17354:	b007      	add	sp, #28
   17356:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1735a:	f7ff b839 	b.w	163d0 <bt_att_send>
   1735e:	bf00      	nop
   17360:	0003af75 	.word	0x0003af75
   17364:	00036410 	.word	0x00036410
   17368:	0003af8b 	.word	0x0003af8b
   1736c:	0003b08d 	.word	0x0003b08d

00017370 <notify_cb>:
{
   17370:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17372:	4b3d      	ldr	r3, [pc, #244]	; (17468 <notify_cb+0xf8>)
{
   17374:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17376:	6882      	ldr	r2, [r0, #8]
{
   17378:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1737a:	429a      	cmp	r2, r3
{
   1737c:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1737e:	d002      	beq.n	17386 <notify_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
   17380:	2001      	movs	r0, #1
}
   17382:	b007      	add	sp, #28
   17384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   17386:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17388:	4b38      	ldr	r3, [pc, #224]	; (1746c <notify_cb+0xfc>)
   1738a:	429e      	cmp	r6, r3
   1738c:	d053      	beq.n	17436 <notify_cb+0xc6>
		if (cfg->value != data->type) {
   1738e:	8932      	ldrh	r2, [r6, #8]
   17390:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17392:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   17394:	429a      	cmp	r2, r3
   17396:	d1f3      	bne.n	17380 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17398:	7830      	ldrb	r0, [r6, #0]
   1739a:	f7fd fb09 	bl	149b0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1739e:	4604      	mov	r4, r0
   173a0:	2800      	cmp	r0, #0
   173a2:	d0ed      	beq.n	17380 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   173a4:	7a83      	ldrb	r3, [r0, #10]
   173a6:	2b07      	cmp	r3, #7
   173a8:	d005      	beq.n	173b6 <notify_cb+0x46>
			bt_conn_unref(conn);
   173aa:	f7fd f887 	bl	144bc <bt_conn_unref>
			continue;
   173ae:	e7e7      	b.n	17380 <notify_cb+0x10>
			bt_conn_unref(conn);
   173b0:	f7fd f884 	bl	144bc <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   173b4:	e7eb      	b.n	1738e <notify_cb+0x1e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   173b6:	6973      	ldr	r3, [r6, #20]
   173b8:	b123      	cbz	r3, 173c4 <notify_cb+0x54>
   173ba:	4639      	mov	r1, r7
   173bc:	4798      	blx	r3
   173be:	b908      	cbnz	r0, 173c4 <notify_cb+0x54>
			bt_conn_unref(conn);
   173c0:	4620      	mov	r0, r4
   173c2:	e7f2      	b.n	173aa <notify_cb+0x3a>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   173c4:	8a7b      	ldrh	r3, [r7, #18]
   173c6:	f003 0314 	and.w	r3, r3, #20
   173ca:	b153      	cbz	r3, 173e2 <notify_cb+0x72>
			LOG_WRN("Link is not encrypted");
   173cc:	4b28      	ldr	r3, [pc, #160]	; (17470 <notify_cb+0x100>)
   173ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   173d2:	9305      	str	r3, [sp, #20]
   173d4:	2302      	movs	r3, #2
   173d6:	4827      	ldr	r0, [pc, #156]	; (17474 <notify_cb+0x104>)
   173d8:	aa04      	add	r2, sp, #16
   173da:	9304      	str	r3, [sp, #16]
   173dc:	f019 fca7 	bl	30d2e <z_log_msg_static_create.constprop.0>
   173e0:	e7ee      	b.n	173c0 <notify_cb+0x50>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   173e2:	89ab      	ldrh	r3, [r5, #12]
   173e4:	2b02      	cmp	r3, #2
   173e6:	d114      	bne.n	17412 <notify_cb+0xa2>
   173e8:	8933      	ldrh	r3, [r6, #8]
   173ea:	079a      	lsls	r2, r3, #30
   173ec:	d405      	bmi.n	173fa <notify_cb+0x8a>
		bt_conn_unref(conn);
   173ee:	4620      	mov	r0, r4
   173f0:	f7fd f864 	bl	144bc <bt_conn_unref>
		data->err = 0;
   173f4:	2300      	movs	r3, #0
   173f6:	60ab      	str	r3, [r5, #8]
   173f8:	e7c2      	b.n	17380 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   173fa:	4620      	mov	r0, r4
   173fc:	692a      	ldr	r2, [r5, #16]
   173fe:	88a9      	ldrh	r1, [r5, #4]
   17400:	f7ff fd6e 	bl	16ee0 <gatt_indicate>
			if (err == 0) {
   17404:	4606      	mov	r6, r0
   17406:	b978      	cbnz	r0, 17428 <notify_cb+0xb8>
				data->ind_params->_ref++;
   17408:	692a      	ldr	r2, [r5, #16]
   1740a:	7d93      	ldrb	r3, [r2, #22]
   1740c:	3301      	adds	r3, #1
   1740e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17410:	e7ed      	b.n	173ee <notify_cb+0x7e>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   17412:	2b01      	cmp	r3, #1
   17414:	d1eb      	bne.n	173ee <notify_cb+0x7e>
   17416:	8933      	ldrh	r3, [r6, #8]
   17418:	07db      	lsls	r3, r3, #31
   1741a:	d5e8      	bpl.n	173ee <notify_cb+0x7e>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1741c:	4620      	mov	r0, r4
   1741e:	692a      	ldr	r2, [r5, #16]
   17420:	88a9      	ldrh	r1, [r5, #4]
   17422:	f7ff ff3d 	bl	172a0 <gatt_notify>
   17426:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   17428:	4620      	mov	r0, r4
   1742a:	f7fd f847 	bl	144bc <bt_conn_unref>
		if (err < 0) {
   1742e:	2e00      	cmp	r6, #0
   17430:	dae0      	bge.n	173f4 <notify_cb+0x84>
			return BT_GATT_ITER_STOP;
   17432:	2000      	movs	r0, #0
   17434:	e7a5      	b.n	17382 <notify_cb+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17436:	4c10      	ldr	r4, [pc, #64]	; (17478 <notify_cb+0x108>)
   17438:	4910      	ldr	r1, [pc, #64]	; (1747c <notify_cb+0x10c>)
   1743a:	4620      	mov	r0, r4
   1743c:	f019 fb56 	bl	30aec <bt_addr_le_eq>
   17440:	2800      	cmp	r0, #0
   17442:	d1a4      	bne.n	1738e <notify_cb+0x1e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17444:	2207      	movs	r2, #7
   17446:	4621      	mov	r1, r4
   17448:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1744c:	f7fd fb28 	bl	14aa0 <bt_conn_lookup_state_le>
			if (!conn) {
   17450:	2800      	cmp	r0, #0
   17452:	d1ad      	bne.n	173b0 <notify_cb+0x40>
				sc = (struct sc_data *)data->ind_params->data;
   17454:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   17456:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   17458:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1745a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1745e:	8853      	ldrh	r3, [r2, #2]
   17460:	8812      	ldrh	r2, [r2, #0]
   17462:	f7ff f9af 	bl	167c4 <sc_save>
				continue;
   17466:	e792      	b.n	1738e <notify_cb+0x1e>
   17468:	000166d5 	.word	0x000166d5
   1746c:	2000c8bc 	.word	0x2000c8bc
   17470:	0003af75 	.word	0x0003af75
   17474:	00036410 	.word	0x00036410
   17478:	20011041 	.word	0x20011041
   1747c:	00039ba5 	.word	0x00039ba5

00017480 <bt_gatt_discover>:
{
   17480:	b5f0      	push	{r4, r5, r6, r7, lr}
   17482:	b087      	sub	sp, #28
   17484:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   17486:	4605      	mov	r5, r0
{
   17488:	af02      	add	r7, sp, #8
	__ASSERT(conn, "invalid parameters\n");
   1748a:	b970      	cbnz	r0, 174aa <bt_gatt_discover+0x2a>
   1748c:	4974      	ldr	r1, [pc, #464]	; (17660 <bt_gatt_discover+0x1e0>)
   1748e:	f241 13a4 	movw	r3, #4516	; 0x11a4
   17492:	4a74      	ldr	r2, [pc, #464]	; (17664 <bt_gatt_discover+0x1e4>)
   17494:	4874      	ldr	r0, [pc, #464]	; (17668 <bt_gatt_discover+0x1e8>)
   17496:	f017 fa5d 	bl	2e954 <assert_print>
   1749a:	4874      	ldr	r0, [pc, #464]	; (1766c <bt_gatt_discover+0x1ec>)
   1749c:	f017 fa5a 	bl	2e954 <assert_print>
   174a0:	f241 11a4 	movw	r1, #4516	; 0x11a4
	__ASSERT(params && params->func, "invalid parameters\n");
   174a4:	486f      	ldr	r0, [pc, #444]	; (17664 <bt_gatt_discover+0x1e4>)
   174a6:	f017 fa4e 	bl	2e946 <assert_post_action>
   174aa:	b109      	cbz	r1, 174b0 <bt_gatt_discover+0x30>
   174ac:	684b      	ldr	r3, [r1, #4]
   174ae:	b963      	cbnz	r3, 174ca <bt_gatt_discover+0x4a>
   174b0:	496f      	ldr	r1, [pc, #444]	; (17670 <bt_gatt_discover+0x1f0>)
   174b2:	f241 13a5 	movw	r3, #4517	; 0x11a5
   174b6:	4a6b      	ldr	r2, [pc, #428]	; (17664 <bt_gatt_discover+0x1e4>)
   174b8:	486b      	ldr	r0, [pc, #428]	; (17668 <bt_gatt_discover+0x1e8>)
   174ba:	f017 fa4b 	bl	2e954 <assert_print>
   174be:	486b      	ldr	r0, [pc, #428]	; (1766c <bt_gatt_discover+0x1ec>)
   174c0:	f017 fa48 	bl	2e954 <assert_print>
   174c4:	f241 11a5 	movw	r1, #4517	; 0x11a5
   174c8:	e7ec      	b.n	174a4 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle && params->end_handle),
   174ca:	890a      	ldrh	r2, [r1, #8]
   174cc:	b10a      	cbz	r2, 174d2 <bt_gatt_discover+0x52>
   174ce:	89cb      	ldrh	r3, [r1, #14]
   174d0:	b963      	cbnz	r3, 174ec <bt_gatt_discover+0x6c>
   174d2:	4968      	ldr	r1, [pc, #416]	; (17674 <bt_gatt_discover+0x1f4>)
   174d4:	f241 13a6 	movw	r3, #4518	; 0x11a6
   174d8:	4a62      	ldr	r2, [pc, #392]	; (17664 <bt_gatt_discover+0x1e4>)
   174da:	4863      	ldr	r0, [pc, #396]	; (17668 <bt_gatt_discover+0x1e8>)
   174dc:	f017 fa3a 	bl	2e954 <assert_print>
   174e0:	4862      	ldr	r0, [pc, #392]	; (1766c <bt_gatt_discover+0x1ec>)
   174e2:	f017 fa37 	bl	2e954 <assert_print>
   174e6:	f241 11a6 	movw	r1, #4518	; 0x11a6
   174ea:	e7db      	b.n	174a4 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle <= params->end_handle),
   174ec:	429a      	cmp	r2, r3
   174ee:	d90c      	bls.n	1750a <bt_gatt_discover+0x8a>
   174f0:	4961      	ldr	r1, [pc, #388]	; (17678 <bt_gatt_discover+0x1f8>)
   174f2:	f241 13a8 	movw	r3, #4520	; 0x11a8
   174f6:	4a5b      	ldr	r2, [pc, #364]	; (17664 <bt_gatt_discover+0x1e4>)
   174f8:	485b      	ldr	r0, [pc, #364]	; (17668 <bt_gatt_discover+0x1e8>)
   174fa:	f017 fa2b 	bl	2e954 <assert_print>
   174fe:	485b      	ldr	r0, [pc, #364]	; (1766c <bt_gatt_discover+0x1ec>)
   17500:	f017 fa28 	bl	2e954 <assert_print>
   17504:	f241 11a8 	movw	r1, #4520	; 0x11a8
   17508:	e7cc      	b.n	174a4 <bt_gatt_discover+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   1750a:	7a83      	ldrb	r3, [r0, #10]
   1750c:	2b07      	cmp	r3, #7
   1750e:	f040 80a4 	bne.w	1765a <bt_gatt_discover+0x1da>
	switch (params->type) {
   17512:	7c0b      	ldrb	r3, [r1, #16]
   17514:	2b06      	cmp	r3, #6
   17516:	f200 809b 	bhi.w	17650 <bt_gatt_discover+0x1d0>
   1751a:	e8df f003 	tbb	[pc, r3]
   1751e:	0404      	.short	0x0404
   17520:	92645c5c 	.word	0x92645c5c
   17524:	31          	.byte	0x31
   17525:	00          	.byte	0x00
		if (params->uuid) {
   17526:	680b      	ldr	r3, [r1, #0]
   17528:	b313      	cbz	r3, 17570 <bt_gatt_discover+0xf0>
	switch (params->uuid->type) {
   1752a:	781b      	ldrb	r3, [r3, #0]
   1752c:	b18b      	cbz	r3, 17552 <bt_gatt_discover+0xd2>
   1752e:	2b02      	cmp	r3, #2
   17530:	d01c      	beq.n	1756c <bt_gatt_discover+0xec>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   17532:	466c      	mov	r4, sp
   17534:	b088      	sub	sp, #32
   17536:	aa02      	add	r2, sp, #8
   17538:	4950      	ldr	r1, [pc, #320]	; (1767c <bt_gatt_discover+0x1fc>)
	switch (params->type) {
   1753a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid discovery type: %u", params->type);
   1753e:	2303      	movs	r3, #3
   17540:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17544:	484e      	ldr	r0, [pc, #312]	; (17680 <bt_gatt_discover+0x200>)
   17546:	f842 3f10 	str.w	r3, [r2, #16]!
   1754a:	f019 fbf0 	bl	30d2e <z_log_msg_static_create.constprop.0>
   1754e:	46a5      	mov	sp, r4
	return -EINVAL;
   17550:	e054      	b.n	175fc <bt_gatt_discover+0x17c>
		len += BT_UUID_SIZE_16;
   17552:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   17554:	9301      	str	r3, [sp, #4]
   17556:	2306      	movs	r3, #6
   17558:	4622      	mov	r2, r4
   1755a:	9300      	str	r3, [sp, #0]
   1755c:	4949      	ldr	r1, [pc, #292]	; (17684 <bt_gatt_discover+0x204>)
   1755e:	4b4a      	ldr	r3, [pc, #296]	; (17688 <bt_gatt_discover+0x208>)
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   17560:	4628      	mov	r0, r5
   17562:	f019 fc2e 	bl	30dc2 <gatt_req_send.constprop.0>
}
   17566:	3714      	adds	r7, #20
   17568:	46bd      	mov	sp, r7
   1756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (params->uuid->type) {
   1756c:	2316      	movs	r3, #22
   1756e:	e7f1      	b.n	17554 <bt_gatt_discover+0xd4>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   17570:	2310      	movs	r3, #16
   17572:	2104      	movs	r1, #4
   17574:	4622      	mov	r2, r4
   17576:	e9cd 3100 	strd	r3, r1, [sp]
   1757a:	4b44      	ldr	r3, [pc, #272]	; (1768c <bt_gatt_discover+0x20c>)
   1757c:	4944      	ldr	r1, [pc, #272]	; (17690 <bt_gatt_discover+0x210>)
   1757e:	e7ef      	b.n	17560 <bt_gatt_discover+0xe0>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   17580:	6808      	ldr	r0, [r1, #0]
   17582:	2800      	cmp	r0, #0
   17584:	d03a      	beq.n	175fc <bt_gatt_discover+0x17c>
   17586:	7806      	ldrb	r6, [r0, #0]
   17588:	2e00      	cmp	r6, #0
   1758a:	d137      	bne.n	175fc <bt_gatt_discover+0x17c>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1758c:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   17590:	4639      	mov	r1, r7
   17592:	703e      	strb	r6, [r7, #0]
   17594:	807b      	strh	r3, [r7, #2]
   17596:	f018 faee 	bl	2fb76 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1759a:	b1e0      	cbz	r0, 175d6 <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1759c:	f642 1302 	movw	r3, #10498	; 0x2902
   175a0:	6820      	ldr	r0, [r4, #0]
   175a2:	713e      	strb	r6, [r7, #4]
   175a4:	80fb      	strh	r3, [r7, #6]
   175a6:	1d39      	adds	r1, r7, #4
   175a8:	f018 fae5 	bl	2fb76 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   175ac:	b198      	cbz	r0, 175d6 <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   175ae:	f642 1303 	movw	r3, #10499	; 0x2903
   175b2:	6820      	ldr	r0, [r4, #0]
   175b4:	723e      	strb	r6, [r7, #8]
   175b6:	817b      	strh	r3, [r7, #10]
   175b8:	f107 0108 	add.w	r1, r7, #8
   175bc:	f018 fadb 	bl	2fb76 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   175c0:	b148      	cbz	r0, 175d6 <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   175c2:	f642 1304 	movw	r3, #10500	; 0x2904
   175c6:	6820      	ldr	r0, [r4, #0]
   175c8:	733e      	strb	r6, [r7, #12]
   175ca:	81fb      	strh	r3, [r7, #14]
   175cc:	f107 010c 	add.w	r1, r7, #12
   175d0:	f018 fad1 	bl	2fb76 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   175d4:	b990      	cbnz	r0, 175fc <bt_gatt_discover+0x17c>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   175d6:	2308      	movs	r3, #8
   175d8:	2204      	movs	r2, #4
   175da:	492e      	ldr	r1, [pc, #184]	; (17694 <bt_gatt_discover+0x214>)
   175dc:	e9cd 3200 	strd	r3, r2, [sp]
   175e0:	4622      	mov	r2, r4
   175e2:	4b2d      	ldr	r3, [pc, #180]	; (17698 <bt_gatt_discover+0x218>)
   175e4:	e7bc      	b.n	17560 <bt_gatt_discover+0xe0>
		if (params->uuid &&
   175e6:	6808      	ldr	r0, [r1, #0]
   175e8:	b358      	cbz	r0, 17642 <bt_gatt_discover+0x1c2>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   175ea:	2600      	movs	r6, #0
   175ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   175f0:	4639      	mov	r1, r7
   175f2:	703e      	strb	r6, [r7, #0]
   175f4:	807b      	strh	r3, [r7, #2]
   175f6:	f018 fabe 	bl	2fb76 <bt_uuid_cmp>
		if (params->uuid &&
   175fa:	b910      	cbnz	r0, 17602 <bt_gatt_discover+0x182>
			return -EINVAL;
   175fc:	f06f 0015 	mvn.w	r0, #21
   17600:	e7b1      	b.n	17566 <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   17602:	f642 0301 	movw	r3, #10241	; 0x2801
   17606:	6820      	ldr	r0, [r4, #0]
   17608:	713e      	strb	r6, [r7, #4]
   1760a:	80fb      	strh	r3, [r7, #6]
   1760c:	1d39      	adds	r1, r7, #4
   1760e:	f018 fab2 	bl	2fb76 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   17612:	2800      	cmp	r0, #0
   17614:	d0f2      	beq.n	175fc <bt_gatt_discover+0x17c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   17616:	f642 0302 	movw	r3, #10242	; 0x2802
   1761a:	6820      	ldr	r0, [r4, #0]
   1761c:	723e      	strb	r6, [r7, #8]
   1761e:	817b      	strh	r3, [r7, #10]
   17620:	f107 0108 	add.w	r1, r7, #8
   17624:	f018 faa7 	bl	2fb76 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   17628:	2800      	cmp	r0, #0
   1762a:	d0e7      	beq.n	175fc <bt_gatt_discover+0x17c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1762c:	f642 0303 	movw	r3, #10243	; 0x2803
   17630:	6820      	ldr	r0, [r4, #0]
   17632:	733e      	strb	r6, [r7, #12]
   17634:	81fb      	strh	r3, [r7, #14]
   17636:	f107 010c 	add.w	r1, r7, #12
   1763a:	f018 fa9c 	bl	2fb76 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1763e:	2800      	cmp	r0, #0
   17640:	d0dc      	beq.n	175fc <bt_gatt_discover+0x17c>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   17642:	2304      	movs	r3, #4
   17644:	4622      	mov	r2, r4
   17646:	e9cd 3300 	strd	r3, r3, [sp]
   1764a:	4914      	ldr	r1, [pc, #80]	; (1769c <bt_gatt_discover+0x21c>)
   1764c:	4b14      	ldr	r3, [pc, #80]	; (176a0 <bt_gatt_discover+0x220>)
   1764e:	e787      	b.n	17560 <bt_gatt_discover+0xe0>
		LOG_ERR("Invalid discovery type: %u", params->type);
   17650:	466c      	mov	r4, sp
   17652:	b088      	sub	sp, #32
   17654:	aa02      	add	r2, sp, #8
   17656:	4913      	ldr	r1, [pc, #76]	; (176a4 <bt_gatt_discover+0x224>)
   17658:	e76f      	b.n	1753a <bt_gatt_discover+0xba>
		return -ENOTCONN;
   1765a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1765e:	e782      	b.n	17566 <bt_gatt_discover+0xe6>
   17660:	0003a016 	.word	0x0003a016
   17664:	0003ae01 	.word	0x0003ae01
   17668:	000381c3 	.word	0x000381c3
   1766c:	0003afdd 	.word	0x0003afdd
   17670:	0003b0b6 	.word	0x0003b0b6
   17674:	0003b0cd 	.word	0x0003b0cd
   17678:	0003b0fa 	.word	0x0003b0fa
   1767c:	0003b127 	.word	0x0003b127
   17680:	00036410 	.word	0x00036410
   17684:	00030faf 	.word	0x00030faf
   17688:	00030d59 	.word	0x00030d59
   1768c:	00030b5b 	.word	0x00030b5b
   17690:	000176a9 	.word	0x000176a9
   17694:	000177cd 	.word	0x000177cd
   17698:	00030b8b 	.word	0x00030b8b
   1769c:	00017b71 	.word	0x00017b71
   176a0:	00030b43 	.word	0x00030b43
   176a4:	0003b13c 	.word	0x0003b13c

000176a8 <gatt_read_group_rsp>:
{
   176a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ac:	b08f      	sub	sp, #60	; 0x3c
   176ae:	af00      	add	r7, sp, #0
   176b0:	4606      	mov	r6, r0
   176b2:	4691      	mov	r9, r2
   176b4:	f8d7 8060 	ldr.w	r8, [r7, #96]	; 0x60
	if (err) {
   176b8:	b141      	cbz	r1, 176cc <gatt_read_group_rsp+0x24>
		params->func(conn, NULL, params);
   176ba:	4642      	mov	r2, r8
   176bc:	2100      	movs	r1, #0
   176be:	f8d8 3004 	ldr.w	r3, [r8, #4]
	params->func(conn, NULL, params);
   176c2:	4798      	blx	r3
}
   176c4:	373c      	adds	r7, #60	; 0x3c
   176c6:	46bd      	mov	sp, r7
   176c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   176cc:	7810      	ldrb	r0, [r2, #0]
   176ce:	2806      	cmp	r0, #6
   176d0:	d017      	beq.n	17702 <gatt_read_group_rsp+0x5a>
   176d2:	2814      	cmp	r0, #20
   176d4:	d014      	beq.n	17700 <gatt_read_group_rsp+0x58>
		LOG_ERR("Invalid data len %u", rsp->len);
   176d6:	466c      	mov	r4, sp
   176d8:	b088      	sub	sp, #32
   176da:	466a      	mov	r2, sp
   176dc:	4b39      	ldr	r3, [pc, #228]	; (177c4 <gatt_read_group_rsp+0x11c>)
   176de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (rsp->len) {
   176e2:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   176e6:	2303      	movs	r3, #3
   176e8:	4837      	ldr	r0, [pc, #220]	; (177c8 <gatt_read_group_rsp+0x120>)
   176ea:	f842 3f10 	str.w	r3, [r2, #16]!
   176ee:	f019 fb1e 	bl	30d2e <z_log_msg_static_create.constprop.0>
   176f2:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   176f4:	4642      	mov	r2, r8
   176f6:	2100      	movs	r1, #0
   176f8:	4630      	mov	r0, r6
   176fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   176fe:	e7e0      	b.n	176c2 <gatt_read_group_rsp+0x1a>
	switch (rsp->len) {
   17700:	2102      	movs	r1, #2
	uint16_t start_handle, end_handle = 0U;
   17702:	2500      	movs	r5, #0
		struct bt_gatt_attr attr = {};
   17704:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   17706:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   17708:	7439      	strb	r1, [r7, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1770a:	b29c      	uxth	r4, r3
   1770c:	f109 0b01 	add.w	fp, r9, #1
   17710:	f899 3000 	ldrb.w	r3, [r9]
   17714:	42a3      	cmp	r3, r4
   17716:	d909      	bls.n	1772c <gatt_read_group_rsp+0x84>
	if (length == 0U && end_handle) {
   17718:	2c00      	cmp	r4, #0
   1771a:	d1eb      	bne.n	176f4 <gatt_read_group_rsp+0x4c>
   1771c:	2d00      	cmp	r5, #0
   1771e:	d0e9      	beq.n	176f4 <gatt_read_group_rsp+0x4c>
	gatt_discover_next(conn, handle, params);
   17720:	4642      	mov	r2, r8
   17722:	4629      	mov	r1, r5
   17724:	4630      	mov	r0, r6
   17726:	f019 fc24 	bl	30f72 <gatt_discover_next>
   1772a:	e7cb      	b.n	176c4 <gatt_read_group_rsp+0x1c>
		struct bt_gatt_attr attr = {};
   1772c:	2214      	movs	r2, #20
   1772e:	2100      	movs	r1, #0
   17730:	f107 0024 	add.w	r0, r7, #36	; 0x24
   17734:	f01d fc7a 	bl	3502c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   17738:	f8bb 2000 	ldrh.w	r2, [fp]
   1773c:	b293      	uxth	r3, r2
		if (!start_handle) {
   1773e:	2b00      	cmp	r3, #0
   17740:	d0d8      	beq.n	176f4 <gatt_read_group_rsp+0x4c>
		end_handle = sys_le16_to_cpu(data->end_handle);
   17742:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   17746:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   17748:	2d00      	cmp	r5, #0
   1774a:	d0d3      	beq.n	176f4 <gatt_read_group_rsp+0x4c>
   1774c:	42ab      	cmp	r3, r5
   1774e:	d8d1      	bhi.n	176f4 <gatt_read_group_rsp+0x4c>
		switch (u.uuid.type) {
   17750:	7c3b      	ldrb	r3, [r7, #16]
   17752:	b32b      	cbz	r3, 177a0 <gatt_read_group_rsp+0xf8>
   17754:	2b02      	cmp	r3, #2
   17756:	d027      	beq.n	177a8 <gatt_read_group_rsp+0x100>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   17758:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
   1775c:	81b9      	strh	r1, [r7, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   1775e:	2b00      	cmp	r3, #0
   17760:	f642 0301 	movw	r3, #10241	; 0x2801
   17764:	bf08      	it	eq
   17766:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1776a:	80fb      	strh	r3, [r7, #6]
		value.uuid = &u.uuid;
   1776c:	f107 0310 	add.w	r3, r7, #16
   17770:	60bb      	str	r3, [r7, #8]
		attr.uuid = &uuid_svc.uuid;
   17772:	1d3b      	adds	r3, r7, #4
   17774:	627b      	str	r3, [r7, #36]	; 0x24
		attr.user_data = &value;
   17776:	f107 0308 	add.w	r3, r7, #8
		attr.handle = start_handle;
   1777a:	86ba      	strh	r2, [r7, #52]	; 0x34
		attr.user_data = &value;
   1777c:	633b      	str	r3, [r7, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1777e:	4642      	mov	r2, r8
   17780:	4630      	mov	r0, r6
   17782:	f8d8 3004 	ldr.w	r3, [r8, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   17786:	f887 a004 	strb.w	sl, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1778a:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1778e:	4798      	blx	r3
   17790:	2800      	cmp	r0, #0
   17792:	d097      	beq.n	176c4 <gatt_read_group_rsp+0x1c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   17794:	f899 3000 	ldrb.w	r3, [r9]
   17798:	1ae4      	subs	r4, r4, r3
   1779a:	b2a4      	uxth	r4, r4
   1779c:	449b      	add	fp, r3
   1779e:	e7b7      	b.n	17710 <gatt_read_group_rsp+0x68>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   177a0:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   177a4:	827b      	strh	r3, [r7, #18]
			break;
   177a6:	e7d7      	b.n	17758 <gatt_read_group_rsp+0xb0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   177a8:	f10b 0304 	add.w	r3, fp, #4
   177ac:	f107 0011 	add.w	r0, r7, #17
   177b0:	f10b 0c14 	add.w	ip, fp, #20
   177b4:	f853 eb04 	ldr.w	lr, [r3], #4
   177b8:	4563      	cmp	r3, ip
   177ba:	f840 eb04 	str.w	lr, [r0], #4
   177be:	d1f9      	bne.n	177b4 <gatt_read_group_rsp+0x10c>
   177c0:	e7ca      	b.n	17758 <gatt_read_group_rsp+0xb0>
   177c2:	bf00      	nop
   177c4:	0003b157 	.word	0x0003b157
   177c8:	00036410 	.word	0x00036410

000177cc <gatt_read_type_rsp>:
{
   177cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177d0:	b093      	sub	sp, #76	; 0x4c
   177d2:	af02      	add	r7, sp, #8
   177d4:	4680      	mov	r8, r0
   177d6:	4616      	mov	r6, r2
   177d8:	6ebd      	ldr	r5, [r7, #104]	; 0x68
	if (err) {
   177da:	b121      	cbz	r1, 177e6 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   177dc:	462a      	mov	r2, r5
   177de:	2100      	movs	r1, #0
   177e0:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
   177e2:	4798      	blx	r3
	if (!handle) {
   177e4:	e06c      	b.n	178c0 <gatt_read_type_rsp+0xf4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   177e6:	7c28      	ldrb	r0, [r5, #16]
   177e8:	2802      	cmp	r0, #2
   177ea:	f040 808a 	bne.w	17902 <gatt_read_type_rsp+0x136>
	switch (rsp->len) {
   177ee:	7814      	ldrb	r4, [r2, #0]
   177f0:	2c06      	cmp	r4, #6
   177f2:	d015      	beq.n	17820 <gatt_read_type_rsp+0x54>
   177f4:	2c08      	cmp	r4, #8
   177f6:	d014      	beq.n	17822 <gatt_read_type_rsp+0x56>
		LOG_ERR("Invalid data len %u", rsp->len);
   177f8:	466e      	mov	r6, sp
   177fa:	b088      	sub	sp, #32
   177fc:	aa02      	add	r2, sp, #8
   177fe:	4baa      	ldr	r3, [pc, #680]	; (17aa8 <gatt_read_type_rsp+0x2dc>)
	switch (rsp->len) {
   17800:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   17804:	2303      	movs	r3, #3
   17806:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Invalid data len %u", rsp->len);
   1780a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1780e:	48a7      	ldr	r0, [pc, #668]	; (17aac <gatt_read_type_rsp+0x2e0>)
   17810:	f019 fa8d 	bl	30d2e <z_log_msg_static_create.constprop.0>
   17814:	46b5      	mov	sp, r6
	params->func(conn, NULL, params);
   17816:	462a      	mov	r2, r5
   17818:	2100      	movs	r1, #0
   1781a:	4640      	mov	r0, r8
   1781c:	686b      	ldr	r3, [r5, #4]
   1781e:	e7e0      	b.n	177e2 <gatt_read_type_rsp+0x16>
	switch (rsp->len) {
   17820:	4601      	mov	r1, r0
	uint16_t handle = 0U;
   17822:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   17826:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   17828:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1782a:	b2a4      	uxth	r4, r4
   1782c:	f106 0b01 	add.w	fp, r6, #1
   17830:	7833      	ldrb	r3, [r6, #0]
   17832:	42a3      	cmp	r3, r4
   17834:	d90a      	bls.n	1784c <gatt_read_type_rsp+0x80>
	if (length == 0U && handle) {
   17836:	2c00      	cmp	r4, #0
   17838:	d1ed      	bne.n	17816 <gatt_read_type_rsp+0x4a>
   1783a:	f1b9 0f00 	cmp.w	r9, #0
   1783e:	d0ea      	beq.n	17816 <gatt_read_type_rsp+0x4a>
	gatt_discover_next(conn, handle, params);
   17840:	462a      	mov	r2, r5
   17842:	4649      	mov	r1, r9
   17844:	4640      	mov	r0, r8
   17846:	f019 fb94 	bl	30f72 <gatt_discover_next>
   1784a:	e039      	b.n	178c0 <gatt_read_type_rsp+0xf4>
		handle = sys_le16_to_cpu(data->handle);
   1784c:	f8bb a000 	ldrh.w	sl, [fp]
   17850:	fa1f f98a 	uxth.w	r9, sl
		if (!handle) {
   17854:	f1b9 0f00 	cmp.w	r9, #0
   17858:	d0dd      	beq.n	17816 <gatt_read_type_rsp+0x4a>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1785a:	f8bb 0002 	ldrh.w	r0, [fp, #2]
		switch (u.uuid.type) {
   1785e:	7e3a      	ldrb	r2, [r7, #24]
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   17860:	82b8      	strh	r0, [r7, #20]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   17862:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   17866:	82f9      	strh	r1, [r7, #22]
		switch (u.uuid.type) {
   17868:	b16a      	cbz	r2, 17886 <gatt_read_type_rsp+0xba>
   1786a:	2a02      	cmp	r2, #2
   1786c:	d016      	beq.n	1789c <gatt_read_type_rsp+0xd0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1786e:	6829      	ldr	r1, [r5, #0]
   17870:	b351      	cbz	r1, 178c8 <gatt_read_type_rsp+0xfc>
   17872:	f107 0018 	add.w	r0, r7, #24
   17876:	f018 f97e 	bl	2fb76 <bt_uuid_cmp>
   1787a:	b328      	cbz	r0, 178c8 <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1787c:	7833      	ldrb	r3, [r6, #0]
   1787e:	1ae4      	subs	r4, r4, r3
   17880:	b2a4      	uxth	r4, r4
   17882:	449b      	add	fp, r3
   17884:	e7d4      	b.n	17830 <gatt_read_type_rsp+0x64>
			value.uuid = &u.uuid;
   17886:	f107 0218 	add.w	r2, r7, #24
   1788a:	613a      	str	r2, [r7, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1788c:	f89b 2006 	ldrb.w	r2, [fp, #6]
   17890:	f89b 1007 	ldrb.w	r1, [fp, #7]
   17894:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17898:	837a      	strh	r2, [r7, #26]
			break;
   1789a:	e7e8      	b.n	1786e <gatt_read_type_rsp+0xa2>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1789c:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   1789e:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   178a0:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   178a2:	f8a5 a008 	strh.w	sl, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   178a6:	4640      	mov	r0, r8
   178a8:	9201      	str	r2, [sp, #4]
   178aa:	9300      	str	r3, [sp, #0]
   178ac:	462a      	mov	r2, r5
   178ae:	4b80      	ldr	r3, [pc, #512]	; (17ab0 <gatt_read_type_rsp+0x2e4>)
   178b0:	4980      	ldr	r1, [pc, #512]	; (17ab4 <gatt_read_type_rsp+0x2e8>)
   178b2:	f019 fa86 	bl	30dc2 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   178b6:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
   178ba:	f1b9 0f00 	cmp.w	r9, #0
   178be:	d1bf      	bne.n	17840 <gatt_read_type_rsp+0x74>
}
   178c0:	3744      	adds	r7, #68	; 0x44
   178c2:	46bd      	mov	sp, r7
   178c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   178c8:	f04f 0300 	mov.w	r3, #0
   178cc:	733b      	strb	r3, [r7, #12]
   178ce:	f642 0302 	movw	r3, #10242	; 0x2802
		attr = (struct bt_gatt_attr) {
   178d2:	2210      	movs	r2, #16
   178d4:	2100      	movs	r1, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   178d6:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   178d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
   178dc:	f01d fba6 	bl	3502c <memset>
   178e0:	f107 020c 	add.w	r2, r7, #12
   178e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   178e6:	f107 0210 	add.w	r2, r7, #16
   178ea:	63ba      	str	r2, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   178ec:	4640      	mov	r0, r8
   178ee:	462a      	mov	r2, r5
   178f0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   178f2:	f8a7 a03c 	strh.w	sl, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   178f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   178fa:	4798      	blx	r3
   178fc:	2800      	cmp	r0, #0
   178fe:	d1bd      	bne.n	1787c <gatt_read_type_rsp+0xb0>
   17900:	e7de      	b.n	178c0 <gatt_read_type_rsp+0xf4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   17902:	2803      	cmp	r0, #3
   17904:	d16c      	bne.n	179e0 <gatt_read_type_rsp+0x214>
	switch (rsp->len) {
   17906:	7814      	ldrb	r4, [r2, #0]
   17908:	2c07      	cmp	r4, #7
   1790a:	d00b      	beq.n	17924 <gatt_read_type_rsp+0x158>
   1790c:	2c15      	cmp	r4, #21
   1790e:	d008      	beq.n	17922 <gatt_read_type_rsp+0x156>
		LOG_ERR("Invalid data len %u", rsp->len);
   17910:	466e      	mov	r6, sp
   17912:	b088      	sub	sp, #32
   17914:	aa02      	add	r2, sp, #8
   17916:	4b64      	ldr	r3, [pc, #400]	; (17aa8 <gatt_read_type_rsp+0x2dc>)
	switch (rsp->len) {
   17918:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   1791c:	f842 0f10 	str.w	r0, [r2, #16]!
   17920:	e773      	b.n	1780a <gatt_read_type_rsp+0x3e>
	switch (rsp->len) {
   17922:	2102      	movs	r1, #2
	uint16_t handle = 0U;
   17924:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   17928:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1792a:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1792c:	b2a4      	uxth	r4, r4
   1792e:	f106 0a01 	add.w	sl, r6, #1
   17932:	7833      	ldrb	r3, [r6, #0]
   17934:	42a3      	cmp	r3, r4
   17936:	f63f af7e 	bhi.w	17836 <gatt_read_type_rsp+0x6a>
		handle = sys_le16_to_cpu(data->handle);
   1793a:	f8ba b000 	ldrh.w	fp, [sl]
   1793e:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   17942:	f1b9 0f00 	cmp.w	r9, #0
   17946:	f43f af66 	beq.w	17816 <gatt_read_type_rsp+0x4a>
		switch (u.uuid.type) {
   1794a:	7e3b      	ldrb	r3, [r7, #24]
   1794c:	b16b      	cbz	r3, 1796a <gatt_read_type_rsp+0x19e>
   1794e:	2b02      	cmp	r3, #2
   17950:	d013      	beq.n	1797a <gatt_read_type_rsp+0x1ae>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   17952:	6829      	ldr	r1, [r5, #0]
   17954:	b1f1      	cbz	r1, 17994 <gatt_read_type_rsp+0x1c8>
   17956:	f107 0018 	add.w	r0, r7, #24
   1795a:	f018 f90c 	bl	2fb76 <bt_uuid_cmp>
   1795e:	b1c8      	cbz	r0, 17994 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   17960:	7833      	ldrb	r3, [r6, #0]
   17962:	1ae4      	subs	r4, r4, r3
   17964:	b2a4      	uxth	r4, r4
   17966:	449a      	add	sl, r3
   17968:	e7e3      	b.n	17932 <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1796a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1796e:	f89a 2006 	ldrb.w	r2, [sl, #6]
   17972:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17976:	837b      	strh	r3, [r7, #26]
			break;
   17978:	e7eb      	b.n	17952 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1797a:	f10a 0305 	add.w	r3, sl, #5
   1797e:	f107 0219 	add.w	r2, r7, #25
   17982:	f10a 0115 	add.w	r1, sl, #21
   17986:	f853 0b04 	ldr.w	r0, [r3], #4
   1798a:	428b      	cmp	r3, r1
   1798c:	f842 0b04 	str.w	r0, [r2], #4
   17990:	d1f9      	bne.n	17986 <gatt_read_type_rsp+0x1ba>
   17992:	e7de      	b.n	17952 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   17994:	f89a 3002 	ldrb.w	r3, [sl, #2]
   17998:	f8ba 2003 	ldrh.w	r2, [sl, #3]
   1799c:	75bb      	strb	r3, [r7, #22]
			.uuid = BT_UUID_GATT_CHRC,
   1799e:	f04f 0300 	mov.w	r3, #0
   179a2:	733b      	strb	r3, [r7, #12]
   179a4:	f642 0303 	movw	r3, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   179a8:	f107 0118 	add.w	r1, r7, #24
   179ac:	6139      	str	r1, [r7, #16]
   179ae:	82ba      	strh	r2, [r7, #20]
		attr = (struct bt_gatt_attr) {
   179b0:	2100      	movs	r1, #0
   179b2:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   179b4:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   179b6:	f107 0030 	add.w	r0, r7, #48	; 0x30
   179ba:	f01d fb37 	bl	3502c <memset>
   179be:	f107 030c 	add.w	r3, r7, #12
   179c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   179c4:	f107 0310 	add.w	r3, r7, #16
   179c8:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   179ca:	462a      	mov	r2, r5
   179cc:	4640      	mov	r0, r8
   179ce:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   179d0:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   179d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   179d8:	4798      	blx	r3
   179da:	2800      	cmp	r0, #0
   179dc:	d1c0      	bne.n	17960 <gatt_read_type_rsp+0x194>
   179de:	e76f      	b.n	178c0 <gatt_read_type_rsp+0xf4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   179e0:	6829      	ldr	r1, [r5, #0]
   179e2:	780a      	ldrb	r2, [r1, #0]
   179e4:	2a00      	cmp	r2, #0
   179e6:	f47f af16 	bne.w	17816 <gatt_read_type_rsp+0x4a>
	uint16_t handle = 0U;
   179ea:	4691      	mov	r9, r2
	uuid_val = BT_UUID_16(params->uuid)->val;
   179ec:	8849      	ldrh	r1, [r1, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   179ee:	1e5c      	subs	r4, r3, #1
		switch (uuid_val) {
   179f0:	f5a1 5324 	sub.w	r3, r1, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   179f4:	b2a4      	uxth	r4, r4
   179f6:	f106 0a01 	add.w	sl, r6, #1
		switch (uuid_val) {
   179fa:	607b      	str	r3, [r7, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
   179fc:	7833      	ldrb	r3, [r6, #0]
   179fe:	42a3      	cmp	r3, r4
   17a00:	f63f af19 	bhi.w	17836 <gatt_read_type_rsp+0x6a>
		handle = sys_le16_to_cpu(data->handle);
   17a04:	f8ba b000 	ldrh.w	fp, [sl]
   17a08:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   17a0c:	f1b9 0f00 	cmp.w	r9, #0
   17a10:	f43f af01 	beq.w	17816 <gatt_read_type_rsp+0x4a>
		switch (uuid_val) {
   17a14:	687a      	ldr	r2, [r7, #4]
   17a16:	2a04      	cmp	r2, #4
   17a18:	f63f aefd 	bhi.w	17816 <gatt_read_type_rsp+0x4a>
   17a1c:	a301      	add	r3, pc, #4	; (adr r3, 17a24 <gatt_read_type_rsp+0x258>)
   17a1e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   17a22:	bf00      	nop
   17a24:	00017a39 	.word	0x00017a39
   17a28:	00017817 	.word	0x00017817
   17a2c:	00017a39 	.word	0x00017a39
   17a30:	00017a39 	.word	0x00017a39
   17a34:	00017a79 	.word	0x00017a79
			value.scc.flags = sys_get_le16(data->value);
   17a38:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   17a3c:	833b      	strh	r3, [r7, #24]
			.uuid = params->uuid,
   17a3e:	682b      	ldr	r3, [r5, #0]
		attr = (struct bt_gatt_attr) {
   17a40:	2210      	movs	r2, #16
   17a42:	2100      	movs	r1, #0
   17a44:	f107 0030 	add.w	r0, r7, #48	; 0x30
			.uuid = params->uuid,
   17a48:	603b      	str	r3, [r7, #0]
		attr = (struct bt_gatt_attr) {
   17a4a:	f01d faef 	bl	3502c <memset>
   17a4e:	683b      	ldr	r3, [r7, #0]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17a50:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   17a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   17a54:	f107 0318 	add.w	r3, r7, #24
   17a58:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17a5a:	4640      	mov	r0, r8
   17a5c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   17a5e:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17a62:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17a66:	4798      	blx	r3
   17a68:	2800      	cmp	r0, #0
   17a6a:	f43f af29 	beq.w	178c0 <gatt_read_type_rsp+0xf4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   17a6e:	7833      	ldrb	r3, [r6, #0]
   17a70:	1ae4      	subs	r4, r4, r3
   17a72:	b2a4      	uxth	r4, r4
   17a74:	449a      	add	sl, r3
   17a76:	e7c1      	b.n	179fc <gatt_read_type_rsp+0x230>
			value.cpf.format = cpf->format;
   17a78:	f89a 3002 	ldrb.w	r3, [sl, #2]
   17a7c:	763b      	strb	r3, [r7, #24]
			value.cpf.exponent = cpf->exponent;
   17a7e:	f89a 3003 	ldrb.w	r3, [sl, #3]
   17a82:	767b      	strb	r3, [r7, #25]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   17a84:	f89a 2005 	ldrb.w	r2, [sl, #5]
   17a88:	f89a 3004 	ldrb.w	r3, [sl, #4]
   17a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17a90:	837b      	strh	r3, [r7, #26]
			value.cpf.name_space = cpf->name_space;
   17a92:	f89a 3006 	ldrb.w	r3, [sl, #6]
   17a96:	773b      	strb	r3, [r7, #28]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   17a98:	f89a 3007 	ldrb.w	r3, [sl, #7]
   17a9c:	f89a 2008 	ldrb.w	r2, [sl, #8]
   17aa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17aa4:	83fb      	strh	r3, [r7, #30]
			break;
   17aa6:	e7ca      	b.n	17a3e <gatt_read_type_rsp+0x272>
   17aa8:	0003b157 	.word	0x0003b157
   17aac:	00036410 	.word	0x00036410
   17ab0:	00030b2f 	.word	0x00030b2f
   17ab4:	00017ab9 	.word	0x00017ab9

00017ab8 <read_included_uuid_cb>:
{
   17ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17aba:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   17abc:	2b10      	cmp	r3, #16
{
   17abe:	af00      	add	r7, sp, #0
   17ac0:	4605      	mov	r5, r0
   17ac2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
	if (length != 16U) {
   17ac4:	d016      	beq.n	17af4 <read_included_uuid_cb+0x3c>
		LOG_ERR("Invalid data len %u", length);
   17ac6:	466e      	mov	r6, sp
   17ac8:	b088      	sub	sp, #32
   17aca:	466a      	mov	r2, sp
   17acc:	4926      	ldr	r1, [pc, #152]	; (17b68 <read_included_uuid_cb+0xb0>)
   17ace:	4827      	ldr	r0, [pc, #156]	; (17b6c <read_included_uuid_cb+0xb4>)
   17ad0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17ad4:	2303      	movs	r3, #3
   17ad6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ada:	f842 3f10 	str.w	r3, [r2, #16]!
   17ade:	f019 f926 	bl	30d2e <z_log_msg_static_create.constprop.0>
		params->func(conn, NULL, params);
   17ae2:	4622      	mov	r2, r4
   17ae4:	46b5      	mov	sp, r6
   17ae6:	2100      	movs	r1, #0
   17ae8:	4628      	mov	r0, r5
   17aea:	6863      	ldr	r3, [r4, #4]
   17aec:	4798      	blx	r3
}
   17aee:	373c      	adds	r7, #60	; 0x3c
   17af0:	46bd      	mov	sp, r7
   17af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	value.start_handle = params->_included.start_handle;
   17af4:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   17af6:	f107 0010 	add.w	r0, r7, #16
	value.start_handle = params->_included.start_handle;
   17afa:	81bb      	strh	r3, [r7, #12]
	value.end_handle = params->_included.end_handle;
   17afc:	89a3      	ldrh	r3, [r4, #12]
	handle = params->_included.attr_handle;
   17afe:	8926      	ldrh	r6, [r4, #8]
	value.end_handle = params->_included.end_handle;
   17b00:	81fb      	strh	r3, [r7, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   17b02:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   17b04:	60b8      	str	r0, [r7, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   17b06:	743b      	strb	r3, [r7, #16]
	memcpy(u.u128.val, pdu, length);
   17b08:	f102 0110 	add.w	r1, r2, #16
   17b0c:	f107 0311 	add.w	r3, r7, #17
   17b10:	f852 cb04 	ldr.w	ip, [r2], #4
   17b14:	428a      	cmp	r2, r1
   17b16:	f843 cb04 	str.w	ip, [r3], #4
   17b1a:	d1f9      	bne.n	17b10 <read_included_uuid_cb+0x58>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   17b1c:	6821      	ldr	r1, [r4, #0]
   17b1e:	b9e9      	cbnz	r1, 17b5c <read_included_uuid_cb+0xa4>
		.uuid = BT_UUID_GATT_INCLUDE,
   17b20:	2100      	movs	r1, #0
   17b22:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   17b26:	2210      	movs	r2, #16
   17b28:	f107 0028 	add.w	r0, r7, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   17b2c:	7139      	strb	r1, [r7, #4]
   17b2e:	80fb      	strh	r3, [r7, #6]
	attr = (struct bt_gatt_attr) {
   17b30:	f01d fa7c 	bl	3502c <memset>
   17b34:	1d3b      	adds	r3, r7, #4
   17b36:	627b      	str	r3, [r7, #36]	; 0x24
   17b38:	f107 0308 	add.w	r3, r7, #8
   17b3c:	633b      	str	r3, [r7, #48]	; 0x30
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17b3e:	4622      	mov	r2, r4
   17b40:	4628      	mov	r0, r5
   17b42:	6863      	ldr	r3, [r4, #4]
	attr = (struct bt_gatt_attr) {
   17b44:	86be      	strh	r6, [r7, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17b46:	f107 0124 	add.w	r1, r7, #36	; 0x24
   17b4a:	4798      	blx	r3
   17b4c:	2800      	cmp	r0, #0
   17b4e:	d0ce      	beq.n	17aee <read_included_uuid_cb+0x36>
	gatt_discover_next(conn, params->start_handle, params);
   17b50:	4622      	mov	r2, r4
   17b52:	4628      	mov	r0, r5
   17b54:	8921      	ldrh	r1, [r4, #8]
   17b56:	f019 fa0c 	bl	30f72 <gatt_discover_next>
	return;
   17b5a:	e7c8      	b.n	17aee <read_included_uuid_cb+0x36>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   17b5c:	f018 f80b 	bl	2fb76 <bt_uuid_cmp>
   17b60:	2800      	cmp	r0, #0
   17b62:	d0dd      	beq.n	17b20 <read_included_uuid_cb+0x68>
   17b64:	e7f4      	b.n	17b50 <read_included_uuid_cb+0x98>
   17b66:	bf00      	nop
   17b68:	0003b157 	.word	0x0003b157
   17b6c:	00036410 	.word	0x00036410

00017b70 <gatt_find_info_rsp>:
{
   17b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b74:	b091      	sub	sp, #68	; 0x44
   17b76:	af00      	add	r7, sp, #0
   17b78:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   17b7a:	60f8      	str	r0, [r7, #12]
	if (err) {
   17b7c:	b999      	cbnz	r1, 17ba6 <gatt_find_info_rsp+0x36>
	switch (rsp->format) {
   17b7e:	7810      	ldrb	r0, [r2, #0]
   17b80:	2801      	cmp	r0, #1
   17b82:	d016      	beq.n	17bb2 <gatt_find_info_rsp+0x42>
   17b84:	2802      	cmp	r0, #2
   17b86:	d02e      	beq.n	17be6 <gatt_find_info_rsp+0x76>
		LOG_ERR("Invalid format %u", rsp->format);
   17b88:	466c      	mov	r4, sp
   17b8a:	b088      	sub	sp, #32
   17b8c:	466a      	mov	r2, sp
   17b8e:	4b52      	ldr	r3, [pc, #328]	; (17cd8 <gatt_find_info_rsp+0x168>)
   17b90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (rsp->format) {
   17b94:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Invalid format %u", rsp->format);
   17b98:	2303      	movs	r3, #3
   17b9a:	4850      	ldr	r0, [pc, #320]	; (17cdc <gatt_find_info_rsp+0x16c>)
   17b9c:	f842 3f10 	str.w	r3, [r2, #16]!
   17ba0:	f019 f8c5 	bl	30d2e <z_log_msg_static_create.constprop.0>
   17ba4:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   17ba6:	462a      	mov	r2, r5
   17ba8:	2100      	movs	r1, #0
   17baa:	686b      	ldr	r3, [r5, #4]
   17bac:	68f8      	ldr	r0, [r7, #12]
   17bae:	4798      	blx	r3
   17bb0:	e08d      	b.n	17cce <gatt_find_info_rsp+0x15e>
	switch (rsp->format) {
   17bb2:	f04f 0904 	mov.w	r9, #4
	length--;
   17bb6:	3b01      	subs	r3, #1
   17bb8:	b29b      	uxth	r3, r3
	if (length < len) {
   17bba:	454b      	cmp	r3, r9
		u.uuid.type = BT_UUID_TYPE_16;
   17bbc:	7639      	strb	r1, [r7, #24]
	if (length < len) {
   17bbe:	d3f2      	bcc.n	17ba6 <gatt_find_info_rsp+0x36>
	bool skip = false;
   17bc0:	f04f 0800 	mov.w	r8, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   17bc4:	fbb3 fbf9 	udiv	fp, r3, r9
			skip = false;
   17bc8:	46c2      	mov	sl, r8
	for (i = length / len, pdu = rsp->info; i != 0;
   17bca:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   17bcc:	f8c7 8008 	str.w	r8, [r7, #8]
   17bd0:	f107 0618 	add.w	r6, r7, #24
	for (i = length / len, pdu = rsp->info; i != 0;
   17bd4:	f1bb 0f00 	cmp.w	fp, #0
   17bd8:	d109      	bne.n	17bee <gatt_find_info_rsp+0x7e>
	gatt_discover_next(conn, handle, params);
   17bda:	462a      	mov	r2, r5
   17bdc:	e9d7 1002 	ldrd	r1, r0, [r7, #8]
   17be0:	f019 f9c7 	bl	30f72 <gatt_discover_next>
	return;
   17be4:	e073      	b.n	17cce <gatt_find_info_rsp+0x15e>
	switch (rsp->format) {
   17be6:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   17be8:	f04f 0912 	mov.w	r9, #18
   17bec:	e7e3      	b.n	17bb6 <gatt_find_info_rsp+0x46>
		handle = sys_le16_to_cpu(info.i16->handle);
   17bee:	8823      	ldrh	r3, [r4, #0]
   17bf0:	607b      	str	r3, [r7, #4]
   17bf2:	88bb      	ldrh	r3, [r7, #4]
   17bf4:	60bb      	str	r3, [r7, #8]
		if (skip) {
   17bf6:	f1b8 0f00 	cmp.w	r8, #0
   17bfa:	d151      	bne.n	17ca0 <gatt_find_info_rsp+0x130>
		switch (u.uuid.type) {
   17bfc:	7e3b      	ldrb	r3, [r7, #24]
   17bfe:	2b00      	cmp	r3, #0
   17c00:	d037      	beq.n	17c72 <gatt_find_info_rsp+0x102>
   17c02:	2b02      	cmp	r3, #2
   17c04:	d03b      	beq.n	17c7e <gatt_find_info_rsp+0x10e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   17c06:	6829      	ldr	r1, [r5, #0]
   17c08:	2900      	cmp	r1, #0
   17c0a:	d144      	bne.n	17c96 <gatt_find_info_rsp+0x126>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   17c0c:	7c2b      	ldrb	r3, [r5, #16]
   17c0e:	2b04      	cmp	r3, #4
   17c10:	d14c      	bne.n	17cac <gatt_find_info_rsp+0x13c>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   17c12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17c16:	4630      	mov	r0, r6
   17c18:	f107 0110 	add.w	r1, r7, #16
   17c1c:	f887 a010 	strb.w	sl, [r7, #16]
   17c20:	827b      	strh	r3, [r7, #18]
   17c22:	f017 ffa8 	bl	2fb76 <bt_uuid_cmp>
   17c26:	2800      	cmp	r0, #0
   17c28:	d03a      	beq.n	17ca0 <gatt_find_info_rsp+0x130>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   17c2a:	f642 0301 	movw	r3, #10241	; 0x2801
   17c2e:	4630      	mov	r0, r6
   17c30:	f107 0114 	add.w	r1, r7, #20
   17c34:	f887 a014 	strb.w	sl, [r7, #20]
   17c38:	82fb      	strh	r3, [r7, #22]
   17c3a:	f017 ff9c 	bl	2fb76 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   17c3e:	b378      	cbz	r0, 17ca0 <gatt_find_info_rsp+0x130>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   17c40:	f642 0302 	movw	r3, #10242	; 0x2802
   17c44:	4630      	mov	r0, r6
   17c46:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   17c4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17c4c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17c50:	f017 ff91 	bl	2fb76 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   17c54:	b320      	cbz	r0, 17ca0 <gatt_find_info_rsp+0x130>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   17c56:	f642 0303 	movw	r3, #10243	; 0x2803
   17c5a:	4630      	mov	r0, r6
   17c5c:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   17c60:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17c62:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17c66:	f017 ff86 	bl	2fb76 <bt_uuid_cmp>
   17c6a:	b9f8      	cbnz	r0, 17cac <gatt_find_info_rsp+0x13c>
				skip = true;
   17c6c:	f04f 0801 	mov.w	r8, #1
   17c70:	e018      	b.n	17ca4 <gatt_find_info_rsp+0x134>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   17c72:	78a3      	ldrb	r3, [r4, #2]
   17c74:	78e2      	ldrb	r2, [r4, #3]
   17c76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17c7a:	837b      	strh	r3, [r7, #26]
			break;
   17c7c:	e7c3      	b.n	17c06 <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
   17c7e:	1ca3      	adds	r3, r4, #2
   17c80:	f107 0219 	add.w	r2, r7, #25
   17c84:	f104 0112 	add.w	r1, r4, #18
   17c88:	f853 0b04 	ldr.w	r0, [r3], #4
   17c8c:	428b      	cmp	r3, r1
   17c8e:	f842 0b04 	str.w	r0, [r2], #4
   17c92:	d1f9      	bne.n	17c88 <gatt_find_info_rsp+0x118>
   17c94:	e7b7      	b.n	17c06 <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   17c96:	4630      	mov	r0, r6
   17c98:	f017 ff6d 	bl	2fb76 <bt_uuid_cmp>
   17c9c:	2800      	cmp	r0, #0
   17c9e:	d0b5      	beq.n	17c0c <gatt_find_info_rsp+0x9c>
			skip = false;
   17ca0:	f04f 0800 	mov.w	r8, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   17ca4:	f10b 3bff 	add.w	fp, fp, #4294967295
   17ca8:	444c      	add	r4, r9
   17caa:	e793      	b.n	17bd4 <gatt_find_info_rsp+0x64>
		attr = (struct bt_gatt_attr) {
   17cac:	2210      	movs	r2, #16
   17cae:	2100      	movs	r1, #0
   17cb0:	f107 0030 	add.w	r0, r7, #48	; 0x30
   17cb4:	f01d f9ba 	bl	3502c <memset>
   17cb8:	88bb      	ldrh	r3, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17cba:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   17cbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17cbe:	68f8      	ldr	r0, [r7, #12]
   17cc0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   17cc2:	62fe      	str	r6, [r7, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   17cc4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17cc8:	4798      	blx	r3
   17cca:	2800      	cmp	r0, #0
   17ccc:	d1ea      	bne.n	17ca4 <gatt_find_info_rsp+0x134>
}
   17cce:	3744      	adds	r7, #68	; 0x44
   17cd0:	46bd      	mov	sp, r7
   17cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cd6:	bf00      	nop
   17cd8:	0003b16b 	.word	0x0003b16b
   17cdc:	00036410 	.word	0x00036410

00017ce0 <bt_gatt_subscribe>:
}
#endif /* CONFIG_BT_GATT_AUTO_DISCOVER_CCC */

int bt_gatt_subscribe(struct bt_conn *conn,
		      struct bt_gatt_subscribe_params *params)
{
   17ce0:	b570      	push	{r4, r5, r6, lr}
   17ce2:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp;
	bool has_subscription = false;

	__ASSERT(conn, "invalid parameters\n");
   17ce4:	4606      	mov	r6, r0
   17ce6:	b970      	cbnz	r0, 17d06 <bt_gatt_subscribe+0x26>
   17ce8:	4941      	ldr	r1, [pc, #260]	; (17df0 <bt_gatt_subscribe+0x110>)
   17cea:	f241 4392 	movw	r3, #5266	; 0x1492
   17cee:	4a41      	ldr	r2, [pc, #260]	; (17df4 <bt_gatt_subscribe+0x114>)
   17cf0:	4841      	ldr	r0, [pc, #260]	; (17df8 <bt_gatt_subscribe+0x118>)
   17cf2:	f016 fe2f 	bl	2e954 <assert_print>
   17cf6:	4841      	ldr	r0, [pc, #260]	; (17dfc <bt_gatt_subscribe+0x11c>)
   17cf8:	f016 fe2c 	bl	2e954 <assert_print>
   17cfc:	f241 4192 	movw	r1, #5266	; 0x1492
	__ASSERT(params && params->notify,  "invalid parameters\n");
   17d00:	483c      	ldr	r0, [pc, #240]	; (17df4 <bt_gatt_subscribe+0x114>)
   17d02:	f016 fe20 	bl	2e946 <assert_post_action>
   17d06:	b109      	cbz	r1, 17d0c <bt_gatt_subscribe+0x2c>
   17d08:	680b      	ldr	r3, [r1, #0]
   17d0a:	b963      	cbnz	r3, 17d26 <bt_gatt_subscribe+0x46>
   17d0c:	493c      	ldr	r1, [pc, #240]	; (17e00 <bt_gatt_subscribe+0x120>)
   17d0e:	f241 4393 	movw	r3, #5267	; 0x1493
   17d12:	4a38      	ldr	r2, [pc, #224]	; (17df4 <bt_gatt_subscribe+0x114>)
   17d14:	4838      	ldr	r0, [pc, #224]	; (17df8 <bt_gatt_subscribe+0x118>)
   17d16:	f016 fe1d 	bl	2e954 <assert_print>
   17d1a:	4838      	ldr	r0, [pc, #224]	; (17dfc <bt_gatt_subscribe+0x11c>)
   17d1c:	f016 fe1a 	bl	2e954 <assert_print>
   17d20:	f241 4193 	movw	r1, #5267	; 0x1493
   17d24:	e7ec      	b.n	17d00 <bt_gatt_subscribe+0x20>
	__ASSERT(params->value, "invalid parameters\n");
   17d26:	8a0b      	ldrh	r3, [r1, #16]
   17d28:	b963      	cbnz	r3, 17d44 <bt_gatt_subscribe+0x64>
   17d2a:	4936      	ldr	r1, [pc, #216]	; (17e04 <bt_gatt_subscribe+0x124>)
   17d2c:	f241 4394 	movw	r3, #5268	; 0x1494
   17d30:	4a30      	ldr	r2, [pc, #192]	; (17df4 <bt_gatt_subscribe+0x114>)
   17d32:	4831      	ldr	r0, [pc, #196]	; (17df8 <bt_gatt_subscribe+0x118>)
   17d34:	f016 fe0e 	bl	2e954 <assert_print>
   17d38:	4830      	ldr	r0, [pc, #192]	; (17dfc <bt_gatt_subscribe+0x11c>)
   17d3a:	f016 fe0b 	bl	2e954 <assert_print>
   17d3e:	f241 4194 	movw	r1, #5268	; 0x1494
   17d42:	e7dd      	b.n	17d00 <bt_gatt_subscribe+0x20>
#if defined(CONFIG_BT_GATT_AUTO_DISCOVER_CCC)
	__ASSERT(params->ccc_handle ||
		 (params->end_handle && params->disc_params),
		 "invalid parameters\n");
#else
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   17d44:	89cb      	ldrh	r3, [r1, #14]
   17d46:	b963      	cbnz	r3, 17d62 <bt_gatt_subscribe+0x82>
   17d48:	492f      	ldr	r1, [pc, #188]	; (17e08 <bt_gatt_subscribe+0x128>)
   17d4a:	f241 439a 	movw	r3, #5274	; 0x149a
   17d4e:	4a29      	ldr	r2, [pc, #164]	; (17df4 <bt_gatt_subscribe+0x114>)
   17d50:	4829      	ldr	r0, [pc, #164]	; (17df8 <bt_gatt_subscribe+0x118>)
   17d52:	f016 fdff 	bl	2e954 <assert_print>
   17d56:	4829      	ldr	r0, [pc, #164]	; (17dfc <bt_gatt_subscribe+0x11c>)
   17d58:	f016 fdfc 	bl	2e954 <assert_print>
   17d5c:	f241 419a 	movw	r1, #5274	; 0x149a
   17d60:	e7ce      	b.n	17d00 <bt_gatt_subscribe+0x20>
#endif

	if (conn->state != BT_CONN_CONNECTED) {
   17d62:	7a83      	ldrb	r3, [r0, #10]
   17d64:	2b07      	cmp	r3, #7
   17d66:	d13a      	bne.n	17dde <bt_gatt_subscribe+0xfe>
	sub = gatt_sub_find(conn);
   17d68:	f7fe fc2e 	bl	165c8 <gatt_sub_find>
	if (!sub) {
   17d6c:	4604      	mov	r4, r0
   17d6e:	b958      	cbnz	r0, 17d88 <bt_gatt_subscribe+0xa8>
		sub = gatt_sub_find(NULL);
   17d70:	f7fe fc2a 	bl	165c8 <gatt_sub_find>
		if (sub) {
   17d74:	4604      	mov	r4, r0
   17d76:	2800      	cmp	r0, #0
   17d78:	d034      	beq.n	17de4 <bt_gatt_subscribe+0x104>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   17d7a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17d7e:	3001      	adds	r0, #1
   17d80:	f018 ff21 	bl	30bc6 <bt_addr_le_copy>
			sub->id = conn->id;
   17d84:	7a33      	ldrb	r3, [r6, #8]
   17d86:	7023      	strb	r3, [r4, #0]
	return list->head;
   17d88:	68a3      	ldr	r3, [r4, #8]
	if (!sub) {
		return -ENOMEM;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17d8a:	b17b      	cbz	r3, 17dac <bt_gatt_subscribe+0xcc>
   17d8c:	2200      	movs	r2, #0
   17d8e:	3b18      	subs	r3, #24
		/* Fail if entry already exists */
		if (tmp == params) {
   17d90:	429d      	cmp	r5, r3
   17d92:	d02a      	beq.n	17dea <bt_gatt_subscribe+0x10a>
			gatt_sub_remove(conn, sub, NULL, NULL);
			return -EALREADY;
		}

		/* Check if another subscription exists */
		if (tmp->value_handle == params->value_handle &&
   17d94:	8998      	ldrh	r0, [r3, #12]
   17d96:	89a9      	ldrh	r1, [r5, #12]
   17d98:	4288      	cmp	r0, r1
   17d9a:	d104      	bne.n	17da6 <bt_gatt_subscribe+0xc6>
   17d9c:	8a18      	ldrh	r0, [r3, #16]
   17d9e:	8a29      	ldrh	r1, [r5, #16]
		    tmp->value >= params->value) {
			has_subscription = true;
   17da0:	4288      	cmp	r0, r1
   17da2:	bf28      	it	cs
   17da4:	2201      	movcs	r2, #1
	return node->next;
   17da6:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17da8:	b96b      	cbnz	r3, 17dc6 <bt_gatt_subscribe+0xe6>
		}
	}

	/* Skip write if already subscribed */
	if (!has_subscription) {
   17daa:	b972      	cbnz	r2, 17dca <bt_gatt_subscribe+0xea>
#if defined(CONFIG_BT_GATT_AUTO_DISCOVER_CCC)
		if (!params->ccc_handle) {
			return gatt_ccc_discover(conn, params);
		}
#endif
		err = gatt_write_ccc(conn, params);
   17dac:	4630      	mov	r0, r6
   17dae:	4629      	mov	r1, r5
   17db0:	f7fe fd3e 	bl	16830 <gatt_write_ccc>
		if (err) {
   17db4:	4606      	mov	r6, r0
   17db6:	b140      	cbz	r0, 17dca <bt_gatt_subscribe+0xea>
	if (gatt_sub_is_empty(sub)) {
   17db8:	68a3      	ldr	r3, [r4, #8]
   17dba:	b913      	cbnz	r3, 17dc2 <bt_gatt_subscribe+0xe2>
		gatt_sub_free(sub);
   17dbc:	4620      	mov	r0, r4
   17dbe:	f7fe fc1b 	bl	165f8 <gatt_sub_free>
	 * reported to send notification before reply to CCC write.
	 */
	sys_slist_prepend(&sub->list, &params->node);

	return 0;
}
   17dc2:	4630      	mov	r0, r6
   17dc4:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17dc6:	3b18      	subs	r3, #24
   17dc8:	e7e2      	b.n	17d90 <bt_gatt_subscribe+0xb0>
	return list->head;
   17dca:	68a2      	ldr	r2, [r4, #8]
	sys_slist_prepend(&sub->list, &params->node);
   17dcc:	f105 0318 	add.w	r3, r5, #24
	parent->next = child;
   17dd0:	61aa      	str	r2, [r5, #24]
Z_GENLIST_PREPEND(slist, snode)
   17dd2:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   17dd4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   17dd6:	b902      	cbnz	r2, 17dda <bt_gatt_subscribe+0xfa>
	list->tail = node;
   17dd8:	60e3      	str	r3, [r4, #12]
	return 0;
   17dda:	2600      	movs	r6, #0
   17ddc:	e7f1      	b.n	17dc2 <bt_gatt_subscribe+0xe2>
		return -ENOTCONN;
   17dde:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   17de2:	e7ee      	b.n	17dc2 <bt_gatt_subscribe+0xe2>
		return -ENOMEM;
   17de4:	f06f 060b 	mvn.w	r6, #11
   17de8:	e7eb      	b.n	17dc2 <bt_gatt_subscribe+0xe2>
			return -EALREADY;
   17dea:	f06f 0677 	mvn.w	r6, #119	; 0x77
   17dee:	e7e8      	b.n	17dc2 <bt_gatt_subscribe+0xe2>
   17df0:	0003a016 	.word	0x0003a016
   17df4:	0003ae01 	.word	0x0003ae01
   17df8:	000381c3 	.word	0x000381c3
   17dfc:	0003afdd 	.word	0x0003afdd
   17e00:	0003b17d 	.word	0x0003b17d
   17e04:	0003b196 	.word	0x0003b196
   17e08:	0003b1a4 	.word	0x0003b1a4

00017e0c <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   17e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e10:	460c      	mov	r4, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp;
	bool has_subscription = false, found = false;

	__ASSERT(conn, "invalid parameters\n");
   17e12:	4607      	mov	r7, r0
   17e14:	b970      	cbnz	r0, 17e34 <bt_gatt_unsubscribe+0x28>
   17e16:	4940      	ldr	r1, [pc, #256]	; (17f18 <bt_gatt_unsubscribe+0x10c>)
   17e18:	f241 43f1 	movw	r3, #5361	; 0x14f1
   17e1c:	4a3f      	ldr	r2, [pc, #252]	; (17f1c <bt_gatt_unsubscribe+0x110>)
   17e1e:	4840      	ldr	r0, [pc, #256]	; (17f20 <bt_gatt_unsubscribe+0x114>)
   17e20:	f016 fd98 	bl	2e954 <assert_print>
   17e24:	483f      	ldr	r0, [pc, #252]	; (17f24 <bt_gatt_unsubscribe+0x118>)
   17e26:	f016 fd95 	bl	2e954 <assert_print>
   17e2a:	f241 41f1 	movw	r1, #5361	; 0x14f1
	__ASSERT(params, "invalid parameters\n");
   17e2e:	483b      	ldr	r0, [pc, #236]	; (17f1c <bt_gatt_unsubscribe+0x110>)
   17e30:	f016 fd89 	bl	2e946 <assert_post_action>
   17e34:	b961      	cbnz	r1, 17e50 <bt_gatt_unsubscribe+0x44>
   17e36:	493c      	ldr	r1, [pc, #240]	; (17f28 <bt_gatt_unsubscribe+0x11c>)
   17e38:	f241 43f2 	movw	r3, #5362	; 0x14f2
   17e3c:	4a37      	ldr	r2, [pc, #220]	; (17f1c <bt_gatt_unsubscribe+0x110>)
   17e3e:	4838      	ldr	r0, [pc, #224]	; (17f20 <bt_gatt_unsubscribe+0x114>)
   17e40:	f016 fd88 	bl	2e954 <assert_print>
   17e44:	4837      	ldr	r0, [pc, #220]	; (17f24 <bt_gatt_unsubscribe+0x118>)
   17e46:	f016 fd85 	bl	2e954 <assert_print>
   17e4a:	f241 41f2 	movw	r1, #5362	; 0x14f2
   17e4e:	e7ee      	b.n	17e2e <bt_gatt_unsubscribe+0x22>

	if (conn->state != BT_CONN_CONNECTED) {
   17e50:	7a83      	ldrb	r3, [r0, #10]
   17e52:	2b07      	cmp	r3, #7
   17e54:	d15a      	bne.n	17f0c <bt_gatt_unsubscribe+0x100>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   17e56:	f7fe fbb7 	bl	165c8 <gatt_sub_find>
	if (!sub) {
   17e5a:	4606      	mov	r6, r0
   17e5c:	2800      	cmp	r0, #0
   17e5e:	d058      	beq.n	17f12 <bt_gatt_unsubscribe+0x106>
	return list->head;
   17e60:	6885      	ldr	r5, [r0, #8]
		return -EINVAL;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17e62:	2d00      	cmp	r5, #0
   17e64:	d055      	beq.n	17f12 <bt_gatt_unsubscribe+0x106>
   17e66:	2300      	movs	r3, #0
   17e68:	4698      	mov	r8, r3
   17e6a:	3d18      	subs	r5, #24
		if (params == tmp) {
   17e6c:	42ac      	cmp	r4, r5
   17e6e:	d009      	beq.n	17e84 <bt_gatt_unsubscribe+0x78>
			found = true;
			continue;
		}

		/* Check if there still remains any other subscription */
		if (tmp->value_handle == params->value_handle) {
   17e70:	89a9      	ldrh	r1, [r5, #12]
   17e72:	89a2      	ldrh	r2, [r4, #12]
			has_subscription = true;
   17e74:	4291      	cmp	r1, r2
   17e76:	bf08      	it	eq
   17e78:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   17e7c:	69ad      	ldr	r5, [r5, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   17e7e:	b11d      	cbz	r5, 17e88 <bt_gatt_unsubscribe+0x7c>
   17e80:	3d18      	subs	r5, #24
   17e82:	e7f3      	b.n	17e6c <bt_gatt_unsubscribe+0x60>
			found = true;
   17e84:	2301      	movs	r3, #1
   17e86:	e7f9      	b.n	17e7c <bt_gatt_unsubscribe+0x70>
		}
	}

	if (!found) {
   17e88:	2b00      	cmp	r3, #0
   17e8a:	d042      	beq.n	17f12 <bt_gatt_unsubscribe+0x106>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17e8c:	f104 0014 	add.w	r0, r4, #20
   17e90:	f018 fe34 	bl	30afc <atomic_get>
		return -EINVAL;
	}

	/* Attempt to cancel if write is pending */
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   17e94:	0743      	lsls	r3, r0, #29
   17e96:	d503      	bpl.n	17ea0 <bt_gatt_unsubscribe+0x94>
		bt_gatt_cancel(conn, params);
   17e98:	4621      	mov	r1, r4
   17e9a:	4638      	mov	r0, r7
   17e9c:	f019 f8d4 	bl	31048 <bt_gatt_cancel>
	}

	if (!has_subscription) {
   17ea0:	f1b8 0f00 	cmp.w	r8, #0
   17ea4:	d018      	beq.n	17ed8 <bt_gatt_unsubscribe+0xcc>
	return list->head;
   17ea6:	68b3      	ldr	r3, [r6, #8]
		if (err) {
			return err;
		}
	}

	sys_slist_find_and_remove(&sub->list, &params->node);
   17ea8:	f104 0218 	add.w	r2, r4, #24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17eac:	b153      	cbz	r3, 17ec4 <bt_gatt_unsubscribe+0xb8>
   17eae:	429a      	cmp	r2, r3
   17eb0:	d122      	bne.n	17ef8 <bt_gatt_unsubscribe+0xec>
	return node->next;
   17eb2:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   17eb4:	b9d5      	cbnz	r5, 17eec <bt_gatt_unsubscribe+0xe0>
   17eb6:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   17eb8:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   17eba:	428a      	cmp	r2, r1
   17ebc:	d100      	bne.n	17ec0 <bt_gatt_unsubscribe+0xb4>
	list->tail = node;
   17ebe:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   17ec0:	2300      	movs	r3, #0
   17ec2:	61a3      	str	r3, [r4, #24]

	if (gatt_sub_is_empty(sub)) {
   17ec4:	68b3      	ldr	r3, [r6, #8]
   17ec6:	b913      	cbnz	r3, 17ece <bt_gatt_unsubscribe+0xc2>
		gatt_sub_free(sub);
   17ec8:	4630      	mov	r0, r6
   17eca:	f7fe fb95 	bl	165f8 <gatt_sub_free>
	}

	if (has_subscription) {
   17ece:	f1b8 0f00 	cmp.w	r8, #0
   17ed2:	d114      	bne.n	17efe <bt_gatt_unsubscribe+0xf2>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	return 0;
   17ed4:	2000      	movs	r0, #0
   17ed6:	e007      	b.n	17ee8 <bt_gatt_unsubscribe+0xdc>
		err = gatt_write_ccc(conn, params);
   17ed8:	4621      	mov	r1, r4
   17eda:	4638      	mov	r0, r7
		params->value = 0x0000;
   17edc:	f8a4 8010 	strh.w	r8, [r4, #16]
		err = gatt_write_ccc(conn, params);
   17ee0:	f7fe fca6 	bl	16830 <gatt_write_ccc>
		if (err) {
   17ee4:	2800      	cmp	r0, #0
   17ee6:	d0de      	beq.n	17ea6 <bt_gatt_unsubscribe+0x9a>
}
   17ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17eec:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   17eee:	68f3      	ldr	r3, [r6, #12]
   17ef0:	429a      	cmp	r2, r3
	list->tail = node;
   17ef2:	bf08      	it	eq
   17ef4:	60f5      	streq	r5, [r6, #12]
}
   17ef6:	e7e3      	b.n	17ec0 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   17ef8:	461d      	mov	r5, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17efa:	681b      	ldr	r3, [r3, #0]
   17efc:	e7d6      	b.n	17eac <bt_gatt_unsubscribe+0xa0>
		params->notify(conn, params, NULL, 0);
   17efe:	2300      	movs	r3, #0
   17f00:	4621      	mov	r1, r4
   17f02:	461a      	mov	r2, r3
   17f04:	4638      	mov	r0, r7
   17f06:	6825      	ldr	r5, [r4, #0]
   17f08:	47a8      	blx	r5
   17f0a:	e7e3      	b.n	17ed4 <bt_gatt_unsubscribe+0xc8>
		return -ENOTCONN;
   17f0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17f10:	e7ea      	b.n	17ee8 <bt_gatt_unsubscribe+0xdc>
		return -EINVAL;
   17f12:	f06f 0015 	mvn.w	r0, #21
   17f16:	e7e7      	b.n	17ee8 <bt_gatt_unsubscribe+0xdc>
   17f18:	0003a016 	.word	0x0003a016
   17f1c:	0003ae01 	.word	0x0003ae01
   17f20:	000381c3 	.word	0x000381c3
   17f24:	0003afdd 	.word	0x0003afdd
   17f28:	0003de74 	.word	0x0003de74

00017f2c <bt_gatt_mult_notification>:
{
   17f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f30:	b087      	sub	sp, #28
   17f32:	af00      	add	r7, sp, #0
   17f34:	460c      	mov	r4, r1
   17f36:	4692      	mov	sl, r2
   17f38:	6078      	str	r0, [r7, #4]
	sub = gatt_sub_find(conn);
   17f3a:	f7fe fb45 	bl	165c8 <gatt_sub_find>
	if (!sub) {
   17f3e:	4680      	mov	r8, r0
   17f40:	b330      	cbz	r0, 17f90 <bt_gatt_mult_notification+0x64>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   17f42:	4652      	mov	r2, sl
   17f44:	4621      	mov	r1, r4
   17f46:	f107 000c 	add.w	r0, r7, #12
   17f4a:	f019 f936 	bl	311ba <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   17f4e:	8a3b      	ldrh	r3, [r7, #16]
   17f50:	2b04      	cmp	r3, #4
   17f52:	d91d      	bls.n	17f90 <bt_gatt_mult_notification+0x64>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   17f54:	2104      	movs	r1, #4
   17f56:	f107 000c 	add.w	r0, r7, #12
   17f5a:	f000 fb6f 	bl	1863c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   17f5e:	8a3a      	ldrh	r2, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   17f60:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   17f64:	4605      	mov	r5, r0
		if (len > buf.len) {
   17f66:	454a      	cmp	r2, r9
		handle = sys_cpu_to_le16(nfy->handle);
   17f68:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   17f6c:	d214      	bcs.n	17f98 <bt_gatt_mult_notification+0x6c>
			LOG_ERR("Invalid data len %u > %u", len, length);
   17f6e:	466c      	mov	r4, sp
   17f70:	b088      	sub	sp, #32
   17f72:	466a      	mov	r2, sp
   17f74:	2304      	movs	r3, #4
   17f76:	491e      	ldr	r1, [pc, #120]	; (17ff0 <bt_gatt_mult_notification+0xc4>)
   17f78:	f8c2 a01c 	str.w	sl, [r2, #28]
   17f7c:	e9c2 1905 	strd	r1, r9, [r2, #20]
   17f80:	481c      	ldr	r0, [pc, #112]	; (17ff4 <bt_gatt_mult_notification+0xc8>)
   17f82:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17f86:	f842 3f10 	str.w	r3, [r2, #16]!
   17f8a:	f018 fed0 	bl	30d2e <z_log_msg_static_create.constprop.0>
   17f8e:	46a5      	mov	sp, r4
}
   17f90:	371c      	adds	r7, #28
   17f92:	46bd      	mov	sp, r7
   17f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   17f98:	f8d8 6008 	ldr.w	r6, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   17f9c:	b1fe      	cbz	r6, 17fde <bt_gatt_mult_notification+0xb2>
	return node->next;
   17f9e:	6834      	ldr	r4, [r6, #0]
   17fa0:	b104      	cbz	r4, 17fa4 <bt_gatt_mult_notification+0x78>
   17fa2:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   17fa4:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
   17fa8:	455a      	cmp	r2, fp
   17faa:	d115      	bne.n	17fd8 <bt_gatt_mult_notification+0xac>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   17fac:	3e18      	subs	r6, #24
   17fae:	e007      	b.n	17fc0 <bt_gatt_mult_notification+0x94>
   17fb0:	4626      	mov	r6, r4
   17fb2:	69a4      	ldr	r4, [r4, #24]
   17fb4:	89b2      	ldrh	r2, [r6, #12]
   17fb6:	b1c4      	cbz	r4, 17fea <bt_gatt_mult_notification+0xbe>
			if (handle != params->value_handle) {
   17fb8:	455a      	cmp	r2, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   17fba:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   17fbe:	d1f7      	bne.n	17fb0 <bt_gatt_mult_notification+0x84>
				if (params->notify(conn, params, nfy->value, len) ==
   17fc0:	464b      	mov	r3, r9
   17fc2:	4631      	mov	r1, r6
   17fc4:	6878      	ldr	r0, [r7, #4]
   17fc6:	f8d6 c000 	ldr.w	ip, [r6]
   17fca:	1d2a      	adds	r2, r5, #4
   17fcc:	47e0      	blx	ip
   17fce:	b918      	cbnz	r0, 17fd8 <bt_gatt_mult_notification+0xac>
					bt_gatt_unsubscribe(conn, params);
   17fd0:	4631      	mov	r1, r6
   17fd2:	6878      	ldr	r0, [r7, #4]
   17fd4:	f7ff ff1a 	bl	17e0c <bt_gatt_unsubscribe>
   17fd8:	4626      	mov	r6, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   17fda:	2c00      	cmp	r4, #0
   17fdc:	d1e9      	bne.n	17fb2 <bt_gatt_mult_notification+0x86>
		net_buf_simple_pull_mem(&buf, len);
   17fde:	4649      	mov	r1, r9
   17fe0:	f107 000c 	add.w	r0, r7, #12
   17fe4:	f000 fb2a 	bl	1863c <net_buf_simple_pull_mem>
   17fe8:	e7b1      	b.n	17f4e <bt_gatt_mult_notification+0x22>
			if (handle != params->value_handle) {
   17fea:	455a      	cmp	r2, fp
   17fec:	d0e8      	beq.n	17fc0 <bt_gatt_mult_notification+0x94>
   17fee:	e7f6      	b.n	17fde <bt_gatt_mult_notification+0xb2>
   17ff0:	0003b1b7 	.word	0x0003b1b7
   17ff4:	00036410 	.word	0x00036410

00017ff8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17ff8:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   17ffa:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   17ffc:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17ffe:	466b      	mov	r3, sp
   18000:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18004:	4a03      	ldr	r2, [pc, #12]	; (18014 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   18006:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1800a:	f018 ff8b 	bl	30f24 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1800e:	b003      	add	sp, #12
   18010:	f85d fb04 	ldr.w	pc, [sp], #4
   18014:	000171b5 	.word	0x000171b5

00018018 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1801a:	4605      	mov	r5, r0
   1801c:	460e      	mov	r6, r1
   1801e:	4617      	mov	r7, r2
	return list->head;
   18020:	4b06      	ldr	r3, [pc, #24]	; (1803c <bt_gatt_att_max_mtu_changed+0x24>)
   18022:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18024:	b14c      	cbz	r4, 1803a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18026:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1802a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1802c:	b11b      	cbz	r3, 18036 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1802e:	463a      	mov	r2, r7
   18030:	4631      	mov	r1, r6
   18032:	4628      	mov	r0, r5
   18034:	4798      	blx	r3
	return node->next;
   18036:	6864      	ldr	r4, [r4, #4]
   18038:	e7f4      	b.n	18024 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1803c:	2000fc6c 	.word	0x2000fc6c

00018040 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18044:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18046:	4603      	mov	r3, r0
   18048:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1804c:	2001      	movs	r0, #1
   1804e:	4a2d      	ldr	r2, [pc, #180]	; (18104 <bt_gatt_disconnected+0xc4>)
   18050:	f018 ff68 	bl	30f24 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   18054:	4620      	mov	r0, r4
   18056:	f7fe fab7 	bl	165c8 <gatt_sub_find>
	if (!sub) {
   1805a:	4606      	mov	r6, r0
   1805c:	b938      	cbnz	r0, 1806e <bt_gatt_disconnected+0x2e>
	cfg = find_cf_cfg(conn);
   1805e:	4620      	mov	r0, r4
   18060:	f7fe fa74 	bl	1654c <find_cf_cfg>
	if (!cfg) {
   18064:	4605      	mov	r5, r0
   18066:	2800      	cmp	r0, #0
   18068:	d139      	bne.n	180de <bt_gatt_disconnected+0x9e>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1806a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1806e:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   18070:	2d00      	cmp	r5, #0
   18072:	d0f4      	beq.n	1805e <bt_gatt_disconnected+0x1e>
	return node->next;
   18074:	f855 7918 	ldr.w	r7, [r5], #-24
   18078:	b107      	cbz	r7, 1807c <bt_gatt_disconnected+0x3c>
   1807a:	3f18      	subs	r7, #24
{
   1807c:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   18080:	f104 0990 	add.w	r9, r4, #144	; 0x90
			params->value = 0U;
   18084:	46c2      	mov	sl, r8
   18086:	e001      	b.n	1808c <bt_gatt_disconnected+0x4c>
{
   18088:	463d      	mov	r5, r7
   1808a:	461f      	mov	r7, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
   1808c:	f105 0b14 	add.w	fp, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18090:	f06f 0108 	mvn.w	r1, #8
   18094:	4658      	mov	r0, fp
   18096:	f018 fd3f 	bl	30b18 <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1809a:	4649      	mov	r1, r9
   1809c:	7a20      	ldrb	r0, [r4, #8]
   1809e:	f017 feac 	bl	2fdfa <bt_addr_le_is_bonded>
   180a2:	b970      	cbnz	r0, 180c2 <bt_gatt_disconnected+0x82>
			gatt_sub_remove(conn, sub, prev, params);
   180a4:	462b      	mov	r3, r5
   180a6:	4642      	mov	r2, r8
   180a8:	4631      	mov	r1, r6
   180aa:	4620      	mov	r0, r4
			params->value = 0U;
   180ac:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   180b0:	f018 fd90 	bl	30bd4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   180b4:	2f00      	cmp	r7, #0
   180b6:	d0d2      	beq.n	1805e <bt_gatt_disconnected+0x1e>
   180b8:	69bb      	ldr	r3, [r7, #24]
   180ba:	2b00      	cmp	r3, #0
   180bc:	d0e4      	beq.n	18088 <bt_gatt_disconnected+0x48>
   180be:	3b18      	subs	r3, #24
   180c0:	e7e2      	b.n	18088 <bt_gatt_disconnected+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   180c2:	4658      	mov	r0, fp
   180c4:	f018 fd1a 	bl	30afc <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   180c8:	07c3      	lsls	r3, r0, #31
   180ca:	d4eb      	bmi.n	180a4 <bt_gatt_disconnected+0x64>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   180cc:	7873      	ldrb	r3, [r6, #1]
   180ce:	b11b      	cbz	r3, 180d8 <bt_gatt_disconnected+0x98>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   180d0:	4649      	mov	r1, r9
   180d2:	1c70      	adds	r0, r6, #1
   180d4:	f018 fd77 	bl	30bc6 <bt_addr_le_copy>
			prev = &params->node;
   180d8:	f105 0818 	add.w	r8, r5, #24
   180dc:	e7ea      	b.n	180b4 <bt_gatt_disconnected+0x74>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   180de:	f104 0690 	add.w	r6, r4, #144	; 0x90
   180e2:	4631      	mov	r1, r6
   180e4:	7a20      	ldrb	r0, [r4, #8]
   180e6:	f017 fe88 	bl	2fdfa <bt_addr_le_is_bonded>
   180ea:	b920      	cbnz	r0, 180f6 <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
   180ec:	4628      	mov	r0, r5
}
   180ee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   180f2:	f7fe bb53 	b.w	1679c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   180f6:	4631      	mov	r1, r6
   180f8:	1c68      	adds	r0, r5, #1
}
   180fa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   180fe:	f018 bd62 	b.w	30bc6 <bt_addr_le_copy>
   18102:	bf00      	nop
   18104:	00016861 	.word	0x00016861

00018108 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18108:	b580      	push	{r7, lr}
   1810a:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1810c:	b088      	sub	sp, #32
   1810e:	466a      	mov	r2, sp
   18110:	4b07      	ldr	r3, [pc, #28]	; (18130 <bt_smp_accept.part.0+0x28>)
   18112:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18116:	2303      	movs	r3, #3
   18118:	f842 3f10 	str.w	r3, [r2, #16]!
   1811c:	2300      	movs	r3, #0
   1811e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18122:	4804      	ldr	r0, [pc, #16]	; (18134 <bt_smp_accept.part.0+0x2c>)
   18124:	f7f6 fb7a 	bl	e81c <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   18128:	f06f 000b 	mvn.w	r0, #11
   1812c:	46bd      	mov	sp, r7
   1812e:	bd80      	pop	{r7, pc}
   18130:	0003b1df 	.word	0x0003b1df
   18134:	00036448 	.word	0x00036448

00018138 <bt_smp_accept>:
		if (smp->chan.conn) {
   18138:	4b04      	ldr	r3, [pc, #16]	; (1814c <bt_smp_accept+0x14>)
   1813a:	681a      	ldr	r2, [r3, #0]
   1813c:	b10a      	cbz	r2, 18142 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1813e:	f7ff bfe3 	b.w	18108 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   18142:	4803      	ldr	r0, [pc, #12]	; (18150 <bt_smp_accept+0x18>)
   18144:	6058      	str	r0, [r3, #4]
}
   18146:	4610      	mov	r0, r2
		*chan = &smp->chan;
   18148:	600b      	str	r3, [r1, #0]
}
   1814a:	4770      	bx	lr
   1814c:	2000fc84 	.word	0x2000fc84
   18150:	00036ddc 	.word	0x00036ddc

00018154 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18154:	2234      	movs	r2, #52	; 0x34
   18156:	4b02      	ldr	r3, [pc, #8]	; (18160 <net_buf_pool_get+0xc>)
   18158:	fb02 3000 	mla	r0, r2, r0, r3
   1815c:	4770      	bx	lr
   1815e:	bf00      	nop
   18160:	2000d04c 	.word	0x2000d04c

00018164 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18164:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18166:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18168:	4b06      	ldr	r3, [pc, #24]	; (18184 <net_buf_id+0x20>)
   1816a:	fb01 3302 	mla	r3, r1, r2, r3
   1816e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18174:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18176:	331b      	adds	r3, #27
   18178:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1817c:	fbb0 f0f3 	udiv	r0, r0, r3
   18180:	4770      	bx	lr
   18182:	bf00      	nop
   18184:	2000d04c 	.word	0x2000d04c

00018188 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18188:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1818a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1818c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1818e:	4b09      	ldr	r3, [pc, #36]	; (181b4 <fixed_data_alloc+0x2c>)
   18190:	fb04 3302 	mla	r3, r4, r2, r3
   18194:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   18196:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18198:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1819a:	681a      	ldr	r2, [r3, #0]
   1819c:	4294      	cmp	r4, r2
   1819e:	bf94      	ite	ls
   181a0:	600c      	strls	r4, [r1, #0]
   181a2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   181a4:	e9d3 5400 	ldrd	r5, r4, [r3]
   181a8:	f7ff ffdc 	bl	18164 <net_buf_id>
}
   181ac:	fb05 4000 	mla	r0, r5, r0, r4
   181b0:	bd38      	pop	{r3, r4, r5, pc}
   181b2:	bf00      	nop
   181b4:	2000d04c 	.word	0x2000d04c

000181b8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   181b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181bc:	b085      	sub	sp, #20
   181be:	9103      	str	r1, [sp, #12]
   181c0:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   181c2:	4619      	mov	r1, r3
   181c4:	4610      	mov	r0, r2
{
   181c6:	4692      	mov	sl, r2
   181c8:	4699      	mov	r9, r3
   181ca:	4690      	mov	r8, r2
   181cc:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   181ce:	f01c fde4 	bl	34d9a <sys_clock_timeout_end_calc>
   181d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   181d6:	b945      	cbnz	r5, 181ea <net_buf_alloc_len+0x32>
   181d8:	4966      	ldr	r1, [pc, #408]	; (18374 <net_buf_alloc_len+0x1bc>)
   181da:	23f4      	movs	r3, #244	; 0xf4
   181dc:	4a66      	ldr	r2, [pc, #408]	; (18378 <net_buf_alloc_len+0x1c0>)
   181de:	4867      	ldr	r0, [pc, #412]	; (1837c <net_buf_alloc_len+0x1c4>)
   181e0:	f016 fbb8 	bl	2e954 <assert_print>
   181e4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   181e6:	4864      	ldr	r0, [pc, #400]	; (18378 <net_buf_alloc_len+0x1c0>)
   181e8:	e019      	b.n	1821e <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   181ea:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   181ee:	f04f 0320 	mov.w	r3, #32
   181f2:	f3ef 8b11 	mrs	fp, BASEPRI
   181f6:	f383 8812 	msr	BASEPRI_MAX, r3
   181fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181fe:	4630      	mov	r0, r6
   18200:	f010 faea 	bl	287d8 <z_spin_lock_valid>
   18204:	b968      	cbnz	r0, 18222 <net_buf_alloc_len+0x6a>
   18206:	2394      	movs	r3, #148	; 0x94
   18208:	4a5d      	ldr	r2, [pc, #372]	; (18380 <net_buf_alloc_len+0x1c8>)
   1820a:	495e      	ldr	r1, [pc, #376]	; (18384 <net_buf_alloc_len+0x1cc>)
   1820c:	485b      	ldr	r0, [pc, #364]	; (1837c <net_buf_alloc_len+0x1c4>)
   1820e:	f016 fba1 	bl	2e954 <assert_print>
   18212:	4631      	mov	r1, r6
   18214:	485c      	ldr	r0, [pc, #368]	; (18388 <net_buf_alloc_len+0x1d0>)
   18216:	f016 fb9d 	bl	2e954 <assert_print>
   1821a:	2194      	movs	r1, #148	; 0x94
   1821c:	4858      	ldr	r0, [pc, #352]	; (18380 <net_buf_alloc_len+0x1c8>)
   1821e:	f016 fb92 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   18222:	4630      	mov	r0, r6
   18224:	f010 faf4 	bl	28810 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   18228:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1822a:	2b00      	cmp	r3, #0
   1822c:	d070      	beq.n	18310 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1822e:	8c2a      	ldrh	r2, [r5, #32]
   18230:	429a      	cmp	r2, r3
   18232:	d94d      	bls.n	182d0 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   18234:	2200      	movs	r2, #0
   18236:	2300      	movs	r3, #0
   18238:	4628      	mov	r0, r5
   1823a:	f010 fd1b 	bl	28c74 <z_impl_k_queue_get>
			if (buf) {
   1823e:	4604      	mov	r4, r0
   18240:	2800      	cmp	r0, #0
   18242:	d045      	beq.n	182d0 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18244:	4630      	mov	r0, r6
   18246:	f010 fad5 	bl	287f4 <z_spin_unlock_valid>
   1824a:	b958      	cbnz	r0, 18264 <net_buf_alloc_len+0xac>
   1824c:	23c2      	movs	r3, #194	; 0xc2
   1824e:	4a4c      	ldr	r2, [pc, #304]	; (18380 <net_buf_alloc_len+0x1c8>)
   18250:	494e      	ldr	r1, [pc, #312]	; (1838c <net_buf_alloc_len+0x1d4>)
   18252:	484a      	ldr	r0, [pc, #296]	; (1837c <net_buf_alloc_len+0x1c4>)
   18254:	f016 fb7e 	bl	2e954 <assert_print>
   18258:	4631      	mov	r1, r6
   1825a:	484d      	ldr	r0, [pc, #308]	; (18390 <net_buf_alloc_len+0x1d8>)
   1825c:	f016 fb7a 	bl	2e954 <assert_print>
   18260:	21c2      	movs	r1, #194	; 0xc2
   18262:	e7db      	b.n	1821c <net_buf_alloc_len+0x64>
	__asm__ volatile(
   18264:	f38b 8811 	msr	BASEPRI, fp
   18268:	f3bf 8f6f 	isb	sy
	if (size) {
   1826c:	9d03      	ldr	r5, [sp, #12]
   1826e:	2d00      	cmp	r5, #0
   18270:	d074      	beq.n	1835c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18272:	ea59 030a 	orrs.w	r3, r9, sl
   18276:	d012      	beq.n	1829e <net_buf_alloc_len+0xe6>
   18278:	f1b9 3fff 	cmp.w	r9, #4294967295
   1827c:	bf08      	it	eq
   1827e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   18282:	d00c      	beq.n	1829e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   18284:	f012 ff84 	bl	2b190 <sys_clock_tick_get>
   18288:	9b01      	ldr	r3, [sp, #4]
   1828a:	ebb3 0800 	subs.w	r8, r3, r0
   1828e:	9b02      	ldr	r3, [sp, #8]
   18290:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   18294:	2f00      	cmp	r7, #0
   18296:	bfbc      	itt	lt
   18298:	f04f 0800 	movlt.w	r8, #0
   1829c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1829e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   182a2:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   182a4:	4e3b      	ldr	r6, [pc, #236]	; (18394 <net_buf_alloc_len+0x1dc>)
   182a6:	4642      	mov	r2, r8
   182a8:	fb09 6303 	mla	r3, r9, r3, r6
   182ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   182ae:	4620      	mov	r0, r4
   182b0:	681b      	ldr	r3, [r3, #0]
   182b2:	a903      	add	r1, sp, #12
   182b4:	f8d3 a000 	ldr.w	sl, [r3]
   182b8:	463b      	mov	r3, r7
   182ba:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   182bc:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   182be:	2800      	cmp	r0, #0
   182c0:	d13c      	bne.n	1833c <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   182c2:	7aa0      	ldrb	r0, [r4, #10]
   182c4:	4621      	mov	r1, r4
   182c6:	fb00 6009 	mla	r0, r0, r9, r6
   182ca:	f01c fca4 	bl	34c16 <k_queue_prepend>
}
   182ce:	e030      	b.n	18332 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   182d0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   182d2:	4630      	mov	r0, r6
   182d4:	1e63      	subs	r3, r4, #1
   182d6:	846b      	strh	r3, [r5, #34]	; 0x22
   182d8:	f010 fa8c 	bl	287f4 <z_spin_unlock_valid>
   182dc:	2800      	cmp	r0, #0
   182de:	d0b5      	beq.n	1824c <net_buf_alloc_len+0x94>
   182e0:	f38b 8811 	msr	BASEPRI, fp
   182e4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   182e8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   182ec:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   182ee:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   182f0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   182f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   182f4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   182f8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   182fc:	4b25      	ldr	r3, [pc, #148]	; (18394 <net_buf_alloc_len+0x1dc>)
   182fe:	4a26      	ldr	r2, [pc, #152]	; (18398 <net_buf_alloc_len+0x1e0>)
   18300:	1aeb      	subs	r3, r5, r3
   18302:	109b      	asrs	r3, r3, #2
   18304:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   18306:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   18308:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1830c:	72e3      	strb	r3, [r4, #11]
		goto success;
   1830e:	e7ad      	b.n	1826c <net_buf_alloc_len+0xb4>
   18310:	4630      	mov	r0, r6
   18312:	f010 fa6f 	bl	287f4 <z_spin_unlock_valid>
   18316:	2800      	cmp	r0, #0
   18318:	d098      	beq.n	1824c <net_buf_alloc_len+0x94>
   1831a:	f38b 8811 	msr	BASEPRI, fp
   1831e:	f3bf 8f6f 	isb	sy
   18322:	4652      	mov	r2, sl
   18324:	464b      	mov	r3, r9
   18326:	4628      	mov	r0, r5
   18328:	f010 fca4 	bl	28c74 <z_impl_k_queue_get>
	if (!buf) {
   1832c:	4604      	mov	r4, r0
   1832e:	2800      	cmp	r0, #0
   18330:	d19c      	bne.n	1826c <net_buf_alloc_len+0xb4>
		return NULL;
   18332:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   18334:	4620      	mov	r0, r4
   18336:	b005      	add	sp, #20
   18338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1833c:	9b03      	ldr	r3, [sp, #12]
   1833e:	429d      	cmp	r5, r3
   18340:	d90d      	bls.n	1835e <net_buf_alloc_len+0x1a6>
   18342:	4916      	ldr	r1, [pc, #88]	; (1839c <net_buf_alloc_len+0x1e4>)
   18344:	f240 1355 	movw	r3, #341	; 0x155
   18348:	4a0b      	ldr	r2, [pc, #44]	; (18378 <net_buf_alloc_len+0x1c0>)
   1834a:	480c      	ldr	r0, [pc, #48]	; (1837c <net_buf_alloc_len+0x1c4>)
   1834c:	f016 fb02 	bl	2e954 <assert_print>
   18350:	4813      	ldr	r0, [pc, #76]	; (183a0 <net_buf_alloc_len+0x1e8>)
   18352:	f016 faff 	bl	2e954 <assert_print>
   18356:	f240 1155 	movw	r1, #341	; 0x155
   1835a:	e744      	b.n	181e6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1835c:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1835e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18360:	2201      	movs	r2, #1
	buf->frags = NULL;
   18362:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   18364:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   18366:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   18368:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1836a:	6963      	ldr	r3, [r4, #20]
   1836c:	8262      	strh	r2, [r4, #18]
   1836e:	60e3      	str	r3, [r4, #12]
}
   18370:	e7e0      	b.n	18334 <net_buf_alloc_len+0x17c>
   18372:	bf00      	nop
   18374:	0003b25a 	.word	0x0003b25a
   18378:	0003b20b 	.word	0x0003b20b
   1837c:	000381c3 	.word	0x000381c3
   18380:	000385b7 	.word	0x000385b7
   18384:	00038610 	.word	0x00038610
   18388:	00038625 	.word	0x00038625
   1838c:	000385e4 	.word	0x000385e4
   18390:	000385fb 	.word	0x000385fb
   18394:	2000d04c 	.word	0x2000d04c
   18398:	c4ec4ec5 	.word	0xc4ec4ec5
   1839c:	0003b25f 	.word	0x0003b25f
   183a0:	00038b19 	.word	0x00038b19

000183a4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   183a4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   183a6:	b958      	cbnz	r0, 183c0 <net_buf_put+0x1c>
   183a8:	490d      	ldr	r1, [pc, #52]	; (183e0 <net_buf_put+0x3c>)
   183aa:	f240 13cd 	movw	r3, #461	; 0x1cd
   183ae:	4a0d      	ldr	r2, [pc, #52]	; (183e4 <net_buf_put+0x40>)
   183b0:	480d      	ldr	r0, [pc, #52]	; (183e8 <net_buf_put+0x44>)
   183b2:	f016 facf 	bl	2e954 <assert_print>
   183b6:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   183ba:	480a      	ldr	r0, [pc, #40]	; (183e4 <net_buf_put+0x40>)
   183bc:	f016 fac3 	bl	2e946 <assert_post_action>
   183c0:	b949      	cbnz	r1, 183d6 <net_buf_put+0x32>
   183c2:	490a      	ldr	r1, [pc, #40]	; (183ec <net_buf_put+0x48>)
   183c4:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   183c8:	4a06      	ldr	r2, [pc, #24]	; (183e4 <net_buf_put+0x40>)
   183ca:	4807      	ldr	r0, [pc, #28]	; (183e8 <net_buf_put+0x44>)
   183cc:	f016 fac2 	bl	2e954 <assert_print>
   183d0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   183d4:	e7f1      	b.n	183ba <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   183d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   183da:	f01c bc11 	b.w	34c00 <k_queue_append>
   183de:	bf00      	nop
   183e0:	0003b275 	.word	0x0003b275
   183e4:	0003b20b 	.word	0x0003b20b
   183e8:	000381c3 	.word	0x000381c3
   183ec:	0003b28a 	.word	0x0003b28a

000183f0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   183f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   183f4:	4605      	mov	r5, r0
   183f6:	b328      	cbz	r0, 18444 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   183f8:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   183fa:	f04f 0834 	mov.w	r8, #52	; 0x34
   183fe:	4e1a      	ldr	r6, [pc, #104]	; (18468 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   18400:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   18402:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   18404:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   18406:	3b01      	subs	r3, #1
   18408:	b2db      	uxtb	r3, r3
   1840a:	7223      	strb	r3, [r4, #8]
   1840c:	b9c3      	cbnz	r3, 18440 <net_buf_unref+0x50>
		if (buf->__buf) {
   1840e:	6961      	ldr	r1, [r4, #20]
   18410:	b159      	cbz	r1, 1842a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   18412:	7a63      	ldrb	r3, [r4, #9]
   18414:	07db      	lsls	r3, r3, #31
   18416:	d407      	bmi.n	18428 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18418:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1841a:	4620      	mov	r0, r4
   1841c:	fb08 6303 	mla	r3, r8, r3, r6
   18420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18422:	681b      	ldr	r3, [r3, #0]
   18424:	689b      	ldr	r3, [r3, #8]
   18426:	4798      	blx	r3
			buf->__buf = NULL;
   18428:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1842a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1842c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1842e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   18432:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   18434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18436:	b18b      	cbz	r3, 1845c <net_buf_unref+0x6c>
			pool->destroy(buf);
   18438:	4620      	mov	r0, r4
   1843a:	4798      	blx	r3
	while (buf) {
   1843c:	2d00      	cmp	r5, #0
   1843e:	d1df      	bne.n	18400 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   18444:	4909      	ldr	r1, [pc, #36]	; (1846c <net_buf_unref+0x7c>)
   18446:	480a      	ldr	r0, [pc, #40]	; (18470 <net_buf_unref+0x80>)
   18448:	f240 13d9 	movw	r3, #473	; 0x1d9
   1844c:	4a09      	ldr	r2, [pc, #36]	; (18474 <net_buf_unref+0x84>)
   1844e:	f016 fa81 	bl	2e954 <assert_print>
   18452:	f240 11d9 	movw	r1, #473	; 0x1d9
   18456:	4807      	ldr	r0, [pc, #28]	; (18474 <net_buf_unref+0x84>)
   18458:	f016 fa75 	bl	2e946 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1845c:	4621      	mov	r1, r4
   1845e:	fb00 6008 	mla	r0, r0, r8, r6
   18462:	f01c fbd8 	bl	34c16 <k_queue_prepend>
}
   18466:	e7e9      	b.n	1843c <net_buf_unref+0x4c>
   18468:	2000d04c 	.word	0x2000d04c
   1846c:	0003b28a 	.word	0x0003b28a
   18470:	000381c3 	.word	0x000381c3
   18474:	0003b20b 	.word	0x0003b20b

00018478 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   18478:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1847a:	b958      	cbnz	r0, 18494 <net_buf_ref+0x1c>
   1847c:	4907      	ldr	r1, [pc, #28]	; (1849c <net_buf_ref+0x24>)
   1847e:	4808      	ldr	r0, [pc, #32]	; (184a0 <net_buf_ref+0x28>)
   18480:	f44f 7302 	mov.w	r3, #520	; 0x208
   18484:	4a07      	ldr	r2, [pc, #28]	; (184a4 <net_buf_ref+0x2c>)
   18486:	f016 fa65 	bl	2e954 <assert_print>
   1848a:	f44f 7102 	mov.w	r1, #520	; 0x208
   1848e:	4805      	ldr	r0, [pc, #20]	; (184a4 <net_buf_ref+0x2c>)
   18490:	f016 fa59 	bl	2e946 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   18494:	7a02      	ldrb	r2, [r0, #8]
   18496:	3201      	adds	r2, #1
   18498:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1849a:	bd08      	pop	{r3, pc}
   1849c:	0003b28a 	.word	0x0003b28a
   184a0:	000381c3 	.word	0x000381c3
   184a4:	0003b20b 	.word	0x0003b20b

000184a8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   184a8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   184aa:	4603      	mov	r3, r0
   184ac:	b958      	cbnz	r0, 184c6 <net_buf_frag_last+0x1e>
   184ae:	4908      	ldr	r1, [pc, #32]	; (184d0 <net_buf_frag_last+0x28>)
   184b0:	4808      	ldr	r0, [pc, #32]	; (184d4 <net_buf_frag_last+0x2c>)
   184b2:	f240 2345 	movw	r3, #581	; 0x245
   184b6:	4a08      	ldr	r2, [pc, #32]	; (184d8 <net_buf_frag_last+0x30>)
   184b8:	f016 fa4c 	bl	2e954 <assert_print>
   184bc:	f240 2145 	movw	r1, #581	; 0x245
   184c0:	4805      	ldr	r0, [pc, #20]	; (184d8 <net_buf_frag_last+0x30>)
   184c2:	f016 fa40 	bl	2e946 <assert_post_action>

	while (buf->frags) {
   184c6:	4618      	mov	r0, r3
   184c8:	685b      	ldr	r3, [r3, #4]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d1fb      	bne.n	184c6 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   184ce:	bd08      	pop	{r3, pc}
   184d0:	0003b28a 	.word	0x0003b28a
   184d4:	000381c3 	.word	0x000381c3
   184d8:	0003b20b 	.word	0x0003b20b

000184dc <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   184dc:	b570      	push	{r4, r5, r6, lr}
   184de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   184e0:	4604      	mov	r4, r0
   184e2:	b958      	cbnz	r0, 184fc <net_buf_frag_insert+0x20>
   184e4:	490f      	ldr	r1, [pc, #60]	; (18524 <net_buf_frag_insert+0x48>)
   184e6:	f44f 7314 	mov.w	r3, #592	; 0x250
   184ea:	4a0f      	ldr	r2, [pc, #60]	; (18528 <net_buf_frag_insert+0x4c>)
   184ec:	480f      	ldr	r0, [pc, #60]	; (1852c <net_buf_frag_insert+0x50>)
   184ee:	f016 fa31 	bl	2e954 <assert_print>
   184f2:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   184f6:	480c      	ldr	r0, [pc, #48]	; (18528 <net_buf_frag_insert+0x4c>)
   184f8:	f016 fa25 	bl	2e946 <assert_post_action>
   184fc:	b949      	cbnz	r1, 18512 <net_buf_frag_insert+0x36>
   184fe:	490c      	ldr	r1, [pc, #48]	; (18530 <net_buf_frag_insert+0x54>)
   18500:	f240 2351 	movw	r3, #593	; 0x251
   18504:	4a08      	ldr	r2, [pc, #32]	; (18528 <net_buf_frag_insert+0x4c>)
   18506:	4809      	ldr	r0, [pc, #36]	; (1852c <net_buf_frag_insert+0x50>)
   18508:	f016 fa24 	bl	2e954 <assert_print>
   1850c:	f240 2151 	movw	r1, #593	; 0x251
   18510:	e7f1      	b.n	184f6 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   18512:	6846      	ldr	r6, [r0, #4]
   18514:	b11e      	cbz	r6, 1851e <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   18516:	4608      	mov	r0, r1
   18518:	f7ff ffc6 	bl	184a8 <net_buf_frag_last>
   1851c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1851e:	6065      	str	r5, [r4, #4]
}
   18520:	bd70      	pop	{r4, r5, r6, pc}
   18522:	bf00      	nop
   18524:	0003b27a 	.word	0x0003b27a
   18528:	0003b20b 	.word	0x0003b20b
   1852c:	000381c3 	.word	0x000381c3
   18530:	0003b281 	.word	0x0003b281

00018534 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   18534:	b538      	push	{r3, r4, r5, lr}
   18536:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   18538:	460c      	mov	r4, r1
   1853a:	b959      	cbnz	r1, 18554 <net_buf_frag_add+0x20>
   1853c:	490c      	ldr	r1, [pc, #48]	; (18570 <net_buf_frag_add+0x3c>)
   1853e:	480d      	ldr	r0, [pc, #52]	; (18574 <net_buf_frag_add+0x40>)
   18540:	f44f 7317 	mov.w	r3, #604	; 0x25c
   18544:	4a0c      	ldr	r2, [pc, #48]	; (18578 <net_buf_frag_add+0x44>)
   18546:	f016 fa05 	bl	2e954 <assert_print>
   1854a:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1854e:	480a      	ldr	r0, [pc, #40]	; (18578 <net_buf_frag_add+0x44>)
   18550:	f016 f9f9 	bl	2e946 <assert_post_action>

	if (!head) {
   18554:	b920      	cbnz	r0, 18560 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   18556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1855a:	4608      	mov	r0, r1
   1855c:	f7ff bf8c 	b.w	18478 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   18560:	f7ff ffa2 	bl	184a8 <net_buf_frag_last>
   18564:	4621      	mov	r1, r4
   18566:	f7ff ffb9 	bl	184dc <net_buf_frag_insert>
}
   1856a:	4628      	mov	r0, r5
   1856c:	bd38      	pop	{r3, r4, r5, pc}
   1856e:	bf00      	nop
   18570:	0003b281 	.word	0x0003b281
   18574:	000381c3 	.word	0x000381c3
   18578:	0003b20b 	.word	0x0003b20b

0001857c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1857c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1857e:	b948      	cbnz	r0, 18594 <net_buf_simple_reserve+0x18>
   18580:	490b      	ldr	r1, [pc, #44]	; (185b0 <net_buf_simple_reserve+0x34>)
   18582:	232b      	movs	r3, #43	; 0x2b
   18584:	4a0b      	ldr	r2, [pc, #44]	; (185b4 <net_buf_simple_reserve+0x38>)
   18586:	480c      	ldr	r0, [pc, #48]	; (185b8 <net_buf_simple_reserve+0x3c>)
   18588:	f016 f9e4 	bl	2e954 <assert_print>
   1858c:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1858e:	4809      	ldr	r0, [pc, #36]	; (185b4 <net_buf_simple_reserve+0x38>)
   18590:	f016 f9d9 	bl	2e946 <assert_post_action>
   18594:	8883      	ldrh	r3, [r0, #4]
   18596:	b13b      	cbz	r3, 185a8 <net_buf_simple_reserve+0x2c>
   18598:	4908      	ldr	r1, [pc, #32]	; (185bc <net_buf_simple_reserve+0x40>)
   1859a:	232c      	movs	r3, #44	; 0x2c
   1859c:	4a05      	ldr	r2, [pc, #20]	; (185b4 <net_buf_simple_reserve+0x38>)
   1859e:	4806      	ldr	r0, [pc, #24]	; (185b8 <net_buf_simple_reserve+0x3c>)
   185a0:	f016 f9d8 	bl	2e954 <assert_print>
   185a4:	212c      	movs	r1, #44	; 0x2c
   185a6:	e7f2      	b.n	1858e <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   185a8:	6883      	ldr	r3, [r0, #8]
   185aa:	440b      	add	r3, r1
   185ac:	6003      	str	r3, [r0, #0]
}
   185ae:	bd08      	pop	{r3, pc}
   185b0:	0003b28a 	.word	0x0003b28a
   185b4:	0003b28e 	.word	0x0003b28e
   185b8:	000381c3 	.word	0x000381c3
   185bc:	0003b2b9 	.word	0x0003b2b9

000185c0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   185c0:	b508      	push	{r3, lr}
   185c2:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   185c4:	6800      	ldr	r0, [r0, #0]
   185c6:	689a      	ldr	r2, [r3, #8]
   185c8:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   185ca:	4291      	cmp	r1, r2
   185cc:	d90b      	bls.n	185e6 <net_buf_simple_push+0x26>
   185ce:	4909      	ldr	r1, [pc, #36]	; (185f4 <net_buf_simple_push+0x34>)
   185d0:	4809      	ldr	r0, [pc, #36]	; (185f8 <net_buf_simple_push+0x38>)
   185d2:	f240 132d 	movw	r3, #301	; 0x12d
   185d6:	4a09      	ldr	r2, [pc, #36]	; (185fc <net_buf_simple_push+0x3c>)
   185d8:	f016 f9bc 	bl	2e954 <assert_print>
   185dc:	f240 112d 	movw	r1, #301	; 0x12d
   185e0:	4806      	ldr	r0, [pc, #24]	; (185fc <net_buf_simple_push+0x3c>)
   185e2:	f016 f9b0 	bl	2e946 <assert_post_action>
	buf->len += len;
   185e6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   185e8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   185ea:	4411      	add	r1, r2
	buf->data -= len;
   185ec:	6018      	str	r0, [r3, #0]
	buf->len += len;
   185ee:	8099      	strh	r1, [r3, #4]
}
   185f0:	bd08      	pop	{r3, pc}
   185f2:	bf00      	nop
   185f4:	0003b2d8 	.word	0x0003b2d8
   185f8:	000381c3 	.word	0x000381c3
   185fc:	0003b28e 	.word	0x0003b28e

00018600 <net_buf_simple_pull>:
{
   18600:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   18602:	8882      	ldrh	r2, [r0, #4]
{
   18604:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   18606:	428a      	cmp	r2, r1
   18608:	d20b      	bcs.n	18622 <net_buf_simple_pull+0x22>
   1860a:	4909      	ldr	r1, [pc, #36]	; (18630 <net_buf_simple_pull+0x30>)
   1860c:	4809      	ldr	r0, [pc, #36]	; (18634 <net_buf_simple_pull+0x34>)
   1860e:	f240 138d 	movw	r3, #397	; 0x18d
   18612:	4a09      	ldr	r2, [pc, #36]	; (18638 <net_buf_simple_pull+0x38>)
   18614:	f016 f99e 	bl	2e954 <assert_print>
   18618:	f240 118d 	movw	r1, #397	; 0x18d
   1861c:	4806      	ldr	r0, [pc, #24]	; (18638 <net_buf_simple_pull+0x38>)
   1861e:	f016 f992 	bl	2e946 <assert_post_action>
	buf->len -= len;
   18622:	1a52      	subs	r2, r2, r1
   18624:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   18626:	6800      	ldr	r0, [r0, #0]
   18628:	4408      	add	r0, r1
   1862a:	6018      	str	r0, [r3, #0]
}
   1862c:	bd08      	pop	{r3, pc}
   1862e:	bf00      	nop
   18630:	0003b2c8 	.word	0x0003b2c8
   18634:	000381c3 	.word	0x000381c3
   18638:	0003b28e 	.word	0x0003b28e

0001863c <net_buf_simple_pull_mem>:
{
   1863c:	b508      	push	{r3, lr}
   1863e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   18640:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   18642:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   18644:	428a      	cmp	r2, r1
   18646:	d20b      	bcs.n	18660 <net_buf_simple_pull_mem+0x24>
   18648:	4908      	ldr	r1, [pc, #32]	; (1866c <net_buf_simple_pull_mem+0x30>)
   1864a:	4809      	ldr	r0, [pc, #36]	; (18670 <net_buf_simple_pull_mem+0x34>)
   1864c:	f240 1399 	movw	r3, #409	; 0x199
   18650:	4a08      	ldr	r2, [pc, #32]	; (18674 <net_buf_simple_pull_mem+0x38>)
   18652:	f016 f97f 	bl	2e954 <assert_print>
   18656:	f240 1199 	movw	r1, #409	; 0x199
   1865a:	4806      	ldr	r0, [pc, #24]	; (18674 <net_buf_simple_pull_mem+0x38>)
   1865c:	f016 f973 	bl	2e946 <assert_post_action>
	buf->len -= len;
   18660:	1a52      	subs	r2, r2, r1
	buf->data += len;
   18662:	4401      	add	r1, r0
	buf->len -= len;
   18664:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   18666:	6019      	str	r1, [r3, #0]
}
   18668:	bd08      	pop	{r3, pc}
   1866a:	bf00      	nop
   1866c:	0003b2c8 	.word	0x0003b2c8
   18670:	000381c3 	.word	0x000381c3
   18674:	0003b28e 	.word	0x0003b28e

00018678 <net_buf_simple_add>:
{
   18678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1867a:	8885      	ldrh	r5, [r0, #4]
   1867c:	6803      	ldr	r3, [r0, #0]
   1867e:	460e      	mov	r6, r1
   18680:	4604      	mov	r4, r0
   18682:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   18684:	f018 fdb3 	bl	311ee <net_buf_simple_tailroom>
   18688:	42b0      	cmp	r0, r6
   1868a:	d209      	bcs.n	186a0 <net_buf_simple_add+0x28>
   1868c:	4906      	ldr	r1, [pc, #24]	; (186a8 <net_buf_simple_add+0x30>)
   1868e:	4807      	ldr	r0, [pc, #28]	; (186ac <net_buf_simple_add+0x34>)
   18690:	233e      	movs	r3, #62	; 0x3e
   18692:	4a07      	ldr	r2, [pc, #28]	; (186b0 <net_buf_simple_add+0x38>)
   18694:	f016 f95e 	bl	2e954 <assert_print>
   18698:	213e      	movs	r1, #62	; 0x3e
   1869a:	4805      	ldr	r0, [pc, #20]	; (186b0 <net_buf_simple_add+0x38>)
   1869c:	f016 f953 	bl	2e946 <assert_post_action>
	buf->len += len;
   186a0:	4435      	add	r5, r6
   186a2:	80a5      	strh	r5, [r4, #4]
}
   186a4:	4638      	mov	r0, r7
   186a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186a8:	0003b2fc 	.word	0x0003b2fc
   186ac:	000381c3 	.word	0x000381c3
   186b0:	0003b28e 	.word	0x0003b28e

000186b4 <net_if_flag_set>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
				   enum net_if_flag value)
{
   186b4:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   186b6:	b970      	cbnz	r0, 186d6 <net_if_flag_set+0x22>
   186b8:	490d      	ldr	r1, [pc, #52]	; (186f0 <net_if_flag_set+0x3c>)
   186ba:	f44f 7307 	mov.w	r3, #540	; 0x21c
   186be:	4a0d      	ldr	r2, [pc, #52]	; (186f4 <net_if_flag_set+0x40>)
   186c0:	480d      	ldr	r0, [pc, #52]	; (186f8 <net_if_flag_set+0x44>)
   186c2:	f016 f947 	bl	2e954 <assert_print>
   186c6:	480d      	ldr	r0, [pc, #52]	; (186fc <net_if_flag_set+0x48>)
   186c8:	f016 f944 	bl	2e954 <assert_print>
   186cc:	f44f 7107 	mov.w	r1, #540	; 0x21c
   186d0:	4808      	ldr	r0, [pc, #32]	; (186f4 <net_if_flag_set+0x40>)
   186d2:	f016 f938 	bl	2e946 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   186d6:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   186d8:	6803      	ldr	r3, [r0, #0]
   186da:	fa02 f101 	lsl.w	r1, r2, r1
   186de:	330c      	adds	r3, #12
   186e0:	e8d3 0fef 	ldaex	r0, [r3]
   186e4:	4308      	orrs	r0, r1
   186e6:	e8c3 0fe2 	stlex	r2, r0, [r3]
   186ea:	2a00      	cmp	r2, #0
   186ec:	d1f8      	bne.n	186e0 <net_if_flag_set+0x2c>

	atomic_set_bit(iface->if_dev->flags, value);
}
   186ee:	bd08      	pop	{r3, pc}
   186f0:	0003b362 	.word	0x0003b362
   186f4:	0003b368 	.word	0x0003b368
   186f8:	000381c3 	.word	0x000381c3
   186fc:	00038b19 	.word	0x00038b19

00018700 <net_if_flag_clear>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_clear(struct net_if *iface,
				     enum net_if_flag value)
{
   18700:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   18702:	b970      	cbnz	r0, 18722 <net_if_flag_clear+0x22>
   18704:	490e      	ldr	r1, [pc, #56]	; (18740 <net_if_flag_clear+0x40>)
   18706:	f240 233a 	movw	r3, #570	; 0x23a
   1870a:	4a0e      	ldr	r2, [pc, #56]	; (18744 <net_if_flag_clear+0x44>)
   1870c:	480e      	ldr	r0, [pc, #56]	; (18748 <net_if_flag_clear+0x48>)
   1870e:	f016 f921 	bl	2e954 <assert_print>
   18712:	480e      	ldr	r0, [pc, #56]	; (1874c <net_if_flag_clear+0x4c>)
   18714:	f016 f91e 	bl	2e954 <assert_print>
   18718:	f240 213a 	movw	r1, #570	; 0x23a
   1871c:	4809      	ldr	r0, [pc, #36]	; (18744 <net_if_flag_clear+0x44>)
   1871e:	f016 f912 	bl	2e946 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   18722:	2301      	movs	r3, #1
   18724:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18728:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1872a:	6802      	ldr	r2, [r0, #0]
   1872c:	f102 030c 	add.w	r3, r2, #12
   18730:	e8d3 0fef 	ldaex	r0, [r3]
   18734:	4008      	ands	r0, r1
   18736:	e8c3 0fe2 	stlex	r2, r0, [r3]
   1873a:	2a00      	cmp	r2, #0
   1873c:	d1f8      	bne.n	18730 <net_if_flag_clear+0x30>

	atomic_clear_bit(iface->if_dev->flags, value);
}
   1873e:	bd08      	pop	{r3, pc}
   18740:	0003b362 	.word	0x0003b362
   18744:	0003b368 	.word	0x0003b368
   18748:	000381c3 	.word	0x000381c3
   1874c:	00038b19 	.word	0x00038b19

00018750 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   18750:	4602      	mov	r2, r0
   18752:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   18754:	4801      	ldr	r0, [pc, #4]	; (1875c <k_mutex_lock.constprop.0.isra.0+0xc>)
   18756:	f010 b895 	b.w	28884 <z_impl_k_mutex_lock>
   1875a:	bf00      	nop
   1875c:	2000cef4 	.word	0x2000cef4

00018760 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   18760:	4801      	ldr	r0, [pc, #4]	; (18768 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   18762:	f010 b95f 	b.w	28a24 <z_impl_k_mutex_unlock>
   18766:	bf00      	nop
   18768:	2000cef4 	.word	0x2000cef4

0001876c <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
   1876c:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1876e:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   18770:	2100      	movs	r1, #0
{
   18772:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   18774:	f893 2020 	ldrb.w	r2, [r3, #32]
   18778:	f018 fd72 	bl	31260 <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
   1877c:	b978      	cbnz	r0, 1879e <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   1877e:	2102      	movs	r1, #2
   18780:	6823      	ldr	r3, [r4, #0]
   18782:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   18786:	6823      	ldr	r3, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   18788:	f893 3020 	ldrb.w	r3, [r3, #32]
   1878c:	428b      	cmp	r3, r1
   1878e:	d13e      	bne.n	1880e <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
		if (prev_state != NET_IF_OPER_UP) {
			notify_iface_up(iface);
		}
	} else {
		if (prev_state == NET_IF_OPER_UP) {
   18790:	2a06      	cmp	r2, #6
   18792:	d13c      	bne.n	1880e <update_operational_state+0xa2>
	net_if_flag_clear(iface, NET_IF_RUNNING);
   18794:	2108      	movs	r1, #8
   18796:	4620      	mov	r0, r4
   18798:	f7ff ffb2 	bl	18700 <net_if_flag_clear>
	return (iface->if_dev->socket_offload != NULL);
   1879c:	e02f      	b.n	187fe <update_operational_state+0x92>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   1879e:	2109      	movs	r1, #9
   187a0:	4620      	mov	r0, r4
   187a2:	f018 fd5d 	bl	31260 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   187a6:	2800      	cmp	r0, #0
   187a8:	d0e9      	beq.n	1877e <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   187aa:	210a      	movs	r1, #10
   187ac:	4620      	mov	r0, r4
   187ae:	f018 fd57 	bl	31260 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   187b2:	6823      	ldr	r3, [r4, #0]
   187b4:	f1c0 0006 	rsb	r0, r0, #6
   187b8:	b2c0      	uxtb	r0, r0
   187ba:	f883 0020 	strb.w	r0, [r3, #32]
	return iface->if_dev->oper_state;
   187be:	6823      	ldr	r3, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   187c0:	f893 1020 	ldrb.w	r1, [r3, #32]
   187c4:	4281      	cmp	r1, r0
   187c6:	d122      	bne.n	1880e <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   187c8:	2906      	cmp	r1, #6
   187ca:	d1e1      	bne.n	18790 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   187cc:	2a06      	cmp	r2, #6
   187ce:	d01e      	beq.n	1880e <update_operational_state+0xa2>
		if (!is_iface_offloaded(iface)) {
   187d0:	69da      	ldr	r2, [r3, #28]
   187d2:	b982      	cbnz	r2, 187f6 <update_operational_state+0x8a>
			NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   187d4:	691b      	ldr	r3, [r3, #16]
   187d6:	b973      	cbnz	r3, 187f6 <update_operational_state+0x8a>
   187d8:	490d      	ldr	r1, [pc, #52]	; (18810 <update_operational_state+0xa4>)
   187da:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
   187de:	4a0d      	ldr	r2, [pc, #52]	; (18814 <update_operational_state+0xa8>)
   187e0:	480d      	ldr	r0, [pc, #52]	; (18818 <update_operational_state+0xac>)
   187e2:	f016 f8b7 	bl	2e954 <assert_print>
   187e6:	480d      	ldr	r0, [pc, #52]	; (1881c <update_operational_state+0xb0>)
   187e8:	f016 f8b4 	bl	2e954 <assert_print>
   187ec:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
   187f0:	4808      	ldr	r0, [pc, #32]	; (18814 <update_operational_state+0xa8>)
   187f2:	f016 f8a8 	bl	2e946 <assert_post_action>
	net_if_flag_set(iface, NET_IF_RUNNING);
   187f6:	2108      	movs	r1, #8
   187f8:	4620      	mov	r0, r4
   187fa:	f7ff ff5b 	bl	186b4 <net_if_flag_set>
	return (iface->if_dev->socket_offload != NULL);
   187fe:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   18800:	69db      	ldr	r3, [r3, #28]
   18802:	b923      	cbnz	r3, 1880e <update_operational_state+0xa2>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   18804:	4620      	mov	r0, r4
			notify_iface_down(iface);
		}
	}
}
   18806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1880a:	f018 bd32 	b.w	31272 <l2_flags_get.isra.0>
}
   1880e:	bd10      	pop	{r4, pc}
   18810:	0003b397 	.word	0x0003b397
   18814:	0003b338 	.word	0x0003b338
   18818:	000381c3 	.word	0x000381c3
   1881c:	00038b19 	.word	0x00038b19

00018820 <net_if_flag_test_and_set>:
{
   18820:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   18822:	b970      	cbnz	r0, 18842 <net_if_flag_test_and_set+0x22>
   18824:	4910      	ldr	r1, [pc, #64]	; (18868 <net_if_flag_test_and_set+0x48>)
   18826:	f44f 730b 	mov.w	r3, #556	; 0x22c
   1882a:	4a10      	ldr	r2, [pc, #64]	; (1886c <net_if_flag_test_and_set+0x4c>)
   1882c:	4810      	ldr	r0, [pc, #64]	; (18870 <net_if_flag_test_and_set+0x50>)
   1882e:	f016 f891 	bl	2e954 <assert_print>
   18832:	4810      	ldr	r0, [pc, #64]	; (18874 <net_if_flag_test_and_set+0x54>)
   18834:	f016 f88e 	bl	2e954 <assert_print>
   18838:	f44f 710b 	mov.w	r1, #556	; 0x22c
   1883c:	480b      	ldr	r0, [pc, #44]	; (1886c <net_if_flag_test_and_set+0x4c>)
   1883e:	f016 f882 	bl	2e946 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   18842:	2301      	movs	r3, #1
   18844:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18848:	6803      	ldr	r3, [r0, #0]
   1884a:	330c      	adds	r3, #12
   1884c:	e8d3 2fef 	ldaex	r2, [r3]
   18850:	ea42 0001 	orr.w	r0, r2, r1
   18854:	e8c3 0fe4 	stlex	r4, r0, [r3]
   18858:	2c00      	cmp	r4, #0
   1885a:	d1f7      	bne.n	1884c <net_if_flag_test_and_set+0x2c>
	return (old & mask) != 0;
   1885c:	4211      	tst	r1, r2
}
   1885e:	bf14      	ite	ne
   18860:	2001      	movne	r0, #1
   18862:	2000      	moveq	r0, #0
   18864:	bd10      	pop	{r4, pc}
   18866:	bf00      	nop
   18868:	0003b362 	.word	0x0003b362
   1886c:	0003b368 	.word	0x0003b368
   18870:	000381c3 	.word	0x000381c3
   18874:	00038b19 	.word	0x00038b19

00018878 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   18878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1887a:	f04f 30ff 	mov.w	r0, #4294967295
   1887e:	f04f 31ff 	mov.w	r1, #4294967295
   18882:	f7ff ff65 	bl	18750 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   18886:	4c15      	ldr	r4, [pc, #84]	; (188dc <net_if_init+0x64>)
   18888:	4f15      	ldr	r7, [pc, #84]	; (188e0 <net_if_init+0x68>)
   1888a:	42bc      	cmp	r4, r7
   1888c:	4625      	mov	r5, r4
   1888e:	d91f      	bls.n	188d0 <net_if_init+0x58>
   18890:	4914      	ldr	r1, [pc, #80]	; (188e4 <net_if_init+0x6c>)
   18892:	f241 13ad 	movw	r3, #4525	; 0x11ad
   18896:	4a14      	ldr	r2, [pc, #80]	; (188e8 <net_if_init+0x70>)
   18898:	4814      	ldr	r0, [pc, #80]	; (188ec <net_if_init+0x74>)
   1889a:	f016 f85b 	bl	2e954 <assert_print>
   1889e:	4814      	ldr	r0, [pc, #80]	; (188f0 <net_if_init+0x78>)
   188a0:	f016 f858 	bl	2e954 <assert_print>
   188a4:	f241 11ad 	movw	r1, #4525	; 0x11ad
   188a8:	480f      	ldr	r0, [pc, #60]	; (188e8 <net_if_init+0x70>)
   188aa:	f016 f84c 	bl	2e946 <assert_post_action>
	return iface->if_dev->dev;
   188ae:	682b      	ldr	r3, [r5, #0]
   188b0:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   188b2:	681b      	ldr	r3, [r3, #0]
   188b4:	689e      	ldr	r6, [r3, #8]
	if (!api || !api->init) {
   188b6:	2e00      	cmp	r6, #0
   188b8:	d0e7      	beq.n	1888a <net_if_init+0x12>
   188ba:	6833      	ldr	r3, [r6, #0]
   188bc:	2b00      	cmp	r3, #0
   188be:	d0e4      	beq.n	1888a <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   188c0:	2109      	movs	r1, #9
   188c2:	4628      	mov	r0, r5
   188c4:	f7ff ffac 	bl	18820 <net_if_flag_test_and_set>
	api->init(iface);
   188c8:	4628      	mov	r0, r5
   188ca:	6833      	ldr	r3, [r6, #0]
   188cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   188ce:	e7dc      	b.n	1888a <net_if_init+0x12>
   188d0:	d3ed      	bcc.n	188ae <net_if_init+0x36>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   188d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   188d6:	f7ff bf43 	b.w	18760 <k_mutex_unlock.constprop.0.isra.0>
   188da:	bf00      	nop
   188dc:	2000d1b8 	.word	0x2000d1b8
   188e0:	2000d1bc 	.word	0x2000d1bc
   188e4:	0003b3c8 	.word	0x0003b3c8
   188e8:	0003b338 	.word	0x0003b338
   188ec:	000381c3 	.word	0x000381c3
   188f0:	000387c1 	.word	0x000387c1

000188f4 <net_if_post_init>:

void net_if_post_init(void)
{
   188f4:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   188f6:	4c0f      	ldr	r4, [pc, #60]	; (18934 <net_if_post_init+0x40>)
   188f8:	4d0f      	ldr	r5, [pc, #60]	; (18938 <net_if_post_init+0x44>)
   188fa:	42ac      	cmp	r4, r5
   188fc:	d918      	bls.n	18930 <net_if_post_init+0x3c>
   188fe:	490f      	ldr	r1, [pc, #60]	; (1893c <net_if_post_init+0x48>)
   18900:	f241 13df 	movw	r3, #4575	; 0x11df
   18904:	4a0e      	ldr	r2, [pc, #56]	; (18940 <net_if_post_init+0x4c>)
   18906:	480f      	ldr	r0, [pc, #60]	; (18944 <net_if_post_init+0x50>)
   18908:	f016 f824 	bl	2e954 <assert_print>
   1890c:	480e      	ldr	r0, [pc, #56]	; (18948 <net_if_post_init+0x54>)
   1890e:	f016 f821 	bl	2e954 <assert_print>
   18912:	f241 11df 	movw	r1, #4575	; 0x11df
   18916:	480a      	ldr	r0, [pc, #40]	; (18940 <net_if_post_init+0x4c>)
   18918:	f016 f815 	bl	2e946 <assert_post_action>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1891c:	2103      	movs	r1, #3
   1891e:	4620      	mov	r0, r4
   18920:	f018 fc9e 	bl	31260 <net_if_flag_is_set>
   18924:	b910      	cbnz	r0, 1892c <net_if_post_init+0x38>
			net_if_up(iface);
   18926:	4620      	mov	r0, r4
   18928:	f018 fcaf 	bl	3128a <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1892c:	3404      	adds	r4, #4
   1892e:	e7e4      	b.n	188fa <net_if_post_init+0x6>
   18930:	d3f4      	bcc.n	1891c <net_if_post_init+0x28>
		}
	}
}
   18932:	bd38      	pop	{r3, r4, r5, pc}
   18934:	2000d1b8 	.word	0x2000d1b8
   18938:	2000d1bc 	.word	0x2000d1bc
   1893c:	0003b3c8 	.word	0x0003b3c8
   18940:	0003b338 	.word	0x0003b338
   18944:	000381c3 	.word	0x000381c3
   18948:	000387c1 	.word	0x000387c1

0001894c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1894c:	2300      	movs	r3, #0
{
   1894e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   18952:	2802      	cmp	r0, #2
{
   18954:	b089      	sub	sp, #36	; 0x24
   18956:	4605      	mov	r5, r0
   18958:	4688      	mov	r8, r1
   1895a:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
   1895c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   18960:	d14d      	bne.n	189fe <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   18962:	a806      	add	r0, sp, #24
   18964:	9104      	str	r1, [sp, #16]
   18966:	4601      	mov	r1, r0
{
   18968:	461a      	mov	r2, r3
   1896a:	e006      	b.n	1897a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1896c:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1896e:	3201      	adds	r2, #1
				zeros[i]++;
   18970:	3401      	adds	r4, #1
   18972:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   18974:	b2d4      	uxtb	r4, r2
   18976:	2c08      	cmp	r4, #8
   18978:	d003      	beq.n	18982 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1897a:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
   1897e:	2c00      	cmp	r4, #0
   18980:	d0f4      	beq.n	1896c <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   18982:	3301      	adds	r3, #1
   18984:	2b08      	cmp	r3, #8
   18986:	f101 0101 	add.w	r1, r1, #1
   1898a:	d1ed      	bne.n	18968 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   1898c:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   18990:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   18992:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   18994:	f810 2b01 	ldrb.w	r2, [r0], #1
   18998:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
   1899a:	bf88      	it	hi
   1899c:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
   1899e:	f103 0301 	add.w	r3, r3, #1
   189a2:	b2db      	uxtb	r3, r3
				pos = i;
   189a4:	bf88      	it	hi
   189a6:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
   189a8:	2b08      	cmp	r3, #8
   189aa:	d1f3      	bne.n	18994 <z_impl_net_addr_ntop+0x48>
		len = 8;
   189ac:	469a      	mov	sl, r3
   189ae:	2e01      	cmp	r6, #1
   189b0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   189b4:	bf08      	it	eq
   189b6:	f04f 37ff 	moveq.w	r7, #4294967295
   189ba:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   189bc:	2200      	movs	r2, #0
	char delim = ':';
   189be:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   189c0:	4614      	mov	r4, r2
   189c2:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
   189c4:	f1ba 0f04 	cmp.w	sl, #4
   189c8:	d158      	bne.n	18a7c <z_impl_net_addr_ntop+0x130>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
   189ca:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
				*ptr++ = '0';
   189ce:	4603      	mov	r3, r0
			if (value == 0U) {
   189d0:	bb19      	cbnz	r1, 18a1a <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
   189d2:	2130      	movs	r1, #48	; 0x30
   189d4:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
   189d8:	9901      	ldr	r1, [sp, #4]
   189da:	7041      	strb	r1, [r0, #1]
   189dc:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
   189de:	3401      	adds	r4, #1
   189e0:	b2e4      	uxtb	r4, r4
   189e2:	4554      	cmp	r4, sl
   189e4:	4623      	mov	r3, r4
   189e6:	dbed      	blt.n	189c4 <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   189e8:	4558      	cmp	r0, fp
   189ea:	d00a      	beq.n	18a02 <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
   189ec:	2d01      	cmp	r5, #1
   189ee:	f04f 0300 	mov.w	r3, #0
   189f2:	f040 8089 	bne.w	18b08 <z_impl_net_addr_ntop+0x1bc>
		*(ptr - 1) = '\0';
   189f6:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
   189fa:	4658      	mov	r0, fp
   189fc:	e002      	b.n	18a04 <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
   189fe:	2801      	cmp	r0, #1
   18a00:	d003      	beq.n	18a0a <z_impl_net_addr_ntop+0xbe>
		return NULL;
   18a02:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
   18a04:	b009      	add	sp, #36	; 0x24
   18a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   18a0a:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   18a0c:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
   18a10:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   18a14:	4606      	mov	r6, r0
		delim = '.';
   18a16:	9301      	str	r3, [sp, #4]
   18a18:	e7d0      	b.n	189bc <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
   18a1a:	f04f 0e00 	mov.w	lr, #0
   18a1e:	f04f 0c09 	mov.w	ip, #9
   18a22:	f8cd e008 	str.w	lr, [sp, #8]
   18a26:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 18b0c <z_impl_net_addr_ntop+0x1c0>
		temp = value / divisor;
   18a2a:	fbb1 f9fe 	udiv	r9, r1, lr
   18a2e:	9103      	str	r1, [sp, #12]
   18a30:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
   18a34:	fb0e 1119 	mls	r1, lr, r9, r1
		if ((precision > i) || (temp != 0)) {
   18a38:	f8dd 9008 	ldr.w	r9, [sp, #8]
   18a3c:	45cc      	cmp	ip, r9
   18a3e:	db03      	blt.n	18a48 <z_impl_net_addr_ntop+0xfc>
   18a40:	f8dd 900c 	ldr.w	r9, [sp, #12]
   18a44:	45f1      	cmp	r9, lr
   18a46:	d307      	bcc.n	18a58 <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
   18a48:	f8dd 9014 	ldr.w	r9, [sp, #20]
   18a4c:	f8cd c008 	str.w	ip, [sp, #8]
   18a50:	f109 0930 	add.w	r9, r9, #48	; 0x30
   18a54:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   18a58:	f04f 090a 	mov.w	r9, #10
   18a5c:	f10c 3cff 	add.w	ip, ip, #4294967295
   18a60:	f1bc 3fff 	cmp.w	ip, #4294967295
   18a64:	fbbe fef9 	udiv	lr, lr, r9
   18a68:	d1df      	bne.n	18a2a <z_impl_net_addr_ntop+0xde>
	*buf = 0;
   18a6a:	2100      	movs	r1, #0
   18a6c:	7019      	strb	r1, [r3, #0]
	return buf - start;
   18a6e:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
   18a70:	fa50 f083 	uxtab	r0, r0, r3
   18a74:	9b01      	ldr	r3, [sp, #4]
   18a76:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
   18a7a:	e7b0      	b.n	189de <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
   18a7c:	429f      	cmp	r7, r3
   18a7e:	d10d      	bne.n	18a9c <z_impl_net_addr_ntop+0x150>
			if (needcolon || i == 0U) {
   18a80:	b902      	cbnz	r2, 18a84 <z_impl_net_addr_ntop+0x138>
   18a82:	b914      	cbnz	r4, 18a8a <z_impl_net_addr_ntop+0x13e>
				*ptr++ = ':';
   18a84:	233a      	movs	r3, #58	; 0x3a
   18a86:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
   18a8a:	f04f 033a 	mov.w	r3, #58	; 0x3a
   18a8e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   18a92:	1e73      	subs	r3, r6, #1
   18a94:	4423      	add	r3, r4
			needcolon = false;
   18a96:	2200      	movs	r2, #0
			i += longest - 1U;
   18a98:	b2dc      	uxtb	r4, r3
			continue;
   18a9a:	e7a0      	b.n	189de <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
   18a9c:	b11a      	cbz	r2, 18aa6 <z_impl_net_addr_ntop+0x15a>
			*ptr++ = ':';
   18a9e:	f04f 033a 	mov.w	r3, #58	; 0x3a
   18aa2:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   18aa6:	9b04      	ldr	r3, [sp, #16]
   18aa8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   18aac:	ba52      	rev16	r2, r2
		if (bh) {
   18aae:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   18ab2:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   18ab6:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
   18aba:	d016      	beq.n	18aea <z_impl_net_addr_ntop+0x19e>
			if (bh > 0x0f) {
   18abc:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   18abe:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   18ac0:	d90a      	bls.n	18ad8 <z_impl_net_addr_ntop+0x18c>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   18ac2:	2300      	movs	r3, #0
   18ac4:	2261      	movs	r2, #97	; 0x61
   18ac6:	f018 fc07 	bl	312d8 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   18aca:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   18acc:	2261      	movs	r2, #97	; 0x61
   18ace:	4649      	mov	r1, r9
   18ad0:	f018 fc02 	bl	312d8 <net_byte_to_hex>
		needcolon = true;
   18ad4:	2201      	movs	r2, #1
   18ad6:	e782      	b.n	189de <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
   18ad8:	2b09      	cmp	r3, #9
   18ada:	d804      	bhi.n	18ae6 <z_impl_net_addr_ntop+0x19a>
					*ptr++ = (char)(bh + '0');
   18adc:	3130      	adds	r1, #48	; 0x30
   18ade:	b2c9      	uxtb	r1, r1
   18ae0:	f800 1b01 	strb.w	r1, [r0], #1
   18ae4:	e7f1      	b.n	18aca <z_impl_net_addr_ntop+0x17e>
					*ptr++ = (char) (bh - 10 + 'a');
   18ae6:	3157      	adds	r1, #87	; 0x57
   18ae8:	e7f9      	b.n	18ade <z_impl_net_addr_ntop+0x192>
		} else if (bl > 0x0f) {
   18aea:	f1b9 0f0f 	cmp.w	r9, #15
   18aee:	d8ed      	bhi.n	18acc <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
   18af0:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
   18af4:	bf94      	ite	ls
   18af6:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   18afa:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
   18afe:	fa5f f989 	uxtb.w	r9, r9
   18b02:	f800 9b01 	strb.w	r9, [r0], #1
   18b06:	e7e5      	b.n	18ad4 <z_impl_net_addr_ntop+0x188>
		*ptr = '\0';
   18b08:	7003      	strb	r3, [r0, #0]
   18b0a:	e776      	b.n	189fa <z_impl_net_addr_ntop+0xae>
   18b0c:	3b9aca00 	.word	0x3b9aca00

00018b10 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   18b10:	2801      	cmp	r0, #1
{
   18b12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18b16:	460c      	mov	r4, r1
   18b18:	4616      	mov	r6, r2
	if (family == AF_INET) {
   18b1a:	d126      	bne.n	18b6a <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   18b1c:	4608      	mov	r0, r1
   18b1e:	f7f0 fbfc 	bl	931a <strlen>
		for (i = 0; i < len; i++) {
   18b22:	4623      	mov	r3, r4
   18b24:	4420      	add	r0, r4
   18b26:	4298      	cmp	r0, r3
   18b28:	d112      	bne.n	18b50 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   18b2a:	4635      	mov	r5, r6
   18b2c:	2300      	movs	r3, #0
   18b2e:	3603      	adds	r6, #3
   18b30:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   18b34:	4620      	mov	r0, r4
   18b36:	220a      	movs	r2, #10
   18b38:	a901      	add	r1, sp, #4
   18b3a:	f013 fd4f 	bl	2c5dc <strtol>

			src = ++endptr;
   18b3e:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   18b40:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   18b44:	42ae      	cmp	r6, r5
			src = ++endptr;
   18b46:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   18b4a:	d1f3      	bne.n	18b34 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   18b4c:	2000      	movs	r0, #0
   18b4e:	e009      	b.n	18b64 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   18b50:	f813 2b01 	ldrb.w	r2, [r3], #1
   18b54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   18b58:	2909      	cmp	r1, #9
   18b5a:	d9e4      	bls.n	18b26 <z_impl_net_addr_pton+0x16>
   18b5c:	2a2e      	cmp	r2, #46	; 0x2e
   18b5e:	d0e2      	beq.n	18b26 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   18b60:	f06f 0015 	mvn.w	r0, #21
}
   18b64:	b003      	add	sp, #12
   18b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   18b6a:	2802      	cmp	r0, #2
   18b6c:	d1f8      	bne.n	18b60 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   18b6e:	212e      	movs	r1, #46	; 0x2e
   18b70:	4620      	mov	r0, r4
   18b72:	f01c fbec 	bl	3534e <strchr>
		if (*src == ':') {
   18b76:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   18b78:	2800      	cmp	r0, #0
   18b7a:	bf0c      	ite	eq
   18b7c:	2708      	moveq	r7, #8
   18b7e:	2706      	movne	r7, #6
		if (*src == ':') {
   18b80:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   18b82:	bf08      	it	eq
   18b84:	3401      	addeq	r4, #1
		len = strlen(src);
   18b86:	4620      	mov	r0, r4
   18b88:	f7f0 fbc7 	bl	931a <strlen>
		for (i = 0; i < len; i++) {
   18b8c:	2200      	movs	r2, #0
   18b8e:	4943      	ldr	r1, [pc, #268]	; (18c9c <z_impl_net_addr_pton+0x18c>)
   18b90:	4282      	cmp	r2, r0
   18b92:	db23      	blt.n	18bdc <z_impl_net_addr_pton+0xcc>
		for (i = 0; i < expected_groups; i++) {
   18b94:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   18b96:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   18b98:	7823      	ldrb	r3, [r4, #0]
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	d0e0      	beq.n	18b60 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   18b9e:	2b3a      	cmp	r3, #58	; 0x3a
   18ba0:	d041      	beq.n	18c26 <z_impl_net_addr_pton+0x116>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   18ba2:	2210      	movs	r2, #16
   18ba4:	2100      	movs	r1, #0
   18ba6:	4620      	mov	r0, r4
   18ba8:	f013 fd18 	bl	2c5dc <strtol>
   18bac:	2210      	movs	r2, #16
   18bae:	4681      	mov	r9, r0
   18bb0:	2100      	movs	r1, #0
   18bb2:	4620      	mov	r0, r4
   18bb4:	f013 fd12 	bl	2c5dc <strtol>
   18bb8:	f3c9 2907 	ubfx	r9, r9, #8, #8
   18bbc:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   18bc0:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   18bc4:	213a      	movs	r1, #58	; 0x3a
   18bc6:	4620      	mov	r0, r4
   18bc8:	f01c fbc1 	bl	3534e <strchr>
				if (src) {
   18bcc:	b1d8      	cbz	r0, 18c06 <z_impl_net_addr_pton+0xf6>
					src++;
   18bce:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
   18bd0:	3501      	adds	r5, #1
   18bd2:	42af      	cmp	r7, r5
   18bd4:	dce0      	bgt.n	18b98 <z_impl_net_addr_pton+0x88>
		if (expected_groups == 6) {
   18bd6:	2f06      	cmp	r7, #6
   18bd8:	d1b8      	bne.n	18b4c <z_impl_net_addr_pton+0x3c>
   18bda:	e03e      	b.n	18c5a <z_impl_net_addr_pton+0x14a>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   18bdc:	5ca3      	ldrb	r3, [r4, r2]
   18bde:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   18be2:	2d09      	cmp	r5, #9
   18be4:	d909      	bls.n	18bfa <z_impl_net_addr_pton+0xea>
   18be6:	2b46      	cmp	r3, #70	; 0x46
   18be8:	d809      	bhi.n	18bfe <z_impl_net_addr_pton+0xee>
   18bea:	2b2d      	cmp	r3, #45	; 0x2d
   18bec:	d9b8      	bls.n	18b60 <z_impl_net_addr_pton+0x50>
   18bee:	3b2e      	subs	r3, #46	; 0x2e
   18bf0:	b2db      	uxtb	r3, r3
   18bf2:	fa21 f303 	lsr.w	r3, r1, r3
   18bf6:	07db      	lsls	r3, r3, #31
   18bf8:	d5b2      	bpl.n	18b60 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   18bfa:	3201      	adds	r2, #1
   18bfc:	e7c8      	b.n	18b90 <z_impl_net_addr_pton+0x80>
   18bfe:	3b61      	subs	r3, #97	; 0x61
   18c00:	2b05      	cmp	r3, #5
   18c02:	d9fa      	bls.n	18bfa <z_impl_net_addr_pton+0xea>
   18c04:	e7ac      	b.n	18b60 <z_impl_net_addr_pton+0x50>
					if (i < expected_groups - 1) {
   18c06:	1e7b      	subs	r3, r7, #1
   18c08:	42ab      	cmp	r3, r5
   18c0a:	dca9      	bgt.n	18b60 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   18c0c:	3501      	adds	r5, #1
   18c0e:	42bd      	cmp	r5, r7
   18c10:	dba6      	blt.n	18b60 <z_impl_net_addr_pton+0x50>
		if (expected_groups == 6) {
   18c12:	2f06      	cmp	r7, #6
   18c14:	d19a      	bne.n	18b4c <z_impl_net_addr_pton+0x3c>
   18c16:	e7a3      	b.n	18b60 <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   18c18:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   18c1c:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   18c20:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   18c24:	3501      	adds	r5, #1
   18c26:	42bd      	cmp	r5, r7
   18c28:	dbf6      	blt.n	18c18 <z_impl_net_addr_pton+0x108>
			tmp = strrchr(src, ':');
   18c2a:	213a      	movs	r1, #58	; 0x3a
   18c2c:	4620      	mov	r0, r4
   18c2e:	f01c fbd4 	bl	353da <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   18c32:	42a0      	cmp	r0, r4
   18c34:	d129      	bne.n	18c8a <z_impl_net_addr_pton+0x17a>
   18c36:	2f06      	cmp	r7, #6
   18c38:	d00e      	beq.n	18c58 <z_impl_net_addr_pton+0x148>
   18c3a:	7863      	ldrb	r3, [r4, #1]
   18c3c:	2b00      	cmp	r3, #0
   18c3e:	d085      	beq.n	18b4c <z_impl_net_addr_pton+0x3c>
			i = expected_groups - 1;
   18c40:	1e7d      	subs	r5, r7, #1
   18c42:	3001      	adds	r0, #1
				if (*tmp == ':') {
   18c44:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   18c48:	2b3a      	cmp	r3, #58	; 0x3a
   18c4a:	d101      	bne.n	18c50 <z_impl_net_addr_pton+0x140>
				if (i < 0) {
   18c4c:	3d01      	subs	r5, #1
   18c4e:	d387      	bcc.n	18b60 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   18c50:	4284      	cmp	r4, r0
   18c52:	d1f7      	bne.n	18c44 <z_impl_net_addr_pton+0x134>
			src++;
   18c54:	3401      	adds	r4, #1
   18c56:	e7bb      	b.n	18bd0 <z_impl_net_addr_pton+0xc0>
				src++;
   18c58:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   18c5a:	2500      	movs	r5, #0
   18c5c:	360b      	adds	r6, #11
				if (!src || !*src) {
   18c5e:	7823      	ldrb	r3, [r4, #0]
   18c60:	2b00      	cmp	r3, #0
   18c62:	f43f af7d 	beq.w	18b60 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   18c66:	2100      	movs	r1, #0
   18c68:	220a      	movs	r2, #10
   18c6a:	4620      	mov	r0, r4
   18c6c:	f013 fcb6 	bl	2c5dc <strtol>
				src = strchr(src, '.');
   18c70:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   18c72:	f806 0f01 	strb.w	r0, [r6, #1]!
				src = strchr(src, '.');
   18c76:	4620      	mov	r0, r4
   18c78:	f01c fb69 	bl	3534e <strchr>
				if (src) {
   18c7c:	b150      	cbz	r0, 18c94 <z_impl_net_addr_pton+0x184>
			for (i = 0; i < 4; i++) {
   18c7e:	3501      	adds	r5, #1
   18c80:	2d04      	cmp	r5, #4
					src++;
   18c82:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
   18c86:	d1ea      	bne.n	18c5e <z_impl_net_addr_pton+0x14e>
   18c88:	e760      	b.n	18b4c <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   18c8a:	2f06      	cmp	r7, #6
				tmp--;
   18c8c:	bf08      	it	eq
   18c8e:	f100 30ff 	addeq.w	r0, r0, #4294967295
   18c92:	e7d5      	b.n	18c40 <z_impl_net_addr_pton+0x130>
					if (i < 3) {
   18c94:	2d03      	cmp	r5, #3
   18c96:	f47f af63 	bne.w	18b60 <z_impl_net_addr_pton+0x50>
   18c9a:	e757      	b.n	18b4c <z_impl_net_addr_pton+0x3c>
   18c9c:	01f81001 	.word	0x01f81001

00018ca0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   18ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   18ca4:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   18ca6:	f890 5084 	ldrb.w	r5, [r0, #132]	; 0x84
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   18caa:	4b3c      	ldr	r3, [pc, #240]	; (18d9c <connect_request_encode+0xfc>)
   18cac:	4a3c      	ldr	r2, [pc, #240]	; (18da0 <connect_request_encode+0x100>)
{
   18cae:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   18cb0:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   18cb4:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   18cb6:	2804      	cmp	r0, #4
   18cb8:	bf14      	ite	ne
   18cba:	4610      	movne	r0, r2
   18cbc:	4618      	moveq	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   18cbe:	600f      	str	r7, [r1, #0]
{
   18cc0:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   18cc2:	f018 fbec 	bl	3149e <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   18cc6:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   18cca:	4603      	mov	r3, r0
   18ccc:	b938      	cbnz	r0, 18cde <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   18cce:	e9d4 2000 	ldrd	r2, r0, [r4]
   18cd2:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   18cd4:	f896 1082 	ldrb.w	r1, [r6, #130]	; 0x82
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   18cd8:	d104      	bne.n	18ce4 <connect_request_encode+0x44>
		return -ENOMEM;
   18cda:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   18cde:	4618      	mov	r0, r3
   18ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	*(buf->cur++) = val;
   18ce4:	1c50      	adds	r0, r2, #1
   18ce6:	6020      	str	r0, [r4, #0]
   18ce8:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   18cea:	e9d4 8200 	ldrd	r8, r2, [r4]
   18cee:	4590      	cmp	r8, r2
   18cf0:	d0f3      	beq.n	18cda <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   18cf2:	f108 0201 	add.w	r2, r8, #1
   18cf6:	6022      	str	r2, [r4, #0]
   18cf8:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   18cfc:	4621      	mov	r1, r4
   18cfe:	f8b6 0080 	ldrh.w	r0, [r6, #128]	; 0x80
   18d02:	f018 fbba 	bl	3147a <pack_uint16>
	if (err_code != 0) {
   18d06:	4603      	mov	r3, r0
   18d08:	2800      	cmp	r0, #0
   18d0a:	d1e8      	bne.n	18cde <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   18d0c:	f106 0050 	add.w	r0, r6, #80	; 0x50
   18d10:	f018 fbc5 	bl	3149e <pack_utf8_str>
	if (err_code != 0) {
   18d14:	4603      	mov	r3, r0
   18d16:	2800      	cmp	r0, #0
   18d18:	d1e1      	bne.n	18cde <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   18d1a:	6e70      	ldr	r0, [r6, #100]	; 0x64
	uint8_t connect_flags = client->clean_session << 1;
   18d1c:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   18d1e:	b1e8      	cbz	r0, 18d5c <connect_request_encode+0xbc>
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   18d20:	4621      	mov	r1, r4
		connect_flags |= client->will_retain << 5;
   18d22:	f896 a084 	ldrb.w	sl, [r6, #132]	; 0x84
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   18d26:	f890 9008 	ldrb.w	r9, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   18d2a:	f018 fbb8 	bl	3149e <pack_utf8_str>
		connect_flags |= client->will_retain << 5;
   18d2e:	f00a 0a01 	and.w	sl, sl, #1
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   18d32:	4603      	mov	r3, r0
		if (err_code != 0) {
   18d34:	2800      	cmp	r0, #0
   18d36:	d1d2      	bne.n	18cde <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   18d38:	6eb3      	ldr	r3, [r6, #104]	; 0x68
			err_code = pack_utf8_str(client->will_message, buf);
   18d3a:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   18d3c:	b35b      	cbz	r3, 18d96 <connect_request_encode+0xf6>
			err_code = pack_utf8_str(client->will_message, buf);
   18d3e:	4618      	mov	r0, r3
   18d40:	f018 fbad 	bl	3149e <pack_utf8_str>
			if (err_code != 0) {
   18d44:	4603      	mov	r3, r0
   18d46:	2800      	cmp	r0, #0
   18d48:	d1c9      	bne.n	18cde <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   18d4a:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   18d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
		connect_flags |= client->will_retain << 5;
   18d52:	ea45 154a 	orr.w	r5, r5, sl, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   18d56:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   18d5a:	431d      	orrs	r5, r3
	if (client->user_name != NULL) {
   18d5c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   18d5e:	b138      	cbz	r0, 18d70 <connect_request_encode+0xd0>
		err_code = pack_utf8_str(client->user_name, buf);
   18d60:	4621      	mov	r1, r4
   18d62:	f018 fb9c 	bl	3149e <pack_utf8_str>
		if (err_code != 0) {
   18d66:	4603      	mov	r3, r0
   18d68:	2800      	cmp	r0, #0
   18d6a:	d1b8      	bne.n	18cde <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   18d6c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   18d70:	6e30      	ldr	r0, [r6, #96]	; 0x60
   18d72:	b138      	cbz	r0, 18d84 <connect_request_encode+0xe4>
		err_code = pack_utf8_str(client->password, buf);
   18d74:	4621      	mov	r1, r4
   18d76:	f018 fb92 	bl	3149e <pack_utf8_str>
		if (err_code != 0) {
   18d7a:	4603      	mov	r3, r0
   18d7c:	2800      	cmp	r0, #0
   18d7e:	d1ae      	bne.n	18cde <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   18d80:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   18d84:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   18d88:	4622      	mov	r2, r4
   18d8a:	4639      	mov	r1, r7
}
   18d8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   18d90:	2010      	movs	r0, #16
   18d92:	f018 bb9f 	b.w	314d4 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   18d96:	f018 fb70 	bl	3147a <pack_uint16>
   18d9a:	e7d3      	b.n	18d44 <connect_request_encode+0xa4>
   18d9c:	00036e10 	.word	0x00036e10
   18da0:	00036e18 	.word	0x00036e18

00018da4 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   18da4:	e9d0 2300 	ldrd	r2, r3, [r0]
   18da8:	1a9b      	subs	r3, r3, r2
   18daa:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18dac:	bf81      	itttt	hi
   18dae:	4b05      	ldrhi	r3, [pc, #20]	; (18dc4 <disconnect_encode+0x20>)
   18db0:	881b      	ldrhhi	r3, [r3, #0]
   18db2:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   18db4:	6803      	ldrhi	r3, [r0, #0]
   18db6:	bf83      	ittte	hi
   18db8:	3302      	addhi	r3, #2
   18dba:	6043      	strhi	r3, [r0, #4]

	return 0;
   18dbc:	2000      	movhi	r0, #0
		return -ENOMEM;
   18dbe:	f06f 000b 	mvnls.w	r0, #11
}
   18dc2:	4770      	bx	lr
   18dc4:	0003b42c 	.word	0x0003b42c

00018dc8 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   18dc8:	e9d0 2300 	ldrd	r2, r3, [r0]
   18dcc:	1a9b      	subs	r3, r3, r2
   18dce:	2b01      	cmp	r3, #1
   18dd0:	bf81      	itttt	hi
   18dd2:	4b05      	ldrhi	r3, [pc, #20]	; (18de8 <ping_request_encode+0x20>)
   18dd4:	881b      	ldrhhi	r3, [r3, #0]
   18dd6:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   18dd8:	6803      	ldrhi	r3, [r0, #0]
   18dda:	bf83      	ittte	hi
   18ddc:	3302      	addhi	r3, #2
   18dde:	6043      	strhi	r3, [r0, #4]

	return 0;
   18de0:	2000      	movhi	r0, #0
		return -ENOMEM;
   18de2:	f06f 000b 	mvnls.w	r0, #11
}
   18de6:	4770      	bx	lr
   18de8:	0003b42e 	.word	0x0003b42e

00018dec <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   18dec:	2214      	movs	r2, #20
   18dee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   18df2:	4353      	muls	r3, r2
   18df4:	4a01      	ldr	r2, [pc, #4]	; (18dfc <mqtt_transport_connect+0x10>)
   18df6:	58d3      	ldr	r3, [r2, r3]
   18df8:	4718      	bx	r3
   18dfa:	bf00      	nop
   18dfc:	00036e20 	.word	0x00036e20

00018e00 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   18e00:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   18e02:	2514      	movs	r5, #20
   18e04:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   18e08:	4b02      	ldr	r3, [pc, #8]	; (18e14 <mqtt_transport_write+0x14>)
   18e0a:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   18e0e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   18e10:	685b      	ldr	r3, [r3, #4]
   18e12:	4718      	bx	r3
   18e14:	00036e20 	.word	0x00036e20

00018e18 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   18e18:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   18e1a:	2414      	movs	r4, #20
   18e1c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   18e20:	4b02      	ldr	r3, [pc, #8]	; (18e2c <mqtt_transport_write_msg+0x14>)
   18e22:	fb04 3302 	mla	r3, r4, r2, r3
}
   18e26:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   18e28:	689b      	ldr	r3, [r3, #8]
   18e2a:	4718      	bx	r3
   18e2c:	00036e20 	.word	0x00036e20

00018e30 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   18e30:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   18e32:	2614      	movs	r6, #20
   18e34:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   18e38:	4c03      	ldr	r4, [pc, #12]	; (18e48 <mqtt_transport_read+0x18>)
   18e3a:	fb06 4405 	mla	r4, r6, r5, r4
   18e3e:	68e4      	ldr	r4, [r4, #12]
   18e40:	46a4      	mov	ip, r4
							 shall_block);
}
   18e42:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   18e44:	4760      	bx	ip
   18e46:	bf00      	nop
   18e48:	00036e20 	.word	0x00036e20

00018e4c <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   18e4c:	2114      	movs	r1, #20
   18e4e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   18e52:	4b02      	ldr	r3, [pc, #8]	; (18e5c <mqtt_transport_disconnect+0x10>)
   18e54:	fb01 3302 	mla	r3, r1, r2, r3
   18e58:	691b      	ldr	r3, [r3, #16]
   18e5a:	4718      	bx	r3
   18e5c:	00036e20 	.word	0x00036e20

00018e60 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   18e60:	b510      	push	{r4, lr}
   18e62:	f00f fddf 	bl	28a24 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   18e66:	4604      	mov	r4, r0
   18e68:	b168      	cbz	r0, 18e86 <mqtt_mutex_unlock+0x26>
   18e6a:	233d      	movs	r3, #61	; 0x3d
   18e6c:	4a06      	ldr	r2, [pc, #24]	; (18e88 <mqtt_mutex_unlock+0x28>)
   18e6e:	4907      	ldr	r1, [pc, #28]	; (18e8c <mqtt_mutex_unlock+0x2c>)
   18e70:	4807      	ldr	r0, [pc, #28]	; (18e90 <mqtt_mutex_unlock+0x30>)
   18e72:	f015 fd6f 	bl	2e954 <assert_print>
   18e76:	4621      	mov	r1, r4
   18e78:	4806      	ldr	r0, [pc, #24]	; (18e94 <mqtt_mutex_unlock+0x34>)
   18e7a:	f015 fd6b 	bl	2e954 <assert_print>
   18e7e:	213d      	movs	r1, #61	; 0x3d
   18e80:	4801      	ldr	r0, [pc, #4]	; (18e88 <mqtt_mutex_unlock+0x28>)
   18e82:	f015 fd60 	bl	2e946 <assert_post_action>
	(void)ret;
}
   18e86:	bd10      	pop	{r4, pc}
   18e88:	0003b467 	.word	0x0003b467
   18e8c:	0003b498 	.word	0x0003b498
   18e90:	000381c3 	.word	0x000381c3
   18e94:	0003b4a1 	.word	0x0003b4a1

00018e98 <mqtt_mutex_lock>:
{
   18e98:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   18e9a:	f04f 32ff 	mov.w	r2, #4294967295
   18e9e:	f04f 33ff 	mov.w	r3, #4294967295
   18ea2:	f00f fcef 	bl	28884 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   18ea6:	4604      	mov	r4, r0
   18ea8:	b168      	cbz	r0, 18ec6 <mqtt_mutex_lock+0x2e>
   18eaa:	2333      	movs	r3, #51	; 0x33
   18eac:	4a06      	ldr	r2, [pc, #24]	; (18ec8 <mqtt_mutex_lock+0x30>)
   18eae:	4907      	ldr	r1, [pc, #28]	; (18ecc <mqtt_mutex_lock+0x34>)
   18eb0:	4807      	ldr	r0, [pc, #28]	; (18ed0 <mqtt_mutex_lock+0x38>)
   18eb2:	f015 fd4f 	bl	2e954 <assert_print>
   18eb6:	4621      	mov	r1, r4
   18eb8:	4806      	ldr	r0, [pc, #24]	; (18ed4 <mqtt_mutex_lock+0x3c>)
   18eba:	f015 fd4b 	bl	2e954 <assert_print>
   18ebe:	2133      	movs	r1, #51	; 0x33
   18ec0:	4801      	ldr	r0, [pc, #4]	; (18ec8 <mqtt_mutex_lock+0x30>)
   18ec2:	f015 fd40 	bl	2e946 <assert_post_action>
}
   18ec6:	bd10      	pop	{r4, pc}
   18ec8:	0003b467 	.word	0x0003b467
   18ecc:	0003b498 	.word	0x0003b498
   18ed0:	000381c3 	.word	0x000381c3
   18ed4:	0003b4c3 	.word	0x0003b4c3

00018ed8 <mqtt_client_tls_connect>:
#include <zephyr/net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   18ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int type = SOCK_STREAM;
	int ret;

	if (tls_config->set_native_tls) {
   18eda:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	const struct sockaddr *broker = client->broker;
   18ede:	6d85      	ldr	r5, [r0, #88]	; 0x58
	int type = SOCK_STREAM;
   18ee0:	2b00      	cmp	r3, #0
{
   18ee2:	4604      	mov	r4, r0
	int type = SOCK_STREAM;
   18ee4:	493f      	ldr	r1, [pc, #252]	; (18fe4 <mqtt_client_tls_connect+0x10c>)
		type |= SOCK_NATIVE_TLS;
	}

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   18ee6:	8828      	ldrh	r0, [r5, #0]
	int type = SOCK_STREAM;
   18ee8:	bf08      	it	eq
   18eea:	2101      	moveq	r1, #1
	return z_impl_zsock_socket(family, type, proto);
   18eec:	f44f 7281 	mov.w	r2, #258	; 0x102
   18ef0:	f7f6 f99a 	bl	f228 <z_impl_zsock_socket>
						  type, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   18ef4:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   18ef6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   18ef8:	da05      	bge.n	18f06 <mqtt_client_tls_connect+0x2e>
	NET_DBG("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   18efa:	f016 fe3a 	bl	2fb72 <__errno>
   18efe:	6800      	ldr	r0, [r0, #0]
   18f00:	4240      	negs	r0, r0
}
   18f02:	b003      	add	sp, #12
   18f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   18f06:	2304      	movs	r3, #4
   18f08:	2205      	movs	r2, #5
   18f0a:	9300      	str	r3, [sp, #0]
   18f0c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18f10:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   18f14:	f016 f811 	bl	2ef3a <z_impl_zsock_setsockopt>
	if (ret < 0) {
   18f18:	2800      	cmp	r0, #0
   18f1a:	da03      	bge.n	18f24 <mqtt_client_tls_connect+0x4c>
	(void) zsock_close(client->transport.tls.sock);
   18f1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   18f1e:	f015 ff05 	bl	2ed2c <z_impl_zsock_close>
   18f22:	e7ea      	b.n	18efa <mqtt_client_tls_connect+0x22>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   18f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   18f28:	2b00      	cmp	r3, #0
   18f2a:	d131      	bne.n	18f90 <mqtt_client_tls_connect+0xb8>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   18f2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   18f30:	2b00      	cmp	r3, #0
   18f32:	d13a      	bne.n	18faa <mqtt_client_tls_connect+0xd2>
	if (tls_config->hostname) {
   18f34:	6c66      	ldr	r6, [r4, #68]	; 0x44
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (tls_config->hostname) {
   18f38:	2e00      	cmp	r6, #0
   18f3a:	d143      	bne.n	18fc4 <mqtt_client_tls_connect+0xec>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   18f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   18f40:	2b01      	cmp	r3, #1
   18f42:	d10a      	bne.n	18f5a <mqtt_client_tls_connect+0x82>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   18f44:	2304      	movs	r3, #4
   18f46:	220c      	movs	r2, #12
   18f48:	9300      	str	r3, [sp, #0]
   18f4a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18f4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18f52:	f015 fff2 	bl	2ef3a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   18f56:	2800      	cmp	r0, #0
   18f58:	dbe0      	blt.n	18f1c <mqtt_client_tls_connect+0x44>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   18f5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   18f5e:	b153      	cbz	r3, 18f76 <mqtt_client_tls_connect+0x9e>
   18f60:	2304      	movs	r3, #4
   18f62:	220a      	movs	r2, #10
   18f64:	9300      	str	r3, [sp, #0]
   18f66:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18f6a:	f104 0348 	add.w	r3, r4, #72	; 0x48
   18f6e:	f015 ffe4 	bl	2ef3a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   18f72:	2800      	cmp	r0, #0
   18f74:	dbd2      	blt.n	18f1c <mqtt_client_tls_connect+0x44>
	if (broker->sa_family == AF_INET) {
   18f76:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   18f78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   18f7a:	2b01      	cmp	r3, #1
   18f7c:	bf0c      	ite	eq
   18f7e:	2208      	moveq	r2, #8
   18f80:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   18f82:	6da1      	ldr	r1, [r4, #88]	; 0x58
	return z_impl_zsock_connect(sock, addr, addrlen);
   18f84:	f015 fef6 	bl	2ed74 <z_impl_zsock_connect>
	if (ret < 0) {
   18f88:	2800      	cmp	r0, #0
   18f8a:	dbc7      	blt.n	18f1c <mqtt_client_tls_connect+0x44>
	return 0;
   18f8c:	2000      	movs	r0, #0
   18f8e:	e7b8      	b.n	18f02 <mqtt_client_tls_connect+0x2a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   18f90:	6b22      	ldr	r2, [r4, #48]	; 0x30
   18f92:	2a00      	cmp	r2, #0
   18f94:	d0ca      	beq.n	18f2c <mqtt_client_tls_connect+0x54>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18f96:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   18f98:	9200      	str	r2, [sp, #0]
   18f9a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18f9e:	2203      	movs	r2, #3
   18fa0:	f015 ffcb 	bl	2ef3a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   18fa4:	2800      	cmp	r0, #0
   18fa6:	dac1      	bge.n	18f2c <mqtt_client_tls_connect+0x54>
   18fa8:	e7b8      	b.n	18f1c <mqtt_client_tls_connect+0x44>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   18faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18fac:	2a00      	cmp	r2, #0
   18fae:	d0c1      	beq.n	18f34 <mqtt_client_tls_connect+0x5c>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18fb0:	0092      	lsls	r2, r2, #2
   18fb2:	9200      	str	r2, [sp, #0]
   18fb4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18fb8:	2201      	movs	r2, #1
   18fba:	f015 ffbe 	bl	2ef3a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   18fbe:	2800      	cmp	r0, #0
   18fc0:	dab8      	bge.n	18f34 <mqtt_client_tls_connect+0x5c>
   18fc2:	e7ab      	b.n	18f1c <mqtt_client_tls_connect+0x44>
				       strlen(tls_config->hostname) + 1);
   18fc4:	4630      	mov	r0, r6
   18fc6:	f7f0 f9a8 	bl	931a <strlen>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   18fca:	3001      	adds	r0, #1
   18fcc:	9000      	str	r0, [sp, #0]
   18fce:	4633      	mov	r3, r6
   18fd0:	2202      	movs	r2, #2
   18fd2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18fd6:	4638      	mov	r0, r7
   18fd8:	f015 ffaf 	bl	2ef3a <z_impl_zsock_setsockopt>
		if (ret < 0) {
   18fdc:	2800      	cmp	r0, #0
   18fde:	daad      	bge.n	18f3c <mqtt_client_tls_connect+0x64>
   18fe0:	e79c      	b.n	18f1c <mqtt_client_tls_connect+0x44>
   18fe2:	bf00      	nop
   18fe4:	40000001 	.word	0x40000001

00018fe8 <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   18fe8:	2200      	movs	r2, #0
   18fea:	4b02      	ldr	r3, [pc, #8]	; (18ff4 <reset_rx+0xc>)
   18fec:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   18fee:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   18ff0:	4770      	bx	lr
   18ff2:	bf00      	nop
   18ff4:	2000c908 	.word	0x2000c908

00018ff8 <get_rx>:

static struct net_buf *get_rx(k_timeout_t timeout)
{
   18ff8:	4602      	mov	r2, r0
	LOG_DBG("type 0x%02x, evt 0x%02x", rx.type, rx.evt.evt);

	switch (rx.type) {
   18ffa:	4809      	ldr	r0, [pc, #36]	; (19020 <get_rx+0x28>)
{
   18ffc:	460b      	mov	r3, r1
	switch (rx.type) {
   18ffe:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
   19002:	2902      	cmp	r1, #2
   19004:	d007      	beq.n	19016 <get_rx+0x1e>
   19006:	2904      	cmp	r1, #4
   19008:	d108      	bne.n	1901c <get_rx+0x24>
	case H4_EVT:
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   1900a:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   1900e:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   19012:	f7f8 bc0d 	b.w	11830 <bt_buf_get_evt>
	case H4_ACL:
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   19016:	2003      	movs	r0, #3
   19018:	f7f8 bbba 	b.w	11790 <bt_buf_get_rx>
			return bt_buf_get_rx(BT_BUF_ISO_IN, timeout);
		}
	}

	return NULL;
}
   1901c:	2000      	movs	r0, #0
   1901e:	4770      	bx	lr
   19020:	2000c908 	.word	0x2000c908

00019024 <uart_irq_rx_disable.constprop.0>:
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   19024:	4802      	ldr	r0, [pc, #8]	; (19030 <uart_irq_rx_disable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable != NULL) {
   19026:	6883      	ldr	r3, [r0, #8]
   19028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1902a:	b103      	cbz	r3, 1902e <uart_irq_rx_disable.constprop.0+0xa>
		api->irq_rx_disable(dev);
   1902c:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
   1902e:	4770      	bx	lr
   19030:	000360fc 	.word	0x000360fc

00019034 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   19034:	4802      	ldr	r0, [pc, #8]	; (19040 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   19036:	6883      	ldr	r3, [r0, #8]
   19038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1903a:	b103      	cbz	r3, 1903e <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   1903c:	4718      	bx	r3
}
   1903e:	4770      	bx	lr
   19040:	000360fc 	.word	0x000360fc

00019044 <uart_irq_tx_disable.constprop.0>:
	const struct uart_driver_api *api =
   19044:	4802      	ldr	r0, [pc, #8]	; (19050 <uart_irq_tx_disable.constprop.0+0xc>)
	if (api->irq_tx_disable != NULL) {
   19046:	6883      	ldr	r3, [r0, #8]
   19048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1904a:	b103      	cbz	r3, 1904e <uart_irq_tx_disable.constprop.0+0xa>
		api->irq_tx_disable(dev);
   1904c:	4718      	bx	r3
}
   1904e:	4770      	bx	lr
   19050:	000360fc 	.word	0x000360fc

00019054 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   19054:	4601      	mov	r1, r0
   19056:	b508      	push	{r3, lr}
	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   19058:	4804      	ldr	r0, [pc, #16]	; (1906c <h4_send+0x18>)
   1905a:	f7ff f9a3 	bl	183a4 <net_buf_put>
	const struct uart_driver_api *api =
   1905e:	4804      	ldr	r0, [pc, #16]	; (19070 <h4_send+0x1c>)
	if (api->irq_tx_enable != NULL) {
   19060:	6883      	ldr	r3, [r0, #8]
   19062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19064:	b103      	cbz	r3, 19068 <h4_send+0x14>
		api->irq_tx_enable(dev);
   19066:	4798      	blx	r3
	uart_irq_tx_enable(h4_dev);

	return 0;
}
   19068:	2000      	movs	r0, #0
   1906a:	bd08      	pop	{r3, pc}
   1906c:	2000c8ec 	.word	0x2000c8ec
   19070:	000360fc 	.word	0x000360fc

00019074 <uart_fifo_read.constprop.0>:
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   19074:	b410      	push	{r4}
   19076:	4603      	mov	r3, r0
	const struct uart_driver_api *api =
   19078:	4806      	ldr	r0, [pc, #24]	; (19094 <uart_fifo_read.constprop.0+0x20>)
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   1907a:	460a      	mov	r2, r1
	if (api->fifo_read == NULL) {
   1907c:	6881      	ldr	r1, [r0, #8]
   1907e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   19080:	b11c      	cbz	r4, 1908a <uart_fifo_read.constprop.0+0x16>
	return api->fifo_read(dev, rx_data, size);
   19082:	4619      	mov	r1, r3
   19084:	4623      	mov	r3, r4
}
   19086:	bc10      	pop	{r4}
	return api->fifo_read(dev, rx_data, size);
   19088:	4718      	bx	r3
}
   1908a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1908e:	bc10      	pop	{r4}
   19090:	4770      	bx	lr
   19092:	bf00      	nop
   19094:	000360fc 	.word	0x000360fc

00019098 <h4_discard.constprop.0>:
static size_t h4_discard(const struct device *uart, size_t len)
   19098:	b590      	push	{r4, r7, lr}
   1909a:	b08b      	sub	sp, #44	; 0x2c
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1909c:	2821      	cmp	r0, #33	; 0x21
static size_t h4_discard(const struct device *uart, size_t len)
   1909e:	af00      	add	r7, sp, #0
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   190a0:	4601      	mov	r1, r0
   190a2:	bf28      	it	cs
   190a4:	2121      	movcs	r1, #33	; 0x21
   190a6:	1d38      	adds	r0, r7, #4
   190a8:	f7ff ffe4 	bl	19074 <uart_fifo_read.constprop.0>
	if (unlikely(err < 0)) {
   190ac:	2800      	cmp	r0, #0
   190ae:	da0f      	bge.n	190d0 <h4_discard.constprop.0+0x38>
		LOG_ERR("Unable to read from UART (err %d)", err);
   190b0:	466c      	mov	r4, sp
   190b2:	b088      	sub	sp, #32
   190b4:	466a      	mov	r2, sp
   190b6:	4b08      	ldr	r3, [pc, #32]	; (190d8 <h4_discard.constprop.0+0x40>)
   190b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   190bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   190c0:	2303      	movs	r3, #3
   190c2:	4806      	ldr	r0, [pc, #24]	; (190dc <h4_discard.constprop.0+0x44>)
   190c4:	f842 3f10 	str.w	r3, [r2, #16]!
   190c8:	f018 ff6b 	bl	31fa2 <z_log_msg_static_create.constprop.0>
		return 0;
   190cc:	2000      	movs	r0, #0
   190ce:	46a5      	mov	sp, r4
}
   190d0:	372c      	adds	r7, #44	; 0x2c
   190d2:	46bd      	mov	sp, r7
   190d4:	bd90      	pop	{r4, r7, pc}
   190d6:	bf00      	nop
   190d8:	0003b4fe 	.word	0x0003b4fe
   190dc:	00036408 	.word	0x00036408

000190e0 <h4_read_hdr>:
{
   190e0:	b598      	push	{r3, r4, r7, lr}
	int bytes_read = rx.hdr_len - rx.remaining;
   190e2:	4c11      	ldr	r4, [pc, #68]	; (19128 <h4_read_hdr+0x48>)
{
   190e4:	af00      	add	r7, sp, #0
	int bytes_read = rx.hdr_len - rx.remaining;
   190e6:	8c21      	ldrh	r1, [r4, #32]
   190e8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   190ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
	int bytes_read = rx.hdr_len - rx.remaining;
   190f0:	1a5b      	subs	r3, r3, r1
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   190f2:	4418      	add	r0, r3
   190f4:	f7ff ffbe 	bl	19074 <uart_fifo_read.constprop.0>
	if (unlikely(ret < 0)) {
   190f8:	2800      	cmp	r0, #0
   190fa:	da10      	bge.n	1911e <h4_read_hdr+0x3e>
		LOG_ERR("Unable to read from UART (ret %d)", ret);
   190fc:	466c      	mov	r4, sp
   190fe:	b088      	sub	sp, #32
   19100:	466a      	mov	r2, sp
   19102:	4b0a      	ldr	r3, [pc, #40]	; (1912c <h4_read_hdr+0x4c>)
   19104:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19108:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1910c:	2303      	movs	r3, #3
   1910e:	4808      	ldr	r0, [pc, #32]	; (19130 <h4_read_hdr+0x50>)
   19110:	f842 3f10 	str.w	r3, [r2, #16]!
   19114:	f018 ff45 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   19118:	46a5      	mov	sp, r4
}
   1911a:	46bd      	mov	sp, r7
   1911c:	bd98      	pop	{r3, r4, r7, pc}
		rx.remaining -= ret;
   1911e:	8c23      	ldrh	r3, [r4, #32]
   19120:	1a1b      	subs	r3, r3, r0
   19122:	8423      	strh	r3, [r4, #32]
}
   19124:	e7f9      	b.n	1911a <h4_read_hdr+0x3a>
   19126:	bf00      	nop
   19128:	2000c908 	.word	0x2000c908
   1912c:	0003b520 	.word	0x0003b520
   19130:	00036408 	.word	0x00036408

00019134 <bt_uart_init>:
	.setup		= h4_setup
#endif
};

static int bt_uart_init(void)
{
   19134:	b508      	push	{r3, lr}
   19136:	4806      	ldr	r0, [pc, #24]	; (19150 <bt_uart_init+0x1c>)
   19138:	f01b fcef 	bl	34b1a <z_device_is_ready>

	if (!device_is_ready(h4_dev)) {
   1913c:	b120      	cbz	r0, 19148 <bt_uart_init+0x14>
		return -ENODEV;
	}

	bt_hci_driver_register(&drv);
   1913e:	4805      	ldr	r0, [pc, #20]	; (19154 <bt_uart_init+0x20>)
   19140:	f7f9 fd6a 	bl	12c18 <bt_hci_driver_register>

	return 0;
   19144:	2000      	movs	r0, #0
}
   19146:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19148:	f06f 0012 	mvn.w	r0, #18
   1914c:	e7fb      	b.n	19146 <bt_uart_init+0x12>
   1914e:	bf00      	nop
   19150:	000360fc 	.word	0x000360fc
   19154:	00036e48 	.word	0x00036e48

00019158 <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   19158:	4903      	ldr	r1, [pc, #12]	; (19168 <copy_hdr+0x10>)
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1915a:	300c      	adds	r0, #12
   1915c:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   19160:	3128      	adds	r1, #40	; 0x28
   19162:	f018 b84c 	b.w	311fe <net_buf_simple_add_mem>
   19166:	bf00      	nop
   19168:	2000c908 	.word	0x2000c908

0001916c <rx_thread>:
{
   1916c:	b570      	push	{r4, r5, r6, lr}
		if (rx.have_hdr && !rx.buf) {
   1916e:	4c21      	ldr	r4, [pc, #132]	; (191f4 <rx_thread+0x88>)
{
   19170:	b086      	sub	sp, #24
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   19172:	1d26      	adds	r6, r4, #4
		if (rx.have_hdr && !rx.buf) {
   19174:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   19178:	b1e3      	cbz	r3, 191b4 <rx_thread+0x48>
   1917a:	6823      	ldr	r3, [r4, #0]
   1917c:	b9d3      	cbnz	r3, 191b4 <rx_thread+0x48>
			rx.buf = get_rx(K_FOREVER);
   1917e:	f04f 31ff 	mov.w	r1, #4294967295
   19182:	f04f 30ff 	mov.w	r0, #4294967295
   19186:	f7ff ff37 	bl	18ff8 <get_rx>
   1918a:	6020      	str	r0, [r4, #0]
	return net_buf_simple_tailroom(&buf->b);
   1918c:	300c      	adds	r0, #12
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1918e:	8c25      	ldrh	r5, [r4, #32]
   19190:	f018 f82d 	bl	311ee <net_buf_simple_tailroom>
   19194:	4285      	cmp	r5, r0
   19196:	d929      	bls.n	191ec <rx_thread+0x80>
				LOG_ERR("Not enough space in buffer");
   19198:	4b17      	ldr	r3, [pc, #92]	; (191f8 <rx_thread+0x8c>)
   1919a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1919e:	9305      	str	r3, [sp, #20]
   191a0:	2302      	movs	r3, #2
   191a2:	4816      	ldr	r0, [pc, #88]	; (191fc <rx_thread+0x90>)
   191a4:	aa04      	add	r2, sp, #16
   191a6:	9304      	str	r3, [sp, #16]
   191a8:	f018 fefb 	bl	31fa2 <z_log_msg_static_create.constprop.0>
				rx.discard = rx.remaining;
   191ac:	8c23      	ldrh	r3, [r4, #32]
   191ae:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   191b0:	f7ff ff1a 	bl	18fe8 <reset_rx>
	z_impl_uart_irq_rx_enable(dev);
   191b4:	f7ff ff3e 	bl	19034 <z_impl_uart_irq_rx_enable.constprop.0>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   191b8:	f04f 32ff 	mov.w	r2, #4294967295
   191bc:	f04f 33ff 	mov.w	r3, #4294967295
   191c0:	4630      	mov	r0, r6
   191c2:	f017 fff8 	bl	311b6 <net_buf_get>
   191c6:	4605      	mov	r5, r0
   191c8:	f7ff ff34 	bl	19034 <z_impl_uart_irq_rx_enable.constprop.0>
			bt_recv(buf);
   191cc:	4628      	mov	r0, r5
   191ce:	f7f9 fc53 	bl	12a78 <bt_recv>
	z_impl_k_yield();
   191d2:	f011 fad1 	bl	2a778 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   191d6:	f7ff ff25 	bl	19024 <uart_irq_rx_disable.constprop.0>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   191da:	2200      	movs	r2, #0
   191dc:	2300      	movs	r3, #0
   191de:	4630      	mov	r0, r6
   191e0:	f017 ffe9 	bl	311b6 <net_buf_get>
		} while (buf);
   191e4:	4605      	mov	r5, r0
   191e6:	2800      	cmp	r0, #0
   191e8:	d1ee      	bne.n	191c8 <rx_thread+0x5c>
   191ea:	e7c3      	b.n	19174 <rx_thread+0x8>
				copy_hdr(rx.buf);
   191ec:	6820      	ldr	r0, [r4, #0]
   191ee:	f7ff ffb3 	bl	19158 <copy_hdr>
   191f2:	e7df      	b.n	191b4 <rx_thread+0x48>
   191f4:	2000c908 	.word	0x2000c908
   191f8:	0003b542 	.word	0x0003b542
   191fc:	00036408 	.word	0x00036408

00019200 <bt_uart_isr>:
{
   19200:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   19204:	b089      	sub	sp, #36	; 0x24
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   19206:	4ea1      	ldr	r6, [pc, #644]	; (1948c <bt_uart_isr+0x28c>)
   19208:	af00      	add	r7, sp, #0
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   1920a:	68b3      	ldr	r3, [r6, #8]
	if (!tx.buf) {
   1920c:	4da0      	ldr	r5, [pc, #640]	; (19490 <bt_uart_isr+0x290>)
   1920e:	607b      	str	r3, [r7, #4]
   19210:	687b      	ldr	r3, [r7, #4]
   19212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   19214:	2b00      	cmp	r3, #0
   19216:	f040 81db 	bne.w	195d0 <bt_uart_isr+0x3d0>
	const struct uart_driver_api *api =
   1921a:	68b4      	ldr	r4, [r6, #8]
	if (api->irq_is_pending == NULL) {
   1921c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1921e:	2b00      	cmp	r3, #0
   19220:	f040 81df 	bne.w	195e2 <bt_uart_isr+0x3e2>
	if (api->irq_tx_ready == NULL) {
   19224:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   19226:	b9b3      	cbnz	r3, 19256 <bt_uart_isr+0x56>
   19228:	686b      	ldr	r3, [r5, #4]
   1922a:	bb33      	cbnz	r3, 1927a <bt_uart_isr+0x7a>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1922c:	2200      	movs	r2, #0
   1922e:	2300      	movs	r3, #0
   19230:	4898      	ldr	r0, [pc, #608]	; (19494 <bt_uart_isr+0x294>)
   19232:	f017 ffc0 	bl	311b6 <net_buf_get>
   19236:	6068      	str	r0, [r5, #4]
		if (!tx.buf) {
   19238:	b9f8      	cbnz	r0, 1927a <bt_uart_isr+0x7a>
			LOG_ERR("TX interrupt but no pending buffer!");
   1923a:	4b97      	ldr	r3, [pc, #604]	; (19498 <bt_uart_isr+0x298>)
   1923c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19240:	61fb      	str	r3, [r7, #28]
   19242:	2302      	movs	r3, #2
   19244:	4895      	ldr	r0, [pc, #596]	; (1949c <bt_uart_isr+0x29c>)
   19246:	61bb      	str	r3, [r7, #24]
   19248:	f107 0218 	add.w	r2, r7, #24
   1924c:	f018 fea9 	bl	31fa2 <z_log_msg_static_create.constprop.0>
		uart_irq_tx_disable(h4_dev);
   19250:	f7ff fef8 	bl	19044 <uart_irq_tx_disable.constprop.0>
   19254:	e003      	b.n	1925e <bt_uart_isr+0x5e>
	return api->irq_tx_ready(dev);
   19256:	4630      	mov	r0, r6
   19258:	4798      	blx	r3
		if (uart_irq_tx_ready(h4_dev)) {
   1925a:	2800      	cmp	r0, #0
   1925c:	d1e4      	bne.n	19228 <bt_uart_isr+0x28>
	if (api->irq_rx_ready == NULL) {
   1925e:	68b3      	ldr	r3, [r6, #8]
   19260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19262:	2b00      	cmp	r3, #0
   19264:	d167      	bne.n	19336 <bt_uart_isr+0x136>
	if (rx.discard) {
   19266:	4c8e      	ldr	r4, [pc, #568]	; (194a0 <bt_uart_isr+0x2a0>)
   19268:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1926a:	2800      	cmp	r0, #0
   1926c:	d069      	beq.n	19342 <bt_uart_isr+0x142>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   1926e:	f7ff ff13 	bl	19098 <h4_discard.constprop.0>
   19272:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   19274:	1a1b      	subs	r3, r3, r0
   19276:	8463      	strh	r3, [r4, #34]	; 0x22
		return;
   19278:	e7ca      	b.n	19210 <bt_uart_isr+0x10>
	if (!tx.type) {
   1927a:	782a      	ldrb	r2, [r5, #0]
		switch (bt_buf_get_type(tx.buf)) {
   1927c:	686b      	ldr	r3, [r5, #4]
	if (!tx.type) {
   1927e:	2a00      	cmp	r2, #0
   19280:	d134      	bne.n	192ec <bt_uart_isr+0xec>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19282:	7e1b      	ldrb	r3, [r3, #24]
		switch (bt_buf_get_type(tx.buf)) {
   19284:	b1d3      	cbz	r3, 192bc <bt_uart_isr+0xbc>
   19286:	2b02      	cmp	r3, #2
   19288:	d019      	beq.n	192be <bt_uart_isr+0xbe>
			LOG_ERR("Unknown buffer type");
   1928a:	4b86      	ldr	r3, [pc, #536]	; (194a4 <bt_uart_isr+0x2a4>)
   1928c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19290:	61fb      	str	r3, [r7, #28]
   19292:	2302      	movs	r3, #2
   19294:	4881      	ldr	r0, [pc, #516]	; (1949c <bt_uart_isr+0x29c>)
   19296:	61bb      	str	r3, [r7, #24]
   19298:	f107 0218 	add.w	r2, r7, #24
   1929c:	f018 fe81 	bl	31fa2 <z_log_msg_static_create.constprop.0>
	tx.type = H4_NONE;
   192a0:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   192a2:	6868      	ldr	r0, [r5, #4]
	tx.type = H4_NONE;
   192a4:	702b      	strb	r3, [r5, #0]
	net_buf_unref(tx.buf);
   192a6:	f7ff f8a3 	bl	183f0 <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   192aa:	2200      	movs	r2, #0
   192ac:	2300      	movs	r3, #0
   192ae:	4879      	ldr	r0, [pc, #484]	; (19494 <bt_uart_isr+0x294>)
   192b0:	f017 ff81 	bl	311b6 <net_buf_get>
   192b4:	6068      	str	r0, [r5, #4]
	if (!tx.buf) {
   192b6:	2800      	cmp	r0, #0
   192b8:	d1d1      	bne.n	1925e <bt_uart_isr+0x5e>
   192ba:	e7c9      	b.n	19250 <bt_uart_isr+0x50>
		switch (bt_buf_get_type(tx.buf)) {
   192bc:	2301      	movs	r3, #1
			tx.type = H4_ACL;
   192be:	702b      	strb	r3, [r5, #0]
	if (api->fifo_fill == NULL) {
   192c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   192c2:	b96b      	cbnz	r3, 192e0 <bt_uart_isr+0xe0>
			LOG_WRN("Unable to send H:4 type");
   192c4:	4b78      	ldr	r3, [pc, #480]	; (194a8 <bt_uart_isr+0x2a8>)
   192c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   192ca:	61fb      	str	r3, [r7, #28]
   192cc:	2302      	movs	r3, #2
   192ce:	4873      	ldr	r0, [pc, #460]	; (1949c <bt_uart_isr+0x29c>)
   192d0:	61bb      	str	r3, [r7, #24]
   192d2:	f107 0218 	add.w	r2, r7, #24
   192d6:	f018 fe64 	bl	31fa2 <z_log_msg_static_create.constprop.0>
			tx.type = H4_NONE;
   192da:	2300      	movs	r3, #0
   192dc:	702b      	strb	r3, [r5, #0]
			return;
   192de:	e7be      	b.n	1925e <bt_uart_isr+0x5e>
	return api->fifo_fill(dev, tx_data, size);
   192e0:	2201      	movs	r2, #1
   192e2:	4629      	mov	r1, r5
   192e4:	4630      	mov	r0, r6
   192e6:	4798      	blx	r3
		if (bytes != 1) {
   192e8:	2801      	cmp	r0, #1
   192ea:	d1eb      	bne.n	192c4 <bt_uart_isr+0xc4>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   192ec:	686b      	ldr	r3, [r5, #4]
   192ee:	68d9      	ldr	r1, [r3, #12]
   192f0:	8a1a      	ldrh	r2, [r3, #16]
	if (api->fifo_fill == NULL) {
   192f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   192f4:	b1bb      	cbz	r3, 19326 <bt_uart_isr+0x126>
	return api->fifo_fill(dev, tx_data, size);
   192f6:	4630      	mov	r0, r6
   192f8:	4798      	blx	r3
	if (unlikely(bytes < 0)) {
   192fa:	1e01      	subs	r1, r0, #0
   192fc:	da16      	bge.n	1932c <bt_uart_isr+0x12c>
		LOG_ERR("Unable to write to UART (err %d)", bytes);
   192fe:	466c      	mov	r4, sp
   19300:	b088      	sub	sp, #32
   19302:	466a      	mov	r2, sp
   19304:	4b69      	ldr	r3, [pc, #420]	; (194ac <bt_uart_isr+0x2ac>)
   19306:	4865      	ldr	r0, [pc, #404]	; (1949c <bt_uart_isr+0x29c>)
   19308:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1930c:	2303      	movs	r3, #3
   1930e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19312:	f842 3f10 	str.w	r3, [r2, #16]!
   19316:	f018 fe44 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   1931a:	46a5      	mov	sp, r4
	if (tx.buf->len) {
   1931c:	686b      	ldr	r3, [r5, #4]
   1931e:	8a1b      	ldrh	r3, [r3, #16]
   19320:	2b00      	cmp	r3, #0
   19322:	d0bd      	beq.n	192a0 <bt_uart_isr+0xa0>
   19324:	e79b      	b.n	1925e <bt_uart_isr+0x5e>
		return -ENOSYS;
   19326:	f06f 0157 	mvn.w	r1, #87	; 0x57
   1932a:	e7e8      	b.n	192fe <bt_uart_isr+0xfe>
	return net_buf_simple_pull(&buf->b, len);
   1932c:	6868      	ldr	r0, [r5, #4]
   1932e:	300c      	adds	r0, #12
   19330:	f7ff f966 	bl	18600 <net_buf_simple_pull>
   19334:	e7f2      	b.n	1931c <bt_uart_isr+0x11c>
	return api->irq_rx_ready(dev);
   19336:	4630      	mov	r0, r6
   19338:	4798      	blx	r3
		if (uart_irq_rx_ready(h4_dev)) {
   1933a:	2800      	cmp	r0, #0
   1933c:	f43f af68 	beq.w	19210 <bt_uart_isr+0x10>
   19340:	e791      	b.n	19266 <bt_uart_isr+0x66>
	if (rx.have_hdr) {
   19342:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
   19346:	f1b9 0f00 	cmp.w	r9, #0
   1934a:	f000 80bb 	beq.w	194c4 <bt_uart_isr+0x2c4>
	if (!rx.buf) {
   1934e:	6823      	ldr	r3, [r4, #0]
   19350:	2b00      	cmp	r3, #0
   19352:	d142      	bne.n	193da <bt_uart_isr+0x1da>
		rx.buf = get_rx(K_NO_WAIT);
   19354:	2000      	movs	r0, #0
   19356:	2100      	movs	r1, #0
   19358:	f7ff fe4e 	bl	18ff8 <get_rx>
   1935c:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   1935e:	bb30      	cbnz	r0, 193ae <bt_uart_isr+0x1ae>
			if (rx.discardable) {
   19360:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   19364:	b1ab      	cbz	r3, 19392 <bt_uart_isr+0x192>
				LOG_WRN("Discarding event 0x%02x", rx.evt.evt);
   19366:	46e9      	mov	r9, sp
   19368:	b088      	sub	sp, #32
   1936a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1936e:	466a      	mov	r2, sp
   19370:	494f      	ldr	r1, [pc, #316]	; (194b0 <bt_uart_isr+0x2b0>)
   19372:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19376:	2303      	movs	r3, #3
   19378:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1937c:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Not enough space in buffer %u/%zu", rx.remaining, buf_tailroom);
   19380:	4846      	ldr	r0, [pc, #280]	; (1949c <bt_uart_isr+0x29c>)
   19382:	f018 fe0e 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   19386:	46cd      	mov	sp, r9
			rx.discard = rx.remaining;
   19388:	8c23      	ldrh	r3, [r4, #32]
   1938a:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   1938c:	f7ff fe2c 	bl	18fe8 <reset_rx>
   19390:	e73e      	b.n	19210 <bt_uart_isr+0x10>
			LOG_WRN("Failed to allocate, deferring to rx_thread");
   19392:	4b48      	ldr	r3, [pc, #288]	; (194b4 <bt_uart_isr+0x2b4>)
   19394:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19398:	61fb      	str	r3, [r7, #28]
   1939a:	2302      	movs	r3, #2
   1939c:	483f      	ldr	r0, [pc, #252]	; (1949c <bt_uart_isr+0x29c>)
   1939e:	61bb      	str	r3, [r7, #24]
   193a0:	f107 0218 	add.w	r2, r7, #24
   193a4:	f018 fdfd 	bl	31fa2 <z_log_msg_static_create.constprop.0>
			uart_irq_rx_disable(h4_dev);
   193a8:	f7ff fe3c 	bl	19024 <uart_irq_rx_disable.constprop.0>
			return;
   193ac:	e730      	b.n	19210 <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   193ae:	300c      	adds	r0, #12
   193b0:	f017 ff1d 	bl	311ee <net_buf_simple_tailroom>
		if (buf_tailroom < rx.remaining) {
   193b4:	8c23      	ldrh	r3, [r4, #32]
   193b6:	4298      	cmp	r0, r3
   193b8:	d20c      	bcs.n	193d4 <bt_uart_isr+0x1d4>
			LOG_ERR("Not enough space in buffer %u/%zu", rx.remaining, buf_tailroom);
   193ba:	46e9      	mov	r9, sp
   193bc:	b088      	sub	sp, #32
   193be:	466a      	mov	r2, sp
   193c0:	493d      	ldr	r1, [pc, #244]	; (194b8 <bt_uart_isr+0x2b8>)
   193c2:	61d0      	str	r0, [r2, #28]
   193c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   193c8:	2304      	movs	r3, #4
   193ca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   193ce:	f842 3f10 	str.w	r3, [r2, #16]!
   193d2:	e7d5      	b.n	19380 <bt_uart_isr+0x180>
		copy_hdr(rx.buf);
   193d4:	6820      	ldr	r0, [r4, #0]
   193d6:	f7ff febf 	bl	19158 <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   193da:	6823      	ldr	r3, [r4, #0]
   193dc:	8c21      	ldrh	r1, [r4, #32]
	return buf->data + buf->len;
   193de:	8a1a      	ldrh	r2, [r3, #16]
   193e0:	68d8      	ldr	r0, [r3, #12]
   193e2:	4410      	add	r0, r2
   193e4:	f7ff fe46 	bl	19074 <uart_fifo_read.constprop.0>
	if (unlikely(read < 0)) {
   193e8:	f1b0 0900 	subs.w	r9, r0, #0
   193ec:	da0f      	bge.n	1940e <bt_uart_isr+0x20e>
		LOG_ERR("Failed to read UART (err %d)", read);
   193ee:	466c      	mov	r4, sp
   193f0:	b088      	sub	sp, #32
   193f2:	466a      	mov	r2, sp
   193f4:	4b31      	ldr	r3, [pc, #196]	; (194bc <bt_uart_isr+0x2bc>)
   193f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193fa:	e9c2 3905 	strd	r3, r9, [r2, #20]
   193fe:	2303      	movs	r3, #3
   19400:	4826      	ldr	r0, [pc, #152]	; (1949c <bt_uart_isr+0x29c>)
   19402:	f842 3f10 	str.w	r3, [r2, #16]!
   19406:	f018 fdcc 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   1940a:	46a5      	mov	sp, r4
		return;
   1940c:	e700      	b.n	19210 <bt_uart_isr+0x10>
	return net_buf_simple_add(&buf->b, len);
   1940e:	6820      	ldr	r0, [r4, #0]
   19410:	4649      	mov	r1, r9
   19412:	300c      	adds	r0, #12
   19414:	f7ff f930 	bl	18678 <net_buf_simple_add>
	rx.remaining -= read;
   19418:	8c23      	ldrh	r3, [r4, #32]
   1941a:	eba3 0109 	sub.w	r1, r3, r9
   1941e:	b289      	uxth	r1, r1
   19420:	8421      	strh	r1, [r4, #32]
	if (rx.remaining) {
   19422:	2900      	cmp	r1, #0
   19424:	f47f aef4 	bne.w	19210 <bt_uart_isr+0x10>
	if (rx.type == H4_EVT) {
   19428:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   1942c:	f8d4 9000 	ldr.w	r9, [r4]
	if (rx.type == H4_EVT) {
   19430:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   19432:	6021      	str	r1, [r4, #0]
	if (rx.type == H4_EVT) {
   19434:	d127      	bne.n	19486 <bt_uart_isr+0x286>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   19436:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1943a:	2b0f      	cmp	r3, #15
   1943c:	d809      	bhi.n	19452 <bt_uart_isr+0x252>
   1943e:	2b0d      	cmp	r3, #13
   19440:	d80b      	bhi.n	1945a <bt_uart_isr+0x25a>
   19442:	2b05      	cmp	r3, #5
   19444:	d012      	beq.n	1946c <bt_uart_isr+0x26c>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19446:	2301      	movs	r3, #1
   19448:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1944c:	f7ff fdcc 	bl	18fe8 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   19450:	e014      	b.n	1947c <bt_uart_isr+0x27c>
   19452:	2b13      	cmp	r3, #19
   19454:	d001      	beq.n	1945a <bt_uart_isr+0x25a>
   19456:	2b1a      	cmp	r3, #26
   19458:	d1f5      	bne.n	19446 <bt_uart_isr+0x246>
   1945a:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1945c:	4648      	mov	r0, r9
   1945e:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   19462:	f7ff fdc1 	bl	18fe8 <reset_rx>
		bt_recv_prio(buf);
   19466:	f7f9 fbb9 	bl	12bdc <bt_recv_prio>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1946a:	e6d1      	b.n	19210 <bt_uart_isr+0x10>
   1946c:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1946e:	4648      	mov	r0, r9
   19470:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   19474:	f7ff fdb8 	bl	18fe8 <reset_rx>
		bt_recv_prio(buf);
   19478:	f7f9 fbb0 	bl	12bdc <bt_recv_prio>
		net_buf_put(&rx.fifo, buf);
   1947c:	4649      	mov	r1, r9
   1947e:	4810      	ldr	r0, [pc, #64]	; (194c0 <bt_uart_isr+0x2c0>)
   19480:	f7fe ff90 	bl	183a4 <net_buf_put>
   19484:	e6c4      	b.n	19210 <bt_uart_isr+0x10>
   19486:	2303      	movs	r3, #3
   19488:	e7de      	b.n	19448 <bt_uart_isr+0x248>
   1948a:	bf00      	nop
   1948c:	000360fc 	.word	0x000360fc
   19490:	2000c8e4 	.word	0x2000c8e4
   19494:	2000c8ec 	.word	0x2000c8ec
   19498:	0003b55d 	.word	0x0003b55d
   1949c:	00036408 	.word	0x00036408
   194a0:	2000c908 	.word	0x2000c908
   194a4:	0003b581 	.word	0x0003b581
   194a8:	0003b595 	.word	0x0003b595
   194ac:	0003b5ad 	.word	0x0003b5ad
   194b0:	0003b5ce 	.word	0x0003b5ce
   194b4:	0003b5e6 	.word	0x0003b5e6
   194b8:	0003b611 	.word	0x0003b611
   194bc:	0003b633 	.word	0x0003b633
   194c0:	2000c90c 	.word	0x2000c90c
	switch (rx.type) {
   194c4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   194c8:	2b02      	cmp	r3, #2
   194ca:	d071      	beq.n	195b0 <bt_uart_isr+0x3b0>
   194cc:	2b04      	cmp	r3, #4
   194ce:	d031      	beq.n	19534 <bt_uart_isr+0x334>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   194d0:	2101      	movs	r1, #1
   194d2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   194d6:	f7ff fdcd 	bl	19074 <uart_fifo_read.constprop.0>
   194da:	2801      	cmp	r0, #1
   194dc:	d00d      	beq.n	194fa <bt_uart_isr+0x2fa>
		LOG_WRN("Unable to read H:4 packet type");
   194de:	4b44      	ldr	r3, [pc, #272]	; (195f0 <bt_uart_isr+0x3f0>)
   194e0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   194e4:	61fb      	str	r3, [r7, #28]
   194e6:	2302      	movs	r3, #2
   194e8:	4842      	ldr	r0, [pc, #264]	; (195f4 <bt_uart_isr+0x3f4>)
   194ea:	61bb      	str	r3, [r7, #24]
   194ec:	f107 0218 	add.w	r2, r7, #24
   194f0:	f018 fd57 	bl	31fa2 <z_log_msg_static_create.constprop.0>
		rx.type = H4_NONE;
   194f4:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
   194f8:	e68a      	b.n	19210 <bt_uart_isr+0x10>
	switch (rx.type) {
   194fa:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   194fe:	2b02      	cmp	r3, #2
   19500:	d006      	beq.n	19510 <bt_uart_isr+0x310>
   19502:	2b04      	cmp	r3, #4
   19504:	d106      	bne.n	19514 <bt_uart_isr+0x314>
		rx.remaining = sizeof(rx.evt);
   19506:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   19508:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   1950a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   1950e:	e67f      	b.n	19210 <bt_uart_isr+0x10>
		rx.remaining = sizeof(rx.acl);
   19510:	2304      	movs	r3, #4
   19512:	e7f9      	b.n	19508 <bt_uart_isr+0x308>
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   19514:	46ea      	mov	sl, sp
   19516:	b088      	sub	sp, #32
   19518:	466a      	mov	r2, sp
   1951a:	4937      	ldr	r1, [pc, #220]	; (195f8 <bt_uart_isr+0x3f8>)
   1951c:	4835      	ldr	r0, [pc, #212]	; (195f4 <bt_uart_isr+0x3f4>)
	switch (rx.type) {
   1951e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   19522:	2303      	movs	r3, #3
   19524:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19528:	f842 3f10 	str.w	r3, [r2, #16]!
   1952c:	f018 fd39 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   19530:	46d5      	mov	sp, sl
   19532:	e7df      	b.n	194f4 <bt_uart_isr+0x2f4>
	h4_read_hdr();
   19534:	f7ff fdd4 	bl	190e0 <h4_read_hdr>
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   19538:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1953c:	2b02      	cmp	r3, #2
   1953e:	d10b      	bne.n	19558 <bt_uart_isr+0x358>
   19540:	8c23      	ldrh	r3, [r4, #32]
   19542:	2b01      	cmp	r3, #1
   19544:	d808      	bhi.n	19558 <bt_uart_isr+0x358>
		switch (rx.evt.evt) {
   19546:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1954a:	2a3e      	cmp	r2, #62	; 0x3e
			rx.remaining++;
   1954c:	bf01      	itttt	eq
   1954e:	3301      	addeq	r3, #1
   19550:	8423      	strheq	r3, [r4, #32]
			rx.hdr_len++;
   19552:	2303      	moveq	r3, #3
   19554:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   19558:	8c23      	ldrh	r3, [r4, #32]
   1955a:	bb7b      	cbnz	r3, 195bc <bt_uart_isr+0x3bc>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   1955c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1955e:	4a27      	ldr	r2, [pc, #156]	; (195fc <bt_uart_isr+0x3fc>)
   19560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   19564:	4293      	cmp	r3, r2
			rx.discardable = true;
   19566:	bf04      	itt	eq
   19568:	2301      	moveq	r3, #1
   1956a:	f884 3025 	strbeq.w	r3, [r4, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   1956e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19572:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   19576:	3302      	adds	r3, #2
   19578:	1a9b      	subs	r3, r3, r2
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1957a:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   1957c:	2301      	movs	r3, #1
   1957e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   19582:	6820      	ldr	r0, [r4, #0]
   19584:	2800      	cmp	r0, #0
   19586:	f43f ae43 	beq.w	19210 <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   1958a:	300c      	adds	r0, #12
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1958c:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   19590:	f017 fe2d 	bl	311ee <net_buf_simple_tailroom>
   19594:	4581      	cmp	r9, r0
   19596:	d917      	bls.n	195c8 <bt_uart_isr+0x3c8>
			LOG_ERR("Not enough space in buffer");
   19598:	4b19      	ldr	r3, [pc, #100]	; (19600 <bt_uart_isr+0x400>)
   1959a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1959e:	61fb      	str	r3, [r7, #28]
   195a0:	2302      	movs	r3, #2
   195a2:	4814      	ldr	r0, [pc, #80]	; (195f4 <bt_uart_isr+0x3f4>)
   195a4:	61bb      	str	r3, [r7, #24]
   195a6:	f107 0218 	add.w	r2, r7, #24
   195aa:	f018 fcfa 	bl	31fa2 <z_log_msg_static_create.constprop.0>
   195ae:	e6eb      	b.n	19388 <bt_uart_isr+0x188>
	h4_read_hdr();
   195b0:	f7ff fd96 	bl	190e0 <h4_read_hdr>
	if (!rx.remaining) {
   195b4:	8c23      	ldrh	r3, [r4, #32]
   195b6:	b90b      	cbnz	r3, 195bc <bt_uart_isr+0x3bc>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   195b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   195ba:	e7de      	b.n	1957a <bt_uart_isr+0x37a>
	if (rx.have_hdr && rx.buf) {
   195bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   195c0:	2b00      	cmp	r3, #0
   195c2:	f43f ae25 	beq.w	19210 <bt_uart_isr+0x10>
   195c6:	e7dc      	b.n	19582 <bt_uart_isr+0x382>
			copy_hdr(rx.buf);
   195c8:	6820      	ldr	r0, [r4, #0]
   195ca:	f7ff fdc5 	bl	19158 <copy_hdr>
   195ce:	e61f      	b.n	19210 <bt_uart_isr+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   195d0:	4630      	mov	r0, r6
   195d2:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   195d4:	2800      	cmp	r0, #0
   195d6:	f47f ae20 	bne.w	1921a <bt_uart_isr+0x1a>
}
   195da:	3724      	adds	r7, #36	; 0x24
   195dc:	46bd      	mov	sp, r7
   195de:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
	return api->irq_is_pending(dev);
   195e2:	4630      	mov	r0, r6
   195e4:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   195e6:	2800      	cmp	r0, #0
   195e8:	f47f ae1c 	bne.w	19224 <bt_uart_isr+0x24>
   195ec:	e7f5      	b.n	195da <bt_uart_isr+0x3da>
   195ee:	bf00      	nop
   195f0:	0003b650 	.word	0x0003b650
   195f4:	00036408 	.word	0x00036408
   195f8:	0003b66f 	.word	0x0003b66f
   195fc:	0002003e 	.word	0x0002003e
   19600:	0003b542 	.word	0x0003b542

00019604 <h4_open>:
{
   19604:	b510      	push	{r4, lr}
	ret = bt_hci_transport_setup(h4_dev);
   19606:	4c17      	ldr	r4, [pc, #92]	; (19664 <h4_open+0x60>)
{
   19608:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   1960a:	f7ff fd0b 	bl	19024 <uart_irq_rx_disable.constprop.0>
	uart_irq_tx_disable(h4_dev);
   1960e:	f7ff fd19 	bl	19044 <uart_irq_tx_disable.constprop.0>
	ret = bt_hci_transport_setup(h4_dev);
   19612:	4620      	mov	r0, r4
   19614:	f7f7 ff38 	bl	11488 <bt_hci_transport_setup>
	if (ret < 0) {
   19618:	2800      	cmp	r0, #0
   1961a:	db20      	blt.n	1965e <h4_open+0x5a>
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1961c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1961e:	b12b      	cbz	r3, 1962c <h4_open+0x28>
   19620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   19622:	b11b      	cbz	r3, 1962c <h4_open+0x28>
		api->irq_callback_set(dev, cb, user_data);
   19624:	2200      	movs	r2, #0
   19626:	4620      	mov	r0, r4
   19628:	490f      	ldr	r1, [pc, #60]	; (19668 <h4_open+0x64>)
   1962a:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1962c:	2200      	movs	r2, #0
   1962e:	2300      	movs	r3, #0
   19630:	2400      	movs	r4, #0
   19632:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19636:	f06f 0307 	mvn.w	r3, #7
   1963a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1963e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19642:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19646:	4b09      	ldr	r3, [pc, #36]	; (1966c <h4_open+0x68>)
   19648:	4909      	ldr	r1, [pc, #36]	; (19670 <h4_open+0x6c>)
   1964a:	9400      	str	r4, [sp, #0]
   1964c:	4809      	ldr	r0, [pc, #36]	; (19674 <h4_open+0x70>)
   1964e:	f00e fff9 	bl	28644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19652:	4909      	ldr	r1, [pc, #36]	; (19678 <h4_open+0x74>)
   19654:	f01b fa9e 	bl	34b94 <z_impl_k_thread_name_set>
	return 0;
   19658:	4620      	mov	r0, r4
}
   1965a:	b008      	add	sp, #32
   1965c:	bd10      	pop	{r4, pc}
		return -EIO;
   1965e:	f06f 0004 	mvn.w	r0, #4
   19662:	e7fa      	b.n	1965a <h4_open+0x56>
   19664:	000360fc 	.word	0x000360fc
   19668:	00019201 	.word	0x00019201
   1966c:	0001916d 	.word	0x0001916d
   19670:	20013830 	.word	0x20013830
   19674:	2000dad8 	.word	0x2000dad8
   19678:	0003b687 	.word	0x0003b687

0001967c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1967c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1967e:	2340      	movs	r3, #64	; 0x40
{
   19680:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19682:	490a      	ldr	r1, [pc, #40]	; (196ac <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19684:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   19686:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19688:	1149      	asrs	r1, r1, #5
{
   1968a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1968c:	4623      	mov	r3, r4
   1968e:	4a08      	ldr	r2, [pc, #32]	; (196b0 <onoff_start+0x34>)
   19690:	4808      	ldr	r0, [pc, #32]	; (196b4 <onoff_start+0x38>)
   19692:	f018 fc9c 	bl	31fce <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   19696:	1e01      	subs	r1, r0, #0
   19698:	da05      	bge.n	196a6 <onoff_start+0x2a>
		notify(mgr, err);
   1969a:	4628      	mov	r0, r5
   1969c:	4623      	mov	r3, r4
	}
}
   1969e:	b003      	add	sp, #12
   196a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   196a4:	4718      	bx	r3
}
   196a6:	b003      	add	sp, #12
   196a8:	bd30      	pop	{r4, r5, pc}
   196aa:	bf00      	nop
   196ac:	2000fcc8 	.word	0x2000fcc8
   196b0:	00032039 	.word	0x00032039
   196b4:	00036054 	.word	0x00036054

000196b8 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   196b8:	b2c9      	uxtb	r1, r1
   196ba:	2901      	cmp	r1, #1
{
   196bc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   196be:	d909      	bls.n	196d4 <get_status+0x1c>
   196c0:	4908      	ldr	r1, [pc, #32]	; (196e4 <get_status+0x2c>)
   196c2:	4809      	ldr	r0, [pc, #36]	; (196e8 <get_status+0x30>)
   196c4:	237a      	movs	r3, #122	; 0x7a
   196c6:	4a09      	ldr	r2, [pc, #36]	; (196ec <get_status+0x34>)
   196c8:	f015 f944 	bl	2e954 <assert_print>
   196cc:	217a      	movs	r1, #122	; 0x7a
   196ce:	4807      	ldr	r0, [pc, #28]	; (196ec <get_status+0x34>)
   196d0:	f015 f939 	bl	2e946 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   196d4:	220c      	movs	r2, #12
   196d6:	6903      	ldr	r3, [r0, #16]
   196d8:	fb01 3302 	mla	r3, r1, r2, r3
   196dc:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   196de:	f000 0007 	and.w	r0, r0, #7
   196e2:	bd08      	pop	{r3, pc}
   196e4:	0003b6df 	.word	0x0003b6df
   196e8:	000381c3 	.word	0x000381c3
   196ec:	0003b6a2 	.word	0x0003b6a2

000196f0 <stop>:
{
   196f0:	b570      	push	{r4, r5, r6, lr}
   196f2:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   196f4:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   196f6:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   196f8:	d90b      	bls.n	19712 <stop+0x22>
   196fa:	4919      	ldr	r1, [pc, #100]	; (19760 <stop+0x70>)
   196fc:	4819      	ldr	r0, [pc, #100]	; (19764 <stop+0x74>)
   196fe:	f240 135d 	movw	r3, #349	; 0x15d
   19702:	4a19      	ldr	r2, [pc, #100]	; (19768 <stop+0x78>)
   19704:	f015 f926 	bl	2e954 <assert_print>
   19708:	f240 115d 	movw	r1, #349	; 0x15d
   1970c:	4816      	ldr	r0, [pc, #88]	; (19768 <stop+0x78>)
   1970e:	f015 f91a 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   19712:	f04f 0420 	mov.w	r4, #32
   19716:	f3ef 8511 	mrs	r5, BASEPRI
   1971a:	f384 8812 	msr	BASEPRI_MAX, r4
   1971e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19722:	260c      	movs	r6, #12
   19724:	fb06 3401 	mla	r4, r6, r1, r3
   19728:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1972a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1972e:	d008      	beq.n	19742 <stop+0x52>
   19730:	42a2      	cmp	r2, r4
   19732:	d006      	beq.n	19742 <stop+0x52>
	__asm__ volatile(
   19734:	f385 8811 	msr	BASEPRI, r5
   19738:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1973c:	f04f 30ff 	mov.w	r0, #4294967295
}
   19740:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19742:	2201      	movs	r2, #1
   19744:	4371      	muls	r1, r6
   19746:	440b      	add	r3, r1
   19748:	649a      	str	r2, [r3, #72]	; 0x48
   1974a:	f385 8811 	msr	BASEPRI, r5
   1974e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   19752:	6843      	ldr	r3, [r0, #4]
   19754:	440b      	add	r3, r1
   19756:	685b      	ldr	r3, [r3, #4]
   19758:	4798      	blx	r3
	return 0;
   1975a:	2000      	movs	r0, #0
   1975c:	e7f0      	b.n	19740 <stop+0x50>
   1975e:	bf00      	nop
   19760:	0003b6df 	.word	0x0003b6df
   19764:	000381c3 	.word	0x000381c3
   19768:	0003b6a2 	.word	0x0003b6a2

0001976c <onoff_stop>:
{
   1976c:	b570      	push	{r4, r5, r6, lr}
   1976e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19770:	4906      	ldr	r1, [pc, #24]	; (1978c <onoff_stop+0x20>)
{
   19772:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   19774:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19776:	1149      	asrs	r1, r1, #5
   19778:	2240      	movs	r2, #64	; 0x40
   1977a:	4805      	ldr	r0, [pc, #20]	; (19790 <onoff_stop+0x24>)
   1977c:	f7ff ffb8 	bl	196f0 <stop>
	notify(mgr, res);
   19780:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19782:	4601      	mov	r1, r0
	notify(mgr, res);
   19784:	4620      	mov	r0, r4
}
   19786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1978a:	4718      	bx	r3
   1978c:	2000fcc8 	.word	0x2000fcc8
   19790:	00036054 	.word	0x00036054

00019794 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   19794:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19796:	2200      	movs	r2, #0
   19798:	2101      	movs	r1, #1
{
   1979a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1979c:	2005      	movs	r0, #5
   1979e:	f7f6 fe31 	bl	10404 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   197a2:	480f      	ldr	r0, [pc, #60]	; (197e0 <clk_init+0x4c>)
   197a4:	f00b fc3e 	bl	25024 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   197a8:	4b0e      	ldr	r3, [pc, #56]	; (197e4 <clk_init+0x50>)
   197aa:	4298      	cmp	r0, r3
   197ac:	d115      	bne.n	197da <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   197ae:	f00b fc5d 	bl	2506c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   197b2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   197b4:	490c      	ldr	r1, [pc, #48]	; (197e8 <clk_init+0x54>)
   197b6:	4630      	mov	r0, r6
   197b8:	f015 f887 	bl	2e8ca <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   197bc:	2800      	cmp	r0, #0
   197be:	db0b      	blt.n	197d8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   197c0:	2501      	movs	r5, #1
   197c2:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   197c4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   197c6:	4908      	ldr	r1, [pc, #32]	; (197e8 <clk_init+0x54>)
   197c8:	f104 0020 	add.w	r0, r4, #32
   197cc:	f015 f87d 	bl	2e8ca <onoff_manager_init>
		if (err < 0) {
   197d0:	2800      	cmp	r0, #0
   197d2:	db01      	blt.n	197d8 <clk_init+0x44>
	}

	return 0;
   197d4:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   197d6:	6565      	str	r5, [r4, #84]	; 0x54
}
   197d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   197da:	f06f 0004 	mvn.w	r0, #4
   197de:	e7fb      	b.n	197d8 <clk_init+0x44>
   197e0:	00019821 	.word	0x00019821
   197e4:	0bad0000 	.word	0x0bad0000
   197e8:	00036e60 	.word	0x00036e60

000197ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   197ec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   197ee:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   197f0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   197f2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   197f4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   197f6:	4808      	ldr	r0, [pc, #32]	; (19818 <clkstarted_handle.constprop.0+0x2c>)
   197f8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   197fa:	3348      	adds	r3, #72	; 0x48
   197fc:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   197fe:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   19802:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   19804:	f018 fbd0 	bl	31fa8 <set_on_state>
	if (callback) {
   19808:	b12d      	cbz	r5, 19816 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1980a:	4632      	mov	r2, r6
   1980c:	462b      	mov	r3, r5
}
   1980e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   19812:	4802      	ldr	r0, [pc, #8]	; (1981c <clkstarted_handle.constprop.0+0x30>)
   19814:	4718      	bx	r3
}
   19816:	bd70      	pop	{r4, r5, r6, pc}
   19818:	2000fcc8 	.word	0x2000fcc8
   1981c:	00036054 	.word	0x00036054

00019820 <clock_event_handler>:
	switch (event) {
   19820:	2801      	cmp	r0, #1
{
   19822:	b508      	push	{r3, lr}
	switch (event) {
   19824:	d006      	beq.n	19834 <clock_event_handler+0x14>
   19826:	2803      	cmp	r0, #3
   19828:	d008      	beq.n	1983c <clock_event_handler+0x1c>
   1982a:	b998      	cbnz	r0, 19854 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1982c:	4b0f      	ldr	r3, [pc, #60]	; (1986c <clock_event_handler+0x4c>)
   1982e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19830:	075b      	lsls	r3, r3, #29
   19832:	d119      	bne.n	19868 <clock_event_handler+0x48>
}
   19834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19838:	f7ff bfd8 	b.w	197ec <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1983c:	490c      	ldr	r1, [pc, #48]	; (19870 <clock_event_handler+0x50>)
   1983e:	f240 236e 	movw	r3, #622	; 0x26e
   19842:	4a0c      	ldr	r2, [pc, #48]	; (19874 <clock_event_handler+0x54>)
   19844:	480c      	ldr	r0, [pc, #48]	; (19878 <clock_event_handler+0x58>)
   19846:	f015 f885 	bl	2e954 <assert_print>
   1984a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1984e:	4809      	ldr	r0, [pc, #36]	; (19874 <clock_event_handler+0x54>)
   19850:	f015 f879 	bl	2e946 <assert_post_action>
   19854:	4906      	ldr	r1, [pc, #24]	; (19870 <clock_event_handler+0x50>)
   19856:	f240 2372 	movw	r3, #626	; 0x272
   1985a:	4a06      	ldr	r2, [pc, #24]	; (19874 <clock_event_handler+0x54>)
   1985c:	4806      	ldr	r0, [pc, #24]	; (19878 <clock_event_handler+0x58>)
   1985e:	f015 f879 	bl	2e954 <assert_print>
   19862:	f240 2172 	movw	r1, #626	; 0x272
   19866:	e7f2      	b.n	1984e <clock_event_handler+0x2e>
}
   19868:	bd08      	pop	{r3, pc}
   1986a:	bf00      	nop
   1986c:	2000fcc8 	.word	0x2000fcc8
   19870:	0003c13d 	.word	0x0003c13d
   19874:	0003b6a2 	.word	0x0003b6a2
   19878:	000381c3 	.word	0x000381c3

0001987c <generic_hfclk_start>:
{
   1987c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1987e:	f04f 0320 	mov.w	r3, #32
   19882:	f3ef 8111 	mrs	r1, BASEPRI
   19886:	f383 8812 	msr	BASEPRI_MAX, r3
   1988a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1988e:	4a11      	ldr	r2, [pc, #68]	; (198d4 <generic_hfclk_start+0x58>)
   19890:	6813      	ldr	r3, [r2, #0]
   19892:	f043 0002 	orr.w	r0, r3, #2
   19896:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   19898:	07da      	lsls	r2, r3, #31
   1989a:	d408      	bmi.n	198ae <generic_hfclk_start+0x32>
	__asm__ volatile(
   1989c:	f381 8811 	msr	BASEPRI, r1
   198a0:	f3bf 8f6f 	isb	sy
}
   198a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   198a8:	2001      	movs	r0, #1
   198aa:	f00b bc05 	b.w	250b8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   198ae:	4b0a      	ldr	r3, [pc, #40]	; (198d8 <generic_hfclk_start+0x5c>)
   198b0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   198b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   198b8:	07d3      	lsls	r3, r2, #31
   198ba:	d5ef      	bpl.n	1989c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   198bc:	4807      	ldr	r0, [pc, #28]	; (198dc <generic_hfclk_start+0x60>)
   198be:	f018 fb73 	bl	31fa8 <set_on_state>
   198c2:	f381 8811 	msr	BASEPRI, r1
   198c6:	f3bf 8f6f 	isb	sy
}
   198ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   198ce:	2000      	movs	r0, #0
   198d0:	f7ff bf8c 	b.w	197ec <clkstarted_handle.constprop.0>
   198d4:	2000fd20 	.word	0x2000fd20
   198d8:	40005000 	.word	0x40005000
   198dc:	2000fd10 	.word	0x2000fd10

000198e0 <api_blocking_start>:
{
   198e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   198e2:	2200      	movs	r2, #0
   198e4:	2301      	movs	r3, #1
   198e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   198ea:	ab04      	add	r3, sp, #16
   198ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   198f0:	4a09      	ldr	r2, [pc, #36]	; (19918 <api_blocking_start+0x38>)
   198f2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   198f4:	f8cd d000 	str.w	sp, [sp]
   198f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   198fc:	f018 fb95 	bl	3202a <api_start>
	if (err < 0) {
   19900:	2800      	cmp	r0, #0
   19902:	db05      	blt.n	19910 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   19904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19908:	2300      	movs	r3, #0
   1990a:	4668      	mov	r0, sp
   1990c:	f00f fa60 	bl	28dd0 <z_impl_k_sem_take>
}
   19910:	b007      	add	sp, #28
   19912:	f85d fb04 	ldr.w	pc, [sp], #4
   19916:	bf00      	nop
   19918:	00032051 	.word	0x00032051

0001991c <generic_hfclk_stop>:
{
   1991c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1991e:	f04f 0320 	mov.w	r3, #32
   19922:	f3ef 8411 	mrs	r4, BASEPRI
   19926:	f383 8812 	msr	BASEPRI_MAX, r3
   1992a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1992e:	4a07      	ldr	r2, [pc, #28]	; (1994c <generic_hfclk_stop+0x30>)
   19930:	6813      	ldr	r3, [r2, #0]
   19932:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19936:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19938:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1993a:	d402      	bmi.n	19942 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1993c:	2001      	movs	r0, #1
   1993e:	f00b fc1d 	bl	2517c <nrfx_clock_stop>
	__asm__ volatile(
   19942:	f384 8811 	msr	BASEPRI, r4
   19946:	f3bf 8f6f 	isb	sy
}
   1994a:	bd10      	pop	{r4, pc}
   1994c:	2000fd20 	.word	0x2000fd20

00019950 <z_nrf_clock_control_get_onoff>:
}
   19950:	4b02      	ldr	r3, [pc, #8]	; (1995c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   19952:	b2c0      	uxtb	r0, r0
}
   19954:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19958:	4770      	bx	lr
   1995a:	bf00      	nop
   1995c:	2000fcc8 	.word	0x2000fcc8

00019960 <z_nrf_clock_control_lf_on>:
{
   19960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19964:	2201      	movs	r2, #1
   19966:	4606      	mov	r6, r0
   19968:	4941      	ldr	r1, [pc, #260]	; (19a70 <z_nrf_clock_control_lf_on+0x110>)
   1996a:	e8d1 3fef 	ldaex	r3, [r1]
   1996e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19972:	2800      	cmp	r0, #0
   19974:	d1f9      	bne.n	1996a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   19976:	b9a3      	cbnz	r3, 199a2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19978:	493e      	ldr	r1, [pc, #248]	; (19a74 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1997a:	483f      	ldr	r0, [pc, #252]	; (19a78 <z_nrf_clock_control_lf_on+0x118>)
   1997c:	604b      	str	r3, [r1, #4]
   1997e:	60cb      	str	r3, [r1, #12]
   19980:	608a      	str	r2, [r1, #8]
   19982:	f7f3 fbc7 	bl	d114 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   19986:	2800      	cmp	r0, #0
   19988:	da0b      	bge.n	199a2 <z_nrf_clock_control_lf_on+0x42>
   1998a:	493c      	ldr	r1, [pc, #240]	; (19a7c <z_nrf_clock_control_lf_on+0x11c>)
   1998c:	f44f 730c 	mov.w	r3, #560	; 0x230
   19990:	4a3b      	ldr	r2, [pc, #236]	; (19a80 <z_nrf_clock_control_lf_on+0x120>)
   19992:	483c      	ldr	r0, [pc, #240]	; (19a84 <z_nrf_clock_control_lf_on+0x124>)
   19994:	f014 ffde 	bl	2e954 <assert_print>
   19998:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1999c:	4838      	ldr	r0, [pc, #224]	; (19a80 <z_nrf_clock_control_lf_on+0x120>)
   1999e:	f014 ffd2 	bl	2e946 <assert_post_action>
	switch (start_mode) {
   199a2:	b35e      	cbz	r6, 199fc <z_nrf_clock_control_lf_on+0x9c>
   199a4:	1e73      	subs	r3, r6, #1
   199a6:	2b01      	cmp	r3, #1
   199a8:	d858      	bhi.n	19a5c <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   199aa:	2e01      	cmp	r6, #1
   199ac:	d106      	bne.n	199bc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   199ae:	4b36      	ldr	r3, [pc, #216]	; (19a88 <z_nrf_clock_control_lf_on+0x128>)
   199b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   199b4:	f003 0303 	and.w	r3, r3, #3
   199b8:	2b02      	cmp	r3, #2
   199ba:	d01f      	beq.n	199fc <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   199bc:	f01b f8e4 	bl	34b88 <k_is_in_isr>
   199c0:	4605      	mov	r5, r0
   199c2:	b9e8      	cbnz	r0, 19a00 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   199c4:	4b31      	ldr	r3, [pc, #196]	; (19a8c <z_nrf_clock_control_lf_on+0x12c>)
   199c6:	781b      	ldrb	r3, [r3, #0]
   199c8:	b1d3      	cbz	r3, 19a00 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   199ca:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   199cc:	4607      	mov	r7, r0
   199ce:	4b2e      	ldr	r3, [pc, #184]	; (19a88 <z_nrf_clock_control_lf_on+0x128>)
   199d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   199d4:	4c2c      	ldr	r4, [pc, #176]	; (19a88 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   199d6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 19a90 <z_nrf_clock_control_lf_on+0x130>
   199da:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   199de:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   199e2:	03d2      	lsls	r2, r2, #15
   199e4:	d516      	bpl.n	19a14 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   199e6:	f003 0303 	and.w	r3, r3, #3
   199ea:	2b02      	cmp	r3, #2
   199ec:	d001      	beq.n	199f2 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   199ee:	2e01      	cmp	r6, #1
   199f0:	d110      	bne.n	19a14 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   199f2:	b375      	cbz	r5, 19a52 <z_nrf_clock_control_lf_on+0xf2>
   199f4:	f387 8811 	msr	BASEPRI, r7
   199f8:	f3bf 8f6f 	isb	sy
}
   199fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19a00:	f04f 0320 	mov.w	r3, #32
   19a04:	f3ef 8711 	mrs	r7, BASEPRI
   19a08:	f383 8812 	msr	BASEPRI_MAX, r3
   19a0c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19a10:	2501      	movs	r5, #1
   19a12:	e7df      	b.n	199d4 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19a14:	b1c5      	cbz	r5, 19a48 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19a16:	4638      	mov	r0, r7
   19a18:	f7f6 fc52 	bl	102c0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19a1c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19a20:	b2db      	uxtb	r3, r3
   19a22:	2b01      	cmp	r3, #1
   19a24:	d1d9      	bne.n	199da <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19a26:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19a2a:	2a00      	cmp	r2, #0
   19a2c:	d0d5      	beq.n	199da <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a2e:	2200      	movs	r2, #0
   19a30:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19a34:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19a38:	2202      	movs	r2, #2
   19a3a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   19a3e:	2220      	movs	r2, #32
   19a40:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19a44:	60a3      	str	r3, [r4, #8]
}
   19a46:	e7c8      	b.n	199da <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   19a48:	2100      	movs	r1, #0
   19a4a:	2021      	movs	r0, #33	; 0x21
   19a4c:	f010 ffce 	bl	2a9ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19a50:	e7e4      	b.n	19a1c <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   19a52:	2202      	movs	r2, #2
   19a54:	4b0c      	ldr	r3, [pc, #48]	; (19a88 <z_nrf_clock_control_lf_on+0x128>)
   19a56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19a5a:	e7cf      	b.n	199fc <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   19a5c:	490d      	ldr	r1, [pc, #52]	; (19a94 <z_nrf_clock_control_lf_on+0x134>)
   19a5e:	f240 2342 	movw	r3, #578	; 0x242
   19a62:	4a07      	ldr	r2, [pc, #28]	; (19a80 <z_nrf_clock_control_lf_on+0x120>)
   19a64:	4807      	ldr	r0, [pc, #28]	; (19a84 <z_nrf_clock_control_lf_on+0x124>)
   19a66:	f014 ff75 	bl	2e954 <assert_print>
   19a6a:	f240 2142 	movw	r1, #578	; 0x242
   19a6e:	e795      	b.n	1999c <z_nrf_clock_control_lf_on+0x3c>
   19a70:	2000fcc4 	.word	0x2000fcc4
   19a74:	2000fcb4 	.word	0x2000fcb4
   19a78:	2000fce8 	.word	0x2000fce8
   19a7c:	000389ad 	.word	0x000389ad
   19a80:	0003b6a2 	.word	0x0003b6a2
   19a84:	000381c3 	.word	0x000381c3
   19a88:	40005000 	.word	0x40005000
   19a8c:	2001287f 	.word	0x2001287f
   19a90:	e000e100 	.word	0xe000e100
   19a94:	0003c13d 	.word	0x0003c13d

00019a98 <uart_poll_out.constprop.0>:
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
   19a98:	4601      	mov	r1, r0
	api->poll_out(dev, out_char);
   19a9a:	4802      	ldr	r0, [pc, #8]	; (19aa4 <uart_poll_out.constprop.0+0xc>)
   19a9c:	6883      	ldr	r3, [r0, #8]
   19a9e:	69db      	ldr	r3, [r3, #28]
   19aa0:	4718      	bx	r3
   19aa2:	bf00      	nop
   19aa4:	000360cc 	.word	0x000360cc

00019aa8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   19aa8:	b538      	push	{r3, r4, r5, lr}
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   19aaa:	4b09      	ldr	r3, [pc, #36]	; (19ad0 <console_out+0x28>)
   19aac:	b2c5      	uxtb	r5, r0
{
   19aae:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   19ab0:	681b      	ldr	r3, [r3, #0]
   19ab2:	4628      	mov	r0, r5
   19ab4:	4798      	blx	r3

	if (handled_by_debug_server) {
   19ab6:	2801      	cmp	r0, #1
   19ab8:	d007      	beq.n	19aca <console_out+0x22>
			 */
			return c;
		}
	}

	if ('\n' == c) {
   19aba:	2c0a      	cmp	r4, #10
   19abc:	d102      	bne.n	19ac4 <console_out+0x1c>
		uart_poll_out(uart_console_dev, '\r');
   19abe:	200d      	movs	r0, #13
   19ac0:	f7ff ffea 	bl	19a98 <uart_poll_out.constprop.0>
	}
	uart_poll_out(uart_console_dev, c);
   19ac4:	4628      	mov	r0, r5
   19ac6:	f7ff ffe7 	bl	19a98 <uart_poll_out.constprop.0>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   19aca:	4620      	mov	r0, r4
   19acc:	bd38      	pop	{r3, r4, r5, pc}
   19ace:	bf00      	nop
   19ad0:	2000c934 	.word	0x2000c934

00019ad4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   19ad4:	b508      	push	{r3, lr}
   19ad6:	4807      	ldr	r0, [pc, #28]	; (19af4 <uart_console_init+0x20>)
   19ad8:	f01b f81f 	bl	34b1a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   19adc:	b138      	cbz	r0, 19aee <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19ade:	4806      	ldr	r0, [pc, #24]	; (19af8 <uart_console_init+0x24>)
   19ae0:	f7f7 fbe0 	bl	112a4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   19ae4:	4804      	ldr	r0, [pc, #16]	; (19af8 <uart_console_init+0x24>)
   19ae6:	f7f2 ff9d 	bl	ca24 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   19aea:	2000      	movs	r0, #0
}
   19aec:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19aee:	f06f 0012 	mvn.w	r0, #18
   19af2:	e7fb      	b.n	19aec <uart_console_init+0x18>
   19af4:	000360cc 	.word	0x000360cc
   19af8:	00019aa9 	.word	0x00019aa9

00019afc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   19afc:	b510      	push	{r4, lr}
	return port->data;
   19afe:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   19b00:	b961      	cbnz	r1, 19b1c <gpio_nrfx_manage_callback+0x20>
   19b02:	4920      	ldr	r1, [pc, #128]	; (19b84 <gpio_nrfx_manage_callback+0x88>)
   19b04:	232a      	movs	r3, #42	; 0x2a
   19b06:	4a20      	ldr	r2, [pc, #128]	; (19b88 <gpio_nrfx_manage_callback+0x8c>)
   19b08:	4820      	ldr	r0, [pc, #128]	; (19b8c <gpio_nrfx_manage_callback+0x90>)
   19b0a:	f014 ff23 	bl	2e954 <assert_print>
   19b0e:	4820      	ldr	r0, [pc, #128]	; (19b90 <gpio_nrfx_manage_callback+0x94>)
   19b10:	f014 ff20 	bl	2e954 <assert_print>
   19b14:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   19b16:	481c      	ldr	r0, [pc, #112]	; (19b88 <gpio_nrfx_manage_callback+0x8c>)
   19b18:	f014 ff15 	bl	2e946 <assert_post_action>
   19b1c:	6848      	ldr	r0, [r1, #4]
   19b1e:	b950      	cbnz	r0, 19b36 <gpio_nrfx_manage_callback+0x3a>
   19b20:	491c      	ldr	r1, [pc, #112]	; (19b94 <gpio_nrfx_manage_callback+0x98>)
   19b22:	232b      	movs	r3, #43	; 0x2b
   19b24:	4a18      	ldr	r2, [pc, #96]	; (19b88 <gpio_nrfx_manage_callback+0x8c>)
   19b26:	4819      	ldr	r0, [pc, #100]	; (19b8c <gpio_nrfx_manage_callback+0x90>)
   19b28:	f014 ff14 	bl	2e954 <assert_print>
   19b2c:	481a      	ldr	r0, [pc, #104]	; (19b98 <gpio_nrfx_manage_callback+0x9c>)
   19b2e:	f014 ff11 	bl	2e954 <assert_print>
   19b32:	212b      	movs	r1, #43	; 0x2b
   19b34:	e7ef      	b.n	19b16 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   19b36:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   19b38:	b1f8      	cbz	r0, 19b7a <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19b3a:	4288      	cmp	r0, r1
   19b3c:	d119      	bne.n	19b72 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   19b3e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19b40:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19b42:	42a1      	cmp	r1, r4
	list->head = node;
   19b44:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19b46:	d100      	bne.n	19b4a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19b48:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19b4a:	2000      	movs	r0, #0
   19b4c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   19b4e:	b12a      	cbz	r2, 19b5c <gpio_nrfx_manage_callback+0x60>
	return list->head;
   19b50:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19b52:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19b54:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19b56:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19b58:	b902      	cbnz	r2, 19b5c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   19b5a:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   19b5c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19b5e:	e010      	b.n	19b82 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19b60:	4281      	cmp	r1, r0
   19b62:	d106      	bne.n	19b72 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   19b64:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19b66:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19b68:	6898      	ldr	r0, [r3, #8]
   19b6a:	4281      	cmp	r1, r0
   19b6c:	d1ed      	bne.n	19b4a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19b6e:	609c      	str	r4, [r3, #8]
}
   19b70:	e7eb      	b.n	19b4a <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   19b72:	4604      	mov	r4, r0
   19b74:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19b76:	2800      	cmp	r0, #0
   19b78:	d1f2      	bne.n	19b60 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   19b7a:	2a00      	cmp	r2, #0
   19b7c:	d1e8      	bne.n	19b50 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   19b7e:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   19b82:	bd10      	pop	{r4, pc}
   19b84:	0003c502 	.word	0x0003c502
   19b88:	0003b73f 	.word	0x0003b73f
   19b8c:	000381c3 	.word	0x000381c3
   19b90:	0003b77b 	.word	0x0003b77b
   19b94:	0003b78a 	.word	0x0003b78a
   19b98:	0003b79c 	.word	0x0003b79c

00019b9c <gpio_nrfx_pin_interrupt_configure>:
{
   19b9c:	b530      	push	{r4, r5, lr}
	return port->config;
   19b9e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19ba0:	f001 041f 	and.w	r4, r1, #31
   19ba4:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   19ba6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   19baa:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19bac:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   19bb0:	d105      	bne.n	19bbe <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   19bb2:	4620      	mov	r0, r4
   19bb4:	f00b fe18 	bl	257e8 <nrfx_gpiote_trigger_disable>
		return 0;
   19bb8:	2000      	movs	r0, #0
}
   19bba:	b005      	add	sp, #20
   19bbc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   19bbe:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   19bc0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19bc4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   19bc8:	d114      	bne.n	19bf4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   19bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19bce:	bf0c      	ite	eq
   19bd0:	2304      	moveq	r3, #4
   19bd2:	2305      	movne	r3, #5
   19bd4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19bd8:	2300      	movs	r3, #0
   19bda:	4620      	mov	r0, r4
   19bdc:	4619      	mov	r1, r3
   19bde:	aa02      	add	r2, sp, #8
   19be0:	f00b fc04 	bl	253ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19be4:	4b26      	ldr	r3, [pc, #152]	; (19c80 <gpio_nrfx_pin_interrupt_configure+0xe4>)
   19be6:	4298      	cmp	r0, r3
   19be8:	d146      	bne.n	19c78 <gpio_nrfx_pin_interrupt_configure+0xdc>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19bea:	2101      	movs	r1, #1
   19bec:	4620      	mov	r0, r4
   19bee:	f00b fd91 	bl	25714 <nrfx_gpiote_trigger_enable>
	return 0;
   19bf2:	e7e1      	b.n	19bb8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19bf4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   19bf8:	d022      	beq.n	19c40 <gpio_nrfx_pin_interrupt_configure+0xa4>
   19bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   19bfe:	bf14      	ite	ne
   19c00:	2301      	movne	r3, #1
   19c02:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19c04:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   19c08:	6883      	ldr	r3, [r0, #8]
   19c0a:	40cb      	lsrs	r3, r1
   19c0c:	07d9      	lsls	r1, r3, #31
   19c0e:	d4e3      	bmi.n	19bd8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   19c10:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   19c14:	d1e0      	bne.n	19bd8 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   19c16:	0963      	lsrs	r3, r4, #5
   19c18:	d106      	bne.n	19c28 <gpio_nrfx_pin_interrupt_configure+0x8c>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   19c1a:	f04f 32ff 	mov.w	r2, #4294967295
    pin_number &= 0x1F;
   19c1e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   19c22:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19c24:	07d2      	lsls	r2, r2, #31
   19c26:	d40d      	bmi.n	19c44 <gpio_nrfx_pin_interrupt_configure+0xa8>
   19c28:	4916      	ldr	r1, [pc, #88]	; (19c84 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   19c2a:	4817      	ldr	r0, [pc, #92]	; (19c88 <gpio_nrfx_pin_interrupt_configure+0xec>)
   19c2c:	f240 2347 	movw	r3, #583	; 0x247
   19c30:	4a16      	ldr	r2, [pc, #88]	; (19c8c <gpio_nrfx_pin_interrupt_configure+0xf0>)
   19c32:	f014 fe8f 	bl	2e954 <assert_print>
   19c36:	f240 2147 	movw	r1, #583	; 0x247
   19c3a:	4814      	ldr	r0, [pc, #80]	; (19c8c <gpio_nrfx_pin_interrupt_configure+0xf0>)
   19c3c:	f014 fe83 	bl	2e946 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19c40:	2303      	movs	r3, #3
   19c42:	e7df      	b.n	19c04 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19c44:	4a12      	ldr	r2, [pc, #72]	; (19c90 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   19c46:	3380      	adds	r3, #128	; 0x80
   19c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19c4c:	07db      	lsls	r3, r3, #31
   19c4e:	d4c3      	bmi.n	19bd8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19c50:	f10d 0507 	add.w	r5, sp, #7
   19c54:	4629      	mov	r1, r5
   19c56:	4620      	mov	r0, r4
   19c58:	f00b fcf6 	bl	25648 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   19c5c:	4b0d      	ldr	r3, [pc, #52]	; (19c94 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   19c5e:	4298      	cmp	r0, r3
   19c60:	d001      	beq.n	19c66 <gpio_nrfx_pin_interrupt_configure+0xca>
		trigger_config.p_in_channel = &ch;
   19c62:	9503      	str	r5, [sp, #12]
   19c64:	e7b8      	b.n	19bd8 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   19c66:	4628      	mov	r0, r5
   19c68:	f00b fd4e 	bl	25708 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   19c6c:	4b04      	ldr	r3, [pc, #16]	; (19c80 <gpio_nrfx_pin_interrupt_configure+0xe4>)
   19c6e:	4298      	cmp	r0, r3
   19c70:	d0f7      	beq.n	19c62 <gpio_nrfx_pin_interrupt_configure+0xc6>
				return -ENOMEM;
   19c72:	f06f 000b 	mvn.w	r0, #11
   19c76:	e7a0      	b.n	19bba <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   19c78:	f06f 0015 	mvn.w	r0, #21
   19c7c:	e79d      	b.n	19bba <gpio_nrfx_pin_interrupt_configure+0x1e>
   19c7e:	bf00      	nop
   19c80:	0bad0000 	.word	0x0bad0000
   19c84:	0003b7e6 	.word	0x0003b7e6
   19c88:	000381c3 	.word	0x000381c3
   19c8c:	0003b7b3 	.word	0x0003b7b3
   19c90:	40842500 	.word	0x40842500
   19c94:	0bad0004 	.word	0x0bad0004

00019c98 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19c98:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   19c9a:	f00b fd25 	bl	256e8 <nrfx_gpiote_is_init>
   19c9e:	4604      	mov	r4, r0
   19ca0:	b968      	cbnz	r0, 19cbe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   19ca2:	f00b fcf9 	bl	25698 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   19ca6:	4b08      	ldr	r3, [pc, #32]	; (19cc8 <gpio_nrfx_init+0x30>)
   19ca8:	4298      	cmp	r0, r3
   19caa:	d10a      	bne.n	19cc2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   19cac:	4621      	mov	r1, r4
   19cae:	4807      	ldr	r0, [pc, #28]	; (19ccc <gpio_nrfx_init+0x34>)
   19cb0:	f00b fcc4 	bl	2563c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19cb4:	4622      	mov	r2, r4
   19cb6:	2101      	movs	r1, #1
   19cb8:	2031      	movs	r0, #49	; 0x31
   19cba:	f7f6 fba3 	bl	10404 <z_arm_irq_priority_set>
		return 0;
   19cbe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   19cc0:	bd10      	pop	{r4, pc}
		return -EIO;
   19cc2:	f06f 0004 	mvn.w	r0, #4
   19cc6:	e7fb      	b.n	19cc0 <gpio_nrfx_init+0x28>
   19cc8:	0bad0000 	.word	0x0bad0000
   19ccc:	00019cd1 	.word	0x00019cd1

00019cd0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19cd0:	0943      	lsrs	r3, r0, #5
{
   19cd2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19cd4:	d107      	bne.n	19ce6 <nrfx_gpio_handler+0x16>
	return list->head;
   19cd6:	4b12      	ldr	r3, [pc, #72]	; (19d20 <nrfx_gpio_handler+0x50>)
   19cd8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19cda:	b121      	cbz	r1, 19ce6 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   19cdc:	2501      	movs	r5, #1
	return node->next;
   19cde:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   19ce0:	4e10      	ldr	r6, [pc, #64]	; (19d24 <nrfx_gpio_handler+0x54>)
   19ce2:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19ce4:	b901      	cbnz	r1, 19ce8 <nrfx_gpio_handler+0x18>
}
   19ce6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   19ce8:	688a      	ldr	r2, [r1, #8]
   19cea:	402a      	ands	r2, r5
   19cec:	d010      	beq.n	19d10 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   19cee:	684b      	ldr	r3, [r1, #4]
   19cf0:	b963      	cbnz	r3, 19d0c <nrfx_gpio_handler+0x3c>
   19cf2:	490d      	ldr	r1, [pc, #52]	; (19d28 <nrfx_gpio_handler+0x58>)
   19cf4:	234d      	movs	r3, #77	; 0x4d
   19cf6:	4a0d      	ldr	r2, [pc, #52]	; (19d2c <nrfx_gpio_handler+0x5c>)
   19cf8:	480d      	ldr	r0, [pc, #52]	; (19d30 <nrfx_gpio_handler+0x60>)
   19cfa:	f014 fe2b 	bl	2e954 <assert_print>
   19cfe:	480d      	ldr	r0, [pc, #52]	; (19d34 <nrfx_gpio_handler+0x64>)
   19d00:	f014 fe28 	bl	2e954 <assert_print>
   19d04:	214d      	movs	r1, #77	; 0x4d
   19d06:	4809      	ldr	r0, [pc, #36]	; (19d2c <nrfx_gpio_handler+0x5c>)
   19d08:	f014 fe1d 	bl	2e946 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   19d0c:	4630      	mov	r0, r6
   19d0e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19d10:	b11c      	cbz	r4, 19d1a <nrfx_gpio_handler+0x4a>
   19d12:	6823      	ldr	r3, [r4, #0]
   19d14:	4621      	mov	r1, r4
   19d16:	461c      	mov	r4, r3
   19d18:	e7e4      	b.n	19ce4 <nrfx_gpio_handler+0x14>
   19d1a:	4623      	mov	r3, r4
   19d1c:	e7fa      	b.n	19d14 <nrfx_gpio_handler+0x44>
   19d1e:	bf00      	nop
   19d20:	2000fd24 	.word	0x2000fd24
   19d24:	0003606c 	.word	0x0003606c
   19d28:	0003b809 	.word	0x0003b809
   19d2c:	0003b73f 	.word	0x0003b73f
   19d30:	000381c3 	.word	0x000381c3
   19d34:	0003b79c 	.word	0x0003b79c

00019d38 <gpio_nrfx_pin_configure>:
{
   19d38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   19d3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19d40:	f001 051f 	and.w	r5, r1, #31
   19d44:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   19d48:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19d4a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   19d4e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19d50:	4628      	mov	r0, r5
   19d52:	f10d 0103 	add.w	r1, sp, #3
   19d56:	f00b fc77 	bl	25648 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19d5a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19d5e:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19d60:	d115      	bne.n	19d8e <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   19d62:	4628      	mov	r0, r5
   19d64:	f00b fd6a 	bl	2583c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   19d68:	4b48      	ldr	r3, [pc, #288]	; (19e8c <gpio_nrfx_pin_configure+0x154>)
   19d6a:	429e      	cmp	r6, r3
   19d6c:	d170      	bne.n	19e50 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   19d6e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19d72:	f00b fcc3 	bl	256fc <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19d76:	42b0      	cmp	r0, r6
   19d78:	d06a      	beq.n	19e50 <gpio_nrfx_pin_configure+0x118>
   19d7a:	4945      	ldr	r1, [pc, #276]	; (19e90 <gpio_nrfx_pin_configure+0x158>)
   19d7c:	236a      	movs	r3, #106	; 0x6a
   19d7e:	4a45      	ldr	r2, [pc, #276]	; (19e94 <gpio_nrfx_pin_configure+0x15c>)
   19d80:	4845      	ldr	r0, [pc, #276]	; (19e98 <gpio_nrfx_pin_configure+0x160>)
   19d82:	f014 fde7 	bl	2e954 <assert_print>
   19d86:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19d88:	4842      	ldr	r0, [pc, #264]	; (19e94 <gpio_nrfx_pin_configure+0x15c>)
   19d8a:	f014 fddc 	bl	2e946 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   19d8e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19d90:	4628      	mov	r0, r5
   19d92:	4619      	mov	r1, r3
   19d94:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   19d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19d9a:	f00b fb27 	bl	253ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19d9e:	4b3b      	ldr	r3, [pc, #236]	; (19e8c <gpio_nrfx_pin_configure+0x154>)
   19da0:	4298      	cmp	r0, r3
   19da2:	d004      	beq.n	19dae <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   19da4:	f06f 0015 	mvn.w	r0, #21
}
   19da8:	b004      	add	sp, #16
   19daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   19dae:	4286      	cmp	r6, r0
   19db0:	d10d      	bne.n	19dce <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   19db2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19db6:	f00b fca1 	bl	256fc <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19dba:	42b0      	cmp	r0, r6
   19dbc:	d007      	beq.n	19dce <gpio_nrfx_pin_configure+0x96>
   19dbe:	4934      	ldr	r1, [pc, #208]	; (19e90 <gpio_nrfx_pin_configure+0x158>)
   19dc0:	237c      	movs	r3, #124	; 0x7c
   19dc2:	4a34      	ldr	r2, [pc, #208]	; (19e94 <gpio_nrfx_pin_configure+0x15c>)
   19dc4:	4834      	ldr	r0, [pc, #208]	; (19e98 <gpio_nrfx_pin_configure+0x160>)
   19dc6:	f014 fdc5 	bl	2e954 <assert_print>
   19dca:	217c      	movs	r1, #124	; 0x7c
   19dcc:	e7dc      	b.n	19d88 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   19dce:	03a6      	lsls	r6, r4, #14
   19dd0:	d54c      	bpl.n	19e6c <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19dd2:	f240 3306 	movw	r3, #774	; 0x306
   19dd6:	4023      	ands	r3, r4
   19dd8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   19ddc:	d019      	beq.n	19e12 <gpio_nrfx_pin_configure+0xda>
   19dde:	d80c      	bhi.n	19dfa <gpio_nrfx_pin_configure+0xc2>
   19de0:	2b06      	cmp	r3, #6
   19de2:	d017      	beq.n	19e14 <gpio_nrfx_pin_configure+0xdc>
   19de4:	d804      	bhi.n	19df0 <gpio_nrfx_pin_configure+0xb8>
   19de6:	b1ab      	cbz	r3, 19e14 <gpio_nrfx_pin_configure+0xdc>
   19de8:	2b02      	cmp	r3, #2
   19dea:	d1db      	bne.n	19da4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   19dec:	2304      	movs	r3, #4
   19dee:	e011      	b.n	19e14 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19df4:	d1d6      	bne.n	19da4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   19df6:	2301      	movs	r3, #1
   19df8:	e00c      	b.n	19e14 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19dfa:	f240 2202 	movw	r2, #514	; 0x202
   19dfe:	4293      	cmp	r3, r2
   19e00:	d028      	beq.n	19e54 <gpio_nrfx_pin_configure+0x11c>
   19e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   19e06:	d027      	beq.n	19e58 <gpio_nrfx_pin_configure+0x120>
   19e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19e0c:	d1ca      	bne.n	19da4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   19e0e:	2302      	movs	r3, #2
   19e10:	e000      	b.n	19e14 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   19e12:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   19e14:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   19e18:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   19e1c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   19e20:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   19e22:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   19e26:	bf4c      	ite	mi
   19e28:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   19e2a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19e2e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   19e30:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19e34:	d512      	bpl.n	19e5c <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   19e36:	2301      	movs	r3, #1
   19e38:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19e3c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   19e3e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   19e40:	2200      	movs	r2, #0
   19e42:	4628      	mov	r0, r5
   19e44:	a901      	add	r1, sp, #4
   19e46:	f00b fb81 	bl	2554c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   19e4a:	4b10      	ldr	r3, [pc, #64]	; (19e8c <gpio_nrfx_pin_configure+0x154>)
   19e4c:	4298      	cmp	r0, r3
   19e4e:	d1a9      	bne.n	19da4 <gpio_nrfx_pin_configure+0x6c>
   19e50:	2000      	movs	r0, #0
   19e52:	e7a9      	b.n	19da8 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   19e54:	2305      	movs	r3, #5
   19e56:	e7dd      	b.n	19e14 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19e58:	2303      	movs	r3, #3
   19e5a:	e7db      	b.n	19e14 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   19e5c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   19e5e:	bf41      	itttt	mi
   19e60:	2301      	movmi	r3, #1
   19e62:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   19e66:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   19e68:	60d3      	strmi	r3, [r2, #12]
}
   19e6a:	e7e9      	b.n	19e40 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   19e6c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19e6e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   19e72:	bf4c      	ite	mi
   19e74:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   19e76:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19e7a:	461a      	mov	r2, r3
   19e7c:	4628      	mov	r0, r5
   19e7e:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   19e80:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19e84:	f00b fab2 	bl	253ec <nrfx_gpiote_input_configure>
   19e88:	e7df      	b.n	19e4a <gpio_nrfx_pin_configure+0x112>
   19e8a:	bf00      	nop
   19e8c:	0bad0000 	.word	0x0bad0000
   19e90:	0003b841 	.word	0x0003b841
   19e94:	0003b815 	.word	0x0003b815
   19e98:	000381c3 	.word	0x000381c3

00019e9c <nrf_gpio_pin_port_decode>:
{
   19e9c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19e9e:	6802      	ldr	r2, [r0, #0]
    switch (port)
   19ea0:	0953      	lsrs	r3, r2, #5
   19ea2:	d104      	bne.n	19eae <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   19ea4:	f04f 33ff 	mov.w	r3, #4294967295
   19ea8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19eaa:	07db      	lsls	r3, r3, #31
   19eac:	d40b      	bmi.n	19ec6 <nrf_gpio_pin_port_decode+0x2a>
   19eae:	4907      	ldr	r1, [pc, #28]	; (19ecc <nrf_gpio_pin_port_decode+0x30>)
   19eb0:	4807      	ldr	r0, [pc, #28]	; (19ed0 <nrf_gpio_pin_port_decode+0x34>)
   19eb2:	f240 2347 	movw	r3, #583	; 0x247
   19eb6:	4a07      	ldr	r2, [pc, #28]	; (19ed4 <nrf_gpio_pin_port_decode+0x38>)
   19eb8:	f014 fd4c 	bl	2e954 <assert_print>
   19ebc:	f240 2147 	movw	r1, #583	; 0x247
   19ec0:	4804      	ldr	r0, [pc, #16]	; (19ed4 <nrf_gpio_pin_port_decode+0x38>)
   19ec2:	f014 fd40 	bl	2e946 <assert_post_action>
}
   19ec6:	4804      	ldr	r0, [pc, #16]	; (19ed8 <nrf_gpio_pin_port_decode+0x3c>)
   19ec8:	bd08      	pop	{r3, pc}
   19eca:	bf00      	nop
   19ecc:	0003b7e6 	.word	0x0003b7e6
   19ed0:	000381c3 	.word	0x000381c3
   19ed4:	0003b7b3 	.word	0x0003b7b3
   19ed8:	40842500 	.word	0x40842500

00019edc <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   19edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct uarte_nrfx_data *data = dev->data;
	const struct uarte_nrfx_config *cfg = dev->config;
   19ee0:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   19ee4:	4617      	mov	r7, r2
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   19ee6:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   19eea:	4606      	mov	r6, r0
   19eec:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   19eee:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   19ef0:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   19ef4:	b172      	cbz	r2, 19f14 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   19ef6:	4941      	ldr	r1, [pc, #260]	; (19ffc <uarte_nrfx_rx_enable+0x120>)
   19ef8:	f240 3341 	movw	r3, #833	; 0x341
   19efc:	4a40      	ldr	r2, [pc, #256]	; (1a000 <uarte_nrfx_rx_enable+0x124>)
   19efe:	4841      	ldr	r0, [pc, #260]	; (1a004 <uarte_nrfx_rx_enable+0x128>)
   19f00:	f014 fd28 	bl	2e954 <assert_print>
   19f04:	4840      	ldr	r0, [pc, #256]	; (1a008 <uarte_nrfx_rx_enable+0x12c>)
   19f06:	f014 fd25 	bl	2e954 <assert_print>
   19f0a:	f240 3141 	movw	r1, #833	; 0x341
   19f0e:	483c      	ldr	r0, [pc, #240]	; (1a000 <uarte_nrfx_rx_enable+0x124>)
   19f10:	f014 fd19 	bl	2e946 <assert_post_action>

	/* Signal error if RX is already enabled or if the driver is waiting
	 * for the RXTO event after a call to uart_rx_disable() to discard
	 * data from the UARTE internal RX FIFO.
	 */
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   19f14:	6922      	ldr	r2, [r4, #16]
   19f16:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   19f1a:	2900      	cmp	r1, #0
   19f1c:	d16a      	bne.n	19ff4 <uarte_nrfx_rx_enable+0x118>
   19f1e:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   19f22:	2900      	cmp	r1, #0
   19f24:	d166      	bne.n	19ff4 <uarte_nrfx_rx_enable+0x118>
	 * 3 instead of 2 is used. Note that lower value would work in a similar
	 * way but timeouts would always occur later than expected,  most likely
	 * after ~3 ticks.
	 */
	data->async->rx_timeout_slab =
		MAX(timeout / RX_TIMEOUT_DIV,
   19f26:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   19f2a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   19f2c:	bfca      	itet	gt
   19f2e:	2205      	movgt	r2, #5
   19f30:	235c      	movle	r3, #92	; 0x5c
   19f32:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   19f36:	6922      	ldr	r2, [r4, #16]
   19f38:	6793      	str	r3, [r2, #120]	; 0x78
		    NRFX_CEIL_DIV(3 * 1000000, CONFIG_SYS_CLOCK_TICKS_PER_SEC));

	data->async->rx_buf = buf;
   19f3a:	6923      	ldr	r3, [r4, #16]
   19f3c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   19f40:	6923      	ldr	r3, [r4, #16]
   19f42:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   19f44:	2300      	movs	r3, #0
   19f46:	6922      	ldr	r2, [r4, #16]
   19f48:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   19f4a:	6922      	ldr	r2, [r4, #16]
   19f4c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   19f4e:	6922      	ldr	r2, [r4, #16]
   19f50:	6693      	str	r3, [r2, #104]	; 0x68

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19f52:	f8da 3004 	ldr.w	r3, [sl, #4]
   19f56:	06da      	lsls	r2, r3, #27
   19f58:	d523      	bpl.n	19fa2 <uarte_nrfx_rx_enable+0xc6>
		if (data->async->rx_flush_cnt) {
   19f5a:	6921      	ldr	r1, [r4, #16]
   19f5c:	f891 50c9 	ldrb.w	r5, [r1, #201]	; 0xc9
   19f60:	b1fd      	cbz	r5, 19fa2 <uarte_nrfx_rx_enable+0xc6>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   19f62:	42bd      	cmp	r5, r7
   19f64:	bf28      	it	cs
   19f66:	463d      	movcs	r5, r7
   19f68:	4640      	mov	r0, r8
   19f6a:	462a      	mov	r2, r5
   19f6c:	31c4      	adds	r1, #196	; 0xc4
   19f6e:	f01b f83d 	bl	34fec <memcpy>
			len -= cpy_len;

			/* If flush content filled whole new buffer complete the
			 * request and indicate rx being disabled.
			 */
			if (!len) {
   19f72:	1b7f      	subs	r7, r7, r5
			buf += cpy_len;
   19f74:	44a8      	add	r8, r5
			if (!len) {
   19f76:	d114      	bne.n	19fa2 <uarte_nrfx_rx_enable+0xc6>
				data->async->rx_flush_cnt -= cpy_len;
   19f78:	6922      	ldr	r2, [r4, #16]
				notify_uart_rx_rdy(dev, cpy_len);
   19f7a:	4629      	mov	r1, r5
				data->async->rx_flush_cnt -= cpy_len;
   19f7c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   19f80:	4630      	mov	r0, r6
				data->async->rx_flush_cnt -= cpy_len;
   19f82:	1b5b      	subs	r3, r3, r5
   19f84:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   19f88:	f018 f96f 	bl	3226a <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   19f8c:	6921      	ldr	r1, [r4, #16]
   19f8e:	4630      	mov	r0, r6
   19f90:	3158      	adds	r1, #88	; 0x58
   19f92:	f018 f983 	bl	3229c <rx_buf_release>
				notify_rx_disable(dev);
   19f96:	4630      	mov	r0, r6
   19f98:	f018 f998 	bl	322cc <notify_rx_disable>
		irq_unlock(key);
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   19f9c:	2000      	movs	r0, #0
}
   19f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19fa2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19fa4:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19fa8:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19fac:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   19fb0:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   19fb4:	2201      	movs	r2, #1
   19fb6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   19fba:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   19fbe:	6923      	ldr	r3, [r4, #16]
   19fc0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19fc4:	f8da 3004 	ldr.w	r3, [sl, #4]
   19fc8:	06db      	lsls	r3, r3, #27
   19fca:	d50f      	bpl.n	19fec <uarte_nrfx_rx_enable+0x110>
   19fcc:	f04f 0320 	mov.w	r3, #32
   19fd0:	f3ef 8411 	mrs	r4, BASEPRI
   19fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   19fd8:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   19fdc:	2102      	movs	r1, #2
   19fde:	4630      	mov	r0, r6
   19fe0:	f018 fa5f 	bl	324a2 <uarte_enable>
	__asm__ volatile(
   19fe4:	f384 8811 	msr	BASEPRI, r4
   19fe8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19fec:	2301      	movs	r3, #1
   19fee:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   19ff2:	e7d3      	b.n	19f9c <uarte_nrfx_rx_enable+0xc0>
		return -EBUSY;
   19ff4:	f06f 000f 	mvn.w	r0, #15
   19ff8:	e7d1      	b.n	19f9e <uarte_nrfx_rx_enable+0xc2>
   19ffa:	bf00      	nop
   19ffc:	0003c13d 	.word	0x0003c13d
   1a000:	0003b861 	.word	0x0003b861
   1a004:	000381c3 	.word	0x000381c3
   1a008:	0003b895 	.word	0x0003b895

0001a00c <uarte_nrfx_tx>:
{
   1a00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a00e:	461d      	mov	r5, r3
	return config->uarte_regs;
   1a010:	6843      	ldr	r3, [r0, #4]
{
   1a012:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1a014:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1a016:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   1a01a:	f04f 0320 	mov.w	r3, #32
   1a01e:	f3ef 8711 	mrs	r7, BASEPRI
   1a022:	f383 8812 	msr	BASEPRI_MAX, r3
   1a026:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1a02a:	6923      	ldr	r3, [r4, #16]
   1a02c:	68d8      	ldr	r0, [r3, #12]
   1a02e:	b138      	cbz	r0, 1a040 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1a030:	f387 8811 	msr	BASEPRI, r7
   1a034:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1a038:	f06f 000f 	mvn.w	r0, #15
}
   1a03c:	b003      	add	sp, #12
   1a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1a040:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1a042:	6923      	ldr	r3, [r4, #16]
   1a044:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1a046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a04a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a04e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1a052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a056:	6923      	ldr	r3, [r4, #16]
   1a058:	d111      	bne.n	1a07e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1a05a:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1a05c:	6923      	ldr	r3, [r4, #16]
   1a05e:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1a060:	4621      	mov	r1, r4
   1a062:	4630      	mov	r0, r6
   1a064:	f018 fb1b 	bl	3269e <start_tx_locked>
   1a068:	f387 8811 	msr	BASEPRI, r7
   1a06c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1a070:	7ae3      	ldrb	r3, [r4, #11]
   1a072:	2b01      	cmp	r3, #1
   1a074:	d101      	bne.n	1a07a <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1a076:	1c6b      	adds	r3, r5, #1
   1a078:	d106      	bne.n	1a088 <uarte_nrfx_tx+0x7c>
	return 0;
   1a07a:	2000      	movs	r0, #0
   1a07c:	e7de      	b.n	1a03c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1a07e:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1a080:	4620      	mov	r0, r4
   1a082:	f018 fa76 	bl	32572 <setup_tx_cache>
   1a086:	e7eb      	b.n	1a060 <uarte_nrfx_tx+0x54>
   1a088:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a08c:	2100      	movs	r1, #0
   1a08e:	480a      	ldr	r0, [pc, #40]	; (1a0b8 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1a090:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1a094:	2300      	movs	r3, #0
   1a096:	fbc5 0106 	smlal	r0, r1, r5, r6
   1a09a:	4a08      	ldr	r2, [pc, #32]	; (1a0bc <uarte_nrfx_tx+0xb0>)
   1a09c:	f7ee ff96 	bl	8fcc <__aeabi_uldivmod>
   1a0a0:	6924      	ldr	r4, [r4, #16]
   1a0a2:	4602      	mov	r2, r0
   1a0a4:	460b      	mov	r3, r1
   1a0a6:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1a0a8:	2000      	movs	r0, #0
   1a0aa:	2100      	movs	r1, #0
   1a0ac:	e9cd 0100 	strd	r0, r1, [sp]
   1a0b0:	4620      	mov	r0, r4
   1a0b2:	f011 f973 	bl	2b39c <z_impl_k_timer_start>
   1a0b6:	e7e0      	b.n	1a07a <uarte_nrfx_tx+0x6e>
   1a0b8:	000f423f 	.word	0x000f423f
   1a0bc:	000f4240 	.word	0x000f4240

0001a0c0 <uarte_nrfx_configure>:
{
   1a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1a0c2:	794b      	ldrb	r3, [r1, #5]
   1a0c4:	2b01      	cmp	r3, #1
   1a0c6:	d026      	beq.n	1a116 <uarte_nrfx_configure+0x56>
   1a0c8:	2b03      	cmp	r3, #3
   1a0ca:	d121      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1a0cc:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a0ce:	798b      	ldrb	r3, [r1, #6]
   1a0d0:	2b03      	cmp	r3, #3
   1a0d2:	d11d      	bne.n	1a110 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   1a0d4:	79ce      	ldrb	r6, [r1, #7]
   1a0d6:	b10e      	cbz	r6, 1a0dc <uarte_nrfx_configure+0x1c>
   1a0d8:	2e01      	cmp	r6, #1
   1a0da:	d119      	bne.n	1a110 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   1a0dc:	790a      	ldrb	r2, [r1, #4]
   1a0de:	b112      	cbz	r2, 1a0e6 <uarte_nrfx_configure+0x26>
   1a0e0:	2a02      	cmp	r2, #2
   1a0e2:	d115      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a0e4:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a0e6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1a0e8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1a0ea:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1a0ee:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1a0f0:	d067      	beq.n	1a1c2 <uarte_nrfx_configure+0x102>
   1a0f2:	d82d      	bhi.n	1a150 <uarte_nrfx_configure+0x90>
   1a0f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a0f8:	d066      	beq.n	1a1c8 <uarte_nrfx_configure+0x108>
   1a0fa:	d816      	bhi.n	1a12a <uarte_nrfx_configure+0x6a>
   1a0fc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a100:	d064      	beq.n	1a1cc <uarte_nrfx_configure+0x10c>
   1a102:	d80a      	bhi.n	1a11a <uarte_nrfx_configure+0x5a>
   1a104:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a108:	d063      	beq.n	1a1d2 <uarte_nrfx_configure+0x112>
   1a10a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a10e:	d063      	beq.n	1a1d8 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1a110:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a114:	e054      	b.n	1a1c0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1a116:	2500      	movs	r5, #0
   1a118:	e7d9      	b.n	1a0ce <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1a11a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a11e:	d05e      	beq.n	1a1de <uarte_nrfx_configure+0x11e>
   1a120:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a124:	d1f4      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a126:	4b38      	ldr	r3, [pc, #224]	; (1a208 <uarte_nrfx_configure+0x148>)
   1a128:	e03c      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a12a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a12e:	d059      	beq.n	1a1e4 <uarte_nrfx_configure+0x124>
   1a130:	d807      	bhi.n	1a142 <uarte_nrfx_configure+0x82>
   1a132:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a136:	d057      	beq.n	1a1e8 <uarte_nrfx_configure+0x128>
   1a138:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a13c:	d1e8      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a13e:	4b33      	ldr	r3, [pc, #204]	; (1a20c <uarte_nrfx_configure+0x14c>)
   1a140:	e030      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a142:	f647 2412 	movw	r4, #31250	; 0x7a12
   1a146:	42a3      	cmp	r3, r4
   1a148:	d1e2      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a14a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a14e:	e029      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a150:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a154:	d04a      	beq.n	1a1ec <uarte_nrfx_configure+0x12c>
   1a156:	d813      	bhi.n	1a180 <uarte_nrfx_configure+0xc0>
   1a158:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a15c:	d049      	beq.n	1a1f2 <uarte_nrfx_configure+0x132>
   1a15e:	d809      	bhi.n	1a174 <uarte_nrfx_configure+0xb4>
   1a160:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1a164:	42a3      	cmp	r3, r4
   1a166:	d046      	beq.n	1a1f6 <uarte_nrfx_configure+0x136>
   1a168:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a16c:	d1d0      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a16e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a172:	e017      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a174:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a178:	d1ca      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a17a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a17e:	e011      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a180:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a184:	d03a      	beq.n	1a1fc <uarte_nrfx_configure+0x13c>
   1a186:	d808      	bhi.n	1a19a <uarte_nrfx_configure+0xda>
   1a188:	4c21      	ldr	r4, [pc, #132]	; (1a210 <uarte_nrfx_configure+0x150>)
   1a18a:	42a3      	cmp	r3, r4
   1a18c:	d039      	beq.n	1a202 <uarte_nrfx_configure+0x142>
   1a18e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a192:	d1bd      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a194:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a198:	e004      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a19a:	4c1e      	ldr	r4, [pc, #120]	; (1a214 <uarte_nrfx_configure+0x154>)
   1a19c:	42a3      	cmp	r3, r4
   1a19e:	d1b7      	bne.n	1a110 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a1a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1a1a4:	6904      	ldr	r4, [r0, #16]
    p_reg->BAUDRATE = baudrate;
   1a1a6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1a1aa:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1a1ac:	4335      	orrs	r5, r6
   1a1ae:	681b      	ldr	r3, [r3, #0]
   1a1b0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a1b2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1a1b6:	1d23      	adds	r3, r4, #4
   1a1b8:	c903      	ldmia	r1, {r0, r1}
   1a1ba:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1a1be:	2000      	movs	r0, #0
}
   1a1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a1c2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a1c6:	e7ed      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a1c8:	4b13      	ldr	r3, [pc, #76]	; (1a218 <uarte_nrfx_configure+0x158>)
   1a1ca:	e7eb      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a1cc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a1d0:	e7e8      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1a1d2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a1d6:	e7e5      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a1d8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a1dc:	e7e2      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a1de:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a1e2:	e7df      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a1e4:	4b0d      	ldr	r3, [pc, #52]	; (1a21c <uarte_nrfx_configure+0x15c>)
   1a1e6:	e7dd      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a1e8:	4b0d      	ldr	r3, [pc, #52]	; (1a220 <uarte_nrfx_configure+0x160>)
   1a1ea:	e7db      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a1ec:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a1f0:	e7d8      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a1f2:	4b0c      	ldr	r3, [pc, #48]	; (1a224 <uarte_nrfx_configure+0x164>)
   1a1f4:	e7d6      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a1f6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a1fa:	e7d3      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a1fc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a200:	e7d0      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a202:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a206:	e7cd      	b.n	1a1a4 <uarte_nrfx_configure+0xe4>
   1a208:	0013b000 	.word	0x0013b000
   1a20c:	004ea000 	.word	0x004ea000
   1a210:	0003d090 	.word	0x0003d090
   1a214:	000f4240 	.word	0x000f4240
   1a218:	00275000 	.word	0x00275000
   1a21c:	0075c000 	.word	0x0075c000
   1a220:	003af000 	.word	0x003af000
   1a224:	013a9000 	.word	0x013a9000

0001a228 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a22c:	4604      	mov	r4, r0
   1a22e:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1a230:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a232:	f01a fca9 	bl	34b88 <k_is_in_isr>
   1a236:	b9b0      	cbnz	r0, 1a266 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1a238:	4b2a      	ldr	r3, [pc, #168]	; (1a2e4 <uarte_nrfx_poll_out+0xbc>)
   1a23a:	781b      	ldrb	r3, [r3, #0]
   1a23c:	b19b      	cbz	r3, 1a266 <uarte_nrfx_poll_out+0x3e>
{
   1a23e:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a240:	6860      	ldr	r0, [r4, #4]
   1a242:	f018 fa1c 	bl	3267e <is_tx_ready.isra.0>
   1a246:	2800      	cmp	r0, #0
   1a248:	d138      	bne.n	1a2bc <uarte_nrfx_poll_out+0x94>
   1a24a:	2001      	movs	r0, #1
   1a24c:	f019 fbf9 	bl	33a42 <nrfx_busy_wait>
   1a250:	3f01      	subs	r7, #1
   1a252:	d1f5      	bne.n	1a240 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1a254:	2100      	movs	r1, #0
   1a256:	2021      	movs	r0, #33	; 0x21
   1a258:	f010 fbc8 	bl	2a9ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a25c:	e7ef      	b.n	1a23e <uarte_nrfx_poll_out+0x16>
   1a25e:	f381 8811 	msr	BASEPRI, r1
   1a262:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a266:	f04f 0320 	mov.w	r3, #32
   1a26a:	f3ef 8111 	mrs	r1, BASEPRI
   1a26e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a272:	f3bf 8f6f 	isb	sy
   1a276:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1a27a:	460f      	mov	r7, r1
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1a27c:	4640      	mov	r0, r8
   1a27e:	f018 f9fe 	bl	3267e <is_tx_ready.isra.0>
   1a282:	2800      	cmp	r0, #0
   1a284:	d0eb      	beq.n	1a25e <uarte_nrfx_poll_out+0x36>
#if UARTE_ANY_ASYNC
				if (data->async && data->async->tx_size &&
   1a286:	692b      	ldr	r3, [r5, #16]
   1a288:	b15b      	cbz	r3, 1a2a2 <uarte_nrfx_poll_out+0x7a>
   1a28a:	68da      	ldr	r2, [r3, #12]
   1a28c:	b14a      	cbz	r2, 1a2a2 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1a28e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1a292:	2a00      	cmp	r2, #0
   1a294:	da05      	bge.n	1a2a2 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1a296:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1a29a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1a29e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
   1a2a2:	69ab      	ldr	r3, [r5, #24]
	tx_start(dev, data->char_out, 1);
   1a2a4:	2201      	movs	r2, #1
	*data->char_out = c;
   1a2a6:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	69a9      	ldr	r1, [r5, #24]
   1a2ac:	f018 f91f 	bl	324ee <tx_start>
	__asm__ volatile(
   1a2b0:	f387 8811 	msr	BASEPRI, r7
   1a2b4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1a2bc:	f04f 0320 	mov.w	r3, #32
   1a2c0:	f3ef 8111 	mrs	r1, BASEPRI
   1a2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2c8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a2cc:	6860      	ldr	r0, [r4, #4]
   1a2ce:	460f      	mov	r7, r1
   1a2d0:	f018 f9d5 	bl	3267e <is_tx_ready.isra.0>
   1a2d4:	2800      	cmp	r0, #0
   1a2d6:	d1e4      	bne.n	1a2a2 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1a2d8:	f381 8811 	msr	BASEPRI, r1
   1a2dc:	f3bf 8f6f 	isb	sy
}
   1a2e0:	e7b8      	b.n	1a254 <uarte_nrfx_poll_out+0x2c>
   1a2e2:	bf00      	nop
   1a2e4:	2001287f 	.word	0x2001287f

0001a2e8 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a2e8:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1a2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a2ee:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1a2f2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   1a2f6:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   1a2fa:	b089      	sub	sp, #36	; 0x24
   1a2fc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1a300:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1a304:	f8d9 600c 	ldr.w	r6, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1a308:	4607      	mov	r7, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1a30a:	aa02      	add	r2, sp, #8
   1a30c:	4630      	mov	r0, r6
   1a30e:	f017 feee 	bl	320ee <pinctrl_lookup_state>
	if (ret < 0) {
   1a312:	1e05      	subs	r5, r0, #0
   1a314:	db26      	blt.n	1a364 <uarte_instance_init.constprop.0+0x7c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1a316:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a318:	6832      	ldr	r2, [r6, #0]
   1a31a:	7919      	ldrb	r1, [r3, #4]
   1a31c:	6818      	ldr	r0, [r3, #0]
   1a31e:	f017 fef9 	bl	32114 <pinctrl_configure_pins>
	if (err < 0) {
   1a322:	1e05      	subs	r5, r0, #0
   1a324:	db1e      	blt.n	1a364 <uarte_instance_init.constprop.0+0x7c>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1a326:	4638      	mov	r0, r7
   1a328:	f108 0104 	add.w	r1, r8, #4
   1a32c:	f7ff fec8 	bl	1a0c0 <uarte_nrfx_configure>
	if (err) {
   1a330:	4605      	mov	r5, r0
   1a332:	b9b8      	cbnz	r0, 1a364 <uarte_instance_init.constprop.0+0x7c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a334:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a338:	0798      	lsls	r0, r3, #30
   1a33a:	d535      	bpl.n	1a3a8 <uarte_instance_init.constprop.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a33c:	f108 0020 	add.w	r0, r8, #32
   1a340:	f00a ff6c 	bl	2521c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a344:	4b7f      	ldr	r3, [pc, #508]	; (1a544 <uarte_instance_init.constprop.0+0x25c>)
   1a346:	4298      	cmp	r0, r3
   1a348:	d010      	beq.n	1a36c <uarte_instance_init.constprop.0+0x84>
		LOG_ERR("Failed to allocate PPI Channel");
   1a34a:	4b7f      	ldr	r3, [pc, #508]	; (1a548 <uarte_instance_init.constprop.0+0x260>)
   1a34c:	9307      	str	r3, [sp, #28]
   1a34e:	2302      	movs	r3, #2
   1a350:	9306      	str	r3, [sp, #24]
   1a352:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a356:	462b      	mov	r3, r5
   1a358:	487c      	ldr	r0, [pc, #496]	; (1a54c <uarte_instance_init.constprop.0+0x264>)
   1a35a:	aa06      	add	r2, sp, #24
   1a35c:	f7f4 fa5e 	bl	e81c <z_impl_z_log_msg_static_create>
		return -EIO;
   1a360:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1a364:	4628      	mov	r0, r5
   1a366:	b009      	add	sp, #36	; 0x24
   1a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1a36c:	f898 3020 	ldrb.w	r3, [r8, #32]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1a370:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1a374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a378:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1a37c:	d10b      	bne.n	1a396 <uarte_instance_init.constprop.0+0xae>
   1a37e:	4974      	ldr	r1, [pc, #464]	; (1a550 <uarte_instance_init.constprop.0+0x268>)
   1a380:	4874      	ldr	r0, [pc, #464]	; (1a554 <uarte_instance_init.constprop.0+0x26c>)
   1a382:	f240 234e 	movw	r3, #590	; 0x24e
   1a386:	4a74      	ldr	r2, [pc, #464]	; (1a558 <uarte_instance_init.constprop.0+0x270>)
   1a388:	f014 fae4 	bl	2e954 <assert_print>
   1a38c:	f240 214e 	movw	r1, #590	; 0x24e
   1a390:	4871      	ldr	r0, [pc, #452]	; (1a558 <uarte_instance_init.constprop.0+0x270>)
   1a392:	f014 fad8 	bl	2e946 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1a396:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a39a:	2301      	movs	r3, #1
   1a39c:	f898 2020 	ldrb.w	r2, [r8, #32]
   1a3a0:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1a3a2:	4a6e      	ldr	r2, [pc, #440]	; (1a55c <uarte_instance_init.constprop.0+0x274>)
   1a3a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1a3a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1a3ac:	2b00      	cmp	r3, #0
   1a3ae:	f000 80b4 	beq.w	1a51a <uarte_instance_init.constprop.0+0x232>
	struct uarte_nrfx_data *data = dev->data;
   1a3b2:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1a3b4:	f8d7 b004 	ldr.w	fp, [r7, #4]
	if (HW_RX_COUNTING_ENABLED(data)) {
   1a3b8:	6933      	ldr	r3, [r6, #16]
	return config->uarte_regs;
   1a3ba:	f8db 7000 	ldr.w	r7, [fp]
	if (HW_RX_COUNTING_ENABLED(data)) {
   1a3be:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   1a3c2:	2b00      	cmp	r3, #0
   1a3c4:	f000 80a5 	beq.w	1a512 <uarte_instance_init.constprop.0+0x22a>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1a3c8:	2300      	movs	r3, #0
   1a3ca:	4965      	ldr	r1, [pc, #404]	; (1a560 <uarte_instance_init.constprop.0+0x278>)
		ret = nrfx_timer_init(&cfg->timer,
   1a3cc:	f10b 0a10 	add.w	sl, fp, #16
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1a3d0:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   1a3d4:	4a63      	ldr	r2, [pc, #396]	; (1a564 <uarte_instance_init.constprop.0+0x27c>)
   1a3d6:	4669      	mov	r1, sp
   1a3d8:	4650      	mov	r0, sl
   1a3da:	f00b fc3b 	bl	25c54 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   1a3de:	4a59      	ldr	r2, [pc, #356]	; (1a544 <uarte_instance_init.constprop.0+0x25c>)
   1a3e0:	4290      	cmp	r0, r2
   1a3e2:	f000 808f 	beq.w	1a504 <uarte_instance_init.constprop.0+0x21c>
			LOG_ERR("Timer already initialized, "
   1a3e6:	4a60      	ldr	r2, [pc, #384]	; (1a568 <uarte_instance_init.constprop.0+0x280>)
   1a3e8:	9207      	str	r2, [sp, #28]
   1a3ea:	2202      	movs	r2, #2
   1a3ec:	9206      	str	r2, [sp, #24]
   1a3ee:	2300      	movs	r3, #0
   1a3f0:	aa06      	add	r2, sp, #24
   1a3f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a3f6:	4855      	ldr	r0, [pc, #340]	; (1a54c <uarte_instance_init.constprop.0+0x264>)
   1a3f8:	f7f4 fa10 	bl	e81c <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   1a3fc:	2300      	movs	r3, #0
   1a3fe:	6932      	ldr	r2, [r6, #16]
   1a400:	f882 30cc 	strb.w	r3, [r2, #204]	; 0xcc
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   1a404:	6930      	ldr	r0, [r6, #16]
   1a406:	30b8      	adds	r0, #184	; 0xb8
   1a408:	f00a ff08 	bl	2521c <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   1a40c:	4b4d      	ldr	r3, [pc, #308]	; (1a544 <uarte_instance_init.constprop.0+0x25c>)
   1a40e:	4298      	cmp	r0, r3
   1a410:	d011      	beq.n	1a436 <uarte_instance_init.constprop.0+0x14e>
			LOG_ERR("Failed to allocate PPI Channel, "
   1a412:	4b56      	ldr	r3, [pc, #344]	; (1a56c <uarte_instance_init.constprop.0+0x284>)
   1a414:	9307      	str	r3, [sp, #28]
   1a416:	2302      	movs	r3, #2
   1a418:	9306      	str	r3, [sp, #24]
   1a41a:	2300      	movs	r3, #0
   1a41c:	484b      	ldr	r0, [pc, #300]	; (1a54c <uarte_instance_init.constprop.0+0x264>)
   1a41e:	aa06      	add	r2, sp, #24
   1a420:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a424:	f7f4 f9fa 	bl	e81c <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   1a428:	2200      	movs	r2, #0
   1a42a:	6933      	ldr	r3, [r6, #16]
			nrfx_timer_uninit(&cfg->timer);
   1a42c:	4650      	mov	r0, sl
			data->async->hw_rx_counting = false;
   1a42e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			nrfx_timer_uninit(&cfg->timer);
   1a432:	f00b fcdf 	bl	25df4 <nrfx_timer_uninit>
		nrf_uarte_publish_set(uarte,
   1a436:	6933      	ldr	r3, [r6, #16]
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   1a438:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1a43c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   1a440:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   1a444:	6933      	ldr	r3, [r6, #16]
   1a446:	f8db 2010 	ldr.w	r2, [fp, #16]
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   1a44a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1a44e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1a452:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   1a456:	6933      	ldr	r3, [r6, #16]
   1a458:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
   1a45c:	f00a fee4 	bl	25228 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   1a460:	4b38      	ldr	r3, [pc, #224]	; (1a544 <uarte_instance_init.constprop.0+0x25c>)
   1a462:	4298      	cmp	r0, r3
   1a464:	f47f af7c 	bne.w	1a360 <uarte_instance_init.constprop.0+0x78>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1a468:	2301      	movs	r3, #1
   1a46a:	6932      	ldr	r2, [r6, #16]
   1a46c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    p_reg->INTENSET = mask;
   1a470:	4a3f      	ldr	r2, [pc, #252]	; (1a570 <uarte_instance_init.constprop.0+0x288>)
   1a472:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a476:	2208      	movs	r2, #8
   1a478:	f8c7 2500 	str.w	r2, [r7, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a47c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1a480:	b1a2      	cbz	r2, 1a4ac <uarte_instance_init.constprop.0+0x1c4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a482:	607b      	str	r3, [r7, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a484:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1a488:	b91b      	cbnz	r3, 1a492 <uarte_instance_init.constprop.0+0x1aa>
   1a48a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   1a48e:	2b00      	cmp	r3, #0
   1a490:	d0f8      	beq.n	1a484 <uarte_instance_init.constprop.0+0x19c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a492:	2300      	movs	r3, #0
   1a494:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1a498:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   1a49c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1a4a0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   1a4a4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   1a4a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1a4ac:	6930      	ldr	r0, [r6, #16]
   1a4ae:	2200      	movs	r2, #0
   1a4b0:	4930      	ldr	r1, [pc, #192]	; (1a574 <uarte_instance_init.constprop.0+0x28c>)
   1a4b2:	3080      	adds	r0, #128	; 0x80
   1a4b4:	f01a fc93 	bl	34dde <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1a4b8:	6933      	ldr	r3, [r6, #16]
	timer->user_data = user_data;
   1a4ba:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1a4be:	6930      	ldr	r0, [r6, #16]
   1a4c0:	2200      	movs	r2, #0
   1a4c2:	492d      	ldr	r1, [pc, #180]	; (1a578 <uarte_instance_init.constprop.0+0x290>)
   1a4c4:	3020      	adds	r0, #32
   1a4c6:	f01a fc8a 	bl	34dde <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1a4ca:	6933      	ldr	r3, [r6, #16]
   1a4cc:	655e      	str	r6, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a4ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a4d2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1a4d4:	bf5c      	itt	pl
   1a4d6:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1a4da:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a4de:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a4e2:	06db      	lsls	r3, r3, #27
   1a4e4:	bf44      	itt	mi
   1a4e6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1a4ea:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a4ee:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1a4f2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a4f6:	2300      	movs	r3, #0
   1a4f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a4fc:	2301      	movs	r3, #1
   1a4fe:	60a3      	str	r3, [r4, #8]
   1a500:	60e3      	str	r3, [r4, #12]
	return 0;
   1a502:	e72f      	b.n	1a364 <uarte_instance_init.constprop.0+0x7c>
			nrfx_timer_enable(&cfg->timer);
   1a504:	4650      	mov	r0, sl
   1a506:	f00b fc2f 	bl	25d68 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   1a50a:	4650      	mov	r0, sl
   1a50c:	f00b fc90 	bl	25e30 <nrfx_timer_clear>
   1a510:	e778      	b.n	1a404 <uarte_instance_init.constprop.0+0x11c>
    p_reg->INTENSET = mask;
   1a512:	2304      	movs	r3, #4
   1a514:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	if (ret != 0) {
   1a518:	e7a6      	b.n	1a468 <uarte_instance_init.constprop.0+0x180>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a51a:	2308      	movs	r3, #8
   1a51c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1a520:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a524:	2b00      	cmp	r3, #0
   1a526:	d1d2      	bne.n	1a4ce <uarte_instance_init.constprop.0+0x1e6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a528:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1a52c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a530:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1a534:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a538:	2301      	movs	r3, #1
   1a53a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a53e:	6023      	str	r3, [r4, #0]
}
   1a540:	e7c5      	b.n	1a4ce <uarte_instance_init.constprop.0+0x1e6>
   1a542:	bf00      	nop
   1a544:	0bad0000 	.word	0x0bad0000
   1a548:	0003b8ae 	.word	0x0003b8ae
   1a54c:	000365e8 	.word	0x000365e8
   1a550:	0003b905 	.word	0x0003b905
   1a554:	000381c3 	.word	0x000381c3
   1a558:	0003b8cd 	.word	0x0003b8cd
   1a55c:	40017000 	.word	0x40017000
   1a560:	07030100 	.word	0x07030100
   1a564:	0003225b 	.word	0x0003225b
   1a568:	0003b909 	.word	0x0003b909
   1a56c:	0003b949 	.word	0x0003b949
   1a570:	000a0210 	.word	0x000a0210
   1a574:	0003284d 	.word	0x0003284d
   1a578:	00032935 	.word	0x00032935

0001a57c <uarte_nrfx_isr_async>:
{
   1a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1a580:	6843      	ldr	r3, [r0, #4]
{
   1a582:	4604      	mov	r4, r0
	return config->uarte_regs;
   1a584:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1a586:	6903      	ldr	r3, [r0, #16]
{
   1a588:	b088      	sub	sp, #32
	if (!HW_RX_COUNTING_ENABLED(data)
   1a58a:	691a      	ldr	r2, [r3, #16]
   1a58c:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
   1a590:	b97a      	cbnz	r2, 1a5b2 <uarte_nrfx_isr_async+0x36>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a592:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1a596:	b161      	cbz	r1, 1a5b2 <uarte_nrfx_isr_async+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a598:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1a59c:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1a5a0:	691a      	ldr	r2, [r3, #16]
   1a5a2:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1a5a6:	3301      	adds	r3, #1
   1a5a8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1a5ac:	b008      	add	sp, #32
   1a5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5b2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1a5b6:	b32b      	cbz	r3, 1a604 <uarte_nrfx_isr_async+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a5b8:	2100      	movs	r1, #0
   1a5ba:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1a5be:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1a5c2:	6863      	ldr	r3, [r4, #4]
	struct uart_event evt = {
   1a5c4:	2214      	movs	r2, #20
	return config->uarte_regs;
   1a5c6:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1a5c8:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a5ca:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a5ce:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1a5d2:	f01a fd2b 	bl	3502c <memset>
   1a5d6:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a5d8:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1a5da:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a5de:	f100 80f7 	bmi.w	1a7d0 <uarte_nrfx_isr_async+0x254>
   1a5e2:	07b3      	lsls	r3, r6, #30
   1a5e4:	f100 80f6 	bmi.w	1a7d4 <uarte_nrfx_isr_async+0x258>
   1a5e8:	0777      	lsls	r7, r6, #29
   1a5ea:	f100 80f5 	bmi.w	1a7d8 <uarte_nrfx_isr_async+0x25c>
   1a5ee:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1a5f2:	4620      	mov	r0, r4
   1a5f4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1a5f6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1a5fa:	f017 fe2f 	bl	3225c <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1a5fe:	4620      	mov	r0, r4
   1a600:	f017 ff92 	bl	32528 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a604:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1a608:	2b00      	cmp	r3, #0
   1a60a:	d033      	beq.n	1a674 <uarte_nrfx_isr_async+0xf8>
    return p_reg->INTENSET & mask;
   1a60c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1a610:	06d8      	lsls	r0, r3, #27
   1a612:	d52f      	bpl.n	1a674 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a614:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1a618:	2201      	movs	r2, #1
   1a61a:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1a61e:	6926      	ldr	r6, [r4, #16]
   1a620:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1a624:	6863      	ldr	r3, [r4, #4]
   1a626:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1a628:	6933      	ldr	r3, [r6, #16]
   1a62a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1a62e:	6930      	ldr	r0, [r6, #16]
   1a630:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1a632:	f01a fbe0 	bl	34df6 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1a636:	6932      	ldr	r2, [r6, #16]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1a638:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1a63c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1a640:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1a644:	6932      	ldr	r2, [r6, #16]
   1a646:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1a648:	1a1b      	subs	r3, r3, r0
   1a64a:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1a64c:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1a64e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1a652:	4408      	add	r0, r1
	if (rx_len > 0) {
   1a654:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1a656:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1a658:	dd02      	ble.n	1a660 <uarte_nrfx_isr_async+0xe4>
		notify_uart_rx_rdy(dev, rx_len);
   1a65a:	4620      	mov	r0, r4
   1a65c:	f017 fe05 	bl	3226a <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1a660:	6931      	ldr	r1, [r6, #16]
   1a662:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1a666:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1a66a:	2b00      	cmp	r3, #0
   1a66c:	f040 80b6 	bne.w	1a7dc <uarte_nrfx_isr_async+0x260>
		data->async->is_in_irq = false;
   1a670:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a674:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1a678:	b383      	cbz	r3, 1a6dc <uarte_nrfx_isr_async+0x160>
   1a67a:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1a67e:	bb6e      	cbnz	r6, 1a6dc <uarte_nrfx_isr_async+0x160>
	struct uart_event evt = {
   1a680:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a682:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1a686:	4631      	mov	r1, r6
   1a688:	a803      	add	r0, sp, #12
   1a68a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1a68e:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1a690:	f01a fccc 	bl	3502c <memset>
   1a694:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1a696:	a903      	add	r1, sp, #12
   1a698:	4620      	mov	r0, r4
	struct uart_event evt = {
   1a69a:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1a69e:	f017 fddd 	bl	3225c <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1a6a2:	693b      	ldr	r3, [r7, #16]
   1a6a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1a6a6:	1c51      	adds	r1, r2, #1
   1a6a8:	d018      	beq.n	1a6dc <uarte_nrfx_isr_async+0x160>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1a6aa:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1a6ac:	693f      	ldr	r7, [r7, #16]
   1a6ae:	4984      	ldr	r1, [pc, #528]	; (1a8c0 <uarte_nrfx_isr_async+0x344>)
			      K_USEC(data->async->rx_timeout_slab),
   1a6b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1a6b2:	468e      	mov	lr, r1
   1a6b4:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1a6b8:	4631      	mov	r1, r6
   1a6ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a6be:	fbcc e100 	smlal	lr, r1, ip, r0
   1a6c2:	2300      	movs	r3, #0
   1a6c4:	4670      	mov	r0, lr
   1a6c6:	4a7f      	ldr	r2, [pc, #508]	; (1a8c4 <uarte_nrfx_isr_async+0x348>)
   1a6c8:	f7ee fc80 	bl	8fcc <__aeabi_uldivmod>
   1a6cc:	4602      	mov	r2, r0
   1a6ce:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1a6d0:	e9cd 0100 	strd	r0, r1, [sp]
   1a6d4:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1a6d8:	f010 fe60 	bl	2b39c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a6dc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1a6e0:	b363      	cbz	r3, 1a73c <uarte_nrfx_isr_async+0x1c0>
   1a6e2:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1a6e6:	bb4e      	cbnz	r6, 1a73c <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a6e8:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1a6ec:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1a6ee:	4620      	mov	r0, r4
   1a6f0:	6939      	ldr	r1, [r7, #16]
   1a6f2:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1a6f6:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1a6f8:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1a6fc:	f017 fdce 	bl	3229c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1a700:	6939      	ldr	r1, [r7, #16]
   1a702:	4620      	mov	r0, r4
   1a704:	3164      	adds	r1, #100	; 0x64
   1a706:	f017 fdc9 	bl	3229c <rx_buf_release>
	data->async->rx_enabled = false;
   1a70a:	693b      	ldr	r3, [r7, #16]
   1a70c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1a710:	693b      	ldr	r3, [r7, #16]
   1a712:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1a716:	b132      	cbz	r2, 1a726 <uarte_nrfx_isr_async+0x1aa>
		data->async->discard_rx_fifo = false;
   1a718:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1a71c:	4632      	mov	r2, r6
   1a71e:	4631      	mov	r1, r6
   1a720:	6860      	ldr	r0, [r4, #4]
   1a722:	f017 ff3e 	bl	325a2 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a726:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a72a:	06d8      	lsls	r0, r3, #27
   1a72c:	d503      	bpl.n	1a736 <uarte_nrfx_isr_async+0x1ba>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1a72e:	2102      	movs	r1, #2
   1a730:	4620      	mov	r0, r4
   1a732:	f017 ff6b 	bl	3260c <async_uart_release>
	notify_rx_disable(dev);
   1a736:	4620      	mov	r0, r4
   1a738:	f017 fdc8 	bl	322cc <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a73c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1a740:	b133      	cbz	r3, 1a750 <uarte_nrfx_isr_async+0x1d4>
    return p_reg->INTENSET & mask;
   1a742:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1a746:	05d9      	lsls	r1, r3, #23
   1a748:	d502      	bpl.n	1a750 <uarte_nrfx_isr_async+0x1d4>
		endtx_isr(dev);
   1a74a:	6860      	ldr	r0, [r4, #4]
   1a74c:	f017 fffa 	bl	32744 <endtx_isr.isra.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a750:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1a754:	2b00      	cmp	r3, #0
   1a756:	f43f af29 	beq.w	1a5ac <uarte_nrfx_isr_async+0x30>
    return p_reg->INTENSET & mask;
   1a75a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1a75e:	025a      	lsls	r2, r3, #9
   1a760:	f57f af24 	bpl.w	1a5ac <uarte_nrfx_isr_async+0x30>
	const struct uarte_nrfx_config *config = dev->config;
   1a764:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1a766:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a768:	e9d3 7300 	ldrd	r7, r3, [r3]
   1a76c:	06db      	lsls	r3, r3, #27
   1a76e:	d466      	bmi.n	1a83e <uarte_nrfx_isr_async+0x2c2>
	if (!data->async->tx_buf) {
   1a770:	692b      	ldr	r3, [r5, #16]
   1a772:	689b      	ldr	r3, [r3, #8]
   1a774:	2b00      	cmp	r3, #0
   1a776:	f43f af19 	beq.w	1a5ac <uarte_nrfx_isr_async+0x30>
	__asm__ volatile(
   1a77a:	f04f 0320 	mov.w	r3, #32
   1a77e:	f3ef 8211 	mrs	r2, BASEPRI
   1a782:	f383 8812 	msr	BASEPRI_MAX, r3
   1a786:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1a78a:	692b      	ldr	r3, [r5, #16]
   1a78c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1a790:	2900      	cmp	r1, #0
   1a792:	bfac      	ite	ge
   1a794:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1a798:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1a79c:	f382 8811 	msr	BASEPRI, r2
   1a7a0:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1a7a4:	692b      	ldr	r3, [r5, #16]
   1a7a6:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1a7aa:	2a00      	cmp	r2, #0
   1a7ac:	d054      	beq.n	1a858 <uarte_nrfx_isr_async+0x2dc>
	__asm__ volatile(
   1a7ae:	f04f 0320 	mov.w	r3, #32
   1a7b2:	f3ef 8611 	mrs	r6, BASEPRI
   1a7b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7ba:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1a7be:	4629      	mov	r1, r5
   1a7c0:	4620      	mov	r0, r4
   1a7c2:	f017 ff6c 	bl	3269e <start_tx_locked>
	__asm__ volatile(
   1a7c6:	f386 8811 	msr	BASEPRI, r6
   1a7ca:	f3bf 8f6f 	isb	sy
				return;
   1a7ce:	e6ed      	b.n	1a5ac <uarte_nrfx_isr_async+0x30>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a7d0:	2601      	movs	r6, #1
   1a7d2:	e70e      	b.n	1a5f2 <uarte_nrfx_isr_async+0x76>
   1a7d4:	2602      	movs	r6, #2
   1a7d6:	e70c      	b.n	1a5f2 <uarte_nrfx_isr_async+0x76>
   1a7d8:	2604      	movs	r6, #4
   1a7da:	e70a      	b.n	1a5f2 <uarte_nrfx_isr_async+0x76>
	rx_buf_release(dev, &data->async->rx_buf);
   1a7dc:	4620      	mov	r0, r4
   1a7de:	3158      	adds	r1, #88	; 0x58
   1a7e0:	f017 fd5c 	bl	3229c <rx_buf_release>
	__asm__ volatile(
   1a7e4:	f04f 0320 	mov.w	r3, #32
   1a7e8:	f3ef 8111 	mrs	r1, BASEPRI
   1a7ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7f0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1a7f4:	6933      	ldr	r3, [r6, #16]
   1a7f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1a7f8:	b1f2      	cbz	r2, 1a838 <uarte_nrfx_isr_async+0x2bc>
		data->async->rx_buf = data->async->rx_next_buf;
   1a7fa:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1a7fc:	6933      	ldr	r3, [r6, #16]
   1a7fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1a800:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1a802:	2300      	movs	r3, #0
   1a804:	6932      	ldr	r2, [r6, #16]
   1a806:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1a808:	6932      	ldr	r2, [r6, #16]
   1a80a:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1a80c:	6932      	ldr	r2, [r6, #16]
   1a80e:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a810:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1a814:	b90b      	cbnz	r3, 1a81a <uarte_nrfx_isr_async+0x29e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a816:	2301      	movs	r3, #1
   1a818:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1a81a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1a81e:	f023 0320 	bic.w	r3, r3, #32
   1a822:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1a826:	f381 8811 	msr	BASEPRI, r1
   1a82a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1a82e:	2200      	movs	r2, #0
   1a830:	6933      	ldr	r3, [r6, #16]
   1a832:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1a836:	e71d      	b.n	1a674 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a838:	2301      	movs	r3, #1
   1a83a:	607b      	str	r3, [r7, #4]
}
   1a83c:	e7f3      	b.n	1a826 <uarte_nrfx_isr_async+0x2aa>
    p_reg->INTENCLR = mask;
   1a83e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1a842:	2101      	movs	r1, #1
   1a844:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1a848:	4620      	mov	r0, r4
   1a84a:	f017 fedf 	bl	3260c <async_uart_release>
		if (!data->async->tx_size) {
   1a84e:	692b      	ldr	r3, [r5, #16]
   1a850:	68db      	ldr	r3, [r3, #12]
   1a852:	2b00      	cmp	r3, #0
   1a854:	d18c      	bne.n	1a770 <uarte_nrfx_isr_async+0x1f4>
   1a856:	e6a9      	b.n	1a5ac <uarte_nrfx_isr_async+0x30>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1a858:	6899      	ldr	r1, [r3, #8]
   1a85a:	691a      	ldr	r2, [r3, #16]
   1a85c:	4291      	cmp	r1, r2
   1a85e:	d00c      	beq.n	1a87a <uarte_nrfx_isr_async+0x2fe>
		if (amount == data->async->xfer_len) {
   1a860:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1a862:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1a864:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1a866:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1a868:	d128      	bne.n	1a8bc <uarte_nrfx_isr_async+0x340>
			if (setup_tx_cache(data)) {
   1a86a:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1a86c:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1a86e:	f017 fe80 	bl	32572 <setup_tx_cache>
   1a872:	2800      	cmp	r0, #0
   1a874:	d19b      	bne.n	1a7ae <uarte_nrfx_isr_async+0x232>
			amount = data->async->tx_cache_offset;
   1a876:	692b      	ldr	r3, [r5, #16]
   1a878:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1a87a:	6928      	ldr	r0, [r5, #16]
   1a87c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1a87e:	f01a faba 	bl	34df6 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1a882:	2214      	movs	r2, #20
   1a884:	2100      	movs	r1, #0
   1a886:	a803      	add	r0, sp, #12
   1a888:	f01a fbd0 	bl	3502c <memset>
		.data.tx.buf = data->async->tx_buf,
   1a88c:	692b      	ldr	r3, [r5, #16]
	user_callback(dev, &evt);
   1a88e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1a890:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1a892:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1a894:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1a898:	68db      	ldr	r3, [r3, #12]
   1a89a:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1a89c:	bf1c      	itt	ne
   1a89e:	2301      	movne	r3, #1
   1a8a0:	f88d 300c 	strbne.w	r3, [sp, #12]
   1a8a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a8a8:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1a8ac:	2300      	movs	r3, #0
   1a8ae:	692a      	ldr	r2, [r5, #16]
   1a8b0:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1a8b2:	692a      	ldr	r2, [r5, #16]
   1a8b4:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1a8b6:	f017 fcd1 	bl	3225c <user_callback>
   1a8ba:	e677      	b.n	1a5ac <uarte_nrfx_isr_async+0x30>
			amount += data->async->tx_cache_offset;
   1a8bc:	4616      	mov	r6, r2
   1a8be:	e7dc      	b.n	1a87a <uarte_nrfx_isr_async+0x2fe>
   1a8c0:	000f423f 	.word	0x000f423f
   1a8c4:	000f4240 	.word	0x000f4240

0001a8c8 <nrf_gpio_pin_port_decode>:
{
   1a8c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a8ca:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1a8cc:	0953      	lsrs	r3, r2, #5
   1a8ce:	d104      	bne.n	1a8da <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1a8d0:	f04f 33ff 	mov.w	r3, #4294967295
   1a8d4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a8d6:	07db      	lsls	r3, r3, #31
   1a8d8:	d40b      	bmi.n	1a8f2 <nrf_gpio_pin_port_decode+0x2a>
   1a8da:	4907      	ldr	r1, [pc, #28]	; (1a8f8 <nrf_gpio_pin_port_decode+0x30>)
   1a8dc:	4807      	ldr	r0, [pc, #28]	; (1a8fc <nrf_gpio_pin_port_decode+0x34>)
   1a8de:	f240 2347 	movw	r3, #583	; 0x247
   1a8e2:	4a07      	ldr	r2, [pc, #28]	; (1a900 <nrf_gpio_pin_port_decode+0x38>)
   1a8e4:	f014 f836 	bl	2e954 <assert_print>
   1a8e8:	f240 2147 	movw	r1, #583	; 0x247
   1a8ec:	4804      	ldr	r0, [pc, #16]	; (1a900 <nrf_gpio_pin_port_decode+0x38>)
   1a8ee:	f014 f82a 	bl	2e946 <assert_post_action>
}
   1a8f2:	4804      	ldr	r0, [pc, #16]	; (1a904 <nrf_gpio_pin_port_decode+0x3c>)
   1a8f4:	bd08      	pop	{r3, pc}
   1a8f6:	bf00      	nop
   1a8f8:	0003b7e6 	.word	0x0003b7e6
   1a8fc:	000381c3 	.word	0x000381c3
   1a900:	0003b7b3 	.word	0x0003b7b3
   1a904:	40842500 	.word	0x40842500

0001a908 <rdy_pin_idle.constprop.0>:

	return 0;
}

/* Pin activated to detect high state (using SENSE). */
static void rdy_pin_idle(struct lpuart_data *data)
   1a908:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	nrfx_err_t err;
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a90a:	2300      	movs	r3, #0
   1a90c:	2205      	movs	r2, #5
   1a90e:	e9cd 3300 	strd	r3, r3, [sp]
		.trigger = NRFX_GPIOTE_TRIGGER_HIGH
	};

	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1a912:	4619      	mov	r1, r3
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a914:	f88d 2000 	strb.w	r2, [sp]
static void rdy_pin_idle(struct lpuart_data *data)
   1a918:	4604      	mov	r4, r0
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1a91a:	466a      	mov	r2, sp
   1a91c:	6880      	ldr	r0, [r0, #8]
   1a91e:	f00a fd65 	bl	253ec <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1a922:	4b0d      	ldr	r3, [pc, #52]	; (1a958 <rdy_pin_idle.constprop.0+0x50>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1a924:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1a926:	4298      	cmp	r0, r3
   1a928:	d010      	beq.n	1a94c <rdy_pin_idle.constprop.0+0x44>
   1a92a:	f44f 7381 	mov.w	r3, #258	; 0x102
   1a92e:	4a0b      	ldr	r2, [pc, #44]	; (1a95c <rdy_pin_idle.constprop.0+0x54>)
   1a930:	490b      	ldr	r1, [pc, #44]	; (1a960 <rdy_pin_idle.constprop.0+0x58>)
   1a932:	480c      	ldr	r0, [pc, #48]	; (1a964 <rdy_pin_idle.constprop.0+0x5c>)
   1a934:	f014 f80e 	bl	2e954 <assert_print>
   1a938:	4629      	mov	r1, r5
   1a93a:	480b      	ldr	r0, [pc, #44]	; (1a968 <rdy_pin_idle.constprop.0+0x60>)
   1a93c:	462a      	mov	r2, r5
   1a93e:	f014 f809 	bl	2e954 <assert_print>
   1a942:	f44f 7181 	mov.w	r1, #258	; 0x102
   1a946:	4805      	ldr	r0, [pc, #20]	; (1a95c <rdy_pin_idle.constprop.0+0x54>)
   1a948:	f013 fffd 	bl	2e946 <assert_post_action>

	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   1a94c:	2101      	movs	r1, #1
   1a94e:	68a0      	ldr	r0, [r4, #8]
   1a950:	f00a fee0 	bl	25714 <nrfx_gpiote_trigger_enable>
}
   1a954:	b003      	add	sp, #12
   1a956:	bd30      	pop	{r4, r5, pc}
   1a958:	0bad0000 	.word	0x0bad0000
   1a95c:	0003b9b2 	.word	0x0003b9b2
   1a960:	0003b841 	.word	0x0003b841
   1a964:	000381c3 	.word	0x000381c3
   1a968:	0003b9e6 	.word	0x0003b9e6

0001a96c <api_rx_enable>:
	return err;
}

static int api_rx_enable(const struct device *dev, uint8_t *buf,
			 size_t len, int32_t timeout)
{
   1a96c:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   1a96e:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   1a970:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   1a974:	b15c      	cbz	r4, 1a98e <api_rx_enable+0x22>
   1a976:	4912      	ldr	r1, [pc, #72]	; (1a9c0 <api_rx_enable+0x54>)
   1a978:	4812      	ldr	r0, [pc, #72]	; (1a9c4 <api_rx_enable+0x58>)
   1a97a:	f240 23b5 	movw	r3, #693	; 0x2b5
   1a97e:	4a12      	ldr	r2, [pc, #72]	; (1a9c8 <api_rx_enable+0x5c>)
   1a980:	f013 ffe8 	bl	2e954 <assert_print>
   1a984:	f240 21b5 	movw	r1, #693	; 0x2b5
   1a988:	480f      	ldr	r0, [pc, #60]	; (1a9c8 <api_rx_enable+0x5c>)
   1a98a:	f013 ffdc 	bl	2e946 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a98e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1a992:	e8d5 6fef 	ldaex	r6, [r5]
   1a996:	2e00      	cmp	r6, #0
   1a998:	d104      	bne.n	1a9a4 <api_rx_enable+0x38>
   1a99a:	e8c5 1fec 	stlex	ip, r1, [r5]
   1a99e:	f1bc 0f00 	cmp.w	ip, #0
   1a9a2:	d1f6      	bne.n	1a992 <api_rx_enable+0x26>

	if (!atomic_ptr_cas((atomic_ptr_t *)&data->rx_buf, NULL, buf)) {
   1a9a4:	d108      	bne.n	1a9b8 <api_rx_enable+0x4c>
		return -EBUSY;
	}

	data->rx_len = len;
	data->rx_timeout = timeout;
   1a9a6:	e9c0 2317 	strd	r2, r3, [r0, #92]	; 0x5c
	data->rx_state = RX_IDLE;
   1a9aa:	2301      	movs	r3, #1
   1a9ac:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

	LOG_DBG("RX: Enabling");
	rdy_pin_idle(data);
   1a9b0:	f7ff ffaa 	bl	1a908 <rdy_pin_idle.constprop.0>

	return 0;
   1a9b4:	4620      	mov	r0, r4
}
   1a9b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   1a9b8:	f06f 000f 	mvn.w	r0, #15
   1a9bc:	e7fb      	b.n	1a9b6 <api_rx_enable+0x4a>
   1a9be:	bf00      	nop
   1a9c0:	0003ba00 	.word	0x0003ba00
   1a9c4:	000381c3 	.word	0x000381c3
   1a9c8:	0003b9b2 	.word	0x0003b9b2

0001a9cc <api_rx_buf_rsp>:

static int api_rx_buf_rsp(const struct device *dev, uint8_t *buf, size_t len)
{
   1a9cc:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   1a9ce:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   1a9d0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   1a9d4:	b10b      	cbz	r3, 1a9da <api_rx_buf_rsp+0xe>
   1a9d6:	2b06      	cmp	r3, #6
   1a9d8:	d10b      	bne.n	1a9f2 <api_rx_buf_rsp+0x26>
   1a9da:	490f      	ldr	r1, [pc, #60]	; (1aa18 <api_rx_buf_rsp+0x4c>)
   1a9dc:	480f      	ldr	r0, [pc, #60]	; (1aa1c <api_rx_buf_rsp+0x50>)
   1a9de:	f240 23c9 	movw	r3, #713	; 0x2c9
   1a9e2:	4a0f      	ldr	r2, [pc, #60]	; (1aa20 <api_rx_buf_rsp+0x54>)
   1a9e4:	f013 ffb6 	bl	2e954 <assert_print>
   1a9e8:	f240 21c9 	movw	r1, #713	; 0x2c9
   1a9ec:	480c      	ldr	r0, [pc, #48]	; (1aa20 <api_rx_buf_rsp+0x54>)
   1a9ee:	f013 ffaa 	bl	2e946 <assert_post_action>
		 (data->rx_state != RX_TO_OFF));

	LOG_DBG("buf rsp, state:%d", data->rx_state);
	if (data->rx_state == RX_TO_IDLE || data->rx_state == RX_BLOCKED) {
   1a9f2:	3b04      	subs	r3, #4
   1a9f4:	2b01      	cmp	r3, #1
   1a9f6:	d905      	bls.n	1aa04 <api_rx_buf_rsp+0x38>

		return 0;
	}

	return uart_rx_buf_rsp(data->uart, buf, len);
}
   1a9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return uart_rx_buf_rsp(data->uart, buf, len);
   1a9fc:	6800      	ldr	r0, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1a9fe:	6883      	ldr	r3, [r0, #8]
   1aa00:	691b      	ldr	r3, [r3, #16]
   1aa02:	4718      	bx	r3
		data->rx_state = RX_IDLE;
   1aa04:	2301      	movs	r3, #1
		data->rx_len = len;
   1aa06:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
		data->rx_state = RX_IDLE;
   1aa0a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		rdy_pin_idle(data);
   1aa0e:	f7ff ff7b 	bl	1a908 <rdy_pin_idle.constprop.0>
}
   1aa12:	2000      	movs	r0, #0
   1aa14:	bd70      	pop	{r4, r5, r6, pc}
   1aa16:	bf00      	nop
   1aa18:	0003ba19 	.word	0x0003ba19
   1aa1c:	000381c3 	.word	0x000381c3
   1aa20:	0003b9b2 	.word	0x0003b9b2

0001aa24 <int_driven_rx_feed>:
	return data->int_driven.rxlen - data->int_driven.rxrd;
}

static void int_driven_rx_feed(const struct device *dev,
			       struct lpuart_data *data)
{
   1aa24:	b508      	push	{r3, lr}
	int err;

	data->int_driven.rxlen = 0;
   1aa26:	2300      	movs	r3, #0
	data->int_driven.rxrd = 0;
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1aa28:	2280      	movs	r2, #128	; 0x80
	data->int_driven.rxrd = 0;
   1aa2a:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1aa2e:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   1aa32:	f7ff ffcb 	bl	1a9cc <api_rx_buf_rsp>
			     sizeof(data->int_driven.rxbuf));
	__ASSERT_NO_MSG(err >= 0);
   1aa36:	2800      	cmp	r0, #0
   1aa38:	da0b      	bge.n	1aa52 <int_driven_rx_feed+0x2e>
   1aa3a:	4906      	ldr	r1, [pc, #24]	; (1aa54 <int_driven_rx_feed+0x30>)
   1aa3c:	4806      	ldr	r0, [pc, #24]	; (1aa58 <int_driven_rx_feed+0x34>)
   1aa3e:	f240 3303 	movw	r3, #771	; 0x303
   1aa42:	4a06      	ldr	r2, [pc, #24]	; (1aa5c <int_driven_rx_feed+0x38>)
   1aa44:	f013 ff86 	bl	2e954 <assert_print>
   1aa48:	f240 3103 	movw	r1, #771	; 0x303
   1aa4c:	4803      	ldr	r0, [pc, #12]	; (1aa5c <int_driven_rx_feed+0x38>)
   1aa4e:	f013 ff7a 	bl	2e946 <assert_post_action>
}
   1aa52:	bd08      	pop	{r3, pc}
   1aa54:	000389ad 	.word	0x000389ad
   1aa58:	000381c3 	.word	0x000381c3
   1aa5c:	0003b9b2 	.word	0x0003b9b2

0001aa60 <int_driven_evt_handler>:

static void int_driven_evt_handler(const struct device *lpuart,
				   struct uart_event *evt,
				   void *user_data)
{
   1aa60:	460b      	mov	r3, r1
   1aa62:	b510      	push	{r4, lr}
	struct lpuart_data *data = get_dev_data(lpuart);
	bool call_handler = false;

	switch (evt->type) {
   1aa64:	781a      	ldrb	r2, [r3, #0]
	return dev->data;
   1aa66:	6901      	ldr	r1, [r0, #16]
	switch (evt->type) {
   1aa68:	2a06      	cmp	r2, #6
   1aa6a:	d823      	bhi.n	1aab4 <int_driven_evt_handler+0x54>
   1aa6c:	e8df f002 	tbb	[pc, r2]
   1aa70:	230c2204 	.word	0x230c2204
   1aa74:	2e22      	.short	0x2e22
   1aa76:	2b          	.byte	0x2b
   1aa77:	00          	.byte	0x00
	case UART_TX_DONE:
		data->int_driven.txlen = 0;
   1aa78:	2300      	movs	r3, #0
   1aa7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
	default:
		break;
	}

	if (call_handler) {
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1aa7e:	e9d1 3120 	ldrd	r3, r1, [r1, #128]	; 0x80
	}
}
   1aa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1aa86:	4718      	bx	r3
		__ASSERT_NO_MSG(data->int_driven.rxlen == 0);
   1aa88:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
   1aa8c:	b15a      	cbz	r2, 1aaa6 <int_driven_evt_handler+0x46>
   1aa8e:	491a      	ldr	r1, [pc, #104]	; (1aaf8 <int_driven_evt_handler+0x98>)
   1aa90:	f240 3313 	movw	r3, #787	; 0x313
   1aa94:	4a19      	ldr	r2, [pc, #100]	; (1aafc <int_driven_evt_handler+0x9c>)
   1aa96:	481a      	ldr	r0, [pc, #104]	; (1ab00 <int_driven_evt_handler+0xa0>)
   1aa98:	f013 ff5c 	bl	2e954 <assert_print>
   1aa9c:	f240 3113 	movw	r1, #787	; 0x313
		__ASSERT_NO_MSG(err >= 0);
   1aaa0:	4816      	ldr	r0, [pc, #88]	; (1aafc <int_driven_evt_handler+0x9c>)
   1aaa2:	f013 ff50 	bl	2e946 <assert_post_action>
		data->int_driven.rxlen = evt->data.rx.len;
   1aaa6:	68db      	ldr	r3, [r3, #12]
   1aaa8:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
		call_handler = data->int_driven.rx_enabled;
   1aaac:	f891 3195 	ldrb.w	r3, [r1, #405]	; 0x195
	if (call_handler) {
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	d1e4      	bne.n	1aa7e <int_driven_evt_handler+0x1e>
}
   1aab4:	bd10      	pop	{r4, pc}
		if (int_driven_rd_available(data) == 0) {
   1aab6:	e9d1 2363 	ldrd	r2, r3, [r1, #396]	; 0x18c
   1aaba:	429a      	cmp	r2, r3
   1aabc:	d1fa      	bne.n	1aab4 <int_driven_evt_handler+0x54>
}
   1aabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			int_driven_rx_feed(lpuart, data);
   1aac2:	f7ff bfaf 	b.w	1aa24 <int_driven_rx_feed>
		call_handler = data->int_driven.err_enabled;
   1aac6:	f891 3196 	ldrb.w	r3, [r1, #406]	; 0x196
		break;
   1aaca:	e7f1      	b.n	1aab0 <int_driven_evt_handler+0x50>
		data->int_driven.rxlen = 0;
   1aacc:	2300      	movs	r3, #0
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1aace:	2280      	movs	r2, #128	; 0x80
		data->int_driven.rxrd = 0;
   1aad0:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1aad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1aad8:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   1aadc:	f7ff ff46 	bl	1a96c <api_rx_enable>
		__ASSERT_NO_MSG(err >= 0);
   1aae0:	2800      	cmp	r0, #0
   1aae2:	dae7      	bge.n	1aab4 <int_driven_evt_handler+0x54>
   1aae4:	4907      	ldr	r1, [pc, #28]	; (1ab04 <int_driven_evt_handler+0xa4>)
   1aae6:	f240 3327 	movw	r3, #807	; 0x327
   1aaea:	4a04      	ldr	r2, [pc, #16]	; (1aafc <int_driven_evt_handler+0x9c>)
   1aaec:	4804      	ldr	r0, [pc, #16]	; (1ab00 <int_driven_evt_handler+0xa0>)
   1aaee:	f013 ff31 	bl	2e954 <assert_print>
   1aaf2:	f240 3127 	movw	r1, #807	; 0x327
   1aaf6:	e7d3      	b.n	1aaa0 <int_driven_evt_handler+0x40>
   1aaf8:	0003ba55 	.word	0x0003ba55
   1aafc:	0003b9b2 	.word	0x0003b9b2
   1ab00:	000381c3 	.word	0x000381c3
   1ab04:	000389ad 	.word	0x000389ad

0001ab08 <deactivate_rx>:
{
   1ab08:	b5b0      	push	{r4, r5, r7, lr}
   1ab0a:	b086      	sub	sp, #24
   1ab0c:	4604      	mov	r4, r0
   1ab0e:	af00      	add	r7, sp, #0
		     z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ab10:	2000      	movs	r0, #0
   1ab12:	f7fe ff1d 	bl	19950 <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1ab16:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1ab1a:	4605      	mov	r5, r0
   1ab1c:	f7f2 fbfc 	bl	d318 <onoff_cancel>

	if (rv == -EALREADY) {
   1ab20:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1ab24:	d102      	bne.n	1ab2c <deactivate_rx+0x24>
		rv = onoff_release(mgr);
   1ab26:	4628      	mov	r0, r5
   1ab28:	f7f2 fb8c 	bl	d244 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	da0b      	bge.n	1ab48 <deactivate_rx+0x40>
   1ab30:	491a      	ldr	r1, [pc, #104]	; (1ab9c <deactivate_rx+0x94>)
   1ab32:	481b      	ldr	r0, [pc, #108]	; (1aba0 <deactivate_rx+0x98>)
   1ab34:	f240 1345 	movw	r3, #325	; 0x145
   1ab38:	4a1a      	ldr	r2, [pc, #104]	; (1aba4 <deactivate_rx+0x9c>)
   1ab3a:	f013 ff0b 	bl	2e954 <assert_print>
   1ab3e:	f240 1145 	movw	r1, #325	; 0x145
   1ab42:	4818      	ldr	r0, [pc, #96]	; (1aba4 <deactivate_rx+0x9c>)
   1ab44:	f013 feff 	bl	2e946 <assert_post_action>
	data->rx_state = RX_TO_IDLE;
   1ab48:	2304      	movs	r3, #4
	err = uart_rx_disable(data->uart);
   1ab4a:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_IDLE;
   1ab4c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   1ab50:	6883      	ldr	r3, [r0, #8]
   1ab52:	695b      	ldr	r3, [r3, #20]
   1ab54:	4798      	blx	r3
	if (err < 0 && err != -EFAULT) {
   1ab56:	2800      	cmp	r0, #0
   1ab58:	da11      	bge.n	1ab7e <deactivate_rx+0x76>
   1ab5a:	f110 0f0e 	cmn.w	r0, #14
   1ab5e:	d011      	beq.n	1ab84 <deactivate_rx+0x7c>
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   1ab60:	466c      	mov	r4, sp
   1ab62:	b088      	sub	sp, #32
   1ab64:	466a      	mov	r2, sp
   1ab66:	4b10      	ldr	r3, [pc, #64]	; (1aba8 <deactivate_rx+0xa0>)
   1ab68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ab6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ab70:	2303      	movs	r3, #3
   1ab72:	480e      	ldr	r0, [pc, #56]	; (1abac <deactivate_rx+0xa4>)
   1ab74:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab78:	f017 ff92 	bl	32aa0 <z_log_msg_static_create.constprop.0>
   1ab7c:	46a5      	mov	sp, r4
}
   1ab7e:	3718      	adds	r7, #24
   1ab80:	46bd      	mov	sp, r7
   1ab82:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Rx disable failed.");
   1ab84:	4b0a      	ldr	r3, [pc, #40]	; (1abb0 <deactivate_rx+0xa8>)
   1ab86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ab8a:	617b      	str	r3, [r7, #20]
   1ab8c:	2302      	movs	r3, #2
   1ab8e:	4807      	ldr	r0, [pc, #28]	; (1abac <deactivate_rx+0xa4>)
   1ab90:	f107 0210 	add.w	r2, r7, #16
   1ab94:	613b      	str	r3, [r7, #16]
   1ab96:	f017 ff83 	bl	32aa0 <z_log_msg_static_create.constprop.0>
}
   1ab9a:	e7f0      	b.n	1ab7e <deactivate_rx+0x76>
   1ab9c:	000389ad 	.word	0x000389ad
   1aba0:	000381c3 	.word	0x000381c3
   1aba4:	0003b9b2 	.word	0x0003b9b2
   1aba8:	0003ba71 	.word	0x0003ba71
   1abac:	000364b0 	.word	0x000364b0
   1abb0:	0003ba91 	.word	0x0003ba91

0001abb4 <rdy_pin_handler.part.0>:
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1abb4:	b5b0      	push	{r4, r5, r7, lr}
		if (data->rx_state != RX_ACTIVE) {
   1abb6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1abba:	4604      	mov	r4, r0
		if (data->rx_state != RX_ACTIVE) {
   1abbc:	2b03      	cmp	r3, #3
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1abbe:	af00      	add	r7, sp, #0
		if (data->rx_state != RX_ACTIVE) {
   1abc0:	d016      	beq.n	1abf0 <rdy_pin_handler.part.0+0x3c>
			LOG_WRN("RX: End detected at unexpected state (%d).", data->rx_state);
   1abc2:	466d      	mov	r5, sp
   1abc4:	b088      	sub	sp, #32
   1abc6:	466a      	mov	r2, sp
   1abc8:	490b      	ldr	r1, [pc, #44]	; (1abf8 <rdy_pin_handler.part.0+0x44>)
   1abca:	480c      	ldr	r0, [pc, #48]	; (1abfc <rdy_pin_handler.part.0+0x48>)
   1abcc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1abd0:	2303      	movs	r3, #3
   1abd2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1abd6:	f842 3f10 	str.w	r3, [r2, #16]!
   1abda:	f017 ff61 	bl	32aa0 <z_log_msg_static_create.constprop.0>
			data->rx_state = RX_IDLE;
   1abde:	2301      	movs	r3, #1
   1abe0:	46ad      	mov	sp, r5
			rdy_pin_idle(data);
   1abe2:	4620      	mov	r0, r4
			data->rx_state = RX_IDLE;
   1abe4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			rdy_pin_idle(data);
   1abe8:	f7ff fe8e 	bl	1a908 <rdy_pin_idle.constprop.0>
}
   1abec:	46bd      	mov	sp, r7
   1abee:	bdb0      	pop	{r4, r5, r7, pc}
		deactivate_rx(data);
   1abf0:	f7ff ff8a 	bl	1ab08 <deactivate_rx>
   1abf4:	e7fa      	b.n	1abec <rdy_pin_handler.part.0+0x38>
   1abf6:	bf00      	nop
   1abf8:	0003baa4 	.word	0x0003baa4
   1abfc:	000364b0 	.word	0x000364b0

0001ac00 <rdy_pin_handler>:
{
   1ac00:	b538      	push	{r3, r4, r5, lr}
   1ac02:	460d      	mov	r5, r1
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1ac04:	6890      	ldr	r0, [r2, #8]
{
   1ac06:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1ac08:	f00a fdee 	bl	257e8 <nrfx_gpiote_trigger_disable>
	if (trigger == NRFX_GPIOTE_TRIGGER_HIGH) {
   1ac0c:	2d05      	cmp	r5, #5
   1ac0e:	d12d      	bne.n	1ac6c <rdy_pin_handler+0x6c>
		__ASSERT_NO_MSG(data->rx_state != RX_ACTIVE);
   1ac10:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1ac14:	2b03      	cmp	r3, #3
   1ac16:	d10b      	bne.n	1ac30 <rdy_pin_handler+0x30>
   1ac18:	4917      	ldr	r1, [pc, #92]	; (1ac78 <rdy_pin_handler+0x78>)
   1ac1a:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1ac1e:	4a17      	ldr	r2, [pc, #92]	; (1ac7c <rdy_pin_handler+0x7c>)
   1ac20:	4817      	ldr	r0, [pc, #92]	; (1ac80 <rdy_pin_handler+0x80>)
   1ac22:	f013 fe97 	bl	2e954 <assert_print>
   1ac26:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(err >= 0);
   1ac2a:	4814      	ldr	r0, [pc, #80]	; (1ac7c <rdy_pin_handler+0x7c>)
   1ac2c:	f013 fe8b 	bl	2e946 <assert_post_action>
		if (data->rx_state == RX_IDLE) {
   1ac30:	2b01      	cmp	r3, #1
   1ac32:	d120      	bne.n	1ac76 <rdy_pin_handler+0x76>
	data->rx_state = RX_PREPARE;
   1ac34:	2302      	movs	r3, #2
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ac36:	2000      	movs	r0, #0
	data->rx_state = RX_PREPARE;
   1ac38:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ac3c:	f7fe fe88 	bl	19950 <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ac40:	4b10      	ldr	r3, [pc, #64]	; (1ac84 <rdy_pin_handler+0x84>)
   1ac42:	2200      	movs	r2, #0
   1ac44:	6763      	str	r3, [r4, #116]	; 0x74
   1ac46:	2303      	movs	r3, #3
   1ac48:	67e2      	str	r2, [r4, #124]	; 0x7c
   1ac4a:	67a3      	str	r3, [r4, #120]	; 0x78
	err = onoff_request(mgr, &data->rx_clk_cli);
   1ac4c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1ac50:	f7f2 fa60 	bl	d114 <onoff_request>
	__ASSERT_NO_MSG(err >= 0);
   1ac54:	2800      	cmp	r0, #0
   1ac56:	da0e      	bge.n	1ac76 <rdy_pin_handler+0x76>
   1ac58:	490b      	ldr	r1, [pc, #44]	; (1ac88 <rdy_pin_handler+0x88>)
   1ac5a:	f44f 73c1 	mov.w	r3, #386	; 0x182
   1ac5e:	4a07      	ldr	r2, [pc, #28]	; (1ac7c <rdy_pin_handler+0x7c>)
   1ac60:	4807      	ldr	r0, [pc, #28]	; (1ac80 <rdy_pin_handler+0x80>)
   1ac62:	f013 fe77 	bl	2e954 <assert_print>
   1ac66:	f44f 71c1 	mov.w	r1, #386	; 0x182
   1ac6a:	e7de      	b.n	1ac2a <rdy_pin_handler+0x2a>
   1ac6c:	4620      	mov	r0, r4
}
   1ac6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ac72:	f7ff bf9f 	b.w	1abb4 <rdy_pin_handler.part.0>
   1ac76:	bd38      	pop	{r3, r4, r5, pc}
   1ac78:	0003bacf 	.word	0x0003bacf
   1ac7c:	0003b9b2 	.word	0x0003b9b2
   1ac80:	000381c3 	.word	0x000381c3
   1ac84:	0001aff1 	.word	0x0001aff1
   1ac88:	000389ad 	.word	0x000389ad

0001ac8c <api_tx>:
{
   1ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   1ac8e:	6905      	ldr	r5, [r0, #16]
{
   1ac90:	b085      	sub	sp, #20
   1ac92:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1ac96:	e8d0 4fef 	ldaex	r4, [r0]
   1ac9a:	2c00      	cmp	r4, #0
   1ac9c:	d103      	bne.n	1aca6 <api_tx+0x1a>
   1ac9e:	e8c0 1fe6 	stlex	r6, r1, [r0]
   1aca2:	2e00      	cmp	r6, #0
   1aca4:	d1f7      	bne.n	1ac96 <api_tx+0xa>
	if (!atomic_ptr_cas((atomic_ptr_t *)&data->tx_buf, NULL, (void *)buf)) {
   1aca6:	d131      	bne.n	1ad0c <api_tx+0x80>
	data->tx_len = len;
   1aca8:	652a      	str	r2, [r5, #80]	; 0x50
	k_timer_start(&data->tx_timer,
   1acaa:	1c5a      	adds	r2, r3, #1
   1acac:	f105 0610 	add.w	r6, r5, #16
   1acb0:	d028      	beq.n	1ad04 <api_tx+0x78>
   1acb2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1acb6:	2100      	movs	r1, #0
   1acb8:	4816      	ldr	r0, [pc, #88]	; (1ad14 <api_tx+0x88>)
		      timeout == SYS_FOREVER_US ? K_FOREVER : K_USEC(timeout),
   1acba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   1acbe:	4a16      	ldr	r2, [pc, #88]	; (1ad18 <api_tx+0x8c>)
   1acc0:	2300      	movs	r3, #0
   1acc2:	fbc4 0107 	smlal	r0, r1, r4, r7
   1acc6:	f7ee f981 	bl	8fcc <__aeabi_uldivmod>
   1acca:	4602      	mov	r2, r0
   1accc:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1acce:	2100      	movs	r1, #0
   1acd0:	2000      	movs	r0, #0
   1acd2:	e9cd 0100 	strd	r0, r1, [sp]
   1acd6:	4630      	mov	r0, r6
   1acd8:	f010 fb60 	bl	2b39c <z_impl_k_timer_start>
	nrf_gpio_reconfigure(data->req_pin, NULL, NULL, &pull, NULL, NULL);
   1acdc:	686c      	ldr	r4, [r5, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1acde:	a803      	add	r0, sp, #12
   1ace0:	9403      	str	r4, [sp, #12]
   1ace2:	f7ff fdf1 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ace6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1acea:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_enable(data->req_pin, true);
   1acee:	2101      	movs	r1, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1acf0:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   1acf4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   1acf8:	6868      	ldr	r0, [r5, #4]
   1acfa:	f00a fd0b 	bl	25714 <nrfx_gpiote_trigger_enable>
	return 0;
   1acfe:	2000      	movs	r0, #0
}
   1ad00:	b005      	add	sp, #20
   1ad02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_timer_start(&data->tx_timer,
   1ad04:	f04f 32ff 	mov.w	r2, #4294967295
   1ad08:	4613      	mov	r3, r2
   1ad0a:	e7e0      	b.n	1acce <api_tx+0x42>
		return -EBUSY;
   1ad0c:	f06f 000f 	mvn.w	r0, #15
   1ad10:	e7f6      	b.n	1ad00 <api_tx+0x74>
   1ad12:	bf00      	nop
   1ad14:	000f423f 	.word	0x000f423f
   1ad18:	000f4240 	.word	0x000f4240

0001ad1c <api_fifo_fill>:
			 int size)
{
	struct lpuart_data *data = get_dev_data(dev);
	int err;

	size = MIN(size, sizeof(data->int_driven.txbuf));
   1ad1c:	2a80      	cmp	r2, #128	; 0x80
   1ad1e:	bf28      	it	cs
   1ad20:	2280      	movcs	r2, #128	; 0x80
{
   1ad22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad24:	4606      	mov	r6, r0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   1ad26:	4614      	mov	r4, r2
	return dev->data;
   1ad28:	6905      	ldr	r5, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ad2a:	f505 7384 	add.w	r3, r5, #264	; 0x108
   1ad2e:	e8d3 2fef 	ldaex	r2, [r3]
   1ad32:	2a00      	cmp	r2, #0
   1ad34:	d103      	bne.n	1ad3e <api_fifo_fill+0x22>
   1ad36:	e8c3 4fe0 	stlex	r0, r4, [r3]
   1ad3a:	2800      	cmp	r0, #0
   1ad3c:	d1f7      	bne.n	1ad2e <api_fifo_fill+0x12>
	if (!atomic_cas((atomic_t *)&data->int_driven.txlen, 0, size)) {
   1ad3e:	d113      	bne.n	1ad68 <api_fifo_fill+0x4c>
		return 0;
	}

	memcpy(data->int_driven.txbuf, tx_data, size);
   1ad40:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1ad44:	4622      	mov	r2, r4
   1ad46:	4638      	mov	r0, r7
   1ad48:	f01a f950 	bl	34fec <memcpy>

	err = api_tx(dev, data->int_driven.txbuf,
   1ad4c:	4639      	mov	r1, r7
   1ad4e:	4630      	mov	r0, r6
   1ad50:	4b06      	ldr	r3, [pc, #24]	; (1ad6c <api_fifo_fill+0x50>)
   1ad52:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
   1ad56:	f7ff ff99 	bl	1ac8c <api_tx>
		     data->int_driven.txlen,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
   1ad5a:	2800      	cmp	r0, #0
   1ad5c:	db01      	blt.n	1ad62 <api_fifo_fill+0x46>
	size = MIN(size, sizeof(data->int_driven.txbuf));
   1ad5e:	4620      	mov	r0, r4

		return 0;
	}

	return size;
}
   1ad60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven.txlen = 0;
   1ad62:	2300      	movs	r3, #0
   1ad64:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
		return 0;
   1ad68:	2000      	movs	r0, #0
   1ad6a:	e7f9      	b.n	1ad60 <api_fifo_fill+0x44>
   1ad6c:	000f4240 	.word	0x000f4240

0001ad70 <api_poll_out>:
	return -ENOTSUP;
#endif
}

static void api_poll_out(const struct device *dev, unsigned char out_char)
{
   1ad70:	b570      	push	{r4, r5, r6, lr}
   1ad72:	4605      	mov	r5, r0
   1ad74:	460e      	mov	r6, r1
	return dev->data;
   1ad76:	6904      	ldr	r4, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);
	bool thread_ctx = !k_is_in_isr() && !k_is_pre_kernel();
   1ad78:	f019 ff06 	bl	34b88 <k_is_in_isr>
   1ad7c:	b910      	cbnz	r0, 1ad84 <api_poll_out+0x14>
	return !z_sys_post_kernel;
   1ad7e:	4b12      	ldr	r3, [pc, #72]	; (1adc8 <api_poll_out+0x58>)
   1ad80:	781b      	ldrb	r3, [r3, #0]
   1ad82:	b98b      	cbnz	r3, 1ada8 <api_poll_out+0x38>
	if (thread_ctx) {
		/* in thread context pend until tx is in idle */
		while (data->tx_buf) {
			k_msleep(1);
		}
	} else if (data->tx_buf) {
   1ad84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1ad86:	b953      	cbnz	r3, 1ad9e <api_poll_out+0x2e>
		return;
	}

	if (!atomic_cas(&data->txbyte, -1, out_char)) {
   1ad88:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1ad8c:	e8d1 3fef 	ldaex	r3, [r1]
   1ad90:	3301      	adds	r3, #1
   1ad92:	d103      	bne.n	1ad9c <api_poll_out+0x2c>
   1ad94:	e8c1 6fe2 	stlex	r2, r6, [r1]
   1ad98:	2a00      	cmp	r2, #0
   1ad9a:	d1f7      	bne.n	1ad8c <api_poll_out+0x1c>
   1ad9c:	d008      	beq.n	1adb0 <api_poll_out+0x40>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
		data->txbyte = -1;
	}
}
   1ad9e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   1ada0:	2021      	movs	r0, #33	; 0x21
   1ada2:	2100      	movs	r1, #0
   1ada4:	f00f fe22 	bl	2a9ec <z_impl_k_sleep>
		while (data->tx_buf) {
   1ada8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1adaa:	2b00      	cmp	r3, #0
   1adac:	d1f8      	bne.n	1ada0 <api_poll_out+0x30>
   1adae:	e7eb      	b.n	1ad88 <api_poll_out+0x18>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
   1adb0:	4b06      	ldr	r3, [pc, #24]	; (1adcc <api_poll_out+0x5c>)
   1adb2:	2201      	movs	r2, #1
   1adb4:	4628      	mov	r0, r5
   1adb6:	f7ff ff69 	bl	1ac8c <api_tx>
	if (err < 0) {
   1adba:	2800      	cmp	r0, #0
		data->txbyte = -1;
   1adbc:	bfbc      	itt	lt
   1adbe:	f04f 33ff 	movlt.w	r3, #4294967295
   1adc2:	64a3      	strlt	r3, [r4, #72]	; 0x48
   1adc4:	e7eb      	b.n	1ad9e <api_poll_out+0x2e>
   1adc6:	bf00      	nop
   1adc8:	2001287f 	.word	0x2001287f
   1adcc:	000f4240 	.word	0x000f4240

0001add0 <uart_callback>:
{
   1add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type) {
   1add4:	780b      	ldrb	r3, [r1, #0]
{
   1add6:	460d      	mov	r5, r1
   1add8:	4616      	mov	r6, r2
	return dev->data;
   1adda:	6914      	ldr	r4, [r2, #16]
{
   1addc:	af00      	add	r7, sp, #0
	switch (evt->type) {
   1adde:	2b06      	cmp	r3, #6
   1ade0:	d811      	bhi.n	1ae06 <uart_callback+0x36>
   1ade2:	e8df f003 	tbb	[pc, r3]
   1ade6:	1604      	.short	0x1604
   1ade8:	351f1b13 	.word	0x351f1b13
   1adec:	16          	.byte	0x16
   1aded:	00          	.byte	0x00
		const uint8_t *txbuf = evt->data.tx.buf;
   1adee:	f8d1 8004 	ldr.w	r8, [r1, #4]
		tx_complete(data);
   1adf2:	4620      	mov	r0, r4
   1adf4:	f017 fe6c 	bl	32ad0 <tx_complete>
		if (txbuf == (void *)&data->txbyte) {
   1adf8:	f104 0348 	add.w	r3, r4, #72	; 0x48
   1adfc:	4598      	cmp	r8, r3
   1adfe:	d108      	bne.n	1ae12 <uart_callback+0x42>
			data->txbyte = -1;
   1ae00:	f04f 33ff 	mov.w	r3, #4294967295
   1ae04:	64a3      	str	r3, [r4, #72]	; 0x48
}
   1ae06:	46bd      	mov	sp, r7
   1ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->rx_got_data = true;
   1ae0c:	2301      	movs	r3, #1
   1ae0e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
		user_callback(dev, evt);
   1ae12:	4629      	mov	r1, r5
   1ae14:	4630      	mov	r0, r6
   1ae16:	f017 fd96 	bl	32946 <user_callback>
		break;
   1ae1a:	e7f4      	b.n	1ae06 <uart_callback+0x36>
		if (data->rx_len < CONFIG_NRF_SW_LPUART_MAX_PACKET_SIZE) {
   1ae1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ae1e:	2b7f      	cmp	r3, #127	; 0x7f
   1ae20:	d8f1      	bhi.n	1ae06 <uart_callback+0x36>
   1ae22:	e7f6      	b.n	1ae12 <uart_callback+0x42>
		if (!data->rx_got_data) {
   1ae24:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ae28:	2b00      	cmp	r3, #0
   1ae2a:	d1f2      	bne.n	1ae12 <uart_callback+0x42>
			LOG_ERR("Empty receiver state:%d", data->rx_state);
   1ae2c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1ae30:	466c      	mov	r4, sp
   1ae32:	b088      	sub	sp, #32
   1ae34:	466a      	mov	r2, sp
   1ae36:	491a      	ldr	r1, [pc, #104]	; (1aea0 <uart_callback+0xd0>)
   1ae38:	481a      	ldr	r0, [pc, #104]	; (1aea4 <uart_callback+0xd4>)
   1ae3a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ae3e:	2303      	movs	r3, #3
   1ae40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae44:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae48:	f017 fe2a 	bl	32aa0 <z_log_msg_static_create.constprop.0>
   1ae4c:	46a5      	mov	sp, r4
   1ae4e:	e7e0      	b.n	1ae12 <uart_callback+0x42>
		__ASSERT_NO_MSG((data->rx_state != RX_IDLE) &&
   1ae50:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1ae54:	2b01      	cmp	r3, #1
   1ae56:	d80b      	bhi.n	1ae70 <uart_callback+0xa0>
   1ae58:	4913      	ldr	r1, [pc, #76]	; (1aea8 <uart_callback+0xd8>)
   1ae5a:	4814      	ldr	r0, [pc, #80]	; (1aeac <uart_callback+0xdc>)
   1ae5c:	f240 232f 	movw	r3, #559	; 0x22f
   1ae60:	4a13      	ldr	r2, [pc, #76]	; (1aeb0 <uart_callback+0xe0>)
   1ae62:	f013 fd77 	bl	2e954 <assert_print>
   1ae66:	f240 212f 	movw	r1, #559	; 0x22f
   1ae6a:	4811      	ldr	r0, [pc, #68]	; (1aeb0 <uart_callback+0xe0>)
   1ae6c:	f013 fd6b 	bl	2e946 <assert_post_action>
		if (data->rx_state == RX_TO_IDLE) {
   1ae70:	2b04      	cmp	r3, #4
   1ae72:	d10f      	bne.n	1ae94 <uart_callback+0xc4>
			if (data->rx_got_data) {
   1ae74:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ae78:	b12b      	cbz	r3, 1ae86 <uart_callback+0xb6>
				data->rx_state = RX_BLOCKED;
   1ae7a:	2305      	movs	r3, #5
   1ae7c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				evt->type = UART_RX_BUF_REQUEST;
   1ae80:	2303      	movs	r3, #3
   1ae82:	700b      	strb	r3, [r1, #0]
		if (call_cb) {
   1ae84:	e7c5      	b.n	1ae12 <uart_callback+0x42>
				data->rx_state = RX_IDLE;
   1ae86:	2301      	movs	r3, #1
				rdy_pin_idle(data);
   1ae88:	4620      	mov	r0, r4
				data->rx_state = RX_IDLE;
   1ae8a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				rdy_pin_idle(data);
   1ae8e:	f7ff fd3b 	bl	1a908 <rdy_pin_idle.constprop.0>
		if (call_cb) {
   1ae92:	e7b8      	b.n	1ae06 <uart_callback+0x36>
			data->rx_buf = NULL;
   1ae94:	2300      	movs	r3, #0
   1ae96:	65a3      	str	r3, [r4, #88]	; 0x58
			data->rx_state = RX_OFF;
   1ae98:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		if (call_cb) {
   1ae9c:	e7b9      	b.n	1ae12 <uart_callback+0x42>
   1ae9e:	bf00      	nop
   1aea0:	0003baeb 	.word	0x0003baeb
   1aea4:	000364b0 	.word	0x000364b0
   1aea8:	0003bb03 	.word	0x0003bb03
   1aeac:	000381c3 	.word	0x000381c3
   1aeb0:	0003b9b2 	.word	0x0003b9b2

0001aeb4 <tx_timeout>:
{
   1aeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aeb6:	b087      	sub	sp, #28
	return timer->user_data;
   1aeb8:	6b45      	ldr	r5, [r0, #52]	; 0x34
	return dev->data;
   1aeba:	692c      	ldr	r4, [r5, #16]
	const uint8_t *txbuf = data->tx_buf;
   1aebc:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
	LOG_WRN("Tx timeout");
   1aebe:	4b20      	ldr	r3, [pc, #128]	; (1af40 <tx_timeout+0x8c>)
   1aec0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aec4:	9305      	str	r3, [sp, #20]
   1aec6:	2302      	movs	r3, #2
   1aec8:	481e      	ldr	r0, [pc, #120]	; (1af44 <tx_timeout+0x90>)
   1aeca:	aa04      	add	r2, sp, #16
   1aecc:	9304      	str	r3, [sp, #16]
   1aece:	f017 fde7 	bl	32aa0 <z_log_msg_static_create.constprop.0>
	if (data->tx_active) {
   1aed2:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
   1aed6:	b1cf      	cbz	r7, 1af0c <tx_timeout+0x58>
		err = uart_tx_abort(data->uart);
   1aed8:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   1aeda:	6883      	ldr	r3, [r0, #8]
   1aedc:	689b      	ldr	r3, [r3, #8]
   1aede:	4798      	blx	r3
		if (err == -EFAULT) {
   1aee0:	f110 0f0e 	cmn.w	r0, #14
   1aee4:	4604      	mov	r4, r0
   1aee6:	d01b      	beq.n	1af20 <tx_timeout+0x6c>
		} else if (err < 0) {
   1aee8:	2800      	cmp	r0, #0
   1aeea:	da19      	bge.n	1af20 <tx_timeout+0x6c>
			__ASSERT(0, "Unexpected tx_abort error:%d", err);
   1aeec:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1aef0:	4a15      	ldr	r2, [pc, #84]	; (1af48 <tx_timeout+0x94>)
   1aef2:	4916      	ldr	r1, [pc, #88]	; (1af4c <tx_timeout+0x98>)
   1aef4:	4816      	ldr	r0, [pc, #88]	; (1af50 <tx_timeout+0x9c>)
   1aef6:	f013 fd2d 	bl	2e954 <assert_print>
   1aefa:	4621      	mov	r1, r4
   1aefc:	4815      	ldr	r0, [pc, #84]	; (1af54 <tx_timeout+0xa0>)
   1aefe:	f013 fd29 	bl	2e954 <assert_print>
   1af02:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1af06:	4810      	ldr	r0, [pc, #64]	; (1af48 <tx_timeout+0x94>)
   1af08:	f013 fd1d 	bl	2e946 <assert_post_action>
	tx_complete(data);
   1af0c:	4620      	mov	r0, r4
   1af0e:	f017 fddf 	bl	32ad0 <tx_complete>
	if (txbuf == (void *)&data->txbyte) {
   1af12:	f104 0348 	add.w	r3, r4, #72	; 0x48
   1af16:	429e      	cmp	r6, r3
   1af18:	d104      	bne.n	1af24 <tx_timeout+0x70>
		data->txbyte = -1;
   1af1a:	f04f 33ff 	mov.w	r3, #4294967295
   1af1e:	64a3      	str	r3, [r4, #72]	; 0x48
}
   1af20:	b007      	add	sp, #28
   1af22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct uart_event evt = {
   1af24:	4639      	mov	r1, r7
   1af26:	2214      	movs	r2, #20
   1af28:	4668      	mov	r0, sp
   1af2a:	f01a f87f 	bl	3502c <memset>
   1af2e:	2301      	movs	r3, #1
		user_callback(dev, &evt);
   1af30:	4669      	mov	r1, sp
   1af32:	4628      	mov	r0, r5
		struct uart_event evt = {
   1af34:	f88d 3000 	strb.w	r3, [sp]
   1af38:	9601      	str	r6, [sp, #4]
		user_callback(dev, &evt);
   1af3a:	f017 fd04 	bl	32946 <user_callback>
   1af3e:	e7ef      	b.n	1af20 <tx_timeout+0x6c>
   1af40:	0003bb3d 	.word	0x0003bb3d
   1af44:	000364b0 	.word	0x000364b0
   1af48:	0003b9b2 	.word	0x0003b9b2
   1af4c:	0003c13d 	.word	0x0003c13d
   1af50:	000381c3 	.word	0x000381c3
   1af54:	0003bb48 	.word	0x0003bb48

0001af58 <req_pin_handler>:
{
   1af58:	b5b0      	push	{r4, r5, r7, lr}
   1af5a:	b086      	sub	sp, #24
	if (data->tx_buf == NULL) {
   1af5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
{
   1af5e:	4614      	mov	r4, r2
   1af60:	af00      	add	r7, sp, #0
	if (data->tx_buf == NULL) {
   1af62:	b983      	cbnz	r3, 1af86 <req_pin_handler+0x2e>
		LOG_WRN("TX: request confirmed but no data to send");
   1af64:	4b1f      	ldr	r3, [pc, #124]	; (1afe4 <req_pin_handler+0x8c>)
   1af66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1af6a:	617b      	str	r3, [r7, #20]
   1af6c:	2302      	movs	r3, #2
   1af6e:	481e      	ldr	r0, [pc, #120]	; (1afe8 <req_pin_handler+0x90>)
   1af70:	f107 0210 	add.w	r2, r7, #16
   1af74:	613b      	str	r3, [r7, #16]
   1af76:	f017 fd93 	bl	32aa0 <z_log_msg_static_create.constprop.0>
		tx_complete(data);
   1af7a:	4620      	mov	r0, r4
   1af7c:	f017 fda8 	bl	32ad0 <tx_complete>
}
   1af80:	3718      	adds	r7, #24
   1af82:	46bd      	mov	sp, r7
   1af84:	bdb0      	pop	{r4, r5, r7, pc}
	req_pin_set(data);
   1af86:	4610      	mov	r0, r2
   1af88:	f017 fd8d 	bl	32aa6 <req_pin_set>
	z_impl_k_timer_stop(timer);
   1af8c:	f104 0010 	add.w	r0, r4, #16
   1af90:	f019 ff31 	bl	34df6 <z_impl_k_timer_stop>
	__asm__ volatile(
   1af94:	f04f 0220 	mov.w	r2, #32
   1af98:	f3ef 8311 	mrs	r3, BASEPRI
   1af9c:	f382 8812 	msr	BASEPRI_MAX, r2
   1afa0:	f3bf 8f6f 	isb	sy
	data->tx_active = true;
   1afa4:	2201      	movs	r2, #1
   1afa6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
	len = data->tx_len;
   1afaa:	e9d4 1213 	ldrd	r1, r2, [r4, #76]	; 0x4c
	__asm__ volatile(
   1afae:	f383 8811 	msr	BASEPRI, r3
   1afb2:	f3bf 8f6f 	isb	sy
	err = uart_tx(data->uart, buf, len, 0);
   1afb6:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
   1afb8:	6883      	ldr	r3, [r0, #8]
   1afba:	685d      	ldr	r5, [r3, #4]
   1afbc:	2300      	movs	r3, #0
   1afbe:	47a8      	blx	r5
	if (err < 0) {
   1afc0:	2800      	cmp	r0, #0
   1afc2:	dadd      	bge.n	1af80 <req_pin_handler+0x28>
		LOG_ERR("TX: Not started (error: %d)", err);
   1afc4:	466d      	mov	r5, sp
   1afc6:	b088      	sub	sp, #32
   1afc8:	466a      	mov	r2, sp
   1afca:	4b08      	ldr	r3, [pc, #32]	; (1afec <req_pin_handler+0x94>)
   1afcc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1afd0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1afd4:	2303      	movs	r3, #3
   1afd6:	4804      	ldr	r0, [pc, #16]	; (1afe8 <req_pin_handler+0x90>)
   1afd8:	f842 3f10 	str.w	r3, [r2, #16]!
   1afdc:	f017 fd60 	bl	32aa0 <z_log_msg_static_create.constprop.0>
   1afe0:	46ad      	mov	sp, r5
   1afe2:	e7ca      	b.n	1af7a <req_pin_handler+0x22>
   1afe4:	0003bb67 	.word	0x0003bb67
   1afe8:	000364b0 	.word	0x000364b0
   1afec:	0003bb91 	.word	0x0003bb91

0001aff0 <rx_hfclk_callback>:
{
   1aff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(res >= 0);
   1aff4:	2b00      	cmp	r3, #0
{
   1aff6:	460c      	mov	r4, r1
   1aff8:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(res >= 0);
   1affa:	da0b      	bge.n	1b014 <rx_hfclk_callback+0x24>
   1affc:	4962      	ldr	r1, [pc, #392]	; (1b188 <rx_hfclk_callback+0x198>)
   1affe:	f240 1375 	movw	r3, #373	; 0x175
   1b002:	4a62      	ldr	r2, [pc, #392]	; (1b18c <rx_hfclk_callback+0x19c>)
   1b004:	4862      	ldr	r0, [pc, #392]	; (1b190 <rx_hfclk_callback+0x1a0>)
   1b006:	f013 fca5 	bl	2e954 <assert_print>
   1b00a:	f240 1175 	movw	r1, #373	; 0x175
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1b00e:	485f      	ldr	r0, [pc, #380]	; (1b18c <rx_hfclk_callback+0x19c>)
   1b010:	f013 fc99 	bl	2e946 <assert_post_action>
	if (data->rx_buf == NULL) {
   1b014:	f851 1c18 	ldr.w	r1, [r1, #-24]
   1b018:	b961      	cbnz	r1, 1b034 <rx_hfclk_callback+0x44>
		LOG_ERR("RX: Request before enabling RX");
   1b01a:	4b5e      	ldr	r3, [pc, #376]	; (1b194 <rx_hfclk_callback+0x1a4>)
   1b01c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b020:	9307      	str	r3, [sp, #28]
   1b022:	2302      	movs	r3, #2
   1b024:	485c      	ldr	r0, [pc, #368]	; (1b198 <rx_hfclk_callback+0x1a8>)
   1b026:	aa06      	add	r2, sp, #24
   1b028:	9306      	str	r3, [sp, #24]
   1b02a:	f017 fd39 	bl	32aa0 <z_log_msg_static_create.constprop.0>
}
   1b02e:	b009      	add	sp, #36	; 0x24
   1b030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->rx_got_data = false;
   1b034:	2300      	movs	r3, #0
   1b036:	f804 3c1b 	strb.w	r3, [r4, #-27]
	data->rx_state = RX_ACTIVE;
   1b03a:	2303      	movs	r3, #3
	err = uart_rx_enable(data->uart, data->rx_buf,
   1b03c:	f854 0c70 	ldr.w	r0, [r4, #-112]
	data->rx_state = RX_ACTIVE;
   1b040:	f804 3c04 	strb.w	r3, [r4, #-4]
	err = uart_rx_enable(data->uart, data->rx_buf,
   1b044:	e954 2305 	ldrd	r2, r3, [r4, #-20]
	return api->rx_enable(dev, buf, len, timeout);
   1b048:	6885      	ldr	r5, [r0, #8]
   1b04a:	68ed      	ldr	r5, [r5, #12]
   1b04c:	47a8      	blx	r5
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1b04e:	4605      	mov	r5, r0
   1b050:	b168      	cbz	r0, 1b06e <rx_hfclk_callback+0x7e>
   1b052:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1b056:	4a4d      	ldr	r2, [pc, #308]	; (1b18c <rx_hfclk_callback+0x19c>)
   1b058:	4950      	ldr	r1, [pc, #320]	; (1b19c <rx_hfclk_callback+0x1ac>)
   1b05a:	484d      	ldr	r0, [pc, #308]	; (1b190 <rx_hfclk_callback+0x1a0>)
   1b05c:	f013 fc7a 	bl	2e954 <assert_print>
   1b060:	4629      	mov	r1, r5
   1b062:	484f      	ldr	r0, [pc, #316]	; (1b1a0 <rx_hfclk_callback+0x1b0>)
   1b064:	f013 fc76 	bl	2e954 <assert_print>
   1b068:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1b06c:	e7cf      	b.n	1b00e <rx_hfclk_callback+0x1e>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b06e:	2602      	movs	r6, #2
	nrf_gpio_reconfigure(data->rdy_pin, &dir_out, NULL, NULL, NULL, NULL);
   1b070:	f854 8c68 	ldr.w	r8, [r4, #-104]
		.p_in_channel = &data->rdy_ch
   1b074:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b078:	a802      	add	r0, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b07a:	9301      	str	r3, [sp, #4]
   1b07c:	f88d 6000 	strb.w	r6, [sp]
   1b080:	f8cd 8008 	str.w	r8, [sp, #8]
   1b084:	f7ff fc20 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b088:	eb00 0088 	add.w	r0, r0, r8, lsl #2
   1b08c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1b090:	4629      	mov	r1, r5
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b092:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1b096:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   1b09a:	466a      	mov	r2, sp
   1b09c:	462b      	mov	r3, r5
   1b09e:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1b0a2:	f00a f9a3 	bl	253ec <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1b0a6:	4b3f      	ldr	r3, [pc, #252]	; (1b1a4 <rx_hfclk_callback+0x1b4>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1b0a8:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1b0aa:	4298      	cmp	r0, r3
		.p_in_channel = &data->rdy_ch
   1b0ac:	f1a4 0770 	sub.w	r7, r4, #112	; 0x70
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1b0b0:	d00e      	beq.n	1b0d0 <rx_hfclk_callback+0xe0>
   1b0b2:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1b0b6:	4a35      	ldr	r2, [pc, #212]	; (1b18c <rx_hfclk_callback+0x19c>)
   1b0b8:	493b      	ldr	r1, [pc, #236]	; (1b1a8 <rx_hfclk_callback+0x1b8>)
   1b0ba:	4835      	ldr	r0, [pc, #212]	; (1b190 <rx_hfclk_callback+0x1a0>)
   1b0bc:	f013 fc4a 	bl	2e954 <assert_print>
   1b0c0:	4629      	mov	r1, r5
   1b0c2:	462a      	mov	r2, r5
   1b0c4:	4839      	ldr	r0, [pc, #228]	; (1b1ac <rx_hfclk_callback+0x1bc>)
   1b0c6:	f013 fc45 	bl	2e954 <assert_print>
   1b0ca:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1b0ce:	e79e      	b.n	1b00e <rx_hfclk_callback+0x1e>
	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   1b0d0:	2101      	movs	r1, #1
   1b0d2:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1b0d6:	f00a fb1d 	bl	25714 <nrfx_gpiote_trigger_enable>
	__asm__ volatile(
   1b0da:	f04f 0320 	mov.w	r3, #32
   1b0de:	f3ef 8811 	mrs	r8, BASEPRI
   1b0e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0e6:	f3bf 8f6f 	isb	sy
	nrf_gpiote_event_t event = nrf_gpiote_in_event_get(data->rdy_ch);
   1b0ea:	f814 5c64 	ldrb.w	r5, [r4, #-100]
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1b0ee:	2d07      	cmp	r5, #7
   1b0f0:	d90a      	bls.n	1b108 <rx_hfclk_callback+0x118>
   1b0f2:	492f      	ldr	r1, [pc, #188]	; (1b1b0 <rx_hfclk_callback+0x1c0>)
   1b0f4:	4826      	ldr	r0, [pc, #152]	; (1b190 <rx_hfclk_callback+0x1a0>)
   1b0f6:	f44f 7323 	mov.w	r3, #652	; 0x28c
   1b0fa:	4a2e      	ldr	r2, [pc, #184]	; (1b1b4 <rx_hfclk_callback+0x1c4>)
   1b0fc:	f013 fc2a 	bl	2e954 <assert_print>
   1b100:	f44f 7123 	mov.w	r1, #652	; 0x28c
   1b104:	482b      	ldr	r0, [pc, #172]	; (1b1b4 <rx_hfclk_callback+0x1c4>)
   1b106:	e783      	b.n	1b010 <rx_hfclk_callback+0x20>
	nrf_gpio_reconfigure(data->rdy_pin, &dir_in, NULL, NULL, NULL, NULL);
   1b108:	f854 9c68 	ldr.w	r9, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b10c:	a802      	add	r0, sp, #8
   1b10e:	f8cd 9008 	str.w	r9, [sp, #8]
   1b112:	f7ff fbd9 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b116:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   1b11a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   1b11e:	f023 0301 	bic.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1b122:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	z_impl_k_busy_wait(usec_to_wait);
   1b126:	2001      	movs	r0, #1
   1b128:	f019 fe33 	bl	34d92 <z_impl_k_busy_wait>
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   1b12c:	f854 9c68 	ldr.w	r9, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b130:	a802      	add	r0, sp, #8
   1b132:	f8cd 9008 	str.w	r9, [sp, #8]
   1b136:	f7ff fbc7 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   1b13a:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b13c:	fa23 f309 	lsr.w	r3, r3, r9
   1b140:	07db      	lsls	r3, r3, #31
   1b142:	d504      	bpl.n	1b14e <rx_hfclk_callback+0x15e>
	__asm__ volatile(
   1b144:	f388 8811 	msr	BASEPRI, r8
   1b148:	f3bf 8f6f 	isb	sy
}
   1b14c:	e76f      	b.n	1b02e <rx_hfclk_callback+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b14e:	4b1a      	ldr	r3, [pc, #104]	; (1b1b8 <rx_hfclk_callback+0x1c8>)
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b150:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b152:	595b      	ldr	r3, [r3, r5]
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   1b154:	2b00      	cmp	r3, #0
   1b156:	d1f5      	bne.n	1b144 <rx_hfclk_callback+0x154>
		LOG_WRN("req pin low when expected high");
   1b158:	4b18      	ldr	r3, [pc, #96]	; (1b1bc <rx_hfclk_callback+0x1cc>)
   1b15a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b15e:	480e      	ldr	r0, [pc, #56]	; (1b198 <rx_hfclk_callback+0x1a8>)
   1b160:	aa06      	add	r2, sp, #24
   1b162:	e9cd 6306 	strd	r6, r3, [sp, #24]
   1b166:	f017 fc9b 	bl	32aa0 <z_log_msg_static_create.constprop.0>
   1b16a:	f388 8811 	msr	BASEPRI, r8
   1b16e:	f3bf 8f6f 	isb	sy
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1b172:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1b176:	f00a fb37 	bl	257e8 <nrfx_gpiote_trigger_disable>
		deactivate_rx(data);
   1b17a:	4638      	mov	r0, r7
}
   1b17c:	b009      	add	sp, #36	; 0x24
   1b17e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		deactivate_rx(data);
   1b182:	f7ff bcc1 	b.w	1ab08 <deactivate_rx>
   1b186:	bf00      	nop
   1b188:	0003bbad 	.word	0x0003bbad
   1b18c:	0003b9b2 	.word	0x0003b9b2
   1b190:	000381c3 	.word	0x000381c3
   1b194:	0003bbb6 	.word	0x0003bbb6
   1b198:	000364b0 	.word	0x000364b0
   1b19c:	00038711 	.word	0x00038711
   1b1a0:	0003bbd5 	.word	0x0003bbd5
   1b1a4:	0bad0000 	.word	0x0bad0000
   1b1a8:	0003b841 	.word	0x0003b841
   1b1ac:	0003b9e6 	.word	0x0003b9e6
   1b1b0:	0003bc29 	.word	0x0003bc29
   1b1b4:	0003bbf4 	.word	0x0003bbf4
   1b1b8:	40031100 	.word	0x40031100
   1b1bc:	0003bc33 	.word	0x0003bc33

0001b1c0 <lpuart_init>:
{
   1b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1c4:	b089      	sub	sp, #36	; 0x24
   1b1c6:	4605      	mov	r5, r0
	return dev->data;
   1b1c8:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1b1ca:	f8d0 9004 	ldr.w	r9, [r0, #4]
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   1b1ce:	4858      	ldr	r0, [pc, #352]	; (1b330 <lpuart_init+0x170>)
{
   1b1d0:	af00      	add	r7, sp, #0
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   1b1d2:	6020      	str	r0, [r4, #0]
   1b1d4:	f019 fca1 	bl	34b1a <z_device_is_ready>
	if (!device_is_ready(data->uart)) {
   1b1d8:	2800      	cmp	r0, #0
   1b1da:	f000 80a6 	beq.w	1b32a <lpuart_init+0x16a>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1de:	2302      	movs	r3, #2
	nrfx_gpiote_input_config_t input_config = {
   1b1e0:	f04f 0801 	mov.w	r8, #1
	err = req_pin_init(data, cfg->req_pin);
   1b1e4:	f8d9 a000 	ldr.w	sl, [r9]
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1e8:	743b      	strb	r3, [r7, #16]
	nrfx_gpiote_handler_config_t handler_config = {
   1b1ea:	4b52      	ldr	r3, [pc, #328]	; (1b334 <lpuart_init+0x174>)
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1ec:	f107 0b0c 	add.w	fp, r7, #12
	nrfx_gpiote_handler_config_t handler_config = {
   1b1f0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	err = nrfx_gpiote_channel_alloc(&ch);
   1b1f4:	4658      	mov	r0, fp
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1f6:	f8c7 b014 	str.w	fp, [r7, #20]
	nrfx_gpiote_input_config_t input_config = {
   1b1fa:	f887 8008 	strb.w	r8, [r7, #8]
	err = nrfx_gpiote_channel_alloc(&ch);
   1b1fe:	f00a fa83 	bl	25708 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   1b202:	4b4d      	ldr	r3, [pc, #308]	; (1b338 <lpuart_init+0x178>)
	err = nrfx_gpiote_channel_alloc(&ch);
   1b204:	4606      	mov	r6, r0
	if (err != NRFX_SUCCESS) {
   1b206:	4298      	cmp	r0, r3
   1b208:	d122      	bne.n	1b250 <lpuart_init+0x90>
	err = nrfx_gpiote_input_configure(pin, &input_config, &trigger_config, &handler_config);
   1b20a:	4650      	mov	r0, sl
   1b20c:	f107 0318 	add.w	r3, r7, #24
   1b210:	f107 0210 	add.w	r2, r7, #16
   1b214:	f107 0108 	add.w	r1, r7, #8
   1b218:	f00a f8e8 	bl	253ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b21c:	42b0      	cmp	r0, r6
   1b21e:	6078      	str	r0, [r7, #4]
   1b220:	d128      	bne.n	1b274 <lpuart_init+0xb4>
	nrfx_gpiote_input_config_t input_config = {
   1b222:	2600      	movs	r6, #0
	req_pin_idle(data);
   1b224:	4620      	mov	r0, r4
	data->req_pin = pin;
   1b226:	f8c4 a004 	str.w	sl, [r4, #4]
	req_pin_idle(data);
   1b22a:	f017 fbf0 	bl	32a0e <req_pin_idle>
	nrfx_gpiote_handler_config_t handler_config = {
   1b22e:	4a43      	ldr	r2, [pc, #268]	; (1b33c <lpuart_init+0x17c>)
	err = rdy_pin_init(data, cfg->rdy_pin);
   1b230:	f8d9 9004 	ldr.w	r9, [r9, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1b234:	f104 000c 	add.w	r0, r4, #12
	nrfx_gpiote_handler_config_t handler_config = {
   1b238:	e9c7 2406 	strd	r2, r4, [r7, #24]
	nrfx_gpiote_input_config_t input_config = {
   1b23c:	733e      	strb	r6, [r7, #12]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1b23e:	f00a fa63 	bl	25708 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   1b242:	687b      	ldr	r3, [r7, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1b244:	4682      	mov	sl, r0
	if (err != NRFX_SUCCESS) {
   1b246:	4298      	cmp	r0, r3
   1b248:	d017      	beq.n	1b27a <lpuart_init+0xba>
		return -ENOMEM;
   1b24a:	f06f 050b 	mvn.w	r5, #11
   1b24e:	e02e      	b.n	1b2ae <lpuart_init+0xee>
		return -ENOMEM;
   1b250:	f06f 050b 	mvn.w	r5, #11
		LOG_ERR("req pin init failed:%d", err);
   1b254:	466c      	mov	r4, sp
   1b256:	b088      	sub	sp, #32
   1b258:	466a      	mov	r2, sp
   1b25a:	4b39      	ldr	r3, [pc, #228]	; (1b340 <lpuart_init+0x180>)
		LOG_ERR("rdy pin init failed:%d", err);
   1b25c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b260:	2303      	movs	r3, #3
   1b262:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b266:	4837      	ldr	r0, [pc, #220]	; (1b344 <lpuart_init+0x184>)
   1b268:	f842 3f10 	str.w	r3, [r2, #16]!
   1b26c:	f017 fc18 	bl	32aa0 <z_log_msg_static_create.constprop.0>
   1b270:	46a5      	mov	sp, r4
		return err;
   1b272:	e039      	b.n	1b2e8 <lpuart_init+0x128>
		return -EINVAL;
   1b274:	f06f 0515 	mvn.w	r5, #21
   1b278:	e7ec      	b.n	1b254 <lpuart_init+0x94>
	err = nrfx_gpiote_input_configure(pin, &input_config, NULL, &handler_config);
   1b27a:	4632      	mov	r2, r6
   1b27c:	4659      	mov	r1, fp
   1b27e:	4648      	mov	r0, r9
   1b280:	f107 0318 	add.w	r3, r7, #24
   1b284:	f00a f8b2 	bl	253ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b288:	4550      	cmp	r0, sl
   1b28a:	d015      	beq.n	1b2b8 <lpuart_init+0xf8>
		LOG_ERR("err:%08x", err);
   1b28c:	466c      	mov	r4, sp
   1b28e:	b088      	sub	sp, #32
   1b290:	466a      	mov	r2, sp
   1b292:	4b2d      	ldr	r3, [pc, #180]	; (1b348 <lpuart_init+0x188>)
   1b294:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b298:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b29c:	2303      	movs	r3, #3
   1b29e:	4829      	ldr	r0, [pc, #164]	; (1b344 <lpuart_init+0x184>)
   1b2a0:	f842 3f10 	str.w	r3, [r2, #16]!
   1b2a4:	f017 fbfc 	bl	32aa0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b2a8:	f06f 0515 	mvn.w	r5, #21
   1b2ac:	46a5      	mov	sp, r4
		LOG_ERR("rdy pin init failed:%d", err);
   1b2ae:	466c      	mov	r4, sp
   1b2b0:	b088      	sub	sp, #32
   1b2b2:	466a      	mov	r2, sp
   1b2b4:	4b25      	ldr	r3, [pc, #148]	; (1b34c <lpuart_init+0x18c>)
   1b2b6:	e7d1      	b.n	1b25c <lpuart_init+0x9c>
	data->rdy_pin = pin;
   1b2b8:	f8c4 9008 	str.w	r9, [r4, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b2bc:	f107 0010 	add.w	r0, r7, #16
   1b2c0:	f8c7 9010 	str.w	r9, [r7, #16]
   1b2c4:	f7ff fb00 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b2c8:	fa08 f309 	lsl.w	r3, r8, r9
    p_reg->OUTCLR = clr_mask;
   1b2cc:	60c3      	str	r3, [r0, #12]
	k_timer_init(&data->tx_timer, tx_timeout, NULL);
   1b2ce:	4632      	mov	r2, r6
   1b2d0:	491f      	ldr	r1, [pc, #124]	; (1b350 <lpuart_init+0x190>)
   1b2d2:	f104 0010 	add.w	r0, r4, #16
   1b2d6:	f019 fd82 	bl	34dde <k_timer_init>
	err = uart_callback_set(data->uart, uart_callback, (void *)dev);
   1b2da:	6820      	ldr	r0, [r4, #0]
	timer->user_data = user_data;
   1b2dc:	6465      	str	r5, [r4, #68]	; 0x44
	if (api->callback_set == NULL) {
   1b2de:	6883      	ldr	r3, [r0, #8]
   1b2e0:	681b      	ldr	r3, [r3, #0]
   1b2e2:	b933      	cbnz	r3, 1b2f2 <lpuart_init+0x132>
		return -EINVAL;
   1b2e4:	f06f 0515 	mvn.w	r5, #21
}
   1b2e8:	4628      	mov	r0, r5
   1b2ea:	3724      	adds	r7, #36	; 0x24
   1b2ec:	46bd      	mov	sp, r7
   1b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->callback_set(dev, callback, user_data);
   1b2f2:	462a      	mov	r2, r5
   1b2f4:	4917      	ldr	r1, [pc, #92]	; (1b354 <lpuart_init+0x194>)
   1b2f6:	4798      	blx	r3
	if (err < 0) {
   1b2f8:	2800      	cmp	r0, #0
   1b2fa:	dbf3      	blt.n	1b2e4 <lpuart_init+0x124>
	if (api->callback_set == NULL) {
   1b2fc:	68ab      	ldr	r3, [r5, #8]
   1b2fe:	681b      	ldr	r3, [r3, #0]
   1b300:	2b00      	cmp	r3, #0
   1b302:	d0ef      	beq.n	1b2e4 <lpuart_init+0x124>
	return api->callback_set(dev, callback, user_data);
   1b304:	4632      	mov	r2, r6
   1b306:	4628      	mov	r0, r5
   1b308:	4913      	ldr	r1, [pc, #76]	; (1b358 <lpuart_init+0x198>)
   1b30a:	4798      	blx	r3
	if (err < 0) {
   1b30c:	2800      	cmp	r0, #0
   1b30e:	dbe9      	blt.n	1b2e4 <lpuart_init+0x124>
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   1b310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b314:	4628      	mov	r0, r5
   1b316:	2280      	movs	r2, #128	; 0x80
   1b318:	f504 7186 	add.w	r1, r4, #268	; 0x10c
   1b31c:	f7ff fb26 	bl	1a96c <api_rx_enable>
	data->txbyte = -1;
   1b320:	f04f 33ff 	mov.w	r3, #4294967295
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   1b324:	4605      	mov	r5, r0
	data->txbyte = -1;
   1b326:	64a3      	str	r3, [r4, #72]	; 0x48
	return err;
   1b328:	e7de      	b.n	1b2e8 <lpuart_init+0x128>
		return -ENODEV;
   1b32a:	f06f 0512 	mvn.w	r5, #18
   1b32e:	e7db      	b.n	1b2e8 <lpuart_init+0x128>
   1b330:	000360b4 	.word	0x000360b4
   1b334:	0001af59 	.word	0x0001af59
   1b338:	0bad0000 	.word	0x0bad0000
   1b33c:	0001ac01 	.word	0x0001ac01
   1b340:	0003bc52 	.word	0x0003bc52
   1b344:	000364b0 	.word	0x000364b0
   1b348:	0003bc69 	.word	0x0003bc69
   1b34c:	0003bc72 	.word	0x0003bc72
   1b350:	0001aeb5 	.word	0x0001aeb5
   1b354:	0001add1 	.word	0x0001add1
   1b358:	0001aa61 	.word	0x0001aa61

0001b35c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1b35c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1b35e:	490e      	ldr	r1, [pc, #56]	; (1b398 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1b360:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1b364:	e9d1 3400 	ldrd	r3, r4, [r1]
   1b368:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1b36a:	18c3      	adds	r3, r0, r3
   1b36c:	f144 0400 	adc.w	r4, r4, #0
   1b370:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1b374:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1b378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1b37c:	d209      	bcs.n	1b392 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1b37e:	4b07      	ldr	r3, [pc, #28]	; (1b39c <sys_clock_timeout_handler+0x40>)
   1b380:	681b      	ldr	r3, [r3, #0]
   1b382:	0a1a      	lsrs	r2, r3, #8
   1b384:	061b      	lsls	r3, r3, #24
   1b386:	199c      	adds	r4, r3, r6
   1b388:	4b05      	ldr	r3, [pc, #20]	; (1b3a0 <sys_clock_timeout_handler+0x44>)
   1b38a:	f142 0500 	adc.w	r5, r2, #0
   1b38e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1b392:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1b394:	f00f be4e 	b.w	2b034 <sys_clock_announce>
   1b398:	2000dd08 	.word	0x2000dd08
   1b39c:	2000fd38 	.word	0x2000fd38
   1b3a0:	2000dd10 	.word	0x2000dd10

0001b3a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1b3a4:	4b0d      	ldr	r3, [pc, #52]	; (1b3dc <z_nrf_rtc_timer_read+0x38>)
   1b3a6:	6818      	ldr	r0, [r3, #0]
   1b3a8:	0a01      	lsrs	r1, r0, #8
   1b3aa:	0600      	lsls	r0, r0, #24
   1b3ac:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1b3b0:	4b0b      	ldr	r3, [pc, #44]	; (1b3e0 <z_nrf_rtc_timer_read+0x3c>)
   1b3b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1b3b6:	1818      	adds	r0, r3, r0
   1b3b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1b3bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b3c0:	d20a      	bcs.n	1b3d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1b3c2:	4b08      	ldr	r3, [pc, #32]	; (1b3e4 <z_nrf_rtc_timer_read+0x40>)
   1b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b3c8:	4290      	cmp	r0, r2
   1b3ca:	eb71 0303 	sbcs.w	r3, r1, r3
   1b3ce:	d203      	bcs.n	1b3d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1b3d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1b3d4:	f141 0100 	adc.w	r1, r1, #0
}
   1b3d8:	4770      	bx	lr
   1b3da:	bf00      	nop
   1b3dc:	2000fd38 	.word	0x2000fd38
   1b3e0:	40015000 	.word	0x40015000
   1b3e4:	2000dd10 	.word	0x2000dd10

0001b3e8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1b3e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1b3ec:	4b2e      	ldr	r3, [pc, #184]	; (1b4a8 <rtc_nrf_isr+0xc0>)
   1b3ee:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1b3f2:	0790      	lsls	r0, r2, #30
   1b3f4:	d50b      	bpl.n	1b40e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b3f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1b3fa:	b142      	cbz	r2, 1b40e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b3fc:	2200      	movs	r2, #0
   1b3fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1b402:	4a2a      	ldr	r2, [pc, #168]	; (1b4ac <rtc_nrf_isr+0xc4>)
   1b404:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1b408:	6813      	ldr	r3, [r2, #0]
   1b40a:	3301      	adds	r3, #1
   1b40c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1b40e:	4a26      	ldr	r2, [pc, #152]	; (1b4a8 <rtc_nrf_isr+0xc0>)
   1b410:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1b414:	03d9      	lsls	r1, r3, #15
   1b416:	d527      	bpl.n	1b468 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b418:	4b25      	ldr	r3, [pc, #148]	; (1b4b0 <rtc_nrf_isr+0xc8>)
   1b41a:	e8d3 1fef 	ldaex	r1, [r3]
   1b41e:	f021 0001 	bic.w	r0, r1, #1
   1b422:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1b426:	2c00      	cmp	r4, #0
   1b428:	d1f7      	bne.n	1b41a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1b42a:	07cb      	lsls	r3, r1, #31
   1b42c:	d402      	bmi.n	1b434 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b42e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1b432:	b1cb      	cbz	r3, 1b468 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b434:	2500      	movs	r5, #0
   1b436:	4c1c      	ldr	r4, [pc, #112]	; (1b4a8 <rtc_nrf_isr+0xc0>)
   1b438:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1b43c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1b440:	f7ff ffb0 	bl	1b3a4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1b444:	f04f 0320 	mov.w	r3, #32
   1b448:	f3ef 8211 	mrs	r2, BASEPRI
   1b44c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b450:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1b454:	4b17      	ldr	r3, [pc, #92]	; (1b4b4 <rtc_nrf_isr+0xcc>)
   1b456:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1b45a:	42b0      	cmp	r0, r6
   1b45c:	41b9      	sbcs	r1, r7
   1b45e:	d206      	bcs.n	1b46e <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1b460:	f382 8811 	msr	BASEPRI, r2
   1b464:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1b468:	b003      	add	sp, #12
   1b46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b46e:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1b472:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b476:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1b47a:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b47c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b484:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b488:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1b48c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1b490:	f382 8811 	msr	BASEPRI, r2
   1b494:	f3bf 8f6f 	isb	sy
		if (handler) {
   1b498:	2900      	cmp	r1, #0
   1b49a:	d0e5      	beq.n	1b468 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1b49c:	9000      	str	r0, [sp, #0]
   1b49e:	4632      	mov	r2, r6
   1b4a0:	463b      	mov	r3, r7
   1b4a2:	4628      	mov	r0, r5
   1b4a4:	4788      	blx	r1
   1b4a6:	e7df      	b.n	1b468 <rtc_nrf_isr+0x80>
   1b4a8:	40015000 	.word	0x40015000
   1b4ac:	2000fd38 	.word	0x2000fd38
   1b4b0:	2000fd30 	.word	0x2000fd30
   1b4b4:	2000dcf8 	.word	0x2000dcf8

0001b4b8 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1b4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4bc:	4604      	mov	r4, r0
   1b4be:	460d      	mov	r5, r1
   1b4c0:	4f43      	ldr	r7, [pc, #268]	; (1b5d0 <compare_set.constprop.0.isra.0+0x118>)
   1b4c2:	e8d7 8fef 	ldaex	r8, [r7]
   1b4c6:	f028 0301 	bic.w	r3, r8, #1
   1b4ca:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b4ce:	2a00      	cmp	r2, #0
   1b4d0:	d1f7      	bne.n	1b4c2 <compare_set.constprop.0.isra.0+0xa>
    p_reg->INTENCLR = mask;
   1b4d2:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1b4d6:	4e3f      	ldr	r6, [pc, #252]	; (1b5d4 <compare_set.constprop.0.isra.0+0x11c>)
   1b4d8:	f8c6 9308 	str.w	r9, [r6, #776]	; 0x308
   1b4dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b4e0:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1b4e4:	f7ff ff5e 	bl	1b3a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1b4e8:	42a0      	cmp	r0, r4
   1b4ea:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   1b4ee:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1b4f2:	d240      	bcs.n	1b576 <compare_set.constprop.0.isra.0+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1b4f4:	4b38      	ldr	r3, [pc, #224]	; (1b5d8 <compare_set.constprop.0.isra.0+0x120>)
   1b4f6:	1a20      	subs	r0, r4, r0
   1b4f8:	eb65 0101 	sbc.w	r1, r5, r1
   1b4fc:	4298      	cmp	r0, r3
   1b4fe:	f171 0100 	sbcs.w	r1, r1, #0
   1b502:	d248      	bcs.n	1b596 <compare_set.constprop.0.isra.0+0xde>
		if (target_time != cc_data[chan].target_time) {
   1b504:	4b35      	ldr	r3, [pc, #212]	; (1b5dc <compare_set.constprop.0.isra.0+0x124>)
   1b506:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1b50a:	429d      	cmp	r5, r3
   1b50c:	bf08      	it	eq
   1b50e:	4294      	cmpeq	r4, r2
   1b510:	d03a      	beq.n	1b588 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b512:	f04f 0c00 	mov.w	ip, #0
	return absolute_time & COUNTER_MAX;
   1b516:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
   1b51a:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1b51c:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1b51e:	f06f 0e02 	mvn.w	lr, #2
    p_reg->EVTENCLR = mask;
   1b522:	f8c6 9348 	str.w	r9, [r6, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b526:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   1b52a:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1b52e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1b5e0 <compare_set.constprop.0.isra.0+0x128>
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1b532:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1b536:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1b53a:	f8c6 9344 	str.w	r9, [r6, #836]	; 0x344
     return p_reg->COUNTER;
   1b53e:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1b542:	ebae 0302 	sub.w	r3, lr, r2
   1b546:	445b      	add	r3, fp
   1b548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1b54c:	4553      	cmp	r3, sl
   1b54e:	d91b      	bls.n	1b588 <compare_set.constprop.0.isra.0+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b550:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			if (event_check(chan)) {
   1b554:	b15b      	cbz	r3, 1b56e <compare_set.constprop.0.isra.0+0xb6>
     return p_reg->COUNTER;
   1b556:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1b55a:	1a13      	subs	r3, r2, r0
   1b55c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1b560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1b564:	d910      	bls.n	1b588 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b566:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   1b56a:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			cc_val = now + cc_inc;
   1b56e:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1b572:	3101      	adds	r1, #1
	for (;;) {
   1b574:	e7dd      	b.n	1b532 <compare_set.constprop.0.isra.0+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b576:	4b1b      	ldr	r3, [pc, #108]	; (1b5e4 <compare_set.constprop.0.isra.0+0x12c>)
   1b578:	e8d3 1fef 	ldaex	r1, [r3]
   1b57c:	f041 0101 	orr.w	r1, r1, #1
   1b580:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b584:	2a00      	cmp	r2, #0
   1b586:	d1f7      	bne.n	1b578 <compare_set.constprop.0.isra.0+0xc0>
	cc_data[chan].target_time = target_time;
   1b588:	4b14      	ldr	r3, [pc, #80]	; (1b5dc <compare_set.constprop.0.isra.0+0x124>)
	cc_data[chan].callback = handler;
   1b58a:	4a17      	ldr	r2, [pc, #92]	; (1b5e8 <compare_set.constprop.0.isra.0+0x130>)
	cc_data[chan].target_time = target_time;
   1b58c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].callback = handler;
   1b590:	601a      	str	r2, [r3, #0]
	cc_data[chan].user_context = user_data;
   1b592:	2200      	movs	r2, #0
   1b594:	605a      	str	r2, [r3, #4]
	if (key) {
   1b596:	f1b8 0f00 	cmp.w	r8, #0
   1b59a:	d016      	beq.n	1b5ca <compare_set.constprop.0.isra.0+0x112>
   1b59c:	e8d7 3fef 	ldaex	r3, [r7]
   1b5a0:	f043 0301 	orr.w	r3, r3, #1
   1b5a4:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b5a8:	2a00      	cmp	r2, #0
   1b5aa:	d1f7      	bne.n	1b59c <compare_set.constprop.0.isra.0+0xe4>
    p_reg->INTENSET = mask;
   1b5ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b5b0:	4b08      	ldr	r3, [pc, #32]	; (1b5d4 <compare_set.constprop.0.isra.0+0x11c>)
   1b5b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b5b6:	4b0b      	ldr	r3, [pc, #44]	; (1b5e4 <compare_set.constprop.0.isra.0+0x12c>)
   1b5b8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1b5bc:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b5be:	bf42      	ittt	mi
   1b5c0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1b5c4:	4b09      	ldrmi	r3, [pc, #36]	; (1b5ec <compare_set.constprop.0.isra.0+0x134>)
   1b5c6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1b5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ce:	bf00      	nop
   1b5d0:	2000fd34 	.word	0x2000fd34
   1b5d4:	40015000 	.word	0x40015000
   1b5d8:	00800001 	.word	0x00800001
   1b5dc:	2000dcf8 	.word	0x2000dcf8
   1b5e0:	007ffffd 	.word	0x007ffffd
   1b5e4:	2000fd30 	.word	0x2000fd30
   1b5e8:	0001b35d 	.word	0x0001b35d
   1b5ec:	e000e100 	.word	0xe000e100

0001b5f0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1b5f0:	b570      	push	{r4, r5, r6, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b5f2:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->PRESCALER = val;
   1b5f6:	2500      	movs	r5, #0
   1b5f8:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   1b5fc:	4c16      	ldr	r4, [pc, #88]	; (1b658 <sys_clock_driver_init+0x68>)
   1b5fe:	4b17      	ldr	r3, [pc, #92]	; (1b65c <sys_clock_driver_init+0x6c>)
    p_reg->INTENSET = mask;
   1b600:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   1b602:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1b606:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1b60a:	4b15      	ldr	r3, [pc, #84]	; (1b660 <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1b60c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1b610:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1b614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b618:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b61c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1b620:	4b10      	ldr	r3, [pc, #64]	; (1b664 <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1b622:	2101      	movs	r1, #1
   1b624:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1b628:	2015      	movs	r0, #21
   1b62a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1b62e:	462a      	mov	r2, r5
   1b630:	f7f4 fee8 	bl	10404 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1b634:	2015      	movs	r0, #21
   1b636:	f7f4 feb5 	bl	103a4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b63a:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1b63c:	4a0a      	ldr	r2, [pc, #40]	; (1b668 <sys_clock_driver_init+0x78>)
   1b63e:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b640:	2100      	movs	r1, #0
   1b642:	6023      	str	r3, [r4, #0]
   1b644:	4809      	ldr	r0, [pc, #36]	; (1b66c <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1b646:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b648:	f7ff ff36 	bl	1b4b8 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1b64c:	4630      	mov	r0, r6
   1b64e:	f7fe f987 	bl	19960 <z_nrf_clock_control_lf_on>

	return 0;
}
   1b652:	4628      	mov	r0, r5
   1b654:	bd70      	pop	{r4, r5, r6, pc}
   1b656:	bf00      	nop
   1b658:	40015000 	.word	0x40015000
   1b65c:	000f0003 	.word	0x000f0003
   1b660:	2000dcf8 	.word	0x2000dcf8
   1b664:	e000e100 	.word	0xe000e100
   1b668:	2000fd34 	.word	0x2000fd34
   1b66c:	007fffff 	.word	0x007fffff

0001b670 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1b670:	1c43      	adds	r3, r0, #1
{
   1b672:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1b674:	d01d      	beq.n	1b6b2 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1b676:	2801      	cmp	r0, #1
   1b678:	dd1d      	ble.n	1b6b6 <sys_clock_set_timeout+0x46>
   1b67a:	4a10      	ldr	r2, [pc, #64]	; (1b6bc <sys_clock_set_timeout+0x4c>)
   1b67c:	4b10      	ldr	r3, [pc, #64]	; (1b6c0 <sys_clock_set_timeout+0x50>)
   1b67e:	4290      	cmp	r0, r2
   1b680:	bfd4      	ite	le
   1b682:	4604      	movle	r4, r0
   1b684:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b686:	f7ff fe8d 	bl	1b3a4 <z_nrf_rtc_timer_read>
   1b68a:	4a0e      	ldr	r2, [pc, #56]	; (1b6c4 <sys_clock_set_timeout+0x54>)
   1b68c:	e9d2 3100 	ldrd	r3, r1, [r2]
   1b690:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1b692:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b696:	bf28      	it	cs
   1b698:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1b69a:	4a09      	ldr	r2, [pc, #36]	; (1b6c0 <sys_clock_set_timeout+0x50>)
	cyc += unannounced;
   1b69c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1b69e:	4294      	cmp	r4, r2
   1b6a0:	bf28      	it	cs
   1b6a2:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1b6a4:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b6a6:	f141 0100 	adc.w	r1, r1, #0
}
   1b6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b6ae:	f7ff bf03 	b.w	1b4b8 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1b6b2:	4c03      	ldr	r4, [pc, #12]	; (1b6c0 <sys_clock_set_timeout+0x50>)
   1b6b4:	e7e7      	b.n	1b686 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1b6b6:	2401      	movs	r4, #1
   1b6b8:	e7e5      	b.n	1b686 <sys_clock_set_timeout+0x16>
   1b6ba:	bf00      	nop
   1b6bc:	007ffffe 	.word	0x007ffffe
   1b6c0:	007fffff 	.word	0x007fffff
   1b6c4:	2000dd08 	.word	0x2000dd08

0001b6c8 <sys_clock_elapsed>:
{
   1b6c8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1b6ca:	f7ff fe6b 	bl	1b3a4 <z_nrf_rtc_timer_read>
   1b6ce:	4b02      	ldr	r3, [pc, #8]	; (1b6d8 <sys_clock_elapsed+0x10>)
   1b6d0:	681b      	ldr	r3, [r3, #0]
}
   1b6d2:	1ac0      	subs	r0, r0, r3
   1b6d4:	bd08      	pop	{r3, pc}
   1b6d6:	bf00      	nop
   1b6d8:	2000dd08 	.word	0x2000dd08

0001b6dc <sys_clock_disable>:
   1b6dc:	2301      	movs	r3, #1
{
   1b6de:	b510      	push	{r4, lr}
   1b6e0:	4c07      	ldr	r4, [pc, #28]	; (1b700 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
   1b6e2:	2015      	movs	r0, #21
   1b6e4:	6063      	str	r3, [r4, #4]
   1b6e6:	f7f4 fe6b 	bl	103c0 <arch_irq_disable>
   1b6ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
   1b6ee:	4b05      	ldr	r3, [pc, #20]	; (1b704 <sys_clock_disable+0x28>)
   1b6f0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1b6f4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1b6f8:	4b03      	ldr	r3, [pc, #12]	; (1b708 <sys_clock_disable+0x2c>)
   1b6fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1b6fe:	bd10      	pop	{r4, pc}
   1b700:	40015000 	.word	0x40015000
   1b704:	000f0003 	.word	0x000f0003
   1b708:	e000e100 	.word	0xe000e100

0001b70c <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
   1b70c:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1b70e:	2200      	movs	r2, #0
   1b710:	2101      	movs	r1, #1
   1b712:	202a      	movs	r0, #42	; 0x2a
   1b714:	f7f4 fe76 	bl	10404 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
   1b718:	480e      	ldr	r0, [pc, #56]	; (1b754 <nrf_modem_lib_init+0x48>)
   1b71a:	f00c fabf 	bl	27c9c <nrf_modem_init>
   1b71e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1b720:	4c0d      	ldr	r4, [pc, #52]	; (1b758 <nrf_modem_lib_init+0x4c>)
   1b722:	4e0e      	ldr	r6, [pc, #56]	; (1b75c <nrf_modem_lib_init+0x50>)
   1b724:	42b4      	cmp	r4, r6
   1b726:	d912      	bls.n	1b74e <nrf_modem_lib_init+0x42>
   1b728:	490d      	ldr	r1, [pc, #52]	; (1b760 <nrf_modem_lib_init+0x54>)
   1b72a:	2380      	movs	r3, #128	; 0x80
   1b72c:	4a0d      	ldr	r2, [pc, #52]	; (1b764 <nrf_modem_lib_init+0x58>)
   1b72e:	480e      	ldr	r0, [pc, #56]	; (1b768 <nrf_modem_lib_init+0x5c>)
   1b730:	f013 f910 	bl	2e954 <assert_print>
   1b734:	480d      	ldr	r0, [pc, #52]	; (1b76c <nrf_modem_lib_init+0x60>)
   1b736:	f013 f90d 	bl	2e954 <assert_print>
   1b73a:	2180      	movs	r1, #128	; 0x80
   1b73c:	4809      	ldr	r0, [pc, #36]	; (1b764 <nrf_modem_lib_init+0x58>)
   1b73e:	f013 f902 	bl	2e946 <assert_post_action>
		e->callback(rc, e->context);
   1b742:	e9d4 3100 	ldrd	r3, r1, [r4]
   1b746:	4628      	mov	r0, r5
   1b748:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1b74a:	3408      	adds	r4, #8
   1b74c:	e7ea      	b.n	1b724 <nrf_modem_lib_init+0x18>
   1b74e:	d3f8      	bcc.n	1b742 <nrf_modem_lib_init+0x36>
	return _nrf_modem_lib_init();
}
   1b750:	4628      	mov	r0, r5
   1b752:	bd70      	pop	{r4, r5, r6, pc}
   1b754:	00037024 	.word	0x00037024
   1b758:	000412cc 	.word	0x000412cc
   1b75c:	000412e4 	.word	0x000412e4
   1b760:	0003bcc9 	.word	0x0003bcc9
   1b764:	0003bc97 	.word	0x0003bc97
   1b768:	000381c3 	.word	0x000381c3
   1b76c:	000387c1 	.word	0x000387c1

0001b770 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1b770:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1b772:	4b0f      	ldr	r3, [pc, #60]	; (1b7b0 <thread_monitor_entry_get+0x40>)
{
   1b774:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1b776:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1b778:	4b0e      	ldr	r3, [pc, #56]	; (1b7b4 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1b77a:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1b77c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1b77e:	4618      	mov	r0, r3
   1b780:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1b782:	42b8      	cmp	r0, r7
   1b784:	d301      	bcc.n	1b78a <thread_monitor_entry_get+0x1a>
   1b786:	3d01      	subs	r5, #1
   1b788:	d104      	bne.n	1b794 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1b78a:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1b78c:	3a01      	subs	r2, #1
	new_entry->id = id;
   1b78e:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1b790:	605a      	str	r2, [r3, #4]
}
   1b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1b794:	6804      	ldr	r4, [r0, #0]
   1b796:	428c      	cmp	r4, r1
   1b798:	d0fb      	beq.n	1b792 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1b79a:	b13c      	cbz	r4, 1b7ac <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1b79c:	6844      	ldr	r4, [r0, #4]
   1b79e:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1b7a0:	42a6      	cmp	r6, r4
   1b7a2:	bfbc      	itt	lt
   1b7a4:	4603      	movlt	r3, r0
   1b7a6:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1b7a8:	3008      	adds	r0, #8
   1b7aa:	e7ea      	b.n	1b782 <thread_monitor_entry_get+0x12>
   1b7ac:	4603      	mov	r3, r0
   1b7ae:	e7ec      	b.n	1b78a <thread_monitor_entry_get+0x1a>
   1b7b0:	2000fde4 	.word	0x2000fde4
   1b7b4:	2000fdf0 	.word	0x2000fdf0

0001b7b8 <on_init>:
	list->head = NULL;
   1b7b8:	2000      	movs	r0, #0
   1b7ba:	4b05      	ldr	r3, [pc, #20]	; (1b7d0 <on_init+0x18>)
	list->tail = NULL;
   1b7bc:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b7c0:	4b04      	ldr	r3, [pc, #16]	; (1b7d4 <on_init+0x1c>)
   1b7c2:	e8d3 2fef 	ldaex	r2, [r3]
   1b7c6:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1b7ca:	2900      	cmp	r1, #0
   1b7cc:	d1f9      	bne.n	1b7c2 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1b7ce:	4770      	bx	lr
   1b7d0:	2000fde8 	.word	0x2000fde8
   1b7d4:	2000fde4 	.word	0x2000fde4

0001b7d8 <nrf_modem_os_timedwait>:
{
   1b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7dc:	b088      	sub	sp, #32
   1b7de:	4605      	mov	r5, r0
   1b7e0:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1b7e2:	f019 f997 	bl	34b14 <nrf_modem_is_initialized>
   1b7e6:	b920      	cbnz	r0, 1b7f2 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1b7e8:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1b7ec:	b008      	add	sp, #32
   1b7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1b7f2:	f019 facc 	bl	34d8e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1b7f6:	6833      	ldr	r3, [r6, #0]
   1b7f8:	4604      	mov	r4, r0
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	460f      	mov	r7, r1
   1b7fe:	d104      	bne.n	1b80a <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1b800:	f00e ffba 	bl	2a778 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1b804:	f06f 000a 	mvn.w	r0, #10
   1b808:	e7f0      	b.n	1b7ec <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1b80a:	bfbc      	itt	lt
   1b80c:	f04f 33ff 	movlt.w	r3, #4294967295
   1b810:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b812:	2201      	movs	r2, #1
   1b814:	2100      	movs	r1, #0
   1b816:	a801      	add	r0, sp, #4
   1b818:	f019 fa0b 	bl	34c32 <z_impl_k_sem_init>
   1b81c:	46e8      	mov	r8, sp
	thread->context = context;
   1b81e:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1b820:	f04f 0320 	mov.w	r3, #32
   1b824:	f3ef 8a11 	mrs	sl, BASEPRI
   1b828:	f383 8812 	msr	BASEPRI_MAX, r3
   1b82c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1b830:	f00f f910 	bl	2aa54 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1b834:	f7ff ff9c 	bl	1b770 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1b838:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1b954 <nrf_modem_os_timedwait+0x17c>
   1b83c:	6842      	ldr	r2, [r0, #4]
   1b83e:	f8d9 3000 	ldr.w	r3, [r9]
   1b842:	429a      	cmp	r2, r3
   1b844:	d16d      	bne.n	1b922 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1b846:	2300      	movs	r3, #0
	return list->tail;
   1b848:	4d43      	ldr	r5, [pc, #268]	; (1b958 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1b84a:	9300      	str	r3, [sp, #0]
	return list->tail;
   1b84c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1b84e:	2b00      	cmp	r3, #0
   1b850:	d16e      	bne.n	1b930 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1b852:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1b856:	f38a 8811 	msr	BASEPRI, sl
   1b85a:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1b85e:	6833      	ldr	r3, [r6, #0]
   1b860:	1c5a      	adds	r2, r3, #1
   1b862:	d06a      	beq.n	1b93a <nrf_modem_os_timedwait+0x162>
   1b864:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1b868:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b86c:	2100      	movs	r1, #0
   1b86e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1b872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b876:	2300      	movs	r3, #0
   1b878:	fbcc 010e 	smlal	r0, r1, ip, lr
   1b87c:	f7ed fba6 	bl	8fcc <__aeabi_uldivmod>
   1b880:	4602      	mov	r2, r0
   1b882:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b884:	a801      	add	r0, sp, #4
   1b886:	f00d faa3 	bl	28dd0 <z_impl_k_sem_take>
	__asm__ volatile(
   1b88a:	f04f 0320 	mov.w	r3, #32
   1b88e:	f3ef 8a11 	mrs	sl, BASEPRI
   1b892:	f383 8812 	msr	BASEPRI_MAX, r3
   1b896:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b89a:	2200      	movs	r2, #0
	return list->head;
   1b89c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b89e:	b15b      	cbz	r3, 1b8b8 <nrf_modem_os_timedwait+0xe0>
   1b8a0:	4543      	cmp	r3, r8
   1b8a2:	d154      	bne.n	1b94e <nrf_modem_os_timedwait+0x176>
	return node->next;
   1b8a4:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b8a6:	2a00      	cmp	r2, #0
   1b8a8:	d14b      	bne.n	1b942 <nrf_modem_os_timedwait+0x16a>
   1b8aa:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1b8ac:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b8ae:	429a      	cmp	r2, r3
   1b8b0:	d100      	bne.n	1b8b4 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1b8b2:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1b8b8:	f00f f8cc 	bl	2aa54 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1b8bc:	f7ff ff58 	bl	1b770 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1b8c0:	f8d9 3000 	ldr.w	r3, [r9]
   1b8c4:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1b8c6:	f38a 8811 	msr	BASEPRI, sl
   1b8ca:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1b8ce:	f019 f921 	bl	34b14 <nrf_modem_is_initialized>
   1b8d2:	2800      	cmp	r0, #0
   1b8d4:	d088      	beq.n	1b7e8 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1b8d6:	6835      	ldr	r5, [r6, #0]
   1b8d8:	1c6b      	adds	r3, r5, #1
   1b8da:	d027      	beq.n	1b92c <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1b8dc:	f019 fa57 	bl	34d8e <z_impl_k_uptime_ticks>
   1b8e0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1b8e4:	fba0 320e 	umull	r3, r2, r0, lr
   1b8e8:	fb0e 2101 	mla	r1, lr, r1, r2
   1b8ec:	fba4 420e 	umull	r4, r2, r4, lr
   1b8f0:	fb0e 2207 	mla	r2, lr, r7, r2
   1b8f4:	0bdb      	lsrs	r3, r3, #15
   1b8f6:	0be4      	lsrs	r4, r4, #15
   1b8f8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1b8fc:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1b900:	1b1b      	subs	r3, r3, r4
   1b902:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1b906:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1b90a:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1b90e:	1aed      	subs	r5, r5, r3
   1b910:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1b914:	f1bc 0f00 	cmp.w	ip, #0
   1b918:	bfb8      	it	lt
   1b91a:	2500      	movlt	r5, #0
   1b91c:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1b91e:	b92d      	cbnz	r5, 1b92c <nrf_modem_os_timedwait+0x154>
   1b920:	e770      	b.n	1b804 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1b922:	6043      	str	r3, [r0, #4]
   1b924:	f38a 8811 	msr	BASEPRI, sl
   1b928:	f3bf 8f6f 	isb	sy
		return 0;
   1b92c:	2000      	movs	r0, #0
   1b92e:	e75d      	b.n	1b7ec <nrf_modem_os_timedwait+0x14>
   1b930:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1b934:	f8c5 8004 	str.w	r8, [r5, #4]
   1b938:	e78d      	b.n	1b856 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1b93a:	f04f 32ff 	mov.w	r2, #4294967295
   1b93e:	4613      	mov	r3, r2
   1b940:	e7a0      	b.n	1b884 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1b942:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b944:	6869      	ldr	r1, [r5, #4]
   1b946:	4299      	cmp	r1, r3
	list->tail = node;
   1b948:	bf08      	it	eq
   1b94a:	606a      	streq	r2, [r5, #4]
}
   1b94c:	e7b2      	b.n	1b8b4 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1b94e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b950:	681b      	ldr	r3, [r3, #0]
   1b952:	e7a4      	b.n	1b89e <nrf_modem_os_timedwait+0xc6>
   1b954:	2000fde4 	.word	0x2000fde4
   1b958:	2000fde8 	.word	0x2000fde8

0001b95c <nrf_modem_os_errno_set>:
{
   1b95c:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   1b95e:	1e04      	subs	r4, r0, #0
   1b960:	dc0d      	bgt.n	1b97e <nrf_modem_os_errno_set+0x22>
   1b962:	23df      	movs	r3, #223	; 0xdf
   1b964:	4a08      	ldr	r2, [pc, #32]	; (1b988 <nrf_modem_os_errno_set+0x2c>)
   1b966:	4909      	ldr	r1, [pc, #36]	; (1b98c <nrf_modem_os_errno_set+0x30>)
   1b968:	4809      	ldr	r0, [pc, #36]	; (1b990 <nrf_modem_os_errno_set+0x34>)
   1b96a:	f012 fff3 	bl	2e954 <assert_print>
   1b96e:	4621      	mov	r1, r4
   1b970:	4808      	ldr	r0, [pc, #32]	; (1b994 <nrf_modem_os_errno_set+0x38>)
   1b972:	f012 ffef 	bl	2e954 <assert_print>
   1b976:	21df      	movs	r1, #223	; 0xdf
   1b978:	4803      	ldr	r0, [pc, #12]	; (1b988 <nrf_modem_os_errno_set+0x2c>)
   1b97a:	f012 ffe4 	bl	2e946 <assert_post_action>
	errno = err_code;
   1b97e:	f014 f8f8 	bl	2fb72 <__errno>
   1b982:	6004      	str	r4, [r0, #0]
}
   1b984:	bd10      	pop	{r4, pc}
   1b986:	bf00      	nop
   1b988:	0003bcee 	.word	0x0003bcee
   1b98c:	0003bd1f 	.word	0x0003bd1f
   1b990:	000381c3 	.word	0x000381c3
   1b994:	0003bd2c 	.word	0x0003bd2c

0001b998 <nrf_modem_os_sem_init>:
{
   1b998:	b570      	push	{r4, r5, r6, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1b99a:	6803      	ldr	r3, [r0, #0]
   1b99c:	4c12      	ldr	r4, [pc, #72]	; (1b9e8 <nrf_modem_os_sem_init+0x50>)
   1b99e:	b12b      	cbz	r3, 1b9ac <nrf_modem_os_sem_init+0x14>
   1b9a0:	42a3      	cmp	r3, r4
   1b9a2:	d303      	bcc.n	1b9ac <nrf_modem_os_sem_init+0x14>
   1b9a4:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   1b9a8:	42ab      	cmp	r3, r5
   1b9aa:	d317      	bcc.n	1b9dc <nrf_modem_os_sem_init+0x44>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   1b9ac:	4d0f      	ldr	r5, [pc, #60]	; (1b9ec <nrf_modem_os_sem_init+0x54>)
   1b9ae:	782b      	ldrb	r3, [r5, #0]
   1b9b0:	2b06      	cmp	r3, #6
   1b9b2:	d90c      	bls.n	1b9ce <nrf_modem_os_sem_init+0x36>
   1b9b4:	490e      	ldr	r1, [pc, #56]	; (1b9f0 <nrf_modem_os_sem_init+0x58>)
   1b9b6:	23f3      	movs	r3, #243	; 0xf3
   1b9b8:	4a0e      	ldr	r2, [pc, #56]	; (1b9f4 <nrf_modem_os_sem_init+0x5c>)
   1b9ba:	480f      	ldr	r0, [pc, #60]	; (1b9f8 <nrf_modem_os_sem_init+0x60>)
   1b9bc:	f012 ffca 	bl	2e954 <assert_print>
   1b9c0:	480e      	ldr	r0, [pc, #56]	; (1b9fc <nrf_modem_os_sem_init+0x64>)
   1b9c2:	f012 ffc7 	bl	2e954 <assert_print>
   1b9c6:	21f3      	movs	r1, #243	; 0xf3
   1b9c8:	480a      	ldr	r0, [pc, #40]	; (1b9f4 <nrf_modem_os_sem_init+0x5c>)
   1b9ca:	f012 ffbc 	bl	2e946 <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   1b9ce:	1c5e      	adds	r6, r3, #1
   1b9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b9d4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1b9d8:	702e      	strb	r6, [r5, #0]
   1b9da:	6004      	str	r4, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1b9dc:	6800      	ldr	r0, [r0, #0]
}
   1b9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b9e2:	f019 b926 	b.w	34c32 <z_impl_k_sem_init>
   1b9e6:	bf00      	nop
   1b9e8:	2000fd3c 	.word	0x2000fd3c
   1b9ec:	200112be 	.word	0x200112be
   1b9f0:	0003bd53 	.word	0x0003bd53
   1b9f4:	0003bcee 	.word	0x0003bcee
   1b9f8:	000381c3 	.word	0x000381c3
   1b9fc:	0003bd5c 	.word	0x0003bd5c

0001ba00 <nrf_modem_os_sem_give>:
{
   1ba00:	b508      	push	{r3, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1ba02:	b128      	cbz	r0, 1ba10 <nrf_modem_os_sem_give+0x10>
   1ba04:	4a0b      	ldr	r2, [pc, #44]	; (1ba34 <nrf_modem_os_sem_give+0x34>)
   1ba06:	4290      	cmp	r0, r2
   1ba08:	d302      	bcc.n	1ba10 <nrf_modem_os_sem_give+0x10>
   1ba0a:	32a8      	adds	r2, #168	; 0xa8
   1ba0c:	4290      	cmp	r0, r2
   1ba0e:	d30c      	bcc.n	1ba2a <nrf_modem_os_sem_give+0x2a>
   1ba10:	4909      	ldr	r1, [pc, #36]	; (1ba38 <nrf_modem_os_sem_give+0x38>)
   1ba12:	23fe      	movs	r3, #254	; 0xfe
   1ba14:	4a09      	ldr	r2, [pc, #36]	; (1ba3c <nrf_modem_os_sem_give+0x3c>)
   1ba16:	480a      	ldr	r0, [pc, #40]	; (1ba40 <nrf_modem_os_sem_give+0x40>)
   1ba18:	f012 ff9c 	bl	2e954 <assert_print>
   1ba1c:	4809      	ldr	r0, [pc, #36]	; (1ba44 <nrf_modem_os_sem_give+0x44>)
   1ba1e:	f012 ff99 	bl	2e954 <assert_print>
   1ba22:	21fe      	movs	r1, #254	; 0xfe
   1ba24:	4805      	ldr	r0, [pc, #20]	; (1ba3c <nrf_modem_os_sem_give+0x3c>)
   1ba26:	f012 ff8e 	bl	2e946 <assert_post_action>
}
   1ba2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   1ba2e:	f00d b98b 	b.w	28d48 <z_impl_k_sem_give>
   1ba32:	bf00      	nop
   1ba34:	2000fd3c 	.word	0x2000fd3c
   1ba38:	0003bd82 	.word	0x0003bd82
   1ba3c:	0003bcee 	.word	0x0003bcee
   1ba40:	000381c3 	.word	0x000381c3
   1ba44:	0003bf08 	.word	0x0003bf08

0001ba48 <nrf_modem_os_sem_take>:
{
   1ba48:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1ba4a:	4605      	mov	r5, r0
   1ba4c:	b128      	cbz	r0, 1ba5a <nrf_modem_os_sem_take+0x12>
   1ba4e:	4b19      	ldr	r3, [pc, #100]	; (1bab4 <nrf_modem_os_sem_take+0x6c>)
   1ba50:	4298      	cmp	r0, r3
   1ba52:	d302      	bcc.n	1ba5a <nrf_modem_os_sem_take+0x12>
   1ba54:	33a8      	adds	r3, #168	; 0xa8
   1ba56:	4298      	cmp	r0, r3
   1ba58:	d30e      	bcc.n	1ba78 <nrf_modem_os_sem_take+0x30>
   1ba5a:	4917      	ldr	r1, [pc, #92]	; (1bab8 <nrf_modem_os_sem_take+0x70>)
   1ba5c:	f44f 7384 	mov.w	r3, #264	; 0x108
   1ba60:	4a16      	ldr	r2, [pc, #88]	; (1babc <nrf_modem_os_sem_take+0x74>)
   1ba62:	4817      	ldr	r0, [pc, #92]	; (1bac0 <nrf_modem_os_sem_take+0x78>)
   1ba64:	f012 ff76 	bl	2e954 <assert_print>
   1ba68:	4816      	ldr	r0, [pc, #88]	; (1bac4 <nrf_modem_os_sem_take+0x7c>)
   1ba6a:	f012 ff73 	bl	2e954 <assert_print>
   1ba6e:	f44f 7184 	mov.w	r1, #264	; 0x108
   1ba72:	4812      	ldr	r0, [pc, #72]	; (1babc <nrf_modem_os_sem_take+0x74>)
   1ba74:	f012 ff67 	bl	2e946 <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1ba78:	1c4b      	adds	r3, r1, #1
   1ba7a:	d017      	beq.n	1baac <nrf_modem_os_sem_take+0x64>
   1ba7c:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1ba80:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ba84:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba88:	2100      	movs	r1, #0
   1ba8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba8e:	2300      	movs	r3, #0
   1ba90:	fbc4 0106 	smlal	r0, r1, r4, r6
   1ba94:	f7ed fa9a 	bl	8fcc <__aeabi_uldivmod>
   1ba98:	4602      	mov	r2, r0
   1ba9a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ba9c:	4628      	mov	r0, r5
   1ba9e:	f00d f997 	bl	28dd0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   1baa2:	2800      	cmp	r0, #0
}
   1baa4:	bf18      	it	ne
   1baa6:	f06f 000a 	mvnne.w	r0, #10
   1baaa:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1baac:	f04f 32ff 	mov.w	r2, #4294967295
   1bab0:	4613      	mov	r3, r2
   1bab2:	e7f3      	b.n	1ba9c <nrf_modem_os_sem_take+0x54>
   1bab4:	2000fd3c 	.word	0x2000fd3c
   1bab8:	0003bd82 	.word	0x0003bd82
   1babc:	0003bcee 	.word	0x0003bcee
   1bac0:	000381c3 	.word	0x000381c3
   1bac4:	0003bf08 	.word	0x0003bf08

0001bac8 <nrf_modem_os_event_notify>:
{
   1bac8:	b538      	push	{r3, r4, r5, lr}
   1baca:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1bacc:	4b0a      	ldr	r3, [pc, #40]	; (1baf8 <nrf_modem_os_event_notify+0x30>)
   1bace:	e8d3 1fef 	ldaex	r1, [r3]
   1bad2:	3101      	adds	r1, #1
   1bad4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1bad8:	2a00      	cmp	r2, #0
   1bada:	d1f8      	bne.n	1bace <nrf_modem_os_event_notify+0x6>
	return list->head;
   1badc:	4b07      	ldr	r3, [pc, #28]	; (1bafc <nrf_modem_os_event_notify+0x34>)
   1bade:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1bae0:	b904      	cbnz	r4, 1bae4 <nrf_modem_os_event_notify+0x1c>
}
   1bae2:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1bae4:	69e3      	ldr	r3, [r4, #28]
   1bae6:	42ab      	cmp	r3, r5
   1bae8:	d000      	beq.n	1baec <nrf_modem_os_event_notify+0x24>
   1baea:	b915      	cbnz	r5, 1baf2 <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1baec:	1d20      	adds	r0, r4, #4
   1baee:	f00d f92b 	bl	28d48 <z_impl_k_sem_give>
	return node->next;
   1baf2:	6824      	ldr	r4, [r4, #0]
   1baf4:	e7f4      	b.n	1bae0 <nrf_modem_os_event_notify+0x18>
   1baf6:	bf00      	nop
   1baf8:	2000fde4 	.word	0x2000fde4
   1bafc:	2000fde8 	.word	0x2000fde8

0001bb00 <nrf_modem_os_alloc>:
{
   1bb00:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1bb02:	2200      	movs	r2, #0
   1bb04:	2300      	movs	r3, #0
   1bb06:	4801      	ldr	r0, [pc, #4]	; (1bb0c <nrf_modem_os_alloc+0xc>)
   1bb08:	f019 b81e 	b.w	34b48 <k_heap_alloc>
   1bb0c:	2000fe40 	.word	0x2000fe40

0001bb10 <nrf_modem_os_free>:
{
   1bb10:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1bb12:	4801      	ldr	r0, [pc, #4]	; (1bb18 <nrf_modem_os_free+0x8>)
   1bb14:	f00c bbfc 	b.w	28310 <k_heap_free>
   1bb18:	2000fe40 	.word	0x2000fe40

0001bb1c <nrf_modem_os_shm_tx_alloc>:
{
   1bb1c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1bb1e:	2200      	movs	r2, #0
   1bb20:	2300      	movs	r3, #0
   1bb22:	4801      	ldr	r0, [pc, #4]	; (1bb28 <nrf_modem_os_shm_tx_alloc+0xc>)
   1bb24:	f019 b810 	b.w	34b48 <k_heap_alloc>
   1bb28:	2000fe58 	.word	0x2000fe58

0001bb2c <nrf_modem_os_shm_tx_free>:
{
   1bb2c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1bb2e:	4801      	ldr	r0, [pc, #4]	; (1bb34 <nrf_modem_os_shm_tx_free+0x8>)
   1bb30:	f00c bbee 	b.w	28310 <k_heap_free>
   1bb34:	2000fe58 	.word	0x2000fe58

0001bb38 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1bb38:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1bb3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bb3e:	4906      	ldr	r1, [pc, #24]	; (1bb58 <nrf_modem_os_init+0x20>)
   1bb40:	4806      	ldr	r0, [pc, #24]	; (1bb5c <nrf_modem_os_init+0x24>)
   1bb42:	f018 fff9 	bl	34b38 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1bb46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1bb4a:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1bb4e:	4904      	ldr	r1, [pc, #16]	; (1bb60 <nrf_modem_os_init+0x28>)
   1bb50:	4804      	ldr	r0, [pc, #16]	; (1bb64 <nrf_modem_os_init+0x2c>)
   1bb52:	f018 bff1 	b.w	34b38 <k_heap_init>
   1bb56:	bf00      	nop
   1bb58:	200112bf 	.word	0x200112bf
   1bb5c:	2000fe40 	.word	0x2000fe40
   1bb60:	200084e8 	.word	0x200084e8
   1bb64:	2000fe58 	.word	0x2000fe58

0001bb68 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
   1bb68:	b510      	push	{r4, lr}
	return list->head;
   1bb6a:	4b04      	ldr	r3, [pc, #16]	; (1bb7c <nrf_modem_os_shutdown+0x14>)
   1bb6c:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1bb6e:	b904      	cbnz	r4, 1bb72 <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
   1bb70:	bd10      	pop	{r4, pc}
   1bb72:	1d20      	adds	r0, r4, #4
   1bb74:	f00d f8e8 	bl	28d48 <z_impl_k_sem_give>
	return node->next;
   1bb78:	6824      	ldr	r4, [r4, #0]
   1bb7a:	e7f8      	b.n	1bb6e <nrf_modem_os_shutdown+0x6>
   1bb7c:	2000fde8 	.word	0x2000fde8

0001bb80 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1bb80:	2801      	cmp	r0, #1
   1bb82:	d01e      	beq.n	1bbc2 <z_to_nrf_optname+0x42>
   1bb84:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1bb88:	d123      	bne.n	1bbd2 <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
   1bb8a:	1e4b      	subs	r3, r1, #1
   1bb8c:	2b14      	cmp	r3, #20
   1bb8e:	d820      	bhi.n	1bbd2 <z_to_nrf_optname+0x52>
   1bb90:	e8df f003 	tbb	[pc, r3]
   1bb94:	0c0c0c0c 	.word	0x0c0c0c0c
   1bb98:	1f1f0c0c 	.word	0x1f1f0c0c
   1bb9c:	0c1f1f1f 	.word	0x0c1f1f1f
   1bba0:	1f1f0c0c 	.word	0x1f1f0c0c
   1bba4:	13110f0b 	.word	0x13110f0b
   1bba8:	15          	.byte	0x15
   1bba9:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
   1bbaa:	210f      	movs	r1, #15
	int retval = 0;
   1bbac:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1bbae:	6011      	str	r1, [r2, #0]
   1bbb0:	4770      	bx	lr
			break;
   1bbb2:	2110      	movs	r1, #16
   1bbb4:	e7fa      	b.n	1bbac <z_to_nrf_optname+0x2c>
			break;
   1bbb6:	2111      	movs	r1, #17
   1bbb8:	e7f8      	b.n	1bbac <z_to_nrf_optname+0x2c>
			break;
   1bbba:	2112      	movs	r1, #18
   1bbbc:	e7f6      	b.n	1bbac <z_to_nrf_optname+0x2c>
			break;
   1bbbe:	2113      	movs	r1, #19
   1bbc0:	e7f4      	b.n	1bbac <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
   1bbc2:	2937      	cmp	r1, #55	; 0x37
   1bbc4:	dc05      	bgt.n	1bbd2 <z_to_nrf_optname+0x52>
   1bbc6:	2913      	cmp	r1, #19
   1bbc8:	dc06      	bgt.n	1bbd8 <z_to_nrf_optname+0x58>
   1bbca:	2902      	cmp	r1, #2
   1bbcc:	d0ee      	beq.n	1bbac <z_to_nrf_optname+0x2c>
   1bbce:	2904      	cmp	r1, #4
   1bbd0:	d0ec      	beq.n	1bbac <z_to_nrf_optname+0x2c>
   1bbd2:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1bbd6:	4770      	bx	lr
   1bbd8:	f1a1 0314 	sub.w	r3, r1, #20
   1bbdc:	2b23      	cmp	r3, #35	; 0x23
   1bbde:	d8f8      	bhi.n	1bbd2 <z_to_nrf_optname+0x52>
   1bbe0:	a001      	add	r0, pc, #4	; (adr r0, 1bbe8 <z_to_nrf_optname+0x68>)
   1bbe2:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1bbe6:	bf00      	nop
   1bbe8:	0001bbad 	.word	0x0001bbad
   1bbec:	0001bbad 	.word	0x0001bbad
   1bbf0:	0001bbd3 	.word	0x0001bbd3
   1bbf4:	0001bbd3 	.word	0x0001bbd3
   1bbf8:	0001bbd3 	.word	0x0001bbd3
   1bbfc:	0001bbad 	.word	0x0001bbad
   1bc00:	0001bbd3 	.word	0x0001bbd3
   1bc04:	0001bbd3 	.word	0x0001bbd3
   1bc08:	0001bbd3 	.word	0x0001bbd3
   1bc0c:	0001bbd3 	.word	0x0001bbd3
   1bc10:	0001bbad 	.word	0x0001bbad
   1bc14:	0001bbad 	.word	0x0001bbad
   1bc18:	0001bbad 	.word	0x0001bbad
   1bc1c:	0001bbd3 	.word	0x0001bbd3
   1bc20:	0001bbd3 	.word	0x0001bbd3
   1bc24:	0001bbd3 	.word	0x0001bbd3
   1bc28:	0001bbd3 	.word	0x0001bbd3
   1bc2c:	0001bbd3 	.word	0x0001bbd3
   1bc30:	0001bbd3 	.word	0x0001bbd3
   1bc34:	0001bbd3 	.word	0x0001bbd3
   1bc38:	0001bbd3 	.word	0x0001bbd3
   1bc3c:	0001bbd3 	.word	0x0001bbd3
   1bc40:	0001bbd3 	.word	0x0001bbd3
   1bc44:	0001bbd3 	.word	0x0001bbd3
   1bc48:	0001bbd3 	.word	0x0001bbd3
   1bc4c:	0001bbd3 	.word	0x0001bbd3
   1bc50:	0001bbd3 	.word	0x0001bbd3
   1bc54:	0001bbd3 	.word	0x0001bbd3
   1bc58:	0001bbd3 	.word	0x0001bbd3
   1bc5c:	0001bbd3 	.word	0x0001bbd3
   1bc60:	0001bbad 	.word	0x0001bbad
   1bc64:	0001bbad 	.word	0x0001bbad
   1bc68:	0001bbad 	.word	0x0001bbad
   1bc6c:	0001bbad 	.word	0x0001bbad
   1bc70:	0001bbad 	.word	0x0001bbad
   1bc74:	0001bbad 	.word	0x0001bbad

0001bc78 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1bc78:	f04f 32ff 	mov.w	r2, #4294967295
   1bc7c:	4b06      	ldr	r3, [pc, #24]	; (1bc98 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
   1bc7e:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1bc80:	601a      	str	r2, [r3, #0]
   1bc82:	619a      	str	r2, [r3, #24]
   1bc84:	631a      	str	r2, [r3, #48]	; 0x30
   1bc86:	649a      	str	r2, [r3, #72]	; 0x48
   1bc88:	661a      	str	r2, [r3, #96]	; 0x60
   1bc8a:	679a      	str	r2, [r3, #120]	; 0x78
   1bc8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1bc90:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1bc94:	4770      	bx	lr
   1bc96:	bf00      	nop
   1bc98:	2000fe74 	.word	0x2000fe74

0001bc9c <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1bc9c:	490b      	ldr	r1, [pc, #44]	; (1bccc <nrf91_socket_is_supported+0x30>)
{
   1bc9e:	4603      	mov	r3, r0
	if (offload_disabled) {
   1bca0:	7808      	ldrb	r0, [r1, #0]
   1bca2:	b980      	cbnz	r0, 1bcc6 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1bca4:	490a      	ldr	r1, [pc, #40]	; (1bcd0 <nrf91_socket_is_supported+0x34>)
   1bca6:	7809      	ldrb	r1, [r1, #0]
   1bca8:	b139      	cbz	r1, 1bcba <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1bcaa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1bcae:	2902      	cmp	r1, #2
   1bcb0:	d90a      	bls.n	1bcc8 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1bcb2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1bcb6:	2a01      	cmp	r2, #1
   1bcb8:	d906      	bls.n	1bcc8 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1bcba:	3b01      	subs	r3, #1
   1bcbc:	2b02      	cmp	r3, #2
   1bcbe:	bf8c      	ite	hi
   1bcc0:	2000      	movhi	r0, #0
   1bcc2:	2001      	movls	r0, #1
	return af_is_supported(family);
   1bcc4:	4770      	bx	lr
		return false;
   1bcc6:	2000      	movs	r0, #0
}
   1bcc8:	4770      	bx	lr
   1bcca:	bf00      	nop
   1bccc:	20011740 	.word	0x20011740
   1bcd0:	2001173f 	.word	0x2001173f

0001bcd4 <pollcb>:
{
   1bcd4:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1bcd6:	2300      	movs	r3, #0
   1bcd8:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1bcda:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1bcdc:	4c08      	ldr	r4, [pc, #32]	; (1bd00 <pollcb+0x2c>)
   1bcde:	fb05 f203 	mul.w	r2, r5, r3
   1bce2:	58a6      	ldr	r6, [r4, r2]
   1bce4:	42b1      	cmp	r1, r6
   1bce6:	d106      	bne.n	1bcf6 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1bce8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1bcec:	3208      	adds	r2, #8
	return z_impl_k_poll_signal_raise(sig, result);
   1bcee:	18a0      	adds	r0, r4, r2
}
   1bcf0:	bc70      	pop	{r4, r5, r6}
   1bcf2:	f00f be73 	b.w	2b9dc <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1bcf6:	3301      	adds	r3, #1
   1bcf8:	2b08      	cmp	r3, #8
   1bcfa:	d1f0      	bne.n	1bcde <pollcb+0xa>
}
   1bcfc:	bc70      	pop	{r4, r5, r6}
   1bcfe:	4770      	bx	lr
   1bd00:	2000fe74 	.word	0x2000fe74

0001bd04 <nrf91_socket_offload_getaddrinfo>:
{
   1bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd08:	4614      	mov	r4, r2
   1bd0a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1bd0c:	2100      	movs	r1, #0
{
   1bd0e:	b08b      	sub	sp, #44	; 0x2c
   1bd10:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1bd12:	2220      	movs	r2, #32
   1bd14:	a802      	add	r0, sp, #8
{
   1bd16:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1bd18:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1bd1a:	f019 f987 	bl	3502c <memset>
	if (hints != NULL) {
   1bd1e:	b15c      	cbz	r4, 1bd38 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1bd20:	6863      	ldr	r3, [r4, #4]
   1bd22:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1bd24:	68e3      	ldr	r3, [r4, #12]
   1bd26:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1bd28:	68a3      	ldr	r3, [r4, #8]
   1bd2a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1bd2c:	6923      	ldr	r3, [r4, #16]
   1bd2e:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1bd30:	69e3      	ldr	r3, [r4, #28]
   1bd32:	b103      	cbz	r3, 1bd36 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1bd34:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1bd36:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1bd38:	f04f 32ff 	mov.w	r2, #4294967295
   1bd3c:	f04f 33ff 	mov.w	r3, #4294967295
   1bd40:	4834      	ldr	r0, [pc, #208]	; (1be14 <nrf91_socket_offload_getaddrinfo+0x110>)
   1bd42:	f017 f890 	bl	32e66 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1bd46:	4631      	mov	r1, r6
   1bd48:	4622      	mov	r2, r4
   1bd4a:	4628      	mov	r0, r5
   1bd4c:	ab01      	add	r3, sp, #4
   1bd4e:	f00a fefb 	bl	26b48 <nrf_getaddrinfo>
	if (retval != 0) {
   1bd52:	4606      	mov	r6, r0
   1bd54:	b948      	cbnz	r0, 1bd6a <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1bd56:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1bd58:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1bd5a:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1bd5e:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1bd60:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1bd62:	b94d      	cbnz	r5, 1bd78 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1bd64:	9801      	ldr	r0, [sp, #4]
   1bd66:	f018 f908 	bl	33f7a <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1bd6a:	482a      	ldr	r0, [pc, #168]	; (1be14 <nrf91_socket_offload_getaddrinfo+0x110>)
   1bd6c:	f017 f87d 	bl	32e6a <k_mutex_unlock.isra.0>
}
   1bd70:	4630      	mov	r0, r6
   1bd72:	b00b      	add	sp, #44	; 0x2c
   1bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1bd78:	2050      	movs	r0, #80	; 0x50
   1bd7a:	f019 f903 	bl	34f84 <k_malloc>
		if (next_z_res == NULL) {
   1bd7e:	4604      	mov	r4, r0
   1bd80:	2800      	cmp	r0, #0
   1bd82:	d040      	beq.n	1be06 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1bd84:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1bd88:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1bd8c:	682b      	ldr	r3, [r5, #0]
   1bd8e:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1bd90:	68ab      	ldr	r3, [r5, #8]
   1bd92:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1bd94:	686b      	ldr	r3, [r5, #4]
   1bd96:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1bd98:	68eb      	ldr	r3, [r5, #12]
   1bd9a:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1bd9c:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1bda0:	f1bb 0f01 	cmp.w	fp, #1
   1bda4:	d114      	bne.n	1bdd0 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1bda6:	2008      	movs	r0, #8
   1bda8:	f019 f8ec 	bl	34f84 <k_malloc>
   1bdac:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1bdae:	b338      	cbz	r0, 1be00 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1bdb0:	2308      	movs	r3, #8
   1bdb2:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1bdb4:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1bdb6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1bdb8:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1bdbc:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1bdbe:	68db      	ldr	r3, [r3, #12]
   1bdc0:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1bdc2:	f1b8 0f00 	cmp.w	r8, #0
   1bdc6:	d121      	bne.n	1be0c <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1bdc8:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1bdca:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1bdcc:	69ed      	ldr	r5, [r5, #28]
   1bdce:	e7c8      	b.n	1bd62 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1bdd0:	f1bb 0f02 	cmp.w	fp, #2
   1bdd4:	d009      	beq.n	1bdea <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1bdd6:	f019 f8ce 	bl	34f76 <k_free>
			retval = DNS_EAI_FAMILY;
   1bdda:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1bdde:	6838      	ldr	r0, [r7, #0]
   1bde0:	f016 ff76 	bl	32cd0 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1bde4:	2300      	movs	r3, #0
   1bde6:	603b      	str	r3, [r7, #0]
   1bde8:	e7bc      	b.n	1bd64 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1bdea:	2018      	movs	r0, #24
   1bdec:	f019 f8ca 	bl	34f84 <k_malloc>
   1bdf0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1bdf2:	b128      	cbz	r0, 1be00 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1bdf4:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1bdf8:	6969      	ldr	r1, [r5, #20]
   1bdfa:	f016 ff76 	bl	32cea <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1bdfe:	e7e0      	b.n	1bdc2 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1be00:	4620      	mov	r0, r4
   1be02:	f019 f8b8 	bl	34f76 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1be06:	f06f 0609 	mvn.w	r6, #9
   1be0a:	e7e8      	b.n	1bdde <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1be0c:	f8c8 4000 	str.w	r4, [r8]
   1be10:	e7db      	b.n	1bdca <nrf91_socket_offload_getaddrinfo+0xc6>
   1be12:	bf00      	nop
   1be14:	2000cecc 	.word	0x2000cecc

0001be18 <nrf91_socket_offload_sendmsg>:
{
   1be18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1be1c:	4607      	mov	r7, r0
   1be1e:	4690      	mov	r8, r2
	if (msg == NULL) {
   1be20:	460c      	mov	r4, r1
   1be22:	b379      	cbz	r1, 1be84 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1be24:	2300      	movs	r3, #0
	ssize_t len = 0;
   1be26:	461a      	mov	r2, r3
   1be28:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1be2a:	4283      	cmp	r3, r0
   1be2c:	d134      	bne.n	1be98 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1be2e:	2a80      	cmp	r2, #128	; 0x80
   1be30:	d871      	bhi.n	1bf16 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1be32:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1be34:	f04f 32ff 	mov.w	r2, #4294967295
   1be38:	f04f 33ff 	mov.w	r3, #4294967295
   1be3c:	4838      	ldr	r0, [pc, #224]	; (1bf20 <nrf91_socket_offload_sendmsg+0x108>)
   1be3e:	f017 f812 	bl	32e66 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1be42:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1be44:	4e37      	ldr	r6, [pc, #220]	; (1bf24 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1be46:	68e3      	ldr	r3, [r4, #12]
   1be48:	429d      	cmp	r5, r3
   1be4a:	d32c      	bcc.n	1bea6 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1be4c:	2600      	movs	r6, #0
		ret = 0;
   1be4e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1be50:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1bf24 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1be54:	45b1      	cmp	r9, r6
   1be56:	dd11      	ble.n	1be7c <nrf91_socket_offload_sendmsg+0x64>
   1be58:	b985      	cbnz	r5, 1be7c <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1be5a:	6863      	ldr	r3, [r4, #4]
   1be5c:	4638      	mov	r0, r7
   1be5e:	9301      	str	r3, [sp, #4]
   1be60:	6823      	ldr	r3, [r4, #0]
   1be62:	eba9 0206 	sub.w	r2, r9, r6
   1be66:	9300      	str	r3, [sp, #0]
   1be68:	eb0a 0106 	add.w	r1, sl, r6
   1be6c:	4643      	mov	r3, r8
   1be6e:	f016 ff69 	bl	32d44 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1be72:	1e05      	subs	r5, r0, #0
   1be74:	ddee      	ble.n	1be54 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1be76:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1be78:	45b1      	cmp	r9, r6
   1be7a:	dcee      	bgt.n	1be5a <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1be7c:	4828      	ldr	r0, [pc, #160]	; (1bf20 <nrf91_socket_offload_sendmsg+0x108>)
   1be7e:	f016 fff4 	bl	32e6a <k_mutex_unlock.isra.0>
		return ret;
   1be82:	e005      	b.n	1be90 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1be84:	f013 fe75 	bl	2fb72 <__errno>
   1be88:	2316      	movs	r3, #22
		return -1;
   1be8a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1be8e:	6003      	str	r3, [r0, #0]
}
   1be90:	4628      	mov	r0, r5
   1be92:	b002      	add	sp, #8
   1be94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1be98:	68a1      	ldr	r1, [r4, #8]
   1be9a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1be9e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1bea0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1bea2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1bea4:	e7c1      	b.n	1be2a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1bea6:	68a3      	ldr	r3, [r4, #8]
   1bea8:	eb06 0009 	add.w	r0, r6, r9
   1beac:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1beb0:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1beb4:	6852      	ldr	r2, [r2, #4]
   1beb6:	f019 f899 	bl	34fec <memcpy>
			len += msg->msg_iov[i].iov_len;
   1beba:	68a3      	ldr	r3, [r4, #8]
   1bebc:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1bec0:	4453      	add	r3, sl
   1bec2:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1bec4:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1bec6:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1bec8:	e7bd      	b.n	1be46 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1beca:	68a3      	ldr	r3, [r4, #8]
   1becc:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1bed0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1bed4:	685b      	ldr	r3, [r3, #4]
   1bed6:	b13b      	cbz	r3, 1bee8 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1bed8:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1bedc:	68a3      	ldr	r3, [r4, #8]
   1bede:	eb03 020a 	add.w	r2, r3, sl
   1bee2:	6852      	ldr	r2, [r2, #4]
   1bee4:	4591      	cmp	r9, r2
   1bee6:	d304      	bcc.n	1bef2 <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1bee8:	3601      	adds	r6, #1
   1beea:	68e3      	ldr	r3, [r4, #12]
   1beec:	429e      	cmp	r6, r3
   1beee:	d3ec      	bcc.n	1beca <nrf91_socket_offload_sendmsg+0xb2>
   1bef0:	e7ce      	b.n	1be90 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1bef2:	f853 100a 	ldr.w	r1, [r3, sl]
   1bef6:	6863      	ldr	r3, [r4, #4]
   1bef8:	4449      	add	r1, r9
   1befa:	9301      	str	r3, [sp, #4]
   1befc:	6823      	ldr	r3, [r4, #0]
   1befe:	4638      	mov	r0, r7
   1bf00:	9300      	str	r3, [sp, #0]
   1bf02:	eba2 0209 	sub.w	r2, r2, r9
   1bf06:	4643      	mov	r3, r8
   1bf08:	f016 ff1c 	bl	32d44 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1bf0c:	1e01      	subs	r1, r0, #0
   1bf0e:	db05      	blt.n	1bf1c <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1bf10:	4489      	add	r9, r1
			len += ret;
   1bf12:	440d      	add	r5, r1
   1bf14:	e7e2      	b.n	1bedc <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1bf16:	2600      	movs	r6, #0
	len = 0;
   1bf18:	4635      	mov	r5, r6
   1bf1a:	e7e6      	b.n	1beea <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1bf1c:	460d      	mov	r5, r1
   1bf1e:	e7b7      	b.n	1be90 <nrf91_socket_offload_sendmsg+0x78>
   1bf20:	2000cf30 	.word	0x2000cf30
   1bf24:	200116bf 	.word	0x200116bf

0001bf28 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1bf28:	f04f 32ff 	mov.w	r2, #4294967295
   1bf2c:	f04f 33ff 	mov.w	r3, #4294967295
{
   1bf30:	b570      	push	{r4, r5, r6, lr}
   1bf32:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1bf34:	480b      	ldr	r0, [pc, #44]	; (1bf64 <allocate_ctx+0x3c>)
   1bf36:	f016 ff96 	bl	32e66 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1bf3e:	4a0a      	ldr	r2, [pc, #40]	; (1bf68 <allocate_ctx+0x40>)
   1bf40:	fb00 f103 	mul.w	r1, r0, r3
   1bf44:	5856      	ldr	r6, [r2, r1]
   1bf46:	188c      	adds	r4, r1, r2
   1bf48:	3601      	adds	r6, #1
   1bf4a:	d105      	bne.n	1bf58 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1bf4c:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1bf4e:	4805      	ldr	r0, [pc, #20]	; (1bf64 <allocate_ctx+0x3c>)
   1bf50:	f016 ff8b 	bl	32e6a <k_mutex_unlock.isra.0>
}
   1bf54:	4620      	mov	r0, r4
   1bf56:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1bf58:	3301      	adds	r3, #1
   1bf5a:	2b08      	cmp	r3, #8
   1bf5c:	d1f0      	bne.n	1bf40 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1bf5e:	2400      	movs	r4, #0
   1bf60:	e7f5      	b.n	1bf4e <allocate_ctx+0x26>
   1bf62:	bf00      	nop
   1bf64:	2000cea4 	.word	0x2000cea4
   1bf68:	2000fe74 	.word	0x2000fe74

0001bf6c <release_ctx>:
{
   1bf6c:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1bf6e:	4d09      	ldr	r5, [pc, #36]	; (1bf94 <release_ctx+0x28>)
{
   1bf70:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1bf72:	f04f 32ff 	mov.w	r2, #4294967295
   1bf76:	4628      	mov	r0, r5
   1bf78:	f04f 33ff 	mov.w	r3, #4294967295
   1bf7c:	f016 ff73 	bl	32e66 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1bf80:	2300      	movs	r3, #0
   1bf82:	f04f 32ff 	mov.w	r2, #4294967295
   1bf86:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1bf8a:	4628      	mov	r0, r5
}
   1bf8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1bf90:	f016 bf6b 	b.w	32e6a <k_mutex_unlock.isra.0>
   1bf94:	2000cea4 	.word	0x2000cea4

0001bf98 <nrf91_socket_offload_accept>:
{
   1bf98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf9c:	b08b      	sub	sp, #44	; 0x2c
   1bf9e:	4607      	mov	r7, r0
   1bfa0:	460c      	mov	r4, r1
   1bfa2:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1bfa4:	f7f0 fcd2 	bl	c94c <z_reserve_fd>
   1bfa8:	4606      	mov	r6, r0
	if (fd < 0) {
   1bfaa:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1bfac:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1bfae:	db1e      	blt.n	1bfee <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1bfb0:	b304      	cbz	r4, 1bff4 <nrf91_socket_offload_accept+0x5c>
   1bfb2:	b315      	cbz	r5, 1bffa <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1bfb4:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1bfb6:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1bfb8:	2b08      	cmp	r3, #8
   1bfba:	bf14      	ite	ne
   1bfbc:	2324      	movne	r3, #36	; 0x24
   1bfbe:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1bfc0:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1bfc4:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1bfc6:	4649      	mov	r1, r9
   1bfc8:	f018 f957 	bl	3427a <nrf_accept>
	if (new_sd < 0) {
   1bfcc:	f1b0 0800 	subs.w	r8, r0, #0
   1bfd0:	db0a      	blt.n	1bfe8 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1bfd2:	f7ff ffa9 	bl	1bf28 <allocate_ctx>
	if (ctx == NULL) {
   1bfd6:	4607      	mov	r7, r0
   1bfd8:	b990      	cbnz	r0, 1c000 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1bfda:	f013 fdca 	bl	2fb72 <__errno>
   1bfde:	230c      	movs	r3, #12
   1bfe0:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1bfe2:	4640      	mov	r0, r8
   1bfe4:	f00b f858 	bl	27098 <nrf_close>
	z_free_fd(fd);
   1bfe8:	4630      	mov	r0, r6
   1bfea:	f7f0 fcfd 	bl	c9e8 <z_free_fd>
		return -1;
   1bfee:	f04f 36ff 	mov.w	r6, #4294967295
   1bff2:	e018      	b.n	1c026 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1bff4:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1bff6:	46a1      	mov	r9, r4
   1bff8:	e7e5      	b.n	1bfc6 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1bffa:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1bffc:	46a9      	mov	r9, r5
   1bffe:	e7e2      	b.n	1bfc6 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1c000:	b164      	cbz	r4, 1c01c <nrf91_socket_offload_accept+0x84>
   1c002:	b15d      	cbz	r5, 1c01c <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1c004:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c008:	2b01      	cmp	r3, #1
   1c00a:	d110      	bne.n	1c02e <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1c00c:	2208      	movs	r2, #8
   1c00e:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1c010:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1c014:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c016:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1c018:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1c01a:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1c01c:	4639      	mov	r1, r7
   1c01e:	4630      	mov	r0, r6
   1c020:	4a0d      	ldr	r2, [pc, #52]	; (1c058 <nrf91_socket_offload_accept+0xc0>)
   1c022:	f7f0 fcc9 	bl	c9b8 <z_finalize_fd>
}
   1c026:	4630      	mov	r0, r6
   1c028:	b00b      	add	sp, #44	; 0x2c
   1c02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1c02e:	2b02      	cmp	r3, #2
   1c030:	d106      	bne.n	1c040 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1c032:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1c034:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1c036:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1c038:	a901      	add	r1, sp, #4
   1c03a:	f016 fe56 	bl	32cea <nrf_to_z_ipv6>
   1c03e:	e7ed      	b.n	1c01c <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1c040:	f013 fd97 	bl	2fb72 <__errno>
   1c044:	2386      	movs	r3, #134	; 0x86
   1c046:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1c048:	4640      	mov	r0, r8
   1c04a:	f00b f825 	bl	27098 <nrf_close>
		release_ctx(ctx);
   1c04e:	4638      	mov	r0, r7
   1c050:	f7ff ff8c 	bl	1bf6c <release_ctx>
   1c054:	e7c8      	b.n	1bfe8 <nrf91_socket_offload_accept+0x50>
   1c056:	bf00      	nop
   1c058:	00037054 	.word	0x00037054

0001c05c <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
   1c05c:	b510      	push	{r4, lr}
   1c05e:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
   1c060:	4b09      	ldr	r3, [pc, #36]	; (1c088 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1c062:	4a0a      	ldr	r2, [pc, #40]	; (1c08c <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
   1c064:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1c066:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1c068:	4809      	ldr	r0, [pc, #36]	; (1c090 <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1c06a:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1c06c:	f7f3 fa24 	bl	f4b8 <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c070:	6823      	ldr	r3, [r4, #0]
   1c072:	330c      	adds	r3, #12
   1c074:	e8d3 1fef 	ldaex	r1, [r3]
   1c078:	f041 0108 	orr.w	r1, r1, #8
   1c07c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c080:	2a00      	cmp	r2, #0
   1c082:	d1f7      	bne.n	1c074 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
   1c084:	bd10      	pop	{r4, pc}
   1c086:	bf00      	nop
   1c088:	2000fe70 	.word	0x2000fe70
   1c08c:	0001c1a1 	.word	0x0001c1a1
   1c090:	0003704c 	.word	0x0003704c

0001c094 <nrf91_socket_offload_ioctl>:
{
   1c094:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1c096:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1c09a:	6804      	ldr	r4, [r0, #0]
{
   1c09c:	b087      	sub	sp, #28
	switch (request) {
   1c09e:	2b03      	cmp	r3, #3
   1c0a0:	d857      	bhi.n	1c152 <nrf91_socket_offload_ioctl+0xbe>
   1c0a2:	e8df f003 	tbb	[pc, r3]
   1c0a6:	4002      	.short	0x4002
   1c0a8:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1c0aa:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1c0ac:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1c0b0:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1c0b2:	4a3a      	ldr	r2, [pc, #232]	; (1c19c <nrf91_socket_offload_ioctl+0x108>)
   1c0b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1c0b8:	9204      	str	r2, [sp, #16]
   1c0ba:	f8ad 3014 	strh.w	r3, [sp, #20]
   1c0be:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1c0c2:	6833      	ldr	r3, [r6, #0]
   1c0c4:	4299      	cmp	r1, r3
   1c0c6:	d104      	bne.n	1c0d2 <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1c0c8:	f013 fd53 	bl	2fb72 <__errno>
   1c0cc:	230c      	movs	r3, #12
		errno = EINVAL;
   1c0ce:	6003      	str	r3, [r0, #0]
   1c0d0:	e014      	b.n	1c0fc <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1c0d2:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1c0d6:	4628      	mov	r0, r5
   1c0d8:	f018 ff43 	bl	34f62 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1c0dc:	462b      	mov	r3, r5
   1c0de:	2200      	movs	r2, #0
   1c0e0:	4639      	mov	r1, r7
   1c0e2:	6830      	ldr	r0, [r6, #0]
   1c0e4:	f00f fb5c 	bl	2b7a0 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1c0e8:	2308      	movs	r3, #8
   1c0ea:	4620      	mov	r0, r4
   1c0ec:	9300      	str	r3, [sp, #0]
   1c0ee:	223c      	movs	r2, #60	; 0x3c
   1c0f0:	4639      	mov	r1, r7
   1c0f2:	ab04      	add	r3, sp, #16
   1c0f4:	f00b f910 	bl	27318 <nrf_setsockopt>
	if (err) {
   1c0f8:	4604      	mov	r4, r0
   1c0fa:	b110      	cbz	r0, 1c102 <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1c0fc:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1c100:	e00e      	b.n	1c120 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1c102:	6833      	ldr	r3, [r6, #0]
   1c104:	3314      	adds	r3, #20
   1c106:	6033      	str	r3, [r6, #0]
	flags = 0;
   1c108:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1c10c:	4628      	mov	r0, r5
   1c10e:	aa02      	add	r2, sp, #8
   1c110:	a903      	add	r1, sp, #12
   1c112:	f018 ff2b 	bl	34f6c <z_impl_k_poll_signal_check>
	if (!signaled) {
   1c116:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1c118:	2b00      	cmp	r3, #0
   1c11a:	bf18      	it	ne
   1c11c:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1c120:	4620      	mov	r0, r4
   1c122:	b007      	add	sp, #28
   1c124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1c126:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1c12a:	6813      	ldr	r3, [r2, #0]
   1c12c:	3314      	adds	r3, #20
   1c12e:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1c130:	2300      	movs	r3, #0
	flags = 0;
   1c132:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1c136:	aa03      	add	r2, sp, #12
   1c138:	a904      	add	r1, sp, #16
   1c13a:	3008      	adds	r0, #8
   1c13c:	f018 ff16 	bl	34f6c <z_impl_k_poll_signal_check>
	if (!signaled) {
   1c140:	9b04      	ldr	r3, [sp, #16]
   1c142:	b10b      	cbz	r3, 1c148 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1c144:	9b03      	ldr	r3, [sp, #12]
   1c146:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1c148:	2400      	movs	r4, #0
   1c14a:	e7e9      	b.n	1c120 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1c14c:	6813      	ldr	r3, [r2, #0]
   1c14e:	6043      	str	r3, [r0, #4]
		return 0;
   1c150:	e7fa      	b.n	1c148 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1c152:	2903      	cmp	r1, #3
   1c154:	d012      	beq.n	1c17c <nrf91_socket_offload_ioctl+0xe8>
   1c156:	2904      	cmp	r1, #4
   1c158:	d118      	bne.n	1c18c <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1c15a:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1c15c:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1c160:	d003      	beq.n	1c16a <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1c162:	f013 fd06 	bl	2fb72 <__errno>
   1c166:	2316      	movs	r3, #22
   1c168:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1c16a:	2104      	movs	r1, #4
   1c16c:	4620      	mov	r0, r4
   1c16e:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1c172:	b007      	add	sp, #28
   1c174:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1c178:	f018 bac7 	b.w	3470a <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1c17c:	4620      	mov	r0, r4
   1c17e:	2200      	movs	r2, #0
   1c180:	f018 fac3 	bl	3470a <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1c184:	0384      	lsls	r4, r0, #14
   1c186:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1c18a:	e7c9      	b.n	1c120 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1c18c:	f013 fcf1 	bl	2fb72 <__errno>
   1c190:	2316      	movs	r3, #22
   1c192:	e79c      	b.n	1c0ce <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1c194:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c198:	e7c2      	b.n	1c120 <nrf91_socket_offload_ioctl+0x8c>
   1c19a:	bf00      	nop
   1c19c:	0001bcd5 	.word	0x0001bcd5

0001c1a0 <nrf91_socket_create>:
{
   1c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1c1a4:	1e0d      	subs	r5, r1, #0
{
   1c1a6:	4607      	mov	r7, r0
   1c1a8:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1c1aa:	da12      	bge.n	1c1d2 <nrf91_socket_create+0x32>
	k_sched_lock();
   1c1ac:	f00d fde4 	bl	29d78 <k_sched_lock>
	*offload_lock = true;
   1c1b0:	4e1c      	ldr	r6, [pc, #112]	; (1c224 <nrf91_socket_create+0x84>)
   1c1b2:	2301      	movs	r3, #1
   1c1b4:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   1c1b6:	4642      	mov	r2, r8
   1c1b8:	4638      	mov	r0, r7
   1c1ba:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1c1be:	f7f3 f833 	bl	f228 <z_impl_zsock_socket>
	*offload_lock = false;
   1c1c2:	2300      	movs	r3, #0
   1c1c4:	7033      	strb	r3, [r6, #0]
   1c1c6:	4604      	mov	r4, r0
	k_sched_unlock();
   1c1c8:	f00d fe42 	bl	29e50 <k_sched_unlock>
}
   1c1cc:	4620      	mov	r0, r4
   1c1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1c1d2:	006b      	lsls	r3, r5, #1
   1c1d4:	d503      	bpl.n	1c1de <nrf91_socket_create+0x3e>
	k_sched_lock();
   1c1d6:	f00d fdcf 	bl	29d78 <k_sched_lock>
	*offload_lock = true;
   1c1da:	4e13      	ldr	r6, [pc, #76]	; (1c228 <nrf91_socket_create+0x88>)
   1c1dc:	e7e9      	b.n	1c1b2 <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1c1de:	f7f0 fbb5 	bl	c94c <z_reserve_fd>
	if (fd < 0) {
   1c1e2:	1e04      	subs	r4, r0, #0
   1c1e4:	db09      	blt.n	1c1fa <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1c1e6:	4629      	mov	r1, r5
   1c1e8:	4642      	mov	r2, r8
   1c1ea:	4638      	mov	r0, r7
   1c1ec:	f017 fed8 	bl	33fa0 <nrf_socket>
	if (sd < 0) {
   1c1f0:	1e05      	subs	r5, r0, #0
   1c1f2:	da05      	bge.n	1c200 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f7f0 fbf7 	bl	c9e8 <z_free_fd>
		return -1;
   1c1fa:	f04f 34ff 	mov.w	r4, #4294967295
   1c1fe:	e7e5      	b.n	1c1cc <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1c200:	f7ff fe92 	bl	1bf28 <allocate_ctx>
	if (ctx == NULL) {
   1c204:	4601      	mov	r1, r0
   1c206:	b938      	cbnz	r0, 1c218 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1c208:	f013 fcb3 	bl	2fb72 <__errno>
   1c20c:	230c      	movs	r3, #12
   1c20e:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1c210:	4628      	mov	r0, r5
   1c212:	f00a ff41 	bl	27098 <nrf_close>
		z_free_fd(fd);
   1c216:	e7ed      	b.n	1c1f4 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1c218:	4620      	mov	r0, r4
   1c21a:	4a04      	ldr	r2, [pc, #16]	; (1c22c <nrf91_socket_create+0x8c>)
   1c21c:	f7f0 fbcc 	bl	c9b8 <z_finalize_fd>
	return fd;
   1c220:	e7d4      	b.n	1c1cc <nrf91_socket_create+0x2c>
   1c222:	bf00      	nop
   1c224:	20011740 	.word	0x20011740
   1c228:	2001173f 	.word	0x2001173f
   1c22c:	00037054 	.word	0x00037054

0001c230 <z_impl_gpio_pin_configure>:
{
   1c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1c234:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   1c238:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   1c23a:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1c23e:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1c240:	d00e      	beq.n	1c260 <z_impl_gpio_pin_configure+0x30>
   1c242:	4942      	ldr	r1, [pc, #264]	; (1c34c <z_impl_gpio_pin_configure+0x11c>)
   1c244:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1c248:	4a41      	ldr	r2, [pc, #260]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c24a:	4842      	ldr	r0, [pc, #264]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c24c:	f012 fb82 	bl	2e954 <assert_print>
   1c250:	4841      	ldr	r0, [pc, #260]	; (1c358 <z_impl_gpio_pin_configure+0x128>)
   1c252:	f012 fb7f 	bl	2e954 <assert_print>
   1c256:	f44f 7135 	mov.w	r1, #724	; 0x2d4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c25a:	483d      	ldr	r0, [pc, #244]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c25c:	f012 fb73 	bl	2e946 <assert_post_action>
   1c260:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1c264:	2a30      	cmp	r2, #48	; 0x30
   1c266:	d10c      	bne.n	1c282 <z_impl_gpio_pin_configure+0x52>
   1c268:	493c      	ldr	r1, [pc, #240]	; (1c35c <z_impl_gpio_pin_configure+0x12c>)
   1c26a:	f240 23d7 	movw	r3, #727	; 0x2d7
   1c26e:	4a38      	ldr	r2, [pc, #224]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c270:	4838      	ldr	r0, [pc, #224]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c272:	f012 fb6f 	bl	2e954 <assert_print>
   1c276:	483a      	ldr	r0, [pc, #232]	; (1c360 <z_impl_gpio_pin_configure+0x130>)
   1c278:	f012 fb6c 	bl	2e954 <assert_print>
   1c27c:	f240 21d7 	movw	r1, #727	; 0x2d7
   1c280:	e7eb      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1c282:	4a38      	ldr	r2, [pc, #224]	; (1c364 <z_impl_gpio_pin_configure+0x134>)
   1c284:	4d38      	ldr	r5, [pc, #224]	; (1c368 <z_impl_gpio_pin_configure+0x138>)
   1c286:	401a      	ands	r2, r3
   1c288:	42aa      	cmp	r2, r5
   1c28a:	d10c      	bne.n	1c2a6 <z_impl_gpio_pin_configure+0x76>
   1c28c:	4937      	ldr	r1, [pc, #220]	; (1c36c <z_impl_gpio_pin_configure+0x13c>)
   1c28e:	f240 23db 	movw	r3, #731	; 0x2db
   1c292:	4a2f      	ldr	r2, [pc, #188]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c294:	482f      	ldr	r0, [pc, #188]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c296:	f012 fb5d 	bl	2e954 <assert_print>
   1c29a:	4835      	ldr	r0, [pc, #212]	; (1c370 <z_impl_gpio_pin_configure+0x140>)
   1c29c:	f012 fb5a 	bl	2e954 <assert_print>
   1c2a0:	f240 21db 	movw	r1, #731	; 0x2db
   1c2a4:	e7d9      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c2a6:	f003 0206 	and.w	r2, r3, #6
   1c2aa:	2a04      	cmp	r2, #4
   1c2ac:	d109      	bne.n	1c2c2 <z_impl_gpio_pin_configure+0x92>
   1c2ae:	4931      	ldr	r1, [pc, #196]	; (1c374 <z_impl_gpio_pin_configure+0x144>)
   1c2b0:	f240 23de 	movw	r3, #734	; 0x2de
   1c2b4:	4a26      	ldr	r2, [pc, #152]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c2b6:	4827      	ldr	r0, [pc, #156]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c2b8:	f012 fb4c 	bl	2e954 <assert_print>
   1c2bc:	f240 21de 	movw	r1, #734	; 0x2de
   1c2c0:	e7cb      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1c2c2:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1c2c6:	d016      	beq.n	1c2f6 <z_impl_gpio_pin_configure+0xc6>
   1c2c8:	039d      	lsls	r5, r3, #14
   1c2ca:	d40c      	bmi.n	1c2e6 <z_impl_gpio_pin_configure+0xb6>
   1c2cc:	492a      	ldr	r1, [pc, #168]	; (1c378 <z_impl_gpio_pin_configure+0x148>)
   1c2ce:	f240 23e1 	movw	r3, #737	; 0x2e1
   1c2d2:	4a1f      	ldr	r2, [pc, #124]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c2d4:	481f      	ldr	r0, [pc, #124]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c2d6:	f012 fb3d 	bl	2e954 <assert_print>
   1c2da:	4828      	ldr	r0, [pc, #160]	; (1c37c <z_impl_gpio_pin_configure+0x14c>)
   1c2dc:	f012 fb3a 	bl	2e954 <assert_print>
   1c2e0:	f240 21e1 	movw	r1, #737	; 0x2e1
   1c2e4:	e7b9      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1c2e6:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1c2ea:	d018      	beq.n	1c31e <z_impl_gpio_pin_configure+0xee>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c2ec:	4a24      	ldr	r2, [pc, #144]	; (1c380 <z_impl_gpio_pin_configure+0x150>)
   1c2ee:	439a      	bics	r2, r3
   1c2f0:	d101      	bne.n	1c2f6 <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c2f2:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c2f6:	2501      	movs	r5, #1
   1c2f8:	6824      	ldr	r4, [r4, #0]
   1c2fa:	408d      	lsls	r5, r1
   1c2fc:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c2fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c302:	d119      	bne.n	1c338 <z_impl_gpio_pin_configure+0x108>
   1c304:	491f      	ldr	r1, [pc, #124]	; (1c384 <z_impl_gpio_pin_configure+0x154>)
   1c306:	f240 23f1 	movw	r3, #753	; 0x2f1
   1c30a:	4a11      	ldr	r2, [pc, #68]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c30c:	4811      	ldr	r0, [pc, #68]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c30e:	f012 fb21 	bl	2e954 <assert_print>
   1c312:	481d      	ldr	r0, [pc, #116]	; (1c388 <z_impl_gpio_pin_configure+0x158>)
   1c314:	f012 fb1e 	bl	2e954 <assert_print>
   1c318:	f240 21f1 	movw	r1, #753	; 0x2f1
   1c31c:	e79d      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1c31e:	491b      	ldr	r1, [pc, #108]	; (1c38c <z_impl_gpio_pin_configure+0x15c>)
   1c320:	f240 23e5 	movw	r3, #741	; 0x2e5
   1c324:	4a0a      	ldr	r2, [pc, #40]	; (1c350 <z_impl_gpio_pin_configure+0x120>)
   1c326:	480b      	ldr	r0, [pc, #44]	; (1c354 <z_impl_gpio_pin_configure+0x124>)
   1c328:	f012 fb14 	bl	2e954 <assert_print>
   1c32c:	4818      	ldr	r0, [pc, #96]	; (1c390 <z_impl_gpio_pin_configure+0x160>)
   1c32e:	f012 fb11 	bl	2e954 <assert_print>
   1c332:	f240 21e5 	movw	r1, #741	; 0x2e5
   1c336:	e790      	b.n	1c25a <z_impl_gpio_pin_configure+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c338:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c33a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c33c:	bf4c      	ite	mi
   1c33e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c340:	43ac      	bicpl	r4, r5
   1c342:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1c344:	683b      	ldr	r3, [r7, #0]
}
   1c346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1c34a:	4718      	bx	r3
   1c34c:	0003bf39 	.word	0x0003bf39
   1c350:	00039aaa 	.word	0x00039aaa
   1c354:	000381c3 	.word	0x000381c3
   1c358:	0003bf96 	.word	0x0003bf96
   1c35c:	0003bfba 	.word	0x0003bfba
   1c360:	0003bff3 	.word	0x0003bff3
   1c364:	00030002 	.word	0x00030002
   1c368:	00010002 	.word	0x00010002
   1c36c:	0003c030 	.word	0x0003c030
   1c370:	0003c077 	.word	0x0003c077
   1c374:	0003c0c6 	.word	0x0003c0c6
   1c378:	0003c0f9 	.word	0x0003c0f9
   1c37c:	0003c13f 	.word	0x0003c13f
   1c380:	00100001 	.word	0x00100001
   1c384:	00039adb 	.word	0x00039adb
   1c388:	00039b19 	.word	0x00039b19
   1c38c:	0003c17a 	.word	0x0003c17a
   1c390:	0003c1bb 	.word	0x0003c1bb

0001c394 <z_impl_gpio_pin_interrupt_configure>:
{
   1c394:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1c396:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   1c39a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	const struct gpio_driver_data *const data =
   1c39e:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1c3a0:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1c3a4:	d10e      	bne.n	1c3c4 <z_impl_gpio_pin_interrupt_configure+0x30>
   1c3a6:	4931      	ldr	r1, [pc, #196]	; (1c46c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1c3a8:	f240 2377 	movw	r3, #631	; 0x277
   1c3ac:	4a30      	ldr	r2, [pc, #192]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c3ae:	4831      	ldr	r0, [pc, #196]	; (1c474 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1c3b0:	f012 fad0 	bl	2e954 <assert_print>
   1c3b4:	4830      	ldr	r0, [pc, #192]	; (1c478 <z_impl_gpio_pin_interrupt_configure+0xe4>)
   1c3b6:	f012 facd 	bl	2e954 <assert_print>
   1c3ba:	f240 2177 	movw	r1, #631	; 0x277
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1c3be:	482c      	ldr	r0, [pc, #176]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c3c0:	f012 fac1 	bl	2e946 <assert_post_action>
   1c3c4:	b963      	cbnz	r3, 1c3e0 <z_impl_gpio_pin_interrupt_configure+0x4c>
   1c3c6:	492d      	ldr	r1, [pc, #180]	; (1c47c <z_impl_gpio_pin_interrupt_configure+0xe8>)
   1c3c8:	f240 237b 	movw	r3, #635	; 0x27b
   1c3cc:	4a28      	ldr	r2, [pc, #160]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c3ce:	4829      	ldr	r0, [pc, #164]	; (1c474 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1c3d0:	f012 fac0 	bl	2e954 <assert_print>
   1c3d4:	482a      	ldr	r0, [pc, #168]	; (1c480 <z_impl_gpio_pin_interrupt_configure+0xec>)
   1c3d6:	f012 fabd 	bl	2e954 <assert_print>
   1c3da:	f240 217b 	movw	r1, #635	; 0x27b
   1c3de:	e7ee      	b.n	1c3be <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1c3e0:	f002 63e8 	and.w	r3, r2, #121634816	; 0x7400000
   1c3e4:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
   1c3e8:	d10c      	bne.n	1c404 <z_impl_gpio_pin_interrupt_configure+0x70>
   1c3ea:	4926      	ldr	r1, [pc, #152]	; (1c484 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   1c3ec:	f240 237e 	movw	r3, #638	; 0x27e
   1c3f0:	4a1f      	ldr	r2, [pc, #124]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c3f2:	4820      	ldr	r0, [pc, #128]	; (1c474 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1c3f4:	f012 faae 	bl	2e954 <assert_print>
   1c3f8:	4823      	ldr	r0, [pc, #140]	; (1c488 <z_impl_gpio_pin_interrupt_configure+0xf4>)
   1c3fa:	f012 faab 	bl	2e954 <assert_print>
   1c3fe:	f240 217e 	movw	r1, #638	; 0x27e
   1c402:	e7dc      	b.n	1c3be <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1c404:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1c408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1c40c:	d10c      	bne.n	1c428 <z_impl_gpio_pin_interrupt_configure+0x94>
   1c40e:	491f      	ldr	r1, [pc, #124]	; (1c48c <z_impl_gpio_pin_interrupt_configure+0xf8>)
   1c410:	f240 2385 	movw	r3, #645	; 0x285
   1c414:	4a16      	ldr	r2, [pc, #88]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c416:	4817      	ldr	r0, [pc, #92]	; (1c474 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1c418:	f012 fa9c 	bl	2e954 <assert_print>
   1c41c:	481c      	ldr	r0, [pc, #112]	; (1c490 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   1c41e:	f012 fa99 	bl	2e954 <assert_print>
   1c422:	f240 2185 	movw	r1, #645	; 0x285
   1c426:	e7ca      	b.n	1c3be <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c428:	2301      	movs	r3, #1
   1c42a:	6836      	ldr	r6, [r6, #0]
   1c42c:	408b      	lsls	r3, r1
   1c42e:	4233      	tst	r3, r6
   1c430:	d10c      	bne.n	1c44c <z_impl_gpio_pin_interrupt_configure+0xb8>
   1c432:	4918      	ldr	r1, [pc, #96]	; (1c494 <z_impl_gpio_pin_interrupt_configure+0x100>)
   1c434:	f240 238f 	movw	r3, #655	; 0x28f
   1c438:	4a0d      	ldr	r2, [pc, #52]	; (1c470 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1c43a:	480e      	ldr	r0, [pc, #56]	; (1c474 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1c43c:	f012 fa8a 	bl	2e954 <assert_print>
   1c440:	4815      	ldr	r0, [pc, #84]	; (1c498 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1c442:	f012 fa87 	bl	2e954 <assert_print>
   1c446:	f240 218f 	movw	r1, #655	; 0x28f
   1c44a:	e7b8      	b.n	1c3be <z_impl_gpio_pin_interrupt_configure+0x2a>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1c44c:	0216      	lsls	r6, r2, #8
   1c44e:	d504      	bpl.n	1c45a <z_impl_gpio_pin_interrupt_configure+0xc6>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1c450:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1c452:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1c454:	bf18      	it	ne
   1c456:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1c45a:	69a4      	ldr	r4, [r4, #24]
   1c45c:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1c460:	46a4      	mov	ip, r4
}
   1c462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1c466:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1c46a:	4760      	bx	ip
   1c46c:	0003c1e7 	.word	0x0003c1e7
   1c470:	00039aaa 	.word	0x00039aaa
   1c474:	000381c3 	.word	0x000381c3
   1c478:	0003c228 	.word	0x0003c228
   1c47c:	0003c254 	.word	0x0003c254
   1c480:	0003c27e 	.word	0x0003c27e
   1c484:	0003c2a9 	.word	0x0003c2a9
   1c488:	0003c32a 	.word	0x0003c32a
   1c48c:	0003c37e 	.word	0x0003c37e
   1c490:	0003c3c8 	.word	0x0003c3c8
   1c494:	00039adb 	.word	0x00039adb
   1c498:	00039b19 	.word	0x00039b19

0001c49c <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c49c:	2301      	movs	r3, #1
{
   1c49e:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4a0:	fa03 f101 	lsl.w	r1, r3, r1
   1c4a4:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1c4a6:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4a8:	681b      	ldr	r3, [r3, #0]
   1c4aa:	4219      	tst	r1, r3
   1c4ac:	d10e      	bne.n	1c4cc <gpio_pin_set+0x30>
   1c4ae:	490e      	ldr	r1, [pc, #56]	; (1c4e8 <gpio_pin_set+0x4c>)
   1c4b0:	f240 535c 	movw	r3, #1372	; 0x55c
   1c4b4:	4a0d      	ldr	r2, [pc, #52]	; (1c4ec <gpio_pin_set+0x50>)
   1c4b6:	480e      	ldr	r0, [pc, #56]	; (1c4f0 <gpio_pin_set+0x54>)
   1c4b8:	f012 fa4c 	bl	2e954 <assert_print>
   1c4bc:	480d      	ldr	r0, [pc, #52]	; (1c4f4 <gpio_pin_set+0x58>)
   1c4be:	f012 fa49 	bl	2e954 <assert_print>
   1c4c2:	f240 515c 	movw	r1, #1372	; 0x55c
   1c4c6:	4809      	ldr	r0, [pc, #36]	; (1c4ec <gpio_pin_set+0x50>)
   1c4c8:	f012 fa3d 	bl	2e946 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c4cc:	6823      	ldr	r3, [r4, #0]
   1c4ce:	4219      	tst	r1, r3
   1c4d0:	d003      	beq.n	1c4da <gpio_pin_set+0x3e>
	if (value != 0)	{
   1c4d2:	b122      	cbz	r2, 1c4de <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1c4d4:	6883      	ldr	r3, [r0, #8]
   1c4d6:	691b      	ldr	r3, [r3, #16]
   1c4d8:	e003      	b.n	1c4e2 <gpio_pin_set+0x46>
	if (value != 0)	{
   1c4da:	2a00      	cmp	r2, #0
   1c4dc:	d0fa      	beq.n	1c4d4 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1c4de:	6883      	ldr	r3, [r0, #8]
   1c4e0:	68db      	ldr	r3, [r3, #12]
}
   1c4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1c4e6:	4718      	bx	r3
   1c4e8:	00039adb 	.word	0x00039adb
   1c4ec:	00039aaa 	.word	0x00039aaa
   1c4f0:	000381c3 	.word	0x000381c3
   1c4f4:	00039b19 	.word	0x00039b19

0001c4f8 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1c4f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1c4fa:	4b07      	ldr	r3, [pc, #28]	; (1c518 <get_buttons.part.0+0x20>)
   1c4fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c500:	9305      	str	r3, [sp, #20]
   1c502:	2302      	movs	r3, #2
   1c504:	4805      	ldr	r0, [pc, #20]	; (1c51c <get_buttons.part.0+0x24>)
   1c506:	aa04      	add	r2, sp, #16
   1c508:	9304      	str	r3, [sp, #16]
   1c50a:	f016 fd1a 	bl	32f42 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1c50e:	2000      	movs	r0, #0
   1c510:	b007      	add	sp, #28
   1c512:	f85d fb04 	ldr.w	pc, [sp], #4
   1c516:	bf00      	nop
   1c518:	0003c40d 	.word	0x0003c40d
   1c51c:	00036470 	.word	0x00036470

0001c520 <get_buttons>:
{
   1c520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1c524:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c526:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c52a:	4625      	mov	r5, r4
   1c52c:	4e1c      	ldr	r6, [pc, #112]	; (1c5a0 <get_buttons+0x80>)
	return gpio_pin_get(spec->port, spec->pin);
   1c52e:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c530:	7937      	ldrb	r7, [r6, #4]
   1c532:	6843      	ldr	r3, [r0, #4]
   1c534:	fa08 f707 	lsl.w	r7, r8, r7
   1c538:	681b      	ldr	r3, [r3, #0]
   1c53a:	421f      	tst	r7, r3
   1c53c:	d10e      	bne.n	1c55c <get_buttons+0x3c>
   1c53e:	4919      	ldr	r1, [pc, #100]	; (1c5a4 <get_buttons+0x84>)
   1c540:	f240 5303 	movw	r3, #1283	; 0x503
   1c544:	4a18      	ldr	r2, [pc, #96]	; (1c5a8 <get_buttons+0x88>)
   1c546:	4819      	ldr	r0, [pc, #100]	; (1c5ac <get_buttons+0x8c>)
   1c548:	f012 fa04 	bl	2e954 <assert_print>
   1c54c:	4818      	ldr	r0, [pc, #96]	; (1c5b0 <get_buttons+0x90>)
   1c54e:	f012 fa01 	bl	2e954 <assert_print>
   1c552:	f240 5103 	movw	r1, #1283	; 0x503
   1c556:	4814      	ldr	r0, [pc, #80]	; (1c5a8 <get_buttons+0x88>)
   1c558:	f012 f9f5 	bl	2e946 <assert_post_action>
	const struct gpio_driver_data *const data =
   1c55c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1c560:	6883      	ldr	r3, [r0, #8]
   1c562:	a901      	add	r1, sp, #4
   1c564:	685b      	ldr	r3, [r3, #4]
   1c566:	4798      	blx	r3
	if (ret == 0) {
   1c568:	2800      	cmp	r0, #0
   1c56a:	d00c      	beq.n	1c586 <get_buttons+0x66>
		if (val < 0) {
   1c56c:	db12      	blt.n	1c594 <get_buttons+0x74>
			ret |= 1U << i;
   1c56e:	fa08 f305 	lsl.w	r3, r8, r5
   1c572:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c574:	3501      	adds	r5, #1
   1c576:	2d04      	cmp	r5, #4
   1c578:	f106 0608 	add.w	r6, r6, #8
   1c57c:	d1d7      	bne.n	1c52e <get_buttons+0xe>
}
   1c57e:	4620      	mov	r0, r4
   1c580:	b003      	add	sp, #12
   1c582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   1c586:	f8d9 2000 	ldr.w	r2, [r9]
   1c58a:	9b01      	ldr	r3, [sp, #4]
   1c58c:	4053      	eors	r3, r2
		if (val) {
   1c58e:	423b      	tst	r3, r7
   1c590:	d0f0      	beq.n	1c574 <get_buttons+0x54>
   1c592:	e7ec      	b.n	1c56e <get_buttons+0x4e>
}
   1c594:	b003      	add	sp, #12
   1c596:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c59a:	f7ff bfad 	b.w	1c4f8 <get_buttons.part.0>
   1c59e:	bf00      	nop
   1c5a0:	000370b4 	.word	0x000370b4
   1c5a4:	00039adb 	.word	0x00039adb
   1c5a8:	00039aaa 	.word	0x00039aaa
   1c5ac:	000381c3 	.word	0x000381c3
   1c5b0:	00039b19 	.word	0x00039b19

0001c5b4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1c5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5b8:	4607      	mov	r7, r0
   1c5ba:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c5bc:	2500      	movs	r5, #0
   1c5be:	4e14      	ldr	r6, [pc, #80]	; (1c610 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1c5c0:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1c5c2:	fa27 f205 	lsr.w	r2, r7, r5
   1c5c6:	f012 0201 	ands.w	r2, r2, #1
   1c5ca:	d117      	bne.n	1c5fc <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1c5cc:	fa28 f305 	lsr.w	r3, r8, r5
   1c5d0:	07db      	lsls	r3, r3, #31
   1c5d2:	d515      	bpl.n	1c600 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1c5d4:	7931      	ldrb	r1, [r6, #4]
   1c5d6:	6830      	ldr	r0, [r6, #0]
   1c5d8:	f7ff ff60 	bl	1c49c <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1c5dc:	4604      	mov	r4, r0
   1c5de:	b178      	cbz	r0, 1c600 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1c5e0:	4b0c      	ldr	r3, [pc, #48]	; (1c614 <dk_set_leds_state.part.0+0x60>)
   1c5e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c5e6:	9305      	str	r3, [sp, #20]
   1c5e8:	2302      	movs	r3, #2
   1c5ea:	480b      	ldr	r0, [pc, #44]	; (1c618 <dk_set_leds_state.part.0+0x64>)
   1c5ec:	aa04      	add	r2, sp, #16
   1c5ee:	9304      	str	r3, [sp, #16]
   1c5f0:	f016 fca7 	bl	32f42 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1c5f4:	4620      	mov	r0, r4
   1c5f6:	b006      	add	sp, #24
   1c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1c5fc:	2201      	movs	r2, #1
   1c5fe:	e7e9      	b.n	1c5d4 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c600:	3501      	adds	r5, #1
   1c602:	2d04      	cmp	r5, #4
   1c604:	f106 0608 	add.w	r6, r6, #8
   1c608:	d1db      	bne.n	1c5c2 <dk_set_leds_state.part.0+0xe>
	return 0;
   1c60a:	2400      	movs	r4, #0
   1c60c:	e7f2      	b.n	1c5f4 <dk_set_leds_state.part.0+0x40>
   1c60e:	bf00      	nop
   1c610:	00037094 	.word	0x00037094
   1c614:	0003c422 	.word	0x0003c422
   1c618:	00036470 	.word	0x00036470

0001c61c <callback_ctrl>:
{
   1c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c620:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1c622:	2600      	movs	r6, #0
   1c624:	4d19      	ldr	r5, [pc, #100]	; (1c68c <callback_ctrl+0x70>)
					 FLAGS_GPIO_0_1_ACTIVE :
   1c626:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1c690 <callback_ctrl+0x74>
{
   1c62a:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1c62c:	6828      	ldr	r0, [r5, #0]
		if (enable) {
   1c62e:	f1b8 0f00 	cmp.w	r8, #0
   1c632:	d01f      	beq.n	1c674 <callback_ctrl+0x58>
					 FLAGS_GPIO_0_1_ACTIVE :
   1c634:	4548      	cmp	r0, r9
   1c636:	d020      	beq.n	1c67a <callback_ctrl+0x5e>
   1c638:	2800      	cmp	r0, #0
   1c63a:	bf14      	ite	ne
   1c63c:	f04f 62e8 	movne.w	r2, #121634816	; 0x7400000
   1c640:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1c644:	7929      	ldrb	r1, [r5, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1c646:	f7ff fea5 	bl	1c394 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1c64a:	4604      	mov	r4, r0
   1c64c:	b1c0      	cbz	r0, 1c680 <callback_ctrl+0x64>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   1c64e:	466d      	mov	r5, sp
   1c650:	b088      	sub	sp, #32
   1c652:	466a      	mov	r2, sp
   1c654:	4b0f      	ldr	r3, [pc, #60]	; (1c694 <callback_ctrl+0x78>)
   1c656:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c65a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c65e:	2303      	movs	r3, #3
   1c660:	480d      	ldr	r0, [pc, #52]	; (1c698 <callback_ctrl+0x7c>)
   1c662:	f842 3f10 	str.w	r3, [r2, #16]!
   1c666:	f016 fc6c 	bl	32f42 <z_log_msg_static_create.constprop.0>
   1c66a:	46ad      	mov	sp, r5
}
   1c66c:	4620      	mov	r0, r4
   1c66e:	46bd      	mov	sp, r7
   1c670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			flags = GPIO_INT_DISABLE;
   1c674:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c678:	e7e4      	b.n	1c644 <callback_ctrl+0x28>
					 FLAGS_GPIO_0_1_ACTIVE :
   1c67a:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
   1c67e:	e7e1      	b.n	1c644 <callback_ctrl+0x28>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1c680:	3601      	adds	r6, #1
   1c682:	2e04      	cmp	r6, #4
   1c684:	f105 0508 	add.w	r5, r5, #8
   1c688:	d1d0      	bne.n	1c62c <callback_ctrl+0x10>
   1c68a:	e7ef      	b.n	1c66c <callback_ctrl+0x50>
   1c68c:	000370b4 	.word	0x000370b4
   1c690:	0003606c 	.word	0x0003606c
   1c694:	0003c438 	.word	0x0003c438
   1c698:	00036470 	.word	0x00036470

0001c69c <button_pressed>:
{
   1c69c:	b570      	push	{r4, r5, r6, lr}
   1c69e:	4604      	mov	r4, r0
   1c6a0:	b086      	sub	sp, #24
	__asm__ volatile(
   1c6a2:	f04f 0320 	mov.w	r3, #32
   1c6a6:	f3ef 8611 	mrs	r6, BASEPRI
   1c6aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6b2:	4825      	ldr	r0, [pc, #148]	; (1c748 <button_pressed+0xac>)
   1c6b4:	f00c f890 	bl	287d8 <z_spin_lock_valid>
   1c6b8:	b968      	cbnz	r0, 1c6d6 <button_pressed+0x3a>
   1c6ba:	2394      	movs	r3, #148	; 0x94
   1c6bc:	4a23      	ldr	r2, [pc, #140]	; (1c74c <button_pressed+0xb0>)
   1c6be:	4924      	ldr	r1, [pc, #144]	; (1c750 <button_pressed+0xb4>)
   1c6c0:	4824      	ldr	r0, [pc, #144]	; (1c754 <button_pressed+0xb8>)
   1c6c2:	f012 f947 	bl	2e954 <assert_print>
   1c6c6:	4920      	ldr	r1, [pc, #128]	; (1c748 <button_pressed+0xac>)
   1c6c8:	4823      	ldr	r0, [pc, #140]	; (1c758 <button_pressed+0xbc>)
   1c6ca:	f012 f943 	bl	2e954 <assert_print>
   1c6ce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c6d0:	481e      	ldr	r0, [pc, #120]	; (1c74c <button_pressed+0xb0>)
   1c6d2:	f012 f938 	bl	2e946 <assert_post_action>
	switch (state) {
   1c6d6:	4d21      	ldr	r5, [pc, #132]	; (1c75c <button_pressed+0xc0>)
	z_spin_lock_set_owner(l);
   1c6d8:	481b      	ldr	r0, [pc, #108]	; (1c748 <button_pressed+0xac>)
   1c6da:	f00c f899 	bl	28810 <z_spin_lock_set_owner>
   1c6de:	782b      	ldrb	r3, [r5, #0]
   1c6e0:	b9db      	cbnz	r3, 1c71a <button_pressed+0x7e>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   1c6e2:	4b1f      	ldr	r3, [pc, #124]	; (1c760 <button_pressed+0xc4>)
   1c6e4:	429c      	cmp	r4, r3
   1c6e6:	d000      	beq.n	1c6ea <button_pressed+0x4e>
   1c6e8:	b984      	cbnz	r4, 1c70c <button_pressed+0x70>
			err = callback_ctrl(false);
   1c6ea:	2000      	movs	r0, #0
   1c6ec:	f7ff ff96 	bl	1c61c <callback_ctrl>
			if (err) {
   1c6f0:	b148      	cbz	r0, 1c706 <button_pressed+0x6a>
				LOG_ERR("Failed disabling interrupts");
   1c6f2:	4b1c      	ldr	r3, [pc, #112]	; (1c764 <button_pressed+0xc8>)
   1c6f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c6f8:	9305      	str	r3, [sp, #20]
   1c6fa:	2302      	movs	r3, #2
   1c6fc:	481a      	ldr	r0, [pc, #104]	; (1c768 <button_pressed+0xcc>)
   1c6fe:	aa04      	add	r2, sp, #16
   1c700:	9304      	str	r3, [sp, #16]
   1c702:	f016 fc1e 	bl	32f42 <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   1c706:	2200      	movs	r2, #0
   1c708:	4b18      	ldr	r3, [pc, #96]	; (1c76c <button_pressed+0xd0>)
   1c70a:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   1c70c:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1c70e:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   1c710:	702b      	strb	r3, [r5, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1c712:	4817      	ldr	r0, [pc, #92]	; (1c770 <button_pressed+0xd4>)
   1c714:	2300      	movs	r3, #0
   1c716:	f00d f829 	bl	2976c <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c71a:	480b      	ldr	r0, [pc, #44]	; (1c748 <button_pressed+0xac>)
   1c71c:	f00c f86a 	bl	287f4 <z_spin_unlock_valid>
   1c720:	b958      	cbnz	r0, 1c73a <button_pressed+0x9e>
   1c722:	23c2      	movs	r3, #194	; 0xc2
   1c724:	4a09      	ldr	r2, [pc, #36]	; (1c74c <button_pressed+0xb0>)
   1c726:	4913      	ldr	r1, [pc, #76]	; (1c774 <button_pressed+0xd8>)
   1c728:	480a      	ldr	r0, [pc, #40]	; (1c754 <button_pressed+0xb8>)
   1c72a:	f012 f913 	bl	2e954 <assert_print>
   1c72e:	4906      	ldr	r1, [pc, #24]	; (1c748 <button_pressed+0xac>)
   1c730:	4811      	ldr	r0, [pc, #68]	; (1c778 <button_pressed+0xdc>)
   1c732:	f012 f90f 	bl	2e954 <assert_print>
   1c736:	21c2      	movs	r1, #194	; 0xc2
   1c738:	e7ca      	b.n	1c6d0 <button_pressed+0x34>
	__asm__ volatile(
   1c73a:	f386 8811 	msr	BASEPRI, r6
   1c73e:	f3bf 8f6f 	isb	sy
}
   1c742:	b006      	add	sp, #24
   1c744:	bd70      	pop	{r4, r5, r6, pc}
   1c746:	bf00      	nop
   1c748:	2000ff58 	.word	0x2000ff58
   1c74c:	000385b7 	.word	0x000385b7
   1c750:	00038610 	.word	0x00038610
   1c754:	000381c3 	.word	0x000381c3
   1c758:	00038625 	.word	0x00038625
   1c75c:	20011742 	.word	0x20011742
   1c760:	0003606c 	.word	0x0003606c
   1c764:	0003c458 	.word	0x0003c458
   1c768:	00036470 	.word	0x00036470
   1c76c:	20011741 	.word	0x20011741
   1c770:	2000dd18 	.word	0x2000dd18
   1c774:	000385e4 	.word	0x000385e4
   1c778:	000385fb 	.word	0x000385fb

0001c77c <buttons_scan_fn>:
{
   1c77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   1c780:	4f48      	ldr	r7, [pc, #288]	; (1c8a4 <buttons_scan_fn+0x128>)
{
   1c782:	b086      	sub	sp, #24
	if (irq_enabled) {
   1c784:	783b      	ldrb	r3, [r7, #0]
   1c786:	b18b      	cbz	r3, 1c7ac <buttons_scan_fn+0x30>
		err = callback_ctrl(false);
   1c788:	2000      	movs	r0, #0
   1c78a:	f7ff ff47 	bl	1c61c <callback_ctrl>
		if (err) {
   1c78e:	b160      	cbz	r0, 1c7aa <buttons_scan_fn+0x2e>
			LOG_ERR("Cannot disable callbacks");
   1c790:	4b45      	ldr	r3, [pc, #276]	; (1c8a8 <buttons_scan_fn+0x12c>)
			LOG_ERR("Cannot enable callbacks");
   1c792:	9305      	str	r3, [sp, #20]
   1c794:	2302      	movs	r3, #2
   1c796:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c79a:	4844      	ldr	r0, [pc, #272]	; (1c8ac <buttons_scan_fn+0x130>)
   1c79c:	aa04      	add	r2, sp, #16
   1c79e:	9304      	str	r3, [sp, #16]
   1c7a0:	f016 fbcf 	bl	32f42 <z_log_msg_static_create.constprop.0>
}
   1c7a4:	b006      	add	sp, #24
   1c7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		irq_enabled = false;
   1c7aa:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   1c7ac:	f7ff feb8 	bl	1c520 <get_buttons>
   1c7b0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c7b2:	4b3f      	ldr	r3, [pc, #252]	; (1c8b0 <buttons_scan_fn+0x134>)
   1c7b4:	e8d3 2fef 	ldaex	r2, [r3]
   1c7b8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1c7bc:	2900      	cmp	r1, #0
   1c7be:	d1f9      	bne.n	1c7b4 <buttons_scan_fn+0x38>
	if (!initial_run) {
   1c7c0:	4b3c      	ldr	r3, [pc, #240]	; (1c8b4 <buttons_scan_fn+0x138>)
   1c7c2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c8b8 <buttons_scan_fn+0x13c>
   1c7c6:	781a      	ldrb	r2, [r3, #0]
   1c7c8:	bb4a      	cbnz	r2, 1c81e <buttons_scan_fn+0xa2>
		if (button_scan != last_button_scan) {
   1c7ca:	f8d8 6000 	ldr.w	r6, [r8]
   1c7ce:	42a6      	cmp	r6, r4
   1c7d0:	d019      	beq.n	1c806 <buttons_scan_fn+0x8a>
	if (button_handler_cb != NULL) {
   1c7d2:	4b3a      	ldr	r3, [pc, #232]	; (1c8bc <buttons_scan_fn+0x140>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1c7d4:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1c7d6:	681b      	ldr	r3, [r3, #0]
   1c7d8:	b10b      	cbz	r3, 1c7de <buttons_scan_fn+0x62>
		button_handler_cb(button_state, has_changed);
   1c7da:	4631      	mov	r1, r6
   1c7dc:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1c7de:	f04f 33ff 	mov.w	r3, #4294967295
   1c7e2:	f04f 32ff 	mov.w	r2, #4294967295
   1c7e6:	4836      	ldr	r0, [pc, #216]	; (1c8c0 <buttons_scan_fn+0x144>)
   1c7e8:	f00c f84c 	bl	28884 <z_impl_k_mutex_lock>
	return list->head;
   1c7ec:	4b35      	ldr	r3, [pc, #212]	; (1c8c4 <buttons_scan_fn+0x148>)
   1c7ee:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1c7f0:	b135      	cbz	r5, 1c800 <buttons_scan_fn+0x84>
   1c7f2:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1c7f4:	682b      	ldr	r3, [r5, #0]
   1c7f6:	4631      	mov	r1, r6
   1c7f8:	4620      	mov	r0, r4
   1c7fa:	4798      	blx	r3
	return node->next;
   1c7fc:	686d      	ldr	r5, [r5, #4]
   1c7fe:	e7f7      	b.n	1c7f0 <buttons_scan_fn+0x74>
	return z_impl_k_mutex_unlock(mutex);
   1c800:	482f      	ldr	r0, [pc, #188]	; (1c8c0 <buttons_scan_fn+0x144>)
   1c802:	f00c f90f 	bl	28a24 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1c806:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   1c80a:	b15c      	cbz	r4, 1c824 <buttons_scan_fn+0xa8>
		k_work_reschedule(&buttons_scan,
   1c80c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c810:	2300      	movs	r3, #0
   1c812:	482d      	ldr	r0, [pc, #180]	; (1c8c8 <buttons_scan_fn+0x14c>)
}
   1c814:	b006      	add	sp, #24
   1c816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1c81a:	f00c bfa7 	b.w	2976c <k_work_reschedule>
		initial_run = false;
   1c81e:	2200      	movs	r2, #0
   1c820:	701a      	strb	r2, [r3, #0]
   1c822:	e7f0      	b.n	1c806 <buttons_scan_fn+0x8a>
	__asm__ volatile(
   1c824:	f04f 0320 	mov.w	r3, #32
   1c828:	f3ef 8611 	mrs	r6, BASEPRI
   1c82c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c830:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c834:	4825      	ldr	r0, [pc, #148]	; (1c8cc <buttons_scan_fn+0x150>)
   1c836:	f00b ffcf 	bl	287d8 <z_spin_lock_valid>
   1c83a:	b968      	cbnz	r0, 1c858 <buttons_scan_fn+0xdc>
   1c83c:	2394      	movs	r3, #148	; 0x94
   1c83e:	4a24      	ldr	r2, [pc, #144]	; (1c8d0 <buttons_scan_fn+0x154>)
   1c840:	4924      	ldr	r1, [pc, #144]	; (1c8d4 <buttons_scan_fn+0x158>)
   1c842:	4825      	ldr	r0, [pc, #148]	; (1c8d8 <buttons_scan_fn+0x15c>)
   1c844:	f012 f886 	bl	2e954 <assert_print>
   1c848:	4920      	ldr	r1, [pc, #128]	; (1c8cc <buttons_scan_fn+0x150>)
   1c84a:	4824      	ldr	r0, [pc, #144]	; (1c8dc <buttons_scan_fn+0x160>)
   1c84c:	f012 f882 	bl	2e954 <assert_print>
   1c850:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c852:	481f      	ldr	r0, [pc, #124]	; (1c8d0 <buttons_scan_fn+0x154>)
   1c854:	f012 f877 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c858:	481c      	ldr	r0, [pc, #112]	; (1c8cc <buttons_scan_fn+0x150>)
   1c85a:	f00b ffd9 	bl	28810 <z_spin_lock_set_owner>
		switch (state) {
   1c85e:	4b20      	ldr	r3, [pc, #128]	; (1c8e0 <buttons_scan_fn+0x164>)
   1c860:	781d      	ldrb	r5, [r3, #0]
   1c862:	2d01      	cmp	r5, #1
   1c864:	d105      	bne.n	1c872 <buttons_scan_fn+0xf6>
			err = callback_ctrl(true);
   1c866:	4628      	mov	r0, r5
			state = STATE_WAITING;
   1c868:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1c86a:	f7ff fed7 	bl	1c61c <callback_ctrl>
   1c86e:	4604      	mov	r4, r0
			irq_enabled = true;
   1c870:	703d      	strb	r5, [r7, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c872:	4816      	ldr	r0, [pc, #88]	; (1c8cc <buttons_scan_fn+0x150>)
   1c874:	f00b ffbe 	bl	287f4 <z_spin_unlock_valid>
   1c878:	b958      	cbnz	r0, 1c892 <buttons_scan_fn+0x116>
   1c87a:	23c2      	movs	r3, #194	; 0xc2
   1c87c:	4a14      	ldr	r2, [pc, #80]	; (1c8d0 <buttons_scan_fn+0x154>)
   1c87e:	4919      	ldr	r1, [pc, #100]	; (1c8e4 <buttons_scan_fn+0x168>)
   1c880:	4815      	ldr	r0, [pc, #84]	; (1c8d8 <buttons_scan_fn+0x15c>)
   1c882:	f012 f867 	bl	2e954 <assert_print>
   1c886:	4911      	ldr	r1, [pc, #68]	; (1c8cc <buttons_scan_fn+0x150>)
   1c888:	4817      	ldr	r0, [pc, #92]	; (1c8e8 <buttons_scan_fn+0x16c>)
   1c88a:	f012 f863 	bl	2e954 <assert_print>
   1c88e:	21c2      	movs	r1, #194	; 0xc2
   1c890:	e7df      	b.n	1c852 <buttons_scan_fn+0xd6>
	__asm__ volatile(
   1c892:	f386 8811 	msr	BASEPRI, r6
   1c896:	f3bf 8f6f 	isb	sy
		if (err) {
   1c89a:	2c00      	cmp	r4, #0
   1c89c:	d082      	beq.n	1c7a4 <buttons_scan_fn+0x28>
			LOG_ERR("Cannot enable callbacks");
   1c89e:	4b13      	ldr	r3, [pc, #76]	; (1c8ec <buttons_scan_fn+0x170>)
   1c8a0:	e777      	b.n	1c792 <buttons_scan_fn+0x16>
   1c8a2:	bf00      	nop
   1c8a4:	20011741 	.word	0x20011741
   1c8a8:	0003c474 	.word	0x0003c474
   1c8ac:	00036470 	.word	0x00036470
   1c8b0:	2000ff68 	.word	0x2000ff68
   1c8b4:	2000ccb4 	.word	0x2000ccb4
   1c8b8:	2000ff38 	.word	0x2000ff38
   1c8bc:	2000ff6c 	.word	0x2000ff6c
   1c8c0:	2000ff3c 	.word	0x2000ff3c
   1c8c4:	2000ff50 	.word	0x2000ff50
   1c8c8:	2000dd18 	.word	0x2000dd18
   1c8cc:	2000ff58 	.word	0x2000ff58
   1c8d0:	000385b7 	.word	0x000385b7
   1c8d4:	00038610 	.word	0x00038610
   1c8d8:	000381c3 	.word	0x000381c3
   1c8dc:	00038625 	.word	0x00038625
   1c8e0:	20011742 	.word	0x20011742
   1c8e4:	000385e4 	.word	0x000385e4
   1c8e8:	000385fb 	.word	0x000385fb
   1c8ec:	0003c48d 	.word	0x0003c48d

0001c8f0 <dk_leds_init>:
{
   1c8f0:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c8f2:	2600      	movs	r6, #0
   1c8f4:	4c11      	ldr	r4, [pc, #68]	; (1c93c <dk_leds_init+0x4c>)
{
   1c8f6:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   1c8f8:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1c8fa:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1c8fc:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1c8fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1c902:	f7ff fc95 	bl	1c230 <z_impl_gpio_pin_configure>
		if (err) {
   1c906:	4605      	mov	r5, r0
   1c908:	b950      	cbnz	r0, 1c920 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1c90a:	3601      	adds	r6, #1
   1c90c:	2e04      	cmp	r6, #4
   1c90e:	f104 0408 	add.w	r4, r4, #8
   1c912:	d1f1      	bne.n	1c8f8 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1c914:	210f      	movs	r1, #15
}
   1c916:	b006      	add	sp, #24
   1c918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c91c:	f7ff be4a 	b.w	1c5b4 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1c920:	4b07      	ldr	r3, [pc, #28]	; (1c940 <dk_leds_init+0x50>)
   1c922:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c926:	9305      	str	r3, [sp, #20]
   1c928:	2302      	movs	r3, #2
   1c92a:	4806      	ldr	r0, [pc, #24]	; (1c944 <dk_leds_init+0x54>)
   1c92c:	aa04      	add	r2, sp, #16
   1c92e:	9304      	str	r3, [sp, #16]
   1c930:	f016 fb07 	bl	32f42 <z_log_msg_static_create.constprop.0>
}
   1c934:	4628      	mov	r0, r5
   1c936:	b006      	add	sp, #24
   1c938:	bd70      	pop	{r4, r5, r6, pc}
   1c93a:	bf00      	nop
   1c93c:	00037094 	.word	0x00037094
   1c940:	0003c4a5 	.word	0x0003c4a5
   1c944:	00036470 	.word	0x00036470

0001c948 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c948:	4b05      	ldr	r3, [pc, #20]	; (1c960 <dk_read_buttons+0x18>)
   1c94a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   1c94e:	b100      	cbz	r0, 1c952 <dk_read_buttons+0xa>
		*button_state = current_state;
   1c950:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1c952:	4804      	ldr	r0, [pc, #16]	; (1c964 <dk_read_buttons+0x1c>)
   1c954:	b111      	cbz	r1, 1c95c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1c956:	6802      	ldr	r2, [r0, #0]
   1c958:	405a      	eors	r2, r3
   1c95a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1c95c:	6003      	str	r3, [r0, #0]
}
   1c95e:	4770      	bx	lr
   1c960:	2000ff68 	.word	0x2000ff68
   1c964:	2000ff34 	.word	0x2000ff34

0001c968 <dk_buttons_init>:
{
   1c968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   1c96c:	4b3b      	ldr	r3, [pc, #236]	; (1ca5c <dk_buttons_init+0xf4>)
{
   1c96e:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   1c970:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1c972:	4d3b      	ldr	r5, [pc, #236]	; (1ca60 <dk_buttons_init+0xf8>)
   1c974:	483b      	ldr	r0, [pc, #236]	; (1ca64 <dk_buttons_init+0xfc>)
   1c976:	f018 f923 	bl	34bc0 <z_impl_k_mutex_init>
   1c97a:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c97c:	f04f 0800 	mov.w	r8, #0
   1c980:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   1c982:	88f2      	ldrh	r2, [r6, #6]
   1c984:	6830      	ldr	r0, [r6, #0]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1c986:	f012 0f01 	tst.w	r2, #1
   1c98a:	bf14      	ite	ne
   1c98c:	2310      	movne	r3, #16
   1c98e:	2320      	moveq	r3, #32
				  spec->pin,
   1c990:	7931      	ldrb	r1, [r6, #4]
	return gpio_pin_configure(spec->port,
   1c992:	431a      	orrs	r2, r3
   1c994:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   1c998:	f7ff fc4a 	bl	1c230 <z_impl_gpio_pin_configure>
		if (err) {
   1c99c:	4604      	mov	r4, r0
   1c99e:	b168      	cbz	r0, 1c9bc <dk_buttons_init+0x54>
			LOG_ERR("Cannot configure button gpio");
   1c9a0:	4b31      	ldr	r3, [pc, #196]	; (1ca68 <dk_buttons_init+0x100>)
			LOG_ERR("Cannot disable callbacks()");
   1c9a2:	9305      	str	r3, [sp, #20]
   1c9a4:	2302      	movs	r3, #2
   1c9a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c9aa:	4830      	ldr	r0, [pc, #192]	; (1ca6c <dk_buttons_init+0x104>)
   1c9ac:	aa04      	add	r2, sp, #16
   1c9ae:	9304      	str	r3, [sp, #16]
   1c9b0:	f016 fac7 	bl	32f42 <z_log_msg_static_create.constprop.0>
}
   1c9b4:	4620      	mov	r0, r4
   1c9b6:	b007      	add	sp, #28
   1c9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9bc:	f108 0801 	add.w	r8, r8, #1
   1c9c0:	f1b8 0f04 	cmp.w	r8, #4
   1c9c4:	f106 0608 	add.w	r6, r6, #8
   1c9c8:	d1db      	bne.n	1c982 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9ca:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   1c9cc:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   1c9ce:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1c9d2:	6828      	ldr	r0, [r5, #0]
   1c9d4:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1c9d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c9da:	f7ff fcdb 	bl	1c394 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1c9de:	4604      	mov	r4, r0
   1c9e0:	b108      	cbz	r0, 1c9e6 <dk_buttons_init+0x7e>
			LOG_ERR("Cannot disable callbacks()");
   1c9e2:	4b23      	ldr	r3, [pc, #140]	; (1ca70 <dk_buttons_init+0x108>)
   1c9e4:	e7dd      	b.n	1c9a2 <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   1c9e6:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9e8:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   1c9ea:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9ee:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   1c9f0:	ea48 0803 	orr.w	r8, r8, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9f4:	f105 0508 	add.w	r5, r5, #8
   1c9f8:	d1eb      	bne.n	1c9d2 <dk_buttons_init+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1c9fa:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1c9fc:	4e1d      	ldr	r6, [pc, #116]	; (1ca74 <dk_buttons_init+0x10c>)
   1c9fe:	4b1e      	ldr	r3, [pc, #120]	; (1ca78 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   1ca00:	e9c6 3801 	strd	r3, r8, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1ca04:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1ca08:	6883      	ldr	r3, [r0, #8]
   1ca0a:	69db      	ldr	r3, [r3, #28]
   1ca0c:	b133      	cbz	r3, 1ca1c <dk_buttons_init+0xb4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1ca0e:	2201      	movs	r2, #1
   1ca10:	4631      	mov	r1, r6
   1ca12:	4798      	blx	r3
		if (err) {
   1ca14:	4604      	mov	r4, r0
   1ca16:	b120      	cbz	r0, 1ca22 <dk_buttons_init+0xba>
			LOG_ERR("Cannot add callback");
   1ca18:	4b18      	ldr	r3, [pc, #96]	; (1ca7c <dk_buttons_init+0x114>)
   1ca1a:	e7c2      	b.n	1c9a2 <dk_buttons_init+0x3a>
		return -ENOTSUP;
   1ca1c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ca20:	e7fa      	b.n	1ca18 <dk_buttons_init+0xb0>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1ca22:	3501      	adds	r5, #1
   1ca24:	2d04      	cmp	r5, #4
   1ca26:	d1ed      	bne.n	1ca04 <dk_buttons_init+0x9c>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1ca28:	4915      	ldr	r1, [pc, #84]	; (1ca80 <dk_buttons_init+0x118>)
   1ca2a:	4816      	ldr	r0, [pc, #88]	; (1ca84 <dk_buttons_init+0x11c>)
   1ca2c:	f00c fd82 	bl	29534 <k_work_init_delayable>
	state = STATE_SCANNING;
   1ca30:	2201      	movs	r2, #1
   1ca32:	4b15      	ldr	r3, [pc, #84]	; (1ca88 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1ca34:	4813      	ldr	r0, [pc, #76]	; (1ca84 <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   1ca36:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1ca38:	2300      	movs	r3, #0
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	f00c fe1c 	bl	29678 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1ca40:	4621      	mov	r1, r4
   1ca42:	4620      	mov	r0, r4
   1ca44:	f7ff ff80 	bl	1c948 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1ca48:	f7ff fd6a 	bl	1c520 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ca4c:	4b0f      	ldr	r3, [pc, #60]	; (1ca8c <dk_buttons_init+0x124>)
   1ca4e:	e8d3 2fef 	ldaex	r2, [r3]
   1ca52:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1ca56:	2900      	cmp	r1, #0
   1ca58:	d0ac      	beq.n	1c9b4 <dk_buttons_init+0x4c>
   1ca5a:	e7f8      	b.n	1ca4e <dk_buttons_init+0xe6>
   1ca5c:	2000ff6c 	.word	0x2000ff6c
   1ca60:	000370b4 	.word	0x000370b4
   1ca64:	2000ff3c 	.word	0x2000ff3c
   1ca68:	0003c4bf 	.word	0x0003c4bf
   1ca6c:	00036470 	.word	0x00036470
   1ca70:	0003c4dc 	.word	0x0003c4dc
   1ca74:	2000ff5c 	.word	0x2000ff5c
   1ca78:	0001c69d 	.word	0x0001c69d
   1ca7c:	0003c4f7 	.word	0x0003c4f7
   1ca80:	0001c77d 	.word	0x0001c77d
   1ca84:	2000dd18 	.word	0x2000dd18
   1ca88:	20011742 	.word	0x20011742
   1ca8c:	2000ff68 	.word	0x2000ff68

0001ca90 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1ca90:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1ca92:	2803      	cmp	r0, #3
{
   1ca94:	460a      	mov	r2, r1
   1ca96:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   1ca98:	d90e      	bls.n	1cab8 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1ca9a:	4b12      	ldr	r3, [pc, #72]	; (1cae4 <dk_set_led+0x54>)
		return -EINVAL;
   1ca9c:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1caa0:	9305      	str	r3, [sp, #20]
   1caa2:	2302      	movs	r3, #2
   1caa4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1caa8:	480f      	ldr	r0, [pc, #60]	; (1cae8 <dk_set_led+0x58>)
   1caaa:	aa04      	add	r2, sp, #16
   1caac:	9304      	str	r3, [sp, #16]
   1caae:	f016 fa48 	bl	32f42 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1cab2:	4620      	mov	r0, r4
   1cab4:	b006      	add	sp, #24
   1cab6:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1cab8:	4b0c      	ldr	r3, [pc, #48]	; (1caec <dk_set_led+0x5c>)
   1caba:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1cabe:	7909      	ldrb	r1, [r1, #4]
   1cac0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1cac4:	f7ff fcea 	bl	1c49c <gpio_pin_set>
	if (err) {
   1cac8:	4604      	mov	r4, r0
   1caca:	2800      	cmp	r0, #0
   1cacc:	d0f1      	beq.n	1cab2 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1cace:	4b08      	ldr	r3, [pc, #32]	; (1caf0 <dk_set_led+0x60>)
   1cad0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cad4:	9305      	str	r3, [sp, #20]
   1cad6:	2302      	movs	r3, #2
   1cad8:	4803      	ldr	r0, [pc, #12]	; (1cae8 <dk_set_led+0x58>)
   1cada:	aa04      	add	r2, sp, #16
   1cadc:	9304      	str	r3, [sp, #16]
   1cade:	f016 fa30 	bl	32f42 <z_log_msg_static_create.constprop.0>
   1cae2:	e7e6      	b.n	1cab2 <dk_set_led+0x22>
   1cae4:	0003c50b 	.word	0x0003c50b
   1cae8:	00036470 	.word	0x00036470
   1caec:	00037094 	.word	0x00037094
   1caf0:	0003c422 	.word	0x0003c422

0001caf4 <at_monitor_dispatch.part.0>:

/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
   1caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1caf8:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1cafa:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cafc:	4d2b      	ldr	r5, [pc, #172]	; (1cbac <at_monitor_dispatch.part.0+0xb8>)
   1cafe:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1cbb0 <at_monitor_dispatch.part.0+0xbc>
void at_monitor_dispatch(const char *notif)
   1cb02:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cb04:	454d      	cmp	r5, r9
   1cb06:	d921      	bls.n	1cb4c <at_monitor_dispatch.part.0+0x58>
   1cb08:	492a      	ldr	r1, [pc, #168]	; (1cbb4 <at_monitor_dispatch.part.0+0xc0>)
   1cb0a:	2339      	movs	r3, #57	; 0x39
   1cb0c:	4a2a      	ldr	r2, [pc, #168]	; (1cbb8 <at_monitor_dispatch.part.0+0xc4>)
   1cb0e:	482b      	ldr	r0, [pc, #172]	; (1cbbc <at_monitor_dispatch.part.0+0xc8>)
   1cb10:	f011 ff20 	bl	2e954 <assert_print>
   1cb14:	482a      	ldr	r0, [pc, #168]	; (1cbc0 <at_monitor_dispatch.part.0+0xcc>)
   1cb16:	f011 ff1d 	bl	2e954 <assert_print>
   1cb1a:	2139      	movs	r1, #57	; 0x39
   1cb1c:	4826      	ldr	r0, [pc, #152]	; (1cbb8 <at_monitor_dispatch.part.0+0xc4>)
   1cb1e:	f011 ff12 	bl	2e946 <assert_post_action>
	return mon->flags.paused;
   1cb22:	f895 8008 	ldrb.w	r8, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1cb26:	f018 0f01 	tst.w	r8, #1
   1cb2a:	d10b      	bne.n	1cb44 <at_monitor_dispatch.part.0+0x50>
   1cb2c:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1cb2e:	b119      	cbz	r1, 1cb38 <at_monitor_dispatch.part.0+0x44>
   1cb30:	4620      	mov	r0, r4
   1cb32:	f018 fc66 	bl	35402 <strstr>
   1cb36:	b128      	cbz	r0, 1cb44 <at_monitor_dispatch.part.0+0x50>
			if (is_direct(e)) {
   1cb38:	f018 0f02 	tst.w	r8, #2
   1cb3c:	d004      	beq.n	1cb48 <at_monitor_dispatch.part.0+0x54>
				LOG_DBG("Dispatching to %p (ISR)", e->handler);
				e->handler(notif);
   1cb3e:	4620      	mov	r0, r4
   1cb40:	686b      	ldr	r3, [r5, #4]
   1cb42:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cb44:	350c      	adds	r5, #12
   1cb46:	e7dd      	b.n	1cb04 <at_monitor_dispatch.part.0+0x10>
			} else {
				/* Copy and schedule work-queue task */
				monitored = true;
   1cb48:	2601      	movs	r6, #1
   1cb4a:	e7fb      	b.n	1cb44 <at_monitor_dispatch.part.0+0x50>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cb4c:	d3e9      	bcc.n	1cb22 <at_monitor_dispatch.part.0+0x2e>
			}
		}
	}

	if (!monitored) {
   1cb4e:	b1ee      	cbz	r6, 1cb8c <at_monitor_dispatch.part.0+0x98>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1cb50:	4620      	mov	r0, r4
   1cb52:	f7ec fbe2 	bl	931a <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1cb56:	2200      	movs	r2, #0
   1cb58:	1d41      	adds	r1, r0, #5
   1cb5a:	2300      	movs	r3, #0
   1cb5c:	4819      	ldr	r0, [pc, #100]	; (1cbc4 <at_monitor_dispatch.part.0+0xd0>)
   1cb5e:	f017 fff3 	bl	34b48 <k_heap_alloc>
	if (!at_notif) {
   1cb62:	4605      	mov	r5, r0
   1cb64:	b9a8      	cbnz	r0, 1cb92 <at_monitor_dispatch.part.0+0x9e>
		LOG_WRN("No heap space for incoming notification: %s",
   1cb66:	466e      	mov	r6, sp
   1cb68:	b088      	sub	sp, #32
   1cb6a:	466a      	mov	r2, sp
   1cb6c:	4b16      	ldr	r3, [pc, #88]	; (1cbc8 <at_monitor_dispatch.part.0+0xd4>)
   1cb6e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cb72:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cb76:	8393      	strh	r3, [r2, #28]
   1cb78:	4b14      	ldr	r3, [pc, #80]	; (1cbcc <at_monitor_dispatch.part.0+0xd8>)
   1cb7a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb7e:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1cb82:	4603      	mov	r3, r0
   1cb84:	4812      	ldr	r0, [pc, #72]	; (1cbd0 <at_monitor_dispatch.part.0+0xdc>)
   1cb86:	f7f1 fe49 	bl	e81c <z_impl_z_log_msg_static_create>
   1cb8a:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1cb8c:	46bd      	mov	sp, r7
   1cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1cb92:	4621      	mov	r1, r4
   1cb94:	3004      	adds	r0, #4
   1cb96:	f018 fbe7 	bl	35368 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1cb9a:	4629      	mov	r1, r5
   1cb9c:	480d      	ldr	r0, [pc, #52]	; (1cbd4 <at_monitor_dispatch.part.0+0xe0>)
   1cb9e:	f018 f82f 	bl	34c00 <k_queue_append>
	k_work_submit(&at_monitor_work);
   1cba2:	480d      	ldr	r0, [pc, #52]	; (1cbd8 <at_monitor_dispatch.part.0+0xe4>)
   1cba4:	f00c fc3e 	bl	29424 <k_work_submit>
   1cba8:	e7f0      	b.n	1cb8c <at_monitor_dispatch.part.0+0x98>
   1cbaa:	bf00      	nop
   1cbac:	2000cd00 	.word	0x2000cd00
   1cbb0:	2000cd6c 	.word	0x2000cd6c
   1cbb4:	0003c566 	.word	0x0003c566
   1cbb8:	0003c53a 	.word	0x0003c53a
   1cbbc:	000381c3 	.word	0x000381c3
   1cbc0:	000387c1 	.word	0x000387c1
   1cbc4:	2000ce3c 	.word	0x2000ce3c
   1cbc8:	0003c586 	.word	0x0003c586
   1cbcc:	01000003 	.word	0x01000003
   1cbd0:	000363e8 	.word	0x000363e8
   1cbd4:	2000cff8 	.word	0x2000cff8
   1cbd8:	2000c99c 	.word	0x2000c99c

0001cbdc <at_monitor_dispatch>:
{
   1cbdc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(notif != NULL);
   1cbde:	b948      	cbnz	r0, 1cbf4 <at_monitor_dispatch+0x18>
   1cbe0:	4906      	ldr	r1, [pc, #24]	; (1cbfc <at_monitor_dispatch+0x20>)
   1cbe2:	4807      	ldr	r0, [pc, #28]	; (1cc00 <at_monitor_dispatch+0x24>)
   1cbe4:	2336      	movs	r3, #54	; 0x36
   1cbe6:	4a07      	ldr	r2, [pc, #28]	; (1cc04 <at_monitor_dispatch+0x28>)
   1cbe8:	f011 feb4 	bl	2e954 <assert_print>
   1cbec:	2136      	movs	r1, #54	; 0x36
   1cbee:	4805      	ldr	r0, [pc, #20]	; (1cc04 <at_monitor_dispatch+0x28>)
   1cbf0:	f011 fea9 	bl	2e946 <assert_post_action>
}
   1cbf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1cbf8:	f7ff bf7c 	b.w	1caf4 <at_monitor_dispatch.part.0>
   1cbfc:	0003c5b2 	.word	0x0003c5b2
   1cc00:	000381c3 	.word	0x000381c3
   1cc04:	0003c53a 	.word	0x0003c53a

0001cc08 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
   1cc08:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1cc0a:	480c      	ldr	r0, [pc, #48]	; (1cc3c <at_monitor_sys_init+0x34>)
{
   1cc0c:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1cc0e:	f009 fd33 	bl	26678 <nrf_modem_at_notif_handler_set>
	if (err) {
   1cc12:	b178      	cbz	r0, 1cc34 <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1cc14:	466c      	mov	r4, sp
   1cc16:	b088      	sub	sp, #32
   1cc18:	466a      	mov	r2, sp
   1cc1a:	4b09      	ldr	r3, [pc, #36]	; (1cc40 <at_monitor_sys_init+0x38>)
   1cc1c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cc20:	2303      	movs	r3, #3
   1cc22:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc26:	2300      	movs	r3, #0
   1cc28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc2c:	4805      	ldr	r0, [pc, #20]	; (1cc44 <at_monitor_sys_init+0x3c>)
   1cc2e:	f7f1 fdf5 	bl	e81c <z_impl_z_log_msg_static_create>
   1cc32:	46a5      	mov	sp, r4
	}

	return 0;
}
   1cc34:	2000      	movs	r0, #0
   1cc36:	46bd      	mov	sp, r7
   1cc38:	bd98      	pop	{r3, r4, r7, pc}
   1cc3a:	bf00      	nop
   1cc3c:	0001cbdd 	.word	0x0001cbdd
   1cc40:	0003c5c7 	.word	0x0003c5c7
   1cc44:	000363e8 	.word	0x000363e8

0001cc48 <at_monitor_task>:
{
   1cc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1cc4c:	4e1a      	ldr	r6, [pc, #104]	; (1ccb8 <at_monitor_task+0x70>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cc4e:	4f1b      	ldr	r7, [pc, #108]	; (1ccbc <at_monitor_task+0x74>)
		k_heap_free(&at_monitor_heap, at_notif);
   1cc50:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1ccc0 <at_monitor_task+0x78>
   1cc54:	2200      	movs	r2, #0
   1cc56:	2300      	movs	r3, #0
   1cc58:	4630      	mov	r0, r6
   1cc5a:	f00c f80b 	bl	28c74 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1cc5e:	4605      	mov	r5, r0
   1cc60:	b9f8      	cbnz	r0, 1cca2 <at_monitor_task+0x5a>
}
   1cc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1cc66:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1cc68:	07da      	lsls	r2, r3, #31
   1cc6a:	d40a      	bmi.n	1cc82 <at_monitor_task+0x3a>
   1cc6c:	079b      	lsls	r3, r3, #30
   1cc6e:	d408      	bmi.n	1cc82 <at_monitor_task+0x3a>
   1cc70:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1cc72:	b119      	cbz	r1, 1cc7c <at_monitor_task+0x34>
   1cc74:	4648      	mov	r0, r9
   1cc76:	f018 fbc4 	bl	35402 <strstr>
   1cc7a:	b110      	cbz	r0, 1cc82 <at_monitor_task+0x3a>
				e->handler(at_notif->data);
   1cc7c:	4648      	mov	r0, r9
   1cc7e:	6863      	ldr	r3, [r4, #4]
   1cc80:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1cc82:	340c      	adds	r4, #12
   1cc84:	42bc      	cmp	r4, r7
   1cc86:	d910      	bls.n	1ccaa <at_monitor_task+0x62>
   1cc88:	490e      	ldr	r1, [pc, #56]	; (1ccc4 <at_monitor_task+0x7c>)
   1cc8a:	2360      	movs	r3, #96	; 0x60
   1cc8c:	4a0e      	ldr	r2, [pc, #56]	; (1ccc8 <at_monitor_task+0x80>)
   1cc8e:	480f      	ldr	r0, [pc, #60]	; (1cccc <at_monitor_task+0x84>)
   1cc90:	f011 fe60 	bl	2e954 <assert_print>
   1cc94:	480e      	ldr	r0, [pc, #56]	; (1ccd0 <at_monitor_task+0x88>)
   1cc96:	f011 fe5d 	bl	2e954 <assert_print>
   1cc9a:	2160      	movs	r1, #96	; 0x60
   1cc9c:	480a      	ldr	r0, [pc, #40]	; (1ccc8 <at_monitor_task+0x80>)
   1cc9e:	f011 fe52 	bl	2e946 <assert_post_action>
   1cca2:	4c0c      	ldr	r4, [pc, #48]	; (1ccd4 <at_monitor_task+0x8c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1cca4:	f105 0904 	add.w	r9, r5, #4
   1cca8:	e7ec      	b.n	1cc84 <at_monitor_task+0x3c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1ccaa:	d3dc      	bcc.n	1cc66 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1ccac:	4629      	mov	r1, r5
   1ccae:	4640      	mov	r0, r8
   1ccb0:	f00b fb2e 	bl	28310 <k_heap_free>
   1ccb4:	e7ce      	b.n	1cc54 <at_monitor_task+0xc>
   1ccb6:	bf00      	nop
   1ccb8:	2000cff8 	.word	0x2000cff8
   1ccbc:	2000cd6c 	.word	0x2000cd6c
   1ccc0:	2000ce3c 	.word	0x2000ce3c
   1ccc4:	0003c566 	.word	0x0003c566
   1ccc8:	0003c53a 	.word	0x0003c53a
   1cccc:	000381c3 	.word	0x000381c3
   1ccd0:	000387c1 	.word	0x000387c1
   1ccd4:	2000cd00 	.word	0x2000cd00

0001ccd8 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   1ccd8:	4802      	ldr	r0, [pc, #8]	; (1cce4 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   1ccda:	6883      	ldr	r3, [r0, #8]
   1ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ccde:	b103      	cbz	r3, 1cce2 <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   1cce0:	4718      	bx	r3
}
   1cce2:	4770      	bx	lr
   1cce4:	000360cc 	.word	0x000360cc

0001cce8 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   1cce8:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   1ccea:	4d05      	ldr	r5, [pc, #20]	; (1cd00 <write_uart_string+0x18>)
   1ccec:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   1ccee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1ccf2:	b901      	cbnz	r1, 1ccf6 <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   1ccf4:	bd38      	pop	{r3, r4, r5, pc}
   1ccf6:	68ab      	ldr	r3, [r5, #8]
   1ccf8:	4801      	ldr	r0, [pc, #4]	; (1cd00 <write_uart_string+0x18>)
   1ccfa:	69db      	ldr	r3, [r3, #28]
   1ccfc:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1ccfe:	e7f6      	b.n	1ccee <write_uart_string+0x6>
   1cd00:	000360cc 	.word	0x000360cc

0001cd04 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   1cd04:	b598      	push	{r3, r4, r7, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   1cd06:	4b12      	ldr	r3, [pc, #72]	; (1cd50 <cmd_send+0x4c>)
   1cd08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1cd0c:	4618      	mov	r0, r3
   1cd0e:	4a11      	ldr	r2, [pc, #68]	; (1cd54 <cmd_send+0x50>)
{
   1cd10:	af00      	add	r7, sp, #0
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   1cd12:	f009 fd03 	bl	2671c <nrf_modem_at_cmd>
	if (err < 0) {
   1cd16:	2800      	cmp	r0, #0
   1cd18:	da0f      	bge.n	1cd3a <cmd_send+0x36>
		LOG_ERR("Error while processing AT command: %d", err);
   1cd1a:	466c      	mov	r4, sp
   1cd1c:	b088      	sub	sp, #32
   1cd1e:	466a      	mov	r2, sp
   1cd20:	4b0d      	ldr	r3, [pc, #52]	; (1cd58 <cmd_send+0x54>)
   1cd22:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cd26:	2303      	movs	r3, #3
   1cd28:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd2c:	2300      	movs	r3, #0
   1cd2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cd32:	480a      	ldr	r0, [pc, #40]	; (1cd5c <cmd_send+0x58>)
   1cd34:	f7f1 fd72 	bl	e81c <z_impl_z_log_msg_static_create>
   1cd38:	46a5      	mov	sp, r4
	}

	write_uart_string(at_buf);
   1cd3a:	4805      	ldr	r0, [pc, #20]	; (1cd50 <cmd_send+0x4c>)
   1cd3c:	f7ff ffd4 	bl	1cce8 <write_uart_string>

	at_buf_busy = false;
   1cd40:	2200      	movs	r2, #0
   1cd42:	4b07      	ldr	r3, [pc, #28]	; (1cd60 <cmd_send+0x5c>)
   1cd44:	701a      	strb	r2, [r3, #0]
	z_impl_uart_irq_rx_enable(dev);
   1cd46:	f7ff ffc7 	bl	1ccd8 <z_impl_uart_irq_rx_enable.constprop.0>
	uart_irq_rx_enable(uart_dev);
}
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	bd98      	pop	{r3, r4, r7, pc}
   1cd4e:	bf00      	nop
   1cd50:	20011744 	.word	0x20011744
   1cd54:	0003cc0c 	.word	0x0003cc0c
   1cd58:	0003c5ff 	.word	0x0003c5ff
   1cd5c:	000363e0 	.word	0x000363e0
   1cd60:	20012744 	.word	0x20012744

0001cd64 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   1cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd68:	b088      	sub	sp, #32
   1cd6a:	4604      	mov	r4, r0
   1cd6c:	af00      	add	r7, sp, #0
	if (api->irq_update == NULL) {
   1cd6e:	6883      	ldr	r3, [r0, #8]
   1cd70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1cd72:	b103      	cbz	r3, 1cd76 <isr+0x12>
	return api->irq_update(dev);
   1cd74:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   1cd76:	68a3      	ldr	r3, [r4, #8]
   1cd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1cd7a:	b9b3      	cbnz	r3, 1cdaa <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   1cd7c:	4e5a      	ldr	r6, [pc, #360]	; (1cee8 <isr+0x184>)
		if (at_cmd_len > 0) {
   1cd7e:	4d5b      	ldr	r5, [pc, #364]	; (1ceec <isr+0x188>)
	while ((!at_buf_busy) &&
   1cd80:	7833      	ldrb	r3, [r6, #0]
   1cd82:	b9b3      	cbnz	r3, 1cdb2 <isr+0x4e>
	if (api->fifo_read == NULL) {
   1cd84:	68a3      	ldr	r3, [r4, #8]
   1cd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cd88:	b123      	cbz	r3, 1cd94 <isr+0x30>
	return api->fifo_read(dev, rx_data, size);
   1cd8a:	2201      	movs	r2, #1
   1cd8c:	4620      	mov	r0, r4
   1cd8e:	1df9      	adds	r1, r7, #7
   1cd90:	4798      	blx	r3
   1cd92:	b170      	cbz	r0, 1cdb2 <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   1cd94:	79fb      	ldrb	r3, [r7, #7]
	switch (character) {
   1cd96:	2b08      	cmp	r3, #8
   1cd98:	d001      	beq.n	1cd9e <isr+0x3a>
   1cd9a:	2b7f      	cmp	r3, #127	; 0x7f
   1cd9c:	d10d      	bne.n	1cdba <isr+0x56>
		if (at_cmd_len > 0) {
   1cd9e:	682b      	ldr	r3, [r5, #0]
   1cda0:	2b00      	cmp	r3, #0
   1cda2:	d0ed      	beq.n	1cd80 <isr+0x1c>
			at_cmd_len--;
   1cda4:	3b01      	subs	r3, #1
   1cda6:	602b      	str	r3, [r5, #0]
   1cda8:	e7ea      	b.n	1cd80 <isr+0x1c>
	return api->irq_rx_ready(dev);
   1cdaa:	4620      	mov	r0, r4
   1cdac:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   1cdae:	2800      	cmp	r0, #0
   1cdb0:	d1e4      	bne.n	1cd7c <isr+0x18>
	}
}
   1cdb2:	3720      	adds	r7, #32
   1cdb4:	46bd      	mov	sp, r7
   1cdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!inside_quotes) {
   1cdba:	484d      	ldr	r0, [pc, #308]	; (1cef0 <isr+0x18c>)
   1cdbc:	7802      	ldrb	r2, [r0, #0]
   1cdbe:	2a00      	cmp	r2, #0
   1cdc0:	d15e      	bne.n	1ce80 <isr+0x11c>
		switch (character) {
   1cdc2:	2b0a      	cmp	r3, #10
   1cdc4:	d027      	beq.n	1ce16 <isr+0xb2>
   1cdc6:	2b0d      	cmp	r3, #13
   1cdc8:	d010      	beq.n	1cdec <isr+0x88>
   1cdca:	2b00      	cmp	r3, #0
   1cdcc:	d158      	bne.n	1ce80 <isr+0x11c>
			if (term_mode == MODE_NULL_TERM) {
   1cdce:	4a49      	ldr	r2, [pc, #292]	; (1cef4 <isr+0x190>)
   1cdd0:	7812      	ldrb	r2, [r2, #0]
   1cdd2:	b17a      	cbz	r2, 1cdf4 <isr+0x90>
			LOG_WRN("Ignored null; would terminate string early.");
   1cdd4:	4a48      	ldr	r2, [pc, #288]	; (1cef8 <isr+0x194>)
   1cdd6:	61fa      	str	r2, [r7, #28]
   1cdd8:	2202      	movs	r2, #2
   1cdda:	61ba      	str	r2, [r7, #24]
   1cddc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cde0:	4846      	ldr	r0, [pc, #280]	; (1cefc <isr+0x198>)
   1cde2:	f107 0218 	add.w	r2, r7, #24
   1cde6:	f7f1 fd19 	bl	e81c <z_impl_z_log_msg_static_create>
			return;
   1cdea:	e7c9      	b.n	1cd80 <isr+0x1c>
			if (term_mode == MODE_CR) {
   1cdec:	4a41      	ldr	r2, [pc, #260]	; (1cef4 <isr+0x190>)
   1cdee:	7812      	ldrb	r2, [r2, #0]
   1cdf0:	2a01      	cmp	r2, #1
   1cdf2:	d139      	bne.n	1ce68 <isr+0x104>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1cdf4:	2200      	movs	r2, #0
   1cdf6:	493d      	ldr	r1, [pc, #244]	; (1ceec <isr+0x188>)
   1cdf8:	4b41      	ldr	r3, [pc, #260]	; (1cf00 <isr+0x19c>)
   1cdfa:	f8d1 c000 	ldr.w	ip, [r1]
	at_cmd_len = 0;
   1cdfe:	600a      	str	r2, [r1, #0]
   1ce00:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1ce02:	f803 200c 	strb.w	r2, [r3, ip]
	inside_quotes = false;
   1ce06:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   1ce08:	f813 2b01 	ldrb.w	r2, [r3], #1
   1ce0c:	2a20      	cmp	r2, #32
   1ce0e:	d85b      	bhi.n	1cec8 <isr+0x164>
		} else if (*c == '\0') {
   1ce10:	2a00      	cmp	r2, #0
   1ce12:	d1f9      	bne.n	1ce08 <isr+0xa4>
   1ce14:	e7b4      	b.n	1cd80 <isr+0x1c>
			if (term_mode == MODE_LF) {
   1ce16:	4a37      	ldr	r2, [pc, #220]	; (1cef4 <isr+0x190>)
   1ce18:	f892 c000 	ldrb.w	ip, [r2]
   1ce1c:	f1bc 0f02 	cmp.w	ip, #2
   1ce20:	d0e8      	beq.n	1cdf4 <isr+0x90>
		if (at_cmd_len > 0) {
   1ce22:	4932      	ldr	r1, [pc, #200]	; (1ceec <isr+0x188>)
			if (term_mode == MODE_CR_LF &&
   1ce24:	f1bc 0f03 	cmp.w	ip, #3
		if (at_cmd_len > 0) {
   1ce28:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   1ce2a:	d116      	bne.n	1ce5a <isr+0xf6>
   1ce2c:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 1cf00 <isr+0x19c>
   1ce30:	b172      	cbz	r2, 1ce50 <isr+0xec>
			    at_buf[at_cmd_len - 1] == '\r') {
   1ce32:	eb0c 0e02 	add.w	lr, ip, r2
			    at_cmd_len > 0 &&
   1ce36:	f81e ec01 	ldrb.w	lr, [lr, #-1]
   1ce3a:	f1be 0f0d 	cmp.w	lr, #13
   1ce3e:	d0d9      	beq.n	1cdf4 <isr+0x90>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1ce40:	1c50      	adds	r0, r2, #1
   1ce42:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1ce46:	d222      	bcs.n	1ce8e <isr+0x12a>
	at_buf[at_cmd_len] = character;
   1ce48:	f80c 3002 	strb.w	r3, [ip, r2]
	at_cmd_len++;
   1ce4c:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   1ce4e:	e797      	b.n	1cd80 <isr+0x1c>
	at_buf[at_cmd_len] = character;
   1ce50:	f88c 3000 	strb.w	r3, [ip]
	at_cmd_len++;
   1ce54:	2301      	movs	r3, #1
   1ce56:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   1ce58:	e792      	b.n	1cd80 <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1ce5a:	1c50      	adds	r0, r2, #1
   1ce5c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1ce60:	d215      	bcs.n	1ce8e <isr+0x12a>
	at_buf[at_cmd_len] = character;
   1ce62:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1cf00 <isr+0x19c>
   1ce66:	e7ef      	b.n	1ce48 <isr+0xe4>
		if (at_cmd_len > 0) {
   1ce68:	4a20      	ldr	r2, [pc, #128]	; (1ceec <isr+0x188>)
   1ce6a:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1ce6c:	1c41      	adds	r1, r0, #1
   1ce6e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1ce72:	d20c      	bcs.n	1ce8e <isr+0x12a>
	at_buf[at_cmd_len] = character;
   1ce74:	f8df c088 	ldr.w	ip, [pc, #136]	; 1cf00 <isr+0x19c>
	at_cmd_len++;
   1ce78:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   1ce7a:	f80c 3000 	strb.w	r3, [ip, r0]
	if (character == '"') {
   1ce7e:	e77f      	b.n	1cd80 <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1ce80:	f8d5 c000 	ldr.w	ip, [r5]
   1ce84:	f10c 0101 	add.w	r1, ip, #1
   1ce88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1ce8c:	d310      	bcc.n	1ceb0 <isr+0x14c>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1ce8e:	46e8      	mov	r8, sp
   1ce90:	b088      	sub	sp, #32
   1ce92:	466a      	mov	r2, sp
   1ce94:	491b      	ldr	r1, [pc, #108]	; (1cf04 <isr+0x1a0>)
	switch (character) {
   1ce96:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1ce9a:	2303      	movs	r3, #3
   1ce9c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cea0:	2300      	movs	r3, #0
   1cea2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cea6:	4815      	ldr	r0, [pc, #84]	; (1cefc <isr+0x198>)
   1cea8:	f7f1 fcb8 	bl	e81c <z_impl_z_log_msg_static_create>
   1ceac:	46c5      	mov	sp, r8
		return;
   1ceae:	e767      	b.n	1cd80 <isr+0x1c>
	at_buf[at_cmd_len] = character;
   1ceb0:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1cf00 <isr+0x19c>
	if (character == '"') {
   1ceb4:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   1ceb6:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   1ceba:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   1cebc:	f47f af60 	bne.w	1cd80 <isr+0x1c>
	if (!inside_quotes) {
   1cec0:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   1cec4:	7002      	strb	r2, [r0, #0]
   1cec6:	e75b      	b.n	1cd80 <isr+0x1c>
	if (at_buf[0]) {
   1cec8:	780b      	ldrb	r3, [r1, #0]
   1ceca:	2b00      	cmp	r3, #0
   1cecc:	f43f af58 	beq.w	1cd80 <isr+0x1c>
	const struct uart_driver_api *api =
   1ced0:	480d      	ldr	r0, [pc, #52]	; (1cf08 <isr+0x1a4>)
	if (api->irq_rx_disable != NULL) {
   1ced2:	6883      	ldr	r3, [r0, #8]
   1ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ced6:	b103      	cbz	r3, 1ceda <isr+0x176>
		api->irq_rx_disable(dev);
   1ced8:	4798      	blx	r3
		at_buf_busy = true;
   1ceda:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   1cedc:	490b      	ldr	r1, [pc, #44]	; (1cf0c <isr+0x1a8>)
   1cede:	480c      	ldr	r0, [pc, #48]	; (1cf10 <isr+0x1ac>)
		at_buf_busy = true;
   1cee0:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   1cee2:	f017 ff0a 	bl	34cfa <k_work_submit_to_queue>
   1cee6:	e74b      	b.n	1cd80 <isr+0x1c>
   1cee8:	20012744 	.word	0x20012744
   1ceec:	2000ff70 	.word	0x2000ff70
   1cef0:	20011743 	.word	0x20011743
   1cef4:	20012745 	.word	0x20012745
   1cef8:	0003c625 	.word	0x0003c625
   1cefc:	000363e0 	.word	0x000363e0
   1cf00:	20011744 	.word	0x20011744
   1cf04:	0003c651 	.word	0x0003c651
   1cf08:	000360cc 	.word	0x000360cc
   1cf0c:	2000ff74 	.word	0x2000ff74
   1cf10:	2000dd48 	.word	0x2000dd48

0001cf14 <at_host_init>:
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   1cf14:	2201      	movs	r2, #1
{
   1cf16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		term_mode = mode;
   1cf1a:	4b50      	ldr	r3, [pc, #320]	; (1d05c <at_host_init+0x148>)
{
   1cf1c:	b088      	sub	sp, #32
   1cf1e:	af02      	add	r7, sp, #8
		term_mode = mode;
   1cf20:	701a      	strb	r2, [r3, #0]
   1cf22:	484f      	ldr	r0, [pc, #316]	; (1d060 <at_host_init+0x14c>)
   1cf24:	f017 fdf9 	bl	34b1a <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
   1cf28:	4603      	mov	r3, r0
   1cf2a:	bb18      	cbnz	r0, 1cf74 <at_host_init+0x60>
		LOG_ERR("UART device not ready");
   1cf2c:	4a4d      	ldr	r2, [pc, #308]	; (1d064 <at_host_init+0x150>)
   1cf2e:	617a      	str	r2, [r7, #20]
   1cf30:	2202      	movs	r2, #2
   1cf32:	613a      	str	r2, [r7, #16]
   1cf34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cf38:	484b      	ldr	r0, [pc, #300]	; (1d068 <at_host_init+0x154>)
   1cf3a:	f107 0210 	add.w	r2, r7, #16
   1cf3e:	f7f1 fc6d 	bl	e81c <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1cf42:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   1cf46:	466c      	mov	r4, sp
   1cf48:	b088      	sub	sp, #32
   1cf4a:	aa02      	add	r2, sp, #8
   1cf4c:	4947      	ldr	r1, [pc, #284]	; (1d06c <at_host_init+0x158>)
   1cf4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cf52:	2303      	movs	r3, #3
   1cf54:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf58:	2300      	movs	r3, #0
   1cf5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cf5e:	4842      	ldr	r0, [pc, #264]	; (1d068 <at_host_init+0x154>)
   1cf60:	f7f1 fc5c 	bl	e81c <z_impl_z_log_msg_static_create>
		return -EFAULT;
   1cf64:	f06f 060d 	mvn.w	r6, #13
   1cf68:	46a5      	mov	sp, r4
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   1cf6a:	4630      	mov	r0, r6
   1cf6c:	3718      	adds	r7, #24
   1cf6e:	46bd      	mov	sp, r7
   1cf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1cf74:	f017 ff0b 	bl	34d8e <z_impl_k_uptime_ticks>
   1cf78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf7c:	fba0 0302 	umull	r0, r3, r0, r2
   1cf80:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   1cf84:	4d36      	ldr	r5, [pc, #216]	; (1d060 <at_host_init+0x14c>)
   1cf86:	0bc0      	lsrs	r0, r0, #15
   1cf88:	f8d5 8008 	ldr.w	r8, [r5, #8]
			LOG_INF("UART check failed: %d. "
   1cf8c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1d070 <at_host_init+0x15c>
   1cf90:	ea40 4443 	orr.w	r4, r0, r3, lsl #17
	if (api->err_check == NULL) {
   1cf94:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1cf98:	b1bb      	cbz	r3, 1cfca <at_host_init+0xb6>
	return api->err_check(dev);
   1cf9a:	4628      	mov	r0, r5
   1cf9c:	4798      	blx	r3
		if (err) {
   1cf9e:	4606      	mov	r6, r0
   1cfa0:	b9a8      	cbnz	r0, 1cfce <at_host_init+0xba>
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1cfa2:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d152      	bne.n	1d050 <at_host_init+0x13c>
	k_work_init(&cmd_send_work, cmd_send);
   1cfaa:	4932      	ldr	r1, [pc, #200]	; (1d074 <at_host_init+0x160>)
   1cfac:	4832      	ldr	r0, [pc, #200]	; (1d078 <at_host_init+0x164>)
   1cfae:	f00c f973 	bl	29298 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   1cfb2:	2300      	movs	r3, #0
   1cfb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cfb8:	9300      	str	r3, [sp, #0]
   1cfba:	4930      	ldr	r1, [pc, #192]	; (1d07c <at_host_init+0x168>)
   1cfbc:	230a      	movs	r3, #10
   1cfbe:	4830      	ldr	r0, [pc, #192]	; (1d080 <at_host_init+0x16c>)
   1cfc0:	f00c fa50 	bl	29464 <k_work_queue_start>
   1cfc4:	f7ff fe88 	bl	1ccd8 <z_impl_uart_irq_rx_enable.constprop.0>
}
   1cfc8:	e7cf      	b.n	1cf6a <at_host_init+0x56>
		return -ENOSYS;
   1cfca:	f06f 0657 	mvn.w	r6, #87	; 0x57
   1cfce:	f017 fede 	bl	34d8e <z_impl_k_uptime_ticks>
   1cfd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cfd6:	fba0 0302 	umull	r0, r3, r0, r2
   1cfda:	fb02 3101 	mla	r1, r2, r1, r3
   1cfde:	0bc3      	lsrs	r3, r0, #15
   1cfe0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   1cfe4:	1b1b      	subs	r3, r3, r4
   1cfe6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1cfea:	d912      	bls.n	1d012 <at_host_init+0xfe>
				LOG_ERR("UART check failed: %d. "
   1cfec:	466c      	mov	r4, sp
   1cfee:	b088      	sub	sp, #32
   1cff0:	aa02      	add	r2, sp, #8
   1cff2:	4b24      	ldr	r3, [pc, #144]	; (1d084 <at_host_init+0x170>)
   1cff4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1cff8:	2303      	movs	r3, #3
   1cffa:	f842 3f10 	str.w	r3, [r2, #16]!
   1cffe:	2300      	movs	r3, #0
   1d000:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d004:	4818      	ldr	r0, [pc, #96]	; (1d068 <at_host_init+0x154>)
   1d006:	f7f1 fc09 	bl	e81c <z_impl_z_log_msg_static_create>
				return -EIO;
   1d00a:	f06f 0304 	mvn.w	r3, #4
   1d00e:	46a5      	mov	sp, r4
	if (err) {
   1d010:	e799      	b.n	1cf46 <at_host_init+0x32>
			LOG_INF("UART check failed: %d. "
   1d012:	46ea      	mov	sl, sp
   1d014:	b088      	sub	sp, #32
   1d016:	aa02      	add	r2, sp, #8
   1d018:	2303      	movs	r3, #3
   1d01a:	e9c2 9605 	strd	r9, r6, [r2, #20]
   1d01e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d022:	2300      	movs	r3, #0
   1d024:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1d028:	480f      	ldr	r0, [pc, #60]	; (1d068 <at_host_init+0x154>)
   1d02a:	f7f1 fbf7 	bl	e81c <z_impl_z_log_msg_static_create>
   1d02e:	46d5      	mov	sp, sl
	if (api->fifo_read == NULL) {
   1d030:	68ae      	ldr	r6, [r5, #8]
   1d032:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1d034:	2b00      	cmp	r3, #0
   1d036:	d0fc      	beq.n	1d032 <at_host_init+0x11e>
	return api->fifo_read(dev, rx_data, size);
   1d038:	2201      	movs	r2, #1
   1d03a:	4639      	mov	r1, r7
   1d03c:	4628      	mov	r0, r5
   1d03e:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1d040:	2800      	cmp	r0, #0
   1d042:	d1f6      	bne.n	1d032 <at_host_init+0x11e>
	return z_impl_k_sleep(timeout);
   1d044:	2100      	movs	r1, #0
   1d046:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1d04a:	f00d fccf 	bl	2a9ec <z_impl_k_sleep>
	} while (err);
   1d04e:	e7a1      	b.n	1cf94 <at_host_init+0x80>
		api->irq_callback_set(dev, cb, user_data);
   1d050:	4602      	mov	r2, r0
   1d052:	490d      	ldr	r1, [pc, #52]	; (1d088 <at_host_init+0x174>)
   1d054:	4802      	ldr	r0, [pc, #8]	; (1d060 <at_host_init+0x14c>)
   1d056:	4798      	blx	r3
	if (err) {
   1d058:	e7a7      	b.n	1cfaa <at_host_init+0x96>
   1d05a:	bf00      	nop
   1d05c:	20012745 	.word	0x20012745
   1d060:	000360cc 	.word	0x000360cc
   1d064:	0003c671 	.word	0x0003c671
   1d068:	000363e0 	.word	0x000363e0
   1d06c:	0003c6f2 	.word	0x0003c6f2
   1d070:	0003c6bd 	.word	0x0003c6bd
   1d074:	0001cd05 	.word	0x0001cd05
   1d078:	2000ff74 	.word	0x2000ff74
   1d07c:	20013de0 	.word	0x20013de0
   1d080:	2000dd48 	.word	0x2000dd48
   1d084:	0003c687 	.word	0x0003c687
   1d088:	0001cd65 	.word	0x0001cd65

0001d08c <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1d08c:	4b09      	ldr	r3, [pc, #36]	; (1d0b4 <is_valid_notification_char+0x28>)
   1d08e:	5c1b      	ldrb	r3, [r3, r0]
   1d090:	f003 0303 	and.w	r3, r3, #3
   1d094:	2b02      	cmp	r3, #2
   1d096:	bf08      	it	eq
   1d098:	3820      	subeq	r0, #32
   1d09a:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1d09c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1d0a0:	2b19      	cmp	r3, #25
   1d0a2:	d904      	bls.n	1d0ae <is_valid_notification_char+0x22>
   1d0a4:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1d0a8:	4258      	negs	r0, r3
   1d0aa:	4158      	adcs	r0, r3
   1d0ac:	4770      	bx	lr
		return true;
   1d0ae:	2001      	movs	r0, #1
	}

	return false;
}
   1d0b0:	4770      	bx	lr
   1d0b2:	bf00      	nop
   1d0b4:	00040f97 	.word	0x00040f97

0001d0b8 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1d0b8:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1d0bc:	b2db      	uxtb	r3, r3
   1d0be:	2b11      	cmp	r3, #17
   1d0c0:	bf9d      	ittte	ls
   1d0c2:	4803      	ldrls	r0, [pc, #12]	; (1d0d0 <is_separator+0x18>)
   1d0c4:	40d8      	lsrls	r0, r3
   1d0c6:	f000 0001 	andls.w	r0, r0, #1
{
   1d0ca:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1d0cc:	4770      	bx	lr
   1d0ce:	bf00      	nop
   1d0d0:	00024001 	.word	0x00024001

0001d0d4 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d0d6:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1d0d8:	2400      	movs	r4, #0
   1d0da:	4e09      	ldr	r6, [pc, #36]	; (1d100 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1d0dc:	f856 7b04 	ldr.w	r7, [r6], #4
   1d0e0:	4638      	mov	r0, r7
   1d0e2:	f7ec f91a 	bl	931a <strlen>
   1d0e6:	4639      	mov	r1, r7
   1d0e8:	4602      	mov	r2, r0
   1d0ea:	4628      	mov	r0, r5
   1d0ec:	f018 f944 	bl	35378 <strncmp>
		if (!diff) {
   1d0f0:	b120      	cbz	r0, 1d0fc <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1d0f2:	3401      	adds	r4, #1
   1d0f4:	2c04      	cmp	r4, #4
   1d0f6:	d1f1      	bne.n	1d0dc <is_result+0x8>
			return true;
		}
	}

	return false;
   1d0f8:	2000      	movs	r0, #0
}
   1d0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1d0fc:	2001      	movs	r0, #1
   1d0fe:	e7fc      	b.n	1d0fa <is_result+0x26>
   1d100:	000370d4 	.word	0x000370d4

0001d104 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1d104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1d108:	6804      	ldr	r4, [r0, #0]
{
   1d10a:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d10c:	7823      	ldrb	r3, [r4, #0]
   1d10e:	4680      	mov	r8, r0
   1d110:	460e      	mov	r6, r1
   1d112:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1d114:	9400      	str	r4, [sp, #0]
   1d116:	2b00      	cmp	r3, #0
   1d118:	f000 80cf 	beq.w	1d2ba <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1d11c:	4b68      	ldr	r3, [pc, #416]	; (1d2c0 <at_parse_process_element+0x1bc>)
   1d11e:	781b      	ldrb	r3, [r3, #0]
   1d120:	2b06      	cmp	r3, #6
   1d122:	d113      	bne.n	1d14c <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1d124:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1d126:	1c62      	adds	r2, r4, #1
   1d128:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1d12a:	4611      	mov	r1, r2
   1d12c:	4607      	mov	r7, r0
   1d12e:	f812 0b01 	ldrb.w	r0, [r2], #1
   1d132:	f7ff ffab 	bl	1d08c <is_valid_notification_char>
   1d136:	2800      	cmp	r0, #0
   1d138:	d1f7      	bne.n	1d12a <at_parse_process_element+0x26>
   1d13a:	b107      	cbz	r7, 1d13e <at_parse_process_element+0x3a>
   1d13c:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1d13e:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1d140:	4622      	mov	r2, r4
   1d142:	4631      	mov	r1, r6
   1d144:	4628      	mov	r0, r5
   1d146:	f015 ff84 	bl	33052 <at_params_string_put>
   1d14a:	e046      	b.n	1d1da <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1d14c:	3b01      	subs	r3, #1
   1d14e:	2b08      	cmp	r3, #8
   1d150:	d843      	bhi.n	1d1da <at_parse_process_element+0xd6>
   1d152:	e8df f003 	tbb	[pc, r3]
   1d156:	4964      	.short	0x4964
   1d158:	420da25a 	.word	0x420da25a
   1d15c:	3f1c      	.short	0x3f1c
   1d15e:	05          	.byte	0x05
   1d15f:	00          	.byte	0x00
   1d160:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1d162:	2100      	movs	r1, #0
   1d164:	4613      	mov	r3, r2
   1d166:	f812 0b01 	ldrb.w	r0, [r2], #1
   1d16a:	b160      	cbz	r0, 1d186 <at_parse_process_element+0x82>
   1d16c:	2101      	movs	r1, #1
   1d16e:	e7f9      	b.n	1d164 <at_parse_process_element+0x60>
   1d170:	4622      	mov	r2, r4
   1d172:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1d174:	4f53      	ldr	r7, [pc, #332]	; (1d2c4 <at_parse_process_element+0x1c0>)
   1d176:	4613      	mov	r3, r2
   1d178:	f812 0b01 	ldrb.w	r0, [r2], #1
   1d17c:	5c38      	ldrb	r0, [r7, r0]
   1d17e:	f010 0f44 	tst.w	r0, #68	; 0x44
   1d182:	f040 8098 	bne.w	1d2b6 <at_parse_process_element+0x1b2>
   1d186:	b101      	cbz	r1, 1d18a <at_parse_process_element+0x86>
   1d188:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1d18a:	1b1b      	subs	r3, r3, r4
   1d18c:	e7d8      	b.n	1d140 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1d18e:	4668      	mov	r0, sp
   1d190:	f015 ff03 	bl	32f9a <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1d194:	2200      	movs	r2, #0
   1d196:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1d198:	484a      	ldr	r0, [pc, #296]	; (1d2c4 <at_parse_process_element+0x1c0>)
   1d19a:	461f      	mov	r7, r3
   1d19c:	f813 1b01 	ldrb.w	r1, [r3], #1
   1d1a0:	5c41      	ldrb	r1, [r0, r1]
   1d1a2:	0749      	lsls	r1, r1, #29
   1d1a4:	d110      	bne.n	1d1c8 <at_parse_process_element+0xc4>
   1d1a6:	b102      	cbz	r2, 1d1aa <at_parse_process_element+0xa6>
   1d1a8:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1d1aa:	1b3b      	subs	r3, r7, r4
   1d1ac:	4622      	mov	r2, r4
   1d1ae:	4631      	mov	r1, r6
   1d1b0:	4628      	mov	r0, r5
   1d1b2:	f015 ff4e 	bl	33052 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1d1b6:	783b      	ldrb	r3, [r7, #0]
   1d1b8:	2b3d      	cmp	r3, #61	; 0x3d
   1d1ba:	d107      	bne.n	1d1cc <at_parse_process_element+0xc8>
   1d1bc:	787b      	ldrb	r3, [r7, #1]
   1d1be:	2b3f      	cmp	r3, #63	; 0x3f
   1d1c0:	d10b      	bne.n	1d1da <at_parse_process_element+0xd6>
			tmpstr += 2;
   1d1c2:	3702      	adds	r7, #2
		tmpstr++;
   1d1c4:	9700      	str	r7, [sp, #0]
   1d1c6:	e008      	b.n	1d1da <at_parse_process_element+0xd6>
   1d1c8:	2201      	movs	r2, #1
   1d1ca:	e7e6      	b.n	1d19a <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1d1cc:	2b3f      	cmp	r3, #63	; 0x3f
   1d1ce:	d104      	bne.n	1d1da <at_parse_process_element+0xd6>
			tmpstr++;
   1d1d0:	3701      	adds	r7, #1
   1d1d2:	e7f7      	b.n	1d1c4 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1d1d4:	4628      	mov	r0, r5
   1d1d6:	f015 ff12 	bl	32ffe <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1d1da:	2000      	movs	r0, #0
	*str = tmpstr;
   1d1dc:	9b00      	ldr	r3, [sp, #0]
   1d1de:	f8c8 3000 	str.w	r3, [r8]
}
   1d1e2:	b023      	add	sp, #140	; 0x8c
   1d1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1d1e8:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1d1ea:	783a      	ldrb	r2, [r7, #0]
   1d1ec:	4610      	mov	r0, r2
   1d1ee:	f015 fecb 	bl	32f88 <is_lfcr>
   1d1f2:	463b      	mov	r3, r7
			tmpstr++;
   1d1f4:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1d1f6:	b908      	cbnz	r0, 1d1fc <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d1f8:	2a00      	cmp	r2, #0
   1d1fa:	d1f6      	bne.n	1d1ea <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1d1fc:	4622      	mov	r2, r4
   1d1fe:	4631      	mov	r1, r6
   1d200:	4628      	mov	r0, r5
   1d202:	1b1b      	subs	r3, r3, r4
   1d204:	f015 ff25 	bl	33052 <at_params_string_put>
   1d208:	e7dc      	b.n	1d1c4 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1d20a:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1d20c:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1d20e:	463b      	mov	r3, r7
   1d210:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1d212:	f107 0701 	add.w	r7, r7, #1
   1d216:	d0f1      	beq.n	1d1fc <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d218:	2a00      	cmp	r2, #0
   1d21a:	d1f7      	bne.n	1d20c <at_parse_process_element+0x108>
   1d21c:	e7ee      	b.n	1d1fc <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1d21e:	4620      	mov	r0, r4
   1d220:	220a      	movs	r2, #10
   1d222:	a901      	add	r1, sp, #4
   1d224:	f00f faf4 	bl	2c810 <strtoul>
   1d228:	2401      	movs	r4, #1
		tmpstr = next;
   1d22a:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1d22c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1d22e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1d230:	9b00      	ldr	r3, [sp, #0]
   1d232:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1d234:	2829      	cmp	r0, #41	; 0x29
   1d236:	d025      	beq.n	1d284 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d238:	b320      	cbz	r0, 1d284 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1d23a:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1d23e:	f7ff ff3b 	bl	1d0b8 <is_separator>
				tmparray[i++] =
   1d242:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1d246:	b908      	cbnz	r0, 1d24c <at_parse_process_element+0x148>
					tmpstr = next;
   1d248:	4627      	mov	r7, r4
   1d24a:	e019      	b.n	1d280 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1d24c:	220a      	movs	r2, #10
   1d24e:	a901      	add	r1, sp, #4
   1d250:	4648      	mov	r0, r9
   1d252:	f00f fadd 	bl	2c810 <strtoul>
				tmparray[i++] =
   1d256:	ab22      	add	r3, sp, #136	; 0x88
   1d258:	1c67      	adds	r7, r4, #1
   1d25a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1d25e:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1d262:	4648      	mov	r0, r9
   1d264:	f7ec f859 	bl	931a <strlen>
   1d268:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1d26c:	4604      	mov	r4, r0
   1d26e:	4648      	mov	r0, r9
   1d270:	f7ec f853 	bl	931a <strlen>
   1d274:	4284      	cmp	r4, r0
   1d276:	d006      	beq.n	1d286 <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1d278:	2f20      	cmp	r7, #32
					tmpstr = next;
   1d27a:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1d27e:	d002      	beq.n	1d286 <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1d280:	463c      	mov	r4, r7
   1d282:	e7d5      	b.n	1d230 <at_parse_process_element+0x12c>
   1d284:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1d286:	00bb      	lsls	r3, r7, #2
   1d288:	4631      	mov	r1, r6
   1d28a:	4628      	mov	r0, r5
   1d28c:	aa02      	add	r2, sp, #8
   1d28e:	f015 ff03 	bl	33098 <at_params_array_put>
		tmpstr++;
   1d292:	9b00      	ldr	r3, [sp, #0]
   1d294:	3301      	adds	r3, #1
   1d296:	9300      	str	r3, [sp, #0]
   1d298:	e79f      	b.n	1d1da <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1d29a:	220a      	movs	r2, #10
   1d29c:	4620      	mov	r0, r4
   1d29e:	a902      	add	r1, sp, #8
   1d2a0:	f00f fa3a 	bl	2c718 <strtoll>
   1d2a4:	460b      	mov	r3, r1
		tmpstr = next;
   1d2a6:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1d2a8:	4602      	mov	r2, r0
		tmpstr = next;
   1d2aa:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1d2ac:	4628      	mov	r0, r5
   1d2ae:	4631      	mov	r1, r6
   1d2b0:	f015 feba 	bl	33028 <at_params_int_put>
   1d2b4:	e791      	b.n	1d1da <at_parse_process_element+0xd6>
   1d2b6:	2101      	movs	r1, #1
   1d2b8:	e75d      	b.n	1d176 <at_parse_process_element+0x72>
		return -1;
   1d2ba:	f04f 30ff 	mov.w	r0, #4294967295
   1d2be:	e790      	b.n	1d1e2 <at_parse_process_element+0xde>
   1d2c0:	20012747 	.word	0x20012747
   1d2c4:	00040f97 	.word	0x00040f97

0001d2c8 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1d2c8:	b510      	push	{r4, lr}
   1d2ca:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1d2cc:	f7ec f825 	bl	931a <strlen>
   1d2d0:	2801      	cmp	r0, #1
   1d2d2:	d921      	bls.n	1d318 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1d2d4:	7823      	ldrb	r3, [r4, #0]
   1d2d6:	4912      	ldr	r1, [pc, #72]	; (1d320 <is_command+0x58>)
   1d2d8:	5cca      	ldrb	r2, [r1, r3]
   1d2da:	f002 0203 	and.w	r2, r2, #3
   1d2de:	2a02      	cmp	r2, #2
   1d2e0:	bf08      	it	eq
   1d2e2:	3b20      	subeq	r3, #32
   1d2e4:	2b41      	cmp	r3, #65	; 0x41
   1d2e6:	d117      	bne.n	1d318 <is_command+0x50>
   1d2e8:	7863      	ldrb	r3, [r4, #1]
   1d2ea:	5cca      	ldrb	r2, [r1, r3]
   1d2ec:	f002 0203 	and.w	r2, r2, #3
   1d2f0:	2a02      	cmp	r2, #2
   1d2f2:	bf08      	it	eq
   1d2f4:	3b20      	subeq	r3, #32
   1d2f6:	2b54      	cmp	r3, #84	; 0x54
   1d2f8:	d10e      	bne.n	1d318 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1d2fa:	78a2      	ldrb	r2, [r4, #2]
   1d2fc:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1d300:	2b23      	cmp	r3, #35	; 0x23
   1d302:	d00b      	beq.n	1d31c <is_command+0x54>
   1d304:	2a25      	cmp	r2, #37	; 0x25
   1d306:	d009      	beq.n	1d31c <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1d308:	4610      	mov	r0, r2
   1d30a:	f015 fe3d 	bl	32f88 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1d30e:	b910      	cbnz	r0, 1d316 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d310:	fab2 f082 	clz	r0, r2
   1d314:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1d316:	bd10      	pop	{r4, pc}
		return false;
   1d318:	2000      	movs	r0, #0
   1d31a:	e7fc      	b.n	1d316 <is_command+0x4e>
		return true;
   1d31c:	2001      	movs	r0, #1
   1d31e:	e7fa      	b.n	1d316 <is_command+0x4e>
   1d320:	00040f97 	.word	0x00040f97

0001d324 <at_parse_detect_type>:
{
   1d324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d328:	4607      	mov	r7, r0
	const char *tmpstr = *str;
   1d32a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1d32c:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1d4c0 <at_parse_detect_type+0x19c>
   1d330:	2900      	cmp	r1, #0
   1d332:	d13d      	bne.n	1d3b0 <at_parse_detect_type+0x8c>
   1d334:	7820      	ldrb	r0, [r4, #0]
   1d336:	f015 fe1b 	bl	32f70 <is_notification>
   1d33a:	4e62      	ldr	r6, [pc, #392]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d33c:	4605      	mov	r5, r0
   1d33e:	b360      	cbz	r0, 1d39a <at_parse_detect_type+0x76>
	state = new_state;
   1d340:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1d342:	2205      	movs	r2, #5
   1d344:	4620      	mov	r0, r4
   1d346:	4960      	ldr	r1, [pc, #384]	; (1d4c8 <at_parse_detect_type+0x1a4>)
	state = new_state;
   1d348:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1d34a:	f018 f815 	bl	35378 <strncmp>
   1d34e:	b1f8      	cbz	r0, 1d390 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1d350:	2205      	movs	r2, #5
   1d352:	4620      	mov	r0, r4
   1d354:	495d      	ldr	r1, [pc, #372]	; (1d4cc <at_parse_detect_type+0x1a8>)
   1d356:	f018 f80f 	bl	35378 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1d35a:	b1c8      	cbz	r0, 1d390 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1d35c:	220b      	movs	r2, #11
   1d35e:	4620      	mov	r0, r4
   1d360:	495b      	ldr	r1, [pc, #364]	; (1d4d0 <at_parse_detect_type+0x1ac>)
   1d362:	f018 f809 	bl	35378 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1d366:	b198      	cbz	r0, 1d390 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1d368:	220a      	movs	r2, #10
   1d36a:	4620      	mov	r0, r4
   1d36c:	4959      	ldr	r1, [pc, #356]	; (1d4d4 <at_parse_detect_type+0x1b0>)
   1d36e:	f018 f803 	bl	35378 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1d372:	b168      	cbz	r0, 1d390 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1d374:	220b      	movs	r2, #11
   1d376:	4620      	mov	r0, r4
   1d378:	4957      	ldr	r1, [pc, #348]	; (1d4d8 <at_parse_detect_type+0x1b4>)
   1d37a:	f017 fffd 	bl	35378 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1d37e:	b138      	cbz	r0, 1d390 <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1d380:	2207      	movs	r2, #7
   1d382:	4620      	mov	r0, r4
   1d384:	4955      	ldr	r1, [pc, #340]	; (1d4dc <at_parse_detect_type+0x1b8>)
   1d386:	f017 fff7 	bl	35378 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1d38a:	fab0 f580 	clz	r5, r0
   1d38e:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1d390:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1d394:	2000      	movs	r0, #0
	*str = tmpstr;
   1d396:	603c      	str	r4, [r7, #0]
	return 0;
   1d398:	e04e      	b.n	1d438 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
   1d39a:	f898 3000 	ldrb.w	r3, [r8]
   1d39e:	b953      	cbnz	r3, 1d3b6 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1d3a0:	4620      	mov	r0, r4
   1d3a2:	f7ff ff91 	bl	1d2c8 <is_command>
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	d048      	beq.n	1d43c <at_parse_detect_type+0x118>
	state = new_state;
   1d3aa:	2307      	movs	r3, #7
   1d3ac:	7033      	strb	r3, [r6, #0]
}
   1d3ae:	e7f1      	b.n	1d394 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1d3b0:	f898 3000 	ldrb.w	r3, [r8]
   1d3b4:	b11b      	cbz	r3, 1d3be <at_parse_detect_type+0x9a>
	state = new_state;
   1d3b6:	2202      	movs	r2, #2
   1d3b8:	4b42      	ldr	r3, [pc, #264]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d3ba:	701a      	strb	r2, [r3, #0]
}
   1d3bc:	e7ea      	b.n	1d394 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1d3be:	2900      	cmp	r1, #0
   1d3c0:	dd43      	ble.n	1d44a <at_parse_detect_type+0x126>
   1d3c2:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1d3c4:	7815      	ldrb	r5, [r2, #0]
   1d3c6:	4616      	mov	r6, r2
   1d3c8:	4628      	mov	r0, r5
   1d3ca:	3201      	adds	r2, #1
   1d3cc:	f015 fddc 	bl	32f88 <is_lfcr>
   1d3d0:	2800      	cmp	r0, #0
   1d3d2:	d1f7      	bne.n	1d3c4 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1d3d4:	4630      	mov	r0, r6
   1d3d6:	f7eb ffa0 	bl	931a <strlen>
   1d3da:	2803      	cmp	r0, #3
   1d3dc:	d930      	bls.n	1d440 <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1d3de:	462b      	mov	r3, r5
   1d3e0:	4a3f      	ldr	r2, [pc, #252]	; (1d4e0 <at_parse_detect_type+0x1bc>)
   1d3e2:	5d51      	ldrb	r1, [r2, r5]
   1d3e4:	f001 0103 	and.w	r1, r1, #3
   1d3e8:	2902      	cmp	r1, #2
   1d3ea:	bf08      	it	eq
   1d3ec:	f1a5 0320 	subeq.w	r3, r5, #32
   1d3f0:	2b41      	cmp	r3, #65	; 0x41
   1d3f2:	d125      	bne.n	1d440 <at_parse_detect_type+0x11c>
   1d3f4:	7873      	ldrb	r3, [r6, #1]
   1d3f6:	5cd1      	ldrb	r1, [r2, r3]
   1d3f8:	f001 0103 	and.w	r1, r1, #3
   1d3fc:	2902      	cmp	r1, #2
   1d3fe:	bf08      	it	eq
   1d400:	3b20      	subeq	r3, #32
   1d402:	2b54      	cmp	r3, #84	; 0x54
   1d404:	d11c      	bne.n	1d440 <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1d406:	78b3      	ldrb	r3, [r6, #2]
   1d408:	5cd1      	ldrb	r1, [r2, r3]
   1d40a:	f001 0103 	and.w	r1, r1, #3
   1d40e:	2902      	cmp	r1, #2
   1d410:	bf08      	it	eq
   1d412:	3b20      	subeq	r3, #32
   1d414:	2b2b      	cmp	r3, #43	; 0x2b
   1d416:	d00a      	beq.n	1d42e <at_parse_detect_type+0x10a>
   1d418:	2b25      	cmp	r3, #37	; 0x25
   1d41a:	d111      	bne.n	1d440 <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1d41c:	78f3      	ldrb	r3, [r6, #3]
   1d41e:	5cd2      	ldrb	r2, [r2, r3]
   1d420:	f002 0203 	and.w	r2, r2, #3
   1d424:	2a02      	cmp	r2, #2
   1d426:	bf08      	it	eq
   1d428:	3b20      	subeq	r3, #32
   1d42a:	2b58      	cmp	r3, #88	; 0x58
   1d42c:	d008      	beq.n	1d440 <at_parse_detect_type+0x11c>
	state = new_state;
   1d42e:	2209      	movs	r2, #9
		return -2;
   1d430:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1d434:	4b23      	ldr	r3, [pc, #140]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d436:	701a      	strb	r2, [r3, #0]
}
   1d438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
   1d43c:	2302      	movs	r3, #2
   1d43e:	e7b5      	b.n	1d3ac <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1d440:	7820      	ldrb	r0, [r4, #0]
   1d442:	f015 fd95 	bl	32f70 <is_notification>
   1d446:	2800      	cmp	r0, #0
   1d448:	d136      	bne.n	1d4b8 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
   1d44a:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1d44c:	4b24      	ldr	r3, [pc, #144]	; (1d4e0 <at_parse_detect_type+0x1bc>)
   1d44e:	5c9b      	ldrb	r3, [r3, r2]
   1d450:	075b      	lsls	r3, r3, #29
   1d452:	d40a      	bmi.n	1d46a <at_parse_detect_type+0x146>
   1d454:	2a2d      	cmp	r2, #45	; 0x2d
   1d456:	d008      	beq.n	1d46a <at_parse_detect_type+0x146>
   1d458:	2a2b      	cmp	r2, #43	; 0x2b
   1d45a:	d006      	beq.n	1d46a <at_parse_detect_type+0x146>
	if (chr == '"') {
   1d45c:	2a22      	cmp	r2, #34	; 0x22
   1d45e:	d107      	bne.n	1d470 <at_parse_detect_type+0x14c>
	state = new_state;
   1d460:	2203      	movs	r2, #3
   1d462:	4b18      	ldr	r3, [pc, #96]	; (1d4c4 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1d464:	3401      	adds	r4, #1
	state = new_state;
   1d466:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1d468:	e794      	b.n	1d394 <at_parse_detect_type+0x70>
	state = new_state;
   1d46a:	2204      	movs	r2, #4
   1d46c:	4b15      	ldr	r3, [pc, #84]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d46e:	e7a4      	b.n	1d3ba <at_parse_detect_type+0x96>
	if (chr == '(') {
   1d470:	2a28      	cmp	r2, #40	; 0x28
   1d472:	d104      	bne.n	1d47e <at_parse_detect_type+0x15a>
   1d474:	2201      	movs	r2, #1
   1d476:	4b13      	ldr	r3, [pc, #76]	; (1d4c4 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1d478:	4414      	add	r4, r2
	state = new_state;
   1d47a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1d47c:	e78a      	b.n	1d394 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1d47e:	4610      	mov	r0, r2
   1d480:	f015 fd82 	bl	32f88 <is_lfcr>
   1d484:	b188      	cbz	r0, 1d4aa <at_parse_detect_type+0x186>
   1d486:	490f      	ldr	r1, [pc, #60]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d488:	780b      	ldrb	r3, [r1, #0]
   1d48a:	2b04      	cmp	r3, #4
   1d48c:	d10a      	bne.n	1d4a4 <at_parse_detect_type+0x180>
   1d48e:	4622      	mov	r2, r4
   1d490:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1d492:	f812 0b01 	ldrb.w	r0, [r2], #1
   1d496:	f015 fd77 	bl	32f88 <is_lfcr>
   1d49a:	2800      	cmp	r0, #0
   1d49c:	d1f8      	bne.n	1d490 <at_parse_detect_type+0x16c>
	state = new_state;
   1d49e:	2305      	movs	r3, #5
   1d4a0:	700b      	strb	r3, [r1, #0]
}
   1d4a2:	e777      	b.n	1d394 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1d4a4:	2b08      	cmp	r3, #8
   1d4a6:	f43f af75 	beq.w	1d394 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1d4aa:	4610      	mov	r0, r2
   1d4ac:	f7ff fe04 	bl	1d0b8 <is_separator>
   1d4b0:	b110      	cbz	r0, 1d4b8 <at_parse_detect_type+0x194>
	state = new_state;
   1d4b2:	2208      	movs	r2, #8
   1d4b4:	4b03      	ldr	r3, [pc, #12]	; (1d4c4 <at_parse_detect_type+0x1a0>)
   1d4b6:	e780      	b.n	1d3ba <at_parse_detect_type+0x96>
		return -1;
   1d4b8:	f04f 30ff 	mov.w	r0, #4294967295
   1d4bc:	e7bc      	b.n	1d438 <at_parse_detect_type+0x114>
   1d4be:	bf00      	nop
   1d4c0:	20012746 	.word	0x20012746
   1d4c4:	20012747 	.word	0x20012747
   1d4c8:	0003c71c 	.word	0x0003c71c
   1d4cc:	0003c722 	.word	0x0003c722
   1d4d0:	0003c728 	.word	0x0003c728
   1d4d4:	0003dc26 	.word	0x0003dc26
   1d4d8:	0003c734 	.word	0x0003c734
   1d4dc:	0003c740 	.word	0x0003c740
   1d4e0:	00040f97 	.word	0x00040f97

0001d4e4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1d4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4e8:	4689      	mov	r9, r1
   1d4ea:	4616      	mov	r6, r2
   1d4ec:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1d4ee:	4680      	mov	r8, r0
   1d4f0:	2800      	cmp	r0, #0
   1d4f2:	f000 8099 	beq.w	1d628 <at_parser_max_params_from_str+0x144>
   1d4f6:	2a00      	cmp	r2, #0
   1d4f8:	f000 8096 	beq.w	1d628 <at_parser_max_params_from_str+0x144>
   1d4fc:	6853      	ldr	r3, [r2, #4]
   1d4fe:	2b00      	cmp	r3, #0
   1d500:	f000 8092 	beq.w	1d628 <at_parser_max_params_from_str+0x144>
	state = IDLE;
   1d504:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1d506:	4610      	mov	r0, r2
   1d508:	f000 f900 	bl	1d70c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1d50c:	4642      	mov	r2, r8
   1d50e:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1d510:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1d514:	429f      	cmp	r7, r3
   1d516:	bf28      	it	cs
   1d518:	461f      	movcs	r7, r3
	state = IDLE;
   1d51a:	4b45      	ldr	r3, [pc, #276]	; (1d630 <at_parser_max_params_from_str+0x14c>)
   1d51c:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1d51e:	4b45      	ldr	r3, [pc, #276]	; (1d634 <at_parser_max_params_from_str+0x150>)
   1d520:	701c      	strb	r4, [r3, #0]
   1d522:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1d524:	7808      	ldrb	r0, [r1, #0]
   1d526:	f015 fd2f 	bl	32f88 <is_lfcr>
   1d52a:	4625      	mov	r5, r4
   1d52c:	3201      	adds	r2, #1
   1d52e:	4604      	mov	r4, r0
   1d530:	2800      	cmp	r0, #0
   1d532:	d1f6      	bne.n	1d522 <at_parser_max_params_from_str+0x3e>
   1d534:	b105      	cbz	r5, 1d538 <at_parser_max_params_from_str+0x54>
   1d536:	9101      	str	r1, [sp, #4]
	int index = 0;
   1d538:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1d53a:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1d638 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1d53e:	9b01      	ldr	r3, [sp, #4]
   1d540:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1d542:	2a00      	cmp	r2, #0
   1d544:	d050      	beq.n	1d5e8 <at_parser_max_params_from_str+0x104>
   1d546:	42af      	cmp	r7, r5
   1d548:	d94e      	bls.n	1d5e8 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
   1d54a:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1d54e:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1d550:	0712      	lsls	r2, r2, #28
			str++;
   1d552:	bf48      	it	mi
   1d554:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1d556:	a801      	add	r0, sp, #4
			str++;
   1d558:	bf48      	it	mi
   1d55a:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1d55c:	f7ff fee2 	bl	1d324 <at_parse_detect_type>
		if (ret == -1) {
   1d560:	1c43      	adds	r3, r0, #1
   1d562:	d041      	beq.n	1d5e8 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
   1d564:	3002      	adds	r0, #2
			index = 0;
   1d566:	bf08      	it	eq
   1d568:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1d56a:	4632      	mov	r2, r6
   1d56c:	4629      	mov	r1, r5
   1d56e:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1d570:	bf08      	it	eq
   1d572:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1d576:	f7ff fdc5 	bl	1d104 <at_parse_process_element>
   1d57a:	3001      	adds	r0, #1
   1d57c:	d034      	beq.n	1d5e8 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
   1d57e:	9a01      	ldr	r2, [sp, #4]
   1d580:	7810      	ldrb	r0, [r2, #0]
   1d582:	f7ff fd99 	bl	1d0b8 <is_separator>
   1d586:	b1b0      	cbz	r0, 1d5b6 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1d588:	7850      	ldrb	r0, [r2, #1]
   1d58a:	f015 fcfd 	bl	32f88 <is_lfcr>
   1d58e:	b178      	cbz	r0, 1d5b0 <at_parser_max_params_from_str+0xcc>
				index++;
   1d590:	3501      	adds	r5, #1
				if (index == max_params) {
   1d592:	42bd      	cmp	r5, r7
   1d594:	d041      	beq.n	1d61a <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
   1d596:	4629      	mov	r1, r5
   1d598:	a801      	add	r0, sp, #4
   1d59a:	f7ff fec3 	bl	1d324 <at_parse_detect_type>
   1d59e:	3001      	adds	r0, #1
   1d5a0:	d022      	beq.n	1d5e8 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
   1d5a2:	4632      	mov	r2, r6
   1d5a4:	4629      	mov	r1, r5
   1d5a6:	a801      	add	r0, sp, #4
   1d5a8:	f7ff fdac 	bl	1d104 <at_parse_process_element>
   1d5ac:	3001      	adds	r0, #1
   1d5ae:	d01b      	beq.n	1d5e8 <at_parser_max_params_from_str+0x104>
			str++;
   1d5b0:	9b01      	ldr	r3, [sp, #4]
   1d5b2:	3301      	adds	r3, #1
   1d5b4:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1d5b6:	9a01      	ldr	r2, [sp, #4]
   1d5b8:	7810      	ldrb	r0, [r2, #0]
   1d5ba:	f015 fce5 	bl	32f88 <is_lfcr>
   1d5be:	b338      	cbz	r0, 1d610 <at_parser_max_params_from_str+0x12c>
   1d5c0:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1d5c2:	7811      	ldrb	r1, [r2, #0]
   1d5c4:	4692      	mov	sl, r2
   1d5c6:	4608      	mov	r0, r1
   1d5c8:	3201      	adds	r2, #1
   1d5ca:	f015 fcdd 	bl	32f88 <is_lfcr>
   1d5ce:	2800      	cmp	r0, #0
   1d5d0:	d1f7      	bne.n	1d5c2 <at_parser_max_params_from_str+0xde>
   1d5d2:	b139      	cbz	r1, 1d5e4 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1d5d4:	4608      	mov	r0, r1
   1d5d6:	f015 fccb 	bl	32f70 <is_notification>
   1d5da:	b918      	cbnz	r0, 1d5e4 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
   1d5dc:	4650      	mov	r0, sl
   1d5de:	f7ff fd79 	bl	1d0d4 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1d5e2:	b1a8      	cbz	r0, 1d610 <at_parser_max_params_from_str+0x12c>
				str += i;
   1d5e4:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1d5e8:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1d5ea:	b9c4      	cbnz	r4, 1d61e <at_parser_max_params_from_str+0x13a>
   1d5ec:	782b      	ldrb	r3, [r5, #0]
   1d5ee:	b1cb      	cbz	r3, 1d624 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
   1d5f0:	4628      	mov	r0, r5
   1d5f2:	f7ff fd6f 	bl	1d0d4 <is_result>
		return -EAGAIN;
   1d5f6:	2800      	cmp	r0, #0
   1d5f8:	bf14      	ite	ne
   1d5fa:	2000      	movne	r0, #0
   1d5fc:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1d600:	f1b9 0f00 	cmp.w	r9, #0
   1d604:	d001      	beq.n	1d60a <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
   1d606:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1d60a:	b003      	add	sp, #12
   1d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   1d610:	3501      	adds	r5, #1
			oversized = true;
   1d612:	42bd      	cmp	r5, r7
   1d614:	bf08      	it	eq
   1d616:	2401      	moveq	r4, #1
   1d618:	e791      	b.n	1d53e <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1d61a:	4604      	mov	r4, r0
   1d61c:	e7e4      	b.n	1d5e8 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
   1d61e:	f06f 0006 	mvn.w	r0, #6
   1d622:	e7ed      	b.n	1d600 <at_parser_max_params_from_str+0x11c>
	return 0;
   1d624:	4620      	mov	r0, r4
   1d626:	e7eb      	b.n	1d600 <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
   1d628:	f06f 0015 	mvn.w	r0, #21
   1d62c:	e7ed      	b.n	1d60a <at_parser_max_params_from_str+0x126>
   1d62e:	bf00      	nop
   1d630:	20012747 	.word	0x20012747
   1d634:	20012746 	.word	0x20012746
   1d638:	00040f97 	.word	0x00040f97

0001d63c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1d63c:	b508      	push	{r3, lr}
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1d63e:	b960      	cbnz	r0, 1d65a <at_params_get+0x1e>
   1d640:	490a      	ldr	r1, [pc, #40]	; (1d66c <at_params_get+0x30>)
   1d642:	232b      	movs	r3, #43	; 0x2b
   1d644:	4a0a      	ldr	r2, [pc, #40]	; (1d670 <at_params_get+0x34>)
   1d646:	480b      	ldr	r0, [pc, #44]	; (1d674 <at_params_get+0x38>)
   1d648:	f011 f984 	bl	2e954 <assert_print>
   1d64c:	480a      	ldr	r0, [pc, #40]	; (1d678 <at_params_get+0x3c>)
   1d64e:	f011 f981 	bl	2e954 <assert_print>
   1d652:	212b      	movs	r1, #43	; 0x2b
   1d654:	4806      	ldr	r0, [pc, #24]	; (1d670 <at_params_get+0x34>)
   1d656:	f011 f976 	bl	2e946 <assert_post_action>

	if (index >= list->param_count) {
   1d65a:	6803      	ldr	r3, [r0, #0]
   1d65c:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1d65e:	bf8a      	itet	hi
   1d660:	6840      	ldrhi	r0, [r0, #4]
		return NULL;
   1d662:	2000      	movls	r0, #0
	return &param[index];
   1d664:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
}
   1d668:	bd08      	pop	{r3, pc}
   1d66a:	bf00      	nop
   1d66c:	0003c799 	.word	0x0003c799
   1d670:	0003c76b 	.word	0x0003c76b
   1d674:	000381c3 	.word	0x000381c3
   1d678:	0003c7ad 	.word	0x0003c7ad

0001d67c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1d67c:	b508      	push	{r3, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1d67e:	b960      	cbnz	r0, 1d69a <at_param_size+0x1e>
   1d680:	490c      	ldr	r1, [pc, #48]	; (1d6b4 <at_param_size+0x38>)
   1d682:	2339      	movs	r3, #57	; 0x39
   1d684:	4a0c      	ldr	r2, [pc, #48]	; (1d6b8 <at_param_size+0x3c>)
   1d686:	480d      	ldr	r0, [pc, #52]	; (1d6bc <at_param_size+0x40>)
   1d688:	f011 f964 	bl	2e954 <assert_print>
   1d68c:	480c      	ldr	r0, [pc, #48]	; (1d6c0 <at_param_size+0x44>)
   1d68e:	f011 f961 	bl	2e954 <assert_print>
   1d692:	2139      	movs	r1, #57	; 0x39
   1d694:	4808      	ldr	r0, [pc, #32]	; (1d6b8 <at_param_size+0x3c>)
   1d696:	f011 f956 	bl	2e946 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1d69a:	7803      	ldrb	r3, [r0, #0]
   1d69c:	2b01      	cmp	r3, #1
   1d69e:	d004      	beq.n	1d6aa <at_param_size+0x2e>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d6a0:	3b02      	subs	r3, #2
   1d6a2:	2b01      	cmp	r3, #1
   1d6a4:	d803      	bhi.n	1d6ae <at_param_size+0x32>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1d6a6:	6840      	ldr	r0, [r0, #4]
	}

	return 0;
}
   1d6a8:	bd08      	pop	{r3, pc}
		return sizeof(uint64_t);
   1d6aa:	2008      	movs	r0, #8
   1d6ac:	e7fc      	b.n	1d6a8 <at_param_size+0x2c>
	return 0;
   1d6ae:	2000      	movs	r0, #0
   1d6b0:	e7fa      	b.n	1d6a8 <at_param_size+0x2c>
   1d6b2:	bf00      	nop
   1d6b4:	0003c7ce 	.word	0x0003c7ce
   1d6b8:	0003c76b 	.word	0x0003c76b
   1d6bc:	000381c3 	.word	0x000381c3
   1d6c0:	0003c7e3 	.word	0x0003c7e3

0001d6c4 <at_param_clear>:
{
   1d6c4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1d6c6:	4604      	mov	r4, r0
   1d6c8:	b960      	cbnz	r0, 1d6e4 <at_param_clear+0x20>
   1d6ca:	490c      	ldr	r1, [pc, #48]	; (1d6fc <at_param_clear+0x38>)
   1d6cc:	231d      	movs	r3, #29
   1d6ce:	4a0c      	ldr	r2, [pc, #48]	; (1d700 <at_param_clear+0x3c>)
   1d6d0:	480c      	ldr	r0, [pc, #48]	; (1d704 <at_param_clear+0x40>)
   1d6d2:	f011 f93f 	bl	2e954 <assert_print>
   1d6d6:	480c      	ldr	r0, [pc, #48]	; (1d708 <at_param_clear+0x44>)
   1d6d8:	f011 f93c 	bl	2e954 <assert_print>
   1d6dc:	211d      	movs	r1, #29
   1d6de:	4808      	ldr	r0, [pc, #32]	; (1d700 <at_param_clear+0x3c>)
   1d6e0:	f011 f931 	bl	2e946 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1d6e4:	7803      	ldrb	r3, [r0, #0]
   1d6e6:	3b02      	subs	r3, #2
   1d6e8:	2b01      	cmp	r3, #1
   1d6ea:	d802      	bhi.n	1d6f2 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   1d6ec:	6880      	ldr	r0, [r0, #8]
   1d6ee:	f017 fc42 	bl	34f76 <k_free>
	param->value.int_val = 0;
   1d6f2:	2200      	movs	r2, #0
   1d6f4:	2300      	movs	r3, #0
   1d6f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1d6fa:	bd10      	pop	{r4, pc}
   1d6fc:	0003c7ce 	.word	0x0003c7ce
   1d700:	0003c76b 	.word	0x0003c76b
   1d704:	000381c3 	.word	0x000381c3
   1d708:	0003c7e3 	.word	0x0003c7e3

0001d70c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1d70c:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   1d70e:	4604      	mov	r4, r0
   1d710:	b128      	cbz	r0, 1d71e <at_params_list_clear+0x12>
   1d712:	6843      	ldr	r3, [r0, #4]
   1d714:	b11b      	cbz	r3, 1d71e <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1d716:	2600      	movs	r6, #0
   1d718:	6823      	ldr	r3, [r4, #0]
   1d71a:	429e      	cmp	r6, r3
   1d71c:	d300      	bcc.n	1d720 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1d71e:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   1d720:	6865      	ldr	r5, [r4, #4]
   1d722:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1d726:	4628      	mov	r0, r5
   1d728:	f7ff ffcc 	bl	1d6c4 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1d72c:	b965      	cbnz	r5, 1d748 <at_params_list_clear+0x3c>
   1d72e:	490a      	ldr	r1, [pc, #40]	; (1d758 <at_params_list_clear+0x4c>)
   1d730:	2314      	movs	r3, #20
   1d732:	4a0a      	ldr	r2, [pc, #40]	; (1d75c <at_params_list_clear+0x50>)
   1d734:	480a      	ldr	r0, [pc, #40]	; (1d760 <at_params_list_clear+0x54>)
   1d736:	f011 f90d 	bl	2e954 <assert_print>
   1d73a:	480a      	ldr	r0, [pc, #40]	; (1d764 <at_params_list_clear+0x58>)
   1d73c:	f011 f90a 	bl	2e954 <assert_print>
   1d740:	2114      	movs	r1, #20
   1d742:	4806      	ldr	r0, [pc, #24]	; (1d75c <at_params_list_clear+0x50>)
   1d744:	f011 f8ff 	bl	2e946 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1d748:	2210      	movs	r2, #16
   1d74a:	2100      	movs	r1, #0
   1d74c:	4628      	mov	r0, r5
   1d74e:	f017 fc6d 	bl	3502c <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1d752:	3601      	adds	r6, #1
   1d754:	e7e0      	b.n	1d718 <at_params_list_clear+0xc>
   1d756:	bf00      	nop
   1d758:	0003c7ce 	.word	0x0003c7ce
   1d75c:	0003c76b 	.word	0x0003c76b
   1d760:	000381c3 	.word	0x000381c3
   1d764:	0003c7e3 	.word	0x0003c7e3

0001d768 <lte_lc_connect_async.part.0>:
int lte_lc_init_and_connect(void)
{
	return init_and_connect();
}

int lte_lc_connect_async(lte_lc_evt_handler_t handler)
   1d768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	if (handler) {
		event_handler_list_append_handler(handler);
	} else if (event_handler_list_is_empty()) {
		LOG_ERR("No handler registered");
   1d76a:	4b07      	ldr	r3, [pc, #28]	; (1d788 <lte_lc_connect_async.part.0+0x20>)
   1d76c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d770:	9305      	str	r3, [sp, #20]
   1d772:	2302      	movs	r3, #2
   1d774:	4805      	ldr	r0, [pc, #20]	; (1d78c <lte_lc_connect_async.part.0+0x24>)
   1d776:	aa04      	add	r2, sp, #16
   1d778:	9304      	str	r3, [sp, #16]
   1d77a:	f015 fd4e 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
	}

	return connect_lte(false);
}
   1d77e:	f06f 0015 	mvn.w	r0, #21
   1d782:	b007      	add	sp, #28
   1d784:	f85d fb04 	ldr.w	pc, [sp], #4
   1d788:	0003c7ff 	.word	0x0003c7ff
   1d78c:	000364c0 	.word	0x000364c0

0001d790 <enable_notifications>:
{
   1d790:	b5b0      	push	{r4, r5, r7, lr}
   1d792:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   1d794:	482c      	ldr	r0, [pc, #176]	; (1d848 <enable_notifications+0xb8>)
{
   1d796:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1d798:	f008 ff74 	bl	26684 <nrf_modem_at_printf>
	if (err) {
   1d79c:	4604      	mov	r4, r0
   1d79e:	b1a0      	cbz	r0, 1d7ca <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1d7a0:	466d      	mov	r5, sp
   1d7a2:	b088      	sub	sp, #32
   1d7a4:	466a      	mov	r2, sp
   1d7a6:	4b29      	ldr	r3, [pc, #164]	; (1d84c <enable_notifications+0xbc>)
   1d7a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d7ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d7b0:	2303      	movs	r3, #3
   1d7b2:	4827      	ldr	r0, [pc, #156]	; (1d850 <enable_notifications+0xc0>)
   1d7b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7b8:	f015 fd2f 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1d7bc:	f06f 040d 	mvn.w	r4, #13
   1d7c0:	46ad      	mov	sp, r5
}
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	3738      	adds	r7, #56	; 0x38
   1d7c6:	46bd      	mov	sp, r7
   1d7c8:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   1d7ca:	4822      	ldr	r0, [pc, #136]	; (1d854 <enable_notifications+0xc4>)
   1d7cc:	f008 ff5a 	bl	26684 <nrf_modem_at_printf>
	if (err) {
   1d7d0:	2800      	cmp	r0, #0
   1d7d2:	d0f6      	beq.n	1d7c2 <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1d7d4:	466d      	mov	r5, sp
   1d7d6:	b088      	sub	sp, #32
   1d7d8:	466a      	mov	r2, sp
   1d7da:	4b1f      	ldr	r3, [pc, #124]	; (1d858 <enable_notifications+0xc8>)
   1d7dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d7e0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d7e4:	2303      	movs	r3, #3
   1d7e6:	481a      	ldr	r0, [pc, #104]	; (1d850 <enable_notifications+0xc0>)
   1d7e8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7ec:	f015 fd15 	bl	3321a <z_log_msg_static_create.constprop.0>
   1d7f0:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1d7f2:	4b1a      	ldr	r3, [pc, #104]	; (1d85c <enable_notifications+0xcc>)
   1d7f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d7f8:	617b      	str	r3, [r7, #20]
   1d7fa:	2302      	movs	r3, #2
   1d7fc:	4814      	ldr	r0, [pc, #80]	; (1d850 <enable_notifications+0xc0>)
   1d7fe:	f107 0210 	add.w	r2, r7, #16
   1d802:	613b      	str	r3, [r7, #16]
   1d804:	f015 fd09 	bl	3321a <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1d808:	2132      	movs	r1, #50	; 0x32
   1d80a:	4638      	mov	r0, r7
   1d80c:	4a14      	ldr	r2, [pc, #80]	; (1d860 <enable_notifications+0xd0>)
   1d80e:	f008 ff85 	bl	2671c <nrf_modem_at_cmd>
		if (err == 0) {
   1d812:	2800      	cmp	r0, #0
   1d814:	d1d5      	bne.n	1d7c2 <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   1d816:	4638      	mov	r0, r7
   1d818:	4912      	ldr	r1, [pc, #72]	; (1d864 <enable_notifications+0xd4>)
   1d81a:	f017 fdf2 	bl	35402 <strstr>
			if (end) {
   1d81e:	b100      	cbz	r0, 1d822 <enable_notifications+0x92>
				*end = '\0';
   1d820:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1d822:	466d      	mov	r5, sp
   1d824:	b088      	sub	sp, #32
   1d826:	466a      	mov	r2, sp
   1d828:	4b0f      	ldr	r3, [pc, #60]	; (1d868 <enable_notifications+0xd8>)
   1d82a:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1d82e:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1d832:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d836:	8393      	strh	r3, [r2, #28]
   1d838:	4b0c      	ldr	r3, [pc, #48]	; (1d86c <enable_notifications+0xdc>)
   1d83a:	4805      	ldr	r0, [pc, #20]	; (1d850 <enable_notifications+0xc0>)
   1d83c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d840:	f015 fceb 	bl	3321a <z_log_msg_static_create.constprop.0>
   1d844:	46ad      	mov	sp, r5
   1d846:	e7bc      	b.n	1d7c2 <enable_notifications+0x32>
   1d848:	0003c815 	.word	0x0003c815
   1d84c:	0003c820 	.word	0x0003c820
   1d850:	000364c0 	.word	0x000364c0
   1d854:	0003d0c8 	.word	0x0003d0c8
   1d858:	0003c856 	.word	0x0003c856
   1d85c:	0003c88e 	.word	0x0003c88e
   1d860:	0003c8bf 	.word	0x0003c8bf
   1d864:	0003c8c7 	.word	0x0003c8c7
   1d868:	0003c8cc 	.word	0x0003c8cc
   1d86c:	01000003 	.word	0x01000003

0001d870 <at_handler_mdmev>:
{
   1d870:	b590      	push	{r4, r7, lr}
   1d872:	4604      	mov	r4, r0
   1d874:	b093      	sub	sp, #76	; 0x4c
   1d876:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1d878:	2248      	movs	r2, #72	; 0x48
   1d87a:	2100      	movs	r1, #0
   1d87c:	4638      	mov	r0, r7
   1d87e:	f017 fbd5 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1d882:	b95c      	cbnz	r4, 1d89c <at_handler_mdmev+0x2c>
   1d884:	4914      	ldr	r1, [pc, #80]	; (1d8d8 <at_handler_mdmev+0x68>)
   1d886:	4815      	ldr	r0, [pc, #84]	; (1d8dc <at_handler_mdmev+0x6c>)
   1d888:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1d88c:	4a14      	ldr	r2, [pc, #80]	; (1d8e0 <at_handler_mdmev+0x70>)
   1d88e:	f011 f861 	bl	2e954 <assert_print>
   1d892:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1d896:	4812      	ldr	r0, [pc, #72]	; (1d8e0 <at_handler_mdmev+0x70>)
   1d898:	f011 f855 	bl	2e946 <assert_post_action>
	err = parse_mdmev(response, &evt.modem_evt);
   1d89c:	4620      	mov	r0, r4
   1d89e:	f107 0108 	add.w	r1, r7, #8
   1d8a2:	f001 ffb3 	bl	1f80c <parse_mdmev>
	if (err) {
   1d8a6:	b188      	cbz	r0, 1d8cc <at_handler_mdmev+0x5c>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1d8a8:	466c      	mov	r4, sp
   1d8aa:	b088      	sub	sp, #32
   1d8ac:	466a      	mov	r2, sp
   1d8ae:	4b0d      	ldr	r3, [pc, #52]	; (1d8e4 <at_handler_mdmev+0x74>)
   1d8b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d8b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d8b8:	2303      	movs	r3, #3
   1d8ba:	480b      	ldr	r0, [pc, #44]	; (1d8e8 <at_handler_mdmev+0x78>)
   1d8bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d8c0:	f015 fcab 	bl	3321a <z_log_msg_static_create.constprop.0>
   1d8c4:	46a5      	mov	sp, r4
}
   1d8c6:	374c      	adds	r7, #76	; 0x4c
   1d8c8:	46bd      	mov	sp, r7
   1d8ca:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1d8cc:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1d8ce:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1d8d0:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1d8d2:	f000 ffb7 	bl	1e844 <event_handler_list_dispatch>
   1d8d6:	e7f6      	b.n	1d8c6 <at_handler_mdmev+0x56>
   1d8d8:	0003c91d 	.word	0x0003c91d
   1d8dc:	000381c3 	.word	0x000381c3
   1d8e0:	0003c8ef 	.word	0x0003c8ef
   1d8e4:	0003c935 	.word	0x0003c935
   1d8e8:	000364c0 	.word	0x000364c0

0001d8ec <at_handler_xmodemsleep>:
{
   1d8ec:	b590      	push	{r4, r7, lr}
   1d8ee:	4604      	mov	r4, r0
   1d8f0:	b093      	sub	sp, #76	; 0x4c
   1d8f2:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1d8f4:	2248      	movs	r2, #72	; 0x48
   1d8f6:	2100      	movs	r1, #0
   1d8f8:	4638      	mov	r0, r7
   1d8fa:	f017 fb97 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1d8fe:	b95c      	cbnz	r4, 1d918 <at_handler_xmodemsleep+0x2c>
   1d900:	491e      	ldr	r1, [pc, #120]	; (1d97c <at_handler_xmodemsleep+0x90>)
   1d902:	481f      	ldr	r0, [pc, #124]	; (1d980 <at_handler_xmodemsleep+0x94>)
   1d904:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1d908:	4a1e      	ldr	r2, [pc, #120]	; (1d984 <at_handler_xmodemsleep+0x98>)
   1d90a:	f011 f823 	bl	2e954 <assert_print>
   1d90e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1d912:	481c      	ldr	r0, [pc, #112]	; (1d984 <at_handler_xmodemsleep+0x98>)
   1d914:	f011 f817 	bl	2e946 <assert_post_action>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1d918:	4620      	mov	r0, r4
   1d91a:	f107 0108 	add.w	r1, r7, #8
   1d91e:	f001 fefb 	bl	1f718 <parse_xmodemsleep>
	if (err) {
   1d922:	b188      	cbz	r0, 1d948 <at_handler_xmodemsleep+0x5c>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1d924:	466c      	mov	r4, sp
   1d926:	b088      	sub	sp, #32
   1d928:	466a      	mov	r2, sp
   1d92a:	4b17      	ldr	r3, [pc, #92]	; (1d988 <at_handler_xmodemsleep+0x9c>)
   1d92c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d930:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d934:	2303      	movs	r3, #3
   1d936:	4815      	ldr	r0, [pc, #84]	; (1d98c <at_handler_xmodemsleep+0xa0>)
   1d938:	f842 3f10 	str.w	r3, [r2, #16]!
   1d93c:	f015 fc6d 	bl	3321a <z_log_msg_static_create.constprop.0>
   1d940:	46a5      	mov	sp, r4
}
   1d942:	374c      	adds	r7, #76	; 0x4c
   1d944:	46bd      	mov	sp, r7
   1d946:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1d948:	7a3b      	ldrb	r3, [r7, #8]
   1d94a:	1e5a      	subs	r2, r3, #1
   1d94c:	2a03      	cmp	r2, #3
   1d94e:	d901      	bls.n	1d954 <at_handler_xmodemsleep+0x68>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
   1d950:	2b07      	cmp	r3, #7
   1d952:	d1f6      	bne.n	1d942 <at_handler_xmodemsleep+0x56>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1d954:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1d958:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1d95c:	3b08      	subs	r3, #8
   1d95e:	430b      	orrs	r3, r1
   1d960:	d007      	beq.n	1d972 <at_handler_xmodemsleep+0x86>
	} else if (evt.modem_sleep.time == 0) {
   1d962:	430a      	orrs	r2, r1
   1d964:	d007      	beq.n	1d976 <at_handler_xmodemsleep+0x8a>
   1d966:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1d968:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1d96a:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1d96c:	f000 ff6a 	bl	1e844 <event_handler_list_dispatch>
   1d970:	e7e7      	b.n	1d942 <at_handler_xmodemsleep+0x56>
   1d972:	2308      	movs	r3, #8
   1d974:	e7f8      	b.n	1d968 <at_handler_xmodemsleep+0x7c>
   1d976:	2309      	movs	r3, #9
   1d978:	e7f6      	b.n	1d968 <at_handler_xmodemsleep+0x7c>
   1d97a:	bf00      	nop
   1d97c:	0003c91d 	.word	0x0003c91d
   1d980:	000381c3 	.word	0x000381c3
   1d984:	0003c8ef 	.word	0x0003c8ef
   1d988:	0003c965 	.word	0x0003c965
   1d98c:	000364c0 	.word	0x000364c0

0001d990 <at_handler_ncellmeas>:
{
   1d990:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d992:	4606      	mov	r6, r0
   1d994:	b0ab      	sub	sp, #172	; 0xac
   1d996:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1d998:	2248      	movs	r2, #72	; 0x48
   1d99a:	2100      	movs	r1, #0
   1d99c:	f107 0018 	add.w	r0, r7, #24
   1d9a0:	f017 fb44 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1d9a4:	b95e      	cbnz	r6, 1d9be <at_handler_ncellmeas+0x2e>
   1d9a6:	4965      	ldr	r1, [pc, #404]	; (1db3c <at_handler_ncellmeas+0x1ac>)
   1d9a8:	4865      	ldr	r0, [pc, #404]	; (1db40 <at_handler_ncellmeas+0x1b0>)
   1d9aa:	f240 138b 	movw	r3, #395	; 0x18b
   1d9ae:	4a65      	ldr	r2, [pc, #404]	; (1db44 <at_handler_ncellmeas+0x1b4>)
   1d9b0:	f010 ffd0 	bl	2e954 <assert_print>
   1d9b4:	f240 118b 	movw	r1, #395	; 0x18b
   1d9b8:	4862      	ldr	r0, [pc, #392]	; (1db44 <at_handler_ncellmeas+0x1b4>)
   1d9ba:	f010 ffc4 	bl	2e946 <assert_post_action>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1d9be:	f000 ff0d 	bl	1e7dc <event_handler_list_is_empty>
   1d9c2:	4d61      	ldr	r5, [pc, #388]	; (1db48 <at_handler_ncellmeas+0x1b8>)
   1d9c4:	4601      	mov	r1, r0
   1d9c6:	b9e0      	cbnz	r0, 1da02 <at_handler_ncellmeas+0x72>
   1d9c8:	782b      	ldrb	r3, [r5, #0]
   1d9ca:	b1d3      	cbz	r3, 1da02 <at_handler_ncellmeas+0x72>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1d9cc:	4c5f      	ldr	r4, [pc, #380]	; (1db4c <at_handler_ncellmeas+0x1bc>)
   1d9ce:	7823      	ldrb	r3, [r4, #0]
   1d9d0:	2b03      	cmp	r3, #3
   1d9d2:	d962      	bls.n	1da9a <at_handler_ncellmeas+0x10a>
	struct lte_lc_evt evt = {0};
   1d9d4:	2248      	movs	r2, #72	; 0x48
   1d9d6:	f107 0060 	add.w	r0, r7, #96	; 0x60
   1d9da:	f017 fb27 	bl	3502c <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1d9de:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1d9e0:	b1a0      	cbz	r0, 1da0c <at_handler_ncellmeas+0x7c>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1d9e2:	2130      	movs	r1, #48	; 0x30
   1d9e4:	f017 fad2 	bl	34f8c <k_calloc>
		if (cells == NULL) {
   1d9e8:	4604      	mov	r4, r0
   1d9ea:	b980      	cbnz	r0, 1da0e <at_handler_ncellmeas+0x7e>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1d9ec:	4b58      	ldr	r3, [pc, #352]	; (1db50 <at_handler_ncellmeas+0x1c0>)
   1d9ee:	f107 0210 	add.w	r2, r7, #16
   1d9f2:	617b      	str	r3, [r7, #20]
   1d9f4:	2302      	movs	r3, #2
   1d9f6:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1d9f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d9fc:	4855      	ldr	r0, [pc, #340]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1d9fe:	f015 fc0c 	bl	3321a <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   1da02:	2300      	movs	r3, #0
}
   1da04:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   1da06:	702b      	strb	r3, [r5, #0]
}
   1da08:	46bd      	mov	sp, r7
   1da0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   1da0c:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1da0e:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1da12:	4631      	mov	r1, r6
   1da14:	484d      	ldr	r0, [pc, #308]	; (1db4c <at_handler_ncellmeas+0x1bc>)
	evt.cells_info.gci_cells = cells;
   1da16:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1da1a:	f001 fbb1 	bl	1f180 <parse_ncellmeas_gci>
	switch (err) {
   1da1e:	1dc2      	adds	r2, r0, #7
   1da20:	d011      	beq.n	1da46 <at_handler_ncellmeas+0xb6>
   1da22:	2801      	cmp	r0, #1
   1da24:	d92a      	bls.n	1da7c <at_handler_ncellmeas+0xec>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1da26:	466e      	mov	r6, sp
   1da28:	b088      	sub	sp, #32
   1da2a:	466a      	mov	r2, sp
   1da2c:	4b4a      	ldr	r3, [pc, #296]	; (1db58 <at_handler_ncellmeas+0x1c8>)
   1da2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1da32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1da36:	2303      	movs	r3, #3
   1da38:	4846      	ldr	r0, [pc, #280]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1da3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1da3e:	f015 fbec 	bl	3321a <z_log_msg_static_create.constprop.0>
   1da42:	46b5      	mov	sp, r6
   1da44:	e021      	b.n	1da8a <at_handler_ncellmeas+0xfa>
		LOG_WRN("Not all neighbor cells could be parsed");
   1da46:	466e      	mov	r6, sp
   1da48:	4b44      	ldr	r3, [pc, #272]	; (1db5c <at_handler_ncellmeas+0x1cc>)
   1da4a:	f107 0210 	add.w	r2, r7, #16
   1da4e:	617b      	str	r3, [r7, #20]
   1da50:	2302      	movs	r3, #2
   1da52:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1da56:	483f      	ldr	r0, [pc, #252]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1da58:	613b      	str	r3, [r7, #16]
   1da5a:	f015 fbde 	bl	3321a <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1da5e:	b088      	sub	sp, #32
   1da60:	466a      	mov	r2, sp
   1da62:	4b3f      	ldr	r3, [pc, #252]	; (1db60 <at_handler_ncellmeas+0x1d0>)
   1da64:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1da68:	6153      	str	r3, [r2, #20]
   1da6a:	230a      	movs	r3, #10
   1da6c:	6193      	str	r3, [r2, #24]
   1da6e:	2303      	movs	r3, #3
   1da70:	4838      	ldr	r0, [pc, #224]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1da72:	f842 3f10 	str.w	r3, [r2, #16]!
   1da76:	f015 fbd0 	bl	3321a <z_log_msg_static_create.constprop.0>
   1da7a:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1da7c:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1da7e:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1da82:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1da86:	f000 fedd 	bl	1e844 <event_handler_list_dispatch>
	k_free(cells);
   1da8a:	4620      	mov	r0, r4
   1da8c:	f017 fa73 	bl	34f76 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1da90:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   1da94:	f017 fa6f 	bl	34f76 <k_free>
   1da98:	e7b3      	b.n	1da02 <at_handler_ncellmeas+0x72>
	int ncell_count = neighborcell_count_get(response);
   1da9a:	4630      	mov	r0, r6
   1da9c:	f001 f9b0 	bl	1ee00 <neighborcell_count_get>
   1daa0:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1daa2:	b158      	cbz	r0, 1dabc <at_handler_ncellmeas+0x12c>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1daa4:	2110      	movs	r1, #16
   1daa6:	f017 fa71 	bl	34f8c <k_calloc>
		if (neighbor_cells == NULL) {
   1daaa:	4604      	mov	r4, r0
   1daac:	b930      	cbnz	r0, 1dabc <at_handler_ncellmeas+0x12c>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1daae:	4b2d      	ldr	r3, [pc, #180]	; (1db64 <at_handler_ncellmeas+0x1d4>)
   1dab0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1dab4:	677b      	str	r3, [r7, #116]	; 0x74
   1dab6:	2302      	movs	r3, #2
   1dab8:	673b      	str	r3, [r7, #112]	; 0x70
   1daba:	e79d      	b.n	1d9f8 <at_handler_ncellmeas+0x68>
	err = parse_ncellmeas(response, &evt.cells_info);
   1dabc:	4630      	mov	r0, r6
   1dabe:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   1dac2:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   1dac4:	f001 f9c2 	bl	1ee4c <parse_ncellmeas>
	switch (err) {
   1dac8:	1dc3      	adds	r3, r0, #7
   1daca:	d011      	beq.n	1daf0 <at_handler_ncellmeas+0x160>
   1dacc:	2801      	cmp	r0, #1
   1dace:	d92a      	bls.n	1db26 <at_handler_ncellmeas+0x196>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1dad0:	466e      	mov	r6, sp
   1dad2:	b088      	sub	sp, #32
   1dad4:	466a      	mov	r2, sp
   1dad6:	4b20      	ldr	r3, [pc, #128]	; (1db58 <at_handler_ncellmeas+0x1c8>)
   1dad8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dadc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dae0:	2303      	movs	r3, #3
   1dae2:	481c      	ldr	r0, [pc, #112]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1dae4:	f842 3f10 	str.w	r3, [r2, #16]!
   1dae8:	f015 fb97 	bl	3321a <z_log_msg_static_create.constprop.0>
   1daec:	46b5      	mov	sp, r6
   1daee:	e020      	b.n	1db32 <at_handler_ncellmeas+0x1a2>
		LOG_WRN("Not all neighbor cells could be parsed");
   1daf0:	466e      	mov	r6, sp
   1daf2:	4b1a      	ldr	r3, [pc, #104]	; (1db5c <at_handler_ncellmeas+0x1cc>)
   1daf4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1daf8:	677b      	str	r3, [r7, #116]	; 0x74
   1dafa:	2302      	movs	r3, #2
   1dafc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1db00:	4814      	ldr	r0, [pc, #80]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1db02:	673b      	str	r3, [r7, #112]	; 0x70
   1db04:	f015 fb89 	bl	3321a <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   1db08:	b088      	sub	sp, #32
   1db0a:	466a      	mov	r2, sp
   1db0c:	4b14      	ldr	r3, [pc, #80]	; (1db60 <at_handler_ncellmeas+0x1d0>)
   1db0e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1db12:	6153      	str	r3, [r2, #20]
   1db14:	230a      	movs	r3, #10
   1db16:	6193      	str	r3, [r2, #24]
   1db18:	2303      	movs	r3, #3
   1db1a:	480e      	ldr	r0, [pc, #56]	; (1db54 <at_handler_ncellmeas+0x1c4>)
   1db1c:	f842 3f10 	str.w	r3, [r2, #16]!
   1db20:	f015 fb7b 	bl	3321a <z_log_msg_static_create.constprop.0>
   1db24:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1db26:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1db28:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1db2c:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   1db2e:	f000 fe89 	bl	1e844 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1db32:	2c00      	cmp	r4, #0
   1db34:	f43f af65 	beq.w	1da02 <at_handler_ncellmeas+0x72>
		k_free(neighbor_cells);
   1db38:	4620      	mov	r0, r4
   1db3a:	e7ab      	b.n	1da94 <at_handler_ncellmeas+0x104>
   1db3c:	0003c91d 	.word	0x0003c91d
   1db40:	000381c3 	.word	0x000381c3
   1db44:	0003c8ef 	.word	0x0003c8ef
   1db48:	200127ed 	.word	0x200127ed
   1db4c:	200127ee 	.word	0x200127ee
   1db50:	0003c9a1 	.word	0x0003c9a1
   1db54:	000364c0 	.word	0x000364c0
   1db58:	0003ca2e 	.word	0x0003ca2e
   1db5c:	0003c9cd 	.word	0x0003c9cd
   1db60:	0003c9f4 	.word	0x0003c9f4
   1db64:	0003ca58 	.word	0x0003ca58

0001db68 <at_handler_xt3412>:
{
   1db68:	b590      	push	{r4, r7, lr}
   1db6a:	4604      	mov	r4, r0
   1db6c:	b093      	sub	sp, #76	; 0x4c
   1db6e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1db70:	2248      	movs	r2, #72	; 0x48
   1db72:	2100      	movs	r1, #0
   1db74:	4638      	mov	r0, r7
   1db76:	f017 fa59 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1db7a:	b95c      	cbnz	r4, 1db94 <at_handler_xt3412+0x2c>
   1db7c:	4918      	ldr	r1, [pc, #96]	; (1dbe0 <at_handler_xt3412+0x78>)
   1db7e:	4819      	ldr	r0, [pc, #100]	; (1dbe4 <at_handler_xt3412+0x7c>)
   1db80:	f240 1341 	movw	r3, #321	; 0x141
   1db84:	4a18      	ldr	r2, [pc, #96]	; (1dbe8 <at_handler_xt3412+0x80>)
   1db86:	f010 fee5 	bl	2e954 <assert_print>
   1db8a:	f240 1141 	movw	r1, #321	; 0x141
   1db8e:	4816      	ldr	r0, [pc, #88]	; (1dbe8 <at_handler_xt3412+0x80>)
   1db90:	f010 fed9 	bl	2e946 <assert_post_action>
	err = parse_xt3412(response, &evt.time);
   1db94:	4620      	mov	r0, r4
   1db96:	f107 0108 	add.w	r1, r7, #8
   1db9a:	f001 f8c1 	bl	1ed20 <parse_xt3412>
	if (err) {
   1db9e:	b188      	cbz	r0, 1dbc4 <at_handler_xt3412+0x5c>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1dba0:	466c      	mov	r4, sp
   1dba2:	b088      	sub	sp, #32
   1dba4:	466a      	mov	r2, sp
   1dba6:	4b11      	ldr	r3, [pc, #68]	; (1dbec <at_handler_xt3412+0x84>)
   1dba8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dbac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dbb0:	2303      	movs	r3, #3
   1dbb2:	480f      	ldr	r0, [pc, #60]	; (1dbf0 <at_handler_xt3412+0x88>)
   1dbb4:	f842 3f10 	str.w	r3, [r2, #16]!
   1dbb8:	f015 fb2f 	bl	3321a <z_log_msg_static_create.constprop.0>
   1dbbc:	46a5      	mov	sp, r4
}
   1dbbe:	374c      	adds	r7, #76	; 0x4c
   1dbc0:	46bd      	mov	sp, r7
   1dbc2:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1dbc4:	68bb      	ldr	r3, [r7, #8]
   1dbc6:	68fa      	ldr	r2, [r7, #12]
   1dbc8:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1dbcc:	3b08      	subs	r3, #8
   1dbce:	4313      	orrs	r3, r2
   1dbd0:	d1f5      	bne.n	1dbbe <at_handler_xt3412+0x56>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1dbd2:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1dbd4:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1dbd6:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1dbd8:	f000 fe34 	bl	1e844 <event_handler_list_dispatch>
   1dbdc:	e7ef      	b.n	1dbbe <at_handler_xt3412+0x56>
   1dbde:	bf00      	nop
   1dbe0:	0003c91d 	.word	0x0003c91d
   1dbe4:	000381c3 	.word	0x000381c3
   1dbe8:	0003c8ef 	.word	0x0003c8ef
   1dbec:	0003ca85 	.word	0x0003ca85
   1dbf0:	000364c0 	.word	0x000364c0

0001dbf4 <at_handler_cedrxp>:
{
   1dbf4:	b590      	push	{r4, r7, lr}
   1dbf6:	4604      	mov	r4, r0
   1dbf8:	b093      	sub	sp, #76	; 0x4c
   1dbfa:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1dbfc:	2248      	movs	r2, #72	; 0x48
   1dbfe:	2100      	movs	r1, #0
   1dc00:	4638      	mov	r0, r7
   1dc02:	f017 fa13 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1dc06:	b95c      	cbnz	r4, 1dc20 <at_handler_cedrxp+0x2c>
   1dc08:	4914      	ldr	r1, [pc, #80]	; (1dc5c <at_handler_cedrxp+0x68>)
   1dc0a:	4815      	ldr	r0, [pc, #84]	; (1dc60 <at_handler_cedrxp+0x6c>)
   1dc0c:	f240 132d 	movw	r3, #301	; 0x12d
   1dc10:	4a14      	ldr	r2, [pc, #80]	; (1dc64 <at_handler_cedrxp+0x70>)
   1dc12:	f010 fe9f 	bl	2e954 <assert_print>
   1dc16:	f240 112d 	movw	r1, #301	; 0x12d
   1dc1a:	4812      	ldr	r0, [pc, #72]	; (1dc64 <at_handler_cedrxp+0x70>)
   1dc1c:	f010 fe93 	bl	2e946 <assert_post_action>
	err = parse_edrx(response, &evt.edrx_cfg);
   1dc20:	4620      	mov	r0, r4
   1dc22:	f107 0108 	add.w	r1, r7, #8
   1dc26:	f7eb fb83 	bl	9330 <parse_edrx>
	if (err) {
   1dc2a:	b188      	cbz	r0, 1dc50 <at_handler_cedrxp+0x5c>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1dc2c:	466c      	mov	r4, sp
   1dc2e:	b088      	sub	sp, #32
   1dc30:	466a      	mov	r2, sp
   1dc32:	4b0d      	ldr	r3, [pc, #52]	; (1dc68 <at_handler_cedrxp+0x74>)
   1dc34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dc38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dc3c:	2303      	movs	r3, #3
   1dc3e:	480b      	ldr	r0, [pc, #44]	; (1dc6c <at_handler_cedrxp+0x78>)
   1dc40:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc44:	f015 fae9 	bl	3321a <z_log_msg_static_create.constprop.0>
   1dc48:	46a5      	mov	sp, r4
}
   1dc4a:	374c      	adds	r7, #76	; 0x4c
   1dc4c:	46bd      	mov	sp, r7
   1dc4e:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dc50:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1dc52:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dc54:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1dc56:	f000 fdf5 	bl	1e844 <event_handler_list_dispatch>
   1dc5a:	e7f6      	b.n	1dc4a <at_handler_cedrxp+0x56>
   1dc5c:	0003c91d 	.word	0x0003c91d
   1dc60:	000381c3 	.word	0x000381c3
   1dc64:	0003c8ef 	.word	0x0003c8ef
   1dc68:	0003cab9 	.word	0x0003cab9
   1dc6c:	000364c0 	.word	0x000364c0

0001dc70 <at_handler_cscon>:
{
   1dc70:	b590      	push	{r4, r7, lr}
   1dc72:	4604      	mov	r4, r0
   1dc74:	b093      	sub	sp, #76	; 0x4c
   1dc76:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1dc78:	2248      	movs	r2, #72	; 0x48
   1dc7a:	2100      	movs	r1, #0
   1dc7c:	4638      	mov	r0, r7
   1dc7e:	f017 f9d5 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1dc82:	b95c      	cbnz	r4, 1dc9c <at_handler_cscon+0x2c>
   1dc84:	4915      	ldr	r1, [pc, #84]	; (1dcdc <at_handler_cscon+0x6c>)
   1dc86:	4816      	ldr	r0, [pc, #88]	; (1dce0 <at_handler_cscon+0x70>)
   1dc88:	f240 1313 	movw	r3, #275	; 0x113
   1dc8c:	4a15      	ldr	r2, [pc, #84]	; (1dce4 <at_handler_cscon+0x74>)
   1dc8e:	f010 fe61 	bl	2e954 <assert_print>
   1dc92:	f240 1113 	movw	r1, #275	; 0x113
   1dc96:	4813      	ldr	r0, [pc, #76]	; (1dce4 <at_handler_cscon+0x74>)
   1dc98:	f010 fe55 	bl	2e946 <assert_post_action>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1dc9c:	2201      	movs	r2, #1
   1dc9e:	4620      	mov	r0, r4
   1dca0:	f107 0108 	add.w	r1, r7, #8
   1dca4:	f000 feac 	bl	1ea00 <parse_rrc_mode>
	if (err) {
   1dca8:	b188      	cbz	r0, 1dcce <at_handler_cscon+0x5e>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1dcaa:	466c      	mov	r4, sp
   1dcac:	b088      	sub	sp, #32
   1dcae:	466a      	mov	r2, sp
   1dcb0:	4b0d      	ldr	r3, [pc, #52]	; (1dce8 <at_handler_cscon+0x78>)
   1dcb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dcb6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dcba:	2303      	movs	r3, #3
   1dcbc:	480b      	ldr	r0, [pc, #44]	; (1dcec <at_handler_cscon+0x7c>)
   1dcbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1dcc2:	f015 faaa 	bl	3321a <z_log_msg_static_create.constprop.0>
   1dcc6:	46a5      	mov	sp, r4
}
   1dcc8:	374c      	adds	r7, #76	; 0x4c
   1dcca:	46bd      	mov	sp, r7
   1dccc:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1dcce:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1dcd0:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1dcd2:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1dcd4:	f000 fdb6 	bl	1e844 <event_handler_list_dispatch>
   1dcd8:	e7f6      	b.n	1dcc8 <at_handler_cscon+0x58>
   1dcda:	bf00      	nop
   1dcdc:	0003c91d 	.word	0x0003c91d
   1dce0:	000381c3 	.word	0x000381c3
   1dce4:	0003c8ef 	.word	0x0003c8ef
   1dce8:	0003cad5 	.word	0x0003cad5
   1dcec:	000364c0 	.word	0x000364c0

0001dcf0 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   1dcf0:	b598      	push	{r3, r4, r7, lr}
   1dcf2:	af00      	add	r7, sp, #0
	int err;

	if (enable) {
   1dcf4:	b388      	cbz	r0, 1dd5a <lte_lc_psm_req+0x6a>
		if (strlen(psm_param_rptau) == 8 &&
   1dcf6:	481a      	ldr	r0, [pc, #104]	; (1dd60 <lte_lc_psm_req+0x70>)
   1dcf8:	f7eb fb0f 	bl	931a <strlen>
   1dcfc:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
   1dcfe:	4819      	ldr	r0, [pc, #100]	; (1dd64 <lte_lc_psm_req+0x74>)
   1dd00:	f7eb fb0b 	bl	931a <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   1dd04:	2c08      	cmp	r4, #8
   1dd06:	d11f      	bne.n	1dd48 <lte_lc_psm_req+0x58>
   1dd08:	2808      	cmp	r0, #8
   1dd0a:	d118      	bne.n	1dd3e <lte_lc_psm_req+0x4e>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   1dd0c:	4a15      	ldr	r2, [pc, #84]	; (1dd64 <lte_lc_psm_req+0x74>)
   1dd0e:	4914      	ldr	r1, [pc, #80]	; (1dd60 <lte_lc_psm_req+0x70>)
   1dd10:	4815      	ldr	r0, [pc, #84]	; (1dd68 <lte_lc_psm_req+0x78>)
   1dd12:	f008 fcb7 	bl	26684 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   1dd16:	b180      	cbz	r0, 1dd3a <lte_lc_psm_req+0x4a>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   1dd18:	466c      	mov	r4, sp
   1dd1a:	b088      	sub	sp, #32
   1dd1c:	466a      	mov	r2, sp
   1dd1e:	4b13      	ldr	r3, [pc, #76]	; (1dd6c <lte_lc_psm_req+0x7c>)
   1dd20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd24:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dd28:	2303      	movs	r3, #3
   1dd2a:	4811      	ldr	r0, [pc, #68]	; (1dd70 <lte_lc_psm_req+0x80>)
   1dd2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd30:	f015 fa73 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1dd34:	f06f 000d 	mvn.w	r0, #13
   1dd38:	46a5      	mov	sp, r4
	}

	return 0;
}
   1dd3a:	46bd      	mov	sp, r7
   1dd3c:	bd98      	pop	{r3, r4, r7, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   1dd3e:	4908      	ldr	r1, [pc, #32]	; (1dd60 <lte_lc_psm_req+0x70>)
   1dd40:	480c      	ldr	r0, [pc, #48]	; (1dd74 <lte_lc_psm_req+0x84>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1dd42:	f008 fc9f 	bl	26684 <nrf_modem_at_printf>
   1dd46:	e7e6      	b.n	1dd16 <lte_lc_psm_req+0x26>
		} else if (strlen(psm_param_rat) == 8) {
   1dd48:	2808      	cmp	r0, #8
   1dd4a:	d102      	bne.n	1dd52 <lte_lc_psm_req+0x62>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1dd4c:	4905      	ldr	r1, [pc, #20]	; (1dd64 <lte_lc_psm_req+0x74>)
   1dd4e:	480a      	ldr	r0, [pc, #40]	; (1dd78 <lte_lc_psm_req+0x88>)
   1dd50:	e7f7      	b.n	1dd42 <lte_lc_psm_req+0x52>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   1dd52:	480a      	ldr	r0, [pc, #40]	; (1dd7c <lte_lc_psm_req+0x8c>)
		err = nrf_modem_at_printf(psm_disable);
   1dd54:	f008 fc96 	bl	26684 <nrf_modem_at_printf>
   1dd58:	e7dd      	b.n	1dd16 <lte_lc_psm_req+0x26>
   1dd5a:	4809      	ldr	r0, [pc, #36]	; (1dd80 <lte_lc_psm_req+0x90>)
   1dd5c:	e7fa      	b.n	1dd54 <lte_lc_psm_req+0x64>
   1dd5e:	bf00      	nop
   1dd60:	2000ccb6 	.word	0x2000ccb6
   1dd64:	2000ccbf 	.word	0x2000ccbf
   1dd68:	0003cafc 	.word	0x0003cafc
   1dd6c:	0003cb43 	.word	0x0003cb43
   1dd70:	000364c0 	.word	0x000364c0
   1dd74:	0003cb13 	.word	0x0003cb13
   1dd78:	0003cb25 	.word	0x0003cb25
   1dd7c:	0003cb38 	.word	0x0003cb38
   1dd80:	0003d0d3 	.word	0x0003d0d3

0001dd84 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1dd84:	2300      	movs	r3, #0
{
   1dd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd8a:	b090      	sub	sp, #64	; 0x40
   1dd8c:	af00      	add	r7, sp, #0
   1dd8e:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1dd90:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1dd92:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   1dd96:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   1dd9a:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   1dd9e:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   1dda0:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   1dda2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   1dda6:	2800      	cmp	r0, #0
   1dda8:	d07e      	beq.n	1dea8 <lte_lc_psm_get+0x124>
   1ddaa:	2900      	cmp	r1, #0
   1ddac:	d07c      	beq.n	1dea8 <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1ddae:	4c40      	ldr	r4, [pc, #256]	; (1deb0 <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1ddb0:	21a0      	movs	r1, #160	; 0xa0
   1ddb2:	4620      	mov	r0, r4
   1ddb4:	4a3f      	ldr	r2, [pc, #252]	; (1deb4 <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   1ddb6:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1ddb8:	f008 fcb0 	bl	2671c <nrf_modem_at_cmd>
	if (err) {
   1ddbc:	b1a8      	cbz	r0, 1ddea <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   1ddbe:	466c      	mov	r4, sp
   1ddc0:	b088      	sub	sp, #32
   1ddc2:	466a      	mov	r2, sp
   1ddc4:	4b3c      	ldr	r3, [pc, #240]	; (1deb8 <lte_lc_psm_get+0x134>)
   1ddc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ddca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ddce:	2303      	movs	r3, #3
   1ddd0:	483a      	ldr	r0, [pc, #232]	; (1debc <lte_lc_psm_get+0x138>)
   1ddd2:	f842 3f10 	str.w	r3, [r2, #16]!
   1ddd6:	f015 fa20 	bl	3321a <z_log_msg_static_create.constprop.0>
   1ddda:	46a5      	mov	sp, r4
		return -EFAULT;
   1dddc:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1dde0:	4620      	mov	r0, r4
   1dde2:	3740      	adds	r7, #64	; 0x40
   1dde4:	46bd      	mov	sp, r7
   1dde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   1ddea:	4620      	mov	r0, r4
   1ddec:	212c      	movs	r1, #44	; 0x2c
   1ddee:	f017 faae 	bl	3534e <strchr>
	if (!comma_ptr) {
   1ddf2:	4604      	mov	r4, r0
   1ddf4:	2800      	cmp	r0, #0
   1ddf6:	d048      	beq.n	1de8a <lte_lc_psm_get+0x106>
   1ddf8:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   1ddfc:	1c60      	adds	r0, r4, #1
   1ddfe:	212c      	movs	r1, #44	; 0x2c
   1de00:	f017 faa5 	bl	3534e <strchr>
	for (int i = 0; i < 12; i++) {
   1de04:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1de08:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1de0a:	d131      	bne.n	1de70 <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   1de0c:	b390      	cbz	r0, 1de74 <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1de0e:	1c81      	adds	r1, r0, #2
   1de10:	2208      	movs	r2, #8
   1de12:	1d38      	adds	r0, r7, #4
   1de14:	f017 fac2 	bl	3539c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1de18:	1c60      	adds	r0, r4, #1
   1de1a:	212c      	movs	r1, #44	; 0x2c
   1de1c:	f017 fa97 	bl	3534e <strchr>
	if (comma_ptr) {
   1de20:	4604      	mov	r4, r0
   1de22:	b338      	cbz	r0, 1de74 <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1de24:	1c81      	adds	r1, r0, #2
   1de26:	2208      	movs	r2, #8
   1de28:	f107 0010 	add.w	r0, r7, #16
   1de2c:	f017 fab6 	bl	3539c <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1de30:	212c      	movs	r1, #44	; 0x2c
   1de32:	1c60      	adds	r0, r4, #1
   1de34:	f017 fa8b 	bl	3534e <strchr>
	if (comma_ptr) {
   1de38:	bb50      	cbnz	r0, 1de90 <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1de3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1de3e:	f107 021c 	add.w	r2, r7, #28
   1de42:	f107 0110 	add.w	r1, r7, #16
   1de46:	1d38      	adds	r0, r7, #4
   1de48:	f000 fd46 	bl	1e8d8 <parse_psm>
	if (err) {
   1de4c:	4604      	mov	r4, r0
   1de4e:	b330      	cbz	r0, 1de9e <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1de50:	466d      	mov	r5, sp
   1de52:	b088      	sub	sp, #32
   1de54:	466a      	mov	r2, sp
   1de56:	4b1a      	ldr	r3, [pc, #104]	; (1dec0 <lte_lc_psm_get+0x13c>)
   1de58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de5c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1de60:	2303      	movs	r3, #3
   1de62:	4816      	ldr	r0, [pc, #88]	; (1debc <lte_lc_psm_get+0x138>)
   1de64:	f842 3f10 	str.w	r3, [r2, #16]!
   1de68:	f015 f9d7 	bl	3321a <z_log_msg_static_create.constprop.0>
   1de6c:	46ad      	mov	sp, r5
		return err;
   1de6e:	e7b7      	b.n	1dde0 <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   1de70:	2c00      	cmp	r4, #0
   1de72:	d1c3      	bne.n	1ddfc <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   1de74:	4b13      	ldr	r3, [pc, #76]	; (1dec4 <lte_lc_psm_get+0x140>)
   1de76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1de7c:	2302      	movs	r3, #2
   1de7e:	480f      	ldr	r0, [pc, #60]	; (1debc <lte_lc_psm_get+0x138>)
   1de80:	63bb      	str	r3, [r7, #56]	; 0x38
   1de82:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1de86:	f015 f9c8 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1de8a:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   1de8e:	e7a7      	b.n	1dde0 <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1de90:	1c81      	adds	r1, r0, #2
   1de92:	2208      	movs	r2, #8
   1de94:	f107 001c 	add.w	r0, r7, #28
   1de98:	f017 fa80 	bl	3539c <strncpy>
   1de9c:	e7cd      	b.n	1de3a <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   1de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dea0:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dea4:	602b      	str	r3, [r5, #0]
	return 0;
   1dea6:	e79b      	b.n	1dde0 <lte_lc_psm_get+0x5c>
		return -EINVAL;
   1dea8:	f06f 0415 	mvn.w	r4, #21
   1deac:	e798      	b.n	1dde0 <lte_lc_psm_get+0x5c>
   1deae:	bf00      	nop
   1deb0:	20012748 	.word	0x20012748
   1deb4:	0003cb72 	.word	0x0003cb72
   1deb8:	0003cb7f 	.word	0x0003cb7f
   1debc:	000364c0 	.word	0x000364c0
   1dec0:	0003cbb6 	.word	0x0003cbb6
   1dec4:	0003cb9c 	.word	0x0003cb9c

0001dec8 <at_handler_cereg>:
{
   1dec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1decc:	4604      	mov	r4, r0
   1dece:	b0aa      	sub	sp, #168	; 0xa8
   1ded0:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   1ded2:	2248      	movs	r2, #72	; 0x48
   1ded4:	2100      	movs	r1, #0
   1ded6:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1deda:	f017 f8a7 	bl	3502c <memset>
	__ASSERT_NO_MSG(response != NULL);
   1dede:	b94c      	cbnz	r4, 1def4 <at_handler_cereg+0x2c>
   1dee0:	4960      	ldr	r1, [pc, #384]	; (1e064 <at_handler_cereg+0x19c>)
   1dee2:	4861      	ldr	r0, [pc, #388]	; (1e068 <at_handler_cereg+0x1a0>)
   1dee4:	2397      	movs	r3, #151	; 0x97
   1dee6:	4a61      	ldr	r2, [pc, #388]	; (1e06c <at_handler_cereg+0x1a4>)
   1dee8:	f010 fd34 	bl	2e954 <assert_print>
   1deec:	2197      	movs	r1, #151	; 0x97
   1deee:	485f      	ldr	r0, [pc, #380]	; (1e06c <at_handler_cereg+0x1a4>)
   1def0:	f010 fd29 	bl	2e946 <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   1def4:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   1def6:	2230      	movs	r2, #48	; 0x30
   1def8:	4629      	mov	r1, r5
   1defa:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   1defe:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1df00:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   1df04:	f017 f892 	bl	3502c <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1df08:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   1df0a:	60bd      	str	r5, [r7, #8]
   1df0c:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1df10:	2101      	movs	r1, #1
   1df12:	9300      	str	r3, [sp, #0]
   1df14:	4620      	mov	r0, r4
   1df16:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1df1a:	1dba      	adds	r2, r7, #6
   1df1c:	f000 fde2 	bl	1eae4 <parse_cereg>
	if (err) {
   1df20:	b1b0      	cbz	r0, 1df50 <at_handler_cereg+0x88>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1df22:	466d      	mov	r5, sp
   1df24:	b08a      	sub	sp, #40	; 0x28
   1df26:	aa02      	add	r2, sp, #8
   1df28:	4b51      	ldr	r3, [pc, #324]	; (1e070 <at_handler_cereg+0x1a8>)
   1df2a:	61d4      	str	r4, [r2, #28]
   1df2c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1df30:	f240 3301 	movw	r3, #769	; 0x301
   1df34:	8413      	strh	r3, [r2, #32]
   1df36:	4b4f      	ldr	r3, [pc, #316]	; (1e074 <at_handler_cereg+0x1ac>)
   1df38:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1df3c:	484e      	ldr	r0, [pc, #312]	; (1e078 <at_handler_cereg+0x1b0>)
   1df3e:	f842 3f10 	str.w	r3, [r2, #16]!
   1df42:	f015 f96a 	bl	3321a <z_log_msg_static_create.constprop.0>
   1df46:	46ad      	mov	sp, r5
}
   1df48:	37a0      	adds	r7, #160	; 0xa0
   1df4a:	46bd      	mov	sp, r7
   1df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1df50:	79bb      	ldrb	r3, [r7, #6]
   1df52:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1df56:	2b01      	cmp	r3, #1
   1df58:	d104      	bne.n	1df64 <at_handler_cereg+0x9c>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df5c:	3301      	adds	r3, #1
   1df5e:	d162      	bne.n	1e026 <at_handler_cereg+0x15e>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1df60:	2304      	movs	r3, #4
   1df62:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   1df64:	f000 fc3a 	bl	1e7dc <event_handler_list_is_empty>
   1df68:	2800      	cmp	r0, #0
   1df6a:	d1ed      	bne.n	1df48 <at_handler_cereg+0x80>
	if (reg_status != prev_reg_status) {
   1df6c:	4a43      	ldr	r2, [pc, #268]	; (1e07c <at_handler_cereg+0x1b4>)
   1df6e:	79bb      	ldrb	r3, [r7, #6]
   1df70:	7811      	ldrb	r1, [r2, #0]
   1df72:	4299      	cmp	r1, r3
   1df74:	d008      	beq.n	1df88 <at_handler_cereg+0xc0>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1df76:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   1df7a:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   1df7e:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1df80:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1df84:	f000 fc5e 	bl	1e844 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1df88:	4b3d      	ldr	r3, [pc, #244]	; (1e080 <at_handler_cereg+0x1b8>)
   1df8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1df8c:	689a      	ldr	r2, [r3, #8]
   1df8e:	4291      	cmp	r1, r2
   1df90:	d103      	bne.n	1df9a <at_handler_cereg+0xd2>
   1df92:	68db      	ldr	r3, [r3, #12]
   1df94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1df96:	429a      	cmp	r2, r3
   1df98:	d01d      	beq.n	1dfd6 <at_handler_cereg+0x10e>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1df9a:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1df9c:	4d38      	ldr	r5, [pc, #224]	; (1e080 <at_handler_cereg+0x1b8>)
   1df9e:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1dfa2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1dfa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1dfa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1dfaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1dfac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1dfae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1dfb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1dfb6:	f107 0660 	add.w	r6, r7, #96	; 0x60
   1dfba:	f107 0528 	add.w	r5, r7, #40	; 0x28
   1dfbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dfc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1dfc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dfc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1dfc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1dfca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1dfce:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1dfd2:	f000 fc37 	bl	1e844 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1dfd6:	4a2b      	ldr	r2, [pc, #172]	; (1e084 <at_handler_cereg+0x1bc>)
   1dfd8:	79fb      	ldrb	r3, [r7, #7]
   1dfda:	7811      	ldrb	r1, [r2, #0]
   1dfdc:	4299      	cmp	r1, r3
   1dfde:	d009      	beq.n	1dff4 <at_handler_cereg+0x12c>
		prev_lte_mode = lte_mode;
   1dfe0:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1dfe2:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1dfe4:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1dfe8:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   1dfec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   1dff0:	f000 fc28 	bl	1e844 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1dff4:	79bb      	ldrb	r3, [r7, #6]
   1dff6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1dffa:	2b01      	cmp	r3, #1
   1dffc:	d1a4      	bne.n	1df48 <at_handler_cereg+0x80>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1dffe:	4640      	mov	r0, r8
   1e000:	f107 010c 	add.w	r1, r7, #12
   1e004:	f7ff febe 	bl	1dd84 <lte_lc_psm_get>
	if (err) {
   1e008:	b188      	cbz	r0, 1e02e <at_handler_cereg+0x166>
		if (err != -EBADMSG) {
   1e00a:	304d      	adds	r0, #77	; 0x4d
   1e00c:	d09c      	beq.n	1df48 <at_handler_cereg+0x80>
			LOG_ERR("Failed to get PSM information");
   1e00e:	4b1e      	ldr	r3, [pc, #120]	; (1e088 <at_handler_cereg+0x1c0>)
   1e010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e014:	627b      	str	r3, [r7, #36]	; 0x24
   1e016:	2302      	movs	r3, #2
   1e018:	4817      	ldr	r0, [pc, #92]	; (1e078 <at_handler_cereg+0x1b0>)
   1e01a:	f107 0220 	add.w	r2, r7, #32
   1e01e:	623b      	str	r3, [r7, #32]
   1e020:	f015 f8fb 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e024:	e790      	b.n	1df48 <at_handler_cereg+0x80>
	z_impl_k_sem_give(sem);
   1e026:	4819      	ldr	r0, [pc, #100]	; (1e08c <at_handler_cereg+0x1c4>)
   1e028:	f00a fe8e 	bl	28d48 <z_impl_k_sem_give>
}
   1e02c:	e79a      	b.n	1df64 <at_handler_cereg+0x9c>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1e02e:	4b18      	ldr	r3, [pc, #96]	; (1e090 <at_handler_cereg+0x1c8>)
   1e030:	68b9      	ldr	r1, [r7, #8]
   1e032:	681a      	ldr	r2, [r3, #0]
   1e034:	4291      	cmp	r1, r2
   1e036:	461a      	mov	r2, r3
   1e038:	d103      	bne.n	1e042 <at_handler_cereg+0x17a>
   1e03a:	685b      	ldr	r3, [r3, #4]
   1e03c:	68f9      	ldr	r1, [r7, #12]
   1e03e:	4299      	cmp	r1, r3
   1e040:	d082      	beq.n	1df48 <at_handler_cereg+0x80>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1e042:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1e046:	2301      	movs	r3, #1
   1e048:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1e04c:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1e050:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1e054:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1e058:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1e05c:	f000 fbf2 	bl	1e844 <event_handler_list_dispatch>
   1e060:	e772      	b.n	1df48 <at_handler_cereg+0x80>
   1e062:	bf00      	nop
   1e064:	0003c91d 	.word	0x0003c91d
   1e068:	000381c3 	.word	0x000381c3
   1e06c:	0003c8ef 	.word	0x0003c8ef
   1e070:	0003cbe3 	.word	0x0003cbe3
   1e074:	01000004 	.word	0x01000004
   1e078:	000364c0 	.word	0x000364c0
   1e07c:	200127e9 	.word	0x200127e9
   1e080:	2000ddf0 	.word	0x2000ddf0
   1e084:	200127e8 	.word	0x200127e8
   1e088:	0003cc0f 	.word	0x0003cc0f
   1e08c:	2000ff90 	.word	0x2000ff90
   1e090:	2000ff88 	.word	0x2000ff88

0001e094 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   1e094:	2104      	movs	r1, #4
   1e096:	2305      	movs	r3, #5
{
   1e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e09c:	b085      	sub	sp, #20
   1e09e:	af00      	add	r7, sp, #0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   1e0a0:	e9c7 1302 	strd	r1, r3, [r7, #8]

	if (!enable) {
   1e0a4:	b9c8      	cbnz	r0, 1e0da <lte_lc_edrx_req+0x46>
		err = nrf_modem_at_printf(edrx_disable);
   1e0a6:	482b      	ldr	r0, [pc, #172]	; (1e154 <lte_lc_edrx_req+0xc0>)
   1e0a8:	f008 faec 	bl	26684 <nrf_modem_at_printf>
		if (err) {
   1e0ac:	2800      	cmp	r0, #0
   1e0ae:	d04f      	beq.n	1e150 <lte_lc_edrx_req+0xbc>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   1e0b0:	466c      	mov	r4, sp
   1e0b2:	b088      	sub	sp, #32
   1e0b4:	466a      	mov	r2, sp
   1e0b6:	4b28      	ldr	r3, [pc, #160]	; (1e158 <lte_lc_edrx_req+0xc4>)
		} else {
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
		}

		if (err) {
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   1e0b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e0bc:	2303      	movs	r3, #3
   1e0be:	4827      	ldr	r0, [pc, #156]	; (1e15c <lte_lc_edrx_req+0xc8>)
   1e0c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e0c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0c8:	f015 f8a7 	bl	3321a <z_log_msg_static_create.constprop.0>
			return -EFAULT;
   1e0cc:	f06f 000d 	mvn.w	r0, #13
   1e0d0:	46a5      	mov	sp, r4
			return -EFAULT;
		}
	}

	return 0;
}
   1e0d2:	3714      	adds	r7, #20
   1e0d4:	46bd      	mov	sp, r7
   1e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1e0da:	2600      	movs	r6, #0
					edrx_param_ltem : edrx_param_nbiot;
   1e0dc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1e160 <lte_lc_edrx_req+0xcc>
   1e0e0:	f8df a080 	ldr.w	sl, [pc, #128]	; 1e164 <lte_lc_edrx_req+0xd0>
   1e0e4:	f8df b080 	ldr.w	fp, [pc, #128]	; 1e168 <lte_lc_edrx_req+0xd4>
   1e0e8:	f107 0808 	add.w	r8, r7, #8
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   1e0ec:	f858 4b04 	ldr.w	r4, [r8], #4
					edrx_param_ltem : edrx_param_nbiot;
   1e0f0:	4d1e      	ldr	r5, [pc, #120]	; (1e16c <lte_lc_edrx_req+0xd8>)
   1e0f2:	2c04      	cmp	r4, #4
   1e0f4:	bf14      	ite	ne
   1e0f6:	464a      	movne	r2, r9
   1e0f8:	4652      	moveq	r2, sl
		if (strlen(edrx_param) == 4) {
   1e0fa:	4610      	mov	r0, r2
					edrx_param_ltem : edrx_param_nbiot;
   1e0fc:	bf18      	it	ne
   1e0fe:	465d      	movne	r5, fp
		if (strlen(edrx_param) == 4) {
   1e100:	607a      	str	r2, [r7, #4]
   1e102:	f7eb f90a 	bl	931a <strlen>
   1e106:	2804      	cmp	r0, #4
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   1e108:	4621      	mov	r1, r4
		if (strlen(edrx_param) == 4) {
   1e10a:	687a      	ldr	r2, [r7, #4]
   1e10c:	d10a      	bne.n	1e124 <lte_lc_edrx_req+0x90>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   1e10e:	4818      	ldr	r0, [pc, #96]	; (1e170 <lte_lc_edrx_req+0xdc>)
   1e110:	f008 fab8 	bl	26684 <nrf_modem_at_printf>
		if (err) {
   1e114:	b150      	cbz	r0, 1e12c <lte_lc_edrx_req+0x98>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   1e116:	466c      	mov	r4, sp
   1e118:	b088      	sub	sp, #32
   1e11a:	466a      	mov	r2, sp
   1e11c:	4b15      	ldr	r3, [pc, #84]	; (1e174 <lte_lc_edrx_req+0xe0>)
   1e11e:	e7cb      	b.n	1e0b8 <lte_lc_edrx_req+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1e120:	2601      	movs	r6, #1
   1e122:	e7e3      	b.n	1e0ec <lte_lc_edrx_req+0x58>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   1e124:	4814      	ldr	r0, [pc, #80]	; (1e178 <lte_lc_edrx_req+0xe4>)
   1e126:	f008 faad 	bl	26684 <nrf_modem_at_printf>
   1e12a:	e7f3      	b.n	1e114 <lte_lc_edrx_req+0x80>
		if (strlen(ptw_param) != 4) {
   1e12c:	4628      	mov	r0, r5
   1e12e:	f7eb f8f4 	bl	931a <strlen>
   1e132:	2804      	cmp	r0, #4
   1e134:	d10a      	bne.n	1e14c <lte_lc_edrx_req+0xb8>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   1e136:	462a      	mov	r2, r5
   1e138:	4621      	mov	r1, r4
   1e13a:	4810      	ldr	r0, [pc, #64]	; (1e17c <lte_lc_edrx_req+0xe8>)
   1e13c:	f008 faa2 	bl	26684 <nrf_modem_at_printf>
		if (err) {
   1e140:	b120      	cbz	r0, 1e14c <lte_lc_edrx_req+0xb8>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   1e142:	466c      	mov	r4, sp
   1e144:	b088      	sub	sp, #32
   1e146:	466a      	mov	r2, sp
   1e148:	4b0d      	ldr	r3, [pc, #52]	; (1e180 <lte_lc_edrx_req+0xec>)
   1e14a:	e7b5      	b.n	1e0b8 <lte_lc_edrx_req+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1e14c:	2e00      	cmp	r6, #0
   1e14e:	d0e7      	beq.n	1e120 <lte_lc_edrx_req+0x8c>
		return 0;
   1e150:	2000      	movs	r0, #0
   1e152:	e7be      	b.n	1e0d2 <lte_lc_edrx_req+0x3e>
   1e154:	0003d0dd 	.word	0x0003d0dd
   1e158:	0003cc2d 	.word	0x0003cc2d
   1e15c:	000364c0 	.word	0x000364c0
   1e160:	2000ccc8 	.word	0x2000ccc8
   1e164:	2000cccd 	.word	0x2000cccd
   1e168:	200127f0 	.word	0x200127f0
   1e16c:	200127f5 	.word	0x200127f5
   1e170:	0003cc58 	.word	0x0003cc58
   1e174:	0003cc7b 	.word	0x0003cc7b
   1e178:	0003cc6c 	.word	0x0003cc6c
   1e17c:	0003cca5 	.word	0x0003cca5
   1e180:	0003ccb6 	.word	0x0003ccb6

0001e184 <lte_lc_nw_reg_status_get>:

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   1e184:	2300      	movs	r3, #0
{
   1e186:	b590      	push	{r4, r7, lr}
   1e188:	b083      	sub	sp, #12
   1e18a:	af00      	add	r7, sp, #0

	if (status == NULL) {
   1e18c:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   1e18e:	607b      	str	r3, [r7, #4]
	if (status == NULL) {
   1e190:	b320      	cbz	r0, 1e1dc <lte_lc_nw_reg_status_get+0x58>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   1e192:	4914      	ldr	r1, [pc, #80]	; (1e1e4 <lte_lc_nw_reg_status_get+0x60>)
   1e194:	4814      	ldr	r0, [pc, #80]	; (1e1e8 <lte_lc_nw_reg_status_get+0x64>)
   1e196:	1d3b      	adds	r3, r7, #4
   1e198:	1cba      	adds	r2, r7, #2
   1e19a:	f008 fb53 	bl	26844 <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   1e19e:	2800      	cmp	r0, #0
   1e1a0:	dc13      	bgt.n	1e1ca <lte_lc_nw_reg_status_get+0x46>
		LOG_ERR("Could not get registration status, error: %d", err);
   1e1a2:	466c      	mov	r4, sp
   1e1a4:	b088      	sub	sp, #32
   1e1a6:	466a      	mov	r2, sp
   1e1a8:	4b10      	ldr	r3, [pc, #64]	; (1e1ec <lte_lc_nw_reg_status_get+0x68>)
   1e1aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e1ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e1b2:	2303      	movs	r3, #3
   1e1b4:	480e      	ldr	r0, [pc, #56]	; (1e1f0 <lte_lc_nw_reg_status_get+0x6c>)
   1e1b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1ba:	f015 f82e 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e1be:	f06f 000d 	mvn.w	r0, #13
   1e1c2:	46a5      	mov	sp, r4
	} else {
		*status = status_tmp;
	}

	return 0;
}
   1e1c4:	370c      	adds	r7, #12
   1e1c6:	46bd      	mov	sp, r7
   1e1c8:	bd90      	pop	{r4, r7, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1e1ca:	687b      	ldr	r3, [r7, #4]
   1e1cc:	3301      	adds	r3, #1
   1e1ce:	d103      	bne.n	1e1d8 <lte_lc_nw_reg_status_get+0x54>
   1e1d0:	2304      	movs	r3, #4
	return 0;
   1e1d2:	2000      	movs	r0, #0
		*status = LTE_LC_NW_REG_UNKNOWN;
   1e1d4:	7023      	strb	r3, [r4, #0]
   1e1d6:	e7f5      	b.n	1e1c4 <lte_lc_nw_reg_status_get+0x40>
		*status = status_tmp;
   1e1d8:	78bb      	ldrb	r3, [r7, #2]
   1e1da:	e7fa      	b.n	1e1d2 <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
   1e1dc:	f06f 0015 	mvn.w	r0, #21
   1e1e0:	e7f0      	b.n	1e1c4 <lte_lc_nw_reg_status_get+0x40>
   1e1e2:	bf00      	nop
   1e1e4:	0003cce0 	.word	0x0003cce0
   1e1e8:	0003ccfd 	.word	0x0003ccfd
   1e1ec:	0003cd07 	.word	0x0003cd07
   1e1f0:	000364c0 	.word	0x000364c0

0001e1f4 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   1e1f4:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	switch (mode) {
   1e1f6:	2807      	cmp	r0, #7
{
   1e1f8:	4605      	mov	r5, r0
   1e1fa:	460c      	mov	r4, r1
   1e1fc:	af00      	add	r7, sp, #0
	switch (mode) {
   1e1fe:	d912      	bls.n	1e226 <lte_lc_system_mode_set+0x32>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   1e200:	466c      	mov	r4, sp
   1e202:	b088      	sub	sp, #32
   1e204:	466a      	mov	r2, sp
   1e206:	4b23      	ldr	r3, [pc, #140]	; (1e294 <lte_lc_system_mode_set+0xa0>)
   1e208:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e20c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e210:	2303      	movs	r3, #3
   1e212:	4821      	ldr	r0, [pc, #132]	; (1e298 <lte_lc_system_mode_set+0xa4>)
   1e214:	f842 3f10 	str.w	r3, [r2, #16]!
   1e218:	f014 ffff 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e21c:	46a5      	mov	sp, r4
		return -EINVAL;
   1e21e:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   1e222:	46bd      	mov	sp, r7
   1e224:	bdb0      	pop	{r4, r5, r7, pc}
	switch (preference) {
   1e226:	2904      	cmp	r1, #4
   1e228:	d90f      	bls.n	1e24a <lte_lc_system_mode_set+0x56>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   1e22a:	466d      	mov	r5, sp
   1e22c:	b088      	sub	sp, #32
   1e22e:	466a      	mov	r2, sp
   1e230:	4b1a      	ldr	r3, [pc, #104]	; (1e29c <lte_lc_system_mode_set+0xa8>)
   1e232:	4819      	ldr	r0, [pc, #100]	; (1e298 <lte_lc_system_mode_set+0xa4>)
   1e234:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1e238:	2303      	movs	r3, #3
   1e23a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e23e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e242:	f014 ffea 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e246:	46ad      	mov	sp, r5
		return -EINVAL;
   1e248:	e7e9      	b.n	1e21e <lte_lc_system_mode_set+0x2a>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   1e24a:	4b15      	ldr	r3, [pc, #84]	; (1e2a0 <lte_lc_system_mode_set+0xac>)
   1e24c:	5c5a      	ldrb	r2, [r3, r1]
   1e24e:	4b15      	ldr	r3, [pc, #84]	; (1e2a4 <lte_lc_system_mode_set+0xb0>)
   1e250:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1e254:	4814      	ldr	r0, [pc, #80]	; (1e2a8 <lte_lc_system_mode_set+0xb4>)
   1e256:	f008 fa15 	bl	26684 <nrf_modem_at_printf>
	if (err) {
   1e25a:	b188      	cbz	r0, 1e280 <lte_lc_system_mode_set+0x8c>
		LOG_ERR("Could not send AT command, error: %d", err);
   1e25c:	466c      	mov	r4, sp
   1e25e:	b088      	sub	sp, #32
   1e260:	466a      	mov	r2, sp
   1e262:	4b12      	ldr	r3, [pc, #72]	; (1e2ac <lte_lc_system_mode_set+0xb8>)
   1e264:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e268:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e26c:	2303      	movs	r3, #3
   1e26e:	480a      	ldr	r0, [pc, #40]	; (1e298 <lte_lc_system_mode_set+0xa4>)
   1e270:	f842 3f10 	str.w	r3, [r2, #16]!
   1e274:	f014 ffd1 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e278:	f06f 000d 	mvn.w	r0, #13
   1e27c:	46a5      	mov	sp, r4
   1e27e:	e7d0      	b.n	1e222 <lte_lc_system_mode_set+0x2e>
	sys_mode_current = mode;
   1e280:	4b0b      	ldr	r3, [pc, #44]	; (1e2b0 <lte_lc_system_mode_set+0xbc>)
   1e282:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   1e284:	4b0b      	ldr	r3, [pc, #44]	; (1e2b4 <lte_lc_system_mode_set+0xc0>)
   1e286:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   1e288:	4b0b      	ldr	r3, [pc, #44]	; (1e2b8 <lte_lc_system_mode_set+0xc4>)
   1e28a:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   1e28c:	4b0b      	ldr	r3, [pc, #44]	; (1e2bc <lte_lc_system_mode_set+0xc8>)
   1e28e:	701c      	strb	r4, [r3, #0]
	return 0;
   1e290:	e7c7      	b.n	1e222 <lte_lc_system_mode_set+0x2e>
   1e292:	bf00      	nop
   1e294:	0003cd34 	.word	0x0003cd34
   1e298:	000364c0 	.word	0x000364c0
   1e29c:	0003cd56 	.word	0x0003cd56
   1e2a0:	0003d0c3 	.word	0x0003d0c3
   1e2a4:	000370e4 	.word	0x000370e4
   1e2a8:	0003cd7b 	.word	0x0003cd7b
   1e2ac:	0003cd91 	.word	0x0003cd91
   1e2b0:	200127ea 	.word	0x200127ea
   1e2b4:	2000ccb5 	.word	0x2000ccb5
   1e2b8:	200127eb 	.word	0x200127eb
   1e2bc:	200127ec 	.word	0x200127ec

0001e2c0 <lte_lc_system_mode_get>:
int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   1e2c0:	2300      	movs	r3, #0
{
   1e2c2:	b5b0      	push	{r4, r5, r7, lr}
   1e2c4:	b08c      	sub	sp, #48	; 0x30
   1e2c6:	af02      	add	r7, sp, #8
   1e2c8:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   1e2ca:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   1e2cc:	e9c7 3300 	strd	r3, r3, [r7]
	int mode_preference = 0;
   1e2d0:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (mode == NULL) {
   1e2d4:	2800      	cmp	r0, #0
   1e2d6:	f000 808b 	beq.w	1e3f0 <lte_lc_system_mode_get+0x130>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   1e2da:	f107 030c 	add.w	r3, r7, #12
   1e2de:	9301      	str	r3, [sp, #4]
   1e2e0:	f107 0308 	add.w	r3, r7, #8
   1e2e4:	9300      	str	r3, [sp, #0]
   1e2e6:	463a      	mov	r2, r7
   1e2e8:	4943      	ldr	r1, [pc, #268]	; (1e3f8 <lte_lc_system_mode_get+0x138>)
   1e2ea:	4844      	ldr	r0, [pc, #272]	; (1e3fc <lte_lc_system_mode_get+0x13c>)
   1e2ec:	1d3b      	adds	r3, r7, #4
   1e2ee:	f008 faa9 	bl	26844 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   1e2f2:	2804      	cmp	r0, #4
   1e2f4:	d00f      	beq.n	1e316 <lte_lc_system_mode_get+0x56>
		LOG_ERR("Failed to get system mode, error: %d", err);
   1e2f6:	466c      	mov	r4, sp
   1e2f8:	b088      	sub	sp, #32
   1e2fa:	aa02      	add	r2, sp, #8
   1e2fc:	4b40      	ldr	r3, [pc, #256]	; (1e400 <lte_lc_system_mode_get+0x140>)
   1e2fe:	e9c2 3005 	strd	r3, r0, [r2, #20]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   1e302:	2303      	movs	r3, #3
   1e304:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e308:	483e      	ldr	r0, [pc, #248]	; (1e404 <lte_lc_system_mode_get+0x144>)
   1e30a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e30e:	f014 ff84 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e312:	46a5      	mov	sp, r4
			return -EFAULT;
   1e314:	e03d      	b.n	1e392 <lte_lc_system_mode_get+0xd2>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1e316:	687b      	ldr	r3, [r7, #4]
   1e318:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   1e31a:	683b      	ldr	r3, [r7, #0]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1e31c:	bf18      	it	ne
   1e31e:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   1e320:	3b00      	subs	r3, #0
   1e322:	bf18      	it	ne
   1e324:	2301      	movne	r3, #1
   1e326:	005b      	lsls	r3, r3, #1
   1e328:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   1e32c:	68ba      	ldr	r2, [r7, #8]
   1e32e:	3a00      	subs	r2, #0
   1e330:	bf18      	it	ne
   1e332:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1e334:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   1e338:	2b0e      	cmp	r3, #14
   1e33a:	d81f      	bhi.n	1e37c <lte_lc_system_mode_get+0xbc>
   1e33c:	e8df f003 	tbb	[pc, r3]
   1e340:	1e081e2c 	.word	0x1e081e2c
   1e344:	1e1a1e2e 	.word	0x1e1a1e2e
   1e348:	1e161e14 	.word	0x1e161e14
   1e34c:	1e18      	.short	0x1e18
   1e34e:	1c          	.byte	0x1c
   1e34f:	00          	.byte	0x00
   1e350:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1e352:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   1e354:	2c00      	cmp	r4, #0
   1e356:	d040      	beq.n	1e3da <lte_lc_system_mode_get+0x11a>
		switch (mode_preference) {
   1e358:	68fb      	ldr	r3, [r7, #12]
   1e35a:	2b04      	cmp	r3, #4
   1e35c:	d836      	bhi.n	1e3cc <lte_lc_system_mode_get+0x10c>
   1e35e:	e8df f003 	tbb	[pc, r3]
   1e362:	2d1f      	.short	0x2d1f
   1e364:	312f      	.short	0x312f
   1e366:	33          	.byte	0x33
   1e367:	00          	.byte	0x00
		break;
   1e368:	2303      	movs	r3, #3
   1e36a:	e7f2      	b.n	1e352 <lte_lc_system_mode_get+0x92>
		break;
   1e36c:	2304      	movs	r3, #4
   1e36e:	e7f0      	b.n	1e352 <lte_lc_system_mode_get+0x92>
		break;
   1e370:	2305      	movs	r3, #5
   1e372:	e7ee      	b.n	1e352 <lte_lc_system_mode_get+0x92>
		break;
   1e374:	2306      	movs	r3, #6
   1e376:	e7ec      	b.n	1e352 <lte_lc_system_mode_get+0x92>
		break;
   1e378:	2307      	movs	r3, #7
   1e37a:	e7ea      	b.n	1e352 <lte_lc_system_mode_get+0x92>
		LOG_ERR("Invalid system mode, assuming parsing error");
   1e37c:	4b22      	ldr	r3, [pc, #136]	; (1e408 <lte_lc_system_mode_get+0x148>)
   1e37e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e382:	627b      	str	r3, [r7, #36]	; 0x24
   1e384:	2302      	movs	r3, #2
   1e386:	481f      	ldr	r0, [pc, #124]	; (1e404 <lte_lc_system_mode_get+0x144>)
   1e388:	f107 0220 	add.w	r2, r7, #32
   1e38c:	623b      	str	r3, [r7, #32]
   1e38e:	f014 ff44 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e392:	f06f 000d 	mvn.w	r0, #13
   1e396:	e026      	b.n	1e3e6 <lte_lc_system_mode_get+0x126>
	switch (mode_bitmask) {
   1e398:	2300      	movs	r3, #0
   1e39a:	e7da      	b.n	1e352 <lte_lc_system_mode_get+0x92>
   1e39c:	2302      	movs	r3, #2
   1e39e:	e7d8      	b.n	1e352 <lte_lc_system_mode_get+0x92>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   1e3a0:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   1e3a2:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   1e3a4:	4b19      	ldr	r3, [pc, #100]	; (1e40c <lte_lc_system_mode_get+0x14c>)
   1e3a6:	782a      	ldrb	r2, [r5, #0]
   1e3a8:	7819      	ldrb	r1, [r3, #0]
   1e3aa:	4291      	cmp	r1, r2
   1e3ac:	d11e      	bne.n	1e3ec <lte_lc_system_mode_get+0x12c>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   1e3ae:	4b18      	ldr	r3, [pc, #96]	; (1e410 <lte_lc_system_mode_get+0x150>)
   1e3b0:	7822      	ldrb	r2, [r4, #0]
   1e3b2:	7819      	ldrb	r1, [r3, #0]
   1e3b4:	4291      	cmp	r1, r2
   1e3b6:	d015      	beq.n	1e3e4 <lte_lc_system_mode_get+0x124>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   1e3b8:	701a      	strb	r2, [r3, #0]
   1e3ba:	e013      	b.n	1e3e4 <lte_lc_system_mode_get+0x124>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   1e3bc:	2301      	movs	r3, #1
   1e3be:	e7f0      	b.n	1e3a2 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   1e3c0:	2302      	movs	r3, #2
   1e3c2:	e7ee      	b.n	1e3a2 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   1e3c4:	2303      	movs	r3, #3
   1e3c6:	e7ec      	b.n	1e3a2 <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   1e3c8:	2304      	movs	r3, #4
   1e3ca:	e7ea      	b.n	1e3a2 <lte_lc_system_mode_get+0xe2>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   1e3cc:	466c      	mov	r4, sp
   1e3ce:	b088      	sub	sp, #32
   1e3d0:	aa02      	add	r2, sp, #8
   1e3d2:	4910      	ldr	r1, [pc, #64]	; (1e414 <lte_lc_system_mode_get+0x154>)
   1e3d4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e3d8:	e793      	b.n	1e302 <lte_lc_system_mode_get+0x42>
	if (sys_mode_current != *mode) {
   1e3da:	4a0c      	ldr	r2, [pc, #48]	; (1e40c <lte_lc_system_mode_get+0x14c>)
   1e3dc:	7811      	ldrb	r1, [r2, #0]
   1e3de:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   1e3e0:	bf18      	it	ne
   1e3e2:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   1e3e4:	2000      	movs	r0, #0
}
   1e3e6:	3728      	adds	r7, #40	; 0x28
   1e3e8:	46bd      	mov	sp, r7
   1e3ea:	bdb0      	pop	{r4, r5, r7, pc}
		sys_mode_current = *mode;
   1e3ec:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   1e3ee:	e7de      	b.n	1e3ae <lte_lc_system_mode_get+0xee>
		return -EINVAL;
   1e3f0:	f06f 0015 	mvn.w	r0, #21
   1e3f4:	e7f7      	b.n	1e3e6 <lte_lc_system_mode_get+0x126>
   1e3f6:	bf00      	nop
   1e3f8:	0003cdb6 	.word	0x0003cdb6
   1e3fc:	0003cdd1 	.word	0x0003cdd1
   1e400:	0003cde1 	.word	0x0003cde1
   1e404:	000364c0 	.word	0x000364c0
   1e408:	0003ce06 	.word	0x0003ce06
   1e40c:	200127ea 	.word	0x200127ea
   1e410:	200127eb 	.word	0x200127eb
   1e414:	0003ce32 	.word	0x0003ce32

0001e418 <init_and_config>:
{
   1e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e41c:	b086      	sub	sp, #24
	if (is_initialized) {
   1e41e:	4d27      	ldr	r5, [pc, #156]	; (1e4bc <init_and_config+0xa4>)
{
   1e420:	af00      	add	r7, sp, #0
	if (is_initialized) {
   1e422:	7829      	ldrb	r1, [r5, #0]
   1e424:	2900      	cmp	r1, #0
   1e426:	d146      	bne.n	1e4b6 <init_and_config+0x9e>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   1e428:	4e25      	ldr	r6, [pc, #148]	; (1e4c0 <init_and_config+0xa8>)
   1e42a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1e4c4 <init_and_config+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e42e:	2201      	movs	r2, #1
   1e430:	4825      	ldr	r0, [pc, #148]	; (1e4c8 <init_and_config+0xb0>)
   1e432:	f016 fbfe 	bl	34c32 <z_impl_k_sem_init>
   1e436:	4631      	mov	r1, r6
   1e438:	4640      	mov	r0, r8
   1e43a:	f7ff ff41 	bl	1e2c0 <lte_lc_system_mode_get>
	if (err) {
   1e43e:	4604      	mov	r4, r0
   1e440:	b198      	cbz	r0, 1e46a <init_and_config+0x52>
		LOG_ERR("Could not get current system mode, error: %d", err);
   1e442:	466d      	mov	r5, sp
   1e444:	b088      	sub	sp, #32
   1e446:	466a      	mov	r2, sp
   1e448:	4b20      	ldr	r3, [pc, #128]	; (1e4cc <init_and_config+0xb4>)
			LOG_ERR("Could not set system mode, error: %d", err);
   1e44a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e44e:	2303      	movs	r3, #3
   1e450:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e454:	481e      	ldr	r0, [pc, #120]	; (1e4d0 <init_and_config+0xb8>)
   1e456:	f842 3f10 	str.w	r3, [r2, #16]!
   1e45a:	f014 fede 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e45e:	46ad      	mov	sp, r5
}
   1e460:	4620      	mov	r0, r4
   1e462:	3718      	adds	r7, #24
   1e464:	46bd      	mov	sp, r7
   1e466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   1e46a:	4b1a      	ldr	r3, [pc, #104]	; (1e4d4 <init_and_config+0xbc>)
   1e46c:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   1e46e:	4b1a      	ldr	r3, [pc, #104]	; (1e4d8 <init_and_config+0xc0>)
   1e470:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   1e472:	f898 3000 	ldrb.w	r3, [r8]
   1e476:	4283      	cmp	r3, r0
   1e478:	d102      	bne.n	1e480 <init_and_config+0x68>
   1e47a:	7833      	ldrb	r3, [r6, #0]
   1e47c:	428b      	cmp	r3, r1
   1e47e:	d008      	beq.n	1e492 <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   1e480:	f7ff feb8 	bl	1e1f4 <lte_lc_system_mode_set>
		if (err) {
   1e484:	4604      	mov	r4, r0
   1e486:	b120      	cbz	r0, 1e492 <init_and_config+0x7a>
			LOG_ERR("Could not set system mode, error: %d", err);
   1e488:	466d      	mov	r5, sp
   1e48a:	b088      	sub	sp, #32
   1e48c:	466a      	mov	r2, sp
   1e48e:	4b13      	ldr	r3, [pc, #76]	; (1e4dc <init_and_config+0xc4>)
   1e490:	e7db      	b.n	1e44a <init_and_config+0x32>
	err = enable_notifications();
   1e492:	f7ff f97d 	bl	1d790 <enable_notifications>
	if (err) {
   1e496:	4604      	mov	r4, r0
   1e498:	b158      	cbz	r0, 1e4b2 <init_and_config+0x9a>
		LOG_ERR("Failed to enable notifications");
   1e49a:	4b11      	ldr	r3, [pc, #68]	; (1e4e0 <init_and_config+0xc8>)
   1e49c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e4a0:	617b      	str	r3, [r7, #20]
   1e4a2:	2302      	movs	r3, #2
   1e4a4:	480a      	ldr	r0, [pc, #40]	; (1e4d0 <init_and_config+0xb8>)
   1e4a6:	f107 0210 	add.w	r2, r7, #16
   1e4aa:	613b      	str	r3, [r7, #16]
   1e4ac:	f014 feb5 	bl	3321a <z_log_msg_static_create.constprop.0>
		return err;
   1e4b0:	e7d6      	b.n	1e460 <init_and_config+0x48>
	is_initialized = true;
   1e4b2:	2301      	movs	r3, #1
   1e4b4:	702b      	strb	r3, [r5, #0]
		return 0;
   1e4b6:	2400      	movs	r4, #0
   1e4b8:	e7d2      	b.n	1e460 <init_and_config+0x48>
   1e4ba:	bf00      	nop
   1e4bc:	200127fa 	.word	0x200127fa
   1e4c0:	200127eb 	.word	0x200127eb
   1e4c4:	200127ea 	.word	0x200127ea
   1e4c8:	2000ff90 	.word	0x2000ff90
   1e4cc:	0003ce51 	.word	0x0003ce51
   1e4d0:	000364c0 	.word	0x000364c0
   1e4d4:	2000ccb5 	.word	0x2000ccb5
   1e4d8:	200127ec 	.word	0x200127ec
   1e4dc:	0003ce7e 	.word	0x0003ce7e
   1e4e0:	0003cea3 	.word	0x0003cea3

0001e4e4 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   1e4e4:	b590      	push	{r4, r7, lr}
   1e4e6:	b083      	sub	sp, #12
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   1e4e8:	4604      	mov	r4, r0
{
   1e4ea:	af00      	add	r7, sp, #0
	if (mode == NULL) {
   1e4ec:	b1f0      	cbz	r0, 1e52c <lte_lc_func_mode_get+0x48>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   1e4ee:	4911      	ldr	r1, [pc, #68]	; (1e534 <lte_lc_func_mode_get+0x50>)
   1e4f0:	4811      	ldr	r0, [pc, #68]	; (1e538 <lte_lc_func_mode_get+0x54>)
   1e4f2:	1dba      	adds	r2, r7, #6
   1e4f4:	f008 f9a6 	bl	26844 <nrf_modem_at_scanf>
	if (err != 1) {
   1e4f8:	2801      	cmp	r0, #1
   1e4fa:	d013      	beq.n	1e524 <lte_lc_func_mode_get+0x40>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   1e4fc:	466c      	mov	r4, sp
   1e4fe:	b088      	sub	sp, #32
   1e500:	466a      	mov	r2, sp
   1e502:	4b0e      	ldr	r3, [pc, #56]	; (1e53c <lte_lc_func_mode_get+0x58>)
   1e504:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e508:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e50c:	2303      	movs	r3, #3
   1e50e:	480c      	ldr	r0, [pc, #48]	; (1e540 <lte_lc_func_mode_get+0x5c>)
   1e510:	f842 3f10 	str.w	r3, [r2, #16]!
   1e514:	f014 fe81 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e518:	f06f 000d 	mvn.w	r0, #13
   1e51c:	46a5      	mov	sp, r4
	}

	*mode = mode_tmp;

	return 0;
}
   1e51e:	370c      	adds	r7, #12
   1e520:	46bd      	mov	sp, r7
   1e522:	bd90      	pop	{r4, r7, pc}
	*mode = mode_tmp;
   1e524:	88fb      	ldrh	r3, [r7, #6]
	return 0;
   1e526:	2000      	movs	r0, #0
	*mode = mode_tmp;
   1e528:	7023      	strb	r3, [r4, #0]
	return 0;
   1e52a:	e7f8      	b.n	1e51e <lte_lc_func_mode_get+0x3a>
		return -EINVAL;
   1e52c:	f06f 0015 	mvn.w	r0, #21
   1e530:	e7f5      	b.n	1e51e <lte_lc_func_mode_get+0x3a>
   1e532:	bf00      	nop
   1e534:	0003cec2 	.word	0x0003cec2
   1e538:	0003cecd 	.word	0x0003cecd
   1e53c:	0003ced6 	.word	0x0003ced6
   1e540:	000364c0 	.word	0x000364c0

0001e544 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   1e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   1e548:	2804      	cmp	r0, #4
{
   1e54a:	b086      	sub	sp, #24
   1e54c:	4604      	mov	r4, r0
   1e54e:	af00      	add	r7, sp, #0
	switch (mode) {
   1e550:	d826      	bhi.n	1e5a0 <lte_lc_func_mode_set+0x5c>
   1e552:	2804      	cmp	r0, #4
   1e554:	d829      	bhi.n	1e5aa <lte_lc_func_mode_set+0x66>
   1e556:	e8df f000 	tbb	[pc, r0]
   1e55a:	0a3a      	.short	0x0a3a
   1e55c:	283a      	.short	0x283a
   1e55e:	3a          	.byte	0x3a
   1e55f:	00          	.byte	0x00
   1e560:	2201      	movs	r2, #1
   1e562:	4931      	ldr	r1, [pc, #196]	; (1e628 <lte_lc_func_mode_set+0xe4>)
   1e564:	409a      	lsls	r2, r3
   1e566:	420a      	tst	r2, r1
   1e568:	d131      	bne.n	1e5ce <lte_lc_func_mode_set+0x8a>
   1e56a:	2b01      	cmp	r3, #1
   1e56c:	d11d      	bne.n	1e5aa <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   1e56e:	f7ff f90f 	bl	1d790 <enable_notifications>
		if (err) {
   1e572:	b360      	cbz	r0, 1e5ce <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1e574:	466c      	mov	r4, sp
   1e576:	b088      	sub	sp, #32
   1e578:	466a      	mov	r2, sp
   1e57a:	4b2c      	ldr	r3, [pc, #176]	; (1e62c <lte_lc_func_mode_set+0xe8>)
   1e57c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e580:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e584:	2303      	movs	r3, #3
   1e586:	482a      	ldr	r0, [pc, #168]	; (1e630 <lte_lc_func_mode_set+0xec>)
   1e588:	f842 3f10 	str.w	r3, [r2, #16]!
   1e58c:	f014 fe45 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e590:	46a5      	mov	sp, r4
			return -EFAULT;
   1e592:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1e596:	4628      	mov	r0, r5
   1e598:	3718      	adds	r7, #24
   1e59a:	46bd      	mov	sp, r7
   1e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   1e5a0:	f1a0 0314 	sub.w	r3, r0, #20
   1e5a4:	b2db      	uxtb	r3, r3
   1e5a6:	2b18      	cmp	r3, #24
   1e5a8:	d9da      	bls.n	1e560 <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   1e5aa:	466d      	mov	r5, sp
   1e5ac:	b088      	sub	sp, #32
   1e5ae:	466a      	mov	r2, sp
   1e5b0:	4b20      	ldr	r3, [pc, #128]	; (1e634 <lte_lc_func_mode_set+0xf0>)
   1e5b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e5b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e5ba:	2303      	movs	r3, #3
   1e5bc:	481c      	ldr	r0, [pc, #112]	; (1e630 <lte_lc_func_mode_set+0xec>)
   1e5be:	f842 3f10 	str.w	r3, [r2, #16]!
   1e5c2:	f014 fe2a 	bl	3321a <z_log_msg_static_create.constprop.0>
   1e5c6:	46ad      	mov	sp, r5
		return -EINVAL;
   1e5c8:	f06f 0515 	mvn.w	r5, #21
   1e5cc:	e7e3      	b.n	1e596 <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1e5ce:	4621      	mov	r1, r4
   1e5d0:	4819      	ldr	r0, [pc, #100]	; (1e638 <lte_lc_func_mode_set+0xf4>)
   1e5d2:	f008 f857 	bl	26684 <nrf_modem_at_printf>
	if (err) {
   1e5d6:	4605      	mov	r5, r0
   1e5d8:	b158      	cbz	r0, 1e5f2 <lte_lc_func_mode_set+0xae>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   1e5da:	4b18      	ldr	r3, [pc, #96]	; (1e63c <lte_lc_func_mode_set+0xf8>)
   1e5dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e5e0:	617b      	str	r3, [r7, #20]
   1e5e2:	2302      	movs	r3, #2
   1e5e4:	4812      	ldr	r0, [pc, #72]	; (1e630 <lte_lc_func_mode_set+0xec>)
   1e5e6:	f107 0210 	add.w	r2, r7, #16
   1e5ea:	613b      	str	r3, [r7, #16]
   1e5ec:	f014 fe15 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e5f0:	e7cf      	b.n	1e592 <lte_lc_func_mode_set+0x4e>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1e5f2:	4e13      	ldr	r6, [pc, #76]	; (1e640 <lte_lc_func_mode_set+0xfc>)
   1e5f4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1e644 <lte_lc_func_mode_set+0x100>
   1e5f8:	e005      	b.n	1e606 <lte_lc_func_mode_set+0xc2>
   1e5fa:	d2cc      	bcs.n	1e596 <lte_lc_func_mode_set+0x52>
		e->callback(mode, e->context);
   1e5fc:	e9d6 3100 	ldrd	r3, r1, [r6]
   1e600:	4620      	mov	r0, r4
   1e602:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1e604:	3608      	adds	r6, #8
   1e606:	4546      	cmp	r6, r8
   1e608:	d9f7      	bls.n	1e5fa <lte_lc_func_mode_set+0xb6>
   1e60a:	490f      	ldr	r1, [pc, #60]	; (1e648 <lte_lc_func_mode_set+0x104>)
   1e60c:	f240 5376 	movw	r3, #1398	; 0x576
   1e610:	4a0e      	ldr	r2, [pc, #56]	; (1e64c <lte_lc_func_mode_set+0x108>)
   1e612:	480f      	ldr	r0, [pc, #60]	; (1e650 <lte_lc_func_mode_set+0x10c>)
   1e614:	f010 f99e 	bl	2e954 <assert_print>
   1e618:	480e      	ldr	r0, [pc, #56]	; (1e654 <lte_lc_func_mode_set+0x110>)
   1e61a:	f010 f99b 	bl	2e954 <assert_print>
   1e61e:	f240 5176 	movw	r1, #1398	; 0x576
   1e622:	480a      	ldr	r0, [pc, #40]	; (1e64c <lte_lc_func_mode_set+0x108>)
   1e624:	f010 f98f 	bl	2e946 <assert_post_action>
   1e628:	01300c01 	.word	0x01300c01
   1e62c:	0003cf11 	.word	0x0003cf11
   1e630:	000364c0 	.word	0x000364c0
   1e634:	0003cf3b 	.word	0x0003cf3b
   1e638:	0003cf57 	.word	0x0003cf57
   1e63c:	0003cf62 	.word	0x0003cf62
   1e640:	000412cc 	.word	0x000412cc
   1e644:	000412cc 	.word	0x000412cc
   1e648:	0003cf9b 	.word	0x0003cf9b
   1e64c:	0003c8ef 	.word	0x0003c8ef
   1e650:	000381c3 	.word	0x000381c3
   1e654:	000387c1 	.word	0x000387c1

0001e658 <connect_lte>:
{
   1e658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   1e65c:	4b4a      	ldr	r3, [pc, #296]	; (1e788 <connect_lte+0x130>)
{
   1e65e:	4605      	mov	r5, r0
	if (!is_initialized) {
   1e660:	781b      	ldrb	r3, [r3, #0]
{
   1e662:	b089      	sub	sp, #36	; 0x24
	if (!is_initialized) {
   1e664:	b973      	cbnz	r3, 1e684 <connect_lte+0x2c>
		LOG_ERR("The LTE link controller is not initialized");
   1e666:	4b49      	ldr	r3, [pc, #292]	; (1e78c <connect_lte+0x134>)
   1e668:	4849      	ldr	r0, [pc, #292]	; (1e790 <connect_lte+0x138>)
   1e66a:	9307      	str	r3, [sp, #28]
   1e66c:	2302      	movs	r3, #2
   1e66e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e672:	aa06      	add	r2, sp, #24
   1e674:	9306      	str	r3, [sp, #24]
   1e676:	f014 fdd0 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1e67a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e67e:	b009      	add	sp, #36	; 0x24
   1e680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e684:	2601      	movs	r6, #1
   1e686:	4c43      	ldr	r4, [pc, #268]	; (1e794 <connect_lte+0x13c>)
   1e688:	e8d4 3fef 	ldaex	r3, [r4]
   1e68c:	e8c4 6fe2 	stlex	r2, r6, [r4]
   1e690:	2a00      	cmp	r2, #0
   1e692:	d1f9      	bne.n	1e688 <connect_lte+0x30>
	if (atomic_set(&in_progress, 1)) {
   1e694:	2b00      	cmp	r3, #0
   1e696:	d173      	bne.n	1e780 <connect_lte+0x128>
	err = lte_lc_nw_reg_status_get(&reg_status);
   1e698:	f10d 0007 	add.w	r0, sp, #7
   1e69c:	f7ff fd72 	bl	1e184 <lte_lc_nw_reg_status_get>
	if (err) {
   1e6a0:	b160      	cbz	r0, 1e6bc <connect_lte+0x64>
		LOG_ERR("Failed to get current registration status");
   1e6a2:	4b3d      	ldr	r3, [pc, #244]	; (1e798 <connect_lte+0x140>)
   1e6a4:	483a      	ldr	r0, [pc, #232]	; (1e790 <connect_lte+0x138>)
   1e6a6:	9307      	str	r3, [sp, #28]
   1e6a8:	2302      	movs	r3, #2
   1e6aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e6ae:	aa06      	add	r2, sp, #24
   1e6b0:	9306      	str	r3, [sp, #24]
   1e6b2:	f014 fdb2 	bl	3321a <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1e6b6:	f06f 000d 	mvn.w	r0, #13
   1e6ba:	e7e0      	b.n	1e67e <connect_lte+0x26>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1e6bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e6c0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1e6c4:	2b01      	cmp	r3, #1
   1e6c6:	d017      	beq.n	1e6f8 <connect_lte+0xa0>
	if (blocking) {
   1e6c8:	b125      	cbz	r5, 1e6d4 <connect_lte+0x7c>
   1e6ca:	4601      	mov	r1, r0
   1e6cc:	4632      	mov	r2, r6
   1e6ce:	4833      	ldr	r0, [pc, #204]	; (1e79c <connect_lte+0x144>)
   1e6d0:	f016 faaf 	bl	34c32 <z_impl_k_sem_init>
{
   1e6d4:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   1e6d6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1e7a0 <connect_lte+0x148>
   1e6da:	4e32      	ldr	r6, [pc, #200]	; (1e7a4 <connect_lte+0x14c>)
		err = lte_lc_func_mode_get(&current_func_mode);
   1e6dc:	f10d 0006 	add.w	r0, sp, #6
   1e6e0:	f7ff ff00 	bl	1e4e4 <lte_lc_func_mode_get>
		if (err) {
   1e6e4:	b9b8      	cbnz	r0, 1e716 <connect_lte+0xbe>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   1e6e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e6ea:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   1e6ee:	d00b      	beq.n	1e708 <connect_lte+0xb0>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   1e6f0:	2001      	movs	r0, #1
   1e6f2:	f7ff ff27 	bl	1e544 <lte_lc_func_mode_set>
		if (err || !blocking) {
   1e6f6:	b188      	cbz	r0, 1e71c <connect_lte+0xc4>
   1e6f8:	2300      	movs	r3, #0
   1e6fa:	e8d4 2fef 	ldaex	r2, [r4]
   1e6fe:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1e702:	2900      	cmp	r1, #0
   1e704:	d0bb      	beq.n	1e67e <connect_lte+0x26>
   1e706:	e7f8      	b.n	1e6fa <connect_lte+0xa2>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   1e708:	f898 1000 	ldrb.w	r1, [r8]
   1e70c:	7830      	ldrb	r0, [r6, #0]
   1e70e:	f7ff fd71 	bl	1e1f4 <lte_lc_system_mode_set>
			if (err) {
   1e712:	2800      	cmp	r0, #0
   1e714:	d0ec      	beq.n	1e6f0 <connect_lte+0x98>
			err = -EFAULT;
   1e716:	f06f 000d 	mvn.w	r0, #13
   1e71a:	e7ed      	b.n	1e6f8 <connect_lte+0xa0>
		if (err || !blocking) {
   1e71c:	2d00      	cmp	r5, #0
   1e71e:	d0eb      	beq.n	1e6f8 <connect_lte+0xa0>
	return z_impl_k_sem_take(sem, timeout);
   1e720:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   1e724:	2300      	movs	r3, #0
   1e726:	481d      	ldr	r0, [pc, #116]	; (1e79c <connect_lte+0x144>)
   1e728:	f00a fb52 	bl	28dd0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1e72c:	f110 0f0b 	cmn.w	r0, #11
   1e730:	d1e2      	bne.n	1e6f8 <connect_lte+0xa0>
			LOG_INF("Network connection attempt timed out");
   1e732:	f04f 0902 	mov.w	r9, #2
   1e736:	4b1c      	ldr	r3, [pc, #112]	; (1e7a8 <connect_lte+0x150>)
   1e738:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1e73c:	4814      	ldr	r0, [pc, #80]	; (1e790 <connect_lte+0x138>)
   1e73e:	aa06      	add	r2, sp, #24
   1e740:	9307      	str	r3, [sp, #28]
   1e742:	f8cd 9018 	str.w	r9, [sp, #24]
   1e746:	f014 fd68 	bl	3321a <z_log_msg_static_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   1e74a:	2f01      	cmp	r7, #1
   1e74c:	d015      	beq.n	1e77a <connect_lte+0x122>
				if (sys_mode_target == sys_mode_preferred) {
   1e74e:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   1e750:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   1e752:	2b04      	cmp	r3, #4
   1e754:	bf14      	ite	ne
   1e756:	2304      	movne	r3, #4
   1e758:	2305      	moveq	r3, #5
   1e75a:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   1e75c:	f7ff fef2 	bl	1e544 <lte_lc_func_mode_set>
				if (err) {
   1e760:	2800      	cmp	r0, #0
   1e762:	d1d8      	bne.n	1e716 <connect_lte+0xbe>
				LOG_INF("Using fallback network mode");
   1e764:	4b11      	ldr	r3, [pc, #68]	; (1e7ac <connect_lte+0x154>)
   1e766:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1e76a:	4809      	ldr	r0, [pc, #36]	; (1e790 <connect_lte+0x138>)
   1e76c:	aa06      	add	r2, sp, #24
   1e76e:	e9cd 9306 	strd	r9, r3, [sp, #24]
   1e772:	2701      	movs	r7, #1
   1e774:	f014 fd51 	bl	3321a <z_log_msg_static_create.constprop.0>
	} while (tries > 0);
   1e778:	e7b0      	b.n	1e6dc <connect_lte+0x84>
				err = -ETIMEDOUT;
   1e77a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1e77e:	e7bb      	b.n	1e6f8 <connect_lte+0xa0>
		return -EINPROGRESS;
   1e780:	f06f 0076 	mvn.w	r0, #118	; 0x76
   1e784:	e77b      	b.n	1e67e <connect_lte+0x26>
   1e786:	bf00      	nop
   1e788:	200127fa 	.word	0x200127fa
   1e78c:	0003cfb9 	.word	0x0003cfb9
   1e790:	000364c0 	.word	0x000364c0
   1e794:	2000ff84 	.word	0x2000ff84
   1e798:	0003cfe4 	.word	0x0003cfe4
   1e79c:	2000ff90 	.word	0x2000ff90
   1e7a0:	200127eb 	.word	0x200127eb
   1e7a4:	2000ccb5 	.word	0x2000ccb5
   1e7a8:	0003d00e 	.word	0x0003d00e
   1e7ac:	0003d033 	.word	0x0003d033

0001e7b0 <lte_lc_deinit>:
{
   1e7b0:	b508      	push	{r3, lr}
	if (is_initialized) {
   1e7b2:	4b06      	ldr	r3, [pc, #24]	; (1e7cc <lte_lc_deinit+0x1c>)
   1e7b4:	781a      	ldrb	r2, [r3, #0]
   1e7b6:	b122      	cbz	r2, 1e7c2 <lte_lc_deinit+0x12>
		is_initialized = false;
   1e7b8:	2000      	movs	r0, #0
   1e7ba:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1e7bc:	f7ff fec2 	bl	1e544 <lte_lc_func_mode_set>
   1e7c0:	b908      	cbnz	r0, 1e7c6 <lte_lc_deinit+0x16>
   1e7c2:	2000      	movs	r0, #0
}
   1e7c4:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1e7c6:	f06f 000d 	mvn.w	r0, #13
   1e7ca:	e7fb      	b.n	1e7c4 <lte_lc_deinit+0x14>
   1e7cc:	200127fa 	.word	0x200127fa

0001e7d0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1e7d0:	4801      	ldr	r0, [pc, #4]	; (1e7d8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1e7d2:	f00a b927 	b.w	28a24 <z_impl_k_mutex_unlock>
   1e7d6:	bf00      	nop
   1e7d8:	2000cee0 	.word	0x2000cee0

0001e7dc <event_handler_list_is_empty>:
	return list->head;
   1e7dc:	4b02      	ldr	r3, [pc, #8]	; (1e7e8 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   1e7de:	6818      	ldr	r0, [r3, #0]
}
   1e7e0:	fab0 f080 	clz	r0, r0
   1e7e4:	0940      	lsrs	r0, r0, #5
   1e7e6:	4770      	bx	lr
   1e7e8:	2000ffa8 	.word	0x2000ffa8

0001e7ec <event_handler_list_append_handler>:
{
   1e7ec:	b570      	push	{r4, r5, r6, lr}
   1e7ee:	4606      	mov	r6, r0
	return list->head;
   1e7f0:	4d12      	ldr	r5, [pc, #72]	; (1e83c <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   1e7f2:	f04f 32ff 	mov.w	r2, #4294967295
   1e7f6:	f04f 33ff 	mov.w	r3, #4294967295
   1e7fa:	4811      	ldr	r0, [pc, #68]	; (1e840 <event_handler_list_append_handler+0x54>)
   1e7fc:	f00a f842 	bl	28884 <z_impl_k_mutex_lock>
   1e800:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   1e802:	b944      	cbnz	r4, 1e816 <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   1e804:	2008      	movs	r0, #8
   1e806:	f016 fbbd 	bl	34f84 <k_malloc>
	if (to_ins == NULL) {
   1e80a:	b948      	cbnz	r0, 1e820 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   1e80c:	f7ff ffe0 	bl	1e7d0 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   1e810:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e814:	e00d      	b.n	1e832 <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   1e816:	6863      	ldr	r3, [r4, #4]
   1e818:	429e      	cmp	r6, r3
   1e81a:	d007      	beq.n	1e82c <event_handler_list_append_handler+0x40>
	return node->next;
   1e81c:	6824      	ldr	r4, [r4, #0]
   1e81e:	e7f0      	b.n	1e802 <event_handler_list_append_handler+0x16>
   1e820:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   1e822:	6046      	str	r6, [r0, #4]
	return list->tail;
   1e824:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1e826:	b92b      	cbnz	r3, 1e834 <event_handler_list_append_handler+0x48>
	list->head = node;
   1e828:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   1e82c:	f7ff ffd0 	bl	1e7d0 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   1e830:	2000      	movs	r0, #0
}
   1e832:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1e834:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1e836:	6068      	str	r0, [r5, #4]
}
   1e838:	e7f8      	b.n	1e82c <event_handler_list_append_handler+0x40>
   1e83a:	bf00      	nop
   1e83c:	2000ffa8 	.word	0x2000ffa8
   1e840:	2000cee0 	.word	0x2000cee0

0001e844 <event_handler_list_dispatch>:
{
   1e844:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1e846:	4c0f      	ldr	r4, [pc, #60]	; (1e884 <event_handler_list_dispatch+0x40>)
   1e848:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   1e84a:	6823      	ldr	r3, [r4, #0]
   1e84c:	b1c3      	cbz	r3, 1e880 <event_handler_list_dispatch+0x3c>
   1e84e:	f04f 33ff 	mov.w	r3, #4294967295
   1e852:	f04f 32ff 	mov.w	r2, #4294967295
   1e856:	480c      	ldr	r0, [pc, #48]	; (1e888 <event_handler_list_dispatch+0x44>)
   1e858:	f00a f814 	bl	28884 <z_impl_k_mutex_lock>
   1e85c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1e85e:	b10b      	cbz	r3, 1e864 <event_handler_list_dispatch+0x20>
	return node->next;
   1e860:	681c      	ldr	r4, [r3, #0]
   1e862:	b91b      	cbnz	r3, 1e86c <event_handler_list_dispatch+0x28>
}
   1e864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   1e868:	f7ff bfb2 	b.w	1e7d0 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   1e86c:	4628      	mov	r0, r5
   1e86e:	685b      	ldr	r3, [r3, #4]
   1e870:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1e872:	b11c      	cbz	r4, 1e87c <event_handler_list_dispatch+0x38>
   1e874:	6822      	ldr	r2, [r4, #0]
   1e876:	4623      	mov	r3, r4
   1e878:	4614      	mov	r4, r2
   1e87a:	e7f2      	b.n	1e862 <event_handler_list_dispatch+0x1e>
   1e87c:	4622      	mov	r2, r4
   1e87e:	e7fa      	b.n	1e876 <event_handler_list_dispatch+0x32>
}
   1e880:	bd38      	pop	{r3, r4, r5, pc}
   1e882:	bf00      	nop
   1e884:	2000ffa8 	.word	0x2000ffa8
   1e888:	2000cee0 	.word	0x2000cee0

0001e88c <response_is_valid>:
{
   1e88c:	b570      	push	{r4, r5, r6, lr}
   1e88e:	460e      	mov	r6, r1
   1e890:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   1e892:	4605      	mov	r5, r0
{
   1e894:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   1e896:	b100      	cbz	r0, 1e89a <response_is_valid+0xe>
   1e898:	b962      	cbnz	r2, 1e8b4 <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   1e89a:	4b0d      	ldr	r3, [pc, #52]	; (1e8d0 <response_is_valid+0x44>)
   1e89c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e8a0:	9305      	str	r3, [sp, #20]
   1e8a2:	2302      	movs	r3, #2
   1e8a4:	480b      	ldr	r0, [pc, #44]	; (1e8d4 <response_is_valid+0x48>)
   1e8a6:	aa04      	add	r2, sp, #16
   1e8a8:	9304      	str	r3, [sp, #16]
   1e8aa:	f014 fcd7 	bl	3325c <z_log_msg_static_create.constprop.0>
		return false;
   1e8ae:	2000      	movs	r0, #0
}
   1e8b0:	b006      	add	sp, #24
   1e8b2:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   1e8b4:	4610      	mov	r0, r2
   1e8b6:	f7ea fd30 	bl	931a <strlen>
   1e8ba:	42b0      	cmp	r0, r6
   1e8bc:	d8f7      	bhi.n	1e8ae <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   1e8be:	4632      	mov	r2, r6
   1e8c0:	4621      	mov	r1, r4
   1e8c2:	4628      	mov	r0, r5
   1e8c4:	f016 fb82 	bl	34fcc <memcmp>
	if ((response_len < strlen(check)) ||
   1e8c8:	fab0 f080 	clz	r0, r0
   1e8cc:	0940      	lsrs	r0, r0, #5
   1e8ce:	e7ef      	b.n	1e8b0 <response_is_valid+0x24>
   1e8d0:	0003d0e9 	.word	0x0003d0e9
   1e8d4:	000364c8 	.word	0x000364c8

0001e8d8 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   1e8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   1e8dc:	f04f 0900 	mov.w	r9, #0
{
   1e8e0:	b089      	sub	sp, #36	; 0x24
   1e8e2:	4607      	mov	r7, r0
   1e8e4:	460e      	mov	r6, r1
   1e8e6:	4614      	mov	r4, r2
   1e8e8:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   1e8ea:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1e8ee:	f7ea fd14 	bl	931a <strlen>
   1e8f2:	2808      	cmp	r0, #8
   1e8f4:	d11b      	bne.n	1e92e <parse_psm+0x56>
   1e8f6:	4630      	mov	r0, r6
   1e8f8:	f7ea fd0f 	bl	931a <strlen>
   1e8fc:	2808      	cmp	r0, #8
   1e8fe:	d116      	bne.n	1e92e <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1e900:	8832      	ldrh	r2, [r6, #0]
   1e902:	78b3      	ldrb	r3, [r6, #2]
   1e904:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   1e908:	4649      	mov	r1, r9
   1e90a:	2202      	movs	r2, #2
   1e90c:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1e90e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e912:	f00d ff7d 	bl	2c810 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   1e916:	2807      	cmp	r0, #7
   1e918:	d90e      	bls.n	1e938 <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   1e91a:	4b32      	ldr	r3, [pc, #200]	; (1e9e4 <parse_psm+0x10c>)
   1e91c:	9307      	str	r3, [sp, #28]
   1e91e:	2302      	movs	r3, #2
   1e920:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e924:	4830      	ldr	r0, [pc, #192]	; (1e9e8 <parse_psm+0x110>)
   1e926:	aa06      	add	r2, sp, #24
   1e928:	9306      	str	r3, [sp, #24]
   1e92a:	f014 fc97 	bl	3325c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1e92e:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   1e932:	b009      	add	sp, #36	; 0x24
   1e934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   1e938:	4b2c      	ldr	r3, [pc, #176]	; (1e9ec <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1e93a:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   1e93c:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1e940:	4649      	mov	r1, r9
   1e942:	1cf0      	adds	r0, r6, #3
   1e944:	f00d ff64 	bl	2c810 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1e948:	f1b8 0f00 	cmp.w	r8, #0
   1e94c:	d117      	bne.n	1e97e <parse_psm+0xa6>
   1e94e:	f04f 33ff 	mov.w	r3, #4294967295
   1e952:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1e954:	b1c4      	cbz	r4, 1e988 <parse_psm+0xb0>
   1e956:	4620      	mov	r0, r4
   1e958:	f7ea fcdf 	bl	931a <strlen>
   1e95c:	2808      	cmp	r0, #8
   1e95e:	d113      	bne.n	1e988 <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1e960:	8822      	ldrh	r2, [r4, #0]
   1e962:	78a3      	ldrb	r3, [r4, #2]
   1e964:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   1e968:	2100      	movs	r1, #0
   1e96a:	2202      	movs	r2, #2
   1e96c:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1e96e:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   1e972:	f00d ff4d 	bl	2c810 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   1e976:	2807      	cmp	r0, #7
   1e978:	d915      	bls.n	1e9a6 <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1e97a:	4b1d      	ldr	r3, [pc, #116]	; (1e9f0 <parse_psm+0x118>)
   1e97c:	e7ce      	b.n	1e91c <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1e97e:	fb00 f008 	mul.w	r0, r0, r8
   1e982:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   1e984:	3001      	adds	r0, #1
   1e986:	d0e5      	beq.n	1e954 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   1e988:	883a      	ldrh	r2, [r7, #0]
   1e98a:	78bb      	ldrb	r3, [r7, #2]
   1e98c:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e990:	2100      	movs	r1, #0
   1e992:	2202      	movs	r2, #2
   1e994:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   1e996:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   1e99a:	f00d ff39 	bl	2c810 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1e99e:	2807      	cmp	r0, #7
   1e9a0:	d910      	bls.n	1e9c4 <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   1e9a2:	4b14      	ldr	r3, [pc, #80]	; (1e9f4 <parse_psm+0x11c>)
   1e9a4:	e7ba      	b.n	1e91c <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   1e9a6:	4b14      	ldr	r3, [pc, #80]	; (1e9f8 <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1e9a8:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   1e9aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1e9ae:	2100      	movs	r1, #0
   1e9b0:	1ce0      	adds	r0, r4, #3
   1e9b2:	f00d ff2d 	bl	2c810 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1e9b6:	b116      	cbz	r6, 1e9be <parse_psm+0xe6>
   1e9b8:	4370      	muls	r0, r6
   1e9ba:	6028      	str	r0, [r5, #0]
   1e9bc:	e7e4      	b.n	1e988 <parse_psm+0xb0>
   1e9be:	f04f 30ff 	mov.w	r0, #4294967295
   1e9c2:	e7fa      	b.n	1e9ba <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   1e9c4:	4b0d      	ldr	r3, [pc, #52]	; (1e9fc <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1e9c6:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1e9c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   1e9cc:	2100      	movs	r1, #0
   1e9ce:	1cf8      	adds	r0, r7, #3
   1e9d0:	f00d ff1e 	bl	2c810 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1e9d4:	b11c      	cbz	r4, 1e9de <parse_psm+0x106>
   1e9d6:	4344      	muls	r4, r0
	return 0;
   1e9d8:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1e9da:	606c      	str	r4, [r5, #4]
	return 0;
   1e9dc:	e7a9      	b.n	1e932 <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1e9de:	f04f 34ff 	mov.w	r4, #4294967295
   1e9e2:	e7f9      	b.n	1e9d8 <parse_psm+0x100>
   1e9e4:	0003d239 	.word	0x0003d239
   1e9e8:	000364c8 	.word	0x000364c8
   1e9ec:	0003714c 	.word	0x0003714c
   1e9f0:	0003d26e 	.word	0x0003d26e
   1e9f4:	0003d29a 	.word	0x0003d29a
   1e9f8:	0003712c 	.word	0x0003712c
   1e9fc:	0003712c 	.word	0x0003712c

0001ea00 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1ea00:	2300      	movs	r3, #0
{
   1ea02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea06:	b084      	sub	sp, #16
   1ea08:	af00      	add	r7, sp, #0
   1ea0a:	4680      	mov	r8, r0
   1ea0c:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1ea0e:	f107 0008 	add.w	r0, r7, #8
   1ea12:	2104      	movs	r1, #4
{
   1ea14:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   1ea16:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1ea1a:	f014 facf 	bl	32fbc <at_params_list_init>
	if (err) {
   1ea1e:	4604      	mov	r4, r0
   1ea20:	b198      	cbz	r0, 1ea4a <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1ea22:	466d      	mov	r5, sp
   1ea24:	b088      	sub	sp, #32
   1ea26:	466a      	mov	r2, sp
   1ea28:	4b29      	ldr	r3, [pc, #164]	; (1ead0 <parse_rrc_mode+0xd0>)
   1ea2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ea2e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ea32:	2303      	movs	r3, #3
   1ea34:	4827      	ldr	r0, [pc, #156]	; (1ead4 <parse_rrc_mode+0xd4>)
   1ea36:	f842 3f10 	str.w	r3, [r2, #16]!
   1ea3a:	f014 fc0f 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ea3e:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1ea40:	4620      	mov	r0, r4
   1ea42:	3710      	adds	r7, #16
   1ea44:	46bd      	mov	sp, r7
   1ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   1ea4a:	4601      	mov	r1, r0
   1ea4c:	f107 0208 	add.w	r2, r7, #8
   1ea50:	4640      	mov	r0, r8
   1ea52:	f014 fab0 	bl	32fb6 <at_parser_params_from_str>
	if (err) {
   1ea56:	4604      	mov	r4, r0
   1ea58:	b198      	cbz	r0, 1ea82 <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1ea5a:	466d      	mov	r5, sp
   1ea5c:	b088      	sub	sp, #32
   1ea5e:	466a      	mov	r2, sp
   1ea60:	4b1d      	ldr	r3, [pc, #116]	; (1ead8 <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1ea62:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ea66:	2303      	movs	r3, #3
   1ea68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ea6c:	4819      	ldr	r0, [pc, #100]	; (1ead4 <parse_rrc_mode+0xd4>)
   1ea6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ea72:	f014 fbf3 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ea76:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1ea78:	f107 0008 	add.w	r0, r7, #8
   1ea7c:	f014 fab1 	bl	32fe2 <at_params_list_free>
	return err;
   1ea80:	e7de      	b.n	1ea40 <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1ea82:	4631      	mov	r1, r6
   1ea84:	1d3a      	adds	r2, r7, #4
   1ea86:	f107 0008 	add.w	r0, r7, #8
   1ea8a:	f014 fb5e 	bl	3314a <at_params_int_get>
	if (err) {
   1ea8e:	4604      	mov	r4, r0
   1ea90:	b120      	cbz	r0, 1ea9c <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1ea92:	466d      	mov	r5, sp
   1ea94:	b088      	sub	sp, #32
   1ea96:	466a      	mov	r2, sp
   1ea98:	4b10      	ldr	r3, [pc, #64]	; (1eadc <parse_rrc_mode+0xdc>)
   1ea9a:	e7e2      	b.n	1ea62 <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   1ea9c:	687b      	ldr	r3, [r7, #4]
   1ea9e:	b11b      	cbz	r3, 1eaa8 <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   1eaa0:	2b01      	cmp	r3, #1
   1eaa2:	d103      	bne.n	1eaac <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1eaa4:	702b      	strb	r3, [r5, #0]
   1eaa6:	e7e7      	b.n	1ea78 <parse_rrc_mode+0x78>
   1eaa8:	4603      	mov	r3, r0
   1eaaa:	e7fb      	b.n	1eaa4 <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1eaac:	466c      	mov	r4, sp
   1eaae:	b088      	sub	sp, #32
   1eab0:	466a      	mov	r2, sp
   1eab2:	490b      	ldr	r1, [pc, #44]	; (1eae0 <parse_rrc_mode+0xe0>)
   1eab4:	4807      	ldr	r0, [pc, #28]	; (1ead4 <parse_rrc_mode+0xd4>)
   1eab6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1eaba:	2303      	movs	r3, #3
   1eabc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eac0:	f842 3f10 	str.w	r3, [r2, #16]!
   1eac4:	f014 fbca 	bl	3325c <z_log_msg_static_create.constprop.0>
   1eac8:	46a5      	mov	sp, r4
		err = -EINVAL;
   1eaca:	f06f 0415 	mvn.w	r4, #21
   1eace:	e7d3      	b.n	1ea78 <parse_rrc_mode+0x78>
   1ead0:	0003d102 	.word	0x0003d102
   1ead4:	000364c8 	.word	0x000364c8
   1ead8:	0003d2bd 	.word	0x0003d2bd
   1eadc:	0003d2e8 	.word	0x0003d2e8
   1eae0:	0003d311 	.word	0x0003d311

0001eae4 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   1eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eae8:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1eaea:	2300      	movs	r3, #0
{
   1eaec:	b08a      	sub	sp, #40	; 0x28
   1eaee:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   1eaf0:	60fb      	str	r3, [r7, #12]
   1eaf2:	823b      	strh	r3, [r7, #16]
   1eaf4:	74bb      	strb	r3, [r7, #18]
{
   1eaf6:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   1eaf8:	2309      	movs	r3, #9
   1eafa:	2207      	movs	r2, #7
{
   1eafc:	4680      	mov	r8, r0
   1eafe:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1eb00:	f107 0014 	add.w	r0, r7, #20
   1eb04:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   1eb06:	e9c7 2300 	strd	r2, r3, [r7]
{
   1eb0a:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1eb0e:	f014 fa55 	bl	32fbc <at_params_list_init>
	if (err) {
   1eb12:	4604      	mov	r4, r0
   1eb14:	b198      	cbz	r0, 1eb3e <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1eb16:	466d      	mov	r5, sp
   1eb18:	b088      	sub	sp, #32
   1eb1a:	466a      	mov	r2, sp
   1eb1c:	4b77      	ldr	r3, [pc, #476]	; (1ecfc <parse_cereg+0x218>)
   1eb1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eb22:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eb26:	2303      	movs	r3, #3
   1eb28:	4875      	ldr	r0, [pc, #468]	; (1ed00 <parse_cereg+0x21c>)
   1eb2a:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb2e:	f014 fb95 	bl	3325c <z_log_msg_static_create.constprop.0>
   1eb32:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1eb34:	4620      	mov	r0, r4
   1eb36:	3728      	adds	r7, #40	; 0x28
   1eb38:	46bd      	mov	sp, r7
   1eb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1eb3e:	4601      	mov	r1, r0
   1eb40:	f107 0214 	add.w	r2, r7, #20
   1eb44:	4640      	mov	r0, r8
   1eb46:	f014 fa36 	bl	32fb6 <at_parser_params_from_str>
	if (err) {
   1eb4a:	4604      	mov	r4, r0
   1eb4c:	b198      	cbz	r0, 1eb76 <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1eb4e:	466d      	mov	r5, sp
   1eb50:	b088      	sub	sp, #32
   1eb52:	466a      	mov	r2, sp
   1eb54:	4b6b      	ldr	r3, [pc, #428]	; (1ed04 <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1eb56:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1eb5a:	2303      	movs	r3, #3
   1eb5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eb60:	4867      	ldr	r0, [pc, #412]	; (1ed00 <parse_cereg+0x21c>)
   1eb62:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb66:	f014 fb79 	bl	3325c <z_log_msg_static_create.constprop.0>
   1eb6a:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1eb6c:	f107 0014 	add.w	r0, r7, #20
   1eb70:	f014 fa37 	bl	32fe2 <at_params_list_free>
	return err;
   1eb74:	e7de      	b.n	1eb34 <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   1eb76:	4601      	mov	r1, r0
   1eb78:	463b      	mov	r3, r7
   1eb7a:	f107 020c 	add.w	r2, r7, #12
   1eb7e:	f107 0014 	add.w	r0, r7, #20
   1eb82:	f014 fb10 	bl	331a6 <at_params_string_get>
	if (err) {
   1eb86:	4604      	mov	r4, r0
   1eb88:	b120      	cbz	r0, 1eb94 <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1eb8a:	466d      	mov	r5, sp
   1eb8c:	b088      	sub	sp, #32
   1eb8e:	466a      	mov	r2, sp
   1eb90:	4b5d      	ldr	r3, [pc, #372]	; (1ed08 <parse_cereg+0x224>)
   1eb92:	e7e0      	b.n	1eb56 <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1eb94:	4a5d      	ldr	r2, [pc, #372]	; (1ed0c <parse_cereg+0x228>)
   1eb96:	6839      	ldr	r1, [r7, #0]
   1eb98:	f107 000c 	add.w	r0, r7, #12
   1eb9c:	f7ff fe76 	bl	1e88c <response_is_valid>
   1eba0:	2800      	cmp	r0, #0
   1eba2:	d0e3      	beq.n	1eb6c <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   1eba4:	f107 021c 	add.w	r2, r7, #28
   1eba8:	f1c9 0102 	rsb	r1, r9, #2
   1ebac:	f107 0014 	add.w	r0, r7, #20
   1ebb0:	f014 facb 	bl	3314a <at_params_int_get>
	if (err) {
   1ebb4:	f1b0 0800 	subs.w	r8, r0, #0
   1ebb8:	d165      	bne.n	1ec86 <parse_cereg+0x1a2>
	switch (reg_status) {
   1ebba:	69fb      	ldr	r3, [r7, #28]
   1ebbc:	2b08      	cmp	r3, #8
   1ebbe:	d03b      	beq.n	1ec38 <parse_cereg+0x154>
   1ebc0:	dc23      	bgt.n	1ec0a <parse_cereg+0x126>
   1ebc2:	2b05      	cmp	r3, #5
   1ebc4:	d938      	bls.n	1ec38 <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   1ebc6:	466c      	mov	r4, sp
   1ebc8:	b088      	sub	sp, #32
   1ebca:	466a      	mov	r2, sp
   1ebcc:	4950      	ldr	r1, [pc, #320]	; (1ed10 <parse_cereg+0x22c>)
   1ebce:	484c      	ldr	r0, [pc, #304]	; (1ed00 <parse_cereg+0x21c>)
   1ebd0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ebd4:	2303      	movs	r3, #3
   1ebd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ebda:	f842 3f10 	str.w	r3, [r2, #16]!
   1ebde:	f014 fb3d 	bl	3325c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1ebe2:	f06f 0815 	mvn.w	r8, #21
   1ebe6:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   1ebe8:	466c      	mov	r4, sp
   1ebea:	b088      	sub	sp, #32
   1ebec:	466a      	mov	r2, sp
   1ebee:	4b49      	ldr	r3, [pc, #292]	; (1ed14 <parse_cereg+0x230>)
   1ebf0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ebf4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ebf8:	2303      	movs	r3, #3
   1ebfa:	4841      	ldr	r0, [pc, #260]	; (1ed00 <parse_cereg+0x21c>)
   1ebfc:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec00:	f014 fb2c 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ec04:	46a5      	mov	sp, r4
		goto clean_exit;
   1ec06:	4644      	mov	r4, r8
   1ec08:	e7b0      	b.n	1eb6c <parse_cereg+0x88>
	switch (reg_status) {
   1ec0a:	2b5a      	cmp	r3, #90	; 0x5a
   1ec0c:	d1db      	bne.n	1ebc6 <parse_cereg+0xe2>
	if (reg_status) {
   1ec0e:	b106      	cbz	r6, 1ec12 <parse_cereg+0x12e>
		*reg_status = status;
   1ec10:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1ec12:	2d00      	cmp	r5, #0
   1ec14:	d140      	bne.n	1ec98 <parse_cereg+0x1b4>
	if (lte_mode) {
   1ec16:	f1ba 0f00 	cmp.w	sl, #0
   1ec1a:	d0a7      	beq.n	1eb6c <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   1ec1c:	f107 0208 	add.w	r2, r7, #8
   1ec20:	f1c9 0105 	rsb	r1, r9, #5
   1ec24:	f107 0014 	add.w	r0, r7, #20
   1ec28:	f014 fa8f 	bl	3314a <at_params_int_get>
		if (err) {
   1ec2c:	2800      	cmp	r0, #0
   1ec2e:	d163      	bne.n	1ecf8 <parse_cereg+0x214>
			*lte_mode = mode;
   1ec30:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   1ec32:	f88a 3000 	strb.w	r3, [sl]
   1ec36:	e799      	b.n	1eb6c <parse_cereg+0x88>
	if (reg_status) {
   1ec38:	bb1e      	cbnz	r6, 1ec82 <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1ec3a:	2d00      	cmp	r5, #0
   1ec3c:	d0eb      	beq.n	1ec16 <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1ec3e:	f107 0014 	add.w	r0, r7, #20
   1ec42:	f014 fad3 	bl	331ec <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1ec46:	2803      	cmp	r0, #3
   1ec48:	d926      	bls.n	1ec98 <parse_cereg+0x1b4>
		err = at_params_string_get(
   1ec4a:	1d3b      	adds	r3, r7, #4
   1ec4c:	f107 021c 	add.w	r2, r7, #28
   1ec50:	f1c9 0103 	rsb	r1, r9, #3
   1ec54:	f107 0014 	add.w	r0, r7, #20
   1ec58:	f014 faa5 	bl	331a6 <at_params_string_get>
		if (err) {
   1ec5c:	4606      	mov	r6, r0
   1ec5e:	b300      	cbz	r0, 1eca2 <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1ec60:	466c      	mov	r4, sp
   1ec62:	b088      	sub	sp, #32
   1ec64:	466a      	mov	r2, sp
   1ec66:	4b2c      	ldr	r3, [pc, #176]	; (1ed18 <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1ec68:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1ec6c:	2303      	movs	r3, #3
   1ec6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec72:	4823      	ldr	r0, [pc, #140]	; (1ed00 <parse_cereg+0x21c>)
   1ec74:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec78:	f014 faf0 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ec7c:	46a5      	mov	sp, r4
			goto clean_exit;
   1ec7e:	4634      	mov	r4, r6
   1ec80:	e774      	b.n	1eb6c <parse_cereg+0x88>
		*reg_status = status;
   1ec82:	7033      	strb	r3, [r6, #0]
   1ec84:	e7d9      	b.n	1ec3a <parse_cereg+0x156>
	if (status < 0) {
   1ec86:	dbaf      	blt.n	1ebe8 <parse_cereg+0x104>
	if (reg_status) {
   1ec88:	b10e      	cbz	r6, 1ec8e <parse_cereg+0x1aa>
		*reg_status = status;
   1ec8a:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   1ec8e:	2d00      	cmp	r5, #0
   1ec90:	d0c1      	beq.n	1ec16 <parse_cereg+0x132>
   1ec92:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   1ec96:	d1d2      	bne.n	1ec3e <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   1ec98:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1ec9c:	e9c5 3302 	strd	r3, r3, [r5, #8]
   1eca0:	e7b9      	b.n	1ec16 <parse_cereg+0x132>
		str_buf[len] = '\0';
   1eca2:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   1eca4:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1eca6:	3328      	adds	r3, #40	; 0x28
   1eca8:	443b      	add	r3, r7
   1ecaa:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1ecae:	2210      	movs	r2, #16
   1ecb0:	f107 001c 	add.w	r0, r7, #28
   1ecb4:	f00d fdac 	bl	2c810 <strtoul>
		len = sizeof(str_buf) - 1;
   1ecb8:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   1ecba:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   1ecbc:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   1ecbe:	f107 021c 	add.w	r2, r7, #28
   1ecc2:	1d3b      	adds	r3, r7, #4
   1ecc4:	f1c9 0104 	rsb	r1, r9, #4
   1ecc8:	f107 0014 	add.w	r0, r7, #20
   1eccc:	f014 fa6b 	bl	331a6 <at_params_string_get>
		if (err) {
   1ecd0:	4606      	mov	r6, r0
   1ecd2:	b120      	cbz	r0, 1ecde <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1ecd4:	466c      	mov	r4, sp
   1ecd6:	b088      	sub	sp, #32
   1ecd8:	466a      	mov	r2, sp
   1ecda:	4b10      	ldr	r3, [pc, #64]	; (1ed1c <parse_cereg+0x238>)
   1ecdc:	e7c4      	b.n	1ec68 <parse_cereg+0x184>
		str_buf[len] = '\0';
   1ecde:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   1ece0:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   1ece2:	3328      	adds	r3, #40	; 0x28
   1ece4:	443b      	add	r3, r7
   1ece6:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1ecea:	2210      	movs	r2, #16
   1ecec:	f107 001c 	add.w	r0, r7, #28
   1ecf0:	f00d fd8e 	bl	2c810 <strtoul>
   1ecf4:	60a8      	str	r0, [r5, #8]
   1ecf6:	e78e      	b.n	1ec16 <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   1ecf8:	2300      	movs	r3, #0
   1ecfa:	e79a      	b.n	1ec32 <parse_cereg+0x14e>
   1ecfc:	0003d102 	.word	0x0003d102
   1ed00:	000364c8 	.word	0x000364c8
   1ed04:	0003d32d 	.word	0x0003d32d
   1ed08:	0003d35a 	.word	0x0003d35a
   1ed0c:	0003d085 	.word	0x0003d085
   1ed10:	0003d383 	.word	0x0003d383
   1ed14:	0003cd07 	.word	0x0003cd07
   1ed18:	0003d3ab 	.word	0x0003d3ab
   1ed1c:	0003d3d7 	.word	0x0003d3d7

0001ed20 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   1ed20:	2300      	movs	r3, #0
{
   1ed22:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed24:	b089      	sub	sp, #36	; 0x24
   1ed26:	af00      	add	r7, sp, #0
   1ed28:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   1ed2a:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1ed2c:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   1ed30:	2900      	cmp	r1, #0
   1ed32:	d056      	beq.n	1ede2 <parse_xt3412+0xc2>
   1ed34:	2800      	cmp	r0, #0
   1ed36:	d054      	beq.n	1ede2 <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   1ed38:	2104      	movs	r1, #4
   1ed3a:	4638      	mov	r0, r7
   1ed3c:	f014 f93e 	bl	32fbc <at_params_list_init>
	if (err) {
   1ed40:	4604      	mov	r4, r0
   1ed42:	b190      	cbz	r0, 1ed6a <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1ed44:	466d      	mov	r5, sp
   1ed46:	b088      	sub	sp, #32
   1ed48:	466a      	mov	r2, sp
   1ed4a:	4b27      	ldr	r3, [pc, #156]	; (1ede8 <parse_xt3412+0xc8>)
   1ed4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ed50:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ed54:	2303      	movs	r3, #3
   1ed56:	4825      	ldr	r0, [pc, #148]	; (1edec <parse_xt3412+0xcc>)
   1ed58:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed5c:	f014 fa7e 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ed60:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1ed62:	4620      	mov	r0, r4
   1ed64:	3724      	adds	r7, #36	; 0x24
   1ed66:	46bd      	mov	sp, r7
   1ed68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1ed6a:	4601      	mov	r1, r0
   1ed6c:	463a      	mov	r2, r7
   1ed6e:	4630      	mov	r0, r6
   1ed70:	f014 f921 	bl	32fb6 <at_parser_params_from_str>
	if (err) {
   1ed74:	4604      	mov	r4, r0
   1ed76:	b190      	cbz	r0, 1ed9e <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   1ed78:	466d      	mov	r5, sp
   1ed7a:	b088      	sub	sp, #32
   1ed7c:	466a      	mov	r2, sp
   1ed7e:	4b1c      	ldr	r3, [pc, #112]	; (1edf0 <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1ed80:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ed84:	2303      	movs	r3, #3
   1ed86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ed8a:	4818      	ldr	r0, [pc, #96]	; (1edec <parse_xt3412+0xcc>)
   1ed8c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed90:	f014 fa64 	bl	3325c <z_log_msg_static_create.constprop.0>
   1ed94:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1ed96:	4638      	mov	r0, r7
   1ed98:	f014 f923 	bl	32fe2 <at_params_list_free>
	return err;
   1ed9c:	e7e1      	b.n	1ed62 <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   1ed9e:	462a      	mov	r2, r5
   1eda0:	2102      	movs	r1, #2
   1eda2:	4638      	mov	r0, r7
   1eda4:	f014 f9ea 	bl	3317c <at_params_int64_get>
	if (err) {
   1eda8:	4604      	mov	r4, r0
   1edaa:	b120      	cbz	r0, 1edb6 <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   1edac:	466d      	mov	r5, sp
   1edae:	b088      	sub	sp, #32
   1edb0:	466a      	mov	r2, sp
   1edb2:	4b10      	ldr	r3, [pc, #64]	; (1edf4 <parse_xt3412+0xd4>)
   1edb4:	e7e4      	b.n	1ed80 <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   1edb6:	4910      	ldr	r1, [pc, #64]	; (1edf8 <parse_xt3412+0xd8>)
   1edb8:	e9d5 3200 	ldrd	r3, r2, [r5]
   1edbc:	4299      	cmp	r1, r3
   1edbe:	f04f 0308 	mov.w	r3, #8
   1edc2:	4193      	sbcs	r3, r2
   1edc4:	d2e7      	bcs.n	1ed96 <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   1edc6:	4b0d      	ldr	r3, [pc, #52]	; (1edfc <parse_xt3412+0xdc>)
   1edc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1edcc:	61fb      	str	r3, [r7, #28]
   1edce:	2302      	movs	r3, #2
   1edd0:	4806      	ldr	r0, [pc, #24]	; (1edec <parse_xt3412+0xcc>)
   1edd2:	f107 0218 	add.w	r2, r7, #24
   1edd6:	61bb      	str	r3, [r7, #24]
		err = -EINVAL;
   1edd8:	f06f 0415 	mvn.w	r4, #21
		LOG_WRN("Parsed time parameter not within valid range");
   1eddc:	f014 fa3e 	bl	3325c <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   1ede0:	e7d9      	b.n	1ed96 <parse_xt3412+0x76>
		return -EINVAL;
   1ede2:	f06f 0415 	mvn.w	r4, #21
   1ede6:	e7bc      	b.n	1ed62 <parse_xt3412+0x42>
   1ede8:	0003d102 	.word	0x0003d102
   1edec:	000364c8 	.word	0x000364c8
   1edf0:	0003d3f8 	.word	0x0003d3f8
   1edf4:	0003d425 	.word	0x0003d425
   1edf8:	5099e000 	.word	0x5099e000
   1edfc:	0003d452 	.word	0x0003d452

0001ee00 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   1ee00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   1ee02:	b968      	cbnz	r0, 1ee20 <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   1ee04:	4b0f      	ldr	r3, [pc, #60]	; (1ee44 <neighborcell_count_get+0x44>)
   1ee06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ee0a:	9305      	str	r3, [sp, #20]
   1ee0c:	2302      	movs	r3, #2
   1ee0e:	480e      	ldr	r0, [pc, #56]	; (1ee48 <neighborcell_count_get+0x48>)
   1ee10:	aa04      	add	r2, sp, #16
   1ee12:	9304      	str	r3, [sp, #16]
   1ee14:	f014 fa22 	bl	3325c <z_log_msg_static_create.constprop.0>
		return 0;
   1ee18:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   1ee1a:	b007      	add	sp, #28
   1ee1c:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   1ee20:	2300      	movs	r3, #0
   1ee22:	3801      	subs	r0, #1
		if (*str == c) {
   1ee24:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ee28:	2a2c      	cmp	r2, #44	; 0x2c
   1ee2a:	d101      	bne.n	1ee30 <neighborcell_count_get+0x30>
			count++;
   1ee2c:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   1ee2e:	e7f9      	b.n	1ee24 <neighborcell_count_get+0x24>
   1ee30:	2a00      	cmp	r2, #0
   1ee32:	d1f7      	bne.n	1ee24 <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   1ee34:	2b0a      	cmp	r3, #10
   1ee36:	d9ef      	bls.n	1ee18 <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   1ee38:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   1ee3c:	2305      	movs	r3, #5
   1ee3e:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   1ee42:	e7ea      	b.n	1ee1a <neighborcell_count_get+0x1a>
   1ee44:	0003d47f 	.word	0x0003d47f
   1ee48:	000364c8 	.word	0x000364c8

0001ee4c <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   1ee4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1ee50:	230b      	movs	r3, #11
{
   1ee52:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1ee54:	2100      	movs	r1, #0
{
   1ee56:	4680      	mov	r8, r0
   1ee58:	b08c      	sub	sp, #48	; 0x30
   1ee5a:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1ee5c:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   1ee60:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1ee62:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   1ee66:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   1ee68:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1ee6c:	2b2c      	cmp	r3, #44	; 0x2c
   1ee6e:	d101      	bne.n	1ee74 <parse_ncellmeas+0x28>
			count++;
   1ee70:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   1ee72:	e7f9      	b.n	1ee68 <parse_ncellmeas+0x1c>
   1ee74:	2b00      	cmp	r3, #0
   1ee76:	d1f7      	bne.n	1ee68 <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   1ee78:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1ee7c:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   1ee80:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1ee82:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   1ee84:	f107 001c 	add.w	r0, r7, #28
   1ee88:	f014 f898 	bl	32fbc <at_params_list_init>
	if (err) {
   1ee8c:	4604      	mov	r4, r0
   1ee8e:	b198      	cbz	r0, 1eeb8 <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1ee90:	466d      	mov	r5, sp
   1ee92:	b088      	sub	sp, #32
   1ee94:	466a      	mov	r2, sp
   1ee96:	4bb5      	ldr	r3, [pc, #724]	; (1f16c <parse_ncellmeas+0x320>)
   1ee98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eea0:	2303      	movs	r3, #3
   1eea2:	48b3      	ldr	r0, [pc, #716]	; (1f170 <parse_ncellmeas+0x324>)
   1eea4:	f842 3f10 	str.w	r3, [r2, #16]!
   1eea8:	f014 f9d8 	bl	3325c <z_log_msg_static_create.constprop.0>
   1eeac:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1eeae:	4620      	mov	r0, r4
   1eeb0:	3730      	adds	r7, #48	; 0x30
   1eeb2:	46bd      	mov	sp, r7
   1eeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   1eeb8:	4601      	mov	r1, r0
   1eeba:	f107 021c 	add.w	r2, r7, #28
   1eebe:	4640      	mov	r0, r8
   1eec0:	f014 f879 	bl	32fb6 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1eec4:	4604      	mov	r4, r0
   1eec6:	b1a8      	cbz	r0, 1eef4 <parse_ncellmeas+0xa8>
   1eec8:	1dc3      	adds	r3, r0, #7
   1eeca:	d024      	beq.n	1ef16 <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1eecc:	466d      	mov	r5, sp
   1eece:	b088      	sub	sp, #32
   1eed0:	466a      	mov	r2, sp
   1eed2:	4ba8      	ldr	r3, [pc, #672]	; (1f174 <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   1eed4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1eed8:	2303      	movs	r3, #3
   1eeda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eede:	48a4      	ldr	r0, [pc, #656]	; (1f170 <parse_ncellmeas+0x324>)
   1eee0:	f842 3f10 	str.w	r3, [r2, #16]!
   1eee4:	f014 f9ba 	bl	3325c <z_log_msg_static_create.constprop.0>
   1eee8:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   1eeea:	f107 001c 	add.w	r0, r7, #28
   1eeee:	f014 f878 	bl	32fe2 <at_params_list_free>
	return err;
   1eef2:	e7dc      	b.n	1eeae <parse_ncellmeas+0x62>
	bool incomplete = false;
   1eef4:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   1eef6:	2100      	movs	r1, #0
   1eef8:	f107 0310 	add.w	r3, r7, #16
   1eefc:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1ef00:	f107 001c 	add.w	r0, r7, #28
   1ef04:	f014 f94f 	bl	331a6 <at_params_string_get>
	if (err) {
   1ef08:	4604      	mov	r4, r0
   1ef0a:	b130      	cbz	r0, 1ef1a <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1ef0c:	466d      	mov	r5, sp
   1ef0e:	b088      	sub	sp, #32
   1ef10:	466a      	mov	r2, sp
   1ef12:	4b99      	ldr	r3, [pc, #612]	; (1f178 <parse_ncellmeas+0x32c>)
   1ef14:	e7de      	b.n	1eed4 <parse_ncellmeas+0x88>
		incomplete = true;
   1ef16:	2601      	movs	r6, #1
   1ef18:	e7ed      	b.n	1eef6 <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1ef1a:	4a98      	ldr	r2, [pc, #608]	; (1f17c <parse_ncellmeas+0x330>)
   1ef1c:	6939      	ldr	r1, [r7, #16]
   1ef1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1ef22:	f7ff fcb3 	bl	1e88c <response_is_valid>
   1ef26:	2800      	cmp	r0, #0
   1ef28:	f000 80b9 	beq.w	1f09e <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   1ef2c:	2101      	movs	r1, #1
   1ef2e:	1d3a      	adds	r2, r7, #4
   1ef30:	f107 001c 	add.w	r0, r7, #28
   1ef34:	f014 f909 	bl	3314a <at_params_int_get>
	if (err) {
   1ef38:	4604      	mov	r4, r0
   1ef3a:	2800      	cmp	r0, #0
   1ef3c:	d1d5      	bne.n	1eeea <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   1ef3e:	687b      	ldr	r3, [r7, #4]
   1ef40:	2b00      	cmp	r3, #0
   1ef42:	f040 8110 	bne.w	1f166 <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   1ef46:	2102      	movs	r1, #2
   1ef48:	f107 0208 	add.w	r2, r7, #8
   1ef4c:	f107 001c 	add.w	r0, r7, #28
   1ef50:	f014 f9ad 	bl	332ae <string_param_to_int.constprop.0>
	if (err) {
   1ef54:	4604      	mov	r4, r0
   1ef56:	2800      	cmp	r0, #0
   1ef58:	d1c7      	bne.n	1eeea <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1ef5a:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   1ef5c:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1ef60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1ef64:	bfa4      	itt	ge
   1ef66:	f04f 33ff 	movge.w	r3, #4294967295
   1ef6a:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   1ef6c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1ef6e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   1ef70:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1ef72:	f107 0214 	add.w	r2, r7, #20
   1ef76:	f107 030c 	add.w	r3, r7, #12
   1ef7a:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   1ef7e:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   1ef82:	f014 f910 	bl	331a6 <at_params_string_get>
	if (err) {
   1ef86:	4604      	mov	r4, r0
   1ef88:	2800      	cmp	r0, #0
   1ef8a:	d1ae      	bne.n	1eeea <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   1ef8c:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1ef8e:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   1ef90:	3330      	adds	r3, #48	; 0x30
   1ef92:	443b      	add	r3, r7
   1ef94:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   1ef98:	1d2a      	adds	r2, r5, #4
   1ef9a:	f107 0017 	add.w	r0, r7, #23
   1ef9e:	f014 f960 	bl	33262 <string_to_int>
	if (err) {
   1efa2:	4604      	mov	r4, r0
   1efa4:	2800      	cmp	r0, #0
   1efa6:	d1a0      	bne.n	1eeea <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   1efa8:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   1efaa:	462a      	mov	r2, r5
   1efac:	210a      	movs	r1, #10
   1efae:	f107 0014 	add.w	r0, r7, #20
   1efb2:	f014 f956 	bl	33262 <string_to_int>
	if (err) {
   1efb6:	4604      	mov	r4, r0
   1efb8:	2800      	cmp	r0, #0
   1efba:	d196      	bne.n	1eeea <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   1efbc:	2104      	movs	r1, #4
   1efbe:	f107 0208 	add.w	r2, r7, #8
   1efc2:	f107 001c 	add.w	r0, r7, #28
   1efc6:	f014 f972 	bl	332ae <string_param_to_int.constprop.0>
	if (err) {
   1efca:	4604      	mov	r4, r0
   1efcc:	2800      	cmp	r0, #0
   1efce:	d18c      	bne.n	1eeea <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   1efd0:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1efd2:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   1efd4:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   1efd6:	f107 0208 	add.w	r2, r7, #8
   1efda:	f107 001c 	add.w	r0, r7, #28
   1efde:	f014 f8b4 	bl	3314a <at_params_int_get>
	if (err) {
   1efe2:	4604      	mov	r4, r0
   1efe4:	2800      	cmp	r0, #0
   1efe6:	d180      	bne.n	1eeea <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   1efe8:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1efea:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   1efec:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   1efee:	f105 0210 	add.w	r2, r5, #16
   1eff2:	f107 001c 	add.w	r0, r7, #28
   1eff6:	f014 f8a8 	bl	3314a <at_params_int_get>
	if (err) {
   1effa:	4604      	mov	r4, r0
   1effc:	2800      	cmp	r0, #0
   1effe:	f47f af74 	bne.w	1eeea <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   1f002:	4649      	mov	r1, r9
   1f004:	f105 0228 	add.w	r2, r5, #40	; 0x28
   1f008:	f107 001c 	add.w	r0, r7, #28
   1f00c:	f014 f867 	bl	330de <at_params_short_get>
	if (err) {
   1f010:	4604      	mov	r4, r0
   1f012:	2800      	cmp	r0, #0
   1f014:	f47f af69 	bne.w	1eeea <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   1f018:	2108      	movs	r1, #8
   1f01a:	f107 0208 	add.w	r2, r7, #8
   1f01e:	f107 001c 	add.w	r0, r7, #28
   1f022:	f014 f892 	bl	3314a <at_params_int_get>
	if (err) {
   1f026:	4604      	mov	r4, r0
   1f028:	2800      	cmp	r0, #0
   1f02a:	f47f af5e 	bne.w	1eeea <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   1f02e:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1f030:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   1f032:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   1f034:	f107 0208 	add.w	r2, r7, #8
   1f038:	f107 001c 	add.w	r0, r7, #28
   1f03c:	f014 f885 	bl	3314a <at_params_int_get>
	if (err) {
   1f040:	4604      	mov	r4, r0
   1f042:	2800      	cmp	r0, #0
   1f044:	f47f af51 	bne.w	1eeea <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   1f048:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1f04a:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   1f04c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   1f04e:	f105 0220 	add.w	r2, r5, #32
   1f052:	f107 001c 	add.w	r0, r7, #28
   1f056:	f014 f891 	bl	3317c <at_params_int64_get>
	if (err) {
   1f05a:	4604      	mov	r4, r0
   1f05c:	2800      	cmp	r0, #0
   1f05e:	f47f af44 	bne.w	1eeea <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   1f062:	4640      	mov	r0, r8
   1f064:	f7ff fecc 	bl	1ee00 <neighborcell_count_get>
   1f068:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   1f06c:	b2c0      	uxtb	r0, r0
   1f06e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   1f072:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   1f076:	f107 001c 	add.w	r0, r7, #28
   1f07a:	f014 f8b7 	bl	331ec <at_params_valid_count_get>
   1f07e:	4284      	cmp	r4, r0
   1f080:	d20f      	bcs.n	1f0a2 <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   1f082:	4621      	mov	r1, r4
   1f084:	f105 0218 	add.w	r2, r5, #24
   1f088:	f107 001c 	add.w	r0, r7, #28
   1f08c:	f014 f876 	bl	3317c <at_params_int64_get>
		if (err) {
   1f090:	4604      	mov	r4, r0
   1f092:	2800      	cmp	r0, #0
   1f094:	f47f af29 	bne.w	1eeea <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1f098:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1f09c:	b933      	cbnz	r3, 1f0ac <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   1f09e:	2400      	movs	r4, #0
   1f0a0:	e723      	b.n	1eeea <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   1f0a2:	2200      	movs	r2, #0
   1f0a4:	2300      	movs	r3, #0
   1f0a6:	e9c5 2306 	strd	r2, r3, [r5, #24]
   1f0aa:	e7f5      	b.n	1f098 <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   1f0ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1f0ae:	2b00      	cmp	r3, #0
   1f0b0:	d0f5      	beq.n	1f09e <parse_ncellmeas+0x252>
   1f0b2:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1f0b6:	f04f 0900 	mov.w	r9, #0
   1f0ba:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1f0be:	4599      	cmp	r9, r3
   1f0c0:	d304      	bcc.n	1f0cc <parse_ncellmeas+0x280>
	if (incomplete) {
   1f0c2:	2e00      	cmp	r6, #0
   1f0c4:	d0eb      	beq.n	1f09e <parse_ncellmeas+0x252>
		err = -E2BIG;
   1f0c6:	f06f 0406 	mvn.w	r4, #6
   1f0ca:	e70e      	b.n	1eeea <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   1f0cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1f0ce:	f1a8 0104 	sub.w	r1, r8, #4
   1f0d2:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   1f0d6:	f107 001c 	add.w	r0, r7, #28
   1f0da:	f014 f836 	bl	3314a <at_params_int_get>
		if (err) {
   1f0de:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   1f0e2:	4604      	mov	r4, r0
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	f47f af00 	bne.w	1eeea <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   1f0ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   1f0ec:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   1f0f0:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   1f0f2:	3208      	adds	r2, #8
   1f0f4:	f107 001c 	add.w	r0, r7, #28
   1f0f8:	f013 fff1 	bl	330de <at_params_short_get>
		if (err) {
   1f0fc:	4604      	mov	r4, r0
   1f0fe:	2800      	cmp	r0, #0
   1f100:	f47f aef3 	bne.w	1eeea <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   1f104:	f107 0208 	add.w	r2, r7, #8
   1f108:	f1a8 0102 	sub.w	r1, r8, #2
   1f10c:	f107 001c 	add.w	r0, r7, #28
   1f110:	f014 f81b 	bl	3314a <at_params_int_get>
		if (err) {
   1f114:	4604      	mov	r4, r0
   1f116:	2800      	cmp	r0, #0
   1f118:	f47f aee7 	bne.w	1eeea <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   1f11c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1f11e:	68ba      	ldr	r2, [r7, #8]
   1f120:	4453      	add	r3, sl
   1f122:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   1f124:	f108 31ff 	add.w	r1, r8, #4294967295
   1f128:	f107 0208 	add.w	r2, r7, #8
   1f12c:	f107 001c 	add.w	r0, r7, #28
   1f130:	f014 f80b 	bl	3314a <at_params_int_get>
		if (err) {
   1f134:	4604      	mov	r4, r0
   1f136:	2800      	cmp	r0, #0
   1f138:	f47f aed7 	bne.w	1eeea <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   1f13c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1f13e:	68ba      	ldr	r2, [r7, #8]
   1f140:	4453      	add	r3, sl
   1f142:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   1f144:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   1f146:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   1f148:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   1f14a:	3204      	adds	r2, #4
   1f14c:	f107 001c 	add.w	r0, r7, #28
   1f150:	f013 fffb 	bl	3314a <at_params_int_get>
		if (err) {
   1f154:	f108 0805 	add.w	r8, r8, #5
   1f158:	4604      	mov	r4, r0
   1f15a:	2800      	cmp	r0, #0
   1f15c:	f47f aec5 	bne.w	1eeea <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   1f160:	f109 0901 	add.w	r9, r9, #1
   1f164:	e7a9      	b.n	1f0ba <parse_ncellmeas+0x26e>
		err = 1;
   1f166:	2401      	movs	r4, #1
   1f168:	e6bf      	b.n	1eeea <parse_ncellmeas+0x9e>
   1f16a:	bf00      	nop
   1f16c:	0003d102 	.word	0x0003d102
   1f170:	000364c8 	.word	0x000364c8
   1f174:	0003d4a9 	.word	0x0003d4a9
   1f178:	0003d35a 	.word	0x0003d35a
   1f17c:	0003d063 	.word	0x0003d063

0001f180 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1f180:	2300      	movs	r3, #0
{
   1f182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f186:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   1f188:	220b      	movs	r2, #11
{
   1f18a:	460d      	mov	r5, r1
	uint32_t count = 0;
   1f18c:	4699      	mov	r9, r3
{
   1f18e:	b0a5      	sub	sp, #148	; 0x94
   1f190:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1f192:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   1f196:	62ba      	str	r2, [r7, #40]	; 0x28
{
   1f198:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   1f19a:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   1f19e:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   1f1a0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1f1a4:	2b2c      	cmp	r3, #44	; 0x2c
   1f1a6:	d102      	bne.n	1f1ae <parse_ncellmeas_gci+0x2e>
			count++;
   1f1a8:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   1f1ac:	e7f8      	b.n	1f1a0 <parse_ncellmeas_gci+0x20>
   1f1ae:	2b00      	cmp	r3, #0
   1f1b0:	d1f6      	bne.n	1f1a0 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f1b2:	f04f 32ff 	mov.w	r2, #4294967295
   1f1b6:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   1f1b8:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   1f1bc:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   1f1c0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f1c4:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   1f1c6:	68f9      	ldr	r1, [r7, #12]
   1f1c8:	7849      	ldrb	r1, [r1, #1]
   1f1ca:	4299      	cmp	r1, r3
   1f1cc:	d812      	bhi.n	1f1f4 <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   1f1ce:	4641      	mov	r1, r8
   1f1d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f1d4:	f013 fef2 	bl	32fbc <at_params_list_init>
	if (err) {
   1f1d8:	4604      	mov	r4, r0
   1f1da:	b1a8      	cbz	r0, 1f208 <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   1f1dc:	466d      	mov	r5, sp
   1f1de:	b088      	sub	sp, #32
   1f1e0:	466a      	mov	r2, sp
   1f1e2:	4bb1      	ldr	r3, [pc, #708]	; (1f4a8 <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   1f1e4:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1f1e6:	2303      	movs	r3, #3
   1f1e8:	6194      	str	r4, [r2, #24]
   1f1ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f1ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1f1f2:	e0a7      	b.n	1f344 <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f1f4:	fb04 f003 	mul.w	r0, r4, r3
   1f1f8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   1f1fa:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f1fc:	4401      	add	r1, r0
   1f1fe:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   1f200:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   1f202:	4401      	add	r1, r0
   1f204:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   1f206:	e7de      	b.n	1f1c6 <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1f208:	4601      	mov	r1, r0
   1f20a:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1f20e:	4628      	mov	r0, r5
   1f210:	f013 fed1 	bl	32fb6 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   1f214:	4604      	mov	r4, r0
   1f216:	b360      	cbz	r0, 1f272 <parse_ncellmeas_gci+0xf2>
   1f218:	1dc3      	adds	r3, r0, #7
   1f21a:	d004      	beq.n	1f226 <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   1f21c:	466d      	mov	r5, sp
   1f21e:	b088      	sub	sp, #32
   1f220:	466a      	mov	r2, sp
   1f222:	4ba2      	ldr	r3, [pc, #648]	; (1f4ac <parse_ncellmeas_gci+0x32c>)
   1f224:	e7de      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   1f226:	46ea      	mov	sl, sp
   1f228:	b08a      	sub	sp, #40	; 0x28
   1f22a:	466a      	mov	r2, sp
   1f22c:	4ba0      	ldr	r3, [pc, #640]	; (1f4b0 <parse_ncellmeas_gci+0x330>)
   1f22e:	e9c2 0507 	strd	r0, r5, [r2, #28]
   1f232:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1f236:	f240 4302 	movw	r3, #1026	; 0x402
   1f23a:	8493      	strh	r3, [r2, #36]	; 0x24
   1f23c:	4b9d      	ldr	r3, [pc, #628]	; (1f4b4 <parse_ncellmeas_gci+0x334>)
   1f23e:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1f242:	f842 3f10 	str.w	r3, [r2, #16]!
   1f246:	489c      	ldr	r0, [pc, #624]	; (1f4b8 <parse_ncellmeas_gci+0x338>)
   1f248:	f014 f808 	bl	3325c <z_log_msg_static_create.constprop.0>
		incomplete = true;
   1f24c:	2301      	movs	r3, #1
   1f24e:	46d5      	mov	sp, sl
   1f250:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   1f252:	2100      	movs	r1, #0
   1f254:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f258:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1f25c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f260:	f013 ffa1 	bl	331a6 <at_params_string_get>
	if (err) {
   1f264:	4604      	mov	r4, r0
   1f266:	b130      	cbz	r0, 1f276 <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   1f268:	466d      	mov	r5, sp
   1f26a:	b088      	sub	sp, #32
   1f26c:	466a      	mov	r2, sp
   1f26e:	4b93      	ldr	r3, [pc, #588]	; (1f4bc <parse_ncellmeas_gci+0x33c>)
   1f270:	e7b8      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   1f272:	6178      	str	r0, [r7, #20]
   1f274:	e7ed      	b.n	1f252 <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1f276:	4a92      	ldr	r2, [pc, #584]	; (1f4c0 <parse_ncellmeas_gci+0x340>)
   1f278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1f27a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1f27e:	f7ff fb05 	bl	1e88c <response_is_valid>
   1f282:	6138      	str	r0, [r7, #16]
   1f284:	b9a0      	cbnz	r0, 1f2b0 <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   1f286:	4b8f      	ldr	r3, [pc, #572]	; (1f4c4 <parse_ncellmeas_gci+0x344>)
   1f288:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f28c:	677b      	str	r3, [r7, #116]	; 0x74
   1f28e:	2302      	movs	r3, #2
   1f290:	4889      	ldr	r0, [pc, #548]	; (1f4b8 <parse_ncellmeas_gci+0x338>)
   1f292:	673b      	str	r3, [r7, #112]	; 0x70
   1f294:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f298:	f013 ffe0 	bl	3325c <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   1f29c:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   1f29e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f2a2:	f013 fe9e 	bl	32fe2 <at_params_list_free>

	return err;
}
   1f2a6:	4620      	mov	r0, r4
   1f2a8:	3794      	adds	r7, #148	; 0x94
   1f2aa:	46bd      	mov	sp, r7
   1f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   1f2b0:	2101      	movs	r1, #1
   1f2b2:	f107 021c 	add.w	r2, r7, #28
   1f2b6:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f2ba:	f013 ff46 	bl	3314a <at_params_int_get>
	if (err) {
   1f2be:	4604      	mov	r4, r0
   1f2c0:	2800      	cmp	r0, #0
   1f2c2:	d1ec      	bne.n	1f29e <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   1f2c4:	69fc      	ldr	r4, [r7, #28]
   1f2c6:	2c01      	cmp	r4, #1
   1f2c8:	d0e9      	beq.n	1f29e <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   1f2ca:	2c02      	cmp	r4, #2
   1f2cc:	d109      	bne.n	1f2e2 <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   1f2ce:	4b7e      	ldr	r3, [pc, #504]	; (1f4c8 <parse_ncellmeas_gci+0x348>)
   1f2d0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f2d4:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   1f2d8:	4877      	ldr	r0, [pc, #476]	; (1f4b8 <parse_ncellmeas_gci+0x338>)
   1f2da:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f2de:	f013 ffbd 	bl	3325c <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   1f2e2:	f04f 0a00 	mov.w	sl, #0
   1f2e6:	2501      	movs	r5, #1
   1f2e8:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   1f2ea:	f1a9 030a 	sub.w	r3, r9, #10
   1f2ee:	607b      	str	r3, [r7, #4]
   1f2f0:	687b      	ldr	r3, [r7, #4]
   1f2f2:	42ab      	cmp	r3, r5
   1f2f4:	d903      	bls.n	1f2fe <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   1f2f6:	68fb      	ldr	r3, [r7, #12]
   1f2f8:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   1f2fa:	4543      	cmp	r3, r8
   1f2fc:	d80a      	bhi.n	1f314 <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   1f2fe:	697b      	ldr	r3, [r7, #20]
   1f300:	2b00      	cmp	r3, #0
   1f302:	d0cb      	beq.n	1f29c <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1f304:	466d      	mov	r5, sp
   1f306:	b088      	sub	sp, #32
   1f308:	466a      	mov	r2, sp
   1f30a:	4b70      	ldr	r3, [pc, #448]	; (1f4cc <parse_ncellmeas_gci+0x34c>)
   1f30c:	f06f 0406 	mvn.w	r4, #6
   1f310:	6153      	str	r3, [r2, #20]
   1f312:	e768      	b.n	1f1e6 <parse_ncellmeas_gci+0x66>
		curr_index++;
   1f314:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   1f318:	4649      	mov	r1, r9
   1f31a:	f107 0220 	add.w	r2, r7, #32
   1f31e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f322:	f013 ffc4 	bl	332ae <string_param_to_int.constprop.0>
		if (err) {
   1f326:	4604      	mov	r4, r0
   1f328:	b188      	cbz	r0, 1f34e <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   1f32a:	466d      	mov	r5, sp
   1f32c:	b08a      	sub	sp, #40	; 0x28
   1f32e:	466a      	mov	r2, sp
   1f330:	4b67      	ldr	r3, [pc, #412]	; (1f4d0 <parse_ncellmeas_gci+0x350>)
   1f332:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1f336:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f33a:	2305      	movs	r3, #5
   1f33c:	e9c2 8007 	strd	r8, r0, [r2, #28]
   1f340:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   1f344:	485c      	ldr	r0, [pc, #368]	; (1f4b8 <parse_ncellmeas_gci+0x338>)
   1f346:	f013 ff89 	bl	3325c <z_log_msg_static_create.constprop.0>
   1f34a:	46ad      	mov	sp, r5
   1f34c:	e7a7      	b.n	1f29e <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   1f34e:	6a3b      	ldr	r3, [r7, #32]
   1f350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1f354:	db11      	blt.n	1f37a <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   1f356:	466c      	mov	r4, sp
   1f358:	b088      	sub	sp, #32
   1f35a:	466a      	mov	r2, sp
   1f35c:	495d      	ldr	r1, [pc, #372]	; (1f4d4 <parse_ncellmeas_gci+0x354>)
   1f35e:	4856      	ldr	r0, [pc, #344]	; (1f4b8 <parse_ncellmeas_gci+0x338>)
   1f360:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1f364:	2303      	movs	r3, #3
   1f366:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f36a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f36e:	f013 ff75 	bl	3325c <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   1f372:	f04f 33ff 	mov.w	r3, #4294967295
   1f376:	46a5      	mov	sp, r4
   1f378:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   1f37a:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   1f37c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   1f380:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   1f382:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   1f384:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   1f386:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   1f388:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f38c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1f390:	f013 ff09 	bl	331a6 <at_params_string_get>
		if (err) {
   1f394:	4604      	mov	r4, r0
   1f396:	b120      	cbz	r0, 1f3a2 <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   1f398:	466d      	mov	r5, sp
   1f39a:	b088      	sub	sp, #32
   1f39c:	466a      	mov	r2, sp
   1f39e:	4b4e      	ldr	r3, [pc, #312]	; (1f4d8 <parse_ncellmeas_gci+0x358>)
   1f3a0:	e720      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   1f3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f3a4:	f107 0218 	add.w	r2, r7, #24
   1f3a8:	3378      	adds	r3, #120	; 0x78
   1f3aa:	4413      	add	r3, r2
   1f3ac:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   1f3b0:	210a      	movs	r1, #10
   1f3b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1f3b6:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   1f3ba:	f013 ff52 	bl	33262 <string_to_int>
		if (err) {
   1f3be:	4604      	mov	r4, r0
   1f3c0:	b120      	cbz	r0, 1f3cc <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   1f3c2:	466d      	mov	r5, sp
   1f3c4:	b088      	sub	sp, #32
   1f3c6:	466a      	mov	r2, sp
   1f3c8:	4b44      	ldr	r3, [pc, #272]	; (1f4dc <parse_ncellmeas_gci+0x35c>)
   1f3ca:	e70b      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   1f3cc:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   1f3d0:	210a      	movs	r1, #10
   1f3d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1f3d6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1f3da:	f013 ff42 	bl	33262 <string_to_int>
		if (err) {
   1f3de:	4604      	mov	r4, r0
   1f3e0:	2800      	cmp	r0, #0
   1f3e2:	d1ee      	bne.n	1f3c2 <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   1f3e4:	f107 0220 	add.w	r2, r7, #32
   1f3e8:	1ce9      	adds	r1, r5, #3
   1f3ea:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f3ee:	f013 ff5e 	bl	332ae <string_param_to_int.constprop.0>
		if (err) {
   1f3f2:	4604      	mov	r4, r0
   1f3f4:	b160      	cbz	r0, 1f410 <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   1f3f6:	466d      	mov	r5, sp
   1f3f8:	b088      	sub	sp, #32
   1f3fa:	466a      	mov	r2, sp
   1f3fc:	4b38      	ldr	r3, [pc, #224]	; (1f4e0 <parse_ncellmeas_gci+0x360>)
   1f3fe:	61d0      	str	r0, [r2, #28]
   1f400:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1f404:	2304      	movs	r3, #4
   1f406:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f40a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f40e:	e799      	b.n	1f344 <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   1f410:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   1f412:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   1f416:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   1f418:	1d29      	adds	r1, r5, #4
   1f41a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f41e:	f013 fe94 	bl	3314a <at_params_int_get>
		if (err) {
   1f422:	4604      	mov	r4, r0
   1f424:	b120      	cbz	r0, 1f430 <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   1f426:	466d      	mov	r5, sp
   1f428:	b088      	sub	sp, #32
   1f42a:	466a      	mov	r2, sp
   1f42c:	4b2d      	ldr	r3, [pc, #180]	; (1f4e4 <parse_ncellmeas_gci+0x364>)
   1f42e:	e6d9      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   1f430:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   1f432:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   1f436:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   1f43a:	1d69      	adds	r1, r5, #5
   1f43c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f440:	f013 fe9c 	bl	3317c <at_params_int64_get>
		if (err) {
   1f444:	4604      	mov	r4, r0
   1f446:	b120      	cbz	r0, 1f452 <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   1f448:	466d      	mov	r5, sp
   1f44a:	b088      	sub	sp, #32
   1f44c:	466a      	mov	r2, sp
   1f44e:	4b26      	ldr	r3, [pc, #152]	; (1f4e8 <parse_ncellmeas_gci+0x368>)
   1f450:	e6c8      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   1f452:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1f456:	1da9      	adds	r1, r5, #6
   1f458:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f45c:	f013 fe75 	bl	3314a <at_params_int_get>
		if (err) {
   1f460:	4604      	mov	r4, r0
   1f462:	b120      	cbz	r0, 1f46e <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   1f464:	466d      	mov	r5, sp
   1f466:	b088      	sub	sp, #32
   1f468:	466a      	mov	r2, sp
   1f46a:	4b20      	ldr	r3, [pc, #128]	; (1f4ec <parse_ncellmeas_gci+0x36c>)
   1f46c:	e6ba      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   1f46e:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1f472:	1de9      	adds	r1, r5, #7
   1f474:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f478:	f013 fe31 	bl	330de <at_params_short_get>
		if (err) {
   1f47c:	4604      	mov	r4, r0
   1f47e:	b120      	cbz	r0, 1f48a <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   1f480:	466d      	mov	r5, sp
   1f482:	b088      	sub	sp, #32
   1f484:	466a      	mov	r2, sp
   1f486:	4b1a      	ldr	r3, [pc, #104]	; (1f4f0 <parse_ncellmeas_gci+0x370>)
   1f488:	e6ac      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   1f48a:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   1f48e:	f105 0108 	add.w	r1, r5, #8
   1f492:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f496:	f013 fe22 	bl	330de <at_params_short_get>
		if (err) {
   1f49a:	4604      	mov	r4, r0
   1f49c:	b360      	cbz	r0, 1f4f8 <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   1f49e:	466d      	mov	r5, sp
   1f4a0:	b088      	sub	sp, #32
   1f4a2:	466a      	mov	r2, sp
   1f4a4:	4b13      	ldr	r3, [pc, #76]	; (1f4f4 <parse_ncellmeas_gci+0x374>)
   1f4a6:	e69d      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
   1f4a8:	0003d4db 	.word	0x0003d4db
   1f4ac:	0003d4a9 	.word	0x0003d4a9
   1f4b0:	0003d512 	.word	0x0003d512
   1f4b4:	01000005 	.word	0x01000005
   1f4b8:	000364c8 	.word	0x000364c8
   1f4bc:	0003d35a 	.word	0x0003d35a
   1f4c0:	0003d063 	.word	0x0003d063
   1f4c4:	0003d54f 	.word	0x0003d54f
   1f4c8:	0003d56e 	.word	0x0003d56e
   1f4cc:	0003d926 	.word	0x0003d926
   1f4d0:	0003d5a5 	.word	0x0003d5a5
   1f4d4:	0003d5d7 	.word	0x0003d5d7
   1f4d8:	0003d61a 	.word	0x0003d61a
   1f4dc:	0003d63a 	.word	0x0003d63a
   1f4e0:	0003d653 	.word	0x0003d653
   1f4e4:	0003d689 	.word	0x0003d689
   1f4e8:	0003d6b3 	.word	0x0003d6b3
   1f4ec:	0003d6e7 	.word	0x0003d6e7
   1f4f0:	0003d709 	.word	0x0003d709
   1f4f4:	0003d731 	.word	0x0003d731
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   1f4f8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   1f4fc:	f105 0109 	add.w	r1, r5, #9
   1f500:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f504:	f013 fdeb 	bl	330de <at_params_short_get>
		if (err) {
   1f508:	4604      	mov	r4, r0
   1f50a:	b120      	cbz	r0, 1f516 <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   1f50c:	466d      	mov	r5, sp
   1f50e:	b088      	sub	sp, #32
   1f510:	466a      	mov	r2, sp
   1f512:	4b75      	ldr	r3, [pc, #468]	; (1f6e8 <parse_ncellmeas_gci+0x568>)
   1f514:	e666      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   1f516:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1f51a:	f105 010a 	add.w	r1, r5, #10
   1f51e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f522:	f013 fe2b 	bl	3317c <at_params_int64_get>
		if (err) {
   1f526:	4604      	mov	r4, r0
   1f528:	b120      	cbz	r0, 1f534 <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   1f52a:	466d      	mov	r5, sp
   1f52c:	b088      	sub	sp, #32
   1f52e:	466a      	mov	r2, sp
   1f530:	4b6e      	ldr	r3, [pc, #440]	; (1f6ec <parse_ncellmeas_gci+0x56c>)
   1f532:	e657      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   1f534:	f107 021a 	add.w	r2, r7, #26
   1f538:	f105 010b 	add.w	r1, r5, #11
   1f53c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f540:	f013 fdcd 	bl	330de <at_params_short_get>
		if (err) {
   1f544:	4604      	mov	r4, r0
   1f546:	b120      	cbz	r0, 1f552 <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   1f548:	466d      	mov	r5, sp
   1f54a:	b088      	sub	sp, #32
   1f54c:	466a      	mov	r2, sp
   1f54e:	4b68      	ldr	r3, [pc, #416]	; (1f6f0 <parse_ncellmeas_gci+0x570>)
   1f550:	e648      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		curr_index++;
   1f552:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   1f554:	4629      	mov	r1, r5
   1f556:	f107 021a 	add.w	r2, r7, #26
   1f55a:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   1f55e:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   1f562:	f013 fdbc 	bl	330de <at_params_short_get>
		if (err) {
   1f566:	4604      	mov	r4, r0
   1f568:	b120      	cbz	r0, 1f574 <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   1f56a:	466d      	mov	r5, sp
   1f56c:	b088      	sub	sp, #32
   1f56e:	466a      	mov	r2, sp
   1f570:	4b60      	ldr	r3, [pc, #384]	; (1f6f4 <parse_ncellmeas_gci+0x574>)
   1f572:	e637      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   1f574:	f1b9 0f00 	cmp.w	r9, #0
   1f578:	f000 809e 	beq.w	1f6b8 <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   1f57c:	46b4      	mov	ip, r6
   1f57e:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   1f582:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1f586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f58a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1f58e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1f592:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   1f596:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   1f59a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   1f59e:	f1b9 0f00 	cmp.w	r9, #0
   1f5a2:	d02c      	beq.n	1f5fe <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   1f5a4:	f1b9 0f0a 	cmp.w	r9, #10
   1f5a8:	d924      	bls.n	1f5f4 <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   1f5aa:	46e9      	mov	r9, sp
   1f5ac:	b088      	sub	sp, #32
   1f5ae:	466a      	mov	r2, sp
   1f5b0:	4b51      	ldr	r3, [pc, #324]	; (1f6f8 <parse_ncellmeas_gci+0x578>)
   1f5b2:	240a      	movs	r4, #10
   1f5b4:	6153      	str	r3, [r2, #20]
   1f5b6:	2303      	movs	r3, #3
   1f5b8:	6194      	str	r4, [r2, #24]
   1f5ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f5be:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5c2:	484e      	ldr	r0, [pc, #312]	; (1f6fc <parse_ncellmeas_gci+0x57c>)
   1f5c4:	f013 fe4a 	bl	3325c <z_log_msg_static_create.constprop.0>
   1f5c8:	46cd      	mov	sp, r9
					incomplete = true;
   1f5ca:	693b      	ldr	r3, [r7, #16]
   1f5cc:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   1f5ce:	2110      	movs	r1, #16
   1f5d0:	4620      	mov	r0, r4
   1f5d2:	f015 fcdb 	bl	34f8c <k_calloc>
				if (ncells == NULL) {
   1f5d6:	b978      	cbnz	r0, 1f5f8 <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   1f5d8:	4b49      	ldr	r3, [pc, #292]	; (1f700 <parse_ncellmeas_gci+0x580>)
   1f5da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f5de:	65fb      	str	r3, [r7, #92]	; 0x5c
   1f5e0:	2302      	movs	r3, #2
   1f5e2:	4846      	ldr	r0, [pc, #280]	; (1f6fc <parse_ncellmeas_gci+0x57c>)
   1f5e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1f5e8:	65bb      	str	r3, [r7, #88]	; 0x58
   1f5ea:	f013 fe37 	bl	3325c <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   1f5ee:	f108 0801 	add.w	r8, r8, #1
   1f5f2:	e67d      	b.n	1f2f0 <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   1f5f4:	464c      	mov	r4, r9
   1f5f6:	e7ea      	b.n	1f5ce <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   1f5f8:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   1f5fa:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   1f5fe:	f04f 0900 	mov.w	r9, #0
   1f602:	60bc      	str	r4, [r7, #8]
   1f604:	68bb      	ldr	r3, [r7, #8]
   1f606:	454b      	cmp	r3, r9
   1f608:	d0f1      	beq.n	1f5ee <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   1f60a:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   1f60c:	1c69      	adds	r1, r5, #1
   1f60e:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   1f612:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f616:	f013 fd98 	bl	3314a <at_params_int_get>
				if (err) {
   1f61a:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   1f61e:	4604      	mov	r4, r0
   1f620:	b120      	cbz	r0, 1f62c <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   1f622:	466d      	mov	r5, sp
   1f624:	b088      	sub	sp, #32
   1f626:	466a      	mov	r2, sp
   1f628:	4b36      	ldr	r3, [pc, #216]	; (1f704 <parse_ncellmeas_gci+0x584>)
   1f62a:	e5db      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   1f62c:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   1f62e:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   1f630:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   1f632:	3208      	adds	r2, #8
   1f634:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f638:	f013 fd51 	bl	330de <at_params_short_get>
				if (err) {
   1f63c:	4604      	mov	r4, r0
   1f63e:	b120      	cbz	r0, 1f64a <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   1f640:	466d      	mov	r5, sp
   1f642:	b088      	sub	sp, #32
   1f644:	466a      	mov	r2, sp
   1f646:	4b30      	ldr	r3, [pc, #192]	; (1f708 <parse_ncellmeas_gci+0x588>)
   1f648:	e5cc      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   1f64a:	f107 0220 	add.w	r2, r7, #32
   1f64e:	1ce9      	adds	r1, r5, #3
   1f650:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f654:	f013 fd79 	bl	3314a <at_params_int_get>
				if (err) {
   1f658:	4604      	mov	r4, r0
   1f65a:	b120      	cbz	r0, 1f666 <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   1f65c:	466d      	mov	r5, sp
   1f65e:	b088      	sub	sp, #32
   1f660:	466a      	mov	r2, sp
   1f662:	4b2a      	ldr	r3, [pc, #168]	; (1f70c <parse_ncellmeas_gci+0x58c>)
   1f664:	e5be      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   1f666:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1f668:	6a3a      	ldr	r2, [r7, #32]
   1f66a:	445b      	add	r3, fp
   1f66c:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   1f66e:	1d29      	adds	r1, r5, #4
   1f670:	f107 0220 	add.w	r2, r7, #32
   1f674:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f678:	f013 fd67 	bl	3314a <at_params_int_get>
				if (err) {
   1f67c:	4604      	mov	r4, r0
   1f67e:	b120      	cbz	r0, 1f68a <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   1f680:	466d      	mov	r5, sp
   1f682:	b088      	sub	sp, #32
   1f684:	466a      	mov	r2, sp
   1f686:	4b22      	ldr	r3, [pc, #136]	; (1f710 <parse_ncellmeas_gci+0x590>)
   1f688:	e5ac      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   1f68a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1f68c:	6a3a      	ldr	r2, [r7, #32]
   1f68e:	445b      	add	r3, fp
   1f690:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   1f692:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   1f694:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   1f696:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   1f698:	4629      	mov	r1, r5
   1f69a:	3204      	adds	r2, #4
   1f69c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1f6a0:	f013 fd53 	bl	3314a <at_params_int_get>
				if (err) {
   1f6a4:	4604      	mov	r4, r0
   1f6a6:	b120      	cbz	r0, 1f6b2 <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   1f6a8:	466d      	mov	r5, sp
   1f6aa:	b088      	sub	sp, #32
   1f6ac:	466a      	mov	r2, sp
   1f6ae:	4b19      	ldr	r3, [pc, #100]	; (1f714 <parse_ncellmeas_gci+0x594>)
   1f6b0:	e598      	b.n	1f1e4 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   1f6b2:	f109 0901 	add.w	r9, r9, #1
   1f6b6:	e7a5      	b.n	1f604 <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   1f6b8:	2330      	movs	r3, #48	; 0x30
   1f6ba:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   1f6bc:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   1f6c0:	fb03 440a 	mla	r4, r3, sl, r4
   1f6c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f6c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f6ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1f6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f6d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1f6d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   1f6d8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   1f6dc:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   1f6e0:	3301      	adds	r3, #1
   1f6e2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   1f6e6:	e782      	b.n	1f5ee <parse_ncellmeas_gci+0x46e>
   1f6e8:	0003d751 	.word	0x0003d751
   1f6ec:	0003d771 	.word	0x0003d771
   1f6f0:	0003d796 	.word	0x0003d796
   1f6f4:	0003d7b9 	.word	0x0003d7b9
   1f6f8:	0003d7e3 	.word	0x0003d7e3
   1f6fc:	000364c8 	.word	0x000364c8
   1f700:	0003d83b 	.word	0x0003d83b
   1f704:	0003d86f 	.word	0x0003d86f
   1f708:	0003d893 	.word	0x0003d893
   1f70c:	0003d8bd 	.word	0x0003d8bd
   1f710:	0003d8df 	.word	0x0003d8df
   1f714:	0003d901 	.word	0x0003d901

0001f718 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   1f718:	2300      	movs	r3, #0
{
   1f71a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f71c:	b085      	sub	sp, #20
   1f71e:	af00      	add	r7, sp, #0
   1f720:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   1f722:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   1f724:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   1f728:	2900      	cmp	r1, #0
   1f72a:	d062      	beq.n	1f7f2 <parse_xmodemsleep+0xda>
   1f72c:	2800      	cmp	r0, #0
   1f72e:	d060      	beq.n	1f7f2 <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   1f730:	2104      	movs	r1, #4
   1f732:	f107 0008 	add.w	r0, r7, #8
   1f736:	f013 fc41 	bl	32fbc <at_params_list_init>
	if (err) {
   1f73a:	4604      	mov	r4, r0
   1f73c:	b190      	cbz	r0, 1f764 <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1f73e:	466d      	mov	r5, sp
   1f740:	b088      	sub	sp, #32
   1f742:	466a      	mov	r2, sp
   1f744:	4b2c      	ldr	r3, [pc, #176]	; (1f7f8 <parse_xmodemsleep+0xe0>)
   1f746:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f74a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f74e:	2303      	movs	r3, #3
   1f750:	482a      	ldr	r0, [pc, #168]	; (1f7fc <parse_xmodemsleep+0xe4>)
   1f752:	f842 3f10 	str.w	r3, [r2, #16]!
   1f756:	f013 fd81 	bl	3325c <z_log_msg_static_create.constprop.0>
   1f75a:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   1f75c:	4620      	mov	r0, r4
   1f75e:	3714      	adds	r7, #20
   1f760:	46bd      	mov	sp, r7
   1f762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   1f764:	4601      	mov	r1, r0
   1f766:	f107 0208 	add.w	r2, r7, #8
   1f76a:	4630      	mov	r0, r6
   1f76c:	f013 fc23 	bl	32fb6 <at_parser_params_from_str>
	if (err) {
   1f770:	4604      	mov	r4, r0
   1f772:	b178      	cbz	r0, 1f794 <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   1f774:	466d      	mov	r5, sp
   1f776:	b088      	sub	sp, #32
   1f778:	466a      	mov	r2, sp
   1f77a:	4b21      	ldr	r3, [pc, #132]	; (1f800 <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1f77c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f780:	2303      	movs	r3, #3
   1f782:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f786:	481d      	ldr	r0, [pc, #116]	; (1f7fc <parse_xmodemsleep+0xe4>)
   1f788:	f842 3f10 	str.w	r3, [r2, #16]!
   1f78c:	f013 fd66 	bl	3325c <z_log_msg_static_create.constprop.0>
   1f790:	46ad      	mov	sp, r5
		goto clean_exit;
   1f792:	e01a      	b.n	1f7ca <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   1f794:	2101      	movs	r1, #1
   1f796:	1dba      	adds	r2, r7, #6
   1f798:	f107 0008 	add.w	r0, r7, #8
   1f79c:	f013 fcbc 	bl	33118 <at_params_unsigned_short_get>
	if (err) {
   1f7a0:	4604      	mov	r4, r0
   1f7a2:	b120      	cbz	r0, 1f7ae <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   1f7a4:	466d      	mov	r5, sp
   1f7a6:	b088      	sub	sp, #32
   1f7a8:	466a      	mov	r2, sp
   1f7aa:	4b16      	ldr	r3, [pc, #88]	; (1f804 <parse_xmodemsleep+0xec>)
   1f7ac:	e7e6      	b.n	1f77c <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   1f7ae:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   1f7b0:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   1f7b4:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   1f7b6:	f013 fd19 	bl	331ec <at_params_valid_count_get>
   1f7ba:	2802      	cmp	r0, #2
   1f7bc:	d80a      	bhi.n	1f7d4 <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   1f7be:	f04f 32ff 	mov.w	r2, #4294967295
   1f7c2:	f04f 33ff 	mov.w	r3, #4294967295
   1f7c6:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   1f7ca:	f107 0008 	add.w	r0, r7, #8
   1f7ce:	f013 fc08 	bl	32fe2 <at_params_list_free>
	return err;
   1f7d2:	e7c3      	b.n	1f75c <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   1f7d4:	2102      	movs	r1, #2
   1f7d6:	f105 0208 	add.w	r2, r5, #8
   1f7da:	f107 0008 	add.w	r0, r7, #8
   1f7de:	f013 fccd 	bl	3317c <at_params_int64_get>
	if (err) {
   1f7e2:	4604      	mov	r4, r0
   1f7e4:	2800      	cmp	r0, #0
   1f7e6:	d0f0      	beq.n	1f7ca <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   1f7e8:	466d      	mov	r5, sp
   1f7ea:	b088      	sub	sp, #32
   1f7ec:	466a      	mov	r2, sp
   1f7ee:	4b06      	ldr	r3, [pc, #24]	; (1f808 <parse_xmodemsleep+0xf0>)
   1f7f0:	e7c4      	b.n	1f77c <parse_xmodemsleep+0x64>
		return -EINVAL;
   1f7f2:	f06f 0415 	mvn.w	r4, #21
   1f7f6:	e7b1      	b.n	1f75c <parse_xmodemsleep+0x44>
   1f7f8:	0003d102 	.word	0x0003d102
   1f7fc:	000364c8 	.word	0x000364c8
   1f800:	0003d952 	.word	0x0003d952
   1f804:	0003d984 	.word	0x0003d984
   1f808:	0003d9ad 	.word	0x0003d9ad

0001f80c <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   1f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f80e:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   1f810:	4604      	mov	r4, r0
{
   1f812:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   1f814:	b320      	cbz	r0, 1f860 <parse_mdmev+0x54>
   1f816:	b319      	cbz	r1, 1f860 <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   1f818:	2108      	movs	r1, #8
   1f81a:	4a13      	ldr	r2, [pc, #76]	; (1f868 <parse_mdmev+0x5c>)
   1f81c:	f7ff f836 	bl	1e88c <response_is_valid>
   1f820:	b968      	cbnz	r0, 1f83e <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   1f822:	4b12      	ldr	r3, [pc, #72]	; (1f86c <parse_mdmev+0x60>)
   1f824:	4812      	ldr	r0, [pc, #72]	; (1f870 <parse_mdmev+0x64>)
   1f826:	9305      	str	r3, [sp, #20]
   1f828:	2302      	movs	r3, #2
   1f82a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f82e:	aa04      	add	r2, sp, #16
   1f830:	9304      	str	r3, [sp, #16]
   1f832:	f013 fd13 	bl	3325c <z_log_msg_static_create.constprop.0>
		return -EIO;
   1f836:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   1f83a:	b007      	add	sp, #28
   1f83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   1f83e:	2500      	movs	r5, #0
   1f840:	4f0c      	ldr	r7, [pc, #48]	; (1f874 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   1f842:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   1f844:	4621      	mov	r1, r4
   1f846:	f857 0b04 	ldr.w	r0, [r7], #4
   1f84a:	f7e9 fd5c 	bl	9306 <strcmp>
   1f84e:	b908      	cbnz	r0, 1f854 <parse_mdmev+0x48>
			*modem_evt = i;
   1f850:	7035      	strb	r5, [r6, #0]
			return 0;
   1f852:	e7f2      	b.n	1f83a <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   1f854:	3501      	adds	r5, #1
   1f856:	2d0a      	cmp	r5, #10
   1f858:	d1f4      	bne.n	1f844 <parse_mdmev+0x38>
	return -ENODATA;
   1f85a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1f85e:	e7ec      	b.n	1f83a <parse_mdmev+0x2e>
		return -EINVAL;
   1f860:	f06f 0015 	mvn.w	r0, #21
   1f864:	e7e9      	b.n	1f83a <parse_mdmev+0x2e>
   1f866:	bf00      	nop
   1f868:	0003d9e2 	.word	0x0003d9e2
   1f86c:	0003d9eb 	.word	0x0003d9eb
   1f870:	000364c8 	.word	0x000364c8
   1f874:	00037104 	.word	0x00037104

0001f878 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   1f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (err) {
   1f87a:	4604      	mov	r4, r0
{
   1f87c:	af00      	add	r7, sp, #0
	if (err) {
   1f87e:	b1a0      	cbz	r0, 1f8aa <on_modem_init+0x32>
		if (err == NRF_MODEM_DFU_RESULT_OK) {
   1f880:	4b1f      	ldr	r3, [pc, #124]	; (1f900 <on_modem_init+0x88>)
   1f882:	4298      	cmp	r0, r3
   1f884:	d00f      	beq.n	1f8a6 <on_modem_init+0x2e>
			LOG_DBG("Modem DFU, lte_lc not initialized");
			return;
		}
		LOG_ERR("Modem library init error: %d, lte_lc not initialized", err);
   1f886:	466d      	mov	r5, sp
   1f888:	b088      	sub	sp, #32
   1f88a:	466a      	mov	r2, sp
   1f88c:	4b1d      	ldr	r3, [pc, #116]	; (1f904 <on_modem_init+0x8c>)
   1f88e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f892:	2303      	movs	r3, #3
   1f894:	f842 3f10 	str.w	r3, [r2, #16]!
   1f898:	2300      	movs	r3, #0
   1f89a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f89e:	481a      	ldr	r0, [pc, #104]	; (1f908 <on_modem_init+0x90>)
   1f8a0:	f7ee ffbc 	bl	e81c <z_impl_z_log_msg_static_create>
   1f8a4:	46ad      	mov	sp, r5
	if (err) {
		LOG_ERR("Lte_lc failed to initialize and connect, err %d", err);
		return;
	}
#endif
}
   1f8a6:	46bd      	mov	sp, r7
   1f8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   1f8aa:	f7fe fa21 	bl	1dcf0 <lte_lc_psm_req>
	if (err) {
   1f8ae:	4605      	mov	r5, r0
   1f8b0:	b180      	cbz	r0, 1f8d4 <on_modem_init+0x5c>
		LOG_ERR("Failed to configure PSM, err %d", err);
   1f8b2:	466e      	mov	r6, sp
   1f8b4:	b088      	sub	sp, #32
   1f8b6:	466a      	mov	r2, sp
   1f8b8:	4b14      	ldr	r3, [pc, #80]	; (1f90c <on_modem_init+0x94>)
   1f8ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f8be:	2303      	movs	r3, #3
   1f8c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f8c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f8c8:	4623      	mov	r3, r4
   1f8ca:	480f      	ldr	r0, [pc, #60]	; (1f908 <on_modem_init+0x90>)
   1f8cc:	f7ee ffa6 	bl	e81c <z_impl_z_log_msg_static_create>
   1f8d0:	46b5      	mov	sp, r6
		return;
   1f8d2:	e7e8      	b.n	1f8a6 <on_modem_init+0x2e>
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   1f8d4:	f7fe fbde 	bl	1e094 <lte_lc_edrx_req>
	if (err) {
   1f8d8:	2800      	cmp	r0, #0
   1f8da:	d0e4      	beq.n	1f8a6 <on_modem_init+0x2e>
		LOG_ERR("Failed to configure eDRX, err %d", err);
   1f8dc:	466c      	mov	r4, sp
   1f8de:	b088      	sub	sp, #32
   1f8e0:	466a      	mov	r2, sp
   1f8e2:	4b0b      	ldr	r3, [pc, #44]	; (1f910 <on_modem_init+0x98>)
   1f8e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f8e8:	2303      	movs	r3, #3
   1f8ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1f8ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f8f2:	462b      	mov	r3, r5
   1f8f4:	4804      	ldr	r0, [pc, #16]	; (1f908 <on_modem_init+0x90>)
   1f8f6:	f7ee ff91 	bl	e81c <z_impl_z_log_msg_static_create>
   1f8fa:	46a5      	mov	sp, r4
		return;
   1f8fc:	e7d3      	b.n	1f8a6 <on_modem_init+0x2e>
   1f8fe:	bf00      	nop
   1f900:	05500001 	.word	0x05500001
   1f904:	0003dab9 	.word	0x0003dab9
   1f908:	000364c0 	.word	0x000364c0
   1f90c:	0003daee 	.word	0x0003daee
   1f910:	0003db0e 	.word	0x0003db0e

0001f914 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   1f914:	b510      	push	{r4, lr}
   1f916:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1f918:	4a09      	ldr	r2, [pc, #36]	; (1f940 <modem_info_parse+0x2c>)
{
   1f91a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   1f91c:	7a63      	ldrb	r3, [r4, #9]
   1f91e:	2100      	movs	r1, #0
   1f920:	f7fd fde0 	bl	1d4e4 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   1f924:	f110 0f0b 	cmn.w	r0, #11
   1f928:	d000      	beq.n	1f92c <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   1f92a:	b940      	cbnz	r0, 1f93e <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   1f92c:	4804      	ldr	r0, [pc, #16]	; (1f940 <modem_info_parse+0x2c>)
   1f92e:	f013 fc5d 	bl	331ec <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   1f932:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
   1f934:	4298      	cmp	r0, r3
   1f936:	bf8c      	ite	hi
   1f938:	f06f 000a 	mvnhi.w	r0, #10
   1f93c:	2000      	movls	r0, #0
}
   1f93e:	bd10      	pop	{r4, pc}
   1f940:	2000ffb0 	.word	0x2000ffb0

0001f944 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   1f944:	b590      	push	{r4, r7, lr}
   1f946:	b085      	sub	sp, #20
   1f948:	4604      	mov	r4, r0
   1f94a:	af00      	add	r7, sp, #0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   1f94c:	4a15      	ldr	r2, [pc, #84]	; (1f9a4 <modem_info_rsrp_subscribe_handler+0x60>)
   1f94e:	1d3b      	adds	r3, r7, #4
   1f950:	ca07      	ldmia	r2, {r0, r1, r2}
   1f952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   1f956:	4621      	mov	r1, r4
   1f958:	4618      	mov	r0, r3
   1f95a:	f7ff ffdb 	bl	1f914 <modem_info_parse>
	if (err != 0) {
   1f95e:	b188      	cbz	r0, 1f984 <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   1f960:	466c      	mov	r4, sp
   1f962:	b088      	sub	sp, #32
   1f964:	466a      	mov	r2, sp
   1f966:	4b10      	ldr	r3, [pc, #64]	; (1f9a8 <modem_info_rsrp_subscribe_handler+0x64>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   1f968:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f96c:	2303      	movs	r3, #3
   1f96e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f972:	480e      	ldr	r0, [pc, #56]	; (1f9ac <modem_info_rsrp_subscribe_handler+0x68>)
   1f974:	f842 3f10 	str.w	r3, [r2, #16]!
   1f978:	f013 fcc6 	bl	33308 <z_log_msg_static_create.constprop.0>
   1f97c:	46a5      	mov	sp, r4
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   1f97e:	3714      	adds	r7, #20
   1f980:	46bd      	mov	sp, r7
   1f982:	bd90      	pop	{r4, r7, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   1f984:	2101      	movs	r1, #1
   1f986:	480a      	ldr	r0, [pc, #40]	; (1f9b0 <modem_info_rsrp_subscribe_handler+0x6c>)
   1f988:	1cba      	adds	r2, r7, #2
   1f98a:	f013 fbc5 	bl	33118 <at_params_unsigned_short_get>
	if (err != 0) {
   1f98e:	b120      	cbz	r0, 1f99a <modem_info_rsrp_subscribe_handler+0x56>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   1f990:	466c      	mov	r4, sp
   1f992:	b088      	sub	sp, #32
   1f994:	466a      	mov	r2, sp
   1f996:	4b07      	ldr	r3, [pc, #28]	; (1f9b4 <modem_info_rsrp_subscribe_handler+0x70>)
   1f998:	e7e6      	b.n	1f968 <modem_info_rsrp_subscribe_handler+0x24>
	modem_info_rsrp_cb(param_value);
   1f99a:	4b07      	ldr	r3, [pc, #28]	; (1f9b8 <modem_info_rsrp_subscribe_handler+0x74>)
   1f99c:	78b8      	ldrb	r0, [r7, #2]
   1f99e:	681b      	ldr	r3, [r3, #0]
   1f9a0:	4798      	blx	r3
   1f9a2:	e7ec      	b.n	1f97e <modem_info_rsrp_subscribe_handler+0x3a>
   1f9a4:	000366d4 	.word	0x000366d4
   1f9a8:	0003db2f 	.word	0x0003db2f
   1f9ac:	000364d8 	.word	0x000364d8
   1f9b0:	2000ffb0 	.word	0x2000ffb0
   1f9b4:	0003db66 	.word	0x0003db66
   1f9b8:	2000ffb8 	.word	0x2000ffb8

0001f9bc <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   1f9bc:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   1f9be:	bf9d      	ittte	ls
   1f9c0:	4b02      	ldrls	r3, [pc, #8]	; (1f9cc <modem_info_type_get+0x10>)
   1f9c2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   1f9c6:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   1f9c8:	20ea      	movhi	r0, #234	; 0xea
}
   1f9ca:	4770      	bx	lr
   1f9cc:	0003716c 	.word	0x0003716c

0001f9d0 <modem_info_name_get>:
{
   1f9d0:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL || info < 0 || info >= MODEM_INFO_COUNT) {
   1f9d2:	460d      	mov	r5, r1
   1f9d4:	b1f9      	cbz	r1, 1fa16 <modem_info_name_get+0x46>
   1f9d6:	2815      	cmp	r0, #21
   1f9d8:	d81d      	bhi.n	1fa16 <modem_info_name_get+0x46>
	len = strlen(modem_data[info]->data_name);
   1f9da:	4b10      	ldr	r3, [pc, #64]	; (1fa1c <modem_info_name_get+0x4c>)
   1f9dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1f9e0:	685e      	ldr	r6, [r3, #4]
   1f9e2:	4630      	mov	r0, r6
   1f9e4:	f7e9 fc99 	bl	931a <strlen>
	__ASSERT_NO_MSG(len <= MODEM_INFO_MAX_RESPONSE_SIZE);
   1f9e8:	2864      	cmp	r0, #100	; 0x64
	len = strlen(modem_data[info]->data_name);
   1f9ea:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(len <= MODEM_INFO_MAX_RESPONSE_SIZE);
   1f9ec:	d90b      	bls.n	1fa06 <modem_info_name_get+0x36>
   1f9ee:	490c      	ldr	r1, [pc, #48]	; (1fa20 <modem_info_name_get+0x50>)
   1f9f0:	480c      	ldr	r0, [pc, #48]	; (1fa24 <modem_info_name_get+0x54>)
   1f9f2:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   1f9f6:	4a0c      	ldr	r2, [pc, #48]	; (1fa28 <modem_info_name_get+0x58>)
   1f9f8:	f00e ffac 	bl	2e954 <assert_print>
   1f9fc:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   1fa00:	4809      	ldr	r0, [pc, #36]	; (1fa28 <modem_info_name_get+0x58>)
   1fa02:	f00e ffa0 	bl	2e946 <assert_post_action>
	if (len <= 0) {
   1fa06:	b130      	cbz	r0, 1fa16 <modem_info_name_get+0x46>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fa08:	4602      	mov	r2, r0
   1fa0a:	4631      	mov	r1, r6
   1fa0c:	4628      	mov	r0, r5
   1fa0e:	f015 faed 	bl	34fec <memcpy>
}
   1fa12:	4620      	mov	r0, r4
   1fa14:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fa16:	f06f 0415 	mvn.w	r4, #21
   1fa1a:	e7fa      	b.n	1fa12 <modem_info_name_get+0x42>
   1fa1c:	0003716c 	.word	0x0003716c
   1fa20:	0003dbb2 	.word	0x0003dbb2
   1fa24:	000381c3 	.word	0x000381c3
   1fa28:	0003db86 	.word	0x0003db86

0001fa2c <modem_info_short_get>:
{
   1fa2c:	b530      	push	{r4, r5, lr}
   1fa2e:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fa30:	2100      	movs	r1, #0
{
   1fa32:	b0a1      	sub	sp, #132	; 0x84
   1fa34:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fa36:	227c      	movs	r2, #124	; 0x7c
   1fa38:	a801      	add	r0, sp, #4
   1fa3a:	9100      	str	r1, [sp, #0]
   1fa3c:	f015 faf6 	bl	3502c <memset>
	if (buf == NULL) {
   1fa40:	b1d5      	cbz	r5, 1fa78 <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1fa42:	4b10      	ldr	r3, [pc, #64]	; (1fa84 <modem_info_short_get+0x58>)
   1fa44:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1fa48:	7aa3      	ldrb	r3, [r4, #10]
   1fa4a:	2b02      	cmp	r3, #2
   1fa4c:	d014      	beq.n	1fa78 <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   1fa4e:	2180      	movs	r1, #128	; 0x80
   1fa50:	4668      	mov	r0, sp
   1fa52:	6822      	ldr	r2, [r4, #0]
   1fa54:	f006 fe62 	bl	2671c <nrf_modem_at_cmd>
	if (err != 0) {
   1fa58:	b988      	cbnz	r0, 1fa7e <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   1fa5a:	4669      	mov	r1, sp
   1fa5c:	4620      	mov	r0, r4
   1fa5e:	f7ff ff59 	bl	1f914 <modem_info_parse>
	if (err) {
   1fa62:	b938      	cbnz	r0, 1fa74 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   1fa64:	462a      	mov	r2, r5
   1fa66:	7a21      	ldrb	r1, [r4, #8]
   1fa68:	4807      	ldr	r0, [pc, #28]	; (1fa88 <modem_info_short_get+0x5c>)
   1fa6a:	f013 fb55 	bl	33118 <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   1fa6e:	2800      	cmp	r0, #0
   1fa70:	bf08      	it	eq
   1fa72:	2002      	moveq	r0, #2
}
   1fa74:	b021      	add	sp, #132	; 0x84
   1fa76:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1fa78:	f06f 0015 	mvn.w	r0, #21
   1fa7c:	e7fa      	b.n	1fa74 <modem_info_short_get+0x48>
		return -EIO;
   1fa7e:	f06f 0004 	mvn.w	r0, #4
   1fa82:	e7f7      	b.n	1fa74 <modem_info_short_get+0x48>
   1fa84:	0003716c 	.word	0x0003716c
   1fa88:	2000ffb0 	.word	0x2000ffb0

0001fa8c <modem_info_string_get>:
{
   1fa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fa90:	f04f 0800 	mov.w	r8, #0
{
   1fa94:	460d      	mov	r5, r1
   1fa96:	b0b7      	sub	sp, #220	; 0xdc
   1fa98:	af02      	add	r7, sp, #8
   1fa9a:	4604      	mov	r4, r0
   1fa9c:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fa9e:	4641      	mov	r1, r8
   1faa0:	227c      	movs	r2, #124	; 0x7c
   1faa2:	f107 0054 	add.w	r0, r7, #84	; 0x54
   1faa6:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
   1faaa:	f015 fabf 	bl	3502c <memset>
	size_t len = 0;
   1faae:	f8c7 8008 	str.w	r8, [r7, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   1fab2:	2d00      	cmp	r5, #0
   1fab4:	d068      	beq.n	1fb88 <modem_info_string_get+0xfc>
   1fab6:	2e00      	cmp	r6, #0
   1fab8:	d066      	beq.n	1fb88 <modem_info_string_get+0xfc>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   1faba:	4ba5      	ldr	r3, [pc, #660]	; (1fd50 <modem_info_string_get+0x2c4>)
	buf[0] = '\0';
   1fabc:	f885 8000 	strb.w	r8, [r5]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   1fac0:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
   1fac4:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1fac8:	2180      	movs	r1, #128	; 0x80
   1faca:	4640      	mov	r0, r8
   1facc:	f8d9 2000 	ldr.w	r2, [r9]
   1fad0:	f006 fe24 	bl	2671c <nrf_modem_at_cmd>
	if (err != 0) {
   1fad4:	4682      	mov	sl, r0
   1fad6:	2800      	cmp	r0, #0
   1fad8:	f040 8133 	bne.w	1fd42 <modem_info_string_get+0x2b6>
	if (info == MODEM_INFO_SUP_BAND) {
   1fadc:	2c02      	cmp	r4, #2
   1fade:	d122      	bne.n	1fb26 <modem_info_string_get+0x9a>
		char *str_begin = strchr(recv_buf, '(');
   1fae0:	2128      	movs	r1, #40	; 0x28
   1fae2:	4640      	mov	r0, r8
   1fae4:	f015 fc33 	bl	3534e <strchr>
   1fae8:	4604      	mov	r4, r0
		str_end = strchr(recv_buf, ')');
   1faea:	2129      	movs	r1, #41	; 0x29
   1faec:	4640      	mov	r0, r8
   1faee:	f015 fc2e 	bl	3534e <strchr>
		if (!str_begin || !str_end) {
   1faf2:	2c00      	cmp	r4, #0
   1faf4:	f000 8128 	beq.w	1fd48 <modem_info_string_get+0x2bc>
   1faf8:	2800      	cmp	r0, #0
   1fafa:	f000 8125 	beq.w	1fd48 <modem_info_string_get+0x2bc>
		*(str_end + 1) = 0;
   1fafe:	f880 a001 	strb.w	sl, [r0, #1]
		len = strlen(str_begin);
   1fb02:	4620      	mov	r0, r4
   1fb04:	f7e9 fc09 	bl	931a <strlen>
		if (len >= buf_size) {
   1fb08:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   1fb0a:	4683      	mov	fp, r0
		if (len >= buf_size) {
   1fb0c:	d302      	bcc.n	1fb14 <modem_info_string_get+0x88>
		return -EMSGSIZE;
   1fb0e:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   1fb12:	e003      	b.n	1fb1c <modem_info_string_get+0x90>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1fb14:	4621      	mov	r1, r4
   1fb16:	4628      	mov	r0, r5
   1fb18:	f015 fc26 	bl	35368 <strcpy>
}
   1fb1c:	4658      	mov	r0, fp
   1fb1e:	37d4      	adds	r7, #212	; 0xd4
   1fb20:	46bd      	mov	sp, r7
   1fb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   1fb26:	4641      	mov	r1, r8
   1fb28:	4648      	mov	r0, r9
   1fb2a:	f7ff fef3 	bl	1f914 <modem_info_parse>
	if (err) {
   1fb2e:	4683      	mov	fp, r0
   1fb30:	b178      	cbz	r0, 1fb52 <modem_info_string_get+0xc6>
		LOG_ERR("Unable to parse data: %d", err);
   1fb32:	466c      	mov	r4, sp
   1fb34:	b088      	sub	sp, #32
   1fb36:	aa02      	add	r2, sp, #8
   1fb38:	4986      	ldr	r1, [pc, #536]	; (1fd54 <modem_info_string_get+0x2c8>)
			LOG_ERR("Unable to obtain short: %d", err);
   1fb3a:	e9c2 1b05 	strd	r1, fp, [r2, #20]
   1fb3e:	2103      	movs	r1, #3
   1fb40:	4885      	ldr	r0, [pc, #532]	; (1fd58 <modem_info_string_get+0x2cc>)
   1fb42:	f842 1f10 	str.w	r1, [r2, #16]!
   1fb46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb4a:	f013 fbdd 	bl	33308 <z_log_msg_static_create.constprop.0>
   1fb4e:	46a5      	mov	sp, r4
			return err;
   1fb50:	e7e4      	b.n	1fb1c <modem_info_string_get+0x90>
	if (info == MODEM_INFO_IP_ADDRESS) {
   1fb52:	2c09      	cmp	r4, #9
   1fb54:	f040 809b 	bne.w	1fc8e <modem_info_string_get+0x202>
	size_t len = 0;
   1fb58:	60f8      	str	r0, [r7, #12]
	p = strstr(in_buf, "OK\r\n");
   1fb5a:	4980      	ldr	r1, [pc, #512]	; (1fd5c <modem_info_string_get+0x2d0>)
   1fb5c:	4640      	mov	r0, r8
   1fb5e:	f015 fc50 	bl	35402 <strstr>
	if (!p) {
   1fb62:	b9a0      	cbnz	r0, 1fb8e <modem_info_string_get+0x102>
		LOG_WRN("No response status: %s", in_buf);
   1fb64:	466c      	mov	r4, sp
   1fb66:	b088      	sub	sp, #32
   1fb68:	aa02      	add	r2, sp, #8
   1fb6a:	4b7d      	ldr	r3, [pc, #500]	; (1fd60 <modem_info_string_get+0x2d4>)
   1fb6c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1fb70:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1fb74:	f44f 7300 	mov.w	r3, #512	; 0x200
   1fb78:	8393      	strh	r3, [r2, #28]
   1fb7a:	4b7a      	ldr	r3, [pc, #488]	; (1fd64 <modem_info_string_get+0x2d8>)
   1fb7c:	4876      	ldr	r0, [pc, #472]	; (1fd58 <modem_info_string_get+0x2cc>)
   1fb7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb82:	f013 fbc1 	bl	33308 <z_log_msg_static_create.constprop.0>
   1fb86:	46a5      	mov	sp, r4
		return -EINVAL;
   1fb88:	f06f 0b15 	mvn.w	fp, #21
   1fb8c:	e7c6      	b.n	1fb1c <modem_info_string_get+0x90>
	*p = '\0';
   1fb8e:	f880 b000 	strb.w	fp, [r0]
	char *str_end = in_buf;
   1fb92:	4640      	mov	r0, r8
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   1fb94:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1fd68 <modem_info_string_get+0x2dc>
   1fb98:	4649      	mov	r1, r9
   1fb9a:	f015 fc32 	bl	35402 <strstr>
   1fb9e:	4604      	mov	r4, r0
   1fba0:	2800      	cmp	r0, #0
   1fba2:	d13d      	bne.n	1fc20 <modem_info_string_get+0x194>
	if (total_ip_count == 0) {
   1fba4:	f1bb 0f00 	cmp.w	fp, #0
   1fba8:	d0b8      	beq.n	1fb1c <modem_info_string_get+0x90>
	first_address = true;
   1fbaa:	2301      	movs	r3, #1
   1fbac:	f10b 39ff 	add.w	r9, fp, #4294967295
   1fbb0:	607b      	str	r3, [r7, #4]
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   1fbb2:	eb08 0a04 	add.w	sl, r8, r4
   1fbb6:	4650      	mov	r0, sl
   1fbb8:	496b      	ldr	r1, [pc, #428]	; (1fd68 <modem_info_string_get+0x2dc>)
   1fbba:	f015 fc22 	bl	35402 <strstr>
	if (str_end == NULL) {
   1fbbe:	2800      	cmp	r0, #0
   1fbc0:	f000 80c2 	beq.w	1fd48 <modem_info_string_get+0x2bc>
	line_len = str_end - &in_buf[line_start_idx];
   1fbc4:	eba0 000a 	sub.w	r0, r0, sl
	in_buf[++line_len + line_start_idx] = '\0';
   1fbc8:	3401      	adds	r4, #1
   1fbca:	4404      	add	r4, r0
   1fbcc:	f107 0208 	add.w	r2, r7, #8
   1fbd0:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
   1fbd4:	4413      	add	r3, r2
   1fbd6:	2200      	movs	r2, #0
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   1fbd8:	4651      	mov	r1, sl
   1fbda:	4864      	ldr	r0, [pc, #400]	; (1fd6c <modem_info_string_get+0x2e0>)
	in_buf[++line_len + line_start_idx] = '\0';
   1fbdc:	f803 2c80 	strb.w	r2, [r3, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   1fbe0:	f7ff fe98 	bl	1f914 <modem_info_parse>
	if (err) {
   1fbe4:	4683      	mov	fp, r0
   1fbe6:	2800      	cmp	r0, #0
   1fbe8:	d1a3      	bne.n	1fb32 <modem_info_string_get+0xa6>
	len = sizeof(ip_buf);
   1fbea:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   1fbec:	f107 0a10 	add.w	sl, r7, #16
	len = sizeof(ip_buf);
   1fbf0:	60fb      	str	r3, [r7, #12]
	err = at_params_string_get(&m_param_list,
   1fbf2:	4652      	mov	r2, sl
   1fbf4:	2104      	movs	r1, #4
   1fbf6:	485e      	ldr	r0, [pc, #376]	; (1fd70 <modem_info_string_get+0x2e4>)
   1fbf8:	f107 030c 	add.w	r3, r7, #12
   1fbfc:	f013 fad3 	bl	331a6 <at_params_string_get>
	if (err != 0) {
   1fc00:	4683      	mov	fp, r0
   1fc02:	2800      	cmp	r0, #0
   1fc04:	d18a      	bne.n	1fb1c <modem_info_string_get+0x90>
	} else if (len >= sizeof(ip_buf)) {
   1fc06:	68fa      	ldr	r2, [r7, #12]
   1fc08:	2a3f      	cmp	r2, #63	; 0x3f
   1fc0a:	d880      	bhi.n	1fb0e <modem_info_string_get+0x82>
	if (len == 0) {
   1fc0c:	b962      	cbnz	r2, 1fc28 <modem_info_string_get+0x19c>
		line_start_idx += line_len + 1;
   1fc0e:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   1fc10:	f1b9 0f00 	cmp.w	r9, #0
   1fc14:	d138      	bne.n	1fc88 <modem_info_string_get+0x1fc>
	return strlen(out_buf);
   1fc16:	4628      	mov	r0, r5
   1fc18:	f7e9 fb7f 	bl	931a <strlen>
   1fc1c:	4683      	mov	fp, r0
   1fc1e:	e77d      	b.n	1fb1c <modem_info_string_get+0x90>
		str_end++;
   1fc20:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   1fc22:	f10b 0b01 	add.w	fp, fp, #1
   1fc26:	e7b7      	b.n	1fb98 <modem_info_string_get+0x10c>
	ip_buf[len] = '\0';
   1fc28:	f102 03c8 	add.w	r3, r2, #200	; 0xc8
   1fc2c:	f107 0208 	add.w	r2, r7, #8
   1fc30:	189a      	adds	r2, r3, r2
   1fc32:	f802 0cc0 	strb.w	r0, [r2, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   1fc36:	2120      	movs	r1, #32
   1fc38:	4650      	mov	r0, sl
   1fc3a:	f015 fb88 	bl	3534e <strchr>
	if (ip_v6_str) {
   1fc3e:	b128      	cbz	r0, 1fc4c <modem_info_string_get+0x1c0>
		*ip_v6_str = '\0';
   1fc40:	f880 b000 	strb.w	fp, [r0]
		len = strlen(ip_buf);
   1fc44:	4650      	mov	r0, sl
   1fc46:	f7e9 fb68 	bl	931a <strlen>
   1fc4a:	60f8      	str	r0, [r7, #12]
	out_buf_len = strlen(out_buf);
   1fc4c:	4628      	mov	r0, r5
   1fc4e:	f7e9 fb64 	bl	931a <strlen>
	err = snprintk(out_buf + out_buf_len,
   1fc52:	f8cd a000 	str.w	sl, [sp]
   1fc56:	6879      	ldr	r1, [r7, #4]
   1fc58:	4a46      	ldr	r2, [pc, #280]	; (1fd74 <modem_info_string_get+0x2e8>)
   1fc5a:	4b47      	ldr	r3, [pc, #284]	; (1fd78 <modem_info_string_get+0x2ec>)
   1fc5c:	eba6 0b00 	sub.w	fp, r6, r0
   1fc60:	2900      	cmp	r1, #0
   1fc62:	bf18      	it	ne
   1fc64:	4613      	movne	r3, r2
   1fc66:	4428      	add	r0, r5
   1fc68:	4659      	mov	r1, fp
   1fc6a:	4a44      	ldr	r2, [pc, #272]	; (1fd7c <modem_info_string_get+0x2f0>)
   1fc6c:	f00e fca2 	bl	2e5b4 <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   1fc70:	2800      	cmp	r0, #0
   1fc72:	f77f af4c 	ble.w	1fb0e <modem_info_string_get+0x82>
   1fc76:	4583      	cmp	fp, r0
   1fc78:	f4ff af49 	bcc.w	1fb0e <modem_info_string_get+0x82>
	if (--current_ip_idx) {
   1fc7c:	f1b9 0f00 	cmp.w	r9, #0
   1fc80:	d0c9      	beq.n	1fc16 <modem_info_string_get+0x18a>
	first_address = false;
   1fc82:	2300      	movs	r3, #0
		line_start_idx  += line_len + 1;
   1fc84:	3401      	adds	r4, #1
	first_address = false;
   1fc86:	607b      	str	r3, [r7, #4]
   1fc88:	f109 39ff 	add.w	r9, r9, #4294967295
   1fc8c:	e791      	b.n	1fbb2 <modem_info_string_get+0x126>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   1fc8e:	f899 300a 	ldrb.w	r3, [r9, #10]
   1fc92:	2b01      	cmp	r3, #1
   1fc94:	d135      	bne.n	1fd02 <modem_info_string_get+0x276>
		err = at_params_unsigned_short_get(&m_param_list,
   1fc96:	f899 1008 	ldrb.w	r1, [r9, #8]
   1fc9a:	4835      	ldr	r0, [pc, #212]	; (1fd70 <modem_info_string_get+0x2e4>)
   1fc9c:	f107 0210 	add.w	r2, r7, #16
   1fca0:	f013 fa3a 	bl	33118 <at_params_unsigned_short_get>
		if (err) {
   1fca4:	4683      	mov	fp, r0
   1fca6:	b120      	cbz	r0, 1fcb2 <modem_info_string_get+0x226>
			LOG_ERR("Unable to obtain short: %d", err);
   1fca8:	466c      	mov	r4, sp
   1fcaa:	b088      	sub	sp, #32
   1fcac:	aa02      	add	r2, sp, #8
   1fcae:	4934      	ldr	r1, [pc, #208]	; (1fd80 <modem_info_string_get+0x2f4>)
   1fcb0:	e743      	b.n	1fb3a <modem_info_string_get+0xae>
		len = snprintf(buf, buf_size, "%d", param_value);
   1fcb2:	4631      	mov	r1, r6
   1fcb4:	4628      	mov	r0, r5
   1fcb6:	8a3b      	ldrh	r3, [r7, #16]
   1fcb8:	4a32      	ldr	r2, [pc, #200]	; (1fd84 <modem_info_string_get+0x2f8>)
   1fcba:	f00c fba7 	bl	2c40c <sniprintf>
   1fcbe:	60b8      	str	r0, [r7, #8]
		if ((len <= 0) || (len > buf_size)) {
   1fcc0:	2800      	cmp	r0, #0
   1fcc2:	f43f af24 	beq.w	1fb0e <modem_info_string_get+0x82>
   1fcc6:	4286      	cmp	r6, r0
   1fcc8:	f4ff af21 	bcc.w	1fb0e <modem_info_string_get+0x82>
	if (info == MODEM_INFO_ICCID) {
   1fccc:	2c0e      	cmp	r4, #14
   1fcce:	d111      	bne.n	1fcf4 <modem_info_string_get+0x268>
   1fcd0:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1fcd2:	4628      	mov	r0, r5
   1fcd4:	f7e9 fb21 	bl	931a <strlen>
   1fcd8:	1ca3      	adds	r3, r4, #2
   1fcda:	1b64      	subs	r4, r4, r5
   1fcdc:	42a0      	cmp	r0, r4
   1fcde:	d826      	bhi.n	1fd2e <modem_info_string_get+0x2a2>
		if ((len == ICCID_LEN) &&
   1fce0:	68bb      	ldr	r3, [r7, #8]
   1fce2:	2b14      	cmp	r3, #20
   1fce4:	d106      	bne.n	1fcf4 <modem_info_string_get+0x268>
   1fce6:	7ceb      	ldrb	r3, [r5, #19]
   1fce8:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   1fcea:	bf01      	itttt	eq
   1fcec:	2300      	moveq	r3, #0
   1fcee:	74eb      	strbeq	r3, [r5, #19]
			--len;
   1fcf0:	2313      	moveq	r3, #19
   1fcf2:	60bb      	streq	r3, [r7, #8]
	return len <= 0 ? -ENOTSUP : len;
   1fcf4:	68bb      	ldr	r3, [r7, #8]
   1fcf6:	2b00      	cmp	r3, #0
   1fcf8:	bf14      	ite	ne
   1fcfa:	469b      	movne	fp, r3
   1fcfc:	f06f 0b85 	mvneq.w	fp, #133	; 0x85
   1fd00:	e70c      	b.n	1fb1c <modem_info_string_get+0x90>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   1fd02:	2b02      	cmp	r3, #2
   1fd04:	d1e2      	bne.n	1fccc <modem_info_string_get+0x240>
		err = at_params_string_get(&m_param_list,
   1fd06:	462a      	mov	r2, r5
   1fd08:	f899 1008 	ldrb.w	r1, [r9, #8]
   1fd0c:	4818      	ldr	r0, [pc, #96]	; (1fd70 <modem_info_string_get+0x2e4>)
   1fd0e:	f107 0308 	add.w	r3, r7, #8
		len = buf_size - out_buf_len;
   1fd12:	60be      	str	r6, [r7, #8]
		err = at_params_string_get(&m_param_list,
   1fd14:	f013 fa47 	bl	331a6 <at_params_string_get>
		if (err != 0) {
   1fd18:	4683      	mov	fp, r0
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	f47f aefe 	bne.w	1fb1c <modem_info_string_get+0x90>
		} else if (len >= buf_size) {
   1fd20:	68bb      	ldr	r3, [r7, #8]
   1fd22:	429e      	cmp	r6, r3
   1fd24:	f67f aef3 	bls.w	1fb0e <modem_info_string_get+0x82>
		buf[accumulated_len] = '\0';
   1fd28:	2200      	movs	r2, #0
   1fd2a:	54ea      	strb	r2, [r5, r3]
   1fd2c:	e7ce      	b.n	1fccc <modem_info_string_get+0x240>
		current_char = buf[i];
   1fd2e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   1fd32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   1fd36:	461c      	mov	r4, r3
		buf[i] = next_char;
   1fd38:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   1fd3c:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1fd40:	e7c7      	b.n	1fcd2 <modem_info_string_get+0x246>
		return -EIO;
   1fd42:	f06f 0b04 	mvn.w	fp, #4
   1fd46:	e6e9      	b.n	1fb1c <modem_info_string_get+0x90>
			return -EFAULT;
   1fd48:	f06f 0b0d 	mvn.w	fp, #13
   1fd4c:	e6e6      	b.n	1fb1c <modem_info_string_get+0x90>
   1fd4e:	bf00      	nop
   1fd50:	0003716c 	.word	0x0003716c
   1fd54:	0003dbc0 	.word	0x0003dbc0
   1fd58:	000364d8 	.word	0x000364d8
   1fd5c:	0003c748 	.word	0x0003c748
   1fd60:	0003dbd9 	.word	0x0003dbd9
   1fd64:	01000003 	.word	0x01000003
   1fd68:	0003f88e 	.word	0x0003f88e
   1fd6c:	00037254 	.word	0x00037254
   1fd70:	2000ffb0 	.word	0x2000ffb0
   1fd74:	00038b1b 	.word	0x00038b1b
   1fd78:	0003dbbd 	.word	0x0003dbbd
   1fd7c:	0003f280 	.word	0x0003f280
   1fd80:	0003dbf0 	.word	0x0003dbf0
   1fd84:	0003ea8e 	.word	0x0003ea8e

0001fd88 <modem_info_get_hw_version>:
	}
	return 0;
}

int modem_info_get_hw_version(char *buf, uint8_t buf_size)
{
   1fd88:	b5b0      	push	{r4, r5, r7, lr}
   1fd8a:	b08a      	sub	sp, #40	; 0x28
	int ret;
	char format[sizeof(HWVER_FMT_STR)];

	if ((buf == NULL) || (buf_size == 0)) {
   1fd8c:	4604      	mov	r4, r0
{
   1fd8e:	af02      	add	r7, sp, #8
	if ((buf == NULL) || (buf_size == 0)) {
   1fd90:	b320      	cbz	r0, 1fddc <modem_info_get_hw_version+0x54>
   1fd92:	b319      	cbz	r1, 1fddc <modem_info_get_hw_version+0x54>
		return -EINVAL;
	}

	sprintf(format, HWVER_FMT_STR, buf_size);
   1fd94:	2219      	movs	r2, #25
   1fd96:	4b14      	ldr	r3, [pc, #80]	; (1fde8 <modem_info_get_hw_version+0x60>)
   1fd98:	9100      	str	r1, [sp, #0]
   1fd9a:	1d38      	adds	r0, r7, #4
   1fd9c:	2100      	movs	r1, #0
   1fd9e:	f015 fa5f 	bl	35260 <__sprintf_chk>

	ret = nrf_modem_at_scanf("AT%" HWVER_CMD_STR, format, buf);
   1fda2:	4622      	mov	r2, r4
   1fda4:	4811      	ldr	r0, [pc, #68]	; (1fdec <modem_info_get_hw_version+0x64>)
   1fda6:	1d39      	adds	r1, r7, #4
   1fda8:	f006 fd4c 	bl	26844 <nrf_modem_at_scanf>

	if (ret != 1) {
   1fdac:	2801      	cmp	r0, #1
	ret = nrf_modem_at_scanf("AT%" HWVER_CMD_STR, format, buf);
   1fdae:	4604      	mov	r4, r0
	if (ret != 1) {
   1fdb0:	d017      	beq.n	1fde2 <modem_info_get_hw_version+0x5a>
		LOG_ERR("Could not get HW version, error: %d", ret);
   1fdb2:	466d      	mov	r5, sp
   1fdb4:	b088      	sub	sp, #32
   1fdb6:	aa02      	add	r2, sp, #8
   1fdb8:	4b0d      	ldr	r3, [pc, #52]	; (1fdf0 <modem_info_get_hw_version+0x68>)
   1fdba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fdbe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1fdc2:	2303      	movs	r3, #3
   1fdc4:	480b      	ldr	r0, [pc, #44]	; (1fdf4 <modem_info_get_hw_version+0x6c>)
   1fdc6:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdca:	f013 fa9d 	bl	33308 <z_log_msg_static_create.constprop.0>
		return map_nrf_modem_at_scanf_error(ret);
   1fdce:	4620      	mov	r0, r4
   1fdd0:	46ad      	mov	sp, r5
   1fdd2:	f013 fa88 	bl	332e6 <map_nrf_modem_at_scanf_error>
	}
	return 0;
}
   1fdd6:	3720      	adds	r7, #32
   1fdd8:	46bd      	mov	sp, r7
   1fdda:	bdb0      	pop	{r4, r5, r7, pc}
		return -EINVAL;
   1fddc:	f06f 0015 	mvn.w	r0, #21
   1fde0:	e7f9      	b.n	1fdd6 <modem_info_get_hw_version+0x4e>
	return 0;
   1fde2:	2000      	movs	r0, #0
   1fde4:	e7f7      	b.n	1fdd6 <modem_info_get_hw_version+0x4e>
   1fde6:	bf00      	nop
   1fde8:	0003dc0b 	.word	0x0003dc0b
   1fdec:	0003dc24 	.word	0x0003dc24
   1fdf0:	0003dc31 	.word	0x0003dc31
   1fdf4:	000364d8 	.word	0x000364d8

0001fdf8 <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   1fdf8:	4803      	ldr	r0, [pc, #12]	; (1fe08 <modem_info_init+0x10>)
   1fdfa:	6843      	ldr	r3, [r0, #4]
   1fdfc:	b913      	cbnz	r3, 1fe04 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   1fdfe:	210a      	movs	r1, #10
   1fe00:	f013 b8dc 	b.w	32fbc <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   1fe04:	2000      	movs	r0, #0
   1fe06:	4770      	bx	lr
   1fe08:	2000ffb0 	.word	0x2000ffb0

0001fe0c <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   1fe0c:	b5b0      	push	{r4, r5, r7, lr}
   1fe0e:	4605      	mov	r5, r0
   1fe10:	af00      	add	r7, sp, #0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   1fe12:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   1fe16:	f7ff fdd1 	bl	1f9bc <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   1fe1a:	2802      	cmp	r0, #2
   1fe1c:	d11f      	bne.n	1fe5e <modem_data_get+0x52>
		ret = modem_info_string_get(param->type,
   1fe1e:	2264      	movs	r2, #100	; 0x64
   1fe20:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   1fe24:	1ca9      	adds	r1, r5, #2
   1fe26:	f7ff fe31 	bl	1fa8c <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   1fe2a:	1e04      	subs	r4, r0, #0
   1fe2c:	db03      	blt.n	1fe36 <modem_data_get+0x2a>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   1fe2e:	2400      	movs	r4, #0
}
   1fe30:	4620      	mov	r0, r4
   1fe32:	46bd      	mov	sp, r7
   1fe34:	bdb0      	pop	{r4, r5, r7, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   1fe36:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   1fe3a:	466d      	mov	r5, sp
   1fe3c:	b088      	sub	sp, #32
   1fe3e:	466a      	mov	r2, sp
   1fe40:	4912      	ldr	r1, [pc, #72]	; (1fe8c <modem_data_get+0x80>)
   1fe42:	61d4      	str	r4, [r2, #28]
   1fe44:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1fe48:	2304      	movs	r3, #4
   1fe4a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe4e:	2300      	movs	r3, #0
   1fe50:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fe54:	480e      	ldr	r0, [pc, #56]	; (1fe90 <modem_data_get+0x84>)
   1fe56:	f7ee fce1 	bl	e81c <z_impl_z_log_msg_static_create>
   1fe5a:	46ad      	mov	sp, r5
			return ret;
   1fe5c:	e7e8      	b.n	1fe30 <modem_data_get+0x24>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   1fe5e:	2801      	cmp	r0, #1
   1fe60:	d1e5      	bne.n	1fe2e <modem_data_get+0x22>
		ret = modem_info_short_get(param->type, &param->value);
   1fe62:	4629      	mov	r1, r5
   1fe64:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   1fe68:	f7ff fde0 	bl	1fa2c <modem_info_short_get>
		if (ret < 0) {
   1fe6c:	1e04      	subs	r4, r0, #0
   1fe6e:	dade      	bge.n	1fe2e <modem_data_get+0x22>
			LOG_ERR("Link data not obtained: %d", ret);
   1fe70:	466d      	mov	r5, sp
   1fe72:	b088      	sub	sp, #32
   1fe74:	466a      	mov	r2, sp
   1fe76:	4b07      	ldr	r3, [pc, #28]	; (1fe94 <modem_data_get+0x88>)
   1fe78:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fe7c:	2303      	movs	r3, #3
   1fe7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe82:	2300      	movs	r3, #0
   1fe84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fe88:	e7e4      	b.n	1fe54 <modem_data_get+0x48>
   1fe8a:	bf00      	nop
   1fe8c:	0003ddf5 	.word	0x0003ddf5
   1fe90:	000364e0 	.word	0x000364e0
   1fe94:	0003de13 	.word	0x0003de13

0001fe98 <modem_info_params_init>:
	if (modem == NULL) {
   1fe98:	4603      	mov	r3, r0
   1fe9a:	2800      	cmp	r0, #0
   1fe9c:	d048      	beq.n	1ff30 <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   1fe9e:	2201      	movs	r2, #1
   1fea0:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   1fea4:	2202      	movs	r2, #2
   1fea6:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   1feaa:	2203      	movs	r2, #3
   1feac:	f880 214c 	strb.w	r2, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   1feb0:	2205      	movs	r2, #5
   1feb2:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   1feb6:	2206      	movs	r2, #6
   1feb8:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   1febc:	2207      	movs	r2, #7
   1febe:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   1fec2:	2208      	movs	r2, #8
   1fec4:	f880 230c 	strb.w	r2, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   1fec8:	2209      	movs	r2, #9
   1feca:	f880 237c 	strb.w	r2, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   1fece:	2204      	movs	r2, #4
   1fed0:	f880 23ec 	strb.w	r2, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   1fed4:	220f      	movs	r2, #15
   1fed6:	f880 245c 	strb.w	r2, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   1feda:	2210      	movs	r2, #16
   1fedc:	f880 24cc 	strb.w	r2, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   1fee0:	2211      	movs	r2, #17
   1fee2:	f880 253c 	strb.w	r2, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   1fee6:	2214      	movs	r2, #20
   1fee8:	f880 25ac 	strb.w	r2, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   1feec:	2215      	movs	r2, #21
   1feee:	f880 261c 	strb.w	r2, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   1fef2:	220a      	movs	r2, #10
   1fef4:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   1fef8:	220e      	movs	r2, #14
   1fefa:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   1fefe:	2212      	movs	r2, #18
   1ff00:	f883 27e4 	strb.w	r2, [r3, #2020]	; 0x7e4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   1ff04:	220d      	movs	r2, #13
   1ff06:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   1ff0a:	220b      	movs	r2, #11
   1ff0c:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   1ff10:	2213      	movs	r2, #19
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   1ff12:	2000      	movs	r0, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   1ff14:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
	modem->device.board			= CONFIG_BOARD;
   1ff18:	4a07      	ldr	r2, [pc, #28]	; (1ff38 <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   1ff1a:	f883 068c 	strb.w	r0, [r3, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   1ff1e:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   1ff22:	4a06      	ldr	r2, [pc, #24]	; (1ff3c <modem_info_params_init+0xa4>)
   1ff24:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
	modem->device.app_name			= "N/A";
   1ff28:	4a05      	ldr	r2, [pc, #20]	; (1ff40 <modem_info_params_init+0xa8>)
   1ff2a:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
	return 0;
   1ff2e:	4770      	bx	lr
		return -EINVAL;
   1ff30:	f06f 0015 	mvn.w	r0, #21
}
   1ff34:	4770      	bx	lr
   1ff36:	bf00      	nop
   1ff38:	0003de2e 	.word	0x0003de2e
   1ff3c:	0003de40 	.word	0x0003de40
   1ff40:	0003de47 	.word	0x0003de47

0001ff44 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   1ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff48:	b092      	sub	sp, #72	; 0x48
	int ret;

	if (modem == NULL) {
   1ff4a:	4604      	mov	r4, r0
{
   1ff4c:	af00      	add	r7, sp, #0
	if (modem == NULL) {
   1ff4e:	2800      	cmp	r0, #0
   1ff50:	f000 808e 	beq.w	20070 <modem_info_params_get+0x12c>
			&modem->device.battery,
			&modem->device.imei,
#endif
		};

		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   1ff54:	2600      	movs	r6, #0
			&modem->network.sup_band,
   1ff56:	f100 0370 	add.w	r3, r0, #112	; 0x70
		struct lte_param *params[] = {
   1ff5a:	60bb      	str	r3, [r7, #8]
			&modem->network.ip_address,
   1ff5c:	f500 7344 	add.w	r3, r0, #784	; 0x310
		struct lte_param *params[] = {
   1ff60:	60fb      	str	r3, [r7, #12]
			&modem->network.ue_mode,
   1ff62:	f500 7360 	add.w	r3, r0, #896	; 0x380
		struct lte_param *params[] = {
   1ff66:	613b      	str	r3, [r7, #16]
			&modem->network.current_operator,
   1ff68:	f500 73a8 	add.w	r3, r0, #336	; 0x150
		struct lte_param *params[] = {
   1ff6c:	617b      	str	r3, [r7, #20]
			&modem->network.cellid_hex,
   1ff6e:	f500 7328 	add.w	r3, r0, #672	; 0x2a0
		struct lte_param *params[] = {
   1ff72:	61bb      	str	r3, [r7, #24]
			&modem->network.area_code,
   1ff74:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
		struct lte_param *params[] = {
   1ff78:	61fb      	str	r3, [r7, #28]
			&modem->network.lte_mode,
   1ff7a:	f500 737c 	add.w	r3, r0, #1008	; 0x3f0
		struct lte_param *params[] = {
   1ff7e:	623b      	str	r3, [r7, #32]
			&modem->network.nbiot_mode,
   1ff80:	f500 638c 	add.w	r3, r0, #1120	; 0x460
		struct lte_param *params[] = {
   1ff84:	627b      	str	r3, [r7, #36]	; 0x24
			&modem->network.gps_mode,
   1ff86:	f500 639a 	add.w	r3, r0, #1232	; 0x4d0
		struct lte_param *params[] = {
   1ff8a:	62bb      	str	r3, [r7, #40]	; 0x28
			&modem->network.apn,
   1ff8c:	f500 63b6 	add.w	r3, r0, #1456	; 0x5b0
		struct lte_param *params[] = {
   1ff90:	62fb      	str	r3, [r7, #44]	; 0x2c
			&modem->network.rsrp,
   1ff92:	f500 63c4 	add.w	r3, r0, #1568	; 0x620
		struct lte_param *params[] = {
   1ff96:	633b      	str	r3, [r7, #48]	; 0x30
			&modem->sim.iccid,
   1ff98:	f500 63e1 	add.w	r3, r0, #1800	; 0x708
		struct lte_param *params[] = {
   1ff9c:	637b      	str	r3, [r7, #52]	; 0x34
			&modem->sim.imsi,
   1ff9e:	f500 63ef 	add.w	r3, r0, #1912	; 0x778
		struct lte_param *params[] = {
   1ffa2:	63bb      	str	r3, [r7, #56]	; 0x38
			&modem->device.modem_fw,
   1ffa4:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
		struct lte_param *params[] = {
   1ffa8:	63fb      	str	r3, [r7, #60]	; 0x3c
			&modem->device.battery,
   1ffaa:	f600 0358 	addw	r3, r0, #2136	; 0x858
		struct lte_param *params[] = {
   1ffae:	643b      	str	r3, [r7, #64]	; 0x40
			&modem->device.imei,
   1ffb0:	f600 03c8 	addw	r3, r0, #2248	; 0x8c8
		struct lte_param *params[] = {
   1ffb4:	6078      	str	r0, [r7, #4]
   1ffb6:	647b      	str	r3, [r7, #68]	; 0x44
		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   1ffb8:	f107 0804 	add.w	r8, r7, #4
			ret = modem_data_get(params[i]);
   1ffbc:	f858 0b04 	ldr.w	r0, [r8], #4
   1ffc0:	f7ff ff24 	bl	1fe0c <modem_data_get>
			if (ret) {
   1ffc4:	4605      	mov	r5, r0
   1ffc6:	2800      	cmp	r0, #0
   1ffc8:	d14d      	bne.n	20066 <modem_info_params_get+0x122>
		for (size_t i = 0; i < ARRAY_SIZE(params); ++i) {
   1ffca:	3601      	adds	r6, #1
   1ffcc:	2e11      	cmp	r6, #17
   1ffce:	d1f5      	bne.n	1ffbc <modem_info_params_get+0x78>
		}
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret = modem_data_get(&modem->network.date_time);
   1ffd0:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   1ffd4:	f7ff ff1a 	bl	1fe0c <modem_data_get>
			if (ret) {
   1ffd8:	b178      	cbz	r0, 1fffa <modem_info_params_get+0xb6>
				LOG_ERR("Could not get time, error: %d", ret);
   1ffda:	466e      	mov	r6, sp
   1ffdc:	b088      	sub	sp, #32
   1ffde:	466a      	mov	r2, sp
   1ffe0:	4b25      	ldr	r3, [pc, #148]	; (20078 <modem_info_params_get+0x134>)
   1ffe2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ffe6:	2303      	movs	r3, #3
   1ffe8:	f842 3f10 	str.w	r3, [r2, #16]!
   1ffec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fff0:	462b      	mov	r3, r5
   1fff2:	4822      	ldr	r0, [pc, #136]	; (2007c <modem_info_params_get+0x138>)
   1fff4:	f7ee fc12 	bl	e81c <z_impl_z_log_msg_static_create>
   1fff8:	46b5      	mov	sp, r6
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fffa:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   1fffe:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   20002:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   20006:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2000a:	220a      	movs	r2, #10
   2000c:	7083      	strb	r3, [r0, #2]
   2000e:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   20012:	2100      	movs	r1, #0
   20014:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   20018:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2001c:	f204 2632 	addw	r6, r4, #562	; 0x232
   20020:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   20024:	f00c fada 	bl	2c5dc <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   20028:	220a      	movs	r2, #10
   2002a:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2002c:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   20030:	4630      	mov	r0, r6
   20032:	f00c fad3 	bl	2c5dc <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   20036:	2210      	movs	r2, #16
   20038:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2003a:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2003e:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   20042:	f00c facb 	bl	2c5dc <strtol>
   20046:	f7e8 fb01 	bl	864c <__aeabi_i2d>
   2004a:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   2004e:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   20052:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   20054:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   20056:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2005a:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2005e:	f00c fabd 	bl	2c5dc <strtol>
   20062:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
		if (ret) {
			return ret;
		}
	}
	return 0;
}
   20066:	4628      	mov	r0, r5
   20068:	3748      	adds	r7, #72	; 0x48
   2006a:	46bd      	mov	sp, r7
   2006c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   20070:	f06f 0515 	mvn.w	r5, #21
   20074:	e7f7      	b.n	20066 <modem_info_params_get+0x122>
   20076:	bf00      	nop
   20078:	0003de4b 	.word	0x0003de4b
   2007c:	000364e0 	.word	0x000364e0

00020080 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   20080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   20082:	f7ee fa65 	bl	e550 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20086:	4b07      	ldr	r3, [pc, #28]	; (200a4 <k_sys_fatal_error_handler+0x24>)
   20088:	9305      	str	r3, [sp, #20]
   2008a:	2302      	movs	r3, #2
   2008c:	9304      	str	r3, [sp, #16]
   2008e:	4806      	ldr	r0, [pc, #24]	; (200a8 <k_sys_fatal_error_handler+0x28>)
   20090:	2300      	movs	r3, #0
   20092:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20096:	aa04      	add	r2, sp, #16
   20098:	f7ee fbc0 	bl	e81c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   2009c:	2000      	movs	r0, #0
   2009e:	f7f0 fe61 	bl	10d64 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   200a2:	bf00      	nop
   200a4:	0003de7b 	.word	0x0003de7b
   200a8:	00036480 	.word	0x00036480

000200ac <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   200ac:	b598      	push	{r3, r4, r7, lr}
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   200ae:	4916      	ldr	r1, [pc, #88]	; (20108 <on_modem_lib_init.part.0+0x5c>)
static void on_modem_lib_init(int ret, void *ctx)
   200b0:	af00      	add	r7, sp, #0
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   200b2:	4816      	ldr	r0, [pc, #88]	; (2010c <on_modem_lib_init.part.0+0x60>)
   200b4:	f006 fae6 	bl	26684 <nrf_modem_at_printf>
		if (err) {
   200b8:	b178      	cbz	r0, 200da <on_modem_lib_init.part.0+0x2e>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   200ba:	466c      	mov	r4, sp
   200bc:	b088      	sub	sp, #32
   200be:	466a      	mov	r2, sp
   200c0:	4b13      	ldr	r3, [pc, #76]	; (20110 <on_modem_lib_init.part.0+0x64>)
   200c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   200c6:	2303      	movs	r3, #3
   200c8:	f842 3f10 	str.w	r3, [r2, #16]!
   200cc:	2300      	movs	r3, #0
   200ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200d2:	4810      	ldr	r0, [pc, #64]	; (20114 <on_modem_lib_init.part.0+0x68>)
   200d4:	f7ee fba2 	bl	e81c <z_impl_z_log_msg_static_create>
   200d8:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   200da:	490f      	ldr	r1, [pc, #60]	; (20118 <on_modem_lib_init.part.0+0x6c>)
   200dc:	480b      	ldr	r0, [pc, #44]	; (2010c <on_modem_lib_init.part.0+0x60>)
   200de:	f006 fad1 	bl	26684 <nrf_modem_at_printf>
		if (err) {
   200e2:	b178      	cbz	r0, 20104 <on_modem_lib_init.part.0+0x58>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   200e4:	466c      	mov	r4, sp
   200e6:	b088      	sub	sp, #32
   200e8:	466a      	mov	r2, sp
   200ea:	4b0c      	ldr	r3, [pc, #48]	; (2011c <on_modem_lib_init.part.0+0x70>)
   200ec:	e9c2 3005 	strd	r3, r0, [r2, #20]
   200f0:	2303      	movs	r3, #3
   200f2:	f842 3f10 	str.w	r3, [r2, #16]!
   200f6:	2300      	movs	r3, #0
   200f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200fc:	4805      	ldr	r0, [pc, #20]	; (20114 <on_modem_lib_init.part.0+0x68>)
   200fe:	f7ee fb8d 	bl	e81c <z_impl_z_log_msg_static_create>
   20102:	46a5      	mov	sp, r4
		}
	}
}
   20104:	46bd      	mov	sp, r7
   20106:	bd98      	pop	{r3, r4, r7, pc}
   20108:	0003de98 	.word	0x0003de98
   2010c:	0003cc0c 	.word	0x0003cc0c
   20110:	0003deb7 	.word	0x0003deb7
   20114:	000364d0 	.word	0x000364d0
   20118:	0003dee4 	.word	0x0003dee4
   2011c:	0003defc 	.word	0x0003defc

00020120 <add_modem_info_data>:

	return 0;
}

static int add_modem_info_data(struct lte_param *param, cJSON *json_obj)
{
   20120:	b530      	push	{r4, r5, lr}
   20122:	4604      	mov	r4, r0
	char data_name[MODEM_INFO_MAX_RESPONSE_SIZE];
	enum at_param_type data_type;
	int ret;

	__ASSERT_NO_MSG(param != NULL);
	__ASSERT_NO_MSG(json_obj != NULL);
   20124:	460d      	mov	r5, r1
{
   20126:	b09b      	sub	sp, #108	; 0x6c
	__ASSERT_NO_MSG(json_obj != NULL);
   20128:	b959      	cbnz	r1, 20142 <add_modem_info_data+0x22>
   2012a:	491d      	ldr	r1, [pc, #116]	; (201a0 <add_modem_info_data+0x80>)
   2012c:	481d      	ldr	r0, [pc, #116]	; (201a4 <add_modem_info_data+0x84>)
   2012e:	f240 43c3 	movw	r3, #1219	; 0x4c3
   20132:	4a1d      	ldr	r2, [pc, #116]	; (201a8 <add_modem_info_data+0x88>)
   20134:	f00e fc0e 	bl	2e954 <assert_print>
   20138:	f240 41c3 	movw	r1, #1219	; 0x4c3
   2013c:	481a      	ldr	r0, [pc, #104]	; (201a8 <add_modem_info_data+0x88>)
   2013e:	f00e fc02 	bl	2e946 <assert_post_action>

	memset(data_name, 0, ARRAY_SIZE(data_name));
   20142:	2264      	movs	r2, #100	; 0x64
   20144:	2100      	movs	r1, #0
   20146:	a801      	add	r0, sp, #4
   20148:	f014 ff70 	bl	3502c <memset>
	ret = modem_info_name_get(param->type, data_name);
   2014c:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   20150:	a901      	add	r1, sp, #4
   20152:	f7ff fc3d 	bl	1f9d0 <modem_info_name_get>
	if (ret < 0) {
   20156:	2800      	cmp	r0, #0
   20158:	db1f      	blt.n	2019a <add_modem_info_data+0x7a>
		LOG_DBG("Data name not obtained: %d", ret);
		return -EINVAL;
	}

	data_type = modem_info_type_get(param->type);
   2015a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   2015e:	f7ff fc2d 	bl	1f9bc <modem_info_type_get>
	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING &&
   20162:	2802      	cmp	r0, #2
   20164:	d10f      	bne.n	20186 <add_modem_info_data+0x66>
   20166:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   2016a:	2b03      	cmp	r3, #3
   2016c:	d00b      	beq.n	20186 <add_modem_info_data+0x66>
	    param->type != MODEM_INFO_AREA_CODE) {
		if (cJSON_AddStringToObject(json_obj, data_name, param->value_string) == NULL) {
   2016e:	4628      	mov	r0, r5
   20170:	1ca2      	adds	r2, r4, #2
   20172:	a901      	add	r1, sp, #4
   20174:	f013 fbf5 	bl	33962 <cJSON_AddStringToObject>
   20178:	b110      	cbz	r0, 20180 <add_modem_info_data+0x60>
		if (cJSON_AddNumberToObject(json_obj, data_name, param->value) == NULL) {
			return -ENOMEM;
		}
	}

	return 0;
   2017a:	2000      	movs	r0, #0
}
   2017c:	b01b      	add	sp, #108	; 0x6c
   2017e:	bd30      	pop	{r4, r5, pc}
			return -ENOMEM;
   20180:	f06f 000b 	mvn.w	r0, #11
   20184:	e7fa      	b.n	2017c <add_modem_info_data+0x5c>
		if (cJSON_AddNumberToObject(json_obj, data_name, param->value) == NULL) {
   20186:	8820      	ldrh	r0, [r4, #0]
   20188:	f7e8 fa50 	bl	862c <__aeabi_ui2d>
   2018c:	4602      	mov	r2, r0
   2018e:	460b      	mov	r3, r1
   20190:	4628      	mov	r0, r5
   20192:	a901      	add	r1, sp, #4
   20194:	f013 fbba 	bl	3390c <cJSON_AddNumberToObject>
   20198:	e7ee      	b.n	20178 <add_modem_info_data+0x58>
		return -EINVAL;
   2019a:	f06f 0015 	mvn.w	r0, #21
   2019e:	e7ed      	b.n	2017c <add_modem_info_data+0x5c>
   201a0:	0003df7e 	.word	0x0003df7e
   201a4:	000381c3 	.word	0x000381c3
   201a8:	0003df36 	.word	0x0003df36

000201ac <json_item_string_exists>:
	return err;
}

static bool json_item_string_exists(const cJSON *const obj, const char *const key,
				    const char *const val)
{
   201ac:	b510      	push	{r4, lr}
   201ae:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(obj != NULL);
   201b0:	b958      	cbnz	r0, 201ca <json_item_string_exists+0x1e>
   201b2:	4911      	ldr	r1, [pc, #68]	; (201f8 <json_item_string_exists+0x4c>)
   201b4:	4811      	ldr	r0, [pc, #68]	; (201fc <json_item_string_exists+0x50>)
   201b6:	f640 0347 	movw	r3, #2119	; 0x847
   201ba:	4a11      	ldr	r2, [pc, #68]	; (20200 <json_item_string_exists+0x54>)
   201bc:	f00e fbca 	bl	2e954 <assert_print>
   201c0:	f640 0147 	movw	r1, #2119	; 0x847
   201c4:	480e      	ldr	r0, [pc, #56]	; (20200 <json_item_string_exists+0x54>)
   201c6:	f00e fbbe 	bl	2e946 <assert_post_action>
	__ASSERT_NO_MSG(key != NULL);

	char *str_val;
	cJSON *item = cJSON_GetObjectItem(obj, key);
   201ca:	f013 fb23 	bl	33814 <cJSON_GetObjectItem>

	if (!item) {
   201ce:	b908      	cbnz	r0, 201d4 <json_item_string_exists+0x28>
		return false;
   201d0:	2000      	movs	r0, #0
	if (!str_val) {
		return false;
	}

	return (strcmp(str_val, val) == 0);
}
   201d2:	bd10      	pop	{r4, pc}
	if (!val) {
   201d4:	b92c      	cbnz	r4, 201e2 <json_item_string_exists+0x36>
		return cJSON_IsNull(item);
   201d6:	f013 fc0e 	bl	339f6 <cJSON_IsNull>
   201da:	3800      	subs	r0, #0
   201dc:	bf18      	it	ne
   201de:	2001      	movne	r0, #1
   201e0:	e7f7      	b.n	201d2 <json_item_string_exists+0x26>
	str_val = cJSON_GetStringValue(item);
   201e2:	f013 fc1c 	bl	33a1e <cJSON_GetStringValue>
	if (!str_val) {
   201e6:	2800      	cmp	r0, #0
   201e8:	d0f2      	beq.n	201d0 <json_item_string_exists+0x24>
	return (strcmp(str_val, val) == 0);
   201ea:	4621      	mov	r1, r4
   201ec:	f7e9 f88b 	bl	9306 <strcmp>
   201f0:	fab0 f080 	clz	r0, r0
   201f4:	0940      	lsrs	r0, r0, #5
   201f6:	e7ec      	b.n	201d2 <json_item_string_exists+0x26>
   201f8:	0003df83 	.word	0x0003df83
   201fc:	000381c3 	.word	0x000381c3
   20200:	0003df36 	.word	0x0003df36

00020204 <nrf_cloud_decode_desired_obj>:
{
   20204:	b538      	push	{r3, r4, r5, lr}
   20206:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   20208:	4605      	mov	r5, r0
   2020a:	b140      	cbz	r0, 2021e <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   2020c:	4904      	ldr	r1, [pc, #16]	; (20220 <nrf_cloud_decode_desired_obj+0x1c>)
   2020e:	f013 f89d 	bl	3334c <json_object_decode>
		if (state_obj == NULL) {
   20212:	b918      	cbnz	r0, 2021c <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, NRF_CLOUD_JSON_KEY_DES);
   20214:	4628      	mov	r0, r5
   20216:	4903      	ldr	r1, [pc, #12]	; (20224 <nrf_cloud_decode_desired_obj+0x20>)
   20218:	f013 f898 	bl	3334c <json_object_decode>
			*desired_obj = state_obj;
   2021c:	6020      	str	r0, [r4, #0]
}
   2021e:	bd38      	pop	{r3, r4, r5, pc}
   20220:	0003a7c8 	.word	0x0003a7c8
   20224:	0003df96 	.word	0x0003df96

00020228 <get_error_code_value.part.0>:
static int get_error_code_value(cJSON *const obj, enum nrf_cloud_error * const err)
   20228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Invalid JSON data type for error value");
   2022a:	4b07      	ldr	r3, [pc, #28]	; (20248 <get_error_code_value.part.0+0x20>)
   2022c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20230:	9305      	str	r3, [sp, #20]
   20232:	2302      	movs	r3, #2
   20234:	4805      	ldr	r0, [pc, #20]	; (2024c <get_error_code_value.part.0+0x24>)
   20236:	aa04      	add	r2, sp, #16
   20238:	9304      	str	r3, [sp, #16]
   2023a:	f013 f8d4 	bl	333e6 <z_log_msg_static_create.constprop.0>
}
   2023e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   20242:	b007      	add	sp, #28
   20244:	f85d fb04 	ldr.w	pc, [sp], #4
   20248:	0003df9e 	.word	0x0003df9e
   2024c:	00036580 	.word	0x00036580

00020250 <get_error_code_value>:
{
   20250:	b538      	push	{r3, r4, r5, lr}
   20252:	460d      	mov	r5, r1
	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   20254:	490b      	ldr	r1, [pc, #44]	; (20284 <get_error_code_value+0x34>)
   20256:	f013 fadd 	bl	33814 <cJSON_GetObjectItem>
	if (!err_obj) {
   2025a:	4604      	mov	r4, r0
   2025c:	b170      	cbz	r0, 2027c <get_error_code_value+0x2c>
	if (!cJSON_IsNumber(err_obj)) {
   2025e:	f013 fbd0 	bl	33a02 <cJSON_IsNumber>
   20262:	b918      	cbnz	r0, 2026c <get_error_code_value+0x1c>
}
   20264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20268:	f7ff bfde 	b.w	20228 <get_error_code_value.part.0>
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   2026c:	4620      	mov	r0, r4
   2026e:	f004 fe1f 	bl	24eb0 <cJSON_GetNumberValue>
   20272:	f7e8 fd05 	bl	8c80 <__aeabi_d2iz>
   20276:	6028      	str	r0, [r5, #0]
	return 0;
   20278:	2000      	movs	r0, #0
}
   2027a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMSG;
   2027c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20280:	e7fb      	b.n	2027a <get_error_code_value+0x2a>
   20282:	bf00      	nop
   20284:	000389fa 	.word	0x000389fa

00020288 <encode_info_item_cs>:
{
   20288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2028a:	4605      	mov	r5, r0
	switch (inf) {
   2028c:	2d01      	cmp	r5, #1
{
   2028e:	460c      	mov	r4, r1
   20290:	4610      	mov	r0, r2
   20292:	461e      	mov	r6, r3
   20294:	af00      	add	r7, sp, #0
	switch (inf) {
   20296:	d003      	beq.n	202a0 <encode_info_item_cs+0x18>
   20298:	2d02      	cmp	r5, #2
   2029a:	d03a      	beq.n	20312 <encode_info_item_cs+0x8a>
	return 0;
   2029c:	2000      	movs	r0, #0
   2029e:	e017      	b.n	202d0 <encode_info_item_cs+0x48>
		move_obj = cJSON_DetachItemFromObject(inf_obj, inf_name);
   202a0:	f013 fae4 	bl	3386c <cJSON_DetachItemFromObject>
		if (!move_obj) {
   202a4:	4605      	mov	r5, r0
   202a6:	b9a8      	cbnz	r0, 202d4 <encode_info_item_cs+0x4c>
			LOG_ERR("Info item \"%s\" not found", inf_name);
   202a8:	466d      	mov	r5, sp
   202aa:	b088      	sub	sp, #32
   202ac:	466a      	mov	r2, sp
   202ae:	4b1e      	ldr	r3, [pc, #120]	; (20328 <encode_info_item_cs+0xa0>)
   202b0:	481e      	ldr	r0, [pc, #120]	; (2032c <encode_info_item_cs+0xa4>)
   202b2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   202b6:	f44f 7300 	mov.w	r3, #512	; 0x200
   202ba:	8393      	strh	r3, [r2, #28]
   202bc:	4b1c      	ldr	r3, [pc, #112]	; (20330 <encode_info_item_cs+0xa8>)
   202be:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   202c2:	f842 3f10 	str.w	r3, [r2, #16]!
   202c6:	f013 f88e 	bl	333e6 <z_log_msg_static_create.constprop.0>
			return -ENOMSG;
   202ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   202ce:	46ad      	mov	sp, r5
}
   202d0:	46bd      	mov	sp, r7
   202d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (json_add_obj_cs(root_obj, inf_name, move_obj)) {
   202d4:	4602      	mov	r2, r0
   202d6:	4621      	mov	r1, r4
   202d8:	4630      	mov	r0, r6
   202da:	f013 f848 	bl	3336e <json_add_obj_cs>
   202de:	2800      	cmp	r0, #0
   202e0:	d0dc      	beq.n	2029c <encode_info_item_cs+0x14>
			cJSON_Delete(move_obj);
   202e2:	4628      	mov	r0, r5
   202e4:	f004 fd08 	bl	24cf8 <cJSON_Delete>
			LOG_ERR("Failed to add info item \"%s\"", inf_name);
   202e8:	466d      	mov	r5, sp
   202ea:	b088      	sub	sp, #32
   202ec:	466a      	mov	r2, sp
   202ee:	4b11      	ldr	r3, [pc, #68]	; (20334 <encode_info_item_cs+0xac>)
			LOG_ERR("Failed to create NULL item for \"%s\"", inf_name);
   202f0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   202f4:	f44f 7300 	mov.w	r3, #512	; 0x200
   202f8:	8393      	strh	r3, [r2, #28]
   202fa:	4b0d      	ldr	r3, [pc, #52]	; (20330 <encode_info_item_cs+0xa8>)
   202fc:	480b      	ldr	r0, [pc, #44]	; (2032c <encode_info_item_cs+0xa4>)
   202fe:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   20302:	f842 3f10 	str.w	r3, [r2, #16]!
   20306:	f013 f86e 	bl	333e6 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   2030a:	f06f 000b 	mvn.w	r0, #11
   2030e:	46ad      	mov	sp, r5
			return -ENOMEM;
   20310:	e7de      	b.n	202d0 <encode_info_item_cs+0x48>
		if (json_add_null_cs(root_obj, inf_name)) {
   20312:	4618      	mov	r0, r3
   20314:	f013 f81e 	bl	33354 <json_add_null_cs>
   20318:	2800      	cmp	r0, #0
   2031a:	d0bf      	beq.n	2029c <encode_info_item_cs+0x14>
			LOG_ERR("Failed to create NULL item for \"%s\"", inf_name);
   2031c:	466d      	mov	r5, sp
   2031e:	b088      	sub	sp, #32
   20320:	466a      	mov	r2, sp
   20322:	4b05      	ldr	r3, [pc, #20]	; (20338 <encode_info_item_cs+0xb0>)
   20324:	e7e4      	b.n	202f0 <encode_info_item_cs+0x68>
   20326:	bf00      	nop
   20328:	0003dfc5 	.word	0x0003dfc5
   2032c:	00036580 	.word	0x00036580
   20330:	01000003 	.word	0x01000003
   20334:	0003dfde 	.word	0x0003dfde
   20338:	0003dffb 	.word	0x0003dffb

0002033c <init_modem_info>:
{
   2033c:	b5b0      	push	{r4, r5, r7, lr}
	if (!modem_inf_initd) {
   2033e:	4d14      	ldr	r5, [pc, #80]	; (20390 <init_modem_info+0x54>)
{
   20340:	af00      	add	r7, sp, #0
	if (!modem_inf_initd) {
   20342:	782b      	ldrb	r3, [r5, #0]
   20344:	b11b      	cbz	r3, 2034e <init_modem_info+0x12>
	return 0;
   20346:	2400      	movs	r4, #0
}
   20348:	4620      	mov	r0, r4
   2034a:	46bd      	mov	sp, r7
   2034c:	bdb0      	pop	{r4, r5, r7, pc}
		err = modem_info_init();
   2034e:	f7ff fd53 	bl	1fdf8 <modem_info_init>
		if (err) {
   20352:	4604      	mov	r4, r0
   20354:	b178      	cbz	r0, 20376 <init_modem_info+0x3a>
			LOG_ERR("modem_info_init() failed: %d", err);
   20356:	466d      	mov	r5, sp
   20358:	b088      	sub	sp, #32
   2035a:	466a      	mov	r2, sp
   2035c:	4b0d      	ldr	r3, [pc, #52]	; (20394 <init_modem_info+0x58>)
			LOG_ERR("modem_info_params_init() failed: %d", err);
   2035e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20362:	2303      	movs	r3, #3
   20364:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20368:	480b      	ldr	r0, [pc, #44]	; (20398 <init_modem_info+0x5c>)
   2036a:	f842 3f10 	str.w	r3, [r2, #16]!
   2036e:	f013 f83a 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20372:	46ad      	mov	sp, r5
			return err;
   20374:	e7e8      	b.n	20348 <init_modem_info+0xc>
		err = modem_info_params_init(&modem_inf);
   20376:	4809      	ldr	r0, [pc, #36]	; (2039c <init_modem_info+0x60>)
   20378:	f7ff fd8e 	bl	1fe98 <modem_info_params_init>
		if (err) {
   2037c:	4604      	mov	r4, r0
   2037e:	b120      	cbz	r0, 2038a <init_modem_info+0x4e>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   20380:	466d      	mov	r5, sp
   20382:	b088      	sub	sp, #32
   20384:	466a      	mov	r2, sp
   20386:	4b06      	ldr	r3, [pc, #24]	; (203a0 <init_modem_info+0x64>)
   20388:	e7e9      	b.n	2035e <init_modem_info+0x22>
		modem_inf_initd = true;
   2038a:	2301      	movs	r3, #1
   2038c:	702b      	strb	r3, [r5, #0]
   2038e:	e7da      	b.n	20346 <init_modem_info+0xa>
   20390:	200127fc 	.word	0x200127fc
   20394:	0003e01f 	.word	0x0003e01f
   20398:	00036580 	.word	0x00036580
   2039c:	2000de20 	.word	0x2000de20
   203a0:	0003e03c 	.word	0x0003e03c

000203a4 <get_modem_info>:
{
   203a4:	b5b0      	push	{r4, r5, r7, lr}
   203a6:	af00      	add	r7, sp, #0
	int err = init_modem_info();
   203a8:	f7ff ffc8 	bl	2033c <init_modem_info>
	if (err) {
   203ac:	4604      	mov	r4, r0
   203ae:	b188      	cbz	r0, 203d4 <get_modem_info+0x30>
		LOG_ERR("Could not initialize modem info module, error: %d", err);
   203b0:	466d      	mov	r5, sp
   203b2:	b088      	sub	sp, #32
   203b4:	466a      	mov	r2, sp
   203b6:	4b0d      	ldr	r3, [pc, #52]	; (203ec <get_modem_info+0x48>)
		LOG_ERR("Could not obtain information from modem, error: %d", err);
   203b8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   203bc:	2303      	movs	r3, #3
   203be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   203c2:	480b      	ldr	r0, [pc, #44]	; (203f0 <get_modem_info+0x4c>)
   203c4:	f842 3f10 	str.w	r3, [r2, #16]!
   203c8:	f013 f80d 	bl	333e6 <z_log_msg_static_create.constprop.0>
   203cc:	46ad      	mov	sp, r5
}
   203ce:	4620      	mov	r0, r4
   203d0:	46bd      	mov	sp, r7
   203d2:	bdb0      	pop	{r4, r5, r7, pc}
	err = modem_info_params_get(&modem_inf);
   203d4:	4807      	ldr	r0, [pc, #28]	; (203f4 <get_modem_info+0x50>)
   203d6:	f7ff fdb5 	bl	1ff44 <modem_info_params_get>
	if (err) {
   203da:	4604      	mov	r4, r0
   203dc:	2800      	cmp	r0, #0
   203de:	d0f6      	beq.n	203ce <get_modem_info+0x2a>
		LOG_ERR("Could not obtain information from modem, error: %d", err);
   203e0:	466d      	mov	r5, sp
   203e2:	b088      	sub	sp, #32
   203e4:	466a      	mov	r2, sp
   203e6:	4b04      	ldr	r3, [pc, #16]	; (203f8 <get_modem_info+0x54>)
   203e8:	e7e6      	b.n	203b8 <get_modem_info+0x14>
   203ea:	bf00      	nop
   203ec:	0003e060 	.word	0x0003e060
   203f0:	00036580 	.word	0x00036580
   203f4:	2000de20 	.word	0x2000de20
   203f8:	0003e092 	.word	0x0003e092

000203fc <nrf_cloud_requested_state_decode>:
{
   203fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   203fe:	b089      	sub	sp, #36	; 0x24
   20400:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   20402:	460e      	mov	r6, r1
{
   20404:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(requested_state != NULL);
   20406:	b959      	cbnz	r1, 20420 <nrf_cloud_requested_state_decode+0x24>
   20408:	4957      	ldr	r1, [pc, #348]	; (20568 <nrf_cloud_requested_state_decode+0x16c>)
   2040a:	f240 1347 	movw	r3, #327	; 0x147
   2040e:	4a57      	ldr	r2, [pc, #348]	; (2056c <nrf_cloud_requested_state_decode+0x170>)
   20410:	4857      	ldr	r0, [pc, #348]	; (20570 <nrf_cloud_requested_state_decode+0x174>)
   20412:	f00e fa9f 	bl	2e954 <assert_print>
   20416:	f240 1147 	movw	r1, #327	; 0x147
	__ASSERT_NO_MSG(input != NULL);
   2041a:	4854      	ldr	r0, [pc, #336]	; (2056c <nrf_cloud_requested_state_decode+0x170>)
   2041c:	f00e fa93 	bl	2e946 <assert_post_action>
   20420:	b948      	cbnz	r0, 20436 <nrf_cloud_requested_state_decode+0x3a>
   20422:	4954      	ldr	r1, [pc, #336]	; (20574 <nrf_cloud_requested_state_decode+0x178>)
   20424:	f44f 73a4 	mov.w	r3, #328	; 0x148
   20428:	4a50      	ldr	r2, [pc, #320]	; (2056c <nrf_cloud_requested_state_decode+0x170>)
   2042a:	4851      	ldr	r0, [pc, #324]	; (20570 <nrf_cloud_requested_state_decode+0x174>)
   2042c:	f00e fa92 	bl	2e954 <assert_print>
   20430:	f44f 71a4 	mov.w	r1, #328	; 0x148
   20434:	e7f1      	b.n	2041a <nrf_cloud_requested_state_decode+0x1e>
	__ASSERT_NO_MSG(input->ptr != NULL);
   20436:	6840      	ldr	r0, [r0, #4]
   20438:	b948      	cbnz	r0, 2044e <nrf_cloud_requested_state_decode+0x52>
   2043a:	494f      	ldr	r1, [pc, #316]	; (20578 <nrf_cloud_requested_state_decode+0x17c>)
   2043c:	f240 1349 	movw	r3, #329	; 0x149
   20440:	4a4a      	ldr	r2, [pc, #296]	; (2056c <nrf_cloud_requested_state_decode+0x170>)
   20442:	484b      	ldr	r0, [pc, #300]	; (20570 <nrf_cloud_requested_state_decode+0x174>)
   20444:	f00e fa86 	bl	2e954 <assert_print>
   20448:	f240 1149 	movw	r1, #329	; 0x149
   2044c:	e7e5      	b.n	2041a <nrf_cloud_requested_state_decode+0x1e>
	__ASSERT_NO_MSG(input->len != 0);
   2044e:	682b      	ldr	r3, [r5, #0]
   20450:	b94b      	cbnz	r3, 20466 <nrf_cloud_requested_state_decode+0x6a>
   20452:	494a      	ldr	r1, [pc, #296]	; (2057c <nrf_cloud_requested_state_decode+0x180>)
   20454:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   20458:	4a44      	ldr	r2, [pc, #272]	; (2056c <nrf_cloud_requested_state_decode+0x170>)
   2045a:	4845      	ldr	r0, [pc, #276]	; (20570 <nrf_cloud_requested_state_decode+0x174>)
   2045c:	f00e fa7a 	bl	2e954 <assert_print>
   20460:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   20464:	e7d9      	b.n	2041a <nrf_cloud_requested_state_decode+0x1e>
	root_obj = cJSON_Parse(input->ptr);
   20466:	f013 f9c0 	bl	337ea <cJSON_Parse>
	if (root_obj == NULL) {
   2046a:	4604      	mov	r4, r0
   2046c:	b9b8      	cbnz	r0, 2049e <nrf_cloud_requested_state_decode+0xa2>
		LOG_ERR("cJSON_Parse failed: %s", (char *)input->ptr);
   2046e:	466c      	mov	r4, sp
   20470:	b088      	sub	sp, #32
   20472:	686b      	ldr	r3, [r5, #4]
   20474:	466a      	mov	r2, sp
   20476:	4942      	ldr	r1, [pc, #264]	; (20580 <nrf_cloud_requested_state_decode+0x184>)
   20478:	4842      	ldr	r0, [pc, #264]	; (20584 <nrf_cloud_requested_state_decode+0x188>)
   2047a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2047e:	f44f 7300 	mov.w	r3, #512	; 0x200
   20482:	8393      	strh	r3, [r2, #28]
   20484:	4b40      	ldr	r3, [pc, #256]	; (20588 <nrf_cloud_requested_state_decode+0x18c>)
   20486:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   2048a:	f842 3f10 	str.w	r3, [r2, #16]!
   2048e:	f012 ffaa 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20492:	46a5      	mov	sp, r4
		return -ENOENT;
   20494:	f06f 0001 	mvn.w	r0, #1
}
   20498:	3724      	adds	r7, #36	; 0x24
   2049a:	46bd      	mov	sp, r7
   2049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2049e:	1d39      	adds	r1, r7, #4
   204a0:	f7ff feb0 	bl	20204 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX);
   204a4:	687d      	ldr	r5, [r7, #4]
   204a6:	4939      	ldr	r1, [pc, #228]	; (2058c <nrf_cloud_requested_state_decode+0x190>)
   204a8:	4628      	mov	r0, r5
   204aa:	f012 ff4f 	bl	3334c <json_object_decode>
	if (topic_prefix_obj != NULL) {
   204ae:	b148      	cbz	r0, 204c4 <nrf_cloud_requested_state_decode+0xc8>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   204b0:	6900      	ldr	r0, [r0, #16]
   204b2:	f001 ff37 	bl	22324 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   204b6:	2307      	movs	r3, #7
	cJSON_Delete(root_obj);
   204b8:	4620      	mov	r0, r4
		(*requested_state) = STATE_UA_PIN_WAIT;
   204ba:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   204bc:	f004 fc1c 	bl	24cf8 <cJSON_Delete>
		return 0;
   204c0:	2000      	movs	r0, #0
   204c2:	e7e9      	b.n	20498 <nrf_cloud_requested_state_decode+0x9c>
	pairing_obj = json_object_decode(desired_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   204c4:	4932      	ldr	r1, [pc, #200]	; (20590 <nrf_cloud_requested_state_decode+0x194>)
   204c6:	4628      	mov	r0, r5
   204c8:	f012 ff40 	bl	3334c <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_STATE);
   204cc:	4931      	ldr	r1, [pc, #196]	; (20594 <nrf_cloud_requested_state_decode+0x198>)
   204ce:	f012 ff3d 	bl	3334c <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   204d2:	b110      	cbz	r0, 204da <nrf_cloud_requested_state_decode+0xde>
   204d4:	68c3      	ldr	r3, [r0, #12]
   204d6:	2b10      	cmp	r3, #16
   204d8:	d02c      	beq.n	20534 <nrf_cloud_requested_state_decode+0x138>
		if ((cJSON_HasObjectItem(desired_obj, NRF_CLOUD_JSON_KEY_CFG) == false) &&
   204da:	4628      	mov	r0, r5
   204dc:	492e      	ldr	r1, [pc, #184]	; (20598 <nrf_cloud_requested_state_decode+0x19c>)
   204de:	f013 f99c 	bl	3381a <cJSON_HasObjectItem>
   204e2:	bb18      	cbnz	r0, 2052c <nrf_cloud_requested_state_decode+0x130>
		    (cJSON_HasObjectItem(desired_obj, NRF_CLOUD_JSON_KEY_CTRL) == false)) {
   204e4:	4628      	mov	r0, r5
   204e6:	492d      	ldr	r1, [pc, #180]	; (2059c <nrf_cloud_requested_state_decode+0x1a0>)
   204e8:	f013 f997 	bl	3381a <cJSON_HasObjectItem>
		if ((cJSON_HasObjectItem(desired_obj, NRF_CLOUD_JSON_KEY_CFG) == false) &&
   204ec:	b9f0      	cbnz	r0, 2052c <nrf_cloud_requested_state_decode+0x130>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   204ee:	2502      	movs	r5, #2
   204f0:	4b2b      	ldr	r3, [pc, #172]	; (205a0 <nrf_cloud_requested_state_decode+0x1a4>)
   204f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   204f6:	4823      	ldr	r0, [pc, #140]	; (20584 <nrf_cloud_requested_state_decode+0x188>)
   204f8:	61fb      	str	r3, [r7, #28]
   204fa:	61bd      	str	r5, [r7, #24]
   204fc:	f107 0218 	add.w	r2, r7, #24
   20500:	f012 ff71 	bl	333e6 <z_log_msg_static_create.constprop.0>
			LOG_INF("Ensure device firmware is up to date.");
   20504:	4b27      	ldr	r3, [pc, #156]	; (205a4 <nrf_cloud_requested_state_decode+0x1a8>)
   20506:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   2050a:	e9c7 5306 	strd	r5, r3, [r7, #24]
   2050e:	481d      	ldr	r0, [pc, #116]	; (20584 <nrf_cloud_requested_state_decode+0x188>)
   20510:	f107 0218 	add.w	r2, r7, #24
   20514:	f012 ff67 	bl	333e6 <z_log_msg_static_create.constprop.0>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   20518:	4b23      	ldr	r3, [pc, #140]	; (205a8 <nrf_cloud_requested_state_decode+0x1ac>)
   2051a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   2051e:	e9c7 5306 	strd	r5, r3, [r7, #24]
   20522:	4818      	ldr	r0, [pc, #96]	; (20584 <nrf_cloud_requested_state_decode+0x188>)
   20524:	f107 0218 	add.w	r2, r7, #24
   20528:	f012 ff5d 	bl	333e6 <z_log_msg_static_create.constprop.0>
		cJSON_Delete(root_obj);
   2052c:	4620      	mov	r0, r4
   2052e:	f004 fbe3 	bl	24cf8 <cJSON_Delete>
		return -ENOENT;
   20532:	e7af      	b.n	20494 <nrf_cloud_requested_state_decode+0x98>
	return !strncmp(s1, s2, strlen(s2));
   20534:	220e      	movs	r2, #14
   20536:	491d      	ldr	r1, [pc, #116]	; (205ac <nrf_cloud_requested_state_decode+0x1b0>)
   20538:	6900      	ldr	r0, [r0, #16]
   2053a:	f014 ff1d 	bl	35378 <strncmp>
	if (compare(state_str, NRF_CLOUD_JSON_VAL_NOT_ASSOC)) {
   2053e:	b908      	cbnz	r0, 20544 <nrf_cloud_requested_state_decode+0x148>
		(*requested_state) = STATE_UA_PIN_WAIT;
   20540:	2306      	movs	r3, #6
   20542:	e7b9      	b.n	204b8 <nrf_cloud_requested_state_decode+0xbc>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   20544:	4b1a      	ldr	r3, [pc, #104]	; (205b0 <nrf_cloud_requested_state_decode+0x1b4>)
   20546:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2054a:	61fb      	str	r3, [r7, #28]
   2054c:	2302      	movs	r3, #2
   2054e:	480d      	ldr	r0, [pc, #52]	; (20584 <nrf_cloud_requested_state_decode+0x188>)
   20550:	61bb      	str	r3, [r7, #24]
   20552:	f107 0218 	add.w	r2, r7, #24
   20556:	f012 ff46 	bl	333e6 <z_log_msg_static_create.constprop.0>
		cJSON_Delete(root_obj);
   2055a:	4620      	mov	r0, r4
   2055c:	f004 fbcc 	bl	24cf8 <cJSON_Delete>
		return -ENOTSUP;
   20560:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20564:	e798      	b.n	20498 <nrf_cloud_requested_state_decode+0x9c>
   20566:	bf00      	nop
   20568:	0003e1ab 	.word	0x0003e1ab
   2056c:	0003df36 	.word	0x0003df36
   20570:	000381c3 	.word	0x000381c3
   20574:	0003e1ca 	.word	0x0003e1ca
   20578:	0003e1df 	.word	0x0003e1df
   2057c:	0003e1f9 	.word	0x0003e1f9
   20580:	0003e209 	.word	0x0003e209
   20584:	00036580 	.word	0x00036580
   20588:	01000003 	.word	0x01000003
   2058c:	0003e220 	.word	0x0003e220
   20590:	0003e23b 	.word	0x0003e23b
   20594:	0003a7c8 	.word	0x0003a7c8
   20598:	0003fa70 	.word	0x0003fa70
   2059c:	0003b720 	.word	0x0003b720
   205a0:	0003e243 	.word	0x0003e243
   205a4:	0003e26b 	.word	0x0003e26b
   205a8:	0003e291 	.word	0x0003e291
   205ac:	0003e2cc 	.word	0x0003e2cc
   205b0:	0003e2db 	.word	0x0003e2db

000205b4 <nrf_cloud_shadow_config_response_encode>:
{
   205b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   205b8:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   205ba:	460f      	mov	r7, r1
   205bc:	b959      	cbnz	r1, 205d6 <nrf_cloud_shadow_config_response_encode+0x22>
   205be:	4943      	ldr	r1, [pc, #268]	; (206cc <nrf_cloud_shadow_config_response_encode+0x118>)
   205c0:	f240 1397 	movw	r3, #407	; 0x197
   205c4:	4a42      	ldr	r2, [pc, #264]	; (206d0 <nrf_cloud_shadow_config_response_encode+0x11c>)
   205c6:	4843      	ldr	r0, [pc, #268]	; (206d4 <nrf_cloud_shadow_config_response_encode+0x120>)
   205c8:	f00e f9c4 	bl	2e954 <assert_print>
   205cc:	f240 1197 	movw	r1, #407	; 0x197
	__ASSERT_NO_MSG(input != NULL);
   205d0:	483f      	ldr	r0, [pc, #252]	; (206d0 <nrf_cloud_shadow_config_response_encode+0x11c>)
   205d2:	f00e f9b8 	bl	2e946 <assert_post_action>
   205d6:	b948      	cbnz	r0, 205ec <nrf_cloud_shadow_config_response_encode+0x38>
   205d8:	493f      	ldr	r1, [pc, #252]	; (206d8 <nrf_cloud_shadow_config_response_encode+0x124>)
   205da:	f44f 73cc 	mov.w	r3, #408	; 0x198
   205de:	4a3c      	ldr	r2, [pc, #240]	; (206d0 <nrf_cloud_shadow_config_response_encode+0x11c>)
   205e0:	483c      	ldr	r0, [pc, #240]	; (206d4 <nrf_cloud_shadow_config_response_encode+0x120>)
   205e2:	f00e f9b7 	bl	2e954 <assert_print>
   205e6:	f44f 71cc 	mov.w	r1, #408	; 0x198
   205ea:	e7f1      	b.n	205d0 <nrf_cloud_shadow_config_response_encode+0x1c>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   205ec:	6840      	ldr	r0, [r0, #4]
   205ee:	f013 f8fc 	bl	337ea <cJSON_Parse>
	if (input_obj == NULL) {
   205f2:	4605      	mov	r5, r0
   205f4:	2800      	cmp	r0, #0
   205f6:	d065      	beq.n	206c4 <nrf_cloud_shadow_config_response_encode+0x110>
	state_obj = cJSON_DetachItemFromObject(input_obj, NRF_CLOUD_JSON_KEY_STATE);
   205f8:	4938      	ldr	r1, [pc, #224]	; (206dc <nrf_cloud_shadow_config_response_encode+0x128>)
   205fa:	f013 f937 	bl	3386c <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   205fe:	1e04      	subs	r4, r0, #0
   20600:	bf14      	ite	ne
   20602:	4620      	movne	r0, r4
   20604:	4628      	moveq	r0, r5
   20606:	4936      	ldr	r1, [pc, #216]	; (206e0 <nrf_cloud_shadow_config_response_encode+0x12c>)
   20608:	f013 f930 	bl	3386c <cJSON_DetachItemFromObject>
   2060c:	4606      	mov	r6, r0
	cJSON_Delete(input_obj);
   2060e:	4628      	mov	r0, r5
   20610:	f004 fb72 	bl	24cf8 <cJSON_Delete>
	if (has_config) {
   20614:	f1b8 0f00 	cmp.w	r8, #0
   20618:	d004      	beq.n	20624 <nrf_cloud_shadow_config_response_encode+0x70>
		*has_config = (config_obj != NULL);
   2061a:	1e33      	subs	r3, r6, #0
   2061c:	bf18      	it	ne
   2061e:	2301      	movne	r3, #1
   20620:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   20624:	b104      	cbz	r4, 20628 <nrf_cloud_shadow_config_response_encode+0x74>
   20626:	b956      	cbnz	r6, 2063e <nrf_cloud_shadow_config_response_encode+0x8a>
		cJSON_Delete(state_obj);
   20628:	4620      	mov	r0, r4
   2062a:	f004 fb65 	bl	24cf8 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2062e:	4630      	mov	r0, r6
   20630:	f004 fb62 	bl	24cf8 <cJSON_Delete>
		output->ptr = NULL;
   20634:	2000      	movs	r0, #0
   20636:	6078      	str	r0, [r7, #4]
	output->len = strlen(buffer);
   20638:	6038      	str	r0, [r7, #0]
		return 0;
   2063a:	2000      	movs	r0, #0
   2063c:	e039      	b.n	206b2 <nrf_cloud_shadow_config_response_encode+0xfe>
	root_obj = cJSON_CreateObject();
   2063e:	f004 fc2b 	bl	24e98 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_DES);
   20642:	4928      	ldr	r1, [pc, #160]	; (206e4 <nrf_cloud_shadow_config_response_encode+0x130>)
	root_obj = cJSON_CreateObject();
   20644:	4605      	mov	r5, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_DES);
   20646:	f013 f9b5 	bl	339b4 <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_REP);
   2064a:	4927      	ldr	r1, [pc, #156]	; (206e8 <nrf_cloud_shadow_config_response_encode+0x134>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_DES);
   2064c:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_REP);
   2064e:	4628      	mov	r0, r5
   20650:	f013 f9b0 	bl	339b4 <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, NRF_CLOUD_JSON_KEY_CFG) ||
   20654:	4922      	ldr	r1, [pc, #136]	; (206e0 <nrf_cloud_shadow_config_response_encode+0x12c>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_REP);
   20656:	4680      	mov	r8, r0
	if (json_add_null_cs(desired_obj, NRF_CLOUD_JSON_KEY_CFG) ||
   20658:	4648      	mov	r0, r9
   2065a:	f012 fe7b 	bl	33354 <json_add_null_cs>
   2065e:	b148      	cbz	r0, 20674 <nrf_cloud_shadow_config_response_encode+0xc0>
		cJSON_Delete(root_obj);
   20660:	4628      	mov	r0, r5
   20662:	f004 fb49 	bl	24cf8 <cJSON_Delete>
		cJSON_Delete(config_obj);
   20666:	4630      	mov	r0, r6
			cJSON_Delete(root_obj);
   20668:	f004 fb46 	bl	24cf8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2066c:	4620      	mov	r0, r4
		cJSON_Delete(root_obj);
   2066e:	f004 fb43 	bl	24cf8 <cJSON_Delete>
	if (buffer == NULL) {
   20672:	e01c      	b.n	206ae <nrf_cloud_shadow_config_response_encode+0xfa>
	    json_add_obj_cs(reported_obj, NRF_CLOUD_JSON_KEY_CFG, config_obj)) {
   20674:	4632      	mov	r2, r6
   20676:	4640      	mov	r0, r8
   20678:	4919      	ldr	r1, [pc, #100]	; (206e0 <nrf_cloud_shadow_config_response_encode+0x12c>)
   2067a:	f012 fe78 	bl	3336e <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, NRF_CLOUD_JSON_KEY_CFG) ||
   2067e:	2800      	cmp	r0, #0
   20680:	d1ee      	bne.n	20660 <nrf_cloud_shadow_config_response_encode+0xac>
	cJSON_Delete(state_obj);
   20682:	4620      	mov	r0, r4
   20684:	f004 fb38 	bl	24cf8 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   20688:	f004 fc06 	bl	24e98 <cJSON_CreateObject>
	if (state_obj) {
   2068c:	4604      	mov	r4, r0
   2068e:	b190      	cbz	r0, 206b6 <nrf_cloud_shadow_config_response_encode+0x102>
		if (json_add_obj_cs(state_obj, NRF_CLOUD_JSON_KEY_STATE, root_obj)) {
   20690:	462a      	mov	r2, r5
   20692:	4912      	ldr	r1, [pc, #72]	; (206dc <nrf_cloud_shadow_config_response_encode+0x128>)
   20694:	f012 fe6b 	bl	3336e <json_add_obj_cs>
   20698:	b108      	cbz	r0, 2069e <nrf_cloud_shadow_config_response_encode+0xea>
			cJSON_Delete(root_obj);
   2069a:	4628      	mov	r0, r5
   2069c:	e7e4      	b.n	20668 <nrf_cloud_shadow_config_response_encode+0xb4>
			buffer = cJSON_PrintUnformatted(state_obj);
   2069e:	4620      	mov	r0, r4
   206a0:	f013 f8a7 	bl	337f2 <cJSON_PrintUnformatted>
   206a4:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   206a6:	4620      	mov	r0, r4
   206a8:	f004 fb26 	bl	24cf8 <cJSON_Delete>
	if (buffer == NULL) {
   206ac:	b92d      	cbnz	r5, 206ba <nrf_cloud_shadow_config_response_encode+0x106>
		return -ENOMEM;
   206ae:	f06f 000b 	mvn.w	r0, #11
}
   206b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(root_obj);
   206b6:	4628      	mov	r0, r5
   206b8:	e7d9      	b.n	2066e <nrf_cloud_shadow_config_response_encode+0xba>
	output->len = strlen(buffer);
   206ba:	4628      	mov	r0, r5
	output->ptr = buffer;
   206bc:	607d      	str	r5, [r7, #4]
	output->len = strlen(buffer);
   206be:	f7e8 fe2c 	bl	931a <strlen>
	return 0;
   206c2:	e7b9      	b.n	20638 <nrf_cloud_shadow_config_response_encode+0x84>
		return -ESRCH; /* invalid input or no JSON parsed */
   206c4:	f06f 0002 	mvn.w	r0, #2
   206c8:	e7f3      	b.n	206b2 <nrf_cloud_shadow_config_response_encode+0xfe>
   206ca:	bf00      	nop
   206cc:	0003e151 	.word	0x0003e151
   206d0:	0003df36 	.word	0x0003df36
   206d4:	000381c3 	.word	0x000381c3
   206d8:	0003e1ca 	.word	0x0003e1ca
   206dc:	0003a7c8 	.word	0x0003a7c8
   206e0:	0003fa70 	.word	0x0003fa70
   206e4:	0003df96 	.word	0x0003df96
   206e8:	0003e334 	.word	0x0003e334

000206ec <nrf_cloud_shadow_control_decode>:
{
   206ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   206f0:	b086      	sub	sp, #24
   206f2:	4688      	mov	r8, r1
   206f4:	4615      	mov	r5, r2
   206f6:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(input != NULL);
   206f8:	b958      	cbnz	r0, 20712 <nrf_cloud_shadow_control_decode+0x26>
   206fa:	4962      	ldr	r1, [pc, #392]	; (20884 <nrf_cloud_shadow_control_decode+0x198>)
   206fc:	f240 13e3 	movw	r3, #483	; 0x1e3
   20700:	4a61      	ldr	r2, [pc, #388]	; (20888 <nrf_cloud_shadow_control_decode+0x19c>)
   20702:	4862      	ldr	r0, [pc, #392]	; (2088c <nrf_cloud_shadow_control_decode+0x1a0>)
   20704:	f00e f926 	bl	2e954 <assert_print>
   20708:	f240 11e3 	movw	r1, #483	; 0x1e3
	__ASSERT_NO_MSG(status != NULL);
   2070c:	485e      	ldr	r0, [pc, #376]	; (20888 <nrf_cloud_shadow_control_decode+0x19c>)
   2070e:	f00e f91a 	bl	2e946 <assert_post_action>
   20712:	b949      	cbnz	r1, 20728 <nrf_cloud_shadow_control_decode+0x3c>
   20714:	495e      	ldr	r1, [pc, #376]	; (20890 <nrf_cloud_shadow_control_decode+0x1a4>)
   20716:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   2071a:	4a5b      	ldr	r2, [pc, #364]	; (20888 <nrf_cloud_shadow_control_decode+0x19c>)
   2071c:	485b      	ldr	r0, [pc, #364]	; (2088c <nrf_cloud_shadow_control_decode+0x1a0>)
   2071e:	f00e f919 	bl	2e954 <assert_print>
   20722:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   20726:	e7f1      	b.n	2070c <nrf_cloud_shadow_control_decode+0x20>
	__ASSERT_NO_MSG(data != NULL);
   20728:	b94a      	cbnz	r2, 2073e <nrf_cloud_shadow_control_decode+0x52>
   2072a:	495a      	ldr	r1, [pc, #360]	; (20894 <nrf_cloud_shadow_control_decode+0x1a8>)
   2072c:	f240 13e5 	movw	r3, #485	; 0x1e5
   20730:	4a55      	ldr	r2, [pc, #340]	; (20888 <nrf_cloud_shadow_control_decode+0x19c>)
   20732:	4856      	ldr	r0, [pc, #344]	; (2088c <nrf_cloud_shadow_control_decode+0x1a0>)
   20734:	f00e f90e 	bl	2e954 <assert_print>
   20738:	f240 11e5 	movw	r1, #485	; 0x1e5
   2073c:	e7e6      	b.n	2070c <nrf_cloud_shadow_control_decode+0x20>
	cJSON *input_obj = cJSON_Parse(input->ptr);
   2073e:	6840      	ldr	r0, [r0, #4]
   20740:	f013 f853 	bl	337ea <cJSON_Parse>
	if (input_obj == NULL) {
   20744:	4606      	mov	r6, r0
   20746:	2800      	cmp	r0, #0
   20748:	f000 8098 	beq.w	2087c <nrf_cloud_shadow_control_decode+0x190>
	state_obj = cJSON_GetObjectItem(input_obj, NRF_CLOUD_JSON_KEY_STATE);
   2074c:	4952      	ldr	r1, [pc, #328]	; (20898 <nrf_cloud_shadow_control_decode+0x1ac>)
   2074e:	f013 f861 	bl	33814 <cJSON_GetObjectItem>
	if (state_obj) {
   20752:	b9b0      	cbnz	r0, 20782 <nrf_cloud_shadow_control_decode+0x96>
		state_obj = cJSON_GetObjectItem(input_obj, NRF_CLOUD_JSON_KEY_DES);
   20754:	4630      	mov	r0, r6
   20756:	4951      	ldr	r1, [pc, #324]	; (2089c <nrf_cloud_shadow_control_decode+0x1b0>)
   20758:	f013 f85c 	bl	33814 <cJSON_GetObjectItem>
		if (state_obj) {
   2075c:	2800      	cmp	r0, #0
   2075e:	d167      	bne.n	20830 <nrf_cloud_shadow_control_decode+0x144>
		state_obj = cJSON_GetObjectItem(input_obj, NRF_CLOUD_JSON_KEY_REP);
   20760:	4630      	mov	r0, r6
   20762:	494f      	ldr	r1, [pc, #316]	; (208a0 <nrf_cloud_shadow_control_decode+0x1b4>)
   20764:	f013 f856 	bl	33814 <cJSON_GetObjectItem>
		if (state_obj) {
   20768:	2800      	cmp	r0, #0
   2076a:	d168      	bne.n	2083e <nrf_cloud_shadow_control_decode+0x152>
		goto end;
   2076c:	2300      	movs	r3, #0
	cJSON_Delete(input_obj);
   2076e:	4630      	mov	r0, r6
		*status = NRF_CLOUD_CTRL_NOT_PRESENT;
   20770:	f888 3000 	strb.w	r3, [r8]
	cJSON_Delete(input_obj);
   20774:	f004 fac0 	bl	24cf8 <cJSON_Delete>
	return 0;
   20778:	2000      	movs	r0, #0
}
   2077a:	3718      	adds	r7, #24
   2077c:	46bd      	mov	sp, r7
   2077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		control_obj = cJSON_GetObjectItem(state_obj, NRF_CLOUD_JSON_KEY_CTRL);
   20782:	4948      	ldr	r1, [pc, #288]	; (208a4 <nrf_cloud_shadow_control_decode+0x1b8>)
   20784:	f013 f846 	bl	33814 <cJSON_GetObjectItem>
	if (control_obj == NULL) {
   20788:	4604      	mov	r4, r0
   2078a:	2800      	cmp	r0, #0
   2078c:	d0e2      	beq.n	20754 <nrf_cloud_shadow_control_decode+0x68>
	alert_obj = cJSON_GetObjectItem(control_obj, NRF_CLOUD_JSON_KEY_ALERT);
   2078e:	4620      	mov	r0, r4
   20790:	4945      	ldr	r1, [pc, #276]	; (208a8 <nrf_cloud_shadow_control_decode+0x1bc>)
   20792:	f013 f83f 	bl	33814 <cJSON_GetObjectItem>
	if (alert_obj == NULL) {
   20796:	4681      	mov	r9, r0
   20798:	b300      	cbz	r0, 207dc <nrf_cloud_shadow_control_decode+0xf0>
	} else if (cJSON_IsBool(alert_obj)) {
   2079a:	f013 f925 	bl	339e8 <cJSON_IsBool>
   2079e:	2800      	cmp	r0, #0
   207a0:	d054      	beq.n	2084c <nrf_cloud_shadow_control_decode+0x160>
		if (data->alerts_enabled != cJSON_IsTrue(alert_obj)) {
   207a2:	4648      	mov	r0, r9
   207a4:	f895 a000 	ldrb.w	sl, [r5]
   207a8:	f013 f918 	bl	339dc <cJSON_IsTrue>
   207ac:	4582      	cmp	sl, r0
   207ae:	d015      	beq.n	207dc <nrf_cloud_shadow_control_decode+0xf0>
			data->alerts_enabled = cJSON_IsTrue(alert_obj);
   207b0:	4648      	mov	r0, r9
   207b2:	f013 f913 	bl	339dc <cJSON_IsTrue>
   207b6:	3800      	subs	r0, #0
   207b8:	bf18      	it	ne
   207ba:	2001      	movne	r0, #1
			LOG_INF("AlertsEn changed to %u", data->alerts_enabled);
   207bc:	46e9      	mov	r9, sp
   207be:	b088      	sub	sp, #32
			data->alerts_enabled = cJSON_IsTrue(alert_obj);
   207c0:	7028      	strb	r0, [r5, #0]
			LOG_INF("AlertsEn changed to %u", data->alerts_enabled);
   207c2:	466a      	mov	r2, sp
   207c4:	4b39      	ldr	r3, [pc, #228]	; (208ac <nrf_cloud_shadow_control_decode+0x1c0>)
   207c6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   207ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
   207ce:	2303      	movs	r3, #3
   207d0:	4837      	ldr	r0, [pc, #220]	; (208b0 <nrf_cloud_shadow_control_decode+0x1c4>)
   207d2:	f842 3f10 	str.w	r3, [r2, #16]!
   207d6:	f012 fe06 	bl	333e6 <z_log_msg_static_create.constprop.0>
   207da:	46cd      	mov	sp, r9
	log_obj = cJSON_GetObjectItem(control_obj, NRF_CLOUD_JSON_KEY_LOG);
   207dc:	4620      	mov	r0, r4
   207de:	4935      	ldr	r1, [pc, #212]	; (208b4 <nrf_cloud_shadow_control_decode+0x1c8>)
   207e0:	f013 f818 	bl	33814 <cJSON_GetObjectItem>
	if (log_obj == NULL) {
   207e4:	4604      	mov	r4, r0
   207e6:	b308      	cbz	r0, 2082c <nrf_cloud_shadow_control_decode+0x140>
	} else if (cJSON_IsNumber(log_obj)) {
   207e8:	f013 f90b 	bl	33a02 <cJSON_IsNumber>
   207ec:	2800      	cmp	r0, #0
   207ee:	d039      	beq.n	20864 <nrf_cloud_shadow_control_decode+0x178>
		if (data->log_level != (int)cJSON_GetNumberValue(log_obj)) {
   207f0:	4620      	mov	r0, r4
   207f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
   207f6:	f004 fb5b 	bl	24eb0 <cJSON_GetNumberValue>
   207fa:	f7e8 fa41 	bl	8c80 <__aeabi_d2iz>
   207fe:	4581      	cmp	r9, r0
   20800:	d014      	beq.n	2082c <nrf_cloud_shadow_control_decode+0x140>
			data->log_level = (int)cJSON_GetNumberValue(log_obj);
   20802:	4620      	mov	r0, r4
   20804:	f004 fb54 	bl	24eb0 <cJSON_GetNumberValue>
   20808:	f7e8 fa3a 	bl	8c80 <__aeabi_d2iz>
			LOG_INF("LogLvl changed to %u", data->log_level);
   2080c:	466c      	mov	r4, sp
   2080e:	b088      	sub	sp, #32
			data->log_level = (int)cJSON_GetNumberValue(log_obj);
   20810:	6068      	str	r0, [r5, #4]
			LOG_INF("LogLvl changed to %u", data->log_level);
   20812:	466a      	mov	r2, sp
   20814:	4b28      	ldr	r3, [pc, #160]	; (208b8 <nrf_cloud_shadow_control_decode+0x1cc>)
   20816:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   2081a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2081e:	2303      	movs	r3, #3
   20820:	4823      	ldr	r0, [pc, #140]	; (208b0 <nrf_cloud_shadow_control_decode+0x1c4>)
   20822:	f842 3f10 	str.w	r3, [r2, #16]!
   20826:	f012 fdde 	bl	333e6 <z_log_msg_static_create.constprop.0>
   2082a:	46a5      	mov	sp, r4
		goto end;
   2082c:	2302      	movs	r3, #2
   2082e:	e79e      	b.n	2076e <nrf_cloud_shadow_control_decode+0x82>
			control_obj = cJSON_GetObjectItem(state_obj, NRF_CLOUD_JSON_KEY_CTRL);
   20830:	491c      	ldr	r1, [pc, #112]	; (208a4 <nrf_cloud_shadow_control_decode+0x1b8>)
   20832:	f012 ffef 	bl	33814 <cJSON_GetObjectItem>
	if (control_obj == NULL) {
   20836:	4604      	mov	r4, r0
   20838:	2800      	cmp	r0, #0
   2083a:	d1a8      	bne.n	2078e <nrf_cloud_shadow_control_decode+0xa2>
   2083c:	e790      	b.n	20760 <nrf_cloud_shadow_control_decode+0x74>
			control_obj = cJSON_GetObjectItem(state_obj, NRF_CLOUD_JSON_KEY_CTRL);
   2083e:	4919      	ldr	r1, [pc, #100]	; (208a4 <nrf_cloud_shadow_control_decode+0x1b8>)
   20840:	f012 ffe8 	bl	33814 <cJSON_GetObjectItem>
	if (control_obj == NULL) {
   20844:	4604      	mov	r4, r0
   20846:	2800      	cmp	r0, #0
   20848:	d1a1      	bne.n	2078e <nrf_cloud_shadow_control_decode+0xa2>
   2084a:	e78f      	b.n	2076c <nrf_cloud_shadow_control_decode+0x80>
		LOG_WRN(NRF_CLOUD_JSON_KEY_ALERT " is not a bool");
   2084c:	4b1b      	ldr	r3, [pc, #108]	; (208bc <nrf_cloud_shadow_control_decode+0x1d0>)
   2084e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20852:	617b      	str	r3, [r7, #20]
   20854:	2302      	movs	r3, #2
   20856:	4816      	ldr	r0, [pc, #88]	; (208b0 <nrf_cloud_shadow_control_decode+0x1c4>)
   20858:	613b      	str	r3, [r7, #16]
   2085a:	f107 0210 	add.w	r2, r7, #16
   2085e:	f012 fdc2 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20862:	e7bb      	b.n	207dc <nrf_cloud_shadow_control_decode+0xf0>
		LOG_WRN(NRF_CLOUD_JSON_KEY_LOG " is not a number");
   20864:	4b16      	ldr	r3, [pc, #88]	; (208c0 <nrf_cloud_shadow_control_decode+0x1d4>)
   20866:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2086a:	617b      	str	r3, [r7, #20]
   2086c:	2302      	movs	r3, #2
   2086e:	4810      	ldr	r0, [pc, #64]	; (208b0 <nrf_cloud_shadow_control_decode+0x1c4>)
   20870:	613b      	str	r3, [r7, #16]
   20872:	f107 0210 	add.w	r2, r7, #16
   20876:	f012 fdb6 	bl	333e6 <z_log_msg_static_create.constprop.0>
   2087a:	e7d7      	b.n	2082c <nrf_cloud_shadow_control_decode+0x140>
		return -ESRCH; /* invalid input or no JSON parsed */
   2087c:	f06f 0002 	mvn.w	r0, #2
   20880:	e77b      	b.n	2077a <nrf_cloud_shadow_control_decode+0x8e>
   20882:	bf00      	nop
   20884:	0003e1ca 	.word	0x0003e1ca
   20888:	0003df36 	.word	0x0003df36
   2088c:	000381c3 	.word	0x000381c3
   20890:	0003e33d 	.word	0x0003e33d
   20894:	0003e353 	.word	0x0003e353
   20898:	0003a7c8 	.word	0x0003a7c8
   2089c:	0003df96 	.word	0x0003df96
   208a0:	0003e334 	.word	0x0003e334
   208a4:	0003b720 	.word	0x0003b720
   208a8:	0003e367 	.word	0x0003e367
   208ac:	0003e370 	.word	0x0003e370
   208b0:	00036580 	.word	0x00036580
   208b4:	0003e39e 	.word	0x0003e39e
   208b8:	0003e3a5 	.word	0x0003e3a5
   208bc:	0003e387 	.word	0x0003e387
   208c0:	0003e3ba 	.word	0x0003e3ba

000208c4 <nrf_cloud_shadow_control_response_encode>:
{
   208c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   208c8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(data != NULL);
   208ca:	4604      	mov	r4, r0
   208cc:	b958      	cbnz	r0, 208e6 <nrf_cloud_shadow_control_response_encode+0x22>
   208ce:	4929      	ldr	r1, [pc, #164]	; (20974 <nrf_cloud_shadow_control_response_encode+0xb0>)
   208d0:	f240 2342 	movw	r3, #578	; 0x242
   208d4:	4a28      	ldr	r2, [pc, #160]	; (20978 <nrf_cloud_shadow_control_response_encode+0xb4>)
   208d6:	4829      	ldr	r0, [pc, #164]	; (2097c <nrf_cloud_shadow_control_response_encode+0xb8>)
   208d8:	f00e f83c 	bl	2e954 <assert_print>
   208dc:	f240 2142 	movw	r1, #578	; 0x242
	__ASSERT_NO_MSG(output != NULL);
   208e0:	4825      	ldr	r0, [pc, #148]	; (20978 <nrf_cloud_shadow_control_response_encode+0xb4>)
   208e2:	f00e f830 	bl	2e946 <assert_post_action>
   208e6:	b949      	cbnz	r1, 208fc <nrf_cloud_shadow_control_response_encode+0x38>
   208e8:	4925      	ldr	r1, [pc, #148]	; (20980 <nrf_cloud_shadow_control_response_encode+0xbc>)
   208ea:	f240 2343 	movw	r3, #579	; 0x243
   208ee:	4a22      	ldr	r2, [pc, #136]	; (20978 <nrf_cloud_shadow_control_response_encode+0xb4>)
   208f0:	4822      	ldr	r0, [pc, #136]	; (2097c <nrf_cloud_shadow_control_response_encode+0xb8>)
   208f2:	f00e f82f 	bl	2e954 <assert_print>
   208f6:	f240 2143 	movw	r1, #579	; 0x243
   208fa:	e7f1      	b.n	208e0 <nrf_cloud_shadow_control_response_encode+0x1c>
	cJSON *root_obj = cJSON_CreateObject();
   208fc:	f004 facc 	bl	24e98 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   20900:	4920      	ldr	r1, [pc, #128]	; (20984 <nrf_cloud_shadow_control_response_encode+0xc0>)
	cJSON *root_obj = cJSON_CreateObject();
   20902:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   20904:	f013 f856 	bl	339b4 <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   20908:	491f      	ldr	r1, [pc, #124]	; (20988 <nrf_cloud_shadow_control_response_encode+0xc4>)
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   2090a:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   2090c:	f013 f852 	bl	339b4 <cJSON_AddObjectToObjectCS>
	cJSON *control_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_CTRL);
   20910:	491e      	ldr	r1, [pc, #120]	; (2098c <nrf_cloud_shadow_control_response_encode+0xc8>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   20912:	4681      	mov	r9, r0
	cJSON *control_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_CTRL);
   20914:	f013 f84e 	bl	339b4 <cJSON_AddObjectToObjectCS>
	int alert_ret = json_add_bool_cs(control_obj, NRF_CLOUD_JSON_KEY_ALERT,
   20918:	7822      	ldrb	r2, [r4, #0]
   2091a:	491d      	ldr	r1, [pc, #116]	; (20990 <nrf_cloud_shadow_control_response_encode+0xcc>)
	cJSON *control_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_CTRL);
   2091c:	4680      	mov	r8, r0
	int alert_ret = json_add_bool_cs(control_obj, NRF_CLOUD_JSON_KEY_ALERT,
   2091e:	f012 fd65 	bl	333ec <json_add_bool_cs>
   20922:	4607      	mov	r7, r0
	int log_ret = json_add_num_cs(control_obj, NRF_CLOUD_JSON_KEY_LOG, data->log_level);
   20924:	6860      	ldr	r0, [r4, #4]
   20926:	f7e7 fe91 	bl	864c <__aeabi_i2d>
   2092a:	4602      	mov	r2, r0
   2092c:	460b      	mov	r3, r1
   2092e:	4640      	mov	r0, r8
   20930:	4918      	ldr	r1, [pc, #96]	; (20994 <nrf_cloud_shadow_control_response_encode+0xd0>)
   20932:	f012 fcfe 	bl	33332 <json_add_num_cs>
   20936:	4604      	mov	r4, r0
	if (!(root_obj && state_obj && reported_obj && control_obj &&
   20938:	b93d      	cbnz	r5, 2094a <nrf_cloud_shadow_control_response_encode+0x86>
		err = -ENOMEM;
   2093a:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(root_obj);
   2093e:	4628      	mov	r0, r5
   20940:	f004 f9da 	bl	24cf8 <cJSON_Delete>
}
   20944:	4620      	mov	r0, r4
   20946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(root_obj && state_obj && reported_obj && control_obj &&
   2094a:	f1ba 0f00 	cmp.w	sl, #0
   2094e:	d0f4      	beq.n	2093a <nrf_cloud_shadow_control_response_encode+0x76>
   20950:	f1b9 0f00 	cmp.w	r9, #0
   20954:	d0f1      	beq.n	2093a <nrf_cloud_shadow_control_response_encode+0x76>
   20956:	f1b8 0f00 	cmp.w	r8, #0
   2095a:	d0ee      	beq.n	2093a <nrf_cloud_shadow_control_response_encode+0x76>
   2095c:	433c      	orrs	r4, r7
   2095e:	d1ec      	bne.n	2093a <nrf_cloud_shadow_control_response_encode+0x76>
	buffer = cJSON_PrintUnformatted(root_obj);
   20960:	4628      	mov	r0, r5
   20962:	f012 ff46 	bl	337f2 <cJSON_PrintUnformatted>
	if (!buffer) {
   20966:	2800      	cmp	r0, #0
   20968:	d0e7      	beq.n	2093a <nrf_cloud_shadow_control_response_encode+0x76>
	output->ptr = buffer;
   2096a:	6070      	str	r0, [r6, #4]
	output->len = strlen(buffer);
   2096c:	f7e8 fcd5 	bl	931a <strlen>
   20970:	6030      	str	r0, [r6, #0]
   20972:	e7e4      	b.n	2093e <nrf_cloud_shadow_control_response_encode+0x7a>
   20974:	0003e353 	.word	0x0003e353
   20978:	0003df36 	.word	0x0003df36
   2097c:	000381c3 	.word	0x000381c3
   20980:	0003e151 	.word	0x0003e151
   20984:	0003a7c8 	.word	0x0003a7c8
   20988:	0003e334 	.word	0x0003e334
   2098c:	0003b720 	.word	0x0003b720
   20990:	0003e367 	.word	0x0003e367
   20994:	0003e39e 	.word	0x0003e39e

00020998 <nrf_cloud_data_endpoint_decode>:
{
   20998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2099c:	b08b      	sub	sp, #44	; 0x2c
   2099e:	4699      	mov	r9, r3
   209a0:	460e      	mov	r6, r1
   209a2:	4692      	mov	sl, r2
	__ASSERT_NO_MSG(input != NULL);
   209a4:	4603      	mov	r3, r0
{
   209a6:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(input != NULL);
   209a8:	b958      	cbnz	r0, 209c2 <nrf_cloud_data_endpoint_decode+0x2a>
   209aa:	4988      	ldr	r1, [pc, #544]	; (20bcc <nrf_cloud_data_endpoint_decode+0x234>)
   209ac:	f240 3302 	movw	r3, #770	; 0x302
   209b0:	4a87      	ldr	r2, [pc, #540]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   209b2:	4888      	ldr	r0, [pc, #544]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   209b4:	f00d ffce 	bl	2e954 <assert_print>
   209b8:	f240 3102 	movw	r1, #770	; 0x302
	__ASSERT_NO_MSG(input->ptr != NULL);
   209bc:	4884      	ldr	r0, [pc, #528]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   209be:	f00d ffc2 	bl	2e946 <assert_post_action>
   209c2:	6840      	ldr	r0, [r0, #4]
   209c4:	b948      	cbnz	r0, 209da <nrf_cloud_data_endpoint_decode+0x42>
   209c6:	4984      	ldr	r1, [pc, #528]	; (20bd8 <nrf_cloud_data_endpoint_decode+0x240>)
   209c8:	f240 3303 	movw	r3, #771	; 0x303
   209cc:	4a80      	ldr	r2, [pc, #512]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   209ce:	4881      	ldr	r0, [pc, #516]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   209d0:	f00d ffc0 	bl	2e954 <assert_print>
   209d4:	f240 3103 	movw	r1, #771	; 0x303
   209d8:	e7f0      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	__ASSERT_NO_MSG(input->len != 0);
   209da:	681b      	ldr	r3, [r3, #0]
   209dc:	b94b      	cbnz	r3, 209f2 <nrf_cloud_data_endpoint_decode+0x5a>
   209de:	497f      	ldr	r1, [pc, #508]	; (20bdc <nrf_cloud_data_endpoint_decode+0x244>)
   209e0:	f44f 7341 	mov.w	r3, #772	; 0x304
   209e4:	4a7a      	ldr	r2, [pc, #488]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   209e6:	487b      	ldr	r0, [pc, #492]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   209e8:	f00d ffb4 	bl	2e954 <assert_print>
   209ec:	f44f 7141 	mov.w	r1, #772	; 0x304
   209f0:	e7e4      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   209f2:	b949      	cbnz	r1, 20a08 <nrf_cloud_data_endpoint_decode+0x70>
   209f4:	497a      	ldr	r1, [pc, #488]	; (20be0 <nrf_cloud_data_endpoint_decode+0x248>)
   209f6:	f240 3305 	movw	r3, #773	; 0x305
   209fa:	4a75      	ldr	r2, [pc, #468]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   209fc:	4875      	ldr	r0, [pc, #468]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   209fe:	f00d ffa9 	bl	2e954 <assert_print>
   20a02:	f240 3105 	movw	r1, #773	; 0x305
   20a06:	e7d9      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   20a08:	b94a      	cbnz	r2, 20a1e <nrf_cloud_data_endpoint_decode+0x86>
   20a0a:	4976      	ldr	r1, [pc, #472]	; (20be4 <nrf_cloud_data_endpoint_decode+0x24c>)
   20a0c:	f240 3306 	movw	r3, #774	; 0x306
   20a10:	4a6f      	ldr	r2, [pc, #444]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   20a12:	4870      	ldr	r0, [pc, #448]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   20a14:	f00d ff9e 	bl	2e954 <assert_print>
   20a18:	f240 3106 	movw	r1, #774	; 0x306
   20a1c:	e7ce      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	__ASSERT_NO_MSG(bulk_endpoint != NULL);
   20a1e:	f1b9 0f00 	cmp.w	r9, #0
   20a22:	d109      	bne.n	20a38 <nrf_cloud_data_endpoint_decode+0xa0>
   20a24:	4970      	ldr	r1, [pc, #448]	; (20be8 <nrf_cloud_data_endpoint_decode+0x250>)
   20a26:	f240 3307 	movw	r3, #775	; 0x307
   20a2a:	4a69      	ldr	r2, [pc, #420]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   20a2c:	4869      	ldr	r0, [pc, #420]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   20a2e:	f00d ff91 	bl	2e954 <assert_print>
   20a32:	f240 3107 	movw	r1, #775	; 0x307
   20a36:	e7c1      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	__ASSERT_NO_MSG(bin_endpoint != NULL);
   20a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20a3a:	b94b      	cbnz	r3, 20a50 <nrf_cloud_data_endpoint_decode+0xb8>
   20a3c:	496b      	ldr	r1, [pc, #428]	; (20bec <nrf_cloud_data_endpoint_decode+0x254>)
   20a3e:	f44f 7342 	mov.w	r3, #776	; 0x308
   20a42:	4a63      	ldr	r2, [pc, #396]	; (20bd0 <nrf_cloud_data_endpoint_decode+0x238>)
   20a44:	4863      	ldr	r0, [pc, #396]	; (20bd4 <nrf_cloud_data_endpoint_decode+0x23c>)
   20a46:	f00d ff85 	bl	2e954 <assert_print>
   20a4a:	f44f 7142 	mov.w	r1, #776	; 0x308
   20a4e:	e7b5      	b.n	209bc <nrf_cloud_data_endpoint_decode+0x24>
	cJSON *desired_obj = NULL;
   20a50:	2300      	movs	r3, #0
   20a52:	607b      	str	r3, [r7, #4]
	root_obj = cJSON_Parse(input->ptr);
   20a54:	f012 fec9 	bl	337ea <cJSON_Parse>
	if (root_obj == NULL) {
   20a58:	4605      	mov	r5, r0
   20a5a:	b310      	cbz	r0, 20aa2 <nrf_cloud_data_endpoint_decode+0x10a>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   20a5c:	1d39      	adds	r1, r7, #4
   20a5e:	f7ff fbd1 	bl	20204 <nrf_cloud_decode_desired_obj>
	if (m_endpoint != NULL) {
   20a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20a64:	b323      	cbz	r3, 20ab0 <nrf_cloud_data_endpoint_decode+0x118>
		m_endpoint_obj = json_object_decode(
   20a66:	4962      	ldr	r1, [pc, #392]	; (20bf0 <nrf_cloud_data_endpoint_decode+0x258>)
   20a68:	6878      	ldr	r0, [r7, #4]
   20a6a:	f012 fc6f 	bl	3334c <json_object_decode>
   20a6e:	4604      	mov	r4, r0
	cJSON *pairing_obj = json_object_decode(desired_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   20a70:	4960      	ldr	r1, [pc, #384]	; (20bf4 <nrf_cloud_data_endpoint_decode+0x25c>)
   20a72:	6878      	ldr	r0, [r7, #4]
   20a74:	f012 fc6a 	bl	3334c <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_STATE);
   20a78:	495f      	ldr	r1, [pc, #380]	; (20bf8 <nrf_cloud_data_endpoint_decode+0x260>)
	cJSON *pairing_obj = json_object_decode(desired_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   20a7a:	4680      	mov	r8, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_STATE);
   20a7c:	f012 fc66 	bl	3334c <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_TOPICS);
   20a80:	495e      	ldr	r1, [pc, #376]	; (20bfc <nrf_cloud_data_endpoint_decode+0x264>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_STATE);
   20a82:	4683      	mov	fp, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, NRF_CLOUD_JSON_KEY_TOPICS);
   20a84:	4640      	mov	r0, r8
   20a86:	f012 fc61 	bl	3334c <json_object_decode>
   20a8a:	4680      	mov	r8, r0
	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   20a8c:	f1bb 0f00 	cmp.w	fp, #0
   20a90:	d004      	beq.n	20a9c <nrf_cloud_data_endpoint_decode+0x104>
   20a92:	b118      	cbz	r0, 20a9c <nrf_cloud_data_endpoint_decode+0x104>
   20a94:	f8db 200c 	ldr.w	r2, [fp, #12]
   20a98:	2a10      	cmp	r2, #16
   20a9a:	d00b      	beq.n	20ab4 <nrf_cloud_data_endpoint_decode+0x11c>
		cJSON_Delete(root_obj);
   20a9c:	4628      	mov	r0, r5
   20a9e:	f004 f92b 	bl	24cf8 <cJSON_Delete>
		return -ENOENT;
   20aa2:	f06f 0401 	mvn.w	r4, #1
}
   20aa6:	4620      	mov	r0, r4
   20aa8:	3724      	adds	r7, #36	; 0x24
   20aaa:	46bd      	mov	sp, r7
   20aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *m_endpoint_obj = NULL;
   20ab0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
   20ab2:	e7dd      	b.n	20a70 <nrf_cloud_data_endpoint_decode+0xd8>
	return !strncmp(s1, s2, strlen(s2));
   20ab4:	2206      	movs	r2, #6
   20ab6:	4952      	ldr	r1, [pc, #328]	; (20c00 <nrf_cloud_data_endpoint_decode+0x268>)
   20ab8:	f8db 0010 	ldr.w	r0, [fp, #16]
   20abc:	f014 fc5c 	bl	35378 <strncmp>
	if (!compare(state_str, NRF_CLOUD_JSON_VAL_PAIRED)) {
   20ac0:	2800      	cmp	r0, #0
   20ac2:	d1eb      	bne.n	20a9c <nrf_cloud_data_endpoint_decode+0x104>
	if (m_endpoint_obj != NULL) {
   20ac4:	b14c      	cbz	r4, 20ada <nrf_cloud_data_endpoint_decode+0x142>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   20ac6:	4620      	mov	r0, r4
   20ac8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   20aca:	f012 fc74 	bl	333b6 <json_decode_and_alloc>
		if (err) {
   20ace:	4604      	mov	r4, r0
   20ad0:	b118      	cbz	r0, 20ada <nrf_cloud_data_endpoint_decode+0x142>
			cJSON_Delete(root_obj);
   20ad2:	4628      	mov	r0, r5
	cJSON_Delete(root_obj);
   20ad4:	f004 f910 	bl	24cf8 <cJSON_Delete>
	return err;
   20ad8:	e7e5      	b.n	20aa6 <nrf_cloud_data_endpoint_decode+0x10e>
	cJSON *tx_obj = json_object_decode(topic_obj, NRF_CLOUD_JSON_KEY_DEVICE_TO_CLOUD);
   20ada:	f8df b128 	ldr.w	fp, [pc, #296]	; 20c04 <nrf_cloud_data_endpoint_decode+0x26c>
   20ade:	4640      	mov	r0, r8
   20ae0:	4659      	mov	r1, fp
   20ae2:	f012 fc33 	bl	3334c <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   20ae6:	4631      	mov	r1, r6
   20ae8:	f012 fc65 	bl	333b6 <json_decode_and_alloc>
	if (err) {
   20aec:	4604      	mov	r4, r0
   20aee:	b1a8      	cbz	r0, 20b1c <nrf_cloud_data_endpoint_decode+0x184>
		cJSON_Delete(root_obj);
   20af0:	4628      	mov	r0, r5
   20af2:	f004 f901 	bl	24cf8 <cJSON_Delete>
		LOG_ERR("Could not decode topic for %s", NRF_CLOUD_JSON_KEY_DEVICE_TO_CLOUD);
   20af6:	466d      	mov	r5, sp
   20af8:	b088      	sub	sp, #32
   20afa:	aa02      	add	r2, sp, #8
   20afc:	4b42      	ldr	r3, [pc, #264]	; (20c08 <nrf_cloud_data_endpoint_decode+0x270>)
   20afe:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   20b02:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   20b06:	f44f 7300 	mov.w	r3, #512	; 0x200
   20b0a:	8393      	strh	r3, [r2, #28]
   20b0c:	4b3f      	ldr	r3, [pc, #252]	; (20c0c <nrf_cloud_data_endpoint_decode+0x274>)
   20b0e:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Failed to parse \"%s\" from JSON, error: %d",
   20b12:	483f      	ldr	r0, [pc, #252]	; (20c10 <nrf_cloud_data_endpoint_decode+0x278>)
   20b14:	f012 fc67 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20b18:	46ad      	mov	sp, r5
		return err;
   20b1a:	e7c4      	b.n	20aa6 <nrf_cloud_data_endpoint_decode+0x10e>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   20b1c:	6834      	ldr	r4, [r6, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   20b1e:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   20b20:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   20b22:	4620      	mov	r0, r4
   20b24:	f000 fd3e 	bl	215a4 <nrf_cloud_calloc>
   20b28:	f8c9 0004 	str.w	r0, [r9, #4]
	if (bulk_endpoint->ptr == NULL) {
   20b2c:	b980      	cbnz	r0, 20b50 <nrf_cloud_data_endpoint_decode+0x1b8>
		cJSON_Delete(root_obj);
   20b2e:	4628      	mov	r0, r5
   20b30:	f004 f8e2 	bl	24cf8 <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bulk topic");
   20b34:	4b37      	ldr	r3, [pc, #220]	; (20c14 <nrf_cloud_data_endpoint_decode+0x27c>)
		LOG_ERR("Could not allocate memory for bin topic");
   20b36:	61fb      	str	r3, [r7, #28]
   20b38:	2302      	movs	r3, #2
   20b3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20b3e:	4834      	ldr	r0, [pc, #208]	; (20c10 <nrf_cloud_data_endpoint_decode+0x278>)
   20b40:	61bb      	str	r3, [r7, #24]
   20b42:	f107 0218 	add.w	r2, r7, #24
   20b46:	f012 fc4e 	bl	333e6 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   20b4a:	f06f 040b 	mvn.w	r4, #11
   20b4e:	e7aa      	b.n	20aa6 <nrf_cloud_data_endpoint_decode+0x10e>
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   20b50:	4b31      	ldr	r3, [pc, #196]	; (20c18 <nrf_cloud_data_endpoint_decode+0x280>)
   20b52:	4621      	mov	r1, r4
   20b54:	9300      	str	r3, [sp, #0]
   20b56:	4a31      	ldr	r2, [pc, #196]	; (20c1c <nrf_cloud_data_endpoint_decode+0x284>)
   20b58:	6873      	ldr	r3, [r6, #4]
   20b5a:	f00d fd2b 	bl	2e5b4 <snprintk>
   20b5e:	f8c9 0000 	str.w	r0, [r9]
	size_t bin_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_JSON_VAL_TOPIC_BIN);
   20b62:	6834      	ldr	r4, [r6, #0]
	bin_endpoint->ptr = nrf_cloud_calloc(bin_ep_len_temp, 1);
   20b64:	2101      	movs	r1, #1
	size_t bin_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_JSON_VAL_TOPIC_BIN);
   20b66:	3405      	adds	r4, #5
	bin_endpoint->ptr = nrf_cloud_calloc(bin_ep_len_temp, 1);
   20b68:	4620      	mov	r0, r4
   20b6a:	f000 fd1b 	bl	215a4 <nrf_cloud_calloc>
   20b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   20b70:	6050      	str	r0, [r2, #4]
	if (bin_endpoint->ptr == NULL) {
   20b72:	b920      	cbnz	r0, 20b7e <nrf_cloud_data_endpoint_decode+0x1e6>
		cJSON_Delete(root_obj);
   20b74:	4628      	mov	r0, r5
   20b76:	f004 f8bf 	bl	24cf8 <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bin topic");
   20b7a:	4b29      	ldr	r3, [pc, #164]	; (20c20 <nrf_cloud_data_endpoint_decode+0x288>)
   20b7c:	e7db      	b.n	20b36 <nrf_cloud_data_endpoint_decode+0x19e>
	bin_endpoint->len = snprintk((char *)bin_endpoint->ptr, bin_ep_len_temp, "%s%s",
   20b7e:	4b29      	ldr	r3, [pc, #164]	; (20c24 <nrf_cloud_data_endpoint_decode+0x28c>)
   20b80:	4621      	mov	r1, r4
   20b82:	9300      	str	r3, [sp, #0]
   20b84:	6873      	ldr	r3, [r6, #4]
   20b86:	4a25      	ldr	r2, [pc, #148]	; (20c1c <nrf_cloud_data_endpoint_decode+0x284>)
   20b88:	f00d fd14 	bl	2e5b4 <snprintk>
	err = json_decode_and_alloc(json_object_decode(topic_obj,
   20b8c:	4e26      	ldr	r6, [pc, #152]	; (20c28 <nrf_cloud_data_endpoint_decode+0x290>)
	bin_endpoint->len = snprintk((char *)bin_endpoint->ptr, bin_ep_len_temp, "%s%s",
   20b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	err = json_decode_and_alloc(json_object_decode(topic_obj,
   20b90:	4631      	mov	r1, r6
	bin_endpoint->len = snprintk((char *)bin_endpoint->ptr, bin_ep_len_temp, "%s%s",
   20b92:	6018      	str	r0, [r3, #0]
	err = json_decode_and_alloc(json_object_decode(topic_obj,
   20b94:	4640      	mov	r0, r8
   20b96:	f012 fbd9 	bl	3334c <json_object_decode>
   20b9a:	4651      	mov	r1, sl
   20b9c:	f012 fc0b 	bl	333b6 <json_decode_and_alloc>
	if (err) {
   20ba0:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   20ba2:	4628      	mov	r0, r5
	if (err) {
   20ba4:	2c00      	cmp	r4, #0
   20ba6:	d095      	beq.n	20ad4 <nrf_cloud_data_endpoint_decode+0x13c>
		cJSON_Delete(root_obj);
   20ba8:	f004 f8a6 	bl	24cf8 <cJSON_Delete>
		LOG_ERR("Failed to parse \"%s\" from JSON, error: %d",
   20bac:	466d      	mov	r5, sp
   20bae:	b08a      	sub	sp, #40	; 0x28
   20bb0:	aa02      	add	r2, sp, #8
   20bb2:	4b1e      	ldr	r3, [pc, #120]	; (20c2c <nrf_cloud_data_endpoint_decode+0x294>)
   20bb4:	61d4      	str	r4, [r2, #28]
   20bb6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   20bba:	f44f 7300 	mov.w	r3, #512	; 0x200
   20bbe:	8413      	strh	r3, [r2, #32]
   20bc0:	4b1b      	ldr	r3, [pc, #108]	; (20c30 <nrf_cloud_data_endpoint_decode+0x298>)
   20bc2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20bc6:	f842 3f10 	str.w	r3, [r2, #16]!
   20bca:	e7a2      	b.n	20b12 <nrf_cloud_data_endpoint_decode+0x17a>
   20bcc:	0003e1ca 	.word	0x0003e1ca
   20bd0:	0003df36 	.word	0x0003df36
   20bd4:	000381c3 	.word	0x000381c3
   20bd8:	0003e1df 	.word	0x0003e1df
   20bdc:	0003e1f9 	.word	0x0003e1f9
   20be0:	0003e3d1 	.word	0x0003e3d1
   20be4:	0003e3ec 	.word	0x0003e3ec
   20be8:	0003e407 	.word	0x0003e407
   20bec:	0003e424 	.word	0x0003e424
   20bf0:	0003e220 	.word	0x0003e220
   20bf4:	0003e23b 	.word	0x0003e23b
   20bf8:	0003a7c8 	.word	0x0003a7c8
   20bfc:	0003e440 	.word	0x0003e440
   20c00:	0003e447 	.word	0x0003e447
   20c04:	0003e44e 	.word	0x0003e44e
   20c08:	0003e452 	.word	0x0003e452
   20c0c:	01000003 	.word	0x01000003
   20c10:	00036580 	.word	0x00036580
   20c14:	0003e470 	.word	0x0003e470
   20c18:	0003e499 	.word	0x0003e499
   20c1c:	0003f280 	.word	0x0003f280
   20c20:	0003e49f 	.word	0x0003e49f
   20c24:	0003e4c7 	.word	0x0003e4c7
   20c28:	0003e4f7 	.word	0x0003e4f7
   20c2c:	0003e4cc 	.word	0x0003e4cc
   20c30:	01000004 	.word	0x01000004

00020c34 <nrf_cloud_set_wildcard_c2d_topic>:
{
   20c34:	b570      	push	{r4, r5, r6, lr}
	if (!topic || (topic_len < STRLEN_TOPIC_VAL_C2D)) {
   20c36:	4604      	mov	r4, r0
   20c38:	b180      	cbz	r0, 20c5c <nrf_cloud_set_wildcard_c2d_topic+0x28>
   20c3a:	2903      	cmp	r1, #3
   20c3c:	d90e      	bls.n	20c5c <nrf_cloud_set_wildcard_c2d_topic+0x28>
	char *c2d_str = &topic[topic_len - STRLEN_TOPIC_VAL_C2D];
   20c3e:	1f0d      	subs	r5, r1, #4
   20c40:	1946      	adds	r6, r0, r5
	if (memcmp(c2d_str, NRF_CLOUD_JSON_VAL_TOPIC_C2D,
   20c42:	2205      	movs	r2, #5
   20c44:	4630      	mov	r0, r6
   20c46:	4906      	ldr	r1, [pc, #24]	; (20c60 <nrf_cloud_set_wildcard_c2d_topic+0x2c>)
   20c48:	f014 f9c0 	bl	34fcc <memcmp>
   20c4c:	b930      	cbnz	r0, 20c5c <nrf_cloud_set_wildcard_c2d_topic+0x28>
		return true;
   20c4e:	2001      	movs	r0, #1
   20c50:	4b04      	ldr	r3, [pc, #16]	; (20c64 <nrf_cloud_set_wildcard_c2d_topic+0x30>)
   20c52:	681a      	ldr	r2, [r3, #0]
   20c54:	791b      	ldrb	r3, [r3, #4]
   20c56:	5162      	str	r2, [r4, r5]
   20c58:	7133      	strb	r3, [r6, #4]
}
   20c5a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   20c5c:	2000      	movs	r0, #0
   20c5e:	e7fc      	b.n	20c5a <nrf_cloud_set_wildcard_c2d_topic+0x26>
   20c60:	0003e4f6 	.word	0x0003e4f6
   20c64:	0003e4fb 	.word	0x0003e4fb

00020c68 <nrf_cloud_dc_rx_topic_decode>:
{
   20c68:	b510      	push	{r4, lr}
	if (!topic) {
   20c6a:	4604      	mov	r4, r0
   20c6c:	b1b0      	cbz	r0, 20c9c <nrf_cloud_dc_rx_topic_decode+0x34>
	if (strstr(topic, TOPIC_VAL_RCV_AGPS)) {
   20c6e:	490f      	ldr	r1, [pc, #60]	; (20cac <nrf_cloud_dc_rx_topic_decode+0x44>)
   20c70:	f014 fbc7 	bl	35402 <strstr>
   20c74:	b9a0      	cbnz	r0, 20ca0 <nrf_cloud_dc_rx_topic_decode+0x38>
	} else if (strstr(topic, TOPIC_VAL_RCV_PGPS)) {
   20c76:	4620      	mov	r0, r4
   20c78:	490d      	ldr	r1, [pc, #52]	; (20cb0 <nrf_cloud_dc_rx_topic_decode+0x48>)
   20c7a:	f014 fbc2 	bl	35402 <strstr>
   20c7e:	b988      	cbnz	r0, 20ca4 <nrf_cloud_dc_rx_topic_decode+0x3c>
	} else if (strstr(topic, TOPIC_VAL_RCV_GND_FIX)) {
   20c80:	4620      	mov	r0, r4
   20c82:	490c      	ldr	r1, [pc, #48]	; (20cb4 <nrf_cloud_dc_rx_topic_decode+0x4c>)
   20c84:	f014 fbbd 	bl	35402 <strstr>
   20c88:	b970      	cbnz	r0, 20ca8 <nrf_cloud_dc_rx_topic_decode+0x40>
	} else if (strstr(topic, TOPIC_VAL_RCV_C2D)) {
   20c8a:	4620      	mov	r0, r4
   20c8c:	490a      	ldr	r1, [pc, #40]	; (20cb8 <nrf_cloud_dc_rx_topic_decode+0x50>)
   20c8e:	f014 fbb8 	bl	35402 <strstr>
   20c92:	fab0 f080 	clz	r0, r0
   20c96:	0940      	lsrs	r0, r0, #5
   20c98:	0080      	lsls	r0, r0, #2
}
   20c9a:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_RCV_TOPIC_UNKNOWN;
   20c9c:	2004      	movs	r0, #4
   20c9e:	e7fc      	b.n	20c9a <nrf_cloud_dc_rx_topic_decode+0x32>
		return NRF_CLOUD_RCV_TOPIC_AGPS;
   20ca0:	2001      	movs	r0, #1
   20ca2:	e7fa      	b.n	20c9a <nrf_cloud_dc_rx_topic_decode+0x32>
		return NRF_CLOUD_RCV_TOPIC_PGPS;
   20ca4:	2002      	movs	r0, #2
   20ca6:	e7f8      	b.n	20c9a <nrf_cloud_dc_rx_topic_decode+0x32>
		return NRF_CLOUD_RCV_TOPIC_LOCATION;
   20ca8:	2003      	movs	r0, #3
   20caa:	e7f6      	b.n	20c9a <nrf_cloud_dc_rx_topic_decode+0x32>
   20cac:	0003e500 	.word	0x0003e500
   20cb0:	0003e508 	.word	0x0003e508
   20cb4:	0003e510 	.word	0x0003e510
   20cb8:	0003e51e 	.word	0x0003e51e

00020cbc <nrf_cloud_modem_info_json_encode>:
{
   20cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20cc0:	b09e      	sub	sp, #120	; 0x78
   20cc2:	4680      	mov	r8, r0
	if (!mod_inf_obj || !mod_inf) {
   20cc4:	4689      	mov	r9, r1
{
   20cc6:	af00      	add	r7, sp, #0
	if (!mod_inf_obj || !mod_inf) {
   20cc8:	2900      	cmp	r1, #0
   20cca:	f000 8178 	beq.w	20fbe <nrf_cloud_modem_info_json_encode+0x302>
   20cce:	2800      	cmp	r0, #0
   20cd0:	f000 8175 	beq.w	20fbe <nrf_cloud_modem_info_json_encode+0x302>
	cJSON *tmp = cJSON_CreateObject();
   20cd4:	f004 f8e0 	bl	24e98 <cJSON_CreateObject>
	if (!tmp) {
   20cd8:	4606      	mov	r6, r0
   20cda:	b948      	cbnz	r0, 20cf0 <nrf_cloud_modem_info_json_encode+0x34>
		err = -ENOMEM;
   20cdc:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(tmp);
   20ce0:	4630      	mov	r0, r6
   20ce2:	f004 f809 	bl	24cf8 <cJSON_Delete>
}
   20ce6:	4620      	mov	r0, r4
   20ce8:	3778      	adds	r7, #120	; 0x78
   20cea:	46bd      	mov	sp, r7
   20cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct modem_param_info *mpi = (struct modem_param_info *)mod_inf->mpi;
   20cf0:	f8d8 4004 	ldr.w	r4, [r8, #4]
	if (!mpi) {
   20cf4:	b9a4      	cbnz	r4, 20d20 <nrf_cloud_modem_info_json_encode+0x64>
		err = get_modem_info();
   20cf6:	f7ff fb55 	bl	203a4 <get_modem_info>
		if (err < 0) {
   20cfa:	1e04      	subs	r4, r0, #0
   20cfc:	f280 80bf 	bge.w	20e7e <nrf_cloud_modem_info_json_encode+0x1c2>
			LOG_ERR("modem_info_params_get() failed: %d", err);
   20d00:	466d      	mov	r5, sp
   20d02:	b088      	sub	sp, #32
   20d04:	466a      	mov	r2, sp
   20d06:	4baf      	ldr	r3, [pc, #700]	; (20fc4 <nrf_cloud_modem_info_json_encode+0x308>)
   20d08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20d0c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20d10:	2303      	movs	r3, #3
   20d12:	48ad      	ldr	r0, [pc, #692]	; (20fc8 <nrf_cloud_modem_info_json_encode+0x30c>)
   20d14:	f842 3f10 	str.w	r3, [r2, #16]!
   20d18:	f012 fb65 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20d1c:	46ad      	mov	sp, r5
			goto cleanup;
   20d1e:	e7df      	b.n	20ce0 <nrf_cloud_modem_info_json_encode+0x24>
	err = encode_modem_info_json_object(mpi, tmp, mod_inf->application_version);
   20d20:	f8d8 a008 	ldr.w	sl, [r8, #8]
		cJSON *network_obj = cJSON_CreateObject();
   20d24:	f004 f8b8 	bl	24e98 <cJSON_CreateObject>
		if (network_obj == NULL) {
   20d28:	4605      	mov	r5, r0
   20d2a:	2800      	cmp	r0, #0
   20d2c:	f000 80df 	beq.w	20eee <nrf_cloud_modem_info_json_encode+0x232>
	char network_mode[12] = {0};
   20d30:	2100      	movs	r1, #0
	char data_name[MODEM_INFO_MAX_RESPONSE_SIZE] = {0};
   20d32:	2260      	movs	r2, #96	; 0x60
   20d34:	e9c7 1103 	strd	r1, r1, [r7, #12]
   20d38:	f107 0014 	add.w	r0, r7, #20
	char network_mode[12] = {0};
   20d3c:	e9c7 1101 	strd	r1, r1, [r7, #4]
	char data_name[MODEM_INFO_MAX_RESPONSE_SIZE] = {0};
   20d40:	f014 f974 	bl	3502c <memset>
	ret = add_modem_info_data(&network->current_band, json_obj);
   20d44:	4629      	mov	r1, r5
   20d46:	4620      	mov	r0, r4
   20d48:	f7ff f9ea 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d4c:	bb80      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = add_modem_info_data(&network->sup_band, json_obj);
   20d4e:	4629      	mov	r1, r5
   20d50:	f104 0070 	add.w	r0, r4, #112	; 0x70
   20d54:	f7ff f9e4 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d58:	bb50      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = add_modem_info_data(&network->area_code, json_obj);
   20d5a:	4629      	mov	r1, r5
   20d5c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   20d60:	f7ff f9de 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d64:	bb20      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = add_modem_info_data(&network->current_operator, json_obj);
   20d66:	4629      	mov	r1, r5
   20d68:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   20d6c:	f7ff f9d8 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d70:	b9f0      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = add_modem_info_data(&network->ip_address, json_obj);
   20d72:	4629      	mov	r1, r5
   20d74:	f504 7044 	add.w	r0, r4, #784	; 0x310
   20d78:	f7ff f9d2 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d7c:	b9c0      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = add_modem_info_data(&network->ue_mode, json_obj);
   20d7e:	4629      	mov	r1, r5
   20d80:	f504 7060 	add.w	r0, r4, #896	; 0x380
   20d84:	f7ff f9cc 	bl	20120 <add_modem_info_data>
	if (ret) {
   20d88:	b990      	cbnz	r0, 20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	ret = modem_info_name_get(network->cellid_hex.type, data_name);
   20d8a:	f894 030c 	ldrb.w	r0, [r4, #780]	; 0x30c
   20d8e:	f107 0110 	add.w	r1, r7, #16
   20d92:	f7fe fe1d 	bl	1f9d0 <modem_info_name_get>
	if (ret < 0) {
   20d96:	2800      	cmp	r0, #0
   20d98:	db0a      	blt.n	20db0 <nrf_cloud_modem_info_json_encode+0xf4>
	if (cJSON_AddNumberToObject(json_obj, data_name, network->cellid_dec) == NULL) {
   20d9a:	f504 63d2 	add.w	r3, r4, #1680	; 0x690
   20d9e:	4628      	mov	r0, r5
   20da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20da4:	f107 0110 	add.w	r1, r7, #16
   20da8:	f012 fdb0 	bl	3390c <cJSON_AddNumberToObject>
   20dac:	2800      	cmp	r0, #0
   20dae:	d16a      	bne.n	20e86 <nrf_cloud_modem_info_json_encode+0x1ca>
			cJSON_Delete(network_obj);
   20db0:	4628      	mov	r0, r5
   20db2:	f003 ffa1 	bl	24cf8 <cJSON_Delete>
		cJSON *sim_obj = cJSON_CreateObject();
   20db6:	f004 f86f 	bl	24e98 <cJSON_CreateObject>
		if (sim_obj == NULL) {
   20dba:	4605      	mov	r5, r0
   20dbc:	2800      	cmp	r0, #0
   20dbe:	f000 8096 	beq.w	20eee <nrf_cloud_modem_info_json_encode+0x232>
	ret = add_modem_info_data(&sim->uicc, json_obj);
   20dc2:	4601      	mov	r1, r0
   20dc4:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
   20dc8:	f7ff f9aa 	bl	20120 <add_modem_info_data>
	if (ret) {
   20dcc:	2800      	cmp	r0, #0
   20dce:	f040 8087 	bne.w	20ee0 <nrf_cloud_modem_info_json_encode+0x224>
	ret = add_modem_info_data(&sim->iccid, json_obj);
   20dd2:	4629      	mov	r1, r5
   20dd4:	f504 60e1 	add.w	r0, r4, #1800	; 0x708
   20dd8:	f7ff f9a2 	bl	20120 <add_modem_info_data>
	ret = add_modem_info_data(&sim->imsi, json_obj);
   20ddc:	4629      	mov	r1, r5
   20dde:	f504 60ef 	add.w	r0, r4, #1912	; 0x778
   20de2:	f7ff f99d 	bl	20120 <add_modem_info_data>
			ret = json_add_obj_cs(root_obj,
   20de6:	462a      	mov	r2, r5
   20de8:	4630      	mov	r0, r6
   20dea:	4978      	ldr	r1, [pc, #480]	; (20fcc <nrf_cloud_modem_info_json_encode+0x310>)
   20dec:	f012 fabf 	bl	3336e <json_add_obj_cs>
			if (ret) {
   20df0:	2800      	cmp	r0, #0
   20df2:	d16a      	bne.n	20eca <nrf_cloud_modem_info_json_encode+0x20e>
		cJSON *device_obj = cJSON_CreateObject();
   20df4:	f004 f850 	bl	24e98 <cJSON_CreateObject>
		if (device_obj == NULL) {
   20df8:	4605      	mov	r5, r0
   20dfa:	2800      	cmp	r0, #0
   20dfc:	d077      	beq.n	20eee <nrf_cloud_modem_info_json_encode+0x232>
		if (app_ver) {
   20dfe:	f1ba 0f00 	cmp.w	sl, #0
   20e02:	f040 8089 	bne.w	20f18 <nrf_cloud_modem_info_json_encode+0x25c>
	char hw_ver[40] = {0};
   20e06:	2100      	movs	r1, #0
   20e08:	2224      	movs	r2, #36	; 0x24
   20e0a:	6139      	str	r1, [r7, #16]
   20e0c:	f107 0014 	add.w	r0, r7, #20
   20e10:	f014 f90c 	bl	3502c <memset>
	ret = add_modem_info_data(&device->modem_fw, json_obj);
   20e14:	4629      	mov	r1, r5
   20e16:	f504 60fd 	add.w	r0, r4, #2024	; 0x7e8
   20e1a:	f7ff f981 	bl	20120 <add_modem_info_data>
	if (ret) {
   20e1e:	b998      	cbnz	r0, 20e48 <nrf_cloud_modem_info_json_encode+0x18c>
		ret = add_modem_info_data(&device->battery, json_obj);
   20e20:	4629      	mov	r1, r5
   20e22:	f604 0058 	addw	r0, r4, #2136	; 0x858
   20e26:	f7ff f97b 	bl	20120 <add_modem_info_data>
		if (ret) {
   20e2a:	b968      	cbnz	r0, 20e48 <nrf_cloud_modem_info_json_encode+0x18c>
	ret = add_modem_info_data(&device->imei, json_obj);
   20e2c:	4629      	mov	r1, r5
   20e2e:	f604 00c8 	addw	r0, r4, #2248	; 0x8c8
   20e32:	f7ff f975 	bl	20120 <add_modem_info_data>
	if (ret) {
   20e36:	b938      	cbnz	r0, 20e48 <nrf_cloud_modem_info_json_encode+0x18c>
	if (json_add_str_cs(json_obj, "board", device->board)) {
   20e38:	4628      	mov	r0, r5
   20e3a:	f8d4 2938 	ldr.w	r2, [r4, #2360]	; 0x938
   20e3e:	4964      	ldr	r1, [pc, #400]	; (20fd0 <nrf_cloud_modem_info_json_encode+0x314>)
   20e40:	f012 fa69 	bl	33316 <json_add_str_cs>
   20e44:	2800      	cmp	r0, #0
   20e46:	d070      	beq.n	20f2a <nrf_cloud_modem_info_json_encode+0x26e>
			cJSON_Delete(device_obj);
   20e48:	4628      	mov	r0, r5
   20e4a:	f003 ff55 	bl	24cf8 <cJSON_Delete>
	if (encode_info_item_cs(mod_inf->device,
   20e4e:	464b      	mov	r3, r9
   20e50:	4632      	mov	r2, r6
   20e52:	4960      	ldr	r1, [pc, #384]	; (20fd4 <nrf_cloud_modem_info_json_encode+0x318>)
   20e54:	f898 0000 	ldrb.w	r0, [r8]
   20e58:	f7ff fa16 	bl	20288 <encode_info_item_cs>
   20e5c:	2800      	cmp	r0, #0
   20e5e:	f000 8098 	beq.w	20f92 <nrf_cloud_modem_info_json_encode+0x2d6>
		LOG_ERR("Failed to encode modem info");
   20e62:	4b5d      	ldr	r3, [pc, #372]	; (20fd8 <nrf_cloud_modem_info_json_encode+0x31c>)
   20e64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20e68:	627b      	str	r3, [r7, #36]	; 0x24
   20e6a:	2302      	movs	r3, #2
   20e6c:	4856      	ldr	r0, [pc, #344]	; (20fc8 <nrf_cloud_modem_info_json_encode+0x30c>)
   20e6e:	623b      	str	r3, [r7, #32]
   20e70:	f107 0220 	add.w	r2, r7, #32
   20e74:	f012 fab7 	bl	333e6 <z_log_msg_static_create.constprop.0>
		err = -EIO;
   20e78:	f06f 0404 	mvn.w	r4, #4
		goto cleanup;
   20e7c:	e730      	b.n	20ce0 <nrf_cloud_modem_info_json_encode+0x24>
	err = encode_modem_info_json_object(mpi, tmp, mod_inf->application_version);
   20e7e:	f8d8 a008 	ldr.w	sl, [r8, #8]
		mpi = &modem_inf;
   20e82:	4c56      	ldr	r4, [pc, #344]	; (20fdc <nrf_cloud_modem_info_json_encode+0x320>)
   20e84:	e74e      	b.n	20d24 <nrf_cloud_modem_info_json_encode+0x68>
	if (network->lte_mode.value == 1) {
   20e86:	f8b4 33f0 	ldrh.w	r3, [r4, #1008]	; 0x3f0
   20e8a:	2b01      	cmp	r3, #1
   20e8c:	d121      	bne.n	20ed2 <nrf_cloud_modem_info_json_encode+0x216>
		strcat(network_mode, "LTE-M");
   20e8e:	220c      	movs	r2, #12
   20e90:	4953      	ldr	r1, [pc, #332]	; (20fe0 <nrf_cloud_modem_info_json_encode+0x324>)
		strcat(network_mode, "NB-IoT");
   20e92:	1d38      	adds	r0, r7, #4
   20e94:	f014 fa43 	bl	3531e <__strcat_chk>
	if (network->gps_mode.value == 1) {
   20e98:	f8b4 34d0 	ldrh.w	r3, [r4, #1232]	; 0x4d0
   20e9c:	2b01      	cmp	r3, #1
   20e9e:	d104      	bne.n	20eaa <nrf_cloud_modem_info_json_encode+0x1ee>
		strcat(network_mode, " GPS");
   20ea0:	220c      	movs	r2, #12
   20ea2:	4950      	ldr	r1, [pc, #320]	; (20fe4 <nrf_cloud_modem_info_json_encode+0x328>)
   20ea4:	1d38      	adds	r0, r7, #4
   20ea6:	f014 fa3a 	bl	3531e <__strcat_chk>
	if (cJSON_AddStringToObject(json_obj, "networkMode", network_mode) == NULL) {
   20eaa:	4628      	mov	r0, r5
   20eac:	494e      	ldr	r1, [pc, #312]	; (20fe8 <nrf_cloud_modem_info_json_encode+0x32c>)
   20eae:	1d3a      	adds	r2, r7, #4
   20eb0:	f012 fd57 	bl	33962 <cJSON_AddStringToObject>
   20eb4:	2800      	cmp	r0, #0
   20eb6:	f43f af7b 	beq.w	20db0 <nrf_cloud_modem_info_json_encode+0xf4>
			ret = json_add_obj_cs(root_obj,
   20eba:	462a      	mov	r2, r5
   20ebc:	4630      	mov	r0, r6
   20ebe:	494b      	ldr	r1, [pc, #300]	; (20fec <nrf_cloud_modem_info_json_encode+0x330>)
   20ec0:	f012 fa55 	bl	3336e <json_add_obj_cs>
			if (ret) {
   20ec4:	2800      	cmp	r0, #0
   20ec6:	f43f af76 	beq.w	20db6 <nrf_cloud_modem_info_json_encode+0xfa>
				cJSON_Delete(device_obj);
   20eca:	4628      	mov	r0, r5
   20ecc:	f003 ff14 	bl	24cf8 <cJSON_Delete>
	if (err) {
   20ed0:	e00d      	b.n	20eee <nrf_cloud_modem_info_json_encode+0x232>
	} else if (network->nbiot_mode.value == 1) {
   20ed2:	f8b4 3460 	ldrh.w	r3, [r4, #1120]	; 0x460
   20ed6:	2b01      	cmp	r3, #1
   20ed8:	d1de      	bne.n	20e98 <nrf_cloud_modem_info_json_encode+0x1dc>
		strcat(network_mode, "NB-IoT");
   20eda:	220c      	movs	r2, #12
   20edc:	4944      	ldr	r1, [pc, #272]	; (20ff0 <nrf_cloud_modem_info_json_encode+0x334>)
   20ede:	e7d8      	b.n	20e92 <nrf_cloud_modem_info_json_encode+0x1d6>
			cJSON_Delete(sim_obj);
   20ee0:	4628      	mov	r0, r5
   20ee2:	f003 ff09 	bl	24cf8 <cJSON_Delete>
		cJSON *device_obj = cJSON_CreateObject();
   20ee6:	f003 ffd7 	bl	24e98 <cJSON_CreateObject>
		if (device_obj == NULL) {
   20eea:	4605      	mov	r5, r0
   20eec:	b988      	cbnz	r0, 20f12 <nrf_cloud_modem_info_json_encode+0x256>
		LOG_ERR("Failed to encode modem info: %d", err);
   20eee:	466c      	mov	r4, sp
   20ef0:	b088      	sub	sp, #32
   20ef2:	466a      	mov	r2, sp
   20ef4:	4b3f      	ldr	r3, [pc, #252]	; (20ff4 <nrf_cloud_modem_info_json_encode+0x338>)
   20ef6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20efa:	6153      	str	r3, [r2, #20]
   20efc:	f06f 030b 	mvn.w	r3, #11
   20f00:	6193      	str	r3, [r2, #24]
   20f02:	2303      	movs	r3, #3
   20f04:	4830      	ldr	r0, [pc, #192]	; (20fc8 <nrf_cloud_modem_info_json_encode+0x30c>)
   20f06:	f842 3f10 	str.w	r3, [r2, #16]!
   20f0a:	f012 fa6c 	bl	333e6 <z_log_msg_static_create.constprop.0>
   20f0e:	46a5      	mov	sp, r4
		goto cleanup;
   20f10:	e6e4      	b.n	20cdc <nrf_cloud_modem_info_json_encode+0x20>
		if (app_ver) {
   20f12:	f1ba 0f00 	cmp.w	sl, #0
   20f16:	d0d8      	beq.n	20eca <nrf_cloud_modem_info_json_encode+0x20e>
			ret = json_add_str_cs(device_obj, NRF_CLOUD_JSON_KEY_APP_VER, app_ver);
   20f18:	4652      	mov	r2, sl
   20f1a:	4628      	mov	r0, r5
   20f1c:	4936      	ldr	r1, [pc, #216]	; (20ff8 <nrf_cloud_modem_info_json_encode+0x33c>)
   20f1e:	f012 f9fa 	bl	33316 <json_add_str_cs>
		if (ret) {
   20f22:	2800      	cmp	r0, #0
   20f24:	f43f af6f 	beq.w	20e06 <nrf_cloud_modem_info_json_encode+0x14a>
   20f28:	e7cf      	b.n	20eca <nrf_cloud_modem_info_json_encode+0x20e>
	if (json_add_str_cs(json_obj, "sdkVer", device->app_version)) {
   20f2a:	4628      	mov	r0, r5
   20f2c:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
   20f30:	4932      	ldr	r1, [pc, #200]	; (20ffc <nrf_cloud_modem_info_json_encode+0x340>)
   20f32:	f012 f9f0 	bl	33316 <json_add_str_cs>
   20f36:	2800      	cmp	r0, #0
   20f38:	d186      	bne.n	20e48 <nrf_cloud_modem_info_json_encode+0x18c>
	if (json_add_str_cs(json_obj, "appName", device->app_name)) {
   20f3a:	4628      	mov	r0, r5
   20f3c:	f8d4 2940 	ldr.w	r2, [r4, #2368]	; 0x940
   20f40:	492f      	ldr	r1, [pc, #188]	; (21000 <nrf_cloud_modem_info_json_encode+0x344>)
   20f42:	f012 f9e8 	bl	33316 <json_add_str_cs>
   20f46:	2800      	cmp	r0, #0
   20f48:	f47f af7e 	bne.w	20e48 <nrf_cloud_modem_info_json_encode+0x18c>
	if (json_add_str_cs(json_obj, "zephyrVer", zver)) {
   20f4c:	4628      	mov	r0, r5
   20f4e:	4a2d      	ldr	r2, [pc, #180]	; (21004 <nrf_cloud_modem_info_json_encode+0x348>)
   20f50:	492d      	ldr	r1, [pc, #180]	; (21008 <nrf_cloud_modem_info_json_encode+0x34c>)
   20f52:	f012 f9e0 	bl	33316 <json_add_str_cs>
   20f56:	2800      	cmp	r0, #0
   20f58:	f47f af76 	bne.w	20e48 <nrf_cloud_modem_info_json_encode+0x18c>
	ret = modem_info_get_hw_version(hw_ver, sizeof(hw_ver) - 1);
   20f5c:	f107 0410 	add.w	r4, r7, #16
   20f60:	2127      	movs	r1, #39	; 0x27
   20f62:	4620      	mov	r0, r4
   20f64:	f7fe ff10 	bl	1fd88 <modem_info_get_hw_version>
	if (json_add_str_cs(json_obj, "hwVer", ((ret == 0) ? hw_ver : "N/A"))) {
   20f68:	4b28      	ldr	r3, [pc, #160]	; (2100c <nrf_cloud_modem_info_json_encode+0x350>)
   20f6a:	4929      	ldr	r1, [pc, #164]	; (21010 <nrf_cloud_modem_info_json_encode+0x354>)
   20f6c:	2800      	cmp	r0, #0
   20f6e:	bf0c      	ite	eq
   20f70:	4622      	moveq	r2, r4
   20f72:	461a      	movne	r2, r3
   20f74:	4628      	mov	r0, r5
   20f76:	f012 f9ce 	bl	33316 <json_add_str_cs>
   20f7a:	2800      	cmp	r0, #0
   20f7c:	f47f af64 	bne.w	20e48 <nrf_cloud_modem_info_json_encode+0x18c>
			ret = json_add_obj_cs(root_obj,
   20f80:	462a      	mov	r2, r5
   20f82:	4630      	mov	r0, r6
   20f84:	4913      	ldr	r1, [pc, #76]	; (20fd4 <nrf_cloud_modem_info_json_encode+0x318>)
   20f86:	f012 f9f2 	bl	3336e <json_add_obj_cs>
			if (ret) {
   20f8a:	2800      	cmp	r0, #0
   20f8c:	f43f af5f 	beq.w	20e4e <nrf_cloud_modem_info_json_encode+0x192>
   20f90:	e79b      	b.n	20eca <nrf_cloud_modem_info_json_encode+0x20e>
	    encode_info_item_cs(mod_inf->network,
   20f92:	464b      	mov	r3, r9
   20f94:	4632      	mov	r2, r6
   20f96:	4915      	ldr	r1, [pc, #84]	; (20fec <nrf_cloud_modem_info_json_encode+0x330>)
   20f98:	f898 0001 	ldrb.w	r0, [r8, #1]
   20f9c:	f7ff f974 	bl	20288 <encode_info_item_cs>
				NRF_CLOUD_DEVICE_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   20fa0:	2800      	cmp	r0, #0
   20fa2:	f47f af5e 	bne.w	20e62 <nrf_cloud_modem_info_json_encode+0x1a6>
	    encode_info_item_cs(mod_inf->sim,
   20fa6:	464b      	mov	r3, r9
   20fa8:	4632      	mov	r2, r6
   20faa:	4908      	ldr	r1, [pc, #32]	; (20fcc <nrf_cloud_modem_info_json_encode+0x310>)
   20fac:	f898 0002 	ldrb.w	r0, [r8, #2]
   20fb0:	f7ff f96a 	bl	20288 <encode_info_item_cs>
				NRF_CLOUD_DEVICE_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   20fb4:	4604      	mov	r4, r0
   20fb6:	2800      	cmp	r0, #0
   20fb8:	f43f ae92 	beq.w	20ce0 <nrf_cloud_modem_info_json_encode+0x24>
   20fbc:	e751      	b.n	20e62 <nrf_cloud_modem_info_json_encode+0x1a6>
		return -EINVAL;
   20fbe:	f06f 0415 	mvn.w	r4, #21
   20fc2:	e690      	b.n	20ce6 <nrf_cloud_modem_info_json_encode+0x2a>
   20fc4:	0003e525 	.word	0x0003e525
   20fc8:	00036580 	.word	0x00036580
   20fcc:	0003e572 	.word	0x0003e572
   20fd0:	0003e585 	.word	0x0003e585
   20fd4:	0003e5b9 	.word	0x0003e5b9
   20fd8:	0003e5e4 	.word	0x0003e5e4
   20fdc:	2000de20 	.word	0x2000de20
   20fe0:	0003e548 	.word	0x0003e548
   20fe4:	0003e555 	.word	0x0003e555
   20fe8:	0003e55a 	.word	0x0003e55a
   20fec:	0003e566 	.word	0x0003e566
   20ff0:	0003e54e 	.word	0x0003e54e
   20ff4:	0003e5c4 	.word	0x0003e5c4
   20ff8:	0003e57a 	.word	0x0003e57a
   20ffc:	0003e58b 	.word	0x0003e58b
   21000:	0003e592 	.word	0x0003e592
   21004:	0003e59a 	.word	0x0003e59a
   21008:	0003e5a9 	.word	0x0003e5a9
   2100c:	0003de47 	.word	0x0003de47
   21010:	0003e5b3 	.word	0x0003e5b3

00021014 <nrf_cloud_service_info_json_encode>:
{
   21014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21018:	460e      	mov	r6, r1
	if (!svc_inf || !svc_inf_obj) {
   2101a:	4607      	mov	r7, r0
   2101c:	2800      	cmp	r0, #0
   2101e:	f000 80d8 	beq.w	211d2 <nrf_cloud_service_info_json_encode+0x1be>
   21022:	2900      	cmp	r1, #0
   21024:	f000 80d5 	beq.w	211d2 <nrf_cloud_service_info_json_encode+0x1be>
	int err = nrf_cloud_encode_service_info_fota(svc_inf->fota, svc_inf_obj);
   21028:	f8d0 8000 	ldr.w	r8, [r0]
		if (json_add_null_cs(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2102c:	496a      	ldr	r1, [pc, #424]	; (211d8 <nrf_cloud_service_info_json_encode+0x1c4>)
   2102e:	4630      	mov	r0, r6
	if (fota == NULL ||
   21030:	f1b8 0f00 	cmp.w	r8, #0
   21034:	d106      	bne.n	21044 <nrf_cloud_service_info_json_encode+0x30>
		if (json_add_null_cs(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_FOTA) != 0) {
   21036:	f012 f98d 	bl	33354 <json_add_null_cs>
   2103a:	2800      	cmp	r0, #0
   2103c:	d042      	beq.n	210c4 <nrf_cloud_service_info_json_encode+0xb0>
			return -ENOMEM;
   2103e:	f06f 000b 	mvn.w	r0, #11
   21042:	e048      	b.n	210d6 <nrf_cloud_service_info_json_encode+0xc2>
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj,
   21044:	f012 fca2 	bl	3398c <cJSON_AddArrayToObjectCS>
		if (!array) {
   21048:	4605      	mov	r5, r0
   2104a:	2800      	cmp	r0, #0
   2104c:	d0f7      	beq.n	2103e <nrf_cloud_service_info_json_encode+0x2a>
		if (fota->bootloader) {
   2104e:	f898 4000 	ldrb.w	r4, [r8]
   21052:	f014 0401 	ands.w	r4, r4, #1
   21056:	d007      	beq.n	21068 <nrf_cloud_service_info_json_encode+0x54>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_BOOT));
   21058:	4860      	ldr	r0, [pc, #384]	; (211dc <nrf_cloud_service_info_json_encode+0x1c8>)
   2105a:	f003 fef9 	bl	24e50 <cJSON_CreateString>
   2105e:	4601      	mov	r1, r0
   21060:	4628      	mov	r0, r5
   21062:	f012 fbe1 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21066:	2401      	movs	r4, #1
		if (fota->modem) {
   21068:	f898 3000 	ldrb.w	r3, [r8]
   2106c:	0799      	lsls	r1, r3, #30
   2106e:	d507      	bpl.n	21080 <nrf_cloud_service_info_json_encode+0x6c>
			cJSON_AddItemToArray(array,
   21070:	485b      	ldr	r0, [pc, #364]	; (211e0 <nrf_cloud_service_info_json_encode+0x1cc>)
   21072:	f003 feed 	bl	24e50 <cJSON_CreateString>
   21076:	4601      	mov	r1, r0
   21078:	4628      	mov	r0, r5
   2107a:	f012 fbd5 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   2107e:	3401      	adds	r4, #1
		if (fota->application) {
   21080:	f898 3000 	ldrb.w	r3, [r8]
   21084:	075a      	lsls	r2, r3, #29
   21086:	d507      	bpl.n	21098 <nrf_cloud_service_info_json_encode+0x84>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_APP));
   21088:	4856      	ldr	r0, [pc, #344]	; (211e4 <nrf_cloud_service_info_json_encode+0x1d0>)
   2108a:	f003 fee1 	bl	24e50 <cJSON_CreateString>
   2108e:	4601      	mov	r1, r0
   21090:	4628      	mov	r0, r5
   21092:	f012 fbc9 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21096:	3401      	adds	r4, #1
		if (fota->modem_full) {
   21098:	f898 3000 	ldrb.w	r3, [r8]
   2109c:	071b      	lsls	r3, r3, #28
   2109e:	d507      	bpl.n	210b0 <nrf_cloud_service_info_json_encode+0x9c>
			cJSON_AddItemToArray(array,
   210a0:	4851      	ldr	r0, [pc, #324]	; (211e8 <nrf_cloud_service_info_json_encode+0x1d4>)
   210a2:	f003 fed5 	bl	24e50 <cJSON_CreateString>
   210a6:	4601      	mov	r1, r0
   210a8:	4628      	mov	r0, r5
   210aa:	f012 fbbd 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   210ae:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   210b0:	4628      	mov	r0, r5
   210b2:	f012 fba1 	bl	337f8 <cJSON_GetArraySize>
   210b6:	42a0      	cmp	r0, r4
   210b8:	d004      	beq.n	210c4 <nrf_cloud_service_info_json_encode+0xb0>
			cJSON_DeleteItemFromObject(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_FOTA);
   210ba:	4947      	ldr	r1, [pc, #284]	; (211d8 <nrf_cloud_service_info_json_encode+0x1c4>)
			cJSON_DeleteItemFromObject(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_UI);
   210bc:	4630      	mov	r0, r6
   210be:	f012 fbdf 	bl	33880 <cJSON_DeleteItemFromObject>
			return -ENOMEM;
   210c2:	e7bc      	b.n	2103e <nrf_cloud_service_info_json_encode+0x2a>
   210c4:	687f      	ldr	r7, [r7, #4]
		if (json_add_null_cs(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_UI) != 0) {
   210c6:	4630      	mov	r0, r6
   210c8:	4948      	ldr	r1, [pc, #288]	; (211ec <nrf_cloud_service_info_json_encode+0x1d8>)
	if (ui == NULL) {
   210ca:	b937      	cbnz	r7, 210da <nrf_cloud_service_info_json_encode+0xc6>
		if (json_add_null_cs(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_UI) != 0) {
   210cc:	f012 f942 	bl	33354 <json_add_null_cs>
   210d0:	2800      	cmp	r0, #0
   210d2:	d1b4      	bne.n	2103e <nrf_cloud_service_info_json_encode+0x2a>
	return 0;
   210d4:	2000      	movs	r0, #0
}
   210d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj,
   210da:	f012 fc57 	bl	3398c <cJSON_AddArrayToObjectCS>
		if (!array) {
   210de:	4605      	mov	r5, r0
   210e0:	2800      	cmp	r0, #0
   210e2:	d0ac      	beq.n	2103e <nrf_cloud_service_info_json_encode+0x2a>
		if (ui->air_pressure) {
   210e4:	783c      	ldrb	r4, [r7, #0]
   210e6:	f014 0410 	ands.w	r4, r4, #16
   210ea:	d007      	beq.n	210fc <nrf_cloud_service_info_json_encode+0xe8>
			cJSON_AddItemToArray(array,
   210ec:	4840      	ldr	r0, [pc, #256]	; (211f0 <nrf_cloud_service_info_json_encode+0x1dc>)
   210ee:	f003 feaf 	bl	24e50 <cJSON_CreateString>
   210f2:	4601      	mov	r1, r0
   210f4:	4628      	mov	r0, r5
   210f6:	f012 fb97 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   210fa:	2401      	movs	r4, #1
		if (ui->gnss) {
   210fc:	783b      	ldrb	r3, [r7, #0]
   210fe:	0798      	lsls	r0, r3, #30
   21100:	d507      	bpl.n	21112 <nrf_cloud_service_info_json_encode+0xfe>
			cJSON_AddItemToArray(array,
   21102:	483c      	ldr	r0, [pc, #240]	; (211f4 <nrf_cloud_service_info_json_encode+0x1e0>)
   21104:	f003 fea4 	bl	24e50 <cJSON_CreateString>
   21108:	4601      	mov	r1, r0
   2110a:	4628      	mov	r0, r5
   2110c:	f012 fb8c 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21110:	3401      	adds	r4, #1
		if (ui->flip) {
   21112:	783b      	ldrb	r3, [r7, #0]
   21114:	0759      	lsls	r1, r3, #29
   21116:	d507      	bpl.n	21128 <nrf_cloud_service_info_json_encode+0x114>
			cJSON_AddItemToArray(array,
   21118:	4837      	ldr	r0, [pc, #220]	; (211f8 <nrf_cloud_service_info_json_encode+0x1e4>)
   2111a:	f003 fe99 	bl	24e50 <cJSON_CreateString>
   2111e:	4601      	mov	r1, r0
   21120:	4628      	mov	r0, r5
   21122:	f012 fb81 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21126:	3401      	adds	r4, #1
		if (ui->button) {
   21128:	787b      	ldrb	r3, [r7, #1]
   2112a:	075a      	lsls	r2, r3, #29
   2112c:	d507      	bpl.n	2113e <nrf_cloud_service_info_json_encode+0x12a>
			cJSON_AddItemToArray(array,
   2112e:	4833      	ldr	r0, [pc, #204]	; (211fc <nrf_cloud_service_info_json_encode+0x1e8>)
   21130:	f003 fe8e 	bl	24e50 <cJSON_CreateString>
   21134:	4601      	mov	r1, r0
   21136:	4628      	mov	r0, r5
   21138:	f012 fb76 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   2113c:	3401      	adds	r4, #1
		if (ui->temperature) {
   2113e:	783b      	ldrb	r3, [r7, #0]
   21140:	07db      	lsls	r3, r3, #31
   21142:	d507      	bpl.n	21154 <nrf_cloud_service_info_json_encode+0x140>
			cJSON_AddItemToArray(array,
   21144:	482e      	ldr	r0, [pc, #184]	; (21200 <nrf_cloud_service_info_json_encode+0x1ec>)
   21146:	f003 fe83 	bl	24e50 <cJSON_CreateString>
   2114a:	4601      	mov	r1, r0
   2114c:	4628      	mov	r0, r5
   2114e:	f012 fb6b 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21152:	3401      	adds	r4, #1
		if (ui->humidity) {
   21154:	783b      	ldrb	r3, [r7, #0]
   21156:	0718      	lsls	r0, r3, #28
   21158:	d507      	bpl.n	2116a <nrf_cloud_service_info_json_encode+0x156>
			cJSON_AddItemToArray(array,
   2115a:	482a      	ldr	r0, [pc, #168]	; (21204 <nrf_cloud_service_info_json_encode+0x1f0>)
   2115c:	f003 fe78 	bl	24e50 <cJSON_CreateString>
   21160:	4601      	mov	r1, r0
   21162:	4628      	mov	r0, r5
   21164:	f012 fb60 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21168:	3401      	adds	r4, #1
		if (ui->light_sensor) {
   2116a:	787b      	ldrb	r3, [r7, #1]
   2116c:	0799      	lsls	r1, r3, #30
   2116e:	d507      	bpl.n	21180 <nrf_cloud_service_info_json_encode+0x16c>
			cJSON_AddItemToArray(array,
   21170:	4825      	ldr	r0, [pc, #148]	; (21208 <nrf_cloud_service_info_json_encode+0x1f4>)
   21172:	f003 fe6d 	bl	24e50 <cJSON_CreateString>
   21176:	4601      	mov	r1, r0
   21178:	4628      	mov	r0, r5
   2117a:	f012 fb55 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   2117e:	3401      	adds	r4, #1
		if (ui->rsrp) {
   21180:	783b      	ldrb	r3, [r7, #0]
   21182:	069a      	lsls	r2, r3, #26
   21184:	d507      	bpl.n	21196 <nrf_cloud_service_info_json_encode+0x182>
			cJSON_AddItemToArray(array,
   21186:	4821      	ldr	r0, [pc, #132]	; (2120c <nrf_cloud_service_info_json_encode+0x1f8>)
   21188:	f003 fe62 	bl	24e50 <cJSON_CreateString>
   2118c:	4601      	mov	r1, r0
   2118e:	4628      	mov	r0, r5
   21190:	f012 fb4a 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   21194:	3401      	adds	r4, #1
		if (ui->log) {
   21196:	783b      	ldrb	r3, [r7, #0]
   21198:	065b      	lsls	r3, r3, #25
   2119a:	d507      	bpl.n	211ac <nrf_cloud_service_info_json_encode+0x198>
			cJSON_AddItemToArray(array,
   2119c:	481c      	ldr	r0, [pc, #112]	; (21210 <nrf_cloud_service_info_json_encode+0x1fc>)
   2119e:	f003 fe57 	bl	24e50 <cJSON_CreateString>
   211a2:	4601      	mov	r1, r0
   211a4:	4628      	mov	r0, r5
   211a6:	f012 fb3f 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   211aa:	3401      	adds	r4, #1
		if (ui->dictionary_log) {
   211ac:	f997 3000 	ldrsb.w	r3, [r7]
   211b0:	2b00      	cmp	r3, #0
   211b2:	da07      	bge.n	211c4 <nrf_cloud_service_info_json_encode+0x1b0>
			cJSON_AddItemToArray(array,
   211b4:	4817      	ldr	r0, [pc, #92]	; (21214 <nrf_cloud_service_info_json_encode+0x200>)
   211b6:	f003 fe4b 	bl	24e50 <cJSON_CreateString>
   211ba:	4601      	mov	r1, r0
   211bc:	4628      	mov	r0, r5
   211be:	f012 fb33 	bl	33828 <cJSON_AddItemToArray>
			++item_cnt;
   211c2:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   211c4:	4628      	mov	r0, r5
   211c6:	f012 fb17 	bl	337f8 <cJSON_GetArraySize>
   211ca:	42a0      	cmp	r0, r4
   211cc:	d082      	beq.n	210d4 <nrf_cloud_service_info_json_encode+0xc0>
			cJSON_DeleteItemFromObject(svc_inf_obj, NRF_CLOUD_JSON_KEY_SRVC_INFO_UI);
   211ce:	4907      	ldr	r1, [pc, #28]	; (211ec <nrf_cloud_service_info_json_encode+0x1d8>)
   211d0:	e774      	b.n	210bc <nrf_cloud_service_info_json_encode+0xa8>
		return -EINVAL;
   211d2:	f06f 0015 	mvn.w	r0, #21
   211d6:	e77e      	b.n	210d6 <nrf_cloud_service_info_json_encode+0xc2>
   211d8:	0003e600 	.word	0x0003e600
   211dc:	0003e608 	.word	0x0003e608
   211e0:	0003e60d 	.word	0x0003e60d
   211e4:	0003e613 	.word	0x0003e613
   211e8:	0003e617 	.word	0x0003e617
   211ec:	0003e620 	.word	0x0003e620
   211f0:	0003e623 	.word	0x0003e623
   211f4:	0003e62d 	.word	0x0003e62d
   211f8:	0003e632 	.word	0x0003e632
   211fc:	0003e637 	.word	0x0003e637
   21200:	0003e63e 	.word	0x0003e63e
   21204:	0003e643 	.word	0x0003e643
   21208:	0003e649 	.word	0x0003e649
   2120c:	0003dc98 	.word	0x0003dc98
   21210:	0003e653 	.word	0x0003e653
   21214:	0003e64f 	.word	0x0003e64f

00021218 <info_encode>:
{
   21218:	b538      	push	{r3, r4, r5, lr}
   2121a:	4605      	mov	r5, r0
   2121c:	4614      	mov	r4, r2
	if (mdm_inf) {
   2121e:	4608      	mov	r0, r1
   21220:	b911      	cbnz	r1, 21228 <info_encode+0x10>
	if (svc_inf) {
   21222:	b94c      	cbnz	r4, 21238 <info_encode+0x20>
   21224:	4620      	mov	r0, r4
}
   21226:	bd38      	pop	{r3, r4, r5, pc}
		ret = nrf_cloud_modem_info_json_encode(mdm_inf, root_obj);
   21228:	4629      	mov	r1, r5
   2122a:	f7ff fd47 	bl	20cbc <nrf_cloud_modem_info_json_encode>
		if (ret) {
   2122e:	2800      	cmp	r0, #0
   21230:	d0f7      	beq.n	21222 <info_encode+0xa>
			return -ENOMEM;
   21232:	f06f 000b 	mvn.w	r0, #11
   21236:	e7f6      	b.n	21226 <info_encode+0xe>
		cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(root_obj,
   21238:	4905      	ldr	r1, [pc, #20]	; (21250 <info_encode+0x38>)
   2123a:	4628      	mov	r0, r5
   2123c:	f012 fbba 	bl	339b4 <cJSON_AddObjectToObjectCS>
		if (svc_inf_obj == NULL) {
   21240:	4601      	mov	r1, r0
   21242:	2800      	cmp	r0, #0
   21244:	d0f5      	beq.n	21232 <info_encode+0x1a>
		ret = nrf_cloud_service_info_json_encode(svc_inf, svc_inf_obj);
   21246:	4620      	mov	r0, r4
}
   21248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = nrf_cloud_service_info_json_encode(svc_inf, svc_inf_obj);
   2124c:	f7ff bee2 	b.w	21014 <nrf_cloud_service_info_json_encode>
   21250:	0003e657 	.word	0x0003e657

00021254 <nrf_cloud_state_encode>:
{
   21254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21258:	4604      	mov	r4, r0
   2125a:	468b      	mov	fp, r1
	__ASSERT_NO_MSG(output != NULL);
   2125c:	4617      	mov	r7, r2
{
   2125e:	b08d      	sub	sp, #52	; 0x34
	__ASSERT_NO_MSG(output != NULL);
   21260:	b95a      	cbnz	r2, 2127a <nrf_cloud_state_encode+0x26>
   21262:	496b      	ldr	r1, [pc, #428]	; (21410 <nrf_cloud_state_encode+0x1bc>)
   21264:	486b      	ldr	r0, [pc, #428]	; (21414 <nrf_cloud_state_encode+0x1c0>)
   21266:	f240 2392 	movw	r3, #658	; 0x292
   2126a:	4a6b      	ldr	r2, [pc, #428]	; (21418 <nrf_cloud_state_encode+0x1c4>)
   2126c:	f00d fb72 	bl	2e954 <assert_print>
   21270:	f240 2192 	movw	r1, #658	; 0x292
   21274:	4868      	ldr	r0, [pc, #416]	; (21418 <nrf_cloud_state_encode+0x1c4>)
   21276:	f00d fb66 	bl	2e946 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2127a:	f003 fe0d 	bl	24e98 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   2127e:	4967      	ldr	r1, [pc, #412]	; (2141c <nrf_cloud_state_encode+0x1c8>)
	cJSON *root_obj = cJSON_CreateObject();
   21280:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   21282:	f012 fb97 	bl	339b4 <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   21286:	4966      	ldr	r1, [pc, #408]	; (21420 <nrf_cloud_state_encode+0x1cc>)
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, NRF_CLOUD_JSON_KEY_STATE);
   21288:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   2128a:	f012 fb93 	bl	339b4 <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   2128e:	4965      	ldr	r1, [pc, #404]	; (21424 <nrf_cloud_state_encode+0x1d0>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, NRF_CLOUD_JSON_KEY_REP);
   21290:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   21292:	f012 fb8f 	bl	339b4 <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_CONN);
   21296:	4964      	ldr	r1, [pc, #400]	; (21428 <nrf_cloud_state_encode+0x1d4>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_PAIRING);
   21298:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, NRF_CLOUD_JSON_KEY_CONN);
   2129a:	4630      	mov	r0, r6
   2129c:	f012 fb8a 	bl	339b4 <cJSON_AddObjectToObjectCS>
   212a0:	4680      	mov	r8, r0
	if (!pairing_obj || !connection_obj) {
   212a2:	f1b9 0f00 	cmp.w	r9, #0
   212a6:	d000      	beq.n	212aa <nrf_cloud_state_encode+0x56>
   212a8:	b938      	cbnz	r0, 212ba <nrf_cloud_state_encode+0x66>
			cJSON_Delete(root_obj);
   212aa:	4628      	mov	r0, r5
   212ac:	f003 fd24 	bl	24cf8 <cJSON_Delete>
		return -ENOMEM;
   212b0:	f06f 000b 	mvn.w	r0, #11
}
   212b4:	b00d      	add	sp, #52	; 0x34
   212b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (reported_state) {
   212ba:	2c06      	cmp	r4, #6
   212bc:	d007      	beq.n	212ce <nrf_cloud_state_encode+0x7a>
   212be:	2c07      	cmp	r4, #7
   212c0:	d035      	beq.n	2132e <nrf_cloud_state_encode+0xda>
		cJSON_Delete(root_obj);
   212c2:	4628      	mov	r0, r5
   212c4:	f003 fd18 	bl	24cf8 <cJSON_Delete>
		return -ENOTSUP;
   212c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   212cc:	e7f2      	b.n	212b4 <nrf_cloud_state_encode+0x60>
		ret += json_add_str_cs(pairing_obj, NRF_CLOUD_JSON_KEY_STATE,
   212ce:	4a57      	ldr	r2, [pc, #348]	; (2142c <nrf_cloud_state_encode+0x1d8>)
   212d0:	4952      	ldr	r1, [pc, #328]	; (2141c <nrf_cloud_state_encode+0x1c8>)
   212d2:	4648      	mov	r0, r9
   212d4:	f012 f81f 	bl	33316 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_TOPICS);
   212d8:	4955      	ldr	r1, [pc, #340]	; (21430 <nrf_cloud_state_encode+0x1dc>)
		ret += json_add_str_cs(pairing_obj, NRF_CLOUD_JSON_KEY_STATE,
   212da:	4604      	mov	r4, r0
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_TOPICS);
   212dc:	4648      	mov	r0, r9
   212de:	f012 f839 	bl	33354 <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   212e2:	4954      	ldr	r1, [pc, #336]	; (21434 <nrf_cloud_state_encode+0x1e0>)
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_TOPICS);
   212e4:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   212e6:	4648      	mov	r0, r9
   212e8:	f012 f834 	bl	33354 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_STAGE);
   212ec:	4952      	ldr	r1, [pc, #328]	; (21438 <nrf_cloud_state_encode+0x1e4>)
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   212ee:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_STAGE);
   212f0:	4630      	mov	r0, r6
   212f2:	f012 f82f 	bl	33354 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX);
   212f6:	4951      	ldr	r1, [pc, #324]	; (2143c <nrf_cloud_state_encode+0x1e8>)
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_STAGE);
   212f8:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX);
   212fa:	4630      	mov	r0, r6
   212fc:	f012 f82a 	bl	33354 <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, NRF_CLOUD_JSON_KEY_KEEPALIVE);
   21300:	494f      	ldr	r1, [pc, #316]	; (21440 <nrf_cloud_state_encode+0x1ec>)
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX);
   21302:	4404      	add	r4, r0
		ret += json_add_null_cs(connection_obj, NRF_CLOUD_JSON_KEY_KEEPALIVE);
   21304:	4640      	mov	r0, r8
   21306:	f012 f825 	bl	33354 <json_add_null_cs>
		if (ret != 0) {
   2130a:	42c4      	cmn	r4, r0
   2130c:	d1cd      	bne.n	212aa <nrf_cloud_state_encode+0x56>
	buffer = cJSON_PrintUnformatted(root_obj);
   2130e:	4628      	mov	r0, r5
   21310:	f012 fa6f 	bl	337f2 <cJSON_PrintUnformatted>
   21314:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   21316:	4628      	mov	r0, r5
   21318:	f003 fcee 	bl	24cf8 <cJSON_Delete>
	if (buffer == NULL) {
   2131c:	2c00      	cmp	r4, #0
   2131e:	d0c7      	beq.n	212b0 <nrf_cloud_state_encode+0x5c>
	output->len = strlen(buffer);
   21320:	4620      	mov	r0, r4
	output->ptr = buffer;
   21322:	607c      	str	r4, [r7, #4]
	output->len = strlen(buffer);
   21324:	f7e7 fff9 	bl	931a <strlen>
   21328:	6038      	str	r0, [r7, #0]
	return 0;
   2132a:	2000      	movs	r0, #0
   2132c:	e7c2      	b.n	212b4 <nrf_cloud_state_encode+0x60>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, NULL, &m_endp);
   2132e:	ab07      	add	r3, sp, #28
   21330:	9300      	str	r3, [sp, #0]
   21332:	2300      	movs	r3, #0
   21334:	a903      	add	r1, sp, #12
   21336:	461a      	mov	r2, r3
   21338:	a805      	add	r0, sp, #20
   2133a:	f001 f987 	bl	2264c <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2133e:	9a08      	ldr	r2, [sp, #32]
   21340:	493e      	ldr	r1, [pc, #248]	; (2143c <nrf_cloud_state_encode+0x1e8>)
   21342:	4630      	mov	r0, r6
   21344:	f011 ffe7 	bl	33316 <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, NRF_CLOUD_JSON_KEY_STATE,
   21348:	4a3e      	ldr	r2, [pc, #248]	; (21444 <nrf_cloud_state_encode+0x1f0>)
		ret += json_add_str_cs(reported_obj, NRF_CLOUD_JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2134a:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, NRF_CLOUD_JSON_KEY_STATE,
   2134c:	4933      	ldr	r1, [pc, #204]	; (2141c <nrf_cloud_state_encode+0x1c8>)
   2134e:	4648      	mov	r0, r9
   21350:	f011 ffe1 	bl	33316 <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   21354:	4937      	ldr	r1, [pc, #220]	; (21434 <nrf_cloud_state_encode+0x1e0>)
		ret += json_add_str_cs(pairing_obj, NRF_CLOUD_JSON_KEY_STATE,
   21356:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   21358:	4648      	mov	r0, r9
   2135a:	f011 fffb 	bl	33354 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_PAIR_STAT);
   2135e:	493a      	ldr	r1, [pc, #232]	; (21448 <nrf_cloud_state_encode+0x1f4>)
		ret += json_add_null_cs(pairing_obj, NRF_CLOUD_JSON_KEY_CFG);
   21360:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_PAIR_STAT);
   21362:	4630      	mov	r0, r6
   21364:	f011 fff6 	bl	33354 <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, NRF_CLOUD_JSON_KEY_KEEPALIVE,
   21368:	4b38      	ldr	r3, [pc, #224]	; (2144c <nrf_cloud_state_encode+0x1f8>)
   2136a:	2200      	movs	r2, #0
   2136c:	4934      	ldr	r1, [pc, #208]	; (21440 <nrf_cloud_state_encode+0x1ec>)
		ret += json_add_null_cs(reported_obj, NRF_CLOUD_JSON_KEY_PAIR_STAT);
   2136e:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, NRF_CLOUD_JSON_KEY_KEEPALIVE,
   21370:	4640      	mov	r0, r8
   21372:	f011 ffde 	bl	33332 <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj,
   21376:	492e      	ldr	r1, [pc, #184]	; (21430 <nrf_cloud_state_encode+0x1dc>)
		ret += json_add_num_cs(connection_obj, NRF_CLOUD_JSON_KEY_KEEPALIVE,
   21378:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj,
   2137a:	4648      	mov	r0, r9
   2137c:	f012 fb1a 	bl	339b4 <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, NRF_CLOUD_JSON_KEY_DEVICE_TO_CLOUD,
   21380:	9a06      	ldr	r2, [sp, #24]
   21382:	4933      	ldr	r1, [pc, #204]	; (21450 <nrf_cloud_state_encode+0x1fc>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj,
   21384:	4680      	mov	r8, r0
		ret += json_add_str_cs(topics_obj, NRF_CLOUD_JSON_KEY_DEVICE_TO_CLOUD,
   21386:	f011 ffc6 	bl	33316 <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, NRF_CLOUD_JSON_KEY_CLOUD_TO_DEVICE,
   2138a:	9a04      	ldr	r2, [sp, #16]
		ret += json_add_str_cs(topics_obj, NRF_CLOUD_JSON_KEY_DEVICE_TO_CLOUD,
   2138c:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, NRF_CLOUD_JSON_KEY_CLOUD_TO_DEVICE,
   2138e:	4931      	ldr	r1, [pc, #196]	; (21454 <nrf_cloud_state_encode+0x200>)
   21390:	4640      	mov	r0, r8
   21392:	f011 ffc0 	bl	33316 <json_add_str_cs>
   21396:	4404      	add	r4, r0
		if (update_desired_topic) {
   21398:	f1bb 0f00 	cmp.w	fp, #0
   2139c:	d00e      	beq.n	213bc <nrf_cloud_state_encode+0x168>
			cJSON *des_obj = cJSON_AddObjectToObjectCS(state_obj,
   2139e:	492e      	ldr	r1, [pc, #184]	; (21458 <nrf_cloud_state_encode+0x204>)
   213a0:	4650      	mov	r0, sl
   213a2:	f012 fb07 	bl	339b4 <cJSON_AddObjectToObjectCS>
			cJSON *pair_obj = cJSON_AddObjectToObjectCS(des_obj,
   213a6:	491f      	ldr	r1, [pc, #124]	; (21424 <nrf_cloud_state_encode+0x1d0>)
   213a8:	f012 fb04 	bl	339b4 <cJSON_AddObjectToObjectCS>
			cJSON *topic_obj = cJSON_AddObjectToObjectCS(pair_obj,
   213ac:	4920      	ldr	r1, [pc, #128]	; (21430 <nrf_cloud_state_encode+0x1dc>)
   213ae:	f012 fb01 	bl	339b4 <cJSON_AddObjectToObjectCS>
			ret += json_add_str_cs(topic_obj, NRF_CLOUD_JSON_KEY_CLOUD_TO_DEVICE,
   213b2:	9a04      	ldr	r2, [sp, #16]
   213b4:	4927      	ldr	r1, [pc, #156]	; (21454 <nrf_cloud_state_encode+0x200>)
   213b6:	f011 ffae 	bl	33316 <json_add_str_cs>
   213ba:	4404      	add	r4, r0
	if (!status_added && IS_ENABLED(CONFIG_NRF_CLOUD_SEND_DEVICE_STATUS)) {
   213bc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2145c <nrf_cloud_state_encode+0x208>
   213c0:	f898 a000 	ldrb.w	sl, [r8]
   213c4:	f1ba 0f00 	cmp.w	sl, #0
   213c8:	d120      	bne.n	2140c <nrf_cloud_state_encode+0x1b8>
		struct nrf_cloud_modem_info mdm_inf = {
   213ca:	f04f 0901 	mov.w	r9, #1
   213ce:	4b24      	ldr	r3, [pc, #144]	; (21460 <nrf_cloud_state_encode+0x20c>)
		cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj,
   213d0:	4630      	mov	r0, r6
		struct nrf_cloud_modem_info mdm_inf = {
   213d2:	681b      	ldr	r3, [r3, #0]
		cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj,
   213d4:	4923      	ldr	r1, [pc, #140]	; (21464 <nrf_cloud_state_encode+0x210>)
		struct nrf_cloud_modem_info mdm_inf = {
   213d6:	f8cd a027 	str.w	sl, [sp, #39]	; 0x27
   213da:	f88d a02b 	strb.w	sl, [sp, #43]	; 0x2b
   213de:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   213e2:	930b      	str	r3, [sp, #44]	; 0x2c
		cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj,
   213e4:	f012 fae6 	bl	339b4 <cJSON_AddObjectToObjectCS>
		if (!device_obj) {
   213e8:	b910      	cbnz	r0, 213f0 <nrf_cloud_state_encode+0x19c>
			return 0;
   213ea:	f06f 000b 	mvn.w	r0, #11
   213ee:	e78c      	b.n	2130a <nrf_cloud_state_encode+0xb6>
		mdm_inf.network = IS_ENABLED(CONFIG_NRF_CLOUD_SEND_DEVICE_STATUS_NETWORK) ?
   213f0:	2302      	movs	r3, #2
		err = info_encode(device_obj, &mdm_inf, NULL);
   213f2:	4652      	mov	r2, sl
   213f4:	a909      	add	r1, sp, #36	; 0x24
		mdm_inf.network = IS_ENABLED(CONFIG_NRF_CLOUD_SEND_DEVICE_STATUS_NETWORK) ?
   213f6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		mdm_inf.sim = IS_ENABLED(CONFIG_NRF_CLOUD_SEND_DEVICE_STATUS_SIM) ?
   213fa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		err = info_encode(device_obj, &mdm_inf, NULL);
   213fe:	f7ff ff0b 	bl	21218 <info_encode>
		if (!err) {
   21402:	2800      	cmp	r0, #0
   21404:	d181      	bne.n	2130a <nrf_cloud_state_encode+0xb6>
			status_added = true;
   21406:	f888 9000 	strb.w	r9, [r8]
   2140a:	e77e      	b.n	2130a <nrf_cloud_state_encode+0xb6>
	int err = 0;
   2140c:	2000      	movs	r0, #0
		if (ret != 0) {
   2140e:	e77c      	b.n	2130a <nrf_cloud_state_encode+0xb6>
   21410:	0003e151 	.word	0x0003e151
   21414:	000381c3 	.word	0x000381c3
   21418:	0003df36 	.word	0x0003df36
   2141c:	0003a7c8 	.word	0x0003a7c8
   21420:	0003e334 	.word	0x0003e334
   21424:	0003e23b 	.word	0x0003e23b
   21428:	00039f10 	.word	0x00039f10
   2142c:	0003e2cc 	.word	0x0003e2cc
   21430:	0003e440 	.word	0x0003e440
   21434:	0003fa70 	.word	0x0003fa70
   21438:	0003e663 	.word	0x0003e663
   2143c:	0003e220 	.word	0x0003e220
   21440:	0003e669 	.word	0x0003e669
   21444:	0003e447 	.word	0x0003e447
   21448:	0003e673 	.word	0x0003e673
   2144c:	4092c000 	.word	0x4092c000
   21450:	0003e44e 	.word	0x0003e44e
   21454:	0003e4f7 	.word	0x0003e4f7
   21458:	0003df96 	.word	0x0003df96
   2145c:	200127fb 	.word	0x200127fb
   21460:	2000ffbc 	.word	0x2000ffbc
   21464:	0003e681 	.word	0x0003e681

00021468 <get_string_from_array>:
{
   21468:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(string_out != NULL);
   2146a:	4614      	mov	r4, r2
   2146c:	b95a      	cbnz	r2, 21486 <get_string_from_array+0x1e>
   2146e:	490c      	ldr	r1, [pc, #48]	; (214a0 <get_string_from_array+0x38>)
   21470:	480c      	ldr	r0, [pc, #48]	; (214a4 <get_string_from_array+0x3c>)
   21472:	f240 730b 	movw	r3, #1803	; 0x70b
   21476:	4a0c      	ldr	r2, [pc, #48]	; (214a8 <get_string_from_array+0x40>)
   21478:	f00d fa6c 	bl	2e954 <assert_print>
   2147c:	f240 710b 	movw	r1, #1803	; 0x70b
   21480:	4809      	ldr	r0, [pc, #36]	; (214a8 <get_string_from_array+0x40>)
   21482:	f00d fa60 	bl	2e946 <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   21486:	f012 f9bf 	bl	33808 <cJSON_GetArrayItem>
   2148a:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2148c:	f012 fac0 	bl	33a10 <cJSON_IsString>
   21490:	b118      	cbz	r0, 2149a <get_string_from_array+0x32>
	return 0;
   21492:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   21494:	692b      	ldr	r3, [r5, #16]
   21496:	6023      	str	r3, [r4, #0]
}
   21498:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2149a:	f06f 0015 	mvn.w	r0, #21
   2149e:	e7fb      	b.n	21498 <get_string_from_array+0x30>
   214a0:	0003e68f 	.word	0x0003e68f
   214a4:	000381c3 	.word	0x000381c3
   214a8:	0003df36 	.word	0x0003df36

000214ac <nrf_cloud_error_msg_decode>:

int nrf_cloud_error_msg_decode(const char *const buf,
			       const char *const app_id,
			       const char *const msg_type,
			       enum nrf_cloud_error * const err)
{
   214ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214ae:	460e      	mov	r6, r1
   214b0:	4617      	mov	r7, r2
   214b2:	461c      	mov	r4, r3
	if (!buf || !err) {
   214b4:	b318      	cbz	r0, 214fe <nrf_cloud_error_msg_decode+0x52>
   214b6:	b313      	cbz	r3, 214fe <nrf_cloud_error_msg_decode+0x52>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   214b8:	2300      	movs	r3, #0
   214ba:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   214bc:	f012 f995 	bl	337ea <cJSON_Parse>
	if (!root_obj) {
   214c0:	4605      	mov	r5, r0
   214c2:	b1f8      	cbz	r0, 21504 <nrf_cloud_error_msg_decode+0x58>
		/* No JSON found, not an error message */
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   214c4:	4621      	mov	r1, r4
   214c6:	f7fe fec3 	bl	20250 <get_error_code_value>
	if (ret) {
   214ca:	4604      	mov	r4, r0
   214cc:	b940      	cbnz	r0, 214e0 <nrf_cloud_error_msg_decode+0x34>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   214ce:	b167      	cbz	r7, 214ea <nrf_cloud_error_msg_decode+0x3e>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   214d0:	463a      	mov	r2, r7
   214d2:	4628      	mov	r0, r5
   214d4:	490d      	ldr	r1, [pc, #52]	; (2150c <nrf_cloud_error_msg_decode+0x60>)
   214d6:	f7fe fe69 	bl	201ac <json_item_string_exists>
	if (msg_type &&
   214da:	b930      	cbnz	r0, 214ea <nrf_cloud_error_msg_decode+0x3e>
		ret = -ENOENT;
   214dc:	f06f 0401 	mvn.w	r4, #1
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   214e0:	4628      	mov	r0, r5
   214e2:	f003 fc09 	bl	24cf8 <cJSON_Delete>
	return ret;
}
   214e6:	4620      	mov	r0, r4
   214e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app_id &&
   214ea:	2e00      	cmp	r6, #0
   214ec:	d0f8      	beq.n	214e0 <nrf_cloud_error_msg_decode+0x34>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   214ee:	4632      	mov	r2, r6
   214f0:	4628      	mov	r0, r5
   214f2:	4907      	ldr	r1, [pc, #28]	; (21510 <nrf_cloud_error_msg_decode+0x64>)
   214f4:	f7fe fe5a 	bl	201ac <json_item_string_exists>
	if (app_id &&
   214f8:	2800      	cmp	r0, #0
   214fa:	d1f1      	bne.n	214e0 <nrf_cloud_error_msg_decode+0x34>
   214fc:	e7ee      	b.n	214dc <nrf_cloud_error_msg_decode+0x30>
		return -EINVAL;
   214fe:	f06f 0415 	mvn.w	r4, #21
   21502:	e7f0      	b.n	214e6 <nrf_cloud_error_msg_decode+0x3a>
		return -ENODATA;
   21504:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   21508:	e7ed      	b.n	214e6 <nrf_cloud_error_msg_decode+0x3a>
   2150a:	bf00      	nop
   2150c:	0003e0f9 	.word	0x0003e0f9
   21510:	0003e0f3 	.word	0x0003e0f3

00021514 <nrf_cloud_disconnection_request_decode>:

	return ret;
}

bool nrf_cloud_disconnection_request_decode(const char *const buf)
{
   21514:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   21516:	4604      	mov	r4, r0
   21518:	b308      	cbz	r0, 2155e <nrf_cloud_disconnection_request_decode+0x4a>
	}

	/* The candidate buffer must be a null-terminated string less than
	 * a certain length
	 */
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   2151a:	22c8      	movs	r2, #200	; 0xc8
   2151c:	2100      	movs	r1, #0
   2151e:	f013 fd47 	bl	34fb0 <memchr>
   21522:	b1f0      	cbz	r0, 21562 <nrf_cloud_disconnection_request_decode+0x4e>
		return false;
	}

	/* Fast test to avoid parsing EVERY message with cJSON. */
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   21524:	4620      	mov	r0, r4
   21526:	4910      	ldr	r1, [pc, #64]	; (21568 <nrf_cloud_disconnection_request_decode+0x54>)
   21528:	f013 ff6b 	bl	35402 <strstr>
   2152c:	b1c8      	cbz	r0, 21562 <nrf_cloud_disconnection_request_decode+0x4e>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   2152e:	4620      	mov	r0, r4
   21530:	490e      	ldr	r1, [pc, #56]	; (2156c <nrf_cloud_disconnection_request_decode+0x58>)
   21532:	f013 ff66 	bl	35402 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   21536:	b1a0      	cbz	r0, 21562 <nrf_cloud_disconnection_request_decode+0x4e>
		return false;
	}

	/* If the quick test passes, use cJSON to get certainty */
	bool ret = true;
	cJSON *discon_request_obj = cJSON_Parse(buf);
   21538:	4620      	mov	r0, r4
   2153a:	f012 f956 	bl	337ea <cJSON_Parse>

	/* Check for nRF Cloud disconnection request MQTT message */
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2153e:	4a0b      	ldr	r2, [pc, #44]	; (2156c <nrf_cloud_disconnection_request_decode+0x58>)
   21540:	490b      	ldr	r1, [pc, #44]	; (21570 <nrf_cloud_disconnection_request_decode+0x5c>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   21542:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   21544:	f7fe fe32 	bl	201ac <json_item_string_exists>
   21548:	4604      	mov	r4, r0
   2154a:	b128      	cbz	r0, 21558 <nrf_cloud_disconnection_request_decode+0x44>
				     NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) ||
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   2154c:	4628      	mov	r0, r5
   2154e:	4a06      	ldr	r2, [pc, #24]	; (21568 <nrf_cloud_disconnection_request_decode+0x54>)
   21550:	4908      	ldr	r1, [pc, #32]	; (21574 <nrf_cloud_disconnection_request_decode+0x60>)
   21552:	f7fe fe2b 	bl	201ac <json_item_string_exists>
   21556:	4604      	mov	r4, r0
				     NRF_CLOUD_JSON_APPID_VAL_DEVICE)) {
		/* Not a disconnection request message */
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
   21558:	4628      	mov	r0, r5
   2155a:	f003 fbcd 	bl	24cf8 <cJSON_Delete>
	return ret;
}
   2155e:	4620      	mov	r0, r4
   21560:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   21562:	4604      	mov	r4, r0
   21564:	e7fb      	b.n	2155e <nrf_cloud_disconnection_request_decode+0x4a>
   21566:	bf00      	nop
   21568:	0003e688 	.word	0x0003e688
   2156c:	0003e6a9 	.word	0x0003e6a9
   21570:	0003e0f9 	.word	0x0003e0f9
   21574:	0003e0f3 	.word	0x0003e0f3

00021578 <nrf_cloud_log_control_get>:
}

int nrf_cloud_log_control_get(void)
{
	return nrf_cloud_log_level;
}
   21578:	4b01      	ldr	r3, [pc, #4]	; (21580 <nrf_cloud_log_control_get+0x8>)
   2157a:	6818      	ldr	r0, [r3, #0]
   2157c:	4770      	bx	lr
   2157e:	bf00      	nop
   21580:	2000c9ac 	.word	0x2000c9ac

00021584 <nrf_cloud_log_level_set>:

void nrf_cloud_log_level_set(int level)
{
	if (nrf_cloud_log_level != level) {
   21584:	4b02      	ldr	r3, [pc, #8]	; (21590 <nrf_cloud_log_level_set+0xc>)
   21586:	681a      	ldr	r2, [r3, #0]
   21588:	4282      	cmp	r2, r0
		LOG_DBG("Changing log level from:%d to:%d", nrf_cloud_log_level, level);
		nrf_cloud_log_level = level;
   2158a:	bf18      	it	ne
   2158c:	6018      	strne	r0, [r3, #0]
	}
}
   2158e:	4770      	bx	lr
   21590:	2000c9ac 	.word	0x2000c9ac

00021594 <nrf_cloud_log_enable>:

void nrf_cloud_log_enable(bool enable)
{
	if (enable != enabled) {
   21594:	4b02      	ldr	r3, [pc, #8]	; (215a0 <nrf_cloud_log_enable+0xc>)
   21596:	781a      	ldrb	r2, [r3, #0]
   21598:	4282      	cmp	r2, r0
#if defined(CONFIG_NRF_CLOUD_LOG_BACKEND)
		logs_backend_enable(enable);
#endif
		enabled = enable;
   2159a:	bf18      	it	ne
   2159c:	7018      	strbne	r0, [r3, #0]
		LOG_DBG("enabled = %d", enabled);
	}
}
   2159e:	4770      	bx	lr
   215a0:	200127fd 	.word	0x200127fd

000215a4 <nrf_cloud_calloc>:
						    .calloc_fn = k_calloc,
						    .free_fn = k_free };

void *nrf_cloud_calloc(size_t count, size_t size)
{
	return used_hooks.calloc_fn(count, size);
   215a4:	4b01      	ldr	r3, [pc, #4]	; (215ac <nrf_cloud_calloc+0x8>)
   215a6:	685b      	ldr	r3, [r3, #4]
   215a8:	4718      	bx	r3
   215aa:	bf00      	nop
   215ac:	2000c9b0 	.word	0x2000c9b0

000215b0 <nrf_cloud_free>:
	return used_hooks.malloc_fn(size);
}

void nrf_cloud_free(void *ptr)
{
	used_hooks.free_fn(ptr);
   215b0:	4b01      	ldr	r3, [pc, #4]	; (215b8 <nrf_cloud_free+0x8>)
   215b2:	689b      	ldr	r3, [r3, #8]
   215b4:	4718      	bx	r3
   215b6:	bf00      	nop
   215b8:	2000c9b0 	.word	0x2000c9b0

000215bc <on_modem_lib_init>:
/* Initialized to value different than success (0) */
static int modem_lib_init_result = -1;

static void on_modem_lib_init(int ret, void *ctx)
{
	modem_lib_init_result = ret;
   215bc:	4b01      	ldr	r3, [pc, #4]	; (215c4 <on_modem_lib_init+0x8>)
   215be:	6018      	str	r0, [r3, #0]
}
   215c0:	4770      	bx	lr
   215c2:	bf00      	nop
   215c4:	2000c9bc 	.word	0x2000c9bc

000215c8 <nrf_cloud_bootloader_fota_slot_set>:
	return ((type == NRF_CLOUD_FOTA_MODEM_DELTA) ||
		(type == NRF_CLOUD_FOTA_MODEM_FULL));
}

int nrf_cloud_bootloader_fota_slot_set(struct nrf_cloud_settings_fota_job * const job)
{
   215c8:	b5b0      	push	{r4, r5, r7, lr}
   215ca:	b082      	sub	sp, #8
	int err = -ENOTSUP;

	if (!job) {
   215cc:	4605      	mov	r5, r0
{
   215ce:	af00      	add	r7, sp, #0
	if (!job) {
   215d0:	b380      	cbz	r0, 21634 <nrf_cloud_bootloader_fota_slot_set+0x6c>
		return -EINVAL;
	}

	/* Only set the slot flag once for bootloader updates */
	if (job->type == NRF_CLOUD_FOTA_BOOTLOADER &&
   215d2:	7843      	ldrb	r3, [r0, #1]
   215d4:	2b02      	cmp	r3, #2
   215d6:	d104      	bne.n	215e2 <nrf_cloud_bootloader_fota_slot_set+0x1a>
   215d8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   215dc:	f013 0301 	ands.w	r3, r3, #1
   215e0:	d004      	beq.n	215ec <nrf_cloud_bootloader_fota_slot_set+0x24>
		}

		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
	}

	return 0;
   215e2:	2400      	movs	r4, #0
}
   215e4:	4620      	mov	r0, r4
   215e6:	3708      	adds	r7, #8
   215e8:	46bd      	mov	sp, r7
   215ea:	bdb0      	pop	{r4, r5, r7, pc}
		err = fota_download_s0_active_get(&s0_active);
   215ec:	1df8      	adds	r0, r7, #7
		bool s0_active = false;
   215ee:	71fb      	strb	r3, [r7, #7]
		err = fota_download_s0_active_get(&s0_active);
   215f0:	f012 f830 	bl	33654 <fota_download_s0_active_get>
		if (err) {
   215f4:	4604      	mov	r4, r0
   215f6:	b178      	cbz	r0, 21618 <nrf_cloud_bootloader_fota_slot_set+0x50>
			LOG_ERR("Unable to determine active B1 slot, error: %d", err);
   215f8:	466d      	mov	r5, sp
   215fa:	b088      	sub	sp, #32
   215fc:	466a      	mov	r2, sp
   215fe:	4b0f      	ldr	r3, [pc, #60]	; (2163c <nrf_cloud_bootloader_fota_slot_set+0x74>)
   21600:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21604:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21608:	2303      	movs	r3, #3
   2160a:	480d      	ldr	r0, [pc, #52]	; (21640 <nrf_cloud_bootloader_fota_slot_set+0x78>)
   2160c:	f842 3f10 	str.w	r3, [r2, #16]!
   21610:	f011 ff04 	bl	3341c <z_log_msg_static_create.constprop.0>
   21614:	46ad      	mov	sp, r5
			return err;
   21616:	e7e5      	b.n	215e4 <nrf_cloud_bootloader_fota_slot_set+0x1c>
		if (s0_active) {
   21618:	79fa      	ldrb	r2, [r7, #7]
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2161a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
		if (s0_active) {
   2161e:	b132      	cbz	r2, 2162e <nrf_cloud_bootloader_fota_slot_set+0x66>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   21620:	f043 0302 	orr.w	r3, r3, #2
		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
   21624:	f043 0301 	orr.w	r3, r3, #1
   21628:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   2162c:	e7d9      	b.n	215e2 <nrf_cloud_bootloader_fota_slot_set+0x1a>
			job->bl_flags &= ~NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2162e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   21632:	e7f7      	b.n	21624 <nrf_cloud_bootloader_fota_slot_set+0x5c>
		return -EINVAL;
   21634:	f06f 0415 	mvn.w	r4, #21
   21638:	e7d4      	b.n	215e4 <nrf_cloud_bootloader_fota_slot_set+0x1c>
   2163a:	bf00      	nop
   2163c:	0003e78e 	.word	0x0003e78e
   21640:	00036598 	.word	0x00036598

00021644 <connect_error_translate>:
	atomic_set(&uninit_in_progress, 0);
	return err;
}

static int connect_error_translate(const int err)
{
   21644:	b598      	push	{r3, r4, r7, lr}
	switch (err) {
   21646:	2800      	cmp	r0, #0
{
   21648:	af00      	add	r7, sp, #0
	switch (err) {
   2164a:	dc0e      	bgt.n	2166a <connect_error_translate+0x26>
   2164c:	f110 0f0d 	cmn.w	r0, #13
   21650:	da1d      	bge.n	2168e <connect_error_translate+0x4a>
   21652:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   21656:	d050      	beq.n	216fa <connect_error_translate+0xb6>
   21658:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2165c:	da3a      	bge.n	216d4 <connect_error_translate+0x90>
   2165e:	f110 0f77 	cmn.w	r0, #119	; 0x77
   21662:	d04d      	beq.n	21700 <connect_error_translate+0xbc>
   21664:	f110 0f74 	cmn.w	r0, #116	; 0x74
   21668:	d04d      	beq.n	21706 <connect_error_translate+0xc2>
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF Cloud connect failed %d", err);
   2166a:	466c      	mov	r4, sp
   2166c:	b088      	sub	sp, #32
   2166e:	466a      	mov	r2, sp
   21670:	4b29      	ldr	r3, [pc, #164]	; (21718 <connect_error_translate+0xd4>)
   21672:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21676:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2167a:	2303      	movs	r3, #3
   2167c:	4827      	ldr	r0, [pc, #156]	; (2171c <connect_error_translate+0xd8>)
   2167e:	f842 3f10 	str.w	r3, [r2, #16]!
   21682:	f011 fed1 	bl	33428 <z_log_msg_static_create.constprop.0>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
   21686:	f06f 0004 	mvn.w	r0, #4
   2168a:	46a5      	mov	sp, r4
   2168c:	e02d      	b.n	216ea <connect_error_translate+0xa6>
	switch (err) {
   2168e:	f100 030d 	add.w	r3, r0, #13
   21692:	2b0d      	cmp	r3, #13
   21694:	d8e9      	bhi.n	2166a <connect_error_translate+0x26>
   21696:	a201      	add	r2, pc, #4	; (adr r2, 2169c <connect_error_translate+0x58>)
   21698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2169c:	000216e7 	.word	0x000216e7
   216a0:	000216f5 	.word	0x000216f5
   216a4:	0002166b 	.word	0x0002166b
   216a8:	0002170d 	.word	0x0002170d
   216ac:	0002166b 	.word	0x0002166b
   216b0:	000216ef 	.word	0x000216ef
   216b4:	0002166b 	.word	0x0002166b
   216b8:	0002166b 	.word	0x0002166b
   216bc:	0002166b 	.word	0x0002166b
   216c0:	0002166b 	.word	0x0002166b
   216c4:	0002166b 	.word	0x0002166b
   216c8:	0002166b 	.word	0x0002166b
   216cc:	0002166b 	.word	0x0002166b
   216d0:	000216eb 	.word	0x000216eb
   216d4:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   216d8:	d01b      	beq.n	21712 <connect_error_translate+0xce>
   216da:	f110 0f16 	cmn.w	r0, #22
   216de:	d1c4      	bne.n	2166a <connect_error_translate+0x26>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   216e0:	f06f 0006 	mvn.w	r0, #6
   216e4:	e001      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   216e6:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
   216ea:	46bd      	mov	sp, r7
   216ec:	bd98      	pop	{r3, r4, r7, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   216ee:	f06f 0003 	mvn.w	r0, #3
   216f2:	e7fa      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   216f4:	f06f 0005 	mvn.w	r0, #5
   216f8:	e7f7      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   216fa:	f06f 0008 	mvn.w	r0, #8
   216fe:	e7f4      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   21700:	f06f 000a 	mvn.w	r0, #10
   21704:	e7f1      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   21706:	f06f 0009 	mvn.w	r0, #9
   2170a:	e7ee      	b.n	216ea <connect_error_translate+0xa6>
	switch (err) {
   2170c:	f06f 0002 	mvn.w	r0, #2
   21710:	e7eb      	b.n	216ea <connect_error_translate+0xa6>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   21712:	f06f 0007 	mvn.w	r0, #7
   21716:	e7e8      	b.n	216ea <connect_error_translate+0xa6>
   21718:	0003e7d2 	.word	0x0003e7d2
   2171c:	00036568 	.word	0x00036568

00021720 <nfsm_get_current_state>:
	return current_state;
   21720:	4b01      	ldr	r3, [pc, #4]	; (21728 <nfsm_get_current_state+0x8>)
   21722:	7818      	ldrb	r0, [r3, #0]
}
   21724:	4770      	bx	lr
   21726:	bf00      	nop
   21728:	200127fe 	.word	0x200127fe

0002172c <nfsm_set_current_state_and_notify>:
{
   2172c:	b570      	push	{r4, r5, r6, lr}
   2172e:	4606      	mov	r6, r0
	bool discon_evt = (evt != NULL) &&
   21730:	460c      	mov	r4, r1
   21732:	b1e9      	cbz	r1, 21770 <nfsm_set_current_state_and_notify+0x44>
   21734:	780d      	ldrb	r5, [r1, #0]
   21736:	f1a5 030b 	sub.w	r3, r5, #11
   2173a:	425d      	negs	r5, r3
   2173c:	415d      	adcs	r5, r3
   2173e:	f04f 32ff 	mov.w	r2, #4294967295
   21742:	f04f 33ff 	mov.w	r3, #4294967295
   21746:	4816      	ldr	r0, [pc, #88]	; (217a0 <nfsm_set_current_state_and_notify+0x74>)
   21748:	f007 f89c 	bl	28884 <z_impl_k_mutex_lock>
	if (!atomic_get(&uninit_in_progress)) {
   2174c:	4815      	ldr	r0, [pc, #84]	; (217a4 <nfsm_set_current_state_and_notify+0x78>)
   2174e:	f011 fe68 	bl	33422 <atomic_get>
   21752:	b908      	cbnz	r0, 21758 <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   21754:	4b14      	ldr	r3, [pc, #80]	; (217a8 <nfsm_set_current_state_and_notify+0x7c>)
   21756:	701e      	strb	r6, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   21758:	4811      	ldr	r0, [pc, #68]	; (217a0 <nfsm_set_current_state_and_notify+0x74>)
   2175a:	f007 f963 	bl	28a24 <z_impl_k_mutex_unlock>
	if (discon_evt) {
   2175e:	4e13      	ldr	r6, [pc, #76]	; (217ac <nfsm_set_current_state_and_notify+0x80>)
   21760:	b945      	cbnz	r5, 21774 <nfsm_set_current_state_and_notify+0x48>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   21762:	6833      	ldr	r3, [r6, #0]
   21764:	b1d3      	cbz	r3, 2179c <nfsm_set_current_state_and_notify+0x70>
   21766:	b1cc      	cbz	r4, 2179c <nfsm_set_current_state_and_notify+0x70>
		app_event_handler(evt);
   21768:	4620      	mov	r0, r4
}
   2176a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		app_event_handler(evt);
   2176e:	4718      	bx	r3
	bool discon_evt = (evt != NULL) &&
   21770:	460d      	mov	r5, r1
   21772:	e7e4      	b.n	2173e <nfsm_set_current_state_and_notify+0x12>
		atomic_set(&transport_disconnected, 1);
   21774:	2101      	movs	r1, #1
   21776:	480e      	ldr	r0, [pc, #56]	; (217b0 <nfsm_set_current_state_and_notify+0x84>)
   21778:	f011 fe59 	bl	3342e <atomic_set.isra.0>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2177c:	6833      	ldr	r3, [r6, #0]
   2177e:	b943      	cbnz	r3, 21792 <nfsm_set_current_state_and_notify+0x66>
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   21780:	4808      	ldr	r0, [pc, #32]	; (217a4 <nfsm_set_current_state_and_notify+0x78>)
   21782:	f011 fe4e 	bl	33422 <atomic_get>
   21786:	b148      	cbz	r0, 2179c <nfsm_set_current_state_and_notify+0x70>
}
   21788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
   2178c:	4809      	ldr	r0, [pc, #36]	; (217b4 <nfsm_set_current_state_and_notify+0x88>)
   2178e:	f007 badb 	b.w	28d48 <z_impl_k_sem_give>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   21792:	2c00      	cmp	r4, #0
   21794:	d0f4      	beq.n	21780 <nfsm_set_current_state_and_notify+0x54>
		app_event_handler(evt);
   21796:	4620      	mov	r0, r4
   21798:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   2179a:	e7f1      	b.n	21780 <nfsm_set_current_state_and_notify+0x54>
}
   2179c:	bd70      	pop	{r4, r5, r6, pc}
   2179e:	bf00      	nop
   217a0:	2000cf58 	.word	0x2000cf58
   217a4:	2000ffc8 	.word	0x2000ffc8
   217a8:	200127fe 	.word	0x200127fe
   217ac:	2000ffc4 	.word	0x2000ffc4
   217b0:	2000ffcc 	.word	0x2000ffcc
   217b4:	2000cfe0 	.word	0x2000cfe0

000217b8 <nfsm_get_disconnect_requested>:
{
   217b8:	b508      	push	{r3, lr}
	return (bool)atomic_get(&disconnect_requested);
   217ba:	4803      	ldr	r0, [pc, #12]	; (217c8 <nfsm_get_disconnect_requested+0x10>)
   217bc:	f011 fe31 	bl	33422 <atomic_get>
}
   217c0:	3800      	subs	r0, #0
   217c2:	bf18      	it	ne
   217c4:	2001      	movne	r0, #1
   217c6:	bd08      	pop	{r3, pc}
   217c8:	2000ffd0 	.word	0x2000ffd0

000217cc <nrf_cloud_run>:

	return 0;
}

void nrf_cloud_run(void)
{
   217cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   217d0:	f04f 0800 	mov.w	r8, #0
{
   217d4:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_take(sem, timeout);
   217d6:	4d4c      	ldr	r5, [pc, #304]	; (21908 <nrf_cloud_run+0x13c>)
	atomic_set(&connection_poll_active, 1);
   217d8:	4e4c      	ldr	r6, [pc, #304]	; (2190c <nrf_cloud_run+0x140>)
{
   217da:	af00      	add	r7, sp, #0
   217dc:	f04f 32ff 	mov.w	r2, #4294967295
   217e0:	f04f 33ff 	mov.w	r3, #4294967295
   217e4:	4628      	mov	r0, r5
   217e6:	f007 faf3 	bl	28dd0 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   217ea:	2101      	movs	r1, #1
   217ec:	4630      	mov	r0, r6
   217ee:	f011 fe1e 	bl	3342e <atomic_set.isra.0>
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   217f2:	2302      	movs	r3, #2
	return current_state;
   217f4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 21910 <nrf_cloud_run+0x144>
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   217f8:	f107 0108 	add.w	r1, r7, #8
	return current_state;
   217fc:	f899 0000 	ldrb.w	r0, [r9]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   21800:	723b      	strb	r3, [r7, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   21802:	f8c7 800c 	str.w	r8, [r7, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21806:	f7ff ff91 	bl	2172c <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   2180a:	2100      	movs	r1, #0
   2180c:	4841      	ldr	r0, [pc, #260]	; (21914 <nrf_cloud_run+0x148>)
   2180e:	f011 fe0e 	bl	3342e <atomic_set.isra.0>
	return nct_connect();
   21812:	f000 fe29 	bl	22468 <nct_connect>

	ret = connect_to_cloud();
	ret = connect_error_translate(ret);
   21816:	f7ff ff15 	bl	21644 <connect_error_translate>

	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2181a:	4604      	mov	r4, r0
   2181c:	b190      	cbz	r0, 21844 <nrf_cloud_run+0x78>
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECT_ERROR;
   2181e:	230f      	movs	r3, #15
		evt.status = ret;
   21820:	60f8      	str	r0, [r7, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21822:	f107 0108 	add.w	r1, r7, #8
	return current_state;
   21826:	f899 0000 	ldrb.w	r0, [r9]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECT_ERROR;
   2182a:	723b      	strb	r3, [r7, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2182c:	f7ff ff7e 	bl	2172c <nfsm_set_current_state_and_notify>
			(void)nct_disconnect();
		}
	}

reset:
	atomic_set(&connection_poll_active, 0);
   21830:	2100      	movs	r1, #0
   21832:	4630      	mov	r0, r6
   21834:	f011 fdfb 	bl	3342e <atomic_set.isra.0>
   21838:	2200      	movs	r2, #0
   2183a:	2300      	movs	r3, #0
   2183c:	4628      	mov	r0, r5
   2183e:	f007 fac7 	bl	28dd0 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   21842:	e7cb      	b.n	217dc <nrf_cloud_run+0x10>
	fds[0].fd = nct_socket_get();
   21844:	f001 f806 	bl	22854 <nct_socket_get>
	fds[0].events = POLLIN;
   21848:	2301      	movs	r3, #1
   2184a:	80bb      	strh	r3, [r7, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2184c:	230b      	movs	r3, #11
	fds[0].fd = nct_socket_get();
   2184e:	6038      	str	r0, [r7, #0]
	atomic_set(&transport_disconnected, 0);
   21850:	4621      	mov	r1, r4
   21852:	4831      	ldr	r0, [pc, #196]	; (21918 <nrf_cloud_run+0x14c>)
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   21854:	723b      	strb	r3, [r7, #8]
	atomic_set(&transport_disconnected, 0);
   21856:	f011 fdea 	bl	3342e <atomic_set.isra.0>
		fds[0].revents = 0;
   2185a:	f8a7 8006 	strh.w	r8, [r7, #6]
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2185e:	f000 fff3 	bl	22848 <nct_keepalive_time_left>
   21862:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   21864:	2101      	movs	r1, #1
   21866:	4638      	mov	r0, r7
   21868:	f00d fb42 	bl	2eef0 <z_impl_zsock_poll>
		if (ret == 0) {
   2186c:	2800      	cmp	r0, #0
   2186e:	d108      	bne.n	21882 <nrf_cloud_run+0xb6>
	return nct_process();
   21870:	f000 ff70 	bl	22754 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   21874:	2800      	cmp	r0, #0
   21876:	daf0      	bge.n	2185a <nrf_cloud_run+0x8e>
   21878:	300b      	adds	r0, #11
   2187a:	d0ee      	beq.n	2185a <nrf_cloud_run+0x8e>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2187c:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2187e:	60fb      	str	r3, [r7, #12]
			break;
   21880:	e023      	b.n	218ca <nrf_cloud_run+0xfe>
			LOG_ERR("poll() returned an error: %d; revents: 0x%x",
   21882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
		if (ret < 0) {
   21886:	da12      	bge.n	218ae <nrf_cloud_run+0xe2>
			LOG_ERR("poll() returned an error: %d; revents: 0x%x",
   21888:	466c      	mov	r4, sp
   2188a:	b088      	sub	sp, #32
   2188c:	b088      	sub	sp, #32
   2188e:	466a      	mov	r2, sp
   21890:	61d3      	str	r3, [r2, #28]
   21892:	2304      	movs	r3, #4
   21894:	4921      	ldr	r1, [pc, #132]	; (2191c <nrf_cloud_run+0x150>)
   21896:	e9c2 1005 	strd	r1, r0, [r2, #20]
   2189a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2189e:	4820      	ldr	r0, [pc, #128]	; (21920 <nrf_cloud_run+0x154>)
   218a0:	f842 3f10 	str.w	r3, [r2, #16]!
   218a4:	f011 fdc0 	bl	33428 <z_log_msg_static_create.constprop.0>
   218a8:	46a5      	mov	sp, r4
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   218aa:	2303      	movs	r3, #3
   218ac:	e7e7      	b.n	2187e <nrf_cloud_run+0xb2>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   218ae:	f013 0201 	ands.w	r2, r3, #1
   218b2:	d01a      	beq.n	218ea <nrf_cloud_run+0x11e>
	return nct_process();
   218b4:	f000 ff4e 	bl	22754 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   218b8:	2800      	cmp	r0, #0
   218ba:	da01      	bge.n	218c0 <nrf_cloud_run+0xf4>
   218bc:	300b      	adds	r0, #11
   218be:	d1dd      	bne.n	2187c <nrf_cloud_run+0xb0>
			if (atomic_get(&transport_disconnected) == 1) {
   218c0:	4815      	ldr	r0, [pc, #84]	; (21918 <nrf_cloud_run+0x14c>)
   218c2:	f011 fdae 	bl	33422 <atomic_get>
   218c6:	2801      	cmp	r0, #1
   218c8:	d1c7      	bne.n	2185a <nrf_cloud_run+0x8e>
	if (atomic_get(&transport_disconnected) == 0) {
   218ca:	4813      	ldr	r0, [pc, #76]	; (21918 <nrf_cloud_run+0x14c>)
   218cc:	f011 fda9 	bl	33422 <atomic_get>
   218d0:	2800      	cmp	r0, #0
   218d2:	d1ad      	bne.n	21830 <nrf_cloud_run+0x64>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   218d4:	2001      	movs	r0, #1
   218d6:	f107 0108 	add.w	r1, r7, #8
   218da:	f7ff ff27 	bl	2172c <nfsm_set_current_state_and_notify>
		if (evt.status != NRF_CLOUD_DISCONNECT_USER_REQUEST) {
   218de:	68fb      	ldr	r3, [r7, #12]
   218e0:	2b00      	cmp	r3, #0
   218e2:	d0a5      	beq.n	21830 <nrf_cloud_run+0x64>
			(void)nct_disconnect();
   218e4:	f000 ff2c 	bl	22740 <nct_disconnect>
   218e8:	e7a2      	b.n	21830 <nrf_cloud_run+0x64>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   218ea:	0699      	lsls	r1, r3, #26
   218ec:	d506      	bpl.n	218fc <nrf_cloud_run+0x130>
			if (nfsm_get_disconnect_requested()) {
   218ee:	f7ff ff63 	bl	217b8 <nfsm_get_disconnect_requested>
   218f2:	b108      	cbz	r0, 218f8 <nrf_cloud_run+0x12c>
				evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   218f4:	60fa      	str	r2, [r7, #12]
   218f6:	e7e8      	b.n	218ca <nrf_cloud_run+0xfe>
				evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   218f8:	2302      	movs	r3, #2
   218fa:	e7c0      	b.n	2187e <nrf_cloud_run+0xb2>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   218fc:	06da      	lsls	r2, r3, #27
   218fe:	d4bd      	bmi.n	2187c <nrf_cloud_run+0xb0>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   21900:	071b      	lsls	r3, r3, #28
   21902:	d5aa      	bpl.n	2185a <nrf_cloud_run+0x8e>
   21904:	e7d1      	b.n	218aa <nrf_cloud_run+0xde>
   21906:	bf00      	nop
   21908:	2000cf98 	.word	0x2000cf98
   2190c:	2000ffc0 	.word	0x2000ffc0
   21910:	200127fe 	.word	0x200127fe
   21914:	2000ffd0 	.word	0x2000ffd0
   21918:	2000ffcc 	.word	0x2000ffcc
   2191c:	0003e7ee 	.word	0x0003e7ee
   21920:	00036568 	.word	0x00036568

00021924 <nrf_cloud_disconnect>:
{
   21924:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   21926:	4b07      	ldr	r3, [pc, #28]	; (21944 <nrf_cloud_disconnect+0x20>)
   21928:	781b      	ldrb	r3, [r3, #0]
   2192a:	2b01      	cmp	r3, #1
   2192c:	d907      	bls.n	2193e <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   2192e:	2101      	movs	r1, #1
   21930:	4805      	ldr	r0, [pc, #20]	; (21948 <nrf_cloud_disconnect+0x24>)
   21932:	f011 fd7c 	bl	3342e <atomic_set.isra.0>
}
   21936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2193a:	f000 bf01 	b.w	22740 <nct_disconnect>
}
   2193e:	f06f 000c 	mvn.w	r0, #12
   21942:	bd08      	pop	{r3, pc}
   21944:	200127fe 	.word	0x200127fe
   21948:	2000ffd0 	.word	0x2000ffd0

0002194c <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2194c:	4b01      	ldr	r3, [pc, #4]	; (21954 <nct_input+0x8>)
   2194e:	7819      	ldrb	r1, [r3, #0]
   21950:	f000 bac4 	b.w	21edc <nfsm_handle_incoming_event>
   21954:	200127fe 	.word	0x200127fe

00021958 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   21958:	b5b0      	push	{r4, r5, r7, lr}
   2195a:	b08c      	sub	sp, #48	; 0x30
   2195c:	af00      	add	r7, sp, #0
	int err;
	struct nct_cc_data msg = {
   2195e:	2214      	movs	r2, #20
   21960:	2100      	movs	r1, #0
   21962:	1d38      	adds	r0, r7, #4
   21964:	f013 fb62 	bl	3502c <memset>
   21968:	4b21      	ldr	r3, [pc, #132]	; (219f0 <state_ua_pin_wait+0x98>)
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.message_id = NCT_MSG_ID_STATE_REPORT,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_state_encode(STATE_UA_PIN_WAIT, false, &msg.data);
   2196a:	2100      	movs	r1, #0
   2196c:	2006      	movs	r0, #6
   2196e:	1d3a      	adds	r2, r7, #4
	struct nct_cc_data msg = {
   21970:	617b      	str	r3, [r7, #20]
	err = nrf_cloud_state_encode(STATE_UA_PIN_WAIT, false, &msg.data);
   21972:	f7ff fc6f 	bl	21254 <nrf_cloud_state_encode>
	if (err) {
   21976:	4604      	mov	r4, r0
   21978:	b190      	cbz	r0, 219a0 <state_ua_pin_wait+0x48>
		LOG_ERR("nrf_cloud_state_encode failed %d", err);
   2197a:	466d      	mov	r5, sp
   2197c:	b088      	sub	sp, #32
   2197e:	466a      	mov	r2, sp
   21980:	4b1c      	ldr	r3, [pc, #112]	; (219f4 <state_ua_pin_wait+0x9c>)
   21982:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21986:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2198a:	2303      	movs	r3, #3
   2198c:	481a      	ldr	r0, [pc, #104]	; (219f8 <state_ua_pin_wait+0xa0>)
   2198e:	f842 3f10 	str.w	r3, [r2, #16]!
   21992:	f011 fdc7 	bl	33524 <z_log_msg_static_create.constprop.0>
   21996:	46ad      	mov	sp, r5
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   21998:	4620      	mov	r0, r4
   2199a:	3730      	adds	r7, #48	; 0x30
   2199c:	46bd      	mov	sp, r7
   2199e:	bdb0      	pop	{r4, r5, r7, pc}
	err = nct_cc_send(&msg);
   219a0:	1d38      	adds	r0, r7, #4
   219a2:	f000 fdaf 	bl	22504 <nct_cc_send>
	if (err) {
   219a6:	4604      	mov	r4, r0
   219a8:	b190      	cbz	r0, 219d0 <state_ua_pin_wait+0x78>
		LOG_ERR("nct_cc_send failed %d", err);
   219aa:	466d      	mov	r5, sp
   219ac:	b088      	sub	sp, #32
   219ae:	466a      	mov	r2, sp
   219b0:	4b12      	ldr	r3, [pc, #72]	; (219fc <state_ua_pin_wait+0xa4>)
   219b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   219b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   219ba:	2303      	movs	r3, #3
   219bc:	480e      	ldr	r0, [pc, #56]	; (219f8 <state_ua_pin_wait+0xa0>)
   219be:	f842 3f10 	str.w	r3, [r2, #16]!
   219c2:	f011 fdaf 	bl	33524 <z_log_msg_static_create.constprop.0>
   219c6:	46ad      	mov	sp, r5
		nrf_cloud_free((void *)msg.data.ptr);
   219c8:	68b8      	ldr	r0, [r7, #8]
   219ca:	f7ff fdf1 	bl	215b0 <nrf_cloud_free>
		return err;
   219ce:	e7e3      	b.n	21998 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   219d0:	68b8      	ldr	r0, [r7, #8]
   219d2:	f7ff fded 	bl	215b0 <nrf_cloud_free>
	struct nrf_cloud_evt evt = {
   219d6:	2218      	movs	r2, #24
   219d8:	4621      	mov	r1, r4
   219da:	18b8      	adds	r0, r7, r2
   219dc:	f013 fb26 	bl	3502c <memset>
   219e0:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   219e2:	2006      	movs	r0, #6
   219e4:	f107 0118 	add.w	r1, r7, #24
	struct nrf_cloud_evt evt = {
   219e8:	763b      	strb	r3, [r7, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   219ea:	f7ff fe9f 	bl	2172c <nfsm_set_current_state_and_notify>
	return 0;
   219ee:	e7d3      	b.n	21998 <state_ua_pin_wait+0x40>
   219f0:	0001012c 	.word	0x0001012c
   219f4:	0003e844 	.word	0x0003e844
   219f8:	000365a0 	.word	0x000365a0
   219fc:	0003e865 	.word	0x0003e865

00021a00 <dc_rx_data_handler>:
#endif
	return -ENOSYS;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   21a00:	b5b0      	push	{r4, r5, r7, lr}
   21a02:	b08c      	sub	sp, #48	; 0x30
   21a04:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(nct_evt != NULL);
   21a06:	b958      	cbnz	r0, 21a20 <dc_rx_data_handler+0x20>
   21a08:	4940      	ldr	r1, [pc, #256]	; (21b0c <dc_rx_data_handler+0x10c>)
   21a0a:	f240 23bf 	movw	r3, #703	; 0x2bf
   21a0e:	4a40      	ldr	r2, [pc, #256]	; (21b10 <dc_rx_data_handler+0x110>)
   21a10:	4840      	ldr	r0, [pc, #256]	; (21b14 <dc_rx_data_handler+0x114>)
   21a12:	f00c ff9f 	bl	2e954 <assert_print>
   21a16:	f240 21bf 	movw	r1, #703	; 0x2bf
	__ASSERT_NO_MSG(nct_evt->param.dc != NULL);
   21a1a:	483d      	ldr	r0, [pc, #244]	; (21b10 <dc_rx_data_handler+0x110>)
   21a1c:	f00c ff93 	bl	2e946 <assert_post_action>
   21a20:	6844      	ldr	r4, [r0, #4]
   21a22:	b94c      	cbnz	r4, 21a38 <dc_rx_data_handler+0x38>
   21a24:	493c      	ldr	r1, [pc, #240]	; (21b18 <dc_rx_data_handler+0x118>)
   21a26:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   21a2a:	4a39      	ldr	r2, [pc, #228]	; (21b10 <dc_rx_data_handler+0x110>)
   21a2c:	4839      	ldr	r0, [pc, #228]	; (21b14 <dc_rx_data_handler+0x114>)
   21a2e:	f00c ff91 	bl	2e954 <assert_print>
   21a32:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   21a36:	e7f0      	b.n	21a1a <dc_rx_data_handler+0x1a>

	bool discon_req = false;

	struct nrf_cloud_evt cloud_evt = {
   21a38:	2218      	movs	r2, #24
   21a3a:	2100      	movs	r1, #0
   21a3c:	4638      	mov	r0, r7
   21a3e:	f013 faf5 	bl	3502c <memset>
   21a42:	e894 0003 	ldmia.w	r4, {r0, r1}
   21a46:	f107 0308 	add.w	r3, r7, #8
   21a4a:	e883 0003 	stmia.w	r3, {r0, r1}
   21a4e:	f107 0310 	add.w	r3, r7, #16
   21a52:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   21a56:	e883 0003 	stmia.w	r3, {r0, r1}
		.data = nct_evt->param.dc->data,
		.topic = nct_evt->param.dc->topic,
	};

	switch (nrf_cloud_dc_rx_topic_decode(cloud_evt.topic.ptr)) {
   21a5a:	6978      	ldr	r0, [r7, #20]
   21a5c:	f7ff f904 	bl	20c68 <nrf_cloud_dc_rx_topic_decode>
   21a60:	2802      	cmp	r0, #2
   21a62:	d027      	beq.n	21ab4 <dc_rx_data_handler+0xb4>
   21a64:	2803      	cmp	r0, #3
   21a66:	d029      	beq.n	21abc <dc_rx_data_handler+0xbc>
   21a68:	2801      	cmp	r0, #1
   21a6a:	d12d      	bne.n	21ac8 <dc_rx_data_handler+0xc8>
	int ret = nrf_cloud_agps_process(buf, buf_len);
   21a6c:	e9d7 1002 	ldrd	r1, r0, [r7, #8]
   21a70:	f000 ff0a 	bl	22888 <nrf_cloud_agps_process>
	if (ret) {
   21a74:	4604      	mov	r4, r0
   21a76:	b1e8      	cbz	r0, 21ab4 <dc_rx_data_handler+0xb4>
		struct nrf_cloud_evt evt = {
   21a78:	2218      	movs	r2, #24
   21a7a:	2100      	movs	r1, #0
   21a7c:	18b8      	adds	r0, r7, r2
   21a7e:	f013 fad5 	bl	3502c <memset>
   21a82:	23ff      	movs	r3, #255	; 0xff
   21a84:	763b      	strb	r3, [r7, #24]
   21a86:	2308      	movs	r3, #8
		LOG_ERR("Error processing A-GPS data: %d", ret);
   21a88:	466d      	mov	r5, sp
   21a8a:	b088      	sub	sp, #32
		struct nrf_cloud_evt evt = {
   21a8c:	61fb      	str	r3, [r7, #28]
		LOG_ERR("Error processing A-GPS data: %d", ret);
   21a8e:	466a      	mov	r2, sp
   21a90:	4b22      	ldr	r3, [pc, #136]	; (21b1c <dc_rx_data_handler+0x11c>)
   21a92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21a96:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21a9a:	2303      	movs	r3, #3
   21a9c:	4820      	ldr	r0, [pc, #128]	; (21b20 <dc_rx_data_handler+0x120>)
   21a9e:	f842 3f10 	str.w	r3, [r2, #16]!
   21aa2:	f011 fd3f 	bl	33524 <z_log_msg_static_create.constprop.0>
   21aa6:	46ad      	mov	sp, r5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21aa8:	f7ff fe3a 	bl	21720 <nfsm_get_current_state>
   21aac:	f107 0118 	add.w	r1, r7, #24
		cloud_evt.type = NRF_CLOUD_EVT_RX_DATA_GENERAL;
		discon_req = nrf_cloud_disconnection_request_decode(cloud_evt.data.ptr);
		break;
	}

	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   21ab0:	f7ff fe3c 	bl	2172c <nfsm_set_current_state_and_notify>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
		}
	}

	return 0;
}
   21ab4:	2000      	movs	r0, #0
   21ab6:	3730      	adds	r7, #48	; 0x30
   21ab8:	46bd      	mov	sp, r7
   21aba:	bdb0      	pop	{r4, r5, r7, pc}
		cloud_evt.type = NRF_CLOUD_EVT_RX_DATA_LOCATION;
   21abc:	2307      	movs	r3, #7
   21abe:	703b      	strb	r3, [r7, #0]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   21ac0:	f7ff fe2e 	bl	21720 <nfsm_get_current_state>
   21ac4:	4639      	mov	r1, r7
   21ac6:	e7f3      	b.n	21ab0 <dc_rx_data_handler+0xb0>
		cloud_evt.type = NRF_CLOUD_EVT_RX_DATA_GENERAL;
   21ac8:	2306      	movs	r3, #6
		discon_req = nrf_cloud_disconnection_request_decode(cloud_evt.data.ptr);
   21aca:	68f8      	ldr	r0, [r7, #12]
		cloud_evt.type = NRF_CLOUD_EVT_RX_DATA_GENERAL;
   21acc:	703b      	strb	r3, [r7, #0]
		discon_req = nrf_cloud_disconnection_request_decode(cloud_evt.data.ptr);
   21ace:	f7ff fd21 	bl	21514 <nrf_cloud_disconnection_request_decode>
   21ad2:	4604      	mov	r4, r0
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   21ad4:	f7ff fe24 	bl	21720 <nfsm_get_current_state>
   21ad8:	4639      	mov	r1, r7
   21ada:	f7ff fe27 	bl	2172c <nfsm_set_current_state_and_notify>
	if (discon_req) {
   21ade:	2c00      	cmp	r4, #0
   21ae0:	d0e8      	beq.n	21ab4 <dc_rx_data_handler+0xb4>
		int err = nrf_cloud_disconnect();
   21ae2:	f7ff ff1f 	bl	21924 <nrf_cloud_disconnect>
		if (err < 0) {
   21ae6:	2800      	cmp	r0, #0
   21ae8:	dae4      	bge.n	21ab4 <dc_rx_data_handler+0xb4>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   21aea:	466c      	mov	r4, sp
   21aec:	b088      	sub	sp, #32
   21aee:	466a      	mov	r2, sp
   21af0:	4b0c      	ldr	r3, [pc, #48]	; (21b24 <dc_rx_data_handler+0x124>)
   21af2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21af6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21afa:	2303      	movs	r3, #3
   21afc:	4808      	ldr	r0, [pc, #32]	; (21b20 <dc_rx_data_handler+0x120>)
   21afe:	f842 3f10 	str.w	r3, [r2, #16]!
   21b02:	f011 fd0f 	bl	33524 <z_log_msg_static_create.constprop.0>
   21b06:	46a5      	mov	sp, r4
   21b08:	e7d4      	b.n	21ab4 <dc_rx_data_handler+0xb4>
   21b0a:	bf00      	nop
   21b0c:	0003e8b8 	.word	0x0003e8b8
   21b10:	0003e87b 	.word	0x0003e87b
   21b14:	000381c3 	.word	0x000381c3
   21b18:	0003e8cf 	.word	0x0003e8cf
   21b1c:	0003e8f0 	.word	0x0003e8f0
   21b20:	000365a0 	.word	0x000365a0
   21b24:	0003e910 	.word	0x0003e910

00021b28 <cc_rx_data_handler>:
{
   21b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21b2c:	b098      	sub	sp, #96	; 0x60
	bool config_found = false;
   21b2e:	2400      	movs	r4, #0
{
   21b30:	af02      	add	r7, sp, #8
   21b32:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   21b34:	f8d0 8004 	ldr.w	r8, [r0, #4]
	bool config_found = false;
   21b38:	70fc      	strb	r4, [r7, #3]
	const enum nfsm_state current_state = nfsm_get_current_state();
   21b3a:	f7ff fdf1 	bl	21720 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   21b3e:	2214      	movs	r2, #20
	const enum nfsm_state current_state = nfsm_get_current_state();
   21b40:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   21b42:	4621      	mov	r1, r4
   21b44:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21b48:	f013 fa70 	bl	3502c <memset>
   21b4c:	4bb8      	ldr	r3, [pc, #736]	; (21e30 <cc_rx_data_handler+0x308>)
	if (evt->param.cc == NULL) {
   21b4e:	6870      	ldr	r0, [r6, #4]
	struct nct_cc_data msg = {
   21b50:	653b      	str	r3, [r7, #80]	; 0x50
	if (evt->param.cc == NULL) {
   21b52:	b1e8      	cbz	r0, 21b90 <cc_rx_data_handler+0x68>
	err = nrf_cloud_shadow_config_response_encode(&evt->param.cc->data, &msg.data,
   21b54:	1cfa      	adds	r2, r7, #3
   21b56:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21b5a:	f7fe fd2b 	bl	205b4 <nrf_cloud_shadow_config_response_encode>
	if ((err) && (err != -ESRCH)) {
   21b5e:	2800      	cmp	r0, #0
   21b60:	d03b      	beq.n	21bda <cc_rx_data_handler+0xb2>
   21b62:	1cc3      	adds	r3, r0, #3
   21b64:	d039      	beq.n	21bda <cc_rx_data_handler+0xb2>
		LOG_ERR("nrf_cloud_shadow_config_response_encode failed %d", err);
   21b66:	466c      	mov	r4, sp
   21b68:	b088      	sub	sp, #32
   21b6a:	aa02      	add	r2, sp, #8
   21b6c:	4bb1      	ldr	r3, [pc, #708]	; (21e34 <cc_rx_data_handler+0x30c>)
   21b6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21b72:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21b76:	2303      	movs	r3, #3
   21b78:	48af      	ldr	r0, [pc, #700]	; (21e38 <cc_rx_data_handler+0x310>)
   21b7a:	f842 3f10 	str.w	r3, [r2, #16]!
   21b7e:	f011 fcd1 	bl	33524 <z_log_msg_static_create.constprop.0>
   21b82:	46a5      	mov	sp, r4
	enum nrf_cloud_ctrl_status status = NRF_CLOUD_CTRL_NOT_PRESENT;
   21b84:	2300      	movs	r3, #0
	if (evt->param.cc == NULL) {
   21b86:	6872      	ldr	r2, [r6, #4]
	enum nrf_cloud_ctrl_status status = NRF_CLOUD_CTRL_NOT_PRESENT;
   21b88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (evt->param.cc == NULL) {
   21b8c:	2a00      	cmp	r2, #0
   21b8e:	d162      	bne.n	21c56 <cc_rx_data_handler+0x12e>
	if (config_found || control_found) {
   21b90:	78fb      	ldrb	r3, [r7, #3]
   21b92:	2b00      	cmp	r3, #0
   21b94:	d141      	bne.n	21c1a <cc_rx_data_handler+0xf2>
	bool control_found = false;
   21b96:	f04f 0900 	mov.w	r9, #0
	err = nrf_cloud_requested_state_decode(payload, &new_state);
   21b9a:	4640      	mov	r0, r8
   21b9c:	1cb9      	adds	r1, r7, #2
   21b9e:	f7fe fc2d 	bl	203fc <nrf_cloud_requested_state_decode>
	if (err) {
   21ba2:	4604      	mov	r4, r0
   21ba4:	2800      	cmp	r0, #0
   21ba6:	f000 80d7 	beq.w	21d58 <cc_rx_data_handler+0x230>
		if (!config_found && !control_found) {
   21baa:	78fb      	ldrb	r3, [r7, #3]
   21bac:	2b00      	cmp	r3, #0
   21bae:	f040 818d 	bne.w	21ecc <cc_rx_data_handler+0x3a4>
   21bb2:	f1b9 0f00 	cmp.w	r9, #0
   21bb6:	f040 818b 	bne.w	21ed0 <cc_rx_data_handler+0x3a8>
			LOG_ERR("nrf_cloud_requested_state_decode Failed %d",
   21bba:	466d      	mov	r5, sp
   21bbc:	b088      	sub	sp, #32
   21bbe:	aa02      	add	r2, sp, #8
   21bc0:	4b9e      	ldr	r3, [pc, #632]	; (21e3c <cc_rx_data_handler+0x314>)
		LOG_ERR("nrf_cloud_data_endpoint_decode failed %d", err);
   21bc2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21bc6:	2303      	movs	r3, #3
   21bc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21bcc:	489a      	ldr	r0, [pc, #616]	; (21e38 <cc_rx_data_handler+0x310>)
   21bce:	f842 3f10 	str.w	r3, [r2, #16]!
   21bd2:	f011 fca7 	bl	33524 <z_log_msg_static_create.constprop.0>
   21bd6:	46ad      	mov	sp, r5
		return err;
   21bd8:	e101      	b.n	21dde <cc_rx_data_handler+0x2b6>
	if (*config_found == false) {
   21bda:	78fb      	ldrb	r3, [r7, #3]
   21bdc:	2b00      	cmp	r3, #0
   21bde:	d0d1      	beq.n	21b84 <cc_rx_data_handler+0x5c>
	if (msg.data.ptr) {
   21be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21be2:	2b00      	cmp	r3, #0
   21be4:	d0ce      	beq.n	21b84 <cc_rx_data_handler+0x5c>
		err = nct_cc_send(&msg);
   21be6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21bea:	f000 fc8b 	bl	22504 <nct_cc_send>
   21bee:	4604      	mov	r4, r0
		nrf_cloud_free((void *)msg.data.ptr);
   21bf0:	6c78      	ldr	r0, [r7, #68]	; 0x44
   21bf2:	f7ff fcdd 	bl	215b0 <nrf_cloud_free>
		if (err) {
   21bf6:	2c00      	cmp	r4, #0
   21bf8:	d0c4      	beq.n	21b84 <cc_rx_data_handler+0x5c>
			LOG_ERR("nct_cc_send failed %d", err);
   21bfa:	46e9      	mov	r9, sp
   21bfc:	b088      	sub	sp, #32
   21bfe:	aa02      	add	r2, sp, #8
   21c00:	4b8f      	ldr	r3, [pc, #572]	; (21e40 <cc_rx_data_handler+0x318>)
   21c02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21c06:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21c0a:	2303      	movs	r3, #3
   21c0c:	488a      	ldr	r0, [pc, #552]	; (21e38 <cc_rx_data_handler+0x310>)
   21c0e:	f842 3f10 	str.w	r3, [r2, #16]!
   21c12:	f011 fc87 	bl	33524 <z_log_msg_static_create.constprop.0>
   21c16:	46cd      	mov	sp, r9
	if ((evt == NULL) || (control_found == NULL)) {
   21c18:	e7b4      	b.n	21b84 <cc_rx_data_handler+0x5c>
	bool control_found = false;
   21c1a:	f04f 0900 	mov.w	r9, #0
		struct nrf_cloud_evt cloud_evt = {
   21c1e:	2218      	movs	r2, #24
   21c20:	2100      	movs	r1, #0
   21c22:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21c26:	f013 fa01 	bl	3502c <memset>
   21c2a:	2308      	movs	r3, #8
   21c2c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			.data = nct_evt->param.cc->data,
   21c30:	6873      	ldr	r3, [r6, #4]
		struct nrf_cloud_evt cloud_evt = {
   21c32:	f107 0248 	add.w	r2, r7, #72	; 0x48
   21c36:	e893 0003 	ldmia.w	r3, {r0, r1}
   21c3a:	e882 0003 	stmia.w	r2, {r0, r1}
   21c3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   21c42:	f107 0358 	add.w	r3, r7, #88	; 0x58
   21c46:	e903 0003 	stmdb	r3, {r0, r1}
		nfsm_set_current_state_and_notify(current_state, &cloud_evt);
   21c4a:	4628      	mov	r0, r5
   21c4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21c50:	f7ff fd6c 	bl	2172c <nfsm_set_current_state_and_notify>
   21c54:	e7a1      	b.n	21b9a <cc_rx_data_handler+0x72>
	ctrl_data.alerts_enabled = false;
   21c56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	ctrl_data.log_level = nrf_cloud_log_control_get();
   21c5a:	f7ff fc8d 	bl	21578 <nrf_cloud_log_control_get>
	err = nrf_cloud_shadow_control_decode(&evt->param.cc->data, &status, &ctrl_data);
   21c5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
	ctrl_data.log_level = nrf_cloud_log_control_get();
   21c62:	6338      	str	r0, [r7, #48]	; 0x30
	err = nrf_cloud_shadow_control_decode(&evt->param.cc->data, &status, &ctrl_data);
   21c64:	f107 0124 	add.w	r1, r7, #36	; 0x24
   21c68:	6870      	ldr	r0, [r6, #4]
   21c6a:	f7fe fd3f 	bl	206ec <nrf_cloud_shadow_control_decode>
	if (err) {
   21c6e:	2800      	cmp	r0, #0
   21c70:	d18e      	bne.n	21b90 <cc_rx_data_handler+0x68>
	*control_found = (status != NRF_CLOUD_CTRL_NOT_PRESENT);
   21c72:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
	if (*control_found) {
   21c76:	b374      	cbz	r4, 21cd6 <cc_rx_data_handler+0x1ae>
		nrf_cloud_log_control_set(ctrl_data.log_level);
   21c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
   21c7a:	f011 fbc5 	bl	33408 <nrf_cloud_log_control_set>
	if (status == NRF_CLOUD_CTRL_REPLY) {
   21c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   21c82:	2b02      	cmp	r3, #2
   21c84:	d165      	bne.n	21d52 <cc_rx_data_handler+0x22a>
		struct nct_cc_data msg = {
   21c86:	2100      	movs	r1, #0
   21c88:	2214      	movs	r2, #20
   21c8a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21c8e:	f013 f9cd 	bl	3502c <memset>
   21c92:	4b67      	ldr	r3, [pc, #412]	; (21e30 <cc_rx_data_handler+0x308>)
		err = nrf_cloud_shadow_control_response_encode(&ctrl_data, &msg.data);
   21c94:	f107 0140 	add.w	r1, r7, #64	; 0x40
		struct nct_cc_data msg = {
   21c98:	653b      	str	r3, [r7, #80]	; 0x50
		err = nrf_cloud_shadow_control_response_encode(&ctrl_data, &msg.data);
   21c9a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   21c9e:	f7fe fe11 	bl	208c4 <nrf_cloud_shadow_control_response_encode>
		if (err) {
   21ca2:	2800      	cmp	r0, #0
   21ca4:	d03d      	beq.n	21d22 <cc_rx_data_handler+0x1fa>
			LOG_ERR("nrf_cloud_shadow_control_response_encode failed %d", err);
   21ca6:	46e9      	mov	r9, sp
   21ca8:	b088      	sub	sp, #32
   21caa:	aa02      	add	r2, sp, #8
   21cac:	4b65      	ldr	r3, [pc, #404]	; (21e44 <cc_rx_data_handler+0x31c>)
   21cae:	e9c2 3005 	strd	r3, r0, [r2, #20]
				LOG_ERR("nct_cc_send failed %d", err);
   21cb2:	2303      	movs	r3, #3
   21cb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21cb8:	485f      	ldr	r0, [pc, #380]	; (21e38 <cc_rx_data_handler+0x310>)
   21cba:	f842 3f10 	str.w	r3, [r2, #16]!
   21cbe:	f011 fc31 	bl	33524 <z_log_msg_static_create.constprop.0>
   21cc2:	46cd      	mov	sp, r9
	if (config_found || control_found) {
   21cc4:	78fb      	ldrb	r3, [r7, #3]
   21cc6:	2b00      	cmp	r3, #0
   21cc8:	d040      	beq.n	21d4c <cc_rx_data_handler+0x224>
	*control_found = (status != NRF_CLOUD_CTRL_NOT_PRESENT);
   21cca:	f1b4 0900 	subs.w	r9, r4, #0
   21cce:	bf18      	it	ne
   21cd0:	f04f 0901 	movne.w	r9, #1
   21cd4:	e7a3      	b.n	21c1e <cc_rx_data_handler+0xf6>
		ctrl_data.alerts_enabled = false;
   21cd6:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
		ctrl_data.log_level = nrf_cloud_log_control_get();
   21cda:	f7ff fc4d 	bl	21578 <nrf_cloud_log_control_get>
   21cde:	6338      	str	r0, [r7, #48]	; 0x30
		nrf_cloud_log_enable(ctrl_data.log_level != LOG_LEVEL_NONE);
   21ce0:	3800      	subs	r0, #0
   21ce2:	bf18      	it	ne
   21ce4:	2001      	movne	r0, #1
   21ce6:	f7ff fc55 	bl	21594 <nrf_cloud_log_enable>
		status = NRF_CLOUD_CTRL_REPLY;
   21cea:	2302      	movs	r3, #2
		LOG_INF("Updating shadow with alertEn:%u and logLvl:%u",
   21cec:	46e9      	mov	r9, sp
   21cee:	b088      	sub	sp, #32
		status = NRF_CLOUD_CTRL_REPLY;
   21cf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		LOG_INF("Updating shadow with alertEn:%u and logLvl:%u",
   21cf4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
   21cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21cfa:	aa02      	add	r2, sp, #8
   21cfc:	61d3      	str	r3, [r2, #28]
   21cfe:	2304      	movs	r3, #4
   21d00:	4851      	ldr	r0, [pc, #324]	; (21e48 <cc_rx_data_handler+0x320>)
   21d02:	e9c2 0105 	strd	r0, r1, [r2, #20]
   21d06:	f842 3f10 	str.w	r3, [r2, #16]!
   21d0a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   21d0e:	484a      	ldr	r0, [pc, #296]	; (21e38 <cc_rx_data_handler+0x310>)
   21d10:	f011 fc08 	bl	33524 <z_log_msg_static_create.constprop.0>
	if (status == NRF_CLOUD_CTRL_REPLY) {
   21d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   21d18:	46cd      	mov	sp, r9
   21d1a:	2b02      	cmp	r3, #2
   21d1c:	f47f af38 	bne.w	21b90 <cc_rx_data_handler+0x68>
   21d20:	e7b1      	b.n	21c86 <cc_rx_data_handler+0x15e>
		if (msg.data.ptr) {
   21d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21d24:	2b00      	cmp	r3, #0
   21d26:	d0cd      	beq.n	21cc4 <cc_rx_data_handler+0x19c>
			err = nct_cc_send(&msg);
   21d28:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21d2c:	f000 fbea 	bl	22504 <nct_cc_send>
   21d30:	4682      	mov	sl, r0
			nrf_cloud_free((void *)msg.data.ptr);
   21d32:	6c78      	ldr	r0, [r7, #68]	; 0x44
   21d34:	f7ff fc3c 	bl	215b0 <nrf_cloud_free>
			if (err) {
   21d38:	f1ba 0f00 	cmp.w	sl, #0
   21d3c:	d0c2      	beq.n	21cc4 <cc_rx_data_handler+0x19c>
				LOG_ERR("nct_cc_send failed %d", err);
   21d3e:	46e9      	mov	r9, sp
   21d40:	b088      	sub	sp, #32
   21d42:	aa02      	add	r2, sp, #8
   21d44:	4b3e      	ldr	r3, [pc, #248]	; (21e40 <cc_rx_data_handler+0x318>)
   21d46:	e9c2 3a05 	strd	r3, sl, [r2, #20]
   21d4a:	e7b2      	b.n	21cb2 <cc_rx_data_handler+0x18a>
	if (config_found || control_found) {
   21d4c:	2c00      	cmp	r4, #0
   21d4e:	f43f af22 	beq.w	21b96 <cc_rx_data_handler+0x6e>
{
   21d52:	f04f 0901 	mov.w	r9, #1
   21d56:	e762      	b.n	21c1e <cc_rx_data_handler+0xf6>
	switch (current_state) {
   21d58:	2d07      	cmp	r5, #7
   21d5a:	d83c      	bhi.n	21dd6 <cc_rx_data_handler+0x2ae>
   21d5c:	2d03      	cmp	r5, #3
   21d5e:	d93e      	bls.n	21dde <cc_rx_data_handler+0x2b6>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   21d60:	78bb      	ldrb	r3, [r7, #2]
   21d62:	2b07      	cmp	r3, #7
   21d64:	f040 80a6 	bne.w	21eb4 <cc_rx_data_handler+0x38c>
			if (!config_found && !control_found) {
   21d68:	78fb      	ldrb	r3, [r7, #3]
   21d6a:	b9f3      	cbnz	r3, 21daa <cc_rx_data_handler+0x282>
   21d6c:	f1b9 0f00 	cmp.w	r9, #0
   21d70:	d11b      	bne.n	21daa <cc_rx_data_handler+0x282>
				struct nrf_cloud_evt cloud_evt = {
   21d72:	2218      	movs	r2, #24
   21d74:	4649      	mov	r1, r9
   21d76:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21d7a:	6874      	ldr	r4, [r6, #4]
   21d7c:	f013 f956 	bl	3502c <memset>
   21d80:	2308      	movs	r3, #8
   21d82:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   21d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
   21d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
   21d8e:	e883 0003 	stmia.w	r3, {r0, r1}
   21d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
   21d96:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   21d9a:	e903 0003 	stmdb	r3, {r0, r1}
				nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   21d9e:	f7ff fcbf 	bl	21720 <nfsm_get_current_state>
   21da2:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21da6:	f7ff fcc1 	bl	2172c <nfsm_set_current_state_and_notify>
	err = nrf_cloud_data_endpoint_decode(payload, &tx, &rx, &bulk, &bin, &endpoint);
   21daa:	f107 0524 	add.w	r5, r7, #36	; 0x24
   21dae:	f107 081c 	add.w	r8, r7, #28
   21db2:	9501      	str	r5, [sp, #4]
   21db4:	f8cd 8000 	str.w	r8, [sp]
   21db8:	6870      	ldr	r0, [r6, #4]
   21dba:	f107 0314 	add.w	r3, r7, #20
   21dbe:	1d3a      	adds	r2, r7, #4
   21dc0:	f107 010c 	add.w	r1, r7, #12
   21dc4:	f7fe fde8 	bl	20998 <nrf_cloud_data_endpoint_decode>
	if (err) {
   21dc8:	4604      	mov	r4, r0
   21dca:	b168      	cbz	r0, 21de8 <cc_rx_data_handler+0x2c0>
		LOG_ERR("nrf_cloud_data_endpoint_decode failed %d", err);
   21dcc:	466d      	mov	r5, sp
   21dce:	b088      	sub	sp, #32
   21dd0:	aa02      	add	r2, sp, #8
   21dd2:	4b1e      	ldr	r3, [pc, #120]	; (21e4c <cc_rx_data_handler+0x324>)
   21dd4:	e6f5      	b.n	21bc2 <cc_rx_data_handler+0x9a>
	switch (current_state) {
   21dd6:	3d08      	subs	r5, #8
   21dd8:	b2ed      	uxtb	r5, r5
   21dda:	2d01      	cmp	r5, #1
   21ddc:	d970      	bls.n	21ec0 <cc_rx_data_handler+0x398>
}
   21dde:	4620      	mov	r0, r4
   21de0:	3758      	adds	r7, #88	; 0x58
   21de2:	46bd      	mov	sp, r7
   21de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	c2d_topic_modified = nrf_cloud_set_wildcard_c2d_topic((char *)rx.ptr, rx.len);
   21de8:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
   21dec:	f7fe ff22 	bl	20c34 <nrf_cloud_set_wildcard_c2d_topic>
   21df0:	4e17      	ldr	r6, [pc, #92]	; (21e50 <cc_rx_data_handler+0x328>)
	nct_dc_endpoint_set(&tx, &rx, &bulk, &bin, &endpoint);
   21df2:	4643      	mov	r3, r8
	c2d_topic_modified = nrf_cloud_set_wildcard_c2d_topic((char *)rx.ptr, rx.len);
   21df4:	7030      	strb	r0, [r6, #0]
	nct_dc_endpoint_set(&tx, &rx, &bulk, &bin, &endpoint);
   21df6:	f107 0214 	add.w	r2, r7, #20
   21dfa:	1d39      	adds	r1, r7, #4
   21dfc:	f107 000c 	add.w	r0, r7, #12
   21e00:	9500      	str	r5, [sp, #0]
   21e02:	f000 fbe9 	bl	225d8 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   21e06:	4621      	mov	r1, r4
   21e08:	2214      	movs	r2, #20
   21e0a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   21e0e:	f013 f90d 	bl	3502c <memset>
   21e12:	4b10      	ldr	r3, [pc, #64]	; (21e54 <cc_rx_data_handler+0x32c>)
	err = nrf_cloud_state_encode(STATE_UA_PIN_COMPLETE, c2d_topic_modified, &msg.data);
   21e14:	2007      	movs	r0, #7
   21e16:	7831      	ldrb	r1, [r6, #0]
	struct nct_cc_data msg = {
   21e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	err = nrf_cloud_state_encode(STATE_UA_PIN_COMPLETE, c2d_topic_modified, &msg.data);
   21e1a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   21e1e:	f7ff fa19 	bl	21254 <nrf_cloud_state_encode>
	if (err) {
   21e22:	4604      	mov	r4, r0
   21e24:	b1d0      	cbz	r0, 21e5c <cc_rx_data_handler+0x334>
		LOG_ERR("nrf_cloud_state_encode failed %d", err);
   21e26:	466d      	mov	r5, sp
   21e28:	b088      	sub	sp, #32
   21e2a:	aa02      	add	r2, sp, #8
   21e2c:	4b0a      	ldr	r3, [pc, #40]	; (21e58 <cc_rx_data_handler+0x330>)
   21e2e:	e6c8      	b.n	21bc2 <cc_rx_data_handler+0x9a>
   21e30:	0001012c 	.word	0x0001012c
   21e34:	0003e945 	.word	0x0003e945
   21e38:	000365a0 	.word	0x000365a0
   21e3c:	0003e9d8 	.word	0x0003e9d8
   21e40:	0003e865 	.word	0x0003e865
   21e44:	0003e9a5 	.word	0x0003e9a5
   21e48:	0003e977 	.word	0x0003e977
   21e4c:	0003ea03 	.word	0x0003ea03
   21e50:	200127ff 	.word	0x200127ff
   21e54:	0001012d 	.word	0x0001012d
   21e58:	0003e844 	.word	0x0003e844
	c2d_topic_modified = false;
   21e5c:	7030      	strb	r0, [r6, #0]
	err = nct_cc_send(&msg);
   21e5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   21e62:	f000 fb4f 	bl	22504 <nct_cc_send>
	if (err) {
   21e66:	4604      	mov	r4, r0
   21e68:	b190      	cbz	r0, 21e90 <cc_rx_data_handler+0x368>
		LOG_ERR("nct_cc_send failed %d", err);
   21e6a:	466d      	mov	r5, sp
   21e6c:	b088      	sub	sp, #32
   21e6e:	aa02      	add	r2, sp, #8
   21e70:	4b18      	ldr	r3, [pc, #96]	; (21ed4 <cc_rx_data_handler+0x3ac>)
   21e72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21e76:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21e7a:	2303      	movs	r3, #3
   21e7c:	4816      	ldr	r0, [pc, #88]	; (21ed8 <cc_rx_data_handler+0x3b0>)
   21e7e:	f842 3f10 	str.w	r3, [r2, #16]!
   21e82:	f011 fb4f 	bl	33524 <z_log_msg_static_create.constprop.0>
   21e86:	46ad      	mov	sp, r5
		nrf_cloud_free((void *)msg.data.ptr);
   21e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
   21e8a:	f7ff fb91 	bl	215b0 <nrf_cloud_free>
		return err;
   21e8e:	e7a6      	b.n	21dde <cc_rx_data_handler+0x2b6>
	nrf_cloud_free((void *)msg.data.ptr);
   21e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
   21e92:	f7ff fb8d 	bl	215b0 <nrf_cloud_free>
	struct nrf_cloud_evt evt = {
   21e96:	4621      	mov	r1, r4
   21e98:	2218      	movs	r2, #24
   21e9a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   21e9e:	f013 f8c5 	bl	3502c <memset>
   21ea2:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   21ea4:	2007      	movs	r0, #7
	struct nrf_cloud_evt evt = {
   21ea6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   21eaa:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21eae:	f7ff fc3d 	bl	2172c <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   21eb2:	e794      	b.n	21dde <cc_rx_data_handler+0x2b6>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   21eb4:	2b06      	cmp	r3, #6
   21eb6:	d192      	bne.n	21dde <cc_rx_data_handler+0x2b6>
			return state_ua_pin_wait();
   21eb8:	f7ff fd4e 	bl	21958 <state_ua_pin_wait>
   21ebc:	4604      	mov	r4, r0
   21ebe:	e78e      	b.n	21dde <cc_rx_data_handler+0x2b6>
		if (new_state == STATE_UA_PIN_WAIT) {
   21ec0:	78bb      	ldrb	r3, [r7, #2]
   21ec2:	2b06      	cmp	r3, #6
   21ec4:	d18b      	bne.n	21dde <cc_rx_data_handler+0x2b6>
			(void)nct_dc_disconnect();
   21ec6:	f000 fc03 	bl	226d0 <nct_dc_disconnect>
   21eca:	e7f5      	b.n	21eb8 <cc_rx_data_handler+0x390>
		return 0;
   21ecc:	2400      	movs	r4, #0
   21ece:	e786      	b.n	21dde <cc_rx_data_handler+0x2b6>
   21ed0:	461c      	mov	r4, r3
   21ed2:	e784      	b.n	21dde <cc_rx_data_handler+0x2b6>
   21ed4:	0003e865 	.word	0x0003e865
   21ed8:	000365a0 	.word	0x000365a0

00021edc <nfsm_handle_incoming_event>:
{
   21edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ede:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   21ee0:	4606      	mov	r6, r0
{
   21ee2:	af00      	add	r7, sp, #0
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   21ee4:	b120      	cbz	r0, 21ef0 <nfsm_handle_incoming_event+0x14>
   21ee6:	7a03      	ldrb	r3, [r0, #8]
   21ee8:	2b0a      	cmp	r3, #10
   21eea:	d801      	bhi.n	21ef0 <nfsm_handle_incoming_event+0x14>
   21eec:	2909      	cmp	r1, #9
   21eee:	d909      	bls.n	21f04 <nfsm_handle_incoming_event+0x28>
		__ASSERT_NO_MSG(false);
   21ef0:	4913      	ldr	r1, [pc, #76]	; (21f40 <nfsm_handle_incoming_event+0x64>)
   21ef2:	4814      	ldr	r0, [pc, #80]	; (21f44 <nfsm_handle_incoming_event+0x68>)
   21ef4:	238d      	movs	r3, #141	; 0x8d
   21ef6:	4a14      	ldr	r2, [pc, #80]	; (21f48 <nfsm_handle_incoming_event+0x6c>)
   21ef8:	f00c fd2c 	bl	2e954 <assert_print>
   21efc:	218d      	movs	r1, #141	; 0x8d
   21efe:	4812      	ldr	r0, [pc, #72]	; (21f48 <nfsm_handle_incoming_event+0x6c>)
   21f00:	f00c fd21 	bl	2e946 <assert_post_action>
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   21f04:	4a11      	ldr	r2, [pc, #68]	; (21f4c <nfsm_handle_incoming_event+0x70>)
   21f06:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   21f0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   21f0e:	b19c      	cbz	r4, 21f38 <nfsm_handle_incoming_event+0x5c>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   21f10:	47a0      	blx	r4
		if (err) {
   21f12:	4604      	mov	r4, r0
   21f14:	b180      	cbz	r0, 21f38 <nfsm_handle_incoming_event+0x5c>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   21f16:	7a33      	ldrb	r3, [r6, #8]
   21f18:	466e      	mov	r6, sp
   21f1a:	b088      	sub	sp, #32
   21f1c:	466a      	mov	r2, sp
   21f1e:	61d3      	str	r3, [r2, #28]
   21f20:	2304      	movs	r3, #4
   21f22:	490b      	ldr	r1, [pc, #44]	; (21f50 <nfsm_handle_incoming_event+0x74>)
   21f24:	480b      	ldr	r0, [pc, #44]	; (21f54 <nfsm_handle_incoming_event+0x78>)
   21f26:	e9c2 1505 	strd	r1, r5, [r2, #20]
   21f2a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21f2e:	f842 3f10 	str.w	r3, [r2, #16]!
   21f32:	f011 faf7 	bl	33524 <z_log_msg_static_create.constprop.0>
   21f36:	46b5      	mov	sp, r6
}
   21f38:	4620      	mov	r0, r4
   21f3a:	46bd      	mov	sp, r7
   21f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21f3e:	bf00      	nop
   21f40:	0003c13d 	.word	0x0003c13d
   21f44:	000381c3 	.word	0x000381c3
   21f48:	0003e87b 	.word	0x0003e87b
   21f4c:	000372cc 	.word	0x000372cc
   21f50:	0003ea2c 	.word	0x0003ea2c
   21f54:	000365a0 	.word	0x000365a0

00021f58 <cc_tx_ack_handler>:
{
   21f58:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   21f5a:	8883      	ldrh	r3, [r0, #4]
{
   21f5c:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   21f5e:	2bc8      	cmp	r3, #200	; 0xc8
{
   21f60:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   21f62:	d104      	bne.n	21f6e <cc_tx_ack_handler+0x16>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   21f64:	2100      	movs	r1, #0
   21f66:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21f68:	f7ff fbe0 	bl	2172c <nfsm_set_current_state_and_notify>
   21f6c:	e017      	b.n	21f9e <cc_tx_ack_handler+0x46>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   21f6e:	f240 122d 	movw	r2, #301	; 0x12d
   21f72:	4293      	cmp	r3, r2
   21f74:	d116      	bne.n	21fa4 <cc_tx_ack_handler+0x4c>
		if (!persistent_session) {
   21f76:	4b1b      	ldr	r3, [pc, #108]	; (21fe4 <cc_tx_ack_handler+0x8c>)
   21f78:	781b      	ldrb	r3, [r3, #0]
   21f7a:	b92b      	cbnz	r3, 21f88 <cc_tx_ack_handler+0x30>
			err = nct_dc_connect();
   21f7c:	f000 fb8e 	bl	2269c <nct_dc_connect>
			if (err) {
   21f80:	b970      	cbnz	r0, 21fa0 <cc_tx_ack_handler+0x48>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   21f82:	4601      	mov	r1, r0
   21f84:	2008      	movs	r0, #8
   21f86:	e7ef      	b.n	21f68 <cc_tx_ack_handler+0x10>
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   21f88:	2300      	movs	r3, #0
   21f8a:	9302      	str	r3, [sp, #8]
   21f8c:	e9cd 3300 	strd	r3, r3, [sp]
   21f90:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   21f92:	2108      	movs	r1, #8
   21f94:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   21f96:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   21f9a:	f7ff ff9f 	bl	21edc <nfsm_handle_incoming_event>
		return 0;
   21f9e:	2000      	movs	r0, #0
}
   21fa0:	b006      	add	sp, #24
   21fa2:	bd10      	pop	{r4, pc}
	} else if (nct_evt->type == NCT_EVT_PINGRESP) {
   21fa4:	7a02      	ldrb	r2, [r0, #8]
   21fa6:	2a05      	cmp	r2, #5
   21fa8:	d10b      	bne.n	21fc2 <cc_tx_ack_handler+0x6a>
		struct nrf_cloud_evt evt = {
   21faa:	2218      	movs	r2, #24
   21fac:	2100      	movs	r1, #0
   21fae:	4668      	mov	r0, sp
   21fb0:	f013 f83c 	bl	3502c <memset>
   21fb4:	2309      	movs	r3, #9
   21fb6:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21fba:	f7ff fbb1 	bl	21720 <nfsm_get_current_state>
   21fbe:	4669      	mov	r1, sp
   21fc0:	e7d2      	b.n	21f68 <cc_tx_ack_handler+0x10>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   21fc2:	f242 720f 	movw	r2, #9999	; 0x270f
   21fc6:	4293      	cmp	r3, r2
   21fc8:	d9e9      	bls.n	21f9e <cc_tx_ack_handler+0x46>
		struct nrf_cloud_evt evt = {
   21fca:	2218      	movs	r2, #24
   21fcc:	2100      	movs	r1, #0
   21fce:	4668      	mov	r0, sp
   21fd0:	f013 f82c 	bl	3502c <memset>
   21fd4:	230a      	movs	r3, #10
   21fd6:	f88d 3000 	strb.w	r3, [sp]
   21fda:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   21fdc:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   21fde:	9302      	str	r3, [sp, #8]
   21fe0:	9403      	str	r4, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   21fe2:	e7ea      	b.n	21fba <cc_tx_ack_handler+0x62>
   21fe4:	20012800 	.word	0x20012800

00021fe8 <connection_handler>:
{
   21fe8:	b570      	push	{r4, r5, r6, lr}
   21fea:	4605      	mov	r5, r0
	struct nrf_cloud_evt evt = {
   21fec:	2601      	movs	r6, #1
{
   21fee:	b08a      	sub	sp, #40	; 0x28
	struct nrf_cloud_evt evt = {
   21ff0:	2218      	movs	r2, #24
   21ff2:	2100      	movs	r1, #0
   21ff4:	a804      	add	r0, sp, #16
   21ff6:	f013 f819 	bl	3502c <memset>
		.status = nct_evt->status
   21ffa:	682c      	ldr	r4, [r5, #0]
	struct nrf_cloud_evt evt = {
   21ffc:	f88d 6010 	strb.w	r6, [sp, #16]
   22000:	9405      	str	r4, [sp, #20]
	if (nct_evt->status != NRF_CLOUD_ERR_STATUS_NONE) {
   22002:	b154      	cbz	r4, 2201a <connection_handler+0x32>
		evt.type = NRF_CLOUD_EVT_ERROR;
   22004:	23ff      	movs	r3, #255	; 0xff
   22006:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2200a:	f7ff fb89 	bl	21720 <nfsm_get_current_state>
   2200e:	a904      	add	r1, sp, #16
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   22010:	f7ff fb8c 	bl	2172c <nfsm_set_current_state_and_notify>
		return 0;
   22014:	2000      	movs	r0, #0
}
   22016:	b00a      	add	sp, #40	; 0x28
   22018:	bd70      	pop	{r4, r5, r6, pc}
	evt.status = nct_evt->param.flag;
   2201a:	792b      	ldrb	r3, [r5, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2201c:	2002      	movs	r0, #2
   2201e:	a904      	add	r1, sp, #16
	evt.status = nct_evt->param.flag;
   22020:	9305      	str	r3, [sp, #20]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   22022:	f7ff fb83 	bl	2172c <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   22026:	792b      	ldrb	r3, [r5, #4]
   22028:	2b00      	cmp	r3, #0
   2202a:	bf14      	ite	ne
   2202c:	2201      	movne	r2, #1
   2202e:	2200      	moveq	r2, #0
   22030:	4b09      	ldr	r3, [pc, #36]	; (22058 <connection_handler+0x70>)
   22032:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   22034:	d106      	bne.n	22044 <connection_handler+0x5c>
		err = nct_cc_connect();
   22036:	f000 fa53 	bl	224e0 <nct_cc_connect>
		if (err) {
   2203a:	2800      	cmp	r0, #0
   2203c:	d1eb      	bne.n	22016 <connection_handler+0x2e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2203e:	4601      	mov	r1, r0
   22040:	2003      	movs	r0, #3
   22042:	e7e5      	b.n	22010 <connection_handler+0x28>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   22044:	2103      	movs	r1, #3
   22046:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   22048:	9403      	str	r4, [sp, #12]
   2204a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2204e:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   22052:	f7ff ff43 	bl	21edc <nfsm_handle_incoming_event>
   22056:	e7dd      	b.n	22014 <connection_handler+0x2c>
   22058:	20012800 	.word	0x20012800

0002205c <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2205c:	2200      	movs	r2, #0
   2205e:	4b06      	ldr	r3, [pc, #24]	; (22078 <dc_endpoint_reset+0x1c>)
	nct.dc_rx_endp.size = 0;
   22060:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   22064:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   22068:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   2206c:	e9c3 2237 	strd	r2, r2, [r3, #220]	; 0xdc

	nct.dc_bin_endp.utf8 = NULL;
	nct.dc_bin_endp.size = 0;
   22070:	e9c3 2239 	strd	r2, r2, [r3, #228]	; 0xe4
}
   22074:	4770      	bx	lr
   22076:	bf00      	nop
   22078:	20010010 	.word	0x20010010

0002207c <get_next_message_id>:

/* Get the next unused message id. */
static uint16_t get_next_message_id(void)
{
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   2207c:	4b08      	ldr	r3, [pc, #32]	; (220a0 <get_next_message_id+0x24>)
   2207e:	f8b3 00ec 	ldrh.w	r0, [r3, #236]	; 0xec
   22082:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   22086:	d308      	bcc.n	2209a <get_next_message_id+0x1e>
   22088:	f242 720f 	movw	r2, #9999	; 0x270f
   2208c:	4290      	cmp	r0, r2
   2208e:	d004      	beq.n	2209a <get_next_message_id+0x1e>
	    nct.message_id == NCT_MSG_ID_INCREMENT_END) {
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
	} else {
		++nct.message_id;
   22090:	3001      	adds	r0, #1
   22092:	b280      	uxth	r0, r0
   22094:	f8a3 00ec 	strh.w	r0, [r3, #236]	; 0xec
	}

	return nct.message_id;
}
   22098:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   2209a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2209e:	e7f9      	b.n	22094 <get_next_message_id+0x18>
   220a0:	20010010 	.word	0x20010010

000220a4 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   220a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   220a6:	460d      	mov	r5, r1
   220a8:	4616      	mov	r6, r2
   220aa:	461f      	mov	r7, r3
	if (!key) {
   220ac:	b198      	cbz	r0, 220d6 <nct_settings_set+0x32>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", key, len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   220ae:	2206      	movs	r2, #6
   220b0:	490a      	ldr	r1, [pc, #40]	; (220dc <nct_settings_set+0x38>)
   220b2:	f013 f961 	bl	35378 <strncmp>
   220b6:	4604      	mov	r4, r0
   220b8:	b908      	cbnz	r0, 220be <nct_settings_set+0x1a>
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   220ba:	2d04      	cmp	r5, #4
   220bc:	d004      	beq.n	220c8 <nct_settings_set+0x24>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   220be:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   220c2:	4620      	mov	r0, r4
   220c4:	b003      	add	sp, #12
   220c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   220c8:	462a      	mov	r2, r5
   220ca:	4638      	mov	r0, r7
   220cc:	a901      	add	r1, sp, #4
   220ce:	47b0      	blx	r6
   220d0:	2804      	cmp	r0, #4
   220d2:	d0f6      	beq.n	220c2 <nct_settings_set+0x1e>
   220d4:	e7f3      	b.n	220be <nct_settings_set+0x1a>
		return -EINVAL;
   220d6:	f06f 0415 	mvn.w	r4, #21
   220da:	e7f2      	b.n	220c2 <nct_settings_set+0x1e>
   220dc:	0003ea5e 	.word	0x0003ea5e

000220e0 <dc_endpoint_free>:
{
   220e0:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   220e2:	4c10      	ldr	r4, [pc, #64]	; (22124 <dc_endpoint_free+0x44>)
   220e4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   220e8:	b108      	cbz	r0, 220ee <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   220ea:	f7ff fa61 	bl	215b0 <nrf_cloud_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   220ee:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   220f2:	b108      	cbz	r0, 220f8 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   220f4:	f7ff fa5c 	bl	215b0 <nrf_cloud_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   220f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   220fc:	b108      	cbz	r0, 22102 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   220fe:	f7ff fa57 	bl	215b0 <nrf_cloud_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   22102:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   22106:	b108      	cbz	r0, 2210c <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   22108:	f7ff fa52 	bl	215b0 <nrf_cloud_free>
	if (nct.dc_bin_endp.utf8 != NULL) {
   2210c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   22110:	b108      	cbz	r0, 22116 <dc_endpoint_free+0x36>
		nrf_cloud_free((void *)nct.dc_bin_endp.utf8);
   22112:	f7ff fa4d 	bl	215b0 <nrf_cloud_free>
	dc_endpoint_reset();
   22116:	f7ff ffa1 	bl	2205c <dc_endpoint_reset>
}
   2211a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2211e:	f001 bc35 	b.w	2398c <nrf_cloud_fota_endpoint_clear>
   22122:	bf00      	nop
   22124:	20010010 	.word	0x20010010

00022128 <nct_mqtt_evt_handler>:
}

/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
   22128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2212c:	b08e      	sub	sp, #56	; 0x38
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2212e:	2500      	movs	r5, #0
   22130:	69cb      	ldr	r3, [r1, #28]
{
   22132:	af00      	add	r7, sp, #0
   22134:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   22136:	4608      	mov	r0, r1
{
   22138:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2213a:	e9c7 5502 	strd	r5, r5, [r7, #8]
   2213e:	607b      	str	r3, [r7, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   22140:	f001 fc8c 	bl	23a5c <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   22144:	2800      	cmp	r0, #0
   22146:	d04f      	beq.n	221e8 <nct_mqtt_evt_handler+0xc0>
		return;
	} else if (err < 0) {
   22148:	da0f      	bge.n	2216a <nct_mqtt_evt_handler+0x42>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2214a:	466c      	mov	r4, sp
   2214c:	b088      	sub	sp, #32
   2214e:	466a      	mov	r2, sp
   22150:	4b69      	ldr	r3, [pc, #420]	; (222f8 <nct_mqtt_evt_handler+0x1d0>)

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   22152:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22156:	2303      	movs	r3, #3
   22158:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2215c:	4867      	ldr	r0, [pc, #412]	; (222fc <nct_mqtt_evt_handler+0x1d4>)
   2215e:	f842 3f10 	str.w	r3, [r2, #16]!
   22162:	f011 f9e6 	bl	33532 <z_log_msg_static_create.constprop.0>
   22166:	46a5      	mov	sp, r4
   22168:	e03e      	b.n	221e8 <nct_mqtt_evt_handler+0xc0>
	switch (_mqtt_evt->type) {
   2216a:	7823      	ldrb	r3, [r4, #0]
   2216c:	2b09      	cmp	r3, #9
   2216e:	d83b      	bhi.n	221e8 <nct_mqtt_evt_handler+0xc0>
   22170:	e8df f003 	tbb	[pc, r3]
   22174:	b910c005 	.word	0xb910c005
   22178:	913a3a3a 	.word	0x913a3a3a
   2217c:	beb4      	.short	0xbeb4
		evt.param.flag = (p->session_present_flag != 0) &&
   2217e:	69e3      	ldr	r3, [r4, #28]
   22180:	723d      	strb	r5, [r7, #8]
	switch (mqtt_result) {
   22182:	2b05      	cmp	r3, #5
		evt.status = translate_mqtt_connack_result(_mqtt_evt->result);
   22184:	bf8e      	itee	hi
   22186:	2301      	movhi	r3, #1
   22188:	4a5d      	ldrls	r2, [pc, #372]	; (22300 <nct_mqtt_evt_handler+0x1d8>)
   2218a:	56d3      	ldrsbls	r3, [r2, r3]
   2218c:	607b      	str	r3, [r7, #4]
		evt.type = NCT_EVT_CONNECTED;
   2218e:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   22190:	733b      	strb	r3, [r7, #12]
	if (event_notify) {
   22192:	e064      	b.n	2225e <nct_mqtt_evt_handler+0x136>
					      p->message.payload.len);
   22194:	6965      	ldr	r5, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   22196:	f5b5 6f06 	cmp.w	r5, #2144	; 0x860
   2219a:	d929      	bls.n	221f0 <nct_mqtt_evt_handler+0xc8>
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   2219c:	466c      	mov	r4, sp
   2219e:	b088      	sub	sp, #32
   221a0:	466b      	mov	r3, sp
   221a2:	4a58      	ldr	r2, [pc, #352]	; (22304 <nct_mqtt_evt_handler+0x1dc>)
   221a4:	4855      	ldr	r0, [pc, #340]	; (222fc <nct_mqtt_evt_handler+0x1d4>)
   221a6:	e9c3 2505 	strd	r2, r5, [r3, #20]
   221aa:	f640 0261 	movw	r2, #2145	; 0x861
   221ae:	61da      	str	r2, [r3, #28]
   221b0:	461a      	mov	r2, r3
   221b2:	2304      	movs	r3, #4
   221b4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   221b8:	f842 3f10 	str.w	r3, [r2, #16]!
   221bc:	f011 f9b9 	bl	33532 <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   221c0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   221c4:	46a5      	mov	sp, r4
			LOG_ERR("publish_get_payload: failed %d", err);
   221c6:	466c      	mov	r4, sp
   221c8:	b088      	sub	sp, #32
   221ca:	466a      	mov	r2, sp
   221cc:	2303      	movs	r3, #3
   221ce:	494e      	ldr	r1, [pc, #312]	; (22308 <nct_mqtt_evt_handler+0x1e0>)
   221d0:	e9c2 1005 	strd	r1, r0, [r2, #20]
   221d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   221d8:	4848      	ldr	r0, [pc, #288]	; (222fc <nct_mqtt_evt_handler+0x1d4>)
   221da:	f842 3f10 	str.w	r3, [r2, #16]!
   221de:	f011 f9a8 	bl	33532 <z_log_msg_static_create.constprop.0>
   221e2:	46a5      	mov	sp, r4
			(void)nrf_cloud_disconnect();
   221e4:	f7ff fb9e 	bl	21924 <nrf_cloud_disconnect>
		}
	}
}
   221e8:	3738      	adds	r7, #56	; 0x38
   221ea:	46bd      	mov	sp, r7
   221ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   221f0:	462a      	mov	r2, r5
   221f2:	4630      	mov	r0, r6
   221f4:	4945      	ldr	r1, [pc, #276]	; (2230c <nct_mqtt_evt_handler+0x1e4>)
   221f6:	f00f fe44 	bl	31e82 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   221fa:	4b45      	ldr	r3, [pc, #276]	; (22310 <nct_mqtt_evt_handler+0x1e8>)
		if (err < 0) {
   221fc:	2800      	cmp	r0, #0
	nct.payload_buf[length] = 0;
   221fe:	442b      	add	r3, r5
   22200:	f04f 0500 	mov.w	r5, #0
   22204:	f883 52ee 	strb.w	r5, [r3, #750]	; 0x2ee
		if (err < 0) {
   22208:	dbdd      	blt.n	221c6 <nct_mqtt_evt_handler+0x9e>
			    topic->topic.size, topic_list[index].topic.size)) {
   2220a:	e9d4 9a01 	ldrd	r9, sl, [r4, #4]
   2220e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 22314 <nct_mqtt_evt_handler+0x1ec>
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   22212:	f8d8 2004 	ldr.w	r2, [r8, #4]
   22216:	4648      	mov	r0, r9
   22218:	4552      	cmp	r2, sl
   2221a:	bf28      	it	cs
   2221c:	4652      	movcs	r2, sl
   2221e:	f8d8 1000 	ldr.w	r1, [r8]
   22222:	f013 f8a9 	bl	35378 <strncmp>
		if (strings_compare(
   22226:	bb20      	cbnz	r0, 22272 <nct_mqtt_evt_handler+0x14a>
			*opcode = nct_cc_rx_opcode_map[index];
   22228:	4b3b      	ldr	r3, [pc, #236]	; (22318 <nct_mqtt_evt_handler+0x1f0>)
			cc.topic.ptr = p->message.topic.topic.utf8;
   2222a:	e9c7 a906 	strd	sl, r9, [r7, #24]
			*opcode = nct_cc_rx_opcode_map[index];
   2222e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   22232:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cc.message_id = p->message_id;
   22236:	8b23      	ldrh	r3, [r4, #24]
   22238:	843b      	strh	r3, [r7, #32]
			cc.data.ptr = nct.payload_buf;
   2223a:	4b34      	ldr	r3, [pc, #208]	; (2230c <nct_mqtt_evt_handler+0x1e4>)
   2223c:	617b      	str	r3, [r7, #20]
			cc.data.len = p->message.payload.len;
   2223e:	6963      	ldr	r3, [r4, #20]
   22240:	613b      	str	r3, [r7, #16]
			evt.type = NCT_EVT_CC_RX_DATA;
   22242:	2303      	movs	r3, #3
   22244:	733b      	strb	r3, [r7, #12]
			evt.param.cc = &cc;
   22246:	f107 0310 	add.w	r3, r7, #16
			evt.param.dc = &dc;
   2224a:	60bb      	str	r3, [r7, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2224c:	7b23      	ldrb	r3, [r4, #12]
   2224e:	2b01      	cmp	r3, #1
   22250:	d105      	bne.n	2225e <nct_mqtt_evt_handler+0x136>
			const struct mqtt_puback_param ack = {
   22252:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   22254:	4639      	mov	r1, r7
   22256:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   22258:	803b      	strh	r3, [r7, #0]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2225a:	f00f fcee 	bl	31c3a <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2225e:	1d38      	adds	r0, r7, #4
   22260:	f7ff fb74 	bl	2194c <nct_input>
		if (err != 0) {
   22264:	2800      	cmp	r0, #0
   22266:	d0bf      	beq.n	221e8 <nct_mqtt_evt_handler+0xc0>
			LOG_ERR("nct_input: failed %d", err);
   22268:	466c      	mov	r4, sp
   2226a:	b088      	sub	sp, #32
   2226c:	466a      	mov	r2, sp
   2226e:	4b2b      	ldr	r3, [pc, #172]	; (2231c <nct_mqtt_evt_handler+0x1f4>)
   22270:	e76f      	b.n	22152 <nct_mqtt_evt_handler+0x2a>
	for (uint32_t index = 0; index < list_size; index++) {
   22272:	3501      	adds	r5, #1
   22274:	2d03      	cmp	r5, #3
   22276:	f108 080c 	add.w	r8, r8, #12
   2227a:	d1ca      	bne.n	22212 <nct_mqtt_evt_handler+0xea>
			dc.message_id = p->message_id;
   2227c:	8b23      	ldrh	r3, [r4, #24]
			dc.topic.ptr = p->message.topic.topic.utf8;
   2227e:	e9c7 a90b 	strd	sl, r9, [r7, #44]	; 0x2c
			dc.message_id = p->message_id;
   22282:	86bb      	strh	r3, [r7, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   22284:	4b21      	ldr	r3, [pc, #132]	; (2230c <nct_mqtt_evt_handler+0x1e4>)
   22286:	62bb      	str	r3, [r7, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   22288:	6963      	ldr	r3, [r4, #20]
   2228a:	627b      	str	r3, [r7, #36]	; 0x24
			evt.type = NCT_EVT_DC_RX_DATA;
   2228c:	2306      	movs	r3, #6
   2228e:	733b      	strb	r3, [r7, #12]
			evt.param.dc = &dc;
   22290:	f107 0324 	add.w	r3, r7, #36	; 0x24
   22294:	e7d9      	b.n	2224a <nct_mqtt_evt_handler+0x122>
	switch (mqtt_result) {
   22296:	69e3      	ldr	r3, [r4, #28]
		return NRF_CLOUD_ERR_STATUS_NONE;
   22298:	2b02      	cmp	r3, #2
   2229a:	bf8c      	ite	hi
   2229c:	2307      	movhi	r3, #7
   2229e:	2300      	movls	r3, #0
		evt.status = translate_mqtt_suback_result(_mqtt_evt->result);
   222a0:	607b      	str	r3, [r7, #4]
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   222a2:	88a3      	ldrh	r3, [r4, #4]
   222a4:	2b64      	cmp	r3, #100	; 0x64
   222a6:	d101      	bne.n	222ac <nct_mqtt_evt_handler+0x184>
			evt.type = NCT_EVT_CC_CONNECTED;
   222a8:	2301      	movs	r3, #1
   222aa:	e771      	b.n	22190 <nct_mqtt_evt_handler+0x68>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   222ac:	2b65      	cmp	r3, #101	; 0x65
   222ae:	d19b      	bne.n	221e8 <nct_mqtt_evt_handler+0xc0>
			evt.type = NCT_EVT_DC_CONNECTED;
   222b0:	2302      	movs	r3, #2
   222b2:	733b      	strb	r3, [r7, #12]
			err = nrf_cloud_fota_subscribe();
   222b4:	f001 fb72 	bl	2399c <nrf_cloud_fota_subscribe>
			if (err) {
   222b8:	2800      	cmp	r0, #0
   222ba:	d0d0      	beq.n	2225e <nct_mqtt_evt_handler+0x136>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   222bc:	466c      	mov	r4, sp
   222be:	b088      	sub	sp, #32
   222c0:	466a      	mov	r2, sp
   222c2:	4b17      	ldr	r3, [pc, #92]	; (22320 <nct_mqtt_evt_handler+0x1f8>)
   222c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   222c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   222cc:	2303      	movs	r3, #3
   222ce:	480b      	ldr	r0, [pc, #44]	; (222fc <nct_mqtt_evt_handler+0x1d4>)
   222d0:	f842 3f10 	str.w	r3, [r2, #16]!
   222d4:	f011 f92d 	bl	33532 <z_log_msg_static_create.constprop.0>
   222d8:	46a5      	mov	sp, r4
	if (event_notify) {
   222da:	e7c0      	b.n	2225e <nct_mqtt_evt_handler+0x136>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   222dc:	88a3      	ldrh	r3, [r4, #4]
   222de:	2b96      	cmp	r3, #150	; 0x96
   222e0:	d182      	bne.n	221e8 <nct_mqtt_evt_handler+0xc0>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   222e2:	2308      	movs	r3, #8
   222e4:	e754      	b.n	22190 <nct_mqtt_evt_handler+0x68>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   222e6:	2304      	movs	r3, #4
   222e8:	733b      	strb	r3, [r7, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   222ea:	88a3      	ldrh	r3, [r4, #4]
   222ec:	813b      	strh	r3, [r7, #8]
	if (event_notify) {
   222ee:	e7b6      	b.n	2225e <nct_mqtt_evt_handler+0x136>
		evt.type = NCT_EVT_PINGRESP;
   222f0:	2305      	movs	r3, #5
   222f2:	e74d      	b.n	22190 <nct_mqtt_evt_handler+0x68>
		evt.type = NCT_EVT_DISCONNECTED;
   222f4:	230a      	movs	r3, #10
   222f6:	e74b      	b.n	22190 <nct_mqtt_evt_handler+0x68>
   222f8:	0003ea65 	.word	0x0003ea65
   222fc:	000365b8 	.word	0x000365b8
   22300:	0003edb7 	.word	0x0003edb7
   22304:	0003ea91 	.word	0x0003ea91
   22308:	0003eac2 	.word	0x0003eac2
   2230c:	200102fe 	.word	0x200102fe
   22310:	20010010 	.word	0x20010010
   22314:	2000ffec 	.word	0x2000ffec
   22318:	00037480 	.word	0x00037480
   2231c:	0003eb00 	.word	0x0003eb00
   22320:	0003eae1 	.word	0x0003eae1

00022324 <nct_set_topic_prefix>:
{
   22324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   22328:	212f      	movs	r1, #47	; 0x2f
{
   2232a:	af00      	add	r7, sp, #0
   2232c:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   2232e:	f013 f80e 	bl	3534e <strchr>
	if (end_of_stage) {
   22332:	4605      	mov	r5, r0
   22334:	2800      	cmp	r0, #0
   22336:	d03e      	beq.n	223b6 <nct_set_topic_prefix+0x92>
		len = end_of_stage - topic_prefix;
   22338:	1b06      	subs	r6, r0, r4
		if (len >= sizeof(stage)) {
   2233a:	2e07      	cmp	r6, #7
   2233c:	d912      	bls.n	22364 <nct_set_topic_prefix+0x40>
			LOG_WRN("Truncating copy of stage string length "
   2233e:	46e8      	mov	r8, sp
   22340:	b088      	sub	sp, #32
   22342:	466b      	mov	r3, sp
   22344:	4a1d      	ldr	r2, [pc, #116]	; (223bc <nct_set_topic_prefix+0x98>)
   22346:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   2234a:	e9c3 2605 	strd	r2, r6, [r3, #20]
   2234e:	2208      	movs	r2, #8
   22350:	61da      	str	r2, [r3, #28]
   22352:	461a      	mov	r2, r3
   22354:	2304      	movs	r3, #4
   22356:	481a      	ldr	r0, [pc, #104]	; (223c0 <nct_set_topic_prefix+0x9c>)
   22358:	f842 3f10 	str.w	r3, [r2, #16]!
   2235c:	f011 f8e9 	bl	33532 <z_log_msg_static_create.constprop.0>
			len = sizeof(stage) - 1;
   22360:	2607      	movs	r6, #7
   22362:	46c5      	mov	sp, r8
		memcpy(stage, topic_prefix, len);
   22364:	4b17      	ldr	r3, [pc, #92]	; (223c4 <nct_set_topic_prefix+0xa0>)
   22366:	4621      	mov	r1, r4
   22368:	4632      	mov	r2, r6
   2236a:	4618      	mov	r0, r3
   2236c:	f012 fe3e 	bl	34fec <memcpy>
		stage[len] = '\0';
   22370:	2200      	movs	r2, #0
   22372:	5582      	strb	r2, [r0, r6]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   22374:	4620      	mov	r0, r4
   22376:	f7e6 ffd0 	bl	931a <strlen>
   2237a:	1e84      	subs	r4, r0, #2
   2237c:	1ba4      	subs	r4, r4, r6
		if (len >= sizeof(tenant)) {
   2237e:	2c3f      	cmp	r4, #63	; 0x3f
   22380:	d911      	bls.n	223a6 <nct_set_topic_prefix+0x82>
			LOG_WRN("Truncating copy of tenant id string length "
   22382:	466e      	mov	r6, sp
   22384:	b088      	sub	sp, #32
   22386:	466a      	mov	r2, sp
   22388:	4b0f      	ldr	r3, [pc, #60]	; (223c8 <nct_set_topic_prefix+0xa4>)
   2238a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   2238e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   22392:	2340      	movs	r3, #64	; 0x40
   22394:	61d3      	str	r3, [r2, #28]
   22396:	2304      	movs	r3, #4
   22398:	4809      	ldr	r0, [pc, #36]	; (223c0 <nct_set_topic_prefix+0x9c>)
   2239a:	f842 3f10 	str.w	r3, [r2, #16]!
   2239e:	f011 f8c8 	bl	33532 <z_log_msg_static_create.constprop.0>
			len = sizeof(tenant) - 1;
   223a2:	243f      	movs	r4, #63	; 0x3f
   223a4:	46b5      	mov	sp, r6
		memcpy(tenant, end_of_stage + 1, len);
   223a6:	4b09      	ldr	r3, [pc, #36]	; (223cc <nct_set_topic_prefix+0xa8>)
   223a8:	4622      	mov	r2, r4
   223aa:	4618      	mov	r0, r3
   223ac:	1c69      	adds	r1, r5, #1
   223ae:	f012 fe1d 	bl	34fec <memcpy>
		tenant[len] = '\0';
   223b2:	2200      	movs	r2, #0
   223b4:	5502      	strb	r2, [r0, r4]
}
   223b6:	46bd      	mov	sp, r7
   223b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   223bc:	0003eb15 	.word	0x0003eb15
   223c0:	000365b8 	.word	0x000365b8
   223c4:	20012842 	.word	0x20012842
   223c8:	0003eb4b 	.word	0x0003eb4b
   223cc:	20012802 	.word	0x20012802

000223d0 <nct_mqtt_connect>:
{
   223d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   223d2:	4e20      	ldr	r6, [pc, #128]	; (22454 <nct_mqtt_connect+0x84>)
   223d4:	7835      	ldrb	r5, [r6, #0]
   223d6:	2d00      	cmp	r5, #0
   223d8:	d136      	bne.n	22448 <nct_mqtt_connect+0x78>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   223da:	4c1f      	ldr	r4, [pc, #124]	; (22458 <nct_mqtt_connect+0x88>)
		mqtt_client_init(&nct.client);
   223dc:	481f      	ldr	r0, [pc, #124]	; (2245c <nct_mqtt_connect+0x8c>)
   223de:	f00f fb8f 	bl	31b00 <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   223e2:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   223e6:	67e3      	str	r3, [r4, #124]	; 0x7c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   223e8:	4b1d      	ldr	r3, [pc, #116]	; (22460 <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   223ea:	2701      	movs	r7, #1
		nct.client.evt_cb = nct_mqtt_evt_handler;
   223ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   223f0:	4b1c      	ldr	r3, [pc, #112]	; (22464 <nct_mqtt_connect+0x94>)
   223f2:	6818      	ldr	r0, [r3, #0]
   223f4:	6760      	str	r0, [r4, #116]	; 0x74
		nct.client.client_id.size = strlen(client_id_buf);
   223f6:	f7e6 ff90 	bl	931a <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   223fa:	2304      	movs	r3, #4
   223fc:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   22400:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   22404:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		nct.client.clean_session = persistent_session ? 0U : 1U;
   22408:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		nct.client.user_name = NULL;
   2240c:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		nct.client.clean_session = persistent_session ? 0U : 1U;
   22410:	f043 0302 	orr.w	r3, r3, #2
   22414:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		nct.client.rx_buf = nct.rx_buf;
   22418:	f104 03ee 	add.w	r3, r4, #238	; 0xee
   2241c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   22420:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.tx_buf = nct.tx_buf;
   22424:	f504 72f7 	add.w	r2, r4, #494	; 0x1ee
		memcpy(tls_config, &nct.tls_config,
   22428:	f104 0550 	add.w	r5, r4, #80	; 0x50
		nct.client.client_id.size = strlen(client_id_buf);
   2242c:	67a0      	str	r0, [r4, #120]	; 0x78
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2242e:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   22432:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   22436:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		memcpy(tls_config, &nct.tls_config,
   2243a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2243c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2243e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22442:	6823      	ldr	r3, [r4, #0]
   22444:	602b      	str	r3, [r5, #0]
		mqtt_client_initialized = true;
   22446:	7037      	strb	r7, [r6, #0]
	err = mqtt_connect(&nct.client);
   22448:	4804      	ldr	r0, [pc, #16]	; (2245c <nct_mqtt_connect+0x8c>)
}
   2244a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   2244e:	f00f bb6e 	b.w	31b2e <mqtt_connect>
   22452:	bf00      	nop
   22454:	20012801 	.word	0x20012801
   22458:	20010010 	.word	0x20010010
   2245c:	20010034 	.word	0x20010034
   22460:	00022129 	.word	0x00022129
   22464:	20010b60 	.word	0x20010b60

00022468 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   22468:	b510      	push	{r4, lr}
   2246a:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2246c:	2250      	movs	r2, #80	; 0x50
   2246e:	2100      	movs	r1, #0
   22470:	a806      	add	r0, sp, #24
   22472:	f012 fddb 	bl	3502c <memset>
   22476:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   22478:	2100      	movs	r1, #0
   2247a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2247e:	4815      	ldr	r0, [pc, #84]	; (224d4 <nct_connect+0x6c>)
   22480:	ab01      	add	r3, sp, #4
   22482:	aa06      	add	r2, sp, #24
   22484:	f00c fc1d 	bl	2ecc2 <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   22488:	bb00      	cbnz	r0, 224cc <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   2248a:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   2248c:	b913      	cbnz	r3, 22494 <nct_connect+0x2c>
	err = -ECHILD;
   2248e:	f06f 0409 	mvn.w	r4, #9
   22492:	e013      	b.n	224bc <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   22494:	695a      	ldr	r2, [r3, #20]
   22496:	2a08      	cmp	r2, #8
   22498:	d116      	bne.n	224c8 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   2249a:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   2249c:	490e      	ldr	r1, [pc, #56]	; (224d8 <nct_connect+0x70>)
					->sin_addr.s_addr;
   2249e:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   224a0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
			broker->sin_family = AF_INET;
   224a4:	4b0d      	ldr	r3, [pc, #52]	; (224dc <nct_connect+0x74>)
   224a6:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
   224aa:	2310      	movs	r3, #16
   224ac:	aa02      	add	r2, sp, #8
   224ae:	31b0      	adds	r1, #176	; 0xb0
   224b0:	2001      	movs	r0, #1
   224b2:	f7f6 fa4b 	bl	1894c <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", addr_str);

			err = nct_mqtt_connect();
   224b6:	f7ff ff8b 	bl	223d0 <nct_mqtt_connect>
   224ba:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   224bc:	9801      	ldr	r0, [sp, #4]
   224be:	f00c fc02 	bl	2ecc6 <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   224c2:	4620      	mov	r0, r4
   224c4:	b01a      	add	sp, #104	; 0x68
   224c6:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   224c8:	681b      	ldr	r3, [r3, #0]
   224ca:	e7df      	b.n	2248c <nct_connect+0x24>
		return -ECHILD;
   224cc:	f06f 0409 	mvn.w	r4, #9
   224d0:	e7f7      	b.n	224c2 <nct_connect+0x5a>
   224d2:	bf00      	nop
   224d4:	0003ecb8 	.word	0x0003ecb8
   224d8:	20010010 	.word	0x20010010
   224dc:	b3220001 	.word	0xb3220001

000224e0 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   224e0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   224e2:	466b      	mov	r3, sp
   224e4:	4a05      	ldr	r2, [pc, #20]	; (224fc <nct_cc_connect+0x1c>)
   224e6:	e892 0003 	ldmia.w	r2, {r0, r1}
   224ea:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   224ee:	4619      	mov	r1, r3
   224f0:	4803      	ldr	r0, [pc, #12]	; (22500 <nct_cc_connect+0x20>)
   224f2:	f00f fbf0 	bl	31cd6 <mqtt_subscribe>
}
   224f6:	b003      	add	sp, #12
   224f8:	f85d fb04 	ldr.w	pc, [sp], #4
   224fc:	000366e0 	.word	0x000366e0
   22500:	20010034 	.word	0x20010034

00022504 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   22504:	b5b0      	push	{r4, r5, r7, lr}
   22506:	b086      	sub	sp, #24
	if (cc_data == NULL) {
   22508:	4604      	mov	r4, r0
{
   2250a:	af00      	add	r7, sp, #0
	if (cc_data == NULL) {
   2250c:	b980      	cbnz	r0, 22530 <nct_cc_send+0x2c>
		LOG_ERR("cc_data == NULL");
   2250e:	4b2c      	ldr	r3, [pc, #176]	; (225c0 <nct_cc_send+0xbc>)
		return -EINVAL;
   22510:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("cc_data == NULL");
   22514:	617b      	str	r3, [r7, #20]
   22516:	2302      	movs	r3, #2
   22518:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2251c:	4829      	ldr	r0, [pc, #164]	; (225c4 <nct_cc_send+0xc0>)
   2251e:	613b      	str	r3, [r7, #16]
   22520:	f107 0210 	add.w	r2, r7, #16
   22524:	f011 f805 	bl	33532 <z_log_msg_static_create.constprop.0>
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   22528:	4620      	mov	r0, r4
   2252a:	3718      	adds	r7, #24
   2252c:	46bd      	mov	sp, r7
   2252e:	bdb0      	pop	{r4, r5, r7, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   22530:	7c85      	ldrb	r5, [r0, #18]
   22532:	2d01      	cmp	r5, #1
   22534:	d911      	bls.n	2255a <nct_cc_send+0x56>
		LOG_ERR("opcode = %d", cc_data->opcode);
   22536:	466c      	mov	r4, sp
   22538:	b088      	sub	sp, #32
   2253a:	466a      	mov	r2, sp
   2253c:	4b22      	ldr	r3, [pc, #136]	; (225c8 <nct_cc_send+0xc4>)
   2253e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22542:	e9c2 3505 	strd	r3, r5, [r2, #20]
   22546:	2303      	movs	r3, #3
   22548:	481e      	ldr	r0, [pc, #120]	; (225c4 <nct_cc_send+0xc0>)
   2254a:	f842 3f10 	str.w	r3, [r2, #16]!
   2254e:	f010 fff0 	bl	33532 <z_log_msg_static_create.constprop.0>
   22552:	46a5      	mov	sp, r4
		return -ENOTSUP;
   22554:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22558:	e7e6      	b.n	22528 <nct_cc_send+0x24>
	struct mqtt_publish_param publish = {
   2255a:	2210      	movs	r2, #16
   2255c:	2100      	movs	r1, #0
   2255e:	f107 0008 	add.w	r0, r7, #8
   22562:	f012 fd63 	bl	3502c <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   22566:	230c      	movs	r3, #12
   22568:	435d      	muls	r5, r3
   2256a:	4a18      	ldr	r2, [pc, #96]	; (225cc <nct_cc_send+0xc8>)
   2256c:	1953      	adds	r3, r2, r5
	struct mqtt_publish_param publish = {
   2256e:	5952      	ldr	r2, [r2, r5]
   22570:	603a      	str	r2, [r7, #0]
   22572:	685a      	ldr	r2, [r3, #4]
   22574:	7a1b      	ldrb	r3, [r3, #8]
   22576:	607a      	str	r2, [r7, #4]
   22578:	723b      	strb	r3, [r7, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2257a:	6823      	ldr	r3, [r4, #0]
   2257c:	b11b      	cbz	r3, 22586 <nct_cc_send+0x82>
   2257e:	6862      	ldr	r2, [r4, #4]
   22580:	b10a      	cbz	r2, 22586 <nct_cc_send+0x82>
		publish.message.payload.len = cc_data->data.len;
   22582:	e9c7 2303 	strd	r2, r3, [r7, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   22586:	8a20      	ldrh	r0, [r4, #16]
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   22588:	b908      	cbnz	r0, 2258e <nct_cc_send+0x8a>
	return get_next_message_id();
   2258a:	f7ff fd77 	bl	2207c <get_next_message_id>
	publish.message_id = get_message_id(cc_data->message_id);
   2258e:	82b8      	strh	r0, [r7, #20]
	int err = mqtt_publish(&nct.client, &publish);
   22590:	4639      	mov	r1, r7
   22592:	480f      	ldr	r0, [pc, #60]	; (225d0 <nct_cc_send+0xcc>)
   22594:	f00f fb0d 	bl	31bb2 <mqtt_publish>
	if (err) {
   22598:	4604      	mov	r4, r0
   2259a:	2800      	cmp	r0, #0
   2259c:	d0c4      	beq.n	22528 <nct_cc_send+0x24>
		LOG_ERR("mqtt_publish failed %d", err);
   2259e:	466d      	mov	r5, sp
   225a0:	b088      	sub	sp, #32
   225a2:	466a      	mov	r2, sp
   225a4:	4b0b      	ldr	r3, [pc, #44]	; (225d4 <nct_cc_send+0xd0>)
   225a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   225aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   225ae:	2303      	movs	r3, #3
   225b0:	4804      	ldr	r0, [pc, #16]	; (225c4 <nct_cc_send+0xc0>)
   225b2:	f842 3f10 	str.w	r3, [r2, #16]!
   225b6:	f010 ffbc 	bl	33532 <z_log_msg_static_create.constprop.0>
   225ba:	46ad      	mov	sp, r5
   225bc:	e7b4      	b.n	22528 <nct_cc_send+0x24>
   225be:	bf00      	nop
   225c0:	0003ecf0 	.word	0x0003ecf0
   225c4:	000365b8 	.word	0x000365b8
   225c8:	0003ed00 	.word	0x0003ed00
   225cc:	2000ffd4 	.word	0x2000ffd4
   225d0:	20010034 	.word	0x20010034
   225d4:	0003ed0c 	.word	0x0003ed0c

000225d8 <nct_dc_endpoint_set>:
void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *bin_endp,
			 const struct nrf_cloud_data *m_endp)
{
   225d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225dc:	4680      	mov	r8, r0
   225de:	460f      	mov	r7, r1
   225e0:	4616      	mov	r6, r2
   225e2:	461d      	mov	r5, r3
   225e4:	9c06      	ldr	r4, [sp, #24]
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   225e6:	f7ff fd7b 	bl	220e0 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   225ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   225ee:	4815      	ldr	r0, [pc, #84]	; (22644 <nct_dc_endpoint_set+0x6c>)
   225f0:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_tx_endp.size = tx_endp->len;
   225f4:	f8d8 3000 	ldr.w	r3, [r8]
   225f8:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   225fc:	687b      	ldr	r3, [r7, #4]
   225fe:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	nct.dc_rx_endp.size = rx_endp->len;
   22602:	683b      	ldr	r3, [r7, #0]
   22604:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   22608:	6873      	ldr	r3, [r6, #4]
   2260a:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	nct.dc_bulk_endp.size = bulk_endp->len;
   2260e:	6833      	ldr	r3, [r6, #0]
   22610:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0

	nct.dc_bin_endp.utf8 = (const uint8_t *)bin_endp->ptr;
   22614:	686b      	ldr	r3, [r5, #4]
   22616:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	nct.dc_bin_endp.size = bin_endp->len;
   2261a:	682b      	ldr	r3, [r5, #0]
   2261c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8

	if (m_endp != NULL) {
   22620:	b174      	cbz	r4, 22640 <nct_dc_endpoint_set+0x68>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   22622:	6863      	ldr	r3, [r4, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   22624:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   22628:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
		nct.dc_m_endp.size = m_endp->len;
   2262c:	6823      	ldr	r3, [r4, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2262e:	3024      	adds	r0, #36	; 0x24
		nct.dc_m_endp.size = m_endp->len;
   22630:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   22634:	4b04      	ldr	r3, [pc, #16]	; (22648 <nct_dc_endpoint_set+0x70>)
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   22636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2263a:	6819      	ldr	r1, [r3, #0]
   2263c:	f001 b972 	b.w	23924 <nrf_cloud_fota_endpoint_set_and_report>
}
   22640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22644:	20010010 	.word	0x20010010
   22648:	20010b60 	.word	0x20010b60

0002264c <nct_dc_endpoint_get>:
void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const bin_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2264c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2264e:	4c12      	ldr	r4, [pc, #72]	; (22698 <nct_dc_endpoint_get+0x4c>)
{
   22650:	9d04      	ldr	r5, [sp, #16]
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   22652:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   22656:	6046      	str	r6, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   22658:	f8d4 60c8 	ldr.w	r6, [r4, #200]	; 0xc8
   2265c:	6006      	str	r6, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2265e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   22662:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   22664:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   22668:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   2266a:	b12a      	cbz	r2, 22678 <nct_dc_endpoint_get+0x2c>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   2266c:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   22670:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   22672:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   22676:	6011      	str	r1, [r2, #0]
	}

	if (bin_endp != NULL) {
   22678:	b12b      	cbz	r3, 22686 <nct_dc_endpoint_get+0x3a>
		bin_endp->ptr = nct.dc_bin_endp.utf8;
   2267a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   2267e:	605a      	str	r2, [r3, #4]
		bin_endp->len = nct.dc_bin_endp.size;
   22680:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
   22684:	601a      	str	r2, [r3, #0]
	}

	if (m_endp != NULL) {
   22686:	b12d      	cbz	r5, 22694 <nct_dc_endpoint_get+0x48>
		m_endp->ptr = nct.dc_m_endp.utf8;
   22688:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   2268c:	606b      	str	r3, [r5, #4]
		m_endp->len = nct.dc_m_endp.size;
   2268e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   22692:	602b      	str	r3, [r5, #0]
	}
}
   22694:	bd70      	pop	{r4, r5, r6, pc}
   22696:	bf00      	nop
   22698:	20010010 	.word	0x20010010

0002269c <nct_dc_connect>:

int nct_dc_connect(void)
{
   2269c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2269e:	480a      	ldr	r0, [pc, #40]	; (226c8 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   226a0:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   226a2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
	return mqtt_subscribe(&nct.client, &subscription_list);
   226a6:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   226a8:	9303      	str	r3, [sp, #12]
   226aa:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   226ae:	9304      	str	r3, [sp, #16]
   226b0:	2301      	movs	r3, #1
   226b2:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   226b6:	ab03      	add	r3, sp, #12
   226b8:	9301      	str	r3, [sp, #4]
   226ba:	4b04      	ldr	r3, [pc, #16]	; (226cc <nct_dc_connect+0x30>)
   226bc:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   226be:	f00f fb0a 	bl	31cd6 <mqtt_subscribe>
}
   226c2:	b007      	add	sp, #28
   226c4:	f85d fb04 	ldr.w	pc, [sp], #4
   226c8:	20010010 	.word	0x20010010
   226cc:	00650001 	.word	0x00650001

000226d0 <nct_dc_disconnect>:
{
	return endp_send(dc_data, &nct.dc_bin_endp, qos);
}

int nct_dc_disconnect(void)
{
   226d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   226d2:	b087      	sub	sp, #28

	LOG_DBG("nct_dc_disconnect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   226d4:	4816      	ldr	r0, [pc, #88]	; (22730 <nct_dc_disconnect+0x60>)
{
   226d6:	af00      	add	r7, sp, #0
	struct mqtt_topic subscribe_topic = {
   226d8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   226dc:	1d39      	adds	r1, r7, #4
	struct mqtt_topic subscribe_topic = {
   226de:	60fb      	str	r3, [r7, #12]
   226e0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   226e4:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   226e6:	613b      	str	r3, [r7, #16]
   226e8:	2301      	movs	r3, #1
   226ea:	753b      	strb	r3, [r7, #20]
	const struct mqtt_subscription_list subscription_list = {
   226ec:	f107 030c 	add.w	r3, r7, #12
   226f0:	607b      	str	r3, [r7, #4]
   226f2:	4b10      	ldr	r3, [pc, #64]	; (22734 <nct_dc_disconnect+0x64>)
   226f4:	60bb      	str	r3, [r7, #8]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   226f6:	f00f fb14 	bl	31d22 <mqtt_unsubscribe>
   226fa:	4605      	mov	r5, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   226fc:	f001 f96c 	bl	239d8 <nrf_cloud_fota_unsubscribe>

	if (err) {
   22700:	4604      	mov	r4, r0
   22702:	b178      	cbz	r0, 22724 <nct_dc_disconnect+0x54>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   22704:	466e      	mov	r6, sp
   22706:	b088      	sub	sp, #32
   22708:	466a      	mov	r2, sp
   2270a:	4b0b      	ldr	r3, [pc, #44]	; (22738 <nct_dc_disconnect+0x68>)
   2270c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22710:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22714:	2303      	movs	r3, #3
   22716:	4809      	ldr	r0, [pc, #36]	; (2273c <nct_dc_disconnect+0x6c>)
   22718:	f842 3f10 	str.w	r3, [r2, #16]!
   2271c:	f010 ff09 	bl	33532 <z_log_msg_static_create.constprop.0>
   22720:	46b5      	mov	sp, r6
		if (ret == 0) {
   22722:	b105      	cbz	r5, 22726 <nct_dc_disconnect+0x56>
{
   22724:	462c      	mov	r4, r5
		}
	}
#endif

	return ret;
}
   22726:	4620      	mov	r0, r4
   22728:	371c      	adds	r7, #28
   2272a:	46bd      	mov	sp, r7
   2272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2272e:	bf00      	nop
   22730:	20010010 	.word	0x20010010
   22734:	00970001 	.word	0x00970001
   22738:	0003ed23 	.word	0x0003ed23
   2273c:	000365b8 	.word	0x000365b8

00022740 <nct_disconnect>:

int nct_disconnect(void)
{
   22740:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   22742:	f7ff fccd 	bl	220e0 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   22746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2274a:	4801      	ldr	r0, [pc, #4]	; (22750 <nct_disconnect+0x10>)
   2274c:	f00f ba9b 	b.w	31c86 <mqtt_disconnect>
   22750:	20010034 	.word	0x20010034

00022754 <nct_process>:

int nct_process(void)
{
   22754:	b5f0      	push	{r4, r5, r6, r7, lr}
   22756:	b085      	sub	sp, #20
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   22758:	4834      	ldr	r0, [pc, #208]	; (2282c <nct_process+0xd8>)
{
   2275a:	af00      	add	r7, sp, #0
	err = mqtt_input(&nct.client);
   2275c:	f00f fb6d 	bl	31e3a <mqtt_input>
	if (err) {
   22760:	4604      	mov	r4, r0
   22762:	2800      	cmp	r0, #0
   22764:	d042      	beq.n	227ec <nct_process+0x98>
		LOG_ERR("MQTT input error: %d", err);
   22766:	466d      	mov	r5, sp
   22768:	b088      	sub	sp, #32
   2276a:	466a      	mov	r2, sp
   2276c:	4b30      	ldr	r3, [pc, #192]	; (22830 <nct_process+0xdc>)
   2276e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22772:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22776:	2303      	movs	r3, #3
   22778:	482e      	ldr	r0, [pc, #184]	; (22834 <nct_process+0xe0>)
   2277a:	f842 3f10 	str.w	r3, [r2, #16]!
   2277e:	f010 fed8 	bl	33532 <z_log_msg_static_create.constprop.0>
		if (err != -ENOTCONN) {
   22782:	f114 0f80 	cmn.w	r4, #128	; 0x80
   22786:	46ad      	mov	sp, r5
   22788:	d12c      	bne.n	227e4 <nct_process+0x90>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   2278a:	f7ff ffd9 	bl	22740 <nct_disconnect>
	if (ret) {
   2278e:	b170      	cbz	r0, 227ae <nct_process+0x5a>
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   22790:	466d      	mov	r5, sp
   22792:	b088      	sub	sp, #32
   22794:	466a      	mov	r2, sp
   22796:	4b28      	ldr	r3, [pc, #160]	; (22838 <nct_process+0xe4>)
   22798:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2279c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   227a0:	2303      	movs	r3, #3
   227a2:	4824      	ldr	r0, [pc, #144]	; (22834 <nct_process+0xe0>)
   227a4:	f842 3f10 	str.w	r3, [r2, #16]!
   227a8:	f010 fec3 	bl	33532 <z_log_msg_static_create.constprop.0>
   227ac:	46ad      	mov	sp, r5
	}

	struct nct_evt evt = { .status = err };
   227ae:	2300      	movs	r3, #0
   227b0:	e9c7 3302 	strd	r3, r3, [r7, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   227b4:	230a      	movs	r3, #10
	ret = nct_input(&evt);
   227b6:	1d38      	adds	r0, r7, #4
	struct nct_evt evt = { .status = err };
   227b8:	607c      	str	r4, [r7, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   227ba:	733b      	strb	r3, [r7, #12]
	ret = nct_input(&evt);
   227bc:	f7ff f8c6 	bl	2194c <nct_input>
	if (ret) {
   227c0:	4605      	mov	r5, r0
   227c2:	b178      	cbz	r0, 227e4 <nct_process+0x90>
		LOG_ERR("Error sending event to application: %d", err);
   227c4:	466e      	mov	r6, sp
   227c6:	b088      	sub	sp, #32
   227c8:	466a      	mov	r2, sp
   227ca:	4b1c      	ldr	r3, [pc, #112]	; (2283c <nct_process+0xe8>)
   227cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   227d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   227d4:	2303      	movs	r3, #3
   227d6:	4817      	ldr	r0, [pc, #92]	; (22834 <nct_process+0xe0>)
   227d8:	f842 3f10 	str.w	r3, [r2, #16]!
   227dc:	f010 fea9 	bl	33532 <z_log_msg_static_create.constprop.0>
   227e0:	462c      	mov	r4, r5
   227e2:	46b5      	mov	sp, r6
		err = ret;
	}
	return err;
}
   227e4:	4620      	mov	r0, r4
   227e6:	3714      	adds	r7, #20
   227e8:	46bd      	mov	sp, r7
   227ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nct.client.unacked_ping) {
   227ec:	4814      	ldr	r0, [pc, #80]	; (22840 <nct_process+0xec>)
   227ee:	f990 30a7 	ldrsb.w	r3, [r0, #167]	; 0xa7
   227f2:	b9c3      	cbnz	r3, 22826 <nct_process+0xd2>
		err = mqtt_live(&nct.client);
   227f4:	3024      	adds	r0, #36	; 0x24
   227f6:	f00f fae4 	bl	31dc2 <mqtt_live>
		if (err && (err != -EAGAIN)) {
   227fa:	4604      	mov	r4, r0
   227fc:	2800      	cmp	r0, #0
   227fe:	d0f1      	beq.n	227e4 <nct_process+0x90>
   22800:	f110 0f0b 	cmn.w	r0, #11
   22804:	d0ee      	beq.n	227e4 <nct_process+0x90>
			LOG_ERR("MQTT ping error: %d", err);
   22806:	466d      	mov	r5, sp
   22808:	b088      	sub	sp, #32
   2280a:	466a      	mov	r2, sp
   2280c:	4b0d      	ldr	r3, [pc, #52]	; (22844 <nct_process+0xf0>)
   2280e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22812:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22816:	2303      	movs	r3, #3
   22818:	4806      	ldr	r0, [pc, #24]	; (22834 <nct_process+0xe0>)
   2281a:	f842 3f10 	str.w	r3, [r2, #16]!
   2281e:	f010 fe88 	bl	33532 <z_log_msg_static_create.constprop.0>
   22822:	46ad      	mov	sp, r5
   22824:	e7b1      	b.n	2278a <nct_process+0x36>
		err = -ECONNRESET;
   22826:	f06f 0467 	mvn.w	r4, #103	; 0x67
   2282a:	e7ae      	b.n	2278a <nct_process+0x36>
   2282c:	20010034 	.word	0x20010034
   22830:	0003ed44 	.word	0x0003ed44
   22834:	000365b8 	.word	0x000365b8
   22838:	0003ed6d 	.word	0x0003ed6d
   2283c:	0003ed90 	.word	0x0003ed90
   22840:	20010010 	.word	0x20010010
   22844:	0003ed59 	.word	0x0003ed59

00022848 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   22848:	4801      	ldr	r0, [pc, #4]	; (22850 <nct_keepalive_time_left+0x8>)
   2284a:	f00f badf 	b.w	31e0c <mqtt_keepalive_time_left>
   2284e:	bf00      	nop
   22850:	20010034 	.word	0x20010034

00022854 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   22854:	4b01      	ldr	r3, [pc, #4]	; (2285c <nct_socket_get+0x8>)
   22856:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   22858:	4770      	bx	lr
   2285a:	bf00      	nop
   2285c:	20010010 	.word	0x20010010

00022860 <send_to_modem>:

	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
   22860:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   22862:	4b08      	ldr	r3, [pc, #32]	; (22884 <send_to_modem+0x24>)
{
   22864:	4604      	mov	r4, r0
	if (agps_print_enabled) {
   22866:	781b      	ldrb	r3, [r3, #0]
{
   22868:	460e      	mov	r6, r1
   2286a:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   2286c:	b11b      	cbz	r3, 22876 <send_to_modem+0x16>
		agps_print(type, data);
   2286e:	4601      	mov	r1, r0
   22870:	b2d0      	uxtb	r0, r2
   22872:	f000 fb2b 	bl	22ecc <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   22876:	462a      	mov	r2, r5
   22878:	4631      	mov	r1, r6
   2287a:	4620      	mov	r0, r4
}
   2287c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   22880:	f005 b8ac 	b.w	279dc <nrf_modem_gnss_agps_write>
   22884:	2001284b 	.word	0x2001284b

00022888 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   22888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2288c:	4680      	mov	r8, r0
   2288e:	b0cb      	sub	sp, #300	; 0x12c
   22890:	af00      	add	r7, sp, #0
   22892:	6079      	str	r1, [r7, #4]
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   22894:	228c      	movs	r2, #140	; 0x8c
   22896:	2100      	movs	r1, #0
   22898:	f107 000c 	add.w	r0, r7, #12
   2289c:	f012 fbc6 	bl	3502c <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   228a0:	f1b8 0f00 	cmp.w	r8, #0
   228a4:	f000 8301 	beq.w	22eaa <nrf_cloud_agps_process+0x622>
   228a8:	687b      	ldr	r3, [r7, #4]
   228aa:	2b00      	cmp	r3, #0
   228ac:	f000 82fd 	beq.w	22eaa <nrf_cloud_agps_process+0x622>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_error_msg_decode(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   228b0:	f107 0308 	add.w	r3, r7, #8
   228b4:	4640      	mov	r0, r8
   228b6:	4a92      	ldr	r2, [pc, #584]	; (22b00 <nrf_cloud_agps_process+0x278>)
   228b8:	4992      	ldr	r1, [pc, #584]	; (22b04 <nrf_cloud_agps_process+0x27c>)
   228ba:	f7fe fdf7 	bl	214ac <nrf_cloud_error_msg_decode>
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   228be:	4603      	mov	r3, r0
   228c0:	b9b8      	cbnz	r0, 228f2 <nrf_cloud_agps_process+0x6a>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   228c2:	466c      	mov	r4, sp
   228c4:	b088      	sub	sp, #32
   228c6:	68b9      	ldr	r1, [r7, #8]
   228c8:	466a      	mov	r2, sp
   228ca:	488f      	ldr	r0, [pc, #572]	; (22b08 <nrf_cloud_agps_process+0x280>)
   228cc:	e9c2 0105 	strd	r0, r1, [r2, #20]
   228d0:	2103      	movs	r1, #3
   228d2:	f842 1f10 	str.w	r1, [r2, #16]!
   228d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   228da:	488c      	ldr	r0, [pc, #560]	; (22b0c <nrf_cloud_agps_process+0x284>)
   228dc:	f7eb ff9e 	bl	e81c <z_impl_z_log_msg_static_create>
		return -EFAULT;
   228e0:	f06f 060d 	mvn.w	r6, #13
   228e4:	46a5      	mov	sp, r4

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   228e6:	4630      	mov	r0, r6
   228e8:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   228ec:	46bd      	mov	sp, r7
   228ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   228f2:	333d      	adds	r3, #61	; 0x3d
   228f4:	f040 82dc 	bne.w	22eb0 <nrf_cloud_agps_process+0x628>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   228f8:	f898 5000 	ldrb.w	r5, [r8]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   228fc:	2d01      	cmp	r5, #1
   228fe:	d012      	beq.n	22926 <nrf_cloud_agps_process+0x9e>
		LOG_ERR("Cannot parse schema version: %d", version);
   22900:	466c      	mov	r4, sp
   22902:	b088      	sub	sp, #32
   22904:	466a      	mov	r2, sp
   22906:	4b82      	ldr	r3, [pc, #520]	; (22b10 <nrf_cloud_agps_process+0x288>)
   22908:	e9c2 3505 	strd	r3, r5, [r2, #20]
   2290c:	2303      	movs	r3, #3
   2290e:	f842 3f10 	str.w	r3, [r2, #16]!
   22912:	2300      	movs	r3, #0
   22914:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22918:	487c      	ldr	r0, [pc, #496]	; (22b0c <nrf_cloud_agps_process+0x284>)
   2291a:	f7eb ff7f 	bl	e81c <z_impl_z_log_msg_static_create>
		return -EBADMSG;
   2291e:	f06f 064c 	mvn.w	r6, #76	; 0x4c
   22922:	46a5      	mov	sp, r4
   22924:	e7df      	b.n	228e6 <nrf_cloud_agps_process+0x5e>
   22926:	f04f 32ff 	mov.w	r2, #4294967295
   2292a:	f04f 33ff 	mov.w	r3, #4294967295
   2292e:	4879      	ldr	r0, [pc, #484]	; (22b14 <nrf_cloud_agps_process+0x28c>)
   22930:	f006 fa4e 	bl	28dd0 <z_impl_k_sem_take>
	if (err) {
   22934:	4606      	mov	r6, r0
   22936:	2800      	cmp	r0, #0
   22938:	f000 82b3 	beq.w	22ea2 <nrf_cloud_agps_process+0x61a>
		LOG_ERR("A-GPS injection already active.");
   2293c:	4b76      	ldr	r3, [pc, #472]	; (22b18 <nrf_cloud_agps_process+0x290>)
   2293e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   22942:	2302      	movs	r3, #2
   22944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   22948:	2300      	movs	r3, #0
   2294a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2294e:	486f      	ldr	r0, [pc, #444]	; (22b0c <nrf_cloud_agps_process+0x284>)
   22950:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   22954:	f7eb ff62 	bl	e81c <z_impl_z_log_msg_static_create>
		return err;
   22958:	e7c5      	b.n	228e6 <nrf_cloud_agps_process+0x5e>
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2295a:	2203      	movs	r2, #3
		element_type = element->type;
   2295c:	4b6f      	ldr	r3, [pc, #444]	; (22b1c <nrf_cloud_agps_process+0x294>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2295e:	f894 a000 	ldrb.w	sl, [r4]
		element_type = element->type;
   22962:	f883 a000 	strb.w	sl, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   22966:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2296a:	3b01      	subs	r3, #1
   2296c:	b29b      	uxth	r3, r3
		elements_left_to_process =
   2296e:	f8a9 3000 	strh.w	r3, [r9]
	switch (element->type) {
   22972:	f10a 33ff 	add.w	r3, sl, #4294967295
   22976:	4618      	mov	r0, r3
   22978:	603b      	str	r3, [r7, #0]
   2297a:	2808      	cmp	r0, #8
   2297c:	f200 809b 	bhi.w	22ab6 <nrf_cloud_agps_process+0x22e>
   22980:	e8df f000 	tbb	[pc, r0]
   22984:	1815120c 	.word	0x1815120c
   22988:	851b4e18 	.word	0x851b4e18
   2298c:	88          	.byte	0x88
   2298d:	00          	.byte	0x00
		element->type = element_type;
   2298e:	4a63      	ldr	r2, [pc, #396]	; (22b1c <nrf_cloud_agps_process+0x294>)
		elements_left_to_process -= 1;
   22990:	3b01      	subs	r3, #1
		element->type = element_type;
   22992:	f892 a000 	ldrb.w	sl, [r2]
		elements_left_to_process -= 1;
   22996:	b29b      	uxth	r3, r3
	size_t len = 0;
   22998:	2200      	movs	r2, #0
   2299a:	e7e8      	b.n	2296e <nrf_cloud_agps_process+0xe6>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2299c:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_utc);
   2299e:	320e      	adds	r2, #14
	if (buf_len < len) {
   229a0:	4291      	cmp	r1, r2
   229a2:	d37a      	bcc.n	22a9a <nrf_cloud_agps_process+0x212>
		parsed_len += element_size;
   229a4:	4415      	add	r5, r2
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   229a6:	e01c      	b.n	229e2 <nrf_cloud_agps_process+0x15a>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   229a8:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   229aa:	323e      	adds	r2, #62	; 0x3e
	if (buf_len < len) {
   229ac:	e7f8      	b.n	229a0 <nrf_cloud_agps_process+0x118>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   229ae:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_almanac);
   229b0:	321f      	adds	r2, #31
	if (buf_len < len) {
   229b2:	e7f5      	b.n	229a0 <nrf_cloud_agps_process+0x118>
			(struct nrf_cloud_agps_nequick *)(buf + len);
   229b4:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_nequick);
   229b6:	3208      	adds	r2, #8
	if (buf_len < len) {
   229b8:	e7f2      	b.n	229a0 <nrf_cloud_agps_process+0x118>
		len += sizeof(struct nrf_cloud_agps_system_time) -
   229ba:	f102 0010 	add.w	r0, r2, #16
	if (buf_len < len) {
   229be:	4281      	cmp	r1, r0
			(struct nrf_cloud_agps_system_time *)(buf + len);
   229c0:	eb04 0302 	add.w	r3, r4, r2
	if (buf_len < len) {
   229c4:	d369      	bcc.n	22a9a <nrf_cloud_agps_process+0x212>
			memcpy(&sys_time, element.time_and_tow,
   229c6:	f107 010c 	add.w	r1, r7, #12
   229ca:	468c      	mov	ip, r1
		parsed_len += element_size;
   229cc:	4405      	add	r5, r0
			memcpy(&sys_time, element.time_and_tow,
   229ce:	6859      	ldr	r1, [r3, #4]
   229d0:	58a0      	ldr	r0, [r4, r2]
			element.time_and_tow = &sys_time;
   229d2:	f107 040c 	add.w	r4, r7, #12
			memcpy(&sys_time, element.time_and_tow,
   229d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   229da:	689b      	ldr	r3, [r3, #8]
   229dc:	ea43 030b 	orr.w	r3, r3, fp
   229e0:	617b      	str	r3, [r7, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   229e2:	f04f 32ff 	mov.w	r2, #4294967295
   229e6:	f04f 33ff 	mov.w	r3, #4294967295
   229ea:	484d      	ldr	r0, [pc, #308]	; (22b20 <nrf_cloud_agps_process+0x298>)
   229ec:	f005 ff4a 	bl	28884 <z_impl_k_mutex_lock>
   229f0:	2300      	movs	r3, #0
   229f2:	4a4c      	ldr	r2, [pc, #304]	; (22b24 <nrf_cloud_agps_process+0x29c>)
   229f4:	e8d2 1fef 	ldaex	r1, [r2]
   229f8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   229fc:	2800      	cmp	r0, #0
   229fe:	d1f9      	bne.n	229f4 <nrf_cloud_agps_process+0x16c>
	switch (agps_data->type) {
   22a00:	f10a 31ff 	add.w	r1, sl, #4294967295
   22a04:	2908      	cmp	r1, #8
   22a06:	f200 8238 	bhi.w	22e7a <nrf_cloud_agps_process+0x5f2>
   22a0a:	e8df f011 	tbh	[pc, r1, lsl #1]
   22a0e:	0058      	.short	0x0058
   22a10:	01400091 	.word	0x01400091
   22a14:	01a80188 	.word	0x01a80188
   22a18:	01c70236 	.word	0x01c70236
   22a1c:	022d01fe 	.word	0x022d01fe
		len += sizeof(struct nrf_cloud_agps_tow_element);
   22a20:	1d13      	adds	r3, r2, #4
	if (buf_len < len) {
   22a22:	4299      	cmp	r1, r3
			(struct nrf_cloud_agps_tow_element *)(buf + len);
   22a24:	eb04 0002 	add.w	r0, r4, r2
	if (buf_len < len) {
   22a28:	d337      	bcc.n	22a9a <nrf_cloud_agps_process+0x212>
		parsed_len += element_size;
   22a2a:	441d      	add	r5, r3
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   22a2c:	5ca3      	ldrb	r3, [r4, r2]
   22a2e:	f507 7c94 	add.w	ip, r7, #296	; 0x128
   22a32:	58a2      	ldr	r2, [r4, r2]
   22a34:	1e59      	subs	r1, r3, #1
   22a36:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   22a3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   22a3e:	601a      	str	r2, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   22a40:	78c3      	ldrb	r3, [r0, #3]
   22a42:	b913      	cbnz	r3, 22a4a <nrf_cloud_agps_process+0x1c2>
   22a44:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   22a48:	b11b      	cbz	r3, 22a52 <nrf_cloud_agps_process+0x1ca>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   22a4a:	2301      	movs	r3, #1
   22a4c:	408b      	lsls	r3, r1
   22a4e:	ea4b 0b03 	orr.w	fp, fp, r3
	while (parsed_len < buf_len) {
   22a52:	687b      	ldr	r3, [r7, #4]
   22a54:	42ab      	cmp	r3, r5
   22a56:	f240 8116 	bls.w	22c86 <nrf_cloud_agps_process+0x3fe>
			get_next_agps_element(&element, &buf[parsed_len], buf_len - parsed_len);
   22a5a:	687b      	ldr	r3, [r7, #4]
   22a5c:	eb08 0405 	add.w	r4, r8, r5
   22a60:	1b59      	subs	r1, r3, r5
	if (elements_left_to_process == 0) {
   22a62:	f8b9 3000 	ldrh.w	r3, [r9]
   22a66:	2b00      	cmp	r3, #0
   22a68:	d191      	bne.n	2298e <nrf_cloud_agps_process+0x106>
		if (buf_len < NRF_CLOUD_AGPS_BIN_TYPE_SIZE + NRF_CLOUD_AGPS_BIN_COUNT_SIZE) {
   22a6a:	2902      	cmp	r1, #2
   22a6c:	f63f af75 	bhi.w	2295a <nrf_cloud_agps_process+0xd2>
			LOG_ERR("Unexpected end of data");
   22a70:	4a2d      	ldr	r2, [pc, #180]	; (22b28 <nrf_cloud_agps_process+0x2a0>)
   22a72:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
   22a76:	2202      	movs	r2, #2
   22a78:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   22a7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22a80:	4822      	ldr	r0, [pc, #136]	; (22b0c <nrf_cloud_agps_process+0x284>)
   22a82:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   22a86:	f7eb fec9 	bl	e81c <z_impl_z_log_msg_static_create>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22a8a:	2400      	movs	r4, #0
   22a8c:	e0fa      	b.n	22c84 <nrf_cloud_agps_process+0x3fc>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   22a8e:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_location);
   22a90:	320f      	adds	r2, #15
	if (buf_len < len) {
   22a92:	e785      	b.n	229a0 <nrf_cloud_agps_process+0x118>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   22a94:	4414      	add	r4, r2
		len += sizeof(struct nrf_cloud_agps_integrity);
   22a96:	3204      	adds	r2, #4
   22a98:	e782      	b.n	229a0 <nrf_cloud_agps_process+0x118>
		LOG_ERR("Unexpected end of data");
   22a9a:	4b23      	ldr	r3, [pc, #140]	; (22b28 <nrf_cloud_agps_process+0x2a0>)
   22a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   22aa0:	2302      	movs	r3, #2
   22aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   22aa6:	2300      	movs	r3, #0
   22aa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22aac:	4817      	ldr	r0, [pc, #92]	; (22b0c <nrf_cloud_agps_process+0x284>)
   22aae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   22ab2:	f7eb feb3 	bl	e81c <z_impl_z_log_msg_static_create>
		elements_left_to_process = 0;
   22ab6:	2300      	movs	r3, #0
   22ab8:	f8a9 3000 	strh.w	r3, [r9]
		if (element_size == 0) {
   22abc:	e7e5      	b.n	22a8a <nrf_cloud_agps_process+0x202>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   22abe:	4a1b      	ldr	r2, [pc, #108]	; (22b2c <nrf_cloud_agps_process+0x2a4>)
   22ac0:	6893      	ldr	r3, [r2, #8]
   22ac2:	f043 0301 	orr.w	r3, r3, #1
   22ac6:	6093      	str	r3, [r2, #8]
		return send_to_modem(&utc, sizeof(utc),
   22ac8:	2201      	movs	r2, #1
	dst->a1		= src->utc->a1;
   22aca:	6823      	ldr	r3, [r4, #0]
   22acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	dst->a0		= src->utc->a0;
   22ad0:	6863      	ldr	r3, [r4, #4]
   22ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   22ad6:	7a23      	ldrb	r3, [r4, #8]
   22ad8:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   22adc:	7a63      	ldrb	r3, [r4, #9]
   22ade:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	dst->delta_tls	= src->utc->delta_tls;
   22ae2:	7aa3      	ldrb	r3, [r4, #10]
   22ae4:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	dst->wn_lsf	= src->utc->wn_lsf;
   22ae8:	7ae3      	ldrb	r3, [r4, #11]
   22aea:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   22aee:	7b23      	ldrb	r3, [r4, #12]
   22af0:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   22af4:	7b63      	ldrb	r3, [r4, #13]
   22af6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		return send_to_modem(&location, sizeof(location),
   22afa:	2110      	movs	r1, #16
   22afc:	e0a7      	b.n	22c4e <nrf_cloud_agps_process+0x3c6>
   22afe:	bf00      	nop
   22b00:	00038aa7 	.word	0x00038aa7
   22b04:	0003edd1 	.word	0x0003edd1
   22b08:	0003edd6 	.word	0x0003edd6
   22b0c:	00036570 	.word	0x00036570
   22b10:	0003edf9 	.word	0x0003edf9
   22b14:	2000cf80 	.word	0x2000cf80
   22b18:	0003ee19 	.word	0x0003ee19
   22b1c:	2001284a 	.word	0x2001284a
   22b20:	2000cf08 	.word	0x2000cf08
   22b24:	20010b64 	.word	0x20010b64
   22b28:	0003ee39 	.word	0x0003ee39
   22b2c:	20010b68 	.word	0x20010b68
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   22b30:	2301      	movs	r3, #1
   22b32:	7822      	ldrb	r2, [r4, #0]
   22b34:	49c7      	ldr	r1, [pc, #796]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
   22b36:	3a01      	subs	r2, #1
   22b38:	4093      	lsls	r3, r2
   22b3a:	680a      	ldr	r2, [r1, #0]
   22b3c:	4313      	orrs	r3, r2
   22b3e:	600b      	str	r3, [r1, #0]
	dst->sv_id	= src->ephemeris->sv_id;
   22b40:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   22b42:	2148      	movs	r1, #72	; 0x48
	dst->sv_id	= src->ephemeris->sv_id;
   22b44:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   22b48:	7863      	ldrb	r3, [r4, #1]
   22b4a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   22b4e:	78e2      	ldrb	r2, [r4, #3]
   22b50:	78a3      	ldrb	r3, [r4, #2]
   22b52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22b56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   22b5a:	7962      	ldrb	r2, [r4, #5]
   22b5c:	7923      	ldrb	r3, [r4, #4]
   22b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22b62:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   22b66:	79a3      	ldrb	r3, [r4, #6]
   22b68:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   22b6c:	7a22      	ldrb	r2, [r4, #8]
   22b6e:	79e3      	ldrb	r3, [r4, #7]
   22b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22b74:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   22b78:	f8d4 3009 	ldr.w	r3, [r4, #9]
   22b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   22b80:	7b63      	ldrb	r3, [r4, #13]
   22b82:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   22b86:	7ba3      	ldrb	r3, [r4, #14]
   22b88:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   22b8c:	7be3      	ldrb	r3, [r4, #15]
   22b8e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   22b92:	7c23      	ldrb	r3, [r4, #16]
   22b94:	7c62      	ldrb	r2, [r4, #17]
   22b96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22b9a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   22b9e:	f8d4 3012 	ldr.w	r3, [r4, #18]
   22ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   22ba6:	7da3      	ldrb	r3, [r4, #22]
   22ba8:	7de2      	ldrb	r2, [r4, #23]
   22baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22bae:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   22bb2:	69a3      	ldr	r3, [r4, #24]
   22bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   22bb8:	69e3      	ldr	r3, [r4, #28]
   22bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   22bbe:	6a23      	ldr	r3, [r4, #32]
   22bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   22bc4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   22bc8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   22bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22bd0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   22bd4:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   22bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   22bdc:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   22be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   22be4:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   22be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   22bec:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   22bf0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   22bf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22bf8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   22bfc:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   22c00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   22c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22c08:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   22c0c:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   22c10:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   22c14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22c18:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   22c1c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   22c20:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22c28:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   22c2c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   22c30:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   22c34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22c38:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   22c3c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   22c40:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   22c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   22c48:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   22c4a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		return send_to_modem(&location, sizeof(location),
   22c4e:	f107 0098 	add.w	r0, r7, #152	; 0x98
		return send_to_modem(agps_data->integrity,
   22c52:	f7ff fe05 	bl	22860 <send_to_modem>
   22c56:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   22c58:	487f      	ldr	r0, [pc, #508]	; (22e58 <nrf_cloud_agps_process+0x5d0>)
   22c5a:	f005 fee3 	bl	28a24 <z_impl_k_mutex_unlock>
		if (err) {
   22c5e:	2c00      	cmp	r4, #0
   22c60:	f43f aef7 	beq.w	22a52 <nrf_cloud_agps_process+0x1ca>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   22c64:	466d      	mov	r5, sp
   22c66:	b088      	sub	sp, #32
   22c68:	466a      	mov	r2, sp
   22c6a:	4b7c      	ldr	r3, [pc, #496]	; (22e5c <nrf_cloud_agps_process+0x5d4>)
   22c6c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   22c70:	2303      	movs	r3, #3
   22c72:	f842 3f10 	str.w	r3, [r2, #16]!
   22c76:	2300      	movs	r3, #0
   22c78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22c7c:	4878      	ldr	r0, [pc, #480]	; (22e60 <nrf_cloud_agps_process+0x5d8>)
   22c7e:	f7eb fdcd 	bl	e81c <z_impl_z_log_msg_static_create>
   22c82:	46ad      	mov	sp, r5
	uint32_t sv_mask = 0;
   22c84:	4626      	mov	r6, r4
	z_impl_k_sem_give(sem);
   22c86:	4877      	ldr	r0, [pc, #476]	; (22e64 <nrf_cloud_agps_process+0x5dc>)
   22c88:	f006 f85e 	bl	28d48 <z_impl_k_sem_give>
}
   22c8c:	e62b      	b.n	228e6 <nrf_cloud_agps_process+0x5e>
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   22c8e:	2301      	movs	r3, #1
   22c90:	7822      	ldrb	r2, [r4, #0]
   22c92:	4970      	ldr	r1, [pc, #448]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
   22c94:	3a01      	subs	r2, #1
   22c96:	4093      	lsls	r3, r2
   22c98:	684a      	ldr	r2, [r1, #4]
   22c9a:	4313      	orrs	r3, r2
   22c9c:	604b      	str	r3, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   22c9e:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&almanac, sizeof(almanac),
   22ca0:	2120      	movs	r1, #32
	dst->sv_id	= src->almanac->sv_id;
   22ca2:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	dst->wn		= src->almanac->wn;
   22ca6:	7863      	ldrb	r3, [r4, #1]
   22ca8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   22cac:	78a3      	ldrb	r3, [r4, #2]
   22cae:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   22cb2:	78e3      	ldrb	r3, [r4, #3]
   22cb4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	dst->e		= src->almanac->e;
   22cb8:	7962      	ldrb	r2, [r4, #5]
   22cba:	7923      	ldrb	r3, [r4, #4]
   22cbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22cc0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   22cc4:	79e2      	ldrb	r2, [r4, #7]
   22cc6:	79a3      	ldrb	r3, [r4, #6]
   22cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22ccc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   22cd0:	7a62      	ldrb	r2, [r4, #9]
   22cd2:	7a23      	ldrb	r3, [r4, #8]
   22cd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22cd8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   22cdc:	7aa3      	ldrb	r3, [r4, #10]
   22cde:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   22ce2:	f8d4 300b 	ldr.w	r3, [r4, #11]
   22ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   22cea:	f8d4 300f 	ldr.w	r3, [r4, #15]
   22cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	dst->w		= src->almanac->w;
   22cf2:	f8d4 3013 	ldr.w	r3, [r4, #19]
   22cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   22cfa:	f8d4 3017 	ldr.w	r3, [r4, #23]
   22cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   22d02:	7f22      	ldrb	r2, [r4, #28]
   22d04:	7ee3      	ldrb	r3, [r4, #27]
   22d06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22d0a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   22d0e:	7fa2      	ldrb	r2, [r4, #30]
   22d10:	7f63      	ldrb	r3, [r4, #29]
   22d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22d16:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   22d1a:	2203      	movs	r2, #3
   22d1c:	e797      	b.n	22c4e <nrf_cloud_agps_process+0x3c6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   22d1e:	4a4d      	ldr	r2, [pc, #308]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
   22d20:	6893      	ldr	r3, [r2, #8]
   22d22:	f043 0302 	orr.w	r3, r3, #2
   22d26:	6093      	str	r3, [r2, #8]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   22d28:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   22d2a:	7823      	ldrb	r3, [r4, #0]
   22d2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   22d30:	7863      	ldrb	r3, [r4, #1]
   22d32:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   22d36:	78a3      	ldrb	r3, [r4, #2]
   22d38:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   22d3c:	78e3      	ldrb	r3, [r4, #3]
   22d3e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   22d42:	7923      	ldrb	r3, [r4, #4]
   22d44:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   22d48:	7963      	ldrb	r3, [r4, #5]
   22d4a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   22d4e:	79a3      	ldrb	r3, [r4, #6]
   22d50:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   22d54:	79e3      	ldrb	r3, [r4, #7]
   22d56:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		return send_to_modem(&nequick, sizeof(nequick),
   22d5a:	2108      	movs	r1, #8
   22d5c:	e777      	b.n	22c4e <nrf_cloud_agps_process+0x3c6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST;
   22d5e:	4a3d      	ldr	r2, [pc, #244]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
   22d60:	6893      	ldr	r3, [r2, #8]
   22d62:	f043 0304 	orr.w	r3, r3, #4
   22d66:	6093      	str	r3, [r2, #8]
	dst->ai0 = src->ion_correction.nequick->ai0;
   22d68:	7862      	ldrb	r2, [r4, #1]
   22d6a:	7823      	ldrb	r3, [r4, #0]
   22d6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22d70:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	dst->ai1 = src->ion_correction.nequick->ai1;
   22d74:	78e2      	ldrb	r2, [r4, #3]
   22d76:	78a3      	ldrb	r3, [r4, #2]
   22d78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22d7c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	dst->ai2 = src->ion_correction.nequick->ai2;
   22d80:	7962      	ldrb	r2, [r4, #5]
   22d82:	7923      	ldrb	r3, [r4, #4]
   22d84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22d88:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	dst->storm_cond = src->ion_correction.nequick->storm_cond;
   22d8c:	79a3      	ldrb	r3, [r4, #6]
		return send_to_modem(&nequick, sizeof(nequick),
   22d8e:	2205      	movs	r2, #5
	dst->storm_cond = src->ion_correction.nequick->storm_cond;
   22d90:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	dst->storm_valid = src->ion_correction.nequick->storm_valid;
   22d94:	79e3      	ldrb	r3, [r4, #7]
   22d96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		return send_to_modem(&nequick, sizeof(nequick),
   22d9a:	e7de      	b.n	22d5a <nrf_cloud_agps_process+0x4d2>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   22d9c:	4a2d      	ldr	r2, [pc, #180]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
   22d9e:	6893      	ldr	r3, [r2, #8]
   22da0:	f043 0308 	orr.w	r3, r3, #8
   22da4:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   22da6:	7862      	ldrb	r2, [r4, #1]
   22da8:	7823      	ldrb	r3, [r4, #0]
   22daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22dae:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   22db2:	f8d4 3002 	ldr.w	r3, [r4, #2]
   22db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   22dba:	79a3      	ldrb	r3, [r4, #6]
   22dbc:	79e2      	ldrb	r2, [r4, #7]
   22dbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22dc2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   22dc6:	68a1      	ldr	r1, [r4, #8]
   22dc8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
	if (src->time_and_tow->sv_mask == 0U) {
   22dcc:	b939      	cbnz	r1, 22dde <nrf_cloud_agps_process+0x556>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   22dce:	2280      	movs	r2, #128	; 0x80
   22dd0:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
   22dd4:	f012 f92a 	bl	3502c <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   22dd8:	2206      	movs	r2, #6
   22dda:	2190      	movs	r1, #144	; 0x90
   22ddc:	e737      	b.n	22c4e <nrf_cloud_agps_process+0x3c6>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22dde:	2300      	movs	r3, #0
   22de0:	f107 0298 	add.w	r2, r7, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   22de4:	f104 000f 	add.w	r0, r4, #15
   22de8:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22dec:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   22dee:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   22df0:	1c99      	adds	r1, r3, #2
   22df2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   22df6:	f891 c005 	ldrb.w	ip, [r1, #5]
   22dfa:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22dfc:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   22dfe:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22e02:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   22e04:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   22e06:	d1ef      	bne.n	22de8 <nrf_cloud_agps_process+0x560>
   22e08:	e7e6      	b.n	22dd8 <nrf_cloud_agps_process+0x550>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   22e0a:	4a12      	ldr	r2, [pc, #72]	; (22e54 <nrf_cloud_agps_process+0x5cc>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   22e0c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   22e10:	6893      	ldr	r3, [r2, #8]
   22e12:	f043 0310 	orr.w	r3, r3, #16
   22e16:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   22e18:	6823      	ldr	r3, [r4, #0]
   22e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   22e1e:	6863      	ldr	r3, [r4, #4]
   22e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   22e24:	7a62      	ldrb	r2, [r4, #9]
   22e26:	7a23      	ldrb	r3, [r4, #8]
   22e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22e2c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   22e30:	7aa3      	ldrb	r3, [r4, #10]
		return send_to_modem(&location, sizeof(location),
   22e32:	2207      	movs	r2, #7
	dst->unc_semimajor	= src->location->unc_semimajor;
   22e34:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   22e38:	7ae3      	ldrb	r3, [r4, #11]
   22e3a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   22e3e:	7b23      	ldrb	r3, [r4, #12]
   22e40:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   22e44:	7b63      	ldrb	r3, [r4, #13]
   22e46:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   22e4a:	7ba3      	ldrb	r3, [r4, #14]
   22e4c:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		return send_to_modem(&location, sizeof(location),
   22e50:	e653      	b.n	22afa <nrf_cloud_agps_process+0x272>
   22e52:	bf00      	nop
   22e54:	20010b68 	.word	0x20010b68
   22e58:	2000cf08 	.word	0x2000cf08
   22e5c:	0003ee6b 	.word	0x0003ee6b
   22e60:	00036570 	.word	0x00036570
   22e64:	2000cf80 	.word	0x2000cf80
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   22e68:	4a13      	ldr	r2, [pc, #76]	; (22eb8 <nrf_cloud_agps_process+0x630>)
		return send_to_modem(agps_data->integrity,
   22e6a:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   22e6c:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   22e6e:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   22e70:	f043 0320 	orr.w	r3, r3, #32
   22e74:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   22e76:	2208      	movs	r2, #8
   22e78:	e6eb      	b.n	22c52 <nrf_cloud_agps_process+0x3ca>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   22e7a:	466c      	mov	r4, sp
   22e7c:	b088      	sub	sp, #32
   22e7e:	466a      	mov	r2, sp
   22e80:	4b0e      	ldr	r3, [pc, #56]	; (22ebc <nrf_cloud_agps_process+0x634>)
	switch (agps_data->type) {
   22e82:	e9c2 3a05 	strd	r3, sl, [r2, #20]
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   22e86:	2303      	movs	r3, #3
   22e88:	f842 3f10 	str.w	r3, [r2, #16]!
   22e8c:	2300      	movs	r3, #0
   22e8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   22e92:	480b      	ldr	r0, [pc, #44]	; (22ec0 <nrf_cloud_agps_process+0x638>)
   22e94:	f7eb fcc2 	bl	e81c <z_impl_z_log_msg_static_create>
   22e98:	46a5      	mov	sp, r4
	return z_impl_k_mutex_unlock(mutex);
   22e9a:	480a      	ldr	r0, [pc, #40]	; (22ec4 <nrf_cloud_agps_process+0x63c>)
   22e9c:	f005 fdc2 	bl	28a24 <z_impl_k_mutex_unlock>
		if (err) {
   22ea0:	e5d7      	b.n	22a52 <nrf_cloud_agps_process+0x1ca>
	uint32_t sv_mask = 0;
   22ea2:	4683      	mov	fp, r0
	if (elements_left_to_process == 0) {
   22ea4:	f8df 9020 	ldr.w	r9, [pc, #32]	; 22ec8 <nrf_cloud_agps_process+0x640>
   22ea8:	e5d3      	b.n	22a52 <nrf_cloud_agps_process+0x1ca>
		return -EINVAL;
   22eaa:	f06f 0615 	mvn.w	r6, #21
   22eae:	e51a      	b.n	228e6 <nrf_cloud_agps_process+0x5e>
		return -ENOMSG;
   22eb0:	f06f 0622 	mvn.w	r6, #34	; 0x22
   22eb4:	e517      	b.n	228e6 <nrf_cloud_agps_process+0x5e>
   22eb6:	bf00      	nop
   22eb8:	20010b68 	.word	0x20010b68
   22ebc:	0003ee50 	.word	0x0003ee50
   22ec0:	00036570 	.word	0x00036570
   22ec4:	2000cf08 	.word	0x2000cf08
   22ec8:	2001104e 	.word	0x2001104e

00022ecc <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   22ecc:	3801      	subs	r0, #1
{
   22ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ed2:	460c      	mov	r4, r1
	switch (type) {
   22ed4:	2807      	cmp	r0, #7
   22ed6:	f200 8215 	bhi.w	23304 <agps_print+0x438>
   22eda:	e8df f010 	tbh	[pc, r0, lsl #1]
   22ede:	0008      	.short	0x0008
   22ee0:	00a50030 	.word	0x00a50030
   22ee4:	010d00e3 	.word	0x010d00e3
   22ee8:	01540126 	.word	0x01540126
   22eec:	020d      	.short	0x020d
	printk("utc:\n");
   22eee:	48b7      	ldr	r0, [pc, #732]	; (231cc <agps_print+0x300>)
   22ef0:	f00b fb53 	bl	2e59a <printk>
	printk("\ta1: %d\n", data->a1);
   22ef4:	6821      	ldr	r1, [r4, #0]
   22ef6:	48b6      	ldr	r0, [pc, #728]	; (231d0 <agps_print+0x304>)
   22ef8:	f00b fb4f 	bl	2e59a <printk>
	printk("\ta0: %d\n", data->a0);
   22efc:	6861      	ldr	r1, [r4, #4]
   22efe:	48b5      	ldr	r0, [pc, #724]	; (231d4 <agps_print+0x308>)
   22f00:	f00b fb4b 	bl	2e59a <printk>
	printk("\ttot: %d\n", data->tot);
   22f04:	7a21      	ldrb	r1, [r4, #8]
   22f06:	48b4      	ldr	r0, [pc, #720]	; (231d8 <agps_print+0x30c>)
   22f08:	f00b fb47 	bl	2e59a <printk>
	printk("\twn_t: %d\n", data->wn_t);
   22f0c:	7a61      	ldrb	r1, [r4, #9]
   22f0e:	48b3      	ldr	r0, [pc, #716]	; (231dc <agps_print+0x310>)
   22f10:	f00b fb43 	bl	2e59a <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   22f14:	f994 100a 	ldrsb.w	r1, [r4, #10]
   22f18:	48b1      	ldr	r0, [pc, #708]	; (231e0 <agps_print+0x314>)
   22f1a:	f00b fb3e 	bl	2e59a <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   22f1e:	7ae1      	ldrb	r1, [r4, #11]
   22f20:	48b0      	ldr	r0, [pc, #704]	; (231e4 <agps_print+0x318>)
   22f22:	f00b fb3a 	bl	2e59a <printk>
	printk("\tdn: %d\n", data->dn);
   22f26:	f994 100c 	ldrsb.w	r1, [r4, #12]
   22f2a:	48af      	ldr	r0, [pc, #700]	; (231e8 <agps_print+0x31c>)
   22f2c:	f00b fb35 	bl	2e59a <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   22f30:	f994 100d 	ldrsb.w	r1, [r4, #13]
   22f34:	48ad      	ldr	r0, [pc, #692]	; (231ec <agps_print+0x320>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   22f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   22f3a:	f00b bb2e 	b.w	2e59a <printk>
	printk("ephemeris:\n");
   22f3e:	48ac      	ldr	r0, [pc, #688]	; (231f0 <agps_print+0x324>)
   22f40:	f00b fb2b 	bl	2e59a <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   22f44:	7821      	ldrb	r1, [r4, #0]
   22f46:	48ab      	ldr	r0, [pc, #684]	; (231f4 <agps_print+0x328>)
   22f48:	f00b fb27 	bl	2e59a <printk>
	printk("\thealth: %d\n", data->health);
   22f4c:	7861      	ldrb	r1, [r4, #1]
   22f4e:	48aa      	ldr	r0, [pc, #680]	; (231f8 <agps_print+0x32c>)
   22f50:	f00b fb23 	bl	2e59a <printk>
	printk("\tiodc: %d\n", data->iodc);
   22f54:	8861      	ldrh	r1, [r4, #2]
   22f56:	48a9      	ldr	r0, [pc, #676]	; (231fc <agps_print+0x330>)
   22f58:	f00b fb1f 	bl	2e59a <printk>
	printk("\ttoc: %d\n", data->toc);
   22f5c:	88a1      	ldrh	r1, [r4, #4]
   22f5e:	48a8      	ldr	r0, [pc, #672]	; (23200 <agps_print+0x334>)
   22f60:	f00b fb1b 	bl	2e59a <printk>
	printk("\taf2: %d\n", data->af2);
   22f64:	f994 1006 	ldrsb.w	r1, [r4, #6]
   22f68:	48a6      	ldr	r0, [pc, #664]	; (23204 <agps_print+0x338>)
   22f6a:	f00b fb16 	bl	2e59a <printk>
	printk("\taf1: %d\n", data->af1);
   22f6e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   22f72:	48a5      	ldr	r0, [pc, #660]	; (23208 <agps_print+0x33c>)
   22f74:	f00b fb11 	bl	2e59a <printk>
	printk("\taf0: %d\n", data->af0);
   22f78:	68e1      	ldr	r1, [r4, #12]
   22f7a:	48a4      	ldr	r0, [pc, #656]	; (2320c <agps_print+0x340>)
   22f7c:	f00b fb0d 	bl	2e59a <printk>
	printk("\ttgd: %d\n", data->tgd);
   22f80:	f994 1010 	ldrsb.w	r1, [r4, #16]
   22f84:	48a2      	ldr	r0, [pc, #648]	; (23210 <agps_print+0x344>)
   22f86:	f00b fb08 	bl	2e59a <printk>
	printk("\tura: %d\n", data->ura);
   22f8a:	7c61      	ldrb	r1, [r4, #17]
   22f8c:	48a1      	ldr	r0, [pc, #644]	; (23214 <agps_print+0x348>)
   22f8e:	f00b fb04 	bl	2e59a <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   22f92:	7ca1      	ldrb	r1, [r4, #18]
   22f94:	48a0      	ldr	r0, [pc, #640]	; (23218 <agps_print+0x34c>)
   22f96:	f00b fb00 	bl	2e59a <printk>
	printk("\ttoe: %d\n", data->toe);
   22f9a:	8aa1      	ldrh	r1, [r4, #20]
   22f9c:	489f      	ldr	r0, [pc, #636]	; (2321c <agps_print+0x350>)
   22f9e:	f00b fafc 	bl	2e59a <printk>
	printk("\tw: %d\n", data->w);
   22fa2:	69a1      	ldr	r1, [r4, #24]
   22fa4:	489e      	ldr	r0, [pc, #632]	; (23220 <agps_print+0x354>)
   22fa6:	f00b faf8 	bl	2e59a <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   22faa:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   22fae:	489d      	ldr	r0, [pc, #628]	; (23224 <agps_print+0x358>)
   22fb0:	f00b faf3 	bl	2e59a <printk>
	printk("\tm0: %d\n", data->m0);
   22fb4:	6a21      	ldr	r1, [r4, #32]
   22fb6:	489c      	ldr	r0, [pc, #624]	; (23228 <agps_print+0x35c>)
   22fb8:	f00b faef 	bl	2e59a <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   22fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22fbe:	489b      	ldr	r0, [pc, #620]	; (2322c <agps_print+0x360>)
   22fc0:	f00b faeb 	bl	2e59a <printk>
	printk("\te: %d\n", data->e);
   22fc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22fc6:	489a      	ldr	r0, [pc, #616]	; (23230 <agps_print+0x364>)
   22fc8:	f00b fae7 	bl	2e59a <printk>
	printk("\tidot: %d\n", data->idot);
   22fcc:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   22fd0:	4898      	ldr	r0, [pc, #608]	; (23234 <agps_print+0x368>)
   22fd2:	f00b fae2 	bl	2e59a <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   22fd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22fd8:	4897      	ldr	r0, [pc, #604]	; (23238 <agps_print+0x36c>)
   22fda:	f00b fade 	bl	2e59a <printk>
	printk("\ti0: %d\n", data->i0);
   22fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22fe0:	4896      	ldr	r0, [pc, #600]	; (2323c <agps_print+0x370>)
   22fe2:	f00b fada 	bl	2e59a <printk>
	printk("\tomega0: %d\n", data->omega0);
   22fe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   22fe8:	4895      	ldr	r0, [pc, #596]	; (23240 <agps_print+0x374>)
   22fea:	f00b fad6 	bl	2e59a <printk>
	printk("\tcrs: %d\n", data->crs);
   22fee:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   22ff2:	4894      	ldr	r0, [pc, #592]	; (23244 <agps_print+0x378>)
   22ff4:	f00b fad1 	bl	2e59a <printk>
	printk("\tcis: %d\n", data->cis);
   22ff8:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   22ffc:	4892      	ldr	r0, [pc, #584]	; (23248 <agps_print+0x37c>)
   22ffe:	f00b facc 	bl	2e59a <printk>
	printk("\tcus: %d\n", data->cus);
   23002:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   23006:	4891      	ldr	r0, [pc, #580]	; (2324c <agps_print+0x380>)
   23008:	f00b fac7 	bl	2e59a <printk>
	printk("\tcrc: %d\n", data->crc);
   2300c:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   23010:	488f      	ldr	r0, [pc, #572]	; (23250 <agps_print+0x384>)
   23012:	f00b fac2 	bl	2e59a <printk>
	printk("\tcic: %d\n", data->cic);
   23016:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2301a:	488e      	ldr	r0, [pc, #568]	; (23254 <agps_print+0x388>)
   2301c:	f00b fabd 	bl	2e59a <printk>
	printk("\tcuc: %d\n", data->cuc);
   23020:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   23024:	488c      	ldr	r0, [pc, #560]	; (23258 <agps_print+0x38c>)
   23026:	e786      	b.n	22f36 <agps_print+0x6a>
	printk("almanac\n");
   23028:	488c      	ldr	r0, [pc, #560]	; (2325c <agps_print+0x390>)
   2302a:	f00b fab6 	bl	2e59a <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2302e:	7821      	ldrb	r1, [r4, #0]
   23030:	4870      	ldr	r0, [pc, #448]	; (231f4 <agps_print+0x328>)
   23032:	f00b fab2 	bl	2e59a <printk>
	printk("\twn: %d\n", data->wn);
   23036:	7861      	ldrb	r1, [r4, #1]
   23038:	4889      	ldr	r0, [pc, #548]	; (23260 <agps_print+0x394>)
   2303a:	f00b faae 	bl	2e59a <printk>
	printk("\ttoa: %d\n", data->toa);
   2303e:	78a1      	ldrb	r1, [r4, #2]
   23040:	4888      	ldr	r0, [pc, #544]	; (23264 <agps_print+0x398>)
   23042:	f00b faaa 	bl	2e59a <printk>
	printk("\tioda: %d\n", data->ioda);
   23046:	78e1      	ldrb	r1, [r4, #3]
   23048:	4887      	ldr	r0, [pc, #540]	; (23268 <agps_print+0x39c>)
   2304a:	f00b faa6 	bl	2e59a <printk>
	printk("\te: %d\n", data->e);
   2304e:	88a1      	ldrh	r1, [r4, #4]
   23050:	4877      	ldr	r0, [pc, #476]	; (23230 <agps_print+0x364>)
   23052:	f00b faa2 	bl	2e59a <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   23056:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2305a:	4884      	ldr	r0, [pc, #528]	; (2326c <agps_print+0x3a0>)
   2305c:	f00b fa9d 	bl	2e59a <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   23060:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   23064:	4871      	ldr	r0, [pc, #452]	; (2322c <agps_print+0x360>)
   23066:	f00b fa98 	bl	2e59a <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2306a:	7aa1      	ldrb	r1, [r4, #10]
   2306c:	4880      	ldr	r0, [pc, #512]	; (23270 <agps_print+0x3a4>)
   2306e:	f00b fa94 	bl	2e59a <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   23072:	68e1      	ldr	r1, [r4, #12]
   23074:	4870      	ldr	r0, [pc, #448]	; (23238 <agps_print+0x36c>)
   23076:	f00b fa90 	bl	2e59a <printk>
	printk("\tomega0: %d\n", data->omega0);
   2307a:	6921      	ldr	r1, [r4, #16]
   2307c:	4870      	ldr	r0, [pc, #448]	; (23240 <agps_print+0x374>)
   2307e:	f00b fa8c 	bl	2e59a <printk>
	printk("\tw: %d\n", data->w);
   23082:	6961      	ldr	r1, [r4, #20]
   23084:	4866      	ldr	r0, [pc, #408]	; (23220 <agps_print+0x354>)
   23086:	f00b fa88 	bl	2e59a <printk>
	printk("\tm0: %d\n", data->m0);
   2308a:	69a1      	ldr	r1, [r4, #24]
   2308c:	4866      	ldr	r0, [pc, #408]	; (23228 <agps_print+0x35c>)
   2308e:	f00b fa84 	bl	2e59a <printk>
	printk("\taf0: %d\n", data->af0);
   23092:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   23096:	485d      	ldr	r0, [pc, #372]	; (2320c <agps_print+0x340>)
   23098:	f00b fa7f 	bl	2e59a <printk>
	printk("\taf1: %d\n", data->af1);
   2309c:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   230a0:	4859      	ldr	r0, [pc, #356]	; (23208 <agps_print+0x33c>)
   230a2:	e748      	b.n	22f36 <agps_print+0x6a>
	printk("klobuchar\n");
   230a4:	4873      	ldr	r0, [pc, #460]	; (23274 <agps_print+0x3a8>)
   230a6:	f00b fa78 	bl	2e59a <printk>
	printk("\talpha0: %d\n", data->alpha0);
   230aa:	f994 1000 	ldrsb.w	r1, [r4]
   230ae:	4872      	ldr	r0, [pc, #456]	; (23278 <agps_print+0x3ac>)
   230b0:	f00b fa73 	bl	2e59a <printk>
	printk("\talpha1: %d\n", data->alpha1);
   230b4:	f994 1001 	ldrsb.w	r1, [r4, #1]
   230b8:	4870      	ldr	r0, [pc, #448]	; (2327c <agps_print+0x3b0>)
   230ba:	f00b fa6e 	bl	2e59a <printk>
	printk("\talpha2: %d\n", data->alpha2);
   230be:	f994 1002 	ldrsb.w	r1, [r4, #2]
   230c2:	486f      	ldr	r0, [pc, #444]	; (23280 <agps_print+0x3b4>)
   230c4:	f00b fa69 	bl	2e59a <printk>
	printk("\talpha3: %d\n", data->alpha3);
   230c8:	f994 1003 	ldrsb.w	r1, [r4, #3]
   230cc:	486d      	ldr	r0, [pc, #436]	; (23284 <agps_print+0x3b8>)
   230ce:	f00b fa64 	bl	2e59a <printk>
	printk("\tbeta0: %d\n", data->beta0);
   230d2:	f994 1004 	ldrsb.w	r1, [r4, #4]
   230d6:	486c      	ldr	r0, [pc, #432]	; (23288 <agps_print+0x3bc>)
   230d8:	f00b fa5f 	bl	2e59a <printk>
	printk("\tbeta1: %d\n", data->beta1);
   230dc:	f994 1005 	ldrsb.w	r1, [r4, #5]
   230e0:	486a      	ldr	r0, [pc, #424]	; (2328c <agps_print+0x3c0>)
   230e2:	f00b fa5a 	bl	2e59a <printk>
	printk("\tbeta2: %d\n", data->beta2);
   230e6:	f994 1006 	ldrsb.w	r1, [r4, #6]
   230ea:	4869      	ldr	r0, [pc, #420]	; (23290 <agps_print+0x3c4>)
   230ec:	f00b fa55 	bl	2e59a <printk>
	printk("\tbeta3: %d\n", data->beta3);
   230f0:	f994 1007 	ldrsb.w	r1, [r4, #7]
   230f4:	4867      	ldr	r0, [pc, #412]	; (23294 <agps_print+0x3c8>)
   230f6:	e71e      	b.n	22f36 <agps_print+0x6a>
	printk("nequick\n");
   230f8:	4867      	ldr	r0, [pc, #412]	; (23298 <agps_print+0x3cc>)
   230fa:	f00b fa4e 	bl	2e59a <printk>
	printk("\tai0: %d\n", data->ai0);
   230fe:	f9b4 1000 	ldrsh.w	r1, [r4]
   23102:	4866      	ldr	r0, [pc, #408]	; (2329c <agps_print+0x3d0>)
   23104:	f00b fa49 	bl	2e59a <printk>
	printk("\tai1: %d\n", data->ai1);
   23108:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   2310c:	4864      	ldr	r0, [pc, #400]	; (232a0 <agps_print+0x3d4>)
   2310e:	f00b fa44 	bl	2e59a <printk>
	printk("\tai2: %d\n", data->ai2);
   23112:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   23116:	4863      	ldr	r0, [pc, #396]	; (232a4 <agps_print+0x3d8>)
   23118:	f00b fa3f 	bl	2e59a <printk>
	printk("\tstorm_cond: %d\n", data->storm_cond);
   2311c:	79a1      	ldrb	r1, [r4, #6]
   2311e:	4862      	ldr	r0, [pc, #392]	; (232a8 <agps_print+0x3dc>)
   23120:	f00b fa3b 	bl	2e59a <printk>
	printk("\tstorm_valid: %d\n", data->storm_valid);
   23124:	79e1      	ldrb	r1, [r4, #7]
   23126:	4861      	ldr	r0, [pc, #388]	; (232ac <agps_print+0x3e0>)
   23128:	e705      	b.n	22f36 <agps_print+0x6a>
	printk("clock_and_tows\n");
   2312a:	4861      	ldr	r0, [pc, #388]	; (232b0 <agps_print+0x3e4>)
   2312c:	f00b fa35 	bl	2e59a <printk>
	printk("\tdate_day: %d\n", data->date_day);
   23130:	8821      	ldrh	r1, [r4, #0]
   23132:	4860      	ldr	r0, [pc, #384]	; (232b4 <agps_print+0x3e8>)
   23134:	f00b fa31 	bl	2e59a <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   23138:	6861      	ldr	r1, [r4, #4]
   2313a:	485f      	ldr	r0, [pc, #380]	; (232b8 <agps_print+0x3ec>)
   2313c:	f00b fa2d 	bl	2e59a <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   23140:	8921      	ldrh	r1, [r4, #8]
   23142:	485e      	ldr	r0, [pc, #376]	; (232bc <agps_print+0x3f0>)
   23144:	f00b fa29 	bl	2e59a <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   23148:	68e1      	ldr	r1, [r4, #12]
   2314a:	485d      	ldr	r0, [pc, #372]	; (232c0 <agps_print+0x3f4>)
   2314c:	f00b fa25 	bl	2e59a <printk>
	printk("\tsv_tow\n");
   23150:	485c      	ldr	r0, [pc, #368]	; (232c4 <agps_print+0x3f8>)
   23152:	f00b fa22 	bl	2e59a <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   23156:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   23158:	f8df 816c 	ldr.w	r8, [pc, #364]	; 232c8 <agps_print+0x3fc>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2315c:	4f5b      	ldr	r7, [pc, #364]	; (232cc <agps_print+0x400>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2315e:	4e5c      	ldr	r6, [pc, #368]	; (232d0 <agps_print+0x404>)
		printk("\t\tsv_tow[%d]\n", i);
   23160:	4629      	mov	r1, r5
   23162:	4640      	mov	r0, r8
   23164:	f00b fa19 	bl	2e59a <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   23168:	8a21      	ldrh	r1, [r4, #16]
   2316a:	4638      	mov	r0, r7
   2316c:	f00b fa15 	bl	2e59a <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   23170:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   23172:	7ca1      	ldrb	r1, [r4, #18]
   23174:	4630      	mov	r0, r6
   23176:	f00b fa10 	bl	2e59a <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2317a:	2d20      	cmp	r5, #32
   2317c:	f104 0404 	add.w	r4, r4, #4
   23180:	d1ee      	bne.n	23160 <agps_print+0x294>
}
   23182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   23186:	4853      	ldr	r0, [pc, #332]	; (232d4 <agps_print+0x408>)
   23188:	f00b fa07 	bl	2e59a <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2318c:	6821      	ldr	r1, [r4, #0]
   2318e:	4852      	ldr	r0, [pc, #328]	; (232d8 <agps_print+0x40c>)
   23190:	f00b fa03 	bl	2e59a <printk>
	printk("\tlongitude: %d\n", data->longitude);
   23194:	6861      	ldr	r1, [r4, #4]
   23196:	4851      	ldr	r0, [pc, #324]	; (232dc <agps_print+0x410>)
   23198:	f00b f9ff 	bl	2e59a <printk>
	printk("\taltitude: %d\n", data->altitude);
   2319c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   231a0:	484f      	ldr	r0, [pc, #316]	; (232e0 <agps_print+0x414>)
   231a2:	f00b f9fa 	bl	2e59a <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   231a6:	7aa1      	ldrb	r1, [r4, #10]
   231a8:	484e      	ldr	r0, [pc, #312]	; (232e4 <agps_print+0x418>)
   231aa:	f00b f9f6 	bl	2e59a <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   231ae:	7ae1      	ldrb	r1, [r4, #11]
   231b0:	484d      	ldr	r0, [pc, #308]	; (232e8 <agps_print+0x41c>)
   231b2:	f00b f9f2 	bl	2e59a <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   231b6:	7b21      	ldrb	r1, [r4, #12]
   231b8:	484c      	ldr	r0, [pc, #304]	; (232ec <agps_print+0x420>)
   231ba:	f00b f9ee 	bl	2e59a <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   231be:	7b61      	ldrb	r1, [r4, #13]
   231c0:	484b      	ldr	r0, [pc, #300]	; (232f0 <agps_print+0x424>)
   231c2:	f00b f9ea 	bl	2e59a <printk>
	printk("\tconfidence: %d\n", data->confidence);
   231c6:	7ba1      	ldrb	r1, [r4, #14]
   231c8:	484a      	ldr	r0, [pc, #296]	; (232f4 <agps_print+0x428>)
   231ca:	e6b4      	b.n	22f36 <agps_print+0x6a>
   231cc:	0003eea2 	.word	0x0003eea2
   231d0:	0003eea8 	.word	0x0003eea8
   231d4:	0003eeb1 	.word	0x0003eeb1
   231d8:	0003eeba 	.word	0x0003eeba
   231dc:	0003eec4 	.word	0x0003eec4
   231e0:	0003eecf 	.word	0x0003eecf
   231e4:	0003eedf 	.word	0x0003eedf
   231e8:	0003eeec 	.word	0x0003eeec
   231ec:	0003eef5 	.word	0x0003eef5
   231f0:	0003ef06 	.word	0x0003ef06
   231f4:	0003ef12 	.word	0x0003ef12
   231f8:	0003ef1e 	.word	0x0003ef1e
   231fc:	0003ef2b 	.word	0x0003ef2b
   23200:	0003ef36 	.word	0x0003ef36
   23204:	0003ef40 	.word	0x0003ef40
   23208:	0003ef4a 	.word	0x0003ef4a
   2320c:	0003ef54 	.word	0x0003ef54
   23210:	0003ef5e 	.word	0x0003ef5e
   23214:	0003ef68 	.word	0x0003ef68
   23218:	0003ef72 	.word	0x0003ef72
   2321c:	0003ef80 	.word	0x0003ef80
   23220:	0003ef8a 	.word	0x0003ef8a
   23224:	0003ef92 	.word	0x0003ef92
   23228:	0003efa0 	.word	0x0003efa0
   2322c:	0003efa9 	.word	0x0003efa9
   23230:	0003efb9 	.word	0x0003efb9
   23234:	0003efc1 	.word	0x0003efc1
   23238:	0003efcc 	.word	0x0003efcc
   2323c:	0003efd9 	.word	0x0003efd9
   23240:	0003efe2 	.word	0x0003efe2
   23244:	0003efef 	.word	0x0003efef
   23248:	0003eff9 	.word	0x0003eff9
   2324c:	0003f003 	.word	0x0003f003
   23250:	0003f00d 	.word	0x0003f00d
   23254:	0003f017 	.word	0x0003f017
   23258:	0003f021 	.word	0x0003f021
   2325c:	0003f02b 	.word	0x0003f02b
   23260:	0003f034 	.word	0x0003f034
   23264:	0003f03d 	.word	0x0003f03d
   23268:	0003f047 	.word	0x0003f047
   2326c:	0003f052 	.word	0x0003f052
   23270:	0003f060 	.word	0x0003f060
   23274:	0003f070 	.word	0x0003f070
   23278:	0003f07b 	.word	0x0003f07b
   2327c:	0003f088 	.word	0x0003f088
   23280:	0003f095 	.word	0x0003f095
   23284:	0003f0a2 	.word	0x0003f0a2
   23288:	0003f0af 	.word	0x0003f0af
   2328c:	0003f0bb 	.word	0x0003f0bb
   23290:	0003f0c7 	.word	0x0003f0c7
   23294:	0003f0d3 	.word	0x0003f0d3
   23298:	0003f0df 	.word	0x0003f0df
   2329c:	0003f0e8 	.word	0x0003f0e8
   232a0:	0003f0f2 	.word	0x0003f0f2
   232a4:	0003f0fc 	.word	0x0003f0fc
   232a8:	0003f106 	.word	0x0003f106
   232ac:	0003f117 	.word	0x0003f117
   232b0:	0003f129 	.word	0x0003f129
   232b4:	0003f139 	.word	0x0003f139
   232b8:	0003f148 	.word	0x0003f148
   232bc:	0003f15a 	.word	0x0003f15a
   232c0:	0003f16d 	.word	0x0003f16d
   232c4:	0003f17f 	.word	0x0003f17f
   232c8:	0003f188 	.word	0x0003f188
   232cc:	0003f196 	.word	0x0003f196
   232d0:	0003f1a2 	.word	0x0003f1a2
   232d4:	000387d6 	.word	0x000387d6
   232d8:	0003f1b4 	.word	0x0003f1b4
   232dc:	0003f1c3 	.word	0x0003f1c3
   232e0:	0003f1d3 	.word	0x0003f1d3
   232e4:	0003f1e2 	.word	0x0003f1e2
   232e8:	0003f1f6 	.word	0x0003f1f6
   232ec:	0003f20a 	.word	0x0003f20a
   232f0:	0003f222 	.word	0x0003f222
   232f4:	0003f235 	.word	0x0003f235
	printk("integrity\n");
   232f8:	4805      	ldr	r0, [pc, #20]	; (23310 <agps_print+0x444>)
   232fa:	f00b f94e 	bl	2e59a <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   232fe:	6821      	ldr	r1, [r4, #0]
   23300:	4804      	ldr	r0, [pc, #16]	; (23314 <agps_print+0x448>)
   23302:	e618      	b.n	22f36 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   23304:	4804      	ldr	r0, [pc, #16]	; (23318 <agps_print+0x44c>)
}
   23306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2330a:	f00b b946 	b.w	2e59a <printk>
   2330e:	bf00      	nop
   23310:	0003f246 	.word	0x0003f246
   23314:	0003f251 	.word	0x0003f251
   23318:	0003f266 	.word	0x0003f266

0002331c <reset_topics>:
	}
	topic->size = 0;
}

static void reset_topics(void)
{
   2331c:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2331e:	4805      	ldr	r0, [pc, #20]	; (23334 <reset_topics+0x18>)
   23320:	f010 f90a 	bl	33538 <reset_topic>
	reset_topic(&topic_updt.topic);
   23324:	4804      	ldr	r0, [pc, #16]	; (23338 <reset_topics+0x1c>)
   23326:	f010 f907 	bl	33538 <reset_topic>
#if defined(CONFIG_NRF_CLOUD_FOTA_BLE_DEVICES)
	reset_topic(&sub_topics[SUB_TOPIC_IDX_BLE_RCV].topic);
	reset_topic(&topic_ble_updt.topic);
	reset_topic(&topic_ble_req.topic);
#endif
}
   2332a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2332e:	4803      	ldr	r0, [pc, #12]	; (2333c <reset_topics+0x20>)
   23330:	f010 b902 	b.w	33538 <reset_topic>
   23334:	2000c9c0 	.word	0x2000c9c0
   23338:	2000c9d8 	.word	0x2000c9d8
   2333c:	2000c9cc 	.word	0x2000c9cc

00023340 <build_topic>:

static int build_topic(const char *const client_id,
		       const struct mqtt_utf8 *const endpoint,
		       const char *const topic_str,
		       struct mqtt_utf8 *const topic_out)
{
   23340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23344:	460f      	mov	r7, r1
   23346:	4690      	mov	r8, r2
   23348:	461e      	mov	r6, r3
   2334a:	4681      	mov	r9, r0
	int ret;

	char *buf;
	size_t size = endpoint->size + strlen(client_id) +
   2334c:	f7e5 ffe5 	bl	931a <strlen>
   23350:	4605      	mov	r5, r0
		      strlen(topic_str) + 1;
   23352:	4640      	mov	r0, r8
   23354:	f7e5 ffe1 	bl	931a <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   23358:	687c      	ldr	r4, [r7, #4]

	buf = nrf_cloud_calloc(size, 1);
   2335a:	2101      	movs	r1, #1
	size_t size = endpoint->size + strlen(client_id) +
   2335c:	3401      	adds	r4, #1
   2335e:	442c      	add	r4, r5
   23360:	4404      	add	r4, r0
	buf = nrf_cloud_calloc(size, 1);
   23362:	4620      	mov	r0, r4
   23364:	f7fe f91e 	bl	215a4 <nrf_cloud_calloc>

	if (!buf) {
   23368:	4605      	mov	r5, r0
   2336a:	b938      	cbnz	r0, 2337c <build_topic+0x3c>
		ret = -ENOMEM;
		reset_topic(topic_out);
   2336c:	4630      	mov	r0, r6
   2336e:	f010 f8e3 	bl	33538 <reset_topic>
		return ret;
   23372:	f06f 000b 	mvn.w	r0, #11

	topic_out->utf8 = buf;
	topic_out->size = ret;

	return 0;
}
   23376:	b003      	add	sp, #12
   23378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = snprintk(buf, size, "%s%s%s",
   2337c:	e9cd 9800 	strd	r9, r8, [sp]
   23380:	4621      	mov	r1, r4
   23382:	683b      	ldr	r3, [r7, #0]
   23384:	4a08      	ldr	r2, [pc, #32]	; (233a8 <build_topic+0x68>)
   23386:	f00b f915 	bl	2e5b4 <snprintk>
	if (ret <= 0 || ret >= size) {
   2338a:	2800      	cmp	r0, #0
   2338c:	dd01      	ble.n	23392 <build_topic+0x52>
   2338e:	42a0      	cmp	r0, r4
   23390:	d305      	bcc.n	2339e <build_topic+0x5e>
		nrf_cloud_free(buf);
   23392:	4628      	mov	r0, r5
   23394:	f7fe f90c 	bl	215b0 <nrf_cloud_free>
		return ret;
   23398:	f06f 0006 	mvn.w	r0, #6
   2339c:	e7eb      	b.n	23376 <build_topic+0x36>
	topic_out->size = ret;
   2339e:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   233a2:	2000      	movs	r0, #0
   233a4:	e7e7      	b.n	23376 <build_topic+0x36>
   233a6:	bf00      	nop
   233a8:	0003f27e 	.word	0x0003f27e

000233ac <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   233ac:	b538      	push	{r3, r4, r5, lr}
   233ae:	4605      	mov	r5, r0
   233b0:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(array != NULL);
   233b2:	b95d      	cbnz	r5, 233cc <add_number_to_array+0x20>
   233b4:	490c      	ldr	r1, [pc, #48]	; (233e8 <add_number_to_array+0x3c>)
   233b6:	480d      	ldr	r0, [pc, #52]	; (233ec <add_number_to_array+0x40>)
   233b8:	f240 332b 	movw	r3, #811	; 0x32b
   233bc:	4a0c      	ldr	r2, [pc, #48]	; (233f0 <add_number_to_array+0x44>)
   233be:	f00b fac9 	bl	2e954 <assert_print>
   233c2:	f240 312b 	movw	r1, #811	; 0x32b
   233c6:	480a      	ldr	r0, [pc, #40]	; (233f0 <add_number_to_array+0x44>)
   233c8:	f00b fabd 	bl	2e946 <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   233cc:	f7e5 f93e 	bl	864c <__aeabi_i2d>
   233d0:	f7e6 fa3e 	bl	9850 <cJSON_CreateNumber>

	if (item) {
   233d4:	4604      	mov	r4, r0
   233d6:	b118      	cbz	r0, 233e0 <add_number_to_array+0x34>
		cJSON_AddItemToArray(array, item);
   233d8:	4601      	mov	r1, r0
   233da:	4628      	mov	r0, r5
   233dc:	f010 fa24 	bl	33828 <cJSON_AddItemToArray>
	}
	return item;
}
   233e0:	1e20      	subs	r0, r4, #0
   233e2:	bf18      	it	ne
   233e4:	2001      	movne	r0, #1
   233e6:	bd38      	pop	{r3, r4, r5, pc}
   233e8:	0003f2c3 	.word	0x0003f2c3
   233ec:	000381c3 	.word	0x000381c3
   233f0:	0003f285 	.word	0x0003f285

000233f4 <add_string_to_array>:
{
   233f4:	b538      	push	{r3, r4, r5, lr}
   233f6:	4605      	mov	r5, r0
   233f8:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(array != NULL);
   233fa:	b95d      	cbnz	r5, 23414 <add_string_to_array+0x20>
   233fc:	490b      	ldr	r1, [pc, #44]	; (2342c <add_string_to_array+0x38>)
   233fe:	480c      	ldr	r0, [pc, #48]	; (23430 <add_string_to_array+0x3c>)
   23400:	f240 331f 	movw	r3, #799	; 0x31f
   23404:	4a0b      	ldr	r2, [pc, #44]	; (23434 <add_string_to_array+0x40>)
   23406:	f00b faa5 	bl	2e954 <assert_print>
   2340a:	f240 311f 	movw	r1, #799	; 0x31f
   2340e:	4809      	ldr	r0, [pc, #36]	; (23434 <add_string_to_array+0x40>)
   23410:	f00b fa99 	bl	2e946 <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   23414:	f001 fd1c 	bl	24e50 <cJSON_CreateString>
	if (item) {
   23418:	4604      	mov	r4, r0
   2341a:	b118      	cbz	r0, 23424 <add_string_to_array+0x30>
		cJSON_AddItemToArray(array, item);
   2341c:	4601      	mov	r1, r0
   2341e:	4628      	mov	r0, r5
   23420:	f010 fa02 	bl	33828 <cJSON_AddItemToArray>
}
   23424:	1e20      	subs	r0, r4, #0
   23426:	bf18      	it	ne
   23428:	2001      	movne	r0, #1
   2342a:	bd38      	pop	{r3, r4, r5, pc}
   2342c:	0003f2c3 	.word	0x0003f2c3
   23430:	000381c3 	.word	0x000381c3
   23434:	0003f285 	.word	0x0003f285

00023438 <cleanup_job.constprop.0>:
	}

	return ret;
}

static void cleanup_job(struct nrf_cloud_fota_job *const job)
   23438:	b510      	push	{r4, lr}
{
	__ASSERT_NO_MSG(job != NULL);
	LOG_DBG("%s() - ID: %s", __func__,
		job->info.id ? job->info.id : "N/A");

	if (job->parsed_payload) {
   2343a:	4c06      	ldr	r4, [pc, #24]	; (23454 <cleanup_job.constprop.0+0x1c>)
   2343c:	6820      	ldr	r0, [r4, #0]
   2343e:	b108      	cbz	r0, 23444 <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   23440:	f001 fc5a 	bl	24cf8 <cJSON_Delete>
	}
	memset(job, 0, sizeof(*job));
   23444:	2228      	movs	r2, #40	; 0x28
   23446:	2100      	movs	r1, #0
   23448:	4802      	ldr	r0, [pc, #8]	; (23454 <cleanup_job.constprop.0+0x1c>)
   2344a:	f011 fdef 	bl	3502c <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2344e:	2306      	movs	r3, #6
   23450:	7223      	strb	r3, [r4, #8]
}
   23452:	bd10      	pop	{r4, pc}
   23454:	20010b74 	.word	0x20010b74

00023458 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   23458:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2345a:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2345c:	f8cd 3003 	str.w	r3, [sp, #3]
   23460:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   23464:	4b0d      	ldr	r3, [pc, #52]	; (2349c <send_event.constprop.0+0x44>)
	switch (id) {
   23466:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   23468:	791a      	ldrb	r2, [r3, #4]
   2346a:	f88d 0000 	strb.w	r0, [sp]
   2346e:	f88d 2001 	strb.w	r2, [sp, #1]
   23472:	7a1a      	ldrb	r2, [r3, #8]
   23474:	f88d 2002 	strb.w	r2, [sp, #2]
	switch (id) {
   23478:	d009      	beq.n	2348e <send_event.constprop.0+0x36>
   2347a:	2805      	cmp	r0, #5
   2347c:	d00b      	beq.n	23496 <send_event.constprop.0+0x3e>
	if (event_cb) {
   2347e:	4b08      	ldr	r3, [pc, #32]	; (234a0 <send_event.constprop.0+0x48>)
   23480:	681b      	ldr	r3, [r3, #0]
   23482:	b10b      	cbz	r3, 23488 <send_event.constprop.0+0x30>
		event_cb(&evt);
   23484:	4668      	mov	r0, sp
   23486:	4798      	blx	r3
}
   23488:	b003      	add	sp, #12
   2348a:	f85d fb04 	ldr.w	pc, [sp], #4
		evt.evt_data.error = job->error;
   2348e:	7f1b      	ldrb	r3, [r3, #28]
   23490:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   23494:	e7f3      	b.n	2347e <send_event.constprop.0+0x26>
		evt.evt_data.dl_progress = job->dl_progress;
   23496:	6a1b      	ldr	r3, [r3, #32]
   23498:	9301      	str	r3, [sp, #4]
		break;
   2349a:	e7f0      	b.n	2347e <send_event.constprop.0+0x26>
   2349c:	20010b74 	.word	0x20010b74
   234a0:	20010b9c 	.word	0x20010b9c

000234a4 <send_fota_done_event_if_done>:
	if ((current_fota.status == NRF_CLOUD_FOTA_IN_PROGRESS) &&
   234a4:	4b05      	ldr	r3, [pc, #20]	; (234bc <send_fota_done_event_if_done+0x18>)
   234a6:	791b      	ldrb	r3, [r3, #4]
   234a8:	2b01      	cmp	r3, #1
   234aa:	d105      	bne.n	234b8 <send_fota_done_event_if_done+0x14>
	    (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING)) {
   234ac:	4b04      	ldr	r3, [pc, #16]	; (234c0 <send_fota_done_event_if_done+0x1c>)
	if ((current_fota.status == NRF_CLOUD_FOTA_IN_PROGRESS) &&
   234ae:	7818      	ldrb	r0, [r3, #0]
   234b0:	2801      	cmp	r0, #1
   234b2:	d101      	bne.n	234b8 <send_fota_done_event_if_done+0x14>
		send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   234b4:	f7ff bfd0 	b.w	23458 <send_event.constprop.0>
}
   234b8:	4770      	bx	lr
   234ba:	bf00      	nop
   234bc:	20010b74 	.word	0x20010b74
   234c0:	2000ccd2 	.word	0x2000ccd2

000234c4 <save_validate_status>:
{
   234c4:	b5b0      	push	{r4, r5, r7, lr}
   234c6:	b086      	sub	sp, #24
   234c8:	460b      	mov	r3, r1
   234ca:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(job_id != NULL);
   234cc:	4601      	mov	r1, r0
   234ce:	b958      	cbnz	r0, 234e8 <save_validate_status+0x24>
   234d0:	4927      	ldr	r1, [pc, #156]	; (23570 <save_validate_status+0xac>)
   234d2:	4828      	ldr	r0, [pc, #160]	; (23574 <save_validate_status+0xb0>)
   234d4:	f44f 7320 	mov.w	r3, #640	; 0x280
   234d8:	4a27      	ldr	r2, [pc, #156]	; (23578 <save_validate_status+0xb4>)
   234da:	f00b fa3b 	bl	2e954 <assert_print>
   234de:	f44f 7120 	mov.w	r1, #640	; 0x280
   234e2:	4825      	ldr	r0, [pc, #148]	; (23578 <save_validate_status+0xb4>)
   234e4:	f00b fa2f 	bl	2e946 <assert_post_action>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   234e8:	2a05      	cmp	r2, #5
   234ea:	4c24      	ldr	r4, [pc, #144]	; (2357c <save_validate_status+0xb8>)
   234ec:	d123      	bne.n	23536 <save_validate_status+0x72>
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   234ee:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   234f0:	2306      	movs	r3, #6
		memset(saved_job.id, 0, sizeof(saved_job.id));
   234f2:	2225      	movs	r2, #37	; 0x25
   234f4:	1ca0      	adds	r0, r4, #2
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   234f6:	7063      	strb	r3, [r4, #1]
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   234f8:	7021      	strb	r1, [r4, #0]
		saved_job.bl_flags = NRF_CLOUD_FOTA_BL_STATUS_CLEAR;
   234fa:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		memset(saved_job.id, 0, sizeof(saved_job.id));
   234fe:	f011 fd95 	bl	3502c <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   23502:	2228      	movs	r2, #40	; 0x28
   23504:	491d      	ldr	r1, [pc, #116]	; (2357c <save_validate_status+0xb8>)
   23506:	481e      	ldr	r0, [pc, #120]	; (23580 <save_validate_status+0xbc>)
   23508:	f7ec f846 	bl	f598 <settings_save_one>
	if (ret) {
   2350c:	4604      	mov	r4, r0
   2350e:	b170      	cbz	r0, 2352e <save_validate_status+0x6a>
		LOG_ERR("settings_save_one failed: %d", ret);
   23510:	466d      	mov	r5, sp
   23512:	b088      	sub	sp, #32
   23514:	466a      	mov	r2, sp
   23516:	4b1b      	ldr	r3, [pc, #108]	; (23584 <save_validate_status+0xc0>)
   23518:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2351c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23520:	2303      	movs	r3, #3
   23522:	4819      	ldr	r0, [pc, #100]	; (23588 <save_validate_status+0xc4>)
   23524:	f842 3f10 	str.w	r3, [r2, #16]!
   23528:	f010 f811 	bl	3354e <z_log_msg_static_create.constprop.0>
   2352c:	46ad      	mov	sp, r5
}
   2352e:	4620      	mov	r0, r4
   23530:	3718      	adds	r7, #24
   23532:	46bd      	mov	sp, r7
   23534:	bdb0      	pop	{r4, r5, r7, pc}
		saved_job.validate = validate;
   23536:	4620      	mov	r0, r4
   23538:	f800 2b02 	strb.w	r2, [r0], #2
		if (job_id != saved_job.id) {
   2353c:	4281      	cmp	r1, r0
		saved_job.type = job_type;
   2353e:	7063      	strb	r3, [r4, #1]
		if (job_id != saved_job.id) {
   23540:	d005      	beq.n	2354e <save_validate_status+0x8a>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id) - 1);
   23542:	2224      	movs	r2, #36	; 0x24
   23544:	f011 ff2a 	bl	3539c <strncpy>
			saved_job.id[sizeof(saved_job.id) - 1] = '\0';
   23548:	2300      	movs	r3, #0
   2354a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		ret = nrf_cloud_bootloader_fota_slot_set(&saved_job);
   2354e:	480b      	ldr	r0, [pc, #44]	; (2357c <save_validate_status+0xb8>)
   23550:	f7fe f83a 	bl	215c8 <nrf_cloud_bootloader_fota_slot_set>
		if (ret) {
   23554:	2800      	cmp	r0, #0
   23556:	d0d4      	beq.n	23502 <save_validate_status+0x3e>
			LOG_WRN("Failed to set active bootloader (B1) slot flag");
   23558:	4b0c      	ldr	r3, [pc, #48]	; (2358c <save_validate_status+0xc8>)
   2355a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2355e:	617b      	str	r3, [r7, #20]
   23560:	2302      	movs	r3, #2
   23562:	4809      	ldr	r0, [pc, #36]	; (23588 <save_validate_status+0xc4>)
   23564:	f107 0210 	add.w	r2, r7, #16
   23568:	613b      	str	r3, [r7, #16]
   2356a:	f00f fff0 	bl	3354e <z_log_msg_static_create.constprop.0>
   2356e:	e7c8      	b.n	23502 <save_validate_status+0x3e>
   23570:	0003f2d8 	.word	0x0003f2d8
   23574:	000381c3 	.word	0x000381c3
   23578:	0003f285 	.word	0x0003f285
   2357c:	2000ccd2 	.word	0x2000ccd2
   23580:	0003f31d 	.word	0x0003f31d
   23584:	0003f330 	.word	0x0003f330
   23588:	00036590 	.word	0x00036590
   2358c:	0003f2ee 	.word	0x0003f2ee

00023590 <fota_settings_set>:
{
   23590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23594:	b087      	sub	sp, #28
   23596:	460e      	mov	r6, r1
   23598:	4690      	mov	r8, r2
   2359a:	4699      	mov	r9, r3
   2359c:	af00      	add	r7, sp, #0
	if (!key) {
   2359e:	2800      	cmp	r0, #0
   235a0:	d05d      	beq.n	2365e <fota_settings_set+0xce>
	if (strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) != 0) {
   235a2:	2203      	movs	r2, #3
   235a4:	4932      	ldr	r1, [pc, #200]	; (23670 <fota_settings_set+0xe0>)
   235a6:	f011 fee7 	bl	35378 <strncmp>
   235aa:	4604      	mov	r4, r0
   235ac:	2800      	cmp	r0, #0
   235ae:	d159      	bne.n	23664 <fota_settings_set+0xd4>
	if (len_rd > sizeof(saved_job)) {
   235b0:	2e28      	cmp	r6, #40	; 0x28
   235b2:	d90b      	bls.n	235cc <fota_settings_set+0x3c>
		LOG_INF("FOTA settings size larger than expected");
   235b4:	4b2f      	ldr	r3, [pc, #188]	; (23674 <fota_settings_set+0xe4>)
		len_rd = sizeof(saved_job);
   235b6:	2628      	movs	r6, #40	; 0x28
		LOG_INF("FOTA settings size larger than expected");
   235b8:	617b      	str	r3, [r7, #20]
   235ba:	2302      	movs	r3, #2
   235bc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   235c0:	482d      	ldr	r0, [pc, #180]	; (23678 <fota_settings_set+0xe8>)
   235c2:	613b      	str	r3, [r7, #16]
   235c4:	f107 0210 	add.w	r2, r7, #16
   235c8:	f00f ffc1 	bl	3354e <z_log_msg_static_create.constprop.0>
	ssize_t sz = read_cb(cb_arg, (void *)&saved_job, len_rd);
   235cc:	4d2b      	ldr	r5, [pc, #172]	; (2367c <fota_settings_set+0xec>)
   235ce:	4632      	mov	r2, r6
   235d0:	4629      	mov	r1, r5
   235d2:	4648      	mov	r0, r9
   235d4:	47c0      	blx	r8
	if (sz == 0) {
   235d6:	2800      	cmp	r0, #0
   235d8:	d047      	beq.n	2366a <fota_settings_set+0xda>
	} else if (sz < 0) {
   235da:	da15      	bge.n	23608 <fota_settings_set+0x78>
		LOG_ERR("FOTA settings read error: %d", sz);
   235dc:	466c      	mov	r4, sp
   235de:	b088      	sub	sp, #32
   235e0:	466a      	mov	r2, sp
   235e2:	4b27      	ldr	r3, [pc, #156]	; (23680 <fota_settings_set+0xf0>)
   235e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   235e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   235ec:	2303      	movs	r3, #3
   235ee:	4822      	ldr	r0, [pc, #136]	; (23678 <fota_settings_set+0xe8>)
   235f0:	f842 3f10 	str.w	r3, [r2, #16]!
   235f4:	f00f ffab 	bl	3354e <z_log_msg_static_create.constprop.0>
   235f8:	46a5      	mov	sp, r4
		return -EIO;
   235fa:	f06f 0404 	mvn.w	r4, #4
}
   235fe:	4620      	mov	r0, r4
   23600:	371c      	adds	r7, #28
   23602:	46bd      	mov	sp, r7
   23604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (sz == sizeof(saved_job)) {
   23608:	2828      	cmp	r0, #40	; 0x28
   2360a:	d11c      	bne.n	23646 <fota_settings_set+0xb6>
		LOG_INF("Saved job: %s, type: %d, validate: %d, bl: 0x%X",
   2360c:	466e      	mov	r6, sp
   2360e:	b08c      	sub	sp, #48	; 0x30
   23610:	466a      	mov	r2, sp
   23612:	7868      	ldrb	r0, [r5, #1]
   23614:	7829      	ldrb	r1, [r5, #0]
   23616:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   2361a:	e9c2 1308 	strd	r1, r3, [r2, #32]
   2361e:	f44f 7300 	mov.w	r3, #512	; 0x200
   23622:	f8df c060 	ldr.w	ip, [pc, #96]	; 23684 <fota_settings_set+0xf4>
   23626:	8513      	strh	r3, [r2, #40]	; 0x28
   23628:	4b17      	ldr	r3, [pc, #92]	; (23688 <fota_settings_set+0xf8>)
   2362a:	3502      	adds	r5, #2
   2362c:	e9c2 5006 	strd	r5, r0, [r2, #24]
   23630:	f8c2 c014 	str.w	ip, [r2, #20]
   23634:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   23638:	480f      	ldr	r0, [pc, #60]	; (23678 <fota_settings_set+0xe8>)
   2363a:	f842 3f10 	str.w	r3, [r2, #16]!
   2363e:	f00f ff86 	bl	3354e <z_log_msg_static_create.constprop.0>
   23642:	46b5      	mov	sp, r6
   23644:	e7db      	b.n	235fe <fota_settings_set+0x6e>
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
   23646:	4b11      	ldr	r3, [pc, #68]	; (2368c <fota_settings_set+0xfc>)
   23648:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   2364c:	617b      	str	r3, [r7, #20]
   2364e:	2302      	movs	r3, #2
   23650:	4809      	ldr	r0, [pc, #36]	; (23678 <fota_settings_set+0xe8>)
   23652:	613b      	str	r3, [r7, #16]
   23654:	f107 0210 	add.w	r2, r7, #16
   23658:	f00f ff79 	bl	3354e <z_log_msg_static_create.constprop.0>
   2365c:	e7cf      	b.n	235fe <fota_settings_set+0x6e>
		return -EINVAL;
   2365e:	f06f 0415 	mvn.w	r4, #21
   23662:	e7cc      	b.n	235fe <fota_settings_set+0x6e>
		return -ENOMSG;
   23664:	f06f 0422 	mvn.w	r4, #34	; 0x22
   23668:	e7c9      	b.n	235fe <fota_settings_set+0x6e>
		return -EIDRM;
   2366a:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2366e:	e7c6      	b.n	235fe <fota_settings_set+0x6e>
   23670:	0003f4dd 	.word	0x0003f4dd
   23674:	0003f375 	.word	0x0003f375
   23678:	00036590 	.word	0x00036590
   2367c:	2000ccd2 	.word	0x2000ccd2
   23680:	0003f39d 	.word	0x0003f39d
   23684:	0003f3ba 	.word	0x0003f3ba
   23688:	01000006 	.word	0x01000006
   2368c:	0003f3ea 	.word	0x0003f3ea

00023690 <publish>:

static int publish(const struct mqtt_publish_param *const pub)
{
   23690:	b5b0      	push	{r4, r5, r7, lr}
	LOG_DBG("Topic: %s", (char *)pub->message.topic.topic.utf8);
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		(char *)pub->message.payload.data);

	ret = mqtt_publish(client_mqtt, pub);
   23692:	4b0d      	ldr	r3, [pc, #52]	; (236c8 <publish+0x38>)
{
   23694:	4601      	mov	r1, r0
   23696:	af00      	add	r7, sp, #0
	ret = mqtt_publish(client_mqtt, pub);
   23698:	6818      	ldr	r0, [r3, #0]
   2369a:	f00e fa8a 	bl	31bb2 <mqtt_publish>
	if (ret) {
   2369e:	4604      	mov	r4, r0
   236a0:	b170      	cbz	r0, 236c0 <publish+0x30>
		LOG_ERR("Publish failed: %d", ret);
   236a2:	466d      	mov	r5, sp
   236a4:	b088      	sub	sp, #32
   236a6:	466a      	mov	r2, sp
   236a8:	4b08      	ldr	r3, [pc, #32]	; (236cc <publish+0x3c>)
   236aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   236ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   236b2:	2303      	movs	r3, #3
   236b4:	4806      	ldr	r0, [pc, #24]	; (236d0 <publish+0x40>)
   236b6:	f842 3f10 	str.w	r3, [r2, #16]!
   236ba:	f00f ff48 	bl	3354e <z_log_msg_static_create.constprop.0>
   236be:	46ad      	mov	sp, r5
	}
	return ret;
}
   236c0:	4620      	mov	r0, r4
   236c2:	46bd      	mov	sp, r7
   236c4:	bdb0      	pop	{r4, r5, r7, pc}
   236c6:	bf00      	nop
   236c8:	20010ba0 	.word	0x20010ba0
   236cc:	0003f424 	.word	0x0003f424
   236d0:	00036590 	.word	0x00036590

000236d4 <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   236d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   236d8:	68c3      	ldr	r3, [r0, #12]
{
   236da:	4604      	mov	r4, r0
   236dc:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   236de:	2b00      	cmp	r3, #0
   236e0:	d066      	beq.n	237b0 <send_job_update+0xdc>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   236e2:	4b38      	ldr	r3, [pc, #224]	; (237c4 <send_job_update+0xf0>)
   236e4:	681b      	ldr	r3, [r3, #0]
   236e6:	2b00      	cmp	r3, #0
   236e8:	d065      	beq.n	237b6 <send_job_update+0xe2>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   236ea:	4e37      	ldr	r6, [pc, #220]	; (237c8 <send_job_update+0xf4>)
   236ec:	6833      	ldr	r3, [r6, #0]
   236ee:	2b00      	cmp	r3, #0
   236f0:	d064      	beq.n	237bc <send_job_update+0xe8>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   236f2:	466f      	mov	r7, sp
   236f4:	2218      	movs	r2, #24
   236f6:	2100      	movs	r1, #0
   236f8:	4638      	mov	r0, r7
   236fa:	f011 fc97 	bl	3502c <memset>
   236fe:	f44f 7397 	mov.w	r3, #302	; 0x12e
   23702:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   23706:	f001 fbbb 	bl	24e80 <cJSON_CreateArray>

	if (!array) {
   2370a:	4605      	mov	r5, r0
   2370c:	b1b8      	cbz	r0, 2373e <send_job_update+0x6a>
		return -ENOMEM;
	}

	result = add_string_to_array(array, job->info.id) &&
   2370e:	68e1      	ldr	r1, [r4, #12]
   23710:	f7ff fe70 	bl	233f4 <add_string_to_array>
   23714:	b118      	cbz	r0, 2371e <send_job_update+0x4a>
		 add_number_to_array(array, job->status);
   23716:	4628      	mov	r0, r5
   23718:	7921      	ldrb	r1, [r4, #4]
   2371a:	f7ff fe47 	bl	233ac <add_number_to_array>

	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2371e:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   23720:	4680      	mov	r8, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   23722:	2b07      	cmp	r3, #7
   23724:	d111      	bne.n	2374a <send_job_update+0x76>
		result &= add_number_to_array(array, job->dl_progress);
   23726:	4628      	mov	r0, r5
   23728:	6a21      	ldr	r1, [r4, #32]
   2372a:	f7ff fe3f 	bl	233ac <add_number_to_array>
	} else {
		result &= add_string_to_array(array,
   2372e:	ea00 0308 	and.w	r3, r0, r8
   23732:	f003 0301 	and.w	r3, r3, #1
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
   23736:	4628      	mov	r0, r5
	if (!result) {
   23738:	b9a3      	cbnz	r3, 23764 <send_job_update+0x90>
		cJSON_Delete(array);
   2373a:	f001 fadd 	bl	24cf8 <cJSON_Delete>
		return -ENOMEM;
   2373e:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   23742:	4628      	mov	r0, r5
   23744:	b006      	add	sp, #24
   23746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (err) {
   2374a:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2374c:	4628      	mov	r0, r5
   2374e:	3b01      	subs	r3, #1
   23750:	b2db      	uxtb	r3, r3
   23752:	2b06      	cmp	r3, #6
   23754:	bf96      	itet	ls
   23756:	4a1d      	ldrls	r2, [pc, #116]	; (237cc <send_job_update+0xf8>)
					      get_error_string(job->error));
   23758:	491d      	ldrhi	r1, [pc, #116]	; (237d0 <send_job_update+0xfc>)
   2375a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
		result &= add_string_to_array(array,
   2375e:	f7ff fe49 	bl	233f4 <add_string_to_array>
   23762:	e7e4      	b.n	2372e <send_job_update+0x5a>
	char *array_str = cJSON_PrintUnformatted(array);
   23764:	f010 f845 	bl	337f2 <cJSON_PrintUnformatted>
   23768:	4680      	mov	r8, r0
	cJSON_Delete(array);
   2376a:	4628      	mov	r0, r5
   2376c:	f001 fac4 	bl	24cf8 <cJSON_Delete>
	if (array_str == NULL) {
   23770:	f1b8 0f00 	cmp.w	r8, #0
   23774:	d0e3      	beq.n	2373e <send_job_update+0x6a>
		pub_param->message.topic = *topic;
   23776:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2377a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2377e:	4640      	mov	r0, r8
		pub_param->message.payload.data = array_str;
   23780:	f8cd 800c 	str.w	r8, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   23784:	f7e5 fdc9 	bl	931a <strlen>
   23788:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2378a:	4638      	mov	r0, r7
   2378c:	f7ff ff80 	bl	23690 <publish>
   23790:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   23792:	4640      	mov	r0, r8
   23794:	f010 f951 	bl	33a3a <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   23798:	2d00      	cmp	r5, #0
   2379a:	d1d2      	bne.n	23742 <send_job_update+0x6e>
	switch (status) {
   2379c:	7923      	ldrb	r3, [r4, #4]
   2379e:	3b02      	subs	r3, #2
   237a0:	2b04      	cmp	r3, #4
   237a2:	d8ce      	bhi.n	23742 <send_job_update+0x6e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   237a4:	2225      	movs	r2, #37	; 0x25
   237a6:	68e1      	ldr	r1, [r4, #12]
   237a8:	480a      	ldr	r0, [pc, #40]	; (237d4 <send_job_update+0x100>)
   237aa:	f011 fdf7 	bl	3539c <strncpy>
   237ae:	e7c8      	b.n	23742 <send_job_update+0x6e>
		return -EINVAL;
   237b0:	f06f 0515 	mvn.w	r5, #21
   237b4:	e7c5      	b.n	23742 <send_job_update+0x6e>
		return -ENXIO;
   237b6:	f06f 0505 	mvn.w	r5, #5
   237ba:	e7c2      	b.n	23742 <send_job_update+0x6e>
		return -EHOSTUNREACH;
   237bc:	f06f 0575 	mvn.w	r5, #117	; 0x75
   237c0:	e7bf      	b.n	23742 <send_job_update+0x6e>
   237c2:	bf00      	nop
   237c4:	20010ba0 	.word	0x20010ba0
   237c8:	2000c9d8 	.word	0x2000c9d8
   237cc:	0003748c 	.word	0x0003748c
   237d0:	00038b1b 	.word	0x00038b1b
   237d4:	2001284c 	.word	0x2001284c

000237d8 <report_validated_job_status>:
{
   237d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   237da:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   237dc:	4c2e      	ldr	r4, [pc, #184]	; (23898 <report_validated_job_status+0xc0>)
{
   237de:	af00      	add	r7, sp, #0
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   237e0:	7866      	ldrb	r6, [r4, #1]
   237e2:	2e06      	cmp	r6, #6
   237e4:	d052      	beq.n	2388c <report_validated_job_status+0xb4>
	if (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   237e6:	7825      	ldrb	r5, [r4, #0]
   237e8:	2d01      	cmp	r5, #1
   237ea:	d051      	beq.n	23890 <report_validated_job_status+0xb8>
	struct nrf_cloud_fota_job job = {
   237ec:	2228      	movs	r2, #40	; 0x28
   237ee:	2100      	movs	r1, #0
   237f0:	4638      	mov	r0, r7
   237f2:	f011 fc1b 	bl	3502c <memset>
   237f6:	3402      	adds	r4, #2
	switch (saved_job.validate) {
   237f8:	1eab      	subs	r3, r5, #2
	struct nrf_cloud_fota_job job = {
   237fa:	723e      	strb	r6, [r7, #8]
   237fc:	60fc      	str	r4, [r7, #12]
	switch (saved_job.validate) {
   237fe:	2b04      	cmp	r3, #4
   23800:	d82b      	bhi.n	2385a <report_validated_job_status+0x82>
   23802:	e8df f003 	tbb	[pc, r3]
   23806:	2805      	.short	0x2805
   23808:	2a03      	.short	0x2a03
   2380a:	08          	.byte	0x08
   2380b:	00          	.byte	0x00
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2380c:	2303      	movs	r3, #3
   2380e:	773b      	strb	r3, [r7, #28]
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   23810:	2303      	movs	r3, #3
		job.status = NRF_CLOUD_FOTA_FAILED;
   23812:	713b      	strb	r3, [r7, #4]
		break;
   23814:	e00a      	b.n	2382c <report_validated_job_status+0x54>
		if (current_fota.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   23816:	4b21      	ldr	r3, [pc, #132]	; (2389c <report_validated_job_status+0xc4>)
   23818:	7a1a      	ldrb	r2, [r3, #8]
   2381a:	2a06      	cmp	r2, #6
			job.status = NRF_CLOUD_FOTA_FAILED;
   2381c:	bf0f      	iteee	eq
   2381e:	2302      	moveq	r3, #2
			job.status = current_fota.status;
   23820:	791a      	ldrbne	r2, [r3, #4]
			job.error = current_fota.error;
   23822:	7f1b      	ldrbne	r3, [r3, #28]
			job.status = current_fota.status;
   23824:	713a      	strbne	r2, [r7, #4]
			job.status = NRF_CLOUD_FOTA_FAILED;
   23826:	bf08      	it	eq
   23828:	713b      	strbeq	r3, [r7, #4]
			job.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2382a:	773b      	strb	r3, [r7, #28]
		ret = send_job_update(&job);
   2382c:	4638      	mov	r0, r7
   2382e:	f7ff ff51 	bl	236d4 <send_job_update>
		if (ret) {
   23832:	4604      	mov	r4, r0
   23834:	b330      	cbz	r0, 23884 <report_validated_job_status+0xac>
			LOG_ERR("Error sending job update: %d", ret);
   23836:	466d      	mov	r5, sp
   23838:	b088      	sub	sp, #32
   2383a:	466a      	mov	r2, sp
   2383c:	4b18      	ldr	r3, [pc, #96]	; (238a0 <report_validated_job_status+0xc8>)
   2383e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23842:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23846:	2303      	movs	r3, #3
   23848:	4816      	ldr	r0, [pc, #88]	; (238a4 <report_validated_job_status+0xcc>)
   2384a:	f842 3f10 	str.w	r3, [r2, #16]!
   2384e:	f00f fe7e 	bl	3354e <z_log_msg_static_create.constprop.0>
   23852:	46ad      	mov	sp, r5
   23854:	e016      	b.n	23884 <report_validated_job_status+0xac>
		job.status = NRF_CLOUD_FOTA_FAILED;
   23856:	2302      	movs	r3, #2
   23858:	e7db      	b.n	23812 <report_validated_job_status+0x3a>
		LOG_ERR("Unexpected job validation status: %d",
   2385a:	466c      	mov	r4, sp
   2385c:	b088      	sub	sp, #32
   2385e:	466a      	mov	r2, sp
   23860:	4b11      	ldr	r3, [pc, #68]	; (238a8 <report_validated_job_status+0xd0>)
   23862:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (saved_job.validate) {
   23866:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Unexpected job validation status: %d",
   2386a:	2303      	movs	r3, #3
   2386c:	480d      	ldr	r0, [pc, #52]	; (238a4 <report_validated_job_status+0xcc>)
   2386e:	f842 3f10 	str.w	r3, [r2, #16]!
   23872:	f00f fe6c 	bl	3354e <z_log_msg_static_create.constprop.0>
		ret = save_validate_status(job.info.id, job.info.type,
   23876:	2205      	movs	r2, #5
   23878:	46a5      	mov	sp, r4
   2387a:	7a39      	ldrb	r1, [r7, #8]
   2387c:	68f8      	ldr	r0, [r7, #12]
   2387e:	f7ff fe21 	bl	234c4 <save_validate_status>
   23882:	4604      	mov	r4, r0
}
   23884:	4620      	mov	r0, r4
   23886:	372c      	adds	r7, #44	; 0x2c
   23888:	46bd      	mov	sp, r7
   2388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1;
   2388c:	2401      	movs	r4, #1
   2388e:	e7f9      	b.n	23884 <report_validated_job_status+0xac>
		return -EOPNOTSUPP;
   23890:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   23894:	e7f6      	b.n	23884 <report_validated_job_status+0xac>
   23896:	bf00      	nop
   23898:	2000ccd2 	.word	0x2000ccd2
   2389c:	20010b74 	.word	0x20010b74
   238a0:	0003f45c 	.word	0x0003f45c
   238a4:	00036590 	.word	0x00036590
   238a8:	0003f437 	.word	0x0003f437

000238ac <nrf_cloud_fota_endpoint_set>:
{
   238ac:	b570      	push	{r4, r5, r6, lr}
   238ae:	460e      	mov	r6, r1
   238b0:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   238b2:	b328      	cbz	r0, 23900 <nrf_cloud_fota_endpoint_set+0x54>
   238b4:	b322      	cbz	r2, 23900 <nrf_cloud_fota_endpoint_set+0x54>
   238b6:	6813      	ldr	r3, [r2, #0]
   238b8:	b313      	cbz	r3, 23900 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   238ba:	6853      	ldr	r3, [r2, #4]
   238bc:	b303      	cbz	r3, 23900 <nrf_cloud_fota_endpoint_set+0x54>
   238be:	b1f9      	cbz	r1, 23900 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   238c0:	4b11      	ldr	r3, [pc, #68]	; (23908 <nrf_cloud_fota_endpoint_set+0x5c>)
   238c2:	6018      	str	r0, [r3, #0]
	reset_topics();
   238c4:	f7ff fd2a 	bl	2331c <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   238c8:	4629      	mov	r1, r5
   238ca:	4630      	mov	r0, r6
   238cc:	4b0f      	ldr	r3, [pc, #60]	; (2390c <nrf_cloud_fota_endpoint_set+0x60>)
   238ce:	4a10      	ldr	r2, [pc, #64]	; (23910 <nrf_cloud_fota_endpoint_set+0x64>)
   238d0:	f7ff fd36 	bl	23340 <build_topic>
	if (ret) {
   238d4:	4604      	mov	r4, r0
   238d6:	b978      	cbnz	r0, 238f8 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   238d8:	4629      	mov	r1, r5
   238da:	4630      	mov	r0, r6
   238dc:	4b0d      	ldr	r3, [pc, #52]	; (23914 <nrf_cloud_fota_endpoint_set+0x68>)
   238de:	4a0e      	ldr	r2, [pc, #56]	; (23918 <nrf_cloud_fota_endpoint_set+0x6c>)
   238e0:	f7ff fd2e 	bl	23340 <build_topic>
	if (ret) {
   238e4:	4604      	mov	r4, r0
   238e6:	b938      	cbnz	r0, 238f8 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   238e8:	4629      	mov	r1, r5
   238ea:	4630      	mov	r0, r6
   238ec:	4b0b      	ldr	r3, [pc, #44]	; (2391c <nrf_cloud_fota_endpoint_set+0x70>)
   238ee:	4a0c      	ldr	r2, [pc, #48]	; (23920 <nrf_cloud_fota_endpoint_set+0x74>)
   238f0:	f7ff fd26 	bl	23340 <build_topic>
	if (ret) {
   238f4:	4604      	mov	r4, r0
   238f6:	b108      	cbz	r0, 238fc <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   238f8:	f7ff fd10 	bl	2331c <reset_topics>
}
   238fc:	4620      	mov	r0, r4
   238fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   23900:	f06f 0415 	mvn.w	r4, #21
   23904:	e7fa      	b.n	238fc <nrf_cloud_fota_endpoint_set+0x50>
   23906:	bf00      	nop
   23908:	20010ba0 	.word	0x20010ba0
   2390c:	2000c9c0 	.word	0x2000c9c0
   23910:	0003f479 	.word	0x0003f479
   23914:	2000c9d8 	.word	0x2000c9d8
   23918:	0003f483 	.word	0x0003f483
   2391c:	2000c9cc 	.word	0x2000c9cc
   23920:	0003f490 	.word	0x0003f490

00023924 <nrf_cloud_fota_endpoint_set_and_report>:
{
   23924:	b5b0      	push	{r4, r5, r7, lr}
   23926:	af00      	add	r7, sp, #0
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   23928:	f7ff ffc0 	bl	238ac <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2392c:	4604      	mov	r4, r0
   2392e:	b188      	cbz	r0, 23954 <nrf_cloud_fota_endpoint_set_and_report+0x30>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   23930:	466d      	mov	r5, sp
   23932:	b088      	sub	sp, #32
   23934:	466a      	mov	r2, sp
   23936:	4b11      	ldr	r3, [pc, #68]	; (2397c <nrf_cloud_fota_endpoint_set_and_report+0x58>)
   23938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2393c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23940:	2303      	movs	r3, #3
   23942:	480f      	ldr	r0, [pc, #60]	; (23980 <nrf_cloud_fota_endpoint_set_and_report+0x5c>)
   23944:	f842 3f10 	str.w	r3, [r2, #16]!
   23948:	f00f fe01 	bl	3354e <z_log_msg_static_create.constprop.0>
   2394c:	46ad      	mov	sp, r5
}
   2394e:	4620      	mov	r0, r4
   23950:	46bd      	mov	sp, r7
   23952:	bdb0      	pop	{r4, r5, r7, pc}
	if ((current_fota.status == NRF_CLOUD_FOTA_IN_PROGRESS) &&
   23954:	480b      	ldr	r0, [pc, #44]	; (23984 <nrf_cloud_fota_endpoint_set_and_report+0x60>)
   23956:	7903      	ldrb	r3, [r0, #4]
   23958:	2b01      	cmp	r3, #1
   2395a:	d10a      	bne.n	23972 <nrf_cloud_fota_endpoint_set_and_report+0x4e>
	    (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING)) {
   2395c:	4b0a      	ldr	r3, [pc, #40]	; (23988 <nrf_cloud_fota_endpoint_set_and_report+0x64>)
	if ((current_fota.status == NRF_CLOUD_FOTA_IN_PROGRESS) &&
   2395e:	781b      	ldrb	r3, [r3, #0]
   23960:	2b01      	cmp	r3, #1
   23962:	d106      	bne.n	23972 <nrf_cloud_fota_endpoint_set_and_report+0x4e>
		ret = send_job_update(&current_fota);
   23964:	f7ff feb6 	bl	236d4 <send_job_update>
		if (ret < 0) {
   23968:	1e04      	subs	r4, r0, #0
   2396a:	daf0      	bge.n	2394e <nrf_cloud_fota_endpoint_set_and_report+0x2a>
			send_fota_done_event_if_done();
   2396c:	f7ff fd9a 	bl	234a4 <send_fota_done_event_if_done>
   23970:	e7ed      	b.n	2394e <nrf_cloud_fota_endpoint_set_and_report+0x2a>
		ret = report_validated_job_status();
   23972:	f7ff ff31 	bl	237d8 <report_validated_job_status>
		if (ret > 0) {
   23976:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2397a:	e7e8      	b.n	2394e <nrf_cloud_fota_endpoint_set_and_report+0x2a>
   2397c:	0003f49a 	.word	0x0003f49a
   23980:	00036590 	.word	0x00036590
   23984:	20010b74 	.word	0x20010b74
   23988:	2000ccd2 	.word	0x2000ccd2

0002398c <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2398c:	2200      	movs	r2, #0
   2398e:	4b02      	ldr	r3, [pc, #8]	; (23998 <nrf_cloud_fota_endpoint_clear+0xc>)
   23990:	601a      	str	r2, [r3, #0]
	reset_topics();
   23992:	f7ff bcc3 	b.w	2331c <reset_topics>
   23996:	bf00      	nop
   23998:	20010ba0 	.word	0x20010ba0

0002399c <nrf_cloud_fota_subscribe>:
{
   2399c:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2399e:	466b      	mov	r3, sp
   239a0:	4a0a      	ldr	r2, [pc, #40]	; (239cc <nrf_cloud_fota_subscribe+0x30>)
   239a2:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   239a6:	4a0a      	ldr	r2, [pc, #40]	; (239d0 <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   239a8:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   239ac:	6851      	ldr	r1, [r2, #4]
   239ae:	b149      	cbz	r1, 239c4 <nrf_cloud_fota_subscribe+0x28>
   239b0:	6812      	ldr	r2, [r2, #0]
   239b2:	b13a      	cbz	r2, 239c4 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   239b4:	4619      	mov	r1, r3
   239b6:	4b07      	ldr	r3, [pc, #28]	; (239d4 <nrf_cloud_fota_subscribe+0x38>)
   239b8:	6818      	ldr	r0, [r3, #0]
   239ba:	f00e f98c 	bl	31cd6 <mqtt_subscribe>
}
   239be:	b003      	add	sp, #12
   239c0:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   239c4:	f06f 000d 	mvn.w	r0, #13
   239c8:	e7f9      	b.n	239be <nrf_cloud_fota_subscribe+0x22>
   239ca:	bf00      	nop
   239cc:	000366e8 	.word	0x000366e8
   239d0:	2000c9c0 	.word	0x2000c9c0
   239d4:	20010ba0 	.word	0x20010ba0

000239d8 <nrf_cloud_fota_unsubscribe>:
{
   239d8:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   239da:	466b      	mov	r3, sp
   239dc:	4a0a      	ldr	r2, [pc, #40]	; (23a08 <nrf_cloud_fota_unsubscribe+0x30>)
   239de:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   239e2:	4a0a      	ldr	r2, [pc, #40]	; (23a0c <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   239e4:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   239e8:	6851      	ldr	r1, [r2, #4]
   239ea:	b149      	cbz	r1, 23a00 <nrf_cloud_fota_unsubscribe+0x28>
   239ec:	6812      	ldr	r2, [r2, #0]
   239ee:	b13a      	cbz	r2, 23a00 <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   239f0:	4619      	mov	r1, r3
   239f2:	4b07      	ldr	r3, [pc, #28]	; (23a10 <nrf_cloud_fota_unsubscribe+0x38>)
   239f4:	6818      	ldr	r0, [r3, #0]
   239f6:	f00e f994 	bl	31d22 <mqtt_unsubscribe>
}
   239fa:	b003      	add	sp, #12
   239fc:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   23a00:	f06f 000d 	mvn.w	r0, #13
   23a04:	e7f9      	b.n	239fa <nrf_cloud_fota_unsubscribe+0x22>
   23a06:	bf00      	nop
   23a08:	000366f0 	.word	0x000366f0
   23a0c:	2000c9c0 	.word	0x2000c9c0
   23a10:	20010ba0 	.word	0x20010ba0

00023a14 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   23a14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   23a16:	4b0e      	ldr	r3, [pc, #56]	; (23a50 <nrf_cloud_fota_update_check+0x3c>)
   23a18:	681b      	ldr	r3, [r3, #0]
   23a1a:	b193      	cbz	r3, 23a42 <nrf_cloud_fota_update_check+0x2e>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   23a1c:	4a0d      	ldr	r2, [pc, #52]	; (23a54 <nrf_cloud_fota_update_check+0x40>)
   23a1e:	6813      	ldr	r3, [r2, #0]
   23a20:	b193      	cbz	r3, 23a48 <nrf_cloud_fota_update_check+0x34>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   23a22:	ca07      	ldmia	r2, {r0, r1, r2}
   23a24:	466b      	mov	r3, sp
   23a26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   23a2a:	4a0b      	ldr	r2, [pc, #44]	; (23a58 <nrf_cloud_fota_update_check+0x44>)
	struct mqtt_publish_param param = {
   23a2c:	2104      	movs	r1, #4
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   23a2e:	9203      	str	r2, [sp, #12]
	struct mqtt_publish_param param = {
   23a30:	22c9      	movs	r2, #201	; 0xc9
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   23a32:	4618      	mov	r0, r3
	struct mqtt_publish_param param = {
   23a34:	e9cd 1204 	strd	r1, r2, [sp, #16]
	return publish(&param);
   23a38:	f7ff fe2a 	bl	23690 <publish>
}
   23a3c:	b007      	add	sp, #28
   23a3e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   23a42:	f06f 0005 	mvn.w	r0, #5
   23a46:	e7f9      	b.n	23a3c <nrf_cloud_fota_update_check+0x28>
		return -EHOSTUNREACH;
   23a48:	f06f 0075 	mvn.w	r0, #117	; 0x75
   23a4c:	e7f6      	b.n	23a3c <nrf_cloud_fota_update_check+0x28>
   23a4e:	bf00      	nop
   23a50:	20010ba0 	.word	0x20010ba0
   23a54:	2000c9cc 	.word	0x2000c9cc
   23a58:	0003f4ba 	.word	0x0003f4ba

00023a5c <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   23a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a60:	b093      	sub	sp, #76	; 0x4c
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   23a62:	4bb4      	ldr	r3, [pc, #720]	; (23d34 <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
{
   23a64:	4606      	mov	r6, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   23a66:	6818      	ldr	r0, [r3, #0]
{
   23a68:	af00      	add	r7, sp, #0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   23a6a:	b108      	cbz	r0, 23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
   23a6c:	685b      	ldr	r3, [r3, #4]
   23a6e:	b90b      	cbnz	r3, 23a74 <nrf_cloud_fota_mqtt_evt_handler+0x18>
		return 1;
   23a70:	2401      	movs	r4, #1
		return 1;
	}

	switch (evt->type) {
	case MQTT_EVT_PUBLISH: {
		return handle_mqtt_evt_publish(evt);
   23a72:	e09c      	b.n	23bae <nrf_cloud_fota_mqtt_evt_handler+0x152>
	switch (evt->type) {
   23a74:	f896 a000 	ldrb.w	sl, [r6]
   23a78:	f1ba 0f09 	cmp.w	sl, #9
   23a7c:	f200 81ae 	bhi.w	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
   23a80:	a301      	add	r3, pc, #4	; (adr r3, 23a88 <nrf_cloud_fota_mqtt_evt_handler+0x2c>)
   23a82:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   23a86:	bf00      	nop
   23a88:	00023a71 	.word	0x00023a71
   23a8c:	00023eef 	.word	0x00023eef
   23a90:	00023ab1 	.word	0x00023ab1
   23a94:	00023eab 	.word	0x00023eab
   23a98:	00023a71 	.word	0x00023a71
   23a9c:	00023a71 	.word	0x00023a71
   23aa0:	00023a71 	.word	0x00023a71
   23aa4:	00023e93 	.word	0x00023e93
   23aa8:	00023ea1 	.word	0x00023ea1
   23aac:	00023a71 	.word	0x00023a71
	struct mqtt_puback_param ack = {
   23ab0:	8b33      	ldrh	r3, [r6, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   23ab2:	6871      	ldr	r1, [r6, #4]
	struct mqtt_puback_param ack = {
   23ab4:	81bb      	strh	r3, [r7, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   23ab6:	f011 fca4 	bl	35402 <strstr>
   23aba:	2800      	cmp	r0, #0
   23abc:	d0d8      	beq.n	23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   23abe:	2101      	movs	r1, #1
   23ac0:	6970      	ldr	r0, [r6, #20]
   23ac2:	4408      	add	r0, r1
   23ac4:	f7fd fd6e 	bl	215a4 <nrf_cloud_calloc>
	if (!payload) {
   23ac8:	4681      	mov	r9, r0
   23aca:	bb00      	cbnz	r0, 23b0e <nrf_cloud_fota_mqtt_evt_handler+0xb2>
		LOG_ERR("Unable to allocate memory for job");
   23acc:	4b9a      	ldr	r3, [pc, #616]	; (23d38 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   23ace:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   23ad4:	2302      	movs	r3, #2
   23ad6:	4899      	ldr	r0, [pc, #612]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   23ada:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23ade:	f00f fd36 	bl	3354e <z_log_msg_static_create.constprop.0>
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   23ae2:	7b35      	ldrb	r5, [r6, #12]
   23ae4:	2d00      	cmp	r5, #0
   23ae6:	f040 815c 	bne.w	23da2 <nrf_cloud_fota_mqtt_evt_handler+0x346>
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   23aea:	4b95      	ldr	r3, [pc, #596]	; (23d40 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   23aec:	7a1b      	ldrb	r3, [r3, #8]
   23aee:	2b06      	cmp	r3, #6
   23af0:	f000 815d 	beq.w	23dae <nrf_cloud_fota_mqtt_evt_handler+0x352>
		current_fota.parsed_payload = payload_array;
   23af4:	4c92      	ldr	r4, [pc, #584]	; (23d40 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   23af6:	6025      	str	r5, [r4, #0]
	switch (job->info.type) {
   23af8:	2b05      	cmp	r3, #5
   23afa:	f200 8171 	bhi.w	23de0 <nrf_cloud_fota_mqtt_evt_handler+0x384>
   23afe:	e8df f013 	tbh	[pc, r3, lsl #1]
   23b02:	017f      	.short	0x017f
   23b04:	017f0181 	.word	0x017f0181
   23b08:	016f016f 	.word	0x016f016f
   23b0c:	0159      	.short	0x0159
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   23b0e:	4b8d      	ldr	r3, [pc, #564]	; (23d44 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   23b10:	4601      	mov	r1, r0
   23b12:	6972      	ldr	r2, [r6, #20]
   23b14:	6818      	ldr	r0, [r3, #0]
   23b16:	f00e f9b4 	bl	31e82 <mqtt_readall_publish_payload>
	if (ret) {
   23b1a:	4604      	mov	r4, r0
   23b1c:	2800      	cmp	r0, #0
   23b1e:	d04b      	beq.n	23bb8 <nrf_cloud_fota_mqtt_evt_handler+0x15c>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   23b20:	466d      	mov	r5, sp
   23b22:	b088      	sub	sp, #32
   23b24:	466a      	mov	r2, sp
   23b26:	4b88      	ldr	r3, [pc, #544]	; (23d48 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   23b28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23b2c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23b30:	2303      	movs	r3, #3
   23b32:	4882      	ldr	r0, [pc, #520]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23b34:	f842 3f10 	str.w	r3, [r2, #16]!
   23b38:	f00f fd09 	bl	3354e <z_log_msg_static_create.constprop.0>
   23b3c:	46ad      	mov	sp, r5
	cJSON *payload_array = NULL;
   23b3e:	2500      	movs	r5, #0
	bool skip = false;
   23b40:	46ab      	mov	fp, r5
	bool reject_job = false;
   23b42:	46a8      	mov	r8, r5
		nrf_cloud_free(payload);
   23b44:	4648      	mov	r0, r9
   23b46:	f7fd fd33 	bl	215b0 <nrf_cloud_free>
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   23b4a:	7b33      	ldrb	r3, [r6, #12]
   23b4c:	b1cb      	cbz	r3, 23b82 <nrf_cloud_fota_mqtt_evt_handler+0x126>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   23b4e:	4b7d      	ldr	r3, [pc, #500]	; (23d44 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   23b50:	f107 010c 	add.w	r1, r7, #12
   23b54:	6818      	ldr	r0, [r3, #0]
   23b56:	f00e f870 	bl	31c3a <mqtt_publish_qos1_ack>
		if (ack_res) {
   23b5a:	4681      	mov	r9, r0
   23b5c:	b188      	cbz	r0, 23b82 <nrf_cloud_fota_mqtt_evt_handler+0x126>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   23b5e:	466e      	mov	r6, sp
   23b60:	b088      	sub	sp, #32
   23b62:	466a      	mov	r2, sp
   23b64:	4b79      	ldr	r3, [pc, #484]	; (23d4c <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   23b66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23b6a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23b6e:	2303      	movs	r3, #3
   23b70:	4872      	ldr	r0, [pc, #456]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23b72:	f842 3f10 	str.w	r3, [r2, #16]!
   23b76:	f00f fcea 	bl	3354e <z_log_msg_static_create.constprop.0>
   23b7a:	2c00      	cmp	r4, #0
   23b7c:	bf08      	it	eq
   23b7e:	464c      	moveq	r4, r9
   23b80:	46b5      	mov	sp, r6
	if (reject_job) {
   23b82:	f1b8 0f00 	cmp.w	r8, #0
   23b86:	d007      	beq.n	23b98 <nrf_cloud_fota_mqtt_evt_handler+0x13c>
			current_fota.error = NRF_CLOUD_FOTA_ERROR_BAD_JOB_INFO;
   23b88:	2306      	movs	r3, #6
   23b8a:	486d      	ldr	r0, [pc, #436]	; (23d40 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   23b8c:	7703      	strb	r3, [r0, #28]
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   23b8e:	7103      	strb	r3, [r0, #4]
			(void)send_job_update(&current_fota);
   23b90:	f7ff fda0 	bl	236d4 <send_job_update>
			cleanup_job(&current_fota);
   23b94:	f7ff fc50 	bl	23438 <cleanup_job.constprop.0>
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   23b98:	f1bb 0f00 	cmp.w	fp, #0
   23b9c:	d103      	bne.n	23ba6 <nrf_cloud_fota_mqtt_evt_handler+0x14a>
   23b9e:	4b68      	ldr	r3, [pc, #416]	; (23d40 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   23ba0:	7a1b      	ldrb	r3, [r3, #8]
   23ba2:	2b06      	cmp	r3, #6
   23ba4:	d1a6      	bne.n	23af4 <nrf_cloud_fota_mqtt_evt_handler+0x98>
		if (payload_array) {
   23ba6:	b115      	cbz	r5, 23bae <nrf_cloud_fota_mqtt_evt_handler+0x152>
			cJSON_Delete(payload_array);
   23ba8:	4628      	mov	r0, r5
   23baa:	f001 f8a5 	bl	24cf8 <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   23bae:	4620      	mov	r0, r4
   23bb0:	374c      	adds	r7, #76	; 0x4c
   23bb2:	46bd      	mov	sp, r7
   23bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return current_fota.parsed_payload != NULL;
   23bb8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23d40 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>
   23bbc:	f8d8 b000 	ldr.w	fp, [r8]
	if (nrf_cloud_fota_is_active() && !ble_id) {
   23bc0:	f1bb 0f00 	cmp.w	fp, #0
   23bc4:	d00e      	beq.n	23be4 <nrf_cloud_fota_mqtt_evt_handler+0x188>
		LOG_INF("Job in progress... skipping");
   23bc6:	4b62      	ldr	r3, [pc, #392]	; (23d50 <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
	cJSON *payload_array = NULL;
   23bc8:	4625      	mov	r5, r4
		LOG_INF("Job in progress... skipping");
   23bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   23bcc:	2302      	movs	r3, #2
   23bce:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   23bd2:	485a      	ldr	r0, [pc, #360]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   23bd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23bda:	f00f fcb8 	bl	3354e <z_log_msg_static_create.constprop.0>
		skip = true;
   23bde:	f04f 0b01 	mov.w	fp, #1
   23be2:	e099      	b.n	23d18 <nrf_cloud_fota_mqtt_evt_handler+0x2bc>
	char *job_id = NULL;
   23be4:	6138      	str	r0, [r7, #16]
	cJSON *array = cJSON_Parse(payload_in);
   23be6:	4648      	mov	r0, r9
   23be8:	f00f fdff 	bl	337ea <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   23bec:	4605      	mov	r5, r0
   23bee:	bb18      	cbnz	r0, 23c38 <nrf_cloud_fota_mqtt_evt_handler+0x1dc>
		LOG_ERR("Invalid JSON array");
   23bf0:	4b58      	ldr	r3, [pc, #352]	; (23d54 <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   23bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   23bf8:	2302      	movs	r3, #2
   23bfa:	4850      	ldr	r0, [pc, #320]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   23bfe:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23c02:	f00f fca4 	bl	3354e <z_log_msg_static_create.constprop.0>
	if (job_id == NULL) {
   23c06:	6939      	ldr	r1, [r7, #16]
   23c08:	b941      	cbnz	r1, 23c1c <nrf_cloud_fota_mqtt_evt_handler+0x1c0>
		memset(job_info, 0, sizeof(*job_info));
   23c0a:	2214      	movs	r2, #20
   23c0c:	4852      	ldr	r0, [pc, #328]	; (23d58 <nrf_cloud_fota_mqtt_evt_handler+0x2fc>)
   23c0e:	f011 fa0d 	bl	3502c <memset>
		if (array) {
   23c12:	2d00      	cmp	r5, #0
   23c14:	f040 80ae 	bne.w	23d74 <nrf_cloud_fota_mqtt_evt_handler+0x318>
		*array_out = NULL;
   23c18:	f04f 0b00 	mov.w	fp, #0
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   23c1c:	2306      	movs	r3, #6
   23c1e:	f888 3008 	strb.w	r3, [r8, #8]
		reject_job = (job_info->id != NULL);
   23c22:	f8d8 300c 	ldr.w	r3, [r8, #12]
   23c26:	465d      	mov	r5, fp
   23c28:	f1b3 0800 	subs.w	r8, r3, #0
   23c2c:	bf18      	it	ne
   23c2e:	f04f 0801 	movne.w	r8, #1
	bool skip = false;
   23c32:	f04f 0b00 	mov.w	fp, #0
   23c36:	e785      	b.n	23b44 <nrf_cloud_fota_mqtt_evt_handler+0xe8>
	if (!array || !cJSON_IsArray(array)) {
   23c38:	f00f fef8 	bl	33a2c <cJSON_IsArray>
   23c3c:	2800      	cmp	r0, #0
   23c3e:	d0d7      	beq.n	23bf0 <nrf_cloud_fota_mqtt_evt_handler+0x194>
	temp = cJSON_PrintUnformatted(array);
   23c40:	4628      	mov	r0, r5
   23c42:	f00f fdd6 	bl	337f2 <cJSON_PrintUnformatted>
	if (temp) {
   23c46:	b108      	cbz	r0, 23c4c <nrf_cloud_fota_mqtt_evt_handler+0x1f0>
		cJSON_FreeString(temp);
   23c48:	f00f fef7 	bl	33a3a <cJSON_FreeString>
	get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset, &job_id);
   23c4c:	2100      	movs	r1, #0
   23c4e:	4628      	mov	r0, r5
   23c50:	f107 0210 	add.w	r2, r7, #16
   23c54:	f7fd fc08 	bl	21468 <get_string_from_array>
	job_info->id = job_id;
   23c58:	693b      	ldr	r3, [r7, #16]
   23c5a:	f8c8 300c 	str.w	r3, [r8, #12]
	if ((job_id == NULL) ||
   23c5e:	2b00      	cmp	r3, #0
   23c60:	d040      	beq.n	23ce4 <nrf_cloud_fota_mqtt_evt_handler+0x288>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   23c62:	2103      	movs	r1, #3
   23c64:	4628      	mov	r0, r5
   23c66:	4a3d      	ldr	r2, [pc, #244]	; (23d5c <nrf_cloud_fota_mqtt_evt_handler+0x300>)
   23c68:	f7fd fbfe 	bl	21468 <get_string_from_array>
	if ((job_id == NULL) ||
   23c6c:	2800      	cmp	r0, #0
   23c6e:	d139      	bne.n	23ce4 <nrf_cloud_fota_mqtt_evt_handler+0x288>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   23c70:	2104      	movs	r1, #4
   23c72:	4628      	mov	r0, r5
   23c74:	4a3a      	ldr	r2, [pc, #232]	; (23d60 <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   23c76:	f7fd fbf7 	bl	21468 <get_string_from_array>
				  &job_info->host) ||
   23c7a:	4683      	mov	fp, r0
   23c7c:	bb90      	cbnz	r0, 23ce4 <nrf_cloud_fota_mqtt_evt_handler+0x288>
	cJSON *item = cJSON_GetArrayItem(array, index);
   23c7e:	2101      	movs	r1, #1
   23c80:	4628      	mov	r0, r5
   23c82:	f00f fdc1 	bl	33808 <cJSON_GetArrayItem>
   23c86:	6078      	str	r0, [r7, #4]
	if (!cJSON_IsNumber(item)) {
   23c88:	f00f febb 	bl	33a02 <cJSON_IsNumber>
   23c8c:	b350      	cbz	r0, 23ce4 <nrf_cloud_fota_mqtt_evt_handler+0x288>
	*number_out = item->valueint;
   23c8e:	687b      	ldr	r3, [r7, #4]
	cJSON *item = cJSON_GetArrayItem(array, index);
   23c90:	2102      	movs	r1, #2
	*number_out = item->valueint;
   23c92:	695b      	ldr	r3, [r3, #20]
	cJSON *item = cJSON_GetArrayItem(array, index);
   23c94:	4628      	mov	r0, r5
	*number_out = item->valueint;
   23c96:	f8c8 3008 	str.w	r3, [r8, #8]
	cJSON *item = cJSON_GetArrayItem(array, index);
   23c9a:	f00f fdb5 	bl	33808 <cJSON_GetArrayItem>
   23c9e:	6078      	str	r0, [r7, #4]
	if (!cJSON_IsNumber(item)) {
   23ca0:	f00f feaf 	bl	33a02 <cJSON_IsNumber>
   23ca4:	b1f0      	cbz	r0, 23ce4 <nrf_cloud_fota_mqtt_evt_handler+0x288>
	*number_out = item->valueint;
   23ca6:	687b      	ldr	r3, [r7, #4]
	job_id_len = strlen(job_info->id);
   23ca8:	f8d8 100c 	ldr.w	r1, [r8, #12]
	*number_out = item->valueint;
   23cac:	695b      	ldr	r3, [r3, #20]
	job_id_len = strlen(job_info->id);
   23cae:	4608      	mov	r0, r1
   23cb0:	6079      	str	r1, [r7, #4]
	*number_out = item->valueint;
   23cb2:	f8c8 3018 	str.w	r3, [r8, #24]
	job_id_len = strlen(job_info->id);
   23cb6:	f7e5 fb30 	bl	931a <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   23cba:	2824      	cmp	r0, #36	; 0x24
   23cbc:	6879      	ldr	r1, [r7, #4]
   23cbe:	d91e      	bls.n	23cfe <nrf_cloud_fota_mqtt_evt_handler+0x2a2>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   23cc0:	46eb      	mov	fp, sp
   23cc2:	b088      	sub	sp, #32
   23cc4:	466a      	mov	r2, sp
   23cc6:	4b27      	ldr	r3, [pc, #156]	; (23d64 <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   23cc8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   23ccc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23cd0:	2324      	movs	r3, #36	; 0x24
   23cd2:	61d3      	str	r3, [r2, #28]
   23cd4:	2304      	movs	r3, #4
   23cd6:	f842 3f10 	str.w	r3, [r2, #16]!
   23cda:	4818      	ldr	r0, [pc, #96]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23cdc:	f00f fc37 	bl	3354e <z_log_msg_static_create.constprop.0>
   23ce0:	46dd      	mov	sp, fp
		goto cleanup;
   23ce2:	e00a      	b.n	23cfa <nrf_cloud_fota_mqtt_evt_handler+0x29e>
		LOG_ERR("Error parsing job info");
   23ce4:	4b20      	ldr	r3, [pc, #128]	; (23d68 <nrf_cloud_fota_mqtt_evt_handler+0x30c>)
   23ce6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   23cec:	2302      	movs	r3, #2
   23cee:	4813      	ldr	r0, [pc, #76]	; (23d3c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   23cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   23cf2:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23cf6:	f00f fc2a 	bl	3354e <z_log_msg_static_create.constprop.0>
{
   23cfa:	46ab      	mov	fp, r5
   23cfc:	e783      	b.n	23c06 <nrf_cloud_fota_mqtt_evt_handler+0x1aa>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   23cfe:	f898 3008 	ldrb.w	r3, [r8, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   23d02:	2b05      	cmp	r3, #5
   23d04:	d80a      	bhi.n	23d1c <nrf_cloud_fota_mqtt_evt_handler+0x2c0>
	} else if (strncmp(last_job, job_info->id, sizeof(last_job)) == 0) {
   23d06:	f8df 8064 	ldr.w	r8, [pc, #100]	; 23d6c <nrf_cloud_fota_mqtt_evt_handler+0x310>
   23d0a:	2225      	movs	r2, #37	; 0x25
   23d0c:	4640      	mov	r0, r8
   23d0e:	f011 fb33 	bl	35378 <strncmp>
   23d12:	4604      	mov	r4, r0
   23d14:	b390      	cbz	r0, 23d7c <nrf_cloud_fota_mqtt_evt_handler+0x320>
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   23d16:	465c      	mov	r4, fp
	bool reject_job = false;
   23d18:	46a0      	mov	r8, r4
   23d1a:	e713      	b.n	23b44 <nrf_cloud_fota_mqtt_evt_handler+0xe8>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   23d1c:	46eb      	mov	fp, sp
   23d1e:	b088      	sub	sp, #32
   23d20:	466a      	mov	r2, sp
   23d22:	4913      	ldr	r1, [pc, #76]	; (23d70 <nrf_cloud_fota_mqtt_evt_handler+0x314>)
   23d24:	e9c2 1305 	strd	r1, r3, [r2, #20]
   23d28:	2303      	movs	r3, #3
   23d2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23d2e:	f842 3f10 	str.w	r3, [r2, #16]!
   23d32:	e7d2      	b.n	23cda <nrf_cloud_fota_mqtt_evt_handler+0x27e>
   23d34:	2000c9c0 	.word	0x2000c9c0
   23d38:	0003f4bf 	.word	0x0003f4bf
   23d3c:	00036590 	.word	0x00036590
   23d40:	20010b74 	.word	0x20010b74
   23d44:	20010ba0 	.word	0x20010ba0
   23d48:	0003f4e1 	.word	0x0003f4e1
   23d4c:	0003f5af 	.word	0x0003f5af
   23d50:	0003f500 	.word	0x0003f500
   23d54:	0003f51c 	.word	0x0003f51c
   23d58:	20010b7c 	.word	0x20010b7c
   23d5c:	20010b84 	.word	0x20010b84
   23d60:	20010b88 	.word	0x20010b88
   23d64:	0003f546 	.word	0x0003f546
   23d68:	0003f52f 	.word	0x0003f52f
   23d6c:	2001284c 	.word	0x2001284c
   23d70:	0003f574 	.word	0x0003f574
			cJSON_Delete(array);
   23d74:	4628      	mov	r0, r5
   23d76:	f000 ffbf 	bl	24cf8 <cJSON_Delete>
   23d7a:	e74d      	b.n	23c18 <nrf_cloud_fota_mqtt_evt_handler+0x1bc>
		LOG_INF("Job %s already completed... skipping", last_job);
   23d7c:	46eb      	mov	fp, sp
   23d7e:	b088      	sub	sp, #32
   23d80:	466a      	mov	r2, sp
   23d82:	4b5c      	ldr	r3, [pc, #368]	; (23ef4 <nrf_cloud_fota_mqtt_evt_handler+0x498>)
   23d84:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   23d88:	e9c2 3805 	strd	r3, r8, [r2, #20]
   23d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
   23d90:	8393      	strh	r3, [r2, #28]
   23d92:	4b59      	ldr	r3, [pc, #356]	; (23ef8 <nrf_cloud_fota_mqtt_evt_handler+0x49c>)
   23d94:	4859      	ldr	r0, [pc, #356]	; (23efc <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
   23d96:	f842 3f10 	str.w	r3, [r2, #16]!
   23d9a:	f00f fbd8 	bl	3354e <z_log_msg_static_create.constprop.0>
   23d9e:	46dd      	mov	sp, fp
   23da0:	e71d      	b.n	23bde <nrf_cloud_fota_mqtt_evt_handler+0x182>
	cJSON *payload_array = NULL;
   23da2:	464d      	mov	r5, r9
	bool skip = false;
   23da4:	46cb      	mov	fp, r9
	bool reject_job = false;
   23da6:	46c8      	mov	r8, r9
		ret = -ENOMEM;
   23da8:	f06f 040b 	mvn.w	r4, #11
   23dac:	e6cf      	b.n	23b4e <nrf_cloud_fota_mqtt_evt_handler+0xf2>
   23dae:	f06f 040b 	mvn.w	r4, #11
   23db2:	e6fc      	b.n	23bae <nrf_cloud_fota_mqtt_evt_handler+0x152>
			LOG_ERR("Not configured for full modem FOTA");
   23db4:	4b52      	ldr	r3, [pc, #328]	; (23f00 <nrf_cloud_fota_mqtt_evt_handler+0x4a4>)
   23db6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   23dbc:	2302      	movs	r3, #2
   23dbe:	484f      	ldr	r0, [pc, #316]	; (23efc <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
   23dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   23dc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23dc6:	f00f fbc2 	bl	3354e <z_log_msg_static_create.constprop.0>
		job->status = NRF_CLOUD_FOTA_REJECTED;
   23dca:	2306      	movs	r3, #6
   23dcc:	7123      	strb	r3, [r4, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_BAD_TYPE;
   23dce:	2307      	movs	r3, #7
   23dd0:	7723      	strb	r3, [r4, #28]
		(void)send_job_update(&current_fota);
   23dd2:	484c      	ldr	r0, [pc, #304]	; (23f04 <nrf_cloud_fota_mqtt_evt_handler+0x4a8>)
   23dd4:	f7ff fc7e 	bl	236d4 <send_job_update>
			cleanup_job(&current_fota);
   23dd8:	f7ff fb2e 	bl	23438 <cleanup_job.constprop.0>
	return 0;
   23ddc:	2400      	movs	r4, #0
   23dde:	e6e6      	b.n	23bae <nrf_cloud_fota_mqtt_evt_handler+0x152>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   23de0:	466d      	mov	r5, sp
   23de2:	b088      	sub	sp, #32
   23de4:	466a      	mov	r2, sp
   23de6:	4948      	ldr	r1, [pc, #288]	; (23f08 <nrf_cloud_fota_mqtt_evt_handler+0x4ac>)
   23de8:	4844      	ldr	r0, [pc, #272]	; (23efc <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
	switch (job->info.type) {
   23dea:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   23dee:	2303      	movs	r3, #3
   23df0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23df4:	f842 3f10 	str.w	r3, [r2, #16]!
   23df8:	f00f fba9 	bl	3354e <z_log_msg_static_create.constprop.0>
   23dfc:	46ad      	mov	sp, r5
	if (ret == -EFTYPE) {
   23dfe:	e7e4      	b.n	23dca <nrf_cloud_fota_mqtt_evt_handler+0x36e>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   23e00:	f04f 0a01 	mov.w	sl, #1
	struct nrf_cloud_download_data dl = {
   23e04:	2220      	movs	r2, #32
   23e06:	2100      	movs	r1, #0
   23e08:	f107 0028 	add.w	r0, r7, #40	; 0x28
   23e0c:	f011 f90e 	bl	3502c <memset>
   23e10:	6923      	ldr	r3, [r4, #16]
   23e12:	2601      	movs	r6, #1
   23e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   23e16:	6963      	ldr	r3, [r4, #20]
   23e18:	f887 6028 	strb.w	r6, [r7, #40]	; 0x28
   23e1c:	633b      	str	r3, [r7, #48]	; 0x30
   23e1e:	4b3b      	ldr	r3, [pc, #236]	; (23f0c <nrf_cloud_fota_mqtt_evt_handler+0x4b0>)
   23e20:	f887 6038 	strb.w	r6, [r7, #56]	; 0x38
   23e24:	637b      	str	r3, [r7, #52]	; 0x34
   23e26:	f240 63a4 	movw	r3, #1700	; 0x6a4
   23e2a:	f887 a044 	strb.w	sl, [r7, #68]	; 0x44
   23e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	ret = nrf_cloud_download_start(&dl);
   23e30:	f107 0028 	add.w	r0, r7, #40	; 0x28
   23e34:	f000 f874 	bl	23f20 <nrf_cloud_download_start>
	if (ret) {
   23e38:	4605      	mov	r5, r0
   23e3a:	b1a0      	cbz	r0, 23e66 <nrf_cloud_fota_mqtt_evt_handler+0x40a>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   23e3c:	46e8      	mov	r8, sp
   23e3e:	b088      	sub	sp, #32
   23e40:	466a      	mov	r2, sp
   23e42:	4b33      	ldr	r3, [pc, #204]	; (23f10 <nrf_cloud_fota_mqtt_evt_handler+0x4b4>)
   23e44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23e48:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23e4c:	2303      	movs	r3, #3
   23e4e:	482b      	ldr	r0, [pc, #172]	; (23efc <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
   23e50:	f842 3f10 	str.w	r3, [r2, #16]!
   23e54:	f00f fb7b 	bl	3354e <z_log_msg_static_create.constprop.0>
		job->status = NRF_CLOUD_FOTA_FAILED;
   23e58:	2002      	movs	r0, #2
   23e5a:	46c5      	mov	sp, r8
   23e5c:	7120      	strb	r0, [r4, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   23e5e:	7726      	strb	r6, [r4, #28]
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, job);
   23e60:	f7ff fafa 	bl	23458 <send_event.constprop.0>
   23e64:	e7b5      	b.n	23dd2 <nrf_cloud_fota_mqtt_evt_handler+0x376>
		LOG_INF("Downloading update");
   23e66:	4b2b      	ldr	r3, [pc, #172]	; (23f14 <nrf_cloud_fota_mqtt_evt_handler+0x4b8>)
   23e68:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   23e6c:	627b      	str	r3, [r7, #36]	; 0x24
   23e6e:	2302      	movs	r3, #2
   23e70:	f107 0220 	add.w	r2, r7, #32
   23e74:	623b      	str	r3, [r7, #32]
   23e76:	4821      	ldr	r0, [pc, #132]	; (23efc <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
   23e78:	f00f fb69 	bl	3354e <z_log_msg_static_create.constprop.0>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   23e7c:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   23e7e:	4628      	mov	r0, r5
		job->sent_dl_progress = 0;
   23e80:	e9c4 5508 	strd	r5, r5, [r4, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   23e84:	7123      	strb	r3, [r4, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   23e86:	f7ff fae7 	bl	23458 <send_event.constprop.0>
		(void)send_job_update(&current_fota);
   23e8a:	481e      	ldr	r0, [pc, #120]	; (23f04 <nrf_cloud_fota_mqtt_evt_handler+0x4a8>)
   23e8c:	f7ff fc22 	bl	236d4 <send_job_update>
		if (ret) {
   23e90:	e7a4      	b.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   23e92:	88b3      	ldrh	r3, [r6, #4]
   23e94:	2b67      	cmp	r3, #103	; 0x67
   23e96:	f47f adeb 	bne.w	23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
		nrf_cloud_fota_update_check();
   23e9a:	f7ff fdbb 	bl	23a14 <nrf_cloud_fota_update_check>
		break;
   23e9e:	e79d      	b.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   23ea0:	88b4      	ldrh	r4, [r6, #4]
   23ea2:	3c99      	subs	r4, #153	; 0x99
   23ea4:	bf18      	it	ne
   23ea6:	2401      	movne	r4, #1
   23ea8:	e681      	b.n	23bae <nrf_cloud_fota_mqtt_evt_handler+0x152>
		switch (evt->param.puback.message_id) {
   23eaa:	88b3      	ldrh	r3, [r6, #4]
   23eac:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
   23eb0:	d00a      	beq.n	23ec8 <nrf_cloud_fota_mqtt_evt_handler+0x46c>
   23eb2:	d804      	bhi.n	23ebe <nrf_cloud_fota_mqtt_evt_handler+0x462>
   23eb4:	3bc9      	subs	r3, #201	; 0xc9
   23eb6:	2b01      	cmp	r3, #1
   23eb8:	f63f adda 	bhi.w	23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
   23ebc:	e78e      	b.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
   23ebe:	f240 122f 	movw	r2, #303	; 0x12f
   23ec2:	4293      	cmp	r3, r2
   23ec4:	d08a      	beq.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
   23ec6:	e5d3      	b.n	23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
		switch (saved_job.validate) {
   23ec8:	4913      	ldr	r1, [pc, #76]	; (23f18 <nrf_cloud_fota_mqtt_evt_handler+0x4bc>)
   23eca:	780b      	ldrb	r3, [r1, #0]
   23ecc:	2b04      	cmp	r3, #4
   23ece:	d805      	bhi.n	23edc <nrf_cloud_fota_mqtt_evt_handler+0x480>
   23ed0:	2b01      	cmp	r3, #1
   23ed2:	d806      	bhi.n	23ee2 <nrf_cloud_fota_mqtt_evt_handler+0x486>
   23ed4:	d182      	bne.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
			send_fota_done_event_if_done();
   23ed6:	f7ff fae5 	bl	234a4 <send_fota_done_event_if_done>
			break;
   23eda:	e77f      	b.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
   23edc:	2b06      	cmp	r3, #6
   23ede:	f47f af7d 	bne.w	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
			save_validate_status(saved_job.id, saved_job.type,
   23ee2:	2205      	movs	r2, #5
   23ee4:	7849      	ldrb	r1, [r1, #1]
   23ee6:	480d      	ldr	r0, [pc, #52]	; (23f1c <nrf_cloud_fota_mqtt_evt_handler+0x4c0>)
   23ee8:	f7ff faec 	bl	234c4 <save_validate_status>
			break;
   23eec:	e776      	b.n	23ddc <nrf_cloud_fota_mqtt_evt_handler+0x380>
		nrf_cloud_fota_endpoint_clear();
   23eee:	f7ff fd4d 	bl	2398c <nrf_cloud_fota_endpoint_clear>
   23ef2:	e5bd      	b.n	23a70 <nrf_cloud_fota_mqtt_evt_handler+0x14>
   23ef4:	0003f58a 	.word	0x0003f58a
   23ef8:	01000003 	.word	0x01000003
   23efc:	00036590 	.word	0x00036590
   23f00:	0003f5c3 	.word	0x0003f5c3
   23f04:	20010b74 	.word	0x20010b74
   23f08:	0003f5e6 	.word	0x0003f5e6
   23f0c:	000374a8 	.word	0x000374a8
   23f10:	0003f5fe 	.word	0x0003f5fe
   23f14:	0003f620 	.word	0x0003f620
   23f18:	2000ccd2 	.word	0x2000ccd2
   23f1c:	2000ccd4 	.word	0x2000ccd4

00023f20 <nrf_cloud_download_start>:
	active_dl.type = NRF_CLOUD_DL_TYPE_NONE;
	k_mutex_unlock(&active_dl_mutex);
}

int nrf_cloud_download_start(struct nrf_cloud_download_data *const dl)
{
   23f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f22:	b089      	sub	sp, #36	; 0x24
	if (!dl || !dl->path || (dl->type <= NRF_CLOUD_DL_TYPE_NONE) ||
   23f24:	4604      	mov	r4, r0
{
   23f26:	af02      	add	r7, sp, #8
	if (!dl || !dl->path || (dl->type <= NRF_CLOUD_DL_TYPE_NONE) ||
   23f28:	2800      	cmp	r0, #0
   23f2a:	f000 8087 	beq.w	2403c <nrf_cloud_download_start+0x11c>
   23f2e:	6883      	ldr	r3, [r0, #8]
   23f30:	2b00      	cmp	r3, #0
   23f32:	f000 8083 	beq.w	2403c <nrf_cloud_download_start+0x11c>
   23f36:	7803      	ldrb	r3, [r0, #0]
   23f38:	3b01      	subs	r3, #1
   23f3a:	2b01      	cmp	r3, #1
   23f3c:	d87e      	bhi.n	2403c <nrf_cloud_download_start+0x11c>
	int ret = 0;

	k_mutex_lock(&active_dl_mutex, K_FOREVER);

	/* FOTA has priority */
	if ((active_dl.type == NRF_CLOUD_DL_TYPE_FOTA) ||
   23f3e:	4e41      	ldr	r6, [pc, #260]	; (24044 <nrf_cloud_download_start+0x124>)
	return z_impl_k_mutex_lock(mutex, timeout);
   23f40:	f04f 33ff 	mov.w	r3, #4294967295
   23f44:	f04f 32ff 	mov.w	r2, #4294967295
   23f48:	483f      	ldr	r0, [pc, #252]	; (24048 <nrf_cloud_download_start+0x128>)
   23f4a:	f004 fc9b 	bl	28884 <z_impl_k_mutex_lock>
   23f4e:	7833      	ldrb	r3, [r6, #0]
   23f50:	2b01      	cmp	r3, #1
   23f52:	d003      	beq.n	23f5c <nrf_cloud_download_start+0x3c>
	    ((active_dl.type != NRF_CLOUD_DL_TYPE_NONE) &&
	     (dl->type != NRF_CLOUD_DL_TYPE_FOTA))) {
   23f54:	7822      	ldrb	r2, [r4, #0]
	if ((active_dl.type == NRF_CLOUD_DL_TYPE_FOTA) ||
   23f56:	b35b      	cbz	r3, 23fb0 <nrf_cloud_download_start+0x90>
	    ((active_dl.type != NRF_CLOUD_DL_TYPE_NONE) &&
   23f58:	2a01      	cmp	r2, #1
   23f5a:	d008      	beq.n	23f6e <nrf_cloud_download_start+0x4e>
	return z_impl_k_mutex_unlock(mutex);
   23f5c:	483a      	ldr	r0, [pc, #232]	; (24048 <nrf_cloud_download_start+0x128>)
   23f5e:	f004 fd61 	bl	28a24 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&active_dl_mutex);
		/* A download of equal or higher priority is already active. */
		return -EBUSY;
   23f62:	f06f 050f 	mvn.w	r5, #15
		active_dl = *dl;
	}
	k_mutex_unlock(&active_dl_mutex);

	return ret;
}
   23f66:	4628      	mov	r0, r5
   23f68:	371c      	adds	r7, #28
   23f6a:	46bd      	mov	sp, r7
   23f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (active_dl.type == NRF_CLOUD_DL_TYPE_DL_CLIENT) {
   23f6e:	2b02      	cmp	r3, #2
   23f70:	d11e      	bne.n	23fb0 <nrf_cloud_download_start+0x90>
		LOG_INF("Stopping active download, incoming FOTA update download has priority");
   23f72:	466d      	mov	r5, sp
   23f74:	4a35      	ldr	r2, [pc, #212]	; (2404c <nrf_cloud_download_start+0x12c>)
   23f76:	e9c7 3204 	strd	r3, r2, [r7, #16]
   23f7a:	4835      	ldr	r0, [pc, #212]	; (24050 <nrf_cloud_download_start+0x130>)
   23f7c:	2300      	movs	r3, #0
   23f7e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   23f82:	f107 0210 	add.w	r2, r7, #16
   23f86:	f7ea fc49 	bl	e81c <z_impl_z_log_msg_static_create>
		ret = download_client_disconnect(active_dl.dlc);
   23f8a:	69f0      	ldr	r0, [r6, #28]
   23f8c:	f00f fb10 	bl	335b0 <download_client_disconnect>
		if (ret) {
   23f90:	b170      	cbz	r0, 23fb0 <nrf_cloud_download_start+0x90>
			LOG_ERR("download_client_disconnect() failed, error %d", ret);
   23f92:	b088      	sub	sp, #32
   23f94:	aa02      	add	r2, sp, #8
   23f96:	4b2f      	ldr	r3, [pc, #188]	; (24054 <nrf_cloud_download_start+0x134>)
   23f98:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23f9c:	2303      	movs	r3, #3
   23f9e:	f842 3f10 	str.w	r3, [r2, #16]!
   23fa2:	2300      	movs	r3, #0
   23fa4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23fa8:	4829      	ldr	r0, [pc, #164]	; (24050 <nrf_cloud_download_start+0x130>)
   23faa:	f7ea fc37 	bl	e81c <z_impl_z_log_msg_static_create>
   23fae:	46ad      	mov	sp, r5
	if (dl->type == NRF_CLOUD_DL_TYPE_FOTA) {
   23fb0:	7823      	ldrb	r3, [r4, #0]
   23fb2:	2b01      	cmp	r3, #1
   23fb4:	d115      	bne.n	23fe2 <nrf_cloud_download_start+0xc2>
		ret = fota_download_start_with_image_type(dl->host, dl->path,
   23fb6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   23fba:	7c23      	ldrb	r3, [r4, #16]
   23fbc:	b173      	cbz	r3, 23fdc <nrf_cloud_download_start+0xbc>
   23fbe:	68e3      	ldr	r3, [r4, #12]
   23fc0:	681a      	ldr	r2, [r3, #0]
   23fc2:	7f25      	ldrb	r5, [r4, #28]
   23fc4:	7c63      	ldrb	r3, [r4, #17]
   23fc6:	9501      	str	r5, [sp, #4]
   23fc8:	6965      	ldr	r5, [r4, #20]
   23fca:	9500      	str	r5, [sp, #0]
   23fcc:	f000 f8f4 	bl	241b8 <fota_download_start_with_image_type>
	if (ret == 0) {
   23fd0:	4605      	mov	r5, r0
   23fd2:	b350      	cbz	r0, 2402a <nrf_cloud_download_start+0x10a>
   23fd4:	481c      	ldr	r0, [pc, #112]	; (24048 <nrf_cloud_download_start+0x128>)
   23fd6:	f004 fd25 	bl	28a24 <z_impl_k_mutex_unlock>
   23fda:	e7c4      	b.n	23f66 <nrf_cloud_download_start+0x46>
		ret = fota_download_start_with_image_type(dl->host, dl->path,
   23fdc:	f04f 32ff 	mov.w	r2, #4294967295
   23fe0:	e7ef      	b.n	23fc2 <nrf_cloud_download_start+0xa2>
	} else if (dl->type == NRF_CLOUD_DL_TYPE_DL_CLIENT) {
   23fe2:	2b02      	cmp	r3, #2
   23fe4:	d10e      	bne.n	24004 <nrf_cloud_download_start+0xe4>
		ret = download_client_get(dl->dlc, dl->host, &dl->dl_cfg,
   23fe6:	2300      	movs	r3, #0
   23fe8:	9300      	str	r3, [sp, #0]
   23fea:	68a3      	ldr	r3, [r4, #8]
   23fec:	6861      	ldr	r1, [r4, #4]
   23fee:	69e0      	ldr	r0, [r4, #28]
   23ff0:	f104 020c 	add.w	r2, r4, #12
   23ff4:	f00f faf1 	bl	335da <download_client_get>
		if (ret) {
   23ff8:	4605      	mov	r5, r0
   23ffa:	b1b0      	cbz	r0, 2402a <nrf_cloud_download_start+0x10a>
			(void)download_client_disconnect(dl->dlc);
   23ffc:	69e0      	ldr	r0, [r4, #28]
   23ffe:	f00f fad7 	bl	335b0 <download_client_disconnect>
	if (ret == 0) {
   24002:	e7e7      	b.n	23fd4 <nrf_cloud_download_start+0xb4>
		LOG_WRN("Unhandled download type: %d", dl->type);
   24004:	466c      	mov	r4, sp
   24006:	b088      	sub	sp, #32
   24008:	aa02      	add	r2, sp, #8
   2400a:	4913      	ldr	r1, [pc, #76]	; (24058 <nrf_cloud_download_start+0x138>)
   2400c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   24010:	2303      	movs	r3, #3
   24012:	f842 3f10 	str.w	r3, [r2, #16]!
   24016:	2300      	movs	r3, #0
   24018:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2401c:	480c      	ldr	r0, [pc, #48]	; (24050 <nrf_cloud_download_start+0x130>)
   2401e:	f7ea fbfd 	bl	e81c <z_impl_z_log_msg_static_create>
		ret = -EFTYPE;
   24022:	f06f 054e 	mvn.w	r5, #78	; 0x4e
   24026:	46a5      	mov	sp, r4
	if (ret == 0) {
   24028:	e7d4      	b.n	23fd4 <nrf_cloud_download_start+0xb4>
		active_dl = *dl;
   2402a:	4d06      	ldr	r5, [pc, #24]	; (24044 <nrf_cloud_download_start+0x124>)
   2402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2402e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   24030:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   24034:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   24038:	2500      	movs	r5, #0
   2403a:	e7cb      	b.n	23fd4 <nrf_cloud_download_start+0xb4>
		return -EINVAL;
   2403c:	f06f 0515 	mvn.w	r5, #21
   24040:	e791      	b.n	23f66 <nrf_cloud_download_start+0x46>
   24042:	bf00      	nop
   24044:	20010ba4 	.word	0x20010ba4
   24048:	2000ce90 	.word	0x2000ce90
   2404c:	0003f6f8 	.word	0x0003f6f8
   24050:	00036588 	.word	0x00036588
   24054:	0003f73d 	.word	0x0003f73d
   24058:	0003f76b 	.word	0x0003f76b

0002405c <download_client_set_host>:
	return 0;
}

int download_client_set_host(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2405c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2405e:	460e      	mov	r6, r1
   24060:	4614      	mov	r4, r2
	if (client == NULL || host == NULL || config == NULL) {
   24062:	4605      	mov	r5, r0
{
   24064:	b087      	sub	sp, #28
	if (client == NULL || host == NULL || config == NULL) {
   24066:	b398      	cbz	r0, 240d0 <download_client_set_host+0x74>
   24068:	b391      	cbz	r1, 240d0 <download_client_set_host+0x74>
   2406a:	b38a      	cbz	r2, 240d0 <download_client_set_host+0x74>
		return -EINVAL;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2406c:	6893      	ldr	r3, [r2, #8]
   2406e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   24072:	d90d      	bls.n	24090 <download_client_set_host+0x34>
		LOG_ERR("The configured fragment size is larger than buffer");
   24074:	4b18      	ldr	r3, [pc, #96]	; (240d8 <download_client_set_host+0x7c>)
   24076:	4819      	ldr	r0, [pc, #100]	; (240dc <download_client_set_host+0x80>)
   24078:	9305      	str	r3, [sp, #20]
   2407a:	2302      	movs	r3, #2
   2407c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24080:	aa04      	add	r2, sp, #16
   24082:	9304      	str	r3, [sp, #16]
   24084:	f00f fa66 	bl	33554 <z_log_msg_static_create.constprop.0>
		return -E2BIG;
   24088:	f06f 0006 	mvn.w	r0, #6
	client->config = *config;
	client->host = host;
	client->close_when_done = false;
	k_mutex_unlock(&client->mutex);
	return 0;
}
   2408c:	b007      	add	sp, #28
   2408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&client->mutex, K_FOREVER);
   24090:	f04f 32ff 	mov.w	r2, #4294967295
   24094:	f04f 33ff 	mov.w	r3, #4294967295
   24098:	f00f fa5f 	bl	3355a <k_mutex_lock.constprop.0.isra.0>
	if (!is_idle(client)) {
   2409c:	4628      	mov	r0, r5
   2409e:	f00f fa60 	bl	33562 <is_idle>
   240a2:	b928      	cbnz	r0, 240b0 <download_client_set_host+0x54>
		k_mutex_unlock(&client->mutex);
   240a4:	4628      	mov	r0, r5
   240a6:	f00f fa5a 	bl	3355e <k_mutex_unlock.isra.0>
		return -EALREADY;
   240aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   240ae:	e7ed      	b.n	2408c <download_client_set_host+0x30>
	client->config = *config;
   240b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
	client->close_when_done = false;
   240b4:	2400      	movs	r4, #0
	client->config = *config;
   240b6:	f605 0744 	addw	r7, r5, #2116	; 0x844
   240ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	k_mutex_unlock(&client->mutex);
   240be:	4628      	mov	r0, r5
	client->host = host;
   240c0:	f8c5 683c 	str.w	r6, [r5, #2108]	; 0x83c
	client->close_when_done = false;
   240c4:	f885 4e3d 	strb.w	r4, [r5, #3645]	; 0xe3d
	k_mutex_unlock(&client->mutex);
   240c8:	f00f fa49 	bl	3355e <k_mutex_unlock.isra.0>
	return 0;
   240cc:	4620      	mov	r0, r4
   240ce:	e7dd      	b.n	2408c <download_client_set_host+0x30>
		return -EINVAL;
   240d0:	f06f 0015 	mvn.w	r0, #21
   240d4:	e7da      	b.n	2408c <download_client_set_host+0x30>
   240d6:	bf00      	nop
   240d8:	0003f7aa 	.word	0x0003f7aa
   240dc:	00036478 	.word	0x00036478

000240e0 <download_client_start>:
	return 0;
}

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   240e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240e4:	460e      	mov	r6, r1
   240e6:	4615      	mov	r5, r2
	if (client == NULL) {
   240e8:	4604      	mov	r4, r0
{
   240ea:	af00      	add	r7, sp, #0
	if (client == NULL) {
   240ec:	b158      	cbz	r0, 24106 <download_client_start+0x26>
		return -EINVAL;
	}

	k_mutex_lock(&client->mutex, K_FOREVER);
   240ee:	f04f 33ff 	mov.w	r3, #4294967295
   240f2:	f04f 32ff 	mov.w	r2, #4294967295
   240f6:	f00f fa30 	bl	3355a <k_mutex_lock.constprop.0.isra.0>

	if (client->host == NULL) {
   240fa:	f8d4 383c 	ldr.w	r3, [r4, #2108]	; 0x83c
		k_mutex_unlock(&client->mutex);
   240fe:	4620      	mov	r0, r4
	if (client->host == NULL) {
   24100:	b933      	cbnz	r3, 24110 <download_client_start+0x30>
		k_mutex_unlock(&client->mutex);
   24102:	f00f fa2c 	bl	3355e <k_mutex_unlock.isra.0>
		return -EINVAL;
   24106:	f06f 0015 	mvn.w	r0, #21
	LOG_INF("Downloading: %s [%u]", client->file, client->progress);

	/* Let the thread run */
	k_sem_give(&client->wait_for_download);
	return 0;
}
   2410a:	46bd      	mov	sp, r7
   2410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_idle(client) && !is_finished(client)) {
   24110:	f00f fa27 	bl	33562 <is_idle>
   24114:	b9a0      	cbnz	r0, 24140 <download_client_start+0x60>
	k_mutex_lock(&client->mutex, K_FOREVER);
   24116:	f04f 32ff 	mov.w	r2, #4294967295
   2411a:	f04f 33ff 	mov.w	r3, #4294967295
   2411e:	4620      	mov	r0, r4
   24120:	f00f fa1b 	bl	3355a <k_mutex_lock.constprop.0.isra.0>
	ret = client->state == DOWNLOAD_CLIENT_FINNISHED;
   24124:	f894 8e3e 	ldrb.w	r8, [r4, #3646]	; 0xe3e
	k_mutex_unlock(&client->mutex);
   24128:	4620      	mov	r0, r4
   2412a:	f00f fa18 	bl	3355e <k_mutex_unlock.isra.0>
	if (!is_idle(client) && !is_finished(client)) {
   2412e:	f1b8 0f03 	cmp.w	r8, #3
   24132:	d005      	beq.n	24140 <download_client_start+0x60>
		k_mutex_unlock(&client->mutex);
   24134:	4620      	mov	r0, r4
   24136:	f00f fa12 	bl	3355e <k_mutex_unlock.isra.0>
		return -EALREADY;
   2413a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2413e:	e7e4      	b.n	2410a <download_client_start+0x2a>
	client->file_size = 0;
   24140:	2300      	movs	r3, #0
	if (is_idle(client)) {
   24142:	4620      	mov	r0, r4
	client->file = file;
   24144:	f8c4 6840 	str.w	r6, [r4, #2112]	; 0x840
	client->file_size = 0;
   24148:	f8c4 3834 	str.w	r3, [r4, #2100]	; 0x834
	client->progress = from;
   2414c:	f8c4 5838 	str.w	r5, [r4, #2104]	; 0x838
	client->offset = 0;
   24150:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
	client->http.has_header = false;
   24154:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
	if (is_idle(client)) {
   24158:	f00f fa03 	bl	33562 <is_idle>
   2415c:	b318      	cbz	r0, 241a6 <download_client_start+0xc6>
		set_state(client, DOWNLOAD_CLIENT_CONNECTING);
   2415e:	2101      	movs	r1, #1
		set_state(client, DOWNLOAD_CLIENT_DOWNLOADING);
   24160:	4620      	mov	r0, r4
   24162:	f00f fa10 	bl	33586 <set_state>
	k_mutex_unlock(&client->mutex);
   24166:	4620      	mov	r0, r4
   24168:	f00f f9f9 	bl	3355e <k_mutex_unlock.isra.0>
	LOG_INF("Downloading: %s [%u]", client->file, client->progress);
   2416c:	466d      	mov	r5, sp
   2416e:	b08a      	sub	sp, #40	; 0x28
   24170:	466a      	mov	r2, sp
   24172:	f8d4 1840 	ldr.w	r1, [r4, #2112]	; 0x840
   24176:	f8d4 3838 	ldr.w	r3, [r4, #2104]	; 0x838
   2417a:	61d3      	str	r3, [r2, #28]
   2417c:	f44f 7300 	mov.w	r3, #512	; 0x200
   24180:	480a      	ldr	r0, [pc, #40]	; (241ac <download_client_start+0xcc>)
   24182:	8413      	strh	r3, [r2, #32]
   24184:	4b0a      	ldr	r3, [pc, #40]	; (241b0 <download_client_start+0xd0>)
   24186:	e9c2 0105 	strd	r0, r1, [r2, #20]
   2418a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   2418e:	4809      	ldr	r0, [pc, #36]	; (241b4 <download_client_start+0xd4>)
   24190:	f842 3f10 	str.w	r3, [r2, #16]!
   24194:	f00f f9de 	bl	33554 <z_log_msg_static_create.constprop.0>
   24198:	46ad      	mov	sp, r5
	z_impl_k_sem_give(sem);
   2419a:	f504 6012 	add.w	r0, r4, #2336	; 0x920
   2419e:	f004 fdd3 	bl	28d48 <z_impl_k_sem_give>
	return 0;
   241a2:	2000      	movs	r0, #0
}
   241a4:	e7b1      	b.n	2410a <download_client_start+0x2a>
		set_state(client, DOWNLOAD_CLIENT_DOWNLOADING);
   241a6:	2102      	movs	r1, #2
   241a8:	e7da      	b.n	24160 <download_client_start+0x80>
   241aa:	bf00      	nop
   241ac:	0003f7dd 	.word	0x0003f7dd
   241b0:	01000004 	.word	0x01000004
   241b4:	00036478 	.word	0x00036478

000241b8 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   241b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241bc:	461f      	mov	r7, r3
   241be:	4604      	mov	r4, r0
   241c0:	b08c      	sub	sp, #48	; 0x30
   241c2:	460d      	mov	r5, r1
   241c4:	4616      	mov	r6, r2
	static int sec_tag_list[1];
	int err = -1;

	struct download_client_cfg config = {
   241c6:	2100      	movs	r1, #0
   241c8:	2210      	movs	r2, #16
   241ca:	a802      	add	r0, sp, #8
   241cc:	f010 ff2e 	bl	3502c <memset>
   241d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   241d2:	f88d 700d 	strb.w	r7, [sp, #13]
   241d6:	9304      	str	r3, [sp, #16]
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   241d8:	2c00      	cmp	r4, #0
   241da:	d072      	beq.n	242c2 <fota_download_start_with_image_type+0x10a>
   241dc:	2d00      	cmp	r5, #0
   241de:	d070      	beq.n	242c2 <fota_download_start_with_image_type+0x10a>
   241e0:	4b3b      	ldr	r3, [pc, #236]	; (242d0 <fota_download_start_with_image_type+0x118>)
   241e2:	681b      	ldr	r3, [r3, #0]
   241e4:	2b00      	cmp	r3, #0
   241e6:	d06c      	beq.n	242c2 <fota_download_start_with_image_type+0x10a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   241e8:	2101      	movs	r1, #1
   241ea:	483a      	ldr	r0, [pc, #232]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   241ec:	f00f fa1c 	bl	33628 <atomic_or>
		return -EINVAL;
	}

	if (atomic_test_and_set_bit(&flags, FLAG_DOWNLOADING)) {
   241f0:	ea10 0701 	ands.w	r7, r0, r1
   241f4:	d168      	bne.n	242c8 <fota_download_start_with_image_type+0x110>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   241f6:	f06f 0110 	mvn.w	r1, #16
   241fa:	4836      	ldr	r0, [pc, #216]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   241fc:	f00f fa1f 	bl	3363e <atomic_and>
   24200:	f06f 0104 	mvn.w	r1, #4
   24204:	4833      	ldr	r0, [pc, #204]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   24206:	f00f fa1a 	bl	3363e <atomic_and>
	error_state = cause;
   2420a:	4b33      	ldr	r3, [pc, #204]	; (242d8 <fota_download_start_with_image_type+0x120>)
   2420c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 242dc <fota_download_start_with_image_type+0x124>
   24210:	701f      	strb	r7, [r3, #0]
	atomic_clear_bit(&flags, FLAG_CLOSED);
	atomic_clear_bit(&flags, FLAG_RESUME);
	set_error_state(FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR);

	/* Verify if the URI is same as last time, if not, prevent resuming. */
	if ((!dl_host || strcmp(dl_host, host) != 0) || (!dl_file || strcmp(dl_file, file) != 0)) {
   24212:	4f33      	ldr	r7, [pc, #204]	; (242e0 <fota_download_start_with_image_type+0x128>)
   24214:	6838      	ldr	r0, [r7, #0]
   24216:	b158      	cbz	r0, 24230 <fota_download_start_with_image_type+0x78>
   24218:	4621      	mov	r1, r4
   2421a:	f7e5 f874 	bl	9306 <strcmp>
   2421e:	b938      	cbnz	r0, 24230 <fota_download_start_with_image_type+0x78>
   24220:	f8d8 0000 	ldr.w	r0, [r8]
   24224:	b120      	cbz	r0, 24230 <fota_download_start_with_image_type+0x78>
   24226:	4629      	mov	r1, r5
   24228:	f7e5 f86d 	bl	9306 <strcmp>
   2422c:	2800      	cmp	r0, #0
   2422e:	d042      	beq.n	242b6 <fota_download_start_with_image_type+0xfe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24230:	2108      	movs	r1, #8
   24232:	4828      	ldr	r0, [pc, #160]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   24234:	f00f f9f8 	bl	33628 <atomic_or>
		atomic_clear_bit(&flags, FLAG_NEW_URI);
	}
	dl_host = host;
	dl_file = file;

	if (sec_tag != -1 && !is_ip_address(host)) {
   24238:	1c73      	adds	r3, r6, #1
	dl_host = host;
   2423a:	603c      	str	r4, [r7, #0]
	dl_file = file;
   2423c:	f8c8 5000 	str.w	r5, [r8]
	if (sec_tag != -1 && !is_ip_address(host)) {
   24240:	d018      	beq.n	24274 <fota_download_start_with_image_type+0xbc>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   24242:	2001      	movs	r0, #1
   24244:	4621      	mov	r1, r4
   24246:	f10d 021a 	add.w	r2, sp, #26
   2424a:	f00a fe6f 	bl	2ef2c <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   2424e:	2801      	cmp	r0, #1
   24250:	d00a      	beq.n	24268 <fota_download_start_with_image_type+0xb0>
   24252:	2002      	movs	r0, #2
   24254:	4621      	mov	r1, r4
   24256:	f10d 021a 	add.w	r2, sp, #26
   2425a:	f00a fe67 	bl	2ef2c <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   2425e:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   24260:	bf1c      	itt	ne
   24262:	2301      	movne	r3, #1
   24264:	f88d 3014 	strbne.w	r3, [sp, #20]
	}

	if (sec_tag != -1) {
		sec_tag_list[0] = sec_tag;
   24268:	4b1e      	ldr	r3, [pc, #120]	; (242e4 <fota_download_start_with_image_type+0x12c>)
   2426a:	601e      	str	r6, [r3, #0]
		config.sec_tag_list = sec_tag_list;
   2426c:	9302      	str	r3, [sp, #8]
		config.sec_tag_count = 1;
   2426e:	2301      	movs	r3, #1
   24270:	f88d 300c 	strb.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   24274:	2102      	movs	r1, #2
   24276:	4b1c      	ldr	r3, [pc, #112]	; (242e8 <fota_download_start_with_image_type+0x130>)
		LOG_INF("B1 update, selected file:\n%s", update);
		dl_file = update;
	}
#endif /* PM_S1_ADDRESS */

	img_type_expected = expected_type;
   24278:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2427c:	6019      	str	r1, [r3, #0]
	img_type_expected = expected_type;
   2427e:	4b1b      	ldr	r3, [pc, #108]	; (242ec <fota_download_start_with_image_type+0x134>)
   24280:	4814      	ldr	r0, [pc, #80]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   24282:	701a      	strb	r2, [r3, #0]
   24284:	f00f f9d0 	bl	33628 <atomic_or>

	atomic_set_bit(&flags, FLAG_FIRST_FRAGMENT);

	err = download_client_get(&dlc, dl_host, &config, dl_file, 0);
   24288:	2300      	movs	r3, #0
   2428a:	9300      	str	r3, [sp, #0]
   2428c:	f8d8 3000 	ldr.w	r3, [r8]
   24290:	6839      	ldr	r1, [r7, #0]
   24292:	4817      	ldr	r0, [pc, #92]	; (242f0 <fota_download_start_with_image_type+0x138>)
   24294:	aa02      	add	r2, sp, #8
   24296:	f00f f9a0 	bl	335da <download_client_get>
	if (err != 0) {
   2429a:	4604      	mov	r4, r0
   2429c:	b138      	cbz	r0, 242ae <fota_download_start_with_image_type+0xf6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2429e:	f06f 0101 	mvn.w	r1, #1
   242a2:	480c      	ldr	r0, [pc, #48]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   242a4:	f00f f9cb 	bl	3363e <atomic_and>
		atomic_clear_bit(&flags, FLAG_DOWNLOADING);
		download_client_disconnect(&dlc);
   242a8:	4811      	ldr	r0, [pc, #68]	; (242f0 <fota_download_start_with_image_type+0x138>)
   242aa:	f00f f981 	bl	335b0 <download_client_disconnect>
		return err;
	}

	return 0;
}
   242ae:	4620      	mov	r0, r4
   242b0:	b00c      	add	sp, #48	; 0x30
   242b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   242b6:	f06f 0108 	mvn.w	r1, #8
   242ba:	4806      	ldr	r0, [pc, #24]	; (242d4 <fota_download_start_with_image_type+0x11c>)
   242bc:	f00f f9bf 	bl	3363e <atomic_and>
}
   242c0:	e7ba      	b.n	24238 <fota_download_start_with_image_type+0x80>
		return -EINVAL;
   242c2:	f06f 0415 	mvn.w	r4, #21
   242c6:	e7f2      	b.n	242ae <fota_download_start_with_image_type+0xf6>
		return -EALREADY;
   242c8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   242cc:	e7ef      	b.n	242ae <fota_download_start_with_image_type+0xf6>
   242ce:	bf00      	nop
   242d0:	20010bd8 	.word	0x20010bd8
   242d4:	20010bc8 	.word	0x20010bc8
   242d8:	20012871 	.word	0x20012871
   242dc:	20010bd0 	.word	0x20010bd0
   242e0:	20010bd4 	.word	0x20010bd4
   242e4:	20010bc4 	.word	0x20010bc4
   242e8:	20010bcc 	.word	0x20010bcc
   242ec:	2000ccfa 	.word	0x2000ccfa
   242f0:	2000e7f0 	.word	0x2000e7f0

000242f4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(void)
{
   242f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   242f8:	4821      	ldr	r0, [pc, #132]	; (24380 <check_ext_api_requests+0x8c>)
{
   242fa:	b085      	sub	sp, #20
			skip_ext_apis(&m_firmware_info);
   242fc:	f00f f9ad 	bl	3365a <skip_ext_apis>

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   24300:	2600      	movs	r6, #0
			skip_ext_apis(&m_firmware_info);
   24302:	4604      	mov	r4, r0
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   24304:	4b1e      	ldr	r3, [pc, #120]	; (24380 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   24306:	4f1f      	ldr	r7, [pc, #124]	; (24384 <check_ext_api_requests+0x90>)
   24308:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2430c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 24388 <check_ext_api_requests+0x94>
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   24310:	45b0      	cmp	r8, r6
   24312:	d803      	bhi.n	2431c <check_ext_api_requests+0x28>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   24314:	2000      	movs	r0, #0
   24316:	b005      	add	sp, #20
   24318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   2431c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2431e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   24322:	681d      	ldr	r5, [r3, #0]
   24324:	ab01      	add	r3, sp, #4
   24326:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2432a:	220c      	movs	r2, #12
   2432c:	4619      	mov	r1, r3
   2432e:	4628      	mov	r0, r5
   24330:	f010 fe4c 	bl	34fcc <memcmp>
   24334:	b978      	cbnz	r0, 24356 <check_ext_api_requests+0x62>
   24336:	b175      	cbz	r5, 24356 <check_ext_api_requests+0x62>
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   24338:	6922      	ldr	r2, [r4, #16]
	return ((ext_api->ext_api_id == req_id)
   2433a:	692b      	ldr	r3, [r5, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2433c:	429a      	cmp	r2, r3
   2433e:	d10a      	bne.n	24356 <check_ext_api_requests+0x62>
		&&  (ext_api->ext_api_version >= req_min_version)
   24340:	69ab      	ldr	r3, [r5, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   24342:	69a2      	ldr	r2, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   24344:	429a      	cmp	r2, r3
   24346:	d806      	bhi.n	24356 <check_ext_api_requests+0x62>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   24348:	69e2      	ldr	r2, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2434a:	429a      	cmp	r2, r3
   2434c:	d903      	bls.n	24356 <check_ext_api_requests+0x62>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2434e:	6963      	ldr	r3, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   24350:	696a      	ldr	r2, [r5, #20]
   24352:	4393      	bics	r3, r2
   24354:	d00a      	beq.n	2436c <check_ext_api_requests+0x78>
		} else if (ext_api_req->required) {
   24356:	6a25      	ldr	r5, [r4, #32]
   24358:	b165      	cbz	r5, 24374 <check_ext_api_requests+0x80>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2435a:	480c      	ldr	r0, [pc, #48]	; (2438c <check_ext_api_requests+0x98>)
   2435c:	f00a f91d 	bl	2e59a <printk>
			k_panic();
   24360:	4040      	eors	r0, r0
   24362:	f380 8811 	msr	BASEPRI, r0
   24366:	f04f 0004 	mov.w	r0, #4
   2436a:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2436c:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2436e:	3601      	adds	r6, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   24370:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   24372:	e7cd      	b.n	24310 <check_ext_api_requests+0x1c>
			printk("WARNING: Optional EXT_API request not "
   24374:	4648      	mov	r0, r9
   24376:	f00a f910 	bl	2e59a <printk>
			*ext_api_req->ext_api = NULL;
   2437a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2437c:	601d      	str	r5, [r3, #0]
   2437e:	e7f5      	b.n	2436c <check_ext_api_requests+0x78>
   24380:	00008200 	.word	0x00008200
   24384:	000366f8 	.word	0x000366f8
   24388:	0003f85e 	.word	0x0003f85e
   2438c:	0003f835 	.word	0x0003f835

00024390 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   24390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24394:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   24396:	4b15      	ldr	r3, [pc, #84]	; (243ec <tfm_ns_interface_dispatch+0x5c>)
   24398:	4604      	mov	r4, r0
   2439a:	f893 8000 	ldrb.w	r8, [r3]
   2439e:	460d      	mov	r5, r1
   243a0:	4616      	mov	r6, r2
   243a2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   243a4:	f1b8 0f00 	cmp.w	r8, #0
   243a8:	d115      	bne.n	243d6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   243aa:	4668      	mov	r0, sp
   243ac:	f00b fb96 	bl	2fadc <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   243b0:	463a      	mov	r2, r7
   243b2:	4631      	mov	r1, r6
   243b4:	4628      	mov	r0, r5
   243b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   243b8:	47a0      	blx	r4
   243ba:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   243bc:	4668      	mov	r0, sp
   243be:	f00b fb8e 	bl	2fade <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   243c2:	f1b8 0f00 	cmp.w	r8, #0
   243c6:	d002      	beq.n	243ce <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   243c8:	4809      	ldr	r0, [pc, #36]	; (243f0 <tfm_ns_interface_dispatch+0x60>)
   243ca:	f004 fb2b 	bl	28a24 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   243ce:	4620      	mov	r0, r4
   243d0:	b022      	add	sp, #136	; 0x88
   243d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   243d6:	f04f 32ff 	mov.w	r2, #4294967295
   243da:	f04f 33ff 	mov.w	r3, #4294967295
   243de:	4804      	ldr	r0, [pc, #16]	; (243f0 <tfm_ns_interface_dispatch+0x60>)
   243e0:	f004 fa50 	bl	28884 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   243e4:	2800      	cmp	r0, #0
   243e6:	d0e0      	beq.n	243aa <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   243e8:	241f      	movs	r4, #31
   243ea:	e7f0      	b.n	243ce <tfm_ns_interface_dispatch+0x3e>
   243ec:	2001287f 	.word	0x2001287f
   243f0:	2000cf6c 	.word	0x2000cf6c

000243f4 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   243f4:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   243f6:	2630      	movs	r6, #48	; 0x30
{
   243f8:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   243fa:	ab06      	add	r3, sp, #24
{
   243fc:	4605      	mov	r5, r0
   243fe:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   24400:	4632      	mov	r2, r6
   24402:	2100      	movs	r1, #0
   24404:	4618      	mov	r0, r3
   24406:	f010 fe11 	bl	3502c <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   2440a:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   2440e:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   24412:	b154      	cbz	r4, 2442a <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   24414:	2301      	movs	r3, #1
   24416:	aa04      	add	r2, sp, #16
   24418:	9200      	str	r2, [sp, #0]
   2441a:	2100      	movs	r1, #0
   2441c:	4804      	ldr	r0, [pc, #16]	; (24430 <psa_generate_random+0x3c>)
   2441e:	9301      	str	r3, [sp, #4]
   24420:	aa02      	add	r2, sp, #8
   24422:	f000 f807 	bl	24434 <psa_call>
}
   24426:	b012      	add	sp, #72	; 0x48
   24428:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   2442a:	4620      	mov	r0, r4
   2442c:	e7fb      	b.n	24426 <psa_generate_random+0x32>
   2442e:	bf00      	nop
   24430:	40000100 	.word	0x40000100

00024434 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   24434:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   24436:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   2443a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   2443e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   24440:	d20d      	bcs.n	2445e <psa_call+0x2a>
        (type < INT16_MIN) ||
   24442:	ea43 0504 	orr.w	r5, r3, r4
   24446:	2dff      	cmp	r5, #255	; 0xff
   24448:	d809      	bhi.n	2445e <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   2444a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   2444e:	4613      	mov	r3, r2
   24450:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   24454:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   24456:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   24458:	4803      	ldr	r0, [pc, #12]	; (24468 <psa_call+0x34>)
   2445a:	f7ff bf99 	b.w	24390 <tfm_ns_interface_dispatch>
}
   2445e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   24462:	bc30      	pop	{r4, r5}
   24464:	4770      	bx	lr
   24466:	bf00      	nop
   24468:	00007c11 	.word	0x00007c11

0002446c <parse_string>:
{
   2446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24470:	680a      	ldr	r2, [r1, #0]
   24472:	688b      	ldr	r3, [r1, #8]
{
   24474:	4606      	mov	r6, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24476:	1c5c      	adds	r4, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24478:	18d0      	adds	r0, r2, r3
   2447a:	5cd3      	ldrb	r3, [r2, r3]
{
   2447c:	460f      	mov	r7, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2447e:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   24480:	4414      	add	r4, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   24482:	f040 80e1 	bne.w	24648 <parse_string+0x1dc>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   24486:	4625      	mov	r5, r4
        size_t skipped_bytes = 0;
   24488:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   2448a:	f8d1 c004 	ldr.w	ip, [r1, #4]
   2448e:	1aa9      	subs	r1, r5, r2
   24490:	4561      	cmp	r1, ip
   24492:	f080 80d9 	bcs.w	24648 <parse_string+0x1dc>
   24496:	7829      	ldrb	r1, [r5, #0]
   24498:	2922      	cmp	r1, #34	; 0x22
   2449a:	d119      	bne.n	244d0 <parse_string+0x64>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2449c:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   244a0:	1a28      	subs	r0, r5, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   244a2:	693a      	ldr	r2, [r7, #16]
   244a4:	4418      	add	r0, r3
   244a6:	4790      	blx	r2
        if (output == NULL)
   244a8:	4681      	mov	r9, r0
   244aa:	2800      	cmp	r0, #0
   244ac:	f000 80cc 	beq.w	24648 <parse_string+0x1dc>
   244b0:	4680      	mov	r8, r0
    while (input_pointer < input_end)
   244b2:	42ac      	cmp	r4, r5
   244b4:	d316      	bcc.n	244e4 <parse_string+0x78>
    *output_pointer = '\0';
   244b6:	2300      	movs	r3, #0
   244b8:	f888 3000 	strb.w	r3, [r8]
    item->type = cJSON_String;
   244bc:	2310      	movs	r3, #16
    return true;
   244be:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   244c0:	e9c6 3903 	strd	r3, r9, [r6, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   244c4:	683b      	ldr	r3, [r7, #0]
   244c6:	1aed      	subs	r5, r5, r3
    input_buffer->offset++;
   244c8:	3501      	adds	r5, #1
   244ca:	60bd      	str	r5, [r7, #8]
}
   244cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (input_end[0] == '\\')
   244d0:	295c      	cmp	r1, #92	; 0x5c
   244d2:	d105      	bne.n	244e0 <parse_string+0x74>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   244d4:	3501      	adds	r5, #1
   244d6:	1aa9      	subs	r1, r5, r2
   244d8:	4561      	cmp	r1, ip
   244da:	f080 80b5 	bcs.w	24648 <parse_string+0x1dc>
                skipped_bytes++;
   244de:	3301      	adds	r3, #1
            input_end++;
   244e0:	3501      	adds	r5, #1
   244e2:	e7d4      	b.n	2448e <parse_string+0x22>
        if (*input_pointer != '\\')
   244e4:	7823      	ldrb	r3, [r4, #0]
   244e6:	2b5c      	cmp	r3, #92	; 0x5c
   244e8:	d006      	beq.n	244f8 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   244ea:	3401      	adds	r4, #1
   244ec:	f108 0201 	add.w	r2, r8, #1
   244f0:	f888 3000 	strb.w	r3, [r8]
   244f4:	4690      	mov	r8, r2
   244f6:	e7dc      	b.n	244b2 <parse_string+0x46>
            switch (input_pointer[1])
   244f8:	7863      	ldrb	r3, [r4, #1]
   244fa:	2b75      	cmp	r3, #117	; 0x75
   244fc:	d80a      	bhi.n	24514 <parse_string+0xa8>
   244fe:	2b6d      	cmp	r3, #109	; 0x6d
   24500:	d80f      	bhi.n	24522 <parse_string+0xb6>
   24502:	2b62      	cmp	r3, #98	; 0x62
   24504:	d02a      	beq.n	2455c <parse_string+0xf0>
   24506:	d823      	bhi.n	24550 <parse_string+0xe4>
   24508:	2b2f      	cmp	r3, #47	; 0x2f
   2450a:	d039      	beq.n	24580 <parse_string+0x114>
   2450c:	2b5c      	cmp	r3, #92	; 0x5c
   2450e:	d037      	beq.n	24580 <parse_string+0x114>
   24510:	2b22      	cmp	r3, #34	; 0x22
   24512:	d035      	beq.n	24580 <parse_string+0x114>
        input_buffer->hooks.deallocate(output);
   24514:	4648      	mov	r0, r9
   24516:	697b      	ldr	r3, [r7, #20]
   24518:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2451a:	683b      	ldr	r3, [r7, #0]
   2451c:	1ae4      	subs	r4, r4, r3
   2451e:	60bc      	str	r4, [r7, #8]
   24520:	e095      	b.n	2464e <parse_string+0x1e2>
            switch (input_pointer[1])
   24522:	3b6e      	subs	r3, #110	; 0x6e
   24524:	2b07      	cmp	r3, #7
   24526:	d8f5      	bhi.n	24514 <parse_string+0xa8>
   24528:	a201      	add	r2, pc, #4	; (adr r2, 24530 <parse_string+0xc4>)
   2452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2452e:	bf00      	nop
   24530:	00024569 	.word	0x00024569
   24534:	00024515 	.word	0x00024515
   24538:	00024515 	.word	0x00024515
   2453c:	00024515 	.word	0x00024515
   24540:	00024571 	.word	0x00024571
   24544:	00024515 	.word	0x00024515
   24548:	00024579 	.word	0x00024579
   2454c:	00024587 	.word	0x00024587
   24550:	2b66      	cmp	r3, #102	; 0x66
   24552:	d1df      	bne.n	24514 <parse_string+0xa8>
                    break;
   24554:	230c      	movs	r3, #12
                    *output_pointer++ = '\f';
   24556:	f108 0201 	add.w	r2, r8, #1
                    break;
   2455a:	e002      	b.n	24562 <parse_string+0xf6>
                    break;
   2455c:	2308      	movs	r3, #8
                    *output_pointer++ = '\b';
   2455e:	f108 0201 	add.w	r2, r8, #1
            unsigned char sequence_length = 2;
   24562:	2102      	movs	r1, #2
            input_pointer += sequence_length;
   24564:	440c      	add	r4, r1
   24566:	e7c3      	b.n	244f0 <parse_string+0x84>
                    break;
   24568:	230a      	movs	r3, #10
                    *output_pointer++ = '\n';
   2456a:	f108 0201 	add.w	r2, r8, #1
                    break;
   2456e:	e7f8      	b.n	24562 <parse_string+0xf6>
                    break;
   24570:	230d      	movs	r3, #13
                    *output_pointer++ = '\r';
   24572:	f108 0201 	add.w	r2, r8, #1
                    break;
   24576:	e7f4      	b.n	24562 <parse_string+0xf6>
                    break;
   24578:	2309      	movs	r3, #9
                    *output_pointer++ = '\t';
   2457a:	f108 0201 	add.w	r2, r8, #1
                    break;
   2457e:	e7f0      	b.n	24562 <parse_string+0xf6>
                    *output_pointer++ = input_pointer[1];
   24580:	f108 0201 	add.w	r2, r8, #1
                    break;
   24584:	e7ed      	b.n	24562 <parse_string+0xf6>
    if ((input_end - first_sequence) < 6)
   24586:	1b2b      	subs	r3, r5, r4
   24588:	2b05      	cmp	r3, #5
   2458a:	ddc3      	ble.n	24514 <parse_string+0xa8>
    first_code = parse_hex4(first_sequence + 2);
   2458c:	1ca0      	adds	r0, r4, #2
   2458e:	f00f f873 	bl	33678 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   24592:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   24596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   2459a:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2459c:	d3ba      	bcc.n	24514 <parse_string+0xa8>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   2459e:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   245a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   245a6:	d22c      	bcs.n	24602 <parse_string+0x196>
        const unsigned char *second_sequence = first_sequence + 6;
   245a8:	1da3      	adds	r3, r4, #6
        if ((input_end - second_sequence) < 6)
   245aa:	1aeb      	subs	r3, r5, r3
   245ac:	2b05      	cmp	r3, #5
   245ae:	ddb1      	ble.n	24514 <parse_string+0xa8>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   245b0:	79a3      	ldrb	r3, [r4, #6]
   245b2:	2b5c      	cmp	r3, #92	; 0x5c
   245b4:	d1ae      	bne.n	24514 <parse_string+0xa8>
   245b6:	79e3      	ldrb	r3, [r4, #7]
   245b8:	2b75      	cmp	r3, #117	; 0x75
   245ba:	d1ab      	bne.n	24514 <parse_string+0xa8>
        second_code = parse_hex4(second_sequence + 2);
   245bc:	f104 0008 	add.w	r0, r4, #8
   245c0:	f00f f85a 	bl	33678 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   245c4:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   245c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   245cc:	d2a2      	bcs.n	24514 <parse_string+0xa8>
        sequence_length = 12; /* \uXXXX\uXXXX */
   245ce:	210c      	movs	r1, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   245d0:	4b20      	ldr	r3, [pc, #128]	; (24654 <parse_string+0x1e8>)
   245d2:	f3c0 0009 	ubfx	r0, r0, #0, #10
   245d6:	ea03 238a 	and.w	r3, r3, sl, lsl #10
   245da:	4303      	orrs	r3, r0
   245dc:	f503 3a80 	add.w	sl, r3, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   245e0:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   245e2:	2204      	movs	r2, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   245e4:	f102 3cff 	add.w	ip, r2, #4294967295
   245e8:	fa58 fc8c 	uxtab	ip, r8, ip
   245ec:	45e0      	cmp	r8, ip
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   245ee:	fa5f f38a 	uxtb.w	r3, sl
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   245f2:	d120      	bne.n	24636 <parse_string+0x1ca>
    if (utf8_length > 1)
   245f4:	2a01      	cmp	r2, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   245f6:	bf14      	ite	ne
   245f8:	4303      	orrne	r3, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   245fa:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    *output_pointer += utf8_length;
   245fe:	4442      	add	r2, r8
                    if (sequence_length == 0)
   24600:	e7b0      	b.n	24564 <parse_string+0xf8>
    if (codepoint < 0x80)
   24602:	287f      	cmp	r0, #127	; 0x7f
   24604:	d90b      	bls.n	2461e <parse_string+0x1b2>
    else if (codepoint < 0x800)
   24606:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   2460a:	d30c      	bcc.n	24626 <parse_string+0x1ba>
    else if (codepoint < 0x10000)
   2460c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   24610:	d30d      	bcc.n	2462e <parse_string+0x1c2>
    else if (codepoint <= 0x10FFFF)
   24612:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   24616:	f4bf af7d 	bcs.w	24514 <parse_string+0xa8>
        sequence_length = 6; /* \uXXXX */
   2461a:	2106      	movs	r1, #6
   2461c:	e7e0      	b.n	245e0 <parse_string+0x174>
   2461e:	2106      	movs	r1, #6
    unsigned char first_byte_mark = 0;
   24620:	2000      	movs	r0, #0
        utf8_length = 1;
   24622:	2201      	movs	r2, #1
   24624:	e7de      	b.n	245e4 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
   24626:	2106      	movs	r1, #6
        first_byte_mark = 0xC0; /* 11000000 */
   24628:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   2462a:	2202      	movs	r2, #2
   2462c:	e7da      	b.n	245e4 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
   2462e:	2106      	movs	r1, #6
        first_byte_mark = 0xE0; /* 11100000 */
   24630:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   24632:	2203      	movs	r2, #3
   24634:	e7d6      	b.n	245e4 <parse_string+0x178>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   24636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2463a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2463e:	f80c 3901 	strb.w	r3, [ip], #-1
        codepoint >>= 6;
   24642:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   24646:	e7d1      	b.n	245ec <parse_string+0x180>
    if (input_pointer != NULL)
   24648:	2c00      	cmp	r4, #0
   2464a:	f47f af66 	bne.w	2451a <parse_string+0xae>
    return false;
   2464e:	2000      	movs	r0, #0
   24650:	e73c      	b.n	244cc <parse_string+0x60>
   24652:	bf00      	nop
   24654:	000ffc00 	.word	0x000ffc00

00024658 <get_object_item>:
{
   24658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2465a:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   2465c:	4604      	mov	r4, r0
   2465e:	2800      	cmp	r0, #0
   24660:	d034      	beq.n	246cc <get_object_item+0x74>
   24662:	2900      	cmp	r1, #0
   24664:	d031      	beq.n	246ca <get_object_item+0x72>
    current_element = object->child;
   24666:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   24668:	b9fa      	cbnz	r2, 246aa <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2466a:	4e19      	ldr	r6, [pc, #100]	; (246d0 <get_object_item+0x78>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   2466c:	b374      	cbz	r4, 246cc <get_object_item+0x74>
   2466e:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   24670:	b1c3      	cbz	r3, 246a4 <get_object_item+0x4c>
    if (string1 == string2)
   24672:	42ab      	cmp	r3, r5
   24674:	d021      	beq.n	246ba <get_object_item+0x62>
   24676:	f105 3cff 	add.w	ip, r5, #4294967295
   2467a:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2467c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   24680:	460f      	mov	r7, r1
   24682:	5c72      	ldrb	r2, [r6, r1]
   24684:	f002 0203 	and.w	r2, r2, #3
   24688:	2a01      	cmp	r2, #1
   2468a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2468e:	bf08      	it	eq
   24690:	f101 0720 	addeq.w	r7, r1, #32
   24694:	5cb0      	ldrb	r0, [r6, r2]
   24696:	f000 0003 	and.w	r0, r0, #3
   2469a:	2801      	cmp	r0, #1
   2469c:	bf08      	it	eq
   2469e:	3220      	addeq	r2, #32
   246a0:	4297      	cmp	r7, r2
   246a2:	d00f      	beq.n	246c4 <get_object_item+0x6c>
            current_element = current_element->next;
   246a4:	6824      	ldr	r4, [r4, #0]
   246a6:	e7e1      	b.n	2466c <get_object_item+0x14>
            current_element = current_element->next;
   246a8:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   246aa:	b17c      	cbz	r4, 246cc <get_object_item+0x74>
   246ac:	6a21      	ldr	r1, [r4, #32]
   246ae:	b121      	cbz	r1, 246ba <get_object_item+0x62>
   246b0:	4628      	mov	r0, r5
   246b2:	f7e4 fe28 	bl	9306 <strcmp>
   246b6:	2800      	cmp	r0, #0
   246b8:	d1f6      	bne.n	246a8 <get_object_item+0x50>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   246ba:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   246bc:	2b00      	cmp	r3, #0
   246be:	bf08      	it	eq
   246c0:	2400      	moveq	r4, #0
   246c2:	e003      	b.n	246cc <get_object_item+0x74>
        if (*string1 == '\0')
   246c4:	2900      	cmp	r1, #0
   246c6:	d1d9      	bne.n	2467c <get_object_item+0x24>
   246c8:	e7f7      	b.n	246ba <get_object_item+0x62>
        return NULL;
   246ca:	460c      	mov	r4, r1
}
   246cc:	4620      	mov	r0, r4
   246ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   246d0:	00040f97 	.word	0x00040f97

000246d4 <print_string_ptr>:
{
   246d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   246d8:	4b4d      	ldr	r3, [pc, #308]	; (24810 <print_string_ptr+0x13c>)
{
   246da:	4604      	mov	r4, r0
    const char quotes[] = "\"\"";
   246dc:	881a      	ldrh	r2, [r3, #0]
   246de:	789b      	ldrb	r3, [r3, #2]
    if (output_buffer == NULL)
   246e0:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   246e2:	f8ad 2004 	strh.w	r2, [sp, #4]
   246e6:	f88d 3006 	strb.w	r3, [sp, #6]
    if (output_buffer == NULL)
   246ea:	b919      	cbnz	r1, 246f4 <print_string_ptr+0x20>
        return false;
   246ec:	2000      	movs	r0, #0
}
   246ee:	b003      	add	sp, #12
   246f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   246f4:	b338      	cbz	r0, 24746 <print_string_ptr+0x72>
    size_t escape_characters = 0;
   246f6:	f04f 0b00 	mov.w	fp, #0
   246fa:	4601      	mov	r1, r0
        switch (*input_pointer)
   246fc:	4845      	ldr	r0, [pc, #276]	; (24814 <print_string_ptr+0x140>)
   246fe:	4688      	mov	r8, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   24700:	f811 3b01 	ldrb.w	r3, [r1], #1
   24704:	bb6b      	cbnz	r3, 24762 <print_string_ptr+0x8e>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   24706:	eba8 0804 	sub.w	r8, r8, r4
   2470a:	44d8      	add	r8, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   2470c:	4638      	mov	r0, r7
   2470e:	f108 0103 	add.w	r1, r8, #3
   24712:	f00f f810 	bl	33736 <ensure>
    if (output == NULL)
   24716:	4605      	mov	r5, r0
   24718:	2800      	cmp	r0, #0
   2471a:	d0e7      	beq.n	246ec <print_string_ptr+0x18>
    if (escape_characters == 0)
   2471c:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   2471e:	f108 0a01 	add.w	sl, r8, #1
        output[output_length + 2] = '\0';
   24722:	f108 0902 	add.w	r9, r8, #2
        memcpy(output + 1, input, output_length);
   24726:	1c46      	adds	r6, r0, #1
        output[0] = '\"';
   24728:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   2472a:	f1bb 0f00 	cmp.w	fp, #0
   2472e:	d12e      	bne.n	2478e <print_string_ptr+0xba>
   24730:	4642      	mov	r2, r8
   24732:	4621      	mov	r1, r4
   24734:	4630      	mov	r0, r6
   24736:	f010 fc59 	bl	34fec <memcpy>
        output[output_length + 1] = '\"';
   2473a:	2322      	movs	r3, #34	; 0x22
   2473c:	f805 300a 	strb.w	r3, [r5, sl]
        output[output_length + 2] = '\0';
   24740:	f805 b009 	strb.w	fp, [r5, r9]
        return true;
   24744:	e00b      	b.n	2475e <print_string_ptr+0x8a>
        output = ensure(output_buffer, sizeof(quotes));
   24746:	2103      	movs	r1, #3
   24748:	4638      	mov	r0, r7
   2474a:	f00e fff4 	bl	33736 <ensure>
        if (output == NULL)
   2474e:	2800      	cmp	r0, #0
   24750:	d0cc      	beq.n	246ec <print_string_ptr+0x18>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   24752:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   24756:	a901      	add	r1, sp, #4
   24758:	1ad2      	subs	r2, r2, r3
   2475a:	f010 fe1f 	bl	3539c <strncpy>
        return true;
   2475e:	2001      	movs	r0, #1
   24760:	e7c5      	b.n	246ee <print_string_ptr+0x1a>
        switch (*input_pointer)
   24762:	2b22      	cmp	r3, #34	; 0x22
   24764:	d80b      	bhi.n	2477e <print_string_ptr+0xaa>
   24766:	2b07      	cmp	r3, #7
   24768:	d90e      	bls.n	24788 <print_string_ptr+0xb4>
   2476a:	f1a3 0208 	sub.w	r2, r3, #8
   2476e:	b2d2      	uxtb	r2, r2
   24770:	fa20 f202 	lsr.w	r2, r0, r2
   24774:	07d2      	lsls	r2, r2, #31
   24776:	d505      	bpl.n	24784 <print_string_ptr+0xb0>
                escape_characters++;
   24778:	f10b 0b01 	add.w	fp, fp, #1
                break;
   2477c:	e7bf      	b.n	246fe <print_string_ptr+0x2a>
        switch (*input_pointer)
   2477e:	2b5c      	cmp	r3, #92	; 0x5c
   24780:	d1bd      	bne.n	246fe <print_string_ptr+0x2a>
   24782:	e7f9      	b.n	24778 <print_string_ptr+0xa4>
                if (*input_pointer < 32)
   24784:	2b1f      	cmp	r3, #31
   24786:	d8ba      	bhi.n	246fe <print_string_ptr+0x2a>
                    escape_characters += 5;
   24788:	f10b 0b05 	add.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   2478c:	e7b7      	b.n	246fe <print_string_ptr+0x2a>
            *output_pointer++ = '\\';
   2478e:	f04f 085c 	mov.w	r8, #92	; 0x5c
   24792:	f104 3bff 	add.w	fp, r4, #4294967295
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   24796:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
   2479a:	b92b      	cbnz	r3, 247a8 <print_string_ptr+0xd4>
    output[output_length + 1] = '\"';
   2479c:	2222      	movs	r2, #34	; 0x22
   2479e:	f805 200a 	strb.w	r2, [r5, sl]
    output[output_length + 2] = '\0';
   247a2:	f805 3009 	strb.w	r3, [r5, r9]
    return true;
   247a6:	e7da      	b.n	2475e <print_string_ptr+0x8a>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   247a8:	2b1f      	cmp	r3, #31
   247aa:	d906      	bls.n	247ba <print_string_ptr+0xe6>
   247ac:	2b22      	cmp	r3, #34	; 0x22
   247ae:	d004      	beq.n	247ba <print_string_ptr+0xe6>
   247b0:	2b5c      	cmp	r3, #92	; 0x5c
   247b2:	d002      	beq.n	247ba <print_string_ptr+0xe6>
            *output_pointer = *input_pointer;
   247b4:	7033      	strb	r3, [r6, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   247b6:	3601      	adds	r6, #1
   247b8:	e7ed      	b.n	24796 <print_string_ptr+0xc2>
            *output_pointer++ = '\\';
   247ba:	4630      	mov	r0, r6
   247bc:	f800 8b01 	strb.w	r8, [r0], #1
            switch (*input_pointer)
   247c0:	f89b 3000 	ldrb.w	r3, [fp]
   247c4:	2b0d      	cmp	r3, #13
   247c6:	d80e      	bhi.n	247e6 <print_string_ptr+0x112>
   247c8:	2b07      	cmp	r3, #7
   247ca:	d910      	bls.n	247ee <print_string_ptr+0x11a>
   247cc:	f1a3 0208 	sub.w	r2, r3, #8
   247d0:	2a05      	cmp	r2, #5
   247d2:	d80c      	bhi.n	247ee <print_string_ptr+0x11a>
   247d4:	e8df f002 	tbb	[pc, r2]
   247d8:	0b161a03 	.word	0x0b161a03
   247dc:	1814      	.short	0x1814
   247de:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = '\"';
   247e0:	7073      	strb	r3, [r6, #1]
            *output_pointer++ = '\\';
   247e2:	4606      	mov	r6, r0
   247e4:	e7e7      	b.n	247b6 <print_string_ptr+0xe2>
            switch (*input_pointer)
   247e6:	2b22      	cmp	r3, #34	; 0x22
   247e8:	d0fa      	beq.n	247e0 <print_string_ptr+0x10c>
   247ea:	2b5c      	cmp	r3, #92	; 0x5c
   247ec:	d0f8      	beq.n	247e0 <print_string_ptr+0x10c>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   247ee:	6839      	ldr	r1, [r7, #0]
   247f0:	687c      	ldr	r4, [r7, #4]
   247f2:	1a41      	subs	r1, r0, r1
   247f4:	4a08      	ldr	r2, [pc, #32]	; (24818 <print_string_ptr+0x144>)
   247f6:	1a61      	subs	r1, r4, r1
   247f8:	f007 fe08 	bl	2c40c <sniprintf>
                    output_pointer += 4;
   247fc:	3605      	adds	r6, #5
                    break;
   247fe:	e7da      	b.n	247b6 <print_string_ptr+0xe2>
            switch (*input_pointer)
   24800:	2366      	movs	r3, #102	; 0x66
   24802:	e7ed      	b.n	247e0 <print_string_ptr+0x10c>
                    break;
   24804:	236e      	movs	r3, #110	; 0x6e
   24806:	e7eb      	b.n	247e0 <print_string_ptr+0x10c>
                    break;
   24808:	2372      	movs	r3, #114	; 0x72
   2480a:	e7e9      	b.n	247e0 <print_string_ptr+0x10c>
                    break;
   2480c:	2374      	movs	r3, #116	; 0x74
   2480e:	e7e7      	b.n	247e0 <print_string_ptr+0x10c>
   24810:	0003f897 	.word	0x0003f897
   24814:	04000037 	.word	0x04000037
   24818:	0003f891 	.word	0x0003f891

0002481c <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   2481c:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   2481e:	4605      	mov	r5, r0
   24820:	b140      	cbz	r0, 24834 <cJSON_strdup.constprop.0+0x18>
    length = strlen((const char*)string) + sizeof("");
   24822:	f7e4 fd7a 	bl	931a <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   24826:	4b07      	ldr	r3, [pc, #28]	; (24844 <cJSON_strdup.constprop.0+0x28>)
    length = strlen((const char*)string) + sizeof("");
   24828:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2482a:	4630      	mov	r0, r6
   2482c:	681b      	ldr	r3, [r3, #0]
   2482e:	4798      	blx	r3
    if (copy == NULL)
   24830:	4604      	mov	r4, r0
   24832:	b910      	cbnz	r0, 2483a <cJSON_strdup.constprop.0+0x1e>
        return NULL;
   24834:	2400      	movs	r4, #0
}
   24836:	4620      	mov	r0, r4
   24838:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2483a:	4632      	mov	r2, r6
   2483c:	4629      	mov	r1, r5
   2483e:	f010 fbd5 	bl	34fec <memcpy>
   24842:	e7f8      	b.n	24836 <cJSON_strdup.constprop.0+0x1a>
   24844:	2000c9e4 	.word	0x2000c9e4

00024848 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   24848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2484a:	460d      	mov	r5, r1
   2484c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   2484e:	4607      	mov	r7, r0
   24850:	b300      	cbz	r0, 24894 <add_item_to_object.constprop.0+0x4c>
   24852:	b1f9      	cbz	r1, 24894 <add_item_to_object.constprop.0+0x4c>
   24854:	b1f2      	cbz	r2, 24894 <add_item_to_object.constprop.0+0x4c>
   24856:	4290      	cmp	r0, r2
   24858:	d01c      	beq.n	24894 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   2485a:	b193      	cbz	r3, 24882 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   2485c:	68d6      	ldr	r6, [r2, #12]
   2485e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   24862:	68e3      	ldr	r3, [r4, #12]
   24864:	059b      	lsls	r3, r3, #22
   24866:	d404      	bmi.n	24872 <add_item_to_object.constprop.0+0x2a>
   24868:	6a20      	ldr	r0, [r4, #32]
   2486a:	b110      	cbz	r0, 24872 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   2486c:	4b0a      	ldr	r3, [pc, #40]	; (24898 <add_item_to_object.constprop.0+0x50>)
   2486e:	685b      	ldr	r3, [r3, #4]
   24870:	4798      	blx	r3
    item->string = new_key;
   24872:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   24874:	60e6      	str	r6, [r4, #12]
    return add_item_to_array(object, item);
   24876:	4621      	mov	r1, r4
   24878:	4638      	mov	r0, r7
}
   2487a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2487e:	f00e bf45 	b.w	3370c <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   24882:	4608      	mov	r0, r1
   24884:	f7ff ffca 	bl	2481c <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   24888:	4605      	mov	r5, r0
   2488a:	b118      	cbz	r0, 24894 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   2488c:	68e6      	ldr	r6, [r4, #12]
   2488e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   24892:	e7e6      	b.n	24862 <add_item_to_object.constprop.0+0x1a>
}
   24894:	2000      	movs	r0, #0
   24896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24898:	2000c9e4 	.word	0x2000c9e4

0002489c <print_value>:
{
   2489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248a0:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   248a2:	4606      	mov	r6, r0
{
   248a4:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   248a6:	b1c8      	cbz	r0, 248dc <print_value+0x40>
   248a8:	b1c1      	cbz	r1, 248dc <print_value+0x40>
    switch ((item->type) & 0xFF)
   248aa:	7b05      	ldrb	r5, [r0, #12]
   248ac:	2d10      	cmp	r5, #16
   248ae:	f000 80d9 	beq.w	24a64 <print_value+0x1c8>
   248b2:	dc0a      	bgt.n	248ca <print_value+0x2e>
   248b4:	1e6b      	subs	r3, r5, #1
   248b6:	2b07      	cmp	r3, #7
   248b8:	d810      	bhi.n	248dc <print_value+0x40>
   248ba:	2b07      	cmp	r3, #7
   248bc:	d80e      	bhi.n	248dc <print_value+0x40>
   248be:	e8df f003 	tbb	[pc, r3]
   248c2:	3923      	.short	0x3923
   248c4:	0d0d0f0d 	.word	0x0d0d0f0d
   248c8:	3b0d      	.short	0x3b0d
   248ca:	2d40      	cmp	r5, #64	; 0x40
   248cc:	f000 811b 	beq.w	24b06 <print_value+0x26a>
   248d0:	2d80      	cmp	r5, #128	; 0x80
   248d2:	f000 80b4 	beq.w	24a3e <print_value+0x1a2>
   248d6:	2d20      	cmp	r5, #32
   248d8:	f000 80ca 	beq.w	24a70 <print_value+0x1d4>
        return false;
   248dc:	2500      	movs	r5, #0
   248de:	e025      	b.n	2492c <print_value+0x90>
            const char buff[] = "null";
   248e0:	4ba1      	ldr	r3, [pc, #644]	; (24b68 <print_value+0x2cc>)
            const char buff[] = "true";
   248e2:	6818      	ldr	r0, [r3, #0]
   248e4:	791b      	ldrb	r3, [r3, #4]
   248e6:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   248e8:	2105      	movs	r1, #5
   248ea:	4620      	mov	r0, r4
            const char buff[] = "true";
   248ec:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   248f0:	f00e ff21 	bl	33736 <ensure>
   248f4:	4605      	mov	r5, r0
            if (output == NULL)
   248f6:	b1c8      	cbz	r0, 2492c <print_value+0x90>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   248f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   248fc:	a907      	add	r1, sp, #28
   248fe:	1ad2      	subs	r2, r2, r3
   24900:	f010 fd4c 	bl	3539c <strncpy>
    return true;
   24904:	2501      	movs	r5, #1
   24906:	e011      	b.n	2492c <print_value+0x90>
            const char buff[] = "false";
   24908:	4b98      	ldr	r3, [pc, #608]	; (24b6c <print_value+0x2d0>)
            output = ensure(output_buffer, sizeof(buff));
   2490a:	2106      	movs	r1, #6
            const char buff[] = "false";
   2490c:	6818      	ldr	r0, [r3, #0]
   2490e:	889b      	ldrh	r3, [r3, #4]
   24910:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   24912:	4620      	mov	r0, r4
            const char buff[] = "false";
   24914:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   24918:	f00e ff0d 	bl	33736 <ensure>
            if (output == NULL)
   2491c:	2800      	cmp	r0, #0
   2491e:	d0dd      	beq.n	248dc <print_value+0x40>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   24920:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   24924:	a907      	add	r1, sp, #28
   24926:	1ad2      	subs	r2, r2, r3
   24928:	f010 fd38 	bl	3539c <strncpy>
}
   2492c:	4628      	mov	r0, r5
   2492e:	b00f      	add	sp, #60	; 0x3c
   24930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            const char buff[] = "true";
   24934:	4b8e      	ldr	r3, [pc, #568]	; (24b70 <print_value+0x2d4>)
   24936:	e7d4      	b.n	248e2 <print_value+0x46>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   24938:	2100      	movs	r1, #0
    double d = item->valuedouble;
   2493a:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   2493e:	2216      	movs	r2, #22
   24940:	a808      	add	r0, sp, #32
   24942:	9107      	str	r1, [sp, #28]
   24944:	f010 fb72 	bl	3502c <memset>
    double test = 0.0;
   24948:	2200      	movs	r2, #0
   2494a:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   2494c:	4640      	mov	r0, r8
    double test = 0.0;
   2494e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   24952:	4649      	mov	r1, r9
   24954:	4642      	mov	r2, r8
   24956:	464b      	mov	r3, r9
   24958:	f7e4 f97c 	bl	8c54 <__aeabi_dcmpun>
   2495c:	b990      	cbnz	r0, 24984 <print_value+0xe8>
   2495e:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
   24962:	f04f 32ff 	mov.w	r2, #4294967295
   24966:	4640      	mov	r0, r8
   24968:	4659      	mov	r1, fp
   2496a:	4b82      	ldr	r3, [pc, #520]	; (24b74 <print_value+0x2d8>)
   2496c:	46c2      	mov	sl, r8
   2496e:	f7e4 f971 	bl	8c54 <__aeabi_dcmpun>
   24972:	b9e8      	cbnz	r0, 249b0 <print_value+0x114>
   24974:	f04f 32ff 	mov.w	r2, #4294967295
   24978:	4640      	mov	r0, r8
   2497a:	4659      	mov	r1, fp
   2497c:	4b7d      	ldr	r3, [pc, #500]	; (24b74 <print_value+0x2d8>)
   2497e:	f7e4 f94b 	bl	8c18 <__aeabi_dcmple>
   24982:	b9a8      	cbnz	r0, 249b0 <print_value+0x114>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   24984:	4978      	ldr	r1, [pc, #480]	; (24b68 <print_value+0x2cc>)
   24986:	a807      	add	r0, sp, #28
   24988:	f010 fcee 	bl	35368 <strcpy>
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   2498c:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   2498e:	4620      	mov	r0, r4
   24990:	1c69      	adds	r1, r5, #1
   24992:	f00e fed0 	bl	33736 <ensure>
    if (output_pointer == NULL)
   24996:	2800      	cmp	r0, #0
   24998:	d0a0      	beq.n	248dc <print_value+0x40>
   2499a:	4603      	mov	r3, r0
   2499c:	aa07      	add	r2, sp, #28
   2499e:	1941      	adds	r1, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   249a0:	4299      	cmp	r1, r3
   249a2:	d147      	bne.n	24a34 <print_value+0x198>
    output_pointer[i] = '\0';
   249a4:	2300      	movs	r3, #0
   249a6:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   249a8:	68a3      	ldr	r3, [r4, #8]
   249aa:	442b      	add	r3, r5
   249ac:	60a3      	str	r3, [r4, #8]
    return true;
   249ae:	e7a9      	b.n	24904 <print_value+0x68>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   249b0:	211a      	movs	r1, #26
   249b2:	4a71      	ldr	r2, [pc, #452]	; (24b78 <print_value+0x2dc>)
   249b4:	e9cd 8900 	strd	r8, r9, [sp]
   249b8:	a807      	add	r0, sp, #28
   249ba:	f007 fd27 	bl	2c40c <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   249be:	496f      	ldr	r1, [pc, #444]	; (24b7c <print_value+0x2e0>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   249c0:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   249c2:	aa04      	add	r2, sp, #16
   249c4:	a807      	add	r0, sp, #28
   249c6:	f007 fd55 	bl	2c474 <siscanf>
   249ca:	2801      	cmp	r0, #1
   249cc:	d126      	bne.n	24a1c <print_value+0x180>
   249ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   249d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   249d6:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
   249da:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   249de:	4632      	mov	r2, r6
   249e0:	463b      	mov	r3, r7
   249e2:	4650      	mov	r0, sl
   249e4:	4659      	mov	r1, fp
   249e6:	f7e4 f90d 	bl	8c04 <__aeabi_dcmplt>
   249ea:	b108      	cbz	r0, 249f0 <print_value+0x154>
   249ec:	46b2      	mov	sl, r6
   249ee:	46bb      	mov	fp, r7
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   249f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   249f4:	4642      	mov	r2, r8
   249f6:	464b      	mov	r3, r9
   249f8:	f7e3 fcda 	bl	83b0 <__aeabi_dsub>
   249fc:	2200      	movs	r2, #0
   249fe:	4606      	mov	r6, r0
   24a00:	4b5f      	ldr	r3, [pc, #380]	; (24b80 <print_value+0x2e4>)
   24a02:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   24a06:	4650      	mov	r0, sl
   24a08:	4659      	mov	r1, fp
   24a0a:	f7e3 fe89 	bl	8720 <__aeabi_dmul>
   24a0e:	4602      	mov	r2, r0
   24a10:	460b      	mov	r3, r1
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   24a12:	4630      	mov	r0, r6
   24a14:	4639      	mov	r1, r7
   24a16:	f7e4 f8ff 	bl	8c18 <__aeabi_dcmple>
   24a1a:	b938      	cbnz	r0, 24a2c <print_value+0x190>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   24a1c:	211a      	movs	r1, #26
   24a1e:	e9cd 8900 	strd	r8, r9, [sp]
   24a22:	4a58      	ldr	r2, [pc, #352]	; (24b84 <print_value+0x2e8>)
   24a24:	a807      	add	r0, sp, #28
   24a26:	f007 fcf1 	bl	2c40c <sniprintf>
   24a2a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   24a2c:	2d19      	cmp	r5, #25
   24a2e:	f73f af55 	bgt.w	248dc <print_value+0x40>
   24a32:	e7ac      	b.n	2498e <print_value+0xf2>
        if (number_buffer[i] == decimal_point)
   24a34:	f812 6b01 	ldrb.w	r6, [r2], #1
            output_pointer[i] = '.';
   24a38:	f803 6b01 	strb.w	r6, [r3], #1
    for (i = 0; i < ((size_t)length); i++)
   24a3c:	e7b0      	b.n	249a0 <print_value+0x104>
            if (item->valuestring == NULL)
   24a3e:	6900      	ldr	r0, [r0, #16]
   24a40:	2800      	cmp	r0, #0
   24a42:	f43f af4b 	beq.w	248dc <print_value+0x40>
            raw_length = strlen(item->valuestring) + sizeof("");
   24a46:	f7e4 fc68 	bl	931a <strlen>
   24a4a:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   24a4c:	4629      	mov	r1, r5
   24a4e:	4620      	mov	r0, r4
   24a50:	f00e fe71 	bl	33736 <ensure>
            if (output == NULL)
   24a54:	2800      	cmp	r0, #0
   24a56:	f43f af41 	beq.w	248dc <print_value+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24a5a:	462a      	mov	r2, r5
   24a5c:	6931      	ldr	r1, [r6, #16]
   24a5e:	f010 fac5 	bl	34fec <memcpy>
   24a62:	e74f      	b.n	24904 <print_value+0x68>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   24a64:	6900      	ldr	r0, [r0, #16]
}
   24a66:	b00f      	add	sp, #60	; 0x3c
   24a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   24a6c:	f7ff be32 	b.w	246d4 <print_string_ptr>
            return print_array(item, output_buffer);
   24a70:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   24a72:	2101      	movs	r1, #1
   24a74:	4620      	mov	r0, r4
   24a76:	f00e fe5e 	bl	33736 <ensure>
    if (output_pointer == NULL)
   24a7a:	2800      	cmp	r0, #0
   24a7c:	f43f af2e 	beq.w	248dc <print_value+0x40>
    *output_pointer = '[';
   24a80:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   24a82:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   24a84:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   24a88:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   24a8a:	68a3      	ldr	r3, [r4, #8]
   24a8c:	3301      	adds	r3, #1
   24a8e:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   24a90:	68e3      	ldr	r3, [r4, #12]
   24a92:	3301      	adds	r3, #1
   24a94:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   24a96:	b96e      	cbnz	r6, 24ab4 <print_value+0x218>
    output_pointer = ensure(output_buffer, 2);
   24a98:	2102      	movs	r1, #2
   24a9a:	4620      	mov	r0, r4
   24a9c:	f00e fe4b 	bl	33736 <ensure>
    if (output_pointer == NULL)
   24aa0:	2800      	cmp	r0, #0
   24aa2:	f43f af1b 	beq.w	248dc <print_value+0x40>
    *output_pointer++ = ']';
   24aa6:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   24aa8:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   24aaa:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   24aac:	68e3      	ldr	r3, [r4, #12]
   24aae:	3b01      	subs	r3, #1
   24ab0:	60e3      	str	r3, [r4, #12]
    return true;
   24ab2:	e727      	b.n	24904 <print_value+0x68>
        if (!print_value(current_element, output_buffer))
   24ab4:	4621      	mov	r1, r4
   24ab6:	4630      	mov	r0, r6
   24ab8:	f7ff fef0 	bl	2489c <print_value>
   24abc:	2800      	cmp	r0, #0
   24abe:	f43f af0d 	beq.w	248dc <print_value+0x40>
        update_offset(output_buffer);
   24ac2:	4620      	mov	r0, r4
   24ac4:	f00e fe16 	bl	336f4 <update_offset>
        if (current_element->next)
   24ac8:	6833      	ldr	r3, [r6, #0]
   24aca:	b1bb      	cbz	r3, 24afc <print_value+0x260>
            length = (size_t) (output_buffer->format ? 2 : 1);
   24acc:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   24ace:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   24ad0:	2b00      	cmp	r3, #0
   24ad2:	bf0c      	ite	eq
   24ad4:	f04f 0901 	moveq.w	r9, #1
   24ad8:	f04f 0902 	movne.w	r9, #2
            output_pointer = ensure(output_buffer, length + 1);
   24adc:	f109 0101 	add.w	r1, r9, #1
   24ae0:	f00e fe29 	bl	33736 <ensure>
            if (output_pointer == NULL)
   24ae4:	2800      	cmp	r0, #0
   24ae6:	f43f aef9 	beq.w	248dc <print_value+0x40>
            *output_pointer++ = ',';
   24aea:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   24aec:	6963      	ldr	r3, [r4, #20]
   24aee:	b93b      	cbnz	r3, 24b00 <print_value+0x264>
            *output_pointer++ = ',';
   24af0:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   24af2:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   24af6:	68a3      	ldr	r3, [r4, #8]
   24af8:	444b      	add	r3, r9
   24afa:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   24afc:	6836      	ldr	r6, [r6, #0]
   24afe:	e7ca      	b.n	24a96 <print_value+0x1fa>
                *output_pointer++ = ' ';
   24b00:	1c83      	adds	r3, r0, #2
   24b02:	7045      	strb	r5, [r0, #1]
   24b04:	e7f5      	b.n	24af2 <print_value+0x256>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   24b06:	694b      	ldr	r3, [r1, #20]
   24b08:	6885      	ldr	r5, [r0, #8]
   24b0a:	2b00      	cmp	r3, #0
   24b0c:	bf0c      	ite	eq
   24b0e:	2701      	moveq	r7, #1
   24b10:	2702      	movne	r7, #2
    output_pointer = ensure(output_buffer, length + 1);
   24b12:	4620      	mov	r0, r4
   24b14:	1c79      	adds	r1, r7, #1
   24b16:	f00e fe0e 	bl	33736 <ensure>
    if (output_pointer == NULL)
   24b1a:	2800      	cmp	r0, #0
   24b1c:	f43f aede 	beq.w	248dc <print_value+0x40>
    *output_pointer++ = '{';
   24b20:	237b      	movs	r3, #123	; 0x7b
   24b22:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   24b24:	68e3      	ldr	r3, [r4, #12]
   24b26:	3301      	adds	r3, #1
   24b28:	60e3      	str	r3, [r4, #12]
    if (output_buffer->format)
   24b2a:	6963      	ldr	r3, [r4, #20]
   24b2c:	b10b      	cbz	r3, 24b32 <print_value+0x296>
        *output_pointer++ = '\n';
   24b2e:	230a      	movs	r3, #10
   24b30:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   24b32:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   24b34:	2609      	movs	r6, #9
    output_buffer->offset += length;
   24b36:	443b      	add	r3, r7
        *output_pointer++ = ':';
   24b38:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   24b3a:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   24b3c:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   24b3e:	bb1d      	cbnz	r5, 24b88 <print_value+0x2ec>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   24b40:	2b00      	cmp	r3, #0
   24b42:	f000 8081 	beq.w	24c48 <print_value+0x3ac>
   24b46:	68e1      	ldr	r1, [r4, #12]
   24b48:	3101      	adds	r1, #1
   24b4a:	4620      	mov	r0, r4
   24b4c:	f00e fdf3 	bl	33736 <ensure>
    if (output_pointer == NULL)
   24b50:	2800      	cmp	r0, #0
   24b52:	f43f aec3 	beq.w	248dc <print_value+0x40>
    if (output_buffer->format)
   24b56:	6963      	ldr	r3, [r4, #20]
   24b58:	2b00      	cmp	r3, #0
   24b5a:	d17f      	bne.n	24c5c <print_value+0x3c0>
   24b5c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   24b5e:	227d      	movs	r2, #125	; 0x7d
   24b60:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   24b62:	2200      	movs	r2, #0
   24b64:	705a      	strb	r2, [r3, #1]
    output_buffer->depth--;
   24b66:	e7a1      	b.n	24aac <print_value+0x210>
   24b68:	0003f89a 	.word	0x0003f89a
   24b6c:	0003f8b1 	.word	0x0003f8b1
   24b70:	0003f8b7 	.word	0x0003f8b7
   24b74:	7fefffff 	.word	0x7fefffff
   24b78:	0003f89f 	.word	0x0003f89f
   24b7c:	0003f8a6 	.word	0x0003f8a6
   24b80:	3cb00000 	.word	0x3cb00000
   24b84:	0003f8aa 	.word	0x0003f8aa
        if (output_buffer->format)
   24b88:	b173      	cbz	r3, 24ba8 <print_value+0x30c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   24b8a:	4620      	mov	r0, r4
   24b8c:	68e1      	ldr	r1, [r4, #12]
   24b8e:	f00e fdd2 	bl	33736 <ensure>
            if (output_pointer == NULL)
   24b92:	2800      	cmp	r0, #0
   24b94:	f43f aea2 	beq.w	248dc <print_value+0x40>
   24b98:	4603      	mov	r3, r0
            for (i = 0; i < output_buffer->depth; i++)
   24b9a:	68e2      	ldr	r2, [r4, #12]
   24b9c:	1a19      	subs	r1, r3, r0
   24b9e:	4291      	cmp	r1, r2
   24ba0:	d34f      	bcc.n	24c42 <print_value+0x3a6>
            output_buffer->offset += output_buffer->depth;
   24ba2:	68a3      	ldr	r3, [r4, #8]
   24ba4:	4413      	add	r3, r2
   24ba6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   24ba8:	4621      	mov	r1, r4
   24baa:	6a28      	ldr	r0, [r5, #32]
   24bac:	f7ff fd92 	bl	246d4 <print_string_ptr>
   24bb0:	2800      	cmp	r0, #0
   24bb2:	f43f ae93 	beq.w	248dc <print_value+0x40>
        update_offset(output_buffer);
   24bb6:	4620      	mov	r0, r4
   24bb8:	f00e fd9c 	bl	336f4 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   24bbc:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   24bbe:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   24bc0:	2b00      	cmp	r3, #0
   24bc2:	bf0c      	ite	eq
   24bc4:	f04f 0801 	moveq.w	r8, #1
   24bc8:	f04f 0802 	movne.w	r8, #2
        output_pointer = ensure(output_buffer, length);
   24bcc:	4641      	mov	r1, r8
   24bce:	f00e fdb2 	bl	33736 <ensure>
        if (output_pointer == NULL)
   24bd2:	2800      	cmp	r0, #0
   24bd4:	f43f ae82 	beq.w	248dc <print_value+0x40>
        *output_pointer++ = ':';
   24bd8:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   24bda:	6963      	ldr	r3, [r4, #20]
   24bdc:	b103      	cbz	r3, 24be0 <print_value+0x344>
            *output_pointer++ = '\t';
   24bde:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   24be0:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   24be2:	4621      	mov	r1, r4
        output_buffer->offset += length;
   24be4:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   24be6:	4628      	mov	r0, r5
        output_buffer->offset += length;
   24be8:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   24bea:	f7ff fe57 	bl	2489c <print_value>
   24bee:	2800      	cmp	r0, #0
   24bf0:	f43f ae74 	beq.w	248dc <print_value+0x40>
        update_offset(output_buffer);
   24bf4:	4620      	mov	r0, r4
   24bf6:	f00e fd7d 	bl	336f4 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   24bfa:	6963      	ldr	r3, [r4, #20]
   24bfc:	682a      	ldr	r2, [r5, #0]
   24bfe:	f1b3 0800 	subs.w	r8, r3, #0
   24c02:	bf18      	it	ne
   24c04:	f04f 0801 	movne.w	r8, #1
   24c08:	2a00      	cmp	r2, #0
   24c0a:	bf18      	it	ne
   24c0c:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   24c10:	4620      	mov	r0, r4
   24c12:	f108 0101 	add.w	r1, r8, #1
   24c16:	f00e fd8e 	bl	33736 <ensure>
        if (output_pointer == NULL)
   24c1a:	2800      	cmp	r0, #0
   24c1c:	f43f ae5e 	beq.w	248dc <print_value+0x40>
        if (current_item->next)
   24c20:	682b      	ldr	r3, [r5, #0]
   24c22:	b113      	cbz	r3, 24c2a <print_value+0x38e>
            *output_pointer++ = ',';
   24c24:	232c      	movs	r3, #44	; 0x2c
   24c26:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   24c2a:	6963      	ldr	r3, [r4, #20]
   24c2c:	b113      	cbz	r3, 24c34 <print_value+0x398>
            *output_pointer++ = '\n';
   24c2e:	230a      	movs	r3, #10
   24c30:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   24c34:	2300      	movs	r3, #0
   24c36:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   24c38:	68a3      	ldr	r3, [r4, #8]
   24c3a:	4443      	add	r3, r8
   24c3c:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   24c3e:	682d      	ldr	r5, [r5, #0]
   24c40:	e77c      	b.n	24b3c <print_value+0x2a0>
                *output_pointer++ = '\t';
   24c42:	f803 6b01 	strb.w	r6, [r3], #1
            for (i = 0; i < output_buffer->depth; i++)
   24c46:	e7a8      	b.n	24b9a <print_value+0x2fe>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   24c48:	2102      	movs	r1, #2
   24c4a:	e77e      	b.n	24b4a <print_value+0x2ae>
            *output_pointer++ = '\t';
   24c4c:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   24c50:	68e2      	ldr	r2, [r4, #12]
   24c52:	1a19      	subs	r1, r3, r0
   24c54:	3a01      	subs	r2, #1
   24c56:	4291      	cmp	r1, r2
   24c58:	d3f8      	bcc.n	24c4c <print_value+0x3b0>
   24c5a:	e780      	b.n	24b5e <print_value+0x2c2>
   24c5c:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   24c5e:	2509      	movs	r5, #9
   24c60:	e7f6      	b.n	24c50 <print_value+0x3b4>
   24c62:	bf00      	nop

00024c64 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c64:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c66:	4d23      	ldr	r5, [pc, #140]	; (24cf4 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c68:	b08a      	sub	sp, #40	; 0x28
   24c6a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   24c6c:	2224      	movs	r2, #36	; 0x24
   24c6e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   24c70:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   24c72:	a801      	add	r0, sp, #4
   24c74:	f010 f9da 	bl	3502c <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c78:	682b      	ldr	r3, [r5, #0]
   24c7a:	f44f 7080 	mov.w	r0, #256	; 0x100
   24c7e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   24c80:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c84:	4603      	mov	r3, r0
    buffer->format = format;
   24c86:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   24c88:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   24c8a:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   24c8c:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   24c8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   24c92:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   24c96:	b17b      	cbz	r3, 24cb8 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   24c98:	4620      	mov	r0, r4
   24c9a:	a901      	add	r1, sp, #4
   24c9c:	f7ff fdfe 	bl	2489c <print_value>
   24ca0:	b150      	cbz	r0, 24cb8 <print.constprop.0+0x54>
    update_offset(buffer);
   24ca2:	a801      	add	r0, sp, #4
   24ca4:	f00e fd26 	bl	336f4 <update_offset>
    if (hooks->reallocate != NULL)
   24ca8:	68ae      	ldr	r6, [r5, #8]
   24caa:	9903      	ldr	r1, [sp, #12]
   24cac:	b156      	cbz	r6, 24cc4 <print.constprop.0+0x60>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   24cae:	9801      	ldr	r0, [sp, #4]
   24cb0:	3101      	adds	r1, #1
   24cb2:	47b0      	blx	r6
        if (printed == NULL) {
   24cb4:	4604      	mov	r4, r0
   24cb6:	b9c8      	cbnz	r0, 24cec <print.constprop.0+0x88>
    if (buffer->buffer != NULL)
   24cb8:	9801      	ldr	r0, [sp, #4]
   24cba:	b108      	cbz	r0, 24cc0 <print.constprop.0+0x5c>
        hooks->deallocate(buffer->buffer);
   24cbc:	686b      	ldr	r3, [r5, #4]
   24cbe:	4798      	blx	r3
    return NULL;
   24cc0:	2400      	movs	r4, #0
   24cc2:	e013      	b.n	24cec <print.constprop.0+0x88>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   24cc4:	682b      	ldr	r3, [r5, #0]
   24cc6:	1c48      	adds	r0, r1, #1
   24cc8:	4798      	blx	r3
        if (printed == NULL)
   24cca:	4604      	mov	r4, r0
   24ccc:	2800      	cmp	r0, #0
   24cce:	d0f3      	beq.n	24cb8 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   24cd0:	9a03      	ldr	r2, [sp, #12]
   24cd2:	9b02      	ldr	r3, [sp, #8]
   24cd4:	3201      	adds	r2, #1
   24cd6:	429a      	cmp	r2, r3
   24cd8:	bf28      	it	cs
   24cda:	461a      	movcs	r2, r3
   24cdc:	9901      	ldr	r1, [sp, #4]
   24cde:	f010 f985 	bl	34fec <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   24ce2:	9b03      	ldr	r3, [sp, #12]
   24ce4:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   24ce6:	686b      	ldr	r3, [r5, #4]
   24ce8:	9801      	ldr	r0, [sp, #4]
   24cea:	4798      	blx	r3
}
   24cec:	4620      	mov	r0, r4
   24cee:	b00a      	add	sp, #40	; 0x28
   24cf0:	bd70      	pop	{r4, r5, r6, pc}
   24cf2:	bf00      	nop
   24cf4:	2000c9e4 	.word	0x2000c9e4

00024cf8 <cJSON_Delete>:
{
   24cf8:	b570      	push	{r4, r5, r6, lr}
   24cfa:	4604      	mov	r4, r0
   24cfc:	4d0f      	ldr	r5, [pc, #60]	; (24d3c <cJSON_Delete+0x44>)
    while (item != NULL)
   24cfe:	b904      	cbnz	r4, 24d02 <cJSON_Delete+0xa>
}
   24d00:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   24d02:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   24d04:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   24d06:	05d9      	lsls	r1, r3, #23
   24d08:	d404      	bmi.n	24d14 <cJSON_Delete+0x1c>
   24d0a:	68a0      	ldr	r0, [r4, #8]
   24d0c:	b970      	cbnz	r0, 24d2c <cJSON_Delete+0x34>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24d0e:	6920      	ldr	r0, [r4, #16]
            global_hooks.deallocate(item->valuestring);
   24d10:	686b      	ldr	r3, [r5, #4]
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24d12:	b988      	cbnz	r0, 24d38 <cJSON_Delete+0x40>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   24d14:	68e3      	ldr	r3, [r4, #12]
   24d16:	059b      	lsls	r3, r3, #22
   24d18:	d403      	bmi.n	24d22 <cJSON_Delete+0x2a>
   24d1a:	6a20      	ldr	r0, [r4, #32]
   24d1c:	b108      	cbz	r0, 24d22 <cJSON_Delete+0x2a>
            global_hooks.deallocate(item->string);
   24d1e:	686b      	ldr	r3, [r5, #4]
   24d20:	4798      	blx	r3
        global_hooks.deallocate(item);
   24d22:	4620      	mov	r0, r4
   24d24:	686b      	ldr	r3, [r5, #4]
   24d26:	4798      	blx	r3
        item = next;
   24d28:	4634      	mov	r4, r6
   24d2a:	e7e8      	b.n	24cfe <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   24d2c:	f7ff ffe4 	bl	24cf8 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   24d30:	68e3      	ldr	r3, [r4, #12]
   24d32:	05da      	lsls	r2, r3, #23
   24d34:	d5eb      	bpl.n	24d0e <cJSON_Delete+0x16>
   24d36:	e7ed      	b.n	24d14 <cJSON_Delete+0x1c>
            global_hooks.deallocate(item->valuestring);
   24d38:	4798      	blx	r3
   24d3a:	e7eb      	b.n	24d14 <cJSON_Delete+0x1c>
   24d3c:	2000c9e4 	.word	0x2000c9e4

00024d40 <cJSON_ParseWithLengthOpts>:
{
   24d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24d44:	4605      	mov	r5, r0
    global_error.json = NULL;
   24d46:	f04f 0900 	mov.w	r9, #0
{
   24d4a:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   24d4c:	4f2f      	ldr	r7, [pc, #188]	; (24e0c <cJSON_ParseWithLengthOpts+0xcc>)
{
   24d4e:	460c      	mov	r4, r1
   24d50:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   24d52:	2100      	movs	r1, #0
   24d54:	221c      	movs	r2, #28
   24d56:	a801      	add	r0, sp, #4
{
   24d58:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   24d5a:	f010 f967 	bl	3502c <memset>
    global_error.position = 0;
   24d5e:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   24d62:	b925      	cbnz	r5, 24d6e <cJSON_ParseWithLengthOpts+0x2e>
    return NULL;
   24d64:	2400      	movs	r4, #0
}
   24d66:	4620      	mov	r0, r4
   24d68:	b009      	add	sp, #36	; 0x24
   24d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value == NULL || 0 == buffer_length)
   24d6e:	2c00      	cmp	r4, #0
   24d70:	d03d      	beq.n	24dee <cJSON_ParseWithLengthOpts+0xae>
    buffer.hooks = global_hooks;
   24d72:	4b27      	ldr	r3, [pc, #156]	; (24e10 <cJSON_ParseWithLengthOpts+0xd0>)
    buffer.length = buffer_length; 
   24d74:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   24d78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   24d7c:	ab08      	add	r3, sp, #32
   24d7e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   24d82:	f00e fd16 	bl	337b2 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   24d86:	4604      	mov	r4, r0
   24d88:	2800      	cmp	r0, #0
   24d8a:	d030      	beq.n	24dee <cJSON_ParseWithLengthOpts+0xae>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   24d8c:	9801      	ldr	r0, [sp, #4]
   24d8e:	b150      	cbz	r0, 24da6 <cJSON_ParseWithLengthOpts+0x66>
   24d90:	9b03      	ldr	r3, [sp, #12]
   24d92:	b9e3      	cbnz	r3, 24dce <cJSON_ParseWithLengthOpts+0x8e>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   24d94:	9b02      	ldr	r3, [sp, #8]
   24d96:	2b04      	cmp	r3, #4
   24d98:	d904      	bls.n	24da4 <cJSON_ParseWithLengthOpts+0x64>
   24d9a:	2203      	movs	r2, #3
   24d9c:	491d      	ldr	r1, [pc, #116]	; (24e14 <cJSON_ParseWithLengthOpts+0xd4>)
   24d9e:	f010 faeb 	bl	35378 <strncmp>
   24da2:	b188      	cbz	r0, 24dc8 <cJSON_ParseWithLengthOpts+0x88>
    return buffer;
   24da4:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   24da6:	f00e fc86 	bl	336b6 <buffer_skip_whitespace>
   24daa:	4601      	mov	r1, r0
   24dac:	4620      	mov	r0, r4
   24dae:	f7e4 fbcf 	bl	9550 <parse_value>
   24db2:	b1c8      	cbz	r0, 24de8 <cJSON_ParseWithLengthOpts+0xa8>
    if (require_null_terminated)
   24db4:	f1b8 0f00 	cmp.w	r8, #0
   24db8:	d10b      	bne.n	24dd2 <cJSON_ParseWithLengthOpts+0x92>
    if (return_parse_end)
   24dba:	2e00      	cmp	r6, #0
   24dbc:	d0d3      	beq.n	24d66 <cJSON_ParseWithLengthOpts+0x26>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   24dbe:	9b01      	ldr	r3, [sp, #4]
   24dc0:	9a03      	ldr	r2, [sp, #12]
   24dc2:	4413      	add	r3, r2
   24dc4:	6033      	str	r3, [r6, #0]
   24dc6:	e7ce      	b.n	24d66 <cJSON_ParseWithLengthOpts+0x26>
        buffer->offset += 3;
   24dc8:	2303      	movs	r3, #3
   24dca:	9303      	str	r3, [sp, #12]
   24dcc:	e7ea      	b.n	24da4 <cJSON_ParseWithLengthOpts+0x64>
        return NULL;
   24dce:	4648      	mov	r0, r9
   24dd0:	e7e9      	b.n	24da6 <cJSON_ParseWithLengthOpts+0x66>
        buffer_skip_whitespace(&buffer);
   24dd2:	a801      	add	r0, sp, #4
   24dd4:	f00e fc6f 	bl	336b6 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   24dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24ddc:	4293      	cmp	r3, r2
   24dde:	d203      	bcs.n	24de8 <cJSON_ParseWithLengthOpts+0xa8>
   24de0:	9a01      	ldr	r2, [sp, #4]
   24de2:	5cd3      	ldrb	r3, [r2, r3]
   24de4:	2b00      	cmp	r3, #0
   24de6:	d0e8      	beq.n	24dba <cJSON_ParseWithLengthOpts+0x7a>
        cJSON_Delete(item);
   24de8:	4620      	mov	r0, r4
   24dea:	f7ff ff85 	bl	24cf8 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   24dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24df2:	4293      	cmp	r3, r2
   24df4:	d301      	bcc.n	24dfa <cJSON_ParseWithLengthOpts+0xba>
        else if (buffer.length > 0)
   24df6:	b132      	cbz	r2, 24e06 <cJSON_ParseWithLengthOpts+0xc6>
            local_error.position = buffer.length - 1;
   24df8:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
   24dfa:	b10e      	cbz	r6, 24e00 <cJSON_ParseWithLengthOpts+0xc0>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   24dfc:	18ea      	adds	r2, r5, r3
   24dfe:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   24e00:	e9c7 5300 	strd	r5, r3, [r7]
   24e04:	e7ae      	b.n	24d64 <cJSON_ParseWithLengthOpts+0x24>
        local_error.position = 0;
   24e06:	4613      	mov	r3, r2
   24e08:	e7f7      	b.n	24dfa <cJSON_ParseWithLengthOpts+0xba>
   24e0a:	bf00      	nop
   24e0c:	20010bdc 	.word	0x20010bdc
   24e10:	2000c9e4 	.word	0x2000c9e4
   24e14:	0003f8bc 	.word	0x0003f8bc

00024e18 <cJSON_CreateNull>:
{
   24e18:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e1a:	4b04      	ldr	r3, [pc, #16]	; (24e2c <cJSON_CreateNull+0x14>)
   24e1c:	6818      	ldr	r0, [r3, #0]
   24e1e:	f00e fcc8 	bl	337b2 <cJSON_New_Item.isra.0>
    if(item)
   24e22:	b108      	cbz	r0, 24e28 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   24e24:	2304      	movs	r3, #4
   24e26:	60c3      	str	r3, [r0, #12]
}
   24e28:	bd08      	pop	{r3, pc}
   24e2a:	bf00      	nop
   24e2c:	2000c9e4 	.word	0x2000c9e4

00024e30 <cJSON_CreateBool>:
{
   24e30:	b510      	push	{r4, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e32:	4b06      	ldr	r3, [pc, #24]	; (24e4c <cJSON_CreateBool+0x1c>)
{
   24e34:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e36:	6818      	ldr	r0, [r3, #0]
   24e38:	f00e fcbb 	bl	337b2 <cJSON_New_Item.isra.0>
    if(item)
   24e3c:	b120      	cbz	r0, 24e48 <cJSON_CreateBool+0x18>
        item->type = boolean ? cJSON_True : cJSON_False;
   24e3e:	2c00      	cmp	r4, #0
   24e40:	bf0c      	ite	eq
   24e42:	2301      	moveq	r3, #1
   24e44:	2302      	movne	r3, #2
   24e46:	60c3      	str	r3, [r0, #12]
}
   24e48:	bd10      	pop	{r4, pc}
   24e4a:	bf00      	nop
   24e4c:	2000c9e4 	.word	0x2000c9e4

00024e50 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   24e50:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e52:	4b0a      	ldr	r3, [pc, #40]	; (24e7c <cJSON_CreateString+0x2c>)
{
   24e54:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e56:	6818      	ldr	r0, [r3, #0]
   24e58:	f00e fcab 	bl	337b2 <cJSON_New_Item.isra.0>
    if(item)
   24e5c:	4604      	mov	r4, r0
   24e5e:	b148      	cbz	r0, 24e74 <cJSON_CreateString+0x24>
    {
        item->type = cJSON_String;
   24e60:	2310      	movs	r3, #16
   24e62:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   24e64:	4628      	mov	r0, r5
   24e66:	f7ff fcd9 	bl	2481c <cJSON_strdup.constprop.0>
   24e6a:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   24e6c:	b918      	cbnz	r0, 24e76 <cJSON_CreateString+0x26>
        {
            cJSON_Delete(item);
   24e6e:	4620      	mov	r0, r4
   24e70:	f7ff ff42 	bl	24cf8 <cJSON_Delete>
            return NULL;
   24e74:	2400      	movs	r4, #0
        }
    }

    return item;
}
   24e76:	4620      	mov	r0, r4
   24e78:	bd38      	pop	{r3, r4, r5, pc}
   24e7a:	bf00      	nop
   24e7c:	2000c9e4 	.word	0x2000c9e4

00024e80 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   24e80:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e82:	4b04      	ldr	r3, [pc, #16]	; (24e94 <cJSON_CreateArray+0x14>)
   24e84:	6818      	ldr	r0, [r3, #0]
   24e86:	f00e fc94 	bl	337b2 <cJSON_New_Item.isra.0>
    if(item)
   24e8a:	b108      	cbz	r0, 24e90 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   24e8c:	2320      	movs	r3, #32
   24e8e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   24e90:	bd08      	pop	{r3, pc}
   24e92:	bf00      	nop
   24e94:	2000c9e4 	.word	0x2000c9e4

00024e98 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   24e98:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   24e9a:	4b04      	ldr	r3, [pc, #16]	; (24eac <cJSON_CreateObject+0x14>)
   24e9c:	6818      	ldr	r0, [r3, #0]
   24e9e:	f00e fc88 	bl	337b2 <cJSON_New_Item.isra.0>
    if (item)
   24ea2:	b108      	cbz	r0, 24ea8 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   24ea4:	2340      	movs	r3, #64	; 0x40
   24ea6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   24ea8:	bd08      	pop	{r3, pc}
   24eaa:	bf00      	nop
   24eac:	2000c9e4 	.word	0x2000c9e4

00024eb0 <cJSON_GetNumberValue>:
{
   24eb0:	b508      	push	{r3, lr}
   24eb2:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
   24eb4:	f00e fda5 	bl	33a02 <cJSON_IsNumber>
   24eb8:	b110      	cbz	r0, 24ec0 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
   24eba:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
}
   24ebe:	bd08      	pop	{r3, pc}
        return (double) NAN;
   24ec0:	2000      	movs	r0, #0
   24ec2:	4901      	ldr	r1, [pc, #4]	; (24ec8 <cJSON_GetNumberValue+0x18>)
   24ec4:	e7fb      	b.n	24ebe <cJSON_GetNumberValue+0xe>
   24ec6:	bf00      	nop
   24ec8:	7ff80000 	.word	0x7ff80000

00024ecc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   24ecc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   24ece:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   24ed0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   24ed2:	fab2 f382 	clz	r3, r2
   24ed6:	f1c3 031f 	rsb	r3, r3, #31
   24eda:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   24edc:	fa05 f403 	lsl.w	r4, r5, r3
   24ee0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24ee4:	e8d0 6fef 	ldaex	r6, [r0]
   24ee8:	4296      	cmp	r6, r2
   24eea:	d104      	bne.n	24ef6 <nrfx_flag32_alloc+0x2a>
   24eec:	e8c0 4fec 	stlex	ip, r4, [r0]
   24ef0:	f1bc 0f00 	cmp.w	ip, #0
   24ef4:	d1f6      	bne.n	24ee4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24ef6:	d1eb      	bne.n	24ed0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   24ef8:	4801      	ldr	r0, [pc, #4]	; (24f00 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   24efa:	700b      	strb	r3, [r1, #0]
}
   24efc:	bd70      	pop	{r4, r5, r6, pc}
   24efe:	bf00      	nop
   24f00:	0bad0000 	.word	0x0bad0000

00024f04 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   24f04:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   24f06:	6803      	ldr	r3, [r0, #0]
   24f08:	40cb      	lsrs	r3, r1
   24f0a:	07db      	lsls	r3, r3, #31
   24f0c:	d410      	bmi.n	24f30 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   24f0e:	2301      	movs	r3, #1
   24f10:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   24f12:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   24f14:	ea43 0102 	orr.w	r1, r3, r2
   24f18:	e8d0 4fef 	ldaex	r4, [r0]
   24f1c:	4294      	cmp	r4, r2
   24f1e:	d104      	bne.n	24f2a <nrfx_flag32_free+0x26>
   24f20:	e8c0 1fec 	stlex	ip, r1, [r0]
   24f24:	f1bc 0f00 	cmp.w	ip, #0
   24f28:	d1f6      	bne.n	24f18 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   24f2a:	d1f2      	bne.n	24f12 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   24f2c:	4801      	ldr	r0, [pc, #4]	; (24f34 <nrfx_flag32_free+0x30>)
}
   24f2e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24f30:	4801      	ldr	r0, [pc, #4]	; (24f38 <nrfx_flag32_free+0x34>)
   24f32:	e7fc      	b.n	24f2e <nrfx_flag32_free+0x2a>
   24f34:	0bad0000 	.word	0x0bad0000
   24f38:	0bad0004 	.word	0x0bad0004

00024f3c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   24f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f3e:	4b34      	ldr	r3, [pc, #208]	; (25010 <clock_stop+0xd4>)
    switch (domain)
   24f40:	4604      	mov	r4, r0
   24f42:	b158      	cbz	r0, 24f5c <clock_stop+0x20>
   24f44:	2801      	cmp	r0, #1
   24f46:	d027      	beq.n	24f98 <clock_stop+0x5c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   24f48:	4932      	ldr	r1, [pc, #200]	; (25014 <clock_stop+0xd8>)
   24f4a:	4833      	ldr	r0, [pc, #204]	; (25018 <clock_stop+0xdc>)
   24f4c:	23d8      	movs	r3, #216	; 0xd8
   24f4e:	4a33      	ldr	r2, [pc, #204]	; (2501c <clock_stop+0xe0>)
   24f50:	f009 fd00 	bl	2e954 <assert_print>
   24f54:	21d8      	movs	r1, #216	; 0xd8
   24f56:	4831      	ldr	r0, [pc, #196]	; (2501c <clock_stop+0xe0>)
            NRFX_ASSERT(0);
   24f58:	f009 fcf5 	bl	2e946 <assert_post_action>
    p_reg->INTENCLR = mask;
   24f5c:	2202      	movs	r2, #2
   24f5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f62:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   24f66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f6a:	2201      	movs	r2, #1
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   24f6c:	4607      	mov	r7, r0
   24f6e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   24f70:	2301      	movs	r3, #1
   24f72:	f242 7510 	movw	r5, #10000	; 0x2710
   24f76:	4e26      	ldr	r6, [pc, #152]	; (25010 <clock_stop+0xd4>)
   24f78:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   24f7c:	b1bc      	cbz	r4, 24fae <clock_stop+0x72>
   24f7e:	2c01      	cmp	r4, #1
   24f80:	d033      	beq.n	24fea <clock_stop+0xae>
            NRFX_ASSERT(0);
   24f82:	4924      	ldr	r1, [pc, #144]	; (25014 <clock_stop+0xd8>)
   24f84:	4824      	ldr	r0, [pc, #144]	; (25018 <clock_stop+0xdc>)
   24f86:	f240 3347 	movw	r3, #839	; 0x347
   24f8a:	4a25      	ldr	r2, [pc, #148]	; (25020 <clock_stop+0xe4>)
   24f8c:	f009 fce2 	bl	2e954 <assert_print>
   24f90:	f240 3147 	movw	r1, #839	; 0x347
   24f94:	4822      	ldr	r0, [pc, #136]	; (25020 <clock_stop+0xe4>)
   24f96:	e7df      	b.n	24f58 <clock_stop+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f98:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   24f9a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   24fa2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   24fa6:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24faa:	6058      	str	r0, [r3, #4]
   24fac:	e7e0      	b.n	24f70 <clock_stop+0x34>
            if (p_clk_src != NULL)
   24fae:	b18f      	cbz	r7, 24fd4 <clock_stop+0x98>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24fb0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   24fb4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   24fb8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24fba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24fbe:	03da      	lsls	r2, r3, #15
   24fc0:	d511      	bpl.n	24fe6 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   24fc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   24fc6:	2801      	cmp	r0, #1
   24fc8:	d10d      	bne.n	24fe6 <clock_stop+0xaa>
   24fca:	f00e fd3a 	bl	33a42 <nrfx_busy_wait>
   24fce:	3d01      	subs	r5, #1
   24fd0:	d1d4      	bne.n	24f7c <clock_stop+0x40>
   24fd2:	e008      	b.n	24fe6 <clock_stop+0xaa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24fd4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   24fd8:	03d9      	lsls	r1, r3, #15
   24fda:	d504      	bpl.n	24fe6 <clock_stop+0xaa>
   24fdc:	2001      	movs	r0, #1
   24fde:	f00e fd30 	bl	33a42 <nrfx_busy_wait>
   24fe2:	3d01      	subs	r5, #1
   24fe4:	d1f6      	bne.n	24fd4 <clock_stop+0x98>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   24fe6:	b003      	add	sp, #12
   24fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   24fea:	b13f      	cbz	r7, 24ffc <clock_stop+0xc0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24fec:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   24ff0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   24ff4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24ff6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   24ffa:	e7e0      	b.n	24fbe <clock_stop+0x82>
   24ffc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   25000:	03db      	lsls	r3, r3, #15
   25002:	d5f0      	bpl.n	24fe6 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   25004:	2001      	movs	r0, #1
   25006:	f00e fd1c 	bl	33a42 <nrfx_busy_wait>
   2500a:	3d01      	subs	r5, #1
   2500c:	d1f6      	bne.n	24ffc <clock_stop+0xc0>
   2500e:	e7ea      	b.n	24fe6 <clock_stop+0xaa>
   25010:	40005000 	.word	0x40005000
   25014:	0003c13d 	.word	0x0003c13d
   25018:	000381c3 	.word	0x000381c3
   2501c:	0003f8c0 	.word	0x0003f8c0
   25020:	0003f8fd 	.word	0x0003f8fd

00025024 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   25024:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   25026:	b958      	cbnz	r0, 25040 <nrfx_clock_init+0x1c>
   25028:	490a      	ldr	r1, [pc, #40]	; (25054 <nrfx_clock_init+0x30>)
   2502a:	480b      	ldr	r0, [pc, #44]	; (25058 <nrfx_clock_init+0x34>)
   2502c:	f240 1315 	movw	r3, #277	; 0x115
   25030:	4a0a      	ldr	r2, [pc, #40]	; (2505c <nrfx_clock_init+0x38>)
   25032:	f009 fc8f 	bl	2e954 <assert_print>
   25036:	f240 1115 	movw	r1, #277	; 0x115
   2503a:	4808      	ldr	r0, [pc, #32]	; (2505c <nrfx_clock_init+0x38>)
   2503c:	f009 fc83 	bl	2e946 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   25040:	4b07      	ldr	r3, [pc, #28]	; (25060 <nrfx_clock_init+0x3c>)
   25042:	791a      	ldrb	r2, [r3, #4]
   25044:	b922      	cbnz	r2, 25050 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   25046:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   25048:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2504a:	4806      	ldr	r0, [pc, #24]	; (25064 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   2504c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2504e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   25050:	4805      	ldr	r0, [pc, #20]	; (25068 <nrfx_clock_init+0x44>)
    return err_code;
   25052:	e7fc      	b.n	2504e <nrfx_clock_init+0x2a>
   25054:	0003f931 	.word	0x0003f931
   25058:	000381c3 	.word	0x000381c3
   2505c:	0003f8c0 	.word	0x0003f8c0
   25060:	20010be4 	.word	0x20010be4
   25064:	0bad0000 	.word	0x0bad0000
   25068:	0bad000c 	.word	0x0bad000c

0002506c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2506c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2506e:	4b0d      	ldr	r3, [pc, #52]	; (250a4 <nrfx_clock_enable+0x38>)
   25070:	791b      	ldrb	r3, [r3, #4]
   25072:	b95b      	cbnz	r3, 2508c <nrfx_clock_enable+0x20>
   25074:	490c      	ldr	r1, [pc, #48]	; (250a8 <nrfx_clock_enable+0x3c>)
   25076:	480d      	ldr	r0, [pc, #52]	; (250ac <nrfx_clock_enable+0x40>)
   25078:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2507c:	4a0c      	ldr	r2, [pc, #48]	; (250b0 <nrfx_clock_enable+0x44>)
   2507e:	f009 fc69 	bl	2e954 <assert_print>
   25082:	f44f 7197 	mov.w	r1, #302	; 0x12e
   25086:	480a      	ldr	r0, [pc, #40]	; (250b0 <nrfx_clock_enable+0x44>)
   25088:	f009 fc5d 	bl	2e946 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2508c:	2005      	movs	r0, #5
   2508e:	f7eb f9ab 	bl	103e8 <arch_irq_is_enabled>
   25092:	b910      	cbnz	r0, 2509a <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   25094:	2005      	movs	r0, #5
   25096:	f7eb f985 	bl	103a4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2509a:	2201      	movs	r2, #1
   2509c:	4b05      	ldr	r3, [pc, #20]	; (250b4 <nrfx_clock_enable+0x48>)
   2509e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   250a2:	bd08      	pop	{r3, pc}
   250a4:	20010be4 	.word	0x20010be4
   250a8:	0003f93f 	.word	0x0003f93f
   250ac:	000381c3 	.word	0x000381c3
   250b0:	0003f8c0 	.word	0x0003f8c0
   250b4:	40005000 	.word	0x40005000

000250b8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   250b8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   250ba:	4b2a      	ldr	r3, [pc, #168]	; (25164 <nrfx_clock_start+0xac>)
   250bc:	791b      	ldrb	r3, [r3, #4]
   250be:	b95b      	cbnz	r3, 250d8 <nrfx_clock_start+0x20>
   250c0:	4929      	ldr	r1, [pc, #164]	; (25168 <nrfx_clock_start+0xb0>)
   250c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   250c6:	4a29      	ldr	r2, [pc, #164]	; (2516c <nrfx_clock_start+0xb4>)
   250c8:	4829      	ldr	r0, [pc, #164]	; (25170 <nrfx_clock_start+0xb8>)
   250ca:	f009 fc43 	bl	2e954 <assert_print>
   250ce:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   250d2:	4826      	ldr	r0, [pc, #152]	; (2516c <nrfx_clock_start+0xb4>)
   250d4:	f009 fc37 	bl	2e946 <assert_post_action>
    switch (domain)
   250d8:	4b26      	ldr	r3, [pc, #152]	; (25174 <nrfx_clock_start+0xbc>)
   250da:	b158      	cbz	r0, 250f4 <nrfx_clock_start+0x3c>
   250dc:	2801      	cmp	r0, #1
   250de:	d037      	beq.n	25150 <nrfx_clock_start+0x98>
            NRFX_ASSERT(0);
   250e0:	4925      	ldr	r1, [pc, #148]	; (25178 <nrfx_clock_start+0xc0>)
   250e2:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   250e6:	4a21      	ldr	r2, [pc, #132]	; (2516c <nrfx_clock_start+0xb4>)
   250e8:	4821      	ldr	r0, [pc, #132]	; (25170 <nrfx_clock_start+0xb8>)
   250ea:	f009 fc33 	bl	2e954 <assert_print>
   250ee:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   250f2:	e7ee      	b.n	250d2 <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   250f4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   250f8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   250fc:	03c9      	lsls	r1, r1, #15
   250fe:	d511      	bpl.n	25124 <nrfx_clock_start+0x6c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25100:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25104:	2b02      	cmp	r3, #2
   25106:	d11c      	bne.n	25142 <nrfx_clock_start+0x8a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   25108:	4a1a      	ldr	r2, [pc, #104]	; (25174 <nrfx_clock_start+0xbc>)
   2510a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2510e:	2300      	movs	r3, #0
   25110:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   25114:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   25118:	2302      	movs	r3, #2
   2511a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2511e:	2301      	movs	r3, #1
   25120:	6093      	str	r3, [r2, #8]
}
   25122:	e00d      	b.n	25140 <nrfx_clock_start+0x88>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   25124:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   25128:	07d2      	lsls	r2, r2, #31
   2512a:	d50f      	bpl.n	2514c <nrfx_clock_start+0x94>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2512c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   25130:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25134:	3a01      	subs	r2, #1
   25136:	2a01      	cmp	r2, #1
   25138:	d805      	bhi.n	25146 <nrfx_clock_start+0x8e>
    p_reg->INTENSET = mask;
   2513a:	2202      	movs	r2, #2
   2513c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   25140:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25142:	2b01      	cmp	r3, #1
   25144:	d002      	beq.n	2514c <nrfx_clock_start+0x94>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   25146:	2000      	movs	r0, #0
   25148:	f7ff fef8 	bl	24f3c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   2514c:	2301      	movs	r3, #1
   2514e:	e7db      	b.n	25108 <nrfx_clock_start+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25150:	2200      	movs	r2, #0
   25152:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   25156:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2515a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2515e:	6018      	str	r0, [r3, #0]
}
   25160:	e7ee      	b.n	25140 <nrfx_clock_start+0x88>
   25162:	bf00      	nop
   25164:	20010be4 	.word	0x20010be4
   25168:	0003f93f 	.word	0x0003f93f
   2516c:	0003f8c0 	.word	0x0003f8c0
   25170:	000381c3 	.word	0x000381c3
   25174:	40005000 	.word	0x40005000
   25178:	0003c13d 	.word	0x0003c13d

0002517c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2517c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2517e:	4b09      	ldr	r3, [pc, #36]	; (251a4 <nrfx_clock_stop+0x28>)
   25180:	791b      	ldrb	r3, [r3, #4]
   25182:	b95b      	cbnz	r3, 2519c <nrfx_clock_stop+0x20>
   25184:	4908      	ldr	r1, [pc, #32]	; (251a8 <nrfx_clock_stop+0x2c>)
   25186:	4809      	ldr	r0, [pc, #36]	; (251ac <nrfx_clock_stop+0x30>)
   25188:	f240 13ad 	movw	r3, #429	; 0x1ad
   2518c:	4a08      	ldr	r2, [pc, #32]	; (251b0 <nrfx_clock_stop+0x34>)
   2518e:	f009 fbe1 	bl	2e954 <assert_print>
   25192:	f240 11ad 	movw	r1, #429	; 0x1ad
   25196:	4806      	ldr	r0, [pc, #24]	; (251b0 <nrfx_clock_stop+0x34>)
   25198:	f009 fbd5 	bl	2e946 <assert_post_action>
    clock_stop(domain);
}
   2519c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   251a0:	f7ff becc 	b.w	24f3c <clock_stop>
   251a4:	20010be4 	.word	0x20010be4
   251a8:	0003f93f 	.word	0x0003f93f
   251ac:	000381c3 	.word	0x000381c3
   251b0:	0003f8c0 	.word	0x0003f8c0

000251b4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   251b4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   251b6:	4b17      	ldr	r3, [pc, #92]	; (25214 <nrfx_power_clock_irq_handler+0x60>)
   251b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   251bc:	b152      	cbz	r2, 251d4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   251be:	2000      	movs	r0, #0
   251c0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   251c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   251c8:	2201      	movs	r2, #1
   251ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   251ce:	4b12      	ldr	r3, [pc, #72]	; (25218 <nrfx_power_clock_irq_handler+0x64>)
   251d0:	681b      	ldr	r3, [r3, #0]
   251d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   251d4:	4b0f      	ldr	r3, [pc, #60]	; (25214 <nrfx_power_clock_irq_handler+0x60>)
   251d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   251da:	b18a      	cbz	r2, 25200 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   251dc:	2200      	movs	r2, #0
   251de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   251e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   251e6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   251ea:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   251ee:	f002 0203 	and.w	r2, r2, #3
   251f2:	2a01      	cmp	r2, #1
   251f4:	f04f 0102 	mov.w	r1, #2
   251f8:	d103      	bne.n	25202 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   251fa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   251fe:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   25200:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   25202:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   25206:	4b04      	ldr	r3, [pc, #16]	; (25218 <nrfx_power_clock_irq_handler+0x64>)
   25208:	2001      	movs	r0, #1
}
   2520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2520e:	681b      	ldr	r3, [r3, #0]
   25210:	4718      	bx	r3
   25212:	bf00      	nop
   25214:	40005000 	.word	0x40005000
   25218:	20010be4 	.word	0x20010be4

0002521c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   2521c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   2521e:	4801      	ldr	r0, [pc, #4]	; (25224 <nrfx_dppi_channel_alloc+0x8>)
   25220:	f7ff be54 	b.w	24ecc <nrfx_flag32_alloc>
   25224:	2000c9f0 	.word	0x2000c9f0

00025228 <nrfx_dppi_channel_enable>:
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    return nrfx_flag32_free(&m_allocated_channels, channel);
}

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
   25228:	b510      	push	{r4, lr}
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   2522a:	4b08      	ldr	r3, [pc, #32]	; (2524c <nrfx_dppi_channel_enable+0x24>)
{
   2522c:	4604      	mov	r4, r0
    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   2522e:	4601      	mov	r1, r0
   25230:	6818      	ldr	r0, [r3, #0]
   25232:	f00e fc08 	bl	33a46 <nrfx_flag32_is_allocated>
   25236:	b130      	cbz	r0, 25246 <nrfx_dppi_channel_enable+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   25238:	2301      	movs	r3, #1
   2523a:	4a05      	ldr	r2, [pc, #20]	; (25250 <nrfx_dppi_channel_enable+0x28>)
   2523c:	40a3      	lsls	r3, r4
    nrfx_err_t err_code = NRFX_SUCCESS;
   2523e:	4805      	ldr	r0, [pc, #20]	; (25254 <nrfx_dppi_channel_enable+0x2c>)
   25240:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   25244:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_PARAM;
   25246:	4804      	ldr	r0, [pc, #16]	; (25258 <nrfx_dppi_channel_enable+0x30>)
    return err_code;
   25248:	e7fc      	b.n	25244 <nrfx_dppi_channel_enable+0x1c>
   2524a:	bf00      	nop
   2524c:	2000c9f0 	.word	0x2000c9f0
   25250:	40017000 	.word	0x40017000
   25254:	0bad0000 	.word	0x0bad0000
   25258:	0bad0004 	.word	0x0bad0004

0002525c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2525c:	4b03      	ldr	r3, [pc, #12]	; (2526c <pin_in_use_by_te+0x10>)
   2525e:	300c      	adds	r0, #12
   25260:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25264:	f3c0 1040 	ubfx	r0, r0, #5, #1
   25268:	4770      	bx	lr
   2526a:	bf00      	nop
   2526c:	2000c9f4 	.word	0x2000c9f4

00025270 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   25270:	4b04      	ldr	r3, [pc, #16]	; (25284 <pin_has_trigger+0x14>)
   25272:	300c      	adds	r0, #12
   25274:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25278:	f010 001c 	ands.w	r0, r0, #28
   2527c:	bf18      	it	ne
   2527e:	2001      	movne	r0, #1
   25280:	4770      	bx	lr
   25282:	bf00      	nop
   25284:	2000c9f4 	.word	0x2000c9f4

00025288 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   25288:	4b03      	ldr	r3, [pc, #12]	; (25298 <pin_is_output+0x10>)
   2528a:	300c      	adds	r0, #12
   2528c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25290:	f3c0 0040 	ubfx	r0, r0, #1, #1
   25294:	4770      	bx	lr
   25296:	bf00      	nop
   25298:	2000c9f4 	.word	0x2000c9f4

0002529c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2529c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2529e:	4c0d      	ldr	r4, [pc, #52]	; (252d4 <call_handler+0x38>)
   252a0:	f100 030c 	add.w	r3, r0, #12
   252a4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   252a8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   252aa:	05da      	lsls	r2, r3, #23
{
   252ac:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   252ae:	d507      	bpl.n	252c0 <call_handler+0x24>
   252b0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   252b4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   252b8:	6852      	ldr	r2, [r2, #4]
   252ba:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   252be:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   252c0:	6923      	ldr	r3, [r4, #16]
   252c2:	b12b      	cbz	r3, 252d0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   252c4:	4631      	mov	r1, r6
   252c6:	4628      	mov	r0, r5
   252c8:	6962      	ldr	r2, [r4, #20]
    }
}
   252ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   252ce:	4718      	bx	r3
}
   252d0:	bd70      	pop	{r4, r5, r6, pc}
   252d2:	bf00      	nop
   252d4:	2000c9f4 	.word	0x2000c9f4

000252d8 <release_handler>:
{
   252d8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   252da:	4a18      	ldr	r2, [pc, #96]	; (2533c <release_handler+0x64>)
   252dc:	300c      	adds	r0, #12
   252de:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   252e2:	05d9      	lsls	r1, r3, #23
   252e4:	d51d      	bpl.n	25322 <release_handler+0x4a>
   252e6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   252ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   252ee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   252f2:	2000      	movs	r0, #0
   252f4:	f102 0416 	add.w	r4, r2, #22
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   252f8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   252fc:	f413 7f80 	tst.w	r3, #256	; 0x100
   25300:	d003      	beq.n	2530a <release_handler+0x32>
   25302:	f3c3 2343 	ubfx	r3, r3, #9, #4
   25306:	4299      	cmp	r1, r3
   25308:	d00b      	beq.n	25322 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2530a:	3001      	adds	r0, #1
   2530c:	2820      	cmp	r0, #32
   2530e:	d1f3      	bne.n	252f8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   25310:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   25312:	480b      	ldr	r0, [pc, #44]	; (25340 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   25314:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   25318:	f7ff fdf4 	bl	24f04 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2531c:	4b09      	ldr	r3, [pc, #36]	; (25344 <release_handler+0x6c>)
   2531e:	4298      	cmp	r0, r3
   25320:	d100      	bne.n	25324 <release_handler+0x4c>
}
   25322:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   25324:	4908      	ldr	r1, [pc, #32]	; (25348 <release_handler+0x70>)
   25326:	4809      	ldr	r0, [pc, #36]	; (2534c <release_handler+0x74>)
   25328:	f44f 7399 	mov.w	r3, #306	; 0x132
   2532c:	4a08      	ldr	r2, [pc, #32]	; (25350 <release_handler+0x78>)
   2532e:	f009 fb11 	bl	2e954 <assert_print>
   25332:	f44f 7199 	mov.w	r1, #306	; 0x132
   25336:	4806      	ldr	r0, [pc, #24]	; (25350 <release_handler+0x78>)
   25338:	f009 fb05 	bl	2e946 <assert_post_action>
   2533c:	2000c9f4 	.word	0x2000c9f4
   25340:	2000ca50 	.word	0x2000ca50
   25344:	0bad0000 	.word	0x0bad0000
   25348:	0003b841 	.word	0x0003b841
   2534c:	000381c3 	.word	0x000381c3
   25350:	0003f972 	.word	0x0003f972

00025354 <pin_handler_trigger_uninit>:
{
   25354:	b538      	push	{r3, r4, r5, lr}
   25356:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   25358:	f7ff ff80 	bl	2525c <pin_in_use_by_te>
   2535c:	4c0b      	ldr	r4, [pc, #44]	; (2538c <pin_handler_trigger_uninit+0x38>)
   2535e:	f102 050c 	add.w	r5, r2, #12
   25362:	b160      	cbz	r0, 2537e <pin_handler_trigger_uninit+0x2a>
    p_reg->CONFIG[idx] = 0;
   25364:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   25366:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2536a:	0b5b      	lsrs	r3, r3, #13
   2536c:	009b      	lsls	r3, r3, #2
   2536e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25372:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   25376:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   2537a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   2537e:	4610      	mov	r0, r2
   25380:	f7ff ffaa 	bl	252d8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   25384:	2300      	movs	r3, #0
   25386:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   2538a:	bd38      	pop	{r3, r4, r5, pc}
   2538c:	2000c9f4 	.word	0x2000c9f4

00025390 <nrf_gpio_pin_port_decode>:
{
   25390:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25392:	6802      	ldr	r2, [r0, #0]
{
   25394:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25396:	4610      	mov	r0, r2
   25398:	f00e fb5a 	bl	33a50 <nrf_gpio_pin_present_check>
   2539c:	b958      	cbnz	r0, 253b6 <nrf_gpio_pin_port_decode+0x26>
   2539e:	490e      	ldr	r1, [pc, #56]	; (253d8 <nrf_gpio_pin_port_decode+0x48>)
   253a0:	f240 2347 	movw	r3, #583	; 0x247
   253a4:	4a0d      	ldr	r2, [pc, #52]	; (253dc <nrf_gpio_pin_port_decode+0x4c>)
   253a6:	480e      	ldr	r0, [pc, #56]	; (253e0 <nrf_gpio_pin_port_decode+0x50>)
   253a8:	f009 fad4 	bl	2e954 <assert_print>
   253ac:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   253b0:	480a      	ldr	r0, [pc, #40]	; (253dc <nrf_gpio_pin_port_decode+0x4c>)
   253b2:	f009 fac8 	bl	2e946 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   253b6:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   253ba:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   253bc:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   253be:	d009      	beq.n	253d4 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   253c0:	4908      	ldr	r1, [pc, #32]	; (253e4 <nrf_gpio_pin_port_decode+0x54>)
   253c2:	f44f 7313 	mov.w	r3, #588	; 0x24c
   253c6:	4a05      	ldr	r2, [pc, #20]	; (253dc <nrf_gpio_pin_port_decode+0x4c>)
   253c8:	4805      	ldr	r0, [pc, #20]	; (253e0 <nrf_gpio_pin_port_decode+0x50>)
   253ca:	f009 fac3 	bl	2e954 <assert_print>
   253ce:	f44f 7113 	mov.w	r1, #588	; 0x24c
   253d2:	e7ed      	b.n	253b0 <nrf_gpio_pin_port_decode+0x20>
}
   253d4:	4804      	ldr	r0, [pc, #16]	; (253e8 <nrf_gpio_pin_port_decode+0x58>)
   253d6:	bd08      	pop	{r3, pc}
   253d8:	0003b7e6 	.word	0x0003b7e6
   253dc:	0003b7b3 	.word	0x0003b7b3
   253e0:	000381c3 	.word	0x000381c3
   253e4:	0003c13d 	.word	0x0003c13d
   253e8:	40842500 	.word	0x40842500

000253ec <nrfx_gpiote_input_configure>:
{
   253ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   253ee:	4604      	mov	r4, r0
   253f0:	4617      	mov	r7, r2
   253f2:	461d      	mov	r5, r3
   253f4:	b085      	sub	sp, #20
    if (p_input_config)
   253f6:	b1d9      	cbz	r1, 25430 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   253f8:	f00e fb36 	bl	33a68 <pin_is_task_output>
   253fc:	bb00      	cbnz	r0, 25440 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   253fe:	460b      	mov	r3, r1
   25400:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   25404:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   25408:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2540c:	f10d 020f 	add.w	r2, sp, #15
   25410:	f10d 010e 	add.w	r1, sp, #14
   25414:	4620      	mov	r0, r4
   25416:	f00e fb32 	bl	33a7e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2541a:	4a48      	ldr	r2, [pc, #288]	; (2553c <nrfx_gpiote_input_configure+0x150>)
   2541c:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   25420:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25424:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   25428:	f043 0301 	orr.w	r3, r3, #1
   2542c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   25430:	b36f      	cbz	r7, 2548e <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   25432:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   25434:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   25436:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   25438:	f7ff ff26 	bl	25288 <pin_is_output>
   2543c:	b110      	cbz	r0, 25444 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   2543e:	b1da      	cbz	r2, 25478 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   25440:	483f      	ldr	r0, [pc, #252]	; (25540 <nrfx_gpiote_input_configure+0x154>)
   25442:	e026      	b.n	25492 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   25444:	483d      	ldr	r0, [pc, #244]	; (2553c <nrfx_gpiote_input_configure+0x150>)
   25446:	f104 0c0c 	add.w	ip, r4, #12
   2544a:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   2544e:	f021 0120 	bic.w	r1, r1, #32
   25452:	04c9      	lsls	r1, r1, #19
   25454:	0cc9      	lsrs	r1, r1, #19
   25456:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   2545a:	b16a      	cbz	r2, 25478 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   2545c:	2e03      	cmp	r6, #3
   2545e:	d8ef      	bhi.n	25440 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   25460:	687b      	ldr	r3, [r7, #4]
   25462:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   25464:	00ba      	lsls	r2, r7, #2
   25466:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2546a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   2546e:	b996      	cbnz	r6, 25496 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   25470:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   25474:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   25478:	4a30      	ldr	r2, [pc, #192]	; (2553c <nrfx_gpiote_input_configure+0x150>)
   2547a:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2547e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25482:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   25486:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   2548a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2548e:	bb15      	cbnz	r5, 254d6 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   25490:	482c      	ldr	r0, [pc, #176]	; (25544 <nrfx_gpiote_input_configure+0x158>)
}
   25492:	b005      	add	sp, #20
   25494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   25496:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2549a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   2549e:	f023 0303 	bic.w	r3, r3, #3
   254a2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   254a6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   254aa:	f041 0120 	orr.w	r1, r1, #32
   254ae:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   254b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   254b6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   254ba:	0223      	lsls	r3, r4, #8
   254bc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   254c0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   254c4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   254c8:	ea43 030e 	orr.w	r3, r3, lr
   254cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   254d0:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   254d4:	e7d0      	b.n	25478 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   254d6:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   254d8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   254dc:	f7ff fefc 	bl	252d8 <release_handler>
    if (!handler)
   254e0:	2e00      	cmp	r6, #0
   254e2:	d0d5      	beq.n	25490 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   254e4:	4d15      	ldr	r5, [pc, #84]	; (2553c <nrfx_gpiote_input_configure+0x150>)
   254e6:	682b      	ldr	r3, [r5, #0]
   254e8:	429e      	cmp	r6, r3
   254ea:	d102      	bne.n	254f2 <nrfx_gpiote_input_configure+0x106>
   254ec:	686b      	ldr	r3, [r5, #4]
   254ee:	429f      	cmp	r7, r3
   254f0:	d016      	beq.n	25520 <nrfx_gpiote_input_configure+0x134>
   254f2:	68ab      	ldr	r3, [r5, #8]
   254f4:	429e      	cmp	r6, r3
   254f6:	d115      	bne.n	25524 <nrfx_gpiote_input_configure+0x138>
   254f8:	68eb      	ldr	r3, [r5, #12]
   254fa:	429f      	cmp	r7, r3
   254fc:	d112      	bne.n	25524 <nrfx_gpiote_input_configure+0x138>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   254fe:	2301      	movs	r3, #1
    m_cb.handlers[handler_id].p_context = p_context;
   25500:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25504:	f104 000c 	add.w	r0, r4, #12
    m_cb.handlers[handler_id].p_context = p_context;
   25508:	6057      	str	r7, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2550a:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   2550e:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25512:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
   25516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2551a:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   2551e:	e7b7      	b.n	25490 <nrfx_gpiote_input_configure+0xa4>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   25520:	2300      	movs	r3, #0
    if (handler_id < 0)
   25522:	e7ed      	b.n	25500 <nrfx_gpiote_input_configure+0x114>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   25524:	4808      	ldr	r0, [pc, #32]	; (25548 <nrfx_gpiote_input_configure+0x15c>)
   25526:	f10d 010f 	add.w	r1, sp, #15
   2552a:	f7ff fccf 	bl	24ecc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2552e:	4b05      	ldr	r3, [pc, #20]	; (25544 <nrfx_gpiote_input_configure+0x158>)
   25530:	4298      	cmp	r0, r3
   25532:	d1ae      	bne.n	25492 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   25534:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25538:	e7e2      	b.n	25500 <nrfx_gpiote_input_configure+0x114>
   2553a:	bf00      	nop
   2553c:	2000c9f4 	.word	0x2000c9f4
   25540:	0bad0004 	.word	0x0bad0004
   25544:	0bad0000 	.word	0x0bad0000
   25548:	2000ca50 	.word	0x2000ca50

0002554c <nrfx_gpiote_output_configure>:
{
   2554c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2554e:	4604      	mov	r4, r0
   25550:	4615      	mov	r5, r2
   25552:	b085      	sub	sp, #20
    if (p_config)
   25554:	b321      	cbz	r1, 255a0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   25556:	f7ff fe97 	bl	25288 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2555a:	b920      	cbnz	r0, 25566 <nrfx_gpiote_output_configure+0x1a>
   2555c:	4620      	mov	r0, r4
   2555e:	f7ff fe7d 	bl	2525c <pin_in_use_by_te>
   25562:	2800      	cmp	r0, #0
   25564:	d161      	bne.n	2562a <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   25566:	4620      	mov	r0, r4
   25568:	f7ff fe82 	bl	25270 <pin_has_trigger>
   2556c:	b110      	cbz	r0, 25574 <nrfx_gpiote_output_configure+0x28>
   2556e:	784b      	ldrb	r3, [r1, #1]
   25570:	2b01      	cmp	r3, #1
   25572:	d05a      	beq.n	2562a <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   25574:	2301      	movs	r3, #1
   25576:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2557a:	2300      	movs	r3, #0
   2557c:	1c4a      	adds	r2, r1, #1
   2557e:	e9cd 1300 	strd	r1, r3, [sp]
   25582:	4620      	mov	r0, r4
   25584:	1c8b      	adds	r3, r1, #2
   25586:	f10d 010f 	add.w	r1, sp, #15
   2558a:	f00e fa78 	bl	33a7e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2558e:	4a28      	ldr	r2, [pc, #160]	; (25630 <nrfx_gpiote_output_configure+0xe4>)
   25590:	f104 010c 	add.w	r1, r4, #12
   25594:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25598:	f043 0303 	orr.w	r3, r3, #3
   2559c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   255a0:	b915      	cbnz	r5, 255a8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   255a2:	4824      	ldr	r0, [pc, #144]	; (25634 <nrfx_gpiote_output_configure+0xe8>)
}
   255a4:	b005      	add	sp, #20
   255a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   255a8:	4620      	mov	r0, r4
   255aa:	f7ff fe6d 	bl	25288 <pin_is_output>
        if (pin_is_input(pin))
   255ae:	2800      	cmp	r0, #0
   255b0:	d03b      	beq.n	2562a <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   255b2:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   255b6:	2300      	movs	r3, #0
   255b8:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   255ba:	4e1d      	ldr	r6, [pc, #116]	; (25630 <nrfx_gpiote_output_configure+0xe4>)
   255bc:	f104 070c 	add.w	r7, r4, #12
   255c0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   255c4:	0089      	lsls	r1, r1, #2
   255c6:	f020 0020 	bic.w	r0, r0, #32
   255ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   255ce:	04c0      	lsls	r0, r0, #19
   255d0:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   255d4:	0cc0      	lsrs	r0, r0, #19
   255d6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   255da:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   255de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   255e2:	786a      	ldrb	r2, [r5, #1]
   255e4:	2a00      	cmp	r2, #0
   255e6:	d0dc      	beq.n	255a2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   255e8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   255ec:	78ad      	ldrb	r5, [r5, #2]
   255ee:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   255f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   255f6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   255fa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   255fe:	0223      	lsls	r3, r4, #8
   25600:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   25604:	0412      	lsls	r2, r2, #16
   25606:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2560a:	ea43 030e 	orr.w	r3, r3, lr
   2560e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   25610:	052a      	lsls	r2, r5, #20
   25612:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   25616:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2561a:	4313      	orrs	r3, r2
   2561c:	f040 0020 	orr.w	r0, r0, #32
   25620:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   25624:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   25628:	e7bb      	b.n	255a2 <nrfx_gpiote_output_configure+0x56>
{
   2562a:	4803      	ldr	r0, [pc, #12]	; (25638 <nrfx_gpiote_output_configure+0xec>)
   2562c:	e7ba      	b.n	255a4 <nrfx_gpiote_output_configure+0x58>
   2562e:	bf00      	nop
   25630:	2000c9f4 	.word	0x2000c9f4
   25634:	0bad0000 	.word	0x0bad0000
   25638:	0bad0004 	.word	0x0bad0004

0002563c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2563c:	4b01      	ldr	r3, [pc, #4]	; (25644 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2563e:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   25642:	4770      	bx	lr
   25644:	2000c9f4 	.word	0x2000c9f4

00025648 <nrfx_gpiote_channel_get>:
{
   25648:	4602      	mov	r2, r0
   2564a:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   2564c:	b959      	cbnz	r1, 25666 <nrfx_gpiote_channel_get+0x1e>
   2564e:	490c      	ldr	r1, [pc, #48]	; (25680 <nrfx_gpiote_channel_get+0x38>)
   25650:	480c      	ldr	r0, [pc, #48]	; (25684 <nrfx_gpiote_channel_get+0x3c>)
   25652:	f240 2335 	movw	r3, #565	; 0x235
   25656:	4a0c      	ldr	r2, [pc, #48]	; (25688 <nrfx_gpiote_channel_get+0x40>)
   25658:	f009 f97c 	bl	2e954 <assert_print>
   2565c:	f240 2135 	movw	r1, #565	; 0x235
   25660:	4809      	ldr	r0, [pc, #36]	; (25688 <nrfx_gpiote_channel_get+0x40>)
   25662:	f009 f970 	bl	2e946 <assert_post_action>
    if (pin_in_use_by_te(pin))
   25666:	f7ff fdf9 	bl	2525c <pin_in_use_by_te>
   2566a:	b138      	cbz	r0, 2567c <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2566c:	4b07      	ldr	r3, [pc, #28]	; (2568c <nrfx_gpiote_channel_get+0x44>)
   2566e:	320c      	adds	r2, #12
   25670:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   25674:	4806      	ldr	r0, [pc, #24]	; (25690 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   25676:	0b5b      	lsrs	r3, r3, #13
   25678:	700b      	strb	r3, [r1, #0]
}
   2567a:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2567c:	4805      	ldr	r0, [pc, #20]	; (25694 <nrfx_gpiote_channel_get+0x4c>)
   2567e:	e7fc      	b.n	2567a <nrfx_gpiote_channel_get+0x32>
   25680:	0003f9b0 	.word	0x0003f9b0
   25684:	000381c3 	.word	0x000381c3
   25688:	0003f972 	.word	0x0003f972
   2568c:	2000c9f4 	.word	0x2000c9f4
   25690:	0bad0000 	.word	0x0bad0000
   25694:	0bad0004 	.word	0x0bad0004

00025698 <nrfx_gpiote_init>:
{
   25698:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2569a:	4c0f      	ldr	r4, [pc, #60]	; (256d8 <nrfx_gpiote_init+0x40>)
   2569c:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
   256a0:	b9c5      	cbnz	r5, 256d4 <nrfx_gpiote_init+0x3c>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   256a2:	2240      	movs	r2, #64	; 0x40
   256a4:	4629      	mov	r1, r5
   256a6:	f104 0018 	add.w	r0, r4, #24
   256aa:	f00f fcbf 	bl	3502c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   256ae:	2031      	movs	r0, #49	; 0x31
   256b0:	f7ea fe78 	bl	103a4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   256b4:	4b09      	ldr	r3, [pc, #36]	; (256dc <nrfx_gpiote_init+0x44>)
    return err_code;
   256b6:	480a      	ldr	r0, [pc, #40]	; (256e0 <nrfx_gpiote_init+0x48>)
   256b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   256bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   256c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   256c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   256c8:	2301      	movs	r3, #1
   256ca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   256ce:	2303      	movs	r3, #3
   256d0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
   256d2:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   256d4:	4803      	ldr	r0, [pc, #12]	; (256e4 <nrfx_gpiote_init+0x4c>)
   256d6:	e7fc      	b.n	256d2 <nrfx_gpiote_init+0x3a>
   256d8:	2000c9f4 	.word	0x2000c9f4
   256dc:	40031000 	.word	0x40031000
   256e0:	0bad0000 	.word	0x0bad0000
   256e4:	0bad0005 	.word	0x0bad0005

000256e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   256e8:	4b03      	ldr	r3, [pc, #12]	; (256f8 <nrfx_gpiote_is_init+0x10>)
   256ea:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
}
   256ee:	3800      	subs	r0, #0
   256f0:	bf18      	it	ne
   256f2:	2001      	movne	r0, #1
   256f4:	4770      	bx	lr
   256f6:	bf00      	nop
   256f8:	2000c9f4 	.word	0x2000c9f4

000256fc <nrfx_gpiote_channel_free>:
{
   256fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   256fe:	4801      	ldr	r0, [pc, #4]	; (25704 <nrfx_gpiote_channel_free+0x8>)
   25700:	f7ff bc00 	b.w	24f04 <nrfx_flag32_free>
   25704:	2000ca4c 	.word	0x2000ca4c

00025708 <nrfx_gpiote_channel_alloc>:
{
   25708:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2570a:	4801      	ldr	r0, [pc, #4]	; (25710 <nrfx_gpiote_channel_alloc+0x8>)
   2570c:	f7ff bbde 	b.w	24ecc <nrfx_flag32_alloc>
   25710:	2000ca4c 	.word	0x2000ca4c

00025714 <nrfx_gpiote_trigger_enable>:
{
   25714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25716:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   25718:	f7ff fdaa 	bl	25270 <pin_has_trigger>
   2571c:	b958      	cbnz	r0, 25736 <nrfx_gpiote_trigger_enable+0x22>
   2571e:	492b      	ldr	r1, [pc, #172]	; (257cc <nrfx_gpiote_trigger_enable+0xb8>)
   25720:	f240 33df 	movw	r3, #991	; 0x3df
   25724:	4a2a      	ldr	r2, [pc, #168]	; (257d0 <nrfx_gpiote_trigger_enable+0xbc>)
   25726:	482b      	ldr	r0, [pc, #172]	; (257d4 <nrfx_gpiote_trigger_enable+0xc0>)
   25728:	f009 f914 	bl	2e954 <assert_print>
   2572c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   25730:	4827      	ldr	r0, [pc, #156]	; (257d0 <nrfx_gpiote_trigger_enable+0xbc>)
   25732:	f009 f908 	bl	2e946 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   25736:	4620      	mov	r0, r4
   25738:	f7ff fd90 	bl	2525c <pin_in_use_by_te>
   2573c:	4a26      	ldr	r2, [pc, #152]	; (257d8 <nrfx_gpiote_trigger_enable+0xc4>)
   2573e:	f104 050c 	add.w	r5, r4, #12
   25742:	b1e0      	cbz	r0, 2577e <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   25744:	4620      	mov	r0, r4
   25746:	f7ff fd9f 	bl	25288 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2574a:	b9c0      	cbnz	r0, 2577e <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2574c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   25750:	4c22      	ldr	r4, [pc, #136]	; (257dc <nrfx_gpiote_trigger_enable+0xc8>)
   25752:	0b52      	lsrs	r2, r2, #13
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   25754:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25756:	50e0      	str	r0, [r4, r3]
   25758:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2575a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2575e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   25762:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   25766:	f040 0001 	orr.w	r0, r0, #1
   2576a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   2576e:	b121      	cbz	r1, 2577a <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   25770:	2301      	movs	r3, #1
   25772:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   25774:	4a1a      	ldr	r2, [pc, #104]	; (257e0 <nrfx_gpiote_trigger_enable+0xcc>)
   25776:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2577a:	b003      	add	sp, #12
   2577c:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   2577e:	b949      	cbnz	r1, 25794 <nrfx_gpiote_trigger_enable+0x80>
   25780:	4918      	ldr	r1, [pc, #96]	; (257e4 <nrfx_gpiote_trigger_enable+0xd0>)
   25782:	f240 33ee 	movw	r3, #1006	; 0x3ee
   25786:	4a12      	ldr	r2, [pc, #72]	; (257d0 <nrfx_gpiote_trigger_enable+0xbc>)
   25788:	4812      	ldr	r0, [pc, #72]	; (257d4 <nrfx_gpiote_trigger_enable+0xc0>)
   2578a:	f009 f8e3 	bl	2e954 <assert_print>
   2578e:	f240 31ee 	movw	r1, #1006	; 0x3ee
   25792:	e7cd      	b.n	25730 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   25794:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   25798:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2579c:	2b04      	cmp	r3, #4
   2579e:	d011      	beq.n	257c4 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   257a0:	2b05      	cmp	r3, #5
   257a2:	d011      	beq.n	257c8 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   257a4:	a801      	add	r0, sp, #4
   257a6:	9401      	str	r4, [sp, #4]
   257a8:	f7ff fdf2 	bl	25390 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   257ac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   257ae:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   257b0:	40d9      	lsrs	r1, r3
   257b2:	f001 0101 	and.w	r1, r1, #1
   257b6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   257b8:	4620      	mov	r0, r4
}
   257ba:	b003      	add	sp, #12
   257bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   257c0:	f00e b9aa 	b.w	33b18 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   257c4:	2103      	movs	r1, #3
   257c6:	e7f7      	b.n	257b8 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   257c8:	2102      	movs	r1, #2
   257ca:	e7f5      	b.n	257b8 <nrfx_gpiote_trigger_enable+0xa4>
   257cc:	0003fa07 	.word	0x0003fa07
   257d0:	0003f972 	.word	0x0003f972
   257d4:	000381c3 	.word	0x000381c3
   257d8:	2000c9f4 	.word	0x2000c9f4
   257dc:	40031100 	.word	0x40031100
   257e0:	40031000 	.word	0x40031000
   257e4:	0003fa1c 	.word	0x0003fa1c

000257e8 <nrfx_gpiote_trigger_disable>:
{
   257e8:	b508      	push	{r3, lr}
   257ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   257ec:	f7ff fd36 	bl	2525c <pin_in_use_by_te>
   257f0:	b1c8      	cbz	r0, 25826 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   257f2:	4610      	mov	r0, r2
   257f4:	f7ff fd48 	bl	25288 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   257f8:	b9a8      	cbnz	r0, 25826 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   257fa:	4b0e      	ldr	r3, [pc, #56]	; (25834 <nrfx_gpiote_trigger_disable+0x4c>)
   257fc:	320c      	adds	r2, #12
   257fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   25802:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   25804:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   25806:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   25808:	490b      	ldr	r1, [pc, #44]	; (25838 <nrfx_gpiote_trigger_disable+0x50>)
   2580a:	009b      	lsls	r3, r3, #2
   2580c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25810:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   25814:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   25818:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2581c:	f022 0203 	bic.w	r2, r2, #3
   25820:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   25824:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   25826:	2100      	movs	r1, #0
}
   25828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2582c:	4610      	mov	r0, r2
   2582e:	f00e b973 	b.w	33b18 <nrf_gpio_cfg_sense_set>
   25832:	bf00      	nop
   25834:	2000c9f4 	.word	0x2000c9f4
   25838:	40031000 	.word	0x40031000

0002583c <nrfx_gpiote_pin_uninit>:
{
   2583c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2583e:	4b0d      	ldr	r3, [pc, #52]	; (25874 <nrfx_gpiote_pin_uninit+0x38>)
   25840:	f100 020c 	add.w	r2, r0, #12
   25844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   25848:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2584a:	07db      	lsls	r3, r3, #31
   2584c:	d510      	bpl.n	25870 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   2584e:	f7ff ffcb 	bl	257e8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   25852:	4620      	mov	r0, r4
   25854:	f7ff fd7e 	bl	25354 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25858:	a801      	add	r0, sp, #4
   2585a:	9401      	str	r4, [sp, #4]
   2585c:	f7ff fd98 	bl	25390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   25860:	2202      	movs	r2, #2
   25862:	9b01      	ldr	r3, [sp, #4]
   25864:	3380      	adds	r3, #128	; 0x80
   25866:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   2586a:	4803      	ldr	r0, [pc, #12]	; (25878 <nrfx_gpiote_pin_uninit+0x3c>)
}
   2586c:	b002      	add	sp, #8
   2586e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   25870:	4802      	ldr	r0, [pc, #8]	; (2587c <nrfx_gpiote_pin_uninit+0x40>)
   25872:	e7fb      	b.n	2586c <nrfx_gpiote_pin_uninit+0x30>
   25874:	2000c9f4 	.word	0x2000c9f4
   25878:	0bad0000 	.word	0x0bad0000
   2587c:	0bad0004 	.word	0x0bad0004

00025880 <nrfx_gpiote_in_is_set>:
{
   25880:	b507      	push	{r0, r1, r2, lr}
   25882:	4602      	mov	r2, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   25884:	f00e f8e4 	bl	33a50 <nrf_gpio_pin_present_check>
   25888:	b958      	cbnz	r0, 258a2 <nrfx_gpiote_in_is_set+0x22>
   2588a:	490c      	ldr	r1, [pc, #48]	; (258bc <nrfx_gpiote_in_is_set+0x3c>)
   2588c:	480c      	ldr	r0, [pc, #48]	; (258c0 <nrfx_gpiote_in_is_set+0x40>)
   2588e:	f240 4326 	movw	r3, #1062	; 0x426
   25892:	4a0c      	ldr	r2, [pc, #48]	; (258c4 <nrfx_gpiote_in_is_set+0x44>)
   25894:	f009 f85e 	bl	2e954 <assert_print>
   25898:	f240 4126 	movw	r1, #1062	; 0x426
   2589c:	4809      	ldr	r0, [pc, #36]	; (258c4 <nrfx_gpiote_in_is_set+0x44>)
   2589e:	f009 f852 	bl	2e946 <assert_post_action>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   258a2:	a801      	add	r0, sp, #4
   258a4:	9201      	str	r2, [sp, #4]
   258a6:	f7ff fd73 	bl	25390 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   258aa:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   258ac:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   258ae:	40d8      	lsrs	r0, r3
}
   258b0:	f000 0001 	and.w	r0, r0, #1
   258b4:	b003      	add	sp, #12
   258b6:	f85d fb04 	ldr.w	pc, [sp], #4
   258ba:	bf00      	nop
   258bc:	0003f9ba 	.word	0x0003f9ba
   258c0:	000381c3 	.word	0x000381c3
   258c4:	0003f972 	.word	0x0003f972

000258c8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   258c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   258cc:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   258ce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   258d0:	462c      	mov	r4, r5
{
   258d2:	4b56      	ldr	r3, [pc, #344]	; (25a2c <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
   258d4:	4856      	ldr	r0, [pc, #344]	; (25a30 <nrfx_gpiote_irq_handler+0x168>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   258d6:	4957      	ldr	r1, [pc, #348]	; (25a34 <nrfx_gpiote_irq_handler+0x16c>)
{
   258d8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   258da:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   258dc:	b136      	cbz	r6, 258ec <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   258de:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   258e2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   258e4:	bf1e      	ittt	ne
   258e6:	601c      	strne	r4, [r3, #0]
   258e8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   258ea:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   258ec:	3304      	adds	r3, #4
   258ee:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   258f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   258f4:	d1f1      	bne.n	258da <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   258f6:	f8df 8138 	ldr.w	r8, [pc, #312]	; 25a30 <nrfx_gpiote_irq_handler+0x168>
   258fa:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   258fe:	b183      	cbz	r3, 25922 <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   25900:	4f4d      	ldr	r7, [pc, #308]	; (25a38 <nrfx_gpiote_irq_handler+0x170>)
   25902:	6a3b      	ldr	r3, [r7, #32]
   25904:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   25906:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   25908:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   2590c:	9c02      	ldr	r4, [sp, #8]
   2590e:	b974      	cbnz	r4, 2592e <nrfx_gpiote_irq_handler+0x66>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25910:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   25914:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   25918:	6a3b      	ldr	r3, [r7, #32]
   2591a:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   2591c:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   2591e:	2b00      	cmp	r3, #0
   25920:	d1f2      	bne.n	25908 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   25922:	2401      	movs	r4, #1
    while (mask)
   25924:	2d00      	cmp	r5, #0
   25926:	d168      	bne.n	259fa <nrfx_gpiote_irq_handler+0x132>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   25928:	b005      	add	sp, #20
   2592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   2592e:	fa94 f4a4 	rbit	r4, r4
   25932:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   25936:	4a41      	ldr	r2, [pc, #260]	; (25a3c <nrfx_gpiote_irq_handler+0x174>)
   25938:	f104 030c 	add.w	r3, r4, #12
   2593c:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   25940:	08e0      	lsrs	r0, r4, #3
    p_mask8[byte_idx] &= ~(1 << bit);
   25942:	ab02      	add	r3, sp, #8
   25944:	5c1b      	ldrb	r3, [r3, r0]
    bit = BITMASK_RELBIT_GET(bit);
   25946:	f004 0107 	and.w	r1, r4, #7
   2594a:	08b2      	lsrs	r2, r6, #2
    p_mask8[byte_idx] &= ~(1 << bit);
   2594c:	fa09 f101 	lsl.w	r1, r9, r1
   25950:	ea23 0301 	bic.w	r3, r3, r1
   25954:	9201      	str	r2, [sp, #4]
   25956:	aa02      	add	r2, sp, #8
   25958:	5413      	strb	r3, [r2, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2595a:	a803      	add	r0, sp, #12
   2595c:	9403      	str	r4, [sp, #12]
   2595e:	f7ff fd17 	bl	25390 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   25962:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   25964:	9a01      	ldr	r2, [sp, #4]
   25966:	3380      	adds	r3, #128	; 0x80
   25968:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2596c:	f3c6 0b82 	ubfx	fp, r6, #2, #3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   25970:	f3c3 4a01 	ubfx	sl, r3, #16, #2
    if (is_level(trigger))
   25974:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   25976:	465e      	mov	r6, fp
    if (is_level(trigger))
   25978:	d522      	bpl.n	259c0 <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
   2597a:	4659      	mov	r1, fp
   2597c:	4620      	mov	r0, r4
   2597e:	f7ff fc8d 	bl	2529c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25982:	a803      	add	r0, sp, #12
   25984:	9403      	str	r4, [sp, #12]
   25986:	f7ff fd03 	bl	25390 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2598a:	9b03      	ldr	r3, [sp, #12]
   2598c:	fa5f fa8a 	uxtb.w	sl, sl
   25990:	3380      	adds	r3, #128	; 0x80
   25992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   25996:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2599a:	459a      	cmp	sl, r3
   2599c:	d107      	bne.n	259ae <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2599e:	2100      	movs	r1, #0
   259a0:	4620      	mov	r0, r4
   259a2:	f00e f8b9 	bl	33b18 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   259a6:	4651      	mov	r1, sl
   259a8:	4620      	mov	r0, r4
   259aa:	f00e f8b5 	bl	33b18 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   259ae:	a803      	add	r0, sp, #12
   259b0:	9403      	str	r4, [sp, #12]
   259b2:	f7ff fced 	bl	25390 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   259b6:	9b03      	ldr	r3, [sp, #12]
   259b8:	fa09 f303 	lsl.w	r3, r9, r3
   259bc:	6203      	str	r3, [r0, #32]
   259be:	e7a5      	b.n	2590c <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   259c0:	f1ba 0f02 	cmp.w	sl, #2
   259c4:	d10c      	bne.n	259e0 <nrfx_gpiote_irq_handler+0x118>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   259c6:	2103      	movs	r1, #3
   259c8:	4620      	mov	r0, r4
   259ca:	f00e f8a5 	bl	33b18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   259ce:	f00b 0305 	and.w	r3, fp, #5
   259d2:	2b01      	cmp	r3, #1
   259d4:	d1eb      	bne.n	259ae <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   259d6:	4631      	mov	r1, r6
   259d8:	4620      	mov	r0, r4
   259da:	f7ff fc5f 	bl	2529c <call_handler>
   259de:	e7e6      	b.n	259ae <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   259e0:	2102      	movs	r1, #2
   259e2:	4620      	mov	r0, r4
   259e4:	f00e f898 	bl	33b18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   259e8:	f1bb 0f03 	cmp.w	fp, #3
   259ec:	d0f3      	beq.n	259d6 <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   259ee:	f1ba 0f03 	cmp.w	sl, #3
   259f2:	d1dc      	bne.n	259ae <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   259f4:	f1bb 0f02 	cmp.w	fp, #2
   259f8:	e7ec      	b.n	259d4 <nrfx_gpiote_irq_handler+0x10c>
        uint32_t ch = NRF_CTZ(mask);
   259fa:	fa95 f3a5 	rbit	r3, r5
   259fe:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   25a02:	fa04 f203 	lsl.w	r2, r4, r3
   25a06:	009b      	lsls	r3, r3, #2
   25a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25a0c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25a10:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   25a14:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   25a18:	f3c0 2004 	ubfx	r0, r0, #8, #5
   25a1c:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   25a20:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   25a24:	f7ff fc3a 	bl	2529c <call_handler>
   25a28:	e77c      	b.n	25924 <nrfx_gpiote_irq_handler+0x5c>
   25a2a:	bf00      	nop
   25a2c:	40031100 	.word	0x40031100
   25a30:	40031000 	.word	0x40031000
   25a34:	40031120 	.word	0x40031120
   25a38:	40842500 	.word	0x40842500
   25a3c:	2000c9f4 	.word	0x2000c9f4

00025a40 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   25a40:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   25a42:	4c08      	ldr	r4, [pc, #32]	; (25a64 <nrfx_ipc_init+0x24>)
{
   25a44:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   25a46:	7923      	ldrb	r3, [r4, #4]
{
   25a48:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   25a4a:	b943      	cbnz	r3, 25a5e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   25a4c:	202a      	movs	r0, #42	; 0x2a
   25a4e:	f7ea fca9 	bl	103a4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   25a52:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   25a54:	4804      	ldr	r0, [pc, #16]	; (25a68 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   25a56:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   25a58:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   25a5a:	60a5      	str	r5, [r4, #8]
}
   25a5c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   25a5e:	4803      	ldr	r0, [pc, #12]	; (25a6c <nrfx_ipc_init+0x2c>)
   25a60:	e7fc      	b.n	25a5c <nrfx_ipc_init+0x1c>
   25a62:	bf00      	nop
   25a64:	20010bec 	.word	0x20010bec
   25a68:	0bad0000 	.word	0x0bad0000
   25a6c:	0bad000c 	.word	0x0bad000c

00025a70 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   25a70:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   25a72:	b948      	cbnz	r0, 25a88 <nrfx_ipc_config_load+0x18>
   25a74:	4918      	ldr	r1, [pc, #96]	; (25ad8 <nrfx_ipc_config_load+0x68>)
   25a76:	2345      	movs	r3, #69	; 0x45
   25a78:	4a18      	ldr	r2, [pc, #96]	; (25adc <nrfx_ipc_config_load+0x6c>)
   25a7a:	4819      	ldr	r0, [pc, #100]	; (25ae0 <nrfx_ipc_config_load+0x70>)
   25a7c:	f008 ff6a 	bl	2e954 <assert_print>
   25a80:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   25a82:	4816      	ldr	r0, [pc, #88]	; (25adc <nrfx_ipc_config_load+0x6c>)
   25a84:	f008 ff5f 	bl	2e946 <assert_post_action>
   25a88:	4b16      	ldr	r3, [pc, #88]	; (25ae4 <nrfx_ipc_config_load+0x74>)
   25a8a:	791b      	ldrb	r3, [r3, #4]
   25a8c:	2b01      	cmp	r3, #1
   25a8e:	d007      	beq.n	25aa0 <nrfx_ipc_config_load+0x30>
   25a90:	4915      	ldr	r1, [pc, #84]	; (25ae8 <nrfx_ipc_config_load+0x78>)
   25a92:	2346      	movs	r3, #70	; 0x46
   25a94:	4a11      	ldr	r2, [pc, #68]	; (25adc <nrfx_ipc_config_load+0x6c>)
   25a96:	4812      	ldr	r0, [pc, #72]	; (25ae0 <nrfx_ipc_config_load+0x70>)
   25a98:	f008 ff5c 	bl	2e954 <assert_print>
   25a9c:	2146      	movs	r1, #70	; 0x46
   25a9e:	e7f0      	b.n	25a82 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   25aa0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   25aa2:	4a12      	ldr	r2, [pc, #72]	; (25aec <nrfx_ipc_config_load+0x7c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   25aa4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25aa8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   25aac:	3301      	adds	r3, #1
   25aae:	2b08      	cmp	r3, #8
   25ab0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   25ab4:	d1f6      	bne.n	25aa4 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   25ab6:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   25ab8:	4a0c      	ldr	r2, [pc, #48]	; (25aec <nrfx_ipc_config_load+0x7c>)
   25aba:	f100 011c 	add.w	r1, r0, #28
   25abe:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   25ac2:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   25ac6:	3301      	adds	r3, #1
   25ac8:	2b08      	cmp	r3, #8
   25aca:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   25ace:	d1f6      	bne.n	25abe <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   25ad0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   25ad2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   25ad6:	bd38      	pop	{r3, r4, r5, pc}
   25ad8:	0003fa6e 	.word	0x0003fa6e
   25adc:	0003fa33 	.word	0x0003fa33
   25ae0:	000381c3 	.word	0x000381c3
   25ae4:	20010bec 	.word	0x20010bec
   25ae8:	0003fa77 	.word	0x0003fa77
   25aec:	4002a000 	.word	0x4002a000

00025af0 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   25af0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   25af2:	491b      	ldr	r1, [pc, #108]	; (25b60 <nrfx_ipc_uninit+0x70>)
   25af4:	790b      	ldrb	r3, [r1, #4]
   25af6:	2b01      	cmp	r3, #1
   25af8:	d009      	beq.n	25b0e <nrfx_ipc_uninit+0x1e>
   25afa:	491a      	ldr	r1, [pc, #104]	; (25b64 <nrfx_ipc_uninit+0x74>)
   25afc:	481a      	ldr	r0, [pc, #104]	; (25b68 <nrfx_ipc_uninit+0x78>)
   25afe:	2358      	movs	r3, #88	; 0x58
   25b00:	4a1a      	ldr	r2, [pc, #104]	; (25b6c <nrfx_ipc_uninit+0x7c>)
   25b02:	f008 ff27 	bl	2e954 <assert_print>
   25b06:	2158      	movs	r1, #88	; 0x58
   25b08:	4818      	ldr	r0, [pc, #96]	; (25b6c <nrfx_ipc_uninit+0x7c>)
   25b0a:	f008 ff1c 	bl	2e946 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   25b0e:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   25b10:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   25b14:	4a16      	ldr	r2, [pc, #88]	; (25b70 <nrfx_ipc_uninit+0x80>)
   25b16:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   25b1a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   25b1e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   25b22:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   25b26:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   25b2a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   25b2e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   25b32:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   25b36:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   25b3a:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   25b3e:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   25b42:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   25b46:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   25b4a:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   25b4e:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   25b52:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   25b56:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   25b5a:	710b      	strb	r3, [r1, #4]
}
   25b5c:	bd08      	pop	{r3, pc}
   25b5e:	bf00      	nop
   25b60:	20010bec 	.word	0x20010bec
   25b64:	0003fa77 	.word	0x0003fa77
   25b68:	000381c3 	.word	0x000381c3
   25b6c:	0003fa33 	.word	0x0003fa33
   25b70:	4002a000 	.word	0x4002a000

00025b74 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   25b74:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   25b76:	4b09      	ldr	r3, [pc, #36]	; (25b9c <nrfx_ipc_receive_event_enable+0x28>)
   25b78:	791b      	ldrb	r3, [r3, #4]
   25b7a:	2b01      	cmp	r3, #1
   25b7c:	d009      	beq.n	25b92 <nrfx_ipc_receive_event_enable+0x1e>
   25b7e:	4908      	ldr	r1, [pc, #32]	; (25ba0 <nrfx_ipc_receive_event_enable+0x2c>)
   25b80:	4808      	ldr	r0, [pc, #32]	; (25ba4 <nrfx_ipc_receive_event_enable+0x30>)
   25b82:	236b      	movs	r3, #107	; 0x6b
   25b84:	4a08      	ldr	r2, [pc, #32]	; (25ba8 <nrfx_ipc_receive_event_enable+0x34>)
   25b86:	f008 fee5 	bl	2e954 <assert_print>
   25b8a:	216b      	movs	r1, #107	; 0x6b
   25b8c:	4806      	ldr	r0, [pc, #24]	; (25ba8 <nrfx_ipc_receive_event_enable+0x34>)
   25b8e:	f008 feda 	bl	2e946 <assert_post_action>
    p_reg->INTENSET = mask;
   25b92:	4a06      	ldr	r2, [pc, #24]	; (25bac <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   25b94:	4083      	lsls	r3, r0
   25b96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   25b9a:	bd08      	pop	{r3, pc}
   25b9c:	20010bec 	.word	0x20010bec
   25ba0:	0003fa77 	.word	0x0003fa77
   25ba4:	000381c3 	.word	0x000381c3
   25ba8:	0003fa33 	.word	0x0003fa33
   25bac:	4002a000 	.word	0x4002a000

00025bb0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   25bb0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   25bb2:	4b09      	ldr	r3, [pc, #36]	; (25bd8 <nrfx_ipc_receive_event_disable+0x28>)
   25bb4:	791b      	ldrb	r3, [r3, #4]
   25bb6:	2b01      	cmp	r3, #1
   25bb8:	d009      	beq.n	25bce <nrfx_ipc_receive_event_disable+0x1e>
   25bba:	4908      	ldr	r1, [pc, #32]	; (25bdc <nrfx_ipc_receive_event_disable+0x2c>)
   25bbc:	4808      	ldr	r0, [pc, #32]	; (25be0 <nrfx_ipc_receive_event_disable+0x30>)
   25bbe:	2371      	movs	r3, #113	; 0x71
   25bc0:	4a08      	ldr	r2, [pc, #32]	; (25be4 <nrfx_ipc_receive_event_disable+0x34>)
   25bc2:	f008 fec7 	bl	2e954 <assert_print>
   25bc6:	2171      	movs	r1, #113	; 0x71
   25bc8:	4806      	ldr	r0, [pc, #24]	; (25be4 <nrfx_ipc_receive_event_disable+0x34>)
   25bca:	f008 febc 	bl	2e946 <assert_post_action>
    p_reg->INTENCLR = mask;
   25bce:	4a06      	ldr	r2, [pc, #24]	; (25be8 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   25bd0:	4083      	lsls	r3, r0
   25bd2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   25bd6:	bd08      	pop	{r3, pc}
   25bd8:	20010bec 	.word	0x20010bec
   25bdc:	0003fa77 	.word	0x0003fa77
   25be0:	000381c3 	.word	0x000381c3
   25be4:	0003fa33 	.word	0x0003fa33
   25be8:	4002a000 	.word	0x4002a000

00025bec <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   25bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   25bee:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25bf0:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   25bf2:	4b12      	ldr	r3, [pc, #72]	; (25c3c <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   25bf4:	4d12      	ldr	r5, [pc, #72]	; (25c40 <nrfx_ipc_irq_handler+0x54>)
   25bf6:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   25bfa:	b904      	cbnz	r4, 25bfe <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   25bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   25bfe:	fa94 f0a4 	rbit	r0, r4
   25c02:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   25c06:	fa06 f300 	lsl.w	r3, r6, r0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   25c0a:	2807      	cmp	r0, #7
   25c0c:	ea24 0403 	bic.w	r4, r4, r3
   25c10:	dd0b      	ble.n	25c2a <nrfx_ipc_irq_handler+0x3e>
   25c12:	490c      	ldr	r1, [pc, #48]	; (25c44 <nrfx_ipc_irq_handler+0x58>)
   25c14:	480c      	ldr	r0, [pc, #48]	; (25c48 <nrfx_ipc_irq_handler+0x5c>)
   25c16:	f240 13e7 	movw	r3, #487	; 0x1e7
   25c1a:	4a0c      	ldr	r2, [pc, #48]	; (25c4c <nrfx_ipc_irq_handler+0x60>)
   25c1c:	f008 fe9a 	bl	2e954 <assert_print>
   25c20:	f240 11e7 	movw	r1, #487	; 0x1e7
   25c24:	4809      	ldr	r0, [pc, #36]	; (25c4c <nrfx_ipc_irq_handler+0x60>)
   25c26:	f008 fe8e 	bl	2e946 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25c2a:	4b09      	ldr	r3, [pc, #36]	; (25c50 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   25c2c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25c2e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   25c30:	682b      	ldr	r3, [r5, #0]
   25c32:	2b00      	cmp	r3, #0
   25c34:	d0e1      	beq.n	25bfa <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   25c36:	68a9      	ldr	r1, [r5, #8]
   25c38:	4798      	blx	r3
   25c3a:	e7de      	b.n	25bfa <nrfx_ipc_irq_handler+0xe>
   25c3c:	4002a000 	.word	0x4002a000
   25c40:	20010bec 	.word	0x20010bec
   25c44:	0003bc29 	.word	0x0003bc29
   25c48:	000381c3 	.word	0x000381c3
   25c4c:	0003faa4 	.word	0x0003faa4
   25c50:	4002a100 	.word	0x4002a100

00025c54 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   25c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c56:	4604      	mov	r4, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   25c58:	460d      	mov	r5, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   25c5a:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   25c5c:	b949      	cbnz	r1, 25c72 <nrfx_timer_init+0x1e>
   25c5e:	4938      	ldr	r1, [pc, #224]	; (25d40 <nrfx_timer_init+0xec>)
   25c60:	2353      	movs	r3, #83	; 0x53
   25c62:	4a38      	ldr	r2, [pc, #224]	; (25d44 <nrfx_timer_init+0xf0>)
   25c64:	4838      	ldr	r0, [pc, #224]	; (25d48 <nrfx_timer_init+0xf4>)
   25c66:	f008 fe75 	bl	2e954 <assert_print>
   25c6a:	2153      	movs	r1, #83	; 0x53
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   25c6c:	4835      	ldr	r0, [pc, #212]	; (25d44 <nrfx_timer_init+0xf0>)
   25c6e:	f008 fe6a 	bl	2e946 <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   25c72:	230c      	movs	r3, #12
   25c74:	4e35      	ldr	r6, [pc, #212]	; (25d4c <nrfx_timer_init+0xf8>)
   25c76:	fb03 6307 	mla	r3, r3, r7, r6
   25c7a:	7a1b      	ldrb	r3, [r3, #8]
   25c7c:	2b00      	cmp	r3, #0
   25c7e:	d15d      	bne.n	25d3c <nrfx_timer_init+0xe8>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   25c80:	6803      	ldr	r3, [r0, #0]
   25c82:	4933      	ldr	r1, [pc, #204]	; (25d50 <nrfx_timer_init+0xfc>)
   25c84:	428b      	cmp	r3, r1
   25c86:	d007      	beq.n	25c98 <nrfx_timer_init+0x44>
   25c88:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   25c8c:	428b      	cmp	r3, r1
   25c8e:	d003      	beq.n	25c98 <nrfx_timer_init+0x44>
   25c90:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   25c94:	428b      	cmp	r3, r1
   25c96:	d102      	bne.n	25c9e <nrfx_timer_init+0x4a>
   25c98:	78ab      	ldrb	r3, [r5, #2]
   25c9a:	2b03      	cmp	r3, #3
   25c9c:	d907      	bls.n	25cae <nrfx_timer_init+0x5a>
   25c9e:	492d      	ldr	r1, [pc, #180]	; (25d54 <nrfx_timer_init+0x100>)
   25ca0:	2360      	movs	r3, #96	; 0x60
   25ca2:	4a28      	ldr	r2, [pc, #160]	; (25d44 <nrfx_timer_init+0xf0>)
   25ca4:	4828      	ldr	r0, [pc, #160]	; (25d48 <nrfx_timer_init+0xf4>)
   25ca6:	f008 fe55 	bl	2e954 <assert_print>
   25caa:	2160      	movs	r1, #96	; 0x60
   25cac:	e7de      	b.n	25c6c <nrfx_timer_init+0x18>

    p_cb->handler = timer_event_handler;
   25cae:	230c      	movs	r3, #12
   25cb0:	437b      	muls	r3, r7
   25cb2:	50f2      	str	r2, [r6, r3]
    p_cb->context = p_config->p_context;

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   25cb4:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25cb6:	4694      	mov	ip, r2
    p_cb->handler = timer_event_handler;
   25cb8:	18f1      	adds	r1, r6, r3
    p_cb->context = p_config->p_context;
   25cba:	686b      	ldr	r3, [r5, #4]
   25cbc:	604b      	str	r3, [r1, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   25cbe:	7961      	ldrb	r1, [r4, #5]
   25cc0:	b2d3      	uxtb	r3, r2
   25cc2:	4299      	cmp	r1, r3
    {
        nrf_timer_event_clear(p_instance->p_reg,
   25cc4:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   25cc6:	d828      	bhi.n	25d1a <nrfx_timer_init+0xc6>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   25cc8:	f340 3007 	sbfx	r0, r0, #12, #8
   25ccc:	f7ea fb6a 	bl	103a4 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   25cd0:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   25cd2:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   25cd4:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   25cd8:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   25cdc:	f022 0203 	bic.w	r2, r2, #3
   25ce0:	4313      	orrs	r3, r2
   25ce2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   25ce6:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   25ce8:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   25cea:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   25cee:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   25cf2:	f022 0203 	bic.w	r2, r2, #3
   25cf6:	4313      	orrs	r3, r2
   25cf8:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    // nrf_timer_frequency_t is mapped to prescaler for 16MHz base clock frequency timers
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
   25cfc:	782b      	ldrb	r3, [r5, #0]
   25cfe:	6822      	ldr	r2, [r4, #0]
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
   25d00:	2b09      	cmp	r3, #9
   25d02:	d912      	bls.n	25d2a <nrfx_timer_init+0xd6>
   25d04:	4914      	ldr	r1, [pc, #80]	; (25d58 <nrfx_timer_init+0x104>)
   25d06:	4810      	ldr	r0, [pc, #64]	; (25d48 <nrfx_timer_init+0xf4>)
   25d08:	f240 3355 	movw	r3, #853	; 0x355
   25d0c:	4a13      	ldr	r2, [pc, #76]	; (25d5c <nrfx_timer_init+0x108>)
   25d0e:	f008 fe21 	bl	2e954 <assert_print>
   25d12:	f240 3155 	movw	r1, #853	; 0x355
   25d16:	4811      	ldr	r0, [pc, #68]	; (25d5c <nrfx_timer_init+0x108>)
   25d18:	e7a9      	b.n	25c6e <nrfx_timer_init+0x1a>
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   25d1a:	009b      	lsls	r3, r3, #2
   25d1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25d20:	f840 c003 	str.w	ip, [r0, r3]
   25d24:	58c3      	ldr	r3, [r0, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   25d26:	3201      	adds	r2, #1
   25d28:	e7c9      	b.n	25cbe <nrfx_timer_init+0x6a>
    p_reg->PRESCALER = prescaler_factor;
   25d2a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25d2e:	230c      	movs	r3, #12
   25d30:	fb03 6607 	mla	r6, r3, r7, r6
   25d34:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   25d36:	480a      	ldr	r0, [pc, #40]	; (25d60 <nrfx_timer_init+0x10c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   25d38:	7233      	strb	r3, [r6, #8]
}
   25d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   25d3c:	4809      	ldr	r0, [pc, #36]	; (25d64 <nrfx_timer_init+0x110>)
   25d3e:	e7fc      	b.n	25d3a <nrfx_timer_init+0xe6>
   25d40:	0003fa6e 	.word	0x0003fa6e
   25d44:	0003fad6 	.word	0x0003fad6
   25d48:	000381c3 	.word	0x000381c3
   25d4c:	20010bf8 	.word	0x20010bf8
   25d50:	4000f000 	.word	0x4000f000
   25d54:	0003fb13 	.word	0x0003fb13
   25d58:	00040288 	.word	0x00040288
   25d5c:	00040254 	.word	0x00040254
   25d60:	0bad0000 	.word	0x0bad0000
   25d64:	0bad0005 	.word	0x0bad0005

00025d68 <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   25d68:	210c      	movs	r1, #12
{
   25d6a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   25d6c:	4b0c      	ldr	r3, [pc, #48]	; (25da0 <nrfx_timer_enable+0x38>)
   25d6e:	7902      	ldrb	r2, [r0, #4]
   25d70:	fb01 3202 	mla	r2, r1, r2, r3
   25d74:	7a12      	ldrb	r2, [r2, #8]
   25d76:	2a01      	cmp	r2, #1
   25d78:	d009      	beq.n	25d8e <nrfx_timer_enable+0x26>
   25d7a:	490a      	ldr	r1, [pc, #40]	; (25da4 <nrfx_timer_enable+0x3c>)
   25d7c:	480a      	ldr	r0, [pc, #40]	; (25da8 <nrfx_timer_enable+0x40>)
   25d7e:	238f      	movs	r3, #143	; 0x8f
   25d80:	4a0a      	ldr	r2, [pc, #40]	; (25dac <nrfx_timer_enable+0x44>)
   25d82:	f008 fde7 	bl	2e954 <assert_print>
   25d86:	218f      	movs	r1, #143	; 0x8f
   25d88:	4808      	ldr	r0, [pc, #32]	; (25dac <nrfx_timer_enable+0x44>)
   25d8a:	f008 fddc 	bl	2e946 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   25d8e:	6804      	ldr	r4, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25d90:	6022      	str	r2, [r4, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   25d92:	7902      	ldrb	r2, [r0, #4]
   25d94:	fb01 3302 	mla	r3, r1, r2, r3
   25d98:	2202      	movs	r2, #2
   25d9a:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   25d9c:	bd10      	pop	{r4, pc}
   25d9e:	bf00      	nop
   25da0:	20010bf8 	.word	0x20010bf8
   25da4:	0004029e 	.word	0x0004029e
   25da8:	000381c3 	.word	0x000381c3
   25dac:	0003fad6 	.word	0x0003fad6

00025db0 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25db0:	210c      	movs	r1, #12
{
   25db2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25db4:	4b0b      	ldr	r3, [pc, #44]	; (25de4 <nrfx_timer_disable+0x34>)
   25db6:	7902      	ldrb	r2, [r0, #4]
   25db8:	fb01 3202 	mla	r2, r1, r2, r3
   25dbc:	7a12      	ldrb	r2, [r2, #8]
   25dbe:	b94a      	cbnz	r2, 25dd4 <nrfx_timer_disable+0x24>
   25dc0:	4909      	ldr	r1, [pc, #36]	; (25de8 <nrfx_timer_disable+0x38>)
   25dc2:	480a      	ldr	r0, [pc, #40]	; (25dec <nrfx_timer_disable+0x3c>)
   25dc4:	2397      	movs	r3, #151	; 0x97
   25dc6:	4a0a      	ldr	r2, [pc, #40]	; (25df0 <nrfx_timer_disable+0x40>)
   25dc8:	f008 fdc4 	bl	2e954 <assert_print>
   25dcc:	2197      	movs	r1, #151	; 0x97
   25dce:	4808      	ldr	r0, [pc, #32]	; (25df0 <nrfx_timer_disable+0x40>)
   25dd0:	f008 fdb9 	bl	2e946 <assert_post_action>
   25dd4:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   25dd6:	6804      	ldr	r4, [r0, #0]
   25dd8:	6122      	str	r2, [r4, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   25dda:	7900      	ldrb	r0, [r0, #4]
   25ddc:	fb01 3300 	mla	r3, r1, r0, r3
   25de0:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   25de2:	bd10      	pop	{r4, pc}
   25de4:	20010bf8 	.word	0x20010bf8
   25de8:	000402e0 	.word	0x000402e0
   25dec:	000381c3 	.word	0x000381c3
   25df0:	0003fad6 	.word	0x0003fad6

00025df4 <nrfx_timer_uninit>:
{
   25df4:	b538      	push	{r3, r4, r5, lr}
   25df6:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   25df8:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   25dfa:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   25dfc:	f340 3007 	sbfx	r0, r0, #12, #8
   25e00:	f7ea fade 	bl	103c0 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   25e04:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   25e06:	4620      	mov	r0, r4
   25e08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   25e0c:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   25e10:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
   25e14:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
   25e16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   25e1a:	f7ff ffc9 	bl	25db0 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   25e1e:	210c      	movs	r1, #12
   25e20:	7922      	ldrb	r2, [r4, #4]
   25e22:	4b02      	ldr	r3, [pc, #8]	; (25e2c <nrfx_timer_uninit+0x38>)
   25e24:	fb01 3302 	mla	r3, r1, r2, r3
   25e28:	721d      	strb	r5, [r3, #8]
}
   25e2a:	bd38      	pop	{r3, r4, r5, pc}
   25e2c:	20010bf8 	.word	0x20010bf8

00025e30 <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25e30:	210c      	movs	r1, #12
{
   25e32:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25e34:	4b09      	ldr	r3, [pc, #36]	; (25e5c <nrfx_timer_clear+0x2c>)
   25e36:	7902      	ldrb	r2, [r0, #4]
   25e38:	fb01 3302 	mla	r3, r1, r2, r3
   25e3c:	7a1b      	ldrb	r3, [r3, #8]
   25e3e:	b94b      	cbnz	r3, 25e54 <nrfx_timer_clear+0x24>
   25e40:	4907      	ldr	r1, [pc, #28]	; (25e60 <nrfx_timer_clear+0x30>)
   25e42:	4808      	ldr	r0, [pc, #32]	; (25e64 <nrfx_timer_clear+0x34>)
   25e44:	23b3      	movs	r3, #179	; 0xb3
   25e46:	4a08      	ldr	r2, [pc, #32]	; (25e68 <nrfx_timer_clear+0x38>)
   25e48:	f008 fd84 	bl	2e954 <assert_print>
   25e4c:	21b3      	movs	r1, #179	; 0xb3
   25e4e:	4806      	ldr	r0, [pc, #24]	; (25e68 <nrfx_timer_clear+0x38>)
   25e50:	f008 fd79 	bl	2e946 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25e54:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   25e56:	6803      	ldr	r3, [r0, #0]
   25e58:	60da      	str	r2, [r3, #12]
}
   25e5a:	bd08      	pop	{r3, pc}
   25e5c:	20010bf8 	.word	0x20010bf8
   25e60:	000402e0 	.word	0x000402e0
   25e64:	000381c3 	.word	0x000381c3
   25e68:	0003fad6 	.word	0x0003fad6

00025e6c <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25e6c:	210c      	movs	r1, #12
{
   25e6e:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25e70:	4b0f      	ldr	r3, [pc, #60]	; (25eb0 <nrfx_timer_increment+0x44>)
   25e72:	7902      	ldrb	r2, [r0, #4]
   25e74:	fb01 3302 	mla	r3, r1, r2, r3
   25e78:	7a1b      	ldrb	r3, [r3, #8]
   25e7a:	b94b      	cbnz	r3, 25e90 <nrfx_timer_increment+0x24>
   25e7c:	490d      	ldr	r1, [pc, #52]	; (25eb4 <nrfx_timer_increment+0x48>)
   25e7e:	23b9      	movs	r3, #185	; 0xb9
   25e80:	4a0d      	ldr	r2, [pc, #52]	; (25eb8 <nrfx_timer_increment+0x4c>)
   25e82:	480e      	ldr	r0, [pc, #56]	; (25ebc <nrfx_timer_increment+0x50>)
   25e84:	f008 fd66 	bl	2e954 <assert_print>
   25e88:	21b9      	movs	r1, #185	; 0xb9
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   25e8a:	480b      	ldr	r0, [pc, #44]	; (25eb8 <nrfx_timer_increment+0x4c>)
   25e8c:	f008 fd5b 	bl	2e946 <assert_post_action>
   25e90:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   25e92:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   25e96:	b2db      	uxtb	r3, r3
   25e98:	b93b      	cbnz	r3, 25eaa <nrfx_timer_increment+0x3e>
   25e9a:	4909      	ldr	r1, [pc, #36]	; (25ec0 <nrfx_timer_increment+0x54>)
   25e9c:	23ba      	movs	r3, #186	; 0xba
   25e9e:	4a06      	ldr	r2, [pc, #24]	; (25eb8 <nrfx_timer_increment+0x4c>)
   25ea0:	4806      	ldr	r0, [pc, #24]	; (25ebc <nrfx_timer_increment+0x50>)
   25ea2:	f008 fd57 	bl	2e954 <assert_print>
   25ea6:	21ba      	movs	r1, #186	; 0xba
   25ea8:	e7ef      	b.n	25e8a <nrfx_timer_increment+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25eaa:	2301      	movs	r3, #1
   25eac:	6093      	str	r3, [r2, #8]

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
}
   25eae:	bd08      	pop	{r3, pc}
   25eb0:	20010bf8 	.word	0x20010bf8
   25eb4:	000402e0 	.word	0x000402e0
   25eb8:	0003fad6 	.word	0x0003fad6
   25ebc:	000381c3 	.word	0x000381c3
   25ec0:	00040324 	.word	0x00040324

00025ec4 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   25ec4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   25ec6:	240c      	movs	r4, #12
   25ec8:	7902      	ldrb	r2, [r0, #4]
   25eca:	4b13      	ldr	r3, [pc, #76]	; (25f18 <nrfx_timer_capture+0x54>)
   25ecc:	fb04 3302 	mla	r3, r4, r2, r3
   25ed0:	7a1b      	ldrb	r3, [r3, #8]
   25ed2:	b94b      	cbnz	r3, 25ee8 <nrfx_timer_capture+0x24>
   25ed4:	4911      	ldr	r1, [pc, #68]	; (25f1c <nrfx_timer_capture+0x58>)
   25ed6:	23c2      	movs	r3, #194	; 0xc2
   25ed8:	4a11      	ldr	r2, [pc, #68]	; (25f20 <nrfx_timer_capture+0x5c>)
   25eda:	4812      	ldr	r0, [pc, #72]	; (25f24 <nrfx_timer_capture+0x60>)
   25edc:	f008 fd3a 	bl	2e954 <assert_print>
   25ee0:	21c2      	movs	r1, #194	; 0xc2
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   25ee2:	480f      	ldr	r0, [pc, #60]	; (25f20 <nrfx_timer_capture+0x5c>)
   25ee4:	f008 fd2f 	bl	2e946 <assert_post_action>
   25ee8:	7943      	ldrb	r3, [r0, #5]
   25eea:	428b      	cmp	r3, r1
   25eec:	d807      	bhi.n	25efe <nrfx_timer_capture+0x3a>
   25eee:	490e      	ldr	r1, [pc, #56]	; (25f28 <nrfx_timer_capture+0x64>)
   25ef0:	23c3      	movs	r3, #195	; 0xc3
   25ef2:	4a0b      	ldr	r2, [pc, #44]	; (25f20 <nrfx_timer_capture+0x5c>)
   25ef4:	480b      	ldr	r0, [pc, #44]	; (25f24 <nrfx_timer_capture+0x60>)
   25ef6:	f008 fd2d 	bl	2e954 <assert_print>
   25efa:	21c3      	movs	r1, #195	; 0xc3
   25efc:	e7f1      	b.n	25ee2 <nrfx_timer_capture+0x1e>
   25efe:	2401      	movs	r4, #1
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   25f00:	008b      	lsls	r3, r1, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f02:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   25f04:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f06:	b2db      	uxtb	r3, r3
   25f08:	50d4      	str	r4, [r2, r3]

    nrf_timer_task_trigger(p_instance->p_reg,
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
   25f0a:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg->CC[cc_channel];
   25f0c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   25f10:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
   25f14:	bd10      	pop	{r4, pc}
   25f16:	bf00      	nop
   25f18:	20010bf8 	.word	0x20010bf8
   25f1c:	000402e0 	.word	0x000402e0
   25f20:	0003fad6 	.word	0x0003fad6
   25f24:	000381c3 	.word	0x000381c3
   25f28:	00040362 	.word	0x00040362

00025f2c <rpc_handle_data_message>:
   25f2c:	b570      	push	{r4, r5, r6, lr}
   25f2e:	6803      	ldr	r3, [r0, #0]
   25f30:	4604      	mov	r4, r0
   25f32:	3b03      	subs	r3, #3
   25f34:	b2db      	uxtb	r3, r3
   25f36:	2b04      	cmp	r3, #4
   25f38:	d803      	bhi.n	25f42 <rpc_handle_data_message+0x16>
   25f3a:	4a09      	ldr	r2, [pc, #36]	; (25f60 <rpc_handle_data_message+0x34>)
   25f3c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   25f40:	b92d      	cbnz	r5, 25f4e <rpc_handle_data_message+0x22>
   25f42:	68a0      	ldr	r0, [r4, #8]
   25f44:	b108      	cbz	r0, 25f4a <rpc_handle_data_message+0x1e>
   25f46:	f000 f82b 	bl	25fa0 <rpc_transport_msg_data_rx_free>
   25f4a:	2000      	movs	r0, #0
   25f4c:	bd70      	pop	{r4, r5, r6, pc}
   25f4e:	f00d fe49 	bl	33be4 <rpc_client_msg_from_rpc_msg_get>
   25f52:	6821      	ldr	r1, [r4, #0]
   25f54:	462b      	mov	r3, r5
   25f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25f5a:	0c09      	lsrs	r1, r1, #16
   25f5c:	4718      	bx	r3
   25f5e:	bf00      	nop
   25f60:	000374ac 	.word	0x000374ac

00025f64 <rpc_transport_init>:
   25f64:	4b01      	ldr	r3, [pc, #4]	; (25f6c <rpc_transport_init+0x8>)
   25f66:	699b      	ldr	r3, [r3, #24]
   25f68:	4718      	bx	r3
   25f6a:	bf00      	nop
   25f6c:	2000ca58 	.word	0x2000ca58

00025f70 <rpc_transport_msg_alloc>:
   25f70:	4b01      	ldr	r3, [pc, #4]	; (25f78 <rpc_transport_msg_alloc+0x8>)
   25f72:	681b      	ldr	r3, [r3, #0]
   25f74:	4718      	bx	r3
   25f76:	bf00      	nop
   25f78:	2000ca58 	.word	0x2000ca58

00025f7c <rpc_transport_msg_data_tx_size>:
   25f7c:	4b01      	ldr	r3, [pc, #4]	; (25f84 <rpc_transport_msg_data_tx_size+0x8>)
   25f7e:	685b      	ldr	r3, [r3, #4]
   25f80:	4718      	bx	r3
   25f82:	bf00      	nop
   25f84:	2000ca58 	.word	0x2000ca58

00025f88 <rpc_transport_msg_rx_free>:
   25f88:	4b01      	ldr	r3, [pc, #4]	; (25f90 <rpc_transport_msg_rx_free+0x8>)
   25f8a:	68db      	ldr	r3, [r3, #12]
   25f8c:	4718      	bx	r3
   25f8e:	bf00      	nop
   25f90:	2000ca58 	.word	0x2000ca58

00025f94 <rpc_transport_msg_tx_free>:
   25f94:	4b01      	ldr	r3, [pc, #4]	; (25f9c <rpc_transport_msg_tx_free+0x8>)
   25f96:	691b      	ldr	r3, [r3, #16]
   25f98:	4718      	bx	r3
   25f9a:	bf00      	nop
   25f9c:	2000ca58 	.word	0x2000ca58

00025fa0 <rpc_transport_msg_data_rx_free>:
   25fa0:	4b01      	ldr	r3, [pc, #4]	; (25fa8 <rpc_transport_msg_data_rx_free+0x8>)
   25fa2:	695b      	ldr	r3, [r3, #20]
   25fa4:	4718      	bx	r3
   25fa6:	bf00      	nop
   25fa8:	2000ca58 	.word	0x2000ca58

00025fac <rpc_transport_msg_send>:
   25fac:	4b01      	ldr	r3, [pc, #4]	; (25fb4 <rpc_transport_msg_send+0x8>)
   25fae:	689b      	ldr	r3, [r3, #8]
   25fb0:	4718      	bx	r3
   25fb2:	bf00      	nop
   25fb4:	2000ca58 	.word	0x2000ca58

00025fb8 <rpc_transport_data_rx_suspend>:
   25fb8:	4b01      	ldr	r3, [pc, #4]	; (25fc0 <rpc_transport_data_rx_suspend+0x8>)
   25fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25fbc:	4718      	bx	r3
   25fbe:	bf00      	nop
   25fc0:	2000ca58 	.word	0x2000ca58

00025fc4 <rpc_transport_data_rx_resume>:
   25fc4:	4b01      	ldr	r3, [pc, #4]	; (25fcc <rpc_transport_data_rx_resume+0x8>)
   25fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25fc8:	4718      	bx	r3
   25fca:	bf00      	nop
   25fcc:	2000ca58 	.word	0x2000ca58

00025fd0 <rpc_transport_ipc_msg_data_tx_size>:
   25fd0:	4b01      	ldr	r3, [pc, #4]	; (25fd8 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   25fd2:	681b      	ldr	r3, [r3, #0]
   25fd4:	68d8      	ldr	r0, [r3, #12]
   25fd6:	4770      	bx	lr
   25fd8:	20010c04 	.word	0x20010c04

00025fdc <rpc_transport_ipc_msg_rx_free>:
   25fdc:	2300      	movs	r3, #0
   25fde:	b530      	push	{r4, r5, lr}
   25fe0:	4910      	ldr	r1, [pc, #64]	; (26024 <rpc_transport_ipc_msg_rx_free+0x48>)
   25fe2:	680a      	ldr	r2, [r1, #0]
   25fe4:	6814      	ldr	r4, [r2, #0]
   25fe6:	42a3      	cmp	r3, r4
   25fe8:	d10b      	bne.n	26002 <rpc_transport_ipc_msg_rx_free+0x26>
   25fea:	2300      	movs	r3, #0
   25fec:	684a      	ldr	r2, [r1, #4]
   25fee:	6811      	ldr	r1, [r2, #0]
   25ff0:	428b      	cmp	r3, r1
   25ff2:	d015      	beq.n	26020 <rpc_transport_ipc_msg_rx_free+0x44>
   25ff4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   25ff8:	68a4      	ldr	r4, [r4, #8]
   25ffa:	42a0      	cmp	r0, r4
   25ffc:	d008      	beq.n	26010 <rpc_transport_ipc_msg_rx_free+0x34>
   25ffe:	3301      	adds	r3, #1
   26000:	e7f6      	b.n	25ff0 <rpc_transport_ipc_msg_rx_free+0x14>
   26002:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   26006:	68ad      	ldr	r5, [r5, #8]
   26008:	42a8      	cmp	r0, r5
   2600a:	d001      	beq.n	26010 <rpc_transport_ipc_msg_rx_free+0x34>
   2600c:	3301      	adds	r3, #1
   2600e:	e7ea      	b.n	25fe6 <rpc_transport_ipc_msg_rx_free+0xa>
   26010:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   26014:	6853      	ldr	r3, [r2, #4]
   26016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2601a:	f043 0303 	orr.w	r3, r3, #3
   2601e:	6053      	str	r3, [r2, #4]
   26020:	bd30      	pop	{r4, r5, pc}
   26022:	bf00      	nop
   26024:	20010c24 	.word	0x20010c24

00026028 <rpc_transport_ipc_msg_tx_free>:
   26028:	2200      	movs	r2, #0
   2602a:	b530      	push	{r4, r5, lr}
   2602c:	4b0b      	ldr	r3, [pc, #44]	; (2605c <rpc_transport_ipc_msg_tx_free+0x34>)
   2602e:	6819      	ldr	r1, [r3, #0]
   26030:	680c      	ldr	r4, [r1, #0]
   26032:	4294      	cmp	r4, r2
   26034:	d00f      	beq.n	26056 <rpc_transport_ipc_msg_tx_free+0x2e>
   26036:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   2603a:	689d      	ldr	r5, [r3, #8]
   2603c:	42a8      	cmp	r0, r5
   2603e:	d10b      	bne.n	26058 <rpc_transport_ipc_msg_tx_free+0x30>
   26040:	f04f 0203 	mov.w	r2, #3
   26044:	3304      	adds	r3, #4
   26046:	e8d3 1fcf 	ldaexb	r1, [r3]
   2604a:	2900      	cmp	r1, #0
   2604c:	d103      	bne.n	26056 <rpc_transport_ipc_msg_tx_free+0x2e>
   2604e:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   26052:	2800      	cmp	r0, #0
   26054:	d1f7      	bne.n	26046 <rpc_transport_ipc_msg_tx_free+0x1e>
   26056:	bd30      	pop	{r4, r5, pc}
   26058:	3201      	adds	r2, #1
   2605a:	e7ea      	b.n	26032 <rpc_transport_ipc_msg_tx_free+0xa>
   2605c:	20010c1c 	.word	0x20010c1c

00026060 <handle_modem_rpc_msg>:
   26060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26064:	2500      	movs	r5, #0
   26066:	4606      	mov	r6, r0
   26068:	460f      	mov	r7, r1
   2606a:	4628      	mov	r0, r5
   2606c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 260d4 <handle_modem_rpc_msg+0x74>
   26070:	6833      	ldr	r3, [r6, #0]
   26072:	42ab      	cmp	r3, r5
   26074:	d801      	bhi.n	2607a <handle_modem_rpc_msg+0x1a>
   26076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2607a:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   2607e:	6863      	ldr	r3, [r4, #4]
   26080:	b2db      	uxtb	r3, r3
   26082:	2b01      	cmp	r3, #1
   26084:	d117      	bne.n	260b6 <handle_modem_rpc_msg+0x56>
   26086:	6862      	ldr	r2, [r4, #4]
   26088:	f8b8 3000 	ldrh.w	r3, [r8]
   2608c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   26090:	d111      	bne.n	260b6 <handle_modem_rpc_msg+0x56>
   26092:	2f02      	cmp	r7, #2
   26094:	68a0      	ldr	r0, [r4, #8]
   26096:	d110      	bne.n	260ba <handle_modem_rpc_msg+0x5a>
   26098:	f7ff ff48 	bl	25f2c <rpc_handle_data_message>
   2609c:	b990      	cbnz	r0, 260c4 <handle_modem_rpc_msg+0x64>
   2609e:	6863      	ldr	r3, [r4, #4]
   260a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   260a4:	f043 0303 	orr.w	r3, r3, #3
   260a8:	6063      	str	r3, [r4, #4]
   260aa:	2001      	movs	r0, #1
   260ac:	f8b8 3000 	ldrh.w	r3, [r8]
   260b0:	3301      	adds	r3, #1
   260b2:	f8a8 3000 	strh.w	r3, [r8]
   260b6:	3501      	adds	r5, #1
   260b8:	e7da      	b.n	26070 <handle_modem_rpc_msg+0x10>
   260ba:	6801      	ldr	r1, [r0, #0]
   260bc:	0c09      	lsrs	r1, r1, #16
   260be:	f00d fd3a 	bl	33b36 <rpc_handle_ctrl_message>
   260c2:	e7eb      	b.n	2609c <handle_modem_rpc_msg+0x3c>
   260c4:	2801      	cmp	r0, #1
   260c6:	d1f0      	bne.n	260aa <handle_modem_rpc_msg+0x4a>
   260c8:	6863      	ldr	r3, [r4, #4]
   260ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   260ce:	f043 0302 	orr.w	r3, r3, #2
   260d2:	e7e9      	b.n	260a8 <handle_modem_rpc_msg+0x48>
   260d4:	20011050 	.word	0x20011050

000260d8 <rpc_message_handler>:
   260d8:	b538      	push	{r3, r4, r5, lr}
   260da:	4d07      	ldr	r5, [pc, #28]	; (260f8 <rpc_message_handler+0x20>)
   260dc:	2101      	movs	r1, #1
   260de:	6828      	ldr	r0, [r5, #0]
   260e0:	f7ff ffbe 	bl	26060 <handle_modem_rpc_msg>
   260e4:	2102      	movs	r1, #2
   260e6:	4604      	mov	r4, r0
   260e8:	6868      	ldr	r0, [r5, #4]
   260ea:	f7ff ffb9 	bl	26060 <handle_modem_rpc_msg>
   260ee:	2800      	cmp	r0, #0
   260f0:	d1f4      	bne.n	260dc <rpc_message_handler+0x4>
   260f2:	2c00      	cmp	r4, #0
   260f4:	d1f2      	bne.n	260dc <rpc_message_handler+0x4>
   260f6:	bd38      	pop	{r3, r4, r5, pc}
   260f8:	20010c24 	.word	0x20010c24

000260fc <ipc_irq_handler>:
   260fc:	b570      	push	{r4, r5, r6, lr}
   260fe:	2807      	cmp	r0, #7
   26100:	d868      	bhi.n	261d4 <ipc_irq_handler+0xd8>
   26102:	e8df f000 	tbb	[pc, r0]
   26106:	670b      	.short	0x670b
   26108:	674b674f 	.word	0x674b674f
   2610c:	0440      	.short	0x0440
   2610e:	f001 fe47 	bl	27da0 <ipc_trace_handler>
   26112:	2003      	movs	r0, #3
   26114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26118:	f7f5 bcd6 	b.w	1bac8 <nrf_modem_os_event_notify>
   2611c:	2003      	movs	r0, #3
   2611e:	4b2e      	ldr	r3, [pc, #184]	; (261d8 <ipc_irq_handler+0xdc>)
   26120:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   26124:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   26128:	4b2c      	ldr	r3, [pc, #176]	; (261dc <ipc_irq_handler+0xe0>)
   2612a:	781d      	ldrb	r5, [r3, #0]
   2612c:	7018      	strb	r0, [r3, #0]
   2612e:	f001 fe0d 	bl	27d4c <nrf_modem_state_set>
   26132:	4b2b      	ldr	r3, [pc, #172]	; (261e0 <ipc_irq_handler+0xe4>)
   26134:	b2ed      	uxtb	r5, r5
   26136:	6818      	ldr	r0, [r3, #0]
   26138:	f7f5 fc62 	bl	1ba00 <nrf_modem_os_sem_give>
   2613c:	2d01      	cmp	r5, #1
   2613e:	d11c      	bne.n	2617a <ipc_irq_handler+0x7e>
   26140:	4b28      	ldr	r3, [pc, #160]	; (261e4 <ipc_irq_handler+0xe8>)
   26142:	429c      	cmp	r4, r3
   26144:	d010      	beq.n	26168 <ipc_irq_handler+0x6c>
   26146:	d809      	bhi.n	2615c <ipc_irq_handler+0x60>
   26148:	3b02      	subs	r3, #2
   2614a:	429c      	cmp	r4, r3
   2614c:	d00f      	beq.n	2616e <ipc_irq_handler+0x72>
   2614e:	3301      	adds	r3, #1
   26150:	429c      	cmp	r4, r3
   26152:	d00f      	beq.n	26174 <ipc_irq_handler+0x78>
   26154:	4b24      	ldr	r3, [pc, #144]	; (261e8 <ipc_irq_handler+0xec>)
   26156:	601c      	str	r4, [r3, #0]
   26158:	2000      	movs	r0, #0
   2615a:	e7db      	b.n	26114 <ipc_irq_handler+0x18>
   2615c:	4b23      	ldr	r3, [pc, #140]	; (261ec <ipc_irq_handler+0xf0>)
   2615e:	429c      	cmp	r4, r3
   26160:	d1f8      	bne.n	26154 <ipc_irq_handler+0x58>
   26162:	f06f 040c 	mvn.w	r4, #12
   26166:	e7f5      	b.n	26154 <ipc_irq_handler+0x58>
   26168:	f06f 040b 	mvn.w	r4, #11
   2616c:	e7f2      	b.n	26154 <ipc_irq_handler+0x58>
   2616e:	f06f 0415 	mvn.w	r4, #21
   26172:	e7ef      	b.n	26154 <ipc_irq_handler+0x58>
   26174:	f06f 0485 	mvn.w	r4, #133	; 0x85
   26178:	e7ec      	b.n	26154 <ipc_irq_handler+0x58>
   2617a:	4631      	mov	r1, r6
   2617c:	f3c4 000b 	ubfx	r0, r4, #0, #12
   26180:	f001 fdd8 	bl	27d34 <nrf_modem_fault_handler_internal>
   26184:	e7e8      	b.n	26158 <ipc_irq_handler+0x5c>
   26186:	2202      	movs	r2, #2
   26188:	4b14      	ldr	r3, [pc, #80]	; (261dc <ipc_irq_handler+0xe0>)
   2618a:	2000      	movs	r0, #0
   2618c:	701a      	strb	r2, [r3, #0]
   2618e:	f001 fddd 	bl	27d4c <nrf_modem_state_set>
   26192:	4b13      	ldr	r3, [pc, #76]	; (261e0 <ipc_irq_handler+0xe4>)
   26194:	6818      	ldr	r0, [r3, #0]
   26196:	f7f5 fc33 	bl	1ba00 <nrf_modem_os_sem_give>
   2619a:	e7dd      	b.n	26158 <ipc_irq_handler+0x5c>
   2619c:	f7ff ff9c 	bl	260d8 <rpc_message_handler>
   261a0:	2002      	movs	r0, #2
   261a2:	e7b7      	b.n	26114 <ipc_irq_handler+0x18>
   261a4:	4b0d      	ldr	r3, [pc, #52]	; (261dc <ipc_irq_handler+0xe0>)
   261a6:	781a      	ldrb	r2, [r3, #0]
   261a8:	2a01      	cmp	r2, #1
   261aa:	b2d0      	uxtb	r0, r2
   261ac:	d10e      	bne.n	261cc <ipc_irq_handler+0xd0>
   261ae:	4a10      	ldr	r2, [pc, #64]	; (261f0 <ipc_irq_handler+0xf4>)
   261b0:	6811      	ldr	r1, [r2, #0]
   261b2:	4a10      	ldr	r2, [pc, #64]	; (261f4 <ipc_irq_handler+0xf8>)
   261b4:	688c      	ldr	r4, [r1, #8]
   261b6:	6054      	str	r4, [r2, #4]
   261b8:	6849      	ldr	r1, [r1, #4]
   261ba:	6011      	str	r1, [r2, #0]
   261bc:	2200      	movs	r2, #0
   261be:	701a      	strb	r2, [r3, #0]
   261c0:	f001 fdc4 	bl	27d4c <nrf_modem_state_set>
   261c4:	4b06      	ldr	r3, [pc, #24]	; (261e0 <ipc_irq_handler+0xe4>)
   261c6:	6818      	ldr	r0, [r3, #0]
   261c8:	f7f5 fc1a 	bl	1ba00 <nrf_modem_os_sem_give>
   261cc:	f7ff ff84 	bl	260d8 <rpc_message_handler>
   261d0:	2001      	movs	r0, #1
   261d2:	e79f      	b.n	26114 <ipc_irq_handler+0x18>
   261d4:	bd70      	pop	{r4, r5, r6, pc}
   261d6:	bf00      	nop
   261d8:	4002a000 	.word	0x4002a000
   261dc:	20012873 	.word	0x20012873
   261e0:	20010c0c 	.word	0x20010c0c
   261e4:	00010022 	.word	0x00010022
   261e8:	20010c20 	.word	0x20010c20
   261ec:	00013032 	.word	0x00013032
   261f0:	20010c08 	.word	0x20010c08
   261f4:	20010c24 	.word	0x20010c24

000261f8 <rpc_transport_ipc_data_msg_send>:
   261f8:	b570      	push	{r4, r5, r6, lr}
   261fa:	4b16      	ldr	r3, [pc, #88]	; (26254 <rpc_transport_ipc_data_msg_send+0x5c>)
   261fc:	6842      	ldr	r2, [r0, #4]
   261fe:	681b      	ldr	r3, [r3, #0]
   26200:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   26204:	f042 0202 	orr.w	r2, r2, #2
   26208:	1ac3      	subs	r3, r0, r3
   2620a:	6042      	str	r2, [r0, #4]
   2620c:	4812      	ldr	r0, [pc, #72]	; (26258 <rpc_transport_ipc_data_msg_send+0x60>)
   2620e:	4a13      	ldr	r2, [pc, #76]	; (2625c <rpc_transport_ipc_data_msg_send+0x64>)
   26210:	6801      	ldr	r1, [r0, #0]
   26212:	f3c3 1389 	ubfx	r3, r3, #6, #10
   26216:	e8d2 4fdf 	ldaexh	r4, [r2]
   2621a:	1c65      	adds	r5, r4, #1
   2621c:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   26220:	2e00      	cmp	r6, #0
   26222:	d1f8      	bne.n	26216 <rpc_transport_ipc_data_msg_send+0x1e>
   26224:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   26228:	684a      	ldr	r2, [r1, #4]
   2622a:	b292      	uxth	r2, r2
   2622c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   26230:	604a      	str	r2, [r1, #4]
   26232:	6802      	ldr	r2, [r0, #0]
   26234:	2003      	movs	r0, #3
   26236:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2623a:	6853      	ldr	r3, [r2, #4]
   2623c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26240:	f043 0301 	orr.w	r3, r3, #1
   26244:	6053      	str	r3, [r2, #4]
   26246:	f00c fcb5 	bl	32bb4 <nrf_modem_os_busywait>
   2624a:	2201      	movs	r2, #1
   2624c:	4b04      	ldr	r3, [pc, #16]	; (26260 <rpc_transport_ipc_data_msg_send+0x68>)
   2624e:	60da      	str	r2, [r3, #12]
   26250:	bd70      	pop	{r4, r5, r6, pc}
   26252:	bf00      	nop
   26254:	20010c14 	.word	0x20010c14
   26258:	20010c1c 	.word	0x20010c1c
   2625c:	20011052 	.word	0x20011052
   26260:	4002a000 	.word	0x4002a000

00026264 <rpc_transport_ipc_ctrl_msg_alloc>:
   26264:	230a      	movs	r3, #10
   26266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26268:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2626c:	4e0c      	ldr	r6, [pc, #48]	; (262a0 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   2626e:	4f0d      	ldr	r7, [pc, #52]	; (262a4 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   26270:	9301      	str	r3, [sp, #4]
   26272:	6831      	ldr	r1, [r6, #0]
   26274:	6838      	ldr	r0, [r7, #0]
   26276:	f00d fc90 	bl	33b9a <rpc_transport_ipc_msg_alloc>
   2627a:	4604      	mov	r4, r0
   2627c:	b940      	cbnz	r0, 26290 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   2627e:	f00c fc9b 	bl	32bb8 <nrf_modem_os_is_in_isr>
   26282:	b940      	cbnz	r0, 26296 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   26284:	2001      	movs	r0, #1
   26286:	a901      	add	r1, sp, #4
   26288:	f7f5 faa6 	bl	1b7d8 <nrf_modem_os_timedwait>
   2628c:	306e      	adds	r0, #110	; 0x6e
   2628e:	d1f0      	bne.n	26272 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   26290:	4620      	mov	r0, r4
   26292:	b003      	add	sp, #12
   26294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26296:	9801      	ldr	r0, [sp, #4]
   26298:	4368      	muls	r0, r5
   2629a:	f00c fc8b 	bl	32bb4 <nrf_modem_os_busywait>
   2629e:	e7e8      	b.n	26272 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   262a0:	20010c10 	.word	0x20010c10
   262a4:	20010c18 	.word	0x20010c18

000262a8 <rpc_transport_ipc_data_msg_alloc>:
   262a8:	4b05      	ldr	r3, [pc, #20]	; (262c0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   262aa:	781b      	ldrb	r3, [r3, #0]
   262ac:	b92b      	cbnz	r3, 262ba <rpc_transport_ipc_data_msg_alloc+0x12>
   262ae:	4b05      	ldr	r3, [pc, #20]	; (262c4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   262b0:	6819      	ldr	r1, [r3, #0]
   262b2:	4b05      	ldr	r3, [pc, #20]	; (262c8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   262b4:	6818      	ldr	r0, [r3, #0]
   262b6:	f00d bc70 	b.w	33b9a <rpc_transport_ipc_msg_alloc>
   262ba:	2000      	movs	r0, #0
   262bc:	4770      	bx	lr
   262be:	bf00      	nop
   262c0:	20012872 	.word	0x20012872
   262c4:	20010c14 	.word	0x20010c14
   262c8:	20010c1c 	.word	0x20010c1c

000262cc <rpc_transport_ipc_init>:
   262cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262d0:	b095      	sub	sp, #84	; 0x54
   262d2:	2238      	movs	r2, #56	; 0x38
   262d4:	2100      	movs	r1, #0
   262d6:	4606      	mov	r6, r0
   262d8:	a803      	add	r0, sp, #12
   262da:	f00e fea7 	bl	3502c <memset>
   262de:	2302      	movs	r3, #2
   262e0:	9304      	str	r3, [sp, #16]
   262e2:	2308      	movs	r3, #8
   262e4:	9306      	str	r3, [sp, #24]
   262e6:	2320      	movs	r3, #32
   262e8:	9308      	str	r3, [sp, #32]
   262ea:	2304      	movs	r3, #4
   262ec:	930d      	str	r3, [sp, #52]	; 0x34
   262ee:	2310      	movs	r3, #16
   262f0:	2540      	movs	r5, #64	; 0x40
   262f2:	930f      	str	r3, [sp, #60]	; 0x3c
   262f4:	2380      	movs	r3, #128	; 0x80
   262f6:	2201      	movs	r2, #1
   262f8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   262fc:	23d5      	movs	r3, #213	; 0xd5
   262fe:	2100      	movs	r1, #0
   26300:	4855      	ldr	r0, [pc, #340]	; (26458 <rpc_transport_ipc_init+0x18c>)
   26302:	920b      	str	r2, [sp, #44]	; 0x2c
   26304:	9313      	str	r3, [sp, #76]	; 0x4c
   26306:	f7f5 fb47 	bl	1b998 <nrf_modem_os_sem_init>
   2630a:	4605      	mov	r5, r0
   2630c:	2800      	cmp	r0, #0
   2630e:	f040 809f 	bne.w	26450 <rpc_transport_ipc_init+0x184>
   26312:	4602      	mov	r2, r0
   26314:	4951      	ldr	r1, [pc, #324]	; (2645c <rpc_transport_ipc_init+0x190>)
   26316:	7930      	ldrb	r0, [r6, #4]
   26318:	f7ff fb92 	bl	25a40 <nrfx_ipc_init>
   2631c:	a803      	add	r0, sp, #12
   2631e:	f7ff fba7 	bl	25a70 <nrfx_ipc_config_load>
   26322:	6834      	ldr	r4, [r6, #0]
   26324:	6862      	ldr	r2, [r4, #4]
   26326:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   2632a:	f040 8089 	bne.w	26440 <rpc_transport_ipc_init+0x174>
   2632e:	6961      	ldr	r1, [r4, #20]
   26330:	68e3      	ldr	r3, [r4, #12]
   26332:	440b      	add	r3, r1
   26334:	69e1      	ldr	r1, [r4, #28]
   26336:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   2633a:	440b      	add	r3, r1
   2633c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   26340:	d87e      	bhi.n	26440 <rpc_transport_ipc_init+0x174>
   26342:	6820      	ldr	r0, [r4, #0]
   26344:	4629      	mov	r1, r5
   26346:	f00e fe71 	bl	3502c <memset>
   2634a:	6833      	ldr	r3, [r6, #0]
   2634c:	681c      	ldr	r4, [r3, #0]
   2634e:	f8d3 901c 	ldr.w	r9, [r3, #28]
   26352:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   26356:	9201      	str	r2, [sp, #4]
   26358:	f104 0760 	add.w	r7, r4, #96	; 0x60
   2635c:	4a40      	ldr	r2, [pc, #256]	; (26460 <rpc_transport_ipc_init+0x194>)
   2635e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   26362:	f104 0b20 	add.w	fp, r4, #32
   26366:	f1b9 0f00 	cmp.w	r9, #0
   2636a:	d15c      	bne.n	26426 <rpc_transport_ipc_init+0x15a>
   2636c:	f8c2 b000 	str.w	fp, [r2]
   26370:	2500      	movs	r5, #0
   26372:	f04f 0a01 	mov.w	sl, #1
   26376:	7025      	strb	r5, [r4, #0]
   26378:	7065      	strb	r5, [r4, #1]
   2637a:	f884 a002 	strb.w	sl, [r4, #2]
   2637e:	70e5      	strb	r5, [r4, #3]
   26380:	6833      	ldr	r3, [r6, #0]
   26382:	4640      	mov	r0, r8
   26384:	691b      	ldr	r3, [r3, #16]
   26386:	6063      	str	r3, [r4, #4]
   26388:	6833      	ldr	r3, [r6, #0]
   2638a:	695b      	ldr	r3, [r3, #20]
   2638c:	f8c4 b014 	str.w	fp, [r4, #20]
   26390:	60a3      	str	r3, [r4, #8]
   26392:	4b34      	ldr	r3, [pc, #208]	; (26464 <rpc_transport_ipc_init+0x198>)
   26394:	f8c4 9018 	str.w	r9, [r4, #24]
   26398:	f8c3 8000 	str.w	r8, [r3]
   2639c:	4b32      	ldr	r3, [pc, #200]	; (26468 <rpc_transport_ipc_init+0x19c>)
   2639e:	60e7      	str	r7, [r4, #12]
   263a0:	601f      	str	r7, [r3, #0]
   263a2:	2308      	movs	r3, #8
   263a4:	f8c4 8010 	str.w	r8, [r4, #16]
   263a8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   263ac:	f888 5001 	strb.w	r5, [r8, #1]
   263b0:	f888 5002 	strb.w	r5, [r8, #2]
   263b4:	f888 5003 	strb.w	r5, [r8, #3]
   263b8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   263bc:	707d      	strb	r5, [r7, #1]
   263be:	70bd      	strb	r5, [r7, #2]
   263c0:	70fd      	strb	r5, [r7, #3]
   263c2:	f00d fbd2 	bl	33b6a <rpc_list_preambles_init>
   263c6:	4638      	mov	r0, r7
   263c8:	f00d fbcf 	bl	33b6a <rpc_list_preambles_init>
   263cc:	4b27      	ldr	r3, [pc, #156]	; (2646c <rpc_transport_ipc_init+0x1a0>)
   263ce:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   263d2:	601a      	str	r2, [r3, #0]
   263d4:	4b26      	ldr	r3, [pc, #152]	; (26470 <rpc_transport_ipc_init+0x1a4>)
   263d6:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   263da:	601a      	str	r2, [r3, #0]
   263dc:	6831      	ldr	r1, [r6, #0]
   263de:	4b25      	ldr	r3, [pc, #148]	; (26474 <rpc_transport_ipc_init+0x1a8>)
   263e0:	6019      	str	r1, [r3, #0]
   263e2:	4b25      	ldr	r3, [pc, #148]	; (26478 <rpc_transport_ipc_init+0x1ac>)
   263e4:	4925      	ldr	r1, [pc, #148]	; (2647c <rpc_transport_ipc_init+0x1b0>)
   263e6:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   263ea:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   263ee:	4b24      	ldr	r3, [pc, #144]	; (26480 <rpc_transport_ipc_init+0x1b4>)
   263f0:	4c24      	ldr	r4, [pc, #144]	; (26484 <rpc_transport_ipc_init+0x1b8>)
   263f2:	801d      	strh	r5, [r3, #0]
   263f4:	4b24      	ldr	r3, [pc, #144]	; (26488 <rpc_transport_ipc_init+0x1bc>)
   263f6:	6025      	str	r5, [r4, #0]
   263f8:	801d      	strh	r5, [r3, #0]
   263fa:	4b24      	ldr	r3, [pc, #144]	; (2648c <rpc_transport_ipc_init+0x1c0>)
   263fc:	f883 a000 	strb.w	sl, [r3]
   26400:	4b23      	ldr	r3, [pc, #140]	; (26490 <rpc_transport_ipc_init+0x1c4>)
   26402:	9502      	str	r5, [sp, #8]
   26404:	611d      	str	r5, [r3, #16]
   26406:	691b      	ldr	r3, [r3, #16]
   26408:	9302      	str	r3, [sp, #8]
   2640a:	9b02      	ldr	r3, [sp, #8]
   2640c:	4b12      	ldr	r3, [pc, #72]	; (26458 <rpc_transport_ipc_init+0x18c>)
   2640e:	6818      	ldr	r0, [r3, #0]
   26410:	f7f5 fb1a 	bl	1ba48 <nrf_modem_os_sem_take>
   26414:	b9c8      	cbnz	r0, 2644a <rpc_transport_ipc_init+0x17e>
   26416:	6824      	ldr	r4, [r4, #0]
   26418:	b9a4      	cbnz	r4, 26444 <rpc_transport_ipc_init+0x178>
   2641a:	4b1e      	ldr	r3, [pc, #120]	; (26494 <rpc_transport_ipc_init+0x1c8>)
   2641c:	701c      	strb	r4, [r3, #0]
   2641e:	4620      	mov	r0, r4
   26420:	b015      	add	sp, #84	; 0x54
   26422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26426:	699b      	ldr	r3, [r3, #24]
   26428:	f104 0940 	add.w	r9, r4, #64	; 0x40
   2642c:	6463      	str	r3, [r4, #68]	; 0x44
   2642e:	6833      	ldr	r3, [r6, #0]
   26430:	4648      	mov	r0, r9
   26432:	69db      	ldr	r3, [r3, #28]
   26434:	f8c2 b000 	str.w	fp, [r2]
   26438:	6423      	str	r3, [r4, #64]	; 0x40
   2643a:	f001 fc95 	bl	27d68 <ipc_trace_init>
   2643e:	e797      	b.n	26370 <rpc_transport_ipc_init+0xa4>
   26440:	f06f 0415 	mvn.w	r4, #21
   26444:	f7ff fb54 	bl	25af0 <nrfx_ipc_uninit>
   26448:	e7e9      	b.n	2641e <rpc_transport_ipc_init+0x152>
   2644a:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2644e:	e7f9      	b.n	26444 <rpc_transport_ipc_init+0x178>
   26450:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   26454:	e7e3      	b.n	2641e <rpc_transport_ipc_init+0x152>
   26456:	bf00      	nop
   26458:	20010c0c 	.word	0x20010c0c
   2645c:	000260fd 	.word	0x000260fd
   26460:	20010c08 	.word	0x20010c08
   26464:	20010c1c 	.word	0x20010c1c
   26468:	20010c18 	.word	0x20010c18
   2646c:	20010c14 	.word	0x20010c14
   26470:	20010c10 	.word	0x20010c10
   26474:	20010c04 	.word	0x20010c04
   26478:	4002a000 	.word	0x4002a000
   2647c:	000249f0 	.word	0x000249f0
   26480:	20011052 	.word	0x20011052
   26484:	20010c20 	.word	0x20010c20
   26488:	20011050 	.word	0x20011050
   2648c:	20012873 	.word	0x20012873
   26490:	40005600 	.word	0x40005600
   26494:	20012872 	.word	0x20012872

00026498 <rpc_transport_ipc_ctrl_msg_send>:
   26498:	b570      	push	{r4, r5, r6, lr}
   2649a:	4b16      	ldr	r3, [pc, #88]	; (264f4 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   2649c:	6842      	ldr	r2, [r0, #4]
   2649e:	681b      	ldr	r3, [r3, #0]
   264a0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   264a4:	f042 0201 	orr.w	r2, r2, #1
   264a8:	1ac3      	subs	r3, r0, r3
   264aa:	6042      	str	r2, [r0, #4]
   264ac:	4812      	ldr	r0, [pc, #72]	; (264f8 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   264ae:	4a13      	ldr	r2, [pc, #76]	; (264fc <rpc_transport_ipc_ctrl_msg_send+0x64>)
   264b0:	6801      	ldr	r1, [r0, #0]
   264b2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   264b6:	e8d2 4fdf 	ldaexh	r4, [r2]
   264ba:	1c65      	adds	r5, r4, #1
   264bc:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   264c0:	2e00      	cmp	r6, #0
   264c2:	d1f8      	bne.n	264b6 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   264c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   264c8:	684a      	ldr	r2, [r1, #4]
   264ca:	b292      	uxth	r2, r2
   264cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   264d0:	604a      	str	r2, [r1, #4]
   264d2:	6802      	ldr	r2, [r0, #0]
   264d4:	2003      	movs	r0, #3
   264d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   264da:	6853      	ldr	r3, [r2, #4]
   264dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   264e0:	f043 0301 	orr.w	r3, r3, #1
   264e4:	6053      	str	r3, [r2, #4]
   264e6:	f00c fb65 	bl	32bb4 <nrf_modem_os_busywait>
   264ea:	2201      	movs	r2, #1
   264ec:	4b04      	ldr	r3, [pc, #16]	; (26500 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   264ee:	605a      	str	r2, [r3, #4]
   264f0:	bd70      	pop	{r4, r5, r6, pc}
   264f2:	bf00      	nop
   264f4:	20010c10 	.word	0x20010c10
   264f8:	20010c18 	.word	0x20010c18
   264fc:	20011052 	.word	0x20011052
   26500:	4002a000 	.word	0x4002a000

00026504 <rpc_transport_ipc_request_shutdown>:
   26504:	b510      	push	{r4, lr}
   26506:	f7ff fead 	bl	26264 <rpc_transport_ipc_ctrl_msg_alloc>
   2650a:	2401      	movs	r4, #1
   2650c:	2200      	movs	r2, #0
   2650e:	2103      	movs	r1, #3
   26510:	7004      	strb	r4, [r0, #0]
   26512:	7081      	strb	r1, [r0, #2]
   26514:	7042      	strb	r2, [r0, #1]
   26516:	70c2      	strb	r2, [r0, #3]
   26518:	f7ff ffbe 	bl	26498 <rpc_transport_ipc_ctrl_msg_send>
   2651c:	4b05      	ldr	r3, [pc, #20]	; (26534 <rpc_transport_ipc_request_shutdown+0x30>)
   2651e:	701c      	strb	r4, [r3, #0]
   26520:	f00d fb36 	bl	33b90 <rpc_transport_ipc_data_rx_suspend>
   26524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26528:	4b03      	ldr	r3, [pc, #12]	; (26538 <rpc_transport_ipc_request_shutdown+0x34>)
   2652a:	f247 5130 	movw	r1, #30000	; 0x7530
   2652e:	6818      	ldr	r0, [r3, #0]
   26530:	f7f5 ba8a 	b.w	1ba48 <nrf_modem_os_sem_take>
   26534:	20012872 	.word	0x20012872
   26538:	20010c0c 	.word	0x20010c0c

0002653c <rpc_transport_ipc_msg_data_rx_free>:
   2653c:	b510      	push	{r4, lr}
   2653e:	4b0a      	ldr	r3, [pc, #40]	; (26568 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   26540:	4604      	mov	r4, r0
   26542:	781b      	ldrb	r3, [r3, #0]
   26544:	2b03      	cmp	r3, #3
   26546:	d00e      	beq.n	26566 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   26548:	f7ff fe8c 	bl	26264 <rpc_transport_ipc_ctrl_msg_alloc>
   2654c:	b158      	cbz	r0, 26566 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   2654e:	2101      	movs	r1, #1
   26550:	2200      	movs	r2, #0
   26552:	7001      	strb	r1, [r0, #0]
   26554:	2102      	movs	r1, #2
   26556:	6084      	str	r4, [r0, #8]
   26558:	7042      	strb	r2, [r0, #1]
   2655a:	7081      	strb	r1, [r0, #2]
   2655c:	70c2      	strb	r2, [r0, #3]
   2655e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26562:	f7ff bf99 	b.w	26498 <rpc_transport_ipc_ctrl_msg_send>
   26566:	bd10      	pop	{r4, pc}
   26568:	20012873 	.word	0x20012873

0002656c <at_cmd_send>:
   2656c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26570:	4605      	mov	r5, r0
   26572:	2000      	movs	r0, #0
   26574:	4617      	mov	r7, r2
   26576:	4688      	mov	r8, r1
   26578:	461e      	mov	r6, r3
   2657a:	f00d fb35 	bl	33be8 <rpc_client_msg_alloc>
   2657e:	4602      	mov	r2, r0
   26580:	b940      	cbnz	r0, 26594 <at_cmd_send+0x28>
   26582:	b115      	cbz	r5, 2658a <at_cmd_send+0x1e>
   26584:	4628      	mov	r0, r5
   26586:	f00d fb5e 	bl	33c46 <rpc_client_msg_data_tx_free>
   2658a:	f06f 000b 	mvn.w	r0, #11
   2658e:	b002      	add	sp, #8
   26590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26594:	f06f 0358 	mvn.w	r3, #88	; 0x58
   26598:	2400      	movs	r4, #0
   2659a:	7303      	strb	r3, [r0, #12]
   2659c:	2304      	movs	r3, #4
   2659e:	6005      	str	r5, [r0, #0]
   265a0:	4d0e      	ldr	r5, [pc, #56]	; (265dc <at_cmd_send+0x70>)
   265a2:	7203      	strb	r3, [r0, #8]
   265a4:	7344      	strb	r4, [r0, #13]
   265a6:	7384      	strb	r4, [r0, #14]
   265a8:	73c4      	strb	r4, [r0, #15]
   265aa:	7244      	strb	r4, [r0, #9]
   265ac:	7284      	strb	r4, [r0, #10]
   265ae:	72c4      	strb	r4, [r0, #11]
   265b0:	f8c0 8004 	str.w	r8, [r0, #4]
   265b4:	4639      	mov	r1, r7
   265b6:	2003      	movs	r0, #3
   265b8:	702c      	strb	r4, [r5, #0]
   265ba:	f00d fb31 	bl	33c20 <rpc_client_msg_send>
   265be:	f04f 33ff 	mov.w	r3, #4294967295
   265c2:	9301      	str	r3, [sp, #4]
   265c4:	782b      	ldrb	r3, [r5, #0]
   265c6:	42b3      	cmp	r3, r6
   265c8:	d101      	bne.n	265ce <at_cmd_send+0x62>
   265ca:	2000      	movs	r0, #0
   265cc:	e7df      	b.n	2658e <at_cmd_send+0x22>
   265ce:	2002      	movs	r0, #2
   265d0:	a901      	add	r1, sp, #4
   265d2:	f7f5 f901 	bl	1b7d8 <nrf_modem_os_timedwait>
   265d6:	2800      	cmp	r0, #0
   265d8:	d0f4      	beq.n	265c4 <at_cmd_send+0x58>
   265da:	e7d8      	b.n	2658e <at_cmd_send+0x22>
   265dc:	20012874 	.word	0x20012874

000265e0 <at_response_match>:
   265e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265e2:	4605      	mov	r5, r0
   265e4:	2400      	movs	r4, #0
   265e6:	4f0f      	ldr	r7, [pc, #60]	; (26624 <at_response_match+0x44>)
   265e8:	f857 6b04 	ldr.w	r6, [r7], #4
   265ec:	4628      	mov	r0, r5
   265ee:	4631      	mov	r1, r6
   265f0:	f00e ff07 	bl	35402 <strstr>
   265f4:	b928      	cbnz	r0, 26602 <at_response_match+0x22>
   265f6:	3401      	adds	r4, #1
   265f8:	2c04      	cmp	r4, #4
   265fa:	d1f5      	bne.n	265e8 <at_response_match+0x8>
   265fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   26600:	e00d      	b.n	2661e <at_response_match+0x3e>
   26602:	b16c      	cbz	r4, 26620 <at_response_match+0x40>
   26604:	1ea3      	subs	r3, r4, #2
   26606:	2b01      	cmp	r3, #1
   26608:	d8f8      	bhi.n	265fc <at_response_match+0x1c>
   2660a:	4630      	mov	r0, r6
   2660c:	f7e2 fe85 	bl	931a <strlen>
   26610:	220a      	movs	r2, #10
   26612:	2100      	movs	r1, #0
   26614:	4428      	add	r0, r5
   26616:	f005 ffe1 	bl	2c5dc <strtol>
   2661a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   2661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26620:	4620      	mov	r0, r4
   26622:	e7fc      	b.n	2661e <at_response_match+0x3e>
   26624:	000374c0 	.word	0x000374c0

00026628 <at_vsprintf>:
   26628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2662c:	2500      	movs	r5, #0
   2662e:	4681      	mov	r9, r0
   26630:	460f      	mov	r7, r1
   26632:	4810      	ldr	r0, [pc, #64]	; (26674 <at_vsprintf+0x4c>)
   26634:	4629      	mov	r1, r5
   26636:	4690      	mov	r8, r2
   26638:	461e      	mov	r6, r3
   2663a:	9301      	str	r3, [sp, #4]
   2663c:	f006 f8f2 	bl	2c824 <vsniprintf>
   26640:	1e04      	subs	r4, r0, #0
   26642:	db11      	blt.n	26668 <at_vsprintf+0x40>
   26644:	3401      	adds	r4, #1
   26646:	4620      	mov	r0, r4
   26648:	f00d fafb 	bl	33c42 <rpc_client_msg_data_tx_alloc>
   2664c:	f8c9 0000 	str.w	r0, [r9]
   26650:	b168      	cbz	r0, 2666e <at_vsprintf+0x46>
   26652:	4633      	mov	r3, r6
   26654:	4642      	mov	r2, r8
   26656:	4621      	mov	r1, r4
   26658:	9601      	str	r6, [sp, #4]
   2665a:	f006 f8e3 	bl	2c824 <vsniprintf>
   2665e:	4628      	mov	r0, r5
   26660:	603c      	str	r4, [r7, #0]
   26662:	b003      	add	sp, #12
   26664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26668:	f06f 0015 	mvn.w	r0, #21
   2666c:	e7f9      	b.n	26662 <at_vsprintf+0x3a>
   2666e:	f06f 000b 	mvn.w	r0, #11
   26672:	e7f6      	b.n	26662 <at_vsprintf+0x3a>
   26674:	0003676f 	.word	0x0003676f

00026678 <nrf_modem_at_notif_handler_set>:
   26678:	4b01      	ldr	r3, [pc, #4]	; (26680 <nrf_modem_at_notif_handler_set+0x8>)
   2667a:	6018      	str	r0, [r3, #0]
   2667c:	2000      	movs	r0, #0
   2667e:	4770      	bx	lr
   26680:	20010c38 	.word	0x20010c38

00026684 <nrf_modem_at_printf>:
   26684:	b40f      	push	{r0, r1, r2, r3}
   26686:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   26688:	9c08      	ldr	r4, [sp, #32]
   2668a:	f001 fb65 	bl	27d58 <nrf_modem_state_is_initialized>
   2668e:	2800      	cmp	r0, #0
   26690:	d039      	beq.n	26706 <nrf_modem_at_printf+0x82>
   26692:	2c00      	cmp	r4, #0
   26694:	d03a      	beq.n	2670c <nrf_modem_at_printf+0x88>
   26696:	4622      	mov	r2, r4
   26698:	ab09      	add	r3, sp, #36	; 0x24
   2669a:	a903      	add	r1, sp, #12
   2669c:	a802      	add	r0, sp, #8
   2669e:	9301      	str	r3, [sp, #4]
   266a0:	f7ff ffc2 	bl	26628 <at_vsprintf>
   266a4:	4604      	mov	r4, r0
   266a6:	b960      	cbnz	r0, 266c2 <nrf_modem_at_printf+0x3e>
   266a8:	4e1a      	ldr	r6, [pc, #104]	; (26714 <nrf_modem_at_printf+0x90>)
   266aa:	f04f 31ff 	mov.w	r1, #4294967295
   266ae:	6830      	ldr	r0, [r6, #0]
   266b0:	f7f5 f9ca 	bl	1ba48 <nrf_modem_os_sem_take>
   266b4:	4603      	mov	r3, r0
   266b6:	9802      	ldr	r0, [sp, #8]
   266b8:	b14b      	cbz	r3, 266ce <nrf_modem_at_printf+0x4a>
   266ba:	f00d fac4 	bl	33c46 <rpc_client_msg_data_tx_free>
   266be:	f06f 040a 	mvn.w	r4, #10
   266c2:	4620      	mov	r0, r4
   266c4:	b004      	add	sp, #16
   266c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   266ca:	b004      	add	sp, #16
   266cc:	4770      	bx	lr
   266ce:	2302      	movs	r3, #2
   266d0:	2201      	movs	r2, #1
   266d2:	9903      	ldr	r1, [sp, #12]
   266d4:	f7ff ff4a 	bl	2656c <at_cmd_send>
   266d8:	4604      	mov	r4, r0
   266da:	b118      	cbz	r0, 266e4 <nrf_modem_at_printf+0x60>
   266dc:	6830      	ldr	r0, [r6, #0]
   266de:	f7f5 f98f 	bl	1ba00 <nrf_modem_os_sem_give>
   266e2:	e7ee      	b.n	266c2 <nrf_modem_at_printf+0x3e>
   266e4:	4d0c      	ldr	r5, [pc, #48]	; (26718 <nrf_modem_at_printf+0x94>)
   266e6:	682b      	ldr	r3, [r5, #0]
   266e8:	6818      	ldr	r0, [r3, #0]
   266ea:	f7ff ff79 	bl	265e0 <at_response_match>
   266ee:	4604      	mov	r4, r0
   266f0:	6830      	ldr	r0, [r6, #0]
   266f2:	f7f5 f985 	bl	1ba00 <nrf_modem_os_sem_give>
   266f6:	682b      	ldr	r3, [r5, #0]
   266f8:	6818      	ldr	r0, [r3, #0]
   266fa:	f00d fa9e 	bl	33c3a <rpc_client_msg_data_rx_free>
   266fe:	6828      	ldr	r0, [r5, #0]
   26700:	f00d fa95 	bl	33c2e <rpc_client_msg_rx_free>
   26704:	e7dd      	b.n	266c2 <nrf_modem_at_printf+0x3e>
   26706:	f04f 34ff 	mov.w	r4, #4294967295
   2670a:	e7da      	b.n	266c2 <nrf_modem_at_printf+0x3e>
   2670c:	f06f 040d 	mvn.w	r4, #13
   26710:	e7d7      	b.n	266c2 <nrf_modem_at_printf+0x3e>
   26712:	bf00      	nop
   26714:	20010c40 	.word	0x20010c40
   26718:	20010c3c 	.word	0x20010c3c

0002671c <nrf_modem_at_cmd>:
   2671c:	b40c      	push	{r2, r3}
   2671e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26722:	b085      	sub	sp, #20
   26724:	4606      	mov	r6, r0
   26726:	460d      	mov	r5, r1
   26728:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2672a:	f001 fb15 	bl	27d58 <nrf_modem_state_is_initialized>
   2672e:	2800      	cmp	r0, #0
   26730:	d076      	beq.n	26820 <nrf_modem_at_cmd+0x104>
   26732:	2e00      	cmp	r6, #0
   26734:	d077      	beq.n	26826 <nrf_modem_at_cmd+0x10a>
   26736:	2c00      	cmp	r4, #0
   26738:	d075      	beq.n	26826 <nrf_modem_at_cmd+0x10a>
   2673a:	2d00      	cmp	r5, #0
   2673c:	d076      	beq.n	2682c <nrf_modem_at_cmd+0x110>
   2673e:	4622      	mov	r2, r4
   26740:	ab0d      	add	r3, sp, #52	; 0x34
   26742:	a903      	add	r1, sp, #12
   26744:	a802      	add	r0, sp, #8
   26746:	9301      	str	r3, [sp, #4]
   26748:	f7ff ff6e 	bl	26628 <at_vsprintf>
   2674c:	4604      	mov	r4, r0
   2674e:	bba0      	cbnz	r0, 267ba <nrf_modem_at_cmd+0x9e>
   26750:	4b38      	ldr	r3, [pc, #224]	; (26834 <nrf_modem_at_cmd+0x118>)
   26752:	9f02      	ldr	r7, [sp, #8]
   26754:	f8d3 8000 	ldr.w	r8, [r3]
   26758:	f1b8 0f00 	cmp.w	r8, #0
   2675c:	d00f      	beq.n	2677e <nrf_modem_at_cmd+0x62>
   2675e:	4b36      	ldr	r3, [pc, #216]	; (26838 <nrf_modem_at_cmd+0x11c>)
   26760:	f8d3 9000 	ldr.w	r9, [r3]
   26764:	454c      	cmp	r4, r9
   26766:	d00a      	beq.n	2677e <nrf_modem_at_cmd+0x62>
   26768:	4638      	mov	r0, r7
   2676a:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   2676e:	f00e fe48 	bl	35402 <strstr>
   26772:	b198      	cbz	r0, 2679c <nrf_modem_at_cmd+0x80>
   26774:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   26778:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2677c:	b983      	cbnz	r3, 267a0 <nrf_modem_at_cmd+0x84>
   2677e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2683c <nrf_modem_at_cmd+0x120>
   26782:	f04f 31ff 	mov.w	r1, #4294967295
   26786:	f8d8 0000 	ldr.w	r0, [r8]
   2678a:	f7f5 f95d 	bl	1ba48 <nrf_modem_os_sem_take>
   2678e:	b1d0      	cbz	r0, 267c6 <nrf_modem_at_cmd+0xaa>
   26790:	4638      	mov	r0, r7
   26792:	f00d fa58 	bl	33c46 <rpc_client_msg_data_tx_free>
   26796:	f06f 040a 	mvn.w	r4, #10
   2679a:	e00e      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   2679c:	3401      	adds	r4, #1
   2679e:	e7e1      	b.n	26764 <nrf_modem_at_cmd+0x48>
   267a0:	463a      	mov	r2, r7
   267a2:	4629      	mov	r1, r5
   267a4:	4630      	mov	r0, r6
   267a6:	4798      	blx	r3
   267a8:	4604      	mov	r4, r0
   267aa:	b918      	cbnz	r0, 267b4 <nrf_modem_at_cmd+0x98>
   267ac:	4630      	mov	r0, r6
   267ae:	f7ff ff17 	bl	265e0 <at_response_match>
   267b2:	4604      	mov	r4, r0
   267b4:	4638      	mov	r0, r7
   267b6:	f00d fa46 	bl	33c46 <rpc_client_msg_data_tx_free>
   267ba:	4620      	mov	r0, r4
   267bc:	b005      	add	sp, #20
   267be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   267c2:	b002      	add	sp, #8
   267c4:	4770      	bx	lr
   267c6:	2302      	movs	r3, #2
   267c8:	2201      	movs	r2, #1
   267ca:	4638      	mov	r0, r7
   267cc:	9903      	ldr	r1, [sp, #12]
   267ce:	f7ff fecd 	bl	2656c <at_cmd_send>
   267d2:	4604      	mov	r4, r0
   267d4:	b120      	cbz	r0, 267e0 <nrf_modem_at_cmd+0xc4>
   267d6:	f8d8 0000 	ldr.w	r0, [r8]
   267da:	f7f5 f911 	bl	1ba00 <nrf_modem_os_sem_give>
   267de:	e7ec      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   267e0:	4f17      	ldr	r7, [pc, #92]	; (26840 <nrf_modem_at_cmd+0x124>)
   267e2:	4630      	mov	r0, r6
   267e4:	683c      	ldr	r4, [r7, #0]
   267e6:	6862      	ldr	r2, [r4, #4]
   267e8:	6821      	ldr	r1, [r4, #0]
   267ea:	42aa      	cmp	r2, r5
   267ec:	bf28      	it	cs
   267ee:	462a      	movcs	r2, r5
   267f0:	f00e fbfc 	bl	34fec <memcpy>
   267f4:	6863      	ldr	r3, [r4, #4]
   267f6:	42ab      	cmp	r3, r5
   267f8:	d80f      	bhi.n	2681a <nrf_modem_at_cmd+0xfe>
   267fa:	6820      	ldr	r0, [r4, #0]
   267fc:	f7ff fef0 	bl	265e0 <at_response_match>
   26800:	4604      	mov	r4, r0
   26802:	f8d8 0000 	ldr.w	r0, [r8]
   26806:	f7f5 f8fb 	bl	1ba00 <nrf_modem_os_sem_give>
   2680a:	683b      	ldr	r3, [r7, #0]
   2680c:	6818      	ldr	r0, [r3, #0]
   2680e:	f00d fa14 	bl	33c3a <rpc_client_msg_data_rx_free>
   26812:	6838      	ldr	r0, [r7, #0]
   26814:	f00d fa0b 	bl	33c2e <rpc_client_msg_rx_free>
   26818:	e7cf      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   2681a:	f06f 0406 	mvn.w	r4, #6
   2681e:	e7f0      	b.n	26802 <nrf_modem_at_cmd+0xe6>
   26820:	f04f 34ff 	mov.w	r4, #4294967295
   26824:	e7c9      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   26826:	f06f 040d 	mvn.w	r4, #13
   2682a:	e7c6      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   2682c:	f06f 0415 	mvn.w	r4, #21
   26830:	e7c3      	b.n	267ba <nrf_modem_at_cmd+0x9e>
   26832:	bf00      	nop
   26834:	20010c30 	.word	0x20010c30
   26838:	20010c2c 	.word	0x20010c2c
   2683c:	20010c40 	.word	0x20010c40
   26840:	20010c3c 	.word	0x20010c3c

00026844 <nrf_modem_at_scanf>:
   26844:	b40e      	push	{r1, r2, r3}
   26846:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   26848:	9f07      	ldr	r7, [sp, #28]
   2684a:	4606      	mov	r6, r0
   2684c:	f001 fa84 	bl	27d58 <nrf_modem_state_is_initialized>
   26850:	2800      	cmp	r0, #0
   26852:	d042      	beq.n	268da <nrf_modem_at_scanf+0x96>
   26854:	2e00      	cmp	r6, #0
   26856:	d043      	beq.n	268e0 <nrf_modem_at_scanf+0x9c>
   26858:	2f00      	cmp	r7, #0
   2685a:	d041      	beq.n	268e0 <nrf_modem_at_scanf+0x9c>
   2685c:	4630      	mov	r0, r6
   2685e:	f7e2 fd5c 	bl	931a <strlen>
   26862:	1c45      	adds	r5, r0, #1
   26864:	4628      	mov	r0, r5
   26866:	f00d f9ec 	bl	33c42 <rpc_client_msg_data_tx_alloc>
   2686a:	4604      	mov	r4, r0
   2686c:	2800      	cmp	r0, #0
   2686e:	d03a      	beq.n	268e6 <nrf_modem_at_scanf+0xa2>
   26870:	4631      	mov	r1, r6
   26872:	4e1e      	ldr	r6, [pc, #120]	; (268ec <nrf_modem_at_scanf+0xa8>)
   26874:	462a      	mov	r2, r5
   26876:	f00e fd91 	bl	3539c <strncpy>
   2687a:	f04f 31ff 	mov.w	r1, #4294967295
   2687e:	6830      	ldr	r0, [r6, #0]
   26880:	f7f5 f8e2 	bl	1ba48 <nrf_modem_os_sem_take>
   26884:	b150      	cbz	r0, 2689c <nrf_modem_at_scanf+0x58>
   26886:	4620      	mov	r0, r4
   26888:	f00d f9dd 	bl	33c46 <rpc_client_msg_data_tx_free>
   2688c:	f06f 040a 	mvn.w	r4, #10
   26890:	4620      	mov	r0, r4
   26892:	b002      	add	sp, #8
   26894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26898:	b003      	add	sp, #12
   2689a:	4770      	bx	lr
   2689c:	4620      	mov	r0, r4
   2689e:	2302      	movs	r3, #2
   268a0:	2201      	movs	r2, #1
   268a2:	4629      	mov	r1, r5
   268a4:	f7ff fe62 	bl	2656c <at_cmd_send>
   268a8:	4604      	mov	r4, r0
   268aa:	b990      	cbnz	r0, 268d2 <nrf_modem_at_scanf+0x8e>
   268ac:	4d10      	ldr	r5, [pc, #64]	; (268f0 <nrf_modem_at_scanf+0xac>)
   268ae:	aa08      	add	r2, sp, #32
   268b0:	682b      	ldr	r3, [r5, #0]
   268b2:	4639      	mov	r1, r7
   268b4:	6818      	ldr	r0, [r3, #0]
   268b6:	9201      	str	r2, [sp, #4]
   268b8:	f006 f806 	bl	2c8c8 <vsiscanf>
   268bc:	682b      	ldr	r3, [r5, #0]
   268be:	1e04      	subs	r4, r0, #0
   268c0:	6818      	ldr	r0, [r3, #0]
   268c2:	bf08      	it	eq
   268c4:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   268c8:	f00d f9b7 	bl	33c3a <rpc_client_msg_data_rx_free>
   268cc:	6828      	ldr	r0, [r5, #0]
   268ce:	f00d f9ae 	bl	33c2e <rpc_client_msg_rx_free>
   268d2:	6830      	ldr	r0, [r6, #0]
   268d4:	f7f5 f894 	bl	1ba00 <nrf_modem_os_sem_give>
   268d8:	e7da      	b.n	26890 <nrf_modem_at_scanf+0x4c>
   268da:	f04f 34ff 	mov.w	r4, #4294967295
   268de:	e7d7      	b.n	26890 <nrf_modem_at_scanf+0x4c>
   268e0:	f06f 040d 	mvn.w	r4, #13
   268e4:	e7d4      	b.n	26890 <nrf_modem_at_scanf+0x4c>
   268e6:	f06f 040b 	mvn.w	r4, #11
   268ea:	e7d1      	b.n	26890 <nrf_modem_at_scanf+0x4c>
   268ec:	20010c40 	.word	0x20010c40
   268f0:	20010c3c 	.word	0x20010c3c

000268f4 <rpc_at_event_handler>:
   268f4:	b538      	push	{r3, r4, r5, lr}
   268f6:	68c3      	ldr	r3, [r0, #12]
   268f8:	4604      	mov	r4, r0
   268fa:	2ba7      	cmp	r3, #167	; 0xa7
   268fc:	d003      	beq.n	26906 <rpc_at_event_handler+0x12>
   268fe:	6820      	ldr	r0, [r4, #0]
   26900:	f00d f99b 	bl	33c3a <rpc_client_msg_data_rx_free>
   26904:	e008      	b.n	26918 <rpc_at_event_handler+0x24>
   26906:	2903      	cmp	r1, #3
   26908:	d008      	beq.n	2691c <rpc_at_event_handler+0x28>
   2690a:	2904      	cmp	r1, #4
   2690c:	d021      	beq.n	26952 <rpc_at_event_handler+0x5e>
   2690e:	2902      	cmp	r1, #2
   26910:	bf02      	ittt	eq
   26912:	2201      	moveq	r2, #1
   26914:	4b12      	ldreq	r3, [pc, #72]	; (26960 <rpc_at_event_handler+0x6c>)
   26916:	701a      	strbeq	r2, [r3, #0]
   26918:	2000      	movs	r0, #0
   2691a:	bd38      	pop	{r3, r4, r5, pc}
   2691c:	4d11      	ldr	r5, [pc, #68]	; (26964 <rpc_at_event_handler+0x70>)
   2691e:	682b      	ldr	r3, [r5, #0]
   26920:	b13b      	cbz	r3, 26932 <rpc_at_event_handler+0x3e>
   26922:	6800      	ldr	r0, [r0, #0]
   26924:	4798      	blx	r3
   26926:	2300      	movs	r3, #0
   26928:	6820      	ldr	r0, [r4, #0]
   2692a:	602b      	str	r3, [r5, #0]
   2692c:	f00d f985 	bl	33c3a <rpc_client_msg_data_rx_free>
   26930:	e006      	b.n	26940 <rpc_at_event_handler+0x4c>
   26932:	4b0b      	ldr	r3, [pc, #44]	; (26960 <rpc_at_event_handler+0x6c>)
   26934:	781a      	ldrb	r2, [r3, #0]
   26936:	2a02      	cmp	r2, #2
   26938:	d105      	bne.n	26946 <rpc_at_event_handler+0x52>
   2693a:	6800      	ldr	r0, [r0, #0]
   2693c:	2800      	cmp	r0, #0
   2693e:	d1f5      	bne.n	2692c <rpc_at_event_handler+0x38>
   26940:	2000      	movs	r0, #0
   26942:	b2c0      	uxtb	r0, r0
   26944:	e7e9      	b.n	2691a <rpc_at_event_handler+0x26>
   26946:	4a08      	ldr	r2, [pc, #32]	; (26968 <rpc_at_event_handler+0x74>)
   26948:	6010      	str	r0, [r2, #0]
   2694a:	2202      	movs	r2, #2
   2694c:	2001      	movs	r0, #1
   2694e:	701a      	strb	r2, [r3, #0]
   26950:	e7f7      	b.n	26942 <rpc_at_event_handler+0x4e>
   26952:	4b06      	ldr	r3, [pc, #24]	; (2696c <rpc_at_event_handler+0x78>)
   26954:	681b      	ldr	r3, [r3, #0]
   26956:	2b00      	cmp	r3, #0
   26958:	d0d1      	beq.n	268fe <rpc_at_event_handler+0xa>
   2695a:	6800      	ldr	r0, [r0, #0]
   2695c:	4798      	blx	r3
   2695e:	e7ce      	b.n	268fe <rpc_at_event_handler+0xa>
   26960:	20012874 	.word	0x20012874
   26964:	20010c34 	.word	0x20010c34
   26968:	20010c3c 	.word	0x20010c3c
   2696c:	20010c38 	.word	0x20010c38

00026970 <rpc_at_init>:
   26970:	2201      	movs	r2, #1
   26972:	b510      	push	{r4, lr}
   26974:	4611      	mov	r1, r2
   26976:	4807      	ldr	r0, [pc, #28]	; (26994 <rpc_at_init+0x24>)
   26978:	f7f5 f80e 	bl	1b998 <nrf_modem_os_sem_init>
   2697c:	4601      	mov	r1, r0
   2697e:	b928      	cbnz	r0, 2698c <rpc_at_init+0x1c>
   26980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26984:	2301      	movs	r3, #1
   26986:	2205      	movs	r2, #5
   26988:	f7ff bdf0 	b.w	2656c <at_cmd_send>
   2698c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   26990:	bd10      	pop	{r4, pc}
   26992:	bf00      	nop
   26994:	20010c40 	.word	0x20010c40

00026998 <sock_init>:
   26998:	f44f 7248 	mov.w	r2, #800	; 0x320
   2699c:	2100      	movs	r1, #0
   2699e:	b508      	push	{r3, lr}
   269a0:	4808      	ldr	r0, [pc, #32]	; (269c4 <sock_init+0x2c>)
   269a2:	f00e fb43 	bl	3502c <memset>
   269a6:	2300      	movs	r3, #0
   269a8:	4619      	mov	r1, r3
   269aa:	4a07      	ldr	r2, [pc, #28]	; (269c8 <sock_init+0x30>)
   269ac:	4807      	ldr	r0, [pc, #28]	; (269cc <sock_init+0x34>)
   269ae:	7013      	strb	r3, [r2, #0]
   269b0:	4a04      	ldr	r2, [pc, #16]	; (269c4 <sock_init+0x2c>)
   269b2:	3301      	adds	r3, #1
   269b4:	2b08      	cmp	r3, #8
   269b6:	e9c2 0100 	strd	r0, r1, [r2]
   269ba:	6091      	str	r1, [r2, #8]
   269bc:	f102 0264 	add.w	r2, r2, #100	; 0x64
   269c0:	d1f7      	bne.n	269b2 <sock_init+0x1a>
   269c2:	bd08      	pop	{r3, pc}
   269c4:	20010c44 	.word	0x20010c44
   269c8:	20012875 	.word	0x20012875
   269cc:	1badf11e 	.word	0x1badf11e

000269d0 <sock_open>:
   269d0:	b570      	push	{r4, r5, r6, lr}
   269d2:	2300      	movs	r3, #0
   269d4:	2464      	movs	r4, #100	; 0x64
   269d6:	4a0e      	ldr	r2, [pc, #56]	; (26a10 <sock_open+0x40>)
   269d8:	4d0e      	ldr	r5, [pc, #56]	; (26a14 <sock_open+0x44>)
   269da:	fb04 f103 	mul.w	r1, r4, r3
   269de:	5856      	ldr	r6, [r2, r1]
   269e0:	1888      	adds	r0, r1, r2
   269e2:	42ae      	cmp	r6, r5
   269e4:	d10e      	bne.n	26a04 <sock_open+0x34>
   269e6:	f04f 33ff 	mov.w	r3, #4294967295
   269ea:	5053      	str	r3, [r2, r1]
   269ec:	4a0a      	ldr	r2, [pc, #40]	; (26a18 <sock_open+0x48>)
   269ee:	7f03      	ldrb	r3, [r0, #28]
   269f0:	7812      	ldrb	r2, [r2, #0]
   269f2:	f362 1386 	bfi	r3, r2, #6, #1
   269f6:	7703      	strb	r3, [r0, #28]
   269f8:	2302      	movs	r3, #2
   269fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   269fe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   26a02:	bd70      	pop	{r4, r5, r6, pc}
   26a04:	3301      	adds	r3, #1
   26a06:	2b08      	cmp	r3, #8
   26a08:	d1e7      	bne.n	269da <sock_open+0xa>
   26a0a:	2000      	movs	r0, #0
   26a0c:	e7f9      	b.n	26a02 <sock_open+0x32>
   26a0e:	bf00      	nop
   26a10:	20010c44 	.word	0x20010c44
   26a14:	1badf11e 	.word	0x1badf11e
   26a18:	20012875 	.word	0x20012875

00026a1c <sock_find>:
   26a1c:	b530      	push	{r4, r5, lr}
   26a1e:	4602      	mov	r2, r0
   26a20:	2300      	movs	r3, #0
   26a22:	2564      	movs	r5, #100	; 0x64
   26a24:	4905      	ldr	r1, [pc, #20]	; (26a3c <sock_find+0x20>)
   26a26:	fb05 f403 	mul.w	r4, r5, r3
   26a2a:	1860      	adds	r0, r4, r1
   26a2c:	590c      	ldr	r4, [r1, r4]
   26a2e:	4294      	cmp	r4, r2
   26a30:	d003      	beq.n	26a3a <sock_find+0x1e>
   26a32:	3301      	adds	r3, #1
   26a34:	2b08      	cmp	r3, #8
   26a36:	d1f6      	bne.n	26a26 <sock_find+0xa>
   26a38:	2000      	movs	r0, #0
   26a3a:	bd30      	pop	{r4, r5, pc}
   26a3c:	20010c44 	.word	0x20010c44

00026a40 <_sock_close>:
   26a40:	b538      	push	{r3, r4, r5, lr}
   26a42:	f7ff ffeb 	bl	26a1c <sock_find>
   26a46:	4604      	mov	r4, r0
   26a48:	1d05      	adds	r5, r0, #4
   26a4a:	4628      	mov	r0, r5
   26a4c:	f00d fa85 	bl	33f5a <pkt_flush>
   26a50:	6c20      	ldr	r0, [r4, #64]	; 0x40
   26a52:	b108      	cbz	r0, 26a58 <_sock_close+0x18>
   26a54:	f7f5 f85c 	bl	1bb10 <nrf_modem_os_free>
   26a58:	2260      	movs	r2, #96	; 0x60
   26a5a:	2100      	movs	r1, #0
   26a5c:	4628      	mov	r0, r5
   26a5e:	f00e fae5 	bl	3502c <memset>
   26a62:	4b01      	ldr	r3, [pc, #4]	; (26a68 <_sock_close+0x28>)
   26a64:	6023      	str	r3, [r4, #0]
   26a66:	bd38      	pop	{r3, r4, r5, pc}
   26a68:	1badf11e 	.word	0x1badf11e

00026a6c <sock_shutdown>:
   26a6c:	b570      	push	{r4, r5, r6, lr}
   26a6e:	2400      	movs	r4, #0
   26a70:	4d05      	ldr	r5, [pc, #20]	; (26a88 <sock_shutdown+0x1c>)
   26a72:	4e06      	ldr	r6, [pc, #24]	; (26a8c <sock_shutdown+0x20>)
   26a74:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   26a78:	42b0      	cmp	r0, r6
   26a7a:	d001      	beq.n	26a80 <sock_shutdown+0x14>
   26a7c:	f7ff ffe0 	bl	26a40 <_sock_close>
   26a80:	3419      	adds	r4, #25
   26a82:	2cc8      	cmp	r4, #200	; 0xc8
   26a84:	d1f6      	bne.n	26a74 <sock_shutdown+0x8>
   26a86:	bd70      	pop	{r4, r5, r6, pc}
   26a88:	20010c44 	.word	0x20010c44
   26a8c:	1badf11e 	.word	0x1badf11e

00026a90 <sock_flow_control_set>:
   26a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a94:	1e02      	subs	r2, r0, #0
   26a96:	4c10      	ldr	r4, [pc, #64]	; (26ad8 <sock_flow_control_set+0x48>)
   26a98:	bf18      	it	ne
   26a9a:	2201      	movne	r2, #1
   26a9c:	4606      	mov	r6, r0
   26a9e:	2500      	movs	r5, #0
   26aa0:	46a0      	mov	r8, r4
   26aa2:	f04f 0964 	mov.w	r9, #100	; 0x64
   26aa6:	4b0d      	ldr	r3, [pc, #52]	; (26adc <sock_flow_control_set+0x4c>)
   26aa8:	4f0d      	ldr	r7, [pc, #52]	; (26ae0 <sock_flow_control_set+0x50>)
   26aaa:	701a      	strb	r2, [r3, #0]
   26aac:	6823      	ldr	r3, [r4, #0]
   26aae:	42bb      	cmp	r3, r7
   26ab0:	d00a      	beq.n	26ac8 <sock_flow_control_set+0x38>
   26ab2:	fb09 8305 	mla	r3, r9, r5, r8
   26ab6:	7f1a      	ldrb	r2, [r3, #28]
   26ab8:	f366 1286 	bfi	r2, r6, #6, #1
   26abc:	771a      	strb	r2, [r3, #28]
   26abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26ac0:	b113      	cbz	r3, 26ac8 <sock_flow_control_set+0x38>
   26ac2:	4620      	mov	r0, r4
   26ac4:	f00d f900 	bl	33cc8 <sock_pollcb>
   26ac8:	3501      	adds	r5, #1
   26aca:	2d08      	cmp	r5, #8
   26acc:	f104 0464 	add.w	r4, r4, #100	; 0x64
   26ad0:	d1ec      	bne.n	26aac <sock_flow_control_set+0x1c>
   26ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26ad6:	bf00      	nop
   26ad8:	20010c44 	.word	0x20010c44
   26adc:	20012875 	.word	0x20012875
   26ae0:	1badf11e 	.word	0x1badf11e

00026ae4 <sock_proto_is_valid>:
   26ae4:	2811      	cmp	r0, #17
   26ae6:	dc06      	bgt.n	26af6 <sock_proto_is_valid+0x12>
   26ae8:	2800      	cmp	r0, #0
   26aea:	db0d      	blt.n	26b08 <sock_proto_is_valid+0x24>
   26aec:	4b08      	ldr	r3, [pc, #32]	; (26b10 <sock_proto_is_valid+0x2c>)
   26aee:	40c3      	lsrs	r3, r0
   26af0:	f003 0001 	and.w	r0, r3, #1
   26af4:	4770      	bx	lr
   26af6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   26afa:	d007      	beq.n	26b0c <sock_proto_is_valid+0x28>
   26afc:	f240 1311 	movw	r3, #273	; 0x111
   26b00:	1ac3      	subs	r3, r0, r3
   26b02:	4258      	negs	r0, r3
   26b04:	4158      	adcs	r0, r3
   26b06:	4770      	bx	lr
   26b08:	2000      	movs	r0, #0
   26b0a:	4770      	bx	lr
   26b0c:	2001      	movs	r0, #1
   26b0e:	4770      	bx	lr
   26b10:	00020041 	.word	0x00020041

00026b14 <on_getaddrinfo_res>:
   26b14:	2301      	movs	r3, #1
   26b16:	4a03      	ldr	r2, [pc, #12]	; (26b24 <on_getaddrinfo_res+0x10>)
   26b18:	7013      	strb	r3, [r2, #0]
   26b1a:	4a03      	ldr	r2, [pc, #12]	; (26b28 <on_getaddrinfo_res+0x14>)
   26b1c:	6010      	str	r0, [r2, #0]
   26b1e:	4618      	mov	r0, r3
   26b20:	4770      	bx	lr
   26b22:	bf00      	nop
   26b24:	20012876 	.word	0x20012876
   26b28:	20010f64 	.word	0x20010f64

00026b2c <addrinfo_init>:
   26b2c:	2201      	movs	r2, #1
   26b2e:	b508      	push	{r3, lr}
   26b30:	4611      	mov	r1, r2
   26b32:	4804      	ldr	r0, [pc, #16]	; (26b44 <addrinfo_init+0x18>)
   26b34:	f7f4 ff30 	bl	1b998 <nrf_modem_os_sem_init>
   26b38:	2800      	cmp	r0, #0
   26b3a:	bf18      	it	ne
   26b3c:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   26b40:	bd08      	pop	{r3, pc}
   26b42:	bf00      	nop
   26b44:	20010f68 	.word	0x20010f68

00026b48 <nrf_getaddrinfo>:
   26b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b4c:	b085      	sub	sp, #20
   26b4e:	4682      	mov	sl, r0
   26b50:	460f      	mov	r7, r1
   26b52:	4616      	mov	r6, r2
   26b54:	461d      	mov	r5, r3
   26b56:	f001 f8ff 	bl	27d58 <nrf_modem_state_is_initialized>
   26b5a:	b928      	cbnz	r0, 26b68 <nrf_getaddrinfo+0x20>
   26b5c:	2001      	movs	r0, #1
   26b5e:	f7f4 fefd 	bl	1b95c <nrf_modem_os_errno_set>
   26b62:	f06f 040a 	mvn.w	r4, #10
   26b66:	e01c      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26b68:	ea5a 0307 	orrs.w	r3, sl, r7
   26b6c:	f000 8158 	beq.w	26e20 <nrf_getaddrinfo+0x2d8>
   26b70:	b31e      	cbz	r6, 26bba <nrf_getaddrinfo+0x72>
   26b72:	6833      	ldr	r3, [r6, #0]
   26b74:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   26b78:	f023 0302 	bic.w	r3, r3, #2
   26b7c:	2b00      	cmp	r3, #0
   26b7e:	f040 8152 	bne.w	26e26 <nrf_getaddrinfo+0x2de>
   26b82:	6870      	ldr	r0, [r6, #4]
   26b84:	b938      	cbnz	r0, 26b96 <nrf_getaddrinfo+0x4e>
   26b86:	68b0      	ldr	r0, [r6, #8]
   26b88:	b178      	cbz	r0, 26baa <nrf_getaddrinfo+0x62>
   26b8a:	f00d f983 	bl	33e94 <sock_type_is_valid>
   26b8e:	b960      	cbnz	r0, 26baa <nrf_getaddrinfo+0x62>
   26b90:	f06f 0406 	mvn.w	r4, #6
   26b94:	e005      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26b96:	f00d f977 	bl	33e88 <sock_family_is_valid>
   26b9a:	2800      	cmp	r0, #0
   26b9c:	d1f3      	bne.n	26b86 <nrf_getaddrinfo+0x3e>
   26b9e:	f06f 0405 	mvn.w	r4, #5
   26ba2:	4620      	mov	r0, r4
   26ba4:	b005      	add	sp, #20
   26ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26baa:	68f0      	ldr	r0, [r6, #12]
   26bac:	b128      	cbz	r0, 26bba <nrf_getaddrinfo+0x72>
   26bae:	68b1      	ldr	r1, [r6, #8]
   26bb0:	f00d f976 	bl	33ea0 <sock_proto_supports_type>
   26bb4:	b908      	cbnz	r0, 26bba <nrf_getaddrinfo+0x72>
   26bb6:	206b      	movs	r0, #107	; 0x6b
   26bb8:	e7d1      	b.n	26b5e <nrf_getaddrinfo+0x16>
   26bba:	4b9e      	ldr	r3, [pc, #632]	; (26e34 <nrf_getaddrinfo+0x2ec>)
   26bbc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   26bc0:	6818      	ldr	r0, [r3, #0]
   26bc2:	f7f4 ff41 	bl	1ba48 <nrf_modem_os_sem_take>
   26bc6:	4604      	mov	r4, r0
   26bc8:	2800      	cmp	r0, #0
   26bca:	f040 812f 	bne.w	26e2c <nrf_getaddrinfo+0x2e4>
   26bce:	2f00      	cmp	r7, #0
   26bd0:	d062      	beq.n	26c98 <nrf_getaddrinfo+0x150>
   26bd2:	b1f6      	cbz	r6, 26c12 <nrf_getaddrinfo+0xca>
   26bd4:	6833      	ldr	r3, [r6, #0]
   26bd6:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   26bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   26bde:	d118      	bne.n	26c12 <nrf_getaddrinfo+0xca>
   26be0:	6833      	ldr	r3, [r6, #0]
   26be2:	04db      	lsls	r3, r3, #19
   26be4:	d443      	bmi.n	26c6e <nrf_getaddrinfo+0x126>
   26be6:	f04f 38ff 	mov.w	r8, #4294967295
   26bea:	6870      	ldr	r0, [r6, #4]
   26bec:	b108      	cbz	r0, 26bf2 <nrf_getaddrinfo+0xaa>
   26bee:	f000 fe6b 	bl	278c8 <nrf_af_to_rpc_af>
   26bf2:	4b91      	ldr	r3, [pc, #580]	; (26e38 <nrf_getaddrinfo+0x2f0>)
   26bf4:	4a91      	ldr	r2, [pc, #580]	; (26e3c <nrf_getaddrinfo+0x2f4>)
   26bf6:	6018      	str	r0, [r3, #0]
   26bf8:	68b3      	ldr	r3, [r6, #8]
   26bfa:	2b00      	cmp	r3, #0
   26bfc:	bf08      	it	eq
   26bfe:	2301      	moveq	r3, #1
   26c00:	6013      	str	r3, [r2, #0]
   26c02:	68f3      	ldr	r3, [r6, #12]
   26c04:	4a8e      	ldr	r2, [pc, #568]	; (26e40 <nrf_getaddrinfo+0x2f8>)
   26c06:	2b00      	cmp	r3, #0
   26c08:	bf08      	it	eq
   26c0a:	2306      	moveq	r3, #6
   26c0c:	6013      	str	r3, [r2, #0]
   26c0e:	6833      	ldr	r3, [r6, #0]
   26c10:	e01c      	b.n	26c4c <nrf_getaddrinfo+0x104>
   26c12:	220a      	movs	r2, #10
   26c14:	2100      	movs	r1, #0
   26c16:	4638      	mov	r0, r7
   26c18:	f005 fdfa 	bl	2c810 <strtoul>
   26c1c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   26c20:	1e42      	subs	r2, r0, #1
   26c22:	429a      	cmp	r2, r3
   26c24:	f200 80f9 	bhi.w	26e1a <nrf_getaddrinfo+0x2d2>
   26c28:	4a86      	ldr	r2, [pc, #536]	; (26e44 <nrf_getaddrinfo+0x2fc>)
   26c2a:	0203      	lsls	r3, r0, #8
   26c2c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   26c30:	8013      	strh	r3, [r2, #0]
   26c32:	2e00      	cmp	r6, #0
   26c34:	d1d4      	bne.n	26be0 <nrf_getaddrinfo+0x98>
   26c36:	2300      	movs	r3, #0
   26c38:	2101      	movs	r1, #1
   26c3a:	4a7f      	ldr	r2, [pc, #508]	; (26e38 <nrf_getaddrinfo+0x2f0>)
   26c3c:	f04f 38ff 	mov.w	r8, #4294967295
   26c40:	6013      	str	r3, [r2, #0]
   26c42:	4a7e      	ldr	r2, [pc, #504]	; (26e3c <nrf_getaddrinfo+0x2f4>)
   26c44:	6011      	str	r1, [r2, #0]
   26c46:	2106      	movs	r1, #6
   26c48:	4a7d      	ldr	r2, [pc, #500]	; (26e40 <nrf_getaddrinfo+0x2f8>)
   26c4a:	6011      	str	r1, [r2, #0]
   26c4c:	4f7e      	ldr	r7, [pc, #504]	; (26e48 <nrf_getaddrinfo+0x300>)
   26c4e:	4650      	mov	r0, sl
   26c50:	603b      	str	r3, [r7, #0]
   26c52:	f1ba 0f00 	cmp.w	sl, #0
   26c56:	d16f      	bne.n	26d38 <nrf_getaddrinfo+0x1f0>
   26c58:	f00c ffc6 	bl	33be8 <rpc_client_msg_alloc>
   26c5c:	4606      	mov	r6, r0
   26c5e:	bb00      	cbnz	r0, 26ca2 <nrf_getaddrinfo+0x15a>
   26c60:	f06f 0409 	mvn.w	r4, #9
   26c64:	4b73      	ldr	r3, [pc, #460]	; (26e34 <nrf_getaddrinfo+0x2ec>)
   26c66:	6818      	ldr	r0, [r3, #0]
   26c68:	f7f4 feca 	bl	1ba00 <nrf_modem_os_sem_give>
   26c6c:	e799      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26c6e:	213a      	movs	r1, #58	; 0x3a
   26c70:	4638      	mov	r0, r7
   26c72:	f00e fb6c 	bl	3534e <strchr>
   26c76:	b100      	cbz	r0, 26c7a <nrf_getaddrinfo+0x132>
   26c78:	1c47      	adds	r7, r0, #1
   26c7a:	4638      	mov	r0, r7
   26c7c:	4973      	ldr	r1, [pc, #460]	; (26e4c <nrf_getaddrinfo+0x304>)
   26c7e:	f00e fbc0 	bl	35402 <strstr>
   26c82:	220a      	movs	r2, #10
   26c84:	b128      	cbz	r0, 26c92 <nrf_getaddrinfo+0x14a>
   26c86:	2100      	movs	r1, #0
   26c88:	3003      	adds	r0, #3
   26c8a:	f005 fca7 	bl	2c5dc <strtol>
   26c8e:	4680      	mov	r8, r0
   26c90:	e7ab      	b.n	26bea <nrf_getaddrinfo+0xa2>
   26c92:	4601      	mov	r1, r0
   26c94:	4638      	mov	r0, r7
   26c96:	e7f8      	b.n	26c8a <nrf_getaddrinfo+0x142>
   26c98:	4b6a      	ldr	r3, [pc, #424]	; (26e44 <nrf_getaddrinfo+0x2fc>)
   26c9a:	8018      	strh	r0, [r3, #0]
   26c9c:	2e00      	cmp	r6, #0
   26c9e:	d0ca      	beq.n	26c36 <nrf_getaddrinfo+0xee>
   26ca0:	e7a1      	b.n	26be6 <nrf_getaddrinfo+0x9e>
   26ca2:	f8c0 8010 	str.w	r8, [r0, #16]
   26ca6:	4b64      	ldr	r3, [pc, #400]	; (26e38 <nrf_getaddrinfo+0x2f0>)
   26ca8:	f8df b190 	ldr.w	fp, [pc, #400]	; 26e3c <nrf_getaddrinfo+0x2f4>
   26cac:	681b      	ldr	r3, [r3, #0]
   26cae:	f8df a190 	ldr.w	sl, [pc, #400]	; 26e40 <nrf_getaddrinfo+0x2f8>
   26cb2:	61b3      	str	r3, [r6, #24]
   26cb4:	f8db 3000 	ldr.w	r3, [fp]
   26cb8:	4632      	mov	r2, r6
   26cba:	61f3      	str	r3, [r6, #28]
   26cbc:	f8da 3000 	ldr.w	r3, [sl]
   26cc0:	f247 010d 	movw	r1, #28685	; 0x700d
   26cc4:	6233      	str	r3, [r6, #32]
   26cc6:	683b      	ldr	r3, [r7, #0]
   26cc8:	2004      	movs	r0, #4
   26cca:	6173      	str	r3, [r6, #20]
   26ccc:	f00c ffa8 	bl	33c20 <rpc_client_msg_send>
   26cd0:	2300      	movs	r3, #0
   26cd2:	4e5f      	ldr	r6, [pc, #380]	; (26e50 <nrf_getaddrinfo+0x308>)
   26cd4:	7033      	strb	r3, [r6, #0]
   26cd6:	f04f 33ff 	mov.w	r3, #4294967295
   26cda:	9303      	str	r3, [sp, #12]
   26cdc:	7833      	ldrb	r3, [r6, #0]
   26cde:	2b01      	cmp	r3, #1
   26ce0:	d13c      	bne.n	26d5c <nrf_getaddrinfo+0x214>
   26ce2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 26e54 <nrf_getaddrinfo+0x30c>
   26ce6:	f8d8 3000 	ldr.w	r3, [r8]
   26cea:	6958      	ldr	r0, [r3, #20]
   26cec:	2800      	cmp	r0, #0
   26cee:	f040 8090 	bne.w	26e12 <nrf_getaddrinfo+0x2ca>
   26cf2:	2020      	movs	r0, #32
   26cf4:	f8d3 9000 	ldr.w	r9, [r3]
   26cf8:	f7f4 ff02 	bl	1bb00 <nrf_modem_os_alloc>
   26cfc:	6028      	str	r0, [r5, #0]
   26cfe:	b170      	cbz	r0, 26d1e <nrf_getaddrinfo+0x1d6>
   26d00:	f109 0318 	add.w	r3, r9, #24
   26d04:	4a4f      	ldr	r2, [pc, #316]	; (26e44 <nrf_getaddrinfo+0x2fc>)
   26d06:	9301      	str	r3, [sp, #4]
   26d08:	4618      	mov	r0, r3
   26d0a:	8812      	ldrh	r2, [r2, #0]
   26d0c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   26d10:	f00c ffa1 	bl	33c56 <sockaddr_init>
   26d14:	4606      	mov	r6, r0
   26d16:	bb68      	cbnz	r0, 26d74 <nrf_getaddrinfo+0x22c>
   26d18:	6828      	ldr	r0, [r5, #0]
   26d1a:	f7f4 fef9 	bl	1bb10 <nrf_modem_os_free>
   26d1e:	f06f 0409 	mvn.w	r4, #9
   26d22:	f8d8 3000 	ldr.w	r3, [r8]
   26d26:	6818      	ldr	r0, [r3, #0]
   26d28:	b108      	cbz	r0, 26d2e <nrf_getaddrinfo+0x1e6>
   26d2a:	f00c ff86 	bl	33c3a <rpc_client_msg_data_rx_free>
   26d2e:	f8d8 0000 	ldr.w	r0, [r8]
   26d32:	f00c ff7c 	bl	33c2e <rpc_client_msg_rx_free>
   26d36:	e795      	b.n	26c64 <nrf_getaddrinfo+0x11c>
   26d38:	f7e2 faef 	bl	931a <strlen>
   26d3c:	f00c ff54 	bl	33be8 <rpc_client_msg_alloc>
   26d40:	4606      	mov	r6, r0
   26d42:	2800      	cmp	r0, #0
   26d44:	d08c      	beq.n	26c60 <nrf_getaddrinfo+0x118>
   26d46:	f8c0 8010 	str.w	r8, [r0, #16]
   26d4a:	4650      	mov	r0, sl
   26d4c:	f7e2 fae5 	bl	931a <strlen>
   26d50:	4651      	mov	r1, sl
   26d52:	4602      	mov	r2, r0
   26d54:	6830      	ldr	r0, [r6, #0]
   26d56:	f00e f949 	bl	34fec <memcpy>
   26d5a:	e7a4      	b.n	26ca6 <nrf_getaddrinfo+0x15e>
   26d5c:	2002      	movs	r0, #2
   26d5e:	a903      	add	r1, sp, #12
   26d60:	f7f4 fd3a 	bl	1b7d8 <nrf_modem_os_timedwait>
   26d64:	2800      	cmp	r0, #0
   26d66:	d0b9      	beq.n	26cdc <nrf_getaddrinfo+0x194>
   26d68:	206e      	movs	r0, #110	; 0x6e
   26d6a:	f7f4 fdf7 	bl	1b95c <nrf_modem_os_errno_set>
   26d6e:	f06f 040a 	mvn.w	r4, #10
   26d72:	e777      	b.n	26c64 <nrf_getaddrinfo+0x11c>
   26d74:	f8d9 2008 	ldr.w	r2, [r9, #8]
   26d78:	2a01      	cmp	r2, #1
   26d7a:	d004      	beq.n	26d86 <nrf_getaddrinfo+0x23e>
   26d7c:	2a02      	cmp	r2, #2
   26d7e:	d01a      	beq.n	26db6 <nrf_getaddrinfo+0x26e>
   26d80:	f06f 0405 	mvn.w	r4, #5
   26d84:	e7cd      	b.n	26d22 <nrf_getaddrinfo+0x1da>
   26d86:	2110      	movs	r1, #16
   26d88:	682a      	ldr	r2, [r5, #0]
   26d8a:	6111      	str	r1, [r2, #16]
   26d8c:	683a      	ldr	r2, [r7, #0]
   26d8e:	6829      	ldr	r1, [r5, #0]
   26d90:	f012 0202 	ands.w	r2, r2, #2
   26d94:	d03b      	beq.n	26e0e <nrf_getaddrinfo+0x2c6>
   26d96:	9101      	str	r1, [sp, #4]
   26d98:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   26d9c:	3001      	adds	r0, #1
   26d9e:	f7f4 feaf 	bl	1bb00 <nrf_modem_os_alloc>
   26da2:	9901      	ldr	r1, [sp, #4]
   26da4:	6188      	str	r0, [r1, #24]
   26da6:	682a      	ldr	r2, [r5, #0]
   26da8:	6990      	ldr	r0, [r2, #24]
   26daa:	b938      	cbnz	r0, 26dbc <nrf_getaddrinfo+0x274>
   26dac:	4628      	mov	r0, r5
   26dae:	f7f4 feaf 	bl	1bb10 <nrf_modem_os_free>
   26db2:	4630      	mov	r0, r6
   26db4:	e7b1      	b.n	26d1a <nrf_getaddrinfo+0x1d2>
   26db6:	2124      	movs	r1, #36	; 0x24
   26db8:	682a      	ldr	r2, [r5, #0]
   26dba:	e7e6      	b.n	26d8a <nrf_getaddrinfo+0x242>
   26dbc:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   26dc0:	f109 0318 	add.w	r3, r9, #24
   26dc4:	440b      	add	r3, r1
   26dc6:	4619      	mov	r1, r3
   26dc8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   26dcc:	f00e f90e 	bl	34fec <memcpy>
   26dd0:	2000      	movs	r0, #0
   26dd2:	6829      	ldr	r1, [r5, #0]
   26dd4:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   26dd8:	6989      	ldr	r1, [r1, #24]
   26dda:	5488      	strb	r0, [r1, r2]
   26ddc:	682a      	ldr	r2, [r5, #0]
   26dde:	9201      	str	r2, [sp, #4]
   26de0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   26de4:	f00d fcaa 	bl	3473c <rpc_af_to_nrf_af>
   26de8:	9a01      	ldr	r2, [sp, #4]
   26dea:	6050      	str	r0, [r2, #4]
   26dec:	682b      	ldr	r3, [r5, #0]
   26dee:	f8db 2000 	ldr.w	r2, [fp]
   26df2:	609a      	str	r2, [r3, #8]
   26df4:	682b      	ldr	r3, [r5, #0]
   26df6:	f8da 2000 	ldr.w	r2, [sl]
   26dfa:	60da      	str	r2, [r3, #12]
   26dfc:	682b      	ldr	r3, [r5, #0]
   26dfe:	683a      	ldr	r2, [r7, #0]
   26e00:	601a      	str	r2, [r3, #0]
   26e02:	2200      	movs	r2, #0
   26e04:	682b      	ldr	r3, [r5, #0]
   26e06:	615e      	str	r6, [r3, #20]
   26e08:	682b      	ldr	r3, [r5, #0]
   26e0a:	61da      	str	r2, [r3, #28]
   26e0c:	e789      	b.n	26d22 <nrf_getaddrinfo+0x1da>
   26e0e:	618a      	str	r2, [r1, #24]
   26e10:	e7e4      	b.n	26ddc <nrf_getaddrinfo+0x294>
   26e12:	f00d fcd9 	bl	347c8 <rpc_error_to_nrf_gai_errno>
   26e16:	4604      	mov	r4, r0
   26e18:	e783      	b.n	26d22 <nrf_getaddrinfo+0x1da>
   26e1a:	f06f 0407 	mvn.w	r4, #7
   26e1e:	e721      	b.n	26c64 <nrf_getaddrinfo+0x11c>
   26e20:	f06f 0401 	mvn.w	r4, #1
   26e24:	e6bd      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26e26:	f04f 34ff 	mov.w	r4, #4294967295
   26e2a:	e6ba      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26e2c:	f06f 0402 	mvn.w	r4, #2
   26e30:	e6b7      	b.n	26ba2 <nrf_getaddrinfo+0x5a>
   26e32:	bf00      	nop
   26e34:	20010f68 	.word	0x20010f68
   26e38:	20010f74 	.word	0x20010f74
   26e3c:	20010f70 	.word	0x20010f70
   26e40:	20010f6c 	.word	0x20010f6c
   26e44:	20011054 	.word	0x20011054
   26e48:	20010f78 	.word	0x20010f78
   26e4c:	000403af 	.word	0x000403af
   26e50:	20012876 	.word	0x20012876
   26e54:	20010f64 	.word	0x20010f64

00026e58 <rpc_ip_event_handler>:
   26e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e5a:	f248 030f 	movw	r3, #32783	; 0x800f
   26e5e:	4299      	cmp	r1, r3
   26e60:	4606      	mov	r6, r0
   26e62:	460d      	mov	r5, r1
   26e64:	d03b      	beq.n	26ede <rpc_ip_event_handler+0x86>
   26e66:	d822      	bhi.n	26eae <rpc_ip_event_handler+0x56>
   26e68:	f248 030d 	movw	r3, #32781	; 0x800d
   26e6c:	4299      	cmp	r1, r3
   26e6e:	d02f      	beq.n	26ed0 <rpc_ip_event_handler+0x78>
   26e70:	f248 030e 	movw	r3, #32782	; 0x800e
   26e74:	4299      	cmp	r1, r3
   26e76:	d02f      	beq.n	26ed8 <rpc_ip_event_handler+0x80>
   26e78:	6900      	ldr	r0, [r0, #16]
   26e7a:	f7ff fdcf 	bl	26a1c <sock_find>
   26e7e:	4604      	mov	r4, r0
   26e80:	b308      	cbz	r0, 26ec6 <rpc_ip_event_handler+0x6e>
   26e82:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   26e86:	d91e      	bls.n	26ec6 <rpc_ip_event_handler+0x6e>
   26e88:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   26e8c:	3d01      	subs	r5, #1
   26e8e:	2d0b      	cmp	r5, #11
   26e90:	d819      	bhi.n	26ec6 <rpc_ip_event_handler+0x6e>
   26e92:	e8df f015 	tbh	[pc, r5, lsl #1]
   26e96:	0090      	.short	0x0090
   26e98:	009400b3 	.word	0x009400b3
   26e9c:	00940094 	.word	0x00940094
   26ea0:	00ee00ee 	.word	0x00ee00ee
   26ea4:	00990094 	.word	0x00990094
   26ea8:	00180018 	.word	0x00180018
   26eac:	00d2      	.short	0x00d2
   26eae:	f249 0304 	movw	r3, #36868	; 0x9004
   26eb2:	4299      	cmp	r1, r3
   26eb4:	d016      	beq.n	26ee4 <rpc_ip_event_handler+0x8c>
   26eb6:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   26eba:	d924      	bls.n	26f06 <rpc_ip_event_handler+0xae>
   26ebc:	68c0      	ldr	r0, [r0, #12]
   26ebe:	f7ff fdad 	bl	26a1c <sock_find>
   26ec2:	4604      	mov	r4, r0
   26ec4:	bb70      	cbnz	r0, 26f24 <rpc_ip_event_handler+0xcc>
   26ec6:	6830      	ldr	r0, [r6, #0]
   26ec8:	b1b0      	cbz	r0, 26ef8 <rpc_ip_event_handler+0xa0>
   26eca:	f00c feb6 	bl	33c3a <rpc_client_msg_data_rx_free>
   26ece:	e013      	b.n	26ef8 <rpc_ip_event_handler+0xa0>
   26ed0:	f7ff fe20 	bl	26b14 <on_getaddrinfo_res>
   26ed4:	b2c0      	uxtb	r0, r0
   26ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26ed8:	f00d f860 	bl	33f9c <on_getifaddrs_res>
   26edc:	e7fa      	b.n	26ed4 <rpc_ip_event_handler+0x7c>
   26ede:	f00d f84a 	bl	33f76 <on_conf_dnssrv_res>
   26ee2:	e7f7      	b.n	26ed4 <rpc_ip_event_handler+0x7c>
   26ee4:	6903      	ldr	r3, [r0, #16]
   26ee6:	2b03      	cmp	r3, #3
   26ee8:	d806      	bhi.n	26ef8 <rpc_ip_event_handler+0xa0>
   26eea:	e8df f003 	tbb	[pc, r3]
   26eee:	0a02      	.short	0x0a02
   26ef0:	0702      	.short	0x0702
   26ef2:	2000      	movs	r0, #0
   26ef4:	f7ff fdcc 	bl	26a90 <sock_flow_control_set>
   26ef8:	2000      	movs	r0, #0
   26efa:	e7ec      	b.n	26ed6 <rpc_ip_event_handler+0x7e>
   26efc:	2201      	movs	r2, #1
   26efe:	4b65      	ldr	r3, [pc, #404]	; (27094 <rpc_ip_event_handler+0x23c>)
   26f00:	701a      	strb	r2, [r3, #0]
   26f02:	2001      	movs	r0, #1
   26f04:	e7f6      	b.n	26ef4 <rpc_ip_event_handler+0x9c>
   26f06:	6900      	ldr	r0, [r0, #16]
   26f08:	f7ff fd88 	bl	26a1c <sock_find>
   26f0c:	4604      	mov	r4, r0
   26f0e:	2800      	cmp	r0, #0
   26f10:	d0d9      	beq.n	26ec6 <rpc_ip_event_handler+0x6e>
   26f12:	f248 0381 	movw	r3, #32897	; 0x8081
   26f16:	429d      	cmp	r5, r3
   26f18:	d1d5      	bne.n	26ec6 <rpc_ip_event_handler+0x6e>
   26f1a:	4601      	mov	r1, r0
   26f1c:	4630      	mov	r0, r6
   26f1e:	f000 fc2d 	bl	2777c <on_tls_attach_res>
   26f22:	e04f      	b.n	26fc4 <rpc_ip_event_handler+0x16c>
   26f24:	f249 0302 	movw	r3, #36866	; 0x9002
   26f28:	429d      	cmp	r5, r3
   26f2a:	f000 809e 	beq.w	2706a <rpc_ip_event_handler+0x212>
   26f2e:	d835      	bhi.n	26f9c <rpc_ip_event_handler+0x144>
   26f30:	f00c ff45 	bl	33dbe <sock_has_stream_error>
   26f34:	4607      	mov	r7, r0
   26f36:	b9e0      	cbnz	r0, 26f72 <rpc_ip_event_handler+0x11a>
   26f38:	2010      	movs	r0, #16
   26f3a:	f7f4 fde1 	bl	1bb00 <nrf_modem_os_alloc>
   26f3e:	4605      	mov	r5, r0
   26f40:	b1b8      	cbz	r0, 26f72 <rpc_ip_event_handler+0x11a>
   26f42:	4639      	mov	r1, r7
   26f44:	2210      	movs	r2, #16
   26f46:	f00e f871 	bl	3502c <memset>
   26f4a:	6833      	ldr	r3, [r6, #0]
   26f4c:	606b      	str	r3, [r5, #4]
   26f4e:	6873      	ldr	r3, [r6, #4]
   26f50:	812b      	strh	r3, [r5, #8]
   26f52:	8a71      	ldrh	r1, [r6, #18]
   26f54:	2900      	cmp	r1, #0
   26f56:	f000 8097 	beq.w	27088 <rpc_ip_event_handler+0x230>
   26f5a:	8a32      	ldrh	r2, [r6, #16]
   26f5c:	f106 0014 	add.w	r0, r6, #20
   26f60:	f00c fe79 	bl	33c56 <sockaddr_init>
   26f64:	60e8      	str	r0, [r5, #12]
   26f66:	2800      	cmp	r0, #0
   26f68:	f040 808e 	bne.w	27088 <rpc_ip_event_handler+0x230>
   26f6c:	4628      	mov	r0, r5
   26f6e:	f7f4 fdcf 	bl	1bb10 <nrf_modem_os_free>
   26f72:	6830      	ldr	r0, [r6, #0]
   26f74:	f00c fe61 	bl	33c3a <rpc_client_msg_data_rx_free>
   26f78:	4620      	mov	r0, r4
   26f7a:	f00c fee2 	bl	33d42 <sock_is_stream>
   26f7e:	b148      	cbz	r0, 26f94 <rpc_ip_event_handler+0x13c>
   26f80:	4620      	mov	r0, r4
   26f82:	f00c ff1c 	bl	33dbe <sock_has_stream_error>
   26f86:	b928      	cbnz	r0, 26f94 <rpc_ip_event_handler+0x13c>
   26f88:	230c      	movs	r3, #12
   26f8a:	61a3      	str	r3, [r4, #24]
   26f8c:	7f23      	ldrb	r3, [r4, #28]
   26f8e:	f063 037e 	orn	r3, r3, #126	; 0x7e
   26f92:	7723      	strb	r3, [r4, #28]
   26f94:	4620      	mov	r0, r4
   26f96:	f00c fed9 	bl	33d4c <sock_is_datagram>
   26f9a:	e025      	b.n	26fe8 <rpc_ip_event_handler+0x190>
   26f9c:	f249 0303 	movw	r3, #36867	; 0x9003
   26fa0:	429d      	cmp	r5, r3
   26fa2:	d018      	beq.n	26fd6 <rpc_ip_event_handler+0x17e>
   26fa4:	f249 0382 	movw	r3, #36994	; 0x9082
   26fa8:	429d      	cmp	r5, r3
   26faa:	d18c      	bne.n	26ec6 <rpc_ip_event_handler+0x6e>
   26fac:	4601      	mov	r1, r0
   26fae:	4630      	mov	r0, r6
   26fb0:	f000 fbf8 	bl	277a4 <on_tls_handshake_ntf>
   26fb4:	e006      	b.n	26fc4 <rpc_ip_event_handler+0x16c>
   26fb6:	6973      	ldr	r3, [r6, #20]
   26fb8:	b90b      	cbnz	r3, 26fbe <rpc_ip_event_handler+0x166>
   26fba:	69b3      	ldr	r3, [r6, #24]
   26fbc:	6003      	str	r3, [r0, #0]
   26fbe:	4630      	mov	r0, r6
   26fc0:	f00d fc4c 	bl	3485c <res_forward>
   26fc4:	4605      	mov	r5, r0
   26fc6:	e010      	b.n	26fea <rpc_ip_event_handler+0x192>
   26fc8:	7f03      	ldrb	r3, [r0, #28]
   26fca:	f023 0303 	bic.w	r3, r3, #3
   26fce:	f043 0303 	orr.w	r3, r3, #3
   26fd2:	7703      	strb	r3, [r0, #28]
   26fd4:	e7f3      	b.n	26fbe <rpc_ip_event_handler+0x166>
   26fd6:	7f03      	ldrb	r3, [r0, #28]
   26fd8:	f043 0301 	orr.w	r3, r3, #1
   26fdc:	7703      	strb	r3, [r0, #28]
   26fde:	6930      	ldr	r0, [r6, #16]
   26fe0:	2869      	cmp	r0, #105	; 0x69
   26fe2:	d112      	bne.n	2700a <rpc_ip_event_handler+0x1b2>
   26fe4:	2368      	movs	r3, #104	; 0x68
   26fe6:	61a3      	str	r3, [r4, #24]
   26fe8:	2500      	movs	r5, #0
   26fea:	4620      	mov	r0, r4
   26fec:	f00c fef5 	bl	33dda <sock_has_pollcb>
   26ff0:	b110      	cbz	r0, 26ff8 <rpc_ip_event_handler+0x1a0>
   26ff2:	4620      	mov	r0, r4
   26ff4:	f00c fe68 	bl	33cc8 <sock_pollcb>
   26ff8:	b2e8      	uxtb	r0, r5
   26ffa:	e76c      	b.n	26ed6 <rpc_ip_event_handler+0x7e>
   26ffc:	7f03      	ldrb	r3, [r0, #28]
   26ffe:	68f5      	ldr	r5, [r6, #12]
   27000:	f36f 0382 	bfc	r3, #2, #1
   27004:	7703      	strb	r3, [r0, #28]
   27006:	6970      	ldr	r0, [r6, #20]
   27008:	b118      	cbz	r0, 27012 <rpc_ip_event_handler+0x1ba>
   2700a:	f000 fc71 	bl	278f0 <rpc_error_to_nrf_errno>
   2700e:	61a0      	str	r0, [r4, #24]
   27010:	e7ea      	b.n	26fe8 <rpc_ip_event_handler+0x190>
   27012:	4620      	mov	r0, r4
   27014:	f00c fea4 	bl	33d60 <sock_proto_is_secure>
   27018:	b918      	cbnz	r0, 27022 <rpc_ip_event_handler+0x1ca>
   2701a:	7f23      	ldrb	r3, [r4, #28]
   2701c:	f043 0308 	orr.w	r3, r3, #8
   27020:	7723      	strb	r3, [r4, #28]
   27022:	4620      	mov	r0, r4
   27024:	f00c fe9c 	bl	33d60 <sock_proto_is_secure>
   27028:	2800      	cmp	r0, #0
   2702a:	d0cb      	beq.n	26fc4 <rpc_ip_event_handler+0x16c>
   2702c:	2d00      	cmp	r5, #0
   2702e:	d0dc      	beq.n	26fea <rpc_ip_event_handler+0x192>
   27030:	2100      	movs	r1, #0
   27032:	4620      	mov	r0, r4
   27034:	f000 fbd0 	bl	277d8 <tls_attach>
   27038:	e7d6      	b.n	26fe8 <rpc_ip_event_handler+0x190>
   2703a:	7f43      	ldrb	r3, [r0, #29]
   2703c:	3b01      	subs	r3, #1
   2703e:	7743      	strb	r3, [r0, #29]
   27040:	6973      	ldr	r3, [r6, #20]
   27042:	2b00      	cmp	r3, #0
   27044:	d1bb      	bne.n	26fbe <rpc_ip_event_handler+0x166>
   27046:	4630      	mov	r0, r6
   27048:	f00d fc06 	bl	34858 <res_cookie_get>
   2704c:	69b2      	ldr	r2, [r6, #24]
   2704e:	6843      	ldr	r3, [r0, #4]
   27050:	601a      	str	r2, [r3, #0]
   27052:	6842      	ldr	r2, [r0, #4]
   27054:	7f13      	ldrb	r3, [r2, #28]
   27056:	f043 0308 	orr.w	r3, r3, #8
   2705a:	7713      	strb	r3, [r2, #28]
   2705c:	6843      	ldr	r3, [r0, #4]
   2705e:	6922      	ldr	r2, [r4, #16]
   27060:	611a      	str	r2, [r3, #16]
   27062:	6843      	ldr	r3, [r0, #4]
   27064:	6962      	ldr	r2, [r4, #20]
   27066:	615a      	str	r2, [r3, #20]
   27068:	e7a9      	b.n	26fbe <rpc_ip_event_handler+0x166>
   2706a:	7f43      	ldrb	r3, [r0, #29]
   2706c:	3301      	adds	r3, #1
   2706e:	7743      	strb	r3, [r0, #29]
   27070:	e7ba      	b.n	26fe8 <rpc_ip_event_handler+0x190>
   27072:	4630      	mov	r0, r6
   27074:	f00d fbf0 	bl	34858 <res_cookie_get>
   27078:	6973      	ldr	r3, [r6, #20]
   2707a:	b913      	cbnz	r3, 27082 <rpc_ip_event_handler+0x22a>
   2707c:	69b3      	ldr	r3, [r6, #24]
   2707e:	6043      	str	r3, [r0, #4]
   27080:	e79d      	b.n	26fbe <rpc_ip_event_handler+0x166>
   27082:	f04f 33ff 	mov.w	r3, #4294967295
   27086:	e7fa      	b.n	2707e <rpc_ip_event_handler+0x226>
   27088:	4629      	mov	r1, r5
   2708a:	4620      	mov	r0, r4
   2708c:	f00c fe39 	bl	33d02 <sock_pkt_append>
   27090:	e7aa      	b.n	26fe8 <rpc_ip_event_handler+0x190>
   27092:	bf00      	nop
   27094:	20012877 	.word	0x20012877

00027098 <nrf_close>:
   27098:	b570      	push	{r4, r5, r6, lr}
   2709a:	4604      	mov	r4, r0
   2709c:	f7ff fcbe 	bl	26a1c <sock_find>
   270a0:	4605      	mov	r5, r0
   270a2:	b930      	cbnz	r0, 270b2 <nrf_close+0x1a>
   270a4:	2009      	movs	r0, #9
   270a6:	f7f4 fc59 	bl	1b95c <nrf_modem_os_errno_set>
   270aa:	f04f 36ff 	mov.w	r6, #4294967295
   270ae:	4630      	mov	r0, r6
   270b0:	bd70      	pop	{r4, r5, r6, pc}
   270b2:	f000 fe51 	bl	27d58 <nrf_modem_state_is_initialized>
   270b6:	b960      	cbnz	r0, 270d2 <nrf_close+0x3a>
   270b8:	2600      	movs	r6, #0
   270ba:	4628      	mov	r0, r5
   270bc:	f00c fe64 	bl	33d88 <sock_is_attaching>
   270c0:	b118      	cbz	r0, 270ca <nrf_close+0x32>
   270c2:	4b0e      	ldr	r3, [pc, #56]	; (270fc <nrf_close+0x64>)
   270c4:	6818      	ldr	r0, [r3, #0]
   270c6:	f7f4 fc9b 	bl	1ba00 <nrf_modem_os_sem_give>
   270ca:	4620      	mov	r0, r4
   270cc:	f7ff fcb8 	bl	26a40 <_sock_close>
   270d0:	e7ed      	b.n	270ae <nrf_close+0x16>
   270d2:	2000      	movs	r0, #0
   270d4:	f00c fd88 	bl	33be8 <rpc_client_msg_alloc>
   270d8:	4601      	mov	r1, r0
   270da:	b908      	cbnz	r0, 270e0 <nrf_close+0x48>
   270dc:	2069      	movs	r0, #105	; 0x69
   270de:	e7e2      	b.n	270a6 <nrf_close+0xe>
   270e0:	6104      	str	r4, [r0, #16]
   270e2:	f247 0009 	movw	r0, #28681	; 0x7009
   270e6:	f00d fb89 	bl	347fc <req_forward>
   270ea:	2800      	cmp	r0, #0
   270ec:	d0e4      	beq.n	270b8 <nrf_close+0x20>
   270ee:	2816      	cmp	r0, #22
   270f0:	d0e2      	beq.n	270b8 <nrf_close+0x20>
   270f2:	f7f4 fc33 	bl	1b95c <nrf_modem_os_errno_set>
   270f6:	f04f 36ff 	mov.w	r6, #4294967295
   270fa:	e7de      	b.n	270ba <nrf_close+0x22>
   270fc:	20010f7c 	.word	0x20010f7c

00027100 <nrf_sendto>:
   27100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27104:	4698      	mov	r8, r3
   27106:	2300      	movs	r3, #0
   27108:	b085      	sub	sp, #20
   2710a:	4682      	mov	sl, r0
   2710c:	4689      	mov	r9, r1
   2710e:	4616      	mov	r6, r2
   27110:	e9cd 3302 	strd	r3, r3, [sp, #8]
   27114:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   27116:	f7ff fc81 	bl	26a1c <sock_find>
   2711a:	4605      	mov	r5, r0
   2711c:	b940      	cbnz	r0, 27130 <nrf_sendto+0x30>
   2711e:	2009      	movs	r0, #9
   27120:	f7f4 fc1c 	bl	1b95c <nrf_modem_os_errno_set>
   27124:	f04f 34ff 	mov.w	r4, #4294967295
   27128:	4620      	mov	r0, r4
   2712a:	b005      	add	sp, #20
   2712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27130:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   27134:	d001      	beq.n	2713a <nrf_sendto+0x3a>
   27136:	205f      	movs	r0, #95	; 0x5f
   27138:	e7f2      	b.n	27120 <nrf_sendto+0x20>
   2713a:	f00c fe53 	bl	33de4 <sock_has_rai_no_data>
   2713e:	b128      	cbz	r0, 2714c <nrf_sendto+0x4c>
   27140:	4628      	mov	r0, r5
   27142:	f00c fe3f 	bl	33dc4 <sock_has_error>
   27146:	b128      	cbz	r0, 27154 <nrf_sendto+0x54>
   27148:	69a8      	ldr	r0, [r5, #24]
   2714a:	e7e9      	b.n	27120 <nrf_sendto+0x20>
   2714c:	4628      	mov	r0, r5
   2714e:	f00c fe23 	bl	33d98 <sock_is_closed>
   27152:	e7f8      	b.n	27146 <nrf_sendto+0x46>
   27154:	4628      	mov	r0, r5
   27156:	b1d7      	cbz	r7, 2718e <nrf_sendto+0x8e>
   27158:	f00c fdf3 	bl	33d42 <sock_is_stream>
   2715c:	bb00      	cbnz	r0, 271a0 <nrf_sendto+0xa0>
   2715e:	4639      	mov	r1, r7
   27160:	4628      	mov	r0, r5
   27162:	f00c fecb 	bl	33efc <sock_sockaddr_fam_is_valid>
   27166:	b908      	cbnz	r0, 2716c <nrf_sendto+0x6c>
   27168:	206a      	movs	r0, #106	; 0x6a
   2716a:	e7d9      	b.n	27120 <nrf_sendto+0x20>
   2716c:	4638      	mov	r0, r7
   2716e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   27170:	f00c feb0 	bl	33ed4 <sock_sockaddr_len_is_valid>
   27174:	b908      	cbnz	r0, 2717a <nrf_sendto+0x7a>
   27176:	2016      	movs	r0, #22
   27178:	e7d2      	b.n	27120 <nrf_sendto+0x20>
   2717a:	4628      	mov	r0, r5
   2717c:	f00c fde6 	bl	33d4c <sock_is_datagram>
   27180:	b170      	cbz	r0, 271a0 <nrf_sendto+0xa0>
   27182:	4628      	mov	r0, r5
   27184:	f00c fdec 	bl	33d60 <sock_proto_is_secure>
   27188:	b150      	cbz	r0, 271a0 <nrf_sendto+0xa0>
   2718a:	207f      	movs	r0, #127	; 0x7f
   2718c:	e7c8      	b.n	27120 <nrf_sendto+0x20>
   2718e:	f00c fddd 	bl	33d4c <sock_is_datagram>
   27192:	b128      	cbz	r0, 271a0 <nrf_sendto+0xa0>
   27194:	4628      	mov	r0, r5
   27196:	f00c fdf3 	bl	33d80 <sock_is_connected>
   2719a:	b908      	cbnz	r0, 271a0 <nrf_sendto+0xa0>
   2719c:	2079      	movs	r0, #121	; 0x79
   2719e:	e7bf      	b.n	27120 <nrf_sendto+0x20>
   271a0:	4628      	mov	r0, r5
   271a2:	f00c fe5f 	bl	33e64 <sock_sndtimeo_ms_get>
   271a6:	9001      	str	r0, [sp, #4]
   271a8:	4628      	mov	r0, r5
   271aa:	f00c fdf1 	bl	33d90 <sock_is_nonblock>
   271ae:	bb78      	cbnz	r0, 27210 <nrf_sendto+0x110>
   271b0:	f3c8 1880 	ubfx	r8, r8, #6, #1
   271b4:	4628      	mov	r0, r5
   271b6:	f00c fdc4 	bl	33d42 <sock_is_stream>
   271ba:	b140      	cbz	r0, 271ce <nrf_sendto+0xce>
   271bc:	4628      	mov	r0, r5
   271be:	f00c fdcf 	bl	33d60 <sock_proto_is_secure>
   271c2:	b120      	cbz	r0, 271ce <nrf_sendto+0xce>
   271c4:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   271c8:	bf28      	it	cs
   271ca:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   271ce:	f00c fd36 	bl	33c3e <rpc_client_msg_data_tx_size>
   271d2:	42b0      	cmp	r0, r6
   271d4:	d206      	bcs.n	271e4 <nrf_sendto+0xe4>
   271d6:	4628      	mov	r0, r5
   271d8:	f00c fdb3 	bl	33d42 <sock_is_stream>
   271dc:	b1d8      	cbz	r0, 27216 <nrf_sendto+0x116>
   271de:	f00c fd2e 	bl	33c3e <rpc_client_msg_data_tx_size>
   271e2:	4606      	mov	r6, r0
   271e4:	4628      	mov	r0, r5
   271e6:	f00c fdf4 	bl	33dd2 <sock_has_flow_control>
   271ea:	b118      	cbz	r0, 271f4 <nrf_sendto+0xf4>
   271ec:	4628      	mov	r0, r5
   271ee:	f00c fdd3 	bl	33d98 <sock_is_closed>
   271f2:	b190      	cbz	r0, 2721a <nrf_sendto+0x11a>
   271f4:	4630      	mov	r0, r6
   271f6:	f00c fcf7 	bl	33be8 <rpc_client_msg_alloc>
   271fa:	4604      	mov	r4, r0
   271fc:	b9e0      	cbnz	r0, 27238 <nrf_sendto+0x138>
   271fe:	2001      	movs	r0, #1
   27200:	a901      	add	r1, sp, #4
   27202:	f7f4 fae9 	bl	1b7d8 <nrf_modem_os_timedwait>
   27206:	b998      	cbnz	r0, 27230 <nrf_sendto+0x130>
   27208:	f1b8 0f00 	cmp.w	r8, #0
   2720c:	d0f2      	beq.n	271f4 <nrf_sendto+0xf4>
   2720e:	e007      	b.n	27220 <nrf_sendto+0x120>
   27210:	f04f 0801 	mov.w	r8, #1
   27214:	e7ce      	b.n	271b4 <nrf_sendto+0xb4>
   27216:	207a      	movs	r0, #122	; 0x7a
   27218:	e782      	b.n	27120 <nrf_sendto+0x20>
   2721a:	f1b8 0f00 	cmp.w	r8, #0
   2721e:	d001      	beq.n	27224 <nrf_sendto+0x124>
   27220:	200b      	movs	r0, #11
   27222:	e77d      	b.n	27120 <nrf_sendto+0x20>
   27224:	2002      	movs	r0, #2
   27226:	a901      	add	r1, sp, #4
   27228:	f7f4 fad6 	bl	1b7d8 <nrf_modem_os_timedwait>
   2722c:	2800      	cmp	r0, #0
   2722e:	d0d9      	beq.n	271e4 <nrf_sendto+0xe4>
   27230:	2800      	cmp	r0, #0
   27232:	bfb8      	it	lt
   27234:	4240      	neglt	r0, r0
   27236:	e773      	b.n	27120 <nrf_sendto+0x20>
   27238:	f8c0 a010 	str.w	sl, [r0, #16]
   2723c:	f1b9 0f00 	cmp.w	r9, #0
   27240:	d004      	beq.n	2724c <nrf_sendto+0x14c>
   27242:	4632      	mov	r2, r6
   27244:	4649      	mov	r1, r9
   27246:	6800      	ldr	r0, [r0, #0]
   27248:	f00d fed0 	bl	34fec <memcpy>
   2724c:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   27250:	f1bb 0f00 	cmp.w	fp, #0
   27254:	d001      	beq.n	2725a <nrf_sendto+0x15a>
   27256:	2300      	movs	r3, #0
   27258:	632b      	str	r3, [r5, #48]	; 0x30
   2725a:	b3cf      	cbz	r7, 272d0 <nrf_sendto+0x1d0>
   2725c:	4628      	mov	r0, r5
   2725e:	f00c fd70 	bl	33d42 <sock_is_stream>
   27262:	bba8      	cbnz	r0, 272d0 <nrf_sendto+0x1d0>
   27264:	2318      	movs	r3, #24
   27266:	7260      	strb	r0, [r4, #9]
   27268:	7223      	strb	r3, [r4, #8]
   2726a:	72a0      	strb	r0, [r4, #10]
   2726c:	72e0      	strb	r0, [r4, #11]
   2726e:	f8c4 b014 	str.w	fp, [r4, #20]
   27272:	687b      	ldr	r3, [r7, #4]
   27274:	2b01      	cmp	r3, #1
   27276:	d012      	beq.n	2729e <nrf_sendto+0x19e>
   27278:	2b02      	cmp	r3, #2
   2727a:	d018      	beq.n	272ae <nrf_sendto+0x1ae>
   2727c:	f247 0b07 	movw	fp, #28679	; 0x7007
   27280:	4620      	mov	r0, r4
   27282:	a902      	add	r1, sp, #8
   27284:	f00d fae6 	bl	34854 <req_cookie_set>
   27288:	4621      	mov	r1, r4
   2728a:	4658      	mov	r0, fp
   2728c:	f00d fab6 	bl	347fc <req_forward>
   27290:	4603      	mov	r3, r0
   27292:	bb40      	cbnz	r0, 272e6 <nrf_sendto+0x1e6>
   27294:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   27298:	f00c fcc9 	bl	33c2e <rpc_client_msg_rx_free>
   2729c:	e744      	b.n	27128 <nrf_sendto+0x28>
   2729e:	893b      	ldrh	r3, [r7, #8]
   272a0:	76e0      	strb	r0, [r4, #27]
   272a2:	8323      	strh	r3, [r4, #24]
   272a4:	2304      	movs	r3, #4
   272a6:	76a3      	strb	r3, [r4, #26]
   272a8:	68fb      	ldr	r3, [r7, #12]
   272aa:	61e3      	str	r3, [r4, #28]
   272ac:	e7e6      	b.n	2727c <nrf_sendto+0x17c>
   272ae:	893b      	ldrh	r3, [r7, #8]
   272b0:	f104 021c 	add.w	r2, r4, #28
   272b4:	8323      	strh	r3, [r4, #24]
   272b6:	2310      	movs	r3, #16
   272b8:	76e0      	strb	r0, [r4, #27]
   272ba:	76a3      	strb	r3, [r4, #26]
   272bc:	f107 0120 	add.w	r1, r7, #32
   272c0:	18fb      	adds	r3, r7, r3
   272c2:	f853 0b04 	ldr.w	r0, [r3], #4
   272c6:	428b      	cmp	r3, r1
   272c8:	f842 0b04 	str.w	r0, [r2], #4
   272cc:	d1f9      	bne.n	272c2 <nrf_sendto+0x1c2>
   272ce:	e7d5      	b.n	2727c <nrf_sendto+0x17c>
   272d0:	2300      	movs	r3, #0
   272d2:	2204      	movs	r2, #4
   272d4:	f8c4 b014 	str.w	fp, [r4, #20]
   272d8:	7222      	strb	r2, [r4, #8]
   272da:	f247 0b06 	movw	fp, #28678	; 0x7006
   272de:	7263      	strb	r3, [r4, #9]
   272e0:	72a3      	strb	r3, [r4, #10]
   272e2:	72e3      	strb	r3, [r4, #11]
   272e4:	e7cc      	b.n	27280 <nrf_sendto+0x180>
   272e6:	280c      	cmp	r0, #12
   272e8:	dc0f      	bgt.n	2730a <nrf_sendto+0x20a>
   272ea:	280a      	cmp	r0, #10
   272ec:	dd10      	ble.n	27310 <nrf_sendto+0x210>
   272ee:	4b09      	ldr	r3, [pc, #36]	; (27314 <nrf_sendto+0x214>)
   272f0:	781b      	ldrb	r3, [r3, #0]
   272f2:	b92b      	cbnz	r3, 27300 <nrf_sendto+0x200>
   272f4:	2001      	movs	r0, #1
   272f6:	a901      	add	r1, sp, #4
   272f8:	f7f4 fa6e 	bl	1b7d8 <nrf_modem_os_timedwait>
   272fc:	2800      	cmp	r0, #0
   272fe:	d197      	bne.n	27230 <nrf_sendto+0x130>
   27300:	f1b8 0f00 	cmp.w	r8, #0
   27304:	f43f af6e 	beq.w	271e4 <nrf_sendto+0xe4>
   27308:	e78a      	b.n	27220 <nrf_sendto+0x120>
   2730a:	288c      	cmp	r0, #140	; 0x8c
   2730c:	f43f af08 	beq.w	27120 <nrf_sendto+0x20>
   27310:	4618      	mov	r0, r3
   27312:	e705      	b.n	27120 <nrf_sendto+0x20>
   27314:	20012877 	.word	0x20012877

00027318 <nrf_setsockopt>:
   27318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2731c:	b085      	sub	sp, #20
   2731e:	4681      	mov	r9, r0
   27320:	4688      	mov	r8, r1
   27322:	4617      	mov	r7, r2
   27324:	461e      	mov	r6, r3
   27326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   27328:	f7ff fb78 	bl	26a1c <sock_find>
   2732c:	4604      	mov	r4, r0
   2732e:	b938      	cbnz	r0, 27340 <nrf_setsockopt+0x28>
   27330:	2009      	movs	r0, #9
   27332:	f7f4 fb13 	bl	1b95c <nrf_modem_os_errno_set>
   27336:	f04f 30ff 	mov.w	r0, #4294967295
   2733a:	b005      	add	sp, #20
   2733c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27340:	b916      	cbnz	r6, 27348 <nrf_setsockopt+0x30>
   27342:	b10d      	cbz	r5, 27348 <nrf_setsockopt+0x30>
   27344:	2016      	movs	r0, #22
   27346:	e7f4      	b.n	27332 <nrf_setsockopt+0x1a>
   27348:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   2734c:	f000 80fe 	beq.w	2754c <nrf_setsockopt+0x234>
   27350:	dc0c      	bgt.n	2736c <nrf_setsockopt+0x54>
   27352:	f1b8 0f01 	cmp.w	r8, #1
   27356:	d012      	beq.n	2737e <nrf_setsockopt+0x66>
   27358:	f1b8 0f06 	cmp.w	r8, #6
   2735c:	f000 80f0 	beq.w	27540 <nrf_setsockopt+0x228>
   27360:	f1b8 0f00 	cmp.w	r8, #0
   27364:	f000 80f0 	beq.w	27548 <nrf_setsockopt+0x230>
   27368:	206d      	movs	r0, #109	; 0x6d
   2736a:	e7e2      	b.n	27332 <nrf_setsockopt+0x1a>
   2736c:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   27370:	f000 8092 	beq.w	27498 <nrf_setsockopt+0x180>
   27374:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   27378:	d1f6      	bne.n	27368 <nrf_setsockopt+0x50>
   2737a:	2f1e      	cmp	r7, #30
   2737c:	e0e1      	b.n	27542 <nrf_setsockopt+0x22a>
   2737e:	2f3c      	cmp	r7, #60	; 0x3c
   27380:	dcf2      	bgt.n	27368 <nrf_setsockopt+0x50>
   27382:	2f31      	cmp	r7, #49	; 0x31
   27384:	dc0f      	bgt.n	273a6 <nrf_setsockopt+0x8e>
   27386:	2f15      	cmp	r7, #21
   27388:	d046      	beq.n	27418 <nrf_setsockopt+0x100>
   2738a:	dc29      	bgt.n	273e0 <nrf_setsockopt+0xc8>
   2738c:	2f02      	cmp	r7, #2
   2738e:	d03a      	beq.n	27406 <nrf_setsockopt+0xee>
   27390:	2f14      	cmp	r7, #20
   27392:	d1e9      	bne.n	27368 <nrf_setsockopt+0x50>
   27394:	f104 0020 	add.w	r0, r4, #32
   27398:	2d00      	cmp	r5, #0
   2739a:	d143      	bne.n	27424 <nrf_setsockopt+0x10c>
   2739c:	2300      	movs	r3, #0
   2739e:	6223      	str	r3, [r4, #32]
   273a0:	6043      	str	r3, [r0, #4]
   273a2:	2000      	movs	r0, #0
   273a4:	e7c9      	b.n	2733a <nrf_setsockopt+0x22>
   273a6:	3f32      	subs	r7, #50	; 0x32
   273a8:	2f0a      	cmp	r7, #10
   273aa:	d8dd      	bhi.n	27368 <nrf_setsockopt+0x50>
   273ac:	a301      	add	r3, pc, #4	; (adr r3, 273b4 <nrf_setsockopt+0x9c>)
   273ae:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   273b2:	bf00      	nop
   273b4:	0002747d 	.word	0x0002747d
   273b8:	00027463 	.word	0x00027463
   273bc:	0002746b 	.word	0x0002746b
   273c0:	00027471 	.word	0x00027471
   273c4:	00027477 	.word	0x00027477
   273c8:	00027369 	.word	0x00027369
   273cc:	00027369 	.word	0x00027369
   273d0:	00027369 	.word	0x00027369
   273d4:	00027369 	.word	0x00027369
   273d8:	00027369 	.word	0x00027369
   273dc:	00027435 	.word	0x00027435
   273e0:	2f19      	cmp	r7, #25
   273e2:	d1c1      	bne.n	27368 <nrf_setsockopt+0x50>
   273e4:	2e00      	cmp	r6, #0
   273e6:	d0ad      	beq.n	27344 <nrf_setsockopt+0x2c>
   273e8:	2203      	movs	r2, #3
   273ea:	4969      	ldr	r1, [pc, #420]	; (27590 <nrf_setsockopt+0x278>)
   273ec:	4630      	mov	r0, r6
   273ee:	f00d fded 	bl	34fcc <memcmp>
   273f2:	220a      	movs	r2, #10
   273f4:	2100      	movs	r1, #0
   273f6:	2800      	cmp	r0, #0
   273f8:	d14c      	bne.n	27494 <nrf_setsockopt+0x17c>
   273fa:	1cf0      	adds	r0, r6, #3
   273fc:	f005 fa08 	bl	2c810 <strtoul>
   27400:	2504      	movs	r5, #4
   27402:	9003      	str	r0, [sp, #12]
   27404:	ae03      	add	r6, sp, #12
   27406:	4628      	mov	r0, r5
   27408:	f00c fbee 	bl	33be8 <rpc_client_msg_alloc>
   2740c:	4604      	mov	r4, r0
   2740e:	2800      	cmp	r0, #0
   27410:	f040 809e 	bne.w	27550 <nrf_setsockopt+0x238>
   27414:	2069      	movs	r0, #105	; 0x69
   27416:	e78c      	b.n	27332 <nrf_setsockopt+0x1a>
   27418:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2741c:	b915      	cbnz	r5, 27424 <nrf_setsockopt+0x10c>
   2741e:	62a5      	str	r5, [r4, #40]	; 0x28
   27420:	6045      	str	r5, [r0, #4]
   27422:	e7be      	b.n	273a2 <nrf_setsockopt+0x8a>
   27424:	2d08      	cmp	r5, #8
   27426:	462a      	mov	r2, r5
   27428:	4631      	mov	r1, r6
   2742a:	bf28      	it	cs
   2742c:	2208      	movcs	r2, #8
   2742e:	f00d fddd 	bl	34fec <memcpy>
   27432:	e7b6      	b.n	273a2 <nrf_setsockopt+0x8a>
   27434:	b17e      	cbz	r6, 27456 <nrf_setsockopt+0x13e>
   27436:	2d08      	cmp	r5, #8
   27438:	d184      	bne.n	27344 <nrf_setsockopt+0x2c>
   2743a:	f7fe fdbd 	bl	25fb8 <rpc_transport_data_rx_suspend>
   2743e:	e896 0003 	ldmia.w	r6, {r0, r1}
   27442:	f104 0334 	add.w	r3, r4, #52	; 0x34
   27446:	e883 0003 	stmia.w	r3, {r0, r1}
   2744a:	4620      	mov	r0, r4
   2744c:	f00c fc3c 	bl	33cc8 <sock_pollcb>
   27450:	f7fe fdb8 	bl	25fc4 <rpc_transport_data_rx_resume>
   27454:	e7a5      	b.n	273a2 <nrf_setsockopt+0x8a>
   27456:	2d00      	cmp	r5, #0
   27458:	f47f af74 	bne.w	27344 <nrf_setsockopt+0x2c>
   2745c:	6365      	str	r5, [r4, #52]	; 0x34
   2745e:	63a5      	str	r5, [r4, #56]	; 0x38
   27460:	e79f      	b.n	273a2 <nrf_setsockopt+0x8a>
   27462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   27466:	6323      	str	r3, [r4, #48]	; 0x30
   27468:	e79b      	b.n	273a2 <nrf_setsockopt+0x8a>
   2746a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2746e:	e7fa      	b.n	27466 <nrf_setsockopt+0x14e>
   27470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   27474:	e7f7      	b.n	27466 <nrf_setsockopt+0x14e>
   27476:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2747a:	e7f4      	b.n	27466 <nrf_setsockopt+0x14e>
   2747c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   27480:	6323      	str	r3, [r4, #48]	; 0x30
   27482:	2300      	movs	r3, #0
   27484:	4648      	mov	r0, r9
   27486:	461a      	mov	r2, r3
   27488:	4619      	mov	r1, r3
   2748a:	e9cd 3300 	strd	r3, r3, [sp]
   2748e:	f7ff fe37 	bl	27100 <nrf_sendto>
   27492:	e752      	b.n	2733a <nrf_setsockopt+0x22>
   27494:	4630      	mov	r0, r6
   27496:	e7b1      	b.n	273fc <nrf_setsockopt+0xe4>
   27498:	1e7b      	subs	r3, r7, #1
   2749a:	2b11      	cmp	r3, #17
   2749c:	f63f af64 	bhi.w	27368 <nrf_setsockopt+0x50>
   274a0:	a201      	add	r2, pc, #4	; (adr r2, 274a8 <nrf_setsockopt+0x190>)
   274a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   274a6:	bf00      	nop
   274a8:	00027501 	.word	0x00027501
   274ac:	00027531 	.word	0x00027531
   274b0:	00027407 	.word	0x00027407
   274b4:	00027369 	.word	0x00027369
   274b8:	00027521 	.word	0x00027521
   274bc:	000274f1 	.word	0x000274f1
   274c0:	00027369 	.word	0x00027369
   274c4:	00027369 	.word	0x00027369
   274c8:	00027369 	.word	0x00027369
   274cc:	00027369 	.word	0x00027369
   274d0:	00027369 	.word	0x00027369
   274d4:	00027511 	.word	0x00027511
   274d8:	00027407 	.word	0x00027407
   274dc:	00027407 	.word	0x00027407
   274e0:	00027407 	.word	0x00027407
   274e4:	00027369 	.word	0x00027369
   274e8:	00027407 	.word	0x00027407
   274ec:	00027407 	.word	0x00027407
   274f0:	462a      	mov	r2, r5
   274f2:	4631      	mov	r1, r6
   274f4:	4620      	mov	r0, r4
   274f6:	b005      	add	sp, #20
   274f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   274fc:	f00d b84b 	b.w	34596 <tls_setopt_role>
   27500:	462a      	mov	r2, r5
   27502:	4631      	mov	r1, r6
   27504:	4620      	mov	r0, r4
   27506:	b005      	add	sp, #20
   27508:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2750c:	f00d b857 	b.w	345be <tls_setopt_taglist>
   27510:	462a      	mov	r2, r5
   27512:	4631      	mov	r1, r6
   27514:	4620      	mov	r0, r4
   27516:	b005      	add	sp, #20
   27518:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2751c:	f00d b864 	b.w	345e8 <tls_setopt_sess_cache>
   27520:	462a      	mov	r2, r5
   27522:	4631      	mov	r1, r6
   27524:	4620      	mov	r0, r4
   27526:	b005      	add	sp, #20
   27528:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2752c:	f00d b86e 	b.w	3460c <tls_setopt_peer_verify>
   27530:	462a      	mov	r2, r5
   27532:	4631      	mov	r1, r6
   27534:	4620      	mov	r0, r4
   27536:	b005      	add	sp, #20
   27538:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2753c:	f00d b875 	b.w	3462a <tls_setopt_hostname>
   27540:	2f37      	cmp	r7, #55	; 0x37
   27542:	f43f af60 	beq.w	27406 <nrf_setsockopt+0xee>
   27546:	e70f      	b.n	27368 <nrf_setsockopt+0x50>
   27548:	2f1f      	cmp	r7, #31
   2754a:	e7fa      	b.n	27542 <nrf_setsockopt+0x22a>
   2754c:	2f20      	cmp	r7, #32
   2754e:	e7f8      	b.n	27542 <nrf_setsockopt+0x22a>
   27550:	2300      	movs	r3, #0
   27552:	2208      	movs	r2, #8
   27554:	7243      	strb	r3, [r0, #9]
   27556:	7202      	strb	r2, [r0, #8]
   27558:	7283      	strb	r3, [r0, #10]
   2755a:	72c3      	strb	r3, [r0, #11]
   2755c:	f8c0 9010 	str.w	r9, [r0, #16]
   27560:	4640      	mov	r0, r8
   27562:	f00d f914 	bl	3478e <nrf_sol_to_rpc_sol>
   27566:	6160      	str	r0, [r4, #20]
   27568:	4638      	mov	r0, r7
   2756a:	f000 f9b5 	bl	278d8 <nrf_so_to_rpc_so>
   2756e:	4631      	mov	r1, r6
   27570:	61a0      	str	r0, [r4, #24]
   27572:	462a      	mov	r2, r5
   27574:	6820      	ldr	r0, [r4, #0]
   27576:	f00d fd39 	bl	34fec <memcpy>
   2757a:	4621      	mov	r1, r4
   2757c:	f247 0003 	movw	r0, #28675	; 0x7003
   27580:	6065      	str	r5, [r4, #4]
   27582:	f00d f93b 	bl	347fc <req_forward>
   27586:	2800      	cmp	r0, #0
   27588:	f43f af0b 	beq.w	273a2 <nrf_setsockopt+0x8a>
   2758c:	e6d1      	b.n	27332 <nrf_setsockopt+0x1a>
   2758e:	bf00      	nop
   27590:	000403af 	.word	0x000403af

00027594 <nrf_getsockopt>:
   27594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27598:	9c08      	ldr	r4, [sp, #32]
   2759a:	4681      	mov	r9, r0
   2759c:	4688      	mov	r8, r1
   2759e:	4617      	mov	r7, r2
   275a0:	461e      	mov	r6, r3
   275a2:	f7ff fa3b 	bl	26a1c <sock_find>
   275a6:	b930      	cbnz	r0, 275b6 <nrf_getsockopt+0x22>
   275a8:	2009      	movs	r0, #9
   275aa:	f7f4 f9d7 	bl	1b95c <nrf_modem_os_errno_set>
   275ae:	f04f 30ff 	mov.w	r0, #4294967295
   275b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   275b6:	b106      	cbz	r6, 275ba <nrf_getsockopt+0x26>
   275b8:	b90c      	cbnz	r4, 275be <nrf_getsockopt+0x2a>
   275ba:	200e      	movs	r0, #14
   275bc:	e7f5      	b.n	275aa <nrf_getsockopt+0x16>
   275be:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   275c2:	f000 8096 	beq.w	276f2 <nrf_getsockopt+0x15e>
   275c6:	dc0c      	bgt.n	275e2 <nrf_getsockopt+0x4e>
   275c8:	f1b8 0f01 	cmp.w	r8, #1
   275cc:	d011      	beq.n	275f2 <nrf_getsockopt+0x5e>
   275ce:	f1b8 0f06 	cmp.w	r8, #6
   275d2:	f000 8082 	beq.w	276da <nrf_getsockopt+0x146>
   275d6:	f1b8 0f00 	cmp.w	r8, #0
   275da:	f000 8088 	beq.w	276ee <nrf_getsockopt+0x15a>
   275de:	206d      	movs	r0, #109	; 0x6d
   275e0:	e7e3      	b.n	275aa <nrf_getsockopt+0x16>
   275e2:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   275e6:	d024      	beq.n	27632 <nrf_getsockopt+0x9e>
   275e8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   275ec:	d1f7      	bne.n	275de <nrf_getsockopt+0x4a>
   275ee:	2f1e      	cmp	r7, #30
   275f0:	e074      	b.n	276dc <nrf_getsockopt+0x148>
   275f2:	2f14      	cmp	r7, #20
   275f4:	d00a      	beq.n	2760c <nrf_getsockopt+0x78>
   275f6:	2f15      	cmp	r7, #21
   275f8:	d013      	beq.n	27622 <nrf_getsockopt+0x8e>
   275fa:	2f04      	cmp	r7, #4
   275fc:	d1ef      	bne.n	275de <nrf_getsockopt+0x4a>
   275fe:	6983      	ldr	r3, [r0, #24]
   27600:	6027      	str	r7, [r4, #0]
   27602:	6033      	str	r3, [r6, #0]
   27604:	2300      	movs	r3, #0
   27606:	6183      	str	r3, [r0, #24]
   27608:	2000      	movs	r0, #0
   2760a:	e7d2      	b.n	275b2 <nrf_getsockopt+0x1e>
   2760c:	6822      	ldr	r2, [r4, #0]
   2760e:	f100 0120 	add.w	r1, r0, #32
   27612:	2a08      	cmp	r2, #8
   27614:	bf28      	it	cs
   27616:	2208      	movcs	r2, #8
   27618:	6022      	str	r2, [r4, #0]
   2761a:	4630      	mov	r0, r6
   2761c:	f00d fce6 	bl	34fec <memcpy>
   27620:	e7f2      	b.n	27608 <nrf_getsockopt+0x74>
   27622:	6822      	ldr	r2, [r4, #0]
   27624:	f100 0128 	add.w	r1, r0, #40	; 0x28
   27628:	2a08      	cmp	r2, #8
   2762a:	bf28      	it	cs
   2762c:	2208      	movcs	r2, #8
   2762e:	6022      	str	r2, [r4, #0]
   27630:	e7f3      	b.n	2761a <nrf_getsockopt+0x86>
   27632:	1e7b      	subs	r3, r7, #1
   27634:	2b12      	cmp	r3, #18
   27636:	d8d2      	bhi.n	275de <nrf_getsockopt+0x4a>
   27638:	a201      	add	r2, pc, #4	; (adr r2, 27640 <nrf_getsockopt+0xac>)
   2763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2763e:	bf00      	nop
   27640:	000276ad 	.word	0x000276ad
   27644:	000276c3 	.word	0x000276c3
   27648:	000276e1 	.word	0x000276e1
   2764c:	000276e1 	.word	0x000276e1
   27650:	000276a3 	.word	0x000276a3
   27654:	0002768d 	.word	0x0002768d
   27658:	000275df 	.word	0x000275df
   2765c:	000275df 	.word	0x000275df
   27660:	000275df 	.word	0x000275df
   27664:	000275df 	.word	0x000275df
   27668:	000275df 	.word	0x000275df
   2766c:	00027699 	.word	0x00027699
   27670:	000275df 	.word	0x000275df
   27674:	000276e1 	.word	0x000276e1
   27678:	000276e1 	.word	0x000276e1
   2767c:	000276e1 	.word	0x000276e1
   27680:	000275df 	.word	0x000275df
   27684:	000275df 	.word	0x000275df
   27688:	000276e1 	.word	0x000276e1
   2768c:	2304      	movs	r3, #4
   2768e:	6023      	str	r3, [r4, #0]
   27690:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   27694:	6033      	str	r3, [r6, #0]
   27696:	e7b7      	b.n	27608 <nrf_getsockopt+0x74>
   27698:	2304      	movs	r3, #4
   2769a:	6023      	str	r3, [r4, #0]
   2769c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   276a0:	e7f8      	b.n	27694 <nrf_getsockopt+0x100>
   276a2:	2304      	movs	r3, #4
   276a4:	6023      	str	r3, [r4, #0]
   276a6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   276aa:	e7f3      	b.n	27694 <nrf_getsockopt+0x100>
   276ac:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   276b0:	6823      	ldr	r3, [r4, #0]
   276b2:	0092      	lsls	r2, r2, #2
   276b4:	429a      	cmp	r2, r3
   276b6:	bf28      	it	cs
   276b8:	461a      	movcs	r2, r3
   276ba:	f100 0148 	add.w	r1, r0, #72	; 0x48
   276be:	6022      	str	r2, [r4, #0]
   276c0:	e7ab      	b.n	2761a <nrf_getsockopt+0x86>
   276c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
   276c4:	4628      	mov	r0, r5
   276c6:	f7e1 fe28 	bl	931a <strlen>
   276ca:	6823      	ldr	r3, [r4, #0]
   276cc:	1c42      	adds	r2, r0, #1
   276ce:	429a      	cmp	r2, r3
   276d0:	bf28      	it	cs
   276d2:	461a      	movcs	r2, r3
   276d4:	4629      	mov	r1, r5
   276d6:	6022      	str	r2, [r4, #0]
   276d8:	e79f      	b.n	2761a <nrf_getsockopt+0x86>
   276da:	2f37      	cmp	r7, #55	; 0x37
   276dc:	f47f af7f 	bne.w	275de <nrf_getsockopt+0x4a>
   276e0:	6820      	ldr	r0, [r4, #0]
   276e2:	f00c fa81 	bl	33be8 <rpc_client_msg_alloc>
   276e6:	4605      	mov	r5, r0
   276e8:	b928      	cbnz	r0, 276f6 <nrf_getsockopt+0x162>
   276ea:	2069      	movs	r0, #105	; 0x69
   276ec:	e75d      	b.n	275aa <nrf_getsockopt+0x16>
   276ee:	2f1f      	cmp	r7, #31
   276f0:	e7f4      	b.n	276dc <nrf_getsockopt+0x148>
   276f2:	2f20      	cmp	r7, #32
   276f4:	e7f2      	b.n	276dc <nrf_getsockopt+0x148>
   276f6:	2300      	movs	r3, #0
   276f8:	2208      	movs	r2, #8
   276fa:	7243      	strb	r3, [r0, #9]
   276fc:	7202      	strb	r2, [r0, #8]
   276fe:	7283      	strb	r3, [r0, #10]
   27700:	72c3      	strb	r3, [r0, #11]
   27702:	f8c0 9010 	str.w	r9, [r0, #16]
   27706:	4640      	mov	r0, r8
   27708:	f00d f841 	bl	3478e <nrf_sol_to_rpc_sol>
   2770c:	6168      	str	r0, [r5, #20]
   2770e:	4638      	mov	r0, r7
   27710:	f000 f8e2 	bl	278d8 <nrf_so_to_rpc_so>
   27714:	4629      	mov	r1, r5
   27716:	61a8      	str	r0, [r5, #24]
   27718:	f247 0004 	movw	r0, #28676	; 0x7004
   2771c:	f8d5 8000 	ldr.w	r8, [r5]
   27720:	f00d f86c 	bl	347fc <req_forward>
   27724:	4607      	mov	r7, r0
   27726:	b120      	cbz	r0, 27732 <nrf_getsockopt+0x19e>
   27728:	4640      	mov	r0, r8
   2772a:	f00c fa8c 	bl	33c46 <rpc_client_msg_data_tx_free>
   2772e:	4638      	mov	r0, r7
   27730:	e73b      	b.n	275aa <nrf_getsockopt+0x16>
   27732:	686a      	ldr	r2, [r5, #4]
   27734:	6823      	ldr	r3, [r4, #0]
   27736:	4641      	mov	r1, r8
   27738:	429a      	cmp	r2, r3
   2773a:	bf28      	it	cs
   2773c:	461a      	movcs	r2, r3
   2773e:	4630      	mov	r0, r6
   27740:	6022      	str	r2, [r4, #0]
   27742:	f00d fc53 	bl	34fec <memcpy>
   27746:	4640      	mov	r0, r8
   27748:	f00c fa7d 	bl	33c46 <rpc_client_msg_data_tx_free>
   2774c:	e75c      	b.n	27608 <nrf_getsockopt+0x74>
   2774e:	bf00      	nop

00027750 <rpc_ip_init>:
   27750:	b508      	push	{r3, lr}
   27752:	f7ff f921 	bl	26998 <sock_init>
   27756:	f7ff f9e9 	bl	26b2c <addrinfo_init>
   2775a:	2200      	movs	r2, #0
   2775c:	4b05      	ldr	r3, [pc, #20]	; (27774 <rpc_ip_init+0x24>)
   2775e:	4806      	ldr	r0, [pc, #24]	; (27778 <rpc_ip_init+0x28>)
   27760:	701a      	strb	r2, [r3, #0]
   27762:	2201      	movs	r2, #1
   27764:	4611      	mov	r1, r2
   27766:	f7f4 f917 	bl	1b998 <nrf_modem_os_sem_init>
   2776a:	2800      	cmp	r0, #0
   2776c:	bf18      	it	ne
   2776e:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   27772:	bd08      	pop	{r3, pc}
   27774:	20012877 	.word	0x20012877
   27778:	20010f7c 	.word	0x20010f7c

0002777c <on_tls_attach_res>:
   2777c:	b510      	push	{r4, lr}
   2777e:	6943      	ldr	r3, [r0, #20]
   27780:	460c      	mov	r4, r1
   27782:	b15b      	cbz	r3, 2779c <on_tls_attach_res+0x20>
   27784:	7f0b      	ldrb	r3, [r1, #28]
   27786:	f36f 1304 	bfc	r3, #4, #1
   2778a:	770b      	strb	r3, [r1, #28]
   2778c:	6940      	ldr	r0, [r0, #20]
   2778e:	f000 f8af 	bl	278f0 <rpc_error_to_nrf_errno>
   27792:	4b03      	ldr	r3, [pc, #12]	; (277a0 <on_tls_attach_res+0x24>)
   27794:	61a0      	str	r0, [r4, #24]
   27796:	6818      	ldr	r0, [r3, #0]
   27798:	f7f4 f932 	bl	1ba00 <nrf_modem_os_sem_give>
   2779c:	2000      	movs	r0, #0
   2779e:	bd10      	pop	{r4, pc}
   277a0:	20010f7c 	.word	0x20010f7c

000277a4 <on_tls_handshake_ntf>:
   277a4:	b510      	push	{r4, lr}
   277a6:	7f0b      	ldrb	r3, [r1, #28]
   277a8:	460c      	mov	r4, r1
   277aa:	f36f 1304 	bfc	r3, #4, #1
   277ae:	770b      	strb	r3, [r1, #28]
   277b0:	6900      	ldr	r0, [r0, #16]
   277b2:	b958      	cbnz	r0, 277cc <on_tls_handshake_ntf+0x28>
   277b4:	b2db      	uxtb	r3, r3
   277b6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   277ba:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   277be:	770b      	strb	r3, [r1, #28]
   277c0:	4b04      	ldr	r3, [pc, #16]	; (277d4 <on_tls_handshake_ntf+0x30>)
   277c2:	6818      	ldr	r0, [r3, #0]
   277c4:	f7f4 f91c 	bl	1ba00 <nrf_modem_os_sem_give>
   277c8:	2000      	movs	r0, #0
   277ca:	bd10      	pop	{r4, pc}
   277cc:	f000 f890 	bl	278f0 <rpc_error_to_nrf_errno>
   277d0:	61a0      	str	r0, [r4, #24]
   277d2:	e7f5      	b.n	277c0 <on_tls_handshake_ntf+0x1c>
   277d4:	20010f7c 	.word	0x20010f7c

000277d8 <tls_attach>:
   277d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   277dc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 278c4 <tls_attach+0xec>
   277e0:	4605      	mov	r5, r0
   277e2:	f8d8 0000 	ldr.w	r0, [r8]
   277e6:	9101      	str	r1, [sp, #4]
   277e8:	f7f4 f92e 	bl	1ba48 <nrf_modem_os_sem_take>
   277ec:	4607      	mov	r7, r0
   277ee:	b150      	cbz	r0, 27806 <tls_attach+0x2e>
   277f0:	9b01      	ldr	r3, [sp, #4]
   277f2:	2b00      	cmp	r3, #0
   277f4:	d163      	bne.n	278be <tls_attach+0xe6>
   277f6:	2310      	movs	r3, #16
   277f8:	61ab      	str	r3, [r5, #24]
   277fa:	f04f 37ff 	mov.w	r7, #4294967295
   277fe:	4638      	mov	r0, r7
   27800:	b002      	add	sp, #8
   27802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27806:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27808:	b1a8      	cbz	r0, 27836 <tls_attach+0x5e>
   2780a:	f7e1 fd86 	bl	931a <strlen>
   2780e:	1c46      	adds	r6, r0, #1
   27810:	4630      	mov	r0, r6
   27812:	f00c f9e9 	bl	33be8 <rpc_client_msg_alloc>
   27816:	4604      	mov	r4, r0
   27818:	b978      	cbnz	r0, 2783a <tls_attach+0x62>
   2781a:	4628      	mov	r0, r5
   2781c:	f00c fab8 	bl	33d90 <sock_is_nonblock>
   27820:	b108      	cbz	r0, 27826 <tls_attach+0x4e>
   27822:	2369      	movs	r3, #105	; 0x69
   27824:	61ab      	str	r3, [r5, #24]
   27826:	f8d8 0000 	ldr.w	r0, [r8]
   2782a:	f7f4 f8e9 	bl	1ba00 <nrf_modem_os_sem_give>
   2782e:	2069      	movs	r0, #105	; 0x69
   27830:	f7f4 f894 	bl	1b95c <nrf_modem_os_errno_set>
   27834:	e7e1      	b.n	277fa <tls_attach+0x22>
   27836:	463e      	mov	r6, r7
   27838:	e7ea      	b.n	27810 <tls_attach+0x38>
   2783a:	682b      	ldr	r3, [r5, #0]
   2783c:	2204      	movs	r2, #4
   2783e:	6103      	str	r3, [r0, #16]
   27840:	2300      	movs	r3, #0
   27842:	7202      	strb	r2, [r0, #8]
   27844:	7243      	strb	r3, [r0, #9]
   27846:	7283      	strb	r3, [r0, #10]
   27848:	72c3      	strb	r3, [r0, #11]
   2784a:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   2784e:	f105 0144 	add.w	r1, r5, #68	; 0x44
   27852:	3201      	adds	r2, #1
   27854:	0092      	lsls	r2, r2, #2
   27856:	6082      	str	r2, [r0, #8]
   27858:	3014      	adds	r0, #20
   2785a:	f00d fbc7 	bl	34fec <memcpy>
   2785e:	b1e6      	cbz	r6, 2789a <tls_attach+0xc2>
   27860:	4632      	mov	r2, r6
   27862:	6c29      	ldr	r1, [r5, #64]	; 0x40
   27864:	6820      	ldr	r0, [r4, #0]
   27866:	f00d fd99 	bl	3539c <strncpy>
   2786a:	6066      	str	r6, [r4, #4]
   2786c:	7f2b      	ldrb	r3, [r5, #28]
   2786e:	2004      	movs	r0, #4
   27870:	f043 0310 	orr.w	r3, r3, #16
   27874:	4622      	mov	r2, r4
   27876:	f247 0181 	movw	r1, #28801	; 0x7081
   2787a:	772b      	strb	r3, [r5, #28]
   2787c:	f00c f9d0 	bl	33c20 <rpc_client_msg_send>
   27880:	4628      	mov	r0, r5
   27882:	f00c fa85 	bl	33d90 <sock_is_nonblock>
   27886:	2800      	cmp	r0, #0
   27888:	d1b9      	bne.n	277fe <tls_attach+0x26>
   2788a:	4628      	mov	r0, r5
   2788c:	f00c fa7c 	bl	33d88 <sock_is_attaching>
   27890:	b940      	cbnz	r0, 278a4 <tls_attach+0xcc>
   27892:	69a8      	ldr	r0, [r5, #24]
   27894:	2800      	cmp	r0, #0
   27896:	d0b2      	beq.n	277fe <tls_attach+0x26>
   27898:	e7ca      	b.n	27830 <tls_attach+0x58>
   2789a:	7026      	strb	r6, [r4, #0]
   2789c:	7066      	strb	r6, [r4, #1]
   2789e:	70a6      	strb	r6, [r4, #2]
   278a0:	70e6      	strb	r6, [r4, #3]
   278a2:	e7e2      	b.n	2786a <tls_attach+0x92>
   278a4:	2002      	movs	r0, #2
   278a6:	a901      	add	r1, sp, #4
   278a8:	f7f3 ff96 	bl	1b7d8 <nrf_modem_os_timedwait>
   278ac:	f110 0f0b 	cmn.w	r0, #11
   278b0:	d005      	beq.n	278be <tls_attach+0xe6>
   278b2:	2800      	cmp	r0, #0
   278b4:	d0e9      	beq.n	2788a <tls_attach+0xb2>
   278b6:	2800      	cmp	r0, #0
   278b8:	bfb8      	it	lt
   278ba:	4240      	neglt	r0, r0
   278bc:	e7b8      	b.n	27830 <tls_attach+0x58>
   278be:	2074      	movs	r0, #116	; 0x74
   278c0:	e7b6      	b.n	27830 <tls_attach+0x58>
   278c2:	bf00      	nop
   278c4:	20010f7c 	.word	0x20010f7c

000278c8 <nrf_af_to_rpc_af>:
   278c8:	2803      	cmp	r0, #3
   278ca:	bf9c      	itt	ls
   278cc:	4b01      	ldrls	r3, [pc, #4]	; (278d4 <nrf_af_to_rpc_af+0xc>)
   278ce:	5618      	ldrsbls	r0, [r3, r0]
   278d0:	4770      	bx	lr
   278d2:	bf00      	nop
   278d4:	000403b3 	.word	0x000403b3

000278d8 <nrf_so_to_rpc_so>:
   278d8:	3802      	subs	r0, #2
   278da:	2835      	cmp	r0, #53	; 0x35
   278dc:	bf9a      	itte	ls
   278de:	4b03      	ldrls	r3, [pc, #12]	; (278ec <nrf_so_to_rpc_so+0x14>)
   278e0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   278e4:	f04f 30ff 	movhi.w	r0, #4294967295
   278e8:	4770      	bx	lr
   278ea:	bf00      	nop
   278ec:	00037694 	.word	0x00037694

000278f0 <rpc_error_to_nrf_errno>:
   278f0:	2870      	cmp	r0, #112	; 0x70
   278f2:	bf9a      	itte	ls
   278f4:	4b02      	ldrls	r3, [pc, #8]	; (27900 <rpc_error_to_nrf_errno+0x10>)
   278f6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   278fa:	4802      	ldrhi	r0, [pc, #8]	; (27904 <rpc_error_to_nrf_errno+0x14>)
   278fc:	4770      	bx	lr
   278fe:	bf00      	nop
   27900:	000374d0 	.word	0x000374d0
   27904:	baadbaad 	.word	0xbaadbaad

00027908 <send_message>:
   27908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2790a:	4605      	mov	r5, r0
   2790c:	460e      	mov	r6, r1
   2790e:	4614      	mov	r4, r2
   27910:	f000 fa22 	bl	27d58 <nrf_modem_state_is_initialized>
   27914:	2800      	cmp	r0, #0
   27916:	d05b      	beq.n	279d0 <send_message+0xc8>
   27918:	2300      	movs	r3, #0
   2791a:	4f2f      	ldr	r7, [pc, #188]	; (279d8 <send_message+0xd0>)
   2791c:	4632      	mov	r2, r6
   2791e:	4629      	mov	r1, r5
   27920:	2007      	movs	r0, #7
   27922:	607b      	str	r3, [r7, #4]
   27924:	f00c f97c 	bl	33c20 <rpc_client_msg_send>
   27928:	f04f 33ff 	mov.w	r3, #4294967295
   2792c:	9301      	str	r3, [sp, #4]
   2792e:	2002      	movs	r0, #2
   27930:	a901      	add	r1, sp, #4
   27932:	f7f3 ff51 	bl	1b7d8 <nrf_modem_os_timedwait>
   27936:	687d      	ldr	r5, [r7, #4]
   27938:	4606      	mov	r6, r0
   2793a:	b92d      	cbnz	r5, 27948 <send_message+0x40>
   2793c:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   27940:	d1f5      	bne.n	2792e <send_message+0x26>
   27942:	4630      	mov	r0, r6
   27944:	b003      	add	sp, #12
   27946:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27948:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2794c:	d0f9      	beq.n	27942 <send_message+0x3a>
   2794e:	686b      	ldr	r3, [r5, #4]
   27950:	2b02      	cmp	r3, #2
   27952:	d034      	beq.n	279be <send_message+0xb6>
   27954:	f647 72ff 	movw	r2, #32767	; 0x7fff
   27958:	4293      	cmp	r3, r2
   2795a:	d033      	beq.n	279c4 <send_message+0xbc>
   2795c:	bbab      	cbnz	r3, 279ca <send_message+0xc2>
   2795e:	b344      	cbz	r4, 279b2 <send_message+0xaa>
   27960:	f242 0309 	movw	r3, #8201	; 0x2009
   27964:	883a      	ldrh	r2, [r7, #0]
   27966:	429a      	cmp	r2, r3
   27968:	d123      	bne.n	279b2 <send_message+0xaa>
   2796a:	4620      	mov	r0, r4
   2796c:	892b      	ldrh	r3, [r5, #8]
   2796e:	2280      	movs	r2, #128	; 0x80
   27970:	f840 3b04 	str.w	r3, [r0], #4
   27974:	f105 010a 	add.w	r1, r5, #10
   27978:	f00d fb38 	bl	34fec <memcpy>
   2797c:	2280      	movs	r2, #128	; 0x80
   2797e:	f105 018a 	add.w	r1, r5, #138	; 0x8a
   27982:	f104 0084 	add.w	r0, r4, #132	; 0x84
   27986:	f00d fb31 	bl	34fec <memcpy>
   2798a:	f8d5 310a 	ldr.w	r3, [r5, #266]	; 0x10a
   2798e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   27992:	f8d5 310e 	ldr.w	r3, [r5, #270]	; 0x10e
   27996:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2799a:	f8d5 3112 	ldr.w	r3, [r5, #274]	; 0x112
   2799e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   279a2:	f8d5 3116 	ldr.w	r3, [r5, #278]	; 0x116
   279a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   279aa:	f8d5 311a 	ldr.w	r3, [r5, #282]	; 0x11a
   279ae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   279b2:	6878      	ldr	r0, [r7, #4]
   279b4:	2800      	cmp	r0, #0
   279b6:	d0c4      	beq.n	27942 <send_message+0x3a>
   279b8:	f00c f93f 	bl	33c3a <rpc_client_msg_data_rx_free>
   279bc:	e7c1      	b.n	27942 <send_message+0x3a>
   279be:	f06f 060c 	mvn.w	r6, #12
   279c2:	e7f6      	b.n	279b2 <send_message+0xaa>
   279c4:	f06f 065e 	mvn.w	r6, #94	; 0x5e
   279c8:	e7f3      	b.n	279b2 <send_message+0xaa>
   279ca:	f06f 0615 	mvn.w	r6, #21
   279ce:	e7f0      	b.n	279b2 <send_message+0xaa>
   279d0:	f04f 36ff 	mov.w	r6, #4294967295
   279d4:	e7b5      	b.n	27942 <send_message+0x3a>
   279d6:	bf00      	nop
   279d8:	20010f90 	.word	0x20010f90

000279dc <nrf_modem_gnss_agps_write>:
   279dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279de:	4617      	mov	r7, r2
   279e0:	4605      	mov	r5, r0
   279e2:	2800      	cmp	r0, #0
   279e4:	d059      	beq.n	27a9a <nrf_modem_gnss_agps_write+0xbe>
   279e6:	2900      	cmp	r1, #0
   279e8:	d057      	beq.n	27a9a <nrf_modem_gnss_agps_write+0xbe>
   279ea:	f000 f9b5 	bl	27d58 <nrf_modem_state_is_initialized>
   279ee:	2800      	cmp	r0, #0
   279f0:	d056      	beq.n	27aa0 <nrf_modem_gnss_agps_write+0xc4>
   279f2:	4e2d      	ldr	r6, [pc, #180]	; (27aa8 <nrf_modem_gnss_agps_write+0xcc>)
   279f4:	f04f 31ff 	mov.w	r1, #4294967295
   279f8:	6830      	ldr	r0, [r6, #0]
   279fa:	f7f4 f825 	bl	1ba48 <nrf_modem_os_sem_take>
   279fe:	4604      	mov	r4, r0
   27a00:	2800      	cmp	r0, #0
   27a02:	d145      	bne.n	27a90 <nrf_modem_gnss_agps_write+0xb4>
   27a04:	2072      	movs	r0, #114	; 0x72
   27a06:	f00c ff2d 	bl	34864 <gnss_msg_alloc_and_set_common>
   27a0a:	4604      	mov	r4, r0
   27a0c:	2800      	cmp	r0, #0
   27a0e:	d041      	beq.n	27a94 <nrf_modem_gnss_agps_write+0xb8>
   27a10:	1e7a      	subs	r2, r7, #1
   27a12:	6801      	ldr	r1, [r0, #0]
   27a14:	2a07      	cmp	r2, #7
   27a16:	d834      	bhi.n	27a82 <nrf_modem_gnss_agps_write+0xa6>
   27a18:	e8df f002 	tbb	[pc, r2]
   27a1c:	1a151004 	.word	0x1a151004
   27a20:	2e29241f 	.word	0x2e29241f
   27a24:	4628      	mov	r0, r5
   27a26:	3104      	adds	r1, #4
   27a28:	f00c ff37 	bl	3489a <rpc_gnss_serialize_utc>
   27a2c:	4621      	mov	r1, r4
   27a2e:	2200      	movs	r2, #0
   27a30:	f241 0005 	movw	r0, #4101	; 0x1005
   27a34:	f7ff ff68 	bl	27908 <send_message>
   27a38:	4604      	mov	r4, r0
   27a3a:	e026      	b.n	27a8a <nrf_modem_gnss_agps_write+0xae>
   27a3c:	4628      	mov	r0, r5
   27a3e:	3104      	adds	r1, #4
   27a40:	f00c ff4b 	bl	348da <rpc_gnss_serialize_ephe>
   27a44:	e7f2      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a46:	4628      	mov	r0, r5
   27a48:	3104      	adds	r1, #4
   27a4a:	f00c ff97 	bl	3497c <rpc_gnss_serialize_alm>
   27a4e:	e7ed      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a50:	4628      	mov	r0, r5
   27a52:	3104      	adds	r1, #4
   27a54:	f00c ffc3 	bl	349de <rpc_gnss_serialize_klob>
   27a58:	e7e8      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a5a:	4628      	mov	r0, r5
   27a5c:	3104      	adds	r1, #4
   27a5e:	f00c ffe1 	bl	34a24 <rpc_gnss_serialize_nequick>
   27a62:	e7e3      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a64:	4628      	mov	r0, r5
   27a66:	3104      	adds	r1, #4
   27a68:	f00c fff4 	bl	34a54 <rpc_gnss_serialize_time_and_sv_tow>
   27a6c:	e7de      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a6e:	4628      	mov	r0, r5
   27a70:	3104      	adds	r1, #4
   27a72:	f00d f812 	bl	34a9a <rpc_gnss_serialize_location>
   27a76:	e7d9      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a78:	4628      	mov	r0, r5
   27a7a:	3104      	adds	r1, #4
   27a7c:	f00d f82b 	bl	34ad6 <rpc_gnss_serialize_integrity>
   27a80:	e7d4      	b.n	27a2c <nrf_modem_gnss_agps_write+0x50>
   27a82:	f00c f8d7 	bl	33c34 <rpc_client_msg_tx_free>
   27a86:	f06f 0415 	mvn.w	r4, #21
   27a8a:	6830      	ldr	r0, [r6, #0]
   27a8c:	f7f3 ffb8 	bl	1ba00 <nrf_modem_os_sem_give>
   27a90:	4620      	mov	r0, r4
   27a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a94:	f06f 040b 	mvn.w	r4, #11
   27a98:	e7f7      	b.n	27a8a <nrf_modem_gnss_agps_write+0xae>
   27a9a:	f06f 0415 	mvn.w	r4, #21
   27a9e:	e7f7      	b.n	27a90 <nrf_modem_gnss_agps_write+0xb4>
   27aa0:	f04f 34ff 	mov.w	r4, #4294967295
   27aa4:	e7f4      	b.n	27a90 <nrf_modem_gnss_agps_write+0xb4>
   27aa6:	bf00      	nop
   27aa8:	20010f98 	.word	0x20010f98

00027aac <rpc_gnss_event_handler>:
   27aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27aae:	6804      	ldr	r4, [r0, #0]
   27ab0:	4606      	mov	r6, r0
   27ab2:	b13c      	cbz	r4, 27ac4 <rpc_gnss_event_handler+0x18>
   27ab4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   27ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   27abc:	d104      	bne.n	27ac8 <rpc_gnss_event_handler+0x1c>
   27abe:	4b41      	ldr	r3, [pc, #260]	; (27bc4 <rpc_gnss_event_handler+0x118>)
   27ac0:	e9c3 1400 	strd	r1, r4, [r3]
   27ac4:	2000      	movs	r0, #0
   27ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27ac8:	4d3f      	ldr	r5, [pc, #252]	; (27bc8 <rpc_gnss_event_handler+0x11c>)
   27aca:	682b      	ldr	r3, [r5, #0]
   27acc:	2b00      	cmp	r3, #0
   27ace:	d06f      	beq.n	27bb0 <rpc_gnss_event_handler+0x104>
   27ad0:	f244 0204 	movw	r2, #16388	; 0x4004
   27ad4:	4291      	cmp	r1, r2
   27ad6:	d80b      	bhi.n	27af0 <rpc_gnss_event_handler+0x44>
   27ad8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   27adc:	d968      	bls.n	27bb0 <rpc_gnss_event_handler+0x104>
   27ade:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   27ae2:	3902      	subs	r1, #2
   27ae4:	2902      	cmp	r1, #2
   27ae6:	d82a      	bhi.n	27b3e <rpc_gnss_event_handler+0x92>
   27ae8:	e8df f001 	tbb	[pc, r1]
   27aec:	5047      	.short	0x5047
   27aee:	59          	.byte	0x59
   27aef:	00          	.byte	0x00
   27af0:	f244 1301 	movw	r3, #16641	; 0x4101
   27af4:	4299      	cmp	r1, r3
   27af6:	d02e      	beq.n	27b56 <rpc_gnss_event_handler+0xaa>
   27af8:	f244 2301 	movw	r3, #16897	; 0x4201
   27afc:	4299      	cmp	r1, r3
   27afe:	d157      	bne.n	27bb0 <rpc_gnss_event_handler+0x104>
   27b00:	4e32      	ldr	r6, [pc, #200]	; (27bcc <rpc_gnss_event_handler+0x120>)
   27b02:	6830      	ldr	r0, [r6, #0]
   27b04:	b108      	cbz	r0, 27b0a <rpc_gnss_event_handler+0x5e>
   27b06:	f00c f898 	bl	33c3a <rpc_client_msg_data_rx_free>
   27b0a:	2202      	movs	r2, #2
   27b0c:	4b30      	ldr	r3, [pc, #192]	; (27bd0 <rpc_gnss_event_handler+0x124>)
   27b0e:	6034      	str	r4, [r6, #0]
   27b10:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   27b14:	701a      	strb	r2, [r3, #0]
   27b16:	4e2f      	ldr	r6, [pc, #188]	; (27bd4 <rpc_gnss_event_handler+0x128>)
   27b18:	f014 0708 	ands.w	r7, r4, #8
   27b1c:	682b      	ldr	r3, [r5, #0]
   27b1e:	7832      	ldrb	r2, [r6, #0]
   27b20:	d025      	beq.n	27b6e <rpc_gnss_event_handler+0xc2>
   27b22:	b91a      	cbnz	r2, 27b2c <rpc_gnss_event_handler+0x80>
   27b24:	2005      	movs	r0, #5
   27b26:	4798      	blx	r3
   27b28:	2301      	movs	r3, #1
   27b2a:	7033      	strb	r3, [r6, #0]
   27b2c:	07e3      	lsls	r3, r4, #31
   27b2e:	d502      	bpl.n	27b36 <rpc_gnss_event_handler+0x8a>
   27b30:	2002      	movs	r0, #2
   27b32:	682b      	ldr	r3, [r5, #0]
   27b34:	4798      	blx	r3
   27b36:	2001      	movs	r0, #1
   27b38:	682b      	ldr	r3, [r5, #0]
   27b3a:	4798      	blx	r3
   27b3c:	e7c2      	b.n	27ac4 <rpc_gnss_event_handler+0x18>
   27b3e:	4e23      	ldr	r6, [pc, #140]	; (27bcc <rpc_gnss_event_handler+0x120>)
   27b40:	6830      	ldr	r0, [r6, #0]
   27b42:	b108      	cbz	r0, 27b48 <rpc_gnss_event_handler+0x9c>
   27b44:	f00c f879 	bl	33c3a <rpc_client_msg_data_rx_free>
   27b48:	2200      	movs	r2, #0
   27b4a:	4b21      	ldr	r3, [pc, #132]	; (27bd0 <rpc_gnss_event_handler+0x124>)
   27b4c:	6034      	str	r4, [r6, #0]
   27b4e:	701a      	strb	r2, [r3, #0]
   27b50:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   27b54:	e7df      	b.n	27b16 <rpc_gnss_event_handler+0x6a>
   27b56:	4e1d      	ldr	r6, [pc, #116]	; (27bcc <rpc_gnss_event_handler+0x120>)
   27b58:	6830      	ldr	r0, [r6, #0]
   27b5a:	b108      	cbz	r0, 27b60 <rpc_gnss_event_handler+0xb4>
   27b5c:	f00c f86d 	bl	33c3a <rpc_client_msg_data_rx_free>
   27b60:	2201      	movs	r2, #1
   27b62:	4b1b      	ldr	r3, [pc, #108]	; (27bd0 <rpc_gnss_event_handler+0x124>)
   27b64:	6034      	str	r4, [r6, #0]
   27b66:	701a      	strb	r2, [r3, #0]
   27b68:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   27b6c:	e7d3      	b.n	27b16 <rpc_gnss_event_handler+0x6a>
   27b6e:	2a00      	cmp	r2, #0
   27b70:	d0dc      	beq.n	27b2c <rpc_gnss_event_handler+0x80>
   27b72:	2006      	movs	r0, #6
   27b74:	4798      	blx	r3
   27b76:	7037      	strb	r7, [r6, #0]
   27b78:	e7d8      	b.n	27b2c <rpc_gnss_event_handler+0x80>
   27b7a:	4e17      	ldr	r6, [pc, #92]	; (27bd8 <rpc_gnss_event_handler+0x12c>)
   27b7c:	6830      	ldr	r0, [r6, #0]
   27b7e:	b108      	cbz	r0, 27b84 <rpc_gnss_event_handler+0xd8>
   27b80:	f00c f85b 	bl	33c3a <rpc_client_msg_data_rx_free>
   27b84:	2003      	movs	r0, #3
   27b86:	682b      	ldr	r3, [r5, #0]
   27b88:	6034      	str	r4, [r6, #0]
   27b8a:	e7d6      	b.n	27b3a <rpc_gnss_event_handler+0x8e>
   27b8c:	4e13      	ldr	r6, [pc, #76]	; (27bdc <rpc_gnss_event_handler+0x130>)
   27b8e:	6830      	ldr	r0, [r6, #0]
   27b90:	b108      	cbz	r0, 27b96 <rpc_gnss_event_handler+0xea>
   27b92:	f00c f852 	bl	33c3a <rpc_client_msg_data_rx_free>
   27b96:	2004      	movs	r0, #4
   27b98:	682b      	ldr	r3, [r5, #0]
   27b9a:	6034      	str	r4, [r6, #0]
   27b9c:	e7cd      	b.n	27b3a <rpc_gnss_event_handler+0x8e>
   27b9e:	7822      	ldrb	r2, [r4, #0]
   27ba0:	2a03      	cmp	r2, #3
   27ba2:	d805      	bhi.n	27bb0 <rpc_gnss_event_handler+0x104>
   27ba4:	e8df f002 	tbb	[pc, r2]
   27ba8:	0c0a0802 	.word	0x0c0a0802
   27bac:	2007      	movs	r0, #7
   27bae:	4798      	blx	r3
   27bb0:	6830      	ldr	r0, [r6, #0]
   27bb2:	f00c f842 	bl	33c3a <rpc_client_msg_data_rx_free>
   27bb6:	e785      	b.n	27ac4 <rpc_gnss_event_handler+0x18>
   27bb8:	2008      	movs	r0, #8
   27bba:	e7f8      	b.n	27bae <rpc_gnss_event_handler+0x102>
   27bbc:	2009      	movs	r0, #9
   27bbe:	e7f6      	b.n	27bae <rpc_gnss_event_handler+0x102>
   27bc0:	200a      	movs	r0, #10
   27bc2:	e7f4      	b.n	27bae <rpc_gnss_event_handler+0x102>
   27bc4:	20010f90 	.word	0x20010f90
   27bc8:	20010f80 	.word	0x20010f80
   27bcc:	20010f8c 	.word	0x20010f8c
   27bd0:	20012878 	.word	0x20012878
   27bd4:	20012879 	.word	0x20012879
   27bd8:	20010f88 	.word	0x20010f88
   27bdc:	20010f84 	.word	0x20010f84

00027be0 <rpc_gnss_init>:
   27be0:	b508      	push	{r3, lr}
   27be2:	2300      	movs	r3, #0
   27be4:	4a09      	ldr	r2, [pc, #36]	; (27c0c <rpc_gnss_init+0x2c>)
   27be6:	480a      	ldr	r0, [pc, #40]	; (27c10 <rpc_gnss_init+0x30>)
   27be8:	7013      	strb	r3, [r2, #0]
   27bea:	4a0a      	ldr	r2, [pc, #40]	; (27c14 <rpc_gnss_init+0x34>)
   27bec:	7013      	strb	r3, [r2, #0]
   27bee:	4a0a      	ldr	r2, [pc, #40]	; (27c18 <rpc_gnss_init+0x38>)
   27bf0:	7013      	strb	r3, [r2, #0]
   27bf2:	4a0a      	ldr	r2, [pc, #40]	; (27c1c <rpc_gnss_init+0x3c>)
   27bf4:	7013      	strb	r3, [r2, #0]
   27bf6:	4a0a      	ldr	r2, [pc, #40]	; (27c20 <rpc_gnss_init+0x40>)
   27bf8:	6013      	str	r3, [r2, #0]
   27bfa:	2201      	movs	r2, #1
   27bfc:	4611      	mov	r1, r2
   27bfe:	f7f3 fecb 	bl	1b998 <nrf_modem_os_sem_init>
   27c02:	2800      	cmp	r0, #0
   27c04:	bf18      	it	ne
   27c06:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   27c0a:	bd08      	pop	{r3, pc}
   27c0c:	20012879 	.word	0x20012879
   27c10:	20010f98 	.word	0x20010f98
   27c14:	2001287b 	.word	0x2001287b
   27c18:	2001287a 	.word	0x2001287a
   27c1c:	20012878 	.word	0x20012878
   27c20:	20010f80 	.word	0x20010f80

00027c24 <rpc_gnss_deinit>:
   27c24:	b510      	push	{r4, lr}
   27c26:	4c0b      	ldr	r4, [pc, #44]	; (27c54 <rpc_gnss_deinit+0x30>)
   27c28:	6820      	ldr	r0, [r4, #0]
   27c2a:	b118      	cbz	r0, 27c34 <rpc_gnss_deinit+0x10>
   27c2c:	f00c f805 	bl	33c3a <rpc_client_msg_data_rx_free>
   27c30:	2300      	movs	r3, #0
   27c32:	6023      	str	r3, [r4, #0]
   27c34:	4c08      	ldr	r4, [pc, #32]	; (27c58 <rpc_gnss_deinit+0x34>)
   27c36:	6820      	ldr	r0, [r4, #0]
   27c38:	b118      	cbz	r0, 27c42 <rpc_gnss_deinit+0x1e>
   27c3a:	f00b fffe 	bl	33c3a <rpc_client_msg_data_rx_free>
   27c3e:	2300      	movs	r3, #0
   27c40:	6023      	str	r3, [r4, #0]
   27c42:	4c06      	ldr	r4, [pc, #24]	; (27c5c <rpc_gnss_deinit+0x38>)
   27c44:	6820      	ldr	r0, [r4, #0]
   27c46:	b118      	cbz	r0, 27c50 <rpc_gnss_deinit+0x2c>
   27c48:	f00b fff7 	bl	33c3a <rpc_client_msg_data_rx_free>
   27c4c:	2300      	movs	r3, #0
   27c4e:	6023      	str	r3, [r4, #0]
   27c50:	2000      	movs	r0, #0
   27c52:	bd10      	pop	{r4, pc}
   27c54:	20010f8c 	.word	0x20010f8c
   27c58:	20010f88 	.word	0x20010f88
   27c5c:	20010f84 	.word	0x20010f84

00027c60 <modem_off>:
   27c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27c62:	2501      	movs	r5, #1
   27c64:	4c07      	ldr	r4, [pc, #28]	; (27c84 <modem_off+0x24>)
   27c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   27c6a:	6165      	str	r5, [r4, #20]
   27c6c:	f00a ffa2 	bl	32bb4 <nrf_modem_os_busywait>
   27c70:	2300      	movs	r3, #0
   27c72:	6163      	str	r3, [r4, #20]
   27c74:	9301      	str	r3, [sp, #4]
   27c76:	6125      	str	r5, [r4, #16]
   27c78:	6923      	ldr	r3, [r4, #16]
   27c7a:	9301      	str	r3, [sp, #4]
   27c7c:	9b01      	ldr	r3, [sp, #4]
   27c7e:	b003      	add	sp, #12
   27c80:	bd30      	pop	{r4, r5, pc}
   27c82:	bf00      	nop
   27c84:	40005600 	.word	0x40005600

00027c88 <atomic_set.constprop.0.isra.0>:
   27c88:	4b03      	ldr	r3, [pc, #12]	; (27c98 <atomic_set.constprop.0.isra.0+0x10>)
   27c8a:	e8d3 2fef 	ldaex	r2, [r3]
   27c8e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   27c92:	2900      	cmp	r1, #0
   27c94:	d1f9      	bne.n	27c8a <atomic_set.constprop.0.isra.0+0x2>
   27c96:	4770      	bx	lr
   27c98:	20010f9c 	.word	0x20010f9c

00027c9c <nrf_modem_init>:
   27c9c:	b570      	push	{r4, r5, r6, lr}
   27c9e:	4604      	mov	r4, r0
   27ca0:	b086      	sub	sp, #24
   27ca2:	b390      	cbz	r0, 27d0a <nrf_modem_init+0x6e>
   27ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   27ca6:	b3ab      	cbz	r3, 27d14 <nrf_modem_init+0x78>
   27ca8:	2201      	movs	r2, #1
   27caa:	4b1d      	ldr	r3, [pc, #116]	; (27d20 <nrf_modem_init+0x84>)
   27cac:	e8d3 1fef 	ldaex	r1, [r3]
   27cb0:	2900      	cmp	r1, #0
   27cb2:	d103      	bne.n	27cbc <nrf_modem_init+0x20>
   27cb4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   27cb8:	2800      	cmp	r0, #0
   27cba:	d1f7      	bne.n	27cac <nrf_modem_init+0x10>
   27cbc:	d12d      	bne.n	27d1a <nrf_modem_init+0x7e>
   27cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   27cc0:	f000 f832 	bl	27d28 <nrf_modem_fault_handler_set>
   27cc4:	f7f3 ff38 	bl	1bb38 <nrf_modem_os_init>
   27cc8:	6a23      	ldr	r3, [r4, #32]
   27cca:	ad02      	add	r5, sp, #8
   27ccc:	f88d 3004 	strb.w	r3, [sp, #4]
   27cd0:	4b14      	ldr	r3, [pc, #80]	; (27d24 <nrf_modem_init+0x88>)
   27cd2:	9400      	str	r4, [sp, #0]
   27cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   27cd6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   27cda:	4668      	mov	r0, sp
   27cdc:	f00b ff43 	bl	33b66 <rpc_init>
   27ce0:	4604      	mov	r4, r0
   27ce2:	b950      	cbnz	r0, 27cfa <nrf_modem_init+0x5e>
   27ce4:	4606      	mov	r6, r0
   27ce6:	f855 3b04 	ldr.w	r3, [r5], #4
   27cea:	4798      	blx	r3
   27cec:	4604      	mov	r4, r0
   27cee:	b920      	cbnz	r0, 27cfa <nrf_modem_init+0x5e>
   27cf0:	3601      	adds	r6, #1
   27cf2:	2e04      	cmp	r6, #4
   27cf4:	d1f7      	bne.n	27ce6 <nrf_modem_init+0x4a>
   27cf6:	2002      	movs	r0, #2
   27cf8:	e004      	b.n	27d04 <nrf_modem_init+0x68>
   27cfa:	f7ff ffb1 	bl	27c60 <modem_off>
   27cfe:	f7f3 ff33 	bl	1bb68 <nrf_modem_os_shutdown>
   27d02:	2000      	movs	r0, #0
   27d04:	f7ff ffc0 	bl	27c88 <atomic_set.constprop.0.isra.0>
   27d08:	e001      	b.n	27d0e <nrf_modem_init+0x72>
   27d0a:	f06f 040d 	mvn.w	r4, #13
   27d0e:	4620      	mov	r0, r4
   27d10:	b006      	add	sp, #24
   27d12:	bd70      	pop	{r4, r5, r6, pc}
   27d14:	f06f 0415 	mvn.w	r4, #21
   27d18:	e7f9      	b.n	27d0e <nrf_modem_init+0x72>
   27d1a:	f04f 34ff 	mov.w	r4, #4294967295
   27d1e:	e7f6      	b.n	27d0e <nrf_modem_init+0x72>
   27d20:	20010f9c 	.word	0x20010f9c
   27d24:	00036710 	.word	0x00036710

00027d28 <nrf_modem_fault_handler_set>:
   27d28:	4b01      	ldr	r3, [pc, #4]	; (27d30 <nrf_modem_fault_handler_set+0x8>)
   27d2a:	6018      	str	r0, [r3, #0]
   27d2c:	4770      	bx	lr
   27d2e:	bf00      	nop
   27d30:	20010fa0 	.word	0x20010fa0

00027d34 <nrf_modem_fault_handler_internal>:
   27d34:	b507      	push	{r0, r1, r2, lr}
   27d36:	4b04      	ldr	r3, [pc, #16]	; (27d48 <nrf_modem_fault_handler_internal+0x14>)
   27d38:	e9cd 0100 	strd	r0, r1, [sp]
   27d3c:	681b      	ldr	r3, [r3, #0]
   27d3e:	4668      	mov	r0, sp
   27d40:	4798      	blx	r3
   27d42:	b003      	add	sp, #12
   27d44:	f85d fb04 	ldr.w	pc, [sp], #4
   27d48:	20010fa0 	.word	0x20010fa0

00027d4c <nrf_modem_state_set>:
   27d4c:	4b01      	ldr	r3, [pc, #4]	; (27d54 <nrf_modem_state_set+0x8>)
   27d4e:	7018      	strb	r0, [r3, #0]
   27d50:	4770      	bx	lr
   27d52:	bf00      	nop
   27d54:	2001287c 	.word	0x2001287c

00027d58 <nrf_modem_state_is_initialized>:
   27d58:	4b02      	ldr	r3, [pc, #8]	; (27d64 <nrf_modem_state_is_initialized+0xc>)
   27d5a:	7818      	ldrb	r0, [r3, #0]
   27d5c:	1e43      	subs	r3, r0, #1
   27d5e:	4258      	negs	r0, r3
   27d60:	4158      	adcs	r0, r3
   27d62:	4770      	bx	lr
   27d64:	2001287c 	.word	0x2001287c

00027d68 <ipc_trace_init>:
   27d68:	2100      	movs	r1, #0
   27d6a:	4b07      	ldr	r3, [pc, #28]	; (27d88 <ipc_trace_init+0x20>)
   27d6c:	2201      	movs	r2, #1
   27d6e:	7019      	strb	r1, [r3, #0]
   27d70:	4b06      	ldr	r3, [pc, #24]	; (27d8c <ipc_trace_init+0x24>)
   27d72:	7019      	strb	r1, [r3, #0]
   27d74:	4b06      	ldr	r3, [pc, #24]	; (27d90 <ipc_trace_init+0x28>)
   27d76:	6019      	str	r1, [r3, #0]
   27d78:	4b06      	ldr	r3, [pc, #24]	; (27d94 <ipc_trace_init+0x2c>)
   27d7a:	6019      	str	r1, [r3, #0]
   27d7c:	4b06      	ldr	r3, [pc, #24]	; (27d98 <ipc_trace_init+0x30>)
   27d7e:	6018      	str	r0, [r3, #0]
   27d80:	4806      	ldr	r0, [pc, #24]	; (27d9c <ipc_trace_init+0x34>)
   27d82:	f7f3 be09 	b.w	1b998 <nrf_modem_os_sem_init>
   27d86:	bf00      	nop
   27d88:	2001287d 	.word	0x2001287d
   27d8c:	2001287e 	.word	0x2001287e
   27d90:	20010fa8 	.word	0x20010fa8
   27d94:	20010fac 	.word	0x20010fac
   27d98:	20010fbc 	.word	0x20010fbc
   27d9c:	20010fa4 	.word	0x20010fa4

00027da0 <ipc_trace_handler>:
   27da0:	b470      	push	{r4, r5, r6}
   27da2:	4b2d      	ldr	r3, [pc, #180]	; (27e58 <ipc_trace_handler+0xb8>)
   27da4:	681b      	ldr	r3, [r3, #0]
   27da6:	6919      	ldr	r1, [r3, #16]
   27da8:	6958      	ldr	r0, [r3, #20]
   27daa:	7c1a      	ldrb	r2, [r3, #16]
   27dac:	2200      	movs	r2, #0
   27dae:	741a      	strb	r2, [r3, #16]
   27db0:	7c5c      	ldrb	r4, [r3, #17]
   27db2:	745a      	strb	r2, [r3, #17]
   27db4:	7c9c      	ldrb	r4, [r3, #18]
   27db6:	749a      	strb	r2, [r3, #18]
   27db8:	7cdc      	ldrb	r4, [r3, #19]
   27dba:	74da      	strb	r2, [r3, #19]
   27dbc:	7d1c      	ldrb	r4, [r3, #20]
   27dbe:	751a      	strb	r2, [r3, #20]
   27dc0:	7d5c      	ldrb	r4, [r3, #21]
   27dc2:	755a      	strb	r2, [r3, #21]
   27dc4:	7d9c      	ldrb	r4, [r3, #22]
   27dc6:	2903      	cmp	r1, #3
   27dc8:	759a      	strb	r2, [r3, #22]
   27dca:	7ddc      	ldrb	r4, [r3, #23]
   27dcc:	75da      	strb	r2, [r3, #23]
   27dce:	d029      	beq.n	27e24 <ipc_trace_handler+0x84>
   27dd0:	2904      	cmp	r1, #4
   27dd2:	d033      	beq.n	27e3c <ipc_trace_handler+0x9c>
   27dd4:	2901      	cmp	r1, #1
   27dd6:	d12f      	bne.n	27e38 <ipc_trace_handler+0x98>
   27dd8:	6885      	ldr	r5, [r0, #8]
   27dda:	4e20      	ldr	r6, [pc, #128]	; (27e5c <ipc_trace_handler+0xbc>)
   27ddc:	4295      	cmp	r5, r2
   27dde:	d110      	bne.n	27e02 <ipc_trace_handler+0x62>
   27de0:	2101      	movs	r1, #1
   27de2:	7a1a      	ldrb	r2, [r3, #8]
   27de4:	2200      	movs	r2, #0
   27de6:	7219      	strb	r1, [r3, #8]
   27de8:	7a59      	ldrb	r1, [r3, #9]
   27dea:	725a      	strb	r2, [r3, #9]
   27dec:	7a99      	ldrb	r1, [r3, #10]
   27dee:	729a      	strb	r2, [r3, #10]
   27df0:	7ada      	ldrb	r2, [r3, #11]
   27df2:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   27df6:	72da      	strb	r2, [r3, #11]
   27df8:	4b19      	ldr	r3, [pc, #100]	; (27e60 <ipc_trace_handler+0xc0>)
   27dfa:	bc70      	pop	{r4, r5, r6}
   27dfc:	6818      	ldr	r0, [r3, #0]
   27dfe:	f7f3 bdff 	b.w	1ba00 <nrf_modem_os_sem_give>
   27e02:	1c91      	adds	r1, r2, #2
   27e04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   27e08:	684c      	ldr	r4, [r1, #4]
   27e0a:	7821      	ldrb	r1, [r4, #0]
   27e0c:	2962      	cmp	r1, #98	; 0x62
   27e0e:	d007      	beq.n	27e20 <ipc_trace_handler+0x80>
   27e10:	3963      	subs	r1, #99	; 0x63
   27e12:	bf18      	it	ne
   27e14:	2101      	movne	r1, #1
   27e16:	0049      	lsls	r1, r1, #1
   27e18:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   27e1c:	3201      	adds	r2, #1
   27e1e:	e7dd      	b.n	27ddc <ipc_trace_handler+0x3c>
   27e20:	2101      	movs	r1, #1
   27e22:	e7f9      	b.n	27e18 <ipc_trace_handler+0x78>
   27e24:	7a18      	ldrb	r0, [r3, #8]
   27e26:	7219      	strb	r1, [r3, #8]
   27e28:	7a59      	ldrb	r1, [r3, #9]
   27e2a:	725a      	strb	r2, [r3, #9]
   27e2c:	7a99      	ldrb	r1, [r3, #10]
   27e2e:	729a      	strb	r2, [r3, #10]
   27e30:	7ada      	ldrb	r2, [r3, #11]
   27e32:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   27e36:	72da      	strb	r2, [r3, #11]
   27e38:	bc70      	pop	{r4, r5, r6}
   27e3a:	4770      	bx	lr
   27e3c:	7a18      	ldrb	r0, [r3, #8]
   27e3e:	7219      	strb	r1, [r3, #8]
   27e40:	7a59      	ldrb	r1, [r3, #9]
   27e42:	725a      	strb	r2, [r3, #9]
   27e44:	7a99      	ldrb	r1, [r3, #10]
   27e46:	729a      	strb	r2, [r3, #10]
   27e48:	7ada      	ldrb	r2, [r3, #11]
   27e4a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   27e4e:	72da      	strb	r2, [r3, #11]
   27e50:	2201      	movs	r2, #1
   27e52:	4b04      	ldr	r3, [pc, #16]	; (27e64 <ipc_trace_handler+0xc4>)
   27e54:	701a      	strb	r2, [r3, #0]
   27e56:	e7ef      	b.n	27e38 <ipc_trace_handler+0x98>
   27e58:	20010fbc 	.word	0x20010fbc
   27e5c:	20010fb0 	.word	0x20010fb0
   27e60:	20010fa4 	.word	0x20010fa4
   27e64:	2001287e 	.word	0x2001287e

00027e68 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   27e68:	4b01      	ldr	r3, [pc, #4]	; (27e70 <z_impl_z_errno+0x8>)
   27e6a:	6898      	ldr	r0, [r3, #8]
}
   27e6c:	3064      	adds	r0, #100	; 0x64
   27e6e:	4770      	bx	lr
   27e70:	20010fc0 	.word	0x20010fc0

00027e74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   27e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e78:	b086      	sub	sp, #24
   27e7a:	4604      	mov	r4, r0
   27e7c:	460e      	mov	r6, r1
   27e7e:	af00      	add	r7, sp, #0
	__asm__ volatile(
   27e80:	f04f 0320 	mov.w	r3, #32
   27e84:	f3ef 8811 	mrs	r8, BASEPRI
   27e88:	f383 8812 	msr	BASEPRI_MAX, r3
   27e8c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   27e90:	f002 fde0 	bl	2aa54 <z_impl_z_current_get>
   27e94:	2c04      	cmp	r4, #4
   27e96:	bf98      	it	ls
   27e98:	4b34      	ldrls	r3, [pc, #208]	; (27f6c <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   27e9a:	46e9      	mov	r9, sp
   27e9c:	b08a      	sub	sp, #40	; 0x28
   27e9e:	4605      	mov	r5, r0
   27ea0:	466a      	mov	r2, sp
   27ea2:	bf94      	ite	ls
   27ea4:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   27ea8:	4b31      	ldrhi	r3, [pc, #196]	; (27f70 <z_fatal_error+0xfc>)
   27eaa:	61d3      	str	r3, [r2, #28]
   27eac:	f240 3301 	movw	r3, #769	; 0x301
   27eb0:	f04f 0a00 	mov.w	sl, #0
   27eb4:	8493      	strh	r3, [r2, #36]	; 0x24
   27eb6:	492f      	ldr	r1, [pc, #188]	; (27f74 <z_fatal_error+0x100>)
   27eb8:	4b2f      	ldr	r3, [pc, #188]	; (27f78 <z_fatal_error+0x104>)
   27eba:	e9c2 1405 	strd	r1, r4, [r2, #20]
   27ebe:	f8c2 a020 	str.w	sl, [r2, #32]
   27ec2:	f842 3f10 	str.w	r3, [r2, #16]!
   27ec6:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   27eca:	4653      	mov	r3, sl
   27ecc:	482b      	ldr	r0, [pc, #172]	; (27f7c <z_fatal_error+0x108>)
   27ece:	f7e6 fca5 	bl	e81c <z_impl_z_log_msg_static_create>
   27ed2:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   27ed4:	b17e      	cbz	r6, 27ef6 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   27ed6:	69f3      	ldr	r3, [r6, #28]
   27ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27edc:	b15b      	cbz	r3, 27ef6 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   27ede:	4b28      	ldr	r3, [pc, #160]	; (27f80 <z_fatal_error+0x10c>)
   27ee0:	617b      	str	r3, [r7, #20]
   27ee2:	2302      	movs	r3, #2
   27ee4:	613b      	str	r3, [r7, #16]
   27ee6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27eea:	4653      	mov	r3, sl
   27eec:	4823      	ldr	r0, [pc, #140]	; (27f7c <z_fatal_error+0x108>)
   27eee:	f107 0210 	add.w	r2, r7, #16
   27ef2:	f7e6 fc93 	bl	e81c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   27ef6:	b12d      	cbz	r5, 27f04 <z_fatal_error+0x90>
   27ef8:	4628      	mov	r0, r5
   27efa:	f00c fe4e 	bl	34b9a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   27efe:	b108      	cbz	r0, 27f04 <z_fatal_error+0x90>
   27f00:	7803      	ldrb	r3, [r0, #0]
   27f02:	b903      	cbnz	r3, 27f06 <z_fatal_error+0x92>
		thread_name = "unknown";
   27f04:	481f      	ldr	r0, [pc, #124]	; (27f84 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   27f06:	46e9      	mov	r9, sp
   27f08:	b08a      	sub	sp, #40	; 0x28
   27f0a:	466a      	mov	r2, sp
   27f0c:	4b1e      	ldr	r3, [pc, #120]	; (27f88 <z_fatal_error+0x114>)
   27f0e:	61d0      	str	r0, [r2, #28]
   27f10:	e9c2 3505 	strd	r3, r5, [r2, #20]
   27f14:	f240 3301 	movw	r3, #769	; 0x301
   27f18:	8413      	strh	r3, [r2, #32]
   27f1a:	4b1c      	ldr	r3, [pc, #112]	; (27f8c <z_fatal_error+0x118>)
   27f1c:	f842 3f10 	str.w	r3, [r2, #16]!
   27f20:	2300      	movs	r3, #0
   27f22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   27f26:	4815      	ldr	r0, [pc, #84]	; (27f7c <z_fatal_error+0x108>)
   27f28:	f7e6 fc78 	bl	e81c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   27f2c:	4631      	mov	r1, r6
   27f2e:	46cd      	mov	sp, r9
   27f30:	4620      	mov	r0, r4
   27f32:	f7f8 f8a5 	bl	20080 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   27f36:	2c04      	cmp	r4, #4
   27f38:	d10c      	bne.n	27f54 <z_fatal_error+0xe0>
   27f3a:	4915      	ldr	r1, [pc, #84]	; (27f90 <z_fatal_error+0x11c>)
   27f3c:	2393      	movs	r3, #147	; 0x93
   27f3e:	4a15      	ldr	r2, [pc, #84]	; (27f94 <z_fatal_error+0x120>)
   27f40:	4815      	ldr	r0, [pc, #84]	; (27f98 <z_fatal_error+0x124>)
   27f42:	f006 fd07 	bl	2e954 <assert_print>
   27f46:	4815      	ldr	r0, [pc, #84]	; (27f9c <z_fatal_error+0x128>)
   27f48:	f006 fd04 	bl	2e954 <assert_print>
   27f4c:	2193      	movs	r1, #147	; 0x93
   27f4e:	4811      	ldr	r0, [pc, #68]	; (27f94 <z_fatal_error+0x120>)
   27f50:	f006 fcf9 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   27f54:	f388 8811 	msr	BASEPRI, r8
   27f58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   27f5c:	4628      	mov	r0, r5
   27f5e:	f7e8 ff4b 	bl	10df8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   27f62:	3718      	adds	r7, #24
   27f64:	46bd      	mov	sp, r7
   27f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27f6a:	bf00      	nop
   27f6c:	00037770 	.word	0x00037770
   27f70:	000403b7 	.word	0x000403b7
   27f74:	000403c5 	.word	0x000403c5
   27f78:	01000005 	.word	0x01000005
   27f7c:	000365c8 	.word	0x000365c8
   27f80:	000403ed 	.word	0x000403ed
   27f84:	00039ca2 	.word	0x00039ca2
   27f88:	0004040e 	.word	0x0004040e
   27f8c:	01000004 	.word	0x01000004
   27f90:	00040448 	.word	0x00040448
   27f94:	00040426 	.word	0x00040426
   27f98:	000381c3 	.word	0x000381c3
   27f9c:	00040465 	.word	0x00040465

00027fa0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   27fa0:	4b10      	ldr	r3, [pc, #64]	; (27fe4 <z_sys_init_run_level+0x44>)
{
   27fa2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   27fa4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27fa8:	3001      	adds	r0, #1
   27faa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   27fae:	42a6      	cmp	r6, r4
   27fb0:	d800      	bhi.n	27fb4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   27fb2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   27fb4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   27fb8:	b18d      	cbz	r5, 27fde <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   27fba:	4628      	mov	r0, r5
   27fbc:	4798      	blx	r3
			if (rc != 0) {
   27fbe:	b138      	cbz	r0, 27fd0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   27fc0:	2800      	cmp	r0, #0
   27fc2:	bfb8      	it	lt
   27fc4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   27fc6:	28ff      	cmp	r0, #255	; 0xff
   27fc8:	bfa8      	it	ge
   27fca:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   27fcc:	68eb      	ldr	r3, [r5, #12]
   27fce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   27fd0:	68ea      	ldr	r2, [r5, #12]
   27fd2:	7853      	ldrb	r3, [r2, #1]
   27fd4:	f043 0301 	orr.w	r3, r3, #1
   27fd8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   27fda:	3408      	adds	r4, #8
   27fdc:	e7e7      	b.n	27fae <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   27fde:	4798      	blx	r3
   27fe0:	e7fb      	b.n	27fda <z_sys_init_run_level+0x3a>
   27fe2:	bf00      	nop
   27fe4:	00037784 	.word	0x00037784

00027fe8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   27fe8:	2201      	movs	r2, #1
{
   27fea:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   27fec:	4b09      	ldr	r3, [pc, #36]	; (28014 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   27fee:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   27ff0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   27ff2:	f7ff ffd5 	bl	27fa0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   27ff6:	f003 fdd3 	bl	2bba0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   27ffa:	2004      	movs	r0, #4
   27ffc:	f7ff ffd0 	bl	27fa0 <z_sys_init_run_level>

	z_init_static_threads();
   28000:	f000 fb66 	bl	286d0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   28004:	f7e3 fbc6 	bl	b794 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   28008:	4a03      	ldr	r2, [pc, #12]	; (28018 <bg_thread_main+0x30>)
   2800a:	7b13      	ldrb	r3, [r2, #12]
   2800c:	f023 0301 	bic.w	r3, r3, #1
   28010:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   28012:	bd08      	pop	{r3, pc}
   28014:	2001287f 	.word	0x2001287f
   28018:	2000f6b8 	.word	0x2000f6b8

0002801c <z_bss_zero>:
{
   2801c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2801e:	4803      	ldr	r0, [pc, #12]	; (2802c <z_bss_zero+0x10>)
   28020:	4a03      	ldr	r2, [pc, #12]	; (28030 <z_bss_zero+0x14>)
   28022:	2100      	movs	r1, #0
   28024:	1a12      	subs	r2, r2, r0
   28026:	f00c fd83 	bl	34b30 <z_early_memset>
}
   2802a:	bd08      	pop	{r3, pc}
   2802c:	2000d1f0 	.word	0x2000d1f0
   28030:	20012884 	.word	0x20012884

00028034 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   28034:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   28036:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   28038:	4e13      	ldr	r6, [pc, #76]	; (28088 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   2803a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   2803c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   28040:	2300      	movs	r3, #0
{
   28042:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   28044:	e9cd 2304 	strd	r2, r3, [sp, #16]
   28048:	220f      	movs	r2, #15
   2804a:	9301      	str	r3, [sp, #4]
   2804c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   28050:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   28052:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   28056:	4d0d      	ldr	r5, [pc, #52]	; (2808c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   28058:	490d      	ldr	r1, [pc, #52]	; (28090 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2805a:	fb03 5500 	mla	r5, r3, r0, r5
{
   2805e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   28060:	fb02 1100 	mla	r1, r2, r0, r1
   28064:	4b0b      	ldr	r3, [pc, #44]	; (28094 <z_init_cpu+0x60>)
   28066:	4630      	mov	r0, r6
   28068:	9500      	str	r5, [sp, #0]
   2806a:	f000 fa97 	bl	2859c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2806e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   28070:	742c      	strb	r4, [r5, #16]
   28072:	f023 0304 	bic.w	r3, r3, #4
   28076:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   28078:	4b07      	ldr	r3, [pc, #28]	; (28098 <z_init_cpu+0x64>)
   2807a:	3401      	adds	r4, #1
   2807c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   28080:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   28082:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   28084:	b006      	add	sp, #24
   28086:	bd70      	pop	{r4, r5, r6, pc}
   28088:	2000f630 	.word	0x2000f630
   2808c:	20010fc0 	.word	0x20010fc0
   28090:	200155e0 	.word	0x200155e0
   28094:	00028821 	.word	0x00028821
   28098:	20014de0 	.word	0x20014de0

0002809c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   2809c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2809e:	2000      	movs	r0, #0
{
   280a0:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   280a2:	f7ff ff7d 	bl	27fa0 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   280a6:	4b2f      	ldr	r3, [pc, #188]	; (28164 <z_cstart+0xc8>)
	uint32_t msp =
   280a8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   280ac:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   280b0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   280b4:	2400      	movs	r4, #0
   280b6:	23e0      	movs	r3, #224	; 0xe0
   280b8:	4d2b      	ldr	r5, [pc, #172]	; (28168 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   280ba:	4e2c      	ldr	r6, [pc, #176]	; (2816c <z_cstart+0xd0>)
   280bc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   280c0:	77ec      	strb	r4, [r5, #31]
   280c2:	762c      	strb	r4, [r5, #24]
   280c4:	766c      	strb	r4, [r5, #25]
   280c6:	76ac      	strb	r4, [r5, #26]
   280c8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   280cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   280ce:	4f28      	ldr	r7, [pc, #160]	; (28170 <z_cstart+0xd4>)
   280d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   280d4:	626b      	str	r3, [r5, #36]	; 0x24
   280d6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   280da:	f7e8 fdf1 	bl	10cc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   280de:	f7e8 f8db 	bl	10298 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   280e2:	f04f 33ff 	mov.w	r3, #4294967295
   280e6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   280e8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   280ea:	f7e9 f865 	bl	111b8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   280ee:	f7e8 fe99 	bl	10e24 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   280f2:	f7e6 f985 	bl	e400 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   280f6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   280fa:	ad06      	add	r5, sp, #24
   280fc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   280fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   28102:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   28106:	f003 fd2d 	bl	2bb64 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2810a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2810c:	f00c fd04 	bl	34b18 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   28110:	2001      	movs	r0, #1
   28112:	f7ff ff45 	bl	27fa0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   28116:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   28118:	4d16      	ldr	r5, [pc, #88]	; (28174 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2811a:	f7ff ff41 	bl	27fa0 <z_sys_init_run_level>
	z_sched_init();
   2811e:	f002 fb23 	bl	2a768 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28122:	4b15      	ldr	r3, [pc, #84]	; (28178 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   28124:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28126:	9305      	str	r3, [sp, #20]
   28128:	2301      	movs	r3, #1
   2812a:	4914      	ldr	r1, [pc, #80]	; (2817c <z_cstart+0xe0>)
   2812c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   28130:	e9cd 4303 	strd	r4, r3, [sp, #12]
   28134:	4628      	mov	r0, r5
   28136:	463b      	mov	r3, r7
   28138:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2813c:	9400      	str	r4, [sp, #0]
   2813e:	f000 fa2d 	bl	2859c <z_setup_new_thread>
   28142:	4606      	mov	r6, r0
   28144:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   28146:	4628      	mov	r0, r5
   28148:	f022 0204 	bic.w	r2, r2, #4
   2814c:	736a      	strb	r2, [r5, #13]
   2814e:	f001 fcf1 	bl	29b34 <z_ready_thread>
	z_init_cpu(0);
   28152:	4620      	mov	r0, r4
   28154:	f7ff ff6e 	bl	28034 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   28158:	463a      	mov	r2, r7
   2815a:	4631      	mov	r1, r6
   2815c:	4628      	mov	r0, r5
   2815e:	f7e8 fa1d 	bl	1059c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   28162:	bf00      	nop
   28164:	20014de0 	.word	0x20014de0
   28168:	e000ed00 	.word	0xe000ed00
   2816c:	20010fc0 	.word	0x20010fc0
   28170:	00027fe9 	.word	0x00027fe9
   28174:	2000f6b8 	.word	0x2000f6b8
   28178:	000404e4 	.word	0x000404e4
   2817c:	20015720 	.word	0x20015720

00028180 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   28180:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   28182:	4c0d      	ldr	r4, [pc, #52]	; (281b8 <statics_init+0x38>)
   28184:	4d0d      	ldr	r5, [pc, #52]	; (281bc <statics_init+0x3c>)
   28186:	42ac      	cmp	r4, r5
   28188:	d913      	bls.n	281b2 <statics_init+0x32>
   2818a:	490d      	ldr	r1, [pc, #52]	; (281c0 <statics_init+0x40>)
   2818c:	2317      	movs	r3, #23
   2818e:	4a0d      	ldr	r2, [pc, #52]	; (281c4 <statics_init+0x44>)
   28190:	480d      	ldr	r0, [pc, #52]	; (281c8 <statics_init+0x48>)
   28192:	f006 fbdf 	bl	2e954 <assert_print>
   28196:	480d      	ldr	r0, [pc, #52]	; (281cc <statics_init+0x4c>)
   28198:	f006 fbdc 	bl	2e954 <assert_print>
   2819c:	2117      	movs	r1, #23
   2819e:	4809      	ldr	r0, [pc, #36]	; (281c4 <statics_init+0x44>)
   281a0:	f006 fbd1 	bl	2e946 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   281a4:	4620      	mov	r0, r4
   281a6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   281aa:	f00c fcc5 	bl	34b38 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   281ae:	3418      	adds	r4, #24
   281b0:	e7e9      	b.n	28186 <statics_init+0x6>
   281b2:	d3f7      	bcc.n	281a4 <statics_init+0x24>
		}
	}
	return 0;
}
   281b4:	2000      	movs	r0, #0
   281b6:	bd38      	pop	{r3, r4, r5, pc}
   281b8:	2000ce24 	.word	0x2000ce24
   281bc:	2000ce54 	.word	0x2000ce54
   281c0:	0004050e 	.word	0x0004050e
   281c4:	000404ec 	.word	0x000404ec
   281c8:	000381c3 	.word	0x000381c3
   281cc:	000387c1 	.word	0x000387c1

000281d0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   281d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281d4:	b085      	sub	sp, #20
   281d6:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   281da:	4680      	mov	r8, r0
   281dc:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   281de:	4648      	mov	r0, r9
   281e0:	4659      	mov	r1, fp
{
   281e2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   281e4:	f00c fdd9 	bl	34d9a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   281e8:	f1bb 3fff 	cmp.w	fp, #4294967295
   281ec:	bf08      	it	eq
   281ee:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   281f2:	4606      	mov	r6, r0
   281f4:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   281f6:	bf04      	itt	eq
   281f8:	f04f 36ff 	moveq.w	r6, #4294967295
   281fc:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28200:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   28204:	f04f 0320 	mov.w	r3, #32
   28208:	f3ef 8511 	mrs	r5, BASEPRI
   2820c:	f383 8812 	msr	BASEPRI_MAX, r3
   28210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28214:	4620      	mov	r0, r4
   28216:	f000 fadf 	bl	287d8 <z_spin_lock_valid>
   2821a:	b960      	cbnz	r0, 28236 <k_heap_aligned_alloc+0x66>
   2821c:	2394      	movs	r3, #148	; 0x94
   2821e:	4a33      	ldr	r2, [pc, #204]	; (282ec <k_heap_aligned_alloc+0x11c>)
   28220:	4933      	ldr	r1, [pc, #204]	; (282f0 <k_heap_aligned_alloc+0x120>)
   28222:	4834      	ldr	r0, [pc, #208]	; (282f4 <k_heap_aligned_alloc+0x124>)
   28224:	f006 fb96 	bl	2e954 <assert_print>
   28228:	4621      	mov	r1, r4
   2822a:	4833      	ldr	r0, [pc, #204]	; (282f8 <k_heap_aligned_alloc+0x128>)
   2822c:	f006 fb92 	bl	2e954 <assert_print>
   28230:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28232:	482e      	ldr	r0, [pc, #184]	; (282ec <k_heap_aligned_alloc+0x11c>)
   28234:	e031      	b.n	2829a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   28236:	4620      	mov	r0, r4
   28238:	f000 faea 	bl	28810 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2823c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28240:	b113      	cbz	r3, 28248 <k_heap_aligned_alloc+0x78>
   28242:	ea5b 0909 	orrs.w	r9, fp, r9
   28246:	d11d      	bne.n	28284 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28248:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2824c:	4652      	mov	r2, sl
   2824e:	4640      	mov	r0, r8
   28250:	9903      	ldr	r1, [sp, #12]
   28252:	f7e4 fc49 	bl	cae8 <sys_heap_aligned_alloc>
   28256:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   28258:	f002 ff9a 	bl	2b190 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2825c:	f1b9 0f00 	cmp.w	r9, #0
   28260:	d01d      	beq.n	2829e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28262:	4620      	mov	r0, r4
   28264:	f000 fac6 	bl	287f4 <z_spin_unlock_valid>
   28268:	2800      	cmp	r0, #0
   2826a:	d137      	bne.n	282dc <k_heap_aligned_alloc+0x10c>
   2826c:	23c2      	movs	r3, #194	; 0xc2
   2826e:	4a1f      	ldr	r2, [pc, #124]	; (282ec <k_heap_aligned_alloc+0x11c>)
   28270:	4922      	ldr	r1, [pc, #136]	; (282fc <k_heap_aligned_alloc+0x12c>)
   28272:	4820      	ldr	r0, [pc, #128]	; (282f4 <k_heap_aligned_alloc+0x124>)
   28274:	f006 fb6e 	bl	2e954 <assert_print>
   28278:	4621      	mov	r1, r4
   2827a:	4821      	ldr	r0, [pc, #132]	; (28300 <k_heap_aligned_alloc+0x130>)
   2827c:	f006 fb6a 	bl	2e954 <assert_print>
   28280:	21c2      	movs	r1, #194	; 0xc2
   28282:	e7d6      	b.n	28232 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28284:	491f      	ldr	r1, [pc, #124]	; (28304 <k_heap_aligned_alloc+0x134>)
   28286:	234b      	movs	r3, #75	; 0x4b
   28288:	4a1f      	ldr	r2, [pc, #124]	; (28308 <k_heap_aligned_alloc+0x138>)
   2828a:	481a      	ldr	r0, [pc, #104]	; (282f4 <k_heap_aligned_alloc+0x124>)
   2828c:	f006 fb62 	bl	2e954 <assert_print>
   28290:	481e      	ldr	r0, [pc, #120]	; (2830c <k_heap_aligned_alloc+0x13c>)
   28292:	f006 fb5f 	bl	2e954 <assert_print>
   28296:	214b      	movs	r1, #75	; 0x4b
   28298:	481b      	ldr	r0, [pc, #108]	; (28308 <k_heap_aligned_alloc+0x138>)
   2829a:	f006 fb54 	bl	2e946 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   2829e:	1a30      	subs	r0, r6, r0
   282a0:	eb67 0101 	sbc.w	r1, r7, r1
   282a4:	2801      	cmp	r0, #1
   282a6:	f171 0300 	sbcs.w	r3, r1, #0
   282aa:	dbda      	blt.n	28262 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   282ac:	e9cd 0100 	strd	r0, r1, [sp]
   282b0:	465a      	mov	r2, fp
   282b2:	4629      	mov	r1, r5
   282b4:	4620      	mov	r0, r4
   282b6:	f001 ff87 	bl	2a1c8 <z_pend_curr>
   282ba:	f04f 0320 	mov.w	r3, #32
   282be:	f3ef 8511 	mrs	r5, BASEPRI
   282c2:	f383 8812 	msr	BASEPRI_MAX, r3
   282c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282ca:	4620      	mov	r0, r4
   282cc:	f000 fa84 	bl	287d8 <z_spin_lock_valid>
   282d0:	2800      	cmp	r0, #0
   282d2:	d0a3      	beq.n	2821c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   282d4:	4620      	mov	r0, r4
   282d6:	f000 fa9b 	bl	28810 <z_spin_lock_set_owner>
	return k;
   282da:	e7b7      	b.n	2824c <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   282dc:	f385 8811 	msr	BASEPRI, r5
   282e0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   282e4:	4648      	mov	r0, r9
   282e6:	b005      	add	sp, #20
   282e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282ec:	000385b7 	.word	0x000385b7
   282f0:	00038610 	.word	0x00038610
   282f4:	000381c3 	.word	0x000381c3
   282f8:	00038625 	.word	0x00038625
   282fc:	000385e4 	.word	0x000385e4
   28300:	000385fb 	.word	0x000385fb
   28304:	00040524 	.word	0x00040524
   28308:	000404ec 	.word	0x000404ec
   2830c:	00038b19 	.word	0x00038b19

00028310 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   28310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28312:	4605      	mov	r5, r0
   28314:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28316:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   2831a:	f04f 0320 	mov.w	r3, #32
   2831e:	f3ef 8711 	mrs	r7, BASEPRI
   28322:	f383 8812 	msr	BASEPRI_MAX, r3
   28326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2832a:	4620      	mov	r0, r4
   2832c:	f000 fa54 	bl	287d8 <z_spin_lock_valid>
   28330:	b968      	cbnz	r0, 2834e <k_heap_free+0x3e>
   28332:	2394      	movs	r3, #148	; 0x94
   28334:	4a19      	ldr	r2, [pc, #100]	; (2839c <k_heap_free+0x8c>)
   28336:	491a      	ldr	r1, [pc, #104]	; (283a0 <k_heap_free+0x90>)
   28338:	481a      	ldr	r0, [pc, #104]	; (283a4 <k_heap_free+0x94>)
   2833a:	f006 fb0b 	bl	2e954 <assert_print>
   2833e:	4621      	mov	r1, r4
   28340:	4819      	ldr	r0, [pc, #100]	; (283a8 <k_heap_free+0x98>)
   28342:	f006 fb07 	bl	2e954 <assert_print>
   28346:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28348:	4814      	ldr	r0, [pc, #80]	; (2839c <k_heap_free+0x8c>)
   2834a:	f006 fafc 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2834e:	4620      	mov	r0, r4
   28350:	f000 fa5e 	bl	28810 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   28354:	4628      	mov	r0, r5
   28356:	4631      	mov	r1, r6
   28358:	f7e4 fb80 	bl	ca5c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2835c:	f105 000c 	add.w	r0, r5, #12
   28360:	f00c fd01 	bl	34d66 <z_unpend_all>
   28364:	b128      	cbz	r0, 28372 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   28366:	4639      	mov	r1, r7
   28368:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2836a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2836e:	f001 bc6f 	b.w	29c50 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28372:	4620      	mov	r0, r4
   28374:	f000 fa3e 	bl	287f4 <z_spin_unlock_valid>
   28378:	b958      	cbnz	r0, 28392 <k_heap_free+0x82>
   2837a:	23c2      	movs	r3, #194	; 0xc2
   2837c:	4a07      	ldr	r2, [pc, #28]	; (2839c <k_heap_free+0x8c>)
   2837e:	490b      	ldr	r1, [pc, #44]	; (283ac <k_heap_free+0x9c>)
   28380:	4808      	ldr	r0, [pc, #32]	; (283a4 <k_heap_free+0x94>)
   28382:	f006 fae7 	bl	2e954 <assert_print>
   28386:	4621      	mov	r1, r4
   28388:	4809      	ldr	r0, [pc, #36]	; (283b0 <k_heap_free+0xa0>)
   2838a:	f006 fae3 	bl	2e954 <assert_print>
   2838e:	21c2      	movs	r1, #194	; 0xc2
   28390:	e7da      	b.n	28348 <k_heap_free+0x38>
	__asm__ volatile(
   28392:	f387 8811 	msr	BASEPRI, r7
   28396:	f3bf 8f6f 	isb	sy
}
   2839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2839c:	000385b7 	.word	0x000385b7
   283a0:	00038610 	.word	0x00038610
   283a4:	000381c3 	.word	0x000381c3
   283a8:	00038625 	.word	0x00038625
   283ac:	000385e4 	.word	0x000385e4
   283b0:	000385fb 	.word	0x000385fb

000283b4 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   283b4:	2000      	movs	r0, #0
{
   283b6:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   283b8:	4c0c      	ldr	r4, [pc, #48]	; (283ec <init_mem_slab_module+0x38>)
   283ba:	4d0d      	ldr	r5, [pc, #52]	; (283f0 <init_mem_slab_module+0x3c>)
   283bc:	42ac      	cmp	r4, r5
   283be:	d913      	bls.n	283e8 <init_mem_slab_module+0x34>
   283c0:	490c      	ldr	r1, [pc, #48]	; (283f4 <init_mem_slab_module+0x40>)
   283c2:	233c      	movs	r3, #60	; 0x3c
   283c4:	4a0c      	ldr	r2, [pc, #48]	; (283f8 <init_mem_slab_module+0x44>)
   283c6:	480d      	ldr	r0, [pc, #52]	; (283fc <init_mem_slab_module+0x48>)
   283c8:	f006 fac4 	bl	2e954 <assert_print>
   283cc:	480c      	ldr	r0, [pc, #48]	; (28400 <init_mem_slab_module+0x4c>)
   283ce:	f006 fac1 	bl	2e954 <assert_print>
   283d2:	213c      	movs	r1, #60	; 0x3c
   283d4:	4808      	ldr	r0, [pc, #32]	; (283f8 <init_mem_slab_module+0x44>)
   283d6:	f006 fab6 	bl	2e946 <assert_post_action>
		rc = create_free_list(slab);
   283da:	4620      	mov	r0, r4
   283dc:	f00c fbbe 	bl	34b5c <create_free_list>
		if (rc < 0) {
   283e0:	2800      	cmp	r0, #0
   283e2:	db02      	blt.n	283ea <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   283e4:	3420      	adds	r4, #32
   283e6:	e7e9      	b.n	283bc <init_mem_slab_module+0x8>
   283e8:	d3f7      	bcc.n	283da <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   283ea:	bd38      	pop	{r3, r4, r5, pc}
   283ec:	2000cdc4 	.word	0x2000cdc4
   283f0:	2000ce24 	.word	0x2000ce24
   283f4:	0004058f 	.word	0x0004058f
   283f8:	0004056a 	.word	0x0004056a
   283fc:	000381c3 	.word	0x000381c3
   28400:	000387c1 	.word	0x000387c1

00028404 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   28404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28408:	4604      	mov	r4, r0
   2840a:	460e      	mov	r6, r1
   2840c:	4690      	mov	r8, r2
   2840e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   28410:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28414:	f04f 0320 	mov.w	r3, #32
   28418:	f3ef 8911 	mrs	r9, BASEPRI
   2841c:	f383 8812 	msr	BASEPRI_MAX, r3
   28420:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28424:	4628      	mov	r0, r5
   28426:	f000 f9d7 	bl	287d8 <z_spin_lock_valid>
   2842a:	b968      	cbnz	r0, 28448 <k_mem_slab_alloc+0x44>
   2842c:	2394      	movs	r3, #148	; 0x94
   2842e:	4a23      	ldr	r2, [pc, #140]	; (284bc <k_mem_slab_alloc+0xb8>)
   28430:	4923      	ldr	r1, [pc, #140]	; (284c0 <k_mem_slab_alloc+0xbc>)
   28432:	4824      	ldr	r0, [pc, #144]	; (284c4 <k_mem_slab_alloc+0xc0>)
   28434:	f006 fa8e 	bl	2e954 <assert_print>
   28438:	4629      	mov	r1, r5
   2843a:	4823      	ldr	r0, [pc, #140]	; (284c8 <k_mem_slab_alloc+0xc4>)
   2843c:	f006 fa8a 	bl	2e954 <assert_print>
   28440:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28442:	481e      	ldr	r0, [pc, #120]	; (284bc <k_mem_slab_alloc+0xb8>)
   28444:	f006 fa7f 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28448:	4628      	mov	r0, r5
   2844a:	f000 f9e1 	bl	28810 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2844e:	69a3      	ldr	r3, [r4, #24]
   28450:	b1b3      	cbz	r3, 28480 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   28452:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   28454:	681b      	ldr	r3, [r3, #0]
   28456:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   28458:	69e3      	ldr	r3, [r4, #28]
   2845a:	3301      	adds	r3, #1
   2845c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2845e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28460:	4628      	mov	r0, r5
   28462:	f000 f9c7 	bl	287f4 <z_spin_unlock_valid>
   28466:	bb18      	cbnz	r0, 284b0 <k_mem_slab_alloc+0xac>
   28468:	23c2      	movs	r3, #194	; 0xc2
   2846a:	4a14      	ldr	r2, [pc, #80]	; (284bc <k_mem_slab_alloc+0xb8>)
   2846c:	4917      	ldr	r1, [pc, #92]	; (284cc <k_mem_slab_alloc+0xc8>)
   2846e:	4815      	ldr	r0, [pc, #84]	; (284c4 <k_mem_slab_alloc+0xc0>)
   28470:	f006 fa70 	bl	2e954 <assert_print>
   28474:	4629      	mov	r1, r5
   28476:	4816      	ldr	r0, [pc, #88]	; (284d0 <k_mem_slab_alloc+0xcc>)
   28478:	f006 fa6c 	bl	2e954 <assert_print>
   2847c:	21c2      	movs	r1, #194	; 0xc2
   2847e:	e7e0      	b.n	28442 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   28480:	ea58 0207 	orrs.w	r2, r8, r7
   28484:	d103      	bne.n	2848e <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   28486:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   2848a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   2848c:	e7e8      	b.n	28460 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2848e:	4622      	mov	r2, r4
   28490:	4649      	mov	r1, r9
   28492:	4628      	mov	r0, r5
   28494:	e9cd 8700 	strd	r8, r7, [sp]
   28498:	f001 fe96 	bl	2a1c8 <z_pend_curr>
		if (result == 0) {
   2849c:	4604      	mov	r4, r0
   2849e:	b918      	cbnz	r0, 284a8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   284a0:	4b0c      	ldr	r3, [pc, #48]	; (284d4 <k_mem_slab_alloc+0xd0>)
   284a2:	689b      	ldr	r3, [r3, #8]
   284a4:	695b      	ldr	r3, [r3, #20]
   284a6:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   284a8:	4620      	mov	r0, r4
   284aa:	b003      	add	sp, #12
   284ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   284b0:	f389 8811 	msr	BASEPRI, r9
   284b4:	f3bf 8f6f 	isb	sy
	return result;
   284b8:	e7f6      	b.n	284a8 <k_mem_slab_alloc+0xa4>
   284ba:	bf00      	nop
   284bc:	000385b7 	.word	0x000385b7
   284c0:	00038610 	.word	0x00038610
   284c4:	000381c3 	.word	0x000381c3
   284c8:	00038625 	.word	0x00038625
   284cc:	000385e4 	.word	0x000385e4
   284d0:	000385fb 	.word	0x000385fb
   284d4:	20010fc0 	.word	0x20010fc0

000284d8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   284d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284dc:	4604      	mov	r4, r0
   284de:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   284e0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   284e4:	f04f 0320 	mov.w	r3, #32
   284e8:	f3ef 8711 	mrs	r7, BASEPRI
   284ec:	f383 8812 	msr	BASEPRI_MAX, r3
   284f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   284f4:	4628      	mov	r0, r5
   284f6:	f000 f96f 	bl	287d8 <z_spin_lock_valid>
   284fa:	b968      	cbnz	r0, 28518 <k_mem_slab_free+0x40>
   284fc:	2394      	movs	r3, #148	; 0x94
   284fe:	4a21      	ldr	r2, [pc, #132]	; (28584 <k_mem_slab_free+0xac>)
   28500:	4921      	ldr	r1, [pc, #132]	; (28588 <k_mem_slab_free+0xb0>)
   28502:	4822      	ldr	r0, [pc, #136]	; (2858c <k_mem_slab_free+0xb4>)
   28504:	f006 fa26 	bl	2e954 <assert_print>
   28508:	4629      	mov	r1, r5
   2850a:	4821      	ldr	r0, [pc, #132]	; (28590 <k_mem_slab_free+0xb8>)
   2850c:	f006 fa22 	bl	2e954 <assert_print>
   28510:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28512:	481c      	ldr	r0, [pc, #112]	; (28584 <k_mem_slab_free+0xac>)
   28514:	f006 fa17 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28518:	4628      	mov	r0, r5
   2851a:	f000 f979 	bl	28810 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2851e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28522:	f1b8 0f00 	cmp.w	r8, #0
   28526:	d10f      	bne.n	28548 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   28528:	4620      	mov	r0, r4
   2852a:	f002 f8cd 	bl	2a6c8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2852e:	b158      	cbz	r0, 28548 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   28530:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28532:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28536:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   28538:	f001 fafc 	bl	29b34 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2853c:	4639      	mov	r1, r7
   2853e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   28540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   28544:	f001 bb84 	b.w	29c50 <z_reschedule>
	**(char ***) mem = slab->free_list;
   28548:	6833      	ldr	r3, [r6, #0]
   2854a:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2854c:	4628      	mov	r0, r5
   2854e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   28550:	6833      	ldr	r3, [r6, #0]
   28552:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   28554:	69e3      	ldr	r3, [r4, #28]
   28556:	3b01      	subs	r3, #1
   28558:	61e3      	str	r3, [r4, #28]
   2855a:	f000 f94b 	bl	287f4 <z_spin_unlock_valid>
   2855e:	b958      	cbnz	r0, 28578 <k_mem_slab_free+0xa0>
   28560:	23c2      	movs	r3, #194	; 0xc2
   28562:	4a08      	ldr	r2, [pc, #32]	; (28584 <k_mem_slab_free+0xac>)
   28564:	490b      	ldr	r1, [pc, #44]	; (28594 <k_mem_slab_free+0xbc>)
   28566:	4809      	ldr	r0, [pc, #36]	; (2858c <k_mem_slab_free+0xb4>)
   28568:	f006 f9f4 	bl	2e954 <assert_print>
   2856c:	4629      	mov	r1, r5
   2856e:	480a      	ldr	r0, [pc, #40]	; (28598 <k_mem_slab_free+0xc0>)
   28570:	f006 f9f0 	bl	2e954 <assert_print>
   28574:	21c2      	movs	r1, #194	; 0xc2
   28576:	e7cc      	b.n	28512 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   28578:	f387 8811 	msr	BASEPRI, r7
   2857c:	f3bf 8f6f 	isb	sy
}
   28580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28584:	000385b7 	.word	0x000385b7
   28588:	00038610 	.word	0x00038610
   2858c:	000381c3 	.word	0x000381c3
   28590:	00038625 	.word	0x00038625
   28594:	000385e4 	.word	0x000385e4
   28598:	000385fb 	.word	0x000385fb

0002859c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2859c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2859e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   285a0:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   285a2:	2e0f      	cmp	r6, #15
   285a4:	d12a      	bne.n	285fc <z_setup_new_thread+0x60>
   285a6:	4821      	ldr	r0, [pc, #132]	; (2862c <z_setup_new_thread+0x90>)
   285a8:	4283      	cmp	r3, r0
   285aa:	d12b      	bne.n	28604 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   285ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   285b0:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   285b4:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   285b6:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   285b8:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   285ba:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   285bc:	3207      	adds	r2, #7
   285be:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   285c2:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   285c6:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   285c8:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   285ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   285cc:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   285ce:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   285d2:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   285d4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   285d6:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   285d8:	9202      	str	r2, [sp, #8]
   285da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   285dc:	4620      	mov	r0, r4
   285de:	9201      	str	r2, [sp, #4]
   285e0:	9a08      	ldr	r2, [sp, #32]
   285e2:	9200      	str	r2, [sp, #0]
   285e4:	4632      	mov	r2, r6
   285e6:	f7e7 ffb9 	bl	1055c <arch_new_thread>
	if (!_current) {
   285ea:	4b11      	ldr	r3, [pc, #68]	; (28630 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   285ec:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   285ee:	689b      	ldr	r3, [r3, #8]
   285f0:	b103      	cbz	r3, 285f4 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   285f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   285f4:	4630      	mov	r0, r6
   285f6:	6763      	str	r3, [r4, #116]	; 0x74
   285f8:	b004      	add	sp, #16
   285fa:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   285fc:	f106 0010 	add.w	r0, r6, #16
   28600:	281e      	cmp	r0, #30
   28602:	d9d3      	bls.n	285ac <z_setup_new_thread+0x10>
   28604:	f44f 7306 	mov.w	r3, #536	; 0x218
   28608:	4a0a      	ldr	r2, [pc, #40]	; (28634 <z_setup_new_thread+0x98>)
   2860a:	490b      	ldr	r1, [pc, #44]	; (28638 <z_setup_new_thread+0x9c>)
   2860c:	480b      	ldr	r0, [pc, #44]	; (2863c <z_setup_new_thread+0xa0>)
   2860e:	f006 f9a1 	bl	2e954 <assert_print>
   28612:	4631      	mov	r1, r6
   28614:	480a      	ldr	r0, [pc, #40]	; (28640 <z_setup_new_thread+0xa4>)
   28616:	f06f 030f 	mvn.w	r3, #15
   2861a:	220e      	movs	r2, #14
   2861c:	f006 f99a 	bl	2e954 <assert_print>
   28620:	f44f 7106 	mov.w	r1, #536	; 0x218
   28624:	4803      	ldr	r0, [pc, #12]	; (28634 <z_setup_new_thread+0x98>)
   28626:	f006 f98e 	bl	2e946 <assert_post_action>
   2862a:	bf00      	nop
   2862c:	00028821 	.word	0x00028821
   28630:	20010fc0 	.word	0x20010fc0
   28634:	000405ac 	.word	0x000405ac
   28638:	000405cf 	.word	0x000405cf
   2863c:	000381c3 	.word	0x000381c3
   28640:	0004064f 	.word	0x0004064f

00028644 <z_impl_k_thread_create>:
{
   28644:	b5f0      	push	{r4, r5, r6, r7, lr}
   28646:	b087      	sub	sp, #28
   28648:	4604      	mov	r4, r0
   2864a:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   2864e:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   28652:	b175      	cbz	r5, 28672 <z_impl_k_thread_create+0x2e>
   28654:	4919      	ldr	r1, [pc, #100]	; (286bc <z_impl_k_thread_create+0x78>)
   28656:	f240 238a 	movw	r3, #650	; 0x28a
   2865a:	4a19      	ldr	r2, [pc, #100]	; (286c0 <z_impl_k_thread_create+0x7c>)
   2865c:	4819      	ldr	r0, [pc, #100]	; (286c4 <z_impl_k_thread_create+0x80>)
   2865e:	f006 f979 	bl	2e954 <assert_print>
   28662:	4819      	ldr	r0, [pc, #100]	; (286c8 <z_impl_k_thread_create+0x84>)
   28664:	f006 f976 	bl	2e954 <assert_print>
   28668:	f240 218a 	movw	r1, #650	; 0x28a
   2866c:	4814      	ldr	r0, [pc, #80]	; (286c0 <z_impl_k_thread_create+0x7c>)
   2866e:	f006 f96a 	bl	2e946 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28672:	9505      	str	r5, [sp, #20]
   28674:	9d10      	ldr	r5, [sp, #64]	; 0x40
   28676:	9504      	str	r5, [sp, #16]
   28678:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2867a:	9503      	str	r5, [sp, #12]
   2867c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2867e:	9502      	str	r5, [sp, #8]
   28680:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   28682:	9501      	str	r5, [sp, #4]
   28684:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28686:	9500      	str	r5, [sp, #0]
   28688:	f7ff ff88 	bl	2859c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2868c:	f1b6 3fff 	cmp.w	r6, #4294967295
   28690:	bf08      	it	eq
   28692:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   28696:	d005      	beq.n	286a4 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28698:	ea56 0307 	orrs.w	r3, r6, r7
   2869c:	d105      	bne.n	286aa <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   2869e:	4620      	mov	r0, r4
   286a0:	f001 fb18 	bl	29cd4 <z_sched_start>
}
   286a4:	4620      	mov	r0, r4
   286a6:	b007      	add	sp, #28
   286a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   286aa:	463a      	mov	r2, r7
   286ac:	4633      	mov	r3, r6
   286ae:	4907      	ldr	r1, [pc, #28]	; (286cc <z_impl_k_thread_create+0x88>)
   286b0:	f104 0018 	add.w	r0, r4, #24
   286b4:	f002 fb6c 	bl	2ad90 <z_add_timeout>
   286b8:	e7f4      	b.n	286a4 <z_impl_k_thread_create+0x60>
   286ba:	bf00      	nop
   286bc:	00040680 	.word	0x00040680
   286c0:	000405ac 	.word	0x000405ac
   286c4:	000381c3 	.word	0x000381c3
   286c8:	00040692 	.word	0x00040692
   286cc:	00034d5f 	.word	0x00034d5f

000286d0 <z_init_static_threads>:
{
   286d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   286d4:	4c39      	ldr	r4, [pc, #228]	; (287bc <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   286d6:	4d3a      	ldr	r5, [pc, #232]	; (287c0 <z_init_static_threads+0xf0>)
{
   286d8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   286da:	42ac      	cmp	r4, r5
   286dc:	4626      	mov	r6, r4
   286de:	d92a      	bls.n	28736 <z_init_static_threads+0x66>
   286e0:	4938      	ldr	r1, [pc, #224]	; (287c4 <z_init_static_threads+0xf4>)
   286e2:	f240 23f1 	movw	r3, #753	; 0x2f1
   286e6:	4a38      	ldr	r2, [pc, #224]	; (287c8 <z_init_static_threads+0xf8>)
   286e8:	4838      	ldr	r0, [pc, #224]	; (287cc <z_init_static_threads+0xfc>)
   286ea:	f006 f933 	bl	2e954 <assert_print>
   286ee:	4838      	ldr	r0, [pc, #224]	; (287d0 <z_init_static_threads+0x100>)
   286f0:	f006 f930 	bl	2e954 <assert_print>
   286f4:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   286f8:	4833      	ldr	r0, [pc, #204]	; (287c8 <z_init_static_threads+0xf8>)
   286fa:	f006 f924 	bl	2e946 <assert_post_action>
		z_setup_new_thread(
   286fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28702:	9305      	str	r3, [sp, #20]
   28704:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   28708:	9304      	str	r3, [sp, #16]
   2870a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2870e:	9303      	str	r3, [sp, #12]
   28710:	f854 3c14 	ldr.w	r3, [r4, #-20]
   28714:	9302      	str	r3, [sp, #8]
   28716:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2871a:	9301      	str	r3, [sp, #4]
   2871c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   28720:	9300      	str	r3, [sp, #0]
   28722:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   28726:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2872a:	f7ff ff37 	bl	2859c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2872e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   28732:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   28734:	e7d1      	b.n	286da <z_init_static_threads+0xa>
   28736:	42ae      	cmp	r6, r5
   28738:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2873c:	d3df      	bcc.n	286fe <z_init_static_threads+0x2e>
	k_sched_lock();
   2873e:	f001 fb1b 	bl	29d78 <k_sched_lock>
   28742:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   28746:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   2874a:	4c1c      	ldr	r4, [pc, #112]	; (287bc <z_init_static_threads+0xec>)
   2874c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 287d4 <z_init_static_threads+0x104>
   28750:	42ac      	cmp	r4, r5
   28752:	d92c      	bls.n	287ae <z_init_static_threads+0xde>
   28754:	491b      	ldr	r1, [pc, #108]	; (287c4 <z_init_static_threads+0xf4>)
   28756:	f44f 7344 	mov.w	r3, #784	; 0x310
   2875a:	4a1b      	ldr	r2, [pc, #108]	; (287c8 <z_init_static_threads+0xf8>)
   2875c:	481b      	ldr	r0, [pc, #108]	; (287cc <z_init_static_threads+0xfc>)
   2875e:	f006 f8f9 	bl	2e954 <assert_print>
   28762:	481b      	ldr	r0, [pc, #108]	; (287d0 <z_init_static_threads+0x100>)
   28764:	f006 f8f6 	bl	2e954 <assert_print>
   28768:	f44f 7144 	mov.w	r1, #784	; 0x310
   2876c:	e7c4      	b.n	286f8 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28770:	1c5a      	adds	r2, r3, #1
   28772:	d00d      	beq.n	28790 <z_init_static_threads+0xc0>
   28774:	2100      	movs	r1, #0
   28776:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   28778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2877c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28780:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   28784:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28788:	d104      	bne.n	28794 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   2878a:	4640      	mov	r0, r8
   2878c:	f001 faa2 	bl	29cd4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   28790:	342c      	adds	r4, #44	; 0x2c
   28792:	e7dd      	b.n	28750 <z_init_static_threads+0x80>
   28794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28798:	2300      	movs	r3, #0
   2879a:	f7e0 fc17 	bl	8fcc <__aeabi_uldivmod>
   2879e:	4602      	mov	r2, r0
   287a0:	460b      	mov	r3, r1
   287a2:	f108 0018 	add.w	r0, r8, #24
   287a6:	4649      	mov	r1, r9
   287a8:	f002 faf2 	bl	2ad90 <z_add_timeout>
   287ac:	e7f0      	b.n	28790 <z_init_static_threads+0xc0>
   287ae:	d3de      	bcc.n	2876e <z_init_static_threads+0x9e>
}
   287b0:	b007      	add	sp, #28
   287b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   287b6:	f001 bb4b 	b.w	29e50 <k_sched_unlock>
   287ba:	bf00      	nop
   287bc:	0003631c 	.word	0x0003631c
   287c0:	00036348 	.word	0x00036348
   287c4:	000406b7 	.word	0x000406b7
   287c8:	000405ac 	.word	0x000405ac
   287cc:	000381c3 	.word	0x000381c3
   287d0:	000387c1 	.word	0x000387c1
   287d4:	00034d5f 	.word	0x00034d5f

000287d8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   287d8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   287da:	b138      	cbz	r0, 287ec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   287dc:	4b04      	ldr	r3, [pc, #16]	; (287f0 <z_spin_lock_valid+0x18>)
   287de:	f000 0003 	and.w	r0, r0, #3
   287e2:	7c1b      	ldrb	r3, [r3, #16]
   287e4:	1ac0      	subs	r0, r0, r3
   287e6:	bf18      	it	ne
   287e8:	2001      	movne	r0, #1
   287ea:	4770      	bx	lr
			return false;
		}
	}
	return true;
   287ec:	2001      	movs	r0, #1
}
   287ee:	4770      	bx	lr
   287f0:	20010fc0 	.word	0x20010fc0

000287f4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   287f4:	4a05      	ldr	r2, [pc, #20]	; (2880c <z_spin_unlock_valid+0x18>)
{
   287f6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   287f8:	7c11      	ldrb	r1, [r2, #16]
   287fa:	6892      	ldr	r2, [r2, #8]
   287fc:	430a      	orrs	r2, r1
   287fe:	6801      	ldr	r1, [r0, #0]
   28800:	2000      	movs	r0, #0
   28802:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   28804:	bf04      	itt	eq
   28806:	6018      	streq	r0, [r3, #0]
	return true;
   28808:	2001      	moveq	r0, #1
}
   2880a:	4770      	bx	lr
   2880c:	20010fc0 	.word	0x20010fc0

00028810 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   28810:	4b02      	ldr	r3, [pc, #8]	; (2881c <z_spin_lock_set_owner+0xc>)
   28812:	7c1a      	ldrb	r2, [r3, #16]
   28814:	689b      	ldr	r3, [r3, #8]
   28816:	4313      	orrs	r3, r2
   28818:	6003      	str	r3, [r0, #0]
}
   2881a:	4770      	bx	lr
   2881c:	20010fc0 	.word	0x20010fc0

00028820 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   28820:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   28822:	4c13      	ldr	r4, [pc, #76]	; (28870 <idle+0x50>)
   28824:	68a3      	ldr	r3, [r4, #8]
   28826:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2882a:	2b00      	cmp	r3, #0
   2882c:	db10      	blt.n	28850 <idle+0x30>
   2882e:	4d11      	ldr	r5, [pc, #68]	; (28874 <idle+0x54>)
	__asm__ volatile(
   28830:	f04f 0220 	mov.w	r2, #32
   28834:	f3ef 8311 	mrs	r3, BASEPRI
   28838:	f382 8812 	msr	BASEPRI_MAX, r2
   2883c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   28840:	f002 fbb2 	bl	2afa8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   28844:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   28846:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   28848:	b963      	cbnz	r3, 28864 <idle+0x44>
	arch_cpu_idle();
   2884a:	f7e7 fd2b 	bl	102a4 <arch_cpu_idle>
}
   2884e:	e7ef      	b.n	28830 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   28850:	4909      	ldr	r1, [pc, #36]	; (28878 <idle+0x58>)
   28852:	480a      	ldr	r0, [pc, #40]	; (2887c <idle+0x5c>)
   28854:	2327      	movs	r3, #39	; 0x27
   28856:	4a0a      	ldr	r2, [pc, #40]	; (28880 <idle+0x60>)
   28858:	f006 f87c 	bl	2e954 <assert_print>
   2885c:	2127      	movs	r1, #39	; 0x27
   2885e:	4808      	ldr	r0, [pc, #32]	; (28880 <idle+0x60>)
   28860:	f006 f871 	bl	2e946 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   28864:	f7e6 fbe4 	bl	f030 <pm_system_suspend>
   28868:	2800      	cmp	r0, #0
   2886a:	d1e1      	bne.n	28830 <idle+0x10>
   2886c:	e7ed      	b.n	2884a <idle+0x2a>
   2886e:	bf00      	nop
   28870:	20010fc0 	.word	0x20010fc0
   28874:	2001287f 	.word	0x2001287f
   28878:	00040705 	.word	0x00040705
   2887c:	000381c3 	.word	0x000381c3
   28880:	000406e4 	.word	0x000406e4

00028884 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   28884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28888:	4604      	mov	r4, r0
   2888a:	4617      	mov	r7, r2
   2888c:	461e      	mov	r6, r3
   2888e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   28892:	b165      	cbz	r5, 288ae <z_impl_k_mutex_lock+0x2a>
   28894:	4958      	ldr	r1, [pc, #352]	; (289f8 <z_impl_k_mutex_lock+0x174>)
   28896:	2365      	movs	r3, #101	; 0x65
   28898:	4a58      	ldr	r2, [pc, #352]	; (289fc <z_impl_k_mutex_lock+0x178>)
   2889a:	4859      	ldr	r0, [pc, #356]	; (28a00 <z_impl_k_mutex_lock+0x17c>)
   2889c:	f006 f85a 	bl	2e954 <assert_print>
   288a0:	4858      	ldr	r0, [pc, #352]	; (28a04 <z_impl_k_mutex_lock+0x180>)
   288a2:	f006 f857 	bl	2e954 <assert_print>
   288a6:	2165      	movs	r1, #101	; 0x65
   288a8:	4854      	ldr	r0, [pc, #336]	; (289fc <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   288aa:	f006 f84c 	bl	2e946 <assert_post_action>
   288ae:	f04f 0320 	mov.w	r3, #32
   288b2:	f3ef 8811 	mrs	r8, BASEPRI
   288b6:	f383 8812 	msr	BASEPRI_MAX, r3
   288ba:	f3bf 8f6f 	isb	sy
   288be:	4852      	ldr	r0, [pc, #328]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   288c0:	f7ff ff8a 	bl	287d8 <z_spin_lock_valid>
   288c4:	b960      	cbnz	r0, 288e0 <z_impl_k_mutex_lock+0x5c>
   288c6:	2394      	movs	r3, #148	; 0x94
   288c8:	4a50      	ldr	r2, [pc, #320]	; (28a0c <z_impl_k_mutex_lock+0x188>)
   288ca:	4951      	ldr	r1, [pc, #324]	; (28a10 <z_impl_k_mutex_lock+0x18c>)
   288cc:	484c      	ldr	r0, [pc, #304]	; (28a00 <z_impl_k_mutex_lock+0x17c>)
   288ce:	f006 f841 	bl	2e954 <assert_print>
   288d2:	494d      	ldr	r1, [pc, #308]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   288d4:	484f      	ldr	r0, [pc, #316]	; (28a14 <z_impl_k_mutex_lock+0x190>)
   288d6:	f006 f83d 	bl	2e954 <assert_print>
   288da:	2194      	movs	r1, #148	; 0x94
   288dc:	484b      	ldr	r0, [pc, #300]	; (28a0c <z_impl_k_mutex_lock+0x188>)
   288de:	e7e4      	b.n	288aa <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   288e0:	4849      	ldr	r0, [pc, #292]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   288e2:	f7ff ff95 	bl	28810 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   288e6:	68e3      	ldr	r3, [r4, #12]
   288e8:	4a4b      	ldr	r2, [pc, #300]	; (28a18 <z_impl_k_mutex_lock+0x194>)
   288ea:	b19b      	cbz	r3, 28914 <z_impl_k_mutex_lock+0x90>
   288ec:	68a0      	ldr	r0, [r4, #8]
   288ee:	6891      	ldr	r1, [r2, #8]
   288f0:	4288      	cmp	r0, r1
   288f2:	d027      	beq.n	28944 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   288f4:	ea57 0306 	orrs.w	r3, r7, r6
   288f8:	d12c      	bne.n	28954 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   288fa:	4843      	ldr	r0, [pc, #268]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   288fc:	f7ff ff7a 	bl	287f4 <z_spin_unlock_valid>
   28900:	b1a0      	cbz	r0, 2892c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   28902:	f388 8811 	msr	BASEPRI, r8
   28906:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2890a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2890e:	b002      	add	sp, #8
   28910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   28914:	6891      	ldr	r1, [r2, #8]
   28916:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2891a:	3301      	adds	r3, #1
   2891c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2891e:	6893      	ldr	r3, [r2, #8]
   28920:	4839      	ldr	r0, [pc, #228]	; (28a08 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   28922:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   28924:	60a3      	str	r3, [r4, #8]
   28926:	f7ff ff65 	bl	287f4 <z_spin_unlock_valid>
   2892a:	b968      	cbnz	r0, 28948 <z_impl_k_mutex_lock+0xc4>
   2892c:	23c2      	movs	r3, #194	; 0xc2
   2892e:	4a37      	ldr	r2, [pc, #220]	; (28a0c <z_impl_k_mutex_lock+0x188>)
   28930:	493a      	ldr	r1, [pc, #232]	; (28a1c <z_impl_k_mutex_lock+0x198>)
   28932:	4833      	ldr	r0, [pc, #204]	; (28a00 <z_impl_k_mutex_lock+0x17c>)
   28934:	f006 f80e 	bl	2e954 <assert_print>
   28938:	4933      	ldr	r1, [pc, #204]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   2893a:	4839      	ldr	r0, [pc, #228]	; (28a20 <z_impl_k_mutex_lock+0x19c>)
   2893c:	f006 f80a 	bl	2e954 <assert_print>
   28940:	21c2      	movs	r1, #194	; 0xc2
   28942:	e7cb      	b.n	288dc <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   28944:	6921      	ldr	r1, [r4, #16]
   28946:	e7e8      	b.n	2891a <z_impl_k_mutex_lock+0x96>
   28948:	f388 8811 	msr	BASEPRI, r8
   2894c:	f3bf 8f6f 	isb	sy
		return 0;
   28950:	2000      	movs	r0, #0
   28952:	e7dc      	b.n	2890e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   28954:	f991 100e 	ldrsb.w	r1, [r1, #14]
   28958:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2895c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   28960:	4299      	cmp	r1, r3
   28962:	bfa8      	it	ge
   28964:	4619      	movge	r1, r3
   28966:	4291      	cmp	r1, r2
   28968:	bfb8      	it	lt
   2896a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2896c:	428b      	cmp	r3, r1
   2896e:	dd02      	ble.n	28976 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   28970:	f00c f91e 	bl	34bb0 <adjust_owner_prio.isra.0>
   28974:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   28976:	4622      	mov	r2, r4
   28978:	4641      	mov	r1, r8
   2897a:	e9cd 7600 	strd	r7, r6, [sp]
   2897e:	4822      	ldr	r0, [pc, #136]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   28980:	f001 fc22 	bl	2a1c8 <z_pend_curr>
	if (got_mutex == 0) {
   28984:	2800      	cmp	r0, #0
   28986:	d0e3      	beq.n	28950 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   28988:	f04f 0320 	mov.w	r3, #32
   2898c:	f3ef 8611 	mrs	r6, BASEPRI
   28990:	f383 8812 	msr	BASEPRI_MAX, r3
   28994:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28998:	481b      	ldr	r0, [pc, #108]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   2899a:	f7ff ff1d 	bl	287d8 <z_spin_lock_valid>
   2899e:	2800      	cmp	r0, #0
   289a0:	d091      	beq.n	288c6 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   289a2:	4819      	ldr	r0, [pc, #100]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   289a4:	f7ff ff34 	bl	28810 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   289a8:	68a0      	ldr	r0, [r4, #8]
   289aa:	b1c0      	cbz	r0, 289de <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   289ac:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   289ae:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   289b0:	429c      	cmp	r4, r3
   289b2:	d00a      	beq.n	289ca <z_impl_k_mutex_lock+0x146>
   289b4:	b14b      	cbz	r3, 289ca <z_impl_k_mutex_lock+0x146>
   289b6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   289ba:	4299      	cmp	r1, r3
   289bc:	bfa8      	it	ge
   289be:	4619      	movge	r1, r3
   289c0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   289c4:	4299      	cmp	r1, r3
   289c6:	bfb8      	it	lt
   289c8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   289ca:	f00c f8f1 	bl	34bb0 <adjust_owner_prio.isra.0>
   289ce:	b130      	cbz	r0, 289de <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   289d0:	4631      	mov	r1, r6
   289d2:	480d      	ldr	r0, [pc, #52]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   289d4:	f001 f93c 	bl	29c50 <z_reschedule>
	return -EAGAIN;
   289d8:	f06f 000a 	mvn.w	r0, #10
   289dc:	e797      	b.n	2890e <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   289de:	2d00      	cmp	r5, #0
   289e0:	d1f6      	bne.n	289d0 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   289e2:	4809      	ldr	r0, [pc, #36]	; (28a08 <z_impl_k_mutex_lock+0x184>)
   289e4:	f7ff ff06 	bl	287f4 <z_spin_unlock_valid>
   289e8:	2800      	cmp	r0, #0
   289ea:	d09f      	beq.n	2892c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   289ec:	f386 8811 	msr	BASEPRI, r6
   289f0:	f3bf 8f6f 	isb	sy
   289f4:	e7f0      	b.n	289d8 <z_impl_k_mutex_lock+0x154>
   289f6:	bf00      	nop
   289f8:	00040680 	.word	0x00040680
   289fc:	0004072d 	.word	0x0004072d
   28a00:	000381c3 	.word	0x000381c3
   28a04:	0004074f 	.word	0x0004074f
   28a08:	20010fe4 	.word	0x20010fe4
   28a0c:	000385b7 	.word	0x000385b7
   28a10:	00038610 	.word	0x00038610
   28a14:	00038625 	.word	0x00038625
   28a18:	20010fc0 	.word	0x20010fc0
   28a1c:	000385e4 	.word	0x000385e4
   28a20:	000385fb 	.word	0x000385fb

00028a24 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   28a24:	b570      	push	{r4, r5, r6, lr}
   28a26:	4604      	mov	r4, r0
   28a28:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   28a2c:	b166      	cbz	r6, 28a48 <z_impl_k_mutex_unlock+0x24>
   28a2e:	4938      	ldr	r1, [pc, #224]	; (28b10 <z_impl_k_mutex_unlock+0xec>)
   28a30:	23cd      	movs	r3, #205	; 0xcd
   28a32:	4a38      	ldr	r2, [pc, #224]	; (28b14 <z_impl_k_mutex_unlock+0xf0>)
   28a34:	4838      	ldr	r0, [pc, #224]	; (28b18 <z_impl_k_mutex_unlock+0xf4>)
   28a36:	f005 ff8d 	bl	2e954 <assert_print>
   28a3a:	4838      	ldr	r0, [pc, #224]	; (28b1c <z_impl_k_mutex_unlock+0xf8>)
   28a3c:	f005 ff8a 	bl	2e954 <assert_print>
   28a40:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   28a42:	4834      	ldr	r0, [pc, #208]	; (28b14 <z_impl_k_mutex_unlock+0xf0>)
   28a44:	f005 ff7f 	bl	2e946 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   28a48:	6883      	ldr	r3, [r0, #8]
   28a4a:	2b00      	cmp	r3, #0
   28a4c:	d059      	beq.n	28b02 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   28a4e:	4a34      	ldr	r2, [pc, #208]	; (28b20 <z_impl_k_mutex_unlock+0xfc>)
   28a50:	6892      	ldr	r2, [r2, #8]
   28a52:	4293      	cmp	r3, r2
   28a54:	d158      	bne.n	28b08 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   28a56:	68c3      	ldr	r3, [r0, #12]
   28a58:	b93b      	cbnz	r3, 28a6a <z_impl_k_mutex_unlock+0x46>
   28a5a:	4932      	ldr	r1, [pc, #200]	; (28b24 <z_impl_k_mutex_unlock+0x100>)
   28a5c:	23e5      	movs	r3, #229	; 0xe5
   28a5e:	4a2d      	ldr	r2, [pc, #180]	; (28b14 <z_impl_k_mutex_unlock+0xf0>)
   28a60:	482d      	ldr	r0, [pc, #180]	; (28b18 <z_impl_k_mutex_unlock+0xf4>)
   28a62:	f005 ff77 	bl	2e954 <assert_print>
   28a66:	21e5      	movs	r1, #229	; 0xe5
   28a68:	e7eb      	b.n	28a42 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   28a6a:	2b01      	cmp	r3, #1
   28a6c:	d003      	beq.n	28a76 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   28a6e:	3b01      	subs	r3, #1
   28a70:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   28a72:	2000      	movs	r0, #0
}
   28a74:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   28a76:	f04f 0320 	mov.w	r3, #32
   28a7a:	f3ef 8511 	mrs	r5, BASEPRI
   28a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   28a82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a86:	4828      	ldr	r0, [pc, #160]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28a88:	f7ff fea6 	bl	287d8 <z_spin_lock_valid>
   28a8c:	b960      	cbnz	r0, 28aa8 <z_impl_k_mutex_unlock+0x84>
   28a8e:	2394      	movs	r3, #148	; 0x94
   28a90:	4a26      	ldr	r2, [pc, #152]	; (28b2c <z_impl_k_mutex_unlock+0x108>)
   28a92:	4927      	ldr	r1, [pc, #156]	; (28b30 <z_impl_k_mutex_unlock+0x10c>)
   28a94:	4820      	ldr	r0, [pc, #128]	; (28b18 <z_impl_k_mutex_unlock+0xf4>)
   28a96:	f005 ff5d 	bl	2e954 <assert_print>
   28a9a:	4923      	ldr	r1, [pc, #140]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28a9c:	4825      	ldr	r0, [pc, #148]	; (28b34 <z_impl_k_mutex_unlock+0x110>)
   28a9e:	f005 ff59 	bl	2e954 <assert_print>
   28aa2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28aa4:	4821      	ldr	r0, [pc, #132]	; (28b2c <z_impl_k_mutex_unlock+0x108>)
   28aa6:	e7cd      	b.n	28a44 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   28aa8:	481f      	ldr	r0, [pc, #124]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28aaa:	f7ff feb1 	bl	28810 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   28aae:	6921      	ldr	r1, [r4, #16]
   28ab0:	68a0      	ldr	r0, [r4, #8]
   28ab2:	f00c f87d 	bl	34bb0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   28ab6:	4620      	mov	r0, r4
   28ab8:	f001 fe06 	bl	2a6c8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   28abc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   28abe:	b150      	cbz	r0, 28ad6 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   28ac0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   28ac4:	6122      	str	r2, [r4, #16]
   28ac6:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   28ac8:	f001 f834 	bl	29b34 <z_ready_thread>
		z_reschedule(&lock, key);
   28acc:	4629      	mov	r1, r5
   28ace:	4816      	ldr	r0, [pc, #88]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28ad0:	f001 f8be 	bl	29c50 <z_reschedule>
   28ad4:	e7cd      	b.n	28a72 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   28ad6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ad8:	4813      	ldr	r0, [pc, #76]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28ada:	f7ff fe8b 	bl	287f4 <z_spin_unlock_valid>
   28ade:	b958      	cbnz	r0, 28af8 <z_impl_k_mutex_unlock+0xd4>
   28ae0:	23c2      	movs	r3, #194	; 0xc2
   28ae2:	4a12      	ldr	r2, [pc, #72]	; (28b2c <z_impl_k_mutex_unlock+0x108>)
   28ae4:	4914      	ldr	r1, [pc, #80]	; (28b38 <z_impl_k_mutex_unlock+0x114>)
   28ae6:	480c      	ldr	r0, [pc, #48]	; (28b18 <z_impl_k_mutex_unlock+0xf4>)
   28ae8:	f005 ff34 	bl	2e954 <assert_print>
   28aec:	490e      	ldr	r1, [pc, #56]	; (28b28 <z_impl_k_mutex_unlock+0x104>)
   28aee:	4813      	ldr	r0, [pc, #76]	; (28b3c <z_impl_k_mutex_unlock+0x118>)
   28af0:	f005 ff30 	bl	2e954 <assert_print>
   28af4:	21c2      	movs	r1, #194	; 0xc2
   28af6:	e7d5      	b.n	28aa4 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   28af8:	f385 8811 	msr	BASEPRI, r5
   28afc:	f3bf 8f6f 	isb	sy
   28b00:	e7b7      	b.n	28a72 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   28b02:	f06f 0015 	mvn.w	r0, #21
   28b06:	e7b5      	b.n	28a74 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   28b08:	f04f 30ff 	mov.w	r0, #4294967295
   28b0c:	e7b2      	b.n	28a74 <z_impl_k_mutex_unlock+0x50>
   28b0e:	bf00      	nop
   28b10:	00040680 	.word	0x00040680
   28b14:	0004072d 	.word	0x0004072d
   28b18:	000381c3 	.word	0x000381c3
   28b1c:	0004074f 	.word	0x0004074f
   28b20:	20010fc0 	.word	0x20010fc0
   28b24:	00040774 	.word	0x00040774
   28b28:	20010fe4 	.word	0x20010fe4
   28b2c:	000385b7 	.word	0x000385b7
   28b30:	00038610 	.word	0x00038610
   28b34:	00038625 	.word	0x00038625
   28b38:	000385e4 	.word	0x000385e4
   28b3c:	000385fb 	.word	0x000385fb

00028b40 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   28b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b44:	4604      	mov	r4, r0
   28b46:	460e      	mov	r6, r1
   28b48:	4690      	mov	r8, r2
   28b4a:	4699      	mov	r9, r3
   28b4c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28b50:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28b54:	f04f 0320 	mov.w	r3, #32
   28b58:	f3ef 8711 	mrs	r7, BASEPRI
   28b5c:	f383 8812 	msr	BASEPRI_MAX, r3
   28b60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28b64:	4628      	mov	r0, r5
   28b66:	f7ff fe37 	bl	287d8 <z_spin_lock_valid>
   28b6a:	b968      	cbnz	r0, 28b88 <queue_insert+0x48>
   28b6c:	2394      	movs	r3, #148	; 0x94
   28b6e:	4a3b      	ldr	r2, [pc, #236]	; (28c5c <queue_insert+0x11c>)
   28b70:	493b      	ldr	r1, [pc, #236]	; (28c60 <queue_insert+0x120>)
   28b72:	483c      	ldr	r0, [pc, #240]	; (28c64 <queue_insert+0x124>)
   28b74:	f005 feee 	bl	2e954 <assert_print>
   28b78:	4629      	mov	r1, r5
   28b7a:	483b      	ldr	r0, [pc, #236]	; (28c68 <queue_insert+0x128>)
   28b7c:	f005 feea 	bl	2e954 <assert_print>
   28b80:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b82:	4836      	ldr	r0, [pc, #216]	; (28c5c <queue_insert+0x11c>)
   28b84:	f005 fedf 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28b88:	4628      	mov	r0, r5
   28b8a:	f7ff fe41 	bl	28810 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   28b8e:	f1ba 0f00 	cmp.w	sl, #0
   28b92:	d000      	beq.n	28b96 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   28b94:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   28b96:	f104 000c 	add.w	r0, r4, #12
   28b9a:	f001 fd95 	bl	2a6c8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   28b9e:	b158      	cbz	r0, 28bb8 <queue_insert+0x78>
   28ba0:	2300      	movs	r3, #0
   28ba2:	f8c0 8014 	str.w	r8, [r0, #20]
   28ba6:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   28ba8:	f000 ffc4 	bl	29b34 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   28bac:	4628      	mov	r0, r5
   28bae:	4639      	mov	r1, r7
   28bb0:	f001 f84e 	bl	29c50 <z_reschedule>
		return 0;
   28bb4:	2000      	movs	r0, #0
   28bb6:	e01c      	b.n	28bf2 <queue_insert+0xb2>
	if (alloc) {
   28bb8:	f1b9 0f00 	cmp.w	r9, #0
   28bbc:	d02b      	beq.n	28c16 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   28bbe:	2108      	movs	r1, #8
   28bc0:	f002 ffd6 	bl	2bb70 <z_thread_aligned_alloc>
		if (anode == NULL) {
   28bc4:	b9b8      	cbnz	r0, 28bf6 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28bc6:	4628      	mov	r0, r5
   28bc8:	f7ff fe14 	bl	287f4 <z_spin_unlock_valid>
   28bcc:	b958      	cbnz	r0, 28be6 <queue_insert+0xa6>
   28bce:	23c2      	movs	r3, #194	; 0xc2
   28bd0:	4a22      	ldr	r2, [pc, #136]	; (28c5c <queue_insert+0x11c>)
   28bd2:	4926      	ldr	r1, [pc, #152]	; (28c6c <queue_insert+0x12c>)
   28bd4:	4823      	ldr	r0, [pc, #140]	; (28c64 <queue_insert+0x124>)
   28bd6:	f005 febd 	bl	2e954 <assert_print>
   28bda:	4629      	mov	r1, r5
   28bdc:	4824      	ldr	r0, [pc, #144]	; (28c70 <queue_insert+0x130>)
   28bde:	f005 feb9 	bl	2e954 <assert_print>
   28be2:	21c2      	movs	r1, #194	; 0xc2
   28be4:	e7cd      	b.n	28b82 <queue_insert+0x42>
	__asm__ volatile(
   28be6:	f387 8811 	msr	BASEPRI, r7
   28bea:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   28bee:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   28bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   28bf6:	2201      	movs	r2, #1
		anode->data = data;
   28bf8:	f8c0 8004 	str.w	r8, [r0, #4]
   28bfc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28bfe:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c00:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   28c04:	b95e      	cbnz	r6, 28c1e <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c06:	6822      	ldr	r2, [r4, #0]
   28c08:	430a      	orrs	r2, r1
   28c0a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28c0c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   28c0e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   28c10:	b96a      	cbnz	r2, 28c2e <queue_insert+0xee>
	list->tail = node;
   28c12:	6060      	str	r0, [r4, #4]
}
   28c14:	e00b      	b.n	28c2e <queue_insert+0xee>
}
   28c16:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   28c18:	f8c8 9000 	str.w	r9, [r8]
}
   28c1c:	e7ef      	b.n	28bfe <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28c1e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   28c20:	2a03      	cmp	r2, #3
   28c22:	d810      	bhi.n	28c46 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c24:	6001      	str	r1, [r0, #0]
	return list->tail;
   28c26:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   28c28:	b939      	cbnz	r1, 28c3a <queue_insert+0xfa>
	list->head = node;
   28c2a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   28c2e:	2104      	movs	r1, #4
   28c30:	f104 0014 	add.w	r0, r4, #20
   28c34:	f00c f987 	bl	34f46 <z_handle_obj_poll_events>
   28c38:	e7b8      	b.n	28bac <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28c3a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c3c:	f002 0203 	and.w	r2, r2, #3
   28c40:	4302      	orrs	r2, r0
   28c42:	600a      	str	r2, [r1, #0]
   28c44:	e7e5      	b.n	28c12 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28c46:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c4a:	430a      	orrs	r2, r1
   28c4c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28c4e:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   28c50:	f002 0203 	and.w	r2, r2, #3
   28c54:	ea40 0302 	orr.w	r3, r0, r2
   28c58:	6033      	str	r3, [r6, #0]
}
   28c5a:	e7e8      	b.n	28c2e <queue_insert+0xee>
   28c5c:	000385b7 	.word	0x000385b7
   28c60:	00038610 	.word	0x00038610
   28c64:	000381c3 	.word	0x000381c3
   28c68:	00038625 	.word	0x00038625
   28c6c:	000385e4 	.word	0x000385e4
   28c70:	000385fb 	.word	0x000385fb

00028c74 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   28c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28c78:	4606      	mov	r6, r0
   28c7a:	4691      	mov	r9, r2
   28c7c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   28c7e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28c82:	f04f 0320 	mov.w	r3, #32
   28c86:	f3ef 8811 	mrs	r8, BASEPRI
   28c8a:	f383 8812 	msr	BASEPRI_MAX, r3
   28c8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c92:	4628      	mov	r0, r5
   28c94:	f7ff fda0 	bl	287d8 <z_spin_lock_valid>
   28c98:	b968      	cbnz	r0, 28cb6 <z_impl_k_queue_get+0x42>
   28c9a:	2394      	movs	r3, #148	; 0x94
   28c9c:	4a23      	ldr	r2, [pc, #140]	; (28d2c <z_impl_k_queue_get+0xb8>)
   28c9e:	4924      	ldr	r1, [pc, #144]	; (28d30 <z_impl_k_queue_get+0xbc>)
   28ca0:	4824      	ldr	r0, [pc, #144]	; (28d34 <z_impl_k_queue_get+0xc0>)
   28ca2:	f005 fe57 	bl	2e954 <assert_print>
   28ca6:	4629      	mov	r1, r5
   28ca8:	4823      	ldr	r0, [pc, #140]	; (28d38 <z_impl_k_queue_get+0xc4>)
   28caa:	f005 fe53 	bl	2e954 <assert_print>
   28cae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28cb0:	481e      	ldr	r0, [pc, #120]	; (28d2c <z_impl_k_queue_get+0xb8>)
   28cb2:	f005 fe48 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28cb6:	4628      	mov	r0, r5
   28cb8:	f7ff fdaa 	bl	28810 <z_spin_lock_set_owner>
	return list->head;
   28cbc:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   28cbe:	b1ec      	cbz	r4, 28cfc <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28cc0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   28cc2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   28cc4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   28cc8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   28cca:	4620      	mov	r0, r4
   28ccc:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   28cd0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   28cd2:	bf08      	it	eq
   28cd4:	6073      	streq	r3, [r6, #4]
   28cd6:	f00b ff7a 	bl	34bce <z_queue_node_peek>
   28cda:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28cdc:	4628      	mov	r0, r5
   28cde:	f7ff fd89 	bl	287f4 <z_spin_unlock_valid>
   28ce2:	b9d8      	cbnz	r0, 28d1c <z_impl_k_queue_get+0xa8>
   28ce4:	23c2      	movs	r3, #194	; 0xc2
   28ce6:	4a11      	ldr	r2, [pc, #68]	; (28d2c <z_impl_k_queue_get+0xb8>)
   28ce8:	4914      	ldr	r1, [pc, #80]	; (28d3c <z_impl_k_queue_get+0xc8>)
   28cea:	4812      	ldr	r0, [pc, #72]	; (28d34 <z_impl_k_queue_get+0xc0>)
   28cec:	f005 fe32 	bl	2e954 <assert_print>
   28cf0:	4629      	mov	r1, r5
   28cf2:	4813      	ldr	r0, [pc, #76]	; (28d40 <z_impl_k_queue_get+0xcc>)
   28cf4:	f005 fe2e 	bl	2e954 <assert_print>
   28cf8:	21c2      	movs	r1, #194	; 0xc2
   28cfa:	e7d9      	b.n	28cb0 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28cfc:	ea59 0307 	orrs.w	r3, r9, r7
   28d00:	d0ec      	beq.n	28cdc <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   28d02:	4641      	mov	r1, r8
   28d04:	4628      	mov	r0, r5
   28d06:	e9cd 9700 	strd	r9, r7, [sp]
   28d0a:	f106 020c 	add.w	r2, r6, #12
   28d0e:	f001 fa5b 	bl	2a1c8 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   28d12:	b938      	cbnz	r0, 28d24 <z_impl_k_queue_get+0xb0>
   28d14:	4b0b      	ldr	r3, [pc, #44]	; (28d44 <z_impl_k_queue_get+0xd0>)
   28d16:	689b      	ldr	r3, [r3, #8]
   28d18:	695c      	ldr	r4, [r3, #20]
   28d1a:	e003      	b.n	28d24 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   28d1c:	f388 8811 	msr	BASEPRI, r8
   28d20:	f3bf 8f6f 	isb	sy
}
   28d24:	4620      	mov	r0, r4
   28d26:	b003      	add	sp, #12
   28d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d2c:	000385b7 	.word	0x000385b7
   28d30:	00038610 	.word	0x00038610
   28d34:	000381c3 	.word	0x000381c3
   28d38:	00038625 	.word	0x00038625
   28d3c:	000385e4 	.word	0x000385e4
   28d40:	000385fb 	.word	0x000385fb
   28d44:	20010fc0 	.word	0x20010fc0

00028d48 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   28d48:	b538      	push	{r3, r4, r5, lr}
   28d4a:	4604      	mov	r4, r0
	__asm__ volatile(
   28d4c:	f04f 0320 	mov.w	r3, #32
   28d50:	f3ef 8511 	mrs	r5, BASEPRI
   28d54:	f383 8812 	msr	BASEPRI_MAX, r3
   28d58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28d5c:	4817      	ldr	r0, [pc, #92]	; (28dbc <z_impl_k_sem_give+0x74>)
   28d5e:	f7ff fd3b 	bl	287d8 <z_spin_lock_valid>
   28d62:	b968      	cbnz	r0, 28d80 <z_impl_k_sem_give+0x38>
   28d64:	2394      	movs	r3, #148	; 0x94
   28d66:	4a16      	ldr	r2, [pc, #88]	; (28dc0 <z_impl_k_sem_give+0x78>)
   28d68:	4916      	ldr	r1, [pc, #88]	; (28dc4 <z_impl_k_sem_give+0x7c>)
   28d6a:	4817      	ldr	r0, [pc, #92]	; (28dc8 <z_impl_k_sem_give+0x80>)
   28d6c:	f005 fdf2 	bl	2e954 <assert_print>
   28d70:	4912      	ldr	r1, [pc, #72]	; (28dbc <z_impl_k_sem_give+0x74>)
   28d72:	4816      	ldr	r0, [pc, #88]	; (28dcc <z_impl_k_sem_give+0x84>)
   28d74:	f005 fdee 	bl	2e954 <assert_print>
   28d78:	2194      	movs	r1, #148	; 0x94
   28d7a:	4811      	ldr	r0, [pc, #68]	; (28dc0 <z_impl_k_sem_give+0x78>)
   28d7c:	f005 fde3 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28d80:	480e      	ldr	r0, [pc, #56]	; (28dbc <z_impl_k_sem_give+0x74>)
   28d82:	f7ff fd45 	bl	28810 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   28d86:	4620      	mov	r0, r4
   28d88:	f001 fc9e 	bl	2a6c8 <z_unpend_first_thread>

	if (thread != NULL) {
   28d8c:	b148      	cbz	r0, 28da2 <z_impl_k_sem_give+0x5a>
   28d8e:	2200      	movs	r2, #0
   28d90:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   28d92:	f000 fecf 	bl	29b34 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   28d96:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   28d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   28d9c:	4807      	ldr	r0, [pc, #28]	; (28dbc <z_impl_k_sem_give+0x74>)
   28d9e:	f000 bf57 	b.w	29c50 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   28da2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   28da6:	429a      	cmp	r2, r3
   28da8:	bf18      	it	ne
   28daa:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   28dac:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   28dae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   28db0:	f104 0010 	add.w	r0, r4, #16
   28db4:	f00c f8c7 	bl	34f46 <z_handle_obj_poll_events>
}
   28db8:	e7ed      	b.n	28d96 <z_impl_k_sem_give+0x4e>
   28dba:	bf00      	nop
   28dbc:	20010fe8 	.word	0x20010fe8
   28dc0:	000385b7 	.word	0x000385b7
   28dc4:	00038610 	.word	0x00038610
   28dc8:	000381c3 	.word	0x000381c3
   28dcc:	00038625 	.word	0x00038625

00028dd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   28dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28dd2:	4604      	mov	r4, r0
   28dd4:	4616      	mov	r6, r2
   28dd6:	461d      	mov	r5, r3
   28dd8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   28ddc:	b17b      	cbz	r3, 28dfe <z_impl_k_sem_take+0x2e>
   28dde:	ea52 0305 	orrs.w	r3, r2, r5
   28de2:	d00c      	beq.n	28dfe <z_impl_k_sem_take+0x2e>
   28de4:	492d      	ldr	r1, [pc, #180]	; (28e9c <z_impl_k_sem_take+0xcc>)
   28de6:	2379      	movs	r3, #121	; 0x79
   28de8:	4a2d      	ldr	r2, [pc, #180]	; (28ea0 <z_impl_k_sem_take+0xd0>)
   28dea:	482e      	ldr	r0, [pc, #184]	; (28ea4 <z_impl_k_sem_take+0xd4>)
   28dec:	f005 fdb2 	bl	2e954 <assert_print>
   28df0:	482d      	ldr	r0, [pc, #180]	; (28ea8 <z_impl_k_sem_take+0xd8>)
   28df2:	f005 fdaf 	bl	2e954 <assert_print>
   28df6:	2179      	movs	r1, #121	; 0x79
   28df8:	4829      	ldr	r0, [pc, #164]	; (28ea0 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28dfa:	f005 fda4 	bl	2e946 <assert_post_action>
   28dfe:	f04f 0320 	mov.w	r3, #32
   28e02:	f3ef 8711 	mrs	r7, BASEPRI
   28e06:	f383 8812 	msr	BASEPRI_MAX, r3
   28e0a:	f3bf 8f6f 	isb	sy
   28e0e:	4827      	ldr	r0, [pc, #156]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e10:	f7ff fce2 	bl	287d8 <z_spin_lock_valid>
   28e14:	b960      	cbnz	r0, 28e30 <z_impl_k_sem_take+0x60>
   28e16:	2394      	movs	r3, #148	; 0x94
   28e18:	4a25      	ldr	r2, [pc, #148]	; (28eb0 <z_impl_k_sem_take+0xe0>)
   28e1a:	4926      	ldr	r1, [pc, #152]	; (28eb4 <z_impl_k_sem_take+0xe4>)
   28e1c:	4821      	ldr	r0, [pc, #132]	; (28ea4 <z_impl_k_sem_take+0xd4>)
   28e1e:	f005 fd99 	bl	2e954 <assert_print>
   28e22:	4922      	ldr	r1, [pc, #136]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e24:	4824      	ldr	r0, [pc, #144]	; (28eb8 <z_impl_k_sem_take+0xe8>)
   28e26:	f005 fd95 	bl	2e954 <assert_print>
   28e2a:	2194      	movs	r1, #148	; 0x94
   28e2c:	4820      	ldr	r0, [pc, #128]	; (28eb0 <z_impl_k_sem_take+0xe0>)
   28e2e:	e7e4      	b.n	28dfa <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   28e30:	481e      	ldr	r0, [pc, #120]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e32:	f7ff fced 	bl	28810 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   28e36:	68a3      	ldr	r3, [r4, #8]
   28e38:	b1c3      	cbz	r3, 28e6c <z_impl_k_sem_take+0x9c>
		sem->count--;
   28e3a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e3c:	481b      	ldr	r0, [pc, #108]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e3e:	60a3      	str	r3, [r4, #8]
   28e40:	f7ff fcd8 	bl	287f4 <z_spin_unlock_valid>
   28e44:	b958      	cbnz	r0, 28e5e <z_impl_k_sem_take+0x8e>
   28e46:	23c2      	movs	r3, #194	; 0xc2
   28e48:	4a19      	ldr	r2, [pc, #100]	; (28eb0 <z_impl_k_sem_take+0xe0>)
   28e4a:	491c      	ldr	r1, [pc, #112]	; (28ebc <z_impl_k_sem_take+0xec>)
   28e4c:	4815      	ldr	r0, [pc, #84]	; (28ea4 <z_impl_k_sem_take+0xd4>)
   28e4e:	f005 fd81 	bl	2e954 <assert_print>
   28e52:	4916      	ldr	r1, [pc, #88]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e54:	481a      	ldr	r0, [pc, #104]	; (28ec0 <z_impl_k_sem_take+0xf0>)
   28e56:	f005 fd7d 	bl	2e954 <assert_print>
   28e5a:	21c2      	movs	r1, #194	; 0xc2
   28e5c:	e7e6      	b.n	28e2c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   28e5e:	f387 8811 	msr	BASEPRI, r7
   28e62:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   28e66:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   28e68:	b003      	add	sp, #12
   28e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28e6c:	ea56 0305 	orrs.w	r3, r6, r5
   28e70:	d10b      	bne.n	28e8a <z_impl_k_sem_take+0xba>
   28e72:	480e      	ldr	r0, [pc, #56]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e74:	f7ff fcbe 	bl	287f4 <z_spin_unlock_valid>
   28e78:	2800      	cmp	r0, #0
   28e7a:	d0e4      	beq.n	28e46 <z_impl_k_sem_take+0x76>
   28e7c:	f387 8811 	msr	BASEPRI, r7
   28e80:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   28e84:	f06f 000f 	mvn.w	r0, #15
   28e88:	e7ee      	b.n	28e68 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   28e8a:	4622      	mov	r2, r4
   28e8c:	4639      	mov	r1, r7
   28e8e:	e9cd 6500 	strd	r6, r5, [sp]
   28e92:	4806      	ldr	r0, [pc, #24]	; (28eac <z_impl_k_sem_take+0xdc>)
   28e94:	f001 f998 	bl	2a1c8 <z_pend_curr>
	return ret;
   28e98:	e7e6      	b.n	28e68 <z_impl_k_sem_take+0x98>
   28e9a:	bf00      	nop
   28e9c:	000407ab 	.word	0x000407ab
   28ea0:	0004078b 	.word	0x0004078b
   28ea4:	000381c3 	.word	0x000381c3
   28ea8:	00038b19 	.word	0x00038b19
   28eac:	20010fe8 	.word	0x20010fe8
   28eb0:	000385b7 	.word	0x000385b7
   28eb4:	00038610 	.word	0x00038610
   28eb8:	00038625 	.word	0x00038625
   28ebc:	000385e4 	.word	0x000385e4
   28ec0:	000385fb 	.word	0x000385fb

00028ec4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   28ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   28ec6:	2400      	movs	r4, #0
   28ec8:	4b08      	ldr	r3, [pc, #32]	; (28eec <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   28eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   28ece:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   28ed0:	ab02      	add	r3, sp, #8
   28ed2:	9300      	str	r3, [sp, #0]
   28ed4:	4906      	ldr	r1, [pc, #24]	; (28ef0 <k_sys_work_q_init+0x2c>)
   28ed6:	f04f 33ff 	mov.w	r3, #4294967295
   28eda:	4806      	ldr	r0, [pc, #24]	; (28ef4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   28edc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   28ee0:	f000 fac0 	bl	29464 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   28ee4:	4620      	mov	r0, r4
   28ee6:	b004      	add	sp, #16
   28ee8:	bd10      	pop	{r4, pc}
   28eea:	bf00      	nop
   28eec:	000407f9 	.word	0x000407f9
   28ef0:	20017720 	.word	0x20017720
   28ef4:	2000f740 	.word	0x2000f740

00028ef8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   28ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28efc:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28efe:	4e6e      	ldr	r6, [pc, #440]	; (290b8 <work_queue_main+0x1c0>)
	return list->head;
   28f00:	4f6e      	ldr	r7, [pc, #440]	; (290bc <work_queue_main+0x1c4>)
   28f02:	b085      	sub	sp, #20
	__asm__ volatile(
   28f04:	f04f 0320 	mov.w	r3, #32
   28f08:	f3ef 8811 	mrs	r8, BASEPRI
   28f0c:	f383 8812 	msr	BASEPRI_MAX, r3
   28f10:	f3bf 8f6f 	isb	sy
   28f14:	4630      	mov	r0, r6
   28f16:	f7ff fc5f 	bl	287d8 <z_spin_lock_valid>
   28f1a:	b968      	cbnz	r0, 28f38 <work_queue_main+0x40>
   28f1c:	2394      	movs	r3, #148	; 0x94
   28f1e:	4a68      	ldr	r2, [pc, #416]	; (290c0 <work_queue_main+0x1c8>)
   28f20:	4968      	ldr	r1, [pc, #416]	; (290c4 <work_queue_main+0x1cc>)
   28f22:	4869      	ldr	r0, [pc, #420]	; (290c8 <work_queue_main+0x1d0>)
   28f24:	f005 fd16 	bl	2e954 <assert_print>
   28f28:	4963      	ldr	r1, [pc, #396]	; (290b8 <work_queue_main+0x1c0>)
   28f2a:	4868      	ldr	r0, [pc, #416]	; (290cc <work_queue_main+0x1d4>)
   28f2c:	f005 fd12 	bl	2e954 <assert_print>
   28f30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f32:	4863      	ldr	r0, [pc, #396]	; (290c0 <work_queue_main+0x1c8>)
   28f34:	f005 fd07 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   28f38:	4630      	mov	r0, r6
   28f3a:	f7ff fc69 	bl	28810 <z_spin_lock_set_owner>
   28f3e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   28f42:	b9ad      	cbnz	r5, 28f70 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   28f44:	2102      	movs	r1, #2
   28f46:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   28f4a:	f00b fe82 	bl	34c52 <flag_test_and_clear>
   28f4e:	2800      	cmp	r0, #0
   28f50:	d135      	bne.n	28fbe <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   28f52:	2300      	movs	r3, #0
   28f54:	f04f 32ff 	mov.w	r2, #4294967295
   28f58:	9302      	str	r3, [sp, #8]
   28f5a:	f04f 33ff 	mov.w	r3, #4294967295
   28f5e:	4641      	mov	r1, r8
   28f60:	e9cd 2300 	strd	r2, r3, [sp]
   28f64:	4630      	mov	r0, r6
   28f66:	f104 0290 	add.w	r2, r4, #144	; 0x90
   28f6a:	f001 fe9f 	bl	2acac <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   28f6e:	e7c9      	b.n	28f04 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f70:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   28f74:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f76:	4295      	cmp	r5, r2
	list->tail = node;
   28f78:	bf08      	it	eq
   28f7a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   28f7e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   28f82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f86:	4630      	mov	r0, r6
   28f88:	f043 0302 	orr.w	r3, r3, #2
   28f8c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   28f90:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   28f92:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   28f96:	f023 0304 	bic.w	r3, r3, #4
   28f9a:	f043 0301 	orr.w	r3, r3, #1
   28f9e:	60eb      	str	r3, [r5, #12]
   28fa0:	f7ff fc28 	bl	287f4 <z_spin_unlock_valid>
   28fa4:	b9a8      	cbnz	r0, 28fd2 <work_queue_main+0xda>
   28fa6:	23c2      	movs	r3, #194	; 0xc2
   28fa8:	4a45      	ldr	r2, [pc, #276]	; (290c0 <work_queue_main+0x1c8>)
   28faa:	4949      	ldr	r1, [pc, #292]	; (290d0 <work_queue_main+0x1d8>)
   28fac:	4846      	ldr	r0, [pc, #280]	; (290c8 <work_queue_main+0x1d0>)
   28fae:	f005 fcd1 	bl	2e954 <assert_print>
   28fb2:	4941      	ldr	r1, [pc, #260]	; (290b8 <work_queue_main+0x1c0>)
   28fb4:	4847      	ldr	r0, [pc, #284]	; (290d4 <work_queue_main+0x1dc>)
   28fb6:	f005 fccd 	bl	2e954 <assert_print>
   28fba:	21c2      	movs	r1, #194	; 0xc2
   28fbc:	e7b9      	b.n	28f32 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   28fbe:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   28fc2:	2200      	movs	r2, #0
   28fc4:	2101      	movs	r1, #1
   28fc6:	4628      	mov	r0, r5
   28fc8:	f001 fe12 	bl	2abf0 <z_sched_wake>
   28fcc:	2800      	cmp	r0, #0
   28fce:	d1f8      	bne.n	28fc2 <work_queue_main+0xca>
   28fd0:	e7bf      	b.n	28f52 <work_queue_main+0x5a>
	__asm__ volatile(
   28fd2:	f388 8811 	msr	BASEPRI, r8
   28fd6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   28fda:	f1b9 0f00 	cmp.w	r9, #0
   28fde:	d10a      	bne.n	28ff6 <work_queue_main+0xfe>
   28fe0:	493d      	ldr	r1, [pc, #244]	; (290d8 <work_queue_main+0x1e0>)
   28fe2:	4839      	ldr	r0, [pc, #228]	; (290c8 <work_queue_main+0x1d0>)
   28fe4:	f240 239b 	movw	r3, #667	; 0x29b
   28fe8:	4a3c      	ldr	r2, [pc, #240]	; (290dc <work_queue_main+0x1e4>)
   28fea:	f005 fcb3 	bl	2e954 <assert_print>
   28fee:	f240 219b 	movw	r1, #667	; 0x29b
   28ff2:	483a      	ldr	r0, [pc, #232]	; (290dc <work_queue_main+0x1e4>)
   28ff4:	e79e      	b.n	28f34 <work_queue_main+0x3c>
		handler(work);
   28ff6:	4628      	mov	r0, r5
   28ff8:	47c8      	blx	r9
	__asm__ volatile(
   28ffa:	f04f 0320 	mov.w	r3, #32
   28ffe:	f3ef 8a11 	mrs	sl, BASEPRI
   29002:	f383 8812 	msr	BASEPRI_MAX, r3
   29006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2900a:	4630      	mov	r0, r6
   2900c:	f7ff fbe4 	bl	287d8 <z_spin_lock_valid>
   29010:	2800      	cmp	r0, #0
   29012:	d083      	beq.n	28f1c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   29014:	4630      	mov	r0, r6
   29016:	f7ff fbfb 	bl	28810 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2901a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2901c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2901e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29022:	d417      	bmi.n	29054 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   29024:	60ea      	str	r2, [r5, #12]
   29026:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2902a:	4630      	mov	r0, r6
   2902c:	f023 0302 	bic.w	r3, r3, #2
   29030:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   29034:	f3c3 2500 	ubfx	r5, r3, #8, #1
   29038:	f7ff fbdc 	bl	287f4 <z_spin_unlock_valid>
   2903c:	2800      	cmp	r0, #0
   2903e:	d0b2      	beq.n	28fa6 <work_queue_main+0xae>
	__asm__ volatile(
   29040:	f38a 8811 	msr	BASEPRI, sl
   29044:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   29048:	2d00      	cmp	r5, #0
   2904a:	f47f af5b 	bne.w	28f04 <work_queue_main+0xc>
	z_impl_k_yield();
   2904e:	f001 fb93 	bl	2a778 <z_impl_k_yield>
}
   29052:	e757      	b.n	28f04 <work_queue_main+0xc>
	return list->head;
   29054:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   29056:	f023 0303 	bic.w	r3, r3, #3
   2905a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2905c:	2800      	cmp	r0, #0
   2905e:	d0e2      	beq.n	29026 <work_queue_main+0x12e>
	return node->next;
   29060:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   29064:	46c3      	mov	fp, r8
	return node->next;
   29066:	f8d0 9000 	ldr.w	r9, [r0]
   2906a:	2800      	cmp	r0, #0
   2906c:	d0db      	beq.n	29026 <work_queue_main+0x12e>
		if (wc->work == work) {
   2906e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   29070:	4602      	mov	r2, r0
		if (wc->work == work) {
   29072:	429d      	cmp	r5, r3
   29074:	d10d      	bne.n	29092 <work_queue_main+0x19a>
   29076:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29078:	f1b8 0f00 	cmp.w	r8, #0
   2907c:	d112      	bne.n	290a4 <work_queue_main+0x1ac>
   2907e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   29080:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   29082:	4283      	cmp	r3, r0
   29084:	d100      	bne.n	29088 <work_queue_main+0x190>
	list->tail = node;
   29086:	607a      	str	r2, [r7, #4]
	parent->next = child;
   29088:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2908c:	f7ff fe5c 	bl	28d48 <z_impl_k_sem_give>
}
   29090:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   29092:	f1b9 0f00 	cmp.w	r9, #0
   29096:	d00d      	beq.n	290b4 <work_queue_main+0x1bc>
	return node->next;
   29098:	f8d9 3000 	ldr.w	r3, [r9]
   2909c:	4648      	mov	r0, r9
   2909e:	4690      	mov	r8, r2
   290a0:	4699      	mov	r9, r3
   290a2:	e7e2      	b.n	2906a <work_queue_main+0x172>
	parent->next = child;
   290a4:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   290a8:	687b      	ldr	r3, [r7, #4]
   290aa:	4283      	cmp	r3, r0
	list->tail = node;
   290ac:	bf08      	it	eq
   290ae:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   290b2:	e7e9      	b.n	29088 <work_queue_main+0x190>
   290b4:	464b      	mov	r3, r9
   290b6:	e7f1      	b.n	2909c <work_queue_main+0x1a4>
   290b8:	20010ff4 	.word	0x20010ff4
   290bc:	20010fec 	.word	0x20010fec
   290c0:	000385b7 	.word	0x000385b7
   290c4:	00038610 	.word	0x00038610
   290c8:	000381c3 	.word	0x000381c3
   290cc:	00038625 	.word	0x00038625
   290d0:	000385e4 	.word	0x000385e4
   290d4:	000385fb 	.word	0x000385fb
   290d8:	00040823 	.word	0x00040823
   290dc:	00040802 	.word	0x00040802

000290e0 <cancel_sync_locked>:
{
   290e0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   290e2:	68c3      	ldr	r3, [r0, #12]
{
   290e4:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   290e6:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   290ea:	079b      	lsls	r3, r3, #30
{
   290ec:	460c      	mov	r4, r1
	if (ret) {
   290ee:	d50d      	bpl.n	2910c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   290f0:	2201      	movs	r2, #1
   290f2:	2100      	movs	r1, #0
   290f4:	f104 0008 	add.w	r0, r4, #8
   290f8:	f00b fd9b 	bl	34c32 <z_impl_k_sem_init>
	parent->next = child;
   290fc:	2300      	movs	r3, #0
   290fe:	6023      	str	r3, [r4, #0]
	return list->tail;
   29100:	4b05      	ldr	r3, [pc, #20]	; (29118 <cancel_sync_locked+0x38>)
	canceler->work = work;
   29102:	6065      	str	r5, [r4, #4]
   29104:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   29106:	b91a      	cbnz	r2, 29110 <cancel_sync_locked+0x30>
	list->head = node;
   29108:	e9c3 4400 	strd	r4, r4, [r3]
}
   2910c:	4630      	mov	r0, r6
   2910e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29110:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29112:	605c      	str	r4, [r3, #4]
}
   29114:	e7fa      	b.n	2910c <cancel_sync_locked+0x2c>
   29116:	bf00      	nop
   29118:	20010fec 	.word	0x20010fec

0002911c <submit_to_queue_locked>:
{
   2911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2911e:	68c3      	ldr	r3, [r0, #12]
{
   29120:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29122:	079a      	lsls	r2, r3, #30
{
   29124:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29126:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2912a:	d439      	bmi.n	291a0 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2912c:	075b      	lsls	r3, r3, #29
   2912e:	d425      	bmi.n	2917c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   29130:	680b      	ldr	r3, [r1, #0]
   29132:	b90b      	cbnz	r3, 29138 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   29134:	6883      	ldr	r3, [r0, #8]
   29136:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   29138:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2913a:	07dd      	lsls	r5, r3, #31
   2913c:	d521      	bpl.n	29182 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   2913e:	68a3      	ldr	r3, [r4, #8]
   29140:	b95b      	cbnz	r3, 2915a <submit_to_queue_locked+0x3e>
   29142:	4928      	ldr	r1, [pc, #160]	; (291e4 <submit_to_queue_locked+0xc8>)
   29144:	4828      	ldr	r0, [pc, #160]	; (291e8 <submit_to_queue_locked+0xcc>)
   29146:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2914a:	4a28      	ldr	r2, [pc, #160]	; (291ec <submit_to_queue_locked+0xd0>)
   2914c:	f005 fc02 	bl	2e954 <assert_print>
   29150:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   29154:	4825      	ldr	r0, [pc, #148]	; (291ec <submit_to_queue_locked+0xd0>)
   29156:	f005 fbf6 	bl	2e946 <assert_post_action>
			ret = 2;
   2915a:	2602      	movs	r6, #2
			*queuep = work->queue;
   2915c:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2915e:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   29160:	2d00      	cmp	r5, #0
   29162:	d03c      	beq.n	291de <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29164:	4b22      	ldr	r3, [pc, #136]	; (291f0 <submit_to_queue_locked+0xd4>)
   29166:	689b      	ldr	r3, [r3, #8]
   29168:	42ab      	cmp	r3, r5
   2916a:	d00c      	beq.n	29186 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2916c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29170:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   29172:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29176:	d416      	bmi.n	291a6 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   29178:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2917c:	2300      	movs	r3, #0
   2917e:	603b      	str	r3, [r7, #0]
	return ret;
   29180:	e027      	b.n	291d2 <submit_to_queue_locked+0xb6>
		ret = 1;
   29182:	2601      	movs	r6, #1
   29184:	e7eb      	b.n	2915e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29186:	f00b fcff 	bl	34b88 <k_is_in_isr>
   2918a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   2918e:	2800      	cmp	r0, #0
   29190:	d1ee      	bne.n	29170 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29192:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   29194:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29198:	d5ee      	bpl.n	29178 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   2919a:	b152      	cbz	r2, 291b2 <submit_to_queue_locked+0x96>
   2919c:	075b      	lsls	r3, r3, #29
   2919e:	d408      	bmi.n	291b2 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   291a0:	f06f 060f 	mvn.w	r6, #15
   291a4:	e7ea      	b.n	2917c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   291a6:	2a00      	cmp	r2, #0
   291a8:	d1fa      	bne.n	291a0 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   291aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   291ae:	2b00      	cmp	r3, #0
   291b0:	d1f6      	bne.n	291a0 <submit_to_queue_locked+0x84>
	parent->next = child;
   291b2:	2300      	movs	r3, #0
   291b4:	6023      	str	r3, [r4, #0]
	return list->tail;
   291b6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   291ba:	b963      	cbnz	r3, 291d6 <submit_to_queue_locked+0xba>
	list->head = node;
   291bc:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   291c0:	4628      	mov	r0, r5
   291c2:	f00b fd60 	bl	34c86 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   291c6:	68e3      	ldr	r3, [r4, #12]
   291c8:	f043 0304 	orr.w	r3, r3, #4
   291cc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   291ce:	683b      	ldr	r3, [r7, #0]
   291d0:	60a3      	str	r3, [r4, #8]
}
   291d2:	4630      	mov	r0, r6
   291d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   291d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   291d8:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   291dc:	e7f0      	b.n	291c0 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   291de:	f06f 0615 	mvn.w	r6, #21
   291e2:	e7cb      	b.n	2917c <submit_to_queue_locked+0x60>
   291e4:	0004083a 	.word	0x0004083a
   291e8:	000381c3 	.word	0x000381c3
   291ec:	00040802 	.word	0x00040802
   291f0:	20010fc0 	.word	0x20010fc0

000291f4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   291f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   291f6:	4604      	mov	r4, r0
	__asm__ volatile(
   291f8:	f04f 0320 	mov.w	r3, #32
   291fc:	f3ef 8511 	mrs	r5, BASEPRI
   29200:	f383 8812 	msr	BASEPRI_MAX, r3
   29204:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29208:	481c      	ldr	r0, [pc, #112]	; (2927c <work_timeout+0x88>)
   2920a:	f7ff fae5 	bl	287d8 <z_spin_lock_valid>
   2920e:	b968      	cbnz	r0, 2922c <work_timeout+0x38>
   29210:	2394      	movs	r3, #148	; 0x94
   29212:	4a1b      	ldr	r2, [pc, #108]	; (29280 <work_timeout+0x8c>)
   29214:	491b      	ldr	r1, [pc, #108]	; (29284 <work_timeout+0x90>)
   29216:	481c      	ldr	r0, [pc, #112]	; (29288 <work_timeout+0x94>)
   29218:	f005 fb9c 	bl	2e954 <assert_print>
   2921c:	4917      	ldr	r1, [pc, #92]	; (2927c <work_timeout+0x88>)
   2921e:	481b      	ldr	r0, [pc, #108]	; (2928c <work_timeout+0x98>)
   29220:	f005 fb98 	bl	2e954 <assert_print>
   29224:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29226:	4816      	ldr	r0, [pc, #88]	; (29280 <work_timeout+0x8c>)
   29228:	f005 fb8d 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2922c:	4813      	ldr	r0, [pc, #76]	; (2927c <work_timeout+0x88>)
   2922e:	f7ff faef 	bl	28810 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   29232:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29234:	2103      	movs	r1, #3
   29236:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   29238:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2923a:	f1a4 0610 	sub.w	r6, r4, #16
   2923e:	f00b fd08 	bl	34c52 <flag_test_and_clear>
   29242:	b128      	cbz	r0, 29250 <work_timeout+0x5c>
		queue = dw->queue;
   29244:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   29246:	4630      	mov	r0, r6
   29248:	a901      	add	r1, sp, #4
		queue = dw->queue;
   2924a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2924c:	f7ff ff66 	bl	2911c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29250:	480a      	ldr	r0, [pc, #40]	; (2927c <work_timeout+0x88>)
   29252:	f7ff facf 	bl	287f4 <z_spin_unlock_valid>
   29256:	b958      	cbnz	r0, 29270 <work_timeout+0x7c>
   29258:	23c2      	movs	r3, #194	; 0xc2
   2925a:	4a09      	ldr	r2, [pc, #36]	; (29280 <work_timeout+0x8c>)
   2925c:	490c      	ldr	r1, [pc, #48]	; (29290 <work_timeout+0x9c>)
   2925e:	480a      	ldr	r0, [pc, #40]	; (29288 <work_timeout+0x94>)
   29260:	f005 fb78 	bl	2e954 <assert_print>
   29264:	4905      	ldr	r1, [pc, #20]	; (2927c <work_timeout+0x88>)
   29266:	480b      	ldr	r0, [pc, #44]	; (29294 <work_timeout+0xa0>)
   29268:	f005 fb74 	bl	2e954 <assert_print>
   2926c:	21c2      	movs	r1, #194	; 0xc2
   2926e:	e7da      	b.n	29226 <work_timeout+0x32>
	__asm__ volatile(
   29270:	f385 8811 	msr	BASEPRI, r5
   29274:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   29278:	b002      	add	sp, #8
   2927a:	bd70      	pop	{r4, r5, r6, pc}
   2927c:	20010ff4 	.word	0x20010ff4
   29280:	000385b7 	.word	0x000385b7
   29284:	00038610 	.word	0x00038610
   29288:	000381c3 	.word	0x000381c3
   2928c:	00038625 	.word	0x00038625
   29290:	000385e4 	.word	0x000385e4
   29294:	000385fb 	.word	0x000385fb

00029298 <k_work_init>:
{
   29298:	b538      	push	{r3, r4, r5, lr}
   2929a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   2929c:	4604      	mov	r4, r0
   2929e:	b948      	cbnz	r0, 292b4 <k_work_init+0x1c>
   292a0:	490c      	ldr	r1, [pc, #48]	; (292d4 <k_work_init+0x3c>)
   292a2:	2389      	movs	r3, #137	; 0x89
   292a4:	4a0c      	ldr	r2, [pc, #48]	; (292d8 <k_work_init+0x40>)
   292a6:	480d      	ldr	r0, [pc, #52]	; (292dc <k_work_init+0x44>)
   292a8:	f005 fb54 	bl	2e954 <assert_print>
   292ac:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   292ae:	480a      	ldr	r0, [pc, #40]	; (292d8 <k_work_init+0x40>)
   292b0:	f005 fb49 	bl	2e946 <assert_post_action>
   292b4:	b939      	cbnz	r1, 292c6 <k_work_init+0x2e>
   292b6:	490a      	ldr	r1, [pc, #40]	; (292e0 <k_work_init+0x48>)
   292b8:	238a      	movs	r3, #138	; 0x8a
   292ba:	4a07      	ldr	r2, [pc, #28]	; (292d8 <k_work_init+0x40>)
   292bc:	4807      	ldr	r0, [pc, #28]	; (292dc <k_work_init+0x44>)
   292be:	f005 fb49 	bl	2e954 <assert_print>
   292c2:	218a      	movs	r1, #138	; 0x8a
   292c4:	e7f3      	b.n	292ae <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   292c6:	2210      	movs	r2, #16
   292c8:	2100      	movs	r1, #0
   292ca:	f00b feaf 	bl	3502c <memset>
   292ce:	6065      	str	r5, [r4, #4]
}
   292d0:	bd38      	pop	{r3, r4, r5, pc}
   292d2:	bf00      	nop
   292d4:	000408d9 	.word	0x000408d9
   292d8:	00040802 	.word	0x00040802
   292dc:	000381c3 	.word	0x000381c3
   292e0:	00040823 	.word	0x00040823

000292e4 <k_work_busy_get>:
{
   292e4:	b538      	push	{r3, r4, r5, lr}
   292e6:	4604      	mov	r4, r0
	__asm__ volatile(
   292e8:	f04f 0320 	mov.w	r3, #32
   292ec:	f3ef 8511 	mrs	r5, BASEPRI
   292f0:	f383 8812 	msr	BASEPRI_MAX, r3
   292f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   292f8:	4816      	ldr	r0, [pc, #88]	; (29354 <k_work_busy_get+0x70>)
   292fa:	f7ff fa6d 	bl	287d8 <z_spin_lock_valid>
   292fe:	b968      	cbnz	r0, 2931c <k_work_busy_get+0x38>
   29300:	2394      	movs	r3, #148	; 0x94
   29302:	4a15      	ldr	r2, [pc, #84]	; (29358 <k_work_busy_get+0x74>)
   29304:	4915      	ldr	r1, [pc, #84]	; (2935c <k_work_busy_get+0x78>)
   29306:	4816      	ldr	r0, [pc, #88]	; (29360 <k_work_busy_get+0x7c>)
   29308:	f005 fb24 	bl	2e954 <assert_print>
   2930c:	4911      	ldr	r1, [pc, #68]	; (29354 <k_work_busy_get+0x70>)
   2930e:	4815      	ldr	r0, [pc, #84]	; (29364 <k_work_busy_get+0x80>)
   29310:	f005 fb20 	bl	2e954 <assert_print>
   29314:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29316:	4810      	ldr	r0, [pc, #64]	; (29358 <k_work_busy_get+0x74>)
   29318:	f005 fb15 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2931c:	480d      	ldr	r0, [pc, #52]	; (29354 <k_work_busy_get+0x70>)
   2931e:	f7ff fa77 	bl	28810 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   29322:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29324:	480b      	ldr	r0, [pc, #44]	; (29354 <k_work_busy_get+0x70>)
   29326:	f004 040f 	and.w	r4, r4, #15
   2932a:	f7ff fa63 	bl	287f4 <z_spin_unlock_valid>
   2932e:	b958      	cbnz	r0, 29348 <k_work_busy_get+0x64>
   29330:	23c2      	movs	r3, #194	; 0xc2
   29332:	4a09      	ldr	r2, [pc, #36]	; (29358 <k_work_busy_get+0x74>)
   29334:	490c      	ldr	r1, [pc, #48]	; (29368 <k_work_busy_get+0x84>)
   29336:	480a      	ldr	r0, [pc, #40]	; (29360 <k_work_busy_get+0x7c>)
   29338:	f005 fb0c 	bl	2e954 <assert_print>
   2933c:	4905      	ldr	r1, [pc, #20]	; (29354 <k_work_busy_get+0x70>)
   2933e:	480b      	ldr	r0, [pc, #44]	; (2936c <k_work_busy_get+0x88>)
   29340:	f005 fb08 	bl	2e954 <assert_print>
   29344:	21c2      	movs	r1, #194	; 0xc2
   29346:	e7e6      	b.n	29316 <k_work_busy_get+0x32>
	__asm__ volatile(
   29348:	f385 8811 	msr	BASEPRI, r5
   2934c:	f3bf 8f6f 	isb	sy
}
   29350:	4620      	mov	r0, r4
   29352:	bd38      	pop	{r3, r4, r5, pc}
   29354:	20010ff4 	.word	0x20010ff4
   29358:	000385b7 	.word	0x000385b7
   2935c:	00038610 	.word	0x00038610
   29360:	000381c3 	.word	0x000381c3
   29364:	00038625 	.word	0x00038625
   29368:	000385e4 	.word	0x000385e4
   2936c:	000385fb 	.word	0x000385fb

00029370 <z_work_submit_to_queue>:
{
   29370:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   29372:	460c      	mov	r4, r1
{
   29374:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   29376:	b959      	cbnz	r1, 29390 <z_work_submit_to_queue+0x20>
   29378:	4921      	ldr	r1, [pc, #132]	; (29400 <z_work_submit_to_queue+0x90>)
   2937a:	4822      	ldr	r0, [pc, #136]	; (29404 <z_work_submit_to_queue+0x94>)
   2937c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   29380:	4a21      	ldr	r2, [pc, #132]	; (29408 <z_work_submit_to_queue+0x98>)
   29382:	f005 fae7 	bl	2e954 <assert_print>
   29386:	f44f 71ba 	mov.w	r1, #372	; 0x174
   2938a:	481f      	ldr	r0, [pc, #124]	; (29408 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2938c:	f005 fadb 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   29390:	f04f 0320 	mov.w	r3, #32
   29394:	f3ef 8511 	mrs	r5, BASEPRI
   29398:	f383 8812 	msr	BASEPRI_MAX, r3
   2939c:	f3bf 8f6f 	isb	sy
   293a0:	481a      	ldr	r0, [pc, #104]	; (2940c <z_work_submit_to_queue+0x9c>)
   293a2:	f7ff fa19 	bl	287d8 <z_spin_lock_valid>
   293a6:	b960      	cbnz	r0, 293c2 <z_work_submit_to_queue+0x52>
   293a8:	2394      	movs	r3, #148	; 0x94
   293aa:	4a19      	ldr	r2, [pc, #100]	; (29410 <z_work_submit_to_queue+0xa0>)
   293ac:	4919      	ldr	r1, [pc, #100]	; (29414 <z_work_submit_to_queue+0xa4>)
   293ae:	4815      	ldr	r0, [pc, #84]	; (29404 <z_work_submit_to_queue+0x94>)
   293b0:	f005 fad0 	bl	2e954 <assert_print>
   293b4:	4915      	ldr	r1, [pc, #84]	; (2940c <z_work_submit_to_queue+0x9c>)
   293b6:	4818      	ldr	r0, [pc, #96]	; (29418 <z_work_submit_to_queue+0xa8>)
   293b8:	f005 facc 	bl	2e954 <assert_print>
   293bc:	2194      	movs	r1, #148	; 0x94
   293be:	4814      	ldr	r0, [pc, #80]	; (29410 <z_work_submit_to_queue+0xa0>)
   293c0:	e7e4      	b.n	2938c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   293c2:	4812      	ldr	r0, [pc, #72]	; (2940c <z_work_submit_to_queue+0x9c>)
   293c4:	f7ff fa24 	bl	28810 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   293c8:	4620      	mov	r0, r4
   293ca:	a901      	add	r1, sp, #4
   293cc:	f7ff fea6 	bl	2911c <submit_to_queue_locked>
   293d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   293d2:	480e      	ldr	r0, [pc, #56]	; (2940c <z_work_submit_to_queue+0x9c>)
   293d4:	f7ff fa0e 	bl	287f4 <z_spin_unlock_valid>
   293d8:	b958      	cbnz	r0, 293f2 <z_work_submit_to_queue+0x82>
   293da:	23c2      	movs	r3, #194	; 0xc2
   293dc:	4a0c      	ldr	r2, [pc, #48]	; (29410 <z_work_submit_to_queue+0xa0>)
   293de:	490f      	ldr	r1, [pc, #60]	; (2941c <z_work_submit_to_queue+0xac>)
   293e0:	4808      	ldr	r0, [pc, #32]	; (29404 <z_work_submit_to_queue+0x94>)
   293e2:	f005 fab7 	bl	2e954 <assert_print>
   293e6:	4909      	ldr	r1, [pc, #36]	; (2940c <z_work_submit_to_queue+0x9c>)
   293e8:	480d      	ldr	r0, [pc, #52]	; (29420 <z_work_submit_to_queue+0xb0>)
   293ea:	f005 fab3 	bl	2e954 <assert_print>
   293ee:	21c2      	movs	r1, #194	; 0xc2
   293f0:	e7e5      	b.n	293be <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   293f2:	f385 8811 	msr	BASEPRI, r5
   293f6:	f3bf 8f6f 	isb	sy
}
   293fa:	4620      	mov	r0, r4
   293fc:	b003      	add	sp, #12
   293fe:	bd30      	pop	{r4, r5, pc}
   29400:	000408d9 	.word	0x000408d9
   29404:	000381c3 	.word	0x000381c3
   29408:	00040802 	.word	0x00040802
   2940c:	20010ff4 	.word	0x20010ff4
   29410:	000385b7 	.word	0x000385b7
   29414:	00038610 	.word	0x00038610
   29418:	00038625 	.word	0x00038625
   2941c:	000385e4 	.word	0x000385e4
   29420:	000385fb 	.word	0x000385fb

00029424 <k_work_submit>:
{
   29424:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   29426:	4801      	ldr	r0, [pc, #4]	; (2942c <k_work_submit+0x8>)
   29428:	f00b bc67 	b.w	34cfa <k_work_submit_to_queue>
   2942c:	2000f740 	.word	0x2000f740

00029430 <k_work_queue_init>:
{
   29430:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   29432:	b958      	cbnz	r0, 2944c <k_work_queue_init+0x1c>
   29434:	4908      	ldr	r1, [pc, #32]	; (29458 <k_work_queue_init+0x28>)
   29436:	4809      	ldr	r0, [pc, #36]	; (2945c <k_work_queue_init+0x2c>)
   29438:	f240 23b9 	movw	r3, #697	; 0x2b9
   2943c:	4a08      	ldr	r2, [pc, #32]	; (29460 <k_work_queue_init+0x30>)
   2943e:	f005 fa89 	bl	2e954 <assert_print>
   29442:	f240 21b9 	movw	r1, #697	; 0x2b9
   29446:	4806      	ldr	r0, [pc, #24]	; (29460 <k_work_queue_init+0x30>)
   29448:	f005 fa7d 	bl	2e946 <assert_post_action>
	*queue = (struct k_work_q) {
   2944c:	22a8      	movs	r2, #168	; 0xa8
   2944e:	2100      	movs	r1, #0
   29450:	f00b fdec 	bl	3502c <memset>
}
   29454:	bd08      	pop	{r3, pc}
   29456:	bf00      	nop
   29458:	00040840 	.word	0x00040840
   2945c:	000381c3 	.word	0x000381c3
   29460:	00040802 	.word	0x00040802

00029464 <k_work_queue_start>:
{
   29464:	b5f0      	push	{r4, r5, r6, r7, lr}
   29466:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   29468:	4604      	mov	r4, r0
{
   2946a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2946c:	b958      	cbnz	r0, 29486 <k_work_queue_start+0x22>
   2946e:	492b      	ldr	r1, [pc, #172]	; (2951c <k_work_queue_start+0xb8>)
   29470:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   29474:	4a2a      	ldr	r2, [pc, #168]	; (29520 <k_work_queue_start+0xbc>)
   29476:	482b      	ldr	r0, [pc, #172]	; (29524 <k_work_queue_start+0xc0>)
   29478:	f005 fa6c 	bl	2e954 <assert_print>
   2947c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   29480:	4827      	ldr	r0, [pc, #156]	; (29520 <k_work_queue_start+0xbc>)
   29482:	f005 fa60 	bl	2e946 <assert_post_action>
   29486:	b949      	cbnz	r1, 2949c <k_work_queue_start+0x38>
   29488:	4927      	ldr	r1, [pc, #156]	; (29528 <k_work_queue_start+0xc4>)
   2948a:	f240 23c9 	movw	r3, #713	; 0x2c9
   2948e:	4a24      	ldr	r2, [pc, #144]	; (29520 <k_work_queue_start+0xbc>)
   29490:	4824      	ldr	r0, [pc, #144]	; (29524 <k_work_queue_start+0xc0>)
   29492:	f005 fa5f 	bl	2e954 <assert_print>
   29496:	f240 21c9 	movw	r1, #713	; 0x2c9
   2949a:	e7f1      	b.n	29480 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   2949c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   294a0:	f010 0001 	ands.w	r0, r0, #1
   294a4:	d009      	beq.n	294ba <k_work_queue_start+0x56>
   294a6:	4921      	ldr	r1, [pc, #132]	; (2952c <k_work_queue_start+0xc8>)
   294a8:	f240 23ca 	movw	r3, #714	; 0x2ca
   294ac:	4a1c      	ldr	r2, [pc, #112]	; (29520 <k_work_queue_start+0xbc>)
   294ae:	481d      	ldr	r0, [pc, #116]	; (29524 <k_work_queue_start+0xc0>)
   294b0:	f005 fa50 	bl	2e954 <assert_print>
   294b4:	f240 21ca 	movw	r1, #714	; 0x2ca
   294b8:	e7e2      	b.n	29480 <k_work_queue_start+0x1c>
	list->tail = NULL;
   294ba:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   294be:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   294c2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   294c6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   294ca:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   294ce:	b31d      	cbz	r5, 29518 <k_work_queue_start+0xb4>
   294d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   294d2:	2800      	cmp	r0, #0
   294d4:	f240 1001 	movw	r0, #257	; 0x101
   294d8:	bf08      	it	eq
   294da:	2001      	moveq	r0, #1
	*flagp = flags;
   294dc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   294e0:	2000      	movs	r0, #0
   294e2:	f04f 36ff 	mov.w	r6, #4294967295
   294e6:	f04f 37ff 	mov.w	r7, #4294967295
   294ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   294ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   294f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   294f6:	4620      	mov	r0, r4
   294f8:	4b0d      	ldr	r3, [pc, #52]	; (29530 <k_work_queue_start+0xcc>)
   294fa:	9400      	str	r4, [sp, #0]
   294fc:	f7ff f8a2 	bl	28644 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   29500:	b125      	cbz	r5, 2950c <k_work_queue_start+0xa8>
   29502:	6829      	ldr	r1, [r5, #0]
   29504:	b111      	cbz	r1, 2950c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   29506:	4620      	mov	r0, r4
   29508:	f00b fb44 	bl	34b94 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2950c:	4620      	mov	r0, r4
}
   2950e:	b009      	add	sp, #36	; 0x24
   29510:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   29514:	f00b bb43 	b.w	34b9e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   29518:	2001      	movs	r0, #1
   2951a:	e7df      	b.n	294dc <k_work_queue_start+0x78>
   2951c:	00040898 	.word	0x00040898
   29520:	00040802 	.word	0x00040802
   29524:	000381c3 	.word	0x000381c3
   29528:	0004089e 	.word	0x0004089e
   2952c:	000408a4 	.word	0x000408a4
   29530:	00028ef9 	.word	0x00028ef9

00029534 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   29534:	b538      	push	{r3, r4, r5, lr}
   29536:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   29538:	4604      	mov	r4, r0
   2953a:	b958      	cbnz	r0, 29554 <k_work_init_delayable+0x20>
   2953c:	490f      	ldr	r1, [pc, #60]	; (2957c <k_work_init_delayable+0x48>)
   2953e:	f44f 7350 	mov.w	r3, #832	; 0x340
   29542:	4a0f      	ldr	r2, [pc, #60]	; (29580 <k_work_init_delayable+0x4c>)
   29544:	480f      	ldr	r0, [pc, #60]	; (29584 <k_work_init_delayable+0x50>)
   29546:	f005 fa05 	bl	2e954 <assert_print>
   2954a:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   2954e:	480c      	ldr	r0, [pc, #48]	; (29580 <k_work_init_delayable+0x4c>)
   29550:	f005 f9f9 	bl	2e946 <assert_post_action>
   29554:	b949      	cbnz	r1, 2956a <k_work_init_delayable+0x36>
   29556:	490c      	ldr	r1, [pc, #48]	; (29588 <k_work_init_delayable+0x54>)
   29558:	f240 3341 	movw	r3, #833	; 0x341
   2955c:	4a08      	ldr	r2, [pc, #32]	; (29580 <k_work_init_delayable+0x4c>)
   2955e:	4809      	ldr	r0, [pc, #36]	; (29584 <k_work_init_delayable+0x50>)
   29560:	f005 f9f8 	bl	2e954 <assert_print>
   29564:	f240 3141 	movw	r1, #833	; 0x341
   29568:	e7f1      	b.n	2954e <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2956a:	2230      	movs	r2, #48	; 0x30
   2956c:	2100      	movs	r1, #0
   2956e:	f00b fd5d 	bl	3502c <memset>
   29572:	f44f 7380 	mov.w	r3, #256	; 0x100
   29576:	6065      	str	r5, [r4, #4]
   29578:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2957a:	bd38      	pop	{r3, r4, r5, pc}
   2957c:	000408d8 	.word	0x000408d8
   29580:	00040802 	.word	0x00040802
   29584:	000381c3 	.word	0x000381c3
   29588:	00040823 	.word	0x00040823

0002958c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2958e:	4616      	mov	r6, r2
   29590:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   29592:	460c      	mov	r4, r1
{
   29594:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   29596:	b959      	cbnz	r1, 295b0 <k_work_schedule_for_queue+0x24>
   29598:	492d      	ldr	r1, [pc, #180]	; (29650 <k_work_schedule_for_queue+0xc4>)
   2959a:	482e      	ldr	r0, [pc, #184]	; (29654 <k_work_schedule_for_queue+0xc8>)
   2959c:	f240 33ba 	movw	r3, #954	; 0x3ba
   295a0:	4a2d      	ldr	r2, [pc, #180]	; (29658 <k_work_schedule_for_queue+0xcc>)
   295a2:	f005 f9d7 	bl	2e954 <assert_print>
   295a6:	f240 31ba 	movw	r1, #954	; 0x3ba
   295aa:	482b      	ldr	r0, [pc, #172]	; (29658 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295ac:	f005 f9cb 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   295b0:	f04f 0320 	mov.w	r3, #32
   295b4:	f3ef 8711 	mrs	r7, BASEPRI
   295b8:	f383 8812 	msr	BASEPRI_MAX, r3
   295bc:	f3bf 8f6f 	isb	sy
   295c0:	4826      	ldr	r0, [pc, #152]	; (2965c <k_work_schedule_for_queue+0xd0>)
   295c2:	f7ff f909 	bl	287d8 <z_spin_lock_valid>
   295c6:	b960      	cbnz	r0, 295e2 <k_work_schedule_for_queue+0x56>
   295c8:	2394      	movs	r3, #148	; 0x94
   295ca:	4a25      	ldr	r2, [pc, #148]	; (29660 <k_work_schedule_for_queue+0xd4>)
   295cc:	4925      	ldr	r1, [pc, #148]	; (29664 <k_work_schedule_for_queue+0xd8>)
   295ce:	4821      	ldr	r0, [pc, #132]	; (29654 <k_work_schedule_for_queue+0xc8>)
   295d0:	f005 f9c0 	bl	2e954 <assert_print>
   295d4:	4921      	ldr	r1, [pc, #132]	; (2965c <k_work_schedule_for_queue+0xd0>)
   295d6:	4824      	ldr	r0, [pc, #144]	; (29668 <k_work_schedule_for_queue+0xdc>)
   295d8:	f005 f9bc 	bl	2e954 <assert_print>
   295dc:	2194      	movs	r1, #148	; 0x94
   295de:	4820      	ldr	r0, [pc, #128]	; (29660 <k_work_schedule_for_queue+0xd4>)
   295e0:	e7e4      	b.n	295ac <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   295e2:	481e      	ldr	r0, [pc, #120]	; (2965c <k_work_schedule_for_queue+0xd0>)
   295e4:	f7ff f914 	bl	28810 <z_spin_lock_set_owner>
	return *flagp;
   295e8:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   295ea:	f013 0f0e 	tst.w	r3, #14
   295ee:	d125      	bne.n	2963c <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   295f0:	ea55 0206 	orrs.w	r2, r5, r6
   295f4:	d114      	bne.n	29620 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   295f6:	4620      	mov	r0, r4
   295f8:	a901      	add	r1, sp, #4
   295fa:	f7ff fd8f 	bl	2911c <submit_to_queue_locked>
   295fe:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29600:	4816      	ldr	r0, [pc, #88]	; (2965c <k_work_schedule_for_queue+0xd0>)
   29602:	f7ff f8f7 	bl	287f4 <z_spin_unlock_valid>
   29606:	b9d8      	cbnz	r0, 29640 <k_work_schedule_for_queue+0xb4>
   29608:	23c2      	movs	r3, #194	; 0xc2
   2960a:	4a15      	ldr	r2, [pc, #84]	; (29660 <k_work_schedule_for_queue+0xd4>)
   2960c:	4917      	ldr	r1, [pc, #92]	; (2966c <k_work_schedule_for_queue+0xe0>)
   2960e:	4811      	ldr	r0, [pc, #68]	; (29654 <k_work_schedule_for_queue+0xc8>)
   29610:	f005 f9a0 	bl	2e954 <assert_print>
   29614:	4911      	ldr	r1, [pc, #68]	; (2965c <k_work_schedule_for_queue+0xd0>)
   29616:	4816      	ldr	r0, [pc, #88]	; (29670 <k_work_schedule_for_queue+0xe4>)
   29618:	f005 f99c 	bl	2e954 <assert_print>
   2961c:	21c2      	movs	r1, #194	; 0xc2
   2961e:	e7de      	b.n	295de <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   29620:	f043 0308 	orr.w	r3, r3, #8
   29624:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   29626:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29628:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   2962c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2962e:	4632      	mov	r2, r6
   29630:	462b      	mov	r3, r5
   29632:	4910      	ldr	r1, [pc, #64]	; (29674 <k_work_schedule_for_queue+0xe8>)
   29634:	f001 fbac 	bl	2ad90 <z_add_timeout>
	return ret;
   29638:	2401      	movs	r4, #1
   2963a:	e7e1      	b.n	29600 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   2963c:	2400      	movs	r4, #0
   2963e:	e7df      	b.n	29600 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   29640:	f387 8811 	msr	BASEPRI, r7
   29644:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   29648:	4620      	mov	r0, r4
   2964a:	b003      	add	sp, #12
   2964c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2964e:	bf00      	nop
   29650:	000408d8 	.word	0x000408d8
   29654:	000381c3 	.word	0x000381c3
   29658:	00040802 	.word	0x00040802
   2965c:	20010ff4 	.word	0x20010ff4
   29660:	000385b7 	.word	0x000385b7
   29664:	00038610 	.word	0x00038610
   29668:	00038625 	.word	0x00038625
   2966c:	000385e4 	.word	0x000385e4
   29670:	000385fb 	.word	0x000385fb
   29674:	000291f5 	.word	0x000291f5

00029678 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   29678:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2967a:	4801      	ldr	r0, [pc, #4]	; (29680 <k_work_schedule+0x8>)
   2967c:	f7ff bf86 	b.w	2958c <k_work_schedule_for_queue>
   29680:	2000f740 	.word	0x2000f740

00029684 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   29684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29686:	4616      	mov	r6, r2
   29688:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2968a:	460c      	mov	r4, r1
{
   2968c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2968e:	b959      	cbnz	r1, 296a8 <k_work_reschedule_for_queue+0x24>
   29690:	492c      	ldr	r1, [pc, #176]	; (29744 <k_work_reschedule_for_queue+0xc0>)
   29692:	482d      	ldr	r0, [pc, #180]	; (29748 <k_work_reschedule_for_queue+0xc4>)
   29694:	f240 33de 	movw	r3, #990	; 0x3de
   29698:	4a2c      	ldr	r2, [pc, #176]	; (2974c <k_work_reschedule_for_queue+0xc8>)
   2969a:	f005 f95b 	bl	2e954 <assert_print>
   2969e:	f240 31de 	movw	r1, #990	; 0x3de
   296a2:	482a      	ldr	r0, [pc, #168]	; (2974c <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   296a4:	f005 f94f 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   296a8:	f04f 0320 	mov.w	r3, #32
   296ac:	f3ef 8711 	mrs	r7, BASEPRI
   296b0:	f383 8812 	msr	BASEPRI_MAX, r3
   296b4:	f3bf 8f6f 	isb	sy
   296b8:	4825      	ldr	r0, [pc, #148]	; (29750 <k_work_reschedule_for_queue+0xcc>)
   296ba:	f7ff f88d 	bl	287d8 <z_spin_lock_valid>
   296be:	b960      	cbnz	r0, 296da <k_work_reschedule_for_queue+0x56>
   296c0:	2394      	movs	r3, #148	; 0x94
   296c2:	4a24      	ldr	r2, [pc, #144]	; (29754 <k_work_reschedule_for_queue+0xd0>)
   296c4:	4924      	ldr	r1, [pc, #144]	; (29758 <k_work_reschedule_for_queue+0xd4>)
   296c6:	4820      	ldr	r0, [pc, #128]	; (29748 <k_work_reschedule_for_queue+0xc4>)
   296c8:	f005 f944 	bl	2e954 <assert_print>
   296cc:	4920      	ldr	r1, [pc, #128]	; (29750 <k_work_reschedule_for_queue+0xcc>)
   296ce:	4823      	ldr	r0, [pc, #140]	; (2975c <k_work_reschedule_for_queue+0xd8>)
   296d0:	f005 f940 	bl	2e954 <assert_print>
   296d4:	2194      	movs	r1, #148	; 0x94
   296d6:	481f      	ldr	r0, [pc, #124]	; (29754 <k_work_reschedule_for_queue+0xd0>)
   296d8:	e7e4      	b.n	296a4 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   296da:	481d      	ldr	r0, [pc, #116]	; (29750 <k_work_reschedule_for_queue+0xcc>)
   296dc:	f7ff f898 	bl	28810 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   296e0:	4620      	mov	r0, r4
   296e2:	f00b fac1 	bl	34c68 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   296e6:	ea55 0306 	orrs.w	r3, r5, r6
   296ea:	d114      	bne.n	29716 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   296ec:	4620      	mov	r0, r4
   296ee:	a901      	add	r1, sp, #4
   296f0:	f7ff fd14 	bl	2911c <submit_to_queue_locked>
   296f4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   296f6:	4816      	ldr	r0, [pc, #88]	; (29750 <k_work_reschedule_for_queue+0xcc>)
   296f8:	f7ff f87c 	bl	287f4 <z_spin_unlock_valid>
   296fc:	b9d0      	cbnz	r0, 29734 <k_work_reschedule_for_queue+0xb0>
   296fe:	23c2      	movs	r3, #194	; 0xc2
   29700:	4a14      	ldr	r2, [pc, #80]	; (29754 <k_work_reschedule_for_queue+0xd0>)
   29702:	4917      	ldr	r1, [pc, #92]	; (29760 <k_work_reschedule_for_queue+0xdc>)
   29704:	4810      	ldr	r0, [pc, #64]	; (29748 <k_work_reschedule_for_queue+0xc4>)
   29706:	f005 f925 	bl	2e954 <assert_print>
   2970a:	4911      	ldr	r1, [pc, #68]	; (29750 <k_work_reschedule_for_queue+0xcc>)
   2970c:	4815      	ldr	r0, [pc, #84]	; (29764 <k_work_reschedule_for_queue+0xe0>)
   2970e:	f005 f921 	bl	2e954 <assert_print>
   29712:	21c2      	movs	r1, #194	; 0xc2
   29714:	e7df      	b.n	296d6 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   29716:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29718:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2971c:	f043 0308 	orr.w	r3, r3, #8
   29720:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   29722:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29724:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   29726:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29728:	490f      	ldr	r1, [pc, #60]	; (29768 <k_work_reschedule_for_queue+0xe4>)
   2972a:	462b      	mov	r3, r5
   2972c:	f001 fb30 	bl	2ad90 <z_add_timeout>
	return ret;
   29730:	2401      	movs	r4, #1
   29732:	e7e0      	b.n	296f6 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   29734:	f387 8811 	msr	BASEPRI, r7
   29738:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2973c:	4620      	mov	r0, r4
   2973e:	b003      	add	sp, #12
   29740:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29742:	bf00      	nop
   29744:	000408d8 	.word	0x000408d8
   29748:	000381c3 	.word	0x000381c3
   2974c:	00040802 	.word	0x00040802
   29750:	20010ff4 	.word	0x20010ff4
   29754:	000385b7 	.word	0x000385b7
   29758:	00038610 	.word	0x00038610
   2975c:	00038625 	.word	0x00038625
   29760:	000385e4 	.word	0x000385e4
   29764:	000385fb 	.word	0x000385fb
   29768:	000291f5 	.word	0x000291f5

0002976c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2976c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2976e:	4801      	ldr	r0, [pc, #4]	; (29774 <k_work_reschedule+0x8>)
   29770:	f7ff bf88 	b.w	29684 <k_work_reschedule_for_queue>
   29774:	2000f740 	.word	0x2000f740

00029778 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   29778:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2977a:	4604      	mov	r4, r0
   2977c:	b958      	cbnz	r0, 29796 <k_work_cancel_delayable+0x1e>
   2977e:	4922      	ldr	r1, [pc, #136]	; (29808 <k_work_cancel_delayable+0x90>)
   29780:	4822      	ldr	r0, [pc, #136]	; (2980c <k_work_cancel_delayable+0x94>)
   29782:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29786:	4a22      	ldr	r2, [pc, #136]	; (29810 <k_work_cancel_delayable+0x98>)
   29788:	f005 f8e4 	bl	2e954 <assert_print>
   2978c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   29790:	481f      	ldr	r0, [pc, #124]	; (29810 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29792:	f005 f8d8 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   29796:	f04f 0320 	mov.w	r3, #32
   2979a:	f3ef 8511 	mrs	r5, BASEPRI
   2979e:	f383 8812 	msr	BASEPRI_MAX, r3
   297a2:	f3bf 8f6f 	isb	sy
   297a6:	481b      	ldr	r0, [pc, #108]	; (29814 <k_work_cancel_delayable+0x9c>)
   297a8:	f7ff f816 	bl	287d8 <z_spin_lock_valid>
   297ac:	b960      	cbnz	r0, 297c8 <k_work_cancel_delayable+0x50>
   297ae:	2394      	movs	r3, #148	; 0x94
   297b0:	4a19      	ldr	r2, [pc, #100]	; (29818 <k_work_cancel_delayable+0xa0>)
   297b2:	491a      	ldr	r1, [pc, #104]	; (2981c <k_work_cancel_delayable+0xa4>)
   297b4:	4815      	ldr	r0, [pc, #84]	; (2980c <k_work_cancel_delayable+0x94>)
   297b6:	f005 f8cd 	bl	2e954 <assert_print>
   297ba:	4916      	ldr	r1, [pc, #88]	; (29814 <k_work_cancel_delayable+0x9c>)
   297bc:	4818      	ldr	r0, [pc, #96]	; (29820 <k_work_cancel_delayable+0xa8>)
   297be:	f005 f8c9 	bl	2e954 <assert_print>
   297c2:	2194      	movs	r1, #148	; 0x94
   297c4:	4814      	ldr	r0, [pc, #80]	; (29818 <k_work_cancel_delayable+0xa0>)
   297c6:	e7e4      	b.n	29792 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   297c8:	4812      	ldr	r0, [pc, #72]	; (29814 <k_work_cancel_delayable+0x9c>)
   297ca:	f7ff f821 	bl	28810 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   297ce:	4620      	mov	r0, r4
   297d0:	f00b fa4a 	bl	34c68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   297d4:	4620      	mov	r0, r4
   297d6:	f00b fa5d 	bl	34c94 <cancel_async_locked>
   297da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   297dc:	480d      	ldr	r0, [pc, #52]	; (29814 <k_work_cancel_delayable+0x9c>)
   297de:	f7ff f809 	bl	287f4 <z_spin_unlock_valid>
   297e2:	b958      	cbnz	r0, 297fc <k_work_cancel_delayable+0x84>
   297e4:	23c2      	movs	r3, #194	; 0xc2
   297e6:	4a0c      	ldr	r2, [pc, #48]	; (29818 <k_work_cancel_delayable+0xa0>)
   297e8:	490e      	ldr	r1, [pc, #56]	; (29824 <k_work_cancel_delayable+0xac>)
   297ea:	4808      	ldr	r0, [pc, #32]	; (2980c <k_work_cancel_delayable+0x94>)
   297ec:	f005 f8b2 	bl	2e954 <assert_print>
   297f0:	4908      	ldr	r1, [pc, #32]	; (29814 <k_work_cancel_delayable+0x9c>)
   297f2:	480d      	ldr	r0, [pc, #52]	; (29828 <k_work_cancel_delayable+0xb0>)
   297f4:	f005 f8ae 	bl	2e954 <assert_print>
   297f8:	21c2      	movs	r1, #194	; 0xc2
   297fa:	e7e3      	b.n	297c4 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   297fc:	f385 8811 	msr	BASEPRI, r5
   29800:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   29804:	4620      	mov	r0, r4
   29806:	bd38      	pop	{r3, r4, r5, pc}
   29808:	000408d8 	.word	0x000408d8
   2980c:	000381c3 	.word	0x000381c3
   29810:	00040802 	.word	0x00040802
   29814:	20010ff4 	.word	0x20010ff4
   29818:	000385b7 	.word	0x000385b7
   2981c:	00038610 	.word	0x00038610
   29820:	00038625 	.word	0x00038625
   29824:	000385e4 	.word	0x000385e4
   29828:	000385fb 	.word	0x000385fb

0002982c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29830:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   29832:	4605      	mov	r5, r0
   29834:	b958      	cbnz	r0, 2984e <k_work_cancel_delayable_sync+0x22>
   29836:	493a      	ldr	r1, [pc, #232]	; (29920 <k_work_cancel_delayable_sync+0xf4>)
   29838:	f240 4311 	movw	r3, #1041	; 0x411
   2983c:	4a39      	ldr	r2, [pc, #228]	; (29924 <k_work_cancel_delayable_sync+0xf8>)
   2983e:	483a      	ldr	r0, [pc, #232]	; (29928 <k_work_cancel_delayable_sync+0xfc>)
   29840:	f005 f888 	bl	2e954 <assert_print>
   29844:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   29848:	4836      	ldr	r0, [pc, #216]	; (29924 <k_work_cancel_delayable_sync+0xf8>)
   2984a:	f005 f87c 	bl	2e946 <assert_post_action>
   2984e:	b949      	cbnz	r1, 29864 <k_work_cancel_delayable_sync+0x38>
   29850:	4936      	ldr	r1, [pc, #216]	; (2992c <k_work_cancel_delayable_sync+0x100>)
   29852:	f240 4312 	movw	r3, #1042	; 0x412
   29856:	4a33      	ldr	r2, [pc, #204]	; (29924 <k_work_cancel_delayable_sync+0xf8>)
   29858:	4833      	ldr	r0, [pc, #204]	; (29928 <k_work_cancel_delayable_sync+0xfc>)
   2985a:	f005 f87b 	bl	2e954 <assert_print>
   2985e:	f240 4112 	movw	r1, #1042	; 0x412
   29862:	e7f1      	b.n	29848 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   29864:	f00b f990 	bl	34b88 <k_is_in_isr>
   29868:	4604      	mov	r4, r0
   2986a:	b148      	cbz	r0, 29880 <k_work_cancel_delayable_sync+0x54>
   2986c:	4930      	ldr	r1, [pc, #192]	; (29930 <k_work_cancel_delayable_sync+0x104>)
   2986e:	f240 4313 	movw	r3, #1043	; 0x413
   29872:	4a2c      	ldr	r2, [pc, #176]	; (29924 <k_work_cancel_delayable_sync+0xf8>)
   29874:	482c      	ldr	r0, [pc, #176]	; (29928 <k_work_cancel_delayable_sync+0xfc>)
   29876:	f005 f86d 	bl	2e954 <assert_print>
   2987a:	f240 4113 	movw	r1, #1043	; 0x413
   2987e:	e7e3      	b.n	29848 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   29880:	f04f 0320 	mov.w	r3, #32
   29884:	f3ef 8811 	mrs	r8, BASEPRI
   29888:	f383 8812 	msr	BASEPRI_MAX, r3
   2988c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29890:	4828      	ldr	r0, [pc, #160]	; (29934 <k_work_cancel_delayable_sync+0x108>)
   29892:	f7fe ffa1 	bl	287d8 <z_spin_lock_valid>
   29896:	b960      	cbnz	r0, 298b2 <k_work_cancel_delayable_sync+0x86>
   29898:	2394      	movs	r3, #148	; 0x94
   2989a:	4a27      	ldr	r2, [pc, #156]	; (29938 <k_work_cancel_delayable_sync+0x10c>)
   2989c:	4927      	ldr	r1, [pc, #156]	; (2993c <k_work_cancel_delayable_sync+0x110>)
   2989e:	4822      	ldr	r0, [pc, #136]	; (29928 <k_work_cancel_delayable_sync+0xfc>)
   298a0:	f005 f858 	bl	2e954 <assert_print>
   298a4:	4923      	ldr	r1, [pc, #140]	; (29934 <k_work_cancel_delayable_sync+0x108>)
   298a6:	4826      	ldr	r0, [pc, #152]	; (29940 <k_work_cancel_delayable_sync+0x114>)
   298a8:	f005 f854 	bl	2e954 <assert_print>
   298ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298ae:	4822      	ldr	r0, [pc, #136]	; (29938 <k_work_cancel_delayable_sync+0x10c>)
   298b0:	e7cb      	b.n	2984a <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   298b2:	4820      	ldr	r0, [pc, #128]	; (29934 <k_work_cancel_delayable_sync+0x108>)
   298b4:	f7fe ffac 	bl	28810 <z_spin_lock_set_owner>
	return *flagp;
   298b8:	68eb      	ldr	r3, [r5, #12]
   298ba:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   298be:	2b00      	cmp	r3, #0
   298c0:	bf14      	ite	ne
   298c2:	2701      	movne	r7, #1
   298c4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   298c6:	d00a      	beq.n	298de <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   298c8:	4628      	mov	r0, r5
   298ca:	f00b f9cd 	bl	34c68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   298ce:	4628      	mov	r0, r5
   298d0:	f00b f9e0 	bl	34c94 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   298d4:	4631      	mov	r1, r6
   298d6:	4628      	mov	r0, r5
   298d8:	f7ff fc02 	bl	290e0 <cancel_sync_locked>
   298dc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298de:	4815      	ldr	r0, [pc, #84]	; (29934 <k_work_cancel_delayable_sync+0x108>)
   298e0:	f7fe ff88 	bl	287f4 <z_spin_unlock_valid>
   298e4:	b958      	cbnz	r0, 298fe <k_work_cancel_delayable_sync+0xd2>
   298e6:	23c2      	movs	r3, #194	; 0xc2
   298e8:	4a13      	ldr	r2, [pc, #76]	; (29938 <k_work_cancel_delayable_sync+0x10c>)
   298ea:	4916      	ldr	r1, [pc, #88]	; (29944 <k_work_cancel_delayable_sync+0x118>)
   298ec:	480e      	ldr	r0, [pc, #56]	; (29928 <k_work_cancel_delayable_sync+0xfc>)
   298ee:	f005 f831 	bl	2e954 <assert_print>
   298f2:	4910      	ldr	r1, [pc, #64]	; (29934 <k_work_cancel_delayable_sync+0x108>)
   298f4:	4814      	ldr	r0, [pc, #80]	; (29948 <k_work_cancel_delayable_sync+0x11c>)
   298f6:	f005 f82d 	bl	2e954 <assert_print>
   298fa:	21c2      	movs	r1, #194	; 0xc2
   298fc:	e7d7      	b.n	298ae <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   298fe:	f388 8811 	msr	BASEPRI, r8
   29902:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   29906:	b13c      	cbz	r4, 29918 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   29908:	f04f 32ff 	mov.w	r2, #4294967295
   2990c:	f04f 33ff 	mov.w	r3, #4294967295
   29910:	f106 0008 	add.w	r0, r6, #8
   29914:	f7ff fa5c 	bl	28dd0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   29918:	4638      	mov	r0, r7
   2991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2991e:	bf00      	nop
   29920:	000408d8 	.word	0x000408d8
   29924:	00040802 	.word	0x00040802
   29928:	000381c3 	.word	0x000381c3
   2992c:	00040884 	.word	0x00040884
   29930:	0003a8cd 	.word	0x0003a8cd
   29934:	20010ff4 	.word	0x20010ff4
   29938:	000385b7 	.word	0x000385b7
   2993c:	00038610 	.word	0x00038610
   29940:	00038625 	.word	0x00038625
   29944:	000385e4 	.word	0x000385e4
   29948:	000385fb 	.word	0x000385fb

0002994c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2994c:	89c3      	ldrh	r3, [r0, #14]
   2994e:	2b7f      	cmp	r3, #127	; 0x7f
   29950:	d812      	bhi.n	29978 <sliceable+0x2c>
	int ret = slice_ticks;
   29952:	4b0a      	ldr	r3, [pc, #40]	; (2997c <sliceable+0x30>)
   29954:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   29956:	b163      	cbz	r3, 29972 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   29958:	4b09      	ldr	r3, [pc, #36]	; (29980 <sliceable+0x34>)
   2995a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2995e:	681b      	ldr	r3, [r3, #0]
   29960:	429a      	cmp	r2, r3
   29962:	db09      	blt.n	29978 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   29964:	7b43      	ldrb	r3, [r0, #13]
   29966:	06db      	lsls	r3, r3, #27
   29968:	d106      	bne.n	29978 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2996a:	4b06      	ldr	r3, [pc, #24]	; (29984 <sliceable+0x38>)
   2996c:	1ac3      	subs	r3, r0, r3
   2996e:	bf18      	it	ne
   29970:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   29972:	f003 0001 	and.w	r0, r3, #1
   29976:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   29978:	2300      	movs	r3, #0
   2997a:	e7fa      	b.n	29972 <sliceable+0x26>
   2997c:	20011000 	.word	0x20011000
   29980:	20010ffc 	.word	0x20010ffc
   29984:	2000f630 	.word	0x2000f630

00029988 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   29988:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2998a:	b168      	cbz	r0, 299a8 <slice_timeout+0x20>
   2998c:	4b10      	ldr	r3, [pc, #64]	; (299d0 <slice_timeout+0x48>)
   2998e:	4298      	cmp	r0, r3
   29990:	d30a      	bcc.n	299a8 <slice_timeout+0x20>
   29992:	f103 0218 	add.w	r2, r3, #24
   29996:	4290      	cmp	r0, r2
   29998:	d206      	bcs.n	299a8 <slice_timeout+0x20>
   2999a:	2218      	movs	r2, #24
   2999c:	1ac0      	subs	r0, r0, r3
   2999e:	fbb0 f3f2 	udiv	r3, r0, r2
   299a2:	fb02 0313 	mls	r3, r2, r3, r0
   299a6:	b15b      	cbz	r3, 299c0 <slice_timeout+0x38>
   299a8:	490a      	ldr	r1, [pc, #40]	; (299d4 <slice_timeout+0x4c>)
   299aa:	480b      	ldr	r0, [pc, #44]	; (299d8 <slice_timeout+0x50>)
   299ac:	f240 13cb 	movw	r3, #459	; 0x1cb
   299b0:	4a0a      	ldr	r2, [pc, #40]	; (299dc <slice_timeout+0x54>)
   299b2:	f004 ffcf 	bl	2e954 <assert_print>
   299b6:	f240 11cb 	movw	r1, #459	; 0x1cb
   299ba:	4808      	ldr	r0, [pc, #32]	; (299dc <slice_timeout+0x54>)
   299bc:	f004 ffc3 	bl	2e946 <assert_post_action>

	slice_expired[cpu] = true;
   299c0:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   299c2:	4b07      	ldr	r3, [pc, #28]	; (299e0 <slice_timeout+0x58>)
   299c4:	10c0      	asrs	r0, r0, #3
   299c6:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   299c8:	4b06      	ldr	r3, [pc, #24]	; (299e4 <slice_timeout+0x5c>)
   299ca:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   299cc:	bd08      	pop	{r3, pc}
   299ce:	bf00      	nop
   299d0:	2000f7e8 	.word	0x2000f7e8
   299d4:	0004090f 	.word	0x0004090f
   299d8:	000381c3 	.word	0x000381c3
   299dc:	000408ed 	.word	0x000408ed
   299e0:	aaaaaaab 	.word	0xaaaaaaab
   299e4:	20012880 	.word	0x20012880

000299e8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   299e8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   299ea:	4b0e      	ldr	r3, [pc, #56]	; (29a24 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   299ec:	4c0e      	ldr	r4, [pc, #56]	; (29a28 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   299ee:	7c1e      	ldrb	r6, [r3, #16]
{
   299f0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   299f2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   299f6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   299fa:	4620      	mov	r0, r4
   299fc:	f001 fa88 	bl	2af10 <z_abort_timeout>
	slice_expired[cpu] = false;
   29a00:	2200      	movs	r2, #0
   29a02:	4b0a      	ldr	r3, [pc, #40]	; (29a2c <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   29a04:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   29a06:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   29a08:	f7ff ffa0 	bl	2994c <sliceable>
   29a0c:	b148      	cbz	r0, 29a22 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   29a0e:	4b08      	ldr	r3, [pc, #32]	; (29a30 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   29a10:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   29a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   29a16:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   29a18:	4906      	ldr	r1, [pc, #24]	; (29a34 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   29a1a:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   29a1c:	17d3      	asrs	r3, r2, #31
   29a1e:	f001 b9b7 	b.w	2ad90 <z_add_timeout>
}
   29a22:	bd70      	pop	{r4, r5, r6, pc}
   29a24:	20010fc0 	.word	0x20010fc0
   29a28:	2000f7e8 	.word	0x2000f7e8
   29a2c:	20012880 	.word	0x20012880
   29a30:	20011000 	.word	0x20011000
   29a34:	00029989 	.word	0x00029989

00029a38 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   29a38:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   29a3a:	4d14      	ldr	r5, [pc, #80]	; (29a8c <update_cache+0x54>)
   29a3c:	462b      	mov	r3, r5
   29a3e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a42:	429c      	cmp	r4, r3
   29a44:	d000      	beq.n	29a48 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   29a46:	b904      	cbnz	r4, 29a4a <update_cache+0x12>
   29a48:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   29a4a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   29a4c:	b9a8      	cbnz	r0, 29a7a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   29a4e:	b963      	cbnz	r3, 29a6a <update_cache+0x32>
   29a50:	490f      	ldr	r1, [pc, #60]	; (29a90 <update_cache+0x58>)
   29a52:	238a      	movs	r3, #138	; 0x8a
   29a54:	4a0f      	ldr	r2, [pc, #60]	; (29a94 <update_cache+0x5c>)
   29a56:	4810      	ldr	r0, [pc, #64]	; (29a98 <update_cache+0x60>)
   29a58:	f004 ff7c 	bl	2e954 <assert_print>
   29a5c:	480f      	ldr	r0, [pc, #60]	; (29a9c <update_cache+0x64>)
   29a5e:	f004 ff79 	bl	2e954 <assert_print>
   29a62:	218a      	movs	r1, #138	; 0x8a
   29a64:	480b      	ldr	r0, [pc, #44]	; (29a94 <update_cache+0x5c>)
   29a66:	f004 ff6e 	bl	2e946 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   29a6a:	7b5a      	ldrb	r2, [r3, #13]
   29a6c:	06d2      	lsls	r2, r2, #27
   29a6e:	d104      	bne.n	29a7a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   29a70:	69a2      	ldr	r2, [r4, #24]
   29a72:	b912      	cbnz	r2, 29a7a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   29a74:	89da      	ldrh	r2, [r3, #14]
   29a76:	2a7f      	cmp	r2, #127	; 0x7f
   29a78:	d805      	bhi.n	29a86 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   29a7a:	429c      	cmp	r4, r3
   29a7c:	d002      	beq.n	29a84 <update_cache+0x4c>
			z_reset_time_slice(thread);
   29a7e:	4620      	mov	r0, r4
   29a80:	f7ff ffb2 	bl	299e8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   29a84:	4623      	mov	r3, r4
   29a86:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   29a88:	bd38      	pop	{r3, r4, r5, pc}
   29a8a:	bf00      	nop
   29a8c:	20010fc0 	.word	0x20010fc0
   29a90:	00040aa8 	.word	0x00040aa8
   29a94:	000408ed 	.word	0x000408ed
   29a98:	000381c3 	.word	0x000381c3
   29a9c:	00038b19 	.word	0x00038b19

00029aa0 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   29aa0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   29aa2:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   29aa6:	7b42      	ldrb	r2, [r0, #13]
   29aa8:	2b00      	cmp	r3, #0
   29aaa:	db38      	blt.n	29b1e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29aac:	06d3      	lsls	r3, r2, #27
   29aae:	d136      	bne.n	29b1e <ready_thread+0x7e>
	return node->next != NULL;
   29ab0:	6983      	ldr	r3, [r0, #24]
   29ab2:	2b00      	cmp	r3, #0
   29ab4:	d133      	bne.n	29b1e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   29ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   29aba:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29abc:	4a18      	ldr	r2, [pc, #96]	; (29b20 <ready_thread+0x80>)
   29abe:	4290      	cmp	r0, r2
   29ac0:	d109      	bne.n	29ad6 <ready_thread+0x36>
   29ac2:	4918      	ldr	r1, [pc, #96]	; (29b24 <ready_thread+0x84>)
   29ac4:	4818      	ldr	r0, [pc, #96]	; (29b28 <ready_thread+0x88>)
   29ac6:	23bc      	movs	r3, #188	; 0xbc
   29ac8:	4a18      	ldr	r2, [pc, #96]	; (29b2c <ready_thread+0x8c>)
   29aca:	f004 ff43 	bl	2e954 <assert_print>
   29ace:	21bc      	movs	r1, #188	; 0xbc
   29ad0:	4816      	ldr	r0, [pc, #88]	; (29b2c <ready_thread+0x8c>)
   29ad2:	f004 ff38 	bl	2e946 <assert_post_action>
	return list->head == list;
   29ad6:	4916      	ldr	r1, [pc, #88]	; (29b30 <ready_thread+0x90>)
   29ad8:	460a      	mov	r2, r1
   29ada:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29ade:	4294      	cmp	r4, r2
   29ae0:	bf18      	it	ne
   29ae2:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   29ae4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29ae6:	b923      	cbnz	r3, 29af2 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   29ae8:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   29aec:	6020      	str	r0, [r4, #0]
	list->tail = node;
   29aee:	6208      	str	r0, [r1, #32]
}
   29af0:	e00c      	b.n	29b0c <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   29af2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29af6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   29afa:	42b5      	cmp	r5, r6
   29afc:	d00b      	beq.n	29b16 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   29afe:	42ae      	cmp	r6, r5
   29b00:	dd09      	ble.n	29b16 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   29b02:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   29b04:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   29b08:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   29b0a:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   29b0c:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   29b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   29b12:	f7ff bf91 	b.w	29a38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   29b16:	42a3      	cmp	r3, r4
   29b18:	d0e6      	beq.n	29ae8 <ready_thread+0x48>
   29b1a:	681b      	ldr	r3, [r3, #0]
   29b1c:	e7e3      	b.n	29ae6 <ready_thread+0x46>
}
   29b1e:	bd70      	pop	{r4, r5, r6, pc}
   29b20:	2000f630 	.word	0x2000f630
   29b24:	00040acf 	.word	0x00040acf
   29b28:	000381c3 	.word	0x000381c3
   29b2c:	000408ed 	.word	0x000408ed
   29b30:	20010fc0 	.word	0x20010fc0

00029b34 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   29b34:	b538      	push	{r3, r4, r5, lr}
   29b36:	4604      	mov	r4, r0
	__asm__ volatile(
   29b38:	f04f 0320 	mov.w	r3, #32
   29b3c:	f3ef 8511 	mrs	r5, BASEPRI
   29b40:	f383 8812 	msr	BASEPRI_MAX, r3
   29b44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29b48:	4816      	ldr	r0, [pc, #88]	; (29ba4 <z_ready_thread+0x70>)
   29b4a:	f7fe fe45 	bl	287d8 <z_spin_lock_valid>
   29b4e:	b968      	cbnz	r0, 29b6c <z_ready_thread+0x38>
   29b50:	2394      	movs	r3, #148	; 0x94
   29b52:	4a15      	ldr	r2, [pc, #84]	; (29ba8 <z_ready_thread+0x74>)
   29b54:	4915      	ldr	r1, [pc, #84]	; (29bac <z_ready_thread+0x78>)
   29b56:	4816      	ldr	r0, [pc, #88]	; (29bb0 <z_ready_thread+0x7c>)
   29b58:	f004 fefc 	bl	2e954 <assert_print>
   29b5c:	4911      	ldr	r1, [pc, #68]	; (29ba4 <z_ready_thread+0x70>)
   29b5e:	4815      	ldr	r0, [pc, #84]	; (29bb4 <z_ready_thread+0x80>)
   29b60:	f004 fef8 	bl	2e954 <assert_print>
   29b64:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29b66:	4810      	ldr	r0, [pc, #64]	; (29ba8 <z_ready_thread+0x74>)
   29b68:	f004 feed 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   29b6c:	480d      	ldr	r0, [pc, #52]	; (29ba4 <z_ready_thread+0x70>)
   29b6e:	f7fe fe4f 	bl	28810 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   29b72:	4620      	mov	r0, r4
   29b74:	f7ff ff94 	bl	29aa0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29b78:	480a      	ldr	r0, [pc, #40]	; (29ba4 <z_ready_thread+0x70>)
   29b7a:	f7fe fe3b 	bl	287f4 <z_spin_unlock_valid>
   29b7e:	b958      	cbnz	r0, 29b98 <z_ready_thread+0x64>
   29b80:	23c2      	movs	r3, #194	; 0xc2
   29b82:	4a09      	ldr	r2, [pc, #36]	; (29ba8 <z_ready_thread+0x74>)
   29b84:	490c      	ldr	r1, [pc, #48]	; (29bb8 <z_ready_thread+0x84>)
   29b86:	480a      	ldr	r0, [pc, #40]	; (29bb0 <z_ready_thread+0x7c>)
   29b88:	f004 fee4 	bl	2e954 <assert_print>
   29b8c:	4905      	ldr	r1, [pc, #20]	; (29ba4 <z_ready_thread+0x70>)
   29b8e:	480b      	ldr	r0, [pc, #44]	; (29bbc <z_ready_thread+0x88>)
   29b90:	f004 fee0 	bl	2e954 <assert_print>
   29b94:	21c2      	movs	r1, #194	; 0xc2
   29b96:	e7e6      	b.n	29b66 <z_ready_thread+0x32>
	__asm__ volatile(
   29b98:	f385 8811 	msr	BASEPRI, r5
   29b9c:	f3bf 8f6f 	isb	sy
		}
	}
}
   29ba0:	bd38      	pop	{r3, r4, r5, pc}
   29ba2:	bf00      	nop
   29ba4:	20011004 	.word	0x20011004
   29ba8:	000385b7 	.word	0x000385b7
   29bac:	00038610 	.word	0x00038610
   29bb0:	000381c3 	.word	0x000381c3
   29bb4:	00038625 	.word	0x00038625
   29bb8:	000385e4 	.word	0x000385e4
   29bbc:	000385fb 	.word	0x000385fb

00029bc0 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   29bc0:	b538      	push	{r3, r4, r5, lr}
   29bc2:	4604      	mov	r4, r0
	__asm__ volatile(
   29bc4:	f04f 0320 	mov.w	r3, #32
   29bc8:	f3ef 8511 	mrs	r5, BASEPRI
   29bcc:	f383 8812 	msr	BASEPRI_MAX, r3
   29bd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29bd4:	4817      	ldr	r0, [pc, #92]	; (29c34 <z_unpend_thread_no_timeout+0x74>)
   29bd6:	f7fe fdff 	bl	287d8 <z_spin_lock_valid>
   29bda:	b968      	cbnz	r0, 29bf8 <z_unpend_thread_no_timeout+0x38>
   29bdc:	2394      	movs	r3, #148	; 0x94
   29bde:	4a16      	ldr	r2, [pc, #88]	; (29c38 <z_unpend_thread_no_timeout+0x78>)
   29be0:	4916      	ldr	r1, [pc, #88]	; (29c3c <z_unpend_thread_no_timeout+0x7c>)
   29be2:	4817      	ldr	r0, [pc, #92]	; (29c40 <z_unpend_thread_no_timeout+0x80>)
   29be4:	f004 feb6 	bl	2e954 <assert_print>
   29be8:	4912      	ldr	r1, [pc, #72]	; (29c34 <z_unpend_thread_no_timeout+0x74>)
   29bea:	4816      	ldr	r0, [pc, #88]	; (29c44 <z_unpend_thread_no_timeout+0x84>)
   29bec:	f004 feb2 	bl	2e954 <assert_print>
   29bf0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29bf2:	4811      	ldr	r0, [pc, #68]	; (29c38 <z_unpend_thread_no_timeout+0x78>)
   29bf4:	f004 fea7 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   29bf8:	480e      	ldr	r0, [pc, #56]	; (29c34 <z_unpend_thread_no_timeout+0x74>)
   29bfa:	f7fe fe09 	bl	28810 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   29bfe:	68a3      	ldr	r3, [r4, #8]
   29c00:	b113      	cbz	r3, 29c08 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   29c02:	4620      	mov	r0, r4
   29c04:	f000 fc50 	bl	2a4a8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c08:	480a      	ldr	r0, [pc, #40]	; (29c34 <z_unpend_thread_no_timeout+0x74>)
   29c0a:	f7fe fdf3 	bl	287f4 <z_spin_unlock_valid>
   29c0e:	b958      	cbnz	r0, 29c28 <z_unpend_thread_no_timeout+0x68>
   29c10:	23c2      	movs	r3, #194	; 0xc2
   29c12:	4a09      	ldr	r2, [pc, #36]	; (29c38 <z_unpend_thread_no_timeout+0x78>)
   29c14:	490c      	ldr	r1, [pc, #48]	; (29c48 <z_unpend_thread_no_timeout+0x88>)
   29c16:	480a      	ldr	r0, [pc, #40]	; (29c40 <z_unpend_thread_no_timeout+0x80>)
   29c18:	f004 fe9c 	bl	2e954 <assert_print>
   29c1c:	4905      	ldr	r1, [pc, #20]	; (29c34 <z_unpend_thread_no_timeout+0x74>)
   29c1e:	480b      	ldr	r0, [pc, #44]	; (29c4c <z_unpend_thread_no_timeout+0x8c>)
   29c20:	f004 fe98 	bl	2e954 <assert_print>
   29c24:	21c2      	movs	r1, #194	; 0xc2
   29c26:	e7e4      	b.n	29bf2 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   29c28:	f385 8811 	msr	BASEPRI, r5
   29c2c:	f3bf 8f6f 	isb	sy
		}
	}
}
   29c30:	bd38      	pop	{r3, r4, r5, pc}
   29c32:	bf00      	nop
   29c34:	20011004 	.word	0x20011004
   29c38:	000385b7 	.word	0x000385b7
   29c3c:	00038610 	.word	0x00038610
   29c40:	000381c3 	.word	0x000381c3
   29c44:	00038625 	.word	0x00038625
   29c48:	000385e4 	.word	0x000385e4
   29c4c:	000385fb 	.word	0x000385fb

00029c50 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   29c50:	b570      	push	{r4, r5, r6, lr}
   29c52:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29c54:	460d      	mov	r5, r1
   29c56:	b9e9      	cbnz	r1, 29c94 <z_reschedule+0x44>
   29c58:	f3ef 8605 	mrs	r6, IPSR
   29c5c:	b9d6      	cbnz	r6, 29c94 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   29c5e:	4b18      	ldr	r3, [pc, #96]	; (29cc0 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   29c60:	699a      	ldr	r2, [r3, #24]
   29c62:	689b      	ldr	r3, [r3, #8]
   29c64:	429a      	cmp	r2, r3
   29c66:	d015      	beq.n	29c94 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c68:	f7fe fdc4 	bl	287f4 <z_spin_unlock_valid>
   29c6c:	b968      	cbnz	r0, 29c8a <z_reschedule+0x3a>
   29c6e:	23e1      	movs	r3, #225	; 0xe1
   29c70:	4a14      	ldr	r2, [pc, #80]	; (29cc4 <z_reschedule+0x74>)
   29c72:	4915      	ldr	r1, [pc, #84]	; (29cc8 <z_reschedule+0x78>)
   29c74:	4815      	ldr	r0, [pc, #84]	; (29ccc <z_reschedule+0x7c>)
   29c76:	f004 fe6d 	bl	2e954 <assert_print>
   29c7a:	4621      	mov	r1, r4
   29c7c:	4814      	ldr	r0, [pc, #80]	; (29cd0 <z_reschedule+0x80>)
   29c7e:	f004 fe69 	bl	2e954 <assert_print>
   29c82:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c84:	480f      	ldr	r0, [pc, #60]	; (29cc4 <z_reschedule+0x74>)
   29c86:	f004 fe5e 	bl	2e946 <assert_post_action>
	ret = arch_swap(key);
   29c8a:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   29c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29c90:	f7e6 bc0a 	b.w	104a8 <arch_swap>
   29c94:	4620      	mov	r0, r4
   29c96:	f7fe fdad 	bl	287f4 <z_spin_unlock_valid>
   29c9a:	b958      	cbnz	r0, 29cb4 <z_reschedule+0x64>
   29c9c:	23c2      	movs	r3, #194	; 0xc2
   29c9e:	4a09      	ldr	r2, [pc, #36]	; (29cc4 <z_reschedule+0x74>)
   29ca0:	4909      	ldr	r1, [pc, #36]	; (29cc8 <z_reschedule+0x78>)
   29ca2:	480a      	ldr	r0, [pc, #40]	; (29ccc <z_reschedule+0x7c>)
   29ca4:	f004 fe56 	bl	2e954 <assert_print>
   29ca8:	4621      	mov	r1, r4
   29caa:	4809      	ldr	r0, [pc, #36]	; (29cd0 <z_reschedule+0x80>)
   29cac:	f004 fe52 	bl	2e954 <assert_print>
   29cb0:	21c2      	movs	r1, #194	; 0xc2
   29cb2:	e7e7      	b.n	29c84 <z_reschedule+0x34>
   29cb4:	f385 8811 	msr	BASEPRI, r5
   29cb8:	f3bf 8f6f 	isb	sy
   29cbc:	bd70      	pop	{r4, r5, r6, pc}
   29cbe:	bf00      	nop
   29cc0:	20010fc0 	.word	0x20010fc0
   29cc4:	000385b7 	.word	0x000385b7
   29cc8:	000385e4 	.word	0x000385e4
   29ccc:	000381c3 	.word	0x000381c3
   29cd0:	000385fb 	.word	0x000385fb

00029cd4 <z_sched_start>:
{
   29cd4:	b538      	push	{r3, r4, r5, lr}
   29cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   29cd8:	f04f 0320 	mov.w	r3, #32
   29cdc:	f3ef 8511 	mrs	r5, BASEPRI
   29ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   29ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29ce8:	481c      	ldr	r0, [pc, #112]	; (29d5c <z_sched_start+0x88>)
   29cea:	f7fe fd75 	bl	287d8 <z_spin_lock_valid>
   29cee:	b968      	cbnz	r0, 29d0c <z_sched_start+0x38>
   29cf0:	2394      	movs	r3, #148	; 0x94
   29cf2:	4a1b      	ldr	r2, [pc, #108]	; (29d60 <z_sched_start+0x8c>)
   29cf4:	491b      	ldr	r1, [pc, #108]	; (29d64 <z_sched_start+0x90>)
   29cf6:	481c      	ldr	r0, [pc, #112]	; (29d68 <z_sched_start+0x94>)
   29cf8:	f004 fe2c 	bl	2e954 <assert_print>
   29cfc:	4917      	ldr	r1, [pc, #92]	; (29d5c <z_sched_start+0x88>)
   29cfe:	481b      	ldr	r0, [pc, #108]	; (29d6c <z_sched_start+0x98>)
   29d00:	f004 fe28 	bl	2e954 <assert_print>
   29d04:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29d06:	4816      	ldr	r0, [pc, #88]	; (29d60 <z_sched_start+0x8c>)
   29d08:	f004 fe1d 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   29d0c:	4813      	ldr	r0, [pc, #76]	; (29d5c <z_sched_start+0x88>)
   29d0e:	f7fe fd7f 	bl	28810 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   29d12:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   29d14:	075a      	lsls	r2, r3, #29
   29d16:	d414      	bmi.n	29d42 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29d18:	4810      	ldr	r0, [pc, #64]	; (29d5c <z_sched_start+0x88>)
   29d1a:	f7fe fd6b 	bl	287f4 <z_spin_unlock_valid>
   29d1e:	b958      	cbnz	r0, 29d38 <z_sched_start+0x64>
   29d20:	23c2      	movs	r3, #194	; 0xc2
   29d22:	4a0f      	ldr	r2, [pc, #60]	; (29d60 <z_sched_start+0x8c>)
   29d24:	4912      	ldr	r1, [pc, #72]	; (29d70 <z_sched_start+0x9c>)
   29d26:	4810      	ldr	r0, [pc, #64]	; (29d68 <z_sched_start+0x94>)
   29d28:	f004 fe14 	bl	2e954 <assert_print>
   29d2c:	490b      	ldr	r1, [pc, #44]	; (29d5c <z_sched_start+0x88>)
   29d2e:	4811      	ldr	r0, [pc, #68]	; (29d74 <z_sched_start+0xa0>)
   29d30:	f004 fe10 	bl	2e954 <assert_print>
   29d34:	21c2      	movs	r1, #194	; 0xc2
   29d36:	e7e6      	b.n	29d06 <z_sched_start+0x32>
	__asm__ volatile(
   29d38:	f385 8811 	msr	BASEPRI, r5
   29d3c:	f3bf 8f6f 	isb	sy
}
   29d40:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29d42:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   29d46:	4620      	mov	r0, r4
   29d48:	7363      	strb	r3, [r4, #13]
   29d4a:	f7ff fea9 	bl	29aa0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   29d4e:	4629      	mov	r1, r5
}
   29d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   29d54:	4801      	ldr	r0, [pc, #4]	; (29d5c <z_sched_start+0x88>)
   29d56:	f7ff bf7b 	b.w	29c50 <z_reschedule>
   29d5a:	bf00      	nop
   29d5c:	20011004 	.word	0x20011004
   29d60:	000385b7 	.word	0x000385b7
   29d64:	00038610 	.word	0x00038610
   29d68:	000381c3 	.word	0x000381c3
   29d6c:	00038625 	.word	0x00038625
   29d70:	000385e4 	.word	0x000385e4
   29d74:	000385fb 	.word	0x000385fb

00029d78 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   29d78:	b510      	push	{r4, lr}
	__asm__ volatile(
   29d7a:	f04f 0320 	mov.w	r3, #32
   29d7e:	f3ef 8411 	mrs	r4, BASEPRI
   29d82:	f383 8812 	msr	BASEPRI_MAX, r3
   29d86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29d8a:	4825      	ldr	r0, [pc, #148]	; (29e20 <k_sched_lock+0xa8>)
   29d8c:	f7fe fd24 	bl	287d8 <z_spin_lock_valid>
   29d90:	b960      	cbnz	r0, 29dac <k_sched_lock+0x34>
   29d92:	2394      	movs	r3, #148	; 0x94
   29d94:	4a23      	ldr	r2, [pc, #140]	; (29e24 <k_sched_lock+0xac>)
   29d96:	4924      	ldr	r1, [pc, #144]	; (29e28 <k_sched_lock+0xb0>)
   29d98:	4824      	ldr	r0, [pc, #144]	; (29e2c <k_sched_lock+0xb4>)
   29d9a:	f004 fddb 	bl	2e954 <assert_print>
   29d9e:	4920      	ldr	r1, [pc, #128]	; (29e20 <k_sched_lock+0xa8>)
   29da0:	4823      	ldr	r0, [pc, #140]	; (29e30 <k_sched_lock+0xb8>)
   29da2:	f004 fdd7 	bl	2e954 <assert_print>
   29da6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29da8:	481e      	ldr	r0, [pc, #120]	; (29e24 <k_sched_lock+0xac>)
   29daa:	e010      	b.n	29dce <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   29dac:	481c      	ldr	r0, [pc, #112]	; (29e20 <k_sched_lock+0xa8>)
   29dae:	f7fe fd2f 	bl	28810 <z_spin_lock_set_owner>
   29db2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   29db6:	b163      	cbz	r3, 29dd2 <k_sched_lock+0x5a>
   29db8:	491e      	ldr	r1, [pc, #120]	; (29e34 <k_sched_lock+0xbc>)
   29dba:	23fd      	movs	r3, #253	; 0xfd
   29dbc:	4a1e      	ldr	r2, [pc, #120]	; (29e38 <k_sched_lock+0xc0>)
   29dbe:	481b      	ldr	r0, [pc, #108]	; (29e2c <k_sched_lock+0xb4>)
   29dc0:	f004 fdc8 	bl	2e954 <assert_print>
   29dc4:	481d      	ldr	r0, [pc, #116]	; (29e3c <k_sched_lock+0xc4>)
   29dc6:	f004 fdc5 	bl	2e954 <assert_print>
   29dca:	21fd      	movs	r1, #253	; 0xfd
   29dcc:	481a      	ldr	r0, [pc, #104]	; (29e38 <k_sched_lock+0xc0>)
   29dce:	f004 fdba 	bl	2e946 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   29dd2:	4b1b      	ldr	r3, [pc, #108]	; (29e40 <k_sched_lock+0xc8>)
   29dd4:	689a      	ldr	r2, [r3, #8]
   29dd6:	7bd3      	ldrb	r3, [r2, #15]
   29dd8:	2b01      	cmp	r3, #1
   29dda:	d10a      	bne.n	29df2 <k_sched_lock+0x7a>
   29ddc:	4919      	ldr	r1, [pc, #100]	; (29e44 <k_sched_lock+0xcc>)
   29dde:	23fe      	movs	r3, #254	; 0xfe
   29de0:	4a15      	ldr	r2, [pc, #84]	; (29e38 <k_sched_lock+0xc0>)
   29de2:	4812      	ldr	r0, [pc, #72]	; (29e2c <k_sched_lock+0xb4>)
   29de4:	f004 fdb6 	bl	2e954 <assert_print>
   29de8:	4814      	ldr	r0, [pc, #80]	; (29e3c <k_sched_lock+0xc4>)
   29dea:	f004 fdb3 	bl	2e954 <assert_print>
   29dee:	21fe      	movs	r1, #254	; 0xfe
   29df0:	e7ec      	b.n	29dcc <k_sched_lock+0x54>
	--_current->base.sched_locked;
   29df2:	3b01      	subs	r3, #1
   29df4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29df6:	480a      	ldr	r0, [pc, #40]	; (29e20 <k_sched_lock+0xa8>)
   29df8:	f7fe fcfc 	bl	287f4 <z_spin_unlock_valid>
   29dfc:	b958      	cbnz	r0, 29e16 <k_sched_lock+0x9e>
   29dfe:	23c2      	movs	r3, #194	; 0xc2
   29e00:	4a08      	ldr	r2, [pc, #32]	; (29e24 <k_sched_lock+0xac>)
   29e02:	4911      	ldr	r1, [pc, #68]	; (29e48 <k_sched_lock+0xd0>)
   29e04:	4809      	ldr	r0, [pc, #36]	; (29e2c <k_sched_lock+0xb4>)
   29e06:	f004 fda5 	bl	2e954 <assert_print>
   29e0a:	4905      	ldr	r1, [pc, #20]	; (29e20 <k_sched_lock+0xa8>)
   29e0c:	480f      	ldr	r0, [pc, #60]	; (29e4c <k_sched_lock+0xd4>)
   29e0e:	f004 fda1 	bl	2e954 <assert_print>
   29e12:	21c2      	movs	r1, #194	; 0xc2
   29e14:	e7c8      	b.n	29da8 <k_sched_lock+0x30>
	__asm__ volatile(
   29e16:	f384 8811 	msr	BASEPRI, r4
   29e1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   29e1e:	bd10      	pop	{r4, pc}
   29e20:	20011004 	.word	0x20011004
   29e24:	000385b7 	.word	0x000385b7
   29e28:	00038610 	.word	0x00038610
   29e2c:	000381c3 	.word	0x000381c3
   29e30:	00038625 	.word	0x00038625
   29e34:	00040680 	.word	0x00040680
   29e38:	00040af0 	.word	0x00040af0
   29e3c:	00038b19 	.word	0x00038b19
   29e40:	20010fc0 	.word	0x20010fc0
   29e44:	00040b1b 	.word	0x00040b1b
   29e48:	000385e4 	.word	0x000385e4
   29e4c:	000385fb 	.word	0x000385fb

00029e50 <k_sched_unlock>:

void k_sched_unlock(void)
{
   29e50:	b510      	push	{r4, lr}
	__asm__ volatile(
   29e52:	f04f 0320 	mov.w	r3, #32
   29e56:	f3ef 8411 	mrs	r4, BASEPRI
   29e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   29e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29e62:	4829      	ldr	r0, [pc, #164]	; (29f08 <k_sched_unlock+0xb8>)
   29e64:	f7fe fcb8 	bl	287d8 <z_spin_lock_valid>
   29e68:	b960      	cbnz	r0, 29e84 <k_sched_unlock+0x34>
   29e6a:	2394      	movs	r3, #148	; 0x94
   29e6c:	4a27      	ldr	r2, [pc, #156]	; (29f0c <k_sched_unlock+0xbc>)
   29e6e:	4928      	ldr	r1, [pc, #160]	; (29f10 <k_sched_unlock+0xc0>)
   29e70:	4828      	ldr	r0, [pc, #160]	; (29f14 <k_sched_unlock+0xc4>)
   29e72:	f004 fd6f 	bl	2e954 <assert_print>
   29e76:	4924      	ldr	r1, [pc, #144]	; (29f08 <k_sched_unlock+0xb8>)
   29e78:	4827      	ldr	r0, [pc, #156]	; (29f18 <k_sched_unlock+0xc8>)
   29e7a:	f004 fd6b 	bl	2e954 <assert_print>
   29e7e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29e80:	4822      	ldr	r0, [pc, #136]	; (29f0c <k_sched_unlock+0xbc>)
   29e82:	e013      	b.n	29eac <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   29e84:	4820      	ldr	r0, [pc, #128]	; (29f08 <k_sched_unlock+0xb8>)
   29e86:	f7fe fcc3 	bl	28810 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   29e8a:	4b24      	ldr	r3, [pc, #144]	; (29f1c <k_sched_unlock+0xcc>)
   29e8c:	689a      	ldr	r2, [r3, #8]
   29e8e:	7bd3      	ldrb	r3, [r2, #15]
   29e90:	b973      	cbnz	r3, 29eb0 <k_sched_unlock+0x60>
   29e92:	4923      	ldr	r1, [pc, #140]	; (29f20 <k_sched_unlock+0xd0>)
   29e94:	f240 33ef 	movw	r3, #1007	; 0x3ef
   29e98:	4a22      	ldr	r2, [pc, #136]	; (29f24 <k_sched_unlock+0xd4>)
   29e9a:	481e      	ldr	r0, [pc, #120]	; (29f14 <k_sched_unlock+0xc4>)
   29e9c:	f004 fd5a 	bl	2e954 <assert_print>
   29ea0:	4821      	ldr	r0, [pc, #132]	; (29f28 <k_sched_unlock+0xd8>)
   29ea2:	f004 fd57 	bl	2e954 <assert_print>
   29ea6:	f240 31ef 	movw	r1, #1007	; 0x3ef
   29eaa:	481e      	ldr	r0, [pc, #120]	; (29f24 <k_sched_unlock+0xd4>)
   29eac:	f004 fd4b 	bl	2e946 <assert_post_action>
   29eb0:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   29eb4:	b160      	cbz	r0, 29ed0 <k_sched_unlock+0x80>
   29eb6:	491d      	ldr	r1, [pc, #116]	; (29f2c <k_sched_unlock+0xdc>)
   29eb8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   29ebc:	4a19      	ldr	r2, [pc, #100]	; (29f24 <k_sched_unlock+0xd4>)
   29ebe:	4815      	ldr	r0, [pc, #84]	; (29f14 <k_sched_unlock+0xc4>)
   29ec0:	f004 fd48 	bl	2e954 <assert_print>
   29ec4:	4818      	ldr	r0, [pc, #96]	; (29f28 <k_sched_unlock+0xd8>)
   29ec6:	f004 fd45 	bl	2e954 <assert_print>
   29eca:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   29ece:	e7ec      	b.n	29eaa <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   29ed0:	3301      	adds	r3, #1
   29ed2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   29ed4:	f7ff fdb0 	bl	29a38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29ed8:	480b      	ldr	r0, [pc, #44]	; (29f08 <k_sched_unlock+0xb8>)
   29eda:	f7fe fc8b 	bl	287f4 <z_spin_unlock_valid>
   29ede:	b958      	cbnz	r0, 29ef8 <k_sched_unlock+0xa8>
   29ee0:	23c2      	movs	r3, #194	; 0xc2
   29ee2:	4a0a      	ldr	r2, [pc, #40]	; (29f0c <k_sched_unlock+0xbc>)
   29ee4:	4912      	ldr	r1, [pc, #72]	; (29f30 <k_sched_unlock+0xe0>)
   29ee6:	480b      	ldr	r0, [pc, #44]	; (29f14 <k_sched_unlock+0xc4>)
   29ee8:	f004 fd34 	bl	2e954 <assert_print>
   29eec:	4906      	ldr	r1, [pc, #24]	; (29f08 <k_sched_unlock+0xb8>)
   29eee:	4811      	ldr	r0, [pc, #68]	; (29f34 <k_sched_unlock+0xe4>)
   29ef0:	f004 fd30 	bl	2e954 <assert_print>
   29ef4:	21c2      	movs	r1, #194	; 0xc2
   29ef6:	e7c3      	b.n	29e80 <k_sched_unlock+0x30>
	__asm__ volatile(
   29ef8:	f384 8811 	msr	BASEPRI, r4
   29efc:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   29f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   29f04:	f00a bf21 	b.w	34d4a <z_reschedule_unlocked>
   29f08:	20011004 	.word	0x20011004
   29f0c:	000385b7 	.word	0x000385b7
   29f10:	00038610 	.word	0x00038610
   29f14:	000381c3 	.word	0x000381c3
   29f18:	00038625 	.word	0x00038625
   29f1c:	20010fc0 	.word	0x20010fc0
   29f20:	00040b4c 	.word	0x00040b4c
   29f24:	000408ed 	.word	0x000408ed
   29f28:	00038b19 	.word	0x00038b19
   29f2c:	00040680 	.word	0x00040680
   29f30:	000385e4 	.word	0x000385e4
   29f34:	000385fb 	.word	0x000385fb

00029f38 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   29f38:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29f3a:	4b0b      	ldr	r3, [pc, #44]	; (29f68 <z_priq_dumb_remove+0x30>)
   29f3c:	4299      	cmp	r1, r3
   29f3e:	d10b      	bne.n	29f58 <z_priq_dumb_remove+0x20>
   29f40:	490a      	ldr	r1, [pc, #40]	; (29f6c <z_priq_dumb_remove+0x34>)
   29f42:	480b      	ldr	r0, [pc, #44]	; (29f70 <z_priq_dumb_remove+0x38>)
   29f44:	f240 437b 	movw	r3, #1147	; 0x47b
   29f48:	4a0a      	ldr	r2, [pc, #40]	; (29f74 <z_priq_dumb_remove+0x3c>)
   29f4a:	f004 fd03 	bl	2e954 <assert_print>
   29f4e:	f240 417b 	movw	r1, #1147	; 0x47b
   29f52:	4808      	ldr	r0, [pc, #32]	; (29f74 <z_priq_dumb_remove+0x3c>)
   29f54:	f004 fcf7 	bl	2e946 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   29f58:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   29f5c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29f5e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29f60:	2300      	movs	r3, #0
	node->prev = NULL;
   29f62:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   29f66:	bd08      	pop	{r3, pc}
   29f68:	2000f630 	.word	0x2000f630
   29f6c:	00040acf 	.word	0x00040acf
   29f70:	000381c3 	.word	0x000381c3
   29f74:	000408ed 	.word	0x000408ed

00029f78 <move_thread_to_end_of_prio_q>:
{
   29f78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   29f7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   29f7e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   29f80:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   29f82:	7b43      	ldrb	r3, [r0, #13]
   29f84:	da06      	bge.n	29f94 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   29f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   29f8a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   29f8c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   29f8e:	481d      	ldr	r0, [pc, #116]	; (2a004 <move_thread_to_end_of_prio_q+0x8c>)
   29f90:	f7ff ffd2 	bl	29f38 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   29f94:	7b63      	ldrb	r3, [r4, #13]
   29f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
   29f9a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   29f9c:	4b1a      	ldr	r3, [pc, #104]	; (2a008 <move_thread_to_end_of_prio_q+0x90>)
   29f9e:	429c      	cmp	r4, r3
   29fa0:	d109      	bne.n	29fb6 <move_thread_to_end_of_prio_q+0x3e>
   29fa2:	491a      	ldr	r1, [pc, #104]	; (2a00c <move_thread_to_end_of_prio_q+0x94>)
   29fa4:	481a      	ldr	r0, [pc, #104]	; (2a010 <move_thread_to_end_of_prio_q+0x98>)
   29fa6:	23bc      	movs	r3, #188	; 0xbc
   29fa8:	4a1a      	ldr	r2, [pc, #104]	; (2a014 <move_thread_to_end_of_prio_q+0x9c>)
   29faa:	f004 fcd3 	bl	2e954 <assert_print>
   29fae:	21bc      	movs	r1, #188	; 0xbc
   29fb0:	4818      	ldr	r0, [pc, #96]	; (2a014 <move_thread_to_end_of_prio_q+0x9c>)
   29fb2:	f004 fcc8 	bl	2e946 <assert_post_action>
	return list->head == list;
   29fb6:	4a18      	ldr	r2, [pc, #96]	; (2a018 <move_thread_to_end_of_prio_q+0xa0>)
   29fb8:	4611      	mov	r1, r2
   29fba:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return (node == list->tail) ? NULL : node->next;
   29fbe:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29fc0:	428b      	cmp	r3, r1
   29fc2:	bf08      	it	eq
   29fc4:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29fc6:	b923      	cbnz	r3, 29fd2 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   29fc8:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   29fcc:	6004      	str	r4, [r0, #0]
	list->tail = node;
   29fce:	6214      	str	r4, [r2, #32]
}
   29fd0:	e00c      	b.n	29fec <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   29fd2:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   29fd6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   29fda:	42b5      	cmp	r5, r6
   29fdc:	d00e      	beq.n	29ffc <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   29fde:	42ae      	cmp	r6, r5
   29fe0:	dd0c      	ble.n	29ffc <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   29fe2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   29fe4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   29fe8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   29fea:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   29fec:	6890      	ldr	r0, [r2, #8]
   29fee:	1b03      	subs	r3, r0, r4
   29ff0:	4258      	negs	r0, r3
   29ff2:	4158      	adcs	r0, r3
}
   29ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   29ff8:	f7ff bd1e 	b.w	29a38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   29ffc:	4298      	cmp	r0, r3
   29ffe:	d0e3      	beq.n	29fc8 <move_thread_to_end_of_prio_q+0x50>
   2a000:	681b      	ldr	r3, [r3, #0]
   2a002:	e7e0      	b.n	29fc6 <move_thread_to_end_of_prio_q+0x4e>
   2a004:	20010fdc 	.word	0x20010fdc
   2a008:	2000f630 	.word	0x2000f630
   2a00c:	00040acf 	.word	0x00040acf
   2a010:	000381c3 	.word	0x000381c3
   2a014:	000408ed 	.word	0x000408ed
   2a018:	20010fc0 	.word	0x20010fc0

0002a01c <z_time_slice>:
{
   2a01c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a01e:	f04f 0320 	mov.w	r3, #32
   2a022:	f3ef 8511 	mrs	r5, BASEPRI
   2a026:	f383 8812 	msr	BASEPRI_MAX, r3
   2a02a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a02e:	4823      	ldr	r0, [pc, #140]	; (2a0bc <z_time_slice+0xa0>)
   2a030:	f7fe fbd2 	bl	287d8 <z_spin_lock_valid>
   2a034:	b968      	cbnz	r0, 2a052 <z_time_slice+0x36>
   2a036:	2394      	movs	r3, #148	; 0x94
   2a038:	4a21      	ldr	r2, [pc, #132]	; (2a0c0 <z_time_slice+0xa4>)
   2a03a:	4922      	ldr	r1, [pc, #136]	; (2a0c4 <z_time_slice+0xa8>)
   2a03c:	4822      	ldr	r0, [pc, #136]	; (2a0c8 <z_time_slice+0xac>)
   2a03e:	f004 fc89 	bl	2e954 <assert_print>
   2a042:	491e      	ldr	r1, [pc, #120]	; (2a0bc <z_time_slice+0xa0>)
   2a044:	4821      	ldr	r0, [pc, #132]	; (2a0cc <z_time_slice+0xb0>)
   2a046:	f004 fc85 	bl	2e954 <assert_print>
   2a04a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a04c:	481c      	ldr	r0, [pc, #112]	; (2a0c0 <z_time_slice+0xa4>)
   2a04e:	f004 fc7a 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a052:	481a      	ldr	r0, [pc, #104]	; (2a0bc <z_time_slice+0xa0>)
   2a054:	f7fe fbdc 	bl	28810 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   2a058:	4b1d      	ldr	r3, [pc, #116]	; (2a0d0 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   2a05a:	4a1e      	ldr	r2, [pc, #120]	; (2a0d4 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   2a05c:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   2a05e:	6810      	ldr	r0, [r2, #0]
   2a060:	42a0      	cmp	r0, r4
   2a062:	d111      	bne.n	2a088 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   2a064:	f7ff fcc0 	bl	299e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a068:	4814      	ldr	r0, [pc, #80]	; (2a0bc <z_time_slice+0xa0>)
   2a06a:	f7fe fbc3 	bl	287f4 <z_spin_unlock_valid>
   2a06e:	b9f8      	cbnz	r0, 2a0b0 <z_time_slice+0x94>
   2a070:	23c2      	movs	r3, #194	; 0xc2
   2a072:	4a13      	ldr	r2, [pc, #76]	; (2a0c0 <z_time_slice+0xa4>)
   2a074:	4918      	ldr	r1, [pc, #96]	; (2a0d8 <z_time_slice+0xbc>)
   2a076:	4814      	ldr	r0, [pc, #80]	; (2a0c8 <z_time_slice+0xac>)
   2a078:	f004 fc6c 	bl	2e954 <assert_print>
   2a07c:	490f      	ldr	r1, [pc, #60]	; (2a0bc <z_time_slice+0xa0>)
   2a07e:	4817      	ldr	r0, [pc, #92]	; (2a0dc <z_time_slice+0xc0>)
   2a080:	f004 fc68 	bl	2e954 <assert_print>
   2a084:	21c2      	movs	r1, #194	; 0xc2
   2a086:	e7e1      	b.n	2a04c <z_time_slice+0x30>
	pending_current = NULL;
   2a088:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2a08a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2a08c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2a08e:	4a14      	ldr	r2, [pc, #80]	; (2a0e0 <z_time_slice+0xc4>)
   2a090:	5cd3      	ldrb	r3, [r2, r3]
   2a092:	2b00      	cmp	r3, #0
   2a094:	d0e8      	beq.n	2a068 <z_time_slice+0x4c>
   2a096:	4620      	mov	r0, r4
   2a098:	f7ff fc58 	bl	2994c <sliceable>
   2a09c:	2800      	cmp	r0, #0
   2a09e:	d0e3      	beq.n	2a068 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   2a0a0:	7b63      	ldrb	r3, [r4, #13]
   2a0a2:	06db      	lsls	r3, r3, #27
   2a0a4:	d102      	bne.n	2a0ac <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   2a0a6:	4620      	mov	r0, r4
   2a0a8:	f7ff ff66 	bl	29f78 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2a0ac:	4620      	mov	r0, r4
   2a0ae:	e7d9      	b.n	2a064 <z_time_slice+0x48>
	__asm__ volatile(
   2a0b0:	f385 8811 	msr	BASEPRI, r5
   2a0b4:	f3bf 8f6f 	isb	sy
}
   2a0b8:	bd38      	pop	{r3, r4, r5, pc}
   2a0ba:	bf00      	nop
   2a0bc:	20011004 	.word	0x20011004
   2a0c0:	000385b7 	.word	0x000385b7
   2a0c4:	00038610 	.word	0x00038610
   2a0c8:	000381c3 	.word	0x000381c3
   2a0cc:	00038625 	.word	0x00038625
   2a0d0:	20010fc0 	.word	0x20010fc0
   2a0d4:	20010ff8 	.word	0x20010ff8
   2a0d8:	000385e4 	.word	0x000385e4
   2a0dc:	000385fb 	.word	0x000385fb
   2a0e0:	20012880 	.word	0x20012880

0002a0e4 <unready_thread>:
{
   2a0e4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2a0e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2a0ea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2a0ec:	2a00      	cmp	r2, #0
   2a0ee:	7b43      	ldrb	r3, [r0, #13]
   2a0f0:	da06      	bge.n	2a100 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2a0f6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a0f8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a0fa:	4806      	ldr	r0, [pc, #24]	; (2a114 <unready_thread+0x30>)
   2a0fc:	f7ff ff1c 	bl	29f38 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2a100:	4b05      	ldr	r3, [pc, #20]	; (2a118 <unready_thread+0x34>)
   2a102:	6898      	ldr	r0, [r3, #8]
   2a104:	1b03      	subs	r3, r0, r4
   2a106:	4258      	negs	r0, r3
   2a108:	4158      	adcs	r0, r3
}
   2a10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2a10e:	f7ff bc93 	b.w	29a38 <update_cache>
   2a112:	bf00      	nop
   2a114:	20010fdc 	.word	0x20010fdc
   2a118:	20010fc0 	.word	0x20010fc0

0002a11c <add_to_waitq_locked>:
{
   2a11c:	b538      	push	{r3, r4, r5, lr}
   2a11e:	4604      	mov	r4, r0
   2a120:	460d      	mov	r5, r1
	unready_thread(thread);
   2a122:	f7ff ffdf 	bl	2a0e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a126:	7b63      	ldrb	r3, [r4, #13]
   2a128:	f043 0302 	orr.w	r3, r3, #2
   2a12c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2a12e:	b34d      	cbz	r5, 2a184 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a130:	4b15      	ldr	r3, [pc, #84]	; (2a188 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2a132:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a134:	429c      	cmp	r4, r3
   2a136:	d109      	bne.n	2a14c <add_to_waitq_locked+0x30>
   2a138:	4914      	ldr	r1, [pc, #80]	; (2a18c <add_to_waitq_locked+0x70>)
   2a13a:	4815      	ldr	r0, [pc, #84]	; (2a190 <add_to_waitq_locked+0x74>)
   2a13c:	23bc      	movs	r3, #188	; 0xbc
   2a13e:	4a15      	ldr	r2, [pc, #84]	; (2a194 <add_to_waitq_locked+0x78>)
   2a140:	f004 fc08 	bl	2e954 <assert_print>
   2a144:	21bc      	movs	r1, #188	; 0xbc
   2a146:	4813      	ldr	r0, [pc, #76]	; (2a194 <add_to_waitq_locked+0x78>)
   2a148:	f004 fbfd 	bl	2e946 <assert_post_action>
	return list->head == list;
   2a14c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a14e:	429d      	cmp	r5, r3
   2a150:	d109      	bne.n	2a166 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   2a152:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2a154:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2a158:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a15a:	606c      	str	r4, [r5, #4]
}
   2a15c:	e012      	b.n	2a184 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   2a15e:	686a      	ldr	r2, [r5, #4]
   2a160:	4293      	cmp	r3, r2
   2a162:	d0f6      	beq.n	2a152 <add_to_waitq_locked+0x36>
   2a164:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a166:	2b00      	cmp	r3, #0
   2a168:	d0f3      	beq.n	2a152 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   2a16a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2a16e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2a172:	428a      	cmp	r2, r1
   2a174:	d0f3      	beq.n	2a15e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a176:	4291      	cmp	r1, r2
   2a178:	ddf1      	ble.n	2a15e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   2a17a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a17c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2a180:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a182:	605c      	str	r4, [r3, #4]
}
   2a184:	bd38      	pop	{r3, r4, r5, pc}
   2a186:	bf00      	nop
   2a188:	2000f630 	.word	0x2000f630
   2a18c:	00040acf 	.word	0x00040acf
   2a190:	000381c3 	.word	0x000381c3
   2a194:	000408ed 	.word	0x000408ed

0002a198 <pend_locked>:
{
   2a198:	b570      	push	{r4, r5, r6, lr}
   2a19a:	4615      	mov	r5, r2
   2a19c:	461c      	mov	r4, r3
   2a19e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   2a1a0:	f7ff ffbc 	bl	2a11c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a1a4:	f1b4 3fff 	cmp.w	r4, #4294967295
   2a1a8:	bf08      	it	eq
   2a1aa:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2a1ae:	d008      	beq.n	2a1c2 <pend_locked+0x2a>
   2a1b0:	462a      	mov	r2, r5
   2a1b2:	4623      	mov	r3, r4
   2a1b4:	f106 0018 	add.w	r0, r6, #24
   2a1b8:	4902      	ldr	r1, [pc, #8]	; (2a1c4 <pend_locked+0x2c>)
}
   2a1ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a1be:	f000 bde7 	b.w	2ad90 <z_add_timeout>
   2a1c2:	bd70      	pop	{r4, r5, r6, pc}
   2a1c4:	00034d5f 	.word	0x00034d5f

0002a1c8 <z_pend_curr>:
{
   2a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a1cc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   2a1d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2a288 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2a1d4:	4c2d      	ldr	r4, [pc, #180]	; (2a28c <z_pend_curr+0xc4>)
{
   2a1d6:	4617      	mov	r7, r2
	pending_current = _current;
   2a1d8:	4b2d      	ldr	r3, [pc, #180]	; (2a290 <z_pend_curr+0xc8>)
   2a1da:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2a1de:	42a0      	cmp	r0, r4
{
   2a1e0:	4605      	mov	r5, r0
   2a1e2:	460e      	mov	r6, r1
	pending_current = _current;
   2a1e4:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2a1e6:	d10b      	bne.n	2a200 <z_pend_curr+0x38>
   2a1e8:	492a      	ldr	r1, [pc, #168]	; (2a294 <z_pend_curr+0xcc>)
   2a1ea:	482b      	ldr	r0, [pc, #172]	; (2a298 <z_pend_curr+0xd0>)
   2a1ec:	f240 3356 	movw	r3, #854	; 0x356
   2a1f0:	4a2a      	ldr	r2, [pc, #168]	; (2a29c <z_pend_curr+0xd4>)
   2a1f2:	f004 fbaf 	bl	2e954 <assert_print>
   2a1f6:	f240 3156 	movw	r1, #854	; 0x356
   2a1fa:	4828      	ldr	r0, [pc, #160]	; (2a29c <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1fc:	f004 fba3 	bl	2e946 <assert_post_action>
	__asm__ volatile(
   2a200:	f04f 0220 	mov.w	r2, #32
   2a204:	f3ef 8311 	mrs	r3, BASEPRI
   2a208:	f382 8812 	msr	BASEPRI_MAX, r2
   2a20c:	f3bf 8f6f 	isb	sy
   2a210:	4620      	mov	r0, r4
   2a212:	f7fe fae1 	bl	287d8 <z_spin_lock_valid>
   2a216:	b960      	cbnz	r0, 2a232 <z_pend_curr+0x6a>
   2a218:	2394      	movs	r3, #148	; 0x94
   2a21a:	4a21      	ldr	r2, [pc, #132]	; (2a2a0 <z_pend_curr+0xd8>)
   2a21c:	4921      	ldr	r1, [pc, #132]	; (2a2a4 <z_pend_curr+0xdc>)
   2a21e:	481e      	ldr	r0, [pc, #120]	; (2a298 <z_pend_curr+0xd0>)
   2a220:	f004 fb98 	bl	2e954 <assert_print>
   2a224:	4621      	mov	r1, r4
   2a226:	4820      	ldr	r0, [pc, #128]	; (2a2a8 <z_pend_curr+0xe0>)
   2a228:	f004 fb94 	bl	2e954 <assert_print>
   2a22c:	2194      	movs	r1, #148	; 0x94
   2a22e:	481c      	ldr	r0, [pc, #112]	; (2a2a0 <z_pend_curr+0xd8>)
   2a230:	e7e4      	b.n	2a1fc <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2a232:	4620      	mov	r0, r4
   2a234:	f7fe faec 	bl	28810 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   2a238:	f8da 0008 	ldr.w	r0, [sl, #8]
   2a23c:	4642      	mov	r2, r8
   2a23e:	464b      	mov	r3, r9
   2a240:	4639      	mov	r1, r7
   2a242:	f7ff ffa9 	bl	2a198 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a246:	4628      	mov	r0, r5
   2a248:	f7fe fad4 	bl	287f4 <z_spin_unlock_valid>
   2a24c:	b958      	cbnz	r0, 2a266 <z_pend_curr+0x9e>
   2a24e:	4917      	ldr	r1, [pc, #92]	; (2a2ac <z_pend_curr+0xe4>)
   2a250:	23e1      	movs	r3, #225	; 0xe1
   2a252:	4a13      	ldr	r2, [pc, #76]	; (2a2a0 <z_pend_curr+0xd8>)
   2a254:	4810      	ldr	r0, [pc, #64]	; (2a298 <z_pend_curr+0xd0>)
   2a256:	f004 fb7d 	bl	2e954 <assert_print>
   2a25a:	4629      	mov	r1, r5
   2a25c:	4814      	ldr	r0, [pc, #80]	; (2a2b0 <z_pend_curr+0xe8>)
   2a25e:	f004 fb79 	bl	2e954 <assert_print>
   2a262:	21e1      	movs	r1, #225	; 0xe1
   2a264:	e7e3      	b.n	2a22e <z_pend_curr+0x66>
   2a266:	4620      	mov	r0, r4
   2a268:	f7fe fac4 	bl	287f4 <z_spin_unlock_valid>
   2a26c:	b938      	cbnz	r0, 2a27e <z_pend_curr+0xb6>
   2a26e:	490f      	ldr	r1, [pc, #60]	; (2a2ac <z_pend_curr+0xe4>)
   2a270:	23e1      	movs	r3, #225	; 0xe1
   2a272:	4a0b      	ldr	r2, [pc, #44]	; (2a2a0 <z_pend_curr+0xd8>)
   2a274:	4808      	ldr	r0, [pc, #32]	; (2a298 <z_pend_curr+0xd0>)
   2a276:	f004 fb6d 	bl	2e954 <assert_print>
   2a27a:	4621      	mov	r1, r4
   2a27c:	e7ee      	b.n	2a25c <z_pend_curr+0x94>
   2a27e:	4630      	mov	r0, r6
}
   2a280:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a284:	f7e6 b910 	b.w	104a8 <arch_swap>
   2a288:	20010fc0 	.word	0x20010fc0
   2a28c:	20011004 	.word	0x20011004
   2a290:	20010ff8 	.word	0x20010ff8
   2a294:	00040b7d 	.word	0x00040b7d
   2a298:	000381c3 	.word	0x000381c3
   2a29c:	000408ed 	.word	0x000408ed
   2a2a0:	000385b7 	.word	0x000385b7
   2a2a4:	00038610 	.word	0x00038610
   2a2a8:	00038625 	.word	0x00038625
   2a2ac:	000385e4 	.word	0x000385e4
   2a2b0:	000385fb 	.word	0x000385fb

0002a2b4 <z_set_prio>:
{
   2a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a2b8:	4604      	mov	r4, r0
   2a2ba:	460e      	mov	r6, r1
   2a2bc:	f04f 0320 	mov.w	r3, #32
   2a2c0:	f3ef 8911 	mrs	r9, BASEPRI
   2a2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a2c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a2cc:	4837      	ldr	r0, [pc, #220]	; (2a3ac <z_set_prio+0xf8>)
   2a2ce:	f7fe fa83 	bl	287d8 <z_spin_lock_valid>
   2a2d2:	4607      	mov	r7, r0
   2a2d4:	b960      	cbnz	r0, 2a2f0 <z_set_prio+0x3c>
   2a2d6:	2394      	movs	r3, #148	; 0x94
   2a2d8:	4a35      	ldr	r2, [pc, #212]	; (2a3b0 <z_set_prio+0xfc>)
   2a2da:	4936      	ldr	r1, [pc, #216]	; (2a3b4 <z_set_prio+0x100>)
   2a2dc:	4836      	ldr	r0, [pc, #216]	; (2a3b8 <z_set_prio+0x104>)
   2a2de:	f004 fb39 	bl	2e954 <assert_print>
   2a2e2:	4932      	ldr	r1, [pc, #200]	; (2a3ac <z_set_prio+0xf8>)
   2a2e4:	4835      	ldr	r0, [pc, #212]	; (2a3bc <z_set_prio+0x108>)
   2a2e6:	f004 fb35 	bl	2e954 <assert_print>
   2a2ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a2ec:	4830      	ldr	r0, [pc, #192]	; (2a3b0 <z_set_prio+0xfc>)
   2a2ee:	e021      	b.n	2a334 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   2a2f0:	482e      	ldr	r0, [pc, #184]	; (2a3ac <z_set_prio+0xf8>)
   2a2f2:	f7fe fa8d 	bl	28810 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2a2f6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2a2f8:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a2fa:	06da      	lsls	r2, r3, #27
   2a2fc:	d11c      	bne.n	2a338 <z_set_prio+0x84>
	return node->next != NULL;
   2a2fe:	69a5      	ldr	r5, [r4, #24]
   2a300:	b9d5      	cbnz	r5, 2a338 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2a302:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2a3c0 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2a30a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a30c:	4621      	mov	r1, r4
   2a30e:	4640      	mov	r0, r8
   2a310:	f7ff fe12 	bl	29f38 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2a314:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2a316:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2a318:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2a31c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a31e:	4b29      	ldr	r3, [pc, #164]	; (2a3c4 <z_set_prio+0x110>)
   2a320:	429c      	cmp	r4, r3
   2a322:	d11b      	bne.n	2a35c <z_set_prio+0xa8>
   2a324:	4928      	ldr	r1, [pc, #160]	; (2a3c8 <z_set_prio+0x114>)
   2a326:	4824      	ldr	r0, [pc, #144]	; (2a3b8 <z_set_prio+0x104>)
   2a328:	23bc      	movs	r3, #188	; 0xbc
   2a32a:	4a28      	ldr	r2, [pc, #160]	; (2a3cc <z_set_prio+0x118>)
   2a32c:	f004 fb12 	bl	2e954 <assert_print>
   2a330:	21bc      	movs	r1, #188	; 0xbc
   2a332:	4826      	ldr	r0, [pc, #152]	; (2a3cc <z_set_prio+0x118>)
   2a334:	f004 fb07 	bl	2e946 <assert_post_action>
   2a338:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2a33a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a33c:	481b      	ldr	r0, [pc, #108]	; (2a3ac <z_set_prio+0xf8>)
   2a33e:	f7fe fa59 	bl	287f4 <z_spin_unlock_valid>
   2a342:	bb58      	cbnz	r0, 2a39c <z_set_prio+0xe8>
   2a344:	23c2      	movs	r3, #194	; 0xc2
   2a346:	4a1a      	ldr	r2, [pc, #104]	; (2a3b0 <z_set_prio+0xfc>)
   2a348:	4921      	ldr	r1, [pc, #132]	; (2a3d0 <z_set_prio+0x11c>)
   2a34a:	481b      	ldr	r0, [pc, #108]	; (2a3b8 <z_set_prio+0x104>)
   2a34c:	f004 fb02 	bl	2e954 <assert_print>
   2a350:	4916      	ldr	r1, [pc, #88]	; (2a3ac <z_set_prio+0xf8>)
   2a352:	4820      	ldr	r0, [pc, #128]	; (2a3d4 <z_set_prio+0x120>)
   2a354:	f004 fafe 	bl	2e954 <assert_print>
   2a358:	21c2      	movs	r1, #194	; 0xc2
   2a35a:	e7c7      	b.n	2a2ec <z_set_prio+0x38>
	return list->head == list;
   2a35c:	4643      	mov	r3, r8
   2a35e:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a362:	4542      	cmp	r2, r8
   2a364:	bf18      	it	ne
   2a366:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   2a368:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a36a:	b925      	cbnz	r5, 2a376 <z_set_prio+0xc2>
	node->prev = tail;
   2a36c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2a370:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a372:	621c      	str	r4, [r3, #32]
}
   2a374:	e00a      	b.n	2a38c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   2a376:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   2a37a:	428e      	cmp	r6, r1
   2a37c:	d00a      	beq.n	2a394 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a37e:	42b1      	cmp	r1, r6
   2a380:	dd08      	ble.n	2a394 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   2a382:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2a384:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2a388:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2a38a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2a38c:	2001      	movs	r0, #1
   2a38e:	f7ff fb53 	bl	29a38 <update_cache>
   2a392:	e7d3      	b.n	2a33c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   2a394:	42aa      	cmp	r2, r5
   2a396:	d0e9      	beq.n	2a36c <z_set_prio+0xb8>
   2a398:	682d      	ldr	r5, [r5, #0]
   2a39a:	e7e6      	b.n	2a36a <z_set_prio+0xb6>
	__asm__ volatile(
   2a39c:	f389 8811 	msr	BASEPRI, r9
   2a3a0:	f3bf 8f6f 	isb	sy
}
   2a3a4:	4638      	mov	r0, r7
   2a3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a3aa:	bf00      	nop
   2a3ac:	20011004 	.word	0x20011004
   2a3b0:	000385b7 	.word	0x000385b7
   2a3b4:	00038610 	.word	0x00038610
   2a3b8:	000381c3 	.word	0x000381c3
   2a3bc:	00038625 	.word	0x00038625
   2a3c0:	20010fdc 	.word	0x20010fdc
   2a3c4:	2000f630 	.word	0x2000f630
   2a3c8:	00040acf 	.word	0x00040acf
   2a3cc:	000408ed 	.word	0x000408ed
   2a3d0:	000385e4 	.word	0x000385e4
   2a3d4:	000385fb 	.word	0x000385fb

0002a3d8 <z_impl_k_thread_suspend>:
{
   2a3d8:	b570      	push	{r4, r5, r6, lr}
   2a3da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2a3dc:	3018      	adds	r0, #24
   2a3de:	f000 fd97 	bl	2af10 <z_abort_timeout>
	__asm__ volatile(
   2a3e2:	f04f 0320 	mov.w	r3, #32
   2a3e6:	f3ef 8611 	mrs	r6, BASEPRI
   2a3ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a3f2:	4824      	ldr	r0, [pc, #144]	; (2a484 <z_impl_k_thread_suspend+0xac>)
   2a3f4:	f7fe f9f0 	bl	287d8 <z_spin_lock_valid>
   2a3f8:	b968      	cbnz	r0, 2a416 <z_impl_k_thread_suspend+0x3e>
   2a3fa:	2394      	movs	r3, #148	; 0x94
   2a3fc:	4a22      	ldr	r2, [pc, #136]	; (2a488 <z_impl_k_thread_suspend+0xb0>)
   2a3fe:	4923      	ldr	r1, [pc, #140]	; (2a48c <z_impl_k_thread_suspend+0xb4>)
   2a400:	4823      	ldr	r0, [pc, #140]	; (2a490 <z_impl_k_thread_suspend+0xb8>)
   2a402:	f004 faa7 	bl	2e954 <assert_print>
   2a406:	491f      	ldr	r1, [pc, #124]	; (2a484 <z_impl_k_thread_suspend+0xac>)
   2a408:	4822      	ldr	r0, [pc, #136]	; (2a494 <z_impl_k_thread_suspend+0xbc>)
   2a40a:	f004 faa3 	bl	2e954 <assert_print>
   2a40e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a410:	481d      	ldr	r0, [pc, #116]	; (2a488 <z_impl_k_thread_suspend+0xb0>)
   2a412:	f004 fa98 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a416:	481b      	ldr	r0, [pc, #108]	; (2a484 <z_impl_k_thread_suspend+0xac>)
   2a418:	f7fe f9fa 	bl	28810 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2a41c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2a420:	7b63      	ldrb	r3, [r4, #13]
   2a422:	2a00      	cmp	r2, #0
   2a424:	da06      	bge.n	2a434 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2a42a:	4621      	mov	r1, r4
   2a42c:	481a      	ldr	r0, [pc, #104]	; (2a498 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a42e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a430:	f7ff fd82 	bl	29f38 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2a434:	4d19      	ldr	r5, [pc, #100]	; (2a49c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2a436:	7b63      	ldrb	r3, [r4, #13]
   2a438:	68a8      	ldr	r0, [r5, #8]
   2a43a:	f043 0310 	orr.w	r3, r3, #16
   2a43e:	7363      	strb	r3, [r4, #13]
   2a440:	1b03      	subs	r3, r0, r4
   2a442:	4258      	negs	r0, r3
   2a444:	4158      	adcs	r0, r3
   2a446:	f7ff faf7 	bl	29a38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a44a:	480e      	ldr	r0, [pc, #56]	; (2a484 <z_impl_k_thread_suspend+0xac>)
   2a44c:	f7fe f9d2 	bl	287f4 <z_spin_unlock_valid>
   2a450:	b958      	cbnz	r0, 2a46a <z_impl_k_thread_suspend+0x92>
   2a452:	23c2      	movs	r3, #194	; 0xc2
   2a454:	4a0c      	ldr	r2, [pc, #48]	; (2a488 <z_impl_k_thread_suspend+0xb0>)
   2a456:	4912      	ldr	r1, [pc, #72]	; (2a4a0 <z_impl_k_thread_suspend+0xc8>)
   2a458:	480d      	ldr	r0, [pc, #52]	; (2a490 <z_impl_k_thread_suspend+0xb8>)
   2a45a:	f004 fa7b 	bl	2e954 <assert_print>
   2a45e:	4909      	ldr	r1, [pc, #36]	; (2a484 <z_impl_k_thread_suspend+0xac>)
   2a460:	4810      	ldr	r0, [pc, #64]	; (2a4a4 <z_impl_k_thread_suspend+0xcc>)
   2a462:	f004 fa77 	bl	2e954 <assert_print>
   2a466:	21c2      	movs	r1, #194	; 0xc2
   2a468:	e7d2      	b.n	2a410 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   2a46a:	f386 8811 	msr	BASEPRI, r6
   2a46e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2a472:	68ab      	ldr	r3, [r5, #8]
   2a474:	42a3      	cmp	r3, r4
   2a476:	d103      	bne.n	2a480 <z_impl_k_thread_suspend+0xa8>
}
   2a478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2a47c:	f00a bc65 	b.w	34d4a <z_reschedule_unlocked>
}
   2a480:	bd70      	pop	{r4, r5, r6, pc}
   2a482:	bf00      	nop
   2a484:	20011004 	.word	0x20011004
   2a488:	000385b7 	.word	0x000385b7
   2a48c:	00038610 	.word	0x00038610
   2a490:	000381c3 	.word	0x000381c3
   2a494:	00038625 	.word	0x00038625
   2a498:	20010fdc 	.word	0x20010fdc
   2a49c:	20010fc0 	.word	0x20010fc0
   2a4a0:	000385e4 	.word	0x000385e4
   2a4a4:	000385fb 	.word	0x000385fb

0002a4a8 <unpend_thread_no_timeout>:
{
   2a4a8:	b510      	push	{r4, lr}
   2a4aa:	4604      	mov	r4, r0
   2a4ac:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2a4ae:	b958      	cbnz	r0, 2a4c8 <unpend_thread_no_timeout+0x20>
   2a4b0:	490a      	ldr	r1, [pc, #40]	; (2a4dc <unpend_thread_no_timeout+0x34>)
   2a4b2:	480b      	ldr	r0, [pc, #44]	; (2a4e0 <unpend_thread_no_timeout+0x38>)
   2a4b4:	f240 23c9 	movw	r3, #713	; 0x2c9
   2a4b8:	4a0a      	ldr	r2, [pc, #40]	; (2a4e4 <unpend_thread_no_timeout+0x3c>)
   2a4ba:	f004 fa4b 	bl	2e954 <assert_print>
   2a4be:	f240 21c9 	movw	r1, #713	; 0x2c9
   2a4c2:	4808      	ldr	r0, [pc, #32]	; (2a4e4 <unpend_thread_no_timeout+0x3c>)
   2a4c4:	f004 fa3f 	bl	2e946 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2a4c8:	4621      	mov	r1, r4
   2a4ca:	f7ff fd35 	bl	29f38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a4ce:	7b63      	ldrb	r3, [r4, #13]
   2a4d0:	f023 0302 	bic.w	r3, r3, #2
   2a4d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2a4d6:	2300      	movs	r3, #0
   2a4d8:	60a3      	str	r3, [r4, #8]
}
   2a4da:	bd10      	pop	{r4, pc}
   2a4dc:	00040bb4 	.word	0x00040bb4
   2a4e0:	000381c3 	.word	0x000381c3
   2a4e4:	000408ed 	.word	0x000408ed

0002a4e8 <z_unpend_thread>:
{
   2a4e8:	b538      	push	{r3, r4, r5, lr}
   2a4ea:	4604      	mov	r4, r0
	__asm__ volatile(
   2a4ec:	f04f 0320 	mov.w	r3, #32
   2a4f0:	f3ef 8511 	mrs	r5, BASEPRI
   2a4f4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a4fc:	4819      	ldr	r0, [pc, #100]	; (2a564 <z_unpend_thread+0x7c>)
   2a4fe:	f7fe f96b 	bl	287d8 <z_spin_lock_valid>
   2a502:	b968      	cbnz	r0, 2a520 <z_unpend_thread+0x38>
   2a504:	2394      	movs	r3, #148	; 0x94
   2a506:	4a18      	ldr	r2, [pc, #96]	; (2a568 <z_unpend_thread+0x80>)
   2a508:	4918      	ldr	r1, [pc, #96]	; (2a56c <z_unpend_thread+0x84>)
   2a50a:	4819      	ldr	r0, [pc, #100]	; (2a570 <z_unpend_thread+0x88>)
   2a50c:	f004 fa22 	bl	2e954 <assert_print>
   2a510:	4914      	ldr	r1, [pc, #80]	; (2a564 <z_unpend_thread+0x7c>)
   2a512:	4818      	ldr	r0, [pc, #96]	; (2a574 <z_unpend_thread+0x8c>)
   2a514:	f004 fa1e 	bl	2e954 <assert_print>
   2a518:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a51a:	4813      	ldr	r0, [pc, #76]	; (2a568 <z_unpend_thread+0x80>)
   2a51c:	f004 fa13 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a520:	4810      	ldr	r0, [pc, #64]	; (2a564 <z_unpend_thread+0x7c>)
   2a522:	f7fe f975 	bl	28810 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   2a526:	68a3      	ldr	r3, [r4, #8]
   2a528:	b113      	cbz	r3, 2a530 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   2a52a:	4620      	mov	r0, r4
   2a52c:	f7ff ffbc 	bl	2a4a8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a530:	480c      	ldr	r0, [pc, #48]	; (2a564 <z_unpend_thread+0x7c>)
   2a532:	f7fe f95f 	bl	287f4 <z_spin_unlock_valid>
   2a536:	b958      	cbnz	r0, 2a550 <z_unpend_thread+0x68>
   2a538:	23c2      	movs	r3, #194	; 0xc2
   2a53a:	4a0b      	ldr	r2, [pc, #44]	; (2a568 <z_unpend_thread+0x80>)
   2a53c:	490e      	ldr	r1, [pc, #56]	; (2a578 <z_unpend_thread+0x90>)
   2a53e:	480c      	ldr	r0, [pc, #48]	; (2a570 <z_unpend_thread+0x88>)
   2a540:	f004 fa08 	bl	2e954 <assert_print>
   2a544:	4907      	ldr	r1, [pc, #28]	; (2a564 <z_unpend_thread+0x7c>)
   2a546:	480d      	ldr	r0, [pc, #52]	; (2a57c <z_unpend_thread+0x94>)
   2a548:	f004 fa04 	bl	2e954 <assert_print>
   2a54c:	21c2      	movs	r1, #194	; 0xc2
   2a54e:	e7e4      	b.n	2a51a <z_unpend_thread+0x32>
	__asm__ volatile(
   2a550:	f385 8811 	msr	BASEPRI, r5
   2a554:	f3bf 8f6f 	isb	sy
   2a558:	f104 0018 	add.w	r0, r4, #24
}
   2a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a560:	f000 bcd6 	b.w	2af10 <z_abort_timeout>
   2a564:	20011004 	.word	0x20011004
   2a568:	000385b7 	.word	0x000385b7
   2a56c:	00038610 	.word	0x00038610
   2a570:	000381c3 	.word	0x000381c3
   2a574:	00038625 	.word	0x00038625
   2a578:	000385e4 	.word	0x000385e4
   2a57c:	000385fb 	.word	0x000385fb

0002a580 <z_sched_wake_thread>:
{
   2a580:	b570      	push	{r4, r5, r6, lr}
   2a582:	4604      	mov	r4, r0
   2a584:	460d      	mov	r5, r1
	__asm__ volatile(
   2a586:	f04f 0320 	mov.w	r3, #32
   2a58a:	f3ef 8611 	mrs	r6, BASEPRI
   2a58e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a596:	481f      	ldr	r0, [pc, #124]	; (2a614 <z_sched_wake_thread+0x94>)
   2a598:	f7fe f91e 	bl	287d8 <z_spin_lock_valid>
   2a59c:	b968      	cbnz	r0, 2a5ba <z_sched_wake_thread+0x3a>
   2a59e:	2394      	movs	r3, #148	; 0x94
   2a5a0:	4a1d      	ldr	r2, [pc, #116]	; (2a618 <z_sched_wake_thread+0x98>)
   2a5a2:	491e      	ldr	r1, [pc, #120]	; (2a61c <z_sched_wake_thread+0x9c>)
   2a5a4:	481e      	ldr	r0, [pc, #120]	; (2a620 <z_sched_wake_thread+0xa0>)
   2a5a6:	f004 f9d5 	bl	2e954 <assert_print>
   2a5aa:	491a      	ldr	r1, [pc, #104]	; (2a614 <z_sched_wake_thread+0x94>)
   2a5ac:	481d      	ldr	r0, [pc, #116]	; (2a624 <z_sched_wake_thread+0xa4>)
   2a5ae:	f004 f9d1 	bl	2e954 <assert_print>
   2a5b2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a5b4:	4818      	ldr	r0, [pc, #96]	; (2a618 <z_sched_wake_thread+0x98>)
   2a5b6:	f004 f9c6 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a5ba:	4816      	ldr	r0, [pc, #88]	; (2a614 <z_sched_wake_thread+0x94>)
   2a5bc:	f7fe f928 	bl	28810 <z_spin_lock_set_owner>
		if (!killed) {
   2a5c0:	7b63      	ldrb	r3, [r4, #13]
   2a5c2:	f013 0f28 	tst.w	r3, #40	; 0x28
   2a5c6:	d10c      	bne.n	2a5e2 <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   2a5c8:	68a3      	ldr	r3, [r4, #8]
   2a5ca:	b113      	cbz	r3, 2a5d2 <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   2a5cc:	4620      	mov	r0, r4
   2a5ce:	f7ff ff6b 	bl	2a4a8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a5d2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2a5d4:	b9ad      	cbnz	r5, 2a602 <z_sched_wake_thread+0x82>
   2a5d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   2a5da:	4620      	mov	r0, r4
   2a5dc:	7363      	strb	r3, [r4, #13]
   2a5de:	f7ff fa5f 	bl	29aa0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a5e2:	480c      	ldr	r0, [pc, #48]	; (2a614 <z_sched_wake_thread+0x94>)
   2a5e4:	f7fe f906 	bl	287f4 <z_spin_unlock_valid>
   2a5e8:	b970      	cbnz	r0, 2a608 <z_sched_wake_thread+0x88>
   2a5ea:	23c2      	movs	r3, #194	; 0xc2
   2a5ec:	4a0a      	ldr	r2, [pc, #40]	; (2a618 <z_sched_wake_thread+0x98>)
   2a5ee:	490e      	ldr	r1, [pc, #56]	; (2a628 <z_sched_wake_thread+0xa8>)
   2a5f0:	480b      	ldr	r0, [pc, #44]	; (2a620 <z_sched_wake_thread+0xa0>)
   2a5f2:	f004 f9af 	bl	2e954 <assert_print>
   2a5f6:	4907      	ldr	r1, [pc, #28]	; (2a614 <z_sched_wake_thread+0x94>)
   2a5f8:	480c      	ldr	r0, [pc, #48]	; (2a62c <z_sched_wake_thread+0xac>)
   2a5fa:	f004 f9ab 	bl	2e954 <assert_print>
   2a5fe:	21c2      	movs	r1, #194	; 0xc2
   2a600:	e7d8      	b.n	2a5b4 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2a602:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2a606:	e7e8      	b.n	2a5da <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   2a608:	f386 8811 	msr	BASEPRI, r6
   2a60c:	f3bf 8f6f 	isb	sy
}
   2a610:	bd70      	pop	{r4, r5, r6, pc}
   2a612:	bf00      	nop
   2a614:	20011004 	.word	0x20011004
   2a618:	000385b7 	.word	0x000385b7
   2a61c:	00038610 	.word	0x00038610
   2a620:	000381c3 	.word	0x000381c3
   2a624:	00038625 	.word	0x00038625
   2a628:	000385e4 	.word	0x000385e4
   2a62c:	000385fb 	.word	0x000385fb

0002a630 <z_unpend1_no_timeout>:
{
   2a630:	b570      	push	{r4, r5, r6, lr}
   2a632:	4605      	mov	r5, r0
	__asm__ volatile(
   2a634:	f04f 0320 	mov.w	r3, #32
   2a638:	f3ef 8611 	mrs	r6, BASEPRI
   2a63c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a644:	4819      	ldr	r0, [pc, #100]	; (2a6ac <z_unpend1_no_timeout+0x7c>)
   2a646:	f7fe f8c7 	bl	287d8 <z_spin_lock_valid>
   2a64a:	b968      	cbnz	r0, 2a668 <z_unpend1_no_timeout+0x38>
   2a64c:	2394      	movs	r3, #148	; 0x94
   2a64e:	4a18      	ldr	r2, [pc, #96]	; (2a6b0 <z_unpend1_no_timeout+0x80>)
   2a650:	4918      	ldr	r1, [pc, #96]	; (2a6b4 <z_unpend1_no_timeout+0x84>)
   2a652:	4819      	ldr	r0, [pc, #100]	; (2a6b8 <z_unpend1_no_timeout+0x88>)
   2a654:	f004 f97e 	bl	2e954 <assert_print>
   2a658:	4914      	ldr	r1, [pc, #80]	; (2a6ac <z_unpend1_no_timeout+0x7c>)
   2a65a:	4818      	ldr	r0, [pc, #96]	; (2a6bc <z_unpend1_no_timeout+0x8c>)
   2a65c:	f004 f97a 	bl	2e954 <assert_print>
   2a660:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a662:	4813      	ldr	r0, [pc, #76]	; (2a6b0 <z_unpend1_no_timeout+0x80>)
   2a664:	f004 f96f 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a668:	4810      	ldr	r0, [pc, #64]	; (2a6ac <z_unpend1_no_timeout+0x7c>)
   2a66a:	f7fe f8d1 	bl	28810 <z_spin_lock_set_owner>
	return list->head == list;
   2a66e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a670:	42a5      	cmp	r5, r4
   2a672:	d013      	beq.n	2a69c <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   2a674:	b114      	cbz	r4, 2a67c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2a676:	4620      	mov	r0, r4
   2a678:	f7ff ff16 	bl	2a4a8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a67c:	480b      	ldr	r0, [pc, #44]	; (2a6ac <z_unpend1_no_timeout+0x7c>)
   2a67e:	f7fe f8b9 	bl	287f4 <z_spin_unlock_valid>
   2a682:	b968      	cbnz	r0, 2a6a0 <z_unpend1_no_timeout+0x70>
   2a684:	23c2      	movs	r3, #194	; 0xc2
   2a686:	4a0a      	ldr	r2, [pc, #40]	; (2a6b0 <z_unpend1_no_timeout+0x80>)
   2a688:	490d      	ldr	r1, [pc, #52]	; (2a6c0 <z_unpend1_no_timeout+0x90>)
   2a68a:	480b      	ldr	r0, [pc, #44]	; (2a6b8 <z_unpend1_no_timeout+0x88>)
   2a68c:	f004 f962 	bl	2e954 <assert_print>
   2a690:	4906      	ldr	r1, [pc, #24]	; (2a6ac <z_unpend1_no_timeout+0x7c>)
   2a692:	480c      	ldr	r0, [pc, #48]	; (2a6c4 <z_unpend1_no_timeout+0x94>)
   2a694:	f004 f95e 	bl	2e954 <assert_print>
   2a698:	21c2      	movs	r1, #194	; 0xc2
   2a69a:	e7e2      	b.n	2a662 <z_unpend1_no_timeout+0x32>
   2a69c:	2400      	movs	r4, #0
   2a69e:	e7ed      	b.n	2a67c <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   2a6a0:	f386 8811 	msr	BASEPRI, r6
   2a6a4:	f3bf 8f6f 	isb	sy
}
   2a6a8:	4620      	mov	r0, r4
   2a6aa:	bd70      	pop	{r4, r5, r6, pc}
   2a6ac:	20011004 	.word	0x20011004
   2a6b0:	000385b7 	.word	0x000385b7
   2a6b4:	00038610 	.word	0x00038610
   2a6b8:	000381c3 	.word	0x000381c3
   2a6bc:	00038625 	.word	0x00038625
   2a6c0:	000385e4 	.word	0x000385e4
   2a6c4:	000385fb 	.word	0x000385fb

0002a6c8 <z_unpend_first_thread>:
{
   2a6c8:	b570      	push	{r4, r5, r6, lr}
   2a6ca:	4605      	mov	r5, r0
	__asm__ volatile(
   2a6cc:	f04f 0320 	mov.w	r3, #32
   2a6d0:	f3ef 8611 	mrs	r6, BASEPRI
   2a6d4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a6d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a6dc:	481b      	ldr	r0, [pc, #108]	; (2a74c <z_unpend_first_thread+0x84>)
   2a6de:	f7fe f87b 	bl	287d8 <z_spin_lock_valid>
   2a6e2:	b968      	cbnz	r0, 2a700 <z_unpend_first_thread+0x38>
   2a6e4:	2394      	movs	r3, #148	; 0x94
   2a6e6:	4a1a      	ldr	r2, [pc, #104]	; (2a750 <z_unpend_first_thread+0x88>)
   2a6e8:	491a      	ldr	r1, [pc, #104]	; (2a754 <z_unpend_first_thread+0x8c>)
   2a6ea:	481b      	ldr	r0, [pc, #108]	; (2a758 <z_unpend_first_thread+0x90>)
   2a6ec:	f004 f932 	bl	2e954 <assert_print>
   2a6f0:	4916      	ldr	r1, [pc, #88]	; (2a74c <z_unpend_first_thread+0x84>)
   2a6f2:	481a      	ldr	r0, [pc, #104]	; (2a75c <z_unpend_first_thread+0x94>)
   2a6f4:	f004 f92e 	bl	2e954 <assert_print>
   2a6f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a6fa:	4815      	ldr	r0, [pc, #84]	; (2a750 <z_unpend_first_thread+0x88>)
   2a6fc:	f004 f923 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a700:	4812      	ldr	r0, [pc, #72]	; (2a74c <z_unpend_first_thread+0x84>)
   2a702:	f7fe f885 	bl	28810 <z_spin_lock_set_owner>
	return list->head == list;
   2a706:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a708:	42a5      	cmp	r5, r4
   2a70a:	d017      	beq.n	2a73c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   2a70c:	b134      	cbz	r4, 2a71c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2a70e:	4620      	mov	r0, r4
   2a710:	f7ff feca 	bl	2a4a8 <unpend_thread_no_timeout>
   2a714:	f104 0018 	add.w	r0, r4, #24
   2a718:	f000 fbfa 	bl	2af10 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a71c:	480b      	ldr	r0, [pc, #44]	; (2a74c <z_unpend_first_thread+0x84>)
   2a71e:	f7fe f869 	bl	287f4 <z_spin_unlock_valid>
   2a722:	b968      	cbnz	r0, 2a740 <z_unpend_first_thread+0x78>
   2a724:	23c2      	movs	r3, #194	; 0xc2
   2a726:	4a0a      	ldr	r2, [pc, #40]	; (2a750 <z_unpend_first_thread+0x88>)
   2a728:	490d      	ldr	r1, [pc, #52]	; (2a760 <z_unpend_first_thread+0x98>)
   2a72a:	480b      	ldr	r0, [pc, #44]	; (2a758 <z_unpend_first_thread+0x90>)
   2a72c:	f004 f912 	bl	2e954 <assert_print>
   2a730:	4906      	ldr	r1, [pc, #24]	; (2a74c <z_unpend_first_thread+0x84>)
   2a732:	480c      	ldr	r0, [pc, #48]	; (2a764 <z_unpend_first_thread+0x9c>)
   2a734:	f004 f90e 	bl	2e954 <assert_print>
   2a738:	21c2      	movs	r1, #194	; 0xc2
   2a73a:	e7de      	b.n	2a6fa <z_unpend_first_thread+0x32>
   2a73c:	2400      	movs	r4, #0
   2a73e:	e7ed      	b.n	2a71c <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2a740:	f386 8811 	msr	BASEPRI, r6
   2a744:	f3bf 8f6f 	isb	sy
}
   2a748:	4620      	mov	r0, r4
   2a74a:	bd70      	pop	{r4, r5, r6, pc}
   2a74c:	20011004 	.word	0x20011004
   2a750:	000385b7 	.word	0x000385b7
   2a754:	00038610 	.word	0x00038610
   2a758:	000381c3 	.word	0x000381c3
   2a75c:	00038625 	.word	0x00038625
   2a760:	000385e4 	.word	0x000385e4
   2a764:	000385fb 	.word	0x000385fb

0002a768 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2a768:	4b02      	ldr	r3, [pc, #8]	; (2a774 <z_sched_init+0xc>)
   2a76a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   2a76e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   2a772:	4770      	bx	lr
   2a774:	20010fc0 	.word	0x20010fc0

0002a778 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a77a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2a77e:	b16b      	cbz	r3, 2a79c <z_impl_k_yield+0x24>
   2a780:	493c      	ldr	r1, [pc, #240]	; (2a874 <z_impl_k_yield+0xfc>)
   2a782:	f240 5371 	movw	r3, #1393	; 0x571
   2a786:	4a3c      	ldr	r2, [pc, #240]	; (2a878 <z_impl_k_yield+0x100>)
   2a788:	483c      	ldr	r0, [pc, #240]	; (2a87c <z_impl_k_yield+0x104>)
   2a78a:	f004 f8e3 	bl	2e954 <assert_print>
   2a78e:	483c      	ldr	r0, [pc, #240]	; (2a880 <z_impl_k_yield+0x108>)
   2a790:	f004 f8e0 	bl	2e954 <assert_print>
   2a794:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a798:	4837      	ldr	r0, [pc, #220]	; (2a878 <z_impl_k_yield+0x100>)
   2a79a:	e017      	b.n	2a7cc <z_impl_k_yield+0x54>
	__asm__ volatile(
   2a79c:	f04f 0320 	mov.w	r3, #32
   2a7a0:	f3ef 8611 	mrs	r6, BASEPRI
   2a7a4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a7a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a7ac:	4835      	ldr	r0, [pc, #212]	; (2a884 <z_impl_k_yield+0x10c>)
   2a7ae:	f7fe f813 	bl	287d8 <z_spin_lock_valid>
   2a7b2:	b968      	cbnz	r0, 2a7d0 <z_impl_k_yield+0x58>
   2a7b4:	2394      	movs	r3, #148	; 0x94
   2a7b6:	4a34      	ldr	r2, [pc, #208]	; (2a888 <z_impl_k_yield+0x110>)
   2a7b8:	4934      	ldr	r1, [pc, #208]	; (2a88c <z_impl_k_yield+0x114>)
   2a7ba:	4830      	ldr	r0, [pc, #192]	; (2a87c <z_impl_k_yield+0x104>)
   2a7bc:	f004 f8ca 	bl	2e954 <assert_print>
   2a7c0:	4930      	ldr	r1, [pc, #192]	; (2a884 <z_impl_k_yield+0x10c>)
   2a7c2:	4833      	ldr	r0, [pc, #204]	; (2a890 <z_impl_k_yield+0x118>)
   2a7c4:	f004 f8c6 	bl	2e954 <assert_print>
   2a7c8:	2194      	movs	r1, #148	; 0x94
   2a7ca:	482f      	ldr	r0, [pc, #188]	; (2a888 <z_impl_k_yield+0x110>)
   2a7cc:	f004 f8bb 	bl	2e946 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2a7d0:	4c30      	ldr	r4, [pc, #192]	; (2a894 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2a7d2:	482c      	ldr	r0, [pc, #176]	; (2a884 <z_impl_k_yield+0x10c>)
   2a7d4:	f7fe f81c 	bl	28810 <z_spin_lock_set_owner>
   2a7d8:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   2a7da:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a7de:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a7e0:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2a7e6:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a7e8:	f7ff fba6 	bl	29f38 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   2a7ec:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2a7ee:	7b5a      	ldrb	r2, [r3, #13]
   2a7f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2a7f4:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a7f6:	4a28      	ldr	r2, [pc, #160]	; (2a898 <z_impl_k_yield+0x120>)
   2a7f8:	4293      	cmp	r3, r2
   2a7fa:	d107      	bne.n	2a80c <z_impl_k_yield+0x94>
   2a7fc:	4927      	ldr	r1, [pc, #156]	; (2a89c <z_impl_k_yield+0x124>)
   2a7fe:	23bc      	movs	r3, #188	; 0xbc
   2a800:	4a1d      	ldr	r2, [pc, #116]	; (2a878 <z_impl_k_yield+0x100>)
   2a802:	481e      	ldr	r0, [pc, #120]	; (2a87c <z_impl_k_yield+0x104>)
   2a804:	f004 f8a6 	bl	2e954 <assert_print>
   2a808:	21bc      	movs	r1, #188	; 0xbc
   2a80a:	e7c5      	b.n	2a798 <z_impl_k_yield+0x20>
	return list->head == list;
   2a80c:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   2a80e:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a810:	42aa      	cmp	r2, r5
   2a812:	bf08      	it	eq
   2a814:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a816:	b922      	cbnz	r2, 2a822 <z_impl_k_yield+0xaa>
	node->prev = tail;
   2a818:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   2a81c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2a81e:	6223      	str	r3, [r4, #32]
}
   2a820:	e00c      	b.n	2a83c <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   2a822:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2a826:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2a82a:	42b8      	cmp	r0, r7
   2a82c:	d019      	beq.n	2a862 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a82e:	4287      	cmp	r7, r0
   2a830:	dd17      	ble.n	2a862 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   2a832:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2a834:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2a838:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2a83a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2a83c:	2001      	movs	r0, #1
   2a83e:	f7ff f8fb 	bl	29a38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a842:	4810      	ldr	r0, [pc, #64]	; (2a884 <z_impl_k_yield+0x10c>)
   2a844:	f7fd ffd6 	bl	287f4 <z_spin_unlock_valid>
   2a848:	b978      	cbnz	r0, 2a86a <z_impl_k_yield+0xf2>
   2a84a:	23e1      	movs	r3, #225	; 0xe1
   2a84c:	4a0e      	ldr	r2, [pc, #56]	; (2a888 <z_impl_k_yield+0x110>)
   2a84e:	4914      	ldr	r1, [pc, #80]	; (2a8a0 <z_impl_k_yield+0x128>)
   2a850:	480a      	ldr	r0, [pc, #40]	; (2a87c <z_impl_k_yield+0x104>)
   2a852:	f004 f87f 	bl	2e954 <assert_print>
   2a856:	490b      	ldr	r1, [pc, #44]	; (2a884 <z_impl_k_yield+0x10c>)
   2a858:	4812      	ldr	r0, [pc, #72]	; (2a8a4 <z_impl_k_yield+0x12c>)
   2a85a:	f004 f87b 	bl	2e954 <assert_print>
   2a85e:	21e1      	movs	r1, #225	; 0xe1
   2a860:	e7b3      	b.n	2a7ca <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   2a862:	428a      	cmp	r2, r1
   2a864:	d0d8      	beq.n	2a818 <z_impl_k_yield+0xa0>
   2a866:	6812      	ldr	r2, [r2, #0]
   2a868:	e7d5      	b.n	2a816 <z_impl_k_yield+0x9e>
   2a86a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   2a86c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a870:	f7e5 be1a 	b.w	104a8 <arch_swap>
   2a874:	00040680 	.word	0x00040680
   2a878:	000408ed 	.word	0x000408ed
   2a87c:	000381c3 	.word	0x000381c3
   2a880:	00038b19 	.word	0x00038b19
   2a884:	20011004 	.word	0x20011004
   2a888:	000385b7 	.word	0x000385b7
   2a88c:	00038610 	.word	0x00038610
   2a890:	00038625 	.word	0x00038625
   2a894:	20010fc0 	.word	0x20010fc0
   2a898:	2000f630 	.word	0x2000f630
   2a89c:	00040acf 	.word	0x00040acf
   2a8a0:	000385e4 	.word	0x000385e4
   2a8a4:	000385fb 	.word	0x000385fb

0002a8a8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8ac:	4605      	mov	r5, r0
   2a8ae:	460e      	mov	r6, r1
   2a8b0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2a8b4:	b16b      	cbz	r3, 2a8d2 <z_tick_sleep+0x2a>
   2a8b6:	493f      	ldr	r1, [pc, #252]	; (2a9b4 <z_tick_sleep+0x10c>)
   2a8b8:	f240 538d 	movw	r3, #1421	; 0x58d
   2a8bc:	4a3e      	ldr	r2, [pc, #248]	; (2a9b8 <z_tick_sleep+0x110>)
   2a8be:	483f      	ldr	r0, [pc, #252]	; (2a9bc <z_tick_sleep+0x114>)
   2a8c0:	f004 f848 	bl	2e954 <assert_print>
   2a8c4:	483e      	ldr	r0, [pc, #248]	; (2a9c0 <z_tick_sleep+0x118>)
   2a8c6:	f004 f845 	bl	2e954 <assert_print>
   2a8ca:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2a8ce:	483a      	ldr	r0, [pc, #232]	; (2a9b8 <z_tick_sleep+0x110>)
   2a8d0:	e025      	b.n	2a91e <z_tick_sleep+0x76>
	if (ticks == 0) {
   2a8d2:	ea50 0301 	orrs.w	r3, r0, r1
   2a8d6:	d103      	bne.n	2a8e0 <z_tick_sleep+0x38>
	z_impl_k_yield();
   2a8d8:	f7ff ff4e 	bl	2a778 <z_impl_k_yield>
		return 0;
   2a8dc:	2000      	movs	r0, #0
   2a8de:	e066      	b.n	2a9ae <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   2a8e0:	1c82      	adds	r2, r0, #2
   2a8e2:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2a8e6:	db1c      	blt.n	2a922 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2a8e8:	f00a fa4d 	bl	34d86 <sys_clock_tick_get_32>
   2a8ec:	182c      	adds	r4, r5, r0
   2a8ee:	f04f 0320 	mov.w	r3, #32
   2a8f2:	f3ef 8811 	mrs	r8, BASEPRI
   2a8f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a8fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a8fe:	4831      	ldr	r0, [pc, #196]	; (2a9c4 <z_tick_sleep+0x11c>)
   2a900:	f7fd ff6a 	bl	287d8 <z_spin_lock_valid>
   2a904:	b988      	cbnz	r0, 2a92a <z_tick_sleep+0x82>
   2a906:	2394      	movs	r3, #148	; 0x94
   2a908:	4a2f      	ldr	r2, [pc, #188]	; (2a9c8 <z_tick_sleep+0x120>)
   2a90a:	4930      	ldr	r1, [pc, #192]	; (2a9cc <z_tick_sleep+0x124>)
   2a90c:	482b      	ldr	r0, [pc, #172]	; (2a9bc <z_tick_sleep+0x114>)
   2a90e:	f004 f821 	bl	2e954 <assert_print>
   2a912:	492c      	ldr	r1, [pc, #176]	; (2a9c4 <z_tick_sleep+0x11c>)
   2a914:	482e      	ldr	r0, [pc, #184]	; (2a9d0 <z_tick_sleep+0x128>)
   2a916:	f004 f81d 	bl	2e954 <assert_print>
   2a91a:	2194      	movs	r1, #148	; 0x94
   2a91c:	482a      	ldr	r0, [pc, #168]	; (2a9c8 <z_tick_sleep+0x120>)
   2a91e:	f004 f812 	bl	2e946 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2a922:	f06f 0401 	mvn.w	r4, #1
   2a926:	1a24      	subs	r4, r4, r0
   2a928:	e7e1      	b.n	2a8ee <z_tick_sleep+0x46>
	pending_current = _current;
   2a92a:	4f2a      	ldr	r7, [pc, #168]	; (2a9d4 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   2a92c:	4825      	ldr	r0, [pc, #148]	; (2a9c4 <z_tick_sleep+0x11c>)
   2a92e:	f7fd ff6f 	bl	28810 <z_spin_lock_set_owner>
   2a932:	68b8      	ldr	r0, [r7, #8]
   2a934:	4b28      	ldr	r3, [pc, #160]	; (2a9d8 <z_tick_sleep+0x130>)
   2a936:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2a938:	f7ff fbd4 	bl	2a0e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2a93c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2a93e:	462a      	mov	r2, r5
   2a940:	4633      	mov	r3, r6
   2a942:	3018      	adds	r0, #24
   2a944:	4925      	ldr	r1, [pc, #148]	; (2a9dc <z_tick_sleep+0x134>)
   2a946:	f000 fa23 	bl	2ad90 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2a94a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a94c:	481d      	ldr	r0, [pc, #116]	; (2a9c4 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2a94e:	7b53      	ldrb	r3, [r2, #13]
   2a950:	f043 0310 	orr.w	r3, r3, #16
   2a954:	7353      	strb	r3, [r2, #13]
   2a956:	f7fd ff4d 	bl	287f4 <z_spin_unlock_valid>
   2a95a:	b958      	cbnz	r0, 2a974 <z_tick_sleep+0xcc>
   2a95c:	23e1      	movs	r3, #225	; 0xe1
   2a95e:	4a1a      	ldr	r2, [pc, #104]	; (2a9c8 <z_tick_sleep+0x120>)
   2a960:	491f      	ldr	r1, [pc, #124]	; (2a9e0 <z_tick_sleep+0x138>)
   2a962:	4816      	ldr	r0, [pc, #88]	; (2a9bc <z_tick_sleep+0x114>)
   2a964:	f003 fff6 	bl	2e954 <assert_print>
   2a968:	4916      	ldr	r1, [pc, #88]	; (2a9c4 <z_tick_sleep+0x11c>)
   2a96a:	481e      	ldr	r0, [pc, #120]	; (2a9e4 <z_tick_sleep+0x13c>)
   2a96c:	f003 fff2 	bl	2e954 <assert_print>
   2a970:	21e1      	movs	r1, #225	; 0xe1
   2a972:	e7d3      	b.n	2a91c <z_tick_sleep+0x74>
   2a974:	4640      	mov	r0, r8
   2a976:	f7e5 fd97 	bl	104a8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2a97a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2a97c:	7b5b      	ldrb	r3, [r3, #13]
   2a97e:	06db      	lsls	r3, r3, #27
   2a980:	d50c      	bpl.n	2a99c <z_tick_sleep+0xf4>
   2a982:	4919      	ldr	r1, [pc, #100]	; (2a9e8 <z_tick_sleep+0x140>)
   2a984:	f240 53a9 	movw	r3, #1449	; 0x5a9
   2a988:	4a0b      	ldr	r2, [pc, #44]	; (2a9b8 <z_tick_sleep+0x110>)
   2a98a:	480c      	ldr	r0, [pc, #48]	; (2a9bc <z_tick_sleep+0x114>)
   2a98c:	f003 ffe2 	bl	2e954 <assert_print>
   2a990:	480b      	ldr	r0, [pc, #44]	; (2a9c0 <z_tick_sleep+0x118>)
   2a992:	f003 ffdf 	bl	2e954 <assert_print>
   2a996:	f240 51a9 	movw	r1, #1449	; 0x5a9
   2a99a:	e798      	b.n	2a8ce <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2a99c:	f00a f9f3 	bl	34d86 <sys_clock_tick_get_32>
   2a9a0:	1a20      	subs	r0, r4, r0
   2a9a2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2a9a6:	2801      	cmp	r0, #1
   2a9a8:	f173 0300 	sbcs.w	r3, r3, #0
   2a9ac:	db96      	blt.n	2a8dc <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a9b2:	bf00      	nop
   2a9b4:	00040680 	.word	0x00040680
   2a9b8:	000408ed 	.word	0x000408ed
   2a9bc:	000381c3 	.word	0x000381c3
   2a9c0:	00038b19 	.word	0x00038b19
   2a9c4:	20011004 	.word	0x20011004
   2a9c8:	000385b7 	.word	0x000385b7
   2a9cc:	00038610 	.word	0x00038610
   2a9d0:	00038625 	.word	0x00038625
   2a9d4:	20010fc0 	.word	0x20010fc0
   2a9d8:	20010ff8 	.word	0x20010ff8
   2a9dc:	00034d5f 	.word	0x00034d5f
   2a9e0:	000385e4 	.word	0x000385e4
   2a9e4:	000385fb 	.word	0x000385fb
   2a9e8:	00040bcb 	.word	0x00040bcb

0002a9ec <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2a9ec:	b508      	push	{r3, lr}
   2a9ee:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2a9f2:	b173      	cbz	r3, 2aa12 <z_impl_k_sleep+0x26>
   2a9f4:	4912      	ldr	r1, [pc, #72]	; (2aa40 <z_impl_k_sleep+0x54>)
   2a9f6:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   2a9fa:	4a12      	ldr	r2, [pc, #72]	; (2aa44 <z_impl_k_sleep+0x58>)
   2a9fc:	4812      	ldr	r0, [pc, #72]	; (2aa48 <z_impl_k_sleep+0x5c>)
   2a9fe:	f003 ffa9 	bl	2e954 <assert_print>
   2aa02:	4812      	ldr	r0, [pc, #72]	; (2aa4c <z_impl_k_sleep+0x60>)
   2aa04:	f003 ffa6 	bl	2e954 <assert_print>
   2aa08:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   2aa0c:	480d      	ldr	r0, [pc, #52]	; (2aa44 <z_impl_k_sleep+0x58>)
   2aa0e:	f003 ff9a 	bl	2e946 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2aa12:	f1b1 3fff 	cmp.w	r1, #4294967295
   2aa16:	bf08      	it	eq
   2aa18:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2aa1c:	d106      	bne.n	2aa2c <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   2aa1e:	4b0c      	ldr	r3, [pc, #48]	; (2aa50 <z_impl_k_sleep+0x64>)
   2aa20:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2aa22:	f7ff fcd9 	bl	2a3d8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2aa26:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2aa2a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2aa2c:	f7ff ff3c 	bl	2a8a8 <z_tick_sleep>
   2aa30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2aa34:	fb80 0303 	smull	r0, r3, r0, r3
   2aa38:	0bc0      	lsrs	r0, r0, #15
   2aa3a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2aa3e:	e7f4      	b.n	2aa2a <z_impl_k_sleep+0x3e>
   2aa40:	00040680 	.word	0x00040680
   2aa44:	000408ed 	.word	0x000408ed
   2aa48:	000381c3 	.word	0x000381c3
   2aa4c:	00038b19 	.word	0x00038b19
   2aa50:	20010fc0 	.word	0x20010fc0

0002aa54 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2aa54:	4b01      	ldr	r3, [pc, #4]	; (2aa5c <z_impl_z_current_get+0x8>)
   2aa56:	6898      	ldr	r0, [r3, #8]
   2aa58:	4770      	bx	lr
   2aa5a:	bf00      	nop
   2aa5c:	20010fc0 	.word	0x20010fc0

0002aa60 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa64:	4604      	mov	r4, r0
   2aa66:	f04f 0320 	mov.w	r3, #32
   2aa6a:	f3ef 8611 	mrs	r6, BASEPRI
   2aa6e:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aa76:	4851      	ldr	r0, [pc, #324]	; (2abbc <z_thread_abort+0x15c>)
   2aa78:	f7fd feae 	bl	287d8 <z_spin_lock_valid>
   2aa7c:	b968      	cbnz	r0, 2aa9a <z_thread_abort+0x3a>
   2aa7e:	2394      	movs	r3, #148	; 0x94
   2aa80:	4a4f      	ldr	r2, [pc, #316]	; (2abc0 <z_thread_abort+0x160>)
   2aa82:	4950      	ldr	r1, [pc, #320]	; (2abc4 <z_thread_abort+0x164>)
   2aa84:	4850      	ldr	r0, [pc, #320]	; (2abc8 <z_thread_abort+0x168>)
   2aa86:	f003 ff65 	bl	2e954 <assert_print>
   2aa8a:	494c      	ldr	r1, [pc, #304]	; (2abbc <z_thread_abort+0x15c>)
   2aa8c:	484f      	ldr	r0, [pc, #316]	; (2abcc <z_thread_abort+0x16c>)
   2aa8e:	f003 ff61 	bl	2e954 <assert_print>
   2aa92:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aa94:	484a      	ldr	r0, [pc, #296]	; (2abc0 <z_thread_abort+0x160>)
   2aa96:	f003 ff56 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2aa9a:	4848      	ldr	r0, [pc, #288]	; (2abbc <z_thread_abort+0x15c>)
   2aa9c:	f7fd feb8 	bl	28810 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2aaa0:	7b23      	ldrb	r3, [r4, #12]
   2aaa2:	07d9      	lsls	r1, r3, #31
   2aaa4:	d522      	bpl.n	2aaec <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aaa6:	4845      	ldr	r0, [pc, #276]	; (2abbc <z_thread_abort+0x15c>)
   2aaa8:	f7fd fea4 	bl	287f4 <z_spin_unlock_valid>
   2aaac:	b958      	cbnz	r0, 2aac6 <z_thread_abort+0x66>
   2aaae:	23c2      	movs	r3, #194	; 0xc2
   2aab0:	4a43      	ldr	r2, [pc, #268]	; (2abc0 <z_thread_abort+0x160>)
   2aab2:	4947      	ldr	r1, [pc, #284]	; (2abd0 <z_thread_abort+0x170>)
   2aab4:	4844      	ldr	r0, [pc, #272]	; (2abc8 <z_thread_abort+0x168>)
   2aab6:	f003 ff4d 	bl	2e954 <assert_print>
   2aaba:	4940      	ldr	r1, [pc, #256]	; (2abbc <z_thread_abort+0x15c>)
   2aabc:	4845      	ldr	r0, [pc, #276]	; (2abd4 <z_thread_abort+0x174>)
   2aabe:	f003 ff49 	bl	2e954 <assert_print>
   2aac2:	21c2      	movs	r1, #194	; 0xc2
   2aac4:	e7e6      	b.n	2aa94 <z_thread_abort+0x34>
	__asm__ volatile(
   2aac6:	f386 8811 	msr	BASEPRI, r6
   2aaca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2aace:	f240 63ca 	movw	r3, #1738	; 0x6ca
   2aad2:	4a41      	ldr	r2, [pc, #260]	; (2abd8 <z_thread_abort+0x178>)
   2aad4:	4941      	ldr	r1, [pc, #260]	; (2abdc <z_thread_abort+0x17c>)
   2aad6:	483c      	ldr	r0, [pc, #240]	; (2abc8 <z_thread_abort+0x168>)
   2aad8:	f003 ff3c 	bl	2e954 <assert_print>
   2aadc:	4621      	mov	r1, r4
   2aade:	4840      	ldr	r0, [pc, #256]	; (2abe0 <z_thread_abort+0x180>)
   2aae0:	f003 ff38 	bl	2e954 <assert_print>
   2aae4:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   2aae8:	483b      	ldr	r0, [pc, #236]	; (2abd8 <z_thread_abort+0x178>)
   2aaea:	e7d4      	b.n	2aa96 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2aaec:	7b63      	ldrb	r3, [r4, #13]
   2aaee:	071a      	lsls	r2, r3, #28
   2aaf0:	d50a      	bpl.n	2ab08 <z_thread_abort+0xa8>
   2aaf2:	4832      	ldr	r0, [pc, #200]	; (2abbc <z_thread_abort+0x15c>)
   2aaf4:	f7fd fe7e 	bl	287f4 <z_spin_unlock_valid>
   2aaf8:	2800      	cmp	r0, #0
   2aafa:	d0d8      	beq.n	2aaae <z_thread_abort+0x4e>
   2aafc:	f386 8811 	msr	BASEPRI, r6
   2ab00:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ab08:	f023 0220 	bic.w	r2, r3, #32
   2ab0c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2ab10:	09d2      	lsrs	r2, r2, #7
   2ab12:	d12c      	bne.n	2ab6e <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ab14:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2ab16:	68a3      	ldr	r3, [r4, #8]
   2ab18:	b113      	cbz	r3, 2ab20 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   2ab1a:	4620      	mov	r0, r4
   2ab1c:	f7ff fcc4 	bl	2a4a8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2ab20:	f104 0018 	add.w	r0, r4, #24
   2ab24:	f000 f9f4 	bl	2af10 <z_abort_timeout>
   2ab28:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2ab2c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   2ab30:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ab32:	42bd      	cmp	r5, r7
   2ab34:	d000      	beq.n	2ab38 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ab36:	bb25      	cbnz	r5, 2ab82 <z_thread_abort+0x122>
		update_cache(1);
   2ab38:	2001      	movs	r0, #1
   2ab3a:	f7fe ff7d 	bl	29a38 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2ab3e:	4b29      	ldr	r3, [pc, #164]	; (2abe4 <z_thread_abort+0x184>)
   2ab40:	689b      	ldr	r3, [r3, #8]
   2ab42:	42a3      	cmp	r3, r4
   2ab44:	d1d5      	bne.n	2aaf2 <z_thread_abort+0x92>
   2ab46:	f3ef 8305 	mrs	r3, IPSR
   2ab4a:	2b00      	cmp	r3, #0
   2ab4c:	d1d1      	bne.n	2aaf2 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ab4e:	481b      	ldr	r0, [pc, #108]	; (2abbc <z_thread_abort+0x15c>)
   2ab50:	f7fd fe50 	bl	287f4 <z_spin_unlock_valid>
   2ab54:	bb10      	cbnz	r0, 2ab9c <z_thread_abort+0x13c>
   2ab56:	23e1      	movs	r3, #225	; 0xe1
   2ab58:	4a19      	ldr	r2, [pc, #100]	; (2abc0 <z_thread_abort+0x160>)
   2ab5a:	491d      	ldr	r1, [pc, #116]	; (2abd0 <z_thread_abort+0x170>)
   2ab5c:	481a      	ldr	r0, [pc, #104]	; (2abc8 <z_thread_abort+0x168>)
   2ab5e:	f003 fef9 	bl	2e954 <assert_print>
   2ab62:	4916      	ldr	r1, [pc, #88]	; (2abbc <z_thread_abort+0x15c>)
   2ab64:	481b      	ldr	r0, [pc, #108]	; (2abd4 <z_thread_abort+0x174>)
   2ab66:	f003 fef5 	bl	2e954 <assert_print>
   2ab6a:	21e1      	movs	r1, #225	; 0xe1
   2ab6c:	e792      	b.n	2aa94 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ab6e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2ab72:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2ab76:	4621      	mov	r1, r4
   2ab78:	481b      	ldr	r0, [pc, #108]	; (2abe8 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ab7a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2ab7c:	f7ff f9dc 	bl	29f38 <z_priq_dumb_remove>
}
   2ab80:	e7c9      	b.n	2ab16 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   2ab82:	4628      	mov	r0, r5
   2ab84:	f7ff fc90 	bl	2a4a8 <unpend_thread_no_timeout>
   2ab88:	f105 0018 	add.w	r0, r5, #24
   2ab8c:	f000 f9c0 	bl	2af10 <z_abort_timeout>
		ready_thread(thread);
   2ab90:	4628      	mov	r0, r5
   2ab92:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2ab96:	f7fe ff83 	bl	29aa0 <ready_thread>
   2ab9a:	e7c9      	b.n	2ab30 <z_thread_abort+0xd0>
   2ab9c:	4630      	mov	r0, r6
   2ab9e:	f7e5 fc83 	bl	104a8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2aba2:	490e      	ldr	r1, [pc, #56]	; (2abdc <z_thread_abort+0x17c>)
   2aba4:	f240 63f9 	movw	r3, #1785	; 0x6f9
   2aba8:	4a0b      	ldr	r2, [pc, #44]	; (2abd8 <z_thread_abort+0x178>)
   2abaa:	4807      	ldr	r0, [pc, #28]	; (2abc8 <z_thread_abort+0x168>)
   2abac:	f003 fed2 	bl	2e954 <assert_print>
   2abb0:	480e      	ldr	r0, [pc, #56]	; (2abec <z_thread_abort+0x18c>)
   2abb2:	f003 fecf 	bl	2e954 <assert_print>
   2abb6:	f240 61f9 	movw	r1, #1785	; 0x6f9
   2abba:	e795      	b.n	2aae8 <z_thread_abort+0x88>
   2abbc:	20011004 	.word	0x20011004
   2abc0:	000385b7 	.word	0x000385b7
   2abc4:	00038610 	.word	0x00038610
   2abc8:	000381c3 	.word	0x000381c3
   2abcc:	00038625 	.word	0x00038625
   2abd0:	000385e4 	.word	0x000385e4
   2abd4:	000385fb 	.word	0x000385fb
   2abd8:	000408ed 	.word	0x000408ed
   2abdc:	0003c13d 	.word	0x0003c13d
   2abe0:	00040c0b 	.word	0x00040c0b
   2abe4:	20010fc0 	.word	0x20010fc0
   2abe8:	20010fdc 	.word	0x20010fdc
   2abec:	00040c2a 	.word	0x00040c2a

0002abf0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2abf4:	4606      	mov	r6, r0
   2abf6:	4688      	mov	r8, r1
   2abf8:	4617      	mov	r7, r2
	__asm__ volatile(
   2abfa:	f04f 0320 	mov.w	r3, #32
   2abfe:	f3ef 8911 	mrs	r9, BASEPRI
   2ac02:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ac0a:	4821      	ldr	r0, [pc, #132]	; (2ac90 <z_sched_wake+0xa0>)
   2ac0c:	f7fd fde4 	bl	287d8 <z_spin_lock_valid>
   2ac10:	4605      	mov	r5, r0
   2ac12:	b968      	cbnz	r0, 2ac30 <z_sched_wake+0x40>
   2ac14:	2394      	movs	r3, #148	; 0x94
   2ac16:	4a1f      	ldr	r2, [pc, #124]	; (2ac94 <z_sched_wake+0xa4>)
   2ac18:	491f      	ldr	r1, [pc, #124]	; (2ac98 <z_sched_wake+0xa8>)
   2ac1a:	4820      	ldr	r0, [pc, #128]	; (2ac9c <z_sched_wake+0xac>)
   2ac1c:	f003 fe9a 	bl	2e954 <assert_print>
   2ac20:	491b      	ldr	r1, [pc, #108]	; (2ac90 <z_sched_wake+0xa0>)
   2ac22:	481f      	ldr	r0, [pc, #124]	; (2aca0 <z_sched_wake+0xb0>)
   2ac24:	f003 fe96 	bl	2e954 <assert_print>
   2ac28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac2a:	481a      	ldr	r0, [pc, #104]	; (2ac94 <z_sched_wake+0xa4>)
   2ac2c:	f003 fe8b 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ac30:	4817      	ldr	r0, [pc, #92]	; (2ac90 <z_sched_wake+0xa0>)
   2ac32:	f7fd fded 	bl	28810 <z_spin_lock_set_owner>
	return list->head == list;
   2ac36:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ac38:	42a6      	cmp	r6, r4
   2ac3a:	d01d      	beq.n	2ac78 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   2ac3c:	b1f4      	cbz	r4, 2ac7c <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2ac3e:	4620      	mov	r0, r4
   2ac40:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2ac44:	6167      	str	r7, [r4, #20]
   2ac46:	f7ff fc2f 	bl	2a4a8 <unpend_thread_no_timeout>
   2ac4a:	f104 0018 	add.w	r0, r4, #24
   2ac4e:	f000 f95f 	bl	2af10 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2ac52:	4620      	mov	r0, r4
   2ac54:	f7fe ff24 	bl	29aa0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac58:	480d      	ldr	r0, [pc, #52]	; (2ac90 <z_sched_wake+0xa0>)
   2ac5a:	f7fd fdcb 	bl	287f4 <z_spin_unlock_valid>
   2ac5e:	b978      	cbnz	r0, 2ac80 <z_sched_wake+0x90>
   2ac60:	23c2      	movs	r3, #194	; 0xc2
   2ac62:	4a0c      	ldr	r2, [pc, #48]	; (2ac94 <z_sched_wake+0xa4>)
   2ac64:	490f      	ldr	r1, [pc, #60]	; (2aca4 <z_sched_wake+0xb4>)
   2ac66:	480d      	ldr	r0, [pc, #52]	; (2ac9c <z_sched_wake+0xac>)
   2ac68:	f003 fe74 	bl	2e954 <assert_print>
   2ac6c:	4908      	ldr	r1, [pc, #32]	; (2ac90 <z_sched_wake+0xa0>)
   2ac6e:	480e      	ldr	r0, [pc, #56]	; (2aca8 <z_sched_wake+0xb8>)
   2ac70:	f003 fe70 	bl	2e954 <assert_print>
   2ac74:	21c2      	movs	r1, #194	; 0xc2
   2ac76:	e7d8      	b.n	2ac2a <z_sched_wake+0x3a>
	bool ret = false;
   2ac78:	2500      	movs	r5, #0
   2ac7a:	e7ed      	b.n	2ac58 <z_sched_wake+0x68>
   2ac7c:	4625      	mov	r5, r4
   2ac7e:	e7eb      	b.n	2ac58 <z_sched_wake+0x68>
	__asm__ volatile(
   2ac80:	f389 8811 	msr	BASEPRI, r9
   2ac84:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2ac88:	4628      	mov	r0, r5
   2ac8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2ac8e:	bf00      	nop
   2ac90:	20011004 	.word	0x20011004
   2ac94:	000385b7 	.word	0x000385b7
   2ac98:	00038610 	.word	0x00038610
   2ac9c:	000381c3 	.word	0x000381c3
   2aca0:	00038625 	.word	0x00038625
   2aca4:	000385e4 	.word	0x000385e4
   2aca8:	000385fb 	.word	0x000385fb

0002acac <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2acac:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2acae:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2acb2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2acb4:	e9cd 6700 	strd	r6, r7, [sp]
   2acb8:	f7ff fa86 	bl	2a1c8 <z_pend_curr>

	if (data != NULL) {
   2acbc:	b11c      	cbz	r4, 2acc6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2acbe:	4b03      	ldr	r3, [pc, #12]	; (2accc <z_sched_wait+0x20>)
   2acc0:	689b      	ldr	r3, [r3, #8]
   2acc2:	695b      	ldr	r3, [r3, #20]
   2acc4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2acc6:	b002      	add	sp, #8
   2acc8:	bdd0      	pop	{r4, r6, r7, pc}
   2acca:	bf00      	nop
   2accc:	20010fc0 	.word	0x20010fc0

0002acd0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2acd0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2acd2:	4806      	ldr	r0, [pc, #24]	; (2acec <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2acd4:	4a06      	ldr	r2, [pc, #24]	; (2acf0 <z_data_copy+0x20>)
   2acd6:	4907      	ldr	r1, [pc, #28]	; (2acf4 <z_data_copy+0x24>)
   2acd8:	1a12      	subs	r2, r2, r0
   2acda:	f009 ff2b 	bl	34b34 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2acde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2ace2:	4a05      	ldr	r2, [pc, #20]	; (2acf8 <z_data_copy+0x28>)
   2ace4:	4905      	ldr	r1, [pc, #20]	; (2acfc <z_data_copy+0x2c>)
   2ace6:	4806      	ldr	r0, [pc, #24]	; (2ad00 <z_data_copy+0x30>)
   2ace8:	f009 bf24 	b.w	34b34 <z_early_memcpy>
   2acec:	2000c580 	.word	0x2000c580
   2acf0:	2000d1f0 	.word	0x2000d1f0
   2acf4:	00041308 	.word	0x00041308
   2acf8:	00000000 	.word	0x00000000
   2acfc:	000412f0 	.word	0x000412f0
   2ad00:	2000c580 	.word	0x2000c580

0002ad04 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2ad04:	4b03      	ldr	r3, [pc, #12]	; (2ad14 <elapsed+0x10>)
   2ad06:	681b      	ldr	r3, [r3, #0]
   2ad08:	b90b      	cbnz	r3, 2ad0e <elapsed+0xa>
   2ad0a:	f7f0 bcdd 	b.w	1b6c8 <sys_clock_elapsed>
}
   2ad0e:	2000      	movs	r0, #0
   2ad10:	4770      	bx	lr
   2ad12:	bf00      	nop
   2ad14:	20011008 	.word	0x20011008

0002ad18 <next_timeout>:

static int32_t next_timeout(void)
{
   2ad18:	b510      	push	{r4, lr}
	return list->head == list;
   2ad1a:	4b0e      	ldr	r3, [pc, #56]	; (2ad54 <next_timeout+0x3c>)
   2ad1c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ad1e:	429c      	cmp	r4, r3
   2ad20:	d104      	bne.n	2ad2c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2ad22:	f7ff ffef 	bl	2ad04 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2ad26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2ad2a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2ad2c:	f7ff ffea 	bl	2ad04 <elapsed>
	if ((to == NULL) ||
   2ad30:	2c00      	cmp	r4, #0
   2ad32:	d0f8      	beq.n	2ad26 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2ad34:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2ad38:	1a1b      	subs	r3, r3, r0
   2ad3a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2ad3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2ad42:	f172 0100 	sbcs.w	r1, r2, #0
   2ad46:	daee      	bge.n	2ad26 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2ad48:	2a00      	cmp	r2, #0
   2ad4a:	bfac      	ite	ge
   2ad4c:	4618      	movge	r0, r3
   2ad4e:	2000      	movlt	r0, #0
	return ret;
   2ad50:	e7eb      	b.n	2ad2a <next_timeout+0x12>
   2ad52:	bf00      	nop
   2ad54:	2000ca84 	.word	0x2000ca84

0002ad58 <remove_timeout>:
{
   2ad58:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ad5a:	b170      	cbz	r0, 2ad7a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2ad5c:	4b0b      	ldr	r3, [pc, #44]	; (2ad8c <remove_timeout+0x34>)
   2ad5e:	685b      	ldr	r3, [r3, #4]
   2ad60:	4298      	cmp	r0, r3
   2ad62:	d00a      	beq.n	2ad7a <remove_timeout+0x22>
   2ad64:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2ad66:	b143      	cbz	r3, 2ad7a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2ad68:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2ad6c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2ad70:	1912      	adds	r2, r2, r4
   2ad72:	eb41 0105 	adc.w	r1, r1, r5
   2ad76:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2ad7a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ad7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ad80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ad82:	2300      	movs	r3, #0
	node->prev = NULL;
   2ad84:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ad88:	bd30      	pop	{r4, r5, pc}
   2ad8a:	bf00      	nop
   2ad8c:	2000ca84 	.word	0x2000ca84

0002ad90 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ad94:	bf08      	it	eq
   2ad96:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2ad9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ad9e:	4604      	mov	r4, r0
   2ada0:	4692      	mov	sl, r2
   2ada2:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ada4:	f000 8099 	beq.w	2aeda <z_add_timeout+0x14a>
	return node->next != NULL;
   2ada8:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2adaa:	b166      	cbz	r6, 2adc6 <z_add_timeout+0x36>
   2adac:	494c      	ldr	r1, [pc, #304]	; (2aee0 <z_add_timeout+0x150>)
   2adae:	235e      	movs	r3, #94	; 0x5e
   2adb0:	4a4c      	ldr	r2, [pc, #304]	; (2aee4 <z_add_timeout+0x154>)
   2adb2:	484d      	ldr	r0, [pc, #308]	; (2aee8 <z_add_timeout+0x158>)
   2adb4:	f003 fdce 	bl	2e954 <assert_print>
   2adb8:	484c      	ldr	r0, [pc, #304]	; (2aeec <z_add_timeout+0x15c>)
   2adba:	f003 fdcb 	bl	2e954 <assert_print>
   2adbe:	215e      	movs	r1, #94	; 0x5e
   2adc0:	4848      	ldr	r0, [pc, #288]	; (2aee4 <z_add_timeout+0x154>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2adc2:	f003 fdc0 	bl	2e946 <assert_post_action>
	to->fn = fn;
   2adc6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2adc8:	f04f 0320 	mov.w	r3, #32
   2adcc:	f3ef 8711 	mrs	r7, BASEPRI
   2add0:	f383 8812 	msr	BASEPRI_MAX, r3
   2add4:	f3bf 8f6f 	isb	sy
   2add8:	4845      	ldr	r0, [pc, #276]	; (2aef0 <z_add_timeout+0x160>)
   2adda:	f7fd fcfd 	bl	287d8 <z_spin_lock_valid>
   2adde:	b960      	cbnz	r0, 2adfa <z_add_timeout+0x6a>
   2ade0:	2394      	movs	r3, #148	; 0x94
   2ade2:	4a44      	ldr	r2, [pc, #272]	; (2aef4 <z_add_timeout+0x164>)
   2ade4:	4944      	ldr	r1, [pc, #272]	; (2aef8 <z_add_timeout+0x168>)
   2ade6:	4840      	ldr	r0, [pc, #256]	; (2aee8 <z_add_timeout+0x158>)
   2ade8:	f003 fdb4 	bl	2e954 <assert_print>
   2adec:	4940      	ldr	r1, [pc, #256]	; (2aef0 <z_add_timeout+0x160>)
   2adee:	4843      	ldr	r0, [pc, #268]	; (2aefc <z_add_timeout+0x16c>)
   2adf0:	f003 fdb0 	bl	2e954 <assert_print>
   2adf4:	2194      	movs	r1, #148	; 0x94
   2adf6:	483f      	ldr	r0, [pc, #252]	; (2aef4 <z_add_timeout+0x164>)
   2adf8:	e7e3      	b.n	2adc2 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   2adfa:	483d      	ldr	r0, [pc, #244]	; (2aef0 <z_add_timeout+0x160>)
   2adfc:	f7fd fd08 	bl	28810 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2ae00:	f1ba 3fff 	cmp.w	sl, #4294967295
   2ae04:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2ae08:	da23      	bge.n	2ae52 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2ae0a:	f06f 0301 	mvn.w	r3, #1
   2ae0e:	493c      	ldr	r1, [pc, #240]	; (2af00 <z_add_timeout+0x170>)
   2ae10:	e9d1 2000 	ldrd	r2, r0, [r1]
   2ae14:	1a9b      	subs	r3, r3, r2
   2ae16:	f04f 32ff 	mov.w	r2, #4294967295
   2ae1a:	eb62 0000 	sbc.w	r0, r2, r0
   2ae1e:	ebb3 030a 	subs.w	r3, r3, sl
   2ae22:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2ae26:	2b01      	cmp	r3, #1
   2ae28:	f170 0200 	sbcs.w	r2, r0, #0
   2ae2c:	da01      	bge.n	2ae32 <z_add_timeout+0xa2>
   2ae2e:	2301      	movs	r3, #1
   2ae30:	4630      	mov	r0, r6
   2ae32:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2ae36:	4b33      	ldr	r3, [pc, #204]	; (2af04 <z_add_timeout+0x174>)
   2ae38:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2ae3a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ae3e:	429a      	cmp	r2, r3
   2ae40:	bf18      	it	ne
   2ae42:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2ae44:	b986      	cbnz	r6, 2ae68 <z_add_timeout+0xd8>
	node->prev = tail;
   2ae46:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2ae4a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2ae4e:	605c      	str	r4, [r3, #4]
}
   2ae50:	e01c      	b.n	2ae8c <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   2ae52:	f7ff ff57 	bl	2ad04 <elapsed>
   2ae56:	f11a 0801 	adds.w	r8, sl, #1
   2ae5a:	f145 0500 	adc.w	r5, r5, #0
   2ae5e:	eb18 0300 	adds.w	r3, r8, r0
   2ae62:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2ae66:	e7e4      	b.n	2ae32 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   2ae68:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   2ae6c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2ae70:	428a      	cmp	r2, r1
   2ae72:	eb70 0e05 	sbcs.w	lr, r0, r5
   2ae76:	da23      	bge.n	2aec0 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   2ae78:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2ae7a:	6872      	ldr	r2, [r6, #4]
   2ae7c:	eb65 0500 	sbc.w	r5, r5, r0
   2ae80:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   2ae84:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2ae88:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2ae8a:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2ae8c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ae8e:	429a      	cmp	r2, r3
   2ae90:	d006      	beq.n	2aea0 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2ae92:	4294      	cmp	r4, r2
   2ae94:	d104      	bne.n	2aea0 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   2ae96:	f7ff ff3f 	bl	2ad18 <next_timeout>
   2ae9a:	2100      	movs	r1, #0
   2ae9c:	f7f0 fbe8 	bl	1b670 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aea0:	4813      	ldr	r0, [pc, #76]	; (2aef0 <z_add_timeout+0x160>)
   2aea2:	f7fd fca7 	bl	287f4 <z_spin_unlock_valid>
   2aea6:	b9a0      	cbnz	r0, 2aed2 <z_add_timeout+0x142>
   2aea8:	23c2      	movs	r3, #194	; 0xc2
   2aeaa:	4a12      	ldr	r2, [pc, #72]	; (2aef4 <z_add_timeout+0x164>)
   2aeac:	4916      	ldr	r1, [pc, #88]	; (2af08 <z_add_timeout+0x178>)
   2aeae:	480e      	ldr	r0, [pc, #56]	; (2aee8 <z_add_timeout+0x158>)
   2aeb0:	f003 fd50 	bl	2e954 <assert_print>
   2aeb4:	490e      	ldr	r1, [pc, #56]	; (2aef0 <z_add_timeout+0x160>)
   2aeb6:	4815      	ldr	r0, [pc, #84]	; (2af0c <z_add_timeout+0x17c>)
   2aeb8:	f003 fd4c 	bl	2e954 <assert_print>
   2aebc:	21c2      	movs	r1, #194	; 0xc2
   2aebe:	e79a      	b.n	2adf6 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   2aec0:	1a52      	subs	r2, r2, r1
   2aec2:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2aec6:	4566      	cmp	r6, ip
   2aec8:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2aecc:	d0bb      	beq.n	2ae46 <z_add_timeout+0xb6>
   2aece:	6836      	ldr	r6, [r6, #0]
   2aed0:	e7b8      	b.n	2ae44 <z_add_timeout+0xb4>
	__asm__ volatile(
   2aed2:	f387 8811 	msr	BASEPRI, r7
   2aed6:	f3bf 8f6f 	isb	sy
		}
	}
}
   2aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2aede:	bf00      	nop
   2aee0:	00040c70 	.word	0x00040c70
   2aee4:	00040c4c 	.word	0x00040c4c
   2aee8:	000381c3 	.word	0x000381c3
   2aeec:	00038b19 	.word	0x00038b19
   2aef0:	2001100c 	.word	0x2001100c
   2aef4:	000385b7 	.word	0x000385b7
   2aef8:	00038610 	.word	0x00038610
   2aefc:	00038625 	.word	0x00038625
   2af00:	2000f800 	.word	0x2000f800
   2af04:	2000ca84 	.word	0x2000ca84
   2af08:	000385e4 	.word	0x000385e4
   2af0c:	000385fb 	.word	0x000385fb

0002af10 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2af10:	b538      	push	{r3, r4, r5, lr}
   2af12:	4604      	mov	r4, r0
	__asm__ volatile(
   2af14:	f04f 0320 	mov.w	r3, #32
   2af18:	f3ef 8511 	mrs	r5, BASEPRI
   2af1c:	f383 8812 	msr	BASEPRI_MAX, r3
   2af20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2af24:	4819      	ldr	r0, [pc, #100]	; (2af8c <z_abort_timeout+0x7c>)
   2af26:	f7fd fc57 	bl	287d8 <z_spin_lock_valid>
   2af2a:	b968      	cbnz	r0, 2af48 <z_abort_timeout+0x38>
   2af2c:	2394      	movs	r3, #148	; 0x94
   2af2e:	4a18      	ldr	r2, [pc, #96]	; (2af90 <z_abort_timeout+0x80>)
   2af30:	4918      	ldr	r1, [pc, #96]	; (2af94 <z_abort_timeout+0x84>)
   2af32:	4819      	ldr	r0, [pc, #100]	; (2af98 <z_abort_timeout+0x88>)
   2af34:	f003 fd0e 	bl	2e954 <assert_print>
   2af38:	4914      	ldr	r1, [pc, #80]	; (2af8c <z_abort_timeout+0x7c>)
   2af3a:	4818      	ldr	r0, [pc, #96]	; (2af9c <z_abort_timeout+0x8c>)
   2af3c:	f003 fd0a 	bl	2e954 <assert_print>
   2af40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2af42:	4813      	ldr	r0, [pc, #76]	; (2af90 <z_abort_timeout+0x80>)
   2af44:	f003 fcff 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2af48:	4810      	ldr	r0, [pc, #64]	; (2af8c <z_abort_timeout+0x7c>)
   2af4a:	f7fd fc61 	bl	28810 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2af4e:	6823      	ldr	r3, [r4, #0]
   2af50:	b19b      	cbz	r3, 2af7a <z_abort_timeout+0x6a>
			remove_timeout(to);
   2af52:	4620      	mov	r0, r4
   2af54:	f7ff ff00 	bl	2ad58 <remove_timeout>
			ret = 0;
   2af58:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2af5a:	480c      	ldr	r0, [pc, #48]	; (2af8c <z_abort_timeout+0x7c>)
   2af5c:	f7fd fc4a 	bl	287f4 <z_spin_unlock_valid>
   2af60:	b970      	cbnz	r0, 2af80 <z_abort_timeout+0x70>
   2af62:	23c2      	movs	r3, #194	; 0xc2
   2af64:	4a0a      	ldr	r2, [pc, #40]	; (2af90 <z_abort_timeout+0x80>)
   2af66:	490e      	ldr	r1, [pc, #56]	; (2afa0 <z_abort_timeout+0x90>)
   2af68:	480b      	ldr	r0, [pc, #44]	; (2af98 <z_abort_timeout+0x88>)
   2af6a:	f003 fcf3 	bl	2e954 <assert_print>
   2af6e:	4907      	ldr	r1, [pc, #28]	; (2af8c <z_abort_timeout+0x7c>)
   2af70:	480c      	ldr	r0, [pc, #48]	; (2afa4 <z_abort_timeout+0x94>)
   2af72:	f003 fcef 	bl	2e954 <assert_print>
   2af76:	21c2      	movs	r1, #194	; 0xc2
   2af78:	e7e3      	b.n	2af42 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   2af7a:	f06f 0415 	mvn.w	r4, #21
   2af7e:	e7ec      	b.n	2af5a <z_abort_timeout+0x4a>
	__asm__ volatile(
   2af80:	f385 8811 	msr	BASEPRI, r5
   2af84:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2af88:	4620      	mov	r0, r4
   2af8a:	bd38      	pop	{r3, r4, r5, pc}
   2af8c:	2001100c 	.word	0x2001100c
   2af90:	000385b7 	.word	0x000385b7
   2af94:	00038610 	.word	0x00038610
   2af98:	000381c3 	.word	0x000381c3
   2af9c:	00038625 	.word	0x00038625
   2afa0:	000385e4 	.word	0x000385e4
   2afa4:	000385fb 	.word	0x000385fb

0002afa8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2afa8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2afaa:	f04f 0320 	mov.w	r3, #32
   2afae:	f3ef 8511 	mrs	r5, BASEPRI
   2afb2:	f383 8812 	msr	BASEPRI_MAX, r3
   2afb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2afba:	4817      	ldr	r0, [pc, #92]	; (2b018 <z_get_next_timeout_expiry+0x70>)
   2afbc:	f7fd fc0c 	bl	287d8 <z_spin_lock_valid>
   2afc0:	b968      	cbnz	r0, 2afde <z_get_next_timeout_expiry+0x36>
   2afc2:	2394      	movs	r3, #148	; 0x94
   2afc4:	4a15      	ldr	r2, [pc, #84]	; (2b01c <z_get_next_timeout_expiry+0x74>)
   2afc6:	4916      	ldr	r1, [pc, #88]	; (2b020 <z_get_next_timeout_expiry+0x78>)
   2afc8:	4816      	ldr	r0, [pc, #88]	; (2b024 <z_get_next_timeout_expiry+0x7c>)
   2afca:	f003 fcc3 	bl	2e954 <assert_print>
   2afce:	4912      	ldr	r1, [pc, #72]	; (2b018 <z_get_next_timeout_expiry+0x70>)
   2afd0:	4815      	ldr	r0, [pc, #84]	; (2b028 <z_get_next_timeout_expiry+0x80>)
   2afd2:	f003 fcbf 	bl	2e954 <assert_print>
   2afd6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2afd8:	4810      	ldr	r0, [pc, #64]	; (2b01c <z_get_next_timeout_expiry+0x74>)
   2afda:	f003 fcb4 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2afde:	480e      	ldr	r0, [pc, #56]	; (2b018 <z_get_next_timeout_expiry+0x70>)
   2afe0:	f7fd fc16 	bl	28810 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2afe4:	f7ff fe98 	bl	2ad18 <next_timeout>
   2afe8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2afea:	480b      	ldr	r0, [pc, #44]	; (2b018 <z_get_next_timeout_expiry+0x70>)
   2afec:	f7fd fc02 	bl	287f4 <z_spin_unlock_valid>
   2aff0:	b958      	cbnz	r0, 2b00a <z_get_next_timeout_expiry+0x62>
   2aff2:	23c2      	movs	r3, #194	; 0xc2
   2aff4:	4a09      	ldr	r2, [pc, #36]	; (2b01c <z_get_next_timeout_expiry+0x74>)
   2aff6:	490d      	ldr	r1, [pc, #52]	; (2b02c <z_get_next_timeout_expiry+0x84>)
   2aff8:	480a      	ldr	r0, [pc, #40]	; (2b024 <z_get_next_timeout_expiry+0x7c>)
   2affa:	f003 fcab 	bl	2e954 <assert_print>
   2affe:	4906      	ldr	r1, [pc, #24]	; (2b018 <z_get_next_timeout_expiry+0x70>)
   2b000:	480b      	ldr	r0, [pc, #44]	; (2b030 <z_get_next_timeout_expiry+0x88>)
   2b002:	f003 fca7 	bl	2e954 <assert_print>
   2b006:	21c2      	movs	r1, #194	; 0xc2
   2b008:	e7e6      	b.n	2afd8 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2b00a:	f385 8811 	msr	BASEPRI, r5
   2b00e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2b012:	4620      	mov	r0, r4
   2b014:	bd38      	pop	{r3, r4, r5, pc}
   2b016:	bf00      	nop
   2b018:	2001100c 	.word	0x2001100c
   2b01c:	000385b7 	.word	0x000385b7
   2b020:	00038610 	.word	0x00038610
   2b024:	000381c3 	.word	0x000381c3
   2b028:	00038625 	.word	0x00038625
   2b02c:	000385e4 	.word	0x000385e4
   2b030:	000385fb 	.word	0x000385fb

0002b034 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2b034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b038:	4604      	mov	r4, r0
	__asm__ volatile(
   2b03a:	f04f 0320 	mov.w	r3, #32
   2b03e:	f3ef 8811 	mrs	r8, BASEPRI
   2b042:	f383 8812 	msr	BASEPRI_MAX, r3
   2b046:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b04a:	4847      	ldr	r0, [pc, #284]	; (2b168 <sys_clock_announce+0x134>)
   2b04c:	f7fd fbc4 	bl	287d8 <z_spin_lock_valid>
   2b050:	b968      	cbnz	r0, 2b06e <sys_clock_announce+0x3a>
   2b052:	2394      	movs	r3, #148	; 0x94
   2b054:	4a45      	ldr	r2, [pc, #276]	; (2b16c <sys_clock_announce+0x138>)
   2b056:	4946      	ldr	r1, [pc, #280]	; (2b170 <sys_clock_announce+0x13c>)
   2b058:	4846      	ldr	r0, [pc, #280]	; (2b174 <sys_clock_announce+0x140>)
   2b05a:	f003 fc7b 	bl	2e954 <assert_print>
   2b05e:	4942      	ldr	r1, [pc, #264]	; (2b168 <sys_clock_announce+0x134>)
   2b060:	4845      	ldr	r0, [pc, #276]	; (2b178 <sys_clock_announce+0x144>)
   2b062:	f003 fc77 	bl	2e954 <assert_print>
   2b066:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b068:	4840      	ldr	r0, [pc, #256]	; (2b16c <sys_clock_announce+0x138>)
   2b06a:	f003 fc6c 	bl	2e946 <assert_post_action>
	return list->head == list;
   2b06e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 2b17c <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2b072:	f8df b10c 	ldr.w	fp, [pc, #268]	; 2b180 <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
   2b076:	483c      	ldr	r0, [pc, #240]	; (2b168 <sys_clock_announce+0x134>)
   2b078:	f7fd fbca 	bl	28810 <z_spin_lock_set_owner>
   2b07c:	f8cb 4000 	str.w	r4, [fp]
   2b080:	f8d9 4000 	ldr.w	r4, [r9]
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   2b084:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b086:	454c      	cmp	r4, r9
   2b088:	bf08      	it	eq
   2b08a:	2400      	moveq	r4, #0
   2b08c:	2700      	movs	r7, #0
		curr_tick += dt;
   2b08e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2b184 <sys_clock_announce+0x150>
	     (t != NULL) && (t->dticks <= announce_remaining);
   2b092:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
   2b096:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2b09a:	2c00      	cmp	r4, #0
   2b09c:	d049      	beq.n	2b132 <sys_clock_announce+0xfe>
   2b09e:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   2b0a2:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   2b0a6:	42ab      	cmp	r3, r5
   2b0a8:	eb7c 0e00 	sbcs.w	lr, ip, r0
   2b0ac:	da05      	bge.n	2b0ba <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2b0ae:	1aed      	subs	r5, r5, r3
   2b0b0:	eb60 000c 	sbc.w	r0, r0, ip
   2b0b4:	e9c4 5004 	strd	r5, r0, [r4, #16]
   2b0b8:	e03b      	b.n	2b132 <sys_clock_announce+0xfe>
		curr_tick += dt;
   2b0ba:	18aa      	adds	r2, r5, r2
   2b0bc:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
   2b0c0:	4620      	mov	r0, r4
		t->dticks = 0;
   2b0c2:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
   2b0c6:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
   2b0ca:	f7ff fe45 	bl	2ad58 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b0ce:	4826      	ldr	r0, [pc, #152]	; (2b168 <sys_clock_announce+0x134>)
   2b0d0:	f7fd fb90 	bl	287f4 <z_spin_unlock_valid>
   2b0d4:	b958      	cbnz	r0, 2b0ee <sys_clock_announce+0xba>
   2b0d6:	23c2      	movs	r3, #194	; 0xc2
   2b0d8:	4a24      	ldr	r2, [pc, #144]	; (2b16c <sys_clock_announce+0x138>)
   2b0da:	492b      	ldr	r1, [pc, #172]	; (2b188 <sys_clock_announce+0x154>)
   2b0dc:	4825      	ldr	r0, [pc, #148]	; (2b174 <sys_clock_announce+0x140>)
   2b0de:	f003 fc39 	bl	2e954 <assert_print>
   2b0e2:	4921      	ldr	r1, [pc, #132]	; (2b168 <sys_clock_announce+0x134>)
   2b0e4:	4829      	ldr	r0, [pc, #164]	; (2b18c <sys_clock_announce+0x158>)
   2b0e6:	f003 fc35 	bl	2e954 <assert_print>
   2b0ea:	21c2      	movs	r1, #194	; 0xc2
   2b0ec:	e7bc      	b.n	2b068 <sys_clock_announce+0x34>
	__asm__ volatile(
   2b0ee:	f388 8811 	msr	BASEPRI, r8
   2b0f2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2b0f6:	4620      	mov	r0, r4
   2b0f8:	68a3      	ldr	r3, [r4, #8]
   2b0fa:	4798      	blx	r3
	__asm__ volatile(
   2b0fc:	f04f 0320 	mov.w	r3, #32
   2b100:	f3ef 8811 	mrs	r8, BASEPRI
   2b104:	f383 8812 	msr	BASEPRI_MAX, r3
   2b108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b10c:	4816      	ldr	r0, [pc, #88]	; (2b168 <sys_clock_announce+0x134>)
   2b10e:	f7fd fb63 	bl	287d8 <z_spin_lock_valid>
   2b112:	2800      	cmp	r0, #0
   2b114:	d09d      	beq.n	2b052 <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   2b116:	4814      	ldr	r0, [pc, #80]	; (2b168 <sys_clock_announce+0x134>)
   2b118:	f7fd fb7a 	bl	28810 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2b11c:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
   2b120:	f8d9 4000 	ldr.w	r4, [r9]
   2b124:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b126:	454c      	cmp	r4, r9
   2b128:	f8cb 3000 	str.w	r3, [fp]
   2b12c:	d1b1      	bne.n	2b092 <sys_clock_announce+0x5e>
		curr_tick += dt;
   2b12e:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2b132:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2b134:	189a      	adds	r2, r3, r2
   2b136:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2b13a:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
   2b13e:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   2b142:	f7ff fde9 	bl	2ad18 <next_timeout>
   2b146:	4621      	mov	r1, r4
   2b148:	f7f0 fa92 	bl	1b670 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b14c:	4806      	ldr	r0, [pc, #24]	; (2b168 <sys_clock_announce+0x134>)
   2b14e:	f7fd fb51 	bl	287f4 <z_spin_unlock_valid>
   2b152:	2800      	cmp	r0, #0
   2b154:	d0bf      	beq.n	2b0d6 <sys_clock_announce+0xa2>
	__asm__ volatile(
   2b156:	f388 8811 	msr	BASEPRI, r8
   2b15a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2b15e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2b162:	f7fe bf5b 	b.w	2a01c <z_time_slice>
   2b166:	bf00      	nop
   2b168:	2001100c 	.word	0x2001100c
   2b16c:	000385b7 	.word	0x000385b7
   2b170:	00038610 	.word	0x00038610
   2b174:	000381c3 	.word	0x000381c3
   2b178:	00038625 	.word	0x00038625
   2b17c:	2000ca84 	.word	0x2000ca84
   2b180:	20011008 	.word	0x20011008
   2b184:	2000f800 	.word	0x2000f800
   2b188:	000385e4 	.word	0x000385e4
   2b18c:	000385fb 	.word	0x000385fb

0002b190 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2b190:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   2b192:	f04f 0320 	mov.w	r3, #32
   2b196:	f3ef 8611 	mrs	r6, BASEPRI
   2b19a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b19e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b1a2:	481a      	ldr	r0, [pc, #104]	; (2b20c <sys_clock_tick_get+0x7c>)
   2b1a4:	f7fd fb18 	bl	287d8 <z_spin_lock_valid>
   2b1a8:	b968      	cbnz	r0, 2b1c6 <sys_clock_tick_get+0x36>
   2b1aa:	2394      	movs	r3, #148	; 0x94
   2b1ac:	4a18      	ldr	r2, [pc, #96]	; (2b210 <sys_clock_tick_get+0x80>)
   2b1ae:	4919      	ldr	r1, [pc, #100]	; (2b214 <sys_clock_tick_get+0x84>)
   2b1b0:	4819      	ldr	r0, [pc, #100]	; (2b218 <sys_clock_tick_get+0x88>)
   2b1b2:	f003 fbcf 	bl	2e954 <assert_print>
   2b1b6:	4915      	ldr	r1, [pc, #84]	; (2b20c <sys_clock_tick_get+0x7c>)
   2b1b8:	4818      	ldr	r0, [pc, #96]	; (2b21c <sys_clock_tick_get+0x8c>)
   2b1ba:	f003 fbcb 	bl	2e954 <assert_print>
   2b1be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b1c0:	4813      	ldr	r0, [pc, #76]	; (2b210 <sys_clock_tick_get+0x80>)
   2b1c2:	f003 fbc0 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b1c6:	4811      	ldr	r0, [pc, #68]	; (2b20c <sys_clock_tick_get+0x7c>)
   2b1c8:	f7fd fb22 	bl	28810 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2b1cc:	f7ff fd9a 	bl	2ad04 <elapsed>
   2b1d0:	4a13      	ldr	r2, [pc, #76]	; (2b220 <sys_clock_tick_get+0x90>)
   2b1d2:	e9d2 4500 	ldrd	r4, r5, [r2]
   2b1d6:	1904      	adds	r4, r0, r4
   2b1d8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b1dc:	480b      	ldr	r0, [pc, #44]	; (2b20c <sys_clock_tick_get+0x7c>)
   2b1de:	f7fd fb09 	bl	287f4 <z_spin_unlock_valid>
   2b1e2:	b958      	cbnz	r0, 2b1fc <sys_clock_tick_get+0x6c>
   2b1e4:	23c2      	movs	r3, #194	; 0xc2
   2b1e6:	4a0a      	ldr	r2, [pc, #40]	; (2b210 <sys_clock_tick_get+0x80>)
   2b1e8:	490e      	ldr	r1, [pc, #56]	; (2b224 <sys_clock_tick_get+0x94>)
   2b1ea:	480b      	ldr	r0, [pc, #44]	; (2b218 <sys_clock_tick_get+0x88>)
   2b1ec:	f003 fbb2 	bl	2e954 <assert_print>
   2b1f0:	4906      	ldr	r1, [pc, #24]	; (2b20c <sys_clock_tick_get+0x7c>)
   2b1f2:	480d      	ldr	r0, [pc, #52]	; (2b228 <sys_clock_tick_get+0x98>)
   2b1f4:	f003 fbae 	bl	2e954 <assert_print>
   2b1f8:	21c2      	movs	r1, #194	; 0xc2
   2b1fa:	e7e1      	b.n	2b1c0 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   2b1fc:	f386 8811 	msr	BASEPRI, r6
   2b200:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2b204:	4620      	mov	r0, r4
   2b206:	4629      	mov	r1, r5
   2b208:	bd70      	pop	{r4, r5, r6, pc}
   2b20a:	bf00      	nop
   2b20c:	2001100c 	.word	0x2001100c
   2b210:	000385b7 	.word	0x000385b7
   2b214:	00038610 	.word	0x00038610
   2b218:	000381c3 	.word	0x000381c3
   2b21c:	00038625 	.word	0x00038625
   2b220:	2000f800 	.word	0x2000f800
   2b224:	000385e4 	.word	0x000385e4
   2b228:	000385fb 	.word	0x000385fb

0002b22c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b22e:	4604      	mov	r4, r0
	__asm__ volatile(
   2b230:	f04f 0320 	mov.w	r3, #32
   2b234:	f3ef 8711 	mrs	r7, BASEPRI
   2b238:	f383 8812 	msr	BASEPRI_MAX, r3
   2b23c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b240:	484e      	ldr	r0, [pc, #312]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b242:	f7fd fac9 	bl	287d8 <z_spin_lock_valid>
   2b246:	b968      	cbnz	r0, 2b264 <z_timer_expiration_handler+0x38>
   2b248:	2394      	movs	r3, #148	; 0x94
   2b24a:	4a4d      	ldr	r2, [pc, #308]	; (2b380 <z_timer_expiration_handler+0x154>)
   2b24c:	494d      	ldr	r1, [pc, #308]	; (2b384 <z_timer_expiration_handler+0x158>)
   2b24e:	484e      	ldr	r0, [pc, #312]	; (2b388 <z_timer_expiration_handler+0x15c>)
   2b250:	f003 fb80 	bl	2e954 <assert_print>
   2b254:	4949      	ldr	r1, [pc, #292]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b256:	484d      	ldr	r0, [pc, #308]	; (2b38c <z_timer_expiration_handler+0x160>)
   2b258:	f003 fb7c 	bl	2e954 <assert_print>
   2b25c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b25e:	4848      	ldr	r0, [pc, #288]	; (2b380 <z_timer_expiration_handler+0x154>)
   2b260:	f003 fb71 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b264:	4845      	ldr	r0, [pc, #276]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b266:	f7fd fad3 	bl	28810 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2b26a:	6822      	ldr	r2, [r4, #0]
   2b26c:	b182      	cbz	r2, 2b290 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b26e:	4843      	ldr	r0, [pc, #268]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b270:	f7fd fac0 	bl	287f4 <z_spin_unlock_valid>
   2b274:	2800      	cmp	r0, #0
   2b276:	d17b      	bne.n	2b370 <z_timer_expiration_handler+0x144>
   2b278:	23c2      	movs	r3, #194	; 0xc2
   2b27a:	4a41      	ldr	r2, [pc, #260]	; (2b380 <z_timer_expiration_handler+0x154>)
   2b27c:	4944      	ldr	r1, [pc, #272]	; (2b390 <z_timer_expiration_handler+0x164>)
   2b27e:	4842      	ldr	r0, [pc, #264]	; (2b388 <z_timer_expiration_handler+0x15c>)
   2b280:	f003 fb68 	bl	2e954 <assert_print>
   2b284:	493d      	ldr	r1, [pc, #244]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b286:	4843      	ldr	r0, [pc, #268]	; (2b394 <z_timer_expiration_handler+0x168>)
   2b288:	f003 fb64 	bl	2e954 <assert_print>
   2b28c:	21c2      	movs	r1, #194	; 0xc2
   2b28e:	e7e6      	b.n	2b25e <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2b290:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   2b294:	1c58      	adds	r0, r3, #1
   2b296:	f146 0100 	adc.w	r1, r6, #0
   2b29a:	2802      	cmp	r0, #2
   2b29c:	f171 0100 	sbcs.w	r1, r1, #0
   2b2a0:	d327      	bcc.n	2b2f2 <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   2b2a2:	2b01      	cmp	r3, #1
   2b2a4:	f176 0100 	sbcs.w	r1, r6, #0
   2b2a8:	bfbc      	itt	lt
   2b2aa:	2301      	movlt	r3, #1
   2b2ac:	4616      	movlt	r6, r2
   2b2ae:	1e5d      	subs	r5, r3, #1
   2b2b0:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   2b2b4:	f009 fd6b 	bl	34d8e <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2b2b8:	3001      	adds	r0, #1
   2b2ba:	f141 0100 	adc.w	r1, r1, #0
   2b2be:	1940      	adds	r0, r0, r5
   2b2c0:	eb46 0101 	adc.w	r1, r6, r1
   2b2c4:	2801      	cmp	r0, #1
   2b2c6:	f171 0100 	sbcs.w	r1, r1, #0
   2b2ca:	db4c      	blt.n	2b366 <z_timer_expiration_handler+0x13a>
   2b2cc:	f009 fd5f 	bl	34d8e <z_impl_k_uptime_ticks>
   2b2d0:	3001      	adds	r0, #1
   2b2d2:	f141 0100 	adc.w	r1, r1, #0
   2b2d6:	f06f 0201 	mvn.w	r2, #1
   2b2da:	1940      	adds	r0, r0, r5
   2b2dc:	eb46 0301 	adc.w	r3, r6, r1
   2b2e0:	f04f 31ff 	mov.w	r1, #4294967295
   2b2e4:	1a12      	subs	r2, r2, r0
   2b2e6:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b2ea:	4620      	mov	r0, r4
   2b2ec:	492a      	ldr	r1, [pc, #168]	; (2b398 <z_timer_expiration_handler+0x16c>)
   2b2ee:	f7ff fd4f 	bl	2ad90 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2b2f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b2f4:	3301      	adds	r3, #1
   2b2f6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2b2f8:	6a23      	ldr	r3, [r4, #32]
   2b2fa:	b1db      	cbz	r3, 2b334 <z_timer_expiration_handler+0x108>
   2b2fc:	481f      	ldr	r0, [pc, #124]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b2fe:	f7fd fa79 	bl	287f4 <z_spin_unlock_valid>
   2b302:	2800      	cmp	r0, #0
   2b304:	d0b8      	beq.n	2b278 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2b306:	f387 8811 	msr	BASEPRI, r7
   2b30a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2b30e:	4620      	mov	r0, r4
   2b310:	6a23      	ldr	r3, [r4, #32]
   2b312:	4798      	blx	r3
	__asm__ volatile(
   2b314:	f04f 0320 	mov.w	r3, #32
   2b318:	f3ef 8711 	mrs	r7, BASEPRI
   2b31c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b324:	4815      	ldr	r0, [pc, #84]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b326:	f7fd fa57 	bl	287d8 <z_spin_lock_valid>
   2b32a:	2800      	cmp	r0, #0
   2b32c:	d08c      	beq.n	2b248 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2b32e:	4813      	ldr	r0, [pc, #76]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b330:	f7fd fa6e 	bl	28810 <z_spin_lock_set_owner>
	return list->head == list;
   2b334:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b338:	42a5      	cmp	r5, r4
   2b33a:	d098      	beq.n	2b26e <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2b33c:	2d00      	cmp	r5, #0
   2b33e:	d096      	beq.n	2b26e <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   2b340:	4628      	mov	r0, r5
   2b342:	f7fe fc3d 	bl	29bc0 <z_unpend_thread_no_timeout>
   2b346:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b348:	480c      	ldr	r0, [pc, #48]	; (2b37c <z_timer_expiration_handler+0x150>)
   2b34a:	67eb      	str	r3, [r5, #124]	; 0x7c
   2b34c:	f7fd fa52 	bl	287f4 <z_spin_unlock_valid>
   2b350:	2800      	cmp	r0, #0
   2b352:	d091      	beq.n	2b278 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2b354:	f387 8811 	msr	BASEPRI, r7
   2b358:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   2b35c:	4628      	mov	r0, r5
}
   2b35e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2b362:	f7fe bbe7 	b.w	29b34 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2b366:	f06f 0201 	mvn.w	r2, #1
   2b36a:	f04f 33ff 	mov.w	r3, #4294967295
   2b36e:	e7bc      	b.n	2b2ea <z_timer_expiration_handler+0xbe>
   2b370:	f387 8811 	msr	BASEPRI, r7
   2b374:	f3bf 8f6f 	isb	sy
}
   2b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b37a:	bf00      	nop
   2b37c:	20011010 	.word	0x20011010
   2b380:	000385b7 	.word	0x000385b7
   2b384:	00038610 	.word	0x00038610
   2b388:	000381c3 	.word	0x000381c3
   2b38c:	00038625 	.word	0x00038625
   2b390:	000385e4 	.word	0x000385e4
   2b394:	000385fb 	.word	0x000385fb
   2b398:	0002b22d 	.word	0x0002b22d

0002b39c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
   2b3a0:	bf08      	it	eq
   2b3a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2b3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b3aa:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2b3ae:	4605      	mov	r5, r0
   2b3b0:	461c      	mov	r4, r3
   2b3b2:	4691      	mov	r9, r2
   2b3b4:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2b3b6:	d01c      	beq.n	2b3f2 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2b3b8:	1c53      	adds	r3, r2, #1
   2b3ba:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   2b3be:	db09      	blt.n	2b3d4 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2b3c0:	2a01      	cmp	r2, #1
   2b3c2:	f174 0300 	sbcs.w	r3, r4, #0
   2b3c6:	bfbc      	itt	lt
   2b3c8:	2201      	movlt	r2, #1
   2b3ca:	2400      	movlt	r4, #0
   2b3cc:	f112 39ff 	adds.w	r9, r2, #4294967295
   2b3d0:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2b3d4:	4628      	mov	r0, r5
   2b3d6:	f7ff fd9b 	bl	2af10 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2b3da:	2300      	movs	r3, #0
	timer->period = period;
   2b3dc:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2b3e0:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b3e2:	464a      	mov	r2, r9
   2b3e4:	4643      	mov	r3, r8
   2b3e6:	4628      	mov	r0, r5
		     duration);
}
   2b3e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2b3ec:	4902      	ldr	r1, [pc, #8]	; (2b3f8 <z_impl_k_timer_start+0x5c>)
   2b3ee:	f7ff bccf 	b.w	2ad90 <z_add_timeout>
}
   2b3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b3f6:	bf00      	nop
   2b3f8:	0002b22d 	.word	0x0002b22d

0002b3fc <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2b3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2b400:	2600      	movs	r6, #0
{
   2b402:	4688      	mov	r8, r1
   2b404:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   2b406:	4604      	mov	r4, r0
	int events_registered = 0;
   2b408:	4637      	mov	r7, r6
	event->poller = NULL;
   2b40a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b40c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2b5cc <register_events+0x1d0>
{
   2b410:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2b412:	4546      	cmp	r6, r8
   2b414:	db03      	blt.n	2b41e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2b416:	4638      	mov	r0, r7
   2b418:	b003      	add	sp, #12
   2b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2b41e:	f04f 0320 	mov.w	r3, #32
   2b422:	f3ef 8b11 	mrs	fp, BASEPRI
   2b426:	f383 8812 	msr	BASEPRI_MAX, r3
   2b42a:	f3bf 8f6f 	isb	sy
   2b42e:	4648      	mov	r0, r9
   2b430:	f7fd f9d2 	bl	287d8 <z_spin_lock_valid>
   2b434:	b960      	cbnz	r0, 2b450 <register_events+0x54>
   2b436:	2394      	movs	r3, #148	; 0x94
   2b438:	4a65      	ldr	r2, [pc, #404]	; (2b5d0 <register_events+0x1d4>)
   2b43a:	4966      	ldr	r1, [pc, #408]	; (2b5d4 <register_events+0x1d8>)
   2b43c:	4866      	ldr	r0, [pc, #408]	; (2b5d8 <register_events+0x1dc>)
   2b43e:	f003 fa89 	bl	2e954 <assert_print>
   2b442:	4962      	ldr	r1, [pc, #392]	; (2b5cc <register_events+0x1d0>)
   2b444:	4865      	ldr	r0, [pc, #404]	; (2b5dc <register_events+0x1e0>)
   2b446:	f003 fa85 	bl	2e954 <assert_print>
   2b44a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b44c:	4860      	ldr	r0, [pc, #384]	; (2b5d0 <register_events+0x1d4>)
   2b44e:	e060      	b.n	2b512 <register_events+0x116>
	z_spin_lock_set_owner(l);
   2b450:	4648      	mov	r0, r9
   2b452:	f7fd f9dd 	bl	28810 <z_spin_lock_set_owner>
	switch (event->type) {
   2b456:	7b63      	ldrb	r3, [r4, #13]
   2b458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b45c:	2b08      	cmp	r3, #8
   2b45e:	d84a      	bhi.n	2b4f6 <register_events+0xfa>
   2b460:	e8df f003 	tbb	[pc, r3]
   2b464:	49053d2b 	.word	0x49053d2b
   2b468:	49494927 	.word	0x49494927
   2b46c:	43          	.byte	0x43
   2b46d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2b46e:	6923      	ldr	r3, [r4, #16]
   2b470:	689b      	ldr	r3, [r3, #8]
   2b472:	b313      	cbz	r3, 2b4ba <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2b474:	2302      	movs	r3, #2
	event->state |= state;
   2b476:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2b478:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   2b47c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2b480:	430b      	orrs	r3, r1
   2b482:	f363 3294 	bfi	r2, r3, #14, #7
   2b486:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2b488:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b48c:	4648      	mov	r0, r9
   2b48e:	f7fd f9b1 	bl	287f4 <z_spin_unlock_valid>
   2b492:	3414      	adds	r4, #20
   2b494:	2800      	cmp	r0, #0
   2b496:	f040 8092 	bne.w	2b5be <register_events+0x1c2>
   2b49a:	23c2      	movs	r3, #194	; 0xc2
   2b49c:	4a4c      	ldr	r2, [pc, #304]	; (2b5d0 <register_events+0x1d4>)
   2b49e:	4950      	ldr	r1, [pc, #320]	; (2b5e0 <register_events+0x1e4>)
   2b4a0:	484d      	ldr	r0, [pc, #308]	; (2b5d8 <register_events+0x1dc>)
   2b4a2:	f003 fa57 	bl	2e954 <assert_print>
   2b4a6:	4949      	ldr	r1, [pc, #292]	; (2b5cc <register_events+0x1d0>)
   2b4a8:	484e      	ldr	r0, [pc, #312]	; (2b5e4 <register_events+0x1e8>)
   2b4aa:	f003 fa53 	bl	2e954 <assert_print>
   2b4ae:	21c2      	movs	r1, #194	; 0xc2
   2b4b0:	e7cc      	b.n	2b44c <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2b4b2:	6923      	ldr	r3, [r4, #16]
   2b4b4:	681b      	ldr	r3, [r3, #0]
   2b4b6:	2b00      	cmp	r3, #0
   2b4b8:	d12d      	bne.n	2b516 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   2b4ba:	9b01      	ldr	r3, [sp, #4]
   2b4bc:	2b00      	cmp	r3, #0
   2b4be:	d1e5      	bne.n	2b48c <register_events+0x90>
   2b4c0:	782b      	ldrb	r3, [r5, #0]
   2b4c2:	2b00      	cmp	r3, #0
   2b4c4:	d0e2      	beq.n	2b48c <register_events+0x90>
	switch (event->type) {
   2b4c6:	7b63      	ldrb	r3, [r4, #13]
   2b4c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b4cc:	2b08      	cmp	r3, #8
   2b4ce:	d86b      	bhi.n	2b5a8 <register_events+0x1ac>
   2b4d0:	e8df f003 	tbb	[pc, r3]
   2b4d4:	6a234935 	.word	0x6a234935
   2b4d8:	6a6a6a38 	.word	0x6a6a6a38
   2b4dc:	59          	.byte	0x59
   2b4dd:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2b4de:	6923      	ldr	r3, [r4, #16]
   2b4e0:	689b      	ldr	r3, [r3, #8]
   2b4e2:	2b00      	cmp	r3, #0
   2b4e4:	d0e9      	beq.n	2b4ba <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   2b4e6:	2301      	movs	r3, #1
   2b4e8:	e7c5      	b.n	2b476 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2b4ea:	6923      	ldr	r3, [r4, #16]
   2b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b4ee:	2b00      	cmp	r3, #0
   2b4f0:	d0e3      	beq.n	2b4ba <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2b4f2:	2310      	movs	r3, #16
   2b4f4:	e7bf      	b.n	2b476 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2b4f6:	2363      	movs	r3, #99	; 0x63
   2b4f8:	4a3b      	ldr	r2, [pc, #236]	; (2b5e8 <register_events+0x1ec>)
   2b4fa:	493c      	ldr	r1, [pc, #240]	; (2b5ec <register_events+0x1f0>)
   2b4fc:	4836      	ldr	r0, [pc, #216]	; (2b5d8 <register_events+0x1dc>)
   2b4fe:	f003 fa29 	bl	2e954 <assert_print>
   2b502:	7b61      	ldrb	r1, [r4, #13]
   2b504:	483a      	ldr	r0, [pc, #232]	; (2b5f0 <register_events+0x1f4>)
   2b506:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2b50a:	f003 fa23 	bl	2e954 <assert_print>
   2b50e:	2163      	movs	r1, #99	; 0x63
   2b510:	4835      	ldr	r0, [pc, #212]	; (2b5e8 <register_events+0x1ec>)
   2b512:	f003 fa18 	bl	2e946 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2b516:	2304      	movs	r3, #4
   2b518:	e7ad      	b.n	2b476 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2b51a:	6920      	ldr	r0, [r4, #16]
   2b51c:	b950      	cbnz	r0, 2b534 <register_events+0x138>
   2b51e:	4935      	ldr	r1, [pc, #212]	; (2b5f4 <register_events+0x1f8>)
   2b520:	238d      	movs	r3, #141	; 0x8d
   2b522:	4a31      	ldr	r2, [pc, #196]	; (2b5e8 <register_events+0x1ec>)
   2b524:	482c      	ldr	r0, [pc, #176]	; (2b5d8 <register_events+0x1dc>)
   2b526:	f003 fa15 	bl	2e954 <assert_print>
   2b52a:	4833      	ldr	r0, [pc, #204]	; (2b5f8 <register_events+0x1fc>)
   2b52c:	f003 fa12 	bl	2e954 <assert_print>
   2b530:	218d      	movs	r1, #141	; 0x8d
   2b532:	e7ed      	b.n	2b510 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   2b534:	462a      	mov	r2, r5
   2b536:	4621      	mov	r1, r4
   2b538:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2b53a:	f009 fc79 	bl	34e30 <add_event>
	event->poller = poller;
   2b53e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2b540:	3701      	adds	r7, #1
   2b542:	e7a3      	b.n	2b48c <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2b544:	6920      	ldr	r0, [r4, #16]
   2b546:	b950      	cbnz	r0, 2b55e <register_events+0x162>
   2b548:	492c      	ldr	r1, [pc, #176]	; (2b5fc <register_events+0x200>)
   2b54a:	2391      	movs	r3, #145	; 0x91
   2b54c:	4a26      	ldr	r2, [pc, #152]	; (2b5e8 <register_events+0x1ec>)
   2b54e:	4822      	ldr	r0, [pc, #136]	; (2b5d8 <register_events+0x1dc>)
   2b550:	f003 fa00 	bl	2e954 <assert_print>
   2b554:	482a      	ldr	r0, [pc, #168]	; (2b600 <register_events+0x204>)
   2b556:	f003 f9fd 	bl	2e954 <assert_print>
   2b55a:	2191      	movs	r1, #145	; 0x91
   2b55c:	e7d8      	b.n	2b510 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   2b55e:	462a      	mov	r2, r5
   2b560:	4621      	mov	r1, r4
   2b562:	3014      	adds	r0, #20
   2b564:	e7e9      	b.n	2b53a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2b566:	6920      	ldr	r0, [r4, #16]
   2b568:	b950      	cbnz	r0, 2b580 <register_events+0x184>
   2b56a:	4926      	ldr	r1, [pc, #152]	; (2b604 <register_events+0x208>)
   2b56c:	2395      	movs	r3, #149	; 0x95
   2b56e:	4a1e      	ldr	r2, [pc, #120]	; (2b5e8 <register_events+0x1ec>)
   2b570:	4819      	ldr	r0, [pc, #100]	; (2b5d8 <register_events+0x1dc>)
   2b572:	f003 f9ef 	bl	2e954 <assert_print>
   2b576:	4824      	ldr	r0, [pc, #144]	; (2b608 <register_events+0x20c>)
   2b578:	f003 f9ec 	bl	2e954 <assert_print>
   2b57c:	2195      	movs	r1, #149	; 0x95
   2b57e:	e7c7      	b.n	2b510 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   2b580:	462a      	mov	r2, r5
   2b582:	4621      	mov	r1, r4
   2b584:	e7d9      	b.n	2b53a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2b586:	6920      	ldr	r0, [r4, #16]
   2b588:	b950      	cbnz	r0, 2b5a0 <register_events+0x1a4>
   2b58a:	4920      	ldr	r1, [pc, #128]	; (2b60c <register_events+0x210>)
   2b58c:	2399      	movs	r3, #153	; 0x99
   2b58e:	4a16      	ldr	r2, [pc, #88]	; (2b5e8 <register_events+0x1ec>)
   2b590:	4811      	ldr	r0, [pc, #68]	; (2b5d8 <register_events+0x1dc>)
   2b592:	f003 f9df 	bl	2e954 <assert_print>
   2b596:	481e      	ldr	r0, [pc, #120]	; (2b610 <register_events+0x214>)
   2b598:	f003 f9dc 	bl	2e954 <assert_print>
   2b59c:	2199      	movs	r1, #153	; 0x99
   2b59e:	e7b7      	b.n	2b510 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   2b5a0:	462a      	mov	r2, r5
   2b5a2:	4621      	mov	r1, r4
   2b5a4:	3028      	adds	r0, #40	; 0x28
   2b5a6:	e7c8      	b.n	2b53a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   2b5a8:	4910      	ldr	r1, [pc, #64]	; (2b5ec <register_events+0x1f0>)
   2b5aa:	23a6      	movs	r3, #166	; 0xa6
   2b5ac:	4a0e      	ldr	r2, [pc, #56]	; (2b5e8 <register_events+0x1ec>)
   2b5ae:	480a      	ldr	r0, [pc, #40]	; (2b5d8 <register_events+0x1dc>)
   2b5b0:	f003 f9d0 	bl	2e954 <assert_print>
   2b5b4:	4817      	ldr	r0, [pc, #92]	; (2b614 <register_events+0x218>)
   2b5b6:	f003 f9cd 	bl	2e954 <assert_print>
   2b5ba:	21a6      	movs	r1, #166	; 0xa6
   2b5bc:	e7a8      	b.n	2b510 <register_events+0x114>
	__asm__ volatile(
   2b5be:	f38b 8811 	msr	BASEPRI, fp
   2b5c2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b5c6:	3601      	adds	r6, #1
   2b5c8:	e723      	b.n	2b412 <register_events+0x16>
   2b5ca:	bf00      	nop
   2b5cc:	20011014 	.word	0x20011014
   2b5d0:	000385b7 	.word	0x000385b7
   2b5d4:	00038610 	.word	0x00038610
   2b5d8:	000381c3 	.word	0x000381c3
   2b5dc:	00038625 	.word	0x00038625
   2b5e0:	000385e4 	.word	0x000385e4
   2b5e4:	000385fb 	.word	0x000385fb
   2b5e8:	00040c90 	.word	0x00040c90
   2b5ec:	0003c13d 	.word	0x0003c13d
   2b5f0:	00040cb1 	.word	0x00040cb1
   2b5f4:	00040cce 	.word	0x00040cce
   2b5f8:	00040ce8 	.word	0x00040ce8
   2b5fc:	00040cfd 	.word	0x00040cfd
   2b600:	00040d19 	.word	0x00040d19
   2b604:	00040d2a 	.word	0x00040d2a
   2b608:	00040d47 	.word	0x00040d47
   2b60c:	00040d5e 	.word	0x00040d5e
   2b610:	00040d79 	.word	0x00040d79
   2b614:	00040d92 	.word	0x00040d92

0002b618 <clear_event_registrations>:
{
   2b618:	2314      	movs	r3, #20
   2b61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b61e:	4615      	mov	r5, r2
	while (num_events--) {
   2b620:	460c      	mov	r4, r1
	event->poller = NULL;
   2b622:	2600      	movs	r6, #0
   2b624:	fb03 0001 	mla	r0, r3, r1, r0
   2b628:	4f4b      	ldr	r7, [pc, #300]	; (2b758 <clear_event_registrations+0x140>)
	while (num_events--) {
   2b62a:	b90c      	cbnz	r4, 2b630 <clear_event_registrations+0x18>
}
   2b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   2b630:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2b634:	f1a0 0814 	sub.w	r8, r0, #20
   2b638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   2b63c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   2b640:	2b08      	cmp	r3, #8
   2b642:	d842      	bhi.n	2b6ca <clear_event_registrations+0xb2>
   2b644:	e8df f003 	tbb	[pc, r3]
   2b648:	41052555 	.word	0x41052555
   2b64c:	41414116 	.word	0x41414116
   2b650:	33          	.byte	0x33
   2b651:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2b652:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b656:	2b00      	cmp	r3, #0
   2b658:	d142      	bne.n	2b6e0 <clear_event_registrations+0xc8>
   2b65a:	4940      	ldr	r1, [pc, #256]	; (2b75c <clear_event_registrations+0x144>)
   2b65c:	23b6      	movs	r3, #182	; 0xb6
   2b65e:	4a40      	ldr	r2, [pc, #256]	; (2b760 <clear_event_registrations+0x148>)
   2b660:	4840      	ldr	r0, [pc, #256]	; (2b764 <clear_event_registrations+0x14c>)
   2b662:	f003 f977 	bl	2e954 <assert_print>
   2b666:	4840      	ldr	r0, [pc, #256]	; (2b768 <clear_event_registrations+0x150>)
   2b668:	f003 f974 	bl	2e954 <assert_print>
   2b66c:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2b66e:	483c      	ldr	r0, [pc, #240]	; (2b760 <clear_event_registrations+0x148>)
   2b670:	f003 f969 	bl	2e946 <assert_post_action>
   2b674:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b678:	2b00      	cmp	r3, #0
   2b67a:	d131      	bne.n	2b6e0 <clear_event_registrations+0xc8>
   2b67c:	493b      	ldr	r1, [pc, #236]	; (2b76c <clear_event_registrations+0x154>)
   2b67e:	23ba      	movs	r3, #186	; 0xba
   2b680:	4a37      	ldr	r2, [pc, #220]	; (2b760 <clear_event_registrations+0x148>)
   2b682:	4838      	ldr	r0, [pc, #224]	; (2b764 <clear_event_registrations+0x14c>)
   2b684:	f003 f966 	bl	2e954 <assert_print>
   2b688:	4839      	ldr	r0, [pc, #228]	; (2b770 <clear_event_registrations+0x158>)
   2b68a:	f003 f963 	bl	2e954 <assert_print>
   2b68e:	21ba      	movs	r1, #186	; 0xba
   2b690:	e7ed      	b.n	2b66e <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2b692:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b696:	bb1b      	cbnz	r3, 2b6e0 <clear_event_registrations+0xc8>
   2b698:	4936      	ldr	r1, [pc, #216]	; (2b774 <clear_event_registrations+0x15c>)
   2b69a:	23be      	movs	r3, #190	; 0xbe
   2b69c:	4a30      	ldr	r2, [pc, #192]	; (2b760 <clear_event_registrations+0x148>)
   2b69e:	4831      	ldr	r0, [pc, #196]	; (2b764 <clear_event_registrations+0x14c>)
   2b6a0:	f003 f958 	bl	2e954 <assert_print>
   2b6a4:	4834      	ldr	r0, [pc, #208]	; (2b778 <clear_event_registrations+0x160>)
   2b6a6:	f003 f955 	bl	2e954 <assert_print>
   2b6aa:	21be      	movs	r1, #190	; 0xbe
   2b6ac:	e7df      	b.n	2b66e <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2b6ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b6b2:	b9ab      	cbnz	r3, 2b6e0 <clear_event_registrations+0xc8>
   2b6b4:	4931      	ldr	r1, [pc, #196]	; (2b77c <clear_event_registrations+0x164>)
   2b6b6:	23c2      	movs	r3, #194	; 0xc2
   2b6b8:	4a29      	ldr	r2, [pc, #164]	; (2b760 <clear_event_registrations+0x148>)
   2b6ba:	482a      	ldr	r0, [pc, #168]	; (2b764 <clear_event_registrations+0x14c>)
   2b6bc:	f003 f94a 	bl	2e954 <assert_print>
   2b6c0:	482f      	ldr	r0, [pc, #188]	; (2b780 <clear_event_registrations+0x168>)
   2b6c2:	f003 f947 	bl	2e954 <assert_print>
   2b6c6:	21c2      	movs	r1, #194	; 0xc2
   2b6c8:	e7d1      	b.n	2b66e <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2b6ca:	492e      	ldr	r1, [pc, #184]	; (2b784 <clear_event_registrations+0x16c>)
   2b6cc:	23cf      	movs	r3, #207	; 0xcf
   2b6ce:	4a24      	ldr	r2, [pc, #144]	; (2b760 <clear_event_registrations+0x148>)
   2b6d0:	4824      	ldr	r0, [pc, #144]	; (2b764 <clear_event_registrations+0x14c>)
   2b6d2:	f003 f93f 	bl	2e954 <assert_print>
   2b6d6:	482c      	ldr	r0, [pc, #176]	; (2b788 <clear_event_registrations+0x170>)
   2b6d8:	f003 f93c 	bl	2e954 <assert_print>
   2b6dc:	21cf      	movs	r1, #207	; 0xcf
   2b6de:	e7c6      	b.n	2b66e <clear_event_registrations+0x56>
	return node->next != NULL;
   2b6e0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2b6e4:	b12b      	cbz	r3, 2b6f2 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2b6e6:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2b6ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b6ec:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2b6ee:	e940 6605 	strd	r6, r6, [r0, #-20]
   2b6f2:	4638      	mov	r0, r7
   2b6f4:	f7fd f87e 	bl	287f4 <z_spin_unlock_valid>
   2b6f8:	b960      	cbnz	r0, 2b714 <clear_event_registrations+0xfc>
   2b6fa:	23c2      	movs	r3, #194	; 0xc2
   2b6fc:	4a23      	ldr	r2, [pc, #140]	; (2b78c <clear_event_registrations+0x174>)
   2b6fe:	4924      	ldr	r1, [pc, #144]	; (2b790 <clear_event_registrations+0x178>)
   2b700:	4818      	ldr	r0, [pc, #96]	; (2b764 <clear_event_registrations+0x14c>)
   2b702:	f003 f927 	bl	2e954 <assert_print>
   2b706:	4914      	ldr	r1, [pc, #80]	; (2b758 <clear_event_registrations+0x140>)
   2b708:	4822      	ldr	r0, [pc, #136]	; (2b794 <clear_event_registrations+0x17c>)
   2b70a:	f003 f923 	bl	2e954 <assert_print>
   2b70e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b710:	481e      	ldr	r0, [pc, #120]	; (2b78c <clear_event_registrations+0x174>)
   2b712:	e7ad      	b.n	2b670 <clear_event_registrations+0x58>
   2b714:	f385 8811 	msr	BASEPRI, r5
   2b718:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b71c:	f04f 0320 	mov.w	r3, #32
   2b720:	f3ef 8511 	mrs	r5, BASEPRI
   2b724:	f383 8812 	msr	BASEPRI_MAX, r3
   2b728:	f3bf 8f6f 	isb	sy
   2b72c:	4638      	mov	r0, r7
   2b72e:	f7fd f853 	bl	287d8 <z_spin_lock_valid>
   2b732:	3c01      	subs	r4, #1
   2b734:	b958      	cbnz	r0, 2b74e <clear_event_registrations+0x136>
   2b736:	2394      	movs	r3, #148	; 0x94
   2b738:	4a14      	ldr	r2, [pc, #80]	; (2b78c <clear_event_registrations+0x174>)
   2b73a:	4917      	ldr	r1, [pc, #92]	; (2b798 <clear_event_registrations+0x180>)
   2b73c:	4809      	ldr	r0, [pc, #36]	; (2b764 <clear_event_registrations+0x14c>)
   2b73e:	f003 f909 	bl	2e954 <assert_print>
   2b742:	4905      	ldr	r1, [pc, #20]	; (2b758 <clear_event_registrations+0x140>)
   2b744:	4815      	ldr	r0, [pc, #84]	; (2b79c <clear_event_registrations+0x184>)
   2b746:	f003 f905 	bl	2e954 <assert_print>
   2b74a:	2194      	movs	r1, #148	; 0x94
   2b74c:	e7e0      	b.n	2b710 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   2b74e:	4638      	mov	r0, r7
   2b750:	f7fd f85e 	bl	28810 <z_spin_lock_set_owner>
	return k;
   2b754:	4640      	mov	r0, r8
   2b756:	e768      	b.n	2b62a <clear_event_registrations+0x12>
   2b758:	20011014 	.word	0x20011014
   2b75c:	00040cce 	.word	0x00040cce
   2b760:	00040c90 	.word	0x00040c90
   2b764:	000381c3 	.word	0x000381c3
   2b768:	00040ce8 	.word	0x00040ce8
   2b76c:	00040cfd 	.word	0x00040cfd
   2b770:	00040d19 	.word	0x00040d19
   2b774:	00040d2a 	.word	0x00040d2a
   2b778:	00040d47 	.word	0x00040d47
   2b77c:	00040d5e 	.word	0x00040d5e
   2b780:	00040d79 	.word	0x00040d79
   2b784:	0003c13d 	.word	0x0003c13d
   2b788:	00040d92 	.word	0x00040d92
   2b78c:	000385b7 	.word	0x000385b7
   2b790:	000385e4 	.word	0x000385e4
   2b794:	000385fb 	.word	0x000385fb
   2b798:	00038610 	.word	0x00038610
   2b79c:	00038625 	.word	0x00038625

0002b7a0 <k_poll_event_init>:
{
   2b7a0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2b7a2:	b162      	cbz	r2, 2b7be <k_poll_event_init+0x1e>
   2b7a4:	4917      	ldr	r1, [pc, #92]	; (2b804 <k_poll_event_init+0x64>)
   2b7a6:	232d      	movs	r3, #45	; 0x2d
   2b7a8:	4a17      	ldr	r2, [pc, #92]	; (2b808 <k_poll_event_init+0x68>)
   2b7aa:	4818      	ldr	r0, [pc, #96]	; (2b80c <k_poll_event_init+0x6c>)
   2b7ac:	f003 f8d2 	bl	2e954 <assert_print>
   2b7b0:	4817      	ldr	r0, [pc, #92]	; (2b810 <k_poll_event_init+0x70>)
   2b7b2:	f003 f8cf 	bl	2e954 <assert_print>
   2b7b6:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2b7b8:	4813      	ldr	r0, [pc, #76]	; (2b808 <k_poll_event_init+0x68>)
   2b7ba:	f003 f8c4 	bl	2e946 <assert_post_action>
   2b7be:	293f      	cmp	r1, #63	; 0x3f
   2b7c0:	d90a      	bls.n	2b7d8 <k_poll_event_init+0x38>
   2b7c2:	4914      	ldr	r1, [pc, #80]	; (2b814 <k_poll_event_init+0x74>)
   2b7c4:	232f      	movs	r3, #47	; 0x2f
   2b7c6:	4a10      	ldr	r2, [pc, #64]	; (2b808 <k_poll_event_init+0x68>)
   2b7c8:	4810      	ldr	r0, [pc, #64]	; (2b80c <k_poll_event_init+0x6c>)
   2b7ca:	f003 f8c3 	bl	2e954 <assert_print>
   2b7ce:	4812      	ldr	r0, [pc, #72]	; (2b818 <k_poll_event_init+0x78>)
   2b7d0:	f003 f8c0 	bl	2e954 <assert_print>
   2b7d4:	212f      	movs	r1, #47	; 0x2f
   2b7d6:	e7ef      	b.n	2b7b8 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   2b7d8:	b953      	cbnz	r3, 2b7f0 <k_poll_event_init+0x50>
   2b7da:	4910      	ldr	r1, [pc, #64]	; (2b81c <k_poll_event_init+0x7c>)
   2b7dc:	2330      	movs	r3, #48	; 0x30
   2b7de:	4a0a      	ldr	r2, [pc, #40]	; (2b808 <k_poll_event_init+0x68>)
   2b7e0:	480a      	ldr	r0, [pc, #40]	; (2b80c <k_poll_event_init+0x6c>)
   2b7e2:	f003 f8b7 	bl	2e954 <assert_print>
   2b7e6:	480e      	ldr	r0, [pc, #56]	; (2b820 <k_poll_event_init+0x80>)
   2b7e8:	f003 f8b4 	bl	2e954 <assert_print>
   2b7ec:	2130      	movs	r1, #48	; 0x30
   2b7ee:	e7e3      	b.n	2b7b8 <k_poll_event_init+0x18>
	event->poller = NULL;
   2b7f0:	6082      	str	r2, [r0, #8]
	event->type = type;
   2b7f2:	0209      	lsls	r1, r1, #8
   2b7f4:	7b02      	ldrb	r2, [r0, #12]
   2b7f6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2b7fa:	4311      	orrs	r1, r2
	event->obj = obj;
   2b7fc:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   2b800:	bd08      	pop	{r3, pc}
   2b802:	bf00      	nop
   2b804:	00040da8 	.word	0x00040da8
   2b808:	00040c90 	.word	0x00040c90
   2b80c:	000381c3 	.word	0x000381c3
   2b810:	00040dc8 	.word	0x00040dc8
   2b814:	00040dee 	.word	0x00040dee
   2b818:	00040e12 	.word	0x00040e12
   2b81c:	0003df83 	.word	0x0003df83
   2b820:	00040e22 	.word	0x00040e22

0002b824 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2b824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b828:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2b82a:	4b5c      	ldr	r3, [pc, #368]	; (2b99c <z_impl_k_poll+0x178>)
{
   2b82c:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   2b82e:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   2b832:	2301      	movs	r3, #1
{
   2b834:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   2b836:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2b83a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2b83e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   2b842:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2b846:	f1bb 0f00 	cmp.w	fp, #0
   2b84a:	d00e      	beq.n	2b86a <z_impl_k_poll+0x46>
   2b84c:	4954      	ldr	r1, [pc, #336]	; (2b9a0 <z_impl_k_poll+0x17c>)
   2b84e:	f240 132d 	movw	r3, #301	; 0x12d
   2b852:	4a54      	ldr	r2, [pc, #336]	; (2b9a4 <z_impl_k_poll+0x180>)
   2b854:	4854      	ldr	r0, [pc, #336]	; (2b9a8 <z_impl_k_poll+0x184>)
   2b856:	f003 f87d 	bl	2e954 <assert_print>
   2b85a:	4854      	ldr	r0, [pc, #336]	; (2b9ac <z_impl_k_poll+0x188>)
   2b85c:	f003 f87a 	bl	2e954 <assert_print>
   2b860:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   2b864:	484f      	ldr	r0, [pc, #316]	; (2b9a4 <z_impl_k_poll+0x180>)
   2b866:	f003 f86e 	bl	2e946 <assert_post_action>
   2b86a:	b960      	cbnz	r0, 2b886 <z_impl_k_poll+0x62>
   2b86c:	4950      	ldr	r1, [pc, #320]	; (2b9b0 <z_impl_k_poll+0x18c>)
   2b86e:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2b872:	4a4c      	ldr	r2, [pc, #304]	; (2b9a4 <z_impl_k_poll+0x180>)
   2b874:	484c      	ldr	r0, [pc, #304]	; (2b9a8 <z_impl_k_poll+0x184>)
   2b876:	f003 f86d 	bl	2e954 <assert_print>
   2b87a:	484e      	ldr	r0, [pc, #312]	; (2b9b4 <z_impl_k_poll+0x190>)
   2b87c:	f003 f86a 	bl	2e954 <assert_print>
   2b880:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2b884:	e7ee      	b.n	2b864 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   2b886:	2900      	cmp	r1, #0
   2b888:	da0c      	bge.n	2b8a4 <z_impl_k_poll+0x80>
   2b88a:	494b      	ldr	r1, [pc, #300]	; (2b9b8 <z_impl_k_poll+0x194>)
   2b88c:	f240 132f 	movw	r3, #303	; 0x12f
   2b890:	4a44      	ldr	r2, [pc, #272]	; (2b9a4 <z_impl_k_poll+0x180>)
   2b892:	4845      	ldr	r0, [pc, #276]	; (2b9a8 <z_impl_k_poll+0x184>)
   2b894:	f003 f85e 	bl	2e954 <assert_print>
   2b898:	4848      	ldr	r0, [pc, #288]	; (2b9bc <z_impl_k_poll+0x198>)
   2b89a:	f003 f85b 	bl	2e954 <assert_print>
   2b89e:	f240 112f 	movw	r1, #303	; 0x12f
   2b8a2:	e7df      	b.n	2b864 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2b8a4:	ea57 0306 	orrs.w	r3, r7, r6
   2b8a8:	bf0c      	ite	eq
   2b8aa:	2301      	moveq	r3, #1
   2b8ac:	2300      	movne	r3, #0
   2b8ae:	f7ff fda5 	bl	2b3fc <register_events>
   2b8b2:	4681      	mov	r9, r0
   2b8b4:	f04f 0320 	mov.w	r3, #32
   2b8b8:	f3ef 8a11 	mrs	sl, BASEPRI
   2b8bc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b8c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b8c4:	483e      	ldr	r0, [pc, #248]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b8c6:	f7fc ff87 	bl	287d8 <z_spin_lock_valid>
   2b8ca:	b960      	cbnz	r0, 2b8e6 <z_impl_k_poll+0xc2>
   2b8cc:	2394      	movs	r3, #148	; 0x94
   2b8ce:	4a3d      	ldr	r2, [pc, #244]	; (2b9c4 <z_impl_k_poll+0x1a0>)
   2b8d0:	493d      	ldr	r1, [pc, #244]	; (2b9c8 <z_impl_k_poll+0x1a4>)
   2b8d2:	4835      	ldr	r0, [pc, #212]	; (2b9a8 <z_impl_k_poll+0x184>)
   2b8d4:	f003 f83e 	bl	2e954 <assert_print>
   2b8d8:	4939      	ldr	r1, [pc, #228]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b8da:	483c      	ldr	r0, [pc, #240]	; (2b9cc <z_impl_k_poll+0x1a8>)
   2b8dc:	f003 f83a 	bl	2e954 <assert_print>
   2b8e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b8e2:	4838      	ldr	r0, [pc, #224]	; (2b9c4 <z_impl_k_poll+0x1a0>)
   2b8e4:	e7bf      	b.n	2b866 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   2b8e6:	4836      	ldr	r0, [pc, #216]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b8e8:	f7fc ff92 	bl	28810 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2b8ec:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2b8f0:	b9e4      	cbnz	r4, 2b92c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2b8f2:	4628      	mov	r0, r5
   2b8f4:	4652      	mov	r2, sl
   2b8f6:	4649      	mov	r1, r9
   2b8f8:	f7ff fe8e 	bl	2b618 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b8fc:	4830      	ldr	r0, [pc, #192]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b8fe:	f7fc ff79 	bl	287f4 <z_spin_unlock_valid>
   2b902:	b958      	cbnz	r0, 2b91c <z_impl_k_poll+0xf8>
   2b904:	23c2      	movs	r3, #194	; 0xc2
   2b906:	4a2f      	ldr	r2, [pc, #188]	; (2b9c4 <z_impl_k_poll+0x1a0>)
   2b908:	4931      	ldr	r1, [pc, #196]	; (2b9d0 <z_impl_k_poll+0x1ac>)
   2b90a:	4827      	ldr	r0, [pc, #156]	; (2b9a8 <z_impl_k_poll+0x184>)
   2b90c:	f003 f822 	bl	2e954 <assert_print>
   2b910:	492b      	ldr	r1, [pc, #172]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b912:	4830      	ldr	r0, [pc, #192]	; (2b9d4 <z_impl_k_poll+0x1b0>)
   2b914:	f003 f81e 	bl	2e954 <assert_print>
   2b918:	21c2      	movs	r1, #194	; 0xc2
   2b91a:	e7e2      	b.n	2b8e2 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   2b91c:	f38a 8811 	msr	BASEPRI, sl
   2b920:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2b924:	4620      	mov	r0, r4
   2b926:	b003      	add	sp, #12
   2b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b92c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   2b930:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b934:	d10b      	bne.n	2b94e <z_impl_k_poll+0x12a>
   2b936:	4822      	ldr	r0, [pc, #136]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b938:	f7fc ff5c 	bl	287f4 <z_spin_unlock_valid>
   2b93c:	2800      	cmp	r0, #0
   2b93e:	d0e1      	beq.n	2b904 <z_impl_k_poll+0xe0>
   2b940:	f38a 8811 	msr	BASEPRI, sl
   2b944:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2b948:	f06f 040a 	mvn.w	r4, #10
   2b94c:	e7ea      	b.n	2b924 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2b94e:	4651      	mov	r1, sl
   2b950:	e9cd 7600 	strd	r7, r6, [sp]
   2b954:	4a20      	ldr	r2, [pc, #128]	; (2b9d8 <z_impl_k_poll+0x1b4>)
   2b956:	481a      	ldr	r0, [pc, #104]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b958:	f7fe fc36 	bl	2a1c8 <z_pend_curr>
   2b95c:	4604      	mov	r4, r0
	__asm__ volatile(
   2b95e:	f04f 0320 	mov.w	r3, #32
   2b962:	f3ef 8611 	mrs	r6, BASEPRI
   2b966:	f383 8812 	msr	BASEPRI_MAX, r3
   2b96a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b96e:	4814      	ldr	r0, [pc, #80]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b970:	f7fc ff32 	bl	287d8 <z_spin_lock_valid>
   2b974:	2800      	cmp	r0, #0
   2b976:	d0a9      	beq.n	2b8cc <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   2b978:	4811      	ldr	r0, [pc, #68]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b97a:	f7fc ff49 	bl	28810 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2b97e:	4628      	mov	r0, r5
   2b980:	4632      	mov	r2, r6
   2b982:	4649      	mov	r1, r9
   2b984:	f7ff fe48 	bl	2b618 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b988:	480d      	ldr	r0, [pc, #52]	; (2b9c0 <z_impl_k_poll+0x19c>)
   2b98a:	f7fc ff33 	bl	287f4 <z_spin_unlock_valid>
   2b98e:	2800      	cmp	r0, #0
   2b990:	d0b8      	beq.n	2b904 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2b992:	f386 8811 	msr	BASEPRI, r6
   2b996:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2b99a:	e7c3      	b.n	2b924 <z_impl_k_poll+0x100>
   2b99c:	20010fc0 	.word	0x20010fc0
   2b9a0:	00040680 	.word	0x00040680
   2b9a4:	00040c90 	.word	0x00040c90
   2b9a8:	000381c3 	.word	0x000381c3
   2b9ac:	00038b19 	.word	0x00038b19
   2b9b0:	00040e3c 	.word	0x00040e3c
   2b9b4:	00040e52 	.word	0x00040e52
   2b9b8:	00040e61 	.word	0x00040e61
   2b9bc:	00040e71 	.word	0x00040e71
   2b9c0:	20011014 	.word	0x20011014
   2b9c4:	000385b7 	.word	0x000385b7
   2b9c8:	00038610 	.word	0x00038610
   2b9cc:	00038625 	.word	0x00038625
   2b9d0:	000385e4 	.word	0x000385e4
   2b9d4:	000385fb 	.word	0x000385fb
   2b9d8:	2000ca8c 	.word	0x2000ca8c

0002b9dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2b9dc:	b570      	push	{r4, r5, r6, lr}
   2b9de:	4604      	mov	r4, r0
   2b9e0:	460d      	mov	r5, r1
	__asm__ volatile(
   2b9e2:	f04f 0320 	mov.w	r3, #32
   2b9e6:	f3ef 8611 	mrs	r6, BASEPRI
   2b9ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2b9ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b9f2:	4820      	ldr	r0, [pc, #128]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2b9f4:	f7fc fef0 	bl	287d8 <z_spin_lock_valid>
   2b9f8:	b968      	cbnz	r0, 2ba16 <z_impl_k_poll_signal_raise+0x3a>
   2b9fa:	2394      	movs	r3, #148	; 0x94
   2b9fc:	4a1e      	ldr	r2, [pc, #120]	; (2ba78 <z_impl_k_poll_signal_raise+0x9c>)
   2b9fe:	491f      	ldr	r1, [pc, #124]	; (2ba7c <z_impl_k_poll_signal_raise+0xa0>)
   2ba00:	481f      	ldr	r0, [pc, #124]	; (2ba80 <z_impl_k_poll_signal_raise+0xa4>)
   2ba02:	f002 ffa7 	bl	2e954 <assert_print>
   2ba06:	491b      	ldr	r1, [pc, #108]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2ba08:	481e      	ldr	r0, [pc, #120]	; (2ba84 <z_impl_k_poll_signal_raise+0xa8>)
   2ba0a:	f002 ffa3 	bl	2e954 <assert_print>
   2ba0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ba10:	4819      	ldr	r0, [pc, #100]	; (2ba78 <z_impl_k_poll_signal_raise+0x9c>)
   2ba12:	f002 ff98 	bl	2e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ba16:	4817      	ldr	r0, [pc, #92]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2ba18:	f7fc fefa 	bl	28810 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   2ba1c:	2101      	movs	r1, #1
	return list->head == list;
   2ba1e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2ba20:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2ba22:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2ba24:	60a1      	str	r1, [r4, #8]
   2ba26:	d10f      	bne.n	2ba48 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ba28:	4812      	ldr	r0, [pc, #72]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2ba2a:	f7fc fee3 	bl	287f4 <z_spin_unlock_valid>
   2ba2e:	b9d8      	cbnz	r0, 2ba68 <z_impl_k_poll_signal_raise+0x8c>
   2ba30:	23c2      	movs	r3, #194	; 0xc2
   2ba32:	4a11      	ldr	r2, [pc, #68]	; (2ba78 <z_impl_k_poll_signal_raise+0x9c>)
   2ba34:	4914      	ldr	r1, [pc, #80]	; (2ba88 <z_impl_k_poll_signal_raise+0xac>)
   2ba36:	4812      	ldr	r0, [pc, #72]	; (2ba80 <z_impl_k_poll_signal_raise+0xa4>)
   2ba38:	f002 ff8c 	bl	2e954 <assert_print>
   2ba3c:	490d      	ldr	r1, [pc, #52]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2ba3e:	4813      	ldr	r0, [pc, #76]	; (2ba8c <z_impl_k_poll_signal_raise+0xb0>)
   2ba40:	f002 ff88 	bl	2e954 <assert_print>
   2ba44:	21c2      	movs	r1, #194	; 0xc2
   2ba46:	e7e3      	b.n	2ba10 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   2ba48:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ba4c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ba4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ba50:	2300      	movs	r3, #0
	node->prev = NULL;
   2ba52:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2ba56:	f009 fa1c 	bl	34e92 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2ba5a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2ba5c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2ba5e:	4805      	ldr	r0, [pc, #20]	; (2ba74 <z_impl_k_poll_signal_raise+0x98>)
   2ba60:	f7fe f8f6 	bl	29c50 <z_reschedule>
	return rc;
}
   2ba64:	4620      	mov	r0, r4
   2ba66:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2ba68:	f386 8811 	msr	BASEPRI, r6
   2ba6c:	f3bf 8f6f 	isb	sy
		return 0;
   2ba70:	2400      	movs	r4, #0
   2ba72:	e7f7      	b.n	2ba64 <z_impl_k_poll_signal_raise+0x88>
   2ba74:	20011014 	.word	0x20011014
   2ba78:	000385b7 	.word	0x000385b7
   2ba7c:	00038610 	.word	0x00038610
   2ba80:	000381c3 	.word	0x000381c3
   2ba84:	00038625 	.word	0x00038625
   2ba88:	000385e4 	.word	0x000385e4
   2ba8c:	000385fb 	.word	0x000385fb

0002ba90 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2ba90:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2ba92:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2ba96:	4606      	mov	r6, r0
   2ba98:	460d      	mov	r5, r1
   2ba9a:	d220      	bcs.n	2bade <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2ba9c:	f04f 0800 	mov.w	r8, #0
   2baa0:	f04f 0900 	mov.w	r9, #0
   2baa4:	f041 0104 	orr.w	r1, r1, #4
   2baa8:	e9cd 8900 	strd	r8, r9, [sp]
   2baac:	f7fc fb90 	bl	281d0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2bab0:	4604      	mov	r4, r0
   2bab2:	b1a0      	cbz	r0, 2bade <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   2bab4:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2bab8:	b195      	cbz	r5, 2bae0 <z_heap_aligned_alloc+0x50>
   2baba:	1e6b      	subs	r3, r5, #1
   2babc:	421c      	tst	r4, r3
   2babe:	d00f      	beq.n	2bae0 <z_heap_aligned_alloc+0x50>
   2bac0:	2325      	movs	r3, #37	; 0x25
   2bac2:	4a09      	ldr	r2, [pc, #36]	; (2bae8 <z_heap_aligned_alloc+0x58>)
   2bac4:	4909      	ldr	r1, [pc, #36]	; (2baec <z_heap_aligned_alloc+0x5c>)
   2bac6:	480a      	ldr	r0, [pc, #40]	; (2baf0 <z_heap_aligned_alloc+0x60>)
   2bac8:	f002 ff44 	bl	2e954 <assert_print>
   2bacc:	4621      	mov	r1, r4
   2bace:	4809      	ldr	r0, [pc, #36]	; (2baf4 <z_heap_aligned_alloc+0x64>)
   2bad0:	462a      	mov	r2, r5
   2bad2:	f002 ff3f 	bl	2e954 <assert_print>
   2bad6:	2125      	movs	r1, #37	; 0x25
   2bad8:	4803      	ldr	r0, [pc, #12]	; (2bae8 <z_heap_aligned_alloc+0x58>)
   2bada:	f002 ff34 	bl	2e946 <assert_post_action>
		return NULL;
   2bade:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2bae0:	4620      	mov	r0, r4
   2bae2:	b002      	add	sp, #8
   2bae4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2bae8:	00040e7e 	.word	0x00040e7e
   2baec:	00040ea2 	.word	0x00040ea2
   2baf0:	000381c3 	.word	0x000381c3
   2baf4:	00040ed4 	.word	0x00040ed4

0002baf8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   2baf8:	2803      	cmp	r0, #3
{
   2bafa:	460a      	mov	r2, r1
   2bafc:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2bafe:	d901      	bls.n	2bb04 <k_aligned_alloc+0xc>
   2bb00:	0783      	lsls	r3, r0, #30
   2bb02:	d00c      	beq.n	2bb1e <k_aligned_alloc+0x26>
   2bb04:	4910      	ldr	r1, [pc, #64]	; (2bb48 <k_aligned_alloc+0x50>)
   2bb06:	2342      	movs	r3, #66	; 0x42
   2bb08:	4a10      	ldr	r2, [pc, #64]	; (2bb4c <k_aligned_alloc+0x54>)
   2bb0a:	4811      	ldr	r0, [pc, #68]	; (2bb50 <k_aligned_alloc+0x58>)
   2bb0c:	f002 ff22 	bl	2e954 <assert_print>
   2bb10:	4810      	ldr	r0, [pc, #64]	; (2bb54 <k_aligned_alloc+0x5c>)
   2bb12:	f002 ff1f 	bl	2e954 <assert_print>
   2bb16:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2bb18:	480c      	ldr	r0, [pc, #48]	; (2bb4c <k_aligned_alloc+0x54>)
   2bb1a:	f002 ff14 	bl	2e946 <assert_post_action>
   2bb1e:	1e43      	subs	r3, r0, #1
   2bb20:	4203      	tst	r3, r0
   2bb22:	d00a      	beq.n	2bb3a <k_aligned_alloc+0x42>
   2bb24:	490c      	ldr	r1, [pc, #48]	; (2bb58 <k_aligned_alloc+0x60>)
   2bb26:	2346      	movs	r3, #70	; 0x46
   2bb28:	4a08      	ldr	r2, [pc, #32]	; (2bb4c <k_aligned_alloc+0x54>)
   2bb2a:	4809      	ldr	r0, [pc, #36]	; (2bb50 <k_aligned_alloc+0x58>)
   2bb2c:	f002 ff12 	bl	2e954 <assert_print>
   2bb30:	480a      	ldr	r0, [pc, #40]	; (2bb5c <k_aligned_alloc+0x64>)
   2bb32:	f002 ff0f 	bl	2e954 <assert_print>
   2bb36:	2146      	movs	r1, #70	; 0x46
   2bb38:	e7ee      	b.n	2bb18 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2bb3a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   2bb3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2bb40:	4807      	ldr	r0, [pc, #28]	; (2bb60 <k_aligned_alloc+0x68>)
   2bb42:	f7ff bfa5 	b.w	2ba90 <z_heap_aligned_alloc>
   2bb46:	bf00      	nop
   2bb48:	00040efc 	.word	0x00040efc
   2bb4c:	00040e7e 	.word	0x00040e7e
   2bb50:	000381c3 	.word	0x000381c3
   2bb54:	00040f39 	.word	0x00040f39
   2bb58:	00038421 	.word	0x00038421
   2bb5c:	0003843c 	.word	0x0003843c
   2bb60:	2000ce24 	.word	0x2000ce24

0002bb64 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2bb64:	4b01      	ldr	r3, [pc, #4]	; (2bb6c <k_thread_system_pool_assign+0x8>)
   2bb66:	6743      	str	r3, [r0, #116]	; 0x74
}
   2bb68:	4770      	bx	lr
   2bb6a:	bf00      	nop
   2bb6c:	2000ce24 	.word	0x2000ce24

0002bb70 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2bb70:	b538      	push	{r3, r4, r5, lr}
   2bb72:	4604      	mov	r4, r0
   2bb74:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2bb76:	f009 f807 	bl	34b88 <k_is_in_isr>
   2bb7a:	b920      	cbnz	r0, 2bb86 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2bb7c:	4b06      	ldr	r3, [pc, #24]	; (2bb98 <z_thread_aligned_alloc+0x28>)
   2bb7e:	689b      	ldr	r3, [r3, #8]
   2bb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2bb82:	b90b      	cbnz	r3, 2bb88 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2bb84:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2bb86:	4b05      	ldr	r3, [pc, #20]	; (2bb9c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   2bb88:	462a      	mov	r2, r5
   2bb8a:	4621      	mov	r1, r4
   2bb8c:	4618      	mov	r0, r3
}
   2bb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2bb92:	f7ff bf7d 	b.w	2ba90 <z_heap_aligned_alloc>
   2bb96:	bf00      	nop
   2bb98:	20010fc0 	.word	0x20010fc0
   2bb9c:	2000ce24 	.word	0x2000ce24

0002bba0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2bba0:	4801      	ldr	r0, [pc, #4]	; (2bba8 <boot_banner+0x8>)
   2bba2:	f002 bcfa 	b.w	2e59a <printk>
   2bba6:	bf00      	nop
   2bba8:	00040f66 	.word	0x00040f66

0002bbac <malloc>:
   2bbac:	4b02      	ldr	r3, [pc, #8]	; (2bbb8 <malloc+0xc>)
   2bbae:	4601      	mov	r1, r0
   2bbb0:	6818      	ldr	r0, [r3, #0]
   2bbb2:	f000 b855 	b.w	2bc60 <_malloc_r>
   2bbb6:	bf00      	nop
   2bbb8:	2000ca94 	.word	0x2000ca94

0002bbbc <free>:
   2bbbc:	4b02      	ldr	r3, [pc, #8]	; (2bbc8 <free+0xc>)
   2bbbe:	4601      	mov	r1, r0
   2bbc0:	6818      	ldr	r0, [r3, #0]
   2bbc2:	f000 b803 	b.w	2bbcc <_free_r>
   2bbc6:	bf00      	nop
   2bbc8:	2000ca94 	.word	0x2000ca94

0002bbcc <_free_r>:
   2bbcc:	b538      	push	{r3, r4, r5, lr}
   2bbce:	4605      	mov	r5, r0
   2bbd0:	2900      	cmp	r1, #0
   2bbd2:	d041      	beq.n	2bc58 <_free_r+0x8c>
   2bbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2bbd8:	1f0c      	subs	r4, r1, #4
   2bbda:	2b00      	cmp	r3, #0
   2bbdc:	bfb8      	it	lt
   2bbde:	18e4      	addlt	r4, r4, r3
   2bbe0:	f001 fade 	bl	2d1a0 <__malloc_lock>
   2bbe4:	4a1d      	ldr	r2, [pc, #116]	; (2bc5c <_free_r+0x90>)
   2bbe6:	6813      	ldr	r3, [r2, #0]
   2bbe8:	b933      	cbnz	r3, 2bbf8 <_free_r+0x2c>
   2bbea:	6063      	str	r3, [r4, #4]
   2bbec:	6014      	str	r4, [r2, #0]
   2bbee:	4628      	mov	r0, r5
   2bbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bbf4:	f001 bada 	b.w	2d1ac <__malloc_unlock>
   2bbf8:	42a3      	cmp	r3, r4
   2bbfa:	d908      	bls.n	2bc0e <_free_r+0x42>
   2bbfc:	6820      	ldr	r0, [r4, #0]
   2bbfe:	1821      	adds	r1, r4, r0
   2bc00:	428b      	cmp	r3, r1
   2bc02:	bf01      	itttt	eq
   2bc04:	6819      	ldreq	r1, [r3, #0]
   2bc06:	685b      	ldreq	r3, [r3, #4]
   2bc08:	1809      	addeq	r1, r1, r0
   2bc0a:	6021      	streq	r1, [r4, #0]
   2bc0c:	e7ed      	b.n	2bbea <_free_r+0x1e>
   2bc0e:	461a      	mov	r2, r3
   2bc10:	685b      	ldr	r3, [r3, #4]
   2bc12:	b10b      	cbz	r3, 2bc18 <_free_r+0x4c>
   2bc14:	42a3      	cmp	r3, r4
   2bc16:	d9fa      	bls.n	2bc0e <_free_r+0x42>
   2bc18:	6811      	ldr	r1, [r2, #0]
   2bc1a:	1850      	adds	r0, r2, r1
   2bc1c:	42a0      	cmp	r0, r4
   2bc1e:	d10b      	bne.n	2bc38 <_free_r+0x6c>
   2bc20:	6820      	ldr	r0, [r4, #0]
   2bc22:	4401      	add	r1, r0
   2bc24:	1850      	adds	r0, r2, r1
   2bc26:	6011      	str	r1, [r2, #0]
   2bc28:	4283      	cmp	r3, r0
   2bc2a:	d1e0      	bne.n	2bbee <_free_r+0x22>
   2bc2c:	6818      	ldr	r0, [r3, #0]
   2bc2e:	685b      	ldr	r3, [r3, #4]
   2bc30:	4408      	add	r0, r1
   2bc32:	6053      	str	r3, [r2, #4]
   2bc34:	6010      	str	r0, [r2, #0]
   2bc36:	e7da      	b.n	2bbee <_free_r+0x22>
   2bc38:	d902      	bls.n	2bc40 <_free_r+0x74>
   2bc3a:	230c      	movs	r3, #12
   2bc3c:	602b      	str	r3, [r5, #0]
   2bc3e:	e7d6      	b.n	2bbee <_free_r+0x22>
   2bc40:	6820      	ldr	r0, [r4, #0]
   2bc42:	1821      	adds	r1, r4, r0
   2bc44:	428b      	cmp	r3, r1
   2bc46:	bf02      	ittt	eq
   2bc48:	6819      	ldreq	r1, [r3, #0]
   2bc4a:	685b      	ldreq	r3, [r3, #4]
   2bc4c:	1809      	addeq	r1, r1, r0
   2bc4e:	6063      	str	r3, [r4, #4]
   2bc50:	bf08      	it	eq
   2bc52:	6021      	streq	r1, [r4, #0]
   2bc54:	6054      	str	r4, [r2, #4]
   2bc56:	e7ca      	b.n	2bbee <_free_r+0x22>
   2bc58:	bd38      	pop	{r3, r4, r5, pc}
   2bc5a:	bf00      	nop
   2bc5c:	2001101c 	.word	0x2001101c

0002bc60 <_malloc_r>:
   2bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc62:	1ccd      	adds	r5, r1, #3
   2bc64:	4606      	mov	r6, r0
   2bc66:	f025 0503 	bic.w	r5, r5, #3
   2bc6a:	3508      	adds	r5, #8
   2bc6c:	2d0c      	cmp	r5, #12
   2bc6e:	bf38      	it	cc
   2bc70:	250c      	movcc	r5, #12
   2bc72:	2d00      	cmp	r5, #0
   2bc74:	db01      	blt.n	2bc7a <_malloc_r+0x1a>
   2bc76:	42a9      	cmp	r1, r5
   2bc78:	d903      	bls.n	2bc82 <_malloc_r+0x22>
   2bc7a:	230c      	movs	r3, #12
   2bc7c:	6033      	str	r3, [r6, #0]
   2bc7e:	2000      	movs	r0, #0
   2bc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bc82:	f001 fa8d 	bl	2d1a0 <__malloc_lock>
   2bc86:	4921      	ldr	r1, [pc, #132]	; (2bd0c <_malloc_r+0xac>)
   2bc88:	680a      	ldr	r2, [r1, #0]
   2bc8a:	4614      	mov	r4, r2
   2bc8c:	b99c      	cbnz	r4, 2bcb6 <_malloc_r+0x56>
   2bc8e:	4f20      	ldr	r7, [pc, #128]	; (2bd10 <_malloc_r+0xb0>)
   2bc90:	683b      	ldr	r3, [r7, #0]
   2bc92:	b923      	cbnz	r3, 2bc9e <_malloc_r+0x3e>
   2bc94:	4621      	mov	r1, r4
   2bc96:	4630      	mov	r0, r6
   2bc98:	f000 fba8 	bl	2c3ec <_sbrk_r>
   2bc9c:	6038      	str	r0, [r7, #0]
   2bc9e:	4629      	mov	r1, r5
   2bca0:	4630      	mov	r0, r6
   2bca2:	f000 fba3 	bl	2c3ec <_sbrk_r>
   2bca6:	1c43      	adds	r3, r0, #1
   2bca8:	d123      	bne.n	2bcf2 <_malloc_r+0x92>
   2bcaa:	230c      	movs	r3, #12
   2bcac:	4630      	mov	r0, r6
   2bcae:	6033      	str	r3, [r6, #0]
   2bcb0:	f001 fa7c 	bl	2d1ac <__malloc_unlock>
   2bcb4:	e7e3      	b.n	2bc7e <_malloc_r+0x1e>
   2bcb6:	6823      	ldr	r3, [r4, #0]
   2bcb8:	1b5b      	subs	r3, r3, r5
   2bcba:	d417      	bmi.n	2bcec <_malloc_r+0x8c>
   2bcbc:	2b0b      	cmp	r3, #11
   2bcbe:	d903      	bls.n	2bcc8 <_malloc_r+0x68>
   2bcc0:	6023      	str	r3, [r4, #0]
   2bcc2:	441c      	add	r4, r3
   2bcc4:	6025      	str	r5, [r4, #0]
   2bcc6:	e004      	b.n	2bcd2 <_malloc_r+0x72>
   2bcc8:	6863      	ldr	r3, [r4, #4]
   2bcca:	42a2      	cmp	r2, r4
   2bccc:	bf0c      	ite	eq
   2bcce:	600b      	streq	r3, [r1, #0]
   2bcd0:	6053      	strne	r3, [r2, #4]
   2bcd2:	4630      	mov	r0, r6
   2bcd4:	f001 fa6a 	bl	2d1ac <__malloc_unlock>
   2bcd8:	f104 000b 	add.w	r0, r4, #11
   2bcdc:	1d23      	adds	r3, r4, #4
   2bcde:	f020 0007 	bic.w	r0, r0, #7
   2bce2:	1ac2      	subs	r2, r0, r3
   2bce4:	bf1c      	itt	ne
   2bce6:	1a1b      	subne	r3, r3, r0
   2bce8:	50a3      	strne	r3, [r4, r2]
   2bcea:	e7c9      	b.n	2bc80 <_malloc_r+0x20>
   2bcec:	4622      	mov	r2, r4
   2bcee:	6864      	ldr	r4, [r4, #4]
   2bcf0:	e7cc      	b.n	2bc8c <_malloc_r+0x2c>
   2bcf2:	1cc4      	adds	r4, r0, #3
   2bcf4:	f024 0403 	bic.w	r4, r4, #3
   2bcf8:	42a0      	cmp	r0, r4
   2bcfa:	d0e3      	beq.n	2bcc4 <_malloc_r+0x64>
   2bcfc:	1a21      	subs	r1, r4, r0
   2bcfe:	4630      	mov	r0, r6
   2bd00:	f000 fb74 	bl	2c3ec <_sbrk_r>
   2bd04:	3001      	adds	r0, #1
   2bd06:	d1dd      	bne.n	2bcc4 <_malloc_r+0x64>
   2bd08:	e7cf      	b.n	2bcaa <_malloc_r+0x4a>
   2bd0a:	bf00      	nop
   2bd0c:	2001101c 	.word	0x2001101c
   2bd10:	20011018 	.word	0x20011018

0002bd14 <_printf_float>:
   2bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd18:	b091      	sub	sp, #68	; 0x44
   2bd1a:	460c      	mov	r4, r1
   2bd1c:	4616      	mov	r6, r2
   2bd1e:	461f      	mov	r7, r3
   2bd20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2bd24:	4605      	mov	r5, r0
   2bd26:	f001 f9e5 	bl	2d0f4 <_localeconv_r>
   2bd2a:	6803      	ldr	r3, [r0, #0]
   2bd2c:	4618      	mov	r0, r3
   2bd2e:	9308      	str	r3, [sp, #32]
   2bd30:	f7dd faf3 	bl	931a <strlen>
   2bd34:	2300      	movs	r3, #0
   2bd36:	9009      	str	r0, [sp, #36]	; 0x24
   2bd38:	930e      	str	r3, [sp, #56]	; 0x38
   2bd3a:	f8d8 3000 	ldr.w	r3, [r8]
   2bd3e:	f894 a018 	ldrb.w	sl, [r4, #24]
   2bd42:	3307      	adds	r3, #7
   2bd44:	f8d4 b000 	ldr.w	fp, [r4]
   2bd48:	f023 0307 	bic.w	r3, r3, #7
   2bd4c:	f103 0208 	add.w	r2, r3, #8
   2bd50:	f8c8 2000 	str.w	r2, [r8]
   2bd54:	f04f 32ff 	mov.w	r2, #4294967295
   2bd58:	e9d3 8900 	ldrd	r8, r9, [r3]
   2bd5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   2bd60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2bd64:	930b      	str	r3, [sp, #44]	; 0x2c
   2bd66:	4b9d      	ldr	r3, [pc, #628]	; (2bfdc <_printf_float+0x2c8>)
   2bd68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2bd6c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   2bd70:	f7dc ff70 	bl	8c54 <__aeabi_dcmpun>
   2bd74:	bb70      	cbnz	r0, 2bdd4 <_printf_float+0xc0>
   2bd76:	f04f 32ff 	mov.w	r2, #4294967295
   2bd7a:	4b98      	ldr	r3, [pc, #608]	; (2bfdc <_printf_float+0x2c8>)
   2bd7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2bd80:	f7dc ff4a 	bl	8c18 <__aeabi_dcmple>
   2bd84:	bb30      	cbnz	r0, 2bdd4 <_printf_float+0xc0>
   2bd86:	2200      	movs	r2, #0
   2bd88:	2300      	movs	r3, #0
   2bd8a:	4640      	mov	r0, r8
   2bd8c:	4649      	mov	r1, r9
   2bd8e:	f7dc ff39 	bl	8c04 <__aeabi_dcmplt>
   2bd92:	b110      	cbz	r0, 2bd9a <_printf_float+0x86>
   2bd94:	232d      	movs	r3, #45	; 0x2d
   2bd96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2bd9a:	4a91      	ldr	r2, [pc, #580]	; (2bfe0 <_printf_float+0x2cc>)
   2bd9c:	4b91      	ldr	r3, [pc, #580]	; (2bfe4 <_printf_float+0x2d0>)
   2bd9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2bda2:	bf94      	ite	ls
   2bda4:	4690      	movls	r8, r2
   2bda6:	4698      	movhi	r8, r3
   2bda8:	2303      	movs	r3, #3
   2bdaa:	f04f 0900 	mov.w	r9, #0
   2bdae:	6123      	str	r3, [r4, #16]
   2bdb0:	f02b 0304 	bic.w	r3, fp, #4
   2bdb4:	6023      	str	r3, [r4, #0]
   2bdb6:	4633      	mov	r3, r6
   2bdb8:	aa0f      	add	r2, sp, #60	; 0x3c
   2bdba:	4621      	mov	r1, r4
   2bdbc:	4628      	mov	r0, r5
   2bdbe:	9700      	str	r7, [sp, #0]
   2bdc0:	f009 f9dc 	bl	3517c <_printf_common>
   2bdc4:	3001      	adds	r0, #1
   2bdc6:	f040 8099 	bne.w	2befc <_printf_float+0x1e8>
   2bdca:	f04f 30ff 	mov.w	r0, #4294967295
   2bdce:	b011      	add	sp, #68	; 0x44
   2bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdd4:	4642      	mov	r2, r8
   2bdd6:	464b      	mov	r3, r9
   2bdd8:	4640      	mov	r0, r8
   2bdda:	4649      	mov	r1, r9
   2bddc:	f7dc ff3a 	bl	8c54 <__aeabi_dcmpun>
   2bde0:	b140      	cbz	r0, 2bdf4 <_printf_float+0xe0>
   2bde2:	464b      	mov	r3, r9
   2bde4:	4a80      	ldr	r2, [pc, #512]	; (2bfe8 <_printf_float+0x2d4>)
   2bde6:	2b00      	cmp	r3, #0
   2bde8:	bfbc      	itt	lt
   2bdea:	232d      	movlt	r3, #45	; 0x2d
   2bdec:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2bdf0:	4b7e      	ldr	r3, [pc, #504]	; (2bfec <_printf_float+0x2d8>)
   2bdf2:	e7d4      	b.n	2bd9e <_printf_float+0x8a>
   2bdf4:	6863      	ldr	r3, [r4, #4]
   2bdf6:	1c5a      	adds	r2, r3, #1
   2bdf8:	d129      	bne.n	2be4e <_printf_float+0x13a>
   2bdfa:	2306      	movs	r3, #6
   2bdfc:	6063      	str	r3, [r4, #4]
   2bdfe:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2be02:	2200      	movs	r2, #0
   2be04:	4628      	mov	r0, r5
   2be06:	6023      	str	r3, [r4, #0]
   2be08:	9206      	str	r2, [sp, #24]
   2be0a:	aa0e      	add	r2, sp, #56	; 0x38
   2be0c:	e9cd a204 	strd	sl, r2, [sp, #16]
   2be10:	aa0d      	add	r2, sp, #52	; 0x34
   2be12:	9203      	str	r2, [sp, #12]
   2be14:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2be18:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2be1c:	6863      	ldr	r3, [r4, #4]
   2be1e:	4642      	mov	r2, r8
   2be20:	9300      	str	r3, [sp, #0]
   2be22:	464b      	mov	r3, r9
   2be24:	f009 f90a 	bl	3503c <__cvt>
   2be28:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   2be2c:	4680      	mov	r8, r0
   2be2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   2be30:	d115      	bne.n	2be5e <_printf_float+0x14a>
   2be32:	1ccb      	adds	r3, r1, #3
   2be34:	db3b      	blt.n	2beae <_printf_float+0x19a>
   2be36:	6863      	ldr	r3, [r4, #4]
   2be38:	4299      	cmp	r1, r3
   2be3a:	dc38      	bgt.n	2beae <_printf_float+0x19a>
   2be3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2be3e:	4299      	cmp	r1, r3
   2be40:	db55      	blt.n	2beee <_printf_float+0x1da>
   2be42:	6823      	ldr	r3, [r4, #0]
   2be44:	6121      	str	r1, [r4, #16]
   2be46:	07d8      	lsls	r0, r3, #31
   2be48:	d545      	bpl.n	2bed6 <_printf_float+0x1c2>
   2be4a:	1c4b      	adds	r3, r1, #1
   2be4c:	e042      	b.n	2bed4 <_printf_float+0x1c0>
   2be4e:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2be52:	2a47      	cmp	r2, #71	; 0x47
   2be54:	d1d3      	bne.n	2bdfe <_printf_float+0xea>
   2be56:	2b00      	cmp	r3, #0
   2be58:	d1d1      	bne.n	2bdfe <_printf_float+0xea>
   2be5a:	2301      	movs	r3, #1
   2be5c:	e7ce      	b.n	2bdfc <_printf_float+0xe8>
   2be5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2be62:	d107      	bne.n	2be74 <_printf_float+0x160>
   2be64:	1cc8      	adds	r0, r1, #3
   2be66:	db25      	blt.n	2beb4 <_printf_float+0x1a0>
   2be68:	6863      	ldr	r3, [r4, #4]
   2be6a:	428b      	cmp	r3, r1
   2be6c:	db22      	blt.n	2beb4 <_printf_float+0x1a0>
   2be6e:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2be72:	e7e3      	b.n	2be3c <_printf_float+0x128>
   2be74:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2be78:	d81f      	bhi.n	2beba <_printf_float+0x1a6>
   2be7a:	3901      	subs	r1, #1
   2be7c:	4652      	mov	r2, sl
   2be7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2be82:	910d      	str	r1, [sp, #52]	; 0x34
   2be84:	f009 f941 	bl	3510a <__exponent>
   2be88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2be8a:	4681      	mov	r9, r0
   2be8c:	1813      	adds	r3, r2, r0
   2be8e:	2a01      	cmp	r2, #1
   2be90:	6123      	str	r3, [r4, #16]
   2be92:	dc02      	bgt.n	2be9a <_printf_float+0x186>
   2be94:	6822      	ldr	r2, [r4, #0]
   2be96:	07d2      	lsls	r2, r2, #31
   2be98:	d501      	bpl.n	2be9e <_printf_float+0x18a>
   2be9a:	3301      	adds	r3, #1
   2be9c:	6123      	str	r3, [r4, #16]
   2be9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2bea2:	2b00      	cmp	r3, #0
   2bea4:	d087      	beq.n	2bdb6 <_printf_float+0xa2>
   2bea6:	232d      	movs	r3, #45	; 0x2d
   2bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2beac:	e783      	b.n	2bdb6 <_printf_float+0xa2>
   2beae:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2beb2:	e7e2      	b.n	2be7a <_printf_float+0x166>
   2beb4:	f04f 0a45 	mov.w	sl, #69	; 0x45
   2beb8:	e7df      	b.n	2be7a <_printf_float+0x166>
   2beba:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2bebe:	d1bd      	bne.n	2be3c <_printf_float+0x128>
   2bec0:	2900      	cmp	r1, #0
   2bec2:	6863      	ldr	r3, [r4, #4]
   2bec4:	dd0b      	ble.n	2bede <_printf_float+0x1ca>
   2bec6:	6121      	str	r1, [r4, #16]
   2bec8:	b913      	cbnz	r3, 2bed0 <_printf_float+0x1bc>
   2beca:	6822      	ldr	r2, [r4, #0]
   2becc:	07d0      	lsls	r0, r2, #31
   2bece:	d502      	bpl.n	2bed6 <_printf_float+0x1c2>
   2bed0:	3301      	adds	r3, #1
   2bed2:	440b      	add	r3, r1
   2bed4:	6123      	str	r3, [r4, #16]
   2bed6:	f04f 0900 	mov.w	r9, #0
   2beda:	65a1      	str	r1, [r4, #88]	; 0x58
   2bedc:	e7df      	b.n	2be9e <_printf_float+0x18a>
   2bede:	b913      	cbnz	r3, 2bee6 <_printf_float+0x1d2>
   2bee0:	6822      	ldr	r2, [r4, #0]
   2bee2:	07d2      	lsls	r2, r2, #31
   2bee4:	d501      	bpl.n	2beea <_printf_float+0x1d6>
   2bee6:	3302      	adds	r3, #2
   2bee8:	e7f4      	b.n	2bed4 <_printf_float+0x1c0>
   2beea:	2301      	movs	r3, #1
   2beec:	e7f2      	b.n	2bed4 <_printf_float+0x1c0>
   2beee:	2900      	cmp	r1, #0
   2bef0:	bfd4      	ite	le
   2bef2:	f1c1 0202 	rsble	r2, r1, #2
   2bef6:	2201      	movgt	r2, #1
   2bef8:	4413      	add	r3, r2
   2befa:	e7eb      	b.n	2bed4 <_printf_float+0x1c0>
   2befc:	6823      	ldr	r3, [r4, #0]
   2befe:	055a      	lsls	r2, r3, #21
   2bf00:	d407      	bmi.n	2bf12 <_printf_float+0x1fe>
   2bf02:	6923      	ldr	r3, [r4, #16]
   2bf04:	4642      	mov	r2, r8
   2bf06:	4631      	mov	r1, r6
   2bf08:	4628      	mov	r0, r5
   2bf0a:	47b8      	blx	r7
   2bf0c:	3001      	adds	r0, #1
   2bf0e:	d12b      	bne.n	2bf68 <_printf_float+0x254>
   2bf10:	e75b      	b.n	2bdca <_printf_float+0xb6>
   2bf12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2bf16:	f240 80dc 	bls.w	2c0d2 <_printf_float+0x3be>
   2bf1a:	2200      	movs	r2, #0
   2bf1c:	2300      	movs	r3, #0
   2bf1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2bf22:	f7dc fe65 	bl	8bf0 <__aeabi_dcmpeq>
   2bf26:	2800      	cmp	r0, #0
   2bf28:	d033      	beq.n	2bf92 <_printf_float+0x27e>
   2bf2a:	2301      	movs	r3, #1
   2bf2c:	4a30      	ldr	r2, [pc, #192]	; (2bff0 <_printf_float+0x2dc>)
   2bf2e:	4631      	mov	r1, r6
   2bf30:	4628      	mov	r0, r5
   2bf32:	47b8      	blx	r7
   2bf34:	3001      	adds	r0, #1
   2bf36:	f43f af48 	beq.w	2bdca <_printf_float+0xb6>
   2bf3a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   2bf3e:	4543      	cmp	r3, r8
   2bf40:	db02      	blt.n	2bf48 <_printf_float+0x234>
   2bf42:	6823      	ldr	r3, [r4, #0]
   2bf44:	07d8      	lsls	r0, r3, #31
   2bf46:	d50f      	bpl.n	2bf68 <_printf_float+0x254>
   2bf48:	4631      	mov	r1, r6
   2bf4a:	4628      	mov	r0, r5
   2bf4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2bf50:	47b8      	blx	r7
   2bf52:	3001      	adds	r0, #1
   2bf54:	f43f af39 	beq.w	2bdca <_printf_float+0xb6>
   2bf58:	f04f 0900 	mov.w	r9, #0
   2bf5c:	f108 38ff 	add.w	r8, r8, #4294967295
   2bf60:	f104 0a1a 	add.w	sl, r4, #26
   2bf64:	45c8      	cmp	r8, r9
   2bf66:	dc09      	bgt.n	2bf7c <_printf_float+0x268>
   2bf68:	6823      	ldr	r3, [r4, #0]
   2bf6a:	079b      	lsls	r3, r3, #30
   2bf6c:	f100 8102 	bmi.w	2c174 <_printf_float+0x460>
   2bf70:	68e0      	ldr	r0, [r4, #12]
   2bf72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2bf74:	4298      	cmp	r0, r3
   2bf76:	bfb8      	it	lt
   2bf78:	4618      	movlt	r0, r3
   2bf7a:	e728      	b.n	2bdce <_printf_float+0xba>
   2bf7c:	2301      	movs	r3, #1
   2bf7e:	4652      	mov	r2, sl
   2bf80:	4631      	mov	r1, r6
   2bf82:	4628      	mov	r0, r5
   2bf84:	47b8      	blx	r7
   2bf86:	3001      	adds	r0, #1
   2bf88:	f43f af1f 	beq.w	2bdca <_printf_float+0xb6>
   2bf8c:	f109 0901 	add.w	r9, r9, #1
   2bf90:	e7e8      	b.n	2bf64 <_printf_float+0x250>
   2bf92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bf94:	2b00      	cmp	r3, #0
   2bf96:	dc38      	bgt.n	2c00a <_printf_float+0x2f6>
   2bf98:	2301      	movs	r3, #1
   2bf9a:	4a15      	ldr	r2, [pc, #84]	; (2bff0 <_printf_float+0x2dc>)
   2bf9c:	4631      	mov	r1, r6
   2bf9e:	4628      	mov	r0, r5
   2bfa0:	47b8      	blx	r7
   2bfa2:	3001      	adds	r0, #1
   2bfa4:	f43f af11 	beq.w	2bdca <_printf_float+0xb6>
   2bfa8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   2bfac:	ea59 0303 	orrs.w	r3, r9, r3
   2bfb0:	d102      	bne.n	2bfb8 <_printf_float+0x2a4>
   2bfb2:	6823      	ldr	r3, [r4, #0]
   2bfb4:	07d9      	lsls	r1, r3, #31
   2bfb6:	d5d7      	bpl.n	2bf68 <_printf_float+0x254>
   2bfb8:	4631      	mov	r1, r6
   2bfba:	4628      	mov	r0, r5
   2bfbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2bfc0:	47b8      	blx	r7
   2bfc2:	3001      	adds	r0, #1
   2bfc4:	f43f af01 	beq.w	2bdca <_printf_float+0xb6>
   2bfc8:	f04f 0a00 	mov.w	sl, #0
   2bfcc:	f104 0b1a 	add.w	fp, r4, #26
   2bfd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bfd2:	425b      	negs	r3, r3
   2bfd4:	4553      	cmp	r3, sl
   2bfd6:	dc0d      	bgt.n	2bff4 <_printf_float+0x2e0>
   2bfd8:	464b      	mov	r3, r9
   2bfda:	e793      	b.n	2bf04 <_printf_float+0x1f0>
   2bfdc:	7fefffff 	.word	0x7fefffff
   2bfe0:	00041097 	.word	0x00041097
   2bfe4:	00038a02 	.word	0x00038a02
   2bfe8:	0004109b 	.word	0x0004109b
   2bfec:	0004109f 	.word	0x0004109f
   2bff0:	0003c13d 	.word	0x0003c13d
   2bff4:	2301      	movs	r3, #1
   2bff6:	465a      	mov	r2, fp
   2bff8:	4631      	mov	r1, r6
   2bffa:	4628      	mov	r0, r5
   2bffc:	47b8      	blx	r7
   2bffe:	3001      	adds	r0, #1
   2c000:	f43f aee3 	beq.w	2bdca <_printf_float+0xb6>
   2c004:	f10a 0a01 	add.w	sl, sl, #1
   2c008:	e7e2      	b.n	2bfd0 <_printf_float+0x2bc>
   2c00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2c00c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2c010:	4553      	cmp	r3, sl
   2c012:	bfa8      	it	ge
   2c014:	4653      	movge	r3, sl
   2c016:	2b00      	cmp	r3, #0
   2c018:	4699      	mov	r9, r3
   2c01a:	dc36      	bgt.n	2c08a <_printf_float+0x376>
   2c01c:	f04f 0b00 	mov.w	fp, #0
   2c020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2c024:	f104 021a 	add.w	r2, r4, #26
   2c028:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2c02a:	930a      	str	r3, [sp, #40]	; 0x28
   2c02c:	eba3 0309 	sub.w	r3, r3, r9
   2c030:	455b      	cmp	r3, fp
   2c032:	dc31      	bgt.n	2c098 <_printf_float+0x384>
   2c034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c036:	459a      	cmp	sl, r3
   2c038:	dc3a      	bgt.n	2c0b0 <_printf_float+0x39c>
   2c03a:	6823      	ldr	r3, [r4, #0]
   2c03c:	07da      	lsls	r2, r3, #31
   2c03e:	d437      	bmi.n	2c0b0 <_printf_float+0x39c>
   2c040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c042:	ebaa 0903 	sub.w	r9, sl, r3
   2c046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c048:	ebaa 0303 	sub.w	r3, sl, r3
   2c04c:	4599      	cmp	r9, r3
   2c04e:	bfa8      	it	ge
   2c050:	4699      	movge	r9, r3
   2c052:	f1b9 0f00 	cmp.w	r9, #0
   2c056:	dc33      	bgt.n	2c0c0 <_printf_float+0x3ac>
   2c058:	f04f 0800 	mov.w	r8, #0
   2c05c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2c060:	f104 0b1a 	add.w	fp, r4, #26
   2c064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c066:	ebaa 0303 	sub.w	r3, sl, r3
   2c06a:	eba3 0309 	sub.w	r3, r3, r9
   2c06e:	4543      	cmp	r3, r8
   2c070:	f77f af7a 	ble.w	2bf68 <_printf_float+0x254>
   2c074:	2301      	movs	r3, #1
   2c076:	465a      	mov	r2, fp
   2c078:	4631      	mov	r1, r6
   2c07a:	4628      	mov	r0, r5
   2c07c:	47b8      	blx	r7
   2c07e:	3001      	adds	r0, #1
   2c080:	f43f aea3 	beq.w	2bdca <_printf_float+0xb6>
   2c084:	f108 0801 	add.w	r8, r8, #1
   2c088:	e7ec      	b.n	2c064 <_printf_float+0x350>
   2c08a:	4642      	mov	r2, r8
   2c08c:	4631      	mov	r1, r6
   2c08e:	4628      	mov	r0, r5
   2c090:	47b8      	blx	r7
   2c092:	3001      	adds	r0, #1
   2c094:	d1c2      	bne.n	2c01c <_printf_float+0x308>
   2c096:	e698      	b.n	2bdca <_printf_float+0xb6>
   2c098:	2301      	movs	r3, #1
   2c09a:	4631      	mov	r1, r6
   2c09c:	4628      	mov	r0, r5
   2c09e:	920a      	str	r2, [sp, #40]	; 0x28
   2c0a0:	47b8      	blx	r7
   2c0a2:	3001      	adds	r0, #1
   2c0a4:	f43f ae91 	beq.w	2bdca <_printf_float+0xb6>
   2c0a8:	f10b 0b01 	add.w	fp, fp, #1
   2c0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c0ae:	e7bb      	b.n	2c028 <_printf_float+0x314>
   2c0b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2c0b4:	4631      	mov	r1, r6
   2c0b6:	4628      	mov	r0, r5
   2c0b8:	47b8      	blx	r7
   2c0ba:	3001      	adds	r0, #1
   2c0bc:	d1c0      	bne.n	2c040 <_printf_float+0x32c>
   2c0be:	e684      	b.n	2bdca <_printf_float+0xb6>
   2c0c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c0c2:	464b      	mov	r3, r9
   2c0c4:	4631      	mov	r1, r6
   2c0c6:	4628      	mov	r0, r5
   2c0c8:	4442      	add	r2, r8
   2c0ca:	47b8      	blx	r7
   2c0cc:	3001      	adds	r0, #1
   2c0ce:	d1c3      	bne.n	2c058 <_printf_float+0x344>
   2c0d0:	e67b      	b.n	2bdca <_printf_float+0xb6>
   2c0d2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2c0d6:	f1ba 0f01 	cmp.w	sl, #1
   2c0da:	dc01      	bgt.n	2c0e0 <_printf_float+0x3cc>
   2c0dc:	07db      	lsls	r3, r3, #31
   2c0de:	d536      	bpl.n	2c14e <_printf_float+0x43a>
   2c0e0:	2301      	movs	r3, #1
   2c0e2:	4642      	mov	r2, r8
   2c0e4:	4631      	mov	r1, r6
   2c0e6:	4628      	mov	r0, r5
   2c0e8:	47b8      	blx	r7
   2c0ea:	3001      	adds	r0, #1
   2c0ec:	f43f ae6d 	beq.w	2bdca <_printf_float+0xb6>
   2c0f0:	4631      	mov	r1, r6
   2c0f2:	4628      	mov	r0, r5
   2c0f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2c0f8:	47b8      	blx	r7
   2c0fa:	3001      	adds	r0, #1
   2c0fc:	f43f ae65 	beq.w	2bdca <_printf_float+0xb6>
   2c100:	2200      	movs	r2, #0
   2c102:	2300      	movs	r3, #0
   2c104:	f10a 3aff 	add.w	sl, sl, #4294967295
   2c108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2c10c:	f7dc fd70 	bl	8bf0 <__aeabi_dcmpeq>
   2c110:	b9c0      	cbnz	r0, 2c144 <_printf_float+0x430>
   2c112:	4653      	mov	r3, sl
   2c114:	f108 0201 	add.w	r2, r8, #1
   2c118:	4631      	mov	r1, r6
   2c11a:	4628      	mov	r0, r5
   2c11c:	47b8      	blx	r7
   2c11e:	3001      	adds	r0, #1
   2c120:	d10c      	bne.n	2c13c <_printf_float+0x428>
   2c122:	e652      	b.n	2bdca <_printf_float+0xb6>
   2c124:	2301      	movs	r3, #1
   2c126:	465a      	mov	r2, fp
   2c128:	4631      	mov	r1, r6
   2c12a:	4628      	mov	r0, r5
   2c12c:	47b8      	blx	r7
   2c12e:	3001      	adds	r0, #1
   2c130:	f43f ae4b 	beq.w	2bdca <_printf_float+0xb6>
   2c134:	f108 0801 	add.w	r8, r8, #1
   2c138:	45d0      	cmp	r8, sl
   2c13a:	dbf3      	blt.n	2c124 <_printf_float+0x410>
   2c13c:	464b      	mov	r3, r9
   2c13e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2c142:	e6e0      	b.n	2bf06 <_printf_float+0x1f2>
   2c144:	f04f 0800 	mov.w	r8, #0
   2c148:	f104 0b1a 	add.w	fp, r4, #26
   2c14c:	e7f4      	b.n	2c138 <_printf_float+0x424>
   2c14e:	2301      	movs	r3, #1
   2c150:	4642      	mov	r2, r8
   2c152:	e7e1      	b.n	2c118 <_printf_float+0x404>
   2c154:	2301      	movs	r3, #1
   2c156:	464a      	mov	r2, r9
   2c158:	4631      	mov	r1, r6
   2c15a:	4628      	mov	r0, r5
   2c15c:	47b8      	blx	r7
   2c15e:	3001      	adds	r0, #1
   2c160:	f43f ae33 	beq.w	2bdca <_printf_float+0xb6>
   2c164:	f108 0801 	add.w	r8, r8, #1
   2c168:	68e3      	ldr	r3, [r4, #12]
   2c16a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c16c:	1a5b      	subs	r3, r3, r1
   2c16e:	4543      	cmp	r3, r8
   2c170:	dcf0      	bgt.n	2c154 <_printf_float+0x440>
   2c172:	e6fd      	b.n	2bf70 <_printf_float+0x25c>
   2c174:	f04f 0800 	mov.w	r8, #0
   2c178:	f104 0919 	add.w	r9, r4, #25
   2c17c:	e7f4      	b.n	2c168 <_printf_float+0x454>
   2c17e:	bf00      	nop

0002c180 <_printf_i>:
   2c180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2c184:	7e0f      	ldrb	r7, [r1, #24]
   2c186:	4691      	mov	r9, r2
   2c188:	4680      	mov	r8, r0
   2c18a:	460c      	mov	r4, r1
   2c18c:	2f78      	cmp	r7, #120	; 0x78
   2c18e:	469a      	mov	sl, r3
   2c190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2c192:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2c196:	d807      	bhi.n	2c1a8 <_printf_i+0x28>
   2c198:	2f62      	cmp	r7, #98	; 0x62
   2c19a:	d80a      	bhi.n	2c1b2 <_printf_i+0x32>
   2c19c:	2f00      	cmp	r7, #0
   2c19e:	f000 80e0 	beq.w	2c362 <_printf_i+0x1e2>
   2c1a2:	2f58      	cmp	r7, #88	; 0x58
   2c1a4:	f000 80bb 	beq.w	2c31e <_printf_i+0x19e>
   2c1a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2c1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2c1b0:	e03a      	b.n	2c228 <_printf_i+0xa8>
   2c1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2c1b6:	2b15      	cmp	r3, #21
   2c1b8:	d8f6      	bhi.n	2c1a8 <_printf_i+0x28>
   2c1ba:	a101      	add	r1, pc, #4	; (adr r1, 2c1c0 <_printf_i+0x40>)
   2c1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2c1c0:	0002c219 	.word	0x0002c219
   2c1c4:	0002c22d 	.word	0x0002c22d
   2c1c8:	0002c1a9 	.word	0x0002c1a9
   2c1cc:	0002c1a9 	.word	0x0002c1a9
   2c1d0:	0002c1a9 	.word	0x0002c1a9
   2c1d4:	0002c1a9 	.word	0x0002c1a9
   2c1d8:	0002c22d 	.word	0x0002c22d
   2c1dc:	0002c1a9 	.word	0x0002c1a9
   2c1e0:	0002c1a9 	.word	0x0002c1a9
   2c1e4:	0002c1a9 	.word	0x0002c1a9
   2c1e8:	0002c1a9 	.word	0x0002c1a9
   2c1ec:	0002c349 	.word	0x0002c349
   2c1f0:	0002c2bd 	.word	0x0002c2bd
   2c1f4:	0002c2ff 	.word	0x0002c2ff
   2c1f8:	0002c1a9 	.word	0x0002c1a9
   2c1fc:	0002c1a9 	.word	0x0002c1a9
   2c200:	0002c36b 	.word	0x0002c36b
   2c204:	0002c1a9 	.word	0x0002c1a9
   2c208:	0002c2bd 	.word	0x0002c2bd
   2c20c:	0002c1a9 	.word	0x0002c1a9
   2c210:	0002c1a9 	.word	0x0002c1a9
   2c214:	0002c307 	.word	0x0002c307
   2c218:	682b      	ldr	r3, [r5, #0]
   2c21a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2c21e:	1d1a      	adds	r2, r3, #4
   2c220:	681b      	ldr	r3, [r3, #0]
   2c222:	602a      	str	r2, [r5, #0]
   2c224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2c228:	2301      	movs	r3, #1
   2c22a:	e0ab      	b.n	2c384 <_printf_i+0x204>
   2c22c:	6823      	ldr	r3, [r4, #0]
   2c22e:	6829      	ldr	r1, [r5, #0]
   2c230:	061f      	lsls	r7, r3, #24
   2c232:	f101 0004 	add.w	r0, r1, #4
   2c236:	6028      	str	r0, [r5, #0]
   2c238:	d501      	bpl.n	2c23e <_printf_i+0xbe>
   2c23a:	680d      	ldr	r5, [r1, #0]
   2c23c:	e003      	b.n	2c246 <_printf_i+0xc6>
   2c23e:	065e      	lsls	r6, r3, #25
   2c240:	d5fb      	bpl.n	2c23a <_printf_i+0xba>
   2c242:	f9b1 5000 	ldrsh.w	r5, [r1]
   2c246:	2d00      	cmp	r5, #0
   2c248:	6861      	ldr	r1, [r4, #4]
   2c24a:	da7a      	bge.n	2c342 <_printf_i+0x1c2>
   2c24c:	202d      	movs	r0, #45	; 0x2d
   2c24e:	2900      	cmp	r1, #0
   2c250:	60a1      	str	r1, [r4, #8]
   2c252:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2c256:	da2d      	bge.n	2c2b4 <_printf_i+0x134>
   2c258:	426d      	negs	r5, r5
   2c25a:	485e      	ldr	r0, [pc, #376]	; (2c3d4 <_printf_i+0x254>)
   2c25c:	230a      	movs	r3, #10
   2c25e:	4616      	mov	r6, r2
   2c260:	fbb5 f1f3 	udiv	r1, r5, r3
   2c264:	fb03 5711 	mls	r7, r3, r1, r5
   2c268:	5dc7      	ldrb	r7, [r0, r7]
   2c26a:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2c26e:	462f      	mov	r7, r5
   2c270:	460d      	mov	r5, r1
   2c272:	42bb      	cmp	r3, r7
   2c274:	d9f4      	bls.n	2c260 <_printf_i+0xe0>
   2c276:	2b08      	cmp	r3, #8
   2c278:	d10b      	bne.n	2c292 <_printf_i+0x112>
   2c27a:	6823      	ldr	r3, [r4, #0]
   2c27c:	07df      	lsls	r7, r3, #31
   2c27e:	d508      	bpl.n	2c292 <_printf_i+0x112>
   2c280:	6923      	ldr	r3, [r4, #16]
   2c282:	6861      	ldr	r1, [r4, #4]
   2c284:	4299      	cmp	r1, r3
   2c286:	bfde      	ittt	le
   2c288:	2330      	movle	r3, #48	; 0x30
   2c28a:	f806 3c01 	strble.w	r3, [r6, #-1]
   2c28e:	f106 36ff 	addle.w	r6, r6, #4294967295
   2c292:	1b92      	subs	r2, r2, r6
   2c294:	6122      	str	r2, [r4, #16]
   2c296:	464b      	mov	r3, r9
   2c298:	aa03      	add	r2, sp, #12
   2c29a:	4621      	mov	r1, r4
   2c29c:	4640      	mov	r0, r8
   2c29e:	f8cd a000 	str.w	sl, [sp]
   2c2a2:	f008 ff6b 	bl	3517c <_printf_common>
   2c2a6:	3001      	adds	r0, #1
   2c2a8:	d171      	bne.n	2c38e <_printf_i+0x20e>
   2c2aa:	f04f 30ff 	mov.w	r0, #4294967295
   2c2ae:	b004      	add	sp, #16
   2c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c2b4:	f023 0304 	bic.w	r3, r3, #4
   2c2b8:	6023      	str	r3, [r4, #0]
   2c2ba:	e7cd      	b.n	2c258 <_printf_i+0xd8>
   2c2bc:	682b      	ldr	r3, [r5, #0]
   2c2be:	6820      	ldr	r0, [r4, #0]
   2c2c0:	1d19      	adds	r1, r3, #4
   2c2c2:	6029      	str	r1, [r5, #0]
   2c2c4:	0605      	lsls	r5, r0, #24
   2c2c6:	d501      	bpl.n	2c2cc <_printf_i+0x14c>
   2c2c8:	681d      	ldr	r5, [r3, #0]
   2c2ca:	e002      	b.n	2c2d2 <_printf_i+0x152>
   2c2cc:	0641      	lsls	r1, r0, #25
   2c2ce:	d5fb      	bpl.n	2c2c8 <_printf_i+0x148>
   2c2d0:	881d      	ldrh	r5, [r3, #0]
   2c2d2:	2f6f      	cmp	r7, #111	; 0x6f
   2c2d4:	483f      	ldr	r0, [pc, #252]	; (2c3d4 <_printf_i+0x254>)
   2c2d6:	bf14      	ite	ne
   2c2d8:	230a      	movne	r3, #10
   2c2da:	2308      	moveq	r3, #8
   2c2dc:	2100      	movs	r1, #0
   2c2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2c2e2:	6866      	ldr	r6, [r4, #4]
   2c2e4:	2e00      	cmp	r6, #0
   2c2e6:	60a6      	str	r6, [r4, #8]
   2c2e8:	dbb9      	blt.n	2c25e <_printf_i+0xde>
   2c2ea:	6821      	ldr	r1, [r4, #0]
   2c2ec:	f021 0104 	bic.w	r1, r1, #4
   2c2f0:	6021      	str	r1, [r4, #0]
   2c2f2:	2d00      	cmp	r5, #0
   2c2f4:	d1b3      	bne.n	2c25e <_printf_i+0xde>
   2c2f6:	2e00      	cmp	r6, #0
   2c2f8:	d1b1      	bne.n	2c25e <_printf_i+0xde>
   2c2fa:	4616      	mov	r6, r2
   2c2fc:	e7bb      	b.n	2c276 <_printf_i+0xf6>
   2c2fe:	6823      	ldr	r3, [r4, #0]
   2c300:	f043 0320 	orr.w	r3, r3, #32
   2c304:	6023      	str	r3, [r4, #0]
   2c306:	2778      	movs	r7, #120	; 0x78
   2c308:	4833      	ldr	r0, [pc, #204]	; (2c3d8 <_printf_i+0x258>)
   2c30a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2c30e:	6829      	ldr	r1, [r5, #0]
   2c310:	6823      	ldr	r3, [r4, #0]
   2c312:	1d0e      	adds	r6, r1, #4
   2c314:	602e      	str	r6, [r5, #0]
   2c316:	061e      	lsls	r6, r3, #24
   2c318:	d503      	bpl.n	2c322 <_printf_i+0x1a2>
   2c31a:	680d      	ldr	r5, [r1, #0]
   2c31c:	e004      	b.n	2c328 <_printf_i+0x1a8>
   2c31e:	482d      	ldr	r0, [pc, #180]	; (2c3d4 <_printf_i+0x254>)
   2c320:	e7f3      	b.n	2c30a <_printf_i+0x18a>
   2c322:	065d      	lsls	r5, r3, #25
   2c324:	d5f9      	bpl.n	2c31a <_printf_i+0x19a>
   2c326:	880d      	ldrh	r5, [r1, #0]
   2c328:	07d9      	lsls	r1, r3, #31
   2c32a:	bf44      	itt	mi
   2c32c:	f043 0320 	orrmi.w	r3, r3, #32
   2c330:	6023      	strmi	r3, [r4, #0]
   2c332:	b10d      	cbz	r5, 2c338 <_printf_i+0x1b8>
   2c334:	2310      	movs	r3, #16
   2c336:	e7d1      	b.n	2c2dc <_printf_i+0x15c>
   2c338:	6823      	ldr	r3, [r4, #0]
   2c33a:	f023 0320 	bic.w	r3, r3, #32
   2c33e:	6023      	str	r3, [r4, #0]
   2c340:	e7f8      	b.n	2c334 <_printf_i+0x1b4>
   2c342:	4824      	ldr	r0, [pc, #144]	; (2c3d4 <_printf_i+0x254>)
   2c344:	230a      	movs	r3, #10
   2c346:	e7cc      	b.n	2c2e2 <_printf_i+0x162>
   2c348:	682b      	ldr	r3, [r5, #0]
   2c34a:	6826      	ldr	r6, [r4, #0]
   2c34c:	1d18      	adds	r0, r3, #4
   2c34e:	6961      	ldr	r1, [r4, #20]
   2c350:	6028      	str	r0, [r5, #0]
   2c352:	0635      	lsls	r5, r6, #24
   2c354:	681b      	ldr	r3, [r3, #0]
   2c356:	d501      	bpl.n	2c35c <_printf_i+0x1dc>
   2c358:	6019      	str	r1, [r3, #0]
   2c35a:	e002      	b.n	2c362 <_printf_i+0x1e2>
   2c35c:	0670      	lsls	r0, r6, #25
   2c35e:	d5fb      	bpl.n	2c358 <_printf_i+0x1d8>
   2c360:	8019      	strh	r1, [r3, #0]
   2c362:	2300      	movs	r3, #0
   2c364:	4616      	mov	r6, r2
   2c366:	6123      	str	r3, [r4, #16]
   2c368:	e795      	b.n	2c296 <_printf_i+0x116>
   2c36a:	682b      	ldr	r3, [r5, #0]
   2c36c:	2100      	movs	r1, #0
   2c36e:	1d1a      	adds	r2, r3, #4
   2c370:	602a      	str	r2, [r5, #0]
   2c372:	681e      	ldr	r6, [r3, #0]
   2c374:	6862      	ldr	r2, [r4, #4]
   2c376:	4630      	mov	r0, r6
   2c378:	f008 fe1a 	bl	34fb0 <memchr>
   2c37c:	b108      	cbz	r0, 2c382 <_printf_i+0x202>
   2c37e:	1b80      	subs	r0, r0, r6
   2c380:	6060      	str	r0, [r4, #4]
   2c382:	6863      	ldr	r3, [r4, #4]
   2c384:	6123      	str	r3, [r4, #16]
   2c386:	2300      	movs	r3, #0
   2c388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2c38c:	e783      	b.n	2c296 <_printf_i+0x116>
   2c38e:	6923      	ldr	r3, [r4, #16]
   2c390:	4632      	mov	r2, r6
   2c392:	4649      	mov	r1, r9
   2c394:	4640      	mov	r0, r8
   2c396:	47d0      	blx	sl
   2c398:	3001      	adds	r0, #1
   2c39a:	d086      	beq.n	2c2aa <_printf_i+0x12a>
   2c39c:	6823      	ldr	r3, [r4, #0]
   2c39e:	079b      	lsls	r3, r3, #30
   2c3a0:	d414      	bmi.n	2c3cc <_printf_i+0x24c>
   2c3a2:	68e0      	ldr	r0, [r4, #12]
   2c3a4:	9b03      	ldr	r3, [sp, #12]
   2c3a6:	4298      	cmp	r0, r3
   2c3a8:	bfb8      	it	lt
   2c3aa:	4618      	movlt	r0, r3
   2c3ac:	e77f      	b.n	2c2ae <_printf_i+0x12e>
   2c3ae:	2301      	movs	r3, #1
   2c3b0:	4632      	mov	r2, r6
   2c3b2:	4649      	mov	r1, r9
   2c3b4:	4640      	mov	r0, r8
   2c3b6:	47d0      	blx	sl
   2c3b8:	3001      	adds	r0, #1
   2c3ba:	f43f af76 	beq.w	2c2aa <_printf_i+0x12a>
   2c3be:	3501      	adds	r5, #1
   2c3c0:	68e3      	ldr	r3, [r4, #12]
   2c3c2:	9903      	ldr	r1, [sp, #12]
   2c3c4:	1a5b      	subs	r3, r3, r1
   2c3c6:	42ab      	cmp	r3, r5
   2c3c8:	dcf1      	bgt.n	2c3ae <_printf_i+0x22e>
   2c3ca:	e7ea      	b.n	2c3a2 <_printf_i+0x222>
   2c3cc:	2500      	movs	r5, #0
   2c3ce:	f104 0619 	add.w	r6, r4, #25
   2c3d2:	e7f5      	b.n	2c3c0 <_printf_i+0x240>
   2c3d4:	000410a3 	.word	0x000410a3
   2c3d8:	000410b4 	.word	0x000410b4

0002c3dc <realloc>:
   2c3dc:	4b02      	ldr	r3, [pc, #8]	; (2c3e8 <realloc+0xc>)
   2c3de:	460a      	mov	r2, r1
   2c3e0:	4601      	mov	r1, r0
   2c3e2:	6818      	ldr	r0, [r3, #0]
   2c3e4:	f009 bbfe 	b.w	35be4 <_realloc_r>
   2c3e8:	2000ca94 	.word	0x2000ca94

0002c3ec <_sbrk_r>:
   2c3ec:	b538      	push	{r3, r4, r5, lr}
   2c3ee:	2300      	movs	r3, #0
   2c3f0:	4d05      	ldr	r5, [pc, #20]	; (2c408 <_sbrk_r+0x1c>)
   2c3f2:	4604      	mov	r4, r0
   2c3f4:	4608      	mov	r0, r1
   2c3f6:	602b      	str	r3, [r5, #0]
   2c3f8:	f7e4 ff8e 	bl	11318 <_sbrk>
   2c3fc:	1c43      	adds	r3, r0, #1
   2c3fe:	d102      	bne.n	2c406 <_sbrk_r+0x1a>
   2c400:	682b      	ldr	r3, [r5, #0]
   2c402:	b103      	cbz	r3, 2c406 <_sbrk_r+0x1a>
   2c404:	6023      	str	r3, [r4, #0]
   2c406:	bd38      	pop	{r3, r4, r5, pc}
   2c408:	20011020 	.word	0x20011020

0002c40c <sniprintf>:
   2c40c:	b40c      	push	{r2, r3}
   2c40e:	4b18      	ldr	r3, [pc, #96]	; (2c470 <sniprintf+0x64>)
   2c410:	b530      	push	{r4, r5, lr}
   2c412:	1e0c      	subs	r4, r1, #0
   2c414:	b09d      	sub	sp, #116	; 0x74
   2c416:	681d      	ldr	r5, [r3, #0]
   2c418:	da08      	bge.n	2c42c <sniprintf+0x20>
   2c41a:	238b      	movs	r3, #139	; 0x8b
   2c41c:	f04f 30ff 	mov.w	r0, #4294967295
   2c420:	602b      	str	r3, [r5, #0]
   2c422:	b01d      	add	sp, #116	; 0x74
   2c424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2c428:	b002      	add	sp, #8
   2c42a:	4770      	bx	lr
   2c42c:	f44f 7302 	mov.w	r3, #520	; 0x208
   2c430:	9002      	str	r0, [sp, #8]
   2c432:	9006      	str	r0, [sp, #24]
   2c434:	a902      	add	r1, sp, #8
   2c436:	f8ad 3014 	strh.w	r3, [sp, #20]
   2c43a:	bf14      	ite	ne
   2c43c:	f104 33ff 	addne.w	r3, r4, #4294967295
   2c440:	4623      	moveq	r3, r4
   2c442:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2c444:	4628      	mov	r0, r5
   2c446:	9304      	str	r3, [sp, #16]
   2c448:	9307      	str	r3, [sp, #28]
   2c44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c44e:	f8ad 3016 	strh.w	r3, [sp, #22]
   2c452:	ab21      	add	r3, sp, #132	; 0x84
   2c454:	9301      	str	r3, [sp, #4]
   2c456:	f001 fa81 	bl	2d95c <_svfiprintf_r>
   2c45a:	1c43      	adds	r3, r0, #1
   2c45c:	bfbc      	itt	lt
   2c45e:	238b      	movlt	r3, #139	; 0x8b
   2c460:	602b      	strlt	r3, [r5, #0]
   2c462:	2c00      	cmp	r4, #0
   2c464:	d0dd      	beq.n	2c422 <sniprintf+0x16>
   2c466:	9b02      	ldr	r3, [sp, #8]
   2c468:	2200      	movs	r2, #0
   2c46a:	701a      	strb	r2, [r3, #0]
   2c46c:	e7d9      	b.n	2c422 <sniprintf+0x16>
   2c46e:	bf00      	nop
   2c470:	2000ca94 	.word	0x2000ca94

0002c474 <siscanf>:
   2c474:	b40e      	push	{r1, r2, r3}
   2c476:	b530      	push	{r4, r5, lr}
   2c478:	b09c      	sub	sp, #112	; 0x70
   2c47a:	f44f 7201 	mov.w	r2, #516	; 0x204
   2c47e:	ac1f      	add	r4, sp, #124	; 0x7c
   2c480:	f8ad 2014 	strh.w	r2, [sp, #20]
   2c484:	9002      	str	r0, [sp, #8]
   2c486:	f854 5b04 	ldr.w	r5, [r4], #4
   2c48a:	9006      	str	r0, [sp, #24]
   2c48c:	f7dc ff45 	bl	931a <strlen>
   2c490:	4b0b      	ldr	r3, [pc, #44]	; (2c4c0 <siscanf+0x4c>)
   2c492:	462a      	mov	r2, r5
   2c494:	9003      	str	r0, [sp, #12]
   2c496:	a902      	add	r1, sp, #8
   2c498:	930b      	str	r3, [sp, #44]	; 0x2c
   2c49a:	2300      	movs	r3, #0
   2c49c:	9007      	str	r0, [sp, #28]
   2c49e:	930f      	str	r3, [sp, #60]	; 0x3c
   2c4a0:	9314      	str	r3, [sp, #80]	; 0x50
   2c4a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c4a6:	4807      	ldr	r0, [pc, #28]	; (2c4c4 <siscanf+0x50>)
   2c4a8:	f8ad 3016 	strh.w	r3, [sp, #22]
   2c4ac:	4623      	mov	r3, r4
   2c4ae:	6800      	ldr	r0, [r0, #0]
   2c4b0:	9401      	str	r4, [sp, #4]
   2c4b2:	f001 fb4f 	bl	2db54 <__ssvfiscanf_r>
   2c4b6:	b01c      	add	sp, #112	; 0x70
   2c4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2c4bc:	b003      	add	sp, #12
   2c4be:	4770      	bx	lr
   2c4c0:	000352b7 	.word	0x000352b7
   2c4c4:	2000ca94 	.word	0x2000ca94

0002c4c8 <strtod>:
   2c4c8:	460a      	mov	r2, r1
   2c4ca:	4601      	mov	r1, r0
   2c4cc:	4802      	ldr	r0, [pc, #8]	; (2c4d8 <strtod+0x10>)
   2c4ce:	4b03      	ldr	r3, [pc, #12]	; (2c4dc <strtod+0x14>)
   2c4d0:	6800      	ldr	r0, [r0, #0]
   2c4d2:	f7dd b9f1 	b.w	98b8 <_strtod_l>
   2c4d6:	bf00      	nop
   2c4d8:	2000ca94 	.word	0x2000ca94
   2c4dc:	2000caf8 	.word	0x2000caf8

0002c4e0 <_strtol_l.constprop.0>:
   2c4e0:	2b24      	cmp	r3, #36	; 0x24
   2c4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c4e6:	4686      	mov	lr, r0
   2c4e8:	4690      	mov	r8, r2
   2c4ea:	d801      	bhi.n	2c4f0 <_strtol_l.constprop.0+0x10>
   2c4ec:	2b01      	cmp	r3, #1
   2c4ee:	d106      	bne.n	2c4fe <_strtol_l.constprop.0+0x1e>
   2c4f0:	f003 fb3f 	bl	2fb72 <__errno>
   2c4f4:	2316      	movs	r3, #22
   2c4f6:	6003      	str	r3, [r0, #0]
   2c4f8:	2000      	movs	r0, #0
   2c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c4fe:	460d      	mov	r5, r1
   2c500:	4835      	ldr	r0, [pc, #212]	; (2c5d8 <_strtol_l.constprop.0+0xf8>)
   2c502:	462a      	mov	r2, r5
   2c504:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c508:	5d06      	ldrb	r6, [r0, r4]
   2c50a:	f016 0608 	ands.w	r6, r6, #8
   2c50e:	d1f8      	bne.n	2c502 <_strtol_l.constprop.0+0x22>
   2c510:	2c2d      	cmp	r4, #45	; 0x2d
   2c512:	d124      	bne.n	2c55e <_strtol_l.constprop.0+0x7e>
   2c514:	782c      	ldrb	r4, [r5, #0]
   2c516:	2601      	movs	r6, #1
   2c518:	1c95      	adds	r5, r2, #2
   2c51a:	bb2b      	cbnz	r3, 2c568 <_strtol_l.constprop.0+0x88>
   2c51c:	2c30      	cmp	r4, #48	; 0x30
   2c51e:	d030      	beq.n	2c582 <_strtol_l.constprop.0+0xa2>
   2c520:	230a      	movs	r3, #10
   2c522:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   2c526:	2200      	movs	r2, #0
   2c528:	f10c 3cff 	add.w	ip, ip, #4294967295
   2c52c:	4610      	mov	r0, r2
   2c52e:	fbbc f9f3 	udiv	r9, ip, r3
   2c532:	fb03 ca19 	mls	sl, r3, r9, ip
   2c536:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2c53a:	2f09      	cmp	r7, #9
   2c53c:	d828      	bhi.n	2c590 <_strtol_l.constprop.0+0xb0>
   2c53e:	463c      	mov	r4, r7
   2c540:	42a3      	cmp	r3, r4
   2c542:	dd34      	ble.n	2c5ae <_strtol_l.constprop.0+0xce>
   2c544:	1c57      	adds	r7, r2, #1
   2c546:	d007      	beq.n	2c558 <_strtol_l.constprop.0+0x78>
   2c548:	4581      	cmp	r9, r0
   2c54a:	d32d      	bcc.n	2c5a8 <_strtol_l.constprop.0+0xc8>
   2c54c:	d101      	bne.n	2c552 <_strtol_l.constprop.0+0x72>
   2c54e:	45a2      	cmp	sl, r4
   2c550:	db2a      	blt.n	2c5a8 <_strtol_l.constprop.0+0xc8>
   2c552:	fb00 4003 	mla	r0, r0, r3, r4
   2c556:	2201      	movs	r2, #1
   2c558:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c55c:	e7eb      	b.n	2c536 <_strtol_l.constprop.0+0x56>
   2c55e:	2c2b      	cmp	r4, #43	; 0x2b
   2c560:	bf04      	itt	eq
   2c562:	782c      	ldrbeq	r4, [r5, #0]
   2c564:	1c95      	addeq	r5, r2, #2
   2c566:	e7d8      	b.n	2c51a <_strtol_l.constprop.0+0x3a>
   2c568:	2b10      	cmp	r3, #16
   2c56a:	d1da      	bne.n	2c522 <_strtol_l.constprop.0+0x42>
   2c56c:	2c30      	cmp	r4, #48	; 0x30
   2c56e:	d1d8      	bne.n	2c522 <_strtol_l.constprop.0+0x42>
   2c570:	782a      	ldrb	r2, [r5, #0]
   2c572:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2c576:	2a58      	cmp	r2, #88	; 0x58
   2c578:	d1d3      	bne.n	2c522 <_strtol_l.constprop.0+0x42>
   2c57a:	786c      	ldrb	r4, [r5, #1]
   2c57c:	2310      	movs	r3, #16
   2c57e:	3502      	adds	r5, #2
   2c580:	e7cf      	b.n	2c522 <_strtol_l.constprop.0+0x42>
   2c582:	782b      	ldrb	r3, [r5, #0]
   2c584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2c588:	2b58      	cmp	r3, #88	; 0x58
   2c58a:	d0f6      	beq.n	2c57a <_strtol_l.constprop.0+0x9a>
   2c58c:	2308      	movs	r3, #8
   2c58e:	e7c8      	b.n	2c522 <_strtol_l.constprop.0+0x42>
   2c590:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   2c594:	2f19      	cmp	r7, #25
   2c596:	d801      	bhi.n	2c59c <_strtol_l.constprop.0+0xbc>
   2c598:	3c37      	subs	r4, #55	; 0x37
   2c59a:	e7d1      	b.n	2c540 <_strtol_l.constprop.0+0x60>
   2c59c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   2c5a0:	2f19      	cmp	r7, #25
   2c5a2:	d804      	bhi.n	2c5ae <_strtol_l.constprop.0+0xce>
   2c5a4:	3c57      	subs	r4, #87	; 0x57
   2c5a6:	e7cb      	b.n	2c540 <_strtol_l.constprop.0+0x60>
   2c5a8:	f04f 32ff 	mov.w	r2, #4294967295
   2c5ac:	e7d4      	b.n	2c558 <_strtol_l.constprop.0+0x78>
   2c5ae:	1c53      	adds	r3, r2, #1
   2c5b0:	d108      	bne.n	2c5c4 <_strtol_l.constprop.0+0xe4>
   2c5b2:	2322      	movs	r3, #34	; 0x22
   2c5b4:	4660      	mov	r0, ip
   2c5b6:	f8ce 3000 	str.w	r3, [lr]
   2c5ba:	f1b8 0f00 	cmp.w	r8, #0
   2c5be:	d09c      	beq.n	2c4fa <_strtol_l.constprop.0+0x1a>
   2c5c0:	1e69      	subs	r1, r5, #1
   2c5c2:	e006      	b.n	2c5d2 <_strtol_l.constprop.0+0xf2>
   2c5c4:	b106      	cbz	r6, 2c5c8 <_strtol_l.constprop.0+0xe8>
   2c5c6:	4240      	negs	r0, r0
   2c5c8:	f1b8 0f00 	cmp.w	r8, #0
   2c5cc:	d095      	beq.n	2c4fa <_strtol_l.constprop.0+0x1a>
   2c5ce:	2a00      	cmp	r2, #0
   2c5d0:	d1f6      	bne.n	2c5c0 <_strtol_l.constprop.0+0xe0>
   2c5d2:	f8c8 1000 	str.w	r1, [r8]
   2c5d6:	e790      	b.n	2c4fa <_strtol_l.constprop.0+0x1a>
   2c5d8:	00040f97 	.word	0x00040f97

0002c5dc <strtol>:
   2c5dc:	4613      	mov	r3, r2
   2c5de:	460a      	mov	r2, r1
   2c5e0:	4601      	mov	r1, r0
   2c5e2:	4802      	ldr	r0, [pc, #8]	; (2c5ec <strtol+0x10>)
   2c5e4:	6800      	ldr	r0, [r0, #0]
   2c5e6:	f7ff bf7b 	b.w	2c4e0 <_strtol_l.constprop.0>
   2c5ea:	bf00      	nop
   2c5ec:	2000ca94 	.word	0x2000ca94

0002c5f0 <_strtoll_l.constprop.0>:
   2c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5f4:	4690      	mov	r8, r2
   2c5f6:	b085      	sub	sp, #20
   2c5f8:	4689      	mov	r9, r1
   2c5fa:	461e      	mov	r6, r3
   2c5fc:	460d      	mov	r5, r1
   2c5fe:	4a45      	ldr	r2, [pc, #276]	; (2c714 <_strtoll_l.constprop.0+0x124>)
   2c600:	9002      	str	r0, [sp, #8]
   2c602:	462b      	mov	r3, r5
   2c604:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c608:	5d17      	ldrb	r7, [r2, r4]
   2c60a:	f017 0708 	ands.w	r7, r7, #8
   2c60e:	d1f8      	bne.n	2c602 <_strtoll_l.constprop.0+0x12>
   2c610:	2c2d      	cmp	r4, #45	; 0x2d
   2c612:	d141      	bne.n	2c698 <_strtoll_l.constprop.0+0xa8>
   2c614:	782c      	ldrb	r4, [r5, #0]
   2c616:	2701      	movs	r7, #1
   2c618:	1c9d      	adds	r5, r3, #2
   2c61a:	2e00      	cmp	r6, #0
   2c61c:	d141      	bne.n	2c6a2 <_strtoll_l.constprop.0+0xb2>
   2c61e:	2c30      	cmp	r4, #48	; 0x30
   2c620:	d04c      	beq.n	2c6bc <_strtoll_l.constprop.0+0xcc>
   2c622:	260a      	movs	r6, #10
   2c624:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   2c628:	f107 3bff 	add.w	fp, r7, #4294967295
   2c62c:	17f3      	asrs	r3, r6, #31
   2c62e:	4632      	mov	r2, r6
   2c630:	f10a 3aff 	add.w	sl, sl, #4294967295
   2c634:	4658      	mov	r0, fp
   2c636:	9303      	str	r3, [sp, #12]
   2c638:	4651      	mov	r1, sl
   2c63a:	f7dc fcc7 	bl	8fcc <__aeabi_uldivmod>
   2c63e:	9201      	str	r2, [sp, #4]
   2c640:	2200      	movs	r2, #0
   2c642:	468e      	mov	lr, r1
   2c644:	4684      	mov	ip, r0
   2c646:	4611      	mov	r1, r2
   2c648:	4610      	mov	r0, r2
   2c64a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2c64e:	2b09      	cmp	r3, #9
   2c650:	d905      	bls.n	2c65e <_strtoll_l.constprop.0+0x6e>
   2c652:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   2c656:	2b19      	cmp	r3, #25
   2c658:	d837      	bhi.n	2c6ca <_strtoll_l.constprop.0+0xda>
   2c65a:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   2c65e:	429e      	cmp	r6, r3
   2c660:	dd3d      	ble.n	2c6de <_strtoll_l.constprop.0+0xee>
   2c662:	1c54      	adds	r4, r2, #1
   2c664:	d015      	beq.n	2c692 <_strtoll_l.constprop.0+0xa2>
   2c666:	4584      	cmp	ip, r0
   2c668:	eb7e 0201 	sbcs.w	r2, lr, r1
   2c66c:	d334      	bcc.n	2c6d8 <_strtoll_l.constprop.0+0xe8>
   2c66e:	458e      	cmp	lr, r1
   2c670:	bf08      	it	eq
   2c672:	4584      	cmpeq	ip, r0
   2c674:	d102      	bne.n	2c67c <_strtoll_l.constprop.0+0x8c>
   2c676:	9a01      	ldr	r2, [sp, #4]
   2c678:	429a      	cmp	r2, r3
   2c67a:	db2d      	blt.n	2c6d8 <_strtoll_l.constprop.0+0xe8>
   2c67c:	9a03      	ldr	r2, [sp, #12]
   2c67e:	4371      	muls	r1, r6
   2c680:	fb00 1102 	mla	r1, r0, r2, r1
   2c684:	fba6 0200 	umull	r0, r2, r6, r0
   2c688:	440a      	add	r2, r1
   2c68a:	1818      	adds	r0, r3, r0
   2c68c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   2c690:	2201      	movs	r2, #1
   2c692:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c696:	e7d8      	b.n	2c64a <_strtoll_l.constprop.0+0x5a>
   2c698:	2c2b      	cmp	r4, #43	; 0x2b
   2c69a:	bf04      	itt	eq
   2c69c:	782c      	ldrbeq	r4, [r5, #0]
   2c69e:	1c9d      	addeq	r5, r3, #2
   2c6a0:	e7bb      	b.n	2c61a <_strtoll_l.constprop.0+0x2a>
   2c6a2:	2e10      	cmp	r6, #16
   2c6a4:	d1be      	bne.n	2c624 <_strtoll_l.constprop.0+0x34>
   2c6a6:	2c30      	cmp	r4, #48	; 0x30
   2c6a8:	d1bc      	bne.n	2c624 <_strtoll_l.constprop.0+0x34>
   2c6aa:	782b      	ldrb	r3, [r5, #0]
   2c6ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2c6b0:	2b58      	cmp	r3, #88	; 0x58
   2c6b2:	d1b7      	bne.n	2c624 <_strtoll_l.constprop.0+0x34>
   2c6b4:	786c      	ldrb	r4, [r5, #1]
   2c6b6:	2610      	movs	r6, #16
   2c6b8:	3502      	adds	r5, #2
   2c6ba:	e7b3      	b.n	2c624 <_strtoll_l.constprop.0+0x34>
   2c6bc:	782b      	ldrb	r3, [r5, #0]
   2c6be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2c6c2:	2b58      	cmp	r3, #88	; 0x58
   2c6c4:	d0f6      	beq.n	2c6b4 <_strtoll_l.constprop.0+0xc4>
   2c6c6:	2608      	movs	r6, #8
   2c6c8:	e7ac      	b.n	2c624 <_strtoll_l.constprop.0+0x34>
   2c6ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   2c6ce:	2b19      	cmp	r3, #25
   2c6d0:	d805      	bhi.n	2c6de <_strtoll_l.constprop.0+0xee>
   2c6d2:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   2c6d6:	e7c2      	b.n	2c65e <_strtoll_l.constprop.0+0x6e>
   2c6d8:	f04f 32ff 	mov.w	r2, #4294967295
   2c6dc:	e7d9      	b.n	2c692 <_strtoll_l.constprop.0+0xa2>
   2c6de:	1c53      	adds	r3, r2, #1
   2c6e0:	d10a      	bne.n	2c6f8 <_strtoll_l.constprop.0+0x108>
   2c6e2:	2322      	movs	r3, #34	; 0x22
   2c6e4:	9a02      	ldr	r2, [sp, #8]
   2c6e6:	4658      	mov	r0, fp
   2c6e8:	4651      	mov	r1, sl
   2c6ea:	6013      	str	r3, [r2, #0]
   2c6ec:	f1b8 0f00 	cmp.w	r8, #0
   2c6f0:	d10a      	bne.n	2c708 <_strtoll_l.constprop.0+0x118>
   2c6f2:	b005      	add	sp, #20
   2c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6f8:	b117      	cbz	r7, 2c700 <_strtoll_l.constprop.0+0x110>
   2c6fa:	4240      	negs	r0, r0
   2c6fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2c700:	f1b8 0f00 	cmp.w	r8, #0
   2c704:	d0f5      	beq.n	2c6f2 <_strtoll_l.constprop.0+0x102>
   2c706:	b10a      	cbz	r2, 2c70c <_strtoll_l.constprop.0+0x11c>
   2c708:	f105 39ff 	add.w	r9, r5, #4294967295
   2c70c:	f8c8 9000 	str.w	r9, [r8]
   2c710:	e7ef      	b.n	2c6f2 <_strtoll_l.constprop.0+0x102>
   2c712:	bf00      	nop
   2c714:	00040f97 	.word	0x00040f97

0002c718 <strtoll>:
   2c718:	4613      	mov	r3, r2
   2c71a:	460a      	mov	r2, r1
   2c71c:	4601      	mov	r1, r0
   2c71e:	4802      	ldr	r0, [pc, #8]	; (2c728 <strtoll+0x10>)
   2c720:	6800      	ldr	r0, [r0, #0]
   2c722:	f7ff bf65 	b.w	2c5f0 <_strtoll_l.constprop.0>
   2c726:	bf00      	nop
   2c728:	2000ca94 	.word	0x2000ca94

0002c72c <_strtoul_l.constprop.0>:
   2c72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c730:	4686      	mov	lr, r0
   2c732:	460d      	mov	r5, r1
   2c734:	4e35      	ldr	r6, [pc, #212]	; (2c80c <_strtoul_l.constprop.0+0xe0>)
   2c736:	4628      	mov	r0, r5
   2c738:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c73c:	5d37      	ldrb	r7, [r6, r4]
   2c73e:	f017 0708 	ands.w	r7, r7, #8
   2c742:	d1f8      	bne.n	2c736 <_strtoul_l.constprop.0+0xa>
   2c744:	2c2d      	cmp	r4, #45	; 0x2d
   2c746:	d126      	bne.n	2c796 <_strtoul_l.constprop.0+0x6a>
   2c748:	782c      	ldrb	r4, [r5, #0]
   2c74a:	2701      	movs	r7, #1
   2c74c:	1c85      	adds	r5, r0, #2
   2c74e:	bb3b      	cbnz	r3, 2c7a0 <_strtoul_l.constprop.0+0x74>
   2c750:	2c30      	cmp	r4, #48	; 0x30
   2c752:	d032      	beq.n	2c7ba <_strtoul_l.constprop.0+0x8e>
   2c754:	230a      	movs	r3, #10
   2c756:	f04f 38ff 	mov.w	r8, #4294967295
   2c75a:	2600      	movs	r6, #0
   2c75c:	fbb8 f8f3 	udiv	r8, r8, r3
   2c760:	fb03 f908 	mul.w	r9, r3, r8
   2c764:	4630      	mov	r0, r6
   2c766:	ea6f 0909 	mvn.w	r9, r9
   2c76a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2c76e:	f1bc 0f09 	cmp.w	ip, #9
   2c772:	d829      	bhi.n	2c7c8 <_strtoul_l.constprop.0+0x9c>
   2c774:	4664      	mov	r4, ip
   2c776:	42a3      	cmp	r3, r4
   2c778:	dd37      	ble.n	2c7ea <_strtoul_l.constprop.0+0xbe>
   2c77a:	f1b6 3fff 	cmp.w	r6, #4294967295
   2c77e:	d007      	beq.n	2c790 <_strtoul_l.constprop.0+0x64>
   2c780:	4580      	cmp	r8, r0
   2c782:	d32f      	bcc.n	2c7e4 <_strtoul_l.constprop.0+0xb8>
   2c784:	d101      	bne.n	2c78a <_strtoul_l.constprop.0+0x5e>
   2c786:	45a1      	cmp	r9, r4
   2c788:	db2c      	blt.n	2c7e4 <_strtoul_l.constprop.0+0xb8>
   2c78a:	fb00 4003 	mla	r0, r0, r3, r4
   2c78e:	2601      	movs	r6, #1
   2c790:	f815 4b01 	ldrb.w	r4, [r5], #1
   2c794:	e7e9      	b.n	2c76a <_strtoul_l.constprop.0+0x3e>
   2c796:	2c2b      	cmp	r4, #43	; 0x2b
   2c798:	bf04      	itt	eq
   2c79a:	782c      	ldrbeq	r4, [r5, #0]
   2c79c:	1c85      	addeq	r5, r0, #2
   2c79e:	e7d6      	b.n	2c74e <_strtoul_l.constprop.0+0x22>
   2c7a0:	2b10      	cmp	r3, #16
   2c7a2:	d1d8      	bne.n	2c756 <_strtoul_l.constprop.0+0x2a>
   2c7a4:	2c30      	cmp	r4, #48	; 0x30
   2c7a6:	d1d6      	bne.n	2c756 <_strtoul_l.constprop.0+0x2a>
   2c7a8:	7828      	ldrb	r0, [r5, #0]
   2c7aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2c7ae:	2858      	cmp	r0, #88	; 0x58
   2c7b0:	d1d1      	bne.n	2c756 <_strtoul_l.constprop.0+0x2a>
   2c7b2:	786c      	ldrb	r4, [r5, #1]
   2c7b4:	2310      	movs	r3, #16
   2c7b6:	3502      	adds	r5, #2
   2c7b8:	e7cd      	b.n	2c756 <_strtoul_l.constprop.0+0x2a>
   2c7ba:	782b      	ldrb	r3, [r5, #0]
   2c7bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2c7c0:	2b58      	cmp	r3, #88	; 0x58
   2c7c2:	d0f6      	beq.n	2c7b2 <_strtoul_l.constprop.0+0x86>
   2c7c4:	2308      	movs	r3, #8
   2c7c6:	e7c6      	b.n	2c756 <_strtoul_l.constprop.0+0x2a>
   2c7c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2c7cc:	f1bc 0f19 	cmp.w	ip, #25
   2c7d0:	d801      	bhi.n	2c7d6 <_strtoul_l.constprop.0+0xaa>
   2c7d2:	3c37      	subs	r4, #55	; 0x37
   2c7d4:	e7cf      	b.n	2c776 <_strtoul_l.constprop.0+0x4a>
   2c7d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2c7da:	f1bc 0f19 	cmp.w	ip, #25
   2c7de:	d804      	bhi.n	2c7ea <_strtoul_l.constprop.0+0xbe>
   2c7e0:	3c57      	subs	r4, #87	; 0x57
   2c7e2:	e7c8      	b.n	2c776 <_strtoul_l.constprop.0+0x4a>
   2c7e4:	f04f 36ff 	mov.w	r6, #4294967295
   2c7e8:	e7d2      	b.n	2c790 <_strtoul_l.constprop.0+0x64>
   2c7ea:	1c73      	adds	r3, r6, #1
   2c7ec:	d106      	bne.n	2c7fc <_strtoul_l.constprop.0+0xd0>
   2c7ee:	2322      	movs	r3, #34	; 0x22
   2c7f0:	4630      	mov	r0, r6
   2c7f2:	f8ce 3000 	str.w	r3, [lr]
   2c7f6:	b932      	cbnz	r2, 2c806 <_strtoul_l.constprop.0+0xda>
   2c7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c7fc:	b107      	cbz	r7, 2c800 <_strtoul_l.constprop.0+0xd4>
   2c7fe:	4240      	negs	r0, r0
   2c800:	2a00      	cmp	r2, #0
   2c802:	d0f9      	beq.n	2c7f8 <_strtoul_l.constprop.0+0xcc>
   2c804:	b106      	cbz	r6, 2c808 <_strtoul_l.constprop.0+0xdc>
   2c806:	1e69      	subs	r1, r5, #1
   2c808:	6011      	str	r1, [r2, #0]
   2c80a:	e7f5      	b.n	2c7f8 <_strtoul_l.constprop.0+0xcc>
   2c80c:	00040f97 	.word	0x00040f97

0002c810 <strtoul>:
   2c810:	4613      	mov	r3, r2
   2c812:	460a      	mov	r2, r1
   2c814:	4601      	mov	r1, r0
   2c816:	4802      	ldr	r0, [pc, #8]	; (2c820 <strtoul+0x10>)
   2c818:	6800      	ldr	r0, [r0, #0]
   2c81a:	f7ff bf87 	b.w	2c72c <_strtoul_l.constprop.0>
   2c81e:	bf00      	nop
   2c820:	2000ca94 	.word	0x2000ca94

0002c824 <vsniprintf>:
   2c824:	b507      	push	{r0, r1, r2, lr}
   2c826:	9300      	str	r3, [sp, #0]
   2c828:	4613      	mov	r3, r2
   2c82a:	460a      	mov	r2, r1
   2c82c:	4601      	mov	r1, r0
   2c82e:	4803      	ldr	r0, [pc, #12]	; (2c83c <vsniprintf+0x18>)
   2c830:	6800      	ldr	r0, [r0, #0]
   2c832:	f008 fe21 	bl	35478 <_vsniprintf_r>
   2c836:	b003      	add	sp, #12
   2c838:	f85d fb04 	ldr.w	pc, [sp], #4
   2c83c:	2000ca94 	.word	0x2000ca94

0002c840 <_vsiprintf_r>:
   2c840:	b500      	push	{lr}
   2c842:	b09b      	sub	sp, #108	; 0x6c
   2c844:	9100      	str	r1, [sp, #0]
   2c846:	9104      	str	r1, [sp, #16]
   2c848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c84c:	9105      	str	r1, [sp, #20]
   2c84e:	9102      	str	r1, [sp, #8]
   2c850:	4905      	ldr	r1, [pc, #20]	; (2c868 <_vsiprintf_r+0x28>)
   2c852:	9103      	str	r1, [sp, #12]
   2c854:	4669      	mov	r1, sp
   2c856:	f001 f881 	bl	2d95c <_svfiprintf_r>
   2c85a:	9b00      	ldr	r3, [sp, #0]
   2c85c:	2200      	movs	r2, #0
   2c85e:	701a      	strb	r2, [r3, #0]
   2c860:	b01b      	add	sp, #108	; 0x6c
   2c862:	f85d fb04 	ldr.w	pc, [sp], #4
   2c866:	bf00      	nop
   2c868:	ffff0208 	.word	0xffff0208

0002c86c <vsiprintf>:
   2c86c:	4613      	mov	r3, r2
   2c86e:	460a      	mov	r2, r1
   2c870:	4601      	mov	r1, r0
   2c872:	4802      	ldr	r0, [pc, #8]	; (2c87c <vsiprintf+0x10>)
   2c874:	6800      	ldr	r0, [r0, #0]
   2c876:	f7ff bfe3 	b.w	2c840 <_vsiprintf_r>
   2c87a:	bf00      	nop
   2c87c:	2000ca94 	.word	0x2000ca94

0002c880 <_vsiscanf_r>:
   2c880:	b570      	push	{r4, r5, r6, lr}
   2c882:	461e      	mov	r6, r3
   2c884:	b09a      	sub	sp, #104	; 0x68
   2c886:	f44f 7301 	mov.w	r3, #516	; 0x204
   2c88a:	4604      	mov	r4, r0
   2c88c:	4608      	mov	r0, r1
   2c88e:	4615      	mov	r5, r2
   2c890:	f8ad 300c 	strh.w	r3, [sp, #12]
   2c894:	9100      	str	r1, [sp, #0]
   2c896:	9104      	str	r1, [sp, #16]
   2c898:	f7dc fd3f 	bl	931a <strlen>
   2c89c:	4b09      	ldr	r3, [pc, #36]	; (2c8c4 <_vsiscanf_r+0x44>)
   2c89e:	462a      	mov	r2, r5
   2c8a0:	4669      	mov	r1, sp
   2c8a2:	9001      	str	r0, [sp, #4]
   2c8a4:	9309      	str	r3, [sp, #36]	; 0x24
   2c8a6:	2300      	movs	r3, #0
   2c8a8:	9005      	str	r0, [sp, #20]
   2c8aa:	4620      	mov	r0, r4
   2c8ac:	930d      	str	r3, [sp, #52]	; 0x34
   2c8ae:	9312      	str	r3, [sp, #72]	; 0x48
   2c8b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c8b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   2c8b8:	4633      	mov	r3, r6
   2c8ba:	f001 f94b 	bl	2db54 <__ssvfiscanf_r>
   2c8be:	b01a      	add	sp, #104	; 0x68
   2c8c0:	bd70      	pop	{r4, r5, r6, pc}
   2c8c2:	bf00      	nop
   2c8c4:	000352b7 	.word	0x000352b7

0002c8c8 <vsiscanf>:
   2c8c8:	4613      	mov	r3, r2
   2c8ca:	460a      	mov	r2, r1
   2c8cc:	4601      	mov	r1, r0
   2c8ce:	4802      	ldr	r0, [pc, #8]	; (2c8d8 <vsiscanf+0x10>)
   2c8d0:	6800      	ldr	r0, [r0, #0]
   2c8d2:	f7ff bfd5 	b.w	2c880 <_vsiscanf_r>
   2c8d6:	bf00      	nop
   2c8d8:	2000ca94 	.word	0x2000ca94

0002c8dc <__swbuf_r>:
   2c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c8de:	460e      	mov	r6, r1
   2c8e0:	4614      	mov	r4, r2
   2c8e2:	4605      	mov	r5, r0
   2c8e4:	b118      	cbz	r0, 2c8ee <__swbuf_r+0x12>
   2c8e6:	6983      	ldr	r3, [r0, #24]
   2c8e8:	b90b      	cbnz	r3, 2c8ee <__swbuf_r+0x12>
   2c8ea:	f000 f955 	bl	2cb98 <__sinit>
   2c8ee:	4b21      	ldr	r3, [pc, #132]	; (2c974 <__swbuf_r+0x98>)
   2c8f0:	429c      	cmp	r4, r3
   2c8f2:	d110      	bne.n	2c916 <__swbuf_r+0x3a>
   2c8f4:	686c      	ldr	r4, [r5, #4]
   2c8f6:	69a3      	ldr	r3, [r4, #24]
   2c8f8:	60a3      	str	r3, [r4, #8]
   2c8fa:	89a3      	ldrh	r3, [r4, #12]
   2c8fc:	071a      	lsls	r2, r3, #28
   2c8fe:	d501      	bpl.n	2c904 <__swbuf_r+0x28>
   2c900:	6923      	ldr	r3, [r4, #16]
   2c902:	b993      	cbnz	r3, 2c92a <__swbuf_r+0x4e>
   2c904:	4621      	mov	r1, r4
   2c906:	4628      	mov	r0, r5
   2c908:	f000 f84c 	bl	2c9a4 <__swsetup_r>
   2c90c:	b168      	cbz	r0, 2c92a <__swbuf_r+0x4e>
   2c90e:	f04f 37ff 	mov.w	r7, #4294967295
   2c912:	4638      	mov	r0, r7
   2c914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c916:	4b18      	ldr	r3, [pc, #96]	; (2c978 <__swbuf_r+0x9c>)
   2c918:	429c      	cmp	r4, r3
   2c91a:	d101      	bne.n	2c920 <__swbuf_r+0x44>
   2c91c:	68ac      	ldr	r4, [r5, #8]
   2c91e:	e7ea      	b.n	2c8f6 <__swbuf_r+0x1a>
   2c920:	4b16      	ldr	r3, [pc, #88]	; (2c97c <__swbuf_r+0xa0>)
   2c922:	429c      	cmp	r4, r3
   2c924:	bf08      	it	eq
   2c926:	68ec      	ldreq	r4, [r5, #12]
   2c928:	e7e5      	b.n	2c8f6 <__swbuf_r+0x1a>
   2c92a:	6923      	ldr	r3, [r4, #16]
   2c92c:	b2f6      	uxtb	r6, r6
   2c92e:	6820      	ldr	r0, [r4, #0]
   2c930:	4637      	mov	r7, r6
   2c932:	1ac0      	subs	r0, r0, r3
   2c934:	6963      	ldr	r3, [r4, #20]
   2c936:	4283      	cmp	r3, r0
   2c938:	dc05      	bgt.n	2c946 <__swbuf_r+0x6a>
   2c93a:	4621      	mov	r1, r4
   2c93c:	4628      	mov	r0, r5
   2c93e:	f000 f8ad 	bl	2ca9c <_fflush_r>
   2c942:	2800      	cmp	r0, #0
   2c944:	d1e3      	bne.n	2c90e <__swbuf_r+0x32>
   2c946:	68a3      	ldr	r3, [r4, #8]
   2c948:	3001      	adds	r0, #1
   2c94a:	3b01      	subs	r3, #1
   2c94c:	60a3      	str	r3, [r4, #8]
   2c94e:	6823      	ldr	r3, [r4, #0]
   2c950:	1c5a      	adds	r2, r3, #1
   2c952:	6022      	str	r2, [r4, #0]
   2c954:	701e      	strb	r6, [r3, #0]
   2c956:	6963      	ldr	r3, [r4, #20]
   2c958:	4283      	cmp	r3, r0
   2c95a:	d004      	beq.n	2c966 <__swbuf_r+0x8a>
   2c95c:	89a3      	ldrh	r3, [r4, #12]
   2c95e:	07db      	lsls	r3, r3, #31
   2c960:	d5d7      	bpl.n	2c912 <__swbuf_r+0x36>
   2c962:	2e0a      	cmp	r6, #10
   2c964:	d1d5      	bne.n	2c912 <__swbuf_r+0x36>
   2c966:	4621      	mov	r1, r4
   2c968:	4628      	mov	r0, r5
   2c96a:	f000 f897 	bl	2ca9c <_fflush_r>
   2c96e:	2800      	cmp	r0, #0
   2c970:	d0cf      	beq.n	2c912 <__swbuf_r+0x36>
   2c972:	e7cc      	b.n	2c90e <__swbuf_r+0x32>
   2c974:	00037808 	.word	0x00037808
   2c978:	000377e8 	.word	0x000377e8
   2c97c:	000377c8 	.word	0x000377c8

0002c980 <_write_r>:
   2c980:	b538      	push	{r3, r4, r5, lr}
   2c982:	4604      	mov	r4, r0
   2c984:	4d06      	ldr	r5, [pc, #24]	; (2c9a0 <_write_r+0x20>)
   2c986:	4608      	mov	r0, r1
   2c988:	4611      	mov	r1, r2
   2c98a:	2200      	movs	r2, #0
   2c98c:	602a      	str	r2, [r5, #0]
   2c98e:	461a      	mov	r2, r3
   2c990:	f003 f8d8 	bl	2fb44 <_write>
   2c994:	1c43      	adds	r3, r0, #1
   2c996:	d102      	bne.n	2c99e <_write_r+0x1e>
   2c998:	682b      	ldr	r3, [r5, #0]
   2c99a:	b103      	cbz	r3, 2c99e <_write_r+0x1e>
   2c99c:	6023      	str	r3, [r4, #0]
   2c99e:	bd38      	pop	{r3, r4, r5, pc}
   2c9a0:	20011020 	.word	0x20011020

0002c9a4 <__swsetup_r>:
   2c9a4:	4b31      	ldr	r3, [pc, #196]	; (2ca6c <__swsetup_r+0xc8>)
   2c9a6:	b570      	push	{r4, r5, r6, lr}
   2c9a8:	681d      	ldr	r5, [r3, #0]
   2c9aa:	4606      	mov	r6, r0
   2c9ac:	460c      	mov	r4, r1
   2c9ae:	b125      	cbz	r5, 2c9ba <__swsetup_r+0x16>
   2c9b0:	69ab      	ldr	r3, [r5, #24]
   2c9b2:	b913      	cbnz	r3, 2c9ba <__swsetup_r+0x16>
   2c9b4:	4628      	mov	r0, r5
   2c9b6:	f000 f8ef 	bl	2cb98 <__sinit>
   2c9ba:	4b2d      	ldr	r3, [pc, #180]	; (2ca70 <__swsetup_r+0xcc>)
   2c9bc:	429c      	cmp	r4, r3
   2c9be:	d10e      	bne.n	2c9de <__swsetup_r+0x3a>
   2c9c0:	686c      	ldr	r4, [r5, #4]
   2c9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c9c6:	071a      	lsls	r2, r3, #28
   2c9c8:	d42c      	bmi.n	2ca24 <__swsetup_r+0x80>
   2c9ca:	06dd      	lsls	r5, r3, #27
   2c9cc:	d411      	bmi.n	2c9f2 <__swsetup_r+0x4e>
   2c9ce:	2209      	movs	r2, #9
   2c9d0:	6032      	str	r2, [r6, #0]
   2c9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c9d6:	f04f 30ff 	mov.w	r0, #4294967295
   2c9da:	81a3      	strh	r3, [r4, #12]
   2c9dc:	e03d      	b.n	2ca5a <__swsetup_r+0xb6>
   2c9de:	4b25      	ldr	r3, [pc, #148]	; (2ca74 <__swsetup_r+0xd0>)
   2c9e0:	429c      	cmp	r4, r3
   2c9e2:	d101      	bne.n	2c9e8 <__swsetup_r+0x44>
   2c9e4:	68ac      	ldr	r4, [r5, #8]
   2c9e6:	e7ec      	b.n	2c9c2 <__swsetup_r+0x1e>
   2c9e8:	4b23      	ldr	r3, [pc, #140]	; (2ca78 <__swsetup_r+0xd4>)
   2c9ea:	429c      	cmp	r4, r3
   2c9ec:	bf08      	it	eq
   2c9ee:	68ec      	ldreq	r4, [r5, #12]
   2c9f0:	e7e7      	b.n	2c9c2 <__swsetup_r+0x1e>
   2c9f2:	0758      	lsls	r0, r3, #29
   2c9f4:	d512      	bpl.n	2ca1c <__swsetup_r+0x78>
   2c9f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2c9f8:	b141      	cbz	r1, 2ca0c <__swsetup_r+0x68>
   2c9fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2c9fe:	4299      	cmp	r1, r3
   2ca00:	d002      	beq.n	2ca08 <__swsetup_r+0x64>
   2ca02:	4630      	mov	r0, r6
   2ca04:	f7ff f8e2 	bl	2bbcc <_free_r>
   2ca08:	2300      	movs	r3, #0
   2ca0a:	6363      	str	r3, [r4, #52]	; 0x34
   2ca0c:	89a3      	ldrh	r3, [r4, #12]
   2ca0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2ca12:	81a3      	strh	r3, [r4, #12]
   2ca14:	2300      	movs	r3, #0
   2ca16:	6063      	str	r3, [r4, #4]
   2ca18:	6923      	ldr	r3, [r4, #16]
   2ca1a:	6023      	str	r3, [r4, #0]
   2ca1c:	89a3      	ldrh	r3, [r4, #12]
   2ca1e:	f043 0308 	orr.w	r3, r3, #8
   2ca22:	81a3      	strh	r3, [r4, #12]
   2ca24:	6923      	ldr	r3, [r4, #16]
   2ca26:	b94b      	cbnz	r3, 2ca3c <__swsetup_r+0x98>
   2ca28:	89a3      	ldrh	r3, [r4, #12]
   2ca2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2ca2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2ca32:	d003      	beq.n	2ca3c <__swsetup_r+0x98>
   2ca34:	4621      	mov	r1, r4
   2ca36:	4630      	mov	r0, r6
   2ca38:	f000 fb72 	bl	2d120 <__smakebuf_r>
   2ca3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ca40:	f013 0201 	ands.w	r2, r3, #1
   2ca44:	d00a      	beq.n	2ca5c <__swsetup_r+0xb8>
   2ca46:	2200      	movs	r2, #0
   2ca48:	60a2      	str	r2, [r4, #8]
   2ca4a:	6962      	ldr	r2, [r4, #20]
   2ca4c:	4252      	negs	r2, r2
   2ca4e:	61a2      	str	r2, [r4, #24]
   2ca50:	6922      	ldr	r2, [r4, #16]
   2ca52:	b942      	cbnz	r2, 2ca66 <__swsetup_r+0xc2>
   2ca54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2ca58:	d1bb      	bne.n	2c9d2 <__swsetup_r+0x2e>
   2ca5a:	bd70      	pop	{r4, r5, r6, pc}
   2ca5c:	0799      	lsls	r1, r3, #30
   2ca5e:	bf58      	it	pl
   2ca60:	6962      	ldrpl	r2, [r4, #20]
   2ca62:	60a2      	str	r2, [r4, #8]
   2ca64:	e7f4      	b.n	2ca50 <__swsetup_r+0xac>
   2ca66:	2000      	movs	r0, #0
   2ca68:	e7f7      	b.n	2ca5a <__swsetup_r+0xb6>
   2ca6a:	bf00      	nop
   2ca6c:	2000ca94 	.word	0x2000ca94
   2ca70:	00037808 	.word	0x00037808
   2ca74:	000377e8 	.word	0x000377e8
   2ca78:	000377c8 	.word	0x000377c8

0002ca7c <_close_r>:
   2ca7c:	b538      	push	{r3, r4, r5, lr}
   2ca7e:	2300      	movs	r3, #0
   2ca80:	4d05      	ldr	r5, [pc, #20]	; (2ca98 <_close_r+0x1c>)
   2ca82:	4604      	mov	r4, r0
   2ca84:	4608      	mov	r0, r1
   2ca86:	602b      	str	r3, [r5, #0]
   2ca88:	f003 f860 	bl	2fb4c <_close>
   2ca8c:	1c43      	adds	r3, r0, #1
   2ca8e:	d102      	bne.n	2ca96 <_close_r+0x1a>
   2ca90:	682b      	ldr	r3, [r5, #0]
   2ca92:	b103      	cbz	r3, 2ca96 <_close_r+0x1a>
   2ca94:	6023      	str	r3, [r4, #0]
   2ca96:	bd38      	pop	{r3, r4, r5, pc}
   2ca98:	20011020 	.word	0x20011020

0002ca9c <_fflush_r>:
   2ca9c:	b538      	push	{r3, r4, r5, lr}
   2ca9e:	690b      	ldr	r3, [r1, #16]
   2caa0:	4605      	mov	r5, r0
   2caa2:	460c      	mov	r4, r1
   2caa4:	b913      	cbnz	r3, 2caac <_fflush_r+0x10>
   2caa6:	2500      	movs	r5, #0
   2caa8:	4628      	mov	r0, r5
   2caaa:	bd38      	pop	{r3, r4, r5, pc}
   2caac:	b118      	cbz	r0, 2cab6 <_fflush_r+0x1a>
   2caae:	6983      	ldr	r3, [r0, #24]
   2cab0:	b90b      	cbnz	r3, 2cab6 <_fflush_r+0x1a>
   2cab2:	f000 f871 	bl	2cb98 <__sinit>
   2cab6:	4b14      	ldr	r3, [pc, #80]	; (2cb08 <_fflush_r+0x6c>)
   2cab8:	429c      	cmp	r4, r3
   2caba:	d11b      	bne.n	2caf4 <_fflush_r+0x58>
   2cabc:	686c      	ldr	r4, [r5, #4]
   2cabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2cac2:	2b00      	cmp	r3, #0
   2cac4:	d0ef      	beq.n	2caa6 <_fflush_r+0xa>
   2cac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2cac8:	07d0      	lsls	r0, r2, #31
   2caca:	d404      	bmi.n	2cad6 <_fflush_r+0x3a>
   2cacc:	0599      	lsls	r1, r3, #22
   2cace:	d402      	bmi.n	2cad6 <_fflush_r+0x3a>
   2cad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2cad2:	f7e4 fc65 	bl	113a0 <__retarget_lock_acquire_recursive>
   2cad6:	4628      	mov	r0, r5
   2cad8:	4621      	mov	r1, r4
   2cada:	f008 fd85 	bl	355e8 <__sflush_r>
   2cade:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2cae0:	4605      	mov	r5, r0
   2cae2:	07da      	lsls	r2, r3, #31
   2cae4:	d4e0      	bmi.n	2caa8 <_fflush_r+0xc>
   2cae6:	89a3      	ldrh	r3, [r4, #12]
   2cae8:	059b      	lsls	r3, r3, #22
   2caea:	d4dd      	bmi.n	2caa8 <_fflush_r+0xc>
   2caec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2caee:	f7e4 fc73 	bl	113d8 <__retarget_lock_release_recursive>
   2caf2:	e7d9      	b.n	2caa8 <_fflush_r+0xc>
   2caf4:	4b05      	ldr	r3, [pc, #20]	; (2cb0c <_fflush_r+0x70>)
   2caf6:	429c      	cmp	r4, r3
   2caf8:	d101      	bne.n	2cafe <_fflush_r+0x62>
   2cafa:	68ac      	ldr	r4, [r5, #8]
   2cafc:	e7df      	b.n	2cabe <_fflush_r+0x22>
   2cafe:	4b04      	ldr	r3, [pc, #16]	; (2cb10 <_fflush_r+0x74>)
   2cb00:	429c      	cmp	r4, r3
   2cb02:	bf08      	it	eq
   2cb04:	68ec      	ldreq	r4, [r5, #12]
   2cb06:	e7da      	b.n	2cabe <_fflush_r+0x22>
   2cb08:	00037808 	.word	0x00037808
   2cb0c:	000377e8 	.word	0x000377e8
   2cb10:	000377c8 	.word	0x000377c8

0002cb14 <std>:
   2cb14:	2300      	movs	r3, #0
   2cb16:	b510      	push	{r4, lr}
   2cb18:	4604      	mov	r4, r0
   2cb1a:	6083      	str	r3, [r0, #8]
   2cb1c:	8181      	strh	r1, [r0, #12]
   2cb1e:	4619      	mov	r1, r3
   2cb20:	6643      	str	r3, [r0, #100]	; 0x64
   2cb22:	81c2      	strh	r2, [r0, #14]
   2cb24:	2208      	movs	r2, #8
   2cb26:	6183      	str	r3, [r0, #24]
   2cb28:	e9c0 3300 	strd	r3, r3, [r0]
   2cb2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2cb30:	305c      	adds	r0, #92	; 0x5c
   2cb32:	f008 fa7b 	bl	3502c <memset>
   2cb36:	4b05      	ldr	r3, [pc, #20]	; (2cb4c <std+0x38>)
   2cb38:	6224      	str	r4, [r4, #32]
   2cb3a:	6263      	str	r3, [r4, #36]	; 0x24
   2cb3c:	4b04      	ldr	r3, [pc, #16]	; (2cb50 <std+0x3c>)
   2cb3e:	62a3      	str	r3, [r4, #40]	; 0x28
   2cb40:	4b04      	ldr	r3, [pc, #16]	; (2cb54 <std+0x40>)
   2cb42:	62e3      	str	r3, [r4, #44]	; 0x2c
   2cb44:	4b04      	ldr	r3, [pc, #16]	; (2cb58 <std+0x44>)
   2cb46:	6323      	str	r3, [r4, #48]	; 0x30
   2cb48:	bd10      	pop	{r4, pc}
   2cb4a:	bf00      	nop
   2cb4c:	00035295 	.word	0x00035295
   2cb50:	000352bb 	.word	0x000352bb
   2cb54:	000352f3 	.word	0x000352f3
   2cb58:	00035317 	.word	0x00035317

0002cb5c <_cleanup_r>:
   2cb5c:	4901      	ldr	r1, [pc, #4]	; (2cb64 <_cleanup_r+0x8>)
   2cb5e:	f008 bdd8 	b.w	35712 <_fwalk_reent>
   2cb62:	bf00      	nop
   2cb64:	0002ca9d 	.word	0x0002ca9d

0002cb68 <__sfp_lock_acquire>:
   2cb68:	4801      	ldr	r0, [pc, #4]	; (2cb70 <__sfp_lock_acquire+0x8>)
   2cb6a:	f7e4 bc19 	b.w	113a0 <__retarget_lock_acquire_recursive>
   2cb6e:	bf00      	nop
   2cb70:	2000ce68 	.word	0x2000ce68

0002cb74 <__sfp_lock_release>:
   2cb74:	4801      	ldr	r0, [pc, #4]	; (2cb7c <__sfp_lock_release+0x8>)
   2cb76:	f7e4 bc2f 	b.w	113d8 <__retarget_lock_release_recursive>
   2cb7a:	bf00      	nop
   2cb7c:	2000ce68 	.word	0x2000ce68

0002cb80 <__sinit_lock_acquire>:
   2cb80:	4801      	ldr	r0, [pc, #4]	; (2cb88 <__sinit_lock_acquire+0x8>)
   2cb82:	f7e4 bc0d 	b.w	113a0 <__retarget_lock_acquire_recursive>
   2cb86:	bf00      	nop
   2cb88:	2000ce7c 	.word	0x2000ce7c

0002cb8c <__sinit_lock_release>:
   2cb8c:	4801      	ldr	r0, [pc, #4]	; (2cb94 <__sinit_lock_release+0x8>)
   2cb8e:	f7e4 bc23 	b.w	113d8 <__retarget_lock_release_recursive>
   2cb92:	bf00      	nop
   2cb94:	2000ce7c 	.word	0x2000ce7c

0002cb98 <__sinit>:
   2cb98:	b510      	push	{r4, lr}
   2cb9a:	4604      	mov	r4, r0
   2cb9c:	f7ff fff0 	bl	2cb80 <__sinit_lock_acquire>
   2cba0:	69a3      	ldr	r3, [r4, #24]
   2cba2:	b11b      	cbz	r3, 2cbac <__sinit+0x14>
   2cba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cba8:	f7ff bff0 	b.w	2cb8c <__sinit_lock_release>
   2cbac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2cbb0:	6523      	str	r3, [r4, #80]	; 0x50
   2cbb2:	4620      	mov	r0, r4
   2cbb4:	4b12      	ldr	r3, [pc, #72]	; (2cc00 <__sinit+0x68>)
   2cbb6:	4a13      	ldr	r2, [pc, #76]	; (2cc04 <__sinit+0x6c>)
   2cbb8:	681b      	ldr	r3, [r3, #0]
   2cbba:	62a2      	str	r2, [r4, #40]	; 0x28
   2cbbc:	42a3      	cmp	r3, r4
   2cbbe:	bf04      	itt	eq
   2cbc0:	2301      	moveq	r3, #1
   2cbc2:	61a3      	streq	r3, [r4, #24]
   2cbc4:	f000 f820 	bl	2cc08 <__sfp>
   2cbc8:	6060      	str	r0, [r4, #4]
   2cbca:	4620      	mov	r0, r4
   2cbcc:	f000 f81c 	bl	2cc08 <__sfp>
   2cbd0:	60a0      	str	r0, [r4, #8]
   2cbd2:	4620      	mov	r0, r4
   2cbd4:	f000 f818 	bl	2cc08 <__sfp>
   2cbd8:	2200      	movs	r2, #0
   2cbda:	2104      	movs	r1, #4
   2cbdc:	60e0      	str	r0, [r4, #12]
   2cbde:	6860      	ldr	r0, [r4, #4]
   2cbe0:	f7ff ff98 	bl	2cb14 <std>
   2cbe4:	2201      	movs	r2, #1
   2cbe6:	2109      	movs	r1, #9
   2cbe8:	68a0      	ldr	r0, [r4, #8]
   2cbea:	f7ff ff93 	bl	2cb14 <std>
   2cbee:	2202      	movs	r2, #2
   2cbf0:	2112      	movs	r1, #18
   2cbf2:	68e0      	ldr	r0, [r4, #12]
   2cbf4:	f7ff ff8e 	bl	2cb14 <std>
   2cbf8:	2301      	movs	r3, #1
   2cbfa:	61a3      	str	r3, [r4, #24]
   2cbfc:	e7d2      	b.n	2cba4 <__sinit+0xc>
   2cbfe:	bf00      	nop
   2cc00:	0003779c 	.word	0x0003779c
   2cc04:	0002cb5d 	.word	0x0002cb5d

0002cc08 <__sfp>:
   2cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc0a:	4607      	mov	r7, r0
   2cc0c:	f7ff ffac 	bl	2cb68 <__sfp_lock_acquire>
   2cc10:	4b1e      	ldr	r3, [pc, #120]	; (2cc8c <__sfp+0x84>)
   2cc12:	681e      	ldr	r6, [r3, #0]
   2cc14:	69b3      	ldr	r3, [r6, #24]
   2cc16:	b913      	cbnz	r3, 2cc1e <__sfp+0x16>
   2cc18:	4630      	mov	r0, r6
   2cc1a:	f7ff ffbd 	bl	2cb98 <__sinit>
   2cc1e:	3648      	adds	r6, #72	; 0x48
   2cc20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2cc24:	3b01      	subs	r3, #1
   2cc26:	d503      	bpl.n	2cc30 <__sfp+0x28>
   2cc28:	6833      	ldr	r3, [r6, #0]
   2cc2a:	b30b      	cbz	r3, 2cc70 <__sfp+0x68>
   2cc2c:	6836      	ldr	r6, [r6, #0]
   2cc2e:	e7f7      	b.n	2cc20 <__sfp+0x18>
   2cc30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2cc34:	b9d5      	cbnz	r5, 2cc6c <__sfp+0x64>
   2cc36:	4b16      	ldr	r3, [pc, #88]	; (2cc90 <__sfp+0x88>)
   2cc38:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2cc3c:	6665      	str	r5, [r4, #100]	; 0x64
   2cc3e:	60e3      	str	r3, [r4, #12]
   2cc40:	f7e4 fb7e 	bl	11340 <__retarget_lock_init_recursive>
   2cc44:	f7ff ff96 	bl	2cb74 <__sfp_lock_release>
   2cc48:	2208      	movs	r2, #8
   2cc4a:	4629      	mov	r1, r5
   2cc4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2cc50:	6025      	str	r5, [r4, #0]
   2cc52:	61a5      	str	r5, [r4, #24]
   2cc54:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2cc58:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2cc5c:	f008 f9e6 	bl	3502c <memset>
   2cc60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2cc64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2cc68:	4620      	mov	r0, r4
   2cc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cc6c:	3468      	adds	r4, #104	; 0x68
   2cc6e:	e7d9      	b.n	2cc24 <__sfp+0x1c>
   2cc70:	2104      	movs	r1, #4
   2cc72:	4638      	mov	r0, r7
   2cc74:	f008 fd37 	bl	356e6 <__sfmoreglue>
   2cc78:	4604      	mov	r4, r0
   2cc7a:	6030      	str	r0, [r6, #0]
   2cc7c:	2800      	cmp	r0, #0
   2cc7e:	d1d5      	bne.n	2cc2c <__sfp+0x24>
   2cc80:	f7ff ff78 	bl	2cb74 <__sfp_lock_release>
   2cc84:	230c      	movs	r3, #12
   2cc86:	603b      	str	r3, [r7, #0]
   2cc88:	e7ee      	b.n	2cc68 <__sfp+0x60>
   2cc8a:	bf00      	nop
   2cc8c:	0003779c 	.word	0x0003779c
   2cc90:	ffff0001 	.word	0xffff0001

0002cc94 <__gethex>:
   2cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc98:	b08b      	sub	sp, #44	; 0x2c
   2cc9a:	468b      	mov	fp, r1
   2cc9c:	4690      	mov	r8, r2
   2cc9e:	9305      	str	r3, [sp, #20]
   2cca0:	4bac      	ldr	r3, [pc, #688]	; (2cf54 <__gethex+0x2c0>)
   2cca2:	9002      	str	r0, [sp, #8]
   2cca4:	681b      	ldr	r3, [r3, #0]
   2cca6:	4618      	mov	r0, r3
   2cca8:	9303      	str	r3, [sp, #12]
   2ccaa:	f7dc fb36 	bl	931a <strlen>
   2ccae:	9b03      	ldr	r3, [sp, #12]
   2ccb0:	9001      	str	r0, [sp, #4]
   2ccb2:	4403      	add	r3, r0
   2ccb4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2ccb8:	9306      	str	r3, [sp, #24]
   2ccba:	f8db 3000 	ldr.w	r3, [fp]
   2ccbe:	1c9a      	adds	r2, r3, #2
   2ccc0:	4617      	mov	r7, r2
   2ccc2:	f812 0b01 	ldrb.w	r0, [r2], #1
   2ccc6:	2830      	cmp	r0, #48	; 0x30
   2ccc8:	d0fa      	beq.n	2ccc0 <__gethex+0x2c>
   2ccca:	1afb      	subs	r3, r7, r3
   2cccc:	f1a3 0a02 	sub.w	sl, r3, #2
   2ccd0:	f008 fd8f 	bl	357f2 <__hexdig_fun>
   2ccd4:	4604      	mov	r4, r0
   2ccd6:	2800      	cmp	r0, #0
   2ccd8:	d138      	bne.n	2cd4c <__gethex+0xb8>
   2ccda:	9a01      	ldr	r2, [sp, #4]
   2ccdc:	4638      	mov	r0, r7
   2ccde:	9903      	ldr	r1, [sp, #12]
   2cce0:	f008 fb4a 	bl	35378 <strncmp>
   2cce4:	4605      	mov	r5, r0
   2cce6:	2800      	cmp	r0, #0
   2cce8:	d164      	bne.n	2cdb4 <__gethex+0x120>
   2ccea:	9b01      	ldr	r3, [sp, #4]
   2ccec:	5cf8      	ldrb	r0, [r7, r3]
   2ccee:	18fe      	adds	r6, r7, r3
   2ccf0:	f008 fd7f 	bl	357f2 <__hexdig_fun>
   2ccf4:	2800      	cmp	r0, #0
   2ccf6:	d05f      	beq.n	2cdb8 <__gethex+0x124>
   2ccf8:	4633      	mov	r3, r6
   2ccfa:	7818      	ldrb	r0, [r3, #0]
   2ccfc:	461f      	mov	r7, r3
   2ccfe:	3301      	adds	r3, #1
   2cd00:	2830      	cmp	r0, #48	; 0x30
   2cd02:	d0fa      	beq.n	2ccfa <__gethex+0x66>
   2cd04:	f008 fd75 	bl	357f2 <__hexdig_fun>
   2cd08:	fab0 f480 	clz	r4, r0
   2cd0c:	4635      	mov	r5, r6
   2cd0e:	f04f 0a01 	mov.w	sl, #1
   2cd12:	0964      	lsrs	r4, r4, #5
   2cd14:	463a      	mov	r2, r7
   2cd16:	4616      	mov	r6, r2
   2cd18:	3201      	adds	r2, #1
   2cd1a:	7830      	ldrb	r0, [r6, #0]
   2cd1c:	f008 fd69 	bl	357f2 <__hexdig_fun>
   2cd20:	2800      	cmp	r0, #0
   2cd22:	d1f8      	bne.n	2cd16 <__gethex+0x82>
   2cd24:	9a01      	ldr	r2, [sp, #4]
   2cd26:	4630      	mov	r0, r6
   2cd28:	9903      	ldr	r1, [sp, #12]
   2cd2a:	f008 fb25 	bl	35378 <strncmp>
   2cd2e:	b980      	cbnz	r0, 2cd52 <__gethex+0xbe>
   2cd30:	b94d      	cbnz	r5, 2cd46 <__gethex+0xb2>
   2cd32:	9b01      	ldr	r3, [sp, #4]
   2cd34:	18f5      	adds	r5, r6, r3
   2cd36:	462a      	mov	r2, r5
   2cd38:	4616      	mov	r6, r2
   2cd3a:	3201      	adds	r2, #1
   2cd3c:	7830      	ldrb	r0, [r6, #0]
   2cd3e:	f008 fd58 	bl	357f2 <__hexdig_fun>
   2cd42:	2800      	cmp	r0, #0
   2cd44:	d1f8      	bne.n	2cd38 <__gethex+0xa4>
   2cd46:	1bad      	subs	r5, r5, r6
   2cd48:	00ad      	lsls	r5, r5, #2
   2cd4a:	e004      	b.n	2cd56 <__gethex+0xc2>
   2cd4c:	2400      	movs	r4, #0
   2cd4e:	4625      	mov	r5, r4
   2cd50:	e7e0      	b.n	2cd14 <__gethex+0x80>
   2cd52:	2d00      	cmp	r5, #0
   2cd54:	d1f7      	bne.n	2cd46 <__gethex+0xb2>
   2cd56:	7833      	ldrb	r3, [r6, #0]
   2cd58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cd5c:	2b50      	cmp	r3, #80	; 0x50
   2cd5e:	d138      	bne.n	2cdd2 <__gethex+0x13e>
   2cd60:	7873      	ldrb	r3, [r6, #1]
   2cd62:	2b2b      	cmp	r3, #43	; 0x2b
   2cd64:	d02a      	beq.n	2cdbc <__gethex+0x128>
   2cd66:	2b2d      	cmp	r3, #45	; 0x2d
   2cd68:	d02c      	beq.n	2cdc4 <__gethex+0x130>
   2cd6a:	1c71      	adds	r1, r6, #1
   2cd6c:	f04f 0900 	mov.w	r9, #0
   2cd70:	7808      	ldrb	r0, [r1, #0]
   2cd72:	f008 fd3e 	bl	357f2 <__hexdig_fun>
   2cd76:	1e43      	subs	r3, r0, #1
   2cd78:	b2db      	uxtb	r3, r3
   2cd7a:	2b18      	cmp	r3, #24
   2cd7c:	d829      	bhi.n	2cdd2 <__gethex+0x13e>
   2cd7e:	f1a0 0210 	sub.w	r2, r0, #16
   2cd82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2cd86:	f008 fd34 	bl	357f2 <__hexdig_fun>
   2cd8a:	1e43      	subs	r3, r0, #1
   2cd8c:	b2db      	uxtb	r3, r3
   2cd8e:	2b18      	cmp	r3, #24
   2cd90:	d91b      	bls.n	2cdca <__gethex+0x136>
   2cd92:	f1b9 0f00 	cmp.w	r9, #0
   2cd96:	d000      	beq.n	2cd9a <__gethex+0x106>
   2cd98:	4252      	negs	r2, r2
   2cd9a:	4415      	add	r5, r2
   2cd9c:	f8cb 1000 	str.w	r1, [fp]
   2cda0:	b1cc      	cbz	r4, 2cdd6 <__gethex+0x142>
   2cda2:	f1ba 0f00 	cmp.w	sl, #0
   2cda6:	bf0c      	ite	eq
   2cda8:	2606      	moveq	r6, #6
   2cdaa:	2600      	movne	r6, #0
   2cdac:	4630      	mov	r0, r6
   2cdae:	b00b      	add	sp, #44	; 0x2c
   2cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cdb4:	463e      	mov	r6, r7
   2cdb6:	4625      	mov	r5, r4
   2cdb8:	2401      	movs	r4, #1
   2cdba:	e7cc      	b.n	2cd56 <__gethex+0xc2>
   2cdbc:	f04f 0900 	mov.w	r9, #0
   2cdc0:	1cb1      	adds	r1, r6, #2
   2cdc2:	e7d5      	b.n	2cd70 <__gethex+0xdc>
   2cdc4:	f04f 0901 	mov.w	r9, #1
   2cdc8:	e7fa      	b.n	2cdc0 <__gethex+0x12c>
   2cdca:	230a      	movs	r3, #10
   2cdcc:	fb03 0002 	mla	r0, r3, r2, r0
   2cdd0:	e7d5      	b.n	2cd7e <__gethex+0xea>
   2cdd2:	4631      	mov	r1, r6
   2cdd4:	e7e2      	b.n	2cd9c <__gethex+0x108>
   2cdd6:	1bf3      	subs	r3, r6, r7
   2cdd8:	4621      	mov	r1, r4
   2cdda:	3b01      	subs	r3, #1
   2cddc:	2b07      	cmp	r3, #7
   2cdde:	dc0a      	bgt.n	2cdf6 <__gethex+0x162>
   2cde0:	9802      	ldr	r0, [sp, #8]
   2cde2:	f000 f9e9 	bl	2d1b8 <_Balloc>
   2cde6:	4604      	mov	r4, r0
   2cde8:	b940      	cbnz	r0, 2cdfc <__gethex+0x168>
   2cdea:	4b5b      	ldr	r3, [pc, #364]	; (2cf58 <__gethex+0x2c4>)
   2cdec:	4602      	mov	r2, r0
   2cdee:	21de      	movs	r1, #222	; 0xde
   2cdf0:	485a      	ldr	r0, [pc, #360]	; (2cf5c <__gethex+0x2c8>)
   2cdf2:	f001 f997 	bl	2e124 <__assert_func>
   2cdf6:	3101      	adds	r1, #1
   2cdf8:	105b      	asrs	r3, r3, #1
   2cdfa:	e7ef      	b.n	2cddc <__gethex+0x148>
   2cdfc:	f04f 0b00 	mov.w	fp, #0
   2ce00:	9b01      	ldr	r3, [sp, #4]
   2ce02:	f100 0914 	add.w	r9, r0, #20
   2ce06:	f1c3 0301 	rsb	r3, r3, #1
   2ce0a:	46da      	mov	sl, fp
   2ce0c:	f8cd 9010 	str.w	r9, [sp, #16]
   2ce10:	9308      	str	r3, [sp, #32]
   2ce12:	42b7      	cmp	r7, r6
   2ce14:	d338      	bcc.n	2ce88 <__gethex+0x1f4>
   2ce16:	9e04      	ldr	r6, [sp, #16]
   2ce18:	4650      	mov	r0, sl
   2ce1a:	f846 ab04 	str.w	sl, [r6], #4
   2ce1e:	eba6 0609 	sub.w	r6, r6, r9
   2ce22:	10b6      	asrs	r6, r6, #2
   2ce24:	6126      	str	r6, [r4, #16]
   2ce26:	0176      	lsls	r6, r6, #5
   2ce28:	f008 fdf0 	bl	35a0c <__hi0bits>
   2ce2c:	f8d8 7000 	ldr.w	r7, [r8]
   2ce30:	1a36      	subs	r6, r6, r0
   2ce32:	42be      	cmp	r6, r7
   2ce34:	dd60      	ble.n	2cef8 <__gethex+0x264>
   2ce36:	1bf6      	subs	r6, r6, r7
   2ce38:	4620      	mov	r0, r4
   2ce3a:	4631      	mov	r1, r6
   2ce3c:	f008 fea3 	bl	35b86 <__any_on>
   2ce40:	4682      	mov	sl, r0
   2ce42:	b178      	cbz	r0, 2ce64 <__gethex+0x1d0>
   2ce44:	1e73      	subs	r3, r6, #1
   2ce46:	f04f 0a01 	mov.w	sl, #1
   2ce4a:	1159      	asrs	r1, r3, #5
   2ce4c:	f003 021f 	and.w	r2, r3, #31
   2ce50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   2ce54:	fa0a f202 	lsl.w	r2, sl, r2
   2ce58:	420a      	tst	r2, r1
   2ce5a:	d003      	beq.n	2ce64 <__gethex+0x1d0>
   2ce5c:	4553      	cmp	r3, sl
   2ce5e:	dc42      	bgt.n	2cee6 <__gethex+0x252>
   2ce60:	f04f 0a02 	mov.w	sl, #2
   2ce64:	4435      	add	r5, r6
   2ce66:	4631      	mov	r1, r6
   2ce68:	4620      	mov	r0, r4
   2ce6a:	f008 fc71 	bl	35750 <rshift>
   2ce6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2ce72:	42ab      	cmp	r3, r5
   2ce74:	da4e      	bge.n	2cf14 <__gethex+0x280>
   2ce76:	4621      	mov	r1, r4
   2ce78:	9802      	ldr	r0, [sp, #8]
   2ce7a:	f000 f9dd 	bl	2d238 <_Bfree>
   2ce7e:	2300      	movs	r3, #0
   2ce80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ce82:	26a3      	movs	r6, #163	; 0xa3
   2ce84:	6013      	str	r3, [r2, #0]
   2ce86:	e791      	b.n	2cdac <__gethex+0x118>
   2ce88:	1e73      	subs	r3, r6, #1
   2ce8a:	9a06      	ldr	r2, [sp, #24]
   2ce8c:	9307      	str	r3, [sp, #28]
   2ce8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2ce92:	4293      	cmp	r3, r2
   2ce94:	d017      	beq.n	2cec6 <__gethex+0x232>
   2ce96:	f1bb 0f20 	cmp.w	fp, #32
   2ce9a:	d106      	bne.n	2ceaa <__gethex+0x216>
   2ce9c:	9b04      	ldr	r3, [sp, #16]
   2ce9e:	f843 ab04 	str.w	sl, [r3], #4
   2cea2:	f04f 0a00 	mov.w	sl, #0
   2cea6:	9304      	str	r3, [sp, #16]
   2cea8:	46d3      	mov	fp, sl
   2ceaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   2ceae:	f008 fca0 	bl	357f2 <__hexdig_fun>
   2ceb2:	f000 000f 	and.w	r0, r0, #15
   2ceb6:	9b07      	ldr	r3, [sp, #28]
   2ceb8:	fa00 f00b 	lsl.w	r0, r0, fp
   2cebc:	f10b 0b04 	add.w	fp, fp, #4
   2cec0:	ea4a 0a00 	orr.w	sl, sl, r0
   2cec4:	e00d      	b.n	2cee2 <__gethex+0x24e>
   2cec6:	1e73      	subs	r3, r6, #1
   2cec8:	9a08      	ldr	r2, [sp, #32]
   2ceca:	4413      	add	r3, r2
   2cecc:	42bb      	cmp	r3, r7
   2cece:	d3e2      	bcc.n	2ce96 <__gethex+0x202>
   2ced0:	4618      	mov	r0, r3
   2ced2:	9a01      	ldr	r2, [sp, #4]
   2ced4:	9903      	ldr	r1, [sp, #12]
   2ced6:	9309      	str	r3, [sp, #36]	; 0x24
   2ced8:	f008 fa4e 	bl	35378 <strncmp>
   2cedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cede:	2800      	cmp	r0, #0
   2cee0:	d1d9      	bne.n	2ce96 <__gethex+0x202>
   2cee2:	461e      	mov	r6, r3
   2cee4:	e795      	b.n	2ce12 <__gethex+0x17e>
   2cee6:	1eb1      	subs	r1, r6, #2
   2cee8:	4620      	mov	r0, r4
   2ceea:	f008 fe4c 	bl	35b86 <__any_on>
   2ceee:	2800      	cmp	r0, #0
   2cef0:	d0b6      	beq.n	2ce60 <__gethex+0x1cc>
   2cef2:	f04f 0a03 	mov.w	sl, #3
   2cef6:	e7b5      	b.n	2ce64 <__gethex+0x1d0>
   2cef8:	da09      	bge.n	2cf0e <__gethex+0x27a>
   2cefa:	1bbe      	subs	r6, r7, r6
   2cefc:	4621      	mov	r1, r4
   2cefe:	9802      	ldr	r0, [sp, #8]
   2cf00:	4632      	mov	r2, r6
   2cf02:	1bad      	subs	r5, r5, r6
   2cf04:	f000 fb66 	bl	2d5d4 <__lshift>
   2cf08:	4604      	mov	r4, r0
   2cf0a:	f100 0914 	add.w	r9, r0, #20
   2cf0e:	f04f 0a00 	mov.w	sl, #0
   2cf12:	e7ac      	b.n	2ce6e <__gethex+0x1da>
   2cf14:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2cf18:	42ab      	cmp	r3, r5
   2cf1a:	dd70      	ble.n	2cffe <__gethex+0x36a>
   2cf1c:	1b5d      	subs	r5, r3, r5
   2cf1e:	42af      	cmp	r7, r5
   2cf20:	dc35      	bgt.n	2cf8e <__gethex+0x2fa>
   2cf22:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2cf26:	2b02      	cmp	r3, #2
   2cf28:	d029      	beq.n	2cf7e <__gethex+0x2ea>
   2cf2a:	2b03      	cmp	r3, #3
   2cf2c:	d02b      	beq.n	2cf86 <__gethex+0x2f2>
   2cf2e:	2b01      	cmp	r3, #1
   2cf30:	d11c      	bne.n	2cf6c <__gethex+0x2d8>
   2cf32:	42af      	cmp	r7, r5
   2cf34:	d11a      	bne.n	2cf6c <__gethex+0x2d8>
   2cf36:	2f01      	cmp	r7, #1
   2cf38:	d112      	bne.n	2cf60 <__gethex+0x2cc>
   2cf3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2cf3e:	2662      	movs	r6, #98	; 0x62
   2cf40:	9a05      	ldr	r2, [sp, #20]
   2cf42:	6013      	str	r3, [r2, #0]
   2cf44:	2301      	movs	r3, #1
   2cf46:	6123      	str	r3, [r4, #16]
   2cf48:	f8c9 3000 	str.w	r3, [r9]
   2cf4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2cf4e:	601c      	str	r4, [r3, #0]
   2cf50:	e72c      	b.n	2cdac <__gethex+0x118>
   2cf52:	bf00      	nop
   2cf54:	00037828 	.word	0x00037828
   2cf58:	0004115d 	.word	0x0004115d
   2cf5c:	0004116e 	.word	0x0004116e
   2cf60:	1e79      	subs	r1, r7, #1
   2cf62:	4620      	mov	r0, r4
   2cf64:	f008 fe0f 	bl	35b86 <__any_on>
   2cf68:	2800      	cmp	r0, #0
   2cf6a:	d1e6      	bne.n	2cf3a <__gethex+0x2a6>
   2cf6c:	4621      	mov	r1, r4
   2cf6e:	9802      	ldr	r0, [sp, #8]
   2cf70:	f000 f962 	bl	2d238 <_Bfree>
   2cf74:	2300      	movs	r3, #0
   2cf76:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2cf78:	2650      	movs	r6, #80	; 0x50
   2cf7a:	6013      	str	r3, [r2, #0]
   2cf7c:	e716      	b.n	2cdac <__gethex+0x118>
   2cf7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2cf80:	2b00      	cmp	r3, #0
   2cf82:	d1f3      	bne.n	2cf6c <__gethex+0x2d8>
   2cf84:	e7d9      	b.n	2cf3a <__gethex+0x2a6>
   2cf86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2cf88:	2b00      	cmp	r3, #0
   2cf8a:	d1d6      	bne.n	2cf3a <__gethex+0x2a6>
   2cf8c:	e7ee      	b.n	2cf6c <__gethex+0x2d8>
   2cf8e:	1e6e      	subs	r6, r5, #1
   2cf90:	f1ba 0f00 	cmp.w	sl, #0
   2cf94:	d130      	bne.n	2cff8 <__gethex+0x364>
   2cf96:	b126      	cbz	r6, 2cfa2 <__gethex+0x30e>
   2cf98:	4631      	mov	r1, r6
   2cf9a:	4620      	mov	r0, r4
   2cf9c:	f008 fdf3 	bl	35b86 <__any_on>
   2cfa0:	4682      	mov	sl, r0
   2cfa2:	1172      	asrs	r2, r6, #5
   2cfa4:	2301      	movs	r3, #1
   2cfa6:	f006 061f 	and.w	r6, r6, #31
   2cfaa:	4629      	mov	r1, r5
   2cfac:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   2cfb0:	4620      	mov	r0, r4
   2cfb2:	40b3      	lsls	r3, r6
   2cfb4:	1b7f      	subs	r7, r7, r5
   2cfb6:	2602      	movs	r6, #2
   2cfb8:	4213      	tst	r3, r2
   2cfba:	bf18      	it	ne
   2cfbc:	f04a 0a02 	orrne.w	sl, sl, #2
   2cfc0:	f008 fbc6 	bl	35750 <rshift>
   2cfc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2cfc8:	f1ba 0f00 	cmp.w	sl, #0
   2cfcc:	d047      	beq.n	2d05e <__gethex+0x3ca>
   2cfce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2cfd2:	2b02      	cmp	r3, #2
   2cfd4:	d015      	beq.n	2d002 <__gethex+0x36e>
   2cfd6:	2b03      	cmp	r3, #3
   2cfd8:	d017      	beq.n	2d00a <__gethex+0x376>
   2cfda:	2b01      	cmp	r3, #1
   2cfdc:	d109      	bne.n	2cff2 <__gethex+0x35e>
   2cfde:	f01a 0f02 	tst.w	sl, #2
   2cfe2:	d006      	beq.n	2cff2 <__gethex+0x35e>
   2cfe4:	f8d9 3000 	ldr.w	r3, [r9]
   2cfe8:	ea4a 0a03 	orr.w	sl, sl, r3
   2cfec:	f01a 0f01 	tst.w	sl, #1
   2cff0:	d10e      	bne.n	2d010 <__gethex+0x37c>
   2cff2:	f046 0610 	orr.w	r6, r6, #16
   2cff6:	e032      	b.n	2d05e <__gethex+0x3ca>
   2cff8:	f04f 0a01 	mov.w	sl, #1
   2cffc:	e7d1      	b.n	2cfa2 <__gethex+0x30e>
   2cffe:	2601      	movs	r6, #1
   2d000:	e7e2      	b.n	2cfc8 <__gethex+0x334>
   2d002:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d004:	f1c3 0301 	rsb	r3, r3, #1
   2d008:	9315      	str	r3, [sp, #84]	; 0x54
   2d00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d00c:	2b00      	cmp	r3, #0
   2d00e:	d0f0      	beq.n	2cff2 <__gethex+0x35e>
   2d010:	f8d4 b010 	ldr.w	fp, [r4, #16]
   2d014:	f104 0314 	add.w	r3, r4, #20
   2d018:	f04f 0c00 	mov.w	ip, #0
   2d01c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   2d020:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   2d024:	4618      	mov	r0, r3
   2d026:	f853 2b04 	ldr.w	r2, [r3], #4
   2d02a:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d02e:	d01b      	beq.n	2d068 <__gethex+0x3d4>
   2d030:	3201      	adds	r2, #1
   2d032:	6002      	str	r2, [r0, #0]
   2d034:	2e02      	cmp	r6, #2
   2d036:	f104 0314 	add.w	r3, r4, #20
   2d03a:	d13c      	bne.n	2d0b6 <__gethex+0x422>
   2d03c:	f8d8 2000 	ldr.w	r2, [r8]
   2d040:	3a01      	subs	r2, #1
   2d042:	42ba      	cmp	r2, r7
   2d044:	d109      	bne.n	2d05a <__gethex+0x3c6>
   2d046:	1179      	asrs	r1, r7, #5
   2d048:	2201      	movs	r2, #1
   2d04a:	f007 071f 	and.w	r7, r7, #31
   2d04e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2d052:	fa02 f707 	lsl.w	r7, r2, r7
   2d056:	421f      	tst	r7, r3
   2d058:	d13a      	bne.n	2d0d0 <__gethex+0x43c>
   2d05a:	f046 0620 	orr.w	r6, r6, #32
   2d05e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2d060:	601c      	str	r4, [r3, #0]
   2d062:	9b05      	ldr	r3, [sp, #20]
   2d064:	601d      	str	r5, [r3, #0]
   2d066:	e6a1      	b.n	2cdac <__gethex+0x118>
   2d068:	4299      	cmp	r1, r3
   2d06a:	f843 cc04 	str.w	ip, [r3, #-4]
   2d06e:	d8d9      	bhi.n	2d024 <__gethex+0x390>
   2d070:	68a3      	ldr	r3, [r4, #8]
   2d072:	459b      	cmp	fp, r3
   2d074:	db17      	blt.n	2d0a6 <__gethex+0x412>
   2d076:	6861      	ldr	r1, [r4, #4]
   2d078:	9802      	ldr	r0, [sp, #8]
   2d07a:	3101      	adds	r1, #1
   2d07c:	f000 f89c 	bl	2d1b8 <_Balloc>
   2d080:	4681      	mov	r9, r0
   2d082:	b918      	cbnz	r0, 2d08c <__gethex+0x3f8>
   2d084:	4b1a      	ldr	r3, [pc, #104]	; (2d0f0 <__gethex+0x45c>)
   2d086:	4602      	mov	r2, r0
   2d088:	2184      	movs	r1, #132	; 0x84
   2d08a:	e6b1      	b.n	2cdf0 <__gethex+0x15c>
   2d08c:	6922      	ldr	r2, [r4, #16]
   2d08e:	f104 010c 	add.w	r1, r4, #12
   2d092:	300c      	adds	r0, #12
   2d094:	3202      	adds	r2, #2
   2d096:	0092      	lsls	r2, r2, #2
   2d098:	f007 ffa8 	bl	34fec <memcpy>
   2d09c:	4621      	mov	r1, r4
   2d09e:	464c      	mov	r4, r9
   2d0a0:	9802      	ldr	r0, [sp, #8]
   2d0a2:	f000 f8c9 	bl	2d238 <_Bfree>
   2d0a6:	6923      	ldr	r3, [r4, #16]
   2d0a8:	1c5a      	adds	r2, r3, #1
   2d0aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2d0ae:	6122      	str	r2, [r4, #16]
   2d0b0:	2201      	movs	r2, #1
   2d0b2:	615a      	str	r2, [r3, #20]
   2d0b4:	e7be      	b.n	2d034 <__gethex+0x3a0>
   2d0b6:	6922      	ldr	r2, [r4, #16]
   2d0b8:	455a      	cmp	r2, fp
   2d0ba:	dd0b      	ble.n	2d0d4 <__gethex+0x440>
   2d0bc:	2101      	movs	r1, #1
   2d0be:	4620      	mov	r0, r4
   2d0c0:	f008 fb46 	bl	35750 <rshift>
   2d0c4:	3501      	adds	r5, #1
   2d0c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2d0ca:	42ab      	cmp	r3, r5
   2d0cc:	f6ff aed3 	blt.w	2ce76 <__gethex+0x1e2>
   2d0d0:	2601      	movs	r6, #1
   2d0d2:	e7c2      	b.n	2d05a <__gethex+0x3c6>
   2d0d4:	f017 071f 	ands.w	r7, r7, #31
   2d0d8:	d0fa      	beq.n	2d0d0 <__gethex+0x43c>
   2d0da:	4453      	add	r3, sl
   2d0dc:	f1c7 0720 	rsb	r7, r7, #32
   2d0e0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2d0e4:	f008 fc92 	bl	35a0c <__hi0bits>
   2d0e8:	42b8      	cmp	r0, r7
   2d0ea:	dbe7      	blt.n	2d0bc <__gethex+0x428>
   2d0ec:	e7f0      	b.n	2d0d0 <__gethex+0x43c>
   2d0ee:	bf00      	nop
   2d0f0:	0004115d 	.word	0x0004115d

0002d0f4 <_localeconv_r>:
   2d0f4:	4800      	ldr	r0, [pc, #0]	; (2d0f8 <_localeconv_r+0x4>)
   2d0f6:	4770      	bx	lr
   2d0f8:	2000cbe8 	.word	0x2000cbe8

0002d0fc <_lseek_r>:
   2d0fc:	b538      	push	{r3, r4, r5, lr}
   2d0fe:	4604      	mov	r4, r0
   2d100:	4d06      	ldr	r5, [pc, #24]	; (2d11c <_lseek_r+0x20>)
   2d102:	4608      	mov	r0, r1
   2d104:	4611      	mov	r1, r2
   2d106:	2200      	movs	r2, #0
   2d108:	602a      	str	r2, [r5, #0]
   2d10a:	461a      	mov	r2, r3
   2d10c:	f002 fd21 	bl	2fb52 <_lseek>
   2d110:	1c43      	adds	r3, r0, #1
   2d112:	d102      	bne.n	2d11a <_lseek_r+0x1e>
   2d114:	682b      	ldr	r3, [r5, #0]
   2d116:	b103      	cbz	r3, 2d11a <_lseek_r+0x1e>
   2d118:	6023      	str	r3, [r4, #0]
   2d11a:	bd38      	pop	{r3, r4, r5, pc}
   2d11c:	20011020 	.word	0x20011020

0002d120 <__smakebuf_r>:
   2d120:	898b      	ldrh	r3, [r1, #12]
   2d122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d124:	079d      	lsls	r5, r3, #30
   2d126:	4606      	mov	r6, r0
   2d128:	460c      	mov	r4, r1
   2d12a:	d507      	bpl.n	2d13c <__smakebuf_r+0x1c>
   2d12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2d130:	6023      	str	r3, [r4, #0]
   2d132:	6123      	str	r3, [r4, #16]
   2d134:	2301      	movs	r3, #1
   2d136:	6163      	str	r3, [r4, #20]
   2d138:	b003      	add	sp, #12
   2d13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d13c:	ab01      	add	r3, sp, #4
   2d13e:	466a      	mov	r2, sp
   2d140:	f008 fc2d 	bl	3599e <__swhatbuf_r>
   2d144:	9f00      	ldr	r7, [sp, #0]
   2d146:	4605      	mov	r5, r0
   2d148:	4630      	mov	r0, r6
   2d14a:	4639      	mov	r1, r7
   2d14c:	f7fe fd88 	bl	2bc60 <_malloc_r>
   2d150:	b948      	cbnz	r0, 2d166 <__smakebuf_r+0x46>
   2d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2d156:	059a      	lsls	r2, r3, #22
   2d158:	d4ee      	bmi.n	2d138 <__smakebuf_r+0x18>
   2d15a:	f023 0303 	bic.w	r3, r3, #3
   2d15e:	f043 0302 	orr.w	r3, r3, #2
   2d162:	81a3      	strh	r3, [r4, #12]
   2d164:	e7e2      	b.n	2d12c <__smakebuf_r+0xc>
   2d166:	4b0d      	ldr	r3, [pc, #52]	; (2d19c <__smakebuf_r+0x7c>)
   2d168:	62b3      	str	r3, [r6, #40]	; 0x28
   2d16a:	89a3      	ldrh	r3, [r4, #12]
   2d16c:	6020      	str	r0, [r4, #0]
   2d16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2d172:	81a3      	strh	r3, [r4, #12]
   2d174:	9b01      	ldr	r3, [sp, #4]
   2d176:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2d17a:	b15b      	cbz	r3, 2d194 <__smakebuf_r+0x74>
   2d17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2d180:	4630      	mov	r0, r6
   2d182:	f001 f811 	bl	2e1a8 <_isatty_r>
   2d186:	b128      	cbz	r0, 2d194 <__smakebuf_r+0x74>
   2d188:	89a3      	ldrh	r3, [r4, #12]
   2d18a:	f023 0303 	bic.w	r3, r3, #3
   2d18e:	f043 0301 	orr.w	r3, r3, #1
   2d192:	81a3      	strh	r3, [r4, #12]
   2d194:	89a3      	ldrh	r3, [r4, #12]
   2d196:	431d      	orrs	r5, r3
   2d198:	81a5      	strh	r5, [r4, #12]
   2d19a:	e7cd      	b.n	2d138 <__smakebuf_r+0x18>
   2d19c:	0002cb5d 	.word	0x0002cb5d

0002d1a0 <__malloc_lock>:
   2d1a0:	4801      	ldr	r0, [pc, #4]	; (2d1a8 <__malloc_lock+0x8>)
   2d1a2:	f7e4 b8fd 	b.w	113a0 <__retarget_lock_acquire_recursive>
   2d1a6:	bf00      	nop
   2d1a8:	2000ce54 	.word	0x2000ce54

0002d1ac <__malloc_unlock>:
   2d1ac:	4801      	ldr	r0, [pc, #4]	; (2d1b4 <__malloc_unlock+0x8>)
   2d1ae:	f7e4 b913 	b.w	113d8 <__retarget_lock_release_recursive>
   2d1b2:	bf00      	nop
   2d1b4:	2000ce54 	.word	0x2000ce54

0002d1b8 <_Balloc>:
   2d1b8:	b570      	push	{r4, r5, r6, lr}
   2d1ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d1bc:	4604      	mov	r4, r0
   2d1be:	460d      	mov	r5, r1
   2d1c0:	b976      	cbnz	r6, 2d1e0 <_Balloc+0x28>
   2d1c2:	2010      	movs	r0, #16
   2d1c4:	f7fe fcf2 	bl	2bbac <malloc>
   2d1c8:	4602      	mov	r2, r0
   2d1ca:	6260      	str	r0, [r4, #36]	; 0x24
   2d1cc:	b920      	cbnz	r0, 2d1d8 <_Balloc+0x20>
   2d1ce:	4b18      	ldr	r3, [pc, #96]	; (2d230 <_Balloc+0x78>)
   2d1d0:	2166      	movs	r1, #102	; 0x66
   2d1d2:	4818      	ldr	r0, [pc, #96]	; (2d234 <_Balloc+0x7c>)
   2d1d4:	f000 ffa6 	bl	2e124 <__assert_func>
   2d1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d1dc:	6006      	str	r6, [r0, #0]
   2d1de:	60c6      	str	r6, [r0, #12]
   2d1e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2d1e2:	68f3      	ldr	r3, [r6, #12]
   2d1e4:	b183      	cbz	r3, 2d208 <_Balloc+0x50>
   2d1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d1e8:	68db      	ldr	r3, [r3, #12]
   2d1ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2d1ee:	b9b8      	cbnz	r0, 2d220 <_Balloc+0x68>
   2d1f0:	2101      	movs	r1, #1
   2d1f2:	4620      	mov	r0, r4
   2d1f4:	fa01 f605 	lsl.w	r6, r1, r5
   2d1f8:	1d72      	adds	r2, r6, #5
   2d1fa:	0092      	lsls	r2, r2, #2
   2d1fc:	f008 fce4 	bl	35bc8 <_calloc_r>
   2d200:	b160      	cbz	r0, 2d21c <_Balloc+0x64>
   2d202:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2d206:	e00e      	b.n	2d226 <_Balloc+0x6e>
   2d208:	2221      	movs	r2, #33	; 0x21
   2d20a:	2104      	movs	r1, #4
   2d20c:	4620      	mov	r0, r4
   2d20e:	f008 fcdb 	bl	35bc8 <_calloc_r>
   2d212:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d214:	60f0      	str	r0, [r6, #12]
   2d216:	68db      	ldr	r3, [r3, #12]
   2d218:	2b00      	cmp	r3, #0
   2d21a:	d1e4      	bne.n	2d1e6 <_Balloc+0x2e>
   2d21c:	2000      	movs	r0, #0
   2d21e:	bd70      	pop	{r4, r5, r6, pc}
   2d220:	6802      	ldr	r2, [r0, #0]
   2d222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2d226:	2300      	movs	r3, #0
   2d228:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2d22c:	e7f7      	b.n	2d21e <_Balloc+0x66>
   2d22e:	bf00      	nop
   2d230:	000410d2 	.word	0x000410d2
   2d234:	000411f0 	.word	0x000411f0

0002d238 <_Bfree>:
   2d238:	b570      	push	{r4, r5, r6, lr}
   2d23a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d23c:	4605      	mov	r5, r0
   2d23e:	460c      	mov	r4, r1
   2d240:	b976      	cbnz	r6, 2d260 <_Bfree+0x28>
   2d242:	2010      	movs	r0, #16
   2d244:	f7fe fcb2 	bl	2bbac <malloc>
   2d248:	4602      	mov	r2, r0
   2d24a:	6268      	str	r0, [r5, #36]	; 0x24
   2d24c:	b920      	cbnz	r0, 2d258 <_Bfree+0x20>
   2d24e:	4b09      	ldr	r3, [pc, #36]	; (2d274 <_Bfree+0x3c>)
   2d250:	218a      	movs	r1, #138	; 0x8a
   2d252:	4809      	ldr	r0, [pc, #36]	; (2d278 <_Bfree+0x40>)
   2d254:	f000 ff66 	bl	2e124 <__assert_func>
   2d258:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d25c:	6006      	str	r6, [r0, #0]
   2d25e:	60c6      	str	r6, [r0, #12]
   2d260:	b13c      	cbz	r4, 2d272 <_Bfree+0x3a>
   2d262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d264:	6862      	ldr	r2, [r4, #4]
   2d266:	68db      	ldr	r3, [r3, #12]
   2d268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d26c:	6021      	str	r1, [r4, #0]
   2d26e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2d272:	bd70      	pop	{r4, r5, r6, pc}
   2d274:	000410d2 	.word	0x000410d2
   2d278:	000411f0 	.word	0x000411f0

0002d27c <__multadd>:
   2d27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d280:	f101 0c14 	add.w	ip, r1, #20
   2d284:	4607      	mov	r7, r0
   2d286:	460c      	mov	r4, r1
   2d288:	461e      	mov	r6, r3
   2d28a:	690d      	ldr	r5, [r1, #16]
   2d28c:	2000      	movs	r0, #0
   2d28e:	f8dc 3000 	ldr.w	r3, [ip]
   2d292:	3001      	adds	r0, #1
   2d294:	b299      	uxth	r1, r3
   2d296:	4285      	cmp	r5, r0
   2d298:	fb02 6101 	mla	r1, r2, r1, r6
   2d29c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2d2a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2d2a4:	b289      	uxth	r1, r1
   2d2a6:	fb02 3306 	mla	r3, r2, r6, r3
   2d2aa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2d2ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2d2b2:	f84c 1b04 	str.w	r1, [ip], #4
   2d2b6:	dcea      	bgt.n	2d28e <__multadd+0x12>
   2d2b8:	b30e      	cbz	r6, 2d2fe <__multadd+0x82>
   2d2ba:	68a3      	ldr	r3, [r4, #8]
   2d2bc:	42ab      	cmp	r3, r5
   2d2be:	dc19      	bgt.n	2d2f4 <__multadd+0x78>
   2d2c0:	6861      	ldr	r1, [r4, #4]
   2d2c2:	4638      	mov	r0, r7
   2d2c4:	3101      	adds	r1, #1
   2d2c6:	f7ff ff77 	bl	2d1b8 <_Balloc>
   2d2ca:	4680      	mov	r8, r0
   2d2cc:	b928      	cbnz	r0, 2d2da <__multadd+0x5e>
   2d2ce:	4602      	mov	r2, r0
   2d2d0:	4b0c      	ldr	r3, [pc, #48]	; (2d304 <__multadd+0x88>)
   2d2d2:	21b5      	movs	r1, #181	; 0xb5
   2d2d4:	480c      	ldr	r0, [pc, #48]	; (2d308 <__multadd+0x8c>)
   2d2d6:	f000 ff25 	bl	2e124 <__assert_func>
   2d2da:	6922      	ldr	r2, [r4, #16]
   2d2dc:	f104 010c 	add.w	r1, r4, #12
   2d2e0:	300c      	adds	r0, #12
   2d2e2:	3202      	adds	r2, #2
   2d2e4:	0092      	lsls	r2, r2, #2
   2d2e6:	f007 fe81 	bl	34fec <memcpy>
   2d2ea:	4621      	mov	r1, r4
   2d2ec:	4644      	mov	r4, r8
   2d2ee:	4638      	mov	r0, r7
   2d2f0:	f7ff ffa2 	bl	2d238 <_Bfree>
   2d2f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2d2f8:	3501      	adds	r5, #1
   2d2fa:	615e      	str	r6, [r3, #20]
   2d2fc:	6125      	str	r5, [r4, #16]
   2d2fe:	4620      	mov	r0, r4
   2d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d304:	0004115d 	.word	0x0004115d
   2d308:	000411f0 	.word	0x000411f0

0002d30c <__s2b>:
   2d30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d310:	4615      	mov	r5, r2
   2d312:	461f      	mov	r7, r3
   2d314:	2209      	movs	r2, #9
   2d316:	3308      	adds	r3, #8
   2d318:	460c      	mov	r4, r1
   2d31a:	4606      	mov	r6, r0
   2d31c:	2100      	movs	r1, #0
   2d31e:	fb93 f3f2 	sdiv	r3, r3, r2
   2d322:	2201      	movs	r2, #1
   2d324:	429a      	cmp	r2, r3
   2d326:	db09      	blt.n	2d33c <__s2b+0x30>
   2d328:	4630      	mov	r0, r6
   2d32a:	f7ff ff45 	bl	2d1b8 <_Balloc>
   2d32e:	b940      	cbnz	r0, 2d342 <__s2b+0x36>
   2d330:	4602      	mov	r2, r0
   2d332:	4b19      	ldr	r3, [pc, #100]	; (2d398 <__s2b+0x8c>)
   2d334:	21ce      	movs	r1, #206	; 0xce
   2d336:	4819      	ldr	r0, [pc, #100]	; (2d39c <__s2b+0x90>)
   2d338:	f000 fef4 	bl	2e124 <__assert_func>
   2d33c:	0052      	lsls	r2, r2, #1
   2d33e:	3101      	adds	r1, #1
   2d340:	e7f0      	b.n	2d324 <__s2b+0x18>
   2d342:	9b08      	ldr	r3, [sp, #32]
   2d344:	2d09      	cmp	r5, #9
   2d346:	6143      	str	r3, [r0, #20]
   2d348:	f04f 0301 	mov.w	r3, #1
   2d34c:	6103      	str	r3, [r0, #16]
   2d34e:	dd16      	ble.n	2d37e <__s2b+0x72>
   2d350:	f104 0909 	add.w	r9, r4, #9
   2d354:	442c      	add	r4, r5
   2d356:	46c8      	mov	r8, r9
   2d358:	f818 3b01 	ldrb.w	r3, [r8], #1
   2d35c:	4601      	mov	r1, r0
   2d35e:	220a      	movs	r2, #10
   2d360:	4630      	mov	r0, r6
   2d362:	3b30      	subs	r3, #48	; 0x30
   2d364:	f7ff ff8a 	bl	2d27c <__multadd>
   2d368:	45a0      	cmp	r8, r4
   2d36a:	d1f5      	bne.n	2d358 <__s2b+0x4c>
   2d36c:	f1a5 0408 	sub.w	r4, r5, #8
   2d370:	444c      	add	r4, r9
   2d372:	1b2d      	subs	r5, r5, r4
   2d374:	1963      	adds	r3, r4, r5
   2d376:	42bb      	cmp	r3, r7
   2d378:	db04      	blt.n	2d384 <__s2b+0x78>
   2d37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d37e:	340a      	adds	r4, #10
   2d380:	2509      	movs	r5, #9
   2d382:	e7f6      	b.n	2d372 <__s2b+0x66>
   2d384:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d388:	4601      	mov	r1, r0
   2d38a:	220a      	movs	r2, #10
   2d38c:	4630      	mov	r0, r6
   2d38e:	3b30      	subs	r3, #48	; 0x30
   2d390:	f7ff ff74 	bl	2d27c <__multadd>
   2d394:	e7ee      	b.n	2d374 <__s2b+0x68>
   2d396:	bf00      	nop
   2d398:	0004115d 	.word	0x0004115d
   2d39c:	000411f0 	.word	0x000411f0

0002d3a0 <__i2b>:
   2d3a0:	b510      	push	{r4, lr}
   2d3a2:	460c      	mov	r4, r1
   2d3a4:	2101      	movs	r1, #1
   2d3a6:	f7ff ff07 	bl	2d1b8 <_Balloc>
   2d3aa:	4602      	mov	r2, r0
   2d3ac:	b928      	cbnz	r0, 2d3ba <__i2b+0x1a>
   2d3ae:	4b05      	ldr	r3, [pc, #20]	; (2d3c4 <__i2b+0x24>)
   2d3b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2d3b4:	4804      	ldr	r0, [pc, #16]	; (2d3c8 <__i2b+0x28>)
   2d3b6:	f000 feb5 	bl	2e124 <__assert_func>
   2d3ba:	2301      	movs	r3, #1
   2d3bc:	6144      	str	r4, [r0, #20]
   2d3be:	6103      	str	r3, [r0, #16]
   2d3c0:	bd10      	pop	{r4, pc}
   2d3c2:	bf00      	nop
   2d3c4:	0004115d 	.word	0x0004115d
   2d3c8:	000411f0 	.word	0x000411f0

0002d3cc <__multiply>:
   2d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3d0:	4614      	mov	r4, r2
   2d3d2:	690a      	ldr	r2, [r1, #16]
   2d3d4:	460f      	mov	r7, r1
   2d3d6:	b085      	sub	sp, #20
   2d3d8:	6923      	ldr	r3, [r4, #16]
   2d3da:	429a      	cmp	r2, r3
   2d3dc:	bfa2      	ittt	ge
   2d3de:	4623      	movge	r3, r4
   2d3e0:	460c      	movge	r4, r1
   2d3e2:	461f      	movge	r7, r3
   2d3e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   2d3e8:	68a3      	ldr	r3, [r4, #8]
   2d3ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
   2d3ee:	6861      	ldr	r1, [r4, #4]
   2d3f0:	eb0a 0609 	add.w	r6, sl, r9
   2d3f4:	42b3      	cmp	r3, r6
   2d3f6:	bfb8      	it	lt
   2d3f8:	3101      	addlt	r1, #1
   2d3fa:	f7ff fedd 	bl	2d1b8 <_Balloc>
   2d3fe:	b930      	cbnz	r0, 2d40e <__multiply+0x42>
   2d400:	4602      	mov	r2, r0
   2d402:	4b45      	ldr	r3, [pc, #276]	; (2d518 <__multiply+0x14c>)
   2d404:	f240 115d 	movw	r1, #349	; 0x15d
   2d408:	4844      	ldr	r0, [pc, #272]	; (2d51c <__multiply+0x150>)
   2d40a:	f000 fe8b 	bl	2e124 <__assert_func>
   2d40e:	f100 0514 	add.w	r5, r0, #20
   2d412:	2200      	movs	r2, #0
   2d414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   2d418:	462b      	mov	r3, r5
   2d41a:	4543      	cmp	r3, r8
   2d41c:	d321      	bcc.n	2d462 <__multiply+0x96>
   2d41e:	f107 0114 	add.w	r1, r7, #20
   2d422:	f104 0214 	add.w	r2, r4, #20
   2d426:	f104 0715 	add.w	r7, r4, #21
   2d42a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2d42e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   2d432:	9302      	str	r3, [sp, #8]
   2d434:	1b13      	subs	r3, r2, r4
   2d436:	3b15      	subs	r3, #21
   2d438:	f023 0303 	bic.w	r3, r3, #3
   2d43c:	3304      	adds	r3, #4
   2d43e:	42ba      	cmp	r2, r7
   2d440:	bf38      	it	cc
   2d442:	2304      	movcc	r3, #4
   2d444:	9301      	str	r3, [sp, #4]
   2d446:	9b02      	ldr	r3, [sp, #8]
   2d448:	9103      	str	r1, [sp, #12]
   2d44a:	428b      	cmp	r3, r1
   2d44c:	d80c      	bhi.n	2d468 <__multiply+0x9c>
   2d44e:	2e00      	cmp	r6, #0
   2d450:	dd03      	ble.n	2d45a <__multiply+0x8e>
   2d452:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2d456:	2b00      	cmp	r3, #0
   2d458:	d05b      	beq.n	2d512 <__multiply+0x146>
   2d45a:	6106      	str	r6, [r0, #16]
   2d45c:	b005      	add	sp, #20
   2d45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d462:	f843 2b04 	str.w	r2, [r3], #4
   2d466:	e7d8      	b.n	2d41a <__multiply+0x4e>
   2d468:	f8b1 a000 	ldrh.w	sl, [r1]
   2d46c:	f1ba 0f00 	cmp.w	sl, #0
   2d470:	d024      	beq.n	2d4bc <__multiply+0xf0>
   2d472:	f104 0e14 	add.w	lr, r4, #20
   2d476:	46a9      	mov	r9, r5
   2d478:	f04f 0c00 	mov.w	ip, #0
   2d47c:	f85e 7b04 	ldr.w	r7, [lr], #4
   2d480:	f8d9 3000 	ldr.w	r3, [r9]
   2d484:	fa1f fb87 	uxth.w	fp, r7
   2d488:	4572      	cmp	r2, lr
   2d48a:	b29b      	uxth	r3, r3
   2d48c:	ea4f 4717 	mov.w	r7, r7, lsr #16
   2d490:	fb0a 330b 	mla	r3, sl, fp, r3
   2d494:	4463      	add	r3, ip
   2d496:	f8d9 c000 	ldr.w	ip, [r9]
   2d49a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2d49e:	fb0a c707 	mla	r7, sl, r7, ip
   2d4a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   2d4a6:	b29b      	uxth	r3, r3
   2d4a8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   2d4ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d4b0:	f849 3b04 	str.w	r3, [r9], #4
   2d4b4:	d8e2      	bhi.n	2d47c <__multiply+0xb0>
   2d4b6:	9b01      	ldr	r3, [sp, #4]
   2d4b8:	f845 c003 	str.w	ip, [r5, r3]
   2d4bc:	9b03      	ldr	r3, [sp, #12]
   2d4be:	3104      	adds	r1, #4
   2d4c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2d4c4:	f1b9 0f00 	cmp.w	r9, #0
   2d4c8:	d021      	beq.n	2d50e <__multiply+0x142>
   2d4ca:	682b      	ldr	r3, [r5, #0]
   2d4cc:	f104 0c14 	add.w	ip, r4, #20
   2d4d0:	46ae      	mov	lr, r5
   2d4d2:	f04f 0a00 	mov.w	sl, #0
   2d4d6:	f8bc b000 	ldrh.w	fp, [ip]
   2d4da:	b29b      	uxth	r3, r3
   2d4dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
   2d4e0:	fb09 770b 	mla	r7, r9, fp, r7
   2d4e4:	4457      	add	r7, sl
   2d4e6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d4ea:	f84e 3b04 	str.w	r3, [lr], #4
   2d4ee:	f85c 3b04 	ldr.w	r3, [ip], #4
   2d4f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d4f6:	f8be 3000 	ldrh.w	r3, [lr]
   2d4fa:	4562      	cmp	r2, ip
   2d4fc:	fb09 330a 	mla	r3, r9, sl, r3
   2d500:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   2d504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d508:	d8e5      	bhi.n	2d4d6 <__multiply+0x10a>
   2d50a:	9f01      	ldr	r7, [sp, #4]
   2d50c:	51eb      	str	r3, [r5, r7]
   2d50e:	3504      	adds	r5, #4
   2d510:	e799      	b.n	2d446 <__multiply+0x7a>
   2d512:	3e01      	subs	r6, #1
   2d514:	e79b      	b.n	2d44e <__multiply+0x82>
   2d516:	bf00      	nop
   2d518:	0004115d 	.word	0x0004115d
   2d51c:	000411f0 	.word	0x000411f0

0002d520 <__pow5mult>:
   2d520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d524:	4615      	mov	r5, r2
   2d526:	f012 0203 	ands.w	r2, r2, #3
   2d52a:	4607      	mov	r7, r0
   2d52c:	460e      	mov	r6, r1
   2d52e:	d007      	beq.n	2d540 <__pow5mult+0x20>
   2d530:	3a01      	subs	r2, #1
   2d532:	4c25      	ldr	r4, [pc, #148]	; (2d5c8 <__pow5mult+0xa8>)
   2d534:	2300      	movs	r3, #0
   2d536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2d53a:	f7ff fe9f 	bl	2d27c <__multadd>
   2d53e:	4606      	mov	r6, r0
   2d540:	10ad      	asrs	r5, r5, #2
   2d542:	d03d      	beq.n	2d5c0 <__pow5mult+0xa0>
   2d544:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   2d546:	b97c      	cbnz	r4, 2d568 <__pow5mult+0x48>
   2d548:	2010      	movs	r0, #16
   2d54a:	f7fe fb2f 	bl	2bbac <malloc>
   2d54e:	4602      	mov	r2, r0
   2d550:	6278      	str	r0, [r7, #36]	; 0x24
   2d552:	b928      	cbnz	r0, 2d560 <__pow5mult+0x40>
   2d554:	4b1d      	ldr	r3, [pc, #116]	; (2d5cc <__pow5mult+0xac>)
   2d556:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2d55a:	481d      	ldr	r0, [pc, #116]	; (2d5d0 <__pow5mult+0xb0>)
   2d55c:	f000 fde2 	bl	2e124 <__assert_func>
   2d560:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2d564:	6004      	str	r4, [r0, #0]
   2d566:	60c4      	str	r4, [r0, #12]
   2d568:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   2d56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2d570:	b94c      	cbnz	r4, 2d586 <__pow5mult+0x66>
   2d572:	f240 2171 	movw	r1, #625	; 0x271
   2d576:	4638      	mov	r0, r7
   2d578:	f7ff ff12 	bl	2d3a0 <__i2b>
   2d57c:	2300      	movs	r3, #0
   2d57e:	4604      	mov	r4, r0
   2d580:	f8c8 0008 	str.w	r0, [r8, #8]
   2d584:	6003      	str	r3, [r0, #0]
   2d586:	f04f 0900 	mov.w	r9, #0
   2d58a:	07eb      	lsls	r3, r5, #31
   2d58c:	d50a      	bpl.n	2d5a4 <__pow5mult+0x84>
   2d58e:	4631      	mov	r1, r6
   2d590:	4622      	mov	r2, r4
   2d592:	4638      	mov	r0, r7
   2d594:	f7ff ff1a 	bl	2d3cc <__multiply>
   2d598:	4680      	mov	r8, r0
   2d59a:	4631      	mov	r1, r6
   2d59c:	4638      	mov	r0, r7
   2d59e:	4646      	mov	r6, r8
   2d5a0:	f7ff fe4a 	bl	2d238 <_Bfree>
   2d5a4:	106d      	asrs	r5, r5, #1
   2d5a6:	d00b      	beq.n	2d5c0 <__pow5mult+0xa0>
   2d5a8:	6820      	ldr	r0, [r4, #0]
   2d5aa:	b938      	cbnz	r0, 2d5bc <__pow5mult+0x9c>
   2d5ac:	4622      	mov	r2, r4
   2d5ae:	4621      	mov	r1, r4
   2d5b0:	4638      	mov	r0, r7
   2d5b2:	f7ff ff0b 	bl	2d3cc <__multiply>
   2d5b6:	6020      	str	r0, [r4, #0]
   2d5b8:	f8c0 9000 	str.w	r9, [r0]
   2d5bc:	4604      	mov	r4, r0
   2d5be:	e7e4      	b.n	2d58a <__pow5mult+0x6a>
   2d5c0:	4630      	mov	r0, r6
   2d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d5c6:	bf00      	nop
   2d5c8:	00037834 	.word	0x00037834
   2d5cc:	000410d2 	.word	0x000410d2
   2d5d0:	000411f0 	.word	0x000411f0

0002d5d4 <__lshift>:
   2d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d5d8:	460c      	mov	r4, r1
   2d5da:	4607      	mov	r7, r0
   2d5dc:	4691      	mov	r9, r2
   2d5de:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2d5e2:	6923      	ldr	r3, [r4, #16]
   2d5e4:	6849      	ldr	r1, [r1, #4]
   2d5e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2d5ea:	68a3      	ldr	r3, [r4, #8]
   2d5ec:	f108 0601 	add.w	r6, r8, #1
   2d5f0:	42b3      	cmp	r3, r6
   2d5f2:	db0b      	blt.n	2d60c <__lshift+0x38>
   2d5f4:	4638      	mov	r0, r7
   2d5f6:	f7ff fddf 	bl	2d1b8 <_Balloc>
   2d5fa:	4605      	mov	r5, r0
   2d5fc:	b948      	cbnz	r0, 2d612 <__lshift+0x3e>
   2d5fe:	4602      	mov	r2, r0
   2d600:	4b28      	ldr	r3, [pc, #160]	; (2d6a4 <__lshift+0xd0>)
   2d602:	f240 11d9 	movw	r1, #473	; 0x1d9
   2d606:	4828      	ldr	r0, [pc, #160]	; (2d6a8 <__lshift+0xd4>)
   2d608:	f000 fd8c 	bl	2e124 <__assert_func>
   2d60c:	3101      	adds	r1, #1
   2d60e:	005b      	lsls	r3, r3, #1
   2d610:	e7ee      	b.n	2d5f0 <__lshift+0x1c>
   2d612:	2300      	movs	r3, #0
   2d614:	f100 0114 	add.w	r1, r0, #20
   2d618:	f100 0210 	add.w	r2, r0, #16
   2d61c:	4618      	mov	r0, r3
   2d61e:	4553      	cmp	r3, sl
   2d620:	db33      	blt.n	2d68a <__lshift+0xb6>
   2d622:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2d626:	f104 0314 	add.w	r3, r4, #20
   2d62a:	6920      	ldr	r0, [r4, #16]
   2d62c:	f019 091f 	ands.w	r9, r9, #31
   2d630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2d634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2d638:	d02b      	beq.n	2d692 <__lshift+0xbe>
   2d63a:	f1c9 0e20 	rsb	lr, r9, #32
   2d63e:	468a      	mov	sl, r1
   2d640:	2200      	movs	r2, #0
   2d642:	6818      	ldr	r0, [r3, #0]
   2d644:	fa00 f009 	lsl.w	r0, r0, r9
   2d648:	4310      	orrs	r0, r2
   2d64a:	f84a 0b04 	str.w	r0, [sl], #4
   2d64e:	f853 2b04 	ldr.w	r2, [r3], #4
   2d652:	459c      	cmp	ip, r3
   2d654:	fa22 f20e 	lsr.w	r2, r2, lr
   2d658:	d8f3      	bhi.n	2d642 <__lshift+0x6e>
   2d65a:	ebac 0304 	sub.w	r3, ip, r4
   2d65e:	f104 0015 	add.w	r0, r4, #21
   2d662:	3b15      	subs	r3, #21
   2d664:	f023 0303 	bic.w	r3, r3, #3
   2d668:	3304      	adds	r3, #4
   2d66a:	4584      	cmp	ip, r0
   2d66c:	bf38      	it	cc
   2d66e:	2304      	movcc	r3, #4
   2d670:	50ca      	str	r2, [r1, r3]
   2d672:	b10a      	cbz	r2, 2d678 <__lshift+0xa4>
   2d674:	f108 0602 	add.w	r6, r8, #2
   2d678:	3e01      	subs	r6, #1
   2d67a:	4638      	mov	r0, r7
   2d67c:	4621      	mov	r1, r4
   2d67e:	612e      	str	r6, [r5, #16]
   2d680:	f7ff fdda 	bl	2d238 <_Bfree>
   2d684:	4628      	mov	r0, r5
   2d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d68a:	3301      	adds	r3, #1
   2d68c:	f842 0f04 	str.w	r0, [r2, #4]!
   2d690:	e7c5      	b.n	2d61e <__lshift+0x4a>
   2d692:	3904      	subs	r1, #4
   2d694:	f853 2b04 	ldr.w	r2, [r3], #4
   2d698:	459c      	cmp	ip, r3
   2d69a:	f841 2f04 	str.w	r2, [r1, #4]!
   2d69e:	d8f9      	bhi.n	2d694 <__lshift+0xc0>
   2d6a0:	e7ea      	b.n	2d678 <__lshift+0xa4>
   2d6a2:	bf00      	nop
   2d6a4:	0004115d 	.word	0x0004115d
   2d6a8:	000411f0 	.word	0x000411f0

0002d6ac <__mdiff>:
   2d6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6b0:	4689      	mov	r9, r1
   2d6b2:	4606      	mov	r6, r0
   2d6b4:	4611      	mov	r1, r2
   2d6b6:	4614      	mov	r4, r2
   2d6b8:	4648      	mov	r0, r9
   2d6ba:	f008 f9f6 	bl	35aaa <__mcmp>
   2d6be:	1e05      	subs	r5, r0, #0
   2d6c0:	d112      	bne.n	2d6e8 <__mdiff+0x3c>
   2d6c2:	4629      	mov	r1, r5
   2d6c4:	4630      	mov	r0, r6
   2d6c6:	f7ff fd77 	bl	2d1b8 <_Balloc>
   2d6ca:	4602      	mov	r2, r0
   2d6cc:	b928      	cbnz	r0, 2d6da <__mdiff+0x2e>
   2d6ce:	4b40      	ldr	r3, [pc, #256]	; (2d7d0 <__mdiff+0x124>)
   2d6d0:	f240 2132 	movw	r1, #562	; 0x232
   2d6d4:	483f      	ldr	r0, [pc, #252]	; (2d7d4 <__mdiff+0x128>)
   2d6d6:	f000 fd25 	bl	2e124 <__assert_func>
   2d6da:	2301      	movs	r3, #1
   2d6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2d6e0:	4610      	mov	r0, r2
   2d6e2:	b003      	add	sp, #12
   2d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6e8:	bfbc      	itt	lt
   2d6ea:	464b      	movlt	r3, r9
   2d6ec:	46a1      	movlt	r9, r4
   2d6ee:	4630      	mov	r0, r6
   2d6f0:	bfb8      	it	lt
   2d6f2:	2501      	movlt	r5, #1
   2d6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2d6f8:	bfb4      	ite	lt
   2d6fa:	461c      	movlt	r4, r3
   2d6fc:	2500      	movge	r5, #0
   2d6fe:	f7ff fd5b 	bl	2d1b8 <_Balloc>
   2d702:	4602      	mov	r2, r0
   2d704:	b918      	cbnz	r0, 2d70e <__mdiff+0x62>
   2d706:	4b32      	ldr	r3, [pc, #200]	; (2d7d0 <__mdiff+0x124>)
   2d708:	f44f 7110 	mov.w	r1, #576	; 0x240
   2d70c:	e7e2      	b.n	2d6d4 <__mdiff+0x28>
   2d70e:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2d712:	f104 0e14 	add.w	lr, r4, #20
   2d716:	6926      	ldr	r6, [r4, #16]
   2d718:	f100 0b14 	add.w	fp, r0, #20
   2d71c:	60c5      	str	r5, [r0, #12]
   2d71e:	f109 0514 	add.w	r5, r9, #20
   2d722:	f109 0310 	add.w	r3, r9, #16
   2d726:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   2d72a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2d72e:	46d9      	mov	r9, fp
   2d730:	f04f 0c00 	mov.w	ip, #0
   2d734:	9301      	str	r3, [sp, #4]
   2d736:	9b01      	ldr	r3, [sp, #4]
   2d738:	f85e 0b04 	ldr.w	r0, [lr], #4
   2d73c:	f853 af04 	ldr.w	sl, [r3, #4]!
   2d740:	b281      	uxth	r1, r0
   2d742:	4576      	cmp	r6, lr
   2d744:	9301      	str	r3, [sp, #4]
   2d746:	fa1f f38a 	uxth.w	r3, sl
   2d74a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2d74e:	eba3 0301 	sub.w	r3, r3, r1
   2d752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2d756:	4463      	add	r3, ip
   2d758:	eb00 4023 	add.w	r0, r0, r3, asr #16
   2d75c:	b29b      	uxth	r3, r3
   2d75e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2d762:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2d766:	f849 3b04 	str.w	r3, [r9], #4
   2d76a:	d8e4      	bhi.n	2d736 <__mdiff+0x8a>
   2d76c:	1b33      	subs	r3, r6, r4
   2d76e:	3415      	adds	r4, #21
   2d770:	3b15      	subs	r3, #21
   2d772:	f023 0303 	bic.w	r3, r3, #3
   2d776:	3304      	adds	r3, #4
   2d778:	42a6      	cmp	r6, r4
   2d77a:	bf38      	it	cc
   2d77c:	2304      	movcc	r3, #4
   2d77e:	441d      	add	r5, r3
   2d780:	445b      	add	r3, fp
   2d782:	462c      	mov	r4, r5
   2d784:	461e      	mov	r6, r3
   2d786:	4544      	cmp	r4, r8
   2d788:	d30e      	bcc.n	2d7a8 <__mdiff+0xfc>
   2d78a:	f108 0103 	add.w	r1, r8, #3
   2d78e:	1b49      	subs	r1, r1, r5
   2d790:	3d03      	subs	r5, #3
   2d792:	f021 0103 	bic.w	r1, r1, #3
   2d796:	45a8      	cmp	r8, r5
   2d798:	bf38      	it	cc
   2d79a:	2100      	movcc	r1, #0
   2d79c:	440b      	add	r3, r1
   2d79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2d7a2:	b199      	cbz	r1, 2d7cc <__mdiff+0x120>
   2d7a4:	6117      	str	r7, [r2, #16]
   2d7a6:	e79b      	b.n	2d6e0 <__mdiff+0x34>
   2d7a8:	f854 1b04 	ldr.w	r1, [r4], #4
   2d7ac:	46e6      	mov	lr, ip
   2d7ae:	fa1f fc81 	uxth.w	ip, r1
   2d7b2:	0c08      	lsrs	r0, r1, #16
   2d7b4:	4471      	add	r1, lr
   2d7b6:	44f4      	add	ip, lr
   2d7b8:	b289      	uxth	r1, r1
   2d7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2d7be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2d7c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2d7c6:	f846 1b04 	str.w	r1, [r6], #4
   2d7ca:	e7dc      	b.n	2d786 <__mdiff+0xda>
   2d7cc:	3f01      	subs	r7, #1
   2d7ce:	e7e6      	b.n	2d79e <__mdiff+0xf2>
   2d7d0:	0004115d 	.word	0x0004115d
   2d7d4:	000411f0 	.word	0x000411f0

0002d7d8 <__ulp>:
   2d7d8:	4b0e      	ldr	r3, [pc, #56]	; (2d814 <__ulp+0x3c>)
   2d7da:	400b      	ands	r3, r1
   2d7dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2d7e0:	2b00      	cmp	r3, #0
   2d7e2:	dc08      	bgt.n	2d7f6 <__ulp+0x1e>
   2d7e4:	425b      	negs	r3, r3
   2d7e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2d7ea:	ea4f 5223 	mov.w	r2, r3, asr #20
   2d7ee:	da04      	bge.n	2d7fa <__ulp+0x22>
   2d7f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2d7f4:	4113      	asrs	r3, r2
   2d7f6:	2200      	movs	r2, #0
   2d7f8:	e008      	b.n	2d80c <__ulp+0x34>
   2d7fa:	f1a2 0314 	sub.w	r3, r2, #20
   2d7fe:	2b1e      	cmp	r3, #30
   2d800:	bfd6      	itet	le
   2d802:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   2d806:	2201      	movgt	r2, #1
   2d808:	40da      	lsrle	r2, r3
   2d80a:	2300      	movs	r3, #0
   2d80c:	4619      	mov	r1, r3
   2d80e:	4610      	mov	r0, r2
   2d810:	4770      	bx	lr
   2d812:	bf00      	nop
   2d814:	7ff00000 	.word	0x7ff00000

0002d818 <__b2d>:
   2d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d81a:	6902      	ldr	r2, [r0, #16]
   2d81c:	f100 0614 	add.w	r6, r0, #20
   2d820:	4f21      	ldr	r7, [pc, #132]	; (2d8a8 <__b2d+0x90>)
   2d822:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2d826:	f852 4c04 	ldr.w	r4, [r2, #-4]
   2d82a:	1f15      	subs	r5, r2, #4
   2d82c:	4620      	mov	r0, r4
   2d82e:	f008 f8ed 	bl	35a0c <__hi0bits>
   2d832:	4603      	mov	r3, r0
   2d834:	f1c0 0020 	rsb	r0, r0, #32
   2d838:	2b0a      	cmp	r3, #10
   2d83a:	6008      	str	r0, [r1, #0]
   2d83c:	dc13      	bgt.n	2d866 <__b2d+0x4e>
   2d83e:	42ae      	cmp	r6, r5
   2d840:	f1c3 0c0b 	rsb	ip, r3, #11
   2d844:	f103 0315 	add.w	r3, r3, #21
   2d848:	bf34      	ite	cc
   2d84a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2d84e:	2200      	movcs	r2, #0
   2d850:	fa24 fe0c 	lsr.w	lr, r4, ip
   2d854:	fa04 f303 	lsl.w	r3, r4, r3
   2d858:	fa22 f20c 	lsr.w	r2, r2, ip
   2d85c:	ea4e 0107 	orr.w	r1, lr, r7
   2d860:	431a      	orrs	r2, r3
   2d862:	4610      	mov	r0, r2
   2d864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d866:	42ae      	cmp	r6, r5
   2d868:	bf36      	itet	cc
   2d86a:	f1a2 0508 	subcc.w	r5, r2, #8
   2d86e:	2200      	movcs	r2, #0
   2d870:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2d874:	3b0b      	subs	r3, #11
   2d876:	d014      	beq.n	2d8a2 <__b2d+0x8a>
   2d878:	f1c3 0720 	rsb	r7, r3, #32
   2d87c:	409c      	lsls	r4, r3
   2d87e:	42b5      	cmp	r5, r6
   2d880:	fa22 f107 	lsr.w	r1, r2, r7
   2d884:	fa02 f203 	lsl.w	r2, r2, r3
   2d888:	ea44 0401 	orr.w	r4, r4, r1
   2d88c:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   2d890:	bf8c      	ite	hi
   2d892:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   2d896:	2400      	movls	r4, #0
   2d898:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2d89c:	40fc      	lsrs	r4, r7
   2d89e:	4322      	orrs	r2, r4
   2d8a0:	e7df      	b.n	2d862 <__b2d+0x4a>
   2d8a2:	ea44 0107 	orr.w	r1, r4, r7
   2d8a6:	e7dc      	b.n	2d862 <__b2d+0x4a>
   2d8a8:	3ff00000 	.word	0x3ff00000

0002d8ac <__d2b>:
   2d8ac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2d8b0:	2101      	movs	r1, #1
   2d8b2:	4690      	mov	r8, r2
   2d8b4:	4699      	mov	r9, r3
   2d8b6:	9e08      	ldr	r6, [sp, #32]
   2d8b8:	f7ff fc7e 	bl	2d1b8 <_Balloc>
   2d8bc:	4604      	mov	r4, r0
   2d8be:	b930      	cbnz	r0, 2d8ce <__d2b+0x22>
   2d8c0:	4602      	mov	r2, r0
   2d8c2:	4b24      	ldr	r3, [pc, #144]	; (2d954 <__d2b+0xa8>)
   2d8c4:	f240 310a 	movw	r1, #778	; 0x30a
   2d8c8:	4823      	ldr	r0, [pc, #140]	; (2d958 <__d2b+0xac>)
   2d8ca:	f000 fc2b 	bl	2e124 <__assert_func>
   2d8ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
   2d8d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2d8d6:	b10d      	cbz	r5, 2d8dc <__d2b+0x30>
   2d8d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2d8dc:	9301      	str	r3, [sp, #4]
   2d8de:	f1b8 0300 	subs.w	r3, r8, #0
   2d8e2:	d024      	beq.n	2d92e <__d2b+0x82>
   2d8e4:	4668      	mov	r0, sp
   2d8e6:	9300      	str	r3, [sp, #0]
   2d8e8:	f008 f8b2 	bl	35a50 <__lo0bits>
   2d8ec:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d8f0:	b1d8      	cbz	r0, 2d92a <__d2b+0x7e>
   2d8f2:	f1c0 0320 	rsb	r3, r0, #32
   2d8f6:	fa02 f303 	lsl.w	r3, r2, r3
   2d8fa:	40c2      	lsrs	r2, r0
   2d8fc:	430b      	orrs	r3, r1
   2d8fe:	9201      	str	r2, [sp, #4]
   2d900:	6163      	str	r3, [r4, #20]
   2d902:	9b01      	ldr	r3, [sp, #4]
   2d904:	2b00      	cmp	r3, #0
   2d906:	61a3      	str	r3, [r4, #24]
   2d908:	bf0c      	ite	eq
   2d90a:	2201      	moveq	r2, #1
   2d90c:	2202      	movne	r2, #2
   2d90e:	6122      	str	r2, [r4, #16]
   2d910:	b1ad      	cbz	r5, 2d93e <__d2b+0x92>
   2d912:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2d916:	4405      	add	r5, r0
   2d918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2d91c:	6035      	str	r5, [r6, #0]
   2d91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d920:	6018      	str	r0, [r3, #0]
   2d922:	4620      	mov	r0, r4
   2d924:	b002      	add	sp, #8
   2d926:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2d92a:	6161      	str	r1, [r4, #20]
   2d92c:	e7e9      	b.n	2d902 <__d2b+0x56>
   2d92e:	a801      	add	r0, sp, #4
   2d930:	f008 f88e 	bl	35a50 <__lo0bits>
   2d934:	9b01      	ldr	r3, [sp, #4]
   2d936:	3020      	adds	r0, #32
   2d938:	2201      	movs	r2, #1
   2d93a:	6163      	str	r3, [r4, #20]
   2d93c:	e7e7      	b.n	2d90e <__d2b+0x62>
   2d93e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2d942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2d946:	6030      	str	r0, [r6, #0]
   2d948:	6918      	ldr	r0, [r3, #16]
   2d94a:	f008 f85f 	bl	35a0c <__hi0bits>
   2d94e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2d952:	e7e4      	b.n	2d91e <__d2b+0x72>
   2d954:	0004115d 	.word	0x0004115d
   2d958:	000411f0 	.word	0x000411f0

0002d95c <_svfiprintf_r>:
   2d95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d960:	4698      	mov	r8, r3
   2d962:	898b      	ldrh	r3, [r1, #12]
   2d964:	b09d      	sub	sp, #116	; 0x74
   2d966:	4607      	mov	r7, r0
   2d968:	061b      	lsls	r3, r3, #24
   2d96a:	460d      	mov	r5, r1
   2d96c:	4614      	mov	r4, r2
   2d96e:	d510      	bpl.n	2d992 <_svfiprintf_r+0x36>
   2d970:	690b      	ldr	r3, [r1, #16]
   2d972:	b973      	cbnz	r3, 2d992 <_svfiprintf_r+0x36>
   2d974:	2140      	movs	r1, #64	; 0x40
   2d976:	f7fe f973 	bl	2bc60 <_malloc_r>
   2d97a:	6028      	str	r0, [r5, #0]
   2d97c:	6128      	str	r0, [r5, #16]
   2d97e:	b930      	cbnz	r0, 2d98e <_svfiprintf_r+0x32>
   2d980:	230c      	movs	r3, #12
   2d982:	603b      	str	r3, [r7, #0]
   2d984:	f04f 30ff 	mov.w	r0, #4294967295
   2d988:	b01d      	add	sp, #116	; 0x74
   2d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d98e:	2340      	movs	r3, #64	; 0x40
   2d990:	616b      	str	r3, [r5, #20]
   2d992:	2300      	movs	r3, #0
   2d994:	f8cd 800c 	str.w	r8, [sp, #12]
   2d998:	f04f 0901 	mov.w	r9, #1
   2d99c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2db40 <_svfiprintf_r+0x1e4>
   2d9a0:	9309      	str	r3, [sp, #36]	; 0x24
   2d9a2:	2320      	movs	r3, #32
   2d9a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2d9a8:	2330      	movs	r3, #48	; 0x30
   2d9aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2d9ae:	4623      	mov	r3, r4
   2d9b0:	469a      	mov	sl, r3
   2d9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d9b6:	b10a      	cbz	r2, 2d9bc <_svfiprintf_r+0x60>
   2d9b8:	2a25      	cmp	r2, #37	; 0x25
   2d9ba:	d1f9      	bne.n	2d9b0 <_svfiprintf_r+0x54>
   2d9bc:	ebba 0b04 	subs.w	fp, sl, r4
   2d9c0:	d00b      	beq.n	2d9da <_svfiprintf_r+0x7e>
   2d9c2:	465b      	mov	r3, fp
   2d9c4:	4622      	mov	r2, r4
   2d9c6:	4629      	mov	r1, r5
   2d9c8:	4638      	mov	r0, r7
   2d9ca:	f008 f930 	bl	35c2e <__ssputs_r>
   2d9ce:	3001      	adds	r0, #1
   2d9d0:	f000 80a7 	beq.w	2db22 <_svfiprintf_r+0x1c6>
   2d9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2d9d6:	445a      	add	r2, fp
   2d9d8:	9209      	str	r2, [sp, #36]	; 0x24
   2d9da:	f89a 3000 	ldrb.w	r3, [sl]
   2d9de:	2b00      	cmp	r3, #0
   2d9e0:	f000 809f 	beq.w	2db22 <_svfiprintf_r+0x1c6>
   2d9e4:	2300      	movs	r3, #0
   2d9e6:	f04f 32ff 	mov.w	r2, #4294967295
   2d9ea:	f10a 0a01 	add.w	sl, sl, #1
   2d9ee:	9304      	str	r3, [sp, #16]
   2d9f0:	9307      	str	r3, [sp, #28]
   2d9f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2d9f6:	931a      	str	r3, [sp, #104]	; 0x68
   2d9f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d9fc:	4654      	mov	r4, sl
   2d9fe:	2205      	movs	r2, #5
   2da00:	484f      	ldr	r0, [pc, #316]	; (2db40 <_svfiprintf_r+0x1e4>)
   2da02:	f814 1b01 	ldrb.w	r1, [r4], #1
   2da06:	f007 fad3 	bl	34fb0 <memchr>
   2da0a:	9a04      	ldr	r2, [sp, #16]
   2da0c:	b9d8      	cbnz	r0, 2da46 <_svfiprintf_r+0xea>
   2da0e:	06d0      	lsls	r0, r2, #27
   2da10:	bf44      	itt	mi
   2da12:	2320      	movmi	r3, #32
   2da14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2da18:	0711      	lsls	r1, r2, #28
   2da1a:	bf44      	itt	mi
   2da1c:	232b      	movmi	r3, #43	; 0x2b
   2da1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2da22:	f89a 3000 	ldrb.w	r3, [sl]
   2da26:	2b2a      	cmp	r3, #42	; 0x2a
   2da28:	d015      	beq.n	2da56 <_svfiprintf_r+0xfa>
   2da2a:	9a07      	ldr	r2, [sp, #28]
   2da2c:	4654      	mov	r4, sl
   2da2e:	2000      	movs	r0, #0
   2da30:	f04f 0c0a 	mov.w	ip, #10
   2da34:	4621      	mov	r1, r4
   2da36:	f811 3b01 	ldrb.w	r3, [r1], #1
   2da3a:	3b30      	subs	r3, #48	; 0x30
   2da3c:	2b09      	cmp	r3, #9
   2da3e:	d94b      	bls.n	2dad8 <_svfiprintf_r+0x17c>
   2da40:	b1b0      	cbz	r0, 2da70 <_svfiprintf_r+0x114>
   2da42:	9207      	str	r2, [sp, #28]
   2da44:	e014      	b.n	2da70 <_svfiprintf_r+0x114>
   2da46:	eba0 0308 	sub.w	r3, r0, r8
   2da4a:	46a2      	mov	sl, r4
   2da4c:	fa09 f303 	lsl.w	r3, r9, r3
   2da50:	4313      	orrs	r3, r2
   2da52:	9304      	str	r3, [sp, #16]
   2da54:	e7d2      	b.n	2d9fc <_svfiprintf_r+0xa0>
   2da56:	9b03      	ldr	r3, [sp, #12]
   2da58:	1d19      	adds	r1, r3, #4
   2da5a:	681b      	ldr	r3, [r3, #0]
   2da5c:	2b00      	cmp	r3, #0
   2da5e:	9103      	str	r1, [sp, #12]
   2da60:	bfbb      	ittet	lt
   2da62:	425b      	neglt	r3, r3
   2da64:	f042 0202 	orrlt.w	r2, r2, #2
   2da68:	9307      	strge	r3, [sp, #28]
   2da6a:	9307      	strlt	r3, [sp, #28]
   2da6c:	bfb8      	it	lt
   2da6e:	9204      	strlt	r2, [sp, #16]
   2da70:	7823      	ldrb	r3, [r4, #0]
   2da72:	2b2e      	cmp	r3, #46	; 0x2e
   2da74:	d10a      	bne.n	2da8c <_svfiprintf_r+0x130>
   2da76:	7863      	ldrb	r3, [r4, #1]
   2da78:	2b2a      	cmp	r3, #42	; 0x2a
   2da7a:	d132      	bne.n	2dae2 <_svfiprintf_r+0x186>
   2da7c:	9b03      	ldr	r3, [sp, #12]
   2da7e:	3402      	adds	r4, #2
   2da80:	1d1a      	adds	r2, r3, #4
   2da82:	681b      	ldr	r3, [r3, #0]
   2da84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2da88:	9203      	str	r2, [sp, #12]
   2da8a:	9305      	str	r3, [sp, #20]
   2da8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2db44 <_svfiprintf_r+0x1e8>
   2da90:	2203      	movs	r2, #3
   2da92:	7821      	ldrb	r1, [r4, #0]
   2da94:	4650      	mov	r0, sl
   2da96:	f007 fa8b 	bl	34fb0 <memchr>
   2da9a:	b138      	cbz	r0, 2daac <_svfiprintf_r+0x150>
   2da9c:	eba0 000a 	sub.w	r0, r0, sl
   2daa0:	2240      	movs	r2, #64	; 0x40
   2daa2:	9b04      	ldr	r3, [sp, #16]
   2daa4:	3401      	adds	r4, #1
   2daa6:	4082      	lsls	r2, r0
   2daa8:	4313      	orrs	r3, r2
   2daaa:	9304      	str	r3, [sp, #16]
   2daac:	f814 1b01 	ldrb.w	r1, [r4], #1
   2dab0:	2206      	movs	r2, #6
   2dab2:	4825      	ldr	r0, [pc, #148]	; (2db48 <_svfiprintf_r+0x1ec>)
   2dab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2dab8:	f007 fa7a 	bl	34fb0 <memchr>
   2dabc:	2800      	cmp	r0, #0
   2dabe:	d036      	beq.n	2db2e <_svfiprintf_r+0x1d2>
   2dac0:	4b22      	ldr	r3, [pc, #136]	; (2db4c <_svfiprintf_r+0x1f0>)
   2dac2:	bb1b      	cbnz	r3, 2db0c <_svfiprintf_r+0x1b0>
   2dac4:	9b03      	ldr	r3, [sp, #12]
   2dac6:	3307      	adds	r3, #7
   2dac8:	f023 0307 	bic.w	r3, r3, #7
   2dacc:	3308      	adds	r3, #8
   2dace:	9303      	str	r3, [sp, #12]
   2dad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dad2:	4433      	add	r3, r6
   2dad4:	9309      	str	r3, [sp, #36]	; 0x24
   2dad6:	e76a      	b.n	2d9ae <_svfiprintf_r+0x52>
   2dad8:	fb0c 3202 	mla	r2, ip, r2, r3
   2dadc:	460c      	mov	r4, r1
   2dade:	2001      	movs	r0, #1
   2dae0:	e7a8      	b.n	2da34 <_svfiprintf_r+0xd8>
   2dae2:	2300      	movs	r3, #0
   2dae4:	3401      	adds	r4, #1
   2dae6:	f04f 0c0a 	mov.w	ip, #10
   2daea:	4619      	mov	r1, r3
   2daec:	9305      	str	r3, [sp, #20]
   2daee:	4620      	mov	r0, r4
   2daf0:	f810 2b01 	ldrb.w	r2, [r0], #1
   2daf4:	3a30      	subs	r2, #48	; 0x30
   2daf6:	2a09      	cmp	r2, #9
   2daf8:	d903      	bls.n	2db02 <_svfiprintf_r+0x1a6>
   2dafa:	2b00      	cmp	r3, #0
   2dafc:	d0c6      	beq.n	2da8c <_svfiprintf_r+0x130>
   2dafe:	9105      	str	r1, [sp, #20]
   2db00:	e7c4      	b.n	2da8c <_svfiprintf_r+0x130>
   2db02:	fb0c 2101 	mla	r1, ip, r1, r2
   2db06:	4604      	mov	r4, r0
   2db08:	2301      	movs	r3, #1
   2db0a:	e7f0      	b.n	2daee <_svfiprintf_r+0x192>
   2db0c:	ab03      	add	r3, sp, #12
   2db0e:	462a      	mov	r2, r5
   2db10:	a904      	add	r1, sp, #16
   2db12:	4638      	mov	r0, r7
   2db14:	9300      	str	r3, [sp, #0]
   2db16:	4b0e      	ldr	r3, [pc, #56]	; (2db50 <_svfiprintf_r+0x1f4>)
   2db18:	f7fe f8fc 	bl	2bd14 <_printf_float>
   2db1c:	1c42      	adds	r2, r0, #1
   2db1e:	4606      	mov	r6, r0
   2db20:	d1d6      	bne.n	2dad0 <_svfiprintf_r+0x174>
   2db22:	89ab      	ldrh	r3, [r5, #12]
   2db24:	065b      	lsls	r3, r3, #25
   2db26:	f53f af2d 	bmi.w	2d984 <_svfiprintf_r+0x28>
   2db2a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2db2c:	e72c      	b.n	2d988 <_svfiprintf_r+0x2c>
   2db2e:	ab03      	add	r3, sp, #12
   2db30:	462a      	mov	r2, r5
   2db32:	a904      	add	r1, sp, #16
   2db34:	4638      	mov	r0, r7
   2db36:	9300      	str	r3, [sp, #0]
   2db38:	4b05      	ldr	r3, [pc, #20]	; (2db50 <_svfiprintf_r+0x1f4>)
   2db3a:	f7fe fb21 	bl	2c180 <_printf_i>
   2db3e:	e7ed      	b.n	2db1c <_svfiprintf_r+0x1c0>
   2db40:	00041265 	.word	0x00041265
   2db44:	0004126b 	.word	0x0004126b
   2db48:	0004126f 	.word	0x0004126f
   2db4c:	0002bd15 	.word	0x0002bd15
   2db50:	00035c2f 	.word	0x00035c2f

0002db54 <__ssvfiscanf_r>:
   2db54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2db58:	460c      	mov	r4, r1
   2db5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2db5e:	2100      	movs	r1, #0
   2db60:	4606      	mov	r6, r0
   2db62:	f10d 0804 	add.w	r8, sp, #4
   2db66:	4fa7      	ldr	r7, [pc, #668]	; (2de04 <__ssvfiscanf_r+0x2b0>)
   2db68:	9300      	str	r3, [sp, #0]
   2db6a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2db6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2db72:	49a5      	ldr	r1, [pc, #660]	; (2de08 <__ssvfiscanf_r+0x2b4>)
   2db74:	91a0      	str	r1, [sp, #640]	; 0x280
   2db76:	49a5      	ldr	r1, [pc, #660]	; (2de0c <__ssvfiscanf_r+0x2b8>)
   2db78:	91a1      	str	r1, [sp, #644]	; 0x284
   2db7a:	7813      	ldrb	r3, [r2, #0]
   2db7c:	2b00      	cmp	r3, #0
   2db7e:	f000 815c 	beq.w	2de3a <__ssvfiscanf_r+0x2e6>
   2db82:	5cf9      	ldrb	r1, [r7, r3]
   2db84:	1c55      	adds	r5, r2, #1
   2db86:	f011 0108 	ands.w	r1, r1, #8
   2db8a:	d019      	beq.n	2dbc0 <__ssvfiscanf_r+0x6c>
   2db8c:	6863      	ldr	r3, [r4, #4]
   2db8e:	2b00      	cmp	r3, #0
   2db90:	dd0f      	ble.n	2dbb2 <__ssvfiscanf_r+0x5e>
   2db92:	6823      	ldr	r3, [r4, #0]
   2db94:	781a      	ldrb	r2, [r3, #0]
   2db96:	5cba      	ldrb	r2, [r7, r2]
   2db98:	0712      	lsls	r2, r2, #28
   2db9a:	d401      	bmi.n	2dba0 <__ssvfiscanf_r+0x4c>
   2db9c:	462a      	mov	r2, r5
   2db9e:	e7ec      	b.n	2db7a <__ssvfiscanf_r+0x26>
   2dba0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2dba2:	3301      	adds	r3, #1
   2dba4:	3201      	adds	r2, #1
   2dba6:	6023      	str	r3, [r4, #0]
   2dba8:	9245      	str	r2, [sp, #276]	; 0x114
   2dbaa:	6862      	ldr	r2, [r4, #4]
   2dbac:	3a01      	subs	r2, #1
   2dbae:	6062      	str	r2, [r4, #4]
   2dbb0:	e7ec      	b.n	2db8c <__ssvfiscanf_r+0x38>
   2dbb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2dbb4:	4621      	mov	r1, r4
   2dbb6:	4630      	mov	r0, r6
   2dbb8:	4798      	blx	r3
   2dbba:	2800      	cmp	r0, #0
   2dbbc:	d0e9      	beq.n	2db92 <__ssvfiscanf_r+0x3e>
   2dbbe:	e7ed      	b.n	2db9c <__ssvfiscanf_r+0x48>
   2dbc0:	2b25      	cmp	r3, #37	; 0x25
   2dbc2:	d012      	beq.n	2dbea <__ssvfiscanf_r+0x96>
   2dbc4:	4699      	mov	r9, r3
   2dbc6:	6863      	ldr	r3, [r4, #4]
   2dbc8:	2b00      	cmp	r3, #0
   2dbca:	f340 8094 	ble.w	2dcf6 <__ssvfiscanf_r+0x1a2>
   2dbce:	6822      	ldr	r2, [r4, #0]
   2dbd0:	7813      	ldrb	r3, [r2, #0]
   2dbd2:	454b      	cmp	r3, r9
   2dbd4:	f040 8131 	bne.w	2de3a <__ssvfiscanf_r+0x2e6>
   2dbd8:	6863      	ldr	r3, [r4, #4]
   2dbda:	3201      	adds	r2, #1
   2dbdc:	3b01      	subs	r3, #1
   2dbde:	6022      	str	r2, [r4, #0]
   2dbe0:	6063      	str	r3, [r4, #4]
   2dbe2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2dbe4:	3301      	adds	r3, #1
   2dbe6:	9345      	str	r3, [sp, #276]	; 0x114
   2dbe8:	e7d8      	b.n	2db9c <__ssvfiscanf_r+0x48>
   2dbea:	9141      	str	r1, [sp, #260]	; 0x104
   2dbec:	9143      	str	r1, [sp, #268]	; 0x10c
   2dbee:	7853      	ldrb	r3, [r2, #1]
   2dbf0:	2b2a      	cmp	r3, #42	; 0x2a
   2dbf2:	bf04      	itt	eq
   2dbf4:	2310      	moveq	r3, #16
   2dbf6:	1c95      	addeq	r5, r2, #2
   2dbf8:	f04f 020a 	mov.w	r2, #10
   2dbfc:	bf08      	it	eq
   2dbfe:	9341      	streq	r3, [sp, #260]	; 0x104
   2dc00:	46a9      	mov	r9, r5
   2dc02:	f819 1b01 	ldrb.w	r1, [r9], #1
   2dc06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2dc0a:	2b09      	cmp	r3, #9
   2dc0c:	d91e      	bls.n	2dc4c <__ssvfiscanf_r+0xf8>
   2dc0e:	f8df a200 	ldr.w	sl, [pc, #512]	; 2de10 <__ssvfiscanf_r+0x2bc>
   2dc12:	2203      	movs	r2, #3
   2dc14:	4650      	mov	r0, sl
   2dc16:	f007 f9cb 	bl	34fb0 <memchr>
   2dc1a:	b138      	cbz	r0, 2dc2c <__ssvfiscanf_r+0xd8>
   2dc1c:	eba0 000a 	sub.w	r0, r0, sl
   2dc20:	2301      	movs	r3, #1
   2dc22:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2dc24:	464d      	mov	r5, r9
   2dc26:	4083      	lsls	r3, r0
   2dc28:	4313      	orrs	r3, r2
   2dc2a:	9341      	str	r3, [sp, #260]	; 0x104
   2dc2c:	f815 3b01 	ldrb.w	r3, [r5], #1
   2dc30:	2b78      	cmp	r3, #120	; 0x78
   2dc32:	d806      	bhi.n	2dc42 <__ssvfiscanf_r+0xee>
   2dc34:	2b57      	cmp	r3, #87	; 0x57
   2dc36:	d810      	bhi.n	2dc5a <__ssvfiscanf_r+0x106>
   2dc38:	2b25      	cmp	r3, #37	; 0x25
   2dc3a:	d0c3      	beq.n	2dbc4 <__ssvfiscanf_r+0x70>
   2dc3c:	d856      	bhi.n	2dcec <__ssvfiscanf_r+0x198>
   2dc3e:	2b00      	cmp	r3, #0
   2dc40:	d064      	beq.n	2dd0c <__ssvfiscanf_r+0x1b8>
   2dc42:	2303      	movs	r3, #3
   2dc44:	9347      	str	r3, [sp, #284]	; 0x11c
   2dc46:	230a      	movs	r3, #10
   2dc48:	9342      	str	r3, [sp, #264]	; 0x108
   2dc4a:	e06a      	b.n	2dd22 <__ssvfiscanf_r+0x1ce>
   2dc4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2dc4e:	464d      	mov	r5, r9
   2dc50:	fb02 1103 	mla	r1, r2, r3, r1
   2dc54:	3930      	subs	r1, #48	; 0x30
   2dc56:	9143      	str	r1, [sp, #268]	; 0x10c
   2dc58:	e7d2      	b.n	2dc00 <__ssvfiscanf_r+0xac>
   2dc5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2dc5e:	2a20      	cmp	r2, #32
   2dc60:	d8ef      	bhi.n	2dc42 <__ssvfiscanf_r+0xee>
   2dc62:	a101      	add	r1, pc, #4	; (adr r1, 2dc68 <__ssvfiscanf_r+0x114>)
   2dc64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2dc68:	0002dd57 	.word	0x0002dd57
   2dc6c:	0002dc43 	.word	0x0002dc43
   2dc70:	0002dc43 	.word	0x0002dc43
   2dc74:	0002dd79 	.word	0x0002dd79
   2dc78:	0002dc43 	.word	0x0002dc43
   2dc7c:	0002dc43 	.word	0x0002dc43
   2dc80:	0002dc43 	.word	0x0002dc43
   2dc84:	0002dc43 	.word	0x0002dc43
   2dc88:	0002dc43 	.word	0x0002dc43
   2dc8c:	0002dc43 	.word	0x0002dc43
   2dc90:	0002dc43 	.word	0x0002dc43
   2dc94:	0002dd8f 	.word	0x0002dd8f
   2dc98:	0002dd75 	.word	0x0002dd75
   2dc9c:	0002dcf3 	.word	0x0002dcf3
   2dca0:	0002dcf3 	.word	0x0002dcf3
   2dca4:	0002dcf3 	.word	0x0002dcf3
   2dca8:	0002dc43 	.word	0x0002dc43
   2dcac:	0002dd69 	.word	0x0002dd69
   2dcb0:	0002dc43 	.word	0x0002dc43
   2dcb4:	0002dc43 	.word	0x0002dc43
   2dcb8:	0002dc43 	.word	0x0002dc43
   2dcbc:	0002dc43 	.word	0x0002dc43
   2dcc0:	0002dd9f 	.word	0x0002dd9f
   2dcc4:	0002dd71 	.word	0x0002dd71
   2dcc8:	0002dd13 	.word	0x0002dd13
   2dccc:	0002dc43 	.word	0x0002dc43
   2dcd0:	0002dc43 	.word	0x0002dc43
   2dcd4:	0002dd9b 	.word	0x0002dd9b
   2dcd8:	0002dc43 	.word	0x0002dc43
   2dcdc:	0002dd75 	.word	0x0002dd75
   2dce0:	0002dc43 	.word	0x0002dc43
   2dce4:	0002dc43 	.word	0x0002dc43
   2dce8:	0002dd57 	.word	0x0002dd57
   2dcec:	3b45      	subs	r3, #69	; 0x45
   2dcee:	2b02      	cmp	r3, #2
   2dcf0:	d8a7      	bhi.n	2dc42 <__ssvfiscanf_r+0xee>
   2dcf2:	2305      	movs	r3, #5
   2dcf4:	e014      	b.n	2dd20 <__ssvfiscanf_r+0x1cc>
   2dcf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2dcf8:	4621      	mov	r1, r4
   2dcfa:	4630      	mov	r0, r6
   2dcfc:	4798      	blx	r3
   2dcfe:	2800      	cmp	r0, #0
   2dd00:	f43f af65 	beq.w	2dbce <__ssvfiscanf_r+0x7a>
   2dd04:	9844      	ldr	r0, [sp, #272]	; 0x110
   2dd06:	2800      	cmp	r0, #0
   2dd08:	f040 808f 	bne.w	2de2a <__ssvfiscanf_r+0x2d6>
   2dd0c:	f04f 30ff 	mov.w	r0, #4294967295
   2dd10:	e08f      	b.n	2de32 <__ssvfiscanf_r+0x2de>
   2dd12:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2dd14:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   2dd18:	9341      	str	r3, [sp, #260]	; 0x104
   2dd1a:	2310      	movs	r3, #16
   2dd1c:	9342      	str	r3, [sp, #264]	; 0x108
   2dd1e:	2304      	movs	r3, #4
   2dd20:	9347      	str	r3, [sp, #284]	; 0x11c
   2dd22:	6863      	ldr	r3, [r4, #4]
   2dd24:	2b00      	cmp	r3, #0
   2dd26:	dd4a      	ble.n	2ddbe <__ssvfiscanf_r+0x26a>
   2dd28:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2dd2a:	0659      	lsls	r1, r3, #25
   2dd2c:	d404      	bmi.n	2dd38 <__ssvfiscanf_r+0x1e4>
   2dd2e:	6823      	ldr	r3, [r4, #0]
   2dd30:	781a      	ldrb	r2, [r3, #0]
   2dd32:	5cba      	ldrb	r2, [r7, r2]
   2dd34:	0712      	lsls	r2, r2, #28
   2dd36:	d449      	bmi.n	2ddcc <__ssvfiscanf_r+0x278>
   2dd38:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2dd3a:	2b02      	cmp	r3, #2
   2dd3c:	dc58      	bgt.n	2ddf0 <__ssvfiscanf_r+0x29c>
   2dd3e:	466b      	mov	r3, sp
   2dd40:	4622      	mov	r2, r4
   2dd42:	a941      	add	r1, sp, #260	; 0x104
   2dd44:	4630      	mov	r0, r6
   2dd46:	f000 f87d 	bl	2de44 <_scanf_chars>
   2dd4a:	2801      	cmp	r0, #1
   2dd4c:	d075      	beq.n	2de3a <__ssvfiscanf_r+0x2e6>
   2dd4e:	2802      	cmp	r0, #2
   2dd50:	f47f af24 	bne.w	2db9c <__ssvfiscanf_r+0x48>
   2dd54:	e7d6      	b.n	2dd04 <__ssvfiscanf_r+0x1b0>
   2dd56:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2dd58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2dd5c:	9241      	str	r2, [sp, #260]	; 0x104
   2dd5e:	2210      	movs	r2, #16
   2dd60:	2b6e      	cmp	r3, #110	; 0x6e
   2dd62:	9242      	str	r2, [sp, #264]	; 0x108
   2dd64:	d902      	bls.n	2dd6c <__ssvfiscanf_r+0x218>
   2dd66:	e7da      	b.n	2dd1e <__ssvfiscanf_r+0x1ca>
   2dd68:	2300      	movs	r3, #0
   2dd6a:	9342      	str	r3, [sp, #264]	; 0x108
   2dd6c:	2303      	movs	r3, #3
   2dd6e:	e7d7      	b.n	2dd20 <__ssvfiscanf_r+0x1cc>
   2dd70:	2308      	movs	r3, #8
   2dd72:	e7d3      	b.n	2dd1c <__ssvfiscanf_r+0x1c8>
   2dd74:	220a      	movs	r2, #10
   2dd76:	e7f3      	b.n	2dd60 <__ssvfiscanf_r+0x20c>
   2dd78:	4629      	mov	r1, r5
   2dd7a:	4640      	mov	r0, r8
   2dd7c:	f008 f80a 	bl	35d94 <__sccl>
   2dd80:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2dd82:	4605      	mov	r5, r0
   2dd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dd88:	9341      	str	r3, [sp, #260]	; 0x104
   2dd8a:	2301      	movs	r3, #1
   2dd8c:	e7c8      	b.n	2dd20 <__ssvfiscanf_r+0x1cc>
   2dd8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2dd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2dd94:	9341      	str	r3, [sp, #260]	; 0x104
   2dd96:	2300      	movs	r3, #0
   2dd98:	e7c2      	b.n	2dd20 <__ssvfiscanf_r+0x1cc>
   2dd9a:	2302      	movs	r3, #2
   2dd9c:	e7c0      	b.n	2dd20 <__ssvfiscanf_r+0x1cc>
   2dd9e:	9841      	ldr	r0, [sp, #260]	; 0x104
   2dda0:	06c3      	lsls	r3, r0, #27
   2dda2:	f53f aefb 	bmi.w	2db9c <__ssvfiscanf_r+0x48>
   2dda6:	9b00      	ldr	r3, [sp, #0]
   2dda8:	f010 0f01 	tst.w	r0, #1
   2ddac:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2ddae:	f103 0104 	add.w	r1, r3, #4
   2ddb2:	9100      	str	r1, [sp, #0]
   2ddb4:	681b      	ldr	r3, [r3, #0]
   2ddb6:	bf14      	ite	ne
   2ddb8:	801a      	strhne	r2, [r3, #0]
   2ddba:	601a      	streq	r2, [r3, #0]
   2ddbc:	e6ee      	b.n	2db9c <__ssvfiscanf_r+0x48>
   2ddbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2ddc0:	4621      	mov	r1, r4
   2ddc2:	4630      	mov	r0, r6
   2ddc4:	4798      	blx	r3
   2ddc6:	2800      	cmp	r0, #0
   2ddc8:	d0ae      	beq.n	2dd28 <__ssvfiscanf_r+0x1d4>
   2ddca:	e79b      	b.n	2dd04 <__ssvfiscanf_r+0x1b0>
   2ddcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2ddce:	3201      	adds	r2, #1
   2ddd0:	9245      	str	r2, [sp, #276]	; 0x114
   2ddd2:	6862      	ldr	r2, [r4, #4]
   2ddd4:	3a01      	subs	r2, #1
   2ddd6:	2a00      	cmp	r2, #0
   2ddd8:	6062      	str	r2, [r4, #4]
   2ddda:	dd02      	ble.n	2dde2 <__ssvfiscanf_r+0x28e>
   2dddc:	3301      	adds	r3, #1
   2ddde:	6023      	str	r3, [r4, #0]
   2dde0:	e7a5      	b.n	2dd2e <__ssvfiscanf_r+0x1da>
   2dde2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2dde4:	4621      	mov	r1, r4
   2dde6:	4630      	mov	r0, r6
   2dde8:	4798      	blx	r3
   2ddea:	2800      	cmp	r0, #0
   2ddec:	d09f      	beq.n	2dd2e <__ssvfiscanf_r+0x1da>
   2ddee:	e789      	b.n	2dd04 <__ssvfiscanf_r+0x1b0>
   2ddf0:	2b04      	cmp	r3, #4
   2ddf2:	dc0f      	bgt.n	2de14 <__ssvfiscanf_r+0x2c0>
   2ddf4:	466b      	mov	r3, sp
   2ddf6:	4622      	mov	r2, r4
   2ddf8:	a941      	add	r1, sp, #260	; 0x104
   2ddfa:	4630      	mov	r0, r6
   2ddfc:	f000 f87c 	bl	2def8 <_scanf_i>
   2de00:	e7a3      	b.n	2dd4a <__ssvfiscanf_r+0x1f6>
   2de02:	bf00      	nop
   2de04:	00040f97 	.word	0x00040f97
   2de08:	00035ce5 	.word	0x00035ce5
   2de0c:	00035d5b 	.word	0x00035d5b
   2de10:	0004126b 	.word	0x0004126b
   2de14:	4b0a      	ldr	r3, [pc, #40]	; (2de40 <__ssvfiscanf_r+0x2ec>)
   2de16:	2b00      	cmp	r3, #0
   2de18:	f43f aec0 	beq.w	2db9c <__ssvfiscanf_r+0x48>
   2de1c:	466b      	mov	r3, sp
   2de1e:	4622      	mov	r2, r4
   2de20:	a941      	add	r1, sp, #260	; 0x104
   2de22:	4630      	mov	r0, r6
   2de24:	f3af 8000 	nop.w
   2de28:	e78f      	b.n	2dd4a <__ssvfiscanf_r+0x1f6>
   2de2a:	89a3      	ldrh	r3, [r4, #12]
   2de2c:	065b      	lsls	r3, r3, #25
   2de2e:	f53f af6d 	bmi.w	2dd0c <__ssvfiscanf_r+0x1b8>
   2de32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   2de36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2de3a:	9844      	ldr	r0, [sp, #272]	; 0x110
   2de3c:	e7f9      	b.n	2de32 <__ssvfiscanf_r+0x2de>
   2de3e:	bf00      	nop
   2de40:	00000000 	.word	0x00000000

0002de44 <_scanf_chars>:
   2de44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2de48:	4615      	mov	r5, r2
   2de4a:	688a      	ldr	r2, [r1, #8]
   2de4c:	4680      	mov	r8, r0
   2de4e:	460c      	mov	r4, r1
   2de50:	b932      	cbnz	r2, 2de60 <_scanf_chars+0x1c>
   2de52:	698a      	ldr	r2, [r1, #24]
   2de54:	2a00      	cmp	r2, #0
   2de56:	bf14      	ite	ne
   2de58:	f04f 32ff 	movne.w	r2, #4294967295
   2de5c:	2201      	moveq	r2, #1
   2de5e:	608a      	str	r2, [r1, #8]
   2de60:	6822      	ldr	r2, [r4, #0]
   2de62:	2700      	movs	r7, #0
   2de64:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2def4 <_scanf_chars+0xb0>
   2de68:	06d1      	lsls	r1, r2, #27
   2de6a:	bf5f      	itttt	pl
   2de6c:	681a      	ldrpl	r2, [r3, #0]
   2de6e:	1d11      	addpl	r1, r2, #4
   2de70:	6019      	strpl	r1, [r3, #0]
   2de72:	6816      	ldrpl	r6, [r2, #0]
   2de74:	69a0      	ldr	r0, [r4, #24]
   2de76:	b188      	cbz	r0, 2de9c <_scanf_chars+0x58>
   2de78:	2801      	cmp	r0, #1
   2de7a:	d107      	bne.n	2de8c <_scanf_chars+0x48>
   2de7c:	682b      	ldr	r3, [r5, #0]
   2de7e:	781a      	ldrb	r2, [r3, #0]
   2de80:	6963      	ldr	r3, [r4, #20]
   2de82:	5c9b      	ldrb	r3, [r3, r2]
   2de84:	b953      	cbnz	r3, 2de9c <_scanf_chars+0x58>
   2de86:	2f00      	cmp	r7, #0
   2de88:	d031      	beq.n	2deee <_scanf_chars+0xaa>
   2de8a:	e022      	b.n	2ded2 <_scanf_chars+0x8e>
   2de8c:	2802      	cmp	r0, #2
   2de8e:	d120      	bne.n	2ded2 <_scanf_chars+0x8e>
   2de90:	682b      	ldr	r3, [r5, #0]
   2de92:	781b      	ldrb	r3, [r3, #0]
   2de94:	f819 3003 	ldrb.w	r3, [r9, r3]
   2de98:	071b      	lsls	r3, r3, #28
   2de9a:	d41a      	bmi.n	2ded2 <_scanf_chars+0x8e>
   2de9c:	6823      	ldr	r3, [r4, #0]
   2de9e:	3701      	adds	r7, #1
   2dea0:	06da      	lsls	r2, r3, #27
   2dea2:	bf5e      	ittt	pl
   2dea4:	682b      	ldrpl	r3, [r5, #0]
   2dea6:	781b      	ldrbpl	r3, [r3, #0]
   2dea8:	f806 3b01 	strbpl.w	r3, [r6], #1
   2deac:	682a      	ldr	r2, [r5, #0]
   2deae:	686b      	ldr	r3, [r5, #4]
   2deb0:	3201      	adds	r2, #1
   2deb2:	3b01      	subs	r3, #1
   2deb4:	602a      	str	r2, [r5, #0]
   2deb6:	68a2      	ldr	r2, [r4, #8]
   2deb8:	606b      	str	r3, [r5, #4]
   2deba:	3a01      	subs	r2, #1
   2debc:	60a2      	str	r2, [r4, #8]
   2debe:	b142      	cbz	r2, 2ded2 <_scanf_chars+0x8e>
   2dec0:	2b00      	cmp	r3, #0
   2dec2:	dcd7      	bgt.n	2de74 <_scanf_chars+0x30>
   2dec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2dec8:	4629      	mov	r1, r5
   2deca:	4640      	mov	r0, r8
   2decc:	4798      	blx	r3
   2dece:	2800      	cmp	r0, #0
   2ded0:	d0d0      	beq.n	2de74 <_scanf_chars+0x30>
   2ded2:	6823      	ldr	r3, [r4, #0]
   2ded4:	f013 0310 	ands.w	r3, r3, #16
   2ded8:	d105      	bne.n	2dee6 <_scanf_chars+0xa2>
   2deda:	68e2      	ldr	r2, [r4, #12]
   2dedc:	3201      	adds	r2, #1
   2dede:	60e2      	str	r2, [r4, #12]
   2dee0:	69a2      	ldr	r2, [r4, #24]
   2dee2:	b102      	cbz	r2, 2dee6 <_scanf_chars+0xa2>
   2dee4:	7033      	strb	r3, [r6, #0]
   2dee6:	6923      	ldr	r3, [r4, #16]
   2dee8:	2000      	movs	r0, #0
   2deea:	443b      	add	r3, r7
   2deec:	6123      	str	r3, [r4, #16]
   2deee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2def2:	bf00      	nop
   2def4:	00040f97 	.word	0x00040f97

0002def8 <_scanf_i>:
   2def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2defc:	4698      	mov	r8, r3
   2defe:	b087      	sub	sp, #28
   2df00:	4b78      	ldr	r3, [pc, #480]	; (2e0e4 <_scanf_i+0x1ec>)
   2df02:	460c      	mov	r4, r1
   2df04:	4682      	mov	sl, r0
   2df06:	4616      	mov	r6, r2
   2df08:	4627      	mov	r7, r4
   2df0a:	f04f 0b00 	mov.w	fp, #0
   2df0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2df12:	ab03      	add	r3, sp, #12
   2df14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2df18:	4b73      	ldr	r3, [pc, #460]	; (2e0e8 <_scanf_i+0x1f0>)
   2df1a:	69a1      	ldr	r1, [r4, #24]
   2df1c:	4a73      	ldr	r2, [pc, #460]	; (2e0ec <_scanf_i+0x1f4>)
   2df1e:	2903      	cmp	r1, #3
   2df20:	bf08      	it	eq
   2df22:	461a      	moveq	r2, r3
   2df24:	68a3      	ldr	r3, [r4, #8]
   2df26:	9201      	str	r2, [sp, #4]
   2df28:	1e5a      	subs	r2, r3, #1
   2df2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2df2e:	bf89      	itett	hi
   2df30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2df34:	f04f 0900 	movls.w	r9, #0
   2df38:	eb03 0905 	addhi.w	r9, r3, r5
   2df3c:	f240 135d 	movwhi	r3, #349	; 0x15d
   2df40:	bf88      	it	hi
   2df42:	60a3      	strhi	r3, [r4, #8]
   2df44:	f857 3b1c 	ldr.w	r3, [r7], #28
   2df48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2df4c:	463d      	mov	r5, r7
   2df4e:	6023      	str	r3, [r4, #0]
   2df50:	6831      	ldr	r1, [r6, #0]
   2df52:	ab03      	add	r3, sp, #12
   2df54:	2202      	movs	r2, #2
   2df56:	7809      	ldrb	r1, [r1, #0]
   2df58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2df5c:	f007 f828 	bl	34fb0 <memchr>
   2df60:	2800      	cmp	r0, #0
   2df62:	d040      	beq.n	2dfe6 <_scanf_i+0xee>
   2df64:	f1bb 0f01 	cmp.w	fp, #1
   2df68:	d112      	bne.n	2df90 <_scanf_i+0x98>
   2df6a:	6862      	ldr	r2, [r4, #4]
   2df6c:	b92a      	cbnz	r2, 2df7a <_scanf_i+0x82>
   2df6e:	6822      	ldr	r2, [r4, #0]
   2df70:	2108      	movs	r1, #8
   2df72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2df76:	6061      	str	r1, [r4, #4]
   2df78:	6022      	str	r2, [r4, #0]
   2df7a:	6822      	ldr	r2, [r4, #0]
   2df7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2df80:	6022      	str	r2, [r4, #0]
   2df82:	68a2      	ldr	r2, [r4, #8]
   2df84:	1e51      	subs	r1, r2, #1
   2df86:	60a1      	str	r1, [r4, #8]
   2df88:	b9da      	cbnz	r2, 2dfc2 <_scanf_i+0xca>
   2df8a:	f04f 0b02 	mov.w	fp, #2
   2df8e:	e7df      	b.n	2df50 <_scanf_i+0x58>
   2df90:	f1bb 0f02 	cmp.w	fp, #2
   2df94:	d006      	beq.n	2dfa4 <_scanf_i+0xac>
   2df96:	68a2      	ldr	r2, [r4, #8]
   2df98:	1e51      	subs	r1, r2, #1
   2df9a:	60a1      	str	r1, [r4, #8]
   2df9c:	b98a      	cbnz	r2, 2dfc2 <_scanf_i+0xca>
   2df9e:	f04f 0b01 	mov.w	fp, #1
   2dfa2:	e7d5      	b.n	2df50 <_scanf_i+0x58>
   2dfa4:	6822      	ldr	r2, [r4, #0]
   2dfa6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2dfaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2dfae:	d11f      	bne.n	2dff0 <_scanf_i+0xf8>
   2dfb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2dfb4:	2110      	movs	r1, #16
   2dfb6:	6022      	str	r2, [r4, #0]
   2dfb8:	68a2      	ldr	r2, [r4, #8]
   2dfba:	6061      	str	r1, [r4, #4]
   2dfbc:	1e51      	subs	r1, r2, #1
   2dfbe:	60a1      	str	r1, [r4, #8]
   2dfc0:	b1b2      	cbz	r2, 2dff0 <_scanf_i+0xf8>
   2dfc2:	6832      	ldr	r2, [r6, #0]
   2dfc4:	1c51      	adds	r1, r2, #1
   2dfc6:	6031      	str	r1, [r6, #0]
   2dfc8:	7812      	ldrb	r2, [r2, #0]
   2dfca:	f805 2b01 	strb.w	r2, [r5], #1
   2dfce:	6872      	ldr	r2, [r6, #4]
   2dfd0:	3a01      	subs	r2, #1
   2dfd2:	2a00      	cmp	r2, #0
   2dfd4:	6072      	str	r2, [r6, #4]
   2dfd6:	dc06      	bgt.n	2dfe6 <_scanf_i+0xee>
   2dfd8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2dfdc:	4631      	mov	r1, r6
   2dfde:	4650      	mov	r0, sl
   2dfe0:	4790      	blx	r2
   2dfe2:	2800      	cmp	r0, #0
   2dfe4:	d174      	bne.n	2e0d0 <_scanf_i+0x1d8>
   2dfe6:	f10b 0b01 	add.w	fp, fp, #1
   2dfea:	f1bb 0f03 	cmp.w	fp, #3
   2dfee:	d1af      	bne.n	2df50 <_scanf_i+0x58>
   2dff0:	6863      	ldr	r3, [r4, #4]
   2dff2:	b90b      	cbnz	r3, 2dff8 <_scanf_i+0x100>
   2dff4:	230a      	movs	r3, #10
   2dff6:	6063      	str	r3, [r4, #4]
   2dff8:	6863      	ldr	r3, [r4, #4]
   2dffa:	f04f 0b00 	mov.w	fp, #0
   2dffe:	493c      	ldr	r1, [pc, #240]	; (2e0f0 <_scanf_i+0x1f8>)
   2e000:	6960      	ldr	r0, [r4, #20]
   2e002:	1ac9      	subs	r1, r1, r3
   2e004:	f007 fec6 	bl	35d94 <__sccl>
   2e008:	68a3      	ldr	r3, [r4, #8]
   2e00a:	6822      	ldr	r2, [r4, #0]
   2e00c:	b373      	cbz	r3, 2e06c <_scanf_i+0x174>
   2e00e:	6831      	ldr	r1, [r6, #0]
   2e010:	6960      	ldr	r0, [r4, #20]
   2e012:	f891 c000 	ldrb.w	ip, [r1]
   2e016:	f810 000c 	ldrb.w	r0, [r0, ip]
   2e01a:	b338      	cbz	r0, 2e06c <_scanf_i+0x174>
   2e01c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2e020:	d116      	bne.n	2e050 <_scanf_i+0x158>
   2e022:	0510      	lsls	r0, r2, #20
   2e024:	d514      	bpl.n	2e050 <_scanf_i+0x158>
   2e026:	f10b 0b01 	add.w	fp, fp, #1
   2e02a:	f1b9 0f00 	cmp.w	r9, #0
   2e02e:	d003      	beq.n	2e038 <_scanf_i+0x140>
   2e030:	3301      	adds	r3, #1
   2e032:	f109 39ff 	add.w	r9, r9, #4294967295
   2e036:	60a3      	str	r3, [r4, #8]
   2e038:	6873      	ldr	r3, [r6, #4]
   2e03a:	3b01      	subs	r3, #1
   2e03c:	2b00      	cmp	r3, #0
   2e03e:	6073      	str	r3, [r6, #4]
   2e040:	dd0d      	ble.n	2e05e <_scanf_i+0x166>
   2e042:	6833      	ldr	r3, [r6, #0]
   2e044:	3301      	adds	r3, #1
   2e046:	6033      	str	r3, [r6, #0]
   2e048:	68a3      	ldr	r3, [r4, #8]
   2e04a:	3b01      	subs	r3, #1
   2e04c:	60a3      	str	r3, [r4, #8]
   2e04e:	e7db      	b.n	2e008 <_scanf_i+0x110>
   2e050:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2e054:	6022      	str	r2, [r4, #0]
   2e056:	780b      	ldrb	r3, [r1, #0]
   2e058:	f805 3b01 	strb.w	r3, [r5], #1
   2e05c:	e7ec      	b.n	2e038 <_scanf_i+0x140>
   2e05e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2e062:	4631      	mov	r1, r6
   2e064:	4650      	mov	r0, sl
   2e066:	4798      	blx	r3
   2e068:	2800      	cmp	r0, #0
   2e06a:	d0ed      	beq.n	2e048 <_scanf_i+0x150>
   2e06c:	6823      	ldr	r3, [r4, #0]
   2e06e:	05d9      	lsls	r1, r3, #23
   2e070:	d50d      	bpl.n	2e08e <_scanf_i+0x196>
   2e072:	42bd      	cmp	r5, r7
   2e074:	d909      	bls.n	2e08a <_scanf_i+0x192>
   2e076:	f105 39ff 	add.w	r9, r5, #4294967295
   2e07a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2e07e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2e082:	4632      	mov	r2, r6
   2e084:	464d      	mov	r5, r9
   2e086:	4650      	mov	r0, sl
   2e088:	4798      	blx	r3
   2e08a:	42bd      	cmp	r5, r7
   2e08c:	d028      	beq.n	2e0e0 <_scanf_i+0x1e8>
   2e08e:	6822      	ldr	r2, [r4, #0]
   2e090:	f012 0210 	ands.w	r2, r2, #16
   2e094:	d113      	bne.n	2e0be <_scanf_i+0x1c6>
   2e096:	702a      	strb	r2, [r5, #0]
   2e098:	4639      	mov	r1, r7
   2e09a:	6863      	ldr	r3, [r4, #4]
   2e09c:	4650      	mov	r0, sl
   2e09e:	9e01      	ldr	r6, [sp, #4]
   2e0a0:	47b0      	blx	r6
   2e0a2:	f8d8 3000 	ldr.w	r3, [r8]
   2e0a6:	6821      	ldr	r1, [r4, #0]
   2e0a8:	1d1a      	adds	r2, r3, #4
   2e0aa:	f011 0f20 	tst.w	r1, #32
   2e0ae:	f8c8 2000 	str.w	r2, [r8]
   2e0b2:	681b      	ldr	r3, [r3, #0]
   2e0b4:	d00f      	beq.n	2e0d6 <_scanf_i+0x1de>
   2e0b6:	6018      	str	r0, [r3, #0]
   2e0b8:	68e3      	ldr	r3, [r4, #12]
   2e0ba:	3301      	adds	r3, #1
   2e0bc:	60e3      	str	r3, [r4, #12]
   2e0be:	1bed      	subs	r5, r5, r7
   2e0c0:	6923      	ldr	r3, [r4, #16]
   2e0c2:	2000      	movs	r0, #0
   2e0c4:	445d      	add	r5, fp
   2e0c6:	442b      	add	r3, r5
   2e0c8:	6123      	str	r3, [r4, #16]
   2e0ca:	b007      	add	sp, #28
   2e0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0d0:	f04f 0b00 	mov.w	fp, #0
   2e0d4:	e7ca      	b.n	2e06c <_scanf_i+0x174>
   2e0d6:	07ca      	lsls	r2, r1, #31
   2e0d8:	bf4c      	ite	mi
   2e0da:	8018      	strhmi	r0, [r3, #0]
   2e0dc:	6018      	strpl	r0, [r3, #0]
   2e0de:	e7eb      	b.n	2e0b8 <_scanf_i+0x1c0>
   2e0e0:	2001      	movs	r0, #1
   2e0e2:	e7f2      	b.n	2e0ca <_scanf_i+0x1d2>
   2e0e4:	00036730 	.word	0x00036730
   2e0e8:	00035471 	.word	0x00035471
   2e0ec:	00035475 	.word	0x00035475
   2e0f0:	00041286 	.word	0x00041286

0002e0f4 <_read_r>:
   2e0f4:	b538      	push	{r3, r4, r5, lr}
   2e0f6:	4604      	mov	r4, r0
   2e0f8:	4d06      	ldr	r5, [pc, #24]	; (2e114 <_read_r+0x20>)
   2e0fa:	4608      	mov	r0, r1
   2e0fc:	4611      	mov	r1, r2
   2e0fe:	2200      	movs	r2, #0
   2e100:	602a      	str	r2, [r5, #0]
   2e102:	461a      	mov	r2, r3
   2e104:	f001 fd1a 	bl	2fb3c <_read>
   2e108:	1c43      	adds	r3, r0, #1
   2e10a:	d102      	bne.n	2e112 <_read_r+0x1e>
   2e10c:	682b      	ldr	r3, [r5, #0]
   2e10e:	b103      	cbz	r3, 2e112 <_read_r+0x1e>
   2e110:	6023      	str	r3, [r4, #0]
   2e112:	bd38      	pop	{r3, r4, r5, pc}
   2e114:	20011020 	.word	0x20011020

0002e118 <nan>:
   2e118:	2000      	movs	r0, #0
   2e11a:	4901      	ldr	r1, [pc, #4]	; (2e120 <nan+0x8>)
   2e11c:	4770      	bx	lr
   2e11e:	bf00      	nop
   2e120:	7ff80000 	.word	0x7ff80000

0002e124 <__assert_func>:
   2e124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e126:	4614      	mov	r4, r2
   2e128:	461a      	mov	r2, r3
   2e12a:	4b09      	ldr	r3, [pc, #36]	; (2e150 <__assert_func+0x2c>)
   2e12c:	4605      	mov	r5, r0
   2e12e:	681b      	ldr	r3, [r3, #0]
   2e130:	68d8      	ldr	r0, [r3, #12]
   2e132:	b954      	cbnz	r4, 2e14a <__assert_func+0x26>
   2e134:	4b07      	ldr	r3, [pc, #28]	; (2e154 <__assert_func+0x30>)
   2e136:	461c      	mov	r4, r3
   2e138:	9100      	str	r1, [sp, #0]
   2e13a:	4907      	ldr	r1, [pc, #28]	; (2e158 <__assert_func+0x34>)
   2e13c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   2e140:	462b      	mov	r3, r5
   2e142:	f000 f80d 	bl	2e160 <fiprintf>
   2e146:	f007 feeb 	bl	35f20 <abort>
   2e14a:	4b04      	ldr	r3, [pc, #16]	; (2e15c <__assert_func+0x38>)
   2e14c:	e7f4      	b.n	2e138 <__assert_func+0x14>
   2e14e:	bf00      	nop
   2e150:	2000ca94 	.word	0x2000ca94
   2e154:	00038b1b 	.word	0x00038b1b
   2e158:	0004129b 	.word	0x0004129b
   2e15c:	0004128e 	.word	0x0004128e

0002e160 <fiprintf>:
   2e160:	b40e      	push	{r1, r2, r3}
   2e162:	b503      	push	{r0, r1, lr}
   2e164:	ab03      	add	r3, sp, #12
   2e166:	4601      	mov	r1, r0
   2e168:	4805      	ldr	r0, [pc, #20]	; (2e180 <fiprintf+0x20>)
   2e16a:	f853 2b04 	ldr.w	r2, [r3], #4
   2e16e:	6800      	ldr	r0, [r0, #0]
   2e170:	9301      	str	r3, [sp, #4]
   2e172:	f000 f829 	bl	2e1c8 <_vfiprintf_r>
   2e176:	b002      	add	sp, #8
   2e178:	f85d eb04 	ldr.w	lr, [sp], #4
   2e17c:	b003      	add	sp, #12
   2e17e:	4770      	bx	lr
   2e180:	2000ca94 	.word	0x2000ca94

0002e184 <_fstat_r>:
   2e184:	b538      	push	{r3, r4, r5, lr}
   2e186:	2300      	movs	r3, #0
   2e188:	4d06      	ldr	r5, [pc, #24]	; (2e1a4 <_fstat_r+0x20>)
   2e18a:	4604      	mov	r4, r0
   2e18c:	4608      	mov	r0, r1
   2e18e:	4611      	mov	r1, r2
   2e190:	602b      	str	r3, [r5, #0]
   2e192:	f001 fce9 	bl	2fb68 <_fstat>
   2e196:	1c43      	adds	r3, r0, #1
   2e198:	d102      	bne.n	2e1a0 <_fstat_r+0x1c>
   2e19a:	682b      	ldr	r3, [r5, #0]
   2e19c:	b103      	cbz	r3, 2e1a0 <_fstat_r+0x1c>
   2e19e:	6023      	str	r3, [r4, #0]
   2e1a0:	bd38      	pop	{r3, r4, r5, pc}
   2e1a2:	bf00      	nop
   2e1a4:	20011020 	.word	0x20011020

0002e1a8 <_isatty_r>:
   2e1a8:	b538      	push	{r3, r4, r5, lr}
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	4d05      	ldr	r5, [pc, #20]	; (2e1c4 <_isatty_r+0x1c>)
   2e1ae:	4604      	mov	r4, r0
   2e1b0:	4608      	mov	r0, r1
   2e1b2:	602b      	str	r3, [r5, #0]
   2e1b4:	f001 fccf 	bl	2fb56 <_isatty>
   2e1b8:	1c43      	adds	r3, r0, #1
   2e1ba:	d102      	bne.n	2e1c2 <_isatty_r+0x1a>
   2e1bc:	682b      	ldr	r3, [r5, #0]
   2e1be:	b103      	cbz	r3, 2e1c2 <_isatty_r+0x1a>
   2e1c0:	6023      	str	r3, [r4, #0]
   2e1c2:	bd38      	pop	{r3, r4, r5, pc}
   2e1c4:	20011020 	.word	0x20011020

0002e1c8 <_vfiprintf_r>:
   2e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1cc:	460d      	mov	r5, r1
   2e1ce:	b09d      	sub	sp, #116	; 0x74
   2e1d0:	4614      	mov	r4, r2
   2e1d2:	4698      	mov	r8, r3
   2e1d4:	4606      	mov	r6, r0
   2e1d6:	b118      	cbz	r0, 2e1e0 <_vfiprintf_r+0x18>
   2e1d8:	6983      	ldr	r3, [r0, #24]
   2e1da:	b90b      	cbnz	r3, 2e1e0 <_vfiprintf_r+0x18>
   2e1dc:	f7fe fcdc 	bl	2cb98 <__sinit>
   2e1e0:	4b87      	ldr	r3, [pc, #540]	; (2e400 <_vfiprintf_r+0x238>)
   2e1e2:	429d      	cmp	r5, r3
   2e1e4:	d11b      	bne.n	2e21e <_vfiprintf_r+0x56>
   2e1e6:	6875      	ldr	r5, [r6, #4]
   2e1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2e1ea:	07d9      	lsls	r1, r3, #31
   2e1ec:	d405      	bmi.n	2e1fa <_vfiprintf_r+0x32>
   2e1ee:	89ab      	ldrh	r3, [r5, #12]
   2e1f0:	059a      	lsls	r2, r3, #22
   2e1f2:	d402      	bmi.n	2e1fa <_vfiprintf_r+0x32>
   2e1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2e1f6:	f7e3 f8d3 	bl	113a0 <__retarget_lock_acquire_recursive>
   2e1fa:	89ab      	ldrh	r3, [r5, #12]
   2e1fc:	071b      	lsls	r3, r3, #28
   2e1fe:	d501      	bpl.n	2e204 <_vfiprintf_r+0x3c>
   2e200:	692b      	ldr	r3, [r5, #16]
   2e202:	b9eb      	cbnz	r3, 2e240 <_vfiprintf_r+0x78>
   2e204:	4629      	mov	r1, r5
   2e206:	4630      	mov	r0, r6
   2e208:	f7fe fbcc 	bl	2c9a4 <__swsetup_r>
   2e20c:	b1c0      	cbz	r0, 2e240 <_vfiprintf_r+0x78>
   2e20e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2e210:	07dc      	lsls	r4, r3, #31
   2e212:	d50e      	bpl.n	2e232 <_vfiprintf_r+0x6a>
   2e214:	f04f 30ff 	mov.w	r0, #4294967295
   2e218:	b01d      	add	sp, #116	; 0x74
   2e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e21e:	4b79      	ldr	r3, [pc, #484]	; (2e404 <_vfiprintf_r+0x23c>)
   2e220:	429d      	cmp	r5, r3
   2e222:	d101      	bne.n	2e228 <_vfiprintf_r+0x60>
   2e224:	68b5      	ldr	r5, [r6, #8]
   2e226:	e7df      	b.n	2e1e8 <_vfiprintf_r+0x20>
   2e228:	4b77      	ldr	r3, [pc, #476]	; (2e408 <_vfiprintf_r+0x240>)
   2e22a:	429d      	cmp	r5, r3
   2e22c:	bf08      	it	eq
   2e22e:	68f5      	ldreq	r5, [r6, #12]
   2e230:	e7da      	b.n	2e1e8 <_vfiprintf_r+0x20>
   2e232:	89ab      	ldrh	r3, [r5, #12]
   2e234:	0598      	lsls	r0, r3, #22
   2e236:	d4ed      	bmi.n	2e214 <_vfiprintf_r+0x4c>
   2e238:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2e23a:	f7e3 f8cd 	bl	113d8 <__retarget_lock_release_recursive>
   2e23e:	e7e9      	b.n	2e214 <_vfiprintf_r+0x4c>
   2e240:	2300      	movs	r3, #0
   2e242:	f8cd 800c 	str.w	r8, [sp, #12]
   2e246:	f04f 0901 	mov.w	r9, #1
   2e24a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2e40c <_vfiprintf_r+0x244>
   2e24e:	9309      	str	r3, [sp, #36]	; 0x24
   2e250:	2320      	movs	r3, #32
   2e252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2e256:	2330      	movs	r3, #48	; 0x30
   2e258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2e25c:	4623      	mov	r3, r4
   2e25e:	469a      	mov	sl, r3
   2e260:	f813 2b01 	ldrb.w	r2, [r3], #1
   2e264:	b10a      	cbz	r2, 2e26a <_vfiprintf_r+0xa2>
   2e266:	2a25      	cmp	r2, #37	; 0x25
   2e268:	d1f9      	bne.n	2e25e <_vfiprintf_r+0x96>
   2e26a:	ebba 0b04 	subs.w	fp, sl, r4
   2e26e:	d00b      	beq.n	2e288 <_vfiprintf_r+0xc0>
   2e270:	465b      	mov	r3, fp
   2e272:	4622      	mov	r2, r4
   2e274:	4629      	mov	r1, r5
   2e276:	4630      	mov	r0, r6
   2e278:	f007 fe40 	bl	35efc <__sfputs_r>
   2e27c:	3001      	adds	r0, #1
   2e27e:	f000 80a6 	beq.w	2e3ce <_vfiprintf_r+0x206>
   2e282:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e284:	445a      	add	r2, fp
   2e286:	9209      	str	r2, [sp, #36]	; 0x24
   2e288:	f89a 3000 	ldrb.w	r3, [sl]
   2e28c:	2b00      	cmp	r3, #0
   2e28e:	f000 809e 	beq.w	2e3ce <_vfiprintf_r+0x206>
   2e292:	2300      	movs	r3, #0
   2e294:	f04f 32ff 	mov.w	r2, #4294967295
   2e298:	f10a 0a01 	add.w	sl, sl, #1
   2e29c:	9304      	str	r3, [sp, #16]
   2e29e:	9307      	str	r3, [sp, #28]
   2e2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2e2a4:	931a      	str	r3, [sp, #104]	; 0x68
   2e2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2e2aa:	4654      	mov	r4, sl
   2e2ac:	2205      	movs	r2, #5
   2e2ae:	4857      	ldr	r0, [pc, #348]	; (2e40c <_vfiprintf_r+0x244>)
   2e2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e2b4:	f006 fe7c 	bl	34fb0 <memchr>
   2e2b8:	9b04      	ldr	r3, [sp, #16]
   2e2ba:	b9d0      	cbnz	r0, 2e2f2 <_vfiprintf_r+0x12a>
   2e2bc:	06d9      	lsls	r1, r3, #27
   2e2be:	bf44      	itt	mi
   2e2c0:	2220      	movmi	r2, #32
   2e2c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e2c6:	071a      	lsls	r2, r3, #28
   2e2c8:	bf44      	itt	mi
   2e2ca:	222b      	movmi	r2, #43	; 0x2b
   2e2cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e2d0:	f89a 2000 	ldrb.w	r2, [sl]
   2e2d4:	2a2a      	cmp	r2, #42	; 0x2a
   2e2d6:	d014      	beq.n	2e302 <_vfiprintf_r+0x13a>
   2e2d8:	9a07      	ldr	r2, [sp, #28]
   2e2da:	4654      	mov	r4, sl
   2e2dc:	2000      	movs	r0, #0
   2e2de:	f04f 0c0a 	mov.w	ip, #10
   2e2e2:	4621      	mov	r1, r4
   2e2e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   2e2e8:	3b30      	subs	r3, #48	; 0x30
   2e2ea:	2b09      	cmp	r3, #9
   2e2ec:	d94a      	bls.n	2e384 <_vfiprintf_r+0x1bc>
   2e2ee:	b970      	cbnz	r0, 2e30e <_vfiprintf_r+0x146>
   2e2f0:	e014      	b.n	2e31c <_vfiprintf_r+0x154>
   2e2f2:	eba0 0008 	sub.w	r0, r0, r8
   2e2f6:	46a2      	mov	sl, r4
   2e2f8:	fa09 f000 	lsl.w	r0, r9, r0
   2e2fc:	4318      	orrs	r0, r3
   2e2fe:	9004      	str	r0, [sp, #16]
   2e300:	e7d3      	b.n	2e2aa <_vfiprintf_r+0xe2>
   2e302:	9a03      	ldr	r2, [sp, #12]
   2e304:	1d11      	adds	r1, r2, #4
   2e306:	6812      	ldr	r2, [r2, #0]
   2e308:	2a00      	cmp	r2, #0
   2e30a:	9103      	str	r1, [sp, #12]
   2e30c:	db01      	blt.n	2e312 <_vfiprintf_r+0x14a>
   2e30e:	9207      	str	r2, [sp, #28]
   2e310:	e004      	b.n	2e31c <_vfiprintf_r+0x154>
   2e312:	4252      	negs	r2, r2
   2e314:	f043 0302 	orr.w	r3, r3, #2
   2e318:	9207      	str	r2, [sp, #28]
   2e31a:	9304      	str	r3, [sp, #16]
   2e31c:	7823      	ldrb	r3, [r4, #0]
   2e31e:	2b2e      	cmp	r3, #46	; 0x2e
   2e320:	d10a      	bne.n	2e338 <_vfiprintf_r+0x170>
   2e322:	7863      	ldrb	r3, [r4, #1]
   2e324:	2b2a      	cmp	r3, #42	; 0x2a
   2e326:	d132      	bne.n	2e38e <_vfiprintf_r+0x1c6>
   2e328:	9b03      	ldr	r3, [sp, #12]
   2e32a:	3402      	adds	r4, #2
   2e32c:	1d1a      	adds	r2, r3, #4
   2e32e:	681b      	ldr	r3, [r3, #0]
   2e330:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2e334:	9203      	str	r2, [sp, #12]
   2e336:	9305      	str	r3, [sp, #20]
   2e338:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2e410 <_vfiprintf_r+0x248>
   2e33c:	2203      	movs	r2, #3
   2e33e:	7821      	ldrb	r1, [r4, #0]
   2e340:	4650      	mov	r0, sl
   2e342:	f006 fe35 	bl	34fb0 <memchr>
   2e346:	b138      	cbz	r0, 2e358 <_vfiprintf_r+0x190>
   2e348:	eba0 000a 	sub.w	r0, r0, sl
   2e34c:	2240      	movs	r2, #64	; 0x40
   2e34e:	9b04      	ldr	r3, [sp, #16]
   2e350:	3401      	adds	r4, #1
   2e352:	4082      	lsls	r2, r0
   2e354:	4313      	orrs	r3, r2
   2e356:	9304      	str	r3, [sp, #16]
   2e358:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e35c:	2206      	movs	r2, #6
   2e35e:	482d      	ldr	r0, [pc, #180]	; (2e414 <_vfiprintf_r+0x24c>)
   2e360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2e364:	f006 fe24 	bl	34fb0 <memchr>
   2e368:	2800      	cmp	r0, #0
   2e36a:	d03f      	beq.n	2e3ec <_vfiprintf_r+0x224>
   2e36c:	4b2a      	ldr	r3, [pc, #168]	; (2e418 <_vfiprintf_r+0x250>)
   2e36e:	bb1b      	cbnz	r3, 2e3b8 <_vfiprintf_r+0x1f0>
   2e370:	9b03      	ldr	r3, [sp, #12]
   2e372:	3307      	adds	r3, #7
   2e374:	f023 0307 	bic.w	r3, r3, #7
   2e378:	3308      	adds	r3, #8
   2e37a:	9303      	str	r3, [sp, #12]
   2e37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e37e:	443b      	add	r3, r7
   2e380:	9309      	str	r3, [sp, #36]	; 0x24
   2e382:	e76b      	b.n	2e25c <_vfiprintf_r+0x94>
   2e384:	fb0c 3202 	mla	r2, ip, r2, r3
   2e388:	460c      	mov	r4, r1
   2e38a:	2001      	movs	r0, #1
   2e38c:	e7a9      	b.n	2e2e2 <_vfiprintf_r+0x11a>
   2e38e:	2300      	movs	r3, #0
   2e390:	3401      	adds	r4, #1
   2e392:	f04f 0c0a 	mov.w	ip, #10
   2e396:	4619      	mov	r1, r3
   2e398:	9305      	str	r3, [sp, #20]
   2e39a:	4620      	mov	r0, r4
   2e39c:	f810 2b01 	ldrb.w	r2, [r0], #1
   2e3a0:	3a30      	subs	r2, #48	; 0x30
   2e3a2:	2a09      	cmp	r2, #9
   2e3a4:	d903      	bls.n	2e3ae <_vfiprintf_r+0x1e6>
   2e3a6:	2b00      	cmp	r3, #0
   2e3a8:	d0c6      	beq.n	2e338 <_vfiprintf_r+0x170>
   2e3aa:	9105      	str	r1, [sp, #20]
   2e3ac:	e7c4      	b.n	2e338 <_vfiprintf_r+0x170>
   2e3ae:	fb0c 2101 	mla	r1, ip, r1, r2
   2e3b2:	4604      	mov	r4, r0
   2e3b4:	2301      	movs	r3, #1
   2e3b6:	e7f0      	b.n	2e39a <_vfiprintf_r+0x1d2>
   2e3b8:	ab03      	add	r3, sp, #12
   2e3ba:	462a      	mov	r2, r5
   2e3bc:	a904      	add	r1, sp, #16
   2e3be:	4630      	mov	r0, r6
   2e3c0:	9300      	str	r3, [sp, #0]
   2e3c2:	4b16      	ldr	r3, [pc, #88]	; (2e41c <_vfiprintf_r+0x254>)
   2e3c4:	f7fd fca6 	bl	2bd14 <_printf_float>
   2e3c8:	4607      	mov	r7, r0
   2e3ca:	1c78      	adds	r0, r7, #1
   2e3cc:	d1d6      	bne.n	2e37c <_vfiprintf_r+0x1b4>
   2e3ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2e3d0:	07d9      	lsls	r1, r3, #31
   2e3d2:	d405      	bmi.n	2e3e0 <_vfiprintf_r+0x218>
   2e3d4:	89ab      	ldrh	r3, [r5, #12]
   2e3d6:	059a      	lsls	r2, r3, #22
   2e3d8:	d402      	bmi.n	2e3e0 <_vfiprintf_r+0x218>
   2e3da:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2e3dc:	f7e2 fffc 	bl	113d8 <__retarget_lock_release_recursive>
   2e3e0:	89ab      	ldrh	r3, [r5, #12]
   2e3e2:	065b      	lsls	r3, r3, #25
   2e3e4:	f53f af16 	bmi.w	2e214 <_vfiprintf_r+0x4c>
   2e3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e3ea:	e715      	b.n	2e218 <_vfiprintf_r+0x50>
   2e3ec:	ab03      	add	r3, sp, #12
   2e3ee:	462a      	mov	r2, r5
   2e3f0:	a904      	add	r1, sp, #16
   2e3f2:	4630      	mov	r0, r6
   2e3f4:	9300      	str	r3, [sp, #0]
   2e3f6:	4b09      	ldr	r3, [pc, #36]	; (2e41c <_vfiprintf_r+0x254>)
   2e3f8:	f7fd fec2 	bl	2c180 <_printf_i>
   2e3fc:	e7e4      	b.n	2e3c8 <_vfiprintf_r+0x200>
   2e3fe:	bf00      	nop
   2e400:	00037808 	.word	0x00037808
   2e404:	000377e8 	.word	0x000377e8
   2e408:	000377c8 	.word	0x000377c8
   2e40c:	00041265 	.word	0x00041265
   2e410:	0004126b 	.word	0x0004126b
   2e414:	0004126f 	.word	0x0004126f
   2e418:	0002bd15 	.word	0x0002bd15
   2e41c:	00035efd 	.word	0x00035efd

0002e420 <raise>:
   2e420:	4b02      	ldr	r3, [pc, #8]	; (2e42c <raise+0xc>)
   2e422:	4601      	mov	r1, r0
   2e424:	6818      	ldr	r0, [r3, #0]
   2e426:	f007 bd82 	b.w	35f2e <_raise_r>
   2e42a:	bf00      	nop
   2e42c:	2000ca94 	.word	0x2000ca94

0002e430 <_kill_r>:
   2e430:	b538      	push	{r3, r4, r5, lr}
   2e432:	2300      	movs	r3, #0
   2e434:	4d06      	ldr	r5, [pc, #24]	; (2e450 <_kill_r+0x20>)
   2e436:	4604      	mov	r4, r0
   2e438:	4608      	mov	r0, r1
   2e43a:	4611      	mov	r1, r2
   2e43c:	602b      	str	r3, [r5, #0]
   2e43e:	f001 fb8f 	bl	2fb60 <_kill>
   2e442:	1c43      	adds	r3, r0, #1
   2e444:	d102      	bne.n	2e44c <_kill_r+0x1c>
   2e446:	682b      	ldr	r3, [r5, #0]
   2e448:	b103      	cbz	r3, 2e44c <_kill_r+0x1c>
   2e44a:	6023      	str	r3, [r4, #0]
   2e44c:	bd38      	pop	{r3, r4, r5, pc}
   2e44e:	bf00      	nop
   2e450:	20011020 	.word	0x20011020

0002e454 <z_log_msg_static_create.constprop.0>:
   2e454:	2300      	movs	r3, #0
   2e456:	f7e0 b9e1 	b.w	e81c <z_impl_z_log_msg_static_create>

0002e45a <fds_init>:

/**@brief Initialize the file descriptor structure used by poll.
 */
int fds_init(struct mqtt_client *c, struct pollfd *fds)
{
   2e45a:	4603      	mov	r3, r0
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   2e45c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2e460:	b920      	cbnz	r0, 2e46c <fds_init+0x12>
		fds->fd = c->transport.tcp.sock;
   2e462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e464:	600b      	str	r3, [r1, #0]
	} else {
		return -ENOTSUP;
	}

	fds->events = POLLIN;
   2e466:	2301      	movs	r3, #1
   2e468:	808b      	strh	r3, [r1, #4]

	return 0;
   2e46a:	4770      	bx	lr
		return -ENOTSUP;
   2e46c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e470:	4770      	bx	lr

0002e472 <z_log_msg_static_create.constprop.0>:
   2e472:	2300      	movs	r3, #0
   2e474:	f7e0 b9d2 	b.w	e81c <z_impl_z_log_msg_static_create>

0002e478 <button_handler>:
	switch (has_changed) {
   2e478:	2901      	cmp	r1, #1
   2e47a:	d103      	bne.n	2e484 <button_handler+0xc>
		if (buttons & DK_BTN1_MSK){
   2e47c:	07c3      	lsls	r3, r0, #31
   2e47e:	d501      	bpl.n	2e484 <button_handler+0xc>
   2e480:	f7dd b914 	b.w	b6ac <button_handler.part.0>
}
   2e484:	4770      	bx	lr

0002e486 <nrf_modem_fault_handler>:
	sys_reboot(SYS_REBOOT_COLD);
   2e486:	2001      	movs	r0, #1
{
   2e488:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_COLD);
   2e48a:	f7df fe27 	bl	e0dc <sys_reboot>

0002e48e <z_log_msg_static_create>:
   2e48e:	f7e0 b9c5 	b.w	e81c <z_impl_z_log_msg_static_create>

0002e492 <on_received>:
{
   2e492:	4610      	mov	r0, r2
	if (length > 0) {
   2e494:	4619      	mov	r1, r3
{
   2e496:	b508      	push	{r3, lr}
	if (length > 0) {
   2e498:	b10b      	cbz	r3, 2e49e <on_received+0xc>
   2e49a:	f7dd fcbd 	bl	be18 <on_received.part.0>
}
   2e49e:	2001      	movs	r0, #1
   2e4a0:	bd08      	pop	{r3, pc}

0002e4a2 <cbpprintf_external>:
{
   2e4a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e4a6:	4606      	mov	r6, r0
   2e4a8:	460d      	mov	r5, r1
   2e4aa:	4617      	mov	r7, r2
	if (buf == NULL) {
   2e4ac:	4698      	mov	r8, r3
   2e4ae:	b32b      	cbz	r3, 2e4fc <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2e4b0:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2e4b4:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2e4b8:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2e4bc:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2e4be:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2e4c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2e4c4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2e4c8:	441c      	add	r4, r3
   2e4ca:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2e4cc:	45ca      	cmp	sl, r9
   2e4ce:	d309      	bcc.n	2e4e4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2e4d0:	4639      	mov	r1, r7
   2e4d2:	4630      	mov	r0, r6
   2e4d4:	46ac      	mov	ip, r5
   2e4d6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2e4da:	f108 0308 	add.w	r3, r8, #8
}
   2e4de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2e4e2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2e4e4:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2e4e8:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2e4ec:	4620      	mov	r0, r4
		*ps = s;
   2e4ee:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2e4f2:	f7da ff12 	bl	931a <strlen>
   2e4f6:	3001      	adds	r0, #1
   2e4f8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2e4fa:	e7e7      	b.n	2e4cc <cbpprintf_external+0x2a>
}
   2e4fc:	f06f 0015 	mvn.w	r0, #21
   2e500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e504 <is_ptr>:
{
   2e504:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2e506:	2500      	movs	r5, #0
{
   2e508:	4602      	mov	r2, r0
	bool mod = false;
   2e50a:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2e50c:	4614      	mov	r4, r2
   2e50e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e512:	b90b      	cbnz	r3, 2e518 <is_ptr+0x14>
					return false;
   2e514:	4618      	mov	r0, r3
   2e516:	e009      	b.n	2e52c <is_ptr+0x28>
		if (mod) {
   2e518:	b198      	cbz	r0, 2e542 <is_ptr+0x3e>
			if (cnt == n) {
   2e51a:	428d      	cmp	r5, r1
   2e51c:	d107      	bne.n	2e52e <is_ptr+0x2a>
				if (c == 'p') {
   2e51e:	2b70      	cmp	r3, #112	; 0x70
   2e520:	d004      	beq.n	2e52c <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2e522:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2e526:	2a3a      	cmp	r2, #58	; 0x3a
   2e528:	d80b      	bhi.n	2e542 <is_ptr+0x3e>
					return false;
   2e52a:	2000      	movs	r0, #0
}
   2e52c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2e52e:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2e532:	2e3a      	cmp	r6, #58	; 0x3a
   2e534:	d805      	bhi.n	2e542 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2e536:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2e538:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2e53a:	1c94      	adds	r4, r2, #2
   2e53c:	2b00      	cmp	r3, #0
   2e53e:	d0e9      	beq.n	2e514 <is_ptr+0x10>
   2e540:	2000      	movs	r0, #0
		if (c == '%') {
   2e542:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2e544:	4622      	mov	r2, r4
			mod = !mod;
   2e546:	bf08      	it	eq
   2e548:	f080 0001 	eoreq.w	r0, r0, #1
   2e54c:	e7de      	b.n	2e50c <is_ptr+0x8>

0002e54e <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2e54e:	b40c      	push	{r2, r3}
   2e550:	4603      	mov	r3, r0
   2e552:	b507      	push	{r0, r1, r2, lr}
   2e554:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   2e556:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   2e558:	f240 1105 	movw	r1, #261	; 0x105
   2e55c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2e55e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2e560:	4798      	blx	r3
	va_end(args);

	return res;
}
   2e562:	b003      	add	sp, #12
   2e564:	f85d eb04 	ldr.w	lr, [sp], #4
   2e568:	b002      	add	sp, #8
   2e56a:	4770      	bx	lr

0002e56c <arch_printk_char_out>:
}
   2e56c:	2000      	movs	r0, #0
   2e56e:	4770      	bx	lr

0002e570 <str_out>:
{
   2e570:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2e572:	688a      	ldr	r2, [r1, #8]
   2e574:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2e576:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2e578:	b114      	cbz	r4, 2e580 <str_out+0x10>
   2e57a:	684b      	ldr	r3, [r1, #4]
   2e57c:	4293      	cmp	r3, r2
   2e57e:	dc01      	bgt.n	2e584 <str_out+0x14>
		ctx->count++;
   2e580:	608d      	str	r5, [r1, #8]
}
   2e582:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2e584:	3b01      	subs	r3, #1
   2e586:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2e588:	bf08      	it	eq
   2e58a:	2200      	moveq	r2, #0
   2e58c:	608d      	str	r5, [r1, #8]
   2e58e:	bf0c      	ite	eq
   2e590:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2e592:	54a0      	strbne	r0, [r4, r2]
   2e594:	e7f5      	b.n	2e582 <str_out+0x12>

0002e596 <vprintk>:
		z_log_vprintk(fmt, ap);
   2e596:	f000 bb23 	b.w	2ebe0 <z_log_vprintk>

0002e59a <printk>:
{
   2e59a:	b40f      	push	{r0, r1, r2, r3}
   2e59c:	b507      	push	{r0, r1, r2, lr}
   2e59e:	a904      	add	r1, sp, #16
   2e5a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2e5a4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2e5a6:	f000 fb1b 	bl	2ebe0 <z_log_vprintk>
}
   2e5aa:	b003      	add	sp, #12
   2e5ac:	f85d eb04 	ldr.w	lr, [sp], #4
   2e5b0:	b004      	add	sp, #16
   2e5b2:	4770      	bx	lr

0002e5b4 <snprintk>:
{
   2e5b4:	b40c      	push	{r2, r3}
   2e5b6:	b507      	push	{r0, r1, r2, lr}
   2e5b8:	ab04      	add	r3, sp, #16
   2e5ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2e5be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2e5c0:	f7de fa36 	bl	ca30 <vsnprintk>
}
   2e5c4:	b003      	add	sp, #12
   2e5c6:	f85d eb04 	ldr.w	lr, [sp], #4
   2e5ca:	b002      	add	sp, #8
   2e5cc:	4770      	bx	lr

0002e5ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2e5ce:	4604      	mov	r4, r0
   2e5d0:	b508      	push	{r3, lr}
   2e5d2:	4608      	mov	r0, r1
   2e5d4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2e5d6:	461a      	mov	r2, r3
   2e5d8:	47a0      	blx	r4
	return z_impl_z_current_get();
   2e5da:	f7fc fa3b 	bl	2aa54 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2e5de:	f7e2 fc0b 	bl	10df8 <z_impl_k_thread_abort>

0002e5e2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2e5e2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2e5e6:	8840      	ldrh	r0, [r0, #2]
}
   2e5e8:	0840      	lsrs	r0, r0, #1
   2e5ea:	4770      	bx	lr

0002e5ec <free_list_add>:
{
   2e5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e5ee:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e5f0:	f7ff fff7 	bl	2e5e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2e5f4:	fab0 f080 	clz	r0, r0
   2e5f8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2e5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2e600:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2e604:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2e606:	1d17      	adds	r7, r2, #4
{
   2e608:	460c      	mov	r4, r1
   2e60a:	3206      	adds	r2, #6
   2e60c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2e60e:	b956      	cbnz	r6, 2e626 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2e610:	2101      	movs	r1, #1
   2e612:	fa01 f000 	lsl.w	r0, r1, r0
   2e616:	68d9      	ldr	r1, [r3, #12]
   2e618:	4301      	orrs	r1, r0
   2e61a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2e61c:	f8cc 4010 	str.w	r4, [ip, #16]
   2e620:	53dd      	strh	r5, [r3, r7]
   2e622:	529d      	strh	r5, [r3, r2]
}
   2e624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2e626:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2e628:	3104      	adds	r1, #4
   2e62a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2e62c:	53d8      	strh	r0, [r3, r7]
   2e62e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2e632:	529e      	strh	r6, [r3, r2]
   2e634:	80c5      	strh	r5, [r0, #6]
   2e636:	525d      	strh	r5, [r3, r1]
   2e638:	e7f4      	b.n	2e624 <free_list_add+0x38>

0002e63a <free_list_remove_bidx>:
{
   2e63a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2e63c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2e640:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2e642:	4299      	cmp	r1, r3
   2e644:	f102 0104 	add.w	r1, r2, #4
   2e648:	d10a      	bne.n	2e660 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2e64a:	2301      	movs	r3, #1
   2e64c:	fa03 f202 	lsl.w	r2, r3, r2
   2e650:	68c3      	ldr	r3, [r0, #12]
   2e652:	ea23 0302 	bic.w	r3, r3, r2
   2e656:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2e658:	2300      	movs	r3, #0
   2e65a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2e65e:	bd10      	pop	{r4, pc}
   2e660:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2e662:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2e666:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2e66a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2e66e:	80cb      	strh	r3, [r1, #6]
   2e670:	8082      	strh	r2, [r0, #4]
}
   2e672:	e7f4      	b.n	2e65e <free_list_remove_bidx+0x24>

0002e674 <free_list_remove>:
{
   2e674:	b508      	push	{r3, lr}
   2e676:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2e678:	f7ff ffb3 	bl	2e5e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2e67c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2e680:	4618      	mov	r0, r3
}
   2e682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2e686:	f1c2 021f 	rsb	r2, r2, #31
   2e68a:	f7ff bfd6 	b.w	2e63a <free_list_remove_bidx>

0002e68e <alloc_chunk>:
{
   2e68e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e692:	fab1 f581 	clz	r5, r1
   2e696:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2e69a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2e69e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2e6a2:	4603      	mov	r3, r0
   2e6a4:	460e      	mov	r6, r1
	if (b->next) {
   2e6a6:	b1c2      	cbz	r2, 2e6da <alloc_chunk+0x4c>
   2e6a8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2e6aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2e6ae:	4618      	mov	r0, r3
   2e6b0:	4621      	mov	r1, r4
   2e6b2:	f7ff ff96 	bl	2e5e2 <chunk_size>
   2e6b6:	42b0      	cmp	r0, r6
   2e6b8:	d306      	bcc.n	2e6c8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2e6ba:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2e6bc:	4618      	mov	r0, r3
   2e6be:	f7ff ffbc 	bl	2e63a <free_list_remove_bidx>
}
   2e6c2:	4620      	mov	r0, r4
   2e6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2e6c8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2e6cc:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2e6ce:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2e6d0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2e6d4:	d001      	beq.n	2e6da <alloc_chunk+0x4c>
   2e6d6:	4282      	cmp	r2, r0
   2e6d8:	d1e7      	bne.n	2e6aa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2e6da:	f04f 34ff 	mov.w	r4, #4294967295
   2e6de:	f1c5 0220 	rsb	r2, r5, #32
   2e6e2:	4094      	lsls	r4, r2
   2e6e4:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2e6e6:	4014      	ands	r4, r2
   2e6e8:	d0eb      	beq.n	2e6c2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2e6ea:	fa94 f2a4 	rbit	r2, r4
   2e6ee:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2e6f2:	1d11      	adds	r1, r2, #4
   2e6f4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2e6f8:	4621      	mov	r1, r4
   2e6fa:	e7df      	b.n	2e6bc <alloc_chunk+0x2e>

0002e6fc <merge_chunks>:
{
   2e6fc:	b538      	push	{r3, r4, r5, lr}
   2e6fe:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2e700:	f7ff ff6f 	bl	2e5e2 <chunk_size>
{
   2e704:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2e706:	4604      	mov	r4, r0
   2e708:	4611      	mov	r1, r2
   2e70a:	4618      	mov	r0, r3
   2e70c:	f7ff ff69 	bl	2e5e2 <chunk_size>
   2e710:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2e712:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2e714:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2e718:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2e71a:	4618      	mov	r0, r3
   2e71c:	f7ff ff61 	bl	2e5e2 <chunk_size>
	void *cmem = &buf[c];
   2e720:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2e722:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2e726:	bd38      	pop	{r3, r4, r5, pc}

0002e728 <split_chunks>:
{
   2e728:	b538      	push	{r3, r4, r5, lr}
   2e72a:	460c      	mov	r4, r1
   2e72c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2e72e:	f7ff ff58 	bl	2e5e2 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2e732:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2e734:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2e736:	4405      	add	r5, r0
   2e738:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2e73c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2e73e:	8060      	strh	r0, [r4, #2]
   2e740:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2e744:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2e746:	8044      	strh	r4, [r0, #2]
   2e748:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2e74c:	4618      	mov	r0, r3
   2e74e:	4611      	mov	r1, r2
   2e750:	f7ff ff47 	bl	2e5e2 <chunk_size>
	void *cmem = &buf[c];
   2e754:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2e756:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2e75a:	bd38      	pop	{r3, r4, r5, pc}

0002e75c <free_chunk>:
{
   2e75c:	b538      	push	{r3, r4, r5, lr}
   2e75e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2e760:	f7ff ff3f 	bl	2e5e2 <chunk_size>
   2e764:	460c      	mov	r4, r1
   2e766:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2e768:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2e76c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2e76e:	07da      	lsls	r2, r3, #31
   2e770:	d40a      	bmi.n	2e788 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2e772:	4628      	mov	r0, r5
   2e774:	f7ff ff7e 	bl	2e674 <free_list_remove>
	return c + chunk_size(h, c);
   2e778:	4621      	mov	r1, r4
   2e77a:	4628      	mov	r0, r5
   2e77c:	f7ff ff31 	bl	2e5e2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2e780:	1822      	adds	r2, r4, r0
   2e782:	4628      	mov	r0, r5
   2e784:	f7ff ffba 	bl	2e6fc <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2e788:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2e78c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2e78e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2e792:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2e794:	07db      	lsls	r3, r3, #31
   2e796:	d40c      	bmi.n	2e7b2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2e798:	4628      	mov	r0, r5
   2e79a:	f7ff ff6b 	bl	2e674 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2e79e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2e7a2:	4622      	mov	r2, r4
   2e7a4:	1a61      	subs	r1, r4, r1
   2e7a6:	4628      	mov	r0, r5
   2e7a8:	f7ff ffa8 	bl	2e6fc <merge_chunks>
   2e7ac:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2e7b0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2e7b2:	4621      	mov	r1, r4
   2e7b4:	4628      	mov	r0, r5
}
   2e7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2e7ba:	f7ff bf17 	b.w	2e5ec <free_list_add>

0002e7be <sys_heap_alloc>:
{
   2e7be:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2e7c0:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2e7c2:	b909      	cbnz	r1, 2e7c8 <sys_heap_alloc+0xa>
		return NULL;
   2e7c4:	2000      	movs	r0, #0
}
   2e7c6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2e7c8:	68ab      	ldr	r3, [r5, #8]
   2e7ca:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2e7ce:	d9f9      	bls.n	2e7c4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2e7d0:	310b      	adds	r1, #11
   2e7d2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2e7d4:	4621      	mov	r1, r4
   2e7d6:	4628      	mov	r0, r5
   2e7d8:	f7ff ff59 	bl	2e68e <alloc_chunk>
	if (c == 0U) {
   2e7dc:	4606      	mov	r6, r0
   2e7de:	2800      	cmp	r0, #0
   2e7e0:	d0f0      	beq.n	2e7c4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2e7e2:	4601      	mov	r1, r0
   2e7e4:	4628      	mov	r0, r5
   2e7e6:	f7ff fefc 	bl	2e5e2 <chunk_size>
   2e7ea:	42a0      	cmp	r0, r4
   2e7ec:	d907      	bls.n	2e7fe <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2e7ee:	4628      	mov	r0, r5
   2e7f0:	1932      	adds	r2, r6, r4
   2e7f2:	f7ff ff99 	bl	2e728 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2e7f6:	4611      	mov	r1, r2
   2e7f8:	4628      	mov	r0, r5
   2e7fa:	f7ff fef7 	bl	2e5ec <free_list_add>
	void *cmem = &buf[c];
   2e7fe:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2e802:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2e804:	8853      	ldrh	r3, [r2, #2]
   2e806:	3004      	adds	r0, #4
   2e808:	f043 0301 	orr.w	r3, r3, #1
   2e80c:	8053      	strh	r3, [r2, #2]
	return mem;
   2e80e:	e7da      	b.n	2e7c6 <sys_heap_alloc+0x8>

0002e810 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e810:	2200      	movs	r2, #0
	return list->head;
   2e812:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e814:	b90b      	cbnz	r3, 2e81a <sys_slist_find_and_remove+0xa>
   2e816:	4618      	mov	r0, r3
   2e818:	4770      	bx	lr
   2e81a:	428b      	cmp	r3, r1
   2e81c:	d110      	bne.n	2e840 <sys_slist_find_and_remove+0x30>
	return node->next;
   2e81e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e820:	b942      	cbnz	r2, 2e834 <sys_slist_find_and_remove+0x24>
   2e822:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2e824:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e826:	4291      	cmp	r1, r2
   2e828:	d100      	bne.n	2e82c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2e82a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2e82c:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e82e:	2001      	movs	r0, #1
	parent->next = child;
   2e830:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e832:	4770      	bx	lr
	parent->next = child;
   2e834:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e836:	6843      	ldr	r3, [r0, #4]
   2e838:	4299      	cmp	r1, r3
	list->tail = node;
   2e83a:	bf08      	it	eq
   2e83c:	6042      	streq	r2, [r0, #4]
}
   2e83e:	e7f5      	b.n	2e82c <sys_slist_find_and_remove+0x1c>
	return node->next;
   2e840:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e842:	681b      	ldr	r3, [r3, #0]
   2e844:	e7e6      	b.n	2e814 <sys_slist_find_and_remove+0x4>

0002e846 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2e846:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2e848:	f013 0307 	ands.w	r3, r3, #7
   2e84c:	d105      	bne.n	2e85a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2e84e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2e850:	2b00      	cmp	r3, #0
   2e852:	bf0c      	ite	eq
   2e854:	2000      	moveq	r0, #0
   2e856:	2003      	movne	r0, #3
   2e858:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2e85a:	2b02      	cmp	r3, #2
   2e85c:	d105      	bne.n	2e86a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2e85e:	8bc0      	ldrh	r0, [r0, #30]
   2e860:	fab0 f080 	clz	r0, r0
   2e864:	0940      	lsrs	r0, r0, #5
   2e866:	0080      	lsls	r0, r0, #2
   2e868:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2e86a:	2b01      	cmp	r3, #1
   2e86c:	d105      	bne.n	2e87a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2e86e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2e870:	2b00      	cmp	r3, #0
   2e872:	bf0c      	ite	eq
   2e874:	2000      	moveq	r0, #0
   2e876:	2005      	movne	r0, #5
   2e878:	4770      	bx	lr
	int evt = EVT_NOP;
   2e87a:	2000      	movs	r0, #0
}
   2e87c:	4770      	bx	lr

0002e87e <validate_args>:
{
   2e87e:	b510      	push	{r4, lr}
   2e880:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2e882:	b100      	cbz	r0, 2e886 <validate_args+0x8>
   2e884:	b911      	cbnz	r1, 2e88c <validate_args+0xe>
		return -EINVAL;
   2e886:	f06f 0015 	mvn.w	r0, #21
}
   2e88a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2e88c:	1d08      	adds	r0, r1, #4
   2e88e:	f000 f82f 	bl	2e8f0 <sys_notify_validate>
	if ((rv == 0)
   2e892:	2800      	cmp	r0, #0
   2e894:	d1f9      	bne.n	2e88a <validate_args+0xc>
	    && ((cli->notify.flags
   2e896:	68a3      	ldr	r3, [r4, #8]
   2e898:	2b03      	cmp	r3, #3
   2e89a:	d9f6      	bls.n	2e88a <validate_args+0xc>
   2e89c:	e7f3      	b.n	2e886 <validate_args+0x8>

0002e89e <notify_one>:
{
   2e89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e8a2:	460d      	mov	r5, r1
   2e8a4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2e8a6:	4619      	mov	r1, r3
   2e8a8:	1d28      	adds	r0, r5, #4
{
   2e8aa:	4690      	mov	r8, r2
   2e8ac:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2e8ae:	f7de fd9d 	bl	d3ec <sys_notify_finalize>
	if (cb) {
   2e8b2:	4604      	mov	r4, r0
   2e8b4:	b138      	cbz	r0, 2e8c6 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2e8b6:	4633      	mov	r3, r6
   2e8b8:	4642      	mov	r2, r8
   2e8ba:	4629      	mov	r1, r5
   2e8bc:	4638      	mov	r0, r7
   2e8be:	46a4      	mov	ip, r4
}
   2e8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2e8c4:	4760      	bx	ip
}
   2e8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e8ca <onoff_manager_init>:
{
   2e8ca:	b538      	push	{r3, r4, r5, lr}
   2e8cc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2e8ce:	4605      	mov	r5, r0
   2e8d0:	b158      	cbz	r0, 2e8ea <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2e8d2:	b151      	cbz	r1, 2e8ea <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2e8d4:	680b      	ldr	r3, [r1, #0]
   2e8d6:	b143      	cbz	r3, 2e8ea <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2e8d8:	684b      	ldr	r3, [r1, #4]
   2e8da:	b133      	cbz	r3, 2e8ea <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2e8dc:	2220      	movs	r2, #32
   2e8de:	2100      	movs	r1, #0
   2e8e0:	f006 fba4 	bl	3502c <memset>
	return 0;
   2e8e4:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2e8e6:	612c      	str	r4, [r5, #16]
}
   2e8e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e8ea:	f06f 0015 	mvn.w	r0, #21
   2e8ee:	e7fb      	b.n	2e8e8 <onoff_manager_init+0x1e>

0002e8f0 <sys_notify_validate>:
	if (notify == NULL) {
   2e8f0:	4603      	mov	r3, r0
   2e8f2:	b140      	cbz	r0, 2e906 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2e8f4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2e8f6:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2e8fa:	2a02      	cmp	r2, #2
   2e8fc:	d006      	beq.n	2e90c <sys_notify_validate+0x1c>
   2e8fe:	2a03      	cmp	r2, #3
   2e900:	d004      	beq.n	2e90c <sys_notify_validate+0x1c>
   2e902:	2a01      	cmp	r2, #1
   2e904:	d005      	beq.n	2e912 <sys_notify_validate+0x22>
   2e906:	f06f 0015 	mvn.w	r0, #21
}
   2e90a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2e90c:	681a      	ldr	r2, [r3, #0]
   2e90e:	2a00      	cmp	r2, #0
   2e910:	d0f9      	beq.n	2e906 <sys_notify_validate+0x16>
		notify->result = 0;
   2e912:	2000      	movs	r0, #0
   2e914:	6098      	str	r0, [r3, #8]
   2e916:	4770      	bx	lr

0002e918 <outs>:
{
   2e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e91c:	4607      	mov	r7, r0
   2e91e:	4688      	mov	r8, r1
   2e920:	4615      	mov	r5, r2
   2e922:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2e924:	4614      	mov	r4, r2
   2e926:	42b4      	cmp	r4, r6
   2e928:	d305      	bcc.n	2e936 <outs+0x1e>
   2e92a:	b10e      	cbz	r6, 2e930 <outs+0x18>
	return (int)count;
   2e92c:	1b60      	subs	r0, r4, r5
   2e92e:	e008      	b.n	2e942 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2e930:	7823      	ldrb	r3, [r4, #0]
   2e932:	2b00      	cmp	r3, #0
   2e934:	d0fa      	beq.n	2e92c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2e936:	4641      	mov	r1, r8
   2e938:	f814 0b01 	ldrb.w	r0, [r4], #1
   2e93c:	47b8      	blx	r7
		if (rc < 0) {
   2e93e:	2800      	cmp	r0, #0
   2e940:	daf1      	bge.n	2e926 <outs+0xe>
}
   2e942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e946 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2e946:	4040      	eors	r0, r0
   2e948:	f380 8811 	msr	BASEPRI, r0
   2e94c:	f04f 0004 	mov.w	r0, #4
   2e950:	df02      	svc	2
}
   2e952:	4770      	bx	lr

0002e954 <assert_print>:

void assert_print(const char *fmt, ...)
{
   2e954:	b40f      	push	{r0, r1, r2, r3}
   2e956:	b507      	push	{r0, r1, r2, lr}
   2e958:	a904      	add	r1, sp, #16
   2e95a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2e95e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2e960:	f7ff fe19 	bl	2e596 <vprintk>

	va_end(ap);
}
   2e964:	b003      	add	sp, #12
   2e966:	f85d eb04 	ldr.w	lr, [sp], #4
   2e96a:	b004      	add	sp, #16
   2e96c:	4770      	bx	lr

0002e96e <free_space>:
{
   2e96e:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   2e970:	6903      	ldr	r3, [r0, #16]
{
   2e972:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2e974:	f013 0008 	ands.w	r0, r3, #8
   2e978:	d109      	bne.n	2e98e <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2e97a:	6813      	ldr	r3, [r2, #0]
   2e97c:	68d4      	ldr	r4, [r2, #12]
   2e97e:	429c      	cmp	r4, r3
	return true;
   2e980:	bf9b      	ittet	ls
   2e982:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   2e984:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2e986:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2e988:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2e98a:	600b      	str	r3, [r1, #0]
}
   2e98c:	bd10      	pop	{r4, pc}
   2e98e:	2300      	movs	r3, #0
		return false;
   2e990:	4618      	mov	r0, r3
   2e992:	e7fa      	b.n	2e98a <free_space+0x1c>

0002e994 <get_usage>:
{
   2e994:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2e996:	a901      	add	r1, sp, #4
{
   2e998:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2e99a:	f7ff ffe8 	bl	2e96e <free_space>
   2e99e:	b120      	cbz	r0, 2e9aa <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2e9a0:	9b01      	ldr	r3, [sp, #4]
   2e9a2:	68e2      	ldr	r2, [r4, #12]
   2e9a4:	3b01      	subs	r3, #1
   2e9a6:	4413      	add	r3, r2
   2e9a8:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2e9aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2e9ac:	9b01      	ldr	r3, [sp, #4]
   2e9ae:	1ac0      	subs	r0, r0, r3
}
   2e9b0:	3801      	subs	r0, #1
   2e9b2:	b002      	add	sp, #8
   2e9b4:	bd10      	pop	{r4, pc}

0002e9b6 <idx_inc>:
{
   2e9b6:	b510      	push	{r4, lr}
   2e9b8:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2e9ba:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2e9bc:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2e9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2e9c0:	07d2      	lsls	r2, r2, #31
   2e9c2:	d502      	bpl.n	2e9ca <idx_inc+0x14>
		return i & (buffer->size - 1);
   2e9c4:	3b01      	subs	r3, #1
   2e9c6:	4018      	ands	r0, r3
}
   2e9c8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2e9ca:	4298      	cmp	r0, r3
   2e9cc:	bf28      	it	cs
   2e9ce:	1ac0      	subcs	r0, r0, r3
   2e9d0:	e7fa      	b.n	2e9c8 <idx_inc+0x12>

0002e9d2 <rd_idx_inc>:
{
   2e9d2:	b510      	push	{r4, lr}
   2e9d4:	4604      	mov	r4, r0
   2e9d6:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2e9d8:	68c1      	ldr	r1, [r0, #12]
   2e9da:	f7ff ffec 	bl	2e9b6 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2e9de:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2e9e0:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2e9e2:	f023 0308 	bic.w	r3, r3, #8
   2e9e6:	6123      	str	r3, [r4, #16]
}
   2e9e8:	bd10      	pop	{r4, pc}

0002e9ea <add_skip_item>:
{
   2e9ea:	b538      	push	{r3, r4, r5, lr}
   2e9ec:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2e9ee:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2e9f0:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2e9f2:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2e9f4:	f043 0302 	orr.w	r3, r3, #2
{
   2e9f8:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2e9fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2e9fe:	6801      	ldr	r1, [r0, #0]
   2ea00:	462a      	mov	r2, r5
   2ea02:	f7ff ffd8 	bl	2e9b6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ea06:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ea08:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ea0a:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2ea0c:	bf08      	it	eq
   2ea0e:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2ea10:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2ea12:	bf08      	it	eq
   2ea14:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ea18:	462a      	mov	r2, r5
   2ea1a:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   2ea1c:	bf08      	it	eq
   2ea1e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ea20:	f7ff ffc9 	bl	2e9b6 <idx_inc>
   2ea24:	6060      	str	r0, [r4, #4]
}
   2ea26:	bd38      	pop	{r3, r4, r5, pc}

0002ea28 <drop_item_locked>:
{
   2ea28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2ea2c:	68c7      	ldr	r7, [r0, #12]
   2ea2e:	6a06      	ldr	r6, [r0, #32]
{
   2ea30:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2ea32:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   2ea36:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2ea38:	f003 0303 	and.w	r3, r3, #3
   2ea3c:	2b02      	cmp	r3, #2
{
   2ea3e:	4688      	mov	r8, r1
   2ea40:	4691      	mov	r9, r2
   2ea42:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2ea46:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2ea4a:	d009      	beq.n	2ea60 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   2ea4c:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2ea4e:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2ea52:	6923      	ldr	r3, [r4, #16]
   2ea54:	0799      	lsls	r1, r3, #30
   2ea56:	d410      	bmi.n	2ea7a <drop_item_locked+0x52>
		return false;
   2ea58:	2000      	movs	r0, #0
}
   2ea5a:	b003      	add	sp, #12
   2ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2ea60:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2ea64:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2ea66:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2ea68:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2ea6c:	d0f1      	beq.n	2ea52 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2ea6e:	f7ff ffb0 	bl	2e9d2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2ea72:	68e3      	ldr	r3, [r4, #12]
   2ea74:	60a3      	str	r3, [r4, #8]
		return true;
   2ea76:	2001      	movs	r0, #1
   2ea78:	e7ef      	b.n	2ea5a <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2ea7a:	69e3      	ldr	r3, [r4, #28]
   2ea7c:	4650      	mov	r0, sl
   2ea7e:	4798      	blx	r3
	return item->hdr.valid;
   2ea80:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   2ea84:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2ea86:	07da      	lsls	r2, r3, #31
   2ea88:	d5e6      	bpl.n	2ea58 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2ea8a:	f013 0302 	ands.w	r3, r3, #2
   2ea8e:	d01d      	beq.n	2eacc <drop_item_locked+0xa4>
		if (free_wlen) {
   2ea90:	f1b8 0f00 	cmp.w	r8, #0
   2ea94:	d003      	beq.n	2ea9e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2ea96:	4641      	mov	r1, r8
   2ea98:	4620      	mov	r0, r4
   2ea9a:	f7ff ffa6 	bl	2e9ea <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2ea9e:	6861      	ldr	r1, [r4, #4]
   2eaa0:	462a      	mov	r2, r5
   2eaa2:	4620      	mov	r0, r4
   2eaa4:	f7ff ff87 	bl	2e9b6 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2eaa8:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2eaac:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2eaae:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2eab0:	d104      	bne.n	2eabc <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2eab2:	462a      	mov	r2, r5
   2eab4:	4620      	mov	r0, r4
   2eab6:	f7ff ff7e 	bl	2e9b6 <idx_inc>
   2eaba:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2eabc:	68a3      	ldr	r3, [r4, #8]
   2eabe:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2eac0:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2eac2:	6923      	ldr	r3, [r4, #16]
   2eac4:	f043 0308 	orr.w	r3, r3, #8
   2eac8:	6123      	str	r3, [r4, #16]
   2eaca:	e7d4      	b.n	2ea76 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2eacc:	4601      	mov	r1, r0
   2eace:	4620      	mov	r0, r4
   2ead0:	9301      	str	r3, [sp, #4]
   2ead2:	f7ff ff7e 	bl	2e9d2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2ead6:	68e2      	ldr	r2, [r4, #12]
   2ead8:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2eada:	f1b8 0f00 	cmp.w	r8, #0
   2eade:	d004      	beq.n	2eaea <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2eae0:	6821      	ldr	r1, [r4, #0]
   2eae2:	6a22      	ldr	r2, [r4, #32]
   2eae4:	9b01      	ldr	r3, [sp, #4]
   2eae6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2eaea:	eb05 0208 	add.w	r2, r5, r8
   2eaee:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2eaf2:	6821      	ldr	r1, [r4, #0]
   2eaf4:	4620      	mov	r0, r4
   2eaf6:	f7ff ff5e 	bl	2e9b6 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2eafa:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2eafc:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2eafe:	f043 0308 	orr.w	r3, r3, #8
   2eb02:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   2eb04:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2eb08:	f36f 0300 	bfc	r3, #0, #1
   2eb0c:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   2eb10:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2eb14:	e7af      	b.n	2ea76 <drop_item_locked+0x4e>

0002eb16 <post_drop_action>:
{
   2eb16:	b570      	push	{r4, r5, r6, lr}
   2eb18:	4604      	mov	r4, r0
   2eb1a:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   2eb1c:	f7ff ff4b 	bl	2e9b6 <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2eb20:	6823      	ldr	r3, [r4, #0]
   2eb22:	4283      	cmp	r3, r0
   2eb24:	d105      	bne.n	2eb32 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   2eb26:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2eb28:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2eb2a:	f023 0308 	bic.w	r3, r3, #8
   2eb2e:	6123      	str	r3, [r4, #16]
}
   2eb30:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2eb32:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   2eb34:	00ab      	lsls	r3, r5, #2
   2eb36:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2eb3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2eb3e:	6861      	ldr	r1, [r4, #4]
   2eb40:	462a      	mov	r2, r5
   2eb42:	4620      	mov	r0, r4
   2eb44:	f7ff ff37 	bl	2e9b6 <idx_inc>
   2eb48:	6060      	str	r0, [r4, #4]
   2eb4a:	e7f1      	b.n	2eb30 <post_drop_action+0x1a>

0002eb4c <max_utilization_update>:
{
   2eb4c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2eb4e:	6903      	ldr	r3, [r0, #16]
{
   2eb50:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2eb52:	075b      	lsls	r3, r3, #29
   2eb54:	d506      	bpl.n	2eb64 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2eb56:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2eb58:	f7ff ff1c 	bl	2e994 <get_usage>
   2eb5c:	4285      	cmp	r5, r0
   2eb5e:	bf2c      	ite	cs
   2eb60:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2eb62:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2eb64:	bd38      	pop	{r3, r4, r5, pc}

0002eb66 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2eb66:	6902      	ldr	r2, [r0, #16]
   2eb68:	6883      	ldr	r3, [r0, #8]
   2eb6a:	0712      	lsls	r2, r2, #28
   2eb6c:	d402      	bmi.n	2eb74 <mpsc_pbuf_is_pending+0xe>
   2eb6e:	6842      	ldr	r2, [r0, #4]
   2eb70:	429a      	cmp	r2, r3
   2eb72:	d200      	bcs.n	2eb76 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2eb74:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2eb76:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2eb78:	1e18      	subs	r0, r3, #0
   2eb7a:	bf18      	it	ne
   2eb7c:	2001      	movne	r0, #1
   2eb7e:	4770      	bx	lr

0002eb80 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2eb80:	4770      	bx	lr

0002eb82 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2eb82:	2806      	cmp	r0, #6
   2eb84:	d108      	bne.n	2eb98 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2eb86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2eb8a:	2201      	movs	r2, #1
   2eb8c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2eb90:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2eb94:	bf20      	wfe
    while (true)
   2eb96:	e7fd      	b.n	2eb94 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2eb98:	4770      	bx	lr

0002eb9a <pm_state_exit_post_ops>:
   2eb9a:	2300      	movs	r3, #0
   2eb9c:	f383 8811 	msr	BASEPRI, r3
   2eba0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2eba4:	4770      	bx	lr

0002eba6 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2eba6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2eba8:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2ebaa:	bf5f      	itttt	pl
   2ebac:	6803      	ldrpl	r3, [r0, #0]
   2ebae:	8842      	ldrhpl	r2, [r0, #2]
   2ebb0:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2ebb4:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2ebb8:	bf5d      	ittte	pl
   2ebba:	3017      	addpl	r0, #23
   2ebbc:	f020 0007 	bicpl.w	r0, r0, #7
   2ebc0:	0880      	lsrpl	r0, r0, #2
	return 0;
   2ebc2:	2000      	movmi	r0, #0
}
   2ebc4:	4770      	bx	lr

0002ebc6 <dummy_timestamp>:
}
   2ebc6:	2000      	movs	r0, #0
   2ebc8:	4770      	bx	lr

0002ebca <default_get_timestamp>:
   2ebca:	f003 bfef 	b.w	32bac <sys_clock_cycle_get_32>

0002ebce <atomic_inc>:
{
   2ebce:	4603      	mov	r3, r0
}
   2ebd0:	e8d3 0fef 	ldaex	r0, [r3]
   2ebd4:	1c42      	adds	r2, r0, #1
   2ebd6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2ebda:	2900      	cmp	r1, #0
   2ebdc:	d1f8      	bne.n	2ebd0 <atomic_inc+0x2>
   2ebde:	4770      	bx	lr

0002ebe0 <z_log_vprintk>:
{
   2ebe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2ebe2:	2300      	movs	r3, #0
   2ebe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2ebe8:	461a      	mov	r2, r3
   2ebea:	4619      	mov	r1, r3
   2ebec:	4618      	mov	r0, r3
   2ebee:	e9cd 3300 	strd	r3, r3, [sp]
   2ebf2:	f7df fea7 	bl	e944 <z_impl_z_log_msg_runtime_vcreate>
}
   2ebf6:	b005      	add	sp, #20
   2ebf8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebfc <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2ebfc:	2001      	movs	r0, #1
   2ebfe:	f7df bb9f 	b.w	e340 <z_log_dropped>

0002ec02 <z_log_get_tag>:
}
   2ec02:	2000      	movs	r0, #0
   2ec04:	4770      	bx	lr

0002ec06 <z_cbprintf_cpy>:
{
   2ec06:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2ec08:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2ec0c:	1b9b      	subs	r3, r3, r6
   2ec0e:	428b      	cmp	r3, r1
{
   2ec10:	460c      	mov	r4, r1
   2ec12:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2ec14:	d30a      	bcc.n	2ec2c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2ec16:	6813      	ldr	r3, [r2, #0]
   2ec18:	460a      	mov	r2, r1
   2ec1a:	4601      	mov	r1, r0
   2ec1c:	1998      	adds	r0, r3, r6
   2ec1e:	f006 f9e5 	bl	34fec <memcpy>
	return len;
   2ec22:	4620      	mov	r0, r4
	desc->off += len;
   2ec24:	68ab      	ldr	r3, [r5, #8]
   2ec26:	4423      	add	r3, r4
   2ec28:	60ab      	str	r3, [r5, #8]
}
   2ec2a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2ec2c:	f06f 001b 	mvn.w	r0, #27
   2ec30:	e7fb      	b.n	2ec2a <z_cbprintf_cpy+0x24>

0002ec32 <z_log_msg_finalize>:
{
   2ec32:	b570      	push	{r4, r5, r6, lr}
   2ec34:	460e      	mov	r6, r1
   2ec36:	4615      	mov	r5, r2
   2ec38:	4619      	mov	r1, r3
	if (!msg) {
   2ec3a:	4604      	mov	r4, r0
   2ec3c:	0d12      	lsrs	r2, r2, #20
   2ec3e:	b918      	cbnz	r0, 2ec48 <z_log_msg_finalize+0x16>
}
   2ec40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2ec44:	f7df bb7c 	b.w	e340 <z_log_dropped>
	if (data) {
   2ec48:	b12b      	cbz	r3, 2ec56 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2ec4a:	3010      	adds	r0, #16
   2ec4c:	f3c5 234a 	ubfx	r3, r5, #9, #11
   2ec50:	4418      	add	r0, r3
   2ec52:	f006 f9cb 	bl	34fec <memcpy>
	msg->hdr.source = source;
   2ec56:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2ec5a:	4620      	mov	r0, r4
}
   2ec5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2ec60:	f7df bd96 	b.w	e790 <z_log_msg_commit>

0002ec64 <buffer_write>:
{
   2ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec66:	4606      	mov	r6, r0
   2ec68:	460d      	mov	r5, r1
   2ec6a:	4614      	mov	r4, r2
   2ec6c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2ec6e:	4621      	mov	r1, r4
   2ec70:	4628      	mov	r0, r5
   2ec72:	463a      	mov	r2, r7
   2ec74:	47b0      	blx	r6
	} while (len != 0);
   2ec76:	1a24      	subs	r4, r4, r0
		buf += processed;
   2ec78:	4405      	add	r5, r0
	} while (len != 0);
   2ec7a:	d1f8      	bne.n	2ec6e <buffer_write+0xa>
}
   2ec7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ec7e <cbvprintf>:
{
   2ec7e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2ec80:	2400      	movs	r4, #0
   2ec82:	9400      	str	r4, [sp, #0]
   2ec84:	f7de fc40 	bl	d508 <z_cbvprintf_impl>
}
   2ec88:	b002      	add	sp, #8
   2ec8a:	bd10      	pop	{r4, pc}

0002ec8c <log_output_flush>:
{
   2ec8c:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2ec8e:	6842      	ldr	r2, [r0, #4]
{
   2ec90:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2ec92:	e9d2 2300 	ldrd	r2, r3, [r2]
   2ec96:	6881      	ldr	r1, [r0, #8]
   2ec98:	6800      	ldr	r0, [r0, #0]
   2ec9a:	f7ff ffe3 	bl	2ec64 <buffer_write>
	output->control_block->offset = 0;
   2ec9e:	2200      	movs	r2, #0
   2eca0:	6863      	ldr	r3, [r4, #4]
   2eca2:	601a      	str	r2, [r3, #0]
}
   2eca4:	bd10      	pop	{r4, pc}

0002eca6 <cr_out_func>:
	if (c == '\n') {
   2eca6:	280a      	cmp	r0, #10
{
   2eca8:	b538      	push	{r3, r4, r5, lr}
   2ecaa:	4604      	mov	r4, r0
   2ecac:	460d      	mov	r5, r1
	if (c == '\n') {
   2ecae:	d102      	bne.n	2ecb6 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2ecb0:	200d      	movs	r0, #13
   2ecb2:	f7df fec7 	bl	ea44 <out_func>
	out_func(c, ctx);
   2ecb6:	4629      	mov	r1, r5
   2ecb8:	4620      	mov	r0, r4
   2ecba:	f7df fec3 	bl	ea44 <out_func>
}
   2ecbe:	2000      	movs	r0, #0
   2ecc0:	bd38      	pop	{r3, r4, r5, pc}

0002ecc2 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2ecc2:	f7e0 bc1d 	b.w	f500 <socket_offload_getaddrinfo>

0002ecc6 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2ecc6:	f7e0 bc41 	b.w	f54c <socket_offload_freeaddrinfo>

0002ecca <z_fdtable_call_ioctl>:
{
   2ecca:	b40c      	push	{r2, r3}
   2eccc:	4603      	mov	r3, r0
   2ecce:	b507      	push	{r0, r1, r2, lr}
   2ecd0:	aa04      	add	r2, sp, #16
   2ecd2:	4608      	mov	r0, r1
   2ecd4:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2ecd8:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2ecda:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2ecdc:	4798      	blx	r3
}
   2ecde:	b003      	add	sp, #12
   2ece0:	f85d eb04 	ldr.w	lr, [sp], #4
   2ece4:	b002      	add	sp, #8
   2ece6:	4770      	bx	lr

0002ece8 <timeout_recalc>:
{
   2ece8:	b570      	push	{r4, r5, r6, lr}
   2ecea:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2ecec:	e9d2 3200 	ldrd	r3, r2, [r2]
   2ecf0:	3301      	adds	r3, #1
   2ecf2:	f142 0200 	adc.w	r2, r2, #0
   2ecf6:	2b02      	cmp	r3, #2
   2ecf8:	f172 0200 	sbcs.w	r2, r2, #0
{
   2ecfc:	4605      	mov	r5, r0
   2ecfe:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2ed00:	d30c      	bcc.n	2ed1c <timeout_recalc+0x34>
		int64_t remaining = end - sys_clock_tick_get();
   2ed02:	f7fc fa45 	bl	2b190 <sys_clock_tick_get>
   2ed06:	1a2d      	subs	r5, r5, r0
   2ed08:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   2ed0c:	2d01      	cmp	r5, #1
   2ed0e:	f171 0300 	sbcs.w	r3, r1, #0
   2ed12:	da04      	bge.n	2ed1e <timeout_recalc+0x36>
			*timeout = K_NO_WAIT;
   2ed14:	2200      	movs	r2, #0
   2ed16:	2300      	movs	r3, #0
   2ed18:	e9c4 2300 	strd	r2, r3, [r4]
}
   2ed1c:	bd70      	pop	{r4, r5, r6, pc}
			*timeout = Z_TIMEOUT_TICKS(remaining);
   2ed1e:	e9c4 5100 	strd	r5, r1, [r4]
}
   2ed22:	e7fb      	b.n	2ed1c <timeout_recalc+0x34>

0002ed24 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2ed24:	f7f9 bdae 	b.w	28884 <z_impl_k_mutex_lock>

0002ed28 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2ed28:	f7f9 be7c 	b.w	28a24 <z_impl_k_mutex_unlock>

0002ed2c <z_impl_zsock_close>:
{
   2ed2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2ed2e:	4669      	mov	r1, sp
   2ed30:	aa01      	add	r2, sp, #4
{
   2ed32:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2ed34:	f7dd fdf0 	bl	c918 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2ed38:	4604      	mov	r4, r0
   2ed3a:	b940      	cbnz	r0, 2ed4e <z_impl_zsock_close+0x22>
		errno = EBADF;
   2ed3c:	f000 ff19 	bl	2fb72 <__errno>
   2ed40:	2309      	movs	r3, #9
		return -1;
   2ed42:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2ed46:	6003      	str	r3, [r0, #0]
}
   2ed48:	4620      	mov	r0, r4
   2ed4a:	b003      	add	sp, #12
   2ed4c:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2ed4e:	f04f 32ff 	mov.w	r2, #4294967295
   2ed52:	9801      	ldr	r0, [sp, #4]
   2ed54:	f04f 33ff 	mov.w	r3, #4294967295
   2ed58:	f7ff ffe4 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   2ed5c:	9b00      	ldr	r3, [sp, #0]
   2ed5e:	4620      	mov	r0, r4
   2ed60:	689b      	ldr	r3, [r3, #8]
   2ed62:	4798      	blx	r3
   2ed64:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2ed66:	9801      	ldr	r0, [sp, #4]
   2ed68:	f7ff ffde 	bl	2ed28 <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   2ed6c:	4628      	mov	r0, r5
   2ed6e:	f7dd fe3b 	bl	c9e8 <z_free_fd>
	return ret;
   2ed72:	e7e9      	b.n	2ed48 <z_impl_zsock_close+0x1c>

0002ed74 <z_impl_zsock_connect>:
{
   2ed74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ed76:	460d      	mov	r5, r1
   2ed78:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ed7a:	4669      	mov	r1, sp
   2ed7c:	aa01      	add	r2, sp, #4
   2ed7e:	f7dd fdcb 	bl	c918 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ed82:	4604      	mov	r4, r0
   2ed84:	b940      	cbnz	r0, 2ed98 <z_impl_zsock_connect+0x24>
   2ed86:	f000 fef4 	bl	2fb72 <__errno>
   2ed8a:	2309      	movs	r3, #9
   2ed8c:	f04f 34ff 	mov.w	r4, #4294967295
   2ed90:	6003      	str	r3, [r0, #0]
}
   2ed92:	4620      	mov	r0, r4
   2ed94:	b002      	add	sp, #8
   2ed96:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ed98:	9b00      	ldr	r3, [sp, #0]
   2ed9a:	699b      	ldr	r3, [r3, #24]
   2ed9c:	b91b      	cbnz	r3, 2eda6 <z_impl_zsock_connect+0x32>
   2ed9e:	f000 fee8 	bl	2fb72 <__errno>
   2eda2:	235f      	movs	r3, #95	; 0x5f
   2eda4:	e7f2      	b.n	2ed8c <z_impl_zsock_connect+0x18>
   2eda6:	9801      	ldr	r0, [sp, #4]
   2eda8:	f04f 32ff 	mov.w	r2, #4294967295
   2edac:	f04f 33ff 	mov.w	r3, #4294967295
   2edb0:	f7ff ffb8 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
   2edb4:	9b00      	ldr	r3, [sp, #0]
   2edb6:	4632      	mov	r2, r6
   2edb8:	4629      	mov	r1, r5
   2edba:	4620      	mov	r0, r4
   2edbc:	699b      	ldr	r3, [r3, #24]
   2edbe:	4798      	blx	r3
   2edc0:	4604      	mov	r4, r0
   2edc2:	9801      	ldr	r0, [sp, #4]
   2edc4:	f7ff ffb0 	bl	2ed28 <k_mutex_unlock.isra.0>
   2edc8:	e7e3      	b.n	2ed92 <z_impl_zsock_connect+0x1e>

0002edca <z_impl_zsock_sendto>:
{
   2edca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2edce:	460d      	mov	r5, r1
   2edd0:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2edd2:	a902      	add	r1, sp, #8
   2edd4:	aa03      	add	r2, sp, #12
{
   2edd6:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2edd8:	f7dd fd9e 	bl	c918 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2eddc:	4604      	mov	r4, r0
   2edde:	b948      	cbnz	r0, 2edf4 <z_impl_zsock_sendto+0x2a>
   2ede0:	f000 fec7 	bl	2fb72 <__errno>
   2ede4:	2309      	movs	r3, #9
   2ede6:	f04f 34ff 	mov.w	r4, #4294967295
   2edea:	6003      	str	r3, [r0, #0]
}
   2edec:	4620      	mov	r0, r4
   2edee:	b004      	add	sp, #16
   2edf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2edf4:	9b02      	ldr	r3, [sp, #8]
   2edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2edf8:	b91b      	cbnz	r3, 2ee02 <z_impl_zsock_sendto+0x38>
   2edfa:	f000 feba 	bl	2fb72 <__errno>
   2edfe:	235f      	movs	r3, #95	; 0x5f
   2ee00:	e7f1      	b.n	2ede6 <z_impl_zsock_sendto+0x1c>
   2ee02:	9803      	ldr	r0, [sp, #12]
   2ee04:	f04f 32ff 	mov.w	r2, #4294967295
   2ee08:	f04f 33ff 	mov.w	r3, #4294967295
   2ee0c:	f7ff ff8a 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
   2ee10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ee12:	4632      	mov	r2, r6
   2ee14:	9301      	str	r3, [sp, #4]
   2ee16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ee18:	4629      	mov	r1, r5
   2ee1a:	9300      	str	r3, [sp, #0]
   2ee1c:	9b02      	ldr	r3, [sp, #8]
   2ee1e:	4620      	mov	r0, r4
   2ee20:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2ee24:	463b      	mov	r3, r7
   2ee26:	47c0      	blx	r8
   2ee28:	4604      	mov	r4, r0
   2ee2a:	9803      	ldr	r0, [sp, #12]
   2ee2c:	f7ff ff7c 	bl	2ed28 <k_mutex_unlock.isra.0>
   2ee30:	e7dc      	b.n	2edec <z_impl_zsock_sendto+0x22>

0002ee32 <z_impl_zsock_sendmsg>:
{
   2ee32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ee34:	460d      	mov	r5, r1
   2ee36:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ee38:	4669      	mov	r1, sp
   2ee3a:	aa01      	add	r2, sp, #4
   2ee3c:	f7dd fd6c 	bl	c918 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ee40:	4604      	mov	r4, r0
   2ee42:	b940      	cbnz	r0, 2ee56 <z_impl_zsock_sendmsg+0x24>
   2ee44:	f000 fe95 	bl	2fb72 <__errno>
   2ee48:	2309      	movs	r3, #9
   2ee4a:	f04f 34ff 	mov.w	r4, #4294967295
   2ee4e:	6003      	str	r3, [r0, #0]
}
   2ee50:	4620      	mov	r0, r4
   2ee52:	b002      	add	sp, #8
   2ee54:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ee56:	9b00      	ldr	r3, [sp, #0]
   2ee58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ee5a:	b91b      	cbnz	r3, 2ee64 <z_impl_zsock_sendmsg+0x32>
   2ee5c:	f000 fe89 	bl	2fb72 <__errno>
   2ee60:	235f      	movs	r3, #95	; 0x5f
   2ee62:	e7f2      	b.n	2ee4a <z_impl_zsock_sendmsg+0x18>
   2ee64:	9801      	ldr	r0, [sp, #4]
   2ee66:	f04f 32ff 	mov.w	r2, #4294967295
   2ee6a:	f04f 33ff 	mov.w	r3, #4294967295
   2ee6e:	f7ff ff59 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
   2ee72:	9b00      	ldr	r3, [sp, #0]
   2ee74:	4632      	mov	r2, r6
   2ee76:	4629      	mov	r1, r5
   2ee78:	4620      	mov	r0, r4
   2ee7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ee7c:	4798      	blx	r3
   2ee7e:	4604      	mov	r4, r0
   2ee80:	9801      	ldr	r0, [sp, #4]
   2ee82:	f7ff ff51 	bl	2ed28 <k_mutex_unlock.isra.0>
   2ee86:	e7e3      	b.n	2ee50 <z_impl_zsock_sendmsg+0x1e>

0002ee88 <z_impl_zsock_recvfrom>:
{
   2ee88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2ee8c:	460d      	mov	r5, r1
   2ee8e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ee90:	a902      	add	r1, sp, #8
   2ee92:	aa03      	add	r2, sp, #12
{
   2ee94:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2ee96:	f7dd fd3f 	bl	c918 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2ee9a:	4604      	mov	r4, r0
   2ee9c:	b948      	cbnz	r0, 2eeb2 <z_impl_zsock_recvfrom+0x2a>
   2ee9e:	f000 fe68 	bl	2fb72 <__errno>
   2eea2:	2309      	movs	r3, #9
   2eea4:	f04f 34ff 	mov.w	r4, #4294967295
   2eea8:	6003      	str	r3, [r0, #0]
}
   2eeaa:	4620      	mov	r0, r4
   2eeac:	b004      	add	sp, #16
   2eeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2eeb2:	9b02      	ldr	r3, [sp, #8]
   2eeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2eeb6:	b91b      	cbnz	r3, 2eec0 <z_impl_zsock_recvfrom+0x38>
   2eeb8:	f000 fe5b 	bl	2fb72 <__errno>
   2eebc:	235f      	movs	r3, #95	; 0x5f
   2eebe:	e7f1      	b.n	2eea4 <z_impl_zsock_recvfrom+0x1c>
   2eec0:	9803      	ldr	r0, [sp, #12]
   2eec2:	f04f 32ff 	mov.w	r2, #4294967295
   2eec6:	f04f 33ff 	mov.w	r3, #4294967295
   2eeca:	f7ff ff2b 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
   2eece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2eed0:	4632      	mov	r2, r6
   2eed2:	9301      	str	r3, [sp, #4]
   2eed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eed6:	4629      	mov	r1, r5
   2eed8:	9300      	str	r3, [sp, #0]
   2eeda:	9b02      	ldr	r3, [sp, #8]
   2eedc:	4620      	mov	r0, r4
   2eede:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   2eee2:	463b      	mov	r3, r7
   2eee4:	47c0      	blx	r8
   2eee6:	4604      	mov	r4, r0
   2eee8:	9803      	ldr	r0, [sp, #12]
   2eeea:	f7ff ff1d 	bl	2ed28 <k_mutex_unlock.isra.0>
   2eeee:	e7dc      	b.n	2eeaa <z_impl_zsock_recvfrom+0x22>

0002eef0 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   2eef4:	1e14      	subs	r4, r2, #0
{
   2eef6:	4605      	mov	r5, r0
   2eef8:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   2eefa:	db13      	blt.n	2ef24 <z_impl_zsock_poll+0x34>
   2eefc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2ef00:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ef04:	2100      	movs	r1, #0
   2ef06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ef0a:	2300      	movs	r3, #0
   2ef0c:	fbc4 0107 	smlal	r0, r1, r4, r7
   2ef10:	f7da f85c 	bl	8fcc <__aeabi_uldivmod>
   2ef14:	4602      	mov	r2, r0
   2ef16:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   2ef18:	4631      	mov	r1, r6
   2ef1a:	4628      	mov	r0, r5
}
   2ef1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   2ef20:	f7e0 b9d2 	b.w	f2c8 <zsock_poll_internal>
		timeout = K_FOREVER;
   2ef24:	f04f 32ff 	mov.w	r2, #4294967295
   2ef28:	4613      	mov	r3, r2
   2ef2a:	e7f5      	b.n	2ef18 <z_impl_zsock_poll+0x28>

0002ef2c <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   2ef2c:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   2ef2e:	f7e9 fdef 	bl	18b10 <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   2ef32:	fab0 f080 	clz	r0, r0
   2ef36:	0940      	lsrs	r0, r0, #5
   2ef38:	bd08      	pop	{r3, pc}

0002ef3a <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   2ef3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2ef3e:	460d      	mov	r5, r1
   2ef40:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ef42:	a902      	add	r1, sp, #8
   2ef44:	aa03      	add	r2, sp, #12
{
   2ef46:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2ef48:	f7dd fce6 	bl	c918 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2ef4c:	4604      	mov	r4, r0
   2ef4e:	b948      	cbnz	r0, 2ef64 <z_impl_zsock_setsockopt+0x2a>
   2ef50:	f000 fe0f 	bl	2fb72 <__errno>
   2ef54:	2309      	movs	r3, #9
   2ef56:	f04f 34ff 	mov.w	r4, #4294967295
   2ef5a:	6003      	str	r3, [r0, #0]
}
   2ef5c:	4620      	mov	r0, r4
   2ef5e:	b004      	add	sp, #16
   2ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   2ef64:	9b02      	ldr	r3, [sp, #8]
   2ef66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ef68:	b91b      	cbnz	r3, 2ef72 <z_impl_zsock_setsockopt+0x38>
   2ef6a:	f000 fe02 	bl	2fb72 <__errno>
   2ef6e:	235f      	movs	r3, #95	; 0x5f
   2ef70:	e7f1      	b.n	2ef56 <z_impl_zsock_setsockopt+0x1c>
   2ef72:	9803      	ldr	r0, [sp, #12]
   2ef74:	f04f 32ff 	mov.w	r2, #4294967295
   2ef78:	f04f 33ff 	mov.w	r3, #4294967295
   2ef7c:	f7ff fed2 	bl	2ed24 <k_mutex_lock.constprop.0.isra.0>
   2ef80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ef82:	4632      	mov	r2, r6
   2ef84:	9300      	str	r3, [sp, #0]
   2ef86:	9b02      	ldr	r3, [sp, #8]
   2ef88:	4629      	mov	r1, r5
   2ef8a:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   2ef8e:	4620      	mov	r0, r4
   2ef90:	463b      	mov	r3, r7
   2ef92:	47c0      	blx	r8
   2ef94:	4604      	mov	r4, r0
   2ef96:	9803      	ldr	r0, [sp, #12]
   2ef98:	f7ff fec6 	bl	2ed28 <k_mutex_unlock.isra.0>
   2ef9c:	e7de      	b.n	2ef5c <z_impl_zsock_setsockopt+0x22>

0002ef9e <attr_find_by_handle>:
{
   2ef9e:	b570      	push	{r4, r5, r6, lr}
   2efa0:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   2efa2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2efa6:	b1a8      	cbz	r0, 2efd4 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   2efa8:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   2efaa:	1e45      	subs	r5, r0, #1
	while (upper >= lower) {
   2efac:	42ae      	cmp	r6, r5
   2efae:	dd01      	ble.n	2efb4 <attr_find_by_handle+0x16>
		return NULL;
   2efb0:	2000      	movs	r0, #0
   2efb2:	e00f      	b.n	2efd4 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   2efb4:	1972      	adds	r2, r6, r5
   2efb6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2efba:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   2efbc:	1cd0      	adds	r0, r2, #3
   2efbe:	00c3      	lsls	r3, r0, #3
   2efc0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2efc4:	8900      	ldrh	r0, [r0, #8]
   2efc6:	4288      	cmp	r0, r1
   2efc8:	d201      	bcs.n	2efce <attr_find_by_handle+0x30>
			lower = m + 1;
   2efca:	1c56      	adds	r6, r2, #1
   2efcc:	e7ee      	b.n	2efac <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   2efce:	d802      	bhi.n	2efd6 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2efd0:	3304      	adds	r3, #4
   2efd2:	18e0      	adds	r0, r4, r3
}
   2efd4:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   2efd6:	1e55      	subs	r5, r2, #1
   2efd8:	e7e8      	b.n	2efac <attr_find_by_handle+0xe>

0002efda <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   2efda:	2300      	movs	r3, #0
{
   2efdc:	b510      	push	{r4, lr}
   2efde:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   2efe0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   2efe4:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   2efe8:	b910      	cbnz	r0, 2eff0 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   2efea:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   2efee:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2eff0:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   2eff4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2eff6:	4290      	cmp	r0, r2
	list->head = node;
   2eff8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	list->tail = node;
   2effc:	bf08      	it	eq
   2effe:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   2f002:	f005 ffb8 	bl	34f76 <k_free>
   2f006:	e7ed      	b.n	2efe4 <svc_attr_memory_release+0xa>

0002f008 <atomic_and>:
{
   2f008:	4603      	mov	r3, r0
   2f00a:	b510      	push	{r4, lr}
}
   2f00c:	e8d3 0fef 	ldaex	r0, [r3]
   2f010:	ea00 0201 	and.w	r2, r0, r1
   2f014:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2f018:	2c00      	cmp	r4, #0
   2f01a:	d1f7      	bne.n	2f00c <atomic_and+0x4>
   2f01c:	bd10      	pop	{r4, pc}

0002f01e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2f01e:	2300      	movs	r3, #0
   2f020:	f7df bbfc 	b.w	e81c <z_impl_z_log_msg_static_create>

0002f024 <discovery_complete_error>:
{
   2f024:	b570      	push	{r4, r5, r6, lr}
   2f026:	4604      	mov	r4, r0
   2f028:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   2f02a:	f7ff ffd6 	bl	2efda <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f02e:	f06f 0101 	mvn.w	r1, #1
   2f032:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2f036:	f7ff ffe7 	bl	2f008 <atomic_and>
	if (dm->callback->error_found) {
   2f03a:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2f03e:	689b      	ldr	r3, [r3, #8]
   2f040:	b12b      	cbz	r3, 2f04e <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2f042:	4629      	mov	r1, r5
   2f044:	6862      	ldr	r2, [r4, #4]
   2f046:	6820      	ldr	r0, [r4, #0]
}
   2f048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   2f04c:	4718      	bx	r3
}
   2f04e:	bd70      	pop	{r4, r5, r6, pc}

0002f050 <discovery_complete_not_found>:
{
   2f050:	b510      	push	{r4, lr}
   2f052:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   2f054:	f7ff ffc1 	bl	2efda <svc_attr_memory_release>
   2f058:	f06f 0101 	mvn.w	r1, #1
   2f05c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2f060:	f7ff ffd2 	bl	2f008 <atomic_and>
	if (dm->callback->service_not_found) {
   2f064:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2f068:	685b      	ldr	r3, [r3, #4]
   2f06a:	b123      	cbz	r3, 2f076 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   2f06c:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   2f070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   2f074:	4718      	bx	r3
}
   2f076:	bd10      	pop	{r4, pc}

0002f078 <bt_gatt_dm_attr_service_val>:
{
   2f078:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2f07a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2f07e:	2400      	movs	r4, #0
{
   2f080:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2f082:	6801      	ldr	r1, [r0, #0]
   2f084:	4668      	mov	r0, sp
   2f086:	f88d 4000 	strb.w	r4, [sp]
   2f08a:	f8ad 3002 	strh.w	r3, [sp, #2]
   2f08e:	f000 fd72 	bl	2fb76 <bt_uuid_cmp>
   2f092:	b918      	cbnz	r0, 2f09c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   2f094:	6828      	ldr	r0, [r5, #0]
   2f096:	3808      	subs	r0, #8
}
   2f098:	b003      	add	sp, #12
   2f09a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2f09c:	f642 0301 	movw	r3, #10241	; 0x2801
   2f0a0:	6829      	ldr	r1, [r5, #0]
   2f0a2:	a801      	add	r0, sp, #4
   2f0a4:	f88d 4004 	strb.w	r4, [sp, #4]
   2f0a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   2f0ac:	f000 fd63 	bl	2fb76 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2f0b0:	2800      	cmp	r0, #0
   2f0b2:	d0ef      	beq.n	2f094 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   2f0b4:	4620      	mov	r0, r4
   2f0b6:	e7ef      	b.n	2f098 <bt_gatt_dm_attr_service_val+0x20>

0002f0b8 <bt_gatt_dm_attr_chrc_val>:
{
   2f0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2f0ba:	f642 0303 	movw	r3, #10243	; 0x2803
   2f0be:	2400      	movs	r4, #0
{
   2f0c0:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2f0c2:	6801      	ldr	r1, [r0, #0]
   2f0c4:	a801      	add	r0, sp, #4
   2f0c6:	f88d 4004 	strb.w	r4, [sp, #4]
   2f0ca:	f8ad 3006 	strh.w	r3, [sp, #6]
   2f0ce:	f000 fd52 	bl	2fb76 <bt_uuid_cmp>
   2f0d2:	b918      	cbnz	r0, 2f0dc <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   2f0d4:	6828      	ldr	r0, [r5, #0]
   2f0d6:	3808      	subs	r0, #8
}
   2f0d8:	b003      	add	sp, #12
   2f0da:	bd30      	pop	{r4, r5, pc}
	return NULL;
   2f0dc:	4620      	mov	r0, r4
   2f0de:	e7fb      	b.n	2f0d8 <bt_gatt_dm_attr_chrc_val+0x20>

0002f0e0 <bt_gatt_dm_conn_get>:
}
   2f0e0:	6800      	ldr	r0, [r0, #0]
   2f0e2:	4770      	bx	lr

0002f0e4 <bt_gatt_dm_char_next>:
{
   2f0e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   2f0e6:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   2f0ea:	b131      	cbz	r1, 2f0fa <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   2f0ec:	42a9      	cmp	r1, r5
   2f0ee:	d203      	bcs.n	2f0f8 <bt_gatt_dm_char_next+0x14>
	return NULL;
   2f0f0:	2500      	movs	r5, #0
}
   2f0f2:	4628      	mov	r0, r5
   2f0f4:	b003      	add	sp, #12
   2f0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f0f8:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2f0fa:	2600      	movs	r6, #0
   2f0fc:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   2f100:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   2f104:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2f108:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   2f10c:	3508      	adds	r5, #8
   2f10e:	42ac      	cmp	r4, r5
   2f110:	d9ee      	bls.n	2f0f0 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2f112:	6829      	ldr	r1, [r5, #0]
   2f114:	a801      	add	r0, sp, #4
   2f116:	f88d 6004 	strb.w	r6, [sp, #4]
   2f11a:	f8ad 7006 	strh.w	r7, [sp, #6]
   2f11e:	f000 fd2a 	bl	2fb76 <bt_uuid_cmp>
   2f122:	2800      	cmp	r0, #0
   2f124:	d1f2      	bne.n	2f10c <bt_gatt_dm_char_next+0x28>
   2f126:	e7e4      	b.n	2f0f2 <bt_gatt_dm_char_next+0xe>

0002f128 <bt_gatt_dm_attr_next>:
{
   2f128:	4603      	mov	r3, r0
		prev = dm->attrs;
   2f12a:	f100 021c 	add.w	r2, r0, #28
	if (!prev) {
   2f12e:	b119      	cbz	r1, 2f138 <bt_gatt_dm_attr_next+0x10>
	if (dm->attrs <= prev) {
   2f130:	4291      	cmp	r1, r2
   2f132:	d202      	bcs.n	2f13a <bt_gatt_dm_attr_next+0x12>
	return NULL;
   2f134:	2000      	movs	r0, #0
}
   2f136:	4770      	bx	lr
		prev = dm->attrs;
   2f138:	4611      	mov	r1, r2
		const struct bt_gatt_dm_attr *const end =
   2f13a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		if (++prev < end) {
   2f13e:	f101 0008 	add.w	r0, r1, #8
		const struct bt_gatt_dm_attr *const end =
   2f142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2f146:	331c      	adds	r3, #28
	return NULL;
   2f148:	4298      	cmp	r0, r3
   2f14a:	bf28      	it	cs
   2f14c:	2000      	movcs	r0, #0
   2f14e:	4770      	bx	lr

0002f150 <bt_gatt_dm_desc_next>:
{
   2f150:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2f152:	f7ff ffe9 	bl	2f128 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2f156:	4604      	mov	r4, r0
   2f158:	b918      	cbnz	r0, 2f162 <bt_gatt_dm_desc_next+0x12>
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2f15a:	2400      	movs	r4, #0
}
   2f15c:	4620      	mov	r0, r4
   2f15e:	b002      	add	sp, #8
   2f160:	bd10      	pop	{r4, pc}
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2f162:	2300      	movs	r3, #0
   2f164:	f88d 3004 	strb.w	r3, [sp, #4]
   2f168:	f642 0303 	movw	r3, #10243	; 0x2803
   2f16c:	6801      	ldr	r1, [r0, #0]
   2f16e:	a801      	add	r0, sp, #4
   2f170:	f8ad 3006 	strh.w	r3, [sp, #6]
   2f174:	f000 fcff 	bl	2fb76 <bt_uuid_cmp>
   2f178:	2800      	cmp	r0, #0
   2f17a:	d1ef      	bne.n	2f15c <bt_gatt_dm_desc_next+0xc>
   2f17c:	e7ed      	b.n	2f15a <bt_gatt_dm_desc_next+0xa>

0002f17e <bt_gatt_dm_desc_by_uuid>:
{
   2f17e:	b570      	push	{r4, r5, r6, lr}
   2f180:	4605      	mov	r5, r0
   2f182:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   2f184:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   2f186:	4621      	mov	r1, r4
   2f188:	4628      	mov	r0, r5
   2f18a:	f7ff ffe1 	bl	2f150 <bt_gatt_dm_desc_next>
   2f18e:	4604      	mov	r4, r0
   2f190:	b128      	cbz	r0, 2f19e <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   2f192:	4630      	mov	r0, r6
   2f194:	6821      	ldr	r1, [r4, #0]
   2f196:	f000 fcee 	bl	2fb76 <bt_uuid_cmp>
   2f19a:	2800      	cmp	r0, #0
   2f19c:	d1f3      	bne.n	2f186 <bt_gatt_dm_desc_by_uuid+0x8>
}
   2f19e:	4620      	mov	r0, r4
   2f1a0:	bd70      	pop	{r4, r5, r6, pc}

0002f1a2 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   2f1a2:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2f1a4:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   2f1a8:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f1aa:	f06f 0102 	mvn.w	r1, #2
   2f1ae:	4628      	mov	r0, r5
   2f1b0:	f7ff ff2a 	bl	2f008 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2f1b4:	0783      	lsls	r3, r0, #30
   2f1b6:	d509      	bpl.n	2f1cc <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   2f1b8:	4620      	mov	r0, r4
   2f1ba:	f7ff ff0e 	bl	2efda <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f1be:	f06f 0101 	mvn.w	r1, #1
   2f1c2:	4628      	mov	r0, r5
   2f1c4:	f7ff ff20 	bl	2f008 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   2f1c8:	2000      	movs	r0, #0
}
   2f1ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   2f1cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f1d0:	e7fb      	b.n	2f1ca <bt_gatt_dm_data_release+0x28>

0002f1d2 <adv_data_found>:
{
   2f1d2:	b510      	push	{r4, lr}
   2f1d4:	4604      	mov	r4, r0
	switch (data->type) {
   2f1d6:	7823      	ldrb	r3, [r4, #0]
{
   2f1d8:	4608      	mov	r0, r1
	switch (data->type) {
   2f1da:	2b05      	cmp	r3, #5
   2f1dc:	d806      	bhi.n	2f1ec <adv_data_found+0x1a>
   2f1de:	2b03      	cmp	r3, #3
   2f1e0:	d80e      	bhi.n	2f200 <adv_data_found+0x2e>
   2f1e2:	3b02      	subs	r3, #2
   2f1e4:	2b01      	cmp	r3, #1
   2f1e6:	d906      	bls.n	2f1f6 <adv_data_found+0x24>
}
   2f1e8:	2001      	movs	r0, #1
   2f1ea:	bd10      	pop	{r4, pc}
	switch (data->type) {
   2f1ec:	3b06      	subs	r3, #6
   2f1ee:	2b01      	cmp	r3, #1
   2f1f0:	d8fa      	bhi.n	2f1e8 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2f1f2:	2202      	movs	r2, #2
   2f1f4:	e000      	b.n	2f1f8 <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2f1f6:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2f1f8:	4621      	mov	r1, r4
   2f1fa:	f7e0 fce5 	bl	fbc8 <uuid_check>
		break;
   2f1fe:	e7f3      	b.n	2f1e8 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   2f200:	2201      	movs	r2, #1
   2f202:	e7f9      	b.n	2f1f8 <adv_data_found+0x26>

0002f204 <bt_scan_stop>:
	return bt_le_scan_stop();
   2f204:	f7e4 bd34 	b.w	13c70 <bt_le_scan_stop>

0002f208 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2f208:	b538      	push	{r3, r4, r5, lr}
   2f20a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2f20c:	42ab      	cmp	r3, r5
{
   2f20e:	4611      	mov	r1, r2
   2f210:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2f212:	d804      	bhi.n	2f21e <_copy+0x16>
   2f214:	461a      	mov	r2, r3
   2f216:	f005 fee9 	bl	34fec <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2f21a:	4620      	mov	r0, r4
   2f21c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2f21e:	2400      	movs	r4, #0
   2f220:	e7fb      	b.n	2f21a <_copy+0x12>

0002f222 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2f222:	f005 bf03 	b.w	3502c <memset>

0002f226 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2f226:	09c3      	lsrs	r3, r0, #7
   2f228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2f22c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2f230:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2f234:	b2c0      	uxtb	r0, r0
   2f236:	4770      	bx	lr

0002f238 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2f238:	78cb      	ldrb	r3, [r1, #3]
   2f23a:	7802      	ldrb	r2, [r0, #0]
   2f23c:	4053      	eors	r3, r2
   2f23e:	7003      	strb	r3, [r0, #0]
   2f240:	884b      	ldrh	r3, [r1, #2]
   2f242:	7842      	ldrb	r2, [r0, #1]
   2f244:	4053      	eors	r3, r2
   2f246:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2f248:	680a      	ldr	r2, [r1, #0]
   2f24a:	7883      	ldrb	r3, [r0, #2]
   2f24c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2f250:	7083      	strb	r3, [r0, #2]
   2f252:	680a      	ldr	r2, [r1, #0]
   2f254:	78c3      	ldrb	r3, [r0, #3]
   2f256:	4053      	eors	r3, r2
   2f258:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2f25a:	79cb      	ldrb	r3, [r1, #7]
   2f25c:	7902      	ldrb	r2, [r0, #4]
   2f25e:	4053      	eors	r3, r2
   2f260:	7103      	strb	r3, [r0, #4]
   2f262:	88cb      	ldrh	r3, [r1, #6]
   2f264:	7942      	ldrb	r2, [r0, #5]
   2f266:	4053      	eors	r3, r2
   2f268:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2f26a:	684a      	ldr	r2, [r1, #4]
   2f26c:	7983      	ldrb	r3, [r0, #6]
   2f26e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2f272:	7183      	strb	r3, [r0, #6]
   2f274:	684a      	ldr	r2, [r1, #4]
   2f276:	79c3      	ldrb	r3, [r0, #7]
   2f278:	4053      	eors	r3, r2
   2f27a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2f27c:	7acb      	ldrb	r3, [r1, #11]
   2f27e:	7a02      	ldrb	r2, [r0, #8]
   2f280:	4053      	eors	r3, r2
   2f282:	7203      	strb	r3, [r0, #8]
   2f284:	7a42      	ldrb	r2, [r0, #9]
   2f286:	894b      	ldrh	r3, [r1, #10]
   2f288:	4053      	eors	r3, r2
   2f28a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2f28c:	688a      	ldr	r2, [r1, #8]
   2f28e:	7a83      	ldrb	r3, [r0, #10]
   2f290:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2f294:	7283      	strb	r3, [r0, #10]
   2f296:	688a      	ldr	r2, [r1, #8]
   2f298:	7ac3      	ldrb	r3, [r0, #11]
   2f29a:	4053      	eors	r3, r2
   2f29c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2f29e:	7bcb      	ldrb	r3, [r1, #15]
   2f2a0:	7b02      	ldrb	r2, [r0, #12]
   2f2a2:	4053      	eors	r3, r2
   2f2a4:	7303      	strb	r3, [r0, #12]
   2f2a6:	89cb      	ldrh	r3, [r1, #14]
   2f2a8:	7b42      	ldrb	r2, [r0, #13]
   2f2aa:	4053      	eors	r3, r2
   2f2ac:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2f2ae:	68ca      	ldr	r2, [r1, #12]
   2f2b0:	7b83      	ldrb	r3, [r0, #14]
   2f2b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2f2b6:	7383      	strb	r3, [r0, #14]
   2f2b8:	68ca      	ldr	r2, [r1, #12]
   2f2ba:	7bc3      	ldrb	r3, [r0, #15]
   2f2bc:	4053      	eors	r3, r2
   2f2be:	73c3      	strb	r3, [r0, #15]
}
   2f2c0:	4770      	bx	lr

0002f2c2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2f2c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2f2c4:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2f2c6:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2f2c8:	f88d 2000 	strb.w	r2, [sp]
   2f2cc:	7942      	ldrb	r2, [r0, #5]
   2f2ce:	f88d 2001 	strb.w	r2, [sp, #1]
   2f2d2:	7a82      	ldrb	r2, [r0, #10]
   2f2d4:	f88d 2002 	strb.w	r2, [sp, #2]
   2f2d8:	7bc2      	ldrb	r2, [r0, #15]
   2f2da:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2f2de:	7902      	ldrb	r2, [r0, #4]
   2f2e0:	f88d 2004 	strb.w	r2, [sp, #4]
   2f2e4:	7a42      	ldrb	r2, [r0, #9]
   2f2e6:	f88d 2005 	strb.w	r2, [sp, #5]
   2f2ea:	7b82      	ldrb	r2, [r0, #14]
   2f2ec:	f88d 2006 	strb.w	r2, [sp, #6]
   2f2f0:	78c2      	ldrb	r2, [r0, #3]
   2f2f2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2f2f6:	7a02      	ldrb	r2, [r0, #8]
   2f2f8:	f88d 2008 	strb.w	r2, [sp, #8]
   2f2fc:	7b42      	ldrb	r2, [r0, #13]
   2f2fe:	f88d 2009 	strb.w	r2, [sp, #9]
   2f302:	7882      	ldrb	r2, [r0, #2]
   2f304:	f88d 200a 	strb.w	r2, [sp, #10]
   2f308:	79c2      	ldrb	r2, [r0, #7]
   2f30a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2f30e:	7b02      	ldrb	r2, [r0, #12]
   2f310:	f88d 200c 	strb.w	r2, [sp, #12]
   2f314:	7842      	ldrb	r2, [r0, #1]
   2f316:	f88d 200d 	strb.w	r2, [sp, #13]
   2f31a:	7982      	ldrb	r2, [r0, #6]
   2f31c:	f88d 200e 	strb.w	r2, [sp, #14]
   2f320:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2f324:	2310      	movs	r3, #16
   2f326:	466a      	mov	r2, sp
   2f328:	4619      	mov	r1, r3
   2f32a:	f7ff ff6d 	bl	2f208 <_copy>
}
   2f32e:	b005      	add	sp, #20
   2f330:	f85d fb04 	ldr.w	pc, [sp], #4

0002f334 <mult_row_column>:
{
   2f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f336:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2f338:	7808      	ldrb	r0, [r1, #0]
{
   2f33a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2f33c:	f7ff ff73 	bl	2f226 <_double_byte>
   2f340:	4605      	mov	r5, r0
   2f342:	7860      	ldrb	r0, [r4, #1]
   2f344:	f7ff ff6f 	bl	2f226 <_double_byte>
   2f348:	78a2      	ldrb	r2, [r4, #2]
   2f34a:	7863      	ldrb	r3, [r4, #1]
   2f34c:	4053      	eors	r3, r2
   2f34e:	78e2      	ldrb	r2, [r4, #3]
   2f350:	4053      	eors	r3, r2
   2f352:	405d      	eors	r5, r3
   2f354:	4068      	eors	r0, r5
   2f356:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2f358:	7860      	ldrb	r0, [r4, #1]
   2f35a:	7827      	ldrb	r7, [r4, #0]
   2f35c:	f7ff ff63 	bl	2f226 <_double_byte>
   2f360:	4605      	mov	r5, r0
   2f362:	78a0      	ldrb	r0, [r4, #2]
   2f364:	f7ff ff5f 	bl	2f226 <_double_byte>
   2f368:	78a3      	ldrb	r3, [r4, #2]
   2f36a:	405f      	eors	r7, r3
   2f36c:	78e3      	ldrb	r3, [r4, #3]
   2f36e:	405f      	eors	r7, r3
   2f370:	407d      	eors	r5, r7
   2f372:	4068      	eors	r0, r5
   2f374:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2f376:	7863      	ldrb	r3, [r4, #1]
   2f378:	7827      	ldrb	r7, [r4, #0]
   2f37a:	78a0      	ldrb	r0, [r4, #2]
   2f37c:	405f      	eors	r7, r3
   2f37e:	f7ff ff52 	bl	2f226 <_double_byte>
   2f382:	4605      	mov	r5, r0
   2f384:	78e0      	ldrb	r0, [r4, #3]
   2f386:	f7ff ff4e 	bl	2f226 <_double_byte>
   2f38a:	78e3      	ldrb	r3, [r4, #3]
   2f38c:	405f      	eors	r7, r3
   2f38e:	407d      	eors	r5, r7
   2f390:	4068      	eors	r0, r5
   2f392:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2f394:	7820      	ldrb	r0, [r4, #0]
   2f396:	f7ff ff46 	bl	2f226 <_double_byte>
   2f39a:	7862      	ldrb	r2, [r4, #1]
   2f39c:	7823      	ldrb	r3, [r4, #0]
   2f39e:	4053      	eors	r3, r2
   2f3a0:	78a2      	ldrb	r2, [r4, #2]
   2f3a2:	4053      	eors	r3, r2
   2f3a4:	ea80 0503 	eor.w	r5, r0, r3
   2f3a8:	78e0      	ldrb	r0, [r4, #3]
   2f3aa:	f7ff ff3c 	bl	2f226 <_double_byte>
   2f3ae:	b2ed      	uxtb	r5, r5
   2f3b0:	4045      	eors	r5, r0
   2f3b2:	70f5      	strb	r5, [r6, #3]
}
   2f3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f3b6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2f3b6:	b570      	push	{r4, r5, r6, lr}
   2f3b8:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2f3ba:	4605      	mov	r5, r0
{
   2f3bc:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2f3be:	2800      	cmp	r0, #0
   2f3c0:	d049      	beq.n	2f456 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2f3c2:	2900      	cmp	r1, #0
   2f3c4:	d049      	beq.n	2f45a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2f3c6:	2a00      	cmp	r2, #0
   2f3c8:	d049      	beq.n	2f45e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2f3ca:	2310      	movs	r3, #16
   2f3cc:	460a      	mov	r2, r1
   2f3ce:	4668      	mov	r0, sp
   2f3d0:	4619      	mov	r1, r3
   2f3d2:	f7ff ff19 	bl	2f208 <_copy>
	add_round_key(state, s->words);
   2f3d6:	4621      	mov	r1, r4
   2f3d8:	4668      	mov	r0, sp
   2f3da:	f7ff ff2d 	bl	2f238 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2f3de:	3410      	adds	r4, #16
   2f3e0:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2f3e4:	4668      	mov	r0, sp
   2f3e6:	f7e0 fde1 	bl	ffac <sub_bytes>
		shift_rows(state);
   2f3ea:	4668      	mov	r0, sp
   2f3ec:	f7ff ff69 	bl	2f2c2 <shift_rows>
	mult_row_column(t, s);
   2f3f0:	4669      	mov	r1, sp
   2f3f2:	a804      	add	r0, sp, #16
   2f3f4:	f7ff ff9e 	bl	2f334 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2f3f8:	a901      	add	r1, sp, #4
   2f3fa:	a805      	add	r0, sp, #20
   2f3fc:	f7ff ff9a 	bl	2f334 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2f400:	a902      	add	r1, sp, #8
   2f402:	a806      	add	r0, sp, #24
   2f404:	f7ff ff96 	bl	2f334 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2f408:	a903      	add	r1, sp, #12
   2f40a:	a807      	add	r0, sp, #28
   2f40c:	f7ff ff92 	bl	2f334 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2f410:	2310      	movs	r3, #16
   2f412:	4668      	mov	r0, sp
   2f414:	4619      	mov	r1, r3
   2f416:	eb0d 0203 	add.w	r2, sp, r3
   2f41a:	f7ff fef5 	bl	2f208 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2f41e:	4621      	mov	r1, r4
   2f420:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2f422:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2f424:	f7ff ff08 	bl	2f238 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2f428:	42b4      	cmp	r4, r6
   2f42a:	d1db      	bne.n	2f3e4 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2f42c:	f7e0 fdbe 	bl	ffac <sub_bytes>
	shift_rows(state);
   2f430:	4668      	mov	r0, sp
   2f432:	f7ff ff46 	bl	2f2c2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2f436:	4621      	mov	r1, r4
   2f438:	4668      	mov	r0, sp
   2f43a:	f7ff fefd 	bl	2f238 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2f43e:	2310      	movs	r3, #16
   2f440:	466a      	mov	r2, sp
   2f442:	4619      	mov	r1, r3
   2f444:	4628      	mov	r0, r5
   2f446:	f7ff fedf 	bl	2f208 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2f44a:	4668      	mov	r0, sp
   2f44c:	2210      	movs	r2, #16
   2f44e:	2100      	movs	r1, #0
   2f450:	f7ff fee7 	bl	2f222 <_set>

	return TC_CRYPTO_SUCCESS;
   2f454:	2001      	movs	r0, #1
}
   2f456:	b008      	add	sp, #32
   2f458:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2f45a:	4608      	mov	r0, r1
   2f45c:	e7fb      	b.n	2f456 <tc_aes_encrypt+0xa0>
   2f45e:	4610      	mov	r0, r2
   2f460:	e7f9      	b.n	2f456 <tc_aes_encrypt+0xa0>

0002f462 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2f462:	460a      	mov	r2, r1
{
   2f464:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2f466:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2f46a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2f46c:	2b00      	cmp	r3, #0
   2f46e:	bfac      	ite	ge
   2f470:	2300      	movge	r3, #0
   2f472:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2f474:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2f478:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2f47c:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2f47e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2f482:	d002      	beq.n	2f48a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2f484:	7813      	ldrb	r3, [r2, #0]
   2f486:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2f488:	e7f4      	b.n	2f474 <gf_double+0x12>
	}
}
   2f48a:	bd10      	pop	{r4, pc}

0002f48c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2f48c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2f48e:	b120      	cbz	r0, 2f49a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2f490:	2258      	movs	r2, #88	; 0x58
   2f492:	2100      	movs	r1, #0
   2f494:	f7ff fec5 	bl	2f222 <_set>
   2f498:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2f49a:	bd08      	pop	{r3, pc}

0002f49c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2f49c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2f49e:	4604      	mov	r4, r0
   2f4a0:	b188      	cbz	r0, 2f4c6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2f4a2:	2210      	movs	r2, #16
   2f4a4:	2100      	movs	r1, #0
   2f4a6:	f7ff febc 	bl	2f222 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2f4aa:	2210      	movs	r2, #16
   2f4ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2f4b0:	2100      	movs	r1, #0
   2f4b2:	f7ff feb6 	bl	2f222 <_set>
	s->leftover_offset = 0;
   2f4b6:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2f4b8:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2f4ba:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2f4bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2f4c0:	2001      	movs	r0, #1
   2f4c2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2f4c6:	bd10      	pop	{r4, pc}

0002f4c8 <tc_cmac_setup>:
{
   2f4c8:	b570      	push	{r4, r5, r6, lr}
   2f4ca:	4604      	mov	r4, r0
   2f4cc:	460d      	mov	r5, r1
   2f4ce:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2f4d0:	b310      	cbz	r0, 2f518 <tc_cmac_setup+0x50>
   2f4d2:	b311      	cbz	r1, 2f51a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2f4d4:	2258      	movs	r2, #88	; 0x58
   2f4d6:	2100      	movs	r1, #0
   2f4d8:	f7ff fea3 	bl	2f222 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2f4dc:	4629      	mov	r1, r5
   2f4de:	4630      	mov	r0, r6
	s->sched = sched;
   2f4e0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2f4e2:	f7e0 fd6f 	bl	ffc4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2f4e6:	2210      	movs	r2, #16
   2f4e8:	2100      	movs	r1, #0
   2f4ea:	4620      	mov	r0, r4
   2f4ec:	f7ff fe99 	bl	2f222 <_set>
	gf_double (s->K1, s->iv);
   2f4f0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2f4f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2f4f6:	4621      	mov	r1, r4
   2f4f8:	4620      	mov	r0, r4
   2f4fa:	f7ff ff5c 	bl	2f3b6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2f4fe:	4621      	mov	r1, r4
   2f500:	4628      	mov	r0, r5
   2f502:	f7ff ffae 	bl	2f462 <gf_double>
	gf_double (s->K2, s->K1);
   2f506:	4629      	mov	r1, r5
   2f508:	f104 0020 	add.w	r0, r4, #32
   2f50c:	f7ff ffa9 	bl	2f462 <gf_double>
	tc_cmac_init(s);
   2f510:	4620      	mov	r0, r4
   2f512:	f7ff ffc3 	bl	2f49c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2f516:	2001      	movs	r0, #1
}
   2f518:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2f51a:	4608      	mov	r0, r1
   2f51c:	e7fc      	b.n	2f518 <tc_cmac_setup+0x50>

0002f51e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2f51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f522:	460e      	mov	r6, r1
   2f524:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2f526:	4604      	mov	r4, r0
   2f528:	2800      	cmp	r0, #0
   2f52a:	d060      	beq.n	2f5ee <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2f52c:	b1fa      	cbz	r2, 2f56e <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2f52e:	2900      	cmp	r1, #0
   2f530:	d05d      	beq.n	2f5ee <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2f532:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2f536:	ea53 0102 	orrs.w	r1, r3, r2
   2f53a:	d058      	beq.n	2f5ee <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2f53c:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2f53e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2f542:	f142 32ff 	adc.w	r2, r2, #4294967295
   2f546:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2f54a:	f1b8 0f00 	cmp.w	r8, #0
   2f54e:	d02c      	beq.n	2f5aa <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2f550:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2f554:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2f558:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2f55a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2f55c:	d20a      	bcs.n	2f574 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2f55e:	462b      	mov	r3, r5
   2f560:	4632      	mov	r2, r6
   2f562:	4629      	mov	r1, r5
   2f564:	f7ff fe50 	bl	2f208 <_copy>
			s->leftover_offset += data_length;
   2f568:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2f56a:	442b      	add	r3, r5
   2f56c:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2f56e:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2f570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2f574:	463b      	mov	r3, r7
   2f576:	4632      	mov	r2, r6
   2f578:	4639      	mov	r1, r7
   2f57a:	f7ff fe45 	bl	2f208 <_copy>
		s->leftover_offset = 0;
   2f57e:	2300      	movs	r3, #0
   2f580:	3d10      	subs	r5, #16
   2f582:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2f584:	4445      	add	r5, r8
		data += remaining_space;
   2f586:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f588:	1e63      	subs	r3, r4, #1
   2f58a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2f58e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2f592:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f596:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2f598:	ea82 0200 	eor.w	r2, r2, r0
   2f59c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f59e:	d1f6      	bne.n	2f58e <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2f5a0:	4621      	mov	r1, r4
   2f5a2:	4620      	mov	r0, r4
   2f5a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2f5a6:	f7ff ff06 	bl	2f3b6 <tc_aes_encrypt>
   2f5aa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2f5ae:	2d10      	cmp	r5, #16
   2f5b0:	d80a      	bhi.n	2f5c8 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2f5b2:	2d00      	cmp	r5, #0
   2f5b4:	d0db      	beq.n	2f56e <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2f5b6:	462b      	mov	r3, r5
   2f5b8:	4632      	mov	r2, r6
   2f5ba:	4629      	mov	r1, r5
   2f5bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2f5c0:	f7ff fe22 	bl	2f208 <_copy>
		s->leftover_offset = data_length;
   2f5c4:	6465      	str	r5, [r4, #68]	; 0x44
   2f5c6:	e7d2      	b.n	2f56e <tc_cmac_update+0x50>
   2f5c8:	1e63      	subs	r3, r4, #1
   2f5ca:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2f5cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2f5d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f5d4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2f5d6:	ea82 0200 	eor.w	r2, r2, r0
   2f5da:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f5dc:	d1f6      	bne.n	2f5cc <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2f5de:	4621      	mov	r1, r4
   2f5e0:	4620      	mov	r0, r4
   2f5e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2f5e4:	f7ff fee7 	bl	2f3b6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2f5e8:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2f5ea:	3d10      	subs	r5, #16
   2f5ec:	e7df      	b.n	2f5ae <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2f5ee:	2000      	movs	r0, #0
   2f5f0:	e7be      	b.n	2f570 <tc_cmac_update+0x52>

0002f5f2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2f5f2:	b570      	push	{r4, r5, r6, lr}
   2f5f4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2f5f6:	4605      	mov	r5, r0
   2f5f8:	b1f0      	cbz	r0, 2f638 <tc_cmac_final+0x46>
   2f5fa:	b371      	cbz	r1, 2f65a <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2f5fc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2f5fe:	2a10      	cmp	r2, #16
   2f600:	d11b      	bne.n	2f63a <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2f602:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f604:	1e63      	subs	r3, r4, #1
   2f606:	3901      	subs	r1, #1
   2f608:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2f60c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2f610:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f614:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2f616:	ea82 0206 	eor.w	r2, r2, r6
   2f61a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2f61e:	ea82 0206 	eor.w	r2, r2, r6
   2f622:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2f624:	d1f2      	bne.n	2f60c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2f626:	4621      	mov	r1, r4
   2f628:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2f62a:	4628      	mov	r0, r5
   2f62c:	f7ff fec3 	bl	2f3b6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2f630:	4620      	mov	r0, r4
   2f632:	f7ff ff2b 	bl	2f48c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2f636:	2001      	movs	r0, #1
}
   2f638:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2f63a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2f63e:	2100      	movs	r1, #0
   2f640:	f1c2 0210 	rsb	r2, r2, #16
   2f644:	4420      	add	r0, r4
   2f646:	f7ff fdec 	bl	2f222 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2f64a:	2280      	movs	r2, #128	; 0x80
   2f64c:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2f64e:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2f652:	4423      	add	r3, r4
   2f654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2f658:	e7d4      	b.n	2f604 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2f65a:	4608      	mov	r0, r1
   2f65c:	e7ec      	b.n	2f638 <tc_cmac_final+0x46>

0002f65e <tc_sha256_update>:
{
   2f65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f660:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2f662:	b110      	cbz	r0, 2f66a <tc_sha256_update+0xc>
   2f664:	b1f9      	cbz	r1, 2f6a6 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2f666:	b90a      	cbnz	r2, 2f66c <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2f668:	2001      	movs	r0, #1
}
   2f66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2f66c:	2700      	movs	r7, #0
   2f66e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2f670:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2f674:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2f676:	1c5a      	adds	r2, r3, #1
   2f678:	6682      	str	r2, [r0, #104]	; 0x68
   2f67a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2f67e:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2f680:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2f682:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2f686:	d90b      	bls.n	2f6a0 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2f688:	4631      	mov	r1, r6
   2f68a:	f7e0 fcef 	bl	1006c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2f68e:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2f692:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2f696:	f142 0200 	adc.w	r2, r2, #0
   2f69a:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2f69e:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2f6a0:	42a5      	cmp	r5, r4
   2f6a2:	d1e7      	bne.n	2f674 <tc_sha256_update+0x16>
   2f6a4:	e7e0      	b.n	2f668 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2f6a6:	4608      	mov	r0, r1
   2f6a8:	e7df      	b.n	2f66a <tc_sha256_update+0xc>

0002f6aa <tc_sha256_final>:
{
   2f6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f6ac:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2f6ae:	4605      	mov	r5, r0
   2f6b0:	2800      	cmp	r0, #0
   2f6b2:	d054      	beq.n	2f75e <tc_sha256_final+0xb4>
   2f6b4:	2900      	cmp	r1, #0
   2f6b6:	d053      	beq.n	2f760 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2f6b8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2f6ba:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2f6be:	00d8      	lsls	r0, r3, #3
   2f6c0:	1812      	adds	r2, r2, r0
   2f6c2:	f141 0100 	adc.w	r1, r1, #0
   2f6c6:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2f6ca:	2280      	movs	r2, #128	; 0x80
   2f6cc:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2f6ce:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2f6d0:	4423      	add	r3, r4
   2f6d2:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2f6d4:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2f6d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2f6dc:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2f6e0:	d90a      	bls.n	2f6f8 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2f6e2:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2f6e6:	4639      	mov	r1, r7
   2f6e8:	4430      	add	r0, r6
   2f6ea:	f7ff fd9a 	bl	2f222 <_set>
		compress(s->iv, s->leftover);
   2f6ee:	4631      	mov	r1, r6
   2f6f0:	4620      	mov	r0, r4
   2f6f2:	f7e0 fcbb 	bl	1006c <compress>
		s->leftover_offset = 0;
   2f6f6:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2f6f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2f6fa:	2100      	movs	r1, #0
   2f6fc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2f700:	4430      	add	r0, r6
   2f702:	f7ff fd8e 	bl	2f222 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2f706:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2f708:	4631      	mov	r1, r6
   2f70a:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2f70c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2f70e:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2f710:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2f712:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2f716:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2f71a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2f71c:	0e1b      	lsrs	r3, r3, #24
   2f71e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2f722:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2f724:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2f728:	f7e0 fca0 	bl	1006c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2f72c:	1d2b      	adds	r3, r5, #4
   2f72e:	1f21      	subs	r1, r4, #4
   2f730:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2f732:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2f736:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2f738:	0e10      	lsrs	r0, r2, #24
   2f73a:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2f73e:	0c10      	lsrs	r0, r2, #16
   2f740:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2f744:	0a10      	lsrs	r0, r2, #8
   2f746:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2f74a:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2f74e:	42ab      	cmp	r3, r5
   2f750:	d1ef      	bne.n	2f732 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2f752:	4620      	mov	r0, r4
   2f754:	2270      	movs	r2, #112	; 0x70
   2f756:	2100      	movs	r1, #0
   2f758:	f7ff fd63 	bl	2f222 <_set>
	return TC_CRYPTO_SUCCESS;
   2f75c:	2001      	movs	r0, #1
}
   2f75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2f760:	4608      	mov	r0, r1
   2f762:	e7fc      	b.n	2f75e <tc_sha256_final+0xb4>

0002f764 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2f764:	b570      	push	{r4, r5, r6, lr}
   2f766:	4614      	mov	r4, r2
   2f768:	4605      	mov	r5, r0
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2f76a:	1e43      	subs	r3, r0, #1
   2f76c:	1888      	adds	r0, r1, r2
   2f76e:	4288      	cmp	r0, r1
   2f770:	d112      	bne.n	2f798 <rekey+0x34>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2f772:	2c40      	cmp	r4, #64	; 0x40
   2f774:	f1c4 0640 	rsb	r6, r4, #64	; 0x40
   2f778:	bf88      	it	hi
   2f77a:	2600      	movhi	r6, #0
   2f77c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2f780:	4632      	mov	r2, r6
   2f782:	215c      	movs	r1, #92	; 0x5c
   2f784:	4428      	add	r0, r5
   2f786:	f005 fc51 	bl	3502c <memset>
   2f78a:	4632      	mov	r2, r6
   2f78c:	1928      	adds	r0, r5, r4
   2f78e:	2136      	movs	r1, #54	; 0x36
	}
}
   2f790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2f794:	f005 bc4a 	b.w	3502c <memset>
		key[i] = inner_pad ^ new_key[i];
   2f798:	780a      	ldrb	r2, [r1, #0]
   2f79a:	f082 0236 	eor.w	r2, r2, #54	; 0x36
   2f79e:	f803 2f01 	strb.w	r2, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2f7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2f7a6:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
   2f7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2f7ae:	e7de      	b.n	2f76e <rekey+0xa>

0002f7b0 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2f7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f7b2:	460e      	mov	r6, r1
   2f7b4:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2f7b6:	4605      	mov	r5, r0
{
   2f7b8:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2f7ba:	b1b8      	cbz	r0, 2f7ec <tc_hmac_set_key+0x3c>
   2f7bc:	b341      	cbz	r1, 2f810 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2f7be:	b34a      	cbz	r2, 2f814 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2f7c0:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2f7c2:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2f7c6:	d813      	bhi.n	2f7f0 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2f7c8:	a810      	add	r0, sp, #64	; 0x40
   2f7ca:	f7e0 fd39 	bl	10240 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2f7ce:	4622      	mov	r2, r4
   2f7d0:	4669      	mov	r1, sp
   2f7d2:	a810      	add	r0, sp, #64	; 0x40
   2f7d4:	f7ff ff43 	bl	2f65e <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2f7d8:	a910      	add	r1, sp, #64	; 0x40
   2f7da:	a834      	add	r0, sp, #208	; 0xd0
   2f7dc:	f7ff ff65 	bl	2f6aa <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2f7e0:	4622      	mov	r2, r4
   2f7e2:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2f7e4:	4638      	mov	r0, r7
   2f7e6:	f7ff ffbd 	bl	2f764 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2f7ea:	2001      	movs	r0, #1
}
   2f7ec:	b04d      	add	sp, #308	; 0x134
   2f7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2f7f0:	f7e0 fd26 	bl	10240 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2f7f4:	4622      	mov	r2, r4
   2f7f6:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2f7f8:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2f7fc:	4628      	mov	r0, r5
   2f7fe:	f7ff ff2e 	bl	2f65e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2f802:	4629      	mov	r1, r5
   2f804:	4620      	mov	r0, r4
   2f806:	f7ff ff50 	bl	2f6aa <tc_sha256_final>
		rekey(ctx->key,
   2f80a:	2220      	movs	r2, #32
   2f80c:	4621      	mov	r1, r4
   2f80e:	e7e9      	b.n	2f7e4 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2f810:	4608      	mov	r0, r1
   2f812:	e7eb      	b.n	2f7ec <tc_hmac_set_key+0x3c>
   2f814:	4610      	mov	r0, r2
   2f816:	e7e9      	b.n	2f7ec <tc_hmac_set_key+0x3c>

0002f818 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2f818:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2f81a:	4604      	mov	r4, r0
   2f81c:	b140      	cbz	r0, 2f830 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2f81e:	f7e0 fd0f 	bl	10240 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2f822:	2240      	movs	r2, #64	; 0x40
   2f824:	4620      	mov	r0, r4
   2f826:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2f82a:	f7ff ff18 	bl	2f65e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2f82e:	2001      	movs	r0, #1
}
   2f830:	bd10      	pop	{r4, pc}

0002f832 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2f832:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2f834:	b110      	cbz	r0, 2f83c <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2f836:	f7ff ff12 	bl	2f65e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2f83a:	2001      	movs	r0, #1
}
   2f83c:	bd08      	pop	{r3, pc}

0002f83e <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2f83e:	b570      	push	{r4, r5, r6, lr}
   2f840:	460e      	mov	r6, r1
   2f842:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2f844:	4605      	mov	r5, r0
   2f846:	b1f0      	cbz	r0, 2f886 <tc_hmac_final+0x48>
   2f848:	2920      	cmp	r1, #32
   2f84a:	d11c      	bne.n	2f886 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2f84c:	b1ea      	cbz	r2, 2f88a <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2f84e:	4611      	mov	r1, r2
   2f850:	f7ff ff2b 	bl	2f6aa <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2f854:	4620      	mov	r0, r4
   2f856:	f7e0 fcf3 	bl	10240 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2f85a:	2240      	movs	r2, #64	; 0x40
   2f85c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2f860:	4620      	mov	r0, r4
   2f862:	f7ff fefc 	bl	2f65e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2f866:	4632      	mov	r2, r6
   2f868:	4629      	mov	r1, r5
   2f86a:	4620      	mov	r0, r4
   2f86c:	f7ff fef7 	bl	2f65e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2f870:	4621      	mov	r1, r4
   2f872:	4628      	mov	r0, r5
   2f874:	f7ff ff19 	bl	2f6aa <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2f878:	4620      	mov	r0, r4
   2f87a:	22f0      	movs	r2, #240	; 0xf0
   2f87c:	2100      	movs	r1, #0
   2f87e:	f7ff fcd0 	bl	2f222 <_set>

	return TC_CRYPTO_SUCCESS;
   2f882:	2001      	movs	r0, #1
}
   2f884:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2f886:	2000      	movs	r0, #0
   2f888:	e7fc      	b.n	2f884 <tc_hmac_final+0x46>
   2f88a:	4610      	mov	r0, r2
   2f88c:	e7fa      	b.n	2f884 <tc_hmac_final+0x46>

0002f88e <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2f88e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f892:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2f894:	f04f 0b01 	mov.w	fp, #1
{
   2f898:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2f89a:	2300      	movs	r3, #0
{
   2f89c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f89e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2f8a2:	4631      	mov	r1, r6
{
   2f8a4:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f8a6:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2f8a8:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2f8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2f8b0:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2f8b4:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f8b8:	f7ff ff7a 	bl	2f7b0 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2f8bc:	4620      	mov	r0, r4
   2f8be:	f7ff ffab 	bl	2f818 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2f8c2:	2220      	movs	r2, #32
   2f8c4:	4629      	mov	r1, r5
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	f7ff ffb3 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2f8cc:	465a      	mov	r2, fp
   2f8ce:	4620      	mov	r0, r4
   2f8d0:	f10d 0106 	add.w	r1, sp, #6
   2f8d4:	f7ff ffad 	bl	2f832 <tc_hmac_update>

	if (data && datalen)
   2f8d8:	f1b8 0f00 	cmp.w	r8, #0
   2f8dc:	d007      	beq.n	2f8ee <update+0x60>
   2f8de:	f1b9 0f00 	cmp.w	r9, #0
   2f8e2:	d004      	beq.n	2f8ee <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2f8e4:	464a      	mov	r2, r9
   2f8e6:	4641      	mov	r1, r8
   2f8e8:	4620      	mov	r0, r4
   2f8ea:	f7ff ffa2 	bl	2f832 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2f8ee:	b13f      	cbz	r7, 2f900 <update+0x72>
   2f8f0:	f1ba 0f00 	cmp.w	sl, #0
   2f8f4:	d004      	beq.n	2f900 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2f8f6:	4652      	mov	r2, sl
   2f8f8:	4639      	mov	r1, r7
   2f8fa:	4620      	mov	r0, r4
   2f8fc:	f7ff ff99 	bl	2f832 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2f900:	4622      	mov	r2, r4
   2f902:	2120      	movs	r1, #32
   2f904:	4630      	mov	r0, r6
   2f906:	f7ff ff9a 	bl	2f83e <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f90a:	2220      	movs	r2, #32
   2f90c:	4631      	mov	r1, r6
   2f90e:	4620      	mov	r0, r4
   2f910:	f7ff ff4e 	bl	2f7b0 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2f914:	4620      	mov	r0, r4
   2f916:	f7ff ff7f 	bl	2f818 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2f91a:	2220      	movs	r2, #32
   2f91c:	4629      	mov	r1, r5
   2f91e:	4620      	mov	r0, r4
   2f920:	f7ff ff87 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2f924:	4622      	mov	r2, r4
   2f926:	2120      	movs	r1, #32
   2f928:	4628      	mov	r0, r5
   2f92a:	f7ff ff88 	bl	2f83e <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2f92e:	f1b8 0f00 	cmp.w	r8, #0
   2f932:	d03a      	beq.n	2f9aa <update+0x11c>
   2f934:	f1b9 0f00 	cmp.w	r9, #0
   2f938:	d037      	beq.n	2f9aa <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f93a:	2220      	movs	r2, #32
   2f93c:	4631      	mov	r1, r6
   2f93e:	4620      	mov	r0, r4
   2f940:	f7ff ff36 	bl	2f7b0 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2f944:	4620      	mov	r0, r4
   2f946:	f7ff ff67 	bl	2f818 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2f94a:	2220      	movs	r2, #32
   2f94c:	4629      	mov	r1, r5
   2f94e:	4620      	mov	r0, r4
   2f950:	f7ff ff6f 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2f954:	2201      	movs	r2, #1
   2f956:	f10d 0107 	add.w	r1, sp, #7
   2f95a:	4620      	mov	r0, r4
   2f95c:	f7ff ff69 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2f960:	464a      	mov	r2, r9
   2f962:	4641      	mov	r1, r8
   2f964:	4620      	mov	r0, r4
   2f966:	f7ff ff64 	bl	2f832 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2f96a:	b13f      	cbz	r7, 2f97c <update+0xee>
   2f96c:	f1ba 0f00 	cmp.w	sl, #0
   2f970:	d004      	beq.n	2f97c <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2f972:	4652      	mov	r2, sl
   2f974:	4639      	mov	r1, r7
   2f976:	4620      	mov	r0, r4
   2f978:	f7ff ff5b 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2f97c:	4622      	mov	r2, r4
   2f97e:	2120      	movs	r1, #32
   2f980:	4630      	mov	r0, r6
   2f982:	f7ff ff5c 	bl	2f83e <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2f986:	2220      	movs	r2, #32
   2f988:	4631      	mov	r1, r6
   2f98a:	4620      	mov	r0, r4
   2f98c:	f7ff ff10 	bl	2f7b0 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2f990:	4620      	mov	r0, r4
   2f992:	f7ff ff41 	bl	2f818 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2f996:	2220      	movs	r2, #32
   2f998:	4629      	mov	r1, r5
   2f99a:	4620      	mov	r0, r4
   2f99c:	f7ff ff49 	bl	2f832 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2f9a0:	4622      	mov	r2, r4
   2f9a2:	2120      	movs	r1, #32
   2f9a4:	4628      	mov	r0, r5
   2f9a6:	f7ff ff4a 	bl	2f83e <tc_hmac_final>
}
   2f9aa:	b003      	add	sp, #12
   2f9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f9b0 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2f9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f9b2:	460c      	mov	r4, r1
   2f9b4:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2f9b6:	4605      	mov	r5, r0
   2f9b8:	b1b0      	cbz	r0, 2f9e8 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2f9ba:	b1b9      	cbz	r1, 2f9ec <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2f9bc:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2f9be:	2220      	movs	r2, #32
   2f9c0:	2100      	movs	r1, #0
   2f9c2:	30f0      	adds	r0, #240	; 0xf0
   2f9c4:	f7ff fc2d 	bl	2f222 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2f9c8:	2220      	movs	r2, #32
   2f9ca:	2101      	movs	r1, #1
   2f9cc:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2f9d0:	f7ff fc27 	bl	2f222 <_set>
	update(prng, personalization, plen, 0, 0);
   2f9d4:	4628      	mov	r0, r5
   2f9d6:	4633      	mov	r3, r6
   2f9d8:	463a      	mov	r2, r7
   2f9da:	4621      	mov	r1, r4
   2f9dc:	9600      	str	r6, [sp, #0]
   2f9de:	f7ff ff56 	bl	2f88e <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2f9e2:	2001      	movs	r0, #1
	prng->countdown = 0;
   2f9e4:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2f9e8:	b003      	add	sp, #12
   2f9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2f9ec:	4608      	mov	r0, r1
   2f9ee:	e7fb      	b.n	2f9e8 <tc_hmac_prng_init+0x38>

0002f9f0 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2f9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f9f2:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2f9f4:	4605      	mov	r5, r0
   2f9f6:	b180      	cbz	r0, 2fa1a <tc_hmac_prng_reseed+0x2a>
   2f9f8:	b179      	cbz	r1, 2fa1a <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2f9fa:	2a1f      	cmp	r2, #31
   2f9fc:	d90d      	bls.n	2fa1a <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2f9fe:	b153      	cbz	r3, 2fa16 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2fa00:	b16c      	cbz	r4, 2fa1e <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2fa02:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2fa04:	f7ff ff43 	bl	2f88e <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2fa08:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2fa0c:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2fa0e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2fa12:	b003      	add	sp, #12
   2fa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2fa16:	9300      	str	r3, [sp, #0]
   2fa18:	e7f4      	b.n	2fa04 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2fa1a:	2000      	movs	r0, #0
   2fa1c:	e7f9      	b.n	2fa12 <tc_hmac_prng_reseed+0x22>
   2fa1e:	4620      	mov	r0, r4
   2fa20:	e7f7      	b.n	2fa12 <tc_hmac_prng_reseed+0x22>

0002fa22 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2fa22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2fa26:	460d      	mov	r5, r1
   2fa28:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2fa2a:	4680      	mov	r8, r0
   2fa2c:	b3d8      	cbz	r0, 2faa6 <tc_hmac_prng_generate+0x84>
   2fa2e:	b3d2      	cbz	r2, 2faa6 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2fa30:	1e4b      	subs	r3, r1, #1
   2fa32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2fa36:	d236      	bcs.n	2faa6 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2fa38:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2fa3c:	b3ab      	cbz	r3, 2faaa <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2fa3e:	3b01      	subs	r3, #1
   2fa40:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2fa44:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2fa48:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2fa4c:	2220      	movs	r2, #32
   2fa4e:	4649      	mov	r1, r9
   2fa50:	4620      	mov	r0, r4
   2fa52:	f7ff fead 	bl	2f7b0 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2fa56:	4620      	mov	r0, r4
   2fa58:	f7ff fede 	bl	2f818 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2fa5c:	2220      	movs	r2, #32
   2fa5e:	4639      	mov	r1, r7
   2fa60:	4620      	mov	r0, r4
   2fa62:	f7ff fee6 	bl	2f832 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2fa66:	4622      	mov	r2, r4
   2fa68:	2120      	movs	r1, #32
   2fa6a:	4638      	mov	r0, r7
   2fa6c:	f7ff fee7 	bl	2f83e <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2fa70:	2d20      	cmp	r5, #32
   2fa72:	462e      	mov	r6, r5
   2fa74:	bf28      	it	cs
   2fa76:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2fa78:	4640      	mov	r0, r8
   2fa7a:	4633      	mov	r3, r6
   2fa7c:	463a      	mov	r2, r7
   2fa7e:	4631      	mov	r1, r6
   2fa80:	f7ff fbc2 	bl	2f208 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2fa84:	2d20      	cmp	r5, #32
   2fa86:	bf38      	it	cc
   2fa88:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2fa8a:	3d20      	subs	r5, #32
		out += bufferlen;
   2fa8c:	44b0      	add	r8, r6
	while (outlen != 0) {
   2fa8e:	d1dd      	bne.n	2fa4c <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2fa90:	4620      	mov	r0, r4
   2fa92:	462b      	mov	r3, r5
   2fa94:	462a      	mov	r2, r5
   2fa96:	4629      	mov	r1, r5
   2fa98:	9500      	str	r5, [sp, #0]
   2fa9a:	f7ff fef8 	bl	2f88e <update>

	return TC_CRYPTO_SUCCESS;
   2fa9e:	2001      	movs	r0, #1
}
   2faa0:	b003      	add	sp, #12
   2faa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2faa6:	2000      	movs	r0, #0
   2faa8:	e7fa      	b.n	2faa0 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2faaa:	f04f 30ff 	mov.w	r0, #4294967295
   2faae:	e7f7      	b.n	2faa0 <tc_hmac_prng_generate+0x7e>

0002fab0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2fab0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2fab2:	6800      	ldr	r0, [r0, #0]
   2fab4:	f7e0 bc10 	b.w	102d8 <z_arm_fatal_error>

0002fab8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2fab8:	2100      	movs	r1, #0
   2faba:	2001      	movs	r0, #1
   2fabc:	f7e0 bc0c 	b.w	102d8 <z_arm_fatal_error>

0002fac0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2fac0:	b508      	push	{r3, lr}
	handler();
   2fac2:	f7e0 fcd1 	bl	10468 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2fac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2faca:	f7e0 bd9b 	b.w	10604 <z_arm_exc_exit>

0002face <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2face:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2fad0:	f383 880b 	msr	PSPLIM, r3
}
   2fad4:	4770      	bx	lr

0002fad6 <z_log_msg_static_create.constprop.0>:
   2fad6:	2300      	movs	r3, #0
   2fad8:	f7de bea0 	b.w	e81c <z_impl_z_log_msg_static_create>

0002fadc <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2fadc:	4770      	bx	lr

0002fade <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2fade:	4770      	bx	lr

0002fae0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2fae0:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2fae4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2fae8:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2faea:	bf08      	it	eq
   2faec:	f06f 0015 	mvneq.w	r0, #21
   2faf0:	4770      	bx	lr

0002faf2 <mpu_configure_region>:
{
   2faf2:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2faf4:	890a      	ldrh	r2, [r1, #8]
   2faf6:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2faf8:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2fafa:	684c      	ldr	r4, [r1, #4]
   2fafc:	f002 021f 	and.w	r2, r2, #31
{
   2fb00:	b085      	sub	sp, #20
   2fb02:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2fb06:	9300      	str	r3, [sp, #0]
   2fb08:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2fb0c:	f023 031f 	bic.w	r3, r3, #31
   2fb10:	1e62      	subs	r2, r4, #1
   2fb12:	4413      	add	r3, r2
   2fb14:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2fb18:	280f      	cmp	r0, #15
   2fb1a:	9303      	str	r3, [sp, #12]
   2fb1c:	d904      	bls.n	2fb28 <mpu_configure_region+0x36>
}
   2fb1e:	b005      	add	sp, #20
   2fb20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2fb24:	f7e1 b9b4 	b.w	10e90 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2fb28:	4669      	mov	r1, sp
   2fb2a:	f7e1 f997 	bl	10e5c <region_init>
}
   2fb2e:	b005      	add	sp, #20
   2fb30:	bd30      	pop	{r4, r5, pc}

0002fb32 <_stdout_hook_default>:
}
   2fb32:	f04f 30ff 	mov.w	r0, #4294967295
   2fb36:	4770      	bx	lr

0002fb38 <_stdin_hook_default>:
}
   2fb38:	2000      	movs	r0, #0
   2fb3a:	4770      	bx	lr

0002fb3c <_read>:
{
   2fb3c:	4608      	mov	r0, r1
   2fb3e:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2fb40:	f7e1 bbb6 	b.w	112b0 <z_impl_zephyr_read_stdin>

0002fb44 <_write>:
{
   2fb44:	4608      	mov	r0, r1
   2fb46:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2fb48:	f7e1 bbc6 	b.w	112d8 <z_impl_zephyr_write_stdout>

0002fb4c <_close>:
int _close(int file)
   2fb4c:	f04f 30ff 	mov.w	r0, #4294967295
   2fb50:	4770      	bx	lr

0002fb52 <_lseek>:
}
   2fb52:	2000      	movs	r0, #0
   2fb54:	4770      	bx	lr

0002fb56 <_isatty>:
}
   2fb56:	2802      	cmp	r0, #2
   2fb58:	bfcc      	ite	gt
   2fb5a:	2000      	movgt	r0, #0
   2fb5c:	2001      	movle	r0, #1
   2fb5e:	4770      	bx	lr

0002fb60 <_kill>:
}
   2fb60:	2000      	movs	r0, #0
   2fb62:	4770      	bx	lr

0002fb64 <_getpid>:
}
   2fb64:	2000      	movs	r0, #0
   2fb66:	4770      	bx	lr

0002fb68 <_fstat>:
	st->st_mode = S_IFCHR;
   2fb68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2fb6c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2fb6e:	604b      	str	r3, [r1, #4]
}
   2fb70:	4770      	bx	lr

0002fb72 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2fb72:	f7f8 b979 	b.w	27e68 <z_impl_z_errno>

0002fb76 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2fb76:	b510      	push	{r4, lr}
   2fb78:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2fb7a:	7801      	ldrb	r1, [r0, #0]
   2fb7c:	7822      	ldrb	r2, [r4, #0]
{
   2fb7e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2fb80:	428a      	cmp	r2, r1
   2fb82:	d00f      	beq.n	2fba4 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2fb84:	4669      	mov	r1, sp
   2fb86:	f7e1 fdc7 	bl	11718 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2fb8a:	4620      	mov	r0, r4
   2fb8c:	a905      	add	r1, sp, #20
   2fb8e:	f7e1 fdc3 	bl	11718 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2fb92:	2210      	movs	r2, #16
   2fb94:	f10d 0115 	add.w	r1, sp, #21
   2fb98:	f10d 0001 	add.w	r0, sp, #1
   2fb9c:	f005 fa16 	bl	34fcc <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2fba0:	b00a      	add	sp, #40	; 0x28
   2fba2:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2fba4:	2a01      	cmp	r2, #1
   2fba6:	d006      	beq.n	2fbb6 <bt_uuid_cmp+0x40>
   2fba8:	2a02      	cmp	r2, #2
   2fbaa:	d007      	beq.n	2fbbc <bt_uuid_cmp+0x46>
   2fbac:	b972      	cbnz	r2, 2fbcc <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2fbae:	8840      	ldrh	r0, [r0, #2]
   2fbb0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2fbb2:	1ac0      	subs	r0, r0, r3
   2fbb4:	e7f4      	b.n	2fba0 <bt_uuid_cmp+0x2a>
   2fbb6:	6840      	ldr	r0, [r0, #4]
   2fbb8:	6863      	ldr	r3, [r4, #4]
   2fbba:	e7fa      	b.n	2fbb2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2fbbc:	2210      	movs	r2, #16
   2fbbe:	1c61      	adds	r1, r4, #1
   2fbc0:	3001      	adds	r0, #1
}
   2fbc2:	b00a      	add	sp, #40	; 0x28
   2fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2fbc8:	f005 ba00 	b.w	34fcc <memcmp>
	switch (u1->type) {
   2fbcc:	f06f 0015 	mvn.w	r0, #21
   2fbd0:	e7e6      	b.n	2fba0 <bt_uuid_cmp+0x2a>

0002fbd2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2fbd2:	2a04      	cmp	r2, #4
   2fbd4:	d00a      	beq.n	2fbec <bt_uuid_create+0x1a>
   2fbd6:	2a10      	cmp	r2, #16
   2fbd8:	d00d      	beq.n	2fbf6 <bt_uuid_create+0x24>
   2fbda:	2a02      	cmp	r2, #2
   2fbdc:	f04f 0300 	mov.w	r3, #0
   2fbe0:	d115      	bne.n	2fc0e <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2fbe2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2fbe4:	880b      	ldrh	r3, [r1, #0]
   2fbe6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2fbe8:	2001      	movs	r0, #1
   2fbea:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2fbec:	2301      	movs	r3, #1
   2fbee:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2fbf0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2fbf2:	6043      	str	r3, [r0, #4]
		break;
   2fbf4:	e7f8      	b.n	2fbe8 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2fbf6:	2302      	movs	r3, #2
   2fbf8:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fbfc:	f101 0310 	add.w	r3, r1, #16
   2fc00:	f851 2b04 	ldr.w	r2, [r1], #4
   2fc04:	4299      	cmp	r1, r3
   2fc06:	f840 2b04 	str.w	r2, [r0], #4
   2fc0a:	d1f9      	bne.n	2fc00 <bt_uuid_create+0x2e>
   2fc0c:	e7ec      	b.n	2fbe8 <bt_uuid_create+0x16>
	switch (data_len) {
   2fc0e:	4618      	mov	r0, r3
}
   2fc10:	4770      	bx	lr

0002fc12 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2fc12:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2fc14:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2fc16:	2106      	movs	r1, #6
{
   2fc18:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2fc1a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2fc1e:	f7e4 f8ab 	bl	13d78 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2fc22:	b918      	cbnz	r0, 2fc2c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2fc24:	79a3      	ldrb	r3, [r4, #6]
   2fc26:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2fc2a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2fc2c:	bd10      	pop	{r4, pc}

0002fc2e <bt_addr_le_copy_resolved>:
   2fc2e:	680b      	ldr	r3, [r1, #0]
   2fc30:	6003      	str	r3, [r0, #0]
   2fc32:	888b      	ldrh	r3, [r1, #4]
   2fc34:	8083      	strh	r3, [r0, #4]
   2fc36:	798b      	ldrb	r3, [r1, #6]
   2fc38:	7183      	strb	r3, [r0, #6]

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2fc3a:	7803      	ldrb	r3, [r0, #0]
   2fc3c:	f023 0302 	bic.w	r3, r3, #2
   2fc40:	7003      	strb	r3, [r0, #0]
}
   2fc42:	4770      	bx	lr

0002fc44 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2fc44:	7800      	ldrb	r0, [r0, #0]
}
   2fc46:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2fc4a:	4770      	bx	lr

0002fc4c <bt_hci_evt_get_flags>:
   2fc4c:	280f      	cmp	r0, #15
   2fc4e:	d807      	bhi.n	2fc60 <bt_hci_evt_get_flags+0x14>
   2fc50:	280d      	cmp	r0, #13
   2fc52:	d80b      	bhi.n	2fc6c <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2fc54:	2805      	cmp	r0, #5
   2fc56:	bf08      	it	eq
   2fc58:	2003      	moveq	r0, #3
   2fc5a:	bf18      	it	ne
   2fc5c:	2002      	movne	r0, #2
   2fc5e:	4770      	bx	lr
	switch (evt) {
   2fc60:	2813      	cmp	r0, #19
   2fc62:	d003      	beq.n	2fc6c <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2fc64:	281a      	cmp	r0, #26
   2fc66:	bf08      	it	eq
   2fc68:	2001      	moveq	r0, #1
   2fc6a:	e7f6      	b.n	2fc5a <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2fc6c:	2001      	movs	r0, #1
	}
}
   2fc6e:	4770      	bx	lr

0002fc70 <hci_vendor_event>:
}
   2fc70:	4770      	bx	lr

0002fc72 <atomic_or>:
{
   2fc72:	4603      	mov	r3, r0
   2fc74:	b510      	push	{r4, lr}
}
   2fc76:	e8d3 0fef 	ldaex	r0, [r3]
   2fc7a:	ea40 0201 	orr.w	r2, r0, r1
   2fc7e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2fc82:	2c00      	cmp	r4, #0
   2fc84:	d1f7      	bne.n	2fc76 <atomic_or+0x4>
   2fc86:	bd10      	pop	{r4, pc}

0002fc88 <bt_addr_le_copy>:
   2fc88:	680b      	ldr	r3, [r1, #0]
   2fc8a:	6003      	str	r3, [r0, #0]
   2fc8c:	888b      	ldrh	r3, [r1, #4]
   2fc8e:	8083      	strh	r3, [r0, #4]
   2fc90:	798b      	ldrb	r3, [r1, #6]
   2fc92:	7183      	strb	r3, [r0, #6]
}
   2fc94:	4770      	bx	lr

0002fc96 <bt_addr_copy>:
   2fc96:	680b      	ldr	r3, [r1, #0]
   2fc98:	6003      	str	r3, [r0, #0]
   2fc9a:	888b      	ldrh	r3, [r1, #4]
   2fc9c:	8083      	strh	r3, [r0, #4]
}
   2fc9e:	4770      	bx	lr

0002fca0 <z_log_msg_static_create.constprop.0>:
   2fca0:	2300      	movs	r3, #0
   2fca2:	f7de bdbb 	b.w	e81c <z_impl_z_log_msg_static_create>

0002fca6 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fca6:	e8d0 3fef 	ldaex	r3, [r0]
   2fcaa:	400b      	ands	r3, r1
   2fcac:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2fcb0:	2a00      	cmp	r2, #0
   2fcb2:	d1f8      	bne.n	2fca6 <atomic_and.isra.0>
}
   2fcb4:	4770      	bx	lr

0002fcb6 <bt_hci_disconnect>:
{
   2fcb6:	b570      	push	{r4, r5, r6, lr}
   2fcb8:	4606      	mov	r6, r0
   2fcba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2fcbc:	f240 4006 	movw	r0, #1030	; 0x406
   2fcc0:	2103      	movs	r1, #3
   2fcc2:	f7e2 f981 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   2fcc6:	4604      	mov	r4, r0
   2fcc8:	b168      	cbz	r0, 2fce6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2fcca:	2103      	movs	r1, #3
   2fccc:	300c      	adds	r0, #12
   2fcce:	f7e8 fcd3 	bl	18678 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2fcd2:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2fcd4:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2fcd6:	4621      	mov	r1, r4
}
   2fcd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2fcdc:	2200      	movs	r2, #0
   2fcde:	f240 4006 	movw	r0, #1030	; 0x406
   2fce2:	f7e2 b9bf 	b.w	12064 <bt_hci_cmd_send_sync>
}
   2fce6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fcea:	bd70      	pop	{r4, r5, r6, pc}

0002fcec <bt_le_set_data_len>:
{
   2fcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fcee:	4607      	mov	r7, r0
   2fcf0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2fcf2:	f242 0022 	movw	r0, #8226	; 0x2022
   2fcf6:	2106      	movs	r1, #6
{
   2fcf8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2fcfa:	f7e2 f965 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   2fcfe:	4604      	mov	r4, r0
   2fd00:	b178      	cbz	r0, 2fd22 <bt_le_set_data_len+0x36>
   2fd02:	2106      	movs	r1, #6
   2fd04:	300c      	adds	r0, #12
   2fd06:	f7e8 fcb7 	bl	18678 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2fd0a:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2fd0c:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2fd0e:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2fd10:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2fd12:	4621      	mov	r1, r4
}
   2fd14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2fd18:	2200      	movs	r2, #0
   2fd1a:	f242 0022 	movw	r0, #8226	; 0x2022
   2fd1e:	f7e2 b9a1 	b.w	12064 <bt_hci_cmd_send_sync>
}
   2fd22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fd28 <bt_le_set_phy>:
{
   2fd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fd2c:	4681      	mov	r9, r0
   2fd2e:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2fd30:	f242 0032 	movw	r0, #8242	; 0x2032
   2fd34:	2107      	movs	r1, #7
{
   2fd36:	4617      	mov	r7, r2
   2fd38:	461e      	mov	r6, r3
   2fd3a:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2fd3e:	f7e2 f943 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   2fd42:	4605      	mov	r5, r0
   2fd44:	b1a0      	cbz	r0, 2fd70 <bt_le_set_phy+0x48>
   2fd46:	2107      	movs	r1, #7
   2fd48:	300c      	adds	r0, #12
   2fd4a:	f7e8 fc95 	bl	18678 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2fd4e:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2fd52:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2fd56:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2fd58:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2fd5a:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2fd5c:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2fd60:	4629      	mov	r1, r5
}
   2fd62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2fd66:	2200      	movs	r2, #0
   2fd68:	f242 0032 	movw	r0, #8242	; 0x2032
   2fd6c:	f7e2 b97a 	b.w	12064 <bt_hci_cmd_send_sync>
}
   2fd70:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002fd78 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2fd78:	68c0      	ldr	r0, [r0, #12]
   2fd7a:	f7e2 bab1 	b.w	122e0 <bt_hci_le_enh_conn_complete>

0002fd7e <bt_le_conn_params_valid>:
{
   2fd7e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2fd80:	8803      	ldrh	r3, [r0, #0]
   2fd82:	8842      	ldrh	r2, [r0, #2]
   2fd84:	4293      	cmp	r3, r2
   2fd86:	d819      	bhi.n	2fdbc <bt_le_conn_params_valid+0x3e>
   2fd88:	2b05      	cmp	r3, #5
   2fd8a:	d917      	bls.n	2fdbc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2fd8c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2fd90:	d814      	bhi.n	2fdbc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2fd92:	8883      	ldrh	r3, [r0, #4]
   2fd94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2fd98:	d210      	bcs.n	2fdbc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2fd9a:	f640 4476 	movw	r4, #3190	; 0xc76
   2fd9e:	88c0      	ldrh	r0, [r0, #6]
   2fda0:	f1a0 010a 	sub.w	r1, r0, #10
   2fda4:	b289      	uxth	r1, r1
   2fda6:	42a1      	cmp	r1, r4
   2fda8:	d808      	bhi.n	2fdbc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2fdaa:	3301      	adds	r3, #1
   2fdac:	b29b      	uxth	r3, r3
   2fdae:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2fdb0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2fdb4:	bf34      	ite	cc
   2fdb6:	2001      	movcc	r0, #1
   2fdb8:	2000      	movcs	r0, #0
}
   2fdba:	bd10      	pop	{r4, pc}
		return false;
   2fdbc:	2000      	movs	r0, #0
   2fdbe:	e7fc      	b.n	2fdba <bt_le_conn_params_valid+0x3c>

0002fdc0 <le_conn_param_neg_reply>:
{
   2fdc0:	b570      	push	{r4, r5, r6, lr}
   2fdc2:	4606      	mov	r6, r0
   2fdc4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2fdc6:	f242 0021 	movw	r0, #8225	; 0x2021
   2fdca:	2103      	movs	r1, #3
   2fdcc:	f7e2 f8fc 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   2fdd0:	4604      	mov	r4, r0
   2fdd2:	b918      	cbnz	r0, 2fddc <le_conn_param_neg_reply+0x1c>
}
   2fdd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fdd8:	f7e1 bdd0 	b.w	1197c <le_conn_param_neg_reply.part.0>
   2fddc:	2103      	movs	r1, #3
   2fdde:	300c      	adds	r0, #12
   2fde0:	f7e8 fc4a 	bl	18678 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2fde4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2fde6:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2fde8:	4621      	mov	r1, r4
}
   2fdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2fdee:	f242 0021 	movw	r0, #8225	; 0x2021
   2fdf2:	f7e2 bc19 	b.w	12628 <bt_hci_cmd_send>

0002fdf6 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2fdf6:	2000      	movs	r0, #0
   2fdf8:	4770      	bx	lr

0002fdfa <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2fdfa:	2000      	movs	r0, #0
   2fdfc:	4770      	bx	lr

0002fdfe <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2fdfe:	2207      	movs	r2, #7
{
   2fe00:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2fe02:	f005 f8e3 	bl	34fcc <memcmp>
}
   2fe06:	fab0 f080 	clz	r0, r0
   2fe0a:	0940      	lsrs	r0, r0, #5
   2fe0c:	bd08      	pop	{r3, pc}

0002fe0e <bt_addr_copy>:
   2fe0e:	680b      	ldr	r3, [r1, #0]
   2fe10:	6003      	str	r3, [r0, #0]
   2fe12:	888b      	ldrh	r3, [r1, #4]
   2fe14:	8083      	strh	r3, [r0, #4]
}
   2fe16:	4770      	bx	lr

0002fe18 <bt_addr_le_copy>:
   2fe18:	680b      	ldr	r3, [r1, #0]
   2fe1a:	6003      	str	r3, [r0, #0]
   2fe1c:	888b      	ldrh	r3, [r1, #4]
   2fe1e:	8083      	strh	r3, [r0, #4]
   2fe20:	798b      	ldrb	r3, [r1, #6]
   2fe22:	7183      	strb	r3, [r0, #6]
}
   2fe24:	4770      	bx	lr

0002fe26 <z_log_msg_static_create.constprop.0>:
   2fe26:	2300      	movs	r3, #0
   2fe28:	f7de bcf8 	b.w	e81c <z_impl_z_log_msg_static_create>

0002fe2c <bt_lookup_id_addr>:
	return addr;
   2fe2c:	2800      	cmp	r0, #0
}
   2fe2e:	bf0c      	ite	eq
   2fe30:	4608      	moveq	r0, r1
   2fe32:	2000      	movne	r0, #0
   2fe34:	4770      	bx	lr

0002fe36 <bt_id_set_private_addr>:
{
   2fe36:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   2fe38:	b980      	cbnz	r0, 2fe5c <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2fe3a:	2106      	movs	r1, #6
   2fe3c:	4668      	mov	r0, sp
   2fe3e:	f7e3 ff9b 	bl	13d78 <bt_rand>
	if (err) {
   2fe42:	b940      	cbnz	r0, 2fe56 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   2fe44:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2fe48:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2fe4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2fe4e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2fe52:	f7e3 fb35 	bl	134c0 <set_random_address>
}
   2fe56:	b003      	add	sp, #12
   2fe58:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2fe5c:	f06f 0015 	mvn.w	r0, #21
   2fe60:	e7f9      	b.n	2fe56 <bt_id_set_private_addr+0x20>

0002fe62 <bt_id_scan_random_addr_check>:
}
   2fe62:	2001      	movs	r0, #1
   2fe64:	4770      	bx	lr

0002fe66 <atomic_and>:
{
   2fe66:	4603      	mov	r3, r0
   2fe68:	b510      	push	{r4, lr}
}
   2fe6a:	e8d3 0fef 	ldaex	r0, [r3]
   2fe6e:	ea00 0201 	and.w	r2, r0, r1
   2fe72:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2fe76:	2c00      	cmp	r4, #0
   2fe78:	d1f7      	bne.n	2fe6a <atomic_and+0x4>
   2fe7a:	bd10      	pop	{r4, pc}

0002fe7c <bt_addr_le_copy>:
   2fe7c:	680b      	ldr	r3, [r1, #0]
   2fe7e:	6003      	str	r3, [r0, #0]
   2fe80:	888b      	ldrh	r3, [r1, #4]
   2fe82:	8083      	strh	r3, [r0, #4]
   2fe84:	798b      	ldrb	r3, [r1, #6]
   2fe86:	7183      	strb	r3, [r0, #6]
   2fe88:	4770      	bx	lr

0002fe8a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2fe8a:	e8d0 0faf 	lda	r0, [r0]
}
   2fe8e:	4770      	bx	lr

0002fe90 <z_log_msg_static_create.constprop.0>:
   2fe90:	2300      	movs	r3, #0
   2fe92:	f7de bcc3 	b.w	e81c <z_impl_z_log_msg_static_create>

0002fe96 <tx_complete_work>:
	tx_notify(conn);
   2fe96:	3828      	subs	r0, #40	; 0x28
   2fe98:	f7e3 bfc2 	b.w	13e20 <tx_notify>

0002fe9c <bt_conn_reset_rx_state>:
{
   2fe9c:	b510      	push	{r4, lr}
   2fe9e:	4604      	mov	r4, r0
	if (!conn->rx) {
   2fea0:	6900      	ldr	r0, [r0, #16]
   2fea2:	b118      	cbz	r0, 2feac <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2fea4:	f7e8 faa4 	bl	183f0 <net_buf_unref>
	conn->rx = NULL;
   2fea8:	2300      	movs	r3, #0
   2feaa:	6123      	str	r3, [r4, #16]
}
   2feac:	bd10      	pop	{r4, pc}

0002feae <conn_lookup_handle>:
{
   2feae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2feb2:	4607      	mov	r7, r0
   2feb4:	460e      	mov	r6, r1
   2feb6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2feb8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2feba:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2febe:	42b4      	cmp	r4, r6
   2fec0:	d103      	bne.n	2feca <conn_lookup_handle+0x1c>
	return NULL;
   2fec2:	2300      	movs	r3, #0
}
   2fec4:	4618      	mov	r0, r3
   2fec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2feca:	fb09 7004 	mla	r0, r9, r4, r7
   2fece:	f7e4 facb 	bl	14468 <bt_conn_ref>
   2fed2:	4603      	mov	r3, r0
		if (!conn) {
   2fed4:	b158      	cbz	r0, 2feee <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2fed6:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2fed8:	2d01      	cmp	r5, #1
   2feda:	d002      	beq.n	2fee2 <conn_lookup_handle+0x34>
   2fedc:	3d07      	subs	r5, #7
   2fede:	2d01      	cmp	r5, #1
   2fee0:	d803      	bhi.n	2feea <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2fee2:	881a      	ldrh	r2, [r3, #0]
   2fee4:	4542      	cmp	r2, r8
   2fee6:	d0ed      	beq.n	2fec4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2fee8:	4618      	mov	r0, r3
   2feea:	f7e4 fae7 	bl	144bc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2feee:	3401      	adds	r4, #1
   2fef0:	e7e5      	b.n	2febe <conn_lookup_handle+0x10>

0002fef2 <bt_conn_connected>:
{
   2fef2:	b510      	push	{r4, lr}
   2fef4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2fef6:	f7e5 f807 	bl	14f08 <bt_l2cap_connected>
	notify_connected(conn);
   2fefa:	4620      	mov	r0, r4
}
   2fefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2ff00:	f7e3 bf58 	b.w	13db4 <notify_connected>

0002ff04 <conn_le_create_helper>:
{
   2ff04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ff06:	4605      	mov	r5, r0
   2ff08:	460c      	mov	r4, r1
	if (bt_addr_le_is_resolved(peer)) {
   2ff0a:	f7ff fe9b 	bl	2fc44 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(&dst, peer);
   2ff0e:	4629      	mov	r1, r5
	if (bt_addr_le_is_resolved(peer)) {
   2ff10:	b1a8      	cbz	r0, 2ff3e <conn_le_create_helper+0x3a>
		bt_addr_le_copy_resolved(&dst, peer);
   2ff12:	4668      	mov	r0, sp
   2ff14:	f7ff fe8b 	bl	2fc2e <bt_addr_le_copy_resolved>
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   2ff18:	4669      	mov	r1, sp
   2ff1a:	2000      	movs	r0, #0
   2ff1c:	f7e4 fd2c 	bl	14978 <bt_conn_add_le>
	if (!conn) {
   2ff20:	b158      	cbz	r0, 2ff3a <conn_le_create_helper+0x36>
	conn->le.interval_min = param->interval_min;
   2ff22:	8823      	ldrh	r3, [r4, #0]
   2ff24:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   2ff28:	8863      	ldrh	r3, [r4, #2]
   2ff2a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   2ff2e:	88a3      	ldrh	r3, [r4, #4]
   2ff30:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   2ff34:	88e3      	ldrh	r3, [r4, #6]
   2ff36:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
}
   2ff3a:	b003      	add	sp, #12
   2ff3c:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   2ff3e:	f7ff ff75 	bl	2fe2c <bt_lookup_id_addr>
   2ff42:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   2ff44:	6800      	ldr	r0, [r0, #0]
   2ff46:	9000      	str	r0, [sp, #0]
   2ff48:	889a      	ldrh	r2, [r3, #4]
   2ff4a:	799b      	ldrb	r3, [r3, #6]
   2ff4c:	f8ad 2004 	strh.w	r2, [sp, #4]
   2ff50:	f88d 3006 	strb.w	r3, [sp, #6]
}
   2ff54:	e7e0      	b.n	2ff18 <conn_le_create_helper+0x14>

0002ff56 <bt_conn_is_peer_addr_le>:
{
   2ff56:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2ff58:	7a03      	ldrb	r3, [r0, #8]
{
   2ff5a:	4604      	mov	r4, r0
	if (id != conn->id) {
   2ff5c:	428b      	cmp	r3, r1
{
   2ff5e:	4615      	mov	r5, r2
	if (id != conn->id) {
   2ff60:	d115      	bne.n	2ff8e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2ff62:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2ff66:	2207      	movs	r2, #7
   2ff68:	4628      	mov	r0, r5
   2ff6a:	f005 f82f 	bl	34fcc <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2ff6e:	b180      	cbz	r0, 2ff92 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ff70:	78e3      	ldrb	r3, [r4, #3]
   2ff72:	2207      	movs	r2, #7
   2ff74:	b943      	cbnz	r3, 2ff88 <bt_conn_is_peer_addr_le+0x32>
   2ff76:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2ff7a:	4628      	mov	r0, r5
   2ff7c:	f005 f826 	bl	34fcc <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2ff80:	fab0 f080 	clz	r0, r0
   2ff84:	0940      	lsrs	r0, r0, #5
}
   2ff86:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2ff88:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2ff8c:	e7f5      	b.n	2ff7a <bt_conn_is_peer_addr_le+0x24>
		return false;
   2ff8e:	2000      	movs	r0, #0
   2ff90:	e7f9      	b.n	2ff86 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2ff92:	2001      	movs	r0, #1
   2ff94:	e7f7      	b.n	2ff86 <bt_conn_is_peer_addr_le+0x30>

0002ff96 <bt_conn_get_dst>:
}
   2ff96:	3090      	adds	r0, #144	; 0x90
   2ff98:	4770      	bx	lr

0002ff9a <bt_conn_le_conn_update>:
{
   2ff9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff9c:	4607      	mov	r7, r0
   2ff9e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2ffa0:	f242 0013 	movw	r0, #8211	; 0x2013
   2ffa4:	210e      	movs	r1, #14
   2ffa6:	f7e2 f80f 	bl	11fc8 <bt_hci_cmd_create>
	if (!buf) {
   2ffaa:	4606      	mov	r6, r0
   2ffac:	b1d0      	cbz	r0, 2ffe4 <bt_conn_le_conn_update+0x4a>
   2ffae:	210e      	movs	r1, #14
   2ffb0:	300c      	adds	r0, #12
   2ffb2:	f7e8 fb61 	bl	18678 <net_buf_simple_add>
   2ffb6:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2ffb8:	220e      	movs	r2, #14
   2ffba:	2100      	movs	r1, #0
   2ffbc:	f005 f836 	bl	3502c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ffc0:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ffc2:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ffc4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ffc6:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ffc8:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ffca:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ffcc:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ffce:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ffd2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2ffd4:	88ab      	ldrh	r3, [r5, #4]
   2ffd6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2ffd8:	88eb      	ldrh	r3, [r5, #6]
   2ffda:	8123      	strh	r3, [r4, #8]
}
   2ffdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ffe0:	f7e2 b840 	b.w	12064 <bt_hci_cmd_send_sync>
}
   2ffe4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ffe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ffea <l2cap_connected>:
}
   2ffea:	4770      	bx	lr

0002ffec <z_log_msg_static_create.constprop.0>:
   2ffec:	2300      	movs	r3, #0
   2ffee:	f7de bc15 	b.w	e81c <z_impl_z_log_msg_static_create>

0002fff2 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2fff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fff4:	4605      	mov	r5, r0
   2fff6:	460f      	mov	r7, r1
   2fff8:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2fffa:	2300      	movs	r3, #0
   2fffc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   30000:	2104      	movs	r1, #4
   30002:	2000      	movs	r0, #0
   30004:	f7e4 fbc4 	bl	14790 <bt_conn_create_pdu_timeout>
	if (!buf) {
   30008:	4604      	mov	r4, r0
   3000a:	b920      	cbnz	r0, 30016 <CONFIG_FLASH_LOAD_SIZE+0x16>
   3000c:	4628      	mov	r0, r5
}
   3000e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30012:	f7e4 bf3d 	b.w	14e90 <l2cap_create_le_sig_pdu.part.0>
   30016:	2104      	movs	r1, #4
   30018:	300c      	adds	r0, #12
   3001a:	f7e8 fb2d 	bl	18678 <net_buf_simple_add>
	hdr->code = code;
   3001e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   30020:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   30022:	8046      	strh	r6, [r0, #2]
}
   30024:	4620      	mov	r0, r4
   30026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030028 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   30028:	4770      	bx	lr

0003002a <bt_l2cap_chan_del>:
{
   3002a:	b570      	push	{r4, r5, r6, lr}
   3002c:	4604      	mov	r4, r0
	if (!chan->conn) {
   3002e:	e9d0 3500 	ldrd	r3, r5, [r0]
   30032:	b123      	cbz	r3, 3003e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   30034:	686b      	ldr	r3, [r5, #4]
   30036:	b103      	cbz	r3, 3003a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   30038:	4798      	blx	r3
	chan->conn = NULL;
   3003a:	2300      	movs	r3, #0
   3003c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   3003e:	68e3      	ldr	r3, [r4, #12]
   30040:	b10b      	cbz	r3, 30046 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   30042:	4620      	mov	r0, r4
   30044:	4798      	blx	r3
	if (ops->released) {
   30046:	6a2b      	ldr	r3, [r5, #32]
   30048:	b11b      	cbz	r3, 30052 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   3004a:	4620      	mov	r0, r4
}
   3004c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   30050:	4718      	bx	r3
}
   30052:	bd70      	pop	{r4, r5, r6, pc}

00030054 <bt_l2cap_disconnected>:
{
   30054:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   30056:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   30058:	b130      	cbz	r0, 30068 <bt_l2cap_disconnected+0x14>
	return node->next;
   3005a:	f850 4908 	ldr.w	r4, [r0], #-8
   3005e:	b104      	cbz	r4, 30062 <bt_l2cap_disconnected+0xe>
   30060:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   30062:	f7ff ffe2 	bl	3002a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   30066:	b904      	cbnz	r4, 3006a <bt_l2cap_disconnected+0x16>
}
   30068:	bd38      	pop	{r3, r4, r5, pc}
   3006a:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3006c:	b12d      	cbz	r5, 3007a <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   3006e:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   30070:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   30072:	f7ff ffda 	bl	3002a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   30076:	462c      	mov	r4, r5
   30078:	e7f7      	b.n	3006a <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   3007a:	4620      	mov	r0, r4
}
   3007c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   30080:	f7ff bfd3 	b.w	3002a <bt_l2cap_chan_del>

00030084 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   30084:	3104      	adds	r1, #4
   30086:	f7e4 bb83 	b.w	14790 <bt_conn_create_pdu_timeout>

0003008a <bt_l2cap_send_cb>:
{
   3008a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3008e:	4614      	mov	r4, r2
   30090:	4605      	mov	r5, r0
   30092:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   30094:	f102 000c 	add.w	r0, r2, #12
   30098:	2104      	movs	r1, #4
   3009a:	461e      	mov	r6, r3
   3009c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   300a0:	f7e8 fa8e 	bl	185c0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   300a4:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   300a6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   300a8:	3a04      	subs	r2, #4
   300aa:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   300ac:	4643      	mov	r3, r8
   300ae:	4632      	mov	r2, r6
   300b0:	4621      	mov	r1, r4
   300b2:	4628      	mov	r0, r5
}
   300b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   300b8:	f7e4 b91c 	b.w	142f4 <bt_conn_send_cb>

000300bc <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   300bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   300be:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   300c0:	2202      	movs	r2, #2
   300c2:	2001      	movs	r0, #1
   300c4:	f7ff ff95 	bl	2fff2 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   300c8:	4604      	mov	r4, r0
   300ca:	b198      	cbz	r0, 300f4 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   300cc:	2102      	movs	r1, #2
   300ce:	300c      	adds	r0, #12
   300d0:	f7e8 fad2 	bl	18678 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   300d4:	2300      	movs	r3, #0
   300d6:	4622      	mov	r2, r4
   300d8:	7003      	strb	r3, [r0, #0]
   300da:	7043      	strb	r3, [r0, #1]
   300dc:	2105      	movs	r1, #5
   300de:	4628      	mov	r0, r5
   300e0:	9300      	str	r3, [sp, #0]
   300e2:	f7ff ffd2 	bl	3008a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   300e6:	b128      	cbz	r0, 300f4 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   300e8:	4620      	mov	r0, r4
}
   300ea:	b003      	add	sp, #12
   300ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   300f0:	f7e8 b97e 	b.w	183f0 <net_buf_unref>
}
   300f4:	b003      	add	sp, #12
   300f6:	bd30      	pop	{r4, r5, pc}

000300f8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   300f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   300fa:	b128      	cbz	r0, 30108 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   300fc:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   300fe:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   30100:	428b      	cmp	r3, r1
   30102:	d001      	beq.n	30108 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   30104:	6880      	ldr	r0, [r0, #8]
   30106:	e7f8      	b.n	300fa <bt_l2cap_le_lookup_rx_cid+0x2>
}
   30108:	4770      	bx	lr

0003010a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   3010a:	4770      	bx	lr

0003010c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   3010c:	4603      	mov	r3, r0
	return list->head;
   3010e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   30110:	b128      	cbz	r0, 3011e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30112:	6859      	ldr	r1, [r3, #4]
	return node->next;
   30114:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30116:	4288      	cmp	r0, r1
	list->head = node;
   30118:	601a      	str	r2, [r3, #0]
	list->tail = node;
   3011a:	bf08      	it	eq
   3011c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   3011e:	4770      	bx	lr

00030120 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   30120:	4603      	mov	r3, r0
	size_t bytes = 0;
   30122:	2000      	movs	r0, #0

	while (buf) {
   30124:	b903      	cbnz	r3, 30128 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   30126:	4770      	bx	lr
		bytes += buf->len;
   30128:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   3012a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   3012c:	4410      	add	r0, r2
		buf = buf->frags;
   3012e:	e7f9      	b.n	30124 <net_buf_frags_len+0x4>

00030130 <attr_read_type_cb>:
{
   30130:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   30132:	68d4      	ldr	r4, [r2, #12]
   30134:	3102      	adds	r1, #2
   30136:	7823      	ldrb	r3, [r4, #0]
   30138:	b913      	cbnz	r3, 30140 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   3013a:	7021      	strb	r1, [r4, #0]
	return true;
   3013c:	2001      	movs	r0, #1
}
   3013e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   30140:	428b      	cmp	r3, r1
   30142:	d0fb      	beq.n	3013c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   30144:	8a03      	ldrh	r3, [r0, #16]
   30146:	3b02      	subs	r3, #2
   30148:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   3014a:	2000      	movs	r0, #0
   3014c:	6110      	str	r0, [r2, #16]
		return false;
   3014e:	e7f6      	b.n	3013e <attr_read_type_cb+0xe>

00030150 <att_prepare_write_req>:
}
   30150:	2006      	movs	r0, #6
   30152:	4770      	bx	lr

00030154 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30154:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   30158:	4108      	asrs	r0, r1
}
   3015a:	f000 0001 	and.w	r0, r0, #1
   3015e:	4770      	bx	lr

00030160 <att_notify_mult>:
{
   30160:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   30162:	6803      	ldr	r3, [r0, #0]
   30164:	8a0a      	ldrh	r2, [r1, #16]
   30166:	6818      	ldr	r0, [r3, #0]
   30168:	68c9      	ldr	r1, [r1, #12]
   3016a:	f7e7 fedf 	bl	17f2c <bt_gatt_mult_notification>
}
   3016e:	2000      	movs	r0, #0
   30170:	bd08      	pop	{r3, pc}

00030172 <att_notify>:
{
   30172:	b538      	push	{r3, r4, r5, lr}
   30174:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   30176:	f101 000c 	add.w	r0, r1, #12
   3017a:	460c      	mov	r4, r1
   3017c:	f001 f82b 	bl	311d6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   30180:	682d      	ldr	r5, [r5, #0]
   30182:	4601      	mov	r1, r0
   30184:	8a23      	ldrh	r3, [r4, #16]
   30186:	6828      	ldr	r0, [r5, #0]
   30188:	68e2      	ldr	r2, [r4, #12]
   3018a:	f000 ff7c 	bl	31086 <bt_gatt_notification>
}
   3018e:	2000      	movs	r0, #0
   30190:	bd38      	pop	{r3, r4, r5, pc}

00030192 <att_chan_mtu_updated>:
{
   30192:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   30194:	6805      	ldr	r5, [r0, #0]
	return list->head;
   30196:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30198:	b352      	cbz	r2, 301f0 <att_chan_mtu_updated+0x5e>
	return node->next;
   3019a:	6813      	ldr	r3, [r2, #0]
   3019c:	b103      	cbz	r3, 301a0 <att_chan_mtu_updated+0xe>
   3019e:	3b88      	subs	r3, #136	; 0x88
   301a0:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   301a4:	2200      	movs	r2, #0
   301a6:	4611      	mov	r1, r2
   301a8:	e000      	b.n	301ac <att_chan_mtu_updated+0x1a>
   301aa:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   301ac:	4284      	cmp	r4, r0
   301ae:	d007      	beq.n	301c0 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   301b0:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   301b2:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   301b4:	42b1      	cmp	r1, r6
   301b6:	bf38      	it	cc
   301b8:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   301ba:	42a2      	cmp	r2, r4
   301bc:	bf38      	it	cc
   301be:	4622      	movcc	r2, r4
   301c0:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   301c2:	b12b      	cbz	r3, 301d0 <att_chan_mtu_updated+0x3e>
   301c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   301c8:	2b00      	cmp	r3, #0
   301ca:	d1ee      	bne.n	301aa <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   301cc:	4284      	cmp	r4, r0
   301ce:	d1ef      	bne.n	301b0 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   301d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   301d2:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   301d4:	428b      	cmp	r3, r1
   301d6:	d801      	bhi.n	301dc <att_chan_mtu_updated+0x4a>
   301d8:	4290      	cmp	r0, r2
   301da:	d90b      	bls.n	301f4 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   301dc:	4282      	cmp	r2, r0
   301de:	bf38      	it	cc
   301e0:	4602      	movcc	r2, r0
   301e2:	4299      	cmp	r1, r3
   301e4:	6828      	ldr	r0, [r5, #0]
   301e6:	bf38      	it	cc
   301e8:	4619      	movcc	r1, r3
}
   301ea:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   301ec:	f7e7 bf14 	b.w	18018 <bt_gatt_att_max_mtu_changed>
   301f0:	4611      	mov	r1, r2
   301f2:	e7ed      	b.n	301d0 <att_chan_mtu_updated+0x3e>
}
   301f4:	bc70      	pop	{r4, r5, r6}
   301f6:	4770      	bx	lr

000301f8 <write_cb>:
{
   301f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   301fa:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   301fc:	4601      	mov	r1, r0
{
   301fe:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   30200:	f44f 7295 	mov.w	r2, #298	; 0x12a
   30204:	6820      	ldr	r0, [r4, #0]
   30206:	f000 fe98 	bl	30f3a <bt_gatt_check_perm>
   3020a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3020c:	bb00      	cbnz	r0, 30250 <write_cb+0x58>
	if (!data->req) {
   3020e:	7a23      	ldrb	r3, [r4, #8]
   30210:	b1b3      	cbz	r3, 30240 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   30212:	f1a3 0218 	sub.w	r2, r3, #24
   30216:	4253      	negs	r3, r2
   30218:	4153      	adcs	r3, r2
   3021a:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   3021c:	9301      	str	r3, [sp, #4]
   3021e:	8a63      	ldrh	r3, [r4, #18]
   30220:	4629      	mov	r1, r5
   30222:	9300      	str	r3, [sp, #0]
   30224:	68ae      	ldr	r6, [r5, #8]
   30226:	8a23      	ldrh	r3, [r4, #16]
   30228:	68e2      	ldr	r2, [r4, #12]
   3022a:	6820      	ldr	r0, [r4, #0]
   3022c:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   3022e:	2800      	cmp	r0, #0
   30230:	db08      	blt.n	30244 <write_cb+0x4c>
   30232:	8a23      	ldrh	r3, [r4, #16]
   30234:	4298      	cmp	r0, r3
   30236:	d10e      	bne.n	30256 <write_cb+0x5e>
	data->err = 0U;
   30238:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   3023a:	2001      	movs	r0, #1
	data->err = 0U;
   3023c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   3023e:	e008      	b.n	30252 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   30240:	2302      	movs	r3, #2
   30242:	e7eb      	b.n	3021c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   30244:	f110 0fff 	cmn.w	r0, #255	; 0xff
   30248:	d305      	bcc.n	30256 <write_cb+0x5e>
		return -err;
   3024a:	4240      	negs	r0, r0
   3024c:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   3024e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   30250:	2000      	movs	r0, #0
}
   30252:	b002      	add	sp, #8
   30254:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   30256:	200e      	movs	r0, #14
   30258:	e7f9      	b.n	3024e <write_cb+0x56>

0003025a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   3025a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   3025c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30260:	2300      	movs	r3, #0
   30262:	461a      	mov	r2, r3
   30264:	9300      	str	r3, [sp, #0]
   30266:	f7e6 fc67 	bl	16b38 <bt_gatt_foreach_attr_type>
				  user_data);
}
   3026a:	b005      	add	sp, #20
   3026c:	f85d fb04 	ldr.w	pc, [sp], #4

00030270 <attr_read_group_cb>:
	if (!data->rsp->len) {
   30270:	68d0      	ldr	r0, [r2, #12]
   30272:	3104      	adds	r1, #4
   30274:	7803      	ldrb	r3, [r0, #0]
   30276:	b913      	cbnz	r3, 3027e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   30278:	7001      	strb	r1, [r0, #0]
	return true;
   3027a:	2001      	movs	r0, #1
   3027c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   3027e:	428b      	cmp	r3, r1
   30280:	d0fb      	beq.n	3027a <attr_read_group_cb+0xa>
		data->group = NULL;
   30282:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   30284:	6891      	ldr	r1, [r2, #8]
   30286:	8a0b      	ldrh	r3, [r1, #16]
   30288:	3b04      	subs	r3, #4
   3028a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   3028c:	6110      	str	r0, [r2, #16]
}
   3028e:	4770      	bx	lr

00030290 <find_info_cb>:
{
   30290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   30292:	6893      	ldr	r3, [r2, #8]
{
   30294:	4605      	mov	r5, r0
   30296:	460f      	mov	r7, r1
   30298:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   3029a:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   3029c:	b963      	cbnz	r3, 302b8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   3029e:	6850      	ldr	r0, [r2, #4]
   302a0:	2101      	movs	r1, #1
   302a2:	300c      	adds	r0, #12
   302a4:	f7e8 f9e8 	bl	18678 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   302a8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   302aa:	682b      	ldr	r3, [r5, #0]
   302ac:	781b      	ldrb	r3, [r3, #0]
   302ae:	2b00      	cmp	r3, #0
   302b0:	bf14      	ite	ne
   302b2:	2302      	movne	r3, #2
   302b4:	2301      	moveq	r3, #1
   302b6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   302b8:	68a3      	ldr	r3, [r4, #8]
   302ba:	781b      	ldrb	r3, [r3, #0]
   302bc:	2b01      	cmp	r3, #1
   302be:	d003      	beq.n	302c8 <find_info_cb+0x38>
   302c0:	2b02      	cmp	r3, #2
   302c2:	d019      	beq.n	302f8 <find_info_cb+0x68>
   302c4:	2000      	movs	r0, #0
   302c6:	e016      	b.n	302f6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   302c8:	682b      	ldr	r3, [r5, #0]
   302ca:	781b      	ldrb	r3, [r3, #0]
   302cc:	2b00      	cmp	r3, #0
   302ce:	d1f9      	bne.n	302c4 <find_info_cb+0x34>
   302d0:	6860      	ldr	r0, [r4, #4]
   302d2:	2104      	movs	r1, #4
   302d4:	300c      	adds	r0, #12
   302d6:	f7e8 f9cf 	bl	18678 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   302da:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   302dc:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   302de:	682a      	ldr	r2, [r5, #0]
   302e0:	68e3      	ldr	r3, [r4, #12]
   302e2:	8852      	ldrh	r2, [r2, #2]
   302e4:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   302e6:	6863      	ldr	r3, [r4, #4]
   302e8:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   302ea:	8a1b      	ldrh	r3, [r3, #16]
   302ec:	1ac0      	subs	r0, r0, r3
   302ee:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   302f0:	bf94      	ite	ls
   302f2:	2000      	movls	r0, #0
   302f4:	2001      	movhi	r0, #1
}
   302f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   302f8:	682b      	ldr	r3, [r5, #0]
   302fa:	781b      	ldrb	r3, [r3, #0]
   302fc:	2b02      	cmp	r3, #2
   302fe:	d1e1      	bne.n	302c4 <find_info_cb+0x34>
   30300:	6860      	ldr	r0, [r4, #4]
   30302:	2112      	movs	r1, #18
   30304:	300c      	adds	r0, #12
   30306:	f7e8 f9b7 	bl	18678 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   3030a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   3030c:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3030e:	682b      	ldr	r3, [r5, #0]
   30310:	68e2      	ldr	r2, [r4, #12]
   30312:	1c59      	adds	r1, r3, #1
   30314:	3202      	adds	r2, #2
   30316:	3311      	adds	r3, #17
   30318:	f851 0b04 	ldr.w	r0, [r1], #4
   3031c:	4299      	cmp	r1, r3
   3031e:	f842 0b04 	str.w	r0, [r2], #4
   30322:	d1f9      	bne.n	30318 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   30324:	6863      	ldr	r3, [r4, #4]
   30326:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   30328:	8a1b      	ldrh	r3, [r3, #16]
   3032a:	1ac0      	subs	r0, r0, r3
   3032c:	2812      	cmp	r0, #18
   3032e:	e7df      	b.n	302f0 <find_info_cb+0x60>

00030330 <z_log_msg_static_create.constprop.0>:
   30330:	2300      	movs	r3, #0
   30332:	f7de ba73 	b.w	e81c <z_impl_z_log_msg_static_create>

00030336 <chan_req_send>:
{
   30336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30338:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   3033a:	6888      	ldr	r0, [r1, #8]
   3033c:	f7ff fef0 	bl	30120 <net_buf_frags_len>
   30340:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   30342:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   30344:	4283      	cmp	r3, r0
   30346:	d30b      	bcc.n	30360 <chan_req_send+0x2a>
	req->buf = NULL;
   30348:	2600      	movs	r6, #0
	chan->req = req;
   3034a:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   3034c:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   3034e:	4628      	mov	r0, r5
	req->buf = NULL;
   30350:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   30352:	4639      	mov	r1, r7
   30354:	f7e5 f87c 	bl	15450 <chan_send>
	if (err) {
   30358:	b108      	cbz	r0, 3035e <chan_req_send+0x28>
		req->buf = buf;
   3035a:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   3035c:	63ae      	str	r6, [r5, #56]	; 0x38
}
   3035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   30360:	f06f 0079 	mvn.w	r0, #121	; 0x79
   30364:	e7fb      	b.n	3035e <chan_req_send+0x28>

00030366 <process_queue>:
{
   30366:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   30368:	2200      	movs	r2, #0
{
   3036a:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   3036c:	2300      	movs	r3, #0
   3036e:	4608      	mov	r0, r1
{
   30370:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   30372:	f000 ff20 	bl	311b6 <net_buf_get>
	if (buf) {
   30376:	4605      	mov	r5, r0
   30378:	b158      	cbz	r0, 30392 <process_queue+0x2c>
	return chan_send(chan, buf);
   3037a:	4601      	mov	r1, r0
   3037c:	4620      	mov	r0, r4
   3037e:	f7e5 f867 	bl	15450 <chan_send>
		if (err) {
   30382:	4604      	mov	r4, r0
   30384:	b118      	cbz	r0, 3038e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   30386:	4629      	mov	r1, r5
   30388:	4630      	mov	r0, r6
   3038a:	f004 fc44 	bl	34c16 <k_queue_prepend>
}
   3038e:	4620      	mov	r0, r4
   30390:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   30392:	f06f 0401 	mvn.w	r4, #1
   30396:	e7fa      	b.n	3038e <process_queue+0x28>

00030398 <bt_att_chan_send_rsp>:
{
   30398:	b538      	push	{r3, r4, r5, lr}
   3039a:	4604      	mov	r4, r0
   3039c:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   3039e:	f7e5 f857 	bl	15450 <chan_send>
	if (err) {
   303a2:	b130      	cbz	r0, 303b2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   303a4:	4629      	mov	r1, r5
   303a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   303aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   303ae:	f7e7 bff9 	b.w	183a4 <net_buf_put>
}
   303b2:	bd38      	pop	{r3, r4, r5, pc}

000303b4 <att_chan_read>:
{
   303b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303b8:	4680      	mov	r8, r0
   303ba:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   303bc:	4610      	mov	r0, r2
{
   303be:	4699      	mov	r9, r3
   303c0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   303c2:	f7ff fead 	bl	30120 <net_buf_frags_len>
   303c6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   303ca:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   303cc:	4283      	cmp	r3, r0
   303ce:	d97a      	bls.n	304c6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   303d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   303d4:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   303d6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   303d8:	f7e8 f866 	bl	184a8 <net_buf_frag_last>
	size_t len, total = 0;
   303dc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   303e0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   303e2:	4630      	mov	r0, r6
   303e4:	f7ff fe9c 	bl	30120 <net_buf_frags_len>
   303e8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   303ec:	f105 070c 	add.w	r7, r5, #12
   303f0:	1a24      	subs	r4, r4, r0
   303f2:	4638      	mov	r0, r7
   303f4:	f000 fefb 	bl	311ee <net_buf_simple_tailroom>
   303f8:	4284      	cmp	r4, r0
   303fa:	d211      	bcs.n	30420 <att_chan_read+0x6c>
   303fc:	4630      	mov	r0, r6
   303fe:	f7ff fe8f 	bl	30120 <net_buf_frags_len>
   30402:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   30406:	1a24      	subs	r4, r4, r0
		if (!len) {
   30408:	bb34      	cbnz	r4, 30458 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   3040a:	7ab0      	ldrb	r0, [r6, #10]
   3040c:	f7e7 fea2 	bl	18154 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   30410:	2200      	movs	r2, #0
   30412:	2300      	movs	r3, #0
   30414:	f000 feca 	bl	311ac <net_buf_alloc_fixed>
			if (!frag) {
   30418:	4605      	mov	r5, r0
   3041a:	b930      	cbnz	r0, 3042a <att_chan_read+0x76>
	return total;
   3041c:	4657      	mov	r7, sl
   3041e:	e02c      	b.n	3047a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   30420:	4638      	mov	r0, r7
   30422:	f000 fee4 	bl	311ee <net_buf_simple_tailroom>
   30426:	4604      	mov	r4, r0
   30428:	e7ee      	b.n	30408 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   3042a:	4601      	mov	r1, r0
   3042c:	4630      	mov	r0, r6
   3042e:	f7e8 f881 	bl	18534 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   30432:	4630      	mov	r0, r6
   30434:	f7ff fe74 	bl	30120 <net_buf_frags_len>
   30438:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   3043c:	f105 070c 	add.w	r7, r5, #12
   30440:	1a24      	subs	r4, r4, r0
   30442:	4638      	mov	r0, r7
   30444:	f000 fed3 	bl	311ee <net_buf_simple_tailroom>
   30448:	4284      	cmp	r4, r0
   3044a:	d21a      	bcs.n	30482 <att_chan_read+0xce>
   3044c:	4630      	mov	r0, r6
   3044e:	f7ff fe67 	bl	30120 <net_buf_frags_len>
   30452:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   30456:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   30458:	68e9      	ldr	r1, [r5, #12]
   3045a:	8a2a      	ldrh	r2, [r5, #16]
   3045c:	f8cd 9000 	str.w	r9, [sp]
   30460:	f8db 7004 	ldr.w	r7, [fp, #4]
   30464:	440a      	add	r2, r1
   30466:	9803      	ldr	r0, [sp, #12]
   30468:	4659      	mov	r1, fp
   3046a:	b2a3      	uxth	r3, r4
   3046c:	47b8      	blx	r7
		if (read < 0) {
   3046e:	1e07      	subs	r7, r0, #0
   30470:	da0c      	bge.n	3048c <att_chan_read+0xd8>
				return total;
   30472:	f1ba 0f00 	cmp.w	sl, #0
   30476:	bf18      	it	ne
   30478:	4657      	movne	r7, sl
}
   3047a:	4638      	mov	r0, r7
   3047c:	b005      	add	sp, #20
   3047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30482:	4638      	mov	r0, r7
   30484:	f000 feb3 	bl	311ee <net_buf_simple_tailroom>
   30488:	4604      	mov	r4, r0
   3048a:	e7e5      	b.n	30458 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   3048c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3048e:	b993      	cbnz	r3, 304b6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   30490:	4639      	mov	r1, r7
   30492:	f105 000c 	add.w	r0, r5, #12
   30496:	f7e8 f8ef 	bl	18678 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   3049a:	4630      	mov	r0, r6
   3049c:	f7ff fe40 	bl	30120 <net_buf_frags_len>
   304a0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   304a4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   304a6:	4283      	cmp	r3, r0
		total += read;
   304a8:	44ba      	add	sl, r7
		offset += read;
   304aa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   304ae:	d9b5      	bls.n	3041c <att_chan_read+0x68>
   304b0:	42a7      	cmp	r7, r4
   304b2:	d096      	beq.n	303e2 <att_chan_read+0x2e>
   304b4:	e7b2      	b.n	3041c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   304b6:	4639      	mov	r1, r7
   304b8:	4628      	mov	r0, r5
   304ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   304bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   304be:	4798      	blx	r3
   304c0:	2800      	cmp	r0, #0
   304c2:	d1e5      	bne.n	30490 <att_chan_read+0xdc>
   304c4:	e7aa      	b.n	3041c <att_chan_read+0x68>
		return 0;
   304c6:	2700      	movs	r7, #0
   304c8:	e7d7      	b.n	3047a <att_chan_read+0xc6>

000304ca <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   304ca:	2200      	movs	r2, #0
	return list->head;
   304cc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   304ce:	b903      	cbnz	r3, 304d2 <sys_slist_find_and_remove.isra.0+0x8>
   304d0:	4770      	bx	lr
   304d2:	428b      	cmp	r3, r1
   304d4:	d10f      	bne.n	304f6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   304d6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   304d8:	b93a      	cbnz	r2, 304ea <sys_slist_find_and_remove.isra.0+0x20>
   304da:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   304dc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   304de:	4291      	cmp	r1, r2
   304e0:	d100      	bne.n	304e4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   304e2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   304e4:	2300      	movs	r3, #0
   304e6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   304e8:	4770      	bx	lr
	parent->next = child;
   304ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   304ec:	6843      	ldr	r3, [r0, #4]
   304ee:	4299      	cmp	r1, r3
	list->tail = node;
   304f0:	bf08      	it	eq
   304f2:	6042      	streq	r2, [r0, #4]
}
   304f4:	e7f6      	b.n	304e4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   304f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   304f8:	681b      	ldr	r3, [r3, #0]
   304fa:	e7e8      	b.n	304ce <sys_slist_find_and_remove.isra.0+0x4>

000304fc <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   304fc:	2301      	movs	r3, #1
   304fe:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30500:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   30502:	e8d0 2fef 	ldaex	r2, [r0]
   30506:	401a      	ands	r2, r3
   30508:	e8c0 2fe1 	stlex	r1, r2, [r0]
   3050c:	2900      	cmp	r1, #0
   3050e:	d1f8      	bne.n	30502 <atomic_clear_bit+0x6>
}
   30510:	4770      	bx	lr

00030512 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   30512:	2006      	movs	r0, #6
   30514:	4770      	bx	lr

00030516 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   30516:	2301      	movs	r3, #1
{
   30518:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   3051a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3051e:	e8d0 3fef 	ldaex	r3, [r0]
   30522:	ea43 0201 	orr.w	r2, r3, r1
   30526:	e8c0 2fe4 	stlex	r4, r2, [r0]
   3052a:	2c00      	cmp	r4, #0
   3052c:	d1f7      	bne.n	3051e <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   3052e:	4219      	tst	r1, r3
}
   30530:	bf14      	ite	ne
   30532:	2001      	movne	r0, #1
   30534:	2000      	moveq	r0, #0
   30536:	bd10      	pop	{r4, pc}

00030538 <read_cb>:
{
   30538:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   3053a:	2300      	movs	r3, #0
{
   3053c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   3053e:	6816      	ldr	r6, [r2, #0]
{
   30540:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   30542:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30544:	4629      	mov	r1, r5
	data->err = 0x00;
   30546:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30548:	2295      	movs	r2, #149	; 0x95
   3054a:	f000 fcf6 	bl	30f3a <bt_gatt_check_perm>
   3054e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   30550:	b980      	cbnz	r0, 30574 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   30552:	e9cd 0000 	strd	r0, r0, [sp]
   30556:	4629      	mov	r1, r5
   30558:	4630      	mov	r0, r6
   3055a:	88a3      	ldrh	r3, [r4, #4]
   3055c:	68a2      	ldr	r2, [r4, #8]
   3055e:	f7ff ff29 	bl	303b4 <att_chan_read>
	if (ret < 0) {
   30562:	2800      	cmp	r0, #0
   30564:	da09      	bge.n	3057a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   30566:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   3056a:	bf32      	itee	cc
   3056c:	200e      	movcc	r0, #14
		return -err;
   3056e:	4240      	negcs	r0, r0
   30570:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   30572:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   30574:	2000      	movs	r0, #0
}
   30576:	b002      	add	sp, #8
   30578:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   3057a:	2001      	movs	r0, #1
   3057c:	e7fb      	b.n	30576 <read_cb+0x3e>

0003057e <read_vl_cb>:
{
   3057e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   30582:	2300      	movs	r3, #0
{
   30584:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   30586:	f8d2 8000 	ldr.w	r8, [r2]
{
   3058a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   3058c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30590:	4631      	mov	r1, r6
	data->err = 0x00;
   30592:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   30594:	2295      	movs	r2, #149	; 0x95
   30596:	f000 fcd0 	bl	30f3a <bt_gatt_check_perm>
   3059a:	4605      	mov	r5, r0
   3059c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   3059e:	b9e0      	cbnz	r0, 305da <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   305a0:	68a0      	ldr	r0, [r4, #8]
   305a2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   305a6:	8a02      	ldrh	r2, [r0, #16]
   305a8:	1a9b      	subs	r3, r3, r2
   305aa:	2b01      	cmp	r3, #1
   305ac:	dd15      	ble.n	305da <read_vl_cb+0x5c>
   305ae:	2102      	movs	r1, #2
   305b0:	300c      	adds	r0, #12
   305b2:	f7e8 f861 	bl	18678 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   305b6:	e9cd 5500 	strd	r5, r5, [sp]
   305ba:	4607      	mov	r7, r0
   305bc:	88a3      	ldrh	r3, [r4, #4]
   305be:	4631      	mov	r1, r6
   305c0:	4640      	mov	r0, r8
   305c2:	68a2      	ldr	r2, [r4, #8]
   305c4:	f7ff fef6 	bl	303b4 <att_chan_read>
	if (read < 0) {
   305c8:	1e03      	subs	r3, r0, #0
   305ca:	da0a      	bge.n	305e2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   305cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   305d0:	bf32      	itee	cc
   305d2:	230e      	movcc	r3, #14
		return -err;
   305d4:	425b      	negcs	r3, r3
   305d6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   305d8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   305da:	2000      	movs	r0, #0
}
   305dc:	b002      	add	sp, #8
   305de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   305e2:	2001      	movs	r0, #1
	rsp->len = read;
   305e4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   305e6:	e7f9      	b.n	305dc <read_vl_cb+0x5e>

000305e8 <bt_att_sent>:
{
   305e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   305ea:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   305ee:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   305f0:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   305f2:	2104      	movs	r1, #4
   305f4:	3030      	adds	r0, #48	; 0x30
   305f6:	f7ff ff81 	bl	304fc <atomic_clear_bit>
	if (!att) {
   305fa:	b304      	cbz	r4, 3063e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   305fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   305fe:	b98b      	cbnz	r3, 30624 <bt_att_sent+0x3c>
   30600:	6863      	ldr	r3, [r4, #4]
   30602:	b17b      	cbz	r3, 30624 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   30604:	1d20      	adds	r0, r4, #4
   30606:	f7ff fd81 	bl	3010c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3060a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   3060c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3060e:	4638      	mov	r0, r7
   30610:	f7ff fe91 	bl	30336 <chan_req_send>
   30614:	2800      	cmp	r0, #0
   30616:	da12      	bge.n	3063e <bt_att_sent+0x56>
	return list->head;
   30618:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   3061a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   3061c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   3061e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   30620:	b903      	cbnz	r3, 30624 <bt_att_sent+0x3c>
	list->tail = node;
   30622:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   30624:	4638      	mov	r0, r7
   30626:	f105 0138 	add.w	r1, r5, #56	; 0x38
   3062a:	f7ff fe9c 	bl	30366 <process_queue>
	if (!err) {
   3062e:	b130      	cbz	r0, 3063e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   30630:	4638      	mov	r0, r7
   30632:	f104 010c 	add.w	r1, r4, #12
}
   30636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   3063a:	f7ff be94 	b.w	30366 <process_queue>
}
   3063e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030640 <att_req_send_process>:
{
   30640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   30644:	6a84      	ldr	r4, [r0, #40]	; 0x28
   30646:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30648:	2c00      	cmp	r4, #0
   3064a:	d03a      	beq.n	306c2 <att_req_send_process+0x82>
	return node->next;
   3064c:	f854 6988 	ldr.w	r6, [r4], #-136
   30650:	b106      	cbz	r6, 30654 <att_req_send_process+0x14>
   30652:	3e88      	subs	r6, #136	; 0x88
{
   30654:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   30656:	f108 0704 	add.w	r7, r8, #4
{
   3065a:	461d      	mov	r5, r3
   3065c:	e013      	b.n	30686 <att_req_send_process+0x46>
		if (!req && prev &&
   3065e:	b1bb      	cbz	r3, 30690 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   30660:	2103      	movs	r1, #3
   30662:	f104 0034 	add.w	r0, r4, #52	; 0x34
   30666:	f7ff fd75 	bl	30154 <atomic_test_bit>
   3066a:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   3066c:	f103 0034 	add.w	r0, r3, #52	; 0x34
   30670:	f7ff fd70 	bl	30154 <atomic_test_bit>
		if (!req && prev &&
   30674:	4282      	cmp	r2, r0
   30676:	d10b      	bne.n	30690 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30678:	b31e      	cbz	r6, 306c2 <att_req_send_process+0x82>
   3067a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   3067e:	b102      	cbz	r2, 30682 <att_req_send_process+0x42>
   30680:	3a88      	subs	r2, #136	; 0x88
{
   30682:	4634      	mov	r4, r6
   30684:	4616      	mov	r6, r2
		if (chan->req) {
   30686:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   30688:	2a00      	cmp	r2, #0
   3068a:	d1f5      	bne.n	30678 <att_req_send_process+0x38>
		if (!req && prev &&
   3068c:	2d00      	cmp	r5, #0
   3068e:	d0e6      	beq.n	3065e <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   30690:	4638      	mov	r0, r7
   30692:	f7ff fd3b 	bl	3010c <sys_slist_get>
	if (node) {
   30696:	4605      	mov	r5, r0
   30698:	b908      	cbnz	r0, 3069e <att_req_send_process+0x5e>
   3069a:	4623      	mov	r3, r4
   3069c:	e7ec      	b.n	30678 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   3069e:	4601      	mov	r1, r0
   306a0:	4620      	mov	r0, r4
   306a2:	f7e4 ff61 	bl	15568 <bt_att_chan_req_send>
   306a6:	2800      	cmp	r0, #0
   306a8:	da0b      	bge.n	306c2 <att_req_send_process+0x82>
	return list->head;
   306aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   306ae:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   306b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   306b4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   306b8:	2b00      	cmp	r3, #0
   306ba:	d1ee      	bne.n	3069a <att_req_send_process+0x5a>
	list->tail = node;
   306bc:	f8c8 5008 	str.w	r5, [r8, #8]
}
   306c0:	e7eb      	b.n	3069a <att_req_send_process+0x5a>
}
   306c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000306c6 <bt_att_status>:
{
   306c6:	b538      	push	{r3, r4, r5, lr}
   306c8:	4605      	mov	r5, r0
   306ca:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   306cc:	2100      	movs	r1, #0
   306ce:	f7ff fd41 	bl	30154 <atomic_test_bit>
   306d2:	b1b8      	cbz	r0, 30704 <bt_att_status+0x3e>
	if (!chan->att) {
   306d4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   306d8:	b1a0      	cbz	r0, 30704 <bt_att_status+0x3e>
	if (chan->req) {
   306da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   306dc:	b993      	cbnz	r3, 30704 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   306de:	3004      	adds	r0, #4
   306e0:	f7ff fd14 	bl	3010c <sys_slist_get>
	if (!node) {
   306e4:	4604      	mov	r4, r0
   306e6:	b168      	cbz	r0, 30704 <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   306e8:	4601      	mov	r1, r0
   306ea:	1f28      	subs	r0, r5, #4
   306ec:	f7e4 ff3c 	bl	15568 <bt_att_chan_req_send>
   306f0:	2800      	cmp	r0, #0
   306f2:	da07      	bge.n	30704 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   306f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   306f8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   306fa:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   306fc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   306fe:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   30700:	b902      	cbnz	r2, 30704 <bt_att_status+0x3e>
	list->tail = node;
   30702:	609c      	str	r4, [r3, #8]
}
   30704:	bd38      	pop	{r3, r4, r5, pc}

00030706 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   30706:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   30708:	6883      	ldr	r3, [r0, #8]
   3070a:	699b      	ldr	r3, [r3, #24]
   3070c:	b10b      	cbz	r3, 30712 <att_sent+0xc>
		chan->ops->sent(chan);
   3070e:	3004      	adds	r0, #4
   30710:	4718      	bx	r3
}
   30712:	4770      	bx	lr

00030714 <att_tx_complete>:
{
   30714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30718:	4606      	mov	r6, r0
   3071a:	460d      	mov	r5, r1
	if (!err) {
   3071c:	4614      	mov	r4, r2
   3071e:	b122      	cbz	r2, 3072a <att_tx_complete+0x16>
}
   30720:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   30724:	4608      	mov	r0, r1
   30726:	f7e4 bdb3 	b.w	15290 <tx_meta_data_free>
		att_sent(conn, user_data);
   3072a:	f7ff ffec 	bl	30706 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   3072e:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   30730:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   30732:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   30736:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   3073a:	f7e4 fda9 	bl	15290 <tx_meta_data_free>
	if (!err && func) {
   3073e:	b92f      	cbnz	r7, 3074c <att_tx_complete+0x38>
}
   30740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   30744:	4649      	mov	r1, r9
   30746:	4630      	mov	r0, r6
   30748:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   3074a:	3401      	adds	r4, #1
   3074c:	b2a3      	uxth	r3, r4
   3074e:	4543      	cmp	r3, r8
   30750:	d3f8      	bcc.n	30744 <att_tx_complete+0x30>
   30752:	e7f5      	b.n	30740 <att_tx_complete+0x2c>

00030754 <att_req_sent>:
{
   30754:	b510      	push	{r4, lr}
   30756:	460c      	mov	r4, r1
	if (!err) {
   30758:	b90a      	cbnz	r2, 3075e <att_req_sent+0xa>
		att_sent(conn, user_data);
   3075a:	f7ff ffd4 	bl	30706 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   3075e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   30760:	6b83      	ldr	r3, [r0, #56]	; 0x38
   30762:	b12b      	cbz	r3, 30770 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   30764:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   30768:	2300      	movs	r3, #0
   3076a:	3058      	adds	r0, #88	; 0x58
   3076c:	f7f8 fffe 	bl	2976c <k_work_reschedule>
	tx_meta_data_free(user_data);
   30770:	4620      	mov	r0, r4
}
   30772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   30776:	f7e4 bd8b 	b.w	15290 <tx_meta_data_free>

0003077a <att_cfm_sent>:
{
   3077a:	b510      	push	{r4, lr}
   3077c:	460c      	mov	r4, r1
	if (!err) {
   3077e:	b90a      	cbnz	r2, 30784 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   30780:	f7ff ffc1 	bl	30706 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   30784:	6820      	ldr	r0, [r4, #0]
   30786:	2101      	movs	r1, #1
   30788:	3034      	adds	r0, #52	; 0x34
   3078a:	f7ff feb7 	bl	304fc <atomic_clear_bit>
	tx_meta_data_free(data);
   3078e:	4620      	mov	r0, r4
}
   30790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   30794:	f7e4 bd7c 	b.w	15290 <tx_meta_data_free>

00030798 <att_rsp_sent>:
{
   30798:	b510      	push	{r4, lr}
   3079a:	460c      	mov	r4, r1
	if (!err) {
   3079c:	b90a      	cbnz	r2, 307a2 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   3079e:	f7ff ffb2 	bl	30706 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   307a2:	6820      	ldr	r0, [r4, #0]
   307a4:	2100      	movs	r1, #0
   307a6:	3034      	adds	r0, #52	; 0x34
   307a8:	f7ff fea8 	bl	304fc <atomic_clear_bit>
	tx_meta_data_free(data);
   307ac:	4620      	mov	r0, r4
}
   307ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   307b2:	f7e4 bd6d 	b.w	15290 <tx_meta_data_free>

000307b6 <att_indicate>:
{
   307b6:	b570      	push	{r4, r5, r6, lr}
   307b8:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   307ba:	f101 000c 	add.w	r0, r1, #12
   307be:	460d      	mov	r5, r1
   307c0:	f000 fd09 	bl	311d6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   307c4:	6826      	ldr	r6, [r4, #0]
   307c6:	4601      	mov	r1, r0
   307c8:	8a2b      	ldrh	r3, [r5, #16]
   307ca:	68ea      	ldr	r2, [r5, #12]
   307cc:	6830      	ldr	r0, [r6, #0]
   307ce:	f000 fc5a 	bl	31086 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   307d2:	211e      	movs	r1, #30
   307d4:	2200      	movs	r2, #0
   307d6:	4620      	mov	r0, r4
   307d8:	f7e5 f88c 	bl	158f4 <bt_att_chan_create_pdu>
	if (!buf) {
   307dc:	4601      	mov	r1, r0
   307de:	b110      	cbz	r0, 307e6 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   307e0:	4620      	mov	r0, r4
   307e2:	f7ff fdd9 	bl	30398 <bt_att_chan_send_rsp>
}
   307e6:	2000      	movs	r0, #0
   307e8:	bd70      	pop	{r4, r5, r6, pc}

000307ea <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   307ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   307ee:	4688      	mov	r8, r1
   307f0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   307f2:	2101      	movs	r1, #1
   307f4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   307f6:	4605      	mov	r5, r0
   307f8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   307fa:	f7e5 f87b 	bl	158f4 <bt_att_chan_create_pdu>
	if (!buf) {
   307fe:	4604      	mov	r4, r0
   30800:	b170      	cbz	r0, 30820 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   30802:	2104      	movs	r1, #4
   30804:	300c      	adds	r0, #12
   30806:	f7e7 ff37 	bl	18678 <net_buf_simple_add>
	rsp->request = req;
   3080a:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   3080e:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   30812:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   30814:	4621      	mov	r1, r4
   30816:	4628      	mov	r0, r5
}
   30818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   3081c:	f7ff bdbc 	b.w	30398 <bt_att_chan_send_rsp>
}
   30820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030824 <att_write_req>:
{
   30824:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30826:	460c      	mov	r4, r1
   30828:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   3082a:	f101 000c 	add.w	r0, r1, #12
   3082e:	f000 fcd2 	bl	311d6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   30832:	8a22      	ldrh	r2, [r4, #16]
   30834:	4603      	mov	r3, r0
   30836:	9201      	str	r2, [sp, #4]
   30838:	68e2      	ldr	r2, [r4, #12]
   3083a:	2112      	movs	r1, #18
   3083c:	9200      	str	r2, [sp, #0]
   3083e:	4628      	mov	r0, r5
   30840:	2213      	movs	r2, #19
   30842:	f7e5 f97b 	bl	15b3c <att_write_rsp.constprop.0>
}
   30846:	b003      	add	sp, #12
   30848:	bd30      	pop	{r4, r5, pc}

0003084a <att_write_cmd>:
{
   3084a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3084c:	460c      	mov	r4, r1
   3084e:	4605      	mov	r5, r0
   30850:	f101 000c 	add.w	r0, r1, #12
   30854:	f000 fcbf 	bl	311d6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   30858:	8a22      	ldrh	r2, [r4, #16]
   3085a:	4603      	mov	r3, r0
   3085c:	9201      	str	r2, [sp, #4]
   3085e:	68e2      	ldr	r2, [r4, #12]
   30860:	4628      	mov	r0, r5
   30862:	9200      	str	r2, [sp, #0]
   30864:	2200      	movs	r2, #0
   30866:	4611      	mov	r1, r2
   30868:	f7e5 f968 	bl	15b3c <att_write_rsp.constprop.0>
}
   3086c:	b003      	add	sp, #12
   3086e:	bd30      	pop	{r4, r5, pc}

00030870 <att_read_blob_req>:
{
   30870:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   30872:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   30874:	210c      	movs	r1, #12
   30876:	8813      	ldrh	r3, [r2, #0]
   30878:	8852      	ldrh	r2, [r2, #2]
   3087a:	9200      	str	r2, [sp, #0]
   3087c:	220d      	movs	r2, #13
   3087e:	f7e5 fb21 	bl	15ec4 <att_read_rsp>
}
   30882:	b003      	add	sp, #12
   30884:	f85d fb04 	ldr.w	pc, [sp], #4

00030888 <att_read_req>:
{
   30888:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3088a:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   3088c:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3088e:	210a      	movs	r1, #10
   30890:	881b      	ldrh	r3, [r3, #0]
   30892:	9200      	str	r2, [sp, #0]
   30894:	220b      	movs	r2, #11
   30896:	f7e5 fb15 	bl	15ec4 <att_read_rsp>
}
   3089a:	b003      	add	sp, #12
   3089c:	f85d fb04 	ldr.w	pc, [sp], #4

000308a0 <att_mtu_req>:
{
   308a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   308a4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   308a6:	f850 2b34 	ldr.w	r2, [r0], #52
{
   308aa:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   308ac:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   308ae:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   308b0:	f7ff fc50 	bl	30154 <atomic_test_bit>
   308b4:	4604      	mov	r4, r0
   308b6:	bb48      	cbnz	r0, 3090c <att_mtu_req+0x6c>
	mtu_client = sys_le16_to_cpu(req->mtu);
   308b8:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   308ba:	881b      	ldrh	r3, [r3, #0]
   308bc:	2b16      	cmp	r3, #22
   308be:	d927      	bls.n	30910 <att_mtu_req+0x70>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   308c0:	2202      	movs	r2, #2
   308c2:	4630      	mov	r0, r6
   308c4:	f7e5 f99e 	bl	15c04 <bt_att_create_pdu>
	if (!pdu) {
   308c8:	4607      	mov	r7, r0
   308ca:	b318      	cbz	r0, 30914 <att_mtu_req+0x74>
	return net_buf_simple_add(&buf->b, len);
   308cc:	2102      	movs	r1, #2
   308ce:	300c      	adds	r0, #12
   308d0:	f7e7 fed2 	bl	18678 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   308d4:	f04f 0817 	mov.w	r8, #23
   308d8:	7044      	strb	r4, [r0, #1]
   308da:	f880 8000 	strb.w	r8, [r0]
	bt_att_chan_send_rsp(chan, pdu);
   308de:	4639      	mov	r1, r7
   308e0:	4628      	mov	r0, r5
   308e2:	f7ff fd59 	bl	30398 <bt_att_chan_send_rsp>
   308e6:	3604      	adds	r6, #4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   308e8:	f8a5 801a 	strh.w	r8, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   308ec:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
   308f0:	e8d6 3fef 	ldaex	r3, [r6]
   308f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   308f8:	e8c6 3fe2 	stlex	r2, r3, [r6]
   308fc:	2a00      	cmp	r2, #0
   308fe:	d1f7      	bne.n	308f0 <att_mtu_req+0x50>
	att_chan_mtu_updated(chan);
   30900:	4628      	mov	r0, r5
   30902:	f7ff fc46 	bl	30192 <att_chan_mtu_updated>
	return 0;
   30906:	4620      	mov	r0, r4
}
   30908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   3090c:	2006      	movs	r0, #6
   3090e:	e7fb      	b.n	30908 <att_mtu_req+0x68>
		return BT_ATT_ERR_INVALID_PDU;
   30910:	2004      	movs	r0, #4
   30912:	e7f9      	b.n	30908 <att_mtu_req+0x68>
		return BT_ATT_ERR_UNLIKELY;
   30914:	200e      	movs	r0, #14
   30916:	e7f7      	b.n	30908 <att_mtu_req+0x68>

00030918 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   30918:	8a0a      	ldrh	r2, [r1, #16]
   3091a:	2300      	movs	r3, #0
   3091c:	68c9      	ldr	r1, [r1, #12]
   3091e:	f7e5 bc7f 	b.w	16220 <att_handle_rsp>

00030922 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   30922:	f7ff bff9 	b.w	30918 <att_handle_find_info_rsp>

00030926 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   30926:	f7ff bff7 	b.w	30918 <att_handle_find_info_rsp>

0003092a <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   3092a:	f7ff bff5 	b.w	30918 <att_handle_find_info_rsp>

0003092e <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   3092e:	f7ff bff3 	b.w	30918 <att_handle_find_info_rsp>

00030932 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   30932:	f7ff bff1 	b.w	30918 <att_handle_find_info_rsp>

00030936 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   30936:	f7ff bfef 	b.w	30918 <att_handle_find_info_rsp>

0003093a <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   3093a:	f7ff bfed 	b.w	30918 <att_handle_find_info_rsp>

0003093e <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   3093e:	f7ff bfeb 	b.w	30918 <att_handle_find_info_rsp>

00030942 <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   30942:	f7ff bfe9 	b.w	30918 <att_handle_find_info_rsp>

00030946 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   30946:	f7ff bfe7 	b.w	30918 <att_handle_find_info_rsp>

0003094a <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   3094a:	f7ff bfe5 	b.w	30918 <att_handle_find_info_rsp>

0003094e <att_mtu_rsp>:
{
   3094e:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   30950:	68ce      	ldr	r6, [r1, #12]
{
   30952:	4604      	mov	r4, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   30954:	8833      	ldrh	r3, [r6, #0]
{
   30956:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   30958:	2b16      	cmp	r3, #22
   3095a:	d806      	bhi.n	3096a <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   3095c:	2200      	movs	r2, #0
   3095e:	2304      	movs	r3, #4
   30960:	4611      	mov	r1, r2
}
   30962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   30966:	f7e5 bc5b 	b.w	16220 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   3096a:	2317      	movs	r3, #23
   3096c:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3096e:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   30970:	f7ff fc0f 	bl	30192 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   30974:	2300      	movs	r3, #0
   30976:	4631      	mov	r1, r6
   30978:	4620      	mov	r0, r4
   3097a:	8a2a      	ldrh	r2, [r5, #16]
   3097c:	e7f1      	b.n	30962 <att_mtu_rsp+0x14>

0003097e <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   3097e:	b510      	push	{r4, lr}
   30980:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   30982:	f7e4 fe33 	bl	155ec <att_get>
	if (!att) {
   30986:	b190      	cbz	r0, 309ae <bt_att_find_req_by_user_data+0x30>
	return list->head;
   30988:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3098a:	b143      	cbz	r3, 3099e <bt_att_find_req_by_user_data+0x20>
		if (chan->req->user_data == user_data) {
   3098c:	f853 2c50 	ldr.w	r2, [r3, #-80]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   30990:	3b88      	subs	r3, #136	; 0x88
		if (chan->req->user_data == user_data) {
   30992:	68d1      	ldr	r1, [r2, #12]
   30994:	42a1      	cmp	r1, r4
   30996:	d009      	beq.n	309ac <bt_att_find_req_by_user_data+0x2e>
	return node->next;
   30998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   3099c:	e7f5      	b.n	3098a <bt_att_find_req_by_user_data+0xc>
	return list->head;
   3099e:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   309a0:	b128      	cbz	r0, 309ae <bt_att_find_req_by_user_data+0x30>
		if (req->user_data == user_data) {
   309a2:	68c3      	ldr	r3, [r0, #12]
   309a4:	42a3      	cmp	r3, r4
   309a6:	d002      	beq.n	309ae <bt_att_find_req_by_user_data+0x30>
	return node->next;
   309a8:	6800      	ldr	r0, [r0, #0]
   309aa:	e7f9      	b.n	309a0 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   309ac:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   309ae:	bd10      	pop	{r4, pc}

000309b0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   309b0:	2001      	movs	r0, #1
   309b2:	4770      	bx	lr

000309b4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   309b4:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   309b6:	f7e4 fe19 	bl	155ec <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   309ba:	b150      	cbz	r0, 309d2 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   309bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   309be:	b144      	cbz	r4, 309d2 <bt_att_clear_out_of_sync_sent+0x1e>
   309c0:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   309c2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   309c6:	2105      	movs	r1, #5
   309c8:	f7ff fd98 	bl	304fc <atomic_clear_bit>
	return node->next;
   309cc:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   309d0:	e7f5      	b.n	309be <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   309d2:	bd10      	pop	{r4, pc}

000309d4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   309d4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   309d6:	2104      	movs	r1, #4
   309d8:	f7ff fb8e 	bl	300f8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   309dc:	b128      	cbz	r0, 309ea <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   309de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   309e2:	2105      	movs	r1, #5
   309e4:	3030      	adds	r0, #48	; 0x30
   309e6:	f7ff bbb5 	b.w	30154 <atomic_test_bit>
}
   309ea:	bd08      	pop	{r3, pc}

000309ec <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   309ec:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   309ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   309f2:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   309f4:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   309f6:	8082      	strh	r2, [r0, #4]
}
   309f8:	4770      	bx	lr

000309fa <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   309fa:	6010      	str	r0, [r2, #0]
}
   309fc:	2000      	movs	r0, #0
   309fe:	4770      	bx	lr

00030a00 <gatt_ccc_changed>:
{
   30a00:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   30a02:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   30a04:	895a      	ldrh	r2, [r3, #10]
   30a06:	428a      	cmp	r2, r1
   30a08:	d003      	beq.n	30a12 <gatt_ccc_changed+0x12>
		ccc->value = value;
   30a0a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   30a0c:	68db      	ldr	r3, [r3, #12]
   30a0e:	b103      	cbz	r3, 30a12 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   30a10:	4718      	bx	r3
}
   30a12:	4770      	bx	lr

00030a14 <gatt_indicate_rsp>:
{
   30a14:	b510      	push	{r4, lr}
   30a16:	9c02      	ldr	r4, [sp, #8]
   30a18:	460a      	mov	r2, r1
	if (params->func) {
   30a1a:	68a3      	ldr	r3, [r4, #8]
   30a1c:	b10b      	cbz	r3, 30a22 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   30a1e:	4621      	mov	r1, r4
   30a20:	4798      	blx	r3
	params->_ref--;
   30a22:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   30a24:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   30a26:	3b01      	subs	r3, #1
   30a28:	b2db      	uxtb	r3, r3
   30a2a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   30a2c:	b122      	cbz	r2, 30a38 <gatt_indicate_rsp+0x24>
   30a2e:	b91b      	cbnz	r3, 30a38 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   30a30:	4620      	mov	r0, r4
}
   30a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   30a36:	4710      	bx	r2
}
   30a38:	bd10      	pop	{r4, pc}

00030a3a <match_uuid>:
	data->attr = attr;
   30a3a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   30a3c:	8091      	strh	r1, [r2, #4]
}
   30a3e:	2000      	movs	r0, #0
   30a40:	4770      	bx	lr

00030a42 <ccc_set_cb>:
}
   30a42:	2000      	movs	r0, #0
   30a44:	4770      	bx	lr

00030a46 <gen_hash_m>:
{
   30a46:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   30a48:	6807      	ldr	r7, [r0, #0]
{
   30a4a:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   30a4c:	783d      	ldrb	r5, [r7, #0]
{
   30a4e:	4614      	mov	r4, r2
   30a50:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   30a52:	b9dd      	cbnz	r5, 30a8c <gen_hash_m+0x46>
	switch (u16->val) {
   30a54:	887b      	ldrh	r3, [r7, #2]
   30a56:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   30a5a:	d004      	beq.n	30a66 <gen_hash_m+0x20>
   30a5c:	d810      	bhi.n	30a80 <gen_hash_m+0x3a>
   30a5e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   30a62:	2b03      	cmp	r3, #3
   30a64:	d812      	bhi.n	30a8c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   30a66:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30a6a:	2202      	movs	r2, #2
   30a6c:	4620      	mov	r0, r4
   30a6e:	f10d 010a 	add.w	r1, sp, #10
   30a72:	f7fe fd54 	bl	2f51e <tc_cmac_update>
   30a76:	b968      	cbnz	r0, 30a94 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   30a78:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   30a7c:	65a2      	str	r2, [r4, #88]	; 0x58
   30a7e:	e006      	b.n	30a8e <gen_hash_m+0x48>
	switch (u16->val) {
   30a80:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   30a84:	33ff      	adds	r3, #255	; 0xff
   30a86:	b29b      	uxth	r3, r3
   30a88:	2b04      	cmp	r3, #4
   30a8a:	d91e      	bls.n	30aca <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   30a8c:	2501      	movs	r5, #1
}
   30a8e:	4628      	mov	r0, r5
   30a90:	b009      	add	sp, #36	; 0x24
   30a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   30a94:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30a96:	2202      	movs	r2, #2
   30a98:	4620      	mov	r0, r4
   30a9a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   30a9e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30aa2:	f7fe fd3c 	bl	2f51e <tc_cmac_update>
   30aa6:	2800      	cmp	r0, #0
   30aa8:	d0e6      	beq.n	30a78 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   30aaa:	2000      	movs	r0, #0
   30aac:	9000      	str	r0, [sp, #0]
   30aae:	aa03      	add	r2, sp, #12
   30ab0:	2313      	movs	r3, #19
   30ab2:	4631      	mov	r1, r6
   30ab4:	6877      	ldr	r7, [r6, #4]
   30ab6:	47b8      	blx	r7
		if (len < 0) {
   30ab8:	1e02      	subs	r2, r0, #0
   30aba:	dbdf      	blt.n	30a7c <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   30abc:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30abe:	4620      	mov	r0, r4
   30ac0:	f7fe fd2d 	bl	2f51e <tc_cmac_update>
   30ac4:	2800      	cmp	r0, #0
   30ac6:	d1e1      	bne.n	30a8c <gen_hash_m+0x46>
   30ac8:	e7d6      	b.n	30a78 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   30aca:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30ace:	2202      	movs	r2, #2
   30ad0:	4620      	mov	r0, r4
   30ad2:	f10d 010a 	add.w	r1, sp, #10
   30ad6:	f7fe fd22 	bl	2f51e <tc_cmac_update>
   30ada:	2800      	cmp	r0, #0
   30adc:	d0cc      	beq.n	30a78 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   30ade:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30ae0:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   30ae2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   30ae6:	f10d 010a 	add.w	r1, sp, #10
   30aea:	e7e8      	b.n	30abe <gen_hash_m+0x78>

00030aec <bt_addr_le_eq>:
   30aec:	2207      	movs	r2, #7
{
   30aee:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   30af0:	f004 fa6c 	bl	34fcc <memcmp>
}
   30af4:	fab0 f080 	clz	r0, r0
   30af8:	0940      	lsrs	r0, r0, #5
   30afa:	bd08      	pop	{r3, pc}

00030afc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30afc:	e8d0 0faf 	lda	r0, [r0]
}
   30b00:	4770      	bx	lr

00030b02 <atomic_or>:
{
   30b02:	4603      	mov	r3, r0
   30b04:	b510      	push	{r4, lr}
}
   30b06:	e8d3 0fef 	ldaex	r0, [r3]
   30b0a:	ea40 0201 	orr.w	r2, r0, r1
   30b0e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   30b12:	2c00      	cmp	r4, #0
   30b14:	d1f7      	bne.n	30b06 <atomic_or+0x4>
   30b16:	bd10      	pop	{r4, pc}

00030b18 <atomic_and>:
{
   30b18:	4603      	mov	r3, r0
   30b1a:	b510      	push	{r4, lr}
}
   30b1c:	e8d3 0fef 	ldaex	r0, [r3]
   30b20:	ea00 0201 	and.w	r2, r0, r1
   30b24:	e8c3 2fe4 	stlex	r4, r2, [r3]
   30b28:	2c00      	cmp	r4, #0
   30b2a:	d1f7      	bne.n	30b1c <atomic_and+0x4>
   30b2c:	bd10      	pop	{r4, pc}

00030b2e <read_included_uuid_encode>:
{
   30b2e:	b510      	push	{r4, lr}
   30b30:	4614      	mov	r4, r2
   30b32:	2102      	movs	r1, #2
   30b34:	300c      	adds	r0, #12
   30b36:	f7e7 fd9f 	bl	18678 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   30b3a:	8963      	ldrh	r3, [r4, #10]
   30b3c:	8003      	strh	r3, [r0, #0]
}
   30b3e:	2000      	movs	r0, #0
   30b40:	bd10      	pop	{r4, pc}

00030b42 <gatt_find_info_encode>:
{
   30b42:	b510      	push	{r4, lr}
   30b44:	4614      	mov	r4, r2
   30b46:	2104      	movs	r1, #4
   30b48:	300c      	adds	r0, #12
   30b4a:	f7e7 fd95 	bl	18678 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   30b4e:	8923      	ldrh	r3, [r4, #8]
   30b50:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   30b52:	89e3      	ldrh	r3, [r4, #14]
   30b54:	8043      	strh	r3, [r0, #2]
}
   30b56:	2000      	movs	r0, #0
   30b58:	bd10      	pop	{r4, pc}

00030b5a <gatt_read_group_encode>:
{
   30b5a:	b538      	push	{r3, r4, r5, lr}
   30b5c:	4615      	mov	r5, r2
   30b5e:	f100 040c 	add.w	r4, r0, #12
   30b62:	2104      	movs	r1, #4
   30b64:	4620      	mov	r0, r4
   30b66:	f7e7 fd87 	bl	18678 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   30b6a:	892b      	ldrh	r3, [r5, #8]
   30b6c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   30b6e:	89eb      	ldrh	r3, [r5, #14]
   30b70:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   30b72:	7c2b      	ldrb	r3, [r5, #16]
   30b74:	b933      	cbnz	r3, 30b84 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   30b76:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   30b7a:	4620      	mov	r0, r4
   30b7c:	f000 fb52 	bl	31224 <net_buf_simple_add_le16>
}
   30b80:	2000      	movs	r0, #0
   30b82:	bd38      	pop	{r3, r4, r5, pc}
   30b84:	f642 0101 	movw	r1, #10241	; 0x2801
   30b88:	e7f7      	b.n	30b7a <gatt_read_group_encode+0x20>

00030b8a <gatt_read_type_encode>:
{
   30b8a:	b538      	push	{r3, r4, r5, lr}
   30b8c:	4615      	mov	r5, r2
	return net_buf_simple_add(&buf->b, len);
   30b8e:	f100 040c 	add.w	r4, r0, #12
   30b92:	2104      	movs	r1, #4
   30b94:	4620      	mov	r0, r4
   30b96:	f7e7 fd6f 	bl	18678 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   30b9a:	892b      	ldrh	r3, [r5, #8]
   30b9c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   30b9e:	89eb      	ldrh	r3, [r5, #14]
   30ba0:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   30ba2:	7c2b      	ldrb	r3, [r5, #16]
   30ba4:	2b02      	cmp	r3, #2
   30ba6:	d004      	beq.n	30bb2 <gatt_read_type_encode+0x28>
   30ba8:	2b03      	cmp	r3, #3
   30baa:	d009      	beq.n	30bc0 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   30bac:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   30bae:	8859      	ldrh	r1, [r3, #2]
   30bb0:	e001      	b.n	30bb6 <gatt_read_type_encode+0x2c>
   30bb2:	f642 0102 	movw	r1, #10242	; 0x2802
   30bb6:	4620      	mov	r0, r4
   30bb8:	f000 fb34 	bl	31224 <net_buf_simple_add_le16>
}
   30bbc:	2000      	movs	r0, #0
   30bbe:	bd38      	pop	{r3, r4, r5, pc}
   30bc0:	f642 0103 	movw	r1, #10243	; 0x2803
   30bc4:	e7f7      	b.n	30bb6 <gatt_read_type_encode+0x2c>

00030bc6 <bt_addr_le_copy>:
   30bc6:	680b      	ldr	r3, [r1, #0]
   30bc8:	6003      	str	r3, [r0, #0]
   30bca:	888b      	ldrh	r3, [r1, #4]
   30bcc:	8083      	strh	r3, [r0, #4]
   30bce:	798b      	ldrb	r3, [r1, #6]
   30bd0:	7183      	strb	r3, [r0, #6]
}
   30bd2:	4770      	bx	lr

00030bd4 <gatt_sub_remove>:
{
   30bd4:	b538      	push	{r3, r4, r5, lr}
   30bd6:	460c      	mov	r4, r1
	if (params) {
   30bd8:	4619      	mov	r1, r3
   30bda:	b16b      	cbz	r3, 30bf8 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   30bdc:	f103 0518 	add.w	r5, r3, #24
   30be0:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   30be2:	b982      	cbnz	r2, 30c06 <gatt_sub_remove+0x32>
   30be4:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   30be6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   30be8:	4295      	cmp	r5, r2
   30bea:	d100      	bne.n	30bee <gatt_sub_remove+0x1a>
	list->tail = node;
   30bec:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   30bee:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   30bf0:	680d      	ldr	r5, [r1, #0]
   30bf2:	461a      	mov	r2, r3
   30bf4:	618b      	str	r3, [r1, #24]
   30bf6:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   30bf8:	68a3      	ldr	r3, [r4, #8]
   30bfa:	b953      	cbnz	r3, 30c12 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   30bfc:	4620      	mov	r0, r4
}
   30bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   30c02:	f7e5 bcf9 	b.w	165f8 <gatt_sub_free>
   30c06:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   30c08:	68e3      	ldr	r3, [r4, #12]
   30c0a:	429d      	cmp	r5, r3
	list->tail = node;
   30c0c:	bf08      	it	eq
   30c0e:	60e2      	streq	r2, [r4, #12]
}
   30c10:	e7ed      	b.n	30bee <gatt_sub_remove+0x1a>
}
   30c12:	bd38      	pop	{r3, r4, r5, pc}

00030c14 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   30c14:	2300      	movs	r3, #0
   30c16:	6003      	str	r3, [r0, #0]
   30c18:	6043      	str	r3, [r0, #4]
   30c1a:	6083      	str	r3, [r0, #8]
}
   30c1c:	4770      	bx	lr

00030c1e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   30c1e:	b538      	push	{r3, r4, r5, lr}
   30c20:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   30c24:	4615      	mov	r5, r2
	if (offset > value_len) {
   30c26:	4294      	cmp	r4, r2
   30c28:	d30a      	bcc.n	30c40 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   30c2a:	1aa4      	subs	r4, r4, r2
   30c2c:	428c      	cmp	r4, r1
   30c2e:	bfa8      	it	ge
   30c30:	460c      	movge	r4, r1
   30c32:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30c34:	4622      	mov	r2, r4
   30c36:	1959      	adds	r1, r3, r5
   30c38:	f004 f9d8 	bl	34fec <memcpy>
}
   30c3c:	4620      	mov	r0, r4
   30c3e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   30c40:	f06f 0406 	mvn.w	r4, #6
   30c44:	e7fa      	b.n	30c3c <bt_gatt_attr_read.constprop.0+0x1e>

00030c46 <bt_gatt_attr_read_ccc>:
{
   30c46:	b530      	push	{r4, r5, lr}
   30c48:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   30c4a:	68c9      	ldr	r1, [r1, #12]
{
   30c4c:	4614      	mov	r4, r2
   30c4e:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   30c50:	f7e5 fca6 	bl	165a0 <find_ccc_cfg>
	if (cfg) {
   30c54:	b100      	cbz	r0, 30c58 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   30c56:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   30c58:	2302      	movs	r3, #2
   30c5a:	f8ad 000e 	strh.w	r0, [sp, #14]
   30c5e:	9300      	str	r3, [sp, #0]
   30c60:	4629      	mov	r1, r5
   30c62:	4620      	mov	r0, r4
   30c64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   30c68:	f10d 030e 	add.w	r3, sp, #14
   30c6c:	f7ff ffd7 	bl	30c1e <bt_gatt_attr_read.constprop.0>
}
   30c70:	b005      	add	sp, #20
   30c72:	bd30      	pop	{r4, r5, pc}

00030c74 <bt_gatt_attr_read_service>:
{
   30c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   30c76:	460c      	mov	r4, r1
   30c78:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   30c7a:	68e3      	ldr	r3, [r4, #12]
{
   30c7c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   30c7e:	781c      	ldrb	r4, [r3, #0]
{
   30c80:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   30c84:	b13c      	cbz	r4, 30c96 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   30c86:	2410      	movs	r4, #16
   30c88:	3301      	adds	r3, #1
   30c8a:	9406      	str	r4, [sp, #24]
}
   30c8c:	b004      	add	sp, #16
   30c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   30c92:	f7ff bfc4 	b.w	30c1e <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   30c96:	885b      	ldrh	r3, [r3, #2]
   30c98:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   30c9c:	2302      	movs	r3, #2
   30c9e:	9300      	str	r3, [sp, #0]
   30ca0:	f10d 030e 	add.w	r3, sp, #14
   30ca4:	f7ff ffbb 	bl	30c1e <bt_gatt_attr_read.constprop.0>
}
   30ca8:	b004      	add	sp, #16
   30caa:	bd10      	pop	{r4, pc}

00030cac <cf_read>:
{
   30cac:	b530      	push	{r4, r5, lr}
   30cae:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   30cb0:	2300      	movs	r3, #0
{
   30cb2:	b085      	sub	sp, #20
   30cb4:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   30cb6:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   30cba:	f7e5 fc47 	bl	1654c <find_cf_cfg>
	if (cfg) {
   30cbe:	b110      	cbz	r0, 30cc6 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   30cc0:	7a03      	ldrb	r3, [r0, #8]
   30cc2:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   30cc6:	2301      	movs	r3, #1
   30cc8:	4629      	mov	r1, r5
   30cca:	9300      	str	r3, [sp, #0]
   30ccc:	4620      	mov	r0, r4
   30cce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   30cd2:	ab03      	add	r3, sp, #12
   30cd4:	f7ff ffa3 	bl	30c1e <bt_gatt_attr_read.constprop.0>
}
   30cd8:	b005      	add	sp, #20
   30cda:	bd30      	pop	{r4, r5, pc}

00030cdc <read_name>:
{
   30cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30ce0:	4614      	mov	r4, r2
   30ce2:	461d      	mov	r5, r3
   30ce4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   30ce8:	f7e2 fba0 	bl	1342c <bt_get_name>
   30cec:	4606      	mov	r6, r0
				 strlen(name));
   30cee:	f7d8 fb14 	bl	931a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   30cf2:	b280      	uxth	r0, r0
   30cf4:	9006      	str	r0, [sp, #24]
   30cf6:	4633      	mov	r3, r6
   30cf8:	463a      	mov	r2, r7
   30cfa:	4629      	mov	r1, r5
   30cfc:	4620      	mov	r0, r4
}
   30cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   30d02:	f7ff bf8c 	b.w	30c1e <bt_gatt_attr_read.constprop.0>

00030d06 <read_appearance>:
{
   30d06:	b530      	push	{r4, r5, lr}
   30d08:	b085      	sub	sp, #20
   30d0a:	4614      	mov	r4, r2
   30d0c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   30d0e:	f7ff f872 	bl	2fdf6 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   30d12:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   30d14:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   30d18:	9300      	str	r3, [sp, #0]
   30d1a:	4629      	mov	r1, r5
   30d1c:	4620      	mov	r0, r4
   30d1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   30d22:	f10d 030e 	add.w	r3, sp, #14
   30d26:	f7ff ff7a 	bl	30c1e <bt_gatt_attr_read.constprop.0>
}
   30d2a:	b005      	add	sp, #20
   30d2c:	bd30      	pop	{r4, r5, pc}

00030d2e <z_log_msg_static_create.constprop.0>:
   30d2e:	2300      	movs	r3, #0
   30d30:	f7dd bd74 	b.w	e81c <z_impl_z_log_msg_static_create>

00030d34 <sc_clear>:
{
   30d34:	b538      	push	{r3, r4, r5, lr}
   30d36:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   30d38:	f100 0590 	add.w	r5, r0, #144	; 0x90
   30d3c:	4629      	mov	r1, r5
   30d3e:	7a00      	ldrb	r0, [r0, #8]
   30d40:	f7ff f85b 	bl	2fdfa <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   30d44:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   30d46:	7a20      	ldrb	r0, [r4, #8]
   30d48:	f7e5 fc18 	bl	1657c <find_sc_cfg>
		if (cfg) {
   30d4c:	b118      	cbz	r0, 30d56 <sc_clear+0x22>
}
   30d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   30d52:	f7ff bf5f 	b.w	30c14 <clear_sc_cfg>
}
   30d56:	bd38      	pop	{r3, r4, r5, pc}

00030d58 <gatt_find_type_encode>:
{
   30d58:	b538      	push	{r3, r4, r5, lr}
   30d5a:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   30d5c:	f100 050c 	add.w	r5, r0, #12
   30d60:	2106      	movs	r1, #6
   30d62:	4628      	mov	r0, r5
   30d64:	f7e7 fc88 	bl	18678 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   30d68:	8923      	ldrh	r3, [r4, #8]
   30d6a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   30d6c:	89e3      	ldrh	r3, [r4, #14]
   30d6e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   30d70:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   30d72:	2b00      	cmp	r3, #0
   30d74:	f642 0301 	movw	r3, #10241	; 0x2801
   30d78:	bf08      	it	eq
   30d7a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   30d7e:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   30d80:	6821      	ldr	r1, [r4, #0]
   30d82:	780b      	ldrb	r3, [r1, #0]
   30d84:	b11b      	cbz	r3, 30d8e <gatt_find_type_encode+0x36>
   30d86:	2b02      	cmp	r3, #2
   30d88:	d006      	beq.n	30d98 <gatt_find_type_encode+0x40>
}
   30d8a:	2000      	movs	r0, #0
   30d8c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   30d8e:	4628      	mov	r0, r5
   30d90:	8849      	ldrh	r1, [r1, #2]
   30d92:	f000 fa47 	bl	31224 <net_buf_simple_add_le16>
}
   30d96:	e7f8      	b.n	30d8a <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   30d98:	2210      	movs	r2, #16
   30d9a:	4628      	mov	r0, r5
   30d9c:	3101      	adds	r1, #1
   30d9e:	f000 fa2e 	bl	311fe <net_buf_simple_add_mem>
   30da2:	e7f2      	b.n	30d8a <gatt_find_type_encode+0x32>

00030da4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   30da4:	2a02      	cmp	r2, #2
{
   30da6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   30da8:	d108      	bne.n	30dbc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   30daa:	2300      	movs	r3, #0
   30dac:	f100 0190 	add.w	r1, r0, #144	; 0x90
   30db0:	461a      	mov	r2, r3
   30db2:	7a00      	ldrb	r0, [r0, #8]
   30db4:	f7e5 fd06 	bl	167c4 <sc_save>
}
   30db8:	2002      	movs	r0, #2
   30dba:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   30dbc:	f7ff ffba 	bl	30d34 <sc_clear>
   30dc0:	e7fa      	b.n	30db8 <sc_ccc_cfg_write+0x14>

00030dc2 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   30dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30dc6:	4606      	mov	r6, r0
   30dc8:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   30dca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   30dce:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   30dd0:	4617      	mov	r7, r2
   30dd2:	4698      	mov	r8, r3
   30dd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   30dd8:	f7e5 f9e6 	bl	161a8 <bt_att_req_alloc>
	if (!req) {
   30ddc:	4604      	mov	r4, r0
   30dde:	b160      	cbz	r0, 30dfa <gatt_req_send.constprop.0+0x38>
	req->func = func;
   30de0:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   30de2:	60c7      	str	r7, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   30de4:	464a      	mov	r2, r9
   30de6:	4630      	mov	r0, r6
   30de8:	f89d 1020 	ldrb.w	r1, [sp, #32]
   30dec:	f7e4 ff0a 	bl	15c04 <bt_att_create_pdu>
   30df0:	4605      	mov	r5, r0
	if (!buf) {
   30df2:	b938      	cbnz	r0, 30e04 <gatt_req_send.constprop.0+0x42>
		bt_att_req_free(req);
   30df4:	4620      	mov	r0, r4
   30df6:	f7e5 f9fb 	bl	161f0 <bt_att_req_free>
		return -ENOMEM;
   30dfa:	f06f 050b 	mvn.w	r5, #11
}
   30dfe:	4628      	mov	r0, r5
   30e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   30e04:	2200      	movs	r2, #0
   30e06:	2301      	movs	r3, #1
   30e08:	4611      	mov	r1, r2
   30e0a:	f7ff fdef 	bl	309ec <bt_att_set_tx_meta_data>
	err = encode(buf, len, params);
   30e0e:	4628      	mov	r0, r5
	req->buf = buf;
   30e10:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   30e12:	463a      	mov	r2, r7
   30e14:	4649      	mov	r1, r9
   30e16:	47c0      	blx	r8
	if (err) {
   30e18:	4605      	mov	r5, r0
   30e1a:	b118      	cbz	r0, 30e24 <gatt_req_send.constprop.0+0x62>
		bt_att_req_free(req);
   30e1c:	4620      	mov	r0, r4
   30e1e:	f7e5 f9e7 	bl	161f0 <bt_att_req_free>
   30e22:	e7ec      	b.n	30dfe <gatt_req_send.constprop.0+0x3c>
	err = bt_att_req_send(conn, req);
   30e24:	4621      	mov	r1, r4
   30e26:	4630      	mov	r0, r6
   30e28:	f7e5 fb30 	bl	1648c <bt_att_req_send>
	if (err) {
   30e2c:	4605      	mov	r5, r0
   30e2e:	2800      	cmp	r0, #0
   30e30:	d0e5      	beq.n	30dfe <gatt_req_send.constprop.0+0x3c>
   30e32:	e7f3      	b.n	30e1c <gatt_req_send.constprop.0+0x5a>

00030e34 <gatt_write_ccc_buf>:
{
   30e34:	b538      	push	{r3, r4, r5, lr}
   30e36:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   30e38:	f100 050c 	add.w	r5, r0, #12
   30e3c:	2102      	movs	r1, #2
   30e3e:	4628      	mov	r0, r5
   30e40:	f7e7 fc1a 	bl	18678 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   30e44:	89e3      	ldrh	r3, [r4, #14]
   30e46:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   30e48:	8a21      	ldrh	r1, [r4, #16]
   30e4a:	4628      	mov	r0, r5
   30e4c:	f000 f9ea 	bl	31224 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   30e50:	2104      	movs	r1, #4
   30e52:	f104 0014 	add.w	r0, r4, #20
   30e56:	f7ff fe54 	bl	30b02 <atomic_or>
}
   30e5a:	2000      	movs	r0, #0
   30e5c:	bd38      	pop	{r3, r4, r5, pc}

00030e5e <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   30e5e:	2101      	movs	r1, #1
   30e60:	300c      	adds	r0, #12
   30e62:	f7ff be4e 	b.w	30b02 <atomic_or>

00030e66 <sc_restore_rsp>:
{
   30e66:	b538      	push	{r3, r4, r5, lr}
   30e68:	4604      	mov	r4, r0
   30e6a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   30e6c:	f7ff fda0 	bl	309b0 <bt_att_fixed_chan_only>
   30e70:	b140      	cbz	r0, 30e84 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   30e72:	4620      	mov	r0, r4
   30e74:	f7e5 fb6a 	bl	1654c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   30e78:	b120      	cbz	r0, 30e84 <sc_restore_rsp+0x1e>
   30e7a:	7a03      	ldrb	r3, [r0, #8]
   30e7c:	07db      	lsls	r3, r3, #31
   30e7e:	d501      	bpl.n	30e84 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   30e80:	f7ff ffed 	bl	30e5e <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   30e84:	b935      	cbnz	r5, 30e94 <sc_restore_rsp+0x2e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   30e86:	7a20      	ldrb	r0, [r4, #8]
   30e88:	f104 0190 	add.w	r1, r4, #144	; 0x90
   30e8c:	f7e5 fb76 	bl	1657c <find_sc_cfg>
		if (sc_cfg) {
   30e90:	b100      	cbz	r0, 30e94 <sc_restore_rsp+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   30e92:	6085      	str	r5, [r0, #8]
}
   30e94:	bd38      	pop	{r3, r4, r5, pc}

00030e96 <bt_gatt_attr_value_handle>:
{
   30e96:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   30e98:	4604      	mov	r4, r0
   30e9a:	b910      	cbnz	r0, 30ea2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   30e9c:	2000      	movs	r0, #0
}
   30e9e:	b002      	add	sp, #8
   30ea0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   30ea2:	2300      	movs	r3, #0
   30ea4:	f88d 3004 	strb.w	r3, [sp, #4]
   30ea8:	f642 0303 	movw	r3, #10243	; 0x2803
   30eac:	6800      	ldr	r0, [r0, #0]
   30eae:	a901      	add	r1, sp, #4
   30eb0:	f8ad 3006 	strh.w	r3, [sp, #6]
   30eb4:	f7fe fe5f 	bl	2fb76 <bt_uuid_cmp>
   30eb8:	2800      	cmp	r0, #0
   30eba:	d1ef      	bne.n	30e9c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   30ebc:	68e3      	ldr	r3, [r4, #12]
   30ebe:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   30ec0:	2800      	cmp	r0, #0
   30ec2:	d1ec      	bne.n	30e9e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   30ec4:	4620      	mov	r0, r4
   30ec6:	f7e5 fdef 	bl	16aa8 <bt_gatt_attr_get_handle>
   30eca:	3001      	adds	r0, #1
   30ecc:	b280      	uxth	r0, r0
	return handle;
   30ece:	e7e6      	b.n	30e9e <bt_gatt_attr_value_handle+0x8>

00030ed0 <bt_gatt_attr_read_chrc>:
{
   30ed0:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   30ed2:	68cc      	ldr	r4, [r1, #12]
{
   30ed4:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   30ed6:	79a3      	ldrb	r3, [r4, #6]
{
   30ed8:	b088      	sub	sp, #32
   30eda:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   30edc:	f88d 300c 	strb.w	r3, [sp, #12]
{
   30ee0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   30ee2:	f7ff ffd8 	bl	30e96 <bt_gatt_attr_value_handle>
   30ee6:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   30eea:	6824      	ldr	r4, [r4, #0]
   30eec:	7823      	ldrb	r3, [r4, #0]
   30eee:	b96b      	cbnz	r3, 30f0c <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   30ef0:	8863      	ldrh	r3, [r4, #2]
   30ef2:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   30ef6:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   30ef8:	9300      	str	r3, [sp, #0]
   30efa:	4631      	mov	r1, r6
   30efc:	4628      	mov	r0, r5
   30efe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   30f02:	ab03      	add	r3, sp, #12
   30f04:	f7ff fe8b 	bl	30c1e <bt_gatt_attr_read.constprop.0>
}
   30f08:	b008      	add	sp, #32
   30f0a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   30f0c:	1c63      	adds	r3, r4, #1
   30f0e:	f10d 020f 	add.w	r2, sp, #15
   30f12:	3411      	adds	r4, #17
   30f14:	f853 1b04 	ldr.w	r1, [r3], #4
   30f18:	42a3      	cmp	r3, r4
   30f1a:	f842 1b04 	str.w	r1, [r2], #4
   30f1e:	d1f9      	bne.n	30f14 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   30f20:	2313      	movs	r3, #19
   30f22:	e7e9      	b.n	30ef8 <bt_gatt_attr_read_chrc+0x28>

00030f24 <bt_gatt_foreach_attr>:
{
   30f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   30f26:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30f2a:	2300      	movs	r3, #0
   30f2c:	461a      	mov	r2, r3
   30f2e:	9300      	str	r3, [sp, #0]
   30f30:	f7e5 fe02 	bl	16b38 <bt_gatt_foreach_attr_type>
}
   30f34:	b005      	add	sp, #20
   30f36:	f85d fb04 	ldr.w	pc, [sp], #4

00030f3a <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   30f3a:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   30f3e:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   30f40:	d004      	beq.n	30f4c <bt_gatt_check_perm+0x12>
   30f42:	f013 0f95 	tst.w	r3, #149	; 0x95
   30f46:	d010      	beq.n	30f6a <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   30f48:	6848      	ldr	r0, [r1, #4]
   30f4a:	b170      	cbz	r0, 30f6a <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   30f4c:	f012 0f02 	tst.w	r2, #2
   30f50:	d004      	beq.n	30f5c <bt_gatt_check_perm+0x22>
   30f52:	f413 7f95 	tst.w	r3, #298	; 0x12a
   30f56:	d00a      	beq.n	30f6e <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   30f58:	6889      	ldr	r1, [r1, #8]
   30f5a:	b141      	cbz	r1, 30f6e <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   30f5c:	401a      	ands	r2, r3
	return 0;
   30f5e:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   30f62:	bf14      	ite	ne
   30f64:	2005      	movne	r0, #5
   30f66:	2000      	moveq	r0, #0
   30f68:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   30f6a:	2002      	movs	r0, #2
   30f6c:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   30f6e:	2003      	movs	r0, #3
}
   30f70:	4770      	bx	lr

00030f72 <gatt_discover_next>:
{
   30f72:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   30f74:	460b      	mov	r3, r1
{
   30f76:	4605      	mov	r5, r0
   30f78:	4614      	mov	r4, r2
	if (!last_handle)
   30f7a:	b929      	cbnz	r1, 30f88 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   30f7c:	4621      	mov	r1, r4
   30f7e:	4628      	mov	r0, r5
   30f80:	f7e6 fa7e 	bl	17480 <bt_gatt_discover>
   30f84:	b928      	cbnz	r0, 30f92 <gatt_discover_next+0x20>
}
   30f86:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   30f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30f8c:	4291      	cmp	r1, r2
   30f8e:	d107      	bne.n	30fa0 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   30f90:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   30f92:	4622      	mov	r2, r4
   30f94:	4628      	mov	r0, r5
   30f96:	6863      	ldr	r3, [r4, #4]
   30f98:	2100      	movs	r1, #0
}
   30f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   30f9e:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   30fa0:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   30fa2:	3301      	adds	r3, #1
   30fa4:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   30fa6:	429a      	cmp	r2, r3
		params->start_handle++;
   30fa8:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   30faa:	d2e7      	bcs.n	30f7c <gatt_discover_next+0xa>
   30fac:	e7f1      	b.n	30f92 <gatt_discover_next+0x20>

00030fae <gatt_find_type_rsp>:
{
   30fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30fb2:	b089      	sub	sp, #36	; 0x24
   30fb4:	4606      	mov	r6, r0
   30fb6:	4614      	mov	r4, r2
   30fb8:	9f12      	ldr	r7, [sp, #72]	; 0x48
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   30fba:	b911      	cbnz	r1, 30fc2 <gatt_find_type_rsp+0x14>
   30fbc:	f013 0803 	ands.w	r8, r3, #3
   30fc0:	d007      	beq.n	30fd2 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   30fc2:	463a      	mov	r2, r7
   30fc4:	2100      	movs	r1, #0
   30fc6:	4630      	mov	r0, r6
   30fc8:	687b      	ldr	r3, [r7, #4]
}
   30fca:	b009      	add	sp, #36	; 0x24
   30fcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   30fd0:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   30fd2:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   30fd4:	f642 0a01 	movw	sl, #10241	; 0x2801
   30fd8:	f3c3 0387 	ubfx	r3, r3, #2, #8
   30fdc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   30fe0:	42ac      	cmp	r4, r5
   30fe2:	d107      	bne.n	30ff4 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   30fe4:	463a      	mov	r2, r7
   30fe6:	4641      	mov	r1, r8
   30fe8:	4630      	mov	r0, r6
}
   30fea:	b009      	add	sp, #36	; 0x24
   30fec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   30ff0:	f7ff bfbf 	b.w	30f72 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   30ff4:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   30ff6:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   30ff8:	2a00      	cmp	r2, #0
   30ffa:	bf14      	ite	ne
   30ffc:	4652      	movne	r2, sl
   30ffe:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   31002:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   31006:	2210      	movs	r2, #16
		value.end_handle = end_handle;
   31008:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   3100c:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   31010:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   31012:	f8b4 b000 	ldrh.w	fp, [r4]
		attr = (struct bt_gatt_attr) {
   31016:	2100      	movs	r1, #0
   31018:	eb0d 0002 	add.w	r0, sp, r2
		value.uuid = params->uuid;
   3101c:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   3101e:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   31022:	f004 f803 	bl	3502c <memset>
   31026:	ab01      	add	r3, sp, #4
   31028:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   3102a:	463a      	mov	r2, r7
   3102c:	4630      	mov	r0, r6
   3102e:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   31030:	f8cd d00c 	str.w	sp, [sp, #12]
   31034:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31038:	a903      	add	r1, sp, #12
   3103a:	4798      	blx	r3
   3103c:	3404      	adds	r4, #4
   3103e:	2800      	cmp	r0, #0
   31040:	d1ce      	bne.n	30fe0 <gatt_find_type_rsp+0x32>
}
   31042:	b009      	add	sp, #36	; 0x24
   31044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031048 <bt_gatt_cancel>:
{
   31048:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3104a:	4604      	mov	r4, r0
   3104c:	460d      	mov	r5, r1
	k_sched_lock();
   3104e:	f7f8 fe93 	bl	29d78 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   31052:	4629      	mov	r1, r5
   31054:	4620      	mov	r0, r4
   31056:	f7ff fc92 	bl	3097e <bt_att_find_req_by_user_data>
	if (req) {
   3105a:	4601      	mov	r1, r0
   3105c:	b920      	cbnz	r0, 31068 <bt_gatt_cancel+0x20>
}
   3105e:	b002      	add	sp, #8
   31060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   31064:	f7f8 bef4 	b.w	29e50 <k_sched_unlock>
		func = req->func;
   31068:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   3106a:	4620      	mov	r0, r4
   3106c:	f7e5 fa44 	bl	164f8 <bt_att_req_cancel>
	k_sched_unlock();
   31070:	f7f8 feee 	bl	29e50 <k_sched_unlock>
	if (func) {
   31074:	b12e      	cbz	r6, 31082 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   31076:	2300      	movs	r3, #0
   31078:	210e      	movs	r1, #14
   3107a:	461a      	mov	r2, r3
   3107c:	4620      	mov	r0, r4
   3107e:	9500      	str	r5, [sp, #0]
   31080:	47b0      	blx	r6
}
   31082:	b002      	add	sp, #8
   31084:	bd70      	pop	{r4, r5, r6, pc}

00031086 <bt_gatt_notification>:
{
   31086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3108a:	4680      	mov	r8, r0
   3108c:	460e      	mov	r6, r1
   3108e:	4691      	mov	r9, r2
   31090:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   31092:	f7e5 fa99 	bl	165c8 <gatt_sub_find>
	if (!sub) {
   31096:	b300      	cbz	r0, 310da <bt_gatt_notification+0x54>
	return list->head;
   31098:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3109a:	b1f4      	cbz	r4, 310da <bt_gatt_notification+0x54>
	return node->next;
   3109c:	6825      	ldr	r5, [r4, #0]
   3109e:	b105      	cbz	r5, 310a2 <bt_gatt_notification+0x1c>
   310a0:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   310a2:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   310a6:	42b3      	cmp	r3, r6
   310a8:	d114      	bne.n	310d4 <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   310aa:	3c18      	subs	r4, #24
   310ac:	e007      	b.n	310be <bt_gatt_notification+0x38>
   310ae:	462c      	mov	r4, r5
   310b0:	69ad      	ldr	r5, [r5, #24]
   310b2:	89a3      	ldrh	r3, [r4, #12]
   310b4:	b19d      	cbz	r5, 310de <bt_gatt_notification+0x58>
		if (handle != params->value_handle) {
   310b6:	42b3      	cmp	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   310b8:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   310bc:	d1f7      	bne.n	310ae <bt_gatt_notification+0x28>
			if (params->notify(conn, params, data, length) ==
   310be:	4653      	mov	r3, sl
   310c0:	464a      	mov	r2, r9
   310c2:	4621      	mov	r1, r4
   310c4:	4640      	mov	r0, r8
   310c6:	6827      	ldr	r7, [r4, #0]
   310c8:	47b8      	blx	r7
   310ca:	b918      	cbnz	r0, 310d4 <bt_gatt_notification+0x4e>
				bt_gatt_unsubscribe(conn, params);
   310cc:	4621      	mov	r1, r4
   310ce:	4640      	mov	r0, r8
   310d0:	f7e6 fe9c 	bl	17e0c <bt_gatt_unsubscribe>
   310d4:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   310d6:	2d00      	cmp	r5, #0
   310d8:	d1ea      	bne.n	310b0 <bt_gatt_notification+0x2a>
}
   310da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   310de:	42b3      	cmp	r3, r6
   310e0:	d0ed      	beq.n	310be <bt_gatt_notification+0x38>
   310e2:	e7fa      	b.n	310da <bt_gatt_notification+0x54>

000310e4 <bt_gatt_change_aware>:
{
   310e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   310e8:	4605      	mov	r5, r0
   310ea:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   310ec:	f7e5 fa2e 	bl	1654c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   310f0:	4604      	mov	r4, r0
   310f2:	b1d8      	cbz	r0, 3112c <bt_gatt_change_aware+0x48>
   310f4:	7a03      	ldrb	r3, [r0, #8]
   310f6:	07db      	lsls	r3, r3, #31
   310f8:	d518      	bpl.n	3112c <bt_gatt_change_aware+0x48>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   310fa:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   310fe:	4638      	mov	r0, r7
   31100:	f7ff fcfc 	bl	30afc <atomic_get>
   31104:	f010 0601 	ands.w	r6, r0, #1
   31108:	d110      	bne.n	3112c <bt_gatt_change_aware+0x48>
	if (!req) {
   3110a:	f1b8 0f00 	cmp.w	r8, #0
   3110e:	d00e      	beq.n	3112e <bt_gatt_change_aware+0x4a>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31110:	f06f 0102 	mvn.w	r1, #2
   31114:	4638      	mov	r0, r7
   31116:	f7ff fcff 	bl	30b18 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   3111a:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   3111e:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   31120:	d008      	beq.n	31134 <bt_gatt_change_aware+0x50>
		bt_att_clear_out_of_sync_sent(conn);
   31122:	f7ff fc47 	bl	309b4 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   31126:	4620      	mov	r0, r4
   31128:	f7ff fe99 	bl	30e5e <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   3112c:	2601      	movs	r6, #1
}
   3112e:	4630      	mov	r0, r6
   31130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   31134:	f7ff fc3c 	bl	309b0 <bt_att_fixed_chan_only>
   31138:	2800      	cmp	r0, #0
   3113a:	d0f8      	beq.n	3112e <bt_gatt_change_aware+0x4a>
   3113c:	4628      	mov	r0, r5
   3113e:	f7ff fc49 	bl	309d4 <bt_att_out_of_sync_sent_on_fixed>
   31142:	2800      	cmp	r0, #0
   31144:	d0f3      	beq.n	3112e <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31146:	f06f 0102 	mvn.w	r1, #2
   3114a:	4638      	mov	r0, r7
   3114c:	f7ff fce4 	bl	30b18 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   31150:	4628      	mov	r0, r5
   31152:	e7e6      	b.n	31122 <bt_gatt_change_aware+0x3e>

00031154 <bt_smp_recv>:
{
   31154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   31156:	2100      	movs	r1, #0
   31158:	f04f 32ff 	mov.w	r2, #4294967295
   3115c:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   31160:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   31162:	4608      	mov	r0, r1
   31164:	f7fe ff8e 	bl	30084 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   31168:	f100 060c 	add.w	r6, r0, #12
   3116c:	4604      	mov	r4, r0
   3116e:	2101      	movs	r1, #1
   31170:	4630      	mov	r0, r6
   31172:	f7e7 fa81 	bl	18678 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   31176:	2505      	movs	r5, #5
   31178:	2101      	movs	r1, #1
   3117a:	7005      	strb	r5, [r0, #0]
   3117c:	4630      	mov	r0, r6
   3117e:	f7e7 fa7b 	bl	18678 <net_buf_simple_add>
   31182:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   31184:	7005      	strb	r5, [r0, #0]
   31186:	4622      	mov	r2, r4
   31188:	2106      	movs	r1, #6
   3118a:	4638      	mov	r0, r7
   3118c:	9300      	str	r3, [sp, #0]
   3118e:	f7fe ff7c 	bl	3008a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   31192:	b110      	cbz	r0, 3119a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   31194:	4620      	mov	r0, r4
   31196:	f7e7 f92b 	bl	183f0 <net_buf_unref>
}
   3119a:	2000      	movs	r0, #0
   3119c:	b003      	add	sp, #12
   3119e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000311a0 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   311a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   311a4:	4770      	bx	lr

000311a6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   311a6:	2000      	movs	r0, #0
   311a8:	4770      	bx	lr

000311aa <fixed_data_unref>:
}
   311aa:	4770      	bx	lr

000311ac <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   311ac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   311ae:	6849      	ldr	r1, [r1, #4]
   311b0:	6809      	ldr	r1, [r1, #0]
   311b2:	f7e7 b801 	b.w	181b8 <net_buf_alloc_len>

000311b6 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   311b6:	f7f7 bd5d 	b.w	28c74 <z_impl_k_queue_get>

000311ba <net_buf_simple_init_with_data>:
	buf->size  = size;
   311ba:	b292      	uxth	r2, r2
	buf->__buf = data;
   311bc:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   311be:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   311c0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   311c2:	8082      	strh	r2, [r0, #4]
}
   311c4:	4770      	bx	lr

000311c6 <net_buf_simple_pull_u8>:
{
   311c6:	b510      	push	{r4, lr}
	val = buf->data[0];
   311c8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   311ca:	2101      	movs	r1, #1
	val = buf->data[0];
   311cc:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   311ce:	f7e7 fa17 	bl	18600 <net_buf_simple_pull>
}
   311d2:	4620      	mov	r0, r4
   311d4:	bd10      	pop	{r4, pc}

000311d6 <net_buf_simple_pull_le16>:
{
   311d6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   311d8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   311da:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   311dc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   311de:	f7e7 fa0f 	bl	18600 <net_buf_simple_pull>
}
   311e2:	4620      	mov	r0, r4
   311e4:	bd10      	pop	{r4, pc}

000311e6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   311e6:	6802      	ldr	r2, [r0, #0]
   311e8:	6880      	ldr	r0, [r0, #8]
}
   311ea:	1a10      	subs	r0, r2, r0
   311ec:	4770      	bx	lr

000311ee <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   311ee:	8883      	ldrh	r3, [r0, #4]
   311f0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   311f2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   311f4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   311f6:	6803      	ldr	r3, [r0, #0]
   311f8:	1a5b      	subs	r3, r3, r1
}
   311fa:	1ad0      	subs	r0, r2, r3
   311fc:	4770      	bx	lr

000311fe <net_buf_simple_add_mem>:
{
   311fe:	b538      	push	{r3, r4, r5, lr}
   31200:	460d      	mov	r5, r1
   31202:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   31204:	4611      	mov	r1, r2
   31206:	f7e7 fa37 	bl	18678 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3120a:	4622      	mov	r2, r4
   3120c:	4629      	mov	r1, r5
}
   3120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   31212:	f003 beeb 	b.w	34fec <memcpy>

00031216 <net_buf_simple_add_u8>:
{
   31216:	b510      	push	{r4, lr}
   31218:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   3121a:	2101      	movs	r1, #1
   3121c:	f7e7 fa2c 	bl	18678 <net_buf_simple_add>
	*u8 = val;
   31220:	7004      	strb	r4, [r0, #0]
}
   31222:	bd10      	pop	{r4, pc}

00031224 <net_buf_simple_add_le16>:
{
   31224:	b510      	push	{r4, lr}
   31226:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   31228:	2102      	movs	r1, #2
   3122a:	f7e7 fa25 	bl	18678 <net_buf_simple_add>
	dst[0] = val;
   3122e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   31230:	0a24      	lsrs	r4, r4, #8
   31232:	7044      	strb	r4, [r0, #1]
}
   31234:	bd10      	pop	{r4, pc}

00031236 <offloaded_netdev_if_enable>:
   31236:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   31238:	681b      	ldr	r3, [r3, #0]
   3123a:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   3123c:	b113      	cbz	r3, 31244 <offloaded_netdev_if_enable+0xe>
   3123e:	685b      	ldr	r3, [r3, #4]
   31240:	b103      	cbz	r3, 31244 <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   31242:	4718      	bx	r3
}
   31244:	2000      	movs	r0, #0
   31246:	4770      	bx	lr

00031248 <net_init>:

	return status;
}

static int net_init(void)
{
   31248:	b508      	push	{r3, lr}
	net_if_init();
   3124a:	f7e7 fb15 	bl	18878 <net_if_init>
	net_if_post_init();
   3124e:	f7e7 fb51 	bl	188f4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   31252:	2000      	movs	r0, #0
   31254:	bd08      	pop	{r3, pc}

00031256 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   31256:	b110      	cbz	r0, 3125e <net_if_l2+0x8>
   31258:	6800      	ldr	r0, [r0, #0]
   3125a:	b100      	cbz	r0, 3125e <net_if_l2+0x8>
	return iface->if_dev->l2;
   3125c:	6840      	ldr	r0, [r0, #4]
}
   3125e:	4770      	bx	lr

00031260 <net_if_flag_is_set>:
	if (iface == NULL) {
   31260:	b130      	cbz	r0, 31270 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31262:	6803      	ldr	r3, [r0, #0]
   31264:	330c      	adds	r3, #12
   31266:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3126a:	4108      	asrs	r0, r1
   3126c:	f000 0001 	and.w	r0, r0, #1
}
   31270:	4770      	bx	lr

00031272 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   31272:	b510      	push	{r4, lr}
   31274:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   31276:	f7ff ffee 	bl	31256 <net_if_l2>
   3127a:	b128      	cbz	r0, 31288 <l2_flags_get.isra.0+0x16>
   3127c:	68c2      	ldr	r2, [r0, #12]
   3127e:	b11a      	cbz	r2, 31288 <l2_flags_get.isra.0+0x16>
}
   31280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   31284:	4618      	mov	r0, r3
   31286:	4710      	bx	r2
}
   31288:	bd10      	pop	{r4, pc}

0003128a <net_if_up>:
{
   3128a:	b538      	push	{r3, r4, r5, lr}
   3128c:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   3128e:	f04f 31ff 	mov.w	r1, #4294967295
   31292:	f04f 30ff 	mov.w	r0, #4294967295
   31296:	f7e7 fa5b 	bl	18750 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   3129a:	2100      	movs	r1, #0
   3129c:	4628      	mov	r0, r5
   3129e:	f7ff ffdf 	bl	31260 <net_if_flag_is_set>
   312a2:	b9b0      	cbnz	r0, 312d2 <net_if_up+0x48>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   312a4:	4628      	mov	r0, r5
   312a6:	f7ff ffd6 	bl	31256 <net_if_l2>
   312aa:	4604      	mov	r4, r0
   312ac:	b130      	cbz	r0, 312bc <net_if_up+0x32>
   312ae:	6884      	ldr	r4, [r0, #8]
   312b0:	b124      	cbz	r4, 312bc <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   312b2:	2101      	movs	r1, #1
   312b4:	4628      	mov	r0, r5
   312b6:	47a0      	blx	r4
	if (status < 0) {
   312b8:	1e04      	subs	r4, r0, #0
   312ba:	db06      	blt.n	312ca <net_if_up+0x40>
	net_if_flag_set(iface, NET_IF_UP);
   312bc:	4628      	mov	r0, r5
   312be:	2100      	movs	r1, #0
   312c0:	f7e7 f9f8 	bl	186b4 <net_if_flag_set>
	update_operational_state(iface);
   312c4:	4628      	mov	r0, r5
   312c6:	f7e7 fa51 	bl	1876c <update_operational_state>
	k_mutex_unlock(&lock);
   312ca:	f7e7 fa49 	bl	18760 <k_mutex_unlock.constprop.0.isra.0>
}
   312ce:	4620      	mov	r0, r4
   312d0:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   312d2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   312d6:	e7f8      	b.n	312ca <net_if_up+0x40>

000312d8 <net_byte_to_hex>:
{
   312d8:	b510      	push	{r4, lr}
   312da:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   312dc:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   312de:	b1b3      	cbz	r3, 3130e <net_byte_to_hex+0x36>
		if (val < 10) {
   312e0:	2809      	cmp	r0, #9
   312e2:	d912      	bls.n	3130a <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   312e4:	f1a2 030a 	sub.w	r3, r2, #10
   312e8:	4418      	add	r0, r3
   312ea:	b2c0      	uxtb	r0, r0
   312ec:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   312f0:	2300      	movs	r3, #0
   312f2:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   312f6:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   312f8:	bf83      	ittte	hi
   312fa:	3a0a      	subhi	r2, #10
   312fc:	1889      	addhi	r1, r1, r2
   312fe:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   31300:	3130      	addls	r1, #48	; 0x30
   31302:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   31304:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   31306:	1c60      	adds	r0, r4, #1
}
   31308:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   3130a:	3030      	adds	r0, #48	; 0x30
   3130c:	e7ee      	b.n	312ec <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   3130e:	2800      	cmp	r0, #0
   31310:	d1e6      	bne.n	312e0 <net_byte_to_hex+0x8>
   31312:	e7ed      	b.n	312f0 <net_byte_to_hex+0x18>

00031314 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", (void *)buf->cur, (void *)buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   31314:	e9d0 3200 	ldrd	r3, r2, [r0]
   31318:	1ad2      	subs	r2, r2, r3
   3131a:	2a01      	cmp	r2, #1
   3131c:	d90d      	bls.n	3133a <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3131e:	1c5a      	adds	r2, r3, #1
   31320:	6002      	str	r2, [r0, #0]
   31322:	781b      	ldrb	r3, [r3, #0]
   31324:	021b      	lsls	r3, r3, #8
   31326:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   31328:	6803      	ldr	r3, [r0, #0]
   3132a:	1c5a      	adds	r2, r3, #1
   3132c:	6002      	str	r2, [r0, #0]
   3132e:	781b      	ldrb	r3, [r3, #0]
   31330:	880a      	ldrh	r2, [r1, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   31332:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   31334:	4313      	orrs	r3, r2
   31336:	800b      	strh	r3, [r1, #0]
	return 0;
   31338:	4770      	bx	lr
		return -EINVAL;
   3133a:	f06f 0015 	mvn.w	r0, #21
}
   3133e:	4770      	bx	lr

00031340 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   31340:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31342:	e9d0 3400 	ldrd	r3, r4, [r0]
   31346:	429c      	cmp	r4, r3
   31348:	d020      	beq.n	3138c <fixed_header_decode+0x4c>
	*val = *(buf->cur++);
   3134a:	1c5c      	adds	r4, r3, #1
   3134c:	6004      	str	r4, [r0, #0]
   3134e:	781b      	ldrb	r3, [r3, #0]
   31350:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   31352:	2300      	movs	r3, #0
   31354:	6013      	str	r3, [r2, #0]
		if (buf->cur >= buf->end) {
   31356:	e9d0 1400 	ldrd	r1, r4, [r0]
   3135a:	42a1      	cmp	r1, r4
   3135c:	d219      	bcs.n	31392 <fixed_header_decode+0x52>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3135e:	7809      	ldrb	r1, [r1, #0]
   31360:	6814      	ldr	r4, [r2, #0]
   31362:	f001 017f 	and.w	r1, r1, #127	; 0x7f
								<< shift;
   31366:	4099      	lsls	r1, r3
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   31368:	440c      	add	r4, r1
   3136a:	6014      	str	r4, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3136c:	6801      	ldr	r1, [r0, #0]
   3136e:	1c4c      	adds	r4, r1, #1
   31370:	6004      	str	r4, [r0, #0]
   31372:	f991 1000 	ldrsb.w	r1, [r1]
   31376:	2900      	cmp	r1, #0
   31378:	db05      	blt.n	31386 <fixed_header_decode+0x46>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3137a:	6813      	ldr	r3, [r2, #0]
   3137c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   31380:	d204      	bcs.n	3138c <fixed_header_decode+0x4c>
	return 0;
   31382:	2000      	movs	r0, #0
   31384:	e004      	b.n	31390 <fixed_header_decode+0x50>
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   31386:	3307      	adds	r3, #7
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   31388:	2b1c      	cmp	r3, #28
   3138a:	d1e4      	bne.n	31356 <fixed_header_decode+0x16>
			return -EINVAL;
   3138c:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   31390:	bd10      	pop	{r4, pc}
			return -EAGAIN;
   31392:	f06f 000a 	mvn.w	r0, #10
   31396:	e7fb      	b.n	31390 <fixed_header_decode+0x50>

00031398 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   31398:	b570      	push	{r4, r5, r6, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3139a:	e9d1 3600 	ldrd	r3, r6, [r1]
   3139e:	429e      	cmp	r6, r3
   313a0:	d102      	bne.n	313a8 <connect_ack_decode+0x10>
		return -EINVAL;
   313a2:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   313a6:	bd70      	pop	{r4, r5, r6, pc}
	*val = *(buf->cur++);
   313a8:	1c5d      	adds	r5, r3, #1
   313aa:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   313ac:	42ae      	cmp	r6, r5
	*val = *(buf->cur++);
   313ae:	781c      	ldrb	r4, [r3, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   313b0:	d0f7      	beq.n	313a2 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   313b2:	1c9d      	adds	r5, r3, #2
   313b4:	600d      	str	r5, [r1, #0]
   313b6:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   313b8:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
	return 0;
   313bc:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   313be:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   313c0:	bf04      	itt	eq
   313c2:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   313c6:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   313c8:	7051      	strb	r1, [r2, #1]
	return 0;
   313ca:	e7ec      	b.n	313a6 <connect_ack_decode+0xe>

000313cc <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   313cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   313ce:	461c      	mov	r4, r3
   313d0:	4615      	mov	r5, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   313d2:	7da2      	ldrb	r2, [r4, #22]
   313d4:	0043      	lsls	r3, r0, #1
   313d6:	f003 0302 	and.w	r3, r3, #2
   313da:	f022 0203 	bic.w	r2, r2, #3
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   313de:	f3c0 0041 	ubfx	r0, r0, #1, #2
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   313e2:	4313      	orrs	r3, r2
{
   313e4:	460e      	mov	r6, r1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   313e6:	7220      	strb	r0, [r4, #8]
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   313e8:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   313ea:	4628      	mov	r0, r5
   313ec:	f10d 0106 	add.w	r1, sp, #6
   313f0:	f7ff ff90 	bl	31314 <unpack_uint16>
	if (err_code != 0) {
   313f4:	b9d8      	cbnz	r0, 3142e <publish_decode+0x62>
	if ((buf->end - buf->cur) < utf8_strlen) {
   313f6:	e9d5 1200 	ldrd	r1, r2, [r5]
   313fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   313fe:	1a52      	subs	r2, r2, r1
   31400:	429a      	cmp	r2, r3
   31402:	db12      	blt.n	3142a <publish_decode+0x5e>
	str->size = utf8_strlen;
   31404:	6063      	str	r3, [r4, #4]
	if (utf8_strlen) {
   31406:	b173      	cbz	r3, 31426 <publish_decode+0x5a>
		str->utf8 = buf->cur;
   31408:	682a      	ldr	r2, [r5, #0]
   3140a:	6022      	str	r2, [r4, #0]
		buf->cur += utf8_strlen;
   3140c:	441a      	add	r2, r3
   3140e:	602a      	str	r2, [r5, #0]
		return err_code;
	}

	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);

	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   31410:	7a23      	ldrb	r3, [r4, #8]
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   31412:	6867      	ldr	r7, [r4, #4]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   31414:	b96b      	cbnz	r3, 31432 <publish_decode+0x66>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   31416:	1cbb      	adds	r3, r7, #2
		}

		var_header_length += sizeof(uint16_t);
	}

	if (var_length < var_header_length) {
   31418:	429e      	cmp	r6, r3
   3141a:	d306      	bcc.n	3142a <publish_decode+0x5e>
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
	}

	param->message.payload.data = NULL;
   3141c:	2000      	movs	r0, #0
	param->message.payload.len = var_length - var_header_length;
   3141e:	1af6      	subs	r6, r6, r3
	param->message.payload.data = NULL;
   31420:	60e0      	str	r0, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   31422:	6126      	str	r6, [r4, #16]

	return 0;
   31424:	e003      	b.n	3142e <publish_decode+0x62>
		str->utf8 = NULL;
   31426:	6023      	str	r3, [r4, #0]
	if (err_code != 0) {
   31428:	e7f2      	b.n	31410 <publish_decode+0x44>
		return -EINVAL;
   3142a:	f06f 0015 	mvn.w	r0, #21
}
   3142e:	b003      	add	sp, #12
   31430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err_code = unpack_uint16(buf, &param->message_id);
   31432:	4628      	mov	r0, r5
   31434:	f104 0114 	add.w	r1, r4, #20
   31438:	f7ff ff6c 	bl	31314 <unpack_uint16>
		if (err_code != 0) {
   3143c:	2800      	cmp	r0, #0
   3143e:	d1f6      	bne.n	3142e <publish_decode+0x62>
		var_header_length += sizeof(uint16_t);
   31440:	1d3b      	adds	r3, r7, #4
   31442:	e7e9      	b.n	31418 <publish_decode+0x4c>

00031444 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   31444:	f7ff bf66 	b.w	31314 <unpack_uint16>

00031448 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
   31448:	f7ff bf64 	b.w	31314 <unpack_uint16>

0003144c <publish_release_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
   3144c:	f7ff bf62 	b.w	31314 <unpack_uint16>

00031450 <publish_complete_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_complete_decode(struct buf_ctx *buf,
   31450:	f7ff bf60 	b.w	31314 <unpack_uint16>

00031454 <subscribe_ack_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   31454:	b538      	push	{r3, r4, r5, lr}
   31456:	4604      	mov	r4, r0
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   31458:	f7ff ff5c 	bl	31314 <unpack_uint16>
	if (err_code != 0) {
   3145c:	b940      	cbnz	r0, 31470 <subscribe_ack_decode+0x1c>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3145e:	e9d4 2300 	ldrd	r2, r3, [r4]
   31462:	1a9b      	subs	r3, r3, r2
	str->len = length;
   31464:	608b      	str	r3, [r1, #8]
	if (length > 0) {
   31466:	b123      	cbz	r3, 31472 <subscribe_ack_decode+0x1e>
		str->data = buf->cur;
   31468:	6822      	ldr	r2, [r4, #0]
   3146a:	604a      	str	r2, [r1, #4]
		buf->cur += length;
   3146c:	441a      	add	r2, r3
   3146e:	6022      	str	r2, [r4, #0]
}
   31470:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   31472:	6048      	str	r0, [r1, #4]
   31474:	e7fc      	b.n	31470 <subscribe_ack_decode+0x1c>

00031476 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
   31476:	f7ff bf4d 	b.w	31314 <unpack_uint16>

0003147a <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3147a:	e9d1 3200 	ldrd	r3, r2, [r1]
   3147e:	1ad2      	subs	r2, r2, r3
   31480:	2a01      	cmp	r2, #1
   31482:	d909      	bls.n	31498 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   31484:	1c5a      	adds	r2, r3, #1
   31486:	600a      	str	r2, [r1, #0]
   31488:	0a02      	lsrs	r2, r0, #8
   3148a:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3148c:	680b      	ldr	r3, [r1, #0]
   3148e:	1c5a      	adds	r2, r3, #1
   31490:	600a      	str	r2, [r1, #0]
   31492:	7018      	strb	r0, [r3, #0]
	return 0;
   31494:	2000      	movs	r0, #0
   31496:	4770      	bx	lr
		return -ENOMEM;
   31498:	f06f 000b 	mvn.w	r0, #11
}
   3149c:	4770      	bx	lr

0003149e <pack_utf8_str>:
{
   3149e:	b538      	push	{r3, r4, r5, lr}
   314a0:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   314a2:	e9d1 2300 	ldrd	r2, r3, [r1]
   314a6:	6840      	ldr	r0, [r0, #4]
   314a8:	1a9b      	subs	r3, r3, r2
   314aa:	1c82      	adds	r2, r0, #2
   314ac:	4293      	cmp	r3, r2
{
   314ae:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   314b0:	d30d      	bcc.n	314ce <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   314b2:	b280      	uxth	r0, r0
   314b4:	f7ff ffe1 	bl	3147a <pack_uint16>
   314b8:	e9d5 1200 	ldrd	r1, r2, [r5]
   314bc:	6820      	ldr	r0, [r4, #0]
   314be:	f003 fd95 	bl	34fec <memcpy>
	return 0;
   314c2:	2000      	movs	r0, #0
	buf->cur += str->size;
   314c4:	6823      	ldr	r3, [r4, #0]
   314c6:	686a      	ldr	r2, [r5, #4]
   314c8:	4413      	add	r3, r2
   314ca:	6023      	str	r3, [r4, #0]
}
   314cc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   314ce:	f06f 000b 	mvn.w	r0, #11
   314d2:	e7fb      	b.n	314cc <pack_utf8_str+0x2e>

000314d4 <mqtt_encode_fixed_header>:
{
   314d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   314d6:	6814      	ldr	r4, [r2, #0]
   314d8:	1a64      	subs	r4, r4, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   314da:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   314de:	d227      	bcs.n	31530 <mqtt_encode_fixed_header+0x5c>
   314e0:	4625      	mov	r5, r4
   314e2:	2600      	movs	r6, #0
	} while (length > 0);
   314e4:	09ed      	lsrs	r5, r5, #7
   314e6:	4633      	mov	r3, r6
   314e8:	f106 0601 	add.w	r6, r6, #1
   314ec:	d1fa      	bne.n	314e4 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   314ee:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   314f0:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   314f2:	b2db      	uxtb	r3, r3
   314f4:	425d      	negs	r5, r3
   314f6:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   314f8:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   314fa:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   314fc:	bf1e      	ittt	ne
   314fe:	3301      	addne	r3, #1
   31500:	6013      	strne	r3, [r2, #0]
   31502:	5548      	strbne	r0, [r1, r5]
	return 0;
   31504:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   31506:	6813      	ldr	r3, [r2, #0]
   31508:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3150c:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3150e:	09c0      	lsrs	r0, r0, #7
   31510:	6813      	ldr	r3, [r2, #0]
   31512:	d105      	bne.n	31520 <mqtt_encode_fixed_header+0x4c>
			buf->cur++;
   31514:	3301      	adds	r3, #1
	buf->cur = buf->cur - fixed_header_length;
   31516:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   31518:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3151a:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3151c:	6053      	str	r3, [r2, #4]
}
   3151e:	bd70      	pop	{r4, r5, r6, pc}
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   31520:	7819      	ldrb	r1, [r3, #0]
   31522:	f061 017f 	orn	r1, r1, #127	; 0x7f
   31526:	7019      	strb	r1, [r3, #0]
			buf->cur++;
   31528:	6813      	ldr	r3, [r2, #0]
   3152a:	3301      	adds	r3, #1
   3152c:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3152e:	e7ea      	b.n	31506 <mqtt_encode_fixed_header+0x32>
		return -EMSGSIZE;
   31530:	f06f 0079 	mvn.w	r0, #121	; 0x79
   31534:	e7f3      	b.n	3151e <mqtt_encode_fixed_header+0x4a>

00031536 <mqtt_message_id_only_enc>:
{
   31536:	b570      	push	{r4, r5, r6, lr}
   31538:	4606      	mov	r6, r0
   3153a:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3153c:	4608      	mov	r0, r1
   3153e:	b169      	cbz	r1, 3155c <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31540:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   31542:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31544:	3505      	adds	r5, #5
   31546:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   31548:	f7ff ff97 	bl	3147a <pack_uint16>
	if (err_code != 0) {
   3154c:	b940      	cbnz	r0, 31560 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3154e:	4622      	mov	r2, r4
   31550:	4629      	mov	r1, r5
   31552:	4630      	mov	r0, r6
}
   31554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31558:	f7ff bfbc 	b.w	314d4 <mqtt_encode_fixed_header>
		return -EINVAL;
   3155c:	f06f 0015 	mvn.w	r0, #21
}
   31560:	bd70      	pop	{r4, r5, r6, pc}

00031562 <publish_encode>:
{
   31562:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   31566:	7d87      	ldrb	r7, [r0, #22]
   31568:	7a04      	ldrb	r4, [r0, #8]
   3156a:	f007 0801 	and.w	r8, r7, #1
{
   3156e:	4605      	mov	r5, r0
   31570:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   31572:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   31576:	b10c      	cbz	r4, 3157c <publish_encode+0x1a>
   31578:	8a83      	ldrh	r3, [r0, #20]
   3157a:	b383      	cbz	r3, 315de <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3157c:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   31580:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31582:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   31584:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31586:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3158a:	f7ff ff88 	bl	3149e <pack_utf8_str>
	if (err_code != 0) {
   3158e:	b9b0      	cbnz	r0, 315be <publish_encode+0x5c>
	if (param->message.topic.qos) {
   31590:	7a2b      	ldrb	r3, [r5, #8]
   31592:	b9b3      	cbnz	r3, 315c2 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   31594:	0060      	lsls	r0, r4, #1
   31596:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3159a:	692a      	ldr	r2, [r5, #16]
   3159c:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   315a0:	4338      	orrs	r0, r7
   315a2:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   315a6:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   315a8:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   315ac:	464a      	mov	r2, r9
   315ae:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   315b0:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   315b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   315b8:	f7ff ff8c 	bl	314d4 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   315bc:	b140      	cbz	r0, 315d0 <publish_encode+0x6e>
}
   315be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   315c2:	4649      	mov	r1, r9
   315c4:	8aa8      	ldrh	r0, [r5, #20]
   315c6:	f7ff ff58 	bl	3147a <pack_uint16>
		if (err_code != 0) {
   315ca:	2800      	cmp	r0, #0
   315cc:	d0e2      	beq.n	31594 <publish_encode+0x32>
   315ce:	e7f6      	b.n	315be <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   315d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   315d4:	692a      	ldr	r2, [r5, #16]
   315d6:	1a9b      	subs	r3, r3, r2
   315d8:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   315dc:	e7ef      	b.n	315be <publish_encode+0x5c>
		return -EINVAL;
   315de:	f06f 0015 	mvn.w	r0, #21
   315e2:	e7ec      	b.n	315be <publish_encode+0x5c>

000315e4 <publish_ack_encode>:
{
   315e4:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   315e6:	8801      	ldrh	r1, [r0, #0]
   315e8:	2040      	movs	r0, #64	; 0x40
   315ea:	f7ff bfa4 	b.w	31536 <mqtt_message_id_only_enc>

000315ee <subscribe_encode>:
{
   315ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (param->message_id == 0U) {
   315f2:	88c3      	ldrh	r3, [r0, #6]
{
   315f4:	4606      	mov	r6, r0
   315f6:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   315f8:	b33b      	cbz	r3, 3164a <subscribe_encode+0x5c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   315fa:	680f      	ldr	r7, [r1, #0]
   315fc:	3705      	adds	r7, #5
   315fe:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   31600:	88c0      	ldrh	r0, [r0, #6]
   31602:	f7ff ff3a 	bl	3147a <pack_uint16>
	if (err_code != 0) {
   31606:	4604      	mov	r4, r0
   31608:	bb08      	cbnz	r0, 3164e <subscribe_encode+0x60>
   3160a:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3160e:	88b3      	ldrh	r3, [r6, #4]
   31610:	42a3      	cmp	r3, r4
   31612:	dc06      	bgt.n	31622 <subscribe_encode+0x34>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31614:	462a      	mov	r2, r5
   31616:	4639      	mov	r1, r7
}
   31618:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3161c:	2082      	movs	r0, #130	; 0x82
   3161e:	f7ff bf59 	b.w	314d4 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31622:	fb08 f904 	mul.w	r9, r8, r4
   31626:	6830      	ldr	r0, [r6, #0]
   31628:	4629      	mov	r1, r5
   3162a:	4448      	add	r0, r9
   3162c:	f7ff ff37 	bl	3149e <pack_utf8_str>
		if (err_code != 0) {
   31630:	b980      	cbnz	r0, 31654 <subscribe_encode+0x66>
		err_code = pack_uint8(param->list[i].qos, buf);
   31632:	6833      	ldr	r3, [r6, #0]
   31634:	444b      	add	r3, r9
   31636:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   31638:	e9d5 3100 	ldrd	r3, r1, [r5]
   3163c:	4299      	cmp	r1, r3
   3163e:	d00b      	beq.n	31658 <subscribe_encode+0x6a>
	*(buf->cur++) = val;
   31640:	1c59      	adds	r1, r3, #1
   31642:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   31644:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   31646:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   31648:	e7e1      	b.n	3160e <subscribe_encode+0x20>
		return -EINVAL;
   3164a:	f06f 0415 	mvn.w	r4, #21
}
   3164e:	4620      	mov	r0, r4
   31650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31654:	4604      	mov	r4, r0
   31656:	e7fa      	b.n	3164e <subscribe_encode+0x60>
		return -ENOMEM;
   31658:	f06f 040b 	mvn.w	r4, #11
   3165c:	e7f7      	b.n	3164e <subscribe_encode+0x60>

0003165e <unsubscribe_encode>:
{
   3165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31662:	680f      	ldr	r7, [r1, #0]
{
   31664:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   31666:	3705      	adds	r7, #5
   31668:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3166a:	88c0      	ldrh	r0, [r0, #6]
   3166c:	f7ff ff05 	bl	3147a <pack_uint16>
{
   31670:	460d      	mov	r5, r1
	if (err_code != 0) {
   31672:	4604      	mov	r4, r0
   31674:	b9a8      	cbnz	r0, 316a2 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   31676:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3167a:	88b3      	ldrh	r3, [r6, #4]
   3167c:	42a3      	cmp	r3, r4
   3167e:	dc06      	bgt.n	3168e <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   31680:	462a      	mov	r2, r5
   31682:	4639      	mov	r1, r7
}
   31684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   31688:	20a2      	movs	r0, #162	; 0xa2
   3168a:	f7ff bf23 	b.w	314d4 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3168e:	6830      	ldr	r0, [r6, #0]
   31690:	4629      	mov	r1, r5
   31692:	fb08 0004 	mla	r0, r8, r4, r0
   31696:	f7ff ff02 	bl	3149e <pack_utf8_str>
		if (err_code != 0) {
   3169a:	b908      	cbnz	r0, 316a0 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3169c:	3401      	adds	r4, #1
   3169e:	e7ec      	b.n	3167a <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   316a0:	4604      	mov	r4, r0
}
   316a2:	4620      	mov	r0, r4
   316a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000316a8 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   316a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   316aa:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   316ac:	e9d1 3100 	ldrd	r3, r1, [r1]
   316b0:	1acb      	subs	r3, r1, r3
   316b2:	4293      	cmp	r3, r2
{
   316b4:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   316b6:	d301      	bcc.n	316bc <mqtt_read_message_chunk+0x14>
		return 0;
   316b8:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   316ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   316bc:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   316be:	190f      	adds	r7, r1, r4
   316c0:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
   316c4:	4413      	add	r3, r2
   316c6:	429f      	cmp	r7, r3
   316c8:	d813      	bhi.n	316f2 <mqtt_read_message_chunk+0x4a>
   316ca:	4297      	cmp	r7, r2
   316cc:	d311      	bcc.n	316f2 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   316ce:	2300      	movs	r3, #0
   316d0:	4622      	mov	r2, r4
   316d2:	f7e7 fbad 	bl	18e30 <mqtt_transport_read>
	if (len < 0) {
   316d6:	2800      	cmp	r0, #0
   316d8:	dbef      	blt.n	316ba <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   316da:	d00d      	beq.n	316f8 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   316dc:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   316de:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   316e0:	4403      	add	r3, r0
   316e2:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   316e4:	686b      	ldr	r3, [r5, #4]
   316e6:	4403      	add	r3, r0
   316e8:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   316ea:	d2e5      	bcs.n	316b8 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   316ec:	f06f 000a 	mvn.w	r0, #10
   316f0:	e7e3      	b.n	316ba <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   316f2:	f06f 000b 	mvn.w	r0, #11
   316f6:	e7e0      	b.n	316ba <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   316f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   316fc:	e7dd      	b.n	316ba <mqtt_read_message_chunk+0x12>

000316fe <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   316fe:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   31700:	6f03      	ldr	r3, [r0, #112]	; 0x70
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   31702:	69c2      	ldr	r2, [r0, #28]
{
   31704:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   31706:	9302      	str	r3, [sp, #8]
{
   31708:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3170a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3170c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3170e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   31710:	4628      	mov	r0, r5
   31712:	a902      	add	r1, sp, #8
   31714:	f7ff ffc8 	bl	316a8 <mqtt_read_message_chunk>
		if (err_code < 0) {
   31718:	1e04      	subs	r4, r0, #0
   3171a:	db2d      	blt.n	31778 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3171c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3171e:	aa01      	add	r2, sp, #4
   31720:	f10d 0103 	add.w	r1, sp, #3
   31724:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   31726:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   31728:	f7ff fe0a 	bl	31340 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3172c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   31730:	4604      	mov	r4, r0
		chunk_size = 1U;
   31732:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   31736:	d0eb      	beq.n	31710 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   31738:	2800      	cmp	r0, #0
   3173a:	db3c      	blt.n	317b6 <mqtt_handle_rx+0xb8>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3173c:	f89d 6003 	ldrb.w	r6, [sp, #3]
   31740:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   31744:	2b30      	cmp	r3, #48	; 0x30
   31746:	d11b      	bne.n	31780 <mqtt_handle_rx+0x82>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   31748:	2202      	movs	r2, #2
   3174a:	4628      	mov	r0, r5
   3174c:	a902      	add	r1, sp, #8
   3174e:	f7ff ffab 	bl	316a8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   31752:	1e04      	subs	r4, r0, #0
   31754:	db10      	blt.n	31778 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   31756:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   31758:	f016 0f06 	tst.w	r6, #6
   3175c:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3175e:	4628      	mov	r0, r5
   31760:	ba52      	rev16	r2, r2
   31762:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   31764:	bf0c      	ite	eq
   31766:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   31768:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3176a:	a902      	add	r1, sp, #8
   3176c:	f7ff ff9c 	bl	316a8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   31770:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   31774:	2c00      	cmp	r4, #0
   31776:	da0a      	bge.n	3178e <mqtt_handle_rx+0x90>
		return (err_code == -EAGAIN) ? 0 : err_code;
   31778:	f114 0f0b 	cmn.w	r4, #11
   3177c:	d11b      	bne.n	317b6 <mqtt_handle_rx+0xb8>
   3177e:	e019      	b.n	317b4 <mqtt_handle_rx+0xb6>
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   31780:	4628      	mov	r0, r5
   31782:	9a01      	ldr	r2, [sp, #4]
   31784:	a902      	add	r1, sp, #8
   31786:	f7ff ff8f 	bl	316a8 <mqtt_read_message_chunk>
   3178a:	4604      	mov	r4, r0
   3178c:	e7f2      	b.n	31774 <mqtt_handle_rx+0x76>
	evt.result = 0;
   3178e:	2200      	movs	r2, #0
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	/* At this point, packet is ready to be passed to the application. */
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   31790:	f89d 0003 	ldrb.w	r0, [sp, #3]
   31794:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   31796:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3179a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3179c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3179e:	d06f      	beq.n	31880 <mqtt_handle_rx+0x182>
   317a0:	d816      	bhi.n	317d0 <mqtt_handle_rx+0xd2>
   317a2:	2b40      	cmp	r3, #64	; 0x40
   317a4:	d062      	beq.n	3186c <mqtt_handle_rx+0x16e>
   317a6:	d809      	bhi.n	317bc <mqtt_handle_rx+0xbe>
   317a8:	2b20      	cmp	r3, #32
   317aa:	d02f      	beq.n	3180c <mqtt_handle_rx+0x10e>
   317ac:	2b30      	cmp	r3, #48	; 0x30
   317ae:	d04b      	beq.n	31848 <mqtt_handle_rx+0x14a>
	if (err_code < 0) {
		return err_code;
	}

	client->internal.rx_buf_datalen = 0U;
   317b0:	2300      	movs	r3, #0
   317b2:	61eb      	str	r3, [r5, #28]
		return (err_code == -EAGAIN) ? 0 : err_code;
   317b4:	2400      	movs	r4, #0

	return 0;
}
   317b6:	4620      	mov	r0, r4
   317b8:	b00c      	add	sp, #48	; 0x30
   317ba:	bd70      	pop	{r4, r5, r6, pc}
	switch (type_and_flags & 0xF0) {
   317bc:	2b50      	cmp	r3, #80	; 0x50
   317be:	d1f7      	bne.n	317b0 <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_PUBREC;
   317c0:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   317c2:	a905      	add	r1, sp, #20
   317c4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   317c6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   317ca:	f7ff fe3d 	bl	31448 <publish_receive_decode>
   317ce:	e054      	b.n	3187a <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   317d0:	2bb0      	cmp	r3, #176	; 0xb0
   317d2:	d065      	beq.n	318a0 <mqtt_handle_rx+0x1a2>
   317d4:	d80b      	bhi.n	317ee <mqtt_handle_rx+0xf0>
   317d6:	2b70      	cmp	r3, #112	; 0x70
   317d8:	d05a      	beq.n	31890 <mqtt_handle_rx+0x192>
   317da:	2b90      	cmp	r3, #144	; 0x90
   317dc:	d1e8      	bne.n	317b0 <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_SUBACK;
   317de:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   317e0:	a905      	add	r1, sp, #20
   317e2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   317e4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   317e8:	f7ff fe34 	bl	31454 <subscribe_ack_decode>
   317ec:	e045      	b.n	3187a <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   317ee:	2bd0      	cmp	r3, #208	; 0xd0
   317f0:	d1de      	bne.n	317b0 <mqtt_handle_rx+0xb2>
		if (client->unacked_ping <= 0) {
   317f2:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   317f6:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   317f8:	bfc4      	itt	gt
   317fa:	f103 33ff 	addgt.w	r3, r3, #4294967295
   317fe:	b25a      	sxtbgt	r2, r3
		evt.type = MQTT_EVT_PINGRESP;
   31800:	2309      	movs	r3, #9
   31802:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
   31806:	f88d 3010 	strb.w	r3, [sp, #16]
   3180a:	e010      	b.n	3182e <mqtt_handle_rx+0x130>
		evt.type = MQTT_EVT_CONNACK;
   3180c:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   31810:	4628      	mov	r0, r5
   31812:	aa05      	add	r2, sp, #20
   31814:	a902      	add	r1, sp, #8
   31816:	f7ff fdbf 	bl	31398 <connect_ack_decode>
		if (err_code == 0) {
   3181a:	4604      	mov	r4, r0
   3181c:	bb70      	cbnz	r0, 3187c <mqtt_handle_rx+0x17e>
			if (evt.param.connack.return_code ==
   3181e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   31822:	b94b      	cbnz	r3, 31838 <mqtt_handle_rx+0x13a>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   31824:	69ab      	ldr	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   31826:	900b      	str	r0, [sp, #44]	; 0x2c
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   31828:	f043 0304 	orr.w	r3, r3, #4
   3182c:	61ab      	str	r3, [r5, #24]
		event_notify(client, &evt);
   3182e:	4628      	mov	r0, r5
   31830:	a904      	add	r1, sp, #16
   31832:	f000 f8fb 	bl	31a2c <event_notify>
	if (err_code < 0) {
   31836:	e7bb      	b.n	317b0 <mqtt_handle_rx+0xb2>
		event_notify(client, &evt);
   31838:	4628      	mov	r0, r5
   3183a:	a904      	add	r1, sp, #16
			evt.result = evt.param.connack.return_code;
   3183c:	930b      	str	r3, [sp, #44]	; 0x2c
				err_code = -ECONNREFUSED;
   3183e:	f06f 046e 	mvn.w	r4, #110	; 0x6e
		event_notify(client, &evt);
   31842:	f000 f8f3 	bl	31a2c <event_notify>
	if (err_code < 0) {
   31846:	e7b6      	b.n	317b6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBLISH;
   31848:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3184a:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3184c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   31850:	ab05      	add	r3, sp, #20
   31852:	f7ff fdbb 	bl	313cc <publish_decode>
   31856:	4604      	mov	r4, r0
		client->internal.remaining_payload =
   31858:	9b09      	ldr	r3, [sp, #36]	; 0x24
		evt.result = err_code;
   3185a:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3185c:	622b      	str	r3, [r5, #32]
		event_notify(client, &evt);
   3185e:	4628      	mov	r0, r5
   31860:	a904      	add	r1, sp, #16
   31862:	f000 f8e3 	bl	31a2c <event_notify>
	if (err_code < 0) {
   31866:	2c00      	cmp	r4, #0
   31868:	daa2      	bge.n	317b0 <mqtt_handle_rx+0xb2>
   3186a:	e7a4      	b.n	317b6 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBACK;
   3186c:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3186e:	a905      	add	r1, sp, #20
   31870:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   31872:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   31876:	f7ff fde5 	bl	31444 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3187a:	4604      	mov	r4, r0
		evt.result = err_code;
   3187c:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3187e:	e7ee      	b.n	3185e <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_PUBREL;
   31880:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   31882:	a905      	add	r1, sp, #20
   31884:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   31886:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3188a:	f7ff fddf 	bl	3144c <publish_release_decode>
   3188e:	e7f4      	b.n	3187a <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_PUBCOMP;
   31890:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   31892:	a905      	add	r1, sp, #20
   31894:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   31896:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3189a:	f7ff fdd9 	bl	31450 <publish_complete_decode>
   3189e:	e7ec      	b.n	3187a <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_UNSUBACK;
   318a0:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   318a2:	a905      	add	r1, sp, #20
   318a4:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   318a8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   318ac:	f7ff fde3 	bl	31476 <unsubscribe_ack_decode>
   318b0:	e7e3      	b.n	3187a <mqtt_handle_rx+0x17c>

000318b2 <mqtt_client_tcp_connect>:
#include <zephyr/net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   318b2:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   318b4:	6d85      	ldr	r5, [r0, #88]	; 0x58
{
   318b6:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   318b8:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   318ba:	2206      	movs	r2, #6
   318bc:	2101      	movs	r1, #1
   318be:	f7dd fcb3 	bl	f228 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   318c2:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   318c4:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   318c6:	da04      	bge.n	318d2 <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   318c8:	f7fe f953 	bl	2fb72 <__errno>
   318cc:	6800      	ldr	r0, [r0, #0]
   318ce:	4240      	negs	r0, r0
}
   318d0:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   318d2:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   318d4:	6da1      	ldr	r1, [r4, #88]	; 0x58
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   318d6:	2b01      	cmp	r3, #1
   318d8:	bf0c      	ite	eq
   318da:	2208      	moveq	r2, #8
   318dc:	2218      	movne	r2, #24
	return z_impl_zsock_connect(sock, addr, addrlen);
   318de:	f7fd fa49 	bl	2ed74 <z_impl_zsock_connect>
	if (ret < 0) {
   318e2:	2800      	cmp	r0, #0
   318e4:	da03      	bge.n	318ee <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   318e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   318e8:	f7fd fa20 	bl	2ed2c <z_impl_zsock_close>
   318ec:	e7ec      	b.n	318c8 <mqtt_client_tcp_connect+0x16>
	return 0;
   318ee:	2000      	movs	r0, #0
   318f0:	e7ee      	b.n	318d0 <mqtt_client_tcp_connect+0x1e>

000318f2 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   318f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   318f6:	2400      	movs	r4, #0
{
   318f8:	4606      	mov	r6, r0
   318fa:	460f      	mov	r7, r1
   318fc:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   318fe:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   31900:	42ac      	cmp	r4, r5
   31902:	d301      	bcc.n	31908 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   31904:	2000      	movs	r0, #0
   31906:	e00d      	b.n	31924 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   31908:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3190a:	2300      	movs	r3, #0
   3190c:	e9cd 8800 	strd	r8, r8, [sp]
   31910:	1b2a      	subs	r2, r5, r4
   31912:	1939      	adds	r1, r7, r4
   31914:	f7fd fa59 	bl	2edca <z_impl_zsock_sendto>
		if (ret < 0) {
   31918:	1e03      	subs	r3, r0, #0
   3191a:	da06      	bge.n	3192a <mqtt_client_tcp_write+0x38>
			return -errno;
   3191c:	f7fe f929 	bl	2fb72 <__errno>
   31920:	6800      	ldr	r0, [r0, #0]
   31922:	4240      	negs	r0, r0
}
   31924:	b002      	add	sp, #8
   31926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3192a:	441c      	add	r4, r3
   3192c:	e7e8      	b.n	31900 <mqtt_client_tcp_write+0xe>

0003192e <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   31932:	2500      	movs	r5, #0
{
   31934:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   31936:	462b      	mov	r3, r5
{
   31938:	460c      	mov	r4, r1
   3193a:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3193c:	428b      	cmp	r3, r1
   3193e:	d110      	bne.n	31962 <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   31940:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   31942:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   31944:	42ae      	cmp	r6, r5
   31946:	d216      	bcs.n	31976 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   31948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3194a:	2200      	movs	r2, #0
   3194c:	4621      	mov	r1, r4
   3194e:	f7fd fa70 	bl	2ee32 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   31952:	1e03      	subs	r3, r0, #0
   31954:	da0c      	bge.n	31970 <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   31956:	f7fe f90c 	bl	2fb72 <__errno>
   3195a:	6800      	ldr	r0, [r0, #0]
   3195c:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3195e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   31962:	68a2      	ldr	r2, [r4, #8]
   31964:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   31968:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3196a:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3196c:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3196e:	e7e5      	b.n	3193c <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   31970:	441e      	add	r6, r3
		if (offset >= total_len) {
   31972:	42b5      	cmp	r5, r6
   31974:	d817      	bhi.n	319a6 <mqtt_client_tcp_write_msg+0x78>
	return 0;
   31976:	2000      	movs	r0, #0
   31978:	e7f1      	b.n	3195e <mqtt_client_tcp_write_msg+0x30>
			ret -= message->msg_iov[i].iov_len;
   3197a:	1a1b      	subs	r3, r3, r0
			message->msg_iov[i].iov_len = 0;
   3197c:	f8c1 8004 	str.w	r8, [r1, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   31980:	3201      	adds	r2, #1
   31982:	68e1      	ldr	r1, [r4, #12]
   31984:	4291      	cmp	r1, r2
   31986:	d9dd      	bls.n	31944 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   31988:	68a1      	ldr	r1, [r4, #8]
   3198a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   3198e:	6848      	ldr	r0, [r1, #4]
   31990:	4298      	cmp	r0, r3
   31992:	d9f2      	bls.n	3197a <mqtt_client_tcp_write_msg+0x4c>
				message->msg_iov[i].iov_len -= ret;
   31994:	1ac0      	subs	r0, r0, r3
   31996:	6048      	str	r0, [r1, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   31998:	68a0      	ldr	r0, [r4, #8]
   3199a:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   3199e:	4419      	add	r1, r3
				message->msg_iov[i].iov_base =
   319a0:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
				break;
   319a4:	e7ce      	b.n	31944 <mqtt_client_tcp_write_msg+0x16>
		for (i = 0; i < message->msg_iovlen; i++) {
   319a6:	2200      	movs	r2, #0
   319a8:	e7eb      	b.n	31982 <mqtt_client_tcp_write_msg+0x54>

000319aa <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   319aa:	b513      	push	{r0, r1, r4, lr}

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   319ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   319ae:	2400      	movs	r4, #0
	if (!shall_block) {
   319b0:	f083 0301 	eor.w	r3, r3, #1
   319b4:	e9cd 4400 	strd	r4, r4, [sp]
   319b8:	019b      	lsls	r3, r3, #6
   319ba:	f7fd fa65 	bl	2ee88 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   319be:	2800      	cmp	r0, #0
   319c0:	da03      	bge.n	319ca <mqtt_client_tcp_read+0x20>
		return -errno;
   319c2:	f7fe f8d6 	bl	2fb72 <__errno>
   319c6:	6800      	ldr	r0, [r0, #0]
   319c8:	4240      	negs	r0, r0
	}

	return ret;
}
   319ca:	b002      	add	sp, #8
   319cc:	bd10      	pop	{r4, pc}

000319ce <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   319ce:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   319d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   319d2:	f7fd f9ab 	bl	2ed2c <z_impl_zsock_close>
	if (ret < 0) {
   319d6:	2800      	cmp	r0, #0
   319d8:	da04      	bge.n	319e4 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   319da:	f7fe f8ca 	bl	2fb72 <__errno>
   319de:	6800      	ldr	r0, [r0, #0]
   319e0:	4240      	negs	r0, r0
	}

	return 0;
}
   319e2:	bd08      	pop	{r3, pc}
	return 0;
   319e4:	2000      	movs	r0, #0
   319e6:	e7fc      	b.n	319e2 <mqtt_client_tcp_disconnect+0x14>

000319e8 <k_uptime_get_32>:
{
   319e8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   319ea:	f003 f9d0 	bl	34d8e <z_impl_k_uptime_ticks>
   319ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   319f2:	fba0 0302 	umull	r0, r3, r0, r2
   319f6:	fb02 3301 	mla	r3, r2, r1, r3
   319fa:	0bc0      	lsrs	r0, r0, #15
}
   319fc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   31a00:	bd08      	pop	{r3, pc}

00031a02 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   31a02:	b538      	push	{r3, r4, r5, lr}
   31a04:	4604      	mov	r4, r0
   31a06:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   31a08:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   31a0a:	2100      	movs	r1, #0
   31a0c:	6f80      	ldr	r0, [r0, #120]	; 0x78
   31a0e:	f003 fb0d 	bl	3502c <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   31a12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   31a14:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   31a16:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   31a18:	4413      	add	r3, r2
   31a1a:	606b      	str	r3, [r5, #4]
}
   31a1c:	bd38      	pop	{r3, r4, r5, pc}

00031a1e <verify_tx_state.isra.0>:
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
	}

	return 0;
   31a1e:	f010 0f04 	tst.w	r0, #4
}
   31a22:	bf0c      	ite	eq
   31a24:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   31a28:	2000      	movne	r0, #0
   31a2a:	4770      	bx	lr

00031a2c <event_notify>:
{
   31a2c:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   31a2e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
   31a30:	4604      	mov	r4, r0
   31a32:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   31a34:	b153      	cbz	r3, 31a4c <event_notify+0x20>
		mqtt_mutex_unlock(client);
   31a36:	f7e7 fa13 	bl	18e60 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   31a3a:	4620      	mov	r0, r4
   31a3c:	4629      	mov	r1, r5
   31a3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   31a40:	4798      	blx	r3
		mqtt_mutex_lock(client);
   31a42:	4620      	mov	r0, r4
}
   31a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   31a48:	f7e7 ba26 	b.w	18e98 <mqtt_mutex_lock>
}
   31a4c:	bd38      	pop	{r3, r4, r5, pc}

00031a4e <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   31a4e:	b530      	push	{r4, r5, lr}
   31a50:	b089      	sub	sp, #36	; 0x24
   31a52:	4604      	mov	r4, r0
   31a54:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   31a56:	f7e7 f9f9 	bl	18e4c <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   31a5a:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   31a5c:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   31a5e:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   31a62:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   31a66:	4668      	mov	r0, sp
   31a68:	f003 fae0 	bl	3502c <memset>
   31a6c:	2301      	movs	r3, #1
		event_notify(client, &evt);
   31a6e:	4669      	mov	r1, sp
   31a70:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   31a72:	f88d 3000 	strb.w	r3, [sp]
   31a76:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   31a78:	f7ff ffd8 	bl	31a2c <event_notify>
}
   31a7c:	b009      	add	sp, #36	; 0x24
   31a7e:	bd30      	pop	{r4, r5, pc}

00031a80 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   31a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31a84:	460f      	mov	r7, r1
   31a86:	4690      	mov	r8, r2
   31a88:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   31a8a:	4605      	mov	r5, r0
   31a8c:	b320      	cbz	r0, 31ad8 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   31a8e:	f7e7 fa03 	bl	18e98 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   31a92:	6a2c      	ldr	r4, [r5, #32]
   31a94:	b1b4      	cbz	r4, 31ac4 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   31a96:	4544      	cmp	r4, r8
   31a98:	4622      	mov	r2, r4
   31a9a:	4633      	mov	r3, r6
   31a9c:	bf28      	it	cs
   31a9e:	4642      	movcs	r2, r8
   31aa0:	4639      	mov	r1, r7
   31aa2:	4628      	mov	r0, r5
   31aa4:	f7e7 f9c4 	bl	18e30 <mqtt_transport_read>
   31aa8:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   31aaa:	b916      	cbnz	r6, 31ab2 <read_publish_payload+0x32>
   31aac:	f110 0f0b 	cmn.w	r0, #11
   31ab0:	d008      	beq.n	31ac4 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   31ab2:	2c00      	cmp	r4, #0
   31ab4:	dc0c      	bgt.n	31ad0 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   31ab6:	bf08      	it	eq
   31ab8:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   31abc:	4628      	mov	r0, r5
   31abe:	4621      	mov	r1, r4
   31ac0:	f7ff ffc5 	bl	31a4e <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   31ac4:	4628      	mov	r0, r5
   31ac6:	f7e7 f9cb 	bl	18e60 <mqtt_mutex_unlock>

	return ret;
}
   31aca:	4620      	mov	r0, r4
   31acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   31ad0:	6a2b      	ldr	r3, [r5, #32]
   31ad2:	1b1b      	subs	r3, r3, r4
   31ad4:	622b      	str	r3, [r5, #32]
   31ad6:	e7f5      	b.n	31ac4 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   31ad8:	f06f 0415 	mvn.w	r4, #21
   31adc:	e7f5      	b.n	31aca <read_publish_payload+0x4a>

00031ade <client_write>:
{
   31ade:	b538      	push	{r3, r4, r5, lr}
   31ae0:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   31ae2:	f7e7 f98d 	bl	18e00 <mqtt_transport_write>
	if (err_code < 0) {
   31ae6:	1e04      	subs	r4, r0, #0
   31ae8:	da05      	bge.n	31af6 <client_write+0x18>
		client_disconnect(client, err_code, true);
   31aea:	4621      	mov	r1, r4
   31aec:	4628      	mov	r0, r5
   31aee:	f7ff ffae 	bl	31a4e <client_disconnect.constprop.0>
}
   31af2:	4620      	mov	r0, r4
   31af4:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   31af6:	f7ff ff77 	bl	319e8 <k_uptime_get_32>
	return 0;
   31afa:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   31afc:	6168      	str	r0, [r5, #20]
	return 0;
   31afe:	e7f8      	b.n	31af2 <client_write+0x14>

00031b00 <mqtt_client_init>:
{
   31b00:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   31b02:	4604      	mov	r4, r0
   31b04:	b190      	cbz	r0, 31b2c <mqtt_client_init+0x2c>
   31b06:	2288      	movs	r2, #136	; 0x88
   31b08:	2100      	movs	r1, #0
   31b0a:	f003 fa8f 	bl	3502c <memset>
	return z_impl_k_mutex_init(mutex);
   31b0e:	4620      	mov	r0, r4
   31b10:	f003 f856 	bl	34bc0 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   31b14:	2304      	movs	r3, #4
   31b16:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	client->clean_session = MQTT_CLEAN_SESSION;
   31b1a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   31b1e:	f043 0302 	orr.w	r3, r3, #2
   31b22:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	client->keepalive = MQTT_KEEPALIVE;
   31b26:	233c      	movs	r3, #60	; 0x3c
   31b28:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
   31b2c:	bd10      	pop	{r4, pc}

00031b2e <mqtt_connect>:
{
   31b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31b30:	4605      	mov	r5, r0
   31b32:	2800      	cmp	r0, #0
   31b34:	d03a      	beq.n	31bac <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   31b36:	6d03      	ldr	r3, [r0, #80]	; 0x50
   31b38:	b3c3      	cbz	r3, 31bac <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   31b3a:	f7e7 f9ad 	bl	18e98 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   31b3e:	6fab      	ldr	r3, [r5, #120]	; 0x78
   31b40:	b38b      	cbz	r3, 31ba6 <mqtt_connect+0x78>
   31b42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   31b44:	b37b      	cbz	r3, 31ba6 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   31b46:	4628      	mov	r0, r5
   31b48:	f7e7 f950 	bl	18dec <mqtt_transport_connect>
	if (err_code < 0) {
   31b4c:	1e04      	subs	r4, r0, #0
   31b4e:	db24      	blt.n	31b9a <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   31b50:	4669      	mov	r1, sp
   31b52:	4628      	mov	r0, r5
   31b54:	f7ff ff55 	bl	31a02 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31b58:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   31b5a:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31b5c:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   31b60:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   31b62:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   31b64:	f7e7 f89c 	bl	18ca0 <connect_request_encode>
	if (err_code < 0) {
   31b68:	1e04      	subs	r4, r0, #0
   31b6a:	db13      	blt.n	31b94 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   31b6c:	e9dd 1200 	ldrd	r1, r2, [sp]
   31b70:	4628      	mov	r0, r5
   31b72:	1a52      	subs	r2, r2, r1
   31b74:	f7e7 f944 	bl	18e00 <mqtt_transport_write>
	if (err_code < 0) {
   31b78:	1e04      	subs	r4, r0, #0
   31b7a:	db0b      	blt.n	31b94 <mqtt_connect+0x66>
   31b7c:	f7ff ff34 	bl	319e8 <k_uptime_get_32>
	client->unacked_ping = 0;
   31b80:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   31b82:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   31b84:	f885 4083 	strb.w	r4, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   31b88:	4628      	mov	r0, r5
   31b8a:	f7e7 f969 	bl	18e60 <mqtt_mutex_unlock>
}
   31b8e:	4620      	mov	r0, r4
   31b90:	b003      	add	sp, #12
   31b92:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   31b94:	4628      	mov	r0, r5
   31b96:	f7e7 f959 	bl	18e4c <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   31b9a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   31b9c:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   31ba0:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   31ba4:	e7f0      	b.n	31b88 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   31ba6:	f06f 040b 	mvn.w	r4, #11
   31baa:	e7f6      	b.n	31b9a <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   31bac:	f06f 0415 	mvn.w	r4, #21
   31bb0:	e7ed      	b.n	31b8e <mqtt_connect+0x60>

00031bb2 <mqtt_publish>:
{
   31bb2:	b570      	push	{r4, r5, r6, lr}
   31bb4:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   31bb6:	4605      	mov	r5, r0
{
   31bb8:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   31bba:	2800      	cmp	r0, #0
   31bbc:	d03a      	beq.n	31c34 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   31bbe:	2900      	cmp	r1, #0
   31bc0:	d038      	beq.n	31c34 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   31bc2:	f7e7 f969 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31bc6:	4628      	mov	r0, r5
   31bc8:	a901      	add	r1, sp, #4
   31bca:	f7ff ff1a 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31bce:	69a8      	ldr	r0, [r5, #24]
   31bd0:	f7ff ff25 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31bd4:	1e04      	subs	r4, r0, #0
   31bd6:	db22      	blt.n	31c1e <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   31bd8:	4630      	mov	r0, r6
   31bda:	a901      	add	r1, sp, #4
   31bdc:	f7ff fcc1 	bl	31562 <publish_encode>
	if (err_code < 0) {
   31be0:	1e04      	subs	r4, r0, #0
   31be2:	db1c      	blt.n	31c1e <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   31be4:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   31be6:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   31be8:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   31bea:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   31bec:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   31bee:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   31bf0:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   31bf2:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   31bf4:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   31bf6:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   31bf8:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   31bfc:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   31bfe:	f003 fa15 	bl	3502c <memset>
	msg.msg_iov = io_vector;
   31c02:	ab03      	add	r3, sp, #12
   31c04:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   31c06:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   31c08:	4628      	mov	r0, r5
   31c0a:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   31c0c:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   31c0e:	f7e7 f903 	bl	18e18 <mqtt_transport_write_msg>
	if (err_code < 0) {
   31c12:	1e04      	subs	r4, r0, #0
   31c14:	da09      	bge.n	31c2a <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   31c16:	4621      	mov	r1, r4
   31c18:	4628      	mov	r0, r5
   31c1a:	f7ff ff18 	bl	31a4e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   31c1e:	4628      	mov	r0, r5
   31c20:	f7e7 f91e 	bl	18e60 <mqtt_mutex_unlock>
}
   31c24:	4620      	mov	r0, r4
   31c26:	b00e      	add	sp, #56	; 0x38
   31c28:	bd70      	pop	{r4, r5, r6, pc}
   31c2a:	f7ff fedd 	bl	319e8 <k_uptime_get_32>
	return 0;
   31c2e:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   31c30:	6168      	str	r0, [r5, #20]
	return 0;
   31c32:	e7f4      	b.n	31c1e <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   31c34:	f06f 0415 	mvn.w	r4, #21
   31c38:	e7f4      	b.n	31c24 <mqtt_publish+0x72>

00031c3a <mqtt_publish_qos1_ack>:
{
   31c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31c3c:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   31c3e:	4605      	mov	r5, r0
   31c40:	b1f0      	cbz	r0, 31c80 <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   31c42:	b1e9      	cbz	r1, 31c80 <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   31c44:	f7e7 f928 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31c48:	4628      	mov	r0, r5
   31c4a:	4669      	mov	r1, sp
   31c4c:	f7ff fed9 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31c50:	69a8      	ldr	r0, [r5, #24]
   31c52:	f7ff fee4 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31c56:	1e04      	subs	r4, r0, #0
   31c58:	db0c      	blt.n	31c74 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   31c5a:	4669      	mov	r1, sp
   31c5c:	4630      	mov	r0, r6
   31c5e:	f7ff fcc1 	bl	315e4 <publish_ack_encode>
	if (err_code < 0) {
   31c62:	1e04      	subs	r4, r0, #0
   31c64:	db06      	blt.n	31c74 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31c66:	e9dd 1200 	ldrd	r1, r2, [sp]
   31c6a:	4628      	mov	r0, r5
   31c6c:	1a52      	subs	r2, r2, r1
   31c6e:	f7ff ff36 	bl	31ade <client_write>
   31c72:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   31c74:	4628      	mov	r0, r5
   31c76:	f7e7 f8f3 	bl	18e60 <mqtt_mutex_unlock>
}
   31c7a:	4620      	mov	r0, r4
   31c7c:	b002      	add	sp, #8
   31c7e:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   31c80:	f06f 0415 	mvn.w	r4, #21
   31c84:	e7f9      	b.n	31c7a <mqtt_publish_qos1_ack+0x40>

00031c86 <mqtt_disconnect>:
{
   31c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31c88:	4605      	mov	r5, r0
   31c8a:	b308      	cbz	r0, 31cd0 <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   31c8c:	f7e7 f904 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31c90:	4628      	mov	r0, r5
   31c92:	4669      	mov	r1, sp
   31c94:	f7ff feb5 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31c98:	69a8      	ldr	r0, [r5, #24]
   31c9a:	f7ff fec0 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31c9e:	1e04      	subs	r4, r0, #0
   31ca0:	db10      	blt.n	31cc4 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   31ca2:	4668      	mov	r0, sp
   31ca4:	f7e7 f87e 	bl	18da4 <disconnect_encode>
	if (err_code < 0) {
   31ca8:	1e04      	subs	r4, r0, #0
   31caa:	db0b      	blt.n	31cc4 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31cac:	e9dd 1200 	ldrd	r1, r2, [sp]
   31cb0:	4628      	mov	r0, r5
   31cb2:	1a52      	subs	r2, r2, r1
   31cb4:	f7ff ff13 	bl	31ade <client_write>
	if (err_code < 0) {
   31cb8:	1e04      	subs	r4, r0, #0
   31cba:	db03      	blt.n	31cc4 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   31cbc:	2100      	movs	r1, #0
   31cbe:	4628      	mov	r0, r5
   31cc0:	f7ff fec5 	bl	31a4e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   31cc4:	4628      	mov	r0, r5
   31cc6:	f7e7 f8cb 	bl	18e60 <mqtt_mutex_unlock>
}
   31cca:	4620      	mov	r0, r4
   31ccc:	b003      	add	sp, #12
   31cce:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   31cd0:	f06f 0415 	mvn.w	r4, #21
   31cd4:	e7f9      	b.n	31cca <mqtt_disconnect+0x44>

00031cd6 <mqtt_subscribe>:
{
   31cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31cd8:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   31cda:	4605      	mov	r5, r0
   31cdc:	b1f0      	cbz	r0, 31d1c <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   31cde:	b1e9      	cbz	r1, 31d1c <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   31ce0:	f7e7 f8da 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31ce4:	4628      	mov	r0, r5
   31ce6:	4669      	mov	r1, sp
   31ce8:	f7ff fe8b 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31cec:	69a8      	ldr	r0, [r5, #24]
   31cee:	f7ff fe96 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31cf2:	1e04      	subs	r4, r0, #0
   31cf4:	db0c      	blt.n	31d10 <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   31cf6:	4669      	mov	r1, sp
   31cf8:	4630      	mov	r0, r6
   31cfa:	f7ff fc78 	bl	315ee <subscribe_encode>
	if (err_code < 0) {
   31cfe:	1e04      	subs	r4, r0, #0
   31d00:	db06      	blt.n	31d10 <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31d02:	e9dd 1200 	ldrd	r1, r2, [sp]
   31d06:	4628      	mov	r0, r5
   31d08:	1a52      	subs	r2, r2, r1
   31d0a:	f7ff fee8 	bl	31ade <client_write>
   31d0e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   31d10:	4628      	mov	r0, r5
   31d12:	f7e7 f8a5 	bl	18e60 <mqtt_mutex_unlock>
}
   31d16:	4620      	mov	r0, r4
   31d18:	b002      	add	sp, #8
   31d1a:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   31d1c:	f06f 0415 	mvn.w	r4, #21
   31d20:	e7f9      	b.n	31d16 <mqtt_subscribe+0x40>

00031d22 <mqtt_unsubscribe>:
{
   31d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31d24:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   31d26:	4605      	mov	r5, r0
   31d28:	b1f0      	cbz	r0, 31d68 <mqtt_unsubscribe+0x46>
	NULL_PARAM_CHECK(param);
   31d2a:	b1e9      	cbz	r1, 31d68 <mqtt_unsubscribe+0x46>
	mqtt_mutex_lock(client);
   31d2c:	f7e7 f8b4 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31d30:	4628      	mov	r0, r5
   31d32:	4669      	mov	r1, sp
   31d34:	f7ff fe65 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31d38:	69a8      	ldr	r0, [r5, #24]
   31d3a:	f7ff fe70 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31d3e:	1e04      	subs	r4, r0, #0
   31d40:	db0c      	blt.n	31d5c <mqtt_unsubscribe+0x3a>
	err_code = unsubscribe_encode(param, &packet);
   31d42:	4669      	mov	r1, sp
   31d44:	4630      	mov	r0, r6
   31d46:	f7ff fc8a 	bl	3165e <unsubscribe_encode>
	if (err_code < 0) {
   31d4a:	1e04      	subs	r4, r0, #0
   31d4c:	db06      	blt.n	31d5c <mqtt_unsubscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
   31d52:	4628      	mov	r0, r5
   31d54:	1a52      	subs	r2, r2, r1
   31d56:	f7ff fec2 	bl	31ade <client_write>
   31d5a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   31d5c:	4628      	mov	r0, r5
   31d5e:	f7e7 f87f 	bl	18e60 <mqtt_mutex_unlock>
}
   31d62:	4620      	mov	r0, r4
   31d64:	b002      	add	sp, #8
   31d66:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   31d68:	f06f 0415 	mvn.w	r4, #21
   31d6c:	e7f9      	b.n	31d62 <mqtt_unsubscribe+0x40>

00031d6e <mqtt_ping>:
{
   31d6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31d70:	4605      	mov	r5, r0
   31d72:	b318      	cbz	r0, 31dbc <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   31d74:	f7e7 f890 	bl	18e98 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   31d78:	4628      	mov	r0, r5
   31d7a:	4669      	mov	r1, sp
   31d7c:	f7ff fe41 	bl	31a02 <tx_buf_init>
	err_code = verify_tx_state(client);
   31d80:	69a8      	ldr	r0, [r5, #24]
   31d82:	f7ff fe4c 	bl	31a1e <verify_tx_state.isra.0>
	if (err_code < 0) {
   31d86:	1e04      	subs	r4, r0, #0
   31d88:	db12      	blt.n	31db0 <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   31d8a:	4668      	mov	r0, sp
   31d8c:	f7e7 f81c 	bl	18dc8 <ping_request_encode>
	if (err_code < 0) {
   31d90:	1e04      	subs	r4, r0, #0
   31d92:	db0d      	blt.n	31db0 <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   31d94:	e9dd 1200 	ldrd	r1, r2, [sp]
   31d98:	4628      	mov	r0, r5
   31d9a:	1a52      	subs	r2, r2, r1
   31d9c:	f7ff fe9f 	bl	31ade <client_write>
   31da0:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   31da2:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   31da6:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   31da8:	bf1c      	itt	ne
   31daa:	3301      	addne	r3, #1
   31dac:	f885 3083 	strbne.w	r3, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   31db0:	4628      	mov	r0, r5
   31db2:	f7e7 f855 	bl	18e60 <mqtt_mutex_unlock>
}
   31db6:	4620      	mov	r0, r4
   31db8:	b003      	add	sp, #12
   31dba:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   31dbc:	f06f 0415 	mvn.w	r4, #21
   31dc0:	e7f9      	b.n	31db6 <mqtt_ping+0x48>

00031dc2 <mqtt_live>:
{
   31dc2:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31dc4:	4604      	mov	r4, r0
   31dc6:	b1f0      	cbz	r0, 31e06 <mqtt_live+0x44>
	mqtt_mutex_lock(client);
   31dc8:	f7e7 f866 	bl	18e98 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   31dcc:	6965      	ldr	r5, [r4, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   31dce:	f7ff fe0b 	bl	319e8 <k_uptime_get_32>

	if (diff < 0) {
   31dd2:	1b40      	subs	r0, r0, r5
   31dd4:	d506      	bpl.n	31de4 <mqtt_live+0x22>
	mqtt_mutex_unlock(client);
   31dd6:	4620      	mov	r0, r4
   31dd8:	f7e7 f842 	bl	18e60 <mqtt_mutex_unlock>
		return -EAGAIN;
   31ddc:	f06f 050a 	mvn.w	r5, #10
}
   31de0:	4628      	mov	r0, r5
   31de2:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->keepalive > 0) &&
   31de4:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
   31de8:	2b00      	cmp	r3, #0
   31dea:	d0f4      	beq.n	31dd6 <mqtt_live+0x14>
	    (elapsed_time >= (client->keepalive * 1000))) {
   31dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   31df0:	4353      	muls	r3, r2
	if ((client->keepalive > 0) &&
   31df2:	4283      	cmp	r3, r0
   31df4:	d8ef      	bhi.n	31dd6 <mqtt_live+0x14>
		err_code = mqtt_ping(client);
   31df6:	4620      	mov	r0, r4
   31df8:	f7ff ffb9 	bl	31d6e <mqtt_ping>
   31dfc:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   31dfe:	4620      	mov	r0, r4
   31e00:	f7e7 f82e 	bl	18e60 <mqtt_mutex_unlock>
	if (ping_sent) {
   31e04:	e7ec      	b.n	31de0 <mqtt_live+0x1e>
	NULL_PARAM_CHECK(client);
   31e06:	f06f 0515 	mvn.w	r5, #21
   31e0a:	e7e9      	b.n	31de0 <mqtt_live+0x1e>

00031e0c <mqtt_keepalive_time_left>:
{
   31e0c:	b538      	push	{r3, r4, r5, lr}
   31e0e:	4604      	mov	r4, r0
					client->internal.last_activity);
   31e10:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   31e12:	f7ff fde9 	bl	319e8 <k_uptime_get_32>
   31e16:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   31e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   31e1c:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
		return 0;
   31e20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   31e24:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   31e26:	b11a      	cbz	r2, 31e30 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   31e28:	4298      	cmp	r0, r3
   31e2a:	d904      	bls.n	31e36 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   31e2c:	1ac0      	subs	r0, r0, r3
}
   31e2e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   31e30:	f04f 30ff 	mov.w	r0, #4294967295
   31e34:	e7fb      	b.n	31e2e <mqtt_keepalive_time_left+0x22>
		return 0;
   31e36:	2000      	movs	r0, #0
   31e38:	e7f9      	b.n	31e2e <mqtt_keepalive_time_left+0x22>

00031e3a <mqtt_input>:
{
   31e3a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   31e3c:	4605      	mov	r5, r0
   31e3e:	b1d0      	cbz	r0, 31e76 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   31e40:	f7e7 f82a 	bl	18e98 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   31e44:	69ab      	ldr	r3, [r5, #24]
   31e46:	079b      	lsls	r3, r3, #30
   31e48:	d50f      	bpl.n	31e6a <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   31e4a:	6a2b      	ldr	r3, [r5, #32]
   31e4c:	b983      	cbnz	r3, 31e70 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   31e4e:	4628      	mov	r0, r5
   31e50:	f7ff fc55 	bl	316fe <mqtt_handle_rx>
	if (err_code < 0) {
   31e54:	1e04      	subs	r4, r0, #0
   31e56:	da03      	bge.n	31e60 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   31e58:	4621      	mov	r1, r4
   31e5a:	4628      	mov	r0, r5
   31e5c:	f7ff fdf7 	bl	31a4e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   31e60:	4628      	mov	r0, r5
   31e62:	f7e6 fffd 	bl	18e60 <mqtt_mutex_unlock>
}
   31e66:	4620      	mov	r0, r4
   31e68:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   31e6a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   31e6e:	e7f7      	b.n	31e60 <mqtt_input+0x26>
		return -EBUSY;
   31e70:	f06f 040f 	mvn.w	r4, #15
   31e74:	e7f4      	b.n	31e60 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   31e76:	f06f 0415 	mvn.w	r4, #21
   31e7a:	e7f4      	b.n	31e66 <mqtt_input+0x2c>

00031e7c <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   31e7c:	2301      	movs	r3, #1
   31e7e:	f7ff bdff 	b.w	31a80 <read_publish_payload>

00031e82 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   31e82:	b570      	push	{r4, r5, r6, lr}
   31e84:	4606      	mov	r6, r0
   31e86:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   31e88:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   31e8a:	42ac      	cmp	r4, r5
   31e8c:	d301      	bcc.n	31e92 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   31e8e:	2000      	movs	r0, #0
}
   31e90:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   31e92:	4621      	mov	r1, r4
   31e94:	4630      	mov	r0, r6
   31e96:	1b2a      	subs	r2, r5, r4
   31e98:	f7ff fff0 	bl	31e7c <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   31e9c:	2800      	cmp	r0, #0
   31e9e:	dbf7      	blt.n	31e90 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   31ea0:	d001      	beq.n	31ea6 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   31ea2:	4404      	add	r4, r0
   31ea4:	e7f1      	b.n	31e8a <mqtt_readall_publish_payload+0x8>
			return -EIO;
   31ea6:	f06f 0004 	mvn.w	r0, #4
   31eaa:	e7f1      	b.n	31e90 <mqtt_readall_publish_payload+0xe>

00031eac <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   31eac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   31eb0:	2400      	movs	r4, #0
{
   31eb2:	4606      	mov	r6, r0
   31eb4:	460f      	mov	r7, r1
   31eb6:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   31eb8:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   31eba:	42ac      	cmp	r4, r5
   31ebc:	d301      	bcc.n	31ec2 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   31ebe:	2000      	movs	r0, #0
   31ec0:	e00d      	b.n	31ede <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   31ec2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   31ec4:	2300      	movs	r3, #0
   31ec6:	e9cd 8800 	strd	r8, r8, [sp]
   31eca:	1b2a      	subs	r2, r5, r4
   31ecc:	1939      	adds	r1, r7, r4
   31ece:	f7fc ff7c 	bl	2edca <z_impl_zsock_sendto>
		if (ret < 0) {
   31ed2:	1e03      	subs	r3, r0, #0
   31ed4:	da06      	bge.n	31ee4 <mqtt_client_tls_write+0x38>
			return -errno;
   31ed6:	f7fd fe4c 	bl	2fb72 <__errno>
   31eda:	6800      	ldr	r0, [r0, #0]
   31edc:	4240      	negs	r0, r0
}
   31ede:	b002      	add	sp, #8
   31ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   31ee4:	441c      	add	r4, r3
   31ee6:	e7e8      	b.n	31eba <mqtt_client_tls_write+0xe>

00031ee8 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   31ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   31eec:	2500      	movs	r5, #0
{
   31eee:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   31ef0:	462b      	mov	r3, r5
{
   31ef2:	460c      	mov	r4, r1
   31ef4:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   31ef6:	428b      	cmp	r3, r1
   31ef8:	d110      	bne.n	31f1c <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   31efa:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   31efc:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   31efe:	42ae      	cmp	r6, r5
   31f00:	d216      	bcs.n	31f30 <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   31f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   31f04:	2200      	movs	r2, #0
   31f06:	4621      	mov	r1, r4
   31f08:	f7fc ff93 	bl	2ee32 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   31f0c:	1e03      	subs	r3, r0, #0
   31f0e:	da0c      	bge.n	31f2a <mqtt_client_tls_write_msg+0x42>
			return -errno;
   31f10:	f7fd fe2f 	bl	2fb72 <__errno>
   31f14:	6800      	ldr	r0, [r0, #0]
   31f16:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   31f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   31f1c:	68a2      	ldr	r2, [r4, #8]
   31f1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   31f22:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   31f24:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   31f26:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   31f28:	e7e5      	b.n	31ef6 <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   31f2a:	441e      	add	r6, r3
		if (offset >= total_len) {
   31f2c:	42b5      	cmp	r5, r6
   31f2e:	d817      	bhi.n	31f60 <mqtt_client_tls_write_msg+0x78>
	return 0;
   31f30:	2000      	movs	r0, #0
   31f32:	e7f1      	b.n	31f18 <mqtt_client_tls_write_msg+0x30>
			ret -= message->msg_iov[i].iov_len;
   31f34:	1a1b      	subs	r3, r3, r0
			message->msg_iov[i].iov_len = 0;
   31f36:	f8c1 8004 	str.w	r8, [r1, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   31f3a:	3201      	adds	r2, #1
   31f3c:	68e1      	ldr	r1, [r4, #12]
   31f3e:	4291      	cmp	r1, r2
   31f40:	d9dd      	bls.n	31efe <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   31f42:	68a1      	ldr	r1, [r4, #8]
   31f44:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   31f48:	6848      	ldr	r0, [r1, #4]
   31f4a:	4298      	cmp	r0, r3
   31f4c:	d9f2      	bls.n	31f34 <mqtt_client_tls_write_msg+0x4c>
				message->msg_iov[i].iov_len -= ret;
   31f4e:	1ac0      	subs	r0, r0, r3
   31f50:	6048      	str	r0, [r1, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   31f52:	68a0      	ldr	r0, [r4, #8]
   31f54:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   31f58:	4419      	add	r1, r3
				message->msg_iov[i].iov_base =
   31f5a:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
				break;
   31f5e:	e7ce      	b.n	31efe <mqtt_client_tls_write_msg+0x16>
		for (i = 0; i < message->msg_iovlen; i++) {
   31f60:	2200      	movs	r2, #0
   31f62:	e7eb      	b.n	31f3c <mqtt_client_tls_write_msg+0x54>

00031f64 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   31f64:	b513      	push	{r0, r1, r4, lr}

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   31f66:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   31f68:	2400      	movs	r4, #0
	if (!shall_block) {
   31f6a:	f083 0301 	eor.w	r3, r3, #1
   31f6e:	e9cd 4400 	strd	r4, r4, [sp]
   31f72:	019b      	lsls	r3, r3, #6
   31f74:	f7fc ff88 	bl	2ee88 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   31f78:	2800      	cmp	r0, #0
   31f7a:	da03      	bge.n	31f84 <mqtt_client_tls_read+0x20>
		return -errno;
   31f7c:	f7fd fdf9 	bl	2fb72 <__errno>
   31f80:	6800      	ldr	r0, [r0, #0]
   31f82:	4240      	negs	r0, r0
	}

	return ret;
}
   31f84:	b002      	add	sp, #8
   31f86:	bd10      	pop	{r4, pc}

00031f88 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   31f88:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   31f8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   31f8c:	f7fc fece 	bl	2ed2c <z_impl_zsock_close>
	if (ret < 0) {
   31f90:	2800      	cmp	r0, #0
   31f92:	da04      	bge.n	31f9e <mqtt_client_tls_disconnect+0x16>
		return -errno;
   31f94:	f7fd fded 	bl	2fb72 <__errno>
   31f98:	6800      	ldr	r0, [r0, #0]
   31f9a:	4240      	negs	r0, r0
	}

	return 0;
}
   31f9c:	bd08      	pop	{r3, pc}
	return 0;
   31f9e:	2000      	movs	r0, #0
   31fa0:	e7fc      	b.n	31f9c <mqtt_client_tls_disconnect+0x14>

00031fa2 <z_log_msg_static_create.constprop.0>:
   31fa2:	2300      	movs	r3, #0
   31fa4:	f7dc bc3a 	b.w	e81c <z_impl_z_log_msg_static_create>

00031fa8 <set_on_state>:
	__asm__ volatile(
   31fa8:	f04f 0320 	mov.w	r3, #32
   31fac:	f3ef 8211 	mrs	r2, BASEPRI
   31fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   31fb4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   31fb8:	6803      	ldr	r3, [r0, #0]
   31fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   31fbe:	f043 0302 	orr.w	r3, r3, #2
   31fc2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   31fc4:	f382 8811 	msr	BASEPRI, r2
   31fc8:	f3bf 8f6f 	isb	sy
}
   31fcc:	4770      	bx	lr

00031fce <async_start>:
{
   31fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31fd0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   31fd2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   31fd4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   31fd6:	f04f 0520 	mov.w	r5, #32
   31fda:	f3ef 8611 	mrs	r6, BASEPRI
   31fde:	f385 8812 	msr	BASEPRI_MAX, r5
   31fe2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   31fe6:	250c      	movs	r5, #12
   31fe8:	4369      	muls	r1, r5
   31fea:	440c      	add	r4, r1
   31fec:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   31fee:	f005 0c07 	and.w	ip, r5, #7
   31ff2:	f1bc 0f01 	cmp.w	ip, #1
   31ff6:	d10b      	bne.n	32010 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   31ff8:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   31ffa:	f386 8811 	msr	BASEPRI, r6
   31ffe:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   32002:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   32006:	6843      	ldr	r3, [r0, #4]
   32008:	585b      	ldr	r3, [r3, r1]
   3200a:	4798      	blx	r3
	return 0;
   3200c:	2000      	movs	r0, #0
}
   3200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   32010:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   32014:	42af      	cmp	r7, r5
   32016:	f386 8811 	msr	BASEPRI, r6
   3201a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   3201e:	bf0c      	ite	eq
   32020:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   32024:	f04f 30ff 	movne.w	r0, #4294967295
   32028:	e7f1      	b.n	3200e <async_start+0x40>

0003202a <api_start>:
{
   3202a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3202c:	2480      	movs	r4, #128	; 0x80
   3202e:	9400      	str	r4, [sp, #0]
   32030:	f7ff ffcd 	bl	31fce <async_start>
}
   32034:	b002      	add	sp, #8
   32036:	bd10      	pop	{r4, pc}

00032038 <onoff_started_callback>:
	return &data->mgr[type];
   32038:	6900      	ldr	r0, [r0, #16]
   3203a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3203c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   32040:	2100      	movs	r1, #0
   32042:	4710      	bx	r2

00032044 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   32044:	2000      	movs	r0, #0
   32046:	f7f3 b837 	b.w	250b8 <nrfx_clock_start>

0003204a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3204a:	2000      	movs	r0, #0
   3204c:	f7f3 b896 	b.w	2517c <nrfx_clock_stop>

00032050 <blocking_start_callback>:
{
   32050:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   32052:	f7f6 be79 	b.w	28d48 <z_impl_k_sem_give>

00032056 <api_stop>:
	return stop(dev, subsys, CTX_API);
   32056:	2280      	movs	r2, #128	; 0x80
   32058:	f7e7 bb4a 	b.w	196f0 <stop>

0003205c <debug_hook_out_nop>:
}
   3205c:	2000      	movs	r0, #0
   3205e:	4770      	bx	lr

00032060 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   32060:	2000      	movs	r0, #0
   32062:	4770      	bx	lr

00032064 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   32064:	b538      	push	{r3, r4, r5, lr}
   32066:	460c      	mov	r4, r1
   32068:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   3206a:	f7e1 f9d7 	bl	1341c <bt_is_ready>
   3206e:	b128      	cbz	r0, 3207c <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   32070:	4629      	mov	r1, r5
   32072:	4620      	mov	r0, r4
}
   32074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   32078:	f7e0 b89c 	b.w	121b4 <bt_hci_le_rand>
}
   3207c:	f06f 000a 	mvn.w	r0, #10
   32080:	bd38      	pop	{r3, r4, r5, pc}

00032082 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   32082:	4608      	mov	r0, r1
   32084:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   32086:	4611      	mov	r1, r2
   32088:	f7f2 f9b4 	bl	243f4 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   3208c:	2800      	cmp	r0, #0
	}

	return 0;
}
   3208e:	bf18      	it	ne
   32090:	f06f 0004 	mvnne.w	r0, #4
   32094:	bd08      	pop	{r3, pc}

00032096 <entropy_psa_crypto_rng_init>:
{
   32096:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   32098:	f001 faec 	bl	33674 <psa_crypto_init>
		return -EIO;
   3209c:	2800      	cmp	r0, #0
}
   3209e:	bf18      	it	ne
   320a0:	f06f 0004 	mvnne.w	r0, #4
   320a4:	bd08      	pop	{r3, pc}

000320a6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320a6:	6843      	ldr	r3, [r0, #4]
}
   320a8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320aa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   320ac:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   320ae:	600b      	str	r3, [r1, #0]
}
   320b0:	4770      	bx	lr

000320b2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320b2:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   320b4:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320b8:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   320ba:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   320be:	6098      	str	r0, [r3, #8]
}
   320c0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   320c2:	60d9      	str	r1, [r3, #12]
   320c4:	4770      	bx	lr

000320c6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320c6:	6843      	ldr	r3, [r0, #4]
}
   320c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   320cc:	6099      	str	r1, [r3, #8]
}
   320ce:	4770      	bx	lr

000320d0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320d0:	6843      	ldr	r3, [r0, #4]
}
   320d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320d4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   320d6:	60d9      	str	r1, [r3, #12]
}
   320d8:	4770      	bx	lr

000320da <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   320da:	6843      	ldr	r3, [r0, #4]
   320dc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   320de:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   320e0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   320e4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   320e6:	6090      	str	r0, [r2, #8]
}
   320e8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   320ea:	60d3      	str	r3, [r2, #12]
   320ec:	4770      	bx	lr

000320ee <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   320ee:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   320f0:	6843      	ldr	r3, [r0, #4]
   320f2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   320f4:	7a05      	ldrb	r5, [r0, #8]
   320f6:	6844      	ldr	r4, [r0, #4]
   320f8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   320fc:	42a3      	cmp	r3, r4
   320fe:	d302      	bcc.n	32106 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   32100:	f06f 0001 	mvn.w	r0, #1
}
   32104:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   32106:	795c      	ldrb	r4, [r3, #5]
   32108:	428c      	cmp	r4, r1
   3210a:	d001      	beq.n	32110 <pinctrl_lookup_state+0x22>
		(*state)++;
   3210c:	3308      	adds	r3, #8
   3210e:	e7f0      	b.n	320f2 <pinctrl_lookup_state+0x4>
			return 0;
   32110:	2000      	movs	r0, #0
   32112:	e7f7      	b.n	32104 <pinctrl_lookup_state+0x16>

00032114 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   32114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32118:	4615      	mov	r5, r2
   3211a:	4681      	mov	r9, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3211c:	f04f 0801 	mov.w	r8, #1
   32120:	b085      	sub	sp, #20
   32122:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   32126:	454f      	cmp	r7, r9
   32128:	d103      	bne.n	32132 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   3212a:	2000      	movs	r0, #0
}
   3212c:	b005      	add	sp, #20
   3212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   32132:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   32136:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3213a:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   3213e:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   32140:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   32144:	bf08      	it	eq
   32146:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   3214a:	2b19      	cmp	r3, #25
   3214c:	d873      	bhi.n	32236 <pinctrl_configure_pins+0x122>
   3214e:	e8df f003 	tbb	[pc, r3]
   32152:	190d      	.short	0x190d
   32154:	3325221f 	.word	0x3325221f
   32158:	72727222 	.word	0x72727222
   3215c:	725d3872 	.word	0x725d3872
   32160:	72727272 	.word	0x72727272
   32164:	72727272 	.word	0x72727272
   32168:	6f6c6960 	.word	0x6f6c6960
			NRF_PSEL_UART(reg, TXD) = pin;
   3216c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32170:	a803      	add	r0, sp, #12
   32172:	9403      	str	r4, [sp, #12]
   32174:	f7e7 fe92 	bl	19e9c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   32178:	fa08 f304 	lsl.w	r3, r8, r4
        nrf_gpio_pin_set(pin_number);
   3217c:	f04f 0a01 	mov.w	sl, #1
    p_reg->OUTSET = set_mask;
   32180:	6083      	str	r3, [r0, #8]
   32182:	e003      	b.n	3218c <pinctrl_configure_pins+0x78>
			NRF_PSEL_UART(reg, RXD) = pin;
   32184:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   32188:	f04f 0a00 	mov.w	sl, #0
        nrf_gpio_pin_set(pin_number);
   3218c:	46d3      	mov	fp, sl
   3218e:	e020      	b.n	321d2 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_UART(reg, RTS) = pin;
   32190:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   32194:	e7ec      	b.n	32170 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   32196:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   3219a:	e7f5      	b.n	32188 <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3219c:	f04f 0a00 	mov.w	sl, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   321a0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   321a4:	a803      	add	r0, sp, #12
   321a6:	9403      	str	r4, [sp, #12]
   321a8:	f7e7 fe78 	bl	19e9c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   321ac:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   321b0:	f04f 0b01 	mov.w	fp, #1
   321b4:	60c3      	str	r3, [r0, #12]
   321b6:	e00c      	b.n	321d2 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   321b8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   321bc:	f04f 0a01 	mov.w	sl, #1
   321c0:	e7f0      	b.n	321a4 <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   321c2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   321c6:	2e00      	cmp	r6, #0
   321c8:	d1de      	bne.n	32188 <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   321ca:	f04f 0a00 	mov.w	sl, #0
				drive = NRF_DRIVE_S0D1;
   321ce:	2606      	movs	r6, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   321d0:	46d3      	mov	fp, sl
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   321d2:	f859 3b04 	ldr.w	r3, [r9], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   321d6:	a803      	add	r0, sp, #12
   321d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   321dc:	2a00      	cmp	r2, #0
   321de:	bf1c      	itt	ne
   321e0:	f04f 0b00 	movne.w	fp, #0
   321e4:	f04f 0a01 	movne.w	sl, #1
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   321e8:	9301      	str	r3, [sp, #4]
   321ea:	9403      	str	r4, [sp, #12]
   321ec:	f7e7 fe56 	bl	19e9c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   321f0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   321f2:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   321f4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   321f8:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   321fc:	ea46 060b 	orr.w	r6, r6, fp
   32200:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   32204:	3480      	adds	r4, #128	; 0x80
   32206:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3220a:	e78c      	b.n	32126 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   3220c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   32210:	e7d9      	b.n	321c6 <pinctrl_configure_pins+0xb2>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   32212:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   32216:	f8d9 3000 	ldr.w	r3, [r9]
   3221a:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   3221e:	2b00      	cmp	r3, #0
   32220:	d0cc      	beq.n	321bc <pinctrl_configure_pins+0xa8>
   32222:	e7a5      	b.n	32170 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   32224:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   32228:	e7f5      	b.n	32216 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   3222a:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   3222e:	e7f2      	b.n	32216 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   32230:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   32234:	e7ef      	b.n	32216 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   32236:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3223a:	e777      	b.n	3212c <pinctrl_configure_pins+0x18>

0003223c <uarte_nrfx_config_get>:
{
   3223c:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   3223e:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   32240:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   32244:	e883 0003 	stmia.w	r3, {r0, r1}
}
   32248:	2000      	movs	r0, #0
   3224a:	4770      	bx	lr

0003224c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3224c:	6843      	ldr	r3, [r0, #4]
   3224e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   32250:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   32254:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   32258:	4770      	bx	lr

0003225a <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   3225a:	4770      	bx	lr

0003225c <user_callback>:
	if (data->async->user_callback) {
   3225c:	6903      	ldr	r3, [r0, #16]
   3225e:	691a      	ldr	r2, [r3, #16]
   32260:	6813      	ldr	r3, [r2, #0]
   32262:	b10b      	cbz	r3, 32268 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   32264:	6852      	ldr	r2, [r2, #4]
   32266:	4718      	bx	r3
}
   32268:	4770      	bx	lr

0003226a <notify_uart_rx_rdy>:
{
   3226a:	b570      	push	{r4, r5, r6, lr}
   3226c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   3226e:	6906      	ldr	r6, [r0, #16]
{
   32270:	4604      	mov	r4, r0
   32272:	460d      	mov	r5, r1
	struct uart_event evt = {
   32274:	2214      	movs	r2, #20
   32276:	2100      	movs	r1, #0
   32278:	a801      	add	r0, sp, #4
   3227a:	f002 fed7 	bl	3502c <memset>
   3227e:	2302      	movs	r3, #2
   32280:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   32284:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   32286:	4620      	mov	r0, r4
	struct uart_event evt = {
   32288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   3228a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   3228c:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   3228e:	e9cd 3503 	strd	r3, r5, [sp, #12]
   32292:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   32294:	f7ff ffe2 	bl	3225c <user_callback>
}
   32298:	b006      	add	sp, #24
   3229a:	bd70      	pop	{r4, r5, r6, pc}

0003229c <rx_buf_release>:
{
   3229c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   3229e:	680e      	ldr	r6, [r1, #0]
{
   322a0:	4605      	mov	r5, r0
   322a2:	460c      	mov	r4, r1
   322a4:	b086      	sub	sp, #24
	if (*buf) {
   322a6:	b17e      	cbz	r6, 322c8 <rx_buf_release+0x2c>
		struct uart_event evt = {
   322a8:	2214      	movs	r2, #20
   322aa:	2100      	movs	r1, #0
   322ac:	a801      	add	r0, sp, #4
   322ae:	f002 febd 	bl	3502c <memset>
   322b2:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   322b4:	4628      	mov	r0, r5
   322b6:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   322ba:	f88d 3004 	strb.w	r3, [sp, #4]
   322be:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   322c0:	f7ff ffcc 	bl	3225c <user_callback>
		*buf = NULL;
   322c4:	2300      	movs	r3, #0
   322c6:	6023      	str	r3, [r4, #0]
}
   322c8:	b006      	add	sp, #24
   322ca:	bd70      	pop	{r4, r5, r6, pc}

000322cc <notify_rx_disable>:
{
   322cc:	b510      	push	{r4, lr}
   322ce:	b086      	sub	sp, #24
   322d0:	4604      	mov	r4, r0
	struct uart_event evt = {
   322d2:	2214      	movs	r2, #20
   322d4:	2100      	movs	r1, #0
   322d6:	a801      	add	r0, sp, #4
   322d8:	f002 fea8 	bl	3502c <memset>
   322dc:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   322de:	4620      	mov	r0, r4
   322e0:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   322e2:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   322e6:	f7ff ffb9 	bl	3225c <user_callback>
}
   322ea:	b006      	add	sp, #24
   322ec:	bd10      	pop	{r4, pc}

000322ee <uarte_nrfx_rx_buf_rsp>:
{
   322ee:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   322f0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   322f2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   322f4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   322f6:	f04f 0020 	mov.w	r0, #32
   322fa:	f3ef 8611 	mrs	r6, BASEPRI
   322fe:	f380 8812 	msr	BASEPRI_MAX, r0
   32302:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   32306:	692c      	ldr	r4, [r5, #16]
   32308:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3230a:	b198      	cbz	r0, 32334 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   3230c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   3230e:	b9a0      	cbnz	r0, 3233a <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   32310:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   32312:	692c      	ldr	r4, [r5, #16]
   32314:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   32316:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3231a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   3231e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32322:	f042 0220 	orr.w	r2, r2, #32
   32326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   3232a:	f386 8811 	msr	BASEPRI, r6
   3232e:	f3bf 8f6f 	isb	sy
}
   32332:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   32334:	f06f 000c 	mvn.w	r0, #12
   32338:	e7f7      	b.n	3232a <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   3233a:	f06f 000f 	mvn.w	r0, #15
   3233e:	e7f4      	b.n	3232a <uarte_nrfx_rx_buf_rsp+0x3c>

00032340 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   32340:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   32342:	6918      	ldr	r0, [r3, #16]
   32344:	b120      	cbz	r0, 32350 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   32346:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   32348:	691b      	ldr	r3, [r3, #16]
	return 0;
   3234a:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   3234c:	605a      	str	r2, [r3, #4]
	return 0;
   3234e:	4770      	bx	lr
		return -ENOTSUP;
   32350:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   32354:	4770      	bx	lr

00032356 <uarte_nrfx_poll_in>:
{
   32356:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   32358:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3235a:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   3235c:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   3235e:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   32360:	b960      	cbnz	r0, 3237c <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32362:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   32366:	b164      	cbz	r4, 32382 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   32368:	69d2      	ldr	r2, [r2, #28]
   3236a:	7812      	ldrb	r2, [r2, #0]
   3236c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3236e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   32372:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32376:	2201      	movs	r2, #1
   32378:	601a      	str	r2, [r3, #0]
}
   3237a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3237c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   32380:	e7fb      	b.n	3237a <uarte_nrfx_poll_in+0x24>
		return -1;
   32382:	f04f 30ff 	mov.w	r0, #4294967295
   32386:	e7f8      	b.n	3237a <uarte_nrfx_poll_in+0x24>

00032388 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   32388:	2a00      	cmp	r2, #0
{
   3238a:	b510      	push	{r4, lr}
   3238c:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3238e:	dd10      	ble.n	323b2 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   32390:	6843      	ldr	r3, [r0, #4]
   32392:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32394:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   32398:	b150      	cbz	r0, 323b0 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3239a:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   3239c:	6922      	ldr	r2, [r4, #16]
   3239e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   323a2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   323a6:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   323a8:	69d2      	ldr	r2, [r2, #28]
   323aa:	7812      	ldrb	r2, [r2, #0]
   323ac:	700a      	strb	r2, [r1, #0]
   323ae:	6018      	str	r0, [r3, #0]
}
   323b0:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   323b2:	2000      	movs	r0, #0
   323b4:	e7fc      	b.n	323b0 <uarte_nrfx_fifo_read+0x28>

000323b6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   323b6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   323b8:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   323ba:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   323bc:	f04f 0020 	mov.w	r0, #32
   323c0:	f3ef 8311 	mrs	r3, BASEPRI
   323c4:	f380 8812 	msr	BASEPRI_MAX, r0
   323c8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   323cc:	2000      	movs	r0, #0
   323ce:	68c9      	ldr	r1, [r1, #12]
   323d0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   323d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   323d6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   323da:	f383 8811 	msr	BASEPRI, r3
   323de:	f3bf 8f6f 	isb	sy
}
   323e2:	4770      	bx	lr

000323e4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   323e4:	2201      	movs	r2, #1
   323e6:	6903      	ldr	r3, [r0, #16]
   323e8:	68db      	ldr	r3, [r3, #12]
   323ea:	739a      	strb	r2, [r3, #14]
}
   323ec:	4770      	bx	lr

000323ee <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   323ee:	6903      	ldr	r3, [r0, #16]
   323f0:	68db      	ldr	r3, [r3, #12]
   323f2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   323f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   323f8:	b962      	cbnz	r2, 32414 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   323fa:	6842      	ldr	r2, [r0, #4]
   323fc:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   323fe:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   32402:	b140      	cbz	r0, 32416 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   32404:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   32408:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3240c:	d003      	beq.n	32416 <uarte_nrfx_irq_tx_ready_complete+0x28>
   3240e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   32410:	6119      	str	r1, [r3, #16]
   32412:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   32414:	2000      	movs	r0, #0
}
   32416:	4770      	bx	lr

00032418 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   32418:	6843      	ldr	r3, [r0, #4]
   3241a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3241c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   32420:	3800      	subs	r0, #0
   32422:	bf18      	it	ne
   32424:	2001      	movne	r0, #1
   32426:	4770      	bx	lr

00032428 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   32428:	2210      	movs	r2, #16
	return config->uarte_regs;
   3242a:	6843      	ldr	r3, [r0, #4]
   3242c:	681b      	ldr	r3, [r3, #0]
   3242e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   32432:	4770      	bx	lr

00032434 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   32434:	2210      	movs	r2, #16
	return config->uarte_regs;
   32436:	6843      	ldr	r3, [r0, #4]
   32438:	681b      	ldr	r3, [r3, #0]
   3243a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3243e:	4770      	bx	lr

00032440 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   32440:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   32444:	6843      	ldr	r3, [r0, #4]
   32446:	681b      	ldr	r3, [r3, #0]
   32448:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3244c:	4770      	bx	lr

0003244e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3244e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   32452:	6843      	ldr	r3, [r0, #4]
   32454:	681b      	ldr	r3, [r3, #0]
   32456:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3245a:	4770      	bx	lr

0003245c <uarte_nrfx_irq_is_pending>:
{
   3245c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3245e:	6843      	ldr	r3, [r0, #4]
{
   32460:	4604      	mov	r4, r0
	return config->uarte_regs;
   32462:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   32464:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   32468:	025b      	lsls	r3, r3, #9
   3246a:	d405      	bmi.n	32478 <uarte_nrfx_irq_is_pending+0x1c>
   3246c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   32470:	f010 0010 	ands.w	r0, r0, #16
   32474:	d106      	bne.n	32484 <uarte_nrfx_irq_is_pending+0x28>
}
   32476:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   32478:	f7ff ffb9 	bl	323ee <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3247c:	2800      	cmp	r0, #0
   3247e:	d0f5      	beq.n	3246c <uarte_nrfx_irq_is_pending+0x10>
		||
   32480:	2001      	movs	r0, #1
   32482:	e7f8      	b.n	32476 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   32484:	4620      	mov	r0, r4
   32486:	f7ff ffc7 	bl	32418 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3248a:	3800      	subs	r0, #0
   3248c:	bf18      	it	ne
   3248e:	2001      	movne	r0, #1
   32490:	e7f1      	b.n	32476 <uarte_nrfx_irq_is_pending+0x1a>

00032492 <uarte_nrfx_irq_update>:
}
   32492:	2001      	movs	r0, #1
   32494:	4770      	bx	lr

00032496 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   32496:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   32498:	68d8      	ldr	r0, [r3, #12]
   3249a:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   3249c:	68db      	ldr	r3, [r3, #12]
   3249e:	605a      	str	r2, [r3, #4]
}
   324a0:	4770      	bx	lr

000324a2 <uarte_enable>:
{
   324a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   324a4:	6907      	ldr	r7, [r0, #16]
{
   324a6:	4604      	mov	r4, r0
	if (data->async) {
   324a8:	693b      	ldr	r3, [r7, #16]
   324aa:	b92b      	cbnz	r3, 324b8 <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   324ac:	2208      	movs	r2, #8
	return config->uarte_regs;
   324ae:	6863      	ldr	r3, [r4, #4]
   324b0:	681b      	ldr	r3, [r3, #0]
   324b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   324b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   324b8:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	const struct uarte_nrfx_config *config = dev->config;
   324bc:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   324be:	4329      	orrs	r1, r5
   324c0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		if (HW_RX_COUNTING_ENABLED(data) && disabled) {
   324c4:	693b      	ldr	r3, [r7, #16]
   324c6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   324ca:	2b00      	cmp	r3, #0
   324cc:	d0ee      	beq.n	324ac <uarte_enable+0xa>
   324ce:	2d00      	cmp	r5, #0
   324d0:	d1ec      	bne.n	324ac <uarte_enable+0xa>
			const nrfx_timer_t *timer = &config->timer;
   324d2:	3610      	adds	r6, #16
			nrfx_timer_enable(timer);
   324d4:	4630      	mov	r0, r6
   324d6:	f7f3 fc47 	bl	25d68 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   324da:	693b      	ldr	r3, [r7, #16]
   324dc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   324e0:	42ab      	cmp	r3, r5
   324e2:	dde3      	ble.n	324ac <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   324e4:	4630      	mov	r0, r6
   324e6:	f7f3 fcc1 	bl	25e6c <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   324ea:	3501      	adds	r5, #1
   324ec:	e7f5      	b.n	324da <uarte_enable+0x38>

000324ee <tx_start>:
{
   324ee:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   324f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   324f2:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   324f4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   324f8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   324fc:	2200      	movs	r2, #0
   324fe:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   32502:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   32506:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3250a:	685b      	ldr	r3, [r3, #4]
   3250c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   32510:	06db      	lsls	r3, r3, #27
   32512:	d506      	bpl.n	32522 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   32514:	2101      	movs	r1, #1
   32516:	f7ff ffc4 	bl	324a2 <uarte_enable>
    p_reg->INTENSET = mask;
   3251a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3251e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32522:	2301      	movs	r3, #1
   32524:	60a3      	str	r3, [r4, #8]
}
   32526:	bd10      	pop	{r4, pc}

00032528 <uarte_nrfx_rx_disable>:
{
   32528:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3252a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3252c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   3252e:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   32530:	692b      	ldr	r3, [r5, #16]
   32532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   32534:	b1d2      	cbz	r2, 3256c <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   32536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   32538:	b153      	cbz	r3, 32550 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   3253a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   3253e:	f023 0320 	bic.w	r3, r3, #32
   32542:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32546:	2300      	movs	r3, #0
   32548:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3254c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   32550:	6928      	ldr	r0, [r5, #16]
   32552:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   32554:	f002 fc4f 	bl	34df6 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   32558:	2000      	movs	r0, #0
   3255a:	692b      	ldr	r3, [r5, #16]
   3255c:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   32560:	2301      	movs	r3, #1
   32562:	692a      	ldr	r2, [r5, #16]
   32564:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32568:	6063      	str	r3, [r4, #4]
}
   3256a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3256c:	f06f 000d 	mvn.w	r0, #13
   32570:	e7fb      	b.n	3256a <uarte_nrfx_rx_disable+0x42>

00032572 <setup_tx_cache>:
{
   32572:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   32574:	6903      	ldr	r3, [r0, #16]
   32576:	68da      	ldr	r2, [r3, #12]
   32578:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   3257a:	1a52      	subs	r2, r2, r1
   3257c:	d00f      	beq.n	3259e <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   3257e:	2a08      	cmp	r2, #8
   32580:	bf28      	it	cs
   32582:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   32584:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   32586:	6903      	ldr	r3, [r0, #16]
   32588:	6999      	ldr	r1, [r3, #24]
   3258a:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   3258c:	6903      	ldr	r3, [r0, #16]
   3258e:	6898      	ldr	r0, [r3, #8]
   32590:	69d9      	ldr	r1, [r3, #28]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32592:	4401      	add	r1, r0
   32594:	6998      	ldr	r0, [r3, #24]
   32596:	f002 fd29 	bl	34fec <memcpy>
	return true;
   3259a:	2001      	movs	r0, #1
}
   3259c:	bd08      	pop	{r3, pc}
		return false;
   3259e:	4610      	mov	r0, r2
   325a0:	e7fc      	b.n	3259c <setup_tx_cache+0x2a>

000325a2 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   325a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   325a4:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   325a6:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   325a8:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   325aa:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   325ae:	b1f1      	cbz	r1, 325ee <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   325b0:	2100      	movs	r1, #0
   325b2:	4618      	mov	r0, r3
   325b4:	f002 fd3a 	bl	3502c <memset>
   325b8:	4603      	mov	r3, r0
   325ba:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   325bc:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   325c0:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   325c2:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   325c4:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   325c8:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   325cc:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   325d0:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   325d2:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   325d6:	2800      	cmp	r0, #0
   325d8:	d0fb      	beq.n	325d2 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   325da:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   325de:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   325e2:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   325e6:	b92b      	cbnz	r3, 325f4 <rx_flush.isra.0+0x52>
			return rx_amount;
   325e8:	b2c0      	uxtb	r0, r0
}
   325ea:	b002      	add	sp, #8
   325ec:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   325ee:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   325f0:	4669      	mov	r1, sp
   325f2:	e7e3      	b.n	325bc <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   325f4:	4285      	cmp	r5, r0
   325f6:	d1f7      	bne.n	325e8 <rx_flush.isra.0+0x46>
   325f8:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   325fa:	4293      	cmp	r3, r2
   325fc:	d101      	bne.n	32602 <rx_flush.isra.0+0x60>
	return 0;
   325fe:	2000      	movs	r0, #0
   32600:	e7f3      	b.n	325ea <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   32602:	f813 1b01 	ldrb.w	r1, [r3], #1
   32606:	2900      	cmp	r1, #0
   32608:	d0f7      	beq.n	325fa <rx_flush.isra.0+0x58>
   3260a:	e7ed      	b.n	325e8 <rx_flush.isra.0+0x46>

0003260c <async_uart_release>:
{
   3260c:	b570      	push	{r4, r5, r6, lr}
   3260e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   32610:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   32612:	f04f 0320 	mov.w	r3, #32
   32616:	f3ef 8611 	mrs	r6, BASEPRI
   3261a:	f383 8812 	msr	BASEPRI_MAX, r3
   3261e:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   32622:	6910      	ldr	r0, [r2, #16]
   32624:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   32628:	ea23 0301 	bic.w	r3, r3, r1
   3262c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   32630:	6915      	ldr	r5, [r2, #16]
   32632:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   32636:	b9eb      	cbnz	r3, 32674 <async_uart_release+0x68>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   32638:	2902      	cmp	r1, #2
   3263a:	d107      	bne.n	3264c <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   3263c:	2205      	movs	r2, #5
   3263e:	6860      	ldr	r0, [r4, #4]
   32640:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   32644:	f7ff ffad 	bl	325a2 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   32648:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	struct uarte_nrfx_data *data = dev->data;
   3264c:	6925      	ldr	r5, [r4, #16]
	if (data->async && HW_RX_COUNTING_ENABLED(data)) {
   3264e:	692b      	ldr	r3, [r5, #16]
   32650:	b15b      	cbz	r3, 3266a <async_uart_release+0x5e>
   32652:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   32656:	b143      	cbz	r3, 3266a <async_uart_release+0x5e>
		nrfx_timer_disable(&config->timer);
   32658:	6860      	ldr	r0, [r4, #4]
   3265a:	3010      	adds	r0, #16
   3265c:	f7f3 fba8 	bl	25db0 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   32660:	2300      	movs	r3, #0
   32662:	692a      	ldr	r2, [r5, #16]
   32664:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_total_user_byte_cnt = 0;
   32666:	692a      	ldr	r2, [r5, #16]
   32668:	6713      	str	r3, [r2, #112]	; 0x70
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3266a:	2200      	movs	r2, #0
	return config->uarte_regs;
   3266c:	6863      	ldr	r3, [r4, #4]
   3266e:	681b      	ldr	r3, [r3, #0]
   32670:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   32674:	f386 8811 	msr	BASEPRI, r6
   32678:	f3bf 8f6f 	isb	sy
}
   3267c:	bd70      	pop	{r4, r5, r6, pc}

0003267e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3267e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   32680:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32682:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   32686:	b940      	cbnz	r0, 3269a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   32688:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3268a:	079b      	lsls	r3, r3, #30
   3268c:	d406      	bmi.n	3269c <is_tx_ready.isra.0+0x1e>
   3268e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   32692:	3800      	subs	r0, #0
   32694:	bf18      	it	ne
   32696:	2001      	movne	r0, #1
   32698:	4770      	bx	lr
   3269a:	2001      	movs	r0, #1
}
   3269c:	4770      	bx	lr

0003269e <start_tx_locked>:
{
   3269e:	b510      	push	{r4, lr}
   326a0:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   326a2:	6840      	ldr	r0, [r0, #4]
   326a4:	f7ff ffeb 	bl	3267e <is_tx_ready.isra.0>
   326a8:	690b      	ldr	r3, [r1, #16]
   326aa:	b918      	cbnz	r0, 326b4 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   326ac:	2201      	movs	r2, #1
   326ae:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   326b2:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   326b4:	2200      	movs	r2, #0
   326b6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   326ba:	f04f 32ff 	mov.w	r2, #4294967295
   326be:	690b      	ldr	r3, [r1, #16]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   326c0:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   326c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   326c6:	690b      	ldr	r3, [r1, #16]
}
   326c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   326cc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   326d0:	f7ff bf0d 	b.w	324ee <tx_start>

000326d4 <uarte_nrfx_fifo_fill>:
{
   326d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   326d6:	6906      	ldr	r6, [r0, #16]
{
   326d8:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   326da:	68f3      	ldr	r3, [r6, #12]
   326dc:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   326de:	3310      	adds	r3, #16
   326e0:	4294      	cmp	r4, r2
   326e2:	bfa8      	it	ge
   326e4:	4614      	movge	r4, r2
   326e6:	2201      	movs	r2, #1
   326e8:	e8d3 0fef 	ldaex	r0, [r3]
   326ec:	2800      	cmp	r0, #0
   326ee:	d103      	bne.n	326f8 <uarte_nrfx_fifo_fill+0x24>
   326f0:	e8c3 2fe7 	stlex	r7, r2, [r3]
   326f4:	2f00      	cmp	r7, #0
   326f6:	d1f7      	bne.n	326e8 <uarte_nrfx_fifo_fill+0x14>
   326f8:	bf0c      	ite	eq
   326fa:	4613      	moveq	r3, r2
   326fc:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   326fe:	d11f      	bne.n	32740 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   32700:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32702:	4622      	mov	r2, r4
   32704:	6898      	ldr	r0, [r3, #8]
   32706:	f002 fc71 	bl	34fec <memcpy>
	__asm__ volatile(
   3270a:	f04f 0320 	mov.w	r3, #32
   3270e:	f3ef 8711 	mrs	r7, BASEPRI
   32712:	f383 8812 	msr	BASEPRI_MAX, r3
   32716:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3271a:	6868      	ldr	r0, [r5, #4]
   3271c:	f7ff ffaf 	bl	3267e <is_tx_ready.isra.0>
   32720:	68f3      	ldr	r3, [r6, #12]
   32722:	b938      	cbnz	r0, 32734 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   32724:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   32726:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   32728:	f387 8811 	msr	BASEPRI, r7
   3272c:	f3bf 8f6f 	isb	sy
}
   32730:	4620      	mov	r0, r4
   32732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   32734:	4622      	mov	r2, r4
   32736:	4628      	mov	r0, r5
   32738:	6899      	ldr	r1, [r3, #8]
   3273a:	f7ff fed8 	bl	324ee <tx_start>
   3273e:	e7f3      	b.n	32728 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   32740:	461c      	mov	r4, r3
   32742:	e7f5      	b.n	32730 <uarte_nrfx_fifo_fill+0x5c>

00032744 <endtx_isr.isra.0>:
	return config->uarte_regs;
   32744:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
   32746:	f04f 0120 	mov.w	r1, #32
   3274a:	f3ef 8211 	mrs	r2, BASEPRI
   3274e:	f381 8812 	msr	BASEPRI_MAX, r1
   32752:	f3bf 8f6f 	isb	sy
   32756:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3275a:	b131      	cbz	r1, 3276a <endtx_isr.isra.0+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3275c:	2100      	movs	r1, #0
   3275e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   32762:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32766:	2101      	movs	r1, #1
   32768:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3276a:	f382 8811 	msr	BASEPRI, r2
   3276e:	f3bf 8f6f 	isb	sy
}
   32772:	4770      	bx	lr

00032774 <uarte_nrfx_isr_int>:
{
   32774:	b570      	push	{r4, r5, r6, lr}
   32776:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   32778:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   3277a:	6804      	ldr	r4, [r0, #0]
    return p_reg->INTENSET & mask;
   3277c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   32780:	05da      	lsls	r2, r3, #23
   32782:	d504      	bpl.n	3278e <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32784:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   32788:	b10b      	cbz	r3, 3278e <uarte_nrfx_isr_int+0x1a>
		endtx_isr(dev);
   3278a:	f7ff ffdb 	bl	32744 <endtx_isr.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3278e:	6843      	ldr	r3, [r0, #4]
   32790:	06db      	lsls	r3, r3, #27
   32792:	d51a      	bpl.n	327ca <uarte_nrfx_isr_int+0x56>
	__asm__ volatile(
   32794:	f04f 0320 	mov.w	r3, #32
   32798:	f3ef 8211 	mrs	r2, BASEPRI
   3279c:	f383 8812 	msr	BASEPRI_MAX, r3
   327a0:	f3bf 8f6f 	isb	sy
   327a4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   327a8:	b113      	cbz	r3, 327b0 <uarte_nrfx_isr_int+0x3c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   327aa:	2300      	movs	r3, #0
   327ac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   327b0:	692b      	ldr	r3, [r5, #16]
   327b2:	68db      	ldr	r3, [r3, #12]
   327b4:	b10b      	cbz	r3, 327ba <uarte_nrfx_isr_int+0x46>
   327b6:	691b      	ldr	r3, [r3, #16]
   327b8:	b91b      	cbnz	r3, 327c2 <uarte_nrfx_isr_int+0x4e>
    p_reg->INTENCLR = mask;
   327ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   327be:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	__asm__ volatile(
   327c2:	f382 8811 	msr	BASEPRI, r2
   327c6:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   327ca:	692b      	ldr	r3, [r5, #16]
	if (!data->int_driven) {
   327cc:	68d9      	ldr	r1, [r3, #12]
   327ce:	b169      	cbz	r1, 327ec <uarte_nrfx_isr_int+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   327d0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   327d4:	b15a      	cbz	r2, 327ee <uarte_nrfx_isr_int+0x7a>
		data->int_driven->fifo_fill_lock = 0;
   327d6:	2200      	movs	r2, #0
   327d8:	610a      	str	r2, [r1, #16]
		if (data->int_driven->disable_tx_irq) {
   327da:	68d9      	ldr	r1, [r3, #12]
   327dc:	7b89      	ldrb	r1, [r1, #14]
   327de:	b131      	cbz	r1, 327ee <uarte_nrfx_isr_int+0x7a>
    p_reg->INTENCLR = mask;
   327e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   327e4:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   327e8:	68db      	ldr	r3, [r3, #12]
   327ea:	739a      	strb	r2, [r3, #14]
}
   327ec:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   327ee:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   327f2:	b122      	cbz	r2, 327fe <uarte_nrfx_isr_int+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   327f4:	2200      	movs	r2, #0
   327f6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   327fa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (data->int_driven->cb) {
   327fe:	68da      	ldr	r2, [r3, #12]
   32800:	6813      	ldr	r3, [r2, #0]
   32802:	2b00      	cmp	r3, #0
   32804:	d0f2      	beq.n	327ec <uarte_nrfx_isr_int+0x78>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   32806:	4628      	mov	r0, r5
}
   32808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3280c:	6851      	ldr	r1, [r2, #4]
   3280e:	4718      	bx	r3

00032810 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   32810:	b510      	push	{r4, lr}
   32812:	4604      	mov	r4, r0
   32814:	2200      	movs	r2, #0
   32816:	2101      	movs	r1, #1
   32818:	200a      	movs	r0, #10
   3281a:	f7dd fdf3 	bl	10404 <z_arm_irq_priority_set>
   3281e:	200a      	movs	r0, #10
   32820:	f7dd fdc0 	bl	103a4 <arch_irq_enable>
   32824:	4620      	mov	r0, r4
   32826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3282a:	f7e7 bd5d 	b.w	1a2e8 <uarte_instance_init.constprop.0>

0003282e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   3282e:	b510      	push	{r4, lr}
   32830:	4604      	mov	r4, r0
   32832:	2200      	movs	r2, #0
   32834:	2101      	movs	r1, #1
   32836:	2008      	movs	r0, #8
   32838:	f7dd fde4 	bl	10404 <z_arm_irq_priority_set>
   3283c:	2008      	movs	r0, #8
   3283e:	f7dd fdb1 	bl	103a4 <arch_irq_enable>
   32842:	4620      	mov	r0, r4
   32844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32848:	f7e7 bd4e 	b.w	1a2e8 <uarte_instance_init.constprop.0>

0003284c <rx_timeout>:
{
   3284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   3284e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   32850:	6923      	ldr	r3, [r4, #16]
   32852:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   32856:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   3285a:	bb5b      	cbnz	r3, 328b4 <rx_timeout+0x68>
    p_reg->INTENCLR = mask;
   3285c:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   3285e:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
   32860:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   32862:	6803      	ldr	r3, [r0, #0]
   32864:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (HW_RX_COUNTING_ENABLED(data)) {
   32868:	6923      	ldr	r3, [r4, #16]
   3286a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   3286e:	b312      	cbz	r2, 328b6 <rx_timeout+0x6a>
		read = nrfx_timer_capture(&cfg->timer, 0);
   32870:	4639      	mov	r1, r7
   32872:	3010      	adds	r0, #16
   32874:	f7f3 fb26 	bl	25ec4 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   32878:	6923      	ldr	r3, [r4, #16]
   3287a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   3287c:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
   3287e:	bf1f      	itttt	ne
   32880:	66d8      	strne	r0, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   32882:	6923      	ldrne	r3, [r4, #16]
   32884:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   32886:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   32888:	6923      	ldr	r3, [r4, #16]
	if (!HW_RX_COUNTING_ENABLED(data) &&
   3288a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
		    - data->async->rx_total_user_byte_cnt;
   3288e:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   32892:	1a52      	subs	r2, r2, r1
	int32_t len = data->async->rx_total_byte_cnt
   32894:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   32896:	b988      	cbnz	r0, 328bc <rx_timeout+0x70>
   32898:	2a00      	cmp	r2, #0
   3289a:	da0f      	bge.n	328bc <rx_timeout+0x70>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   3289c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   328a0:	6923      	ldr	r3, [r4, #16]
   328a2:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   328a6:	4281      	cmp	r1, r0
   328a8:	d80e      	bhi.n	328c8 <rx_timeout+0x7c>
    p_reg->INTENSET = mask;
   328aa:	2210      	movs	r2, #16
	return config->uarte_regs;
   328ac:	6873      	ldr	r3, [r6, #4]
   328ae:	681b      	ldr	r3, [r3, #0]
   328b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   328b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		read = data->async->rx_cnt.cnt;
   328b6:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   328ba:	e7dd      	b.n	32878 <rx_timeout+0x2c>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   328bc:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   328c0:	eb02 0c01 	add.w	ip, r2, r1
   328c4:	4584      	cmp	ip, r0
   328c6:	d904      	bls.n	328d2 <rx_timeout+0x86>
		len = data->async->rx_buf_len - data->async->rx_offset;
   328c8:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   328ca:	2d00      	cmp	r5, #0
   328cc:	dded      	ble.n	328aa <rx_timeout+0x5e>
		clipped = true;
   328ce:	2701      	movs	r7, #1
   328d0:	e005      	b.n	328de <rx_timeout+0x92>
	if (len > 0) {
   328d2:	2a00      	cmp	r2, #0
   328d4:	dde9      	ble.n	328aa <rx_timeout+0x5e>
				< data->async->rx_timeout_slab)) {
   328d6:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   328da:	428a      	cmp	r2, r1
   328dc:	da12      	bge.n	32904 <rx_timeout+0xb8>
			notify_uart_rx_rdy(dev, len);
   328de:	4629      	mov	r1, r5
   328e0:	4630      	mov	r0, r6
   328e2:	f7ff fcc2 	bl	3226a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   328e6:	6922      	ldr	r2, [r4, #16]
   328e8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   328ea:	442b      	add	r3, r5
   328ec:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   328ee:	6922      	ldr	r2, [r4, #16]
   328f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   328f2:	442b      	add	r3, r5
   328f4:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   328f6:	2f00      	cmp	r7, #0
   328f8:	d0d7      	beq.n	328aa <rx_timeout+0x5e>
			k_timer_stop(&data->async->rx_timeout_timer);
   328fa:	6920      	ldr	r0, [r4, #16]
   328fc:	3080      	adds	r0, #128	; 0x80
   328fe:	f002 fa7a 	bl	34df6 <z_impl_k_timer_stop>
}
   32902:	e7d2      	b.n	328aa <rx_timeout+0x5e>
			data->async->rx_timeout_left -=
   32904:	1a52      	subs	r2, r2, r1
   32906:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   32908:	e7cf      	b.n	328aa <rx_timeout+0x5e>

0003290a <uarte_nrfx_tx_abort>:
{
   3290a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3290c:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3290e:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   32910:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   32912:	691a      	ldr	r2, [r3, #16]
   32914:	6891      	ldr	r1, [r2, #8]
   32916:	b151      	cbz	r1, 3292e <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   32918:	2400      	movs	r4, #0
   3291a:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   3291e:	6918      	ldr	r0, [r3, #16]
   32920:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   32922:	f002 fa68 	bl	34df6 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32926:	2301      	movs	r3, #1
	return 0;
   32928:	4620      	mov	r0, r4
   3292a:	60eb      	str	r3, [r5, #12]
}
   3292c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3292e:	f06f 000d 	mvn.w	r0, #13
   32932:	e7fb      	b.n	3292c <uarte_nrfx_tx_abort+0x22>

00032934 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   32934:	6b43      	ldr	r3, [r0, #52]	; 0x34
   32936:	6818      	ldr	r0, [r3, #0]
   32938:	f7ff bfe7 	b.w	3290a <uarte_nrfx_tx_abort>

0003293c <api_callback_set>:
	return dev->data;
   3293c:	6903      	ldr	r3, [r0, #16]
}
   3293e:	2000      	movs	r0, #0
	data->user_data = user_data;
   32940:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
}
   32944:	4770      	bx	lr

00032946 <user_callback>:
	return dev->data;
   32946:	6902      	ldr	r2, [r0, #16]
	if (data->user_callback) {
   32948:	6e53      	ldr	r3, [r2, #100]	; 0x64
   3294a:	b10b      	cbz	r3, 32950 <user_callback+0xa>
		data->user_callback(dev, evt, data->user_data);
   3294c:	6e92      	ldr	r2, [r2, #104]	; 0x68
   3294e:	4718      	bx	r3
}
   32950:	4770      	bx	lr

00032952 <api_irq_tx_enable>:
	data->int_driven.tx_enabled = true;
   32952:	2201      	movs	r2, #1
	return dev->data;
   32954:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = true;
   32956:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	if (data->tx_buf == NULL) {
   3295a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   3295c:	b912      	cbnz	r2, 32964 <api_irq_tx_enable+0x12>
		data->int_driven.callback(dev, data->int_driven.user_data);
   3295e:	e9d3 2120 	ldrd	r2, r1, [r3, #128]	; 0x80
   32962:	4710      	bx	r2
}
   32964:	4770      	bx	lr

00032966 <api_irq_tx_disable>:
	data->int_driven.tx_enabled = false;
   32966:	2200      	movs	r2, #0
	return dev->data;
   32968:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = false;
   3296a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
   3296e:	4770      	bx	lr

00032970 <api_irq_tx_ready>:
	return dev->data;
   32970:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.tx_enabled && (data->tx_buf == NULL);
   32972:	f893 0194 	ldrb.w	r0, [r3, #404]	; 0x194
   32976:	b118      	cbz	r0, 32980 <api_irq_tx_ready+0x10>
   32978:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3297a:	fab0 f080 	clz	r0, r0
   3297e:	0940      	lsrs	r0, r0, #5
}
   32980:	4770      	bx	lr

00032982 <api_irq_callback_set>:
	return dev->data;
   32982:	6903      	ldr	r3, [r0, #16]
	data->int_driven.user_data = user_data;
   32984:	e9c3 1220 	strd	r1, r2, [r3, #128]	; 0x80
}
   32988:	4770      	bx	lr

0003298a <api_irq_rx_disable>:
	data->int_driven.rx_enabled = false;
   3298a:	2200      	movs	r2, #0
	return dev->data;
   3298c:	6903      	ldr	r3, [r0, #16]
	data->int_driven.rx_enabled = false;
   3298e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
}
   32992:	4770      	bx	lr

00032994 <api_irq_rx_ready>:
	return dev->data;
   32994:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.rx_enabled &&
   32996:	f893 0195 	ldrb.w	r0, [r3, #405]	; 0x195
   3299a:	b120      	cbz	r0, 329a6 <api_irq_rx_ready+0x12>
   3299c:	e9d3 3063 	ldrd	r3, r0, [r3, #396]	; 0x18c
   329a0:	1ac0      	subs	r0, r0, r3
   329a2:	bf18      	it	ne
   329a4:	2001      	movne	r0, #1
}
   329a6:	4770      	bx	lr

000329a8 <api_irq_tx_complete>:
	return api_irq_tx_ready(dev);
   329a8:	f7ff bfe2 	b.w	32970 <api_irq_tx_ready>

000329ac <api_irq_err_enable>:
	data->int_driven.err_enabled = true;
   329ac:	2201      	movs	r2, #1
	return dev->data;
   329ae:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = true;
   329b0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   329b4:	4770      	bx	lr

000329b6 <api_irq_err_disable>:
	data->int_driven.err_enabled = false;
   329b6:	2200      	movs	r2, #0
	return dev->data;
   329b8:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = false;
   329ba:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   329be:	4770      	bx	lr

000329c0 <api_irq_is_pending>:
{
   329c0:	b508      	push	{r3, lr}
   329c2:	4602      	mov	r2, r0
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   329c4:	f7ff ffe6 	bl	32994 <api_irq_rx_ready>
   329c8:	b930      	cbnz	r0, 329d8 <api_irq_is_pending+0x18>
   329ca:	4610      	mov	r0, r2
   329cc:	f7ff ffd0 	bl	32970 <api_irq_tx_ready>
   329d0:	3800      	subs	r0, #0
   329d2:	bf18      	it	ne
   329d4:	2001      	movne	r0, #1
}
   329d6:	bd08      	pop	{r3, pc}
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   329d8:	2001      	movs	r0, #1
   329da:	e7fc      	b.n	329d6 <api_irq_is_pending+0x16>

000329dc <api_irq_update>:
}
   329dc:	2001      	movs	r0, #1
   329de:	4770      	bx	lr

000329e0 <api_configure>:

static int api_configure(const struct device *dev, const struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   329e0:	79ca      	ldrb	r2, [r1, #7]
	return dev->data;
   329e2:	6903      	ldr	r3, [r0, #16]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   329e4:	b922      	cbnz	r2, 329f0 <api_configure+0x10>
		return -ENOTSUP;
	}

	return uart_configure(data->uart, cfg);
   329e6:	6818      	ldr	r0, [r3, #0]
	if (api->configure == NULL) {
   329e8:	6883      	ldr	r3, [r0, #8]
   329ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   329ec:	b11b      	cbz	r3, 329f6 <api_configure+0x16>
	return api->configure(dev, cfg);
   329ee:	4718      	bx	r3
		return -ENOTSUP;
   329f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   329f4:	4770      	bx	lr
		return -ENOSYS;
   329f6:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   329fa:	4770      	bx	lr

000329fc <api_config_get>:

static int api_config_get(const struct device *dev, struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	return uart_config_get(data->uart, cfg);
   329fc:	6903      	ldr	r3, [r0, #16]
   329fe:	6818      	ldr	r0, [r3, #0]
	if (api->config_get == NULL) {
   32a00:	6883      	ldr	r3, [r0, #8]
   32a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   32a04:	b103      	cbz	r3, 32a08 <api_config_get+0xc>
	return api->config_get(dev, cfg);
   32a06:	4718      	bx	r3
}
   32a08:	f06f 0057 	mvn.w	r0, #87	; 0x57
   32a0c:	4770      	bx	lr

00032a0e <req_pin_idle>:
{
   32a0e:	b513      	push	{r0, r1, r4, lr}
	nrf_gpio_cfg(data->req_pin,
   32a10:	6844      	ldr	r4, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32a12:	a801      	add	r0, sp, #4
   32a14:	9401      	str	r4, [sp, #4]
   32a16:	f7e7 ff57 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   32a1a:	2303      	movs	r3, #3
   32a1c:	3480      	adds	r4, #128	; 0x80
   32a1e:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   32a22:	b002      	add	sp, #8
   32a24:	bd10      	pop	{r4, pc}

00032a26 <api_fifo_read>:
{
   32a26:	b538      	push	{r3, r4, r5, lr}
   32a28:	4603      	mov	r3, r0
	return dev->data;
   32a2a:	691d      	ldr	r5, [r3, #16]
{
   32a2c:	4608      	mov	r0, r1
	return data->int_driven.rxlen - data->int_driven.rxrd;
   32a2e:	e9d5 4363 	ldrd	r4, r3, [r5, #396]	; 0x18c
	if (available) {
   32a32:	1ae4      	subs	r4, r4, r3
   32a34:	d00d      	beq.n	32a52 <api_fifo_read+0x2c>
		cpylen = MIN(available, size);
   32a36:	4294      	cmp	r4, r2
   32a38:	bf28      	it	cs
   32a3a:	4614      	movcs	r4, r2
		memcpy(rx_data,
   32a3c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   32a40:	18e9      	adds	r1, r5, r3
   32a42:	4622      	mov	r2, r4
   32a44:	f002 fad2 	bl	34fec <memcpy>
		data->int_driven.rxrd += cpylen;
   32a48:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   32a4c:	4423      	add	r3, r4
   32a4e:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
}
   32a52:	4620      	mov	r0, r4
   32a54:	bd38      	pop	{r3, r4, r5, pc}

00032a56 <api_poll_in>:
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   32a56:	2201      	movs	r2, #1
{
   32a58:	b508      	push	{r3, lr}
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   32a5a:	f7ff ffe4 	bl	32a26 <api_fifo_read>
   32a5e:	fab0 f080 	clz	r0, r0
   32a62:	0940      	lsrs	r0, r0, #5
}
   32a64:	4240      	negs	r0, r0
   32a66:	bd08      	pop	{r3, pc}

00032a68 <api_irq_rx_enable>:
{
   32a68:	b538      	push	{r3, r4, r5, lr}
	data->int_driven.rx_enabled = true;
   32a6a:	2301      	movs	r3, #1
	return dev->data;
   32a6c:	6904      	ldr	r4, [r0, #16]
{
   32a6e:	4605      	mov	r5, r0
	data->int_driven.rx_enabled = true;
   32a70:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if (int_driven_rd_available(data)) {
   32a74:	e9d4 3263 	ldrd	r3, r2, [r4, #396]	; 0x18c
   32a78:	429a      	cmp	r2, r3
   32a7a:	d109      	bne.n	32a90 <api_irq_rx_enable+0x28>
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   32a7c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   32a80:	2b05      	cmp	r3, #5
   32a82:	d10c      	bne.n	32a9e <api_irq_rx_enable+0x36>
		int_driven_rx_feed(dev, data);
   32a84:	4621      	mov	r1, r4
   32a86:	4628      	mov	r0, r5
}
   32a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		int_driven_rx_feed(dev, data);
   32a8c:	f7e7 bfca 	b.w	1aa24 <int_driven_rx_feed>
		data->int_driven.callback(dev, data->int_driven.user_data);
   32a90:	e9d4 3120 	ldrd	r3, r1, [r4, #128]	; 0x80
   32a94:	4798      	blx	r3
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   32a96:	e9d4 2363 	ldrd	r2, r3, [r4, #396]	; 0x18c
   32a9a:	429a      	cmp	r2, r3
   32a9c:	d0ee      	beq.n	32a7c <api_irq_rx_enable+0x14>
}
   32a9e:	bd38      	pop	{r3, r4, r5, pc}

00032aa0 <z_log_msg_static_create.constprop.0>:
   32aa0:	2300      	movs	r3, #0
   32aa2:	f7db bebb 	b.w	e81c <z_impl_z_log_msg_static_create>

00032aa6 <req_pin_set>:
{
   32aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrf_gpio_reconfigure(data->req_pin, &dir, &input, NULL, NULL, NULL);
   32aa8:	6845      	ldr	r5, [r0, #4]
{
   32aaa:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32aac:	a801      	add	r0, sp, #4
   32aae:	9501      	str	r5, [sp, #4]
   32ab0:	f7e7 ff0a 	bl	1a8c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   32ab4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   32ab8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   32abc:	f023 0303 	bic.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   32ac0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_disable(data->req_pin);
   32ac4:	6860      	ldr	r0, [r4, #4]
}
   32ac6:	b003      	add	sp, #12
   32ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	nrfx_gpiote_trigger_disable(data->req_pin);
   32acc:	f7f2 be8c 	b.w	257e8 <nrfx_gpiote_trigger_disable>

00032ad0 <tx_complete>:
{
   32ad0:	b510      	push	{r4, lr}
	if (data->tx_active) {
   32ad2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
   32ad6:	4604      	mov	r4, r0
	if (data->tx_active) {
   32ad8:	b163      	cbz	r3, 32af4 <tx_complete+0x24>
	while (!nrfx_gpiote_in_is_set(data->req_pin)) {
   32ada:	6860      	ldr	r0, [r4, #4]
   32adc:	f7f2 fed0 	bl	25880 <nrfx_gpiote_in_is_set>
   32ae0:	2800      	cmp	r0, #0
   32ae2:	d0fa      	beq.n	32ada <tx_complete+0xa>
	req_pin_idle(data);
   32ae4:	4620      	mov	r0, r4
   32ae6:	f7ff ff92 	bl	32a0e <req_pin_idle>
	data->tx_buf = NULL;
   32aea:	2300      	movs	r3, #0
   32aec:	64e3      	str	r3, [r4, #76]	; 0x4c
	data->tx_active = false;
   32aee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   32af2:	bd10      	pop	{r4, pc}
		req_pin_set(data);
   32af4:	f7ff ffd7 	bl	32aa6 <req_pin_set>
   32af8:	e7f4      	b.n	32ae4 <tx_complete+0x14>

00032afa <api_rx_disable>:
{
   32afa:	b530      	push	{r4, r5, lr}
	return dev->data;
   32afc:	6904      	ldr	r4, [r0, #16]
{
   32afe:	4605      	mov	r5, r0
	if (data->rx_state == RX_OFF) {
   32b00:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
{
   32b04:	b087      	sub	sp, #28
	if (data->rx_state == RX_OFF) {
   32b06:	b1e3      	cbz	r3, 32b42 <api_rx_disable+0x48>
	data->rx_state = RX_TO_OFF;
   32b08:	2306      	movs	r3, #6
	err = uart_rx_disable(data->uart);
   32b0a:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_OFF;
   32b0c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	return api->rx_disable(dev);
   32b10:	6883      	ldr	r3, [r0, #8]
   32b12:	695b      	ldr	r3, [r3, #20]
   32b14:	4798      	blx	r3
	if (err == -EFAULT) {
   32b16:	300e      	adds	r0, #14
   32b18:	d002      	beq.n	32b20 <api_rx_disable+0x26>
	return 0;
   32b1a:	2000      	movs	r0, #0
}
   32b1c:	b007      	add	sp, #28
   32b1e:	bd30      	pop	{r4, r5, pc}
		struct uart_event event = {
   32b20:	2214      	movs	r2, #20
   32b22:	2100      	movs	r1, #0
   32b24:	a801      	add	r0, sp, #4
   32b26:	f002 fa81 	bl	3502c <memset>
   32b2a:	2305      	movs	r3, #5
   32b2c:	f88d 3004 	strb.w	r3, [sp, #4]
		data->rx_state = RX_OFF;
   32b30:	2300      	movs	r3, #0
		user_callback(dev, &event);
   32b32:	4628      	mov	r0, r5
		data->rx_state = RX_OFF;
   32b34:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		data->rx_buf = NULL;
   32b38:	65a3      	str	r3, [r4, #88]	; 0x58
		user_callback(dev, &event);
   32b3a:	a901      	add	r1, sp, #4
   32b3c:	f7ff ff03 	bl	32946 <user_callback>
   32b40:	e7eb      	b.n	32b1a <api_rx_disable+0x20>
		return -EFAULT;
   32b42:	f06f 000d 	mvn.w	r0, #13
   32b46:	e7e9      	b.n	32b1c <api_rx_disable+0x22>

00032b48 <api_tx_abort>:
{
   32b48:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   32b4a:	6905      	ldr	r5, [r0, #16]
{
   32b4c:	4604      	mov	r4, r0
	const uint8_t *buf = data->tx_buf;
   32b4e:	6cee      	ldr	r6, [r5, #76]	; 0x4c
{
   32b50:	b087      	sub	sp, #28
	if (data->tx_buf == NULL) {
   32b52:	b336      	cbz	r6, 32ba2 <api_tx_abort+0x5a>
   32b54:	f105 0010 	add.w	r0, r5, #16
   32b58:	f002 f94d 	bl	34df6 <z_impl_k_timer_stop>
	__asm__ volatile(
   32b5c:	f04f 0320 	mov.w	r3, #32
   32b60:	f3ef 8711 	mrs	r7, BASEPRI
   32b64:	f383 8812 	msr	BASEPRI_MAX, r3
   32b68:	f3bf 8f6f 	isb	sy
	tx_complete(data);
   32b6c:	4628      	mov	r0, r5
   32b6e:	f7ff ffaf 	bl	32ad0 <tx_complete>
	__asm__ volatile(
   32b72:	f387 8811 	msr	BASEPRI, r7
   32b76:	f3bf 8f6f 	isb	sy
	err = uart_tx_abort(data->uart);
   32b7a:	6828      	ldr	r0, [r5, #0]
	return api->tx_abort(dev);
   32b7c:	6883      	ldr	r3, [r0, #8]
   32b7e:	689b      	ldr	r3, [r3, #8]
   32b80:	4798      	blx	r3
	if (err != -EFAULT) {
   32b82:	f110 0f0e 	cmn.w	r0, #14
   32b86:	d10e      	bne.n	32ba6 <api_tx_abort+0x5e>
	struct uart_event event = {
   32b88:	2100      	movs	r1, #0
   32b8a:	2214      	movs	r2, #20
   32b8c:	a801      	add	r0, sp, #4
   32b8e:	f002 fa4d 	bl	3502c <memset>
   32b92:	2301      	movs	r3, #1
	user_callback(dev, &event);
   32b94:	4620      	mov	r0, r4
   32b96:	a901      	add	r1, sp, #4
	struct uart_event event = {
   32b98:	f88d 3004 	strb.w	r3, [sp, #4]
   32b9c:	9602      	str	r6, [sp, #8]
	user_callback(dev, &event);
   32b9e:	f7ff fed2 	bl	32946 <user_callback>
		return -EFAULT;
   32ba2:	f06f 000d 	mvn.w	r0, #13
}
   32ba6:	b007      	add	sp, #28
   32ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032baa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   32baa:	4770      	bx	lr

00032bac <sys_clock_cycle_get_32>:
{
   32bac:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   32bae:	f7e8 fbf9 	bl	1b3a4 <z_nrf_rtc_timer_read>
}
   32bb2:	bd08      	pop	{r3, pc}

00032bb4 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   32bb4:	f002 b8ed 	b.w	34d92 <z_impl_k_busy_wait>

00032bb8 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   32bb8:	f001 bfe6 	b.w	34b88 <k_is_in_isr>

00032bbc <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   32bbc:	2000      	movs	r0, #0
   32bbe:	4770      	bx	lr

00032bc0 <nrf91_socket_offload_setsockopt>:
{
   32bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32bc4:	460e      	mov	r6, r1
   32bc6:	4615      	mov	r5, r2
   32bc8:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   32bca:	2300      	movs	r3, #0
{
   32bcc:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   32bce:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   32bd2:	4629      	mov	r1, r5
   32bd4:	4630      	mov	r0, r6
   32bd6:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   32bd8:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   32bdc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   32bde:	f7e8 ffcf 	bl	1bb80 <z_to_nrf_optname>
   32be2:	2800      	cmp	r0, #0
   32be4:	da08      	bge.n	32bf8 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   32be6:	f7fc ffc4 	bl	2fb72 <__errno>
   32bea:	236d      	movs	r3, #109	; 0x6d
   32bec:	6003      	str	r3, [r0, #0]
		return -1;
   32bee:	f04f 30ff 	mov.w	r0, #4294967295
}
   32bf2:	b006      	add	sp, #24
   32bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   32bf8:	2e01      	cmp	r6, #1
   32bfa:	d111      	bne.n	32c20 <nrf91_socket_offload_setsockopt+0x60>
   32bfc:	3d14      	subs	r5, #20
   32bfe:	2d01      	cmp	r5, #1
   32c00:	d806      	bhi.n	32c10 <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   32c02:	b12c      	cbz	r4, 32c10 <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   32c04:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   32c06:	6823      	ldr	r3, [r4, #0]
   32c08:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   32c0a:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   32c0c:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   32c0e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   32c10:	4623      	mov	r3, r4
   32c12:	4631      	mov	r1, r6
   32c14:	4640      	mov	r0, r8
   32c16:	9a03      	ldr	r2, [sp, #12]
   32c18:	9700      	str	r7, [sp, #0]
   32c1a:	f7f4 fb7d 	bl	27318 <nrf_setsockopt>
	return retval;
   32c1e:	e7e8      	b.n	32bf2 <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   32c20:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   32c24:	d1f4      	bne.n	32c10 <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   32c26:	2d0c      	cmp	r5, #12
   32c28:	bf08      	it	eq
   32c2a:	2704      	moveq	r7, #4
   32c2c:	e7f0      	b.n	32c10 <nrf91_socket_offload_setsockopt+0x50>

00032c2e <nrf91_socket_offload_getsockopt>:
{
   32c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32c32:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   32c34:	2300      	movs	r3, #0
{
   32c36:	b086      	sub	sp, #24
   32c38:	460f      	mov	r7, r1
   32c3a:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   32c3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   32c40:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   32c42:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   32c44:	4629      	mov	r1, r5
   32c46:	4638      	mov	r0, r7
   32c48:	eb0d 0203 	add.w	r2, sp, r3
{
   32c4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   32c50:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   32c52:	f7e8 ff95 	bl	1bb80 <z_to_nrf_optname>
   32c56:	2800      	cmp	r0, #0
   32c58:	da09      	bge.n	32c6e <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   32c5a:	f7fc ff8a 	bl	2fb72 <__errno>
   32c5e:	236d      	movs	r3, #109	; 0x6d
		return -1;
   32c60:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   32c64:	6003      	str	r3, [r0, #0]
}
   32c66:	4630      	mov	r0, r6
   32c68:	b006      	add	sp, #24
   32c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   32c6e:	2f01      	cmp	r7, #1
   32c70:	d11c      	bne.n	32cac <nrf91_socket_offload_getsockopt+0x7e>
   32c72:	f1a5 0314 	sub.w	r3, r5, #20
   32c76:	2b01      	cmp	r3, #1
   32c78:	d818      	bhi.n	32cac <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   32c7a:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   32c7c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   32c7e:	4630      	mov	r0, r6
   32c80:	9200      	str	r2, [sp, #0]
   32c82:	4639      	mov	r1, r7
   32c84:	9a02      	ldr	r2, [sp, #8]
   32c86:	f7f4 fc85 	bl	27594 <nrf_getsockopt>
	if (retval == 0) {
   32c8a:	4606      	mov	r6, r0
   32c8c:	2800      	cmp	r0, #0
   32c8e:	d1ea      	bne.n	32c66 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   32c90:	2f01      	cmp	r7, #1
   32c92:	d1e8      	bne.n	32c66 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   32c94:	2d04      	cmp	r5, #4
   32c96:	d10c      	bne.n	32cb2 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   32c98:	6820      	ldr	r0, [r4, #0]
   32c9a:	2800      	cmp	r0, #0
   32c9c:	d0e3      	beq.n	32c66 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   32c9e:	f7e8 fe5d 	bl	1b95c <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   32ca2:	f7fc ff66 	bl	2fb72 <__errno>
   32ca6:	6803      	ldr	r3, [r0, #0]
   32ca8:	6023      	str	r3, [r4, #0]
   32caa:	e7dc      	b.n	32c66 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   32cac:	4642      	mov	r2, r8
   32cae:	4623      	mov	r3, r4
   32cb0:	e7e5      	b.n	32c7e <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   32cb2:	3d14      	subs	r5, #20
   32cb4:	2d01      	cmp	r5, #1
   32cb6:	d8d6      	bhi.n	32c66 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   32cb8:	9b04      	ldr	r3, [sp, #16]
   32cba:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   32cbe:	9b05      	ldr	r3, [sp, #20]
   32cc0:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   32cc2:	2310      	movs	r3, #16
   32cc4:	f8c8 3000 	str.w	r3, [r8]
   32cc8:	e7cd      	b.n	32c66 <nrf91_socket_offload_getsockopt+0x38>

00032cca <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   32cca:	6800      	ldr	r0, [r0, #0]
   32ccc:	f001 baaa 	b.w	34224 <nrf_listen>

00032cd0 <nrf91_socket_offload_freeaddrinfo>:
{
   32cd0:	b538      	push	{r3, r4, r5, lr}
   32cd2:	4604      	mov	r4, r0
	while (next != NULL) {
   32cd4:	b904      	cbnz	r4, 32cd8 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   32cd6:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   32cd8:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   32cda:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   32cdc:	f002 f94b 	bl	34f76 <k_free>
		k_free(this);
   32ce0:	4620      	mov	r0, r4
   32ce2:	f002 f948 	bl	34f76 <k_free>
		next = next->ai_next;
   32ce6:	462c      	mov	r4, r5
   32ce8:	e7f4      	b.n	32cd4 <nrf91_socket_offload_freeaddrinfo+0x4>

00032cea <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   32cea:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   32cec:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   32cee:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   32cf0:	4603      	mov	r3, r0
{
   32cf2:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   32cf4:	f823 2b04 	strh.w	r2, [r3], #4
   32cf8:	f101 0420 	add.w	r4, r1, #32
   32cfc:	f101 0210 	add.w	r2, r1, #16
   32d00:	f852 5b04 	ldr.w	r5, [r2], #4
   32d04:	42a2      	cmp	r2, r4
   32d06:	f843 5b04 	str.w	r5, [r3], #4
   32d0a:	d1f9      	bne.n	32d00 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   32d0c:	6a0b      	ldr	r3, [r1, #32]
   32d0e:	7503      	strb	r3, [r0, #20]
}
   32d10:	bd30      	pop	{r4, r5, pc}

00032d12 <z_to_nrf_ipv6>:
{
   32d12:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32d14:	2124      	movs	r1, #36	; 0x24
{
   32d16:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   32d18:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   32d1a:	8841      	ldrh	r1, [r0, #2]
{
   32d1c:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   32d1e:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   32d20:	2102      	movs	r1, #2
   32d22:	1d04      	adds	r4, r0, #4
   32d24:	6059      	str	r1, [r3, #4]
   32d26:	f103 0610 	add.w	r6, r3, #16
   32d2a:	f100 0714 	add.w	r7, r0, #20
   32d2e:	4635      	mov	r5, r6
   32d30:	6820      	ldr	r0, [r4, #0]
   32d32:	6861      	ldr	r1, [r4, #4]
   32d34:	3408      	adds	r4, #8
   32d36:	c503      	stmia	r5!, {r0, r1}
   32d38:	42bc      	cmp	r4, r7
   32d3a:	462e      	mov	r6, r5
   32d3c:	d1f7      	bne.n	32d2e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   32d3e:	7d12      	ldrb	r2, [r2, #20]
   32d40:	621a      	str	r2, [r3, #32]
}
   32d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032d44 <nrf91_socket_offload_sendto>:
{
   32d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32d48:	4604      	mov	r4, r0
   32d4a:	b08c      	sub	sp, #48	; 0x30
   32d4c:	9812      	ldr	r0, [sp, #72]	; 0x48
   32d4e:	460d      	mov	r5, r1
   32d50:	4616      	mov	r6, r2
   32d52:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   32d54:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   32d56:	b930      	cbnz	r0, 32d66 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   32d58:	9013      	str	r0, [sp, #76]	; 0x4c
   32d5a:	4620      	mov	r0, r4
}
   32d5c:	b00c      	add	sp, #48	; 0x30
   32d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   32d62:	f7f4 b9cd 	b.w	27100 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   32d66:	f8b0 c000 	ldrh.w	ip, [r0]
   32d6a:	f1bc 0f01 	cmp.w	ip, #1
   32d6e:	d112      	bne.n	32d96 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32d70:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   32d72:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32d74:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32d76:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32d7a:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   32d7c:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   32d7e:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   32d82:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   32d86:	9501      	str	r5, [sp, #4]
   32d88:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   32d8a:	4620      	mov	r0, r4
   32d8c:	f7f4 f9b8 	bl	27100 <nrf_sendto>
}
   32d90:	b00c      	add	sp, #48	; 0x30
   32d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   32d96:	f1bc 0f02 	cmp.w	ip, #2
   32d9a:	d10b      	bne.n	32db4 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   32d9c:	f10d 080c 	add.w	r8, sp, #12
   32da0:	4641      	mov	r1, r8
   32da2:	f7ff ffb6 	bl	32d12 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   32da6:	2324      	movs	r3, #36	; 0x24
   32da8:	4632      	mov	r2, r6
   32daa:	e9cd 8300 	strd	r8, r3, [sp]
   32dae:	4629      	mov	r1, r5
   32db0:	463b      	mov	r3, r7
   32db2:	e7ea      	b.n	32d8a <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   32db4:	f7fc fedd 	bl	2fb72 <__errno>
   32db8:	236a      	movs	r3, #106	; 0x6a
   32dba:	6003      	str	r3, [r0, #0]
		retval = -1;
   32dbc:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   32dc0:	e7e6      	b.n	32d90 <nrf91_socket_offload_sendto+0x4c>

00032dc2 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   32dc2:	2300      	movs	r3, #0
{
   32dc4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   32dc6:	e9cd 3300 	strd	r3, r3, [sp]
   32dca:	f7ff ffbb 	bl	32d44 <nrf91_socket_offload_sendto>
}
   32dce:	b003      	add	sp, #12
   32dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00032dd4 <nrf91_socket_offload_connect>:
{
   32dd4:	4603      	mov	r3, r0
   32dd6:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   32dd8:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   32dda:	880b      	ldrh	r3, [r1, #0]
{
   32ddc:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   32dde:	2b01      	cmp	r3, #1
{
   32de0:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   32de2:	d10e      	bne.n	32e02 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32de4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32de6:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   32de8:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32dea:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32dec:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   32df0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32df4:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   32df6:	4620      	mov	r0, r4
   32df8:	a901      	add	r1, sp, #4
   32dfa:	f001 f930 	bl	3405e <nrf_connect>
}
   32dfe:	b00a      	add	sp, #40	; 0x28
   32e00:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   32e02:	2b02      	cmp	r3, #2
   32e04:	d104      	bne.n	32e10 <__kernel_ram_size>
		z_to_nrf_ipv6(addr, &ipv6);
   32e06:	a901      	add	r1, sp, #4
   32e08:	f7ff ff83 	bl	32d12 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   32e0c:	2224      	movs	r2, #36	; 0x24
   32e0e:	e7f2      	b.n	32df6 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   32e10:	4620      	mov	r0, r4
}
   32e12:	b00a      	add	sp, #40	; 0x28
   32e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   32e18:	f001 b921 	b.w	3405e <nrf_connect>

00032e1c <nrf91_socket_offload_bind>:
{
   32e1c:	4603      	mov	r3, r0
   32e1e:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   32e20:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   32e22:	880b      	ldrh	r3, [r1, #0]
{
   32e24:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   32e26:	2b01      	cmp	r3, #1
{
   32e28:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   32e2a:	d10e      	bne.n	32e4a <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32e2c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   32e2e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   32e30:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32e32:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   32e34:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   32e38:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   32e3c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   32e3e:	4620      	mov	r0, r4
   32e40:	a901      	add	r1, sp, #4
   32e42:	f001 f9a6 	bl	34192 <nrf_bind>
}
   32e46:	b00a      	add	sp, #40	; 0x28
   32e48:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   32e4a:	2b02      	cmp	r3, #2
   32e4c:	d104      	bne.n	32e58 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   32e4e:	a901      	add	r1, sp, #4
   32e50:	f7ff ff5f 	bl	32d12 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   32e54:	2224      	movs	r2, #36	; 0x24
   32e56:	e7f2      	b.n	32e3e <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   32e58:	f7fc fe8b 	bl	2fb72 <__errno>
   32e5c:	236a      	movs	r3, #106	; 0x6a
   32e5e:	6003      	str	r3, [r0, #0]
		retval = -1;
   32e60:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   32e64:	e7ef      	b.n	32e46 <nrf91_socket_offload_bind+0x2a>

00032e66 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   32e66:	f7f5 bd0d 	b.w	28884 <z_impl_k_mutex_lock>

00032e6a <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   32e6a:	f7f5 bddb 	b.w	28a24 <z_impl_k_mutex_unlock>

00032e6e <nrf91_socket_offload_recvfrom>:
{
   32e6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32e72:	4605      	mov	r5, r0
	if (ctx->lock) {
   32e74:	6840      	ldr	r0, [r0, #4]
{
   32e76:	b08d      	sub	sp, #52	; 0x34
   32e78:	460c      	mov	r4, r1
   32e7a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   32e7e:	4691      	mov	r9, r2
   32e80:	469a      	mov	sl, r3
	if (ctx->lock) {
   32e82:	b108      	cbz	r0, 32e88 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   32e84:	f7ff fff1 	bl	32e6a <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   32e88:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   32e8c:	b106      	cbz	r6, 32e90 <nrf91_socket_offload_recvfrom+0x22>
   32e8e:	b9af      	cbnz	r7, 32ebc <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   32e90:	2300      	movs	r3, #0
   32e92:	4621      	mov	r1, r4
   32e94:	e9cd 3300 	strd	r3, r3, [sp]
   32e98:	464a      	mov	r2, r9
   32e9a:	4653      	mov	r3, sl
   32e9c:	4658      	mov	r0, fp
   32e9e:	f001 fa86 	bl	343ae <nrf_recvfrom>
   32ea2:	4604      	mov	r4, r0
	if (ctx->lock) {
   32ea4:	6868      	ldr	r0, [r5, #4]
   32ea6:	b128      	cbz	r0, 32eb4 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   32ea8:	f04f 32ff 	mov.w	r2, #4294967295
   32eac:	f04f 33ff 	mov.w	r3, #4294967295
   32eb0:	f7ff ffd9 	bl	32e66 <k_mutex_lock.constprop.0.isra.0>
}
   32eb4:	4620      	mov	r0, r4
   32eb6:	b00d      	add	sp, #52	; 0x34
   32eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   32ebc:	f10d 080c 	add.w	r8, sp, #12
   32ec0:	2224      	movs	r2, #36	; 0x24
   32ec2:	2100      	movs	r1, #0
   32ec4:	4640      	mov	r0, r8
   32ec6:	f002 f8b1 	bl	3502c <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   32eca:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   32ecc:	ab02      	add	r3, sp, #8
   32ece:	4621      	mov	r1, r4
   32ed0:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   32ed4:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   32ed6:	4653      	mov	r3, sl
   32ed8:	464a      	mov	r2, r9
   32eda:	4658      	mov	r0, fp
   32edc:	f001 fa67 	bl	343ae <nrf_recvfrom>
		if (retval < 0) {
   32ee0:	1e04      	subs	r4, r0, #0
   32ee2:	dbdf      	blt.n	32ea4 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   32ee4:	9b04      	ldr	r3, [sp, #16]
   32ee6:	2b01      	cmp	r3, #1
   32ee8:	d10b      	bne.n	32f02 <nrf91_socket_offload_recvfrom+0x94>
   32eea:	9a02      	ldr	r2, [sp, #8]
   32eec:	2a10      	cmp	r2, #16
   32eee:	d1d9      	bne.n	32ea4 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   32ef0:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32ef2:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   32ef4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   32ef8:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   32efa:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   32efc:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   32efe:	603b      	str	r3, [r7, #0]
   32f00:	e7d0      	b.n	32ea4 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   32f02:	2b02      	cmp	r3, #2
   32f04:	d1ce      	bne.n	32ea4 <nrf91_socket_offload_recvfrom+0x36>
   32f06:	9b02      	ldr	r3, [sp, #8]
   32f08:	2b24      	cmp	r3, #36	; 0x24
   32f0a:	d1cb      	bne.n	32ea4 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   32f0c:	4641      	mov	r1, r8
   32f0e:	4630      	mov	r0, r6
   32f10:	f7ff feeb 	bl	32cea <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   32f14:	2318      	movs	r3, #24
   32f16:	e7f2      	b.n	32efe <nrf91_socket_offload_recvfrom+0x90>

00032f18 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   32f18:	2300      	movs	r3, #0
{
   32f1a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   32f1c:	e9cd 3300 	strd	r3, r3, [sp]
   32f20:	f7ff ffa5 	bl	32e6e <nrf91_socket_offload_recvfrom>
}
   32f24:	b003      	add	sp, #12
   32f26:	f85d fb04 	ldr.w	pc, [sp], #4

00032f2a <nrf91_socket_offload_close>:
{
   32f2a:	b538      	push	{r3, r4, r5, lr}
   32f2c:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   32f2e:	6800      	ldr	r0, [r0, #0]
   32f30:	f7f4 f8b2 	bl	27098 <nrf_close>
	if (retval == 0) {
   32f34:	4604      	mov	r4, r0
   32f36:	b910      	cbnz	r0, 32f3e <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   32f38:	4628      	mov	r0, r5
   32f3a:	f7e9 f817 	bl	1bf6c <release_ctx>
}
   32f3e:	4620      	mov	r0, r4
   32f40:	bd38      	pop	{r3, r4, r5, pc}

00032f42 <z_log_msg_static_create.constprop.0>:
   32f42:	2300      	movs	r3, #0
   32f44:	f7db bc6a 	b.w	e81c <z_impl_z_log_msg_static_create>

00032f48 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   32f48:	ea40 0301 	orr.w	r3, r0, r1
   32f4c:	2b0f      	cmp	r3, #15
   32f4e:	d801      	bhi.n	32f54 <dk_set_leds_state+0xc>
   32f50:	f7e9 bb30 	b.w	1c5b4 <dk_set_leds_state.part.0>
}
   32f54:	f06f 0015 	mvn.w	r0, #21
   32f58:	4770      	bx	lr

00032f5a <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   32f5a:	210f      	movs	r1, #15
   32f5c:	f7ff bff4 	b.w	32f48 <dk_set_leds_state>

00032f60 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   32f60:	2101      	movs	r1, #1
   32f62:	f7e9 bd95 	b.w	1ca90 <dk_set_led>

00032f66 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   32f66:	2100      	movs	r1, #0
   32f68:	f7e9 bd92 	b.w	1ca90 <dk_set_led>

00032f6c <response_handler>:
	write_uart_string(response);
   32f6c:	f7e9 bebc 	b.w	1cce8 <write_uart_string>

00032f70 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   32f70:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   32f74:	b2db      	uxtb	r3, r3
   32f76:	2b08      	cmp	r3, #8
   32f78:	bf9d      	ittte	ls
   32f7a:	f240 1005 	movwls	r0, #261	; 0x105
   32f7e:	40d8      	lsrls	r0, r3
   32f80:	f000 0001 	andls.w	r0, r0, #1
{
   32f84:	2000      	movhi	r0, #0
}
   32f86:	4770      	bx	lr

00032f88 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   32f88:	280d      	cmp	r0, #13
   32f8a:	d004      	beq.n	32f96 <is_lfcr+0xe>
   32f8c:	f1a0 030a 	sub.w	r3, r0, #10
   32f90:	4258      	negs	r0, r3
   32f92:	4158      	adcs	r0, r3
   32f94:	4770      	bx	lr
		return true;
   32f96:	2001      	movs	r0, #1
}
   32f98:	4770      	bx	lr

00032f9a <skip_command_prefix>:
{
   32f9a:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   32f9c:	6801      	ldr	r1, [r0, #0]
{
   32f9e:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   32fa0:	1c8b      	adds	r3, r1, #2
   32fa2:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   32fa4:	788c      	ldrb	r4, [r1, #2]
   32fa6:	4620      	mov	r0, r4
   32fa8:	f7ff ffee 	bl	32f88 <is_lfcr>
   32fac:	b910      	cbnz	r0, 32fb4 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   32fae:	b10c      	cbz	r4, 32fb4 <skip_command_prefix+0x1a>
	(*cmd)++;
   32fb0:	3103      	adds	r1, #3
   32fb2:	6011      	str	r1, [r2, #0]
}
   32fb4:	bd10      	pop	{r4, pc}

00032fb6 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   32fb6:	6813      	ldr	r3, [r2, #0]
   32fb8:	f7ea ba94 	b.w	1d4e4 <at_parser_max_params_from_str>

00032fbc <at_params_list_init>:
{
   32fbc:	b538      	push	{r3, r4, r5, lr}
   32fbe:	460d      	mov	r5, r1
	if (list == NULL) {
   32fc0:	4604      	mov	r4, r0
   32fc2:	b140      	cbz	r0, 32fd6 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   32fc4:	2110      	movs	r1, #16
   32fc6:	4628      	mov	r0, r5
   32fc8:	f001 ffe0 	bl	34f8c <k_calloc>
   32fcc:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   32fce:	b128      	cbz	r0, 32fdc <at_params_list_init+0x20>
	return 0;
   32fd0:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   32fd2:	6025      	str	r5, [r4, #0]
}
   32fd4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   32fd6:	f06f 0015 	mvn.w	r0, #21
   32fda:	e7fb      	b.n	32fd4 <at_params_list_init+0x18>
		return -ENOMEM;
   32fdc:	f06f 000b 	mvn.w	r0, #11
   32fe0:	e7f8      	b.n	32fd4 <at_params_list_init+0x18>

00032fe2 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   32fe2:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   32fe4:	4604      	mov	r4, r0
   32fe6:	b148      	cbz	r0, 32ffc <at_params_list_free+0x1a>
   32fe8:	6843      	ldr	r3, [r0, #4]
   32fea:	b13b      	cbz	r3, 32ffc <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   32fec:	2500      	movs	r5, #0
	at_params_list_clear(list);
   32fee:	f7ea fb8d 	bl	1d70c <at_params_list_clear>
	k_free(list->params);
   32ff2:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   32ff4:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   32ff6:	f001 ffbe 	bl	34f76 <k_free>
	list->params = NULL;
   32ffa:	6065      	str	r5, [r4, #4]
}
   32ffc:	bd38      	pop	{r3, r4, r5, pc}

00032ffe <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   32ffe:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   33000:	b178      	cbz	r0, 33022 <at_params_empty_put+0x24>
   33002:	6843      	ldr	r3, [r0, #4]
   33004:	b16b      	cbz	r3, 33022 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33006:	f7ea fb19 	bl	1d63c <at_params_get>

	if (param == NULL) {
   3300a:	4604      	mov	r4, r0
   3300c:	b148      	cbz	r0, 33022 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   3300e:	f7ea fb59 	bl	1d6c4 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   33012:	2304      	movs	r3, #4
	param->value.int_val = 0;
   33014:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   33016:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   33018:	2300      	movs	r3, #0

	return 0;
   3301a:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3301c:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   33020:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33022:	f06f 0015 	mvn.w	r0, #21
   33026:	e7fb      	b.n	33020 <at_params_empty_put+0x22>

00033028 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   33028:	b570      	push	{r4, r5, r6, lr}
   3302a:	4616      	mov	r6, r2
   3302c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3302e:	b168      	cbz	r0, 3304c <at_params_int_put+0x24>
   33030:	6843      	ldr	r3, [r0, #4]
   33032:	b15b      	cbz	r3, 3304c <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33034:	f7ea fb02 	bl	1d63c <at_params_get>

	if (param == NULL) {
   33038:	4604      	mov	r4, r0
   3303a:	b138      	cbz	r0, 3304c <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   3303c:	f7ea fb42 	bl	1d6c4 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   33040:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   33042:	2000      	movs	r0, #0
	param->value.int_val = value;
   33044:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   33048:	7023      	strb	r3, [r4, #0]
}
   3304a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3304c:	f06f 0015 	mvn.w	r0, #21
   33050:	e7fb      	b.n	3304a <at_params_int_put+0x22>

00033052 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   33052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33054:	4617      	mov	r7, r2
   33056:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   33058:	b1c0      	cbz	r0, 3308c <at_params_string_put+0x3a>
   3305a:	6843      	ldr	r3, [r0, #4]
   3305c:	b1b3      	cbz	r3, 3308c <at_params_string_put+0x3a>
   3305e:	b1aa      	cbz	r2, 3308c <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33060:	f7ea faec 	bl	1d63c <at_params_get>

	if (param == NULL) {
   33064:	4604      	mov	r4, r0
   33066:	b188      	cbz	r0, 3308c <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   33068:	1c68      	adds	r0, r5, #1
   3306a:	f001 ff8b 	bl	34f84 <k_malloc>

	if (param_value == NULL) {
   3306e:	4606      	mov	r6, r0
   33070:	b178      	cbz	r0, 33092 <at_params_string_put+0x40>
   33072:	462a      	mov	r2, r5
   33074:	4639      	mov	r1, r7
   33076:	f001 ffb9 	bl	34fec <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   3307a:	4620      	mov	r0, r4
   3307c:	f7ea fb22 	bl	1d6c4 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   33080:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   33082:	2000      	movs	r0, #0
	param->size = str_len;
   33084:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   33086:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   33088:	60a6      	str	r6, [r4, #8]
}
   3308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3308c:	f06f 0015 	mvn.w	r0, #21
   33090:	e7fb      	b.n	3308a <at_params_string_put+0x38>
		return -ENOMEM;
   33092:	f06f 000b 	mvn.w	r0, #11
   33096:	e7f8      	b.n	3308a <at_params_string_put+0x38>

00033098 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   33098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3309a:	4617      	mov	r7, r2
   3309c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3309e:	b1c0      	cbz	r0, 330d2 <at_params_array_put+0x3a>
   330a0:	6843      	ldr	r3, [r0, #4]
   330a2:	b1b3      	cbz	r3, 330d2 <at_params_array_put+0x3a>
   330a4:	b1aa      	cbz	r2, 330d2 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   330a6:	f7ea fac9 	bl	1d63c <at_params_get>

	if (param == NULL) {
   330aa:	4604      	mov	r4, r0
   330ac:	b188      	cbz	r0, 330d2 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   330ae:	4628      	mov	r0, r5
   330b0:	f001 ff68 	bl	34f84 <k_malloc>

	if (param_value == NULL) {
   330b4:	4606      	mov	r6, r0
   330b6:	b178      	cbz	r0, 330d8 <at_params_array_put+0x40>
   330b8:	462a      	mov	r2, r5
   330ba:	4639      	mov	r1, r7
   330bc:	f001 ff96 	bl	34fec <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   330c0:	4620      	mov	r0, r4
   330c2:	f7ea faff 	bl	1d6c4 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   330c6:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   330c8:	2000      	movs	r0, #0
	param->size = array_len;
   330ca:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   330cc:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   330ce:	60a6      	str	r6, [r4, #8]
}
   330d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   330d2:	f06f 0015 	mvn.w	r0, #21
   330d6:	e7fb      	b.n	330d0 <at_params_array_put+0x38>
		return -ENOMEM;
   330d8:	f06f 000b 	mvn.w	r0, #11
   330dc:	e7f8      	b.n	330d0 <at_params_array_put+0x38>

000330de <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   330de:	b510      	push	{r4, lr}
   330e0:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   330e2:	b1b0      	cbz	r0, 33112 <at_params_short_get+0x34>
   330e4:	6843      	ldr	r3, [r0, #4]
   330e6:	b1a3      	cbz	r3, 33112 <at_params_short_get+0x34>
   330e8:	b19a      	cbz	r2, 33112 <at_params_short_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   330ea:	f7ea faa7 	bl	1d63c <at_params_get>

	if (param == NULL) {
   330ee:	b180      	cbz	r0, 33112 <at_params_short_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   330f0:	7803      	ldrb	r3, [r0, #0]
   330f2:	2b01      	cmp	r3, #1
   330f4:	d10d      	bne.n	33112 <at_params_short_get+0x34>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   330f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   330fa:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   330fe:	f142 0200 	adc.w	r2, r2, #0
   33102:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   33106:	f172 0200 	sbcs.w	r2, r2, #0
   3310a:	d202      	bcs.n	33112 <at_params_short_get+0x34>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   3310c:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3310e:	8023      	strh	r3, [r4, #0]
}
   33110:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33112:	f06f 0015 	mvn.w	r0, #21
   33116:	e7fb      	b.n	33110 <at_params_short_get+0x32>

00033118 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   33118:	b510      	push	{r4, lr}
   3311a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3311c:	b190      	cbz	r0, 33144 <at_params_unsigned_short_get+0x2c>
   3311e:	6843      	ldr	r3, [r0, #4]
   33120:	b183      	cbz	r3, 33144 <at_params_unsigned_short_get+0x2c>
   33122:	b17a      	cbz	r2, 33144 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33124:	f7ea fa8a 	bl	1d63c <at_params_get>

	if (param == NULL) {
   33128:	b160      	cbz	r0, 33144 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3312a:	7803      	ldrb	r3, [r0, #0]
   3312c:	2b01      	cmp	r3, #1
   3312e:	d109      	bne.n	33144 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   33130:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   33134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   33138:	f172 0200 	sbcs.w	r2, r2, #0
   3313c:	d202      	bcs.n	33144 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   3313e:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   33140:	8023      	strh	r3, [r4, #0]
}
   33142:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33144:	f06f 0015 	mvn.w	r0, #21
   33148:	e7fb      	b.n	33142 <at_params_unsigned_short_get+0x2a>

0003314a <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3314a:	b510      	push	{r4, lr}
   3314c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3314e:	b190      	cbz	r0, 33176 <at_params_int_get+0x2c>
   33150:	6843      	ldr	r3, [r0, #4]
   33152:	b183      	cbz	r3, 33176 <at_params_int_get+0x2c>
   33154:	b17a      	cbz	r2, 33176 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33156:	f7ea fa71 	bl	1d63c <at_params_get>

	if (param == NULL) {
   3315a:	b160      	cbz	r0, 33176 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3315c:	7803      	ldrb	r3, [r0, #0]
   3315e:	2b01      	cmp	r3, #1
   33160:	d109      	bne.n	33176 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   33162:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   33166:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3316a:	f142 0200 	adc.w	r2, r2, #0
   3316e:	b912      	cbnz	r2, 33176 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   33170:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   33172:	6023      	str	r3, [r4, #0]
}
   33174:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33176:	f06f 0015 	mvn.w	r0, #21
   3317a:	e7fb      	b.n	33174 <at_params_int_get+0x2a>

0003317c <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3317c:	b510      	push	{r4, lr}
   3317e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   33180:	b170      	cbz	r0, 331a0 <at_params_int64_get+0x24>
   33182:	6843      	ldr	r3, [r0, #4]
   33184:	b163      	cbz	r3, 331a0 <at_params_int64_get+0x24>
   33186:	b15a      	cbz	r2, 331a0 <at_params_int64_get+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   33188:	f7ea fa58 	bl	1d63c <at_params_get>

	if (param == NULL) {
   3318c:	b140      	cbz	r0, 331a0 <at_params_int64_get+0x24>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3318e:	7803      	ldrb	r3, [r0, #0]
   33190:	2b01      	cmp	r3, #1
   33192:	d105      	bne.n	331a0 <at_params_int64_get+0x24>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   33194:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   33198:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3319a:	e9c4 2300 	strd	r2, r3, [r4]
}
   3319e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   331a0:	f06f 0015 	mvn.w	r0, #21
   331a4:	e7fb      	b.n	3319e <at_params_int64_get+0x22>

000331a6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   331a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   331a8:	4617      	mov	r7, r2
   331aa:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   331ac:	b1c0      	cbz	r0, 331e0 <at_params_string_get+0x3a>
   331ae:	6843      	ldr	r3, [r0, #4]
   331b0:	b1b3      	cbz	r3, 331e0 <at_params_string_get+0x3a>
   331b2:	b1aa      	cbz	r2, 331e0 <at_params_string_get+0x3a>
   331b4:	b1a4      	cbz	r4, 331e0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   331b6:	f7ea fa41 	bl	1d63c <at_params_get>

	if (param == NULL) {
   331ba:	4606      	mov	r6, r0
   331bc:	b180      	cbz	r0, 331e0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   331be:	7803      	ldrb	r3, [r0, #0]
   331c0:	2b02      	cmp	r3, #2
   331c2:	d10d      	bne.n	331e0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   331c4:	f7ea fa5a 	bl	1d67c <at_param_size>

	if (*len < param_len) {
   331c8:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   331ca:	4605      	mov	r5, r0
	if (*len < param_len) {
   331cc:	4283      	cmp	r3, r0
   331ce:	d30a      	bcc.n	331e6 <at_params_string_get+0x40>
   331d0:	4602      	mov	r2, r0
   331d2:	68b1      	ldr	r1, [r6, #8]
   331d4:	4638      	mov	r0, r7
   331d6:	f001 ff09 	bl	34fec <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   331da:	2000      	movs	r0, #0
	*len = param_len;
   331dc:	6025      	str	r5, [r4, #0]
}
   331de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   331e0:	f06f 0015 	mvn.w	r0, #21
   331e4:	e7fb      	b.n	331de <at_params_string_get+0x38>
		return -ENOMEM;
   331e6:	f06f 000b 	mvn.w	r0, #11
   331ea:	e7f8      	b.n	331de <at_params_string_get+0x38>

000331ec <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   331ec:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   331ee:	4605      	mov	r5, r0
   331f0:	b180      	cbz	r0, 33214 <at_params_valid_count_get+0x28>
   331f2:	6843      	ldr	r3, [r0, #4]
   331f4:	b173      	cbz	r3, 33214 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   331f6:	2100      	movs	r1, #0
   331f8:	f7ea fa20 	bl	1d63c <at_params_get>
	size_t valid_i = 0;
   331fc:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   331fe:	b108      	cbz	r0, 33204 <at_params_valid_count_get+0x18>
   33200:	7803      	ldrb	r3, [r0, #0]
   33202:	b90b      	cbnz	r3, 33208 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   33204:	4620      	mov	r0, r4
   33206:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   33208:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3320a:	4621      	mov	r1, r4
   3320c:	4628      	mov	r0, r5
   3320e:	f7ea fa15 	bl	1d63c <at_params_get>
   33212:	e7f4      	b.n	331fe <at_params_valid_count_get+0x12>
		return -EINVAL;
   33214:	f06f 0415 	mvn.w	r4, #21
   33218:	e7f4      	b.n	33204 <at_params_valid_count_get+0x18>

0003321a <z_log_msg_static_create.constprop.0>:
   3321a:	2300      	movs	r3, #0
   3321c:	f7db bafe 	b.w	e81c <z_impl_z_log_msg_static_create>

00033220 <lte_lc_connect_async>:
{
   33220:	b508      	push	{r3, lr}
	if (handler) {
   33222:	b130      	cbz	r0, 33232 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   33224:	f7eb fae2 	bl	1e7ec <event_handler_list_append_handler>
}
   33228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   3322c:	2000      	movs	r0, #0
   3322e:	f7eb ba13 	b.w	1e658 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   33232:	f7eb fad3 	bl	1e7dc <event_handler_list_is_empty>
   33236:	2800      	cmp	r0, #0
   33238:	d0f6      	beq.n	33228 <lte_lc_connect_async+0x8>
}
   3323a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3323e:	f7ea ba93 	b.w	1d768 <lte_lc_connect_async.part.0>

00033242 <lte_lc_init_and_connect_async>:
{
   33242:	b510      	push	{r4, lr}
   33244:	4604      	mov	r4, r0
	err = init_and_config();
   33246:	f7eb f8e7 	bl	1e418 <init_and_config>
	if (err) {
   3324a:	b920      	cbnz	r0, 33256 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3324c:	4620      	mov	r0, r4
}
   3324e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   33252:	f7ff bfe5 	b.w	33220 <lte_lc_connect_async>
}
   33256:	f06f 000d 	mvn.w	r0, #13
   3325a:	bd10      	pop	{r4, pc}

0003325c <z_log_msg_static_create.constprop.0>:
   3325c:	2300      	movs	r3, #0
   3325e:	f7db badd 	b.w	e81c <z_impl_z_log_msg_static_create>

00033262 <string_to_int>:
{
   33262:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33264:	460c      	mov	r4, r1
   33266:	4605      	mov	r5, r0
   33268:	4616      	mov	r6, r2
	errno = 0;
   3326a:	f7fc fc82 	bl	2fb72 <__errno>
   3326e:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   33270:	4622      	mov	r2, r4
	errno = 0;
   33272:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   33274:	a901      	add	r1, sp, #4
   33276:	4628      	mov	r0, r5
   33278:	f7f9 f9b0 	bl	2c5dc <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3327c:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   3327e:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33280:	42ab      	cmp	r3, r5
   33282:	d103      	bne.n	3328c <string_to_int+0x2a>
		return -ENODATA;
   33284:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   33288:	b002      	add	sp, #8
   3328a:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3328c:	781b      	ldrb	r3, [r3, #0]
   3328e:	2b00      	cmp	r3, #0
   33290:	d1f8      	bne.n	33284 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   33292:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   33296:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   33298:	3303      	adds	r3, #3
   3329a:	d802      	bhi.n	332a2 <string_to_int+0x40>
	return 0;
   3329c:	2000      	movs	r0, #0
	*output = temp;
   3329e:	6034      	str	r4, [r6, #0]
	return 0;
   332a0:	e7f2      	b.n	33288 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   332a2:	f7fc fc66 	bl	2fb72 <__errno>
   332a6:	6803      	ldr	r3, [r0, #0]
   332a8:	2b22      	cmp	r3, #34	; 0x22
   332aa:	d1f7      	bne.n	3329c <string_to_int+0x3a>
   332ac:	e7ea      	b.n	33284 <string_to_int+0x22>

000332ae <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   332ae:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   332b0:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   332b2:	b087      	sub	sp, #28
   332b4:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   332b6:	ab01      	add	r3, sp, #4
   332b8:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   332ba:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   332bc:	f7ff ff73 	bl	331a6 <at_params_string_get>
	if (err) {
   332c0:	b968      	cbnz	r0, 332de <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   332c2:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   332c4:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   332c6:	3318      	adds	r3, #24
   332c8:	446b      	add	r3, sp
   332ca:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   332ce:	4629      	mov	r1, r5
   332d0:	a802      	add	r0, sp, #8
   332d2:	f7ff ffc6 	bl	33262 <string_to_int>
		return -ENODATA;
   332d6:	2800      	cmp	r0, #0
   332d8:	bf18      	it	ne
   332da:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   332de:	b007      	add	sp, #28
   332e0:	bd30      	pop	{r4, r5, pc}

000332e2 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   332e2:	f7eb ba65 	b.w	1e7b0 <lte_lc_deinit>

000332e6 <map_nrf_modem_at_scanf_error>:
	switch (err) {
   332e6:	f110 0f0c 	cmn.w	r0, #12
   332ea:	d00a      	beq.n	33302 <map_nrf_modem_at_scanf_error+0x1c>
   332ec:	f110 0f0b 	cmn.w	r0, #11
   332f0:	da08      	bge.n	33304 <map_nrf_modem_at_scanf_error+0x1e>
   332f2:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   332f6:	d004      	beq.n	33302 <map_nrf_modem_at_scanf_error+0x1c>
		return -EIO;
   332f8:	f110 0f0e 	cmn.w	r0, #14
   332fc:	bf18      	it	ne
   332fe:	f06f 0004 	mvnne.w	r0, #4
}
   33302:	4770      	bx	lr
		return -EIO;
   33304:	1c43      	adds	r3, r0, #1
   33306:	e7f9      	b.n	332fc <map_nrf_modem_at_scanf_error+0x16>

00033308 <z_log_msg_static_create.constprop.0>:
   33308:	2300      	movs	r3, #0
   3330a:	f7db ba87 	b.w	e81c <z_impl_z_log_msg_static_create>

0003330e <on_modem_lib_init>:
	if (ret != 0) {
   3330e:	b908      	cbnz	r0, 33314 <on_modem_lib_init+0x6>
   33310:	f7ec becc 	b.w	200ac <on_modem_lib_init.part.0>
}
   33314:	4770      	bx	lr

00033316 <json_add_str_cs>:
{
   33316:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   33318:	b140      	cbz	r0, 3332c <json_add_str_cs+0x16>
   3331a:	b13a      	cbz	r2, 3332c <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3331c:	f000 fb0c 	bl	33938 <cJSON_AddStringToObjectCS>
   33320:	2800      	cmp	r0, #0
   33322:	bf0c      	ite	eq
   33324:	f06f 000b 	mvneq.w	r0, #11
   33328:	2000      	movne	r0, #0
}
   3332a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3332c:	f06f 0015 	mvn.w	r0, #21
   33330:	e7fb      	b.n	3332a <json_add_str_cs+0x14>

00033332 <json_add_num_cs>:
{
   33332:	b508      	push	{r3, lr}
	if (!parent || !str) {
   33334:	b138      	cbz	r0, 33346 <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   33336:	f000 fad3 	bl	338e0 <cJSON_AddNumberToObjectCS>
   3333a:	2800      	cmp	r0, #0
   3333c:	bf0c      	ite	eq
   3333e:	f06f 000b 	mvneq.w	r0, #11
   33342:	2000      	movne	r0, #0
}
   33344:	bd08      	pop	{r3, pc}
		return -EINVAL;
   33346:	f06f 0015 	mvn.w	r0, #21
   3334a:	e7fb      	b.n	33344 <json_add_num_cs+0x12>

0003334c <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3334c:	b108      	cbz	r0, 33352 <json_object_decode+0x6>
   3334e:	f000 ba61 	b.w	33814 <cJSON_GetObjectItem>
}
   33352:	4770      	bx	lr

00033354 <json_add_null_cs>:
{
   33354:	b508      	push	{r3, lr}
	if (!parent || !str) {
   33356:	b138      	cbz	r0, 33368 <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   33358:	f000 fa99 	bl	3388e <cJSON_AddNullToObjectCS>
   3335c:	2800      	cmp	r0, #0
   3335e:	bf0c      	ite	eq
   33360:	f06f 000b 	mvneq.w	r0, #11
   33364:	2000      	movne	r0, #0
}
   33366:	bd08      	pop	{r3, pc}
		return -EINVAL;
   33368:	f06f 0015 	mvn.w	r0, #21
   3336c:	e7fb      	b.n	33366 <json_add_null_cs+0x12>

0003336e <json_add_obj_cs>:
{
   3336e:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   33370:	b148      	cbz	r0, 33386 <json_add_obj_cs+0x18>
   33372:	b141      	cbz	r1, 33386 <json_add_obj_cs+0x18>
   33374:	b13a      	cbz	r2, 33386 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   33376:	f000 fa59 	bl	3382c <cJSON_AddItemToObjectCS>
   3337a:	2800      	cmp	r0, #0
   3337c:	bf0c      	ite	eq
   3337e:	f06f 000b 	mvneq.w	r0, #11
   33382:	2000      	movne	r0, #0
}
   33384:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33386:	f06f 0015 	mvn.w	r0, #21
   3338a:	e7fb      	b.n	33384 <json_add_obj_cs+0x16>

0003338c <json_strdup>:
{
   3338c:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   3338e:	f000 fb46 	bl	33a1e <cJSON_GetStringValue>
	if (!src) {
   33392:	4605      	mov	r5, r0
   33394:	b910      	cbnz	r0, 3339c <json_strdup+0x10>
		return NULL;
   33396:	2400      	movs	r4, #0
}
   33398:	4620      	mov	r0, r4
   3339a:	bd38      	pop	{r3, r4, r5, pc}
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   3339c:	f7d5 ffbd 	bl	931a <strlen>
   333a0:	2101      	movs	r1, #1
   333a2:	4408      	add	r0, r1
   333a4:	f7ee f8fe 	bl	215a4 <nrf_cloud_calloc>
	if (dest) {
   333a8:	4604      	mov	r4, r0
   333aa:	2800      	cmp	r0, #0
   333ac:	d0f3      	beq.n	33396 <json_strdup+0xa>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   333ae:	4629      	mov	r1, r5
   333b0:	f001 ffda 	bl	35368 <strcpy>
   333b4:	e7f0      	b.n	33398 <json_strdup+0xc>

000333b6 <json_decode_and_alloc>:
{
   333b6:	b538      	push	{r3, r4, r5, lr}
   333b8:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   333ba:	460c      	mov	r4, r1
   333bc:	b911      	cbnz	r1, 333c4 <json_decode_and_alloc+0xe>
		return -EINVAL;
   333be:	f06f 0015 	mvn.w	r0, #21
}
   333c2:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   333c4:	f000 fb24 	bl	33a10 <cJSON_IsString>
   333c8:	2800      	cmp	r0, #0
   333ca:	d0f8      	beq.n	333be <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   333cc:	4628      	mov	r0, r5
   333ce:	f7ff ffdd 	bl	3338c <json_strdup>
   333d2:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   333d4:	b120      	cbz	r0, 333e0 <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   333d6:	f7d5 ffa0 	bl	931a <strlen>
   333da:	6020      	str	r0, [r4, #0]
	return 0;
   333dc:	2000      	movs	r0, #0
   333de:	e7f0      	b.n	333c2 <json_decode_and_alloc+0xc>
		return -ENOMEM;
   333e0:	f06f 000b 	mvn.w	r0, #11
   333e4:	e7ed      	b.n	333c2 <json_decode_and_alloc+0xc>

000333e6 <z_log_msg_static_create.constprop.0>:
   333e6:	2300      	movs	r3, #0
   333e8:	f7db ba18 	b.w	e81c <z_impl_z_log_msg_static_create>

000333ec <json_add_bool_cs>:
{
   333ec:	b508      	push	{r3, lr}
	if (!parent || !str) {
   333ee:	b140      	cbz	r0, 33402 <json_add_bool_cs+0x16>
   333f0:	b139      	cbz	r1, 33402 <json_add_bool_cs+0x16>
	return cJSON_AddBoolToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   333f2:	f000 fa60 	bl	338b6 <cJSON_AddBoolToObjectCS>
   333f6:	2800      	cmp	r0, #0
   333f8:	bf0c      	ite	eq
   333fa:	f06f 000b 	mvneq.w	r0, #11
   333fe:	2000      	movne	r0, #0
}
   33400:	bd08      	pop	{r3, pc}
		return -EINVAL;
   33402:	f06f 0015 	mvn.w	r0, #21
   33406:	e7fb      	b.n	33400 <json_add_bool_cs+0x14>

00033408 <nrf_cloud_log_control_set>:
{
   33408:	b508      	push	{r3, lr}
	nrf_cloud_log_level_set(level);
   3340a:	f7ee f8bb 	bl	21584 <nrf_cloud_log_level_set>
}
   3340e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	nrf_cloud_log_enable(level != LOG_LEVEL_NONE);
   33412:	3800      	subs	r0, #0
   33414:	bf18      	it	ne
   33416:	2001      	movne	r0, #1
   33418:	f7ee b8bc 	b.w	21594 <nrf_cloud_log_enable>

0003341c <z_log_msg_static_create.constprop.0>:
   3341c:	2300      	movs	r3, #0
   3341e:	f7db b9fd 	b.w	e81c <z_impl_z_log_msg_static_create>

00033422 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   33422:	e8d0 0faf 	lda	r0, [r0]
}
   33426:	4770      	bx	lr

00033428 <z_log_msg_static_create.constprop.0>:
   33428:	2300      	movs	r3, #0
   3342a:	f7db b9f7 	b.w	e81c <z_impl_z_log_msg_static_create>

0003342e <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3342e:	e8d0 3fef 	ldaex	r3, [r0]
   33432:	e8c0 1fe2 	stlex	r2, r1, [r0]
   33436:	2a00      	cmp	r2, #0
   33438:	d1f9      	bne.n	3342e <atomic_set.isra.0>
}
   3343a:	4770      	bx	lr

0003343c <cc_disconnection_handler>:
}
   3343c:	2000      	movs	r0, #0
   3343e:	4770      	bx	lr

00033440 <disconnection_handler>:
{
   33440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   33442:	2218      	movs	r2, #24
   33444:	2100      	movs	r1, #0
   33446:	4668      	mov	r0, sp
   33448:	f001 fdf0 	bl	3502c <memset>
   3344c:	230b      	movs	r3, #11
   3344e:	f88d 3000 	strb.w	r3, [sp]
   33452:	2301      	movs	r3, #1
   33454:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   33456:	f7ee f9af 	bl	217b8 <nfsm_get_disconnect_requested>
   3345a:	b108      	cbz	r0, 33460 <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3345c:	2300      	movs	r3, #0
   3345e:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   33460:	4669      	mov	r1, sp
   33462:	2001      	movs	r0, #1
   33464:	f7ee f962 	bl	2172c <nfsm_set_current_state_and_notify>
}
   33468:	2000      	movs	r0, #0
   3346a:	b007      	add	sp, #28
   3346c:	f85d fb04 	ldr.w	pc, [sp], #4

00033470 <dc_connection_handler>:
{
   33470:	b510      	push	{r4, lr}
   33472:	b086      	sub	sp, #24
   33474:	4604      	mov	r4, r0
	struct nrf_cloud_evt evt = {
   33476:	2218      	movs	r2, #24
   33478:	2100      	movs	r1, #0
   3347a:	4668      	mov	r0, sp
   3347c:	f001 fdd6 	bl	3502c <memset>
   33480:	2305      	movs	r3, #5
   33482:	f88d 3000 	strb.w	r3, [sp]
		.status = nct_evt->status
   33486:	6823      	ldr	r3, [r4, #0]
	struct nrf_cloud_evt evt = {
   33488:	9301      	str	r3, [sp, #4]
	if (nct_evt->status != NRF_CLOUD_ERR_STATUS_NONE) {
   3348a:	b153      	cbz	r3, 334a2 <dc_connection_handler+0x32>
		evt.type = NRF_CLOUD_EVT_ERROR;
   3348c:	23ff      	movs	r3, #255	; 0xff
   3348e:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   33492:	f7ee f945 	bl	21720 <nfsm_get_current_state>
   33496:	4669      	mov	r1, sp
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   33498:	f7ee f948 	bl	2172c <nfsm_set_current_state_and_notify>
}
   3349c:	2000      	movs	r0, #0
   3349e:	b006      	add	sp, #24
   334a0:	bd10      	pop	{r4, pc}
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   334a2:	4669      	mov	r1, sp
   334a4:	2009      	movs	r0, #9
   334a6:	e7f7      	b.n	33498 <dc_connection_handler+0x28>

000334a8 <cc_connection_handler>:
{
   334a8:	b510      	push	{r4, lr}
   334aa:	b08c      	sub	sp, #48	; 0x30
   334ac:	4604      	mov	r4, r0
	const struct nct_cc_data get_request = {
   334ae:	2214      	movs	r2, #20
   334b0:	2100      	movs	r1, #0
   334b2:	a801      	add	r0, sp, #4
   334b4:	f001 fdba 	bl	3502c <memset>
	const struct nrf_cloud_evt evt = {
   334b8:	2218      	movs	r2, #24
	const struct nct_cc_data get_request = {
   334ba:	23c8      	movs	r3, #200	; 0xc8
	const struct nrf_cloud_evt evt = {
   334bc:	2100      	movs	r1, #0
   334be:	eb0d 0002 	add.w	r0, sp, r2
	const struct nct_cc_data get_request = {
   334c2:	f8ad 3014 	strh.w	r3, [sp, #20]
	const struct nrf_cloud_evt evt = {
   334c6:	f001 fdb1 	bl	3502c <memset>
   334ca:	23ff      	movs	r3, #255	; 0xff
		.status = nct_evt->status
   334cc:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   334ce:	f88d 3018 	strb.w	r3, [sp, #24]
   334d2:	9107      	str	r1, [sp, #28]
	if (nct_evt->status != NRF_CLOUD_ERR_STATUS_NONE) {
   334d4:	b141      	cbz	r1, 334e8 <cc_connection_handler+0x40>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   334d6:	f7ee f923 	bl	21720 <nfsm_get_current_state>
   334da:	a906      	add	r1, sp, #24
   334dc:	f7ee f926 	bl	2172c <nfsm_set_current_state_and_notify>
		(void)nct_dc_disconnect();
   334e0:	f7ef f8f6 	bl	226d0 <nct_dc_disconnect>
		return 0;
   334e4:	2400      	movs	r4, #0
   334e6:	e00b      	b.n	33500 <cc_connection_handler+0x58>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   334e8:	2004      	movs	r0, #4
   334ea:	f7ee f91f 	bl	2172c <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   334ee:	a801      	add	r0, sp, #4
   334f0:	f7ef f808 	bl	22504 <nct_cc_send>
	if (err) {
   334f4:	4604      	mov	r4, r0
   334f6:	b130      	cbz	r0, 33506 <cc_connection_handler+0x5e>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   334f8:	2002      	movs	r0, #2
   334fa:	a906      	add	r1, sp, #24
   334fc:	f7ee f916 	bl	2172c <nfsm_set_current_state_and_notify>
}
   33500:	4620      	mov	r0, r4
   33502:	b00c      	add	sp, #48	; 0x30
   33504:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   33506:	4601      	mov	r1, r0
   33508:	2005      	movs	r0, #5
   3350a:	f7ee f90f 	bl	2172c <nfsm_set_current_state_and_notify>
	return 0;
   3350e:	e7e9      	b.n	334e4 <cc_connection_handler+0x3c>

00033510 <cc_tx_ack_in_state_requested_handler>:
{
   33510:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   33512:	8883      	ldrh	r3, [r0, #4]
   33514:	2bc8      	cmp	r3, #200	; 0xc8
   33516:	d103      	bne.n	33520 <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   33518:	2100      	movs	r1, #0
   3351a:	2005      	movs	r0, #5
   3351c:	f7ee f906 	bl	2172c <nfsm_set_current_state_and_notify>
}
   33520:	2000      	movs	r0, #0
   33522:	bd08      	pop	{r3, pc}

00033524 <z_log_msg_static_create.constprop.0>:
   33524:	2300      	movs	r3, #0
   33526:	f7db b979 	b.w	e81c <z_impl_z_log_msg_static_create>

0003352a <dc_disconnection_handler>:
static int dc_tx_ack_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}

static int dc_disconnection_handler(const struct nct_evt *nct_evt)
   3352a:	2000      	movs	r0, #0
   3352c:	4770      	bx	lr

0003352e <dc_tx_ack_handler>:
static int dc_tx_ack_handler(const struct nct_evt *nct_evt)
   3352e:	2000      	movs	r0, #0
   33530:	4770      	bx	lr

00033532 <z_log_msg_static_create.constprop.0>:
   33532:	2300      	movs	r3, #0
   33534:	f7db b972 	b.w	e81c <z_impl_z_log_msg_static_create>

00033538 <reset_topic>:
{
   33538:	b510      	push	{r4, lr}
   3353a:	4604      	mov	r4, r0
	if (topic->utf8) {
   3353c:	6800      	ldr	r0, [r0, #0]
   3353e:	b118      	cbz	r0, 33548 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   33540:	f7ee f836 	bl	215b0 <nrf_cloud_free>
		topic->utf8 = NULL;
   33544:	2300      	movs	r3, #0
   33546:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   33548:	2300      	movs	r3, #0
   3354a:	6063      	str	r3, [r4, #4]
}
   3354c:	bd10      	pop	{r4, pc}

0003354e <z_log_msg_static_create.constprop.0>:
   3354e:	2300      	movs	r3, #0
   33550:	f7db b964 	b.w	e81c <z_impl_z_log_msg_static_create>

00033554 <z_log_msg_static_create.constprop.0>:
   33554:	2300      	movs	r3, #0
   33556:	f7db b961 	b.w	e81c <z_impl_z_log_msg_static_create>

0003355a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3355a:	f7f5 b993 	b.w	28884 <z_impl_k_mutex_lock>

0003355e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3355e:	f7f5 ba61 	b.w	28a24 <z_impl_k_mutex_unlock>

00033562 <is_idle>:
{
   33562:	b538      	push	{r3, r4, r5, lr}
   33564:	4605      	mov	r5, r0
	k_mutex_lock(&client->mutex, K_FOREVER);
   33566:	f04f 32ff 	mov.w	r2, #4294967295
   3356a:	f04f 33ff 	mov.w	r3, #4294967295
   3356e:	f7ff fff4 	bl	3355a <k_mutex_lock.constprop.0.isra.0>
	ret = client->state == DOWNLOAD_CLIENT_IDLE;
   33572:	f895 4e3e 	ldrb.w	r4, [r5, #3646]	; 0xe3e
	k_mutex_unlock(&client->mutex);
   33576:	4628      	mov	r0, r5
	ret = client->state == DOWNLOAD_CLIENT_IDLE;
   33578:	fab4 f484 	clz	r4, r4
   3357c:	0964      	lsrs	r4, r4, #5
	k_mutex_unlock(&client->mutex);
   3357e:	f7ff ffee 	bl	3355e <k_mutex_unlock.isra.0>
}
   33582:	4620      	mov	r0, r4
   33584:	bd38      	pop	{r3, r4, r5, pc}

00033586 <set_state>:
{
   33586:	b538      	push	{r3, r4, r5, lr}
   33588:	460d      	mov	r5, r1
	k_mutex_lock(&client->mutex, K_FOREVER);
   3358a:	f04f 32ff 	mov.w	r2, #4294967295
   3358e:	f04f 33ff 	mov.w	r3, #4294967295
{
   33592:	4604      	mov	r4, r0
	k_mutex_lock(&client->mutex, K_FOREVER);
   33594:	f7ff ffe1 	bl	3355a <k_mutex_lock.constprop.0.isra.0>
	if ((state != DOWNLOAD_CLIENT_CLOSING) || (client->state != DOWNLOAD_CLIENT_IDLE)) {
   33598:	2d04      	cmp	r5, #4
   3359a:	d102      	bne.n	335a2 <set_state+0x1c>
   3359c:	f894 3e3e 	ldrb.w	r3, [r4, #3646]	; 0xe3e
   335a0:	b10b      	cbz	r3, 335a6 <set_state+0x20>
		client->state = state;
   335a2:	f884 5e3e 	strb.w	r5, [r4, #3646]	; 0xe3e
	k_mutex_unlock(&client->mutex);
   335a6:	4620      	mov	r0, r4
}
   335a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&client->mutex);
   335ac:	f7ff bfd7 	b.w	3355e <k_mutex_unlock.isra.0>

000335b0 <download_client_disconnect>:
{
   335b0:	b538      	push	{r3, r4, r5, lr}
	if (client == NULL || is_idle(client)) {
   335b2:	4605      	mov	r5, r0
   335b4:	b910      	cbnz	r0, 335bc <download_client_disconnect+0xc>
		return -EINVAL;
   335b6:	f06f 0015 	mvn.w	r0, #21
}
   335ba:	bd38      	pop	{r3, r4, r5, pc}
	if (client == NULL || is_idle(client)) {
   335bc:	f7ff ffd1 	bl	33562 <is_idle>
   335c0:	4604      	mov	r4, r0
   335c2:	2800      	cmp	r0, #0
   335c4:	d1f7      	bne.n	335b6 <download_client_disconnect+0x6>
	set_state(client, DOWNLOAD_CLIENT_CLOSING);
   335c6:	2104      	movs	r1, #4
   335c8:	4628      	mov	r0, r5
   335ca:	f7ff ffdc 	bl	33586 <set_state>
	z_impl_k_sem_give(sem);
   335ce:	f505 6012 	add.w	r0, r5, #2336	; 0x920
   335d2:	f7f5 fbb9 	bl	28d48 <z_impl_k_sem_give>
	return 0;
   335d6:	4620      	mov	r0, r4
}
   335d8:	e7ef      	b.n	335ba <download_client_disconnect+0xa>

000335da <download_client_get>:

int download_client_get(struct download_client *client, const char *host,
			const struct download_client_cfg *config, const char *file, size_t from)
{
   335da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   335dc:	460c      	mov	r4, r1
   335de:	4617      	mov	r7, r2
   335e0:	461e      	mov	r6, r3
	int rc;

	if (client == NULL) {
   335e2:	4605      	mov	r5, r0
   335e4:	b1e8      	cbz	r0, 33622 <download_client_get+0x48>
		return -EINVAL;
	}

	if (file == NULL) {
		file = host;
   335e6:	2b00      	cmp	r3, #0
   335e8:	bf08      	it	eq
   335ea:	460e      	moveq	r6, r1
	}

	k_mutex_lock(&client->mutex, K_FOREVER);
   335ec:	f04f 32ff 	mov.w	r2, #4294967295
   335f0:	f04f 33ff 	mov.w	r3, #4294967295
   335f4:	f7ff ffb1 	bl	3355a <k_mutex_lock.constprop.0.isra.0>

	rc = download_client_set_host(client, host, config);
   335f8:	4621      	mov	r1, r4
   335fa:	463a      	mov	r2, r7
   335fc:	4628      	mov	r0, r5
   335fe:	f7f0 fd2d 	bl	2405c <download_client_set_host>

	if (rc == 0) {
   33602:	4604      	mov	r4, r0
   33604:	b940      	cbnz	r0, 33618 <download_client_get+0x3e>
		client->close_when_done = true;
   33606:	2301      	movs	r3, #1
		rc = download_client_start(client, file, from);
   33608:	4631      	mov	r1, r6
   3360a:	4628      	mov	r0, r5
   3360c:	9a06      	ldr	r2, [sp, #24]
		client->close_when_done = true;
   3360e:	f885 3e3d 	strb.w	r3, [r5, #3645]	; 0xe3d
		rc = download_client_start(client, file, from);
   33612:	f7f0 fd65 	bl	240e0 <download_client_start>
   33616:	4604      	mov	r4, r0
	}

	k_mutex_unlock(&client->mutex);
   33618:	4628      	mov	r0, r5
   3361a:	f7ff ffa0 	bl	3355e <k_mutex_unlock.isra.0>

	return rc;
}
   3361e:	4620      	mov	r0, r4
   33620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   33622:	f06f 0415 	mvn.w	r4, #21
   33626:	e7fa      	b.n	3361e <download_client_get+0x44>

00033628 <atomic_or>:
{
   33628:	4603      	mov	r3, r0
   3362a:	b510      	push	{r4, lr}
}
   3362c:	e8d3 0fef 	ldaex	r0, [r3]
   33630:	ea40 0201 	orr.w	r2, r0, r1
   33634:	e8c3 2fe4 	stlex	r4, r2, [r3]
   33638:	2c00      	cmp	r4, #0
   3363a:	d1f7      	bne.n	3362c <atomic_or+0x4>
   3363c:	bd10      	pop	{r4, pc}

0003363e <atomic_and>:
{
   3363e:	4603      	mov	r3, r0
   33640:	b510      	push	{r4, lr}
}
   33642:	e8d3 0fef 	ldaex	r0, [r3]
   33646:	ea00 0201 	and.w	r2, r0, r1
   3364a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   3364e:	2c00      	cmp	r4, #0
   33650:	d1f7      	bne.n	33642 <atomic_and+0x4>
   33652:	bd10      	pop	{r4, pc}

00033654 <fota_download_s0_active_get>:
}
   33654:	f06f 0001 	mvn.w	r0, #1
   33658:	4770      	bx	lr

0003365a <skip_ext_apis>:
{
   3365a:	4603      	mov	r3, r0
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   3365c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3365e:	2300      	movs	r3, #0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   33660:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   33662:	429a      	cmp	r2, r3
   33664:	d100      	bne.n	33668 <skip_ext_apis+0xe>
}
   33666:	4770      	bx	lr
		ADVANCE_EXT_API(ext_api);
   33668:	68c1      	ldr	r1, [r0, #12]
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   3366a:	3301      	adds	r3, #1
		ADVANCE_EXT_API(ext_api);
   3366c:	4408      	add	r0, r1
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   3366e:	e7f8      	b.n	33662 <skip_ext_apis+0x8>

00033670 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   33670:	2000      	movs	r0, #0
   33672:	4770      	bx	lr

00033674 <psa_crypto_init>:
}
   33674:	2000      	movs	r0, #0
   33676:	4770      	bx	lr

00033678 <parse_hex4>:
    for (i = 0; i < 4; i++)
   33678:	2100      	movs	r1, #0
{
   3367a:	b510      	push	{r4, lr}
    unsigned int h = 0;
   3367c:	460a      	mov	r2, r1
{
   3367e:	4604      	mov	r4, r0
        if ((input[i] >= '0') && (input[i] <= '9'))
   33680:	5c63      	ldrb	r3, [r4, r1]
   33682:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   33686:	2809      	cmp	r0, #9
   33688:	d807      	bhi.n	3369a <parse_hex4+0x22>
            h += (unsigned int) input[i] - '0';
   3368a:	3a30      	subs	r2, #48	; 0x30
        if (i < 3)
   3368c:	2903      	cmp	r1, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3368e:	eb03 0002 	add.w	r0, r3, r2
        if (i < 3)
   33692:	d00f      	beq.n	336b4 <parse_hex4+0x3c>
            h = h << 4;
   33694:	0102      	lsls	r2, r0, #4
    for (i = 0; i < 4; i++)
   33696:	3101      	adds	r1, #1
   33698:	e7f2      	b.n	33680 <parse_hex4+0x8>
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3369a:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   3369e:	2805      	cmp	r0, #5
   336a0:	d801      	bhi.n	336a6 <parse_hex4+0x2e>
            h += (unsigned int) 10 + input[i] - 'A';
   336a2:	3a37      	subs	r2, #55	; 0x37
   336a4:	e7f2      	b.n	3368c <parse_hex4+0x14>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   336a6:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
   336aa:	2805      	cmp	r0, #5
   336ac:	d801      	bhi.n	336b2 <parse_hex4+0x3a>
            h += (unsigned int) 10 + input[i] - 'a';
   336ae:	3a57      	subs	r2, #87	; 0x57
   336b0:	e7ec      	b.n	3368c <parse_hex4+0x14>
            return 0;
   336b2:	2000      	movs	r0, #0
}
   336b4:	bd10      	pop	{r4, pc}

000336b6 <buffer_skip_whitespace>:
{
   336b6:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   336b8:	b128      	cbz	r0, 336c6 <buffer_skip_whitespace+0x10>
   336ba:	6801      	ldr	r1, [r0, #0]
   336bc:	b181      	cbz	r1, 336e0 <buffer_skip_whitespace+0x2a>
    if (cannot_access_at_index(buffer, 0))
   336be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   336c2:	429a      	cmp	r2, r3
   336c4:	d305      	bcc.n	336d2 <buffer_skip_whitespace+0x1c>
}
   336c6:	bd10      	pop	{r4, pc}
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   336c8:	5c8c      	ldrb	r4, [r1, r2]
   336ca:	2c20      	cmp	r4, #32
   336cc:	d8fb      	bhi.n	336c6 <buffer_skip_whitespace+0x10>
       buffer->offset++;
   336ce:	3201      	adds	r2, #1
   336d0:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   336d2:	6882      	ldr	r2, [r0, #8]
   336d4:	4293      	cmp	r3, r2
   336d6:	d8f7      	bhi.n	336c8 <buffer_skip_whitespace+0x12>
    if (buffer->offset == buffer->length)
   336d8:	d1f5      	bne.n	336c6 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   336da:	3b01      	subs	r3, #1
   336dc:	6083      	str	r3, [r0, #8]
   336de:	e7f2      	b.n	336c6 <buffer_skip_whitespace+0x10>
        return NULL;
   336e0:	4608      	mov	r0, r1
   336e2:	e7f0      	b.n	336c6 <buffer_skip_whitespace+0x10>

000336e4 <get_array_item>:
    if (array == NULL)
   336e4:	b110      	cbz	r0, 336ec <get_array_item+0x8>
    current_child = array->child;
   336e6:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   336e8:	b100      	cbz	r0, 336ec <get_array_item+0x8>
   336ea:	b901      	cbnz	r1, 336ee <get_array_item+0xa>
}
   336ec:	4770      	bx	lr
        current_child = current_child->next;
   336ee:	6800      	ldr	r0, [r0, #0]
        index--;
   336f0:	3901      	subs	r1, #1
        current_child = current_child->next;
   336f2:	e7f9      	b.n	336e8 <get_array_item+0x4>

000336f4 <update_offset>:
{
   336f4:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   336f6:	4604      	mov	r4, r0
   336f8:	b138      	cbz	r0, 3370a <update_offset+0x16>
   336fa:	6800      	ldr	r0, [r0, #0]
   336fc:	b128      	cbz	r0, 3370a <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
   336fe:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   33700:	4428      	add	r0, r5
   33702:	f7d5 fe0a 	bl	931a <strlen>
   33706:	4405      	add	r5, r0
   33708:	60a5      	str	r5, [r4, #8]
}
   3370a:	bd38      	pop	{r3, r4, r5, pc}

0003370c <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   3370c:	b189      	cbz	r1, 33732 <add_item_to_array+0x26>
   3370e:	b188      	cbz	r0, 33734 <add_item_to_array+0x28>
   33710:	4281      	cmp	r1, r0
   33712:	d00e      	beq.n	33732 <add_item_to_array+0x26>
    child = array->child;
   33714:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   33716:	b923      	cbnz	r3, 33722 <add_item_to_array+0x16>
        array->child = item;
   33718:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   3371a:	e9c1 3100 	strd	r3, r1, [r1]
{
   3371e:	2001      	movs	r0, #1
   33720:	4770      	bx	lr
        if (child->prev)
   33722:	685b      	ldr	r3, [r3, #4]
   33724:	2b00      	cmp	r3, #0
   33726:	d0fa      	beq.n	3371e <add_item_to_array+0x12>
    prev->next = item;
   33728:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   3372a:	604b      	str	r3, [r1, #4]
            array->child->prev = item;
   3372c:	6883      	ldr	r3, [r0, #8]
   3372e:	6059      	str	r1, [r3, #4]
   33730:	e7f5      	b.n	3371e <add_item_to_array+0x12>
        return false;
   33732:	2000      	movs	r0, #0
}
   33734:	4770      	bx	lr

00033736 <ensure>:
{
   33736:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   33738:	4604      	mov	r4, r0
   3373a:	b1b0      	cbz	r0, 3376a <ensure+0x34>
   3373c:	6800      	ldr	r0, [r0, #0]
   3373e:	b1a0      	cbz	r0, 3376a <ensure+0x34>
    if ((p->length > 0) && (p->offset >= p->length))
   33740:	6862      	ldr	r2, [r4, #4]
   33742:	b112      	cbz	r2, 3374a <ensure+0x14>
   33744:	68a3      	ldr	r3, [r4, #8]
   33746:	429a      	cmp	r2, r3
   33748:	d90f      	bls.n	3376a <ensure+0x34>
    if (needed > INT_MAX)
   3374a:	2900      	cmp	r1, #0
   3374c:	db0d      	blt.n	3376a <ensure+0x34>
    needed += p->offset + 1;
   3374e:	68a5      	ldr	r5, [r4, #8]
   33750:	4429      	add	r1, r5
   33752:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   33754:	429a      	cmp	r2, r3
   33756:	d301      	bcc.n	3375c <ensure+0x26>
    return newbuffer + p->offset;
   33758:	4428      	add	r0, r5
   3375a:	e007      	b.n	3376c <ensure+0x36>
    if (p->noalloc) {
   3375c:	6922      	ldr	r2, [r4, #16]
   3375e:	b922      	cbnz	r2, 3376a <ensure+0x34>
    if (needed > (INT_MAX / 2))
   33760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   33764:	d303      	bcc.n	3376e <ensure+0x38>
        if (needed <= INT_MAX)
   33766:	2b00      	cmp	r3, #0
   33768:	da0e      	bge.n	33788 <ensure+0x52>
        return NULL;
   3376a:	2000      	movs	r0, #0
}
   3376c:	bd70      	pop	{r4, r5, r6, pc}
        newsize = needed + 1;
   3376e:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   33770:	6a23      	ldr	r3, [r4, #32]
   33772:	b163      	cbz	r3, 3378e <ensure+0x58>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   33774:	4631      	mov	r1, r6
   33776:	4798      	blx	r3
        if (newbuffer == NULL)
   33778:	4605      	mov	r5, r0
   3377a:	b9b0      	cbnz	r0, 337aa <ensure+0x74>
            p->hooks.deallocate(p->buffer);
   3377c:	69e3      	ldr	r3, [r4, #28]
   3377e:	6820      	ldr	r0, [r4, #0]
   33780:	4798      	blx	r3
            p->buffer = NULL;
   33782:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   33786:	e7f0      	b.n	3376a <ensure+0x34>
            newsize = INT_MAX;
   33788:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3378c:	e7f0      	b.n	33770 <ensure+0x3a>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3378e:	4630      	mov	r0, r6
   33790:	69a3      	ldr	r3, [r4, #24]
   33792:	4798      	blx	r3
        if (!newbuffer)
   33794:	4605      	mov	r5, r0
   33796:	2800      	cmp	r0, #0
   33798:	d0f0      	beq.n	3377c <ensure+0x46>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3379a:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3379c:	6821      	ldr	r1, [r4, #0]
   3379e:	3201      	adds	r2, #1
   337a0:	f001 fc24 	bl	34fec <memcpy>
        p->hooks.deallocate(p->buffer);
   337a4:	69e3      	ldr	r3, [r4, #28]
   337a6:	6820      	ldr	r0, [r4, #0]
   337a8:	4798      	blx	r3
    p->buffer = newbuffer;
   337aa:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   337ae:	68a0      	ldr	r0, [r4, #8]
   337b0:	e7d2      	b.n	33758 <ensure+0x22>

000337b2 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   337b2:	4603      	mov	r3, r0
   337b4:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   337b6:	2028      	movs	r0, #40	; 0x28
   337b8:	4798      	blx	r3
    if (node)
   337ba:	4604      	mov	r4, r0
   337bc:	b118      	cbz	r0, 337c6 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   337be:	2228      	movs	r2, #40	; 0x28
   337c0:	2100      	movs	r1, #0
   337c2:	f001 fc33 	bl	3502c <memset>
}
   337c6:	4620      	mov	r0, r4
   337c8:	bd10      	pop	{r4, pc}

000337ca <cJSON_ParseWithOpts>:
{
   337ca:	b570      	push	{r4, r5, r6, lr}
   337cc:	460d      	mov	r5, r1
   337ce:	4616      	mov	r6, r2
    if (NULL == value)
   337d0:	4604      	mov	r4, r0
   337d2:	b148      	cbz	r0, 337e8 <cJSON_ParseWithOpts+0x1e>
    buffer_length = strlen(value) + sizeof("");
   337d4:	f7d5 fda1 	bl	931a <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   337d8:	4633      	mov	r3, r6
   337da:	462a      	mov	r2, r5
   337dc:	1c41      	adds	r1, r0, #1
   337de:	4620      	mov	r0, r4
}
   337e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   337e4:	f7f1 baac 	b.w	24d40 <cJSON_ParseWithLengthOpts>
}
   337e8:	bd70      	pop	{r4, r5, r6, pc}

000337ea <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   337ea:	2200      	movs	r2, #0
   337ec:	4611      	mov	r1, r2
   337ee:	f7ff bfec 	b.w	337ca <cJSON_ParseWithOpts>

000337f2 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   337f2:	2100      	movs	r1, #0
   337f4:	f7f1 ba36 	b.w	24c64 <print.constprop.0>

000337f8 <cJSON_GetArraySize>:
    if (array == NULL)
   337f8:	b110      	cbz	r0, 33800 <cJSON_GetArraySize+0x8>
    child = array->child;
   337fa:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   337fc:	2000      	movs	r0, #0
    while(child != NULL)
   337fe:	b903      	cbnz	r3, 33802 <cJSON_GetArraySize+0xa>
}
   33800:	4770      	bx	lr
        child = child->next;
   33802:	681b      	ldr	r3, [r3, #0]
        size++;
   33804:	3001      	adds	r0, #1
        child = child->next;
   33806:	e7fa      	b.n	337fe <cJSON_GetArraySize+0x6>

00033808 <cJSON_GetArrayItem>:
    if (index < 0)
   33808:	2900      	cmp	r1, #0
   3380a:	db01      	blt.n	33810 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3380c:	f7ff bf6a 	b.w	336e4 <get_array_item>
}
   33810:	2000      	movs	r0, #0
   33812:	4770      	bx	lr

00033814 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   33814:	2200      	movs	r2, #0
   33816:	f7f0 bf1f 	b.w	24658 <get_object_item>

0003381a <cJSON_HasObjectItem>:
{
   3381a:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3381c:	f7ff fffa 	bl	33814 <cJSON_GetObjectItem>
}
   33820:	3800      	subs	r0, #0
   33822:	bf18      	it	ne
   33824:	2001      	movne	r0, #1
   33826:	bd08      	pop	{r3, pc}

00033828 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   33828:	f7ff bf70 	b.w	3370c <add_item_to_array>

0003382c <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   3382c:	2301      	movs	r3, #1
   3382e:	f7f1 b80b 	b.w	24848 <add_item_to_object.constprop.0>

00033832 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   33832:	b1c8      	cbz	r0, 33868 <cJSON_DetachItemViaPointer+0x36>
   33834:	b189      	cbz	r1, 3385a <cJSON_DetachItemViaPointer+0x28>
    if (item != parent->child)
   33836:	6883      	ldr	r3, [r0, #8]
   33838:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   3383a:	bf1c      	itt	ne
   3383c:	e9d1 2300 	ldrdne	r2, r3, [r1]
   33840:	601a      	strne	r2, [r3, #0]
    if (item->next != NULL)
   33842:	680b      	ldr	r3, [r1, #0]
   33844:	b10b      	cbz	r3, 3384a <cJSON_DetachItemViaPointer+0x18>
        item->next->prev = item->prev;
   33846:	684a      	ldr	r2, [r1, #4]
   33848:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   3384a:	6883      	ldr	r3, [r0, #8]
        parent->child = item->next;
   3384c:	680a      	ldr	r2, [r1, #0]
    if (item == parent->child)
   3384e:	428b      	cmp	r3, r1
   33850:	d105      	bne.n	3385e <cJSON_DetachItemViaPointer+0x2c>
        parent->child = item->next;
   33852:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   33854:	2300      	movs	r3, #0
    item->next = NULL;
   33856:	e9c1 3300 	strd	r3, r3, [r1]
}
   3385a:	4608      	mov	r0, r1
   3385c:	4770      	bx	lr
    else if (item->next == NULL)
   3385e:	2a00      	cmp	r2, #0
   33860:	d1f8      	bne.n	33854 <cJSON_DetachItemViaPointer+0x22>
        parent->child->prev = item->prev;
   33862:	684a      	ldr	r2, [r1, #4]
   33864:	605a      	str	r2, [r3, #4]
   33866:	e7f5      	b.n	33854 <cJSON_DetachItemViaPointer+0x22>
        return NULL;
   33868:	4601      	mov	r1, r0
   3386a:	e7f6      	b.n	3385a <cJSON_DetachItemViaPointer+0x28>

0003386c <cJSON_DetachItemFromObject>:
{
   3386c:	b510      	push	{r4, lr}
   3386e:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   33870:	f7ff ffd0 	bl	33814 <cJSON_GetObjectItem>
   33874:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   33876:	4620      	mov	r0, r4
}
   33878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3387c:	f7ff bfd9 	b.w	33832 <cJSON_DetachItemViaPointer>

00033880 <cJSON_DeleteItemFromObject>:
{
   33880:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   33882:	f7ff fff3 	bl	3386c <cJSON_DetachItemFromObject>
}
   33886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3388a:	f7f1 ba35 	b.w	24cf8 <cJSON_Delete>

0003388e <cJSON_AddNullToObjectCS>:
{
   3388e:	b570      	push	{r4, r5, r6, lr}
   33890:	4605      	mov	r5, r0
   33892:	460e      	mov	r6, r1
    cJSON *null = cJSON_CreateNull();
   33894:	f7f1 fac0 	bl	24e18 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   33898:	2301      	movs	r3, #1
   3389a:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   3389c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3389e:	4631      	mov	r1, r6
   338a0:	4628      	mov	r0, r5
   338a2:	f7f0 ffd1 	bl	24848 <add_item_to_object.constprop.0>
   338a6:	4605      	mov	r5, r0
   338a8:	b918      	cbnz	r0, 338b2 <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   338aa:	4620      	mov	r0, r4
   338ac:	f7f1 fa24 	bl	24cf8 <cJSON_Delete>
    return NULL;
   338b0:	462c      	mov	r4, r5
}
   338b2:	4620      	mov	r0, r4
   338b4:	bd70      	pop	{r4, r5, r6, pc}

000338b6 <cJSON_AddBoolToObjectCS>:
{
   338b6:	b570      	push	{r4, r5, r6, lr}
   338b8:	4605      	mov	r5, r0
    cJSON *bool_item = cJSON_CreateBool(boolean);
   338ba:	4610      	mov	r0, r2
{
   338bc:	460e      	mov	r6, r1
    cJSON *bool_item = cJSON_CreateBool(boolean);
   338be:	f7f1 fab7 	bl	24e30 <cJSON_CreateBool>
    if (add_item_to_object(object, name, bool_item, &global_hooks, true))
   338c2:	2301      	movs	r3, #1
   338c4:	4602      	mov	r2, r0
    cJSON *bool_item = cJSON_CreateBool(boolean);
   338c6:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, bool_item, &global_hooks, true))
   338c8:	4631      	mov	r1, r6
   338ca:	4628      	mov	r0, r5
   338cc:	f7f0 ffbc 	bl	24848 <add_item_to_object.constprop.0>
   338d0:	4605      	mov	r5, r0
   338d2:	b918      	cbnz	r0, 338dc <cJSON_AddBoolToObjectCS+0x26>
    cJSON_Delete(bool_item);
   338d4:	4620      	mov	r0, r4
   338d6:	f7f1 fa0f 	bl	24cf8 <cJSON_Delete>
    return NULL;
   338da:	462c      	mov	r4, r5
}
   338dc:	4620      	mov	r0, r4
   338de:	bd70      	pop	{r4, r5, r6, pc}

000338e0 <cJSON_AddNumberToObjectCS>:
{
   338e0:	b570      	push	{r4, r5, r6, lr}
   338e2:	4605      	mov	r5, r0
   338e4:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   338e6:	4610      	mov	r0, r2
   338e8:	4619      	mov	r1, r3
   338ea:	f7d5 ffb1 	bl	9850 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   338ee:	2301      	movs	r3, #1
   338f0:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   338f2:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   338f4:	4631      	mov	r1, r6
   338f6:	4628      	mov	r0, r5
   338f8:	f7f0 ffa6 	bl	24848 <add_item_to_object.constprop.0>
   338fc:	4605      	mov	r5, r0
   338fe:	b918      	cbnz	r0, 33908 <cJSON_AddNumberToObjectCS+0x28>
    cJSON_Delete(number_item);
   33900:	4620      	mov	r0, r4
   33902:	f7f1 f9f9 	bl	24cf8 <cJSON_Delete>
    return NULL;
   33906:	462c      	mov	r4, r5
}
   33908:	4620      	mov	r0, r4
   3390a:	bd70      	pop	{r4, r5, r6, pc}

0003390c <cJSON_AddNumberToObject>:
{
   3390c:	b570      	push	{r4, r5, r6, lr}
   3390e:	4605      	mov	r5, r0
   33910:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   33912:	4610      	mov	r0, r2
   33914:	4619      	mov	r1, r3
   33916:	f7d5 ff9b 	bl	9850 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3391a:	2300      	movs	r3, #0
   3391c:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3391e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   33920:	4631      	mov	r1, r6
   33922:	4628      	mov	r0, r5
   33924:	f7f0 ff90 	bl	24848 <add_item_to_object.constprop.0>
   33928:	4605      	mov	r5, r0
   3392a:	b918      	cbnz	r0, 33934 <cJSON_AddNumberToObject+0x28>
    cJSON_Delete(number_item);
   3392c:	4620      	mov	r0, r4
   3392e:	f7f1 f9e3 	bl	24cf8 <cJSON_Delete>
    return NULL;
   33932:	462c      	mov	r4, r5
}
   33934:	4620      	mov	r0, r4
   33936:	bd70      	pop	{r4, r5, r6, pc}

00033938 <cJSON_AddStringToObjectCS>:
{
   33938:	b570      	push	{r4, r5, r6, lr}
   3393a:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3393c:	4610      	mov	r0, r2
{
   3393e:	460e      	mov	r6, r1
    cJSON *string_item = cJSON_CreateString(string);
   33940:	f7f1 fa86 	bl	24e50 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   33944:	2301      	movs	r3, #1
   33946:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   33948:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3394a:	4631      	mov	r1, r6
   3394c:	4628      	mov	r0, r5
   3394e:	f7f0 ff7b 	bl	24848 <add_item_to_object.constprop.0>
   33952:	4605      	mov	r5, r0
   33954:	b918      	cbnz	r0, 3395e <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   33956:	4620      	mov	r0, r4
   33958:	f7f1 f9ce 	bl	24cf8 <cJSON_Delete>
    return NULL;
   3395c:	462c      	mov	r4, r5
}
   3395e:	4620      	mov	r0, r4
   33960:	bd70      	pop	{r4, r5, r6, pc}

00033962 <cJSON_AddStringToObject>:
{
   33962:	b570      	push	{r4, r5, r6, lr}
   33964:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   33966:	4610      	mov	r0, r2
{
   33968:	460e      	mov	r6, r1
    cJSON *string_item = cJSON_CreateString(string);
   3396a:	f7f1 fa71 	bl	24e50 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3396e:	2300      	movs	r3, #0
   33970:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   33972:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   33974:	4631      	mov	r1, r6
   33976:	4628      	mov	r0, r5
   33978:	f7f0 ff66 	bl	24848 <add_item_to_object.constprop.0>
   3397c:	4605      	mov	r5, r0
   3397e:	b918      	cbnz	r0, 33988 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   33980:	4620      	mov	r0, r4
   33982:	f7f1 f9b9 	bl	24cf8 <cJSON_Delete>
    return NULL;
   33986:	462c      	mov	r4, r5
}
   33988:	4620      	mov	r0, r4
   3398a:	bd70      	pop	{r4, r5, r6, pc}

0003398c <cJSON_AddArrayToObjectCS>:
{
   3398c:	b570      	push	{r4, r5, r6, lr}
   3398e:	4605      	mov	r5, r0
   33990:	460e      	mov	r6, r1
    cJSON *array = cJSON_CreateArray();
   33992:	f7f1 fa75 	bl	24e80 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, true))
   33996:	2301      	movs	r3, #1
   33998:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3399a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3399c:	4631      	mov	r1, r6
   3399e:	4628      	mov	r0, r5
   339a0:	f7f0 ff52 	bl	24848 <add_item_to_object.constprop.0>
   339a4:	4605      	mov	r5, r0
   339a6:	b918      	cbnz	r0, 339b0 <cJSON_AddArrayToObjectCS+0x24>
    cJSON_Delete(array);
   339a8:	4620      	mov	r0, r4
   339aa:	f7f1 f9a5 	bl	24cf8 <cJSON_Delete>
    return NULL;
   339ae:	462c      	mov	r4, r5
}
   339b0:	4620      	mov	r0, r4
   339b2:	bd70      	pop	{r4, r5, r6, pc}

000339b4 <cJSON_AddObjectToObjectCS>:
{
   339b4:	b570      	push	{r4, r5, r6, lr}
   339b6:	4605      	mov	r5, r0
   339b8:	460e      	mov	r6, r1
    cJSON *object_item = cJSON_CreateObject();
   339ba:	f7f1 fa6d 	bl	24e98 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   339be:	2301      	movs	r3, #1
   339c0:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   339c2:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   339c4:	4631      	mov	r1, r6
   339c6:	4628      	mov	r0, r5
   339c8:	f7f0 ff3e 	bl	24848 <add_item_to_object.constprop.0>
   339cc:	4605      	mov	r5, r0
   339ce:	b918      	cbnz	r0, 339d8 <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   339d0:	4620      	mov	r0, r4
   339d2:	f7f1 f991 	bl	24cf8 <cJSON_Delete>
    return NULL;
   339d6:	462c      	mov	r4, r5
}
   339d8:	4620      	mov	r0, r4
   339da:	bd70      	pop	{r4, r5, r6, pc}

000339dc <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   339dc:	b118      	cbz	r0, 339e6 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   339de:	7b00      	ldrb	r0, [r0, #12]
   339e0:	1e83      	subs	r3, r0, #2
   339e2:	4258      	negs	r0, r3
   339e4:	4158      	adcs	r0, r3
}
   339e6:	4770      	bx	lr

000339e8 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   339e8:	b120      	cbz	r0, 339f4 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   339ea:	68c0      	ldr	r0, [r0, #12]
   339ec:	f010 0003 	ands.w	r0, r0, #3
   339f0:	bf18      	it	ne
   339f2:	2001      	movne	r0, #1
}
   339f4:	4770      	bx	lr

000339f6 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   339f6:	b118      	cbz	r0, 33a00 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   339f8:	7b00      	ldrb	r0, [r0, #12]
   339fa:	1f03      	subs	r3, r0, #4
   339fc:	4258      	negs	r0, r3
   339fe:	4158      	adcs	r0, r3
}
   33a00:	4770      	bx	lr

00033a02 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   33a02:	b120      	cbz	r0, 33a0e <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   33a04:	7b00      	ldrb	r0, [r0, #12]
   33a06:	f1a0 0308 	sub.w	r3, r0, #8
   33a0a:	4258      	negs	r0, r3
   33a0c:	4158      	adcs	r0, r3
}
   33a0e:	4770      	bx	lr

00033a10 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   33a10:	b120      	cbz	r0, 33a1c <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   33a12:	7b00      	ldrb	r0, [r0, #12]
   33a14:	f1a0 0310 	sub.w	r3, r0, #16
   33a18:	4258      	negs	r0, r3
   33a1a:	4158      	adcs	r0, r3
}
   33a1c:	4770      	bx	lr

00033a1e <cJSON_GetStringValue>:
{
   33a1e:	b508      	push	{r3, lr}
   33a20:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   33a22:	f7ff fff5 	bl	33a10 <cJSON_IsString>
   33a26:	b100      	cbz	r0, 33a2a <cJSON_GetStringValue+0xc>
    return item->valuestring;
   33a28:	6910      	ldr	r0, [r2, #16]
}
   33a2a:	bd08      	pop	{r3, pc}

00033a2c <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   33a2c:	b120      	cbz	r0, 33a38 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   33a2e:	7b00      	ldrb	r0, [r0, #12]
   33a30:	f1a0 0320 	sub.w	r3, r0, #32
   33a34:	4258      	negs	r0, r3
   33a36:	4158      	adcs	r0, r3
}
   33a38:	4770      	bx	lr

00033a3a <cJSON_FreeString>:

/**@brief malloc() function definition. */
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }

/**@brief free() function definition. */
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   33a3a:	f001 ba9c 	b.w	34f76 <k_free>

00033a3e <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   33a3e:	4770      	bx	lr

00033a40 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   33a40:	4700      	bx	r0

00033a42 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   33a42:	f001 b9a6 	b.w	34d92 <z_impl_k_busy_wait>

00033a46 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   33a46:	40c8      	lsrs	r0, r1
   33a48:	43c0      	mvns	r0, r0
}
   33a4a:	f000 0001 	and.w	r0, r0, #1
   33a4e:	4770      	bx	lr

00033a50 <nrf_gpio_pin_present_check>:
    switch (port)
   33a50:	0943      	lsrs	r3, r0, #5
   33a52:	bf0c      	ite	eq
   33a54:	f04f 33ff 	moveq.w	r3, #4294967295
   33a58:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   33a5a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33a5e:	fa23 f000 	lsr.w	r0, r3, r0
}
   33a62:	f000 0001 	and.w	r0, r0, #1
   33a66:	4770      	bx	lr

00033a68 <pin_is_task_output>:
{
   33a68:	b508      	push	{r3, lr}
   33a6a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   33a6c:	f7f1 fc0c 	bl	25288 <pin_is_output>
   33a70:	b110      	cbz	r0, 33a78 <pin_is_task_output+0x10>
   33a72:	4610      	mov	r0, r2
   33a74:	f7f1 fbf2 	bl	2525c <pin_in_use_by_te>
}
   33a78:	f000 0001 	and.w	r0, r0, #1
   33a7c:	bd08      	pop	{r3, pc}

00033a7e <nrf_gpio_reconfigure>:
{
   33a7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33a82:	4617      	mov	r7, r2
   33a84:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   33a88:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33a8a:	a801      	add	r0, sp, #4
{
   33a8c:	460c      	mov	r4, r1
   33a8e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33a90:	f7f1 fc7e 	bl	25390 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   33a94:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   33a96:	1e39      	subs	r1, r7, #0
   33a98:	bf18      	it	ne
   33a9a:	2101      	movne	r1, #1
   33a9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   33aa0:	1e23      	subs	r3, r4, #0
   33aa2:	bf18      	it	ne
   33aa4:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   33aa6:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   33aa8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   33aac:	bf14      	ite	ne
   33aae:	210c      	movne	r1, #12
   33ab0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   33ab2:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   33ab4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   33ab8:	bf14      	ite	ne
   33aba:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   33abe:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   33ac0:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   33ac4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   33ac8:	bf14      	ite	ne
   33aca:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   33ace:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   33ad0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   33ad4:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   33ad6:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   33ada:	b104      	cbz	r4, 33ade <nrf_gpio_reconfigure+0x60>
   33adc:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   33ade:	b10f      	cbz	r7, 33ae4 <nrf_gpio_reconfigure+0x66>
   33ae0:	783f      	ldrb	r7, [r7, #0]
   33ae2:	007f      	lsls	r7, r7, #1
   33ae4:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   33ae6:	b10e      	cbz	r6, 33aec <nrf_gpio_reconfigure+0x6e>
   33ae8:	7836      	ldrb	r6, [r6, #0]
   33aea:	00b6      	lsls	r6, r6, #2
   33aec:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   33aee:	b18d      	cbz	r5, 33b14 <nrf_gpio_reconfigure+0x96>
   33af0:	7829      	ldrb	r1, [r5, #0]
   33af2:	0209      	lsls	r1, r1, #8
   33af4:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   33af6:	f1b8 0f00 	cmp.w	r8, #0
   33afa:	d003      	beq.n	33b04 <nrf_gpio_reconfigure+0x86>
   33afc:	f898 8000 	ldrb.w	r8, [r8]
   33b00:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   33b04:	4321      	orrs	r1, r4
   33b06:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   33b0a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   33b0e:	b002      	add	sp, #8
   33b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   33b14:	4629      	mov	r1, r5
   33b16:	e7ed      	b.n	33af4 <nrf_gpio_reconfigure+0x76>

00033b18 <nrf_gpio_cfg_sense_set>:
{
   33b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   33b1a:	f10d 030f 	add.w	r3, sp, #15
   33b1e:	9301      	str	r3, [sp, #4]
   33b20:	2300      	movs	r3, #0
{
   33b22:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   33b26:	461a      	mov	r2, r3
   33b28:	4619      	mov	r1, r3
   33b2a:	9300      	str	r3, [sp, #0]
   33b2c:	f7ff ffa7 	bl	33a7e <nrf_gpio_reconfigure>
}
   33b30:	b005      	add	sp, #20
   33b32:	f85d fb04 	ldr.w	pc, [sp], #4

00033b36 <rpc_handle_ctrl_message>:
   33b36:	2902      	cmp	r1, #2
   33b38:	b510      	push	{r4, lr}
   33b3a:	4604      	mov	r4, r0
   33b3c:	d005      	beq.n	33b4a <rpc_handle_ctrl_message+0x14>
   33b3e:	2904      	cmp	r1, #4
   33b40:	d001      	beq.n	33b46 <rpc_handle_ctrl_message+0x10>
   33b42:	2901      	cmp	r1, #1
   33b44:	d107      	bne.n	33b56 <rpc_handle_ctrl_message+0x20>
   33b46:	2000      	movs	r0, #0
   33b48:	bd10      	pop	{r4, pc}
   33b4a:	6880      	ldr	r0, [r0, #8]
   33b4c:	2800      	cmp	r0, #0
   33b4e:	d0fa      	beq.n	33b46 <rpc_handle_ctrl_message+0x10>
   33b50:	f7e7 ffec 	bl	1bb2c <nrf_modem_os_shm_tx_free>
   33b54:	e7f7      	b.n	33b46 <rpc_handle_ctrl_message+0x10>
   33b56:	6880      	ldr	r0, [r0, #8]
   33b58:	b108      	cbz	r0, 33b5e <rpc_handle_ctrl_message+0x28>
   33b5a:	f7e7 ffe7 	bl	1bb2c <nrf_modem_os_shm_tx_free>
   33b5e:	4620      	mov	r0, r4
   33b60:	f7f2 fa12 	bl	25f88 <rpc_transport_msg_rx_free>
   33b64:	e7ef      	b.n	33b46 <rpc_handle_ctrl_message+0x10>

00033b66 <rpc_init>:
   33b66:	f7f2 b9fd 	b.w	25f64 <rpc_transport_init>

00033b6a <rpc_list_preambles_init>:
   33b6a:	2200      	movs	r2, #0
   33b6c:	b510      	push	{r4, lr}
   33b6e:	6804      	ldr	r4, [r0, #0]
   33b70:	4294      	cmp	r4, r2
   33b72:	d100      	bne.n	33b76 <rpc_list_preambles_init+0xc>
   33b74:	bd10      	pop	{r4, pc}
   33b76:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   33b7a:	684b      	ldr	r3, [r1, #4]
   33b7c:	3201      	adds	r2, #1
   33b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33b82:	f043 0303 	orr.w	r3, r3, #3
   33b86:	604b      	str	r3, [r1, #4]
   33b88:	e7f2      	b.n	33b70 <rpc_list_preambles_init+0x6>

00033b8a <rpc_transport_ipc_data_rx_resume>:
   33b8a:	2004      	movs	r0, #4
   33b8c:	f7f1 bff2 	b.w	25b74 <nrfx_ipc_receive_event_enable>

00033b90 <rpc_transport_ipc_data_rx_suspend>:
   33b90:	2004      	movs	r0, #4
   33b92:	f7f2 b80d 	b.w	25bb0 <nrfx_ipc_receive_event_disable>

00033b96 <rpc_transport_ipc_shutdown>:
   33b96:	f7f1 bfab 	b.w	25af0 <nrfx_ipc_uninit>

00033b9a <rpc_transport_ipc_msg_alloc>:
   33b9a:	b538      	push	{r3, r4, r5, lr}
   33b9c:	4604      	mov	r4, r0
   33b9e:	2500      	movs	r5, #0
   33ba0:	1d03      	adds	r3, r0, #4
   33ba2:	6822      	ldr	r2, [r4, #0]
   33ba4:	42aa      	cmp	r2, r5
   33ba6:	d801      	bhi.n	33bac <rpc_transport_ipc_msg_alloc+0x12>
   33ba8:	2300      	movs	r3, #0
   33baa:	e019      	b.n	33be0 <rpc_transport_ipc_msg_alloc+0x46>
   33bac:	f04f 0200 	mov.w	r2, #0
   33bb0:	e8d3 0fcf 	ldaexb	r0, [r3]
   33bb4:	2803      	cmp	r0, #3
   33bb6:	d104      	bne.n	33bc2 <rpc_transport_ipc_msg_alloc+0x28>
   33bb8:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   33bbc:	f1bc 0f00 	cmp.w	ip, #0
   33bc0:	d1f6      	bne.n	33bb0 <rpc_transport_ipc_msg_alloc+0x16>
   33bc2:	d002      	beq.n	33bca <rpc_transport_ipc_msg_alloc+0x30>
   33bc4:	3308      	adds	r3, #8
   33bc6:	3501      	adds	r5, #1
   33bc8:	e7eb      	b.n	33ba2 <rpc_transport_ipc_msg_alloc+0x8>
   33bca:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   33bce:	4618      	mov	r0, r3
   33bd0:	2240      	movs	r2, #64	; 0x40
   33bd2:	2100      	movs	r1, #0
   33bd4:	f001 fa2a 	bl	3502c <memset>
   33bd8:	4603      	mov	r3, r0
   33bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   33bde:	60a0      	str	r0, [r4, #8]
   33be0:	4618      	mov	r0, r3
   33be2:	bd38      	pop	{r3, r4, r5, pc}

00033be4 <rpc_client_msg_from_rpc_msg_get>:
   33be4:	3008      	adds	r0, #8
   33be6:	4770      	bx	lr

00033be8 <rpc_client_msg_alloc>:
   33be8:	b538      	push	{r3, r4, r5, lr}
   33bea:	4605      	mov	r5, r0
   33bec:	b920      	cbnz	r0, 33bf8 <rpc_client_msg_alloc+0x10>
   33bee:	f7f2 f9bf 	bl	25f70 <rpc_transport_msg_alloc>
   33bf2:	b980      	cbnz	r0, 33c16 <rpc_client_msg_alloc+0x2e>
   33bf4:	2000      	movs	r0, #0
   33bf6:	bd38      	pop	{r3, r4, r5, pc}
   33bf8:	f7e7 ff90 	bl	1bb1c <nrf_modem_os_shm_tx_alloc>
   33bfc:	4604      	mov	r4, r0
   33bfe:	2800      	cmp	r0, #0
   33c00:	d0f8      	beq.n	33bf4 <rpc_client_msg_alloc+0xc>
   33c02:	f7f2 f9b5 	bl	25f70 <rpc_transport_msg_alloc>
   33c06:	b938      	cbnz	r0, 33c18 <rpc_client_msg_alloc+0x30>
   33c08:	4620      	mov	r0, r4
   33c0a:	f7e7 ff8f 	bl	1bb2c <nrf_modem_os_shm_tx_free>
   33c0e:	2001      	movs	r0, #1
   33c10:	f7e7 ff5a 	bl	1bac8 <nrf_modem_os_event_notify>
   33c14:	e7ee      	b.n	33bf4 <rpc_client_msg_alloc+0xc>
   33c16:	462c      	mov	r4, r5
   33c18:	60c5      	str	r5, [r0, #12]
   33c1a:	f840 4f08 	str.w	r4, [r0, #8]!
   33c1e:	e7ea      	b.n	33bf6 <rpc_client_msg_alloc+0xe>

00033c20 <rpc_client_msg_send>:
   33c20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   33c24:	4610      	mov	r0, r2
   33c26:	f840 1d08 	str.w	r1, [r0, #-8]!
   33c2a:	f7f2 b9bf 	b.w	25fac <rpc_transport_msg_send>

00033c2e <rpc_client_msg_rx_free>:
   33c2e:	3808      	subs	r0, #8
   33c30:	f7f2 b9aa 	b.w	25f88 <rpc_transport_msg_rx_free>

00033c34 <rpc_client_msg_tx_free>:
   33c34:	3808      	subs	r0, #8
   33c36:	f7f2 b9ad 	b.w	25f94 <rpc_transport_msg_tx_free>

00033c3a <rpc_client_msg_data_rx_free>:
   33c3a:	f7f2 b9b1 	b.w	25fa0 <rpc_transport_msg_data_rx_free>

00033c3e <rpc_client_msg_data_tx_size>:
   33c3e:	f7f2 b99d 	b.w	25f7c <rpc_transport_msg_data_tx_size>

00033c42 <rpc_client_msg_data_tx_alloc>:
   33c42:	f7e7 bf6b 	b.w	1bb1c <nrf_modem_os_shm_tx_alloc>

00033c46 <rpc_client_msg_data_tx_free>:
   33c46:	b508      	push	{r3, lr}
   33c48:	f7e7 ff70 	bl	1bb2c <nrf_modem_os_shm_tx_free>
   33c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33c50:	2001      	movs	r0, #1
   33c52:	f7e7 bf39 	b.w	1bac8 <nrf_modem_os_event_notify>

00033c56 <sockaddr_init>:
   33c56:	2904      	cmp	r1, #4
   33c58:	b570      	push	{r4, r5, r6, lr}
   33c5a:	4605      	mov	r5, r0
   33c5c:	4616      	mov	r6, r2
   33c5e:	d003      	beq.n	33c68 <sockaddr_init+0x12>
   33c60:	2910      	cmp	r1, #16
   33c62:	d015      	beq.n	33c90 <sockaddr_init+0x3a>
   33c64:	2400      	movs	r4, #0
   33c66:	e011      	b.n	33c8c <sockaddr_init+0x36>
   33c68:	2010      	movs	r0, #16
   33c6a:	f7e7 ff49 	bl	1bb00 <nrf_modem_os_alloc>
   33c6e:	4604      	mov	r4, r0
   33c70:	2800      	cmp	r0, #0
   33c72:	d0f7      	beq.n	33c64 <sockaddr_init+0xe>
   33c74:	220f      	movs	r2, #15
   33c76:	2100      	movs	r1, #0
   33c78:	3001      	adds	r0, #1
   33c7a:	f001 f9d7 	bl	3502c <memset>
   33c7e:	2310      	movs	r3, #16
   33c80:	7023      	strb	r3, [r4, #0]
   33c82:	2301      	movs	r3, #1
   33c84:	8126      	strh	r6, [r4, #8]
   33c86:	6063      	str	r3, [r4, #4]
   33c88:	682b      	ldr	r3, [r5, #0]
   33c8a:	60e3      	str	r3, [r4, #12]
   33c8c:	4620      	mov	r0, r4
   33c8e:	bd70      	pop	{r4, r5, r6, pc}
   33c90:	2024      	movs	r0, #36	; 0x24
   33c92:	f7e7 ff35 	bl	1bb00 <nrf_modem_os_alloc>
   33c96:	4604      	mov	r4, r0
   33c98:	2800      	cmp	r0, #0
   33c9a:	d0e3      	beq.n	33c64 <sockaddr_init+0xe>
   33c9c:	2223      	movs	r2, #35	; 0x23
   33c9e:	2100      	movs	r1, #0
   33ca0:	3001      	adds	r0, #1
   33ca2:	f001 f9c3 	bl	3502c <memset>
   33ca6:	2324      	movs	r3, #36	; 0x24
   33ca8:	7023      	strb	r3, [r4, #0]
   33caa:	2302      	movs	r3, #2
   33cac:	4628      	mov	r0, r5
   33cae:	6063      	str	r3, [r4, #4]
   33cb0:	8126      	strh	r6, [r4, #8]
   33cb2:	f104 0310 	add.w	r3, r4, #16
   33cb6:	f105 0210 	add.w	r2, r5, #16
   33cba:	f850 1b04 	ldr.w	r1, [r0], #4
   33cbe:	4290      	cmp	r0, r2
   33cc0:	f843 1b04 	str.w	r1, [r3], #4
   33cc4:	d1f9      	bne.n	33cba <sockaddr_init+0x64>
   33cc6:	e7e1      	b.n	33c8c <sockaddr_init+0x36>

00033cc8 <sock_pollcb>:
   33cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33cca:	2500      	movs	r5, #0
   33ccc:	6803      	ldr	r3, [r0, #0]
   33cce:	4604      	mov	r4, r0
   33cd0:	9300      	str	r3, [sp, #0]
   33cd2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   33cd4:	4668      	mov	r0, sp
   33cd6:	f8ad 5006 	strh.w	r5, [sp, #6]
   33cda:	f8ad 3004 	strh.w	r3, [sp, #4]
   33cde:	f000 fccb 	bl	34678 <nrf_poll_one>
   33ce2:	b138      	cbz	r0, 33cf4 <sock_pollcb+0x2c>
   33ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33ce6:	4668      	mov	r0, sp
   33ce8:	4798      	blx	r3
   33cea:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   33cee:	b10b      	cbz	r3, 33cf4 <sock_pollcb+0x2c>
   33cf0:	6365      	str	r5, [r4, #52]	; 0x34
   33cf2:	63a5      	str	r5, [r4, #56]	; 0x38
   33cf4:	b003      	add	sp, #12
   33cf6:	bd30      	pop	{r4, r5, pc}

00033cf8 <sock_has_pkt>:
   33cf8:	6840      	ldr	r0, [r0, #4]
   33cfa:	3800      	subs	r0, #0
   33cfc:	bf18      	it	ne
   33cfe:	2001      	movne	r0, #1
   33d00:	4770      	bx	lr

00033d02 <sock_pkt_append>:
   33d02:	2300      	movs	r3, #0
   33d04:	600b      	str	r3, [r1, #0]
   33d06:	6883      	ldr	r3, [r0, #8]
   33d08:	b913      	cbnz	r3, 33d10 <sock_pkt_append+0xe>
   33d0a:	e9c0 1101 	strd	r1, r1, [r0, #4]
   33d0e:	4770      	bx	lr
   33d10:	6019      	str	r1, [r3, #0]
   33d12:	6081      	str	r1, [r0, #8]
   33d14:	4770      	bx	lr

00033d16 <sock_pkt_remove>:
   33d16:	b538      	push	{r3, r4, r5, lr}
   33d18:	4605      	mov	r5, r0
   33d1a:	460c      	mov	r4, r1
   33d1c:	f7f2 f94c 	bl	25fb8 <rpc_transport_data_rx_suspend>
   33d20:	68aa      	ldr	r2, [r5, #8]
   33d22:	6823      	ldr	r3, [r4, #0]
   33d24:	4294      	cmp	r4, r2
   33d26:	606b      	str	r3, [r5, #4]
   33d28:	bf08      	it	eq
   33d2a:	60ab      	streq	r3, [r5, #8]
   33d2c:	2300      	movs	r3, #0
   33d2e:	4620      	mov	r0, r4
   33d30:	6023      	str	r3, [r4, #0]
   33d32:	f000 f904 	bl	33f3e <pkt_free>
   33d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33d3a:	f7f2 b943 	b.w	25fc4 <rpc_transport_data_rx_resume>

00033d3e <sock_pkt_peek_head>:
   33d3e:	6840      	ldr	r0, [r0, #4]
   33d40:	4770      	bx	lr

00033d42 <sock_is_stream>:
   33d42:	6900      	ldr	r0, [r0, #16]
   33d44:	1e43      	subs	r3, r0, #1
   33d46:	4258      	negs	r0, r3
   33d48:	4158      	adcs	r0, r3
   33d4a:	4770      	bx	lr

00033d4c <sock_is_datagram>:
   33d4c:	6900      	ldr	r0, [r0, #16]
   33d4e:	1e83      	subs	r3, r0, #2
   33d50:	4258      	negs	r0, r3
   33d52:	4158      	adcs	r0, r3
   33d54:	4770      	bx	lr

00033d56 <sock_is_raw>:
   33d56:	6900      	ldr	r0, [r0, #16]
   33d58:	1ec3      	subs	r3, r0, #3
   33d5a:	4258      	negs	r0, r3
   33d5c:	4158      	adcs	r0, r3
   33d5e:	4770      	bx	lr

00033d60 <sock_proto_is_secure>:
   33d60:	6940      	ldr	r0, [r0, #20]
   33d62:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   33d66:	d005      	beq.n	33d74 <sock_proto_is_secure+0x14>
   33d68:	f240 1311 	movw	r3, #273	; 0x111
   33d6c:	1ac3      	subs	r3, r0, r3
   33d6e:	4258      	negs	r0, r3
   33d70:	4158      	adcs	r0, r3
   33d72:	4770      	bx	lr
   33d74:	2001      	movs	r0, #1
   33d76:	4770      	bx	lr

00033d78 <sock_is_connecting>:
   33d78:	7f00      	ldrb	r0, [r0, #28]
   33d7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   33d7e:	4770      	bx	lr

00033d80 <sock_is_connected>:
   33d80:	7f00      	ldrb	r0, [r0, #28]
   33d82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   33d86:	4770      	bx	lr

00033d88 <sock_is_attaching>:
   33d88:	7f00      	ldrb	r0, [r0, #28]
   33d8a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   33d8e:	4770      	bx	lr

00033d90 <sock_is_nonblock>:
   33d90:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   33d92:	f000 0001 	and.w	r0, r0, #1
   33d96:	4770      	bx	lr

00033d98 <sock_is_closed>:
   33d98:	7f00      	ldrb	r0, [r0, #28]
   33d9a:	f000 0001 	and.w	r0, r0, #1
   33d9e:	4770      	bx	lr

00033da0 <sock_is_local_closed>:
   33da0:	7f00      	ldrb	r0, [r0, #28]
   33da2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   33da6:	4770      	bx	lr

00033da8 <sock_is_eof>:
   33da8:	6903      	ldr	r3, [r0, #16]
   33daa:	2b01      	cmp	r3, #1
   33dac:	d105      	bne.n	33dba <sock_is_eof+0x12>
   33dae:	6980      	ldr	r0, [r0, #24]
   33db0:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   33db4:	4258      	negs	r0, r3
   33db6:	4158      	adcs	r0, r3
   33db8:	4770      	bx	lr
   33dba:	2000      	movs	r0, #0
   33dbc:	4770      	bx	lr

00033dbe <sock_has_stream_error>:
   33dbe:	7f00      	ldrb	r0, [r0, #28]
   33dc0:	09c0      	lsrs	r0, r0, #7
   33dc2:	4770      	bx	lr

00033dc4 <sock_has_error>:
   33dc4:	6983      	ldr	r3, [r0, #24]
   33dc6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   33dca:	bf14      	ite	ne
   33dcc:	2001      	movne	r0, #1
   33dce:	2000      	moveq	r0, #0
   33dd0:	4770      	bx	lr

00033dd2 <sock_has_flow_control>:
   33dd2:	7f00      	ldrb	r0, [r0, #28]
   33dd4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   33dd8:	4770      	bx	lr

00033dda <sock_has_pollcb>:
   33dda:	6b40      	ldr	r0, [r0, #52]	; 0x34
   33ddc:	3800      	subs	r0, #0
   33dde:	bf18      	it	ne
   33de0:	2001      	movne	r0, #1
   33de2:	4770      	bx	lr

00033de4 <sock_has_rai_no_data>:
   33de4:	6b00      	ldr	r0, [r0, #48]	; 0x30
   33de6:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   33dea:	4258      	negs	r0, r3
   33dec:	4158      	adcs	r0, r3
   33dee:	4770      	bx	lr

00033df0 <sock_can_read>:
   33df0:	6840      	ldr	r0, [r0, #4]
   33df2:	3800      	subs	r0, #0
   33df4:	bf18      	it	ne
   33df6:	2001      	movne	r0, #1
   33df8:	4770      	bx	lr

00033dfa <sock_can_accept>:
   33dfa:	7f40      	ldrb	r0, [r0, #29]
   33dfc:	3800      	subs	r0, #0
   33dfe:	bf18      	it	ne
   33e00:	2001      	movne	r0, #1
   33e02:	4770      	bx	lr

00033e04 <sock_can_send>:
   33e04:	b510      	push	{r4, lr}
   33e06:	4602      	mov	r2, r0
   33e08:	6904      	ldr	r4, [r0, #16]
   33e0a:	f7ff ffa9 	bl	33d60 <sock_proto_is_secure>
   33e0e:	2c01      	cmp	r4, #1
   33e10:	4601      	mov	r1, r0
   33e12:	7f13      	ldrb	r3, [r2, #28]
   33e14:	d103      	bne.n	33e1e <sock_can_send+0x1a>
   33e16:	071c      	lsls	r4, r3, #28
   33e18:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   33e1c:	d50b      	bpl.n	33e36 <sock_can_send+0x32>
   33e1e:	b931      	cbnz	r1, 33e2e <sock_can_send+0x2a>
   33e20:	07d9      	lsls	r1, r3, #31
   33e22:	d40b      	bmi.n	33e3c <sock_can_send+0x38>
   33e24:	f3c3 1380 	ubfx	r3, r3, #6, #1
   33e28:	f1c3 0001 	rsb	r0, r3, #1
   33e2c:	e003      	b.n	33e36 <sock_can_send+0x32>
   33e2e:	069a      	lsls	r2, r3, #26
   33e30:	f3c3 1040 	ubfx	r0, r3, #5, #1
   33e34:	d4f4      	bmi.n	33e20 <sock_can_send+0x1c>
   33e36:	f000 0001 	and.w	r0, r0, #1
   33e3a:	bd10      	pop	{r4, pc}
   33e3c:	2000      	movs	r0, #0
   33e3e:	e7fa      	b.n	33e36 <sock_can_send+0x32>

00033e40 <sock_rcvtimeo_ms_get>:
   33e40:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   33e44:	ea53 0102 	orrs.w	r1, r3, r2
   33e48:	d009      	beq.n	33e5e <sock_rcvtimeo_ms_get+0x1e>
   33e4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   33e4e:	fbb3 f0f1 	udiv	r0, r3, r1
   33e52:	fb01 0002 	mla	r0, r1, r2, r0
   33e56:	2801      	cmp	r0, #1
   33e58:	bfb8      	it	lt
   33e5a:	2001      	movlt	r0, #1
   33e5c:	4770      	bx	lr
   33e5e:	f04f 30ff 	mov.w	r0, #4294967295
   33e62:	4770      	bx	lr

00033e64 <sock_sndtimeo_ms_get>:
   33e64:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   33e68:	ea53 0102 	orrs.w	r1, r3, r2
   33e6c:	d009      	beq.n	33e82 <sock_sndtimeo_ms_get+0x1e>
   33e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   33e72:	fbb3 f0f1 	udiv	r0, r3, r1
   33e76:	fb01 0002 	mla	r0, r1, r2, r0
   33e7a:	2801      	cmp	r0, #1
   33e7c:	bfb8      	it	lt
   33e7e:	2001      	movlt	r0, #1
   33e80:	4770      	bx	lr
   33e82:	f04f 30ff 	mov.w	r0, #4294967295
   33e86:	4770      	bx	lr

00033e88 <sock_family_is_valid>:
   33e88:	3801      	subs	r0, #1
   33e8a:	2802      	cmp	r0, #2
   33e8c:	bf8c      	ite	hi
   33e8e:	2000      	movhi	r0, #0
   33e90:	2001      	movls	r0, #1
   33e92:	4770      	bx	lr

00033e94 <sock_type_is_valid>:
   33e94:	3801      	subs	r0, #1
   33e96:	2802      	cmp	r0, #2
   33e98:	bf8c      	ite	hi
   33e9a:	2000      	movhi	r0, #0
   33e9c:	2001      	movls	r0, #1
   33e9e:	4770      	bx	lr

00033ea0 <sock_proto_supports_type>:
   33ea0:	2903      	cmp	r1, #3
   33ea2:	d015      	beq.n	33ed0 <sock_proto_supports_type+0x30>
   33ea4:	2811      	cmp	r0, #17
   33ea6:	d00c      	beq.n	33ec2 <sock_proto_supports_type+0x22>
   33ea8:	dc04      	bgt.n	33eb4 <sock_proto_supports_type+0x14>
   33eaa:	b188      	cbz	r0, 33ed0 <sock_proto_supports_type+0x30>
   33eac:	2806      	cmp	r0, #6
   33eae:	d00a      	beq.n	33ec6 <sock_proto_supports_type+0x26>
   33eb0:	2000      	movs	r0, #0
   33eb2:	4770      	bx	lr
   33eb4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   33eb8:	d005      	beq.n	33ec6 <sock_proto_supports_type+0x26>
   33eba:	f240 1311 	movw	r3, #273	; 0x111
   33ebe:	4298      	cmp	r0, r3
   33ec0:	d1f6      	bne.n	33eb0 <sock_proto_supports_type+0x10>
   33ec2:	2902      	cmp	r1, #2
   33ec4:	e000      	b.n	33ec8 <sock_proto_supports_type+0x28>
   33ec6:	2901      	cmp	r1, #1
   33ec8:	bf14      	ite	ne
   33eca:	2000      	movne	r0, #0
   33ecc:	2001      	moveq	r0, #1
   33ece:	4770      	bx	lr
   33ed0:	2001      	movs	r0, #1
   33ed2:	4770      	bx	lr

00033ed4 <sock_sockaddr_len_is_valid>:
   33ed4:	6843      	ldr	r3, [r0, #4]
   33ed6:	2b01      	cmp	r3, #1
   33ed8:	d003      	beq.n	33ee2 <sock_sockaddr_len_is_valid+0xe>
   33eda:	2b02      	cmp	r3, #2
   33edc:	d009      	beq.n	33ef2 <sock_sockaddr_len_is_valid+0x1e>
   33ede:	2000      	movs	r0, #0
   33ee0:	4770      	bx	lr
   33ee2:	7803      	ldrb	r3, [r0, #0]
   33ee4:	2b10      	cmp	r3, #16
   33ee6:	d1fa      	bne.n	33ede <sock_sockaddr_len_is_valid+0xa>
   33ee8:	2910      	cmp	r1, #16
   33eea:	bf14      	ite	ne
   33eec:	2000      	movne	r0, #0
   33eee:	2001      	moveq	r0, #1
   33ef0:	4770      	bx	lr
   33ef2:	7803      	ldrb	r3, [r0, #0]
   33ef4:	2b24      	cmp	r3, #36	; 0x24
   33ef6:	d1f2      	bne.n	33ede <sock_sockaddr_len_is_valid+0xa>
   33ef8:	2924      	cmp	r1, #36	; 0x24
   33efa:	e7f6      	b.n	33eea <sock_sockaddr_len_is_valid+0x16>

00033efc <sock_sockaddr_fam_is_valid>:
   33efc:	68c3      	ldr	r3, [r0, #12]
   33efe:	2b01      	cmp	r3, #1
   33f00:	d003      	beq.n	33f0a <sock_sockaddr_fam_is_valid+0xe>
   33f02:	2b02      	cmp	r3, #2
   33f04:	d007      	beq.n	33f16 <sock_sockaddr_fam_is_valid+0x1a>
   33f06:	2001      	movs	r0, #1
   33f08:	4770      	bx	lr
   33f0a:	6848      	ldr	r0, [r1, #4]
   33f0c:	2801      	cmp	r0, #1
   33f0e:	bf14      	ite	ne
   33f10:	2000      	movne	r0, #0
   33f12:	2001      	moveq	r0, #1
   33f14:	4770      	bx	lr
   33f16:	6848      	ldr	r0, [r1, #4]
   33f18:	2802      	cmp	r0, #2
   33f1a:	e7f8      	b.n	33f0e <sock_sockaddr_fam_is_valid+0x12>

00033f1c <pkt_has_next>:
   33f1c:	b100      	cbz	r0, 33f20 <pkt_has_next+0x4>
   33f1e:	6800      	ldr	r0, [r0, #0]
   33f20:	3800      	subs	r0, #0
   33f22:	bf18      	it	ne
   33f24:	2001      	movne	r0, #1
   33f26:	4770      	bx	lr

00033f28 <pkt_peek_next>:
   33f28:	b100      	cbz	r0, 33f2c <pkt_peek_next+0x4>
   33f2a:	6800      	ldr	r0, [r0, #0]
   33f2c:	4770      	bx	lr

00033f2e <pkt_bytes_get>:
   33f2e:	8943      	ldrh	r3, [r0, #10]
   33f30:	6840      	ldr	r0, [r0, #4]
   33f32:	4418      	add	r0, r3
   33f34:	4770      	bx	lr

00033f36 <pkt_bytes_left>:
   33f36:	8902      	ldrh	r2, [r0, #8]
   33f38:	8940      	ldrh	r0, [r0, #10]
   33f3a:	1a10      	subs	r0, r2, r0
   33f3c:	4770      	bx	lr

00033f3e <pkt_free>:
   33f3e:	b510      	push	{r4, lr}
   33f40:	4604      	mov	r4, r0
   33f42:	6840      	ldr	r0, [r0, #4]
   33f44:	f7ff fe79 	bl	33c3a <rpc_client_msg_data_rx_free>
   33f48:	68e0      	ldr	r0, [r4, #12]
   33f4a:	b108      	cbz	r0, 33f50 <pkt_free+0x12>
   33f4c:	f7e7 fde0 	bl	1bb10 <nrf_modem_os_free>
   33f50:	4620      	mov	r0, r4
   33f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33f56:	f7e7 bddb 	b.w	1bb10 <nrf_modem_os_free>

00033f5a <pkt_flush>:
   33f5a:	b510      	push	{r4, lr}
   33f5c:	4604      	mov	r4, r0
   33f5e:	6820      	ldr	r0, [r4, #0]
   33f60:	b900      	cbnz	r0, 33f64 <pkt_flush+0xa>
   33f62:	bd10      	pop	{r4, pc}
   33f64:	6862      	ldr	r2, [r4, #4]
   33f66:	6803      	ldr	r3, [r0, #0]
   33f68:	4290      	cmp	r0, r2
   33f6a:	6023      	str	r3, [r4, #0]
   33f6c:	bf08      	it	eq
   33f6e:	6063      	streq	r3, [r4, #4]
   33f70:	f7ff ffe5 	bl	33f3e <pkt_free>
   33f74:	e7f3      	b.n	33f5e <pkt_flush+0x4>

00033f76 <on_conf_dnssrv_res>:
   33f76:	f000 bc71 	b.w	3485c <res_forward>

00033f7a <nrf_freeaddrinfo>:
   33f7a:	b510      	push	{r4, lr}
   33f7c:	4604      	mov	r4, r0
   33f7e:	b160      	cbz	r0, 33f9a <nrf_freeaddrinfo+0x20>
   33f80:	6940      	ldr	r0, [r0, #20]
   33f82:	b108      	cbz	r0, 33f88 <nrf_freeaddrinfo+0xe>
   33f84:	f7e7 fdc4 	bl	1bb10 <nrf_modem_os_free>
   33f88:	69a0      	ldr	r0, [r4, #24]
   33f8a:	b108      	cbz	r0, 33f90 <nrf_freeaddrinfo+0x16>
   33f8c:	f7e7 fdc0 	bl	1bb10 <nrf_modem_os_free>
   33f90:	4620      	mov	r0, r4
   33f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33f96:	f7e7 bdbb 	b.w	1bb10 <nrf_modem_os_free>
   33f9a:	bd10      	pop	{r4, pc}

00033f9c <on_getifaddrs_res>:
   33f9c:	f000 bc5e 	b.w	3485c <res_forward>

00033fa0 <nrf_socket>:
   33fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33fa4:	4681      	mov	r9, r0
   33fa6:	460f      	mov	r7, r1
   33fa8:	4616      	mov	r6, r2
   33faa:	f7ff ff6d 	bl	33e88 <sock_family_is_valid>
   33fae:	b930      	cbnz	r0, 33fbe <nrf_socket+0x1e>
   33fb0:	206a      	movs	r0, #106	; 0x6a
   33fb2:	f7e7 fcd3 	bl	1b95c <nrf_modem_os_errno_set>
   33fb6:	f04f 30ff 	mov.w	r0, #4294967295
   33fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33fbe:	4630      	mov	r0, r6
   33fc0:	f7f2 fd90 	bl	26ae4 <sock_proto_is_valid>
   33fc4:	b908      	cbnz	r0, 33fca <nrf_socket+0x2a>
   33fc6:	207b      	movs	r0, #123	; 0x7b
   33fc8:	e7f3      	b.n	33fb2 <nrf_socket+0x12>
   33fca:	4638      	mov	r0, r7
   33fcc:	f7ff ff62 	bl	33e94 <sock_type_is_valid>
   33fd0:	b908      	cbnz	r0, 33fd6 <nrf_socket+0x36>
   33fd2:	206b      	movs	r0, #107	; 0x6b
   33fd4:	e7ed      	b.n	33fb2 <nrf_socket+0x12>
   33fd6:	4639      	mov	r1, r7
   33fd8:	4630      	mov	r0, r6
   33fda:	f7ff ff61 	bl	33ea0 <sock_proto_supports_type>
   33fde:	2800      	cmp	r0, #0
   33fe0:	d0f7      	beq.n	33fd2 <nrf_socket+0x32>
   33fe2:	f7f2 fcf5 	bl	269d0 <sock_open>
   33fe6:	4605      	mov	r5, r0
   33fe8:	b908      	cbnz	r0, 33fee <nrf_socket+0x4e>
   33fea:	2017      	movs	r0, #23
   33fec:	e7e1      	b.n	33fb2 <nrf_socket+0x12>
   33fee:	2000      	movs	r0, #0
   33ff0:	f7ff fdfa 	bl	33be8 <rpc_client_msg_alloc>
   33ff4:	4604      	mov	r4, r0
   33ff6:	b920      	cbnz	r0, 34002 <nrf_socket+0x62>
   33ff8:	6828      	ldr	r0, [r5, #0]
   33ffa:	f7f2 fd21 	bl	26a40 <_sock_close>
   33ffe:	2069      	movs	r0, #105	; 0x69
   34000:	e7d7      	b.n	33fb2 <nrf_socket+0x12>
   34002:	2300      	movs	r3, #0
   34004:	220c      	movs	r2, #12
   34006:	f04f 38ff 	mov.w	r8, #4294967295
   3400a:	7202      	strb	r2, [r0, #8]
   3400c:	7243      	strb	r3, [r0, #9]
   3400e:	7283      	strb	r3, [r0, #10]
   34010:	72c3      	strb	r3, [r0, #11]
   34012:	f880 8010 	strb.w	r8, [r0, #16]
   34016:	f880 8011 	strb.w	r8, [r0, #17]
   3401a:	f880 8012 	strb.w	r8, [r0, #18]
   3401e:	f880 8013 	strb.w	r8, [r0, #19]
   34022:	4648      	mov	r0, r9
   34024:	f7f3 fc50 	bl	278c8 <nrf_af_to_rpc_af>
   34028:	6160      	str	r0, [r4, #20]
   3402a:	4638      	mov	r0, r7
   3402c:	f000 fb8e 	bl	3474c <nrf_type_to_rpc_type>
   34030:	4601      	mov	r1, r0
   34032:	61a0      	str	r0, [r4, #24]
   34034:	4630      	mov	r0, r6
   34036:	f000 fb8a 	bl	3474e <nrf_proto_to_rpc_proto>
   3403a:	4621      	mov	r1, r4
   3403c:	61e0      	str	r0, [r4, #28]
   3403e:	f247 0001 	movw	r0, #28673	; 0x7001
   34042:	e9c5 9703 	strd	r9, r7, [r5, #12]
   34046:	616e      	str	r6, [r5, #20]
   34048:	f000 fbd8 	bl	347fc <req_forward>
   3404c:	4604      	mov	r4, r0
   3404e:	b120      	cbz	r0, 3405a <nrf_socket+0xba>
   34050:	4640      	mov	r0, r8
   34052:	f7f2 fcf5 	bl	26a40 <_sock_close>
   34056:	4620      	mov	r0, r4
   34058:	e7ab      	b.n	33fb2 <nrf_socket+0x12>
   3405a:	6828      	ldr	r0, [r5, #0]
   3405c:	e7ad      	b.n	33fba <nrf_socket+0x1a>

0003405e <nrf_connect>:
   3405e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34060:	4607      	mov	r7, r0
   34062:	460d      	mov	r5, r1
   34064:	4616      	mov	r6, r2
   34066:	f7f2 fcd9 	bl	26a1c <sock_find>
   3406a:	4604      	mov	r4, r0
   3406c:	b938      	cbnz	r0, 3407e <nrf_connect+0x20>
   3406e:	2009      	movs	r0, #9
   34070:	f7e7 fc74 	bl	1b95c <nrf_modem_os_errno_set>
   34074:	f04f 35ff 	mov.w	r5, #4294967295
   34078:	4628      	mov	r0, r5
   3407a:	b003      	add	sp, #12
   3407c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3407e:	f7ff fe8b 	bl	33d98 <sock_is_closed>
   34082:	b108      	cbz	r0, 34088 <nrf_connect+0x2a>
   34084:	69a0      	ldr	r0, [r4, #24]
   34086:	e7f3      	b.n	34070 <nrf_connect+0x12>
   34088:	4620      	mov	r0, r4
   3408a:	f7ff fe79 	bl	33d80 <sock_is_connected>
   3408e:	b108      	cbz	r0, 34094 <nrf_connect+0x36>
   34090:	207f      	movs	r0, #127	; 0x7f
   34092:	e7ed      	b.n	34070 <nrf_connect+0x12>
   34094:	4620      	mov	r0, r4
   34096:	f7ff fe6f 	bl	33d78 <sock_is_connecting>
   3409a:	b108      	cbz	r0, 340a0 <nrf_connect+0x42>
   3409c:	2078      	movs	r0, #120	; 0x78
   3409e:	e7e7      	b.n	34070 <nrf_connect+0x12>
   340a0:	b90d      	cbnz	r5, 340a6 <nrf_connect+0x48>
   340a2:	200e      	movs	r0, #14
   340a4:	e7e4      	b.n	34070 <nrf_connect+0x12>
   340a6:	4631      	mov	r1, r6
   340a8:	4628      	mov	r0, r5
   340aa:	f7ff ff13 	bl	33ed4 <sock_sockaddr_len_is_valid>
   340ae:	b908      	cbnz	r0, 340b4 <nrf_connect+0x56>
   340b0:	2016      	movs	r0, #22
   340b2:	e7dd      	b.n	34070 <nrf_connect+0x12>
   340b4:	4629      	mov	r1, r5
   340b6:	4620      	mov	r0, r4
   340b8:	f7ff ff20 	bl	33efc <sock_sockaddr_fam_is_valid>
   340bc:	b908      	cbnz	r0, 340c2 <nrf_connect+0x64>
   340be:	206a      	movs	r0, #106	; 0x6a
   340c0:	e7d6      	b.n	34070 <nrf_connect+0x12>
   340c2:	4620      	mov	r0, r4
   340c4:	f7ff fe64 	bl	33d90 <sock_is_nonblock>
   340c8:	4606      	mov	r6, r0
   340ca:	b118      	cbz	r0, 340d4 <nrf_connect+0x76>
   340cc:	6966      	ldr	r6, [r4, #20]
   340ce:	3e11      	subs	r6, #17
   340d0:	bf18      	it	ne
   340d2:	2601      	movne	r6, #1
   340d4:	2000      	movs	r0, #0
   340d6:	f7ff fd87 	bl	33be8 <rpc_client_msg_alloc>
   340da:	4602      	mov	r2, r0
   340dc:	b908      	cbnz	r0, 340e2 <nrf_connect+0x84>
   340de:	2069      	movs	r0, #105	; 0x69
   340e0:	e7c6      	b.n	34070 <nrf_connect+0x12>
   340e2:	2300      	movs	r3, #0
   340e4:	2114      	movs	r1, #20
   340e6:	6107      	str	r7, [r0, #16]
   340e8:	7201      	strb	r1, [r0, #8]
   340ea:	7243      	strb	r3, [r0, #9]
   340ec:	7283      	strb	r3, [r0, #10]
   340ee:	72c3      	strb	r3, [r0, #11]
   340f0:	6869      	ldr	r1, [r5, #4]
   340f2:	2901      	cmp	r1, #1
   340f4:	d00e      	beq.n	34114 <nrf_connect+0xb6>
   340f6:	2902      	cmp	r1, #2
   340f8:	d014      	beq.n	34124 <nrf_connect+0xc6>
   340fa:	7f23      	ldrb	r3, [r4, #28]
   340fc:	f247 0102 	movw	r1, #28674	; 0x7002
   34100:	f043 0304 	orr.w	r3, r3, #4
   34104:	7723      	strb	r3, [r4, #28]
   34106:	2004      	movs	r0, #4
   34108:	60d6      	str	r6, [r2, #12]
   3410a:	f7ff fd89 	bl	33c20 <rpc_client_msg_send>
   3410e:	b1ce      	cbz	r6, 34144 <nrf_connect+0xe6>
   34110:	2077      	movs	r0, #119	; 0x77
   34112:	e7ad      	b.n	34070 <nrf_connect+0x12>
   34114:	8929      	ldrh	r1, [r5, #8]
   34116:	75c3      	strb	r3, [r0, #23]
   34118:	8281      	strh	r1, [r0, #20]
   3411a:	2104      	movs	r1, #4
   3411c:	7581      	strb	r1, [r0, #22]
   3411e:	68eb      	ldr	r3, [r5, #12]
   34120:	6183      	str	r3, [r0, #24]
   34122:	e7ea      	b.n	340fa <nrf_connect+0x9c>
   34124:	8929      	ldrh	r1, [r5, #8]
   34126:	75c3      	strb	r3, [r0, #23]
   34128:	8281      	strh	r1, [r0, #20]
   3412a:	2110      	movs	r1, #16
   3412c:	186b      	adds	r3, r5, r1
   3412e:	7581      	strb	r1, [r0, #22]
   34130:	3520      	adds	r5, #32
   34132:	f100 0118 	add.w	r1, r0, #24
   34136:	f853 0b04 	ldr.w	r0, [r3], #4
   3413a:	42ab      	cmp	r3, r5
   3413c:	f841 0b04 	str.w	r0, [r1], #4
   34140:	d1f9      	bne.n	34136 <nrf_connect+0xd8>
   34142:	e7da      	b.n	340fa <nrf_connect+0x9c>
   34144:	4620      	mov	r0, r4
   34146:	f7ff fe8d 	bl	33e64 <sock_sndtimeo_ms_get>
   3414a:	9001      	str	r0, [sp, #4]
   3414c:	4620      	mov	r0, r4
   3414e:	f7ff fe13 	bl	33d78 <sock_is_connecting>
   34152:	b918      	cbnz	r0, 3415c <nrf_connect+0xfe>
   34154:	69a5      	ldr	r5, [r4, #24]
   34156:	b185      	cbz	r5, 3417a <nrf_connect+0x11c>
   34158:	4628      	mov	r0, r5
   3415a:	e789      	b.n	34070 <nrf_connect+0x12>
   3415c:	2002      	movs	r0, #2
   3415e:	a901      	add	r1, sp, #4
   34160:	f7e7 fb3a 	bl	1b7d8 <nrf_modem_os_timedwait>
   34164:	f110 0f0b 	cmn.w	r0, #11
   34168:	d005      	beq.n	34176 <nrf_connect+0x118>
   3416a:	2800      	cmp	r0, #0
   3416c:	d0ee      	beq.n	3414c <nrf_connect+0xee>
   3416e:	2800      	cmp	r0, #0
   34170:	bfb8      	it	lt
   34172:	4240      	neglt	r0, r0
   34174:	e77c      	b.n	34070 <nrf_connect+0x12>
   34176:	2074      	movs	r0, #116	; 0x74
   34178:	e77a      	b.n	34070 <nrf_connect+0x12>
   3417a:	4620      	mov	r0, r4
   3417c:	f7ff fdf0 	bl	33d60 <sock_proto_is_secure>
   34180:	2800      	cmp	r0, #0
   34182:	f43f af79 	beq.w	34078 <nrf_connect+0x1a>
   34186:	4620      	mov	r0, r4
   34188:	9901      	ldr	r1, [sp, #4]
   3418a:	f7f3 fb25 	bl	277d8 <tls_attach>
   3418e:	4605      	mov	r5, r0
   34190:	e772      	b.n	34078 <nrf_connect+0x1a>

00034192 <nrf_bind>:
   34192:	b538      	push	{r3, r4, r5, lr}
   34194:	4605      	mov	r5, r0
   34196:	460c      	mov	r4, r1
   34198:	f7f2 fc40 	bl	26a1c <sock_find>
   3419c:	b930      	cbnz	r0, 341ac <nrf_bind+0x1a>
   3419e:	2009      	movs	r0, #9
   341a0:	f7e7 fbdc 	bl	1b95c <nrf_modem_os_errno_set>
   341a4:	f04f 33ff 	mov.w	r3, #4294967295
   341a8:	4618      	mov	r0, r3
   341aa:	bd38      	pop	{r3, r4, r5, pc}
   341ac:	b90c      	cbnz	r4, 341b2 <nrf_bind+0x20>
   341ae:	200e      	movs	r0, #14
   341b0:	e7f6      	b.n	341a0 <nrf_bind+0xe>
   341b2:	4621      	mov	r1, r4
   341b4:	f7ff fea2 	bl	33efc <sock_sockaddr_fam_is_valid>
   341b8:	b908      	cbnz	r0, 341be <nrf_bind+0x2c>
   341ba:	206a      	movs	r0, #106	; 0x6a
   341bc:	e7f0      	b.n	341a0 <nrf_bind+0xe>
   341be:	2000      	movs	r0, #0
   341c0:	f7ff fd12 	bl	33be8 <rpc_client_msg_alloc>
   341c4:	4601      	mov	r1, r0
   341c6:	b908      	cbnz	r0, 341cc <nrf_bind+0x3a>
   341c8:	2069      	movs	r0, #105	; 0x69
   341ca:	e7e9      	b.n	341a0 <nrf_bind+0xe>
   341cc:	2300      	movs	r3, #0
   341ce:	2214      	movs	r2, #20
   341d0:	6105      	str	r5, [r0, #16]
   341d2:	7202      	strb	r2, [r0, #8]
   341d4:	7243      	strb	r3, [r0, #9]
   341d6:	7283      	strb	r3, [r0, #10]
   341d8:	72c3      	strb	r3, [r0, #11]
   341da:	6862      	ldr	r2, [r4, #4]
   341dc:	2a01      	cmp	r2, #1
   341de:	d009      	beq.n	341f4 <nrf_bind+0x62>
   341e0:	2a02      	cmp	r2, #2
   341e2:	d00f      	beq.n	34204 <nrf_bind+0x72>
   341e4:	f247 0005 	movw	r0, #28677	; 0x7005
   341e8:	f000 fb08 	bl	347fc <req_forward>
   341ec:	4603      	mov	r3, r0
   341ee:	2800      	cmp	r0, #0
   341f0:	d0da      	beq.n	341a8 <nrf_bind+0x16>
   341f2:	e7d5      	b.n	341a0 <nrf_bind+0xe>
   341f4:	8922      	ldrh	r2, [r4, #8]
   341f6:	75c3      	strb	r3, [r0, #23]
   341f8:	8282      	strh	r2, [r0, #20]
   341fa:	2204      	movs	r2, #4
   341fc:	7582      	strb	r2, [r0, #22]
   341fe:	68e3      	ldr	r3, [r4, #12]
   34200:	6183      	str	r3, [r0, #24]
   34202:	e7ef      	b.n	341e4 <nrf_bind+0x52>
   34204:	8922      	ldrh	r2, [r4, #8]
   34206:	75c3      	strb	r3, [r0, #23]
   34208:	8282      	strh	r2, [r0, #20]
   3420a:	2210      	movs	r2, #16
   3420c:	18a3      	adds	r3, r4, r2
   3420e:	7582      	strb	r2, [r0, #22]
   34210:	3420      	adds	r4, #32
   34212:	f100 0218 	add.w	r2, r0, #24
   34216:	f853 0b04 	ldr.w	r0, [r3], #4
   3421a:	42a3      	cmp	r3, r4
   3421c:	f842 0b04 	str.w	r0, [r2], #4
   34220:	d1f9      	bne.n	34216 <nrf_bind+0x84>
   34222:	e7df      	b.n	341e4 <nrf_bind+0x52>

00034224 <nrf_listen>:
   34224:	b538      	push	{r3, r4, r5, lr}
   34226:	4605      	mov	r5, r0
   34228:	460c      	mov	r4, r1
   3422a:	f7f2 fbf7 	bl	26a1c <sock_find>
   3422e:	b930      	cbnz	r0, 3423e <nrf_listen+0x1a>
   34230:	2009      	movs	r0, #9
   34232:	f7e7 fb93 	bl	1b95c <nrf_modem_os_errno_set>
   34236:	f04f 33ff 	mov.w	r3, #4294967295
   3423a:	4618      	mov	r0, r3
   3423c:	bd38      	pop	{r3, r4, r5, pc}
   3423e:	f7ff fd80 	bl	33d42 <sock_is_stream>
   34242:	b908      	cbnz	r0, 34248 <nrf_listen+0x24>
   34244:	205f      	movs	r0, #95	; 0x5f
   34246:	e7f4      	b.n	34232 <nrf_listen+0xe>
   34248:	2000      	movs	r0, #0
   3424a:	f7ff fccd 	bl	33be8 <rpc_client_msg_alloc>
   3424e:	4601      	mov	r1, r0
   34250:	b908      	cbnz	r0, 34256 <nrf_listen+0x32>
   34252:	2069      	movs	r0, #105	; 0x69
   34254:	e7ed      	b.n	34232 <nrf_listen+0xe>
   34256:	2300      	movs	r3, #0
   34258:	2204      	movs	r2, #4
   3425a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3425e:	7243      	strb	r3, [r0, #9]
   34260:	7283      	strb	r3, [r0, #10]
   34262:	72c3      	strb	r3, [r0, #11]
   34264:	6105      	str	r5, [r0, #16]
   34266:	7202      	strb	r2, [r0, #8]
   34268:	6144      	str	r4, [r0, #20]
   3426a:	f247 0008 	movw	r0, #28680	; 0x7008
   3426e:	f000 fac5 	bl	347fc <req_forward>
   34272:	4603      	mov	r3, r0
   34274:	2800      	cmp	r0, #0
   34276:	d0e0      	beq.n	3423a <nrf_listen+0x16>
   34278:	e7db      	b.n	34232 <nrf_listen+0xe>

0003427a <nrf_accept>:
   3427a:	2300      	movs	r3, #0
   3427c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34280:	b08d      	sub	sp, #52	; 0x34
   34282:	4606      	mov	r6, r0
   34284:	4688      	mov	r8, r1
   34286:	4614      	mov	r4, r2
   34288:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3428c:	f7f2 fbc6 	bl	26a1c <sock_find>
   34290:	4605      	mov	r5, r0
   34292:	b938      	cbnz	r0, 342a4 <nrf_accept+0x2a>
   34294:	2009      	movs	r0, #9
   34296:	f7e7 fb61 	bl	1b95c <nrf_modem_os_errno_set>
   3429a:	f04f 30ff 	mov.w	r0, #4294967295
   3429e:	b00d      	add	sp, #52	; 0x34
   342a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   342a4:	f1b8 0f00 	cmp.w	r8, #0
   342a8:	d002      	beq.n	342b0 <nrf_accept+0x36>
   342aa:	b91c      	cbnz	r4, 342b4 <nrf_accept+0x3a>
   342ac:	200e      	movs	r0, #14
   342ae:	e7f2      	b.n	34296 <nrf_accept+0x1c>
   342b0:	2c00      	cmp	r4, #0
   342b2:	d1fb      	bne.n	342ac <nrf_accept+0x32>
   342b4:	4628      	mov	r0, r5
   342b6:	f7ff fd44 	bl	33d42 <sock_is_stream>
   342ba:	b908      	cbnz	r0, 342c0 <nrf_accept+0x46>
   342bc:	205f      	movs	r0, #95	; 0x5f
   342be:	e7ea      	b.n	34296 <nrf_accept+0x1c>
   342c0:	4628      	mov	r0, r5
   342c2:	f7ff fd65 	bl	33d90 <sock_is_nonblock>
   342c6:	b128      	cbz	r0, 342d4 <nrf_accept+0x5a>
   342c8:	4628      	mov	r0, r5
   342ca:	f7ff fd96 	bl	33dfa <sock_can_accept>
   342ce:	b908      	cbnz	r0, 342d4 <nrf_accept+0x5a>
   342d0:	200b      	movs	r0, #11
   342d2:	e7e0      	b.n	34296 <nrf_accept+0x1c>
   342d4:	f7f2 fb7c 	bl	269d0 <sock_open>
   342d8:	4607      	mov	r7, r0
   342da:	b908      	cbnz	r0, 342e0 <nrf_accept+0x66>
   342dc:	2017      	movs	r0, #23
   342de:	e7da      	b.n	34296 <nrf_accept+0x1c>
   342e0:	2000      	movs	r0, #0
   342e2:	f7ff fc81 	bl	33be8 <rpc_client_msg_alloc>
   342e6:	4605      	mov	r5, r0
   342e8:	b920      	cbnz	r0, 342f4 <nrf_accept+0x7a>
   342ea:	6838      	ldr	r0, [r7, #0]
   342ec:	f7f2 fba8 	bl	26a40 <_sock_close>
   342f0:	2069      	movs	r0, #105	; 0x69
   342f2:	e7d0      	b.n	34296 <nrf_accept+0x1c>
   342f4:	6106      	str	r6, [r0, #16]
   342f6:	a901      	add	r1, sp, #4
   342f8:	9702      	str	r7, [sp, #8]
   342fa:	f000 faab 	bl	34854 <req_cookie_set>
   342fe:	4629      	mov	r1, r5
   34300:	f247 000c 	movw	r0, #28684	; 0x700c
   34304:	f000 fa7a 	bl	347fc <req_forward>
   34308:	4606      	mov	r6, r0
   3430a:	b120      	cbz	r0, 34316 <nrf_accept+0x9c>
   3430c:	6838      	ldr	r0, [r7, #0]
   3430e:	f7f2 fb97 	bl	26a40 <_sock_close>
   34312:	4630      	mov	r0, r6
   34314:	e7bf      	b.n	34296 <nrf_accept+0x1c>
   34316:	9d01      	ldr	r5, [sp, #4]
   34318:	f1b8 0f00 	cmp.w	r8, #0
   3431c:	d006      	beq.n	3432c <nrf_accept+0xb2>
   3431e:	b12c      	cbz	r4, 3432c <nrf_accept+0xb2>
   34320:	8beb      	ldrh	r3, [r5, #30]
   34322:	2b04      	cmp	r3, #4
   34324:	d007      	beq.n	34336 <nrf_accept+0xbc>
   34326:	2b10      	cmp	r3, #16
   34328:	d01e      	beq.n	34368 <nrf_accept+0xee>
   3432a:	6026      	str	r6, [r4, #0]
   3432c:	4628      	mov	r0, r5
   3432e:	f7ff fc7e 	bl	33c2e <rpc_client_msg_rx_free>
   34332:	6838      	ldr	r0, [r7, #0]
   34334:	e7b3      	b.n	3429e <nrf_accept+0x24>
   34336:	2310      	movs	r3, #16
   34338:	9003      	str	r0, [sp, #12]
   3433a:	f88d 300c 	strb.w	r3, [sp, #12]
   3433e:	2301      	movs	r3, #1
   34340:	6826      	ldr	r6, [r4, #0]
   34342:	9005      	str	r0, [sp, #20]
   34344:	2e10      	cmp	r6, #16
   34346:	bf28      	it	cs
   34348:	2610      	movcs	r6, #16
   3434a:	9304      	str	r3, [sp, #16]
   3434c:	7f2b      	ldrb	r3, [r5, #28]
   3434e:	7f6a      	ldrb	r2, [r5, #29]
   34350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34354:	f8ad 3014 	strh.w	r3, [sp, #20]
   34358:	6a2b      	ldr	r3, [r5, #32]
   3435a:	9306      	str	r3, [sp, #24]
   3435c:	4632      	mov	r2, r6
   3435e:	4640      	mov	r0, r8
   34360:	a903      	add	r1, sp, #12
   34362:	f000 fe43 	bl	34fec <memcpy>
   34366:	e7e0      	b.n	3432a <nrf_accept+0xb0>
   34368:	f04f 0924 	mov.w	r9, #36	; 0x24
   3436c:	4601      	mov	r1, r0
   3436e:	464a      	mov	r2, r9
   34370:	a803      	add	r0, sp, #12
   34372:	f000 fe5b 	bl	3502c <memset>
   34376:	2302      	movs	r3, #2
   34378:	f88d 900c 	strb.w	r9, [sp, #12]
   3437c:	9304      	str	r3, [sp, #16]
   3437e:	7f2b      	ldrb	r3, [r5, #28]
   34380:	7f6a      	ldrb	r2, [r5, #29]
   34382:	ae07      	add	r6, sp, #28
   34384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34388:	f8ad 3014 	strh.w	r3, [sp, #20]
   3438c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   34390:	f105 0320 	add.w	r3, r5, #32
   34394:	4632      	mov	r2, r6
   34396:	6818      	ldr	r0, [r3, #0]
   34398:	6859      	ldr	r1, [r3, #4]
   3439a:	3308      	adds	r3, #8
   3439c:	c203      	stmia	r2!, {r0, r1}
   3439e:	4563      	cmp	r3, ip
   343a0:	4616      	mov	r6, r2
   343a2:	d1f7      	bne.n	34394 <nrf_accept+0x11a>
   343a4:	6826      	ldr	r6, [r4, #0]
   343a6:	2e24      	cmp	r6, #36	; 0x24
   343a8:	bf28      	it	cs
   343aa:	2624      	movcs	r6, #36	; 0x24
   343ac:	e7d6      	b.n	3435c <nrf_accept+0xe2>

000343ae <nrf_recvfrom>:
   343ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   343b2:	b085      	sub	sp, #20
   343b4:	4690      	mov	r8, r2
   343b6:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   343ba:	461e      	mov	r6, r3
   343bc:	9101      	str	r1, [sp, #4]
   343be:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   343c2:	f7f2 fb2b 	bl	26a1c <sock_find>
   343c6:	4604      	mov	r4, r0
   343c8:	b940      	cbnz	r0, 343dc <nrf_recvfrom+0x2e>
   343ca:	2009      	movs	r0, #9
   343cc:	f7e7 fac6 	bl	1b95c <nrf_modem_os_errno_set>
   343d0:	f04f 39ff 	mov.w	r9, #4294967295
   343d4:	4648      	mov	r0, r9
   343d6:	b005      	add	sp, #20
   343d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343dc:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   343e0:	d001      	beq.n	343e6 <nrf_recvfrom+0x38>
   343e2:	205f      	movs	r0, #95	; 0x5f
   343e4:	e7f2      	b.n	343cc <nrf_recvfrom+0x1e>
   343e6:	f1bb 0f00 	cmp.w	fp, #0
   343ea:	d002      	beq.n	343f2 <nrf_recvfrom+0x44>
   343ec:	b91f      	cbnz	r7, 343f6 <nrf_recvfrom+0x48>
   343ee:	200e      	movs	r0, #14
   343f0:	e7ec      	b.n	343cc <nrf_recvfrom+0x1e>
   343f2:	2f00      	cmp	r7, #0
   343f4:	d1fb      	bne.n	343ee <nrf_recvfrom+0x40>
   343f6:	4620      	mov	r0, r4
   343f8:	f7ff fca3 	bl	33d42 <sock_is_stream>
   343fc:	b128      	cbz	r0, 3440a <nrf_recvfrom+0x5c>
   343fe:	4620      	mov	r0, r4
   34400:	f7ff fcbe 	bl	33d80 <sock_is_connected>
   34404:	b908      	cbnz	r0, 3440a <nrf_recvfrom+0x5c>
   34406:	2080      	movs	r0, #128	; 0x80
   34408:	e7e0      	b.n	343cc <nrf_recvfrom+0x1e>
   3440a:	f1ba 0f00 	cmp.w	sl, #0
   3440e:	d117      	bne.n	34440 <nrf_recvfrom+0x92>
   34410:	4620      	mov	r0, r4
   34412:	f7ff fcbd 	bl	33d90 <sock_is_nonblock>
   34416:	b9a8      	cbnz	r0, 34444 <nrf_recvfrom+0x96>
   34418:	f3c6 1580 	ubfx	r5, r6, #6, #1
   3441c:	4620      	mov	r0, r4
   3441e:	f7ff fd0f 	bl	33e40 <sock_rcvtimeo_ms_get>
   34422:	9003      	str	r0, [sp, #12]
   34424:	4620      	mov	r0, r4
   34426:	f7ff fcb7 	bl	33d98 <sock_is_closed>
   3442a:	b1b8      	cbz	r0, 3445c <nrf_recvfrom+0xae>
   3442c:	4620      	mov	r0, r4
   3442e:	f7ff fc63 	bl	33cf8 <sock_has_pkt>
   34432:	bb78      	cbnz	r0, 34494 <nrf_recvfrom+0xe6>
   34434:	4620      	mov	r0, r4
   34436:	f7ff fcc5 	bl	33dc4 <sock_has_error>
   3443a:	b1c0      	cbz	r0, 3446e <nrf_recvfrom+0xc0>
   3443c:	69a0      	ldr	r0, [r4, #24]
   3443e:	e7c5      	b.n	343cc <nrf_recvfrom+0x1e>
   34440:	2500      	movs	r5, #0
   34442:	e7eb      	b.n	3441c <nrf_recvfrom+0x6e>
   34444:	2501      	movs	r5, #1
   34446:	e7e9      	b.n	3441c <nrf_recvfrom+0x6e>
   34448:	2002      	movs	r0, #2
   3444a:	a903      	add	r1, sp, #12
   3444c:	f7e7 f9c4 	bl	1b7d8 <nrf_modem_os_timedwait>
   34450:	2800      	cmp	r0, #0
   34452:	d0e7      	beq.n	34424 <nrf_recvfrom+0x76>
   34454:	2800      	cmp	r0, #0
   34456:	bfb8      	it	lt
   34458:	4240      	neglt	r0, r0
   3445a:	e7b7      	b.n	343cc <nrf_recvfrom+0x1e>
   3445c:	4620      	mov	r0, r4
   3445e:	f7ff fc4b 	bl	33cf8 <sock_has_pkt>
   34462:	2800      	cmp	r0, #0
   34464:	d1e2      	bne.n	3442c <nrf_recvfrom+0x7e>
   34466:	2d00      	cmp	r5, #0
   34468:	d0ee      	beq.n	34448 <nrf_recvfrom+0x9a>
   3446a:	200b      	movs	r0, #11
   3446c:	e7ae      	b.n	343cc <nrf_recvfrom+0x1e>
   3446e:	4620      	mov	r0, r4
   34470:	f7ff fc9a 	bl	33da8 <sock_is_eof>
   34474:	2800      	cmp	r0, #0
   34476:	d1ad      	bne.n	343d4 <nrf_recvfrom+0x26>
   34478:	4620      	mov	r0, r4
   3447a:	f7ff fc91 	bl	33da0 <sock_is_local_closed>
   3447e:	b148      	cbz	r0, 34494 <nrf_recvfrom+0xe6>
   34480:	4620      	mov	r0, r4
   34482:	f7ff fc5e 	bl	33d42 <sock_is_stream>
   34486:	2800      	cmp	r0, #0
   34488:	d1a4      	bne.n	343d4 <nrf_recvfrom+0x26>
   3448a:	4620      	mov	r0, r4
   3448c:	f7ff fc5e 	bl	33d4c <sock_is_datagram>
   34490:	2800      	cmp	r0, #0
   34492:	d19a      	bne.n	343ca <nrf_recvfrom+0x1c>
   34494:	4620      	mov	r0, r4
   34496:	f7ff fc52 	bl	33d3e <sock_pkt_peek_head>
   3449a:	4605      	mov	r5, r0
   3449c:	f1bb 0f00 	cmp.w	fp, #0
   344a0:	d00a      	beq.n	344b8 <nrf_recvfrom+0x10a>
   344a2:	68c1      	ldr	r1, [r0, #12]
   344a4:	b369      	cbz	r1, 34502 <nrf_recvfrom+0x154>
   344a6:	780a      	ldrb	r2, [r1, #0]
   344a8:	683b      	ldr	r3, [r7, #0]
   344aa:	4658      	mov	r0, fp
   344ac:	429a      	cmp	r2, r3
   344ae:	bf28      	it	cs
   344b0:	461a      	movcs	r2, r3
   344b2:	603a      	str	r2, [r7, #0]
   344b4:	f000 fd9a 	bl	34fec <memcpy>
   344b8:	f006 0602 	and.w	r6, r6, #2
   344bc:	4628      	mov	r0, r5
   344be:	f7ff fd3a 	bl	33f36 <pkt_bytes_left>
   344c2:	4540      	cmp	r0, r8
   344c4:	d81f      	bhi.n	34506 <nrf_recvfrom+0x158>
   344c6:	4628      	mov	r0, r5
   344c8:	f7ff fd35 	bl	33f36 <pkt_bytes_left>
   344cc:	4607      	mov	r7, r0
   344ce:	2f00      	cmp	r7, #0
   344d0:	d080      	beq.n	343d4 <nrf_recvfrom+0x26>
   344d2:	9b01      	ldr	r3, [sp, #4]
   344d4:	4628      	mov	r0, r5
   344d6:	eb03 0b09 	add.w	fp, r3, r9
   344da:	f7ff fd28 	bl	33f2e <pkt_bytes_get>
   344de:	463a      	mov	r2, r7
   344e0:	4601      	mov	r1, r0
   344e2:	4658      	mov	r0, fp
   344e4:	f000 fd82 	bl	34fec <memcpy>
   344e8:	4620      	mov	r0, r4
   344ea:	44b9      	add	r9, r7
   344ec:	f7ff fc2e 	bl	33d4c <sock_is_datagram>
   344f0:	b158      	cbz	r0, 3450a <nrf_recvfrom+0x15c>
   344f2:	2e00      	cmp	r6, #0
   344f4:	f47f af6e 	bne.w	343d4 <nrf_recvfrom+0x26>
   344f8:	4629      	mov	r1, r5
   344fa:	4620      	mov	r0, r4
   344fc:	f7ff fc0b 	bl	33d16 <sock_pkt_remove>
   34500:	e768      	b.n	343d4 <nrf_recvfrom+0x26>
   34502:	6039      	str	r1, [r7, #0]
   34504:	e7d8      	b.n	344b8 <nrf_recvfrom+0x10a>
   34506:	4647      	mov	r7, r8
   34508:	e7e1      	b.n	344ce <nrf_recvfrom+0x120>
   3450a:	4620      	mov	r0, r4
   3450c:	f7ff fc23 	bl	33d56 <sock_is_raw>
   34510:	2800      	cmp	r0, #0
   34512:	d1ee      	bne.n	344f2 <nrf_recvfrom+0x144>
   34514:	b956      	cbnz	r6, 3452c <nrf_recvfrom+0x17e>
   34516:	896b      	ldrh	r3, [r5, #10]
   34518:	4628      	mov	r0, r5
   3451a:	443b      	add	r3, r7
   3451c:	816b      	strh	r3, [r5, #10]
   3451e:	f7ff fd0a 	bl	33f36 <pkt_bytes_left>
   34522:	b918      	cbnz	r0, 3452c <nrf_recvfrom+0x17e>
   34524:	4629      	mov	r1, r5
   34526:	4620      	mov	r0, r4
   34528:	f7ff fbf5 	bl	33d16 <sock_pkt_remove>
   3452c:	45b8      	cmp	r8, r7
   3452e:	f43f af51 	beq.w	343d4 <nrf_recvfrom+0x26>
   34532:	f1ba 0f00 	cmp.w	sl, #0
   34536:	d10a      	bne.n	3454e <nrf_recvfrom+0x1a0>
   34538:	b976      	cbnz	r6, 34558 <nrf_recvfrom+0x1aa>
   3453a:	4620      	mov	r0, r4
   3453c:	f7ff fbff 	bl	33d3e <sock_pkt_peek_head>
   34540:	e00d      	b.n	3455e <nrf_recvfrom+0x1b0>
   34542:	4620      	mov	r0, r4
   34544:	f7ff fc28 	bl	33d98 <sock_is_closed>
   34548:	2800      	cmp	r0, #0
   3454a:	f47f af43 	bne.w	343d4 <nrf_recvfrom+0x26>
   3454e:	b16e      	cbz	r6, 3456c <nrf_recvfrom+0x1be>
   34550:	4628      	mov	r0, r5
   34552:	f7ff fce3 	bl	33f1c <pkt_has_next>
   34556:	b170      	cbz	r0, 34576 <nrf_recvfrom+0x1c8>
   34558:	4628      	mov	r0, r5
   3455a:	f7ff fce5 	bl	33f28 <pkt_peek_next>
   3455e:	4605      	mov	r5, r0
   34560:	2800      	cmp	r0, #0
   34562:	f43f af37 	beq.w	343d4 <nrf_recvfrom+0x26>
   34566:	eba8 0807 	sub.w	r8, r8, r7
   3456a:	e7a7      	b.n	344bc <nrf_recvfrom+0x10e>
   3456c:	4620      	mov	r0, r4
   3456e:	f7ff fbc3 	bl	33cf8 <sock_has_pkt>
   34572:	2800      	cmp	r0, #0
   34574:	d1e1      	bne.n	3453a <nrf_recvfrom+0x18c>
   34576:	2002      	movs	r0, #2
   34578:	a903      	add	r1, sp, #12
   3457a:	f7e7 f92d 	bl	1b7d8 <nrf_modem_os_timedwait>
   3457e:	2800      	cmp	r0, #0
   34580:	d0df      	beq.n	34542 <nrf_recvfrom+0x194>
   34582:	f1b9 0f00 	cmp.w	r9, #0
   34586:	f47f af25 	bne.w	343d4 <nrf_recvfrom+0x26>
   3458a:	e763      	b.n	34454 <nrf_recvfrom+0xa6>

0003458c <rpc_ip_deinit>:
   3458c:	b508      	push	{r3, lr}
   3458e:	f7f2 fa6d 	bl	26a6c <sock_shutdown>
   34592:	2000      	movs	r0, #0
   34594:	bd08      	pop	{r3, pc}

00034596 <tls_setopt_role>:
   34596:	b508      	push	{r3, lr}
   34598:	b109      	cbz	r1, 3459e <tls_setopt_role+0x8>
   3459a:	2a04      	cmp	r2, #4
   3459c:	d005      	beq.n	345aa <tls_setopt_role+0x14>
   3459e:	2016      	movs	r0, #22
   345a0:	f7e7 f9dc 	bl	1b95c <nrf_modem_os_errno_set>
   345a4:	f04f 30ff 	mov.w	r0, #4294967295
   345a8:	e006      	b.n	345b8 <tls_setopt_role+0x22>
   345aa:	780b      	ldrb	r3, [r1, #0]
   345ac:	b12b      	cbz	r3, 345ba <tls_setopt_role+0x24>
   345ae:	2b01      	cmp	r3, #1
   345b0:	d1f5      	bne.n	3459e <tls_setopt_role+0x8>
   345b2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   345b6:	2000      	movs	r0, #0
   345b8:	bd08      	pop	{r3, pc}
   345ba:	2302      	movs	r3, #2
   345bc:	e7f9      	b.n	345b2 <tls_setopt_role+0x1c>

000345be <tls_setopt_taglist>:
   345be:	b510      	push	{r4, lr}
   345c0:	1e54      	subs	r4, r2, #1
   345c2:	2c1b      	cmp	r4, #27
   345c4:	d802      	bhi.n	345cc <tls_setopt_taglist+0xe>
   345c6:	f012 0403 	ands.w	r4, r2, #3
   345ca:	d005      	beq.n	345d8 <tls_setopt_taglist+0x1a>
   345cc:	2016      	movs	r0, #22
   345ce:	f7e7 f9c5 	bl	1b95c <nrf_modem_os_errno_set>
   345d2:	f04f 30ff 	mov.w	r0, #4294967295
   345d6:	bd10      	pop	{r4, pc}
   345d8:	0893      	lsrs	r3, r2, #2
   345da:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   345de:	3048      	adds	r0, #72	; 0x48
   345e0:	f000 fd04 	bl	34fec <memcpy>
   345e4:	4620      	mov	r0, r4
   345e6:	e7f6      	b.n	345d6 <tls_setopt_taglist+0x18>

000345e8 <tls_setopt_sess_cache>:
   345e8:	b508      	push	{r3, lr}
   345ea:	b109      	cbz	r1, 345f0 <tls_setopt_sess_cache+0x8>
   345ec:	2a04      	cmp	r2, #4
   345ee:	d005      	beq.n	345fc <tls_setopt_sess_cache+0x14>
   345f0:	2016      	movs	r0, #22
   345f2:	f7e7 f9b3 	bl	1b95c <nrf_modem_os_errno_set>
   345f6:	f04f 30ff 	mov.w	r0, #4294967295
   345fa:	bd08      	pop	{r3, pc}
   345fc:	780b      	ldrb	r3, [r1, #0]
   345fe:	3b00      	subs	r3, #0
   34600:	bf18      	it	ne
   34602:	2301      	movne	r3, #1
   34604:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   34608:	2000      	movs	r0, #0
   3460a:	e7f6      	b.n	345fa <tls_setopt_sess_cache+0x12>

0003460c <tls_setopt_peer_verify>:
   3460c:	b508      	push	{r3, lr}
   3460e:	b109      	cbz	r1, 34614 <tls_setopt_peer_verify+0x8>
   34610:	2a04      	cmp	r2, #4
   34612:	d005      	beq.n	34620 <tls_setopt_peer_verify+0x14>
   34614:	2016      	movs	r0, #22
   34616:	f7e7 f9a1 	bl	1b95c <nrf_modem_os_errno_set>
   3461a:	f04f 30ff 	mov.w	r0, #4294967295
   3461e:	bd08      	pop	{r3, pc}
   34620:	680b      	ldr	r3, [r1, #0]
   34622:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   34626:	2000      	movs	r0, #0
   34628:	e7f9      	b.n	3461e <tls_setopt_peer_verify+0x12>

0003462a <tls_setopt_hostname>:
   3462a:	b570      	push	{r4, r5, r6, lr}
   3462c:	4605      	mov	r5, r0
   3462e:	4614      	mov	r4, r2
   34630:	460e      	mov	r6, r1
   34632:	b931      	cbnz	r1, 34642 <tls_setopt_hostname+0x18>
   34634:	b192      	cbz	r2, 3465c <tls_setopt_hostname+0x32>
   34636:	2016      	movs	r0, #22
   34638:	f7e7 f990 	bl	1b95c <nrf_modem_os_errno_set>
   3463c:	f04f 30ff 	mov.w	r0, #4294967295
   34640:	bd70      	pop	{r4, r5, r6, pc}
   34642:	2a00      	cmp	r2, #0
   34644:	d0f7      	beq.n	34636 <tls_setopt_hostname+0xc>
   34646:	6c00      	ldr	r0, [r0, #64]	; 0x40
   34648:	b108      	cbz	r0, 3464e <tls_setopt_hostname+0x24>
   3464a:	f7e7 fa61 	bl	1bb10 <nrf_modem_os_free>
   3464e:	1c60      	adds	r0, r4, #1
   34650:	f7e7 fa56 	bl	1bb00 <nrf_modem_os_alloc>
   34654:	6428      	str	r0, [r5, #64]	; 0x40
   34656:	b938      	cbnz	r0, 34668 <tls_setopt_hostname+0x3e>
   34658:	2069      	movs	r0, #105	; 0x69
   3465a:	e7ed      	b.n	34638 <tls_setopt_hostname+0xe>
   3465c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   3465e:	b108      	cbz	r0, 34664 <tls_setopt_hostname+0x3a>
   34660:	f7e7 fa56 	bl	1bb10 <nrf_modem_os_free>
   34664:	2000      	movs	r0, #0
   34666:	e7eb      	b.n	34640 <tls_setopt_hostname+0x16>
   34668:	4622      	mov	r2, r4
   3466a:	4631      	mov	r1, r6
   3466c:	f000 fcbe 	bl	34fec <memcpy>
   34670:	2200      	movs	r2, #0
   34672:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   34674:	551a      	strb	r2, [r3, r4]
   34676:	e7f5      	b.n	34664 <tls_setopt_hostname+0x3a>

00034678 <nrf_poll_one>:
   34678:	b538      	push	{r3, r4, r5, lr}
   3467a:	4604      	mov	r4, r0
   3467c:	6800      	ldr	r0, [r0, #0]
   3467e:	f7f2 f9cd 	bl	26a1c <sock_find>
   34682:	4605      	mov	r5, r0
   34684:	b928      	cbnz	r0, 34692 <nrf_poll_one+0x1a>
   34686:	2001      	movs	r0, #1
   34688:	88e3      	ldrh	r3, [r4, #6]
   3468a:	f043 0320 	orr.w	r3, r3, #32
   3468e:	80e3      	strh	r3, [r4, #6]
   34690:	bd38      	pop	{r3, r4, r5, pc}
   34692:	f7ff fb85 	bl	33da0 <sock_is_local_closed>
   34696:	2800      	cmp	r0, #0
   34698:	d1f5      	bne.n	34686 <nrf_poll_one+0xe>
   3469a:	4628      	mov	r0, r5
   3469c:	f7ff fb92 	bl	33dc4 <sock_has_error>
   346a0:	b1f8      	cbz	r0, 346e2 <nrf_poll_one+0x6a>
   346a2:	88e3      	ldrh	r3, [r4, #6]
   346a4:	f043 0308 	orr.w	r3, r3, #8
   346a8:	80e3      	strh	r3, [r4, #6]
   346aa:	88a3      	ldrh	r3, [r4, #4]
   346ac:	07da      	lsls	r2, r3, #31
   346ae:	d507      	bpl.n	346c0 <nrf_poll_one+0x48>
   346b0:	4628      	mov	r0, r5
   346b2:	f7ff fb9d 	bl	33df0 <sock_can_read>
   346b6:	b1e8      	cbz	r0, 346f4 <nrf_poll_one+0x7c>
   346b8:	88e3      	ldrh	r3, [r4, #6]
   346ba:	f043 0301 	orr.w	r3, r3, #1
   346be:	80e3      	strh	r3, [r4, #6]
   346c0:	88a3      	ldrh	r3, [r4, #4]
   346c2:	075b      	lsls	r3, r3, #29
   346c4:	d507      	bpl.n	346d6 <nrf_poll_one+0x5e>
   346c6:	4628      	mov	r0, r5
   346c8:	f7ff fb9c 	bl	33e04 <sock_can_send>
   346cc:	b118      	cbz	r0, 346d6 <nrf_poll_one+0x5e>
   346ce:	88e3      	ldrh	r3, [r4, #6]
   346d0:	f043 0304 	orr.w	r3, r3, #4
   346d4:	80e3      	strh	r3, [r4, #6]
   346d6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   346da:	3800      	subs	r0, #0
   346dc:	bf18      	it	ne
   346de:	2001      	movne	r0, #1
   346e0:	e7d6      	b.n	34690 <nrf_poll_one+0x18>
   346e2:	4628      	mov	r0, r5
   346e4:	f7ff fb60 	bl	33da8 <sock_is_eof>
   346e8:	2800      	cmp	r0, #0
   346ea:	d0de      	beq.n	346aa <nrf_poll_one+0x32>
   346ec:	88e3      	ldrh	r3, [r4, #6]
   346ee:	f043 0310 	orr.w	r3, r3, #16
   346f2:	e7d9      	b.n	346a8 <nrf_poll_one+0x30>
   346f4:	4628      	mov	r0, r5
   346f6:	f7ff fb80 	bl	33dfa <sock_can_accept>
   346fa:	2800      	cmp	r0, #0
   346fc:	d1dc      	bne.n	346b8 <nrf_poll_one+0x40>
   346fe:	4628      	mov	r0, r5
   34700:	f7ff fb52 	bl	33da8 <sock_is_eof>
   34704:	2800      	cmp	r0, #0
   34706:	d1d7      	bne.n	346b8 <nrf_poll_one+0x40>
   34708:	e7da      	b.n	346c0 <nrf_poll_one+0x48>

0003470a <nrf_fcntl>:
   3470a:	b538      	push	{r3, r4, r5, lr}
   3470c:	460d      	mov	r5, r1
   3470e:	4614      	mov	r4, r2
   34710:	f7f2 f984 	bl	26a1c <sock_find>
   34714:	b928      	cbnz	r0, 34722 <nrf_fcntl+0x18>
   34716:	2009      	movs	r0, #9
   34718:	f7e7 f920 	bl	1b95c <nrf_modem_os_errno_set>
   3471c:	f04f 30ff 	mov.w	r0, #4294967295
   34720:	e006      	b.n	34730 <nrf_fcntl+0x26>
   34722:	2d03      	cmp	r5, #3
   34724:	d003      	beq.n	3472e <nrf_fcntl+0x24>
   34726:	2d04      	cmp	r5, #4
   34728:	d003      	beq.n	34732 <nrf_fcntl+0x28>
   3472a:	2016      	movs	r0, #22
   3472c:	e7f4      	b.n	34718 <nrf_fcntl+0xe>
   3472e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   34730:	bd38      	pop	{r3, r4, r5, pc}
   34732:	2c01      	cmp	r4, #1
   34734:	d8f9      	bhi.n	3472a <nrf_fcntl+0x20>
   34736:	63c4      	str	r4, [r0, #60]	; 0x3c
   34738:	2000      	movs	r0, #0
   3473a:	e7f9      	b.n	34730 <nrf_fcntl+0x26>

0003473c <rpc_af_to_nrf_af>:
   3473c:	1f43      	subs	r3, r0, #5
   3473e:	2b00      	cmp	r3, #0
   34740:	d803      	bhi.n	3474a <rpc_af_to_nrf_af+0xe>
   34742:	e8df f003 	tbb	[pc, r3]
   34746:	01          	.byte	0x01
   34747:	00          	.byte	0x00
   34748:	2003      	movs	r0, #3
   3474a:	4770      	bx	lr

0003474c <nrf_type_to_rpc_type>:
   3474c:	4770      	bx	lr

0003474e <nrf_proto_to_rpc_proto>:
   3474e:	2829      	cmp	r0, #41	; 0x29
   34750:	d015      	beq.n	3477e <nrf_proto_to_rpc_proto+0x30>
   34752:	dc05      	bgt.n	34760 <nrf_proto_to_rpc_proto+0x12>
   34754:	2806      	cmp	r0, #6
   34756:	d014      	beq.n	34782 <nrf_proto_to_rpc_proto+0x34>
   34758:	2811      	cmp	r0, #17
   3475a:	d014      	beq.n	34786 <nrf_proto_to_rpc_proto+0x38>
   3475c:	b148      	cbz	r0, 34772 <nrf_proto_to_rpc_proto+0x24>
   3475e:	4770      	bx	lr
   34760:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   34764:	d00d      	beq.n	34782 <nrf_proto_to_rpc_proto+0x34>
   34766:	f240 1311 	movw	r3, #273	; 0x111
   3476a:	4298      	cmp	r0, r3
   3476c:	d00b      	beq.n	34786 <nrf_proto_to_rpc_proto+0x38>
   3476e:	28ff      	cmp	r0, #255	; 0xff
   34770:	d10c      	bne.n	3478c <nrf_proto_to_rpc_proto+0x3e>
   34772:	2901      	cmp	r1, #1
   34774:	d009      	beq.n	3478a <nrf_proto_to_rpc_proto+0x3c>
   34776:	2902      	cmp	r1, #2
   34778:	bf08      	it	eq
   3477a:	2002      	moveq	r0, #2
   3477c:	4770      	bx	lr
   3477e:	2006      	movs	r0, #6
   34780:	4770      	bx	lr
   34782:	2001      	movs	r0, #1
   34784:	4770      	bx	lr
   34786:	2002      	movs	r0, #2
   34788:	4770      	bx	lr
   3478a:	4608      	mov	r0, r1
   3478c:	4770      	bx	lr

0003478e <nrf_sol_to_rpc_sol>:
   3478e:	2829      	cmp	r0, #41	; 0x29
   34790:	d011      	beq.n	347b6 <nrf_sol_to_rpc_sol+0x28>
   34792:	dc0a      	bgt.n	347aa <nrf_sol_to_rpc_sol+0x1c>
   34794:	2801      	cmp	r0, #1
   34796:	d010      	beq.n	347ba <nrf_sol_to_rpc_sol+0x2c>
   34798:	2806      	cmp	r0, #6
   3479a:	d010      	beq.n	347be <nrf_sol_to_rpc_sol+0x30>
   3479c:	2800      	cmp	r0, #0
   3479e:	bf08      	it	eq
   347a0:	2004      	moveq	r0, #4
   347a2:	bf18      	it	ne
   347a4:	f04f 30ff 	movne.w	r0, #4294967295
   347a8:	4770      	bx	lr
   347aa:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   347ae:	d008      	beq.n	347c2 <nrf_sol_to_rpc_sol+0x34>
   347b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   347b4:	e7f5      	b.n	347a2 <nrf_sol_to_rpc_sol+0x14>
   347b6:	2006      	movs	r0, #6
   347b8:	4770      	bx	lr
   347ba:	2008      	movs	r0, #8
   347bc:	4770      	bx	lr
   347be:	2001      	movs	r0, #1
   347c0:	4770      	bx	lr
   347c2:	f44f 7080 	mov.w	r0, #256	; 0x100
   347c6:	4770      	bx	lr

000347c8 <rpc_error_to_nrf_gai_errno>:
   347c8:	b508      	push	{r3, lr}
   347ca:	1f03      	subs	r3, r0, #4
   347cc:	2b09      	cmp	r3, #9
   347ce:	d80f      	bhi.n	347f0 <rpc_error_to_nrf_gai_errno+0x28>
   347d0:	e8df f003 	tbb	[pc, r3]
   347d4:	0e051108 	.word	0x0e051108
   347d8:	0e0e0e0e 	.word	0x0e0e0e0e
   347dc:	050e      	.short	0x050e
   347de:	f06f 0001 	mvn.w	r0, #1
   347e2:	bd08      	pop	{r3, pc}
   347e4:	2073      	movs	r0, #115	; 0x73
   347e6:	f7e7 f8b9 	bl	1b95c <nrf_modem_os_errno_set>
   347ea:	f06f 000a 	mvn.w	r0, #10
   347ee:	e7f8      	b.n	347e2 <rpc_error_to_nrf_gai_errno+0x1a>
   347f0:	f7f3 f87e 	bl	278f0 <rpc_error_to_nrf_errno>
   347f4:	e7f7      	b.n	347e6 <rpc_error_to_nrf_gai_errno+0x1e>
   347f6:	f06f 0063 	mvn.w	r0, #99	; 0x63
   347fa:	e7f2      	b.n	347e2 <rpc_error_to_nrf_gai_errno+0x1a>

000347fc <req_forward>:
   347fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   347fe:	2300      	movs	r3, #0
   34800:	460a      	mov	r2, r1
   34802:	f04f 31ff 	mov.w	r1, #4294967295
   34806:	9303      	str	r3, [sp, #12]
   34808:	68d6      	ldr	r6, [r2, #12]
   3480a:	ad02      	add	r5, sp, #8
   3480c:	9302      	str	r3, [sp, #8]
   3480e:	9101      	str	r1, [sp, #4]
   34810:	b18e      	cbz	r6, 34836 <req_forward+0x3a>
   34812:	4635      	mov	r5, r6
   34814:	b281      	uxth	r1, r0
   34816:	602b      	str	r3, [r5, #0]
   34818:	2004      	movs	r0, #4
   3481a:	f7ff fa01 	bl	33c20 <rpc_client_msg_send>
   3481e:	682b      	ldr	r3, [r5, #0]
   34820:	b15b      	cbz	r3, 3483a <req_forward+0x3e>
   34822:	6958      	ldr	r0, [r3, #20]
   34824:	f7f3 f864 	bl	278f0 <rpc_error_to_nrf_errno>
   34828:	4604      	mov	r4, r0
   3482a:	b106      	cbz	r6, 3482e <req_forward+0x32>
   3482c:	b178      	cbz	r0, 3484e <req_forward+0x52>
   3482e:	6828      	ldr	r0, [r5, #0]
   34830:	f7ff f9fd 	bl	33c2e <rpc_client_msg_rx_free>
   34834:	e00b      	b.n	3484e <req_forward+0x52>
   34836:	60d5      	str	r5, [r2, #12]
   34838:	e7ec      	b.n	34814 <req_forward+0x18>
   3483a:	2002      	movs	r0, #2
   3483c:	a901      	add	r1, sp, #4
   3483e:	f7e6 ffcb 	bl	1b7d8 <nrf_modem_os_timedwait>
   34842:	2800      	cmp	r0, #0
   34844:	d0eb      	beq.n	3481e <req_forward+0x22>
   34846:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   3484a:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   3484e:	4620      	mov	r0, r4
   34850:	b004      	add	sp, #16
   34852:	bd70      	pop	{r4, r5, r6, pc}

00034854 <req_cookie_set>:
   34854:	60c1      	str	r1, [r0, #12]
   34856:	4770      	bx	lr

00034858 <res_cookie_get>:
   34858:	68c0      	ldr	r0, [r0, #12]
   3485a:	4770      	bx	lr

0003485c <res_forward>:
   3485c:	68c3      	ldr	r3, [r0, #12]
   3485e:	6018      	str	r0, [r3, #0]
   34860:	2001      	movs	r0, #1
   34862:	4770      	bx	lr

00034864 <gnss_msg_alloc_and_set_common>:
   34864:	b538      	push	{r3, r4, r5, lr}
   34866:	4605      	mov	r5, r0
   34868:	f7ff f9be 	bl	33be8 <rpc_client_msg_alloc>
   3486c:	4604      	mov	r4, r0
   3486e:	b190      	cbz	r0, 34896 <gnss_msg_alloc_and_set_common+0x32>
   34870:	6842      	ldr	r2, [r0, #4]
   34872:	2100      	movs	r1, #0
   34874:	6800      	ldr	r0, [r0, #0]
   34876:	f000 fbd9 	bl	3502c <memset>
   3487a:	2300      	movs	r3, #0
   3487c:	7223      	strb	r3, [r4, #8]
   3487e:	7263      	strb	r3, [r4, #9]
   34880:	72a3      	strb	r3, [r4, #10]
   34882:	72e3      	strb	r3, [r4, #11]
   34884:	2343      	movs	r3, #67	; 0x43
   34886:	7323      	strb	r3, [r4, #12]
   34888:	2354      	movs	r3, #84	; 0x54
   3488a:	7363      	strb	r3, [r4, #13]
   3488c:	2376      	movs	r3, #118	; 0x76
   3488e:	73a3      	strb	r3, [r4, #14]
   34890:	2349      	movs	r3, #73	; 0x49
   34892:	6065      	str	r5, [r4, #4]
   34894:	73e3      	strb	r3, [r4, #15]
   34896:	4620      	mov	r0, r4
   34898:	bd38      	pop	{r3, r4, r5, pc}

0003489a <rpc_gnss_serialize_utc>:
   3489a:	b1d8      	cbz	r0, 348d4 <rpc_gnss_serialize_utc+0x3a>
   3489c:	b1d1      	cbz	r1, 348d4 <rpc_gnss_serialize_utc+0x3a>
   3489e:	2301      	movs	r3, #1
   348a0:	700b      	strb	r3, [r1, #0]
   348a2:	2300      	movs	r3, #0
   348a4:	704b      	strb	r3, [r1, #1]
   348a6:	6843      	ldr	r3, [r0, #4]
   348a8:	f8c1 3006 	str.w	r3, [r1, #6]
   348ac:	6803      	ldr	r3, [r0, #0]
   348ae:	f8c1 3002 	str.w	r3, [r1, #2]
   348b2:	f990 300a 	ldrsb.w	r3, [r0, #10]
   348b6:	730b      	strb	r3, [r1, #12]
   348b8:	f990 300d 	ldrsb.w	r3, [r0, #13]
   348bc:	73cb      	strb	r3, [r1, #15]
   348be:	f990 300c 	ldrsb.w	r3, [r0, #12]
   348c2:	738b      	strb	r3, [r1, #14]
   348c4:	7a03      	ldrb	r3, [r0, #8]
   348c6:	728b      	strb	r3, [r1, #10]
   348c8:	7ac3      	ldrb	r3, [r0, #11]
   348ca:	734b      	strb	r3, [r1, #13]
   348cc:	7a43      	ldrb	r3, [r0, #9]
   348ce:	2010      	movs	r0, #16
   348d0:	72cb      	strb	r3, [r1, #11]
   348d2:	4770      	bx	lr
   348d4:	f04f 30ff 	mov.w	r0, #4294967295
   348d8:	4770      	bx	lr

000348da <rpc_gnss_serialize_ephe>:
   348da:	2800      	cmp	r0, #0
   348dc:	d04b      	beq.n	34976 <rpc_gnss_serialize_ephe+0x9c>
   348de:	2900      	cmp	r1, #0
   348e0:	d049      	beq.n	34976 <rpc_gnss_serialize_ephe+0x9c>
   348e2:	2302      	movs	r3, #2
   348e4:	700b      	strb	r3, [r1, #0]
   348e6:	2300      	movs	r3, #0
   348e8:	704b      	strb	r3, [r1, #1]
   348ea:	68c3      	ldr	r3, [r0, #12]
   348ec:	f8c1 300b 	str.w	r3, [r1, #11]
   348f0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   348f4:	f8a1 3009 	strh.w	r3, [r1, #9]
   348f8:	f990 3006 	ldrsb.w	r3, [r0, #6]
   348fc:	720b      	strb	r3, [r1, #8]
   348fe:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
   34902:	878b      	strh	r3, [r1, #60]	; 0x3c
   34904:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
   34908:	86cb      	strh	r3, [r1, #54]	; 0x36
   3490a:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
   3490e:	874b      	strh	r3, [r1, #58]	; 0x3a
   34910:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
   34914:	868b      	strh	r3, [r1, #52]	; 0x34
   34916:	f9b0 3046 	ldrsh.w	r3, [r0, #70]	; 0x46
   3491a:	87cb      	strh	r3, [r1, #62]	; 0x3e
   3491c:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
   34920:	870b      	strh	r3, [r1, #56]	; 0x38
   34922:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   34926:	830b      	strh	r3, [r1, #24]
   34928:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3492a:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   3492e:	7c83      	ldrb	r3, [r0, #18]
   34930:	744b      	strb	r3, [r1, #17]
   34932:	7843      	ldrb	r3, [r0, #1]
   34934:	70cb      	strb	r3, [r1, #3]
   34936:	6b43      	ldr	r3, [r0, #52]	; 0x34
   34938:	62cb      	str	r3, [r1, #44]	; 0x2c
   3493a:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
   3493e:	84cb      	strh	r3, [r1, #38]	; 0x26
   34940:	8843      	ldrh	r3, [r0, #2]
   34942:	808b      	strh	r3, [r1, #4]
   34944:	6a03      	ldr	r3, [r0, #32]
   34946:	f8c1 301a 	str.w	r3, [r1, #26]
   3494a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3494c:	630b      	str	r3, [r1, #48]	; 0x30
   3494e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   34950:	f8c1 301e 	str.w	r3, [r1, #30]
   34954:	6b03      	ldr	r3, [r0, #48]	; 0x30
   34956:	628b      	str	r3, [r1, #40]	; 0x28
   34958:	7803      	ldrb	r3, [r0, #0]
   3495a:	708b      	strb	r3, [r1, #2]
   3495c:	f990 3010 	ldrsb.w	r3, [r0, #16]
   34960:	73cb      	strb	r3, [r1, #15]
   34962:	8883      	ldrh	r3, [r0, #4]
   34964:	80cb      	strh	r3, [r1, #6]
   34966:	8a83      	ldrh	r3, [r0, #20]
   34968:	824b      	strh	r3, [r1, #18]
   3496a:	7c43      	ldrb	r3, [r0, #17]
   3496c:	740b      	strb	r3, [r1, #16]
   3496e:	6983      	ldr	r3, [r0, #24]
   34970:	2040      	movs	r0, #64	; 0x40
   34972:	614b      	str	r3, [r1, #20]
   34974:	4770      	bx	lr
   34976:	f04f 30ff 	mov.w	r0, #4294967295
   3497a:	4770      	bx	lr

0003497c <rpc_gnss_serialize_alm>:
   3497c:	b360      	cbz	r0, 349d8 <rpc_gnss_serialize_alm+0x5c>
   3497e:	b359      	cbz	r1, 349d8 <rpc_gnss_serialize_alm+0x5c>
   34980:	2303      	movs	r3, #3
   34982:	700b      	strb	r3, [r1, #0]
   34984:	2300      	movs	r3, #0
   34986:	704b      	strb	r3, [r1, #1]
   34988:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   3498c:	f8a1 301d 	strh.w	r3, [r1, #29]
   34990:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
   34994:	f8a1 301f 	strh.w	r3, [r1, #31]
   34998:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   3499c:	810b      	strh	r3, [r1, #8]
   3499e:	8883      	ldrh	r3, [r0, #4]
   349a0:	80cb      	strh	r3, [r1, #6]
   349a2:	78c3      	ldrb	r3, [r0, #3]
   349a4:	714b      	strb	r3, [r1, #5]
   349a6:	6983      	ldr	r3, [r0, #24]
   349a8:	f8c1 3019 	str.w	r3, [r1, #25]
   349ac:	6903      	ldr	r3, [r0, #16]
   349ae:	f8c1 3011 	str.w	r3, [r1, #17]
   349b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   349b6:	814b      	strh	r3, [r1, #10]
   349b8:	68c3      	ldr	r3, [r0, #12]
   349ba:	f8c1 300d 	str.w	r3, [r1, #13]
   349be:	7a83      	ldrb	r3, [r0, #10]
   349c0:	730b      	strb	r3, [r1, #12]
   349c2:	7803      	ldrb	r3, [r0, #0]
   349c4:	708b      	strb	r3, [r1, #2]
   349c6:	7883      	ldrb	r3, [r0, #2]
   349c8:	710b      	strb	r3, [r1, #4]
   349ca:	6943      	ldr	r3, [r0, #20]
   349cc:	f8c1 3015 	str.w	r3, [r1, #21]
   349d0:	7843      	ldrb	r3, [r0, #1]
   349d2:	2021      	movs	r0, #33	; 0x21
   349d4:	70cb      	strb	r3, [r1, #3]
   349d6:	4770      	bx	lr
   349d8:	f04f 30ff 	mov.w	r0, #4294967295
   349dc:	4770      	bx	lr

000349de <rpc_gnss_serialize_klob>:
   349de:	b1f0      	cbz	r0, 34a1e <rpc_gnss_serialize_klob+0x40>
   349e0:	b1e9      	cbz	r1, 34a1e <rpc_gnss_serialize_klob+0x40>
   349e2:	2304      	movs	r3, #4
   349e4:	700b      	strb	r3, [r1, #0]
   349e6:	2300      	movs	r3, #0
   349e8:	704b      	strb	r3, [r1, #1]
   349ea:	f990 3000 	ldrsb.w	r3, [r0]
   349ee:	708b      	strb	r3, [r1, #2]
   349f0:	f990 3001 	ldrsb.w	r3, [r0, #1]
   349f4:	70cb      	strb	r3, [r1, #3]
   349f6:	f990 3002 	ldrsb.w	r3, [r0, #2]
   349fa:	710b      	strb	r3, [r1, #4]
   349fc:	f990 3003 	ldrsb.w	r3, [r0, #3]
   34a00:	714b      	strb	r3, [r1, #5]
   34a02:	f990 3004 	ldrsb.w	r3, [r0, #4]
   34a06:	718b      	strb	r3, [r1, #6]
   34a08:	f990 3005 	ldrsb.w	r3, [r0, #5]
   34a0c:	71cb      	strb	r3, [r1, #7]
   34a0e:	f990 3006 	ldrsb.w	r3, [r0, #6]
   34a12:	720b      	strb	r3, [r1, #8]
   34a14:	f990 3007 	ldrsb.w	r3, [r0, #7]
   34a18:	200a      	movs	r0, #10
   34a1a:	724b      	strb	r3, [r1, #9]
   34a1c:	4770      	bx	lr
   34a1e:	f04f 30ff 	mov.w	r0, #4294967295
   34a22:	4770      	bx	lr

00034a24 <rpc_gnss_serialize_nequick>:
   34a24:	b198      	cbz	r0, 34a4e <rpc_gnss_serialize_nequick+0x2a>
   34a26:	b191      	cbz	r1, 34a4e <rpc_gnss_serialize_nequick+0x2a>
   34a28:	2305      	movs	r3, #5
   34a2a:	700b      	strb	r3, [r1, #0]
   34a2c:	2300      	movs	r3, #0
   34a2e:	704b      	strb	r3, [r1, #1]
   34a30:	f9b0 3000 	ldrsh.w	r3, [r0]
   34a34:	804b      	strh	r3, [r1, #2]
   34a36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   34a3a:	808b      	strh	r3, [r1, #4]
   34a3c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   34a40:	80cb      	strh	r3, [r1, #6]
   34a42:	7983      	ldrb	r3, [r0, #6]
   34a44:	720b      	strb	r3, [r1, #8]
   34a46:	79c3      	ldrb	r3, [r0, #7]
   34a48:	200a      	movs	r0, #10
   34a4a:	724b      	strb	r3, [r1, #9]
   34a4c:	4770      	bx	lr
   34a4e:	f04f 30ff 	mov.w	r0, #4294967295
   34a52:	4770      	bx	lr

00034a54 <rpc_gnss_serialize_time_and_sv_tow>:
   34a54:	b570      	push	{r4, r5, r6, lr}
   34a56:	b1e8      	cbz	r0, 34a94 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   34a58:	b1e1      	cbz	r1, 34a94 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   34a5a:	2206      	movs	r2, #6
   34a5c:	2300      	movs	r3, #0
   34a5e:	700a      	strb	r2, [r1, #0]
   34a60:	704b      	strb	r3, [r1, #1]
   34a62:	8802      	ldrh	r2, [r0, #0]
   34a64:	f101 0410 	add.w	r4, r1, #16
   34a68:	804a      	strh	r2, [r1, #2]
   34a6a:	68c2      	ldr	r2, [r0, #12]
   34a6c:	f8c1 200a 	str.w	r2, [r1, #10]
   34a70:	8902      	ldrh	r2, [r0, #8]
   34a72:	810a      	strh	r2, [r1, #8]
   34a74:	6842      	ldr	r2, [r0, #4]
   34a76:	604a      	str	r2, [r1, #4]
   34a78:	8a06      	ldrh	r6, [r0, #16]
   34a7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   34a7e:	188d      	adds	r5, r1, r2
   34a80:	81ee      	strh	r6, [r5, #14]
   34a82:	7c85      	ldrb	r5, [r0, #18]
   34a84:	3301      	adds	r3, #1
   34a86:	2b20      	cmp	r3, #32
   34a88:	54a5      	strb	r5, [r4, r2]
   34a8a:	f100 0004 	add.w	r0, r0, #4
   34a8e:	d1f3      	bne.n	34a78 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   34a90:	206e      	movs	r0, #110	; 0x6e
   34a92:	bd70      	pop	{r4, r5, r6, pc}
   34a94:	f04f 30ff 	mov.w	r0, #4294967295
   34a98:	e7fb      	b.n	34a92 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

00034a9a <rpc_gnss_serialize_location>:
   34a9a:	b1c8      	cbz	r0, 34ad0 <rpc_gnss_serialize_location+0x36>
   34a9c:	b1c1      	cbz	r1, 34ad0 <rpc_gnss_serialize_location+0x36>
   34a9e:	2307      	movs	r3, #7
   34aa0:	700b      	strb	r3, [r1, #0]
   34aa2:	2300      	movs	r3, #0
   34aa4:	704b      	strb	r3, [r1, #1]
   34aa6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   34aaa:	814b      	strh	r3, [r1, #10]
   34aac:	7b83      	ldrb	r3, [r0, #14]
   34aae:	740b      	strb	r3, [r1, #16]
   34ab0:	6803      	ldr	r3, [r0, #0]
   34ab2:	f8c1 3002 	str.w	r3, [r1, #2]
   34ab6:	6843      	ldr	r3, [r0, #4]
   34ab8:	f8c1 3006 	str.w	r3, [r1, #6]
   34abc:	7b03      	ldrb	r3, [r0, #12]
   34abe:	738b      	strb	r3, [r1, #14]
   34ac0:	7b43      	ldrb	r3, [r0, #13]
   34ac2:	73cb      	strb	r3, [r1, #15]
   34ac4:	7a83      	ldrb	r3, [r0, #10]
   34ac6:	730b      	strb	r3, [r1, #12]
   34ac8:	7ac3      	ldrb	r3, [r0, #11]
   34aca:	2011      	movs	r0, #17
   34acc:	734b      	strb	r3, [r1, #13]
   34ace:	4770      	bx	lr
   34ad0:	f04f 30ff 	mov.w	r0, #4294967295
   34ad4:	4770      	bx	lr

00034ad6 <rpc_gnss_serialize_integrity>:
   34ad6:	b148      	cbz	r0, 34aec <rpc_gnss_serialize_integrity+0x16>
   34ad8:	b141      	cbz	r1, 34aec <rpc_gnss_serialize_integrity+0x16>
   34ada:	2308      	movs	r3, #8
   34adc:	700b      	strb	r3, [r1, #0]
   34ade:	2300      	movs	r3, #0
   34ae0:	704b      	strb	r3, [r1, #1]
   34ae2:	6803      	ldr	r3, [r0, #0]
   34ae4:	2006      	movs	r0, #6
   34ae6:	f8c1 3002 	str.w	r3, [r1, #2]
   34aea:	4770      	bx	lr
   34aec:	f04f 30ff 	mov.w	r0, #4294967295
   34af0:	4770      	bx	lr

00034af2 <rpc_dfu_event_handler>:
   34af2:	b510      	push	{r4, lr}
   34af4:	4604      	mov	r4, r0
   34af6:	6800      	ldr	r0, [r0, #0]
   34af8:	b108      	cbz	r0, 34afe <rpc_dfu_event_handler+0xc>
   34afa:	f7ff f89e 	bl	33c3a <rpc_client_msg_data_rx_free>
   34afe:	68e0      	ldr	r0, [r4, #12]
   34b00:	b108      	cbz	r0, 34b06 <rpc_dfu_event_handler+0x14>
   34b02:	6004      	str	r4, [r0, #0]
   34b04:	2001      	movs	r0, #1
   34b06:	bd10      	pop	{r4, pc}

00034b08 <rpc_at_deinit>:
   34b08:	2000      	movs	r0, #0
   34b0a:	4770      	bx	lr

00034b0c <rpc_delta_dfu_deinit>:
   34b0c:	2000      	movs	r0, #0
   34b0e:	4770      	bx	lr

00034b10 <rpc_delta_dfu_init>:
   34b10:	2000      	movs	r0, #0
   34b12:	4770      	bx	lr

00034b14 <nrf_modem_is_initialized>:
   34b14:	f7f3 b920 	b.w	27d58 <nrf_modem_state_is_initialized>

00034b18 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   34b18:	4770      	bx	lr

00034b1a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   34b1a:	b140      	cbz	r0, 34b2e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   34b1c:	68c3      	ldr	r3, [r0, #12]
   34b1e:	7858      	ldrb	r0, [r3, #1]
   34b20:	f010 0001 	ands.w	r0, r0, #1
   34b24:	bf1e      	ittt	ne
   34b26:	7818      	ldrbne	r0, [r3, #0]
   34b28:	fab0 f080 	clzne	r0, r0
   34b2c:	0940      	lsrne	r0, r0, #5
}
   34b2e:	4770      	bx	lr

00034b30 <z_early_memset>:
   34b30:	f000 ba7c 	b.w	3502c <memset>

00034b34 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   34b34:	f000 ba5a 	b.w	34fec <memcpy>

00034b38 <k_heap_init>:
{
   34b38:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   34b3a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   34b3e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   34b42:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   34b44:	f7d8 b852 	b.w	cbec <sys_heap_init>

00034b48 <k_heap_alloc>:
{
   34b48:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   34b4a:	e9cd 2300 	strd	r2, r3, [sp]
   34b4e:	460a      	mov	r2, r1
   34b50:	2104      	movs	r1, #4
   34b52:	f7f3 fb3d 	bl	281d0 <k_heap_aligned_alloc>
}
   34b56:	b003      	add	sp, #12
   34b58:	f85d fb04 	ldr.w	pc, [sp], #4

00034b5c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   34b5c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   34b60:	4313      	orrs	r3, r2
   34b62:	f013 0303 	ands.w	r3, r3, #3
   34b66:	d10c      	bne.n	34b82 <create_free_list+0x26>
	slab->free_list = NULL;
   34b68:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   34b6a:	68c1      	ldr	r1, [r0, #12]
   34b6c:	4299      	cmp	r1, r3
   34b6e:	d801      	bhi.n	34b74 <create_free_list+0x18>
	return 0;
   34b70:	2000      	movs	r0, #0
   34b72:	4770      	bx	lr
		*(char **)p = slab->free_list;
   34b74:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   34b76:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   34b78:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   34b7a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   34b7c:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   34b7e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   34b80:	e7f3      	b.n	34b6a <create_free_list+0xe>
		return -EINVAL;
   34b82:	f06f 0015 	mvn.w	r0, #21
}
   34b86:	4770      	bx	lr

00034b88 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   34b88:	f3ef 8005 	mrs	r0, IPSR
}
   34b8c:	3800      	subs	r0, #0
   34b8e:	bf18      	it	ne
   34b90:	2001      	movne	r0, #1
   34b92:	4770      	bx	lr

00034b94 <z_impl_k_thread_name_set>:
}
   34b94:	f06f 0057 	mvn.w	r0, #87	; 0x57
   34b98:	4770      	bx	lr

00034b9a <k_thread_name_get>:
}
   34b9a:	2000      	movs	r0, #0
   34b9c:	4770      	bx	lr

00034b9e <z_impl_k_thread_start>:
	z_sched_start(thread);
   34b9e:	f7f5 b899 	b.w	29cd4 <z_sched_start>

00034ba2 <z_pm_save_idle_exit>:
{
   34ba2:	b508      	push	{r3, lr}
	pm_system_resume();
   34ba4:	f7da fa0c 	bl	efc0 <pm_system_resume>
}
   34ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   34bac:	f7fd bffd 	b.w	32baa <sys_clock_idle_exit>

00034bb0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   34bb0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   34bb4:	428b      	cmp	r3, r1
   34bb6:	d001      	beq.n	34bbc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   34bb8:	f7f5 bb7c 	b.w	2a2b4 <z_set_prio>
}
   34bbc:	2000      	movs	r0, #0
   34bbe:	4770      	bx	lr

00034bc0 <z_impl_k_mutex_init>:
{
   34bc0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   34bc2:	2000      	movs	r0, #0
   34bc4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   34bc8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   34bcc:	4770      	bx	lr

00034bce <z_queue_node_peek>:
{
   34bce:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   34bd0:	4604      	mov	r4, r0
   34bd2:	b130      	cbz	r0, 34be2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   34bd4:	6802      	ldr	r2, [r0, #0]
   34bd6:	0793      	lsls	r3, r2, #30
   34bd8:	d003      	beq.n	34be2 <z_queue_node_peek+0x14>
		ret = anode->data;
   34bda:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   34bdc:	b109      	cbz	r1, 34be2 <z_queue_node_peek+0x14>
			k_free(anode);
   34bde:	f000 f9ca 	bl	34f76 <k_free>
}
   34be2:	4620      	mov	r0, r4
   34be4:	bd10      	pop	{r4, pc}

00034be6 <z_impl_k_queue_init>:
	list->head = NULL;
   34be6:	2300      	movs	r3, #0
	list->tail = NULL;
   34be8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   34bec:	6083      	str	r3, [r0, #8]
   34bee:	f100 030c 	add.w	r3, r0, #12
   34bf2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   34bf6:	f100 0314 	add.w	r3, r0, #20
   34bfa:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   34bfe:	4770      	bx	lr

00034c00 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   34c00:	2301      	movs	r3, #1
{
   34c02:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   34c04:	9300      	str	r3, [sp, #0]
   34c06:	2300      	movs	r3, #0
{
   34c08:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   34c0a:	4619      	mov	r1, r3
   34c0c:	f7f3 ff98 	bl	28b40 <queue_insert>
}
   34c10:	b003      	add	sp, #12
   34c12:	f85d fb04 	ldr.w	pc, [sp], #4

00034c16 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   34c16:	2300      	movs	r3, #0
{
   34c18:	b507      	push	{r0, r1, r2, lr}
   34c1a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   34c1c:	9300      	str	r3, [sp, #0]
   34c1e:	4619      	mov	r1, r3
   34c20:	f7f3 ff8e 	bl	28b40 <queue_insert>
}
   34c24:	b003      	add	sp, #12
   34c26:	f85d fb04 	ldr.w	pc, [sp], #4

00034c2a <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   34c2a:	2100      	movs	r1, #0
   34c2c:	6800      	ldr	r0, [r0, #0]
   34c2e:	f7ff bfce 	b.w	34bce <z_queue_node_peek>

00034c32 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   34c32:	b15a      	cbz	r2, 34c4c <z_impl_k_sem_init+0x1a>
   34c34:	428a      	cmp	r2, r1
   34c36:	d309      	bcc.n	34c4c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   34c38:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   34c3c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   34c40:	e9c0 0000 	strd	r0, r0, [r0]
   34c44:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   34c48:	2000      	movs	r0, #0
   34c4a:	4770      	bx	lr
		return -EINVAL;
   34c4c:	f06f 0015 	mvn.w	r0, #21
}
   34c50:	4770      	bx	lr

00034c52 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   34c52:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   34c54:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   34c56:	408b      	lsls	r3, r1
   34c58:	ea22 0303 	bic.w	r3, r2, r3
   34c5c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   34c5e:	fa22 f001 	lsr.w	r0, r2, r1
}
   34c62:	f000 0001 	and.w	r0, r0, #1
   34c66:	4770      	bx	lr

00034c68 <unschedule_locked>:
{
   34c68:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   34c6a:	2103      	movs	r1, #3
{
   34c6c:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   34c6e:	300c      	adds	r0, #12
   34c70:	f7ff ffef 	bl	34c52 <flag_test_and_clear>
   34c74:	b130      	cbz	r0, 34c84 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   34c76:	f104 0010 	add.w	r0, r4, #16
   34c7a:	f7f6 f949 	bl	2af10 <z_abort_timeout>
   34c7e:	fab0 f080 	clz	r0, r0
   34c82:	0940      	lsrs	r0, r0, #5
}
   34c84:	bd10      	pop	{r4, pc}

00034c86 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   34c86:	b120      	cbz	r0, 34c92 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   34c88:	2200      	movs	r2, #0
   34c8a:	3090      	adds	r0, #144	; 0x90
   34c8c:	4611      	mov	r1, r2
   34c8e:	f7f5 bfaf 	b.w	2abf0 <z_sched_wake>
}
   34c92:	4770      	bx	lr

00034c94 <cancel_async_locked>:
{
   34c94:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   34c96:	68c3      	ldr	r3, [r0, #12]
{
   34c98:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34c9a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   34c9e:	079b      	lsls	r3, r3, #30
   34ca0:	d416      	bmi.n	34cd0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   34ca2:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   34ca4:	2102      	movs	r1, #2
   34ca6:	300c      	adds	r0, #12
   34ca8:	f7ff ffd3 	bl	34c52 <flag_test_and_clear>
   34cac:	b180      	cbz	r0, 34cd0 <cancel_async_locked+0x3c>
	return list->head;
   34cae:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   34cb2:	b16a      	cbz	r2, 34cd0 <cancel_async_locked+0x3c>
   34cb4:	4294      	cmp	r4, r2
   34cb6:	d11d      	bne.n	34cf4 <cancel_async_locked+0x60>
	return node->next;
   34cb8:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   34cba:	b99e      	cbnz	r6, 34ce4 <cancel_async_locked+0x50>
   34cbc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   34cc0:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   34cc4:	429c      	cmp	r4, r3
   34cc6:	d101      	bne.n	34ccc <cancel_async_locked+0x38>
	list->tail = node;
   34cc8:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   34ccc:	2300      	movs	r3, #0
   34cce:	6023      	str	r3, [r4, #0]
	return *flagp;
   34cd0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   34cd2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   34cd6:	bf1e      	ittt	ne
   34cd8:	f043 0302 	orrne.w	r3, r3, #2
   34cdc:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   34cde:	f040 0002 	orrne.w	r0, r0, #2
}
   34ce2:	bd70      	pop	{r4, r5, r6, pc}
   34ce4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   34ce6:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   34cea:	4294      	cmp	r4, r2
	list->tail = node;
   34cec:	bf08      	it	eq
   34cee:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   34cf2:	e7eb      	b.n	34ccc <cancel_async_locked+0x38>
	return node->next;
   34cf4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   34cf6:	6812      	ldr	r2, [r2, #0]
   34cf8:	e7db      	b.n	34cb2 <cancel_async_locked+0x1e>

00034cfa <k_work_submit_to_queue>:
{
   34cfa:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   34cfc:	f7f4 fb38 	bl	29370 <z_work_submit_to_queue>
	if (ret > 0) {
   34d00:	1e04      	subs	r4, r0, #0
   34d02:	dd09      	ble.n	34d18 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   34d04:	f04f 0320 	mov.w	r3, #32
   34d08:	f3ef 8011 	mrs	r0, BASEPRI
   34d0c:	f383 8812 	msr	BASEPRI_MAX, r3
   34d10:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   34d14:	f000 f80d 	bl	34d32 <z_reschedule_irqlock>
}
   34d18:	4620      	mov	r0, r4
   34d1a:	bd10      	pop	{r4, pc}

00034d1c <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   34d1c:	f7f4 bae2 	b.w	292e4 <k_work_busy_get>

00034d20 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   34d20:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   34d24:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   34d28:	4283      	cmp	r3, r0
		return b2 - b1;
   34d2a:	bf14      	ite	ne
   34d2c:	1ac0      	subne	r0, r0, r3
	return 0;
   34d2e:	2000      	moveq	r0, #0
}
   34d30:	4770      	bx	lr

00034d32 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   34d32:	4603      	mov	r3, r0
   34d34:	b920      	cbnz	r0, 34d40 <z_reschedule_irqlock+0xe>
   34d36:	f3ef 8205 	mrs	r2, IPSR
   34d3a:	b90a      	cbnz	r2, 34d40 <z_reschedule_irqlock+0xe>
   34d3c:	f7db bbb4 	b.w	104a8 <arch_swap>
	__asm__ volatile(
   34d40:	f383 8811 	msr	BASEPRI, r3
   34d44:	f3bf 8f6f 	isb	sy
}
   34d48:	4770      	bx	lr

00034d4a <z_reschedule_unlocked>:
	__asm__ volatile(
   34d4a:	f04f 0320 	mov.w	r3, #32
   34d4e:	f3ef 8011 	mrs	r0, BASEPRI
   34d52:	f383 8812 	msr	BASEPRI_MAX, r3
   34d56:	f3bf 8f6f 	isb	sy
   34d5a:	f7ff bfea 	b.w	34d32 <z_reschedule_irqlock>

00034d5e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   34d5e:	2101      	movs	r1, #1
   34d60:	3818      	subs	r0, #24
   34d62:	f7f5 bc0d 	b.w	2a580 <z_sched_wake_thread>

00034d66 <z_unpend_all>:
{
   34d66:	b538      	push	{r3, r4, r5, lr}
   34d68:	4605      	mov	r5, r0
	int need_sched = 0;
   34d6a:	2000      	movs	r0, #0
	return list->head == list;
   34d6c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34d6e:	42a5      	cmp	r5, r4
   34d70:	d000      	beq.n	34d74 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   34d72:	b904      	cbnz	r4, 34d76 <z_unpend_all+0x10>
}
   34d74:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   34d76:	4620      	mov	r0, r4
   34d78:	f7f5 fbb6 	bl	2a4e8 <z_unpend_thread>
		z_ready_thread(thread);
   34d7c:	4620      	mov	r0, r4
   34d7e:	f7f4 fed9 	bl	29b34 <z_ready_thread>
		need_sched = 1;
   34d82:	2001      	movs	r0, #1
   34d84:	e7f2      	b.n	34d6c <z_unpend_all+0x6>

00034d86 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   34d86:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   34d88:	f7f6 fa02 	bl	2b190 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   34d8c:	bd08      	pop	{r3, pc}

00034d8e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   34d8e:	f7f6 b9ff 	b.w	2b190 <sys_clock_tick_get>

00034d92 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   34d92:	b108      	cbz	r0, 34d98 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   34d94:	f7d9 b9ce 	b.w	e134 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   34d98:	4770      	bx	lr

00034d9a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34d9a:	f1b1 3fff 	cmp.w	r1, #4294967295
   34d9e:	bf08      	it	eq
   34da0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   34da4:	b538      	push	{r3, r4, r5, lr}
   34da6:	460c      	mov	r4, r1
   34da8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34daa:	d014      	beq.n	34dd6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34dac:	4308      	orrs	r0, r1
   34dae:	d103      	bne.n	34db8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   34db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   34db4:	f7f6 b9ec 	b.w	2b190 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   34db8:	f06f 0001 	mvn.w	r0, #1
   34dbc:	f04f 33ff 	mov.w	r3, #4294967295
   34dc0:	1b40      	subs	r0, r0, r5
   34dc2:	eb63 0101 	sbc.w	r1, r3, r1
   34dc6:	2900      	cmp	r1, #0
   34dc8:	da04      	bge.n	34dd4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   34dca:	f7f6 f9e1 	bl	2b190 <sys_clock_tick_get>
   34dce:	1940      	adds	r0, r0, r5
   34dd0:	eb41 0104 	adc.w	r1, r1, r4
}
   34dd4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   34dd6:	f04f 30ff 	mov.w	r0, #4294967295
   34dda:	4601      	mov	r1, r0
   34ddc:	e7fa      	b.n	34dd4 <sys_clock_timeout_end_calc+0x3a>

00034dde <k_timer_init>:
	timer->status = 0U;
   34dde:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   34de0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   34de4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   34de8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   34dec:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   34df0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   34df2:	6343      	str	r3, [r0, #52]	; 0x34
}
   34df4:	4770      	bx	lr

00034df6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   34df6:	b510      	push	{r4, lr}
   34df8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   34dfa:	f7f6 f889 	bl	2af10 <z_abort_timeout>

	if (inactive) {
   34dfe:	b9b0      	cbnz	r0, 34e2e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   34e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34e02:	b10b      	cbz	r3, 34e08 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   34e04:	4620      	mov	r0, r4
   34e06:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   34e08:	f104 0018 	add.w	r0, r4, #24
   34e0c:	f7f5 fc10 	bl	2a630 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   34e10:	b168      	cbz	r0, 34e2e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   34e12:	f7f4 fe8f 	bl	29b34 <z_ready_thread>
   34e16:	f04f 0320 	mov.w	r3, #32
   34e1a:	f3ef 8011 	mrs	r0, BASEPRI
   34e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   34e22:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   34e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34e2a:	f7ff bf82 	b.w	34d32 <z_reschedule_irqlock>
   34e2e:	bd10      	pop	{r4, pc}

00034e30 <add_event>:
{
   34e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34e32:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   34e34:	e9d0 1300 	ldrd	r1, r3, [r0]
   34e38:	4288      	cmp	r0, r1
   34e3a:	4604      	mov	r4, r0
   34e3c:	d105      	bne.n	34e4a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   34e3e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   34e40:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   34e44:	601d      	str	r5, [r3, #0]
	list->tail = node;
   34e46:	6065      	str	r5, [r4, #4]
   34e48:	e01d      	b.n	34e86 <add_event+0x56>
	if ((pending == NULL) ||
   34e4a:	2b00      	cmp	r3, #0
   34e4c:	d0f7      	beq.n	34e3e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   34e4e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   34e50:	b100      	cbz	r0, 34e54 <add_event+0x24>
   34e52:	3860      	subs	r0, #96	; 0x60
   34e54:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   34e58:	4639      	mov	r1, r7
   34e5a:	f7ff ff61 	bl	34d20 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   34e5e:	2800      	cmp	r0, #0
   34e60:	dced      	bgt.n	34e3e <add_event+0xe>
	return list->head == list;
   34e62:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34e64:	42b4      	cmp	r4, r6
   34e66:	d0ea      	beq.n	34e3e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   34e68:	2e00      	cmp	r6, #0
   34e6a:	d0e8      	beq.n	34e3e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   34e6c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   34e6e:	b101      	cbz	r1, 34e72 <add_event+0x42>
   34e70:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   34e72:	4638      	mov	r0, r7
   34e74:	f7ff ff54 	bl	34d20 <z_sched_prio_cmp>
   34e78:	2800      	cmp	r0, #0
   34e7a:	dd05      	ble.n	34e88 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   34e7c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   34e7e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   34e82:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   34e84:	6075      	str	r5, [r6, #4]
}
   34e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   34e88:	6863      	ldr	r3, [r4, #4]
   34e8a:	429e      	cmp	r6, r3
   34e8c:	d0d7      	beq.n	34e3e <add_event+0xe>
   34e8e:	6836      	ldr	r6, [r6, #0]
   34e90:	e7ea      	b.n	34e68 <add_event+0x38>

00034e92 <signal_poll_event>:
{
   34e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   34e96:	6884      	ldr	r4, [r0, #8]
{
   34e98:	4605      	mov	r5, r0
   34e9a:	460e      	mov	r6, r1
	if (poller != NULL) {
   34e9c:	b144      	cbz	r4, 34eb0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   34e9e:	7863      	ldrb	r3, [r4, #1]
   34ea0:	2b01      	cmp	r3, #1
   34ea2:	d12e      	bne.n	34f02 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   34ea4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   34ea8:	f013 0302 	ands.w	r3, r3, #2
   34eac:	d10a      	bne.n	34ec4 <signal_poll_event+0x32>
		poller->is_polling = false;
   34eae:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   34eb0:	2000      	movs	r0, #0
	event->state |= state;
   34eb2:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   34eb4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   34eb6:	f3c3 3286 	ubfx	r2, r3, #14, #7
   34eba:	4316      	orrs	r6, r2
   34ebc:	f366 3394 	bfi	r3, r6, #14, #7
   34ec0:	60eb      	str	r3, [r5, #12]
	return retcode;
   34ec2:	e03e      	b.n	34f42 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   34ec4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   34ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
   34ecc:	bf08      	it	eq
   34ece:	f112 0f02 	cmneq.w	r2, #2
   34ed2:	d032      	beq.n	34f3a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   34ed4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   34ed8:	4640      	mov	r0, r8
   34eda:	f7f5 fb05 	bl	2a4e8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   34ede:	2e08      	cmp	r6, #8
   34ee0:	bf0c      	ite	eq
   34ee2:	f06f 0303 	mvneq.w	r3, #3
   34ee6:	2300      	movne	r3, #0
   34ee8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   34eea:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   34eee:	06db      	lsls	r3, r3, #27
   34ef0:	d109      	bne.n	34f06 <signal_poll_event+0x74>
   34ef2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   34ef6:	b937      	cbnz	r7, 34f06 <signal_poll_event+0x74>
	z_ready_thread(thread);
   34ef8:	4640      	mov	r0, r8
   34efa:	f7f4 fe1b 	bl	29b34 <z_ready_thread>
		poller->is_polling = false;
   34efe:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   34f00:	e7d6      	b.n	34eb0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   34f02:	2b02      	cmp	r3, #2
   34f04:	d001      	beq.n	34f0a <signal_poll_event+0x78>
		poller->is_polling = false;
   34f06:	2300      	movs	r3, #0
   34f08:	e7d1      	b.n	34eae <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   34f0a:	7823      	ldrb	r3, [r4, #0]
   34f0c:	2b00      	cmp	r3, #0
   34f0e:	d0cf      	beq.n	34eb0 <signal_poll_event+0x1e>
   34f10:	f854 7c04 	ldr.w	r7, [r4, #-4]
   34f14:	2f00      	cmp	r7, #0
   34f16:	d0f2      	beq.n	34efe <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   34f18:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   34f1c:	f1a4 0914 	sub.w	r9, r4, #20
   34f20:	f104 0014 	add.w	r0, r4, #20
   34f24:	f7f5 fff4 	bl	2af10 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   34f28:	4649      	mov	r1, r9
   34f2a:	4638      	mov	r0, r7
		twork->poll_result = 0;
   34f2c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   34f30:	f7f4 fa1e 	bl	29370 <z_work_submit_to_queue>
		poller->is_polling = false;
   34f34:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   34f38:	e7ba      	b.n	34eb0 <signal_poll_event+0x1e>
		poller->is_polling = false;
   34f3a:	2300      	movs	r3, #0
		return -EAGAIN;
   34f3c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   34f40:	7023      	strb	r3, [r4, #0]
}
   34f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00034f46 <z_handle_obj_poll_events>:
{
   34f46:	4603      	mov	r3, r0
	return list->head == list;
   34f48:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   34f4a:	4283      	cmp	r3, r0
   34f4c:	d008      	beq.n	34f60 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   34f4e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   34f52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34f54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   34f56:	2300      	movs	r3, #0
	node->prev = NULL;
   34f58:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   34f5c:	f7ff bf99 	b.w	34e92 <signal_poll_event>
}
   34f60:	4770      	bx	lr

00034f62 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   34f62:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   34f64:	e9c0 0000 	strd	r0, r0, [r0]
   34f68:	6083      	str	r3, [r0, #8]
}
   34f6a:	4770      	bx	lr

00034f6c <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   34f6c:	6883      	ldr	r3, [r0, #8]
   34f6e:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   34f70:	68c3      	ldr	r3, [r0, #12]
   34f72:	6013      	str	r3, [r2, #0]
}
   34f74:	4770      	bx	lr

00034f76 <k_free>:
	if (ptr != NULL) {
   34f76:	b120      	cbz	r0, 34f82 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   34f78:	1f01      	subs	r1, r0, #4
   34f7a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   34f7e:	f7f3 b9c7 	b.w	28310 <k_heap_free>
}
   34f82:	4770      	bx	lr

00034f84 <k_malloc>:
{
   34f84:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   34f86:	2004      	movs	r0, #4
   34f88:	f7f6 bdb6 	b.w	2baf8 <k_aligned_alloc>

00034f8c <k_calloc>:
{
   34f8c:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   34f8e:	fba0 5401 	umull	r5, r4, r0, r1
   34f92:	b924      	cbnz	r4, 34f9e <k_calloc+0x12>
	ret = k_malloc(bounds);
   34f94:	4628      	mov	r0, r5
   34f96:	f7ff fff5 	bl	34f84 <k_malloc>
	if (ret != NULL) {
   34f9a:	4606      	mov	r6, r0
   34f9c:	b910      	cbnz	r0, 34fa4 <k_calloc+0x18>
		return NULL;
   34f9e:	2600      	movs	r6, #0
}
   34fa0:	4630      	mov	r0, r6
   34fa2:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   34fa4:	462a      	mov	r2, r5
   34fa6:	4621      	mov	r1, r4
   34fa8:	f000 f840 	bl	3502c <memset>
   34fac:	e7f8      	b.n	34fa0 <k_calloc+0x14>

00034fae <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   34fae:	4770      	bx	lr

00034fb0 <memchr>:
   34fb0:	b2c9      	uxtb	r1, r1
   34fb2:	4603      	mov	r3, r0
   34fb4:	4402      	add	r2, r0
   34fb6:	b510      	push	{r4, lr}
   34fb8:	4293      	cmp	r3, r2
   34fba:	4618      	mov	r0, r3
   34fbc:	d101      	bne.n	34fc2 <memchr+0x12>
   34fbe:	2000      	movs	r0, #0
   34fc0:	e003      	b.n	34fca <memchr+0x1a>
   34fc2:	7804      	ldrb	r4, [r0, #0]
   34fc4:	3301      	adds	r3, #1
   34fc6:	428c      	cmp	r4, r1
   34fc8:	d1f6      	bne.n	34fb8 <memchr+0x8>
   34fca:	bd10      	pop	{r4, pc}

00034fcc <memcmp>:
   34fcc:	3901      	subs	r1, #1
   34fce:	4402      	add	r2, r0
   34fd0:	b510      	push	{r4, lr}
   34fd2:	4290      	cmp	r0, r2
   34fd4:	d101      	bne.n	34fda <memcmp+0xe>
   34fd6:	2000      	movs	r0, #0
   34fd8:	e005      	b.n	34fe6 <memcmp+0x1a>
   34fda:	7803      	ldrb	r3, [r0, #0]
   34fdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   34fe0:	42a3      	cmp	r3, r4
   34fe2:	d001      	beq.n	34fe8 <memcmp+0x1c>
   34fe4:	1b18      	subs	r0, r3, r4
   34fe6:	bd10      	pop	{r4, pc}
   34fe8:	3001      	adds	r0, #1
   34fea:	e7f2      	b.n	34fd2 <memcmp+0x6>

00034fec <memcpy>:
   34fec:	440a      	add	r2, r1
   34fee:	1e43      	subs	r3, r0, #1
   34ff0:	4291      	cmp	r1, r2
   34ff2:	d100      	bne.n	34ff6 <memcpy+0xa>
   34ff4:	4770      	bx	lr
   34ff6:	b510      	push	{r4, lr}
   34ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
   34ffc:	4291      	cmp	r1, r2
   34ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
   35002:	d1f9      	bne.n	34ff8 <memcpy+0xc>
   35004:	bd10      	pop	{r4, pc}

00035006 <__memcpy_chk>:
   35006:	429a      	cmp	r2, r3
   35008:	b508      	push	{r3, lr}
   3500a:	d901      	bls.n	35010 <__memcpy_chk+0xa>
   3500c:	f7dc f9fc 	bl	11408 <__chk_fail>
   35010:	4281      	cmp	r1, r0
   35012:	d804      	bhi.n	3501e <__memcpy_chk+0x18>
   35014:	188b      	adds	r3, r1, r2
   35016:	4298      	cmp	r0, r3
   35018:	d3f8      	bcc.n	3500c <__memcpy_chk+0x6>
   3501a:	4281      	cmp	r1, r0
   3501c:	d102      	bne.n	35024 <__memcpy_chk+0x1e>
   3501e:	1883      	adds	r3, r0, r2
   35020:	4299      	cmp	r1, r3
   35022:	d3f3      	bcc.n	3500c <__memcpy_chk+0x6>
   35024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   35028:	f7ff bfe0 	b.w	34fec <memcpy>

0003502c <memset>:
   3502c:	4402      	add	r2, r0
   3502e:	4603      	mov	r3, r0
   35030:	4293      	cmp	r3, r2
   35032:	d100      	bne.n	35036 <memset+0xa>
   35034:	4770      	bx	lr
   35036:	f803 1b01 	strb.w	r1, [r3], #1
   3503a:	e7f9      	b.n	35030 <memset+0x4>

0003503c <__cvt>:
   3503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35040:	b089      	sub	sp, #36	; 0x24
   35042:	2b00      	cmp	r3, #0
   35044:	461d      	mov	r5, r3
   35046:	4614      	mov	r4, r2
   35048:	bfba      	itte	lt
   3504a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   3504e:	4614      	movlt	r4, r2
   35050:	2300      	movge	r3, #0
   35052:	9a14      	ldr	r2, [sp, #80]	; 0x50
   35054:	bfbc      	itt	lt
   35056:	461d      	movlt	r5, r3
   35058:	232d      	movlt	r3, #45	; 0x2d
   3505a:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   3505e:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   35062:	f028 0a20 	bic.w	sl, r8, #32
   35066:	7013      	strb	r3, [r2, #0]
   35068:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3506c:	d005      	beq.n	3507a <__cvt+0x3e>
   3506e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   35072:	d100      	bne.n	35076 <__cvt+0x3a>
   35074:	3601      	adds	r6, #1
   35076:	2302      	movs	r3, #2
   35078:	e000      	b.n	3507c <__cvt+0x40>
   3507a:	2303      	movs	r3, #3
   3507c:	aa07      	add	r2, sp, #28
   3507e:	9204      	str	r2, [sp, #16]
   35080:	aa06      	add	r2, sp, #24
   35082:	e9cd 3600 	strd	r3, r6, [sp]
   35086:	e9cd 9202 	strd	r9, r2, [sp, #8]
   3508a:	462b      	mov	r3, r5
   3508c:	4622      	mov	r2, r4
   3508e:	f7d5 fa0f 	bl	a4b0 <_dtoa_r>
   35092:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   35096:	4607      	mov	r7, r0
   35098:	d119      	bne.n	350ce <__cvt+0x92>
   3509a:	f01b 0f01 	tst.w	fp, #1
   3509e:	d00e      	beq.n	350be <__cvt+0x82>
   350a0:	eb07 0806 	add.w	r8, r7, r6
   350a4:	2200      	movs	r2, #0
   350a6:	2300      	movs	r3, #0
   350a8:	4620      	mov	r0, r4
   350aa:	4629      	mov	r1, r5
   350ac:	f7d3 fda0 	bl	8bf0 <__aeabi_dcmpeq>
   350b0:	b108      	cbz	r0, 350b6 <__cvt+0x7a>
   350b2:	f8cd 801c 	str.w	r8, [sp, #28]
   350b6:	2230      	movs	r2, #48	; 0x30
   350b8:	9b07      	ldr	r3, [sp, #28]
   350ba:	4543      	cmp	r3, r8
   350bc:	d321      	bcc.n	35102 <__cvt+0xc6>
   350be:	9b07      	ldr	r3, [sp, #28]
   350c0:	4638      	mov	r0, r7
   350c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   350c4:	1bdb      	subs	r3, r3, r7
   350c6:	6013      	str	r3, [r2, #0]
   350c8:	b009      	add	sp, #36	; 0x24
   350ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   350d2:	d0e2      	beq.n	3509a <__cvt+0x5e>
   350d4:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   350d8:	eb00 0806 	add.w	r8, r0, r6
   350dc:	d1e2      	bne.n	350a4 <__cvt+0x68>
   350de:	7803      	ldrb	r3, [r0, #0]
   350e0:	2b30      	cmp	r3, #48	; 0x30
   350e2:	d10a      	bne.n	350fa <__cvt+0xbe>
   350e4:	2200      	movs	r2, #0
   350e6:	2300      	movs	r3, #0
   350e8:	4620      	mov	r0, r4
   350ea:	4629      	mov	r1, r5
   350ec:	f7d3 fd80 	bl	8bf0 <__aeabi_dcmpeq>
   350f0:	b918      	cbnz	r0, 350fa <__cvt+0xbe>
   350f2:	f1c6 0601 	rsb	r6, r6, #1
   350f6:	f8c9 6000 	str.w	r6, [r9]
   350fa:	f8d9 3000 	ldr.w	r3, [r9]
   350fe:	4498      	add	r8, r3
   35100:	e7d0      	b.n	350a4 <__cvt+0x68>
   35102:	1c59      	adds	r1, r3, #1
   35104:	9107      	str	r1, [sp, #28]
   35106:	701a      	strb	r2, [r3, #0]
   35108:	e7d6      	b.n	350b8 <__cvt+0x7c>

0003510a <__exponent>:
   3510a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3510c:	2900      	cmp	r1, #0
   3510e:	7002      	strb	r2, [r0, #0]
   35110:	bfba      	itte	lt
   35112:	4249      	neglt	r1, r1
   35114:	232d      	movlt	r3, #45	; 0x2d
   35116:	232b      	movge	r3, #43	; 0x2b
   35118:	2909      	cmp	r1, #9
   3511a:	7043      	strb	r3, [r0, #1]
   3511c:	dd28      	ble.n	35170 <__exponent+0x66>
   3511e:	f10d 0307 	add.w	r3, sp, #7
   35122:	270a      	movs	r7, #10
   35124:	461d      	mov	r5, r3
   35126:	461a      	mov	r2, r3
   35128:	3b01      	subs	r3, #1
   3512a:	fbb1 f6f7 	udiv	r6, r1, r7
   3512e:	fb07 1416 	mls	r4, r7, r6, r1
   35132:	3430      	adds	r4, #48	; 0x30
   35134:	f802 4c01 	strb.w	r4, [r2, #-1]
   35138:	460c      	mov	r4, r1
   3513a:	4631      	mov	r1, r6
   3513c:	2c63      	cmp	r4, #99	; 0x63
   3513e:	dcf2      	bgt.n	35126 <__exponent+0x1c>
   35140:	3130      	adds	r1, #48	; 0x30
   35142:	1e94      	subs	r4, r2, #2
   35144:	f803 1c01 	strb.w	r1, [r3, #-1]
   35148:	1c41      	adds	r1, r0, #1
   3514a:	4623      	mov	r3, r4
   3514c:	42ab      	cmp	r3, r5
   3514e:	d30a      	bcc.n	35166 <__exponent+0x5c>
   35150:	f10d 0309 	add.w	r3, sp, #9
   35154:	1a9b      	subs	r3, r3, r2
   35156:	42ac      	cmp	r4, r5
   35158:	bf88      	it	hi
   3515a:	2300      	movhi	r3, #0
   3515c:	3302      	adds	r3, #2
   3515e:	4403      	add	r3, r0
   35160:	1a18      	subs	r0, r3, r0
   35162:	b003      	add	sp, #12
   35164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35166:	f813 6b01 	ldrb.w	r6, [r3], #1
   3516a:	f801 6f01 	strb.w	r6, [r1, #1]!
   3516e:	e7ed      	b.n	3514c <__exponent+0x42>
   35170:	2330      	movs	r3, #48	; 0x30
   35172:	3130      	adds	r1, #48	; 0x30
   35174:	7083      	strb	r3, [r0, #2]
   35176:	1d03      	adds	r3, r0, #4
   35178:	70c1      	strb	r1, [r0, #3]
   3517a:	e7f1      	b.n	35160 <__exponent+0x56>

0003517c <_printf_common>:
   3517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35180:	4616      	mov	r6, r2
   35182:	4698      	mov	r8, r3
   35184:	688a      	ldr	r2, [r1, #8]
   35186:	4607      	mov	r7, r0
   35188:	690b      	ldr	r3, [r1, #16]
   3518a:	460c      	mov	r4, r1
   3518c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   35190:	4293      	cmp	r3, r2
   35192:	bfb8      	it	lt
   35194:	4613      	movlt	r3, r2
   35196:	6033      	str	r3, [r6, #0]
   35198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3519c:	b10a      	cbz	r2, 351a2 <_printf_common+0x26>
   3519e:	3301      	adds	r3, #1
   351a0:	6033      	str	r3, [r6, #0]
   351a2:	6823      	ldr	r3, [r4, #0]
   351a4:	0699      	lsls	r1, r3, #26
   351a6:	bf42      	ittt	mi
   351a8:	6833      	ldrmi	r3, [r6, #0]
   351aa:	3302      	addmi	r3, #2
   351ac:	6033      	strmi	r3, [r6, #0]
   351ae:	6825      	ldr	r5, [r4, #0]
   351b0:	f015 0506 	ands.w	r5, r5, #6
   351b4:	d106      	bne.n	351c4 <_printf_common+0x48>
   351b6:	f104 0a19 	add.w	sl, r4, #25
   351ba:	68e3      	ldr	r3, [r4, #12]
   351bc:	6832      	ldr	r2, [r6, #0]
   351be:	1a9b      	subs	r3, r3, r2
   351c0:	42ab      	cmp	r3, r5
   351c2:	dc2b      	bgt.n	3521c <_printf_common+0xa0>
   351c4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   351c8:	6822      	ldr	r2, [r4, #0]
   351ca:	3b00      	subs	r3, #0
   351cc:	bf18      	it	ne
   351ce:	2301      	movne	r3, #1
   351d0:	0692      	lsls	r2, r2, #26
   351d2:	d430      	bmi.n	35236 <_printf_common+0xba>
   351d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   351d8:	4641      	mov	r1, r8
   351da:	4638      	mov	r0, r7
   351dc:	47c8      	blx	r9
   351de:	3001      	adds	r0, #1
   351e0:	d023      	beq.n	3522a <_printf_common+0xae>
   351e2:	6823      	ldr	r3, [r4, #0]
   351e4:	341a      	adds	r4, #26
   351e6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   351ea:	f003 0306 	and.w	r3, r3, #6
   351ee:	2b04      	cmp	r3, #4
   351f0:	bf0a      	itet	eq
   351f2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   351f6:	2500      	movne	r5, #0
   351f8:	6833      	ldreq	r3, [r6, #0]
   351fa:	f04f 0600 	mov.w	r6, #0
   351fe:	bf08      	it	eq
   35200:	1aed      	subeq	r5, r5, r3
   35202:	f854 3c12 	ldr.w	r3, [r4, #-18]
   35206:	bf08      	it	eq
   35208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3520c:	4293      	cmp	r3, r2
   3520e:	bfc4      	itt	gt
   35210:	1a9b      	subgt	r3, r3, r2
   35212:	18ed      	addgt	r5, r5, r3
   35214:	42b5      	cmp	r5, r6
   35216:	d11a      	bne.n	3524e <_printf_common+0xd2>
   35218:	2000      	movs	r0, #0
   3521a:	e008      	b.n	3522e <_printf_common+0xb2>
   3521c:	2301      	movs	r3, #1
   3521e:	4652      	mov	r2, sl
   35220:	4641      	mov	r1, r8
   35222:	4638      	mov	r0, r7
   35224:	47c8      	blx	r9
   35226:	3001      	adds	r0, #1
   35228:	d103      	bne.n	35232 <_printf_common+0xb6>
   3522a:	f04f 30ff 	mov.w	r0, #4294967295
   3522e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35232:	3501      	adds	r5, #1
   35234:	e7c1      	b.n	351ba <_printf_common+0x3e>
   35236:	18e1      	adds	r1, r4, r3
   35238:	1c5a      	adds	r2, r3, #1
   3523a:	2030      	movs	r0, #48	; 0x30
   3523c:	3302      	adds	r3, #2
   3523e:	4422      	add	r2, r4
   35240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   35244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   35248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3524c:	e7c2      	b.n	351d4 <_printf_common+0x58>
   3524e:	2301      	movs	r3, #1
   35250:	4622      	mov	r2, r4
   35252:	4641      	mov	r1, r8
   35254:	4638      	mov	r0, r7
   35256:	47c8      	blx	r9
   35258:	3001      	adds	r0, #1
   3525a:	d0e6      	beq.n	3522a <_printf_common+0xae>
   3525c:	3601      	adds	r6, #1
   3525e:	e7d9      	b.n	35214 <_printf_common+0x98>

00035260 <__sprintf_chk>:
   35260:	b408      	push	{r3}
   35262:	b517      	push	{r0, r1, r2, r4, lr}
   35264:	ab05      	add	r3, sp, #20
   35266:	1e14      	subs	r4, r2, #0
   35268:	f853 1b04 	ldr.w	r1, [r3], #4
   3526c:	9301      	str	r3, [sp, #4]
   3526e:	da07      	bge.n	35280 <__sprintf_chk+0x20>
   35270:	461a      	mov	r2, r3
   35272:	f7f7 fafb 	bl	2c86c <vsiprintf>
   35276:	b003      	add	sp, #12
   35278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3527c:	b001      	add	sp, #4
   3527e:	4770      	bx	lr
   35280:	460a      	mov	r2, r1
   35282:	4621      	mov	r1, r4
   35284:	f7f7 face 	bl	2c824 <vsniprintf>
   35288:	2800      	cmp	r0, #0
   3528a:	dbf4      	blt.n	35276 <__sprintf_chk+0x16>
   3528c:	42a0      	cmp	r0, r4
   3528e:	d3f2      	bcc.n	35276 <__sprintf_chk+0x16>
   35290:	f7dc f8ba 	bl	11408 <__chk_fail>

00035294 <__sread>:
   35294:	b510      	push	{r4, lr}
   35296:	460c      	mov	r4, r1
   35298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3529c:	f7f8 ff2a 	bl	2e0f4 <_read_r>
   352a0:	2800      	cmp	r0, #0
   352a2:	bfab      	itete	ge
   352a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   352a6:	89a3      	ldrhlt	r3, [r4, #12]
   352a8:	181b      	addge	r3, r3, r0
   352aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   352ae:	bfac      	ite	ge
   352b0:	6563      	strge	r3, [r4, #84]	; 0x54
   352b2:	81a3      	strhlt	r3, [r4, #12]
   352b4:	bd10      	pop	{r4, pc}

000352b6 <__seofread>:
   352b6:	2000      	movs	r0, #0
   352b8:	4770      	bx	lr

000352ba <__swrite>:
   352ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   352be:	461f      	mov	r7, r3
   352c0:	898b      	ldrh	r3, [r1, #12]
   352c2:	4605      	mov	r5, r0
   352c4:	460c      	mov	r4, r1
   352c6:	05db      	lsls	r3, r3, #23
   352c8:	4616      	mov	r6, r2
   352ca:	d505      	bpl.n	352d8 <__swrite+0x1e>
   352cc:	2302      	movs	r3, #2
   352ce:	2200      	movs	r2, #0
   352d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   352d4:	f7f7 ff12 	bl	2d0fc <_lseek_r>
   352d8:	89a3      	ldrh	r3, [r4, #12]
   352da:	4632      	mov	r2, r6
   352dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   352e0:	4628      	mov	r0, r5
   352e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   352e6:	81a3      	strh	r3, [r4, #12]
   352e8:	463b      	mov	r3, r7
   352ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   352ee:	f7f7 bb47 	b.w	2c980 <_write_r>

000352f2 <__sseek>:
   352f2:	b510      	push	{r4, lr}
   352f4:	460c      	mov	r4, r1
   352f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   352fa:	f7f7 feff 	bl	2d0fc <_lseek_r>
   352fe:	1c43      	adds	r3, r0, #1
   35300:	89a3      	ldrh	r3, [r4, #12]
   35302:	bf15      	itete	ne
   35304:	6560      	strne	r0, [r4, #84]	; 0x54
   35306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3530a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3530e:	81a3      	strheq	r3, [r4, #12]
   35310:	bf18      	it	ne
   35312:	81a3      	strhne	r3, [r4, #12]
   35314:	bd10      	pop	{r4, pc}

00035316 <__sclose>:
   35316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3531a:	f7f7 bbaf 	b.w	2ca7c <_close_r>

0003531e <__strcat_chk>:
   3531e:	b538      	push	{r3, r4, r5, lr}
   35320:	4604      	mov	r4, r0
   35322:	4623      	mov	r3, r4
   35324:	f814 5b01 	ldrb.w	r5, [r4], #1
   35328:	b935      	cbnz	r5, 35338 <__strcat_chk+0x1a>
   3532a:	3901      	subs	r1, #1
   3532c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   35330:	b93c      	cbnz	r4, 35342 <__strcat_chk+0x24>
   35332:	b112      	cbz	r2, 3533a <__strcat_chk+0x1c>
   35334:	701c      	strb	r4, [r3, #0]
   35336:	bd38      	pop	{r3, r4, r5, pc}
   35338:	b90a      	cbnz	r2, 3533e <__strcat_chk+0x20>
   3533a:	f7dc f865 	bl	11408 <__chk_fail>
   3533e:	3a01      	subs	r2, #1
   35340:	e7ef      	b.n	35322 <__strcat_chk+0x4>
   35342:	2a00      	cmp	r2, #0
   35344:	d0f9      	beq.n	3533a <__strcat_chk+0x1c>
   35346:	3a01      	subs	r2, #1
   35348:	f803 4b01 	strb.w	r4, [r3], #1
   3534c:	e7ee      	b.n	3532c <__strcat_chk+0xe>

0003534e <strchr>:
   3534e:	b2c9      	uxtb	r1, r1
   35350:	4603      	mov	r3, r0
   35352:	4618      	mov	r0, r3
   35354:	f813 2b01 	ldrb.w	r2, [r3], #1
   35358:	b112      	cbz	r2, 35360 <strchr+0x12>
   3535a:	428a      	cmp	r2, r1
   3535c:	d1f9      	bne.n	35352 <strchr+0x4>
   3535e:	4770      	bx	lr
   35360:	2900      	cmp	r1, #0
   35362:	bf18      	it	ne
   35364:	2000      	movne	r0, #0
   35366:	4770      	bx	lr

00035368 <strcpy>:
   35368:	4603      	mov	r3, r0
   3536a:	f811 2b01 	ldrb.w	r2, [r1], #1
   3536e:	f803 2b01 	strb.w	r2, [r3], #1
   35372:	2a00      	cmp	r2, #0
   35374:	d1f9      	bne.n	3536a <strcpy+0x2>
   35376:	4770      	bx	lr

00035378 <strncmp>:
   35378:	b510      	push	{r4, lr}
   3537a:	b16a      	cbz	r2, 35398 <strncmp+0x20>
   3537c:	3901      	subs	r1, #1
   3537e:	1884      	adds	r4, r0, r2
   35380:	f810 2b01 	ldrb.w	r2, [r0], #1
   35384:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   35388:	429a      	cmp	r2, r3
   3538a:	d103      	bne.n	35394 <strncmp+0x1c>
   3538c:	42a0      	cmp	r0, r4
   3538e:	d001      	beq.n	35394 <strncmp+0x1c>
   35390:	2a00      	cmp	r2, #0
   35392:	d1f5      	bne.n	35380 <strncmp+0x8>
   35394:	1ad0      	subs	r0, r2, r3
   35396:	bd10      	pop	{r4, pc}
   35398:	4610      	mov	r0, r2
   3539a:	e7fc      	b.n	35396 <strncmp+0x1e>

0003539c <strncpy>:
   3539c:	3901      	subs	r1, #1
   3539e:	4603      	mov	r3, r0
   353a0:	b510      	push	{r4, lr}
   353a2:	b132      	cbz	r2, 353b2 <strncpy+0x16>
   353a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   353a8:	3a01      	subs	r2, #1
   353aa:	f803 4b01 	strb.w	r4, [r3], #1
   353ae:	2c00      	cmp	r4, #0
   353b0:	d1f7      	bne.n	353a2 <strncpy+0x6>
   353b2:	441a      	add	r2, r3
   353b4:	2100      	movs	r1, #0
   353b6:	4293      	cmp	r3, r2
   353b8:	d100      	bne.n	353bc <strncpy+0x20>
   353ba:	bd10      	pop	{r4, pc}
   353bc:	f803 1b01 	strb.w	r1, [r3], #1
   353c0:	e7f9      	b.n	353b6 <strncpy+0x1a>

000353c2 <strnlen>:
   353c2:	4602      	mov	r2, r0
   353c4:	4401      	add	r1, r0
   353c6:	b510      	push	{r4, lr}
   353c8:	428a      	cmp	r2, r1
   353ca:	4613      	mov	r3, r2
   353cc:	d003      	beq.n	353d6 <strnlen+0x14>
   353ce:	781c      	ldrb	r4, [r3, #0]
   353d0:	3201      	adds	r2, #1
   353d2:	2c00      	cmp	r4, #0
   353d4:	d1f8      	bne.n	353c8 <strnlen+0x6>
   353d6:	1a18      	subs	r0, r3, r0
   353d8:	bd10      	pop	{r4, pc}

000353da <strrchr>:
   353da:	b538      	push	{r3, r4, r5, lr}
   353dc:	4603      	mov	r3, r0
   353de:	460c      	mov	r4, r1
   353e0:	b969      	cbnz	r1, 353fe <strrchr+0x24>
   353e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   353e6:	f7ff bfb2 	b.w	3534e <strchr>
   353ea:	1c43      	adds	r3, r0, #1
   353ec:	4605      	mov	r5, r0
   353ee:	4621      	mov	r1, r4
   353f0:	4618      	mov	r0, r3
   353f2:	f7ff ffac 	bl	3534e <strchr>
   353f6:	2800      	cmp	r0, #0
   353f8:	d1f7      	bne.n	353ea <strrchr+0x10>
   353fa:	4628      	mov	r0, r5
   353fc:	bd38      	pop	{r3, r4, r5, pc}
   353fe:	2500      	movs	r5, #0
   35400:	e7f5      	b.n	353ee <strrchr+0x14>

00035402 <strstr>:
   35402:	780a      	ldrb	r2, [r1, #0]
   35404:	b570      	push	{r4, r5, r6, lr}
   35406:	b96a      	cbnz	r2, 35424 <strstr+0x22>
   35408:	bd70      	pop	{r4, r5, r6, pc}
   3540a:	429a      	cmp	r2, r3
   3540c:	d109      	bne.n	35422 <strstr+0x20>
   3540e:	460c      	mov	r4, r1
   35410:	4605      	mov	r5, r0
   35412:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   35416:	2b00      	cmp	r3, #0
   35418:	d0f6      	beq.n	35408 <strstr+0x6>
   3541a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3541e:	429e      	cmp	r6, r3
   35420:	d0f7      	beq.n	35412 <strstr+0x10>
   35422:	3001      	adds	r0, #1
   35424:	7803      	ldrb	r3, [r0, #0]
   35426:	2b00      	cmp	r3, #0
   35428:	d1ef      	bne.n	3540a <strstr+0x8>
   3542a:	4618      	mov	r0, r3
   3542c:	e7ec      	b.n	35408 <strstr+0x6>

0003542e <sulp>:
   3542e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35432:	4690      	mov	r8, r2
   35434:	460f      	mov	r7, r1
   35436:	f7f8 f9cf 	bl	2d7d8 <__ulp>
   3543a:	4604      	mov	r4, r0
   3543c:	460d      	mov	r5, r1
   3543e:	f1b8 0f00 	cmp.w	r8, #0
   35442:	d011      	beq.n	35468 <sulp+0x3a>
   35444:	f3c7 530a 	ubfx	r3, r7, #20, #11
   35448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   3544c:	2b00      	cmp	r3, #0
   3544e:	dd0b      	ble.n	35468 <sulp+0x3a>
   35450:	051b      	lsls	r3, r3, #20
   35452:	2400      	movs	r4, #0
   35454:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   35458:	4622      	mov	r2, r4
   3545a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   3545e:	462b      	mov	r3, r5
   35460:	f7d3 f95e 	bl	8720 <__aeabi_dmul>
   35464:	4604      	mov	r4, r0
   35466:	460d      	mov	r5, r1
   35468:	4620      	mov	r0, r4
   3546a:	4629      	mov	r1, r5
   3546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035470 <_strtol_r>:
   35470:	f7f7 b836 	b.w	2c4e0 <_strtol_l.constprop.0>

00035474 <_strtoul_r>:
   35474:	f7f7 b95a 	b.w	2c72c <_strtoul_l.constprop.0>

00035478 <_vsniprintf_r>:
   35478:	b530      	push	{r4, r5, lr}
   3547a:	4614      	mov	r4, r2
   3547c:	b09b      	sub	sp, #108	; 0x6c
   3547e:	4605      	mov	r5, r0
   35480:	461a      	mov	r2, r3
   35482:	2c00      	cmp	r4, #0
   35484:	da05      	bge.n	35492 <_vsniprintf_r+0x1a>
   35486:	238b      	movs	r3, #139	; 0x8b
   35488:	6003      	str	r3, [r0, #0]
   3548a:	f04f 30ff 	mov.w	r0, #4294967295
   3548e:	b01b      	add	sp, #108	; 0x6c
   35490:	bd30      	pop	{r4, r5, pc}
   35492:	f44f 7302 	mov.w	r3, #520	; 0x208
   35496:	9100      	str	r1, [sp, #0]
   35498:	9104      	str	r1, [sp, #16]
   3549a:	4669      	mov	r1, sp
   3549c:	f8ad 300c 	strh.w	r3, [sp, #12]
   354a0:	bf14      	ite	ne
   354a2:	f104 33ff 	addne.w	r3, r4, #4294967295
   354a6:	4623      	moveq	r3, r4
   354a8:	9302      	str	r3, [sp, #8]
   354aa:	9305      	str	r3, [sp, #20]
   354ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   354b0:	f8ad 300e 	strh.w	r3, [sp, #14]
   354b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   354b6:	f7f8 fa51 	bl	2d95c <_svfiprintf_r>
   354ba:	1c43      	adds	r3, r0, #1
   354bc:	bfbc      	itt	lt
   354be:	238b      	movlt	r3, #139	; 0x8b
   354c0:	602b      	strlt	r3, [r5, #0]
   354c2:	2c00      	cmp	r4, #0
   354c4:	d0e3      	beq.n	3548e <_vsniprintf_r+0x16>
   354c6:	9b00      	ldr	r3, [sp, #0]
   354c8:	2200      	movs	r2, #0
   354ca:	701a      	strb	r2, [r3, #0]
   354cc:	e7df      	b.n	3548e <_vsniprintf_r+0x16>

000354ce <quorem>:
   354ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   354d2:	6903      	ldr	r3, [r0, #16]
   354d4:	4607      	mov	r7, r0
   354d6:	690c      	ldr	r4, [r1, #16]
   354d8:	42a3      	cmp	r3, r4
   354da:	f2c0 8083 	blt.w	355e4 <quorem+0x116>
   354de:	3c01      	subs	r4, #1
   354e0:	f100 0514 	add.w	r5, r0, #20
   354e4:	f101 0814 	add.w	r8, r1, #20
   354e8:	00a3      	lsls	r3, r4, #2
   354ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   354ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   354f2:	9300      	str	r3, [sp, #0]
   354f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   354f8:	9301      	str	r3, [sp, #4]
   354fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   354fe:	3301      	adds	r3, #1
   35500:	429a      	cmp	r2, r3
   35502:	fbb2 f6f3 	udiv	r6, r2, r3
   35506:	d331      	bcc.n	3556c <quorem+0x9e>
   35508:	f04f 0a00 	mov.w	sl, #0
   3550c:	46c4      	mov	ip, r8
   3550e:	46ae      	mov	lr, r5
   35510:	46d3      	mov	fp, sl
   35512:	f85c 3b04 	ldr.w	r3, [ip], #4
   35516:	b298      	uxth	r0, r3
   35518:	45e1      	cmp	r9, ip
   3551a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3551e:	fb06 a000 	mla	r0, r6, r0, sl
   35522:	ea4f 4210 	mov.w	r2, r0, lsr #16
   35526:	b280      	uxth	r0, r0
   35528:	fb06 2303 	mla	r3, r6, r3, r2
   3552c:	f8de 2000 	ldr.w	r2, [lr]
   35530:	b292      	uxth	r2, r2
   35532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   35536:	eba2 0200 	sub.w	r2, r2, r0
   3553a:	b29b      	uxth	r3, r3
   3553c:	f8de 0000 	ldr.w	r0, [lr]
   35540:	445a      	add	r2, fp
   35542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   35546:	b292      	uxth	r2, r2
   35548:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   3554c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   35550:	ea4f 4b23 	mov.w	fp, r3, asr #16
   35554:	f84e 2b04 	str.w	r2, [lr], #4
   35558:	d2db      	bcs.n	35512 <quorem+0x44>
   3555a:	9b00      	ldr	r3, [sp, #0]
   3555c:	58eb      	ldr	r3, [r5, r3]
   3555e:	b92b      	cbnz	r3, 3556c <quorem+0x9e>
   35560:	9b01      	ldr	r3, [sp, #4]
   35562:	3b04      	subs	r3, #4
   35564:	429d      	cmp	r5, r3
   35566:	461a      	mov	r2, r3
   35568:	d330      	bcc.n	355cc <quorem+0xfe>
   3556a:	613c      	str	r4, [r7, #16]
   3556c:	4638      	mov	r0, r7
   3556e:	f000 fa9c 	bl	35aaa <__mcmp>
   35572:	2800      	cmp	r0, #0
   35574:	db26      	blt.n	355c4 <quorem+0xf6>
   35576:	4629      	mov	r1, r5
   35578:	2000      	movs	r0, #0
   3557a:	f858 2b04 	ldr.w	r2, [r8], #4
   3557e:	f8d1 c000 	ldr.w	ip, [r1]
   35582:	fa1f fe82 	uxth.w	lr, r2
   35586:	45c1      	cmp	r9, r8
   35588:	fa1f f38c 	uxth.w	r3, ip
   3558c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   35590:	eba3 030e 	sub.w	r3, r3, lr
   35594:	4403      	add	r3, r0
   35596:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   3559a:	b29b      	uxth	r3, r3
   3559c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   355a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   355a4:	ea4f 4022 	mov.w	r0, r2, asr #16
   355a8:	f841 3b04 	str.w	r3, [r1], #4
   355ac:	d2e5      	bcs.n	3557a <quorem+0xac>
   355ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   355b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   355b6:	b922      	cbnz	r2, 355c2 <quorem+0xf4>
   355b8:	3b04      	subs	r3, #4
   355ba:	429d      	cmp	r5, r3
   355bc:	461a      	mov	r2, r3
   355be:	d30b      	bcc.n	355d8 <quorem+0x10a>
   355c0:	613c      	str	r4, [r7, #16]
   355c2:	3601      	adds	r6, #1
   355c4:	4630      	mov	r0, r6
   355c6:	b003      	add	sp, #12
   355c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   355cc:	6812      	ldr	r2, [r2, #0]
   355ce:	3b04      	subs	r3, #4
   355d0:	2a00      	cmp	r2, #0
   355d2:	d1ca      	bne.n	3556a <quorem+0x9c>
   355d4:	3c01      	subs	r4, #1
   355d6:	e7c5      	b.n	35564 <quorem+0x96>
   355d8:	6812      	ldr	r2, [r2, #0]
   355da:	3b04      	subs	r3, #4
   355dc:	2a00      	cmp	r2, #0
   355de:	d1ef      	bne.n	355c0 <quorem+0xf2>
   355e0:	3c01      	subs	r4, #1
   355e2:	e7ea      	b.n	355ba <quorem+0xec>
   355e4:	2000      	movs	r0, #0
   355e6:	e7ee      	b.n	355c6 <quorem+0xf8>

000355e8 <__sflush_r>:
   355e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   355ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   355ee:	0717      	lsls	r7, r2, #28
   355f0:	4605      	mov	r5, r0
   355f2:	460c      	mov	r4, r1
   355f4:	d456      	bmi.n	356a4 <__sflush_r+0xbc>
   355f6:	684b      	ldr	r3, [r1, #4]
   355f8:	2b00      	cmp	r3, #0
   355fa:	dc02      	bgt.n	35602 <__sflush_r+0x1a>
   355fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   355fe:	2b00      	cmp	r3, #0
   35600:	dd3d      	ble.n	3567e <__sflush_r+0x96>
   35602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   35604:	2e00      	cmp	r6, #0
   35606:	d03a      	beq.n	3567e <__sflush_r+0x96>
   35608:	2300      	movs	r3, #0
   3560a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3560e:	682f      	ldr	r7, [r5, #0]
   35610:	6a21      	ldr	r1, [r4, #32]
   35612:	602b      	str	r3, [r5, #0]
   35614:	d025      	beq.n	35662 <__sflush_r+0x7a>
   35616:	6d62      	ldr	r2, [r4, #84]	; 0x54
   35618:	89a3      	ldrh	r3, [r4, #12]
   3561a:	0758      	lsls	r0, r3, #29
   3561c:	d505      	bpl.n	3562a <__sflush_r+0x42>
   3561e:	6863      	ldr	r3, [r4, #4]
   35620:	1ad2      	subs	r2, r2, r3
   35622:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35624:	b10b      	cbz	r3, 3562a <__sflush_r+0x42>
   35626:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35628:	1ad2      	subs	r2, r2, r3
   3562a:	6a21      	ldr	r1, [r4, #32]
   3562c:	2300      	movs	r3, #0
   3562e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   35630:	4628      	mov	r0, r5
   35632:	47b0      	blx	r6
   35634:	1c41      	adds	r1, r0, #1
   35636:	d024      	beq.n	35682 <__sflush_r+0x9a>
   35638:	2300      	movs	r3, #0
   3563a:	6063      	str	r3, [r4, #4]
   3563c:	6923      	ldr	r3, [r4, #16]
   3563e:	6023      	str	r3, [r4, #0]
   35640:	89a3      	ldrh	r3, [r4, #12]
   35642:	04da      	lsls	r2, r3, #19
   35644:	d500      	bpl.n	35648 <__sflush_r+0x60>
   35646:	6560      	str	r0, [r4, #84]	; 0x54
   35648:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3564a:	602f      	str	r7, [r5, #0]
   3564c:	b1b9      	cbz	r1, 3567e <__sflush_r+0x96>
   3564e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   35652:	4299      	cmp	r1, r3
   35654:	d002      	beq.n	3565c <__sflush_r+0x74>
   35656:	4628      	mov	r0, r5
   35658:	f7f6 fab8 	bl	2bbcc <_free_r>
   3565c:	2300      	movs	r3, #0
   3565e:	6363      	str	r3, [r4, #52]	; 0x34
   35660:	e00d      	b.n	3567e <__sflush_r+0x96>
   35662:	2301      	movs	r3, #1
   35664:	4628      	mov	r0, r5
   35666:	47b0      	blx	r6
   35668:	1c46      	adds	r6, r0, #1
   3566a:	4602      	mov	r2, r0
   3566c:	d1d4      	bne.n	35618 <__sflush_r+0x30>
   3566e:	682b      	ldr	r3, [r5, #0]
   35670:	2b00      	cmp	r3, #0
   35672:	d0d1      	beq.n	35618 <__sflush_r+0x30>
   35674:	2b1d      	cmp	r3, #29
   35676:	d001      	beq.n	3567c <__sflush_r+0x94>
   35678:	2b16      	cmp	r3, #22
   3567a:	d129      	bne.n	356d0 <__sflush_r+0xe8>
   3567c:	602f      	str	r7, [r5, #0]
   3567e:	2000      	movs	r0, #0
   35680:	e02d      	b.n	356de <__sflush_r+0xf6>
   35682:	682a      	ldr	r2, [r5, #0]
   35684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   35688:	b142      	cbz	r2, 3569c <__sflush_r+0xb4>
   3568a:	2a1d      	cmp	r2, #29
   3568c:	d001      	beq.n	35692 <__sflush_r+0xaa>
   3568e:	2a16      	cmp	r2, #22
   35690:	d120      	bne.n	356d4 <__sflush_r+0xec>
   35692:	2300      	movs	r3, #0
   35694:	6063      	str	r3, [r4, #4]
   35696:	6923      	ldr	r3, [r4, #16]
   35698:	6023      	str	r3, [r4, #0]
   3569a:	e7d5      	b.n	35648 <__sflush_r+0x60>
   3569c:	6062      	str	r2, [r4, #4]
   3569e:	6922      	ldr	r2, [r4, #16]
   356a0:	6022      	str	r2, [r4, #0]
   356a2:	e7ce      	b.n	35642 <__sflush_r+0x5a>
   356a4:	690f      	ldr	r7, [r1, #16]
   356a6:	2f00      	cmp	r7, #0
   356a8:	d0e9      	beq.n	3567e <__sflush_r+0x96>
   356aa:	0793      	lsls	r3, r2, #30
   356ac:	680e      	ldr	r6, [r1, #0]
   356ae:	600f      	str	r7, [r1, #0]
   356b0:	bf0c      	ite	eq
   356b2:	694b      	ldreq	r3, [r1, #20]
   356b4:	2300      	movne	r3, #0
   356b6:	1bf6      	subs	r6, r6, r7
   356b8:	608b      	str	r3, [r1, #8]
   356ba:	2e00      	cmp	r6, #0
   356bc:	dddf      	ble.n	3567e <__sflush_r+0x96>
   356be:	4633      	mov	r3, r6
   356c0:	463a      	mov	r2, r7
   356c2:	6a21      	ldr	r1, [r4, #32]
   356c4:	4628      	mov	r0, r5
   356c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   356ca:	47e0      	blx	ip
   356cc:	2800      	cmp	r0, #0
   356ce:	dc07      	bgt.n	356e0 <__sflush_r+0xf8>
   356d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   356d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   356d8:	f04f 30ff 	mov.w	r0, #4294967295
   356dc:	81a3      	strh	r3, [r4, #12]
   356de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   356e0:	4407      	add	r7, r0
   356e2:	1a36      	subs	r6, r6, r0
   356e4:	e7e9      	b.n	356ba <__sflush_r+0xd2>

000356e6 <__sfmoreglue>:
   356e6:	b570      	push	{r4, r5, r6, lr}
   356e8:	2368      	movs	r3, #104	; 0x68
   356ea:	1e4d      	subs	r5, r1, #1
   356ec:	460e      	mov	r6, r1
   356ee:	435d      	muls	r5, r3
   356f0:	f105 0174 	add.w	r1, r5, #116	; 0x74
   356f4:	f7f6 fab4 	bl	2bc60 <_malloc_r>
   356f8:	4604      	mov	r4, r0
   356fa:	b140      	cbz	r0, 3570e <__sfmoreglue+0x28>
   356fc:	2100      	movs	r1, #0
   356fe:	f105 0268 	add.w	r2, r5, #104	; 0x68
   35702:	e9c0 1600 	strd	r1, r6, [r0]
   35706:	300c      	adds	r0, #12
   35708:	60a0      	str	r0, [r4, #8]
   3570a:	f7ff fc8f 	bl	3502c <memset>
   3570e:	4620      	mov	r0, r4
   35710:	bd70      	pop	{r4, r5, r6, pc}

00035712 <_fwalk_reent>:
   35712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35716:	4606      	mov	r6, r0
   35718:	4688      	mov	r8, r1
   3571a:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3571e:	2700      	movs	r7, #0
   35720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   35724:	f1b9 0901 	subs.w	r9, r9, #1
   35728:	d505      	bpl.n	35736 <_fwalk_reent+0x24>
   3572a:	6824      	ldr	r4, [r4, #0]
   3572c:	2c00      	cmp	r4, #0
   3572e:	d1f7      	bne.n	35720 <_fwalk_reent+0xe>
   35730:	4638      	mov	r0, r7
   35732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35736:	89ab      	ldrh	r3, [r5, #12]
   35738:	2b01      	cmp	r3, #1
   3573a:	d907      	bls.n	3574c <_fwalk_reent+0x3a>
   3573c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   35740:	3301      	adds	r3, #1
   35742:	d003      	beq.n	3574c <_fwalk_reent+0x3a>
   35744:	4629      	mov	r1, r5
   35746:	4630      	mov	r0, r6
   35748:	47c0      	blx	r8
   3574a:	4307      	orrs	r7, r0
   3574c:	3568      	adds	r5, #104	; 0x68
   3574e:	e7e9      	b.n	35724 <_fwalk_reent+0x12>

00035750 <rshift>:
   35750:	6903      	ldr	r3, [r0, #16]
   35752:	114a      	asrs	r2, r1, #5
   35754:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   35758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3575c:	dc04      	bgt.n	35768 <rshift+0x18>
   3575e:	2300      	movs	r3, #0
   35760:	6103      	str	r3, [r0, #16]
   35762:	2300      	movs	r3, #0
   35764:	6143      	str	r3, [r0, #20]
   35766:	e031      	b.n	357cc <rshift+0x7c>
   35768:	f100 0414 	add.w	r4, r0, #20
   3576c:	f011 011f 	ands.w	r1, r1, #31
   35770:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   35774:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   35778:	d10c      	bne.n	35794 <rshift+0x44>
   3577a:	f100 0710 	add.w	r7, r0, #16
   3577e:	4629      	mov	r1, r5
   35780:	42b1      	cmp	r1, r6
   35782:	d331      	bcc.n	357e8 <rshift+0x98>
   35784:	1a9b      	subs	r3, r3, r2
   35786:	1eea      	subs	r2, r5, #3
   35788:	009b      	lsls	r3, r3, #2
   3578a:	4296      	cmp	r6, r2
   3578c:	bf38      	it	cc
   3578e:	2300      	movcc	r3, #0
   35790:	4423      	add	r3, r4
   35792:	e015      	b.n	357c0 <rshift+0x70>
   35794:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   35798:	f1c1 0820 	rsb	r8, r1, #32
   3579c:	f105 0e04 	add.w	lr, r5, #4
   357a0:	46a1      	mov	r9, r4
   357a2:	40cf      	lsrs	r7, r1
   357a4:	4576      	cmp	r6, lr
   357a6:	46f4      	mov	ip, lr
   357a8:	d812      	bhi.n	357d0 <rshift+0x80>
   357aa:	1a9a      	subs	r2, r3, r2
   357ac:	3501      	adds	r5, #1
   357ae:	0092      	lsls	r2, r2, #2
   357b0:	3a04      	subs	r2, #4
   357b2:	42ae      	cmp	r6, r5
   357b4:	bf38      	it	cc
   357b6:	2200      	movcc	r2, #0
   357b8:	18a3      	adds	r3, r4, r2
   357ba:	50a7      	str	r7, [r4, r2]
   357bc:	b107      	cbz	r7, 357c0 <rshift+0x70>
   357be:	3304      	adds	r3, #4
   357c0:	1b1a      	subs	r2, r3, r4
   357c2:	42a3      	cmp	r3, r4
   357c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   357c8:	6102      	str	r2, [r0, #16]
   357ca:	d0ca      	beq.n	35762 <rshift+0x12>
   357cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   357d0:	f8dc c000 	ldr.w	ip, [ip]
   357d4:	fa0c fc08 	lsl.w	ip, ip, r8
   357d8:	ea4c 0707 	orr.w	r7, ip, r7
   357dc:	f849 7b04 	str.w	r7, [r9], #4
   357e0:	f85e 7b04 	ldr.w	r7, [lr], #4
   357e4:	40cf      	lsrs	r7, r1
   357e6:	e7dd      	b.n	357a4 <rshift+0x54>
   357e8:	f851 cb04 	ldr.w	ip, [r1], #4
   357ec:	f847 cf04 	str.w	ip, [r7, #4]!
   357f0:	e7c6      	b.n	35780 <rshift+0x30>

000357f2 <__hexdig_fun>:
   357f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   357f6:	2b09      	cmp	r3, #9
   357f8:	d802      	bhi.n	35800 <__hexdig_fun+0xe>
   357fa:	3820      	subs	r0, #32
   357fc:	b2c0      	uxtb	r0, r0
   357fe:	4770      	bx	lr
   35800:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   35804:	2b05      	cmp	r3, #5
   35806:	d801      	bhi.n	3580c <__hexdig_fun+0x1a>
   35808:	3847      	subs	r0, #71	; 0x47
   3580a:	e7f7      	b.n	357fc <__hexdig_fun+0xa>
   3580c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   35810:	2b05      	cmp	r3, #5
   35812:	d801      	bhi.n	35818 <__hexdig_fun+0x26>
   35814:	3827      	subs	r0, #39	; 0x27
   35816:	e7f1      	b.n	357fc <__hexdig_fun+0xa>
   35818:	2000      	movs	r0, #0
   3581a:	4770      	bx	lr

0003581c <L_shift>:
   3581c:	f1c2 0208 	rsb	r2, r2, #8
   35820:	0092      	lsls	r2, r2, #2
   35822:	b570      	push	{r4, r5, r6, lr}
   35824:	f1c2 0620 	rsb	r6, r2, #32
   35828:	6843      	ldr	r3, [r0, #4]
   3582a:	6804      	ldr	r4, [r0, #0]
   3582c:	fa03 f506 	lsl.w	r5, r3, r6
   35830:	40d3      	lsrs	r3, r2
   35832:	432c      	orrs	r4, r5
   35834:	6004      	str	r4, [r0, #0]
   35836:	f840 3f04 	str.w	r3, [r0, #4]!
   3583a:	4288      	cmp	r0, r1
   3583c:	d3f4      	bcc.n	35828 <L_shift+0xc>
   3583e:	bd70      	pop	{r4, r5, r6, pc}

00035840 <__match>:
   35840:	6803      	ldr	r3, [r0, #0]
   35842:	3301      	adds	r3, #1
   35844:	b530      	push	{r4, r5, lr}
   35846:	f811 4b01 	ldrb.w	r4, [r1], #1
   3584a:	b914      	cbnz	r4, 35852 <__match+0x12>
   3584c:	6003      	str	r3, [r0, #0]
   3584e:	2001      	movs	r0, #1
   35850:	bd30      	pop	{r4, r5, pc}
   35852:	f813 2b01 	ldrb.w	r2, [r3], #1
   35856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   3585a:	2d19      	cmp	r5, #25
   3585c:	bf98      	it	ls
   3585e:	3220      	addls	r2, #32
   35860:	42a2      	cmp	r2, r4
   35862:	d0f0      	beq.n	35846 <__match+0x6>
   35864:	2000      	movs	r0, #0
   35866:	e7f3      	b.n	35850 <__match+0x10>

00035868 <__hexnan>:
   35868:	680b      	ldr	r3, [r1, #0]
   3586a:	6801      	ldr	r1, [r0, #0]
   3586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35870:	115e      	asrs	r6, r3, #5
   35872:	f013 031f 	ands.w	r3, r3, #31
   35876:	f04f 0500 	mov.w	r5, #0
   3587a:	b087      	sub	sp, #28
   3587c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   35880:	4682      	mov	sl, r0
   35882:	4690      	mov	r8, r2
   35884:	46ab      	mov	fp, r5
   35886:	bf18      	it	ne
   35888:	3604      	addne	r6, #4
   3588a:	9301      	str	r3, [sp, #4]
   3588c:	9502      	str	r5, [sp, #8]
   3588e:	1f37      	subs	r7, r6, #4
   35890:	f846 5c04 	str.w	r5, [r6, #-4]
   35894:	46b9      	mov	r9, r7
   35896:	463c      	mov	r4, r7
   35898:	1c4b      	adds	r3, r1, #1
   3589a:	784a      	ldrb	r2, [r1, #1]
   3589c:	9303      	str	r3, [sp, #12]
   3589e:	b342      	cbz	r2, 358f2 <__hexnan+0x8a>
   358a0:	4610      	mov	r0, r2
   358a2:	9105      	str	r1, [sp, #20]
   358a4:	9204      	str	r2, [sp, #16]
   358a6:	f7ff ffa4 	bl	357f2 <__hexdig_fun>
   358aa:	2800      	cmp	r0, #0
   358ac:	d151      	bne.n	35952 <__hexnan+0xea>
   358ae:	9a04      	ldr	r2, [sp, #16]
   358b0:	9905      	ldr	r1, [sp, #20]
   358b2:	2a20      	cmp	r2, #32
   358b4:	d818      	bhi.n	358e8 <__hexnan+0x80>
   358b6:	9b02      	ldr	r3, [sp, #8]
   358b8:	459b      	cmp	fp, r3
   358ba:	dd13      	ble.n	358e4 <__hexnan+0x7c>
   358bc:	454c      	cmp	r4, r9
   358be:	d206      	bcs.n	358ce <__hexnan+0x66>
   358c0:	2d07      	cmp	r5, #7
   358c2:	dc04      	bgt.n	358ce <__hexnan+0x66>
   358c4:	462a      	mov	r2, r5
   358c6:	4649      	mov	r1, r9
   358c8:	4620      	mov	r0, r4
   358ca:	f7ff ffa7 	bl	3581c <L_shift>
   358ce:	4544      	cmp	r4, r8
   358d0:	d951      	bls.n	35976 <__hexnan+0x10e>
   358d2:	2300      	movs	r3, #0
   358d4:	f1a4 0904 	sub.w	r9, r4, #4
   358d8:	f8cd b008 	str.w	fp, [sp, #8]
   358dc:	f844 3c04 	str.w	r3, [r4, #-4]
   358e0:	461d      	mov	r5, r3
   358e2:	464c      	mov	r4, r9
   358e4:	9903      	ldr	r1, [sp, #12]
   358e6:	e7d7      	b.n	35898 <__hexnan+0x30>
   358e8:	2a29      	cmp	r2, #41	; 0x29
   358ea:	d156      	bne.n	3599a <__hexnan+0x132>
   358ec:	3102      	adds	r1, #2
   358ee:	f8ca 1000 	str.w	r1, [sl]
   358f2:	f1bb 0f00 	cmp.w	fp, #0
   358f6:	d050      	beq.n	3599a <__hexnan+0x132>
   358f8:	454c      	cmp	r4, r9
   358fa:	d206      	bcs.n	3590a <__hexnan+0xa2>
   358fc:	2d07      	cmp	r5, #7
   358fe:	dc04      	bgt.n	3590a <__hexnan+0xa2>
   35900:	462a      	mov	r2, r5
   35902:	4649      	mov	r1, r9
   35904:	4620      	mov	r0, r4
   35906:	f7ff ff89 	bl	3581c <L_shift>
   3590a:	4544      	cmp	r4, r8
   3590c:	d935      	bls.n	3597a <__hexnan+0x112>
   3590e:	f1a8 0204 	sub.w	r2, r8, #4
   35912:	4623      	mov	r3, r4
   35914:	f853 1b04 	ldr.w	r1, [r3], #4
   35918:	429f      	cmp	r7, r3
   3591a:	f842 1f04 	str.w	r1, [r2, #4]!
   3591e:	d2f9      	bcs.n	35914 <__hexnan+0xac>
   35920:	1b3b      	subs	r3, r7, r4
   35922:	3e03      	subs	r6, #3
   35924:	3401      	adds	r4, #1
   35926:	2200      	movs	r2, #0
   35928:	f023 0303 	bic.w	r3, r3, #3
   3592c:	3304      	adds	r3, #4
   3592e:	42b4      	cmp	r4, r6
   35930:	bf88      	it	hi
   35932:	2304      	movhi	r3, #4
   35934:	4443      	add	r3, r8
   35936:	f843 2b04 	str.w	r2, [r3], #4
   3593a:	429f      	cmp	r7, r3
   3593c:	d2fb      	bcs.n	35936 <__hexnan+0xce>
   3593e:	683b      	ldr	r3, [r7, #0]
   35940:	b91b      	cbnz	r3, 3594a <__hexnan+0xe2>
   35942:	4547      	cmp	r7, r8
   35944:	d127      	bne.n	35996 <__hexnan+0x12e>
   35946:	2301      	movs	r3, #1
   35948:	603b      	str	r3, [r7, #0]
   3594a:	2005      	movs	r0, #5
   3594c:	b007      	add	sp, #28
   3594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35952:	3501      	adds	r5, #1
   35954:	f10b 0b01 	add.w	fp, fp, #1
   35958:	2d08      	cmp	r5, #8
   3595a:	dd05      	ble.n	35968 <__hexnan+0x100>
   3595c:	4544      	cmp	r4, r8
   3595e:	d9c1      	bls.n	358e4 <__hexnan+0x7c>
   35960:	2300      	movs	r3, #0
   35962:	3c04      	subs	r4, #4
   35964:	2501      	movs	r5, #1
   35966:	6023      	str	r3, [r4, #0]
   35968:	6822      	ldr	r2, [r4, #0]
   3596a:	f000 000f 	and.w	r0, r0, #15
   3596e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   35972:	6020      	str	r0, [r4, #0]
   35974:	e7b6      	b.n	358e4 <__hexnan+0x7c>
   35976:	2508      	movs	r5, #8
   35978:	e7b4      	b.n	358e4 <__hexnan+0x7c>
   3597a:	9b01      	ldr	r3, [sp, #4]
   3597c:	2b00      	cmp	r3, #0
   3597e:	d0de      	beq.n	3593e <__hexnan+0xd6>
   35980:	f1c3 0320 	rsb	r3, r3, #32
   35984:	f04f 32ff 	mov.w	r2, #4294967295
   35988:	40da      	lsrs	r2, r3
   3598a:	f856 3c04 	ldr.w	r3, [r6, #-4]
   3598e:	4013      	ands	r3, r2
   35990:	f846 3c04 	str.w	r3, [r6, #-4]
   35994:	e7d3      	b.n	3593e <__hexnan+0xd6>
   35996:	3f04      	subs	r7, #4
   35998:	e7d1      	b.n	3593e <__hexnan+0xd6>
   3599a:	2004      	movs	r0, #4
   3599c:	e7d6      	b.n	3594c <__hexnan+0xe4>

0003599e <__swhatbuf_r>:
   3599e:	b570      	push	{r4, r5, r6, lr}
   359a0:	460c      	mov	r4, r1
   359a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   359a6:	b096      	sub	sp, #88	; 0x58
   359a8:	4615      	mov	r5, r2
   359aa:	2900      	cmp	r1, #0
   359ac:	461e      	mov	r6, r3
   359ae:	da0c      	bge.n	359ca <__swhatbuf_r+0x2c>
   359b0:	89a3      	ldrh	r3, [r4, #12]
   359b2:	2100      	movs	r1, #0
   359b4:	f013 0f80 	tst.w	r3, #128	; 0x80
   359b8:	bf14      	ite	ne
   359ba:	2340      	movne	r3, #64	; 0x40
   359bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   359c0:	2000      	movs	r0, #0
   359c2:	6031      	str	r1, [r6, #0]
   359c4:	602b      	str	r3, [r5, #0]
   359c6:	b016      	add	sp, #88	; 0x58
   359c8:	bd70      	pop	{r4, r5, r6, pc}
   359ca:	466a      	mov	r2, sp
   359cc:	f7f8 fbda 	bl	2e184 <_fstat_r>
   359d0:	2800      	cmp	r0, #0
   359d2:	dbed      	blt.n	359b0 <__swhatbuf_r+0x12>
   359d4:	9901      	ldr	r1, [sp, #4]
   359d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   359da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   359de:	4259      	negs	r1, r3
   359e0:	4159      	adcs	r1, r3
   359e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   359e6:	e7eb      	b.n	359c0 <__swhatbuf_r+0x22>

000359e8 <__ascii_mbtowc>:
   359e8:	b082      	sub	sp, #8
   359ea:	b901      	cbnz	r1, 359ee <__ascii_mbtowc+0x6>
   359ec:	a901      	add	r1, sp, #4
   359ee:	b142      	cbz	r2, 35a02 <__ascii_mbtowc+0x1a>
   359f0:	b14b      	cbz	r3, 35a06 <__ascii_mbtowc+0x1e>
   359f2:	7813      	ldrb	r3, [r2, #0]
   359f4:	600b      	str	r3, [r1, #0]
   359f6:	7812      	ldrb	r2, [r2, #0]
   359f8:	1e10      	subs	r0, r2, #0
   359fa:	bf18      	it	ne
   359fc:	2001      	movne	r0, #1
   359fe:	b002      	add	sp, #8
   35a00:	4770      	bx	lr
   35a02:	4610      	mov	r0, r2
   35a04:	e7fb      	b.n	359fe <__ascii_mbtowc+0x16>
   35a06:	f06f 0001 	mvn.w	r0, #1
   35a0a:	e7f8      	b.n	359fe <__ascii_mbtowc+0x16>

00035a0c <__hi0bits>:
   35a0c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   35a10:	4603      	mov	r3, r0
   35a12:	bf36      	itet	cc
   35a14:	0403      	lslcc	r3, r0, #16
   35a16:	2000      	movcs	r0, #0
   35a18:	2010      	movcc	r0, #16
   35a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   35a1e:	bf3c      	itt	cc
   35a20:	021b      	lslcc	r3, r3, #8
   35a22:	3008      	addcc	r0, #8
   35a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   35a28:	bf3c      	itt	cc
   35a2a:	011b      	lslcc	r3, r3, #4
   35a2c:	3004      	addcc	r0, #4
   35a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   35a32:	d303      	bcc.n	35a3c <__hi0bits+0x30>
   35a34:	2b00      	cmp	r3, #0
   35a36:	db0a      	blt.n	35a4e <__hi0bits+0x42>
   35a38:	3001      	adds	r0, #1
   35a3a:	4770      	bx	lr
   35a3c:	009b      	lsls	r3, r3, #2
   35a3e:	d501      	bpl.n	35a44 <__hi0bits+0x38>
   35a40:	3002      	adds	r0, #2
   35a42:	4770      	bx	lr
   35a44:	005b      	lsls	r3, r3, #1
   35a46:	d501      	bpl.n	35a4c <__hi0bits+0x40>
   35a48:	3003      	adds	r0, #3
   35a4a:	4770      	bx	lr
   35a4c:	2020      	movs	r0, #32
   35a4e:	4770      	bx	lr

00035a50 <__lo0bits>:
   35a50:	6803      	ldr	r3, [r0, #0]
   35a52:	4602      	mov	r2, r0
   35a54:	f013 0007 	ands.w	r0, r3, #7
   35a58:	d00b      	beq.n	35a72 <__lo0bits+0x22>
   35a5a:	07d9      	lsls	r1, r3, #31
   35a5c:	d421      	bmi.n	35aa2 <__lo0bits+0x52>
   35a5e:	0798      	lsls	r0, r3, #30
   35a60:	bf47      	ittee	mi
   35a62:	085b      	lsrmi	r3, r3, #1
   35a64:	2001      	movmi	r0, #1
   35a66:	089b      	lsrpl	r3, r3, #2
   35a68:	2002      	movpl	r0, #2
   35a6a:	bf4c      	ite	mi
   35a6c:	6013      	strmi	r3, [r2, #0]
   35a6e:	6013      	strpl	r3, [r2, #0]
   35a70:	4770      	bx	lr
   35a72:	b299      	uxth	r1, r3
   35a74:	b909      	cbnz	r1, 35a7a <__lo0bits+0x2a>
   35a76:	0c1b      	lsrs	r3, r3, #16
   35a78:	2010      	movs	r0, #16
   35a7a:	b2d9      	uxtb	r1, r3
   35a7c:	b909      	cbnz	r1, 35a82 <__lo0bits+0x32>
   35a7e:	3008      	adds	r0, #8
   35a80:	0a1b      	lsrs	r3, r3, #8
   35a82:	0719      	lsls	r1, r3, #28
   35a84:	bf04      	itt	eq
   35a86:	091b      	lsreq	r3, r3, #4
   35a88:	3004      	addeq	r0, #4
   35a8a:	0799      	lsls	r1, r3, #30
   35a8c:	bf04      	itt	eq
   35a8e:	089b      	lsreq	r3, r3, #2
   35a90:	3002      	addeq	r0, #2
   35a92:	07d9      	lsls	r1, r3, #31
   35a94:	d403      	bmi.n	35a9e <__lo0bits+0x4e>
   35a96:	085b      	lsrs	r3, r3, #1
   35a98:	f100 0001 	add.w	r0, r0, #1
   35a9c:	d003      	beq.n	35aa6 <__lo0bits+0x56>
   35a9e:	6013      	str	r3, [r2, #0]
   35aa0:	4770      	bx	lr
   35aa2:	2000      	movs	r0, #0
   35aa4:	4770      	bx	lr
   35aa6:	2020      	movs	r0, #32
   35aa8:	4770      	bx	lr

00035aaa <__mcmp>:
   35aaa:	4603      	mov	r3, r0
   35aac:	690a      	ldr	r2, [r1, #16]
   35aae:	6900      	ldr	r0, [r0, #16]
   35ab0:	1a80      	subs	r0, r0, r2
   35ab2:	b530      	push	{r4, r5, lr}
   35ab4:	d10e      	bne.n	35ad4 <__mcmp+0x2a>
   35ab6:	3314      	adds	r3, #20
   35ab8:	3114      	adds	r1, #20
   35aba:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   35abe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   35ac2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   35ac6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   35aca:	4295      	cmp	r5, r2
   35acc:	d003      	beq.n	35ad6 <__mcmp+0x2c>
   35ace:	d205      	bcs.n	35adc <__mcmp+0x32>
   35ad0:	f04f 30ff 	mov.w	r0, #4294967295
   35ad4:	bd30      	pop	{r4, r5, pc}
   35ad6:	42a3      	cmp	r3, r4
   35ad8:	d3f3      	bcc.n	35ac2 <__mcmp+0x18>
   35ada:	e7fb      	b.n	35ad4 <__mcmp+0x2a>
   35adc:	2001      	movs	r0, #1
   35ade:	e7f9      	b.n	35ad4 <__mcmp+0x2a>

00035ae0 <__ratio>:
   35ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ae4:	b085      	sub	sp, #20
   35ae6:	e9cd 1000 	strd	r1, r0, [sp]
   35aea:	a902      	add	r1, sp, #8
   35aec:	f7f7 fe94 	bl	2d818 <__b2d>
   35af0:	468b      	mov	fp, r1
   35af2:	4606      	mov	r6, r0
   35af4:	460f      	mov	r7, r1
   35af6:	9800      	ldr	r0, [sp, #0]
   35af8:	a903      	add	r1, sp, #12
   35afa:	f7f7 fe8d 	bl	2d818 <__b2d>
   35afe:	9b01      	ldr	r3, [sp, #4]
   35b00:	4689      	mov	r9, r1
   35b02:	460d      	mov	r5, r1
   35b04:	6919      	ldr	r1, [r3, #16]
   35b06:	4604      	mov	r4, r0
   35b08:	9b00      	ldr	r3, [sp, #0]
   35b0a:	4630      	mov	r0, r6
   35b0c:	691b      	ldr	r3, [r3, #16]
   35b0e:	1ac9      	subs	r1, r1, r3
   35b10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   35b14:	1a9b      	subs	r3, r3, r2
   35b16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   35b1a:	2b00      	cmp	r3, #0
   35b1c:	bfdb      	ittet	le
   35b1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   35b22:	462a      	movle	r2, r5
   35b24:	463a      	movgt	r2, r7
   35b26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   35b2a:	bfc8      	it	gt
   35b2c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   35b30:	4622      	mov	r2, r4
   35b32:	464b      	mov	r3, r9
   35b34:	4659      	mov	r1, fp
   35b36:	f7d2 ff1d 	bl	8974 <__aeabi_ddiv>
   35b3a:	b005      	add	sp, #20
   35b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00035b40 <__copybits>:
   35b40:	3901      	subs	r1, #1
   35b42:	f102 0314 	add.w	r3, r2, #20
   35b46:	1149      	asrs	r1, r1, #5
   35b48:	b570      	push	{r4, r5, r6, lr}
   35b4a:	3101      	adds	r1, #1
   35b4c:	6914      	ldr	r4, [r2, #16]
   35b4e:	1f05      	subs	r5, r0, #4
   35b50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   35b54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   35b58:	42a3      	cmp	r3, r4
   35b5a:	d30c      	bcc.n	35b76 <__copybits+0x36>
   35b5c:	1aa3      	subs	r3, r4, r2
   35b5e:	3211      	adds	r2, #17
   35b60:	3b11      	subs	r3, #17
   35b62:	f023 0303 	bic.w	r3, r3, #3
   35b66:	42a2      	cmp	r2, r4
   35b68:	bf88      	it	hi
   35b6a:	2300      	movhi	r3, #0
   35b6c:	4418      	add	r0, r3
   35b6e:	2300      	movs	r3, #0
   35b70:	4288      	cmp	r0, r1
   35b72:	d305      	bcc.n	35b80 <__copybits+0x40>
   35b74:	bd70      	pop	{r4, r5, r6, pc}
   35b76:	f853 6b04 	ldr.w	r6, [r3], #4
   35b7a:	f845 6f04 	str.w	r6, [r5, #4]!
   35b7e:	e7eb      	b.n	35b58 <__copybits+0x18>
   35b80:	f840 3b04 	str.w	r3, [r0], #4
   35b84:	e7f4      	b.n	35b70 <__copybits+0x30>

00035b86 <__any_on>:
   35b86:	f100 0214 	add.w	r2, r0, #20
   35b8a:	114b      	asrs	r3, r1, #5
   35b8c:	6900      	ldr	r0, [r0, #16]
   35b8e:	4298      	cmp	r0, r3
   35b90:	b510      	push	{r4, lr}
   35b92:	db11      	blt.n	35bb8 <__any_on+0x32>
   35b94:	dd0a      	ble.n	35bac <__any_on+0x26>
   35b96:	f011 011f 	ands.w	r1, r1, #31
   35b9a:	d007      	beq.n	35bac <__any_on+0x26>
   35b9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   35ba0:	fa24 f001 	lsr.w	r0, r4, r1
   35ba4:	fa00 f101 	lsl.w	r1, r0, r1
   35ba8:	428c      	cmp	r4, r1
   35baa:	d10b      	bne.n	35bc4 <__any_on+0x3e>
   35bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   35bb0:	4293      	cmp	r3, r2
   35bb2:	d803      	bhi.n	35bbc <__any_on+0x36>
   35bb4:	2000      	movs	r0, #0
   35bb6:	bd10      	pop	{r4, pc}
   35bb8:	4603      	mov	r3, r0
   35bba:	e7f7      	b.n	35bac <__any_on+0x26>
   35bbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   35bc0:	2900      	cmp	r1, #0
   35bc2:	d0f5      	beq.n	35bb0 <__any_on+0x2a>
   35bc4:	2001      	movs	r0, #1
   35bc6:	e7f6      	b.n	35bb6 <__any_on+0x30>

00035bc8 <_calloc_r>:
   35bc8:	b538      	push	{r3, r4, r5, lr}
   35bca:	fb02 f501 	mul.w	r5, r2, r1
   35bce:	4629      	mov	r1, r5
   35bd0:	f7f6 f846 	bl	2bc60 <_malloc_r>
   35bd4:	4604      	mov	r4, r0
   35bd6:	b118      	cbz	r0, 35be0 <_calloc_r+0x18>
   35bd8:	462a      	mov	r2, r5
   35bda:	2100      	movs	r1, #0
   35bdc:	f7ff fa26 	bl	3502c <memset>
   35be0:	4620      	mov	r0, r4
   35be2:	bd38      	pop	{r3, r4, r5, pc}

00035be4 <_realloc_r>:
   35be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35be6:	4607      	mov	r7, r0
   35be8:	4615      	mov	r5, r2
   35bea:	460c      	mov	r4, r1
   35bec:	b921      	cbnz	r1, 35bf8 <_realloc_r+0x14>
   35bee:	4611      	mov	r1, r2
   35bf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   35bf4:	f7f6 b834 	b.w	2bc60 <_malloc_r>
   35bf8:	b922      	cbnz	r2, 35c04 <_realloc_r+0x20>
   35bfa:	f7f5 ffe7 	bl	2bbcc <_free_r>
   35bfe:	2400      	movs	r4, #0
   35c00:	4620      	mov	r0, r4
   35c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c04:	f000 f95d 	bl	35ec2 <_malloc_usable_size_r>
   35c08:	42a8      	cmp	r0, r5
   35c0a:	d2f9      	bcs.n	35c00 <_realloc_r+0x1c>
   35c0c:	4629      	mov	r1, r5
   35c0e:	4638      	mov	r0, r7
   35c10:	f7f6 f826 	bl	2bc60 <_malloc_r>
   35c14:	4606      	mov	r6, r0
   35c16:	2800      	cmp	r0, #0
   35c18:	d0f1      	beq.n	35bfe <_realloc_r+0x1a>
   35c1a:	4621      	mov	r1, r4
   35c1c:	462a      	mov	r2, r5
   35c1e:	f7ff f9e5 	bl	34fec <memcpy>
   35c22:	4621      	mov	r1, r4
   35c24:	4638      	mov	r0, r7
   35c26:	4634      	mov	r4, r6
   35c28:	f7f5 ffd0 	bl	2bbcc <_free_r>
   35c2c:	e7e8      	b.n	35c00 <_realloc_r+0x1c>

00035c2e <__ssputs_r>:
   35c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35c32:	461f      	mov	r7, r3
   35c34:	688e      	ldr	r6, [r1, #8]
   35c36:	4682      	mov	sl, r0
   35c38:	460c      	mov	r4, r1
   35c3a:	42be      	cmp	r6, r7
   35c3c:	4690      	mov	r8, r2
   35c3e:	680b      	ldr	r3, [r1, #0]
   35c40:	d82d      	bhi.n	35c9e <__ssputs_r+0x70>
   35c42:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   35c46:	f412 6f90 	tst.w	r2, #1152	; 0x480
   35c4a:	d026      	beq.n	35c9a <__ssputs_r+0x6c>
   35c4c:	6965      	ldr	r5, [r4, #20]
   35c4e:	6909      	ldr	r1, [r1, #16]
   35c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   35c54:	eba3 0901 	sub.w	r9, r3, r1
   35c58:	1c7b      	adds	r3, r7, #1
   35c5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   35c5e:	444b      	add	r3, r9
   35c60:	106d      	asrs	r5, r5, #1
   35c62:	429d      	cmp	r5, r3
   35c64:	bf38      	it	cc
   35c66:	461d      	movcc	r5, r3
   35c68:	0553      	lsls	r3, r2, #21
   35c6a:	d527      	bpl.n	35cbc <__ssputs_r+0x8e>
   35c6c:	4629      	mov	r1, r5
   35c6e:	f7f5 fff7 	bl	2bc60 <_malloc_r>
   35c72:	4606      	mov	r6, r0
   35c74:	b360      	cbz	r0, 35cd0 <__ssputs_r+0xa2>
   35c76:	464a      	mov	r2, r9
   35c78:	6921      	ldr	r1, [r4, #16]
   35c7a:	f7ff f9b7 	bl	34fec <memcpy>
   35c7e:	89a3      	ldrh	r3, [r4, #12]
   35c80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   35c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   35c88:	81a3      	strh	r3, [r4, #12]
   35c8a:	6126      	str	r6, [r4, #16]
   35c8c:	444e      	add	r6, r9
   35c8e:	6165      	str	r5, [r4, #20]
   35c90:	eba5 0509 	sub.w	r5, r5, r9
   35c94:	6026      	str	r6, [r4, #0]
   35c96:	463e      	mov	r6, r7
   35c98:	60a5      	str	r5, [r4, #8]
   35c9a:	42be      	cmp	r6, r7
   35c9c:	d900      	bls.n	35ca0 <__ssputs_r+0x72>
   35c9e:	463e      	mov	r6, r7
   35ca0:	4632      	mov	r2, r6
   35ca2:	4641      	mov	r1, r8
   35ca4:	6820      	ldr	r0, [r4, #0]
   35ca6:	f000 f8f2 	bl	35e8e <memmove>
   35caa:	68a3      	ldr	r3, [r4, #8]
   35cac:	2000      	movs	r0, #0
   35cae:	1b9b      	subs	r3, r3, r6
   35cb0:	60a3      	str	r3, [r4, #8]
   35cb2:	6823      	ldr	r3, [r4, #0]
   35cb4:	4433      	add	r3, r6
   35cb6:	6023      	str	r3, [r4, #0]
   35cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35cbc:	462a      	mov	r2, r5
   35cbe:	f7ff ff91 	bl	35be4 <_realloc_r>
   35cc2:	4606      	mov	r6, r0
   35cc4:	2800      	cmp	r0, #0
   35cc6:	d1e0      	bne.n	35c8a <__ssputs_r+0x5c>
   35cc8:	6921      	ldr	r1, [r4, #16]
   35cca:	4650      	mov	r0, sl
   35ccc:	f7f5 ff7e 	bl	2bbcc <_free_r>
   35cd0:	230c      	movs	r3, #12
   35cd2:	f04f 30ff 	mov.w	r0, #4294967295
   35cd6:	f8ca 3000 	str.w	r3, [sl]
   35cda:	89a3      	ldrh	r3, [r4, #12]
   35cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   35ce0:	81a3      	strh	r3, [r4, #12]
   35ce2:	e7e9      	b.n	35cb8 <__ssputs_r+0x8a>

00035ce4 <_sungetc_r>:
   35ce4:	b538      	push	{r3, r4, r5, lr}
   35ce6:	1c4b      	adds	r3, r1, #1
   35ce8:	4614      	mov	r4, r2
   35cea:	d103      	bne.n	35cf4 <_sungetc_r+0x10>
   35cec:	f04f 35ff 	mov.w	r5, #4294967295
   35cf0:	4628      	mov	r0, r5
   35cf2:	bd38      	pop	{r3, r4, r5, pc}
   35cf4:	8993      	ldrh	r3, [r2, #12]
   35cf6:	b2cd      	uxtb	r5, r1
   35cf8:	f023 0320 	bic.w	r3, r3, #32
   35cfc:	8193      	strh	r3, [r2, #12]
   35cfe:	6853      	ldr	r3, [r2, #4]
   35d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
   35d02:	b18a      	cbz	r2, 35d28 <_sungetc_r+0x44>
   35d04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   35d06:	429a      	cmp	r2, r3
   35d08:	dd08      	ble.n	35d1c <_sungetc_r+0x38>
   35d0a:	6823      	ldr	r3, [r4, #0]
   35d0c:	1e5a      	subs	r2, r3, #1
   35d0e:	6022      	str	r2, [r4, #0]
   35d10:	f803 5c01 	strb.w	r5, [r3, #-1]
   35d14:	6863      	ldr	r3, [r4, #4]
   35d16:	3301      	adds	r3, #1
   35d18:	6063      	str	r3, [r4, #4]
   35d1a:	e7e9      	b.n	35cf0 <_sungetc_r+0xc>
   35d1c:	4621      	mov	r1, r4
   35d1e:	f000 f872 	bl	35e06 <__submore>
   35d22:	2800      	cmp	r0, #0
   35d24:	d0f1      	beq.n	35d0a <_sungetc_r+0x26>
   35d26:	e7e1      	b.n	35cec <_sungetc_r+0x8>
   35d28:	6921      	ldr	r1, [r4, #16]
   35d2a:	6822      	ldr	r2, [r4, #0]
   35d2c:	b141      	cbz	r1, 35d40 <_sungetc_r+0x5c>
   35d2e:	4291      	cmp	r1, r2
   35d30:	d206      	bcs.n	35d40 <_sungetc_r+0x5c>
   35d32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   35d36:	42a9      	cmp	r1, r5
   35d38:	d102      	bne.n	35d40 <_sungetc_r+0x5c>
   35d3a:	3a01      	subs	r2, #1
   35d3c:	6022      	str	r2, [r4, #0]
   35d3e:	e7ea      	b.n	35d16 <_sungetc_r+0x32>
   35d40:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   35d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
   35d48:	6363      	str	r3, [r4, #52]	; 0x34
   35d4a:	2303      	movs	r3, #3
   35d4c:	63a3      	str	r3, [r4, #56]	; 0x38
   35d4e:	4623      	mov	r3, r4
   35d50:	f803 5f46 	strb.w	r5, [r3, #70]!
   35d54:	6023      	str	r3, [r4, #0]
   35d56:	2301      	movs	r3, #1
   35d58:	e7de      	b.n	35d18 <_sungetc_r+0x34>

00035d5a <__ssrefill_r>:
   35d5a:	b510      	push	{r4, lr}
   35d5c:	460c      	mov	r4, r1
   35d5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   35d60:	b169      	cbz	r1, 35d7e <__ssrefill_r+0x24>
   35d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
   35d66:	4299      	cmp	r1, r3
   35d68:	d001      	beq.n	35d6e <__ssrefill_r+0x14>
   35d6a:	f7f5 ff2f 	bl	2bbcc <_free_r>
   35d6e:	2000      	movs	r0, #0
   35d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35d72:	6360      	str	r0, [r4, #52]	; 0x34
   35d74:	6063      	str	r3, [r4, #4]
   35d76:	b113      	cbz	r3, 35d7e <__ssrefill_r+0x24>
   35d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   35d7a:	6023      	str	r3, [r4, #0]
   35d7c:	bd10      	pop	{r4, pc}
   35d7e:	6923      	ldr	r3, [r4, #16]
   35d80:	f04f 30ff 	mov.w	r0, #4294967295
   35d84:	6023      	str	r3, [r4, #0]
   35d86:	2300      	movs	r3, #0
   35d88:	6063      	str	r3, [r4, #4]
   35d8a:	89a3      	ldrh	r3, [r4, #12]
   35d8c:	f043 0320 	orr.w	r3, r3, #32
   35d90:	81a3      	strh	r3, [r4, #12]
   35d92:	e7f3      	b.n	35d7c <__ssrefill_r+0x22>

00035d94 <__sccl>:
   35d94:	b570      	push	{r4, r5, r6, lr}
   35d96:	780b      	ldrb	r3, [r1, #0]
   35d98:	4604      	mov	r4, r0
   35d9a:	3801      	subs	r0, #1
   35d9c:	2b5e      	cmp	r3, #94	; 0x5e
   35d9e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   35da2:	bf13      	iteet	ne
   35da4:	1c4a      	addne	r2, r1, #1
   35da6:	1c8a      	addeq	r2, r1, #2
   35da8:	784b      	ldrbeq	r3, [r1, #1]
   35daa:	2100      	movne	r1, #0
   35dac:	bf08      	it	eq
   35dae:	2101      	moveq	r1, #1
   35db0:	f800 1f01 	strb.w	r1, [r0, #1]!
   35db4:	42a8      	cmp	r0, r5
   35db6:	d1fb      	bne.n	35db0 <__sccl+0x1c>
   35db8:	b90b      	cbnz	r3, 35dbe <__sccl+0x2a>
   35dba:	1e50      	subs	r0, r2, #1
   35dbc:	bd70      	pop	{r4, r5, r6, pc}
   35dbe:	f081 0101 	eor.w	r1, r1, #1
   35dc2:	4610      	mov	r0, r2
   35dc4:	54e1      	strb	r1, [r4, r3]
   35dc6:	4602      	mov	r2, r0
   35dc8:	f812 5b01 	ldrb.w	r5, [r2], #1
   35dcc:	2d2d      	cmp	r5, #45	; 0x2d
   35dce:	d005      	beq.n	35ddc <__sccl+0x48>
   35dd0:	2d5d      	cmp	r5, #93	; 0x5d
   35dd2:	d016      	beq.n	35e02 <__sccl+0x6e>
   35dd4:	2d00      	cmp	r5, #0
   35dd6:	d0f1      	beq.n	35dbc <__sccl+0x28>
   35dd8:	462b      	mov	r3, r5
   35dda:	e7f2      	b.n	35dc2 <__sccl+0x2e>
   35ddc:	7846      	ldrb	r6, [r0, #1]
   35dde:	2e5d      	cmp	r6, #93	; 0x5d
   35de0:	d0fa      	beq.n	35dd8 <__sccl+0x44>
   35de2:	42b3      	cmp	r3, r6
   35de4:	dcf8      	bgt.n	35dd8 <__sccl+0x44>
   35de6:	3002      	adds	r0, #2
   35de8:	461a      	mov	r2, r3
   35dea:	3201      	adds	r2, #1
   35dec:	4296      	cmp	r6, r2
   35dee:	54a1      	strb	r1, [r4, r2]
   35df0:	dcfb      	bgt.n	35dea <__sccl+0x56>
   35df2:	1af2      	subs	r2, r6, r3
   35df4:	1c5d      	adds	r5, r3, #1
   35df6:	3a01      	subs	r2, #1
   35df8:	42b3      	cmp	r3, r6
   35dfa:	bfa8      	it	ge
   35dfc:	2200      	movge	r2, #0
   35dfe:	18ab      	adds	r3, r5, r2
   35e00:	e7e1      	b.n	35dc6 <__sccl+0x32>
   35e02:	4610      	mov	r0, r2
   35e04:	e7da      	b.n	35dbc <__sccl+0x28>

00035e06 <__submore>:
   35e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35e0a:	460c      	mov	r4, r1
   35e0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   35e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   35e12:	4299      	cmp	r1, r3
   35e14:	d11a      	bne.n	35e4c <__submore+0x46>
   35e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
   35e1a:	f7f5 ff21 	bl	2bc60 <_malloc_r>
   35e1e:	b918      	cbnz	r0, 35e28 <__submore+0x22>
   35e20:	f04f 30ff 	mov.w	r0, #4294967295
   35e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
   35e2c:	6360      	str	r0, [r4, #52]	; 0x34
   35e2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   35e32:	63a3      	str	r3, [r4, #56]	; 0x38
   35e34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   35e38:	7083      	strb	r3, [r0, #2]
   35e3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   35e3e:	7043      	strb	r3, [r0, #1]
   35e40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   35e44:	7003      	strb	r3, [r0, #0]
   35e46:	6020      	str	r0, [r4, #0]
   35e48:	2000      	movs	r0, #0
   35e4a:	e7eb      	b.n	35e24 <__submore+0x1e>
   35e4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   35e4e:	0077      	lsls	r7, r6, #1
   35e50:	463a      	mov	r2, r7
   35e52:	f7ff fec7 	bl	35be4 <_realloc_r>
   35e56:	4605      	mov	r5, r0
   35e58:	2800      	cmp	r0, #0
   35e5a:	d0e1      	beq.n	35e20 <__submore+0x1a>
   35e5c:	eb00 0806 	add.w	r8, r0, r6
   35e60:	4601      	mov	r1, r0
   35e62:	4632      	mov	r2, r6
   35e64:	4640      	mov	r0, r8
   35e66:	f7ff f8c1 	bl	34fec <memcpy>
   35e6a:	f8c4 8000 	str.w	r8, [r4]
   35e6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   35e72:	e7e9      	b.n	35e48 <__submore+0x42>

00035e74 <__ascii_wctomb>:
   35e74:	4603      	mov	r3, r0
   35e76:	4608      	mov	r0, r1
   35e78:	b141      	cbz	r1, 35e8c <__ascii_wctomb+0x18>
   35e7a:	2aff      	cmp	r2, #255	; 0xff
   35e7c:	d904      	bls.n	35e88 <__ascii_wctomb+0x14>
   35e7e:	228a      	movs	r2, #138	; 0x8a
   35e80:	f04f 30ff 	mov.w	r0, #4294967295
   35e84:	601a      	str	r2, [r3, #0]
   35e86:	4770      	bx	lr
   35e88:	2001      	movs	r0, #1
   35e8a:	700a      	strb	r2, [r1, #0]
   35e8c:	4770      	bx	lr

00035e8e <memmove>:
   35e8e:	4288      	cmp	r0, r1
   35e90:	b510      	push	{r4, lr}
   35e92:	eb01 0402 	add.w	r4, r1, r2
   35e96:	d902      	bls.n	35e9e <memmove+0x10>
   35e98:	4284      	cmp	r4, r0
   35e9a:	4623      	mov	r3, r4
   35e9c:	d807      	bhi.n	35eae <memmove+0x20>
   35e9e:	1e43      	subs	r3, r0, #1
   35ea0:	42a1      	cmp	r1, r4
   35ea2:	d008      	beq.n	35eb6 <memmove+0x28>
   35ea4:	f811 2b01 	ldrb.w	r2, [r1], #1
   35ea8:	f803 2f01 	strb.w	r2, [r3, #1]!
   35eac:	e7f8      	b.n	35ea0 <memmove+0x12>
   35eae:	4402      	add	r2, r0
   35eb0:	4601      	mov	r1, r0
   35eb2:	428a      	cmp	r2, r1
   35eb4:	d100      	bne.n	35eb8 <memmove+0x2a>
   35eb6:	bd10      	pop	{r4, pc}
   35eb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   35ebc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   35ec0:	e7f7      	b.n	35eb2 <memmove+0x24>

00035ec2 <_malloc_usable_size_r>:
   35ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   35ec6:	1f18      	subs	r0, r3, #4
   35ec8:	2b00      	cmp	r3, #0
   35eca:	bfbc      	itt	lt
   35ecc:	580b      	ldrlt	r3, [r1, r0]
   35ece:	18c0      	addlt	r0, r0, r3
   35ed0:	4770      	bx	lr

00035ed2 <__sfputc_r>:
   35ed2:	6893      	ldr	r3, [r2, #8]
   35ed4:	3b01      	subs	r3, #1
   35ed6:	2b00      	cmp	r3, #0
   35ed8:	6093      	str	r3, [r2, #8]
   35eda:	b410      	push	{r4}
   35edc:	da07      	bge.n	35eee <__sfputc_r+0x1c>
   35ede:	6994      	ldr	r4, [r2, #24]
   35ee0:	42a3      	cmp	r3, r4
   35ee2:	db01      	blt.n	35ee8 <__sfputc_r+0x16>
   35ee4:	290a      	cmp	r1, #10
   35ee6:	d102      	bne.n	35eee <__sfputc_r+0x1c>
   35ee8:	bc10      	pop	{r4}
   35eea:	f7f6 bcf7 	b.w	2c8dc <__swbuf_r>
   35eee:	6813      	ldr	r3, [r2, #0]
   35ef0:	1c58      	adds	r0, r3, #1
   35ef2:	6010      	str	r0, [r2, #0]
   35ef4:	4608      	mov	r0, r1
   35ef6:	7019      	strb	r1, [r3, #0]
   35ef8:	bc10      	pop	{r4}
   35efa:	4770      	bx	lr

00035efc <__sfputs_r>:
   35efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35efe:	4606      	mov	r6, r0
   35f00:	460f      	mov	r7, r1
   35f02:	4614      	mov	r4, r2
   35f04:	18d5      	adds	r5, r2, r3
   35f06:	42ac      	cmp	r4, r5
   35f08:	d101      	bne.n	35f0e <__sfputs_r+0x12>
   35f0a:	2000      	movs	r0, #0
   35f0c:	e007      	b.n	35f1e <__sfputs_r+0x22>
   35f0e:	463a      	mov	r2, r7
   35f10:	f814 1b01 	ldrb.w	r1, [r4], #1
   35f14:	4630      	mov	r0, r6
   35f16:	f7ff ffdc 	bl	35ed2 <__sfputc_r>
   35f1a:	1c43      	adds	r3, r0, #1
   35f1c:	d1f3      	bne.n	35f06 <__sfputs_r+0xa>
   35f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035f20 <abort>:
   35f20:	2006      	movs	r0, #6
   35f22:	b508      	push	{r3, lr}
   35f24:	f7f8 fa7c 	bl	2e420 <raise>
   35f28:	2001      	movs	r0, #1
   35f2a:	f7db f9ed 	bl	11308 <_exit>

00035f2e <_raise_r>:
   35f2e:	291f      	cmp	r1, #31
   35f30:	b538      	push	{r3, r4, r5, lr}
   35f32:	4605      	mov	r5, r0
   35f34:	460c      	mov	r4, r1
   35f36:	d904      	bls.n	35f42 <_raise_r+0x14>
   35f38:	2316      	movs	r3, #22
   35f3a:	6003      	str	r3, [r0, #0]
   35f3c:	f04f 30ff 	mov.w	r0, #4294967295
   35f40:	bd38      	pop	{r3, r4, r5, pc}
   35f42:	6c42      	ldr	r2, [r0, #68]	; 0x44
   35f44:	b112      	cbz	r2, 35f4c <_raise_r+0x1e>
   35f46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   35f4a:	b94b      	cbnz	r3, 35f60 <_raise_r+0x32>
   35f4c:	4628      	mov	r0, r5
   35f4e:	f000 f816 	bl	35f7e <_getpid_r>
   35f52:	4622      	mov	r2, r4
   35f54:	4601      	mov	r1, r0
   35f56:	4628      	mov	r0, r5
   35f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35f5c:	f7f8 ba68 	b.w	2e430 <_kill_r>
   35f60:	2b01      	cmp	r3, #1
   35f62:	d00a      	beq.n	35f7a <_raise_r+0x4c>
   35f64:	1c59      	adds	r1, r3, #1
   35f66:	d103      	bne.n	35f70 <_raise_r+0x42>
   35f68:	2316      	movs	r3, #22
   35f6a:	6003      	str	r3, [r0, #0]
   35f6c:	2001      	movs	r0, #1
   35f6e:	e7e7      	b.n	35f40 <_raise_r+0x12>
   35f70:	2100      	movs	r1, #0
   35f72:	4620      	mov	r0, r4
   35f74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   35f78:	4798      	blx	r3
   35f7a:	2000      	movs	r0, #0
   35f7c:	e7e0      	b.n	35f40 <_raise_r+0x12>

00035f7e <_getpid_r>:
   35f7e:	f7f9 bdf1 	b.w	2fb64 <_getpid>
	...
