
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	28 47 01 20 31 1e 01 00 b3 be 02 00 05 1e 01 00     (G. 1...........
    8010:	05 1e 01 00 05 1e 01 00 05 1e 01 00 05 1e 01 00     ................
	...
    802c:	41 15 01 00 05 1e 01 00 00 00 00 00 e1 14 01 00     A...............
    803c:	05 1e 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8050:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8060:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8070:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8080:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8090:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80a0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80b0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80c0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80d0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80e0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    80f0:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8100:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8110:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8120:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8130:	c9 15 01 00 c9 15 01 00 c9 15 01 00 c9 15 01 00     ................
    8140:	c9 15 01 00                                         ....

Disassembly of section text:

00008148 <__aeabi_fmul>:
    8148:	f04f 0cff 	mov.w	ip, #255	; 0xff
    814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8150:	bf1e      	ittt	ne
    8152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8156:	ea92 0f0c 	teqne	r2, ip
    815a:	ea93 0f0c 	teqne	r3, ip
    815e:	d06f      	beq.n	8240 <__aeabi_fmul+0xf8>
    8160:	441a      	add	r2, r3
    8162:	ea80 0c01 	eor.w	ip, r0, r1
    8166:	0240      	lsls	r0, r0, #9
    8168:	bf18      	it	ne
    816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    816e:	d01e      	beq.n	81ae <__aeabi_fmul+0x66>
    8170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    817c:	fba0 3101 	umull	r3, r1, r0, r1
    8180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8188:	bf3e      	ittt	cc
    818a:	0049      	lslcc	r1, r1, #1
    818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8190:	005b      	lslcc	r3, r3, #1
    8192:	ea40 0001 	orr.w	r0, r0, r1
    8196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    819a:	2afd      	cmp	r2, #253	; 0xfd
    819c:	d81d      	bhi.n	81da <__aeabi_fmul+0x92>
    819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    81a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    81a6:	bf08      	it	eq
    81a8:	f020 0001 	biceq.w	r0, r0, #1
    81ac:	4770      	bx	lr
    81ae:	f090 0f00 	teq	r0, #0
    81b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    81b6:	bf08      	it	eq
    81b8:	0249      	lsleq	r1, r1, #9
    81ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    81be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    81c2:	3a7f      	subs	r2, #127	; 0x7f
    81c4:	bfc2      	ittt	gt
    81c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    81ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    81ce:	4770      	bxgt	lr
    81d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    81d4:	f04f 0300 	mov.w	r3, #0
    81d8:	3a01      	subs	r2, #1
    81da:	dc5d      	bgt.n	8298 <__aeabi_fmul+0x150>
    81dc:	f112 0f19 	cmn.w	r2, #25
    81e0:	bfdc      	itt	le
    81e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    81e6:	4770      	bxle	lr
    81e8:	f1c2 0200 	rsb	r2, r2, #0
    81ec:	0041      	lsls	r1, r0, #1
    81ee:	fa21 f102 	lsr.w	r1, r1, r2
    81f2:	f1c2 0220 	rsb	r2, r2, #32
    81f6:	fa00 fc02 	lsl.w	ip, r0, r2
    81fa:	ea5f 0031 	movs.w	r0, r1, rrx
    81fe:	f140 0000 	adc.w	r0, r0, #0
    8202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8206:	bf08      	it	eq
    8208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    820c:	4770      	bx	lr
    820e:	f092 0f00 	teq	r2, #0
    8212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8216:	bf02      	ittt	eq
    8218:	0040      	lsleq	r0, r0, #1
    821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    821e:	3a01      	subeq	r2, #1
    8220:	d0f9      	beq.n	8216 <__aeabi_fmul+0xce>
    8222:	ea40 000c 	orr.w	r0, r0, ip
    8226:	f093 0f00 	teq	r3, #0
    822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    822e:	bf02      	ittt	eq
    8230:	0049      	lsleq	r1, r1, #1
    8232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8236:	3b01      	subeq	r3, #1
    8238:	d0f9      	beq.n	822e <__aeabi_fmul+0xe6>
    823a:	ea41 010c 	orr.w	r1, r1, ip
    823e:	e78f      	b.n	8160 <__aeabi_fmul+0x18>
    8240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8244:	ea92 0f0c 	teq	r2, ip
    8248:	bf18      	it	ne
    824a:	ea93 0f0c 	teqne	r3, ip
    824e:	d00a      	beq.n	8266 <__aeabi_fmul+0x11e>
    8250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8254:	bf18      	it	ne
    8256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    825a:	d1d8      	bne.n	820e <__aeabi_fmul+0xc6>
    825c:	ea80 0001 	eor.w	r0, r0, r1
    8260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8264:	4770      	bx	lr
    8266:	f090 0f00 	teq	r0, #0
    826a:	bf17      	itett	ne
    826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8270:	4608      	moveq	r0, r1
    8272:	f091 0f00 	teqne	r1, #0
    8276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    827a:	d014      	beq.n	82a6 <__aeabi_fmul+0x15e>
    827c:	ea92 0f0c 	teq	r2, ip
    8280:	d101      	bne.n	8286 <__aeabi_fmul+0x13e>
    8282:	0242      	lsls	r2, r0, #9
    8284:	d10f      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8286:	ea93 0f0c 	teq	r3, ip
    828a:	d103      	bne.n	8294 <__aeabi_fmul+0x14c>
    828c:	024b      	lsls	r3, r1, #9
    828e:	bf18      	it	ne
    8290:	4608      	movne	r0, r1
    8292:	d108      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8294:	ea80 0001 	eor.w	r0, r0, r1
    8298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    82a4:	4770      	bx	lr
    82a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    82ae:	4770      	bx	lr

000082b0 <__aeabi_drsub>:
    82b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    82b4:	e002      	b.n	82bc <__adddf3>
    82b6:	bf00      	nop

000082b8 <__aeabi_dsub>:
    82b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000082bc <__adddf3>:
    82bc:	b530      	push	{r4, r5, lr}
    82be:	ea4f 0441 	mov.w	r4, r1, lsl #1
    82c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    82c6:	ea94 0f05 	teq	r4, r5
    82ca:	bf08      	it	eq
    82cc:	ea90 0f02 	teqeq	r0, r2
    82d0:	bf1f      	itttt	ne
    82d2:	ea54 0c00 	orrsne.w	ip, r4, r0
    82d6:	ea55 0c02 	orrsne.w	ip, r5, r2
    82da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    82de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    82e2:	f000 80e2 	beq.w	84aa <__adddf3+0x1ee>
    82e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    82ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    82ee:	bfb8      	it	lt
    82f0:	426d      	neglt	r5, r5
    82f2:	dd0c      	ble.n	830e <__adddf3+0x52>
    82f4:	442c      	add	r4, r5
    82f6:	ea80 0202 	eor.w	r2, r0, r2
    82fa:	ea81 0303 	eor.w	r3, r1, r3
    82fe:	ea82 0000 	eor.w	r0, r2, r0
    8302:	ea83 0101 	eor.w	r1, r3, r1
    8306:	ea80 0202 	eor.w	r2, r0, r2
    830a:	ea81 0303 	eor.w	r3, r1, r3
    830e:	2d36      	cmp	r5, #54	; 0x36
    8310:	bf88      	it	hi
    8312:	bd30      	pophi	{r4, r5, pc}
    8314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8318:	ea4f 3101 	mov.w	r1, r1, lsl #12
    831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    8320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    8324:	d002      	beq.n	832c <__adddf3+0x70>
    8326:	4240      	negs	r0, r0
    8328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    8330:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    8338:	d002      	beq.n	8340 <__adddf3+0x84>
    833a:	4252      	negs	r2, r2
    833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8340:	ea94 0f05 	teq	r4, r5
    8344:	f000 80a7 	beq.w	8496 <__adddf3+0x1da>
    8348:	f1a4 0401 	sub.w	r4, r4, #1
    834c:	f1d5 0e20 	rsbs	lr, r5, #32
    8350:	db0d      	blt.n	836e <__adddf3+0xb2>
    8352:	fa02 fc0e 	lsl.w	ip, r2, lr
    8356:	fa22 f205 	lsr.w	r2, r2, r5
    835a:	1880      	adds	r0, r0, r2
    835c:	f141 0100 	adc.w	r1, r1, #0
    8360:	fa03 f20e 	lsl.w	r2, r3, lr
    8364:	1880      	adds	r0, r0, r2
    8366:	fa43 f305 	asr.w	r3, r3, r5
    836a:	4159      	adcs	r1, r3
    836c:	e00e      	b.n	838c <__adddf3+0xd0>
    836e:	f1a5 0520 	sub.w	r5, r5, #32
    8372:	f10e 0e20 	add.w	lr, lr, #32
    8376:	2a01      	cmp	r2, #1
    8378:	fa03 fc0e 	lsl.w	ip, r3, lr
    837c:	bf28      	it	cs
    837e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8382:	fa43 f305 	asr.w	r3, r3, r5
    8386:	18c0      	adds	r0, r0, r3
    8388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8390:	d507      	bpl.n	83a2 <__adddf3+0xe6>
    8392:	f04f 0e00 	mov.w	lr, #0
    8396:	f1dc 0c00 	rsbs	ip, ip, #0
    839a:	eb7e 0000 	sbcs.w	r0, lr, r0
    839e:	eb6e 0101 	sbc.w	r1, lr, r1
    83a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    83a6:	d31b      	bcc.n	83e0 <__adddf3+0x124>
    83a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    83ac:	d30c      	bcc.n	83c8 <__adddf3+0x10c>
    83ae:	0849      	lsrs	r1, r1, #1
    83b0:	ea5f 0030 	movs.w	r0, r0, rrx
    83b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    83b8:	f104 0401 	add.w	r4, r4, #1
    83bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    83c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    83c4:	f080 809a 	bcs.w	84fc <__adddf3+0x240>
    83c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    83cc:	bf08      	it	eq
    83ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    83d2:	f150 0000 	adcs.w	r0, r0, #0
    83d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    83da:	ea41 0105 	orr.w	r1, r1, r5
    83de:	bd30      	pop	{r4, r5, pc}
    83e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    83e4:	4140      	adcs	r0, r0
    83e6:	eb41 0101 	adc.w	r1, r1, r1
    83ea:	3c01      	subs	r4, #1
    83ec:	bf28      	it	cs
    83ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    83f2:	d2e9      	bcs.n	83c8 <__adddf3+0x10c>
    83f4:	f091 0f00 	teq	r1, #0
    83f8:	bf04      	itt	eq
    83fa:	4601      	moveq	r1, r0
    83fc:	2000      	moveq	r0, #0
    83fe:	fab1 f381 	clz	r3, r1
    8402:	bf08      	it	eq
    8404:	3320      	addeq	r3, #32
    8406:	f1a3 030b 	sub.w	r3, r3, #11
    840a:	f1b3 0220 	subs.w	r2, r3, #32
    840e:	da0c      	bge.n	842a <__adddf3+0x16e>
    8410:	320c      	adds	r2, #12
    8412:	dd08      	ble.n	8426 <__adddf3+0x16a>
    8414:	f102 0c14 	add.w	ip, r2, #20
    8418:	f1c2 020c 	rsb	r2, r2, #12
    841c:	fa01 f00c 	lsl.w	r0, r1, ip
    8420:	fa21 f102 	lsr.w	r1, r1, r2
    8424:	e00c      	b.n	8440 <__adddf3+0x184>
    8426:	f102 0214 	add.w	r2, r2, #20
    842a:	bfd8      	it	le
    842c:	f1c2 0c20 	rsble	ip, r2, #32
    8430:	fa01 f102 	lsl.w	r1, r1, r2
    8434:	fa20 fc0c 	lsr.w	ip, r0, ip
    8438:	bfdc      	itt	le
    843a:	ea41 010c 	orrle.w	r1, r1, ip
    843e:	4090      	lslle	r0, r2
    8440:	1ae4      	subs	r4, r4, r3
    8442:	bfa2      	ittt	ge
    8444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    8448:	4329      	orrge	r1, r5
    844a:	bd30      	popge	{r4, r5, pc}
    844c:	ea6f 0404 	mvn.w	r4, r4
    8450:	3c1f      	subs	r4, #31
    8452:	da1c      	bge.n	848e <__adddf3+0x1d2>
    8454:	340c      	adds	r4, #12
    8456:	dc0e      	bgt.n	8476 <__adddf3+0x1ba>
    8458:	f104 0414 	add.w	r4, r4, #20
    845c:	f1c4 0220 	rsb	r2, r4, #32
    8460:	fa20 f004 	lsr.w	r0, r0, r4
    8464:	fa01 f302 	lsl.w	r3, r1, r2
    8468:	ea40 0003 	orr.w	r0, r0, r3
    846c:	fa21 f304 	lsr.w	r3, r1, r4
    8470:	ea45 0103 	orr.w	r1, r5, r3
    8474:	bd30      	pop	{r4, r5, pc}
    8476:	f1c4 040c 	rsb	r4, r4, #12
    847a:	f1c4 0220 	rsb	r2, r4, #32
    847e:	fa20 f002 	lsr.w	r0, r0, r2
    8482:	fa01 f304 	lsl.w	r3, r1, r4
    8486:	ea40 0003 	orr.w	r0, r0, r3
    848a:	4629      	mov	r1, r5
    848c:	bd30      	pop	{r4, r5, pc}
    848e:	fa21 f004 	lsr.w	r0, r1, r4
    8492:	4629      	mov	r1, r5
    8494:	bd30      	pop	{r4, r5, pc}
    8496:	f094 0f00 	teq	r4, #0
    849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    849e:	bf06      	itte	eq
    84a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    84a4:	3401      	addeq	r4, #1
    84a6:	3d01      	subne	r5, #1
    84a8:	e74e      	b.n	8348 <__adddf3+0x8c>
    84aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    84ae:	bf18      	it	ne
    84b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    84b4:	d029      	beq.n	850a <__adddf3+0x24e>
    84b6:	ea94 0f05 	teq	r4, r5
    84ba:	bf08      	it	eq
    84bc:	ea90 0f02 	teqeq	r0, r2
    84c0:	d005      	beq.n	84ce <__adddf3+0x212>
    84c2:	ea54 0c00 	orrs.w	ip, r4, r0
    84c6:	bf04      	itt	eq
    84c8:	4619      	moveq	r1, r3
    84ca:	4610      	moveq	r0, r2
    84cc:	bd30      	pop	{r4, r5, pc}
    84ce:	ea91 0f03 	teq	r1, r3
    84d2:	bf1e      	ittt	ne
    84d4:	2100      	movne	r1, #0
    84d6:	2000      	movne	r0, #0
    84d8:	bd30      	popne	{r4, r5, pc}
    84da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    84de:	d105      	bne.n	84ec <__adddf3+0x230>
    84e0:	0040      	lsls	r0, r0, #1
    84e2:	4149      	adcs	r1, r1
    84e4:	bf28      	it	cs
    84e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    84ea:	bd30      	pop	{r4, r5, pc}
    84ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    84f0:	bf3c      	itt	cc
    84f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    84f6:	bd30      	popcc	{r4, r5, pc}
    84f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    84fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8504:	f04f 0000 	mov.w	r0, #0
    8508:	bd30      	pop	{r4, r5, pc}
    850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    850e:	bf1a      	itte	ne
    8510:	4619      	movne	r1, r3
    8512:	4610      	movne	r0, r2
    8514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    8518:	bf1c      	itt	ne
    851a:	460b      	movne	r3, r1
    851c:	4602      	movne	r2, r0
    851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8522:	bf06      	itte	eq
    8524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    8528:	ea91 0f03 	teqeq	r1, r3
    852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    8530:	bd30      	pop	{r4, r5, pc}
    8532:	bf00      	nop

00008534 <__aeabi_ui2d>:
    8534:	f090 0f00 	teq	r0, #0
    8538:	bf04      	itt	eq
    853a:	2100      	moveq	r1, #0
    853c:	4770      	bxeq	lr
    853e:	b530      	push	{r4, r5, lr}
    8540:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8544:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8548:	f04f 0500 	mov.w	r5, #0
    854c:	f04f 0100 	mov.w	r1, #0
    8550:	e750      	b.n	83f4 <__adddf3+0x138>
    8552:	bf00      	nop

00008554 <__aeabi_i2d>:
    8554:	f090 0f00 	teq	r0, #0
    8558:	bf04      	itt	eq
    855a:	2100      	moveq	r1, #0
    855c:	4770      	bxeq	lr
    855e:	b530      	push	{r4, r5, lr}
    8560:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8564:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    856c:	bf48      	it	mi
    856e:	4240      	negmi	r0, r0
    8570:	f04f 0100 	mov.w	r1, #0
    8574:	e73e      	b.n	83f4 <__adddf3+0x138>
    8576:	bf00      	nop

00008578 <__aeabi_f2d>:
    8578:	0042      	lsls	r2, r0, #1
    857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    857e:	ea4f 0131 	mov.w	r1, r1, rrx
    8582:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8586:	bf1f      	itttt	ne
    8588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8594:	4770      	bxne	lr
    8596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    859a:	bf08      	it	eq
    859c:	4770      	bxeq	lr
    859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    85a2:	bf04      	itt	eq
    85a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    85a8:	4770      	bxeq	lr
    85aa:	b530      	push	{r4, r5, lr}
    85ac:	f44f 7460 	mov.w	r4, #896	; 0x380
    85b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    85b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85b8:	e71c      	b.n	83f4 <__adddf3+0x138>
    85ba:	bf00      	nop

000085bc <__aeabi_ul2d>:
    85bc:	ea50 0201 	orrs.w	r2, r0, r1
    85c0:	bf08      	it	eq
    85c2:	4770      	bxeq	lr
    85c4:	b530      	push	{r4, r5, lr}
    85c6:	f04f 0500 	mov.w	r5, #0
    85ca:	e00a      	b.n	85e2 <__aeabi_l2d+0x16>

000085cc <__aeabi_l2d>:
    85cc:	ea50 0201 	orrs.w	r2, r0, r1
    85d0:	bf08      	it	eq
    85d2:	4770      	bxeq	lr
    85d4:	b530      	push	{r4, r5, lr}
    85d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    85da:	d502      	bpl.n	85e2 <__aeabi_l2d+0x16>
    85dc:	4240      	negs	r0, r0
    85de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    85e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    85e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    85ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    85ee:	f43f aed8 	beq.w	83a2 <__adddf3+0xe6>
    85f2:	f04f 0203 	mov.w	r2, #3
    85f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    85fa:	bf18      	it	ne
    85fc:	3203      	addne	r2, #3
    85fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8602:	bf18      	it	ne
    8604:	3203      	addne	r2, #3
    8606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    860a:	f1c2 0320 	rsb	r3, r2, #32
    860e:	fa00 fc03 	lsl.w	ip, r0, r3
    8612:	fa20 f002 	lsr.w	r0, r0, r2
    8616:	fa01 fe03 	lsl.w	lr, r1, r3
    861a:	ea40 000e 	orr.w	r0, r0, lr
    861e:	fa21 f102 	lsr.w	r1, r1, r2
    8622:	4414      	add	r4, r2
    8624:	e6bd      	b.n	83a2 <__adddf3+0xe6>
    8626:	bf00      	nop

00008628 <__aeabi_dmul>:
    8628:	b570      	push	{r4, r5, r6, lr}
    862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8636:	bf1d      	ittte	ne
    8638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    863c:	ea94 0f0c 	teqne	r4, ip
    8640:	ea95 0f0c 	teqne	r5, ip
    8644:	f000 f8de 	bleq	8804 <__aeabi_dmul+0x1dc>
    8648:	442c      	add	r4, r5
    864a:	ea81 0603 	eor.w	r6, r1, r3
    864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    8652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    8656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    865a:	bf18      	it	ne
    865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8668:	d038      	beq.n	86dc <__aeabi_dmul+0xb4>
    866a:	fba0 ce02 	umull	ip, lr, r0, r2
    866e:	f04f 0500 	mov.w	r5, #0
    8672:	fbe1 e502 	umlal	lr, r5, r1, r2
    8676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    867a:	fbe0 e503 	umlal	lr, r5, r0, r3
    867e:	f04f 0600 	mov.w	r6, #0
    8682:	fbe1 5603 	umlal	r5, r6, r1, r3
    8686:	f09c 0f00 	teq	ip, #0
    868a:	bf18      	it	ne
    868c:	f04e 0e01 	orrne.w	lr, lr, #1
    8690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    869c:	d204      	bcs.n	86a8 <__aeabi_dmul+0x80>
    869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    86a2:	416d      	adcs	r5, r5
    86a4:	eb46 0606 	adc.w	r6, r6, r6
    86a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    86ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    86b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    86b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    86b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    86bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    86c0:	bf88      	it	hi
    86c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    86c6:	d81e      	bhi.n	8706 <__aeabi_dmul+0xde>
    86c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    86cc:	bf08      	it	eq
    86ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    86d2:	f150 0000 	adcs.w	r0, r0, #0
    86d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    86da:	bd70      	pop	{r4, r5, r6, pc}
    86dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    86e0:	ea46 0101 	orr.w	r1, r6, r1
    86e4:	ea40 0002 	orr.w	r0, r0, r2
    86e8:	ea81 0103 	eor.w	r1, r1, r3
    86ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    86f0:	bfc2      	ittt	gt
    86f2:	ebd4 050c 	rsbsgt	r5, r4, ip
    86f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    86fa:	bd70      	popgt	{r4, r5, r6, pc}
    86fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8700:	f04f 0e00 	mov.w	lr, #0
    8704:	3c01      	subs	r4, #1
    8706:	f300 80ab 	bgt.w	8860 <__aeabi_dmul+0x238>
    870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    870e:	bfde      	ittt	le
    8710:	2000      	movle	r0, #0
    8712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    8716:	bd70      	pople	{r4, r5, r6, pc}
    8718:	f1c4 0400 	rsb	r4, r4, #0
    871c:	3c20      	subs	r4, #32
    871e:	da35      	bge.n	878c <__aeabi_dmul+0x164>
    8720:	340c      	adds	r4, #12
    8722:	dc1b      	bgt.n	875c <__aeabi_dmul+0x134>
    8724:	f104 0414 	add.w	r4, r4, #20
    8728:	f1c4 0520 	rsb	r5, r4, #32
    872c:	fa00 f305 	lsl.w	r3, r0, r5
    8730:	fa20 f004 	lsr.w	r0, r0, r4
    8734:	fa01 f205 	lsl.w	r2, r1, r5
    8738:	ea40 0002 	orr.w	r0, r0, r2
    873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    8740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8748:	fa21 f604 	lsr.w	r6, r1, r4
    874c:	eb42 0106 	adc.w	r1, r2, r6
    8750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8754:	bf08      	it	eq
    8756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    875a:	bd70      	pop	{r4, r5, r6, pc}
    875c:	f1c4 040c 	rsb	r4, r4, #12
    8760:	f1c4 0520 	rsb	r5, r4, #32
    8764:	fa00 f304 	lsl.w	r3, r0, r4
    8768:	fa20 f005 	lsr.w	r0, r0, r5
    876c:	fa01 f204 	lsl.w	r2, r1, r4
    8770:	ea40 0002 	orr.w	r0, r0, r2
    8774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    877c:	f141 0100 	adc.w	r1, r1, #0
    8780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8784:	bf08      	it	eq
    8786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    878a:	bd70      	pop	{r4, r5, r6, pc}
    878c:	f1c4 0520 	rsb	r5, r4, #32
    8790:	fa00 f205 	lsl.w	r2, r0, r5
    8794:	ea4e 0e02 	orr.w	lr, lr, r2
    8798:	fa20 f304 	lsr.w	r3, r0, r4
    879c:	fa01 f205 	lsl.w	r2, r1, r5
    87a0:	ea43 0302 	orr.w	r3, r3, r2
    87a4:	fa21 f004 	lsr.w	r0, r1, r4
    87a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87ac:	fa21 f204 	lsr.w	r2, r1, r4
    87b0:	ea20 0002 	bic.w	r0, r0, r2
    87b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    87b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    87bc:	bf08      	it	eq
    87be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	f094 0f00 	teq	r4, #0
    87c8:	d10f      	bne.n	87ea <__aeabi_dmul+0x1c2>
    87ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    87ce:	0040      	lsls	r0, r0, #1
    87d0:	eb41 0101 	adc.w	r1, r1, r1
    87d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    87d8:	bf08      	it	eq
    87da:	3c01      	subeq	r4, #1
    87dc:	d0f7      	beq.n	87ce <__aeabi_dmul+0x1a6>
    87de:	ea41 0106 	orr.w	r1, r1, r6
    87e2:	f095 0f00 	teq	r5, #0
    87e6:	bf18      	it	ne
    87e8:	4770      	bxne	lr
    87ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    87ee:	0052      	lsls	r2, r2, #1
    87f0:	eb43 0303 	adc.w	r3, r3, r3
    87f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    87f8:	bf08      	it	eq
    87fa:	3d01      	subeq	r5, #1
    87fc:	d0f7      	beq.n	87ee <__aeabi_dmul+0x1c6>
    87fe:	ea43 0306 	orr.w	r3, r3, r6
    8802:	4770      	bx	lr
    8804:	ea94 0f0c 	teq	r4, ip
    8808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    880c:	bf18      	it	ne
    880e:	ea95 0f0c 	teqne	r5, ip
    8812:	d00c      	beq.n	882e <__aeabi_dmul+0x206>
    8814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8818:	bf18      	it	ne
    881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    881e:	d1d1      	bne.n	87c4 <__aeabi_dmul+0x19c>
    8820:	ea81 0103 	eor.w	r1, r1, r3
    8824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8828:	f04f 0000 	mov.w	r0, #0
    882c:	bd70      	pop	{r4, r5, r6, pc}
    882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8832:	bf06      	itte	eq
    8834:	4610      	moveq	r0, r2
    8836:	4619      	moveq	r1, r3
    8838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    883c:	d019      	beq.n	8872 <__aeabi_dmul+0x24a>
    883e:	ea94 0f0c 	teq	r4, ip
    8842:	d102      	bne.n	884a <__aeabi_dmul+0x222>
    8844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    8848:	d113      	bne.n	8872 <__aeabi_dmul+0x24a>
    884a:	ea95 0f0c 	teq	r5, ip
    884e:	d105      	bne.n	885c <__aeabi_dmul+0x234>
    8850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    8854:	bf1c      	itt	ne
    8856:	4610      	movne	r0, r2
    8858:	4619      	movne	r1, r3
    885a:	d10a      	bne.n	8872 <__aeabi_dmul+0x24a>
    885c:	ea81 0103 	eor.w	r1, r1, r3
    8860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    886c:	f04f 0000 	mov.w	r0, #0
    8870:	bd70      	pop	{r4, r5, r6, pc}
    8872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    887a:	bd70      	pop	{r4, r5, r6, pc}

0000887c <__aeabi_ddiv>:
    887c:	b570      	push	{r4, r5, r6, lr}
    887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    888a:	bf1d      	ittte	ne
    888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8890:	ea94 0f0c 	teqne	r4, ip
    8894:	ea95 0f0c 	teqne	r5, ip
    8898:	f000 f8a7 	bleq	89ea <__aeabi_ddiv+0x16e>
    889c:	eba4 0405 	sub.w	r4, r4, r5
    88a0:	ea81 0e03 	eor.w	lr, r1, r3
    88a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    88ac:	f000 8088 	beq.w	89c0 <__aeabi_ddiv+0x144>
    88b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    88b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    88b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    88bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    88c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    88c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    88c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    88cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    88d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    88d4:	429d      	cmp	r5, r3
    88d6:	bf08      	it	eq
    88d8:	4296      	cmpeq	r6, r2
    88da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    88de:	f504 7440 	add.w	r4, r4, #768	; 0x300
    88e2:	d202      	bcs.n	88ea <__aeabi_ddiv+0x6e>
    88e4:	085b      	lsrs	r3, r3, #1
    88e6:	ea4f 0232 	mov.w	r2, r2, rrx
    88ea:	1ab6      	subs	r6, r6, r2
    88ec:	eb65 0503 	sbc.w	r5, r5, r3
    88f0:	085b      	lsrs	r3, r3, #1
    88f2:	ea4f 0232 	mov.w	r2, r2, rrx
    88f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    88fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    88fe:	ebb6 0e02 	subs.w	lr, r6, r2
    8902:	eb75 0e03 	sbcs.w	lr, r5, r3
    8906:	bf22      	ittt	cs
    8908:	1ab6      	subcs	r6, r6, r2
    890a:	4675      	movcs	r5, lr
    890c:	ea40 000c 	orrcs.w	r0, r0, ip
    8910:	085b      	lsrs	r3, r3, #1
    8912:	ea4f 0232 	mov.w	r2, r2, rrx
    8916:	ebb6 0e02 	subs.w	lr, r6, r2
    891a:	eb75 0e03 	sbcs.w	lr, r5, r3
    891e:	bf22      	ittt	cs
    8920:	1ab6      	subcs	r6, r6, r2
    8922:	4675      	movcs	r5, lr
    8924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8928:	085b      	lsrs	r3, r3, #1
    892a:	ea4f 0232 	mov.w	r2, r2, rrx
    892e:	ebb6 0e02 	subs.w	lr, r6, r2
    8932:	eb75 0e03 	sbcs.w	lr, r5, r3
    8936:	bf22      	ittt	cs
    8938:	1ab6      	subcs	r6, r6, r2
    893a:	4675      	movcs	r5, lr
    893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8940:	085b      	lsrs	r3, r3, #1
    8942:	ea4f 0232 	mov.w	r2, r2, rrx
    8946:	ebb6 0e02 	subs.w	lr, r6, r2
    894a:	eb75 0e03 	sbcs.w	lr, r5, r3
    894e:	bf22      	ittt	cs
    8950:	1ab6      	subcs	r6, r6, r2
    8952:	4675      	movcs	r5, lr
    8954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8958:	ea55 0e06 	orrs.w	lr, r5, r6
    895c:	d018      	beq.n	8990 <__aeabi_ddiv+0x114>
    895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    8962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    8966:	ea4f 1606 	mov.w	r6, r6, lsl #4
    896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    897a:	d1c0      	bne.n	88fe <__aeabi_ddiv+0x82>
    897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8980:	d10b      	bne.n	899a <__aeabi_ddiv+0x11e>
    8982:	ea41 0100 	orr.w	r1, r1, r0
    8986:	f04f 0000 	mov.w	r0, #0
    898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    898e:	e7b6      	b.n	88fe <__aeabi_ddiv+0x82>
    8990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8994:	bf04      	itt	eq
    8996:	4301      	orreq	r1, r0
    8998:	2000      	moveq	r0, #0
    899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    899e:	bf88      	it	hi
    89a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    89a4:	f63f aeaf 	bhi.w	8706 <__aeabi_dmul+0xde>
    89a8:	ebb5 0c03 	subs.w	ip, r5, r3
    89ac:	bf04      	itt	eq
    89ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    89b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    89b6:	f150 0000 	adcs.w	r0, r0, #0
    89ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    89be:	bd70      	pop	{r4, r5, r6, pc}
    89c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    89c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    89c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    89cc:	bfc2      	ittt	gt
    89ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    89d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    89d6:	bd70      	popgt	{r4, r5, r6, pc}
    89d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    89dc:	f04f 0e00 	mov.w	lr, #0
    89e0:	3c01      	subs	r4, #1
    89e2:	e690      	b.n	8706 <__aeabi_dmul+0xde>
    89e4:	ea45 0e06 	orr.w	lr, r5, r6
    89e8:	e68d      	b.n	8706 <__aeabi_dmul+0xde>
    89ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    89ee:	ea94 0f0c 	teq	r4, ip
    89f2:	bf08      	it	eq
    89f4:	ea95 0f0c 	teqeq	r5, ip
    89f8:	f43f af3b 	beq.w	8872 <__aeabi_dmul+0x24a>
    89fc:	ea94 0f0c 	teq	r4, ip
    8a00:	d10a      	bne.n	8a18 <__aeabi_ddiv+0x19c>
    8a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8a06:	f47f af34 	bne.w	8872 <__aeabi_dmul+0x24a>
    8a0a:	ea95 0f0c 	teq	r5, ip
    8a0e:	f47f af25 	bne.w	885c <__aeabi_dmul+0x234>
    8a12:	4610      	mov	r0, r2
    8a14:	4619      	mov	r1, r3
    8a16:	e72c      	b.n	8872 <__aeabi_dmul+0x24a>
    8a18:	ea95 0f0c 	teq	r5, ip
    8a1c:	d106      	bne.n	8a2c <__aeabi_ddiv+0x1b0>
    8a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8a22:	f43f aefd 	beq.w	8820 <__aeabi_dmul+0x1f8>
    8a26:	4610      	mov	r0, r2
    8a28:	4619      	mov	r1, r3
    8a2a:	e722      	b.n	8872 <__aeabi_dmul+0x24a>
    8a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8a30:	bf18      	it	ne
    8a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8a36:	f47f aec5 	bne.w	87c4 <__aeabi_dmul+0x19c>
    8a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    8a3e:	f47f af0d 	bne.w	885c <__aeabi_dmul+0x234>
    8a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    8a46:	f47f aeeb 	bne.w	8820 <__aeabi_dmul+0x1f8>
    8a4a:	e712      	b.n	8872 <__aeabi_dmul+0x24a>

00008a4c <__gedf2>:
    8a4c:	f04f 3cff 	mov.w	ip, #4294967295
    8a50:	e006      	b.n	8a60 <__cmpdf2+0x4>
    8a52:	bf00      	nop

00008a54 <__ledf2>:
    8a54:	f04f 0c01 	mov.w	ip, #1
    8a58:	e002      	b.n	8a60 <__cmpdf2+0x4>
    8a5a:	bf00      	nop

00008a5c <__cmpdf2>:
    8a5c:	f04f 0c01 	mov.w	ip, #1
    8a60:	f84d cd04 	str.w	ip, [sp, #-4]!
    8a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a70:	bf18      	it	ne
    8a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a76:	d01b      	beq.n	8ab0 <__cmpdf2+0x54>
    8a78:	b001      	add	sp, #4
    8a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a7e:	bf0c      	ite	eq
    8a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a84:	ea91 0f03 	teqne	r1, r3
    8a88:	bf02      	ittt	eq
    8a8a:	ea90 0f02 	teqeq	r0, r2
    8a8e:	2000      	moveq	r0, #0
    8a90:	4770      	bxeq	lr
    8a92:	f110 0f00 	cmn.w	r0, #0
    8a96:	ea91 0f03 	teq	r1, r3
    8a9a:	bf58      	it	pl
    8a9c:	4299      	cmppl	r1, r3
    8a9e:	bf08      	it	eq
    8aa0:	4290      	cmpeq	r0, r2
    8aa2:	bf2c      	ite	cs
    8aa4:	17d8      	asrcs	r0, r3, #31
    8aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8aaa:	f040 0001 	orr.w	r0, r0, #1
    8aae:	4770      	bx	lr
    8ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ab8:	d102      	bne.n	8ac0 <__cmpdf2+0x64>
    8aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8abe:	d107      	bne.n	8ad0 <__cmpdf2+0x74>
    8ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ac8:	d1d6      	bne.n	8a78 <__cmpdf2+0x1c>
    8aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8ace:	d0d3      	beq.n	8a78 <__cmpdf2+0x1c>
    8ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
    8ad4:	4770      	bx	lr
    8ad6:	bf00      	nop

00008ad8 <__aeabi_cdrcmple>:
    8ad8:	4684      	mov	ip, r0
    8ada:	4610      	mov	r0, r2
    8adc:	4662      	mov	r2, ip
    8ade:	468c      	mov	ip, r1
    8ae0:	4619      	mov	r1, r3
    8ae2:	4663      	mov	r3, ip
    8ae4:	e000      	b.n	8ae8 <__aeabi_cdcmpeq>
    8ae6:	bf00      	nop

00008ae8 <__aeabi_cdcmpeq>:
    8ae8:	b501      	push	{r0, lr}
    8aea:	f7ff ffb7 	bl	8a5c <__cmpdf2>
    8aee:	2800      	cmp	r0, #0
    8af0:	bf48      	it	mi
    8af2:	f110 0f00 	cmnmi.w	r0, #0
    8af6:	bd01      	pop	{r0, pc}

00008af8 <__aeabi_dcmpeq>:
    8af8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8afc:	f7ff fff4 	bl	8ae8 <__aeabi_cdcmpeq>
    8b00:	bf0c      	ite	eq
    8b02:	2001      	moveq	r0, #1
    8b04:	2000      	movne	r0, #0
    8b06:	f85d fb08 	ldr.w	pc, [sp], #8
    8b0a:	bf00      	nop

00008b0c <__aeabi_dcmplt>:
    8b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b10:	f7ff ffea 	bl	8ae8 <__aeabi_cdcmpeq>
    8b14:	bf34      	ite	cc
    8b16:	2001      	movcc	r0, #1
    8b18:	2000      	movcs	r0, #0
    8b1a:	f85d fb08 	ldr.w	pc, [sp], #8
    8b1e:	bf00      	nop

00008b20 <__aeabi_dcmple>:
    8b20:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b24:	f7ff ffe0 	bl	8ae8 <__aeabi_cdcmpeq>
    8b28:	bf94      	ite	ls
    8b2a:	2001      	movls	r0, #1
    8b2c:	2000      	movhi	r0, #0
    8b2e:	f85d fb08 	ldr.w	pc, [sp], #8
    8b32:	bf00      	nop

00008b34 <__aeabi_dcmpge>:
    8b34:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b38:	f7ff ffce 	bl	8ad8 <__aeabi_cdrcmple>
    8b3c:	bf94      	ite	ls
    8b3e:	2001      	movls	r0, #1
    8b40:	2000      	movhi	r0, #0
    8b42:	f85d fb08 	ldr.w	pc, [sp], #8
    8b46:	bf00      	nop

00008b48 <__aeabi_dcmpgt>:
    8b48:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b4c:	f7ff ffc4 	bl	8ad8 <__aeabi_cdrcmple>
    8b50:	bf34      	ite	cc
    8b52:	2001      	movcc	r0, #1
    8b54:	2000      	movcs	r0, #0
    8b56:	f85d fb08 	ldr.w	pc, [sp], #8
    8b5a:	bf00      	nop

00008b5c <__aeabi_dcmpun>:
    8b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8b64:	d102      	bne.n	8b6c <__aeabi_dcmpun+0x10>
    8b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8b6a:	d10a      	bne.n	8b82 <__aeabi_dcmpun+0x26>
    8b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8b74:	d102      	bne.n	8b7c <__aeabi_dcmpun+0x20>
    8b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8b7a:	d102      	bne.n	8b82 <__aeabi_dcmpun+0x26>
    8b7c:	f04f 0000 	mov.w	r0, #0
    8b80:	4770      	bx	lr
    8b82:	f04f 0001 	mov.w	r0, #1
    8b86:	4770      	bx	lr

00008b88 <__aeabi_d2iz>:
    8b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8b90:	d215      	bcs.n	8bbe <__aeabi_d2iz+0x36>
    8b92:	d511      	bpl.n	8bb8 <__aeabi_d2iz+0x30>
    8b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b9c:	d912      	bls.n	8bc4 <__aeabi_d2iz+0x3c>
    8b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8bae:	fa23 f002 	lsr.w	r0, r3, r2
    8bb2:	bf18      	it	ne
    8bb4:	4240      	negne	r0, r0
    8bb6:	4770      	bx	lr
    8bb8:	f04f 0000 	mov.w	r0, #0
    8bbc:	4770      	bx	lr
    8bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8bc2:	d105      	bne.n	8bd0 <__aeabi_d2iz+0x48>
    8bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8bc8:	bf08      	it	eq
    8bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    8bce:	4770      	bx	lr
    8bd0:	f04f 0000 	mov.w	r0, #0
    8bd4:	4770      	bx	lr
    8bd6:	bf00      	nop

00008bd8 <__aeabi_d2f>:
    8bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8be0:	bf24      	itt	cs
    8be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8bea:	d90d      	bls.n	8c08 <__aeabi_d2f+0x30>
    8bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8c00:	bf08      	it	eq
    8c02:	f020 0001 	biceq.w	r0, r0, #1
    8c06:	4770      	bx	lr
    8c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8c0c:	d121      	bne.n	8c52 <__aeabi_d2f+0x7a>
    8c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8c12:	bfbc      	itt	lt
    8c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8c18:	4770      	bxlt	lr
    8c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8c22:	f1c2 0218 	rsb	r2, r2, #24
    8c26:	f1c2 0c20 	rsb	ip, r2, #32
    8c2a:	fa10 f30c 	lsls.w	r3, r0, ip
    8c2e:	fa20 f002 	lsr.w	r0, r0, r2
    8c32:	bf18      	it	ne
    8c34:	f040 0001 	orrne.w	r0, r0, #1
    8c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8c40:	fa03 fc0c 	lsl.w	ip, r3, ip
    8c44:	ea40 000c 	orr.w	r0, r0, ip
    8c48:	fa23 f302 	lsr.w	r3, r3, r2
    8c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8c50:	e7cc      	b.n	8bec <__aeabi_d2f+0x14>
    8c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8c56:	d107      	bne.n	8c68 <__aeabi_d2f+0x90>
    8c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8c5c:	bf1e      	ittt	ne
    8c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8c66:	4770      	bxne	lr
    8c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c74:	4770      	bx	lr
    8c76:	bf00      	nop

00008c78 <__aeabi_frsub>:
    8c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8c7c:	e002      	b.n	8c84 <__addsf3>
    8c7e:	bf00      	nop

00008c80 <__aeabi_fsub>:
    8c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008c84 <__addsf3>:
    8c84:	0042      	lsls	r2, r0, #1
    8c86:	bf1f      	itttt	ne
    8c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8c8c:	ea92 0f03 	teqne	r2, r3
    8c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8c98:	d06a      	beq.n	8d70 <__addsf3+0xec>
    8c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8ca2:	bfc1      	itttt	gt
    8ca4:	18d2      	addgt	r2, r2, r3
    8ca6:	4041      	eorgt	r1, r0
    8ca8:	4048      	eorgt	r0, r1
    8caa:	4041      	eorgt	r1, r0
    8cac:	bfb8      	it	lt
    8cae:	425b      	neglt	r3, r3
    8cb0:	2b19      	cmp	r3, #25
    8cb2:	bf88      	it	hi
    8cb4:	4770      	bxhi	lr
    8cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8cc2:	bf18      	it	ne
    8cc4:	4240      	negne	r0, r0
    8cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8cd2:	bf18      	it	ne
    8cd4:	4249      	negne	r1, r1
    8cd6:	ea92 0f03 	teq	r2, r3
    8cda:	d03f      	beq.n	8d5c <__addsf3+0xd8>
    8cdc:	f1a2 0201 	sub.w	r2, r2, #1
    8ce0:	fa41 fc03 	asr.w	ip, r1, r3
    8ce4:	eb10 000c 	adds.w	r0, r0, ip
    8ce8:	f1c3 0320 	rsb	r3, r3, #32
    8cec:	fa01 f103 	lsl.w	r1, r1, r3
    8cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8cf4:	d502      	bpl.n	8cfc <__addsf3+0x78>
    8cf6:	4249      	negs	r1, r1
    8cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8d00:	d313      	bcc.n	8d2a <__addsf3+0xa6>
    8d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8d06:	d306      	bcc.n	8d16 <__addsf3+0x92>
    8d08:	0840      	lsrs	r0, r0, #1
    8d0a:	ea4f 0131 	mov.w	r1, r1, rrx
    8d0e:	f102 0201 	add.w	r2, r2, #1
    8d12:	2afe      	cmp	r2, #254	; 0xfe
    8d14:	d251      	bcs.n	8dba <__addsf3+0x136>
    8d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8d1e:	bf08      	it	eq
    8d20:	f020 0001 	biceq.w	r0, r0, #1
    8d24:	ea40 0003 	orr.w	r0, r0, r3
    8d28:	4770      	bx	lr
    8d2a:	0049      	lsls	r1, r1, #1
    8d2c:	eb40 0000 	adc.w	r0, r0, r0
    8d30:	3a01      	subs	r2, #1
    8d32:	bf28      	it	cs
    8d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8d38:	d2ed      	bcs.n	8d16 <__addsf3+0x92>
    8d3a:	fab0 fc80 	clz	ip, r0
    8d3e:	f1ac 0c08 	sub.w	ip, ip, #8
    8d42:	ebb2 020c 	subs.w	r2, r2, ip
    8d46:	fa00 f00c 	lsl.w	r0, r0, ip
    8d4a:	bfaa      	itet	ge
    8d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8d50:	4252      	neglt	r2, r2
    8d52:	4318      	orrge	r0, r3
    8d54:	bfbc      	itt	lt
    8d56:	40d0      	lsrlt	r0, r2
    8d58:	4318      	orrlt	r0, r3
    8d5a:	4770      	bx	lr
    8d5c:	f092 0f00 	teq	r2, #0
    8d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8d64:	bf06      	itte	eq
    8d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8d6a:	3201      	addeq	r2, #1
    8d6c:	3b01      	subne	r3, #1
    8d6e:	e7b5      	b.n	8cdc <__addsf3+0x58>
    8d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8d78:	bf18      	it	ne
    8d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8d7e:	d021      	beq.n	8dc4 <__addsf3+0x140>
    8d80:	ea92 0f03 	teq	r2, r3
    8d84:	d004      	beq.n	8d90 <__addsf3+0x10c>
    8d86:	f092 0f00 	teq	r2, #0
    8d8a:	bf08      	it	eq
    8d8c:	4608      	moveq	r0, r1
    8d8e:	4770      	bx	lr
    8d90:	ea90 0f01 	teq	r0, r1
    8d94:	bf1c      	itt	ne
    8d96:	2000      	movne	r0, #0
    8d98:	4770      	bxne	lr
    8d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8d9e:	d104      	bne.n	8daa <__addsf3+0x126>
    8da0:	0040      	lsls	r0, r0, #1
    8da2:	bf28      	it	cs
    8da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8da8:	4770      	bx	lr
    8daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8dae:	bf3c      	itt	cc
    8db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8db4:	4770      	bxcc	lr
    8db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dc2:	4770      	bx	lr
    8dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8dc8:	bf16      	itet	ne
    8dca:	4608      	movne	r0, r1
    8dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8dd0:	4601      	movne	r1, r0
    8dd2:	0242      	lsls	r2, r0, #9
    8dd4:	bf06      	itte	eq
    8dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8dda:	ea90 0f01 	teqeq	r0, r1
    8dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8de2:	4770      	bx	lr

00008de4 <__aeabi_ui2f>:
    8de4:	f04f 0300 	mov.w	r3, #0
    8de8:	e004      	b.n	8df4 <__aeabi_i2f+0x8>
    8dea:	bf00      	nop

00008dec <__aeabi_i2f>:
    8dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8df0:	bf48      	it	mi
    8df2:	4240      	negmi	r0, r0
    8df4:	ea5f 0c00 	movs.w	ip, r0
    8df8:	bf08      	it	eq
    8dfa:	4770      	bxeq	lr
    8dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8e00:	4601      	mov	r1, r0
    8e02:	f04f 0000 	mov.w	r0, #0
    8e06:	e01c      	b.n	8e42 <__aeabi_l2f+0x2a>

00008e08 <__aeabi_ul2f>:
    8e08:	ea50 0201 	orrs.w	r2, r0, r1
    8e0c:	bf08      	it	eq
    8e0e:	4770      	bxeq	lr
    8e10:	f04f 0300 	mov.w	r3, #0
    8e14:	e00a      	b.n	8e2c <__aeabi_l2f+0x14>
    8e16:	bf00      	nop

00008e18 <__aeabi_l2f>:
    8e18:	ea50 0201 	orrs.w	r2, r0, r1
    8e1c:	bf08      	it	eq
    8e1e:	4770      	bxeq	lr
    8e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8e24:	d502      	bpl.n	8e2c <__aeabi_l2f+0x14>
    8e26:	4240      	negs	r0, r0
    8e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e2c:	ea5f 0c01 	movs.w	ip, r1
    8e30:	bf02      	ittt	eq
    8e32:	4684      	moveq	ip, r0
    8e34:	4601      	moveq	r1, r0
    8e36:	2000      	moveq	r0, #0
    8e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8e3c:	bf08      	it	eq
    8e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8e46:	fabc f28c 	clz	r2, ip
    8e4a:	3a08      	subs	r2, #8
    8e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8e50:	db10      	blt.n	8e74 <__aeabi_l2f+0x5c>
    8e52:	fa01 fc02 	lsl.w	ip, r1, r2
    8e56:	4463      	add	r3, ip
    8e58:	fa00 fc02 	lsl.w	ip, r0, r2
    8e5c:	f1c2 0220 	rsb	r2, r2, #32
    8e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8e64:	fa20 f202 	lsr.w	r2, r0, r2
    8e68:	eb43 0002 	adc.w	r0, r3, r2
    8e6c:	bf08      	it	eq
    8e6e:	f020 0001 	biceq.w	r0, r0, #1
    8e72:	4770      	bx	lr
    8e74:	f102 0220 	add.w	r2, r2, #32
    8e78:	fa01 fc02 	lsl.w	ip, r1, r2
    8e7c:	f1c2 0220 	rsb	r2, r2, #32
    8e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8e84:	fa21 f202 	lsr.w	r2, r1, r2
    8e88:	eb43 0002 	adc.w	r0, r3, r2
    8e8c:	bf08      	it	eq
    8e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8e92:	4770      	bx	lr

00008e94 <__aeabi_uldivmod>:
    8e94:	b953      	cbnz	r3, 8eac <__aeabi_uldivmod+0x18>
    8e96:	b94a      	cbnz	r2, 8eac <__aeabi_uldivmod+0x18>
    8e98:	2900      	cmp	r1, #0
    8e9a:	bf08      	it	eq
    8e9c:	2800      	cmpeq	r0, #0
    8e9e:	bf1c      	itt	ne
    8ea0:	f04f 31ff 	movne.w	r1, #4294967295
    8ea4:	f04f 30ff 	movne.w	r0, #4294967295
    8ea8:	f000 b82a 	b.w	8f00 <__aeabi_idiv0>
    8eac:	f1ad 0c08 	sub.w	ip, sp, #8
    8eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8eb4:	f000 f85d 	bl	8f72 <__udivmoddi4>
    8eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ec0:	b004      	add	sp, #16
    8ec2:	4770      	bx	lr

00008ec4 <__aeabi_d2ulz>:
    8ec4:	b5d0      	push	{r4, r6, r7, lr}
    8ec6:	2200      	movs	r2, #0
    8ec8:	4b0b      	ldr	r3, [pc, #44]	; (8ef8 <__aeabi_d2ulz+0x34>)
    8eca:	4606      	mov	r6, r0
    8ecc:	460f      	mov	r7, r1
    8ece:	f7ff fbab 	bl	8628 <__aeabi_dmul>
    8ed2:	f000 f817 	bl	8f04 <__aeabi_d2uiz>
    8ed6:	4604      	mov	r4, r0
    8ed8:	f7ff fb2c 	bl	8534 <__aeabi_ui2d>
    8edc:	2200      	movs	r2, #0
    8ede:	4b07      	ldr	r3, [pc, #28]	; (8efc <__aeabi_d2ulz+0x38>)
    8ee0:	f7ff fba2 	bl	8628 <__aeabi_dmul>
    8ee4:	4602      	mov	r2, r0
    8ee6:	460b      	mov	r3, r1
    8ee8:	4630      	mov	r0, r6
    8eea:	4639      	mov	r1, r7
    8eec:	f7ff f9e4 	bl	82b8 <__aeabi_dsub>
    8ef0:	f000 f808 	bl	8f04 <__aeabi_d2uiz>
    8ef4:	4621      	mov	r1, r4
    8ef6:	bdd0      	pop	{r4, r6, r7, pc}
    8ef8:	3df00000 	.word	0x3df00000
    8efc:	41f00000 	.word	0x41f00000

00008f00 <__aeabi_idiv0>:
    8f00:	4770      	bx	lr
    8f02:	bf00      	nop

00008f04 <__aeabi_d2uiz>:
    8f04:	004a      	lsls	r2, r1, #1
    8f06:	d211      	bcs.n	8f2c <__aeabi_d2uiz+0x28>
    8f08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8f0c:	d211      	bcs.n	8f32 <__aeabi_d2uiz+0x2e>
    8f0e:	d50d      	bpl.n	8f2c <__aeabi_d2uiz+0x28>
    8f10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8f14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8f18:	d40e      	bmi.n	8f38 <__aeabi_d2uiz+0x34>
    8f1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8f22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8f26:	fa23 f002 	lsr.w	r0, r3, r2
    8f2a:	4770      	bx	lr
    8f2c:	f04f 0000 	mov.w	r0, #0
    8f30:	4770      	bx	lr
    8f32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8f36:	d102      	bne.n	8f3e <__aeabi_d2uiz+0x3a>
    8f38:	f04f 30ff 	mov.w	r0, #4294967295
    8f3c:	4770      	bx	lr
    8f3e:	f04f 0000 	mov.w	r0, #0
    8f42:	4770      	bx	lr

00008f44 <__aeabi_d2lz>:
    8f44:	b538      	push	{r3, r4, r5, lr}
    8f46:	2200      	movs	r2, #0
    8f48:	2300      	movs	r3, #0
    8f4a:	4604      	mov	r4, r0
    8f4c:	460d      	mov	r5, r1
    8f4e:	f7ff fddd 	bl	8b0c <__aeabi_dcmplt>
    8f52:	b928      	cbnz	r0, 8f60 <__aeabi_d2lz+0x1c>
    8f54:	4620      	mov	r0, r4
    8f56:	4629      	mov	r1, r5
    8f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f5c:	f7ff bfb2 	b.w	8ec4 <__aeabi_d2ulz>
    8f60:	4620      	mov	r0, r4
    8f62:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    8f66:	f7ff ffad 	bl	8ec4 <__aeabi_d2ulz>
    8f6a:	4240      	negs	r0, r0
    8f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f70:	bd38      	pop	{r3, r4, r5, pc}

00008f72 <__udivmoddi4>:
    8f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f76:	4686      	mov	lr, r0
    8f78:	468c      	mov	ip, r1
    8f7a:	4608      	mov	r0, r1
    8f7c:	9e08      	ldr	r6, [sp, #32]
    8f7e:	4615      	mov	r5, r2
    8f80:	4674      	mov	r4, lr
    8f82:	4619      	mov	r1, r3
    8f84:	2b00      	cmp	r3, #0
    8f86:	f040 80c1 	bne.w	910c <__udivmoddi4+0x19a>
    8f8a:	4285      	cmp	r5, r0
    8f8c:	fab2 f282 	clz	r2, r2
    8f90:	d945      	bls.n	901e <__udivmoddi4+0xac>
    8f92:	b14a      	cbz	r2, 8fa8 <__udivmoddi4+0x36>
    8f94:	f1c2 0320 	rsb	r3, r2, #32
    8f98:	fa00 fc02 	lsl.w	ip, r0, r2
    8f9c:	4095      	lsls	r5, r2
    8f9e:	4094      	lsls	r4, r2
    8fa0:	fa2e f303 	lsr.w	r3, lr, r3
    8fa4:	ea43 0c0c 	orr.w	ip, r3, ip
    8fa8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8fac:	b2a8      	uxth	r0, r5
    8fae:	0c23      	lsrs	r3, r4, #16
    8fb0:	fbbc f8fe 	udiv	r8, ip, lr
    8fb4:	fb0e cc18 	mls	ip, lr, r8, ip
    8fb8:	fb08 f900 	mul.w	r9, r8, r0
    8fbc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8fc0:	4599      	cmp	r9, r3
    8fc2:	d928      	bls.n	9016 <__udivmoddi4+0xa4>
    8fc4:	18eb      	adds	r3, r5, r3
    8fc6:	f108 37ff 	add.w	r7, r8, #4294967295
    8fca:	d204      	bcs.n	8fd6 <__udivmoddi4+0x64>
    8fcc:	4599      	cmp	r9, r3
    8fce:	d902      	bls.n	8fd6 <__udivmoddi4+0x64>
    8fd0:	f1a8 0702 	sub.w	r7, r8, #2
    8fd4:	442b      	add	r3, r5
    8fd6:	eba3 0309 	sub.w	r3, r3, r9
    8fda:	b2a4      	uxth	r4, r4
    8fdc:	fbb3 fcfe 	udiv	ip, r3, lr
    8fe0:	fb0e 331c 	mls	r3, lr, ip, r3
    8fe4:	fb0c f000 	mul.w	r0, ip, r0
    8fe8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8fec:	42a0      	cmp	r0, r4
    8fee:	d914      	bls.n	901a <__udivmoddi4+0xa8>
    8ff0:	192c      	adds	r4, r5, r4
    8ff2:	f10c 33ff 	add.w	r3, ip, #4294967295
    8ff6:	d204      	bcs.n	9002 <__udivmoddi4+0x90>
    8ff8:	42a0      	cmp	r0, r4
    8ffa:	d902      	bls.n	9002 <__udivmoddi4+0x90>
    8ffc:	f1ac 0302 	sub.w	r3, ip, #2
    9000:	442c      	add	r4, r5
    9002:	1a24      	subs	r4, r4, r0
    9004:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9008:	b11e      	cbz	r6, 9012 <__udivmoddi4+0xa0>
    900a:	40d4      	lsrs	r4, r2
    900c:	2300      	movs	r3, #0
    900e:	6034      	str	r4, [r6, #0]
    9010:	6073      	str	r3, [r6, #4]
    9012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9016:	4647      	mov	r7, r8
    9018:	e7dd      	b.n	8fd6 <__udivmoddi4+0x64>
    901a:	4663      	mov	r3, ip
    901c:	e7f1      	b.n	9002 <__udivmoddi4+0x90>
    901e:	bb92      	cbnz	r2, 9086 <__udivmoddi4+0x114>
    9020:	1b43      	subs	r3, r0, r5
    9022:	2101      	movs	r1, #1
    9024:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9028:	b2af      	uxth	r7, r5
    902a:	0c20      	lsrs	r0, r4, #16
    902c:	fbb3 fcfe 	udiv	ip, r3, lr
    9030:	fb0e 331c 	mls	r3, lr, ip, r3
    9034:	fb0c f807 	mul.w	r8, ip, r7
    9038:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    903c:	4598      	cmp	r8, r3
    903e:	d961      	bls.n	9104 <__udivmoddi4+0x192>
    9040:	18eb      	adds	r3, r5, r3
    9042:	f10c 30ff 	add.w	r0, ip, #4294967295
    9046:	d204      	bcs.n	9052 <__udivmoddi4+0xe0>
    9048:	4598      	cmp	r8, r3
    904a:	d902      	bls.n	9052 <__udivmoddi4+0xe0>
    904c:	f1ac 0002 	sub.w	r0, ip, #2
    9050:	442b      	add	r3, r5
    9052:	eba3 0308 	sub.w	r3, r3, r8
    9056:	b2a4      	uxth	r4, r4
    9058:	fbb3 fcfe 	udiv	ip, r3, lr
    905c:	fb0e 331c 	mls	r3, lr, ip, r3
    9060:	fb0c f707 	mul.w	r7, ip, r7
    9064:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9068:	42a7      	cmp	r7, r4
    906a:	d94d      	bls.n	9108 <__udivmoddi4+0x196>
    906c:	192c      	adds	r4, r5, r4
    906e:	f10c 33ff 	add.w	r3, ip, #4294967295
    9072:	d204      	bcs.n	907e <__udivmoddi4+0x10c>
    9074:	42a7      	cmp	r7, r4
    9076:	d902      	bls.n	907e <__udivmoddi4+0x10c>
    9078:	f1ac 0302 	sub.w	r3, ip, #2
    907c:	442c      	add	r4, r5
    907e:	1be4      	subs	r4, r4, r7
    9080:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9084:	e7c0      	b.n	9008 <__udivmoddi4+0x96>
    9086:	f1c2 0320 	rsb	r3, r2, #32
    908a:	4095      	lsls	r5, r2
    908c:	4094      	lsls	r4, r2
    908e:	fa20 f103 	lsr.w	r1, r0, r3
    9092:	fa2e f303 	lsr.w	r3, lr, r3
    9096:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    909a:	4090      	lsls	r0, r2
    909c:	b2af      	uxth	r7, r5
    909e:	4303      	orrs	r3, r0
    90a0:	fbb1 fcfe 	udiv	ip, r1, lr
    90a4:	fb0e 101c 	mls	r0, lr, ip, r1
    90a8:	0c19      	lsrs	r1, r3, #16
    90aa:	fb0c f807 	mul.w	r8, ip, r7
    90ae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    90b2:	4588      	cmp	r8, r1
    90b4:	d922      	bls.n	90fc <__udivmoddi4+0x18a>
    90b6:	1869      	adds	r1, r5, r1
    90b8:	f10c 30ff 	add.w	r0, ip, #4294967295
    90bc:	d204      	bcs.n	90c8 <__udivmoddi4+0x156>
    90be:	4588      	cmp	r8, r1
    90c0:	d902      	bls.n	90c8 <__udivmoddi4+0x156>
    90c2:	f1ac 0002 	sub.w	r0, ip, #2
    90c6:	4429      	add	r1, r5
    90c8:	eba1 0108 	sub.w	r1, r1, r8
    90cc:	b29b      	uxth	r3, r3
    90ce:	fbb1 fcfe 	udiv	ip, r1, lr
    90d2:	fb0e 111c 	mls	r1, lr, ip, r1
    90d6:	fb0c f707 	mul.w	r7, ip, r7
    90da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    90de:	429f      	cmp	r7, r3
    90e0:	d90e      	bls.n	9100 <__udivmoddi4+0x18e>
    90e2:	18eb      	adds	r3, r5, r3
    90e4:	f10c 31ff 	add.w	r1, ip, #4294967295
    90e8:	d204      	bcs.n	90f4 <__udivmoddi4+0x182>
    90ea:	429f      	cmp	r7, r3
    90ec:	d902      	bls.n	90f4 <__udivmoddi4+0x182>
    90ee:	f1ac 0102 	sub.w	r1, ip, #2
    90f2:	442b      	add	r3, r5
    90f4:	1bdb      	subs	r3, r3, r7
    90f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    90fa:	e793      	b.n	9024 <__udivmoddi4+0xb2>
    90fc:	4660      	mov	r0, ip
    90fe:	e7e3      	b.n	90c8 <__udivmoddi4+0x156>
    9100:	4661      	mov	r1, ip
    9102:	e7f7      	b.n	90f4 <__udivmoddi4+0x182>
    9104:	4660      	mov	r0, ip
    9106:	e7a4      	b.n	9052 <__udivmoddi4+0xe0>
    9108:	4663      	mov	r3, ip
    910a:	e7b8      	b.n	907e <__udivmoddi4+0x10c>
    910c:	4283      	cmp	r3, r0
    910e:	d906      	bls.n	911e <__udivmoddi4+0x1ac>
    9110:	b916      	cbnz	r6, 9118 <__udivmoddi4+0x1a6>
    9112:	2100      	movs	r1, #0
    9114:	4608      	mov	r0, r1
    9116:	e77c      	b.n	9012 <__udivmoddi4+0xa0>
    9118:	e9c6 e000 	strd	lr, r0, [r6]
    911c:	e7f9      	b.n	9112 <__udivmoddi4+0x1a0>
    911e:	fab3 f783 	clz	r7, r3
    9122:	b98f      	cbnz	r7, 9148 <__udivmoddi4+0x1d6>
    9124:	4283      	cmp	r3, r0
    9126:	d301      	bcc.n	912c <__udivmoddi4+0x1ba>
    9128:	4572      	cmp	r2, lr
    912a:	d808      	bhi.n	913e <__udivmoddi4+0x1cc>
    912c:	ebbe 0402 	subs.w	r4, lr, r2
    9130:	eb60 0303 	sbc.w	r3, r0, r3
    9134:	2001      	movs	r0, #1
    9136:	469c      	mov	ip, r3
    9138:	b91e      	cbnz	r6, 9142 <__udivmoddi4+0x1d0>
    913a:	2100      	movs	r1, #0
    913c:	e769      	b.n	9012 <__udivmoddi4+0xa0>
    913e:	4638      	mov	r0, r7
    9140:	e7fa      	b.n	9138 <__udivmoddi4+0x1c6>
    9142:	e9c6 4c00 	strd	r4, ip, [r6]
    9146:	e7f8      	b.n	913a <__udivmoddi4+0x1c8>
    9148:	f1c7 0c20 	rsb	ip, r7, #32
    914c:	40bb      	lsls	r3, r7
    914e:	fa0e f507 	lsl.w	r5, lr, r7
    9152:	fa22 f40c 	lsr.w	r4, r2, ip
    9156:	fa2e f10c 	lsr.w	r1, lr, ip
    915a:	40ba      	lsls	r2, r7
    915c:	431c      	orrs	r4, r3
    915e:	fa20 f30c 	lsr.w	r3, r0, ip
    9162:	40b8      	lsls	r0, r7
    9164:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9168:	4301      	orrs	r1, r0
    916a:	fa1f fe84 	uxth.w	lr, r4
    916e:	fbb3 f8f9 	udiv	r8, r3, r9
    9172:	fb09 3018 	mls	r0, r9, r8, r3
    9176:	0c0b      	lsrs	r3, r1, #16
    9178:	fb08 fa0e 	mul.w	sl, r8, lr
    917c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9180:	459a      	cmp	sl, r3
    9182:	d940      	bls.n	9206 <__udivmoddi4+0x294>
    9184:	18e3      	adds	r3, r4, r3
    9186:	f108 30ff 	add.w	r0, r8, #4294967295
    918a:	d204      	bcs.n	9196 <__udivmoddi4+0x224>
    918c:	459a      	cmp	sl, r3
    918e:	d902      	bls.n	9196 <__udivmoddi4+0x224>
    9190:	f1a8 0002 	sub.w	r0, r8, #2
    9194:	4423      	add	r3, r4
    9196:	eba3 030a 	sub.w	r3, r3, sl
    919a:	b289      	uxth	r1, r1
    919c:	fbb3 f8f9 	udiv	r8, r3, r9
    91a0:	fb09 3318 	mls	r3, r9, r8, r3
    91a4:	fb08 fe0e 	mul.w	lr, r8, lr
    91a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    91ac:	458e      	cmp	lr, r1
    91ae:	d92c      	bls.n	920a <__udivmoddi4+0x298>
    91b0:	1861      	adds	r1, r4, r1
    91b2:	f108 33ff 	add.w	r3, r8, #4294967295
    91b6:	d204      	bcs.n	91c2 <__udivmoddi4+0x250>
    91b8:	458e      	cmp	lr, r1
    91ba:	d902      	bls.n	91c2 <__udivmoddi4+0x250>
    91bc:	f1a8 0302 	sub.w	r3, r8, #2
    91c0:	4421      	add	r1, r4
    91c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c6:	eba1 010e 	sub.w	r1, r1, lr
    91ca:	fba0 9802 	umull	r9, r8, r0, r2
    91ce:	4541      	cmp	r1, r8
    91d0:	46ce      	mov	lr, r9
    91d2:	4643      	mov	r3, r8
    91d4:	d302      	bcc.n	91dc <__udivmoddi4+0x26a>
    91d6:	d106      	bne.n	91e6 <__udivmoddi4+0x274>
    91d8:	454d      	cmp	r5, r9
    91da:	d204      	bcs.n	91e6 <__udivmoddi4+0x274>
    91dc:	3801      	subs	r0, #1
    91de:	ebb9 0e02 	subs.w	lr, r9, r2
    91e2:	eb68 0304 	sbc.w	r3, r8, r4
    91e6:	2e00      	cmp	r6, #0
    91e8:	d0a7      	beq.n	913a <__udivmoddi4+0x1c8>
    91ea:	ebb5 020e 	subs.w	r2, r5, lr
    91ee:	eb61 0103 	sbc.w	r1, r1, r3
    91f2:	fa01 fc0c 	lsl.w	ip, r1, ip
    91f6:	fa22 f307 	lsr.w	r3, r2, r7
    91fa:	40f9      	lsrs	r1, r7
    91fc:	ea4c 0303 	orr.w	r3, ip, r3
    9200:	e9c6 3100 	strd	r3, r1, [r6]
    9204:	e799      	b.n	913a <__udivmoddi4+0x1c8>
    9206:	4640      	mov	r0, r8
    9208:	e7c5      	b.n	9196 <__udivmoddi4+0x224>
    920a:	4643      	mov	r3, r8
    920c:	e7d9      	b.n	91c2 <__udivmoddi4+0x250>

0000920e <strcmp>:
    920e:	f810 2b01 	ldrb.w	r2, [r0], #1
    9212:	f811 3b01 	ldrb.w	r3, [r1], #1
    9216:	2a01      	cmp	r2, #1
    9218:	bf28      	it	cs
    921a:	429a      	cmpcs	r2, r3
    921c:	d0f7      	beq.n	920e <strcmp>
    921e:	1ad0      	subs	r0, r2, r3
    9220:	4770      	bx	lr

00009222 <strlen>:
    9222:	4603      	mov	r3, r0
    9224:	f813 2b01 	ldrb.w	r2, [r3], #1
    9228:	2a00      	cmp	r2, #0
    922a:	d1fb      	bne.n	9224 <strlen+0x2>
    922c:	1a18      	subs	r0, r3, r0
    922e:	3801      	subs	r0, #1
    9230:	4770      	bx	lr
    9232:	0000      	movs	r0, r0
    9234:	0000      	movs	r0, r0
	...

00009238 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
    9238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    923c:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    923e:	460c      	mov	r4, r1
{
    9240:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    9242:	2900      	cmp	r1, #0
    9244:	f000 80bd 	beq.w	93c2 <parse_value+0x18a>
    9248:	680f      	ldr	r7, [r1, #0]
    924a:	2f00      	cmp	r7, #0
    924c:	f000 80b9 	beq.w	93c2 <parse_value+0x18a>
        return false; /* no input */
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
    9250:	688d      	ldr	r5, [r1, #8]
    9252:	f8d1 8004 	ldr.w	r8, [r1, #4]
    9256:	f105 0904 	add.w	r9, r5, #4
    925a:	45c1      	cmp	r9, r8
    925c:	d80a      	bhi.n	9274 <parse_value+0x3c>
    925e:	2204      	movs	r2, #4
    9260:	49ab      	ldr	r1, [pc, #684]	; (9510 <parse_value+0x2d8>)
    9262:	1978      	adds	r0, r7, r5
    9264:	f027 fc81 	bl	30b6a <strncmp>
    9268:	b9a8      	cbnz	r0, 9296 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
    926a:	2304      	movs	r3, #4
    926c:	60f3      	str	r3, [r6, #12]
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    {
        item->type = cJSON_True;
        item->valueint = 1;
        input_buffer->offset += 4;
    926e:	68a3      	ldr	r3, [r4, #8]
    9270:	3304      	adds	r3, #4
        return true;
    9272:	e01d      	b.n	92b0 <parse_value+0x78>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    9274:	1d6b      	adds	r3, r5, #5
    9276:	4598      	cmp	r8, r3
    9278:	d210      	bcs.n	929c <parse_value+0x64>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
    927a:	4545      	cmp	r5, r8
    927c:	f080 80a1 	bcs.w	93c2 <parse_value+0x18a>
    9280:	5d7b      	ldrb	r3, [r7, r5]
    9282:	1978      	adds	r0, r7, r5
    9284:	2b22      	cmp	r3, #34	; 0x22
    9286:	d124      	bne.n	92d2 <parse_value+0x9a>
    {
        return parse_string(item, input_buffer);
    9288:	4621      	mov	r1, r4
    928a:	4630      	mov	r0, r6
    {
        return parse_object(item, input_buffer);
    }

    return false;
}
    928c:	b012      	add	sp, #72	; 0x48
    928e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
    9292:	f003 bcff 	b.w	cc94 <parse_string>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    9296:	1d6b      	adds	r3, r5, #5
    9298:	4598      	cmp	r8, r3
    929a:	d30e      	bcc.n	92ba <parse_value+0x82>
    929c:	2205      	movs	r2, #5
    929e:	499d      	ldr	r1, [pc, #628]	; (9514 <parse_value+0x2dc>)
    92a0:	1978      	adds	r0, r7, r5
    92a2:	f027 fc62 	bl	30b6a <strncmp>
    92a6:	b930      	cbnz	r0, 92b6 <parse_value+0x7e>
        item->type = cJSON_False;
    92a8:	2301      	movs	r3, #1
    92aa:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 5;
    92ac:	68a3      	ldr	r3, [r4, #8]
    92ae:	3305      	adds	r3, #5
        return true;
    92b0:	2001      	movs	r0, #1
        input_buffer->offset += 4;
    92b2:	60a3      	str	r3, [r4, #8]
    92b4:	e086      	b.n	93c4 <parse_value+0x18c>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    92b6:	45c1      	cmp	r9, r8
    92b8:	d8df      	bhi.n	927a <parse_value+0x42>
    92ba:	2204      	movs	r2, #4
    92bc:	4996      	ldr	r1, [pc, #600]	; (9518 <parse_value+0x2e0>)
    92be:	1978      	adds	r0, r7, r5
    92c0:	f027 fc53 	bl	30b6a <strncmp>
    92c4:	2800      	cmp	r0, #0
    92c6:	d1d8      	bne.n	927a <parse_value+0x42>
        item->type = cJSON_True;
    92c8:	2302      	movs	r3, #2
    92ca:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
    92cc:	2301      	movs	r3, #1
    92ce:	6173      	str	r3, [r6, #20]
    92d0:	e7cd      	b.n	926e <parse_value+0x36>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
    92d2:	2b2d      	cmp	r3, #45	; 0x2d
    92d4:	d003      	beq.n	92de <parse_value+0xa6>
    92d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    92da:	2a09      	cmp	r2, #9
    92dc:	d853      	bhi.n	9386 <parse_value+0x14e>
    unsigned char *after_end = NULL;
    92de:	2300      	movs	r3, #0
    92e0:	f10d 0c08 	add.w	ip, sp, #8
    92e4:	4667      	mov	r7, ip
        switch (buffer_at_offset(input_buffer)[i])
    92e6:	f04f 0e01 	mov.w	lr, #1
    92ea:	eba8 0505 	sub.w	r5, r8, r5
    92ee:	f8df 822c 	ldr.w	r8, [pc, #556]	; 951c <parse_value+0x2e4>
    unsigned char *after_end = NULL;
    92f2:	9301      	str	r3, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
    92f4:	f810 2b01 	ldrb.w	r2, [r0], #1
    92f8:	2a45      	cmp	r2, #69	; 0x45
    92fa:	d83c      	bhi.n	9376 <parse_value+0x13e>
    92fc:	2a2a      	cmp	r2, #42	; 0x2a
    92fe:	d910      	bls.n	9322 <parse_value+0xea>
    9300:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
    9304:	b2c9      	uxtb	r1, r1
    9306:	fa0e f101 	lsl.w	r1, lr, r1
    930a:	ea11 0f08 	tst.w	r1, r8
    930e:	d101      	bne.n	9314 <parse_value+0xdc>
    9310:	2a2e      	cmp	r2, #46	; 0x2e
    9312:	d106      	bne.n	9322 <parse_value+0xea>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    9314:	3301      	adds	r3, #1
    9316:	2b3f      	cmp	r3, #63	; 0x3f
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
    9318:	f80c 2b01 	strb.w	r2, [ip], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    931c:	d001      	beq.n	9322 <parse_value+0xea>
    931e:	42ab      	cmp	r3, r5
    9320:	d1e8      	bne.n	92f4 <parse_value+0xbc>
    number_c_string[i] = '\0';
    9322:	2500      	movs	r5, #0
    9324:	3348      	adds	r3, #72	; 0x48
    9326:	446b      	add	r3, sp
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9328:	4638      	mov	r0, r7
    932a:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
    932c:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9330:	f01f fac4 	bl	288bc <strtod>
    if (number_c_string == after_end)
    9334:	f8dd a004 	ldr.w	sl, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9338:	4680      	mov	r8, r0
    if (number_c_string == after_end)
    933a:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
    933c:	4689      	mov	r9, r1
    if (number_c_string == after_end)
    933e:	d040      	beq.n	93c2 <parse_value+0x18a>
    if (number >= INT_MAX)
    9340:	a371      	add	r3, pc, #452	; (adr r3, 9508 <parse_value+0x2d0>)
    9342:	e9d3 2300 	ldrd	r2, r3, [r3]
    9346:	f7ff fbf5 	bl	8b34 <__aeabi_dcmpge>
    934a:	b9b0      	cbnz	r0, 937a <parse_value+0x142>
    else if (number <= (double)INT_MIN)
    934c:	2200      	movs	r2, #0
    934e:	4640      	mov	r0, r8
    9350:	4649      	mov	r1, r9
    9352:	4b73      	ldr	r3, [pc, #460]	; (9520 <parse_value+0x2e8>)
    9354:	f7ff fbe4 	bl	8b20 <__aeabi_dcmple>
    9358:	b990      	cbnz	r0, 9380 <parse_value+0x148>
        item->valueint = (int)number;
    935a:	4640      	mov	r0, r8
    935c:	4649      	mov	r1, r9
    935e:	f7ff fc13 	bl	8b88 <__aeabi_d2iz>
    item->type = cJSON_Number;
    9362:	2308      	movs	r3, #8
    item->valuedouble = number;
    9364:	e9c6 8906 	strd	r8, r9, [r6, #24]
        item->valueint = INT_MAX;
    9368:	6170      	str	r0, [r6, #20]
    item->type = cJSON_Number;
    936a:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
    936c:	68a3      	ldr	r3, [r4, #8]
    936e:	ebaa 0a07 	sub.w	sl, sl, r7
    9372:	4453      	add	r3, sl
    9374:	e79c      	b.n	92b0 <parse_value+0x78>
        switch (buffer_at_offset(input_buffer)[i])
    9376:	2a65      	cmp	r2, #101	; 0x65
    9378:	e7cb      	b.n	9312 <parse_value+0xda>
    937a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    937e:	e7f0      	b.n	9362 <parse_value+0x12a>
    9380:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    9384:	e7ed      	b.n	9362 <parse_value+0x12a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
    9386:	2b5b      	cmp	r3, #91	; 0x5b
    9388:	d158      	bne.n	943c <parse_value+0x204>
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
    cJSON *head = NULL; /* head of the linked list */
    cJSON *current_item = NULL;

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    938a:	f8d4 900c 	ldr.w	r9, [r4, #12]
    938e:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    9392:	d216      	bcs.n	93c2 <parse_value+0x18a>
    {
        return false; /* to deeply nested */
    }
    input_buffer->depth++;
    9394:	f109 0301 	add.w	r3, r9, #1
    9398:	60e3      	str	r3, [r4, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
    939a:	5d7b      	ldrb	r3, [r7, r5]
    939c:	2b5b      	cmp	r3, #91	; 0x5b
    939e:	d110      	bne.n	93c2 <parse_value+0x18a>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
    93a0:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    93a2:	4620      	mov	r0, r4
    input_buffer->offset++;
    93a4:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    93a6:	f021 fa6d 	bl	2a884 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
    93aa:	68a3      	ldr	r3, [r4, #8]
    93ac:	4598      	cmp	r8, r3
    93ae:	d906      	bls.n	93be <parse_value+0x186>
    93b0:	5cfa      	ldrb	r2, [r7, r3]
    93b2:	2a5d      	cmp	r2, #93	; 0x5d
    93b4:	d109      	bne.n	93ca <parse_value+0x192>
    cJSON *head = NULL; /* head of the linked list */
    93b6:	2700      	movs	r7, #0
    {
        goto fail; /* expected end of array */
    }

success:
    input_buffer->depth--;
    93b8:	f8c4 900c 	str.w	r9, [r4, #12]

    if (head != NULL) {
    93bc:	e036      	b.n	942c <parse_value+0x1f4>
        input_buffer->offset--;
    93be:	3b01      	subs	r3, #1
    93c0:	60a3      	str	r3, [r4, #8]
        return false; /* to deeply nested */
    93c2:	2000      	movs	r0, #0
}
    93c4:	b012      	add	sp, #72	; 0x48
    93c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cJSON *current_item = NULL;
    93ca:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
    93cc:	462f      	mov	r7, r5
    input_buffer->offset--;
    93ce:	3b01      	subs	r3, #1
    93d0:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    93d2:	6920      	ldr	r0, [r4, #16]
    93d4:	f021 fa6d 	bl	2a8b2 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    93d8:	46a8      	mov	r8, r5
    93da:	4605      	mov	r5, r0
    93dc:	2800      	cmp	r0, #0
    93de:	f000 80a3 	beq.w	9528 <parse_value+0x2f0>
        if (head == NULL)
    93e2:	b34f      	cbz	r7, 9438 <parse_value+0x200>
            current_item->next = new_item;
    93e4:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
    93e8:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
    93ec:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    93ee:	4620      	mov	r0, r4
        input_buffer->offset++;
    93f0:	3301      	adds	r3, #1
    93f2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    93f4:	f021 fa46 	bl	2a884 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    93f8:	4621      	mov	r1, r4
    93fa:	4628      	mov	r0, r5
    93fc:	f7ff ff1c 	bl	9238 <parse_value>
    9400:	2800      	cmp	r0, #0
    9402:	f000 8091 	beq.w	9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    9406:	4620      	mov	r0, r4
    9408:	f021 fa3c 	bl	2a884 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    940c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    9410:	4293      	cmp	r3, r2
    9412:	f080 808c 	bcs.w	952e <parse_value+0x2f6>
    9416:	6822      	ldr	r2, [r4, #0]
    9418:	5cd3      	ldrb	r3, [r2, r3]
    941a:	2b2c      	cmp	r3, #44	; 0x2c
    941c:	d0d9      	beq.n	93d2 <parse_value+0x19a>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
    941e:	2b5d      	cmp	r3, #93	; 0x5d
    9420:	f040 8085 	bne.w	952e <parse_value+0x2f6>
    input_buffer->depth--;
    9424:	68e3      	ldr	r3, [r4, #12]
    9426:	3b01      	subs	r3, #1
    9428:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    942a:	607d      	str	r5, [r7, #4]
    }

    item->type = cJSON_Array;
    942c:	2320      	movs	r3, #32
    if (head != NULL) {
        head->prev = current_item;
    }

    item->type = cJSON_Object;
    item->child = head;
    942e:	e9c6 7302 	strd	r7, r3, [r6, #8]

    input_buffer->offset++;
    9432:	68a3      	ldr	r3, [r4, #8]
    9434:	3301      	adds	r3, #1
    return true;
    9436:	e73b      	b.n	92b0 <parse_value+0x78>
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9438:	4607      	mov	r7, r0
    943a:	e7d7      	b.n	93ec <parse_value+0x1b4>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
    943c:	2b7b      	cmp	r3, #123	; 0x7b
    943e:	d1c0      	bne.n	93c2 <parse_value+0x18a>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    9440:	f8d4 900c 	ldr.w	r9, [r4, #12]
    9444:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    9448:	d2bb      	bcs.n	93c2 <parse_value+0x18a>
    input_buffer->depth++;
    944a:	f109 0301 	add.w	r3, r9, #1
    944e:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
    9450:	5d7b      	ldrb	r3, [r7, r5]
    9452:	2b7b      	cmp	r3, #123	; 0x7b
    9454:	d1b5      	bne.n	93c2 <parse_value+0x18a>
    input_buffer->offset++;
    9456:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    9458:	4620      	mov	r0, r4
    input_buffer->offset++;
    945a:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    945c:	f021 fa12 	bl	2a884 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
    9460:	68a3      	ldr	r3, [r4, #8]
    9462:	4598      	cmp	r8, r3
    9464:	d9ab      	bls.n	93be <parse_value+0x186>
    9466:	5cfa      	ldrb	r2, [r7, r3]
    9468:	2a7d      	cmp	r2, #125	; 0x7d
    946a:	d103      	bne.n	9474 <parse_value+0x23c>
    cJSON *head = NULL; /* linked list head */
    946c:	2700      	movs	r7, #0
    input_buffer->depth--;
    946e:	f8c4 900c 	str.w	r9, [r4, #12]
    if (head != NULL) {
    9472:	e047      	b.n	9504 <parse_value+0x2cc>
    cJSON *current_item = NULL;
    9474:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
    9476:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
    9478:	46a8      	mov	r8, r5
    input_buffer->offset--;
    947a:	3b01      	subs	r3, #1
    947c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    947e:	6920      	ldr	r0, [r4, #16]
    9480:	f021 fa17 	bl	2a8b2 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    9484:	46a9      	mov	r9, r5
    9486:	4605      	mov	r5, r0
    9488:	2800      	cmp	r0, #0
    948a:	d04d      	beq.n	9528 <parse_value+0x2f0>
        if (head == NULL)
    948c:	2f00      	cmp	r7, #0
    948e:	d049      	beq.n	9524 <parse_value+0x2ec>
            current_item->next = new_item;
    9490:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
    9494:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
    9498:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    949a:	4620      	mov	r0, r4
        input_buffer->offset++;
    949c:	3301      	adds	r3, #1
    949e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    94a0:	f021 f9f0 	bl	2a884 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
    94a4:	4621      	mov	r1, r4
    94a6:	4628      	mov	r0, r5
    94a8:	f003 fbf4 	bl	cc94 <parse_string>
    94ac:	2800      	cmp	r0, #0
    94ae:	d03b      	beq.n	9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    94b0:	4620      	mov	r0, r4
    94b2:	f021 f9e7 	bl	2a884 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
    94b6:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
    94b8:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
    94bc:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
    94be:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    94c2:	4293      	cmp	r3, r2
    94c4:	d230      	bcs.n	9528 <parse_value+0x2f0>
    94c6:	6822      	ldr	r2, [r4, #0]
    94c8:	5cd2      	ldrb	r2, [r2, r3]
    94ca:	2a3a      	cmp	r2, #58	; 0x3a
    94cc:	d12c      	bne.n	9528 <parse_value+0x2f0>
        input_buffer->offset++;
    94ce:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
    94d0:	4620      	mov	r0, r4
        input_buffer->offset++;
    94d2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    94d4:	f021 f9d6 	bl	2a884 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    94d8:	4621      	mov	r1, r4
    94da:	4628      	mov	r0, r5
    94dc:	f7ff feac 	bl	9238 <parse_value>
    94e0:	b310      	cbz	r0, 9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    94e2:	4620      	mov	r0, r4
    94e4:	f021 f9ce 	bl	2a884 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    94e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    94ec:	4293      	cmp	r3, r2
    94ee:	d21e      	bcs.n	952e <parse_value+0x2f6>
    94f0:	6822      	ldr	r2, [r4, #0]
    94f2:	5cd3      	ldrb	r3, [r2, r3]
    94f4:	2b2c      	cmp	r3, #44	; 0x2c
    94f6:	d0c2      	beq.n	947e <parse_value+0x246>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
    94f8:	2b7d      	cmp	r3, #125	; 0x7d
    94fa:	d118      	bne.n	952e <parse_value+0x2f6>
    input_buffer->depth--;
    94fc:	68e3      	ldr	r3, [r4, #12]
    94fe:	3b01      	subs	r3, #1
    9500:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    9502:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
    9504:	2340      	movs	r3, #64	; 0x40
    9506:	e792      	b.n	942e <parse_value+0x1f6>
    9508:	ffc00000 	.word	0xffc00000
    950c:	41dfffff 	.word	0x41dfffff
    9510:	00033c91 	.word	0x00033c91
    9514:	00033c96 	.word	0x00033c96
    9518:	00033c9c 	.word	0x00033c9c
    951c:	04007fe5 	.word	0x04007fe5
    9520:	c1e00000 	.word	0xc1e00000
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9524:	4607      	mov	r7, r0
    9526:	e7b7      	b.n	9498 <parse_value+0x260>

fail:
    if (head != NULL)
    9528:	2f00      	cmp	r7, #0
    952a:	f43f af4a 	beq.w	93c2 <parse_value+0x18a>
    {
        cJSON_Delete(head);
    952e:	4638      	mov	r0, r7
    9530:	f003 fce4 	bl	cefc <cJSON_Delete>
    9534:	e745      	b.n	93c2 <parse_value+0x18a>
    9536:	bf00      	nop

00009538 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
    9538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    953c:	2300      	movs	r3, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    953e:	2604      	movs	r6, #4
{
    9540:	b086      	sub	sp, #24
    9542:	af00      	add	r7, sp, #0
    9544:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    9546:	4680      	mov	r8, r0
	struct at_param_list resp_list = {0};
    9548:	e9c7 3304 	strd	r3, r3, [r7, #16]
	size_t len = sizeof(tmp_buf) - 1;
    954c:	607e      	str	r6, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
    954e:	2800      	cmp	r0, #0
    9550:	f000 80f8 	beq.w	9744 <parse_edrx+0x20c>
    9554:	2900      	cmp	r1, #0
    9556:	f000 80f5 	beq.w	9744 <parse_edrx+0x20c>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    955a:	2106      	movs	r1, #6
    955c:	f107 0010 	add.w	r0, r7, #16
    9560:	f025 fe42 	bl	2f1e8 <at_params_list_init>
	if (err) {
    9564:	4604      	mov	r4, r0
    9566:	b1a0      	cbz	r0, 9592 <parse_edrx+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
    9568:	466d      	mov	r5, sp
    956a:	b088      	sub	sp, #32
    956c:	466a      	mov	r2, sp
    956e:	4b7a      	ldr	r3, [pc, #488]	; (9758 <parse_edrx+0x220>)
    9570:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9574:	6153      	str	r3, [r2, #20]
    9576:	4b79      	ldr	r3, [pc, #484]	; (975c <parse_edrx+0x224>)
    9578:	e9c2 3006 	strd	r3, r0, [r2, #24]
    957c:	4878      	ldr	r0, [pc, #480]	; (9760 <parse_edrx+0x228>)
    957e:	f842 6f10 	str.w	r6, [r2, #16]!
    9582:	f025 ff81 	bl	2f488 <z_log_msg_static_create.constprop.0>
    9586:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
    9588:	4620      	mov	r0, r4
    958a:	3718      	adds	r7, #24
    958c:	46bd      	mov	sp, r7
    958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
    9592:	4601      	mov	r1, r0
    9594:	f107 0210 	add.w	r2, r7, #16
    9598:	4640      	mov	r0, r8
    959a:	f025 fe22 	bl	2f1e2 <at_parser_params_from_str>
	if (err) {
    959e:	4604      	mov	r4, r0
    95a0:	b1a0      	cbz	r0, 95cc <parse_edrx+0x94>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    95a2:	466d      	mov	r5, sp
    95a4:	b088      	sub	sp, #32
    95a6:	466a      	mov	r2, sp
    95a8:	4b6e      	ldr	r3, [pc, #440]	; (9764 <parse_edrx+0x22c>)
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    95aa:	6153      	str	r3, [r2, #20]
    95ac:	4b6b      	ldr	r3, [pc, #428]	; (975c <parse_edrx+0x224>)
    95ae:	e9c2 3406 	strd	r3, r4, [r2, #24]
    95b2:	f842 6f10 	str.w	r6, [r2, #16]!
    95b6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    95ba:	4869      	ldr	r0, [pc, #420]	; (9760 <parse_edrx+0x228>)
    95bc:	f025 ff64 	bl	2f488 <z_log_msg_static_create.constprop.0>
    95c0:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
    95c2:	f107 0010 	add.w	r0, r7, #16
    95c6:	f025 fe22 	bl	2f20e <at_params_list_free>
	return err;
    95ca:	e7dd      	b.n	9588 <parse_edrx+0x50>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    95cc:	463a      	mov	r2, r7
    95ce:	2101      	movs	r1, #1
    95d0:	f107 0010 	add.w	r0, r7, #16
    95d4:	f025 fecf 	bl	2f376 <at_params_int_get>
	if (err) {
    95d8:	4604      	mov	r4, r0
    95da:	b120      	cbz	r0, 95e6 <parse_edrx+0xae>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    95dc:	466d      	mov	r5, sp
    95de:	b088      	sub	sp, #32
    95e0:	466a      	mov	r2, sp
    95e2:	4b61      	ldr	r3, [pc, #388]	; (9768 <parse_edrx+0x230>)
    95e4:	e7e1      	b.n	95aa <parse_edrx+0x72>
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    95e6:	683c      	ldr	r4, [r7, #0]
    95e8:	b1e4      	cbz	r4, 9624 <parse_edrx+0xec>
    95ea:	2c04      	cmp	r4, #4
    95ec:	d01f      	beq.n	962e <parse_edrx+0xf6>
    95ee:	2c05      	cmp	r4, #5
    95f0:	bf0c      	ite	eq
    95f2:	2309      	moveq	r3, #9
    95f4:	23ff      	movne	r3, #255	; 0xff
    95f6:	702b      	strb	r3, [r5, #0]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    95f8:	2103      	movs	r1, #3
    95fa:	1d3b      	adds	r3, r7, #4
    95fc:	f107 0208 	add.w	r2, r7, #8
    9600:	f107 0010 	add.w	r0, r7, #16
    9604:	f025 fee5 	bl	2f3d2 <at_params_string_get>
	if (err) {
    9608:	4604      	mov	r4, r0
    960a:	b190      	cbz	r0, 9632 <parse_edrx+0xfa>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    960c:	466d      	mov	r5, sp
    960e:	b088      	sub	sp, #32
    9610:	466a      	mov	r2, sp
    9612:	4b56      	ldr	r3, [pc, #344]	; (976c <parse_edrx+0x234>)
    9614:	6153      	str	r3, [r2, #20]
    9616:	4b51      	ldr	r3, [pc, #324]	; (975c <parse_edrx+0x224>)
    9618:	e9c2 3006 	strd	r3, r0, [r2, #24]
    961c:	2304      	movs	r3, #4
    961e:	f842 3f10 	str.w	r3, [r2, #16]!
    9622:	e7c8      	b.n	95b6 <parse_edrx+0x7e>
		cfg->edrx = 0;
    9624:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9626:	702c      	strb	r4, [r5, #0]
		cfg->edrx = 0;
    9628:	606b      	str	r3, [r5, #4]
		cfg->ptw = 0;
    962a:	60ab      	str	r3, [r5, #8]
		return 0;
    962c:	e7ac      	b.n	9588 <parse_edrx+0x50>
    962e:	2307      	movs	r3, #7
    9630:	e7e1      	b.n	95f6 <parse_edrx+0xbe>
	tmp_buf[len] = '\0';
    9632:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    9634:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9636:	3318      	adds	r3, #24
    9638:	443b      	add	r3, r7
    963a:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    963e:	2202      	movs	r2, #2
    9640:	f107 0008 	add.w	r0, r7, #8
    9644:	f01f fade 	bl	28c04 <strtoul>
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
    9648:	782b      	ldrb	r3, [r5, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    964a:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
    964c:	2b07      	cmp	r3, #7
    964e:	d02c      	beq.n	96aa <parse_edrx+0x172>
    9650:	2b09      	cmp	r3, #9
    9652:	d117      	bne.n	9684 <parse_edrx+0x14c>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9654:	280f      	cmp	r0, #15
    9656:	d94b      	bls.n	96f0 <parse_edrx+0x1b8>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    9658:	466c      	mov	r4, sp
    965a:	b088      	sub	sp, #32
    965c:	466a      	mov	r2, sp
    965e:	4b44      	ldr	r3, [pc, #272]	; (9770 <parse_edrx+0x238>)
    9660:	6153      	str	r3, [r2, #20]
    9662:	4b3e      	ldr	r3, [pc, #248]	; (975c <parse_edrx+0x224>)
    9664:	6193      	str	r3, [r2, #24]
    9666:	f06f 0315 	mvn.w	r3, #21
    966a:	61d3      	str	r3, [r2, #28]
    966c:	2304      	movs	r3, #4
    966e:	f842 3f10 	str.w	r3, [r2, #16]!
    9672:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9676:	483a      	ldr	r0, [pc, #232]	; (9760 <parse_edrx+0x228>)
    9678:	f025 ff06 	bl	2f488 <z_log_msg_static_create.constprop.0>
    967c:	46a5      	mov	sp, r4
		return -ENOTCONN;
    967e:	f06f 0415 	mvn.w	r4, #21
    9682:	e79e      	b.n	95c2 <parse_edrx+0x8a>
		LOG_WRN("Active LTE mode could not be determined");
    9684:	466c      	mov	r4, sp
    9686:	b088      	sub	sp, #32
    9688:	466a      	mov	r2, sp
    968a:	4b3a      	ldr	r3, [pc, #232]	; (9774 <parse_edrx+0x23c>)
    968c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9690:	6153      	str	r3, [r2, #20]
    9692:	4b32      	ldr	r3, [pc, #200]	; (975c <parse_edrx+0x224>)
    9694:	4832      	ldr	r0, [pc, #200]	; (9760 <parse_edrx+0x228>)
    9696:	6193      	str	r3, [r2, #24]
    9698:	2303      	movs	r3, #3
    969a:	f842 3f10 	str.w	r3, [r2, #16]!
    969e:	f025 fef3 	bl	2f488 <z_log_msg_static_create.constprop.0>
    96a2:	46a5      	mov	sp, r4
		return -ENOTCONN;
    96a4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
    96a8:	e78b      	b.n	95c2 <parse_edrx+0x8a>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    96aa:	280f      	cmp	r0, #15
    96ac:	d8d4      	bhi.n	9658 <parse_edrx+0x120>
		multiplier = edrx_lookup_ltem[idx];
    96ae:	4b32      	ldr	r3, [pc, #200]	; (9778 <parse_edrx+0x240>)
		*ptw_multiplier = 1.28;
    96b0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 977c <parse_edrx+0x244>
		multiplier = edrx_lookup_ltem[idx];
    96b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    96b8:	b300      	cbz	r0, 96fc <parse_edrx+0x1c4>
    96ba:	f7fe ff4b 	bl	8554 <__aeabi_i2d>
    96be:	a324      	add	r3, pc, #144	; (adr r3, 9750 <parse_edrx+0x218>)
    96c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    96c4:	f7fe ffb0 	bl	8628 <__aeabi_dmul>
    96c8:	f7ff fa86 	bl	8bd8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    96cc:	2604      	movs	r6, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    96ce:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    96d0:	4631      	mov	r1, r6
    96d2:	19bb      	adds	r3, r7, r6
    96d4:	f107 0208 	add.w	r2, r7, #8
    96d8:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
    96dc:	607e      	str	r6, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    96de:	f025 fe78 	bl	2f3d2 <at_params_string_get>
	if (err) {
    96e2:	4604      	mov	r4, r0
    96e4:	b160      	cbz	r0, 9700 <parse_edrx+0x1c8>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    96e6:	466d      	mov	r5, sp
    96e8:	b088      	sub	sp, #32
    96ea:	466a      	mov	r2, sp
    96ec:	4b24      	ldr	r3, [pc, #144]	; (9780 <parse_edrx+0x248>)
    96ee:	e75c      	b.n	95aa <parse_edrx+0x72>
		multiplier = edrx_lookup_nbiot[idx];
    96f0:	4b24      	ldr	r3, [pc, #144]	; (9784 <parse_edrx+0x24c>)
		*ptw_multiplier = 2.56;
    96f2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 9788 <parse_edrx+0x250>
		multiplier = edrx_lookup_nbiot[idx];
    96f6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    96fa:	e7dd      	b.n	96b8 <parse_edrx+0x180>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    96fc:	4823      	ldr	r0, [pc, #140]	; (978c <parse_edrx+0x254>)
    96fe:	e7e5      	b.n	96cc <parse_edrx+0x194>
	tmp_buf[len] = '\0';
    9700:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    9702:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9704:	3318      	adds	r3, #24
    9706:	443b      	add	r3, r7
    9708:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
    970c:	2202      	movs	r2, #2
    970e:	f107 0008 	add.w	r0, r7, #8
    9712:	f01f fa77 	bl	28c04 <strtoul>
    9716:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    9718:	280f      	cmp	r0, #15
    971a:	d90a      	bls.n	9732 <parse_edrx+0x1fa>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    971c:	466c      	mov	r4, sp
    971e:	b088      	sub	sp, #32
    9720:	466a      	mov	r2, sp
    9722:	4b1b      	ldr	r3, [pc, #108]	; (9790 <parse_edrx+0x258>)
    9724:	6153      	str	r3, [r2, #20]
    9726:	4b0d      	ldr	r3, [pc, #52]	; (975c <parse_edrx+0x224>)
    9728:	e9c2 3006 	strd	r3, r0, [r2, #24]
    972c:	f842 6f10 	str.w	r6, [r2, #16]!
    9730:	e79f      	b.n	9672 <parse_edrx+0x13a>
	idx += 1;
    9732:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    9734:	b2c0      	uxtb	r0, r0
    9736:	f7ff fb59 	bl	8dec <__aeabi_i2f>
    973a:	4641      	mov	r1, r8
    973c:	f7fe fd04 	bl	8148 <__aeabi_fmul>
    9740:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    9742:	e73e      	b.n	95c2 <parse_edrx+0x8a>
		return -EINVAL;
    9744:	f06f 0415 	mvn.w	r4, #21
    9748:	e71e      	b.n	9588 <parse_edrx+0x50>
    974a:	bf00      	nop
    974c:	f3af 8000 	nop.w
    9750:	47ae147b 	.word	0x47ae147b
    9754:	40247ae1 	.word	0x40247ae1
    9758:	000399f7 	.word	0x000399f7
    975c:	0003a523 	.word	0x0003a523
    9760:	00031c34 	.word	0x00031c34
    9764:	00039a24 	.word	0x00039a24
    9768:	00039a54 	.word	0x00039a54
    976c:	00039a7a 	.word	0x00039a7a
    9770:	00039ad6 	.word	0x00039ad6
    9774:	00039aaa 	.word	0x00039aaa
    9778:	00032ba4 	.word	0x00032ba4
    977c:	3fa3d70a 	.word	0x3fa3d70a
    9780:	00039afe 	.word	0x00039afe
    9784:	00032b84 	.word	0x00032b84
    9788:	4023d70a 	.word	0x4023d70a
    978c:	40a3d70a 	.word	0x40a3d70a
    9790:	00039b2d 	.word	0x00039b2d
    9794:	00000000 	.word	0x00000000

00009798 <_strtod_l>:
    9798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    979c:	461f      	mov	r7, r3
    979e:	b09d      	sub	sp, #116	; 0x74
    97a0:	2300      	movs	r3, #0
    97a2:	460c      	mov	r4, r1
    97a4:	4682      	mov	sl, r0
    97a6:	920e      	str	r2, [sp, #56]	; 0x38
    97a8:	9318      	str	r3, [sp, #96]	; 0x60
    97aa:	f04f 0800 	mov.w	r8, #0
    97ae:	4b97      	ldr	r3, [pc, #604]	; (9a0c <_strtod_l+0x274>)
    97b0:	f04f 0900 	mov.w	r9, #0
    97b4:	681d      	ldr	r5, [r3, #0]
    97b6:	4628      	mov	r0, r5
    97b8:	f7ff fd33 	bl	9222 <strlen>
    97bc:	4622      	mov	r2, r4
    97be:	4683      	mov	fp, r0
    97c0:	9217      	str	r2, [sp, #92]	; 0x5c
    97c2:	7813      	ldrb	r3, [r2, #0]
    97c4:	2b2b      	cmp	r3, #43	; 0x2b
    97c6:	d03b      	beq.n	9840 <_strtod_l+0xa8>
    97c8:	d82c      	bhi.n	9824 <_strtod_l+0x8c>
    97ca:	2b0d      	cmp	r3, #13
    97cc:	d826      	bhi.n	981c <_strtod_l+0x84>
    97ce:	2b08      	cmp	r3, #8
    97d0:	d826      	bhi.n	9820 <_strtod_l+0x88>
    97d2:	2b00      	cmp	r3, #0
    97d4:	d02f      	beq.n	9836 <_strtod_l+0x9e>
    97d6:	2300      	movs	r3, #0
    97d8:	930c      	str	r3, [sp, #48]	; 0x30
    97da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    97dc:	7833      	ldrb	r3, [r6, #0]
    97de:	2b30      	cmp	r3, #48	; 0x30
    97e0:	d172      	bne.n	98c8 <_strtod_l+0x130>
    97e2:	7873      	ldrb	r3, [r6, #1]
    97e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    97e8:	2b58      	cmp	r3, #88	; 0x58
    97ea:	d163      	bne.n	98b4 <_strtod_l+0x11c>
    97ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    97ee:	a917      	add	r1, sp, #92	; 0x5c
    97f0:	4a87      	ldr	r2, [pc, #540]	; (9a10 <_strtod_l+0x278>)
    97f2:	4650      	mov	r0, sl
    97f4:	9301      	str	r3, [sp, #4]
    97f6:	ab18      	add	r3, sp, #96	; 0x60
    97f8:	9702      	str	r7, [sp, #8]
    97fa:	9300      	str	r3, [sp, #0]
    97fc:	ab19      	add	r3, sp, #100	; 0x64
    97fe:	f01f fa69 	bl	28cd4 <__gethex>
    9802:	f010 0507 	ands.w	r5, r0, #7
    9806:	4604      	mov	r4, r0
    9808:	d035      	beq.n	9876 <_strtod_l+0xde>
    980a:	2d06      	cmp	r5, #6
    980c:	d11a      	bne.n	9844 <_strtod_l+0xac>
    980e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9810:	b10b      	cbz	r3, 9816 <_strtod_l+0x7e>
    9812:	3601      	adds	r6, #1
    9814:	601e      	str	r6, [r3, #0]
    9816:	4640      	mov	r0, r8
    9818:	4649      	mov	r1, r9
    981a:	e037      	b.n	988c <_strtod_l+0xf4>
    981c:	2b20      	cmp	r3, #32
    981e:	d1da      	bne.n	97d6 <_strtod_l+0x3e>
    9820:	3201      	adds	r2, #1
    9822:	e7cd      	b.n	97c0 <_strtod_l+0x28>
    9824:	2b2d      	cmp	r3, #45	; 0x2d
    9826:	d1d6      	bne.n	97d6 <_strtod_l+0x3e>
    9828:	2301      	movs	r3, #1
    982a:	930c      	str	r3, [sp, #48]	; 0x30
    982c:	1c53      	adds	r3, r2, #1
    982e:	9317      	str	r3, [sp, #92]	; 0x5c
    9830:	7853      	ldrb	r3, [r2, #1]
    9832:	2b00      	cmp	r3, #0
    9834:	d1d1      	bne.n	97da <_strtod_l+0x42>
    9836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9838:	2b00      	cmp	r3, #0
    983a:	d0ec      	beq.n	9816 <_strtod_l+0x7e>
    983c:	601c      	str	r4, [r3, #0]
    983e:	e7ea      	b.n	9816 <_strtod_l+0x7e>
    9840:	2300      	movs	r3, #0
    9842:	e7f2      	b.n	982a <_strtod_l+0x92>
    9844:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9846:	b13a      	cbz	r2, 9858 <_strtod_l+0xc0>
    9848:	2135      	movs	r1, #53	; 0x35
    984a:	a81a      	add	r0, sp, #104	; 0x68
    984c:	f027 fc84 	bl	31158 <__copybits>
    9850:	9918      	ldr	r1, [sp, #96]	; 0x60
    9852:	4650      	mov	r0, sl
    9854:	f01f fcd0 	bl	291f8 <_Bfree>
    9858:	3d01      	subs	r5, #1
    985a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    985c:	2d04      	cmp	r5, #4
    985e:	d806      	bhi.n	986e <_strtod_l+0xd6>
    9860:	e8df f005 	tbb	[pc, r5]
    9864:	23200317 	.word	0x23200317
    9868:	17          	.byte	0x17
    9869:	00          	.byte	0x00
    986a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    986e:	0721      	lsls	r1, r4, #28
    9870:	d501      	bpl.n	9876 <_strtod_l+0xde>
    9872:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9878:	b113      	cbz	r3, 9880 <_strtod_l+0xe8>
    987a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    987c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    987e:	6013      	str	r3, [r2, #0]
    9880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9882:	2b00      	cmp	r3, #0
    9884:	d0c7      	beq.n	9816 <_strtod_l+0x7e>
    9886:	4640      	mov	r0, r8
    9888:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    988c:	b01d      	add	sp, #116	; 0x74
    988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9892:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9896:	f202 4233 	addw	r2, r2, #1075	; 0x433
    989a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    989e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    98a2:	e7e4      	b.n	986e <_strtod_l+0xd6>
    98a4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 9a14 <_strtod_l+0x27c>
    98a8:	e7e1      	b.n	986e <_strtod_l+0xd6>
    98aa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    98ae:	f04f 38ff 	mov.w	r8, #4294967295
    98b2:	e7dc      	b.n	986e <_strtod_l+0xd6>
    98b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    98b6:	1c5a      	adds	r2, r3, #1
    98b8:	9217      	str	r2, [sp, #92]	; 0x5c
    98ba:	785b      	ldrb	r3, [r3, #1]
    98bc:	2b30      	cmp	r3, #48	; 0x30
    98be:	d0f9      	beq.n	98b4 <_strtod_l+0x11c>
    98c0:	2b00      	cmp	r3, #0
    98c2:	d0d8      	beq.n	9876 <_strtod_l+0xde>
    98c4:	2301      	movs	r3, #1
    98c6:	e000      	b.n	98ca <_strtod_l+0x132>
    98c8:	2300      	movs	r3, #0
    98ca:	2700      	movs	r7, #0
    98cc:	9304      	str	r3, [sp, #16]
    98ce:	220a      	movs	r2, #10
    98d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    98d2:	e9cd 7705 	strd	r7, r7, [sp, #20]
    98d6:	930a      	str	r3, [sp, #40]	; 0x28
    98d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    98da:	7806      	ldrb	r6, [r0, #0]
    98dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    98e0:	b2d9      	uxtb	r1, r3
    98e2:	2909      	cmp	r1, #9
    98e4:	d924      	bls.n	9930 <_strtod_l+0x198>
    98e6:	465a      	mov	r2, fp
    98e8:	4629      	mov	r1, r5
    98ea:	f027 f93e 	bl	30b6a <strncmp>
    98ee:	2800      	cmp	r0, #0
    98f0:	d02d      	beq.n	994e <_strtod_l+0x1b6>
    98f2:	2000      	movs	r0, #0
    98f4:	4632      	mov	r2, r6
    98f6:	9d05      	ldr	r5, [sp, #20]
    98f8:	4683      	mov	fp, r0
    98fa:	4603      	mov	r3, r0
    98fc:	2a65      	cmp	r2, #101	; 0x65
    98fe:	d001      	beq.n	9904 <_strtod_l+0x16c>
    9900:	2a45      	cmp	r2, #69	; 0x45
    9902:	d113      	bne.n	992c <_strtod_l+0x194>
    9904:	b91d      	cbnz	r5, 990e <_strtod_l+0x176>
    9906:	9a04      	ldr	r2, [sp, #16]
    9908:	4302      	orrs	r2, r0
    990a:	d094      	beq.n	9836 <_strtod_l+0x9e>
    990c:	2500      	movs	r5, #0
    990e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9910:	1c62      	adds	r2, r4, #1
    9912:	9217      	str	r2, [sp, #92]	; 0x5c
    9914:	7862      	ldrb	r2, [r4, #1]
    9916:	2a2b      	cmp	r2, #43	; 0x2b
    9918:	d06e      	beq.n	99f8 <_strtod_l+0x260>
    991a:	2a2d      	cmp	r2, #45	; 0x2d
    991c:	d072      	beq.n	9a04 <_strtod_l+0x26c>
    991e:	f04f 0c00 	mov.w	ip, #0
    9922:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9926:	2909      	cmp	r1, #9
    9928:	d97a      	bls.n	9a20 <_strtod_l+0x288>
    992a:	9417      	str	r4, [sp, #92]	; 0x5c
    992c:	2600      	movs	r6, #0
    992e:	e099      	b.n	9a64 <_strtod_l+0x2cc>
    9930:	9905      	ldr	r1, [sp, #20]
    9932:	3001      	adds	r0, #1
    9934:	2908      	cmp	r1, #8
    9936:	9017      	str	r0, [sp, #92]	; 0x5c
    9938:	bfd7      	itett	le
    993a:	9906      	ldrle	r1, [sp, #24]
    993c:	fb02 3707 	mlagt	r7, r2, r7, r3
    9940:	fb02 3301 	mlale	r3, r2, r1, r3
    9944:	9306      	strle	r3, [sp, #24]
    9946:	9b05      	ldr	r3, [sp, #20]
    9948:	3301      	adds	r3, #1
    994a:	9305      	str	r3, [sp, #20]
    994c:	e7c4      	b.n	98d8 <_strtod_l+0x140>
    994e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9950:	eb03 020b 	add.w	r2, r3, fp
    9954:	9217      	str	r2, [sp, #92]	; 0x5c
    9956:	f813 200b 	ldrb.w	r2, [r3, fp]
    995a:	9b05      	ldr	r3, [sp, #20]
    995c:	b3a3      	cbz	r3, 99c8 <_strtod_l+0x230>
    995e:	4683      	mov	fp, r0
    9960:	461d      	mov	r5, r3
    9962:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9966:	2b09      	cmp	r3, #9
    9968:	d912      	bls.n	9990 <_strtod_l+0x1f8>
    996a:	2301      	movs	r3, #1
    996c:	e7c6      	b.n	98fc <_strtod_l+0x164>
    996e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9970:	3001      	adds	r0, #1
    9972:	1c5a      	adds	r2, r3, #1
    9974:	9217      	str	r2, [sp, #92]	; 0x5c
    9976:	785a      	ldrb	r2, [r3, #1]
    9978:	2a30      	cmp	r2, #48	; 0x30
    997a:	d0f8      	beq.n	996e <_strtod_l+0x1d6>
    997c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    9980:	2b08      	cmp	r3, #8
    9982:	f200 84ea 	bhi.w	a35a <_strtod_l+0xbc2>
    9986:	4683      	mov	fp, r0
    9988:	2000      	movs	r0, #0
    998a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    998c:	4605      	mov	r5, r0
    998e:	930a      	str	r3, [sp, #40]	; 0x28
    9990:	3a30      	subs	r2, #48	; 0x30
    9992:	f100 0301 	add.w	r3, r0, #1
    9996:	d011      	beq.n	99bc <_strtod_l+0x224>
    9998:	449b      	add	fp, r3
    999a:	eb00 0c05 	add.w	ip, r0, r5
    999e:	462b      	mov	r3, r5
    99a0:	210a      	movs	r1, #10
    99a2:	4563      	cmp	r3, ip
    99a4:	d112      	bne.n	99cc <_strtod_l+0x234>
    99a6:	182b      	adds	r3, r5, r0
    99a8:	3501      	adds	r5, #1
    99aa:	2b08      	cmp	r3, #8
    99ac:	4405      	add	r5, r0
    99ae:	dc19      	bgt.n	99e4 <_strtod_l+0x24c>
    99b0:	9906      	ldr	r1, [sp, #24]
    99b2:	230a      	movs	r3, #10
    99b4:	fb03 2301 	mla	r3, r3, r1, r2
    99b8:	9306      	str	r3, [sp, #24]
    99ba:	2300      	movs	r3, #0
    99bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    99be:	4618      	mov	r0, r3
    99c0:	1c51      	adds	r1, r2, #1
    99c2:	9117      	str	r1, [sp, #92]	; 0x5c
    99c4:	7852      	ldrb	r2, [r2, #1]
    99c6:	e7cc      	b.n	9962 <_strtod_l+0x1ca>
    99c8:	9805      	ldr	r0, [sp, #20]
    99ca:	e7d5      	b.n	9978 <_strtod_l+0x1e0>
    99cc:	2b08      	cmp	r3, #8
    99ce:	f103 0301 	add.w	r3, r3, #1
    99d2:	dc03      	bgt.n	99dc <_strtod_l+0x244>
    99d4:	9e06      	ldr	r6, [sp, #24]
    99d6:	434e      	muls	r6, r1
    99d8:	9606      	str	r6, [sp, #24]
    99da:	e7e2      	b.n	99a2 <_strtod_l+0x20a>
    99dc:	2b10      	cmp	r3, #16
    99de:	bfd8      	it	le
    99e0:	434f      	mulle	r7, r1
    99e2:	e7de      	b.n	99a2 <_strtod_l+0x20a>
    99e4:	2b0f      	cmp	r3, #15
    99e6:	bfdc      	itt	le
    99e8:	230a      	movle	r3, #10
    99ea:	fb03 2707 	mlale	r7, r3, r7, r2
    99ee:	e7e4      	b.n	99ba <_strtod_l+0x222>
    99f0:	f04f 0b00 	mov.w	fp, #0
    99f4:	2301      	movs	r3, #1
    99f6:	e786      	b.n	9906 <_strtod_l+0x16e>
    99f8:	f04f 0c00 	mov.w	ip, #0
    99fc:	1ca2      	adds	r2, r4, #2
    99fe:	9217      	str	r2, [sp, #92]	; 0x5c
    9a00:	78a2      	ldrb	r2, [r4, #2]
    9a02:	e78e      	b.n	9922 <_strtod_l+0x18a>
    9a04:	f04f 0c01 	mov.w	ip, #1
    9a08:	e7f8      	b.n	99fc <_strtod_l+0x264>
    9a0a:	bf00      	nop
    9a0c:	00032b0c 	.word	0x00032b0c
    9a10:	00032af4 	.word	0x00032af4
    9a14:	7ff00000 	.word	0x7ff00000
    9a18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a1a:	1c51      	adds	r1, r2, #1
    9a1c:	9117      	str	r1, [sp, #92]	; 0x5c
    9a1e:	7852      	ldrb	r2, [r2, #1]
    9a20:	2a30      	cmp	r2, #48	; 0x30
    9a22:	d0f9      	beq.n	9a18 <_strtod_l+0x280>
    9a24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    9a28:	2908      	cmp	r1, #8
    9a2a:	f63f af7f 	bhi.w	992c <_strtod_l+0x194>
    9a2e:	3a30      	subs	r2, #48	; 0x30
    9a30:	9207      	str	r2, [sp, #28]
    9a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a34:	920d      	str	r2, [sp, #52]	; 0x34
    9a36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a38:	1c56      	adds	r6, r2, #1
    9a3a:	9617      	str	r6, [sp, #92]	; 0x5c
    9a3c:	7852      	ldrb	r2, [r2, #1]
    9a3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    9a42:	f1be 0f09 	cmp.w	lr, #9
    9a46:	d938      	bls.n	9aba <_strtod_l+0x322>
    9a48:	990d      	ldr	r1, [sp, #52]	; 0x34
    9a4a:	1a76      	subs	r6, r6, r1
    9a4c:	2e08      	cmp	r6, #8
    9a4e:	f644 661f 	movw	r6, #19999	; 0x4e1f
    9a52:	dc03      	bgt.n	9a5c <_strtod_l+0x2c4>
    9a54:	9907      	ldr	r1, [sp, #28]
    9a56:	428e      	cmp	r6, r1
    9a58:	bfa8      	it	ge
    9a5a:	460e      	movge	r6, r1
    9a5c:	f1bc 0f00 	cmp.w	ip, #0
    9a60:	d000      	beq.n	9a64 <_strtod_l+0x2cc>
    9a62:	4276      	negs	r6, r6
    9a64:	2d00      	cmp	r5, #0
    9a66:	d14f      	bne.n	9b08 <_strtod_l+0x370>
    9a68:	9904      	ldr	r1, [sp, #16]
    9a6a:	4308      	orrs	r0, r1
    9a6c:	f47f af03 	bne.w	9876 <_strtod_l+0xde>
    9a70:	2b00      	cmp	r3, #0
    9a72:	f47f aee0 	bne.w	9836 <_strtod_l+0x9e>
    9a76:	2a69      	cmp	r2, #105	; 0x69
    9a78:	d029      	beq.n	9ace <_strtod_l+0x336>
    9a7a:	dc26      	bgt.n	9aca <_strtod_l+0x332>
    9a7c:	2a49      	cmp	r2, #73	; 0x49
    9a7e:	d026      	beq.n	9ace <_strtod_l+0x336>
    9a80:	2a4e      	cmp	r2, #78	; 0x4e
    9a82:	f47f aed8 	bne.w	9836 <_strtod_l+0x9e>
    9a86:	499d      	ldr	r1, [pc, #628]	; (9cfc <_strtod_l+0x564>)
    9a88:	a817      	add	r0, sp, #92	; 0x5c
    9a8a:	f027 fa0a 	bl	30ea2 <__match>
    9a8e:	2800      	cmp	r0, #0
    9a90:	f43f aed1 	beq.w	9836 <_strtod_l+0x9e>
    9a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9a96:	781b      	ldrb	r3, [r3, #0]
    9a98:	2b28      	cmp	r3, #40	; 0x28
    9a9a:	d12f      	bne.n	9afc <_strtod_l+0x364>
    9a9c:	aa1a      	add	r2, sp, #104	; 0x68
    9a9e:	4998      	ldr	r1, [pc, #608]	; (9d00 <_strtod_l+0x568>)
    9aa0:	a817      	add	r0, sp, #92	; 0x5c
    9aa2:	f027 fa12 	bl	30eca <__hexnan>
    9aa6:	2805      	cmp	r0, #5
    9aa8:	d128      	bne.n	9afc <_strtod_l+0x364>
    9aaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9aac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    9ab0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    9ab4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    9ab8:	e6dd      	b.n	9876 <_strtod_l+0xde>
    9aba:	9e07      	ldr	r6, [sp, #28]
    9abc:	210a      	movs	r1, #10
    9abe:	fb01 2106 	mla	r1, r1, r6, r2
    9ac2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    9ac6:	9207      	str	r2, [sp, #28]
    9ac8:	e7b5      	b.n	9a36 <_strtod_l+0x29e>
    9aca:	2a6e      	cmp	r2, #110	; 0x6e
    9acc:	e7d9      	b.n	9a82 <_strtod_l+0x2ea>
    9ace:	498d      	ldr	r1, [pc, #564]	; (9d04 <_strtod_l+0x56c>)
    9ad0:	a817      	add	r0, sp, #92	; 0x5c
    9ad2:	f027 f9e6 	bl	30ea2 <__match>
    9ad6:	2800      	cmp	r0, #0
    9ad8:	f43f aead 	beq.w	9836 <_strtod_l+0x9e>
    9adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9ade:	a817      	add	r0, sp, #92	; 0x5c
    9ae0:	4989      	ldr	r1, [pc, #548]	; (9d08 <_strtod_l+0x570>)
    9ae2:	3b01      	subs	r3, #1
    9ae4:	9317      	str	r3, [sp, #92]	; 0x5c
    9ae6:	f027 f9dc 	bl	30ea2 <__match>
    9aea:	b910      	cbnz	r0, 9af2 <_strtod_l+0x35a>
    9aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9aee:	3301      	adds	r3, #1
    9af0:	9317      	str	r3, [sp, #92]	; 0x5c
    9af2:	f8df 9218 	ldr.w	r9, [pc, #536]	; 9d0c <_strtod_l+0x574>
    9af6:	f04f 0800 	mov.w	r8, #0
    9afa:	e6bc      	b.n	9876 <_strtod_l+0xde>
    9afc:	4884      	ldr	r0, [pc, #528]	; (9d10 <_strtod_l+0x578>)
    9afe:	f020 faeb 	bl	2a0d8 <nan>
    9b02:	4680      	mov	r8, r0
    9b04:	4689      	mov	r9, r1
    9b06:	e6b6      	b.n	9876 <_strtod_l+0xde>
    9b08:	eba6 030b 	sub.w	r3, r6, fp
    9b0c:	9806      	ldr	r0, [sp, #24]
    9b0e:	462c      	mov	r4, r5
    9b10:	930f      	str	r3, [sp, #60]	; 0x3c
    9b12:	9b05      	ldr	r3, [sp, #20]
    9b14:	2b00      	cmp	r3, #0
    9b16:	bf08      	it	eq
    9b18:	462b      	moveq	r3, r5
    9b1a:	2d10      	cmp	r5, #16
    9b1c:	9305      	str	r3, [sp, #20]
    9b1e:	bfa8      	it	ge
    9b20:	2410      	movge	r4, #16
    9b22:	f7fe fd07 	bl	8534 <__aeabi_ui2d>
    9b26:	2d09      	cmp	r5, #9
    9b28:	4680      	mov	r8, r0
    9b2a:	4689      	mov	r9, r1
    9b2c:	dc14      	bgt.n	9b58 <_strtod_l+0x3c0>
    9b2e:	eba6 030b 	sub.w	r3, r6, fp
    9b32:	2b00      	cmp	r3, #0
    9b34:	f43f ae9f 	beq.w	9876 <_strtod_l+0xde>
    9b38:	eba6 030b 	sub.w	r3, r6, fp
    9b3c:	dd79      	ble.n	9c32 <_strtod_l+0x49a>
    9b3e:	2b16      	cmp	r3, #22
    9b40:	dc45      	bgt.n	9bce <_strtod_l+0x436>
    9b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b44:	4642      	mov	r2, r8
    9b46:	4973      	ldr	r1, [pc, #460]	; (9d14 <_strtod_l+0x57c>)
    9b48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9b4c:	464b      	mov	r3, r9
    9b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
    9b52:	f7fe fd69 	bl	8628 <__aeabi_dmul>
    9b56:	e7d4      	b.n	9b02 <_strtod_l+0x36a>
    9b58:	4b6e      	ldr	r3, [pc, #440]	; (9d14 <_strtod_l+0x57c>)
    9b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    9b5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    9b62:	f7fe fd61 	bl	8628 <__aeabi_dmul>
    9b66:	4680      	mov	r8, r0
    9b68:	4689      	mov	r9, r1
    9b6a:	4638      	mov	r0, r7
    9b6c:	f7fe fce2 	bl	8534 <__aeabi_ui2d>
    9b70:	4602      	mov	r2, r0
    9b72:	460b      	mov	r3, r1
    9b74:	4640      	mov	r0, r8
    9b76:	4649      	mov	r1, r9
    9b78:	f7fe fba0 	bl	82bc <__adddf3>
    9b7c:	2d0f      	cmp	r5, #15
    9b7e:	4680      	mov	r8, r0
    9b80:	4689      	mov	r9, r1
    9b82:	ddd4      	ble.n	9b2e <_strtod_l+0x396>
    9b84:	1b2c      	subs	r4, r5, r4
    9b86:	eba6 030b 	sub.w	r3, r6, fp
    9b8a:	441c      	add	r4, r3
    9b8c:	2c00      	cmp	r4, #0
    9b8e:	dc26      	bgt.n	9bde <_strtod_l+0x446>
    9b90:	f000 80a3 	beq.w	9cda <_strtod_l+0x542>
    9b94:	4264      	negs	r4, r4
    9b96:	f014 020f 	ands.w	r2, r4, #15
    9b9a:	d00a      	beq.n	9bb2 <_strtod_l+0x41a>
    9b9c:	4b5d      	ldr	r3, [pc, #372]	; (9d14 <_strtod_l+0x57c>)
    9b9e:	4640      	mov	r0, r8
    9ba0:	4649      	mov	r1, r9
    9ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9baa:	f7fe fe67 	bl	887c <__aeabi_ddiv>
    9bae:	4680      	mov	r8, r0
    9bb0:	4689      	mov	r9, r1
    9bb2:	1124      	asrs	r4, r4, #4
    9bb4:	f000 8091 	beq.w	9cda <_strtod_l+0x542>
    9bb8:	2c1f      	cmp	r4, #31
    9bba:	f340 80b3 	ble.w	9d24 <_strtod_l+0x58c>
    9bbe:	2322      	movs	r3, #34	; 0x22
    9bc0:	f04f 0800 	mov.w	r8, #0
    9bc4:	f04f 0900 	mov.w	r9, #0
    9bc8:	f8ca 3000 	str.w	r3, [sl]
    9bcc:	e653      	b.n	9876 <_strtod_l+0xde>
    9bce:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    9bd2:	eba6 020b 	sub.w	r2, r6, fp
    9bd6:	4293      	cmp	r3, r2
    9bd8:	da19      	bge.n	9c0e <_strtod_l+0x476>
    9bda:	1b2c      	subs	r4, r5, r4
    9bdc:	4414      	add	r4, r2
    9bde:	f014 030f 	ands.w	r3, r4, #15
    9be2:	d00a      	beq.n	9bfa <_strtod_l+0x462>
    9be4:	494b      	ldr	r1, [pc, #300]	; (9d14 <_strtod_l+0x57c>)
    9be6:	4642      	mov	r2, r8
    9be8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9bec:	464b      	mov	r3, r9
    9bee:	e9d1 0100 	ldrd	r0, r1, [r1]
    9bf2:	f7fe fd19 	bl	8628 <__aeabi_dmul>
    9bf6:	4680      	mov	r8, r0
    9bf8:	4689      	mov	r9, r1
    9bfa:	f034 040f 	bics.w	r4, r4, #15
    9bfe:	d06c      	beq.n	9cda <_strtod_l+0x542>
    9c00:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    9c04:	dd41      	ble.n	9c8a <_strtod_l+0x4f2>
    9c06:	2322      	movs	r3, #34	; 0x22
    9c08:	f8ca 3000 	str.w	r3, [sl]
    9c0c:	e771      	b.n	9af2 <_strtod_l+0x35a>
    9c0e:	f1c5 050f 	rsb	r5, r5, #15
    9c12:	4c40      	ldr	r4, [pc, #256]	; (9d14 <_strtod_l+0x57c>)
    9c14:	4642      	mov	r2, r8
    9c16:	464b      	mov	r3, r9
    9c18:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    9c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
    9c20:	f7fe fd02 	bl	8628 <__aeabi_dmul>
    9c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c26:	1b5d      	subs	r5, r3, r5
    9c28:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    9c2c:	e9d4 2300 	ldrd	r2, r3, [r4]
    9c30:	e78f      	b.n	9b52 <_strtod_l+0x3ba>
    9c32:	3316      	adds	r3, #22
    9c34:	dba6      	blt.n	9b84 <_strtod_l+0x3ec>
    9c36:	ebab 0206 	sub.w	r2, fp, r6
    9c3a:	4b36      	ldr	r3, [pc, #216]	; (9d14 <_strtod_l+0x57c>)
    9c3c:	4640      	mov	r0, r8
    9c3e:	4649      	mov	r1, r9
    9c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9c44:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c48:	f7fe fe18 	bl	887c <__aeabi_ddiv>
    9c4c:	e759      	b.n	9b02 <_strtod_l+0x36a>
    9c4e:	2300      	movs	r3, #0
    9c50:	9306      	str	r3, [sp, #24]
    9c52:	2322      	movs	r3, #34	; 0x22
    9c54:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9d0c <_strtod_l+0x574>
    9c58:	f04f 0800 	mov.w	r8, #0
    9c5c:	f8ca 3000 	str.w	r3, [sl]
    9c60:	9918      	ldr	r1, [sp, #96]	; 0x60
    9c62:	4650      	mov	r0, sl
    9c64:	f01f fac8 	bl	291f8 <_Bfree>
    9c68:	9906      	ldr	r1, [sp, #24]
    9c6a:	4650      	mov	r0, sl
    9c6c:	f01f fac4 	bl	291f8 <_Bfree>
    9c70:	9905      	ldr	r1, [sp, #20]
    9c72:	4650      	mov	r0, sl
    9c74:	f01f fac0 	bl	291f8 <_Bfree>
    9c78:	9910      	ldr	r1, [sp, #64]	; 0x40
    9c7a:	4650      	mov	r0, sl
    9c7c:	f01f fabc 	bl	291f8 <_Bfree>
    9c80:	9907      	ldr	r1, [sp, #28]
    9c82:	4650      	mov	r0, sl
    9c84:	f01f fab8 	bl	291f8 <_Bfree>
    9c88:	e5f5      	b.n	9876 <_strtod_l+0xde>
    9c8a:	2300      	movs	r3, #0
    9c8c:	1124      	asrs	r4, r4, #4
    9c8e:	4640      	mov	r0, r8
    9c90:	4649      	mov	r1, r9
    9c92:	4f21      	ldr	r7, [pc, #132]	; (9d18 <_strtod_l+0x580>)
    9c94:	9304      	str	r3, [sp, #16]
    9c96:	2c01      	cmp	r4, #1
    9c98:	dc22      	bgt.n	9ce0 <_strtod_l+0x548>
    9c9a:	b10b      	cbz	r3, 9ca0 <_strtod_l+0x508>
    9c9c:	4680      	mov	r8, r0
    9c9e:	4689      	mov	r9, r1
    9ca0:	9b04      	ldr	r3, [sp, #16]
    9ca2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    9ca6:	491c      	ldr	r1, [pc, #112]	; (9d18 <_strtod_l+0x580>)
    9ca8:	4642      	mov	r2, r8
    9caa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    9cae:	464b      	mov	r3, r9
    9cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
    9cb4:	f7fe fcb8 	bl	8628 <__aeabi_dmul>
    9cb8:	4b14      	ldr	r3, [pc, #80]	; (9d0c <_strtod_l+0x574>)
    9cba:	460a      	mov	r2, r1
    9cbc:	4680      	mov	r8, r0
    9cbe:	400b      	ands	r3, r1
    9cc0:	4916      	ldr	r1, [pc, #88]	; (9d1c <_strtod_l+0x584>)
    9cc2:	428b      	cmp	r3, r1
    9cc4:	d89f      	bhi.n	9c06 <_strtod_l+0x46e>
    9cc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    9cca:	428b      	cmp	r3, r1
    9ccc:	bf86      	itte	hi
    9cce:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; 9d20 <_strtod_l+0x588>
    9cd2:	f04f 38ff 	movhi.w	r8, #4294967295
    9cd6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    9cda:	2300      	movs	r3, #0
    9cdc:	9304      	str	r3, [sp, #16]
    9cde:	e04c      	b.n	9d7a <_strtod_l+0x5e2>
    9ce0:	07e2      	lsls	r2, r4, #31
    9ce2:	d504      	bpl.n	9cee <_strtod_l+0x556>
    9ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
    9ce8:	f7fe fc9e 	bl	8628 <__aeabi_dmul>
    9cec:	2301      	movs	r3, #1
    9cee:	9a04      	ldr	r2, [sp, #16]
    9cf0:	1064      	asrs	r4, r4, #1
    9cf2:	3708      	adds	r7, #8
    9cf4:	3201      	adds	r2, #1
    9cf6:	9204      	str	r2, [sp, #16]
    9cf8:	e7cd      	b.n	9c96 <_strtod_l+0x4fe>
    9cfa:	bf00      	nop
    9cfc:	00036a22 	.word	0x00036a22
    9d00:	00032ae0 	.word	0x00032ae0
    9d04:	0003454c 	.word	0x0003454c
    9d08:	0003c133 	.word	0x0003c133
    9d0c:	7ff00000 	.word	0x7ff00000
    9d10:	00034664 	.word	0x00034664
    9d14:	00031e78 	.word	0x00031e78
    9d18:	00031e50 	.word	0x00031e50
    9d1c:	7ca00000 	.word	0x7ca00000
    9d20:	7fefffff 	.word	0x7fefffff
    9d24:	f014 0310 	ands.w	r3, r4, #16
    9d28:	4640      	mov	r0, r8
    9d2a:	4649      	mov	r1, r9
    9d2c:	4fab      	ldr	r7, [pc, #684]	; (9fdc <_strtod_l+0x844>)
    9d2e:	bf18      	it	ne
    9d30:	236a      	movne	r3, #106	; 0x6a
    9d32:	9304      	str	r3, [sp, #16]
    9d34:	2300      	movs	r3, #0
    9d36:	07e2      	lsls	r2, r4, #31
    9d38:	d504      	bpl.n	9d44 <_strtod_l+0x5ac>
    9d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
    9d3e:	f7fe fc73 	bl	8628 <__aeabi_dmul>
    9d42:	2301      	movs	r3, #1
    9d44:	1064      	asrs	r4, r4, #1
    9d46:	f107 0708 	add.w	r7, r7, #8
    9d4a:	d1f4      	bne.n	9d36 <_strtod_l+0x59e>
    9d4c:	b10b      	cbz	r3, 9d52 <_strtod_l+0x5ba>
    9d4e:	4680      	mov	r8, r0
    9d50:	4689      	mov	r9, r1
    9d52:	9b04      	ldr	r3, [sp, #16]
    9d54:	b143      	cbz	r3, 9d68 <_strtod_l+0x5d0>
    9d56:	f3c9 520a 	ubfx	r2, r9, #20, #11
    9d5a:	4649      	mov	r1, r9
    9d5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    9d60:	2b00      	cmp	r3, #0
    9d62:	dc50      	bgt.n	9e06 <_strtod_l+0x66e>
    9d64:	236a      	movs	r3, #106	; 0x6a
    9d66:	9304      	str	r3, [sp, #16]
    9d68:	2200      	movs	r2, #0
    9d6a:	2300      	movs	r3, #0
    9d6c:	4640      	mov	r0, r8
    9d6e:	4649      	mov	r1, r9
    9d70:	f7fe fec2 	bl	8af8 <__aeabi_dcmpeq>
    9d74:	2800      	cmp	r0, #0
    9d76:	f47f af22 	bne.w	9bbe <_strtod_l+0x426>
    9d7a:	9b06      	ldr	r3, [sp, #24]
    9d7c:	4650      	mov	r0, sl
    9d7e:	9a05      	ldr	r2, [sp, #20]
    9d80:	9300      	str	r3, [sp, #0]
    9d82:	462b      	mov	r3, r5
    9d84:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d86:	f01f faa1 	bl	292cc <__s2b>
    9d8a:	9010      	str	r0, [sp, #64]	; 0x40
    9d8c:	2800      	cmp	r0, #0
    9d8e:	f43f af3a 	beq.w	9c06 <_strtod_l+0x46e>
    9d92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9d94:	ebab 0b06 	sub.w	fp, fp, r6
    9d98:	2b00      	cmp	r3, #0
    9d9a:	bfb4      	ite	lt
    9d9c:	465b      	movlt	r3, fp
    9d9e:	2300      	movge	r3, #0
    9da0:	9311      	str	r3, [sp, #68]	; 0x44
    9da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9da8:	9314      	str	r3, [sp, #80]	; 0x50
    9daa:	2300      	movs	r3, #0
    9dac:	9307      	str	r3, [sp, #28]
    9dae:	9305      	str	r3, [sp, #20]
    9db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9db2:	4650      	mov	r0, sl
    9db4:	6859      	ldr	r1, [r3, #4]
    9db6:	f01f f9df 	bl	29178 <_Balloc>
    9dba:	9006      	str	r0, [sp, #24]
    9dbc:	2800      	cmp	r0, #0
    9dbe:	f43f af48 	beq.w	9c52 <_strtod_l+0x4ba>
    9dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9dc4:	300c      	adds	r0, #12
    9dc6:	691a      	ldr	r2, [r3, #16]
    9dc8:	f103 010c 	add.w	r1, r3, #12
    9dcc:	3202      	adds	r2, #2
    9dce:	0092      	lsls	r2, r2, #2
    9dd0:	f026 fd37 	bl	30842 <memcpy>
    9dd4:	ab1a      	add	r3, sp, #104	; 0x68
    9dd6:	4642      	mov	r2, r8
    9dd8:	4650      	mov	r0, sl
    9dda:	9301      	str	r3, [sp, #4]
    9ddc:	ab19      	add	r3, sp, #100	; 0x64
    9dde:	9300      	str	r3, [sp, #0]
    9de0:	464b      	mov	r3, r9
    9de2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    9de6:	f01f fd41 	bl	2986c <__d2b>
    9dea:	9018      	str	r0, [sp, #96]	; 0x60
    9dec:	2800      	cmp	r0, #0
    9dee:	f43f af30 	beq.w	9c52 <_strtod_l+0x4ba>
    9df2:	2101      	movs	r1, #1
    9df4:	4650      	mov	r0, sl
    9df6:	f01f fab3 	bl	29360 <__i2b>
    9dfa:	4603      	mov	r3, r0
    9dfc:	9005      	str	r0, [sp, #20]
    9dfe:	b9d0      	cbnz	r0, 9e36 <_strtod_l+0x69e>
    9e00:	2300      	movs	r3, #0
    9e02:	9305      	str	r3, [sp, #20]
    9e04:	e725      	b.n	9c52 <_strtod_l+0x4ba>
    9e06:	2b1f      	cmp	r3, #31
    9e08:	dd0e      	ble.n	9e28 <_strtod_l+0x690>
    9e0a:	2b34      	cmp	r3, #52	; 0x34
    9e0c:	f04f 0800 	mov.w	r8, #0
    9e10:	bfdb      	ittet	le
    9e12:	f04f 33ff 	movle.w	r3, #4294967295
    9e16:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    9e1a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    9e1e:	4093      	lslle	r3, r2
    9e20:	bfd8      	it	le
    9e22:	ea03 0901 	andle.w	r9, r3, r1
    9e26:	e79d      	b.n	9d64 <_strtod_l+0x5cc>
    9e28:	f04f 32ff 	mov.w	r2, #4294967295
    9e2c:	fa02 f303 	lsl.w	r3, r2, r3
    9e30:	ea03 0808 	and.w	r8, r3, r8
    9e34:	e796      	b.n	9d64 <_strtod_l+0x5cc>
    9e36:	9c19      	ldr	r4, [sp, #100]	; 0x64
    9e38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9e3a:	2c00      	cmp	r4, #0
    9e3c:	bfa9      	itett	ge
    9e3e:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    9e40:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    9e42:	18e7      	addge	r7, r4, r3
    9e44:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    9e46:	bfb8      	it	lt
    9e48:	1b1e      	sublt	r6, r3, r4
    9e4a:	9b04      	ldr	r3, [sp, #16]
    9e4c:	bfb8      	it	lt
    9e4e:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    9e50:	1ae4      	subs	r4, r4, r3
    9e52:	4b63      	ldr	r3, [pc, #396]	; (9fe0 <_strtod_l+0x848>)
    9e54:	4414      	add	r4, r2
    9e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    9e5a:	3c01      	subs	r4, #1
    9e5c:	429c      	cmp	r4, r3
    9e5e:	f280 80b0 	bge.w	9fc2 <_strtod_l+0x82a>
    9e62:	1b1b      	subs	r3, r3, r4
    9e64:	2501      	movs	r5, #1
    9e66:	2b1f      	cmp	r3, #31
    9e68:	eba2 0203 	sub.w	r2, r2, r3
    9e6c:	bfcd      	iteet	gt
    9e6e:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    9e72:	409d      	lslle	r5, r3
    9e74:	2400      	movle	r4, #0
    9e76:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    9e7a:	bfc2      	ittt	gt
    9e7c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    9e80:	34e2      	addgt	r4, #226	; 0xe2
    9e82:	fa05 f404 	lslgt.w	r4, r5, r4
    9e86:	eb07 0b02 	add.w	fp, r7, r2
    9e8a:	9b04      	ldr	r3, [sp, #16]
    9e8c:	4416      	add	r6, r2
    9e8e:	455f      	cmp	r7, fp
    9e90:	441e      	add	r6, r3
    9e92:	463b      	mov	r3, r7
    9e94:	bfa8      	it	ge
    9e96:	465b      	movge	r3, fp
    9e98:	42b3      	cmp	r3, r6
    9e9a:	bfa8      	it	ge
    9e9c:	4633      	movge	r3, r6
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	bfc2      	ittt	gt
    9ea2:	ebab 0b03 	subgt.w	fp, fp, r3
    9ea6:	1af6      	subgt	r6, r6, r3
    9ea8:	1aff      	subgt	r7, r7, r3
    9eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9eac:	2b00      	cmp	r3, #0
    9eae:	dd16      	ble.n	9ede <_strtod_l+0x746>
    9eb0:	461a      	mov	r2, r3
    9eb2:	9905      	ldr	r1, [sp, #20]
    9eb4:	4650      	mov	r0, sl
    9eb6:	f01f fb13 	bl	294e0 <__pow5mult>
    9eba:	9005      	str	r0, [sp, #20]
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d09f      	beq.n	9e00 <_strtod_l+0x668>
    9ec0:	4601      	mov	r1, r0
    9ec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ec4:	4650      	mov	r0, sl
    9ec6:	f01f fa61 	bl	2938c <__multiply>
    9eca:	900d      	str	r0, [sp, #52]	; 0x34
    9ecc:	2800      	cmp	r0, #0
    9ece:	f43f aec0 	beq.w	9c52 <_strtod_l+0x4ba>
    9ed2:	9918      	ldr	r1, [sp, #96]	; 0x60
    9ed4:	4650      	mov	r0, sl
    9ed6:	f01f f98f 	bl	291f8 <_Bfree>
    9eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9edc:	9318      	str	r3, [sp, #96]	; 0x60
    9ede:	f1bb 0f00 	cmp.w	fp, #0
    9ee2:	dc71      	bgt.n	9fc8 <_strtod_l+0x830>
    9ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ee6:	2b00      	cmp	r3, #0
    9ee8:	dd08      	ble.n	9efc <_strtod_l+0x764>
    9eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9eec:	4650      	mov	r0, sl
    9eee:	9906      	ldr	r1, [sp, #24]
    9ef0:	f01f faf6 	bl	294e0 <__pow5mult>
    9ef4:	9006      	str	r0, [sp, #24]
    9ef6:	2800      	cmp	r0, #0
    9ef8:	f43f aea9 	beq.w	9c4e <_strtod_l+0x4b6>
    9efc:	2e00      	cmp	r6, #0
    9efe:	dd08      	ble.n	9f12 <_strtod_l+0x77a>
    9f00:	4632      	mov	r2, r6
    9f02:	9906      	ldr	r1, [sp, #24]
    9f04:	4650      	mov	r0, sl
    9f06:	f01f fb45 	bl	29594 <__lshift>
    9f0a:	9006      	str	r0, [sp, #24]
    9f0c:	2800      	cmp	r0, #0
    9f0e:	f43f ae9e 	beq.w	9c4e <_strtod_l+0x4b6>
    9f12:	2f00      	cmp	r7, #0
    9f14:	dd08      	ble.n	9f28 <_strtod_l+0x790>
    9f16:	463a      	mov	r2, r7
    9f18:	9905      	ldr	r1, [sp, #20]
    9f1a:	4650      	mov	r0, sl
    9f1c:	f01f fb3a 	bl	29594 <__lshift>
    9f20:	9005      	str	r0, [sp, #20]
    9f22:	2800      	cmp	r0, #0
    9f24:	f43f ae95 	beq.w	9c52 <_strtod_l+0x4ba>
    9f28:	9a06      	ldr	r2, [sp, #24]
    9f2a:	4650      	mov	r0, sl
    9f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
    9f2e:	f01f fb9d 	bl	2966c <__mdiff>
    9f32:	9007      	str	r0, [sp, #28]
    9f34:	2800      	cmp	r0, #0
    9f36:	f43f ae8c 	beq.w	9c52 <_strtod_l+0x4ba>
    9f3a:	68c3      	ldr	r3, [r0, #12]
    9f3c:	9905      	ldr	r1, [sp, #20]
    9f3e:	930d      	str	r3, [sp, #52]	; 0x34
    9f40:	2300      	movs	r3, #0
    9f42:	60c3      	str	r3, [r0, #12]
    9f44:	f027 f8bd 	bl	310c2 <__mcmp>
    9f48:	2800      	cmp	r0, #0
    9f4a:	da4b      	bge.n	9fe4 <_strtod_l+0x84c>
    9f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9f4e:	ea53 0308 	orrs.w	r3, r3, r8
    9f52:	f040 80bc 	bne.w	a0ce <_strtod_l+0x936>
    9f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	f040 80b7 	bne.w	a0ce <_strtod_l+0x936>
    9f60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    9f64:	0d1b      	lsrs	r3, r3, #20
    9f66:	051b      	lsls	r3, r3, #20
    9f68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    9f6c:	f240 80af 	bls.w	a0ce <_strtod_l+0x936>
    9f70:	9b07      	ldr	r3, [sp, #28]
    9f72:	695b      	ldr	r3, [r3, #20]
    9f74:	b923      	cbnz	r3, 9f80 <_strtod_l+0x7e8>
    9f76:	9b07      	ldr	r3, [sp, #28]
    9f78:	691b      	ldr	r3, [r3, #16]
    9f7a:	2b01      	cmp	r3, #1
    9f7c:	f340 80a7 	ble.w	a0ce <_strtod_l+0x936>
    9f80:	2201      	movs	r2, #1
    9f82:	9907      	ldr	r1, [sp, #28]
    9f84:	4650      	mov	r0, sl
    9f86:	f01f fb05 	bl	29594 <__lshift>
    9f8a:	9905      	ldr	r1, [sp, #20]
    9f8c:	9007      	str	r0, [sp, #28]
    9f8e:	f027 f898 	bl	310c2 <__mcmp>
    9f92:	2800      	cmp	r0, #0
    9f94:	f340 809b 	ble.w	a0ce <_strtod_l+0x936>
    9f98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    9f9c:	9a04      	ldr	r2, [sp, #16]
    9f9e:	0d1b      	lsrs	r3, r3, #20
    9fa0:	051b      	lsls	r3, r3, #20
    9fa2:	2a00      	cmp	r2, #0
    9fa4:	d079      	beq.n	a09a <_strtod_l+0x902>
    9fa6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    9faa:	d86d      	bhi.n	a088 <_strtod_l+0x8f0>
    9fac:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    9fb0:	d846      	bhi.n	a040 <_strtod_l+0x8a8>
    9fb2:	f04f 0800 	mov.w	r8, #0
    9fb6:	f04f 0900 	mov.w	r9, #0
    9fba:	2322      	movs	r3, #34	; 0x22
    9fbc:	f8ca 3000 	str.w	r3, [sl]
    9fc0:	e64e      	b.n	9c60 <_strtod_l+0x4c8>
    9fc2:	2400      	movs	r4, #0
    9fc4:	2501      	movs	r5, #1
    9fc6:	e75e      	b.n	9e86 <_strtod_l+0x6ee>
    9fc8:	465a      	mov	r2, fp
    9fca:	9918      	ldr	r1, [sp, #96]	; 0x60
    9fcc:	4650      	mov	r0, sl
    9fce:	f01f fae1 	bl	29594 <__lshift>
    9fd2:	9018      	str	r0, [sp, #96]	; 0x60
    9fd4:	2800      	cmp	r0, #0
    9fd6:	d185      	bne.n	9ee4 <_strtod_l+0x74c>
    9fd8:	e63b      	b.n	9c52 <_strtod_l+0x4ba>
    9fda:	bf00      	nop
    9fdc:	00031e28 	.word	0x00031e28
    9fe0:	fffffc02 	.word	0xfffffc02
    9fe4:	46cb      	mov	fp, r9
    9fe6:	f040 80a3 	bne.w	a130 <_strtod_l+0x998>
    9fea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9fec:	f3c9 0313 	ubfx	r3, r9, #0, #20
    9ff0:	2a00      	cmp	r2, #0
    9ff2:	d040      	beq.n	a076 <_strtod_l+0x8de>
    9ff4:	4a96      	ldr	r2, [pc, #600]	; (a250 <_strtod_l+0xab8>)
    9ff6:	4293      	cmp	r3, r2
    9ff8:	d158      	bne.n	a0ac <_strtod_l+0x914>
    9ffa:	9b04      	ldr	r3, [sp, #16]
    9ffc:	4642      	mov	r2, r8
    9ffe:	b97b      	cbnz	r3, a020 <_strtod_l+0x888>
    a000:	f1b8 3fff 	cmp.w	r8, #4294967295
    a004:	f040 8089 	bne.w	a11a <_strtod_l+0x982>
    a008:	4b92      	ldr	r3, [pc, #584]	; (a254 <_strtod_l+0xabc>)
    a00a:	4599      	cmp	r9, r3
    a00c:	f43f ae21 	beq.w	9c52 <_strtod_l+0x4ba>
    a010:	4b91      	ldr	r3, [pc, #580]	; (a258 <_strtod_l+0xac0>)
    a012:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a016:	ea09 0303 	and.w	r3, r9, r3
    a01a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a01e:	e61f      	b.n	9c60 <_strtod_l+0x4c8>
    a020:	4b8d      	ldr	r3, [pc, #564]	; (a258 <_strtod_l+0xac0>)
    a022:	ea09 0303 	and.w	r3, r9, r3
    a026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a02a:	d916      	bls.n	a05a <_strtod_l+0x8c2>
    a02c:	f118 0101 	adds.w	r1, r8, #1
    a030:	d11b      	bne.n	a06a <_strtod_l+0x8d2>
    a032:	4a88      	ldr	r2, [pc, #544]	; (a254 <_strtod_l+0xabc>)
    a034:	4591      	cmp	r9, r2
    a036:	f43f ae0c 	beq.w	9c52 <_strtod_l+0x4ba>
    a03a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a03e:	4680      	mov	r8, r0
    a040:	4b86      	ldr	r3, [pc, #536]	; (a25c <_strtod_l+0xac4>)
    a042:	4640      	mov	r0, r8
    a044:	4649      	mov	r1, r9
    a046:	2200      	movs	r2, #0
    a048:	f7fe faee 	bl	8628 <__aeabi_dmul>
    a04c:	460b      	mov	r3, r1
    a04e:	4680      	mov	r8, r0
    a050:	4689      	mov	r9, r1
    a052:	4303      	orrs	r3, r0
    a054:	f47f ae04 	bne.w	9c60 <_strtod_l+0x4c8>
    a058:	e7af      	b.n	9fba <_strtod_l+0x822>
    a05a:	0d1e      	lsrs	r6, r3, #20
    a05c:	f04f 31ff 	mov.w	r1, #4294967295
    a060:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a064:	40b1      	lsls	r1, r6
    a066:	4588      	cmp	r8, r1
    a068:	d0e7      	beq.n	a03a <_strtod_l+0x8a2>
    a06a:	2c00      	cmp	r4, #0
    a06c:	d05e      	beq.n	a12c <_strtod_l+0x994>
    a06e:	ea14 0f0b 	tst.w	r4, fp
    a072:	d0e5      	beq.n	a040 <_strtod_l+0x8a8>
    a074:	e01e      	b.n	a0b4 <_strtod_l+0x91c>
    a076:	2b00      	cmp	r3, #0
    a078:	d14a      	bne.n	a110 <_strtod_l+0x978>
    a07a:	f1b8 0f00 	cmp.w	r8, #0
    a07e:	d08b      	beq.n	9f98 <_strtod_l+0x800>
    a080:	b364      	cbz	r4, a0dc <_strtod_l+0x944>
    a082:	ea14 0f0b 	tst.w	r4, fp
    a086:	e02b      	b.n	a0e0 <_strtod_l+0x948>
    a088:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a08c:	f04f 38ff 	mov.w	r8, #4294967295
    a090:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a094:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a098:	e7d2      	b.n	a040 <_strtod_l+0x8a8>
    a09a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a09e:	f04f 38ff 	mov.w	r8, #4294967295
    a0a2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a0a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a0aa:	e5d9      	b.n	9c60 <_strtod_l+0x4c8>
    a0ac:	b19c      	cbz	r4, a0d6 <_strtod_l+0x93e>
    a0ae:	ea14 0f09 	tst.w	r4, r9
    a0b2:	d00c      	beq.n	a0ce <_strtod_l+0x936>
    a0b4:	9a04      	ldr	r2, [sp, #16]
    a0b6:	4640      	mov	r0, r8
    a0b8:	4649      	mov	r1, r9
    a0ba:	f026 fd9d 	bl	30bf8 <sulp>
    a0be:	4602      	mov	r2, r0
    a0c0:	460b      	mov	r3, r1
    a0c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a0c6:	f7fe f8f9 	bl	82bc <__adddf3>
    a0ca:	4680      	mov	r8, r0
    a0cc:	4689      	mov	r9, r1
    a0ce:	9b04      	ldr	r3, [sp, #16]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d1b5      	bne.n	a040 <_strtod_l+0x8a8>
    a0d4:	e5c4      	b.n	9c60 <_strtod_l+0x4c8>
    a0d6:	ea15 0f08 	tst.w	r5, r8
    a0da:	e7ea      	b.n	a0b2 <_strtod_l+0x91a>
    a0dc:	ea18 0f05 	tst.w	r8, r5
    a0e0:	d0f5      	beq.n	a0ce <_strtod_l+0x936>
    a0e2:	9a04      	ldr	r2, [sp, #16]
    a0e4:	4640      	mov	r0, r8
    a0e6:	4649      	mov	r1, r9
    a0e8:	f026 fd86 	bl	30bf8 <sulp>
    a0ec:	4602      	mov	r2, r0
    a0ee:	460b      	mov	r3, r1
    a0f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a0f4:	f7fe f8e0 	bl	82b8 <__aeabi_dsub>
    a0f8:	2200      	movs	r2, #0
    a0fa:	2300      	movs	r3, #0
    a0fc:	4604      	mov	r4, r0
    a0fe:	460d      	mov	r5, r1
    a100:	f7fe fcfa 	bl	8af8 <__aeabi_dcmpeq>
    a104:	2800      	cmp	r0, #0
    a106:	f47f af54 	bne.w	9fb2 <_strtod_l+0x81a>
    a10a:	46a0      	mov	r8, r4
    a10c:	46a9      	mov	r9, r5
    a10e:	e7de      	b.n	a0ce <_strtod_l+0x936>
    a110:	2c00      	cmp	r4, #0
    a112:	d1b6      	bne.n	a082 <_strtod_l+0x8ea>
    a114:	ea15 0f08 	tst.w	r5, r8
    a118:	e7e2      	b.n	a0e0 <_strtod_l+0x948>
    a11a:	b124      	cbz	r4, a126 <_strtod_l+0x98e>
    a11c:	ea14 0f09 	tst.w	r4, r9
    a120:	f43f ad9e 	beq.w	9c60 <_strtod_l+0x4c8>
    a124:	e7c6      	b.n	a0b4 <_strtod_l+0x91c>
    a126:	ea18 0f05 	tst.w	r8, r5
    a12a:	e7f9      	b.n	a120 <_strtod_l+0x988>
    a12c:	422a      	tst	r2, r5
    a12e:	e7a0      	b.n	a072 <_strtod_l+0x8da>
    a130:	9905      	ldr	r1, [sp, #20]
    a132:	9807      	ldr	r0, [sp, #28]
    a134:	f026 ffe0 	bl	310f8 <__ratio>
    a138:	2200      	movs	r2, #0
    a13a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a13e:	4604      	mov	r4, r0
    a140:	460d      	mov	r5, r1
    a142:	f7fe fced 	bl	8b20 <__aeabi_dcmple>
    a146:	2800      	cmp	r0, #0
    a148:	d06d      	beq.n	a226 <_strtod_l+0xa8e>
    a14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a14c:	2b00      	cmp	r3, #0
    a14e:	d178      	bne.n	a242 <_strtod_l+0xaaa>
    a150:	f1b8 0f00 	cmp.w	r8, #0
    a154:	d156      	bne.n	a204 <_strtod_l+0xa6c>
    a156:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a15a:	2b00      	cmp	r3, #0
    a15c:	d159      	bne.n	a212 <_strtod_l+0xa7a>
    a15e:	2200      	movs	r2, #0
    a160:	4b3f      	ldr	r3, [pc, #252]	; (a260 <_strtod_l+0xac8>)
    a162:	4620      	mov	r0, r4
    a164:	4629      	mov	r1, r5
    a166:	f7fe fcd1 	bl	8b0c <__aeabi_dcmplt>
    a16a:	2800      	cmp	r0, #0
    a16c:	d158      	bne.n	a220 <_strtod_l+0xa88>
    a16e:	4620      	mov	r0, r4
    a170:	4629      	mov	r1, r5
    a172:	2200      	movs	r2, #0
    a174:	4b3b      	ldr	r3, [pc, #236]	; (a264 <_strtod_l+0xacc>)
    a176:	f7fe fa57 	bl	8628 <__aeabi_dmul>
    a17a:	4604      	mov	r4, r0
    a17c:	460d      	mov	r5, r1
    a17e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a182:	9408      	str	r4, [sp, #32]
    a184:	9309      	str	r3, [sp, #36]	; 0x24
    a186:	4b34      	ldr	r3, [pc, #208]	; (a258 <_strtod_l+0xac0>)
    a188:	4a33      	ldr	r2, [pc, #204]	; (a258 <_strtod_l+0xac0>)
    a18a:	ea0b 0303 	and.w	r3, fp, r3
    a18e:	ea0b 0202 	and.w	r2, fp, r2
    a192:	9315      	str	r3, [sp, #84]	; 0x54
    a194:	4b34      	ldr	r3, [pc, #208]	; (a268 <_strtod_l+0xad0>)
    a196:	429a      	cmp	r2, r3
    a198:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a19c:	f040 809e 	bne.w	a2dc <_strtod_l+0xb44>
    a1a0:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a1a4:	4640      	mov	r0, r8
    a1a6:	4649      	mov	r1, r9
    a1a8:	f01f faf6 	bl	29798 <__ulp>
    a1ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a1b0:	f7fe fa3a 	bl	8628 <__aeabi_dmul>
    a1b4:	4642      	mov	r2, r8
    a1b6:	464b      	mov	r3, r9
    a1b8:	f7fe f880 	bl	82bc <__adddf3>
    a1bc:	460b      	mov	r3, r1
    a1be:	4926      	ldr	r1, [pc, #152]	; (a258 <_strtod_l+0xac0>)
    a1c0:	4680      	mov	r8, r0
    a1c2:	4a2a      	ldr	r2, [pc, #168]	; (a26c <_strtod_l+0xad4>)
    a1c4:	4019      	ands	r1, r3
    a1c6:	4291      	cmp	r1, r2
    a1c8:	d954      	bls.n	a274 <_strtod_l+0xadc>
    a1ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a1cc:	4b21      	ldr	r3, [pc, #132]	; (a254 <_strtod_l+0xabc>)
    a1ce:	429a      	cmp	r2, r3
    a1d0:	d103      	bne.n	a1da <_strtod_l+0xa42>
    a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1d4:	3301      	adds	r3, #1
    a1d6:	f43f ad3c 	beq.w	9c52 <_strtod_l+0x4ba>
    a1da:	f8df 9078 	ldr.w	r9, [pc, #120]	; a254 <_strtod_l+0xabc>
    a1de:	f04f 38ff 	mov.w	r8, #4294967295
    a1e2:	9918      	ldr	r1, [sp, #96]	; 0x60
    a1e4:	4650      	mov	r0, sl
    a1e6:	f01f f807 	bl	291f8 <_Bfree>
    a1ea:	9906      	ldr	r1, [sp, #24]
    a1ec:	4650      	mov	r0, sl
    a1ee:	f01f f803 	bl	291f8 <_Bfree>
    a1f2:	9905      	ldr	r1, [sp, #20]
    a1f4:	4650      	mov	r0, sl
    a1f6:	f01e ffff 	bl	291f8 <_Bfree>
    a1fa:	9907      	ldr	r1, [sp, #28]
    a1fc:	4650      	mov	r0, sl
    a1fe:	f01e fffb 	bl	291f8 <_Bfree>
    a202:	e5d5      	b.n	9db0 <_strtod_l+0x618>
    a204:	f1b8 0f01 	cmp.w	r8, #1
    a208:	d103      	bne.n	a212 <_strtod_l+0xa7a>
    a20a:	f1b9 0f00 	cmp.w	r9, #0
    a20e:	f43f aed0 	beq.w	9fb2 <_strtod_l+0x81a>
    a212:	4c17      	ldr	r4, [pc, #92]	; (a270 <_strtod_l+0xad8>)
    a214:	2300      	movs	r3, #0
    a216:	4d12      	ldr	r5, [pc, #72]	; (a260 <_strtod_l+0xac8>)
    a218:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a21c:	2400      	movs	r4, #0
    a21e:	e7b2      	b.n	a186 <_strtod_l+0x9ee>
    a220:	2400      	movs	r4, #0
    a222:	4d10      	ldr	r5, [pc, #64]	; (a264 <_strtod_l+0xacc>)
    a224:	e7ab      	b.n	a17e <_strtod_l+0x9e6>
    a226:	4b0f      	ldr	r3, [pc, #60]	; (a264 <_strtod_l+0xacc>)
    a228:	4620      	mov	r0, r4
    a22a:	4629      	mov	r1, r5
    a22c:	2200      	movs	r2, #0
    a22e:	f7fe f9fb 	bl	8628 <__aeabi_dmul>
    a232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a234:	4604      	mov	r4, r0
    a236:	460d      	mov	r5, r1
    a238:	2b00      	cmp	r3, #0
    a23a:	d0a0      	beq.n	a17e <_strtod_l+0x9e6>
    a23c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a240:	e7a1      	b.n	a186 <_strtod_l+0x9ee>
    a242:	4c07      	ldr	r4, [pc, #28]	; (a260 <_strtod_l+0xac8>)
    a244:	2300      	movs	r3, #0
    a246:	4625      	mov	r5, r4
    a248:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a24c:	461c      	mov	r4, r3
    a24e:	e79a      	b.n	a186 <_strtod_l+0x9ee>
    a250:	000fffff 	.word	0x000fffff
    a254:	7fefffff 	.word	0x7fefffff
    a258:	7ff00000 	.word	0x7ff00000
    a25c:	39500000 	.word	0x39500000
    a260:	3ff00000 	.word	0x3ff00000
    a264:	3fe00000 	.word	0x3fe00000
    a268:	7fe00000 	.word	0x7fe00000
    a26c:	7c9fffff 	.word	0x7c9fffff
    a270:	bff00000 	.word	0xbff00000
    a274:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a278:	9b04      	ldr	r3, [sp, #16]
    a27a:	464e      	mov	r6, r9
    a27c:	2b00      	cmp	r3, #0
    a27e:	d1b0      	bne.n	a1e2 <_strtod_l+0xa4a>
    a280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a284:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a286:	0d1b      	lsrs	r3, r3, #20
    a288:	051b      	lsls	r3, r3, #20
    a28a:	429a      	cmp	r2, r3
    a28c:	d1a9      	bne.n	a1e2 <_strtod_l+0xa4a>
    a28e:	4620      	mov	r0, r4
    a290:	4629      	mov	r1, r5
    a292:	f7fe fe57 	bl	8f44 <__aeabi_d2lz>
    a296:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a29a:	f7fe f997 	bl	85cc <__aeabi_l2d>
    a29e:	460b      	mov	r3, r1
    a2a0:	4602      	mov	r2, r0
    a2a2:	4629      	mov	r1, r5
    a2a4:	4620      	mov	r0, r4
    a2a6:	ea46 0608 	orr.w	r6, r6, r8
    a2aa:	f7fe f805 	bl	82b8 <__aeabi_dsub>
    a2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a2b0:	4604      	mov	r4, r0
    a2b2:	460d      	mov	r5, r1
    a2b4:	431e      	orrs	r6, r3
    a2b6:	d04a      	beq.n	a34e <_strtod_l+0xbb6>
    a2b8:	a32d      	add	r3, pc, #180	; (adr r3, a370 <_strtod_l+0xbd8>)
    a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2be:	f7fe fc25 	bl	8b0c <__aeabi_dcmplt>
    a2c2:	2800      	cmp	r0, #0
    a2c4:	f47f accc 	bne.w	9c60 <_strtod_l+0x4c8>
    a2c8:	4620      	mov	r0, r4
    a2ca:	4629      	mov	r1, r5
    a2cc:	a32a      	add	r3, pc, #168	; (adr r3, a378 <_strtod_l+0xbe0>)
    a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2d2:	f7fe fc39 	bl	8b48 <__aeabi_dcmpgt>
    a2d6:	2800      	cmp	r0, #0
    a2d8:	d083      	beq.n	a1e2 <_strtod_l+0xa4a>
    a2da:	e4c1      	b.n	9c60 <_strtod_l+0x4c8>
    a2dc:	9b04      	ldr	r3, [sp, #16]
    a2de:	b313      	cbz	r3, a326 <_strtod_l+0xb8e>
    a2e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a2e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a2e6:	d81e      	bhi.n	a326 <_strtod_l+0xb8e>
    a2e8:	4620      	mov	r0, r4
    a2ea:	4629      	mov	r1, r5
    a2ec:	a324      	add	r3, pc, #144	; (adr r3, a380 <_strtod_l+0xbe8>)
    a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2f2:	f7fe fc15 	bl	8b20 <__aeabi_dcmple>
    a2f6:	b190      	cbz	r0, a31e <_strtod_l+0xb86>
    a2f8:	4629      	mov	r1, r5
    a2fa:	4620      	mov	r0, r4
    a2fc:	f7fe fe02 	bl	8f04 <__aeabi_d2uiz>
    a300:	2801      	cmp	r0, #1
    a302:	bf38      	it	cc
    a304:	2001      	movcc	r0, #1
    a306:	f7fe f915 	bl	8534 <__aeabi_ui2d>
    a30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a30c:	4604      	mov	r4, r0
    a30e:	460d      	mov	r5, r1
    a310:	b9d3      	cbnz	r3, a348 <_strtod_l+0xbb0>
    a312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a316:	9012      	str	r0, [sp, #72]	; 0x48
    a318:	9313      	str	r3, [sp, #76]	; 0x4c
    a31a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a31e:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a322:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a324:	1a9f      	subs	r7, r3, r2
    a326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a32a:	f01f fa35 	bl	29798 <__ulp>
    a32e:	4602      	mov	r2, r0
    a330:	460b      	mov	r3, r1
    a332:	4630      	mov	r0, r6
    a334:	4639      	mov	r1, r7
    a336:	f7fe f977 	bl	8628 <__aeabi_dmul>
    a33a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a33e:	f7fd ffbd 	bl	82bc <__adddf3>
    a342:	4680      	mov	r8, r0
    a344:	4689      	mov	r9, r1
    a346:	e797      	b.n	a278 <_strtod_l+0xae0>
    a348:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a34c:	e7e5      	b.n	a31a <_strtod_l+0xb82>
    a34e:	a30e      	add	r3, pc, #56	; (adr r3, a388 <_strtod_l+0xbf0>)
    a350:	e9d3 2300 	ldrd	r2, r3, [r3]
    a354:	f7fe fbda 	bl	8b0c <__aeabi_dcmplt>
    a358:	e7bd      	b.n	a2d6 <_strtod_l+0xb3e>
    a35a:	2a65      	cmp	r2, #101	; 0x65
    a35c:	f43f ab48 	beq.w	99f0 <_strtod_l+0x258>
    a360:	2a45      	cmp	r2, #69	; 0x45
    a362:	f43f ab45 	beq.w	99f0 <_strtod_l+0x258>
    a366:	2301      	movs	r3, #1
    a368:	f7ff bb7e 	b.w	9a68 <_strtod_l+0x2d0>
    a36c:	f3af 8000 	nop.w
    a370:	94a03595 	.word	0x94a03595
    a374:	3fdfffff 	.word	0x3fdfffff
    a378:	35afe535 	.word	0x35afe535
    a37c:	3fe00000 	.word	0x3fe00000
    a380:	ffc00000 	.word	0xffc00000
    a384:	41dfffff 	.word	0x41dfffff
    a388:	94a03595 	.word	0x94a03595
    a38c:	3fcfffff 	.word	0x3fcfffff

0000a390 <_dtoa_r>:
    a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a394:	4614      	mov	r4, r2
    a396:	b097      	sub	sp, #92	; 0x5c
    a398:	461d      	mov	r5, r3
    a39a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    a39c:	4683      	mov	fp, r0
    a39e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    a3a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    a3a4:	b97f      	cbnz	r7, a3c6 <_dtoa_r+0x36>
    a3a6:	2010      	movs	r0, #16
    a3a8:	f01d fe24 	bl	27ff4 <malloc>
    a3ac:	4602      	mov	r2, r0
    a3ae:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    a3b2:	b920      	cbnz	r0, a3be <_dtoa_r+0x2e>
    a3b4:	4ba2      	ldr	r3, [pc, #648]	; (a640 <_dtoa_r+0x2b0>)
    a3b6:	21ea      	movs	r1, #234	; 0xea
    a3b8:	48a2      	ldr	r0, [pc, #648]	; (a644 <_dtoa_r+0x2b4>)
    a3ba:	f01f fe93 	bl	2a0e4 <__assert_func>
    a3be:	e9c0 7701 	strd	r7, r7, [r0, #4]
    a3c2:	6007      	str	r7, [r0, #0]
    a3c4:	60c7      	str	r7, [r0, #12]
    a3c6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a3ca:	6819      	ldr	r1, [r3, #0]
    a3cc:	b159      	cbz	r1, a3e6 <_dtoa_r+0x56>
    a3ce:	685a      	ldr	r2, [r3, #4]
    a3d0:	2301      	movs	r3, #1
    a3d2:	4658      	mov	r0, fp
    a3d4:	4093      	lsls	r3, r2
    a3d6:	604a      	str	r2, [r1, #4]
    a3d8:	608b      	str	r3, [r1, #8]
    a3da:	f01e ff0d 	bl	291f8 <_Bfree>
    a3de:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a3e2:	2200      	movs	r2, #0
    a3e4:	601a      	str	r2, [r3, #0]
    a3e6:	1e2b      	subs	r3, r5, #0
    a3e8:	bfb7      	itett	lt
    a3ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    a3ee:	2300      	movge	r3, #0
    a3f0:	2201      	movlt	r2, #1
    a3f2:	9305      	strlt	r3, [sp, #20]
    a3f4:	bfa8      	it	ge
    a3f6:	6033      	strge	r3, [r6, #0]
    a3f8:	9f05      	ldr	r7, [sp, #20]
    a3fa:	4b93      	ldr	r3, [pc, #588]	; (a648 <_dtoa_r+0x2b8>)
    a3fc:	bfb8      	it	lt
    a3fe:	6032      	strlt	r2, [r6, #0]
    a400:	43bb      	bics	r3, r7
    a402:	d119      	bne.n	a438 <_dtoa_r+0xa8>
    a404:	f242 730f 	movw	r3, #9999	; 0x270f
    a408:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a40a:	6013      	str	r3, [r2, #0]
    a40c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    a410:	4323      	orrs	r3, r4
    a412:	f000 85e0 	beq.w	afd6 <_dtoa_r+0xc46>
    a416:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a418:	b953      	cbnz	r3, a430 <_dtoa_r+0xa0>
    a41a:	4b8c      	ldr	r3, [pc, #560]	; (a64c <_dtoa_r+0x2bc>)
    a41c:	e021      	b.n	a462 <_dtoa_r+0xd2>
    a41e:	4b8c      	ldr	r3, [pc, #560]	; (a650 <_dtoa_r+0x2c0>)
    a420:	9308      	str	r3, [sp, #32]
    a422:	3308      	adds	r3, #8
    a424:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a426:	6013      	str	r3, [r2, #0]
    a428:	9808      	ldr	r0, [sp, #32]
    a42a:	b017      	add	sp, #92	; 0x5c
    a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a430:	4b86      	ldr	r3, [pc, #536]	; (a64c <_dtoa_r+0x2bc>)
    a432:	9308      	str	r3, [sp, #32]
    a434:	3303      	adds	r3, #3
    a436:	e7f5      	b.n	a424 <_dtoa_r+0x94>
    a438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a43c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    a440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a444:	2200      	movs	r2, #0
    a446:	2300      	movs	r3, #0
    a448:	f7fe fb56 	bl	8af8 <__aeabi_dcmpeq>
    a44c:	4680      	mov	r8, r0
    a44e:	b150      	cbz	r0, a466 <_dtoa_r+0xd6>
    a450:	2301      	movs	r3, #1
    a452:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a454:	6013      	str	r3, [r2, #0]
    a456:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a458:	b113      	cbz	r3, a460 <_dtoa_r+0xd0>
    a45a:	4b7e      	ldr	r3, [pc, #504]	; (a654 <_dtoa_r+0x2c4>)
    a45c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a45e:	6013      	str	r3, [r2, #0]
    a460:	4b7d      	ldr	r3, [pc, #500]	; (a658 <_dtoa_r+0x2c8>)
    a462:	9308      	str	r3, [sp, #32]
    a464:	e7e0      	b.n	a428 <_dtoa_r+0x98>
    a466:	ab14      	add	r3, sp, #80	; 0x50
    a468:	f3c7 560a 	ubfx	r6, r7, #20, #11
    a46c:	4658      	mov	r0, fp
    a46e:	9301      	str	r3, [sp, #4]
    a470:	ab15      	add	r3, sp, #84	; 0x54
    a472:	9300      	str	r3, [sp, #0]
    a474:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    a478:	f01f f9f8 	bl	2986c <__d2b>
    a47c:	9003      	str	r0, [sp, #12]
    a47e:	2e00      	cmp	r6, #0
    a480:	d078      	beq.n	a574 <_dtoa_r+0x1e4>
    a482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a484:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    a488:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    a48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a490:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    a494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a498:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    a49c:	4619      	mov	r1, r3
    a49e:	2200      	movs	r2, #0
    a4a0:	4b6e      	ldr	r3, [pc, #440]	; (a65c <_dtoa_r+0x2cc>)
    a4a2:	f7fd ff09 	bl	82b8 <__aeabi_dsub>
    a4a6:	a360      	add	r3, pc, #384	; (adr r3, a628 <_dtoa_r+0x298>)
    a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4ac:	f7fe f8bc 	bl	8628 <__aeabi_dmul>
    a4b0:	a35f      	add	r3, pc, #380	; (adr r3, a630 <_dtoa_r+0x2a0>)
    a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4b6:	f7fd ff01 	bl	82bc <__adddf3>
    a4ba:	4604      	mov	r4, r0
    a4bc:	460d      	mov	r5, r1
    a4be:	4630      	mov	r0, r6
    a4c0:	f7fe f848 	bl	8554 <__aeabi_i2d>
    a4c4:	a35c      	add	r3, pc, #368	; (adr r3, a638 <_dtoa_r+0x2a8>)
    a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4ca:	f7fe f8ad 	bl	8628 <__aeabi_dmul>
    a4ce:	4602      	mov	r2, r0
    a4d0:	460b      	mov	r3, r1
    a4d2:	4620      	mov	r0, r4
    a4d4:	4629      	mov	r1, r5
    a4d6:	f7fd fef1 	bl	82bc <__adddf3>
    a4da:	4604      	mov	r4, r0
    a4dc:	460d      	mov	r5, r1
    a4de:	f7fe fb53 	bl	8b88 <__aeabi_d2iz>
    a4e2:	2200      	movs	r2, #0
    a4e4:	4607      	mov	r7, r0
    a4e6:	2300      	movs	r3, #0
    a4e8:	4620      	mov	r0, r4
    a4ea:	4629      	mov	r1, r5
    a4ec:	f7fe fb0e 	bl	8b0c <__aeabi_dcmplt>
    a4f0:	b140      	cbz	r0, a504 <_dtoa_r+0x174>
    a4f2:	4638      	mov	r0, r7
    a4f4:	f7fe f82e 	bl	8554 <__aeabi_i2d>
    a4f8:	4622      	mov	r2, r4
    a4fa:	462b      	mov	r3, r5
    a4fc:	f7fe fafc 	bl	8af8 <__aeabi_dcmpeq>
    a500:	b900      	cbnz	r0, a504 <_dtoa_r+0x174>
    a502:	3f01      	subs	r7, #1
    a504:	2f16      	cmp	r7, #22
    a506:	d854      	bhi.n	a5b2 <_dtoa_r+0x222>
    a508:	4b55      	ldr	r3, [pc, #340]	; (a660 <_dtoa_r+0x2d0>)
    a50a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a512:	e9d3 2300 	ldrd	r2, r3, [r3]
    a516:	f7fe faf9 	bl	8b0c <__aeabi_dcmplt>
    a51a:	2800      	cmp	r0, #0
    a51c:	d04b      	beq.n	a5b6 <_dtoa_r+0x226>
    a51e:	3f01      	subs	r7, #1
    a520:	2300      	movs	r3, #0
    a522:	9312      	str	r3, [sp, #72]	; 0x48
    a524:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a526:	1b9b      	subs	r3, r3, r6
    a528:	1e5a      	subs	r2, r3, #1
    a52a:	bf4c      	ite	mi
    a52c:	f1c3 0301 	rsbmi	r3, r3, #1
    a530:	2300      	movpl	r3, #0
    a532:	920a      	str	r2, [sp, #40]	; 0x28
    a534:	bf45      	ittet	mi
    a536:	9306      	strmi	r3, [sp, #24]
    a538:	2300      	movmi	r3, #0
    a53a:	9306      	strpl	r3, [sp, #24]
    a53c:	930a      	strmi	r3, [sp, #40]	; 0x28
    a53e:	2f00      	cmp	r7, #0
    a540:	db3b      	blt.n	a5ba <_dtoa_r+0x22a>
    a542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a544:	970f      	str	r7, [sp, #60]	; 0x3c
    a546:	443b      	add	r3, r7
    a548:	930a      	str	r3, [sp, #40]	; 0x28
    a54a:	2300      	movs	r3, #0
    a54c:	930b      	str	r3, [sp, #44]	; 0x2c
    a54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a550:	2b09      	cmp	r3, #9
    a552:	f200 8089 	bhi.w	a668 <_dtoa_r+0x2d8>
    a556:	2b05      	cmp	r3, #5
    a558:	bfc5      	ittet	gt
    a55a:	3b04      	subgt	r3, #4
    a55c:	2400      	movgt	r4, #0
    a55e:	2401      	movle	r4, #1
    a560:	9320      	strgt	r3, [sp, #128]	; 0x80
    a562:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a564:	3b02      	subs	r3, #2
    a566:	2b03      	cmp	r3, #3
    a568:	f200 8089 	bhi.w	a67e <_dtoa_r+0x2ee>
    a56c:	e8df f003 	tbb	[pc, r3]
    a570:	59383a2d 	.word	0x59383a2d
    a574:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    a578:	441e      	add	r6, r3
    a57a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    a57e:	2b20      	cmp	r3, #32
    a580:	bfc9      	itett	gt
    a582:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    a586:	f1c3 0320 	rsble	r3, r3, #32
    a58a:	409f      	lslgt	r7, r3
    a58c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    a590:	bfd8      	it	le
    a592:	fa04 f003 	lslle.w	r0, r4, r3
    a596:	f106 36ff 	add.w	r6, r6, #4294967295
    a59a:	bfc4      	itt	gt
    a59c:	fa24 f303 	lsrgt.w	r3, r4, r3
    a5a0:	ea47 0003 	orrgt.w	r0, r7, r3
    a5a4:	f7fd ffc6 	bl	8534 <__aeabi_ui2d>
    a5a8:	2201      	movs	r2, #1
    a5aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    a5ae:	9213      	str	r2, [sp, #76]	; 0x4c
    a5b0:	e774      	b.n	a49c <_dtoa_r+0x10c>
    a5b2:	2301      	movs	r3, #1
    a5b4:	e7b5      	b.n	a522 <_dtoa_r+0x192>
    a5b6:	9012      	str	r0, [sp, #72]	; 0x48
    a5b8:	e7b4      	b.n	a524 <_dtoa_r+0x194>
    a5ba:	9b06      	ldr	r3, [sp, #24]
    a5bc:	1bdb      	subs	r3, r3, r7
    a5be:	9306      	str	r3, [sp, #24]
    a5c0:	427b      	negs	r3, r7
    a5c2:	930b      	str	r3, [sp, #44]	; 0x2c
    a5c4:	2300      	movs	r3, #0
    a5c6:	930f      	str	r3, [sp, #60]	; 0x3c
    a5c8:	e7c1      	b.n	a54e <_dtoa_r+0x1be>
    a5ca:	2300      	movs	r3, #0
    a5cc:	930e      	str	r3, [sp, #56]	; 0x38
    a5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	dc57      	bgt.n	a684 <_dtoa_r+0x2f4>
    a5d4:	2301      	movs	r3, #1
    a5d6:	4699      	mov	r9, r3
    a5d8:	461a      	mov	r2, r3
    a5da:	9309      	str	r3, [sp, #36]	; 0x24
    a5dc:	9221      	str	r2, [sp, #132]	; 0x84
    a5de:	e00c      	b.n	a5fa <_dtoa_r+0x26a>
    a5e0:	2301      	movs	r3, #1
    a5e2:	e7f3      	b.n	a5cc <_dtoa_r+0x23c>
    a5e4:	2300      	movs	r3, #0
    a5e6:	930e      	str	r3, [sp, #56]	; 0x38
    a5e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a5ea:	18fb      	adds	r3, r7, r3
    a5ec:	f103 0901 	add.w	r9, r3, #1
    a5f0:	9309      	str	r3, [sp, #36]	; 0x24
    a5f2:	464b      	mov	r3, r9
    a5f4:	2b01      	cmp	r3, #1
    a5f6:	bfb8      	it	lt
    a5f8:	2301      	movlt	r3, #1
    a5fa:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    a5fe:	2100      	movs	r1, #0
    a600:	2204      	movs	r2, #4
    a602:	f102 0514 	add.w	r5, r2, #20
    a606:	429d      	cmp	r5, r3
    a608:	d940      	bls.n	a68c <_dtoa_r+0x2fc>
    a60a:	6041      	str	r1, [r0, #4]
    a60c:	4658      	mov	r0, fp
    a60e:	f01e fdb3 	bl	29178 <_Balloc>
    a612:	9008      	str	r0, [sp, #32]
    a614:	2800      	cmp	r0, #0
    a616:	d13c      	bne.n	a692 <_dtoa_r+0x302>
    a618:	4b12      	ldr	r3, [pc, #72]	; (a664 <_dtoa_r+0x2d4>)
    a61a:	4602      	mov	r2, r0
    a61c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    a620:	e6ca      	b.n	a3b8 <_dtoa_r+0x28>
    a622:	2301      	movs	r3, #1
    a624:	e7df      	b.n	a5e6 <_dtoa_r+0x256>
    a626:	bf00      	nop
    a628:	636f4361 	.word	0x636f4361
    a62c:	3fd287a7 	.word	0x3fd287a7
    a630:	8b60c8b3 	.word	0x8b60c8b3
    a634:	3fc68a28 	.word	0x3fc68a28
    a638:	509f79fb 	.word	0x509f79fb
    a63c:	3fd34413 	.word	0x3fd34413
    a640:	0003c13d 	.word	0x0003c13d
    a644:	0003c154 	.word	0x0003c154
    a648:	7ff00000 	.word	0x7ff00000
    a64c:	0003c139 	.word	0x0003c139
    a650:	0003c130 	.word	0x0003c130
    a654:	000386dd 	.word	0x000386dd
    a658:	000386dc 	.word	0x000386dc
    a65c:	3ff80000 	.word	0x3ff80000
    a660:	00031e78 	.word	0x00031e78
    a664:	0003c1c8 	.word	0x0003c1c8
    a668:	2401      	movs	r4, #1
    a66a:	2300      	movs	r3, #0
    a66c:	940e      	str	r4, [sp, #56]	; 0x38
    a66e:	9320      	str	r3, [sp, #128]	; 0x80
    a670:	f04f 33ff 	mov.w	r3, #4294967295
    a674:	2200      	movs	r2, #0
    a676:	4699      	mov	r9, r3
    a678:	9309      	str	r3, [sp, #36]	; 0x24
    a67a:	2312      	movs	r3, #18
    a67c:	e7ae      	b.n	a5dc <_dtoa_r+0x24c>
    a67e:	2301      	movs	r3, #1
    a680:	930e      	str	r3, [sp, #56]	; 0x38
    a682:	e7f5      	b.n	a670 <_dtoa_r+0x2e0>
    a684:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a686:	4699      	mov	r9, r3
    a688:	9309      	str	r3, [sp, #36]	; 0x24
    a68a:	e7b6      	b.n	a5fa <_dtoa_r+0x26a>
    a68c:	3101      	adds	r1, #1
    a68e:	0052      	lsls	r2, r2, #1
    a690:	e7b7      	b.n	a602 <_dtoa_r+0x272>
    a692:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a696:	f1b9 0f0e 	cmp.w	r9, #14
    a69a:	9a08      	ldr	r2, [sp, #32]
    a69c:	601a      	str	r2, [r3, #0]
    a69e:	d86f      	bhi.n	a780 <_dtoa_r+0x3f0>
    a6a0:	2c00      	cmp	r4, #0
    a6a2:	d06d      	beq.n	a780 <_dtoa_r+0x3f0>
    a6a4:	2f00      	cmp	r7, #0
    a6a6:	dd36      	ble.n	a716 <_dtoa_r+0x386>
    a6a8:	f007 020f 	and.w	r2, r7, #15
    a6ac:	4ba0      	ldr	r3, [pc, #640]	; (a930 <_dtoa_r+0x5a0>)
    a6ae:	05f8      	lsls	r0, r7, #23
    a6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a6b4:	e9d3 3400 	ldrd	r3, r4, [r3]
    a6b8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    a6bc:	ea4f 1427 	mov.w	r4, r7, asr #4
    a6c0:	d517      	bpl.n	a6f2 <_dtoa_r+0x362>
    a6c2:	4b9c      	ldr	r3, [pc, #624]	; (a934 <_dtoa_r+0x5a4>)
    a6c4:	f004 040f 	and.w	r4, r4, #15
    a6c8:	f04f 0803 	mov.w	r8, #3
    a6cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    a6d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a6d4:	f7fe f8d2 	bl	887c <__aeabi_ddiv>
    a6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a6dc:	4d95      	ldr	r5, [pc, #596]	; (a934 <_dtoa_r+0x5a4>)
    a6de:	b95c      	cbnz	r4, a6f8 <_dtoa_r+0x368>
    a6e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a6e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a6e8:	f7fe f8c8 	bl	887c <__aeabi_ddiv>
    a6ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a6f0:	e02b      	b.n	a74a <_dtoa_r+0x3ba>
    a6f2:	f04f 0802 	mov.w	r8, #2
    a6f6:	e7f1      	b.n	a6dc <_dtoa_r+0x34c>
    a6f8:	07e1      	lsls	r1, r4, #31
    a6fa:	d509      	bpl.n	a710 <_dtoa_r+0x380>
    a6fc:	f108 0801 	add.w	r8, r8, #1
    a700:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a704:	e9d5 2300 	ldrd	r2, r3, [r5]
    a708:	f7fd ff8e 	bl	8628 <__aeabi_dmul>
    a70c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a710:	1064      	asrs	r4, r4, #1
    a712:	3508      	adds	r5, #8
    a714:	e7e3      	b.n	a6de <_dtoa_r+0x34e>
    a716:	f000 8107 	beq.w	a928 <_dtoa_r+0x598>
    a71a:	427c      	negs	r4, r7
    a71c:	4b84      	ldr	r3, [pc, #528]	; (a930 <_dtoa_r+0x5a0>)
    a71e:	4d85      	ldr	r5, [pc, #532]	; (a934 <_dtoa_r+0x5a4>)
    a720:	f04f 0802 	mov.w	r8, #2
    a724:	f004 020f 	and.w	r2, r4, #15
    a728:	1124      	asrs	r4, r4, #4
    a72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a732:	e9d3 2300 	ldrd	r2, r3, [r3]
    a736:	f7fd ff77 	bl	8628 <__aeabi_dmul>
    a73a:	2300      	movs	r3, #0
    a73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a740:	2c00      	cmp	r4, #0
    a742:	f040 80e5 	bne.w	a910 <_dtoa_r+0x580>
    a746:	2b00      	cmp	r3, #0
    a748:	d1d0      	bne.n	a6ec <_dtoa_r+0x35c>
    a74a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a74c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a750:	2b00      	cmp	r3, #0
    a752:	f000 814c 	beq.w	a9ee <_dtoa_r+0x65e>
    a756:	2200      	movs	r2, #0
    a758:	4b77      	ldr	r3, [pc, #476]	; (a938 <_dtoa_r+0x5a8>)
    a75a:	4620      	mov	r0, r4
    a75c:	4629      	mov	r1, r5
    a75e:	f7fe f9d5 	bl	8b0c <__aeabi_dcmplt>
    a762:	2800      	cmp	r0, #0
    a764:	f000 8143 	beq.w	a9ee <_dtoa_r+0x65e>
    a768:	f1b9 0f00 	cmp.w	r9, #0
    a76c:	f000 813f 	beq.w	a9ee <_dtoa_r+0x65e>
    a770:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a772:	2b00      	cmp	r3, #0
    a774:	f300 80e4 	bgt.w	a940 <_dtoa_r+0x5b0>
    a778:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a77c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a780:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a782:	2b00      	cmp	r3, #0
    a784:	db02      	blt.n	a78c <_dtoa_r+0x3fc>
    a786:	2f0e      	cmp	r7, #14
    a788:	f340 8242 	ble.w	ac10 <_dtoa_r+0x880>
    a78c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a78e:	2a00      	cmp	r2, #0
    a790:	f040 8267 	bne.w	ac62 <_dtoa_r+0x8d2>
    a794:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a796:	2500      	movs	r5, #0
    a798:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a79c:	f1b8 0f00 	cmp.w	r8, #0
    a7a0:	d00d      	beq.n	a7be <_dtoa_r+0x42e>
    a7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	dd0a      	ble.n	a7be <_dtoa_r+0x42e>
    a7a8:	4543      	cmp	r3, r8
    a7aa:	9a06      	ldr	r2, [sp, #24]
    a7ac:	bfa8      	it	ge
    a7ae:	4643      	movge	r3, r8
    a7b0:	1ad2      	subs	r2, r2, r3
    a7b2:	eba8 0803 	sub.w	r8, r8, r3
    a7b6:	9206      	str	r2, [sp, #24]
    a7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7ba:	1ad3      	subs	r3, r2, r3
    a7bc:	930a      	str	r3, [sp, #40]	; 0x28
    a7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7c0:	b30b      	cbz	r3, a806 <_dtoa_r+0x476>
    a7c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	f000 82a6 	beq.w	ad16 <_dtoa_r+0x986>
    a7ca:	2c00      	cmp	r4, #0
    a7cc:	f000 82a1 	beq.w	ad12 <_dtoa_r+0x982>
    a7d0:	4629      	mov	r1, r5
    a7d2:	4622      	mov	r2, r4
    a7d4:	4658      	mov	r0, fp
    a7d6:	f01e fe83 	bl	294e0 <__pow5mult>
    a7da:	9a03      	ldr	r2, [sp, #12]
    a7dc:	4601      	mov	r1, r0
    a7de:	4605      	mov	r5, r0
    a7e0:	4658      	mov	r0, fp
    a7e2:	f01e fdd3 	bl	2938c <__multiply>
    a7e6:	9903      	ldr	r1, [sp, #12]
    a7e8:	4606      	mov	r6, r0
    a7ea:	4658      	mov	r0, fp
    a7ec:	f01e fd04 	bl	291f8 <_Bfree>
    a7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7f2:	1b1b      	subs	r3, r3, r4
    a7f4:	930b      	str	r3, [sp, #44]	; 0x2c
    a7f6:	f000 8291 	beq.w	ad1c <_dtoa_r+0x98c>
    a7fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a7fc:	4631      	mov	r1, r6
    a7fe:	4658      	mov	r0, fp
    a800:	f01e fe6e 	bl	294e0 <__pow5mult>
    a804:	9003      	str	r0, [sp, #12]
    a806:	2101      	movs	r1, #1
    a808:	4658      	mov	r0, fp
    a80a:	f01e fda9 	bl	29360 <__i2b>
    a80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a810:	4604      	mov	r4, r0
    a812:	2b00      	cmp	r3, #0
    a814:	f000 8284 	beq.w	ad20 <_dtoa_r+0x990>
    a818:	461a      	mov	r2, r3
    a81a:	4601      	mov	r1, r0
    a81c:	4658      	mov	r0, fp
    a81e:	f01e fe5f 	bl	294e0 <__pow5mult>
    a822:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a824:	4604      	mov	r4, r0
    a826:	2b01      	cmp	r3, #1
    a828:	dc03      	bgt.n	a832 <_dtoa_r+0x4a2>
    a82a:	9b04      	ldr	r3, [sp, #16]
    a82c:	2b00      	cmp	r3, #0
    a82e:	f000 827c 	beq.w	ad2a <_dtoa_r+0x99a>
    a832:	2600      	movs	r6, #0
    a834:	6923      	ldr	r3, [r4, #16]
    a836:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a83a:	6918      	ldr	r0, [r3, #16]
    a83c:	f026 fbf2 	bl	31024 <__hi0bits>
    a840:	f1c0 0020 	rsb	r0, r0, #32
    a844:	960f      	str	r6, [sp, #60]	; 0x3c
    a846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a848:	4418      	add	r0, r3
    a84a:	f010 001f 	ands.w	r0, r0, #31
    a84e:	f000 8291 	beq.w	ad74 <_dtoa_r+0x9e4>
    a852:	f1c0 0320 	rsb	r3, r0, #32
    a856:	2b04      	cmp	r3, #4
    a858:	f340 8281 	ble.w	ad5e <_dtoa_r+0x9ce>
    a85c:	f1c0 001c 	rsb	r0, r0, #28
    a860:	9b06      	ldr	r3, [sp, #24]
    a862:	4403      	add	r3, r0
    a864:	4480      	add	r8, r0
    a866:	9306      	str	r3, [sp, #24]
    a868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a86a:	4403      	add	r3, r0
    a86c:	930a      	str	r3, [sp, #40]	; 0x28
    a86e:	9b06      	ldr	r3, [sp, #24]
    a870:	2b00      	cmp	r3, #0
    a872:	dd05      	ble.n	a880 <_dtoa_r+0x4f0>
    a874:	461a      	mov	r2, r3
    a876:	9903      	ldr	r1, [sp, #12]
    a878:	4658      	mov	r0, fp
    a87a:	f01e fe8b 	bl	29594 <__lshift>
    a87e:	9003      	str	r0, [sp, #12]
    a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a882:	2b00      	cmp	r3, #0
    a884:	dd05      	ble.n	a892 <_dtoa_r+0x502>
    a886:	4621      	mov	r1, r4
    a888:	461a      	mov	r2, r3
    a88a:	4658      	mov	r0, fp
    a88c:	f01e fe82 	bl	29594 <__lshift>
    a890:	4604      	mov	r4, r0
    a892:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a894:	2b00      	cmp	r3, #0
    a896:	f000 8276 	beq.w	ad86 <_dtoa_r+0x9f6>
    a89a:	4621      	mov	r1, r4
    a89c:	9803      	ldr	r0, [sp, #12]
    a89e:	f026 fc10 	bl	310c2 <__mcmp>
    a8a2:	2800      	cmp	r0, #0
    a8a4:	f280 826f 	bge.w	ad86 <_dtoa_r+0x9f6>
    a8a8:	2300      	movs	r3, #0
    a8aa:	220a      	movs	r2, #10
    a8ac:	9903      	ldr	r1, [sp, #12]
    a8ae:	4658      	mov	r0, fp
    a8b0:	f01e fcc4 	bl	2923c <__multadd>
    a8b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a8b6:	1e7e      	subs	r6, r7, #1
    a8b8:	9003      	str	r0, [sp, #12]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	f000 825c 	beq.w	ad78 <_dtoa_r+0x9e8>
    a8c0:	2300      	movs	r3, #0
    a8c2:	4629      	mov	r1, r5
    a8c4:	220a      	movs	r2, #10
    a8c6:	4658      	mov	r0, fp
    a8c8:	f01e fcb8 	bl	2923c <__multadd>
    a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8ce:	4605      	mov	r5, r0
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	dc03      	bgt.n	a8dc <_dtoa_r+0x54c>
    a8d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a8d6:	2b02      	cmp	r3, #2
    a8d8:	f300 825e 	bgt.w	ad98 <_dtoa_r+0xa08>
    a8dc:	f1b8 0f00 	cmp.w	r8, #0
    a8e0:	dd05      	ble.n	a8ee <_dtoa_r+0x55e>
    a8e2:	4629      	mov	r1, r5
    a8e4:	4642      	mov	r2, r8
    a8e6:	4658      	mov	r0, fp
    a8e8:	f01e fe54 	bl	29594 <__lshift>
    a8ec:	4605      	mov	r5, r0
    a8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	f000 82d0 	beq.w	ae96 <_dtoa_r+0xb06>
    a8f6:	6869      	ldr	r1, [r5, #4]
    a8f8:	4658      	mov	r0, fp
    a8fa:	f01e fc3d 	bl	29178 <_Balloc>
    a8fe:	4607      	mov	r7, r0
    a900:	2800      	cmp	r0, #0
    a902:	f040 827f 	bne.w	ae04 <_dtoa_r+0xa74>
    a906:	4b0d      	ldr	r3, [pc, #52]	; (a93c <_dtoa_r+0x5ac>)
    a908:	4602      	mov	r2, r0
    a90a:	f240 21ea 	movw	r1, #746	; 0x2ea
    a90e:	e553      	b.n	a3b8 <_dtoa_r+0x28>
    a910:	07e2      	lsls	r2, r4, #31
    a912:	d506      	bpl.n	a922 <_dtoa_r+0x592>
    a914:	f108 0801 	add.w	r8, r8, #1
    a918:	e9d5 2300 	ldrd	r2, r3, [r5]
    a91c:	f7fd fe84 	bl	8628 <__aeabi_dmul>
    a920:	2301      	movs	r3, #1
    a922:	1064      	asrs	r4, r4, #1
    a924:	3508      	adds	r5, #8
    a926:	e70b      	b.n	a740 <_dtoa_r+0x3b0>
    a928:	f04f 0802 	mov.w	r8, #2
    a92c:	e70d      	b.n	a74a <_dtoa_r+0x3ba>
    a92e:	bf00      	nop
    a930:	00031e78 	.word	0x00031e78
    a934:	00031e50 	.word	0x00031e50
    a938:	3ff00000 	.word	0x3ff00000
    a93c:	0003c1c8 	.word	0x0003c1c8
    a940:	4620      	mov	r0, r4
    a942:	2200      	movs	r2, #0
    a944:	4bac      	ldr	r3, [pc, #688]	; (abf8 <_dtoa_r+0x868>)
    a946:	4629      	mov	r1, r5
    a948:	f7fd fe6e 	bl	8628 <__aeabi_dmul>
    a94c:	1e7e      	subs	r6, r7, #1
    a94e:	f108 0801 	add.w	r8, r8, #1
    a952:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a954:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a958:	4640      	mov	r0, r8
    a95a:	f7fd fdfb 	bl	8554 <__aeabi_i2d>
    a95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a962:	f7fd fe61 	bl	8628 <__aeabi_dmul>
    a966:	4ba5      	ldr	r3, [pc, #660]	; (abfc <_dtoa_r+0x86c>)
    a968:	2200      	movs	r2, #0
    a96a:	f7fd fca7 	bl	82bc <__adddf3>
    a96e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a972:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a976:	9311      	str	r3, [sp, #68]	; 0x44
    a978:	2c00      	cmp	r4, #0
    a97a:	d13b      	bne.n	a9f4 <_dtoa_r+0x664>
    a97c:	2200      	movs	r2, #0
    a97e:	4ba0      	ldr	r3, [pc, #640]	; (ac00 <_dtoa_r+0x870>)
    a980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a984:	f7fd fc98 	bl	82b8 <__aeabi_dsub>
    a988:	4602      	mov	r2, r0
    a98a:	460b      	mov	r3, r1
    a98c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a994:	f7fe f8d8 	bl	8b48 <__aeabi_dcmpgt>
    a998:	2800      	cmp	r0, #0
    a99a:	f040 8157 	bne.w	ac4c <_dtoa_r+0x8bc>
    a99e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a9a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a9aa:	f7fe f8af 	bl	8b0c <__aeabi_dcmplt>
    a9ae:	2800      	cmp	r0, #0
    a9b0:	f43f aee2 	beq.w	a778 <_dtoa_r+0x3e8>
    a9b4:	2400      	movs	r4, #0
    a9b6:	4625      	mov	r5, r4
    a9b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a9ba:	f8dd a020 	ldr.w	sl, [sp, #32]
    a9be:	43de      	mvns	r6, r3
    a9c0:	f04f 0800 	mov.w	r8, #0
    a9c4:	4621      	mov	r1, r4
    a9c6:	4658      	mov	r0, fp
    a9c8:	f01e fc16 	bl	291f8 <_Bfree>
    a9cc:	2d00      	cmp	r5, #0
    a9ce:	f000 80a9 	beq.w	ab24 <_dtoa_r+0x794>
    a9d2:	f1b8 0f00 	cmp.w	r8, #0
    a9d6:	d005      	beq.n	a9e4 <_dtoa_r+0x654>
    a9d8:	45a8      	cmp	r8, r5
    a9da:	d003      	beq.n	a9e4 <_dtoa_r+0x654>
    a9dc:	4641      	mov	r1, r8
    a9de:	4658      	mov	r0, fp
    a9e0:	f01e fc0a 	bl	291f8 <_Bfree>
    a9e4:	4629      	mov	r1, r5
    a9e6:	4658      	mov	r0, fp
    a9e8:	f01e fc06 	bl	291f8 <_Bfree>
    a9ec:	e09a      	b.n	ab24 <_dtoa_r+0x794>
    a9ee:	463e      	mov	r6, r7
    a9f0:	464c      	mov	r4, r9
    a9f2:	e7b1      	b.n	a958 <_dtoa_r+0x5c8>
    a9f4:	4b83      	ldr	r3, [pc, #524]	; (ac04 <_dtoa_r+0x874>)
    a9f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a9fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a9fe:	9b08      	ldr	r3, [sp, #32]
    aa00:	441c      	add	r4, r3
    aa02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa04:	2b00      	cmp	r3, #0
    aa06:	d04a      	beq.n	aa9e <_dtoa_r+0x70e>
    aa08:	4602      	mov	r2, r0
    aa0a:	460b      	mov	r3, r1
    aa0c:	2000      	movs	r0, #0
    aa0e:	497e      	ldr	r1, [pc, #504]	; (ac08 <_dtoa_r+0x878>)
    aa10:	f7fd ff34 	bl	887c <__aeabi_ddiv>
    aa14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    aa18:	f7fd fc4e 	bl	82b8 <__aeabi_dsub>
    aa1c:	f8dd a020 	ldr.w	sl, [sp, #32]
    aa20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aa24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aa28:	f7fe f8ae 	bl	8b88 <__aeabi_d2iz>
    aa2c:	4605      	mov	r5, r0
    aa2e:	f7fd fd91 	bl	8554 <__aeabi_i2d>
    aa32:	4602      	mov	r2, r0
    aa34:	3530      	adds	r5, #48	; 0x30
    aa36:	460b      	mov	r3, r1
    aa38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aa3c:	f7fd fc3c 	bl	82b8 <__aeabi_dsub>
    aa40:	f80a 5b01 	strb.w	r5, [sl], #1
    aa44:	4602      	mov	r2, r0
    aa46:	460b      	mov	r3, r1
    aa48:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aa4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    aa50:	f7fe f87a 	bl	8b48 <__aeabi_dcmpgt>
    aa54:	2800      	cmp	r0, #0
    aa56:	d165      	bne.n	ab24 <_dtoa_r+0x794>
    aa58:	2000      	movs	r0, #0
    aa5a:	496c      	ldr	r1, [pc, #432]	; (ac0c <_dtoa_r+0x87c>)
    aa5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aa60:	f7fd fc2a 	bl	82b8 <__aeabi_dsub>
    aa64:	4602      	mov	r2, r0
    aa66:	460b      	mov	r3, r1
    aa68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    aa6c:	f7fe f86c 	bl	8b48 <__aeabi_dcmpgt>
    aa70:	2800      	cmp	r0, #0
    aa72:	f040 810d 	bne.w	ac90 <_dtoa_r+0x900>
    aa76:	45a2      	cmp	sl, r4
    aa78:	f000 80ea 	beq.w	ac50 <_dtoa_r+0x8c0>
    aa7c:	2200      	movs	r2, #0
    aa7e:	4b5e      	ldr	r3, [pc, #376]	; (abf8 <_dtoa_r+0x868>)
    aa80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    aa84:	f7fd fdd0 	bl	8628 <__aeabi_dmul>
    aa88:	2200      	movs	r2, #0
    aa8a:	4b5b      	ldr	r3, [pc, #364]	; (abf8 <_dtoa_r+0x868>)
    aa8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aa90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aa94:	f7fd fdc8 	bl	8628 <__aeabi_dmul>
    aa98:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aa9c:	e7c2      	b.n	aa24 <_dtoa_r+0x694>
    aa9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    aaa2:	f7fd fdc1 	bl	8628 <__aeabi_dmul>
    aaa6:	46a0      	mov	r8, r4
    aaa8:	f8dd a020 	ldr.w	sl, [sp, #32]
    aaac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aab4:	f7fe f868 	bl	8b88 <__aeabi_d2iz>
    aab8:	4605      	mov	r5, r0
    aaba:	f7fd fd4b 	bl	8554 <__aeabi_i2d>
    aabe:	4602      	mov	r2, r0
    aac0:	3530      	adds	r5, #48	; 0x30
    aac2:	460b      	mov	r3, r1
    aac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aac8:	f7fd fbf6 	bl	82b8 <__aeabi_dsub>
    aacc:	f80a 5b01 	strb.w	r5, [sl], #1
    aad0:	4602      	mov	r2, r0
    aad2:	460b      	mov	r3, r1
    aad4:	45a2      	cmp	sl, r4
    aad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    aada:	f04f 0200 	mov.w	r2, #0
    aade:	d123      	bne.n	ab28 <_dtoa_r+0x798>
    aae0:	4b49      	ldr	r3, [pc, #292]	; (ac08 <_dtoa_r+0x878>)
    aae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    aae6:	f7fd fbe9 	bl	82bc <__adddf3>
    aaea:	4602      	mov	r2, r0
    aaec:	460b      	mov	r3, r1
    aaee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aaf2:	f7fe f829 	bl	8b48 <__aeabi_dcmpgt>
    aaf6:	2800      	cmp	r0, #0
    aaf8:	f040 80ca 	bne.w	ac90 <_dtoa_r+0x900>
    aafc:	2000      	movs	r0, #0
    aafe:	4942      	ldr	r1, [pc, #264]	; (ac08 <_dtoa_r+0x878>)
    ab00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ab04:	f7fd fbd8 	bl	82b8 <__aeabi_dsub>
    ab08:	4602      	mov	r2, r0
    ab0a:	460b      	mov	r3, r1
    ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ab10:	f7fd fffc 	bl	8b0c <__aeabi_dcmplt>
    ab14:	b170      	cbz	r0, ab34 <_dtoa_r+0x7a4>
    ab16:	46c2      	mov	sl, r8
    ab18:	f108 38ff 	add.w	r8, r8, #4294967295
    ab1c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    ab20:	2b30      	cmp	r3, #48	; 0x30
    ab22:	d0f8      	beq.n	ab16 <_dtoa_r+0x786>
    ab24:	4637      	mov	r7, r6
    ab26:	e055      	b.n	abd4 <_dtoa_r+0x844>
    ab28:	4b33      	ldr	r3, [pc, #204]	; (abf8 <_dtoa_r+0x868>)
    ab2a:	f7fd fd7d 	bl	8628 <__aeabi_dmul>
    ab2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ab32:	e7bd      	b.n	aab0 <_dtoa_r+0x720>
    ab34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ab38:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ab3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ab3e:	2b00      	cmp	r3, #0
    ab40:	f6ff ae28 	blt.w	a794 <_dtoa_r+0x404>
    ab44:	2f0e      	cmp	r7, #14
    ab46:	f73f ae25 	bgt.w	a794 <_dtoa_r+0x404>
    ab4a:	4b2e      	ldr	r3, [pc, #184]	; (ac04 <_dtoa_r+0x874>)
    ab4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ab50:	e9d3 3400 	ldrd	r3, r4, [r3]
    ab54:	e9cd 3406 	strd	r3, r4, [sp, #24]
    ab58:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	da02      	bge.n	ab64 <_dtoa_r+0x7d4>
    ab5e:	f1b9 0f00 	cmp.w	r9, #0
    ab62:	d064      	beq.n	ac2e <_dtoa_r+0x89e>
    ab64:	f8dd a020 	ldr.w	sl, [sp, #32]
    ab68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ab6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ab70:	4620      	mov	r0, r4
    ab72:	4629      	mov	r1, r5
    ab74:	f7fd fe82 	bl	887c <__aeabi_ddiv>
    ab78:	f7fe f806 	bl	8b88 <__aeabi_d2iz>
    ab7c:	4606      	mov	r6, r0
    ab7e:	f7fd fce9 	bl	8554 <__aeabi_i2d>
    ab82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ab86:	f7fd fd4f 	bl	8628 <__aeabi_dmul>
    ab8a:	4602      	mov	r2, r0
    ab8c:	4620      	mov	r0, r4
    ab8e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    ab92:	460b      	mov	r3, r1
    ab94:	4629      	mov	r1, r5
    ab96:	f7fd fb8f 	bl	82b8 <__aeabi_dsub>
    ab9a:	f80a 4b01 	strb.w	r4, [sl], #1
    ab9e:	9c08      	ldr	r4, [sp, #32]
    aba0:	4602      	mov	r2, r0
    aba2:	460b      	mov	r3, r1
    aba4:	ebaa 0404 	sub.w	r4, sl, r4
    aba8:	45a1      	cmp	r9, r4
    abaa:	f040 8082 	bne.w	acb2 <_dtoa_r+0x922>
    abae:	f7fd fb85 	bl	82bc <__adddf3>
    abb2:	4604      	mov	r4, r0
    abb4:	460d      	mov	r5, r1
    abb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    abba:	f7fd ffc5 	bl	8b48 <__aeabi_dcmpgt>
    abbe:	2800      	cmp	r0, #0
    abc0:	d165      	bne.n	ac8e <_dtoa_r+0x8fe>
    abc2:	4620      	mov	r0, r4
    abc4:	4629      	mov	r1, r5
    abc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    abca:	f7fd ff95 	bl	8af8 <__aeabi_dcmpeq>
    abce:	b108      	cbz	r0, abd4 <_dtoa_r+0x844>
    abd0:	07f3      	lsls	r3, r6, #31
    abd2:	d45c      	bmi.n	ac8e <_dtoa_r+0x8fe>
    abd4:	9903      	ldr	r1, [sp, #12]
    abd6:	4658      	mov	r0, fp
    abd8:	f01e fb0e 	bl	291f8 <_Bfree>
    abdc:	2300      	movs	r3, #0
    abde:	3701      	adds	r7, #1
    abe0:	f88a 3000 	strb.w	r3, [sl]
    abe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    abe6:	601f      	str	r7, [r3, #0]
    abe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    abea:	2b00      	cmp	r3, #0
    abec:	f43f ac1c 	beq.w	a428 <_dtoa_r+0x98>
    abf0:	f8c3 a000 	str.w	sl, [r3]
    abf4:	e418      	b.n	a428 <_dtoa_r+0x98>
    abf6:	bf00      	nop
    abf8:	40240000 	.word	0x40240000
    abfc:	401c0000 	.word	0x401c0000
    ac00:	40140000 	.word	0x40140000
    ac04:	00031e78 	.word	0x00031e78
    ac08:	3fe00000 	.word	0x3fe00000
    ac0c:	3ff00000 	.word	0x3ff00000
    ac10:	4ba2      	ldr	r3, [pc, #648]	; (ae9c <_dtoa_r+0xb0c>)
    ac12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ac16:	e9d3 3400 	ldrd	r3, r4, [r3]
    ac1a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    ac1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac20:	2b00      	cmp	r3, #0
    ac22:	da9f      	bge.n	ab64 <_dtoa_r+0x7d4>
    ac24:	f1b9 0f00 	cmp.w	r9, #0
    ac28:	dc9c      	bgt.n	ab64 <_dtoa_r+0x7d4>
    ac2a:	f47f aec3 	bne.w	a9b4 <_dtoa_r+0x624>
    ac2e:	2200      	movs	r2, #0
    ac30:	4b9b      	ldr	r3, [pc, #620]	; (aea0 <_dtoa_r+0xb10>)
    ac32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    ac36:	f7fd fcf7 	bl	8628 <__aeabi_dmul>
    ac3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ac3e:	f7fd ff79 	bl	8b34 <__aeabi_dcmpge>
    ac42:	4604      	mov	r4, r0
    ac44:	2800      	cmp	r0, #0
    ac46:	f47f aeb5 	bne.w	a9b4 <_dtoa_r+0x624>
    ac4a:	463e      	mov	r6, r7
    ac4c:	4625      	mov	r5, r4
    ac4e:	e0b4      	b.n	adba <_dtoa_r+0xa2a>
    ac50:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ac54:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ac58:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	db01      	blt.n	ac62 <_dtoa_r+0x8d2>
    ac5e:	2f0e      	cmp	r7, #14
    ac60:	ddd6      	ble.n	ac10 <_dtoa_r+0x880>
    ac62:	9a20      	ldr	r2, [sp, #128]	; 0x80
    ac64:	2a01      	cmp	r2, #1
    ac66:	dc36      	bgt.n	acd6 <_dtoa_r+0x946>
    ac68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ac6a:	b382      	cbz	r2, acce <_dtoa_r+0x93e>
    ac6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    ac70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ac72:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ac76:	9a06      	ldr	r2, [sp, #24]
    ac78:	2101      	movs	r1, #1
    ac7a:	4658      	mov	r0, fp
    ac7c:	441a      	add	r2, r3
    ac7e:	9206      	str	r2, [sp, #24]
    ac80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ac82:	441a      	add	r2, r3
    ac84:	920a      	str	r2, [sp, #40]	; 0x28
    ac86:	f01e fb6b 	bl	29360 <__i2b>
    ac8a:	4605      	mov	r5, r0
    ac8c:	e586      	b.n	a79c <_dtoa_r+0x40c>
    ac8e:	463e      	mov	r6, r7
    ac90:	4653      	mov	r3, sl
    ac92:	469a      	mov	sl, r3
    ac94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    ac98:	2a39      	cmp	r2, #57	; 0x39
    ac9a:	d106      	bne.n	acaa <_dtoa_r+0x91a>
    ac9c:	9a08      	ldr	r2, [sp, #32]
    ac9e:	429a      	cmp	r2, r3
    aca0:	d1f7      	bne.n	ac92 <_dtoa_r+0x902>
    aca2:	2230      	movs	r2, #48	; 0x30
    aca4:	9908      	ldr	r1, [sp, #32]
    aca6:	3601      	adds	r6, #1
    aca8:	700a      	strb	r2, [r1, #0]
    acaa:	781a      	ldrb	r2, [r3, #0]
    acac:	3201      	adds	r2, #1
    acae:	701a      	strb	r2, [r3, #0]
    acb0:	e738      	b.n	ab24 <_dtoa_r+0x794>
    acb2:	2200      	movs	r2, #0
    acb4:	4b7b      	ldr	r3, [pc, #492]	; (aea4 <_dtoa_r+0xb14>)
    acb6:	f7fd fcb7 	bl	8628 <__aeabi_dmul>
    acba:	2200      	movs	r2, #0
    acbc:	2300      	movs	r3, #0
    acbe:	4604      	mov	r4, r0
    acc0:	460d      	mov	r5, r1
    acc2:	f7fd ff19 	bl	8af8 <__aeabi_dcmpeq>
    acc6:	2800      	cmp	r0, #0
    acc8:	f43f af50 	beq.w	ab6c <_dtoa_r+0x7dc>
    accc:	e782      	b.n	abd4 <_dtoa_r+0x844>
    acce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    acd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    acd4:	e7cc      	b.n	ac70 <_dtoa_r+0x8e0>
    acd6:	f109 34ff 	add.w	r4, r9, #4294967295
    acda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acdc:	42a3      	cmp	r3, r4
    acde:	db08      	blt.n	acf2 <_dtoa_r+0x962>
    ace0:	f1b9 0f00 	cmp.w	r9, #0
    ace4:	eba3 0404 	sub.w	r4, r3, r4
    ace8:	db0e      	blt.n	ad08 <_dtoa_r+0x978>
    acea:	f8dd 8018 	ldr.w	r8, [sp, #24]
    acee:	464b      	mov	r3, r9
    acf0:	e7c1      	b.n	ac76 <_dtoa_r+0x8e6>
    acf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    acf6:	1ae3      	subs	r3, r4, r3
    acf8:	940b      	str	r4, [sp, #44]	; 0x2c
    acfa:	f8dd 8018 	ldr.w	r8, [sp, #24]
    acfe:	2400      	movs	r4, #0
    ad00:	441a      	add	r2, r3
    ad02:	464b      	mov	r3, r9
    ad04:	920f      	str	r2, [sp, #60]	; 0x3c
    ad06:	e7b6      	b.n	ac76 <_dtoa_r+0x8e6>
    ad08:	9b06      	ldr	r3, [sp, #24]
    ad0a:	eba3 0809 	sub.w	r8, r3, r9
    ad0e:	2300      	movs	r3, #0
    ad10:	e7b1      	b.n	ac76 <_dtoa_r+0x8e6>
    ad12:	9e03      	ldr	r6, [sp, #12]
    ad14:	e571      	b.n	a7fa <_dtoa_r+0x46a>
    ad16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ad18:	9903      	ldr	r1, [sp, #12]
    ad1a:	e570      	b.n	a7fe <_dtoa_r+0x46e>
    ad1c:	9603      	str	r6, [sp, #12]
    ad1e:	e572      	b.n	a806 <_dtoa_r+0x476>
    ad20:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ad22:	2b01      	cmp	r3, #1
    ad24:	dc17      	bgt.n	ad56 <_dtoa_r+0x9c6>
    ad26:	9b04      	ldr	r3, [sp, #16]
    ad28:	b9ab      	cbnz	r3, ad56 <_dtoa_r+0x9c6>
    ad2a:	9b05      	ldr	r3, [sp, #20]
    ad2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ad30:	b99b      	cbnz	r3, ad5a <_dtoa_r+0x9ca>
    ad32:	9b05      	ldr	r3, [sp, #20]
    ad34:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    ad38:	0d36      	lsrs	r6, r6, #20
    ad3a:	0536      	lsls	r6, r6, #20
    ad3c:	b136      	cbz	r6, ad4c <_dtoa_r+0x9bc>
    ad3e:	9b06      	ldr	r3, [sp, #24]
    ad40:	2601      	movs	r6, #1
    ad42:	3301      	adds	r3, #1
    ad44:	9306      	str	r3, [sp, #24]
    ad46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad48:	3301      	adds	r3, #1
    ad4a:	930a      	str	r3, [sp, #40]	; 0x28
    ad4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ad4e:	2b00      	cmp	r3, #0
    ad50:	f47f ad70 	bne.w	a834 <_dtoa_r+0x4a4>
    ad54:	960f      	str	r6, [sp, #60]	; 0x3c
    ad56:	2001      	movs	r0, #1
    ad58:	e575      	b.n	a846 <_dtoa_r+0x4b6>
    ad5a:	2600      	movs	r6, #0
    ad5c:	e7f6      	b.n	ad4c <_dtoa_r+0x9bc>
    ad5e:	f43f ad86 	beq.w	a86e <_dtoa_r+0x4de>
    ad62:	331c      	adds	r3, #28
    ad64:	9a06      	ldr	r2, [sp, #24]
    ad66:	441a      	add	r2, r3
    ad68:	4498      	add	r8, r3
    ad6a:	9206      	str	r2, [sp, #24]
    ad6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad6e:	441a      	add	r2, r3
    ad70:	920a      	str	r2, [sp, #40]	; 0x28
    ad72:	e57c      	b.n	a86e <_dtoa_r+0x4de>
    ad74:	4603      	mov	r3, r0
    ad76:	e7f4      	b.n	ad62 <_dtoa_r+0x9d2>
    ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	dc2b      	bgt.n	add6 <_dtoa_r+0xa46>
    ad7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ad80:	2b02      	cmp	r3, #2
    ad82:	dc09      	bgt.n	ad98 <_dtoa_r+0xa08>
    ad84:	e027      	b.n	add6 <_dtoa_r+0xa46>
    ad86:	f1b9 0f00 	cmp.w	r9, #0
    ad8a:	dc1d      	bgt.n	adc8 <_dtoa_r+0xa38>
    ad8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ad8e:	2b02      	cmp	r3, #2
    ad90:	dd1a      	ble.n	adc8 <_dtoa_r+0xa38>
    ad92:	463e      	mov	r6, r7
    ad94:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	f47f ae0c 	bne.w	a9b8 <_dtoa_r+0x628>
    ada0:	4621      	mov	r1, r4
    ada2:	2205      	movs	r2, #5
    ada4:	4658      	mov	r0, fp
    ada6:	f01e fa49 	bl	2923c <__multadd>
    adaa:	4601      	mov	r1, r0
    adac:	4604      	mov	r4, r0
    adae:	9803      	ldr	r0, [sp, #12]
    adb0:	f026 f987 	bl	310c2 <__mcmp>
    adb4:	2800      	cmp	r0, #0
    adb6:	f77f adff 	ble.w	a9b8 <_dtoa_r+0x628>
    adba:	f8dd a020 	ldr.w	sl, [sp, #32]
    adbe:	2331      	movs	r3, #49	; 0x31
    adc0:	3601      	adds	r6, #1
    adc2:	f80a 3b01 	strb.w	r3, [sl], #1
    adc6:	e5fb      	b.n	a9c0 <_dtoa_r+0x630>
    adc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    adca:	463e      	mov	r6, r7
    adcc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    add0:	2b00      	cmp	r3, #0
    add2:	f47f ad83 	bne.w	a8dc <_dtoa_r+0x54c>
    add6:	9f08      	ldr	r7, [sp, #32]
    add8:	4621      	mov	r1, r4
    adda:	9803      	ldr	r0, [sp, #12]
    addc:	f025 ff5c 	bl	30c98 <quorem>
    ade0:	9b08      	ldr	r3, [sp, #32]
    ade2:	f100 0930 	add.w	r9, r0, #48	; 0x30
    ade6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ade8:	f807 9b01 	strb.w	r9, [r7], #1
    adec:	1afb      	subs	r3, r7, r3
    adee:	429a      	cmp	r2, r3
    adf0:	f340 80cb 	ble.w	af8a <_dtoa_r+0xbfa>
    adf4:	2300      	movs	r3, #0
    adf6:	220a      	movs	r2, #10
    adf8:	9903      	ldr	r1, [sp, #12]
    adfa:	4658      	mov	r0, fp
    adfc:	f01e fa1e 	bl	2923c <__multadd>
    ae00:	9003      	str	r0, [sp, #12]
    ae02:	e7e9      	b.n	add8 <_dtoa_r+0xa48>
    ae04:	692a      	ldr	r2, [r5, #16]
    ae06:	f105 010c 	add.w	r1, r5, #12
    ae0a:	300c      	adds	r0, #12
    ae0c:	3202      	adds	r2, #2
    ae0e:	0092      	lsls	r2, r2, #2
    ae10:	f025 fd17 	bl	30842 <memcpy>
    ae14:	2201      	movs	r2, #1
    ae16:	4639      	mov	r1, r7
    ae18:	4658      	mov	r0, fp
    ae1a:	f01e fbbb 	bl	29594 <__lshift>
    ae1e:	9b08      	ldr	r3, [sp, #32]
    ae20:	46a8      	mov	r8, r5
    ae22:	4605      	mov	r5, r0
    ae24:	f103 0a01 	add.w	sl, r3, #1
    ae28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ae2c:	4413      	add	r3, r2
    ae2e:	930a      	str	r3, [sp, #40]	; 0x28
    ae30:	9b04      	ldr	r3, [sp, #16]
    ae32:	f003 0301 	and.w	r3, r3, #1
    ae36:	930b      	str	r3, [sp, #44]	; 0x2c
    ae38:	f10a 33ff 	add.w	r3, sl, #4294967295
    ae3c:	4621      	mov	r1, r4
    ae3e:	9803      	ldr	r0, [sp, #12]
    ae40:	9306      	str	r3, [sp, #24]
    ae42:	f025 ff29 	bl	30c98 <quorem>
    ae46:	4641      	mov	r1, r8
    ae48:	9009      	str	r0, [sp, #36]	; 0x24
    ae4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    ae4e:	9803      	ldr	r0, [sp, #12]
    ae50:	f026 f937 	bl	310c2 <__mcmp>
    ae54:	462a      	mov	r2, r5
    ae56:	4621      	mov	r1, r4
    ae58:	4607      	mov	r7, r0
    ae5a:	4658      	mov	r0, fp
    ae5c:	f01e fc06 	bl	2966c <__mdiff>
    ae60:	68c2      	ldr	r2, [r0, #12]
    ae62:	4601      	mov	r1, r0
    ae64:	b302      	cbz	r2, aea8 <_dtoa_r+0xb18>
    ae66:	4658      	mov	r0, fp
    ae68:	f01e f9c6 	bl	291f8 <_Bfree>
    ae6c:	2f00      	cmp	r7, #0
    ae6e:	da3a      	bge.n	aee6 <_dtoa_r+0xb56>
    ae70:	2201      	movs	r2, #1
    ae72:	9903      	ldr	r1, [sp, #12]
    ae74:	4658      	mov	r0, fp
    ae76:	f01e fb8d 	bl	29594 <__lshift>
    ae7a:	4621      	mov	r1, r4
    ae7c:	9003      	str	r0, [sp, #12]
    ae7e:	f026 f920 	bl	310c2 <__mcmp>
    ae82:	2800      	cmp	r0, #0
    ae84:	dc03      	bgt.n	ae8e <_dtoa_r+0xafe>
    ae86:	d129      	bne.n	aedc <_dtoa_r+0xb4c>
    ae88:	f019 0f01 	tst.w	r9, #1
    ae8c:	d026      	beq.n	aedc <_dtoa_r+0xb4c>
    ae8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    ae92:	d11d      	bne.n	aed0 <_dtoa_r+0xb40>
    ae94:	e032      	b.n	aefc <_dtoa_r+0xb6c>
    ae96:	4628      	mov	r0, r5
    ae98:	e7c1      	b.n	ae1e <_dtoa_r+0xa8e>
    ae9a:	bf00      	nop
    ae9c:	00031e78 	.word	0x00031e78
    aea0:	40140000 	.word	0x40140000
    aea4:	40240000 	.word	0x40240000
    aea8:	900e      	str	r0, [sp, #56]	; 0x38
    aeaa:	9803      	ldr	r0, [sp, #12]
    aeac:	f026 f909 	bl	310c2 <__mcmp>
    aeb0:	990e      	ldr	r1, [sp, #56]	; 0x38
    aeb2:	900c      	str	r0, [sp, #48]	; 0x30
    aeb4:	4658      	mov	r0, fp
    aeb6:	f01e f99f 	bl	291f8 <_Bfree>
    aeba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aebc:	bb5a      	cbnz	r2, af16 <_dtoa_r+0xb86>
    aebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aec0:	b953      	cbnz	r3, aed8 <_dtoa_r+0xb48>
    aec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aec4:	b943      	cbnz	r3, aed8 <_dtoa_r+0xb48>
    aec6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    aeca:	d017      	beq.n	aefc <_dtoa_r+0xb6c>
    aecc:	2f00      	cmp	r7, #0
    aece:	dd05      	ble.n	aedc <_dtoa_r+0xb4c>
    aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aed2:	f103 0931 	add.w	r9, r3, #49	; 0x31
    aed6:	e001      	b.n	aedc <_dtoa_r+0xb4c>
    aed8:	2f00      	cmp	r7, #0
    aeda:	da2a      	bge.n	af32 <_dtoa_r+0xba2>
    aedc:	f8dd a018 	ldr.w	sl, [sp, #24]
    aee0:	f80a 9b01 	strb.w	r9, [sl], #1
    aee4:	e56e      	b.n	a9c4 <_dtoa_r+0x634>
    aee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aee8:	433b      	orrs	r3, r7
    aeea:	d104      	bne.n	aef6 <_dtoa_r+0xb66>
    aeec:	9b04      	ldr	r3, [sp, #16]
    aeee:	f003 0301 	and.w	r3, r3, #1
    aef2:	2b00      	cmp	r3, #0
    aef4:	d0bc      	beq.n	ae70 <_dtoa_r+0xae0>
    aef6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    aefa:	d136      	bne.n	af6a <_dtoa_r+0xbda>
    aefc:	9f06      	ldr	r7, [sp, #24]
    aefe:	2339      	movs	r3, #57	; 0x39
    af00:	f807 3b01 	strb.w	r3, [r7], #1
    af04:	46ba      	mov	sl, r7
    af06:	3f01      	subs	r7, #1
    af08:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    af0c:	2b39      	cmp	r3, #57	; 0x39
    af0e:	d05a      	beq.n	afc6 <_dtoa_r+0xc36>
    af10:	3301      	adds	r3, #1
    af12:	703b      	strb	r3, [r7, #0]
    af14:	e556      	b.n	a9c4 <_dtoa_r+0x634>
    af16:	2f00      	cmp	r7, #0
    af18:	db06      	blt.n	af28 <_dtoa_r+0xb98>
    af1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    af1c:	433b      	orrs	r3, r7
    af1e:	d106      	bne.n	af2e <_dtoa_r+0xb9e>
    af20:	9b04      	ldr	r3, [sp, #16]
    af22:	f003 0301 	and.w	r3, r3, #1
    af26:	b913      	cbnz	r3, af2e <_dtoa_r+0xb9e>
    af28:	2a00      	cmp	r2, #0
    af2a:	dca1      	bgt.n	ae70 <_dtoa_r+0xae0>
    af2c:	e7d6      	b.n	aedc <_dtoa_r+0xb4c>
    af2e:	2a00      	cmp	r2, #0
    af30:	dce1      	bgt.n	aef6 <_dtoa_r+0xb66>
    af32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af34:	4657      	mov	r7, sl
    af36:	f80a 9c01 	strb.w	r9, [sl, #-1]
    af3a:	4553      	cmp	r3, sl
    af3c:	d02e      	beq.n	af9c <_dtoa_r+0xc0c>
    af3e:	2300      	movs	r3, #0
    af40:	220a      	movs	r2, #10
    af42:	9903      	ldr	r1, [sp, #12]
    af44:	4658      	mov	r0, fp
    af46:	f01e f979 	bl	2923c <__multadd>
    af4a:	45a8      	cmp	r8, r5
    af4c:	9003      	str	r0, [sp, #12]
    af4e:	f04f 0300 	mov.w	r3, #0
    af52:	f04f 020a 	mov.w	r2, #10
    af56:	4641      	mov	r1, r8
    af58:	4658      	mov	r0, fp
    af5a:	d10b      	bne.n	af74 <_dtoa_r+0xbe4>
    af5c:	f01e f96e 	bl	2923c <__multadd>
    af60:	4680      	mov	r8, r0
    af62:	4605      	mov	r5, r0
    af64:	f10a 0a01 	add.w	sl, sl, #1
    af68:	e766      	b.n	ae38 <_dtoa_r+0xaa8>
    af6a:	f8dd a018 	ldr.w	sl, [sp, #24]
    af6e:	f109 0901 	add.w	r9, r9, #1
    af72:	e7b5      	b.n	aee0 <_dtoa_r+0xb50>
    af74:	f01e f962 	bl	2923c <__multadd>
    af78:	4629      	mov	r1, r5
    af7a:	4680      	mov	r8, r0
    af7c:	2300      	movs	r3, #0
    af7e:	220a      	movs	r2, #10
    af80:	4658      	mov	r0, fp
    af82:	f01e f95b 	bl	2923c <__multadd>
    af86:	4605      	mov	r5, r0
    af88:	e7ec      	b.n	af64 <_dtoa_r+0xbd4>
    af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af8c:	f04f 0800 	mov.w	r8, #0
    af90:	2b00      	cmp	r3, #0
    af92:	bfcc      	ite	gt
    af94:	461f      	movgt	r7, r3
    af96:	2701      	movle	r7, #1
    af98:	9b08      	ldr	r3, [sp, #32]
    af9a:	441f      	add	r7, r3
    af9c:	2201      	movs	r2, #1
    af9e:	9903      	ldr	r1, [sp, #12]
    afa0:	4658      	mov	r0, fp
    afa2:	f01e faf7 	bl	29594 <__lshift>
    afa6:	4621      	mov	r1, r4
    afa8:	9003      	str	r0, [sp, #12]
    afaa:	f026 f88a 	bl	310c2 <__mcmp>
    afae:	2800      	cmp	r0, #0
    afb0:	dca8      	bgt.n	af04 <_dtoa_r+0xb74>
    afb2:	d102      	bne.n	afba <_dtoa_r+0xc2a>
    afb4:	f019 0f01 	tst.w	r9, #1
    afb8:	d1a4      	bne.n	af04 <_dtoa_r+0xb74>
    afba:	46ba      	mov	sl, r7
    afbc:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    afc0:	2b30      	cmp	r3, #48	; 0x30
    afc2:	d0fa      	beq.n	afba <_dtoa_r+0xc2a>
    afc4:	e4fe      	b.n	a9c4 <_dtoa_r+0x634>
    afc6:	9b08      	ldr	r3, [sp, #32]
    afc8:	42bb      	cmp	r3, r7
    afca:	d19b      	bne.n	af04 <_dtoa_r+0xb74>
    afcc:	2331      	movs	r3, #49	; 0x31
    afce:	9a08      	ldr	r2, [sp, #32]
    afd0:	3601      	adds	r6, #1
    afd2:	7013      	strb	r3, [r2, #0]
    afd4:	e4f6      	b.n	a9c4 <_dtoa_r+0x634>
    afd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    afd8:	2b00      	cmp	r3, #0
    afda:	f47f aa20 	bne.w	a41e <_dtoa_r+0x8e>
    afde:	4b01      	ldr	r3, [pc, #4]	; (afe4 <_dtoa_r+0xc54>)
    afe0:	f7ff ba3f 	b.w	a462 <_dtoa_r+0xd2>
    afe4:	0003c130 	.word	0x0003c130

0000afe8 <data_print>:
}

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
    afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buf[len + 1];
    afea:	f102 0308 	add.w	r3, r2, #8
    afee:	f023 0307 	bic.w	r3, r3, #7
{
    aff2:	af00      	add	r7, sp, #0
	char buf[len + 1];
    aff4:	ebad 0d03 	sub.w	sp, sp, r3
{
    aff8:	4605      	mov	r5, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    affa:	4668      	mov	r0, sp
    affc:	4614      	mov	r4, r2
    affe:	f025 fc20 	bl	30842 <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
    b002:	2300      	movs	r3, #0
	char buf[len + 1];
    b004:	466e      	mov	r6, sp
	buf[len] = 0;
    b006:	f80d 3004 	strb.w	r3, [sp, r4]
	LOG_INF("%s%s", (char *)prefix, (char *)buf);
    b00a:	b08a      	sub	sp, #40	; 0x28
    b00c:	466a      	mov	r2, sp
    b00e:	4b09      	ldr	r3, [pc, #36]	; (b034 <data_print+0x4c>)
    b010:	6216      	str	r6, [r2, #32]
    b012:	6153      	str	r3, [r2, #20]
    b014:	4b08      	ldr	r3, [pc, #32]	; (b038 <data_print+0x50>)
    b016:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
    b01a:	e9c2 3506 	strd	r3, r5, [r2, #24]
    b01e:	4b07      	ldr	r3, [pc, #28]	; (b03c <data_print+0x54>)
    b020:	4807      	ldr	r0, [pc, #28]	; (b040 <data_print+0x58>)
    b022:	6253      	str	r3, [r2, #36]	; 0x24
    b024:	4b07      	ldr	r3, [pc, #28]	; (b044 <data_print+0x5c>)
    b026:	f842 3f10 	str.w	r3, [r2, #16]!
    b02a:	f01f fbed 	bl	2a808 <z_log_msg_static_create.constprop.0>
}
    b02e:	46bd      	mov	sp, r7
    b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b032:	bf00      	nop
    b034:	00032bc4 	.word	0x00032bc4
    b038:	00032f9d 	.word	0x00032f9d
    b03c:	04020301 	.word	0x04020301
    b040:	00031c24 	.word	0x00031c24
    b044:	02000005 	.word	0x02000005

0000b048 <mqtt_evt_handler>:
}
/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
    b048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b04c:	b0b2      	sub	sp, #200	; 0xc8
	int err;

	switch (evt->type) {
    b04e:	780b      	ldrb	r3, [r1, #0]
{
    b050:	4680      	mov	r8, r0
    b052:	460c      	mov	r4, r1
    b054:	af16      	add	r7, sp, #88	; 0x58
	switch (evt->type) {
    b056:	2b09      	cmp	r3, #9
    b058:	f200 81e1 	bhi.w	b41e <mqtt_evt_handler+0x3d6>
    b05c:	e8df f013 	tbh	[pc, r3, lsl #1]
    b060:	004d000a 	.word	0x004d000a
    b064:	01ae0057 	.word	0x01ae0057
    b068:	01df01df 	.word	0x01df01df
    b06c:	01c401df 	.word	0x01c401df
    b070:	01d201df 	.word	0x01d201df
	case MQTT_EVT_CONNACK:
	/* STEP 5 - Subscribe to the topic CONFIG_MQTT_SUB_TOPIC when we have a successful connection */
		if (evt->result != 0) {
    b074:	69c9      	ldr	r1, [r1, #28]
			LOG_ERR("MQTT connect failed: %d", evt->result);
    b076:	466c      	mov	r4, sp
    b078:	4bb6      	ldr	r3, [pc, #728]	; (b354 <mqtt_evt_handler+0x30c>)
		if (evt->result != 0) {
    b07a:	b149      	cbz	r1, b090 <mqtt_evt_handler+0x48>
			LOG_ERR("MQTT connect failed: %d", evt->result);
    b07c:	b088      	sub	sp, #32
    b07e:	aa16      	add	r2, sp, #88	; 0x58
    b080:	48b5      	ldr	r0, [pc, #724]	; (b358 <mqtt_evt_handler+0x310>)
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
		break;

	case MQTT_EVT_SUBACK:
		if (evt->result != 0) {
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
    b082:	e9c2 0305 	strd	r0, r3, [r2, #20]
    b086:	61d1      	str	r1, [r2, #28]
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
		break;

	case MQTT_EVT_PINGRESP:
		if (evt->result != 0) {
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b088:	2304      	movs	r3, #4
    b08a:	f842 3f10 	str.w	r3, [r2, #16]!
    b08e:	e15e      	b.n	b34e <mqtt_evt_handler+0x306>
		LOG_INF("MQTT client connected");
    b090:	b088      	sub	sp, #32
    b092:	aa16      	add	r2, sp, #88	; 0x58
    b094:	49b1      	ldr	r1, [pc, #708]	; (b35c <mqtt_evt_handler+0x314>)
    b096:	48b2      	ldr	r0, [pc, #712]	; (b360 <mqtt_evt_handler+0x318>)
    b098:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b09c:	2303      	movs	r3, #3
    b09e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b0a2:	f842 3f10 	str.w	r3, [r2, #16]!
    b0a6:	f01f fbaf 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b0aa:	46a5      	mov	sp, r4
	struct mqtt_topic subscribe_topic = {
    b0ac:	4aad      	ldr	r2, [pc, #692]	; (b364 <mqtt_evt_handler+0x31c>)
    b0ae:	f107 0308 	add.w	r3, r7, #8
    b0b2:	ca07      	ldmia	r2, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b0b4:	603b      	str	r3, [r7, #0]
	struct mqtt_topic subscribe_topic = {
    b0b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b0ba:	4bab      	ldr	r3, [pc, #684]	; (b368 <mqtt_evt_handler+0x320>)
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b0bc:	b08a      	sub	sp, #40	; 0x28
	const struct mqtt_subscription_list subscription_list = {
    b0be:	607b      	str	r3, [r7, #4]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b0c0:	aa16      	add	r2, sp, #88	; 0x58
    b0c2:	4baa      	ldr	r3, [pc, #680]	; (b36c <mqtt_evt_handler+0x324>)
    b0c4:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    b0c8:	6153      	str	r3, [r2, #20]
    b0ca:	4ba9      	ldr	r3, [pc, #676]	; (b370 <mqtt_evt_handler+0x328>)
    b0cc:	48a4      	ldr	r0, [pc, #656]	; (b360 <mqtt_evt_handler+0x318>)
    b0ce:	6193      	str	r3, [r2, #24]
    b0d0:	4ba8      	ldr	r3, [pc, #672]	; (b374 <mqtt_evt_handler+0x32c>)
    b0d2:	61d3      	str	r3, [r2, #28]
    b0d4:	2321      	movs	r3, #33	; 0x21
    b0d6:	6213      	str	r3, [r2, #32]
    b0d8:	f240 3301 	movw	r3, #769	; 0x301
    b0dc:	8493      	strh	r3, [r2, #36]	; 0x24
    b0de:	4ba6      	ldr	r3, [pc, #664]	; (b378 <mqtt_evt_handler+0x330>)
    b0e0:	f842 3f10 	str.w	r3, [r2, #16]!
    b0e4:	f01f fb90 	bl	2a808 <z_log_msg_static_create.constprop.0>
	return mqtt_subscribe(c, &subscription_list);
    b0e8:	4639      	mov	r1, r7
    b0ea:	46a5      	mov	sp, r4
    b0ec:	4640      	mov	r0, r8
    b0ee:	f022 ffa9 	bl	2e044 <mqtt_subscribe>

	default:
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
		break;
	}
}
    b0f2:	3770      	adds	r7, #112	; 0x70
    b0f4:	46bd      	mov	sp, r7
    b0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_INF("MQTT client disconnected: %d", evt->result);
    b0fa:	466c      	mov	r4, sp
    b0fc:	b088      	sub	sp, #32
    b0fe:	69cb      	ldr	r3, [r1, #28]
    b100:	aa16      	add	r2, sp, #88	; 0x58
    b102:	499e      	ldr	r1, [pc, #632]	; (b37c <mqtt_evt_handler+0x334>)
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b104:	6151      	str	r1, [r2, #20]
    b106:	4993      	ldr	r1, [pc, #588]	; (b354 <mqtt_evt_handler+0x30c>)
	switch (evt->type) {
    b108:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b10c:	e166      	b.n	b3dc <mqtt_evt_handler+0x394>
		LOG_INF("MQTT PUBLISH result=%d len=%d",
    b10e:	466d      	mov	r5, sp
    b110:	b08a      	sub	sp, #40	; 0x28
    b112:	69c9      	ldr	r1, [r1, #28]
    b114:	6963      	ldr	r3, [r4, #20]
    b116:	aa16      	add	r2, sp, #88	; 0x58
    b118:	6213      	str	r3, [r2, #32]
    b11a:	2305      	movs	r3, #5
    b11c:	4898      	ldr	r0, [pc, #608]	; (b380 <mqtt_evt_handler+0x338>)
    b11e:	4e8d      	ldr	r6, [pc, #564]	; (b354 <mqtt_evt_handler+0x30c>)
    b120:	6150      	str	r0, [r2, #20]
    b122:	e9c2 6106 	strd	r6, r1, [r2, #24]
    b126:	488e      	ldr	r0, [pc, #568]	; (b360 <mqtt_evt_handler+0x318>)
    b128:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    b12c:	f842 3f10 	str.w	r3, [r2, #16]!
    b130:	f01f fb6a 	bl	2a808 <z_log_msg_static_create.constprop.0>
		err = get_received_payload(c, p->message.payload.len);
    b134:	f8d4 9014 	ldr.w	r9, [r4, #20]
    b138:	46ad      	mov	sp, r5
	if (length > sizeof(payload_buf)) {
    b13a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    b13e:	d912      	bls.n	b166 <mqtt_evt_handler+0x11e>
		ret = mqtt_read_publish_payload_blocking(
    b140:	f8df a240 	ldr.w	sl, [pc, #576]	; b384 <mqtt_evt_handler+0x33c>
    b144:	4651      	mov	r1, sl
    b146:	4640      	mov	r0, r8
    b148:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
    b14c:	f023 f827 	bl	2e19e <mqtt_read_publish_payload_blocking>
		if (ret == 0) {
    b150:	1e05      	subs	r5, r0, #0
    b152:	d032      	beq.n	b1ba <mqtt_evt_handler+0x172>
		} else if (ret < 0) {
    b154:	db33      	blt.n	b1be <mqtt_evt_handler+0x176>
		length -= ret;
    b156:	eba9 0905 	sub.w	r9, r9, r5
	while (length > sizeof(payload_buf)) {
    b15a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    b15e:	d8f1      	bhi.n	b144 <mqtt_evt_handler+0xfc>
		err = -EMSGSIZE;
    b160:	f06f 0a79 	mvn.w	sl, #121	; 0x79
    b164:	e001      	b.n	b16a <mqtt_evt_handler+0x122>
	int err = 0;
    b166:	f04f 0a00 	mov.w	sl, #0
	ret = mqtt_readall_publish_payload(c, payload_buf, length);
    b16a:	464a      	mov	r2, r9
    b16c:	4640      	mov	r0, r8
    b16e:	4985      	ldr	r1, [pc, #532]	; (b384 <mqtt_evt_handler+0x33c>)
    b170:	f023 f818 	bl	2e1a4 <mqtt_readall_publish_payload>
	if (ret) {
    b174:	4605      	mov	r5, r0
    b176:	bb10      	cbnz	r0, b1be <mqtt_evt_handler+0x176>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b178:	7b23      	ldrb	r3, [r4, #12]
    b17a:	2b01      	cmp	r3, #1
    b17c:	d106      	bne.n	b18c <mqtt_evt_handler+0x144>
			const struct mqtt_puback_param ack = {
    b17e:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b180:	4640      	mov	r0, r8
			const struct mqtt_puback_param ack = {
    b182:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
    b184:	f107 0108 	add.w	r1, r7, #8
    b188:	f022 ff0e 	bl	2dfa8 <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b18c:	f1ba 0f00 	cmp.w	sl, #0
    b190:	d022      	beq.n	b1d8 <mqtt_evt_handler+0x190>
			LOG_ERR("Received payload (%d bytes) is larger than the payload buffer size (%d bytes).",
    b192:	6963      	ldr	r3, [r4, #20]
    b194:	466c      	mov	r4, sp
    b196:	b08a      	sub	sp, #40	; 0x28
    b198:	aa16      	add	r2, sp, #88	; 0x58
    b19a:	61d3      	str	r3, [r2, #28]
    b19c:	2380      	movs	r3, #128	; 0x80
    b19e:	497a      	ldr	r1, [pc, #488]	; (b388 <mqtt_evt_handler+0x340>)
    b1a0:	6213      	str	r3, [r2, #32]
    b1a2:	2305      	movs	r3, #5
    b1a4:	e9c2 1605 	strd	r1, r6, [r2, #20]
    b1a8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b1ac:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b1b0:	486b      	ldr	r0, [pc, #428]	; (b360 <mqtt_evt_handler+0x318>)
    b1b2:	f01f fb29 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b1b6:	46a5      	mov	sp, r4
    b1b8:	e79b      	b.n	b0f2 <mqtt_evt_handler+0xaa>
			return -EIO;
    b1ba:	f06f 0504 	mvn.w	r5, #4
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b1be:	7b23      	ldrb	r3, [r4, #12]
    b1c0:	2b01      	cmp	r3, #1
    b1c2:	d106      	bne.n	b1d2 <mqtt_evt_handler+0x18a>
			const struct mqtt_puback_param ack = {
    b1c4:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b1c6:	4640      	mov	r0, r8
			const struct mqtt_puback_param ack = {
    b1c8:	813b      	strh	r3, [r7, #8]
			mqtt_publish_qos1_ack(c, &ack);
    b1ca:	f107 0108 	add.w	r1, r7, #8
    b1ce:	f022 feeb 	bl	2dfa8 <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	f2c0 8088 	blt.w	b2e8 <mqtt_evt_handler+0x2a0>
			data_print("Received: ", payload_buf, p->message.payload.len);
    b1d8:	6962      	ldr	r2, [r4, #20]
    b1da:	496a      	ldr	r1, [pc, #424]	; (b384 <mqtt_evt_handler+0x33c>)
    b1dc:	486b      	ldr	r0, [pc, #428]	; (b38c <mqtt_evt_handler+0x344>)
    b1de:	f7ff ff03 	bl	afe8 <data_print>
			cJSON *json_payload = cJSON_Parse(payload_buf);
    b1e2:	4868      	ldr	r0, [pc, #416]	; (b384 <mqtt_evt_handler+0x33c>)
    b1e4:	f01f fb81 	bl	2a8ea <cJSON_Parse>
			if (!json_payload)
    b1e8:	4605      	mov	r5, r0
    b1ea:	b958      	cbnz	r0, b204 <mqtt_evt_handler+0x1bc>
				LOG_ERR("Failed to parse JSON payload");
    b1ec:	466c      	mov	r4, sp
    b1ee:	b088      	sub	sp, #32
    b1f0:	aa16      	add	r2, sp, #88	; 0x58
    b1f2:	4b67      	ldr	r3, [pc, #412]	; (b390 <mqtt_evt_handler+0x348>)
    b1f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b1f8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    b1fc:	2303      	movs	r3, #3
    b1fe:	f842 3f10 	str.w	r3, [r2, #16]!
    b202:	e7d5      	b.n	b1b0 <mqtt_evt_handler+0x168>
			cJSON *rqi = cJSON_GetObjectItem(json_payload, "rqi"); //Do I need case sensitive here? Check later.
    b204:	4963      	ldr	r1, [pc, #396]	; (b394 <mqtt_evt_handler+0x34c>)
    b206:	f01f fb74 	bl	2a8f2 <cJSON_GetObjectItem>
			if (rqi && cJSON_IsString(rqi) && (rqi->valuestring != NULL))
    b20a:	4680      	mov	r8, r0
    b20c:	2800      	cmp	r0, #0
    b20e:	d066      	beq.n	b2de <mqtt_evt_handler+0x296>
    b210:	f01f fb72 	bl	2a8f8 <cJSON_IsString>
    b214:	2800      	cmp	r0, #0
    b216:	d062      	beq.n	b2de <mqtt_evt_handler+0x296>
    b218:	f8d8 8010 	ldr.w	r8, [r8, #16]
    b21c:	f1b8 0f00 	cmp.w	r8, #0
    b220:	d05d      	beq.n	b2de <mqtt_evt_handler+0x296>
				if (strcmp(rqi->valuestring, "LED1ON") == 0)	//These are just test functions to make sure string parse worked. I'll get rid of it soon enough.
    b222:	4640      	mov	r0, r8
    b224:	495c      	ldr	r1, [pc, #368]	; (b398 <mqtt_evt_handler+0x350>)
    b226:	f7fd fff2 	bl	920e <strcmp>
    b22a:	4681      	mov	r9, r0
    b22c:	b9a8      	cbnz	r0, b25a <mqtt_evt_handler+0x212>
					LOG_INF("LED1ON");
    b22e:	466c      	mov	r4, sp
    b230:	b088      	sub	sp, #32
    b232:	aa16      	add	r2, sp, #88	; 0x58
    b234:	4b59      	ldr	r3, [pc, #356]	; (b39c <mqtt_evt_handler+0x354>)
    b236:	484a      	ldr	r0, [pc, #296]	; (b360 <mqtt_evt_handler+0x318>)
    b238:	e9c2 3605 	strd	r3, r6, [r2, #20]
    b23c:	2303      	movs	r3, #3
    b23e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b242:	f842 3f10 	str.w	r3, [r2, #16]!
    b246:	f01f fadf 	bl	2a808 <z_log_msg_static_create.constprop.0>
					dk_set_led_on(LED_CONTROL_OVER_MQTT);
    b24a:	4648      	mov	r0, r9
    b24c:	46a5      	mov	sp, r4
    b24e:	f023 ff9d 	bl	2f18c <dk_set_led_on>
			cJSON_Delete(json_payload);
    b252:	4628      	mov	r0, r5
    b254:	f001 fe52 	bl	cefc <cJSON_Delete>
    b258:	e74b      	b.n	b0f2 <mqtt_evt_handler+0xaa>
				else if (strcmp(rqi->valuestring, "LED1OFF") == 0)
    b25a:	4640      	mov	r0, r8
    b25c:	4950      	ldr	r1, [pc, #320]	; (b3a0 <mqtt_evt_handler+0x358>)
    b25e:	f7fd ffd6 	bl	920e <strcmp>
    b262:	4680      	mov	r8, r0
    b264:	b990      	cbnz	r0, b28c <mqtt_evt_handler+0x244>
					LOG_INF("LED1OFF");
    b266:	466c      	mov	r4, sp
    b268:	b088      	sub	sp, #32
    b26a:	aa16      	add	r2, sp, #88	; 0x58
    b26c:	4b4d      	ldr	r3, [pc, #308]	; (b3a4 <mqtt_evt_handler+0x35c>)
    b26e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b272:	e9c2 3605 	strd	r3, r6, [r2, #20]
    b276:	2303      	movs	r3, #3
    b278:	4839      	ldr	r0, [pc, #228]	; (b360 <mqtt_evt_handler+0x318>)
    b27a:	f842 3f10 	str.w	r3, [r2, #16]!
    b27e:	f01f fac3 	bl	2a808 <z_log_msg_static_create.constprop.0>
					dk_set_led_off(LED_CONTROL_OVER_MQTT);
    b282:	4640      	mov	r0, r8
    b284:	46a5      	mov	sp, r4
    b286:	f023 ff84 	bl	2f192 <dk_set_led_off>
    b28a:	e7e2      	b.n	b252 <mqtt_evt_handler+0x20a>
					packet.type = downlink_TEXT;
    b28c:	2300      	movs	r3, #0
					packet.length = p->message.payload.len;
    b28e:	6962      	ldr	r2, [r4, #20]
					packet.type = downlink_TEXT;
    b290:	727b      	strb	r3, [r7, #9]
					if (p->message.payload.len <= sizeof(packet.data)) {
    b292:	2a64      	cmp	r2, #100	; 0x64
					packet.length = p->message.payload.len;
    b294:	723a      	strb	r2, [r7, #8]
					packet.destination = DESTINATION_ESP32;
    b296:	72bb      	strb	r3, [r7, #10]
					if (p->message.payload.len <= sizeof(packet.data)) {
    b298:	d811      	bhi.n	b2be <mqtt_evt_handler+0x276>
						memcpy(packet.data, payload_buf, p->message.payload.len);
    b29a:	493a      	ldr	r1, [pc, #232]	; (b384 <mqtt_evt_handler+0x33c>)
    b29c:	f107 000b 	add.w	r0, r7, #11
    b2a0:	f025 facf 	bl	30842 <memcpy>
    b2a4:	f107 0408 	add.w	r4, r7, #8
						downlink_aggregator_put(packet);
    b2a8:	f107 0118 	add.w	r1, r7, #24
    b2ac:	2257      	movs	r2, #87	; 0x57
    b2ae:	4668      	mov	r0, sp
    b2b0:	f025 fac7 	bl	30842 <memcpy>
    b2b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    b2b8:	f001 fc62 	bl	cb80 <downlink_aggregator_put>
    b2bc:	e7c9      	b.n	b252 <mqtt_evt_handler+0x20a>
						LOG_ERR("Payload size exceeds data packet buffer size");
    b2be:	466c      	mov	r4, sp
    b2c0:	b088      	sub	sp, #32
    b2c2:	aa16      	add	r2, sp, #88	; 0x58
    b2c4:	4b38      	ldr	r3, [pc, #224]	; (b3a8 <mqtt_evt_handler+0x360>)
				LOG_ERR("Failed to extract rqi");
    b2c6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    b2ca:	2303      	movs	r3, #3
    b2cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b2d0:	4823      	ldr	r0, [pc, #140]	; (b360 <mqtt_evt_handler+0x318>)
    b2d2:	f842 3f10 	str.w	r3, [r2, #16]!
    b2d6:	f01f fa97 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b2da:	46a5      	mov	sp, r4
    b2dc:	e7b9      	b.n	b252 <mqtt_evt_handler+0x20a>
    b2de:	466c      	mov	r4, sp
    b2e0:	b088      	sub	sp, #32
    b2e2:	aa16      	add	r2, sp, #88	; 0x58
    b2e4:	4b31      	ldr	r3, [pc, #196]	; (b3ac <mqtt_evt_handler+0x364>)
    b2e6:	e7ee      	b.n	b2c6 <mqtt_evt_handler+0x27e>
		} else if (err == -EMSGSIZE) {
    b2e8:	f115 0f7a 	cmn.w	r5, #122	; 0x7a
    b2ec:	f43f af51 	beq.w	b192 <mqtt_evt_handler+0x14a>
			LOG_ERR("get_received_payload failed: %d", err);
    b2f0:	466c      	mov	r4, sp
    b2f2:	b088      	sub	sp, #32
    b2f4:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    b2f8:	f8ca 501c 	str.w	r5, [sl, #28]
    b2fc:	46d1      	mov	r9, sl
    b2fe:	2504      	movs	r5, #4
    b300:	4b2b      	ldr	r3, [pc, #172]	; (b3b0 <mqtt_evt_handler+0x368>)
    b302:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b306:	e9ca 3605 	strd	r3, r6, [sl, #20]
    b30a:	f849 5f10 	str.w	r5, [r9, #16]!
    b30e:	464a      	mov	r2, r9
    b310:	4813      	ldr	r0, [pc, #76]	; (b360 <mqtt_evt_handler+0x318>)
    b312:	f01f fa79 	bl	2a808 <z_log_msg_static_create.constprop.0>
			LOG_INF("Disconnecting MQTT client...");
    b316:	4b27      	ldr	r3, [pc, #156]	; (b3b4 <mqtt_evt_handler+0x36c>)
    b318:	4811      	ldr	r0, [pc, #68]	; (b360 <mqtt_evt_handler+0x318>)
    b31a:	e9ca 3605 	strd	r3, r6, [sl, #20]
    b31e:	2303      	movs	r3, #3
    b320:	464a      	mov	r2, r9
    b322:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b326:	f8ca 3010 	str.w	r3, [sl, #16]
    b32a:	f01f fa6d 	bl	2a808 <z_log_msg_static_create.constprop.0>
			err = mqtt_disconnect(c);
    b32e:	4640      	mov	r0, r8
    b330:	46a5      	mov	sp, r4
    b332:	f022 fe5f 	bl	2dff4 <mqtt_disconnect>
			if (err) {
    b336:	2800      	cmp	r0, #0
    b338:	f43f aedb 	beq.w	b0f2 <mqtt_evt_handler+0xaa>
				LOG_ERR("Could not disconnect: %d", err);
    b33c:	b088      	sub	sp, #32
    b33e:	4652      	mov	r2, sl
    b340:	4b1d      	ldr	r3, [pc, #116]	; (b3b8 <mqtt_evt_handler+0x370>)
    b342:	f8ca 001c 	str.w	r0, [sl, #28]
    b346:	e9ca 3605 	strd	r3, r6, [sl, #20]
    b34a:	f842 5f10 	str.w	r5, [r2, #16]!
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b34e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b352:	e72d      	b.n	b1b0 <mqtt_evt_handler+0x168>
    b354:	00032f8c 	.word	0x00032f8c
    b358:	00032bcd 	.word	0x00032bcd
    b35c:	00032be9 	.word	0x00032be9
    b360:	00031c24 	.word	0x00031c24
    b364:	00031d10 	.word	0x00031d10
    b368:	04d20001 	.word	0x04d20001
    b36c:	00032c03 	.word	0x00032c03
    b370:	00032f82 	.word	0x00032f82
    b374:	00032c21 	.word	0x00032c21
    b378:	01000005 	.word	0x01000005
    b37c:	00032c43 	.word	0x00032c43
    b380:	00032c64 	.word	0x00032c64
    b384:	2000ebf4 	.word	0x2000ebf4
    b388:	00032c86 	.word	0x00032c86
    b38c:	00032cd9 	.word	0x00032cd9
    b390:	00032ce4 	.word	0x00032ce4
    b394:	00032d63 	.word	0x00032d63
    b398:	00032d09 	.word	0x00032d09
    b39c:	00032d05 	.word	0x00032d05
    b3a0:	00032d14 	.word	0x00032d14
    b3a4:	00032d10 	.word	0x00032d10
    b3a8:	00032d1c 	.word	0x00032d1c
    b3ac:	00032d4d 	.word	0x00032d4d
    b3b0:	00032d67 	.word	0x00032d67
    b3b4:	00032d8b 	.word	0x00032d8b
    b3b8:	00032dac 	.word	0x00032dac
		if (evt->result != 0) {
    b3bc:	69c9      	ldr	r1, [r1, #28]
    b3be:	4b1a      	ldr	r3, [pc, #104]	; (b428 <mqtt_evt_handler+0x3e0>)
    b3c0:	b121      	cbz	r1, b3cc <mqtt_evt_handler+0x384>
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
    b3c2:	466c      	mov	r4, sp
    b3c4:	b088      	sub	sp, #32
    b3c6:	aa16      	add	r2, sp, #88	; 0x58
    b3c8:	4818      	ldr	r0, [pc, #96]	; (b42c <mqtt_evt_handler+0x3e4>)
    b3ca:	e65a      	b.n	b082 <mqtt_evt_handler+0x3a>
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
    b3cc:	88a1      	ldrh	r1, [r4, #4]
    b3ce:	466c      	mov	r4, sp
    b3d0:	b088      	sub	sp, #32
    b3d2:	aa16      	add	r2, sp, #88	; 0x58
    b3d4:	4816      	ldr	r0, [pc, #88]	; (b430 <mqtt_evt_handler+0x3e8>)
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
    b3d6:	e9c2 0305 	strd	r0, r3, [r2, #20]
    b3da:	61d1      	str	r1, [r2, #28]
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b3dc:	2304      	movs	r3, #4
    b3de:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b3e2:	f842 3f10 	str.w	r3, [r2, #16]!
    b3e6:	e6e3      	b.n	b1b0 <mqtt_evt_handler+0x168>
		if (evt->result != 0) {
    b3e8:	69c9      	ldr	r1, [r1, #28]
    b3ea:	4b0f      	ldr	r3, [pc, #60]	; (b428 <mqtt_evt_handler+0x3e0>)
    b3ec:	b121      	cbz	r1, b3f8 <mqtt_evt_handler+0x3b0>
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
    b3ee:	466c      	mov	r4, sp
    b3f0:	b088      	sub	sp, #32
    b3f2:	aa16      	add	r2, sp, #88	; 0x58
    b3f4:	480f      	ldr	r0, [pc, #60]	; (b434 <mqtt_evt_handler+0x3ec>)
    b3f6:	e644      	b.n	b082 <mqtt_evt_handler+0x3a>
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
    b3f8:	88a1      	ldrh	r1, [r4, #4]
    b3fa:	466c      	mov	r4, sp
    b3fc:	b088      	sub	sp, #32
    b3fe:	aa16      	add	r2, sp, #88	; 0x58
    b400:	480d      	ldr	r0, [pc, #52]	; (b438 <mqtt_evt_handler+0x3f0>)
    b402:	e7e8      	b.n	b3d6 <mqtt_evt_handler+0x38e>
		if (evt->result != 0) {
    b404:	69cb      	ldr	r3, [r1, #28]
    b406:	2b00      	cmp	r3, #0
    b408:	f43f ae73 	beq.w	b0f2 <mqtt_evt_handler+0xaa>
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b40c:	466c      	mov	r4, sp
    b40e:	b088      	sub	sp, #32
    b410:	aa16      	add	r2, sp, #88	; 0x58
    b412:	490a      	ldr	r1, [pc, #40]	; (b43c <mqtt_evt_handler+0x3f4>)
    b414:	6151      	str	r1, [r2, #20]
    b416:	4904      	ldr	r1, [pc, #16]	; (b428 <mqtt_evt_handler+0x3e0>)
    b418:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b41c:	e634      	b.n	b088 <mqtt_evt_handler+0x40>
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b41e:	466c      	mov	r4, sp
    b420:	b088      	sub	sp, #32
    b422:	aa16      	add	r2, sp, #88	; 0x58
    b424:	4906      	ldr	r1, [pc, #24]	; (b440 <mqtt_evt_handler+0x3f8>)
    b426:	e66d      	b.n	b104 <mqtt_evt_handler+0xbc>
    b428:	00032f8c 	.word	0x00032f8c
    b42c:	00032dc9 	.word	0x00032dc9
    b430:	00032de3 	.word	0x00032de3
    b434:	00032dfc 	.word	0x00032dfc
    b438:	00032e16 	.word	0x00032e16
    b43c:	00032e2f 	.word	0x00032e2f
    b440:	00032e4b 	.word	0x00032e4b

0000b444 <data_publish>:
{
    b444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b448:	f04f 0821 	mov.w	r8, #33	; 0x21
{
    b44c:	b087      	sub	sp, #28
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b44e:	f8df 906c 	ldr.w	r9, [pc, #108]	; b4bc <data_publish+0x78>
{
    b452:	af00      	add	r7, sp, #0
    b454:	4606      	mov	r6, r0
    b456:	4614      	mov	r4, r2
    b458:	461d      	mov	r5, r3
	param.message.payload.len = len;
    b45a:	e9c7 2303 	strd	r2, r3, [r7, #12]
	param.message.topic.qos = qos;
    b45e:	7239      	strb	r1, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b460:	f8c7 9000 	str.w	r9, [r7]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b464:	f8c7 8004 	str.w	r8, [r7, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    b468:	f007 f968 	bl	1273c <z_impl_sys_rand32_get>
	param.dup_flag = 0;
    b46c:	7dbb      	ldrb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b46e:	462a      	mov	r2, r5
    b470:	4621      	mov	r1, r4
	param.message_id = sys_rand32_get();
    b472:	82b8      	strh	r0, [r7, #20]
	param.dup_flag = 0;
    b474:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
    b478:	4811      	ldr	r0, [pc, #68]	; (b4c0 <data_publish+0x7c>)
	LOG_INF("to topic: %s len: %u",
    b47a:	466c      	mov	r4, sp
	param.dup_flag = 0;
    b47c:	75bb      	strb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b47e:	f7ff fdb3 	bl	afe8 <data_print>
	LOG_INF("to topic: %s len: %u",
    b482:	b08a      	sub	sp, #40	; 0x28
    b484:	466a      	mov	r2, sp
    b486:	4b0f      	ldr	r3, [pc, #60]	; (b4c4 <data_publish+0x80>)
    b488:	f8c2 8020 	str.w	r8, [r2, #32]
    b48c:	6153      	str	r3, [r2, #20]
    b48e:	4b0e      	ldr	r3, [pc, #56]	; (b4c8 <data_publish+0x84>)
    b490:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    b494:	e9c2 3906 	strd	r3, r9, [r2, #24]
    b498:	f240 3301 	movw	r3, #769	; 0x301
    b49c:	8493      	strh	r3, [r2, #36]	; 0x24
    b49e:	4b0b      	ldr	r3, [pc, #44]	; (b4cc <data_publish+0x88>)
    b4a0:	480b      	ldr	r0, [pc, #44]	; (b4d0 <data_publish+0x8c>)
    b4a2:	f842 3f10 	str.w	r3, [r2, #16]!
    b4a6:	f01f f9af 	bl	2a808 <z_log_msg_static_create.constprop.0>
	return mqtt_publish(c, &param);
    b4aa:	4639      	mov	r1, r7
    b4ac:	46a5      	mov	sp, r4
    b4ae:	4630      	mov	r0, r6
    b4b0:	f022 fd36 	bl	2df20 <mqtt_publish>
}
    b4b4:	371c      	adds	r7, #28
    b4b6:	46bd      	mov	sp, r7
    b4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b4bc:	00032c21 	.word	0x00032c21
    b4c0:	00032e6d 	.word	0x00032e6d
    b4c4:	00032e7a 	.word	0x00032e7a
    b4c8:	00032fa8 	.word	0x00032fa8
    b4cc:	01000005 	.word	0x01000005
    b4d0:	00031c24 	.word	0x00031c24

0000b4d4 <client_init>:

/**@brief Initialize the MQTT client structure
 */
/* STEP 3 - Define the function client_init() to initialize the MQTT client instance.  */
int client_init(struct mqtt_client *client)
{
    b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4d8:	b09d      	sub	sp, #116	; 0x74
    b4da:	af02      	add	r7, sp, #8
	struct addrinfo hints = {
    b4dc:	f107 0818 	add.w	r8, r7, #24
{
    b4e0:	4604      	mov	r4, r0
	int err;
	/* Initializes the client instance. */
	mqtt_client_init(client);
    b4e2:	f022 fcc4 	bl	2de6e <mqtt_client_init>
	struct addrinfo hints = {
    b4e6:	2250      	movs	r2, #80	; 0x50
    b4e8:	2100      	movs	r1, #0
    b4ea:	4640      	mov	r0, r8
    b4ec:	f025 f9c9 	bl	30882 <memset>
    b4f0:	2301      	movs	r3, #1
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    b4f2:	4642      	mov	r2, r8
    b4f4:	e9c7 3308 	strd	r3, r3, [r7, #32]
    b4f8:	2100      	movs	r1, #0
    b4fa:	4857      	ldr	r0, [pc, #348]	; (b658 <client_init+0x184>)
    b4fc:	1d3b      	adds	r3, r7, #4
    b4fe:	f01f fe12 	bl	2b126 <zsock_getaddrinfo>
	if (err) {
    b502:	4605      	mov	r5, r0
    b504:	b328      	cbz	r0, b552 <client_init+0x7e>
		LOG_ERR("getaddrinfo failed: %d", err);
    b506:	466e      	mov	r6, sp
    b508:	b088      	sub	sp, #32
    b50a:	ac02      	add	r4, sp, #8
    b50c:	4b53      	ldr	r3, [pc, #332]	; (b65c <client_init+0x188>)
    b50e:	4625      	mov	r5, r4
    b510:	6163      	str	r3, [r4, #20]
    b512:	4b53      	ldr	r3, [pc, #332]	; (b660 <client_init+0x18c>)
    b514:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b518:	e9c4 3006 	strd	r3, r0, [r4, #24]
    b51c:	2304      	movs	r3, #4
    b51e:	f845 3f10 	str.w	r3, [r5, #16]!
    b522:	462a      	mov	r2, r5
    b524:	484f      	ldr	r0, [pc, #316]	; (b664 <client_init+0x190>)
    b526:	f01f f96f 	bl	2a808 <z_log_msg_static_create.constprop.0>

	/* Resolves the configured hostname and initializes the MQTT broker structure */
	err = broker_init();
	if (err) {
		LOG_ERR("Failed to initialize broker connection");
    b52a:	4b4f      	ldr	r3, [pc, #316]	; (b668 <client_init+0x194>)
    b52c:	462a      	mov	r2, r5
    b52e:	6163      	str	r3, [r4, #20]
    b530:	4b4e      	ldr	r3, [pc, #312]	; (b66c <client_init+0x198>)
    b532:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b536:	61a3      	str	r3, [r4, #24]
    b538:	2303      	movs	r3, #3
    b53a:	484a      	ldr	r0, [pc, #296]	; (b664 <client_init+0x190>)
    b53c:	6123      	str	r3, [r4, #16]
    b53e:	f01f f963 	bl	2a808 <z_log_msg_static_create.constprop.0>
		return -ECHILD;
    b542:	f06f 0509 	mvn.w	r5, #9
    b546:	46b5      	mov	sp, r6
	/* We are not using TLS in Exercise 1 */
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;


	return err;
}
    b548:	4628      	mov	r0, r5
    b54a:	376c      	adds	r7, #108	; 0x6c
    b54c:	46bd      	mov	sp, r7
    b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	addr = result;
    b552:	687e      	ldr	r6, [r7, #4]
	while (addr != NULL) {
    b554:	f8df 9108 	ldr.w	r9, [pc, #264]	; b660 <client_init+0x18c>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    b558:	f8df a114 	ldr.w	sl, [pc, #276]	; b670 <client_init+0x19c>
		addr = addr->ai_next;
    b55c:	4841      	ldr	r0, [pc, #260]	; (b664 <client_init+0x190>)
	while (addr != NULL) {
    b55e:	b33e      	cbz	r6, b5b0 <client_init+0xdc>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    b560:	6973      	ldr	r3, [r6, #20]
    b562:	2b08      	cmp	r3, #8
    b564:	d158      	bne.n	b618 <client_init+0x144>
				->sin_addr.s_addr;
    b566:	69b3      	ldr	r3, [r6, #24]
			broker4->sin_addr.s_addr =
    b568:	4942      	ldr	r1, [pc, #264]	; (b674 <client_init+0x1a0>)
				->sin_addr.s_addr;
    b56a:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
    b56c:	2001      	movs	r0, #1
			broker4->sin_addr.s_addr =
    b56e:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    b570:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
    b574:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    b576:	804b      	strh	r3, [r1, #2]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    b578:	f107 0a08 	add.w	sl, r7, #8
    b57c:	2310      	movs	r3, #16
    b57e:	4652      	mov	r2, sl
    b580:	3104      	adds	r1, #4
    b582:	f00e fdb7 	bl	1a0f4 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", (char *)(ipv4_addr));
    b586:	466e      	mov	r6, sp
    b588:	b08a      	sub	sp, #40	; 0x28
    b58a:	ab02      	add	r3, sp, #8
    b58c:	4a3a      	ldr	r2, [pc, #232]	; (b678 <client_init+0x1a4>)
    b58e:	f8c3 a01c 	str.w	sl, [r3, #28]
    b592:	e9c3 2905 	strd	r2, r9, [r3, #20]
    b596:	f240 3201 	movw	r2, #769	; 0x301
    b59a:	841a      	strh	r2, [r3, #32]
    b59c:	461a      	mov	r2, r3
    b59e:	4b37      	ldr	r3, [pc, #220]	; (b67c <client_init+0x1a8>)
    b5a0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b5a4:	482f      	ldr	r0, [pc, #188]	; (b664 <client_init+0x190>)
    b5a6:	f842 3f10 	str.w	r3, [r2, #16]!
    b5aa:	f01f f92d 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b5ae:	46b5      	mov	sp, r6
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    b5b0:	6878      	ldr	r0, [r7, #4]
    b5b2:	f01f fdba 	bl	2b12a <zsock_freeaddrinfo>
	client->broker = &broker;
    b5b6:	4b2f      	ldr	r3, [pc, #188]	; (b674 <client_init+0x1a0>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b5b8:	2117      	movs	r1, #23
	client->broker = &broker;
    b5ba:	6363      	str	r3, [r4, #52]	; 0x34
	client->evt_cb = mqtt_evt_handler;
    b5bc:	4b30      	ldr	r3, [pc, #192]	; (b680 <client_init+0x1ac>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b5be:	4640      	mov	r0, r8
    b5c0:	4a30      	ldr	r2, [pc, #192]	; (b684 <client_init+0x1b0>)
	client->evt_cb = mqtt_evt_handler;
    b5c2:	64a3      	str	r3, [r4, #72]	; 0x48
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    b5c4:	f017 fb8a 	bl	22cdc <nrf_modem_at_cmd>
	if (err) {
    b5c8:	2800      	cmp	r0, #0
    b5ca:	d039      	beq.n	b640 <client_init+0x16c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
    b5cc:	466e      	mov	r6, sp
    b5ce:	b088      	sub	sp, #32
    b5d0:	aa02      	add	r2, sp, #8
    b5d2:	4b2d      	ldr	r3, [pc, #180]	; (b688 <client_init+0x1b4>)
    b5d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b5d8:	6153      	str	r3, [r2, #20]
    b5da:	4b2c      	ldr	r3, [pc, #176]	; (b68c <client_init+0x1b8>)
    b5dc:	e9c2 3006 	strd	r3, r0, [r2, #24]
    b5e0:	2304      	movs	r3, #4
    b5e2:	4820      	ldr	r0, [pc, #128]	; (b664 <client_init+0x190>)
    b5e4:	f842 3f10 	str.w	r3, [r2, #16]!
    b5e8:	f01f f90e 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b5ec:	46b5      	mov	sp, r6
	client->client_id.utf8 = client_id_get();
    b5ee:	4828      	ldr	r0, [pc, #160]	; (b690 <client_init+0x1bc>)
    b5f0:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(client->client_id.utf8);
    b5f2:	f7fd fe16 	bl	9222 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    b5f6:	2204      	movs	r2, #4
    b5f8:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    b5fc:	4a25      	ldr	r2, [pc, #148]	; (b694 <client_init+0x1c0>)
	client->password = NULL;
    b5fe:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    b600:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    b602:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
    b604:	4924      	ldr	r1, [pc, #144]	; (b698 <client_init+0x1c4>)
	client->user_name = NULL;
    b606:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->tx_buf_size = sizeof(tx_buffer);
    b60a:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->client_id.size = strlen(client->client_id.utf8);
    b60e:	6320      	str	r0, [r4, #48]	; 0x30
	client->rx_buf_size = sizeof(rx_buffer);
    b610:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    b612:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return err;
    b616:	e797      	b.n	b548 <client_init+0x74>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    b618:	46eb      	mov	fp, sp
    b61a:	b08a      	sub	sp, #40	; 0x28
    b61c:	aa02      	add	r2, sp, #8
    b61e:	2108      	movs	r1, #8
    b620:	61d3      	str	r3, [r2, #28]
    b622:	2318      	movs	r3, #24
    b624:	e9c2 1308 	strd	r1, r3, [r2, #32]
    b628:	2306      	movs	r3, #6
    b62a:	e9c2 a905 	strd	sl, r9, [r2, #20]
    b62e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
    b632:	f842 3f10 	str.w	r3, [r2, #16]!
    b636:	f01f f8e7 	bl	2a808 <z_log_msg_static_create.constprop.0>
    b63a:	46dd      	mov	sp, fp
		addr = addr->ai_next;
    b63c:	6836      	ldr	r6, [r6, #0]
    b63e:	e78d      	b.n	b55c <client_init+0x88>
	imei_buf[IMEI_LEN] = '\0';
    b640:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
	snprintf(client_id, sizeof(client_id), "nrf-%.*s", IMEI_LEN, imei_buf);
    b644:	230f      	movs	r3, #15
    b646:	2114      	movs	r1, #20
    b648:	4a14      	ldr	r2, [pc, #80]	; (b69c <client_init+0x1c8>)
    b64a:	f8cd 8000 	str.w	r8, [sp]
    b64e:	4810      	ldr	r0, [pc, #64]	; (b690 <client_init+0x1bc>)
    b650:	f01d f900 	bl	28854 <sniprintf>
    b654:	e7cb      	b.n	b5ee <client_init+0x11a>
    b656:	bf00      	nop
    b658:	00032e93 	.word	0x00032e93
    b65c:	00032e9f 	.word	0x00032e9f
    b660:	00032f6a 	.word	0x00032f6a
    b664:	00031c24 	.word	0x00031c24
    b668:	00032eba 	.word	0x00032eba
    b66c:	00032f76 	.word	0x00032f76
    b670:	00032eff 	.word	0x00032eff
    b674:	2000ebb0 	.word	0x2000ebb0
    b678:	00032ee5 	.word	0x00032ee5
    b67c:	01000004 	.word	0x01000004
    b680:	0000b049 	.word	0x0000b049
    b684:	00032f26 	.word	0x00032f26
    b688:	00032f2e 	.word	0x00032f2e
    b68c:	00032f5c 	.word	0x00032f5c
    b690:	2000ebe0 	.word	0x2000ebe0
    b694:	2000ecf4 	.word	0x2000ecf4
    b698:	2000ec74 	.word	0x2000ec74
    b69c:	00032f53 	.word	0x00032f53

0000b6a0 <leds_update>:
	error_handler(ERROR_MODEM_RECOVERABLE, (int)fault_info->reason);
}

/**@brief Update LEDs state. */
static void leds_update(struct k_work *work)
{
    b6a0:	b570      	push	{r4, r5, r6, lr}
	static bool led_on;
	static uint8_t current_led_on_mask;
	uint8_t led_on_mask = current_led_on_mask;
    b6a2:	4d11      	ldr	r5, [pc, #68]	; (b6e8 <leds_update+0x48>)
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);

	/* Set LED3 and LED4 to match current state. */
	led_on_mask |= LED_GET_ON(display_state);

	led_on = !led_on;
    b6a4:	4811      	ldr	r0, [pc, #68]	; (b6ec <leds_update+0x4c>)
	led_on_mask |= LED_GET_ON(display_state);
    b6a6:	4b12      	ldr	r3, [pc, #72]	; (b6f0 <leds_update+0x50>)
	uint8_t led_on_mask = current_led_on_mask;
    b6a8:	7829      	ldrb	r1, [r5, #0]
	led_on_mask |= LED_GET_ON(display_state);
    b6aa:	881b      	ldrh	r3, [r3, #0]
	led_on = !led_on;
    b6ac:	7802      	ldrb	r2, [r0, #0]
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);
    b6ae:	f021 040c 	bic.w	r4, r1, #12
	led_on_mask |= LED_GET_ON(display_state);
    b6b2:	431c      	orrs	r4, r3
	led_on = !led_on;
    b6b4:	f082 0201 	eor.w	r2, r2, #1
	led_on_mask |= LED_GET_ON(display_state);
    b6b8:	b264      	sxtb	r4, r4
	led_on = !led_on;
    b6ba:	7002      	strb	r2, [r0, #0]
	if (led_on) {
		led_on_mask |= LED_GET_BLINK(display_state);
    b6bc:	f343 2307 	sbfx	r3, r3, #8, #8
	if (led_on) {
    b6c0:	b17a      	cbz	r2, b6e2 <leds_update+0x42>
		led_on_mask |= LED_GET_BLINK(display_state);
    b6c2:	431c      	orrs	r4, r3
	} else {
		led_on_mask &= ~LED_GET_BLINK(display_state);
    b6c4:	b2e4      	uxtb	r4, r4
	}

	if (led_on_mask != current_led_on_mask) {
    b6c6:	428c      	cmp	r4, r1
    b6c8:	d003      	beq.n	b6d2 <leds_update+0x32>
		dk_set_leds(led_on_mask);
    b6ca:	4620      	mov	r0, r4
    b6cc:	f023 fd5b 	bl	2f186 <dk_set_leds>
		current_led_on_mask = led_on_mask;
    b6d0:	702c      	strb	r4, [r5, #0]
	}

	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b6d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
    b6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b6da:	2300      	movs	r3, #0
    b6dc:	4805      	ldr	r0, [pc, #20]	; (b6f4 <leds_update+0x54>)
    b6de:	f01a b9ef 	b.w	25ac0 <k_work_schedule>
		led_on_mask &= ~LED_GET_BLINK(display_state);
    b6e2:	ea24 0403 	bic.w	r4, r4, r3
    b6e6:	e7ed      	b.n	b6c4 <leds_update+0x24>
    b6e8:	2000ed75 	.word	0x2000ed75
    b6ec:	2000ed74 	.word	0x2000ed74
    b6f0:	2000ebc8 	.word	0x2000ebc8
    b6f4:	2000d190 	.word	0x2000d190

0000b6f8 <button_handler.part.0>:


/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t buttons, uint32_t has_changed)
    b6f8:	b598      	push	{r3, r4, r7, lr}
{
	switch (has_changed) {
	case DK_BTN1_MSK:
		/* STEP 7.2 - When button 1 is pressed, call data_publish() to publish a message */
		if (buttons & DK_BTN1_MSK){
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    b6fa:	2101      	movs	r1, #1
static void button_handler(uint32_t buttons, uint32_t has_changed)
    b6fc:	af00      	add	r7, sp, #0
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    b6fe:	234e      	movs	r3, #78	; 0x4e
    b700:	4a0b      	ldr	r2, [pc, #44]	; (b730 <button_handler.part.0+0x38>)
    b702:	480c      	ldr	r0, [pc, #48]	; (b734 <button_handler.part.0+0x3c>)
    b704:	f7ff fe9e 	bl	b444 <data_publish>
				   CONFIG_BUTTON_EVENT_PUBLISH_MSG, sizeof(CONFIG_BUTTON_EVENT_PUBLISH_MSG)-1);
			if (err) {
    b708:	b180      	cbz	r0, b72c <button_handler.part.0+0x34>
				LOG_INF("Failed to send message, %d", err);
    b70a:	466c      	mov	r4, sp
    b70c:	b088      	sub	sp, #32
    b70e:	466a      	mov	r2, sp
    b710:	4b09      	ldr	r3, [pc, #36]	; (b738 <button_handler.part.0+0x40>)
    b712:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b716:	6153      	str	r3, [r2, #20]
    b718:	4b08      	ldr	r3, [pc, #32]	; (b73c <button_handler.part.0+0x44>)
    b71a:	e9c2 3006 	strd	r3, r0, [r2, #24]
    b71e:	2304      	movs	r3, #4
    b720:	4807      	ldr	r0, [pc, #28]	; (b740 <button_handler.part.0+0x48>)
    b722:	f842 3f10 	str.w	r3, [r2, #16]!
    b726:	f01f f87e 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b72a:	46a5      	mov	sp, r4
				return;
			}
		}
		break;
	}
}
    b72c:	46bd      	mov	sp, r7
    b72e:	bd98      	pop	{r3, r4, r7, pc}
    b730:	00032fb5 	.word	0x00032fb5
    b734:	2000dfa0 	.word	0x2000dfa0
    b738:	00033004 	.word	0x00033004
    b73c:	0003333d 	.word	0x0003333d
    b740:	00031c24 	.word	0x00031c24

0000b744 <lte_handler>:
{
    b744:	b598      	push	{r3, r4, r7, lr}
     switch (evt->type) {
    b746:	7803      	ldrb	r3, [r0, #0]
{
    b748:	af00      	add	r7, sp, #0
     switch (evt->type) {
    b74a:	b11b      	cbz	r3, b754 <lte_handler+0x10>
    b74c:	2b03      	cmp	r3, #3
    b74e:	d021      	beq.n	b794 <lte_handler+0x50>
}
    b750:	46bd      	mov	sp, r7
    b752:	bd98      	pop	{r3, r4, r7, pc}
        if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    b754:	7a03      	ldrb	r3, [r0, #8]
    b756:	2b01      	cmp	r3, #1
    b758:	d01a      	beq.n	b790 <lte_handler+0x4c>
    b75a:	2b05      	cmp	r3, #5
    b75c:	d1f8      	bne.n	b750 <lte_handler+0xc>
		LOG_INF("Network registration status: %s",
    b75e:	4b1b      	ldr	r3, [pc, #108]	; (b7cc <lte_handler+0x88>)
    b760:	466c      	mov	r4, sp
    b762:	b08a      	sub	sp, #40	; 0x28
    b764:	466a      	mov	r2, sp
    b766:	491a      	ldr	r1, [pc, #104]	; (b7d0 <lte_handler+0x8c>)
    b768:	481a      	ldr	r0, [pc, #104]	; (b7d4 <lte_handler+0x90>)
    b76a:	6151      	str	r1, [r2, #20]
    b76c:	491a      	ldr	r1, [pc, #104]	; (b7d8 <lte_handler+0x94>)
    b76e:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b772:	f240 3301 	movw	r3, #769	; 0x301
    b776:	8413      	strh	r3, [r2, #32]
    b778:	4b18      	ldr	r3, [pc, #96]	; (b7dc <lte_handler+0x98>)
    b77a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b77e:	f842 3f10 	str.w	r3, [r2, #16]!
    b782:	f01f f850 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b786:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b788:	4815      	ldr	r0, [pc, #84]	; (b7e0 <lte_handler+0x9c>)
    b78a:	f019 fd01 	bl	25190 <z_impl_k_sem_give>
}
    b78e:	e7df      	b.n	b750 <lte_handler+0xc>
    b790:	4b14      	ldr	r3, [pc, #80]	; (b7e4 <lte_handler+0xa0>)
    b792:	e7e5      	b.n	b760 <lte_handler+0x1c>
		LOG_INF("RRC mode: %s", evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED ?
    b794:	7a01      	ldrb	r1, [r0, #8]
    b796:	4a14      	ldr	r2, [pc, #80]	; (b7e8 <lte_handler+0xa4>)
    b798:	4b14      	ldr	r3, [pc, #80]	; (b7ec <lte_handler+0xa8>)
    b79a:	466c      	mov	r4, sp
    b79c:	b08a      	sub	sp, #40	; 0x28
    b79e:	2901      	cmp	r1, #1
    b7a0:	bf08      	it	eq
    b7a2:	4613      	moveq	r3, r2
    b7a4:	466a      	mov	r2, sp
    b7a6:	4912      	ldr	r1, [pc, #72]	; (b7f0 <lte_handler+0xac>)
    b7a8:	480a      	ldr	r0, [pc, #40]	; (b7d4 <lte_handler+0x90>)
    b7aa:	6151      	str	r1, [r2, #20]
    b7ac:	490a      	ldr	r1, [pc, #40]	; (b7d8 <lte_handler+0x94>)
    b7ae:	e9c2 1306 	strd	r1, r3, [r2, #24]
    b7b2:	f240 3301 	movw	r3, #769	; 0x301
    b7b6:	8413      	strh	r3, [r2, #32]
    b7b8:	4b08      	ldr	r3, [pc, #32]	; (b7dc <lte_handler+0x98>)
    b7ba:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b7be:	f842 3f10 	str.w	r3, [r2, #16]!
    b7c2:	f01f f830 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b7c6:	46a5      	mov	sp, r4
}
    b7c8:	e7c2      	b.n	b750 <lte_handler+0xc>
    b7ca:	bf00      	nop
    b7cc:	0003303c 	.word	0x0003303c
    b7d0:	0003305f 	.word	0x0003305f
    b7d4:	00031c24 	.word	0x00031c24
    b7d8:	00033321 	.word	0x00033321
    b7dc:	01000004 	.word	0x01000004
    b7e0:	2000cee4 	.word	0x2000cee4
    b7e4:	00033023 	.word	0x00033023
    b7e8:	00033050 	.word	0x00033050
    b7ec:	0003305a 	.word	0x0003305a
    b7f0:	00033083 	.word	0x00033083

0000b7f4 <main>:

	return 0;
}

int main(void)
{
    b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7f8:	af00      	add	r7, sp, #0
	int err;
	uint32_t connect_attempt = 0;
	LOG_INF("LTE Sensor Gateway sample started");
    b7fa:	466d      	mov	r5, sp
    b7fc:	b088      	sub	sp, #32
    b7fe:	466a      	mov	r2, sp
    b800:	2603      	movs	r6, #3
    b802:	4bb8      	ldr	r3, [pc, #736]	; (bae4 <main+0x2f0>)
    b804:	4cb8      	ldr	r4, [pc, #736]	; (bae8 <main+0x2f4>)
    b806:	6153      	str	r3, [r2, #20]
    b808:	6194      	str	r4, [r2, #24]
    b80a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b80e:	48b7      	ldr	r0, [pc, #732]	; (baec <main+0x2f8>)
    b810:	f842 6f10 	str.w	r6, [r2, #16]!
    b814:	f01f f807 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b818:	46ad      	mov	sp, r5

	
	
	

	if (dk_leds_init() != 0) {
    b81a:	f012 fb91 	bl	1df40 <dk_leds_init>
    b81e:	b160      	cbz	r0, b83a <main+0x46>
		LOG_ERR("Failed to initialize the LED library");
    b820:	b088      	sub	sp, #32
    b822:	466a      	mov	r2, sp
    b824:	4bb2      	ldr	r3, [pc, #712]	; (baf0 <main+0x2fc>)
    b826:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b82a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b82e:	48af      	ldr	r0, [pc, #700]	; (baec <main+0x2f8>)
    b830:	f842 6f10 	str.w	r6, [r2, #16]!
    b834:	f01e fff7 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b838:	46ad      	mov	sp, r5
	LOG_INF("Initializing modem library");
    b83a:	466d      	mov	r5, sp
    b83c:	b088      	sub	sp, #32
    b83e:	466a      	mov	r2, sp
    b840:	2603      	movs	r6, #3
    b842:	4bac      	ldr	r3, [pc, #688]	; (baf4 <main+0x300>)
    b844:	f8df 82b0 	ldr.w	r8, [pc, #688]	; baf8 <main+0x304>
    b848:	6153      	str	r3, [r2, #20]
    b84a:	f8c2 8018 	str.w	r8, [r2, #24]
    b84e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b852:	48a6      	ldr	r0, [pc, #664]	; (baec <main+0x2f8>)
    b854:	f842 6f10 	str.w	r6, [r2, #16]!
    b858:	f01e ffe5 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b85c:	46ad      	mov	sp, r5
	err = nrf_modem_lib_init();
    b85e:	f011 fa59 	bl	1cd14 <nrf_modem_lib_init>
	if (err) {
    b862:	b1f0      	cbz	r0, b8a2 <main+0xae>
		LOG_ERR("Failed to initialize the modem library, error: %d", err);
    b864:	b088      	sub	sp, #32
    b866:	466a      	mov	r2, sp
    b868:	4ba4      	ldr	r3, [pc, #656]	; (bafc <main+0x308>)
    b86a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b86e:	e9c2 3805 	strd	r3, r8, [r2, #20]
    b872:	2304      	movs	r3, #4
    b874:	61d0      	str	r0, [r2, #28]
    b876:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Modem could not be configured, error: %d", err);
    b87a:	489c      	ldr	r0, [pc, #624]	; (baec <main+0x2f8>)
    b87c:	f01e ffd3 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b880:	46ad      	mov	sp, r5
	}

	err = modem_configure();
	if (err) {
		LOG_ERR("Failed to configure the modem");
    b882:	466d      	mov	r5, sp
    b884:	b088      	sub	sp, #32
    b886:	466a      	mov	r2, sp
    b888:	4b9d      	ldr	r3, [pc, #628]	; (bb00 <main+0x30c>)
    b88a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b88e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b892:	2303      	movs	r3, #3
    b894:	f842 3f10 	str.w	r3, [r2, #16]!
		goto do_connect;
	}

	err = fds_init(&client,&fds);
	if (err) {
		LOG_ERR("Error in fds_init: %d", err);
    b898:	4894      	ldr	r0, [pc, #592]	; (baec <main+0x2f8>)
    b89a:	f01e ffc4 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b89e:	46ad      	mov	sp, r5
		return 0;
    b8a0:	e059      	b.n	b956 <main+0x162>
	LOG_INF("Connecting to LTE network");
    b8a2:	b088      	sub	sp, #32
    b8a4:	466a      	mov	r2, sp
    b8a6:	4b97      	ldr	r3, [pc, #604]	; (bb04 <main+0x310>)
    b8a8:	4890      	ldr	r0, [pc, #576]	; (baec <main+0x2f8>)
    b8aa:	e9c2 3805 	strd	r3, r8, [r2, #20]
    b8ae:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b8b2:	f842 6f10 	str.w	r6, [r2, #16]!
    b8b6:	f01e ffb6 	bl	2a826 <z_log_msg_static_create.constprop.0>
	err = lte_lc_init_and_connect_async(lte_handler);
    b8ba:	4893      	ldr	r0, [pc, #588]	; (bb08 <main+0x314>)
    b8bc:	46ad      	mov	sp, r5
    b8be:	f023 fdd6 	bl	2f46e <lte_lc_init_and_connect_async>
	if (err) {
    b8c2:	b158      	cbz	r0, b8dc <main+0xe8>
		LOG_INF("Modem could not be configured, error: %d", err);
    b8c4:	b088      	sub	sp, #32
    b8c6:	466a      	mov	r2, sp
    b8c8:	4b90      	ldr	r3, [pc, #576]	; (bb0c <main+0x318>)
    b8ca:	61d0      	str	r0, [r2, #28]
    b8cc:	e9c2 3805 	strd	r3, r8, [r2, #20]
    b8d0:	2304      	movs	r3, #4
    b8d2:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b8d6:	f842 3f10 	str.w	r3, [r2, #16]!
    b8da:	e7ce      	b.n	b87a <main+0x86>
	return z_impl_k_sem_take(sem, timeout);
    b8dc:	f04f 32ff 	mov.w	r2, #4294967295
    b8e0:	f04f 33ff 	mov.w	r3, #4294967295
    b8e4:	488a      	ldr	r0, [pc, #552]	; (bb10 <main+0x31c>)
    b8e6:	f019 fc97 	bl	25218 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE network");
    b8ea:	b088      	sub	sp, #32
    b8ec:	466a      	mov	r2, sp
    b8ee:	4b89      	ldr	r3, [pc, #548]	; (bb14 <main+0x320>)
    b8f0:	487e      	ldr	r0, [pc, #504]	; (baec <main+0x2f8>)
    b8f2:	e9c2 3805 	strd	r3, r8, [r2, #20]
    b8f6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b8fa:	f842 6f10 	str.w	r6, [r2, #16]!
    b8fe:	f01e ff92 	bl	2a826 <z_log_msg_static_create.constprop.0>
	display_state = LEDS_LTE_CONNECTED;
    b902:	2204      	movs	r2, #4
    b904:	4b84      	ldr	r3, [pc, #528]	; (bb18 <main+0x324>)
    b906:	46ad      	mov	sp, r5
	if (dk_buttons_init(button_handler) != 0) {
    b908:	4884      	ldr	r0, [pc, #528]	; (bb1c <main+0x328>)
	display_state = LEDS_LTE_CONNECTED;
    b90a:	801a      	strh	r2, [r3, #0]
	if (dk_buttons_init(button_handler) != 0) {
    b90c:	f012 fb5a 	bl	1dfc4 <dk_buttons_init>
    b910:	b160      	cbz	r0, b92c <main+0x138>
		LOG_ERR("Failed to initialize the buttons library");
    b912:	b088      	sub	sp, #32
    b914:	466a      	mov	r2, sp
    b916:	4b82      	ldr	r3, [pc, #520]	; (bb20 <main+0x32c>)
    b918:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b91c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b920:	4872      	ldr	r0, [pc, #456]	; (baec <main+0x2f8>)
    b922:	f842 6f10 	str.w	r6, [r2, #16]!
    b926:	f01e ff7e 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b92a:	46ad      	mov	sp, r5
	err = client_init(&client);
    b92c:	487d      	ldr	r0, [pc, #500]	; (bb24 <main+0x330>)
    b92e:	f7ff fdd1 	bl	b4d4 <client_init>
	if (err) {
    b932:	4605      	mov	r5, r0
    b934:	b198      	cbz	r0, b95e <main+0x16a>
		LOG_ERR("Failed to initialize MQTT client: %d", err);
    b936:	466e      	mov	r6, sp
    b938:	b088      	sub	sp, #32
    b93a:	466a      	mov	r2, sp
    b93c:	4b7a      	ldr	r3, [pc, #488]	; (bb28 <main+0x334>)
    b93e:	61d0      	str	r0, [r2, #28]
    b940:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b944:	2304      	movs	r3, #4
    b946:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b94a:	4868      	ldr	r0, [pc, #416]	; (baec <main+0x2f8>)
    b94c:	f842 3f10 	str.w	r3, [r2, #16]!
    b950:	f01e ff69 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b954:	46b5      	mov	sp, r6
	}
	goto do_connect;

	/* This is never reached */
	return 0;
}
    b956:	2000      	movs	r0, #0
    b958:	46bd      	mov	sp, r7
    b95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_work_init_delayable(&leds_update_work, leds_update);
    b95e:	4973      	ldr	r1, [pc, #460]	; (bb2c <main+0x338>)
    b960:	4873      	ldr	r0, [pc, #460]	; (bb30 <main+0x33c>)
    b962:	f01a f80b 	bl	2597c <k_work_init_delayable>
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    b966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b96a:	2300      	movs	r3, #0
    b96c:	4870      	ldr	r0, [pc, #448]	; (bb30 <main+0x33c>)
    b96e:	f01a f8a7 	bl	25ac0 <k_work_schedule>
	k_work_init_delayable(&periodic_transmit_work, transmit_aggregated_data);
    b972:	4970      	ldr	r1, [pc, #448]	; (bb34 <main+0x340>)
    b974:	4870      	ldr	r0, [pc, #448]	; (bb38 <main+0x344>)
    b976:	f01a f801 	bl	2597c <k_work_init_delayable>
	k_work_schedule(&periodic_transmit_work, K_MSEC(10000));
    b97a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    b97e:	2300      	movs	r3, #0
    b980:	486d      	ldr	r0, [pc, #436]	; (bb38 <main+0x344>)
    b982:	f01a f89d 	bl	25ac0 <k_work_schedule>
	k_work_init_delayable(&periodic_publish_work, publish_aggregated_data);
    b986:	496d      	ldr	r1, [pc, #436]	; (bb3c <main+0x348>)
    b988:	486d      	ldr	r0, [pc, #436]	; (bb40 <main+0x34c>)
    b98a:	f019 fff7 	bl	2597c <k_work_init_delayable>
	k_work_schedule(&periodic_publish_work, K_MSEC(10000));
    b98e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    b992:	2300      	movs	r3, #0
    b994:	486a      	ldr	r0, [pc, #424]	; (bb40 <main+0x34c>)
    b996:	f01a f893 	bl	25ac0 <k_work_schedule>
	ble_init();		    //Initializes bluetooth (ble.c)
    b99a:	f000 ff13 	bl	c7c4 <ble_init>
	err = fds_init(&client,&fds);
    b99e:	4e69      	ldr	r6, [pc, #420]	; (bb44 <main+0x350>)
	err = mqtt_connect(&client);
    b9a0:	4860      	ldr	r0, [pc, #384]	; (bb24 <main+0x330>)
    b9a2:	f022 fa7b 	bl	2de9c <mqtt_connect>
	if (err) {
    b9a6:	b340      	cbz	r0, b9fa <main+0x206>
		LOG_ERR("Error in mqtt_connect: %d", err);
    b9a8:	46e8      	mov	r8, sp
    b9aa:	b088      	sub	sp, #32
    b9ac:	466a      	mov	r2, sp
    b9ae:	4b66      	ldr	r3, [pc, #408]	; (bb48 <main+0x354>)
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    b9b0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b9b4:	2304      	movs	r3, #4
    b9b6:	61d0      	str	r0, [r2, #28]
    b9b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b9bc:	484b      	ldr	r0, [pc, #300]	; (baec <main+0x2f8>)
    b9be:	f842 3f10 	str.w	r3, [r2, #16]!
    b9c2:	f01e ff30 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b9c6:	46c5      	mov	sp, r8
	if (connect_attempt++ > 0) {
    b9c8:	3501      	adds	r5, #1
    b9ca:	d0e9      	beq.n	b9a0 <main+0x1ac>
		LOG_INF("Reconnecting in %d seconds...",
    b9cc:	46e8      	mov	r8, sp
    b9ce:	b088      	sub	sp, #32
    b9d0:	466a      	mov	r2, sp
    b9d2:	4b5e      	ldr	r3, [pc, #376]	; (bb4c <main+0x358>)
    b9d4:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b9d8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b9dc:	233c      	movs	r3, #60	; 0x3c
    b9de:	61d3      	str	r3, [r2, #28]
    b9e0:	2304      	movs	r3, #4
    b9e2:	4842      	ldr	r0, [pc, #264]	; (baec <main+0x2f8>)
    b9e4:	f842 3f10 	str.w	r3, [r2, #16]!
    b9e8:	f01e ff1d 	bl	2a826 <z_log_msg_static_create.constprop.0>
    b9ec:	46c5      	mov	sp, r8
	return z_impl_k_sleep(timeout);
    b9ee:	2100      	movs	r1, #0
    b9f0:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    b9f4:	f01b fa1e 	bl	26e34 <z_impl_k_sleep>
    b9f8:	e7d2      	b.n	b9a0 <main+0x1ac>
	err = fds_init(&client,&fds);
    b9fa:	4631      	mov	r1, r6
    b9fc:	4849      	ldr	r0, [pc, #292]	; (bb24 <main+0x330>)
    b9fe:	f01e ff06 	bl	2a80e <fds_init>
	if (err) {
    ba02:	2800      	cmp	r0, #0
    ba04:	d136      	bne.n	ba74 <main+0x280>
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    ba06:	f8df 811c 	ldr.w	r8, [pc, #284]	; bb24 <main+0x330>
    ba0a:	4640      	mov	r0, r8
    ba0c:	f022 fb8f 	bl	2e12e <mqtt_keepalive_time_left>
    ba10:	4602      	mov	r2, r0
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    ba12:	2101      	movs	r1, #1
    ba14:	4630      	mov	r0, r6
    ba16:	f01f fc9d 	bl	2b354 <z_impl_zsock_poll>
		if (err < 0) {
    ba1a:	2800      	cmp	r0, #0
    ba1c:	da37      	bge.n	ba8e <main+0x29a>
			LOG_ERR("Error in poll(): %d", errno);
    ba1e:	f020 faa1 	bl	2bf64 <__errno>
    ba22:	46e8      	mov	r8, sp
    ba24:	b088      	sub	sp, #32
    ba26:	6803      	ldr	r3, [r0, #0]
    ba28:	466a      	mov	r2, sp
    ba2a:	4949      	ldr	r1, [pc, #292]	; (bb50 <main+0x35c>)
    ba2c:	61d3      	str	r3, [r2, #28]
    ba2e:	e9c2 1405 	strd	r1, r4, [r2, #20]
				LOG_ERR("Error in mqtt_input: %d", err);
    ba32:	2304      	movs	r3, #4
    ba34:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ba38:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("POLLNVAL");
    ba3c:	482b      	ldr	r0, [pc, #172]	; (baec <main+0x2f8>)
    ba3e:	f01e fef2 	bl	2a826 <z_log_msg_static_create.constprop.0>
    ba42:	46c5      	mov	sp, r8
	LOG_INF("Disconnecting MQTT client");
    ba44:	46e8      	mov	r8, sp
    ba46:	b088      	sub	sp, #32
    ba48:	466a      	mov	r2, sp
    ba4a:	4b42      	ldr	r3, [pc, #264]	; (bb54 <main+0x360>)
    ba4c:	4827      	ldr	r0, [pc, #156]	; (baec <main+0x2f8>)
    ba4e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ba52:	2303      	movs	r3, #3
    ba54:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    ba58:	f842 3f10 	str.w	r3, [r2, #16]!
    ba5c:	f01e fee3 	bl	2a826 <z_log_msg_static_create.constprop.0>
	err = mqtt_disconnect(&client);
    ba60:	4830      	ldr	r0, [pc, #192]	; (bb24 <main+0x330>)
    ba62:	46c5      	mov	sp, r8
    ba64:	f022 fac6 	bl	2dff4 <mqtt_disconnect>
	if (err) {
    ba68:	2800      	cmp	r0, #0
    ba6a:	d0ad      	beq.n	b9c8 <main+0x1d4>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    ba6c:	b088      	sub	sp, #32
    ba6e:	466a      	mov	r2, sp
    ba70:	4b39      	ldr	r3, [pc, #228]	; (bb58 <main+0x364>)
    ba72:	e79d      	b.n	b9b0 <main+0x1bc>
		LOG_ERR("Error in fds_init: %d", err);
    ba74:	466d      	mov	r5, sp
    ba76:	b088      	sub	sp, #32
    ba78:	466a      	mov	r2, sp
    ba7a:	4b38      	ldr	r3, [pc, #224]	; (bb5c <main+0x368>)
    ba7c:	61d0      	str	r0, [r2, #28]
    ba7e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ba82:	2304      	movs	r3, #4
    ba84:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ba88:	f842 3f10 	str.w	r3, [r2, #16]!
    ba8c:	e704      	b.n	b898 <main+0xa4>
		err = mqtt_live(&client);
    ba8e:	4640      	mov	r0, r8
    ba90:	f022 fb28 	bl	2e0e4 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    ba94:	b150      	cbz	r0, baac <main+0x2b8>
    ba96:	f110 0f0b 	cmn.w	r0, #11
    ba9a:	d007      	beq.n	baac <main+0x2b8>
			LOG_ERR("Error in mqtt_live: %d", err);
    ba9c:	46e8      	mov	r8, sp
    ba9e:	b088      	sub	sp, #32
    baa0:	466a      	mov	r2, sp
    baa2:	4b2f      	ldr	r3, [pc, #188]	; (bb60 <main+0x36c>)
				LOG_ERR("Error in mqtt_input: %d", err);
    baa4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    baa8:	61d0      	str	r0, [r2, #28]
    baaa:	e7c2      	b.n	ba32 <main+0x23e>
		if ((fds.revents & POLLIN) == POLLIN) {
    baac:	88f3      	ldrh	r3, [r6, #6]
    baae:	07d9      	lsls	r1, r3, #31
    bab0:	d508      	bpl.n	bac4 <main+0x2d0>
			err = mqtt_input(&client);
    bab2:	4640      	mov	r0, r8
    bab4:	f022 fb52 	bl	2e15c <mqtt_input>
			if (err != 0) {
    bab8:	b120      	cbz	r0, bac4 <main+0x2d0>
				LOG_ERR("Error in mqtt_input: %d", err);
    baba:	46e8      	mov	r8, sp
    babc:	b088      	sub	sp, #32
    babe:	466a      	mov	r2, sp
    bac0:	4b28      	ldr	r3, [pc, #160]	; (bb64 <main+0x370>)
    bac2:	e7ef      	b.n	baa4 <main+0x2b0>
		if ((fds.revents & POLLERR) == POLLERR) {
    bac4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
    bac8:	071a      	lsls	r2, r3, #28
    baca:	d54f      	bpl.n	bb6c <main+0x378>
			LOG_ERR("POLLERR");
    bacc:	46e8      	mov	r8, sp
    bace:	b088      	sub	sp, #32
    bad0:	466a      	mov	r2, sp
    bad2:	4b25      	ldr	r3, [pc, #148]	; (bb68 <main+0x374>)
			LOG_ERR("POLLNVAL");
    bad4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    bad8:	2303      	movs	r3, #3
    bada:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bade:	f842 3f10 	str.w	r3, [r2, #16]!
    bae2:	e7ab      	b.n	ba3c <main+0x248>
    bae4:	00033094 	.word	0x00033094
    bae8:	0003334c 	.word	0x0003334c
    baec:	00031c24 	.word	0x00031c24
    baf0:	000330ba 	.word	0x000330ba
    baf4:	000330e3 	.word	0x000330e3
    baf8:	0003332d 	.word	0x0003332d
    bafc:	00033102 	.word	0x00033102
    bb00:	000331a0 	.word	0x000331a0
    bb04:	00033138 	.word	0x00033138
    bb08:	0000b745 	.word	0x0000b745
    bb0c:	00033156 	.word	0x00033156
    bb10:	2000cee4 	.word	0x2000cee4
    bb14:	00033183 	.word	0x00033183
    bb18:	2000ebc8 	.word	0x2000ebc8
    bb1c:	0002a82d 	.word	0x0002a82d
    bb20:	000331c2 	.word	0x000331c2
    bb24:	2000dfa0 	.word	0x2000dfa0
    bb28:	000331ef 	.word	0x000331ef
    bb2c:	0000b6a1 	.word	0x0000b6a1
    bb30:	2000d190 	.word	0x2000d190
    bb34:	0000c92d 	.word	0x0000c92d
    bb38:	2000d160 	.word	0x2000d160
    bb3c:	0000c885 	.word	0x0000c885
    bb40:	2000d130 	.word	0x2000d130
    bb44:	2000df98 	.word	0x2000df98
    bb48:	0003323a 	.word	0x0003323a
    bb4c:	00033218 	.word	0x00033218
    bb50:	00033272 	.word	0x00033272
    bb54:	000332da 	.word	0x000332da
    bb58:	000332f8 	.word	0x000332f8
    bb5c:	00033258 	.word	0x00033258
    bb60:	0003328a 	.word	0x0003328a
    bb64:	000332a5 	.word	0x000332a5
    bb68:	000332c1 	.word	0x000332c1
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    bb6c:	069b      	lsls	r3, r3, #26
    bb6e:	f57f af4c 	bpl.w	ba0a <main+0x216>
			LOG_ERR("POLLNVAL");
    bb72:	46e8      	mov	r8, sp
    bb74:	b088      	sub	sp, #32
    bb76:	466a      	mov	r2, sp
    bb78:	4b00      	ldr	r3, [pc, #0]	; (bb7c <main+0x388>)
    bb7a:	e7ab      	b.n	bad4 <main+0x2e0>
    bb7c:	000332cd 	.word	0x000332cd

0000bb80 <scan_connecting_error>:

	LOG_INF("Device found: %s", addr);
}

void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    bb80:	b580      	push	{r7, lr}
    bb82:	af00      	add	r7, sp, #0
	LOG_ERR("Connection to peer failed!");
    bb84:	b088      	sub	sp, #32
    bb86:	466a      	mov	r2, sp
    bb88:	4b07      	ldr	r3, [pc, #28]	; (bba8 <scan_connecting_error+0x28>)
    bb8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bb8e:	6153      	str	r3, [r2, #20]
    bb90:	4b06      	ldr	r3, [pc, #24]	; (bbac <scan_connecting_error+0x2c>)
    bb92:	4807      	ldr	r0, [pc, #28]	; (bbb0 <scan_connecting_error+0x30>)
    bb94:	6193      	str	r3, [r2, #24]
    bb96:	2303      	movs	r3, #3
    bb98:	f842 3f10 	str.w	r3, [r2, #16]!
    bb9c:	2300      	movs	r3, #0
    bb9e:	f01e fe50 	bl	2a842 <z_log_msg_static_create>
}
    bba2:	46bd      	mov	sp, r7
    bba4:	bd80      	pop	{r7, pc}
    bba6:	bf00      	nop
    bba8:	0003335c 	.word	0x0003335c
    bbac:	00033a46 	.word	0x00033a46
    bbb0:	00031c24 	.word	0x00031c24

0000bbb4 <discovery_error_found>:
{
    bbb4:	b580      	push	{r7, lr}
    bbb6:	af00      	add	r7, sp, #0
	LOG_ERR("The discovery procedure failed, err %d", err);
    bbb8:	b088      	sub	sp, #32
    bbba:	466a      	mov	r2, sp
    bbbc:	4b07      	ldr	r3, [pc, #28]	; (bbdc <discovery_error_found+0x28>)
    bbbe:	4808      	ldr	r0, [pc, #32]	; (bbe0 <discovery_error_found+0x2c>)
    bbc0:	6153      	str	r3, [r2, #20]
    bbc2:	4b08      	ldr	r3, [pc, #32]	; (bbe4 <discovery_error_found+0x30>)
    bbc4:	e9c2 3106 	strd	r3, r1, [r2, #24]
    bbc8:	2304      	movs	r3, #4
    bbca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bbce:	f842 3f10 	str.w	r3, [r2, #16]!
    bbd2:	2300      	movs	r3, #0
    bbd4:	f01e fe35 	bl	2a842 <z_log_msg_static_create>
}
    bbd8:	46bd      	mov	sp, r7
    bbda:	bd80      	pop	{r7, pc}
    bbdc:	0003337b 	.word	0x0003337b
    bbe0:	00031c24 	.word	0x00031c24
    bbe4:	00033a06 	.word	0x00033a06

0000bbe8 <on_transmitted>:
{
    bbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_INF("Something Transmitted...");
    bbec:	466d      	mov	r5, sp
{
    bbee:	af00      	add	r7, sp, #0
	LOG_INF("Something Transmitted...");
    bbf0:	b088      	sub	sp, #32
{
    bbf2:	4616      	mov	r6, r2
    bbf4:	461c      	mov	r4, r3
	LOG_INF("Something Transmitted...");
    bbf6:	466a      	mov	r2, sp
    bbf8:	f04f 0903 	mov.w	r9, #3
    bbfc:	4b29      	ldr	r3, [pc, #164]	; (bca4 <on_transmitted+0xbc>)
    bbfe:	f8df 80a8 	ldr.w	r8, [pc, #168]	; bca8 <on_transmitted+0xc0>
    bc02:	6153      	str	r3, [r2, #20]
    bc04:	f8c2 8018 	str.w	r8, [r2, #24]
    bc08:	2300      	movs	r3, #0
    bc0a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bc0e:	4827      	ldr	r0, [pc, #156]	; (bcac <on_transmitted+0xc4>)
    bc10:	f842 9f10 	str.w	r9, [r2, #16]!
    bc14:	f01e fe15 	bl	2a842 <z_log_msg_static_create>
    bc18:	46ad      	mov	sp, r5
	if (!data) {
    bc1a:	b98e      	cbnz	r6, bc40 <on_transmitted+0x58>
		LOG_INF("Unsubscribed from TX notifications");
    bc1c:	b088      	sub	sp, #32
    bc1e:	466a      	mov	r2, sp
    bc20:	4b23      	ldr	r3, [pc, #140]	; (bcb0 <on_transmitted+0xc8>)
    bc22:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bc26:	e9c2 3805 	strd	r3, r8, [r2, #20]
    bc2a:	4633      	mov	r3, r6
    bc2c:	f842 9f10 	str.w	r9, [r2, #16]!
	LOG_HEXDUMP_INF(data, length, "Transmitted data (hex):");
    bc30:	481e      	ldr	r0, [pc, #120]	; (bcac <on_transmitted+0xc4>)
    bc32:	f01e fe06 	bl	2a842 <z_log_msg_static_create>
}
    bc36:	2000      	movs	r0, #0
    bc38:	46ad      	mov	sp, r5
    bc3a:	46bd      	mov	sp, r7
    bc3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (length == 0) {
    bc40:	b954      	cbnz	r4, bc58 <on_transmitted+0x70>
		LOG_WRN("Received empty TX notification");
    bc42:	b088      	sub	sp, #32
    bc44:	466a      	mov	r2, sp
    bc46:	4b1b      	ldr	r3, [pc, #108]	; (bcb4 <on_transmitted+0xcc>)
    bc48:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    bc4c:	e9c2 3805 	strd	r3, r8, [r2, #20]
    bc50:	4623      	mov	r3, r4
    bc52:	f842 9f10 	str.w	r9, [r2, #16]!
    bc56:	e7eb      	b.n	bc30 <on_transmitted+0x48>
	LOG_INF("Transmitted data (string): %.*s", length, (char *)data);
    bc58:	b08a      	sub	sp, #40	; 0x28
    bc5a:	466a      	mov	r2, sp
    bc5c:	4b16      	ldr	r3, [pc, #88]	; (bcb8 <on_transmitted+0xd0>)
    bc5e:	e9c2 4607 	strd	r4, r6, [r2, #28]
    bc62:	e9c2 3805 	strd	r3, r8, [r2, #20]
    bc66:	f240 4302 	movw	r3, #1026	; 0x402
    bc6a:	8493      	strh	r3, [r2, #36]	; 0x24
    bc6c:	4b13      	ldr	r3, [pc, #76]	; (bcbc <on_transmitted+0xd4>)
    bc6e:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    bc72:	f842 3f10 	str.w	r3, [r2, #16]!
    bc76:	480d      	ldr	r0, [pc, #52]	; (bcac <on_transmitted+0xc4>)
    bc78:	2300      	movs	r3, #0
    bc7a:	f01e fde2 	bl	2a842 <z_log_msg_static_create>
    bc7e:	46ad      	mov	sp, r5
	LOG_HEXDUMP_INF(data, length, "Transmitted data (hex):");
    bc80:	b08a      	sub	sp, #40	; 0x28
    bc82:	466a      	mov	r2, sp
    bc84:	4b0e      	ldr	r3, [pc, #56]	; (bcc0 <on_transmitted+0xd8>)
    bc86:	0521      	lsls	r1, r4, #20
    bc88:	e9c2 3805 	strd	r3, r8, [r2, #20]
    bc8c:	4b0d      	ldr	r3, [pc, #52]	; (bcc4 <on_transmitted+0xdc>)
    bc8e:	f441 5113 	orr.w	r1, r1, #9408	; 0x24c0
    bc92:	61d3      	str	r3, [r2, #28]
    bc94:	f240 3301 	movw	r3, #769	; 0x301
    bc98:	8413      	strh	r3, [r2, #32]
    bc9a:	4b0b      	ldr	r3, [pc, #44]	; (bcc8 <on_transmitted+0xe0>)
    bc9c:	f842 3f10 	str.w	r3, [r2, #16]!
    bca0:	4633      	mov	r3, r6
    bca2:	e7c5      	b.n	bc30 <on_transmitted+0x48>
    bca4:	000333a6 	.word	0x000333a6
    bca8:	000339e3 	.word	0x000339e3
    bcac:	00031c24 	.word	0x00031c24
    bcb0:	000333c3 	.word	0x000333c3
    bcb4:	000333ea 	.word	0x000333ea
    bcb8:	0003340d 	.word	0x0003340d
    bcbc:	01000005 	.word	0x01000005
    bcc0:	00035ee5 	.word	0x00035ee5
    bcc4:	00033431 	.word	0x00033431
    bcc8:	01000004 	.word	0x01000004

0000bccc <ble_ready>:

	LOG_INF("Scanning...");
}

static void ble_ready(int err)
{
    bccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcce:	b091      	sub	sp, #68	; 0x44
	LOG_INF("Bluetooth ready");
    bcd0:	466c      	mov	r4, sp
{
    bcd2:	af00      	add	r7, sp, #0
	LOG_INF("Bluetooth ready");
    bcd4:	b088      	sub	sp, #32
    bcd6:	466a      	mov	r2, sp
    bcd8:	4b47      	ldr	r3, [pc, #284]	; (bdf8 <ble_ready+0x12c>)
    bcda:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bcde:	6153      	str	r3, [r2, #20]
    bce0:	4b46      	ldr	r3, [pc, #280]	; (bdfc <ble_ready+0x130>)
    bce2:	4847      	ldr	r0, [pc, #284]	; (be00 <ble_ready+0x134>)
    bce4:	6193      	str	r3, [r2, #24]
    bce6:	2303      	movs	r3, #3
    bce8:	f842 3f10 	str.w	r3, [r2, #16]!
    bcec:	2300      	movs	r3, #0
    bcee:	f01e fda8 	bl	2a842 <z_log_msg_static_create>

	bt_conn_cb_register(&conn_callbacks);
    bcf2:	4844      	ldr	r0, [pc, #272]	; (be04 <ble_ready+0x138>)
    bcf4:	46a5      	mov	sp, r4
	struct bt_le_scan_param scan_param = {
    bcf6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
	bt_conn_cb_register(&conn_callbacks);
    bcfa:	f009 ffb9 	bl	15c70 <bt_conn_cb_register>
	struct bt_le_scan_param scan_param = {
    bcfe:	2100      	movs	r1, #0
    bd00:	2214      	movs	r2, #20
    bd02:	4620      	mov	r0, r4
    bd04:	f024 fdbd 	bl	30882 <memset>
    bd08:	2301      	movs	r3, #1
    bd0a:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    bd0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    bd12:	633b      	str	r3, [r7, #48]	; 0x30
	struct bt_scan_init_param scan_init = {
    bd14:	743b      	strb	r3, [r7, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd16:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
	struct bt_le_scan_param scan_param = {
    bd1a:	637a      	str	r2, [r7, #52]	; 0x34
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd1c:	4a3a      	ldr	r2, [pc, #232]	; (be08 <ble_ready+0x13c>)
	bt_scan_init(&scan_init);
    bd1e:	f107 000c 	add.w	r0, r7, #12
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    bd22:	e9c7 2301 	strd	r2, r3, [r7, #4]
	struct bt_scan_init_param scan_init = {
    bd26:	1d3b      	adds	r3, r7, #4
    bd28:	617b      	str	r3, [r7, #20]
    bd2a:	60fc      	str	r4, [r7, #12]
	bt_scan_init(&scan_init);
    bd2c:	f005 f8f6 	bl	10f1c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    bd30:	4836      	ldr	r0, [pc, #216]	; (be0c <ble_ready+0x140>)
    bd32:	f004 ffb7 	bl	10ca4 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_ESP32_SERVICE);
    bd36:	f107 0218 	add.w	r2, r7, #24
    bd3a:	4615      	mov	r5, r2
    bd3c:	4b34      	ldr	r3, [pc, #208]	; (be10 <ble_ready+0x144>)
    bd3e:	f103 0610 	add.w	r6, r3, #16
    bd42:	4614      	mov	r4, r2
    bd44:	6818      	ldr	r0, [r3, #0]
    bd46:	6859      	ldr	r1, [r3, #4]
    bd48:	3308      	adds	r3, #8
    bd4a:	c403      	stmia	r4!, {r0, r1}
    bd4c:	42b3      	cmp	r3, r6
    bd4e:	4622      	mov	r2, r4
    bd50:	d1f7      	bne.n	bd42 <ble_ready+0x76>
    bd52:	781b      	ldrb	r3, [r3, #0]
    bd54:	4629      	mov	r1, r5
    bd56:	7023      	strb	r3, [r4, #0]
    bd58:	2003      	movs	r0, #3
    bd5a:	f004 ffb3 	bl	10cc4 <bt_scan_filter_add>
	if (err) {
    bd5e:	4c2d      	ldr	r4, [pc, #180]	; (be14 <ble_ready+0x148>)
    bd60:	4605      	mov	r5, r0
    bd62:	b190      	cbz	r0, bd8a <ble_ready+0xbe>
		LOG_ERR("Scanning filters cannot be set");
    bd64:	466d      	mov	r5, sp
    bd66:	b088      	sub	sp, #32
    bd68:	466a      	mov	r2, sp
    bd6a:	4b2b      	ldr	r3, [pc, #172]	; (be18 <ble_ready+0x14c>)
    bd6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd70:	e9c2 3405 	strd	r3, r4, [r2, #20]
    bd74:	2303      	movs	r3, #3
    bd76:	f842 3f10 	str.w	r3, [r2, #16]!
    bd7a:	2300      	movs	r3, #0
	LOG_INF("Scanning...");
    bd7c:	4820      	ldr	r0, [pc, #128]	; (be00 <ble_ready+0x134>)
    bd7e:	f01e fd60 	bl	2a842 <z_log_msg_static_create>
    bd82:	46ad      	mov	sp, r5
	scan_start();
}
    bd84:	3744      	adds	r7, #68	; 0x44
    bd86:	46bd      	mov	sp, r7
    bd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    bd8a:	4601      	mov	r1, r0
    bd8c:	2004      	movs	r0, #4
    bd8e:	f004 fffb 	bl	10d88 <bt_scan_filter_enable>
	if (err) {
    bd92:	b178      	cbz	r0, bdb4 <ble_ready+0xe8>
		LOG_ERR("Filters cannot be turned on");
    bd94:	466e      	mov	r6, sp
    bd96:	b088      	sub	sp, #32
    bd98:	466a      	mov	r2, sp
    bd9a:	4b20      	ldr	r3, [pc, #128]	; (be1c <ble_ready+0x150>)
    bd9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bda0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    bda4:	2303      	movs	r3, #3
    bda6:	4816      	ldr	r0, [pc, #88]	; (be00 <ble_ready+0x134>)
    bda8:	f842 3f10 	str.w	r3, [r2, #16]!
    bdac:	462b      	mov	r3, r5
    bdae:	f01e fd48 	bl	2a842 <z_log_msg_static_create>
    bdb2:	46b5      	mov	sp, r6
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    bdb4:	2001      	movs	r0, #1
    bdb6:	f005 f8e3 	bl	10f80 <bt_scan_start>
	if (err) {
    bdba:	b180      	cbz	r0, bdde <ble_ready+0x112>
		LOG_ERR("Scanning failed to start, err %d", err);
    bdbc:	466d      	mov	r5, sp
    bdbe:	b088      	sub	sp, #32
    bdc0:	466a      	mov	r2, sp
    bdc2:	4b17      	ldr	r3, [pc, #92]	; (be20 <ble_ready+0x154>)
    bdc4:	61d0      	str	r0, [r2, #28]
    bdc6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    bdca:	2304      	movs	r3, #4
    bdcc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bdd0:	f842 3f10 	str.w	r3, [r2, #16]!
    bdd4:	480a      	ldr	r0, [pc, #40]	; (be00 <ble_ready+0x134>)
    bdd6:	2300      	movs	r3, #0
    bdd8:	f01e fd33 	bl	2a842 <z_log_msg_static_create>
    bddc:	46ad      	mov	sp, r5
	LOG_INF("Scanning...");
    bdde:	466d      	mov	r5, sp
    bde0:	b088      	sub	sp, #32
    bde2:	466a      	mov	r2, sp
    bde4:	4b0f      	ldr	r3, [pc, #60]	; (be24 <ble_ready+0x158>)
    bde6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bdea:	e9c2 3405 	strd	r3, r4, [r2, #20]
    bdee:	2303      	movs	r3, #3
    bdf0:	f842 3f10 	str.w	r3, [r2, #16]!
    bdf4:	2300      	movs	r3, #0
    bdf6:	e7c1      	b.n	bd7c <ble_ready+0xb0>
    bdf8:	00033449 	.word	0x00033449
    bdfc:	00033a33 	.word	0x00033a33
    be00:	00031c24 	.word	0x00031c24
    be04:	2000c7f0 	.word	0x2000c7f0
    be08:	00280018 	.word	0x00280018
    be0c:	2000c7e8 	.word	0x2000c7e8
    be10:	00031ddc 	.word	0x00031ddc
    be14:	000339bd 	.word	0x000339bd
    be18:	0003345d 	.word	0x0003345d
    be1c:	00033480 	.word	0x00033480
    be20:	000334a0 	.word	0x000334a0
    be24:	000334c5 	.word	0x000334c5

0000be28 <on_received>:
{
    be28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    be2c:	b0b1      	sub	sp, #196	; 0xc4
	LOG_INF("Something received...");
    be2e:	466d      	mov	r5, sp
{
    be30:	af16      	add	r7, sp, #88	; 0x58
	LOG_INF("Something received...");
    be32:	b088      	sub	sp, #32
{
    be34:	4690      	mov	r8, r2
    be36:	461c      	mov	r4, r3
	LOG_INF("Something received...");
    be38:	aa16      	add	r2, sp, #88	; 0x58
    be3a:	f04f 0903 	mov.w	r9, #3
    be3e:	4b30      	ldr	r3, [pc, #192]	; (bf00 <on_received+0xd8>)
    be40:	4e30      	ldr	r6, [pc, #192]	; (bf04 <on_received+0xdc>)
    be42:	6153      	str	r3, [r2, #20]
    be44:	6196      	str	r6, [r2, #24]
    be46:	2300      	movs	r3, #0
    be48:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    be4c:	482e      	ldr	r0, [pc, #184]	; (bf08 <on_received+0xe0>)
    be4e:	f842 9f10 	str.w	r9, [r2, #16]!
    be52:	f01e fcf6 	bl	2a842 <z_log_msg_static_create>
    be56:	46ad      	mov	sp, r5
	if (length > 0) {
    be58:	2c00      	cmp	r4, #0
    be5a:	d04c      	beq.n	bef6 <on_received+0xce>
		LOG_HEXDUMP_INF(data, length, "Received data:");
    be5c:	b08a      	sub	sp, #40	; 0x28
    be5e:	a816      	add	r0, sp, #88	; 0x58
    be60:	4b2a      	ldr	r3, [pc, #168]	; (bf0c <on_received+0xe4>)
    be62:	4602      	mov	r2, r0
    be64:	e9c0 3605 	strd	r3, r6, [r0, #20]
    be68:	4b29      	ldr	r3, [pc, #164]	; (bf10 <on_received+0xe8>)
    be6a:	0521      	lsls	r1, r4, #20
    be6c:	61c3      	str	r3, [r0, #28]
    be6e:	f240 3301 	movw	r3, #769	; 0x301
    be72:	8403      	strh	r3, [r0, #32]
    be74:	4b27      	ldr	r3, [pc, #156]	; (bf14 <on_received+0xec>)
    be76:	4824      	ldr	r0, [pc, #144]	; (bf08 <on_received+0xe0>)
    be78:	f842 3f10 	str.w	r3, [r2, #16]!
    be7c:	f441 5113 	orr.w	r1, r1, #9408	; 0x24c0
    be80:	4643      	mov	r3, r8
    be82:	f01e fcde 	bl	2a842 <z_log_msg_static_create>
		LOG_INF("Received data from ESP32");
    be86:	b002      	add	sp, #8
    be88:	aa16      	add	r2, sp, #88	; 0x58
    be8a:	4b23      	ldr	r3, [pc, #140]	; (bf18 <on_received+0xf0>)
    be8c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    be90:	e9c2 3605 	strd	r3, r6, [r2, #20]
    be94:	481c      	ldr	r0, [pc, #112]	; (bf08 <on_received+0xe0>)
    be96:	2300      	movs	r3, #0
    be98:	f842 9f10 	str.w	r9, [r2, #16]!
    be9c:	f01e fcd1 	bl	2a842 <z_log_msg_static_create>
		data_packet.length = MIN(length, ENTRY_MAX_SIZE);
    bea0:	2c64      	cmp	r4, #100	; 0x64
    bea2:	4622      	mov	r2, r4
    bea4:	46ad      	mov	sp, r5
    bea6:	bf28      	it	cs
    bea8:	2264      	movcs	r2, #100	; 0x64
		data_packet.type = uplink_TEXT;
    beaa:	f04f 0900 	mov.w	r9, #0
		memcpy(data_packet.data, data, data_packet.length);
    beae:	4641      	mov	r1, r8
    beb0:	1cf8      	adds	r0, r7, #3
		data_packet.length = MIN(length, ENTRY_MAX_SIZE);
    beb2:	703a      	strb	r2, [r7, #0]
		data_packet.type = uplink_TEXT;
    beb4:	f887 9001 	strb.w	r9, [r7, #1]
		data_packet.source = SOURCE_ESP32;
    beb8:	f887 9002 	strb.w	r9, [r7, #2]
		memcpy(data_packet.data, data, data_packet.length);
    bebc:	f024 fcc1 	bl	30842 <memcpy>
		int err = uplink_aggregator_put(data_packet);
    bec0:	2257      	movs	r2, #87	; 0x57
    bec2:	f107 0110 	add.w	r1, r7, #16
    bec6:	4668      	mov	r0, sp
    bec8:	f024 fcbb 	bl	30842 <memcpy>
    becc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    bed0:	f000 fd84 	bl	c9dc <uplink_aggregator_put>
		if (err) {
    bed4:	b178      	cbz	r0, bef6 <on_received+0xce>
			LOG_ERR("Failed to put data into aggregator, err %d", err);
    bed6:	b088      	sub	sp, #32
    bed8:	aa16      	add	r2, sp, #88	; 0x58
    beda:	4b10      	ldr	r3, [pc, #64]	; (bf1c <on_received+0xf4>)
    bedc:	61d0      	str	r0, [r2, #28]
    bede:	e9c2 3605 	strd	r3, r6, [r2, #20]
    bee2:	2304      	movs	r3, #4
    bee4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bee8:	f842 3f10 	str.w	r3, [r2, #16]!
    beec:	4806      	ldr	r0, [pc, #24]	; (bf08 <on_received+0xe0>)
    beee:	464b      	mov	r3, r9
    bef0:	f01e fca7 	bl	2a842 <z_log_msg_static_create>
    bef4:	46ad      	mov	sp, r5
}
    bef6:	2001      	movs	r0, #1
    bef8:	376c      	adds	r7, #108	; 0x6c
    befa:	46bd      	mov	sp, r7
    befc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bf00:	000334d5 	.word	0x000334d5
    bf04:	000339d7 	.word	0x000339d7
    bf08:	00031c24 	.word	0x00031c24
    bf0c:	00035ee5 	.word	0x00035ee5
    bf10:	000334ef 	.word	0x000334ef
    bf14:	01000004 	.word	0x01000004
    bf18:	000334fe 	.word	0x000334fe
    bf1c:	0003351b 	.word	0x0003351b

0000bf20 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    bf20:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    bf22:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    bf24:	b08a      	sub	sp, #40	; 0x28
    bf26:	4604      	mov	r4, r0
    bf28:	460e      	mov	r6, r1
    bf2a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    bf2c:	2b03      	cmp	r3, #3
    bf2e:	d820      	bhi.n	bf72 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    bf30:	e8df f003 	tbb	[pc, r3]
    bf34:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    bf38:	4911      	ldr	r1, [pc, #68]	; (bf80 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    bf3a:	4628      	mov	r0, r5
    bf3c:	f024 fe0d 	bl	30b5a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    bf40:	9505      	str	r5, [sp, #20]
    bf42:	7863      	ldrb	r3, [r4, #1]
    bf44:	211e      	movs	r1, #30
    bf46:	9304      	str	r3, [sp, #16]
    bf48:	78a3      	ldrb	r3, [r4, #2]
    bf4a:	4630      	mov	r0, r6
    bf4c:	9303      	str	r3, [sp, #12]
    bf4e:	78e3      	ldrb	r3, [r4, #3]
    bf50:	4a0c      	ldr	r2, [pc, #48]	; (bf84 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    bf52:	9302      	str	r3, [sp, #8]
    bf54:	7923      	ldrb	r3, [r4, #4]
    bf56:	9301      	str	r3, [sp, #4]
    bf58:	7963      	ldrb	r3, [r4, #5]
    bf5a:	9300      	str	r3, [sp, #0]
    bf5c:	79a3      	ldrb	r3, [r4, #6]
    bf5e:	f01e fd5b 	bl	2aa18 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    bf62:	b00a      	add	sp, #40	; 0x28
    bf64:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    bf66:	4908      	ldr	r1, [pc, #32]	; (bf88 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    bf68:	e7e7      	b.n	bf3a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    bf6a:	4908      	ldr	r1, [pc, #32]	; (bf8c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    bf6c:	e7e5      	b.n	bf3a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    bf6e:	4908      	ldr	r1, [pc, #32]	; (bf90 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    bf70:	e7e3      	b.n	bf3a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    bf72:	210a      	movs	r1, #10
    bf74:	4628      	mov	r0, r5
    bf76:	4a07      	ldr	r2, [pc, #28]	; (bf94 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    bf78:	f01e fd4e 	bl	2aa18 <snprintk>
		break;
    bf7c:	e7e0      	b.n	bf40 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    bf7e:	bf00      	nop
    bf80:	0003354a 	.word	0x0003354a
    bf84:	0003356c 	.word	0x0003356c
    bf88:	00033551 	.word	0x00033551
    bf8c:	00033558 	.word	0x00033558
    bf90:	00033562 	.word	0x00033562
    bf94:	00036f3d 	.word	0x00036f3d

0000bf98 <scan_filter_match>:
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    bf9c:	6803      	ldr	r3, [r0, #0]
{
    bf9e:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    bfa0:	4639      	mov	r1, r7
    bfa2:	6818      	ldr	r0, [r3, #0]
    bfa4:	f7ff ffbc 	bl	bf20 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Device found: %s", addr);
    bfa8:	b08a      	sub	sp, #40	; 0x28
    bfaa:	466a      	mov	r2, sp
    bfac:	4b09      	ldr	r3, [pc, #36]	; (bfd4 <scan_filter_match+0x3c>)
    bfae:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    bfb2:	6153      	str	r3, [r2, #20]
    bfb4:	4b08      	ldr	r3, [pc, #32]	; (bfd8 <scan_filter_match+0x40>)
    bfb6:	4809      	ldr	r0, [pc, #36]	; (bfdc <scan_filter_match+0x44>)
    bfb8:	e9c2 3706 	strd	r3, r7, [r2, #24]
    bfbc:	f240 3301 	movw	r3, #769	; 0x301
    bfc0:	8413      	strh	r3, [r2, #32]
    bfc2:	4b07      	ldr	r3, [pc, #28]	; (bfe0 <scan_filter_match+0x48>)
    bfc4:	f842 3f10 	str.w	r3, [r2, #16]!
    bfc8:	2300      	movs	r3, #0
    bfca:	f01e fc3a 	bl	2a842 <z_log_msg_static_create>
}
    bfce:	3720      	adds	r7, #32
    bfd0:	46bd      	mov	sp, r7
    bfd2:	bd80      	pop	{r7, pc}
    bfd4:	0003358f 	.word	0x0003358f
    bfd8:	00033a5c 	.word	0x00033a5c
    bfdc:	00031c24 	.word	0x00031c24
    bfe0:	01000004 	.word	0x01000004

0000bfe4 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
    bfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfe6:	b089      	sub	sp, #36	; 0x24
    bfe8:	af00      	add	r7, sp, #0
    bfea:	460d      	mov	r5, r1
    bfec:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bfee:	f020 f9ad 	bl	2c34c <bt_conn_get_dst>
    bff2:	4639      	mov	r1, r7
    bff4:	f7ff ff94 	bl	bf20 <bt_addr_le_to_str.constprop.0.isra.0>
    LOG_INF("Disconnected: %s, Reason: %u", addr, reason);
    bff8:	466e      	mov	r6, sp
    bffa:	b08a      	sub	sp, #40	; 0x28
    bffc:	466a      	mov	r2, sp
    bffe:	4b13      	ldr	r3, [pc, #76]	; (c04c <disconnected+0x68>)
    c000:	6215      	str	r5, [r2, #32]
    c002:	6153      	str	r3, [r2, #20]
    c004:	4b12      	ldr	r3, [pc, #72]	; (c050 <disconnected+0x6c>)
    c006:	4813      	ldr	r0, [pc, #76]	; (c054 <disconnected+0x70>)
    c008:	e9c2 3706 	strd	r3, r7, [r2, #24]
    c00c:	f240 3301 	movw	r3, #769	; 0x301
    c010:	8493      	strh	r3, [r2, #36]	; 0x24
    c012:	4b11      	ldr	r3, [pc, #68]	; (c058 <disconnected+0x74>)
    c014:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    c018:	f842 3f10 	str.w	r3, [r2, #16]!
    c01c:	2300      	movs	r3, #0
    c01e:	f01e fc10 	bl	2a842 <z_log_msg_static_create>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c022:	2300      	movs	r3, #0
    c024:	46b5      	mov	sp, r6
        if (devices_list[i].conn == conn) {
    c026:	200c      	movs	r0, #12
    c028:	4a0c      	ldr	r2, [pc, #48]	; (c05c <disconnected+0x78>)
    c02a:	fb00 f103 	mul.w	r1, r0, r3
    c02e:	5856      	ldr	r6, [r2, r1]
    c030:	188d      	adds	r5, r1, r2
    c032:	42b4      	cmp	r4, r6
    c034:	d106      	bne.n	c044 <disconnected+0x60>
            devices_list[i].conn = NULL;
    c036:	2300      	movs	r3, #0
    c038:	5053      	str	r3, [r2, r1]
            devices_list[i].destination = DESTINATION_UNKNOWN; // Set to an "unknown" or "unset" value
    c03a:	2302      	movs	r3, #2
    c03c:	712b      	strb	r3, [r5, #4]
}
    c03e:	3724      	adds	r7, #36	; 0x24
    c040:	46bd      	mov	sp, r7
    c042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c044:	3301      	adds	r3, #1
    c046:	2b05      	cmp	r3, #5
    c048:	d1ef      	bne.n	c02a <disconnected+0x46>
    c04a:	e7f8      	b.n	c03e <disconnected+0x5a>
    c04c:	000335a4 	.word	0x000335a4
    c050:	00033a26 	.word	0x00033a26
    c054:	00031c24 	.word	0x00031c24
    c058:	01000005 	.word	0x01000005
    c05c:	2000e004 	.word	0x2000e004

0000c060 <connected>:
static void connected(struct bt_conn *conn, uint8_t conn_err) {
    c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c064:	460c      	mov	r4, r1
    c066:	b08e      	sub	sp, #56	; 0x38
    c068:	af00      	add	r7, sp, #0
    c06a:	4606      	mov	r6, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c06c:	f020 f96e 	bl	2c34c <bt_conn_get_dst>
    c070:	f107 0118 	add.w	r1, r7, #24
    c074:	f7ff ff54 	bl	bf20 <bt_addr_le_to_str.constprop.0.isra.0>
    if (conn_err) {
    c078:	4d3d      	ldr	r5, [pc, #244]	; (c170 <connected+0x110>)
    c07a:	f107 0118 	add.w	r1, r7, #24
    c07e:	b1c4      	cbz	r4, c0b2 <connected+0x52>
        LOG_ERR("Failed to connect to %s (%u)", addr, conn_err);
    c080:	466e      	mov	r6, sp
    c082:	b08a      	sub	sp, #40	; 0x28
    c084:	466a      	mov	r2, sp
    c086:	4b3b      	ldr	r3, [pc, #236]	; (c174 <connected+0x114>)
    c088:	e9c2 1407 	strd	r1, r4, [r2, #28]
    c08c:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c090:	f240 3301 	movw	r3, #769	; 0x301
    c094:	8493      	strh	r3, [r2, #36]	; 0x24
    c096:	4b38      	ldr	r3, [pc, #224]	; (c178 <connected+0x118>)
    c098:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    c09c:	f842 3f10 	str.w	r3, [r2, #16]!
    c0a0:	4836      	ldr	r0, [pc, #216]	; (c17c <connected+0x11c>)
    c0a2:	2300      	movs	r3, #0
    c0a4:	f01e fbcd 	bl	2a842 <z_log_msg_static_create>
    c0a8:	46b5      	mov	sp, r6
}
    c0aa:	3738      	adds	r7, #56	; 0x38
    c0ac:	46bd      	mov	sp, r7
    c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LOG_INF("Connected: %s", addr);
    c0b2:	46e8      	mov	r8, sp
    c0b4:	b08a      	sub	sp, #40	; 0x28
    c0b6:	466a      	mov	r2, sp
    c0b8:	4b31      	ldr	r3, [pc, #196]	; (c180 <connected+0x120>)
    c0ba:	61d1      	str	r1, [r2, #28]
    c0bc:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c0c0:	f240 3301 	movw	r3, #769	; 0x301
    c0c4:	8413      	strh	r3, [r2, #32]
    c0c6:	4b2f      	ldr	r3, [pc, #188]	; (c184 <connected+0x124>)
    c0c8:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c0cc:	f842 3f10 	str.w	r3, [r2, #16]!
    c0d0:	482a      	ldr	r0, [pc, #168]	; (c17c <connected+0x11c>)
    c0d2:	4623      	mov	r3, r4
    c0d4:	f01e fbb5 	bl	2a842 <z_log_msg_static_create>
        if (!devices_list[i].conn) {
    c0d8:	f04f 0c0c 	mov.w	ip, #12
    c0dc:	46c5      	mov	sp, r8
    c0de:	4a2a      	ldr	r2, [pc, #168]	; (c188 <connected+0x128>)
    c0e0:	fb0c f004 	mul.w	r0, ip, r4
    c0e4:	5813      	ldr	r3, [r2, r0]
    c0e6:	1881      	adds	r1, r0, r2
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d13d      	bne.n	c168 <connected+0x108>
            devices_list[i].conn = conn;
    c0ec:	5016      	str	r6, [r2, r0]
            devices_list[i].destination = DESTINATION_UNKNOWN;
    c0ee:	2202      	movs	r2, #2
			LOG_INF("Connection in array initialized.");
    c0f0:	466c      	mov	r4, sp
    c0f2:	b088      	sub	sp, #32
            devices_list[i].destination = DESTINATION_UNKNOWN;
    c0f4:	710a      	strb	r2, [r1, #4]
			devices_list[i].rx_handle = 0;
    c0f6:	80cb      	strh	r3, [r1, #6]
			devices_list[i].tx_handle = 0; //populate destination, rx and tx after disovery.
    c0f8:	810b      	strh	r3, [r1, #8]
			LOG_INF("Connection in array initialized.");
    c0fa:	466a      	mov	r2, sp
    c0fc:	4923      	ldr	r1, [pc, #140]	; (c18c <connected+0x12c>)
    c0fe:	481f      	ldr	r0, [pc, #124]	; (c17c <connected+0x11c>)
    c100:	6151      	str	r1, [r2, #20]
    c102:	4923      	ldr	r1, [pc, #140]	; (c190 <connected+0x130>)
    c104:	6191      	str	r1, [r2, #24]
    c106:	2103      	movs	r1, #3
    c108:	f842 1f10 	str.w	r1, [r2, #16]!
    c10c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c110:	f01e fb97 	bl	2a842 <z_log_msg_static_create>
    c114:	46a5      	mov	sp, r4
    int err = bt_gatt_dm_start(conn, BT_UUID_ESP32_SERVICE, &discovery_cb, NULL);
    c116:	1d3a      	adds	r2, r7, #4
    c118:	4694      	mov	ip, r2
    c11a:	4b1e      	ldr	r3, [pc, #120]	; (c194 <connected+0x134>)
    c11c:	f103 0e10 	add.w	lr, r3, #16
    c120:	4614      	mov	r4, r2
    c122:	6818      	ldr	r0, [r3, #0]
    c124:	6859      	ldr	r1, [r3, #4]
    c126:	3308      	adds	r3, #8
    c128:	c403      	stmia	r4!, {r0, r1}
    c12a:	4573      	cmp	r3, lr
    c12c:	4622      	mov	r2, r4
    c12e:	d1f7      	bne.n	c120 <connected+0xc0>
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	4661      	mov	r1, ip
    c134:	7023      	strb	r3, [r4, #0]
    c136:	4630      	mov	r0, r6
    c138:	2300      	movs	r3, #0
    c13a:	4a17      	ldr	r2, [pc, #92]	; (c198 <connected+0x138>)
    c13c:	f004 fcae 	bl	10a9c <bt_gatt_dm_start>
    if (err) {
    c140:	2800      	cmp	r0, #0
    c142:	d0b2      	beq.n	c0aa <connected+0x4a>
        LOG_ERR("Could not start service discovery, err %d", err);
    c144:	466c      	mov	r4, sp
    c146:	b088      	sub	sp, #32
    c148:	466a      	mov	r2, sp
    c14a:	4b14      	ldr	r3, [pc, #80]	; (c19c <connected+0x13c>)
    c14c:	61d0      	str	r0, [r2, #28]
    c14e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c152:	2304      	movs	r3, #4
    c154:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c158:	f842 3f10 	str.w	r3, [r2, #16]!
    c15c:	4807      	ldr	r0, [pc, #28]	; (c17c <connected+0x11c>)
    c15e:	2300      	movs	r3, #0
    c160:	f01e fb6f 	bl	2a842 <z_log_msg_static_create>
    c164:	46a5      	mov	sp, r4
    c166:	e7a0      	b.n	c0aa <connected+0x4a>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c168:	3401      	adds	r4, #1
    c16a:	2c05      	cmp	r4, #5
    c16c:	d1b8      	bne.n	c0e0 <connected+0x80>
    c16e:	e7d2      	b.n	c116 <connected+0xb6>
    c170:	00033a1c 	.word	0x00033a1c
    c174:	000335c5 	.word	0x000335c5
    c178:	01000005 	.word	0x01000005
    c17c:	00031c24 	.word	0x00031c24
    c180:	000335e6 	.word	0x000335e6
    c184:	01000004 	.word	0x01000004
    c188:	2000e004 	.word	0x2000e004
    c18c:	000335f8 	.word	0x000335f8
    c190:	000339c8 	.word	0x000339c8
    c194:	00031ddc 	.word	0x00031ddc
    c198:	2000c804 	.word	0x2000c804
    c19c:	0003361d 	.word	0x0003361d

0000c1a0 <get_conn_from_destination>:
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c1a0:	4a08      	ldr	r2, [pc, #32]	; (c1c4 <get_conn_from_destination+0x24>)
    c1a2:	2300      	movs	r3, #0
    c1a4:	4611      	mov	r1, r2
struct bt_conn* get_conn_from_destination(enum ble_destination destination) {
    c1a6:	b510      	push	{r4, lr}
        if (devices_list[i].destination == destination) {
    c1a8:	7914      	ldrb	r4, [r2, #4]
    c1aa:	4284      	cmp	r4, r0
    c1ac:	d103      	bne.n	c1b6 <get_conn_from_destination+0x16>
            return devices_list[i].conn;
    c1ae:	220c      	movs	r2, #12
    c1b0:	4353      	muls	r3, r2
    c1b2:	58c8      	ldr	r0, [r1, r3]
}
    c1b4:	bd10      	pop	{r4, pc}
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c1b6:	3301      	adds	r3, #1
    c1b8:	2b05      	cmp	r3, #5
    c1ba:	f102 020c 	add.w	r2, r2, #12
    c1be:	d1f3      	bne.n	c1a8 <get_conn_from_destination+0x8>
    return NULL; // No connection found for the given destination
    c1c0:	2000      	movs	r0, #0
    c1c2:	e7f7      	b.n	c1b4 <get_conn_from_destination+0x14>
    c1c4:	2000e004 	.word	0x2000e004

0000c1c8 <ble_transmit>:
int ble_transmit(struct bt_conn *conn, uint8_t *data, size_t length) {
    c1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1cc:	b084      	sub	sp, #16
	LOG_INF("Transmit called...");
    c1ce:	466d      	mov	r5, sp
int ble_transmit(struct bt_conn *conn, uint8_t *data, size_t length) {
    c1d0:	af04      	add	r7, sp, #16
	LOG_INF("Transmit called...");
    c1d2:	b088      	sub	sp, #32
int ble_transmit(struct bt_conn *conn, uint8_t *data, size_t length) {
    c1d4:	4692      	mov	sl, r2
    c1d6:	4604      	mov	r4, r0
    c1d8:	4688      	mov	r8, r1
	LOG_INF("Transmit called...");
    c1da:	aa04      	add	r2, sp, #16
    c1dc:	f04f 0903 	mov.w	r9, #3
    c1e0:	4b32      	ldr	r3, [pc, #200]	; (c2ac <ble_transmit+0xe4>)
    c1e2:	4e33      	ldr	r6, [pc, #204]	; (c2b0 <ble_transmit+0xe8>)
    c1e4:	6153      	str	r3, [r2, #20]
    c1e6:	6196      	str	r6, [r2, #24]
    c1e8:	2300      	movs	r3, #0
    c1ea:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c1ee:	4831      	ldr	r0, [pc, #196]	; (c2b4 <ble_transmit+0xec>)
    c1f0:	f842 9f10 	str.w	r9, [r2, #16]!
    c1f4:	f01e fb25 	bl	2a842 <z_log_msg_static_create>
    c1f8:	46ad      	mov	sp, r5
	if (!data || !length)
    c1fa:	f1b8 0f00 	cmp.w	r8, #0
    c1fe:	d011      	beq.n	c224 <ble_transmit+0x5c>
    c200:	f1ba 0f00 	cmp.w	sl, #0
    c204:	d00e      	beq.n	c224 <ble_transmit+0x5c>
	if (!conn) {
    c206:	b984      	cbnz	r4, c22a <ble_transmit+0x62>
		LOG_INF("No connection found for destination");
    c208:	b088      	sub	sp, #32
    c20a:	aa04      	add	r2, sp, #16
    c20c:	4b2a      	ldr	r3, [pc, #168]	; (c2b8 <ble_transmit+0xf0>)
    c20e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c212:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c216:	4827      	ldr	r0, [pc, #156]	; (c2b4 <ble_transmit+0xec>)
    c218:	4623      	mov	r3, r4
    c21a:	f842 9f10 	str.w	r9, [r2, #16]!
    c21e:	f01e fb10 	bl	2a842 <z_log_msg_static_create>
    c222:	46ad      	mov	sp, r5
		return -EINVAL;
    c224:	f06f 0415 	mvn.w	r4, #21
    c228:	e03c      	b.n	c2a4 <ble_transmit+0xdc>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c22a:	2300      	movs	r3, #0
        if (devices_list[i].conn == conn) {
    c22c:	200c      	movs	r0, #12
    c22e:	4a23      	ldr	r2, [pc, #140]	; (c2bc <ble_transmit+0xf4>)
    c230:	fb00 f103 	mul.w	r1, r0, r3
    c234:	188d      	adds	r5, r1, r2
    c236:	5851      	ldr	r1, [r2, r1]
    c238:	42a1      	cmp	r1, r4
    c23a:	d11e      	bne.n	c27a <ble_transmit+0xb2>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
    c23c:	8929      	ldrh	r1, [r5, #8]
    c23e:	2500      	movs	r5, #0
    c240:	4620      	mov	r0, r4
    c242:	4642      	mov	r2, r8
    c244:	e9cd 5501 	strd	r5, r5, [sp, #4]
    c248:	9500      	str	r5, [sp, #0]
    c24a:	fa1f f38a 	uxth.w	r3, sl
    c24e:	f00d f84d 	bl	192ec <bt_gatt_write_without_response_cb>
    if (err) {
    c252:	4604      	mov	r4, r0
    c254:	b330      	cbz	r0, c2a4 <ble_transmit+0xdc>
        LOG_ERR("Failed to send data over BLE: %d", err);
    c256:	46e8      	mov	r8, sp
    c258:	b088      	sub	sp, #32
    c25a:	aa04      	add	r2, sp, #16
    c25c:	4b18      	ldr	r3, [pc, #96]	; (c2c0 <ble_transmit+0xf8>)
    c25e:	61d0      	str	r0, [r2, #28]
    c260:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c264:	2304      	movs	r3, #4
    c266:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c26a:	f842 3f10 	str.w	r3, [r2, #16]!
    c26e:	4811      	ldr	r0, [pc, #68]	; (c2b4 <ble_transmit+0xec>)
    c270:	462b      	mov	r3, r5
    c272:	f01e fae6 	bl	2a842 <z_log_msg_static_create>
    c276:	46c5      	mov	sp, r8
        return err;
    c278:	e014      	b.n	c2a4 <ble_transmit+0xdc>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c27a:	3301      	adds	r3, #1
    c27c:	2b05      	cmp	r3, #5
    c27e:	d1d7      	bne.n	c230 <ble_transmit+0x68>
        LOG_ERR("Device not found for connection");
    c280:	466c      	mov	r4, sp
    c282:	b088      	sub	sp, #32
    c284:	aa04      	add	r2, sp, #16
    c286:	4b0f      	ldr	r3, [pc, #60]	; (c2c4 <ble_transmit+0xfc>)
    c288:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c28c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c290:	2303      	movs	r3, #3
    c292:	4808      	ldr	r0, [pc, #32]	; (c2b4 <ble_transmit+0xec>)
    c294:	f842 3f10 	str.w	r3, [r2, #16]!
    c298:	2300      	movs	r3, #0
    c29a:	f01e fad2 	bl	2a842 <z_log_msg_static_create>
    c29e:	46a5      	mov	sp, r4
        return -ENODEV;
    c2a0:	f06f 0412 	mvn.w	r4, #18
}
    c2a4:	4620      	mov	r0, r4
    c2a6:	46bd      	mov	sp, r7
    c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2ac:	0003364b 	.word	0x0003364b
    c2b0:	00033a6e 	.word	0x00033a6e
    c2b4:	00031c24 	.word	0x00031c24
    c2b8:	00033662 	.word	0x00033662
    c2bc:	2000e004 	.word	0x2000e004
    c2c0:	000336ae 	.word	0x000336ae
    c2c4:	0003368a 	.word	0x0003368a

0000c2c8 <get_device_name>:
char *get_device_name(struct bt_conn *conn) {
    c2c8:	b500      	push	{lr}
    c2ca:	b089      	sub	sp, #36	; 0x24
    if (!conn) {
    c2cc:	b918      	cbnz	r0, c2d6 <get_device_name+0xe>
        return NULL;
    c2ce:	2000      	movs	r0, #0
}
    c2d0:	b009      	add	sp, #36	; 0x24
    c2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    if (bt_conn_get_info(conn, &info) < 0) {
    c2d6:	4669      	mov	r1, sp
    c2d8:	f009 fd8c 	bl	15df4 <bt_conn_get_info>
    c2dc:	2800      	cmp	r0, #0
    c2de:	dbf6      	blt.n	c2ce <get_device_name+0x6>
    if (info.type == BT_CONN_TYPE_LE) {
    c2e0:	f89d 3000 	ldrb.w	r3, [sp]
    c2e4:	2b01      	cmp	r3, #1
    c2e6:	d1f2      	bne.n	c2ce <get_device_name+0x6>
        strncpy(name, info.le.dst->a.val, BT_NAME_MAX_LEN);
    c2e8:	4b05      	ldr	r3, [pc, #20]	; (c300 <get_device_name+0x38>)
    c2ea:	9902      	ldr	r1, [sp, #8]
    c2ec:	22f8      	movs	r2, #248	; 0xf8
    c2ee:	4618      	mov	r0, r3
    c2f0:	3101      	adds	r1, #1
    c2f2:	f024 fc4c 	bl	30b8e <strncpy>
        name[BT_NAME_MAX_LEN] = '\0'; // Ensure null-termination
    c2f6:	2200      	movs	r2, #0
    c2f8:	f880 20f8 	strb.w	r2, [r0, #248]	; 0xf8
        return name;
    c2fc:	e7e8      	b.n	c2d0 <get_device_name+0x8>
    c2fe:	bf00      	nop
    c300:	2000ed76 	.word	0x2000ed76

0000c304 <discovery_completed>:
{
    c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c308:	b0a1      	sub	sp, #132	; 0x84
	LOG_INF("discover completed called");
    c30a:	46e8      	mov	r8, sp
{
    c30c:	af00      	add	r7, sp, #0
	LOG_INF("discover completed called");
    c30e:	b088      	sub	sp, #32
{
    c310:	4605      	mov	r5, r0
	LOG_INF("discover completed called");
    c312:	466a      	mov	r2, sp
    c314:	4bb8      	ldr	r3, [pc, #736]	; (c5f8 <discovery_completed+0x2f4>)
    c316:	4cb9      	ldr	r4, [pc, #740]	; (c5fc <discovery_completed+0x2f8>)
    c318:	6153      	str	r3, [r2, #20]
    c31a:	2303      	movs	r3, #3
    c31c:	6194      	str	r4, [r2, #24]
    c31e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c322:	f842 3f10 	str.w	r3, [r2, #16]!
    c326:	48b6      	ldr	r0, [pc, #728]	; (c600 <discovery_completed+0x2fc>)
    c328:	2300      	movs	r3, #0
    c32a:	f01e fa8a 	bl	2a842 <z_log_msg_static_create>
    err = bt_conn_get_info(bt_gatt_dm_conn_get(disc), &info);
    c32e:	4628      	mov	r0, r5
    c330:	46c5      	mov	sp, r8
    c332:	f01f f8ce 	bl	2b4d2 <bt_gatt_dm_conn_get>
    c336:	f107 0138 	add.w	r1, r7, #56	; 0x38
    c33a:	f009 fd5b 	bl	15df4 <bt_conn_get_info>
    if (err) {
    c33e:	4682      	mov	sl, r0
    c340:	b388      	cbz	r0, c3a6 <discovery_completed+0xa2>
        LOG_ERR("Unable to get connection info (err %d)", err);
    c342:	b088      	sub	sp, #32
    c344:	466a      	mov	r2, sp
    c346:	4baf      	ldr	r3, [pc, #700]	; (c604 <discovery_completed+0x300>)
    c348:	61d0      	str	r0, [r2, #28]
    c34a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c34e:	2304      	movs	r3, #4
    c350:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c354:	f842 3f10 	str.w	r3, [r2, #16]!
    c358:	2300      	movs	r3, #0
        LOG_INF("Connection status: %u", info.state);
    c35a:	48a9      	ldr	r0, [pc, #676]	; (c600 <discovery_completed+0x2fc>)
    c35c:	f01e fa71 	bl	2a842 <z_log_msg_static_create>
	chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_RX);
    c360:	f107 0210 	add.w	r2, r7, #16
    c364:	46c5      	mov	sp, r8
    c366:	4694      	mov	ip, r2
    c368:	4ba7      	ldr	r3, [pc, #668]	; (c608 <discovery_completed+0x304>)
    c36a:	f103 0e10 	add.w	lr, r3, #16
    c36e:	4616      	mov	r6, r2
    c370:	6818      	ldr	r0, [r3, #0]
    c372:	6859      	ldr	r1, [r3, #4]
    c374:	3308      	adds	r3, #8
    c376:	c603      	stmia	r6!, {r0, r1}
    c378:	4573      	cmp	r3, lr
    c37a:	4632      	mov	r2, r6
    c37c:	d1f7      	bne.n	c36e <discovery_completed+0x6a>
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	4661      	mov	r1, ip
    c382:	7033      	strb	r3, [r6, #0]
    c384:	4628      	mov	r0, r5
    c386:	f004 fb61 	bl	10a4c <bt_gatt_dm_char_by_uuid>
	if (!chrc) {
    c38a:	4606      	mov	r6, r0
    c38c:	2800      	cmp	r0, #0
    c38e:	d13e      	bne.n	c40e <discovery_completed+0x10a>
		LOG_ERR("Missing ESP32 RX characteristic");
    c390:	46e8      	mov	r8, sp
    c392:	b088      	sub	sp, #32
    c394:	466a      	mov	r2, sp
    c396:	4b9d      	ldr	r3, [pc, #628]	; (c60c <discovery_completed+0x308>)
		LOG_ERR("Missing ESP32 TX characteristic");
    c398:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c39c:	2303      	movs	r3, #3
    c39e:	f842 3f10 	str.w	r3, [r2, #16]!
    c3a2:	4633      	mov	r3, r6
    c3a4:	e058      	b.n	c458 <discovery_completed+0x154>
        LOG_INF("Connection role: %u", info.role);
    c3a6:	b088      	sub	sp, #32
    c3a8:	466a      	mov	r2, sp
    c3aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    c3ae:	f04f 0904 	mov.w	r9, #4
    c3b2:	4997      	ldr	r1, [pc, #604]	; (c610 <discovery_completed+0x30c>)
    c3b4:	61d3      	str	r3, [r2, #28]
    c3b6:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c3ba:	4603      	mov	r3, r0
    c3bc:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    c3c0:	488f      	ldr	r0, [pc, #572]	; (c600 <discovery_completed+0x2fc>)
    c3c2:	f842 9f10 	str.w	r9, [r2, #16]!
    c3c6:	f01e fa3c 	bl	2a842 <z_log_msg_static_create>
    c3ca:	46c5      	mov	sp, r8
        LOG_INF("Connection type: %u", info.type);
    c3cc:	b088      	sub	sp, #32
    c3ce:	466e      	mov	r6, sp
    c3d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    c3d4:	46b3      	mov	fp, r6
    c3d6:	4a8f      	ldr	r2, [pc, #572]	; (c614 <discovery_completed+0x310>)
    c3d8:	61f3      	str	r3, [r6, #28]
    c3da:	e9c6 2405 	strd	r2, r4, [r6, #20]
    c3de:	f84b 9f10 	str.w	r9, [fp, #16]!
    c3e2:	4653      	mov	r3, sl
    c3e4:	465a      	mov	r2, fp
    c3e6:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    c3ea:	4885      	ldr	r0, [pc, #532]	; (c600 <discovery_completed+0x2fc>)
    c3ec:	f01e fa29 	bl	2a842 <z_log_msg_static_create>
    c3f0:	46c5      	mov	sp, r8
        LOG_INF("Connection status: %u", info.state);
    c3f2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
    c3f6:	46b5      	mov	sp, r6
    c3f8:	4a87      	ldr	r2, [pc, #540]	; (c618 <discovery_completed+0x314>)
    c3fa:	61f3      	str	r3, [r6, #28]
    c3fc:	e9c6 2405 	strd	r2, r4, [r6, #20]
    c400:	4653      	mov	r3, sl
    c402:	465a      	mov	r2, fp
    c404:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    c408:	f8c6 9010 	str.w	r9, [r6, #16]
    c40c:	e7a5      	b.n	c35a <discovery_completed+0x56>
	param_rx.value_handle = chrc->handle;
    c40e:	8883      	ldrh	r3, [r0, #4]
    c410:	f8df 9208 	ldr.w	r9, [pc, #520]	; c61c <discovery_completed+0x318>
	LOG_INF("ESP32 RX handle: %d", param_rx.value_handle);
    c414:	46e8      	mov	r8, sp
    c416:	b088      	sub	sp, #32
    c418:	466a      	mov	r2, sp
	param_rx.value_handle = chrc->handle;
    c41a:	f8a9 300c 	strh.w	r3, [r9, #12]
	LOG_INF("ESP32 RX handle: %d", param_rx.value_handle);
    c41e:	f04f 0a04 	mov.w	sl, #4
    c422:	497f      	ldr	r1, [pc, #508]	; (c620 <discovery_completed+0x31c>)
    c424:	61d3      	str	r3, [r2, #28]
    c426:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c42a:	2300      	movs	r3, #0
    c42c:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    c430:	4873      	ldr	r0, [pc, #460]	; (c600 <discovery_completed+0x2fc>)
    c432:	f842 af10 	str.w	sl, [r2, #16]!
    c436:	f01e fa04 	bl	2a842 <z_log_msg_static_create>
	chrc_value = bt_gatt_dm_attr_next(disc, chrc); // Get the characteristic value attribute
    c43a:	4631      	mov	r1, r6
    c43c:	46c5      	mov	sp, r8
    c43e:	4628      	mov	r0, r5
    c440:	f01f f86b 	bl	2b51a <bt_gatt_dm_attr_next>
	if (!chrc_value) {
    c444:	4603      	mov	r3, r0
    c446:	bb30      	cbnz	r0, c496 <discovery_completed+0x192>
		LOG_ERR("Missing ESP32 RX value");
    c448:	b088      	sub	sp, #32
    c44a:	466a      	mov	r2, sp
    c44c:	4975      	ldr	r1, [pc, #468]	; (c624 <discovery_completed+0x320>)
    c44e:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c452:	2103      	movs	r1, #3
    c454:	f842 1f10 	str.w	r1, [r2, #16]!
    c458:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c45c:	4868      	ldr	r0, [pc, #416]	; (c600 <discovery_completed+0x2fc>)
    c45e:	f01e f9f0 	bl	2a842 <z_log_msg_static_create>
    c462:	46c5      	mov	sp, r8
    err = bt_gatt_dm_data_release(disc);
    c464:	4628      	mov	r0, r5
    c466:	f01f f895 	bl	2b594 <bt_gatt_dm_data_release>
    if (err) {
    c46a:	b180      	cbz	r0, c48e <discovery_completed+0x18a>
        LOG_ERR("Could not release discovery data, err: %d", err);
    c46c:	466d      	mov	r5, sp
    c46e:	b088      	sub	sp, #32
    c470:	466a      	mov	r2, sp
    c472:	4b6d      	ldr	r3, [pc, #436]	; (c628 <discovery_completed+0x324>)
    c474:	61d0      	str	r0, [r2, #28]
    c476:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c47a:	2304      	movs	r3, #4
    c47c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c480:	f842 3f10 	str.w	r3, [r2, #16]!
    c484:	485e      	ldr	r0, [pc, #376]	; (c600 <discovery_completed+0x2fc>)
    c486:	2300      	movs	r3, #0
    c488:	f01e f9db 	bl	2a842 <z_log_msg_static_create>
    c48c:	46ad      	mov	sp, r5
}
    c48e:	3784      	adds	r7, #132	; 0x84
    c490:	46bd      	mov	sp, r7
    c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_uuid_to_str(chrc_value->uuid, uuid_str, sizeof(uuid_str));
    c496:	2225      	movs	r2, #37	; 0x25
    c498:	6800      	ldr	r0, [r0, #0]
    c49a:	f107 0158 	add.w	r1, r7, #88	; 0x58
    c49e:	f006 fa17 	bl	128d0 <bt_uuid_to_str>
	LOG_INF("ESP32 RX UUID: %s", uuid_str);
    c4a2:	b08a      	sub	sp, #40	; 0x28
    c4a4:	466a      	mov	r2, sp
    c4a6:	4b61      	ldr	r3, [pc, #388]	; (c62c <discovery_completed+0x328>)
    c4a8:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c4ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c4b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c4b4:	61d3      	str	r3, [r2, #28]
    c4b6:	f240 3301 	movw	r3, #769	; 0x301
    c4ba:	8413      	strh	r3, [r2, #32]
    c4bc:	4b5c      	ldr	r3, [pc, #368]	; (c630 <discovery_completed+0x32c>)
    c4be:	4850      	ldr	r0, [pc, #320]	; (c600 <discovery_completed+0x2fc>)
    c4c0:	f842 3f10 	str.w	r3, [r2, #16]!
    c4c4:	2300      	movs	r3, #0
    c4c6:	f01e f9bc 	bl	2a842 <z_log_msg_static_create>
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    c4ca:	f642 1302 	movw	r3, #10498	; 0x2902
    c4ce:	f04f 0b00 	mov.w	fp, #0
    c4d2:	46c5      	mov	sp, r8
    c4d4:	4631      	mov	r1, r6
    c4d6:	4628      	mov	r0, r5
    c4d8:	f107 0208 	add.w	r2, r7, #8
    c4dc:	817b      	strh	r3, [r7, #10]
    c4de:	f887 b008 	strb.w	fp, [r7, #8]
    c4e2:	f01f f845 	bl	2b570 <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    c4e6:	4603      	mov	r3, r0
    c4e8:	b918      	cbnz	r0, c4f2 <discovery_completed+0x1ee>
		LOG_ERR("Missing RX CCC descriptor");
    c4ea:	b088      	sub	sp, #32
    c4ec:	466a      	mov	r2, sp
    c4ee:	4951      	ldr	r1, [pc, #324]	; (c634 <discovery_completed+0x330>)
    c4f0:	e7ad      	b.n	c44e <discovery_completed+0x14a>
	param_rx.ccc_handle = desc->handle;
    c4f2:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_rx);
    c4f4:	4628      	mov	r0, r5
	param_rx.ccc_handle = desc->handle;
    c4f6:	f8a9 300e 	strh.w	r3, [r9, #14]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_rx);
    c4fa:	f01e ffea 	bl	2b4d2 <bt_gatt_dm_conn_get>
    c4fe:	4649      	mov	r1, r9
    c500:	f00c ff78 	bl	193f4 <bt_gatt_subscribe>
	if (err) {
    c504:	b170      	cbz	r0, c524 <discovery_completed+0x220>
    LOG_ERR("Subscribe RX failed (err %d)", err);
    c506:	b088      	sub	sp, #32
    c508:	466a      	mov	r2, sp
    c50a:	4b4b      	ldr	r3, [pc, #300]	; (c638 <discovery_completed+0x334>)
    c50c:	61d0      	str	r0, [r2, #28]
    c50e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c512:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c516:	465b      	mov	r3, fp
    c518:	4839      	ldr	r0, [pc, #228]	; (c600 <discovery_completed+0x2fc>)
    c51a:	f842 af10 	str.w	sl, [r2, #16]!
    c51e:	f01e f990 	bl	2a842 <z_log_msg_static_create>
    c522:	46c5      	mov	sp, r8
	chrc = bt_gatt_dm_char_by_uuid(disc, BT_UUID_ESP32_TX);
    c524:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c528:	4694      	mov	ip, r2
    c52a:	4b44      	ldr	r3, [pc, #272]	; (c63c <discovery_completed+0x338>)
    c52c:	f103 0e10 	add.w	lr, r3, #16
    c530:	4616      	mov	r6, r2
    c532:	6818      	ldr	r0, [r3, #0]
    c534:	6859      	ldr	r1, [r3, #4]
    c536:	3308      	adds	r3, #8
    c538:	c603      	stmia	r6!, {r0, r1}
    c53a:	4573      	cmp	r3, lr
    c53c:	4632      	mov	r2, r6
    c53e:	d1f7      	bne.n	c530 <discovery_completed+0x22c>
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	4661      	mov	r1, ip
    c544:	7033      	strb	r3, [r6, #0]
    c546:	4628      	mov	r0, r5
    c548:	f004 fa80 	bl	10a4c <bt_gatt_dm_char_by_uuid>
	if (!chrc) {
    c54c:	4606      	mov	r6, r0
    c54e:	b920      	cbnz	r0, c55a <discovery_completed+0x256>
		LOG_ERR("Missing ESP32 TX characteristic");
    c550:	46e8      	mov	r8, sp
    c552:	b088      	sub	sp, #32
    c554:	466a      	mov	r2, sp
    c556:	4b3a      	ldr	r3, [pc, #232]	; (c640 <discovery_completed+0x33c>)
    c558:	e71e      	b.n	c398 <discovery_completed+0x94>
	param_tx.value_handle = chrc->handle;
    c55a:	8883      	ldrh	r3, [r0, #4]
    c55c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c644 <discovery_completed+0x340>
	LOG_INF("ESP32 TX handle: %d", param_tx.value_handle);
    c560:	46e8      	mov	r8, sp
    c562:	b088      	sub	sp, #32
    c564:	466a      	mov	r2, sp
	param_tx.value_handle = chrc->handle;
    c566:	f8aa 300c 	strh.w	r3, [sl, #12]
	LOG_INF("ESP32 TX handle: %d", param_tx.value_handle);
    c56a:	61d3      	str	r3, [r2, #28]
    c56c:	2304      	movs	r3, #4
    c56e:	4936      	ldr	r1, [pc, #216]	; (c648 <discovery_completed+0x344>)
    c570:	4823      	ldr	r0, [pc, #140]	; (c600 <discovery_completed+0x2fc>)
    c572:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c576:	f842 3f10 	str.w	r3, [r2, #16]!
    c57a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    c57e:	2300      	movs	r3, #0
    c580:	f01e f95f 	bl	2a842 <z_log_msg_static_create>
	chrc_value = bt_gatt_dm_attr_next(disc, chrc); // Get the characteristic value attribute
    c584:	4631      	mov	r1, r6
    c586:	46c5      	mov	sp, r8
    c588:	4628      	mov	r0, r5
    c58a:	f01e ffc6 	bl	2b51a <bt_gatt_dm_attr_next>
	if (!chrc_value) {
    c58e:	4603      	mov	r3, r0
    c590:	b918      	cbnz	r0, c59a <discovery_completed+0x296>
		LOG_ERR("Missing ESP32 TX value");
    c592:	b088      	sub	sp, #32
    c594:	466a      	mov	r2, sp
    c596:	492d      	ldr	r1, [pc, #180]	; (c64c <discovery_completed+0x348>)
    c598:	e759      	b.n	c44e <discovery_completed+0x14a>
	bt_uuid_to_str(chrc_value->uuid, uuid_str, sizeof(uuid_str));
    c59a:	2225      	movs	r2, #37	; 0x25
    c59c:	6800      	ldr	r0, [r0, #0]
    c59e:	f107 0158 	add.w	r1, r7, #88	; 0x58
    c5a2:	f006 f995 	bl	128d0 <bt_uuid_to_str>
	LOG_INF("ESP32 TX UUID: %s", uuid_str);
    c5a6:	b08a      	sub	sp, #40	; 0x28
    c5a8:	466a      	mov	r2, sp
    c5aa:	4b29      	ldr	r3, [pc, #164]	; (c650 <discovery_completed+0x34c>)
    c5ac:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c5b0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c5b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c5b8:	61d3      	str	r3, [r2, #28]
    c5ba:	f240 3301 	movw	r3, #769	; 0x301
    c5be:	8413      	strh	r3, [r2, #32]
    c5c0:	4b1b      	ldr	r3, [pc, #108]	; (c630 <discovery_completed+0x32c>)
    c5c2:	480f      	ldr	r0, [pc, #60]	; (c600 <discovery_completed+0x2fc>)
    c5c4:	f842 3f10 	str.w	r3, [r2, #16]!
    c5c8:	2300      	movs	r3, #0
    c5ca:	f01e f93a 	bl	2a842 <z_log_msg_static_create>
	desc = bt_gatt_dm_desc_by_uuid(disc, chrc, BT_UUID_GATT_CCC);
    c5ce:	f642 1302 	movw	r3, #10498	; 0x2902
    c5d2:	f04f 0b00 	mov.w	fp, #0
    c5d6:	46c5      	mov	sp, r8
    c5d8:	4631      	mov	r1, r6
    c5da:	4628      	mov	r0, r5
    c5dc:	f107 020c 	add.w	r2, r7, #12
    c5e0:	81fb      	strh	r3, [r7, #14]
    c5e2:	f887 b00c 	strb.w	fp, [r7, #12]
    c5e6:	f01e ffc3 	bl	2b570 <bt_gatt_dm_desc_by_uuid>
	if (!desc) {
    c5ea:	4603      	mov	r3, r0
    c5ec:	bba0      	cbnz	r0, c658 <discovery_completed+0x354>
		LOG_ERR("Missing TX CCC descriptor");
    c5ee:	b088      	sub	sp, #32
    c5f0:	466a      	mov	r2, sp
    c5f2:	4918      	ldr	r1, [pc, #96]	; (c654 <discovery_completed+0x350>)
    c5f4:	e72b      	b.n	c44e <discovery_completed+0x14a>
    c5f6:	bf00      	nop
    c5f8:	000336d3 	.word	0x000336d3
    c5fc:	000339f2 	.word	0x000339f2
    c600:	00031c24 	.word	0x00031c24
    c604:	000336f1 	.word	0x000336f1
    c608:	00031ded 	.word	0x00031ded
    c60c:	00033766 	.word	0x00033766
    c610:	0003371c 	.word	0x0003371c
    c614:	00033734 	.word	0x00033734
    c618:	0003374c 	.word	0x0003374c
    c61c:	2000c7cc 	.word	0x2000c7cc
    c620:	0003378a 	.word	0x0003378a
    c624:	000337a2 	.word	0x000337a2
    c628:	0003394f 	.word	0x0003394f
    c62c:	000337bd 	.word	0x000337bd
    c630:	01000004 	.word	0x01000004
    c634:	000337d3 	.word	0x000337d3
    c638:	000337f1 	.word	0x000337f1
    c63c:	00031dfe 	.word	0x00031dfe
    c640:	00033812 	.word	0x00033812
    c644:	2000c7b0 	.word	0x2000c7b0
    c648:	00033836 	.word	0x00033836
    c64c:	0003384e 	.word	0x0003384e
    c650:	00033869 	.word	0x00033869
    c654:	0003387f 	.word	0x0003387f
	param_tx.ccc_handle = desc->handle;
    c658:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_tx);
    c65a:	4628      	mov	r0, r5
	param_tx.ccc_handle = desc->handle;
    c65c:	f8aa 300e 	strh.w	r3, [sl, #14]
	err = bt_gatt_subscribe(bt_gatt_dm_conn_get(disc), &param_tx);
    c660:	f01e ff37 	bl	2b4d2 <bt_gatt_dm_conn_get>
    c664:	4651      	mov	r1, sl
    c666:	f00c fec5 	bl	193f4 <bt_gatt_subscribe>
	if (err) {
    c66a:	b178      	cbz	r0, c68c <discovery_completed+0x388>
		LOG_ERR("Subscribe TX failed (err %d)", err);
    c66c:	b088      	sub	sp, #32
    c66e:	466a      	mov	r2, sp
    c670:	4b47      	ldr	r3, [pc, #284]	; (c790 <discovery_completed+0x48c>)
    c672:	61d0      	str	r0, [r2, #28]
    c674:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c678:	2304      	movs	r3, #4
    c67a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c67e:	f842 3f10 	str.w	r3, [r2, #16]!
    c682:	4844      	ldr	r0, [pc, #272]	; (c794 <discovery_completed+0x490>)
    c684:	465b      	mov	r3, fp
    c686:	f01e f8dc 	bl	2a842 <z_log_msg_static_create>
    c68a:	46c5      	mov	sp, r8
    struct bt_conn *conn = bt_gatt_dm_conn_get(disc);
    c68c:	4628      	mov	r0, r5
    c68e:	f01e ff20 	bl	2b4d2 <bt_gatt_dm_conn_get>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c692:	2600      	movs	r6, #0
        if (devices_list[i].conn == conn) {
    c694:	210c      	movs	r1, #12
    c696:	f8df 8100 	ldr.w	r8, [pc, #256]	; c798 <discovery_completed+0x494>
    c69a:	fb01 f206 	mul.w	r2, r1, r6
    c69e:	eb02 0308 	add.w	r3, r2, r8
    c6a2:	f858 2002 	ldr.w	r2, [r8, r2]
    c6a6:	4282      	cmp	r2, r0
    c6a8:	d16e      	bne.n	c788 <discovery_completed+0x484>
            devices_list[i].rx_handle = param_rx.value_handle;
    c6aa:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    c6ae:	80da      	strh	r2, [r3, #6]
            devices_list[i].tx_handle = param_tx.value_handle;
    c6b0:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    c6b4:	811a      	strh	r2, [r3, #8]
			char *device_name = get_device_name(conn);
    c6b6:	f7ff fe07 	bl	c2c8 <get_device_name>
			if (device_name) {
    c6ba:	4681      	mov	r9, r0
    c6bc:	2800      	cmp	r0, #0
    c6be:	f43f aed1 	beq.w	c464 <discovery_completed+0x160>
				if (strncmp(device_name, "ESP32", 6) == 0) {
    c6c2:	4936      	ldr	r1, [pc, #216]	; (c79c <discovery_completed+0x498>)
    c6c4:	f7fc fda3 	bl	920e <strcmp>
    c6c8:	4603      	mov	r3, r0
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d13a      	bne.n	c744 <discovery_completed+0x440>
					LOG_INF("Device is ESP32");
    c6ce:	46ea      	mov	sl, sp
    c6d0:	b088      	sub	sp, #32
    c6d2:	466a      	mov	r2, sp
    c6d4:	4932      	ldr	r1, [pc, #200]	; (c7a0 <discovery_completed+0x49c>)
    c6d6:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c6da:	2103      	movs	r1, #3
    c6dc:	f842 1f10 	str.w	r1, [r2, #16]!
    c6e0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c6e4:	482b      	ldr	r0, [pc, #172]	; (c794 <discovery_completed+0x490>)
    c6e6:	f01e f8ac 	bl	2a842 <z_log_msg_static_create>
    c6ea:	2200      	movs	r2, #0
    c6ec:	46d5      	mov	sp, sl
					devices_list[i].destination = DESTINATION_RaspberryPi;
    c6ee:	230c      	movs	r3, #12
    c6f0:	fb03 8306 	mla	r3, r3, r6, r8
				LOG_INF("Device name: %s", device_name);
    c6f4:	46e8      	mov	r8, sp
    c6f6:	b08a      	sub	sp, #40	; 0x28
    c6f8:	466e      	mov	r6, sp
					devices_list[i].destination = DESTINATION_RaspberryPi;
    c6fa:	711a      	strb	r2, [r3, #4]
				LOG_INF("Device name: %s", device_name);
    c6fc:	f240 3b01 	movw	fp, #769	; 0x301
    c700:	4632      	mov	r2, r6
    c702:	4b28      	ldr	r3, [pc, #160]	; (c7a4 <discovery_completed+0x4a0>)
    c704:	f8df a0a0 	ldr.w	sl, [pc, #160]	; c7a8 <discovery_completed+0x4a4>
    c708:	e9c6 3405 	strd	r3, r4, [r6, #20]
    c70c:	f8c6 901c 	str.w	r9, [r6, #28]
    c710:	f8a6 b020 	strh.w	fp, [r6, #32]
    c714:	2300      	movs	r3, #0
    c716:	f842 af10 	str.w	sl, [r2, #16]!
    c71a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c71e:	481d      	ldr	r0, [pc, #116]	; (c794 <discovery_completed+0x490>)
    c720:	607a      	str	r2, [r7, #4]
    c722:	f01e f88e 	bl	2a842 <z_log_msg_static_create>
    c726:	46c5      	mov	sp, r8
				LOG_HEXDUMP_INF(device_name, 6, "Device name:");
    c728:	46b5      	mov	sp, r6
    c72a:	4b20      	ldr	r3, [pc, #128]	; (c7ac <discovery_completed+0x4a8>)
    c72c:	687a      	ldr	r2, [r7, #4]
    c72e:	e9c6 3405 	strd	r3, r4, [r6, #20]
    c732:	4b1f      	ldr	r3, [pc, #124]	; (c7b0 <discovery_completed+0x4ac>)
    c734:	491f      	ldr	r1, [pc, #124]	; (c7b4 <discovery_completed+0x4b0>)
    c736:	61f3      	str	r3, [r6, #28]
    c738:	f8a6 b020 	strh.w	fp, [r6, #32]
    c73c:	464b      	mov	r3, r9
    c73e:	f8c6 a010 	str.w	sl, [r6, #16]
    c742:	e68b      	b.n	c45c <discovery_completed+0x158>
				} else if (strncmp(device_name, "RaspberryPi-", 12) == 0) {			//12 chars for RaspberryPi- then add a number.
    c744:	220c      	movs	r2, #12
    c746:	4648      	mov	r0, r9
    c748:	491b      	ldr	r1, [pc, #108]	; (c7b8 <discovery_completed+0x4b4>)
    c74a:	f024 fa0e 	bl	30b6a <strncmp>
					LOG_INF("Device is Raspberry Pi");
    c74e:	46ea      	mov	sl, sp
				} else if (strncmp(device_name, "RaspberryPi-", 12) == 0) {			//12 chars for RaspberryPi- then add a number.
    c750:	4603      	mov	r3, r0
    c752:	b978      	cbnz	r0, c774 <discovery_completed+0x470>
					LOG_INF("Device is Raspberry Pi");
    c754:	b088      	sub	sp, #32
    c756:	466a      	mov	r2, sp
    c758:	4918      	ldr	r1, [pc, #96]	; (c7bc <discovery_completed+0x4b8>)
    c75a:	480e      	ldr	r0, [pc, #56]	; (c794 <discovery_completed+0x490>)
    c75c:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c760:	2103      	movs	r1, #3
    c762:	f842 1f10 	str.w	r1, [r2, #16]!
    c766:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c76a:	f01e f86a 	bl	2a842 <z_log_msg_static_create>
    c76e:	2201      	movs	r2, #1
    c770:	46d5      	mov	sp, sl
					devices_list[i].destination = DESTINATION_RaspberryPi;
    c772:	e7bc      	b.n	c6ee <discovery_completed+0x3ea>
					LOG_INF("Device is Unknown. Setting it to ESP32 for now.");
    c774:	b088      	sub	sp, #32
    c776:	466a      	mov	r2, sp
    c778:	4b11      	ldr	r3, [pc, #68]	; (c7c0 <discovery_completed+0x4bc>)
    c77a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c77e:	2303      	movs	r3, #3
    c780:	f842 3f10 	str.w	r3, [r2, #16]!
    c784:	2300      	movs	r3, #0
    c786:	e7ab      	b.n	c6e0 <discovery_completed+0x3dc>
    for (int i = 0; i < MAX_CONNECTED_DEVICES; i++) {
    c788:	3601      	adds	r6, #1
    c78a:	2e05      	cmp	r6, #5
    c78c:	d185      	bne.n	c69a <discovery_completed+0x396>
release:
    c78e:	e669      	b.n	c464 <discovery_completed+0x160>
    c790:	0003389d 	.word	0x0003389d
    c794:	00031c24 	.word	0x00031c24
    c798:	2000e004 	.word	0x2000e004
    c79c:	00033515 	.word	0x00033515
    c7a0:	000338be 	.word	0x000338be
    c7a4:	0003392e 	.word	0x0003392e
    c7a8:	01000004 	.word	0x01000004
    c7ac:	00035ee5 	.word	0x00035ee5
    c7b0:	00033942 	.word	0x00033942
    c7b4:	006024c0 	.word	0x006024c0
    c7b8:	000338d2 	.word	0x000338d2
    c7bc:	000338df 	.word	0x000338df
    c7c0:	000338fa 	.word	0x000338fa

0000c7c4 <ble_init>:

void ble_init(void)
{
    c7c4:	b5b0      	push	{r4, r5, r7, lr}
    c7c6:	af00      	add	r7, sp, #0
	int err;

	LOG_INF("Initializing Bluetooth..");
    c7c8:	466c      	mov	r4, sp
    c7ca:	b088      	sub	sp, #32
    c7cc:	466a      	mov	r2, sp
    c7ce:	4b12      	ldr	r3, [pc, #72]	; (c818 <ble_init+0x54>)
    c7d0:	4d12      	ldr	r5, [pc, #72]	; (c81c <ble_init+0x58>)
    c7d2:	6153      	str	r3, [r2, #20]
    c7d4:	2303      	movs	r3, #3
    c7d6:	4812      	ldr	r0, [pc, #72]	; (c820 <ble_init+0x5c>)
    c7d8:	6195      	str	r5, [r2, #24]
    c7da:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c7de:	f842 3f10 	str.w	r3, [r2, #16]!
    c7e2:	2300      	movs	r3, #0
    c7e4:	f01e f82d 	bl	2a842 <z_log_msg_static_create>
	err = bt_enable(ble_ready);
    c7e8:	480e      	ldr	r0, [pc, #56]	; (c824 <ble_init+0x60>)
    c7ea:	46a5      	mov	sp, r4
    c7ec:	f007 fe82 	bl	144f4 <bt_enable>
	if (err) {
    c7f0:	b178      	cbz	r0, c812 <ble_init+0x4e>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    c7f2:	b088      	sub	sp, #32
    c7f4:	466a      	mov	r2, sp
    c7f6:	4b0c      	ldr	r3, [pc, #48]	; (c828 <ble_init+0x64>)
    c7f8:	61d0      	str	r0, [r2, #28]
    c7fa:	e9c2 3505 	strd	r3, r5, [r2, #20]
    c7fe:	2304      	movs	r3, #4
    c800:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c804:	f842 3f10 	str.w	r3, [r2, #16]!
    c808:	4805      	ldr	r0, [pc, #20]	; (c820 <ble_init+0x5c>)
    c80a:	2300      	movs	r3, #0
    c80c:	f01e f819 	bl	2a842 <z_log_msg_static_create>
    c810:	46a5      	mov	sp, r4
		return;
	}
}
    c812:	46bd      	mov	sp, r7
    c814:	bdb0      	pop	{r4, r5, r7, pc}
    c816:	bf00      	nop
    c818:	0003397d 	.word	0x0003397d
    c81c:	00033a3d 	.word	0x00033a3d
    c820:	00031c24 	.word	0x00031c24
    c824:	0000bccd 	.word	0x0000bccd
    c828:	0003399a 	.word	0x0003399a

0000c82c <serialize_downlink_data_packet.part.0>:
}




size_t serialize_downlink_data_packet(const struct downlink_data_packet *packet, uint8_t *buffer, size_t buffer_size)
    c82c:	4603      	mov	r3, r0
    c82e:	4608      	mov	r0, r1
    c830:	4611      	mov	r1, r2
        return 0;
    }

    size_t serialized_length = 0;

    switch (packet->type) {
    c832:	785a      	ldrb	r2, [r3, #1]
    c834:	b11a      	cbz	r2, c83e <serialize_downlink_data_packet.part.0+0x12>
    c836:	2a01      	cmp	r2, #1
    c838:	d005      	beq.n	c846 <serialize_downlink_data_packet.part.0+0x1a>
            // Unknown type
            return 0;
    }

    return serialized_length;
}
    c83a:	2000      	movs	r0, #0
    c83c:	4770      	bx	lr
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:TEXT,DATA:%s", packet->data);
    c83e:	4a03      	ldr	r2, [pc, #12]	; (c84c <serialize_downlink_data_packet.part.0+0x20>)
    c840:	3303      	adds	r3, #3
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:FIRMWARE,DATA:%s", packet->data);
    c842:	f01c b807 	b.w	28854 <sniprintf>
    c846:	4a02      	ldr	r2, [pc, #8]	; (c850 <serialize_downlink_data_packet.part.0+0x24>)
    c848:	3303      	adds	r3, #3
    c84a:	e7fa      	b.n	c842 <serialize_downlink_data_packet.part.0+0x16>
    c84c:	00033a7b 	.word	0x00033a7b
    c850:	00033a8d 	.word	0x00033a8d

0000c854 <serialize_uplink_data_packet>:
{
    c854:	4603      	mov	r3, r0
    c856:	4608      	mov	r0, r1
    c858:	4611      	mov	r1, r2
    if (!packet || !buffer) {
    c85a:	b123      	cbz	r3, c866 <serialize_uplink_data_packet+0x12>
    c85c:	b118      	cbz	r0, c866 <serialize_uplink_data_packet+0x12>
    switch (packet->type) {
    c85e:	785a      	ldrb	r2, [r3, #1]
    c860:	b11a      	cbz	r2, c86a <serialize_uplink_data_packet+0x16>
    c862:	2a01      	cmp	r2, #1
    c864:	d005      	beq.n	c872 <serialize_uplink_data_packet+0x1e>
}
    c866:	2000      	movs	r0, #0
    c868:	4770      	bx	lr
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:TEXT,DATA:%s", packet->data);
    c86a:	4a03      	ldr	r2, [pc, #12]	; (c878 <serialize_uplink_data_packet+0x24>)
    c86c:	3303      	adds	r3, #3
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:IMAGE,DATA:%s", "IMAGE_DATA_PLACEHOLDER");
    c86e:	f01b bff1 	b.w	28854 <sniprintf>
    c872:	4b02      	ldr	r3, [pc, #8]	; (c87c <serialize_uplink_data_packet+0x28>)
    c874:	4a02      	ldr	r2, [pc, #8]	; (c880 <serialize_uplink_data_packet+0x2c>)
    c876:	e7fa      	b.n	c86e <serialize_uplink_data_packet+0x1a>
    c878:	00033a7b 	.word	0x00033a7b
    c87c:	00033aa3 	.word	0x00033aa3
    c880:	00033aba 	.word	0x00033aba

0000c884 <publish_aggregated_data>:
{
    c884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, serialized_data, serialized_length) != 0) {
    c888:	4d22      	ldr	r5, [pc, #136]	; (c914 <publish_aggregated_data+0x90>)
{
    c88a:	b0e7      	sub	sp, #412	; 0x19c
            LOG_ERR("Failed to publish data");
    c88c:	4e22      	ldr	r6, [pc, #136]	; (c918 <publish_aggregated_data+0x94>)
    c88e:	4c23      	ldr	r4, [pc, #140]	; (c91c <publish_aggregated_data+0x98>)
{
    c890:	af00      	add	r7, sp, #0
    while (uplink_aggregator_get(&data_packet) == 0) {
    c892:	1d38      	adds	r0, r7, #4
    c894:	f000 f8f4 	bl	ca80 <uplink_aggregator_get>
    c898:	4680      	mov	r8, r0
    c89a:	b150      	cbz	r0, c8b2 <publish_aggregated_data+0x2e>
    k_work_schedule(&periodic_publish_work, K_MSEC(100));
    c89c:	f640 42cd 	movw	r2, #3277	; 0xccd
    c8a0:	2300      	movs	r3, #0
    c8a2:	481f      	ldr	r0, [pc, #124]	; (c920 <publish_aggregated_data+0x9c>)
    c8a4:	f019 f90c 	bl	25ac0 <k_work_schedule>
}
    c8a8:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
    c8ac:	46bd      	mov	sp, r7
    c8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        serialized_length = serialize_uplink_data_packet(&data_packet, serialized_data, sizeof(serialized_data));
    c8b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    c8b6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
    c8ba:	1d38      	adds	r0, r7, #4
    c8bc:	f7ff ffca 	bl	c854 <serialize_uplink_data_packet>
        if (serialized_length == 0) {
    c8c0:	4603      	mov	r3, r0
    c8c2:	b978      	cbnz	r0, c8e4 <publish_aggregated_data+0x60>
            LOG_ERR("Failed to serialize data packet");
    c8c4:	46e8      	mov	r8, sp
    c8c6:	b088      	sub	sp, #32
    c8c8:	466a      	mov	r2, sp
    c8ca:	4916      	ldr	r1, [pc, #88]	; (c924 <publish_aggregated_data+0xa0>)
    c8cc:	e9c2 1405 	strd	r1, r4, [r2, #20]
    c8d0:	2103      	movs	r1, #3
    c8d2:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c8d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c8da:	4813      	ldr	r0, [pc, #76]	; (c928 <publish_aggregated_data+0xa4>)
    c8dc:	f002 ff88 	bl	f7f0 <z_impl_z_log_msg_static_create>
    c8e0:	46c5      	mov	sp, r8
            continue;
    c8e2:	e7d6      	b.n	c892 <publish_aggregated_data+0xe>
        if (data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, serialized_data, serialized_length) != 0) {
    c8e4:	2101      	movs	r1, #1
    c8e6:	4628      	mov	r0, r5
    c8e8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
    c8ec:	f7fe fdaa 	bl	b444 <data_publish>
    c8f0:	2800      	cmp	r0, #0
    c8f2:	d0ce      	beq.n	c892 <publish_aggregated_data+0xe>
            LOG_ERR("Failed to publish data");
    c8f4:	46e9      	mov	r9, sp
    c8f6:	b088      	sub	sp, #32
    c8f8:	466a      	mov	r2, sp
    c8fa:	2303      	movs	r3, #3
    c8fc:	e9c2 6405 	strd	r6, r4, [r2, #20]
    c900:	f842 3f10 	str.w	r3, [r2, #16]!
    c904:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c908:	4643      	mov	r3, r8
    c90a:	4807      	ldr	r0, [pc, #28]	; (c928 <publish_aggregated_data+0xa4>)
    c90c:	f002 ff70 	bl	f7f0 <z_impl_z_log_msg_static_create>
    c910:	46cd      	mov	sp, r9
    c912:	e7be      	b.n	c892 <publish_aggregated_data+0xe>
    c914:	2000dfa0 	.word	0x2000dfa0
    c918:	00033af1 	.word	0x00033af1
    c91c:	00033b7d 	.word	0x00033b7d
    c920:	2000d130 	.word	0x2000d130
    c924:	00033acd 	.word	0x00033acd
    c928:	00031c24 	.word	0x00031c24

0000c92c <transmit_aggregated_data>:

void transmit_aggregated_data(struct k_work *work) {
    c92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    while (downlink_aggregator_get(&packet) == 0) {
       // LOG_INF("Preparing to tranmit downlink data packet");
        // Serialize the data packet (if necessary)
        serialized_length = serialize_downlink_data_packet(&packet, serialized_data, sizeof(serialized_data));
        if (serialized_length == 0) {
            LOG_ERR("Failed to serialize downlink data packet");
    c930:	4c25      	ldr	r4, [pc, #148]	; (c9c8 <transmit_aggregated_data+0x9c>)
void transmit_aggregated_data(struct k_work *work) {
    c932:	b0e7      	sub	sp, #412	; 0x19c
            LOG_ERR("Failed to serialize downlink data packet");
    c934:	4d25      	ldr	r5, [pc, #148]	; (c9cc <transmit_aggregated_data+0xa0>)
    c936:	4e26      	ldr	r6, [pc, #152]	; (c9d0 <transmit_aggregated_data+0xa4>)
void transmit_aggregated_data(struct k_work *work) {
    c938:	af00      	add	r7, sp, #0
    while (downlink_aggregator_get(&packet) == 0) {
    c93a:	1d38      	adds	r0, r7, #4
    c93c:	f000 f8ce 	bl	cadc <downlink_aggregator_get>
    c940:	b150      	cbz	r0, c958 <transmit_aggregated_data+0x2c>

        // Transmit the serialized data over BLE
        ble_transmit(target_conn, serialized_data, serialized_length);
    }

    k_work_reschedule(&periodic_transmit_work, K_MSEC(100));
    c942:	f640 42cd 	movw	r2, #3277	; 0xccd
    c946:	2300      	movs	r3, #0
    c948:	4822      	ldr	r0, [pc, #136]	; (c9d4 <transmit_aggregated_data+0xa8>)
    c94a:	f019 f933 	bl	25bb4 <k_work_reschedule>
}
    c94e:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
    c952:	46bd      	mov	sp, r7
    c954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!packet || !buffer) {
    c958:	f44f 7296 	mov.w	r2, #300	; 0x12c
    c95c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
    c960:	1d38      	adds	r0, r7, #4
    c962:	f7ff ff63 	bl	c82c <serialize_downlink_data_packet.part.0>
        if (serialized_length == 0) {
    c966:	4680      	mov	r8, r0
    c968:	b980      	cbnz	r0, c98c <transmit_aggregated_data+0x60>
            LOG_ERR("Failed to serialize downlink data packet");
    c96a:	46e9      	mov	r9, sp
    c96c:	b088      	sub	sp, #32
    c96e:	4669      	mov	r1, sp
    c970:	2303      	movs	r3, #3
    c972:	460a      	mov	r2, r1
    c974:	e9c1 4505 	strd	r4, r5, [r1, #20]
    c978:	f842 3f10 	str.w	r3, [r2, #16]!
    c97c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c980:	4603      	mov	r3, r0
    c982:	4630      	mov	r0, r6
    c984:	f002 ff34 	bl	f7f0 <z_impl_z_log_msg_static_create>
    c988:	46cd      	mov	sp, r9
            continue;
    c98a:	e7d6      	b.n	c93a <transmit_aggregated_data+0xe>
        struct bt_conn *target_conn = get_conn_from_destination(packet.destination);
    c98c:	79b8      	ldrb	r0, [r7, #6]
    c98e:	f7ff fc07 	bl	c1a0 <get_conn_from_destination>
    c992:	4603      	mov	r3, r0
        if (!target_conn) {
    c994:	b990      	cbnz	r0, c9bc <transmit_aggregated_data+0x90>
            LOG_ERR("No connection found for destination %d", packet.destination);
    c996:	46e8      	mov	r8, sp
    c998:	b088      	sub	sp, #32
    c99a:	466a      	mov	r2, sp
    c99c:	79b9      	ldrb	r1, [r7, #6]
    c99e:	480e      	ldr	r0, [pc, #56]	; (c9d8 <transmit_aggregated_data+0xac>)
    c9a0:	6150      	str	r0, [r2, #20]
    c9a2:	480a      	ldr	r0, [pc, #40]	; (c9cc <transmit_aggregated_data+0xa0>)
    c9a4:	e9c2 0106 	strd	r0, r1, [r2, #24]
    c9a8:	2104      	movs	r1, #4
    c9aa:	f842 1f10 	str.w	r1, [r2, #16]!
    c9ae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c9b2:	4807      	ldr	r0, [pc, #28]	; (c9d0 <transmit_aggregated_data+0xa4>)
    c9b4:	f002 ff1c 	bl	f7f0 <z_impl_z_log_msg_static_create>
    c9b8:	46c5      	mov	sp, r8
            continue;
    c9ba:	e7be      	b.n	c93a <transmit_aggregated_data+0xe>
        ble_transmit(target_conn, serialized_data, serialized_length);
    c9bc:	4642      	mov	r2, r8
    c9be:	f107 016c 	add.w	r1, r7, #108	; 0x6c
    c9c2:	f7ff fc01 	bl	c1c8 <ble_transmit>
    c9c6:	e7b8      	b.n	c93a <transmit_aggregated_data+0xe>
    c9c8:	00033b0c 	.word	0x00033b0c
    c9cc:	00033b64 	.word	0x00033b64
    c9d0:	00031c24 	.word	0x00031c24
    c9d4:	2000d160 	.word	0x2000d160
    c9d8:	00033b39 	.word	0x00033b39

0000c9dc <uplink_aggregator_put>:
	void *fifo_reserved;
	uint8_t data[sizeof(struct downlink_data_packet)];
};

int uplink_aggregator_put(struct uplink_data_packet in_data)
{
    c9dc:	b084      	sub	sp, #16
    c9de:	b570      	push	{r4, r5, r6, lr}
    c9e0:	ac04      	add	r4, sp, #16
    c9e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    c9e6:	f04f 0320 	mov.w	r3, #32
    c9ea:	f3ef 8611 	mrs	r6, BASEPRI
    c9ee:	f383 8812 	msr	BASEPRI_MAX, r3
    c9f2:	f3bf 8f6f 	isb	sy
	struct uplink_fifo_entry *fifo_data = NULL;
	uint32_t  lock = irq_lock();
	int    err  = 0;

	if (uplink_entry_count == FIFO_MAX_ELEMENT_COUNT) {
    c9f6:	4d1c      	ldr	r5, [pc, #112]	; (ca68 <uplink_aggregator_put+0x8c>)
    c9f8:	682b      	ldr	r3, [r5, #0]
    c9fa:	2b0c      	cmp	r3, #12
    c9fc:	d007      	beq.n	ca0e <uplink_aggregator_put+0x32>

		uplink_entry_count--;
	}

	if (fifo_data == NULL) {
		fifo_data = k_malloc(sizeof(in_data));
    c9fe:	2067      	movs	r0, #103	; 0x67
    ca00:	f023 feeb 	bl	307da <k_malloc>
	}

	if (fifo_data == NULL) {
    ca04:	4604      	mov	r4, r0
    ca06:	b9c8      	cbnz	r0, ca3c <uplink_aggregator_put+0x60>
		err = -ENOMEM;
    ca08:	f06f 000b 	mvn.w	r0, #11
    ca0c:	e023      	b.n	ca56 <uplink_aggregator_put+0x7a>
	return z_impl_k_queue_get(queue, timeout);
    ca0e:	2200      	movs	r2, #0
    ca10:	2300      	movs	r3, #0
    ca12:	4816      	ldr	r0, [pc, #88]	; (ca6c <uplink_aggregator_put+0x90>)
    ca14:	f018 fb52 	bl	250bc <z_impl_k_queue_get>
		__ASSERT(fifo_data != NULL, "fifo_data should not be NULL");
    ca18:	4604      	mov	r4, r0
    ca1a:	b960      	cbnz	r0, ca36 <uplink_aggregator_put+0x5a>
    ca1c:	4914      	ldr	r1, [pc, #80]	; (ca70 <uplink_aggregator_put+0x94>)
    ca1e:	232e      	movs	r3, #46	; 0x2e
    ca20:	4a14      	ldr	r2, [pc, #80]	; (ca74 <uplink_aggregator_put+0x98>)
    ca22:	4815      	ldr	r0, [pc, #84]	; (ca78 <uplink_aggregator_put+0x9c>)
    ca24:	f01e f9c8 	bl	2adb8 <assert_print>
    ca28:	4814      	ldr	r0, [pc, #80]	; (ca7c <uplink_aggregator_put+0xa0>)
    ca2a:	f01e f9c5 	bl	2adb8 <assert_print>
    ca2e:	212e      	movs	r1, #46	; 0x2e
    ca30:	4810      	ldr	r0, [pc, #64]	; (ca74 <uplink_aggregator_put+0x98>)
    ca32:	f01e f9ba 	bl	2adaa <assert_post_action>
		uplink_entry_count--;
    ca36:	682b      	ldr	r3, [r5, #0]
    ca38:	3b01      	subs	r3, #1
    ca3a:	602b      	str	r3, [r5, #0]
    ca3c:	2267      	movs	r2, #103	; 0x67
    ca3e:	a904      	add	r1, sp, #16
    ca40:	1d20      	adds	r0, r4, #4
    ca42:	f023 fefe 	bl	30842 <memcpy>
		goto exit;
	}

	memcpy(fifo_data->data, &in_data, sizeof(in_data));

	k_fifo_put(&uplink_aggregator_fifo, fifo_data);
    ca46:	4809      	ldr	r0, [pc, #36]	; (ca6c <uplink_aggregator_put+0x90>)
    ca48:	4621      	mov	r1, r4
    ca4a:	f023 fd04 	bl	30456 <k_queue_append>
	int    err  = 0;
    ca4e:	2000      	movs	r0, #0
	uplink_entry_count++;
    ca50:	682b      	ldr	r3, [r5, #0]
    ca52:	3301      	adds	r3, #1
    ca54:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ca56:	f386 8811 	msr	BASEPRI, r6
    ca5a:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    ca5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca62:	b004      	add	sp, #16
    ca64:	4770      	bx	lr
    ca66:	bf00      	nop
    ca68:	2000e044 	.word	0x2000e044
    ca6c:	2000cf6c 	.word	0x2000cf6c
    ca70:	00033ba9 	.word	0x00033ba9
    ca74:	00033b95 	.word	0x00033b95
    ca78:	00033bc2 	.word	0x00033bc2
    ca7c:	00033bdf 	.word	0x00033bdf

0000ca80 <uplink_aggregator_get>:

int uplink_aggregator_get(struct uplink_data_packet *out_data)
{
    ca80:	b570      	push	{r4, r5, r6, lr}
	void  *fifo_data;
	int   err = 0;

	if (out_data == NULL) {
    ca82:	4605      	mov	r5, r0
    ca84:	b318      	cbz	r0, cace <uplink_aggregator_get+0x4e>
	__asm__ volatile(
    ca86:	f04f 0320 	mov.w	r3, #32
    ca8a:	f3ef 8611 	mrs	r6, BASEPRI
    ca8e:	f383 8812 	msr	BASEPRI_MAX, r3
    ca92:	f3bf 8f6f 	isb	sy
    ca96:	2200      	movs	r2, #0
    ca98:	2300      	movs	r3, #0
    ca9a:	480e      	ldr	r0, [pc, #56]	; (cad4 <uplink_aggregator_get+0x54>)
    ca9c:	f018 fb0e 	bl	250bc <z_impl_k_queue_get>
	}

	uint32_t lock = irq_lock();

	fifo_data = k_fifo_get(&uplink_aggregator_fifo, K_NO_WAIT);
	if (fifo_data == NULL) {
    caa0:	4604      	mov	r4, r0
    caa2:	b188      	cbz	r0, cac8 <uplink_aggregator_get+0x48>
    caa4:	2267      	movs	r2, #103	; 0x67
    caa6:	1d01      	adds	r1, r0, #4
    caa8:	4628      	mov	r0, r5
    caaa:	f023 feca 	bl	30842 <memcpy>
	}

	memcpy(out_data, ((struct uplink_fifo_entry *)fifo_data)->data,
	       sizeof(struct uplink_data_packet));

	k_free(fifo_data);
    caae:	4620      	mov	r0, r4
    cab0:	f023 fe8c 	bl	307cc <k_free>
	int   err = 0;
    cab4:	2000      	movs	r0, #0
	uplink_entry_count--;
    cab6:	4a08      	ldr	r2, [pc, #32]	; (cad8 <uplink_aggregator_get+0x58>)
    cab8:	6813      	ldr	r3, [r2, #0]
    caba:	3b01      	subs	r3, #1
    cabc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    cabe:	f386 8811 	msr	BASEPRI, r6
    cac2:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cac6:	bd70      	pop	{r4, r5, r6, pc}
		err = -ENODATA;
    cac8:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    cacc:	e7f7      	b.n	cabe <uplink_aggregator_get+0x3e>
		return -EINVAL;
    cace:	f06f 0015 	mvn.w	r0, #21
    cad2:	e7f8      	b.n	cac6 <uplink_aggregator_get+0x46>
    cad4:	2000cf6c 	.word	0x2000cf6c
    cad8:	2000e044 	.word	0x2000e044

0000cadc <downlink_aggregator_get>:




int downlink_aggregator_get(struct downlink_data_packet *out_data)
{
    cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//LOG_INF ("downlink_aggregator_get called"); //Super spammy.
	void  *fifo_data;
	int   err = 0;
	
	if (out_data == NULL) {
    cae0:	4604      	mov	r4, r0
{
    cae2:	af00      	add	r7, sp, #0
	if (out_data == NULL) {
    cae4:	2800      	cmp	r0, #0
    cae6:	d03c      	beq.n	cb62 <downlink_aggregator_get+0x86>
    cae8:	2200      	movs	r2, #0
    caea:	2300      	movs	r3, #0
    caec:	481e      	ldr	r0, [pc, #120]	; (cb68 <downlink_aggregator_get+0x8c>)
    caee:	f018 fae5 	bl	250bc <z_impl_k_queue_get>
		return -EINVAL;
	}


	fifo_data = k_fifo_get(&downlink_aggregator_fifo, K_NO_WAIT);
	if (fifo_data == NULL) {
    caf2:	4605      	mov	r5, r0
    caf4:	2800      	cmp	r0, #0
    caf6:	d031      	beq.n	cb5c <downlink_aggregator_get+0x80>
	__asm__ volatile(
    caf8:	f04f 0320 	mov.w	r3, #32
    cafc:	f3ef 8611 	mrs	r6, BASEPRI
    cb00:	f383 8812 	msr	BASEPRI_MAX, r3
    cb04:	f3bf 8f6f 	isb	sy
    cb08:	2267      	movs	r2, #103	; 0x67
    cb0a:	1d01      	adds	r1, r0, #4
    cb0c:	4620      	mov	r0, r4
    cb0e:	f023 fe98 	bl	30842 <memcpy>

	uint32_t lock = irq_lock();

	memcpy(out_data, ((struct downlink_fifo_entry *)fifo_data)->data,
	       sizeof(struct downlink_data_packet));
	LOG_INF ("downlink_aggregator_get: %s", out_data->data);
    cb12:	46e8      	mov	r8, sp
    cb14:	b08a      	sub	sp, #40	; 0x28
    cb16:	466a      	mov	r2, sp
    cb18:	4b14      	ldr	r3, [pc, #80]	; (cb6c <downlink_aggregator_get+0x90>)
    cb1a:	3403      	adds	r4, #3
    cb1c:	6153      	str	r3, [r2, #20]
    cb1e:	4b14      	ldr	r3, [pc, #80]	; (cb70 <downlink_aggregator_get+0x94>)
    cb20:	61d4      	str	r4, [r2, #28]
    cb22:	6193      	str	r3, [r2, #24]
    cb24:	f240 3301 	movw	r3, #769	; 0x301
    cb28:	8413      	strh	r3, [r2, #32]
    cb2a:	4b12      	ldr	r3, [pc, #72]	; (cb74 <downlink_aggregator_get+0x98>)
    cb2c:	f842 3f10 	str.w	r3, [r2, #16]!
    cb30:	2300      	movs	r3, #0
    cb32:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    cb36:	4810      	ldr	r0, [pc, #64]	; (cb78 <downlink_aggregator_get+0x9c>)
    cb38:	f002 fe5a 	bl	f7f0 <z_impl_z_log_msg_static_create>
	k_free(fifo_data);
    cb3c:	4628      	mov	r0, r5
    cb3e:	46c5      	mov	sp, r8
    cb40:	f023 fe44 	bl	307cc <k_free>
	int   err = 0;
    cb44:	2000      	movs	r0, #0
	downlink_entry_count--;
    cb46:	4a0d      	ldr	r2, [pc, #52]	; (cb7c <downlink_aggregator_get+0xa0>)
    cb48:	6813      	ldr	r3, [r2, #0]
    cb4a:	3b01      	subs	r3, #1
    cb4c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    cb4e:	f386 8811 	msr	BASEPRI, r6
    cb52:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cb56:	46bd      	mov	sp, r7
    cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = -ENODATA;
    cb5c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    cb60:	e7f5      	b.n	cb4e <downlink_aggregator_get+0x72>
		return -EINVAL;
    cb62:	f06f 0015 	mvn.w	r0, #21
    cb66:	e7f6      	b.n	cb56 <downlink_aggregator_get+0x7a>
    cb68:	2000cf18 	.word	0x2000cf18
    cb6c:	00033bfe 	.word	0x00033bfe
    cb70:	00033c79 	.word	0x00033c79
    cb74:	01000004 	.word	0x01000004
    cb78:	00031c24 	.word	0x00031c24
    cb7c:	2000e040 	.word	0x2000e040

0000cb80 <downlink_aggregator_put>:

int downlink_aggregator_put(struct downlink_data_packet in_data)
{
    cb80:	b084      	sub	sp, #16
    cb82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb86:	af00      	add	r7, sp, #0
    cb88:	f107 0420 	add.w	r4, r7, #32
    cb8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__asm__ volatile(
    cb90:	f04f 0320 	mov.w	r3, #32
    cb94:	f3ef 8611 	mrs	r6, BASEPRI
    cb98:	f383 8812 	msr	BASEPRI_MAX, r3
    cb9c:	f3bf 8f6f 	isb	sy
	struct downlink_fifo_entry *fifo_data = NULL;
	uint32_t  lock = irq_lock();
	int	err  = 0;
	LOG_INF ("downlink_aggregator_put called");
    cba0:	466c      	mov	r4, sp
    cba2:	b088      	sub	sp, #32
    cba4:	466a      	mov	r2, sp
    cba6:	4b30      	ldr	r3, [pc, #192]	; (cc68 <downlink_aggregator_put+0xe8>)
    cba8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; cc6c <downlink_aggregator_put+0xec>
    cbac:	6153      	str	r3, [r2, #20]
    cbae:	2303      	movs	r3, #3
    cbb0:	f8c2 8018 	str.w	r8, [r2, #24]
    cbb4:	f842 3f10 	str.w	r3, [r2, #16]!
	if (downlink_entry_count == FIFO_MAX_ELEMENT_COUNT) {
    cbb8:	4d2d      	ldr	r5, [pc, #180]	; (cc70 <downlink_aggregator_put+0xf0>)
    cbba:	2300      	movs	r3, #0
    cbbc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    cbc0:	482c      	ldr	r0, [pc, #176]	; (cc74 <downlink_aggregator_put+0xf4>)
    cbc2:	f002 fe15 	bl	f7f0 <z_impl_z_log_msg_static_create>
    cbc6:	682b      	ldr	r3, [r5, #0]
    cbc8:	46a5      	mov	sp, r4
    cbca:	2b0c      	cmp	r3, #12
    cbcc:	d007      	beq.n	cbde <downlink_aggregator_put+0x5e>

		downlink_entry_count--;
	}

	if (fifo_data == NULL) {
		fifo_data = k_malloc(sizeof(struct downlink_fifo_entry));
    cbce:	206c      	movs	r0, #108	; 0x6c
    cbd0:	f023 fe03 	bl	307da <k_malloc>
	}

	if (fifo_data == NULL) {
    cbd4:	4604      	mov	r4, r0
    cbd6:	b9c8      	cbnz	r0, cc0c <downlink_aggregator_put+0x8c>
		err = -ENOMEM;
    cbd8:	f06f 000b 	mvn.w	r0, #11
    cbdc:	e03a      	b.n	cc54 <downlink_aggregator_put+0xd4>
    cbde:	2200      	movs	r2, #0
    cbe0:	2300      	movs	r3, #0
    cbe2:	4825      	ldr	r0, [pc, #148]	; (cc78 <downlink_aggregator_put+0xf8>)
    cbe4:	f018 fa6a 	bl	250bc <z_impl_k_queue_get>
		__ASSERT(fifo_data != NULL, "fifo_data should not be NULL");
    cbe8:	4604      	mov	r4, r0
    cbea:	b960      	cbnz	r0, cc06 <downlink_aggregator_put+0x86>
    cbec:	4923      	ldr	r1, [pc, #140]	; (cc7c <downlink_aggregator_put+0xfc>)
    cbee:	238f      	movs	r3, #143	; 0x8f
    cbf0:	4a23      	ldr	r2, [pc, #140]	; (cc80 <downlink_aggregator_put+0x100>)
    cbf2:	4824      	ldr	r0, [pc, #144]	; (cc84 <downlink_aggregator_put+0x104>)
    cbf4:	f01e f8e0 	bl	2adb8 <assert_print>
    cbf8:	4823      	ldr	r0, [pc, #140]	; (cc88 <downlink_aggregator_put+0x108>)
    cbfa:	f01e f8dd 	bl	2adb8 <assert_print>
    cbfe:	218f      	movs	r1, #143	; 0x8f
    cc00:	481f      	ldr	r0, [pc, #124]	; (cc80 <downlink_aggregator_put+0x100>)
    cc02:	f01e f8d2 	bl	2adaa <assert_post_action>
		downlink_entry_count--;
    cc06:	682b      	ldr	r3, [r5, #0]
    cc08:	3b01      	subs	r3, #1
    cc0a:	602b      	str	r3, [r5, #0]
    cc0c:	2267      	movs	r2, #103	; 0x67
    cc0e:	f107 0120 	add.w	r1, r7, #32
    cc12:	1d20      	adds	r0, r4, #4
    cc14:	f023 fe15 	bl	30842 <memcpy>
		goto exit;
	}
	
	memcpy(fifo_data->data, &in_data, sizeof(struct downlink_data_packet));
	LOG_INF("downlink_aggregator_put: %s", in_data.data);
    cc18:	46e9      	mov	r9, sp
    cc1a:	b08a      	sub	sp, #40	; 0x28
    cc1c:	466a      	mov	r2, sp
    cc1e:	4b1b      	ldr	r3, [pc, #108]	; (cc8c <downlink_aggregator_put+0x10c>)
    cc20:	e9c2 3805 	strd	r3, r8, [r2, #20]
    cc24:	f107 0323 	add.w	r3, r7, #35	; 0x23
    cc28:	61d3      	str	r3, [r2, #28]
    cc2a:	f240 3301 	movw	r3, #769	; 0x301
    cc2e:	8413      	strh	r3, [r2, #32]
    cc30:	4b17      	ldr	r3, [pc, #92]	; (cc90 <downlink_aggregator_put+0x110>)
    cc32:	f842 3f10 	str.w	r3, [r2, #16]!
    cc36:	2300      	movs	r3, #0
    cc38:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    cc3c:	480d      	ldr	r0, [pc, #52]	; (cc74 <downlink_aggregator_put+0xf4>)
    cc3e:	f002 fdd7 	bl	f7f0 <z_impl_z_log_msg_static_create>
	k_fifo_put(&downlink_aggregator_fifo, fifo_data);
    cc42:	480d      	ldr	r0, [pc, #52]	; (cc78 <downlink_aggregator_put+0xf8>)
    cc44:	46cd      	mov	sp, r9
    cc46:	4621      	mov	r1, r4
    cc48:	f023 fc05 	bl	30456 <k_queue_append>
	int	err  = 0;
    cc4c:	2000      	movs	r0, #0
	downlink_entry_count++;
    cc4e:	682b      	ldr	r3, [r5, #0]
    cc50:	3301      	adds	r3, #1
    cc52:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    cc54:	f386 8811 	msr	BASEPRI, r6
    cc58:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cc5c:	46bd      	mov	sp, r7
    cc5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc62:	b004      	add	sp, #16
    cc64:	4770      	bx	lr
    cc66:	bf00      	nop
    cc68:	00033c1e 	.word	0x00033c1e
    cc6c:	00033c61 	.word	0x00033c61
    cc70:	2000e040 	.word	0x2000e040
    cc74:	00031c24 	.word	0x00031c24
    cc78:	2000cf18 	.word	0x2000cf18
    cc7c:	00033ba9 	.word	0x00033ba9
    cc80:	00033b95 	.word	0x00033b95
    cc84:	00033bc2 	.word	0x00033bc2
    cc88:	00033bdf 	.word	0x00033bdf
    cc8c:	00033c41 	.word	0x00033c41
    cc90:	01000004 	.word	0x01000004

0000cc94 <parse_string>:
{
    cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    cc98:	680a      	ldr	r2, [r1, #0]
    cc9a:	688b      	ldr	r3, [r1, #8]
{
    cc9c:	4606      	mov	r6, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    cc9e:	1c5c      	adds	r4, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
    cca0:	18d0      	adds	r0, r2, r3
    cca2:	5cd3      	ldrb	r3, [r2, r3]
{
    cca4:	460f      	mov	r7, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
    cca6:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    cca8:	4414      	add	r4, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
    ccaa:	f040 80e1 	bne.w	ce70 <parse_string+0x1dc>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    ccae:	4625      	mov	r5, r4
        size_t skipped_bytes = 0;
    ccb0:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
    ccb2:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ccb6:	1aa9      	subs	r1, r5, r2
    ccb8:	4561      	cmp	r1, ip
    ccba:	f080 80d9 	bcs.w	ce70 <parse_string+0x1dc>
    ccbe:	7829      	ldrb	r1, [r5, #0]
    ccc0:	2922      	cmp	r1, #34	; 0x22
    ccc2:	d119      	bne.n	ccf8 <parse_string+0x64>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
    ccc4:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
    ccc8:	1a28      	subs	r0, r5, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
    ccca:	693a      	ldr	r2, [r7, #16]
    cccc:	4418      	add	r0, r3
    ccce:	4790      	blx	r2
        if (output == NULL)
    ccd0:	4681      	mov	r9, r0
    ccd2:	2800      	cmp	r0, #0
    ccd4:	f000 80cc 	beq.w	ce70 <parse_string+0x1dc>
    ccd8:	4680      	mov	r8, r0
    while (input_pointer < input_end)
    ccda:	42ac      	cmp	r4, r5
    ccdc:	d316      	bcc.n	cd0c <parse_string+0x78>
    *output_pointer = '\0';
    ccde:	2300      	movs	r3, #0
    cce0:	f888 3000 	strb.w	r3, [r8]
    item->type = cJSON_String;
    cce4:	2310      	movs	r3, #16
    return true;
    cce6:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
    cce8:	e9c6 3903 	strd	r3, r9, [r6, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
    ccec:	683b      	ldr	r3, [r7, #0]
    ccee:	1aed      	subs	r5, r5, r3
    input_buffer->offset++;
    ccf0:	3501      	adds	r5, #1
    ccf2:	60bd      	str	r5, [r7, #8]
}
    ccf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (input_end[0] == '\\')
    ccf8:	295c      	cmp	r1, #92	; 0x5c
    ccfa:	d105      	bne.n	cd08 <parse_string+0x74>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
    ccfc:	3501      	adds	r5, #1
    ccfe:	1aa9      	subs	r1, r5, r2
    cd00:	4561      	cmp	r1, ip
    cd02:	f080 80b5 	bcs.w	ce70 <parse_string+0x1dc>
                skipped_bytes++;
    cd06:	3301      	adds	r3, #1
            input_end++;
    cd08:	3501      	adds	r5, #1
    cd0a:	e7d4      	b.n	ccb6 <parse_string+0x22>
        if (*input_pointer != '\\')
    cd0c:	7823      	ldrb	r3, [r4, #0]
    cd0e:	2b5c      	cmp	r3, #92	; 0x5c
    cd10:	d006      	beq.n	cd20 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
    cd12:	3401      	adds	r4, #1
    cd14:	f108 0201 	add.w	r2, r8, #1
    cd18:	f888 3000 	strb.w	r3, [r8]
    cd1c:	4690      	mov	r8, r2
    cd1e:	e7dc      	b.n	ccda <parse_string+0x46>
            switch (input_pointer[1])
    cd20:	7863      	ldrb	r3, [r4, #1]
    cd22:	2b75      	cmp	r3, #117	; 0x75
    cd24:	d80a      	bhi.n	cd3c <parse_string+0xa8>
    cd26:	2b6d      	cmp	r3, #109	; 0x6d
    cd28:	d80f      	bhi.n	cd4a <parse_string+0xb6>
    cd2a:	2b62      	cmp	r3, #98	; 0x62
    cd2c:	d02a      	beq.n	cd84 <parse_string+0xf0>
    cd2e:	d823      	bhi.n	cd78 <parse_string+0xe4>
    cd30:	2b2f      	cmp	r3, #47	; 0x2f
    cd32:	d039      	beq.n	cda8 <parse_string+0x114>
    cd34:	2b5c      	cmp	r3, #92	; 0x5c
    cd36:	d037      	beq.n	cda8 <parse_string+0x114>
    cd38:	2b22      	cmp	r3, #34	; 0x22
    cd3a:	d035      	beq.n	cda8 <parse_string+0x114>
        input_buffer->hooks.deallocate(output);
    cd3c:	4648      	mov	r0, r9
    cd3e:	697b      	ldr	r3, [r7, #20]
    cd40:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    cd42:	683b      	ldr	r3, [r7, #0]
    cd44:	1ae4      	subs	r4, r4, r3
    cd46:	60bc      	str	r4, [r7, #8]
    cd48:	e095      	b.n	ce76 <parse_string+0x1e2>
            switch (input_pointer[1])
    cd4a:	3b6e      	subs	r3, #110	; 0x6e
    cd4c:	2b07      	cmp	r3, #7
    cd4e:	d8f5      	bhi.n	cd3c <parse_string+0xa8>
    cd50:	a201      	add	r2, pc, #4	; (adr r2, cd58 <parse_string+0xc4>)
    cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd56:	bf00      	nop
    cd58:	0000cd91 	.word	0x0000cd91
    cd5c:	0000cd3d 	.word	0x0000cd3d
    cd60:	0000cd3d 	.word	0x0000cd3d
    cd64:	0000cd3d 	.word	0x0000cd3d
    cd68:	0000cd99 	.word	0x0000cd99
    cd6c:	0000cd3d 	.word	0x0000cd3d
    cd70:	0000cda1 	.word	0x0000cda1
    cd74:	0000cdaf 	.word	0x0000cdaf
    cd78:	2b66      	cmp	r3, #102	; 0x66
    cd7a:	d1df      	bne.n	cd3c <parse_string+0xa8>
                    break;
    cd7c:	230c      	movs	r3, #12
                    *output_pointer++ = '\f';
    cd7e:	f108 0201 	add.w	r2, r8, #1
                    break;
    cd82:	e002      	b.n	cd8a <parse_string+0xf6>
                    break;
    cd84:	2308      	movs	r3, #8
                    *output_pointer++ = '\b';
    cd86:	f108 0201 	add.w	r2, r8, #1
            unsigned char sequence_length = 2;
    cd8a:	2102      	movs	r1, #2
            input_pointer += sequence_length;
    cd8c:	440c      	add	r4, r1
    cd8e:	e7c3      	b.n	cd18 <parse_string+0x84>
                    break;
    cd90:	230a      	movs	r3, #10
                    *output_pointer++ = '\n';
    cd92:	f108 0201 	add.w	r2, r8, #1
                    break;
    cd96:	e7f8      	b.n	cd8a <parse_string+0xf6>
                    break;
    cd98:	230d      	movs	r3, #13
                    *output_pointer++ = '\r';
    cd9a:	f108 0201 	add.w	r2, r8, #1
                    break;
    cd9e:	e7f4      	b.n	cd8a <parse_string+0xf6>
                    break;
    cda0:	2309      	movs	r3, #9
                    *output_pointer++ = '\t';
    cda2:	f108 0201 	add.w	r2, r8, #1
                    break;
    cda6:	e7f0      	b.n	cd8a <parse_string+0xf6>
                    *output_pointer++ = input_pointer[1];
    cda8:	f108 0201 	add.w	r2, r8, #1
                    break;
    cdac:	e7ed      	b.n	cd8a <parse_string+0xf6>
    if ((input_end - first_sequence) < 6)
    cdae:	1b2b      	subs	r3, r5, r4
    cdb0:	2b05      	cmp	r3, #5
    cdb2:	ddc3      	ble.n	cd3c <parse_string+0xa8>
    first_code = parse_hex4(first_sequence + 2);
    cdb4:	1ca0      	adds	r0, r4, #2
    cdb6:	f01d fd46 	bl	2a846 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
    cdba:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    cdbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
    cdc2:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
    cdc4:	d3ba      	bcc.n	cd3c <parse_string+0xa8>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
    cdc6:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
    cdca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    cdce:	d22c      	bcs.n	ce2a <parse_string+0x196>
        const unsigned char *second_sequence = first_sequence + 6;
    cdd0:	1da3      	adds	r3, r4, #6
        if ((input_end - second_sequence) < 6)
    cdd2:	1aeb      	subs	r3, r5, r3
    cdd4:	2b05      	cmp	r3, #5
    cdd6:	ddb1      	ble.n	cd3c <parse_string+0xa8>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
    cdd8:	79a3      	ldrb	r3, [r4, #6]
    cdda:	2b5c      	cmp	r3, #92	; 0x5c
    cddc:	d1ae      	bne.n	cd3c <parse_string+0xa8>
    cdde:	79e3      	ldrb	r3, [r4, #7]
    cde0:	2b75      	cmp	r3, #117	; 0x75
    cde2:	d1ab      	bne.n	cd3c <parse_string+0xa8>
        second_code = parse_hex4(second_sequence + 2);
    cde4:	f104 0008 	add.w	r0, r4, #8
    cde8:	f01d fd2d 	bl	2a846 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
    cdec:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    cdf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    cdf4:	d2a2      	bcs.n	cd3c <parse_string+0xa8>
        sequence_length = 12; /* \uXXXX\uXXXX */
    cdf6:	210c      	movs	r1, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
    cdf8:	4b20      	ldr	r3, [pc, #128]	; (ce7c <parse_string+0x1e8>)
    cdfa:	f3c0 0009 	ubfx	r0, r0, #0, #10
    cdfe:	ea03 238a 	and.w	r3, r3, sl, lsl #10
    ce02:	4303      	orrs	r3, r0
    ce04:	f503 3a80 	add.w	sl, r3, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
    ce08:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
    ce0a:	2204      	movs	r2, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    ce0c:	f102 3cff 	add.w	ip, r2, #4294967295
    ce10:	fa58 fc8c 	uxtab	ip, r8, ip
    ce14:	45e0      	cmp	r8, ip
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
    ce16:	fa5f f38a 	uxtb.w	r3, sl
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    ce1a:	d120      	bne.n	ce5e <parse_string+0x1ca>
    if (utf8_length > 1)
    ce1c:	2a01      	cmp	r2, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
    ce1e:	bf14      	ite	ne
    ce20:	4303      	orrne	r3, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
    ce22:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    *output_pointer += utf8_length;
    ce26:	4442      	add	r2, r8
                    if (sequence_length == 0)
    ce28:	e7b0      	b.n	cd8c <parse_string+0xf8>
    if (codepoint < 0x80)
    ce2a:	287f      	cmp	r0, #127	; 0x7f
    ce2c:	d90b      	bls.n	ce46 <parse_string+0x1b2>
    else if (codepoint < 0x800)
    ce2e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ce32:	d30c      	bcc.n	ce4e <parse_string+0x1ba>
    else if (codepoint < 0x10000)
    ce34:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ce38:	d30d      	bcc.n	ce56 <parse_string+0x1c2>
    else if (codepoint <= 0x10FFFF)
    ce3a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    ce3e:	f4bf af7d 	bcs.w	cd3c <parse_string+0xa8>
        sequence_length = 6; /* \uXXXX */
    ce42:	2106      	movs	r1, #6
    ce44:	e7e0      	b.n	ce08 <parse_string+0x174>
    ce46:	2106      	movs	r1, #6
    unsigned char first_byte_mark = 0;
    ce48:	2000      	movs	r0, #0
        utf8_length = 1;
    ce4a:	2201      	movs	r2, #1
    ce4c:	e7de      	b.n	ce0c <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
    ce4e:	2106      	movs	r1, #6
        first_byte_mark = 0xC0; /* 11000000 */
    ce50:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
    ce52:	2202      	movs	r2, #2
    ce54:	e7da      	b.n	ce0c <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
    ce56:	2106      	movs	r1, #6
        first_byte_mark = 0xE0; /* 11100000 */
    ce58:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
    ce5a:	2203      	movs	r2, #3
    ce5c:	e7d6      	b.n	ce0c <parse_string+0x178>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
    ce5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ce62:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ce66:	f80c 3901 	strb.w	r3, [ip], #-1
        codepoint >>= 6;
    ce6a:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    ce6e:	e7d1      	b.n	ce14 <parse_string+0x180>
    if (input_pointer != NULL)
    ce70:	2c00      	cmp	r4, #0
    ce72:	f47f af66 	bne.w	cd42 <parse_string+0xae>
    return false;
    ce76:	2000      	movs	r0, #0
    ce78:	e73c      	b.n	ccf4 <parse_string+0x60>
    ce7a:	bf00      	nop
    ce7c:	000ffc00 	.word	0x000ffc00

0000ce80 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
    ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce82:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
    ce84:	4604      	mov	r4, r0
    ce86:	2800      	cmp	r0, #0
    ce88:	d034      	beq.n	cef4 <get_object_item+0x74>
    ce8a:	2900      	cmp	r1, #0
    ce8c:	d031      	beq.n	cef2 <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
    ce8e:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
    ce90:	b9fa      	cbnz	r2, ced2 <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    ce92:	4e19      	ldr	r6, [pc, #100]	; (cef8 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
    ce94:	b374      	cbz	r4, cef4 <get_object_item+0x74>
    ce96:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
    ce98:	b1c3      	cbz	r3, cecc <get_object_item+0x4c>
    if (string1 == string2)
    ce9a:	42ab      	cmp	r3, r5
    ce9c:	d021      	beq.n	cee2 <get_object_item+0x62>
    ce9e:	f105 3cff 	add.w	ip, r5, #4294967295
    cea2:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    cea4:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    cea8:	460f      	mov	r7, r1
    ceaa:	5c72      	ldrb	r2, [r6, r1]
    ceac:	f002 0203 	and.w	r2, r2, #3
    ceb0:	2a01      	cmp	r2, #1
    ceb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ceb6:	bf08      	it	eq
    ceb8:	f101 0720 	addeq.w	r7, r1, #32
    cebc:	5cb0      	ldrb	r0, [r6, r2]
    cebe:	f000 0003 	and.w	r0, r0, #3
    cec2:	2801      	cmp	r0, #1
    cec4:	bf08      	it	eq
    cec6:	3220      	addeq	r2, #32
    cec8:	4297      	cmp	r7, r2
    ceca:	d00f      	beq.n	ceec <get_object_item+0x6c>
        {
            current_element = current_element->next;
    cecc:	6824      	ldr	r4, [r4, #0]
    cece:	e7e1      	b.n	ce94 <get_object_item+0x14>
            current_element = current_element->next;
    ced0:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
    ced2:	b17c      	cbz	r4, cef4 <get_object_item+0x74>
    ced4:	6a21      	ldr	r1, [r4, #32]
    ced6:	b121      	cbz	r1, cee2 <get_object_item+0x62>
    ced8:	4628      	mov	r0, r5
    ceda:	f7fc f998 	bl	920e <strcmp>
    cede:	2800      	cmp	r0, #0
    cee0:	d1f6      	bne.n	ced0 <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
    cee2:	6a23      	ldr	r3, [r4, #32]
        return NULL;
    cee4:	2b00      	cmp	r3, #0
    cee6:	bf08      	it	eq
    cee8:	2400      	moveq	r4, #0
    ceea:	e003      	b.n	cef4 <get_object_item+0x74>
        if (*string1 == '\0')
    ceec:	2900      	cmp	r1, #0
    ceee:	d1d9      	bne.n	cea4 <get_object_item+0x24>
    cef0:	e7f7      	b.n	cee2 <get_object_item+0x62>
        return NULL;
    cef2:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
    cef4:	4620      	mov	r0, r4
    cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cef8:	0003c002 	.word	0x0003c002

0000cefc <cJSON_Delete>:
{
    cefc:	b570      	push	{r4, r5, r6, lr}
    cefe:	4604      	mov	r4, r0
    cf00:	4d0f      	ldr	r5, [pc, #60]	; (cf40 <cJSON_Delete+0x44>)
    while (item != NULL)
    cf02:	b904      	cbnz	r4, cf06 <cJSON_Delete+0xa>
}
    cf04:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
    cf06:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
    cf08:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
    cf0a:	05d9      	lsls	r1, r3, #23
    cf0c:	d404      	bmi.n	cf18 <cJSON_Delete+0x1c>
    cf0e:	68a0      	ldr	r0, [r4, #8]
    cf10:	b970      	cbnz	r0, cf30 <cJSON_Delete+0x34>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    cf12:	6920      	ldr	r0, [r4, #16]
            global_hooks.deallocate(item->valuestring);
    cf14:	686b      	ldr	r3, [r5, #4]
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    cf16:	b988      	cbnz	r0, cf3c <cJSON_Delete+0x40>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
    cf18:	68e3      	ldr	r3, [r4, #12]
    cf1a:	059b      	lsls	r3, r3, #22
    cf1c:	d403      	bmi.n	cf26 <cJSON_Delete+0x2a>
    cf1e:	6a20      	ldr	r0, [r4, #32]
    cf20:	b108      	cbz	r0, cf26 <cJSON_Delete+0x2a>
            global_hooks.deallocate(item->string);
    cf22:	686b      	ldr	r3, [r5, #4]
    cf24:	4798      	blx	r3
        global_hooks.deallocate(item);
    cf26:	4620      	mov	r0, r4
    cf28:	686b      	ldr	r3, [r5, #4]
    cf2a:	4798      	blx	r3
        item = next;
    cf2c:	4634      	mov	r4, r6
    cf2e:	e7e8      	b.n	cf02 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
    cf30:	f7ff ffe4 	bl	cefc <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    cf34:	68e3      	ldr	r3, [r4, #12]
    cf36:	05da      	lsls	r2, r3, #23
    cf38:	d5eb      	bpl.n	cf12 <cJSON_Delete+0x16>
    cf3a:	e7ed      	b.n	cf18 <cJSON_Delete+0x1c>
            global_hooks.deallocate(item->valuestring);
    cf3c:	4798      	blx	r3
    cf3e:	e7eb      	b.n	cf18 <cJSON_Delete+0x1c>
    cf40:	2000c810 	.word	0x2000c810

0000cf44 <cJSON_ParseWithLengthOpts>:
{
    cf44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf48:	4605      	mov	r5, r0
    global_error.json = NULL;
    cf4a:	f04f 0900 	mov.w	r9, #0
{
    cf4e:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
    cf50:	4f2f      	ldr	r7, [pc, #188]	; (d010 <cJSON_ParseWithLengthOpts+0xcc>)
{
    cf52:	460c      	mov	r4, r1
    cf54:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
    cf56:	2100      	movs	r1, #0
    cf58:	221c      	movs	r2, #28
    cf5a:	a801      	add	r0, sp, #4
{
    cf5c:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
    cf5e:	f023 fc90 	bl	30882 <memset>
    global_error.position = 0;
    cf62:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
    cf66:	b925      	cbnz	r5, cf72 <cJSON_ParseWithLengthOpts+0x2e>
    return NULL;
    cf68:	2400      	movs	r4, #0
}
    cf6a:	4620      	mov	r0, r4
    cf6c:	b009      	add	sp, #36	; 0x24
    cf6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value == NULL || 0 == buffer_length)
    cf72:	2c00      	cmp	r4, #0
    cf74:	d03d      	beq.n	cff2 <cJSON_ParseWithLengthOpts+0xae>
    buffer.hooks = global_hooks;
    cf76:	4b27      	ldr	r3, [pc, #156]	; (d014 <cJSON_ParseWithLengthOpts+0xd0>)
    buffer.length = buffer_length;
    cf78:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
    cf7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    cf80:	ab08      	add	r3, sp, #32
    cf82:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
    cf86:	f01d fc94 	bl	2a8b2 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
    cf8a:	4604      	mov	r4, r0
    cf8c:	2800      	cmp	r0, #0
    cf8e:	d030      	beq.n	cff2 <cJSON_ParseWithLengthOpts+0xae>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
    cf90:	9801      	ldr	r0, [sp, #4]
    cf92:	b150      	cbz	r0, cfaa <cJSON_ParseWithLengthOpts+0x66>
    cf94:	9b03      	ldr	r3, [sp, #12]
    cf96:	b9e3      	cbnz	r3, cfd2 <cJSON_ParseWithLengthOpts+0x8e>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
    cf98:	9b02      	ldr	r3, [sp, #8]
    cf9a:	2b04      	cmp	r3, #4
    cf9c:	d904      	bls.n	cfa8 <cJSON_ParseWithLengthOpts+0x64>
    cf9e:	2203      	movs	r2, #3
    cfa0:	491d      	ldr	r1, [pc, #116]	; (d018 <cJSON_ParseWithLengthOpts+0xd4>)
    cfa2:	f023 fde2 	bl	30b6a <strncmp>
    cfa6:	b188      	cbz	r0, cfcc <cJSON_ParseWithLengthOpts+0x88>
    return buffer;
    cfa8:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
    cfaa:	f01d fc6b 	bl	2a884 <buffer_skip_whitespace>
    cfae:	4601      	mov	r1, r0
    cfb0:	4620      	mov	r0, r4
    cfb2:	f7fc f941 	bl	9238 <parse_value>
    cfb6:	b1c8      	cbz	r0, cfec <cJSON_ParseWithLengthOpts+0xa8>
    if (require_null_terminated)
    cfb8:	f1b8 0f00 	cmp.w	r8, #0
    cfbc:	d10b      	bne.n	cfd6 <cJSON_ParseWithLengthOpts+0x92>
    if (return_parse_end)
    cfbe:	2e00      	cmp	r6, #0
    cfc0:	d0d3      	beq.n	cf6a <cJSON_ParseWithLengthOpts+0x26>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
    cfc2:	9b01      	ldr	r3, [sp, #4]
    cfc4:	9a03      	ldr	r2, [sp, #12]
    cfc6:	4413      	add	r3, r2
    cfc8:	6033      	str	r3, [r6, #0]
    cfca:	e7ce      	b.n	cf6a <cJSON_ParseWithLengthOpts+0x26>
        buffer->offset += 3;
    cfcc:	2303      	movs	r3, #3
    cfce:	9303      	str	r3, [sp, #12]
    cfd0:	e7ea      	b.n	cfa8 <cJSON_ParseWithLengthOpts+0x64>
        return NULL;
    cfd2:	4648      	mov	r0, r9
    cfd4:	e7e9      	b.n	cfaa <cJSON_ParseWithLengthOpts+0x66>
        buffer_skip_whitespace(&buffer);
    cfd6:	a801      	add	r0, sp, #4
    cfd8:	f01d fc54 	bl	2a884 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
    cfdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cfe0:	4293      	cmp	r3, r2
    cfe2:	d203      	bcs.n	cfec <cJSON_ParseWithLengthOpts+0xa8>
    cfe4:	9a01      	ldr	r2, [sp, #4]
    cfe6:	5cd3      	ldrb	r3, [r2, r3]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d0e8      	beq.n	cfbe <cJSON_ParseWithLengthOpts+0x7a>
        cJSON_Delete(item);
    cfec:	4620      	mov	r0, r4
    cfee:	f7ff ff85 	bl	cefc <cJSON_Delete>
        if (buffer.offset < buffer.length)
    cff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cff6:	4293      	cmp	r3, r2
    cff8:	d301      	bcc.n	cffe <cJSON_ParseWithLengthOpts+0xba>
        else if (buffer.length > 0)
    cffa:	b132      	cbz	r2, d00a <cJSON_ParseWithLengthOpts+0xc6>
            local_error.position = buffer.length - 1;
    cffc:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
    cffe:	b10e      	cbz	r6, d004 <cJSON_ParseWithLengthOpts+0xc0>
            *return_parse_end = (const char*)local_error.json + local_error.position;
    d000:	18ea      	adds	r2, r5, r3
    d002:	6032      	str	r2, [r6, #0]
        global_error = local_error;
    d004:	e9c7 5300 	strd	r5, r3, [r7]
    d008:	e7ae      	b.n	cf68 <cJSON_ParseWithLengthOpts+0x24>
        local_error.position = 0;
    d00a:	4613      	mov	r3, r2
    d00c:	e7f7      	b.n	cffe <cJSON_ParseWithLengthOpts+0xba>
    d00e:	bf00      	nop
    d010:	2000e048 	.word	0x2000e048
    d014:	2000c810 	.word	0x2000c810
    d018:	00033cb3 	.word	0x00033cb3

0000d01c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d020:	b091      	sub	sp, #68	; 0x44
    d022:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    d024:	f002 0304 	and.w	r3, r2, #4
    d028:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    d02a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    d02e:	3301      	adds	r3, #1
    d030:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    d032:	0783      	lsls	r3, r0, #30
{
    d034:	4605      	mov	r5, r0
    d036:	460e      	mov	r6, r1
    d038:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    d03c:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    d03e:	f040 81fe 	bne.w	d43e <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    d042:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    d044:	b130      	cbz	r0, d054 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    d046:	2907      	cmp	r1, #7
    d048:	d809      	bhi.n	d05e <cbvprintf_package+0x42>
		return -ENOSPC;
    d04a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    d04e:	b011      	add	sp, #68	; 0x44
    d050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    d054:	f001 0607 	and.w	r6, r1, #7
    d058:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    d05a:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    d05e:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    d062:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    d066:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    d068:	4647      	mov	r7, r8
	s = fmt--;
    d06a:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    d06c:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    d070:	4643      	mov	r3, r8
	size = sizeof(char *);
    d072:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    d074:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    d078:	b10d      	cbz	r5, d07e <cbvprintf_package+0x62>
				*(const char **)buf = s;
    d07a:	9800      	ldr	r0, [sp, #0]
    d07c:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d07e:	9804      	ldr	r0, [sp, #16]
    d080:	2800      	cmp	r0, #0
    d082:	f300 80e1 	bgt.w	d248 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    d086:	489c      	ldr	r0, [pc, #624]	; (d2f8 <cbvprintf_package+0x2dc>)
    d088:	f8dd c000 	ldr.w	ip, [sp]
    d08c:	4584      	cmp	ip, r0
    d08e:	d303      	bcc.n	d098 <cbvprintf_package+0x7c>
    d090:	489a      	ldr	r0, [pc, #616]	; (d2fc <cbvprintf_package+0x2e0>)
    d092:	4584      	cmp	ip, r0
    d094:	f0c0 80d8 	bcc.w	d248 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d098:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d09c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d0a0:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d0a4:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d0a8:	f000 80e9 	beq.w	d27e <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d0ac:	f04f 0c00 	mov.w	ip, #0
    d0b0:	e0d3      	b.n	d25a <cbvprintf_package+0x23e>
			switch (*fmt) {
    d0b2:	287a      	cmp	r0, #122	; 0x7a
    d0b4:	d864      	bhi.n	d180 <cbvprintf_package+0x164>
    d0b6:	284b      	cmp	r0, #75	; 0x4b
    d0b8:	d80f      	bhi.n	d0da <cbvprintf_package+0xbe>
    d0ba:	2847      	cmp	r0, #71	; 0x47
    d0bc:	d860      	bhi.n	d180 <cbvprintf_package+0x164>
    d0be:	2829      	cmp	r0, #41	; 0x29
    d0c0:	d82f      	bhi.n	d122 <cbvprintf_package+0x106>
    d0c2:	2825      	cmp	r0, #37	; 0x25
    d0c4:	d05b      	beq.n	d17e <cbvprintf_package+0x162>
    d0c6:	d85b      	bhi.n	d180 <cbvprintf_package+0x164>
    d0c8:	2820      	cmp	r0, #32
    d0ca:	d07f      	beq.n	d1cc <cbvprintf_package+0x1b0>
    d0cc:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    d0d0:	f1d9 0300 	rsbs	r3, r9, #0
    d0d4:	eb43 0309 	adc.w	r3, r3, r9
    d0d8:	e078      	b.n	d1cc <cbvprintf_package+0x1b0>
    d0da:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    d0de:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    d0e2:	d84d      	bhi.n	d180 <cbvprintf_package+0x164>
    d0e4:	e8df f00e 	tbb	[pc, lr]
    d0e8:	4c4c4c72 	.word	0x4c4c4c72
    d0ec:	4c4c4c4c 	.word	0x4c4c4c4c
    d0f0:	4c4c4c4c 	.word	0x4c4c4c4c
    d0f4:	4c4c4c4e 	.word	0x4c4c4c4e
    d0f8:	4c4c4c4c 	.word	0x4c4c4c4c
    d0fc:	4e4c5c4c 	.word	0x4e4c5c4c
    d100:	5c5c5c4e 	.word	0x5c5c5c4e
    d104:	4c6f4e72 	.word	0x4c6f4e72
    d108:	4e184c72 	.word	0x4e184c72
    d10c:	814c4c18 	.word	0x814c4c18
    d110:	4c4c4e7e 	.word	0x4c4c4e7e
    d114:	4c4e      	.short	0x4c4e
    d116:	7e          	.byte	0x7e
    d117:	00          	.byte	0x00
    d118:	2000      	movs	r0, #0
    d11a:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    d11c:	f04f 0b04 	mov.w	fp, #4
    d120:	e03c      	b.n	d19c <cbvprintf_package+0x180>
			switch (*fmt) {
    d122:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    d126:	2001      	movs	r0, #1
    d128:	fa5f fe8e 	uxtb.w	lr, lr
    d12c:	fa00 fe0e 	lsl.w	lr, r0, lr
    d130:	f64f 70da 	movw	r0, #65498	; 0xffda
    d134:	ea1e 0f00 	tst.w	lr, r0
    d138:	d148      	bne.n	d1cc <cbvprintf_package+0x1b0>
    d13a:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    d13e:	d12f      	bne.n	d1a0 <cbvprintf_package+0x184>
    d140:	f01e 0301 	ands.w	r3, lr, #1
    d144:	d042      	beq.n	d1cc <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    d146:	3c01      	subs	r4, #1
    d148:	445c      	add	r4, fp
    d14a:	f1cb 0e00 	rsb	lr, fp, #0
    d14e:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    d152:	2d00      	cmp	r5, #0
    d154:	d05e      	beq.n	d214 <cbvprintf_package+0x1f8>
    d156:	ebaa 0e05 	sub.w	lr, sl, r5
    d15a:	44a6      	add	lr, r4
    d15c:	4576      	cmp	r6, lr
    d15e:	f4ff af74 	bcc.w	d04a <cbvprintf_package+0x2e>
		if (is_str_arg) {
    d162:	2800      	cmp	r0, #0
    d164:	d168      	bne.n	d238 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d166:	f1ba 0f04 	cmp.w	sl, #4
    d16a:	d143      	bne.n	d1f4 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    d16c:	46e1      	mov	r9, ip
    d16e:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    d172:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    d174:	46cc      	mov	ip, r9
    d176:	f04f 0a04 	mov.w	sl, #4
    d17a:	3404      	adds	r4, #4
    d17c:	e026      	b.n	d1cc <cbvprintf_package+0x1b0>
				arg_idx--;
    d17e:	3a01      	subs	r2, #1
				parsing = false;
    d180:	2300      	movs	r3, #0
				continue;
    d182:	e023      	b.n	d1cc <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    d184:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    d188:	2b6c      	cmp	r3, #108	; 0x6c
    d18a:	d130      	bne.n	d1ee <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    d18c:	2000      	movs	r0, #0
    d18e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    d192:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    d194:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    d196:	d1c1      	bne.n	d11c <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    d198:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    d19c:	46da      	mov	sl, fp
    d19e:	e7d2      	b.n	d146 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    d1a0:	f10c 0907 	add.w	r9, ip, #7
    d1a4:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    d1a8:	3407      	adds	r4, #7
    d1aa:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    d1ae:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    d1b2:	b135      	cbz	r5, d1c2 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    d1b4:	9805      	ldr	r0, [sp, #20]
    d1b6:	4420      	add	r0, r4
    d1b8:	42b0      	cmp	r0, r6
    d1ba:	f63f af46 	bhi.w	d04a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    d1be:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    d1c2:	2300      	movs	r3, #0
				buf += size;
    d1c4:	3408      	adds	r4, #8
			switch (*fmt) {
    d1c6:	f04f 0b08 	mov.w	fp, #8
    d1ca:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    d1cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d1d0:	2800      	cmp	r0, #0
    d1d2:	f000 80bc 	beq.w	d34e <cbvprintf_package+0x332>
			if (!parsing) {
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	f47f af6b 	bne.w	d0b2 <cbvprintf_package+0x96>
				if (*fmt == '%') {
    d1dc:	2825      	cmp	r0, #37	; 0x25
    d1de:	d1f5      	bne.n	d1cc <cbvprintf_package+0x1b0>
					parsing = true;
    d1e0:	2301      	movs	r3, #1
					arg_idx++;
    d1e2:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    d1e4:	f04f 0b04 	mov.w	fp, #4
    d1e8:	e7ef      	b.n	d1ca <cbvprintf_package+0x1ae>
			switch (*fmt) {
    d1ea:	4618      	mov	r0, r3
    d1ec:	e795      	b.n	d11a <cbvprintf_package+0xfe>
    d1ee:	2000      	movs	r0, #0
				parsing = false;
    d1f0:	4603      	mov	r3, r0
    d1f2:	e7a8      	b.n	d146 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    d1f4:	f1ba 0f08 	cmp.w	sl, #8
    d1f8:	f040 809b 	bne.w	d332 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d1fc:	f10c 0907 	add.w	r9, ip, #7
    d200:	f029 0c07 	bic.w	ip, r9, #7
    d204:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    d208:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    d20c:	f04f 0a08 	mov.w	sl, #8
    d210:	3408      	adds	r4, #8
    d212:	e7db      	b.n	d1cc <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    d214:	b980      	cbnz	r0, d238 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d216:	f1ba 0f04 	cmp.w	sl, #4
    d21a:	d102      	bne.n	d222 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    d21c:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    d220:	e7a8      	b.n	d174 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    d222:	f1ba 0f08 	cmp.w	sl, #8
    d226:	f040 8084 	bne.w	d332 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d22a:	f10c 0907 	add.w	r9, ip, #7
    d22e:	f029 0907 	bic.w	r9, r9, #7
    d232:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    d236:	e7e9      	b.n	d20c <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    d238:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d23a:	9804      	ldr	r0, [sp, #16]
    d23c:	3801      	subs	r0, #1
    d23e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    d240:	f859 0b04 	ldr.w	r0, [r9], #4
    d244:	9000      	str	r0, [sp, #0]
    d246:	e717      	b.n	d078 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    d248:	9802      	ldr	r0, [sp, #8]
    d24a:	0780      	lsls	r0, r0, #30
    d24c:	d548      	bpl.n	d2e0 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d24e:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d252:	eba4 0e05 	sub.w	lr, r4, r5
    d256:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d25a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    d25e:	d31d      	bcc.n	d29c <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    d260:	4927      	ldr	r1, [pc, #156]	; (d300 <cbvprintf_package+0x2e4>)
    d262:	f240 237b 	movw	r3, #635	; 0x27b
    d266:	4a27      	ldr	r2, [pc, #156]	; (d304 <cbvprintf_package+0x2e8>)
    d268:	4827      	ldr	r0, [pc, #156]	; (d308 <cbvprintf_package+0x2ec>)
    d26a:	f01d fda5 	bl	2adb8 <assert_print>
    d26e:	4827      	ldr	r0, [pc, #156]	; (d30c <cbvprintf_package+0x2f0>)
    d270:	f01d fda2 	bl	2adb8 <assert_print>
    d274:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    d278:	4822      	ldr	r0, [pc, #136]	; (d304 <cbvprintf_package+0x2e8>)
    d27a:	f01d fd96 	bl	2adaa <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d27e:	2f0f      	cmp	r7, #15
    d280:	d80e      	bhi.n	d2a0 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    d282:	2d00      	cmp	r5, #0
    d284:	d046      	beq.n	d314 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d286:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    d28a:	44ec      	add	ip, sp
    d28c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d290:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    d294:	9803      	ldr	r0, [sp, #12]
    d296:	3001      	adds	r0, #1
    d298:	9003      	str	r0, [sp, #12]
    d29a:	e020      	b.n	d2de <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d29c:	2f0f      	cmp	r7, #15
    d29e:	d90c      	bls.n	d2ba <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    d2a0:	4917      	ldr	r1, [pc, #92]	; (d300 <cbvprintf_package+0x2e4>)
    d2a2:	f44f 7320 	mov.w	r3, #640	; 0x280
    d2a6:	4a17      	ldr	r2, [pc, #92]	; (d304 <cbvprintf_package+0x2e8>)
    d2a8:	4817      	ldr	r0, [pc, #92]	; (d308 <cbvprintf_package+0x2ec>)
    d2aa:	f01d fd85 	bl	2adb8 <assert_print>
    d2ae:	4818      	ldr	r0, [pc, #96]	; (d310 <cbvprintf_package+0x2f4>)
    d2b0:	f01d fd82 	bl	2adb8 <assert_print>
    d2b4:	f44f 7120 	mov.w	r1, #640	; 0x280
    d2b8:	e7de      	b.n	d278 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    d2ba:	b1bd      	cbz	r5, d2ec <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d2bc:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    d2c0:	44ee      	add	lr, sp
    d2c2:	b2c0      	uxtb	r0, r0
    d2c4:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d2c8:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    d2cc:	f1bc 0f00 	cmp.w	ip, #0
    d2d0:	d0e0      	beq.n	d294 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    d2d2:	f060 007f 	orn	r0, r0, #127	; 0x7f
    d2d6:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    d2da:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    d2de:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    d2e0:	f1c5 0008 	rsb	r0, r5, #8
    d2e4:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    d2e6:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    d2e8:	9005      	str	r0, [sp, #20]
    d2ea:	e76f      	b.n	d1cc <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    d2ec:	f1bc 0f00 	cmp.w	ip, #0
    d2f0:	d010      	beq.n	d314 <cbvprintf_package+0x2f8>
					len += 1;
    d2f2:	3601      	adds	r6, #1
    d2f4:	e7f3      	b.n	d2de <cbvprintf_package+0x2c2>
    d2f6:	bf00      	nop
    d2f8:	00031754 	.word	0x00031754
    d2fc:	0003c350 	.word	0x0003c350
    d300:	000386dc 	.word	0x000386dc
    d304:	00033cb7 	.word	0x00033cb7
    d308:	00033bc2 	.word	0x00033bc2
    d30c:	00033ce5 	.word	0x00033ce5
    d310:	00033d06 	.word	0x00033d06
				} else if (rws_pos_en) {
    d314:	9801      	ldr	r0, [sp, #4]
					len += 2;
    d316:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    d318:	2800      	cmp	r0, #0
    d31a:	d1e0      	bne.n	d2de <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    d31c:	9800      	ldr	r0, [sp, #0]
    d31e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    d322:	9205      	str	r2, [sp, #20]
    d324:	f7fb ff7d 	bl	9222 <strlen>
    d328:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    d32c:	9a05      	ldr	r2, [sp, #20]
    d32e:	4406      	add	r6, r0
    d330:	e7d5      	b.n	d2de <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    d332:	f240 23c5 	movw	r3, #709	; 0x2c5
    d336:	4a43      	ldr	r2, [pc, #268]	; (d444 <cbvprintf_package+0x428>)
    d338:	4943      	ldr	r1, [pc, #268]	; (d448 <cbvprintf_package+0x42c>)
    d33a:	4844      	ldr	r0, [pc, #272]	; (d44c <cbvprintf_package+0x430>)
    d33c:	f01d fd3c 	bl	2adb8 <assert_print>
    d340:	4651      	mov	r1, sl
    d342:	4843      	ldr	r0, [pc, #268]	; (d450 <cbvprintf_package+0x434>)
    d344:	f01d fd38 	bl	2adb8 <assert_print>
    d348:	f240 21c5 	movw	r1, #709	; 0x2c5
    d34c:	e794      	b.n	d278 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    d34e:	1b63      	subs	r3, r4, r5
    d350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d354:	d30c      	bcc.n	d370 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    d356:	493c      	ldr	r1, [pc, #240]	; (d448 <cbvprintf_package+0x42c>)
    d358:	f240 23d1 	movw	r3, #721	; 0x2d1
    d35c:	4a39      	ldr	r2, [pc, #228]	; (d444 <cbvprintf_package+0x428>)
    d35e:	483b      	ldr	r0, [pc, #236]	; (d44c <cbvprintf_package+0x430>)
    d360:	f01d fd2a 	bl	2adb8 <assert_print>
    d364:	483b      	ldr	r0, [pc, #236]	; (d454 <cbvprintf_package+0x438>)
    d366:	f01d fd27 	bl	2adb8 <assert_print>
    d36a:	f240 21d1 	movw	r1, #721	; 0x2d1
    d36e:	e783      	b.n	d278 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    d370:	b91d      	cbnz	r5, d37a <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    d372:	f1a6 0408 	sub.w	r4, r6, #8
    d376:	18e0      	adds	r0, r4, r3
    d378:	e669      	b.n	d04e <cbvprintf_package+0x32>
	if (rws_pos_en) {
    d37a:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    d37c:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    d37e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    d380:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    d382:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    d386:	b1c2      	cbz	r2, d3ba <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    d388:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    d38a:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    d38e:	f1b8 0f00 	cmp.w	r8, #0
    d392:	d005      	beq.n	d3a0 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    d394:	2200      	movs	r2, #0
    d396:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    d398:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    d39c:	4297      	cmp	r7, r2
    d39e:	d10e      	bne.n	d3be <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    d3a0:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    d3a4:	f1c5 0301 	rsb	r3, r5, #1
    d3a8:	f10d 0920 	add.w	r9, sp, #32
    d3ac:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    d3ae:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    d3b2:	4557      	cmp	r7, sl
    d3b4:	d112      	bne.n	d3dc <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    d3b6:	1b60      	subs	r0, r4, r5
    d3b8:	e649      	b.n	d04e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    d3ba:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    d3bc:	e7e5      	b.n	d38a <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    d3be:	f810 3b01 	ldrb.w	r3, [r0], #1
    d3c2:	0619      	lsls	r1, r3, #24
    d3c4:	d508      	bpl.n	d3d8 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    d3c6:	eb04 0e0c 	add.w	lr, r4, ip
    d3ca:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    d3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    d3d0:	f4ff ae3b 	bcc.w	d04a <cbvprintf_package+0x2e>
			*buf++ = pos;
    d3d4:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    d3d8:	3201      	adds	r2, #1
    d3da:	e7df      	b.n	d39c <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    d3dc:	f1b8 0f00 	cmp.w	r8, #0
    d3e0:	d003      	beq.n	d3ea <cbvprintf_package+0x3ce>
    d3e2:	f999 2000 	ldrsb.w	r2, [r9]
    d3e6:	2a00      	cmp	r2, #0
    d3e8:	db17      	blt.n	d41a <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    d3ea:	9b01      	ldr	r3, [sp, #4]
    d3ec:	b1d3      	cbz	r3, d424 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    d3ee:	f81a 200b 	ldrb.w	r2, [sl, fp]
    d3f2:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    d3f6:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    d3f8:	9b02      	ldr	r3, [sp, #8]
    d3fa:	1898      	adds	r0, r3, r2
    d3fc:	4420      	add	r0, r4
    d3fe:	4286      	cmp	r6, r0
    d400:	f4ff ae23 	bcc.w	d04a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    d404:	f899 0000 	ldrb.w	r0, [r9]
    d408:	9900      	ldr	r1, [sp, #0]
    d40a:	f804 0b01 	strb.w	r0, [r4], #1
    d40e:	4620      	mov	r0, r4
    d410:	9203      	str	r2, [sp, #12]
    d412:	f023 fa16 	bl	30842 <memcpy>
		buf += size;
    d416:	9a03      	ldr	r2, [sp, #12]
    d418:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    d41a:	f10a 0a01 	add.w	sl, sl, #1
    d41e:	f109 0901 	add.w	r9, r9, #1
    d422:	e7c6      	b.n	d3b2 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    d424:	f899 2000 	ldrb.w	r2, [r9]
    d428:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    d42c:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    d42e:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    d430:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    d432:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    d436:	f7fb fef4 	bl	9222 <strlen>
    d43a:	1c42      	adds	r2, r0, #1
    d43c:	e7dc      	b.n	d3f8 <cbvprintf_package+0x3dc>
		return -EFAULT;
    d43e:	f06f 000d 	mvn.w	r0, #13
    d442:	e604      	b.n	d04e <cbvprintf_package+0x32>
    d444:	00033cb7 	.word	0x00033cb7
    d448:	000386dc 	.word	0x000386dc
    d44c:	00033bc2 	.word	0x00033bc2
    d450:	00033d20 	.word	0x00033d20
    d454:	00033d35 	.word	0x00033d35

0000d458 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d45c:	b095      	sub	sp, #84	; 0x54
    d45e:	af00      	add	r7, sp, #0
    d460:	468a      	mov	sl, r1
	__ASSERT_NO_MSG(in_packaged != NULL);
    d462:	4604      	mov	r4, r0
{
    d464:	627a      	str	r2, [r7, #36]	; 0x24
    d466:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    d468:	b958      	cbnz	r0, d482 <cbprintf_package_convert+0x2a>
    d46a:	49a9      	ldr	r1, [pc, #676]	; (d710 <cbprintf_package_convert+0x2b8>)
    d46c:	f44f 7365 	mov.w	r3, #916	; 0x394
    d470:	4aa8      	ldr	r2, [pc, #672]	; (d714 <cbprintf_package_convert+0x2bc>)
    d472:	48a9      	ldr	r0, [pc, #676]	; (d718 <cbprintf_package_convert+0x2c0>)
    d474:	f01d fca0 	bl	2adb8 <assert_print>
    d478:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    d47c:	48a5      	ldr	r0, [pc, #660]	; (d714 <cbprintf_package_convert+0x2bc>)
    d47e:	f01d fc94 	bl	2adaa <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    d482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	ros_nbr   = buf[2];
    d484:	f890 b002 	ldrb.w	fp, [r0, #2]
    d488:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d48c:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    d48e:	b941      	cbnz	r1, d4a2 <cbprintf_package_convert+0x4a>
	s_nbr     = buf[1];
    d490:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
    d492:	7800      	ldrb	r0, [r0, #0]
    d494:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    d498:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    d49a:	4555      	cmp	r5, sl
    d49c:	d817      	bhi.n	d4ce <cbprintf_package_convert+0x76>
	return (size_t)(uintptr_t)(buf - start);
    d49e:	eba0 0a04 	sub.w	sl, r0, r4
	rws_nbr = in_desc->rw_str_cnt;
    d4a2:	78e3      	ldrb	r3, [r4, #3]
    d4a4:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    d4a6:	f1bb 0f00 	cmp.w	fp, #0
    d4aa:	d002      	beq.n	d4b2 <cbprintf_package_convert+0x5a>
    d4ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d4ae:	07d8      	lsls	r0, r3, #31
    d4b0:	d416      	bmi.n	d4e0 <cbprintf_package_convert+0x88>
	rw_cpy = rws_nbr > 0 &&
    d4b2:	697b      	ldr	r3, [r7, #20]
    d4b4:	bb53      	cbnz	r3, d50c <cbprintf_package_convert+0xb4>
		if (cb) {
    d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4b8:	b11b      	cbz	r3, d4c2 <cbprintf_package_convert+0x6a>
			cb(in_packaged, in_len, ctx);
    d4ba:	4651      	mov	r1, sl
    d4bc:	4620      	mov	r0, r4
    d4be:	69ba      	ldr	r2, [r7, #24]
    d4c0:	4798      	blx	r3
		return in_len;
    d4c2:	4655      	mov	r5, sl

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    d4c4:	4628      	mov	r0, r5
    d4c6:	3754      	adds	r7, #84	; 0x54
    d4c8:	46bd      	mov	sp, r7
    d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    d4ce:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
    d4d0:	4630      	mov	r0, r6
    d4d2:	f7fb fea6 	bl	9222 <strlen>
    d4d6:	3001      	adds	r0, #1
    d4d8:	4430      	add	r0, r6
	for (unsigned int i = 0; i < s_nbr; i++) {
    d4da:	f10a 0a01 	add.w	sl, sl, #1
    d4de:	e7dc      	b.n	d49a <cbprintf_package_convert+0x42>
	rw_cpy = rws_nbr > 0 &&
    d4e0:	7823      	ldrb	r3, [r4, #0]
    d4e2:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    d4e4:	623b      	str	r3, [r7, #32]
    d4e6:	009b      	lsls	r3, r3, #2
    d4e8:	60fb      	str	r3, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    d4ea:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d4ec:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
    d4ee:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	f040 8104 	bne.w	d702 <cbprintf_package_convert+0x2aa>
		out_len = (int)in_len;
    d4fa:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    d4fc:	2600      	movs	r6, #0
		out_len = (int)in_len;
    d4fe:	4655      	mov	r5, sl
		if (ro_cpy) {
    d500:	eb09 0a0b 	add.w	sl, r9, fp
			for (unsigned int i = 0; i < ros_nbr; i++) {
    d504:	45c2      	cmp	sl, r8
    d506:	d153      	bne.n	d5b0 <cbprintf_package_convert+0x158>
    d508:	44d9      	add	r9, fp
    d50a:	e013      	b.n	d534 <cbprintf_package_convert+0xdc>
	rw_cpy = rws_nbr > 0 &&
    d50c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d50e:	0799      	lsls	r1, r3, #30
    d510:	d5d1      	bpl.n	d4b6 <cbprintf_package_convert+0x5e>
	args_size = in_desc->len * sizeof(int);
    d512:	7823      	ldrb	r3, [r4, #0]
    d514:	4699      	mov	r9, r3
    d516:	623b      	str	r3, [r7, #32]
    d518:	009b      	lsls	r3, r3, #2
    d51a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d51c:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    d51e:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d522:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d526:	2b00      	cmp	r3, #0
    d528:	d17c      	bne.n	d624 <cbprintf_package_convert+0x1cc>
		out_len = (int)in_len;
    d52a:	4655      	mov	r5, sl
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d52c:	f1bb 0f00 	cmp.w	fp, #0
    d530:	d151      	bne.n	d5d6 <cbprintf_package_convert+0x17e>
	size_t strl_cnt = 0;
    d532:	465e      	mov	r6, fp
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d536:	f013 0f05 	tst.w	r3, #5
    d53a:	bf0c      	ite	eq
    d53c:	f04f 0b02 	moveq.w	fp, #2
    d540:	f04f 0b01 	movne.w	fp, #1
    d544:	697b      	ldr	r3, [r7, #20]
    d546:	eb09 0a43 	add.w	sl, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d54a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d54c:	f003 0302 	and.w	r3, r3, #2
    d550:	627b      	str	r3, [r7, #36]	; 0x24
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d552:	45d1      	cmp	r9, sl
    d554:	d0b6      	beq.n	d4c4 <cbprintf_package_convert+0x6c>
			uint8_t arg_idx = *str_pos++;
    d556:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    d55a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    d55e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    d562:	4b6e      	ldr	r3, [pc, #440]	; (d71c <cbprintf_package_convert+0x2c4>)
    d564:	4598      	cmp	r8, r3
    d566:	d302      	bcc.n	d56e <cbprintf_package_convert+0x116>
    d568:	4b6d      	ldr	r3, [pc, #436]	; (d720 <cbprintf_package_convert+0x2c8>)
    d56a:	4598      	cmp	r8, r3
    d56c:	d33a      	bcc.n	d5e4 <cbprintf_package_convert+0x18c>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    d56e:	693b      	ldr	r3, [r7, #16]
    d570:	2b00      	cmp	r3, #0
    d572:	d044      	beq.n	d5fe <cbprintf_package_convert+0x1a6>
    d574:	69f8      	ldr	r0, [r7, #28]
    d576:	f01d f9f7 	bl	2a968 <is_ptr>
    d57a:	2800      	cmp	r0, #0
    d57c:	d03f      	beq.n	d5fe <cbprintf_package_convert+0x1a6>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    d57e:	46e8      	mov	r8, sp
    d580:	b08a      	sub	sp, #40	; 0x28
    d582:	466a      	mov	r2, sp
    d584:	4b67      	ldr	r3, [pc, #412]	; (d724 <cbprintf_package_convert+0x2cc>)
    d586:	6153      	str	r3, [r2, #20]
    d588:	4b67      	ldr	r3, [pc, #412]	; (d728 <cbprintf_package_convert+0x2d0>)
    d58a:	6193      	str	r3, [r2, #24]
    d58c:	69fb      	ldr	r3, [r7, #28]
    d58e:	e9c2 3107 	strd	r3, r1, [r2, #28]
    d592:	f240 3301 	movw	r3, #769	; 0x301
    d596:	8493      	strh	r3, [r2, #36]	; 0x24
    d598:	4b64      	ldr	r3, [pc, #400]	; (d72c <cbprintf_package_convert+0x2d4>)
    d59a:	f842 3f10 	str.w	r3, [r2, #16]!
    d59e:	2300      	movs	r3, #0
    d5a0:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    d5a4:	4862      	ldr	r0, [pc, #392]	; (d730 <cbprintf_package_convert+0x2d8>)
    d5a6:	f002 f923 	bl	f7f0 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    d5aa:	3d02      	subs	r5, #2
    d5ac:	46c5      	mov	sp, r8
				continue;
    d5ae:	e7d0      	b.n	d552 <cbprintf_package_convert+0xfa>
				const char *str = *(const char **)&buf32[*str_pos];
    d5b0:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
    d5b4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    d5b8:	f7fb fe33 	bl	9222 <strlen>
				if (strl && strl_cnt < strl_len) {
    d5bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    d5be:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    d5c0:	b13b      	cbz	r3, d5d2 <cbprintf_package_convert+0x17a>
    d5c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d5c6:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    d5c8:	bf3e      	ittt	cc
    d5ca:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
    d5cc:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
    d5d0:	3601      	addcc	r6, #1
				out_len += len;
    d5d2:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    d5d4:	e796      	b.n	d504 <cbprintf_package_convert+0xac>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d5d8:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
    d5dc:	bf1c      	itt	ne
    d5de:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    d5e0:	44d9      	addne	r9, fp
    d5e2:	e7a7      	b.n	d534 <cbprintf_package_convert+0xdc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    d5e4:	693b      	ldr	r3, [r7, #16]
    d5e6:	b123      	cbz	r3, d5f2 <cbprintf_package_convert+0x19a>
    d5e8:	69f8      	ldr	r0, [r7, #28]
    d5ea:	f01d f9bd 	bl	2a968 <is_ptr>
    d5ee:	2800      	cmp	r0, #0
    d5f0:	d1c5      	bne.n	d57e <cbprintf_package_convert+0x126>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    d5f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d5f4:	07da      	lsls	r2, r3, #31
    d5f6:	d405      	bmi.n	d604 <cbprintf_package_convert+0x1ac>
					out_len -= drop_ro_str_pos ? 2 : 1;
    d5f8:	eba5 050b 	sub.w	r5, r5, fp
    d5fc:	e7a9      	b.n	d552 <cbprintf_package_convert+0xfa>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d600:	2b00      	cmp	r3, #0
    d602:	d0a6      	beq.n	d552 <cbprintf_package_convert+0xfa>
		return 1 + strlen(str);
    d604:	4640      	mov	r0, r8
    d606:	f7fb fe0c 	bl	9222 <strlen>
				if (strl && strl_cnt < strl_len) {
    d60a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d60c:	b143      	cbz	r3, d620 <cbprintf_package_convert+0x1c8>
    d60e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d612:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    d614:	bf3f      	itttt	cc
    d616:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    d618:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    d61a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    d61e:	3601      	addcc	r6, #1
				out_len += (len - 1);
    d620:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d622:	e796      	b.n	d552 <cbprintf_package_convert+0xfa>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d624:	f1bb 0f00 	cmp.w	fp, #0
    d628:	f000 8084 	beq.w	d734 <cbprintf_package_convert+0x2dc>
    d62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d62e:	f013 0604 	ands.w	r6, r3, #4
    d632:	f000 8082 	beq.w	d73a <cbprintf_package_convert+0x2e2>
		keep_cnt = ros_nbr;
    d636:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    d638:	2600      	movs	r6, #0
		dst = keep_str_pos;
    d63a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d63e:	465a      	mov	r2, fp
    d640:	4649      	mov	r1, r9
    d642:	f023 f8fe 	bl	30842 <memcpy>
	str_pos += ros_nbr;
    d646:	697b      	ldr	r3, [r7, #20]
    d648:	44d9      	add	r9, fp
	for (unsigned int i = 0; i < rws_nbr; i++) {
    d64a:	005b      	lsls	r3, r3, #1
    d64c:	607b      	str	r3, [r7, #4]
    d64e:	697b      	ldr	r3, [r7, #20]
    d650:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    d654:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d658:	f003 0302 	and.w	r3, r3, #2
    d65c:	603b      	str	r3, [r7, #0]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    d65e:	68bb      	ldr	r3, [r7, #8]
    d660:	4599      	cmp	r9, r3
    d662:	d16c      	bne.n	d73e <cbprintf_package_convert+0x2e6>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d664:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d666:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d668:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d66a:	0789      	lsls	r1, r1, #30
    d66c:	bf48      	it	mi
    d66e:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d670:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d674:	bf58      	it	pl
    d676:	ea4f 0158 	movpl.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d67a:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d67c:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d67e:	f100 80e2 	bmi.w	d846 <cbprintf_package_convert+0x3ee>
    d682:	f010 0f04 	tst.w	r0, #4
    d686:	bf14      	ite	ne
    d688:	4640      	movne	r0, r8
    d68a:	2000      	moveq	r0, #0
    d68c:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    d68e:	7062      	strb	r2, [r4, #1]
    d690:	70a0      	strb	r0, [r4, #2]
    d692:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    d694:	4620      	mov	r0, r4
    d696:	69ba      	ldr	r2, [r7, #24]
    d698:	68f9      	ldr	r1, [r7, #12]
    d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d69c:	4798      	blx	r3
	if (rv < 0) {
    d69e:	1e05      	subs	r5, r0, #0
    d6a0:	f6ff af10 	blt.w	d4c4 <cbprintf_package_convert+0x6c>
	*in_desc = in_desc_backup;
    d6a4:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    d6a6:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    d6a8:	7023      	strb	r3, [r4, #0]
    d6aa:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    d6ac:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    d6ae:	7063      	strb	r3, [r4, #1]
    d6b0:	697b      	ldr	r3, [r7, #20]
    d6b2:	f884 b002 	strb.w	fp, [r4, #2]
    d6b6:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    d6b8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6be:	4798      	blx	r3
	if (rv < 0) {
    d6c0:	f1b0 0800 	subs.w	r8, r0, #0
    d6c4:	f2c0 80ec 	blt.w	d8a0 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    d6c8:	68fb      	ldr	r3, [r7, #12]
    d6ca:	ebaa 010b 	sub.w	r1, sl, fp
    d6ce:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    d6d0:	687b      	ldr	r3, [r7, #4]
    d6d2:	4648      	mov	r0, r9
    d6d4:	1ac9      	subs	r1, r1, r3
    d6d6:	69ba      	ldr	r2, [r7, #24]
    d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6da:	4798      	blx	r3
	if (rv < 0) {
    d6dc:	2800      	cmp	r0, #0
    d6de:	f2c0 80e1 	blt.w	d8a4 <cbprintf_package_convert+0x44c>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    d6e2:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    d6e6:	44a8      	add	r8, r5
	out_len += rv;
    d6e8:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    d6ec:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    d6f0:	45b3      	cmp	fp, r6
    d6f2:	f0c0 80aa 	bcc.w	d84a <cbprintf_package_convert+0x3f2>
	(void)cb(NULL, 0, ctx);
    d6f6:	2100      	movs	r1, #0
    d6f8:	69ba      	ldr	r2, [r7, #24]
    d6fa:	4608      	mov	r0, r1
    d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6fe:	4798      	blx	r3
	return out_len;
    d700:	e6e0      	b.n	d4c4 <cbprintf_package_convert+0x6c>
	if (cb == NULL) {
    d702:	465e      	mov	r6, fp
    d704:	f04f 0800 	mov.w	r8, #0
    d708:	f107 0030 	add.w	r0, r7, #48	; 0x30
    d70c:	e797      	b.n	d63e <cbprintf_package_convert+0x1e6>
    d70e:	bf00      	nop
    d710:	00033d4c 	.word	0x00033d4c
    d714:	00033cb7 	.word	0x00033cb7
    d718:	00033bc2 	.word	0x00033bc2
    d71c:	00031754 	.word	0x00031754
    d720:	0003c350 	.word	0x0003c350
    d724:	00033d67 	.word	0x00033d67
    d728:	00033e4d 	.word	0x00033e4d
    d72c:	01000005 	.word	0x01000005
    d730:	00031be4 	.word	0x00031be4
		scpy_cnt = 0;
    d734:	465e      	mov	r6, fp
		keep_cnt = 0;
    d736:	46d8      	mov	r8, fp
    d738:	e785      	b.n	d646 <cbprintf_package_convert+0x1ee>
    d73a:	46b0      	mov	r8, r6
    d73c:	e783      	b.n	d646 <cbprintf_package_convert+0x1ee>
		uint8_t arg_idx = *str_pos++;
    d73e:	f819 1b02 	ldrb.w	r1, [r9], #2
    d742:	4b59      	ldr	r3, [pc, #356]	; (d8a8 <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    d744:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    d748:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d74c:	4298      	cmp	r0, r3
    d74e:	d302      	bcc.n	d756 <cbprintf_package_convert+0x2fe>
    d750:	4b56      	ldr	r3, [pc, #344]	; (d8ac <cbprintf_package_convert+0x454>)
    d752:	4298      	cmp	r0, r3
    d754:	d316      	bcc.n	d784 <cbprintf_package_convert+0x32c>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    d756:	693b      	ldr	r3, [r7, #16]
    d758:	b12b      	cbz	r3, d766 <cbprintf_package_convert+0x30e>
    d75a:	69f8      	ldr	r0, [r7, #28]
    d75c:	f01d f904 	bl	2a968 <is_ptr>
    d760:	2800      	cmp	r0, #0
    d762:	f47f af7c 	bne.w	d65e <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d766:	683b      	ldr	r3, [r7, #0]
    d768:	2b00      	cmp	r3, #0
    d76a:	d04a      	beq.n	d802 <cbprintf_package_convert+0x3aa>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    d76c:	2e0f      	cmp	r6, #15
    d76e:	d93e      	bls.n	d7ee <cbprintf_package_convert+0x396>
    d770:	494f      	ldr	r1, [pc, #316]	; (d8b0 <cbprintf_package_convert+0x458>)
    d772:	f44f 6389 	mov.w	r3, #1096	; 0x448
    d776:	4a4f      	ldr	r2, [pc, #316]	; (d8b4 <cbprintf_package_convert+0x45c>)
    d778:	484f      	ldr	r0, [pc, #316]	; (d8b8 <cbprintf_package_convert+0x460>)
    d77a:	f01d fb1d 	bl	2adb8 <assert_print>
    d77e:	f44f 6189 	mov.w	r1, #1096	; 0x448
    d782:	e67b      	b.n	d47c <cbprintf_package_convert+0x24>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    d784:	693b      	ldr	r3, [r7, #16]
    d786:	b12b      	cbz	r3, d794 <cbprintf_package_convert+0x33c>
    d788:	69f8      	ldr	r0, [r7, #28]
    d78a:	f01d f8ed 	bl	2a968 <is_ptr>
    d78e:	2800      	cmp	r0, #0
    d790:	f47f af65 	bne.w	d65e <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    d794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d796:	07db      	lsls	r3, r3, #31
    d798:	d50b      	bpl.n	d7b2 <cbprintf_package_convert+0x35a>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    d79a:	2e0f      	cmp	r6, #15
    d79c:	d927      	bls.n	d7ee <cbprintf_package_convert+0x396>
    d79e:	4944      	ldr	r1, [pc, #272]	; (d8b0 <cbprintf_package_convert+0x458>)
    d7a0:	f240 433e 	movw	r3, #1086	; 0x43e
    d7a4:	4a43      	ldr	r2, [pc, #268]	; (d8b4 <cbprintf_package_convert+0x45c>)
    d7a6:	4844      	ldr	r0, [pc, #272]	; (d8b8 <cbprintf_package_convert+0x460>)
    d7a8:	f01d fb06 	bl	2adb8 <assert_print>
    d7ac:	f240 413e 	movw	r1, #1086	; 0x43e
    d7b0:	e664      	b.n	d47c <cbprintf_package_convert+0x24>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d7b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d7b4:	0758      	lsls	r0, r3, #29
    d7b6:	f57f af52 	bpl.w	d65e <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    d7ba:	f1b8 0f0f 	cmp.w	r8, #15
    d7be:	d909      	bls.n	d7d4 <cbprintf_package_convert+0x37c>
    d7c0:	493e      	ldr	r1, [pc, #248]	; (d8bc <cbprintf_package_convert+0x464>)
    d7c2:	f240 4341 	movw	r3, #1089	; 0x441
    d7c6:	4a3b      	ldr	r2, [pc, #236]	; (d8b4 <cbprintf_package_convert+0x45c>)
    d7c8:	483b      	ldr	r0, [pc, #236]	; (d8b8 <cbprintf_package_convert+0x460>)
    d7ca:	f01d faf5 	bl	2adb8 <assert_print>
    d7ce:	f240 4141 	movw	r1, #1089	; 0x441
    d7d2:	e653      	b.n	d47c <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_pos;
    d7d4:	f108 0328 	add.w	r3, r8, #40	; 0x28
    d7d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
    d7dc:	f108 0101 	add.w	r1, r8, #1
    d7e0:	eb03 0802 	add.w	r8, r3, r2
    d7e4:	f808 5c10 	strb.w	r5, [r8, #-16]
    d7e8:	fa5f f881 	uxtb.w	r8, r1
    d7ec:	e737      	b.n	d65e <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    d7ee:	f106 0328 	add.w	r3, r6, #40	; 0x28
    d7f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
    d7f6:	1c71      	adds	r1, r6, #1
    d7f8:	189e      	adds	r6, r3, r2
    d7fa:	f806 5c20 	strb.w	r5, [r6, #-32]
    d7fe:	b2ce      	uxtb	r6, r1
    d800:	e72d      	b.n	d65e <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    d802:	f1b8 0f0f 	cmp.w	r8, #15
    d806:	d909      	bls.n	d81c <cbprintf_package_convert+0x3c4>
    d808:	492c      	ldr	r1, [pc, #176]	; (d8bc <cbprintf_package_convert+0x464>)
    d80a:	f240 434b 	movw	r3, #1099	; 0x44b
    d80e:	4a29      	ldr	r2, [pc, #164]	; (d8b4 <cbprintf_package_convert+0x45c>)
    d810:	4829      	ldr	r0, [pc, #164]	; (d8b8 <cbprintf_package_convert+0x460>)
    d812:	f01d fad1 	bl	2adb8 <assert_print>
    d816:	f240 414b 	movw	r1, #1099	; 0x44b
    d81a:	e62f      	b.n	d47c <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_idx;
    d81c:	f108 0328 	add.w	r3, r8, #40	; 0x28
    d820:	f107 0228 	add.w	r2, r7, #40	; 0x28
    d824:	f108 0001 	add.w	r0, r8, #1
    d828:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    d82c:	f107 0350 	add.w	r3, r7, #80	; 0x50
    d830:	f108 0802 	add.w	r8, r8, #2
    d834:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    d838:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    d83c:	fa5f f888 	uxtb.w	r8, r8
    d840:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    d844:	e70b      	b.n	d65e <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d846:	2000      	movs	r0, #0
    d848:	e720      	b.n	d68c <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    d84a:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    d84e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    d852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    d856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d858:	b1fb      	cbz	r3, d89a <cbprintf_package_convert+0x442>
    d85a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    d85e:	2101      	movs	r1, #1
    d860:	69ba      	ldr	r2, [r7, #24]
    d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d864:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    d868:	4798      	blx	r3
		if (rv < 0) {
    d86a:	2800      	cmp	r0, #0
    d86c:	db1a      	blt.n	d8a4 <cbprintf_package_convert+0x44c>
		out_len += rv;
    d86e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    d870:	f1b8 0f00 	cmp.w	r8, #0
    d874:	d106      	bne.n	d884 <cbprintf_package_convert+0x42c>
    d876:	4648      	mov	r0, r9
    d878:	f7fb fcd3 	bl	9222 <strlen>
    d87c:	f100 0801 	add.w	r8, r0, #1
    d880:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    d884:	4641      	mov	r1, r8
    d886:	4648      	mov	r0, r9
    d888:	69ba      	ldr	r2, [r7, #24]
    d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d88c:	4798      	blx	r3
		if (rv < 0) {
    d88e:	2800      	cmp	r0, #0
    d890:	db08      	blt.n	d8a4 <cbprintf_package_convert+0x44c>
		out_len += rv;
    d892:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    d894:	f10b 0b01 	add.w	fp, fp, #1
    d898:	e72a      	b.n	d6f0 <cbprintf_package_convert+0x298>
		uint16_t str_len = strl ? strl[i] : 0;
    d89a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    d89e:	e7de      	b.n	d85e <cbprintf_package_convert+0x406>
    d8a0:	4645      	mov	r5, r8
    d8a2:	e60f      	b.n	d4c4 <cbprintf_package_convert+0x6c>
    d8a4:	4605      	mov	r5, r0
    d8a6:	e60d      	b.n	d4c4 <cbprintf_package_convert+0x6c>
    d8a8:	00031754 	.word	0x00031754
    d8ac:	0003c350 	.word	0x0003c350
    d8b0:	00033e0e 	.word	0x00033e0e
    d8b4:	00033cb7 	.word	0x00033cb7
    d8b8:	00033bc2 	.word	0x00033bc2
    d8bc:	00033e2d 	.word	0x00033e2d

0000d8c0 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d8c0:	2803      	cmp	r0, #3
{
    d8c2:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d8c4:	d906      	bls.n	d8d4 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    d8c6:	f01e fb4d 	bl	2bf64 <__errno>
    d8ca:	2309      	movs	r3, #9
    d8cc:	6003      	str	r3, [r0, #0]
		return -1;
    d8ce:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    d8d2:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d8d4:	4b04      	ldr	r3, [pc, #16]	; (d8e8 <_check_fd+0x28>)
    d8d6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    d8da:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
    d8de:	2b00      	cmp	r3, #0
    d8e0:	d0f1      	beq.n	d8c6 <_check_fd+0x6>
	return 0;
    d8e2:	2000      	movs	r0, #0
    d8e4:	e7f5      	b.n	d8d2 <_check_fd+0x12>
    d8e6:	bf00      	nop
    d8e8:	2000e058 	.word	0x2000e058

0000d8ec <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    d8ec:	b570      	push	{r4, r5, r6, lr}
    d8ee:	4604      	mov	r4, r0
    d8f0:	460e      	mov	r6, r1
    d8f2:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    d8f4:	f7ff ffe4 	bl	d8c0 <_check_fd>
    d8f8:	2800      	cmp	r0, #0
    d8fa:	db0c      	blt.n	d916 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    d8fc:	4b07      	ldr	r3, [pc, #28]	; (d91c <z_get_fd_obj_and_vtable+0x30>)
    d8fe:	0161      	lsls	r1, r4, #5
    d900:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    d904:	6862      	ldr	r2, [r4, #4]
    d906:	6032      	str	r2, [r6, #0]

	if (lock) {
    d908:	b11d      	cbz	r5, d912 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
    d90a:	f101 020c 	add.w	r2, r1, #12
    d90e:	441a      	add	r2, r3
    d910:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
    d912:	5858      	ldr	r0, [r3, r1]
}
    d914:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    d916:	2000      	movs	r0, #0
    d918:	e7fc      	b.n	d914 <z_get_fd_obj_and_vtable+0x28>
    d91a:	bf00      	nop
    d91c:	2000e050 	.word	0x2000e050

0000d920 <z_reserve_fd>:

int z_reserve_fd(void)
{
    d920:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d922:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    d924:	f04f 33ff 	mov.w	r3, #4294967295
    d928:	f04f 32ff 	mov.w	r2, #4294967295
    d92c:	4814      	ldr	r0, [pc, #80]	; (d980 <z_reserve_fd+0x60>)
    d92e:	f017 f9cd 	bl	24ccc <z_impl_k_mutex_lock>
    d932:	4b14      	ldr	r3, [pc, #80]	; (d984 <z_reserve_fd+0x64>)
    d934:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    d938:	b17a      	cbz	r2, d95a <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d93a:	3401      	adds	r4, #1
    d93c:	2c04      	cmp	r4, #4
    d93e:	f103 0320 	add.w	r3, r3, #32
    d942:	d1f7      	bne.n	d934 <z_reserve_fd+0x14>
	errno = ENFILE;
    d944:	f01e fb0e 	bl	2bf64 <__errno>
    d948:	2317      	movs	r3, #23
	return -1;
    d94a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    d94e:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    d950:	480b      	ldr	r0, [pc, #44]	; (d980 <z_reserve_fd+0x60>)
    d952:	f017 fa8b 	bl	24e6c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    d956:	4620      	mov	r0, r4
    d958:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d95a:	e8d3 0fef 	ldaex	r0, [r3]
    d95e:	3001      	adds	r0, #1
    d960:	e8c3 0fe1 	stlex	r1, r0, [r3]
    d964:	2900      	cmp	r1, #0
    d966:	d1f8      	bne.n	d95a <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    d968:	4807      	ldr	r0, [pc, #28]	; (d988 <z_reserve_fd+0x68>)
    d96a:	0163      	lsls	r3, r4, #5
    d96c:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    d970:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    d972:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    d974:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    d976:	4418      	add	r0, r3
    d978:	f022 fd4d 	bl	30416 <z_impl_k_mutex_init>
    d97c:	e7e8      	b.n	d950 <z_reserve_fd+0x30>
    d97e:	bf00      	nop
    d980:	2000ce40 	.word	0x2000ce40
    d984:	2000e058 	.word	0x2000e058
    d988:	2000e050 	.word	0x2000e050

0000d98c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    d98c:	b410      	push	{r4}
    d98e:	4604      	mov	r4, r0
    d990:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    d992:	4b09      	ldr	r3, [pc, #36]	; (d9b8 <z_finalize_fd+0x2c>)
    d994:	0162      	lsls	r2, r4, #5
    d996:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    d99a:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    d99c:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    d99e:	b140      	cbz	r0, d9b2 <z_finalize_fd+0x26>
    d9a0:	68c4      	ldr	r4, [r0, #12]
    d9a2:	b134      	cbz	r4, d9b2 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    d9a4:	320c      	adds	r2, #12
    d9a6:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    d9a8:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    d9aa:	f240 1205 	movw	r2, #261	; 0x105
    d9ae:	f01d b800 	b.w	2a9b2 <z_fdtable_call_ioctl.constprop.0>
}
    d9b2:	bc10      	pop	{r4}
    d9b4:	4770      	bx	lr
    d9b6:	bf00      	nop
    d9b8:	2000e050 	.word	0x2000e050

0000d9bc <z_free_fd>:

void z_free_fd(int fd)
{
    d9bc:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    d9be:	490d      	ldr	r1, [pc, #52]	; (d9f4 <z_free_fd+0x38>)
    d9c0:	0140      	lsls	r0, r0, #5
    d9c2:	f100 0308 	add.w	r3, r0, #8
    d9c6:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9c8:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    d9cc:	b182      	cbz	r2, d9f0 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    d9ce:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d9d0:	e8d3 5fef 	ldaex	r5, [r3]
    d9d4:	4295      	cmp	r5, r2
    d9d6:	d104      	bne.n	d9e2 <z_free_fd+0x26>
    d9d8:	e8c3 4fec 	stlex	ip, r4, [r3]
    d9dc:	f1bc 0f00 	cmp.w	ip, #0
    d9e0:	d1f6      	bne.n	d9d0 <z_free_fd+0x14>
    d9e2:	d1f1      	bne.n	d9c8 <z_free_fd+0xc>
	if (old_rc != 1) {
    d9e4:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    d9e6:	bf01      	itttt	eq
    d9e8:	2300      	moveq	r3, #0
    d9ea:	180a      	addeq	r2, r1, r0
    d9ec:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    d9ee:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    d9f0:	bd30      	pop	{r4, r5, pc}
    d9f2:	bf00      	nop
    d9f4:	2000e050 	.word	0x2000e050

0000d9f8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    d9f8:	4b01      	ldr	r3, [pc, #4]	; (da00 <__printk_hook_install+0x8>)
    d9fa:	6018      	str	r0, [r3, #0]
}
    d9fc:	4770      	bx	lr
    d9fe:	bf00      	nop
    da00:	2000c81c 	.word	0x2000c81c

0000da04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    da04:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    da06:	2500      	movs	r5, #0
{
    da08:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    da0a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    da0e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    da10:	9500      	str	r5, [sp, #0]
    da12:	a903      	add	r1, sp, #12
    da14:	4805      	ldr	r0, [pc, #20]	; (da2c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    da16:	9505      	str	r5, [sp, #20]
    da18:	f000 fd60 	bl	e4dc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    da1c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    da20:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    da22:	bfb8      	it	lt
    da24:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    da26:	b007      	add	sp, #28
    da28:	bd30      	pop	{r4, r5, pc}
    da2a:	bf00      	nop
    da2c:	0002a9d5 	.word	0x0002a9d5

0000da30 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    da30:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    da32:	460c      	mov	r4, r1
    da34:	2900      	cmp	r1, #0
    da36:	d034      	beq.n	daa2 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    da38:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    da3a:	1f0b      	subs	r3, r1, #4
    da3c:	1a9b      	subs	r3, r3, r2
    da3e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    da40:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    da44:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    da46:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    da48:	07e8      	lsls	r0, r5, #31
    da4a:	d40d      	bmi.n	da68 <sys_heap_free+0x38>
    da4c:	23af      	movs	r3, #175	; 0xaf
    da4e:	4a15      	ldr	r2, [pc, #84]	; (daa4 <sys_heap_free+0x74>)
    da50:	4915      	ldr	r1, [pc, #84]	; (daa8 <sys_heap_free+0x78>)
    da52:	4816      	ldr	r0, [pc, #88]	; (daac <sys_heap_free+0x7c>)
    da54:	f01d f9b0 	bl	2adb8 <assert_print>
    da58:	4621      	mov	r1, r4
    da5a:	4815      	ldr	r0, [pc, #84]	; (dab0 <sys_heap_free+0x80>)
    da5c:	f01d f9ac 	bl	2adb8 <assert_print>
    da60:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    da62:	4810      	ldr	r0, [pc, #64]	; (daa4 <sys_heap_free+0x74>)
    da64:	f01d f9a1 	bl	2adaa <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    da68:	4610      	mov	r0, r2
    da6a:	f01c ffec 	bl	2aa46 <chunk_size>
    da6e:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    da70:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    da74:	1b80      	subs	r0, r0, r6
    da76:	4281      	cmp	r1, r0
    da78:	d00b      	beq.n	da92 <sys_heap_free+0x62>
    da7a:	23b7      	movs	r3, #183	; 0xb7
    da7c:	4a09      	ldr	r2, [pc, #36]	; (daa4 <sys_heap_free+0x74>)
    da7e:	490d      	ldr	r1, [pc, #52]	; (dab4 <sys_heap_free+0x84>)
    da80:	480a      	ldr	r0, [pc, #40]	; (daac <sys_heap_free+0x7c>)
    da82:	f01d f999 	bl	2adb8 <assert_print>
    da86:	4621      	mov	r1, r4
    da88:	480b      	ldr	r0, [pc, #44]	; (dab8 <sys_heap_free+0x88>)
    da8a:	f01d f995 	bl	2adb8 <assert_print>
    da8e:	21b7      	movs	r1, #183	; 0xb7
    da90:	e7e7      	b.n	da62 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    da92:	f025 0501 	bic.w	r5, r5, #1
    da96:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    da98:	4610      	mov	r0, r2
}
    da9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    da9e:	f01d b88f 	b.w	2abc0 <free_chunk>
}
    daa2:	bd70      	pop	{r4, r5, r6, pc}
    daa4:	00033e77 	.word	0x00033e77
    daa8:	00033e98 	.word	0x00033e98
    daac:	00033bc2 	.word	0x00033bc2
    dab0:	00033ea9 	.word	0x00033ea9
    dab4:	00033ee1 	.word	0x00033ee1
    dab8:	00033f07 	.word	0x00033f07

0000dabc <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    dabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dac0:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    dac2:	400b      	ands	r3, r1
{
    dac4:	460f      	mov	r7, r1
    dac6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    dac8:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    daca:	d010      	beq.n	daee <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    dacc:	f1c1 0900 	rsb	r9, r1, #0
    dad0:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    dad4:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dad6:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    dad8:	2a04      	cmp	r2, #4
    dada:	bf28      	it	cs
    dadc:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dade:	4219      	tst	r1, r3
    dae0:	d10c      	bne.n	dafc <sys_heap_aligned_alloc+0x40>
    dae2:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    dae4:	b9e4      	cbnz	r4, db20 <sys_heap_aligned_alloc+0x64>
		return NULL;
    dae6:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    dae8:	4628      	mov	r0, r5
    daea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    daee:	2904      	cmp	r1, #4
    daf0:	d813      	bhi.n	db1a <sys_heap_aligned_alloc+0x5e>
}
    daf2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    daf6:	4611      	mov	r1, r2
    daf8:	f01d b893 	b.w	2ac22 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dafc:	492c      	ldr	r1, [pc, #176]	; (dbb0 <sys_heap_aligned_alloc+0xf4>)
    dafe:	f44f 73a2 	mov.w	r3, #324	; 0x144
    db02:	4a2c      	ldr	r2, [pc, #176]	; (dbb4 <sys_heap_aligned_alloc+0xf8>)
    db04:	482c      	ldr	r0, [pc, #176]	; (dbb8 <sys_heap_aligned_alloc+0xfc>)
    db06:	f01d f957 	bl	2adb8 <assert_print>
    db0a:	482c      	ldr	r0, [pc, #176]	; (dbbc <sys_heap_aligned_alloc+0x100>)
    db0c:	f01d f954 	bl	2adb8 <assert_print>
    db10:	f44f 71a2 	mov.w	r1, #324	; 0x144
    db14:	4827      	ldr	r0, [pc, #156]	; (dbb4 <sys_heap_aligned_alloc+0xf8>)
    db16:	f01d f948 	bl	2adaa <assert_post_action>
		rew = 0;
    db1a:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    db1c:	2204      	movs	r2, #4
    db1e:	e7e1      	b.n	dae4 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    db20:	68b3      	ldr	r3, [r6, #8]
    db22:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    db26:	d9de      	bls.n	dae6 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    db28:	f104 010b 	add.w	r1, r4, #11
    db2c:	4439      	add	r1, r7
    db2e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    db30:	4630      	mov	r0, r6
    db32:	08c9      	lsrs	r1, r1, #3
    db34:	f01c ffdd 	bl	2aaf2 <alloc_chunk>
	if (c0 == 0) {
    db38:	4680      	mov	r8, r0
    db3a:	2800      	cmp	r0, #0
    db3c:	d0d3      	beq.n	dae6 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    db3e:	f109 0504 	add.w	r5, r9, #4
    db42:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    db46:	1e7b      	subs	r3, r7, #1
    db48:	4435      	add	r5, r6
    db4a:	441d      	add	r5, r3
    db4c:	427f      	negs	r7, r7
    db4e:	403d      	ands	r5, r7
    db50:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    db54:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    db56:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    db58:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    db5a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    db5c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    db60:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    db62:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    db66:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    db6a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    db6e:	d208      	bcs.n	db82 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    db70:	4601      	mov	r1, r0
    db72:	463a      	mov	r2, r7
    db74:	4630      	mov	r0, r6
    db76:	f01d f809 	bl	2ab8c <split_chunks>
		free_list_add(h, c0);
    db7a:	4641      	mov	r1, r8
    db7c:	4630      	mov	r0, r6
    db7e:	f01c ff67 	bl	2aa50 <free_list_add>
	return c + chunk_size(h, c);
    db82:	4639      	mov	r1, r7
    db84:	4630      	mov	r0, r6
    db86:	f01c ff5e 	bl	2aa46 <chunk_size>
    db8a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    db8c:	4284      	cmp	r4, r0
    db8e:	d207      	bcs.n	dba0 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    db90:	4630      	mov	r0, r6
    db92:	4622      	mov	r2, r4
    db94:	f01c fffa 	bl	2ab8c <split_chunks>
		free_list_add(h, c_end);
    db98:	4621      	mov	r1, r4
    db9a:	4630      	mov	r0, r6
    db9c:	f01c ff58 	bl	2aa50 <free_list_add>
	void *cmem = &buf[c];
    dba0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dba4:	8873      	ldrh	r3, [r6, #2]
    dba6:	f043 0301 	orr.w	r3, r3, #1
    dbaa:	8073      	strh	r3, [r6, #2]
    dbac:	e79c      	b.n	dae8 <sys_heap_aligned_alloc+0x2c>
    dbae:	bf00      	nop
    dbb0:	00033f43 	.word	0x00033f43
    dbb4:	00033e77 	.word	0x00033e77
    dbb8:	00033bc2 	.word	0x00033bc2
    dbbc:	00033f5e 	.word	0x00033f5e

0000dbc0 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    dbc0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    dbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    dbc8:	d30e      	bcc.n	dbe8 <sys_heap_init+0x28>
    dbca:	493c      	ldr	r1, [pc, #240]	; (dcbc <sys_heap_init+0xfc>)
    dbcc:	f240 13eb 	movw	r3, #491	; 0x1eb
    dbd0:	4a3b      	ldr	r2, [pc, #236]	; (dcc0 <sys_heap_init+0x100>)
    dbd2:	483c      	ldr	r0, [pc, #240]	; (dcc4 <sys_heap_init+0x104>)
    dbd4:	f01d f8f0 	bl	2adb8 <assert_print>
    dbd8:	483b      	ldr	r0, [pc, #236]	; (dcc8 <sys_heap_init+0x108>)
    dbda:	f01d f8ed 	bl	2adb8 <assert_print>
    dbde:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    dbe2:	4837      	ldr	r0, [pc, #220]	; (dcc0 <sys_heap_init+0x100>)
    dbe4:	f01d f8e1 	bl	2adaa <assert_post_action>
    dbe8:	2a04      	cmp	r2, #4
    dbea:	d80c      	bhi.n	dc06 <sys_heap_init+0x46>
    dbec:	4937      	ldr	r1, [pc, #220]	; (dccc <sys_heap_init+0x10c>)
    dbee:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    dbf2:	4a33      	ldr	r2, [pc, #204]	; (dcc0 <sys_heap_init+0x100>)
    dbf4:	4833      	ldr	r0, [pc, #204]	; (dcc4 <sys_heap_init+0x104>)
    dbf6:	f01d f8df 	bl	2adb8 <assert_print>
    dbfa:	4835      	ldr	r0, [pc, #212]	; (dcd0 <sys_heap_init+0x110>)
    dbfc:	f01d f8dc 	bl	2adb8 <assert_print>
    dc00:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    dc04:	e7ed      	b.n	dbe2 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    dc06:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    dc08:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    dc0a:	188e      	adds	r6, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    dc0c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    dc10:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    dc14:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    dc16:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    dc18:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    dc1c:	d80c      	bhi.n	dc38 <sys_heap_init+0x78>
    dc1e:	492d      	ldr	r1, [pc, #180]	; (dcd4 <sys_heap_init+0x114>)
    dc20:	f240 13fb 	movw	r3, #507	; 0x1fb
    dc24:	4a26      	ldr	r2, [pc, #152]	; (dcc0 <sys_heap_init+0x100>)
    dc26:	4827      	ldr	r0, [pc, #156]	; (dcc4 <sys_heap_init+0x104>)
    dc28:	f01d f8c6 	bl	2adb8 <assert_print>
    dc2c:	4828      	ldr	r0, [pc, #160]	; (dcd0 <sys_heap_init+0x110>)
    dc2e:	f01d f8c3 	bl	2adb8 <assert_print>
    dc32:	f240 11fb 	movw	r1, #507	; 0x1fb
    dc36:	e7d4      	b.n	dbe2 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    dc38:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    dc3c:	f04f 0800 	mov.w	r8, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    dc40:	f1c4 0220 	rsb	r2, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    dc44:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    dc48:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    dc4a:	3407      	adds	r4, #7
    dc4c:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dc4e:	1c63      	adds	r3, r4, #1
    dc50:	42bb      	cmp	r3, r7
	heap->heap = h;
    dc52:	6005      	str	r5, [r0, #0]
	h->end_chunk = heap_sz;
    dc54:	60af      	str	r7, [r5, #8]
	h->avail_buckets = 0;
    dc56:	f8c5 800c 	str.w	r8, [r5, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dc5a:	d90c      	bls.n	dc76 <sys_heap_init+0xb6>
    dc5c:	491e      	ldr	r1, [pc, #120]	; (dcd8 <sys_heap_init+0x118>)
    dc5e:	f44f 7303 	mov.w	r3, #524	; 0x20c
    dc62:	4a17      	ldr	r2, [pc, #92]	; (dcc0 <sys_heap_init+0x100>)
    dc64:	4817      	ldr	r0, [pc, #92]	; (dcc4 <sys_heap_init+0x104>)
    dc66:	f01d f8a7 	bl	2adb8 <assert_print>
    dc6a:	4819      	ldr	r0, [pc, #100]	; (dcd0 <sys_heap_init+0x110>)
    dc6c:	f01d f8a4 	bl	2adb8 <assert_print>
    dc70:	f44f 7103 	mov.w	r1, #524	; 0x20c
    dc74:	e7b5      	b.n	dbe2 <sys_heap_init+0x22>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    dc76:	4641      	mov	r1, r8
    dc78:	0092      	lsls	r2, r2, #2
    dc7a:	f105 0010 	add.w	r0, r5, #16
    dc7e:	f022 fe00 	bl	30882 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dc82:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dc84:	f043 0301 	orr.w	r3, r3, #1
    dc88:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    dc8a:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
    dc8c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dc90:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    dc92:	f8a5 8000 	strh.w	r8, [r5]
    dc96:	8051      	strh	r1, [r2, #2]
    dc98:	19aa      	adds	r2, r5, r6
    dc9a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    dc9e:	f8a2 8002 	strh.w	r8, [r2, #2]
    dca2:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    dca4:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dca8:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    dcaa:	4621      	mov	r1, r4
    dcac:	f042 0201 	orr.w	r2, r2, #1
    dcb0:	805a      	strh	r2, [r3, #2]
    dcb2:	4628      	mov	r0, r5
}
    dcb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    dcb8:	f01c beca 	b.w	2aa50 <free_list_add>
    dcbc:	00033f7b 	.word	0x00033f7b
    dcc0:	00033e77 	.word	0x00033e77
    dcc4:	00033bc2 	.word	0x00033bc2
    dcc8:	00033f91 	.word	0x00033f91
    dccc:	00033fa8 	.word	0x00033fa8
    dcd0:	00033fc9 	.word	0x00033fc9
    dcd4:	00033fe2 	.word	0x00033fe2
    dcd8:	0003400b 	.word	0x0003400b

0000dcdc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    dcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dce0:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dce2:	8ba3      	ldrh	r3, [r4, #28]
{
    dce4:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    dce6:	0719      	lsls	r1, r3, #28
{
    dce8:	4615      	mov	r5, r2
	if (processing) {
    dcea:	d412      	bmi.n	dd12 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    dcec:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dcee:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    dcf2:	d164      	bne.n	ddbe <process_event+0xe2>
			evt = process_recheck(mgr);
    dcf4:	4620      	mov	r0, r4
    dcf6:	f01c ffd8 	bl	2acaa <process_recheck>
		}

		if (evt == EVT_NOP) {
    dcfa:	b188      	cbz	r0, dd20 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    dcfc:	3801      	subs	r0, #1
    dcfe:	2804      	cmp	r0, #4
    dd00:	f200 8134 	bhi.w	df6c <process_event+0x290>
    dd04:	e8df f010 	tbh	[pc, r0, lsl #1]
    dd08:	0132005b 	.word	0x0132005b
    dd0c:	00d10081 	.word	0x00d10081
    dd10:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    dd12:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    dd14:	bf0c      	ite	eq
    dd16:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd1a:	f043 0120 	orrne.w	r1, r3, #32
    dd1e:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    dd20:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd22:	4620      	mov	r0, r4
    dd24:	f016 ff8a 	bl	24c3c <z_spin_unlock_valid>
    dd28:	2800      	cmp	r0, #0
    dd2a:	f040 819b 	bne.w	e064 <process_event+0x388>
    dd2e:	4998      	ldr	r1, [pc, #608]	; (df90 <process_event+0x2b4>)
    dd30:	23c2      	movs	r3, #194	; 0xc2
    dd32:	4a98      	ldr	r2, [pc, #608]	; (df94 <process_event+0x2b8>)
    dd34:	4898      	ldr	r0, [pc, #608]	; (df98 <process_event+0x2bc>)
    dd36:	f01d f83f 	bl	2adb8 <assert_print>
    dd3a:	4621      	mov	r1, r4
    dd3c:	e0b0      	b.n	dea0 <process_event+0x1c4>
    dd3e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dd42:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dd44:	2801      	cmp	r0, #1
    dd46:	d81e      	bhi.n	dd86 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    dd48:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    dd4a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    dd4c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    dd4e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    dd52:	d114      	bne.n	dd7e <process_event+0xa2>
		*clients = mgr->clients;
    dd54:	463a      	mov	r2, r7
    dd56:	e003      	b.n	dd60 <process_event+0x84>
				mgr->refs += 1U;
    dd58:	8be0      	ldrh	r0, [r4, #30]
    dd5a:	3001      	adds	r0, #1
    dd5c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    dd5e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dd60:	2a00      	cmp	r2, #0
    dd62:	d1f9      	bne.n	dd58 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd64:	f023 0307 	bic.w	r3, r3, #7
    dd68:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    dd6c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd6e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    dd70:	f01c ff9b 	bl	2acaa <process_recheck>
    dd74:	b390      	cbz	r0, dddc <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd76:	f042 0220 	orr.w	r2, r2, #32
    dd7a:	83a2      	strh	r2, [r4, #28]
    dd7c:	e02e      	b.n	dddc <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd7e:	f023 0307 	bic.w	r3, r3, #7
    dd82:	b29a      	uxth	r2, r3
}
    dd84:	e7f2      	b.n	dd6c <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dd86:	2a04      	cmp	r2, #4
    dd88:	d133      	bne.n	ddf2 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dd8a:	f023 0307 	bic.w	r3, r3, #7
    dd8e:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    dd90:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dd92:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    dd94:	f01c ff89 	bl	2acaa <process_recheck>
    dd98:	b110      	cbz	r0, dda0 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dd9a:	f042 0220 	orr.w	r2, r2, #32
    dd9e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dda0:	8ba3      	ldrh	r3, [r4, #28]
    dda2:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dda6:	4589      	cmp	r9, r1
    dda8:	f040 80ea 	bne.w	df80 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ddac:	8ba1      	ldrh	r1, [r4, #28]
    ddae:	06ca      	lsls	r2, r1, #27
    ddb0:	f140 814f 	bpl.w	e052 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ddb4:	f021 0310 	bic.w	r3, r1, #16
    ddb8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ddba:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    ddbe:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ddc2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    ddc4:	f1b8 0f00 	cmp.w	r8, #0
    ddc8:	dab9      	bge.n	dd3e <process_event+0x62>
	list->head = NULL;
    ddca:	2200      	movs	r2, #0
		*clients = mgr->clients;
    ddcc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ddce:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    ddd2:	e9c4 2200 	strd	r2, r2, [r4]
    ddd6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ddda:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dddc:	8ba3      	ldrh	r3, [r4, #28]
    ddde:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dde2:	4589      	cmp	r9, r1
    dde4:	f040 80cd 	bne.w	df82 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    dde8:	2f00      	cmp	r7, #0
    ddea:	d0df      	beq.n	ddac <process_event+0xd0>
    ddec:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ddee:	46b2      	mov	sl, r6
    ddf0:	e044      	b.n	de7c <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    ddf2:	496a      	ldr	r1, [pc, #424]	; (df9c <process_event+0x2c0>)
    ddf4:	f240 131b 	movw	r3, #283	; 0x11b
    ddf8:	4a69      	ldr	r2, [pc, #420]	; (dfa0 <process_event+0x2c4>)
    ddfa:	4867      	ldr	r0, [pc, #412]	; (df98 <process_event+0x2bc>)
    ddfc:	f01c ffdc 	bl	2adb8 <assert_print>
    de00:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    de04:	4866      	ldr	r0, [pc, #408]	; (dfa0 <process_event+0x2c4>)
    de06:	f01c ffd0 	bl	2adaa <assert_post_action>
    de0a:	b149      	cbz	r1, de20 <process_event+0x144>
    de0c:	4965      	ldr	r1, [pc, #404]	; (dfa4 <process_event+0x2c8>)
    de0e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    de12:	4a63      	ldr	r2, [pc, #396]	; (dfa0 <process_event+0x2c4>)
    de14:	4860      	ldr	r0, [pc, #384]	; (df98 <process_event+0x2bc>)
    de16:	f01c ffcf 	bl	2adb8 <assert_print>
    de1a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    de1e:	e7f1      	b.n	de04 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    de20:	6823      	ldr	r3, [r4, #0]
    de22:	b94b      	cbnz	r3, de38 <process_event+0x15c>
    de24:	4960      	ldr	r1, [pc, #384]	; (dfa8 <process_event+0x2cc>)
    de26:	f240 1357 	movw	r3, #343	; 0x157
    de2a:	4a5d      	ldr	r2, [pc, #372]	; (dfa0 <process_event+0x2c4>)
    de2c:	485a      	ldr	r0, [pc, #360]	; (df98 <process_event+0x2bc>)
    de2e:	f01c ffc3 	bl	2adb8 <assert_print>
    de32:	f240 1157 	movw	r1, #343	; 0x157
    de36:	e7e5      	b.n	de04 <process_event+0x128>
			transit = mgr->transitions->start;
    de38:	6923      	ldr	r3, [r4, #16]
    de3a:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    de3c:	b94e      	cbnz	r6, de52 <process_event+0x176>
    de3e:	495b      	ldr	r1, [pc, #364]	; (dfac <process_event+0x2d0>)
    de40:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    de44:	4a56      	ldr	r2, [pc, #344]	; (dfa0 <process_event+0x2c4>)
    de46:	4854      	ldr	r0, [pc, #336]	; (df98 <process_event+0x2bc>)
    de48:	f01c ffb6 	bl	2adb8 <assert_print>
    de4c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    de50:	e7d8      	b.n	de04 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    de52:	460f      	mov	r7, r1
		res = 0;
    de54:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    de56:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    de5a:	8ba3      	ldrh	r3, [r4, #28]
    de5c:	f023 0307 	bic.w	r3, r3, #7
    de60:	f043 0306 	orr.w	r3, r3, #6
    de64:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    de66:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    de68:	68a2      	ldr	r2, [r4, #8]
    de6a:	2a00      	cmp	r2, #0
    de6c:	f040 808b 	bne.w	df86 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    de70:	2f00      	cmp	r7, #0
    de72:	f040 808b 	bne.w	df8c <process_event+0x2b0>
		    || (transit != NULL)) {
    de76:	2e00      	cmp	r6, #0
    de78:	d098      	beq.n	ddac <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    de7a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    de7c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    de80:	f104 0b14 	add.w	fp, r4, #20
    de84:	4658      	mov	r0, fp
			mgr->flags = flags;
    de86:	83a3      	strh	r3, [r4, #28]
    de88:	f016 fed8 	bl	24c3c <z_spin_unlock_valid>
    de8c:	2800      	cmp	r0, #0
    de8e:	f040 8097 	bne.w	dfc0 <process_event+0x2e4>
    de92:	493f      	ldr	r1, [pc, #252]	; (df90 <process_event+0x2b4>)
    de94:	23c2      	movs	r3, #194	; 0xc2
    de96:	4a3f      	ldr	r2, [pc, #252]	; (df94 <process_event+0x2b8>)
    de98:	483f      	ldr	r0, [pc, #252]	; (df98 <process_event+0x2bc>)
    de9a:	f01c ff8d 	bl	2adb8 <assert_print>
    de9e:	4659      	mov	r1, fp
    dea0:	4843      	ldr	r0, [pc, #268]	; (dfb0 <process_event+0x2d4>)
    dea2:	f01c ff89 	bl	2adb8 <assert_print>
    dea6:	21c2      	movs	r1, #194	; 0xc2
    dea8:	e0ae      	b.n	e008 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    deaa:	2902      	cmp	r1, #2
    deac:	d009      	beq.n	dec2 <process_event+0x1e6>
    deae:	4941      	ldr	r1, [pc, #260]	; (dfb4 <process_event+0x2d8>)
    deb0:	f240 135d 	movw	r3, #349	; 0x15d
    deb4:	4a3a      	ldr	r2, [pc, #232]	; (dfa0 <process_event+0x2c4>)
    deb6:	4838      	ldr	r0, [pc, #224]	; (df98 <process_event+0x2bc>)
    deb8:	f01c ff7e 	bl	2adb8 <assert_print>
    debc:	f240 115d 	movw	r1, #349	; 0x15d
    dec0:	e7a0      	b.n	de04 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    dec2:	8be7      	ldrh	r7, [r4, #30]
    dec4:	b14f      	cbz	r7, deda <process_event+0x1fe>
    dec6:	493c      	ldr	r1, [pc, #240]	; (dfb8 <process_event+0x2dc>)
    dec8:	f44f 73af 	mov.w	r3, #350	; 0x15e
    decc:	4a34      	ldr	r2, [pc, #208]	; (dfa0 <process_event+0x2c4>)
    dece:	4832      	ldr	r0, [pc, #200]	; (df98 <process_event+0x2bc>)
    ded0:	f01c ff72 	bl	2adb8 <assert_print>
    ded4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    ded8:	e794      	b.n	de04 <process_event+0x128>
			transit = mgr->transitions->stop;
    deda:	6923      	ldr	r3, [r4, #16]
    dedc:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    dede:	b94e      	cbnz	r6, def4 <process_event+0x218>
    dee0:	4932      	ldr	r1, [pc, #200]	; (dfac <process_event+0x2d0>)
    dee2:	f240 1361 	movw	r3, #353	; 0x161
    dee6:	4a2e      	ldr	r2, [pc, #184]	; (dfa0 <process_event+0x2c4>)
    dee8:	482b      	ldr	r0, [pc, #172]	; (df98 <process_event+0x2bc>)
    deea:	f01c ff65 	bl	2adb8 <assert_print>
    deee:	f240 1161 	movw	r1, #353	; 0x161
    def2:	e787      	b.n	de04 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    def4:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    def6:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    def8:	f023 0307 	bic.w	r3, r3, #7
    defc:	f043 0304 	orr.w	r3, r3, #4
    df00:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df02:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    df06:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df08:	e7ae      	b.n	de68 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    df0a:	2901      	cmp	r1, #1
    df0c:	d009      	beq.n	df22 <process_event+0x246>
    df0e:	492b      	ldr	r1, [pc, #172]	; (dfbc <process_event+0x2e0>)
    df10:	f44f 73b2 	mov.w	r3, #356	; 0x164
    df14:	4a22      	ldr	r2, [pc, #136]	; (dfa0 <process_event+0x2c4>)
    df16:	4820      	ldr	r0, [pc, #128]	; (df98 <process_event+0x2bc>)
    df18:	f01c ff4e 	bl	2adb8 <assert_print>
    df1c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    df20:	e770      	b.n	de04 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    df22:	6823      	ldr	r3, [r4, #0]
    df24:	b94b      	cbnz	r3, df3a <process_event+0x25e>
    df26:	4920      	ldr	r1, [pc, #128]	; (dfa8 <process_event+0x2cc>)
    df28:	f240 1365 	movw	r3, #357	; 0x165
    df2c:	4a1c      	ldr	r2, [pc, #112]	; (dfa0 <process_event+0x2c4>)
    df2e:	481a      	ldr	r0, [pc, #104]	; (df98 <process_event+0x2bc>)
    df30:	f01c ff42 	bl	2adb8 <assert_print>
    df34:	f240 1165 	movw	r1, #357	; 0x165
    df38:	e764      	b.n	de04 <process_event+0x128>
			transit = mgr->transitions->reset;
    df3a:	6923      	ldr	r3, [r4, #16]
    df3c:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    df3e:	b94e      	cbnz	r6, df54 <process_event+0x278>
    df40:	491a      	ldr	r1, [pc, #104]	; (dfac <process_event+0x2d0>)
    df42:	f44f 73b4 	mov.w	r3, #360	; 0x168
    df46:	4a16      	ldr	r2, [pc, #88]	; (dfa0 <process_event+0x2c4>)
    df48:	4813      	ldr	r0, [pc, #76]	; (df98 <process_event+0x2bc>)
    df4a:	f01c ff35 	bl	2adb8 <assert_print>
    df4e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    df52:	e757      	b.n	de04 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    df54:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    df56:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    df58:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    df5a:	f023 0307 	bic.w	r3, r3, #7
    df5e:	f043 0305 	orr.w	r3, r3, #5
    df62:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df64:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    df68:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df6a:	e77d      	b.n	de68 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    df6c:	490b      	ldr	r1, [pc, #44]	; (df9c <process_event+0x2c0>)
    df6e:	f240 136b 	movw	r3, #363	; 0x16b
    df72:	4a0b      	ldr	r2, [pc, #44]	; (dfa0 <process_event+0x2c4>)
    df74:	4808      	ldr	r0, [pc, #32]	; (df98 <process_event+0x2bc>)
    df76:	f01c ff1f 	bl	2adb8 <assert_print>
    df7a:	f240 116b 	movw	r1, #363	; 0x16b
    df7e:	e741      	b.n	de04 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    df80:	2700      	movs	r7, #0
    df82:	2600      	movs	r6, #0
    df84:	e770      	b.n	de68 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    df86:	f04f 0a01 	mov.w	sl, #1
    df8a:	e777      	b.n	de7c <process_event+0x1a0>
    df8c:	4692      	mov	sl, r2
    df8e:	e775      	b.n	de7c <process_event+0x1a0>
    df90:	00034106 	.word	0x00034106
    df94:	000340d9 	.word	0x000340d9
    df98:	00033bc2 	.word	0x00033bc2
    df9c:	000386dc 	.word	0x000386dc
    dfa0:	00034036 	.word	0x00034036
    dfa4:	00034058 	.word	0x00034058
    dfa8:	00034064 	.word	0x00034064
    dfac:	00034087 	.word	0x00034087
    dfb0:	0003411d 	.word	0x0003411d
    dfb4:	0003409e 	.word	0x0003409e
    dfb8:	000340b4 	.word	0x000340b4
    dfbc:	000340c3 	.word	0x000340c3
    dfc0:	f385 8811 	msr	BASEPRI, r5
    dfc4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dfc8:	f1ba 0f00 	cmp.w	sl, #0
    dfcc:	d11e      	bne.n	e00c <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    dfce:	2f00      	cmp	r7, #0
    dfd0:	d12f      	bne.n	e032 <process_event+0x356>
			if (transit != NULL) {
    dfd2:	b116      	cbz	r6, dfda <process_event+0x2fe>
				transit(mgr, transition_complete);
    dfd4:	4620      	mov	r0, r4
    dfd6:	4926      	ldr	r1, [pc, #152]	; (e070 <process_event+0x394>)
    dfd8:	47b0      	blx	r6
	__asm__ volatile(
    dfda:	f04f 0320 	mov.w	r3, #32
    dfde:	f3ef 8511 	mrs	r5, BASEPRI
    dfe2:	f383 8812 	msr	BASEPRI_MAX, r3
    dfe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dfea:	4658      	mov	r0, fp
    dfec:	f016 fe18 	bl	24c20 <z_spin_lock_valid>
    dff0:	bb38      	cbnz	r0, e042 <process_event+0x366>
    dff2:	2394      	movs	r3, #148	; 0x94
    dff4:	4a1f      	ldr	r2, [pc, #124]	; (e074 <process_event+0x398>)
    dff6:	4920      	ldr	r1, [pc, #128]	; (e078 <process_event+0x39c>)
    dff8:	4820      	ldr	r0, [pc, #128]	; (e07c <process_event+0x3a0>)
    dffa:	f01c fedd 	bl	2adb8 <assert_print>
    dffe:	4659      	mov	r1, fp
    e000:	481f      	ldr	r0, [pc, #124]	; (e080 <process_event+0x3a4>)
    e002:	f01c fed9 	bl	2adb8 <assert_print>
    e006:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e008:	481a      	ldr	r0, [pc, #104]	; (e074 <process_event+0x398>)
    e00a:	e6fc      	b.n	de06 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e00c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e00e:	2900      	cmp	r1, #0
    e010:	d0dd      	beq.n	dfce <process_event+0x2f2>
	return node->next;
    e012:	680d      	ldr	r5, [r1, #0]
    e014:	2900      	cmp	r1, #0
    e016:	d0da      	beq.n	dfce <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    e018:	4643      	mov	r3, r8
    e01a:	464a      	mov	r2, r9
    e01c:	4620      	mov	r0, r4
    e01e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e022:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e024:	b11d      	cbz	r5, e02e <process_event+0x352>
    e026:	682b      	ldr	r3, [r5, #0]
    e028:	4629      	mov	r1, r5
    e02a:	461d      	mov	r5, r3
    e02c:	e7f2      	b.n	e014 <process_event+0x338>
    e02e:	462b      	mov	r3, r5
    e030:	e7fa      	b.n	e028 <process_event+0x34c>
    e032:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    e034:	4643      	mov	r3, r8
    e036:	464a      	mov	r2, r9
    e038:	4620      	mov	r0, r4
    e03a:	683f      	ldr	r7, [r7, #0]
    e03c:	f01c fe61 	bl	2ad02 <notify_one>
    e040:	e7c5      	b.n	dfce <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    e042:	4658      	mov	r0, fp
    e044:	f016 fe08 	bl	24c58 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e048:	8ba3      	ldrh	r3, [r4, #28]
    e04a:	f023 0308 	bic.w	r3, r3, #8
    e04e:	83a3      	strh	r3, [r4, #28]
    e050:	e6ac      	b.n	ddac <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e052:	068b      	lsls	r3, r1, #26
    e054:	f57f ae64 	bpl.w	dd20 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e058:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e05c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    e05e:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    e062:	e647      	b.n	dcf4 <process_event+0x18>
	__asm__ volatile(
    e064:	f385 8811 	msr	BASEPRI, r5
    e068:	f3bf 8f6f 	isb	sy
}
    e06c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e070:	0000e085 	.word	0x0000e085
    e074:	000340d9 	.word	0x000340d9
    e078:	00034132 	.word	0x00034132
    e07c:	00033bc2 	.word	0x00033bc2
    e080:	00034147 	.word	0x00034147

0000e084 <transition_complete>:
{
    e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e086:	4604      	mov	r4, r0
    e088:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e08a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e08e:	f04f 0320 	mov.w	r3, #32
    e092:	f3ef 8711 	mrs	r7, BASEPRI
    e096:	f383 8812 	msr	BASEPRI_MAX, r3
    e09a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e09e:	4630      	mov	r0, r6
    e0a0:	f016 fdbe 	bl	24c20 <z_spin_lock_valid>
    e0a4:	b968      	cbnz	r0, e0c2 <transition_complete+0x3e>
    e0a6:	2394      	movs	r3, #148	; 0x94
    e0a8:	4a0b      	ldr	r2, [pc, #44]	; (e0d8 <transition_complete+0x54>)
    e0aa:	490c      	ldr	r1, [pc, #48]	; (e0dc <transition_complete+0x58>)
    e0ac:	480c      	ldr	r0, [pc, #48]	; (e0e0 <transition_complete+0x5c>)
    e0ae:	f01c fe83 	bl	2adb8 <assert_print>
    e0b2:	4631      	mov	r1, r6
    e0b4:	480b      	ldr	r0, [pc, #44]	; (e0e4 <transition_complete+0x60>)
    e0b6:	f01c fe7f 	bl	2adb8 <assert_print>
    e0ba:	2194      	movs	r1, #148	; 0x94
    e0bc:	4806      	ldr	r0, [pc, #24]	; (e0d8 <transition_complete+0x54>)
    e0be:	f01c fe74 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
    e0c2:	4630      	mov	r0, r6
    e0c4:	f016 fdc8 	bl	24c58 <z_spin_lock_set_owner>
	mgr->last_res = res;
    e0c8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    e0ca:	463a      	mov	r2, r7
    e0cc:	4620      	mov	r0, r4
}
    e0ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    e0d2:	2101      	movs	r1, #1
    e0d4:	f7ff be02 	b.w	dcdc <process_event>
    e0d8:	000340d9 	.word	0x000340d9
    e0dc:	00034132 	.word	0x00034132
    e0e0:	00033bc2 	.word	0x00033bc2
    e0e4:	00034147 	.word	0x00034147

0000e0e8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0ec:	4604      	mov	r4, r0
    e0ee:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e0f0:	f01c fdf7 	bl	2ace2 <validate_args>

	if (rv < 0) {
    e0f4:	1e05      	subs	r5, r0, #0
    e0f6:	db67      	blt.n	e1c8 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e0f8:	f104 0914 	add.w	r9, r4, #20
    e0fc:	f04f 0320 	mov.w	r3, #32
    e100:	f3ef 8a11 	mrs	sl, BASEPRI
    e104:	f383 8812 	msr	BASEPRI_MAX, r3
    e108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e10c:	4648      	mov	r0, r9
    e10e:	f016 fd87 	bl	24c20 <z_spin_lock_valid>
    e112:	4680      	mov	r8, r0
    e114:	b960      	cbnz	r0, e130 <onoff_request+0x48>
    e116:	2394      	movs	r3, #148	; 0x94
    e118:	4a37      	ldr	r2, [pc, #220]	; (e1f8 <onoff_request+0x110>)
    e11a:	4938      	ldr	r1, [pc, #224]	; (e1fc <onoff_request+0x114>)
    e11c:	4838      	ldr	r0, [pc, #224]	; (e200 <onoff_request+0x118>)
    e11e:	f01c fe4b 	bl	2adb8 <assert_print>
    e122:	4649      	mov	r1, r9
    e124:	4837      	ldr	r0, [pc, #220]	; (e204 <onoff_request+0x11c>)
    e126:	f01c fe47 	bl	2adb8 <assert_print>
    e12a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e12c:	4832      	ldr	r0, [pc, #200]	; (e1f8 <onoff_request+0x110>)
    e12e:	e040      	b.n	e1b2 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    e130:	4648      	mov	r0, r9
    e132:	f016 fd91 	bl	24c58 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e136:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e13a:	8be3      	ldrh	r3, [r4, #30]
    e13c:	8ba6      	ldrh	r6, [r4, #28]
    e13e:	4293      	cmp	r3, r2
    e140:	f006 0607 	and.w	r6, r6, #7
    e144:	d043      	beq.n	e1ce <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    e146:	2e02      	cmp	r6, #2
    e148:	d113      	bne.n	e172 <onoff_request+0x8a>
	rv = state;
    e14a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    e14c:	3301      	adds	r3, #1
    e14e:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e150:	4648      	mov	r0, r9
    e152:	f016 fd73 	bl	24c3c <z_spin_unlock_valid>
    e156:	2800      	cmp	r0, #0
    e158:	d13f      	bne.n	e1da <onoff_request+0xf2>
    e15a:	23c2      	movs	r3, #194	; 0xc2
    e15c:	4a26      	ldr	r2, [pc, #152]	; (e1f8 <onoff_request+0x110>)
    e15e:	492a      	ldr	r1, [pc, #168]	; (e208 <onoff_request+0x120>)
    e160:	4827      	ldr	r0, [pc, #156]	; (e200 <onoff_request+0x118>)
    e162:	f01c fe29 	bl	2adb8 <assert_print>
    e166:	4649      	mov	r1, r9
    e168:	4828      	ldr	r0, [pc, #160]	; (e20c <onoff_request+0x124>)
    e16a:	f01c fe25 	bl	2adb8 <assert_print>
    e16e:	21c2      	movs	r1, #194	; 0xc2
    e170:	e7dc      	b.n	e12c <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    e172:	2e06      	cmp	r6, #6
    e174:	d813      	bhi.n	e19e <onoff_request+0xb6>
    e176:	e8df f006 	tbb	[pc, r6]
    e17a:	2d09      	.short	0x2d09
    e17c:	04091212 	.word	0x04091212
    e180:	09          	.byte	0x09
    e181:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    e182:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e186:	f04f 0800 	mov.w	r8, #0
    e18a:	e7e1      	b.n	e150 <onoff_request+0x68>
	parent->next = child;
    e18c:	2300      	movs	r3, #0
    e18e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    e190:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e192:	b983      	cbnz	r3, e1b6 <onoff_request+0xce>
	list->head = node;
    e194:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    e198:	b186      	cbz	r6, e1bc <onoff_request+0xd4>
	rv = state;
    e19a:	4635      	mov	r5, r6
    e19c:	e7f3      	b.n	e186 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e19e:	491c      	ldr	r1, [pc, #112]	; (e210 <onoff_request+0x128>)
    e1a0:	4817      	ldr	r0, [pc, #92]	; (e200 <onoff_request+0x118>)
    e1a2:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    e1a6:	4a1b      	ldr	r2, [pc, #108]	; (e214 <onoff_request+0x12c>)
    e1a8:	f01c fe06 	bl	2adb8 <assert_print>
    e1ac:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e1b0:	4818      	ldr	r0, [pc, #96]	; (e214 <onoff_request+0x12c>)
    e1b2:	f01c fdfa 	bl	2adaa <assert_post_action>
	parent->next = child;
    e1b6:	601f      	str	r7, [r3, #0]
	list->tail = node;
    e1b8:	6067      	str	r7, [r4, #4]
}
    e1ba:	e7ed      	b.n	e198 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    e1bc:	4652      	mov	r2, sl
    e1be:	2102      	movs	r1, #2
    e1c0:	4620      	mov	r0, r4
    e1c2:	f7ff fd8b 	bl	dcdc <process_event>
    e1c6:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e1c8:	4628      	mov	r0, r5
    e1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    e1ce:	f06f 050a 	mvn.w	r5, #10
    e1d2:	e7d8      	b.n	e186 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    e1d4:	f06f 0504 	mvn.w	r5, #4
    e1d8:	e7d5      	b.n	e186 <onoff_request+0x9e>
	__asm__ volatile(
    e1da:	f38a 8811 	msr	BASEPRI, sl
    e1de:	f3bf 8f6f 	isb	sy
		if (notify) {
    e1e2:	f1b8 0f00 	cmp.w	r8, #0
    e1e6:	d0ef      	beq.n	e1c8 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    e1e8:	2300      	movs	r3, #0
    e1ea:	4632      	mov	r2, r6
    e1ec:	4639      	mov	r1, r7
    e1ee:	4620      	mov	r0, r4
    e1f0:	f01c fd87 	bl	2ad02 <notify_one>
    e1f4:	e7e8      	b.n	e1c8 <onoff_request+0xe0>
    e1f6:	bf00      	nop
    e1f8:	000340d9 	.word	0x000340d9
    e1fc:	00034132 	.word	0x00034132
    e200:	00033bc2 	.word	0x00033bc2
    e204:	00034147 	.word	0x00034147
    e208:	00034106 	.word	0x00034106
    e20c:	0003411d 	.word	0x0003411d
    e210:	000340c3 	.word	0x000340c3
    e214:	00034036 	.word	0x00034036

0000e218 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e21a:	4605      	mov	r5, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e21c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e220:	f04f 0320 	mov.w	r3, #32
    e224:	f3ef 8711 	mrs	r7, BASEPRI
    e228:	f383 8812 	msr	BASEPRI_MAX, r3
    e22c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e230:	4630      	mov	r0, r6
    e232:	f016 fcf5 	bl	24c20 <z_spin_lock_valid>
    e236:	b960      	cbnz	r0, e252 <onoff_release+0x3a>
    e238:	2394      	movs	r3, #148	; 0x94
    e23a:	4a24      	ldr	r2, [pc, #144]	; (e2cc <onoff_release+0xb4>)
    e23c:	4924      	ldr	r1, [pc, #144]	; (e2d0 <onoff_release+0xb8>)
    e23e:	4825      	ldr	r0, [pc, #148]	; (e2d4 <onoff_release+0xbc>)
    e240:	f01c fdba 	bl	2adb8 <assert_print>
    e244:	4631      	mov	r1, r6
    e246:	4824      	ldr	r0, [pc, #144]	; (e2d8 <onoff_release+0xc0>)
    e248:	f01c fdb6 	bl	2adb8 <assert_print>
    e24c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e24e:	481f      	ldr	r0, [pc, #124]	; (e2cc <onoff_release+0xb4>)
    e250:	e029      	b.n	e2a6 <onoff_release+0x8e>
	z_spin_lock_set_owner(l);
    e252:	4630      	mov	r0, r6
    e254:	f016 fd00 	bl	24c58 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e258:	8bac      	ldrh	r4, [r5, #28]
    e25a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    e25e:	2c02      	cmp	r4, #2
    e260:	d015      	beq.n	e28e <onoff_release+0x76>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    e262:	2c01      	cmp	r4, #1
    e264:	bf0c      	ite	eq
    e266:	f06f 0404 	mvneq.w	r4, #4
    e26a:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e26e:	4630      	mov	r0, r6
    e270:	f016 fce4 	bl	24c3c <z_spin_unlock_valid>
    e274:	bb28      	cbnz	r0, e2c2 <onoff_release+0xaa>
    e276:	23c2      	movs	r3, #194	; 0xc2
    e278:	4a14      	ldr	r2, [pc, #80]	; (e2cc <onoff_release+0xb4>)
    e27a:	4918      	ldr	r1, [pc, #96]	; (e2dc <onoff_release+0xc4>)
    e27c:	4815      	ldr	r0, [pc, #84]	; (e2d4 <onoff_release+0xbc>)
    e27e:	f01c fd9b 	bl	2adb8 <assert_print>
    e282:	4631      	mov	r1, r6
    e284:	4816      	ldr	r0, [pc, #88]	; (e2e0 <onoff_release+0xc8>)
    e286:	f01c fd97 	bl	2adb8 <assert_print>
    e28a:	21c2      	movs	r1, #194	; 0xc2
    e28c:	e7df      	b.n	e24e <onoff_release+0x36>
		}
		goto out;
	}

	__ASSERT_NO_MSG(mgr->refs > 0);
    e28e:	8beb      	ldrh	r3, [r5, #30]
    e290:	b95b      	cbnz	r3, e2aa <onoff_release+0x92>
    e292:	4914      	ldr	r1, [pc, #80]	; (e2e4 <onoff_release+0xcc>)
    e294:	480f      	ldr	r0, [pc, #60]	; (e2d4 <onoff_release+0xbc>)
    e296:	f240 13ef 	movw	r3, #495	; 0x1ef
    e29a:	4a13      	ldr	r2, [pc, #76]	; (e2e8 <onoff_release+0xd0>)
    e29c:	f01c fd8c 	bl	2adb8 <assert_print>
    e2a0:	f240 11ef 	movw	r1, #495	; 0x1ef
    e2a4:	4810      	ldr	r0, [pc, #64]	; (e2e8 <onoff_release+0xd0>)
    e2a6:	f01c fd80 	bl	2adaa <assert_post_action>
	mgr->refs -= 1U;
    e2aa:	3b01      	subs	r3, #1
    e2ac:	b29b      	uxth	r3, r3
    e2ae:	83eb      	strh	r3, [r5, #30]
	stop = (mgr->refs == 0);

out:
	if (stop) {
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d1dc      	bne.n	e26e <onoff_release+0x56>
		process_event(mgr, EVT_RECHECK, key);
    e2b4:	463a      	mov	r2, r7
    e2b6:	4621      	mov	r1, r4
    e2b8:	4628      	mov	r0, r5
    e2ba:	f7ff fd0f 	bl	dcdc <process_event>
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    e2be:	4620      	mov	r0, r4
    e2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    e2c2:	f387 8811 	msr	BASEPRI, r7
    e2c6:	f3bf 8f6f 	isb	sy
	return rv;
    e2ca:	e7f8      	b.n	e2be <onoff_release+0xa6>
    e2cc:	000340d9 	.word	0x000340d9
    e2d0:	00034132 	.word	0x00034132
    e2d4:	00033bc2 	.word	0x00033bc2
    e2d8:	00034147 	.word	0x00034147
    e2dc:	00034106 	.word	0x00034106
    e2e0:	0003411d 	.word	0x0003411d
    e2e4:	0003415f 	.word	0x0003415f
    e2e8:	00034036 	.word	0x00034036

0000e2ec <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f0:	460f      	mov	r7, r1
	if ((mgr == NULL) || (cli == NULL)) {
    e2f2:	4605      	mov	r5, r0
    e2f4:	2800      	cmp	r0, #0
    e2f6:	d04f      	beq.n	e398 <onoff_cancel+0xac>
    e2f8:	2900      	cmp	r1, #0
    e2fa:	d04d      	beq.n	e398 <onoff_cancel+0xac>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e2fc:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e300:	f04f 0320 	mov.w	r3, #32
    e304:	f3ef 8811 	mrs	r8, BASEPRI
    e308:	f383 8812 	msr	BASEPRI_MAX, r3
    e30c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e310:	4630      	mov	r0, r6
    e312:	f016 fc85 	bl	24c20 <z_spin_lock_valid>
    e316:	b960      	cbnz	r0, e332 <onoff_cancel+0x46>
    e318:	2394      	movs	r3, #148	; 0x94
    e31a:	4a21      	ldr	r2, [pc, #132]	; (e3a0 <onoff_cancel+0xb4>)
    e31c:	4921      	ldr	r1, [pc, #132]	; (e3a4 <onoff_cancel+0xb8>)
    e31e:	4822      	ldr	r0, [pc, #136]	; (e3a8 <onoff_cancel+0xbc>)
    e320:	f01c fd4a 	bl	2adb8 <assert_print>
    e324:	4631      	mov	r1, r6
    e326:	4821      	ldr	r0, [pc, #132]	; (e3ac <onoff_cancel+0xc0>)
    e328:	f01c fd46 	bl	2adb8 <assert_print>
    e32c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e32e:	481c      	ldr	r0, [pc, #112]	; (e3a0 <onoff_cancel+0xb4>)
    e330:	e017      	b.n	e362 <onoff_cancel+0x76>
	z_spin_lock_set_owner(l);
    e332:	4630      	mov	r0, r6
    e334:	f016 fc90 	bl	24c58 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    e338:	4639      	mov	r1, r7
    e33a:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e33c:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    e33e:	f01c fc99 	bl	2ac74 <sys_slist_find_and_remove>
    e342:	b180      	cbz	r0, e366 <onoff_cancel+0x7a>
    e344:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
    e348:	1f23      	subs	r3, r4, #4
    e34a:	2b02      	cmp	r3, #2
    e34c:	d90d      	bls.n	e36a <onoff_cancel+0x7e>
    e34e:	4918      	ldr	r1, [pc, #96]	; (e3b0 <onoff_cancel+0xc4>)
    e350:	4815      	ldr	r0, [pc, #84]	; (e3a8 <onoff_cancel+0xbc>)
    e352:	f240 232d 	movw	r3, #557	; 0x22d
    e356:	4a17      	ldr	r2, [pc, #92]	; (e3b4 <onoff_cancel+0xc8>)
    e358:	f01c fd2e 	bl	2adb8 <assert_print>
    e35c:	f240 212d 	movw	r1, #557	; 0x22d
    e360:	4814      	ldr	r0, [pc, #80]	; (e3b4 <onoff_cancel+0xc8>)
    e362:	f01c fd22 	bl	2adaa <assert_post_action>
	int rv = -EALREADY;
    e366:	f06f 0477 	mvn.w	r4, #119	; 0x77
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e36a:	4630      	mov	r0, r6
    e36c:	f016 fc66 	bl	24c3c <z_spin_unlock_valid>
    e370:	b958      	cbnz	r0, e38a <onoff_cancel+0x9e>
    e372:	23c2      	movs	r3, #194	; 0xc2
    e374:	4a0a      	ldr	r2, [pc, #40]	; (e3a0 <onoff_cancel+0xb4>)
    e376:	4910      	ldr	r1, [pc, #64]	; (e3b8 <onoff_cancel+0xcc>)
    e378:	480b      	ldr	r0, [pc, #44]	; (e3a8 <onoff_cancel+0xbc>)
    e37a:	f01c fd1d 	bl	2adb8 <assert_print>
    e37e:	4631      	mov	r1, r6
    e380:	480e      	ldr	r0, [pc, #56]	; (e3bc <onoff_cancel+0xd0>)
    e382:	f01c fd19 	bl	2adb8 <assert_print>
    e386:	21c2      	movs	r1, #194	; 0xc2
    e388:	e7d1      	b.n	e32e <onoff_cancel+0x42>
	__asm__ volatile(
    e38a:	f388 8811 	msr	BASEPRI, r8
    e38e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    e392:	4620      	mov	r0, r4
    e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    e398:	f06f 0415 	mvn.w	r4, #21
    e39c:	e7f9      	b.n	e392 <onoff_cancel+0xa6>
    e39e:	bf00      	nop
    e3a0:	000340d9 	.word	0x000340d9
    e3a4:	00034132 	.word	0x00034132
    e3a8:	00033bc2 	.word	0x00033bc2
    e3ac:	00034147 	.word	0x00034147
    e3b0:	0003416d 	.word	0x0003416d
    e3b4:	00034036 	.word	0x00034036
    e3b8:	00034106 	.word	0x00034106
    e3bc:	0003411d 	.word	0x0003411d

0000e3c0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e3c0:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e3c2:	6842      	ldr	r2, [r0, #4]
    e3c4:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    e3c6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e3ca:	2a02      	cmp	r2, #2
	notify->result = res;
    e3cc:	6081      	str	r1, [r0, #8]
	switch (method) {
    e3ce:	d00a      	beq.n	e3e6 <sys_notify_finalize+0x26>
    e3d0:	2a03      	cmp	r2, #3
    e3d2:	f04f 0100 	mov.w	r1, #0
    e3d6:	d003      	beq.n	e3e0 <sys_notify_finalize+0x20>
    e3d8:	2a01      	cmp	r2, #1
    e3da:	d10a      	bne.n	e3f2 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e3dc:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e3de:	e006      	b.n	e3ee <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    e3e0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e3e2:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e3e4:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    e3e6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e3e8:	2200      	movs	r2, #0
    e3ea:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e3ec:	b958      	cbnz	r0, e406 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    e3ee:	2000      	movs	r0, #0
    e3f0:	e7f8      	b.n	e3e4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    e3f2:	4906      	ldr	r1, [pc, #24]	; (e40c <sys_notify_finalize+0x4c>)
    e3f4:	4806      	ldr	r0, [pc, #24]	; (e410 <sys_notify_finalize+0x50>)
    e3f6:	2345      	movs	r3, #69	; 0x45
    e3f8:	4a06      	ldr	r2, [pc, #24]	; (e414 <sys_notify_finalize+0x54>)
    e3fa:	f01c fcdd 	bl	2adb8 <assert_print>
    e3fe:	2145      	movs	r1, #69	; 0x45
    e400:	4804      	ldr	r0, [pc, #16]	; (e414 <sys_notify_finalize+0x54>)
    e402:	f01c fcd2 	bl	2adaa <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e406:	f019 fd0d 	bl	27e24 <z_impl_k_poll_signal_raise>
    e40a:	e7f0      	b.n	e3ee <sys_notify_finalize+0x2e>
    e40c:	000386dc 	.word	0x000386dc
    e410:	00033bc2 	.word	0x00033bc2
    e414:	000341e4 	.word	0x000341e4

0000e418 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e418:	b5f0      	push	{r4, r5, r6, r7, lr}
    e41a:	4602      	mov	r2, r0
    e41c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    e41e:	270a      	movs	r7, #10
	size_t val = 0;
    e420:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    e422:	4e07      	ldr	r6, [pc, #28]	; (e440 <extract_decimal+0x28>)
    e424:	460b      	mov	r3, r1
    e426:	781c      	ldrb	r4, [r3, #0]
    e428:	3101      	adds	r1, #1
    e42a:	5d35      	ldrb	r5, [r6, r4]
    e42c:	076d      	lsls	r5, r5, #29
    e42e:	d401      	bmi.n	e434 <extract_decimal+0x1c>
	}
	*str = sp;
    e430:	6013      	str	r3, [r2, #0]
	return val;
}
    e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e434:	fb07 4300 	mla	r3, r7, r0, r4
    e438:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e43c:	e7f2      	b.n	e424 <extract_decimal+0xc>
    e43e:	bf00      	nop
    e440:	0003c002 	.word	0x0003c002

0000e444 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e448:	4615      	mov	r5, r2
    e44a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    e44c:	78d3      	ldrb	r3, [r2, #3]
    e44e:	4a22      	ldr	r2, [pc, #136]	; (e4d8 <encode_uint+0x94>)
	switch (specifier) {
    e450:	2b6f      	cmp	r3, #111	; 0x6f
    e452:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e456:	4680      	mov	r8, r0
    e458:	460f      	mov	r7, r1
    e45a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e45e:	d029      	beq.n	e4b4 <encode_uint+0x70>
    e460:	d824      	bhi.n	e4ac <encode_uint+0x68>
		return 10;
    e462:	2b58      	cmp	r3, #88	; 0x58
    e464:	bf0c      	ite	eq
    e466:	2610      	moveq	r6, #16
    e468:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e46a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e46e:	4632      	mov	r2, r6
    e470:	2300      	movs	r3, #0
    e472:	4640      	mov	r0, r8
    e474:	4639      	mov	r1, r7
    e476:	f7fa fd0d 	bl	8e94 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e47a:	2a09      	cmp	r2, #9
    e47c:	b2d4      	uxtb	r4, r2
    e47e:	d81e      	bhi.n	e4be <encode_uint+0x7a>
    e480:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e482:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e484:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e486:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e48a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e48e:	d301      	bcc.n	e494 <encode_uint+0x50>
    e490:	45d1      	cmp	r9, sl
    e492:	d811      	bhi.n	e4b8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e494:	782b      	ldrb	r3, [r5, #0]
    e496:	069b      	lsls	r3, r3, #26
    e498:	d505      	bpl.n	e4a6 <encode_uint+0x62>
		if (radix == 8) {
    e49a:	2e08      	cmp	r6, #8
    e49c:	d115      	bne.n	e4ca <encode_uint+0x86>
			conv->altform_0 = true;
    e49e:	78ab      	ldrb	r3, [r5, #2]
    e4a0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e4a4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e4a6:	4648      	mov	r0, r9
    e4a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e4ac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e4b0:	2b70      	cmp	r3, #112	; 0x70
    e4b2:	e7d7      	b.n	e464 <encode_uint+0x20>
	switch (specifier) {
    e4b4:	2608      	movs	r6, #8
    e4b6:	e7d8      	b.n	e46a <encode_uint+0x26>
		value /= radix;
    e4b8:	4680      	mov	r8, r0
    e4ba:	460f      	mov	r7, r1
    e4bc:	e7d7      	b.n	e46e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e4be:	f1bb 0f01 	cmp.w	fp, #1
    e4c2:	bf0c      	ite	eq
    e4c4:	3437      	addeq	r4, #55	; 0x37
    e4c6:	3457      	addne	r4, #87	; 0x57
    e4c8:	e7db      	b.n	e482 <encode_uint+0x3e>
		} else if (radix == 16) {
    e4ca:	2e10      	cmp	r6, #16
    e4cc:	d1eb      	bne.n	e4a6 <encode_uint+0x62>
			conv->altform_0c = true;
    e4ce:	78ab      	ldrb	r3, [r5, #2]
    e4d0:	f043 0310 	orr.w	r3, r3, #16
    e4d4:	e7e6      	b.n	e4a4 <encode_uint+0x60>
    e4d6:	bf00      	nop
    e4d8:	0003c002 	.word	0x0003c002

0000e4dc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e0:	468a      	mov	sl, r1
    e4e2:	4616      	mov	r6, r2
    e4e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e4e6:	2500      	movs	r5, #0
{
    e4e8:	b097      	sub	sp, #92	; 0x5c
    e4ea:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e4ec:	7830      	ldrb	r0, [r6, #0]
    e4ee:	b908      	cbnz	r0, e4f4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e4f0:	4628      	mov	r0, r5
    e4f2:	e34a      	b.n	eb8a <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    e4f4:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    e4f6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e4f8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    e4fa:	d007      	beq.n	e50c <z_cbvprintf_impl+0x30>
			OUTC('%');
    e4fc:	4651      	mov	r1, sl
    e4fe:	9b03      	ldr	r3, [sp, #12]
    e500:	4798      	blx	r3
    e502:	2800      	cmp	r0, #0
    e504:	f2c0 8341 	blt.w	eb8a <z_cbvprintf_impl+0x6ae>
    e508:	3501      	adds	r5, #1
		if (bps == NULL) {
    e50a:	e1f0      	b.n	e8ee <z_cbvprintf_impl+0x412>
		} state = {
    e50c:	2218      	movs	r2, #24
    e50e:	2100      	movs	r1, #0
    e510:	a810      	add	r0, sp, #64	; 0x40
    e512:	f022 f9b6 	bl	30882 <memset>
	if (*sp == '%') {
    e516:	7873      	ldrb	r3, [r6, #1]
    e518:	2b25      	cmp	r3, #37	; 0x25
    e51a:	f000 80a3 	beq.w	e664 <z_cbvprintf_impl+0x188>
    e51e:	2300      	movs	r3, #0
    e520:	4698      	mov	r8, r3
    e522:	469e      	mov	lr, r3
    e524:	469c      	mov	ip, r3
    e526:	4618      	mov	r0, r3
    e528:	1c71      	adds	r1, r6, #1
    e52a:	460f      	mov	r7, r1
		switch (*sp) {
    e52c:	f811 2b01 	ldrb.w	r2, [r1], #1
    e530:	2a2b      	cmp	r2, #43	; 0x2b
    e532:	f000 80c6 	beq.w	e6c2 <z_cbvprintf_impl+0x1e6>
    e536:	f200 80bd 	bhi.w	e6b4 <z_cbvprintf_impl+0x1d8>
    e53a:	2a20      	cmp	r2, #32
    e53c:	f000 80c4 	beq.w	e6c8 <z_cbvprintf_impl+0x1ec>
    e540:	2a23      	cmp	r2, #35	; 0x23
    e542:	f000 80c4 	beq.w	e6ce <z_cbvprintf_impl+0x1f2>
    e546:	b12b      	cbz	r3, e554 <z_cbvprintf_impl+0x78>
    e548:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e550:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e554:	f1b8 0f00 	cmp.w	r8, #0
    e558:	d005      	beq.n	e566 <z_cbvprintf_impl+0x8a>
    e55a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e55e:	f043 0320 	orr.w	r3, r3, #32
    e562:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e566:	f1be 0f00 	cmp.w	lr, #0
    e56a:	d005      	beq.n	e578 <z_cbvprintf_impl+0x9c>
    e56c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e570:	f043 0310 	orr.w	r3, r3, #16
    e574:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e578:	f1bc 0f00 	cmp.w	ip, #0
    e57c:	d005      	beq.n	e58a <z_cbvprintf_impl+0xae>
    e57e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e582:	f043 0308 	orr.w	r3, r3, #8
    e586:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e58a:	b128      	cbz	r0, e598 <z_cbvprintf_impl+0xbc>
    e58c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e590:	f043 0304 	orr.w	r3, r3, #4
    e594:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    e598:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e59c:	f003 0144 	and.w	r1, r3, #68	; 0x44
    e5a0:	2944      	cmp	r1, #68	; 0x44
    e5a2:	d103      	bne.n	e5ac <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    e5a4:	f36f 1386 	bfc	r3, #6, #1
    e5a8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    e5ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e5b0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    e5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e5b6:	9709      	str	r7, [sp, #36]	; 0x24
    e5b8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e5bc:	f040 808c 	bne.w	e6d8 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    e5c0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e5c4:	f043 0301 	orr.w	r3, r3, #1
    e5c8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    e5cc:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    e5ce:	781a      	ldrb	r2, [r3, #0]
    e5d0:	2a2e      	cmp	r2, #46	; 0x2e
    e5d2:	bf0c      	ite	eq
    e5d4:	2101      	moveq	r1, #1
    e5d6:	2100      	movne	r1, #0
    e5d8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e5dc:	f361 0241 	bfi	r2, r1, #1, #1
    e5e0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    e5e4:	d10c      	bne.n	e600 <z_cbvprintf_impl+0x124>
	++sp;
    e5e6:	1c5a      	adds	r2, r3, #1
    e5e8:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    e5ea:	785a      	ldrb	r2, [r3, #1]
    e5ec:	2a2a      	cmp	r2, #42	; 0x2a
    e5ee:	f040 8083 	bne.w	e6f8 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    e5f2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    e5f6:	3302      	adds	r3, #2
		conv->prec_star = true;
    e5f8:	f042 0204 	orr.w	r2, r2, #4
    e5fc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    e600:	781a      	ldrb	r2, [r3, #0]
    e602:	2a6c      	cmp	r2, #108	; 0x6c
    e604:	f000 80a4 	beq.w	e750 <z_cbvprintf_impl+0x274>
    e608:	f200 8086 	bhi.w	e718 <z_cbvprintf_impl+0x23c>
    e60c:	2a68      	cmp	r2, #104	; 0x68
    e60e:	f000 808c 	beq.w	e72a <z_cbvprintf_impl+0x24e>
    e612:	2a6a      	cmp	r2, #106	; 0x6a
    e614:	f000 80a5 	beq.w	e762 <z_cbvprintf_impl+0x286>
    e618:	2a4c      	cmp	r2, #76	; 0x4c
    e61a:	f000 80aa 	beq.w	e772 <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    e61e:	461a      	mov	r2, r3
    e620:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    e624:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    e626:	9204      	str	r2, [sp, #16]
    e628:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    e62c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    e630:	f200 8117 	bhi.w	e862 <z_cbvprintf_impl+0x386>
    e634:	2b6d      	cmp	r3, #109	; 0x6d
    e636:	f200 80a9 	bhi.w	e78c <z_cbvprintf_impl+0x2b0>
    e63a:	2b69      	cmp	r3, #105	; 0x69
    e63c:	f200 8111 	bhi.w	e862 <z_cbvprintf_impl+0x386>
    e640:	2b57      	cmp	r3, #87	; 0x57
    e642:	f200 80be 	bhi.w	e7c2 <z_cbvprintf_impl+0x2e6>
    e646:	2b41      	cmp	r3, #65	; 0x41
    e648:	d003      	beq.n	e652 <z_cbvprintf_impl+0x176>
    e64a:	3b45      	subs	r3, #69	; 0x45
    e64c:	2b02      	cmp	r3, #2
    e64e:	f200 8108 	bhi.w	e862 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    e652:	2204      	movs	r2, #4
    e654:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e658:	f362 0302 	bfi	r3, r2, #0, #3
    e65c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    e660:	2301      	movs	r3, #1
			break;
    e662:	e0ca      	b.n	e7fa <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    e664:	1cb2      	adds	r2, r6, #2
    e666:	9204      	str	r2, [sp, #16]
    e668:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    e66c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e670:	07d9      	lsls	r1, r3, #31
    e672:	f140 80fd 	bpl.w	e870 <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    e676:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    e67a:	f1b8 0f00 	cmp.w	r8, #0
    e67e:	da07      	bge.n	e690 <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    e680:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    e684:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    e688:	f042 0204 	orr.w	r2, r2, #4
    e68c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    e690:	075a      	lsls	r2, r3, #29
    e692:	f140 80f6 	bpl.w	e882 <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    e696:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    e69a:	f1bb 0f00 	cmp.w	fp, #0
    e69e:	f280 80f5 	bge.w	e88c <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    e6a2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e6a6:	f36f 0341 	bfc	r3, #1, #1
    e6aa:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    e6ae:	f04f 3bff 	mov.w	fp, #4294967295
    e6b2:	e0eb      	b.n	e88c <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    e6b4:	2a2d      	cmp	r2, #45	; 0x2d
    e6b6:	d00d      	beq.n	e6d4 <z_cbvprintf_impl+0x1f8>
    e6b8:	2a30      	cmp	r2, #48	; 0x30
    e6ba:	f47f af44 	bne.w	e546 <z_cbvprintf_impl+0x6a>
    e6be:	2301      	movs	r3, #1
	} while (loop);
    e6c0:	e733      	b.n	e52a <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    e6c2:	f04f 0c01 	mov.w	ip, #1
    e6c6:	e730      	b.n	e52a <z_cbvprintf_impl+0x4e>
    e6c8:	f04f 0e01 	mov.w	lr, #1
    e6cc:	e72d      	b.n	e52a <z_cbvprintf_impl+0x4e>
    e6ce:	f04f 0801 	mov.w	r8, #1
    e6d2:	e72a      	b.n	e52a <z_cbvprintf_impl+0x4e>
    e6d4:	2001      	movs	r0, #1
    e6d6:	e728      	b.n	e52a <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    e6d8:	a809      	add	r0, sp, #36	; 0x24
    e6da:	f7ff fe9d 	bl	e418 <extract_decimal>
	if (sp != wp) {
    e6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6e0:	42bb      	cmp	r3, r7
    e6e2:	f43f af74 	beq.w	e5ce <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    e6e6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    e6ea:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    e6ec:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    e6ee:	f360 0241 	bfi	r2, r0, #1, #1
    e6f2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    e6f6:	e76a      	b.n	e5ce <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    e6f8:	a809      	add	r0, sp, #36	; 0x24
    e6fa:	f7ff fe8d 	bl	e418 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    e6fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    e702:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    e704:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e708:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    e70c:	f362 0341 	bfi	r3, r2, #1, #1
    e710:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    e714:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e716:	e773      	b.n	e600 <z_cbvprintf_impl+0x124>
	switch (*sp) {
    e718:	2a74      	cmp	r2, #116	; 0x74
    e71a:	d026      	beq.n	e76a <z_cbvprintf_impl+0x28e>
    e71c:	2a7a      	cmp	r2, #122	; 0x7a
    e71e:	f47f af7e 	bne.w	e61e <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    e722:	2106      	movs	r1, #6
    e724:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e728:	e00c      	b.n	e744 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    e72a:	785a      	ldrb	r2, [r3, #1]
    e72c:	2a68      	cmp	r2, #104	; 0x68
    e72e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e732:	d106      	bne.n	e742 <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    e734:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    e736:	f361 02c6 	bfi	r2, r1, #3, #4
    e73a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    e73e:	3302      	adds	r3, #2
    e740:	e76d      	b.n	e61e <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    e742:	2102      	movs	r1, #2
    e744:	f361 02c6 	bfi	r2, r1, #3, #4
    e748:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    e74c:	3301      	adds	r3, #1
    e74e:	e766      	b.n	e61e <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    e750:	785a      	ldrb	r2, [r3, #1]
    e752:	2a6c      	cmp	r2, #108	; 0x6c
    e754:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e758:	d101      	bne.n	e75e <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    e75a:	2104      	movs	r1, #4
    e75c:	e7eb      	b.n	e736 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    e75e:	2103      	movs	r1, #3
    e760:	e7f0      	b.n	e744 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    e762:	2105      	movs	r1, #5
    e764:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e768:	e7ec      	b.n	e744 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    e76a:	2107      	movs	r1, #7
    e76c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e770:	e7e8      	b.n	e744 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    e772:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    e776:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    e77a:	f022 0202 	bic.w	r2, r2, #2
    e77e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    e782:	f042 0202 	orr.w	r2, r2, #2
    e786:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    e78a:	e7df      	b.n	e74c <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    e78c:	3b6e      	subs	r3, #110	; 0x6e
    e78e:	b2d9      	uxtb	r1, r3
    e790:	2301      	movs	r3, #1
    e792:	408b      	lsls	r3, r1
    e794:	f240 4182 	movw	r1, #1154	; 0x482
    e798:	420b      	tst	r3, r1
    e79a:	d138      	bne.n	e80e <z_cbvprintf_impl+0x332>
    e79c:	f013 0f24 	tst.w	r3, #36	; 0x24
    e7a0:	d152      	bne.n	e848 <z_cbvprintf_impl+0x36c>
    e7a2:	07df      	lsls	r7, r3, #31
    e7a4:	d55d      	bpl.n	e862 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    e7a6:	2103      	movs	r1, #3
    e7a8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e7ac:	f361 0302 	bfi	r3, r1, #0, #3
    e7b0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7b4:	f002 0378 	and.w	r3, r2, #120	; 0x78
    e7b8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    e7bc:	4243      	negs	r3, r0
    e7be:	4143      	adcs	r3, r0
    e7c0:	e01b      	b.n	e7fa <z_cbvprintf_impl+0x31e>
    e7c2:	2001      	movs	r0, #1
	switch (conv->specifier) {
    e7c4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    e7c8:	b2c9      	uxtb	r1, r1
    e7ca:	fa00 f101 	lsl.w	r1, r0, r1
    e7ce:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    e7d2:	f47f af3e 	bne.w	e652 <z_cbvprintf_impl+0x176>
    e7d6:	f640 0701 	movw	r7, #2049	; 0x801
    e7da:	4239      	tst	r1, r7
    e7dc:	d11d      	bne.n	e81a <z_cbvprintf_impl+0x33e>
    e7de:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    e7e2:	d03e      	beq.n	e862 <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    e7e4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e7e8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7ec:	f002 0278 	and.w	r2, r2, #120	; 0x78
    e7f0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    e7f2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7f6:	d034      	beq.n	e862 <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    e7f8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    e7fa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    e7fe:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e802:	430b      	orrs	r3, r1
    e804:	f363 0241 	bfi	r2, r3, #1, #1
    e808:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    e80c:	e72e      	b.n	e66c <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    e80e:	2102      	movs	r1, #2
    e810:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e814:	f361 0302 	bfi	r3, r1, #0, #3
    e818:	e7e8      	b.n	e7ec <z_cbvprintf_impl+0x310>
    e81a:	2002      	movs	r0, #2
    e81c:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e820:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    e824:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e828:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    e82a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    e82e:	bf02      	ittt	eq
    e830:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    e834:	f041 0101 	orreq.w	r1, r1, #1
    e838:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    e83c:	2b63      	cmp	r3, #99	; 0x63
    e83e:	d1db      	bne.n	e7f8 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e840:	1e13      	subs	r3, r2, #0
    e842:	bf18      	it	ne
    e844:	2301      	movne	r3, #1
    e846:	e7d8      	b.n	e7fa <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    e848:	2103      	movs	r1, #3
    e84a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e84e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    e852:	f361 0302 	bfi	r3, r1, #0, #3
    e856:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e85a:	bf14      	ite	ne
    e85c:	2301      	movne	r3, #1
    e85e:	2300      	moveq	r3, #0
    e860:	e7cb      	b.n	e7fa <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    e862:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e866:	f043 0301 	orr.w	r3, r3, #1
    e86a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    e86e:	e7c3      	b.n	e7f8 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    e870:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    e874:	2a00      	cmp	r2, #0
		int width = -1;
    e876:	bfac      	ite	ge
    e878:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    e87c:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    e880:	e706      	b.n	e690 <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    e882:	079f      	lsls	r7, r3, #30
    e884:	f57f af13 	bpl.w	e6ae <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    e888:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    e88c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e88e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    e892:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    e896:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    e89a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e89e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e8a0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e8a4:	d133      	bne.n	e90e <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    e8a6:	1ecb      	subs	r3, r1, #3
    e8a8:	2b04      	cmp	r3, #4
    e8aa:	d804      	bhi.n	e8b6 <z_cbvprintf_impl+0x3da>
    e8ac:	e8df f003 	tbb	[pc, r3]
    e8b0:	21464621 	.word	0x21464621
    e8b4:	21          	.byte	0x21
    e8b5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    e8b6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    e8b8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    e8ba:	ea4f 72e3 	mov.w	r2, r3, asr #31
    e8be:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    e8c2:	d11c      	bne.n	e8fe <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    e8c4:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    e8c8:	17da      	asrs	r2, r3, #31
    e8ca:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    e8ce:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    e8d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e8d4:	f013 0703 	ands.w	r7, r3, #3
    e8d8:	d050      	beq.n	e97c <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    e8da:	4632      	mov	r2, r6
    e8dc:	4651      	mov	r1, sl
    e8de:	9b04      	ldr	r3, [sp, #16]
    e8e0:	9803      	ldr	r0, [sp, #12]
    e8e2:	f01c fa4b 	bl	2ad7c <outs>
    e8e6:	2800      	cmp	r0, #0
    e8e8:	f2c0 814f 	blt.w	eb8a <z_cbvprintf_impl+0x6ae>
    e8ec:	4405      	add	r5, r0
			continue;
    e8ee:	9e04      	ldr	r6, [sp, #16]
    e8f0:	e5fc      	b.n	e4ec <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e8f2:	f854 3b04 	ldr.w	r3, [r4], #4
    e8f6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    e8f8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    e8fc:	e7e8      	b.n	e8d0 <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    e8fe:	2902      	cmp	r1, #2
    e900:	d1e5      	bne.n	e8ce <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    e902:	b21a      	sxth	r2, r3
    e904:	f343 33c0 	sbfx	r3, r3, #15, #1
    e908:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e90c:	e7df      	b.n	e8ce <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e90e:	2b02      	cmp	r3, #2
    e910:	d124      	bne.n	e95c <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    e912:	1ecb      	subs	r3, r1, #3
    e914:	2b04      	cmp	r3, #4
    e916:	d804      	bhi.n	e922 <z_cbvprintf_impl+0x446>
    e918:	e8df f003 	tbb	[pc, r3]
    e91c:	18101018 	.word	0x18101018
    e920:	18          	.byte	0x18
    e921:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    e922:	2901      	cmp	r1, #1
    e924:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    e928:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e92c:	d014      	beq.n	e958 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    e92e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    e930:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    e934:	d1cc      	bne.n	e8d0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    e936:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    e938:	9310      	str	r3, [sp, #64]	; 0x40
    e93a:	e7c9      	b.n	e8d0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    e93c:	3407      	adds	r4, #7
    e93e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    e942:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    e946:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    e94a:	e7c1      	b.n	e8d0 <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    e94c:	f854 3b04 	ldr.w	r3, [r4], #4
    e950:	9310      	str	r3, [sp, #64]	; 0x40
    e952:	2300      	movs	r3, #0
    e954:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    e956:	e7bb      	b.n	e8d0 <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    e958:	b2db      	uxtb	r3, r3
    e95a:	e7cd      	b.n	e8f8 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    e95c:	2b04      	cmp	r3, #4
    e95e:	d108      	bne.n	e972 <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    e960:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    e962:	f024 0407 	bic.w	r4, r4, #7
    e966:	e9d4 2300 	ldrd	r2, r3, [r4]
    e96a:	3408      	adds	r4, #8
    e96c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e970:	e7ae      	b.n	e8d0 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    e972:	2b03      	cmp	r3, #3
    e974:	d1ac      	bne.n	e8d0 <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    e976:	f854 3b04 	ldr.w	r3, [r4], #4
    e97a:	e7dd      	b.n	e938 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    e97c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    e980:	2878      	cmp	r0, #120	; 0x78
    e982:	d8b4      	bhi.n	e8ee <z_cbvprintf_impl+0x412>
    e984:	2862      	cmp	r0, #98	; 0x62
    e986:	d81d      	bhi.n	e9c4 <z_cbvprintf_impl+0x4e8>
    e988:	2825      	cmp	r0, #37	; 0x25
    e98a:	f43f adb7 	beq.w	e4fc <z_cbvprintf_impl+0x20>
    e98e:	2858      	cmp	r0, #88	; 0x58
    e990:	d1ad      	bne.n	e8ee <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    e992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    e996:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    e99a:	9300      	str	r3, [sp, #0]
    e99c:	aa12      	add	r2, sp, #72	; 0x48
    e99e:	ab0a      	add	r3, sp, #40	; 0x28
    e9a0:	f7ff fd50 	bl	e444 <encode_uint>
			if (precision >= 0) {
    e9a4:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    e9a8:	4681      	mov	r9, r0
			if (precision >= 0) {
    e9aa:	f280 8098 	bge.w	eade <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    e9ae:	f1b9 0f00 	cmp.w	r9, #0
    e9b2:	d09c      	beq.n	e8ee <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    e9b4:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    e9b8:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    e9bc:	2f00      	cmp	r7, #0
    e9be:	d050      	beq.n	ea62 <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    e9c0:	3301      	adds	r3, #1
    e9c2:	e04e      	b.n	ea62 <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    e9c4:	3863      	subs	r0, #99	; 0x63
    e9c6:	2815      	cmp	r0, #21
    e9c8:	d891      	bhi.n	e8ee <z_cbvprintf_impl+0x412>
    e9ca:	a201      	add	r2, pc, #4	; (adr r2, e9d0 <z_cbvprintf_impl+0x4f4>)
    e9cc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    e9d0:	0000ea51 	.word	0x0000ea51
    e9d4:	0000eab5 	.word	0x0000eab5
    e9d8:	0000e8ef 	.word	0x0000e8ef
    e9dc:	0000e8ef 	.word	0x0000e8ef
    e9e0:	0000e8ef 	.word	0x0000e8ef
    e9e4:	0000e8ef 	.word	0x0000e8ef
    e9e8:	0000eab5 	.word	0x0000eab5
    e9ec:	0000e8ef 	.word	0x0000e8ef
    e9f0:	0000e8ef 	.word	0x0000e8ef
    e9f4:	0000e8ef 	.word	0x0000e8ef
    e9f8:	0000e8ef 	.word	0x0000e8ef
    e9fc:	0000eb3f 	.word	0x0000eb3f
    ea00:	0000ead9 	.word	0x0000ead9
    ea04:	0000eb01 	.word	0x0000eb01
    ea08:	0000e8ef 	.word	0x0000e8ef
    ea0c:	0000e8ef 	.word	0x0000e8ef
    ea10:	0000ea29 	.word	0x0000ea29
    ea14:	0000e8ef 	.word	0x0000e8ef
    ea18:	0000ead9 	.word	0x0000ead9
    ea1c:	0000e8ef 	.word	0x0000e8ef
    ea20:	0000e8ef 	.word	0x0000e8ef
    ea24:	0000ead9 	.word	0x0000ead9
			if (precision >= 0) {
    ea28:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    ea2c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    ea30:	db0a      	blt.n	ea48 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    ea32:	4659      	mov	r1, fp
    ea34:	4648      	mov	r0, r9
    ea36:	f022 f8bd 	bl	30bb4 <strnlen>
		if (bps == NULL) {
    ea3a:	f1b9 0f00 	cmp.w	r9, #0
    ea3e:	f43f af56 	beq.w	e8ee <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    ea42:	eb09 0600 	add.w	r6, r9, r0
    ea46:	e076      	b.n	eb36 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    ea48:	4648      	mov	r0, r9
    ea4a:	f7fa fbea 	bl	9222 <strlen>
    ea4e:	e7f8      	b.n	ea42 <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ea50:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    ea52:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ea54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    ea58:	2301      	movs	r3, #1
			bpe = buf + 1;
    ea5a:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    ea5e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    ea62:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    ea66:	f011 0210 	ands.w	r2, r1, #16
    ea6a:	9206      	str	r2, [sp, #24]
    ea6c:	f000 8081 	beq.w	eb72 <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    ea70:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    ea72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ea74:	4413      	add	r3, r2
    ea76:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    ea78:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    ea7a:	bf44      	itt	mi
    ea7c:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    ea7e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    ea80:	f1b8 0f00 	cmp.w	r8, #0
    ea84:	f340 808e 	ble.w	eba4 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    ea88:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    ea8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ea90:	0758      	lsls	r0, r3, #29
    ea92:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    ea96:	f100 8085 	bmi.w	eba4 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    ea9a:	0659      	lsls	r1, r3, #25
    ea9c:	d578      	bpl.n	eb90 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    ea9e:	b13f      	cbz	r7, eab0 <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    eaa0:	4651      	mov	r1, sl
    eaa2:	4638      	mov	r0, r7
    eaa4:	9b03      	ldr	r3, [sp, #12]
    eaa6:	4798      	blx	r3
    eaa8:	2800      	cmp	r0, #0
    eaaa:	db6e      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    eaac:	465f      	mov	r7, fp
    eaae:	3501      	adds	r5, #1
					pad = '0';
    eab0:	2330      	movs	r3, #48	; 0x30
    eab2:	e06e      	b.n	eb92 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    eab4:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    eab6:	bf5a      	itte	pl
    eab8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    eabc:	015f      	lslpl	r7, r3, #5
				sign = '+';
    eabe:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    eac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    eac4:	2b00      	cmp	r3, #0
    eac6:	f6bf af64 	bge.w	e992 <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    eaca:	4252      	negs	r2, r2
    eacc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ead0:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ead2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ead6:	e75c      	b.n	e992 <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    ead8:	2700      	movs	r7, #0
    eada:	e75a      	b.n	e992 <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    eadc:	2700      	movs	r7, #0
				conv->flag_zero = false;
    eade:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    eae2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    eae6:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    eaea:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    eaee:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    eaf0:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    eaf4:	f67f af5b 	bls.w	e9ae <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    eaf8:	ebab 0303 	sub.w	r3, fp, r3
    eafc:	9313      	str	r3, [sp, #76]	; 0x4c
    eafe:	e756      	b.n	e9ae <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    eb00:	9810      	ldr	r0, [sp, #64]	; 0x40
    eb02:	b380      	cbz	r0, eb66 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eb04:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    eb08:	ab0a      	add	r3, sp, #40	; 0x28
    eb0a:	2100      	movs	r1, #0
    eb0c:	9600      	str	r6, [sp, #0]
    eb0e:	aa12      	add	r2, sp, #72	; 0x48
    eb10:	f7ff fc98 	bl	e444 <encode_uint>
				conv->altform_0c = true;
    eb14:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    eb18:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    eb1c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    eb20:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    eb24:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eb28:	4681      	mov	r9, r0
				conv->altform_0c = true;
    eb2a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    eb2e:	dad5      	bge.n	eadc <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    eb30:	2800      	cmp	r0, #0
    eb32:	f43f aedc 	beq.w	e8ee <z_cbvprintf_impl+0x412>
		char sign = 0;
    eb36:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    eb38:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    eb3c:	e791      	b.n	ea62 <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    eb3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    eb40:	2907      	cmp	r1, #7
    eb42:	f63f aed4 	bhi.w	e8ee <z_cbvprintf_impl+0x412>
    eb46:	e8df f001 	tbb	[pc, r1]
    eb4a:	040c      	.short	0x040c
    eb4c:	08080c06 	.word	0x08080c06
    eb50:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    eb52:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    eb54:	e6cb      	b.n	e8ee <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    eb56:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    eb58:	e6c9      	b.n	e8ee <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    eb5a:	17ea      	asrs	r2, r5, #31
    eb5c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    eb60:	e6c5      	b.n	e8ee <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    eb62:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    eb64:	e6c3      	b.n	e8ee <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    eb66:	4e31      	ldr	r6, [pc, #196]	; (ec2c <z_cbvprintf_impl+0x750>)
		char sign = 0;
    eb68:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    eb6a:	2305      	movs	r3, #5
    eb6c:	f1a6 0905 	sub.w	r9, r6, #5
    eb70:	e777      	b.n	ea62 <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    eb72:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    eb74:	bf48      	it	mi
    eb76:	3301      	addmi	r3, #1
    eb78:	e77b      	b.n	ea72 <z_cbvprintf_impl+0x596>
					OUTC(pad);
    eb7a:	4618      	mov	r0, r3
    eb7c:	9307      	str	r3, [sp, #28]
    eb7e:	4651      	mov	r1, sl
    eb80:	9b03      	ldr	r3, [sp, #12]
    eb82:	4798      	blx	r3
    eb84:	2800      	cmp	r0, #0
    eb86:	9b07      	ldr	r3, [sp, #28]
    eb88:	da04      	bge.n	eb94 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    eb8a:	b017      	add	sp, #92	; 0x5c
    eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    eb90:	2320      	movs	r3, #32
					pad = '0';
    eb92:	46c3      	mov	fp, r8
				while (width-- > 0) {
    eb94:	4659      	mov	r1, fp
    eb96:	2900      	cmp	r1, #0
    eb98:	f10b 3bff 	add.w	fp, fp, #4294967295
    eb9c:	dced      	bgt.n	eb7a <z_cbvprintf_impl+0x69e>
    eb9e:	4445      	add	r5, r8
    eba0:	46d8      	mov	r8, fp
    eba2:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    eba4:	b137      	cbz	r7, ebb4 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    eba6:	4651      	mov	r1, sl
    eba8:	4638      	mov	r0, r7
    ebaa:	9b03      	ldr	r3, [sp, #12]
    ebac:	4798      	blx	r3
    ebae:	2800      	cmp	r0, #0
    ebb0:	dbeb      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ebb2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ebb4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ebb8:	06da      	lsls	r2, r3, #27
    ebba:	d401      	bmi.n	ebc0 <z_cbvprintf_impl+0x6e4>
    ebbc:	071b      	lsls	r3, r3, #28
    ebbe:	d506      	bpl.n	ebce <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    ebc0:	4651      	mov	r1, sl
    ebc2:	2030      	movs	r0, #48	; 0x30
    ebc4:	9b03      	ldr	r3, [sp, #12]
    ebc6:	4798      	blx	r3
    ebc8:	2800      	cmp	r0, #0
    ebca:	dbde      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ebcc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ebce:	9b06      	ldr	r3, [sp, #24]
    ebd0:	b13b      	cbz	r3, ebe2 <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    ebd2:	4651      	mov	r1, sl
    ebd4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ebd8:	9b03      	ldr	r3, [sp, #12]
    ebda:	4798      	blx	r3
    ebdc:	2800      	cmp	r0, #0
    ebde:	dbd4      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ebe0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ebe2:	9f05      	ldr	r7, [sp, #20]
    ebe4:	442f      	add	r7, r5
    ebe6:	e006      	b.n	ebf6 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    ebe8:	4651      	mov	r1, sl
    ebea:	2030      	movs	r0, #48	; 0x30
    ebec:	9b03      	ldr	r3, [sp, #12]
    ebee:	4798      	blx	r3
    ebf0:	2800      	cmp	r0, #0
    ebf2:	dbca      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ebf4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ebf6:	1b7b      	subs	r3, r7, r5
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	dcf5      	bgt.n	ebe8 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    ebfc:	4633      	mov	r3, r6
    ebfe:	464a      	mov	r2, r9
    ec00:	4651      	mov	r1, sl
    ec02:	9803      	ldr	r0, [sp, #12]
    ec04:	f01c f8ba 	bl	2ad7c <outs>
    ec08:	2800      	cmp	r0, #0
    ec0a:	dbbe      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ec0c:	4405      	add	r5, r0
		while (width > 0) {
    ec0e:	44a8      	add	r8, r5
    ec10:	eba8 0305 	sub.w	r3, r8, r5
    ec14:	2b00      	cmp	r3, #0
    ec16:	f77f ae6a 	ble.w	e8ee <z_cbvprintf_impl+0x412>
			OUTC(' ');
    ec1a:	4651      	mov	r1, sl
    ec1c:	2020      	movs	r0, #32
    ec1e:	9b03      	ldr	r3, [sp, #12]
    ec20:	4798      	blx	r3
    ec22:	2800      	cmp	r0, #0
    ec24:	dbb1      	blt.n	eb8a <z_cbvprintf_impl+0x6ae>
    ec26:	3501      	adds	r5, #1
			--width;
    ec28:	e7f2      	b.n	ec10 <z_cbvprintf_impl+0x734>
    ec2a:	bf00      	nop
    ec2c:	0003420c 	.word	0x0003420c

0000ec30 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    ec30:	b538      	push	{r3, r4, r5, lr}
    ec32:	460d      	mov	r5, r1
    ec34:	4604      	mov	r4, r0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    ec36:	2220      	movs	r2, #32
    ec38:	2100      	movs	r1, #0
    ec3a:	f021 fe22 	bl	30882 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    ec3e:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    ec40:	68eb      	ldr	r3, [r5, #12]
    ec42:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    ec44:	68ab      	ldr	r3, [r5, #8]
    ec46:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    ec48:	682b      	ldr	r3, [r5, #0]
    ec4a:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    ec4c:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    ec4e:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    ec50:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    ec52:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    ec54:	b123      	cbz	r3, ec60 <mpsc_pbuf_init+0x30>
    ec56:	1e59      	subs	r1, r3, #1
    ec58:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    ec5a:	bf08      	it	eq
    ec5c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    ec60:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ec62:	2201      	movs	r2, #1
    ec64:	2100      	movs	r1, #0
    ec66:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ec6a:	f021 fc0d 	bl	30488 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    ec6e:	b148      	cbz	r0, ec84 <mpsc_pbuf_init+0x54>
    ec70:	4905      	ldr	r1, [pc, #20]	; (ec88 <mpsc_pbuf_init+0x58>)
    ec72:	4806      	ldr	r0, [pc, #24]	; (ec8c <mpsc_pbuf_init+0x5c>)
    ec74:	232e      	movs	r3, #46	; 0x2e
    ec76:	4a06      	ldr	r2, [pc, #24]	; (ec90 <mpsc_pbuf_init+0x60>)
    ec78:	f01c f89e 	bl	2adb8 <assert_print>
    ec7c:	212e      	movs	r1, #46	; 0x2e
    ec7e:	4804      	ldr	r0, [pc, #16]	; (ec90 <mpsc_pbuf_init+0x60>)
    ec80:	f01c f893 	bl	2adaa <assert_post_action>
	ARG_UNUSED(err);
}
    ec84:	bd38      	pop	{r3, r4, r5, pc}
    ec86:	bf00      	nop
    ec88:	00034233 	.word	0x00034233
    ec8c:	00033bc2 	.word	0x00033bc2
    ec90:	0003420d 	.word	0x0003420d

0000ec94 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    ec94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    ec98:	2700      	movs	r7, #0
{
    ec9a:	b089      	sub	sp, #36	; 0x24
    ec9c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    eca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    eca2:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
    eca4:	428b      	cmp	r3, r1
{
    eca6:	4688      	mov	r8, r1
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    eca8:	46ba      	mov	sl, r7
	union mpsc_pbuf_generic *dropped_item = NULL;
    ecaa:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
    ecac:	9707      	str	r7, [sp, #28]
	if (wlen > (buffer->size)) {
    ecae:	d353      	bcc.n	ed58 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
    ecb0:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    ecb4:	f04f 0320 	mov.w	r3, #32
    ecb8:	f3ef 8b11 	mrs	fp, BASEPRI
    ecbc:	f383 8812 	msr	BASEPRI_MAX, r3
    ecc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ecc4:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
    ecc6:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ecc8:	f015 ffaa 	bl	24c20 <z_spin_lock_valid>
    eccc:	b958      	cbnz	r0, ece6 <mpsc_pbuf_alloc+0x52>
    ecce:	2394      	movs	r3, #148	; 0x94
    ecd0:	4a4a      	ldr	r2, [pc, #296]	; (edfc <mpsc_pbuf_alloc+0x168>)
    ecd2:	494b      	ldr	r1, [pc, #300]	; (ee00 <mpsc_pbuf_alloc+0x16c>)
    ecd4:	484b      	ldr	r0, [pc, #300]	; (ee04 <mpsc_pbuf_alloc+0x170>)
    ecd6:	f01c f86f 	bl	2adb8 <assert_print>
    ecda:	4631      	mov	r1, r6
    ecdc:	484a      	ldr	r0, [pc, #296]	; (ee08 <mpsc_pbuf_alloc+0x174>)
    ecde:	f01c f86b 	bl	2adb8 <assert_print>
    ece2:	2194      	movs	r1, #148	; 0x94
    ece4:	e05e      	b.n	eda4 <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
    ece6:	4630      	mov	r0, r6
    ece8:	f015 ffb6 	bl	24c58 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
    ecec:	9a07      	ldr	r2, [sp, #28]
    ecee:	b12a      	cbz	r2, ecfc <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    ecf0:	4639      	mov	r1, r7
    ecf2:	4620      	mov	r0, r4
    ecf4:	f01c f941 	bl	2af7a <post_drop_action>
			tmp_wr_idx_shift = 0;
    ecf8:	2300      	movs	r3, #0
    ecfa:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
    ecfc:	a906      	add	r1, sp, #24
    ecfe:	4620      	mov	r0, r4
    ed00:	f01c f867 	bl	2add2 <free_space>

		if (free_wlen >= wlen) {
    ed04:	9906      	ldr	r1, [sp, #24]
		wrap = free_space(buffer, &free_wlen);
    ed06:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
    ed08:	4541      	cmp	r1, r8
    ed0a:	d32e      	bcc.n	ed6a <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    ed0c:	6822      	ldr	r2, [r4, #0]
			item =
    ed0e:	6a23      	ldr	r3, [r4, #32]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed10:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    ed12:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    ed16:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    ed1a:	f021 0103 	bic.w	r1, r1, #3
    ed1e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed22:	6821      	ldr	r1, [r4, #0]
    ed24:	4642      	mov	r2, r8
    ed26:	f01c f878 	bl	2ae1a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ed2a:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ed2c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ed2e:	4298      	cmp	r0, r3
    ed30:	d016      	beq.n	ed60 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    ed32:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed34:	4630      	mov	r0, r6
    ed36:	f015 ff81 	bl	24c3c <z_spin_unlock_valid>
    ed3a:	b340      	cbz	r0, ed8e <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
    ed3c:	f389 8811 	msr	BASEPRI, r9
    ed40:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    ed44:	9905      	ldr	r1, [sp, #20]
    ed46:	b129      	cbz	r1, ed54 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    ed48:	69a2      	ldr	r2, [r4, #24]
    ed4a:	b10a      	cbz	r2, ed50 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
    ed4c:	4620      	mov	r0, r4
    ed4e:	4790      	blx	r2
			}
			dropped_item = NULL;
    ed50:	2300      	movs	r3, #0
    ed52:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    ed54:	2d00      	cmp	r5, #0
    ed56:	d1ad      	bne.n	ecb4 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    ed58:	4650      	mov	r0, sl
    ed5a:	b009      	add	sp, #36	; 0x24
    ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    ed60:	6923      	ldr	r3, [r4, #16]
    ed62:	f043 0308 	orr.w	r3, r3, #8
    ed66:	6123      	str	r3, [r4, #16]
    ed68:	e7e3      	b.n	ed32 <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
    ed6a:	b118      	cbz	r0, ed74 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
    ed6c:	4620      	mov	r0, r4
    ed6e:	f01c f86e 	bl	2ae4e <add_skip_item>
			cont = true;
    ed72:	e7df      	b.n	ed34 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    ed74:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    ed78:	4313      	orrs	r3, r2
    ed7a:	d036      	beq.n	edea <mpsc_pbuf_alloc+0x156>
    ed7c:	9103      	str	r1, [sp, #12]
    ed7e:	f021 fb2e 	bl	303de <k_is_in_isr>
    ed82:	9903      	ldr	r1, [sp, #12]
    ed84:	bb88      	cbnz	r0, edea <mpsc_pbuf_alloc+0x156>
    ed86:	4630      	mov	r0, r6
    ed88:	f015 ff58 	bl	24c3c <z_spin_unlock_valid>
    ed8c:	b968      	cbnz	r0, edaa <mpsc_pbuf_alloc+0x116>
    ed8e:	23c2      	movs	r3, #194	; 0xc2
    ed90:	4a1a      	ldr	r2, [pc, #104]	; (edfc <mpsc_pbuf_alloc+0x168>)
    ed92:	491e      	ldr	r1, [pc, #120]	; (ee0c <mpsc_pbuf_alloc+0x178>)
    ed94:	481b      	ldr	r0, [pc, #108]	; (ee04 <mpsc_pbuf_alloc+0x170>)
    ed96:	f01c f80f 	bl	2adb8 <assert_print>
    ed9a:	4631      	mov	r1, r6
    ed9c:	481c      	ldr	r0, [pc, #112]	; (ee10 <mpsc_pbuf_alloc+0x17c>)
    ed9e:	f01c f80b 	bl	2adb8 <assert_print>
    eda2:	21c2      	movs	r1, #194	; 0xc2
    eda4:	4815      	ldr	r0, [pc, #84]	; (edfc <mpsc_pbuf_alloc+0x168>)
    eda6:	f01c f800 	bl	2adaa <assert_post_action>
    edaa:	f38b 8811 	msr	BASEPRI, fp
    edae:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    edb2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    edb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    edba:	f016 fa2d 	bl	25218 <z_impl_k_sem_take>
    edbe:	4605      	mov	r5, r0
	__asm__ volatile(
    edc0:	f04f 0320 	mov.w	r3, #32
    edc4:	f3ef 8911 	mrs	r9, BASEPRI
    edc8:	f383 8812 	msr	BASEPRI_MAX, r3
    edcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    edd0:	4630      	mov	r0, r6
    edd2:	f015 ff25 	bl	24c20 <z_spin_lock_valid>
    edd6:	2800      	cmp	r0, #0
    edd8:	f43f af79 	beq.w	ecce <mpsc_pbuf_alloc+0x3a>
			cont = (err == 0) ? true : false;
    eddc:	fab5 f585 	clz	r5, r5
	z_spin_lock_set_owner(l);
    ede0:	4630      	mov	r0, r6
    ede2:	f015 ff39 	bl	24c58 <z_spin_lock_set_owner>
    ede6:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    ede8:	e7a4      	b.n	ed34 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
    edea:	4620      	mov	r0, r4
    edec:	ab07      	add	r3, sp, #28
    edee:	aa05      	add	r2, sp, #20
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    edf0:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    edf2:	f01c f84b 	bl	2ae8c <drop_item_locked>
    edf6:	4605      	mov	r5, r0
    edf8:	e79c      	b.n	ed34 <mpsc_pbuf_alloc+0xa0>
    edfa:	bf00      	nop
    edfc:	000340d9 	.word	0x000340d9
    ee00:	00034132 	.word	0x00034132
    ee04:	00033bc2 	.word	0x00033bc2
    ee08:	00034147 	.word	0x00034147
    ee0c:	00034106 	.word	0x00034106
    ee10:	0003411d 	.word	0x0003411d

0000ee14 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee18:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ee1a:	69c3      	ldr	r3, [r0, #28]
    ee1c:	4608      	mov	r0, r1
{
    ee1e:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    ee20:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ee22:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ee26:	4607      	mov	r7, r0
    ee28:	f04f 0320 	mov.w	r3, #32
    ee2c:	f3ef 8811 	mrs	r8, BASEPRI
    ee30:	f383 8812 	msr	BASEPRI_MAX, r3
    ee34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ee38:	4628      	mov	r0, r5
    ee3a:	f015 fef1 	bl	24c20 <z_spin_lock_valid>
    ee3e:	b968      	cbnz	r0, ee5c <mpsc_pbuf_commit+0x48>
    ee40:	2394      	movs	r3, #148	; 0x94
    ee42:	4a19      	ldr	r2, [pc, #100]	; (eea8 <mpsc_pbuf_commit+0x94>)
    ee44:	4919      	ldr	r1, [pc, #100]	; (eeac <mpsc_pbuf_commit+0x98>)
    ee46:	481a      	ldr	r0, [pc, #104]	; (eeb0 <mpsc_pbuf_commit+0x9c>)
    ee48:	f01b ffb6 	bl	2adb8 <assert_print>
    ee4c:	4629      	mov	r1, r5
    ee4e:	4819      	ldr	r0, [pc, #100]	; (eeb4 <mpsc_pbuf_commit+0xa0>)
    ee50:	f01b ffb2 	bl	2adb8 <assert_print>
    ee54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ee56:	4814      	ldr	r0, [pc, #80]	; (eea8 <mpsc_pbuf_commit+0x94>)
    ee58:	f01b ffa7 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
    ee5c:	4628      	mov	r0, r5
    ee5e:	f015 fefb 	bl	24c58 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    ee62:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ee64:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    ee66:	f043 0301 	orr.w	r3, r3, #1
    ee6a:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ee6c:	6861      	ldr	r1, [r4, #4]
    ee6e:	4620      	mov	r0, r4
    ee70:	f01b ffd3 	bl	2ae1a <idx_inc>
    ee74:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    ee76:	4620      	mov	r0, r4
    ee78:	f01c f89a 	bl	2afb0 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ee7c:	4628      	mov	r0, r5
    ee7e:	f015 fedd 	bl	24c3c <z_spin_unlock_valid>
    ee82:	b958      	cbnz	r0, ee9c <mpsc_pbuf_commit+0x88>
    ee84:	23c2      	movs	r3, #194	; 0xc2
    ee86:	4a08      	ldr	r2, [pc, #32]	; (eea8 <mpsc_pbuf_commit+0x94>)
    ee88:	490b      	ldr	r1, [pc, #44]	; (eeb8 <mpsc_pbuf_commit+0xa4>)
    ee8a:	4809      	ldr	r0, [pc, #36]	; (eeb0 <mpsc_pbuf_commit+0x9c>)
    ee8c:	f01b ff94 	bl	2adb8 <assert_print>
    ee90:	4629      	mov	r1, r5
    ee92:	480a      	ldr	r0, [pc, #40]	; (eebc <mpsc_pbuf_commit+0xa8>)
    ee94:	f01b ff90 	bl	2adb8 <assert_print>
    ee98:	21c2      	movs	r1, #194	; 0xc2
    ee9a:	e7dc      	b.n	ee56 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    ee9c:	f388 8811 	msr	BASEPRI, r8
    eea0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eea8:	000340d9 	.word	0x000340d9
    eeac:	00034132 	.word	0x00034132
    eeb0:	00033bc2 	.word	0x00033bc2
    eeb4:	00034147 	.word	0x00034147
    eeb8:	00034106 	.word	0x00034106
    eebc:	0003411d 	.word	0x0003411d

0000eec0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eec4:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    eec6:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    eeca:	f04f 0320 	mov.w	r3, #32
    eece:	f3ef 8811 	mrs	r8, BASEPRI
    eed2:	f383 8812 	msr	BASEPRI_MAX, r3
    eed6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eeda:	4638      	mov	r0, r7
    eedc:	f015 fea0 	bl	24c20 <z_spin_lock_valid>
    eee0:	4605      	mov	r5, r0
    eee2:	b968      	cbnz	r0, ef00 <mpsc_pbuf_claim+0x40>
    eee4:	2394      	movs	r3, #148	; 0x94
    eee6:	4a34      	ldr	r2, [pc, #208]	; (efb8 <mpsc_pbuf_claim+0xf8>)
    eee8:	4934      	ldr	r1, [pc, #208]	; (efbc <mpsc_pbuf_claim+0xfc>)
    eeea:	4835      	ldr	r0, [pc, #212]	; (efc0 <mpsc_pbuf_claim+0x100>)
    eeec:	f01b ff64 	bl	2adb8 <assert_print>
    eef0:	4639      	mov	r1, r7
    eef2:	4834      	ldr	r0, [pc, #208]	; (efc4 <mpsc_pbuf_claim+0x104>)
    eef4:	f01b ff60 	bl	2adb8 <assert_print>
    eef8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eefa:	482f      	ldr	r0, [pc, #188]	; (efb8 <mpsc_pbuf_claim+0xf8>)
    eefc:	f01b ff55 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
    ef00:	4638      	mov	r0, r7
    ef02:	f015 fea9 	bl	24c58 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ef06:	6923      	ldr	r3, [r4, #16]
    ef08:	68a2      	ldr	r2, [r4, #8]
    ef0a:	f013 0f08 	tst.w	r3, #8
    ef0e:	d102      	bne.n	ef16 <mpsc_pbuf_claim+0x56>
    ef10:	6863      	ldr	r3, [r4, #4]
    ef12:	429a      	cmp	r2, r3
    ef14:	d900      	bls.n	ef18 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
    ef16:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    ef18:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	d03d      	beq.n	ef9a <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
    ef1e:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    ef20:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    ef24:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    ef28:	f013 0003 	ands.w	r0, r3, #3
    ef2c:	d038      	beq.n	efa0 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
    ef2e:	2802      	cmp	r0, #2
    ef30:	d103      	bne.n	ef3a <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
    ef32:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    ef36:	08b6      	lsrs	r6, r6, #2
    ef38:	d105      	bne.n	ef46 <mpsc_pbuf_claim+0x86>
    ef3a:	07d8      	lsls	r0, r3, #31
    ef3c:	d41d      	bmi.n	ef7a <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    ef3e:	4648      	mov	r0, r9
    ef40:	69e3      	ldr	r3, [r4, #28]
    ef42:	4798      	blx	r3
    ef44:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    ef46:	68a1      	ldr	r1, [r4, #8]
    ef48:	4632      	mov	r2, r6
    ef4a:	4620      	mov	r0, r4
    ef4c:	f01b ff65 	bl	2ae1a <idx_inc>
				rd_idx_inc(buffer, inc);
    ef50:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
    ef52:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    ef54:	4620      	mov	r0, r4
    ef56:	f01b ff6e 	bl	2ae36 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef5a:	4638      	mov	r0, r7
    ef5c:	f015 fe6e 	bl	24c3c <z_spin_unlock_valid>
    ef60:	bb00      	cbnz	r0, efa4 <mpsc_pbuf_claim+0xe4>
    ef62:	23c2      	movs	r3, #194	; 0xc2
    ef64:	4a14      	ldr	r2, [pc, #80]	; (efb8 <mpsc_pbuf_claim+0xf8>)
    ef66:	4918      	ldr	r1, [pc, #96]	; (efc8 <mpsc_pbuf_claim+0x108>)
    ef68:	4815      	ldr	r0, [pc, #84]	; (efc0 <mpsc_pbuf_claim+0x100>)
    ef6a:	f01b ff25 	bl	2adb8 <assert_print>
    ef6e:	4639      	mov	r1, r7
    ef70:	4816      	ldr	r0, [pc, #88]	; (efcc <mpsc_pbuf_claim+0x10c>)
    ef72:	f01b ff21 	bl	2adb8 <assert_print>
    ef76:	21c2      	movs	r1, #194	; 0xc2
    ef78:	e7bf      	b.n	eefa <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    ef7a:	f043 0302 	orr.w	r3, r3, #2
    ef7e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    ef82:	69e3      	ldr	r3, [r4, #28]
    ef84:	4648      	mov	r0, r9
					idx_inc(buffer, buffer->tmp_rd_idx,
    ef86:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    ef88:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    ef8a:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    ef8c:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    ef8e:	4620      	mov	r0, r4
    ef90:	f01b ff43 	bl	2ae1a <idx_inc>
		cont = false;
    ef94:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    ef96:	60a0      	str	r0, [r4, #8]
    ef98:	e7df      	b.n	ef5a <mpsc_pbuf_claim+0x9a>
		cont = false;
    ef9a:	461d      	mov	r5, r3
			item = NULL;
    ef9c:	46a9      	mov	r9, r5
    ef9e:	e7dc      	b.n	ef5a <mpsc_pbuf_claim+0x9a>
		cont = false;
    efa0:	4605      	mov	r5, r0
    efa2:	e7fb      	b.n	ef9c <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
    efa4:	f388 8811 	msr	BASEPRI, r8
    efa8:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    efac:	2d00      	cmp	r5, #0
    efae:	d18c      	bne.n	eeca <mpsc_pbuf_claim+0xa>

	return item;
}
    efb0:	4648      	mov	r0, r9
    efb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    efb6:	bf00      	nop
    efb8:	000340d9 	.word	0x000340d9
    efbc:	00034132 	.word	0x00034132
    efc0:	00033bc2 	.word	0x00033bc2
    efc4:	00034147 	.word	0x00034147
    efc8:	00034106 	.word	0x00034106
    efcc:	0003411d 	.word	0x0003411d

0000efd0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efd4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    efd6:	69c3      	ldr	r3, [r0, #28]
    efd8:	4608      	mov	r0, r1
{
    efda:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    efdc:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    efde:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    efe2:	4607      	mov	r7, r0
	__asm__ volatile(
    efe4:	f04f 0320 	mov.w	r3, #32
    efe8:	f3ef 8811 	mrs	r8, BASEPRI
    efec:	f383 8812 	msr	BASEPRI_MAX, r3
    eff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eff4:	4630      	mov	r0, r6
    eff6:	f015 fe13 	bl	24c20 <z_spin_lock_valid>
    effa:	b968      	cbnz	r0, f018 <mpsc_pbuf_free+0x48>
    effc:	2394      	movs	r3, #148	; 0x94
    effe:	4a26      	ldr	r2, [pc, #152]	; (f098 <mpsc_pbuf_free+0xc8>)
    f000:	4926      	ldr	r1, [pc, #152]	; (f09c <mpsc_pbuf_free+0xcc>)
    f002:	4827      	ldr	r0, [pc, #156]	; (f0a0 <mpsc_pbuf_free+0xd0>)
    f004:	f01b fed8 	bl	2adb8 <assert_print>
    f008:	4631      	mov	r1, r6
    f00a:	4826      	ldr	r0, [pc, #152]	; (f0a4 <mpsc_pbuf_free+0xd4>)
    f00c:	f01b fed4 	bl	2adb8 <assert_print>
    f010:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f012:	4821      	ldr	r0, [pc, #132]	; (f098 <mpsc_pbuf_free+0xc8>)
    f014:	f01b fec9 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
    f018:	4630      	mov	r0, r6
    f01a:	f015 fe1d 	bl	24c58 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    f01e:	782b      	ldrb	r3, [r5, #0]
    f020:	f36f 0300 	bfc	r3, #0, #1
    f024:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f026:	6923      	ldr	r3, [r4, #16]
    f028:	079b      	lsls	r3, r3, #30
    f02a:	d505      	bpl.n	f038 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    f02c:	68e2      	ldr	r2, [r4, #12]
    f02e:	6a23      	ldr	r3, [r4, #32]
    f030:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f034:	429d      	cmp	r5, r3
    f036:	d120      	bne.n	f07a <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
    f038:	782b      	ldrb	r3, [r5, #0]
    f03a:	f36f 0341 	bfc	r3, #1, #1
    f03e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    f040:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    f044:	4299      	cmp	r1, r3
    f046:	d104      	bne.n	f052 <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    f048:	463a      	mov	r2, r7
    f04a:	4620      	mov	r0, r4
    f04c:	f01b fee5 	bl	2ae1a <idx_inc>
    f050:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    f052:	4639      	mov	r1, r7
    f054:	4620      	mov	r0, r4
    f056:	f01b feee 	bl	2ae36 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f05a:	4630      	mov	r0, r6
    f05c:	f015 fdee 	bl	24c3c <z_spin_unlock_valid>
    f060:	b980      	cbnz	r0, f084 <mpsc_pbuf_free+0xb4>
    f062:	23c2      	movs	r3, #194	; 0xc2
    f064:	4a0c      	ldr	r2, [pc, #48]	; (f098 <mpsc_pbuf_free+0xc8>)
    f066:	4910      	ldr	r1, [pc, #64]	; (f0a8 <mpsc_pbuf_free+0xd8>)
    f068:	480d      	ldr	r0, [pc, #52]	; (f0a0 <mpsc_pbuf_free+0xd0>)
    f06a:	f01b fea5 	bl	2adb8 <assert_print>
    f06e:	4631      	mov	r1, r6
    f070:	480e      	ldr	r0, [pc, #56]	; (f0ac <mpsc_pbuf_free+0xdc>)
    f072:	f01b fea1 	bl	2adb8 <assert_print>
    f076:	21c2      	movs	r1, #194	; 0xc2
    f078:	e7cb      	b.n	f012 <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    f07a:	682b      	ldr	r3, [r5, #0]
    f07c:	f367 039f 	bfi	r3, r7, #2, #30
    f080:	602b      	str	r3, [r5, #0]
    f082:	e7ea      	b.n	f05a <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
    f084:	f388 8811 	msr	BASEPRI, r8
    f088:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f08c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    f090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f094:	f016 b87c 	b.w	25190 <z_impl_k_sem_give>
    f098:	000340d9 	.word	0x000340d9
    f09c:	00034132 	.word	0x00034132
    f0a0:	00033bc2 	.word	0x00033bc2
    f0a4:	00034147 	.word	0x00034147
    f0a8:	00034106 	.word	0x00034106
    f0ac:	0003411d 	.word	0x0003411d

0000f0b0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    f0b0:	4604      	mov	r4, r0
    f0b2:	b508      	push	{r3, lr}
	__asm__ volatile(
    f0b4:	f04f 0220 	mov.w	r2, #32
    f0b8:	f3ef 8311 	mrs	r3, BASEPRI
    f0bc:	f382 8812 	msr	BASEPRI_MAX, r2
    f0c0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    f0c4:	f00d fe0e 	bl	1cce4 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    f0c8:	4620      	mov	r0, r4
    f0ca:	f002 fee1 	bl	11e90 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    f0ce:	4803      	ldr	r0, [pc, #12]	; (f0dc <sys_reboot+0x2c>)
    f0d0:	f01b fc95 	bl	2a9fe <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    f0d4:	f002 f8e0 	bl	11298 <arch_cpu_idle>
    f0d8:	e7fc      	b.n	f0d4 <sys_reboot+0x24>
    f0da:	bf00      	nop
    f0dc:	0003423c 	.word	0x0003423c

0000f0e0 <nordicsemi_nrf91_init>:
    f0e0:	f04f 0220 	mov.w	r2, #32
    f0e4:	f3ef 8311 	mrs	r3, BASEPRI
    f0e8:	f382 8812 	msr	BASEPRI_MAX, r2
    f0ec:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f0f0:	2101      	movs	r1, #1
    f0f2:	4a04      	ldr	r2, [pc, #16]	; (f104 <nordicsemi_nrf91_init+0x24>)
    f0f4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    f0f8:	f383 8811 	msr	BASEPRI, r3
    f0fc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f100:	2000      	movs	r0, #0
    f102:	4770      	bx	lr
    f104:	40039000 	.word	0x40039000

0000f108 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f108:	b120      	cbz	r0, f114 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f10a:	4b03      	ldr	r3, [pc, #12]	; (f118 <arch_busy_wait+0x10>)
    f10c:	0180      	lsls	r0, r0, #6
    f10e:	f043 0301 	orr.w	r3, r3, #1
    f112:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f114:	4770      	bx	lr
    f116:	bf00      	nop
    f118:	00031e20 	.word	0x00031e20

0000f11c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f11c:	f020 ba04 	b.w	2f528 <SystemInit>

0000f120 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    f120:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    f122:	2200      	movs	r2, #0
{
    f124:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    f126:	490f      	ldr	r1, [pc, #60]	; (f164 <enable_logger+0x44>)
    f128:	480f      	ldr	r0, [pc, #60]	; (f168 <enable_logger+0x48>)
    f12a:	f021 fa83 	bl	30634 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f12e:	2200      	movs	r2, #0
    f130:	2300      	movs	r3, #0
    f132:	2400      	movs	r4, #0
    f134:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f138:	230e      	movs	r3, #14
    f13a:	4d0c      	ldr	r5, [pc, #48]	; (f16c <enable_logger+0x4c>)
    f13c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    f140:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f144:	4628      	mov	r0, r5
    f146:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f14a:	4b09      	ldr	r3, [pc, #36]	; (f170 <enable_logger+0x50>)
    f14c:	4909      	ldr	r1, [pc, #36]	; (f174 <enable_logger+0x54>)
    f14e:	9400      	str	r4, [sp, #0]
    f150:	f015 fc9c 	bl	24a8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f154:	4908      	ldr	r1, [pc, #32]	; (f178 <enable_logger+0x58>)
    f156:	4628      	mov	r0, r5
    f158:	f021 f947 	bl	303ea <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    f15c:	4620      	mov	r0, r4
    f15e:	b009      	add	sp, #36	; 0x24
    f160:	bd30      	pop	{r4, r5, pc}
    f162:	bf00      	nop
    f164:	0000f2c1 	.word	0x0000f2c1
    f168:	2000d650 	.word	0x2000d650
    f16c:	2000d1c0 	.word	0x2000d1c0
    f170:	0000f599 	.word	0x0000f599
    f174:	20010490 	.word	0x20010490
    f178:	00034269 	.word	0x00034269

0000f17c <activate_foreach_backend>:
{
    f17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f180:	4604      	mov	r4, r0
	while (mask_cpy) {
    f182:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    f184:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f188:	f8df 8050 	ldr.w	r8, [pc, #80]	; f1dc <activate_foreach_backend+0x60>
	while (mask_cpy) {
    f18c:	b914      	cbnz	r4, f194 <activate_foreach_backend+0x18>
}
    f18e:	4638      	mov	r0, r7
    f190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    f194:	fa94 f5a4 	rbit	r5, r4
    f198:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    f19c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f1a0:	012e      	lsls	r6, r5, #4
    f1a2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    f1a6:	ea6f 0a03 	mvn.w	sl, r3
    f1aa:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f1ae:	7b2b      	ldrb	r3, [r5, #12]
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d0eb      	beq.n	f18c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    f1b4:	f858 3006 	ldr.w	r3, [r8, r6]
    f1b8:	691b      	ldr	r3, [r3, #16]
    f1ba:	b94b      	cbnz	r3, f1d0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    f1bc:	4446      	add	r6, r8
			log_backend_enable(backend,
    f1be:	6873      	ldr	r3, [r6, #4]
    f1c0:	2204      	movs	r2, #4
    f1c2:	4628      	mov	r0, r5
    f1c4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f1c6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    f1ca:	f000 faeb 	bl	f7a4 <log_backend_enable>
    f1ce:	e7dd      	b.n	f18c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    f1d0:	4628      	mov	r0, r5
    f1d2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f1d4:	2800      	cmp	r0, #0
    f1d6:	d1d9      	bne.n	f18c <activate_foreach_backend+0x10>
    f1d8:	e7f0      	b.n	f1bc <activate_foreach_backend+0x40>
    f1da:	bf00      	nop
    f1dc:	00031cf4 	.word	0x00031cf4

0000f1e0 <z_log_init>:
{
    f1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    f1e4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; f2a0 <z_log_init+0xc0>
    f1e8:	4c2e      	ldr	r4, [pc, #184]	; (f2a4 <z_log_init+0xc4>)
    f1ea:	4680      	mov	r8, r0
    f1ec:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    f1f0:	2b9f      	cmp	r3, #159	; 0x9f
{
    f1f2:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    f1f4:	d90b      	bls.n	f20e <z_log_init+0x2e>
    f1f6:	492c      	ldr	r1, [pc, #176]	; (f2a8 <z_log_init+0xc8>)
    f1f8:	f44f 738c 	mov.w	r3, #280	; 0x118
    f1fc:	4a2b      	ldr	r2, [pc, #172]	; (f2ac <z_log_init+0xcc>)
    f1fe:	482c      	ldr	r0, [pc, #176]	; (f2b0 <z_log_init+0xd0>)
    f200:	f01b fdda 	bl	2adb8 <assert_print>
    f204:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f208:	4828      	ldr	r0, [pc, #160]	; (f2ac <z_log_init+0xcc>)
    f20a:	f01b fdce 	bl	2adaa <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    f20e:	4829      	ldr	r0, [pc, #164]	; (f2b4 <z_log_init+0xd4>)
    f210:	f01b ff0f 	bl	2b032 <atomic_inc>
    f214:	4606      	mov	r6, r0
    f216:	b360      	cbz	r0, f272 <z_log_init+0x92>
	uint32_t mask = 0;
    f218:	2500      	movs	r5, #0
}
    f21a:	4628      	mov	r0, r5
    f21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    f220:	7b23      	ldrb	r3, [r4, #12]
    f222:	b173      	cbz	r3, f242 <z_log_init+0x62>
	if (backend->api->init) {
    f224:	6823      	ldr	r3, [r4, #0]
    f226:	68db      	ldr	r3, [r3, #12]
    f228:	b10b      	cbz	r3, f22e <z_log_init+0x4e>
		backend->api->init(backend);
    f22a:	4620      	mov	r0, r4
    f22c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    f22e:	6823      	ldr	r3, [r4, #0]
    f230:	691b      	ldr	r3, [r3, #16]
    f232:	b9b3      	cbnz	r3, f262 <z_log_init+0x82>
				log_backend_enable(backend,
    f234:	6863      	ldr	r3, [r4, #4]
    f236:	2204      	movs	r2, #4
    f238:	4620      	mov	r0, r4
    f23a:	6819      	ldr	r1, [r3, #0]
    f23c:	f000 fab2 	bl	f7a4 <log_backend_enable>
			i++;
    f240:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f242:	3410      	adds	r4, #16
    f244:	454c      	cmp	r4, r9
    f246:	d918      	bls.n	f27a <z_log_init+0x9a>
    f248:	491b      	ldr	r1, [pc, #108]	; (f2b8 <z_log_init+0xd8>)
    f24a:	f240 1325 	movw	r3, #293	; 0x125
    f24e:	4a17      	ldr	r2, [pc, #92]	; (f2ac <z_log_init+0xcc>)
    f250:	4817      	ldr	r0, [pc, #92]	; (f2b0 <z_log_init+0xd0>)
    f252:	f01b fdb1 	bl	2adb8 <assert_print>
    f256:	4819      	ldr	r0, [pc, #100]	; (f2bc <z_log_init+0xdc>)
    f258:	f01b fdae 	bl	2adb8 <assert_print>
    f25c:	f240 1125 	movw	r1, #293	; 0x125
    f260:	e7d2      	b.n	f208 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    f262:	4620      	mov	r0, r4
    f264:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    f266:	2800      	cmp	r0, #0
    f268:	d0e4      	beq.n	f234 <z_log_init+0x54>
				mask |= BIT(i);
    f26a:	fa0a f306 	lsl.w	r3, sl, r6
    f26e:	431d      	orrs	r5, r3
    f270:	e7e6      	b.n	f240 <z_log_init+0x60>
	uint32_t mask = 0;
    f272:	4605      	mov	r5, r0
				mask |= BIT(i);
    f274:	f04f 0a01 	mov.w	sl, #1
    f278:	e7e4      	b.n	f244 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f27a:	d3d1      	bcc.n	f220 <z_log_init+0x40>
	if (blocking) {
    f27c:	f1b8 0f00 	cmp.w	r8, #0
    f280:	d0cb      	beq.n	f21a <z_log_init+0x3a>
		while (mask) {
    f282:	2d00      	cmp	r5, #0
    f284:	d0c8      	beq.n	f218 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    f286:	4628      	mov	r0, r5
    f288:	f7ff ff78 	bl	f17c <activate_foreach_backend>
    f28c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f28e:	2f00      	cmp	r7, #0
    f290:	d0f7      	beq.n	f282 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    f292:	2100      	movs	r1, #0
    f294:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f298:	f017 fdcc 	bl	26e34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f29c:	e7f1      	b.n	f282 <z_log_init+0xa2>
    f29e:	bf00      	nop
    f2a0:	00031d04 	.word	0x00031d04
    f2a4:	00031cf4 	.word	0x00031cf4
    f2a8:	0003429e 	.word	0x0003429e
    f2ac:	00034271 	.word	0x00034271
    f2b0:	00033bc2 	.word	0x00033bc2
    f2b4:	2000e0e4 	.word	0x2000e0e4
    f2b8:	000342c2 	.word	0x000342c2
    f2bc:	000342e3 	.word	0x000342e3

0000f2c0 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    f2c0:	4801      	ldr	r0, [pc, #4]	; (f2c8 <log_process_thread_timer_expiry_fn+0x8>)
    f2c2:	f015 bf65 	b.w	25190 <z_impl_k_sem_give>
    f2c6:	bf00      	nop
    f2c8:	2000cecc 	.word	0x2000cecc

0000f2cc <log_format_func_t_get>:
}
    f2cc:	4b01      	ldr	r3, [pc, #4]	; (f2d4 <log_format_func_t_get+0x8>)
    f2ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f2d2:	4770      	bx	lr
    f2d4:	00031f64 	.word	0x00031f64

0000f2d8 <log_set_timestamp_func>:
{
    f2d8:	b508      	push	{r3, lr}
    f2da:	4603      	mov	r3, r0
    f2dc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f2de:	b12b      	cbz	r3, f2ec <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    f2e0:	4a04      	ldr	r2, [pc, #16]	; (f2f4 <log_set_timestamp_func+0x1c>)
    f2e2:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    f2e4:	f000 fd92 	bl	fe0c <log_output_timestamp_freq_set>
	return 0;
    f2e8:	2000      	movs	r0, #0
}
    f2ea:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f2ec:	f06f 0015 	mvn.w	r0, #21
    f2f0:	e7fb      	b.n	f2ea <log_set_timestamp_func+0x12>
    f2f2:	bf00      	nop
    f2f4:	2000c820 	.word	0x2000c820

0000f2f8 <z_log_notify_backend_enabled>:
{
    f2f8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    f2fa:	4c04      	ldr	r4, [pc, #16]	; (f30c <z_log_notify_backend_enabled+0x14>)
    f2fc:	7823      	ldrb	r3, [r4, #0]
    f2fe:	b913      	cbnz	r3, f306 <z_log_notify_backend_enabled+0xe>
    f300:	4803      	ldr	r0, [pc, #12]	; (f310 <z_log_notify_backend_enabled+0x18>)
    f302:	f015 ff45 	bl	25190 <z_impl_k_sem_give>
	backend_attached = true;
    f306:	2301      	movs	r3, #1
    f308:	7023      	strb	r3, [r4, #0]
}
    f30a:	bd10      	pop	{r4, pc}
    f30c:	2000ee6f 	.word	0x2000ee6f
    f310:	2000cecc 	.word	0x2000cecc

0000f314 <z_log_dropped>:
{
    f314:	b510      	push	{r4, lr}
    f316:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f318:	4806      	ldr	r0, [pc, #24]	; (f334 <z_log_dropped+0x20>)
    f31a:	f01b fe8a 	bl	2b032 <atomic_inc>
	if (buffered) {
    f31e:	b13c      	cbz	r4, f330 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f320:	4b05      	ldr	r3, [pc, #20]	; (f338 <z_log_dropped+0x24>)
    f322:	e8d3 1fef 	ldaex	r1, [r3]
    f326:	3901      	subs	r1, #1
    f328:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f32c:	2a00      	cmp	r2, #0
    f32e:	d1f8      	bne.n	f322 <z_log_dropped+0xe>
}
    f330:	bd10      	pop	{r4, pc}
    f332:	bf00      	nop
    f334:	2000e0dc 	.word	0x2000e0dc
    f338:	2000e0e0 	.word	0x2000e0e0

0000f33c <z_log_dropped_read_and_clear>:
}
    f33c:	2000      	movs	r0, #0
    f33e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f340:	4b03      	ldr	r3, [pc, #12]	; (f350 <z_log_dropped_read_and_clear+0x14>)
    f342:	e8d3 0fef 	ldaex	r0, [r3]
    f346:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f34a:	2a00      	cmp	r2, #0
    f34c:	d1f9      	bne.n	f342 <z_log_dropped_read_and_clear+0x6>
    f34e:	4770      	bx	lr
    f350:	2000e0dc 	.word	0x2000e0dc

0000f354 <dropped_notify>:
{
    f354:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    f356:	f7ff fff1 	bl	f33c <z_log_dropped_read_and_clear>
    f35a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f35c:	4c0f      	ldr	r4, [pc, #60]	; (f39c <dropped_notify+0x48>)
    f35e:	4e10      	ldr	r6, [pc, #64]	; (f3a0 <dropped_notify+0x4c>)
    f360:	42b4      	cmp	r4, r6
    f362:	d919      	bls.n	f398 <dropped_notify+0x44>
    f364:	490f      	ldr	r1, [pc, #60]	; (f3a4 <dropped_notify+0x50>)
    f366:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    f36a:	4a0f      	ldr	r2, [pc, #60]	; (f3a8 <dropped_notify+0x54>)
    f36c:	480f      	ldr	r0, [pc, #60]	; (f3ac <dropped_notify+0x58>)
    f36e:	f01b fd23 	bl	2adb8 <assert_print>
    f372:	480f      	ldr	r0, [pc, #60]	; (f3b0 <dropped_notify+0x5c>)
    f374:	f01b fd20 	bl	2adb8 <assert_print>
    f378:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f37c:	480a      	ldr	r0, [pc, #40]	; (f3a8 <dropped_notify+0x54>)
    f37e:	f01b fd14 	bl	2adaa <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f382:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f384:	795b      	ldrb	r3, [r3, #5]
    f386:	b12b      	cbz	r3, f394 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    f388:	6823      	ldr	r3, [r4, #0]
    f38a:	685b      	ldr	r3, [r3, #4]
    f38c:	b113      	cbz	r3, f394 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    f38e:	4629      	mov	r1, r5
    f390:	4620      	mov	r0, r4
    f392:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f394:	3410      	adds	r4, #16
    f396:	e7e3      	b.n	f360 <dropped_notify+0xc>
    f398:	d3f3      	bcc.n	f382 <dropped_notify+0x2e>
}
    f39a:	bd70      	pop	{r4, r5, r6, pc}
    f39c:	00031cf4 	.word	0x00031cf4
    f3a0:	00031d04 	.word	0x00031d04
    f3a4:	000342c2 	.word	0x000342c2
    f3a8:	00034271 	.word	0x00034271
    f3ac:	00033bc2 	.word	0x00033bc2
    f3b0:	000342e3 	.word	0x000342e3

0000f3b4 <z_log_msg_init>:
{
    f3b4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    f3b6:	4c04      	ldr	r4, [pc, #16]	; (f3c8 <z_log_msg_init+0x14>)
    f3b8:	4904      	ldr	r1, [pc, #16]	; (f3cc <z_log_msg_init+0x18>)
    f3ba:	4620      	mov	r0, r4
    f3bc:	f7ff fc38 	bl	ec30 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    f3c0:	4b03      	ldr	r3, [pc, #12]	; (f3d0 <z_log_msg_init+0x1c>)
    f3c2:	601c      	str	r4, [r3, #0]
}
    f3c4:	bd10      	pop	{r4, pc}
    f3c6:	bf00      	nop
    f3c8:	2000cd18 	.word	0x2000cd18
    f3cc:	00031f50 	.word	0x00031f50
    f3d0:	2000e0d4 	.word	0x2000e0d4

0000f3d4 <log_core_init>:
{
    f3d4:	b508      	push	{r3, lr}
	panic_mode = false;
    f3d6:	2300      	movs	r3, #0
    f3d8:	4a07      	ldr	r2, [pc, #28]	; (f3f8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    f3da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f3de:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f3e0:	4a06      	ldr	r2, [pc, #24]	; (f3fc <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    f3e2:	4807      	ldr	r0, [pc, #28]	; (f400 <log_core_init+0x2c>)
	dropped_cnt = 0;
    f3e4:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    f3e6:	4a07      	ldr	r2, [pc, #28]	; (f404 <log_core_init+0x30>)
    f3e8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f3ea:	f7ff ff75 	bl	f2d8 <log_set_timestamp_func>
}
    f3ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    f3f2:	f7ff bfdf 	b.w	f3b4 <z_log_msg_init>
    f3f6:	bf00      	nop
    f3f8:	2000ee70 	.word	0x2000ee70
    f3fc:	2000e0dc 	.word	0x2000e0dc
    f400:	0002b02f 	.word	0x0002b02f
    f404:	2000e0e0 	.word	0x2000e0e0

0000f408 <z_log_msg_alloc>:
{
    f408:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    f40a:	2200      	movs	r2, #0
    f40c:	2300      	movs	r3, #0
    f40e:	4801      	ldr	r0, [pc, #4]	; (f414 <z_log_msg_alloc+0xc>)
    f410:	f7ff bc40 	b.w	ec94 <mpsc_pbuf_alloc>
    f414:	2000cd18 	.word	0x2000cd18

0000f418 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    f418:	4801      	ldr	r0, [pc, #4]	; (f420 <z_log_msg_local_claim+0x8>)
    f41a:	f7ff bd51 	b.w	eec0 <mpsc_pbuf_claim>
    f41e:	bf00      	nop
    f420:	2000cd18 	.word	0x2000cd18

0000f424 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    f424:	4b02      	ldr	r3, [pc, #8]	; (f430 <z_log_msg_free+0xc>)
{
    f426:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    f428:	6818      	ldr	r0, [r3, #0]
    f42a:	f7ff bdd1 	b.w	efd0 <mpsc_pbuf_free>
    f42e:	bf00      	nop
    f430:	2000e0d4 	.word	0x2000e0d4

0000f434 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    f434:	4801      	ldr	r0, [pc, #4]	; (f43c <z_log_msg_pending+0x8>)
    f436:	f01b bdc8 	b.w	2afca <mpsc_pbuf_is_pending>
    f43a:	bf00      	nop
    f43c:	2000cd18 	.word	0x2000cd18

0000f440 <z_impl_log_process>:
{
    f440:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    f442:	4b2e      	ldr	r3, [pc, #184]	; (f4fc <z_impl_log_process+0xbc>)
    f444:	7818      	ldrb	r0, [r3, #0]
    f446:	2800      	cmp	r0, #0
    f448:	d057      	beq.n	f4fa <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    f44a:	f7ff ffe5 	bl	f418 <z_log_msg_local_claim>
	if (msg) {
    f44e:	4605      	mov	r5, r0
    f450:	b340      	cbz	r0, f4a4 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f452:	4b2b      	ldr	r3, [pc, #172]	; (f500 <z_impl_log_process+0xc0>)
    f454:	e8d3 1fef 	ldaex	r1, [r3]
    f458:	3901      	subs	r1, #1
    f45a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f45e:	2a00      	cmp	r2, #0
    f460:	d1f8      	bne.n	f454 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f462:	4c28      	ldr	r4, [pc, #160]	; (f504 <z_impl_log_process+0xc4>)
    f464:	4e28      	ldr	r6, [pc, #160]	; (f508 <z_impl_log_process+0xc8>)
    f466:	42b4      	cmp	r4, r6
    f468:	d918      	bls.n	f49c <z_impl_log_process+0x5c>
    f46a:	4928      	ldr	r1, [pc, #160]	; (f50c <z_impl_log_process+0xcc>)
    f46c:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    f470:	4a27      	ldr	r2, [pc, #156]	; (f510 <z_impl_log_process+0xd0>)
    f472:	4828      	ldr	r0, [pc, #160]	; (f514 <z_impl_log_process+0xd4>)
    f474:	f01b fca0 	bl	2adb8 <assert_print>
    f478:	4827      	ldr	r0, [pc, #156]	; (f518 <z_impl_log_process+0xd8>)
    f47a:	f01b fc9d 	bl	2adb8 <assert_print>
    f47e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    f482:	4823      	ldr	r0, [pc, #140]	; (f510 <z_impl_log_process+0xd0>)
    f484:	f01b fc91 	bl	2adaa <assert_post_action>
	return backend->cb->active;
    f488:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f48a:	795b      	ldrb	r3, [r3, #5]
    f48c:	b123      	cbz	r3, f498 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    f48e:	6823      	ldr	r3, [r4, #0]
    f490:	4629      	mov	r1, r5
    f492:	4620      	mov	r0, r4
    f494:	681b      	ldr	r3, [r3, #0]
    f496:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f498:	3410      	adds	r4, #16
    f49a:	e7e4      	b.n	f466 <z_impl_log_process+0x26>
    f49c:	d3f4      	bcc.n	f488 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    f49e:	4628      	mov	r0, r5
    f4a0:	f7ff ffc0 	bl	f424 <z_log_msg_free>
	return dropped_cnt > 0;
    f4a4:	4b1d      	ldr	r3, [pc, #116]	; (f51c <z_impl_log_process+0xdc>)
    f4a6:	4c1e      	ldr	r4, [pc, #120]	; (f520 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    f4a8:	681b      	ldr	r3, [r3, #0]
    f4aa:	2b00      	cmp	r3, #0
    f4ac:	dd19      	ble.n	f4e2 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    f4ae:	f021 f899 	bl	305e4 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    f4b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f4b6:	fba0 0302 	umull	r0, r3, r0, r2
    f4ba:	fb02 3101 	mla	r1, r2, r1, r3
    f4be:	0bc3      	lsrs	r3, r0, #15
    f4c0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    f4c4:	e9d4 2000 	ldrd	r2, r0, [r4]
    f4c8:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    f4ca:	f240 32e9 	movw	r2, #1001	; 0x3e9
    f4ce:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    f4d2:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    f4d6:	4293      	cmp	r3, r2
    f4d8:	f171 0100 	sbcs.w	r1, r1, #0
    f4dc:	d301      	bcc.n	f4e2 <z_impl_log_process+0xa2>
				dropped_notify();
    f4de:	f7ff ff39 	bl	f354 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    f4e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    f4e6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    f4ea:	f142 0200 	adc.w	r2, r2, #0
    f4ee:	e9c4 3200 	strd	r3, r2, [r4]
}
    f4f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    f4f6:	f7ff bf9d 	b.w	f434 <z_log_msg_pending>
}
    f4fa:	bd70      	pop	{r4, r5, r6, pc}
    f4fc:	2000ee6f 	.word	0x2000ee6f
    f500:	2000e0e0 	.word	0x2000e0e0
    f504:	00031cf4 	.word	0x00031cf4
    f508:	00031d04 	.word	0x00031d04
    f50c:	000342c2 	.word	0x000342c2
    f510:	00034271 	.word	0x00034271
    f514:	00033bc2 	.word	0x00033bc2
    f518:	000342e3 	.word	0x000342e3
    f51c:	2000e0dc 	.word	0x2000e0dc
    f520:	2000d648 	.word	0x2000d648

0000f524 <z_impl_log_panic>:
{
    f524:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f526:	4d15      	ldr	r5, [pc, #84]	; (f57c <z_impl_log_panic+0x58>)
    f528:	7829      	ldrb	r1, [r5, #0]
    f52a:	bb29      	cbnz	r1, f578 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    f52c:	2001      	movs	r0, #1
    f52e:	f7ff fe57 	bl	f1e0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f532:	4c13      	ldr	r4, [pc, #76]	; (f580 <z_impl_log_panic+0x5c>)
    f534:	4e13      	ldr	r6, [pc, #76]	; (f584 <z_impl_log_panic+0x60>)
    f536:	42b4      	cmp	r4, r6
    f538:	d917      	bls.n	f56a <z_impl_log_panic+0x46>
    f53a:	4913      	ldr	r1, [pc, #76]	; (f588 <z_impl_log_panic+0x64>)
    f53c:	f240 1387 	movw	r3, #391	; 0x187
    f540:	4a12      	ldr	r2, [pc, #72]	; (f58c <z_impl_log_panic+0x68>)
    f542:	4813      	ldr	r0, [pc, #76]	; (f590 <z_impl_log_panic+0x6c>)
    f544:	f01b fc38 	bl	2adb8 <assert_print>
    f548:	4812      	ldr	r0, [pc, #72]	; (f594 <z_impl_log_panic+0x70>)
    f54a:	f01b fc35 	bl	2adb8 <assert_print>
    f54e:	f240 1187 	movw	r1, #391	; 0x187
    f552:	480e      	ldr	r0, [pc, #56]	; (f58c <z_impl_log_panic+0x68>)
    f554:	f01b fc29 	bl	2adaa <assert_post_action>
	return backend->cb->active;
    f558:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f55a:	795b      	ldrb	r3, [r3, #5]
    f55c:	b11b      	cbz	r3, f566 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    f55e:	6823      	ldr	r3, [r4, #0]
    f560:	4620      	mov	r0, r4
    f562:	689b      	ldr	r3, [r3, #8]
    f564:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f566:	3410      	adds	r4, #16
    f568:	e7e5      	b.n	f536 <z_impl_log_panic+0x12>
    f56a:	d3f5      	bcc.n	f558 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    f56c:	f7ff ff68 	bl	f440 <z_impl_log_process>
		while (log_process() == true) {
    f570:	2800      	cmp	r0, #0
    f572:	d1fb      	bne.n	f56c <z_impl_log_panic+0x48>
	panic_mode = true;
    f574:	2301      	movs	r3, #1
    f576:	702b      	strb	r3, [r5, #0]
}
    f578:	bd70      	pop	{r4, r5, r6, pc}
    f57a:	bf00      	nop
    f57c:	2000ee70 	.word	0x2000ee70
    f580:	00031cf4 	.word	0x00031cf4
    f584:	00031d04 	.word	0x00031d04
    f588:	000342c2 	.word	0x000342c2
    f58c:	00034271 	.word	0x00034271
    f590:	00033bc2 	.word	0x00033bc2
    f594:	000342e3 	.word	0x000342e3

0000f598 <log_process_thread_func>:
{
    f598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    f59c:	4b2f      	ldr	r3, [pc, #188]	; (f65c <log_process_thread_func+0xc4>)
    f59e:	4f30      	ldr	r7, [pc, #192]	; (f660 <log_process_thread_func+0xc8>)
    f5a0:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    f5a2:	091b      	lsrs	r3, r3, #4
    f5a4:	d10b      	bne.n	f5be <log_process_thread_func+0x26>
    f5a6:	492f      	ldr	r1, [pc, #188]	; (f664 <log_process_thread_func+0xcc>)
    f5a8:	f240 335b 	movw	r3, #859	; 0x35b
    f5ac:	4a2e      	ldr	r2, [pc, #184]	; (f668 <log_process_thread_func+0xd0>)
    f5ae:	482f      	ldr	r0, [pc, #188]	; (f66c <log_process_thread_func+0xd4>)
    f5b0:	f01b fc02 	bl	2adb8 <assert_print>
    f5b4:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f5b8:	482b      	ldr	r0, [pc, #172]	; (f668 <log_process_thread_func+0xd0>)
    f5ba:	f01b fbf6 	bl	2adaa <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    f5be:	2100      	movs	r1, #0
    f5c0:	4608      	mov	r0, r1
    f5c2:	f7ff fe0d 	bl	f1e0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    f5c6:	4604      	mov	r4, r0
    f5c8:	b340      	cbz	r0, f61c <log_process_thread_func+0x84>
    f5ca:	f240 6867 	movw	r8, #1639	; 0x667
    f5ce:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    f5d2:	f017 fc63 	bl	26e9c <z_impl_z_current_get>
	proc_tid = process_tid;
    f5d6:	4b26      	ldr	r3, [pc, #152]	; (f670 <log_process_thread_func+0xd8>)
    f5d8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f5da:	b130      	cbz	r0, f5ea <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    f5dc:	4b25      	ldr	r3, [pc, #148]	; (f674 <log_process_thread_func+0xdc>)
	    process_tid &&
    f5de:	681b      	ldr	r3, [r3, #0]
    f5e0:	2b09      	cmp	r3, #9
    f5e2:	dd02      	ble.n	f5ea <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    f5e4:	4824      	ldr	r0, [pc, #144]	; (f678 <log_process_thread_func+0xe0>)
    f5e6:	f015 fdd3 	bl	25190 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    f5ea:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    f5ec:	f8df a088 	ldr.w	sl, [pc, #136]	; f678 <log_process_thread_func+0xe0>
		if (activate_mask) {
    f5f0:	b144      	cbz	r4, f604 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    f5f2:	4620      	mov	r0, r4
    f5f4:	f7ff fdc2 	bl	f17c <activate_foreach_backend>
			if (!activate_mask) {
    f5f8:	4604      	mov	r4, r0
    f5fa:	b918      	cbnz	r0, f604 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    f5fc:	f04f 38ff 	mov.w	r8, #4294967295
    f600:	f04f 39ff 	mov.w	r9, #4294967295
    f604:	f7ff ff1c 	bl	f440 <z_impl_log_process>
		if (log_process() == false) {
    f608:	4606      	mov	r6, r0
    f60a:	b928      	cbnz	r0, f618 <log_process_thread_func+0x80>
			if (processed_any) {
    f60c:	b95d      	cbnz	r5, f626 <log_process_thread_func+0x8e>
    f60e:	4642      	mov	r2, r8
    f610:	464b      	mov	r3, r9
    f612:	4650      	mov	r0, sl
    f614:	f015 fe00 	bl	25218 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    f618:	4635      	mov	r5, r6
    f61a:	e7e9      	b.n	f5f0 <log_process_thread_func+0x58>
    f61c:	f04f 38ff 	mov.w	r8, #4294967295
    f620:	f04f 39ff 	mov.w	r9, #4294967295
    f624:	e7d5      	b.n	f5d2 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f626:	4d0d      	ldr	r5, [pc, #52]	; (f65c <log_process_thread_func+0xc4>)
    f628:	e008      	b.n	f63c <log_process_thread_func+0xa4>
    f62a:	d2f0      	bcs.n	f60e <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    f62c:	682b      	ldr	r3, [r5, #0]
    f62e:	699b      	ldr	r3, [r3, #24]
    f630:	b11b      	cbz	r3, f63a <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    f632:	2200      	movs	r2, #0
    f634:	4628      	mov	r0, r5
    f636:	4611      	mov	r1, r2
    f638:	4798      	blx	r3
    f63a:	3510      	adds	r5, #16
    f63c:	42bd      	cmp	r5, r7
    f63e:	d9f4      	bls.n	f62a <log_process_thread_func+0x92>
    f640:	490e      	ldr	r1, [pc, #56]	; (f67c <log_process_thread_func+0xe4>)
    f642:	f240 334f 	movw	r3, #847	; 0x34f
    f646:	4a08      	ldr	r2, [pc, #32]	; (f668 <log_process_thread_func+0xd0>)
    f648:	4808      	ldr	r0, [pc, #32]	; (f66c <log_process_thread_func+0xd4>)
    f64a:	f01b fbb5 	bl	2adb8 <assert_print>
    f64e:	480c      	ldr	r0, [pc, #48]	; (f680 <log_process_thread_func+0xe8>)
    f650:	f01b fbb2 	bl	2adb8 <assert_print>
    f654:	f240 314f 	movw	r1, #847	; 0x34f
    f658:	e7ae      	b.n	f5b8 <log_process_thread_func+0x20>
    f65a:	bf00      	nop
    f65c:	00031cf4 	.word	0x00031cf4
    f660:	00031d04 	.word	0x00031d04
    f664:	00034302 	.word	0x00034302
    f668:	00034271 	.word	0x00034271
    f66c:	00033bc2 	.word	0x00033bc2
    f670:	2000e0d8 	.word	0x2000e0d8
    f674:	2000e0e0 	.word	0x2000e0e0
    f678:	2000cecc 	.word	0x2000cecc
    f67c:	000342c2 	.word	0x000342c2
    f680:	000342e3 	.word	0x000342e3

0000f684 <z_log_msg_post_finalize>:
{
    f684:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    f686:	482b      	ldr	r0, [pc, #172]	; (f734 <z_log_msg_post_finalize+0xb0>)
    f688:	f01b fcd3 	bl	2b032 <atomic_inc>
	if (panic_mode) {
    f68c:	4b2a      	ldr	r3, [pc, #168]	; (f738 <z_log_msg_post_finalize+0xb4>)
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	2b00      	cmp	r3, #0
    f692:	d034      	beq.n	f6fe <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    f694:	f04f 0320 	mov.w	r3, #32
    f698:	f3ef 8411 	mrs	r4, BASEPRI
    f69c:	f383 8812 	msr	BASEPRI_MAX, r3
    f6a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f6a4:	4825      	ldr	r0, [pc, #148]	; (f73c <z_log_msg_post_finalize+0xb8>)
    f6a6:	f015 fabb 	bl	24c20 <z_spin_lock_valid>
    f6aa:	b968      	cbnz	r0, f6c8 <z_log_msg_post_finalize+0x44>
    f6ac:	2394      	movs	r3, #148	; 0x94
    f6ae:	4a24      	ldr	r2, [pc, #144]	; (f740 <z_log_msg_post_finalize+0xbc>)
    f6b0:	4924      	ldr	r1, [pc, #144]	; (f744 <z_log_msg_post_finalize+0xc0>)
    f6b2:	4825      	ldr	r0, [pc, #148]	; (f748 <z_log_msg_post_finalize+0xc4>)
    f6b4:	f01b fb80 	bl	2adb8 <assert_print>
    f6b8:	4920      	ldr	r1, [pc, #128]	; (f73c <z_log_msg_post_finalize+0xb8>)
    f6ba:	4824      	ldr	r0, [pc, #144]	; (f74c <z_log_msg_post_finalize+0xc8>)
    f6bc:	f01b fb7c 	bl	2adb8 <assert_print>
    f6c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f6c2:	481f      	ldr	r0, [pc, #124]	; (f740 <z_log_msg_post_finalize+0xbc>)
    f6c4:	f01b fb71 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
    f6c8:	481c      	ldr	r0, [pc, #112]	; (f73c <z_log_msg_post_finalize+0xb8>)
    f6ca:	f015 fac5 	bl	24c58 <z_spin_lock_set_owner>
    f6ce:	f7ff feb7 	bl	f440 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f6d2:	481a      	ldr	r0, [pc, #104]	; (f73c <z_log_msg_post_finalize+0xb8>)
    f6d4:	f015 fab2 	bl	24c3c <z_spin_unlock_valid>
    f6d8:	b958      	cbnz	r0, f6f2 <z_log_msg_post_finalize+0x6e>
    f6da:	23c2      	movs	r3, #194	; 0xc2
    f6dc:	4a18      	ldr	r2, [pc, #96]	; (f740 <z_log_msg_post_finalize+0xbc>)
    f6de:	491c      	ldr	r1, [pc, #112]	; (f750 <z_log_msg_post_finalize+0xcc>)
    f6e0:	4819      	ldr	r0, [pc, #100]	; (f748 <z_log_msg_post_finalize+0xc4>)
    f6e2:	f01b fb69 	bl	2adb8 <assert_print>
    f6e6:	4915      	ldr	r1, [pc, #84]	; (f73c <z_log_msg_post_finalize+0xb8>)
    f6e8:	481a      	ldr	r0, [pc, #104]	; (f754 <z_log_msg_post_finalize+0xd0>)
    f6ea:	f01b fb65 	bl	2adb8 <assert_print>
    f6ee:	21c2      	movs	r1, #194	; 0xc2
    f6f0:	e7e7      	b.n	f6c2 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    f6f2:	f384 8811 	msr	BASEPRI, r4
    f6f6:	f3bf 8f6f 	isb	sy
}
    f6fa:	b002      	add	sp, #8
    f6fc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    f6fe:	4b16      	ldr	r3, [pc, #88]	; (f758 <z_log_msg_post_finalize+0xd4>)
    f700:	681b      	ldr	r3, [r3, #0]
    f702:	2b00      	cmp	r3, #0
    f704:	d0f9      	beq.n	f6fa <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    f706:	b950      	cbnz	r0, f71e <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    f708:	2200      	movs	r2, #0
    f70a:	2300      	movs	r3, #0
    f70c:	4813      	ldr	r0, [pc, #76]	; (f75c <z_log_msg_post_finalize+0xd8>)
    f70e:	e9cd 2300 	strd	r2, r3, [sp]
    f712:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    f716:	2300      	movs	r3, #0
    f718:	f018 f864 	bl	277e4 <z_impl_k_timer_start>
    f71c:	e7ed      	b.n	f6fa <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f71e:	280a      	cmp	r0, #10
    f720:	d1eb      	bne.n	f6fa <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    f722:	480e      	ldr	r0, [pc, #56]	; (f75c <z_log_msg_post_finalize+0xd8>)
    f724:	f020 ff92 	bl	3064c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    f728:	480d      	ldr	r0, [pc, #52]	; (f760 <z_log_msg_post_finalize+0xdc>)
}
    f72a:	b002      	add	sp, #8
    f72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f730:	f015 bd2e 	b.w	25190 <z_impl_k_sem_give>
    f734:	2000e0e0 	.word	0x2000e0e0
    f738:	2000ee70 	.word	0x2000ee70
    f73c:	2000e0d0 	.word	0x2000e0d0
    f740:	000340d9 	.word	0x000340d9
    f744:	00034132 	.word	0x00034132
    f748:	00033bc2 	.word	0x00033bc2
    f74c:	00034147 	.word	0x00034147
    f750:	00034106 	.word	0x00034106
    f754:	0003411d 	.word	0x0003411d
    f758:	2000e0d8 	.word	0x2000e0d8
    f75c:	2000d650 	.word	0x2000d650
    f760:	2000cecc 	.word	0x2000cecc

0000f764 <z_log_msg_commit>:
{
    f764:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    f766:	4b06      	ldr	r3, [pc, #24]	; (f780 <z_log_msg_commit+0x1c>)
{
    f768:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    f76a:	681b      	ldr	r3, [r3, #0]
    f76c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    f76e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    f770:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    f772:	4804      	ldr	r0, [pc, #16]	; (f784 <z_log_msg_commit+0x20>)
    f774:	f7ff fb4e 	bl	ee14 <mpsc_pbuf_commit>
}
    f778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    f77c:	f7ff bf82 	b.w	f684 <z_log_msg_post_finalize>
    f780:	2000c820 	.word	0x2000c820
    f784:	2000cd18 	.word	0x2000cd18

0000f788 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f788:	4a04      	ldr	r2, [pc, #16]	; (f79c <log_source_name_get+0x14>)
    f78a:	4b05      	ldr	r3, [pc, #20]	; (f7a0 <log_source_name_get+0x18>)
    f78c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f78e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f792:	bf34      	ite	cc
    f794:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f798:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f79a:	4770      	bx	lr
    f79c:	00031b54 	.word	0x00031b54
    f7a0:	00031cf4 	.word	0x00031cf4

0000f7a4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f7a4:	4b0e      	ldr	r3, [pc, #56]	; (f7e0 <log_backend_enable+0x3c>)
{
    f7a6:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    f7a8:	1ac3      	subs	r3, r0, r3
    f7aa:	111b      	asrs	r3, r3, #4
    f7ac:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f7ae:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    f7b0:	b948      	cbnz	r0, f7c6 <log_backend_enable+0x22>
    f7b2:	490c      	ldr	r1, [pc, #48]	; (f7e4 <log_backend_enable+0x40>)
    f7b4:	480c      	ldr	r0, [pc, #48]	; (f7e8 <log_backend_enable+0x44>)
    f7b6:	23de      	movs	r3, #222	; 0xde
    f7b8:	4a0c      	ldr	r2, [pc, #48]	; (f7ec <log_backend_enable+0x48>)
    f7ba:	f01b fafd 	bl	2adb8 <assert_print>
    f7be:	21de      	movs	r1, #222	; 0xde
    f7c0:	480a      	ldr	r0, [pc, #40]	; (f7ec <log_backend_enable+0x48>)
    f7c2:	f01b faf2 	bl	2adaa <assert_post_action>
	backend->cb->id = id;
    f7c6:	6844      	ldr	r4, [r0, #4]
    f7c8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f7ca:	6843      	ldr	r3, [r0, #4]
    f7cc:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f7ce:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f7d0:	6843      	ldr	r3, [r0, #4]
    f7d2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f7d4:	6843      	ldr	r3, [r0, #4]
    f7d6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    f7dc:	f7ff bd8c 	b.w	f2f8 <z_log_notify_backend_enabled>
    f7e0:	00031cf4 	.word	0x00031cf4
    f7e4:	000343a2 	.word	0x000343a2
    f7e8:	00033bc2 	.word	0x00033bc2
    f7ec:	0003436a 	.word	0x0003436a

0000f7f0 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7f4:	b08f      	sub	sp, #60	; 0x3c
    f7f6:	f3c1 284a 	ubfx	r8, r1, #9, #11
    f7fa:	af04      	add	r7, sp, #16
    f7fc:	460d      	mov	r5, r1
    f7fe:	4691      	mov	r9, r2
    f800:	60b8      	str	r0, [r7, #8]
    f802:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    f804:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    f806:	f1b8 0f00 	cmp.w	r8, #0
    f80a:	d068      	beq.n	f8de <z_impl_z_log_msg_static_create+0xee>
	struct z_cbprintf_buf_desc buf_desc = {
    f80c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    f80e:	f04f 0b04 	mov.w	fp, #4
    f812:	f04f 0a0a 	mov.w	sl, #10
    f816:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    f81a:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    f81e:	e9c7 6607 	strd	r6, r6, [r7, #28]
    f822:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    f824:	9301      	str	r3, [sp, #4]
    f826:	f8cd b008 	str.w	fp, [sp, #8]
    f82a:	f8cd a000 	str.w	sl, [sp]
    f82e:	f107 031c 	add.w	r3, r7, #28
    f832:	4632      	mov	r2, r6
    f834:	4648      	mov	r0, r9
    f836:	68f9      	ldr	r1, [r7, #12]
    f838:	f7fd fe0e 	bl	d458 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    f83c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    f840:	4603      	mov	r3, r0
    f842:	d31e      	bcc.n	f882 <z_impl_z_log_msg_static_create+0x92>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    f844:	466c      	mov	r4, sp
    f846:	b08a      	sub	sp, #40	; 0x28
    f848:	f8d9 1004 	ldr.w	r1, [r9, #4]
    f84c:	ab04      	add	r3, sp, #16
    f84e:	482c      	ldr	r0, [pc, #176]	; (f900 <z_impl_z_log_msg_static_create+0x110>)
    f850:	461a      	mov	r2, r3
    f852:	6158      	str	r0, [r3, #20]
    f854:	482b      	ldr	r0, [pc, #172]	; (f904 <z_impl_z_log_msg_static_create+0x114>)
    f856:	e9c3 0106 	strd	r0, r1, [r3, #24]
    f85a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    f85e:	6219      	str	r1, [r3, #32]
    f860:	f240 3101 	movw	r1, #769	; 0x301
    f864:	8499      	strh	r1, [r3, #36]	; 0x24
    f866:	4b28      	ldr	r3, [pc, #160]	; (f908 <z_impl_z_log_msg_static_create+0x118>)
    f868:	f842 3f10 	str.w	r3, [r2, #16]!
    f86c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    f870:	4633      	mov	r3, r6
    f872:	4826      	ldr	r0, [pc, #152]	; (f90c <z_impl_z_log_msg_static_create+0x11c>)
    f874:	f7ff ffbc 	bl	f7f0 <z_impl_z_log_msg_static_create>
    f878:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    f87a:	372c      	adds	r7, #44	; 0x2c
    f87c:	46bd      	mov	sp, r7
    f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    f882:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    f886:	f104 0017 	add.w	r0, r4, #23
    f88a:	4418      	add	r0, r3
    f88c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    f890:	0880      	lsrs	r0, r0, #2
    f892:	603b      	str	r3, [r7, #0]
    f894:	f7ff fdb8 	bl	f408 <z_log_msg_alloc>
    f898:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    f89c:	4604      	mov	r4, r0
    f89e:	b330      	cbz	r0, f8ee <z_impl_z_log_msg_static_create+0xfe>
	struct z_cbprintf_buf_desc buf_desc = {
    f8a0:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    f8a2:	f100 0110 	add.w	r1, r0, #16
    f8a6:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    f8aa:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    f8ae:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    f8b0:	e9cd a300 	strd	sl, r3, [sp]
    f8b4:	f8cd b008 	str.w	fp, [sp, #8]
    f8b8:	4648      	mov	r0, r9
    f8ba:	4a15      	ldr	r2, [pc, #84]	; (f910 <z_impl_z_log_msg_static_create+0x120>)
    f8bc:	68f9      	ldr	r1, [r7, #12]
    f8be:	f107 031c 	add.w	r3, r7, #28
    f8c2:	f7fd fdc9 	bl	d458 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
    f8c6:	2800      	cmp	r0, #0
    f8c8:	da11      	bge.n	f8ee <z_impl_z_log_msg_static_create+0xfe>
    f8ca:	4912      	ldr	r1, [pc, #72]	; (f914 <z_impl_z_log_msg_static_create+0x124>)
    f8cc:	4812      	ldr	r0, [pc, #72]	; (f918 <z_impl_z_log_msg_static_create+0x128>)
    f8ce:	2356      	movs	r3, #86	; 0x56
    f8d0:	4a12      	ldr	r2, [pc, #72]	; (f91c <z_impl_z_log_msg_static_create+0x12c>)
    f8d2:	f01b fa71 	bl	2adb8 <assert_print>
    f8d6:	2156      	movs	r1, #86	; 0x56
    f8d8:	4810      	ldr	r0, [pc, #64]	; (f91c <z_impl_z_log_msg_static_create+0x12c>)
    f8da:	f01b fa66 	bl	2adaa <assert_post_action>
    f8de:	f104 0017 	add.w	r0, r4, #23
    f8e2:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    f8e6:	0880      	lsrs	r0, r0, #2
    f8e8:	f7ff fd8e 	bl	f408 <z_log_msg_alloc>
    f8ec:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
    f8ee:	f368 2553 	bfi	r5, r8, #9, #11
    f8f2:	462a      	mov	r2, r5
    f8f4:	4620      	mov	r0, r4
    f8f6:	687b      	ldr	r3, [r7, #4]
    f8f8:	68b9      	ldr	r1, [r7, #8]
    f8fa:	f01b fbcc 	bl	2b096 <z_log_msg_finalize>
    f8fe:	e7bc      	b.n	f87a <z_impl_z_log_msg_static_create+0x8a>
    f900:	000343c2 	.word	0x000343c2
    f904:	0003443b 	.word	0x0003443b
    f908:	01000005 	.word	0x01000005
    f90c:	00031c04 	.word	0x00031c04
    f910:	0002b06b 	.word	0x0002b06b
    f914:	00034432 	.word	0x00034432
    f918:	00033bc2 	.word	0x00033bc2
    f91c:	00034405 	.word	0x00034405

0000f920 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f924:	b087      	sub	sp, #28
    f926:	4604      	mov	r4, r0
    f928:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    f92c:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    f930:	460f      	mov	r7, r1
    f932:	4693      	mov	fp, r2
    f934:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    f936:	b1ae      	cbz	r6, f964 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    f938:	2110      	movs	r1, #16
    f93a:	4633      	mov	r3, r6
    f93c:	4652      	mov	r2, sl
    f93e:	2000      	movs	r0, #0
    f940:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    f944:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    f948:	f7fd fb68 	bl	d01c <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    f94c:	1e01      	subs	r1, r0, #0
    f94e:	da0a      	bge.n	f966 <z_impl_z_log_msg_runtime_vcreate+0x46>
    f950:	491f      	ldr	r1, [pc, #124]	; (f9d0 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    f952:	2375      	movs	r3, #117	; 0x75
    f954:	4a1f      	ldr	r2, [pc, #124]	; (f9d4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f956:	4820      	ldr	r0, [pc, #128]	; (f9d8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f958:	f01b fa2e 	bl	2adb8 <assert_print>
    f95c:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    f95e:	481d      	ldr	r0, [pc, #116]	; (f9d4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f960:	f01b fa23 	bl	2adaa <assert_post_action>
		plen = 0;
    f964:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    f966:	f105 0017 	add.w	r0, r5, #23
    f96a:	4408      	add	r0, r1
	struct log_msg_desc desc =
    f96c:	4b1b      	ldr	r3, [pc, #108]	; (f9dc <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    f96e:	f004 0407 	and.w	r4, r4, #7
    f972:	f00b 0b07 	and.w	fp, fp, #7
    f976:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    f978:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    f97c:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    f980:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
    f984:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    f986:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    f988:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    f98a:	f7ff fd3d 	bl	f408 <z_log_msg_alloc>
	struct log_msg_desc desc =
    f98e:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
    f992:	4605      	mov	r5, r0
    f994:	b190      	cbz	r0, f9bc <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
    f996:	b18e      	cbz	r6, f9bc <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f998:	4633      	mov	r3, r6
    f99a:	4652      	mov	r2, sl
    f99c:	9903      	ldr	r1, [sp, #12]
    f99e:	f8cd 9000 	str.w	r9, [sp]
    f9a2:	3010      	adds	r0, #16
    f9a4:	f7fd fb3a 	bl	d01c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    f9a8:	2800      	cmp	r0, #0
    f9aa:	da07      	bge.n	f9bc <z_impl_z_log_msg_runtime_vcreate+0x9c>
    f9ac:	4908      	ldr	r1, [pc, #32]	; (f9d0 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    f9ae:	238f      	movs	r3, #143	; 0x8f
    f9b0:	4a08      	ldr	r2, [pc, #32]	; (f9d4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f9b2:	4809      	ldr	r0, [pc, #36]	; (f9d8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f9b4:	f01b fa00 	bl	2adb8 <assert_print>
    f9b8:	218f      	movs	r1, #143	; 0x8f
    f9ba:	e7d0      	b.n	f95e <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f9bc:	4643      	mov	r3, r8
    f9be:	4622      	mov	r2, r4
    f9c0:	4639      	mov	r1, r7
    f9c2:	4628      	mov	r0, r5
	}
}
    f9c4:	b007      	add	sp, #28
    f9c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    f9ca:	f01b bb64 	b.w	2b096 <z_log_msg_finalize>
    f9ce:	bf00      	nop
    f9d0:	00034431 	.word	0x00034431
    f9d4:	00034405 	.word	0x00034405
    f9d8:	00033bc2 	.word	0x00033bc2
    f9dc:	000ffe00 	.word	0x000ffe00

0000f9e0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f9e0:	b40e      	push	{r1, r2, r3}
    f9e2:	b503      	push	{r0, r1, lr}
    f9e4:	ab03      	add	r3, sp, #12
    f9e6:	f853 2b04 	ldr.w	r2, [r3], #4
    f9ea:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f9ec:	4804      	ldr	r0, [pc, #16]	; (fa00 <print_formatted+0x20>)
	va_start(args, fmt);
    f9ee:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f9f0:	f01b fb77 	bl	2b0e2 <cbvprintf>
	va_end(args);

	return length;
}
    f9f4:	b002      	add	sp, #8
    f9f6:	f85d eb04 	ldr.w	lr, [sp], #4
    f9fa:	b003      	add	sp, #12
    f9fc:	4770      	bx	lr
    f9fe:	bf00      	nop
    fa00:	0000fa21 	.word	0x0000fa21

0000fa04 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    fa04:	06ca      	lsls	r2, r1, #27
    fa06:	d405      	bmi.n	fa14 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    fa08:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    fa0a:	bf4c      	ite	mi
    fa0c:	4902      	ldrmi	r1, [pc, #8]	; (fa18 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    fa0e:	4903      	ldrpl	r1, [pc, #12]	; (fa1c <newline_print+0x18>)
    fa10:	f7ff bfe6 	b.w	f9e0 <print_formatted>
	}
}
    fa14:	4770      	bx	lr
    fa16:	bf00      	nop
    fa18:	00034663 	.word	0x00034663
    fa1c:	0003a43b 	.word	0x0003a43b

0000fa20 <out_func>:
{
    fa20:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    fa22:	684b      	ldr	r3, [r1, #4]
{
    fa24:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    fa26:	681a      	ldr	r2, [r3, #0]
    fa28:	68cb      	ldr	r3, [r1, #12]
{
    fa2a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    fa2c:	429a      	cmp	r2, r3
    fa2e:	d102      	bne.n	fa36 <out_func+0x16>
		log_output_flush(out_ctx);
    fa30:	4608      	mov	r0, r1
    fa32:	f01b fb5d 	bl	2b0f0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fa36:	6863      	ldr	r3, [r4, #4]
    fa38:	e8d3 2fef 	ldaex	r2, [r3]
    fa3c:	1c51      	adds	r1, r2, #1
    fa3e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    fa42:	2800      	cmp	r0, #0
    fa44:	d1f8      	bne.n	fa38 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    fa46:	68a3      	ldr	r3, [r4, #8]
    fa48:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    fa4a:	6863      	ldr	r3, [r4, #4]
    fa4c:	681a      	ldr	r2, [r3, #0]
    fa4e:	68e3      	ldr	r3, [r4, #12]
    fa50:	429a      	cmp	r2, r3
    fa52:	d909      	bls.n	fa68 <out_func+0x48>
    fa54:	4905      	ldr	r1, [pc, #20]	; (fa6c <out_func+0x4c>)
    fa56:	4806      	ldr	r0, [pc, #24]	; (fa70 <out_func+0x50>)
    fa58:	237a      	movs	r3, #122	; 0x7a
    fa5a:	4a06      	ldr	r2, [pc, #24]	; (fa74 <out_func+0x54>)
    fa5c:	f01b f9ac 	bl	2adb8 <assert_print>
    fa60:	217a      	movs	r1, #122	; 0x7a
    fa62:	4804      	ldr	r0, [pc, #16]	; (fa74 <out_func+0x54>)
    fa64:	f01b f9a1 	bl	2adaa <assert_post_action>
}
    fa68:	2000      	movs	r0, #0
    fa6a:	bd38      	pop	{r3, r4, r5, pc}
    fa6c:	00034489 	.word	0x00034489
    fa70:	00033bc2 	.word	0x00033bc2
    fa74:	0003445a 	.word	0x0003445a

0000fa78 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa7c:	b089      	sub	sp, #36	; 0x24
    fa7e:	469a      	mov	sl, r3
    fa80:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    fa84:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    fa88:	9305      	str	r3, [sp, #20]
    fa8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fa8c:	4604      	mov	r4, r0
    fa8e:	460d      	mov	r5, r1
    fa90:	9e16      	ldr	r6, [sp, #88]	; 0x58
    fa92:	9206      	str	r2, [sp, #24]
    fa94:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    fa96:	f1bb 0f00 	cmp.w	fp, #0
    fa9a:	f000 8085 	beq.w	fba8 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    fa9e:	f006 0308 	and.w	r3, r6, #8
    faa2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    faa4:	f01b fadf 	bl	2b066 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    faa8:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    faac:	4602      	mov	r2, r0
    faae:	2800      	cmp	r0, #0
    fab0:	d049      	beq.n	fb46 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    fab2:	4620      	mov	r0, r4
    fab4:	498c      	ldr	r1, [pc, #560]	; (fce8 <log_output_process+0x270>)
    fab6:	f7ff ff93 	bl	f9e0 <print_formatted>
    faba:	4680      	mov	r8, r0
	if (stamp) {
    fabc:	f1b9 0f00 	cmp.w	r9, #0
    fac0:	d008      	beq.n	fad4 <log_output_process+0x5c>
	if (!format) {
    fac2:	f016 0f44 	tst.w	r6, #68	; 0x44
    fac6:	d140      	bne.n	fb4a <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    fac8:	462a      	mov	r2, r5
    faca:	4620      	mov	r0, r4
    facc:	4987      	ldr	r1, [pc, #540]	; (fcec <log_output_process+0x274>)
    face:	f7ff ff87 	bl	f9e0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    fad2:	4480      	add	r8, r0
	if (color) {
    fad4:	f006 0301 	and.w	r3, r6, #1
    fad8:	b153      	cbz	r3, faf0 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    fada:	4b85      	ldr	r3, [pc, #532]	; (fcf0 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    fadc:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    fade:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    fae2:	4b84      	ldr	r3, [pc, #528]	; (fcf4 <log_output_process+0x27c>)
    fae4:	4984      	ldr	r1, [pc, #528]	; (fcf8 <log_output_process+0x280>)
    fae6:	2a00      	cmp	r2, #0
    fae8:	bf08      	it	eq
    faea:	461a      	moveq	r2, r3
    faec:	f7ff ff78 	bl	f9e0 <print_formatted>
	if (level_on) {
    faf0:	f006 0308 	and.w	r3, r6, #8
    faf4:	2b00      	cmp	r3, #0
    faf6:	d054      	beq.n	fba2 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    faf8:	4b80      	ldr	r3, [pc, #512]	; (fcfc <log_output_process+0x284>)
    fafa:	4620      	mov	r0, r4
    fafc:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    fb00:	497f      	ldr	r1, [pc, #508]	; (fd00 <log_output_process+0x288>)
    fb02:	f7ff ff6d 	bl	f9e0 <print_formatted>
    fb06:	4605      	mov	r5, r0
	if (domain) {
    fb08:	9b06      	ldr	r3, [sp, #24]
    fb0a:	b12b      	cbz	r3, fb18 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    fb0c:	461a      	mov	r2, r3
    fb0e:	4620      	mov	r0, r4
    fb10:	497c      	ldr	r1, [pc, #496]	; (fd04 <log_output_process+0x28c>)
    fb12:	f7ff ff65 	bl	f9e0 <print_formatted>
    fb16:	4405      	add	r5, r0
	if (source) {
    fb18:	f1ba 0f00 	cmp.w	sl, #0
    fb1c:	d005      	beq.n	fb2a <log_output_process+0xb2>
		total += print_formatted(output,
    fb1e:	4652      	mov	r2, sl
    fb20:	4620      	mov	r0, r4
    fb22:	4979      	ldr	r1, [pc, #484]	; (fd08 <log_output_process+0x290>)
    fb24:	f7ff ff5c 	bl	f9e0 <print_formatted>
    fb28:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    fb2a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    fb2c:	2f00      	cmp	r7, #0
    fb2e:	d149      	bne.n	fbc4 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    fb30:	9b04      	ldr	r3, [sp, #16]
    fb32:	2b00      	cmp	r3, #0
    fb34:	d160      	bne.n	fbf8 <log_output_process+0x180>
	if (color) {
    fb36:	07f3      	lsls	r3, r6, #31
    fb38:	f100 80cf 	bmi.w	fcda <log_output_process+0x262>
	newline_print(output, flags);
    fb3c:	4631      	mov	r1, r6
    fb3e:	4620      	mov	r0, r4
    fb40:	f7ff ff60 	bl	fa04 <newline_print>
}
    fb44:	e0c3      	b.n	fcce <log_output_process+0x256>
	uint32_t length = 0U;
    fb46:	4680      	mov	r8, r0
    fb48:	e7b8      	b.n	fabc <log_output_process+0x44>
	} else if (freq != 0U) {
    fb4a:	4b70      	ldr	r3, [pc, #448]	; (fd0c <log_output_process+0x294>)
    fb4c:	6818      	ldr	r0, [r3, #0]
    fb4e:	2800      	cmp	r0, #0
    fb50:	d0bf      	beq.n	fad2 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    fb52:	4b6f      	ldr	r3, [pc, #444]	; (fd10 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    fb54:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    fb58:	681b      	ldr	r3, [r3, #0]
    fb5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    fb5e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    fb62:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    fb66:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    fb6a:	fb09 f505 	mul.w	r5, r9, r5
    fb6e:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    fb72:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    fb76:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    fb7a:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    fb7e:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    fb82:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    fb86:	fb09 f505 	mul.w	r5, r9, r5
    fb8a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    fb8e:	fb0c 1113 	mls	r1, ip, r3, r1
    fb92:	4620      	mov	r0, r4
    fb94:	9100      	str	r1, [sp, #0]
    fb96:	e9cd e501 	strd	lr, r5, [sp, #4]
    fb9a:	495e      	ldr	r1, [pc, #376]	; (fd14 <log_output_process+0x29c>)
    fb9c:	f7ff ff20 	bl	f9e0 <print_formatted>
    fba0:	e797      	b.n	fad2 <log_output_process+0x5a>
	int total = 0;
    fba2:	f006 0508 	and.w	r5, r6, #8
    fba6:	e7af      	b.n	fb08 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    fba8:	f1ba 0f01 	cmp.w	sl, #1
    fbac:	d106      	bne.n	fbbc <log_output_process+0x144>
	if (package) {
    fbae:	b9ef      	cbnz	r7, fbec <log_output_process+0x174>
	if (data_len) {
    fbb0:	9b04      	ldr	r3, [sp, #16]
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	f000 808b 	beq.w	fcce <log_output_process+0x256>
		prefix_offset = 0;
    fbb8:	2500      	movs	r5, #0
    fbba:	e01d      	b.n	fbf8 <log_output_process+0x180>
	if (package) {
    fbbc:	2f00      	cmp	r7, #0
    fbbe:	d0f7      	beq.n	fbb0 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    fbc0:	4855      	ldr	r0, [pc, #340]	; (fd18 <log_output_process+0x2a0>)
    fbc2:	e014      	b.n	fbee <log_output_process+0x176>
		cb = out_func;
    fbc4:	4855      	ldr	r0, [pc, #340]	; (fd1c <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    fbc6:	463b      	mov	r3, r7
    fbc8:	4622      	mov	r2, r4
    fbca:	4955      	ldr	r1, [pc, #340]	; (fd20 <log_output_process+0x2a8>)
    fbcc:	f01a fe9b 	bl	2a906 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    fbd0:	2800      	cmp	r0, #0
    fbd2:	da0e      	bge.n	fbf2 <log_output_process+0x17a>
    fbd4:	4953      	ldr	r1, [pc, #332]	; (fd24 <log_output_process+0x2ac>)
    fbd6:	4854      	ldr	r0, [pc, #336]	; (fd28 <log_output_process+0x2b0>)
    fbd8:	f44f 7302 	mov.w	r3, #520	; 0x208
    fbdc:	4a53      	ldr	r2, [pc, #332]	; (fd2c <log_output_process+0x2b4>)
    fbde:	f01b f8eb 	bl	2adb8 <assert_print>
    fbe2:	f44f 7102 	mov.w	r1, #520	; 0x208
    fbe6:	4851      	ldr	r0, [pc, #324]	; (fd2c <log_output_process+0x2b4>)
    fbe8:	f01b f8df 	bl	2adaa <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    fbec:	484b      	ldr	r0, [pc, #300]	; (fd1c <log_output_process+0x2a4>)
		prefix_offset = 0;
    fbee:	465d      	mov	r5, fp
    fbf0:	e7e9      	b.n	fbc6 <log_output_process+0x14e>
	if (data_len) {
    fbf2:	9b04      	ldr	r3, [sp, #16]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d066      	beq.n	fcc6 <log_output_process+0x24e>
		print_formatted(output, " ");
    fbf8:	f8df 8134 	ldr.w	r8, [pc, #308]	; fd30 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    fbfc:	f8df 9134 	ldr.w	r9, [pc, #308]	; fd34 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    fc00:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    fc02:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    fc04:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    fc06:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    fc08:	bf28      	it	cs
    fc0a:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    fc0c:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    fc10:	f7ff fef8 	bl	fa04 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    fc14:	4555      	cmp	r5, sl
    fc16:	dc43      	bgt.n	fca0 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    fc18:	9b05      	ldr	r3, [sp, #20]
    fc1a:	4649      	mov	r1, r9
    fc1c:	4620      	mov	r0, r4
    fc1e:	781a      	ldrb	r2, [r3, #0]
    fc20:	f7ff fede 	bl	f9e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fc24:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    fc28:	f01a 0f07 	tst.w	sl, #7
    fc2c:	d103      	bne.n	fc36 <log_output_process+0x1be>
			print_formatted(output, " ");
    fc2e:	4641      	mov	r1, r8
    fc30:	4620      	mov	r0, r4
    fc32:	f7ff fed5 	bl	f9e0 <print_formatted>
		if (i < length) {
    fc36:	4557      	cmp	r7, sl
    fc38:	d939      	bls.n	fcae <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    fc3a:	9b05      	ldr	r3, [sp, #20]
    fc3c:	4649      	mov	r1, r9
    fc3e:	4620      	mov	r0, r4
    fc40:	f813 200a 	ldrb.w	r2, [r3, sl]
    fc44:	f7ff fecc 	bl	f9e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fc48:	f10a 0a01 	add.w	sl, sl, #1
    fc4c:	f1ba 0f10 	cmp.w	sl, #16
    fc50:	d1ea      	bne.n	fc28 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fc52:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    fc56:	4620      	mov	r0, r4
    fc58:	4937      	ldr	r1, [pc, #220]	; (fd38 <log_output_process+0x2c0>)
    fc5a:	f7ff fec1 	bl	f9e0 <print_formatted>
		if (i < length) {
    fc5e:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    fc60:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    fc62:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    fc64:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    fc66:	4b35      	ldr	r3, [pc, #212]	; (fd3c <log_output_process+0x2c4>)
    fc68:	5c99      	ldrb	r1, [r3, r2]
    fc6a:	f011 0f97 	tst.w	r1, #151	; 0x97
    fc6e:	bf08      	it	eq
    fc70:	222e      	moveq	r2, #46	; 0x2e
    fc72:	4933      	ldr	r1, [pc, #204]	; (fd40 <log_output_process+0x2c8>)
    fc74:	f7ff feb4 	bl	f9e0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fc78:	f10a 0a01 	add.w	sl, sl, #1
    fc7c:	f1ba 0f10 	cmp.w	sl, #16
    fc80:	d01a      	beq.n	fcb8 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    fc82:	f01a 0f07 	tst.w	sl, #7
    fc86:	d103      	bne.n	fc90 <log_output_process+0x218>
			print_formatted(output, " ");
    fc88:	4641      	mov	r1, r8
    fc8a:	4620      	mov	r0, r4
    fc8c:	f7ff fea8 	bl	f9e0 <print_formatted>
		if (i < length) {
    fc90:	4557      	cmp	r7, sl
    fc92:	4652      	mov	r2, sl
    fc94:	d8e4      	bhi.n	fc60 <log_output_process+0x1e8>
			print_formatted(output, " ");
    fc96:	4641      	mov	r1, r8
    fc98:	4620      	mov	r0, r4
    fc9a:	f7ff fea1 	bl	f9e0 <print_formatted>
    fc9e:	e7eb      	b.n	fc78 <log_output_process+0x200>
		print_formatted(output, " ");
    fca0:	4641      	mov	r1, r8
    fca2:	4620      	mov	r0, r4
    fca4:	f7ff fe9c 	bl	f9e0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    fca8:	f10a 0a01 	add.w	sl, sl, #1
    fcac:	e7b2      	b.n	fc14 <log_output_process+0x19c>
			print_formatted(output, "   ");
    fcae:	4620      	mov	r0, r4
    fcb0:	4924      	ldr	r1, [pc, #144]	; (fd44 <log_output_process+0x2cc>)
    fcb2:	f7ff fe95 	bl	f9e0 <print_formatted>
    fcb6:	e7c7      	b.n	fc48 <log_output_process+0x1d0>
		data += length;
    fcb8:	9b05      	ldr	r3, [sp, #20]
    fcba:	443b      	add	r3, r7
    fcbc:	9305      	str	r3, [sp, #20]
	} while (len);
    fcbe:	9b04      	ldr	r3, [sp, #16]
    fcc0:	1bdb      	subs	r3, r3, r7
    fcc2:	9304      	str	r3, [sp, #16]
    fcc4:	d19c      	bne.n	fc00 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    fcc6:	f1bb 0f00 	cmp.w	fp, #0
    fcca:	f47f af34 	bne.w	fb36 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    fcce:	4620      	mov	r0, r4
}
    fcd0:	b009      	add	sp, #36	; 0x24
    fcd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    fcd6:	f01b ba0b 	b.w	2b0f0 <log_output_flush>
		print_formatted(output, "%s", log_color);
    fcda:	4620      	mov	r0, r4
    fcdc:	4a05      	ldr	r2, [pc, #20]	; (fcf4 <log_output_process+0x27c>)
    fcde:	4906      	ldr	r1, [pc, #24]	; (fcf8 <log_output_process+0x280>)
    fce0:	f7ff fe7e 	bl	f9e0 <print_formatted>
}
    fce4:	e72a      	b.n	fb3c <log_output_process+0xc4>
    fce6:	bf00      	nop
    fce8:	000344be 	.word	0x000344be
    fcec:	000344c2 	.word	0x000344c2
    fcf0:	00031f74 	.word	0x00031f74
    fcf4:	000344b9 	.word	0x000344b9
    fcf8:	00039324 	.word	0x00039324
    fcfc:	00031f88 	.word	0x00031f88
    fd00:	000344e7 	.word	0x000344e7
    fd04:	000344ed 	.word	0x000344ed
    fd08:	000344f1 	.word	0x000344f1
    fd0c:	2000e0ec 	.word	0x2000e0ec
    fd10:	2000e0e8 	.word	0x2000e0e8
    fd14:	000344cb 	.word	0x000344cb
    fd18:	0002b10b 	.word	0x0002b10b
    fd1c:	0000fa21 	.word	0x0000fa21
    fd20:	0002b0e3 	.word	0x0002b0e3
    fd24:	000344f6 	.word	0x000344f6
    fd28:	00033bc2 	.word	0x00033bc2
    fd2c:	0003445a 	.word	0x0003445a
    fd30:	00034507 	.word	0x00034507
    fd34:	000344ff 	.word	0x000344ff
    fd38:	00034509 	.word	0x00034509
    fd3c:	0003c002 	.word	0x0003c002
    fd40:	000394c2 	.word	0x000394c2
    fd44:	00034505 	.word	0x00034505

0000fd48 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    fd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    fd4c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    fd4e:	684b      	ldr	r3, [r1, #4]
    fd50:	4605      	mov	r5, r0
    fd52:	460c      	mov	r4, r1
    fd54:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    fd56:	688e      	ldr	r6, [r1, #8]
    fd58:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    fd5a:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    fd5e:	b15b      	cbz	r3, fd78 <log_output_msg_process+0x30>
    fd60:	4a13      	ldr	r2, [pc, #76]	; (fdb0 <log_output_msg_process+0x68>)
    fd62:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    fd64:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    fd68:	2900      	cmp	r1, #0
    fd6a:	db1f      	blt.n	fdac <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    fd6c:	7820      	ldrb	r0, [r4, #0]
    fd6e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fd72:	f7ff fd09 	bl	f788 <log_source_name_get>
    fd76:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    fd78:	4621      	mov	r1, r4
    fd7a:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    fd7e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    fd80:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    fd84:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    fd86:	eb01 0402 	add.w	r4, r1, r2
    fd8a:	bf08      	it	eq
    fd8c:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    fd8e:	f3c0 100b 	ubfx	r0, r0, #4, #12
    fd92:	e9cd 0803 	strd	r0, r8, [sp, #12]
    fd96:	e9cd 1401 	strd	r1, r4, [sp, #4]
    fd9a:	2200      	movs	r2, #0
    fd9c:	4631      	mov	r1, r6
    fd9e:	4628      	mov	r0, r5
    fda0:	9700      	str	r7, [sp, #0]
    fda2:	f7ff fe69 	bl	fa78 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    fda6:	b006      	add	sp, #24
    fda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    fdac:	2300      	movs	r3, #0
    fdae:	e7e3      	b.n	fd78 <log_output_msg_process+0x30>
    fdb0:	00031b54 	.word	0x00031b54

0000fdb4 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    fdb4:	f242 730f 	movw	r3, #9999	; 0x270f
{
    fdb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    fdba:	428b      	cmp	r3, r1
    fdbc:	bf28      	it	cs
    fdbe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    fdc0:	6805      	ldr	r5, [r0, #0]
{
    fdc2:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    fdc4:	2105      	movs	r1, #5
    fdc6:	4668      	mov	r0, sp
    fdc8:	4a0d      	ldr	r2, [pc, #52]	; (fe00 <log_output_dropped_process+0x4c>)
    fdca:	f01a fe25 	bl	2aa18 <snprintk>
    fdce:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    fdd0:	6863      	ldr	r3, [r4, #4]
    fdd2:	4628      	mov	r0, r5
    fdd4:	220b      	movs	r2, #11
    fdd6:	685b      	ldr	r3, [r3, #4]
    fdd8:	490a      	ldr	r1, [pc, #40]	; (fe04 <log_output_dropped_process+0x50>)
    fdda:	f01b f975 	bl	2b0c8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    fdde:	6863      	ldr	r3, [r4, #4]
    fde0:	4632      	mov	r2, r6
    fde2:	4669      	mov	r1, sp
    fde4:	4628      	mov	r0, r5
    fde6:	685b      	ldr	r3, [r3, #4]
    fde8:	f01b f96e 	bl	2b0c8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    fdec:	6863      	ldr	r3, [r4, #4]
    fdee:	221b      	movs	r2, #27
    fdf0:	4628      	mov	r0, r5
    fdf2:	685b      	ldr	r3, [r3, #4]
    fdf4:	4904      	ldr	r1, [pc, #16]	; (fe08 <log_output_dropped_process+0x54>)
    fdf6:	f01b f967 	bl	2b0c8 <buffer_write>
		     output->control_block->ctx);
}
    fdfa:	b002      	add	sp, #8
    fdfc:	bd70      	pop	{r4, r5, r6, pc}
    fdfe:	bf00      	nop
    fe00:	00033020 	.word	0x00033020
    fe04:	00034527 	.word	0x00034527
    fe08:	0003450b 	.word	0x0003450b

0000fe0c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    fe0c:	2100      	movs	r1, #0
    fe0e:	2301      	movs	r3, #1
    fe10:	4a06      	ldr	r2, [pc, #24]	; (fe2c <log_output_timestamp_freq_set+0x20>)
    fe12:	4290      	cmp	r0, r2
    fe14:	d806      	bhi.n	fe24 <log_output_timestamp_freq_set+0x18>
    fe16:	4a06      	ldr	r2, [pc, #24]	; (fe30 <log_output_timestamp_freq_set+0x24>)
    fe18:	b901      	cbnz	r1, fe1c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    fe1a:	2301      	movs	r3, #1
    fe1c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    fe1e:	4b05      	ldr	r3, [pc, #20]	; (fe34 <log_output_timestamp_freq_set+0x28>)
    fe20:	6018      	str	r0, [r3, #0]
}
    fe22:	4770      	bx	lr
		timestamp_div *= 2U;
    fe24:	2101      	movs	r1, #1
		frequency /= 2U;
    fe26:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    fe28:	005b      	lsls	r3, r3, #1
    fe2a:	e7f2      	b.n	fe12 <log_output_timestamp_freq_set+0x6>
    fe2c:	000f4240 	.word	0x000f4240
    fe30:	2000e0e8 	.word	0x2000e0e8
    fe34:	2000e0ec 	.word	0x2000e0ec

0000fe38 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    fe38:	4b01      	ldr	r3, [pc, #4]	; (fe40 <format_set+0x8>)
	return 0;
}
    fe3a:	2000      	movs	r0, #0
	log_format_current = log_type;
    fe3c:	6019      	str	r1, [r3, #0]
}
    fe3e:	4770      	bx	lr
    fe40:	2000e104 	.word	0x2000e104

0000fe44 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    fe44:	2201      	movs	r2, #1
    fe46:	4b02      	ldr	r3, [pc, #8]	; (fe50 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    fe48:	4802      	ldr	r0, [pc, #8]	; (fe54 <panic+0x10>)
    fe4a:	701a      	strb	r2, [r3, #0]
    fe4c:	f01b b950 	b.w	2b0f0 <log_output_flush>
    fe50:	2000ee72 	.word	0x2000ee72
    fe54:	00031fb8 	.word	0x00031fb8

0000fe58 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    fe58:	4801      	ldr	r0, [pc, #4]	; (fe60 <dropped+0x8>)
    fe5a:	f7ff bfab 	b.w	fdb4 <log_output_dropped_process>
    fe5e:	bf00      	nop
    fe60:	00031fb8 	.word	0x00031fb8

0000fe64 <process>:
{
    fe64:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fe66:	4b06      	ldr	r3, [pc, #24]	; (fe80 <process+0x1c>)
{
    fe68:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fe6a:	6818      	ldr	r0, [r3, #0]
    fe6c:	f7ff fa2e 	bl	f2cc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    fe70:	4621      	mov	r1, r4
}
    fe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fe76:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    fe78:	220f      	movs	r2, #15
    fe7a:	4802      	ldr	r0, [pc, #8]	; (fe84 <process+0x20>)
    fe7c:	4718      	bx	r3
    fe7e:	bf00      	nop
    fe80:	2000e104 	.word	0x2000e104
    fe84:	00031fb8 	.word	0x00031fb8

0000fe88 <char_out>:
{
    fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe8a:	460d      	mov	r5, r1
    fe8c:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    fe8e:	4f06      	ldr	r7, [pc, #24]	; (fea8 <char_out+0x20>)
    fe90:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    fe92:	42b4      	cmp	r4, r6
    fe94:	d101      	bne.n	fe9a <char_out+0x12>
}
    fe96:	4628      	mov	r0, r5
    fe98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    fe9a:	f814 1b01 	ldrb.w	r1, [r4], #1
    fe9e:	68bb      	ldr	r3, [r7, #8]
    fea0:	4801      	ldr	r0, [pc, #4]	; (fea8 <char_out+0x20>)
    fea2:	69db      	ldr	r3, [r3, #28]
    fea4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    fea6:	e7f4      	b.n	fe92 <char_out+0xa>
    fea8:	0003188c 	.word	0x0003188c

0000feac <log_backend_uart_init>:
{
    feac:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    feae:	4807      	ldr	r0, [pc, #28]	; (fecc <log_backend_uart_init+0x20>)
    feb0:	f020 fa5e 	bl	30370 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    feb4:	b948      	cbnz	r0, feca <log_backend_uart_init+0x1e>
    feb6:	4906      	ldr	r1, [pc, #24]	; (fed0 <log_backend_uart_init+0x24>)
    feb8:	4806      	ldr	r0, [pc, #24]	; (fed4 <log_backend_uart_init+0x28>)
    feba:	237f      	movs	r3, #127	; 0x7f
    febc:	4a06      	ldr	r2, [pc, #24]	; (fed8 <log_backend_uart_init+0x2c>)
    febe:	f01a ff7b 	bl	2adb8 <assert_print>
    fec2:	217f      	movs	r1, #127	; 0x7f
    fec4:	4804      	ldr	r0, [pc, #16]	; (fed8 <log_backend_uart_init+0x2c>)
    fec6:	f01a ff70 	bl	2adaa <assert_post_action>
}
    feca:	bd08      	pop	{r3, pc}
    fecc:	0003188c 	.word	0x0003188c
    fed0:	00034591 	.word	0x00034591
    fed4:	00033bc2 	.word	0x00033bc2
    fed8:	00034553 	.word	0x00034553

0000fedc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fee0:	4605      	mov	r5, r0
	__asm__ volatile(
    fee2:	f04f 0320 	mov.w	r3, #32
    fee6:	f3ef 8611 	mrs	r6, BASEPRI
    feea:	f383 8812 	msr	BASEPRI_MAX, r3
    feee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fef2:	4820      	ldr	r0, [pc, #128]	; (ff74 <pm_state_notify+0x98>)
    fef4:	f014 fe94 	bl	24c20 <z_spin_lock_valid>
    fef8:	b968      	cbnz	r0, ff16 <pm_state_notify+0x3a>
    fefa:	2394      	movs	r3, #148	; 0x94
    fefc:	4a1e      	ldr	r2, [pc, #120]	; (ff78 <pm_state_notify+0x9c>)
    fefe:	491f      	ldr	r1, [pc, #124]	; (ff7c <pm_state_notify+0xa0>)
    ff00:	481f      	ldr	r0, [pc, #124]	; (ff80 <pm_state_notify+0xa4>)
    ff02:	f01a ff59 	bl	2adb8 <assert_print>
    ff06:	491b      	ldr	r1, [pc, #108]	; (ff74 <pm_state_notify+0x98>)
    ff08:	481e      	ldr	r0, [pc, #120]	; (ff84 <pm_state_notify+0xa8>)
    ff0a:	f01a ff55 	bl	2adb8 <assert_print>
    ff0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff10:	4819      	ldr	r0, [pc, #100]	; (ff78 <pm_state_notify+0x9c>)
    ff12:	f01a ff4a 	bl	2adaa <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ff16:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    ff1a:	4816      	ldr	r0, [pc, #88]	; (ff74 <pm_state_notify+0x98>)
    ff1c:	f014 fe9c 	bl	24c58 <z_spin_lock_set_owner>
	return list->head;
    ff20:	4b19      	ldr	r3, [pc, #100]	; (ff88 <pm_state_notify+0xac>)
    ff22:	4f1a      	ldr	r7, [pc, #104]	; (ff8c <pm_state_notify+0xb0>)
    ff24:	681c      	ldr	r4, [r3, #0]
    ff26:	f8df 8068 	ldr.w	r8, [pc, #104]	; ff90 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ff2a:	b97c      	cbnz	r4, ff4c <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff2c:	4811      	ldr	r0, [pc, #68]	; (ff74 <pm_state_notify+0x98>)
    ff2e:	f014 fe85 	bl	24c3c <z_spin_unlock_valid>
    ff32:	b9c8      	cbnz	r0, ff68 <pm_state_notify+0x8c>
    ff34:	23c2      	movs	r3, #194	; 0xc2
    ff36:	4a10      	ldr	r2, [pc, #64]	; (ff78 <pm_state_notify+0x9c>)
    ff38:	4916      	ldr	r1, [pc, #88]	; (ff94 <pm_state_notify+0xb8>)
    ff3a:	4811      	ldr	r0, [pc, #68]	; (ff80 <pm_state_notify+0xa4>)
    ff3c:	f01a ff3c 	bl	2adb8 <assert_print>
    ff40:	490c      	ldr	r1, [pc, #48]	; (ff74 <pm_state_notify+0x98>)
    ff42:	4815      	ldr	r0, [pc, #84]	; (ff98 <pm_state_notify+0xbc>)
    ff44:	f01a ff38 	bl	2adb8 <assert_print>
    ff48:	21c2      	movs	r1, #194	; 0xc2
    ff4a:	e7e1      	b.n	ff10 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    ff4c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ff50:	2d00      	cmp	r5, #0
    ff52:	bf18      	it	ne
    ff54:	4613      	movne	r3, r2
		if (callback) {
    ff56:	b12b      	cbz	r3, ff64 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ff58:	f898 2010 	ldrb.w	r2, [r8, #16]
    ff5c:	fb09 f202 	mul.w	r2, r9, r2
    ff60:	5cb8      	ldrb	r0, [r7, r2]
    ff62:	4798      	blx	r3
	return node->next;
    ff64:	6824      	ldr	r4, [r4, #0]
    ff66:	e7e0      	b.n	ff2a <pm_state_notify+0x4e>
	__asm__ volatile(
    ff68:	f386 8811 	msr	BASEPRI, r6
    ff6c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ff70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ff74:	2000e108 	.word	0x2000e108
    ff78:	000340d9 	.word	0x000340d9
    ff7c:	00034132 	.word	0x00034132
    ff80:	00033bc2 	.word	0x00033bc2
    ff84:	00034147 	.word	0x00034147
    ff88:	2000e128 	.word	0x2000e128
    ff8c:	2000e11c 	.word	0x2000e11c
    ff90:	2000eb4c 	.word	0x2000eb4c
    ff94:	00034106 	.word	0x00034106
    ff98:	0003411d 	.word	0x0003411d

0000ff9c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ff9c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    ff9e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    ffa0:	4b16      	ldr	r3, [pc, #88]	; (fffc <pm_system_resume+0x60>)
    ffa2:	7c1c      	ldrb	r4, [r3, #16]
    ffa4:	f004 031f 	and.w	r3, r4, #31
    ffa8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ffaa:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ffac:	4b14      	ldr	r3, [pc, #80]	; (10000 <pm_system_resume+0x64>)
    ffae:	0961      	lsrs	r1, r4, #5
    ffb0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ffb4:	e8d3 1fef 	ldaex	r1, [r3]
    ffb8:	ea01 0500 	and.w	r5, r1, r0
    ffbc:	e8c3 5fe6 	stlex	r6, r5, [r3]
    ffc0:	2e00      	cmp	r6, #0
    ffc2:	d1f7      	bne.n	ffb4 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    ffc4:	420a      	tst	r2, r1
    ffc6:	d013      	beq.n	fff0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    ffc8:	4b0e      	ldr	r3, [pc, #56]	; (10004 <pm_system_resume+0x68>)
    ffca:	4d0f      	ldr	r5, [pc, #60]	; (10008 <pm_system_resume+0x6c>)
    ffcc:	b18b      	cbz	r3, fff2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    ffce:	230c      	movs	r3, #12
    ffd0:	4363      	muls	r3, r4
    ffd2:	18ea      	adds	r2, r5, r3
    ffd4:	7851      	ldrb	r1, [r2, #1]
    ffd6:	5ce8      	ldrb	r0, [r5, r3]
    ffd8:	f01b f811 	bl	2affe <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    ffdc:	2000      	movs	r0, #0
    ffde:	f7ff ff7d 	bl	fedc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    ffe2:	230c      	movs	r3, #12
    ffe4:	435c      	muls	r4, r3
    ffe6:	2300      	movs	r3, #0
    ffe8:	192a      	adds	r2, r5, r4
    ffea:	512b      	str	r3, [r5, r4]
    ffec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    fff0:	bd70      	pop	{r4, r5, r6, pc}
    fff2:	f383 8811 	msr	BASEPRI, r3
    fff6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    fffa:	e7ef      	b.n	ffdc <pm_system_resume+0x40>
    fffc:	2000eb4c 	.word	0x2000eb4c
   10000:	2000e130 	.word	0x2000e130
   10004:	0002afff 	.word	0x0002afff
   10008:	2000e11c 	.word	0x2000e11c

0001000c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10010:	4b45      	ldr	r3, [pc, #276]	; (10128 <pm_system_suspend+0x11c>)
{
   10012:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10014:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   10016:	f04f 0320 	mov.w	r3, #32
   1001a:	f3ef 8811 	mrs	r8, BASEPRI
   1001e:	f383 8812 	msr	BASEPRI_MAX, r3
   10022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10026:	4841      	ldr	r0, [pc, #260]	; (1012c <pm_system_suspend+0x120>)
   10028:	f014 fdfa 	bl	24c20 <z_spin_lock_valid>
   1002c:	b968      	cbnz	r0, 1004a <pm_system_suspend+0x3e>
   1002e:	2394      	movs	r3, #148	; 0x94
   10030:	4a3f      	ldr	r2, [pc, #252]	; (10130 <pm_system_suspend+0x124>)
   10032:	4940      	ldr	r1, [pc, #256]	; (10134 <pm_system_suspend+0x128>)
   10034:	4840      	ldr	r0, [pc, #256]	; (10138 <pm_system_suspend+0x12c>)
   10036:	f01a febf 	bl	2adb8 <assert_print>
   1003a:	493c      	ldr	r1, [pc, #240]	; (1012c <pm_system_suspend+0x120>)
   1003c:	483f      	ldr	r0, [pc, #252]	; (1013c <pm_system_suspend+0x130>)
   1003e:	f01a febb 	bl	2adb8 <assert_print>
   10042:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10044:	483a      	ldr	r0, [pc, #232]	; (10130 <pm_system_suspend+0x124>)
   10046:	f01a feb0 	bl	2adaa <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1004a:	240c      	movs	r4, #12
   1004c:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   1004e:	4837      	ldr	r0, [pc, #220]	; (1012c <pm_system_suspend+0x120>)
   10050:	f014 fe02 	bl	24c58 <z_spin_lock_set_owner>
   10054:	4b3a      	ldr	r3, [pc, #232]	; (10140 <pm_system_suspend+0x134>)
   10056:	4e3b      	ldr	r6, [pc, #236]	; (10144 <pm_system_suspend+0x138>)
   10058:	5d19      	ldrb	r1, [r3, r4]
   1005a:	191a      	adds	r2, r3, r4
   1005c:	b1b9      	cbz	r1, 1008e <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1005e:	ca07      	ldmia	r2, {r0, r1, r2}
   10060:	eb06 0c04 	add.w	ip, r6, r4
   10064:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10068:	2200      	movs	r2, #0
   1006a:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1006c:	482f      	ldr	r0, [pc, #188]	; (1012c <pm_system_suspend+0x120>)
   1006e:	f014 fde5 	bl	24c3c <z_spin_unlock_valid>
   10072:	4604      	mov	r4, r0
   10074:	b9b0      	cbnz	r0, 100a4 <pm_system_suspend+0x98>
   10076:	23c2      	movs	r3, #194	; 0xc2
   10078:	4a2d      	ldr	r2, [pc, #180]	; (10130 <pm_system_suspend+0x124>)
   1007a:	4933      	ldr	r1, [pc, #204]	; (10148 <pm_system_suspend+0x13c>)
   1007c:	482e      	ldr	r0, [pc, #184]	; (10138 <pm_system_suspend+0x12c>)
   1007e:	f01a fe9b 	bl	2adb8 <assert_print>
   10082:	492a      	ldr	r1, [pc, #168]	; (1012c <pm_system_suspend+0x120>)
   10084:	4831      	ldr	r0, [pc, #196]	; (1014c <pm_system_suspend+0x140>)
   10086:	f01a fe97 	bl	2adb8 <assert_print>
   1008a:	21c2      	movs	r1, #194	; 0xc2
   1008c:	e7da      	b.n	10044 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   1008e:	4639      	mov	r1, r7
   10090:	4628      	mov	r0, r5
   10092:	f000 f865 	bl	10160 <pm_policy_next_state>
		if (info != NULL) {
   10096:	2800      	cmp	r0, #0
   10098:	d0e8      	beq.n	1006c <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   1009a:	c807      	ldmia	r0, {r0, r1, r2}
   1009c:	4434      	add	r4, r6
   1009e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   100a2:	e7e3      	b.n	1006c <pm_system_suspend+0x60>
	__asm__ volatile(
   100a4:	f388 8811 	msr	BASEPRI, r8
   100a8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   100ac:	230c      	movs	r3, #12
   100ae:	436b      	muls	r3, r5
   100b0:	18f2      	adds	r2, r6, r3
   100b2:	5cf3      	ldrb	r3, [r6, r3]
   100b4:	b3ab      	cbz	r3, 10122 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   100b6:	1c7b      	adds	r3, r7, #1
   100b8:	d00f      	beq.n	100da <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   100ba:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   100be:	2100      	movs	r1, #0
   100c0:	f8d2 e008 	ldr.w	lr, [r2, #8]
   100c4:	4822      	ldr	r0, [pc, #136]	; (10150 <pm_system_suspend+0x144>)
   100c6:	2300      	movs	r3, #0
   100c8:	fbee 010c 	umlal	r0, r1, lr, ip
   100cc:	4a21      	ldr	r2, [pc, #132]	; (10154 <pm_system_suspend+0x148>)
   100ce:	f7f8 fee1 	bl	8e94 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   100d2:	2101      	movs	r1, #1
   100d4:	1a38      	subs	r0, r7, r0
   100d6:	f00c fdcf 	bl	1cc78 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   100da:	f016 f871 	bl	261c0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   100de:	2001      	movs	r0, #1
   100e0:	f7ff fefc 	bl	fedc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   100e4:	4b1c      	ldr	r3, [pc, #112]	; (10158 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   100e6:	096a      	lsrs	r2, r5, #5
   100e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   100ec:	2201      	movs	r2, #1
   100ee:	f005 011f 	and.w	r1, r5, #31
   100f2:	408a      	lsls	r2, r1
   100f4:	e8d3 0fef 	ldaex	r0, [r3]
   100f8:	4310      	orrs	r0, r2
   100fa:	e8c3 0fe1 	stlex	r1, r0, [r3]
   100fe:	2900      	cmp	r1, #0
   10100:	d1f8      	bne.n	100f4 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10102:	4b16      	ldr	r3, [pc, #88]	; (1015c <pm_system_suspend+0x150>)
   10104:	b133      	cbz	r3, 10114 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   10106:	230c      	movs	r3, #12
   10108:	436b      	muls	r3, r5
   1010a:	18f2      	adds	r2, r6, r3
   1010c:	7851      	ldrb	r1, [r2, #1]
   1010e:	5cf0      	ldrb	r0, [r6, r3]
   10110:	f01a ff69 	bl	2afe6 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10114:	f7ff ff42 	bl	ff9c <pm_system_resume>
	k_sched_unlock();
   10118:	f016 f8be 	bl	26298 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   1011c:	4620      	mov	r0, r4
   1011e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   10122:	461c      	mov	r4, r3
   10124:	e7fa      	b.n	1011c <pm_system_suspend+0x110>
   10126:	bf00      	nop
   10128:	2000eb4c 	.word	0x2000eb4c
   1012c:	2000e10c 	.word	0x2000e10c
   10130:	000340d9 	.word	0x000340d9
   10134:	00034132 	.word	0x00034132
   10138:	00033bc2 	.word	0x00033bc2
   1013c:	00034147 	.word	0x00034147
   10140:	2000e110 	.word	0x2000e110
   10144:	2000e11c 	.word	0x2000e11c
   10148:	00034106 	.word	0x00034106
   1014c:	0003411d 	.word	0x0003411d
   10150:	000f423f 	.word	0x000f423f
   10154:	000f4240 	.word	0x000f4240
   10158:	2000e130 	.word	0x2000e130
   1015c:	0002afe7 	.word	0x0002afe7

00010160 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10164:	b085      	sub	sp, #20
   10166:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10168:	a903      	add	r1, sp, #12
   1016a:	f000 f843 	bl	101f4 <pm_state_cpu_get_all>
   1016e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10172:	4604      	mov	r4, r0
   10174:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10178:	4b1b      	ldr	r3, [pc, #108]	; (101e8 <pm_policy_next_state+0x88>)
   1017a:	9d03      	ldr	r5, [sp, #12]
   1017c:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10180:	1e43      	subs	r3, r0, #1
   10182:	b21b      	sxth	r3, r3
   10184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10188:	f8df 8060 	ldr.w	r8, [pc, #96]	; 101ec <pm_policy_next_state+0x8c>
   1018c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10190:	b924      	cbnz	r4, 1019c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10192:	46a1      	mov	r9, r4
}
   10194:	4648      	mov	r0, r9
   10196:	b005      	add	sp, #20
   10198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1019c:	46c4      	mov	ip, r8
   1019e:	4659      	mov	r1, fp
   101a0:	6868      	ldr	r0, [r5, #4]
   101a2:	2300      	movs	r3, #0
   101a4:	fbe0 c107 	umlal	ip, r1, r0, r7
   101a8:	4a11      	ldr	r2, [pc, #68]	; (101f0 <pm_policy_next_state+0x90>)
   101aa:	4660      	mov	r0, ip
   101ac:	f7f8 fe72 	bl	8e94 <__aeabi_uldivmod>
   101b0:	46c4      	mov	ip, r8
   101b2:	4659      	mov	r1, fp
   101b4:	9001      	str	r0, [sp, #4]
   101b6:	68a8      	ldr	r0, [r5, #8]
   101b8:	2300      	movs	r3, #0
   101ba:	fbe0 c107 	umlal	ip, r1, r0, r7
   101be:	4a0c      	ldr	r2, [pc, #48]	; (101f0 <pm_policy_next_state+0x90>)
   101c0:	4660      	mov	r0, ip
   101c2:	f7f8 fe67 	bl	8e94 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   101c6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   101ca:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   101cc:	d001      	beq.n	101d2 <pm_policy_next_state+0x72>
   101ce:	4582      	cmp	sl, r0
   101d0:	d905      	bls.n	101de <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   101d2:	1c73      	adds	r3, r6, #1
   101d4:	d0de      	beq.n	10194 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   101d6:	9b01      	ldr	r3, [sp, #4]
   101d8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   101da:	42b0      	cmp	r0, r6
   101dc:	d9da      	bls.n	10194 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   101de:	3c01      	subs	r4, #1
   101e0:	b2a4      	uxth	r4, r4
   101e2:	3d0c      	subs	r5, #12
   101e4:	e7d4      	b.n	10190 <pm_policy_next_state+0x30>
   101e6:	bf00      	nop
   101e8:	2000c824 	.word	0x2000c824
   101ec:	000f423f 	.word	0x000f423f
   101f0:	000f4240 	.word	0x000f4240

000101f4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   101f4:	b908      	cbnz	r0, 101fa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   101f6:	4b02      	ldr	r3, [pc, #8]	; (10200 <pm_state_cpu_get_all+0xc>)
   101f8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   101fa:	2000      	movs	r0, #0
   101fc:	4770      	bx	lr
   101fe:	bf00      	nop
   10200:	00031fc8 	.word	0x00031fc8

00010204 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   10204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10208:	4605      	mov	r5, r0
   1020a:	460e      	mov	r6, r1
   1020c:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1020e:	4c1d      	ldr	r4, [pc, #116]	; (10284 <z_impl_zsock_socket+0x80>)
   10210:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10288 <z_impl_zsock_socket+0x84>
   10214:	4544      	cmp	r4, r8
   10216:	d92b      	bls.n	10270 <z_impl_zsock_socket+0x6c>
   10218:	491c      	ldr	r1, [pc, #112]	; (1028c <z_impl_zsock_socket+0x88>)
   1021a:	23dd      	movs	r3, #221	; 0xdd
   1021c:	4a1c      	ldr	r2, [pc, #112]	; (10290 <z_impl_zsock_socket+0x8c>)
   1021e:	481d      	ldr	r0, [pc, #116]	; (10294 <z_impl_zsock_socket+0x90>)
   10220:	f01a fdca 	bl	2adb8 <assert_print>
   10224:	481c      	ldr	r0, [pc, #112]	; (10298 <z_impl_zsock_socket+0x94>)
   10226:	f01a fdc7 	bl	2adb8 <assert_print>
   1022a:	21dd      	movs	r1, #221	; 0xdd
   1022c:	e00f      	b.n	1024e <z_impl_zsock_socket+0x4a>
		if (sock_family->family != family &&
   1022e:	6823      	ldr	r3, [r4, #0]
   10230:	42ab      	cmp	r3, r5
   10232:	d000      	beq.n	10236 <z_impl_zsock_socket+0x32>
   10234:	b9d3      	cbnz	r3, 1026c <z_impl_zsock_socket+0x68>
		    sock_family->family != AF_UNSPEC) {
			continue;
		}

		NET_ASSERT(sock_family->is_supported);
   10236:	68a3      	ldr	r3, [r4, #8]
   10238:	b963      	cbnz	r3, 10254 <z_impl_zsock_socket+0x50>
   1023a:	4918      	ldr	r1, [pc, #96]	; (1029c <z_impl_zsock_socket+0x98>)
   1023c:	23e3      	movs	r3, #227	; 0xe3
   1023e:	4a14      	ldr	r2, [pc, #80]	; (10290 <z_impl_zsock_socket+0x8c>)
   10240:	4814      	ldr	r0, [pc, #80]	; (10294 <z_impl_zsock_socket+0x90>)
   10242:	f01a fdb9 	bl	2adb8 <assert_print>
   10246:	4816      	ldr	r0, [pc, #88]	; (102a0 <z_impl_zsock_socket+0x9c>)
   10248:	f01a fdb6 	bl	2adb8 <assert_print>
   1024c:	21e3      	movs	r1, #227	; 0xe3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1024e:	4810      	ldr	r0, [pc, #64]	; (10290 <z_impl_zsock_socket+0x8c>)
   10250:	f01a fdab 	bl	2adaa <assert_post_action>

		if (!sock_family->is_supported(family, type, proto)) {
   10254:	463a      	mov	r2, r7
   10256:	4631      	mov	r1, r6
   10258:	4628      	mov	r0, r5
   1025a:	4798      	blx	r3
   1025c:	b130      	cbz	r0, 1026c <z_impl_zsock_socket+0x68>
			continue;
		}

		return sock_family->handler(family, type, proto);
   1025e:	463a      	mov	r2, r7
   10260:	4631      	mov	r1, r6
   10262:	4628      	mov	r0, r5
   10264:	68e3      	ldr	r3, [r4, #12]
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   10266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   1026a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1026c:	3410      	adds	r4, #16
   1026e:	e7d1      	b.n	10214 <z_impl_zsock_socket+0x10>
   10270:	d3dd      	bcc.n	1022e <z_impl_zsock_socket+0x2a>
	errno = EAFNOSUPPORT;
   10272:	f01b fe77 	bl	2bf64 <__errno>
   10276:	236a      	movs	r3, #106	; 0x6a
   10278:	6003      	str	r3, [r0, #0]
}
   1027a:	f04f 30ff 	mov.w	r0, #4294967295
   1027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10282:	bf00      	nop
   10284:	00031b10 	.word	0x00031b10
   10288:	00031b20 	.word	0x00031b20
   1028c:	000346b3 	.word	0x000346b3
   10290:	00034665 	.word	0x00034665
   10294:	00033bc2 	.word	0x00033bc2
   10298:	000342e3 	.word	0x000342e3
   1029c:	00034699 	.word	0x00034699
   102a0:	00034662 	.word	0x00034662

000102a4 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   102a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102a8:	460f      	mov	r7, r1
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   102aa:	2600      	movs	r6, #0
{
   102ac:	b09b      	sub	sp, #108	; 0x6c
   102ae:	9003      	str	r0, [sp, #12]

	end = sys_clock_timeout_end_calc(timeout);
   102b0:	4619      	mov	r1, r3
   102b2:	4610      	mov	r0, r2
{
   102b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
	end = sys_clock_timeout_end_calc(timeout);
   102b8:	f020 f99a 	bl	305f0 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   102bc:	46bb      	mov	fp, r7
	bool offload = false;
   102be:	4634      	mov	r4, r6
	end = sys_clock_timeout_end_calc(timeout);
   102c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
	pev = poll_events;
   102c4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   102c8:	f8dd 900c 	ldr.w	r9, [sp, #12]
	pev = poll_events;
   102cc:	f8cd 8020 	str.w	r8, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
   102d0:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   102d2:	f1bb 0f00 	cmp.w	fp, #0
   102d6:	d121      	bne.n	1031c <zsock_poll_internal+0x78>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   102d8:	2c00      	cmp	r4, #0
   102da:	d066      	beq.n	103aa <zsock_poll_internal+0x106>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   102dc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   102e0:	f1b2 3fff 	cmp.w	r2, #4294967295
   102e4:	bf08      	it	eq
   102e6:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   102ea:	bf17      	itett	ne
   102ec:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   102f0:	f04f 33ff 	moveq.w	r3, #4294967295
   102f4:	fba3 3202 	umullne	r3, r2, r3, r2
   102f8:	0bdb      	lsrne	r3, r3, #15
   102fa:	bf18      	it	ne
   102fc:	ea43 4342 	orrne.w	r3, r3, r2, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   10300:	e9cd 7300 	strd	r7, r3, [sp]
   10304:	f44f 7282 	mov.w	r2, #260	; 0x104
   10308:	4631      	mov	r1, r6
   1030a:	9b03      	ldr	r3, [sp, #12]
   1030c:	9802      	ldr	r0, [sp, #8]
   1030e:	f01a ff0e 	bl	2b12e <z_fdtable_call_ioctl>
   10312:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   10314:	4620      	mov	r0, r4
   10316:	b01b      	add	sp, #108	; 0x6c
   10318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   1031c:	f8d9 0000 	ldr.w	r0, [r9]
   10320:	2800      	cmp	r0, #0
   10322:	db22      	blt.n	1036a <zsock_poll_internal+0xc6>
	ctx = z_get_fd_obj_and_vtable(sock,
   10324:	aa0a      	add	r2, sp, #40	; 0x28
   10326:	a909      	add	r1, sp, #36	; 0x24
   10328:	f7fd fae0 	bl	d8ec <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1032c:	4605      	mov	r5, r0
   1032e:	b1e0      	cbz	r0, 1036a <zsock_poll_internal+0xc6>
		(void)k_mutex_lock(lock, K_FOREVER);
   10330:	f04f 32ff 	mov.w	r2, #4294967295
   10334:	f04f 33ff 	mov.w	r3, #4294967295
   10338:	980a      	ldr	r0, [sp, #40]	; 0x28
   1033a:	f01a ff25 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   1033e:	ab1a      	add	r3, sp, #104	; 0x68
   10340:	9301      	str	r3, [sp, #4]
   10342:	ab08      	add	r3, sp, #32
   10344:	9300      	str	r3, [sp, #0]
   10346:	f44f 7281 	mov.w	r2, #258	; 0x102
   1034a:	464b      	mov	r3, r9
   1034c:	4629      	mov	r1, r5
   1034e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10350:	f01a feed 	bl	2b12e <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   10354:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   10358:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   1035a:	d10b      	bne.n	10374 <zsock_poll_internal+0xd0>
			timeout = K_NO_WAIT;
   1035c:	2200      	movs	r2, #0
   1035e:	2300      	movs	r3, #0
		k_mutex_unlock(lock);
   10360:	980a      	ldr	r0, [sp, #40]	; 0x28
			timeout = K_NO_WAIT;
   10362:	e9cd 2306 	strd	r2, r3, [sp, #24]
		k_mutex_unlock(lock);
   10366:	f01a ff11 	bl	2b18c <k_mutex_unlock.isra.0>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1036a:	f109 0908 	add.w	r9, r9, #8
   1036e:	f10b 3bff 	add.w	fp, fp, #4294967295
   10372:	e7ae      	b.n	102d2 <zsock_poll_internal+0x2e>
		} else if (result == -EXDEV) {
   10374:	f11a 0f12 	cmn.w	sl, #18
		k_mutex_unlock(lock);
   10378:	980a      	ldr	r0, [sp, #40]	; 0x28
		} else if (result == -EXDEV) {
   1037a:	d10b      	bne.n	10394 <zsock_poll_internal+0xf0>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1037c:	9b02      	ldr	r3, [sp, #8]
   1037e:	b11b      	cbz	r3, 10388 <zsock_poll_internal+0xe4>
		k_mutex_unlock(lock);
   10380:	f01a ff04 	bl	2b18c <k_mutex_unlock.isra.0>
			offload = true;
   10384:	2401      	movs	r4, #1
   10386:	e7f0      	b.n	1036a <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   10388:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
   1038a:	462e      	mov	r6, r5
				offl_vtable = vtable;
   1038c:	9302      	str	r3, [sp, #8]
		k_mutex_unlock(lock);
   1038e:	f01a fefd 	bl	2b18c <k_mutex_unlock.isra.0>
		if (result < 0) {
   10392:	e7f7      	b.n	10384 <zsock_poll_internal+0xe0>
		k_mutex_unlock(lock);
   10394:	f01a fefa 	bl	2b18c <k_mutex_unlock.isra.0>
		if (result < 0) {
   10398:	f1ba 0f00 	cmp.w	sl, #0
   1039c:	dae5      	bge.n	1036a <zsock_poll_internal+0xc6>
			errno = -result;
   1039e:	f01b fde1 	bl	2bf64 <__errno>
   103a2:	f1ca 0300 	rsb	r3, sl, #0
				errno = -result;
   103a6:	6003      	str	r3, [r0, #0]
				return -1;
   103a8:	e020      	b.n	103ec <zsock_poll_internal+0x148>
	timeout_recalc(end, &timeout);
   103aa:	aa06      	add	r2, sp, #24
   103ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   103b0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1048c <zsock_poll_internal+0x1e8>
	timeout_recalc(end, &timeout);
   103b4:	f01a feca 	bl	2b14c <timeout_recalc>
		retry = false;
   103b8:	9402      	str	r4, [sp, #8]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   103ba:	9908      	ldr	r1, [sp, #32]
   103bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   103c0:	eba1 0108 	sub.w	r1, r1, r8
   103c4:	1089      	asrs	r1, r1, #2
   103c6:	fb0a f101 	mul.w	r1, sl, r1
	return z_impl_k_poll(events, num_events, timeout);
   103ca:	4640      	mov	r0, r8
   103cc:	f017 fc4e 	bl	27c6c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   103d0:	f100 030b 	add.w	r3, r0, #11
   103d4:	2b0b      	cmp	r3, #11
   103d6:	4605      	mov	r5, r0
   103d8:	d804      	bhi.n	103e4 <zsock_poll_internal+0x140>
   103da:	4c2d      	ldr	r4, [pc, #180]	; (10490 <zsock_poll_internal+0x1ec>)
   103dc:	411c      	asrs	r4, r3
   103de:	f014 0401 	ands.w	r4, r4, #1
   103e2:	d006      	beq.n	103f2 <zsock_poll_internal+0x14e>
			errno = -ret;
   103e4:	f01b fdbe 	bl	2bf64 <__errno>
   103e8:	426d      	negs	r5, r5
   103ea:	6005      	str	r5, [r0, #0]
			return -1;
   103ec:	f04f 34ff 	mov.w	r4, #4294967295
   103f0:	e790      	b.n	10314 <zsock_poll_internal+0x70>
		for (pfd = fds, i = nfds; i--; pfd++) {
   103f2:	46b9      	mov	r9, r7
		retry = false;
   103f4:	46a3      	mov	fp, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
   103f6:	9d03      	ldr	r5, [sp, #12]
		pev = poll_events;
   103f8:	f8cd 8020 	str.w	r8, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   103fc:	f1b9 0f00 	cmp.w	r9, #0
   10400:	d10e      	bne.n	10420 <zsock_poll_internal+0x17c>
		if (retry) {
   10402:	f1bb 0f00 	cmp.w	fp, #0
   10406:	d085      	beq.n	10314 <zsock_poll_internal+0x70>
			if (ret > 0) {
   10408:	2c00      	cmp	r4, #0
   1040a:	d183      	bne.n	10314 <zsock_poll_internal+0x70>
			timeout_recalc(end, &timeout);
   1040c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10410:	aa06      	add	r2, sp, #24
   10412:	f01a fe9b 	bl	2b14c <timeout_recalc>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10416:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1041a:	4313      	orrs	r3, r2
   1041c:	d1cd      	bne.n	103ba <zsock_poll_internal+0x116>
   1041e:	e779      	b.n	10314 <zsock_poll_internal+0x70>
			if (pfd->fd < 0) {
   10420:	6828      	ldr	r0, [r5, #0]
			pfd->revents = 0;
   10422:	9b02      	ldr	r3, [sp, #8]
			if (pfd->fd < 0) {
   10424:	2800      	cmp	r0, #0
			pfd->revents = 0;
   10426:	80eb      	strh	r3, [r5, #6]
			if (pfd->fd < 0) {
   10428:	db29      	blt.n	1047e <zsock_poll_internal+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
   1042a:	aa0a      	add	r2, sp, #40	; 0x28
   1042c:	a909      	add	r1, sp, #36	; 0x24
   1042e:	f7fd fa5d 	bl	d8ec <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   10432:	4606      	mov	r6, r0
   10434:	b918      	cbnz	r0, 1043e <zsock_poll_internal+0x19a>
				pfd->revents = ZSOCK_POLLNVAL;
   10436:	2320      	movs	r3, #32
   10438:	80eb      	strh	r3, [r5, #6]
				ret++;
   1043a:	3401      	adds	r4, #1
   1043c:	e01f      	b.n	1047e <zsock_poll_internal+0x1da>
			(void)k_mutex_lock(lock, K_FOREVER);
   1043e:	f04f 32ff 	mov.w	r2, #4294967295
   10442:	f04f 33ff 	mov.w	r3, #4294967295
   10446:	980a      	ldr	r0, [sp, #40]	; 0x28
   10448:	f01a fe9e 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   1044c:	ab08      	add	r3, sp, #32
   1044e:	4631      	mov	r1, r6
   10450:	f240 1203 	movw	r2, #259	; 0x103
   10454:	9300      	str	r3, [sp, #0]
   10456:	9809      	ldr	r0, [sp, #36]	; 0x24
   10458:	462b      	mov	r3, r5
   1045a:	f01a fe68 	bl	2b12e <z_fdtable_call_ioctl>
   1045e:	4606      	mov	r6, r0
			k_mutex_unlock(lock);
   10460:	980a      	ldr	r0, [sp, #40]	; 0x28
   10462:	f01a fe93 	bl	2b18c <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   10466:	f116 0f0b 	cmn.w	r6, #11
   1046a:	d00c      	beq.n	10486 <zsock_poll_internal+0x1e2>
			} else if (result != 0) {
   1046c:	b11e      	cbz	r6, 10476 <zsock_poll_internal+0x1d2>
				errno = -result;
   1046e:	f01b fd79 	bl	2bf64 <__errno>
   10472:	4273      	negs	r3, r6
   10474:	e797      	b.n	103a6 <zsock_poll_internal+0x102>
			if (pfd->revents != 0) {
   10476:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   1047a:	2b00      	cmp	r3, #0
   1047c:	d1dd      	bne.n	1043a <zsock_poll_internal+0x196>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1047e:	3508      	adds	r5, #8
   10480:	f109 39ff 	add.w	r9, r9, #4294967295
   10484:	e7ba      	b.n	103fc <zsock_poll_internal+0x158>
				retry = true;
   10486:	f04f 0b01 	mov.w	fp, #1
   1048a:	e7f8      	b.n	1047e <zsock_poll_internal+0x1da>
   1048c:	cccccccd 	.word	0xcccccccd
   10490:	fffff77e 	.word	0xfffff77e

00010494 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   10494:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(ops);
   10496:	b948      	cbnz	r0, 104ac <socket_offload_dns_register+0x18>
   10498:	490b      	ldr	r1, [pc, #44]	; (104c8 <socket_offload_dns_register+0x34>)
   1049a:	2313      	movs	r3, #19
   1049c:	4a0b      	ldr	r2, [pc, #44]	; (104cc <socket_offload_dns_register+0x38>)
   1049e:	480c      	ldr	r0, [pc, #48]	; (104d0 <socket_offload_dns_register+0x3c>)
   104a0:	f01a fc8a 	bl	2adb8 <assert_print>
   104a4:	2113      	movs	r1, #19
	__ASSERT_NO_MSG(dns_offload == NULL);
   104a6:	4809      	ldr	r0, [pc, #36]	; (104cc <socket_offload_dns_register+0x38>)
   104a8:	f01a fc7f 	bl	2adaa <assert_post_action>
   104ac:	4b09      	ldr	r3, [pc, #36]	; (104d4 <socket_offload_dns_register+0x40>)
   104ae:	681a      	ldr	r2, [r3, #0]
   104b0:	b13a      	cbz	r2, 104c2 <socket_offload_dns_register+0x2e>
   104b2:	4909      	ldr	r1, [pc, #36]	; (104d8 <socket_offload_dns_register+0x44>)
   104b4:	2314      	movs	r3, #20
   104b6:	4a05      	ldr	r2, [pc, #20]	; (104cc <socket_offload_dns_register+0x38>)
   104b8:	4805      	ldr	r0, [pc, #20]	; (104d0 <socket_offload_dns_register+0x3c>)
   104ba:	f01a fc7d 	bl	2adb8 <assert_print>
   104be:	2114      	movs	r1, #20
   104c0:	e7f1      	b.n	104a6 <socket_offload_dns_register+0x12>

	dns_offload = ops;
   104c2:	6018      	str	r0, [r3, #0]
}
   104c4:	bd08      	pop	{r3, pc}
   104c6:	bf00      	nop
   104c8:	0003b51d 	.word	0x0003b51d
   104cc:	000346e9 	.word	0x000346e9
   104d0:	00033bc2 	.word	0x00033bc2
   104d4:	2000e134 	.word	0x2000e134
   104d8:	00034724 	.word	0x00034724

000104dc <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   104dc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
   104de:	4c0d      	ldr	r4, [pc, #52]	; (10514 <socket_offload_getaddrinfo+0x38>)
   104e0:	6824      	ldr	r4, [r4, #0]
   104e2:	b94c      	cbnz	r4, 104f8 <socket_offload_getaddrinfo+0x1c>
   104e4:	490c      	ldr	r1, [pc, #48]	; (10518 <socket_offload_getaddrinfo+0x3c>)
   104e6:	231d      	movs	r3, #29
   104e8:	4a0c      	ldr	r2, [pc, #48]	; (1051c <socket_offload_getaddrinfo+0x40>)
   104ea:	480d      	ldr	r0, [pc, #52]	; (10520 <socket_offload_getaddrinfo+0x44>)
   104ec:	f01a fc64 	bl	2adb8 <assert_print>
   104f0:	211d      	movs	r1, #29
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   104f2:	480a      	ldr	r0, [pc, #40]	; (1051c <socket_offload_getaddrinfo+0x40>)
   104f4:	f01a fc59 	bl	2adaa <assert_post_action>
   104f8:	6824      	ldr	r4, [r4, #0]
   104fa:	b93c      	cbnz	r4, 1050c <socket_offload_getaddrinfo+0x30>
   104fc:	4909      	ldr	r1, [pc, #36]	; (10524 <socket_offload_getaddrinfo+0x48>)
   104fe:	231e      	movs	r3, #30
   10500:	4a06      	ldr	r2, [pc, #24]	; (1051c <socket_offload_getaddrinfo+0x40>)
   10502:	4807      	ldr	r0, [pc, #28]	; (10520 <socket_offload_getaddrinfo+0x44>)
   10504:	f01a fc58 	bl	2adb8 <assert_print>
   10508:	211e      	movs	r1, #30
   1050a:	e7f2      	b.n	104f2 <socket_offload_getaddrinfo+0x16>

	return dns_offload->getaddrinfo(node, service, hints, res);
   1050c:	46a4      	mov	ip, r4
}
   1050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   10512:	4760      	bx	ip
   10514:	2000e134 	.word	0x2000e134
   10518:	0003473f 	.word	0x0003473f
   1051c:	000346e9 	.word	0x000346e9
   10520:	00033bc2 	.word	0x00033bc2
   10524:	0003474b 	.word	0x0003474b

00010528 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   10528:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
   1052a:	4b0d      	ldr	r3, [pc, #52]	; (10560 <socket_offload_freeaddrinfo+0x38>)
   1052c:	681b      	ldr	r3, [r3, #0]
   1052e:	b94b      	cbnz	r3, 10544 <socket_offload_freeaddrinfo+0x1c>
   10530:	490c      	ldr	r1, [pc, #48]	; (10564 <socket_offload_freeaddrinfo+0x3c>)
   10532:	2325      	movs	r3, #37	; 0x25
   10534:	4a0c      	ldr	r2, [pc, #48]	; (10568 <socket_offload_freeaddrinfo+0x40>)
   10536:	480d      	ldr	r0, [pc, #52]	; (1056c <socket_offload_freeaddrinfo+0x44>)
   10538:	f01a fc3e 	bl	2adb8 <assert_print>
   1053c:	2125      	movs	r1, #37	; 0x25
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   1053e:	480a      	ldr	r0, [pc, #40]	; (10568 <socket_offload_freeaddrinfo+0x40>)
   10540:	f01a fc33 	bl	2adaa <assert_post_action>
   10544:	685b      	ldr	r3, [r3, #4]
   10546:	b93b      	cbnz	r3, 10558 <socket_offload_freeaddrinfo+0x30>
   10548:	4909      	ldr	r1, [pc, #36]	; (10570 <socket_offload_freeaddrinfo+0x48>)
   1054a:	2326      	movs	r3, #38	; 0x26
   1054c:	4a06      	ldr	r2, [pc, #24]	; (10568 <socket_offload_freeaddrinfo+0x40>)
   1054e:	4807      	ldr	r0, [pc, #28]	; (1056c <socket_offload_freeaddrinfo+0x44>)
   10550:	f01a fc32 	bl	2adb8 <assert_print>
   10554:	2126      	movs	r1, #38	; 0x26
   10556:	e7f2      	b.n	1053e <socket_offload_freeaddrinfo+0x16>

	return dns_offload->freeaddrinfo(res);
}
   10558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->freeaddrinfo(res);
   1055c:	4718      	bx	r3
   1055e:	bf00      	nop
   10560:	2000e134 	.word	0x2000e134
   10564:	0003473f 	.word	0x0003473f
   10568:	000346e9 	.word	0x000346e9
   1056c:	00033bc2 	.word	0x00033bc2
   10570:	00034764 	.word	0x00034764

00010574 <get_uuid_size.part.0>:

	dm->cur_chunk_len = 0;
}

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
   10574:	b580      	push	{r7, lr}
   10576:	af00      	add	r7, sp, #0
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
   10578:	b088      	sub	sp, #32
   1057a:	466a      	mov	r2, sp
   1057c:	4b07      	ldr	r3, [pc, #28]	; (1059c <get_uuid_size.part.0+0x28>)
   1057e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10582:	6153      	str	r3, [r2, #20]
   10584:	4b06      	ldr	r3, [pc, #24]	; (105a0 <get_uuid_size.part.0+0x2c>)
   10586:	4807      	ldr	r0, [pc, #28]	; (105a4 <get_uuid_size.part.0+0x30>)
   10588:	6193      	str	r3, [r2, #24]
   1058a:	2303      	movs	r3, #3
   1058c:	f842 3f10 	str.w	r3, [r2, #16]!
   10590:	f01a ff3e 	bl	2b410 <z_log_msg_static_create.constprop.0>
		return 0;
	}
}
   10594:	2000      	movs	r0, #0
   10596:	46bd      	mov	sp, r7
   10598:	bd80      	pop	{r7, pc}
   1059a:	bf00      	nop
   1059c:	00034791 	.word	0x00034791
   105a0:	00034baf 	.word	0x00034baf
   105a4:	00031bac 	.word	0x00031bac

000105a8 <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
   105a8:	b538      	push	{r3, r4, r5, lr}
	len = ROUND_UP(len, DATA_ALIGN);
   105aa:	1cc5      	adds	r5, r0, #3
   105ac:	f025 0503 	bic.w	r5, r5, #3
	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   105b0:	2d74      	cmp	r5, #116	; 0x74
   105b2:	d909      	bls.n	105c8 <user_data_alloc.constprop.0+0x20>
   105b4:	4917      	ldr	r1, [pc, #92]	; (10614 <user_data_alloc.constprop.0+0x6c>)
   105b6:	4818      	ldr	r0, [pc, #96]	; (10618 <user_data_alloc.constprop.0+0x70>)
   105b8:	235b      	movs	r3, #91	; 0x5b
   105ba:	4a18      	ldr	r2, [pc, #96]	; (1061c <user_data_alloc.constprop.0+0x74>)
   105bc:	f01a fbfc 	bl	2adb8 <assert_print>
   105c0:	215b      	movs	r1, #91	; 0x5b
   105c2:	4816      	ldr	r0, [pc, #88]	; (1061c <user_data_alloc.constprop.0+0x74>)
   105c4:	f01a fbf1 	bl	2adaa <assert_post_action>
	return list->head;
   105c8:	4c15      	ldr	r4, [pc, #84]	; (10620 <user_data_alloc.constprop.0+0x78>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
   105ca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   105ce:	b123      	cbz	r3, 105da <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   105d0:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   105d4:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   105d6:	2b74      	cmp	r3, #116	; 0x74
   105d8:	d919      	bls.n	1060e <user_data_alloc.constprop.0+0x66>
		item = k_calloc(1, sizeof(struct data_chunk_item));
   105da:	2178      	movs	r1, #120	; 0x78
   105dc:	2001      	movs	r0, #1
   105de:	f020 f900 	bl	307e2 <k_calloc>
		if (!item) {
   105e2:	b178      	cbz	r0, 10604 <user_data_alloc.constprop.0+0x5c>
	parent->next = child;
   105e4:	2300      	movs	r3, #0
   105e6:	6003      	str	r3, [r0, #0]
	return list->tail;
   105e8:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
Z_GENLIST_APPEND(slist, snode)
   105ec:	b95a      	cbnz	r2, 10606 <user_data_alloc.constprop.0+0x5e>
	list->head = node;
   105ee:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
		dm->cur_chunk_len = 0;
   105f2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	user_data_loc = &item->data[dm->cur_chunk_len];
   105f6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   105fa:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   105fc:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   105fe:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   10600:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
}
   10604:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   10606:	6010      	str	r0, [r2, #0]
	list->tail = node;
   10608:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
   1060c:	e7f1      	b.n	105f2 <user_data_alloc.constprop.0+0x4a>
	return list->tail;
   1060e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   10612:	e7f0      	b.n	105f6 <user_data_alloc.constprop.0+0x4e>
   10614:	000347d7 	.word	0x000347d7
   10618:	00033bc2 	.word	0x00033bc2
   1061c:	000347ac 	.word	0x000347ac
   10620:	2000e138 	.word	0x2000e138

00010624 <discovery_complete.constprop.0>:
   10624:	4808      	ldr	r0, [pc, #32]	; (10648 <discovery_complete.constprop.0+0x24>)
   10626:	e8d0 3fef 	ldaex	r3, [r0]
   1062a:	f043 0302 	orr.w	r3, r3, #2
   1062e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   10632:	2a00      	cmp	r2, #0
   10634:	d1f7      	bne.n	10626 <discovery_complete.constprop.0+0x2>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   10636:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10638:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
   1063c:	681b      	ldr	r3, [r3, #0]
   1063e:	b10b      	cbz	r3, 10644 <discovery_complete.constprop.0+0x20>
		dm->callback->completed(dm, dm->context);
   10640:	6841      	ldr	r1, [r0, #4]
   10642:	4718      	bx	r3
	}
}
   10644:	4770      	bx	lr
   10646:	bf00      	nop
   10648:	2000e270 	.word	0x2000e270

0001064c <get_uuid_size.isra.0>:
	switch (uuid->type) {
   1064c:	2802      	cmp	r0, #2
   1064e:	d901      	bls.n	10654 <get_uuid_size.isra.0+0x8>
   10650:	f7ff bf90 	b.w	10574 <get_uuid_size.part.0>
   10654:	4b01      	ldr	r3, [pc, #4]	; (1065c <get_uuid_size.isra.0+0x10>)
   10656:	5c18      	ldrb	r0, [r3, r0]
}
   10658:	4770      	bx	lr
   1065a:	bf00      	nop
   1065c:	00034bac 	.word	0x00034bac

00010660 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   10660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   10664:	4c20      	ldr	r4, [pc, #128]	; (106e8 <attr_store.constprop.0+0x88>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   10666:	4605      	mov	r5, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   10668:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   1066c:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   1066e:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   10670:	af00      	add	r7, sp, #0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   10672:	d915      	bls.n	106a0 <attr_store.constprop.0+0x40>
		LOG_ERR("No space for new attribute.");
   10674:	466c      	mov	r4, sp
   10676:	b088      	sub	sp, #32
   10678:	466a      	mov	r2, sp
   1067a:	4b1c      	ldr	r3, [pc, #112]	; (106ec <attr_store.constprop.0+0x8c>)
		LOG_ERR("No space for attribute data.");
   1067c:	6153      	str	r3, [r2, #20]
   1067e:	4b1c      	ldr	r3, [pc, #112]	; (106f0 <attr_store.constprop.0+0x90>)
   10680:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10684:	6193      	str	r3, [r2, #24]
   10686:	2303      	movs	r3, #3
   10688:	481a      	ldr	r0, [pc, #104]	; (106f4 <attr_store.constprop.0+0x94>)
   1068a:	f842 3f10 	str.w	r3, [r2, #16]!
   1068e:	f01a febf 	bl	2b410 <z_log_msg_static_create.constprop.0>
		return NULL;
   10692:	f04f 0800 	mov.w	r8, #0
   10696:	46a5      	mov	sp, r4
}
   10698:	4640      	mov	r0, r8
   1069a:	46bd      	mov	sp, r7
   1069c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   106a0:	6803      	ldr	r3, [r0, #0]
   106a2:	7818      	ldrb	r0, [r3, #0]
   106a4:	f7ff ffd2 	bl	1064c <get_uuid_size.isra.0>
   106a8:	4681      	mov	r9, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   106aa:	4430      	add	r0, r6
   106ac:	f7ff ff7c 	bl	105a8 <user_data_alloc.constprop.0>
	if (!attr_data) {
   106b0:	b920      	cbnz	r0, 106bc <attr_store.constprop.0+0x5c>
		LOG_ERR("No space for attribute data.");
   106b2:	466c      	mov	r4, sp
   106b4:	b088      	sub	sp, #32
   106b6:	466a      	mov	r2, sp
   106b8:	4b0f      	ldr	r3, [pc, #60]	; (106f8 <attr_store.constprop.0+0x98>)
   106ba:	e7df      	b.n	1067c <attr_store.constprop.0+0x1c>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   106bc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   106c0:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   106c2:	1c5a      	adds	r2, r3, #1
   106c4:	3303      	adds	r3, #3
   106c6:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   106ca:	00db      	lsls	r3, r3, #3
	cur_attr->handle = attr->handle;
   106cc:	8a2a      	ldrh	r2, [r5, #16]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   106ce:	f103 0804 	add.w	r8, r3, #4
   106d2:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
   106d4:	441c      	add	r4, r3
   106d6:	8122      	strh	r2, [r4, #8]
	cur_attr->perm = attr->perm;
   106d8:	8a6b      	ldrh	r3, [r5, #18]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   106da:	6060      	str	r0, [r4, #4]
	cur_attr->perm = attr->perm;
   106dc:	72a3      	strb	r3, [r4, #10]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   106de:	464a      	mov	r2, r9
   106e0:	6829      	ldr	r1, [r5, #0]
   106e2:	f020 f8ae 	bl	30842 <memcpy>
   106e6:	e7d7      	b.n	10698 <attr_store.constprop.0+0x38>
   106e8:	2000e138 	.word	0x2000e138
   106ec:	00034827 	.word	0x00034827
   106f0:	00034be4 	.word	0x00034be4
   106f4:	00031bac 	.word	0x00031bac
   106f8:	00034847 	.word	0x00034847

000106fc <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!uuid) {
   106fe:	4605      	mov	r5, r0
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   10700:	af00      	add	r7, sp, #0
	if (!uuid) {
   10702:	b998      	cbnz	r0, 1072c <uuid_store.constprop.0+0x30>
		LOG_ERR("Uninitialized UUID.");
   10704:	466c      	mov	r4, sp
   10706:	b088      	sub	sp, #32
   10708:	466a      	mov	r2, sp
   1070a:	4b11      	ldr	r3, [pc, #68]	; (10750 <uuid_store.constprop.0+0x54>)
		LOG_ERR("No space for a UUID.");
   1070c:	6153      	str	r3, [r2, #20]
   1070e:	4b11      	ldr	r3, [pc, #68]	; (10754 <uuid_store.constprop.0+0x58>)
   10710:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10714:	6193      	str	r3, [r2, #24]
   10716:	2303      	movs	r3, #3
   10718:	480f      	ldr	r0, [pc, #60]	; (10758 <uuid_store.constprop.0+0x5c>)
   1071a:	f842 3f10 	str.w	r3, [r2, #16]!
   1071e:	f01a fe77 	bl	2b410 <z_log_msg_static_create.constprop.0>
   10722:	46a5      	mov	sp, r4
		return NULL;
   10724:	2400      	movs	r4, #0
}
   10726:	4620      	mov	r0, r4
   10728:	46bd      	mov	sp, r7
   1072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	size_t size = get_uuid_size(uuid);
   1072c:	7800      	ldrb	r0, [r0, #0]
   1072e:	f7ff ff8d 	bl	1064c <get_uuid_size.isra.0>
   10732:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
   10734:	f7ff ff38 	bl	105a8 <user_data_alloc.constprop.0>
   10738:	4604      	mov	r4, r0
	if (!buffer) {
   1073a:	b920      	cbnz	r0, 10746 <uuid_store.constprop.0+0x4a>
		LOG_ERR("No space for a UUID.");
   1073c:	466c      	mov	r4, sp
   1073e:	b088      	sub	sp, #32
   10740:	466a      	mov	r2, sp
   10742:	4b06      	ldr	r3, [pc, #24]	; (1075c <uuid_store.constprop.0+0x60>)
   10744:	e7e2      	b.n	1070c <uuid_store.constprop.0+0x10>
   10746:	4632      	mov	r2, r6
   10748:	4629      	mov	r1, r5
   1074a:	f020 f87a 	bl	30842 <memcpy>
   1074e:	e7ea      	b.n	10726 <uuid_store.constprop.0+0x2a>
   10750:	00034868 	.word	0x00034868
   10754:	00034bd9 	.word	0x00034bd9
   10758:	00031bac 	.word	0x00031bac
   1075c:	00034880 	.word	0x00034880

00010760 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   10760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10764:	b083      	sub	sp, #12
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   10766:	4ca5      	ldr	r4, [pc, #660]	; (109fc <discovery_callback+0x29c>)
{
   10768:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   1076a:	6823      	ldr	r3, [r4, #0]
{
   1076c:	af00      	add	r7, sp, #0
	if (conn != bt_gatt_dm_inst.conn) {
   1076e:	4283      	cmp	r3, r0
   10770:	d019      	beq.n	107a6 <discovery_callback+0x46>
		LOG_ERR("Unexpected conn object. Aborting.");
   10772:	466d      	mov	r5, sp
   10774:	b088      	sub	sp, #32
   10776:	466a      	mov	r2, sp
   10778:	4ba1      	ldr	r3, [pc, #644]	; (10a00 <discovery_callback+0x2a0>)
   1077a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1077e:	6153      	str	r3, [r2, #20]
   10780:	4ba0      	ldr	r3, [pc, #640]	; (10a04 <discovery_callback+0x2a4>)
   10782:	48a1      	ldr	r0, [pc, #644]	; (10a08 <discovery_callback+0x2a8>)
   10784:	6193      	str	r3, [r2, #24]
   10786:	2303      	movs	r3, #3
   10788:	f842 3f10 	str.w	r3, [r2, #16]!
   1078c:	f01a fe40 	bl	2b410 <z_log_msg_static_create.constprop.0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   10790:	f06f 010d 	mvn.w	r1, #13
   10794:	46ad      	mov	sp, r5
   10796:	4620      	mov	r0, r4
   10798:	f01a fe3d 	bl	2b416 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   1079c:	2000      	movs	r0, #0

		break;
	}

	return BT_GATT_ITER_STOP;
}
   1079e:	370c      	adds	r7, #12
   107a0:	46bd      	mov	sp, r7
   107a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (params->type) {
   107a6:	7c13      	ldrb	r3, [r2, #16]
   107a8:	2b03      	cmp	r3, #3
   107aa:	f000 80ef 	beq.w	1098c <discovery_callback+0x22c>
   107ae:	d80e      	bhi.n	107ce <discovery_callback+0x6e>
   107b0:	2b02      	cmp	r3, #2
   107b2:	d135      	bne.n	10820 <discovery_callback+0xc0>
		__ASSERT(false, "Unknown param type.");
   107b4:	4995      	ldr	r1, [pc, #596]	; (10a0c <discovery_callback+0x2ac>)
   107b6:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   107ba:	4a95      	ldr	r2, [pc, #596]	; (10a10 <discovery_callback+0x2b0>)
   107bc:	4895      	ldr	r0, [pc, #596]	; (10a14 <discovery_callback+0x2b4>)
   107be:	f01a fafb 	bl	2adb8 <assert_print>
   107c2:	4895      	ldr	r0, [pc, #596]	; (10a18 <discovery_callback+0x2b8>)
   107c4:	f01a faf8 	bl	2adb8 <assert_print>
   107c8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   107cc:	e053      	b.n	10876 <discovery_callback+0x116>
	switch (params->type) {
   107ce:	2b05      	cmp	r3, #5
   107d0:	d1f0      	bne.n	107b4 <discovery_callback+0x54>
	if (!attr) {
   107d2:	2900      	cmp	r1, #0
   107d4:	f040 80aa 	bne.w	1092c <discovery_callback+0x1cc>
		if (dm->cur_attr_id > 1) {
   107d8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   107dc:	2b01      	cmp	r3, #1
   107de:	f240 8086 	bls.w	108ee <discovery_callback+0x18e>
				dm->attrs[0].handle + 1;
   107e2:	8c23      	ldrh	r3, [r4, #32]
			int err = bt_gatt_discover(dm->conn,
   107e4:	f104 0108 	add.w	r1, r4, #8
				dm->attrs[0].handle + 1;
   107e8:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   107ea:	8223      	strh	r3, [r4, #16]
			dm->discover_params.type =
   107ec:	2303      	movs	r3, #3
   107ee:	7623      	strb	r3, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
   107f0:	f008 f936 	bl	18a60 <bt_gatt_discover>
			if (err) {
   107f4:	4605      	mov	r5, r0
   107f6:	2800      	cmp	r0, #0
   107f8:	d0d0      	beq.n	1079c <discovery_callback+0x3c>
				LOG_ERR("Characteristic discover failed,"
   107fa:	466e      	mov	r6, sp
   107fc:	b088      	sub	sp, #32
   107fe:	466a      	mov	r2, sp
   10800:	4b86      	ldr	r3, [pc, #536]	; (10a1c <discovery_callback+0x2bc>)
   10802:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10806:	6153      	str	r3, [r2, #20]
   10808:	4b85      	ldr	r3, [pc, #532]	; (10a20 <discovery_callback+0x2c0>)
   1080a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1080e:	2304      	movs	r3, #4
   10810:	487d      	ldr	r0, [pc, #500]	; (10a08 <discovery_callback+0x2a8>)
   10812:	f842 3f10 	str.w	r3, [r2, #16]!
   10816:	f01a fdfb 	bl	2b410 <z_log_msg_static_create.constprop.0>
				discovery_complete_error(dm, err);
   1081a:	4629      	mov	r1, r5
   1081c:	46b5      	mov	sp, r6
   1081e:	e7ba      	b.n	10796 <discovery_callback+0x36>
	if (!attr) {
   10820:	b919      	cbnz	r1, 1082a <discovery_callback+0xca>
		discovery_complete_not_found(dm);
   10822:	4620      	mov	r0, r4
   10824:	f01a fe0d 	bl	2b442 <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
   10828:	e7b8      	b.n	1079c <discovery_callback+0x3c>
	struct bt_gatt_service_val *service_val = attr->user_data;
   1082a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   1082e:	4628      	mov	r0, r5
   10830:	2108      	movs	r1, #8
   10832:	f7ff ff15 	bl	10660 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   10836:	f04f 0900 	mov.w	r9, #0
   1083a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
   1083e:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   10840:	4639      	mov	r1, r7
   10842:	6828      	ldr	r0, [r5, #0]
   10844:	f887 9000 	strb.w	r9, [r7]
   10848:	807b      	strh	r3, [r7, #2]
   1084a:	f01b fb8d 	bl	2bf68 <bt_uuid_cmp>
   1084e:	b1a8      	cbz	r0, 1087c <discovery_callback+0x11c>
   10850:	f642 0301 	movw	r3, #10241	; 0x2801
   10854:	6828      	ldr	r0, [r5, #0]
   10856:	f887 9004 	strb.w	r9, [r7, #4]
   1085a:	80fb      	strh	r3, [r7, #6]
   1085c:	1d39      	adds	r1, r7, #4
   1085e:	f01b fb83 	bl	2bf68 <bt_uuid_cmp>
   10862:	b158      	cbz	r0, 1087c <discovery_callback+0x11c>
   10864:	496f      	ldr	r1, [pc, #444]	; (10a24 <discovery_callback+0x2c4>)
   10866:	f240 1327 	movw	r3, #295	; 0x127
   1086a:	4a69      	ldr	r2, [pc, #420]	; (10a10 <discovery_callback+0x2b0>)
   1086c:	4869      	ldr	r0, [pc, #420]	; (10a14 <discovery_callback+0x2b4>)
   1086e:	f01a faa3 	bl	2adb8 <assert_print>
   10872:	f240 1127 	movw	r1, #295	; 0x127
	__ASSERT_NO_MSG(cur_service_val != NULL);
   10876:	4866      	ldr	r0, [pc, #408]	; (10a10 <discovery_callback+0x2b0>)
   10878:	f01a fa97 	bl	2adaa <assert_post_action>
	if (!cur_attr) {
   1087c:	b99e      	cbnz	r6, 108a6 <discovery_callback+0x146>
		LOG_ERR("Not enough memory for service attribute.");
   1087e:	466c      	mov	r4, sp
   10880:	b088      	sub	sp, #32
   10882:	466a      	mov	r2, sp
   10884:	4b68      	ldr	r3, [pc, #416]	; (10a28 <discovery_callback+0x2c8>)
		LOG_ERR("Not enough memory for service attribute data.");
   10886:	6153      	str	r3, [r2, #20]
   10888:	4b68      	ldr	r3, [pc, #416]	; (10a2c <discovery_callback+0x2cc>)
   1088a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1088e:	6193      	str	r3, [r2, #24]
   10890:	2303      	movs	r3, #3
   10892:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   10896:	485c      	ldr	r0, [pc, #368]	; (10a08 <discovery_callback+0x2a8>)
   10898:	f01a fdba 	bl	2b410 <z_log_msg_static_create.constprop.0>
		discovery_complete_error(dm, -ENOMEM);
   1089c:	f06f 010b 	mvn.w	r1, #11
   108a0:	46a5      	mov	sp, r4
   108a2:	4856      	ldr	r0, [pc, #344]	; (109fc <discovery_callback+0x29c>)
   108a4:	e778      	b.n	10798 <discovery_callback+0x38>
		bt_gatt_dm_attr_service_val(cur_attr);
   108a6:	4630      	mov	r0, r6
   108a8:	f01a fddf 	bl	2b46a <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   108ac:	4605      	mov	r5, r0
   108ae:	b948      	cbnz	r0, 108c4 <discovery_callback+0x164>
   108b0:	495f      	ldr	r1, [pc, #380]	; (10a30 <discovery_callback+0x2d0>)
   108b2:	f240 133b 	movw	r3, #315	; 0x13b
   108b6:	4a56      	ldr	r2, [pc, #344]	; (10a10 <discovery_callback+0x2b0>)
   108b8:	4856      	ldr	r0, [pc, #344]	; (10a14 <discovery_callback+0x2b4>)
   108ba:	f01a fa7d 	bl	2adb8 <assert_print>
   108be:	f240 113b 	movw	r1, #315	; 0x13b
   108c2:	e7d8      	b.n	10876 <discovery_callback+0x116>
   108c4:	f8d8 3000 	ldr.w	r3, [r8]
   108c8:	6003      	str	r3, [r0, #0]
   108ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   108ce:	6043      	str	r3, [r0, #4]
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   108d0:	6800      	ldr	r0, [r0, #0]
   108d2:	f7ff ff13 	bl	106fc <uuid_store.constprop.0>
   108d6:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   108d8:	b920      	cbnz	r0, 108e4 <discovery_callback+0x184>
		LOG_ERR("Not enough memory for service attribute data.");
   108da:	466c      	mov	r4, sp
   108dc:	b088      	sub	sp, #32
   108de:	466a      	mov	r2, sp
   108e0:	4b54      	ldr	r3, [pc, #336]	; (10a34 <discovery_callback+0x2d4>)
   108e2:	e7d0      	b.n	10886 <discovery_callback+0x126>
	dm->discover_params.end_handle = cur_service_val->end_handle;
   108e4:	88ab      	ldrh	r3, [r5, #4]
   108e6:	82e3      	strh	r3, [r4, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
   108e8:	88b2      	ldrh	r2, [r6, #4]
   108ea:	429a      	cmp	r2, r3
   108ec:	d102      	bne.n	108f4 <discovery_callback+0x194>
		discovery_complete(dm);
   108ee:	f7ff fe99 	bl	10624 <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
   108f2:	e753      	b.n	1079c <discovery_callback+0x3c>
	dm->discover_params.uuid         = NULL;
   108f4:	2300      	movs	r3, #0
   108f6:	60a3      	str	r3, [r4, #8]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   108f8:	2305      	movs	r3, #5
   108fa:	7623      	strb	r3, [r4, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   108fc:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   108fe:	494e      	ldr	r1, [pc, #312]	; (10a38 <discovery_callback+0x2d8>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
   10900:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   10902:	6820      	ldr	r0, [r4, #0]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   10904:	8223      	strh	r3, [r4, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   10906:	f008 f8ab 	bl	18a60 <bt_gatt_discover>
	if (err) {
   1090a:	2800      	cmp	r0, #0
   1090c:	f43f af46 	beq.w	1079c <discovery_callback+0x3c>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   10910:	466c      	mov	r4, sp
   10912:	b088      	sub	sp, #32
   10914:	466a      	mov	r2, sp
   10916:	4b49      	ldr	r3, [pc, #292]	; (10a3c <discovery_callback+0x2dc>)
   10918:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1091c:	6153      	str	r3, [r2, #20]
   1091e:	4b43      	ldr	r3, [pc, #268]	; (10a2c <discovery_callback+0x2cc>)
   10920:	e9c2 3006 	strd	r3, r0, [r2, #24]
   10924:	2304      	movs	r3, #4
   10926:	f842 3f10 	str.w	r3, [r2, #16]!
   1092a:	e7b4      	b.n	10896 <discovery_callback+0x136>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1092c:	2600      	movs	r6, #0
   1092e:	f642 0303 	movw	r3, #10243	; 0x2803
   10932:	6828      	ldr	r0, [r5, #0]
   10934:	713e      	strb	r6, [r7, #4]
   10936:	80fb      	strh	r3, [r7, #6]
   10938:	1d39      	adds	r1, r7, #4
   1093a:	f01b fb15 	bl	2bf68 <bt_uuid_cmp>
   1093e:	b950      	cbnz	r0, 10956 <discovery_callback+0x1f6>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   10940:	2108      	movs	r1, #8
   10942:	4628      	mov	r0, r5
   10944:	f7ff fe8c 	bl	10660 <attr_store.constprop.0>
   10948:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   1094a:	f01a fdae 	bl	2b4aa <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   1094e:	6823      	ldr	r3, [r4, #0]
   10950:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
   10952:	2001      	movs	r0, #1
   10954:	e723      	b.n	1079e <discovery_callback+0x3e>
		cur_attr = attr_store(dm, attr, 0);
   10956:	4631      	mov	r1, r6
   10958:	4628      	mov	r0, r5
   1095a:	f7ff fe81 	bl	10660 <attr_store.constprop.0>
	if (!cur_attr) {
   1095e:	2800      	cmp	r0, #0
   10960:	d1f7      	bne.n	10952 <discovery_callback+0x1f2>
		LOG_ERR("Not enough memory for next attribute descriptor"
   10962:	8a2b      	ldrh	r3, [r5, #16]
   10964:	466d      	mov	r5, sp
   10966:	b088      	sub	sp, #32
   10968:	466a      	mov	r2, sp
   1096a:	4935      	ldr	r1, [pc, #212]	; (10a40 <discovery_callback+0x2e0>)
   1096c:	4826      	ldr	r0, [pc, #152]	; (10a08 <discovery_callback+0x2a8>)
   1096e:	6151      	str	r1, [r2, #20]
   10970:	492b      	ldr	r1, [pc, #172]	; (10a20 <discovery_callback+0x2c0>)
   10972:	e9c2 1306 	strd	r1, r3, [r2, #24]
   10976:	2304      	movs	r3, #4
   10978:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1097c:	f842 3f10 	str.w	r3, [r2, #16]!
   10980:	f01a fd46 	bl	2b410 <z_log_msg_static_create.constprop.0>
   10984:	46ad      	mov	sp, r5
		discovery_complete_error(dm, -ENOMEM);
   10986:	f06f 010b 	mvn.w	r1, #11
   1098a:	e704      	b.n	10796 <discovery_callback+0x36>
	if (!attr) {
   1098c:	2900      	cmp	r1, #0
   1098e:	d0ae      	beq.n	108ee <discovery_callback+0x18e>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   10990:	2300      	movs	r3, #0
   10992:	713b      	strb	r3, [r7, #4]
   10994:	f642 0303 	movw	r3, #10243	; 0x2803
   10998:	6828      	ldr	r0, [r5, #0]
   1099a:	80fb      	strh	r3, [r7, #6]
   1099c:	1d39      	adds	r1, r7, #4
   1099e:	f01b fae3 	bl	2bf68 <bt_uuid_cmp>
   109a2:	b148      	cbz	r0, 109b8 <discovery_callback+0x258>
   109a4:	4927      	ldr	r1, [pc, #156]	; (10a44 <discovery_callback+0x2e4>)
   109a6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   109aa:	4a19      	ldr	r2, [pc, #100]	; (10a10 <discovery_callback+0x2b0>)
   109ac:	4819      	ldr	r0, [pc, #100]	; (10a14 <discovery_callback+0x2b4>)
   109ae:	f01a fa03 	bl	2adb8 <assert_print>
   109b2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   109b6:	e75e      	b.n	10876 <discovery_callback+0x116>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   109b8:	4620      	mov	r0, r4
   109ba:	8a29      	ldrh	r1, [r5, #16]
   109bc:	f01a fce8 	bl	2b390 <attr_find_by_handle>
	if (!cur_attr) {
   109c0:	b910      	cbnz	r0, 109c8 <discovery_callback+0x268>
		discovery_complete_error(dm, -ESRCH);
   109c2:	f06f 0102 	mvn.w	r1, #2
   109c6:	e6e6      	b.n	10796 <discovery_callback+0x36>
	gatt_chrc = attr->user_data;
   109c8:	68ee      	ldr	r6, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   109ca:	f01a fd6e 	bl	2b4aa <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   109ce:	4605      	mov	r5, r0
   109d0:	b948      	cbnz	r0, 109e6 <discovery_callback+0x286>
   109d2:	491d      	ldr	r1, [pc, #116]	; (10a48 <discovery_callback+0x2e8>)
   109d4:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   109d8:	4a0d      	ldr	r2, [pc, #52]	; (10a10 <discovery_callback+0x2b0>)
   109da:	480e      	ldr	r0, [pc, #56]	; (10a14 <discovery_callback+0x2b4>)
   109dc:	f01a f9ec 	bl	2adb8 <assert_print>
   109e0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   109e4:	e747      	b.n	10876 <discovery_callback+0x116>
   109e6:	6833      	ldr	r3, [r6, #0]
   109e8:	6003      	str	r3, [r0, #0]
   109ea:	6873      	ldr	r3, [r6, #4]
   109ec:	6043      	str	r3, [r0, #4]
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   109ee:	6800      	ldr	r0, [r0, #0]
   109f0:	f7ff fe84 	bl	106fc <uuid_store.constprop.0>
   109f4:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   109f6:	2800      	cmp	r0, #0
   109f8:	d1ab      	bne.n	10952 <discovery_callback+0x1f2>
   109fa:	e7c4      	b.n	10986 <discovery_callback+0x226>
   109fc:	2000e138 	.word	0x2000e138
   10a00:	00034899 	.word	0x00034899
   10a04:	00034c09 	.word	0x00034c09
   10a08:	00031bac 	.word	0x00031bac
   10a0c:	000386dc 	.word	0x000386dc
   10a10:	000347ac 	.word	0x000347ac
   10a14:	00033bc2 	.word	0x00033bc2
   10a18:	00034b76 	.word	0x00034b76
   10a1c:	00034a69 	.word	0x00034a69
   10a20:	00034bbd 	.word	0x00034bbd
   10a24:	000348bf 	.word	0x000348bf
   10a28:	000349c0 	.word	0x000349c0
   10a2c:	00034bef 	.word	0x00034bef
   10a30:	000349ed 	.word	0x000349ed
   10a34:	00034a0c 	.word	0x00034a0c
   10a38:	2000e140 	.word	0x2000e140
   10a3c:	00034a3e 	.word	0x00034a3e
   10a40:	00034a98 	.word	0x00034a98
   10a44:	00034ada 	.word	0x00034ada
   10a48:	00034b59 	.word	0x00034b59

00010a4c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   10a4c:	b570      	push	{r4, r5, r6, lr}
   10a4e:	4605      	mov	r5, r0
   10a50:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   10a52:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   10a54:	4621      	mov	r1, r4
   10a56:	4628      	mov	r0, r5
   10a58:	f01a fd3d 	bl	2b4d6 <bt_gatt_dm_char_next>
   10a5c:	4604      	mov	r4, r0
   10a5e:	b1a0      	cbz	r0, 10a8a <bt_gatt_dm_char_by_uuid+0x3e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   10a60:	f01a fd23 	bl	2b4aa <bt_gatt_dm_attr_chrc_val>

		__ASSERT_NO_MSG(chrc != NULL);
   10a64:	b958      	cbnz	r0, 10a7e <bt_gatt_dm_char_by_uuid+0x32>
   10a66:	490a      	ldr	r1, [pc, #40]	; (10a90 <bt_gatt_dm_char_by_uuid+0x44>)
   10a68:	480a      	ldr	r0, [pc, #40]	; (10a94 <bt_gatt_dm_char_by_uuid+0x48>)
   10a6a:	f44f 7307 	mov.w	r3, #540	; 0x21c
   10a6e:	4a0a      	ldr	r2, [pc, #40]	; (10a98 <bt_gatt_dm_char_by_uuid+0x4c>)
   10a70:	f01a f9a2 	bl	2adb8 <assert_print>
   10a74:	f44f 7107 	mov.w	r1, #540	; 0x21c
   10a78:	4807      	ldr	r0, [pc, #28]	; (10a98 <bt_gatt_dm_char_by_uuid+0x4c>)
   10a7a:	f01a f996 	bl	2adaa <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   10a7e:	6801      	ldr	r1, [r0, #0]
   10a80:	4630      	mov	r0, r6
   10a82:	f01b fa71 	bl	2bf68 <bt_uuid_cmp>
   10a86:	2800      	cmp	r0, #0
   10a88:	d1e4      	bne.n	10a54 <bt_gatt_dm_char_by_uuid+0x8>
			return curr;
		}
	}

	return NULL;
}
   10a8a:	4620      	mov	r0, r4
   10a8c:	bd70      	pop	{r4, r5, r6, pc}
   10a8e:	bf00      	nop
   10a90:	00034b62 	.word	0x00034b62
   10a94:	00033bc2 	.word	0x00033bc2
   10a98:	000347ac 	.word	0x000347ac

00010a9c <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   10a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a9e:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   10aa0:	460d      	mov	r5, r1
{
   10aa2:	af00      	add	r7, sp, #0
	if (svc_uuid &&
   10aa4:	b119      	cbz	r1, 10aae <bt_gatt_dm_start+0x12>
   10aa6:	7809      	ldrb	r1, [r1, #0]
   10aa8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   10aac:	d156      	bne.n	10b5c <bt_gatt_dm_start+0xc0>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   10aae:	2a00      	cmp	r2, #0
   10ab0:	d054      	beq.n	10b5c <bt_gatt_dm_start+0xc0>
   10ab2:	4c2d      	ldr	r4, [pc, #180]	; (10b68 <bt_gatt_dm_start+0xcc>)
   10ab4:	e8d4 1fef 	ldaex	r1, [r4]
   10ab8:	f041 0001 	orr.w	r0, r1, #1
   10abc:	e8c4 0fec 	stlex	ip, r0, [r4]
   10ac0:	f1bc 0f00 	cmp.w	ip, #0
   10ac4:	d1f6      	bne.n	10ab4 <bt_gatt_dm_start+0x18>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   10ac6:	f011 0101 	ands.w	r1, r1, #1
   10aca:	d14a      	bne.n	10b62 <bt_gatt_dm_start+0xc6>
		return -EALREADY;
	}

	dm->conn = conn;
   10acc:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   10ad0:	2d00      	cmp	r5, #0
	dm->context = context;
   10ad2:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   10ad6:	bf14      	ite	ne
   10ad8:	2301      	movne	r3, #1
   10ada:	2300      	moveq	r3, #0
	list->tail = NULL;
   10adc:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
   10ae0:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	dm->callback = cb;
   10ae4:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
   10ae8:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
   10aec:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158

	if (svc_uuid) {
   10af0:	d00b      	beq.n	10b0a <bt_gatt_dm_start+0x6e>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
   10af2:	7828      	ldrb	r0, [r5, #0]
   10af4:	f7ff fdaa 	bl	1064c <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   10af8:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
   10afa:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   10afc:	2328      	movs	r3, #40	; 0x28
   10afe:	f504 709e 	add.w	r0, r4, #316	; 0x13c
   10b02:	f01f feab 	bl	3085c <__memcpy_chk>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   10b06:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
   10b0a:	4b18      	ldr	r3, [pc, #96]	; (10b6c <bt_gatt_dm_start+0xd0>)
	dm->discover_params.start_handle = 0x0001;
	dm->discover_params.end_handle = 0xffff;
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   10b0c:	4630      	mov	r0, r6
	dm->discover_params.func = discovery_callback;
   10b0e:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   10b10:	2301      	movs	r3, #1
   10b12:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   10b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10b18:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   10b1a:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   10b1c:	4914      	ldr	r1, [pc, #80]	; (10b70 <bt_gatt_dm_start+0xd4>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   10b1e:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   10b20:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   10b22:	f007 ff9d 	bl	18a60 <bt_gatt_discover>
	if (err) {
   10b26:	4604      	mov	r4, r0
   10b28:	b1a8      	cbz	r0, 10b56 <bt_gatt_dm_start+0xba>
		LOG_ERR("Discover failed, error: %d.", err);
   10b2a:	466d      	mov	r5, sp
   10b2c:	b088      	sub	sp, #32
   10b2e:	466a      	mov	r2, sp
   10b30:	4b10      	ldr	r3, [pc, #64]	; (10b74 <bt_gatt_dm_start+0xd8>)
   10b32:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10b36:	6153      	str	r3, [r2, #20]
   10b38:	4b0f      	ldr	r3, [pc, #60]	; (10b78 <bt_gatt_dm_start+0xdc>)
   10b3a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   10b3e:	2304      	movs	r3, #4
   10b40:	480e      	ldr	r0, [pc, #56]	; (10b7c <bt_gatt_dm_start+0xe0>)
   10b42:	f842 3f10 	str.w	r3, [r2, #16]!
   10b46:	f01a fc63 	bl	2b410 <z_log_msg_static_create.constprop.0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b4a:	f06f 0101 	mvn.w	r1, #1
   10b4e:	46ad      	mov	sp, r5
   10b50:	4805      	ldr	r0, [pc, #20]	; (10b68 <bt_gatt_dm_start+0xcc>)
   10b52:	f01a fc52 	bl	2b3fa <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   10b56:	4620      	mov	r0, r4
   10b58:	46bd      	mov	sp, r7
   10b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10b5c:	f06f 0415 	mvn.w	r4, #21
   10b60:	e7f9      	b.n	10b56 <bt_gatt_dm_start+0xba>
		return -EALREADY;
   10b62:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10b66:	e7f6      	b.n	10b56 <bt_gatt_dm_start+0xba>
   10b68:	2000e270 	.word	0x2000e270
   10b6c:	00010761 	.word	0x00010761
   10b70:	2000e140 	.word	0x2000e140
   10b74:	00034b8c 	.word	0x00034b8c
   10b78:	00034c1c 	.word	0x00034c1c
   10b7c:	00031bac 	.word	0x00031bac

00010b80 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   10b80:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10b82:	4c06      	ldr	r4, [pc, #24]	; (10b9c <scan_default_param_set+0x1c>)
{
   10b84:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10b86:	ad01      	add	r5, sp, #4
   10b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10b8c:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   10b8e:	4c04      	ldr	r4, [pc, #16]	; (10ba0 <scan_default_param_set+0x20>)
   10b90:	ad01      	add	r5, sp, #4
   10b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10b96:	6026      	str	r6, [r4, #0]
}
   10b98:	b006      	add	sp, #24
   10b9a:	bd70      	pop	{r4, r5, r6, pc}
   10b9c:	00031d1c 	.word	0x00031d1c
   10ba0:	2000e2d4 	.word	0x2000e2d4

00010ba4 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   10ba4:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   10ba8:	4b02      	ldr	r3, [pc, #8]	; (10bb4 <scan_default_conn_param_set+0x10>)
   10baa:	4903      	ldr	r1, [pc, #12]	; (10bb8 <scan_default_conn_param_set+0x14>)
   10bac:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
   10bb0:	4770      	bx	lr
   10bb2:	bf00      	nop
   10bb4:	2000e2a4 	.word	0x2000e2a4
   10bb8:	00280018 	.word	0x00280018

00010bbc <uuid_check>:
{
   10bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   10bc0:	4e2b      	ldr	r6, [pc, #172]	; (10c70 <uuid_check+0xb4>)
{
   10bc2:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   10bc4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
{
   10bc8:	4604      	mov	r4, r0
   10bca:	4688      	mov	r8, r1
   10bcc:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
   10bce:	b313      	cbz	r3, 10c16 <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   10bd0:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   10bd2:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
   10bd4:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   10bd6:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   10bda:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   10bde:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   10be0:	4557      	cmp	r7, sl
   10be2:	d305      	bcc.n	10bf0 <uuid_check+0x34>
	control->filter_status.uuid.count = uuid_match_cnt;
   10be4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   10be8:	f1bb 0f00 	cmp.w	fp, #0
   10bec:	d111      	bne.n	10c12 <uuid_check+0x56>
   10bee:	e031      	b.n	10c54 <uuid_check+0x98>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   10bf0:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
   10bf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10bf8:	9a03      	ldr	r2, [sp, #12]
   10bfa:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   10bfc:	4b1d      	ldr	r3, [pc, #116]	; (10c74 <uuid_check+0xb8>)
   10bfe:	5c9b      	ldrb	r3, [r3, r2]
   10c00:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   10c02:	9b01      	ldr	r3, [sp, #4]
   10c04:	4599      	cmp	r9, r3
   10c06:	d309      	bcc.n	10c1c <uuid_check+0x60>
		} else if (all_filters_mode) {
   10c08:	f1bb 0f00 	cmp.w	fp, #0
   10c0c:	d02c      	beq.n	10c68 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   10c0e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   10c12:	45aa      	cmp	sl, r5
   10c14:	d020      	beq.n	10c58 <uuid_check+0x9c>
}
   10c16:	b00b      	add	sp, #44	; 0x2c
   10c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   10c1c:	9b02      	ldr	r3, [sp, #8]
   10c1e:	9a00      	ldr	r2, [sp, #0]
   10c20:	eb03 0109 	add.w	r1, r3, r9
   10c24:	a805      	add	r0, sp, #20
   10c26:	f01b f9cd 	bl	2bfc4 <bt_uuid_create>
   10c2a:	2800      	cmp	r0, #0
   10c2c:	d0ec      	beq.n	10c08 <uuid_check+0x4c>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   10c2e:	68b1      	ldr	r1, [r6, #8]
   10c30:	a805      	add	r0, sp, #20
   10c32:	f01b f999 	bl	2bf68 <bt_uuid_cmp>
   10c36:	b110      	cbz	r0, 10c3e <uuid_check+0x82>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   10c38:	9b00      	ldr	r3, [sp, #0]
   10c3a:	4499      	add	r9, r3
   10c3c:	e7e1      	b.n	10c02 <uuid_check+0x46>
				uuid_filter->uuid[i].uuid;
   10c3e:	68b1      	ldr	r1, [r6, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   10c40:	eb04 0285 	add.w	r2, r4, r5, lsl #2
			uuid_match_cnt++;
   10c44:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   10c46:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   10c48:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   10c4a:	f1bb 0f00 	cmp.w	fp, #0
   10c4e:	d10b      	bne.n	10c68 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   10c50:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   10c54:	2d00      	cmp	r5, #0
   10c56:	d0de      	beq.n	10c16 <uuid_check+0x5a>
			control->filter_match_cnt++;
   10c58:	7863      	ldrb	r3, [r4, #1]
   10c5a:	3301      	adds	r3, #1
   10c5c:	7063      	strb	r3, [r4, #1]
			control->filter_status.uuid.match = true;
   10c5e:	2301      	movs	r3, #1
   10c60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			control->filter_match = true;
   10c64:	70a3      	strb	r3, [r4, #2]
}
   10c66:	e7d6      	b.n	10c16 <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   10c68:	3701      	adds	r7, #1
   10c6a:	3618      	adds	r6, #24
   10c6c:	e7b8      	b.n	10be0 <uuid_check+0x24>
   10c6e:	bf00      	nop
   10c70:	2000e2a4 	.word	0x2000e2a4
   10c74:	00034c38 	.word	0x00034c38

00010c78 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   10c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c7a:	4605      	mov	r5, r0
   10c7c:	460e      	mov	r6, r1
   10c7e:	4617      	mov	r7, r2
	return list->head;
   10c80:	4b07      	ldr	r3, [pc, #28]	; (10ca0 <notify_filter_matched.constprop.0+0x28>)
   10c82:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10c84:	b154      	cbz	r4, 10c9c <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
   10c86:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10c8a:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
   10c8c:	681b      	ldr	r3, [r3, #0]
   10c8e:	b11b      	cbz	r3, 10c98 <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
   10c90:	463a      	mov	r2, r7
   10c92:	4631      	mov	r1, r6
   10c94:	4628      	mov	r0, r5
   10c96:	4798      	blx	r3
	return node->next;
   10c98:	6864      	ldr	r4, [r4, #4]
   10c9a:	e7f3      	b.n	10c84 <notify_filter_matched.constprop.0+0xc>
}
   10c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c9e:	bf00      	nop
   10ca0:	2000e29c 	.word	0x2000e29c

00010ca4 <bt_scan_cb_register>:
	if (!cb) {
   10ca4:	b150      	cbz	r0, 10cbc <bt_scan_cb_register+0x18>
	parent->next = child;
   10ca6:	2300      	movs	r3, #0
   10ca8:	6043      	str	r3, [r0, #4]
	return list->tail;
   10caa:	4b05      	ldr	r3, [pc, #20]	; (10cc0 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
   10cac:	1d02      	adds	r2, r0, #4
   10cae:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10cb0:	b911      	cbnz	r1, 10cb8 <bt_scan_cb_register+0x14>
	list->head = node;
   10cb2:	e9c3 2200 	strd	r2, r2, [r3]
}
   10cb6:	4770      	bx	lr
	parent->next = child;
   10cb8:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10cba:	605a      	str	r2, [r3, #4]
}
   10cbc:	4770      	bx	lr
   10cbe:	bf00      	nop
   10cc0:	2000e29c 	.word	0x2000e29c

00010cc4 <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   10cc4:	b570      	push	{r4, r5, r6, lr}
   10cc6:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   10cc8:	460c      	mov	r4, r1
   10cca:	2900      	cmp	r1, #0
   10ccc:	d045      	beq.n	10d5a <bt_scan_filter_add+0x96>
	return z_impl_k_mutex_lock(mutex, timeout);
   10cce:	f04f 32ff 	mov.w	r2, #4294967295
   10cd2:	f04f 33ff 	mov.w	r3, #4294967295
   10cd6:	4822      	ldr	r0, [pc, #136]	; (10d60 <bt_scan_filter_add+0x9c>)
   10cd8:	f013 fff8 	bl	24ccc <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   10cdc:	2d03      	cmp	r5, #3
   10cde:	d00c      	beq.n	10cfa <bt_scan_filter_add+0x36>
   10ce0:	d935      	bls.n	10d4e <bt_scan_filter_add+0x8a>
   10ce2:	3d04      	subs	r5, #4
   10ce4:	2d01      	cmp	r5, #1
   10ce6:	bf8c      	ite	hi
   10ce8:	f06f 0415 	mvnhi.w	r4, #21
   10cec:	f06f 040b 	mvnls.w	r4, #11
	return z_impl_k_mutex_unlock(mutex);
   10cf0:	481b      	ldr	r0, [pc, #108]	; (10d60 <bt_scan_filter_add+0x9c>)
   10cf2:	f014 f8bb 	bl	24e6c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   10cf6:	4620      	mov	r0, r4
   10cf8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   10cfa:	4a1a      	ldr	r2, [pc, #104]	; (10d64 <bt_scan_filter_add+0xa0>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   10cfc:	f892 3020 	ldrb.w	r3, [r2, #32]
   10d00:	bb2b      	cbnz	r3, 10d4e <bt_scan_filter_add+0x8a>
	switch (uuid->type) {
   10d02:	7823      	ldrb	r3, [r4, #0]
   10d04:	2b01      	cmp	r3, #1
   10d06:	d00b      	beq.n	10d20 <bt_scan_filter_add+0x5c>
   10d08:	2b02      	cmp	r3, #2
   10d0a:	d010      	beq.n	10d2e <bt_scan_filter_add+0x6a>
   10d0c:	bb13      	cbnz	r3, 10d54 <bt_scan_filter_add+0x90>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   10d0e:	6820      	ldr	r0, [r4, #0]
   10d10:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
   10d12:	4b15      	ldr	r3, [pc, #84]	; (10d68 <bt_scan_filter_add+0xa4>)
	return 0;
   10d14:	2400      	movs	r4, #0
		uuid_filter[counter].uuid =
   10d16:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   10d18:	2301      	movs	r3, #1
   10d1a:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   10d1e:	e7e7      	b.n	10cf0 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   10d20:	f102 030c 	add.w	r3, r2, #12
   10d24:	e894 0003 	ldmia.w	r4, {r0, r1}
   10d28:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
   10d2c:	e7f1      	b.n	10d12 <bt_scan_filter_add+0x4e>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   10d2e:	4623      	mov	r3, r4
   10d30:	f102 040c 	add.w	r4, r2, #12
   10d34:	f103 0610 	add.w	r6, r3, #16
   10d38:	4625      	mov	r5, r4
   10d3a:	6818      	ldr	r0, [r3, #0]
   10d3c:	6859      	ldr	r1, [r3, #4]
   10d3e:	3308      	adds	r3, #8
   10d40:	c503      	stmia	r5!, {r0, r1}
   10d42:	42b3      	cmp	r3, r6
   10d44:	462c      	mov	r4, r5
   10d46:	d1f7      	bne.n	10d38 <bt_scan_filter_add+0x74>
   10d48:	781b      	ldrb	r3, [r3, #0]
   10d4a:	702b      	strb	r3, [r5, #0]
		break;
   10d4c:	e7e1      	b.n	10d12 <bt_scan_filter_add+0x4e>
   10d4e:	f06f 040b 	mvn.w	r4, #11
   10d52:	e7cd      	b.n	10cf0 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   10d54:	f06f 0415 	mvn.w	r4, #21
   10d58:	e7ca      	b.n	10cf0 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   10d5a:	f06f 0415 	mvn.w	r4, #21
   10d5e:	e7ca      	b.n	10cf6 <bt_scan_filter_add+0x32>
   10d60:	2000ce90 	.word	0x2000ce90
   10d64:	2000e2a4 	.word	0x2000e2a4
   10d68:	2000e2b0 	.word	0x2000e2b0

00010d6c <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   10d6c:	2200      	movs	r2, #0
   10d6e:	4b05      	ldr	r3, [pc, #20]	; (10d84 <bt_scan_filter_disable+0x18>)
   10d70:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   10d72:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   10d74:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   10d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   10d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   10d7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   10d82:	4770      	bx	lr
   10d84:	2000e2a4 	.word	0x2000e2a4

00010d88 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   10d88:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   10d8a:	0683      	lsls	r3, r0, #26
   10d8c:	d025      	beq.n	10dda <bt_scan_filter_enable+0x52>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   10d8e:	f7ff ffed 	bl	10d6c <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   10d92:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   10d96:	bf18      	it	ne
   10d98:	2201      	movne	r2, #1
   10d9a:	4b11      	ldr	r3, [pc, #68]	; (10de0 <bt_scan_filter_enable+0x58>)
   10d9c:	bf18      	it	ne
   10d9e:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   10da0:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   10da2:	bf44      	itt	mi
   10da4:	2201      	movmi	r2, #1
   10da6:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   10da8:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   10daa:	bf44      	itt	mi
   10dac:	2201      	movmi	r2, #1
   10dae:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   10db0:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   10db2:	bf44      	itt	mi
   10db4:	2201      	movmi	r2, #1
   10db6:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   10dba:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   10dbc:	bf44      	itt	mi
   10dbe:	2201      	movmi	r2, #1
   10dc0:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   10dc4:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   10dc6:	bf48      	it	mi
   10dc8:	2201      	movmi	r2, #1
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;

	return 0;
   10dca:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
   10dce:	bf48      	it	mi
   10dd0:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
   10dd4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
   10dd8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10dda:	f06f 0015 	mvn.w	r0, #21
   10dde:	e7fb      	b.n	10dd8 <bt_scan_filter_enable+0x50>
   10de0:	2000e2a4 	.word	0x2000e2a4

00010de4 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   10de4:	b570      	push	{r4, r5, r6, lr}
   10de6:	460e      	mov	r6, r1
   10de8:	b086      	sub	sp, #24
   10dea:	4605      	mov	r5, r0
	bt_scan_stop();
   10dec:	f01a fc03 	bl	2b5f6 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   10df0:	4b15      	ldr	r3, [pc, #84]	; (10e48 <scan_connect_with_target.part.0+0x64>)
   10df2:	ac02      	add	r4, sp, #8
   10df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   10dfa:	ab01      	add	r3, sp, #4
   10dfc:	4621      	mov	r1, r4
   10dfe:	4630      	mov	r0, r6
   10e00:	4a12      	ldr	r2, [pc, #72]	; (10e4c <scan_connect_with_target.part.0+0x68>)
   10e02:	f005 f85d 	bl	15ec0 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
   10e06:	3508      	adds	r5, #8
   10e08:	4b11      	ldr	r3, [pc, #68]	; (10e50 <scan_connect_with_target.part.0+0x6c>)
	if (err) {
   10e0a:	b150      	cbz	r0, 10e22 <scan_connect_with_target.part.0+0x3e>
	return list->head;
   10e0c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e0e:	b1c4      	cbz	r4, 10e42 <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
   10e10:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e14:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
   10e16:	689b      	ldr	r3, [r3, #8]
   10e18:	b10b      	cbz	r3, 10e1e <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
   10e1a:	4628      	mov	r0, r5
   10e1c:	4798      	blx	r3
	return node->next;
   10e1e:	6864      	ldr	r4, [r4, #4]
   10e20:	e7f5      	b.n	10e0e <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
   10e22:	9e01      	ldr	r6, [sp, #4]
	return list->head;
   10e24:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e26:	b14c      	cbz	r4, 10e3c <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
   10e28:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10e2c:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
   10e2e:	68db      	ldr	r3, [r3, #12]
   10e30:	b113      	cbz	r3, 10e38 <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
   10e32:	4631      	mov	r1, r6
   10e34:	4628      	mov	r0, r5
   10e36:	4798      	blx	r3
	return node->next;
   10e38:	6864      	ldr	r4, [r4, #4]
   10e3a:	e7f4      	b.n	10e26 <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
   10e3c:	9801      	ldr	r0, [sp, #4]
   10e3e:	f004 fcb1 	bl	157a4 <bt_conn_unref>
}
   10e42:	b006      	add	sp, #24
   10e44:	bd70      	pop	{r4, r5, r6, pc}
   10e46:	bf00      	nop
   10e48:	00031d30 	.word	0x00031d30
   10e4c:	2000e2e8 	.word	0x2000e2e8
   10e50:	2000e29c 	.word	0x2000e29c

00010e54 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   10e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   10e58:	4f2c      	ldr	r7, [pc, #176]	; (10f0c <scan_recv+0xb8>)
{
   10e5a:	b096      	sub	sp, #88	; 0x58
   10e5c:	4605      	mov	r5, r0
   10e5e:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   10e60:	2254      	movs	r2, #84	; 0x54
   10e62:	2100      	movs	r1, #0
   10e64:	a801      	add	r0, sp, #4
   10e66:	f01f fd0c 	bl	30882 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   10e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   10e6e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (is_uuid_filter_enabled()) {
   10e72:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   10e76:	b113      	cbz	r3, 10e7e <scan_recv+0x2a>
		control->filter_cnt++;
   10e78:	2301      	movs	r3, #1
   10e7a:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   10e7e:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   10e80:	4620      	mov	r0, r4
   10e82:	f003 0301 	and.w	r3, r3, #1
   10e86:	f88d 3008 	strb.w	r3, [sp, #8]
   10e8a:	f01c fb86 	bl	2d59a <net_buf_simple_headroom>
   10e8e:	4606      	mov	r6, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   10e90:	491f      	ldr	r1, [pc, #124]	; (10f10 <scan_recv+0xbc>)
   10e92:	4620      	mov	r0, r4
   10e94:	aa01      	add	r2, sp, #4
	state->len = buf->len;
   10e96:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   10e9a:	f001 fdcd 	bl	12a38 <bt_data_parse>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   10e9e:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   10ea0:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   10ea4:	fa13 f686 	uxtah	r6, r3, r6
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   10ea8:	4b1a      	ldr	r3, [pc, #104]	; (10f14 <scan_recv+0xc0>)
   10eaa:	6026      	str	r6, [r4, #0]
	scan_control.device_info.adv_data = ad;
   10eac:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   10eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   10eb4:	682c      	ldr	r4, [r5, #0]
	scan_control.device_info.recv_info = info;
   10eb6:	9503      	str	r5, [sp, #12]
	if (control->all_mode &&
   10eb8:	f89d 5008 	ldrb.w	r5, [sp, #8]
   10ebc:	b1a3      	cbz	r3, 10ee8 <scan_recv+0x94>
   10ebe:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10ec2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10ec6:	429a      	cmp	r2, r3
   10ec8:	d112      	bne.n	10ef0 <scan_recv+0x9c>
		notify_filter_matched(&control->device_info,
   10eca:	462a      	mov	r2, r5
   10ecc:	a906      	add	r1, sp, #24
   10ece:	a803      	add	r0, sp, #12
   10ed0:	f7ff fed2 	bl	10c78 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   10ed4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10ed8:	b11b      	cbz	r3, 10ee2 <scan_recv+0x8e>
   10eda:	4621      	mov	r1, r4
   10edc:	a801      	add	r0, sp, #4
   10ede:	f7ff ff81 	bl	10de4 <scan_connect_with_target.part.0>
}
   10ee2:	b016      	add	sp, #88	; 0x58
   10ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   10ee8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10eec:	2b00      	cmp	r3, #0
   10eee:	d1ec      	bne.n	10eca <scan_recv+0x76>
	return list->head;
   10ef0:	4b09      	ldr	r3, [pc, #36]	; (10f18 <scan_recv+0xc4>)
   10ef2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10ef4:	2c00      	cmp	r4, #0
   10ef6:	d0f4      	beq.n	10ee2 <scan_recv+0x8e>
		if (cb->cb_addr->filter_no_match) {
   10ef8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10efc:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
   10efe:	685b      	ldr	r3, [r3, #4]
   10f00:	b113      	cbz	r3, 10f08 <scan_recv+0xb4>
			cb->cb_addr->filter_no_match(device_info, connectable);
   10f02:	4629      	mov	r1, r5
   10f04:	a803      	add	r0, sp, #12
   10f06:	4798      	blx	r3
	return node->next;
   10f08:	6864      	ldr	r4, [r4, #4]
   10f0a:	e7f3      	b.n	10ef4 <scan_recv+0xa0>
   10f0c:	2000e2a4 	.word	0x2000e2a4
   10f10:	0002b5c5 	.word	0x0002b5c5
   10f14:	2000e2e8 	.word	0x2000e2e8
   10f18:	2000e29c 	.word	0x2000e29c

00010f1c <bt_scan_init>:
{
   10f1c:	b570      	push	{r4, r5, r6, lr}
   10f1e:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   10f20:	4c14      	ldr	r4, [pc, #80]	; (10f74 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
   10f22:	4815      	ldr	r0, [pc, #84]	; (10f78 <bt_scan_init+0x5c>)
   10f24:	f003 ffec 	bl	14f00 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   10f28:	222c      	movs	r2, #44	; 0x2c
   10f2a:	2100      	movs	r1, #0
   10f2c:	4620      	mov	r0, r4
   10f2e:	f01f fca8 	bl	30882 <memset>
	if (init) {
   10f32:	b1be      	cbz	r6, 10f64 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   10f34:	7933      	ldrb	r3, [r6, #4]
   10f36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   10f3a:	6835      	ldr	r5, [r6, #0]
   10f3c:	b15d      	cbz	r5, 10f56 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
   10f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f40:	3430      	adds	r4, #48	; 0x30
   10f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f44:	682b      	ldr	r3, [r5, #0]
   10f46:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
   10f48:	68b2      	ldr	r2, [r6, #8]
   10f4a:	b13a      	cbz	r2, 10f5c <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
   10f4c:	4b0b      	ldr	r3, [pc, #44]	; (10f7c <bt_scan_init+0x60>)
   10f4e:	6810      	ldr	r0, [r2, #0]
   10f50:	6851      	ldr	r1, [r2, #4]
   10f52:	c303      	stmia	r3!, {r0, r1}
}
   10f54:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   10f56:	f7ff fe13 	bl	10b80 <scan_default_param_set>
   10f5a:	e7f5      	b.n	10f48 <bt_scan_init+0x2c>
}
   10f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
   10f60:	f7ff be20 	b.w	10ba4 <scan_default_conn_param_set>
		scan_default_param_set();
   10f64:	f7ff fe0c 	bl	10b80 <scan_default_param_set>
		scan_default_conn_param_set();
   10f68:	f7ff fe1c 	bl	10ba4 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   10f6c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   10f70:	e7f0      	b.n	10f54 <bt_scan_init+0x38>
   10f72:	bf00      	nop
   10f74:	2000e2a4 	.word	0x2000e2a4
   10f78:	2000c828 	.word	0x2000c828
   10f7c:	2000e2e8 	.word	0x2000e2e8

00010f80 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   10f80:	4603      	mov	r3, r0
   10f82:	b108      	cbz	r0, 10f88 <bt_scan_start+0x8>
   10f84:	2801      	cmp	r0, #1
   10f86:	d105      	bne.n	10f94 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   10f88:	4804      	ldr	r0, [pc, #16]	; (10f9c <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   10f8a:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   10f8c:	f800 3f30 	strb.w	r3, [r0, #48]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   10f90:	f003 bf2c 	b.w	14dec <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   10f94:	f06f 0015 	mvn.w	r0, #21
   10f98:	4770      	bx	lr
   10f9a:	bf00      	nop
   10f9c:	2000e2a4 	.word	0x2000e2a4

00010fa0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10fa0:	4904      	ldr	r1, [pc, #16]	; (10fb4 <sub_bytes+0x14>)
   10fa2:	1e43      	subs	r3, r0, #1
   10fa4:	300f      	adds	r0, #15
   10fa6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10faa:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10fac:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10fae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10fb0:	d1f9      	bne.n	10fa6 <sub_bytes+0x6>
	}
}
   10fb2:	4770      	bx	lr
   10fb4:	00034c47 	.word	0x00034c47

00010fb8 <tc_aes128_set_encrypt_key>:
{
   10fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fba:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10fbc:	4e26      	ldr	r6, [pc, #152]	; (11058 <tc_aes128_set_encrypt_key+0xa0>)
{
   10fbe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10fc0:	ad01      	add	r5, sp, #4
{
   10fc2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10fc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10fc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10fcc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10fd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10fd4:	4638      	mov	r0, r7
   10fd6:	2f00      	cmp	r7, #0
   10fd8:	d039      	beq.n	1104e <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10fda:	2c00      	cmp	r4, #0
   10fdc:	d039      	beq.n	11052 <tc_aes128_set_encrypt_key+0x9a>
   10fde:	1f38      	subs	r0, r7, #4
   10fe0:	4602      	mov	r2, r0
   10fe2:	4621      	mov	r1, r4
   10fe4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10fe6:	784b      	ldrb	r3, [r1, #1]
   10fe8:	780d      	ldrb	r5, [r1, #0]
   10fea:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10fec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10ff0:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10ff2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10ff4:	432b      	orrs	r3, r5
   10ff6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10ffa:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10ffc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11000:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11004:	d1ef      	bne.n	10fe6 <tc_aes128_set_encrypt_key+0x2e>
   11006:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11008:	4c14      	ldr	r4, [pc, #80]	; (1105c <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   1100a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1100c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1100e:	d116      	bne.n	1103e <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11010:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11014:	5ca5      	ldrb	r5, [r4, r2]
   11016:	0e1a      	lsrs	r2, r3, #24
   11018:	5ca2      	ldrb	r2, [r4, r2]
   1101a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1101e:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11022:	5d65      	ldrb	r5, [r4, r5]
   11024:	b2db      	uxtb	r3, r3
   11026:	5ce3      	ldrb	r3, [r4, r3]
   11028:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1102c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   11030:	f021 0303 	bic.w	r3, r1, #3
   11034:	3330      	adds	r3, #48	; 0x30
   11036:	446b      	add	r3, sp
   11038:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1103c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1103e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11042:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   11044:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   11046:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   11048:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1104a:	d1de      	bne.n	1100a <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   1104c:	2001      	movs	r0, #1
}
   1104e:	b00d      	add	sp, #52	; 0x34
   11050:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11052:	4620      	mov	r0, r4
   11054:	e7fb      	b.n	1104e <tc_aes128_set_encrypt_key+0x96>
   11056:	bf00      	nop
   11058:	00031d40 	.word	0x00031d40
   1105c:	00034c47 	.word	0x00034c47

00011060 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   11060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   11064:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   11066:	6803      	ldr	r3, [r0, #0]
{
   11068:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1106a:	9302      	str	r3, [sp, #8]
   1106c:	6843      	ldr	r3, [r0, #4]
   1106e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1122c <compress+0x1cc>
   11072:	9303      	str	r3, [sp, #12]
   11074:	6883      	ldr	r3, [r0, #8]
   11076:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   1107a:	9304      	str	r3, [sp, #16]
   1107c:	68c3      	ldr	r3, [r0, #12]
   1107e:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   11080:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   11082:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   11086:	9306      	str	r3, [sp, #24]
   11088:	6943      	ldr	r3, [r0, #20]
   1108a:	9307      	str	r3, [sp, #28]
   1108c:	6983      	ldr	r3, [r0, #24]
   1108e:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   11092:	9308      	str	r3, [sp, #32]
   11094:	69c3      	ldr	r3, [r0, #28]
   11096:	4698      	mov	r8, r3
   11098:	9309      	str	r3, [sp, #36]	; 0x24
   1109a:	9b08      	ldr	r3, [sp, #32]
   1109c:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   1109e:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   110a0:	ab0c      	add	r3, sp, #48	; 0x30
   110a2:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   110a4:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   110a8:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   110aa:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   110ae:	44a9      	add	r9, r5
   110b0:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   110b4:	9d00      	ldr	r5, [sp, #0]
   110b6:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   110ba:	444b      	add	r3, r9
   110bc:	ea25 0502 	bic.w	r5, r5, r2
   110c0:	ea02 090c 	and.w	r9, r2, ip
   110c4:	ea85 0509 	eor.w	r5, r5, r9
   110c8:	442b      	add	r3, r5
   110ca:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   110cc:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   110d0:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   110d4:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   110d8:	4025      	ands	r5, r4
   110da:	ea06 090b 	and.w	r9, r6, fp
   110de:	ea85 0509 	eor.w	r5, r5, r9
   110e2:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   110e6:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   110e8:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   110ea:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   110ec:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   110f0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   110f2:	46de      	mov	lr, fp
   110f4:	f8dd 8000 	ldr.w	r8, [sp]
   110f8:	f040 8088 	bne.w	1120c <compress+0x1ac>
   110fc:	f04f 0a10 	mov.w	sl, #16
   11100:	494b      	ldr	r1, [pc, #300]	; (11230 <compress+0x1d0>)
   11102:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   11104:	4651      	mov	r1, sl
   11106:	f10a 0a01 	add.w	sl, sl, #1
   1110a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1110e:	f00a 070f 	and.w	r7, sl, #15
   11112:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   11116:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1111a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   1111e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   11122:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   11124:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   11128:	f101 070e 	add.w	r7, r1, #14
   1112c:	f007 070f 	and.w	r7, r7, #15
   11130:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   11134:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11138:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   1113a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   1113e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   11142:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11146:	f001 010f 	and.w	r1, r1, #15
   1114a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1114e:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   11152:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   11156:	f859 ec40 	ldr.w	lr, [r9, #-64]
   1115a:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   1115e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11162:	4471      	add	r1, lr
		s0 = sigma0(s0);
   11164:	f8dd e004 	ldr.w	lr, [sp, #4]
   11168:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   1116c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11170:	4441      	add	r1, r8
		s1 = sigma1(s1);
   11172:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11176:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   11178:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   1117c:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   11180:	ea2c 0705 	bic.w	r7, ip, r5
   11184:	ea87 0708 	eor.w	r7, r7, r8
   11188:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   1118c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   11190:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   11194:	4477      	add	r7, lr
   11196:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1119a:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1119e:	4477      	add	r7, lr
   111a0:	440f      	add	r7, r1
   111a2:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   111a4:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111a8:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   111aa:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111ae:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   111b2:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   111b6:	ea07 0703 	and.w	r7, r7, r3
   111ba:	ea04 0806 	and.w	r8, r4, r6
   111be:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   111c2:	ea87 0708 	eor.w	r7, r7, r8
   111c6:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   111c8:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   111ca:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   111ce:	f8cd c000 	str.w	ip, [sp]
   111d2:	46b3      	mov	fp, r6
   111d4:	d122      	bne.n	1121c <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   111d6:	9902      	ldr	r1, [sp, #8]
   111d8:	4439      	add	r1, r7
   111da:	6001      	str	r1, [r0, #0]
   111dc:	9903      	ldr	r1, [sp, #12]
   111de:	4419      	add	r1, r3
   111e0:	9b04      	ldr	r3, [sp, #16]
   111e2:	6041      	str	r1, [r0, #4]
   111e4:	4423      	add	r3, r4
   111e6:	6083      	str	r3, [r0, #8]
   111e8:	9b05      	ldr	r3, [sp, #20]
   111ea:	4433      	add	r3, r6
   111ec:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   111ee:	9b06      	ldr	r3, [sp, #24]
   111f0:	4473      	add	r3, lr
   111f2:	6103      	str	r3, [r0, #16]
   111f4:	9b07      	ldr	r3, [sp, #28]
   111f6:	442b      	add	r3, r5
   111f8:	6143      	str	r3, [r0, #20]
   111fa:	9b08      	ldr	r3, [sp, #32]
   111fc:	4413      	add	r3, r2
   111fe:	6183      	str	r3, [r0, #24]
   11200:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11202:	4463      	add	r3, ip
   11204:	61c3      	str	r3, [r0, #28]
}
   11206:	b01d      	add	sp, #116	; 0x74
   11208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1120c:	46b3      	mov	fp, r6
   1120e:	f8cd c000 	str.w	ip, [sp]
   11212:	4626      	mov	r6, r4
   11214:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   11216:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   11218:	462a      	mov	r2, r5
   1121a:	e740      	b.n	1109e <compress+0x3e>
   1121c:	4694      	mov	ip, r2
   1121e:	4626      	mov	r6, r4
   11220:	462a      	mov	r2, r5
   11222:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   11224:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   11226:	463b      	mov	r3, r7
   11228:	e76c      	b.n	11104 <compress+0xa4>
   1122a:	bf00      	nop
   1122c:	00031fc8 	.word	0x00031fc8
   11230:	00032004 	.word	0x00032004

00011234 <tc_sha256_init>:
{
   11234:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   11236:	4604      	mov	r4, r0
   11238:	b1c8      	cbz	r0, 1126e <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   1123a:	2270      	movs	r2, #112	; 0x70
   1123c:	2100      	movs	r1, #0
   1123e:	f01a f9e9 	bl	2b614 <_set>
	s->iv[1] = 0xbb67ae85;
   11242:	4b0b      	ldr	r3, [pc, #44]	; (11270 <tc_sha256_init+0x3c>)
   11244:	4a0b      	ldr	r2, [pc, #44]	; (11274 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   11246:	490c      	ldr	r1, [pc, #48]	; (11278 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   11248:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   1124c:	4b0b      	ldr	r3, [pc, #44]	; (1127c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   1124e:	480c      	ldr	r0, [pc, #48]	; (11280 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   11250:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   11254:	4b0b      	ldr	r3, [pc, #44]	; (11284 <tc_sha256_init+0x50>)
   11256:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   1125a:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   1125c:	4b0a      	ldr	r3, [pc, #40]	; (11288 <tc_sha256_init+0x54>)
   1125e:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   11260:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   11264:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   11268:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1126c:	61e3      	str	r3, [r4, #28]
}
   1126e:	bd10      	pop	{r4, pc}
   11270:	bb67ae85 	.word	0xbb67ae85
   11274:	6a09e667 	.word	0x6a09e667
   11278:	3c6ef372 	.word	0x3c6ef372
   1127c:	a54ff53a 	.word	0xa54ff53a
   11280:	510e527f 	.word	0x510e527f
   11284:	9b05688c 	.word	0x9b05688c
   11288:	1f83d9ab 	.word	0x1f83d9ab

0001128c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1128c:	4901      	ldr	r1, [pc, #4]	; (11294 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1128e:	2210      	movs	r2, #16
	str	r2, [r1]
   11290:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11292:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11294:	e000ed10 	.word	0xe000ed10

00011298 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11298:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1129a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1129c:	f380 8811 	msr	BASEPRI, r0
	isb
   112a0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   112a4:	f3bf 8f4f 	dsb	sy
   112a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   112aa:	b662      	cpsie	i
	isb
   112ac:	f3bf 8f6f 	isb	sy

	bx	lr
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop

000112b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   112b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   112b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   112b8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   112bc:	f3bf 8f4f 	dsb	sy
   112c0:	bf20      	wfe

	msr	BASEPRI, r0
   112c2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   112c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   112c8:	4770      	bx	lr
   112ca:	bf00      	nop

000112cc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   112cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d0:	4682      	mov	sl, r0

	if (esf != NULL) {
   112d2:	460c      	mov	r4, r1
{
   112d4:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   112d6:	2900      	cmp	r1, #0
   112d8:	d052      	beq.n	11380 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   112da:	e9d1 1200 	ldrd	r1, r2, [r1]
   112de:	466e      	mov	r6, sp
   112e0:	b08a      	sub	sp, #40	; 0x28
   112e2:	68a3      	ldr	r3, [r4, #8]
   112e4:	466d      	mov	r5, sp
   112e6:	f04f 0b06 	mov.w	fp, #6
   112ea:	46a8      	mov	r8, r5
   112ec:	4828      	ldr	r0, [pc, #160]	; (11390 <z_arm_fatal_error+0xc4>)
   112ee:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11394 <z_arm_fatal_error+0xc8>
   112f2:	e9c5 2308 	strd	r2, r3, [r5, #32]
   112f6:	e9c5 9106 	strd	r9, r1, [r5, #24]
   112fa:	6168      	str	r0, [r5, #20]
   112fc:	f848 bf10 	str.w	fp, [r8, #16]!
   11300:	2300      	movs	r3, #0
   11302:	4642      	mov	r2, r8
   11304:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   11308:	4823      	ldr	r0, [pc, #140]	; (11398 <z_arm_fatal_error+0xcc>)
   1130a:	f7fe fa71 	bl	f7f0 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1130e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   11312:	46b5      	mov	sp, r6
   11314:	6963      	ldr	r3, [r4, #20]
   11316:	46ad      	mov	sp, r5
   11318:	4820      	ldr	r0, [pc, #128]	; (1139c <z_arm_fatal_error+0xd0>)
   1131a:	e9c5 1207 	strd	r1, r2, [r5, #28]
   1131e:	e9c5 0905 	strd	r0, r9, [r5, #20]
   11322:	626b      	str	r3, [r5, #36]	; 0x24
   11324:	f8c5 b010 	str.w	fp, [r5, #16]
   11328:	2300      	movs	r3, #0
   1132a:	4642      	mov	r2, r8
   1132c:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   11330:	4819      	ldr	r0, [pc, #100]	; (11398 <z_arm_fatal_error+0xcc>)
   11332:	f7fe fa5d 	bl	f7f0 <z_impl_z_log_msg_static_create>
   11336:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   11338:	b088      	sub	sp, #32
   1133a:	69e3      	ldr	r3, [r4, #28]
   1133c:	466d      	mov	r5, sp
   1133e:	f04f 0b04 	mov.w	fp, #4
   11342:	46a8      	mov	r8, r5
   11344:	4a16      	ldr	r2, [pc, #88]	; (113a0 <z_arm_fatal_error+0xd4>)
   11346:	61eb      	str	r3, [r5, #28]
   11348:	e9c5 2905 	strd	r2, r9, [r5, #20]
   1134c:	f848 bf10 	str.w	fp, [r8, #16]!
   11350:	2300      	movs	r3, #0
   11352:	4642      	mov	r2, r8
   11354:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11358:	480f      	ldr	r0, [pc, #60]	; (11398 <z_arm_fatal_error+0xcc>)
   1135a:	f7fe fa49 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1135e:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11360:	69a3      	ldr	r3, [r4, #24]
   11362:	46ad      	mov	sp, r5
   11364:	4a0f      	ldr	r2, [pc, #60]	; (113a4 <z_arm_fatal_error+0xd8>)
   11366:	61eb      	str	r3, [r5, #28]
   11368:	e9c5 2905 	strd	r2, r9, [r5, #20]
   1136c:	f8c5 b010 	str.w	fp, [r5, #16]
   11370:	2300      	movs	r3, #0
   11372:	4642      	mov	r2, r8
   11374:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11378:	4807      	ldr	r0, [pc, #28]	; (11398 <z_arm_fatal_error+0xcc>)
   1137a:	f7fe fa39 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1137e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   11380:	4621      	mov	r1, r4
   11382:	4650      	mov	r0, sl
   11384:	f012 ff94 	bl	242b0 <z_fatal_error>
}
   11388:	46bd      	mov	sp, r7
   1138a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1138e:	bf00      	nop
   11390:	00034d47 	.word	0x00034d47
   11394:	00034df2 	.word	0x00034df2
   11398:	00031cd4 	.word	0x00031cd4
   1139c:	00034d7a 	.word	0x00034d7a
   113a0:	00034dad 	.word	0x00034dad
   113a4:	00034dc0 	.word	0x00034dc0

000113a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   113a8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113aa:	2800      	cmp	r0, #0
   113ac:	db07      	blt.n	113be <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113ae:	2301      	movs	r3, #1
   113b0:	0941      	lsrs	r1, r0, #5
   113b2:	4a03      	ldr	r2, [pc, #12]	; (113c0 <arch_irq_enable+0x18>)
   113b4:	f000 001f 	and.w	r0, r0, #31
   113b8:	4083      	lsls	r3, r0
   113ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   113be:	4770      	bx	lr
   113c0:	e000e100 	.word	0xe000e100

000113c4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   113c4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113c6:	2800      	cmp	r0, #0
   113c8:	db0c      	blt.n	113e4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113ca:	2201      	movs	r2, #1
   113cc:	4906      	ldr	r1, [pc, #24]	; (113e8 <arch_irq_disable+0x24>)
   113ce:	0943      	lsrs	r3, r0, #5
   113d0:	f000 001f 	and.w	r0, r0, #31
   113d4:	4082      	lsls	r2, r0
   113d6:	3320      	adds	r3, #32
   113d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   113dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113e0:	f3bf 8f6f 	isb	sy
}
   113e4:	4770      	bx	lr
   113e6:	bf00      	nop
   113e8:	e000e100 	.word	0xe000e100

000113ec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   113ec:	4b05      	ldr	r3, [pc, #20]	; (11404 <arch_irq_is_enabled+0x18>)
   113ee:	0942      	lsrs	r2, r0, #5
   113f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   113f4:	2301      	movs	r3, #1
   113f6:	f000 001f 	and.w	r0, r0, #31
   113fa:	fa03 f000 	lsl.w	r0, r3, r0
}
   113fe:	4010      	ands	r0, r2
   11400:	4770      	bx	lr
   11402:	bf00      	nop
   11404:	e000e100 	.word	0xe000e100

00011408 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   11408:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1140a:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1140c:	2b07      	cmp	r3, #7
{
   1140e:	4604      	mov	r4, r0
   11410:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11412:	d90f      	bls.n	11434 <z_arm_irq_priority_set+0x2c>
   11414:	235b      	movs	r3, #91	; 0x5b
   11416:	4a10      	ldr	r2, [pc, #64]	; (11458 <z_arm_irq_priority_set+0x50>)
   11418:	4910      	ldr	r1, [pc, #64]	; (1145c <z_arm_irq_priority_set+0x54>)
   1141a:	4811      	ldr	r0, [pc, #68]	; (11460 <z_arm_irq_priority_set+0x58>)
   1141c:	f019 fccc 	bl	2adb8 <assert_print>
   11420:	4629      	mov	r1, r5
   11422:	4810      	ldr	r0, [pc, #64]	; (11464 <z_arm_irq_priority_set+0x5c>)
   11424:	2307      	movs	r3, #7
   11426:	4622      	mov	r2, r4
   11428:	f019 fcc6 	bl	2adb8 <assert_print>
   1142c:	215b      	movs	r1, #91	; 0x5b
   1142e:	480a      	ldr	r0, [pc, #40]	; (11458 <z_arm_irq_priority_set+0x50>)
   11430:	f019 fcbb 	bl	2adaa <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11434:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11436:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11438:	bfac      	ite	ge
   1143a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1143e:	4a0a      	ldrlt	r2, [pc, #40]	; (11468 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11440:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11444:	b2db      	uxtb	r3, r3
   11446:	bfab      	itete	ge
   11448:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1144c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11450:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11454:	5413      	strblt	r3, [r2, r0]
}
   11456:	bd38      	pop	{r3, r4, r5, pc}
   11458:	00034dfb 	.word	0x00034dfb
   1145c:	00034e31 	.word	0x00034e31
   11460:	00033bc2 	.word	0x00033bc2
   11464:	00034e4c 	.word	0x00034e4c
   11468:	e000ed14 	.word	0xe000ed14

0001146c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1146c:	bf30      	wfi
    b z_SysNmiOnReset
   1146e:	f7ff bffd 	b.w	1146c <z_SysNmiOnReset>
   11472:	bf00      	nop

00011474 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11474:	4a0b      	ldr	r2, [pc, #44]	; (114a4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11476:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11478:	4b0b      	ldr	r3, [pc, #44]	; (114a8 <z_arm_prep_c+0x34>)
   1147a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1147e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11480:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11484:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11488:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1148c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11494:	f012 ffe6 	bl	24464 <z_bss_zero>
	z_data_copy();
   11498:	f015 fe3e 	bl	27118 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1149c:	f000 fcbc 	bl	11e18 <z_arm_interrupt_init>
	z_cstart();
   114a0:	f013 f820 	bl	244e4 <z_cstart>
   114a4:	00008000 	.word	0x00008000
   114a8:	e000ed00 	.word	0xe000ed00

000114ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   114ac:	4a09      	ldr	r2, [pc, #36]	; (114d4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   114ae:	490a      	ldr	r1, [pc, #40]	; (114d8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   114b0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   114b2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   114b4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   114b6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   114b8:	4908      	ldr	r1, [pc, #32]	; (114dc <arch_swap+0x30>)
   114ba:	684b      	ldr	r3, [r1, #4]
   114bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   114c0:	604b      	str	r3, [r1, #4]
   114c2:	2300      	movs	r3, #0
   114c4:	f383 8811 	msr	BASEPRI, r3
   114c8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   114cc:	6893      	ldr	r3, [r2, #8]
}
   114ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   114d0:	4770      	bx	lr
   114d2:	bf00      	nop
   114d4:	2000eb4c 	.word	0x2000eb4c
   114d8:	00032ab0 	.word	0x00032ab0
   114dc:	e000ed00 	.word	0xe000ed00

000114e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   114e0:	4915      	ldr	r1, [pc, #84]	; (11538 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   114e2:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   114e4:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   114e8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   114ec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   114ee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   114f2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   114f6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   114f8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   114fc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11500:	4f0e      	ldr	r7, [pc, #56]	; (1153c <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11502:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11506:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   11508:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1150a:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1150c:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11510:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   11512:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11514:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11516:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1151a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1151e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11522:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   11526:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1152a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1152c:	f01a fcc8 	bl	2bec0 <configure_builtin_stack_guard>
    pop {r2, lr}
   11530:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11534:	4770      	bx	lr
   11536:	0000      	.short	0x0000
    ldr r1, =_kernel
   11538:	2000eb4c 	.word	0x2000eb4c
    ldr v4, =_SCS_ICSR
   1153c:	e000ed04 	.word	0xe000ed04

00011540 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11540:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11544:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11546:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1154a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1154e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11550:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11554:	2902      	cmp	r1, #2
    beq _oops
   11556:	d0ff      	beq.n	11558 <_oops>

00011558 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11558:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1155a:	f01a fca2 	bl	2bea2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1155e:	bd01      	pop	{r0, pc}

00011560 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11560:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11564:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   11566:	490d      	ldr	r1, [pc, #52]	; (1159c <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   11568:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1156c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1156e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11572:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11576:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11578:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1157c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11584:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11588:	2300      	movs	r3, #0
   1158a:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1158c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11590:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11592:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   11594:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11598:	4770      	bx	lr
   1159a:	bf00      	nop
   1159c:	0002aa33 	.word	0x0002aa33

000115a0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   115a0:	4b08      	ldr	r3, [pc, #32]	; (115c4 <arch_switch_to_main_thread+0x24>)
   115a2:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   115a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   115a6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   115aa:	4610      	mov	r0, r2
   115ac:	f381 8809 	msr	PSP, r1
   115b0:	2100      	movs	r1, #0
   115b2:	b663      	cpsie	if
   115b4:	f381 8811 	msr	BASEPRI, r1
   115b8:	f3bf 8f6f 	isb	sy
   115bc:	2200      	movs	r2, #0
   115be:	2300      	movs	r3, #0
   115c0:	f019 fa37 	bl	2aa32 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   115c4:	2000eb4c 	.word	0x2000eb4c

000115c8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   115c8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   115ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   115cc:	4a0b      	ldr	r2, [pc, #44]	; (115fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   115ce:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   115d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   115d2:	bf1e      	ittt	ne
	movne	r1, #0
   115d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   115d6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   115d8:	f01e ff0e 	blne	303f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   115dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   115de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   115e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   115e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   115ea:	4905      	ldr	r1, [pc, #20]	; (11600 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   115ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   115ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   115f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   115f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   115f6:	4903      	ldr	r1, [pc, #12]	; (11604 <_isr_wrapper+0x3c>)
	bx r1
   115f8:	4708      	bx	r1
   115fa:	0000      	.short	0x0000
	ldr r2, =_kernel
   115fc:	2000eb4c 	.word	0x2000eb4c
	ldr r1, =_sw_isr_table
   11600:	000318d4 	.word	0x000318d4
	ldr r1, =z_arm_int_exit
   11604:	00011609 	.word	0x00011609

00011608 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11608:	4b04      	ldr	r3, [pc, #16]	; (1161c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1160a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1160c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   1160e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11610:	d003      	beq.n	1161a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11612:	4903      	ldr	r1, [pc, #12]	; (11620 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11618:	600a      	str	r2, [r1, #0]

0001161a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1161a:	4770      	bx	lr
	ldr r3, =_kernel
   1161c:	2000eb4c 	.word	0x2000eb4c
	ldr r1, =_SCS_ICSR
   11620:	e000ed04 	.word	0xe000ed04

00011624 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   11628:	46e8      	mov	r8, sp
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1162a:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1162c:	b088      	sub	sp, #32
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1162e:	4606      	mov	r6, r0
   11630:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11632:	466a      	mov	r2, sp
   11634:	f04f 0903 	mov.w	r9, #3
   11638:	4b5c      	ldr	r3, [pc, #368]	; (117ac <mem_manage_fault.constprop.0+0x188>)
   1163a:	4c5d      	ldr	r4, [pc, #372]	; (117b0 <mem_manage_fault.constprop.0+0x18c>)
   1163c:	6153      	str	r3, [r2, #20]
   1163e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11642:	6194      	str	r4, [r2, #24]
   11644:	485b      	ldr	r0, [pc, #364]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   11646:	f842 9f10 	str.w	r9, [r2, #16]!
   1164a:	f01a fc3d 	bl	2bec8 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1164e:	4b5a      	ldr	r3, [pc, #360]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   11650:	46c5      	mov	sp, r8
   11652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11654:	06d9      	lsls	r1, r3, #27
   11656:	f140 8095 	bpl.w	11784 <mem_manage_fault.constprop.0+0x160>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
   1165a:	b088      	sub	sp, #32
   1165c:	466a      	mov	r2, sp
   1165e:	4b57      	ldr	r3, [pc, #348]	; (117bc <mem_manage_fault.constprop.0+0x198>)
   11660:	4854      	ldr	r0, [pc, #336]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   11662:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11666:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1166a:	f842 9f10 	str.w	r9, [r2, #16]!
   1166e:	f01a fc2b 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
   11672:	2011      	movs	r0, #17
   11674:	46c5      	mov	sp, r8
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11676:	4b50      	ldr	r3, [pc, #320]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   11678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1167a:	071a      	lsls	r2, r3, #28
   1167c:	d50f      	bpl.n	1169e <mem_manage_fault.constprop.0+0x7a>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   1167e:	46e8      	mov	r8, sp
   11680:	b088      	sub	sp, #32
   11682:	466a      	mov	r2, sp
   11684:	4b4e      	ldr	r3, [pc, #312]	; (117c0 <mem_manage_fault.constprop.0+0x19c>)
   11686:	484b      	ldr	r0, [pc, #300]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   11688:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1168c:	2303      	movs	r3, #3
   1168e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11692:	f842 3f10 	str.w	r3, [r2, #16]!
   11696:	f01a fc17 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1169a:	2012      	movs	r0, #18
   1169c:	46c5      	mov	sp, r8
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1169e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 117b8 <mem_manage_fault.constprop.0+0x194>
   116a2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   116a6:	079b      	lsls	r3, r3, #30
   116a8:	d52b      	bpl.n	11702 <mem_manage_fault.constprop.0+0xde>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
   116aa:	46e8      	mov	r8, sp
   116ac:	b088      	sub	sp, #32
   116ae:	466a      	mov	r2, sp
   116b0:	4b44      	ldr	r3, [pc, #272]	; (117c4 <mem_manage_fault.constprop.0+0x1a0>)
   116b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   116b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   116ba:	2303      	movs	r3, #3
   116bc:	483d      	ldr	r0, [pc, #244]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   116be:	f842 3f10 	str.w	r3, [r2, #16]!
   116c2:	f01a fc01 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   116c6:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   116ca:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
   116ce:	46c5      	mov	sp, r8
   116d0:	0611      	lsls	r1, r2, #24
   116d2:	d515      	bpl.n	11700 <mem_manage_fault.constprop.0+0xdc>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   116d4:	b088      	sub	sp, #32
   116d6:	466a      	mov	r2, sp
   116d8:	61d3      	str	r3, [r2, #28]
   116da:	2304      	movs	r3, #4
   116dc:	493a      	ldr	r1, [pc, #232]	; (117c8 <mem_manage_fault.constprop.0+0x1a4>)
   116de:	4835      	ldr	r0, [pc, #212]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   116e0:	e9c2 1405 	strd	r1, r4, [r2, #20]
   116e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   116e8:	f842 3f10 	str.w	r3, [r2, #16]!
   116ec:	f01a fbec 	bl	2bec8 <z_log_msg_static_create.constprop.0>
   116f0:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   116f2:	b12e      	cbz	r6, 11700 <mem_manage_fault.constprop.0+0xdc>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   116f4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   116f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   116fc:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   11700:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11702:	4b2d      	ldr	r3, [pc, #180]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   11704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11706:	07da      	lsls	r2, r3, #31
   11708:	d50f      	bpl.n	1172a <mem_manage_fault.constprop.0+0x106>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
   1170a:	466e      	mov	r6, sp
   1170c:	b088      	sub	sp, #32
   1170e:	466a      	mov	r2, sp
   11710:	4b2e      	ldr	r3, [pc, #184]	; (117cc <mem_manage_fault.constprop.0+0x1a8>)
   11712:	4828      	ldr	r0, [pc, #160]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   11714:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11718:	2303      	movs	r3, #3
   1171a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1171e:	f842 3f10 	str.w	r3, [r2, #16]!
   11722:	f01a fbd1 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   11726:	2014      	movs	r0, #20
   11728:	46b5      	mov	sp, r6
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1172a:	4b23      	ldr	r3, [pc, #140]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   1172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1172e:	069b      	lsls	r3, r3, #26
   11730:	d50f      	bpl.n	11752 <mem_manage_fault.constprop.0+0x12e>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
   11732:	466e      	mov	r6, sp
   11734:	b088      	sub	sp, #32
   11736:	466a      	mov	r2, sp
   11738:	4b25      	ldr	r3, [pc, #148]	; (117d0 <mem_manage_fault.constprop.0+0x1ac>)
   1173a:	481e      	ldr	r0, [pc, #120]	; (117b4 <mem_manage_fault.constprop.0+0x190>)
   1173c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11740:	2303      	movs	r3, #3
   11742:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11746:	f842 3f10 	str.w	r3, [r2, #16]!
   1174a:	f01a fbbd 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1174e:	2015      	movs	r0, #21
   11750:	46b5      	mov	sp, r6
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11752:	4b19      	ldr	r3, [pc, #100]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   11754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11756:	06d6      	lsls	r6, r2, #27
   11758:	d402      	bmi.n	11760 <mem_manage_fault.constprop.0+0x13c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1175a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1175c:	0794      	lsls	r4, r2, #30
   1175e:	d513      	bpl.n	11788 <mem_manage_fault.constprop.0+0x164>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   11760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11762:	06d9      	lsls	r1, r3, #27
   11764:	d510      	bpl.n	11788 <mem_manage_fault.constprop.0+0x164>
   11766:	491b      	ldr	r1, [pc, #108]	; (117d4 <mem_manage_fault.constprop.0+0x1b0>)
   11768:	f240 1361 	movw	r3, #353	; 0x161
   1176c:	4a1a      	ldr	r2, [pc, #104]	; (117d8 <mem_manage_fault.constprop.0+0x1b4>)
   1176e:	481b      	ldr	r0, [pc, #108]	; (117dc <mem_manage_fault.constprop.0+0x1b8>)
   11770:	f019 fb22 	bl	2adb8 <assert_print>
   11774:	481a      	ldr	r0, [pc, #104]	; (117e0 <mem_manage_fault.constprop.0+0x1bc>)
   11776:	f019 fb1f 	bl	2adb8 <assert_print>
   1177a:	f240 1161 	movw	r1, #353	; 0x161
   1177e:	4816      	ldr	r0, [pc, #88]	; (117d8 <mem_manage_fault.constprop.0+0x1b4>)
   11780:	f019 fb13 	bl	2adaa <assert_post_action>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   11784:	2010      	movs	r0, #16
   11786:	e776      	b.n	11676 <mem_manage_fault.constprop.0+0x52>
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11788:	4b0b      	ldr	r3, [pc, #44]	; (117b8 <mem_manage_fault.constprop.0+0x194>)
   1178a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1178c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1178e:	bf42      	ittt	mi
   11790:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   11792:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   11796:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1179a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1179e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   117a0:	2300      	movs	r3, #0
   117a2:	702b      	strb	r3, [r5, #0]

	return reason;
}
   117a4:	46bd      	mov	sp, r7
   117a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   117aa:	bf00      	nop
   117ac:	00034e8c 	.word	0x00034e8c
   117b0:	00035424 	.word	0x00035424
   117b4:	00031cd4 	.word	0x00031cd4
   117b8:	e000ed00 	.word	0xe000ed00
   117bc:	00034ea6 	.word	0x00034ea6
   117c0:	00034edd 	.word	0x00034edd
   117c4:	00034ef4 	.word	0x00034ef4
   117c8:	00034f10 	.word	0x00034f10
   117cc:	00034f2a 	.word	0x00034f2a
   117d0:	00034f4d 	.word	0x00034f4d
   117d4:	00034fba 	.word	0x00034fba
   117d8:	00034f80 	.word	0x00034f80
   117dc:	00033bc2 	.word	0x00033bc2
   117e0:	00035004 	.word	0x00035004

000117e4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   117e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   117e8:	466e      	mov	r6, sp
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   117ea:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** BUS FAULT *****");
   117ec:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   117ee:	4680      	mov	r8, r0
   117f0:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   117f2:	466a      	mov	r2, sp
   117f4:	f04f 0903 	mov.w	r9, #3
   117f8:	4b54      	ldr	r3, [pc, #336]	; (1194c <bus_fault.constprop.0+0x168>)
   117fa:	4c55      	ldr	r4, [pc, #340]	; (11950 <bus_fault.constprop.0+0x16c>)
   117fc:	6153      	str	r3, [r2, #20]
   117fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11802:	6194      	str	r4, [r2, #24]
   11804:	4853      	ldr	r0, [pc, #332]	; (11954 <bus_fault.constprop.0+0x170>)
   11806:	f842 9f10 	str.w	r9, [r2, #16]!
   1180a:	f01a fb5d 	bl	2bec8 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1180e:	4b52      	ldr	r3, [pc, #328]	; (11958 <bus_fault.constprop.0+0x174>)
   11810:	46b5      	mov	sp, r6
   11812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11814:	04d9      	lsls	r1, r3, #19
   11816:	f140 8082 	bpl.w	1191e <bus_fault.constprop.0+0x13a>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   1181a:	b088      	sub	sp, #32
   1181c:	466a      	mov	r2, sp
   1181e:	4b4f      	ldr	r3, [pc, #316]	; (1195c <bus_fault.constprop.0+0x178>)
   11820:	484c      	ldr	r0, [pc, #304]	; (11954 <bus_fault.constprop.0+0x170>)
   11822:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11826:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1182a:	f842 9f10 	str.w	r9, [r2, #16]!
   1182e:	f01a fb4b 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   11832:	2017      	movs	r0, #23
   11834:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11836:	4b48      	ldr	r3, [pc, #288]	; (11958 <bus_fault.constprop.0+0x174>)
   11838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1183a:	051a      	lsls	r2, r3, #20
   1183c:	d50f      	bpl.n	1185e <bus_fault.constprop.0+0x7a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   1183e:	466e      	mov	r6, sp
   11840:	b088      	sub	sp, #32
   11842:	466a      	mov	r2, sp
   11844:	4b46      	ldr	r3, [pc, #280]	; (11960 <bus_fault.constprop.0+0x17c>)
   11846:	4843      	ldr	r0, [pc, #268]	; (11954 <bus_fault.constprop.0+0x170>)
   11848:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1184c:	2303      	movs	r3, #3
   1184e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11852:	f842 3f10 	str.w	r3, [r2, #16]!
   11856:	f01a fb37 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   1185a:	2018      	movs	r0, #24
   1185c:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1185e:	4e3e      	ldr	r6, [pc, #248]	; (11958 <bus_fault.constprop.0+0x174>)
   11860:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11862:	059b      	lsls	r3, r3, #22
   11864:	d529      	bpl.n	118ba <bus_fault.constprop.0+0xd6>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   11866:	46e9      	mov	r9, sp
   11868:	b088      	sub	sp, #32
   1186a:	466a      	mov	r2, sp
   1186c:	4b3d      	ldr	r3, [pc, #244]	; (11964 <bus_fault.constprop.0+0x180>)
   1186e:	4839      	ldr	r0, [pc, #228]	; (11954 <bus_fault.constprop.0+0x170>)
   11870:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11874:	2303      	movs	r3, #3
   11876:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1187a:	f842 3f10 	str.w	r3, [r2, #16]!
   1187e:	f01a fb23 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11882:	6bb3      	ldr	r3, [r6, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11884:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   11886:	46cd      	mov	sp, r9
   11888:	0410      	lsls	r0, r2, #16
   1188a:	d515      	bpl.n	118b8 <bus_fault.constprop.0+0xd4>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1188c:	b088      	sub	sp, #32
   1188e:	466a      	mov	r2, sp
   11890:	61d3      	str	r3, [r2, #28]
   11892:	2304      	movs	r3, #4
   11894:	4934      	ldr	r1, [pc, #208]	; (11968 <bus_fault.constprop.0+0x184>)
   11896:	482f      	ldr	r0, [pc, #188]	; (11954 <bus_fault.constprop.0+0x170>)
   11898:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1189c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   118a0:	f842 3f10 	str.w	r3, [r2, #16]!
   118a4:	f01a fb10 	bl	2bec8 <z_log_msg_static_create.constprop.0>
   118a8:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   118aa:	f1b8 0f00 	cmp.w	r8, #0
   118ae:	d003      	beq.n	118b8 <bus_fault.constprop.0+0xd4>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   118b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   118b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   118b6:	62b3      	str	r3, [r6, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   118b8:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   118ba:	4b27      	ldr	r3, [pc, #156]	; (11958 <bus_fault.constprop.0+0x174>)
   118bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   118be:	0559      	lsls	r1, r3, #21
   118c0:	d50f      	bpl.n	118e2 <bus_fault.constprop.0+0xfe>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   118c2:	466e      	mov	r6, sp
   118c4:	b088      	sub	sp, #32
   118c6:	466a      	mov	r2, sp
   118c8:	4b28      	ldr	r3, [pc, #160]	; (1196c <bus_fault.constprop.0+0x188>)
   118ca:	4822      	ldr	r0, [pc, #136]	; (11954 <bus_fault.constprop.0+0x170>)
   118cc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   118d0:	2303      	movs	r3, #3
   118d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   118d6:	f842 3f10 	str.w	r3, [r2, #16]!
   118da:	f01a faf5 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   118de:	201a      	movs	r0, #26
   118e0:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   118e2:	4b1d      	ldr	r3, [pc, #116]	; (11958 <bus_fault.constprop.0+0x174>)
   118e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   118e6:	05d2      	lsls	r2, r2, #23
   118e8:	d51b      	bpl.n	11922 <bus_fault.constprop.0+0x13e>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   118ea:	466e      	mov	r6, sp
   118ec:	b088      	sub	sp, #32
   118ee:	466a      	mov	r2, sp
   118f0:	4b1f      	ldr	r3, [pc, #124]	; (11970 <bus_fault.constprop.0+0x18c>)
   118f2:	4818      	ldr	r0, [pc, #96]	; (11954 <bus_fault.constprop.0+0x170>)
   118f4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   118f8:	2303      	movs	r3, #3
   118fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   118fe:	f842 3f10 	str.w	r3, [r2, #16]!
   11902:	f01a fae1 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   11906:	201b      	movs	r0, #27
   11908:	46b5      	mov	sp, r6
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1190a:	4a13      	ldr	r2, [pc, #76]	; (11958 <bus_fault.constprop.0+0x174>)
   1190c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1190e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11912:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11914:	2300      	movs	r3, #0
   11916:	702b      	strb	r3, [r5, #0]

	return reason;
}
   11918:	46bd      	mov	sp, r7
   1191a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1191e:	2016      	movs	r0, #22
   11920:	e789      	b.n	11836 <bus_fault.constprop.0+0x52>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11924:	049b      	lsls	r3, r3, #18
   11926:	d5f0      	bpl.n	1190a <bus_fault.constprop.0+0x126>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11928:	466e      	mov	r6, sp
   1192a:	b088      	sub	sp, #32
   1192c:	466a      	mov	r2, sp
   1192e:	4b11      	ldr	r3, [pc, #68]	; (11974 <bus_fault.constprop.0+0x190>)
   11930:	4808      	ldr	r0, [pc, #32]	; (11954 <bus_fault.constprop.0+0x170>)
   11932:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11936:	2303      	movs	r3, #3
   11938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1193c:	f842 3f10 	str.w	r3, [r2, #16]!
   11940:	f01a fac2 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   11944:	201c      	movs	r0, #28
   11946:	46b5      	mov	sp, r6
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11948:	e7df      	b.n	1190a <bus_fault.constprop.0+0x126>
   1194a:	bf00      	nop
   1194c:	00035068 	.word	0x00035068
   11950:	0003541a 	.word	0x0003541a
   11954:	00031cd4 	.word	0x00031cd4
   11958:	e000ed00 	.word	0xe000ed00
   1195c:	00035082 	.word	0x00035082
   11960:	00034edd 	.word	0x00034edd
   11964:	00035097 	.word	0x00035097
   11968:	000350b4 	.word	0x000350b4
   1196c:	000350cd 	.word	0x000350cd
   11970:	000350ec 	.word	0x000350ec
   11974:	00034f4d 	.word	0x00034f4d

00011978 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   11978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1197a:	466d      	mov	r5, sp
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1197c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1197e:	b088      	sub	sp, #32
   11980:	466a      	mov	r2, sp
   11982:	2603      	movs	r6, #3
   11984:	4b50      	ldr	r3, [pc, #320]	; (11ac8 <usage_fault.constprop.0+0x150>)
   11986:	4c51      	ldr	r4, [pc, #324]	; (11acc <usage_fault.constprop.0+0x154>)
   11988:	6153      	str	r3, [r2, #20]
   1198a:	6194      	str	r4, [r2, #24]
   1198c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11990:	f842 6f10 	str.w	r6, [r2, #16]!
   11994:	484e      	ldr	r0, [pc, #312]	; (11ad0 <usage_fault.constprop.0+0x158>)
   11996:	f01a fa97 	bl	2bec8 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1199a:	4b4e      	ldr	r3, [pc, #312]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   1199c:	46ad      	mov	sp, r5
   1199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119a0:	019a      	lsls	r2, r3, #6
   119a2:	f140 808f 	bpl.w	11ac4 <usage_fault.constprop.0+0x14c>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   119a6:	b088      	sub	sp, #32
   119a8:	466a      	mov	r2, sp
   119aa:	4b4b      	ldr	r3, [pc, #300]	; (11ad8 <usage_fault.constprop.0+0x160>)
   119ac:	4848      	ldr	r0, [pc, #288]	; (11ad0 <usage_fault.constprop.0+0x158>)
   119ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   119b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   119b6:	f842 6f10 	str.w	r6, [r2, #16]!
   119ba:	f01a fa85 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   119be:	201e      	movs	r0, #30
   119c0:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   119c2:	4b44      	ldr	r3, [pc, #272]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   119c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119c6:	01db      	lsls	r3, r3, #7
   119c8:	d50f      	bpl.n	119ea <usage_fault.constprop.0+0x72>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   119ca:	466d      	mov	r5, sp
   119cc:	b088      	sub	sp, #32
   119ce:	466a      	mov	r2, sp
   119d0:	4b42      	ldr	r3, [pc, #264]	; (11adc <usage_fault.constprop.0+0x164>)
   119d2:	483f      	ldr	r0, [pc, #252]	; (11ad0 <usage_fault.constprop.0+0x158>)
   119d4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   119d8:	2303      	movs	r3, #3
   119da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   119de:	f842 3f10 	str.w	r3, [r2, #16]!
   119e2:	f01a fa71 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   119e6:	201f      	movs	r0, #31
   119e8:	46ad      	mov	sp, r5
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   119ea:	4b3a      	ldr	r3, [pc, #232]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   119ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119ee:	02de      	lsls	r6, r3, #11
   119f0:	d50f      	bpl.n	11a12 <usage_fault.constprop.0+0x9a>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   119f2:	466d      	mov	r5, sp
   119f4:	b088      	sub	sp, #32
   119f6:	466a      	mov	r2, sp
   119f8:	4b39      	ldr	r3, [pc, #228]	; (11ae0 <usage_fault.constprop.0+0x168>)
   119fa:	4835      	ldr	r0, [pc, #212]	; (11ad0 <usage_fault.constprop.0+0x158>)
   119fc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a00:	2303      	movs	r3, #3
   11a02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a06:	f842 3f10 	str.w	r3, [r2, #16]!
   11a0a:	f01a fa5d 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   11a0e:	2002      	movs	r0, #2
   11a10:	46ad      	mov	sp, r5
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11a12:	4b30      	ldr	r3, [pc, #192]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   11a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a16:	031d      	lsls	r5, r3, #12
   11a18:	d50f      	bpl.n	11a3a <usage_fault.constprop.0+0xc2>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   11a1a:	466d      	mov	r5, sp
   11a1c:	b088      	sub	sp, #32
   11a1e:	466a      	mov	r2, sp
   11a20:	4b30      	ldr	r3, [pc, #192]	; (11ae4 <usage_fault.constprop.0+0x16c>)
   11a22:	482b      	ldr	r0, [pc, #172]	; (11ad0 <usage_fault.constprop.0+0x158>)
   11a24:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a28:	2303      	movs	r3, #3
   11a2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a2e:	f842 3f10 	str.w	r3, [r2, #16]!
   11a32:	f01a fa49 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   11a36:	2021      	movs	r0, #33	; 0x21
   11a38:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11a3a:	4b26      	ldr	r3, [pc, #152]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   11a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a3e:	0359      	lsls	r1, r3, #13
   11a40:	d50f      	bpl.n	11a62 <usage_fault.constprop.0+0xea>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11a42:	466d      	mov	r5, sp
   11a44:	b088      	sub	sp, #32
   11a46:	466a      	mov	r2, sp
   11a48:	4b27      	ldr	r3, [pc, #156]	; (11ae8 <usage_fault.constprop.0+0x170>)
   11a4a:	4821      	ldr	r0, [pc, #132]	; (11ad0 <usage_fault.constprop.0+0x158>)
   11a4c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a50:	2303      	movs	r3, #3
   11a52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a56:	f842 3f10 	str.w	r3, [r2, #16]!
   11a5a:	f01a fa35 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   11a5e:	2022      	movs	r0, #34	; 0x22
   11a60:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11a62:	4b1c      	ldr	r3, [pc, #112]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   11a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a66:	039a      	lsls	r2, r3, #14
   11a68:	d50f      	bpl.n	11a8a <usage_fault.constprop.0+0x112>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11a6a:	466d      	mov	r5, sp
   11a6c:	b088      	sub	sp, #32
   11a6e:	466a      	mov	r2, sp
   11a70:	4b1e      	ldr	r3, [pc, #120]	; (11aec <usage_fault.constprop.0+0x174>)
   11a72:	4817      	ldr	r0, [pc, #92]	; (11ad0 <usage_fault.constprop.0+0x158>)
   11a74:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a78:	2303      	movs	r3, #3
   11a7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a7e:	f842 3f10 	str.w	r3, [r2, #16]!
   11a82:	f01a fa21 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   11a86:	2023      	movs	r0, #35	; 0x23
   11a88:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11a8a:	4b12      	ldr	r3, [pc, #72]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   11a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11a8e:	03db      	lsls	r3, r3, #15
   11a90:	d50f      	bpl.n	11ab2 <usage_fault.constprop.0+0x13a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11a92:	466d      	mov	r5, sp
   11a94:	b088      	sub	sp, #32
   11a96:	466a      	mov	r2, sp
   11a98:	4b15      	ldr	r3, [pc, #84]	; (11af0 <usage_fault.constprop.0+0x178>)
   11a9a:	480d      	ldr	r0, [pc, #52]	; (11ad0 <usage_fault.constprop.0+0x158>)
   11a9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11aa0:	2303      	movs	r3, #3
   11aa2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11aa6:	f842 3f10 	str.w	r3, [r2, #16]!
   11aaa:	f01a fa0d 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   11aae:	2024      	movs	r0, #36	; 0x24
   11ab0:	46ad      	mov	sp, r5
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11ab2:	4a08      	ldr	r2, [pc, #32]	; (11ad4 <usage_fault.constprop.0+0x15c>)
   11ab4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11ab6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11aba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11abe:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   11ac0:	46bd      	mov	sp, r7
   11ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   11ac4:	201d      	movs	r0, #29
   11ac6:	e77c      	b.n	119c2 <usage_fault.constprop.0+0x4a>
   11ac8:	00035108 	.word	0x00035108
   11acc:	0003540e 	.word	0x0003540e
   11ad0:	00031cd4 	.word	0x00031cd4
   11ad4:	e000ed00 	.word	0xe000ed00
   11ad8:	00035124 	.word	0x00035124
   11adc:	0003513b 	.word	0x0003513b
   11ae0:	00035159 	.word	0x00035159
   11ae4:	00035187 	.word	0x00035187
   11ae8:	000351a9 	.word	0x000351a9
   11aec:	000351d2 	.word	0x000351d2
   11af0:	000351f0 	.word	0x000351f0

00011af4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af8:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11afa:	4ba4      	ldr	r3, [pc, #656]	; (11d8c <z_arm_fault+0x298>)
{
   11afc:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11afe:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   11b02:	468b      	mov	fp, r1
   11b04:	4616      	mov	r6, r2
   11b06:	2300      	movs	r3, #0
   11b08:	af00      	add	r7, sp, #0
   11b0a:	f3ca 0908 	ubfx	r9, sl, #0, #9
   11b0e:	f383 8811 	msr	BASEPRI, r3
   11b12:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11b16:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11b1a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11b1e:	d00e      	beq.n	11b3e <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   11b20:	499b      	ldr	r1, [pc, #620]	; (11d90 <z_arm_fault+0x29c>)
   11b22:	f240 433e 	movw	r3, #1086	; 0x43e
   11b26:	4a9b      	ldr	r2, [pc, #620]	; (11d94 <z_arm_fault+0x2a0>)
   11b28:	489b      	ldr	r0, [pc, #620]	; (11d98 <z_arm_fault+0x2a4>)
   11b2a:	f019 f945 	bl	2adb8 <assert_print>
   11b2e:	489b      	ldr	r0, [pc, #620]	; (11d9c <z_arm_fault+0x2a8>)
   11b30:	f019 f942 	bl	2adb8 <assert_print>
   11b34:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   11b38:	4896      	ldr	r0, [pc, #600]	; (11d94 <z_arm_fault+0x2a0>)
   11b3a:	f019 f936 	bl	2adaa <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11b3e:	f012 0401 	ands.w	r4, r2, #1
   11b42:	d1ed      	bne.n	11b20 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11b44:	0653      	lsls	r3, r2, #25
   11b46:	d404      	bmi.n	11b52 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11b48:	0710      	lsls	r0, r2, #28
   11b4a:	d414      	bmi.n	11b76 <z_arm_fault+0x82>
			*nested_exc = true;
   11b4c:	f04f 0801 	mov.w	r8, #1
   11b50:	e014      	b.n	11b7c <z_arm_fault+0x88>
		PR_FAULT_INFO("Exception occurred in Secure State");
   11b52:	46e8      	mov	r8, sp
   11b54:	b088      	sub	sp, #32
   11b56:	466a      	mov	r2, sp
   11b58:	4b91      	ldr	r3, [pc, #580]	; (11da0 <z_arm_fault+0x2ac>)
   11b5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b5e:	6153      	str	r3, [r2, #20]
   11b60:	4b90      	ldr	r3, [pc, #576]	; (11da4 <z_arm_fault+0x2b0>)
   11b62:	4891      	ldr	r0, [pc, #580]	; (11da8 <z_arm_fault+0x2b4>)
   11b64:	6193      	str	r3, [r2, #24]
   11b66:	2303      	movs	r3, #3
   11b68:	f842 3f10 	str.w	r3, [r2, #16]!
   11b6c:	f01a f9ac 	bl	2bec8 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11b70:	0771      	lsls	r1, r6, #29
   11b72:	46c5      	mov	sp, r8
   11b74:	d500      	bpl.n	11b78 <z_arm_fault+0x84>
			ptr_esf = (z_arch_esf_t *)psp;
   11b76:	465d      	mov	r5, fp
	*nested_exc = false;
   11b78:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   11b7c:	2d00      	cmp	r5, #0
   11b7e:	d0cf      	beq.n	11b20 <z_arm_fault+0x2c>
	*recoverable = false;
   11b80:	2300      	movs	r3, #0
   11b82:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   11b84:	f1a9 0303 	sub.w	r3, r9, #3
   11b88:	2b09      	cmp	r3, #9
   11b8a:	f200 80e0 	bhi.w	11d4e <z_arm_fault+0x25a>
   11b8e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11b92:	000a      	.short	0x000a
   11b94:	00ca00c7 	.word	0x00ca00c7
   11b98:	00de00aa 	.word	0x00de00aa
   11b9c:	00de00de 	.word	0x00de00de
   11ba0:	00de00de 	.word	0x00de00de
   11ba4:	00cd      	.short	0x00cd
	PR_FAULT_INFO("***** HARD FAULT *****");
   11ba6:	46e9      	mov	r9, sp
   11ba8:	b088      	sub	sp, #32
   11baa:	466a      	mov	r2, sp
   11bac:	f04f 0b03 	mov.w	fp, #3
   11bb0:	4b7e      	ldr	r3, [pc, #504]	; (11dac <z_arm_fault+0x2b8>)
   11bb2:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 11db0 <z_arm_fault+0x2bc>
   11bb6:	6153      	str	r3, [r2, #20]
   11bb8:	f8c2 a018 	str.w	sl, [r2, #24]
   11bbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11bc0:	f842 bf10 	str.w	fp, [r2, #16]!
   11bc4:	4878      	ldr	r0, [pc, #480]	; (11da8 <z_arm_fault+0x2b4>)
   11bc6:	f01a f97f 	bl	2bec8 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   11bca:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11bcc:	4e6f      	ldr	r6, [pc, #444]	; (11d8c <z_arm_fault+0x298>)
	*recoverable = false;
   11bce:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11bd0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11bd2:	46cd      	mov	sp, r9
   11bd4:	079a      	lsls	r2, r3, #30
   11bd6:	d530      	bpl.n	11c3a <z_arm_fault+0x146>
		PR_EXC("  Bus fault on vector table read");
   11bd8:	b088      	sub	sp, #32
   11bda:	466a      	mov	r2, sp
   11bdc:	4b75      	ldr	r3, [pc, #468]	; (11db4 <z_arm_fault+0x2c0>)
		PR_EXC("  Debug event");
   11bde:	e9c2 3a05 	strd	r3, sl, [r2, #20]
   11be2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11be6:	4870      	ldr	r0, [pc, #448]	; (11da8 <z_arm_fault+0x2b4>)
   11be8:	f842 bf10 	str.w	fp, [r2, #16]!
   11bec:	f01a f96c 	bl	2bec8 <z_log_msg_static_create.constprop.0>
   11bf0:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11bf2:	79fb      	ldrb	r3, [r7, #7]
   11bf4:	b9eb      	cbnz	r3, 11c32 <z_arm_fault+0x13e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11bf6:	f107 0208 	add.w	r2, r7, #8
   11bfa:	f105 0620 	add.w	r6, r5, #32
   11bfe:	4613      	mov	r3, r2
   11c00:	6828      	ldr	r0, [r5, #0]
   11c02:	6869      	ldr	r1, [r5, #4]
   11c04:	3508      	adds	r5, #8
   11c06:	c303      	stmia	r3!, {r0, r1}
   11c08:	42b5      	cmp	r5, r6
   11c0a:	461a      	mov	r2, r3
   11c0c:	d1f7      	bne.n	11bfe <z_arm_fault+0x10a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c10:	f1b8 0f00 	cmp.w	r8, #0
   11c14:	f000 80b5 	beq.w	11d82 <z_arm_fault+0x28e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11c1c:	b922      	cbnz	r2, 11c28 <z_arm_fault+0x134>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11c1e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11c22:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11c26:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   11c28:	4620      	mov	r0, r4
   11c2a:	f107 0108 	add.w	r1, r7, #8
   11c2e:	f7ff fb4d 	bl	112cc <z_arm_fatal_error>
}
   11c32:	372c      	adds	r7, #44	; 0x2c
   11c34:	46bd      	mov	sp, r7
   11c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11c3a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	da03      	bge.n	11c48 <z_arm_fault+0x154>
		PR_EXC("  Debug event");
   11c40:	b088      	sub	sp, #32
   11c42:	466a      	mov	r2, sp
   11c44:	4b5c      	ldr	r3, [pc, #368]	; (11db8 <z_arm_fault+0x2c4>)
   11c46:	e7ca      	b.n	11bde <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11c48:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11c4a:	005b      	lsls	r3, r3, #1
   11c4c:	d55b      	bpl.n	11d06 <z_arm_fault+0x212>
		PR_EXC("  Fault escalation (see below)");
   11c4e:	b088      	sub	sp, #32
   11c50:	466a      	mov	r2, sp
   11c52:	4b5a      	ldr	r3, [pc, #360]	; (11dbc <z_arm_fault+0x2c8>)
   11c54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11c58:	e9c2 3a05 	strd	r3, sl, [r2, #20]
   11c5c:	4852      	ldr	r0, [pc, #328]	; (11da8 <z_arm_fault+0x2b4>)
   11c5e:	f842 bf10 	str.w	fp, [r2, #16]!
   11c62:	f01a f931 	bl	2bec8 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11c66:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11c68:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11c6e:	46cd      	mov	sp, r9
   11c70:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11c72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c76:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11c7a:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11c7c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11c84:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c8a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11c8e:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11c92:	429a      	cmp	r2, r3
   11c94:	d008      	beq.n	11ca8 <z_arm_fault+0x1b4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11c96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11c98:	b2db      	uxtb	r3, r3
   11c9a:	b1bb      	cbz	r3, 11ccc <z_arm_fault+0x1d8>
			reason = mem_manage_fault(esf, 1, recoverable);
   11c9c:	2001      	movs	r0, #1
   11c9e:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   11ca0:	f7ff fcc0 	bl	11624 <mem_manage_fault.constprop.0>
   11ca4:	4604      	mov	r4, r0
		break;
   11ca6:	e7a4      	b.n	11bf2 <z_arm_fault+0xfe>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11ca8:	b088      	sub	sp, #32
   11caa:	466a      	mov	r2, sp
   11cac:	682b      	ldr	r3, [r5, #0]
   11cae:	61d3      	str	r3, [r2, #28]
   11cb0:	2304      	movs	r3, #4
   11cb2:	4943      	ldr	r1, [pc, #268]	; (11dc0 <z_arm_fault+0x2cc>)
   11cb4:	483c      	ldr	r0, [pc, #240]	; (11da8 <z_arm_fault+0x2b4>)
   11cb6:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   11cba:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11cbe:	f842 3f10 	str.w	r3, [r2, #16]!
   11cc2:	f01a f901 	bl	2bec8 <z_log_msg_static_create.constprop.0>
   11cc6:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   11cc8:	682c      	ldr	r4, [r5, #0]
   11cca:	e792      	b.n	11bf2 <z_arm_fault+0xfe>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11ccc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11cce:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   11cd2:	d004      	beq.n	11cde <z_arm_fault+0x1ea>
			reason = bus_fault(esf, 1, recoverable);
   11cd4:	2001      	movs	r0, #1
   11cd6:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   11cd8:	f7ff fd84 	bl	117e4 <bus_fault.constprop.0>
   11cdc:	e7e2      	b.n	11ca4 <z_arm_fault+0x1b0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   11cde:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11ce4:	d302      	bcc.n	11cec <z_arm_fault+0x1f8>
		reason = usage_fault(esf);
   11ce6:	f7ff fe47 	bl	11978 <usage_fault.constprop.0>
   11cea:	e7db      	b.n	11ca4 <z_arm_fault+0x1b0>
			__ASSERT(0,
   11cec:	4935      	ldr	r1, [pc, #212]	; (11dc4 <z_arm_fault+0x2d0>)
   11cee:	f44f 7344 	mov.w	r3, #784	; 0x310
   11cf2:	4a28      	ldr	r2, [pc, #160]	; (11d94 <z_arm_fault+0x2a0>)
   11cf4:	4828      	ldr	r0, [pc, #160]	; (11d98 <z_arm_fault+0x2a4>)
   11cf6:	f019 f85f 	bl	2adb8 <assert_print>
   11cfa:	4833      	ldr	r0, [pc, #204]	; (11dc8 <z_arm_fault+0x2d4>)
   11cfc:	f019 f85c 	bl	2adb8 <assert_print>
   11d00:	f44f 7144 	mov.w	r1, #784	; 0x310
   11d04:	e718      	b.n	11b38 <z_arm_fault+0x44>
		__ASSERT(0,
   11d06:	492f      	ldr	r1, [pc, #188]	; (11dc4 <z_arm_fault+0x2d0>)
   11d08:	f44f 7345 	mov.w	r3, #788	; 0x314
   11d0c:	4a21      	ldr	r2, [pc, #132]	; (11d94 <z_arm_fault+0x2a0>)
   11d0e:	4822      	ldr	r0, [pc, #136]	; (11d98 <z_arm_fault+0x2a4>)
   11d10:	f019 f852 	bl	2adb8 <assert_print>
   11d14:	482d      	ldr	r0, [pc, #180]	; (11dcc <z_arm_fault+0x2d8>)
   11d16:	f019 f84f 	bl	2adb8 <assert_print>
   11d1a:	f44f 7145 	mov.w	r1, #788	; 0x314
   11d1e:	e70b      	b.n	11b38 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   11d20:	2000      	movs	r0, #0
   11d22:	1df9      	adds	r1, r7, #7
   11d24:	e7bc      	b.n	11ca0 <z_arm_fault+0x1ac>
		reason = bus_fault(esf, 0, recoverable);
   11d26:	2000      	movs	r0, #0
   11d28:	1df9      	adds	r1, r7, #7
   11d2a:	e7d5      	b.n	11cd8 <z_arm_fault+0x1e4>
	PR_FAULT_INFO(
   11d2c:	466e      	mov	r6, sp
   11d2e:	b088      	sub	sp, #32
   11d30:	466a      	mov	r2, sp
   11d32:	4b27      	ldr	r3, [pc, #156]	; (11dd0 <z_arm_fault+0x2dc>)
   11d34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d38:	6153      	str	r3, [r2, #20]
   11d3a:	4b26      	ldr	r3, [pc, #152]	; (11dd4 <z_arm_fault+0x2e0>)
   11d3c:	6193      	str	r3, [r2, #24]
   11d3e:	2303      	movs	r3, #3
   11d40:	f842 3f10 	str.w	r3, [r2, #16]!
	PR_FAULT_INFO("***** %s %d) *****",
   11d44:	4818      	ldr	r0, [pc, #96]	; (11da8 <z_arm_fault+0x2b4>)
   11d46:	f01a f8bf 	bl	2bec8 <z_log_msg_static_create.constprop.0>
   11d4a:	46b5      	mov	sp, r6
}
   11d4c:	e751      	b.n	11bf2 <z_arm_fault+0xfe>
	PR_FAULT_INFO("***** %s %d) *****",
   11d4e:	4a22      	ldr	r2, [pc, #136]	; (11dd8 <z_arm_fault+0x2e4>)
   11d50:	466e      	mov	r6, sp
   11d52:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   11d56:	b08a      	sub	sp, #40	; 0x28
   11d58:	4b20      	ldr	r3, [pc, #128]	; (11ddc <z_arm_fault+0x2e8>)
   11d5a:	bf18      	it	ne
   11d5c:	4613      	movne	r3, r2
   11d5e:	466a      	mov	r2, sp
   11d60:	491f      	ldr	r1, [pc, #124]	; (11de0 <z_arm_fault+0x2ec>)
   11d62:	6151      	str	r1, [r2, #20]
   11d64:	491f      	ldr	r1, [pc, #124]	; (11de4 <z_arm_fault+0x2f0>)
   11d66:	e9c2 1306 	strd	r1, r3, [r2, #24]
   11d6a:	f1a9 0310 	sub.w	r3, r9, #16
   11d6e:	6213      	str	r3, [r2, #32]
   11d70:	f240 3301 	movw	r3, #769	; 0x301
   11d74:	8493      	strh	r3, [r2, #36]	; 0x24
   11d76:	4b1c      	ldr	r3, [pc, #112]	; (11de8 <z_arm_fault+0x2f4>)
   11d78:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   11d7c:	f842 3f10 	str.w	r3, [r2, #16]!
   11d80:	e7e0      	b.n	11d44 <z_arm_fault+0x250>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11d82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11d86:	f023 0301 	bic.w	r3, r3, #1
   11d8a:	e74c      	b.n	11c26 <z_arm_fault+0x132>
   11d8c:	e000ed00 	.word	0xe000ed00
   11d90:	0003524d 	.word	0x0003524d
   11d94:	00034f80 	.word	0x00034f80
   11d98:	00033bc2 	.word	0x00033bc2
   11d9c:	00035260 	.word	0x00035260
   11da0:	0003529e 	.word	0x0003529e
   11da4:	00035440 	.word	0x00035440
   11da8:	00031cd4 	.word	0x00031cd4
   11dac:	000352c5 	.word	0x000352c5
   11db0:	00035435 	.word	0x00035435
   11db4:	000352e0 	.word	0x000352e0
   11db8:	00035305 	.word	0x00035305
   11dbc:	00035317 	.word	0x00035317
   11dc0:	0003533a 	.word	0x0003533a
   11dc4:	000386dc 	.word	0x000386dc
   11dc8:	0003535a 	.word	0x0003535a
   11dcc:	0003537e 	.word	0x0003537e
   11dd0:	000353ae 	.word	0x000353ae
   11dd4:	00035400 	.word	0x00035400
   11dd8:	00035234 	.word	0x00035234
   11ddc:	0003521f 	.word	0x0003521f
   11de0:	000353d6 	.word	0x000353d6
   11de4:	000353ed 	.word	0x000353ed
   11de8:	01000005 	.word	0x01000005

00011dec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11dec:	4b04      	ldr	r3, [pc, #16]	; (11e00 <z_arm_fault_init+0x14>)
   11dee:	695a      	ldr	r2, [r3, #20]
   11df0:	f042 0210 	orr.w	r2, r2, #16
   11df4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11df6:	695a      	ldr	r2, [r3, #20]
   11df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11dfc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11dfe:	4770      	bx	lr
   11e00:	e000ed00 	.word	0xe000ed00

00011e04 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11e04:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11e08:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11e0c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11e0e:	4672      	mov	r2, lr
	bl z_arm_fault
   11e10:	f7ff fe70 	bl	11af4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11e14:	bd01      	pop	{r0, pc}
   11e16:	bf00      	nop

00011e18 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11e18:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11e1a:	2120      	movs	r1, #32
   11e1c:	4803      	ldr	r0, [pc, #12]	; (11e2c <z_arm_interrupt_init+0x14>)
   11e1e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11e20:	3301      	adds	r3, #1
   11e22:	2b41      	cmp	r3, #65	; 0x41
   11e24:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11e28:	d1f9      	bne.n	11e1e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11e2a:	4770      	bx	lr
   11e2c:	e000e100 	.word	0xe000e100

00011e30 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11e30:	2000      	movs	r0, #0
    msr CONTROL, r0
   11e32:	f380 8814 	msr	CONTROL, r0
    isb
   11e36:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11e3a:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11e3c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11e40:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11e44:	f7fd f96a 	bl	f11c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11e48:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11e4a:	490e      	ldr	r1, [pc, #56]	; (11e84 <__start+0x54>)
    str r0, [r1]
   11e4c:	6008      	str	r0, [r1, #0]
    dsb
   11e4e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11e52:	480d      	ldr	r0, [pc, #52]	; (11e88 <__start+0x58>)
    msr msp, r0
   11e54:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11e58:	f000 f83e 	bl	11ed8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11e5c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11e5e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11e62:	480a      	ldr	r0, [pc, #40]	; (11e8c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11e68:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11e6a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11e6e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11e72:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11e74:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11e76:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11e7a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11e7e:	f7ff faf9 	bl	11474 <z_arm_prep_c>
   11e82:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11e84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11e88:	20014728 	.word	0x20014728
    ldr r0, =z_interrupt_stacks
   11e8c:	20011de8 	.word	0x20011de8

00011e90 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11e90:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11e94:	4905      	ldr	r1, [pc, #20]	; (11eac <sys_arch_reboot+0x1c>)
   11e96:	4b06      	ldr	r3, [pc, #24]	; (11eb0 <sys_arch_reboot+0x20>)
   11e98:	68ca      	ldr	r2, [r1, #12]
   11e9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11e9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11ea0:	60cb      	str	r3, [r1, #12]
   11ea2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11ea6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11ea8:	e7fd      	b.n	11ea6 <sys_arch_reboot+0x16>
   11eaa:	bf00      	nop
   11eac:	e000ed00 	.word	0xe000ed00
   11eb0:	05fa0004 	.word	0x05fa0004

00011eb4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11eb4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11eb6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11eb8:	4906      	ldr	r1, [pc, #24]	; (11ed4 <z_arm_clear_arm_mpu_config+0x20>)
   11eba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11ebe:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   11ec2:	4293      	cmp	r3, r2
   11ec4:	db00      	blt.n	11ec8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11ec6:	4770      	bx	lr
  mpu->RNR = rnr;
   11ec8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11ecc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11ed0:	3301      	adds	r3, #1
   11ed2:	e7f6      	b.n	11ec2 <z_arm_clear_arm_mpu_config+0xe>
   11ed4:	e000ed00 	.word	0xe000ed00

00011ed8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11ed8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11eda:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11edc:	2400      	movs	r4, #0
   11ede:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11ee2:	f7ff ffe7 	bl	11eb4 <z_arm_clear_arm_mpu_config>
   11ee6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11ee8:	f04f 30ff 	mov.w	r0, #4294967295
   11eec:	4a0c      	ldr	r2, [pc, #48]	; (11f20 <z_arm_init_arch_hw_at_boot+0x48>)
   11eee:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11ef2:	3301      	adds	r3, #1
   11ef4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   11ef6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11efa:	d1f8      	bne.n	11eee <z_arm_init_arch_hw_at_boot+0x16>
   11efc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11efe:	f04f 30ff 	mov.w	r0, #4294967295
   11f02:	4a07      	ldr	r2, [pc, #28]	; (11f20 <z_arm_init_arch_hw_at_boot+0x48>)
   11f04:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11f08:	3301      	adds	r3, #1
   11f0a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11f0c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11f10:	d1f8      	bne.n	11f04 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   11f12:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11f18:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11f1c:	bd10      	pop	{r4, pc}
   11f1e:	bf00      	nop
   11f20:	e000e100 	.word	0xe000e100

00011f24 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11f24:	4b08      	ldr	r3, [pc, #32]	; (11f48 <z_impl_k_thread_abort+0x24>)
   11f26:	689b      	ldr	r3, [r3, #8]
   11f28:	4283      	cmp	r3, r0
   11f2a:	d10b      	bne.n	11f44 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11f2c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11f30:	b143      	cbz	r3, 11f44 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11f32:	4b06      	ldr	r3, [pc, #24]	; (11f4c <z_impl_k_thread_abort+0x28>)
   11f34:	685a      	ldr	r2, [r3, #4]
   11f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11f3a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11f42:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11f44:	f014 bfb0 	b.w	26ea8 <z_thread_abort>
   11f48:	2000eb4c 	.word	0x2000eb4c
   11f4c:	e000ed00 	.word	0xe000ed00

00011f50 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11f52:	4c09      	ldr	r4, [pc, #36]	; (11f78 <z_arm_configure_static_mpu_regions+0x28>)
   11f54:	4a09      	ldr	r2, [pc, #36]	; (11f7c <z_arm_configure_static_mpu_regions+0x2c>)
   11f56:	4623      	mov	r3, r4
   11f58:	2101      	movs	r1, #1
   11f5a:	4809      	ldr	r0, [pc, #36]	; (11f80 <z_arm_configure_static_mpu_regions+0x30>)
   11f5c:	f000 f934 	bl	121c8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11f60:	2300      	movs	r3, #0
   11f62:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11f64:	4b07      	ldr	r3, [pc, #28]	; (11f84 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11f66:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11f68:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11f6a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11f6c:	9301      	str	r3, [sp, #4]
   11f6e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11f70:	f000 f94e 	bl	12210 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11f74:	b004      	add	sp, #16
   11f76:	bd10      	pop	{r4, pc}
   11f78:	20040000 	.word	0x20040000
   11f7c:	2000c580 	.word	0x2000c580
   11f80:	000320c8 	.word	0x000320c8
   11f84:	2000d130 	.word	0x2000d130

00011f88 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11f88:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11f8a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11f8c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11f8e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11f92:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11f96:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11f98:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11f9a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11f9c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11fa0:	4905      	ldr	r1, [pc, #20]	; (11fb8 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11fa2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11fa6:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11faa:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11fae:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11fb2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11fb6:	bd10      	pop	{r4, pc}
   11fb8:	e000ed00 	.word	0xe000ed00

00011fbc <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   11fbc:	b580      	push	{r7, lr}
   11fbe:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11fc0:	b088      	sub	sp, #32
   11fc2:	466a      	mov	r2, sp
   11fc4:	4b08      	ldr	r3, [pc, #32]	; (11fe8 <region_allocate_and_init.part.0+0x2c>)
   11fc6:	6153      	str	r3, [r2, #20]
   11fc8:	4b08      	ldr	r3, [pc, #32]	; (11fec <region_allocate_and_init.part.0+0x30>)
   11fca:	e9c2 3006 	strd	r3, r0, [r2, #24]
   11fce:	2304      	movs	r3, #4
   11fd0:	f842 3f10 	str.w	r3, [r2, #16]!
   11fd4:	2300      	movs	r3, #0
   11fd6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11fda:	4805      	ldr	r0, [pc, #20]	; (11ff0 <region_allocate_and_init.part.0+0x34>)
   11fdc:	f7fd fc08 	bl	f7f0 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11fe0:	f06f 0015 	mvn.w	r0, #21
   11fe4:	46bd      	mov	sp, r7
   11fe6:	bd80      	pop	{r7, pc}
   11fe8:	0003544c 	.word	0x0003544c
   11fec:	000355fc 	.word	0x000355fc
   11ff0:	00031c54 	.word	0x00031c54

00011ff4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11ffa:	4606      	mov	r6, r0
   11ffc:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   12000:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   12002:	4d61      	ldr	r5, [pc, #388]	; (12188 <mpu_configure_regions_and_partition.constprop.0+0x194>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   12004:	af00      	add	r7, sp, #0
   12006:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   12008:	687b      	ldr	r3, [r7, #4]
   1200a:	4599      	cmp	r9, r3
   1200c:	da39      	bge.n	12082 <mpu_configure_regions_and_partition.constprop.0+0x8e>
		if (regions[i].size == 0U) {
   1200e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   12012:	f1b8 0f00 	cmp.w	r8, #0
   12016:	d058      	beq.n	120ca <mpu_configure_regions_and_partition.constprop.0+0xd6>
		&&
   12018:	f1b8 0f1f 	cmp.w	r8, #31
   1201c:	d91d      	bls.n	1205a <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   1201e:	f018 0f1f 	tst.w	r8, #31
   12022:	d11a      	bne.n	1205a <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   12024:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   12028:	f01b 0f1f 	tst.w	fp, #31
   1202c:	d115      	bne.n	1205a <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1202e:	4658      	mov	r0, fp
   12030:	f019 ff4f 	bl	2bed2 <arm_cmse_mpu_region_get>
   12034:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12036:	eb08 000b 	add.w	r0, r8, fp
   1203a:	3801      	subs	r0, #1
   1203c:	f019 ff49 	bl	2bed2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12040:	4582      	cmp	sl, r0
   12042:	d023      	beq.n	1208c <mpu_configure_regions_and_partition.constprop.0+0x98>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   12044:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   12048:	466c      	mov	r4, sp
   1204a:	b088      	sub	sp, #32
   1204c:	466a      	mov	r2, sp
   1204e:	494f      	ldr	r1, [pc, #316]	; (1218c <mpu_configure_regions_and_partition.constprop.0+0x198>)
   12050:	6151      	str	r1, [r2, #20]
   12052:	494f      	ldr	r1, [pc, #316]	; (12190 <mpu_configure_regions_and_partition.constprop.0+0x19c>)
   12054:	e9c2 1a06 	strd	r1, sl, [r2, #24]
   12058:	e007      	b.n	1206a <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1205a:	466c      	mov	r4, sp
   1205c:	b088      	sub	sp, #32
   1205e:	466a      	mov	r2, sp
   12060:	4b4c      	ldr	r3, [pc, #304]	; (12194 <mpu_configure_regions_and_partition.constprop.0+0x1a0>)
   12062:	6153      	str	r3, [r2, #20]
   12064:	4b4a      	ldr	r3, [pc, #296]	; (12190 <mpu_configure_regions_and_partition.constprop.0+0x19c>)
   12066:	e9c2 3906 	strd	r3, r9, [r2, #24]
			LOG_ERR("Invalid underlying region index %u",
   1206a:	2304      	movs	r3, #4
   1206c:	f842 3f10 	str.w	r3, [r2, #16]!
   12070:	2300      	movs	r3, #0
   12072:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12076:	4848      	ldr	r0, [pc, #288]	; (12198 <mpu_configure_regions_and_partition.constprop.0+0x1a4>)
   12078:	f7fd fbba 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1207c:	46a5      	mov	sp, r4
			return -EINVAL;
   1207e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   12082:	4620      	mov	r0, r4
   12084:	371c      	adds	r7, #28
   12086:	46bd      	mov	sp, r7
   12088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1208c:	f11a 0f16 	cmn.w	sl, #22
   12090:	d0da      	beq.n	12048 <mpu_configure_regions_and_partition.constprop.0+0x54>
   12092:	4554      	cmp	r4, sl
   12094:	ddd8      	ble.n	12048 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   12096:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1209a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1209e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   120a2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   120a6:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   120aa:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   120ae:	e9d6 2100 	ldrd	r2, r1, [r6]
   120b2:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   120b4:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   120b6:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   120ba:	d11e      	bne.n	120fa <mpu_configure_regions_and_partition.constprop.0+0x106>
   120bc:	45d8      	cmp	r8, fp
   120be:	d108      	bne.n	120d2 <mpu_configure_regions_and_partition.constprop.0+0xde>
			mpu_configure_region(u_reg_index, &regions[i]);
   120c0:	4631      	mov	r1, r6
   120c2:	fa5f f08a 	uxtb.w	r0, sl
   120c6:	f019 ff0d 	bl	2bee4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   120ca:	f109 0901 	add.w	r9, r9, #1
   120ce:	360c      	adds	r6, #12
   120d0:	e79a      	b.n	12008 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   120d2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   120d6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   120da:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   120de:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   120e2:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   120e4:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   120e6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   120ea:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   120ec:	f019 fefa 	bl	2bee4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   120f0:	f110 0f16 	cmn.w	r0, #22
   120f4:	d0c3      	beq.n	1207e <mpu_configure_regions_and_partition.constprop.0+0x8a>
			reg_index++;
   120f6:	1c44      	adds	r4, r0, #1
   120f8:	e7e7      	b.n	120ca <mpu_configure_regions_and_partition.constprop.0+0xd6>
				regions[i].start - 1);
   120fa:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   120fc:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   120fe:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   12100:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   12104:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   12108:	d108      	bne.n	1211c <mpu_configure_regions_and_partition.constprop.0+0x128>
	return MPU->RLAR;
   1210a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1210e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   12110:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   12114:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   12116:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1211a:	e7e7      	b.n	120ec <mpu_configure_regions_and_partition.constprop.0+0xf8>
	return MPU->RLAR;
   1211c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   12120:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   12124:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   12126:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1212a:	4631      	mov	r1, r6
   1212c:	f019 feda 	bl	2bee4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12130:	f110 0f16 	cmn.w	r0, #22
   12134:	d0a3      	beq.n	1207e <mpu_configure_regions_and_partition.constprop.0+0x8a>
	MPU->RNR = rnr;
   12136:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1213a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1213e:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   12140:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   12144:	f362 0304 	bfi	r3, r2, #0, #5
   12148:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1214a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1214e:	7c3a      	ldrb	r2, [r7, #16]
   12150:	085b      	lsrs	r3, r3, #1
   12152:	f363 1247 	bfi	r2, r3, #5, #3
   12156:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   12158:	e9d6 3200 	ldrd	r3, r2, [r6]
   1215c:	4413      	add	r3, r2
   1215e:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   12160:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   12164:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   12166:	4443      	add	r3, r8
   12168:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1216c:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1216e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   12172:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   12174:	617b      	str	r3, [r7, #20]
   12176:	d902      	bls.n	1217e <mpu_configure_regions_and_partition.constprop.0+0x18a>
   12178:	f7ff ff20 	bl	11fbc <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1217c:	e7b8      	b.n	120f0 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	region_init(index, region_conf);
   1217e:	f107 0108 	add.w	r1, r7, #8
   12182:	f7ff ff01 	bl	11f88 <region_init>
   12186:	e7b6      	b.n	120f6 <mpu_configure_regions_and_partition.constprop.0+0x102>
   12188:	e000ed00 	.word	0xe000ed00
   1218c:	0003549d 	.word	0x0003549d
   12190:	00035615 	.word	0x00035615
   12194:	00035476 	.word	0x00035476
   12198:	00031c54 	.word	0x00031c54

0001219c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1219c:	2205      	movs	r2, #5
   1219e:	4b04      	ldr	r3, [pc, #16]	; (121b0 <arm_core_mpu_enable+0x14>)
   121a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   121a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   121a8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   121ac:	4770      	bx	lr
   121ae:	bf00      	nop
   121b0:	e000ed00 	.word	0xe000ed00

000121b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   121b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   121b8:	2200      	movs	r2, #0
   121ba:	4b02      	ldr	r3, [pc, #8]	; (121c4 <arm_core_mpu_disable+0x10>)
   121bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   121c0:	4770      	bx	lr
   121c2:	bf00      	nop
   121c4:	e000ed00 	.word	0xe000ed00

000121c8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   121c8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   121ca:	4d0c      	ldr	r5, [pc, #48]	; (121fc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   121cc:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   121ce:	782a      	ldrb	r2, [r5, #0]
   121d0:	f7ff ff10 	bl	11ff4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   121d4:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   121d6:	3016      	adds	r0, #22
   121d8:	d10f      	bne.n	121fa <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   121da:	f44f 738d 	mov.w	r3, #282	; 0x11a
   121de:	4a08      	ldr	r2, [pc, #32]	; (12200 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   121e0:	4908      	ldr	r1, [pc, #32]	; (12204 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   121e2:	4809      	ldr	r0, [pc, #36]	; (12208 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   121e4:	f018 fde8 	bl	2adb8 <assert_print>
   121e8:	4621      	mov	r1, r4
   121ea:	4808      	ldr	r0, [pc, #32]	; (1220c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   121ec:	f018 fde4 	bl	2adb8 <assert_print>
   121f0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   121f4:	4802      	ldr	r0, [pc, #8]	; (12200 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   121f6:	f018 fdd8 	bl	2adaa <assert_post_action>
			regions_num);
	}
}
   121fa:	bd38      	pop	{r3, r4, r5, pc}
   121fc:	2000ee73 	.word	0x2000ee73
   12200:	000354c4 	.word	0x000354c4
   12204:	000386dc 	.word	0x000386dc
   12208:	00033bc2 	.word	0x00033bc2
   1220c:	000354fb 	.word	0x000354fb

00012210 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   12210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12214:	4e31      	ldr	r6, [pc, #196]	; (122dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   12216:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12218:	4605      	mov	r5, r0
   1221a:	f04f 0800 	mov.w	r8, #0
   1221e:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   12220:	4f2f      	ldr	r7, [pc, #188]	; (122e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12222:	45c8      	cmp	r8, r9
   12224:	db02      	blt.n	1222c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   12226:	b003      	add	sp, #12
   12228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1222c:	f8d5 a004 	ldr.w	sl, [r5, #4]
   12230:	f1ba 0f00 	cmp.w	sl, #0
   12234:	d04c      	beq.n	122d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   12236:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12238:	4608      	mov	r0, r1
   1223a:	9101      	str	r1, [sp, #4]
   1223c:	f019 fe49 	bl	2bed2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12240:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12242:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12244:	eb0a 0001 	add.w	r0, sl, r1
   12248:	3801      	subs	r0, #1
   1224a:	f019 fe42 	bl	2bed2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1224e:	4284      	cmp	r4, r0
   12250:	f04f 0214 	mov.w	r2, #20
   12254:	4b23      	ldr	r3, [pc, #140]	; (122e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   12256:	d015      	beq.n	12284 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   12258:	fb02 f308 	mul.w	r3, r2, r8
   1225c:	f06f 0215 	mvn.w	r2, #21
   12260:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   12264:	f44f 7395 	mov.w	r3, #298	; 0x12a
   12268:	4a1f      	ldr	r2, [pc, #124]	; (122e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1226a:	4920      	ldr	r1, [pc, #128]	; (122ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   1226c:	4820      	ldr	r0, [pc, #128]	; (122f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   1226e:	f018 fda3 	bl	2adb8 <assert_print>
   12272:	4649      	mov	r1, r9
   12274:	481f      	ldr	r0, [pc, #124]	; (122f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   12276:	f018 fd9f 	bl	2adb8 <assert_print>
   1227a:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1227e:	481a      	ldr	r0, [pc, #104]	; (122e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   12280:	f018 fd93 	bl	2adaa <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   12284:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   12288:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1228a:	d0eb      	beq.n	12264 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1228c:	7819      	ldrb	r1, [r3, #0]
   1228e:	42a1      	cmp	r1, r4
   12290:	dde8      	ble.n	12264 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   12292:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   12296:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   1229a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1229e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   122a2:	f100 0108 	add.w	r1, r0, #8
   122a6:	7b00      	ldrb	r0, [r0, #12]
   122a8:	f364 0004 	bfi	r0, r4, #0, #5
   122ac:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   122ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   122b2:	790c      	ldrb	r4, [r1, #4]
   122b4:	0840      	lsrs	r0, r0, #1
   122b6:	f360 1447 	bfi	r4, r0, #5, #3
   122ba:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   122bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   122c0:	f021 011f 	bic.w	r1, r1, #31
   122c4:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   122c6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   122ca:	f021 011f 	bic.w	r1, r1, #31
   122ce:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   122d0:	f108 0801 	add.w	r8, r8, #1
   122d4:	3614      	adds	r6, #20
   122d6:	350c      	adds	r5, #12
   122d8:	e7a3      	b.n	12222 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   122da:	bf00      	nop
   122dc:	2000e2f0 	.word	0x2000e2f0
   122e0:	e000ed00 	.word	0xe000ed00
   122e4:	2000ee73 	.word	0x2000ee73
   122e8:	000354c4 	.word	0x000354c4
   122ec:	000386dc 	.word	0x000386dc
   122f0:	00033bc2 	.word	0x00033bc2
   122f4:	00035527 	.word	0x00035527

000122f8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   122f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   122fa:	4d1f      	ldr	r5, [pc, #124]	; (12378 <z_arm_mpu_init+0x80>)
   122fc:	682c      	ldr	r4, [r5, #0]
   122fe:	2c10      	cmp	r4, #16
   12300:	d910      	bls.n	12324 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   12302:	f240 1351 	movw	r3, #337	; 0x151
   12306:	4a1d      	ldr	r2, [pc, #116]	; (1237c <z_arm_mpu_init+0x84>)
   12308:	491d      	ldr	r1, [pc, #116]	; (12380 <z_arm_mpu_init+0x88>)
   1230a:	481e      	ldr	r0, [pc, #120]	; (12384 <z_arm_mpu_init+0x8c>)
   1230c:	f018 fd54 	bl	2adb8 <assert_print>
   12310:	4621      	mov	r1, r4
   12312:	2210      	movs	r2, #16
   12314:	481c      	ldr	r0, [pc, #112]	; (12388 <z_arm_mpu_init+0x90>)
   12316:	f018 fd4f 	bl	2adb8 <assert_print>
   1231a:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   1231e:	4817      	ldr	r0, [pc, #92]	; (1237c <z_arm_mpu_init+0x84>)
   12320:	f018 fd43 	bl	2adaa <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12324:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   12326:	f7ff ff45 	bl	121b4 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1232a:	4b18      	ldr	r3, [pc, #96]	; (1238c <z_arm_mpu_init+0x94>)
   1232c:	4a18      	ldr	r2, [pc, #96]	; (12390 <z_arm_mpu_init+0x98>)
   1232e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12332:	4284      	cmp	r4, r0
   12334:	d117      	bne.n	12366 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   12336:	4b17      	ldr	r3, [pc, #92]	; (12394 <z_arm_mpu_init+0x9c>)
   12338:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1233a:	f7ff ff2f 	bl	1219c <arm_core_mpu_enable>
	__ASSERT(
   1233e:	4b13      	ldr	r3, [pc, #76]	; (1238c <z_arm_mpu_init+0x94>)
   12340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   12344:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12348:	2b10      	cmp	r3, #16
   1234a:	d013      	beq.n	12374 <z_arm_mpu_init+0x7c>
   1234c:	4912      	ldr	r1, [pc, #72]	; (12398 <z_arm_mpu_init+0xa0>)
   1234e:	f240 13bb 	movw	r3, #443	; 0x1bb
   12352:	4a0a      	ldr	r2, [pc, #40]	; (1237c <z_arm_mpu_init+0x84>)
   12354:	480b      	ldr	r0, [pc, #44]	; (12384 <z_arm_mpu_init+0x8c>)
   12356:	f018 fd2f 	bl	2adb8 <assert_print>
   1235a:	4810      	ldr	r0, [pc, #64]	; (1239c <z_arm_mpu_init+0xa4>)
   1235c:	f018 fd2c 	bl	2adb8 <assert_print>
   12360:	f240 11bb 	movw	r1, #443	; 0x1bb
   12364:	e7db      	b.n	1231e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   12366:	6869      	ldr	r1, [r5, #4]
   12368:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1236c:	f7ff fe0c 	bl	11f88 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12370:	3001      	adds	r0, #1
   12372:	e7de      	b.n	12332 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   12374:	2000      	movs	r0, #0
   12376:	bd38      	pop	{r3, r4, r5, pc}
   12378:	000320d4 	.word	0x000320d4
   1237c:	000354c4 	.word	0x000354c4
   12380:	000386dc 	.word	0x000386dc
   12384:	00033bc2 	.word	0x00033bc2
   12388:	00035556 	.word	0x00035556
   1238c:	e000ed00 	.word	0xe000ed00
   12390:	0044ffaa 	.word	0x0044ffaa
   12394:	2000ee73 	.word	0x2000ee73
   12398:	0003558a 	.word	0x0003558a
   1239c:	000355db 	.word	0x000355db

000123a0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(void)
{
   123a0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   123a2:	4b0b      	ldr	r3, [pc, #44]	; (123d0 <malloc_prepare+0x30>)
   123a4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   123a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   123ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   123b0:	d20c      	bcs.n	123cc <malloc_prepare+0x2c>
   123b2:	4908      	ldr	r1, [pc, #32]	; (123d4 <malloc_prepare+0x34>)
   123b4:	2380      	movs	r3, #128	; 0x80
   123b6:	4a08      	ldr	r2, [pc, #32]	; (123d8 <malloc_prepare+0x38>)
   123b8:	4808      	ldr	r0, [pc, #32]	; (123dc <malloc_prepare+0x3c>)
   123ba:	f018 fcfd 	bl	2adb8 <assert_print>
   123be:	4808      	ldr	r0, [pc, #32]	; (123e0 <malloc_prepare+0x40>)
   123c0:	f018 fcfa 	bl	2adb8 <assert_print>
   123c4:	2180      	movs	r1, #128	; 0x80
   123c6:	4804      	ldr	r0, [pc, #16]	; (123d8 <malloc_prepare+0x38>)
   123c8:	f018 fcef 	bl	2adaa <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   123cc:	2000      	movs	r0, #0
   123ce:	bd08      	pop	{r3, pc}
   123d0:	20019e9c 	.word	0x20019e9c
   123d4:	00035669 	.word	0x00035669
   123d8:	00035639 	.word	0x00035639
   123dc:	00033bc2 	.word	0x00033bc2
   123e0:	000356b0 	.word	0x000356b0

000123e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   123e4:	4b01      	ldr	r3, [pc, #4]	; (123ec <__stdout_hook_install+0x8>)
   123e6:	6018      	str	r0, [r3, #0]
}
   123e8:	4770      	bx	lr
   123ea:	bf00      	nop
   123ec:	2000c838 	.word	0x2000c838

000123f0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   123f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123f2:	4606      	mov	r6, r0
   123f4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   123f6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   123f8:	4f06      	ldr	r7, [pc, #24]	; (12414 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   123fa:	42ac      	cmp	r4, r5
   123fc:	da08      	bge.n	12410 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   123fe:	683b      	ldr	r3, [r7, #0]
   12400:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   12402:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   12404:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   12406:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1240a:	d001      	beq.n	12410 <z_impl_zephyr_read_stdin+0x20>
   1240c:	280d      	cmp	r0, #13
   1240e:	d1f4      	bne.n	123fa <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   12410:	4620      	mov	r0, r4
   12412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12414:	2000c834 	.word	0x2000c834

00012418 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   12418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1241a:	460d      	mov	r5, r1
   1241c:	4f09      	ldr	r7, [pc, #36]	; (12444 <z_impl_zephyr_write_stdout+0x2c>)
   1241e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   12420:	f1c0 0401 	rsb	r4, r0, #1
   12424:	19a3      	adds	r3, r4, r6
   12426:	429d      	cmp	r5, r3
   12428:	dc01      	bgt.n	1242e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1242a:	4628      	mov	r0, r5
   1242c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1242e:	7873      	ldrb	r3, [r6, #1]
   12430:	2b0a      	cmp	r3, #10
   12432:	d102      	bne.n	1243a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   12434:	200d      	movs	r0, #13
   12436:	683b      	ldr	r3, [r7, #0]
   12438:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1243a:	683b      	ldr	r3, [r7, #0]
   1243c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   12440:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   12442:	e7ef      	b.n	12424 <z_impl_zephyr_write_stdout+0xc>
   12444:	2000c838 	.word	0x2000c838

00012448 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   12448:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1244a:	2105      	movs	r1, #5
   1244c:	4801      	ldr	r0, [pc, #4]	; (12454 <_exit+0xc>)
   1244e:	f7ff ffe3 	bl	12418 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   12452:	e7fe      	b.n	12452 <_exit+0xa>
   12454:	00035737 	.word	0x00035737

00012458 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   12458:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1245a:	4c07      	ldr	r4, [pc, #28]	; (12478 <_sbrk+0x20>)
   1245c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1245e:	18c2      	adds	r2, r0, r3
   12460:	4806      	ldr	r0, [pc, #24]	; (1247c <_sbrk+0x24>)
   12462:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   12466:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1246a:	428a      	cmp	r2, r1
		heap_sz += count;
   1246c:	bf36      	itet	cc
   1246e:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   12470:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   12474:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   12476:	bd10      	pop	{r4, pc}
   12478:	2000e304 	.word	0x2000e304
   1247c:	20019e9c 	.word	0x20019e9c

00012480 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   12480:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   12482:	4604      	mov	r4, r0
   12484:	b958      	cbnz	r0, 1249e <__retarget_lock_init_recursive+0x1e>
   12486:	4911      	ldr	r1, [pc, #68]	; (124cc <__retarget_lock_init_recursive+0x4c>)
   12488:	f240 1379 	movw	r3, #377	; 0x179
   1248c:	4a10      	ldr	r2, [pc, #64]	; (124d0 <__retarget_lock_init_recursive+0x50>)
   1248e:	4811      	ldr	r0, [pc, #68]	; (124d4 <__retarget_lock_init_recursive+0x54>)
   12490:	f018 fc92 	bl	2adb8 <assert_print>
   12494:	f240 1179 	movw	r1, #377	; 0x179
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   12498:	480d      	ldr	r0, [pc, #52]	; (124d0 <__retarget_lock_init_recursive+0x50>)
   1249a:	f018 fc86 	bl	2adaa <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   1249e:	2014      	movs	r0, #20
   124a0:	f015 fda8 	bl	27ff4 <malloc>
   124a4:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   124a6:	b960      	cbnz	r0, 124c2 <__retarget_lock_init_recursive+0x42>
   124a8:	490b      	ldr	r1, [pc, #44]	; (124d8 <__retarget_lock_init_recursive+0x58>)
   124aa:	f240 1381 	movw	r3, #385	; 0x181
   124ae:	4a08      	ldr	r2, [pc, #32]	; (124d0 <__retarget_lock_init_recursive+0x50>)
   124b0:	4808      	ldr	r0, [pc, #32]	; (124d4 <__retarget_lock_init_recursive+0x54>)
   124b2:	f018 fc81 	bl	2adb8 <assert_print>
   124b6:	4809      	ldr	r0, [pc, #36]	; (124dc <__retarget_lock_init_recursive+0x5c>)
   124b8:	f018 fc7e 	bl	2adb8 <assert_print>
   124bc:	f240 1181 	movw	r1, #385	; 0x181
   124c0:	e7ea      	b.n	12498 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   124c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   124c6:	f01d bfa6 	b.w	30416 <z_impl_k_mutex_init>
   124ca:	bf00      	nop
   124cc:	0003573e 	.word	0x0003573e
   124d0:	00035639 	.word	0x00035639
   124d4:	00033bc2 	.word	0x00033bc2
   124d8:	0003573d 	.word	0x0003573d
   124dc:	00035779 	.word	0x00035779

000124e0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   124e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   124e2:	b958      	cbnz	r0, 124fc <__retarget_lock_acquire_recursive+0x1c>
   124e4:	4909      	ldr	r1, [pc, #36]	; (1250c <__retarget_lock_acquire_recursive+0x2c>)
   124e6:	480a      	ldr	r0, [pc, #40]	; (12510 <__retarget_lock_acquire_recursive+0x30>)
   124e8:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   124ec:	4a09      	ldr	r2, [pc, #36]	; (12514 <__retarget_lock_acquire_recursive+0x34>)
   124ee:	f018 fc63 	bl	2adb8 <assert_print>
   124f2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   124f6:	4807      	ldr	r0, [pc, #28]	; (12514 <__retarget_lock_acquire_recursive+0x34>)
   124f8:	f018 fc57 	bl	2adaa <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   124fc:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   12500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12504:	f04f 33ff 	mov.w	r3, #4294967295
   12508:	f012 bbe0 	b.w	24ccc <z_impl_k_mutex_lock>
   1250c:	0003573e 	.word	0x0003573e
   12510:	00033bc2 	.word	0x00033bc2
   12514:	00035639 	.word	0x00035639

00012518 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   12518:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1251a:	b958      	cbnz	r0, 12534 <__retarget_lock_release_recursive+0x1c>
   1251c:	4907      	ldr	r1, [pc, #28]	; (1253c <__retarget_lock_release_recursive+0x24>)
   1251e:	4808      	ldr	r0, [pc, #32]	; (12540 <__retarget_lock_release_recursive+0x28>)
   12520:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   12524:	4a07      	ldr	r2, [pc, #28]	; (12544 <__retarget_lock_release_recursive+0x2c>)
   12526:	f018 fc47 	bl	2adb8 <assert_print>
   1252a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1252e:	4805      	ldr	r0, [pc, #20]	; (12544 <__retarget_lock_release_recursive+0x2c>)
   12530:	f018 fc3b 	bl	2adaa <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   12534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   12538:	f012 bc98 	b.w	24e6c <z_impl_k_mutex_unlock>
   1253c:	0003573e 	.word	0x0003573e
   12540:	00033bc2 	.word	0x00033bc2
   12544:	00035639 	.word	0x00035639

00012548 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   12548:	b508      	push	{r3, lr}
   1254a:	211d      	movs	r1, #29
   1254c:	4804      	ldr	r0, [pc, #16]	; (12560 <__chk_fail+0x18>)
   1254e:	f7ff ff63 	bl	12418 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   12552:	4040      	eors	r0, r0
   12554:	f380 8811 	msr	BASEPRI, r0
   12558:	f04f 0003 	mov.w	r0, #3
   1255c:	df02      	svc	2
	CODE_UNREACHABLE;
   1255e:	bf00      	nop
   12560:	0003579c 	.word	0x0003579c

00012564 <gpio_pin_set.constprop.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   12564:	b510      	push	{r4, lr}
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   12566:	4b13      	ldr	r3, [pc, #76]	; (125b4 <gpio_pin_set.constprop.0+0x50>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12568:	6859      	ldr	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1256a:	691a      	ldr	r2, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1256c:	6809      	ldr	r1, [r1, #0]
   1256e:	0209      	lsls	r1, r1, #8
   12570:	d40e      	bmi.n	12590 <gpio_pin_set.constprop.0+0x2c>
   12572:	4911      	ldr	r1, [pc, #68]	; (125b8 <gpio_pin_set.constprop.0+0x54>)
   12574:	f240 535c 	movw	r3, #1372	; 0x55c
   12578:	4a10      	ldr	r2, [pc, #64]	; (125bc <gpio_pin_set.constprop.0+0x58>)
   1257a:	4811      	ldr	r0, [pc, #68]	; (125c0 <gpio_pin_set.constprop.0+0x5c>)
   1257c:	f018 fc1c 	bl	2adb8 <assert_print>
   12580:	4810      	ldr	r0, [pc, #64]	; (125c4 <gpio_pin_set.constprop.0+0x60>)
   12582:	f018 fc19 	bl	2adb8 <assert_print>
   12586:	f240 515c 	movw	r1, #1372	; 0x55c
   1258a:	480c      	ldr	r0, [pc, #48]	; (125bc <gpio_pin_set.constprop.0+0x58>)
   1258c:	f018 fc0d 	bl	2adaa <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12590:	6812      	ldr	r2, [r2, #0]
   12592:	0212      	lsls	r2, r2, #8
		value = (value != 0) ? 0 : 1;
   12594:	bf48      	it	mi
   12596:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   1259a:	b138      	cbz	r0, 125ac <gpio_pin_set.constprop.0+0x48>
	return api->port_set_bits_raw(port, pins);
   1259c:	689b      	ldr	r3, [r3, #8]
   1259e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   125a0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
	}

	return gpio_pin_set_raw(port, pin, value);
}
   125a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   125a8:	4802      	ldr	r0, [pc, #8]	; (125b4 <gpio_pin_set.constprop.0+0x50>)
   125aa:	4718      	bx	r3
   125ac:	689b      	ldr	r3, [r3, #8]
   125ae:	691b      	ldr	r3, [r3, #16]
   125b0:	e7f6      	b.n	125a0 <gpio_pin_set.constprop.0+0x3c>
   125b2:	bf00      	nop
   125b4:	0003182c 	.word	0x0003182c
   125b8:	000357fa 	.word	0x000357fa
   125bc:	000357c9 	.word	0x000357c9
   125c0:	00033bc2 	.word	0x00033bc2
   125c4:	00035838 	.word	0x00035838

000125c8 <bt_hci_transport_setup>:
#define RESET_GPIO_CTRL  DT_GPIO_CTLR(RESET_NODE, gpios)
#define RESET_GPIO_PIN   DT_GPIO_PIN(RESET_NODE, gpios)
#define RESET_GPIO_FLAGS DT_GPIO_FLAGS(RESET_NODE, gpios)

int bt_hci_transport_setup(const struct device *h4)
{
   125c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125ca:	4604      	mov	r4, r0
   125cc:	4d21      	ldr	r5, [pc, #132]	; (12654 <bt_hci_transport_setup+0x8c>)
   125ce:	4628      	mov	r0, r5
   125d0:	f01d fece 	bl	30370 <z_device_is_ready>
	int err;
	char c;
	const struct device *const port = DEVICE_DT_GET(RESET_GPIO_CTRL);

	if (!device_is_ready(port)) {
   125d4:	2800      	cmp	r0, #0
   125d6:	d039      	beq.n	1264c <bt_hci_transport_setup+0x84>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125d8:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_api *api =
   125da:	68a9      	ldr	r1, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125dc:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   125de:	692a      	ldr	r2, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   125e0:	021b      	lsls	r3, r3, #8
   125e2:	d40e      	bmi.n	12602 <bt_hci_transport_setup+0x3a>
   125e4:	491c      	ldr	r1, [pc, #112]	; (12658 <bt_hci_transport_setup+0x90>)
   125e6:	f240 23f1 	movw	r3, #753	; 0x2f1
   125ea:	4a1c      	ldr	r2, [pc, #112]	; (1265c <bt_hci_transport_setup+0x94>)
   125ec:	481c      	ldr	r0, [pc, #112]	; (12660 <bt_hci_transport_setup+0x98>)
   125ee:	f018 fbe3 	bl	2adb8 <assert_print>
   125f2:	481c      	ldr	r0, [pc, #112]	; (12664 <bt_hci_transport_setup+0x9c>)
   125f4:	f018 fbe0 	bl	2adb8 <assert_print>
   125f8:	f240 21f1 	movw	r1, #753	; 0x2f1
   125fc:	4817      	ldr	r0, [pc, #92]	; (1265c <bt_hci_transport_setup+0x94>)
   125fe:	f018 fbd4 	bl	2adaa <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12602:	6813      	ldr	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   12604:	4628      	mov	r0, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12606:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1260a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1260c:	680b      	ldr	r3, [r1, #0]
   1260e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   12612:	2117      	movs	r1, #23
   12614:	4798      	blx	r3
	}

	/* Configure pin as output and initialize it to inactive state. */
	err = gpio_pin_configure(port, RESET_GPIO_PIN,
				 RESET_GPIO_FLAGS | GPIO_OUTPUT_INACTIVE);
	if (err) {
   12616:	b9b8      	cbnz	r0, 12648 <bt_hci_transport_setup+0x80>

	/* Reset the nRF52840 and let it wait until the pin is inactive again
	 * before running to main to ensure that it won't send any data until
	 * the H4 device is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 1);
   12618:	2001      	movs	r0, #1
   1261a:	f7ff ffa3 	bl	12564 <gpio_pin_set.constprop.0>
	if (err) {
   1261e:	b998      	cbnz	r0, 12648 <bt_hci_transport_setup+0x80>
	return z_impl_k_sleep(timeout);
   12620:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12624:	2100      	movs	r1, #0
   12626:	f014 fc05 	bl	26e34 <z_impl_k_sleep>
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (h4 && uart_fifo_read(h4, &c, 1)) {
   1262a:	b154      	cbz	r4, 12642 <bt_hci_transport_setup+0x7a>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   1262c:	68a3      	ldr	r3, [r4, #8]
   1262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12630:	2b00      	cmp	r3, #0
   12632:	d0fb      	beq.n	1262c <bt_hci_transport_setup+0x64>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   12634:	2201      	movs	r2, #1
   12636:	4620      	mov	r0, r4
   12638:	f10d 0107 	add.w	r1, sp, #7
   1263c:	4798      	blx	r3
   1263e:	2800      	cmp	r0, #0
   12640:	d1f4      	bne.n	1262c <bt_hci_transport_setup+0x64>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 0);
   12642:	2000      	movs	r0, #0
   12644:	f7ff ff8e 	bl	12564 <gpio_pin_set.constprop.0>
	if (err) {
		return err;
	}

	return 0;
}
   12648:	b003      	add	sp, #12
   1264a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   1264c:	f06f 0004 	mvn.w	r0, #4
   12650:	e7fa      	b.n	12648 <bt_hci_transport_setup+0x80>
   12652:	bf00      	nop
   12654:	0003182c 	.word	0x0003182c
   12658:	000357fa 	.word	0x000357fa
   1265c:	000357c9 	.word	0x000357c9
   12660:	00033bc2 	.word	0x00033bc2
   12664:	00035838 	.word	0x00035838

00012668 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   12668:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   1266a:	4b0c      	ldr	r3, [pc, #48]	; (1269c <xoshiro128_next+0x34>)
   1266c:	6819      	ldr	r1, [r3, #0]
   1266e:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   12670:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   12674:	404a      	eors	r2, r1
	state[3] ^= state[1];
   12676:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   1267a:	ea85 0602 	eor.w	r6, r5, r2
   1267e:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   12680:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   12684:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   12688:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   1268c:	4408      	add	r0, r1
	state[0] ^= state[3];
   1268e:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   12690:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   12692:	60dc      	str	r4, [r3, #12]

	return result;
}
   12694:	eb01 6070 	add.w	r0, r1, r0, ror #25
   12698:	bd70      	pop	{r4, r5, r6, pc}
   1269a:	bf00      	nop
   1269c:	2000e308 	.word	0x2000e308

000126a0 <xoshiro128_init_state>:
{
   126a0:	b510      	push	{r4, lr}

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   126a2:	4816      	ldr	r0, [pc, #88]	; (126fc <xoshiro128_init_state+0x5c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   126a4:	6883      	ldr	r3, [r0, #8]
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	b963      	cbnz	r3, 126c4 <xoshiro128_init_state+0x24>
   126aa:	4915      	ldr	r1, [pc, #84]	; (12700 <xoshiro128_init_state+0x60>)
   126ac:	234d      	movs	r3, #77	; 0x4d
   126ae:	4a15      	ldr	r2, [pc, #84]	; (12704 <xoshiro128_init_state+0x64>)
   126b0:	4815      	ldr	r0, [pc, #84]	; (12708 <xoshiro128_init_state+0x68>)
   126b2:	f018 fb81 	bl	2adb8 <assert_print>
   126b6:	4815      	ldr	r0, [pc, #84]	; (1270c <xoshiro128_init_state+0x6c>)
   126b8:	f018 fb7e 	bl	2adb8 <assert_print>
   126bc:	214d      	movs	r1, #77	; 0x4d
   126be:	4811      	ldr	r0, [pc, #68]	; (12704 <xoshiro128_init_state+0x64>)
   126c0:	f018 fb73 	bl	2adaa <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   126c4:	4c12      	ldr	r4, [pc, #72]	; (12710 <xoshiro128_init_state+0x70>)
   126c6:	2210      	movs	r2, #16
   126c8:	4621      	mov	r1, r4
   126ca:	4798      	blx	r3
	if (rc == 0) {
   126cc:	b918      	cbnz	r0, 126d6 <xoshiro128_init_state+0x36>
		initialized = true;
   126ce:	2201      	movs	r2, #1
   126d0:	4b10      	ldr	r3, [pc, #64]	; (12714 <xoshiro128_init_state+0x74>)
   126d2:	701a      	strb	r2, [r3, #0]
}
   126d4:	bd10      	pop	{r4, pc}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   126d6:	f01c fb7f 	bl	2edd8 <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   126da:	6020      	str	r0, [r4, #0]
   126dc:	f01c fb7c 	bl	2edd8 <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   126e0:	4b0d      	ldr	r3, [pc, #52]	; (12718 <xoshiro128_init_state+0x78>)
   126e2:	4043      	eors	r3, r0
   126e4:	6063      	str	r3, [r4, #4]
   126e6:	f01c fb77 	bl	2edd8 <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   126ea:	4b0c      	ldr	r3, [pc, #48]	; (1271c <xoshiro128_init_state+0x7c>)
   126ec:	4043      	eors	r3, r0
   126ee:	60a3      	str	r3, [r4, #8]
   126f0:	f01c fb72 	bl	2edd8 <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   126f4:	4b0a      	ldr	r3, [pc, #40]	; (12720 <xoshiro128_init_state+0x80>)
   126f6:	4043      	eors	r3, r0
   126f8:	60e3      	str	r3, [r4, #12]
}
   126fa:	e7eb      	b.n	126d4 <xoshiro128_init_state+0x34>
   126fc:	0003185c 	.word	0x0003185c
   12700:	0003587e 	.word	0x0003587e
   12704:	0003584a 	.word	0x0003584a
   12708:	00033bc2 	.word	0x00033bc2
   1270c:	0003589e 	.word	0x0003589e
   12710:	2000e308 	.word	0x2000e308
   12714:	2000ee74 	.word	0x2000ee74
   12718:	9b64c2b0 	.word	0x9b64c2b0
   1271c:	86d3d2d4 	.word	0x86d3d2d4
   12720:	a00ae278 	.word	0xa00ae278

00012724 <xoshiro128_initialize>:
{
   12724:	b508      	push	{r3, lr}
   12726:	4804      	ldr	r0, [pc, #16]	; (12738 <xoshiro128_initialize+0x14>)
   12728:	f01d fe22 	bl	30370 <z_device_is_ready>
	return 0;
   1272c:	2800      	cmp	r0, #0
}
   1272e:	bf0c      	ite	eq
   12730:	f06f 0012 	mvneq.w	r0, #18
   12734:	2000      	movne	r0, #0
   12736:	bd08      	pop	{r3, pc}
   12738:	0003185c 	.word	0x0003185c

0001273c <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   1273c:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   1273e:	4b04      	ldr	r3, [pc, #16]	; (12750 <z_impl_sys_rand32_get+0x14>)
   12740:	781b      	ldrb	r3, [r3, #0]
   12742:	b90b      	cbnz	r3, 12748 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   12744:	f7ff ffac 	bl	126a0 <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   12748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   1274c:	f7ff bf8c 	b.w	12668 <xoshiro128_next>
   12750:	2000ee74 	.word	0x2000ee74

00012754 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   12754:	4b0e      	ldr	r3, [pc, #56]	; (12790 <bt_hex+0x3c>)
   12756:	2940      	cmp	r1, #64	; 0x40
   12758:	bf28      	it	cs
   1275a:	2140      	movcs	r1, #64	; 0x40
{
   1275c:	b570      	push	{r4, r5, r6, lr}
   1275e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   12760:	4c0c      	ldr	r4, [pc, #48]	; (12794 <bt_hex+0x40>)
   12762:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   12764:	42b0      	cmp	r0, r6
   12766:	f103 0302 	add.w	r3, r3, #2
   1276a:	d104      	bne.n	12776 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1276c:	2300      	movs	r3, #0
   1276e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   12772:	4807      	ldr	r0, [pc, #28]	; (12790 <bt_hex+0x3c>)
   12774:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   12776:	7802      	ldrb	r2, [r0, #0]
   12778:	0912      	lsrs	r2, r2, #4
   1277a:	5ca2      	ldrb	r2, [r4, r2]
   1277c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   12780:	f810 2b01 	ldrb.w	r2, [r0], #1
   12784:	f002 020f 	and.w	r2, r2, #15
   12788:	5ca2      	ldrb	r2, [r4, r2]
   1278a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1278e:	e7e9      	b.n	12764 <bt_hex+0x10>
   12790:	2000ee93 	.word	0x2000ee93
   12794:	000358d7 	.word	0x000358d7

00012798 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   12798:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1279a:	7803      	ldrb	r3, [r0, #0]
   1279c:	b08b      	sub	sp, #44	; 0x2c
   1279e:	4604      	mov	r4, r0
   127a0:	ad07      	add	r5, sp, #28
   127a2:	2b03      	cmp	r3, #3
   127a4:	d821      	bhi.n	127ea <bt_addr_le_str+0x52>
   127a6:	e8df f003 	tbb	[pc, r3]
   127aa:	1a02      	.short	0x1a02
   127ac:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   127ae:	4912      	ldr	r1, [pc, #72]	; (127f8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   127b0:	4628      	mov	r0, r5
   127b2:	f01e f9d2 	bl	30b5a <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   127b6:	9505      	str	r5, [sp, #20]
   127b8:	7863      	ldrb	r3, [r4, #1]
   127ba:	211e      	movs	r1, #30
   127bc:	9304      	str	r3, [sp, #16]
   127be:	78a3      	ldrb	r3, [r4, #2]
   127c0:	4a0e      	ldr	r2, [pc, #56]	; (127fc <bt_addr_le_str+0x64>)
   127c2:	9303      	str	r3, [sp, #12]
   127c4:	78e3      	ldrb	r3, [r4, #3]
   127c6:	480e      	ldr	r0, [pc, #56]	; (12800 <bt_addr_le_str+0x68>)
   127c8:	9302      	str	r3, [sp, #8]
   127ca:	7923      	ldrb	r3, [r4, #4]
   127cc:	9301      	str	r3, [sp, #4]
   127ce:	7963      	ldrb	r3, [r4, #5]
   127d0:	9300      	str	r3, [sp, #0]
   127d2:	79a3      	ldrb	r3, [r4, #6]
   127d4:	f018 f920 	bl	2aa18 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   127d8:	4809      	ldr	r0, [pc, #36]	; (12800 <bt_addr_le_str+0x68>)
   127da:	b00b      	add	sp, #44	; 0x2c
   127dc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   127de:	4909      	ldr	r1, [pc, #36]	; (12804 <bt_addr_le_str+0x6c>)
   127e0:	e7e6      	b.n	127b0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   127e2:	4909      	ldr	r1, [pc, #36]	; (12808 <bt_addr_le_str+0x70>)
   127e4:	e7e4      	b.n	127b0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   127e6:	4909      	ldr	r1, [pc, #36]	; (1280c <bt_addr_le_str+0x74>)
   127e8:	e7e2      	b.n	127b0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   127ea:	210a      	movs	r1, #10
   127ec:	4628      	mov	r0, r5
   127ee:	4a08      	ldr	r2, [pc, #32]	; (12810 <bt_addr_le_str+0x78>)
   127f0:	f018 f912 	bl	2aa18 <snprintk>
		break;
   127f4:	e7df      	b.n	127b6 <bt_addr_le_str+0x1e>
   127f6:	bf00      	nop
   127f8:	0003354a 	.word	0x0003354a
   127fc:	0003356c 	.word	0x0003356c
   12800:	2000ee75 	.word	0x2000ee75
   12804:	00033551 	.word	0x00033551
   12808:	00033558 	.word	0x00033558
   1280c:	00033562 	.word	0x00033562
   12810:	00036f3d 	.word	0x00036f3d

00012814 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   12814:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12816:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   12818:	4d09      	ldr	r5, [pc, #36]	; (12840 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1281a:	4b0a      	ldr	r3, [pc, #40]	; (12844 <long_wq_init+0x30>)
{
   1281c:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   1281e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12820:	9302      	str	r3, [sp, #8]
   12822:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   12824:	f013 f828 	bl	25878 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   12828:	ab02      	add	r3, sp, #8
   1282a:	4628      	mov	r0, r5
   1282c:	9300      	str	r3, [sp, #0]
   1282e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   12832:	230a      	movs	r3, #10
   12834:	4904      	ldr	r1, [pc, #16]	; (12848 <long_wq_init+0x34>)
   12836:	f013 f839 	bl	258ac <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1283a:	4620      	mov	r0, r4
   1283c:	b005      	add	sp, #20
   1283e:	bd30      	pop	{r4, r5, pc}
   12840:	2000d688 	.word	0x2000d688
   12844:	000358e8 	.word	0x000358e8
   12848:	20010c90 	.word	0x20010c90

0001284c <bt_long_wq_schedule>:
{
   1284c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1284e:	4801      	ldr	r0, [pc, #4]	; (12854 <bt_long_wq_schedule+0x8>)
   12850:	f013 b8c0 	b.w	259d4 <k_work_schedule_for_queue>
   12854:	2000d688 	.word	0x2000d688

00012858 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   12858:	7803      	ldrb	r3, [r0, #0]
{
   1285a:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   1285c:	2b01      	cmp	r3, #1
   1285e:	d013      	beq.n	12888 <uuid_to_uuid128+0x30>
   12860:	2b02      	cmp	r3, #2
   12862:	d027      	beq.n	128b4 <uuid_to_uuid128+0x5c>
   12864:	b97b      	cbnz	r3, 12886 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12866:	460a      	mov	r2, r1
   12868:	4b18      	ldr	r3, [pc, #96]	; (128cc <uuid_to_uuid128+0x74>)
   1286a:	f103 0410 	add.w	r4, r3, #16
   1286e:	f853 5b04 	ldr.w	r5, [r3], #4
   12872:	42a3      	cmp	r3, r4
   12874:	f842 5b04 	str.w	r5, [r2], #4
   12878:	d1f9      	bne.n	1286e <uuid_to_uuid128+0x16>
   1287a:	781b      	ldrb	r3, [r3, #0]
   1287c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1287e:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12880:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   12882:	0a1b      	lsrs	r3, r3, #8
   12884:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   12886:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   12888:	460a      	mov	r2, r1
   1288a:	4b10      	ldr	r3, [pc, #64]	; (128cc <uuid_to_uuid128+0x74>)
   1288c:	f103 0410 	add.w	r4, r3, #16
   12890:	f853 5b04 	ldr.w	r5, [r3], #4
   12894:	42a3      	cmp	r3, r4
   12896:	f842 5b04 	str.w	r5, [r2], #4
   1289a:	d1f9      	bne.n	12890 <uuid_to_uuid128+0x38>
   1289c:	781b      	ldrb	r3, [r3, #0]
   1289e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   128a0:	6843      	ldr	r3, [r0, #4]
   128a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   128a6:	734b      	strb	r3, [r1, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   128a8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   128aa:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   128ac:	0a1b      	lsrs	r3, r3, #8
   128ae:	738a      	strb	r2, [r1, #14]
   128b0:	740b      	strb	r3, [r1, #16]
}
   128b2:	e7e8      	b.n	12886 <uuid_to_uuid128+0x2e>
   128b4:	f100 0310 	add.w	r3, r0, #16
   128b8:	f850 2b04 	ldr.w	r2, [r0], #4
   128bc:	4298      	cmp	r0, r3
   128be:	f841 2b04 	str.w	r2, [r1], #4
   128c2:	d1f9      	bne.n	128b8 <uuid_to_uuid128+0x60>
   128c4:	7803      	ldrb	r3, [r0, #0]
   128c6:	700b      	strb	r3, [r1, #0]
   128c8:	e7dd      	b.n	12886 <uuid_to_uuid128+0x2e>
   128ca:	bf00      	nop
   128cc:	0003590e 	.word	0x0003590e

000128d0 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   128d0:	4603      	mov	r3, r0
   128d2:	b510      	push	{r4, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   128d4:	781c      	ldrb	r4, [r3, #0]
{
   128d6:	4608      	mov	r0, r1
	switch (uuid->type) {
   128d8:	2c01      	cmp	r4, #1
{
   128da:	4611      	mov	r1, r2
   128dc:	b086      	sub	sp, #24
	switch (uuid->type) {
   128de:	d009      	beq.n	128f4 <bt_uuid_to_str+0x24>
   128e0:	2c02      	cmp	r4, #2
   128e2:	d00a      	beq.n	128fa <bt_uuid_to_str+0x2a>
   128e4:	b9fc      	cbnz	r4, 12926 <bt_uuid_to_str+0x56>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   128e6:	885b      	ldrh	r3, [r3, #2]
   128e8:	4a12      	ldr	r2, [pc, #72]	; (12934 <bt_uuid_to_str+0x64>)
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   128ea:	b006      	add	sp, #24
   128ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   128f0:	f018 b892 	b.w	2aa18 <snprintk>
   128f4:	685b      	ldr	r3, [r3, #4]
   128f6:	4a10      	ldr	r2, [pc, #64]	; (12938 <bt_uuid_to_str+0x68>)
   128f8:	e7f7      	b.n	128ea <bt_uuid_to_str+0x1a>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   128fa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   128fe:	9204      	str	r2, [sp, #16]
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   12900:	f8d3 2003 	ldr.w	r2, [r3, #3]
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   12904:	9203      	str	r2, [sp, #12]
   12906:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1290a:	9202      	str	r2, [sp, #8]
   1290c:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   12910:	9201      	str	r2, [sp, #4]
   12912:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   12916:	9200      	str	r2, [sp, #0]
   12918:	f8d3 300d 	ldr.w	r3, [r3, #13]
   1291c:	4a07      	ldr	r2, [pc, #28]	; (1293c <bt_uuid_to_str+0x6c>)
   1291e:	f018 f87b 	bl	2aa18 <snprintk>
}
   12922:	b006      	add	sp, #24
   12924:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   12926:	2100      	movs	r1, #0
   12928:	b006      	add	sp, #24
   1292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1292e:	f01d bfa8 	b.w	30882 <memset>
   12932:	bf00      	nop
   12934:	00036ccf 	.word	0x00036ccf
   12938:	0003818e 	.word	0x0003818e
   1293c:	000358f1 	.word	0x000358f1

00012940 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   12940:	b538      	push	{r3, r4, r5, lr}
   12942:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   12944:	2d01      	cmp	r5, #1
{
   12946:	4610      	mov	r0, r2
   12948:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1294a:	d010      	beq.n	1296e <bt_buf_get_rx+0x2e>
   1294c:	2d03      	cmp	r5, #3
   1294e:	d01a      	beq.n	12986 <bt_buf_get_rx+0x46>
   12950:	2d05      	cmp	r5, #5
   12952:	d018      	beq.n	12986 <bt_buf_get_rx+0x46>
   12954:	490e      	ldr	r1, [pc, #56]	; (12990 <bt_buf_get_rx+0x50>)
   12956:	233d      	movs	r3, #61	; 0x3d
   12958:	4a0e      	ldr	r2, [pc, #56]	; (12994 <bt_buf_get_rx+0x54>)
   1295a:	480f      	ldr	r0, [pc, #60]	; (12998 <bt_buf_get_rx+0x58>)
   1295c:	f018 fa2c 	bl	2adb8 <assert_print>
   12960:	480e      	ldr	r0, [pc, #56]	; (1299c <bt_buf_get_rx+0x5c>)
   12962:	f018 fa29 	bl	2adb8 <assert_print>
   12966:	213d      	movs	r1, #61	; 0x3d
   12968:	480a      	ldr	r0, [pc, #40]	; (12994 <bt_buf_get_rx+0x54>)
   1296a:	f018 fa1e 	bl	2adaa <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1296e:	480c      	ldr	r0, [pc, #48]	; (129a0 <bt_buf_get_rx+0x60>)
   12970:	f01a fdf6 	bl	2d560 <net_buf_alloc_fixed>
   12974:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   12976:	b120      	cbz	r0, 12982 <bt_buf_get_rx+0x42>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   12978:	2100      	movs	r1, #0
   1297a:	300c      	adds	r0, #12
   1297c:	f007 f9d2 	bl	19d24 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12980:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12982:	4620      	mov	r0, r4
   12984:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12986:	4602      	mov	r2, r0
   12988:	460b      	mov	r3, r1
   1298a:	4806      	ldr	r0, [pc, #24]	; (129a4 <bt_buf_get_rx+0x64>)
   1298c:	e7f0      	b.n	12970 <bt_buf_get_rx+0x30>
   1298e:	bf00      	nop
   12990:	0003594e 	.word	0x0003594e
   12994:	0003591f 	.word	0x0003591f
   12998:	00033bc2 	.word	0x00033bc2
   1299c:	00035993 	.word	0x00035993
   129a0:	2000d024 	.word	0x2000d024
   129a4:	2000cf88 	.word	0x2000cf88

000129a8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   129a8:	460b      	mov	r3, r1
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   129aa:	2100      	movs	r1, #0
   129ac:	b570      	push	{r4, r5, r6, lr}
   129ae:	4602      	mov	r2, r0
   129b0:	480a      	ldr	r0, [pc, #40]	; (129dc <bt_buf_get_cmd_complete+0x34>)
   129b2:	e8d0 4fef 	ldaex	r4, [r0]
   129b6:	e8c0 1fe5 	stlex	r5, r1, [r0]
   129ba:	2d00      	cmp	r5, #0
   129bc:	d1f9      	bne.n	129b2 <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   129be:	b924      	cbnz	r4, 129ca <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   129c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   129c4:	2001      	movs	r0, #1
   129c6:	f7ff bfbb 	b.w	12940 <bt_buf_get_rx>
   129ca:	2301      	movs	r3, #1
	net_buf_simple_reserve(&buf->b, reserve);
   129cc:	f104 000c 	add.w	r0, r4, #12
   129d0:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   129d2:	8221      	strh	r1, [r4, #16]
   129d4:	f007 f9a6 	bl	19d24 <net_buf_simple_reserve>
}
   129d8:	4620      	mov	r0, r4
   129da:	bd70      	pop	{r4, r5, r6, pc}
   129dc:	2000c6b8 	.word	0x2000c6b8

000129e0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   129e0:	b570      	push	{r4, r5, r6, lr}
   129e2:	4604      	mov	r4, r0
	switch (evt) {
   129e4:	2c0f      	cmp	r4, #15
{
   129e6:	460d      	mov	r5, r1
   129e8:	4610      	mov	r0, r2
   129ea:	4619      	mov	r1, r3
	switch (evt) {
   129ec:	d805      	bhi.n	129fa <bt_buf_get_evt+0x1a>
   129ee:	2c0d      	cmp	r4, #13
   129f0:	d90d      	bls.n	12a0e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   129f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   129f6:	f7ff bfd7 	b.w	129a8 <bt_buf_get_cmd_complete>
	switch (evt) {
   129fa:	2c13      	cmp	r4, #19
   129fc:	d107      	bne.n	12a0e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   129fe:	480c      	ldr	r0, [pc, #48]	; (12a30 <bt_buf_get_evt+0x50>)
   12a00:	f01a fdae 	bl	2d560 <net_buf_alloc_fixed>
			if (buf) {
   12a04:	4604      	mov	r4, r0
   12a06:	b938      	cbnz	r0, 12a18 <bt_buf_get_evt+0x38>
{
   12a08:	2400      	movs	r4, #0
}
   12a0a:	4620      	mov	r0, r4
   12a0c:	bd70      	pop	{r4, r5, r6, pc}
   12a0e:	4602      	mov	r2, r0
   12a10:	460b      	mov	r3, r1
		if (discardable) {
   12a12:	b145      	cbz	r5, 12a26 <bt_buf_get_evt+0x46>
   12a14:	4807      	ldr	r0, [pc, #28]	; (12a34 <bt_buf_get_evt+0x54>)
   12a16:	e7f3      	b.n	12a00 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   12a18:	2100      	movs	r1, #0
   12a1a:	300c      	adds	r0, #12
   12a1c:	f007 f982 	bl	19d24 <net_buf_simple_reserve>
   12a20:	2301      	movs	r3, #1
   12a22:	7623      	strb	r3, [r4, #24]
}
   12a24:	e7f1      	b.n	12a0a <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12a26:	2001      	movs	r0, #1
}
   12a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12a2c:	f7ff bf88 	b.w	12940 <bt_buf_get_rx>
   12a30:	2000d0c0 	.word	0x2000d0c0
   12a34:	2000cff0 	.word	0x2000cff0

00012a38 <bt_data_parse>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   12a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a3c:	4605      	mov	r5, r0
   12a3e:	460e      	mov	r6, r1
   12a40:	4690      	mov	r8, r2
   12a42:	b082      	sub	sp, #8
   12a44:	af00      	add	r7, sp, #0
	while (ad->len > 1) {
   12a46:	88ab      	ldrh	r3, [r5, #4]
   12a48:	2b01      	cmp	r3, #1
   12a4a:	d91a      	bls.n	12a82 <bt_data_parse+0x4a>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   12a4c:	4628      	mov	r0, r5
   12a4e:	f01a fd94 	bl	2d57a <net_buf_simple_pull_u8>
		if (len == 0U) {
   12a52:	4604      	mov	r4, r0
   12a54:	b1a8      	cbz	r0, 12a82 <bt_data_parse+0x4a>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   12a56:	88ab      	ldrh	r3, [r5, #4]
   12a58:	4298      	cmp	r0, r3
   12a5a:	d916      	bls.n	12a8a <bt_data_parse+0x52>
			LOG_WRN("malformed advertising data %u / %u",
   12a5c:	466d      	mov	r5, sp
   12a5e:	b08a      	sub	sp, #40	; 0x28
   12a60:	466a      	mov	r2, sp
   12a62:	6213      	str	r3, [r2, #32]
   12a64:	2305      	movs	r3, #5
   12a66:	4912      	ldr	r1, [pc, #72]	; (12ab0 <bt_data_parse+0x78>)
   12a68:	6151      	str	r1, [r2, #20]
   12a6a:	4912      	ldr	r1, [pc, #72]	; (12ab4 <bt_data_parse+0x7c>)
   12a6c:	e9c2 1006 	strd	r1, r0, [r2, #24]
   12a70:	f842 3f10 	str.w	r3, [r2, #16]!
   12a74:	2300      	movs	r3, #0
   12a76:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   12a7a:	480f      	ldr	r0, [pc, #60]	; (12ab8 <bt_data_parse+0x80>)
   12a7c:	f7fc feb8 	bl	f7f0 <z_impl_z_log_msg_static_create>
   12a80:	46ad      	mov	sp, r5
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   12a82:	3708      	adds	r7, #8
   12a84:	46bd      	mov	sp, r7
   12a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.type = net_buf_simple_pull_u8(ad);
   12a8a:	4628      	mov	r0, r5
   12a8c:	f01a fd75 	bl	2d57a <net_buf_simple_pull_u8>
		data.data = ad->data;
   12a90:	682b      	ldr	r3, [r5, #0]
		data.type = net_buf_simple_pull_u8(ad);
   12a92:	7038      	strb	r0, [r7, #0]
		data.data_len = len - 1;
   12a94:	3c01      	subs	r4, #1
		if (!func(&data, user_data)) {
   12a96:	4641      	mov	r1, r8
   12a98:	4638      	mov	r0, r7
		data.data_len = len - 1;
   12a9a:	707c      	strb	r4, [r7, #1]
		data.data = ad->data;
   12a9c:	607b      	str	r3, [r7, #4]
		if (!func(&data, user_data)) {
   12a9e:	47b0      	blx	r6
   12aa0:	2800      	cmp	r0, #0
   12aa2:	d0ee      	beq.n	12a82 <bt_data_parse+0x4a>
		net_buf_simple_pull(ad, len - 1);
   12aa4:	4621      	mov	r1, r4
   12aa6:	4628      	mov	r0, r5
   12aa8:	f007 f97e 	bl	19da8 <net_buf_simple_pull>
   12aac:	e7cb      	b.n	12a46 <bt_data_parse+0xe>
   12aae:	bf00      	nop
   12ab0:	000359b3 	.word	0x000359b3
   12ab4:	000359da 	.word	0x000359da
   12ab8:	00031b94 	.word	0x00031b94

00012abc <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   12abc:	b570      	push	{r4, r5, r6, lr}
   12abe:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   12ac0:	466c      	mov	r4, sp
{
   12ac2:	4606      	mov	r6, r0
	const char * const str[] = {
   12ac4:	4d0a      	ldr	r5, [pc, #40]	; (12af0 <ver_str+0x34>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   12ac6:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   12ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
   12ad8:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   12adc:	bf9d      	ittte	ls
   12ade:	ab0e      	addls	r3, sp, #56	; 0x38
   12ae0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
   12ae4:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	}

	return "unknown";
   12ae8:	4802      	ldrhi	r0, [pc, #8]	; (12af4 <ver_str+0x38>)
}
   12aea:	b00e      	add	sp, #56	; 0x38
   12aec:	bd70      	pop	{r4, r5, r6, pc}
   12aee:	bf00      	nop
   12af0:	00031d6c 	.word	0x00031d6c
   12af4:	000359f0 	.word	0x000359f0

00012af8 <hci_disconn_complete_prio>:
{
   12af8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12afa:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12afc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   12b00:	781b      	ldrb	r3, [r3, #0]
   12b02:	b963      	cbnz	r3, 12b1e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   12b04:	4620      	mov	r0, r4
   12b06:	f002 fe71 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   12b0a:	4605      	mov	r5, r0
   12b0c:	b940      	cbnz	r0, 12b20 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   12b0e:	4b08      	ldr	r3, [pc, #32]	; (12b30 <hci_disconn_complete_prio+0x38>)
   12b10:	881a      	ldrh	r2, [r3, #0]
   12b12:	b922      	cbnz	r2, 12b1e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12b14:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12b18:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   12b1c:	8018      	strh	r0, [r3, #0]
}
   12b1e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12b20:	2101      	movs	r1, #1
   12b22:	f002 fe6b 	bl	157fc <bt_conn_set_state>
	bt_conn_unref(conn);
   12b26:	4628      	mov	r0, r5
}
   12b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   12b2c:	f002 be3a 	b.w	157a4 <bt_conn_unref>
   12b30:	2000ebca 	.word	0x2000ebca

00012b34 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   12b34:	b580      	push	{r7, lr}
   12b36:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer");
   12b38:	b088      	sub	sp, #32
   12b3a:	466a      	mov	r2, sp
   12b3c:	4b06      	ldr	r3, [pc, #24]	; (12b58 <le_conn_param_neg_reply.part.0+0x24>)
   12b3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12b42:	6153      	str	r3, [r2, #20]
   12b44:	4b05      	ldr	r3, [pc, #20]	; (12b5c <le_conn_param_neg_reply.part.0+0x28>)
   12b46:	4806      	ldr	r0, [pc, #24]	; (12b60 <le_conn_param_neg_reply.part.0+0x2c>)
   12b48:	6193      	str	r3, [r2, #24]
   12b4a:	2303      	movs	r3, #3
   12b4c:	f842 3f10 	str.w	r3, [r2, #16]!
   12b50:	f019 fa9f 	bl	2c092 <z_log_msg_static_create.constprop.0>
}
   12b54:	46bd      	mov	sp, r7
   12b56:	bd80      	pop	{r7, pc}
   12b58:	000359f8 	.word	0x000359f8
   12b5c:	0003627b 	.word	0x0003627b
   12b60:	00031bb4 	.word	0x00031bb4

00012b64 <le_conn_update_complete>:
{
   12b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b66:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   12b68:	68c5      	ldr	r5, [r0, #12]
{
   12b6a:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12b6c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12b70:	4630      	mov	r0, r6
   12b72:	f002 fe3b 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   12b76:	4604      	mov	r4, r0
   12b78:	b998      	cbnz	r0, 12ba2 <le_conn_update_complete+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12b7a:	466c      	mov	r4, sp
   12b7c:	b088      	sub	sp, #32
   12b7e:	466a      	mov	r2, sp
   12b80:	4b1e      	ldr	r3, [pc, #120]	; (12bfc <le_conn_update_complete+0x98>)
   12b82:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12b86:	6153      	str	r3, [r2, #20]
   12b88:	4b1d      	ldr	r3, [pc, #116]	; (12c00 <le_conn_update_complete+0x9c>)
   12b8a:	481e      	ldr	r0, [pc, #120]	; (12c04 <le_conn_update_complete+0xa0>)
   12b8c:	e9c2 3606 	strd	r3, r6, [r2, #24]
   12b90:	2304      	movs	r3, #4
   12b92:	f842 3f10 	str.w	r3, [r2, #16]!
   12b96:	f019 fa7c 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12b9a:	46a5      	mov	sp, r4
}
   12b9c:	370c      	adds	r7, #12
   12b9e:	46bd      	mov	sp, r7
   12ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12ba2:	782b      	ldrb	r3, [r5, #0]
   12ba4:	2b1a      	cmp	r3, #26
   12ba6:	d117      	bne.n	12bd8 <le_conn_update_complete+0x74>
   12ba8:	78c3      	ldrb	r3, [r0, #3]
   12baa:	2b01      	cmp	r3, #1
   12bac:	d122      	bne.n	12bf4 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12bb2:	3004      	adds	r0, #4
   12bb4:	f019 fa56 	bl	2c064 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12bb8:	0543      	lsls	r3, r0, #21
   12bba:	d40d      	bmi.n	12bd8 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   12bbc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   12bc0:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   12bc2:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   12bc4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12bc8:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   12bca:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   12bcc:	f003 fd02 	bl	165d4 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   12bd0:	4620      	mov	r0, r4
   12bd2:	f002 fde7 	bl	157a4 <bt_conn_unref>
   12bd6:	e7e1      	b.n	12b9c <le_conn_update_complete+0x38>
		if (!evt->status) {
   12bd8:	782b      	ldrb	r3, [r5, #0]
   12bda:	b95b      	cbnz	r3, 12bf4 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12bdc:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   12be0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   12be4:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12be8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12bec:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   12bf0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		notify_le_param_updated(conn);
   12bf4:	4620      	mov	r0, r4
   12bf6:	f002 ff8d 	bl	15b14 <notify_le_param_updated>
   12bfa:	e7e9      	b.n	12bd0 <le_conn_update_complete+0x6c>
   12bfc:	00035a16 	.word	0x00035a16
   12c00:	0003624b 	.word	0x0003624b
   12c04:	00031bb4 	.word	0x00031bb4

00012c08 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12c08:	460b      	mov	r3, r1
   12c0a:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12c0c:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12c0e:	af00      	add	r7, sp, #0
   12c10:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12c12:	4629      	mov	r1, r5
   12c14:	68d8      	ldr	r0, [r3, #12]
   12c16:	f7ff fd9d 	bl	12754 <bt_hex>
   12c1a:	b08c      	sub	sp, #48	; 0x30
   12c1c:	466a      	mov	r2, sp
   12c1e:	4b0a      	ldr	r3, [pc, #40]	; (12c48 <handle_event.part.0+0x40>)
   12c20:	e9c2 5008 	strd	r5, r0, [r2, #32]
   12c24:	6153      	str	r3, [r2, #20]
   12c26:	4b09      	ldr	r3, [pc, #36]	; (12c4c <handle_event.part.0+0x44>)
   12c28:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   12c2c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   12c30:	f240 5303 	movw	r3, #1283	; 0x503
   12c34:	8513      	strh	r3, [r2, #40]	; 0x28
   12c36:	4b06      	ldr	r3, [pc, #24]	; (12c50 <handle_event.part.0+0x48>)
   12c38:	4806      	ldr	r0, [pc, #24]	; (12c54 <handle_event.part.0+0x4c>)
   12c3a:	f842 3f10 	str.w	r3, [r2, #16]!
   12c3e:	f019 fa28 	bl	2c092 <z_log_msg_static_create.constprop.0>
}
   12c42:	46bd      	mov	sp, r7
   12c44:	bdb0      	pop	{r4, r5, r7, pc}
   12c46:	bf00      	nop
   12c48:	00035a3e 	.word	0x00035a3e
   12c4c:	00036308 	.word	0x00036308
   12c50:	01000006 	.word	0x01000006
   12c54:	00031bb4 	.word	0x00031bb4

00012c58 <handle_event>:
{
   12c58:	b5b0      	push	{r4, r5, r7, lr}
   12c5a:	4604      	mov	r4, r0
   12c5c:	af00      	add	r7, sp, #0
   12c5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   12c62:	4293      	cmp	r3, r2
   12c64:	d103      	bne.n	12c6e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   12c66:	4620      	mov	r0, r4
   12c68:	f7ff ffce 	bl	12c08 <handle_event.part.0>
}
   12c6c:	e01a      	b.n	12ca4 <handle_event+0x4c>
		if (handler->event != event) {
   12c6e:	4610      	mov	r0, r2
   12c70:	f810 5b08 	ldrb.w	r5, [r0], #8
   12c74:	42a5      	cmp	r5, r4
   12c76:	d11b      	bne.n	12cb0 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   12c78:	8a0b      	ldrh	r3, [r1, #16]
   12c7a:	7850      	ldrb	r0, [r2, #1]
   12c7c:	4298      	cmp	r0, r3
   12c7e:	d913      	bls.n	12ca8 <handle_event+0x50>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   12c80:	466d      	mov	r5, sp
   12c82:	b08a      	sub	sp, #40	; 0x28
   12c84:	466a      	mov	r2, sp
   12c86:	490b      	ldr	r1, [pc, #44]	; (12cb4 <handle_event+0x5c>)
   12c88:	6214      	str	r4, [r2, #32]
   12c8a:	6151      	str	r1, [r2, #20]
   12c8c:	490a      	ldr	r1, [pc, #40]	; (12cb8 <handle_event+0x60>)
   12c8e:	480b      	ldr	r0, [pc, #44]	; (12cbc <handle_event+0x64>)
   12c90:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12c94:	2305      	movs	r3, #5
   12c96:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   12c9a:	f842 3f10 	str.w	r3, [r2, #16]!
   12c9e:	f019 f9f8 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12ca2:	46ad      	mov	sp, r5
}
   12ca4:	46bd      	mov	sp, r7
   12ca6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   12ca8:	4608      	mov	r0, r1
   12caa:	6853      	ldr	r3, [r2, #4]
   12cac:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   12cae:	e7f9      	b.n	12ca4 <handle_event+0x4c>
   12cb0:	4602      	mov	r2, r0
   12cb2:	e7d6      	b.n	12c62 <handle_event+0xa>
   12cb4:	00035a64 	.word	0x00035a64
   12cb8:	000362f4 	.word	0x000362f4
   12cbc:	00031bb4 	.word	0x00031bb4

00012cc0 <hci_le_meta_event>:
{
   12cc0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12cc2:	2101      	movs	r1, #1
   12cc4:	4604      	mov	r4, r0
   12cc6:	300c      	adds	r0, #12
   12cc8:	f007 f88c 	bl	19de4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12ccc:	4621      	mov	r1, r4
}
   12cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12cd2:	2307      	movs	r3, #7
   12cd4:	4a01      	ldr	r2, [pc, #4]	; (12cdc <hci_le_meta_event+0x1c>)
   12cd6:	7800      	ldrb	r0, [r0, #0]
   12cd8:	f7ff bfbe 	b.w	12c58 <handle_event>
   12cdc:	000321b4 	.word	0x000321b4

00012ce0 <hci_hardware_error>:
{
   12ce0:	b580      	push	{r7, lr}
   12ce2:	2101      	movs	r1, #1
   12ce4:	af00      	add	r7, sp, #0
   12ce6:	300c      	adds	r0, #12
   12ce8:	f007 f87c 	bl	19de4 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   12cec:	b088      	sub	sp, #32
   12cee:	466a      	mov	r2, sp
   12cf0:	7803      	ldrb	r3, [r0, #0]
   12cf2:	4907      	ldr	r1, [pc, #28]	; (12d10 <hci_hardware_error+0x30>)
   12cf4:	4807      	ldr	r0, [pc, #28]	; (12d14 <hci_hardware_error+0x34>)
   12cf6:	6151      	str	r1, [r2, #20]
   12cf8:	4907      	ldr	r1, [pc, #28]	; (12d18 <hci_hardware_error+0x38>)
   12cfa:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12cfe:	2304      	movs	r3, #4
   12d00:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12d04:	f842 3f10 	str.w	r3, [r2, #16]!
   12d08:	f019 f9c3 	bl	2c092 <z_log_msg_static_create.constprop.0>
}
   12d0c:	46bd      	mov	sp, r7
   12d0e:	bd80      	pop	{r7, pc}
   12d10:	00035a8a 	.word	0x00035a8a
   12d14:	00031bb4 	.word	0x00031bb4
   12d18:	000362d1 	.word	0x000362d1

00012d1c <le_phy_update_complete>:
{
   12d1c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12d1e:	68c3      	ldr	r3, [r0, #12]
{
   12d20:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12d22:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12d26:	4620      	mov	r0, r4
   12d28:	f002 fd60 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   12d2c:	b990      	cbnz	r0, 12d54 <le_phy_update_complete+0x38>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12d2e:	466d      	mov	r5, sp
   12d30:	b088      	sub	sp, #32
   12d32:	466a      	mov	r2, sp
   12d34:	4b09      	ldr	r3, [pc, #36]	; (12d5c <le_phy_update_complete+0x40>)
   12d36:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12d3a:	6153      	str	r3, [r2, #20]
   12d3c:	4b08      	ldr	r3, [pc, #32]	; (12d60 <le_phy_update_complete+0x44>)
   12d3e:	4809      	ldr	r0, [pc, #36]	; (12d64 <le_phy_update_complete+0x48>)
   12d40:	e9c2 3406 	strd	r3, r4, [r2, #24]
   12d44:	2304      	movs	r3, #4
   12d46:	f842 3f10 	str.w	r3, [r2, #16]!
   12d4a:	f019 f9a2 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12d4e:	46ad      	mov	sp, r5
}
   12d50:	46bd      	mov	sp, r7
   12d52:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   12d54:	f002 fd26 	bl	157a4 <bt_conn_unref>
   12d58:	e7fa      	b.n	12d50 <le_phy_update_complete+0x34>
   12d5a:	bf00      	nop
   12d5c:	00035a16 	.word	0x00035a16
   12d60:	000362a5 	.word	0x000362a5
   12d64:	00031bb4 	.word	0x00031bb4

00012d68 <hci_disconn_complete>:
{
   12d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12d6c:	68c6      	ldr	r6, [r0, #12]
{
   12d6e:	af00      	add	r7, sp, #0
	if (evt->status) {
   12d70:	7835      	ldrb	r5, [r6, #0]
   12d72:	b9bd      	cbnz	r5, 12da4 <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12d74:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   12d78:	4640      	mov	r0, r8
   12d7a:	f002 fd37 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   12d7e:	4604      	mov	r4, r0
   12d80:	b998      	cbnz	r0, 12daa <hci_disconn_complete+0x42>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12d82:	466c      	mov	r4, sp
   12d84:	b088      	sub	sp, #32
   12d86:	466a      	mov	r2, sp
   12d88:	4b14      	ldr	r3, [pc, #80]	; (12ddc <hci_disconn_complete+0x74>)
   12d8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12d8e:	6153      	str	r3, [r2, #20]
   12d90:	4b13      	ldr	r3, [pc, #76]	; (12de0 <hci_disconn_complete+0x78>)
   12d92:	4814      	ldr	r0, [pc, #80]	; (12de4 <hci_disconn_complete+0x7c>)
   12d94:	e9c2 3806 	strd	r3, r8, [r2, #24]
   12d98:	2304      	movs	r3, #4
   12d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   12d9e:	f019 f978 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12da2:	46a5      	mov	sp, r4
}
   12da4:	46bd      	mov	sp, r7
   12da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   12daa:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12dac:	4629      	mov	r1, r5
	conn->err = evt->reason;
   12dae:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12db0:	f002 fd24 	bl	157fc <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   12db4:	78a3      	ldrb	r3, [r4, #2]
   12db6:	2b01      	cmp	r3, #1
   12db8:	d003      	beq.n	12dc2 <hci_disconn_complete+0x5a>
	bt_conn_unref(conn);
   12dba:	4620      	mov	r0, r4
   12dbc:	f002 fcf2 	bl	157a4 <bt_conn_unref>
   12dc0:	e7f0      	b.n	12da4 <hci_disconn_complete+0x3c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12dc2:	1d23      	adds	r3, r4, #4
   12dc4:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   12dc8:	07db      	lsls	r3, r3, #31
   12dca:	d5f6      	bpl.n	12dba <hci_disconn_complete+0x52>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   12dcc:	4620      	mov	r0, r4
   12dce:	2102      	movs	r1, #2
   12dd0:	f002 fd14 	bl	157fc <bt_conn_set_state>
		bt_le_scan_update(false);
   12dd4:	4628      	mov	r0, r5
   12dd6:	f001 fec9 	bl	14b6c <bt_le_scan_update>
   12dda:	e7ee      	b.n	12dba <hci_disconn_complete+0x52>
   12ddc:	00035ab0 	.word	0x00035ab0
   12de0:	000362bc 	.word	0x000362bc
   12de4:	00031bb4 	.word	0x00031bb4

00012de8 <hci_data_buf_overflow>:
{
   12de8:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   12dea:	68c3      	ldr	r3, [r0, #12]
{
   12dec:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   12dee:	b088      	sub	sp, #32
   12df0:	466a      	mov	r2, sp
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	4907      	ldr	r1, [pc, #28]	; (12e14 <hci_data_buf_overflow+0x2c>)
   12df6:	4808      	ldr	r0, [pc, #32]	; (12e18 <hci_data_buf_overflow+0x30>)
   12df8:	6151      	str	r1, [r2, #20]
   12dfa:	4908      	ldr	r1, [pc, #32]	; (12e1c <hci_data_buf_overflow+0x34>)
   12dfc:	e9c2 1306 	strd	r1, r3, [r2, #24]
   12e00:	2304      	movs	r3, #4
   12e02:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12e06:	f842 3f10 	str.w	r3, [r2, #16]!
   12e0a:	f019 f942 	bl	2c092 <z_log_msg_static_create.constprop.0>
}
   12e0e:	46bd      	mov	sp, r7
   12e10:	bd80      	pop	{r7, pc}
   12e12:	bf00      	nop
   12e14:	00035ada 	.word	0x00035ada
   12e18:	00031bb4 	.word	0x00031bb4
   12e1c:	00036322 	.word	0x00036322

00012e20 <le_remote_feat_complete>:
{
   12e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   12e22:	68c5      	ldr	r5, [r0, #12]
{
   12e24:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12e26:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12e2a:	4630      	mov	r0, r6
   12e2c:	f002 fcde 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   12e30:	4604      	mov	r4, r0
   12e32:	b990      	cbnz	r0, 12e5a <le_remote_feat_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12e34:	466c      	mov	r4, sp
   12e36:	b088      	sub	sp, #32
   12e38:	466a      	mov	r2, sp
   12e3a:	4b11      	ldr	r3, [pc, #68]	; (12e80 <le_remote_feat_complete+0x60>)
   12e3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12e40:	6153      	str	r3, [r2, #20]
   12e42:	4b10      	ldr	r3, [pc, #64]	; (12e84 <le_remote_feat_complete+0x64>)
   12e44:	4810      	ldr	r0, [pc, #64]	; (12e88 <le_remote_feat_complete+0x68>)
   12e46:	e9c2 3606 	strd	r3, r6, [r2, #24]
   12e4a:	2304      	movs	r3, #4
   12e4c:	f842 3f10 	str.w	r3, [r2, #16]!
   12e50:	f019 f91f 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12e54:	46a5      	mov	sp, r4
}
   12e56:	46bd      	mov	sp, r7
   12e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   12e5a:	782b      	ldrb	r3, [r5, #0]
   12e5c:	b93b      	cbnz	r3, 12e6e <le_remote_feat_complete+0x4e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12e5e:	f8d5 3003 	ldr.w	r3, [r5, #3]
   12e62:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   12e66:	f8d5 3007 	ldr.w	r3, [r5, #7]
   12e6a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12e72:	1d20      	adds	r0, r4, #4
   12e74:	f019 f8f6 	bl	2c064 <atomic_or>
	bt_conn_unref(conn);
   12e78:	4620      	mov	r0, r4
   12e7a:	f002 fc93 	bl	157a4 <bt_conn_unref>
   12e7e:	e7ea      	b.n	12e56 <le_remote_feat_complete+0x36>
   12e80:	00035a16 	.word	0x00035a16
   12e84:	00036263 	.word	0x00036263
   12e88:	00031bb4 	.word	0x00031bb4

00012e8c <hci_cmd_done>:
{
   12e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12e90:	4606      	mov	r6, r0
   12e92:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12e94:	7a90      	ldrb	r0, [r2, #10]
{
   12e96:	4688      	mov	r8, r1
   12e98:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12e9a:	f006 fced 	bl	19878 <net_buf_pool_get>
   12e9e:	4d43      	ldr	r5, [pc, #268]	; (12fac <hci_cmd_done+0x120>)
   12ea0:	4285      	cmp	r5, r0
   12ea2:	d01a      	beq.n	12eda <hci_cmd_done+0x4e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   12ea4:	7aa4      	ldrb	r4, [r4, #10]
   12ea6:	46e8      	mov	r8, sp
   12ea8:	4620      	mov	r0, r4
   12eaa:	f006 fce5 	bl	19878 <net_buf_pool_get>
   12eae:	b08c      	sub	sp, #48	; 0x30
   12eb0:	466a      	mov	r2, sp
   12eb2:	4b3f      	ldr	r3, [pc, #252]	; (12fb0 <hci_cmd_done+0x124>)
   12eb4:	e9c2 4008 	strd	r4, r0, [r2, #32]
   12eb8:	6153      	str	r3, [r2, #20]
   12eba:	4b3e      	ldr	r3, [pc, #248]	; (12fb4 <hci_cmd_done+0x128>)
   12ebc:	6295      	str	r5, [r2, #40]	; 0x28
   12ebe:	e9c2 3606 	strd	r3, r6, [r2, #24]
   12ec2:	2307      	movs	r3, #7
   12ec4:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   12ec8:	483b      	ldr	r0, [pc, #236]	; (12fb8 <hci_cmd_done+0x12c>)
   12eca:	f842 3f10 	str.w	r3, [r2, #16]!
   12ece:	f019 f8e0 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12ed2:	46c5      	mov	sp, r8
}
   12ed4:	46bd      	mov	sp, r7
   12ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12eda:	4620      	mov	r0, r4
   12edc:	f006 fcd4 	bl	19888 <net_buf_id>
   12ee0:	f04f 090c 	mov.w	r9, #12
   12ee4:	4d35      	ldr	r5, [pc, #212]	; (12fbc <hci_cmd_done+0x130>)
   12ee6:	fb09 5000 	mla	r0, r9, r0, r5
   12eea:	8843      	ldrh	r3, [r0, #2]
   12eec:	42b3      	cmp	r3, r6
   12eee:	d018      	beq.n	12f22 <hci_cmd_done+0x96>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   12ef0:	4620      	mov	r0, r4
   12ef2:	f006 fcc9 	bl	19888 <net_buf_id>
   12ef6:	fb09 5000 	mla	r0, r9, r0, r5
   12efa:	466c      	mov	r4, sp
   12efc:	b08a      	sub	sp, #40	; 0x28
   12efe:	466a      	mov	r2, sp
   12f00:	8843      	ldrh	r3, [r0, #2]
   12f02:	6213      	str	r3, [r2, #32]
   12f04:	2305      	movs	r3, #5
   12f06:	492e      	ldr	r1, [pc, #184]	; (12fc0 <hci_cmd_done+0x134>)
   12f08:	482b      	ldr	r0, [pc, #172]	; (12fb8 <hci_cmd_done+0x12c>)
   12f0a:	6151      	str	r1, [r2, #20]
   12f0c:	4929      	ldr	r1, [pc, #164]	; (12fb4 <hci_cmd_done+0x128>)
   12f0e:	e9c2 1606 	strd	r1, r6, [r2, #24]
   12f12:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   12f16:	f842 3f10 	str.w	r3, [r2, #16]!
   12f1a:	f019 f8ba 	bl	2c092 <z_log_msg_static_create.constprop.0>
   12f1e:	46a5      	mov	sp, r4
		return;
   12f20:	e7d8      	b.n	12ed4 <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
   12f22:	4e28      	ldr	r6, [pc, #160]	; (12fc4 <hci_cmd_done+0x138>)
   12f24:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   12f28:	b120      	cbz	r0, 12f34 <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
   12f2a:	f006 fdf3 	bl	19b14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12f2e:	2300      	movs	r3, #0
   12f30:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   12f34:	4620      	mov	r0, r4
   12f36:	f006 fca7 	bl	19888 <net_buf_id>
   12f3a:	260c      	movs	r6, #12
   12f3c:	fb06 5000 	mla	r0, r6, r0, r5
   12f40:	6843      	ldr	r3, [r0, #4]
   12f42:	b1ab      	cbz	r3, 12f70 <hci_cmd_done+0xe4>
   12f44:	f1b8 0f00 	cmp.w	r8, #0
   12f48:	d112      	bne.n	12f70 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12f4a:	4620      	mov	r0, r4
   12f4c:	f006 fc9c 	bl	19888 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f50:	2101      	movs	r1, #1
   12f52:	fb06 5000 	mla	r0, r6, r0, r5
   12f56:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   12f58:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   12f5c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f5e:	f003 061f 	and.w	r6, r3, #31
   12f62:	40b1      	lsls	r1, r6
	if (val) {
   12f64:	095b      	lsrs	r3, r3, #5
   12f66:	b1da      	cbz	r2, 12fa0 <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12f6c:	f019 f87a 	bl	2c064 <atomic_or>
	if (cmd(buf)->sync) {
   12f70:	4620      	mov	r0, r4
   12f72:	f006 fc89 	bl	19888 <net_buf_id>
   12f76:	260c      	movs	r6, #12
   12f78:	fb06 5000 	mla	r0, r6, r0, r5
   12f7c:	6883      	ldr	r3, [r0, #8]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d0a8      	beq.n	12ed4 <hci_cmd_done+0x48>
		cmd(buf)->status = status;
   12f82:	4620      	mov	r0, r4
   12f84:	f006 fc80 	bl	19888 <net_buf_id>
   12f88:	4370      	muls	r0, r6
   12f8a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12f8e:	4620      	mov	r0, r4
   12f90:	f006 fc7a 	bl	19888 <net_buf_id>
   12f94:	fb06 5500 	mla	r5, r6, r0, r5
   12f98:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   12f9a:	f012 f8f9 	bl	25190 <z_impl_k_sem_give>
}
   12f9e:	e799      	b.n	12ed4 <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12fa0:	43c9      	mvns	r1, r1
   12fa2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12fa6:	f019 f877 	bl	2c098 <atomic_and.isra.0>
   12faa:	e7e1      	b.n	12f70 <hci_cmd_done+0xe4>
   12fac:	2000d08c 	.word	0x2000d08c
   12fb0:	00035b06 	.word	0x00035b06
   12fb4:	00036315 	.word	0x00036315
   12fb8:	00031bb4 	.word	0x00031bb4
   12fbc:	2000e318 	.word	0x2000e318
   12fc0:	00035b3f 	.word	0x00035b3f
   12fc4:	2000c580 	.word	0x2000c580

00012fc8 <hci_cmd_status>:
{
   12fc8:	b538      	push	{r3, r4, r5, lr}
   12fca:	2104      	movs	r1, #4
   12fcc:	4604      	mov	r4, r0
   12fce:	300c      	adds	r0, #12
   12fd0:	f006 ff08 	bl	19de4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12fd4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12fd6:	7801      	ldrb	r1, [r0, #0]
   12fd8:	4622      	mov	r2, r4
   12fda:	8840      	ldrh	r0, [r0, #2]
   12fdc:	f7ff ff56 	bl	12e8c <hci_cmd_done>
	if (ncmd) {
   12fe0:	b125      	cbz	r5, 12fec <hci_cmd_status+0x24>
}
   12fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   12fe6:	4802      	ldr	r0, [pc, #8]	; (12ff0 <hci_cmd_status+0x28>)
   12fe8:	f012 b8d2 	b.w	25190 <z_impl_k_sem_give>
   12fec:	bd38      	pop	{r3, r4, r5, pc}
   12fee:	bf00      	nop
   12ff0:	2000c6a0 	.word	0x2000c6a0

00012ff4 <hci_cmd_complete>:
{
   12ff4:	b538      	push	{r3, r4, r5, lr}
   12ff6:	2103      	movs	r1, #3
   12ff8:	4604      	mov	r4, r0
   12ffa:	300c      	adds	r0, #12
   12ffc:	f006 fef2 	bl	19de4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13000:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   13002:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13004:	4622      	mov	r2, r4
   13006:	7819      	ldrb	r1, [r3, #0]
   13008:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1300c:	f7ff ff3e 	bl	12e8c <hci_cmd_done>
	if (ncmd) {
   13010:	b125      	cbz	r5, 1301c <hci_cmd_complete+0x28>
}
   13012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13016:	4802      	ldr	r0, [pc, #8]	; (13020 <hci_cmd_complete+0x2c>)
   13018:	f012 b8ba 	b.w	25190 <z_impl_k_sem_give>
   1301c:	bd38      	pop	{r3, r4, r5, pc}
   1301e:	bf00      	nop
   13020:	2000c6a0 	.word	0x2000c6a0

00013024 <hci_num_completed_packets>:
{
   13024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   13028:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1302a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1302e:	8a01      	ldrh	r1, [r0, #16]
   13030:	f898 4000 	ldrb.w	r4, [r8]
{
   13034:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   13036:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1303a:	428b      	cmp	r3, r1
   1303c:	f240 8094 	bls.w	13168 <hci_num_completed_packets+0x144>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   13040:	466d      	mov	r5, sp
   13042:	b08a      	sub	sp, #40	; 0x28
   13044:	466a      	mov	r2, sp
   13046:	e9c2 3108 	strd	r3, r1, [r2, #32]
   1304a:	2306      	movs	r3, #6
   1304c:	4849      	ldr	r0, [pc, #292]	; (13174 <hci_num_completed_packets+0x150>)
   1304e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   13052:	6150      	str	r0, [r2, #20]
   13054:	4848      	ldr	r0, [pc, #288]	; (13178 <hci_num_completed_packets+0x154>)
   13056:	e9c2 0406 	strd	r0, r4, [r2, #24]
   1305a:	4848      	ldr	r0, [pc, #288]	; (1317c <hci_num_completed_packets+0x158>)
   1305c:	f842 3f10 	str.w	r3, [r2, #16]!
   13060:	f019 f817 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13064:	46ad      	mov	sp, r5
}
   13066:	46bd      	mov	sp, r7
   13068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   1306c:	466c      	mov	r4, sp
   1306e:	b088      	sub	sp, #32
   13070:	466a      	mov	r2, sp
   13072:	4b43      	ldr	r3, [pc, #268]	; (13180 <hci_num_completed_packets+0x15c>)
   13074:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13078:	6153      	str	r3, [r2, #20]
   1307a:	4b3f      	ldr	r3, [pc, #252]	; (13178 <hci_num_completed_packets+0x154>)
   1307c:	483f      	ldr	r0, [pc, #252]	; (1317c <hci_num_completed_packets+0x158>)
   1307e:	e9c2 3b06 	strd	r3, fp, [r2, #24]
   13082:	2304      	movs	r3, #4
   13084:	f842 3f10 	str.w	r3, [r2, #16]!
   13088:	f019 f803 	bl	2c092 <z_log_msg_static_create.constprop.0>
   1308c:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   1308e:	3501      	adds	r5, #1
   13090:	f898 3000 	ldrb.w	r3, [r8]
   13094:	429d      	cmp	r5, r3
   13096:	dae6      	bge.n	13066 <hci_num_completed_packets+0x42>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13098:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   1309c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   130a0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   130a4:	4658      	mov	r0, fp
   130a6:	f002 fba1 	bl	157ec <bt_conn_lookup_handle>
		if (!conn) {
   130aa:	4604      	mov	r4, r0
   130ac:	2800      	cmp	r0, #0
   130ae:	d0dd      	beq.n	1306c <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   130b0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   130b4:	b36e      	cbz	r6, 13112 <hci_num_completed_packets+0xee>
	__asm__ volatile(
   130b6:	f04f 0320 	mov.w	r3, #32
   130ba:	f3ef 8211 	mrs	r2, BASEPRI
   130be:	f383 8812 	msr	BASEPRI_MAX, r3
   130c2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   130c6:	69e3      	ldr	r3, [r4, #28]
   130c8:	b16b      	cbz	r3, 130e6 <hci_num_completed_packets+0xc2>
				conn->pending_no_cb--;
   130ca:	3b01      	subs	r3, #1
   130cc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   130ce:	f382 8811 	msr	BASEPRI, r2
   130d2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   130d6:	4620      	mov	r0, r4
   130d8:	f002 f938 	bl	1534c <bt_conn_get_pkts>
   130dc:	3e01      	subs	r6, #1
   130de:	f012 f857 	bl	25190 <z_impl_k_sem_give>
   130e2:	b2b6      	uxth	r6, r6
   130e4:	e7e6      	b.n	130b4 <hci_num_completed_packets+0x90>
	return list->head;
   130e6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   130e8:	b9bb      	cbnz	r3, 1311a <hci_num_completed_packets+0xf6>
   130ea:	f382 8811 	msr	BASEPRI, r2
   130ee:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   130f2:	466e      	mov	r6, sp
   130f4:	b088      	sub	sp, #32
   130f6:	466a      	mov	r2, sp
   130f8:	4b1f      	ldr	r3, [pc, #124]	; (13178 <hci_num_completed_packets+0x154>)
   130fa:	f8c2 a014 	str.w	sl, [r2, #20]
   130fe:	6193      	str	r3, [r2, #24]
   13100:	2303      	movs	r3, #3
   13102:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13106:	481d      	ldr	r0, [pc, #116]	; (1317c <hci_num_completed_packets+0x158>)
   13108:	f842 3f10 	str.w	r3, [r2, #16]!
   1310c:	f018 ffc1 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13110:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
   13112:	4620      	mov	r0, r4
   13114:	f002 fb46 	bl	157a4 <bt_conn_unref>
   13118:	e7b9      	b.n	1308e <hci_num_completed_packets+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1311a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1311c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1311e:	428b      	cmp	r3, r1
	list->head = node;
   13120:	6160      	str	r0, [r4, #20]
	list->tail = node;
   13122:	bf08      	it	eq
   13124:	61a0      	streq	r0, [r4, #24]
   13126:	f382 8811 	msr	BASEPRI, r2
   1312a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1312e:	f04f 0220 	mov.w	r2, #32
   13132:	f3ef 8111 	mrs	r1, BASEPRI
   13136:	f382 8812 	msr	BASEPRI_MAX, r2
   1313a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1313e:	68da      	ldr	r2, [r3, #12]
   13140:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   13142:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   13146:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1314a:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1314c:	b94a      	cbnz	r2, 13162 <hci_num_completed_packets+0x13e>
	list->head = node;
   1314e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   13152:	f381 8811 	msr	BASEPRI, r1
   13156:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1315a:	4658      	mov	r0, fp
   1315c:	f012 fb86 	bl	2586c <k_work_submit>
   13160:	e7b9      	b.n	130d6 <hci_num_completed_packets+0xb2>
	parent->next = child;
   13162:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13164:	6263      	str	r3, [r4, #36]	; 0x24
}
   13166:	e7f4      	b.n	13152 <hci_num_completed_packets+0x12e>
	for (i = 0; i < evt->num_handles; i++) {
   13168:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   1316a:	f8df a018 	ldr.w	sl, [pc, #24]	; 13184 <hci_num_completed_packets+0x160>
			tx->pending_no_cb = 0U;
   1316e:	46a9      	mov	r9, r5
   13170:	e78e      	b.n	13090 <hci_num_completed_packets+0x6c>
   13172:	bf00      	nop
   13174:	00035b76 	.word	0x00035b76
   13178:	00036338 	.word	0x00036338
   1317c:	00031bb4 	.word	0x00031bb4
   13180:	00035ba4 	.word	0x00035ba4
   13184:	00035bc4 	.word	0x00035bc4

00013188 <bt_hci_cmd_state_set_init>:
{
   13188:	b510      	push	{r4, lr}
	state->bit = bit;
   1318a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1318e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   13192:	460c      	mov	r4, r1
	state->val = val;
   13194:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   13196:	f006 fb77 	bl	19888 <net_buf_id>
   1319a:	220c      	movs	r2, #12
   1319c:	4b02      	ldr	r3, [pc, #8]	; (131a8 <bt_hci_cmd_state_set_init+0x20>)
   1319e:	fb02 3300 	mla	r3, r2, r0, r3
   131a2:	605c      	str	r4, [r3, #4]
}
   131a4:	bd10      	pop	{r4, pc}
   131a6:	bf00      	nop
   131a8:	2000e318 	.word	0x2000e318

000131ac <bt_hci_cmd_create>:
{
   131ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   131b0:	f04f 32ff 	mov.w	r2, #4294967295
   131b4:	4606      	mov	r6, r0
   131b6:	f04f 33ff 	mov.w	r3, #4294967295
   131ba:	481e      	ldr	r0, [pc, #120]	; (13234 <bt_hci_cmd_create+0x88>)
   131bc:	460f      	mov	r7, r1
   131be:	f01a f9cf 	bl	2d560 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   131c2:	4604      	mov	r4, r0
   131c4:	b958      	cbnz	r0, 131de <bt_hci_cmd_create+0x32>
   131c6:	491c      	ldr	r1, [pc, #112]	; (13238 <bt_hci_cmd_create+0x8c>)
   131c8:	481c      	ldr	r0, [pc, #112]	; (1323c <bt_hci_cmd_create+0x90>)
   131ca:	f44f 7381 	mov.w	r3, #258	; 0x102
   131ce:	4a1c      	ldr	r2, [pc, #112]	; (13240 <bt_hci_cmd_create+0x94>)
   131d0:	f017 fdf2 	bl	2adb8 <assert_print>
   131d4:	f44f 7181 	mov.w	r1, #258	; 0x102
   131d8:	4819      	ldr	r0, [pc, #100]	; (13240 <bt_hci_cmd_create+0x94>)
   131da:	f017 fde6 	bl	2adaa <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   131de:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   131e2:	f100 0a0c 	add.w	sl, r0, #12
   131e6:	2100      	movs	r1, #0
   131e8:	4650      	mov	r0, sl
   131ea:	f006 fd9b 	bl	19d24 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   131ee:	4620      	mov	r0, r4
   131f0:	f884 8018 	strb.w	r8, [r4, #24]
   131f4:	f006 fb48 	bl	19888 <net_buf_id>
   131f8:	f04f 090c 	mov.w	r9, #12
   131fc:	4d11      	ldr	r5, [pc, #68]	; (13244 <bt_hci_cmd_create+0x98>)
   131fe:	fb09 5000 	mla	r0, r9, r0, r5
   13202:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13204:	4620      	mov	r0, r4
   13206:	f006 fb3f 	bl	19888 <net_buf_id>
   1320a:	fb09 5000 	mla	r0, r9, r0, r5
   1320e:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13212:	4620      	mov	r0, r4
   13214:	f006 fb38 	bl	19888 <net_buf_id>
   13218:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1321c:	2103      	movs	r1, #3
   1321e:	4650      	mov	r0, sl
   13220:	f8c5 8004 	str.w	r8, [r5, #4]
   13224:	f006 fdfc 	bl	19e20 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13228:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1322a:	7087      	strb	r7, [r0, #2]
}
   1322c:	4620      	mov	r0, r4
   1322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13232:	bf00      	nop
   13234:	2000d08c 	.word	0x2000d08c
   13238:	000376ce 	.word	0x000376ce
   1323c:	00033bc2 	.word	0x00033bc2
   13240:	00035bdf 	.word	0x00035bdf
   13244:	2000e318 	.word	0x2000e318

00013248 <bt_hci_cmd_send_sync>:
{
   13248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1324c:	b087      	sub	sp, #28
   1324e:	4606      	mov	r6, r0
   13250:	4615      	mov	r5, r2
	if (!buf) {
   13252:	460c      	mov	r4, r1
{
   13254:	af00      	add	r7, sp, #0
	if (!buf) {
   13256:	b921      	cbnz	r1, 13262 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   13258:	f7ff ffa8 	bl	131ac <bt_hci_cmd_create>
		if (!buf) {
   1325c:	4604      	mov	r4, r0
   1325e:	2800      	cmp	r0, #0
   13260:	d061      	beq.n	13326 <bt_hci_cmd_send_sync+0xde>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13262:	2201      	movs	r2, #1
   13264:	2100      	movs	r1, #0
   13266:	4638      	mov	r0, r7
   13268:	f01d f90e 	bl	30488 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1326c:	4620      	mov	r0, r4
   1326e:	f006 fb0b 	bl	19888 <net_buf_id>
   13272:	230c      	movs	r3, #12
   13274:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1332c <bt_hci_cmd_send_sync+0xe4>
   13278:	fb03 9000 	mla	r0, r3, r0, r9
   1327c:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1327e:	4620      	mov	r0, r4
   13280:	f006 fc8c 	bl	19b9c <net_buf_ref>
   13284:	4601      	mov	r1, r0
   13286:	482a      	ldr	r0, [pc, #168]	; (13330 <bt_hci_cmd_send_sync+0xe8>)
   13288:	f006 fc1e 	bl	19ac8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1328c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13290:	2300      	movs	r3, #0
   13292:	4638      	mov	r0, r7
   13294:	f011 ffc0 	bl	25218 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   13298:	4680      	mov	r8, r0
   1329a:	b188      	cbz	r0, 132c0 <bt_hci_cmd_send_sync+0x78>
   1329c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   132a0:	4a24      	ldr	r2, [pc, #144]	; (13334 <bt_hci_cmd_send_sync+0xec>)
   132a2:	4925      	ldr	r1, [pc, #148]	; (13338 <bt_hci_cmd_send_sync+0xf0>)
   132a4:	4825      	ldr	r0, [pc, #148]	; (1333c <bt_hci_cmd_send_sync+0xf4>)
   132a6:	f017 fd87 	bl	2adb8 <assert_print>
   132aa:	4642      	mov	r2, r8
   132ac:	4631      	mov	r1, r6
   132ae:	4824      	ldr	r0, [pc, #144]	; (13340 <bt_hci_cmd_send_sync+0xf8>)
   132b0:	f017 fd82 	bl	2adb8 <assert_print>
   132b4:	4040      	eors	r0, r0
   132b6:	f380 8811 	msr	BASEPRI, r0
   132ba:	f04f 0003 	mov.w	r0, #3
   132be:	df02      	svc	2
	status = cmd(buf)->status;
   132c0:	4620      	mov	r0, r4
   132c2:	f006 fae1 	bl	19888 <net_buf_id>
   132c6:	230c      	movs	r3, #12
   132c8:	4358      	muls	r0, r3
   132ca:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   132ce:	f1b8 0f00 	cmp.w	r8, #0
   132d2:	d020      	beq.n	13316 <bt_hci_cmd_send_sync+0xce>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   132d4:	466d      	mov	r5, sp
   132d6:	b08a      	sub	sp, #40	; 0x28
   132d8:	466a      	mov	r2, sp
   132da:	4b1a      	ldr	r3, [pc, #104]	; (13344 <bt_hci_cmd_send_sync+0xfc>)
   132dc:	f8c2 8020 	str.w	r8, [r2, #32]
   132e0:	6153      	str	r3, [r2, #20]
   132e2:	4b19      	ldr	r3, [pc, #100]	; (13348 <bt_hci_cmd_send_sync+0x100>)
   132e4:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   132e8:	e9c2 3606 	strd	r3, r6, [r2, #24]
   132ec:	2305      	movs	r3, #5
   132ee:	4817      	ldr	r0, [pc, #92]	; (1334c <bt_hci_cmd_send_sync+0x104>)
   132f0:	f842 3f10 	str.w	r3, [r2, #16]!
   132f4:	f018 fecd 	bl	2c092 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   132f8:	4620      	mov	r0, r4
   132fa:	46ad      	mov	sp, r5
   132fc:	f006 fc0a 	bl	19b14 <net_buf_unref>
			return -ECONNREFUSED;
   13300:	f1b8 0f09 	cmp.w	r8, #9
   13304:	bf14      	ite	ne
   13306:	f06f 0004 	mvnne.w	r0, #4
   1330a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   1330e:	371c      	adds	r7, #28
   13310:	46bd      	mov	sp, r7
   13312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   13316:	b115      	cbz	r5, 1331e <bt_hci_cmd_send_sync+0xd6>
		*rsp = buf;
   13318:	602c      	str	r4, [r5, #0]
	return 0;
   1331a:	2000      	movs	r0, #0
   1331c:	e7f7      	b.n	1330e <bt_hci_cmd_send_sync+0xc6>
		net_buf_unref(buf);
   1331e:	4620      	mov	r0, r4
   13320:	f006 fbf8 	bl	19b14 <net_buf_unref>
   13324:	e7f9      	b.n	1331a <bt_hci_cmd_send_sync+0xd2>
			return -ENOBUFS;
   13326:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1332a:	e7f0      	b.n	1330e <bt_hci_cmd_send_sync+0xc6>
   1332c:	2000e318 	.word	0x2000e318
   13330:	2000c6bc 	.word	0x2000c6bc
   13334:	00035bdf 	.word	0x00035bdf
   13338:	00034233 	.word	0x00034233
   1333c:	00033bc2 	.word	0x00033bc2
   13340:	00035c13 	.word	0x00035c13
   13344:	00035c3f 	.word	0x00035c3f
   13348:	00036399 	.word	0x00036399
   1334c:	00031bb4 	.word	0x00031bb4

00013350 <bt_hci_le_rand>:
{
   13350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13352:	4b14      	ldr	r3, [pc, #80]	; (133a4 <bt_hci_le_rand+0x54>)
{
   13354:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13356:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
   1335a:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1335c:	2b00      	cmp	r3, #0
   1335e:	da1d      	bge.n	1339c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   13360:	b914      	cbnz	r4, 13368 <bt_hci_le_rand+0x18>
	return 0;
   13362:	4620      	mov	r0, r4
}
   13364:	b003      	add	sp, #12
   13366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   13368:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1336a:	f04f 0100 	mov.w	r1, #0
   1336e:	f242 0018 	movw	r0, #8216	; 0x2018
   13372:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   13374:	4626      	mov	r6, r4
   13376:	bf28      	it	cs
   13378:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1337a:	f7ff ff65 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   1337e:	2800      	cmp	r0, #0
   13380:	d1f0      	bne.n	13364 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   13382:	9f01      	ldr	r7, [sp, #4]
   13384:	4632      	mov	r2, r6
   13386:	68f9      	ldr	r1, [r7, #12]
   13388:	4628      	mov	r0, r5
   1338a:	3101      	adds	r1, #1
   1338c:	f01d fa59 	bl	30842 <memcpy>
		net_buf_unref(rsp);
   13390:	4638      	mov	r0, r7
   13392:	f006 fbbf 	bl	19b14 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   13396:	4435      	add	r5, r6
		len -= count;
   13398:	1ba4      	subs	r4, r4, r6
   1339a:	e7e1      	b.n	13360 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   1339c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   133a0:	e7e0      	b.n	13364 <bt_hci_le_rand+0x14>
   133a2:	bf00      	nop
   133a4:	2000c580 	.word	0x2000c580

000133a8 <bt_le_create_conn>:
{
   133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   133aa:	b087      	sub	sp, #28
   133ac:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   133ae:	f10d 010b 	add.w	r1, sp, #11
   133b2:	2000      	movs	r0, #0
   133b4:	f001 faf4 	bl	149a0 <bt_id_set_create_conn_own_addr>
	if (err) {
   133b8:	4604      	mov	r4, r0
   133ba:	2800      	cmp	r0, #0
   133bc:	d13c      	bne.n	13438 <bt_le_create_conn+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   133be:	2119      	movs	r1, #25
   133c0:	f242 000d 	movw	r0, #8205	; 0x200d
   133c4:	f7ff fef2 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   133c8:	4607      	mov	r7, r0
   133ca:	b3c0      	cbz	r0, 1343e <bt_le_create_conn+0x96>
   133cc:	2119      	movs	r1, #25
   133ce:	300c      	adds	r0, #12
   133d0:	f006 fd26 	bl	19e20 <net_buf_simple_add>
   133d4:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   133d6:	4621      	mov	r1, r4
   133d8:	2219      	movs	r2, #25
   133da:	f01d fa52 	bl	30882 <memset>
	cp->own_addr_type = own_addr_type;
   133de:	f89d 300b 	ldrb.w	r3, [sp, #11]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   133e2:	4a18      	ldr	r2, [pc, #96]	; (13444 <bt_le_create_conn+0x9c>)
	cp->own_addr_type = own_addr_type;
   133e4:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   133e6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   133ea:	1d68      	adds	r0, r5, #5
   133ec:	f018 fe45 	bl	2c07a <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   133f0:	8993      	ldrh	r3, [r2, #12]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   133f2:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   133f4:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   133f6:	89d3      	ldrh	r3, [r2, #14]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   133f8:	32d4      	adds	r2, #212	; 0xd4
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   133fa:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   133fc:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   13400:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   13404:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   13408:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1340c:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   13410:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   13414:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   13418:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1341c:	2301      	movs	r3, #1
   1341e:	9300      	str	r3, [sp, #0]
   13420:	230c      	movs	r3, #12
   13422:	eb0d 0103 	add.w	r1, sp, r3
   13426:	f7ff feaf 	bl	13188 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1342a:	4622      	mov	r2, r4
   1342c:	4639      	mov	r1, r7
   1342e:	f242 000d 	movw	r0, #8205	; 0x200d
   13432:	f7ff ff09 	bl	13248 <bt_hci_cmd_send_sync>
   13436:	4604      	mov	r4, r0
}
   13438:	4620      	mov	r0, r4
   1343a:	b007      	add	sp, #28
   1343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1343e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13442:	e7f9      	b.n	13438 <bt_le_create_conn+0x90>
   13444:	2000c580 	.word	0x2000c580

00013448 <bt_le_create_conn_cancel>:
{
   13448:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1344a:	2100      	movs	r1, #0
{
   1344c:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1344e:	f242 000e 	movw	r0, #8206	; 0x200e
   13452:	f7ff feab 	bl	131ac <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   13456:	2500      	movs	r5, #0
   13458:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1345a:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1345c:	eb0d 0103 	add.w	r1, sp, r3
   13460:	4a05      	ldr	r2, [pc, #20]	; (13478 <bt_le_create_conn_cancel+0x30>)
   13462:	9500      	str	r5, [sp, #0]
   13464:	f7ff fe90 	bl	13188 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   13468:	462a      	mov	r2, r5
   1346a:	4621      	mov	r1, r4
   1346c:	f242 000e 	movw	r0, #8206	; 0x200e
   13470:	f7ff feea 	bl	13248 <bt_hci_cmd_send_sync>
}
   13474:	b007      	add	sp, #28
   13476:	bd30      	pop	{r4, r5, pc}
   13478:	2000c654 	.word	0x2000c654

0001347c <bt_hci_le_enh_conn_complete>:
{
   1347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13480:	b087      	sub	sp, #28
   13482:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
   13484:	4b9b      	ldr	r3, [pc, #620]	; (136f4 <bt_hci_le_enh_conn_complete+0x278>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13486:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   1348a:	8819      	ldrh	r1, [r3, #0]
   1348c:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
	if (evt->status) {
   13490:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   13492:	4291      	cmp	r1, r2
			disconnected_handles[i] = 0;
   13494:	bf08      	it	eq
   13496:	801e      	strheq	r6, [r3, #0]
{
   13498:	4605      	mov	r5, r0
			return true;
   1349a:	bf08      	it	eq
   1349c:	2601      	moveq	r6, #1
{
   1349e:	af02      	add	r7, sp, #8
	if (evt->status) {
   134a0:	2c00      	cmp	r4, #0
   134a2:	d042      	beq.n	1352a <bt_hci_le_enh_conn_complete+0xae>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   134a4:	2c02      	cmp	r4, #2
   134a6:	d12e      	bne.n	13506 <bt_hci_le_enh_conn_complete+0x8a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   134a8:	2100      	movs	r1, #0
   134aa:	2206      	movs	r2, #6
   134ac:	4608      	mov	r0, r1
   134ae:	f002 fc7f 	bl	15db0 <bt_conn_lookup_state_le>
	if (!conn) {
   134b2:	4605      	mov	r5, r0
   134b4:	b9b0      	cbnz	r0, 134e4 <bt_hci_le_enh_conn_complete+0x68>
		LOG_ERR("No pending central connection");
   134b6:	466c      	mov	r4, sp
   134b8:	b088      	sub	sp, #32
   134ba:	aa02      	add	r2, sp, #8
   134bc:	4b8e      	ldr	r3, [pc, #568]	; (136f8 <bt_hci_le_enh_conn_complete+0x27c>)
   134be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   134c2:	6153      	str	r3, [r2, #20]
   134c4:	4b8d      	ldr	r3, [pc, #564]	; (136fc <bt_hci_le_enh_conn_complete+0x280>)
   134c6:	488e      	ldr	r0, [pc, #568]	; (13700 <bt_hci_le_enh_conn_complete+0x284>)
   134c8:	6193      	str	r3, [r2, #24]
   134ca:	2303      	movs	r3, #3
   134cc:	f842 3f10 	str.w	r3, [r2, #16]!
   134d0:	f018 fddf 	bl	2c092 <z_log_msg_static_create.constprop.0>
   134d4:	46a5      	mov	sp, r4
			bt_le_scan_update(false);
   134d6:	2000      	movs	r0, #0
   134d8:	f001 fb48 	bl	14b6c <bt_le_scan_update>
}
   134dc:	3714      	adds	r7, #20
   134de:	46bd      	mov	sp, r7
   134e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   134e4:	2100      	movs	r1, #0
	conn->err = err;
   134e6:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   134e8:	f002 f988 	bl	157fc <bt_conn_set_state>
   134ec:	1d2b      	adds	r3, r5, #4
   134ee:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   134f2:	07d9      	lsls	r1, r3, #31
   134f4:	d503      	bpl.n	134fe <bt_hci_le_enh_conn_complete+0x82>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   134f6:	4621      	mov	r1, r4
   134f8:	4628      	mov	r0, r5
   134fa:	f002 f97f 	bl	157fc <bt_conn_set_state>
	bt_conn_unref(conn);
   134fe:	4628      	mov	r0, r5
   13500:	f002 f950 	bl	157a4 <bt_conn_unref>
   13504:	e7e7      	b.n	134d6 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   13506:	466d      	mov	r5, sp
   13508:	b088      	sub	sp, #32
   1350a:	aa02      	add	r2, sp, #8
   1350c:	4b7d      	ldr	r3, [pc, #500]	; (13704 <bt_hci_le_enh_conn_complete+0x288>)
   1350e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13512:	6153      	str	r3, [r2, #20]
   13514:	4b7c      	ldr	r3, [pc, #496]	; (13708 <bt_hci_le_enh_conn_complete+0x28c>)
   13516:	487a      	ldr	r0, [pc, #488]	; (13700 <bt_hci_le_enh_conn_complete+0x284>)
   13518:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1351c:	2304      	movs	r3, #4
   1351e:	f842 3f10 	str.w	r3, [r2, #16]!
   13522:	f018 fdb6 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13526:	46ad      	mov	sp, r5
		return;
   13528:	e7d8      	b.n	134dc <bt_hci_le_enh_conn_complete+0x60>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1352a:	78c3      	ldrb	r3, [r0, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   1352c:	f100 0904 	add.w	r9, r0, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   13530:	2b01      	cmp	r3, #1
   13532:	bf08      	it	eq
   13534:	4b75      	ldreq	r3, [pc, #468]	; (1370c <bt_hci_le_enh_conn_complete+0x290>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   13536:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   13538:	bf08      	it	eq
   1353a:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   1353e:	f018 fd7a 	bl	2c036 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   13542:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   13544:	b340      	cbz	r0, 13598 <bt_hci_le_enh_conn_complete+0x11c>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   13546:	f107 0008 	add.w	r0, r7, #8
   1354a:	f018 fd69 	bl	2c020 <bt_addr_le_copy_resolved>
		bt_addr_copy(&peer_addr->a, &evt->peer_rpa);
   1354e:	f105 0111 	add.w	r1, r5, #17
   13552:	1c78      	adds	r0, r7, #1
   13554:	f018 fd98 	bl	2c088 <bt_addr_copy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   13558:	2301      	movs	r3, #1
   1355a:	703b      	strb	r3, [r7, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   1355c:	78e8      	ldrb	r0, [r5, #3]
   1355e:	b340      	cbz	r0, 135b2 <bt_hci_le_enh_conn_complete+0x136>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   13560:	4648      	mov	r0, r9
   13562:	f7ff f919 	bl	12798 <bt_addr_le_str>
   13566:	466c      	mov	r4, sp
   13568:	b08a      	sub	sp, #40	; 0x28
   1356a:	aa02      	add	r2, sp, #8
   1356c:	4b68      	ldr	r3, [pc, #416]	; (13710 <bt_hci_le_enh_conn_complete+0x294>)
   1356e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   13572:	6153      	str	r3, [r2, #20]
   13574:	4b64      	ldr	r3, [pc, #400]	; (13708 <bt_hci_le_enh_conn_complete+0x28c>)
   13576:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1357a:	f240 3301 	movw	r3, #769	; 0x301
   1357e:	8413      	strh	r3, [r2, #32]
   13580:	4b64      	ldr	r3, [pc, #400]	; (13714 <bt_hci_le_enh_conn_complete+0x298>)
   13582:	485f      	ldr	r0, [pc, #380]	; (13700 <bt_hci_le_enh_conn_complete+0x284>)
   13584:	f842 3f10 	str.w	r3, [r2, #16]!
   13588:	f018 fd83 	bl	2c092 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1358c:	211f      	movs	r1, #31
   1358e:	46a5      	mov	sp, r4
   13590:	4640      	mov	r0, r8
   13592:	f018 fd89 	bl	2c0a8 <bt_hci_disconnect>
		return;
   13596:	e7a1      	b.n	134dc <bt_hci_le_enh_conn_complete+0x60>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   13598:	4620      	mov	r0, r4
   1359a:	f018 fe22 	bl	2c1e2 <bt_lookup_id_addr>
   1359e:	4601      	mov	r1, r0
   135a0:	f107 0008 	add.w	r0, r7, #8
   135a4:	f018 fd69 	bl	2c07a <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   135a8:	4649      	mov	r1, r9
   135aa:	4638      	mov	r0, r7
   135ac:	f018 fd65 	bl	2c07a <bt_addr_le_copy>
   135b0:	e7d4      	b.n	1355c <bt_hci_le_enh_conn_complete+0xe0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   135b2:	2206      	movs	r2, #6
   135b4:	f107 0108 	add.w	r1, r7, #8
   135b8:	f002 fbfa 	bl	15db0 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   135bc:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   135be:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   135c0:	b923      	cbnz	r3, 135cc <bt_hci_le_enh_conn_complete+0x150>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   135c2:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   135c6:	4854      	ldr	r0, [pc, #336]	; (13718 <bt_hci_le_enh_conn_complete+0x29c>)
   135c8:	f018 fd66 	bl	2c098 <atomic_and.isra.0>
	if (!conn) {
   135cc:	2c00      	cmp	r4, #0
   135ce:	d0c7      	beq.n	13560 <bt_hci_le_enh_conn_complete+0xe4>
	conn->handle = sys_le16_to_cpu(evt->handle);
   135d0:	4620      	mov	r0, r4
	conn->err = 0U;
   135d2:	2200      	movs	r2, #0
	conn->handle = sys_le16_to_cpu(evt->handle);
   135d4:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	bt_addr_le_copy(&conn->le.dst, id_addr);
   135d8:	f107 0108 	add.w	r1, r7, #8
	conn->handle = sys_le16_to_cpu(evt->handle);
   135dc:	f820 3b90 	strh.w	r3, [r0], #144
	bt_addr_le_copy(&conn->le.dst, id_addr);
   135e0:	f018 fd4b 	bl	2c07a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   135e4:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   135e8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   135ec:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   135f0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   135f4:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   135f8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   135fc:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   135fe:	7262      	strb	r2, [r4, #9]
	conn->role = evt->role;
   13600:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13602:	b96b      	cbnz	r3, 13620 <bt_hci_le_enh_conn_complete+0x1a4>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   13604:	4639      	mov	r1, r7
   13606:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1360a:	f018 fd36 	bl	2c07a <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   1360e:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   13610:	4b3e      	ldr	r3, [pc, #248]	; (1370c <bt_hci_le_enh_conn_complete+0x290>)
					&bt_dev.id_addr[conn->id]);
   13612:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   13616:	4419      	add	r1, r3
   13618:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1361c:	f018 fd2d 	bl	2c07a <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13620:	2107      	movs	r1, #7
   13622:	4620      	mov	r0, r4
   13624:	f002 f8ea 	bl	157fc <bt_conn_set_state>
	if (is_disconnected) {
   13628:	b11e      	cbz	r6, 13632 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1362a:	2101      	movs	r1, #1
   1362c:	4620      	mov	r0, r4
   1362e:	f002 f8e5 	bl	157fc <bt_conn_set_state>
	bt_conn_connected(conn);
   13632:	4620      	mov	r0, r4
   13634:	f018 fe38 	bl	2c2a8 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   13638:	7aa3      	ldrb	r3, [r4, #10]
   1363a:	2b07      	cmp	r3, #7
   1363c:	d14f      	bne.n	136de <bt_hci_le_enh_conn_complete+0x262>
   1363e:	1d23      	adds	r3, r4, #4
   13640:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   13644:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   13648:	4e30      	ldr	r6, [pc, #192]	; (1370c <bt_hci_le_enh_conn_complete+0x290>)
   1364a:	d12b      	bne.n	136a4 <bt_hci_le_enh_conn_complete+0x228>
   1364c:	78e3      	ldrb	r3, [r4, #3]
   1364e:	b11b      	cbz	r3, 13658 <bt_hci_le_enh_conn_complete+0x1dc>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   13650:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
   13654:	071a      	lsls	r2, r3, #28
   13656:	d525      	bpl.n	136a4 <bt_hci_le_enh_conn_complete+0x228>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   13658:	2102      	movs	r1, #2
   1365a:	f242 0016 	movw	r0, #8214	; 0x2016
   1365e:	f7ff fda5 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   13662:	4605      	mov	r5, r0
   13664:	2800      	cmp	r0, #0
   13666:	d042      	beq.n	136ee <bt_hci_le_enh_conn_complete+0x272>
   13668:	2102      	movs	r1, #2
   1366a:	300c      	adds	r0, #12
   1366c:	f006 fbd8 	bl	19e20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13670:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   13672:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   13674:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   13676:	4629      	mov	r1, r5
   13678:	f242 0016 	movw	r0, #8214	; 0x2016
   1367c:	f7ff fde4 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   13680:	b180      	cbz	r0, 136a4 <bt_hci_le_enh_conn_complete+0x228>
			LOG_ERR("Failed read remote features (%d)", err);
   13682:	466d      	mov	r5, sp
   13684:	b088      	sub	sp, #32
   13686:	aa02      	add	r2, sp, #8
   13688:	4b24      	ldr	r3, [pc, #144]	; (1371c <bt_hci_le_enh_conn_complete+0x2a0>)
   1368a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1368e:	6153      	str	r3, [r2, #20]
   13690:	4b23      	ldr	r3, [pc, #140]	; (13720 <bt_hci_le_enh_conn_complete+0x2a4>)
   13692:	e9c2 3006 	strd	r3, r0, [r2, #24]
   13696:	2304      	movs	r3, #4
   13698:	4819      	ldr	r0, [pc, #100]	; (13700 <bt_hci_le_enh_conn_complete+0x284>)
   1369a:	f842 3f10 	str.w	r3, [r2, #16]!
   1369e:	f018 fcf8 	bl	2c092 <z_log_msg_static_create.constprop.0>
   136a2:	46ad      	mov	sp, r5
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   136a4:	f896 30d9 	ldrb.w	r3, [r6, #217]	; 0xd9
   136a8:	07db      	lsls	r3, r3, #31
   136aa:	d518      	bpl.n	136de <bt_hci_le_enh_conn_complete+0x262>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   136ac:	2100      	movs	r1, #0
   136ae:	2302      	movs	r3, #2
   136b0:	4620      	mov	r0, r4
   136b2:	461a      	mov	r2, r3
   136b4:	9100      	str	r1, [sp, #0]
   136b6:	f018 fd12 	bl	2c0de <bt_le_set_phy>
		if (err) {
   136ba:	b180      	cbz	r0, 136de <bt_hci_le_enh_conn_complete+0x262>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   136bc:	466d      	mov	r5, sp
   136be:	b088      	sub	sp, #32
   136c0:	aa02      	add	r2, sp, #8
   136c2:	4b18      	ldr	r3, [pc, #96]	; (13724 <bt_hci_le_enh_conn_complete+0x2a8>)
   136c4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   136c8:	6153      	str	r3, [r2, #20]
   136ca:	4b15      	ldr	r3, [pc, #84]	; (13720 <bt_hci_le_enh_conn_complete+0x2a4>)
   136cc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   136d0:	2304      	movs	r3, #4
   136d2:	480b      	ldr	r0, [pc, #44]	; (13700 <bt_hci_le_enh_conn_complete+0x284>)
   136d4:	f842 3f10 	str.w	r3, [r2, #16]!
   136d8:	f018 fcdb 	bl	2c092 <z_log_msg_static_create.constprop.0>
   136dc:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   136de:	4620      	mov	r0, r4
   136e0:	f002 f860 	bl	157a4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   136e4:	78e3      	ldrb	r3, [r4, #3]
   136e6:	2b00      	cmp	r3, #0
   136e8:	f47f aef8 	bne.w	134dc <bt_hci_le_enh_conn_complete+0x60>
   136ec:	e6f3      	b.n	134d6 <bt_hci_le_enh_conn_complete+0x5a>
		return -ENOBUFS;
   136ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   136f2:	e7c6      	b.n	13682 <bt_hci_le_enh_conn_complete+0x206>
   136f4:	2000ebca 	.word	0x2000ebca
   136f8:	00035c5f 	.word	0x00035c5f
   136fc:	00036365 	.word	0x00036365
   13700:	00031bb4 	.word	0x00031bb4
   13704:	00035c81 	.word	0x00035c81
   13708:	0003637d 	.word	0x0003637d
   1370c:	2000c580 	.word	0x2000c580
   13710:	00035c9e 	.word	0x00035c9e
   13714:	01000004 	.word	0x01000004
   13718:	2000c654 	.word	0x2000c654
   1371c:	00035cbe 	.word	0x00035cbe
   13720:	00036352 	.word	0x00036352
   13724:	00035ce3 	.word	0x00035ce3

00013728 <le_legacy_conn_complete>:
{
   13728:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1372a:	68c1      	ldr	r1, [r0, #12]
{
   1372c:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1372e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13730:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   13732:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   13736:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1373a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1373c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   13740:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   13744:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   13748:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1374c:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   13750:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   13754:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   13758:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1375c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   13760:	7b4b      	ldrb	r3, [r1, #13]
   13762:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13766:	f018 fc88 	bl	2c07a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1376a:	4907      	ldr	r1, [pc, #28]	; (13788 <le_legacy_conn_complete+0x60>)
   1376c:	f10d 000b 	add.w	r0, sp, #11
   13770:	f018 fc8a 	bl	2c088 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   13774:	f10d 0011 	add.w	r0, sp, #17
   13778:	f018 fc86 	bl	2c088 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1377c:	4668      	mov	r0, sp
   1377e:	f7ff fe7d 	bl	1347c <bt_hci_le_enh_conn_complete>
}
   13782:	b009      	add	sp, #36	; 0x24
   13784:	f85d fb04 	ldr.w	pc, [sp], #4
   13788:	000358d1 	.word	0x000358d1

0001378c <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
   1378c:	4b02      	ldr	r3, [pc, #8]	; (13798 <bt_send+0xc>)
   1378e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   13792:	695b      	ldr	r3, [r3, #20]
   13794:	4718      	bx	r3
   13796:	bf00      	nop
   13798:	2000c580 	.word	0x2000c580

0001379c <bt_hci_cmd_send>:
{
   1379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1379e:	4605      	mov	r5, r0
	if (!buf) {
   137a0:	460c      	mov	r4, r1
{
   137a2:	af00      	add	r7, sp, #0
	if (!buf) {
   137a4:	b919      	cbnz	r1, 137ae <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   137a6:	f7ff fd01 	bl	131ac <bt_hci_cmd_create>
		if (!buf) {
   137aa:	4604      	mov	r4, r0
   137ac:	b328      	cbz	r0, 137fa <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   137ae:	f640 4335 	movw	r3, #3125	; 0xc35
   137b2:	429d      	cmp	r5, r3
   137b4:	d11b      	bne.n	137ee <bt_hci_cmd_send+0x52>
		err = bt_send(buf);
   137b6:	4620      	mov	r0, r4
   137b8:	f7ff ffe8 	bl	1378c <bt_send>
		if (err) {
   137bc:	4605      	mov	r5, r0
   137be:	b198      	cbz	r0, 137e8 <bt_hci_cmd_send+0x4c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   137c0:	466e      	mov	r6, sp
   137c2:	b088      	sub	sp, #32
   137c4:	466a      	mov	r2, sp
   137c6:	4b0e      	ldr	r3, [pc, #56]	; (13800 <bt_hci_cmd_send+0x64>)
   137c8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   137cc:	6153      	str	r3, [r2, #20]
   137ce:	4b0d      	ldr	r3, [pc, #52]	; (13804 <bt_hci_cmd_send+0x68>)
   137d0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   137d4:	2304      	movs	r3, #4
   137d6:	480c      	ldr	r0, [pc, #48]	; (13808 <bt_hci_cmd_send+0x6c>)
   137d8:	f842 3f10 	str.w	r3, [r2, #16]!
   137dc:	f018 fc59 	bl	2c092 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   137e0:	4620      	mov	r0, r4
   137e2:	46b5      	mov	sp, r6
   137e4:	f006 f996 	bl	19b14 <net_buf_unref>
}
   137e8:	4628      	mov	r0, r5
   137ea:	46bd      	mov	sp, r7
   137ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   137ee:	4621      	mov	r1, r4
   137f0:	4806      	ldr	r0, [pc, #24]	; (1380c <bt_hci_cmd_send+0x70>)
   137f2:	f006 f969 	bl	19ac8 <net_buf_put>
	return 0;
   137f6:	2500      	movs	r5, #0
   137f8:	e7f6      	b.n	137e8 <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
   137fa:	f06f 0568 	mvn.w	r5, #104	; 0x68
   137fe:	e7f3      	b.n	137e8 <bt_hci_cmd_send+0x4c>
   13800:	00035cfe 	.word	0x00035cfe
   13804:	000363ae 	.word	0x000363ae
   13808:	00031bb4 	.word	0x00031bb4
   1380c:	2000c6bc 	.word	0x2000c6bc

00013810 <bt_hci_host_num_completed_packets>:
{
   13810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13814:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   13816:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   13818:	7e46      	ldrb	r6, [r0, #25]
{
   1381a:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1381c:	7a80      	ldrb	r0, [r0, #10]
   1381e:	f006 f82b 	bl	19878 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   13822:	4621      	mov	r1, r4
   13824:	f01c fe22 	bl	3046c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   13828:	4b30      	ldr	r3, [pc, #192]	; (138ec <bt_hci_host_num_completed_packets+0xdc>)
   1382a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   1382e:	069b      	lsls	r3, r3, #26
   13830:	d52d      	bpl.n	1388e <bt_hci_host_num_completed_packets+0x7e>
	conn = bt_conn_lookup_index(index);
   13832:	4630      	mov	r0, r6
   13834:	f002 fce0 	bl	161f8 <bt_conn_lookup_index>
	if (!conn) {
   13838:	4604      	mov	r4, r0
   1383a:	b988      	cbnz	r0, 13860 <bt_hci_host_num_completed_packets+0x50>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1383c:	466c      	mov	r4, sp
   1383e:	b088      	sub	sp, #32
   13840:	466a      	mov	r2, sp
   13842:	4b2b      	ldr	r3, [pc, #172]	; (138f0 <bt_hci_host_num_completed_packets+0xe0>)
   13844:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13848:	6153      	str	r3, [r2, #20]
   1384a:	4b2a      	ldr	r3, [pc, #168]	; (138f4 <bt_hci_host_num_completed_packets+0xe4>)
   1384c:	e9c2 3606 	strd	r3, r6, [r2, #24]
   13850:	2304      	movs	r3, #4
   13852:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate new HCI command");
   13856:	4828      	ldr	r0, [pc, #160]	; (138f8 <bt_hci_host_num_completed_packets+0xe8>)
   13858:	f018 fc1b 	bl	2c092 <z_log_msg_static_create.constprop.0>
   1385c:	46a5      	mov	sp, r4
		return;
   1385e:	e016      	b.n	1388e <bt_hci_host_num_completed_packets+0x7e>
	if (conn->state != BT_CONN_CONNECTED &&
   13860:	7a83      	ldrb	r3, [r0, #10]
   13862:	3b07      	subs	r3, #7
   13864:	2b01      	cmp	r3, #1
   13866:	d915      	bls.n	13894 <bt_hci_host_num_completed_packets+0x84>
		LOG_WRN("Not reporting packet for non-connected conn");
   13868:	466d      	mov	r5, sp
   1386a:	b088      	sub	sp, #32
   1386c:	466a      	mov	r2, sp
   1386e:	4b23      	ldr	r3, [pc, #140]	; (138fc <bt_hci_host_num_completed_packets+0xec>)
   13870:	4821      	ldr	r0, [pc, #132]	; (138f8 <bt_hci_host_num_completed_packets+0xe8>)
   13872:	6153      	str	r3, [r2, #20]
   13874:	4b1f      	ldr	r3, [pc, #124]	; (138f4 <bt_hci_host_num_completed_packets+0xe4>)
   13876:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1387a:	6193      	str	r3, [r2, #24]
   1387c:	2303      	movs	r3, #3
   1387e:	f842 3f10 	str.w	r3, [r2, #16]!
   13882:	f018 fc06 	bl	2c092 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   13886:	4620      	mov	r0, r4
   13888:	46ad      	mov	sp, r5
   1388a:	f001 ff8b 	bl	157a4 <bt_conn_unref>
}
   1388e:	46bd      	mov	sp, r7
   13890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_unref(conn);
   13894:	f001 ff86 	bl	157a4 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   13898:	2105      	movs	r1, #5
   1389a:	f640 4035 	movw	r0, #3125	; 0xc35
   1389e:	f7ff fc85 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   138a2:	4604      	mov	r4, r0
   138a4:	b960      	cbnz	r0, 138c0 <bt_hci_host_num_completed_packets+0xb0>
		LOG_ERR("Unable to allocate new HCI command");
   138a6:	466c      	mov	r4, sp
   138a8:	b088      	sub	sp, #32
   138aa:	466a      	mov	r2, sp
   138ac:	4b14      	ldr	r3, [pc, #80]	; (13900 <bt_hci_host_num_completed_packets+0xf0>)
   138ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   138b2:	6153      	str	r3, [r2, #20]
   138b4:	4b0f      	ldr	r3, [pc, #60]	; (138f4 <bt_hci_host_num_completed_packets+0xe4>)
   138b6:	6193      	str	r3, [r2, #24]
   138b8:	2303      	movs	r3, #3
   138ba:	f842 3f10 	str.w	r3, [r2, #16]!
   138be:	e7ca      	b.n	13856 <bt_hci_host_num_completed_packets+0x46>
	return net_buf_simple_add(&buf->b, len);
   138c0:	f100 080c 	add.w	r8, r0, #12
   138c4:	2101      	movs	r1, #1
   138c6:	4640      	mov	r0, r8
   138c8:	f006 faaa 	bl	19e20 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   138cc:	2601      	movs	r6, #1
   138ce:	2104      	movs	r1, #4
   138d0:	7006      	strb	r6, [r0, #0]
   138d2:	4640      	mov	r0, r8
   138d4:	f006 faa4 	bl	19e20 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   138d8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   138da:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   138dc:	7086      	strb	r6, [r0, #2]
   138de:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   138e0:	4621      	mov	r1, r4
   138e2:	f640 4035 	movw	r0, #3125	; 0xc35
   138e6:	f7ff ff59 	bl	1379c <bt_hci_cmd_send>
   138ea:	e7d0      	b.n	1388e <bt_hci_host_num_completed_packets+0x7e>
   138ec:	2000c580 	.word	0x2000c580
   138f0:	00035d24 	.word	0x00035d24
   138f4:	000363be 	.word	0x000363be
   138f8:	00031bb4 	.word	0x00031bb4
   138fc:	00035d51 	.word	0x00035d51
   13900:	00035d81 	.word	0x00035d81

00013904 <le_conn_param_req>:
{
   13904:	b5f0      	push	{r4, r5, r6, r7, lr}
   13906:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13908:	68c3      	ldr	r3, [r0, #12]
{
   1390a:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1390c:	78d9      	ldrb	r1, [r3, #3]
   1390e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   13910:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13912:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13916:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13918:	7959      	ldrb	r1, [r3, #5]
   1391a:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1391c:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1391e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13922:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   13924:	799a      	ldrb	r2, [r3, #6]
   13926:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   13928:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   1392a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1392e:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13930:	7a1a      	ldrb	r2, [r3, #8]
   13932:	7a5b      	ldrb	r3, [r3, #9]
   13934:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13938:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   1393a:	f001 ff57 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   1393e:	4605      	mov	r5, r0
   13940:	b9b8      	cbnz	r0, 13972 <le_conn_param_req+0x6e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13942:	466d      	mov	r5, sp
   13944:	b088      	sub	sp, #32
   13946:	466a      	mov	r2, sp
   13948:	4b1f      	ldr	r3, [pc, #124]	; (139c8 <le_conn_param_req+0xc4>)
   1394a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1394e:	6153      	str	r3, [r2, #20]
   13950:	4b1e      	ldr	r3, [pc, #120]	; (139cc <le_conn_param_req+0xc8>)
   13952:	481f      	ldr	r0, [pc, #124]	; (139d0 <le_conn_param_req+0xcc>)
   13954:	e9c2 3406 	strd	r3, r4, [r2, #24]
   13958:	2304      	movs	r3, #4
   1395a:	f842 3f10 	str.w	r3, [r2, #16]!
   1395e:	f018 fb98 	bl	2c092 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   13962:	2102      	movs	r1, #2
   13964:	46ad      	mov	sp, r5
   13966:	4620      	mov	r0, r4
   13968:	f018 fc05 	bl	2c176 <le_conn_param_neg_reply>
}
   1396c:	370c      	adds	r7, #12
   1396e:	46bd      	mov	sp, r7
   13970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   13972:	4639      	mov	r1, r7
   13974:	f002 f92a 	bl	15bcc <le_param_req>
   13978:	b938      	cbnz	r0, 1398a <le_conn_param_req+0x86>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1397a:	211e      	movs	r1, #30
   1397c:	4620      	mov	r0, r4
   1397e:	f018 fbfa 	bl	2c176 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   13982:	4628      	mov	r0, r5
   13984:	f001 ff0e 	bl	157a4 <bt_conn_unref>
   13988:	e7f0      	b.n	1396c <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1398a:	210e      	movs	r1, #14
   1398c:	f242 0020 	movw	r0, #8224	; 0x2020
   13990:	f7ff fc0c 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   13994:	4604      	mov	r4, r0
   13996:	2800      	cmp	r0, #0
   13998:	d0f3      	beq.n	13982 <le_conn_param_req+0x7e>
   1399a:	210e      	movs	r1, #14
   1399c:	300c      	adds	r0, #12
   1399e:	f006 fa3f 	bl	19e20 <net_buf_simple_add>
   139a2:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   139a4:	8006      	strh	r6, [r0, #0]
   139a6:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   139aa:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   139ac:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   139ae:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   139b0:	887b      	ldrh	r3, [r7, #2]
   139b2:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   139b4:	88bb      	ldrh	r3, [r7, #4]
   139b6:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   139b8:	88fb      	ldrh	r3, [r7, #6]
   139ba:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   139bc:	f242 0020 	movw	r0, #8224	; 0x2020
   139c0:	f7ff feec 	bl	1379c <bt_hci_cmd_send>
   139c4:	e7dd      	b.n	13982 <le_conn_param_req+0x7e>
   139c6:	bf00      	nop
   139c8:	00035a16 	.word	0x00035a16
   139cc:	00036293 	.word	0x00036293
   139d0:	00031bb4 	.word	0x00031bb4

000139d4 <hci_tx_thread>:
{
   139d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   139d8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 13b48 <hci_tx_thread+0x174>
{
   139dc:	b083      	sub	sp, #12
		BT_ASSERT(err == 0);
   139de:	f8df 916c 	ldr.w	r9, [pc, #364]	; 13b4c <hci_tx_thread+0x178>
			ev_count += bt_conn_prepare_events(&events[1]);
   139e2:	f108 0a14 	add.w	sl, r8, #20
{
   139e6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   139e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   139ec:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   139ee:	f36f 3394 	bfc	r3, #14, #7
   139f2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   139f6:	f001 fe61 	bl	156bc <bt_conn_prepare_events>
   139fa:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   139fc:	f04f 32ff 	mov.w	r2, #4294967295
   13a00:	f04f 33ff 	mov.w	r3, #4294967295
   13a04:	4629      	mov	r1, r5
   13a06:	4850      	ldr	r0, [pc, #320]	; (13b48 <hci_tx_thread+0x174>)
   13a08:	f014 f930 	bl	27c6c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   13a0c:	b160      	cbz	r0, 13a28 <hci_tx_thread+0x54>
   13a0e:	f640 23c8 	movw	r3, #2760	; 0xac8
   13a12:	464a      	mov	r2, r9
   13a14:	494e      	ldr	r1, [pc, #312]	; (13b50 <hci_tx_thread+0x17c>)
   13a16:	484f      	ldr	r0, [pc, #316]	; (13b54 <hci_tx_thread+0x180>)
   13a18:	f017 f9ce 	bl	2adb8 <assert_print>
   13a1c:	4040      	eors	r0, r0
   13a1e:	f380 8811 	msr	BASEPRI, r0
   13a22:	f04f 0003 	mov.w	r0, #3
   13a26:	df02      	svc	2
{
   13a28:	4e47      	ldr	r6, [pc, #284]	; (13b48 <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
   13a2a:	b915      	cbnz	r5, 13a32 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   13a2c:	f013 f8c8 	bl	26bc0 <z_impl_k_yield>
	while (1) {
   13a30:	e7da      	b.n	139e8 <hci_tx_thread+0x14>
		switch (ev->state) {
   13a32:	68f3      	ldr	r3, [r6, #12]
   13a34:	f3c3 3386 	ubfx	r3, r3, #14, #7
   13a38:	2b02      	cmp	r3, #2
   13a3a:	d969      	bls.n	13b10 <hci_tx_thread+0x13c>
   13a3c:	2b04      	cmp	r3, #4
   13a3e:	d171      	bne.n	13b24 <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13a40:	7b33      	ldrb	r3, [r6, #12]
   13a42:	2b00      	cmp	r3, #0
   13a44:	d167      	bne.n	13b16 <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13a46:	2200      	movs	r2, #0
   13a48:	2300      	movs	r3, #0
   13a4a:	4843      	ldr	r0, [pc, #268]	; (13b58 <hci_tx_thread+0x184>)
   13a4c:	f019 fd8d 	bl	2d56a <net_buf_get>
	BT_ASSERT(buf);
   13a50:	4604      	mov	r4, r0
   13a52:	b960      	cbnz	r0, 13a6e <hci_tx_thread+0x9a>
   13a54:	f640 235a 	movw	r3, #2650	; 0xa5a
   13a58:	464a      	mov	r2, r9
   13a5a:	4940      	ldr	r1, [pc, #256]	; (13b5c <hci_tx_thread+0x188>)
   13a5c:	483d      	ldr	r0, [pc, #244]	; (13b54 <hci_tx_thread+0x180>)
   13a5e:	f017 f9ab 	bl	2adb8 <assert_print>
   13a62:	4040      	eors	r0, r0
   13a64:	f380 8811 	msr	BASEPRI, r0
   13a68:	f04f 0003 	mov.w	r0, #3
   13a6c:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   13a6e:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 13b60 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
   13a72:	f04f 32ff 	mov.w	r2, #4294967295
   13a76:	f04f 33ff 	mov.w	r3, #4294967295
   13a7a:	483a      	ldr	r0, [pc, #232]	; (13b64 <hci_tx_thread+0x190>)
   13a7c:	f011 fbcc 	bl	25218 <z_impl_k_sem_take>
   13a80:	f8db 2138 	ldr.w	r2, [fp, #312]	; 0x138
   13a84:	b1c2      	cbz	r2, 13ab8 <hci_tx_thread+0xe4>
		LOG_ERR("Uncleared pending sent_cmd");
   13a86:	f8c7 d004 	str.w	sp, [r7, #4]
   13a8a:	b088      	sub	sp, #32
   13a8c:	466a      	mov	r2, sp
   13a8e:	4936      	ldr	r1, [pc, #216]	; (13b68 <hci_tx_thread+0x194>)
   13a90:	4836      	ldr	r0, [pc, #216]	; (13b6c <hci_tx_thread+0x198>)
   13a92:	6151      	str	r1, [r2, #20]
   13a94:	4936      	ldr	r1, [pc, #216]	; (13b70 <hci_tx_thread+0x19c>)
   13a96:	6191      	str	r1, [r2, #24]
   13a98:	2103      	movs	r1, #3
   13a9a:	f842 1f10 	str.w	r1, [r2, #16]!
   13a9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13aa2:	f018 faf6 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13aa6:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
   13aaa:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   13aae:	f006 f831 	bl	19b14 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13ab2:	2200      	movs	r2, #0
   13ab4:	f8cb 2138 	str.w	r2, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   13ab8:	4620      	mov	r0, r4
   13aba:	f006 f86f 	bl	19b9c <net_buf_ref>
   13abe:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   13ac2:	4620      	mov	r0, r4
   13ac4:	f7ff fe62 	bl	1378c <bt_send>
	if (err) {
   13ac8:	b310      	cbz	r0, 13b10 <hci_tx_thread+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13aca:	46eb      	mov	fp, sp
   13acc:	b088      	sub	sp, #32
   13ace:	466a      	mov	r2, sp
   13ad0:	4b28      	ldr	r3, [pc, #160]	; (13b74 <hci_tx_thread+0x1a0>)
   13ad2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13ad6:	6153      	str	r3, [r2, #20]
   13ad8:	4b25      	ldr	r3, [pc, #148]	; (13b70 <hci_tx_thread+0x19c>)
   13ada:	e9c2 3006 	strd	r3, r0, [r2, #24]
   13ade:	2304      	movs	r3, #4
   13ae0:	4822      	ldr	r0, [pc, #136]	; (13b6c <hci_tx_thread+0x198>)
   13ae2:	f842 3f10 	str.w	r3, [r2, #16]!
   13ae6:	f018 fad4 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13aea:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   13aec:	481d      	ldr	r0, [pc, #116]	; (13b64 <hci_tx_thread+0x190>)
   13aee:	f011 fb4f 	bl	25190 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   13af2:	4620      	mov	r0, r4
   13af4:	f005 fec8 	bl	19888 <net_buf_id>
   13af8:	220c      	movs	r2, #12
   13afa:	4b1f      	ldr	r3, [pc, #124]	; (13b78 <hci_tx_thread+0x1a4>)
   13afc:	211f      	movs	r1, #31
   13afe:	fb02 3000 	mla	r0, r2, r0, r3
   13b02:	4622      	mov	r2, r4
   13b04:	8840      	ldrh	r0, [r0, #2]
   13b06:	f7ff f9c1 	bl	12e8c <hci_cmd_done>
		net_buf_unref(buf);
   13b0a:	4620      	mov	r0, r4
   13b0c:	f006 f802 	bl	19b14 <net_buf_unref>
	for (; count; ev++, count--) {
   13b10:	3614      	adds	r6, #20
   13b12:	3d01      	subs	r5, #1
   13b14:	e789      	b.n	13a2a <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   13b16:	2b01      	cmp	r3, #1
   13b18:	d1fa      	bne.n	13b10 <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
   13b1a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   13b1c:	3838      	subs	r0, #56	; 0x38
   13b1e:	f002 fae1 	bl	160e4 <bt_conn_process_tx>
   13b22:	e7f5      	b.n	13b10 <hci_tx_thread+0x13c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13b24:	466c      	mov	r4, sp
   13b26:	b088      	sub	sp, #32
   13b28:	466a      	mov	r2, sp
   13b2a:	4914      	ldr	r1, [pc, #80]	; (13b7c <hci_tx_thread+0x1a8>)
   13b2c:	480f      	ldr	r0, [pc, #60]	; (13b6c <hci_tx_thread+0x198>)
   13b2e:	6151      	str	r1, [r2, #20]
   13b30:	4913      	ldr	r1, [pc, #76]	; (13b80 <hci_tx_thread+0x1ac>)
		switch (ev->state) {
   13b32:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13b36:	2304      	movs	r3, #4
   13b38:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13b3c:	f842 3f10 	str.w	r3, [r2, #16]!
   13b40:	f018 faa7 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13b44:	46a5      	mov	sp, r4
   13b46:	e7e3      	b.n	13b10 <hci_tx_thread+0x13c>
   13b48:	2000c83c 	.word	0x2000c83c
   13b4c:	00035bdf 	.word	0x00035bdf
   13b50:	00034233 	.word	0x00034233
   13b54:	00033bc2 	.word	0x00033bc2
   13b58:	2000c6bc 	.word	0x2000c6bc
   13b5c:	000376ce 	.word	0x000376ce
   13b60:	2000c580 	.word	0x2000c580
   13b64:	2000c6a0 	.word	0x2000c6a0
   13b68:	00035da8 	.word	0x00035da8
   13b6c:	00031bb4 	.word	0x00031bb4
   13b70:	00036125 	.word	0x00036125
   13b74:	00035cfe 	.word	0x00035cfe
   13b78:	2000e318 	.word	0x2000e318
   13b7c:	00035dc7 	.word	0x00035dc7
   13b80:	0003612e 	.word	0x0003612e

00013b84 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
   13b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b88:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
   13b8a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13b8e:	4630      	mov	r0, r6
   13b90:	f019 fd03 	bl	2d59a <net_buf_simple_headroom>
	state->len = buf->len;
   13b94:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13b98:	4605      	mov	r5, r0

	BT_ASSERT(buf->len >= sizeof(*hdr));
   13b9a:	f1b8 0f01 	cmp.w	r8, #1
   13b9e:	d80c      	bhi.n	13bba <hci_event_prio+0x36>
   13ba0:	f640 636f 	movw	r3, #3695	; 0xe6f
   13ba4:	4a1b      	ldr	r2, [pc, #108]	; (13c14 <hci_event_prio+0x90>)
   13ba6:	491c      	ldr	r1, [pc, #112]	; (13c18 <hci_event_prio+0x94>)
   13ba8:	481c      	ldr	r0, [pc, #112]	; (13c1c <hci_event_prio+0x98>)
   13baa:	f017 f905 	bl	2adb8 <assert_print>
   13bae:	4040      	eors	r0, r0
   13bb0:	f380 8811 	msr	BASEPRI, r0
   13bb4:	f04f 0003 	mov.w	r0, #3
   13bb8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13bba:	4630      	mov	r0, r6
   13bbc:	2102      	movs	r1, #2
   13bbe:	f006 f911 	bl	19de4 <net_buf_simple_pull_mem>
   13bc2:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13bc4:	7800      	ldrb	r0, [r0, #0]
   13bc6:	f018 fa3a 	bl	2c03e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13bca:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13bcc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13bce:	d40c      	bmi.n	13bea <hci_event_prio+0x66>
   13bd0:	f640 6373 	movw	r3, #3699	; 0xe73
   13bd4:	4a0f      	ldr	r2, [pc, #60]	; (13c14 <hci_event_prio+0x90>)
   13bd6:	4912      	ldr	r1, [pc, #72]	; (13c20 <hci_event_prio+0x9c>)
   13bd8:	4810      	ldr	r0, [pc, #64]	; (13c1c <hci_event_prio+0x98>)
   13bda:	f017 f8ed 	bl	2adb8 <assert_print>
   13bde:	4040      	eors	r0, r0
   13be0:	f380 8811 	msr	BASEPRI, r0
   13be4:	f04f 0003 	mov.w	r0, #3
   13be8:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   13bea:	2305      	movs	r3, #5
   13bec:	4621      	mov	r1, r4
   13bee:	4a0d      	ldr	r2, [pc, #52]	; (13c24 <hci_event_prio+0xa0>)
   13bf0:	7838      	ldrb	r0, [r7, #0]
   13bf2:	f7ff f831 	bl	12c58 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13bf6:	07b3      	lsls	r3, r6, #30
   13bf8:	d507      	bpl.n	13c0a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13bfa:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   13bfc:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   13c00:	fa13 f585 	uxtah	r5, r3, r5
   13c04:	60e5      	str	r5, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
   13c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13c0a:	4620      	mov	r0, r4
}
   13c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   13c10:	f005 bf80 	b.w	19b14 <net_buf_unref>
   13c14:	00035bdf 	.word	0x00035bdf
   13c18:	00035dec 	.word	0x00035dec
   13c1c:	00033bc2 	.word	0x00033bc2
   13c20:	00035e05 	.word	0x00035e05
   13c24:	0003216c 	.word	0x0003216c

00013c28 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
   13c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13c2a:	7e03      	ldrb	r3, [r0, #24]
   13c2c:	4604      	mov	r4, r0
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	LOG_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
   13c2e:	2b01      	cmp	r3, #1
{
   13c30:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   13c32:	d058      	beq.n	13ce6 <bt_recv+0xbe>
   13c34:	2b03      	cmp	r3, #3
   13c36:	f040 8085 	bne.w	13d44 <bt_recv+0x11c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13c3a:	8a03      	ldrh	r3, [r0, #16]
   13c3c:	2b03      	cmp	r3, #3
   13c3e:	d80c      	bhi.n	13c5a <bt_recv+0x32>
   13c40:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   13c44:	4a4b      	ldr	r2, [pc, #300]	; (13d74 <bt_recv+0x14c>)
   13c46:	494c      	ldr	r1, [pc, #304]	; (13d78 <bt_recv+0x150>)
   13c48:	484c      	ldr	r0, [pc, #304]	; (13d7c <bt_recv+0x154>)
   13c4a:	f017 f8b5 	bl	2adb8 <assert_print>
   13c4e:	4040      	eors	r0, r0
   13c50:	f380 8811 	msr	BASEPRI, r0
   13c54:	f04f 0003 	mov.w	r0, #3
   13c58:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13c5a:	2104      	movs	r1, #4
   13c5c:	f104 000c 	add.w	r0, r4, #12
   13c60:	f006 f8c0 	bl	19de4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13c64:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13c66:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13c68:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   13c6a:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   13c6c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   13c70:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   13c72:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13c74:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   13c76:	d015      	beq.n	13ca4 <bt_recv+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   13c78:	466d      	mov	r5, sp
   13c7a:	b08a      	sub	sp, #40	; 0x28
   13c7c:	466a      	mov	r2, sp
   13c7e:	4840      	ldr	r0, [pc, #256]	; (13d80 <bt_recv+0x158>)
   13c80:	6213      	str	r3, [r2, #32]
   13c82:	6150      	str	r0, [r2, #20]
   13c84:	483f      	ldr	r0, [pc, #252]	; (13d84 <bt_recv+0x15c>)
   13c86:	2305      	movs	r3, #5
   13c88:	e9c2 0106 	strd	r0, r1, [r2, #24]
   13c8c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13c90:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   13c94:	483c      	ldr	r0, [pc, #240]	; (13d88 <bt_recv+0x160>)
   13c96:	f018 f9fc 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13c9a:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   13c9c:	4620      	mov	r0, r4
   13c9e:	f005 ff39 	bl	19b14 <net_buf_unref>
}
   13ca2:	e01d      	b.n	13ce0 <bt_recv+0xb8>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13ca4:	f001 fda2 	bl	157ec <bt_conn_lookup_handle>
	if (!conn) {
   13ca8:	4605      	mov	r5, r0
   13caa:	b970      	cbnz	r0, 13cca <bt_recv+0xa2>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   13cac:	466d      	mov	r5, sp
   13cae:	b088      	sub	sp, #32
   13cb0:	466a      	mov	r2, sp
   13cb2:	8b63      	ldrh	r3, [r4, #26]
   13cb4:	4935      	ldr	r1, [pc, #212]	; (13d8c <bt_recv+0x164>)
   13cb6:	6151      	str	r1, [r2, #20]
   13cb8:	4932      	ldr	r1, [pc, #200]	; (13d84 <bt_recv+0x15c>)
   13cba:	e9c2 1306 	strd	r1, r3, [r2, #24]
   13cbe:	2304      	movs	r3, #4
   13cc0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13cc4:	f842 3f10 	str.w	r3, [r2, #16]!
   13cc8:	e7e4      	b.n	13c94 <bt_recv+0x6c>
	acl(buf)->index = bt_conn_index(conn);
   13cca:	f001 feb5 	bl	15a38 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13cce:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   13cd0:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   13cd2:	0b32      	lsrs	r2, r6, #12
   13cd4:	4628      	mov	r0, r5
   13cd6:	f001 fbbd 	bl	15454 <bt_conn_recv>
	bt_conn_unref(conn);
   13cda:	4628      	mov	r0, r5
   13cdc:	f001 fd62 	bl	157a4 <bt_conn_unref>
#if defined(CONFIG_BT_RECV_BLOCKING)
		hci_acl(buf);
#else
		rx_queue_put(buf);
#endif
		return 0;
   13ce0:	2000      	movs	r0, #0
	default:
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
   13ce2:	46bd      	mov	sp, r7
   13ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13ce6:	8a03      	ldrh	r3, [r0, #16]
   13ce8:	2b01      	cmp	r3, #1
   13cea:	d80c      	bhi.n	13d06 <bt_recv+0xde>
   13cec:	f640 2347 	movw	r3, #2631	; 0xa47
   13cf0:	4a20      	ldr	r2, [pc, #128]	; (13d74 <bt_recv+0x14c>)
   13cf2:	4921      	ldr	r1, [pc, #132]	; (13d78 <bt_recv+0x150>)
   13cf4:	4821      	ldr	r0, [pc, #132]	; (13d7c <bt_recv+0x154>)
   13cf6:	f017 f85f 	bl	2adb8 <assert_print>
   13cfa:	4040      	eors	r0, r0
   13cfc:	f380 8811 	msr	BASEPRI, r0
   13d00:	f04f 0003 	mov.w	r0, #3
   13d04:	df02      	svc	2
   13d06:	2102      	movs	r1, #2
   13d08:	f104 000c 	add.w	r0, r4, #12
   13d0c:	f006 f86a 	bl	19de4 <net_buf_simple_pull_mem>
   13d10:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13d12:	7800      	ldrb	r0, [r0, #0]
   13d14:	f018 f993 	bl	2c03e <bt_hci_evt_get_flags>
   13d18:	0783      	lsls	r3, r0, #30
   13d1a:	d40c      	bmi.n	13d36 <bt_recv+0x10e>
   13d1c:	f640 234b 	movw	r3, #2635	; 0xa4b
   13d20:	4a14      	ldr	r2, [pc, #80]	; (13d74 <bt_recv+0x14c>)
   13d22:	491b      	ldr	r1, [pc, #108]	; (13d90 <bt_recv+0x168>)
   13d24:	4815      	ldr	r0, [pc, #84]	; (13d7c <bt_recv+0x154>)
   13d26:	f017 f847 	bl	2adb8 <assert_print>
   13d2a:	4040      	eors	r0, r0
   13d2c:	f380 8811 	msr	BASEPRI, r0
   13d30:	f04f 0003 	mov.w	r0, #3
   13d34:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13d36:	2304      	movs	r3, #4
   13d38:	4621      	mov	r1, r4
   13d3a:	4a16      	ldr	r2, [pc, #88]	; (13d94 <bt_recv+0x16c>)
   13d3c:	7828      	ldrb	r0, [r5, #0]
   13d3e:	f7fe ff8b 	bl	12c58 <handle_event>
   13d42:	e7ab      	b.n	13c9c <bt_recv+0x74>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13d44:	466d      	mov	r5, sp
   13d46:	b088      	sub	sp, #32
   13d48:	466a      	mov	r2, sp
   13d4a:	4913      	ldr	r1, [pc, #76]	; (13d98 <bt_recv+0x170>)
   13d4c:	480e      	ldr	r0, [pc, #56]	; (13d88 <bt_recv+0x160>)
   13d4e:	6151      	str	r1, [r2, #20]
   13d50:	4912      	ldr	r1, [pc, #72]	; (13d9c <bt_recv+0x174>)
	switch (bt_buf_get_type(buf)) {
   13d52:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13d56:	2304      	movs	r3, #4
   13d58:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13d5c:	f842 3f10 	str.w	r3, [r2, #16]!
   13d60:	f018 f997 	bl	2c092 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13d64:	4620      	mov	r0, r4
   13d66:	46ad      	mov	sp, r5
   13d68:	f005 fed4 	bl	19b14 <net_buf_unref>
		return -EINVAL;
   13d6c:	f06f 0015 	mvn.w	r0, #21
   13d70:	e7b7      	b.n	13ce2 <bt_recv+0xba>
   13d72:	bf00      	nop
   13d74:	00035bdf 	.word	0x00035bdf
   13d78:	00035dec 	.word	0x00035dec
   13d7c:	00033bc2 	.word	0x00033bc2
   13d80:	00035e1e 	.word	0x00035e1e
   13d84:	000362e4 	.word	0x000362e4
   13d88:	00031bb4 	.word	0x00031bb4
   13d8c:	00035e46 	.word	0x00035e46
   13d90:	00035e6c 	.word	0x00035e6c
   13d94:	00032194 	.word	0x00032194
   13d98:	00035e9a 	.word	0x00035e9a
   13d9c:	000362ec 	.word	0x000362ec

00013da0 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
   13da0:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   13da2:	7e03      	ldrb	r3, [r0, #24]
{
   13da4:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   13da6:	2b01      	cmp	r3, #1
   13da8:	d00c      	beq.n	13dc4 <bt_recv_prio+0x24>
   13daa:	f640 63c5 	movw	r3, #3781	; 0xec5
   13dae:	4a08      	ldr	r2, [pc, #32]	; (13dd0 <bt_recv_prio+0x30>)
   13db0:	4908      	ldr	r1, [pc, #32]	; (13dd4 <bt_recv_prio+0x34>)
   13db2:	4809      	ldr	r0, [pc, #36]	; (13dd8 <bt_recv_prio+0x38>)
   13db4:	f017 f800 	bl	2adb8 <assert_print>
   13db8:	4040      	eors	r0, r0
   13dba:	f380 8811 	msr	BASEPRI, r0
   13dbe:	f04f 0003 	mov.w	r0, #3
   13dc2:	df02      	svc	2

	hci_event_prio(buf);
   13dc4:	4620      	mov	r0, r4
   13dc6:	f7ff fedd 	bl	13b84 <hci_event_prio>

	return 0;
}
   13dca:	2000      	movs	r0, #0
   13dcc:	bd10      	pop	{r4, pc}
   13dce:	bf00      	nop
   13dd0:	00035bdf 	.word	0x00035bdf
   13dd4:	00035eb2 	.word	0x00035eb2
   13dd8:	00033bc2 	.word	0x00033bc2

00013ddc <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
   13ddc:	4a08      	ldr	r2, [pc, #32]	; (13e00 <bt_hci_driver_register+0x24>)
{
   13dde:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13de0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
   13de4:	b930      	cbnz	r0, 13df4 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
   13de6:	68d9      	ldr	r1, [r3, #12]
   13de8:	b139      	cbz	r1, 13dfa <bt_hci_driver_register+0x1e>
   13dea:	6959      	ldr	r1, [r3, #20]
   13dec:	b129      	cbz	r1, 13dfa <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
   13dee:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	LOG_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
   13df2:	4770      	bx	lr
		return -EALREADY;
   13df4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13df8:	4770      	bx	lr
		return -EINVAL;
   13dfa:	f06f 0015 	mvn.w	r0, #21
}
   13dfe:	4770      	bx	lr
   13e00:	2000c580 	.word	0x2000c580

00013e04 <bt_finalize_init>:

void bt_finalize_init(void)
{
   13e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13e08:	2104      	movs	r1, #4
   13e0a:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13e0c:	4d41      	ldr	r5, [pc, #260]	; (13f14 <bt_finalize_init+0x110>)
   13e0e:	4842      	ldr	r0, [pc, #264]	; (13f18 <bt_finalize_init+0x114>)
   13e10:	f018 f928 	bl	2c064 <atomic_or>
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
   13e14:	2000      	movs	r0, #0
   13e16:	f000 fea9 	bl	14b6c <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13e1a:	4c40      	ldr	r4, [pc, #256]	; (13f1c <bt_finalize_init+0x118>)
   13e1c:	79ea      	ldrb	r2, [r5, #7]
   13e1e:	4b40      	ldr	r3, [pc, #256]	; (13f20 <bt_finalize_init+0x11c>)
   13e20:	4628      	mov	r0, r5
   13e22:	2a01      	cmp	r2, #1
   13e24:	bf88      	it	hi
   13e26:	461c      	movhi	r4, r3
   13e28:	46e8      	mov	r8, sp
   13e2a:	f7fe fcb5 	bl	12798 <bt_addr_le_str>
   13e2e:	b08a      	sub	sp, #40	; 0x28
   13e30:	466a      	mov	r2, sp
   13e32:	4b3c      	ldr	r3, [pc, #240]	; (13f24 <bt_finalize_init+0x120>)
   13e34:	4e3c      	ldr	r6, [pc, #240]	; (13f28 <bt_finalize_init+0x124>)
   13e36:	6153      	str	r3, [r2, #20]
   13e38:	4b3c      	ldr	r3, [pc, #240]	; (13f2c <bt_finalize_init+0x128>)
   13e3a:	e9c2 6406 	strd	r6, r4, [r2, #24]
   13e3e:	6253      	str	r3, [r2, #36]	; 0x24
   13e40:	4b3b      	ldr	r3, [pc, #236]	; (13f30 <bt_finalize_init+0x12c>)
   13e42:	6210      	str	r0, [r2, #32]
   13e44:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   13e48:	483a      	ldr	r0, [pc, #232]	; (13f34 <bt_finalize_init+0x130>)
   13e4a:	f842 3f10 	str.w	r3, [r2, #16]!
   13e4e:	f018 f920 	bl	2c092 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   13e52:	2401      	movs	r4, #1
   13e54:	46c5      	mov	sp, r8
   13e56:	46a8      	mov	r8, r5
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   13e58:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 13f38 <bt_finalize_init+0x134>
   13e5c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 13f34 <bt_finalize_init+0x130>
	for (i = 1; i < bt_dev.id_count; i++) {
   13e60:	79ea      	ldrb	r2, [r5, #7]
   13e62:	f108 0807 	add.w	r8, r8, #7
   13e66:	4294      	cmp	r4, r2
   13e68:	db3c      	blt.n	13ee4 <bt_finalize_init+0xe0>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   13e6a:	f895 8070 	ldrb.w	r8, [r5, #112]	; 0x70
   13e6e:	46ea      	mov	sl, sp
   13e70:	4640      	mov	r0, r8
   13e72:	f7fe fe23 	bl	12abc <ver_str>
   13e76:	b08c      	sub	sp, #48	; 0x30
   13e78:	466c      	mov	r4, sp
   13e7a:	f8b5 2072 	ldrh.w	r2, [r5, #114]	; 0x72
   13e7e:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   13e82:	f240 3901 	movw	r9, #769	; 0x301
   13e86:	e9c4 0807 	strd	r0, r8, [r4, #28]
   13e8a:	46a0      	mov	r8, r4
   13e8c:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
   13e90:	492a      	ldr	r1, [pc, #168]	; (13f3c <bt_finalize_init+0x138>)
   13e92:	4b2b      	ldr	r3, [pc, #172]	; (13f40 <bt_finalize_init+0x13c>)
   13e94:	e9c4 1605 	strd	r1, r6, [r4, #20]
   13e98:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
   13e9c:	f848 3f10 	str.w	r3, [r8, #16]!
   13ea0:	4642      	mov	r2, r8
   13ea2:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   13ea6:	4823      	ldr	r0, [pc, #140]	; (13f34 <bt_finalize_init+0x130>)
   13ea8:	f018 f8f3 	bl	2c092 <z_log_msg_static_create.constprop.0>
   13eac:	46d5      	mov	sp, sl
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   13eae:	f895 a071 	ldrb.w	sl, [r5, #113]	; 0x71
   13eb2:	4650      	mov	r0, sl
   13eb4:	f7fe fe02 	bl	12abc <ver_str>
   13eb8:	46a5      	mov	sp, r4
   13eba:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
   13ebe:	4a21      	ldr	r2, [pc, #132]	; (13f44 <bt_finalize_init+0x140>)
   13ec0:	6263      	str	r3, [r4, #36]	; 0x24
   13ec2:	4b21      	ldr	r3, [pc, #132]	; (13f48 <bt_finalize_init+0x144>)
   13ec4:	e9c4 2605 	strd	r2, r6, [r4, #20]
   13ec8:	e9c4 0a07 	strd	r0, sl, [r4, #28]
   13ecc:	4642      	mov	r2, r8
   13ece:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   13ed2:	4818      	ldr	r0, [pc, #96]	; (13f34 <bt_finalize_init+0x130>)
   13ed4:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
   13ed8:	6123      	str	r3, [r4, #16]
   13eda:	f018 f8da 	bl	2c092 <z_log_msg_static_create.constprop.0>
	}

	bt_dev_show_info();
}
   13ede:	46bd      	mov	sp, r7
   13ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   13ee4:	4640      	mov	r0, r8
   13ee6:	f7fe fc57 	bl	12798 <bt_addr_le_str>
   13eea:	46eb      	mov	fp, sp
   13eec:	b08a      	sub	sp, #40	; 0x28
   13eee:	466a      	mov	r2, sp
   13ef0:	f240 4102 	movw	r1, #1026	; 0x402
   13ef4:	4b15      	ldr	r3, [pc, #84]	; (13f4c <bt_finalize_init+0x148>)
   13ef6:	e9c2 4007 	strd	r4, r0, [r2, #28]
   13efa:	8491      	strh	r1, [r2, #36]	; 0x24
   13efc:	e9c2 3605 	strd	r3, r6, [r2, #20]
   13f00:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   13f04:	4650      	mov	r0, sl
   13f06:	f842 9f10 	str.w	r9, [r2, #16]!
   13f0a:	f018 f8c2 	bl	2c092 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   13f0e:	3401      	adds	r4, #1
   13f10:	46dd      	mov	sp, fp
   13f12:	e7a5      	b.n	13e60 <bt_finalize_init+0x5c>
   13f14:	2000c580 	.word	0x2000c580
   13f18:	2000c654 	.word	0x2000c654
   13f1c:	00034664 	.word	0x00034664
   13f20:	00035ed5 	.word	0x00035ed5
   13f24:	00035ed9 	.word	0x00035ed9
   13f28:	0003623a 	.word	0x0003623a
   13f2c:	04020301 	.word	0x04020301
   13f30:	02000005 	.word	0x02000005
   13f34:	00031bb4 	.word	0x00031bb4
   13f38:	01000005 	.word	0x01000005
   13f3c:	00035f01 	.word	0x00035f01
   13f40:	01000007 	.word	0x01000007
   13f44:	00035f43 	.word	0x00035f43
   13f48:	01000006 	.word	0x01000006
   13f4c:	00035eec 	.word	0x00035eec

00013f50 <bt_init>:

static int bt_init(void)
{
   13f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f54:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13f56:	4d6f      	ldr	r5, [pc, #444]	; (14114 <bt_init+0x1c4>)
{
   13f58:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13f5a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   13f5e:	6899      	ldr	r1, [r3, #8]
   13f60:	f011 0101 	ands.w	r1, r1, #1
   13f64:	d11d      	bne.n	13fa2 <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13f66:	f640 4003 	movw	r0, #3075	; 0xc03
   13f6a:	1d3a      	adds	r2, r7, #4
   13f6c:	f7ff f96c 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   13f70:	4604      	mov	r4, r0
   13f72:	2800      	cmp	r0, #0
   13f74:	f040 80c8 	bne.w	14108 <bt_init+0x1b8>
		hci_reset_complete(rsp);
   13f78:	687c      	ldr	r4, [r7, #4]
	uint8_t status = buf->data[0];
   13f7a:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   13f7c:	781b      	ldrb	r3, [r3, #0]
   13f7e:	b96b      	cbnz	r3, 13f9c <bt_init+0x4c>
		bt_scan_reset();
   13f80:	f000 fdee 	bl	14b60 <bt_scan_reset>
   13f84:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   13f88:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13f8c:	f002 0209 	and.w	r2, r2, #9
   13f90:	e8d3 1fef 	ldaex	r1, [r3]
   13f94:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13f98:	2800      	cmp	r0, #0
   13f9a:	d1f9      	bne.n	13f90 <bt_init+0x40>
		net_buf_unref(rsp);
   13f9c:	4620      	mov	r0, r4
   13f9e:	f005 fdb9 	bl	19b14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13fa2:	2100      	movs	r1, #0
   13fa4:	f241 0003 	movw	r0, #4099	; 0x1003
   13fa8:	1d3a      	adds	r2, r7, #4
   13faa:	f7ff f94d 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   13fae:	4604      	mov	r4, r0
   13fb0:	2800      	cmp	r0, #0
   13fb2:	f040 80a9 	bne.w	14108 <bt_init+0x1b8>
	read_local_features_complete(rsp);
   13fb6:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   13fb8:	4e57      	ldr	r6, [pc, #348]	; (14118 <bt_init+0x1c8>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   13fba:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   13fbc:	f8d2 0001 	ldr.w	r0, [r2, #1]
   13fc0:	f8d2 1005 	ldr.w	r1, [r2, #5]
   13fc4:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   13fc6:	4618      	mov	r0, r3
   13fc8:	f005 fda4 	bl	19b14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   13fcc:	4621      	mov	r1, r4
   13fce:	f241 0001 	movw	r0, #4097	; 0x1001
   13fd2:	1d3a      	adds	r2, r7, #4
   13fd4:	f7ff f938 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   13fd8:	4604      	mov	r4, r0
   13fda:	2800      	cmp	r0, #0
   13fdc:	f040 8094 	bne.w	14108 <bt_init+0x1b8>
	read_local_ver_complete(rsp);
   13fe0:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   13fe2:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   13fe4:	785a      	ldrb	r2, [r3, #1]
   13fe6:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   13fea:	885a      	ldrh	r2, [r3, #2]
   13fec:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   13ff0:	791a      	ldrb	r2, [r3, #4]
   13ff2:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   13ff6:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   13ffa:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   13ffe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   14002:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   14006:	f005 fd85 	bl	19b14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1400a:	4621      	mov	r1, r4
   1400c:	f241 0002 	movw	r0, #4098	; 0x1002
   14010:	1d3a      	adds	r2, r7, #4
   14012:	f7ff f919 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   14016:	4604      	mov	r4, r0
   14018:	2800      	cmp	r0, #0
   1401a:	d175      	bne.n	14108 <bt_init+0x1b8>
	read_supported_commands_complete(rsp);
   1401c:	f8d7 c004 	ldr.w	ip, [r7, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14020:	f8dc 200c 	ldr.w	r2, [ip, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   14024:	1c53      	adds	r3, r2, #1
   14026:	3241      	adds	r2, #65	; 0x41
   14028:	4634      	mov	r4, r6
   1402a:	6818      	ldr	r0, [r3, #0]
   1402c:	6859      	ldr	r1, [r3, #4]
   1402e:	3308      	adds	r3, #8
   14030:	c403      	stmia	r4!, {r0, r1}
   14032:	4293      	cmp	r3, r2
   14034:	4626      	mov	r6, r4
   14036:	d1f7      	bne.n	14028 <bt_init+0xd8>
	net_buf_unref(rsp);
   14038:	4660      	mov	r0, ip
   1403a:	f005 fd6b 	bl	19b14 <net_buf_unref>
		err = prng_init();
   1403e:	f000 ffb1 	bl	14fa4 <prng_init>
		if (err) {
   14042:	4604      	mov	r4, r0
   14044:	2800      	cmp	r0, #0
   14046:	d15f      	bne.n	14108 <bt_init+0x1b8>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   14048:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
   1404c:	069e      	lsls	r6, r3, #26
   1404e:	d426      	bmi.n	1409e <bt_init+0x14e>
		LOG_WRN("Controller to host flow control not supported");
   14050:	466c      	mov	r4, sp
   14052:	b088      	sub	sp, #32
   14054:	466a      	mov	r2, sp
   14056:	4b31      	ldr	r3, [pc, #196]	; (1411c <bt_init+0x1cc>)
   14058:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1405c:	6153      	str	r3, [r2, #20]
   1405e:	4b30      	ldr	r3, [pc, #192]	; (14120 <bt_init+0x1d0>)
   14060:	4830      	ldr	r0, [pc, #192]	; (14124 <bt_init+0x1d4>)
   14062:	6193      	str	r3, [r2, #24]
   14064:	2303      	movs	r3, #3
   14066:	f842 3f10 	str.w	r3, [r2, #16]!
   1406a:	f018 f812 	bl	2c092 <z_log_msg_static_create.constprop.0>
   1406e:	46a5      	mov	sp, r4
	if (!BT_FEAT_LE(bt_dev.features)) {
   14070:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   14074:	0658      	lsls	r0, r3, #25
   14076:	d45b      	bmi.n	14130 <bt_init+0x1e0>
		LOG_ERR("Non-LE capable controller detected!");
   14078:	466c      	mov	r4, sp
   1407a:	b088      	sub	sp, #32
   1407c:	466a      	mov	r2, sp
   1407e:	4b2a      	ldr	r3, [pc, #168]	; (14128 <bt_init+0x1d8>)
   14080:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14084:	6153      	str	r3, [r2, #20]
   14086:	4b29      	ldr	r3, [pc, #164]	; (1412c <bt_init+0x1dc>)
   14088:	4826      	ldr	r0, [pc, #152]	; (14124 <bt_init+0x1d4>)
   1408a:	6193      	str	r3, [r2, #24]
   1408c:	2303      	movs	r3, #3
   1408e:	f842 3f10 	str.w	r3, [r2, #16]!
   14092:	f017 fffe 	bl	2c092 <z_log_msg_static_create.constprop.0>
   14096:	46a5      	mov	sp, r4
		return -ENODEV;
   14098:	f06f 0412 	mvn.w	r4, #18
   1409c:	e034      	b.n	14108 <bt_init+0x1b8>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   1409e:	2107      	movs	r1, #7
   140a0:	f640 4033 	movw	r0, #3123	; 0xc33
   140a4:	f7ff f882 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   140a8:	4606      	mov	r6, r0
   140aa:	2800      	cmp	r0, #0
   140ac:	f000 80fa 	beq.w	142a4 <bt_init+0x354>
	return net_buf_simple_add(&buf->b, len);
   140b0:	2107      	movs	r1, #7
   140b2:	300c      	adds	r0, #12
   140b4:	f005 feb4 	bl	19e20 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   140b8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   140bc:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   140be:	2303      	movs	r3, #3
   140c0:	f8c0 4002 	str.w	r4, [r0, #2]
   140c4:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   140c6:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   140c8:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   140ca:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   140cc:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   140ce:	4631      	mov	r1, r6
   140d0:	f640 4033 	movw	r0, #3123	; 0xc33
   140d4:	f7ff f8b8 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   140d8:	4604      	mov	r4, r0
   140da:	b9a8      	cbnz	r0, 14108 <bt_init+0x1b8>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   140dc:	2101      	movs	r1, #1
   140de:	f640 4031 	movw	r0, #3121	; 0xc31
   140e2:	f7ff f863 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   140e6:	4606      	mov	r6, r0
   140e8:	2800      	cmp	r0, #0
   140ea:	f000 80db 	beq.w	142a4 <bt_init+0x354>
	return net_buf_simple_add_u8(&buf->b, val);
   140ee:	2101      	movs	r1, #1
   140f0:	300c      	adds	r0, #12
   140f2:	f019 fa6a 	bl	2d5ca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   140f6:	4622      	mov	r2, r4
   140f8:	4631      	mov	r1, r6
   140fa:	f640 4031 	movw	r0, #3121	; 0xc31
   140fe:	f7ff f8a3 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   14102:	4604      	mov	r4, r0
   14104:	2800      	cmp	r0, #0
   14106:	d0b3      	beq.n	14070 <bt_init+0x120>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   14108:	4620      	mov	r0, r4
   1410a:	3708      	adds	r7, #8
   1410c:	46bd      	mov	sp, r7
   1410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14112:	bf00      	nop
   14114:	2000c580 	.word	0x2000c580
   14118:	2000c5f8 	.word	0x2000c5f8
   1411c:	00035f6e 	.word	0x00035f6e
   14120:	000363f4 	.word	0x000363f4
   14124:	00031bb4 	.word	0x00031bb4
   14128:	00035fa0 	.word	0x00035fa0
   1412c:	000363ec 	.word	0x000363ec
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14130:	2100      	movs	r1, #0
   14132:	f242 0003 	movw	r0, #8195	; 0x2003
   14136:	1d3a      	adds	r2, r7, #4
   14138:	f7ff f886 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   1413c:	4604      	mov	r4, r0
   1413e:	2800      	cmp	r0, #0
   14140:	d1e2      	bne.n	14108 <bt_init+0x1b8>
	read_le_features_complete(rsp);
   14142:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14144:	4ec3      	ldr	r6, [pc, #780]	; (14454 <bt_init+0x504>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   14146:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14148:	f8d2 0001 	ldr.w	r0, [r2, #1]
   1414c:	f8d2 1005 	ldr.w	r1, [r2, #5]
   14150:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   14152:	4618      	mov	r0, r3
   14154:	f005 fcde 	bl	19b14 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14158:	4621      	mov	r1, r4
   1415a:	f242 0002 	movw	r0, #8194	; 0x2002
   1415e:	1d3a      	adds	r2, r7, #4
   14160:	f7ff f872 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   14164:	4604      	mov	r4, r0
   14166:	2800      	cmp	r0, #0
   14168:	d1ce      	bne.n	14108 <bt_init+0x1b8>
		le_read_buffer_size_complete(rsp);
   1416a:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1416c:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1416e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14172:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   14174:	b149      	cbz	r1, 1418a <bt_init+0x23a>
   14176:	78d9      	ldrb	r1, [r3, #3]
   14178:	b139      	cbz	r1, 1418a <bt_init+0x23a>
	bt_dev.le.acl_mtu = acl_mtu;
   1417a:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1417e:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14180:	4611      	mov	r1, r2
   14182:	f106 0028 	add.w	r0, r6, #40	; 0x28
   14186:	f01c f97f 	bl	30488 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1418a:	4620      	mov	r0, r4
   1418c:	f005 fcc2 	bl	19b14 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14190:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   14194:	f016 0620 	ands.w	r6, r6, #32
   14198:	d117      	bne.n	141ca <bt_init+0x27a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1419a:	2102      	movs	r1, #2
   1419c:	f640 406d 	movw	r0, #3181	; 0xc6d
   141a0:	f7ff f804 	bl	131ac <bt_hci_cmd_create>
		if (!buf) {
   141a4:	4604      	mov	r4, r0
   141a6:	2800      	cmp	r0, #0
   141a8:	d07c      	beq.n	142a4 <bt_init+0x354>
	return net_buf_simple_add(&buf->b, len);
   141aa:	2102      	movs	r1, #2
   141ac:	300c      	adds	r0, #12
   141ae:	f005 fe37 	bl	19e20 <net_buf_simple_add>
		cp_le->le = 0x01;
   141b2:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   141b4:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   141b6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   141b8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   141ba:	4632      	mov	r2, r6
   141bc:	f640 406d 	movw	r0, #3181	; 0xc6d
   141c0:	f7ff f842 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   141c4:	4604      	mov	r4, r0
   141c6:	2800      	cmp	r0, #0
   141c8:	d19e      	bne.n	14108 <bt_init+0x1b8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   141ca:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   141ce:	0719      	lsls	r1, r3, #28
   141d0:	d512      	bpl.n	141f8 <bt_init+0x2a8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   141d2:	2100      	movs	r1, #0
   141d4:	f242 001c 	movw	r0, #8220	; 0x201c
   141d8:	1d3a      	adds	r2, r7, #4
   141da:	f7ff f835 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   141de:	4604      	mov	r4, r0
   141e0:	2800      	cmp	r0, #0
   141e2:	d191      	bne.n	14108 <bt_init+0x1b8>
		le_read_supp_states_complete(rsp);
   141e4:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   141e6:	68c3      	ldr	r3, [r0, #12]
   141e8:	f8d3 2001 	ldr.w	r2, [r3, #1]
   141ec:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   141f0:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   141f4:	f005 fc8e 	bl	19b14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   141f8:	2108      	movs	r1, #8
   141fa:	f242 0001 	movw	r0, #8193	; 0x2001
   141fe:	f7fe ffd5 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   14202:	4604      	mov	r4, r0
   14204:	2800      	cmp	r0, #0
   14206:	d04d      	beq.n	142a4 <bt_init+0x354>
   14208:	2108      	movs	r1, #8
   1420a:	300c      	adds	r0, #12
   1420c:	f005 fe08 	bl	19e20 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14210:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14214:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   14218:	f013 0f02 	tst.w	r3, #2
   1421c:	bf14      	ite	ne
   1421e:	232f      	movne	r3, #47	; 0x2f
   14220:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14222:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   14226:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1422a:	bf18      	it	ne
   1422c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   14230:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14232:	0a1b      	lsrs	r3, r3, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14234:	4621      	mov	r1, r4
   14236:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14238:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1423a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1423c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1423e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14240:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14242:	71c2      	strb	r2, [r0, #7]
   14244:	f242 0001 	movw	r0, #8193	; 0x2001
   14248:	f7fe fffe 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   1424c:	4604      	mov	r4, r0
   1424e:	2800      	cmp	r0, #0
   14250:	f47f af5a 	bne.w	14108 <bt_init+0x1b8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14254:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   14258:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1425c:	069a      	lsls	r2, r3, #26
   1425e:	d424      	bmi.n	142aa <bt_init+0x35a>
	if (bt_dev.le.acl_mtu) {
   14260:	b9c9      	cbnz	r1, 14296 <bt_init+0x346>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14262:	f241 0005 	movw	r0, #4101	; 0x1005
   14266:	1d3a      	adds	r2, r7, #4
   14268:	f7fe ffee 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   1426c:	4604      	mov	r4, r0
   1426e:	2800      	cmp	r0, #0
   14270:	f47f af4a 	bne.w	14108 <bt_init+0x1b8>
	if (bt_dev.le.acl_mtu) {
   14274:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   14278:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
   1427a:	b94b      	cbnz	r3, 14290 <bt_init+0x340>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1427c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1427e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14282:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14286:	889a      	ldrh	r2, [r3, #4]
   14288:	4873      	ldr	r0, [pc, #460]	; (14458 <bt_init+0x508>)
   1428a:	4611      	mov	r1, r2
   1428c:	f01c f8fc 	bl	30488 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   14290:	4620      	mov	r0, r4
   14292:	f005 fc3f 	bl	19b14 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14296:	2108      	movs	r1, #8
   14298:	f640 4001 	movw	r0, #3073	; 0xc01
   1429c:	f7fe ff86 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   142a0:	4604      	mov	r4, r0
   142a2:	b9b8      	cbnz	r0, 142d4 <bt_init+0x384>
		return -ENOBUFS;
   142a4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   142a8:	e72e      	b.n	14108 <bt_init+0x1b8>
	else if (!bt_dev.le.acl_mtu) {
   142aa:	2900      	cmp	r1, #0
   142ac:	d1f3      	bne.n	14296 <bt_init+0x346>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   142ae:	466c      	mov	r4, sp
   142b0:	b088      	sub	sp, #32
   142b2:	466a      	mov	r2, sp
   142b4:	4b69      	ldr	r3, [pc, #420]	; (1445c <bt_init+0x50c>)
   142b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   142ba:	6153      	str	r3, [r2, #20]
   142bc:	4b68      	ldr	r3, [pc, #416]	; (14460 <bt_init+0x510>)
   142be:	4869      	ldr	r0, [pc, #420]	; (14464 <bt_init+0x514>)
   142c0:	6193      	str	r3, [r2, #24]
   142c2:	2303      	movs	r3, #3
   142c4:	f842 3f10 	str.w	r3, [r2, #16]!
   142c8:	f017 fee3 	bl	2c092 <z_log_msg_static_create.constprop.0>
   142cc:	46a5      	mov	sp, r4
		return -EIO;
   142ce:	f06f 0404 	mvn.w	r4, #4
   142d2:	e719      	b.n	14108 <bt_init+0x1b8>
   142d4:	2108      	movs	r1, #8
   142d6:	300c      	adds	r0, #12
   142d8:	f005 fda2 	bl	19e20 <net_buf_simple_add>
	dst[0] = val;
   142dc:	2310      	movs	r3, #16
   142de:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   142e0:	2388      	movs	r3, #136	; 0x88
   142e2:	7043      	strb	r3, [r0, #1]
   142e4:	2302      	movs	r3, #2
	dst[0] = val;
   142e6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   142e8:	70c3      	strb	r3, [r0, #3]
   142ea:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   142ec:	4621      	mov	r1, r4
	dst[0] = val;
   142ee:	7082      	strb	r2, [r0, #2]
   142f0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   142f2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   142f4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   142f6:	71c3      	strb	r3, [r0, #7]
   142f8:	f640 4001 	movw	r0, #3073	; 0xc01
   142fc:	f7fe ffa4 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   14300:	4604      	mov	r4, r0
   14302:	2800      	cmp	r0, #0
   14304:	f47f af00 	bne.w	14108 <bt_init+0x1b8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14308:	4601      	mov	r1, r0
   1430a:	1d3a      	adds	r2, r7, #4
   1430c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14310:	f7fe ff9a 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   14314:	4c54      	ldr	r4, [pc, #336]	; (14468 <bt_init+0x518>)
   14316:	b1e8      	cbz	r0, 14354 <bt_init+0x404>
		LOG_WRN("Vendor HCI extensions not available");
   14318:	466d      	mov	r5, sp
   1431a:	b088      	sub	sp, #32
   1431c:	466a      	mov	r2, sp
   1431e:	4b53      	ldr	r3, [pc, #332]	; (1446c <bt_init+0x51c>)
   14320:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14324:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14328:	2303      	movs	r3, #3
   1432a:	484e      	ldr	r0, [pc, #312]	; (14464 <bt_init+0x514>)
   1432c:	f842 3f10 	str.w	r3, [r2, #16]!
   14330:	f017 feaf 	bl	2c092 <z_log_msg_static_create.constprop.0>
   14334:	46ad      	mov	sp, r5
	err = bt_id_init();
   14336:	f000 fb5b 	bl	149f0 <bt_id_init>
	if (err) {
   1433a:	4604      	mov	r4, r0
   1433c:	2800      	cmp	r0, #0
   1433e:	f47f aee3 	bne.w	14108 <bt_init+0x1b8>
		err = bt_conn_init();
   14342:	f001 ff61 	bl	16208 <bt_conn_init>
		if (err) {
   14346:	4604      	mov	r4, r0
   14348:	2800      	cmp	r0, #0
   1434a:	f47f aedd 	bne.w	14108 <bt_init+0x1b8>
	bt_finalize_init();
   1434e:	f7ff fd59 	bl	13e04 <bt_finalize_init>
	return 0;
   14352:	e6d9      	b.n	14108 <bt_init+0x1b8>
	rp.info = (void *)rsp->data;
   14354:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   14356:	46e8      	mov	r8, sp
	rp.info = (void *)rsp->data;
   14358:	68de      	ldr	r6, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1435a:	b08a      	sub	sp, #40	; 0x28
   1435c:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   14360:	2b03      	cmp	r3, #3
		return plat_str[platform];
   14362:	bf96      	itet	ls
   14364:	4a42      	ldrls	r2, [pc, #264]	; (14470 <bt_init+0x520>)
	return "unknown";
   14366:	4943      	ldrhi	r1, [pc, #268]	; (14474 <bt_init+0x524>)
		return plat_str[platform];
   14368:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1436c:	466a      	mov	r2, sp
   1436e:	e9c2 1307 	strd	r1, r3, [r2, #28]
   14372:	f240 3301 	movw	r3, #769	; 0x301
   14376:	4840      	ldr	r0, [pc, #256]	; (14478 <bt_init+0x528>)
   14378:	8493      	strh	r3, [r2, #36]	; 0x24
   1437a:	4b40      	ldr	r3, [pc, #256]	; (1447c <bt_init+0x52c>)
   1437c:	e9c2 0405 	strd	r0, r4, [r2, #20]
   14380:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   14384:	f842 3f10 	str.w	r3, [r2, #16]!
   14388:	4836      	ldr	r0, [pc, #216]	; (14464 <bt_init+0x514>)
   1438a:	f017 fe82 	bl	2c092 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1438e:	f8b6 2001 	ldrh.w	r2, [r6, #1]
   14392:	46c5      	mov	sp, r8
   14394:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
   14396:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1439a:	d158      	bne.n	1444e <bt_init+0x4fe>
	if (variant < ARRAY_SIZE(nordic_str)) {
   1439c:	2b03      	cmp	r3, #3
   1439e:	d856      	bhi.n	1444e <bt_init+0x4fe>
		return nordic_str[variant];
   143a0:	4a37      	ldr	r2, [pc, #220]	; (14480 <bt_init+0x530>)
   143a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   143a6:	46e8      	mov	r8, sp
   143a8:	b08a      	sub	sp, #40	; 0x28
   143aa:	466a      	mov	r2, sp
   143ac:	e9c2 1307 	strd	r1, r3, [r2, #28]
   143b0:	f240 3301 	movw	r3, #769	; 0x301
   143b4:	4833      	ldr	r0, [pc, #204]	; (14484 <bt_init+0x534>)
   143b6:	8493      	strh	r3, [r2, #36]	; 0x24
   143b8:	4b30      	ldr	r3, [pc, #192]	; (1447c <bt_init+0x52c>)
   143ba:	e9c2 0405 	strd	r0, r4, [r2, #20]
   143be:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   143c2:	f842 3f10 	str.w	r3, [r2, #16]!
   143c6:	4827      	ldr	r0, [pc, #156]	; (14464 <bt_init+0x514>)
   143c8:	f017 fe63 	bl	2c092 <z_log_msg_static_create.constprop.0>
   143cc:	46c5      	mov	sp, r8
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   143ce:	7973      	ldrb	r3, [r6, #5]
   143d0:	f896 e006 	ldrb.w	lr, [r6, #6]
	if (variant < ARRAY_SIZE(var_str)) {
   143d4:	2b03      	cmp	r3, #3
		return var_str[variant];
   143d6:	bf98      	it	ls
   143d8:	4a2b      	ldrls	r2, [pc, #172]	; (14488 <bt_init+0x538>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   143da:	f8b6 c007 	ldrh.w	ip, [r6, #7]
   143de:	f8d6 0009 	ldr.w	r0, [r6, #9]
   143e2:	466e      	mov	r6, sp
   143e4:	b08e      	sub	sp, #56	; 0x38
		return var_str[variant];
   143e6:	bf94      	ite	ls
   143e8:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   143ec:	4921      	ldrhi	r1, [pc, #132]	; (14474 <bt_init+0x524>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   143ee:	466a      	mov	r2, sp
   143f0:	e9c2 1307 	strd	r1, r3, [r2, #28]
   143f4:	f240 3301 	movw	r3, #769	; 0x301
   143f8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1448c <bt_init+0x53c>
   143fc:	8613      	strh	r3, [r2, #48]	; 0x30
   143fe:	4b24      	ldr	r3, [pc, #144]	; (14490 <bt_init+0x540>)
   14400:	e9c2 8405 	strd	r8, r4, [r2, #20]
   14404:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
   14408:	62d0      	str	r0, [r2, #44]	; 0x2c
   1440a:	f244 41c0 	movw	r1, #17600	; 0x44c0
   1440e:	f842 3f10 	str.w	r3, [r2, #16]!
   14412:	4814      	ldr	r0, [pc, #80]	; (14464 <bt_init+0x514>)
   14414:	f017 fe3d 	bl	2c092 <z_log_msg_static_create.constprop.0>
   14418:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   1441a:	6878      	ldr	r0, [r7, #4]
   1441c:	f005 fb7a 	bl	19b14 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14420:	2100      	movs	r1, #0
   14422:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14426:	1d3a      	adds	r2, r7, #4
   14428:	f7fe ff0e 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   1442c:	4680      	mov	r8, r0
   1442e:	b398      	cbz	r0, 14498 <bt_init+0x548>
		LOG_WRN("Failed to read supported vendor commands");
   14430:	b088      	sub	sp, #32
   14432:	466a      	mov	r2, sp
   14434:	4b17      	ldr	r3, [pc, #92]	; (14494 <bt_init+0x544>)
			LOG_WRN("Failed to read supported vendor features");
   14436:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1443a:	2303      	movs	r3, #3
   1443c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14440:	4808      	ldr	r0, [pc, #32]	; (14464 <bt_init+0x514>)
   14442:	f842 3f10 	str.w	r3, [r2, #16]!
   14446:	f017 fe24 	bl	2c092 <z_log_msg_static_create.constprop.0>
   1444a:	46b5      	mov	sp, r6
			return;
   1444c:	e773      	b.n	14336 <bt_init+0x3e6>
		return "unknown";
   1444e:	4909      	ldr	r1, [pc, #36]	; (14474 <bt_init+0x524>)
   14450:	e7a9      	b.n	143a6 <bt_init+0x456>
   14452:	bf00      	nop
   14454:	2000c658 	.word	0x2000c658
   14458:	2000c688 	.word	0x2000c688
   1445c:	00035fc8 	.word	0x00035fc8
   14460:	00036405 	.word	0x00036405
   14464:	00031bb4 	.word	0x00031bb4
   14468:	000363e0 	.word	0x000363e0
   1446c:	00035fef 	.word	0x00035fef
   14470:	0003215c 	.word	0x0003215c
   14474:	000359f0 	.word	0x000359f0
   14478:	00036017 	.word	0x00036017
   1447c:	01000005 	.word	0x01000005
   14480:	0003214c 	.word	0x0003214c
   14484:	00036034 	.word	0x00036034
   14488:	0003213c 	.word	0x0003213c
   1448c:	00036050 	.word	0x00036050
   14490:	01000008 	.word	0x01000008
   14494:	00036081 	.word	0x00036081
	rp.cmds = (void *)rsp->data;
   14498:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1449a:	68c3      	ldr	r3, [r0, #12]
   1449c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   144a0:	f8a5 30c1 	strh.w	r3, [r5, #193]	; 0xc1
	net_buf_unref(rsp);
   144a4:	f005 fb36 	bl	19b14 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   144a8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   144ac:	075b      	lsls	r3, r3, #29
   144ae:	f57f af42 	bpl.w	14336 <bt_init+0x3e6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   144b2:	4641      	mov	r1, r8
   144b4:	f64f 4003 	movw	r0, #64515	; 0xfc03
   144b8:	1d3a      	adds	r2, r7, #4
   144ba:	f7fe fec5 	bl	13248 <bt_hci_cmd_send_sync>
		if (err) {
   144be:	b118      	cbz	r0, 144c8 <bt_init+0x578>
			LOG_WRN("Failed to read supported vendor features");
   144c0:	b088      	sub	sp, #32
   144c2:	466a      	mov	r2, sp
   144c4:	4b04      	ldr	r3, [pc, #16]	; (144d8 <bt_init+0x588>)
   144c6:	e7b6      	b.n	14436 <bt_init+0x4e6>
		rp.feat = (void *)rsp->data;
   144c8:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   144ca:	68c3      	ldr	r3, [r0, #12]
   144cc:	785b      	ldrb	r3, [r3, #1]
   144ce:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(rsp);
   144d2:	f005 fb1f 	bl	19b14 <net_buf_unref>
   144d6:	e72e      	b.n	14336 <bt_init+0x3e6>
   144d8:	000360ae 	.word	0x000360ae

000144dc <init_work>:

static void init_work(struct k_work *work)
{
   144dc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   144de:	f7ff fd37 	bl	13f50 <bt_init>
	if (ready_cb) {
   144e2:	4b03      	ldr	r3, [pc, #12]	; (144f0 <init_work+0x14>)
   144e4:	681b      	ldr	r3, [r3, #0]
   144e6:	b113      	cbz	r3, 144ee <init_work+0x12>
		ready_cb(err);
	}
}
   144e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   144ec:	4718      	bx	r3
}
   144ee:	bd10      	pop	{r4, pc}
   144f0:	2000e330 	.word	0x2000e330

000144f4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144f6:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
   144f8:	4d37      	ldr	r5, [pc, #220]	; (145d8 <bt_enable+0xe4>)
{
   144fa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   144fc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
   14500:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   14502:	b9ab      	cbnz	r3, 14530 <bt_enable+0x3c>
		LOG_ERR("No HCI driver registered");
   14504:	466c      	mov	r4, sp
   14506:	b088      	sub	sp, #32
   14508:	4622      	mov	r2, r4
   1450a:	4b34      	ldr	r3, [pc, #208]	; (145dc <bt_enable+0xe8>)
   1450c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14510:	6163      	str	r3, [r4, #20]
   14512:	4b33      	ldr	r3, [pc, #204]	; (145e0 <bt_enable+0xec>)
   14514:	4833      	ldr	r0, [pc, #204]	; (145e4 <bt_enable+0xf0>)
   14516:	61a3      	str	r3, [r4, #24]
   14518:	2303      	movs	r3, #3
   1451a:	f842 3f10 	str.w	r3, [r2, #16]!
   1451e:	f017 fdb8 	bl	2c092 <z_log_msg_static_create.constprop.0>
   14522:	46a5      	mov	sp, r4
		return -ENODEV;
   14524:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   14528:	4620      	mov	r0, r4
   1452a:	3704      	adds	r7, #4
   1452c:	46bd      	mov	sp, r7
   1452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14530:	f06f 0102 	mvn.w	r1, #2
   14534:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   14538:	f017 fdae 	bl	2c098 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1453c:	2101      	movs	r1, #1
   1453e:	f017 fd91 	bl	2c064 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14542:	ea10 0401 	ands.w	r4, r0, r1
   14546:	d143      	bne.n	145d0 <bt_enable+0xdc>
	ready_cb = cb;
   14548:	4b27      	ldr	r3, [pc, #156]	; (145e8 <bt_enable+0xf4>)
   1454a:	601e      	str	r6, [r3, #0]
   1454c:	460a      	mov	r2, r1
   1454e:	f505 7090 	add.w	r0, r5, #288	; 0x120
   14552:	4621      	mov	r1, r4
   14554:	f01b ff98 	bl	30488 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   14558:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   1455c:	f01b ff6e 	bl	3043c <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14560:	2200      	movs	r2, #0
   14562:	2300      	movs	r3, #0
   14564:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14568:	f06f 0308 	mvn.w	r3, #8
   1456c:	f44f 7200 	mov.w	r2, #512	; 0x200
   14570:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14574:	e9cd 4400 	strd	r4, r4, [sp]
   14578:	4b1c      	ldr	r3, [pc, #112]	; (145ec <bt_enable+0xf8>)
   1457a:	491d      	ldr	r1, [pc, #116]	; (145f0 <bt_enable+0xfc>)
   1457c:	9404      	str	r4, [sp, #16]
   1457e:	481d      	ldr	r0, [pc, #116]	; (145f4 <bt_enable+0x100>)
   14580:	f010 fa84 	bl	24a8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14584:	491c      	ldr	r1, [pc, #112]	; (145f8 <bt_enable+0x104>)
   14586:	481b      	ldr	r0, [pc, #108]	; (145f4 <bt_enable+0x100>)
   14588:	f01b ff2f 	bl	303ea <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1458c:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   14590:	68db      	ldr	r3, [r3, #12]
   14592:	4798      	blx	r3
	if (err) {
   14594:	4604      	mov	r4, r0
   14596:	b188      	cbz	r0, 145bc <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   14598:	466d      	mov	r5, sp
   1459a:	b088      	sub	sp, #32
   1459c:	462a      	mov	r2, r5
   1459e:	4b17      	ldr	r3, [pc, #92]	; (145fc <bt_enable+0x108>)
   145a0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   145a4:	616b      	str	r3, [r5, #20]
   145a6:	4b0e      	ldr	r3, [pc, #56]	; (145e0 <bt_enable+0xec>)
   145a8:	e9c5 3006 	strd	r3, r0, [r5, #24]
   145ac:	2304      	movs	r3, #4
   145ae:	480d      	ldr	r0, [pc, #52]	; (145e4 <bt_enable+0xf0>)
   145b0:	f842 3f10 	str.w	r3, [r2, #16]!
   145b4:	f017 fd6d 	bl	2c092 <z_log_msg_static_create.constprop.0>
   145b8:	46ad      	mov	sp, r5
		return err;
   145ba:	e7b5      	b.n	14528 <bt_enable+0x34>
	if (!cb) {
   145bc:	b91e      	cbnz	r6, 145c6 <bt_enable+0xd2>
		return bt_init();
   145be:	f7ff fcc7 	bl	13f50 <bt_init>
   145c2:	4604      	mov	r4, r0
   145c4:	e7b0      	b.n	14528 <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   145c6:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   145ca:	f011 f94f 	bl	2586c <k_work_submit>
	return 0;
   145ce:	e7ab      	b.n	14528 <bt_enable+0x34>
		return -EALREADY;
   145d0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   145d4:	e7a8      	b.n	14528 <bt_enable+0x34>
   145d6:	bf00      	nop
   145d8:	2000c580 	.word	0x2000c580
   145dc:	000360db 	.word	0x000360db
   145e0:	0003613d 	.word	0x0003613d
   145e4:	00031bb4 	.word	0x00031bb4
   145e8:	2000e330 	.word	0x2000e330
   145ec:	000139d5 	.word	0x000139d5
   145f0:	200111a8 	.word	0x200111a8
   145f4:	2000d730 	.word	0x2000d730
   145f8:	000360f8 	.word	0x000360f8
   145fc:	000360fe 	.word	0x000360fe

00014600 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14600:	4b02      	ldr	r3, [pc, #8]	; (1460c <bt_is_ready+0xc>)
   14602:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   14606:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1460a:	4770      	bx	lr
   1460c:	2000c654 	.word	0x2000c654

00014610 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14610:	4800      	ldr	r0, [pc, #0]	; (14614 <bt_get_name+0x4>)
   14612:	4770      	bx	lr
   14614:	0003611e 	.word	0x0003611e

00014618 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1461a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1461c:	2400      	movs	r4, #0
   1461e:	4d09      	ldr	r5, [pc, #36]	; (14644 <id_find+0x2c>)
   14620:	79ef      	ldrb	r7, [r5, #7]
   14622:	b2e3      	uxtb	r3, r4
   14624:	429f      	cmp	r7, r3
   14626:	d802      	bhi.n	1462e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14628:	f06f 0001 	mvn.w	r0, #1
   1462c:	e007      	b.n	1463e <id_find+0x26>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1462e:	4629      	mov	r1, r5
   14630:	4630      	mov	r0, r6
   14632:	f017 fdbf 	bl	2c1b4 <bt_addr_le_eq>
   14636:	3507      	adds	r5, #7
   14638:	1c63      	adds	r3, r4, #1
   1463a:	b108      	cbz	r0, 14640 <id_find+0x28>
   1463c:	4620      	mov	r0, r4
}
   1463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14640:	461c      	mov	r4, r3
   14642:	e7ee      	b.n	14622 <id_find+0xa>
   14644:	2000c580 	.word	0x2000c580

00014648 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1464a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1464c:	460d      	mov	r5, r1
   1464e:	b171      	cbz	r1, 1466e <id_create.constprop.0+0x26>
   14650:	4628      	mov	r0, r5
   14652:	4912      	ldr	r1, [pc, #72]	; (1469c <id_create.constprop.0+0x54>)
   14654:	f017 fdae 	bl	2c1b4 <bt_addr_le_eq>
   14658:	b948      	cbnz	r0, 1466e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1465a:	4629      	mov	r1, r5
   1465c:	4810      	ldr	r0, [pc, #64]	; (146a0 <id_create.constprop.0+0x58>)
   1465e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14662:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14664:	f017 fdb3 	bl	2c1ce <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14668:	2000      	movs	r0, #0
}
   1466a:	b003      	add	sp, #12
   1466c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1466e:	4668      	mov	r0, sp
   14670:	f017 fcc8 	bl	2c004 <bt_addr_le_create_static>
			if (err) {
   14674:	2800      	cmp	r0, #0
   14676:	d1f8      	bne.n	1466a <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   14678:	4668      	mov	r0, sp
   1467a:	f7ff ffcd 	bl	14618 <id_find>
   1467e:	2800      	cmp	r0, #0
   14680:	daf5      	bge.n	1466e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14682:	4b07      	ldr	r3, [pc, #28]	; (146a0 <id_create.constprop.0+0x58>)
   14684:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   14688:	4669      	mov	r1, sp
   1468a:	4418      	add	r0, r3
   1468c:	f017 fd9f 	bl	2c1ce <bt_addr_le_copy>
		if (addr) {
   14690:	2d00      	cmp	r5, #0
   14692:	d0e9      	beq.n	14668 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14694:	4601      	mov	r1, r0
   14696:	4628      	mov	r0, r5
   14698:	e7e4      	b.n	14664 <id_create.constprop.0+0x1c>
   1469a:	bf00      	nop
   1469c:	000358c4 	.word	0x000358c4
   146a0:	2000c580 	.word	0x2000c580

000146a4 <set_random_address>:
{
   146a4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   146a6:	2206      	movs	r2, #6
   146a8:	4911      	ldr	r1, [pc, #68]	; (146f0 <set_random_address+0x4c>)
   146aa:	4605      	mov	r5, r0
   146ac:	f01c f8b9 	bl	30822 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   146b0:	b1c8      	cbz	r0, 146e6 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   146b2:	2106      	movs	r1, #6
   146b4:	f242 0005 	movw	r0, #8197	; 0x2005
   146b8:	f7fe fd78 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   146bc:	4604      	mov	r4, r0
   146be:	b1a0      	cbz	r0, 146ea <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   146c0:	2206      	movs	r2, #6
   146c2:	4629      	mov	r1, r5
   146c4:	300c      	adds	r0, #12
   146c6:	f018 ff74 	bl	2d5b2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   146ca:	2200      	movs	r2, #0
   146cc:	4621      	mov	r1, r4
   146ce:	f242 0005 	movw	r0, #8197	; 0x2005
   146d2:	f7fe fdb9 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   146d6:	b938      	cbnz	r0, 146e8 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   146d8:	4805      	ldr	r0, [pc, #20]	; (146f0 <set_random_address+0x4c>)
   146da:	4629      	mov	r1, r5
   146dc:	f017 fd72 	bl	2c1c4 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   146e0:	2301      	movs	r3, #1
   146e2:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   146e6:	2000      	movs	r0, #0
}
   146e8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   146ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   146ee:	e7fb      	b.n	146e8 <set_random_address+0x44>
   146f0:	2000c5e9 	.word	0x2000c5e9

000146f4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   146f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146f6:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   146f8:	4604      	mov	r4, r0
{
   146fa:	af00      	add	r7, sp, #0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   146fc:	b320      	cbz	r0, 14748 <bt_id_create+0x54>
   146fe:	4925      	ldr	r1, [pc, #148]	; (14794 <bt_id_create+0xa0>)
   14700:	f017 fd58 	bl	2c1b4 <bt_addr_le_eq>
   14704:	bb00      	cbnz	r0, 14748 <bt_id_create+0x54>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14706:	7823      	ldrb	r3, [r4, #0]
   14708:	2b01      	cmp	r3, #1
   1470a:	d104      	bne.n	14716 <bt_id_create+0x22>
   1470c:	79a3      	ldrb	r3, [r4, #6]
   1470e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14712:	2bc0      	cmp	r3, #192	; 0xc0
   14714:	d013      	beq.n	1473e <bt_id_create+0x4a>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
			LOG_ERR("Only static random identity address supported");
   14716:	466c      	mov	r4, sp
   14718:	b088      	sub	sp, #32
   1471a:	466a      	mov	r2, sp
   1471c:	4b1e      	ldr	r3, [pc, #120]	; (14798 <bt_id_create+0xa4>)
   1471e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14722:	6153      	str	r3, [r2, #20]
   14724:	4b1d      	ldr	r3, [pc, #116]	; (1479c <bt_id_create+0xa8>)
   14726:	481e      	ldr	r0, [pc, #120]	; (147a0 <bt_id_create+0xac>)
   14728:	6193      	str	r3, [r2, #24]
   1472a:	2303      	movs	r3, #3
   1472c:	f842 3f10 	str.w	r3, [r2, #16]!
   14730:	f017 fd54 	bl	2c1dc <z_log_msg_static_create.constprop.0>
   14734:	46a5      	mov	sp, r4
			return -EINVAL;
   14736:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1473a:	46bd      	mov	sp, r7
   1473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id_find(addr) >= 0) {
   1473e:	4620      	mov	r0, r4
   14740:	f7ff ff6a 	bl	14618 <id_find>
   14744:	2800      	cmp	r0, #0
   14746:	da1f      	bge.n	14788 <bt_id_create+0x94>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14748:	2d00      	cmp	r5, #0
   1474a:	d1f4      	bne.n	14736 <bt_id_create+0x42>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1474c:	4d15      	ldr	r5, [pc, #84]	; (147a4 <bt_id_create+0xb0>)
   1474e:	79eb      	ldrb	r3, [r5, #7]
   14750:	2b01      	cmp	r3, #1
   14752:	d01c      	beq.n	1478e <bt_id_create+0x9a>
   14754:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
   14758:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1475c:	07db      	lsls	r3, r3, #31
   1475e:	d407      	bmi.n	14770 <bt_id_create+0x7c>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   14760:	2c00      	cmp	r4, #0
   14762:	d0e8      	beq.n	14736 <bt_id_create+0x42>
   14764:	4620      	mov	r0, r4
   14766:	490b      	ldr	r1, [pc, #44]	; (14794 <bt_id_create+0xa0>)
   14768:	f017 fd24 	bl	2c1b4 <bt_addr_le_eq>
   1476c:	2800      	cmp	r0, #0
   1476e:	d1e2      	bne.n	14736 <bt_id_create+0x42>
	new_id = bt_dev.id_count;
   14770:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   14772:	4621      	mov	r1, r4
   14774:	4630      	mov	r0, r6
   14776:	f7ff ff67 	bl	14648 <id_create.constprop.0>
	if (err) {
   1477a:	2800      	cmp	r0, #0
   1477c:	d1dd      	bne.n	1473a <bt_id_create+0x46>
		bt_dev.id_count++;
   1477e:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   14780:	4630      	mov	r0, r6
		bt_dev.id_count++;
   14782:	3301      	adds	r3, #1
   14784:	71eb      	strb	r3, [r5, #7]
	return new_id;
   14786:	e7d8      	b.n	1473a <bt_id_create+0x46>
			return -EALREADY;
   14788:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1478c:	e7d5      	b.n	1473a <bt_id_create+0x46>
		return -ENOMEM;
   1478e:	f06f 000b 	mvn.w	r0, #11
   14792:	e7d2      	b.n	1473a <bt_id_create+0x46>
   14794:	000358c4 	.word	0x000358c4
   14798:	0003640e 	.word	0x0003640e
   1479c:	0003657a 	.word	0x0003657a
   147a0:	00031bc4 	.word	0x00031bc4
   147a4:	2000c580 	.word	0x2000c580

000147a8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   147a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147ac:	b082      	sub	sp, #8
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   147ae:	4604      	mov	r4, r0
{
   147b0:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   147b2:	b9a0      	cbnz	r0, 147de <bt_id_read_public_addr+0x36>
		LOG_WRN("Invalid input parameters");
   147b4:	466c      	mov	r4, sp
   147b6:	b088      	sub	sp, #32
   147b8:	466a      	mov	r2, sp
   147ba:	4b1f      	ldr	r3, [pc, #124]	; (14838 <bt_id_read_public_addr+0x90>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   147bc:	6153      	str	r3, [r2, #20]
   147be:	4b1f      	ldr	r3, [pc, #124]	; (1483c <bt_id_read_public_addr+0x94>)
   147c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   147c4:	6193      	str	r3, [r2, #24]
   147c6:	2303      	movs	r3, #3
   147c8:	481d      	ldr	r0, [pc, #116]	; (14840 <bt_id_read_public_addr+0x98>)
   147ca:	f842 3f10 	str.w	r3, [r2, #16]!
   147ce:	f017 fd05 	bl	2c1dc <z_log_msg_static_create.constprop.0>
   147d2:	46a5      	mov	sp, r4
		return 0U;
   147d4:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   147d6:	3708      	adds	r7, #8
   147d8:	46bd      	mov	sp, r7
   147da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   147de:	2100      	movs	r1, #0
   147e0:	f241 0009 	movw	r0, #4105	; 0x1009
   147e4:	1d3a      	adds	r2, r7, #4
   147e6:	f7fe fd2f 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   147ea:	4606      	mov	r6, r0
   147ec:	b120      	cbz	r0, 147f8 <bt_id_read_public_addr+0x50>
		LOG_WRN("Failed to read public address");
   147ee:	466c      	mov	r4, sp
   147f0:	b088      	sub	sp, #32
   147f2:	466a      	mov	r2, sp
   147f4:	4b13      	ldr	r3, [pc, #76]	; (14844 <bt_id_read_public_addr+0x9c>)
   147f6:	e7e1      	b.n	147bc <bt_id_read_public_addr+0x14>
	rp = (void *)rsp->data;
   147f8:	f8d7 8004 	ldr.w	r8, [r7, #4]
   147fc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   147fe:	f8d8 500c 	ldr.w	r5, [r8, #12]
   14802:	4911      	ldr	r1, [pc, #68]	; (14848 <bt_id_read_public_addr+0xa0>)
   14804:	3501      	adds	r5, #1
   14806:	4628      	mov	r0, r5
   14808:	f01c f80b 	bl	30822 <memcmp>
   1480c:	b128      	cbz	r0, 1481a <bt_id_read_public_addr+0x72>
   1480e:	2206      	movs	r2, #6
   14810:	4628      	mov	r0, r5
   14812:	490e      	ldr	r1, [pc, #56]	; (1484c <bt_id_read_public_addr+0xa4>)
   14814:	f01c f805 	bl	30822 <memcmp>
   14818:	b918      	cbnz	r0, 14822 <bt_id_read_public_addr+0x7a>
		net_buf_unref(rsp);
   1481a:	4640      	mov	r0, r8
   1481c:	f005 f97a 	bl	19b14 <net_buf_unref>
		return 0U;
   14820:	e7d8      	b.n	147d4 <bt_id_read_public_addr+0x2c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   14822:	4629      	mov	r1, r5
   14824:	1c60      	adds	r0, r4, #1
   14826:	f017 fccd 	bl	2c1c4 <bt_addr_copy>
	net_buf_unref(rsp);
   1482a:	4640      	mov	r0, r8
	addr->type = BT_ADDR_LE_PUBLIC;
   1482c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1482e:	f005 f971 	bl	19b14 <net_buf_unref>
	return 1U;
   14832:	2001      	movs	r0, #1
   14834:	e7cf      	b.n	147d6 <bt_id_read_public_addr+0x2e>
   14836:	bf00      	nop
   14838:	00036440 	.word	0x00036440
   1483c:	00036563 	.word	0x00036563
   14840:	00031bc4 	.word	0x00031bc4
   14844:	0003645d 	.word	0x0003645d
   14848:	000358d1 	.word	0x000358d1
   1484c:	000358cb 	.word	0x000358cb

00014850 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14850:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14852:	4668      	mov	r0, sp
   14854:	f7ff ffa8 	bl	147a8 <bt_id_read_public_addr>
   14858:	4b04      	ldr	r3, [pc, #16]	; (1486c <bt_setup_public_id_addr+0x1c>)
   1485a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1485c:	b118      	cbz	r0, 14866 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1485e:	4669      	mov	r1, sp
   14860:	2000      	movs	r0, #0
   14862:	f7ff fef1 	bl	14648 <id_create.constprop.0>
}
   14866:	b003      	add	sp, #12
   14868:	f85d fb04 	ldr.w	pc, [sp], #4
   1486c:	2000c580 	.word	0x2000c580

00014870 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14874:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14876:	4b2d      	ldr	r3, [pc, #180]	; (1492c <bt_read_static_addr+0xbc>)
{
   14878:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1487a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
   1487e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14880:	07db      	lsls	r3, r3, #31
{
   14882:	af00      	add	r7, sp, #0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14884:	d415      	bmi.n	148b2 <bt_read_static_addr+0x42>
		LOG_WRN("Read Static Addresses command not available");
   14886:	466c      	mov	r4, sp
   14888:	b088      	sub	sp, #32
   1488a:	466a      	mov	r2, sp
   1488c:	4b28      	ldr	r3, [pc, #160]	; (14930 <bt_read_static_addr+0xc0>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1488e:	6153      	str	r3, [r2, #20]
   14890:	4b28      	ldr	r3, [pc, #160]	; (14934 <bt_read_static_addr+0xc4>)
   14892:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14896:	6193      	str	r3, [r2, #24]
   14898:	2303      	movs	r3, #3
   1489a:	4827      	ldr	r0, [pc, #156]	; (14938 <bt_read_static_addr+0xc8>)
   1489c:	f842 3f10 	str.w	r3, [r2, #16]!
   148a0:	f017 fc9c 	bl	2c1dc <z_log_msg_static_create.constprop.0>
   148a4:	46a5      	mov	sp, r4
		return 0;
   148a6:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   148a8:	4620      	mov	r0, r4
   148aa:	3708      	adds	r7, #8
   148ac:	46bd      	mov	sp, r7
   148ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   148b2:	2100      	movs	r1, #0
   148b4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   148b8:	1d3a      	adds	r2, r7, #4
   148ba:	f7fe fcc5 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   148be:	4603      	mov	r3, r0
   148c0:	b120      	cbz	r0, 148cc <bt_read_static_addr+0x5c>
		LOG_WRN("Failed to read static addresses");
   148c2:	466c      	mov	r4, sp
   148c4:	b088      	sub	sp, #32
   148c6:	466a      	mov	r2, sp
   148c8:	4b1c      	ldr	r3, [pc, #112]	; (1493c <bt_read_static_addr+0xcc>)
   148ca:	e7e0      	b.n	1488e <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   148cc:	6878      	ldr	r0, [r7, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   148ce:	f04f 0c16 	mov.w	ip, #22
	rp = (void *)rsp->data;
   148d2:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   148d4:	7854      	ldrb	r4, [r2, #1]
   148d6:	3202      	adds	r2, #2
   148d8:	42b4      	cmp	r4, r6
   148da:	bf28      	it	cs
   148dc:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   148de:	429c      	cmp	r4, r3
   148e0:	dc14      	bgt.n	1490c <bt_read_static_addr+0x9c>
	net_buf_unref(rsp);
   148e2:	f005 f917 	bl	19b14 <net_buf_unref>
	if (!cnt) {
   148e6:	2c00      	cmp	r4, #0
   148e8:	d1de      	bne.n	148a8 <bt_read_static_addr+0x38>
		LOG_WRN("No static addresses stored in controller");
   148ea:	466d      	mov	r5, sp
   148ec:	b088      	sub	sp, #32
   148ee:	466a      	mov	r2, sp
   148f0:	4b13      	ldr	r3, [pc, #76]	; (14940 <bt_read_static_addr+0xd0>)
   148f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   148f6:	6153      	str	r3, [r2, #20]
   148f8:	4b0e      	ldr	r3, [pc, #56]	; (14934 <bt_read_static_addr+0xc4>)
   148fa:	480f      	ldr	r0, [pc, #60]	; (14938 <bt_read_static_addr+0xc8>)
   148fc:	6193      	str	r3, [r2, #24]
   148fe:	2303      	movs	r3, #3
   14900:	f842 3f10 	str.w	r3, [r2, #16]!
   14904:	f017 fc6a 	bl	2c1dc <z_log_msg_static_create.constprop.0>
   14908:	46ad      	mov	sp, r5
   1490a:	e7cd      	b.n	148a8 <bt_read_static_addr+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1490c:	4611      	mov	r1, r2
   1490e:	fb0c 5603 	mla	r6, ip, r3, r5
   14912:	f102 0e14 	add.w	lr, r2, #20
   14916:	f851 8b04 	ldr.w	r8, [r1], #4
   1491a:	4571      	cmp	r1, lr
   1491c:	f846 8b04 	str.w	r8, [r6], #4
   14920:	d1f9      	bne.n	14916 <bt_read_static_addr+0xa6>
   14922:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   14924:	3301      	adds	r3, #1
   14926:	8031      	strh	r1, [r6, #0]
   14928:	3216      	adds	r2, #22
   1492a:	e7d8      	b.n	148de <bt_read_static_addr+0x6e>
   1492c:	2000c580 	.word	0x2000c580
   14930:	0003647f 	.word	0x0003647f
   14934:	0003654f 	.word	0x0003654f
   14938:	00031bc4 	.word	0x00031bc4
   1493c:	000364af 	.word	0x000364af
   14940:	000364d3 	.word	0x000364d3

00014944 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14944:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14946:	4d15      	ldr	r5, [pc, #84]	; (1499c <bt_setup_random_id_addr+0x58>)
{
   14948:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1494a:	79ec      	ldrb	r4, [r5, #7]
   1494c:	b92c      	cbnz	r4, 1495a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1494e:	2101      	movs	r1, #1
   14950:	a802      	add	r0, sp, #8
   14952:	f7ff ff8d 	bl	14870 <bt_read_static_addr>
   14956:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   14958:	b9c0      	cbnz	r0, 1498c <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1495a:	2100      	movs	r1, #0
   1495c:	4608      	mov	r0, r1
}
   1495e:	b008      	add	sp, #32
   14960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   14964:	f7ff bec6 	b.w	146f4 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14968:	ab02      	add	r3, sp, #8
   1496a:	fb06 3102 	mla	r1, r6, r2, r3
   1496e:	f10d 0001 	add.w	r0, sp, #1
   14972:	f017 fc27 	bl	2c1c4 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   14976:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   14978:	4669      	mov	r1, sp
   1497a:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1497c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14980:	f7ff fe62 	bl	14648 <id_create.constprop.0>
				if (err) {
   14984:	3401      	adds	r4, #1
   14986:	b110      	cbz	r0, 1498e <bt_setup_random_id_addr+0x4a>
}
   14988:	b008      	add	sp, #32
   1498a:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1498c:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1498e:	79eb      	ldrb	r3, [r5, #7]
   14990:	b2e2      	uxtb	r2, r4
   14992:	4293      	cmp	r3, r2
   14994:	d8e8      	bhi.n	14968 <bt_setup_random_id_addr+0x24>
			return 0;
   14996:	2000      	movs	r0, #0
   14998:	e7f6      	b.n	14988 <bt_setup_random_id_addr+0x44>
   1499a:	bf00      	nop
   1499c:	2000c580 	.word	0x2000c580

000149a0 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   149a0:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   149a2:	460c      	mov	r4, r1
   149a4:	b169      	cbz	r1, 149c2 <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   149a6:	4d08      	ldr	r5, [pc, #32]	; (149c8 <bt_id_set_create_conn_own_addr+0x28>)
   149a8:	782b      	ldrb	r3, [r5, #0]
   149aa:	2b01      	cmp	r3, #1
   149ac:	d003      	beq.n	149b6 <bt_id_set_create_conn_own_addr+0x16>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   149ae:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   149b0:	782b      	ldrb	r3, [r5, #0]
   149b2:	7023      	strb	r3, [r4, #0]
}
   149b4:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   149b6:	1c68      	adds	r0, r5, #1
   149b8:	f7ff fe74 	bl	146a4 <set_random_address>
			if (err) {
   149bc:	2800      	cmp	r0, #0
   149be:	d0f6      	beq.n	149ae <bt_id_set_create_conn_own_addr+0xe>
   149c0:	e7f8      	b.n	149b4 <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   149c2:	f06f 0015 	mvn.w	r0, #21
   149c6:	e7f5      	b.n	149b4 <bt_id_set_create_conn_own_addr+0x14>
   149c8:	2000c580 	.word	0x2000c580

000149cc <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   149cc:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   149ce:	460c      	mov	r4, r1
   149d0:	b149      	cbz	r1, 149e6 <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   149d2:	4b06      	ldr	r3, [pc, #24]	; (149ec <bt_id_set_scan_own_addr+0x20>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   149d4:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   149d6:	781b      	ldrb	r3, [r3, #0]
   149d8:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   149da:	f017 fc07 	bl	2c1ec <bt_id_set_private_addr>
			if (err) {
   149de:	b908      	cbnz	r0, 149e4 <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   149e0:	2301      	movs	r3, #1
   149e2:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
   149e4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   149e6:	f06f 0015 	mvn.w	r0, #21
   149ea:	e7fb      	b.n	149e4 <bt_id_set_scan_own_addr+0x18>
   149ec:	2000c580 	.word	0x2000c580

000149f0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   149f0:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   149f2:	4d18      	ldr	r5, [pc, #96]	; (14a54 <bt_id_init+0x64>)
{
   149f4:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   149f6:	79eb      	ldrb	r3, [r5, #7]
   149f8:	b11b      	cbz	r3, 14a02 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   149fa:	2400      	movs	r4, #0
}
   149fc:	4620      	mov	r0, r4
   149fe:	46bd      	mov	sp, r7
   14a00:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_setup_public_id_addr();
   14a02:	f7ff ff25 	bl	14850 <bt_setup_public_id_addr>
		if (err) {
   14a06:	4604      	mov	r4, r0
   14a08:	b180      	cbz	r0, 14a2c <bt_id_init+0x3c>
			LOG_ERR("Unable to set identity address");
   14a0a:	466d      	mov	r5, sp
   14a0c:	b088      	sub	sp, #32
   14a0e:	466a      	mov	r2, sp
   14a10:	4b11      	ldr	r3, [pc, #68]	; (14a58 <bt_id_init+0x68>)
			LOG_ERR("Unable to set random address");
   14a12:	6153      	str	r3, [r2, #20]
   14a14:	4b11      	ldr	r3, [pc, #68]	; (14a5c <bt_id_init+0x6c>)
   14a16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a1a:	6193      	str	r3, [r2, #24]
   14a1c:	2303      	movs	r3, #3
   14a1e:	4810      	ldr	r0, [pc, #64]	; (14a60 <bt_id_init+0x70>)
   14a20:	f842 3f10 	str.w	r3, [r2, #16]!
   14a24:	f017 fbda 	bl	2c1dc <z_log_msg_static_create.constprop.0>
   14a28:	46ad      	mov	sp, r5
			return err;
   14a2a:	e7e7      	b.n	149fc <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14a2c:	79eb      	ldrb	r3, [r5, #7]
   14a2e:	2b00      	cmp	r3, #0
   14a30:	d1e3      	bne.n	149fa <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   14a32:	f7ff ff87 	bl	14944 <bt_setup_random_id_addr>
		if (err) {
   14a36:	4604      	mov	r4, r0
   14a38:	2800      	cmp	r0, #0
   14a3a:	d1e6      	bne.n	14a0a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14a3c:	1c68      	adds	r0, r5, #1
   14a3e:	f7ff fe31 	bl	146a4 <set_random_address>
		if (err) {
   14a42:	4604      	mov	r4, r0
   14a44:	2800      	cmp	r0, #0
   14a46:	d0d9      	beq.n	149fc <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   14a48:	466d      	mov	r5, sp
   14a4a:	b088      	sub	sp, #32
   14a4c:	466a      	mov	r2, sp
   14a4e:	4b05      	ldr	r3, [pc, #20]	; (14a64 <bt_id_init+0x74>)
   14a50:	e7df      	b.n	14a12 <bt_id_init+0x22>
   14a52:	bf00      	nop
   14a54:	2000c580 	.word	0x2000c580
   14a58:	00036500 	.word	0x00036500
   14a5c:	00036544 	.word	0x00036544
   14a60:	00031bc4 	.word	0x00031bc4
   14a64:	00036523 	.word	0x00036523

00014a68 <atomic_get.constprop.0>:
   14a68:	4b01      	ldr	r3, [pc, #4]	; (14a70 <atomic_get.constprop.0+0x8>)
   14a6a:	e8d3 0faf 	lda	r0, [r3]
}
   14a6e:	4770      	bx	lr
   14a70:	2000c654 	.word	0x2000c654

00014a74 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   14a74:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   14a76:	2102      	movs	r1, #2
{
   14a78:	4604      	mov	r4, r0
   14a7a:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   14a7c:	f242 000c 	movw	r0, #8204	; 0x200c
   14a80:	f7fe fb94 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   14a84:	4605      	mov	r5, r0
   14a86:	b300      	cbz	r0, 14aca <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   14a88:	2102      	movs	r1, #2
   14a8a:	300c      	adds	r0, #12
   14a8c:	f005 f9c8 	bl	19e20 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   14a90:	2c01      	cmp	r4, #1
   14a92:	4602      	mov	r2, r0
   14a94:	d117      	bne.n	14ac6 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14a96:	f7ff ffe7 	bl	14a68 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   14a9a:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   14a9e:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   14aa0:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   14aa2:	425c      	negs	r4, r3
   14aa4:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   14aa6:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   14aa8:	a903      	add	r1, sp, #12
   14aaa:	4628      	mov	r0, r5
   14aac:	4a08      	ldr	r2, [pc, #32]	; (14ad0 <bt_le_scan_set_enable_legacy+0x5c>)
   14aae:	2306      	movs	r3, #6
   14ab0:	9400      	str	r4, [sp, #0]
   14ab2:	f7fe fb69 	bl	13188 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   14ab6:	2200      	movs	r2, #0
   14ab8:	4629      	mov	r1, r5
   14aba:	f242 000c 	movw	r0, #8204	; 0x200c
   14abe:	f7fe fbc3 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   14ac2:	b007      	add	sp, #28
   14ac4:	bd30      	pop	{r4, r5, pc}
   14ac6:	2000      	movs	r0, #0
   14ac8:	e7e9      	b.n	14a9e <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   14aca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14ace:	e7f8      	b.n	14ac2 <bt_le_scan_set_enable_legacy+0x4e>
   14ad0:	2000c654 	.word	0x2000c654

00014ad4 <start_le_scan_legacy>:
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   14ad4:	2300      	movs	r3, #0
{
   14ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	(void)memset(&set_param, 0, sizeof(set_param));
   14ad8:	f8ad 3005 	strh.w	r3, [sp, #5]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14adc:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   14ade:	f88d 0000 	strb.w	r0, [sp]
{
   14ae2:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14ae4:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   14ae6:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14aea:	4158      	adcs	r0, r3
   14aec:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   14af0:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   14af4:	f7ff ff6a 	bl	149cc <bt_id_set_scan_own_addr>
	if (err) {
   14af8:	4604      	mov	r4, r0
   14afa:	bb18      	cbnz	r0, 14b44 <start_le_scan_legacy+0x70>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   14afc:	2107      	movs	r1, #7
   14afe:	f242 000b 	movw	r0, #8203	; 0x200b
   14b02:	f7fe fb53 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   14b06:	4606      	mov	r6, r0
   14b08:	b328      	cbz	r0, 14b56 <start_le_scan_legacy+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14b0a:	2207      	movs	r2, #7
   14b0c:	4669      	mov	r1, sp
   14b0e:	300c      	adds	r0, #12
   14b10:	f018 fd4f 	bl	2d5b2 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   14b14:	4622      	mov	r2, r4
   14b16:	4631      	mov	r1, r6
   14b18:	f242 000b 	movw	r0, #8203	; 0x200b
   14b1c:	f7fe fb94 	bl	13248 <bt_hci_cmd_send_sync>
	if (err) {
   14b20:	4604      	mov	r4, r0
   14b22:	b978      	cbnz	r0, 14b44 <start_le_scan_legacy+0x70>
	return bt_le_scan_set_enable_legacy(enable);
   14b24:	2001      	movs	r0, #1
   14b26:	f7ff ffa5 	bl	14a74 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   14b2a:	4604      	mov	r4, r0
   14b2c:	b950      	cbnz	r0, 14b44 <start_le_scan_legacy+0x70>
	if (val) {
   14b2e:	2d01      	cmp	r5, #1
   14b30:	d10b      	bne.n	14b4a <start_le_scan_legacy+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14b32:	4b0a      	ldr	r3, [pc, #40]	; (14b5c <start_le_scan_legacy+0x88>)
   14b34:	e8d3 1fef 	ldaex	r1, [r3]
   14b38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   14b3c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14b40:	2a00      	cmp	r2, #0
   14b42:	d1f7      	bne.n	14b34 <start_le_scan_legacy+0x60>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   14b44:	4620      	mov	r0, r4
   14b46:	b002      	add	sp, #8
   14b48:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b4a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   14b4e:	4803      	ldr	r0, [pc, #12]	; (14b5c <start_le_scan_legacy+0x88>)
   14b50:	f017 fb64 	bl	2c21c <atomic_and>
   14b54:	e7f6      	b.n	14b44 <start_le_scan_legacy+0x70>
		return -ENOBUFS;
   14b56:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14b5a:	e7f3      	b.n	14b44 <start_le_scan_legacy+0x70>
   14b5c:	2000c654 	.word	0x2000c654

00014b60 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   14b60:	2200      	movs	r2, #0
   14b62:	4b01      	ldr	r3, [pc, #4]	; (14b68 <bt_scan_reset+0x8>)
   14b64:	601a      	str	r2, [r3, #0]
}
   14b66:	4770      	bx	lr
   14b68:	2000e33c 	.word	0x2000e33c

00014b6c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   14b6c:	b538      	push	{r3, r4, r5, lr}
   14b6e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14b70:	f7ff ff7a 	bl	14a68 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14b74:	0601      	lsls	r1, r0, #24
   14b76:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   14b7a:	d42e      	bmi.n	14bda <bt_le_scan_update+0x6e>
   14b7c:	f7ff ff74 	bl	14a68 <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   14b80:	0643      	lsls	r3, r0, #25
   14b82:	d422      	bmi.n	14bca <bt_le_scan_update+0x5e>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   14b84:	2100      	movs	r1, #0
   14b86:	2206      	movs	r2, #6
   14b88:	4608      	mov	r0, r1
   14b8a:	f001 f911 	bl	15db0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   14b8e:	4604      	mov	r4, r0
   14b90:	bb08      	cbnz	r0, 14bd6 <bt_le_scan_update+0x6a>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   14b92:	2202      	movs	r2, #2
   14b94:	4601      	mov	r1, r0
   14b96:	f001 f90b 	bl	15db0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   14b9a:	b1f0      	cbz	r0, 14bda <bt_le_scan_update+0x6e>
   14b9c:	4b10      	ldr	r3, [pc, #64]	; (14be0 <bt_le_scan_update+0x74>)
   14b9e:	e8d3 1fef 	ldaex	r1, [r3]
   14ba2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   14ba6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14baa:	2a00      	cmp	r2, #0
   14bac:	d1f7      	bne.n	14b9e <bt_le_scan_update+0x32>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   14bae:	f000 fdf9 	bl	157a4 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   14bb2:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   14bb4:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   14bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   14bba:	bf0b      	itete	eq
   14bbc:	2212      	moveq	r2, #18
   14bbe:	2230      	movne	r2, #48	; 0x30
   14bc0:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   14bc4:	2160      	movne	r1, #96	; 0x60
   14bc6:	f7ff bf85 	b.w	14ad4 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   14bca:	4610      	mov	r0, r2
   14bcc:	f7ff ff52 	bl	14a74 <bt_le_scan_set_enable_legacy>
		if (err) {
   14bd0:	2800      	cmp	r0, #0
   14bd2:	d0d7      	beq.n	14b84 <bt_le_scan_update+0x18>
}
   14bd4:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   14bd6:	f000 fde5 	bl	157a4 <bt_conn_unref>
		return 0;
   14bda:	2000      	movs	r0, #0
   14bdc:	e7fa      	b.n	14bd4 <bt_le_scan_update+0x68>
   14bde:	bf00      	nop
   14be0:	2000c654 	.word	0x2000c654

00014be4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   14be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   14be8:	f100 080c 	add.w	r8, r0, #12
   14bec:	b08b      	sub	sp, #44	; 0x2c
   14bee:	4604      	mov	r4, r0
   14bf0:	af00      	add	r7, sp, #0
   14bf2:	4640      	mov	r0, r8
   14bf4:	f018 fcc1 	bl	2d57a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   14bf8:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 14dd0 <bt_hci_le_adv_report+0x1ec>
   14bfc:	60f8      	str	r0, [r7, #12]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   14bfe:	68fb      	ldr	r3, [r7, #12]
   14c00:	b19b      	cbz	r3, 14c2a <bt_hci_le_adv_report+0x46>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   14c02:	8a23      	ldrh	r3, [r4, #16]
   14c04:	2b08      	cmp	r3, #8
   14c06:	d814      	bhi.n	14c32 <bt_hci_le_adv_report+0x4e>
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
			LOG_ERR("Unexpected end of buffer");
   14c08:	466c      	mov	r4, sp
   14c0a:	b088      	sub	sp, #32
   14c0c:	466a      	mov	r2, sp
   14c0e:	4b71      	ldr	r3, [pc, #452]	; (14dd4 <bt_hci_le_adv_report+0x1f0>)
   14c10:	6153      	str	r3, [r2, #20]
   14c12:	4b71      	ldr	r3, [pc, #452]	; (14dd8 <bt_hci_le_adv_report+0x1f4>)
   14c14:	6193      	str	r3, [r2, #24]
   14c16:	2303      	movs	r3, #3
   14c18:	f842 3f10 	str.w	r3, [r2, #16]!
   14c1c:	2300      	movs	r3, #0
   14c1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c22:	486e      	ldr	r0, [pc, #440]	; (14ddc <bt_hci_le_adv_report+0x1f8>)
   14c24:	f7fa fde4 	bl	f7f0 <z_impl_z_log_msg_static_create>
   14c28:	46a5      	mov	sp, r4

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   14c2a:	372c      	adds	r7, #44	; 0x2c
   14c2c:	46bd      	mov	sp, r7
   14c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   14c32:	2109      	movs	r1, #9
   14c34:	4640      	mov	r0, r8
   14c36:	f005 f8d5 	bl	19de4 <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   14c3a:	7a03      	ldrb	r3, [r0, #8]
   14c3c:	8a22      	ldrh	r2, [r4, #16]
   14c3e:	3301      	adds	r3, #1
   14c40:	429a      	cmp	r2, r3
   14c42:	4605      	mov	r5, r0
   14c44:	d3e0      	bcc.n	14c08 <bt_hci_le_adv_report+0x24>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   14c46:	2301      	movs	r3, #1
   14c48:	84bb      	strh	r3, [r7, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   14c4a:	237f      	movs	r3, #127	; 0x7f
   14c4c:	77bb      	strb	r3, [r7, #30]
		adv_info.rssi = evt->data[evt->length];
   14c4e:	7a03      	ldrb	r3, [r0, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   14c50:	f100 0901 	add.w	r9, r0, #1
		adv_info.rssi = evt->data[evt->length];
   14c54:	4403      	add	r3, r0
   14c56:	7a5b      	ldrb	r3, [r3, #9]
   14c58:	777b      	strb	r3, [r7, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   14c5a:	23ff      	movs	r3, #255	; 0xff
   14c5c:	773b      	strb	r3, [r7, #28]
		adv_info.interval = 0U;
   14c5e:	2300      	movs	r3, #0
   14c60:	847b      	strh	r3, [r7, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   14c62:	7802      	ldrb	r2, [r0, #0]
   14c64:	2a04      	cmp	r2, #4
   14c66:	bf98      	it	ls
   14c68:	4b5d      	ldrls	r3, [pc, #372]	; (14de0 <bt_hci_le_adv_report+0x1fc>)
   14c6a:	77fa      	strb	r2, [r7, #31]
	switch (evt_type) {
   14c6c:	bf98      	it	ls
   14c6e:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   14c70:	843b      	strh	r3, [r7, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   14c72:	7a03      	ldrb	r3, [r0, #8]
   14c74:	60bb      	str	r3, [r7, #8]
   14c76:	f7ff fef7 	bl	14a68 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   14c7a:	0606      	lsls	r6, r0, #24
   14c7c:	d50c      	bpl.n	14c98 <bt_hci_le_adv_report+0xb4>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   14c7e:	8c3b      	ldrh	r3, [r7, #32]
   14c80:	0758      	lsls	r0, r3, #29
   14c82:	d509      	bpl.n	14c98 <bt_hci_le_adv_report+0xb4>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   14c84:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   14c86:	4640      	mov	r0, r8
   14c88:	3101      	adds	r1, #1
   14c8a:	f005 f88d 	bl	19da8 <net_buf_simple_pull>
   14c8e:	68fb      	ldr	r3, [r7, #12]
   14c90:	3b01      	subs	r3, #1
   14c92:	b2db      	uxtb	r3, r3
   14c94:	60fb      	str	r3, [r7, #12]
   14c96:	e7b2      	b.n	14bfe <bt_hci_le_adv_report+0x1a>
	if (bt_addr_le_is_resolved(addr)) {
   14c98:	4648      	mov	r0, r9
   14c9a:	f017 f9cc 	bl	2c036 <bt_addr_le_is_resolved>
   14c9e:	2800      	cmp	r0, #0
   14ca0:	d04b      	beq.n	14d3a <bt_hci_le_adv_report+0x156>
		bt_addr_le_copy_resolved(&id_addr, addr);
   14ca2:	4649      	mov	r1, r9
   14ca4:	f107 0010 	add.w	r0, r7, #16
   14ca8:	f017 f9ba 	bl	2c020 <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
   14cac:	f8da 3000 	ldr.w	r3, [sl]
   14cb0:	b1a3      	cbz	r3, 14cdc <bt_hci_le_adv_report+0xf8>
	state->offset = net_buf_simple_headroom(buf);
   14cb2:	4640      	mov	r0, r8
   14cb4:	f018 fc71 	bl	2d59a <net_buf_simple_headroom>
   14cb8:	4683      	mov	fp, r0
		buf->len = len;
   14cba:	68bb      	ldr	r3, [r7, #8]
	state->len = buf->len;
   14cbc:	8a26      	ldrh	r6, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   14cbe:	7ffa      	ldrb	r2, [r7, #31]
		buf->len = len;
   14cc0:	8223      	strh	r3, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   14cc2:	f997 101d 	ldrsb.w	r1, [r7, #29]
   14cc6:	4643      	mov	r3, r8
   14cc8:	f8da c000 	ldr.w	ip, [sl]
   14ccc:	f107 0010 	add.w	r0, r7, #16
   14cd0:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   14cd2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   14cd4:	8226      	strh	r6, [r4, #16]
	buf->data = buf->__buf + state->offset;
   14cd6:	fa13 f38b 	uxtah	r3, r3, fp
   14cda:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   14cdc:	f107 0310 	add.w	r3, r7, #16
   14ce0:	61bb      	str	r3, [r7, #24]
	return list->head;
   14ce2:	4b40      	ldr	r3, [pc, #256]	; (14de4 <bt_hci_le_adv_report+0x200>)
   14ce4:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d037      	beq.n	14d5a <bt_hci_le_adv_report+0x176>
	return node->next;
   14cea:	681a      	ldr	r2, [r3, #0]
   14cec:	b102      	cbz	r2, 14cf0 <bt_hci_le_adv_report+0x10c>
   14cee:	3a08      	subs	r2, #8
		if (listener->recv) {
   14cf0:	f853 1c08 	ldr.w	r1, [r3, #-8]
   14cf4:	b1c1      	cbz	r1, 14d28 <bt_hci_le_adv_report+0x144>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14cf6:	4616      	mov	r6, r2
   14cf8:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   14cfc:	4640      	mov	r0, r8
   14cfe:	603a      	str	r2, [r7, #0]
   14d00:	f018 fc4b 	bl	2d59a <net_buf_simple_headroom>
   14d04:	4683      	mov	fp, r0
	state->len = buf->len;
   14d06:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   14d08:	683a      	ldr	r2, [r7, #0]
   14d0a:	607b      	str	r3, [r7, #4]
			buf->len = len;
   14d0c:	68bb      	ldr	r3, [r7, #8]
			listener->recv(info, buf);
   14d0e:	4641      	mov	r1, r8
			buf->len = len;
   14d10:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   14d12:	6812      	ldr	r2, [r2, #0]
   14d14:	f107 0018 	add.w	r0, r7, #24
   14d18:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   14d1a:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   14d1c:	687b      	ldr	r3, [r7, #4]
	buf->data = buf->__buf + state->offset;
   14d1e:	fa12 f28b 	uxtah	r2, r2, fp
   14d22:	60e2      	str	r2, [r4, #12]
}
   14d24:	4632      	mov	r2, r6
	buf->len = state->len;
   14d26:	8223      	strh	r3, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14d28:	b1ba      	cbz	r2, 14d5a <bt_hci_le_adv_report+0x176>
   14d2a:	6896      	ldr	r6, [r2, #8]
   14d2c:	6813      	ldr	r3, [r2, #0]
   14d2e:	b196      	cbz	r6, 14d56 <bt_hci_le_adv_report+0x172>
   14d30:	3e08      	subs	r6, #8
		if (listener->recv) {
   14d32:	2b00      	cmp	r3, #0
   14d34:	d1e2      	bne.n	14cfc <bt_hci_le_adv_report+0x118>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   14d36:	4632      	mov	r2, r6
   14d38:	e7f7      	b.n	14d2a <bt_hci_le_adv_report+0x146>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   14d3a:	786b      	ldrb	r3, [r5, #1]
   14d3c:	2bff      	cmp	r3, #255	; 0xff
   14d3e:	d105      	bne.n	14d4c <bt_hci_le_adv_report+0x168>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   14d40:	4929      	ldr	r1, [pc, #164]	; (14de8 <bt_hci_le_adv_report+0x204>)
		bt_addr_le_copy(&id_addr,
   14d42:	f107 0010 	add.w	r0, r7, #16
   14d46:	f017 fa74 	bl	2c232 <bt_addr_le_copy>
   14d4a:	e7af      	b.n	14cac <bt_hci_le_adv_report+0xc8>
   14d4c:	4649      	mov	r1, r9
   14d4e:	f017 fa48 	bl	2c1e2 <bt_lookup_id_addr>
   14d52:	4601      	mov	r1, r0
   14d54:	e7f5      	b.n	14d42 <bt_hci_le_adv_report+0x15e>
		if (listener->recv) {
   14d56:	2b00      	cmp	r3, #0
   14d58:	d1d0      	bne.n	14cfc <bt_hci_le_adv_report+0x118>
	info->addr = NULL;
   14d5a:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   14d5c:	8c3a      	ldrh	r2, [r7, #32]
	info->addr = NULL;
   14d5e:	61bb      	str	r3, [r7, #24]
   14d60:	f7ff fe82 	bl	14a68 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14d64:	0601      	lsls	r1, r0, #24
   14d66:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   14d6a:	d48b      	bmi.n	14c84 <bt_hci_le_adv_report+0xa0>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   14d6c:	07d2      	lsls	r2, r2, #31
   14d6e:	d589      	bpl.n	14c84 <bt_hci_le_adv_report+0xa0>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   14d70:	2202      	movs	r2, #2
   14d72:	4658      	mov	r0, fp
   14d74:	f107 0110 	add.w	r1, r7, #16
   14d78:	f001 f81a 	bl	15db0 <bt_conn_lookup_state_le>
	if (!conn) {
   14d7c:	4606      	mov	r6, r0
   14d7e:	2800      	cmp	r0, #0
   14d80:	d080      	beq.n	14c84 <bt_hci_le_adv_report+0xa0>
   14d82:	f7ff fe71 	bl	14a68 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   14d86:	0643      	lsls	r3, r0, #25
   14d88:	d410      	bmi.n	14dac <bt_hci_le_adv_report+0x1c8>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   14d8a:	f106 009e 	add.w	r0, r6, #158	; 0x9e
   14d8e:	4649      	mov	r1, r9
   14d90:	f017 fa4f 	bl	2c232 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   14d94:	4630      	mov	r0, r6
   14d96:	f7fe fb07 	bl	133a8 <bt_le_create_conn>
   14d9a:	b960      	cbnz	r0, 14db6 <bt_hci_le_adv_report+0x1d2>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   14d9c:	4630      	mov	r0, r6
   14d9e:	2106      	movs	r1, #6
   14da0:	f000 fd2c 	bl	157fc <bt_conn_set_state>
	bt_conn_unref(conn);
   14da4:	4630      	mov	r0, r6
   14da6:	f000 fcfd 	bl	157a4 <bt_conn_unref>
	return;
   14daa:	e76b      	b.n	14c84 <bt_hci_le_adv_report+0xa0>
	return bt_le_scan_set_enable_legacy(enable);
   14dac:	4658      	mov	r0, fp
   14dae:	f7ff fe61 	bl	14a74 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   14db2:	2800      	cmp	r0, #0
   14db4:	d0e9      	beq.n	14d8a <bt_hci_le_adv_report+0x1a6>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   14db6:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14db8:	2100      	movs	r1, #0
   14dba:	4630      	mov	r0, r6
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   14dbc:	7273      	strb	r3, [r6, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14dbe:	f000 fd1d 	bl	157fc <bt_conn_set_state>
	bt_conn_unref(conn);
   14dc2:	4630      	mov	r0, r6
   14dc4:	f000 fcee 	bl	157a4 <bt_conn_unref>
	bt_le_scan_update(false);
   14dc8:	2000      	movs	r0, #0
   14dca:	f7ff fecf 	bl	14b6c <bt_le_scan_update>
   14dce:	e759      	b.n	14c84 <bt_hci_le_adv_report+0xa0>
   14dd0:	2000e33c 	.word	0x2000e33c
   14dd4:	0003658d 	.word	0x0003658d
   14dd8:	000365af 	.word	0x000365af
   14ddc:	00031bd4 	.word	0x00031bd4
   14de0:	000365aa 	.word	0x000365aa
   14de4:	2000e334 	.word	0x2000e334
   14de8:	000358c4 	.word	0x000358c4

00014dec <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   14dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dee:	4605      	mov	r5, r0
   14df0:	f7ff fe3a 	bl	14a68 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14df4:	0740      	lsls	r0, r0, #29
{
   14df6:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14df8:	d564      	bpl.n	14ec4 <bt_le_scan_start+0xd8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   14dfa:	782a      	ldrb	r2, [r5, #0]
   14dfc:	2a01      	cmp	r2, #1
   14dfe:	d903      	bls.n	14e08 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   14e00:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   14e04:	4620      	mov	r0, r4
   14e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   14e08:	686b      	ldr	r3, [r5, #4]
   14e0a:	2b0f      	cmp	r3, #15
   14e0c:	d8f8      	bhi.n	14e00 <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   14e0e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   14e12:	8928      	ldrh	r0, [r5, #8]
   14e14:	1f03      	subs	r3, r0, #4
   14e16:	b29b      	uxth	r3, r3
   14e18:	42a3      	cmp	r3, r4
   14e1a:	d8f1      	bhi.n	14e00 <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   14e1c:	8969      	ldrh	r1, [r5, #10]
   14e1e:	1f0b      	subs	r3, r1, #4
   14e20:	b29b      	uxth	r3, r3
   14e22:	42a3      	cmp	r3, r4
   14e24:	d8ec      	bhi.n	14e00 <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   14e26:	4288      	cmp	r0, r1
   14e28:	d3ea      	bcc.n	14e00 <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   14e2a:	b972      	cbnz	r2, 14e4a <bt_le_scan_start+0x5e>
   14e2c:	4e27      	ldr	r6, [pc, #156]	; (14ecc <bt_le_scan_start+0xe0>)
   14e2e:	e8d6 0fef 	ldaex	r0, [r6]
   14e32:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   14e36:	e8c6 3fe2 	stlex	r2, r3, [r6]
   14e3a:	2a00      	cmp	r2, #0
   14e3c:	d1f7      	bne.n	14e2e <bt_le_scan_start+0x42>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14e3e:	f010 0280 	ands.w	r2, r0, #128	; 0x80
   14e42:	d007      	beq.n	14e54 <bt_le_scan_start+0x68>
		return -EALREADY;
   14e44:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14e48:	e7dc      	b.n	14e04 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   14e4a:	f017 f9e5 	bl	2c218 <bt_id_scan_random_addr_check>
   14e4e:	2800      	cmp	r0, #0
   14e50:	d1ec      	bne.n	14e2c <bt_le_scan_start+0x40>
   14e52:	e7d5      	b.n	14e00 <bt_le_scan_start+0x14>
   14e54:	f7ff fe08 	bl	14a68 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   14e58:	0641      	lsls	r1, r0, #25
   14e5a:	d50a      	bpl.n	14e72 <bt_le_scan_start+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   14e5c:	4610      	mov	r0, r2
   14e5e:	f7ff fe09 	bl	14a74 <bt_le_scan_set_enable_legacy>
		if (err) {
   14e62:	4604      	mov	r4, r0
   14e64:	b128      	cbz	r0, 14e72 <bt_le_scan_start+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e66:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14e6a:	4630      	mov	r0, r6
   14e6c:	f017 f9d6 	bl	2c21c <atomic_and>
		return err;
   14e70:	e7c8      	b.n	14e04 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   14e72:	686b      	ldr	r3, [r5, #4]
	if (val) {
   14e74:	07db      	lsls	r3, r3, #31
   14e76:	d511      	bpl.n	14e9c <bt_le_scan_start+0xb0>
   14e78:	e8d6 3fef 	ldaex	r3, [r6]
   14e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14e80:	e8c6 3fe2 	stlex	r2, r3, [r6]
   14e84:	2a00      	cmp	r2, #0
   14e86:	d1f7      	bne.n	14e78 <bt_le_scan_start+0x8c>
		if (param->timeout) {
   14e88:	89ab      	ldrh	r3, [r5, #12]
   14e8a:	b16b      	cbz	r3, 14ea8 <bt_le_scan_start+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e8c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14e90:	480e      	ldr	r0, [pc, #56]	; (14ecc <bt_le_scan_start+0xe0>)
   14e92:	f017 f9c3 	bl	2c21c <atomic_and>
			return -ENOTSUP;
   14e96:	f06f 0485 	mvn.w	r4, #133	; 0x85
   14e9a:	e7b3      	b.n	14e04 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e9c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14ea0:	480a      	ldr	r0, [pc, #40]	; (14ecc <bt_le_scan_start+0xe0>)
   14ea2:	f017 f9bb 	bl	2c21c <atomic_and>
   14ea6:	e7ef      	b.n	14e88 <bt_le_scan_start+0x9c>
		err = start_le_scan_legacy(param->type, param->interval,
   14ea8:	896a      	ldrh	r2, [r5, #10]
   14eaa:	8929      	ldrh	r1, [r5, #8]
   14eac:	7828      	ldrb	r0, [r5, #0]
   14eae:	f7ff fe11 	bl	14ad4 <start_le_scan_legacy>
	if (err) {
   14eb2:	4604      	mov	r4, r0
   14eb4:	b118      	cbz	r0, 14ebe <bt_le_scan_start+0xd2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14eb6:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14eba:	4804      	ldr	r0, [pc, #16]	; (14ecc <bt_le_scan_start+0xe0>)
   14ebc:	e7d6      	b.n	14e6c <bt_le_scan_start+0x80>
	scan_dev_found_cb = cb;
   14ebe:	4b04      	ldr	r3, [pc, #16]	; (14ed0 <bt_le_scan_start+0xe4>)
   14ec0:	601f      	str	r7, [r3, #0]
	return 0;
   14ec2:	e79f      	b.n	14e04 <bt_le_scan_start+0x18>
		return -EAGAIN;
   14ec4:	f06f 040a 	mvn.w	r4, #10
   14ec8:	e79c      	b.n	14e04 <bt_le_scan_start+0x18>
   14eca:	bf00      	nop
   14ecc:	2000c654 	.word	0x2000c654
   14ed0:	2000e33c 	.word	0x2000e33c

00014ed4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   14ed4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ed6:	f06f 0180 	mvn.w	r1, #128	; 0x80
   14eda:	4807      	ldr	r0, [pc, #28]	; (14ef8 <bt_le_scan_stop+0x24>)
   14edc:	f017 f99e 	bl	2c21c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   14ee0:	0603      	lsls	r3, r0, #24
   14ee2:	d506      	bpl.n	14ef2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   14ee4:	2000      	movs	r0, #0
   14ee6:	4b05      	ldr	r3, [pc, #20]	; (14efc <bt_le_scan_stop+0x28>)
   14ee8:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   14eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   14eee:	f7ff be3d 	b.w	14b6c <bt_le_scan_update>
}
   14ef2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14ef6:	bd08      	pop	{r3, pc}
   14ef8:	2000c654 	.word	0x2000c654
   14efc:	2000e33c 	.word	0x2000e33c

00014f00 <bt_le_scan_cb_register>:
	parent->next = child;
   14f00:	2300      	movs	r3, #0
   14f02:	6083      	str	r3, [r0, #8]
	return list->tail;
   14f04:	4b05      	ldr	r3, [pc, #20]	; (14f1c <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   14f06:	f100 0208 	add.w	r2, r0, #8
   14f0a:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   14f0c:	b911      	cbnz	r1, 14f14 <bt_le_scan_cb_register+0x14>
	list->head = node;
   14f0e:	e9c3 2200 	strd	r2, r2, [r3]
}
   14f12:	4770      	bx	lr
	parent->next = child;
   14f14:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14f16:	605a      	str	r2, [r3, #4]
}
   14f18:	4770      	bx	lr
   14f1a:	bf00      	nop
   14f1c:	2000e334 	.word	0x2000e334

00014f20 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14f20:	b5b0      	push	{r4, r5, r7, lr}
   14f22:	b08c      	sub	sp, #48	; 0x30
   14f24:	af02      	add	r7, sp, #8
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   14f26:	2120      	movs	r1, #32
   14f28:	f107 0008 	add.w	r0, r7, #8
   14f2c:	f7fe fa10 	bl	13350 <bt_hci_le_rand>
	if (ret) {
   14f30:	4604      	mov	r4, r0
   14f32:	bb50      	cbnz	r0, 14f8a <prng_reseed.constprop.0+0x6a>
	return z_impl_k_uptime_ticks();
   14f34:	f01b fb56 	bl	305e4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   14f38:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   14f3c:	fba0 2305 	umull	r2, r3, r0, r5
   14f40:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   14f44:	2308      	movs	r3, #8
   14f46:	0bd2      	lsrs	r2, r2, #15
   14f48:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   14f4c:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   14f4e:	e9c7 2100 	strd	r2, r1, [r7]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   14f52:	4810      	ldr	r0, [pc, #64]	; (14f94 <prng_reseed.constprop.0+0x74>)
   14f54:	9300      	str	r3, [sp, #0]
   14f56:	2220      	movs	r2, #32
   14f58:	463b      	mov	r3, r7
   14f5a:	f107 0108 	add.w	r1, r7, #8
   14f5e:	f016 ff40 	bl	2bde2 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   14f62:	b990      	cbnz	r0, 14f8a <prng_reseed.constprop.0+0x6a>
		LOG_ERR("Failed to re-seed PRNG");
   14f64:	466d      	mov	r5, sp
   14f66:	b088      	sub	sp, #32
   14f68:	aa02      	add	r2, sp, #8
   14f6a:	4b0b      	ldr	r3, [pc, #44]	; (14f98 <prng_reseed.constprop.0+0x78>)
   14f6c:	6153      	str	r3, [r2, #20]
   14f6e:	4b0b      	ldr	r3, [pc, #44]	; (14f9c <prng_reseed.constprop.0+0x7c>)
   14f70:	6193      	str	r3, [r2, #24]
   14f72:	2303      	movs	r3, #3
   14f74:	f842 3f10 	str.w	r3, [r2, #16]!
   14f78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f7c:	4623      	mov	r3, r4
   14f7e:	4808      	ldr	r0, [pc, #32]	; (14fa0 <prng_reseed.constprop.0+0x80>)
   14f80:	f7fa fc36 	bl	f7f0 <z_impl_z_log_msg_static_create>
   14f84:	f06f 0404 	mvn.w	r4, #4
   14f88:	46ad      	mov	sp, r5
		return -EIO;
	}

	return 0;
}
   14f8a:	4620      	mov	r0, r4
   14f8c:	3728      	adds	r7, #40	; 0x28
   14f8e:	46bd      	mov	sp, r7
   14f90:	bdb0      	pop	{r4, r5, r7, pc}
   14f92:	bf00      	nop
   14f94:	2000d7b8 	.word	0x2000d7b8
   14f98:	000365c4 	.word	0x000365c4
   14f9c:	000365fd 	.word	0x000365fd
   14fa0:	00031bbc 	.word	0x00031bbc

00014fa4 <prng_init>:

int prng_init(void)
{
   14fa4:	b5b0      	push	{r4, r5, r7, lr}
   14fa6:	b082      	sub	sp, #8
   14fa8:	af00      	add	r7, sp, #0
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   14faa:	2108      	movs	r1, #8
   14fac:	4638      	mov	r0, r7
   14fae:	f7fe f9cf 	bl	13350 <bt_hci_le_rand>
	if (ret) {
   14fb2:	4604      	mov	r4, r0
   14fb4:	b9c0      	cbnz	r0, 14fe8 <prng_init+0x44>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   14fb6:	2208      	movs	r2, #8
   14fb8:	4639      	mov	r1, r7
   14fba:	480f      	ldr	r0, [pc, #60]	; (14ff8 <prng_init+0x54>)
   14fbc:	f016 fef1 	bl	2bda2 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   14fc0:	b9b0      	cbnz	r0, 14ff0 <prng_init+0x4c>
		LOG_ERR("Failed to initialize PRNG");
   14fc2:	466d      	mov	r5, sp
   14fc4:	b088      	sub	sp, #32
   14fc6:	466a      	mov	r2, sp
   14fc8:	4b0c      	ldr	r3, [pc, #48]	; (14ffc <prng_init+0x58>)
   14fca:	6153      	str	r3, [r2, #20]
   14fcc:	4b0c      	ldr	r3, [pc, #48]	; (15000 <prng_init+0x5c>)
   14fce:	6193      	str	r3, [r2, #24]
   14fd0:	2303      	movs	r3, #3
   14fd2:	f842 3f10 	str.w	r3, [r2, #16]!
   14fd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14fda:	4623      	mov	r3, r4
   14fdc:	4809      	ldr	r0, [pc, #36]	; (15004 <prng_init+0x60>)
   14fde:	f7fa fc07 	bl	f7f0 <z_impl_z_log_msg_static_create>
		return -EIO;
   14fe2:	f06f 0404 	mvn.w	r4, #4
   14fe6:	46ad      	mov	sp, r5
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   14fe8:	4620      	mov	r0, r4
   14fea:	3708      	adds	r7, #8
   14fec:	46bd      	mov	sp, r7
   14fee:	bdb0      	pop	{r4, r5, r7, pc}
	return prng_reseed(&prng);
   14ff0:	f7ff ff96 	bl	14f20 <prng_reseed.constprop.0>
   14ff4:	4604      	mov	r4, r0
   14ff6:	e7f7      	b.n	14fe8 <prng_init+0x44>
   14ff8:	2000d7b8 	.word	0x2000d7b8
   14ffc:	000365df 	.word	0x000365df
   15000:	00036609 	.word	0x00036609
   15004:	00031bbc 	.word	0x00031bbc

00015008 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   15008:	b538      	push	{r3, r4, r5, lr}
   1500a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1500c:	4604      	mov	r4, r0
   1500e:	b198      	cbz	r0, 15038 <bt_rand+0x30>
   15010:	b191      	cbz	r1, 15038 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   15012:	4a0b      	ldr	r2, [pc, #44]	; (15040 <bt_rand+0x38>)
   15014:	f016 fefe 	bl	2be14 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   15018:	1c43      	adds	r3, r0, #1
   1501a:	d107      	bne.n	1502c <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1501c:	f7ff ff80 	bl	14f20 <prng_reseed.constprop.0>
		if (ret) {
   15020:	b948      	cbnz	r0, 15036 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   15022:	4629      	mov	r1, r5
   15024:	4620      	mov	r0, r4
   15026:	4a06      	ldr	r2, [pc, #24]	; (15040 <bt_rand+0x38>)
   15028:	f016 fef4 	bl	2be14 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1502c:	2801      	cmp	r0, #1
   1502e:	bf0c      	ite	eq
   15030:	2000      	moveq	r0, #0
   15032:	f06f 0004 	mvnne.w	r0, #4
}
   15036:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15038:	f06f 0015 	mvn.w	r0, #21
   1503c:	e7fb      	b.n	15036 <bt_rand+0x2e>
   1503e:	bf00      	nop
   15040:	2000d7b8 	.word	0x2000d7b8

00015044 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   15044:	b570      	push	{r4, r5, r6, lr}
   15046:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15048:	4b12      	ldr	r3, [pc, #72]	; (15094 <notify_connected+0x50>)
   1504a:	681d      	ldr	r5, [r3, #0]
   1504c:	b995      	cbnz	r5, 15074 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1504e:	4d12      	ldr	r5, [pc, #72]	; (15098 <notify_connected+0x54>)
   15050:	4e12      	ldr	r6, [pc, #72]	; (1509c <notify_connected+0x58>)
   15052:	42b5      	cmp	r5, r6
   15054:	d91c      	bls.n	15090 <notify_connected+0x4c>
   15056:	4912      	ldr	r1, [pc, #72]	; (150a0 <notify_connected+0x5c>)
   15058:	f240 53ba 	movw	r3, #1466	; 0x5ba
   1505c:	4a11      	ldr	r2, [pc, #68]	; (150a4 <notify_connected+0x60>)
   1505e:	4812      	ldr	r0, [pc, #72]	; (150a8 <notify_connected+0x64>)
   15060:	f015 feaa 	bl	2adb8 <assert_print>
   15064:	4811      	ldr	r0, [pc, #68]	; (150ac <notify_connected+0x68>)
   15066:	f015 fea7 	bl	2adb8 <assert_print>
   1506a:	f240 51ba 	movw	r1, #1466	; 0x5ba
   1506e:	480d      	ldr	r0, [pc, #52]	; (150a4 <notify_connected+0x60>)
   15070:	f015 fe9b 	bl	2adaa <assert_post_action>
		if (cb->connected) {
   15074:	682b      	ldr	r3, [r5, #0]
   15076:	b113      	cbz	r3, 1507e <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   15078:	4620      	mov	r0, r4
   1507a:	7a61      	ldrb	r1, [r4, #9]
   1507c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1507e:	692d      	ldr	r5, [r5, #16]
   15080:	e7e4      	b.n	1504c <notify_connected+0x8>
		if (cb->connected) {
   15082:	682b      	ldr	r3, [r5, #0]
   15084:	b113      	cbz	r3, 1508c <notify_connected+0x48>
			cb->connected(conn, conn->err);
   15086:	4620      	mov	r0, r4
   15088:	7a61      	ldrb	r1, [r4, #9]
   1508a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1508c:	3514      	adds	r5, #20
   1508e:	e7e0      	b.n	15052 <notify_connected+0xe>
   15090:	d3f7      	bcc.n	15082 <notify_connected+0x3e>
		}
	}
}
   15092:	bd70      	pop	{r4, r5, r6, pc}
   15094:	2000e370 	.word	0x2000e370
   15098:	00031b44 	.word	0x00031b44
   1509c:	00031b44 	.word	0x00031b44
   150a0:	00036652 	.word	0x00036652
   150a4:	00036622 	.word	0x00036622
   150a8:	00033bc2 	.word	0x00033bc2
   150ac:	000342e3 	.word	0x000342e3

000150b0 <tx_notify>:
{
   150b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150b4:	4604      	mov	r4, r0
	tx->cb = NULL;
   150b6:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   150ba:	4f14      	ldr	r7, [pc, #80]	; (1510c <tx_notify+0x5c>)
	__asm__ volatile(
   150bc:	f04f 0220 	mov.w	r2, #32
   150c0:	f3ef 8311 	mrs	r3, BASEPRI
   150c4:	f382 8812 	msr	BASEPRI_MAX, r2
   150c8:	f3bf 8f6f 	isb	sy
	return list->head;
   150cc:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   150ce:	b929      	cbnz	r1, 150dc <tx_notify+0x2c>
	__asm__ volatile(
   150d0:	f383 8811 	msr	BASEPRI, r3
   150d4:	f3bf 8f6f 	isb	sy
}
   150d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   150de:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150e0:	4281      	cmp	r1, r0
	list->tail = node;
   150e2:	bf08      	it	eq
   150e4:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   150e6:	6222      	str	r2, [r4, #32]
   150e8:	f383 8811 	msr	BASEPRI, r3
   150ec:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   150f0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   150f4:	4638      	mov	r0, r7
	tx->user_data = NULL;
   150f6:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   150fa:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   150fe:	f01b f9aa 	bl	30456 <k_queue_append>
		cb(conn, user_data, 0);
   15102:	2200      	movs	r2, #0
   15104:	4631      	mov	r1, r6
   15106:	4620      	mov	r0, r4
   15108:	47a8      	blx	r5
	while (1) {
   1510a:	e7d7      	b.n	150bc <tx_notify+0xc>
   1510c:	2000cf50 	.word	0x2000cf50

00015110 <conn_tx_destroy>:
{
   15110:	b570      	push	{r4, r5, r6, lr}
   15112:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   15114:	b949      	cbnz	r1, 1512a <conn_tx_destroy+0x1a>
   15116:	490d      	ldr	r1, [pc, #52]	; (1514c <conn_tx_destroy+0x3c>)
   15118:	480d      	ldr	r0, [pc, #52]	; (15150 <conn_tx_destroy+0x40>)
   1511a:	2343      	movs	r3, #67	; 0x43
   1511c:	4a0d      	ldr	r2, [pc, #52]	; (15154 <conn_tx_destroy+0x44>)
   1511e:	f015 fe4b 	bl	2adb8 <assert_print>
   15122:	2143      	movs	r1, #67	; 0x43
   15124:	480b      	ldr	r0, [pc, #44]	; (15154 <conn_tx_destroy+0x44>)
   15126:	f015 fe40 	bl	2adaa <assert_post_action>
	tx->cb = NULL;
   1512a:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   1512c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   15130:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   15132:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   15136:	4808      	ldr	r0, [pc, #32]	; (15158 <conn_tx_destroy+0x48>)
   15138:	f01b f98d 	bl	30456 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1513c:	4631      	mov	r1, r6
   1513e:	4620      	mov	r0, r4
   15140:	462b      	mov	r3, r5
}
   15142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   15146:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1514a:	4718      	bx	r3
   1514c:	0003666d 	.word	0x0003666d
   15150:	00033bc2 	.word	0x00033bc2
   15154:	00036622 	.word	0x00036622
   15158:	2000cf50 	.word	0x2000cf50

0001515c <send_frag>:
{
   1515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15160:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
   15162:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 1532c <send_frag+0x1d0>
{
   15166:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   15168:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
   1516c:	4604      	mov	r4, r0
	return NULL;
   1516e:	2b00      	cmp	r3, #0
{
   15170:	af00      	add	r7, sp, #0
	return NULL;
   15172:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   15176:	460d      	mov	r5, r1
	return NULL;
   15178:	bf08      	it	eq
   1517a:	2000      	moveq	r0, #0
{
   1517c:	4616      	mov	r6, r2
	return z_impl_k_sem_take(sem, timeout);
   1517e:	2200      	movs	r2, #0
   15180:	2300      	movs	r3, #0
   15182:	f010 f849 	bl	25218 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   15186:	2800      	cmp	r0, #0
   15188:	f040 80cd 	bne.w	15326 <send_frag+0x1ca>
	if (frag) {
   1518c:	2e00      	cmp	r6, #0
   1518e:	f000 8093 	beq.w	152b8 <send_frag+0x15c>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15192:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15196:	f106 0b0c 	add.w	fp, r6, #12
   1519a:	4658      	mov	r0, fp
   1519c:	607b      	str	r3, [r7, #4]
   1519e:	f018 fa00 	bl	2d5a2 <net_buf_simple_tailroom>
   151a2:	687b      	ldr	r3, [r7, #4]
   151a4:	4298      	cmp	r0, r3
   151a6:	f240 8082 	bls.w	152ae <send_frag+0x152>
	return bt_dev.le.acl_mtu;
   151aa:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   151ae:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   151b2:	4658      	mov	r0, fp
   151b4:	607a      	str	r2, [r7, #4]
   151b6:	f018 f9fc 	bl	2d5b2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   151ba:	687a      	ldr	r2, [r7, #4]
   151bc:	4628      	mov	r0, r5
   151be:	4611      	mov	r1, r2
   151c0:	f004 fdf2 	bl	19da8 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   151c4:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   151c6:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   151c8:	2b07      	cmp	r3, #7
   151ca:	f040 80a9 	bne.w	15320 <send_frag+0x1c4>
	__asm__ volatile(
   151ce:	f04f 0320 	mov.w	r3, #32
   151d2:	f3ef 8211 	mrs	r2, BASEPRI
   151d6:	f383 8812 	msr	BASEPRI_MAX, r3
   151da:	f3bf 8f6f 	isb	sy
	if (tx) {
   151de:	2d00      	cmp	r5, #0
   151e0:	d075      	beq.n	152ce <send_frag+0x172>
	parent->next = child;
   151e2:	2300      	movs	r3, #0
   151e4:	602b      	str	r3, [r5, #0]
	return list->tail;
   151e6:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   151e8:	2b00      	cmp	r3, #0
   151ea:	d16d      	bne.n	152c8 <send_frag+0x16c>
	list->head = node;
   151ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   151f0:	f382 8811 	msr	BASEPRI, r2
   151f4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   151f8:	2104      	movs	r1, #4
   151fa:	f106 000c 	add.w	r0, r6, #12
   151fe:	f004 fdb3 	bl	19d68 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15202:	8823      	ldrh	r3, [r4, #0]
   15204:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   15208:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   1520c:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15210:	8a33      	ldrh	r3, [r6, #16]
   15212:	3b04      	subs	r3, #4
   15214:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15216:	2302      	movs	r3, #2
	return bt_send(buf);
   15218:	4630      	mov	r0, r6
   1521a:	7633      	strb	r3, [r6, #24]
   1521c:	f7fe fab6 	bl	1378c <bt_send>
	if (err) {
   15220:	4680      	mov	r8, r0
   15222:	2800      	cmp	r0, #0
   15224:	d03e      	beq.n	152a4 <send_frag+0x148>
		LOG_ERR("Unable to send to driver (err %d)", err);
   15226:	46eb      	mov	fp, sp
   15228:	b088      	sub	sp, #32
   1522a:	466a      	mov	r2, sp
   1522c:	4b40      	ldr	r3, [pc, #256]	; (15330 <send_frag+0x1d4>)
   1522e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15232:	6153      	str	r3, [r2, #20]
   15234:	4b3f      	ldr	r3, [pc, #252]	; (15334 <send_frag+0x1d8>)
   15236:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1523a:	2304      	movs	r3, #4
   1523c:	483e      	ldr	r0, [pc, #248]	; (15338 <send_frag+0x1dc>)
   1523e:	f842 3f10 	str.w	r3, [r2, #16]!
   15242:	f017 f800 	bl	2c246 <z_log_msg_static_create.constprop.0>
   15246:	46dd      	mov	sp, fp
	__asm__ volatile(
   15248:	f04f 0320 	mov.w	r3, #32
   1524c:	f3ef 8111 	mrs	r1, BASEPRI
   15250:	f383 8812 	msr	BASEPRI_MAX, r3
   15254:	f3bf 8f6f 	isb	sy
		if (tx) {
   15258:	2d00      	cmp	r5, #0
   1525a:	d04e      	beq.n	152fa <send_frag+0x19e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1525c:	2200      	movs	r2, #0
	return list->head;
   1525e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15260:	b15b      	cbz	r3, 1527a <send_frag+0x11e>
   15262:	429d      	cmp	r5, r3
   15264:	d146      	bne.n	152f4 <send_frag+0x198>
	return node->next;
   15266:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   15268:	2a00      	cmp	r2, #0
   1526a:	d13d      	bne.n	152e8 <send_frag+0x18c>
   1526c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1526e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   15270:	4295      	cmp	r5, r2
   15272:	d100      	bne.n	15276 <send_frag+0x11a>
	list->tail = node;
   15274:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   15276:	2300      	movs	r3, #0
   15278:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1527a:	f381 8811 	msr	BASEPRI, r1
   1527e:	f3bf 8f6f 	isb	sy
		err = -EIO;
   15282:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   15286:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   1528a:	482c      	ldr	r0, [pc, #176]	; (1533c <send_frag+0x1e0>)
   1528c:	2b00      	cmp	r3, #0
   1528e:	bf08      	it	eq
   15290:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   15292:	f00f ff7d 	bl	25190 <z_impl_k_sem_give>
	if (tx) {
   15296:	b12d      	cbz	r5, 152a4 <send_frag+0x148>
		tx_data(buf)->tx = NULL;
   15298:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1529a:	4629      	mov	r1, r5
   1529c:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   1529e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   152a0:	f7ff ff36 	bl	15110 <conn_tx_destroy>
}
   152a4:	4640      	mov	r0, r8
   152a6:	370c      	adds	r7, #12
   152a8:	46bd      	mov	sp, r7
   152aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   152ae:	4658      	mov	r0, fp
   152b0:	f018 f977 	bl	2d5a2 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   152b4:	b282      	uxth	r2, r0
   152b6:	e77a      	b.n	151ae <send_frag+0x52>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   152b8:	2200      	movs	r2, #0
   152ba:	2300      	movs	r3, #0
   152bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   152c0:	f018 f953 	bl	2d56a <net_buf_get>
   152c4:	4606      	mov	r6, r0
		frag = buf;
   152c6:	e77d      	b.n	151c4 <send_frag+0x68>
   152c8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   152ca:	61a5      	str	r5, [r4, #24]
}
   152cc:	e790      	b.n	151f0 <send_frag+0x94>
	return list->tail;
   152ce:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   152d0:	b133      	cbz	r3, 152e0 <send_frag+0x184>
			pending_no_cb = &tail_tx->pending_no_cb;
   152d2:	f103 0a0c 	add.w	sl, r3, #12
   152d6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   152d8:	3301      	adds	r3, #1
   152da:	f8ca 3000 	str.w	r3, [sl]
   152de:	e787      	b.n	151f0 <send_frag+0x94>
			pending_no_cb = &conn->pending_no_cb;
   152e0:	69e3      	ldr	r3, [r4, #28]
   152e2:	f104 0a1c 	add.w	sl, r4, #28
   152e6:	e7f7      	b.n	152d8 <send_frag+0x17c>
	parent->next = child;
   152e8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   152ea:	69a3      	ldr	r3, [r4, #24]
   152ec:	429d      	cmp	r5, r3
	list->tail = node;
   152ee:	bf08      	it	eq
   152f0:	61a2      	streq	r2, [r4, #24]
}
   152f2:	e7c0      	b.n	15276 <send_frag+0x11a>
	return node->next;
   152f4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   152f6:	681b      	ldr	r3, [r3, #0]
   152f8:	e7b2      	b.n	15260 <send_frag+0x104>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   152fa:	f8da 3000 	ldr.w	r3, [sl]
   152fe:	b95b      	cbnz	r3, 15318 <send_frag+0x1bc>
   15300:	490f      	ldr	r1, [pc, #60]	; (15340 <send_frag+0x1e4>)
   15302:	4810      	ldr	r0, [pc, #64]	; (15344 <send_frag+0x1e8>)
   15304:	f240 2351 	movw	r3, #593	; 0x251
   15308:	4a0f      	ldr	r2, [pc, #60]	; (15348 <send_frag+0x1ec>)
   1530a:	f015 fd55 	bl	2adb8 <assert_print>
   1530e:	f240 2151 	movw	r1, #593	; 0x251
   15312:	480d      	ldr	r0, [pc, #52]	; (15348 <send_frag+0x1ec>)
   15314:	f015 fd49 	bl	2adaa <assert_post_action>
			(*pending_no_cb)--;
   15318:	3b01      	subs	r3, #1
   1531a:	f8ca 3000 	str.w	r3, [sl]
   1531e:	e7ac      	b.n	1527a <send_frag+0x11e>
		err = -ENOTCONN;
   15320:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   15324:	e7af      	b.n	15286 <send_frag+0x12a>
		return -ENOBUFS;
   15326:	f06f 0868 	mvn.w	r8, #104	; 0x68
   1532a:	e7bb      	b.n	152a4 <send_frag+0x148>
   1532c:	2000c580 	.word	0x2000c580
   15330:	00035cfe 	.word	0x00035cfe
   15334:	00036aac 	.word	0x00036aac
   15338:	00031b8c 	.word	0x00031b8c
   1533c:	2000c688 	.word	0x2000c688
   15340:	00036670 	.word	0x00036670
   15344:	00033bc2 	.word	0x00033bc2
   15348:	00036622 	.word	0x00036622

0001534c <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   1534c:	4804      	ldr	r0, [pc, #16]	; (15360 <bt_conn_get_pkts+0x14>)
   1534e:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   15352:	f500 7084 	add.w	r0, r0, #264	; 0x108
   15356:	2b00      	cmp	r3, #0
}
   15358:	bf08      	it	eq
   1535a:	2000      	moveq	r0, #0
   1535c:	4770      	bx	lr
   1535e:	bf00      	nop
   15360:	2000c580 	.word	0x2000c580

00015364 <bt_conn_new>:
{
   15364:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   15366:	2200      	movs	r2, #0
   15368:	4604      	mov	r4, r0
   1536a:	428a      	cmp	r2, r1
   1536c:	d102      	bne.n	15374 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1536e:	2400      	movs	r4, #0
}
   15370:	4620      	mov	r0, r4
   15372:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15374:	2001      	movs	r0, #1
   15376:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1537a:	e8d3 5fef 	ldaex	r5, [r3]
   1537e:	2d00      	cmp	r5, #0
   15380:	d104      	bne.n	1538c <bt_conn_new+0x28>
   15382:	e8c3 0fec 	stlex	ip, r0, [r3]
   15386:	f1bc 0f00 	cmp.w	ip, #0
   1538a:	d1f6      	bne.n	1537a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1538c:	d002      	beq.n	15394 <bt_conn_new+0x30>
   1538e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   15390:	4402      	add	r2, r0
   15392:	e7ea      	b.n	1536a <bt_conn_new+0x6>
	if (!conn) {
   15394:	2c00      	cmp	r4, #0
   15396:	d0ea      	beq.n	1536e <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   15398:	22c0      	movs	r2, #192	; 0xc0
   1539a:	2100      	movs	r1, #0
   1539c:	4620      	mov	r0, r4
   1539e:	f01b fa70 	bl	30882 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   153a2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   153a6:	4904      	ldr	r1, [pc, #16]	; (153b8 <bt_conn_new+0x54>)
   153a8:	f010 fae8 	bl	2597c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   153ac:	4903      	ldr	r1, [pc, #12]	; (153bc <bt_conn_new+0x58>)
   153ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   153b2:	f010 f995 	bl	256e0 <k_work_init>
	return conn;
   153b6:	e7db      	b.n	15370 <bt_conn_new+0xc>
   153b8:	00015fb5 	.word	0x00015fb5
   153bc:	0002c24d 	.word	0x0002c24d

000153c0 <conn_cleanup>:
{
   153c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153c4:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   153c6:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   153c8:	f104 0638 	add.w	r6, r4, #56	; 0x38
   153cc:	2300      	movs	r3, #0
   153ce:	2200      	movs	r2, #0
   153d0:	4630      	mov	r0, r6
   153d2:	f018 f8ca 	bl	2d56a <net_buf_get>
   153d6:	4603      	mov	r3, r0
   153d8:	b980      	cbnz	r0, 153fc <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   153da:	6963      	ldr	r3, [r4, #20]
   153dc:	b1cb      	cbz	r3, 15412 <conn_cleanup+0x52>
   153de:	4918      	ldr	r1, [pc, #96]	; (15440 <conn_cleanup+0x80>)
   153e0:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   153e4:	4a17      	ldr	r2, [pc, #92]	; (15444 <conn_cleanup+0x84>)
   153e6:	4818      	ldr	r0, [pc, #96]	; (15448 <conn_cleanup+0x88>)
   153e8:	f015 fce6 	bl	2adb8 <assert_print>
   153ec:	4817      	ldr	r0, [pc, #92]	; (1544c <conn_cleanup+0x8c>)
   153ee:	f015 fce3 	bl	2adb8 <assert_print>
   153f2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   153f6:	4813      	ldr	r0, [pc, #76]	; (15444 <conn_cleanup+0x84>)
   153f8:	f015 fcd7 	bl	2adaa <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   153fc:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   153fe:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   15400:	f004 fb88 	bl	19b14 <net_buf_unref>
		if (tx) {
   15404:	2d00      	cmp	r5, #0
   15406:	d0e1      	beq.n	153cc <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   15408:	4629      	mov	r1, r5
   1540a:	4620      	mov	r0, r4
   1540c:	f7ff fe80 	bl	15110 <conn_tx_destroy>
   15410:	e7da      	b.n	153c8 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   15412:	69e3      	ldr	r3, [r4, #28]
   15414:	b14b      	cbz	r3, 1542a <conn_cleanup+0x6a>
   15416:	490e      	ldr	r1, [pc, #56]	; (15450 <conn_cleanup+0x90>)
   15418:	f240 23f1 	movw	r3, #753	; 0x2f1
   1541c:	4a09      	ldr	r2, [pc, #36]	; (15444 <conn_cleanup+0x84>)
   1541e:	480a      	ldr	r0, [pc, #40]	; (15448 <conn_cleanup+0x88>)
   15420:	f015 fcca 	bl	2adb8 <assert_print>
   15424:	f240 21f1 	movw	r1, #753	; 0x2f1
   15428:	e7e5      	b.n	153f6 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   1542a:	4620      	mov	r0, r4
   1542c:	f016 ff11 	bl	2c252 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   15430:	f104 0060 	add.w	r0, r4, #96	; 0x60
   15434:	2200      	movs	r2, #0
}
   15436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1543a:	2300      	movs	r3, #0
   1543c:	f010 bbba 	b.w	25bb4 <k_work_reschedule>
   15440:	00036683 	.word	0x00036683
   15444:	00036622 	.word	0x00036622
   15448:	00033bc2 	.word	0x00033bc2
   1544c:	000366a9 	.word	0x000366a9
   15450:	000366be 	.word	0x000366be

00015454 <bt_conn_recv>:
{
   15454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15458:	4616      	mov	r6, r2
   1545a:	af00      	add	r7, sp, #0
   1545c:	4604      	mov	r4, r0
   1545e:	460d      	mov	r5, r1
	tx_notify(conn);
   15460:	f7ff fe26 	bl	150b0 <tx_notify>
	switch (flags) {
   15464:	2e01      	cmp	r6, #1
   15466:	d038      	beq.n	154da <bt_conn_recv+0x86>
   15468:	2e02      	cmp	r6, #2
   1546a:	d17b      	bne.n	15564 <bt_conn_recv+0x110>
		if (conn->rx) {
   1546c:	6923      	ldr	r3, [r4, #16]
   1546e:	b193      	cbz	r3, 15496 <bt_conn_recv+0x42>
			LOG_ERR("Unexpected first L2CAP frame");
   15470:	466e      	mov	r6, sp
   15472:	b088      	sub	sp, #32
   15474:	466a      	mov	r2, sp
   15476:	4b48      	ldr	r3, [pc, #288]	; (15598 <bt_conn_recv+0x144>)
   15478:	4848      	ldr	r0, [pc, #288]	; (1559c <bt_conn_recv+0x148>)
   1547a:	6153      	str	r3, [r2, #20]
   1547c:	4b48      	ldr	r3, [pc, #288]	; (155a0 <bt_conn_recv+0x14c>)
   1547e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15482:	6193      	str	r3, [r2, #24]
   15484:	2303      	movs	r3, #3
   15486:	f842 3f10 	str.w	r3, [r2, #16]!
   1548a:	f016 fedc 	bl	2c246 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1548e:	4620      	mov	r0, r4
   15490:	46b5      	mov	sp, r6
   15492:	f016 fede 	bl	2c252 <bt_conn_reset_rx_state>
		conn->rx = buf;
   15496:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   15498:	6921      	ldr	r1, [r4, #16]
   1549a:	8a08      	ldrh	r0, [r1, #16]
   1549c:	2801      	cmp	r0, #1
   1549e:	d937      	bls.n	15510 <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   154a0:	68cb      	ldr	r3, [r1, #12]
   154a2:	881b      	ldrh	r3, [r3, #0]
   154a4:	3304      	adds	r3, #4
   154a6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   154a8:	4298      	cmp	r0, r3
   154aa:	d331      	bcc.n	15510 <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   154ac:	d96d      	bls.n	1558a <bt_conn_recv+0x136>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   154ae:	466d      	mov	r5, sp
   154b0:	b08a      	sub	sp, #40	; 0x28
   154b2:	466a      	mov	r2, sp
   154b4:	6213      	str	r3, [r2, #32]
   154b6:	2305      	movs	r3, #5
   154b8:	493a      	ldr	r1, [pc, #232]	; (155a4 <bt_conn_recv+0x150>)
   154ba:	6151      	str	r1, [r2, #20]
   154bc:	4938      	ldr	r1, [pc, #224]	; (155a0 <bt_conn_recv+0x14c>)
   154be:	e9c2 1006 	strd	r1, r0, [r2, #24]
   154c2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   154c6:	4835      	ldr	r0, [pc, #212]	; (1559c <bt_conn_recv+0x148>)
   154c8:	f842 3f10 	str.w	r3, [r2, #16]!
   154cc:	f016 febb 	bl	2c246 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   154d0:	4620      	mov	r0, r4
   154d2:	46ad      	mov	sp, r5
   154d4:	f016 febd 	bl	2c252 <bt_conn_reset_rx_state>
		return;
   154d8:	e01a      	b.n	15510 <bt_conn_recv+0xbc>
		if (!conn->rx) {
   154da:	6920      	ldr	r0, [r4, #16]
   154dc:	b998      	cbnz	r0, 15506 <bt_conn_recv+0xb2>
			LOG_ERR("Unexpected L2CAP continuation");
   154de:	466e      	mov	r6, sp
   154e0:	b088      	sub	sp, #32
   154e2:	466a      	mov	r2, sp
   154e4:	4b30      	ldr	r3, [pc, #192]	; (155a8 <bt_conn_recv+0x154>)
   154e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154ea:	6153      	str	r3, [r2, #20]
   154ec:	4b2c      	ldr	r3, [pc, #176]	; (155a0 <bt_conn_recv+0x14c>)
   154ee:	482b      	ldr	r0, [pc, #172]	; (1559c <bt_conn_recv+0x148>)
   154f0:	6193      	str	r3, [r2, #24]
   154f2:	2303      	movs	r3, #3
   154f4:	f842 3f10 	str.w	r3, [r2, #16]!
   154f8:	f016 fea5 	bl	2c246 <z_log_msg_static_create.constprop.0>
   154fc:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   154fe:	4620      	mov	r0, r4
   15500:	f016 fea7 	bl	2c252 <bt_conn_reset_rx_state>
   15504:	e001      	b.n	1550a <bt_conn_recv+0xb6>
		if (!buf->len) {
   15506:	8a2e      	ldrh	r6, [r5, #16]
   15508:	b92e      	cbnz	r6, 15516 <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   1550a:	4628      	mov	r0, r5
   1550c:	f004 fb02 	bl	19b14 <net_buf_unref>
}
   15510:	46bd      	mov	sp, r7
   15512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15516:	300c      	adds	r0, #12
   15518:	f018 f843 	bl	2d5a2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1551c:	4286      	cmp	r6, r0
   1551e:	d917      	bls.n	15550 <bt_conn_recv+0xfc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   15520:	466e      	mov	r6, sp
   15522:	b088      	sub	sp, #32
   15524:	466a      	mov	r2, sp
   15526:	4b21      	ldr	r3, [pc, #132]	; (155ac <bt_conn_recv+0x158>)
   15528:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1552c:	6153      	str	r3, [r2, #20]
   1552e:	4b1c      	ldr	r3, [pc, #112]	; (155a0 <bt_conn_recv+0x14c>)
   15530:	481a      	ldr	r0, [pc, #104]	; (1559c <bt_conn_recv+0x148>)
   15532:	6193      	str	r3, [r2, #24]
   15534:	2303      	movs	r3, #3
   15536:	f842 3f10 	str.w	r3, [r2, #16]!
   1553a:	f016 fe84 	bl	2c246 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1553e:	2200      	movs	r2, #0
   15540:	46b5      	mov	sp, r6
   15542:	4620      	mov	r0, r4
   15544:	6921      	ldr	r1, [r4, #16]
   15546:	f001 f803 	bl	16550 <bt_l2cap_recv>
			conn->rx = NULL;
   1554a:	2300      	movs	r3, #0
   1554c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1554e:	e7dc      	b.n	1550a <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15550:	6920      	ldr	r0, [r4, #16]
   15552:	8a2a      	ldrh	r2, [r5, #16]
   15554:	68e9      	ldr	r1, [r5, #12]
   15556:	300c      	adds	r0, #12
   15558:	f018 f82b 	bl	2d5b2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1555c:	4628      	mov	r0, r5
   1555e:	f004 fad9 	bl	19b14 <net_buf_unref>
		break;
   15562:	e799      	b.n	15498 <bt_conn_recv+0x44>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   15564:	46e8      	mov	r8, sp
   15566:	b088      	sub	sp, #32
   15568:	466b      	mov	r3, sp
   1556a:	4a11      	ldr	r2, [pc, #68]	; (155b0 <bt_conn_recv+0x15c>)
   1556c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15570:	615a      	str	r2, [r3, #20]
   15572:	4a0b      	ldr	r2, [pc, #44]	; (155a0 <bt_conn_recv+0x14c>)
   15574:	4809      	ldr	r0, [pc, #36]	; (1559c <bt_conn_recv+0x148>)
	switch (flags) {
   15576:	e9c3 2606 	strd	r2, r6, [r3, #24]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1557a:	461a      	mov	r2, r3
   1557c:	2304      	movs	r3, #4
   1557e:	f842 3f10 	str.w	r3, [r2, #16]!
   15582:	f016 fe60 	bl	2c246 <z_log_msg_static_create.constprop.0>
   15586:	46c5      	mov	sp, r8
   15588:	e7b9      	b.n	154fe <bt_conn_recv+0xaa>
	conn->rx = NULL;
   1558a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1558c:	2201      	movs	r2, #1
   1558e:	4620      	mov	r0, r4
	conn->rx = NULL;
   15590:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   15592:	f000 ffdd 	bl	16550 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   15596:	e7bb      	b.n	15510 <bt_conn_recv+0xbc>
   15598:	000366d7 	.word	0x000366d7
   1559c:	00031b8c 	.word	0x00031b8c
   155a0:	00036ac9 	.word	0x00036ac9
   155a4:	00036767 	.word	0x00036767
   155a8:	000366f8 	.word	0x000366f8
   155ac:	0003671a 	.word	0x0003671a
   155b0:	00036745 	.word	0x00036745

000155b4 <bt_conn_send_cb>:
{
   155b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155b8:	4699      	mov	r9, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   155ba:	7acb      	ldrb	r3, [r1, #11]
{
   155bc:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   155be:	2b07      	cmp	r3, #7
{
   155c0:	460d      	mov	r5, r1
   155c2:	4690      	mov	r8, r2
   155c4:	af00      	add	r7, sp, #0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   155c6:	d814      	bhi.n	155f2 <bt_conn_send_cb+0x3e>
		LOG_ERR("not enough room in user_data");
   155c8:	466c      	mov	r4, sp
   155ca:	b088      	sub	sp, #32
   155cc:	466a      	mov	r2, sp
   155ce:	4b34      	ldr	r3, [pc, #208]	; (156a0 <bt_conn_send_cb+0xec>)
   155d0:	4834      	ldr	r0, [pc, #208]	; (156a4 <bt_conn_send_cb+0xf0>)
   155d2:	6153      	str	r3, [r2, #20]
   155d4:	4b34      	ldr	r3, [pc, #208]	; (156a8 <bt_conn_send_cb+0xf4>)
   155d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   155da:	6193      	str	r3, [r2, #24]
   155dc:	2303      	movs	r3, #3
   155de:	f842 3f10 	str.w	r3, [r2, #16]!
   155e2:	f016 fe30 	bl	2c246 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   155e6:	f06f 0015 	mvn.w	r0, #21
   155ea:	46a5      	mov	sp, r4
}
   155ec:	46bd      	mov	sp, r7
   155ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   155f2:	7a83      	ldrb	r3, [r0, #10]
   155f4:	2b07      	cmp	r3, #7
   155f6:	d012      	beq.n	1561e <bt_conn_send_cb+0x6a>
		LOG_ERR("not connected!");
   155f8:	466c      	mov	r4, sp
   155fa:	b088      	sub	sp, #32
   155fc:	466a      	mov	r2, sp
   155fe:	4b2b      	ldr	r3, [pc, #172]	; (156ac <bt_conn_send_cb+0xf8>)
   15600:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15604:	6153      	str	r3, [r2, #20]
   15606:	4b28      	ldr	r3, [pc, #160]	; (156a8 <bt_conn_send_cb+0xf4>)
   15608:	4826      	ldr	r0, [pc, #152]	; (156a4 <bt_conn_send_cb+0xf0>)
   1560a:	6193      	str	r3, [r2, #24]
   1560c:	2303      	movs	r3, #3
   1560e:	f842 3f10 	str.w	r3, [r2, #16]!
   15612:	f016 fe18 	bl	2c246 <z_log_msg_static_create.constprop.0>
   15616:	46a5      	mov	sp, r4
		return -ENOTCONN;
   15618:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1561c:	e7e6      	b.n	155ec <bt_conn_send_cb+0x38>
	if (cb) {
   1561e:	2a00      	cmp	r2, #0
   15620:	d039      	beq.n	15696 <bt_conn_send_cb+0xe2>
	return z_impl_z_current_get();
   15622:	f011 fc3b 	bl	26e9c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15626:	4b22      	ldr	r3, [pc, #136]	; (156b0 <bt_conn_send_cb+0xfc>)
   15628:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1562a:	4822      	ldr	r0, [pc, #136]	; (156b4 <bt_conn_send_cb+0x100>)
   1562c:	bf07      	ittee	eq
   1562e:	2200      	moveq	r2, #0
   15630:	2300      	moveq	r3, #0
   15632:	f04f 32ff 	movne.w	r2, #4294967295
   15636:	f04f 33ff 	movne.w	r3, #4294967295
   1563a:	f00f fd3f 	bl	250bc <z_impl_k_queue_get>
   1563e:	4604      	mov	r4, r0
		if (!tx) {
   15640:	b358      	cbz	r0, 1569a <bt_conn_send_cb+0xe6>
		if (conn->state != BT_CONN_CONNECTED) {
   15642:	7ab3      	ldrb	r3, [r6, #10]
   15644:	2b07      	cmp	r3, #7
   15646:	d018      	beq.n	1567a <bt_conn_send_cb+0xc6>
			LOG_WRN("Disconnected while allocating context");
   15648:	466d      	mov	r5, sp
   1564a:	b088      	sub	sp, #32
   1564c:	466a      	mov	r2, sp
   1564e:	4b1a      	ldr	r3, [pc, #104]	; (156b8 <bt_conn_send_cb+0x104>)
   15650:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15654:	6153      	str	r3, [r2, #20]
   15656:	4b14      	ldr	r3, [pc, #80]	; (156a8 <bt_conn_send_cb+0xf4>)
   15658:	4812      	ldr	r0, [pc, #72]	; (156a4 <bt_conn_send_cb+0xf0>)
   1565a:	6193      	str	r3, [r2, #24]
   1565c:	2303      	movs	r3, #3
   1565e:	f842 3f10 	str.w	r3, [r2, #16]!
   15662:	f016 fdf0 	bl	2c246 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   15666:	2300      	movs	r3, #0
   15668:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   1566a:	4621      	mov	r1, r4
	tx->user_data = NULL;
   1566c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   15670:	4810      	ldr	r0, [pc, #64]	; (156b4 <bt_conn_send_cb+0x100>)
	tx->pending_no_cb = 0U;
   15672:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   15674:	f01a feef 	bl	30456 <k_queue_append>
}
   15678:	e7ce      	b.n	15618 <bt_conn_send_cb+0x64>
		tx->pending_no_cb = 0U;
   1567a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1567c:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   15680:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15682:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   15684:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   15686:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1568a:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
   1568c:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   1568e:	f004 fa1b 	bl	19ac8 <net_buf_put>
	return 0;
   15692:	4620      	mov	r0, r4
   15694:	e7aa      	b.n	155ec <bt_conn_send_cb+0x38>
   15696:	4614      	mov	r4, r2
   15698:	e7f3      	b.n	15682 <bt_conn_send_cb+0xce>
			return -ENOBUFS;
   1569a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1569e:	e7a5      	b.n	155ec <bt_conn_send_cb+0x38>
   156a0:	00036786 	.word	0x00036786
   156a4:	00031b8c 	.word	0x00031b8c
   156a8:	00036ab9 	.word	0x00036ab9
   156ac:	000367a7 	.word	0x000367a7
   156b0:	2000ded0 	.word	0x2000ded0
   156b4:	2000cf50 	.word	0x2000cf50
   156b8:	000367ba 	.word	0x000367ba

000156bc <bt_conn_prepare_events>:
{
   156bc:	b570      	push	{r4, r5, r6, lr}
   156be:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   156c0:	481e      	ldr	r0, [pc, #120]	; (1573c <bt_conn_prepare_events+0x80>)
   156c2:	f01b f879 	bl	307b8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   156c6:	4620      	mov	r0, r4
   156c8:	2200      	movs	r2, #0
   156ca:	2101      	movs	r1, #1
   156cc:	4b1b      	ldr	r3, [pc, #108]	; (1573c <bt_conn_prepare_events+0x80>)
   156ce:	f012 fa8b 	bl	27be8 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   156d2:	481b      	ldr	r0, [pc, #108]	; (15740 <bt_conn_prepare_events+0x84>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   156d4:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   156d8:	f016 fdb2 	bl	2c240 <atomic_get>
   156dc:	b908      	cbnz	r0, 156e2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   156de:	2001      	movs	r0, #1
}
   156e0:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   156e2:	4818      	ldr	r0, [pc, #96]	; (15744 <bt_conn_prepare_events+0x88>)
   156e4:	7a83      	ldrb	r3, [r0, #10]
   156e6:	b96b      	cbnz	r3, 15704 <bt_conn_prepare_events+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156e8:	1d03      	adds	r3, r0, #4
   156ea:	e8d3 2fef 	ldaex	r2, [r3]
   156ee:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   156f2:	e8c3 1fe6 	stlex	r6, r1, [r3]
   156f6:	2e00      	cmp	r6, #0
   156f8:	d1f7      	bne.n	156ea <bt_conn_prepare_events+0x2e>
   156fa:	0653      	lsls	r3, r2, #25
   156fc:	d502      	bpl.n	15704 <bt_conn_prepare_events+0x48>
		conn_cleanup(conn);
   156fe:	f7ff fe5f 	bl	153c0 <conn_cleanup>
		return -ENOTCONN;
   15702:	e7ec      	b.n	156de <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   15704:	7a83      	ldrb	r3, [r0, #10]
   15706:	2b07      	cmp	r3, #7
   15708:	d1e9      	bne.n	156de <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
   1570a:	4b0f      	ldr	r3, [pc, #60]	; (15748 <bt_conn_prepare_events+0x8c>)
   1570c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   15710:	2a00      	cmp	r2, #0
   15712:	d0e4      	beq.n	156de <bt_conn_prepare_events+0x22>
	return sem->count;
   15714:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   15718:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1571a:	b159      	cbz	r1, 15734 <bt_conn_prepare_events+0x78>
   1571c:	b952      	cbnz	r2, 15734 <bt_conn_prepare_events+0x78>
		k_poll_event_init(&events[0],
   1571e:	2102      	movs	r1, #2
   15720:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
   15724:	4628      	mov	r0, r5
   15726:	f012 fa5f 	bl	27be8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1572a:	2301      	movs	r3, #1
			ev_count++;
   1572c:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1572e:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   15732:	e7d5      	b.n	156e0 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
   15734:	2200      	movs	r2, #0
   15736:	2104      	movs	r1, #4
   15738:	4b04      	ldr	r3, [pc, #16]	; (1574c <bt_conn_prepare_events+0x90>)
   1573a:	e7f3      	b.n	15724 <bt_conn_prepare_events+0x68>
   1573c:	2000c878 	.word	0x2000c878
   15740:	2000d9b0 	.word	0x2000d9b0
   15744:	2000d8f0 	.word	0x2000d8f0
   15748:	2000c580 	.word	0x2000c580
   1574c:	2000d928 	.word	0x2000d928

00015750 <bt_conn_ref>:
	__ASSERT_NO_MSG(conn);
   15750:	4603      	mov	r3, r0
{
   15752:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   15754:	b190      	cbz	r0, 1577c <bt_conn_ref+0x2c>
		old = atomic_get(&conn->ref);
   15756:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   1575a:	4610      	mov	r0, r2
   1575c:	f016 fd70 	bl	2c240 <atomic_get>
		if (!old) {
   15760:	b1c0      	cbz	r0, 15794 <bt_conn_ref+0x44>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   15762:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15764:	e8d2 4fef 	ldaex	r4, [r2]
   15768:	4284      	cmp	r4, r0
   1576a:	d104      	bne.n	15776 <bt_conn_ref+0x26>
   1576c:	e8c2 1fec 	stlex	ip, r1, [r2]
   15770:	f1bc 0f00 	cmp.w	ip, #0
   15774:	d1f6      	bne.n	15764 <bt_conn_ref+0x14>
   15776:	d1f0      	bne.n	1575a <bt_conn_ref+0xa>
}
   15778:	4618      	mov	r0, r3
   1577a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1577c:	4906      	ldr	r1, [pc, #24]	; (15798 <bt_conn_ref+0x48>)
   1577e:	4807      	ldr	r0, [pc, #28]	; (1579c <bt_conn_ref+0x4c>)
   15780:	f240 43db 	movw	r3, #1243	; 0x4db
   15784:	4a06      	ldr	r2, [pc, #24]	; (157a0 <bt_conn_ref+0x50>)
   15786:	f015 fb17 	bl	2adb8 <assert_print>
   1578a:	f240 41db 	movw	r1, #1243	; 0x4db
   1578e:	4804      	ldr	r0, [pc, #16]	; (157a0 <bt_conn_ref+0x50>)
   15790:	f015 fb0b 	bl	2adaa <assert_post_action>
			return NULL;
   15794:	4603      	mov	r3, r0
   15796:	e7ef      	b.n	15778 <bt_conn_ref+0x28>
   15798:	00035d7c 	.word	0x00035d7c
   1579c:	00033bc2 	.word	0x00033bc2
   157a0:	00036622 	.word	0x00036622

000157a4 <bt_conn_unref>:
{
   157a4:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   157a6:	30c0      	adds	r0, #192	; 0xc0
   157a8:	e8d0 3fef 	ldaex	r3, [r0]
   157ac:	1e5a      	subs	r2, r3, #1
   157ae:	e8c0 2fe1 	stlex	r1, r2, [r0]
   157b2:	2900      	cmp	r1, #0
   157b4:	d1f8      	bne.n	157a8 <bt_conn_unref+0x4>
	__ASSERT(old > 0, "Conn reference counter is 0");
   157b6:	2b00      	cmp	r3, #0
   157b8:	dc0e      	bgt.n	157d8 <bt_conn_unref+0x34>
   157ba:	4908      	ldr	r1, [pc, #32]	; (157dc <bt_conn_unref+0x38>)
   157bc:	f240 43f7 	movw	r3, #1271	; 0x4f7
   157c0:	4a07      	ldr	r2, [pc, #28]	; (157e0 <bt_conn_unref+0x3c>)
   157c2:	4808      	ldr	r0, [pc, #32]	; (157e4 <bt_conn_unref+0x40>)
   157c4:	f015 faf8 	bl	2adb8 <assert_print>
   157c8:	4807      	ldr	r0, [pc, #28]	; (157e8 <bt_conn_unref+0x44>)
   157ca:	f015 faf5 	bl	2adb8 <assert_print>
   157ce:	f240 41f7 	movw	r1, #1271	; 0x4f7
   157d2:	4803      	ldr	r0, [pc, #12]	; (157e0 <bt_conn_unref+0x3c>)
   157d4:	f015 fae9 	bl	2adaa <assert_post_action>
}
   157d8:	bd08      	pop	{r3, pc}
   157da:	bf00      	nop
   157dc:	000367e4 	.word	0x000367e4
   157e0:	00036622 	.word	0x00036622
   157e4:	00033bc2 	.word	0x00033bc2
   157e8:	000367ec 	.word	0x000367ec

000157ec <bt_conn_lookup_handle>:
{
   157ec:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   157ee:	2101      	movs	r1, #1
   157f0:	4801      	ldr	r0, [pc, #4]	; (157f8 <bt_conn_lookup_handle+0xc>)
   157f2:	f016 bd37 	b.w	2c264 <conn_lookup_handle>
   157f6:	bf00      	nop
   157f8:	2000d8f0 	.word	0x2000d8f0

000157fc <bt_conn_set_state>:
{
   157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   15800:	7a85      	ldrb	r5, [r0, #10]
{
   15802:	4604      	mov	r4, r0
	if (conn->state == state) {
   15804:	428d      	cmp	r5, r1
{
   15806:	460e      	mov	r6, r1
   15808:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   1580a:	d11b      	bne.n	15844 <bt_conn_set_state+0x48>
	switch (state) {
   1580c:	2d08      	cmp	r5, #8
   1580e:	bf98      	it	ls
   15810:	4b7f      	ldrls	r3, [pc, #508]	; (15a10 <bt_conn_set_state+0x214>)
		LOG_WRN("no transition %s", state2str(state));
   15812:	466c      	mov	r4, sp
   15814:	b08a      	sub	sp, #40	; 0x28
   15816:	bf94      	ite	ls
   15818:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
	if (conn->state == state) {
   1581c:	4b7d      	ldrhi	r3, [pc, #500]	; (15a14 <bt_conn_set_state+0x218>)
		LOG_WRN("no transition %s", state2str(state));
   1581e:	466a      	mov	r2, sp
   15820:	497d      	ldr	r1, [pc, #500]	; (15a18 <bt_conn_set_state+0x21c>)
   15822:	6151      	str	r1, [r2, #20]
   15824:	497d      	ldr	r1, [pc, #500]	; (15a1c <bt_conn_set_state+0x220>)
   15826:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1582a:	f240 3301 	movw	r3, #769	; 0x301
   1582e:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   15832:	8413      	strh	r3, [r2, #32]
   15834:	4b7a      	ldr	r3, [pc, #488]	; (15a20 <bt_conn_set_state+0x224>)
   15836:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   1583a:	487a      	ldr	r0, [pc, #488]	; (15a24 <bt_conn_set_state+0x228>)
   1583c:	f016 fd03 	bl	2c246 <z_log_msg_static_create.constprop.0>
   15840:	46a5      	mov	sp, r4
   15842:	e049      	b.n	158d8 <bt_conn_set_state+0xdc>
	conn->state = state;
   15844:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15846:	b165      	cbz	r5, 15862 <bt_conn_set_state+0x66>
   15848:	2d06      	cmp	r5, #6
   1584a:	d010      	beq.n	1586e <bt_conn_set_state+0x72>
	switch (conn->state) {
   1584c:	7aa3      	ldrb	r3, [r4, #10]
   1584e:	2b08      	cmp	r3, #8
   15850:	f200 80d9 	bhi.w	15a06 <bt_conn_set_state+0x20a>
   15854:	e8df f003 	tbb	[pc, r3]
   15858:	40401243 	.word	0x40401243
   1585c:	32964040 	.word	0x32964040
   15860:	40          	.byte	0x40
   15861:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   15862:	7883      	ldrb	r3, [r0, #2]
   15864:	2b08      	cmp	r3, #8
   15866:	d0f1      	beq.n	1584c <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   15868:	f7ff ff72 	bl	15750 <bt_conn_ref>
   1586c:	e7ee      	b.n	1584c <bt_conn_set_state+0x50>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1586e:	7883      	ldrb	r3, [r0, #2]
   15870:	2b01      	cmp	r3, #1
   15872:	d1eb      	bne.n	1584c <bt_conn_set_state+0x50>
			k_work_cancel_delayable(&conn->deferred_work);
   15874:	3060      	adds	r0, #96	; 0x60
   15876:	f010 f9a3 	bl	25bc0 <k_work_cancel_delayable>
   1587a:	e7e7      	b.n	1584c <bt_conn_set_state+0x50>
		tx->pending_no_cb = 0U;
   1587c:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
   15880:	4d69      	ldr	r5, [pc, #420]	; (15a28 <bt_conn_set_state+0x22c>)
	return NULL;
   15882:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   15886:	f04f 0220 	mov.w	r2, #32
   1588a:	f3ef 8311 	mrs	r3, BASEPRI
   1588e:	f382 8812 	msr	BASEPRI_MAX, r2
   15892:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15896:	69e2      	ldr	r2, [r4, #28]
   15898:	2a00      	cmp	r2, #0
   1589a:	f000 808f 	beq.w	159bc <bt_conn_set_state+0x1c0>
			conn->pending_no_cb--;
   1589e:	3a01      	subs	r2, #1
   158a0:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   158a2:	f383 8811 	msr	BASEPRI, r3
   158a6:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   158aa:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   158ae:	2b00      	cmp	r3, #0
   158b0:	bf14      	ite	ne
   158b2:	4630      	movne	r0, r6
   158b4:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   158b6:	f00f fc6b 	bl	25190 <z_impl_k_sem_give>
}
   158ba:	e7e4      	b.n	15886 <bt_conn_set_state+0x8a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   158bc:	78a3      	ldrb	r3, [r4, #2]
   158be:	2b04      	cmp	r3, #4
   158c0:	d00a      	beq.n	158d8 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   158c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   158c6:	f01a fdb9 	bl	3043c <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   158ca:	2100      	movs	r1, #0
   158cc:	4857      	ldr	r0, [pc, #348]	; (15a2c <bt_conn_set_state+0x230>)
   158ce:	f012 faa9 	bl	27e24 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   158d2:	2300      	movs	r3, #0
	list->tail = NULL;
   158d4:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   158d8:	46bd      	mov	sp, r7
   158da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   158de:	78a3      	ldrb	r3, [r4, #2]
   158e0:	2b04      	cmp	r3, #4
   158e2:	d103      	bne.n	158ec <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   158e4:	4620      	mov	r0, r4
   158e6:	f7ff ff5d 	bl	157a4 <bt_conn_unref>
			break;
   158ea:	e7f5      	b.n	158d8 <bt_conn_set_state+0xdc>
		switch (old_state) {
   158ec:	2d08      	cmp	r5, #8
   158ee:	d8f3      	bhi.n	158d8 <bt_conn_set_state+0xdc>
   158f0:	a301      	add	r3, pc, #4	; (adr r3, 158f8 <bt_conn_set_state+0xfc>)
   158f2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   158f6:	bf00      	nop
   158f8:	00015969 	.word	0x00015969
   158fc:	0001591d 	.word	0x0001591d
   15900:	0001595b 	.word	0x0001595b
   15904:	000158e5 	.word	0x000158e5
   15908:	000158e5 	.word	0x000158e5
   1590c:	0001595b 	.word	0x0001595b
   15910:	0001595b 	.word	0x0001595b
   15914:	00015969 	.word	0x00015969
   15918:	00015969 	.word	0x00015969
			tx_notify(conn);
   1591c:	4620      	mov	r0, r4
   1591e:	f7ff fbc7 	bl	150b0 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15922:	78a3      	ldrb	r3, [r4, #2]
   15924:	2b01      	cmp	r3, #1
   15926:	d10a      	bne.n	1593e <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   15928:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1592c:	4628      	mov	r0, r5
   1592e:	f01a fe20 	bl	30572 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15932:	f010 0f0c 	tst.w	r0, #12
   15936:	d002      	beq.n	1593e <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   15938:	4628      	mov	r0, r5
   1593a:	f010 f941 	bl	25bc0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1593e:	3404      	adds	r4, #4
   15940:	e8d4 3fef 	ldaex	r3, [r4]
   15944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15948:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1594c:	2a00      	cmp	r2, #0
   1594e:	d1f7      	bne.n	15940 <bt_conn_set_state+0x144>
   15950:	2100      	movs	r1, #0
   15952:	4836      	ldr	r0, [pc, #216]	; (15a2c <bt_conn_set_state+0x230>)
   15954:	f012 fa66 	bl	27e24 <z_impl_k_poll_signal_raise>
   15958:	e7be      	b.n	158d8 <bt_conn_set_state+0xdc>
			if (conn->err) {
   1595a:	7a63      	ldrb	r3, [r4, #9]
   1595c:	2b00      	cmp	r3, #0
   1595e:	d0c1      	beq.n	158e4 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   15960:	4620      	mov	r0, r4
   15962:	f7ff fb6f 	bl	15044 <notify_connected>
   15966:	e7bd      	b.n	158e4 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   15968:	466c      	mov	r4, sp
   1596a:	b088      	sub	sp, #32
   1596c:	466a      	mov	r2, sp
   1596e:	4b30      	ldr	r3, [pc, #192]	; (15a30 <bt_conn_set_state+0x234>)
		LOG_WRN("no valid (%u) state was set", state);
   15970:	6153      	str	r3, [r2, #20]
   15972:	4b2a      	ldr	r3, [pc, #168]	; (15a1c <bt_conn_set_state+0x220>)
   15974:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15978:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1597c:	2304      	movs	r3, #4
   1597e:	f842 3f10 	str.w	r3, [r2, #16]!
   15982:	e75a      	b.n	1583a <bt_conn_set_state+0x3e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15984:	78a3      	ldrb	r3, [r4, #2]
   15986:	2b01      	cmp	r3, #1
   15988:	d1a6      	bne.n	158d8 <bt_conn_set_state+0xdc>
		    bt_dev.create_param.timeout != 0) {
   1598a:	4b27      	ldr	r3, [pc, #156]	; (15a28 <bt_conn_set_state+0x22c>)
   1598c:	8a9d      	ldrh	r5, [r3, #20]
		    conn->type == BT_CONN_TYPE_LE &&
   1598e:	2d00      	cmp	r5, #0
   15990:	d0a2      	beq.n	158d8 <bt_conn_set_state+0xdc>
					K_MSEC(10 * bt_dev.create_param.timeout));
   15992:	230a      	movs	r3, #10
   15994:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15998:	f240 30e7 	movw	r0, #999	; 0x3e7
   1599c:	2100      	movs	r1, #0
   1599e:	435d      	muls	r5, r3
   159a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   159a4:	2300      	movs	r3, #0
   159a6:	fbc5 0106 	smlal	r0, r1, r5, r6
   159aa:	f7f3 fa73 	bl	8e94 <__aeabi_uldivmod>
   159ae:	4602      	mov	r2, r0
   159b0:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   159b2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   159b6:	f010 f883 	bl	25ac0 <k_work_schedule>
   159ba:	e78d      	b.n	158d8 <bt_conn_set_state+0xdc>
	return list->head;
   159bc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   159be:	b921      	cbnz	r1, 159ca <bt_conn_set_state+0x1ce>
   159c0:	f383 8811 	msr	BASEPRI, r3
   159c4:	f3bf 8f6f 	isb	sy
		if (!node) {
   159c8:	e786      	b.n	158d8 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   159ca:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   159cc:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   159ce:	4281      	cmp	r1, r0
	list->tail = node;
   159d0:	bf08      	it	eq
   159d2:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   159d4:	6162      	str	r2, [r4, #20]
   159d6:	f383 8811 	msr	BASEPRI, r3
   159da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   159de:	f04f 0220 	mov.w	r2, #32
   159e2:	f3ef 8311 	mrs	r3, BASEPRI
   159e6:	f382 8812 	msr	BASEPRI_MAX, r2
   159ea:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   159ee:	68ca      	ldr	r2, [r1, #12]
   159f0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   159f2:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   159f6:	f383 8811 	msr	BASEPRI, r3
   159fa:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   159fe:	4620      	mov	r0, r4
   15a00:	f7ff fb86 	bl	15110 <conn_tx_destroy>
   15a04:	e751      	b.n	158aa <bt_conn_set_state+0xae>
		LOG_WRN("no valid (%u) state was set", state);
   15a06:	466c      	mov	r4, sp
   15a08:	b088      	sub	sp, #32
   15a0a:	466a      	mov	r2, sp
   15a0c:	4b09      	ldr	r3, [pc, #36]	; (15a34 <bt_conn_set_state+0x238>)
   15a0e:	e7af      	b.n	15970 <bt_conn_set_state+0x174>
   15a10:	000321fc 	.word	0x000321fc
   15a14:	0003680a 	.word	0x0003680a
   15a18:	00036814 	.word	0x00036814
   15a1c:	00036a9a 	.word	0x00036a9a
   15a20:	01000004 	.word	0x01000004
   15a24:	00031b8c 	.word	0x00031b8c
   15a28:	2000c580 	.word	0x2000c580
   15a2c:	2000c878 	.word	0x2000c878
   15a30:	00036829 	.word	0x00036829
   15a34:	00036844 	.word	0x00036844

00015a38 <bt_conn_index>:
		index = conn - acl_conns;
   15a38:	4a0c      	ldr	r2, [pc, #48]	; (15a6c <bt_conn_index+0x34>)
{
   15a3a:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   15a3c:	490c      	ldr	r1, [pc, #48]	; (15a70 <bt_conn_index+0x38>)
   15a3e:	1a83      	subs	r3, r0, r2
   15a40:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15a42:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   15a44:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15a48:	d00e      	beq.n	15a68 <bt_conn_index+0x30>
   15a4a:	490a      	ldr	r1, [pc, #40]	; (15a74 <bt_conn_index+0x3c>)
   15a4c:	f240 5315 	movw	r3, #1301	; 0x515
   15a50:	4a09      	ldr	r2, [pc, #36]	; (15a78 <bt_conn_index+0x40>)
   15a52:	480a      	ldr	r0, [pc, #40]	; (15a7c <bt_conn_index+0x44>)
   15a54:	f015 f9b0 	bl	2adb8 <assert_print>
   15a58:	4809      	ldr	r0, [pc, #36]	; (15a80 <bt_conn_index+0x48>)
   15a5a:	f015 f9ad 	bl	2adb8 <assert_print>
   15a5e:	f240 5115 	movw	r1, #1301	; 0x515
   15a62:	4805      	ldr	r0, [pc, #20]	; (15a78 <bt_conn_index+0x40>)
   15a64:	f015 f9a1 	bl	2adaa <assert_post_action>
}
   15a68:	b2d8      	uxtb	r0, r3
   15a6a:	bd08      	pop	{r3, pc}
   15a6c:	2000d8f0 	.word	0x2000d8f0
   15a70:	c28f5c29 	.word	0xc28f5c29
   15a74:	00036864 	.word	0x00036864
   15a78:	00036622 	.word	0x00036622
   15a7c:	00033bc2 	.word	0x00033bc2
   15a80:	0003692d 	.word	0x0003692d

00015a84 <bt_conn_create_pdu_timeout>:
{
   15a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a88:	af00      	add	r7, sp, #0
   15a8a:	4604      	mov	r4, r0
   15a8c:	460d      	mov	r5, r1
   15a8e:	4690      	mov	r8, r2
   15a90:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   15a92:	f01a fca4 	bl	303de <k_is_in_isr>
   15a96:	b158      	cbz	r0, 15ab0 <bt_conn_create_pdu_timeout+0x2c>
   15a98:	4917      	ldr	r1, [pc, #92]	; (15af8 <bt_conn_create_pdu_timeout+0x74>)
   15a9a:	4818      	ldr	r0, [pc, #96]	; (15afc <bt_conn_create_pdu_timeout+0x78>)
   15a9c:	f240 5331 	movw	r3, #1329	; 0x531
   15aa0:	4a17      	ldr	r2, [pc, #92]	; (15b00 <bt_conn_create_pdu_timeout+0x7c>)
   15aa2:	f015 f989 	bl	2adb8 <assert_print>
   15aa6:	f240 5131 	movw	r1, #1329	; 0x531
   15aaa:	4815      	ldr	r0, [pc, #84]	; (15b00 <bt_conn_create_pdu_timeout+0x7c>)
   15aac:	f015 f97d 	bl	2adaa <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15ab0:	4914      	ldr	r1, [pc, #80]	; (15b04 <bt_conn_create_pdu_timeout+0x80>)
   15ab2:	4642      	mov	r2, r8
   15ab4:	2c00      	cmp	r4, #0
   15ab6:	bf14      	ite	ne
   15ab8:	4620      	movne	r0, r4
   15aba:	4608      	moveq	r0, r1
   15abc:	4633      	mov	r3, r6
   15abe:	f017 fd4f 	bl	2d560 <net_buf_alloc_fixed>
	if (!buf) {
   15ac2:	4604      	mov	r4, r0
   15ac4:	b998      	cbnz	r0, 15aee <bt_conn_create_pdu_timeout+0x6a>
		LOG_WRN("Unable to allocate buffer within timeout");
   15ac6:	466d      	mov	r5, sp
   15ac8:	b088      	sub	sp, #32
   15aca:	466a      	mov	r2, sp
   15acc:	4b0e      	ldr	r3, [pc, #56]	; (15b08 <bt_conn_create_pdu_timeout+0x84>)
   15ace:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ad2:	6153      	str	r3, [r2, #20]
   15ad4:	4b0d      	ldr	r3, [pc, #52]	; (15b0c <bt_conn_create_pdu_timeout+0x88>)
   15ad6:	480e      	ldr	r0, [pc, #56]	; (15b10 <bt_conn_create_pdu_timeout+0x8c>)
   15ad8:	6193      	str	r3, [r2, #24]
   15ada:	2303      	movs	r3, #3
   15adc:	f842 3f10 	str.w	r3, [r2, #16]!
   15ae0:	f016 fbb1 	bl	2c246 <z_log_msg_static_create.constprop.0>
   15ae4:	46ad      	mov	sp, r5
}
   15ae6:	4620      	mov	r0, r4
   15ae8:	46bd      	mov	sp, r7
   15aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15aee:	1d29      	adds	r1, r5, #4
   15af0:	300c      	adds	r0, #12
   15af2:	f004 f917 	bl	19d24 <net_buf_simple_reserve>
	return buf;
   15af6:	e7f6      	b.n	15ae6 <bt_conn_create_pdu_timeout+0x62>
   15af8:	00036947 	.word	0x00036947
   15afc:	00033bc2 	.word	0x00033bc2
   15b00:	00036622 	.word	0x00036622
   15b04:	2000cfbc 	.word	0x2000cfbc
   15b08:	00036956 	.word	0x00036956
   15b0c:	00036a7f 	.word	0x00036a7f
   15b10:	00031b8c 	.word	0x00031b8c

00015b14 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15b16:	1d03      	adds	r3, r0, #4
{
   15b18:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15b1a:	4618      	mov	r0, r3
   15b1c:	f016 fb90 	bl	2c240 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15b20:	0582      	lsls	r2, r0, #22
   15b22:	d515      	bpl.n	15b50 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   15b24:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15b28:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   15b2c:	4291      	cmp	r1, r2
   15b2e:	d80f      	bhi.n	15b50 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   15b30:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   15b34:	4291      	cmp	r1, r2
   15b36:	d30b      	bcc.n	15b50 <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   15b38:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   15b3c:	4291      	cmp	r1, r2
   15b3e:	d107      	bne.n	15b50 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b40:	e8d3 1fef 	ldaex	r1, [r3]
   15b44:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   15b48:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15b4c:	2a00      	cmp	r2, #0
   15b4e:	d1f7      	bne.n	15b40 <notify_le_param_updated+0x2c>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15b50:	4b17      	ldr	r3, [pc, #92]	; (15bb0 <notify_le_param_updated+0x9c>)
   15b52:	681d      	ldr	r5, [r3, #0]
   15b54:	b995      	cbnz	r5, 15b7c <notify_le_param_updated+0x68>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15b56:	4d17      	ldr	r5, [pc, #92]	; (15bb4 <notify_le_param_updated+0xa0>)
   15b58:	4f17      	ldr	r7, [pc, #92]	; (15bb8 <notify_le_param_updated+0xa4>)
   15b5a:	42bd      	cmp	r5, r7
   15b5c:	d926      	bls.n	15bac <notify_le_param_updated+0x98>
   15b5e:	4917      	ldr	r1, [pc, #92]	; (15bbc <notify_le_param_updated+0xa8>)
   15b60:	f240 6304 	movw	r3, #1540	; 0x604
   15b64:	4a16      	ldr	r2, [pc, #88]	; (15bc0 <notify_le_param_updated+0xac>)
   15b66:	4817      	ldr	r0, [pc, #92]	; (15bc4 <notify_le_param_updated+0xb0>)
   15b68:	f015 f926 	bl	2adb8 <assert_print>
   15b6c:	4816      	ldr	r0, [pc, #88]	; (15bc8 <notify_le_param_updated+0xb4>)
   15b6e:	f015 f923 	bl	2adb8 <assert_print>
   15b72:	f240 6104 	movw	r1, #1540	; 0x604
   15b76:	4812      	ldr	r0, [pc, #72]	; (15bc0 <notify_le_param_updated+0xac>)
   15b78:	f015 f917 	bl	2adaa <assert_post_action>
		if (cb->le_param_updated) {
   15b7c:	68ee      	ldr	r6, [r5, #12]
   15b7e:	b13e      	cbz	r6, 15b90 <notify_le_param_updated+0x7c>
			cb->le_param_updated(conn, conn->le.interval,
   15b80:	4620      	mov	r0, r4
   15b82:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15b86:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15b8a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15b8e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15b90:	692d      	ldr	r5, [r5, #16]
   15b92:	e7df      	b.n	15b54 <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
   15b94:	68ee      	ldr	r6, [r5, #12]
   15b96:	b13e      	cbz	r6, 15ba8 <notify_le_param_updated+0x94>
			cb->le_param_updated(conn, conn->le.interval,
   15b98:	4620      	mov	r0, r4
   15b9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15b9e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15ba2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15ba6:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15ba8:	3514      	adds	r5, #20
   15baa:	e7d6      	b.n	15b5a <notify_le_param_updated+0x46>
   15bac:	d3f2      	bcc.n	15b94 <notify_le_param_updated+0x80>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bb0:	2000e370 	.word	0x2000e370
   15bb4:	00031b44 	.word	0x00031b44
   15bb8:	00031b44 	.word	0x00031b44
   15bbc:	00036652 	.word	0x00036652
   15bc0:	00036622 	.word	0x00036622
   15bc4:	00033bc2 	.word	0x00033bc2
   15bc8:	000342e3 	.word	0x000342e3

00015bcc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bd0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   15bd2:	4608      	mov	r0, r1
{
   15bd4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   15bd6:	f016 faad 	bl	2c134 <bt_le_conn_params_valid>
   15bda:	4605      	mov	r5, r0
   15bdc:	b918      	cbnz	r0, 15be6 <le_param_req+0x1a>
		return false;
   15bde:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15be0:	4628      	mov	r0, r5
   15be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15be6:	4b1b      	ldr	r3, [pc, #108]	; (15c54 <le_param_req+0x88>)
   15be8:	681e      	ldr	r6, [r3, #0]
   15bea:	b99e      	cbnz	r6, 15c14 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15bec:	4e1a      	ldr	r6, [pc, #104]	; (15c58 <le_param_req+0x8c>)
   15bee:	f8df 806c 	ldr.w	r8, [pc, #108]	; 15c5c <le_param_req+0x90>
   15bf2:	4546      	cmp	r6, r8
   15bf4:	d927      	bls.n	15c46 <le_param_req+0x7a>
   15bf6:	491a      	ldr	r1, [pc, #104]	; (15c60 <le_param_req+0x94>)
   15bf8:	f240 634c 	movw	r3, #1612	; 0x64c
   15bfc:	4a19      	ldr	r2, [pc, #100]	; (15c64 <le_param_req+0x98>)
   15bfe:	481a      	ldr	r0, [pc, #104]	; (15c68 <le_param_req+0x9c>)
   15c00:	f015 f8da 	bl	2adb8 <assert_print>
   15c04:	4819      	ldr	r0, [pc, #100]	; (15c6c <le_param_req+0xa0>)
   15c06:	f015 f8d7 	bl	2adb8 <assert_print>
   15c0a:	f240 614c 	movw	r1, #1612	; 0x64c
   15c0e:	4815      	ldr	r0, [pc, #84]	; (15c64 <le_param_req+0x98>)
   15c10:	f015 f8cb 	bl	2adaa <assert_post_action>
		if (!cb->le_param_req) {
   15c14:	68b3      	ldr	r3, [r6, #8]
   15c16:	b90b      	cbnz	r3, 15c1c <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15c18:	6936      	ldr	r6, [r6, #16]
   15c1a:	e7e6      	b.n	15bea <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15c1c:	4621      	mov	r1, r4
   15c1e:	4638      	mov	r0, r7
   15c20:	4798      	blx	r3
   15c22:	2800      	cmp	r0, #0
   15c24:	d0db      	beq.n	15bde <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15c26:	4620      	mov	r0, r4
   15c28:	f016 fa84 	bl	2c134 <bt_le_conn_params_valid>
   15c2c:	2800      	cmp	r0, #0
   15c2e:	d1f3      	bne.n	15c18 <le_param_req+0x4c>
   15c30:	e7d5      	b.n	15bde <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15c32:	4621      	mov	r1, r4
   15c34:	4638      	mov	r0, r7
   15c36:	4798      	blx	r3
   15c38:	2800      	cmp	r0, #0
   15c3a:	d0d0      	beq.n	15bde <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15c3c:	4620      	mov	r0, r4
   15c3e:	f016 fa79 	bl	2c134 <bt_le_conn_params_valid>
   15c42:	b920      	cbnz	r0, 15c4e <le_param_req+0x82>
   15c44:	e7cb      	b.n	15bde <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15c46:	d2cb      	bcs.n	15be0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   15c48:	68b3      	ldr	r3, [r6, #8]
   15c4a:	2b00      	cmp	r3, #0
   15c4c:	d1f1      	bne.n	15c32 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15c4e:	3614      	adds	r6, #20
   15c50:	e7cf      	b.n	15bf2 <le_param_req+0x26>
   15c52:	bf00      	nop
   15c54:	2000e370 	.word	0x2000e370
   15c58:	00031b44 	.word	0x00031b44
   15c5c:	00031b44 	.word	0x00031b44
   15c60:	00036652 	.word	0x00036652
   15c64:	00036622 	.word	0x00036622
   15c68:	00033bc2 	.word	0x00033bc2
   15c6c:	000342e3 	.word	0x000342e3

00015c70 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15c70:	4b02      	ldr	r3, [pc, #8]	; (15c7c <bt_conn_cb_register+0xc>)
   15c72:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   15c74:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   15c76:	6102      	str	r2, [r0, #16]
}
   15c78:	4770      	bx	lr
   15c7a:	bf00      	nop
   15c7c:	2000e370 	.word	0x2000e370

00015c80 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15c80:	b538      	push	{r3, r4, r5, lr}
   15c82:	4605      	mov	r5, r0
   15c84:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15c86:	480a      	ldr	r0, [pc, #40]	; (15cb0 <bt_conn_add_le+0x30>)
   15c88:	2101      	movs	r1, #1
   15c8a:	f7ff fb6b 	bl	15364 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15c8e:	b170      	cbz	r0, 15cae <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   15c90:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15c92:	6823      	ldr	r3, [r4, #0]
   15c94:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   15c98:	88a3      	ldrh	r3, [r4, #4]
   15c9a:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   15c9e:	79a3      	ldrb	r3, [r4, #6]
   15ca0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15ca4:	2301      	movs	r3, #1
   15ca6:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15ca8:	4b02      	ldr	r3, [pc, #8]	; (15cb4 <bt_conn_add_le+0x34>)
   15caa:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15cae:	bd38      	pop	{r3, r4, r5, pc}
   15cb0:	2000d8f0 	.word	0x2000d8f0
   15cb4:	00280018 	.word	0x00280018

00015cb8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15cb8:	b570      	push	{r4, r5, r6, lr}
   15cba:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15cbc:	480a      	ldr	r0, [pc, #40]	; (15ce8 <bt_conn_lookup_addr_le+0x30>)
{
   15cbe:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15cc0:	f7ff fd46 	bl	15750 <bt_conn_ref>
   15cc4:	4604      	mov	r4, r0

		if (!conn) {
   15cc6:	b120      	cbz	r0, 15cd2 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15cc8:	7883      	ldrb	r3, [r0, #2]
   15cca:	2b01      	cmp	r3, #1
   15ccc:	d004      	beq.n	15cd8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15cce:	f7ff fd69 	bl	157a4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15cd2:	2400      	movs	r4, #0
}
   15cd4:	4620      	mov	r0, r4
   15cd6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15cd8:	4632      	mov	r2, r6
   15cda:	4629      	mov	r1, r5
   15cdc:	f016 fb16 	bl	2c30c <bt_conn_is_peer_addr_le>
   15ce0:	2800      	cmp	r0, #0
   15ce2:	d1f7      	bne.n	15cd4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15ce4:	4620      	mov	r0, r4
   15ce6:	e7f2      	b.n	15cce <bt_conn_lookup_addr_le+0x16>
   15ce8:	2000d8f0 	.word	0x2000d8f0

00015cec <bt_conn_exists_le>:
{
   15cec:	b5b0      	push	{r4, r5, r7, lr}
   15cee:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15cf0:	f7ff ffe2 	bl	15cb8 <bt_conn_lookup_addr_le>
	if (conn) {
   15cf4:	4604      	mov	r4, r0
   15cf6:	b1f8      	cbz	r0, 15d38 <bt_conn_exists_le+0x4c>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   15cf8:	7a83      	ldrb	r3, [r0, #10]
   15cfa:	466d      	mov	r5, sp
   15cfc:	2b08      	cmp	r3, #8
   15cfe:	bf98      	it	ls
   15d00:	4a0e      	ldrls	r2, [pc, #56]	; (15d3c <bt_conn_exists_le+0x50>)
   15d02:	b08a      	sub	sp, #40	; 0x28
   15d04:	bf94      	ite	ls
   15d06:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15d0a:	4b0d      	ldrhi	r3, [pc, #52]	; (15d40 <bt_conn_exists_le+0x54>)
   15d0c:	466a      	mov	r2, sp
   15d0e:	490d      	ldr	r1, [pc, #52]	; (15d44 <bt_conn_exists_le+0x58>)
   15d10:	480d      	ldr	r0, [pc, #52]	; (15d48 <bt_conn_exists_le+0x5c>)
   15d12:	6151      	str	r1, [r2, #20]
   15d14:	490d      	ldr	r1, [pc, #52]	; (15d4c <bt_conn_exists_le+0x60>)
   15d16:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15d1a:	f240 3301 	movw	r3, #769	; 0x301
   15d1e:	8413      	strh	r3, [r2, #32]
   15d20:	4b0b      	ldr	r3, [pc, #44]	; (15d50 <bt_conn_exists_le+0x64>)
   15d22:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   15d26:	f842 3f10 	str.w	r3, [r2, #16]!
   15d2a:	f016 fa8c 	bl	2c246 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   15d2e:	4620      	mov	r0, r4
   15d30:	46ad      	mov	sp, r5
   15d32:	f7ff fd37 	bl	157a4 <bt_conn_unref>
		return true;
   15d36:	2001      	movs	r0, #1
}
   15d38:	46bd      	mov	sp, r7
   15d3a:	bdb0      	pop	{r4, r5, r7, pc}
   15d3c:	000321fc 	.word	0x000321fc
   15d40:	0003680a 	.word	0x0003680a
   15d44:	00036983 	.word	0x00036983
   15d48:	00031b8c 	.word	0x00031b8c
   15d4c:	00036a6d 	.word	0x00036a6d
   15d50:	01000004 	.word	0x01000004

00015d54 <conn_le_create_common_checks>:
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

static int conn_le_create_common_checks(const bt_addr_le_t *peer,
					const struct bt_le_conn_param *conn_param)
{
   15d54:	b538      	push	{r3, r4, r5, lr}
   15d56:	4604      	mov	r4, r0
   15d58:	4814      	ldr	r0, [pc, #80]	; (15dac <conn_le_create_common_checks+0x58>)
   15d5a:	f016 fa71 	bl	2c240 <atomic_get>

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d5e:	0740      	lsls	r0, r0, #29
   15d60:	d402      	bmi.n	15d68 <conn_le_create_common_checks+0x14>
		return -EAGAIN;
   15d62:	f06f 000a 	mvn.w	r0, #10
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
		return -EINVAL;
	}

	return 0;
}
   15d66:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   15d68:	4608      	mov	r0, r1
   15d6a:	f016 f9e3 	bl	2c134 <bt_le_conn_params_valid>
   15d6e:	b910      	cbnz	r0, 15d76 <conn_le_create_common_checks+0x22>
		return -EINVAL;
   15d70:	f06f 0015 	mvn.w	r0, #21
   15d74:	e7f7      	b.n	15d66 <conn_le_create_common_checks+0x12>
   15d76:	480d      	ldr	r0, [pc, #52]	; (15dac <conn_le_create_common_checks+0x58>)
   15d78:	f016 fa62 	bl	2c240 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15d7c:	0602      	lsls	r2, r0, #24
   15d7e:	d4f0      	bmi.n	15d62 <conn_le_create_common_checks+0xe>
   15d80:	480a      	ldr	r0, [pc, #40]	; (15dac <conn_le_create_common_checks+0x58>)
   15d82:	f016 fa5d 	bl	2c240 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   15d86:	04c3      	lsls	r3, r0, #19
   15d88:	f3c0 3500 	ubfx	r5, r0, #12, #1
   15d8c:	d40a      	bmi.n	15da4 <conn_le_create_common_checks+0x50>
	if (!bt_id_scan_random_addr_check()) {
   15d8e:	f016 fa43 	bl	2c218 <bt_id_scan_random_addr_check>
   15d92:	2800      	cmp	r0, #0
   15d94:	d0ec      	beq.n	15d70 <conn_le_create_common_checks+0x1c>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   15d96:	4621      	mov	r1, r4
   15d98:	4628      	mov	r0, r5
   15d9a:	f7ff ffa7 	bl	15cec <bt_conn_exists_le>
   15d9e:	2800      	cmp	r0, #0
   15da0:	d0e1      	beq.n	15d66 <conn_le_create_common_checks+0x12>
   15da2:	e7e5      	b.n	15d70 <conn_le_create_common_checks+0x1c>
		return -EALREADY;
   15da4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15da8:	e7dd      	b.n	15d66 <conn_le_create_common_checks+0x12>
   15daa:	bf00      	nop
   15dac:	2000c654 	.word	0x2000c654

00015db0 <bt_conn_lookup_state_le>:
{
   15db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15db2:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15db4:	480e      	ldr	r0, [pc, #56]	; (15df0 <bt_conn_lookup_state_le+0x40>)
{
   15db6:	460e      	mov	r6, r1
   15db8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15dba:	f7ff fcc9 	bl	15750 <bt_conn_ref>
		if (!conn) {
   15dbe:	4604      	mov	r4, r0
   15dc0:	b120      	cbz	r0, 15dcc <bt_conn_lookup_state_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   15dc2:	7883      	ldrb	r3, [r0, #2]
   15dc4:	2b01      	cmp	r3, #1
   15dc6:	d003      	beq.n	15dd0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   15dc8:	f7ff fcec 	bl	157a4 <bt_conn_unref>
	return NULL;
   15dcc:	2400      	movs	r4, #0
   15dce:	e00d      	b.n	15dec <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15dd0:	b136      	cbz	r6, 15de0 <bt_conn_lookup_state_le+0x30>
   15dd2:	4632      	mov	r2, r6
   15dd4:	4629      	mov	r1, r5
   15dd6:	f016 fa99 	bl	2c30c <bt_conn_is_peer_addr_le>
   15dda:	b908      	cbnz	r0, 15de0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15ddc:	4620      	mov	r0, r4
   15dde:	e7f3      	b.n	15dc8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15de0:	7aa3      	ldrb	r3, [r4, #10]
   15de2:	42bb      	cmp	r3, r7
   15de4:	d1fa      	bne.n	15ddc <bt_conn_lookup_state_le+0x2c>
   15de6:	7a23      	ldrb	r3, [r4, #8]
   15de8:	42ab      	cmp	r3, r5
   15dea:	d1f7      	bne.n	15ddc <bt_conn_lookup_state_le+0x2c>
}
   15dec:	4620      	mov	r0, r4
   15dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15df0:	2000d8f0 	.word	0x2000d8f0

00015df4 <bt_conn_get_info>:
{
   15df4:	b510      	push	{r4, lr}
	info->type = conn->type;
   15df6:	7883      	ldrb	r3, [r0, #2]
   15df8:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   15dfa:	78c3      	ldrb	r3, [r0, #3]
   15dfc:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   15dfe:	7a03      	ldrb	r3, [r0, #8]
   15e00:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   15e02:	7a84      	ldrb	r4, [r0, #10]
	switch (state) {
   15e04:	2c08      	cmp	r4, #8
   15e06:	d80c      	bhi.n	15e22 <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   15e08:	4b27      	ldr	r3, [pc, #156]	; (15ea8 <bt_conn_get_info+0xb4>)
   15e0a:	5d1b      	ldrb	r3, [r3, r4]
   15e0c:	770b      	strb	r3, [r1, #28]
	info->security.level = bt_conn_get_security(conn);
   15e0e:	2301      	movs	r3, #1
   15e10:	774b      	strb	r3, [r1, #29]
	info->security.enc_key_size = 0;
   15e12:	2300      	movs	r3, #0
   15e14:	83cb      	strh	r3, [r1, #30]
	switch (conn->type) {
   15e16:	7883      	ldrb	r3, [r0, #2]
   15e18:	2b01      	cmp	r3, #1
   15e1a:	d012      	beq.n	15e42 <bt_conn_get_info+0x4e>
	return -EINVAL;
   15e1c:	f06f 0015 	mvn.w	r0, #21
}
   15e20:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   15e22:	f640 1385 	movw	r3, #2437	; 0x985
   15e26:	4a21      	ldr	r2, [pc, #132]	; (15eac <bt_conn_get_info+0xb8>)
   15e28:	4921      	ldr	r1, [pc, #132]	; (15eb0 <bt_conn_get_info+0xbc>)
   15e2a:	4822      	ldr	r0, [pc, #136]	; (15eb4 <bt_conn_get_info+0xc0>)
   15e2c:	f014 ffc4 	bl	2adb8 <assert_print>
   15e30:	4621      	mov	r1, r4
   15e32:	4821      	ldr	r0, [pc, #132]	; (15eb8 <bt_conn_get_info+0xc4>)
   15e34:	f014 ffc0 	bl	2adb8 <assert_print>
   15e38:	f640 1185 	movw	r1, #2437	; 0x985
   15e3c:	481b      	ldr	r0, [pc, #108]	; (15eac <bt_conn_get_info+0xb8>)
   15e3e:	f014 ffb4 	bl	2adaa <assert_post_action>
		info->le.dst = &conn->le.dst;
   15e42:	f100 0390 	add.w	r3, r0, #144	; 0x90
   15e46:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   15e48:	7a03      	ldrb	r3, [r0, #8]
   15e4a:	4a1c      	ldr	r2, [pc, #112]	; (15ebc <bt_conn_get_info+0xc8>)
   15e4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   15e50:	4413      	add	r3, r2
   15e52:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15e54:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   15e56:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   15e5a:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15e5e:	b114      	cbz	r4, 15e66 <bt_conn_get_info+0x72>
   15e60:	461c      	mov	r4, r3
   15e62:	4613      	mov	r3, r2
   15e64:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   15e66:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   15e6a:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   15e6e:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   15e70:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   15e74:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   15e76:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   15e7a:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   15e7c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   15e80:	b123      	cbz	r3, 15e8c <bt_conn_get_info+0x98>
   15e82:	7b5b      	ldrb	r3, [r3, #13]
   15e84:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   15e86:	bf44      	itt	mi
   15e88:	2301      	movmi	r3, #1
   15e8a:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   15e8c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   15e90:	b113      	cbz	r3, 15e98 <bt_conn_get_info+0xa4>
   15e92:	7b5b      	ldrb	r3, [r3, #13]
   15e94:	069b      	lsls	r3, r3, #26
   15e96:	d401      	bmi.n	15e9c <bt_conn_get_info+0xa8>
		return 0;
   15e98:	2000      	movs	r0, #0
   15e9a:	e7c1      	b.n	15e20 <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   15e9c:	7fcb      	ldrb	r3, [r1, #31]
   15e9e:	f043 0302 	orr.w	r3, r3, #2
   15ea2:	77cb      	strb	r3, [r1, #31]
   15ea4:	e7f8      	b.n	15e98 <bt_conn_get_info+0xa4>
   15ea6:	bf00      	nop
   15ea8:	000369eb 	.word	0x000369eb
   15eac:	00036622 	.word	0x00036622
   15eb0:	000386dc 	.word	0x000386dc
   15eb4:	00033bc2 	.word	0x00033bc2
   15eb8:	000369aa 	.word	0x000369aa
   15ebc:	2000c580 	.word	0x2000c580

00015ec0 <bt_conn_le_create>:
	return conn;
}

int bt_conn_le_create(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param, struct bt_conn **ret_conn)
{
   15ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ec4:	460e      	mov	r6, r1
	struct bt_conn *conn;
	int err;

	err = conn_le_create_common_checks(peer, conn_param);
   15ec6:	4611      	mov	r1, r2
{
   15ec8:	4680      	mov	r8, r0
   15eca:	4615      	mov	r5, r2
   15ecc:	461f      	mov	r7, r3
	err = conn_le_create_common_checks(peer, conn_param);
   15ece:	f7ff ff41 	bl	15d54 <conn_le_create_common_checks>
	if (err) {
   15ed2:	4604      	mov	r4, r0
   15ed4:	bb78      	cbnz	r0, 15f36 <bt_conn_le_create+0x76>

	if (!create_param_validate(create_param)) {
		return -EINVAL;
	}

	conn = conn_le_create_helper(peer, conn_param);
   15ed6:	4629      	mov	r1, r5
   15ed8:	4640      	mov	r0, r8
   15eda:	f016 f9ee 	bl	2c2ba <conn_le_create_helper>
	if (!conn) {
   15ede:	4605      	mov	r5, r0
   15ee0:	b370      	cbz	r0, 15f40 <bt_conn_le_create+0x80>
	bt_dev.create_param = *param;
   15ee2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   15ee6:	4c18      	ldr	r4, [pc, #96]	; (15f48 <bt_conn_le_create+0x88>)
   15ee8:	f104 0c08 	add.w	ip, r4, #8
   15eec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   15ef0:	8aa2      	ldrh	r2, [r4, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   15ef2:	8a23      	ldrh	r3, [r4, #16]
	bt_dev.create_param.timeout =
   15ef4:	2a00      	cmp	r2, #0
   15ef6:	bf08      	it	eq
   15ef8:	f44f 7296 	moveq.w	r2, #300	; 0x12c
   15efc:	82a2      	strh	r2, [r4, #20]
	bt_dev.create_param.interval_coded =
   15efe:	b903      	cbnz	r3, 15f02 <bt_conn_le_create+0x42>
   15f00:	89a3      	ldrh	r3, [r4, #12]
   15f02:	8223      	strh	r3, [r4, #16]
		(bt_dev.create_param.window_coded != 0) ?
   15f04:	8a63      	ldrh	r3, [r4, #18]
	bt_dev.create_param.window_coded =
   15f06:	b903      	cbnz	r3, 15f0a <bt_conn_le_create+0x4a>
   15f08:	89e3      	ldrh	r3, [r4, #14]
		*ret_conn = conn;
		return 0;
	}
#endif

	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   15f0a:	2106      	movs	r1, #6
   15f0c:	4628      	mov	r0, r5
	bt_dev.create_param.window_coded =
   15f0e:	8263      	strh	r3, [r4, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   15f10:	f7ff fc74 	bl	157fc <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   15f14:	4628      	mov	r0, r5
   15f16:	f7fd fa47 	bl	133a8 <bt_le_create_conn>
	if (err) {
   15f1a:	4604      	mov	r4, r0
   15f1c:	b170      	cbz	r0, 15f3c <bt_conn_le_create+0x7c>
		conn->err = 0;
   15f1e:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15f20:	4628      	mov	r0, r5
   15f22:	4631      	mov	r1, r6
		conn->err = 0;
   15f24:	726e      	strb	r6, [r5, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15f26:	f7ff fc69 	bl	157fc <bt_conn_set_state>
		bt_conn_unref(conn);
   15f2a:	4628      	mov	r0, r5
   15f2c:	f7ff fc3a 	bl	157a4 <bt_conn_unref>

		bt_le_scan_update(false);
   15f30:	4630      	mov	r0, r6
   15f32:	f7fe fe1b 	bl	14b6c <bt_le_scan_update>
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   15f36:	4620      	mov	r0, r4
   15f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*ret_conn = conn;
   15f3c:	603d      	str	r5, [r7, #0]
	return 0;
   15f3e:	e7fa      	b.n	15f36 <bt_conn_le_create+0x76>
		return -ENOMEM;
   15f40:	f06f 040b 	mvn.w	r4, #11
   15f44:	e7f7      	b.n	15f36 <bt_conn_le_create+0x76>
   15f46:	bf00      	nop
   15f48:	2000c580 	.word	0x2000c580

00015f4c <send_conn_le_param_update>:
{
   15f4c:	b538      	push	{r3, r4, r5, lr}
   15f4e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15f50:	4608      	mov	r0, r1
{
   15f52:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15f54:	f016 f8ee 	bl	2c134 <bt_le_conn_params_valid>
   15f58:	b338      	cbz	r0, 15faa <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f5a:	4b15      	ldr	r3, [pc, #84]	; (15fb0 <send_conn_le_param_update+0x64>)
   15f5c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   15f60:	0799      	lsls	r1, r3, #30
   15f62:	d407      	bmi.n	15f74 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15f64:	78e3      	ldrb	r3, [r4, #3]
   15f66:	b173      	cbz	r3, 15f86 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15f68:	4629      	mov	r1, r5
   15f6a:	4620      	mov	r0, r4
}
   15f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15f70:	f000 bb30 	b.w	165d4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f74:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   15f78:	079a      	lsls	r2, r3, #30
   15f7a:	d5f3      	bpl.n	15f64 <send_conn_le_param_update+0x18>
   15f7c:	1d20      	adds	r0, r4, #4
   15f7e:	f016 f95f 	bl	2c240 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15f82:	0543      	lsls	r3, r0, #21
   15f84:	d4ee      	bmi.n	15f64 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15f86:	4629      	mov	r1, r5
   15f88:	4620      	mov	r0, r4
   15f8a:	f016 f9e1 	bl	2c350 <bt_conn_le_conn_update>
		if (rc == 0) {
   15f8e:	b958      	cbnz	r0, 15fa8 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15f90:	882b      	ldrh	r3, [r5, #0]
   15f92:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   15f96:	886b      	ldrh	r3, [r5, #2]
   15f98:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15f9c:	88ab      	ldrh	r3, [r5, #4]
   15f9e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   15fa2:	88eb      	ldrh	r3, [r5, #6]
   15fa4:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15fa8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15faa:	f06f 0015 	mvn.w	r0, #21
   15fae:	e7fb      	b.n	15fa8 <send_conn_le_param_update+0x5c>
   15fb0:	2000c580 	.word	0x2000c580

00015fb4 <deferred_work>:
{
   15fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fb8:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   15fba:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   15fbe:	4604      	mov	r4, r0
   15fc0:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15fc2:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   15fc6:	bb8b      	cbnz	r3, 1602c <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15fc8:	4630      	mov	r0, r6
   15fca:	f016 fa1e 	bl	2c40a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15fce:	4b38      	ldr	r3, [pc, #224]	; (160b0 <deferred_work+0xfc>)
   15fd0:	681d      	ldr	r5, [r3, #0]
   15fd2:	b99d      	cbnz	r5, 15ffc <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15fd4:	4d37      	ldr	r5, [pc, #220]	; (160b4 <deferred_work+0x100>)
   15fd6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 160b8 <deferred_work+0x104>
   15fda:	4545      	cmp	r5, r8
   15fdc:	d91e      	bls.n	1601c <deferred_work+0x68>
   15fde:	4937      	ldr	r1, [pc, #220]	; (160bc <deferred_work+0x108>)
   15fe0:	f240 53cb 	movw	r3, #1483	; 0x5cb
   15fe4:	4a36      	ldr	r2, [pc, #216]	; (160c0 <deferred_work+0x10c>)
   15fe6:	4837      	ldr	r0, [pc, #220]	; (160c4 <deferred_work+0x110>)
   15fe8:	f014 fee6 	bl	2adb8 <assert_print>
   15fec:	4836      	ldr	r0, [pc, #216]	; (160c8 <deferred_work+0x114>)
   15fee:	f014 fee3 	bl	2adb8 <assert_print>
   15ff2:	f240 51cb 	movw	r1, #1483	; 0x5cb
   15ff6:	4832      	ldr	r0, [pc, #200]	; (160c0 <deferred_work+0x10c>)
   15ff8:	f014 fed7 	bl	2adaa <assert_post_action>
		if (cb->disconnected) {
   15ffc:	686b      	ldr	r3, [r5, #4]
   15ffe:	b11b      	cbz	r3, 16008 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   16000:	4630      	mov	r0, r6
   16002:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   16006:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16008:	692d      	ldr	r5, [r5, #16]
   1600a:	e7e2      	b.n	15fd2 <deferred_work+0x1e>
		if (cb->disconnected) {
   1600c:	686b      	ldr	r3, [r5, #4]
   1600e:	b11b      	cbz	r3, 16018 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   16010:	4630      	mov	r0, r6
   16012:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   16016:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16018:	3514      	adds	r5, #20
   1601a:	e7de      	b.n	15fda <deferred_work+0x26>
   1601c:	d3f6      	bcc.n	1600c <deferred_work+0x58>
		bt_conn_unref(conn);
   1601e:	4630      	mov	r0, r6
   16020:	f7ff fbc0 	bl	157a4 <bt_conn_unref>
}
   16024:	3708      	adds	r7, #8
   16026:	46bd      	mov	sp, r7
   16028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   1602c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   16030:	2b01      	cmp	r3, #1
   16032:	d1f7      	bne.n	16024 <deferred_work+0x70>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16034:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   16038:	b913      	cbnz	r3, 16040 <deferred_work+0x8c>
		bt_le_create_conn_cancel();
   1603a:	f7fd fa05 	bl	13448 <bt_le_create_conn_cancel>
		return;
   1603e:	e7f1      	b.n	16024 <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   16040:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   16044:	e8d5 3fef 	ldaex	r3, [r5]
   16048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1604c:	e8c5 2fe1 	stlex	r1, r2, [r5]
   16050:	2900      	cmp	r1, #0
   16052:	d1f7      	bne.n	16044 <deferred_work+0x90>
   16054:	059b      	lsls	r3, r3, #22
   16056:	d510      	bpl.n	1607a <deferred_work+0xc6>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16058:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1605a:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1605c:	603b      	str	r3, [r7, #0]
   1605e:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   16060:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16062:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   16064:	f7ff ff72 	bl	15f4c <send_conn_le_param_update>
		if (!err) {
   16068:	b980      	cbnz	r0, 1608c <deferred_work+0xd8>
   1606a:	e8d5 3fef 	ldaex	r3, [r5]
   1606e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16072:	e8c5 3fe2 	stlex	r2, r3, [r5]
   16076:	2a00      	cmp	r2, #0
   16078:	d1f7      	bne.n	1606a <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1607a:	e8d5 3fef 	ldaex	r3, [r5]
   1607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16082:	e8c5 3fe2 	stlex	r2, r3, [r5]
   16086:	2a00      	cmp	r2, #0
   16088:	d0cc      	beq.n	16024 <deferred_work+0x70>
   1608a:	e7f6      	b.n	1607a <deferred_work+0xc6>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1608c:	466c      	mov	r4, sp
   1608e:	b088      	sub	sp, #32
   16090:	466a      	mov	r2, sp
   16092:	4b0e      	ldr	r3, [pc, #56]	; (160cc <deferred_work+0x118>)
   16094:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16098:	6153      	str	r3, [r2, #20]
   1609a:	4b0d      	ldr	r3, [pc, #52]	; (160d0 <deferred_work+0x11c>)
   1609c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   160a0:	2304      	movs	r3, #4
   160a2:	480c      	ldr	r0, [pc, #48]	; (160d4 <deferred_work+0x120>)
   160a4:	f842 3f10 	str.w	r3, [r2, #16]!
   160a8:	f016 f8cd 	bl	2c246 <z_log_msg_static_create.constprop.0>
   160ac:	46a5      	mov	sp, r4
   160ae:	e7e4      	b.n	1607a <deferred_work+0xc6>
   160b0:	2000e370 	.word	0x2000e370
   160b4:	00031b44 	.word	0x00031b44
   160b8:	00031b44 	.word	0x00031b44
   160bc:	00036652 	.word	0x00036652
   160c0:	00036622 	.word	0x00036622
   160c4:	00033bc2 	.word	0x00033bc2
   160c8:	000342e3 	.word	0x000342e3
   160cc:	000369c2 	.word	0x000369c2
   160d0:	00036ad5 	.word	0x00036ad5
   160d4:	00031b8c 	.word	0x00031b8c

000160d8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   160d8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   160da:	4801      	ldr	r0, [pc, #4]	; (160e0 <bt_conn_create_frag_timeout+0x8>)
   160dc:	f7ff bcd2 	b.w	15a84 <bt_conn_create_pdu_timeout>
   160e0:	2000d058 	.word	0x2000d058

000160e4 <bt_conn_process_tx>:
{
   160e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   160e8:	7a83      	ldrb	r3, [r0, #10]
{
   160ea:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   160ec:	b973      	cbnz	r3, 1610c <bt_conn_process_tx+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   160ee:	1d03      	adds	r3, r0, #4
   160f0:	e8d3 2fef 	ldaex	r2, [r3]
   160f4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   160f8:	e8c3 1fe4 	stlex	r4, r1, [r3]
   160fc:	2c00      	cmp	r4, #0
   160fe:	d1f7      	bne.n	160f0 <bt_conn_process_tx+0xc>
   16100:	0653      	lsls	r3, r2, #25
   16102:	d503      	bpl.n	1610c <bt_conn_process_tx+0x28>
}
   16104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   16108:	f7ff b95a 	b.w	153c0 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1610c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16110:	f01a f9b6 	bl	30480 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   16114:	4604      	mov	r4, r0
   16116:	b960      	cbnz	r0, 16132 <bt_conn_process_tx+0x4e>
   16118:	f44f 735d 	mov.w	r3, #884	; 0x374
   1611c:	4a32      	ldr	r2, [pc, #200]	; (161e8 <bt_conn_process_tx+0x104>)
   1611e:	4933      	ldr	r1, [pc, #204]	; (161ec <bt_conn_process_tx+0x108>)
   16120:	4833      	ldr	r0, [pc, #204]	; (161f0 <bt_conn_process_tx+0x10c>)
   16122:	f014 fe49 	bl	2adb8 <assert_print>
   16126:	4040      	eors	r0, r0
   16128:	f380 8811 	msr	BASEPRI, r0
   1612c:	f04f 0003 	mov.w	r0, #3
   16130:	df02      	svc	2
	buf = net_buf_ref(buf);
   16132:	4620      	mov	r0, r4
   16134:	f003 fd32 	bl	19b9c <net_buf_ref>
	return bt_dev.le.acl_mtu;
   16138:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 161f4 <bt_conn_process_tx+0x110>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1613c:	8a02      	ldrh	r2, [r0, #16]
   1613e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
   16142:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   16144:	429a      	cmp	r2, r3
   16146:	7f02      	ldrb	r2, [r0, #28]
   16148:	d807      	bhi.n	1615a <bt_conn_process_tx+0x76>
   1614a:	b932      	cbnz	r2, 1615a <bt_conn_process_tx+0x76>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1614c:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   1614e:	4621      	mov	r1, r4
   16150:	4628      	mov	r0, r5
   16152:	f7ff f803 	bl	1515c <send_frag>
   16156:	4606      	mov	r6, r0
   16158:	e030      	b.n	161bc <bt_conn_process_tx+0xd8>
	if (tx_data(buf)->is_cont) {
   1615a:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   1615c:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   16160:	8a22      	ldrh	r2, [r4, #16]
   16162:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   16166:	429a      	cmp	r2, r3
   16168:	d804      	bhi.n	16174 <bt_conn_process_tx+0x90>
	tx_data(buf)->is_cont = true;
   1616a:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
   1616c:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
   1616e:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   16170:	2303      	movs	r3, #3
   16172:	e7ec      	b.n	1614e <bt_conn_process_tx+0x6a>
		frag = bt_conn_create_frag(0);
   16174:	f04f 33ff 	mov.w	r3, #4294967295
   16178:	f04f 32ff 	mov.w	r2, #4294967295
   1617c:	2000      	movs	r0, #0
   1617e:	f7ff ffab 	bl	160d8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   16182:	7aab      	ldrb	r3, [r5, #10]
		frag = bt_conn_create_frag(0);
   16184:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16186:	2b07      	cmp	r3, #7
   16188:	d006      	beq.n	16198 <bt_conn_process_tx+0xb4>
		net_buf_unref(frag);
   1618a:	f003 fcc3 	bl	19b14 <net_buf_unref>
	net_buf_unref(buf);
   1618e:	4620      	mov	r0, r4
}
   16190:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   16194:	f003 bcbe 	b.w	19b14 <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
   16198:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
   1619a:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1619e:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   161a2:	463b      	mov	r3, r7
   161a4:	4621      	mov	r1, r4
   161a6:	4628      	mov	r0, r5
   161a8:	f7fe ffd8 	bl	1515c <send_frag>
		if (err) {
   161ac:	4606      	mov	r6, r0
   161ae:	b1b8      	cbz	r0, 161e0 <bt_conn_process_tx+0xfc>
			tx_data(buf)->is_cont = flags != FRAG_START;
   161b0:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
   161b4:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
   161b6:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   161b8:	f003 fcac 	bl	19b14 <net_buf_unref>
	net_buf_unref(buf);
   161bc:	4620      	mov	r0, r4
   161be:	f003 fca9 	bl	19b14 <net_buf_unref>
	if (err  == -EIO) {
   161c2:	3605      	adds	r6, #5
   161c4:	d10e      	bne.n	161e4 <bt_conn_process_tx+0x100>
		tx_data(buf)->tx = NULL;
   161c6:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   161c8:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
   161ca:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   161cc:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   161ce:	f003 fca1 	bl	19b14 <net_buf_unref>
		if (tx) {
   161d2:	b13e      	cbz	r6, 161e4 <bt_conn_process_tx+0x100>
			conn_tx_destroy(conn, tx);
   161d4:	4631      	mov	r1, r6
   161d6:	4628      	mov	r0, r5
}
   161d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   161dc:	f7fe bf98 	b.w	15110 <conn_tx_destroy>
		flags = FRAG_CONT;
   161e0:	2701      	movs	r7, #1
   161e2:	e7bd      	b.n	16160 <bt_conn_process_tx+0x7c>
}
   161e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   161e8:	00036622 	.word	0x00036622
   161ec:	000376ce 	.word	0x000376ce
   161f0:	00033bc2 	.word	0x00033bc2
   161f4:	2000c580 	.word	0x2000c580

000161f8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   161f8:	b910      	cbnz	r0, 16200 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   161fa:	4802      	ldr	r0, [pc, #8]	; (16204 <bt_conn_lookup_index+0xc>)
   161fc:	f7ff baa8 	b.w	15750 <bt_conn_ref>
}
   16200:	2000      	movs	r0, #0
   16202:	4770      	bx	lr
   16204:	2000d8f0 	.word	0x2000d8f0

00016208 <bt_conn_init>:

int bt_conn_init(void)
{
   16208:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1620a:	4815      	ldr	r0, [pc, #84]	; (16260 <bt_conn_init+0x58>)
   1620c:	f01a f916 	bl	3043c <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16210:	4914      	ldr	r1, [pc, #80]	; (16264 <bt_conn_init+0x5c>)
   16212:	4813      	ldr	r0, [pc, #76]	; (16260 <bt_conn_init+0x58>)
   16214:	f01a f91f 	bl	30456 <k_queue_append>
   16218:	4913      	ldr	r1, [pc, #76]	; (16268 <bt_conn_init+0x60>)
   1621a:	4811      	ldr	r0, [pc, #68]	; (16260 <bt_conn_init+0x58>)
   1621c:	f01a f91b 	bl	30456 <k_queue_append>
   16220:	4912      	ldr	r1, [pc, #72]	; (1626c <bt_conn_init+0x64>)
   16222:	480f      	ldr	r0, [pc, #60]	; (16260 <bt_conn_init+0x58>)
   16224:	f01a f917 	bl	30456 <k_queue_append>
	}

	bt_att_init();
   16228:	f001 fa0a 	bl	17640 <bt_att_init>

	err = bt_smp_init();
   1622c:	f017 f995 	bl	2d55a <bt_smp_init>
	if (err) {
   16230:	4605      	mov	r5, r0
   16232:	b998      	cbnz	r0, 1625c <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
   16234:	f016 f944 	bl	2c4c0 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16238:	480d      	ldr	r0, [pc, #52]	; (16270 <bt_conn_init+0x68>)
   1623a:	f7ff fa89 	bl	15750 <bt_conn_ref>

			if (!conn) {
   1623e:	4604      	mov	r4, r0
   16240:	b160      	cbz	r0, 1625c <bt_conn_init+0x54>
   16242:	3004      	adds	r0, #4
   16244:	f015 fffc 	bl	2c240 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   16248:	07c3      	lsls	r3, r0, #31
   1624a:	d504      	bpl.n	16256 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn,
   1624c:	2102      	movs	r1, #2
   1624e:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   16250:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   16252:	f7ff fad3 	bl	157fc <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   16256:	4620      	mov	r0, r4
   16258:	f7ff faa4 	bl	157a4 <bt_conn_unref>
		}
	}

	return 0;
}
   1625c:	4628      	mov	r0, r5
   1625e:	bd38      	pop	{r3, r4, r5, pc}
   16260:	2000cf50 	.word	0x2000cf50
   16264:	2000e340 	.word	0x2000e340
   16268:	2000e350 	.word	0x2000e350
   1626c:	2000e360 	.word	0x2000e360
   16270:	2000d8f0 	.word	0x2000d8f0

00016274 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   16274:	b580      	push	{r7, lr}
   16276:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   16278:	b088      	sub	sp, #32
   1627a:	466a      	mov	r2, sp
   1627c:	4b07      	ldr	r3, [pc, #28]	; (1629c <l2cap_create_le_sig_pdu.part.0+0x28>)
   1627e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16282:	6153      	str	r3, [r2, #20]
   16284:	4b06      	ldr	r3, [pc, #24]	; (162a0 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   16286:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1628a:	2304      	movs	r3, #4
   1628c:	4805      	ldr	r0, [pc, #20]	; (162a4 <l2cap_create_le_sig_pdu.part.0+0x30>)
   1628e:	f842 3f10 	str.w	r3, [r2, #16]!
   16292:	f016 f886 	bl	2c3a2 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   16296:	2000      	movs	r0, #0
   16298:	46bd      	mov	sp, r7
   1629a:	bd80      	pop	{r7, pc}
   1629c:	00036ae3 	.word	0x00036ae3
   162a0:	00036d20 	.word	0x00036d20
   162a4:	00031bcc 	.word	0x00031bcc

000162a8 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   162a8:	b580      	push	{r7, lr}
   162aa:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   162ac:	b088      	sub	sp, #32
   162ae:	466a      	mov	r2, sp
   162b0:	4b08      	ldr	r3, [pc, #32]	; (162d4 <l2cap_accept.part.0+0x2c>)
   162b2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   162b6:	6153      	str	r3, [r2, #20]
   162b8:	4b07      	ldr	r3, [pc, #28]	; (162d8 <l2cap_accept.part.0+0x30>)
   162ba:	e9c2 3006 	strd	r3, r0, [r2, #24]
   162be:	2304      	movs	r3, #4
   162c0:	4806      	ldr	r0, [pc, #24]	; (162dc <l2cap_accept.part.0+0x34>)
   162c2:	f842 3f10 	str.w	r3, [r2, #16]!
   162c6:	f016 f86c 	bl	2c3a2 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   162ca:	f06f 000b 	mvn.w	r0, #11
   162ce:	46bd      	mov	sp, r7
   162d0:	bd80      	pop	{r7, pc}
   162d2:	bf00      	nop
   162d4:	00036b0f 	.word	0x00036b0f
   162d8:	00036d13 	.word	0x00036d13
   162dc:	00031bcc 	.word	0x00031bcc

000162e0 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   162e0:	4b04      	ldr	r3, [pc, #16]	; (162f4 <l2cap_accept+0x14>)
   162e2:	681a      	ldr	r2, [r3, #0]
   162e4:	b10a      	cbz	r2, 162ea <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   162e6:	f7ff bfdf 	b.w	162a8 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   162ea:	4803      	ldr	r0, [pc, #12]	; (162f8 <l2cap_accept+0x18>)
   162ec:	6058      	str	r0, [r3, #4]
}
   162ee:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   162f0:	600b      	str	r3, [r1, #0]
}
   162f2:	4770      	bx	lr
   162f4:	2000e374 	.word	0x2000e374
   162f8:	00032240 	.word	0x00032240

000162fc <bt_l2cap_connected>:
{
   162fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   162fe:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16300:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16302:	4d27      	ldr	r5, [pc, #156]	; (163a0 <bt_l2cap_connected+0xa4>)
   16304:	4f27      	ldr	r7, [pc, #156]	; (163a4 <bt_l2cap_connected+0xa8>)
   16306:	42bd      	cmp	r5, r7
   16308:	d946      	bls.n	16398 <bt_l2cap_connected+0x9c>
   1630a:	4927      	ldr	r1, [pc, #156]	; (163a8 <bt_l2cap_connected+0xac>)
   1630c:	f240 1381 	movw	r3, #385	; 0x181
   16310:	4a26      	ldr	r2, [pc, #152]	; (163ac <bt_l2cap_connected+0xb0>)
   16312:	4827      	ldr	r0, [pc, #156]	; (163b0 <bt_l2cap_connected+0xb4>)
   16314:	f014 fd50 	bl	2adb8 <assert_print>
   16318:	4826      	ldr	r0, [pc, #152]	; (163b4 <bt_l2cap_connected+0xb8>)
   1631a:	f014 fd4d 	bl	2adb8 <assert_print>
   1631e:	f240 1181 	movw	r1, #385	; 0x181
   16322:	4822      	ldr	r0, [pc, #136]	; (163ac <bt_l2cap_connected+0xb0>)
   16324:	f014 fd41 	bl	2adaa <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   16328:	4620      	mov	r0, r4
   1632a:	686b      	ldr	r3, [r5, #4]
   1632c:	a901      	add	r1, sp, #4
   1632e:	4798      	blx	r3
   16330:	2800      	cmp	r0, #0
   16332:	db2c      	blt.n	1638e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   16334:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   16336:	882a      	ldrh	r2, [r5, #0]
   16338:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1633a:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1633c:	68a8      	ldr	r0, [r5, #8]
   1633e:	f103 0210 	add.w	r2, r3, #16
   16342:	e8d2 1fef 	ldaex	r1, [r2]
   16346:	e8c2 6fec 	stlex	ip, r6, [r2]
   1634a:	f1bc 0f00 	cmp.w	ip, #0
   1634e:	d1f8      	bne.n	16342 <bt_l2cap_connected+0x46>
	parent->next = child;
   16350:	609e      	str	r6, [r3, #8]
	return list->tail;
   16352:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   16354:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   16358:	b9d9      	cbnz	r1, 16392 <bt_l2cap_connected+0x96>
	list->head = node;
   1635a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1635e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   16360:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   16362:	9801      	ldr	r0, [sp, #4]
   16364:	6843      	ldr	r3, [r0, #4]
   16366:	681b      	ldr	r3, [r3, #0]
   16368:	b103      	cbz	r3, 1636c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1636a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1636c:	9b01      	ldr	r3, [sp, #4]
   1636e:	3310      	adds	r3, #16
   16370:	e8d3 1fef 	ldaex	r1, [r3]
   16374:	f041 0101 	orr.w	r1, r1, #1
   16378:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1637c:	2a00      	cmp	r2, #0
   1637e:	d1f7      	bne.n	16370 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   16380:	9801      	ldr	r0, [sp, #4]
   16382:	6843      	ldr	r3, [r0, #4]
   16384:	69db      	ldr	r3, [r3, #28]
   16386:	b113      	cbz	r3, 1638e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   16388:	f100 0110 	add.w	r1, r0, #16
   1638c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1638e:	350c      	adds	r5, #12
   16390:	e7b9      	b.n	16306 <bt_l2cap_connected+0xa>
	parent->next = child;
   16392:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16394:	65a2      	str	r2, [r4, #88]	; 0x58
}
   16396:	e7e2      	b.n	1635e <bt_l2cap_connected+0x62>
   16398:	d3c6      	bcc.n	16328 <bt_l2cap_connected+0x2c>
}
   1639a:	b003      	add	sp, #12
   1639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1639e:	bf00      	nop
   163a0:	00031b20 	.word	0x00031b20
   163a4:	00031b44 	.word	0x00031b44
   163a8:	00036b6b 	.word	0x00036b6b
   163ac:	00036b3a 	.word	0x00036b3a
   163b0:	00033bc2 	.word	0x00033bc2
   163b4:	000342e3 	.word	0x000342e3

000163b8 <l2cap_recv>:
{
   163b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163bc:	b084      	sub	sp, #16
	if (buf->len < sizeof(*hdr)) {
   163be:	8a0b      	ldrh	r3, [r1, #16]
{
   163c0:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   163c2:	2b03      	cmp	r3, #3
{
   163c4:	460d      	mov	r5, r1
   163c6:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   163c8:	d80c      	bhi.n	163e4 <l2cap_recv+0x2c>
		LOG_ERR("Too small L2CAP signaling PDU");
   163ca:	466c      	mov	r4, sp
   163cc:	b088      	sub	sp, #32
   163ce:	aa02      	add	r2, sp, #8
   163d0:	4b54      	ldr	r3, [pc, #336]	; (16524 <l2cap_recv+0x16c>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   163d2:	6153      	str	r3, [r2, #20]
   163d4:	4b54      	ldr	r3, [pc, #336]	; (16528 <l2cap_recv+0x170>)
   163d6:	6193      	str	r3, [r2, #24]
   163d8:	2303      	movs	r3, #3
   163da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   163de:	f842 3f10 	str.w	r3, [r2, #16]!
   163e2:	e017      	b.n	16414 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   163e4:	2104      	movs	r1, #4
   163e6:	f105 000c 	add.w	r0, r5, #12
   163ea:	f003 fcfb 	bl	19de4 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   163ee:	8843      	ldrh	r3, [r0, #2]
   163f0:	4604      	mov	r4, r0
	if (buf->len != len) {
   163f2:	8a28      	ldrh	r0, [r5, #16]
   163f4:	4298      	cmp	r0, r3
   163f6:	d016      	beq.n	16426 <l2cap_recv+0x6e>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   163f8:	466c      	mov	r4, sp
   163fa:	b08a      	sub	sp, #40	; 0x28
   163fc:	aa02      	add	r2, sp, #8
   163fe:	494b      	ldr	r1, [pc, #300]	; (1652c <l2cap_recv+0x174>)
   16400:	6213      	str	r3, [r2, #32]
   16402:	6151      	str	r1, [r2, #20]
   16404:	4948      	ldr	r1, [pc, #288]	; (16528 <l2cap_recv+0x170>)
   16406:	2305      	movs	r3, #5
   16408:	e9c2 1006 	strd	r1, r0, [r2, #24]
   1640c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16410:	f842 3f10 	str.w	r3, [r2, #16]!
   16414:	4846      	ldr	r0, [pc, #280]	; (16530 <l2cap_recv+0x178>)
   16416:	f015 ffc4 	bl	2c3a2 <z_log_msg_static_create.constprop.0>
   1641a:	46a5      	mov	sp, r4
}
   1641c:	2000      	movs	r0, #0
   1641e:	3708      	adds	r7, #8
   16420:	46bd      	mov	sp, r7
   16422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   16426:	7861      	ldrb	r1, [r4, #1]
   16428:	b921      	cbnz	r1, 16434 <l2cap_recv+0x7c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1642a:	466c      	mov	r4, sp
   1642c:	b088      	sub	sp, #32
   1642e:	aa02      	add	r2, sp, #8
   16430:	4b40      	ldr	r3, [pc, #256]	; (16534 <l2cap_recv+0x17c>)
   16432:	e7ce      	b.n	163d2 <l2cap_recv+0x1a>
	switch (hdr->code) {
   16434:	7823      	ldrb	r3, [r4, #0]
   16436:	2b12      	cmp	r3, #18
   16438:	d020      	beq.n	1647c <l2cap_recv+0xc4>
   1643a:	2b13      	cmp	r3, #19
   1643c:	d015      	beq.n	1646a <l2cap_recv+0xb2>
   1643e:	2b01      	cmp	r3, #1
   16440:	d0ec      	beq.n	1641c <l2cap_recv+0x64>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   16442:	466d      	mov	r5, sp
   16444:	b088      	sub	sp, #32
   16446:	aa02      	add	r2, sp, #8
   16448:	493b      	ldr	r1, [pc, #236]	; (16538 <l2cap_recv+0x180>)
   1644a:	4839      	ldr	r0, [pc, #228]	; (16530 <l2cap_recv+0x178>)
   1644c:	6151      	str	r1, [r2, #20]
   1644e:	4936      	ldr	r1, [pc, #216]	; (16528 <l2cap_recv+0x170>)
	switch (hdr->code) {
   16450:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   16454:	2304      	movs	r3, #4
   16456:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1645a:	f842 3f10 	str.w	r3, [r2, #16]!
   1645e:	f015 ffa0 	bl	2c3a2 <z_log_msg_static_create.constprop.0>
   16462:	46ad      	mov	sp, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   16464:	7861      	ldrb	r1, [r4, #1]
   16466:	6830      	ldr	r0, [r6, #0]
   16468:	e029      	b.n	164be <l2cap_recv+0x106>
	if (buf->len < sizeof(*rsp)) {
   1646a:	2801      	cmp	r0, #1
   1646c:	d8d6      	bhi.n	1641c <l2cap_recv+0x64>
		LOG_ERR("Too small LE conn param rsp");
   1646e:	466c      	mov	r4, sp
   16470:	b088      	sub	sp, #32
   16472:	aa02      	add	r2, sp, #8
   16474:	4b31      	ldr	r3, [pc, #196]	; (1653c <l2cap_recv+0x184>)
   16476:	6153      	str	r3, [r2, #20]
   16478:	4b31      	ldr	r3, [pc, #196]	; (16540 <l2cap_recv+0x188>)
   1647a:	e7ac      	b.n	163d6 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   1647c:	2807      	cmp	r0, #7
   1647e:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   16480:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   16482:	d806      	bhi.n	16492 <l2cap_recv+0xda>
		LOG_ERR("Too small LE conn update param req");
   16484:	466c      	mov	r4, sp
   16486:	b088      	sub	sp, #32
   16488:	aa02      	add	r2, sp, #8
   1648a:	4b2e      	ldr	r3, [pc, #184]	; (16544 <l2cap_recv+0x18c>)
   1648c:	6153      	str	r3, [r2, #20]
   1648e:	4b2e      	ldr	r3, [pc, #184]	; (16548 <l2cap_recv+0x190>)
   16490:	e7a1      	b.n	163d6 <l2cap_recv+0x1e>
	if (conn->state != BT_CONN_CONNECTED) {
   16492:	7aa3      	ldrb	r3, [r4, #10]
   16494:	2b07      	cmp	r3, #7
   16496:	d00c      	beq.n	164b2 <l2cap_recv+0xfa>
		LOG_WRN("Not connected");
   16498:	466c      	mov	r4, sp
   1649a:	b088      	sub	sp, #32
   1649c:	aa02      	add	r2, sp, #8
   1649e:	4b2b      	ldr	r3, [pc, #172]	; (1654c <l2cap_recv+0x194>)
   164a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   164a4:	6153      	str	r3, [r2, #20]
   164a6:	4b28      	ldr	r3, [pc, #160]	; (16548 <l2cap_recv+0x190>)
   164a8:	6193      	str	r3, [r2, #24]
   164aa:	2303      	movs	r3, #3
   164ac:	f842 3f10 	str.w	r3, [r2, #16]!
   164b0:	e7b0      	b.n	16414 <l2cap_recv+0x5c>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   164b2:	f894 8003 	ldrb.w	r8, [r4, #3]
   164b6:	f1b8 0f00 	cmp.w	r8, #0
   164ba:	d003      	beq.n	164c4 <l2cap_recv+0x10c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   164bc:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   164be:	f015 ffd8 	bl	2c472 <l2cap_send_reject.constprop.0>
		break;
   164c2:	e7ab      	b.n	1641c <l2cap_recv+0x64>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   164c4:	8813      	ldrh	r3, [r2, #0]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   164c6:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   164c8:	803b      	strh	r3, [r7, #0]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   164ca:	8853      	ldrh	r3, [r2, #2]
   164cc:	807b      	strh	r3, [r7, #2]
	param.latency = sys_le16_to_cpu(req->latency);
   164ce:	8893      	ldrh	r3, [r2, #4]
   164d0:	80bb      	strh	r3, [r7, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
   164d2:	88d3      	ldrh	r3, [r2, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   164d4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   164d6:	80fb      	strh	r3, [r7, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   164d8:	f015 ff66 	bl	2c3a8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   164dc:	4605      	mov	r5, r0
   164de:	2800      	cmp	r0, #0
   164e0:	d09c      	beq.n	1641c <l2cap_recv+0x64>
	accepted = le_param_req(conn, &param);
   164e2:	4639      	mov	r1, r7
   164e4:	4620      	mov	r0, r4
   164e6:	f7ff fb71 	bl	15bcc <le_param_req>
   164ea:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   164ec:	2102      	movs	r1, #2
   164ee:	f105 000c 	add.w	r0, r5, #12
   164f2:	f003 fc95 	bl	19e20 <net_buf_simple_add>
	if (accepted) {
   164f6:	f086 0301 	eor.w	r3, r6, #1
   164fa:	b2db      	uxtb	r3, r3
   164fc:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   164fe:	462a      	mov	r2, r5
   16500:	4643      	mov	r3, r8
   16502:	2105      	movs	r1, #5
   16504:	4620      	mov	r0, r4
   16506:	f8cd 8000 	str.w	r8, [sp]
   1650a:	f015 ff99 	bl	2c440 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1650e:	b110      	cbz	r0, 16516 <l2cap_recv+0x15e>
		net_buf_unref(buf);
   16510:	4628      	mov	r0, r5
   16512:	f003 faff 	bl	19b14 <net_buf_unref>
	if (accepted) {
   16516:	2e00      	cmp	r6, #0
   16518:	d080      	beq.n	1641c <l2cap_recv+0x64>
		bt_conn_le_conn_update(conn, &param);
   1651a:	4639      	mov	r1, r7
   1651c:	4620      	mov	r0, r4
   1651e:	f015 ff17 	bl	2c350 <bt_conn_le_conn_update>
   16522:	e77b      	b.n	1641c <l2cap_recv+0x64>
   16524:	00036b92 	.word	0x00036b92
   16528:	00036d08 	.word	0x00036d08
   1652c:	00036bb4 	.word	0x00036bb4
   16530:	00031bcc 	.word	0x00031bcc
   16534:	00036bd9 	.word	0x00036bd9
   16538:	00036c57 	.word	0x00036c57
   1653c:	00036bfe 	.word	0x00036bfe
   16540:	00036cf6 	.word	0x00036cf6
   16544:	00036c1e 	.word	0x00036c1e
   16548:	00036cdd 	.word	0x00036cdd
   1654c:	00036c45 	.word	0x00036c45

00016550 <bt_l2cap_recv>:
{
   16550:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   16552:	8a0b      	ldrh	r3, [r1, #16]
{
   16554:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   16556:	2b03      	cmp	r3, #3
{
   16558:	460c      	mov	r4, r1
   1655a:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1655c:	d814      	bhi.n	16588 <bt_l2cap_recv+0x38>
		LOG_ERR("Too small L2CAP PDU received");
   1655e:	466d      	mov	r5, sp
   16560:	b088      	sub	sp, #32
   16562:	466a      	mov	r2, sp
   16564:	4b17      	ldr	r3, [pc, #92]	; (165c4 <bt_l2cap_recv+0x74>)
   16566:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1656a:	6153      	str	r3, [r2, #20]
   1656c:	4b16      	ldr	r3, [pc, #88]	; (165c8 <bt_l2cap_recv+0x78>)
   1656e:	6193      	str	r3, [r2, #24]
   16570:	2303      	movs	r3, #3
   16572:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   16576:	4815      	ldr	r0, [pc, #84]	; (165cc <bt_l2cap_recv+0x7c>)
   16578:	f015 ff13 	bl	2c3a2 <z_log_msg_static_create.constprop.0>
   1657c:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   1657e:	4620      	mov	r0, r4
   16580:	f003 fac8 	bl	19b14 <net_buf_unref>
}
   16584:	46bd      	mov	sp, r7
   16586:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16588:	2104      	movs	r1, #4
   1658a:	f104 000c 	add.w	r0, r4, #12
   1658e:	f003 fc29 	bl	19de4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16592:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16594:	4628      	mov	r0, r5
   16596:	f015 ff8a 	bl	2c4ae <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1659a:	b968      	cbnz	r0, 165b8 <bt_l2cap_recv+0x68>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1659c:	466d      	mov	r5, sp
   1659e:	b088      	sub	sp, #32
   165a0:	466a      	mov	r2, sp
   165a2:	4b0b      	ldr	r3, [pc, #44]	; (165d0 <bt_l2cap_recv+0x80>)
   165a4:	6153      	str	r3, [r2, #20]
   165a6:	4b08      	ldr	r3, [pc, #32]	; (165c8 <bt_l2cap_recv+0x78>)
   165a8:	e9c2 3106 	strd	r3, r1, [r2, #24]
   165ac:	2304      	movs	r3, #4
   165ae:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   165b2:	f842 3f10 	str.w	r3, [r2, #16]!
   165b6:	e7de      	b.n	16576 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   165b8:	6843      	ldr	r3, [r0, #4]
   165ba:	4621      	mov	r1, r4
   165bc:	695b      	ldr	r3, [r3, #20]
   165be:	4798      	blx	r3
   165c0:	e7dd      	b.n	1657e <bt_l2cap_recv+0x2e>
   165c2:	bf00      	nop
   165c4:	00036c83 	.word	0x00036c83
   165c8:	00036d38 	.word	0x00036d38
   165cc:	00031bcc 	.word	0x00031bcc
   165d0:	00036ca4 	.word	0x00036ca4

000165d4 <bt_l2cap_update_conn_param>:
{
   165d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   165d6:	4b17      	ldr	r3, [pc, #92]	; (16634 <bt_l2cap_update_conn_param+0x60>)
{
   165d8:	460e      	mov	r6, r1
	ident++;
   165da:	7819      	ldrb	r1, [r3, #0]
{
   165dc:	4605      	mov	r5, r0
	ident++;
   165de:	3101      	adds	r1, #1
   165e0:	b2c9      	uxtb	r1, r1
   165e2:	2901      	cmp	r1, #1
   165e4:	bf38      	it	cc
   165e6:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   165e8:	2208      	movs	r2, #8
   165ea:	2012      	movs	r0, #18
	ident++;
   165ec:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   165ee:	f015 fedb 	bl	2c3a8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   165f2:	4604      	mov	r4, r0
   165f4:	b1d0      	cbz	r0, 1662c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   165f6:	2108      	movs	r1, #8
   165f8:	300c      	adds	r0, #12
   165fa:	f003 fc11 	bl	19e20 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   165fe:	8833      	ldrh	r3, [r6, #0]
   16600:	4622      	mov	r2, r4
   16602:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   16604:	8873      	ldrh	r3, [r6, #2]
   16606:	2105      	movs	r1, #5
   16608:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1660a:	88b3      	ldrh	r3, [r6, #4]
   1660c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1660e:	88f3      	ldrh	r3, [r6, #6]
   16610:	80c3      	strh	r3, [r0, #6]
   16612:	2300      	movs	r3, #0
   16614:	4628      	mov	r0, r5
   16616:	9300      	str	r3, [sp, #0]
   16618:	f015 ff12 	bl	2c440 <bt_l2cap_send_cb>
	if (err) {
   1661c:	4605      	mov	r5, r0
   1661e:	b110      	cbz	r0, 16626 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   16620:	4620      	mov	r0, r4
   16622:	f003 fa77 	bl	19b14 <net_buf_unref>
}
   16626:	4628      	mov	r0, r5
   16628:	b002      	add	sp, #8
   1662a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1662c:	f06f 050b 	mvn.w	r5, #11
   16630:	e7f9      	b.n	16626 <bt_l2cap_update_conn_param+0x52>
   16632:	bf00      	nop
   16634:	2000ef14 	.word	0x2000ef14

00016638 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   16638:	2823      	cmp	r0, #35	; 0x23
   1663a:	d81f      	bhi.n	1667c <att_op_get_type+0x44>
   1663c:	281a      	cmp	r0, #26
   1663e:	d804      	bhi.n	1664a <att_op_get_type+0x12>
   16640:	1e43      	subs	r3, r0, #1
   16642:	2b18      	cmp	r3, #24
   16644:	d90e      	bls.n	16664 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   16646:	2006      	movs	r0, #6
   16648:	4770      	bx	lr
	switch (op) {
   1664a:	f1a0 031b 	sub.w	r3, r0, #27
   1664e:	2b08      	cmp	r3, #8
   16650:	d81e      	bhi.n	16690 <att_op_get_type+0x58>
   16652:	e8df f003 	tbb	[pc, r3]
   16656:	1d05      	.short	0x1d05
   16658:	191d231b 	.word	0x191d231b
   1665c:	1d25      	.short	0x1d25
   1665e:	05          	.byte	0x05
   1665f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   16660:	2003      	movs	r0, #3
   16662:	4770      	bx	lr
   16664:	2301      	movs	r3, #1
	switch (op) {
   16666:	4a0f      	ldr	r2, [pc, #60]	; (166a4 <att_op_get_type+0x6c>)
   16668:	4083      	lsls	r3, r0
   1666a:	401a      	ands	r2, r3
   1666c:	b9c2      	cbnz	r2, 166a0 <att_op_get_type+0x68>
   1666e:	4a0e      	ldr	r2, [pc, #56]	; (166a8 <att_op_get_type+0x70>)
   16670:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   16672:	2a00      	cmp	r2, #0
   16674:	bf14      	ite	ne
   16676:	2001      	movne	r0, #1
   16678:	2006      	moveq	r0, #6
   1667a:	4770      	bx	lr
	switch (op) {
   1667c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   16680:	2b52      	cmp	r3, #82	; 0x52
   16682:	d105      	bne.n	16690 <att_op_get_type+0x58>
		return ATT_COMMAND;
   16684:	2000      	movs	r0, #0
}
   16686:	4770      	bx	lr
		return ATT_REQUEST;
   16688:	2001      	movs	r0, #1
   1668a:	4770      	bx	lr
		return ATT_INDICATION;
   1668c:	2005      	movs	r0, #5
   1668e:	4770      	bx	lr
		return ATT_COMMAND;
   16690:	f010 0f40 	tst.w	r0, #64	; 0x40
   16694:	bf0c      	ite	eq
   16696:	2006      	moveq	r0, #6
   16698:	2000      	movne	r0, #0
   1669a:	4770      	bx	lr
	switch (op) {
   1669c:	2004      	movs	r0, #4
   1669e:	4770      	bx	lr
		return ATT_RESPONSE;
   166a0:	2002      	movs	r0, #2
   166a2:	4770      	bx	lr
   166a4:	028aaaaa 	.word	0x028aaaaa
   166a8:	01455554 	.word	0x01455554

000166ac <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   166ac:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   166ae:	3804      	subs	r0, #4
   166b0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   166b2:	a901      	add	r1, sp, #4
   166b4:	4802      	ldr	r0, [pc, #8]	; (166c0 <bt_att_released+0x14>)
   166b6:	f00e f933 	bl	24920 <k_mem_slab_free>
}
   166ba:	b003      	add	sp, #12
   166bc:	f85d fb04 	ldr.w	pc, [sp], #4
   166c0:	2000cd80 	.word	0x2000cd80

000166c4 <tx_meta_data_free>:
{
   166c4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   166c6:	4604      	mov	r4, r0
   166c8:	b948      	cbnz	r0, 166de <tx_meta_data_free+0x1a>
   166ca:	490a      	ldr	r1, [pc, #40]	; (166f4 <tx_meta_data_free+0x30>)
   166cc:	480a      	ldr	r0, [pc, #40]	; (166f8 <tx_meta_data_free+0x34>)
   166ce:	23ae      	movs	r3, #174	; 0xae
   166d0:	4a0a      	ldr	r2, [pc, #40]	; (166fc <tx_meta_data_free+0x38>)
   166d2:	f014 fb71 	bl	2adb8 <assert_print>
   166d6:	21ae      	movs	r1, #174	; 0xae
   166d8:	4808      	ldr	r0, [pc, #32]	; (166fc <tx_meta_data_free+0x38>)
   166da:	f014 fb66 	bl	2adaa <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   166de:	2100      	movs	r1, #0
   166e0:	2214      	movs	r2, #20
   166e2:	f01a f8ce 	bl	30882 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   166e6:	4621      	mov	r1, r4
}
   166e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   166ec:	4804      	ldr	r0, [pc, #16]	; (16700 <tx_meta_data_free+0x3c>)
   166ee:	f019 beb2 	b.w	30456 <k_queue_append>
   166f2:	bf00      	nop
   166f4:	00036740 	.word	0x00036740
   166f8:	00033bc2 	.word	0x00033bc2
   166fc:	00036d46 	.word	0x00036d46
   16700:	2000cf34 	.word	0x2000cf34

00016704 <find_type_cb>:
{
   16704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16708:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1670a:	f8d2 a000 	ldr.w	sl, [r2]
{
   1670e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   16710:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16714:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   16716:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16718:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1671c:	4680      	mov	r8, r0
   1671e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16720:	6800      	ldr	r0, [r0, #0]
   16722:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   16726:	85fb      	strh	r3, [r7, #46]	; 0x2e
   16728:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1672c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1672e:	f015 fc1b 	bl	2bf68 <bt_uuid_cmp>
   16732:	2800      	cmp	r0, #0
   16734:	d072      	beq.n	1681c <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   16736:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1673a:	f8d8 0000 	ldr.w	r0, [r8]
   1673e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   16742:	85fb      	strh	r3, [r7, #46]	; 0x2e
   16744:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   16748:	f015 fc0e 	bl	2bf68 <bt_uuid_cmp>
   1674c:	b138      	cbz	r0, 1675e <find_type_cb+0x5a>
		if (data->group &&
   1674e:	68a3      	ldr	r3, [r4, #8]
   16750:	b11b      	cbz	r3, 1675a <find_type_cb+0x56>
   16752:	885a      	ldrh	r2, [r3, #2]
   16754:	42b2      	cmp	r2, r6
   16756:	d200      	bcs.n	1675a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   16758:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1675a:	2001      	movs	r0, #1
   1675c:	e009      	b.n	16772 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1675e:	6861      	ldr	r1, [r4, #4]
   16760:	4608      	mov	r0, r1
   16762:	f015 feb8 	bl	2c4d6 <net_buf_frags_len>
   16766:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1676a:	1a1b      	subs	r3, r3, r0
   1676c:	2b03      	cmp	r3, #3
   1676e:	d804      	bhi.n	1677a <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   16770:	2000      	movs	r0, #0
}
   16772:	3744      	adds	r7, #68	; 0x44
   16774:	46bd      	mov	sp, r7
   16776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1677a:	4608      	mov	r0, r1
   1677c:	f003 fa26 	bl	19bcc <net_buf_frag_last>
   16780:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   16782:	6860      	ldr	r0, [r4, #4]
   16784:	f015 fea7 	bl	2c4d6 <net_buf_frags_len>
   16788:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1678c:	f105 090c 	add.w	r9, r5, #12
   16790:	ebab 0b00 	sub.w	fp, fp, r0
   16794:	4648      	mov	r0, r9
   16796:	f016 ff04 	bl	2d5a2 <net_buf_simple_tailroom>
   1679a:	4558      	cmp	r0, fp
   1679c:	d941      	bls.n	16822 <find_type_cb+0x11e>
   1679e:	6860      	ldr	r0, [r4, #4]
   167a0:	f015 fe99 	bl	2c4d6 <net_buf_frags_len>
   167a4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   167a8:	1a18      	subs	r0, r3, r0
	if (!len) {
   167aa:	b970      	cbnz	r0, 167ca <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   167ac:	6863      	ldr	r3, [r4, #4]
   167ae:	7a98      	ldrb	r0, [r3, #10]
   167b0:	f003 f862 	bl	19878 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   167b4:	2200      	movs	r2, #0
   167b6:	2300      	movs	r3, #0
   167b8:	f016 fed2 	bl	2d560 <net_buf_alloc_fixed>
		if (!frag) {
   167bc:	4605      	mov	r5, r0
   167be:	2800      	cmp	r0, #0
   167c0:	d0d6      	beq.n	16770 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   167c2:	4601      	mov	r1, r0
   167c4:	6860      	ldr	r0, [r4, #4]
   167c6:	f003 fa47 	bl	19c58 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   167ca:	2300      	movs	r3, #0
   167cc:	9300      	str	r3, [sp, #0]
   167ce:	4641      	mov	r1, r8
   167d0:	f8d8 a004 	ldr.w	sl, [r8, #4]
   167d4:	2310      	movs	r3, #16
   167d6:	6878      	ldr	r0, [r7, #4]
   167d8:	f107 0208 	add.w	r2, r7, #8
   167dc:	47d0      	blx	sl
	if (read < 0) {
   167de:	f1b0 0800 	subs.w	r8, r0, #0
   167e2:	db1b      	blt.n	1681c <find_type_cb+0x118>
	if (read != data->value_len) {
   167e4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   167e6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   167e8:	4542      	cmp	r2, r8
   167ea:	d043      	beq.n	16874 <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   167ec:	4601      	mov	r1, r0
   167ee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   167f2:	f015 fbe7 	bl	2bfc4 <bt_uuid_create>
   167f6:	b9c0      	cbnz	r0, 1682a <find_type_cb+0x126>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   167f8:	466d      	mov	r5, sp
   167fa:	b088      	sub	sp, #32
   167fc:	7c23      	ldrb	r3, [r4, #16]
   167fe:	aa02      	add	r2, sp, #8
   16800:	491f      	ldr	r1, [pc, #124]	; (16880 <find_type_cb+0x17c>)
   16802:	6151      	str	r1, [r2, #20]
   16804:	491f      	ldr	r1, [pc, #124]	; (16884 <find_type_cb+0x180>)
   16806:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unable to create UUID: size %d", read);
   1680a:	2304      	movs	r3, #4
   1680c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16810:	481d      	ldr	r0, [pc, #116]	; (16888 <find_type_cb+0x184>)
   16812:	f842 3f10 	str.w	r3, [r2, #16]!
   16816:	f015 ff66 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   1681a:	46ad      	mov	sp, r5
	data->group = NULL;
   1681c:	2300      	movs	r3, #0
   1681e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   16820:	e79b      	b.n	1675a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   16822:	4648      	mov	r0, r9
   16824:	f016 febd 	bl	2d5a2 <net_buf_simple_tailroom>
   16828:	e7bf      	b.n	167aa <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1682a:	fa5f f288 	uxtb.w	r2, r8
   1682e:	f107 0108 	add.w	r1, r7, #8
   16832:	f107 0018 	add.w	r0, r7, #24
   16836:	f015 fbc5 	bl	2bfc4 <bt_uuid_create>
   1683a:	b940      	cbnz	r0, 1684e <find_type_cb+0x14a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1683c:	466d      	mov	r5, sp
   1683e:	b088      	sub	sp, #32
   16840:	aa02      	add	r2, sp, #8
   16842:	4b12      	ldr	r3, [pc, #72]	; (1688c <find_type_cb+0x188>)
   16844:	6153      	str	r3, [r2, #20]
   16846:	4b0f      	ldr	r3, [pc, #60]	; (16884 <find_type_cb+0x180>)
   16848:	e9c2 3806 	strd	r3, r8, [r2, #24]
   1684c:	e7dd      	b.n	1680a <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1684e:	f107 0118 	add.w	r1, r7, #24
   16852:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   16856:	f015 fb87 	bl	2bf68 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1685a:	2800      	cmp	r0, #0
   1685c:	d1de      	bne.n	1681c <find_type_cb+0x118>
	data->err = 0x00;
   1685e:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   16860:	2104      	movs	r1, #4
   16862:	7463      	strb	r3, [r4, #17]
   16864:	f105 000c 	add.w	r0, r5, #12
   16868:	f003 fada 	bl	19e20 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1686c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1686e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16870:	68a3      	ldr	r3, [r4, #8]
   16872:	e771      	b.n	16758 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   16874:	f107 0108 	add.w	r1, r7, #8
   16878:	f019 ffd3 	bl	30822 <memcmp>
   1687c:	e7ed      	b.n	1685a <find_type_cb+0x156>
   1687e:	bf00      	nop
   16880:	00036d75 	.word	0x00036d75
   16884:	00037000 	.word	0x00037000
   16888:	00031b84 	.word	0x00031b84
   1688c:	00036d98 	.word	0x00036d98

00016890 <chan_send>:
{
   16890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16894:	b082      	sub	sp, #8
   16896:	4606      	mov	r6, r0
   16898:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1689a:	f8d1 a018 	ldr.w	sl, [r1, #24]
	hdr = (void *)buf->data;
   1689e:	68cb      	ldr	r3, [r1, #12]
{
   168a0:	af02      	add	r7, sp, #8
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   168a2:	2102      	movs	r1, #2
   168a4:	3034      	adds	r0, #52	; 0x34
   168a6:	f015 fe30 	bl	2c50a <atomic_test_bit>
   168aa:	b9a8      	cbnz	r0, 168d8 <chan_send+0x48>
		LOG_ERR("ATT channel not connected");
   168ac:	466c      	mov	r4, sp
   168ae:	b088      	sub	sp, #32
   168b0:	aa02      	add	r2, sp, #8
   168b2:	4b3e      	ldr	r3, [pc, #248]	; (169ac <chan_send+0x11c>)
   168b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   168b8:	6153      	str	r3, [r2, #20]
   168ba:	4b3d      	ldr	r3, [pc, #244]	; (169b0 <chan_send+0x120>)
   168bc:	483d      	ldr	r0, [pc, #244]	; (169b4 <chan_send+0x124>)
   168be:	6193      	str	r3, [r2, #24]
   168c0:	2303      	movs	r3, #3
   168c2:	f842 3f10 	str.w	r3, [r2, #16]!
   168c6:	f015 ff0e 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   168ca:	f06f 0515 	mvn.w	r5, #21
   168ce:	46a5      	mov	sp, r4
}
   168d0:	4628      	mov	r0, r5
   168d2:	46bd      	mov	sp, r7
   168d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   168d8:	781b      	ldrb	r3, [r3, #0]
   168da:	2bd2      	cmp	r3, #210	; 0xd2
   168dc:	d11d      	bne.n	1691a <chan_send+0x8a>
		err = bt_smp_sign(chan->att->conn, buf);
   168de:	6833      	ldr	r3, [r6, #0]
   168e0:	4621      	mov	r1, r4
   168e2:	6818      	ldr	r0, [r3, #0]
   168e4:	f016 fe36 	bl	2d554 <bt_smp_sign>
		if (err) {
   168e8:	4605      	mov	r5, r0
   168ea:	b1b0      	cbz	r0, 1691a <chan_send+0x8a>
			LOG_ERR("Error signing data");
   168ec:	466e      	mov	r6, sp
   168ee:	b088      	sub	sp, #32
   168f0:	aa02      	add	r2, sp, #8
   168f2:	4b31      	ldr	r3, [pc, #196]	; (169b8 <chan_send+0x128>)
   168f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   168f8:	6153      	str	r3, [r2, #20]
   168fa:	4b2d      	ldr	r3, [pc, #180]	; (169b0 <chan_send+0x120>)
   168fc:	482d      	ldr	r0, [pc, #180]	; (169b4 <chan_send+0x124>)
   168fe:	6193      	str	r3, [r2, #24]
   16900:	2303      	movs	r3, #3
   16902:	f842 3f10 	str.w	r3, [r2, #16]!
   16906:	f015 feee 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   1690a:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1690c:	69a0      	ldr	r0, [r4, #24]
   1690e:	f7ff fed9 	bl	166c4 <tx_meta_data_free>
			net_buf_unref(buf);
   16912:	4620      	mov	r0, r4
   16914:	f003 f8fe 	bl	19b14 <net_buf_unref>
			return err;
   16918:	e7da      	b.n	168d0 <chan_send+0x40>
	state->offset = net_buf_simple_headroom(buf);
   1691a:	f104 000c 	add.w	r0, r4, #12
   1691e:	f016 fe3c 	bl	2d59a <net_buf_simple_headroom>
	state->len = buf->len;
   16922:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   16926:	f8ca 6000 	str.w	r6, [sl]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1692a:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   1692c:	4680      	mov	r8, r0
   1692e:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   16930:	68e3      	ldr	r3, [r4, #12]
   16932:	7818      	ldrb	r0, [r3, #0]
   16934:	f7ff fe80 	bl	16638 <att_op_get_type>
   16938:	2805      	cmp	r0, #5
   1693a:	4605      	mov	r5, r0
	switch (op_type) {
   1693c:	d826      	bhi.n	1698c <chan_send+0xfc>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1693e:	4b1f      	ldr	r3, [pc, #124]	; (169bc <chan_send+0x12c>)
   16940:	4622      	mov	r2, r4
   16942:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16946:	2104      	movs	r1, #4
   16948:	4630      	mov	r0, r6
   1694a:	f8cd a000 	str.w	sl, [sp]
   1694e:	f015 fd77 	bl	2c440 <bt_l2cap_send_cb>
	if (err) {
   16952:	4605      	mov	r5, r0
   16954:	2800      	cmp	r0, #0
   16956:	d0bb      	beq.n	168d0 <chan_send+0x40>
		if (err == -ENOBUFS) {
   16958:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1695c:	d10f      	bne.n	1697e <chan_send+0xee>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1695e:	466e      	mov	r6, sp
   16960:	b088      	sub	sp, #32
   16962:	aa02      	add	r2, sp, #8
   16964:	4b16      	ldr	r3, [pc, #88]	; (169c0 <chan_send+0x130>)
   16966:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1696a:	6153      	str	r3, [r2, #20]
   1696c:	4b10      	ldr	r3, [pc, #64]	; (169b0 <chan_send+0x120>)
   1696e:	4811      	ldr	r0, [pc, #68]	; (169b4 <chan_send+0x124>)
   16970:	6193      	str	r3, [r2, #24]
   16972:	2303      	movs	r3, #3
   16974:	f842 3f10 	str.w	r3, [r2, #16]!
   16978:	f015 feb5 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   1697c:	46b5      	mov	sp, r6
	buf->data = buf->__buf + state->offset;
   1697e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16980:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16984:	fa13 f388 	uxtah	r3, r3, r8
   16988:	60e3      	str	r3, [r4, #12]
}
   1698a:	e7a1      	b.n	168d0 <chan_send+0x40>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   1698c:	f44f 7319 	mov.w	r3, #612	; 0x264
   16990:	4a0c      	ldr	r2, [pc, #48]	; (169c4 <chan_send+0x134>)
   16992:	490d      	ldr	r1, [pc, #52]	; (169c8 <chan_send+0x138>)
   16994:	480d      	ldr	r0, [pc, #52]	; (169cc <chan_send+0x13c>)
   16996:	f014 fa0f 	bl	2adb8 <assert_print>
   1699a:	4629      	mov	r1, r5
   1699c:	480c      	ldr	r0, [pc, #48]	; (169d0 <chan_send+0x140>)
   1699e:	f014 fa0b 	bl	2adb8 <assert_print>
   169a2:	f44f 7119 	mov.w	r1, #612	; 0x264
   169a6:	4807      	ldr	r0, [pc, #28]	; (169c4 <chan_send+0x134>)
   169a8:	f014 f9ff 	bl	2adaa <assert_post_action>
   169ac:	00036dbb 	.word	0x00036dbb
   169b0:	00037028 	.word	0x00037028
   169b4:	00031b84 	.word	0x00031b84
   169b8:	00036dd9 	.word	0x00036dd9
   169bc:	00032268 	.word	0x00032268
   169c0:	00036e09 	.word	0x00036e09
   169c4:	00036d46 	.word	0x00036d46
   169c8:	000386dc 	.word	0x000386dc
   169cc:	00033bc2 	.word	0x00033bc2
   169d0:	00036df0 	.word	0x00036df0

000169d4 <bt_att_chan_req_send>:
{
   169d4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   169d6:	b958      	cbnz	r0, 169f0 <bt_att_chan_req_send+0x1c>
   169d8:	4919      	ldr	r1, [pc, #100]	; (16a40 <bt_att_chan_req_send+0x6c>)
   169da:	f240 3325 	movw	r3, #805	; 0x325
   169de:	4a19      	ldr	r2, [pc, #100]	; (16a44 <bt_att_chan_req_send+0x70>)
   169e0:	4819      	ldr	r0, [pc, #100]	; (16a48 <bt_att_chan_req_send+0x74>)
   169e2:	f014 f9e9 	bl	2adb8 <assert_print>
   169e6:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   169ea:	4816      	ldr	r0, [pc, #88]	; (16a44 <bt_att_chan_req_send+0x70>)
   169ec:	f014 f9dd 	bl	2adaa <assert_post_action>
   169f0:	b949      	cbnz	r1, 16a06 <bt_att_chan_req_send+0x32>
   169f2:	4916      	ldr	r1, [pc, #88]	; (16a4c <bt_att_chan_req_send+0x78>)
   169f4:	f240 3326 	movw	r3, #806	; 0x326
   169f8:	4a12      	ldr	r2, [pc, #72]	; (16a44 <bt_att_chan_req_send+0x70>)
   169fa:	4813      	ldr	r0, [pc, #76]	; (16a48 <bt_att_chan_req_send+0x74>)
   169fc:	f014 f9dc 	bl	2adb8 <assert_print>
   16a00:	f240 3126 	movw	r1, #806	; 0x326
   16a04:	e7f1      	b.n	169ea <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   16a06:	684a      	ldr	r2, [r1, #4]
   16a08:	b94a      	cbnz	r2, 16a1e <bt_att_chan_req_send+0x4a>
   16a0a:	4911      	ldr	r1, [pc, #68]	; (16a50 <bt_att_chan_req_send+0x7c>)
   16a0c:	f240 3327 	movw	r3, #807	; 0x327
   16a10:	4a0c      	ldr	r2, [pc, #48]	; (16a44 <bt_att_chan_req_send+0x70>)
   16a12:	480d      	ldr	r0, [pc, #52]	; (16a48 <bt_att_chan_req_send+0x74>)
   16a14:	f014 f9d0 	bl	2adb8 <assert_print>
   16a18:	f240 3127 	movw	r1, #807	; 0x327
   16a1c:	e7e5      	b.n	169ea <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   16a1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16a20:	b14b      	cbz	r3, 16a36 <bt_att_chan_req_send+0x62>
   16a22:	490c      	ldr	r1, [pc, #48]	; (16a54 <bt_att_chan_req_send+0x80>)
   16a24:	f44f 734a 	mov.w	r3, #808	; 0x328
   16a28:	4a06      	ldr	r2, [pc, #24]	; (16a44 <bt_att_chan_req_send+0x70>)
   16a2a:	4807      	ldr	r0, [pc, #28]	; (16a48 <bt_att_chan_req_send+0x74>)
   16a2c:	f014 f9c4 	bl	2adb8 <assert_print>
   16a30:	f44f 714a 	mov.w	r1, #808	; 0x328
   16a34:	e7d9      	b.n	169ea <bt_att_chan_req_send+0x16>
}
   16a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   16a3a:	f015 be57 	b.w	2c6ec <chan_req_send>
   16a3e:	bf00      	nop
   16a40:	00036e30 	.word	0x00036e30
   16a44:	00036d46 	.word	0x00036d46
   16a48:	00033bc2 	.word	0x00033bc2
   16a4c:	00036c41 	.word	0x00036c41
   16a50:	00036e35 	.word	0x00036e35
   16a54:	00036e3f 	.word	0x00036e3f

00016a58 <att_get>:
{
   16a58:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16a5a:	7a83      	ldrb	r3, [r0, #10]
{
   16a5c:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   16a5e:	2b07      	cmp	r3, #7
   16a60:	d012      	beq.n	16a88 <att_get+0x30>
		LOG_WRN("Not connected");
   16a62:	466c      	mov	r4, sp
   16a64:	b088      	sub	sp, #32
   16a66:	466a      	mov	r2, sp
   16a68:	4b17      	ldr	r3, [pc, #92]	; (16ac8 <att_get+0x70>)
   16a6a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16a6e:	6153      	str	r3, [r2, #20]
   16a70:	4b16      	ldr	r3, [pc, #88]	; (16acc <att_get+0x74>)
   16a72:	6193      	str	r3, [r2, #24]
   16a74:	2303      	movs	r3, #3
   16a76:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to find ATT channel");
   16a7a:	4815      	ldr	r0, [pc, #84]	; (16ad0 <att_get+0x78>)
   16a7c:	f015 fe33 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
		return NULL;
   16a80:	2000      	movs	r0, #0
   16a82:	46a5      	mov	sp, r4
}
   16a84:	46bd      	mov	sp, r7
   16a86:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16a88:	2104      	movs	r1, #4
   16a8a:	f015 fd10 	bl	2c4ae <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16a8e:	4603      	mov	r3, r0
   16a90:	b960      	cbnz	r0, 16aac <att_get+0x54>
		LOG_ERR("Unable to find ATT channel");
   16a92:	466c      	mov	r4, sp
   16a94:	b088      	sub	sp, #32
   16a96:	466a      	mov	r2, sp
   16a98:	4b0e      	ldr	r3, [pc, #56]	; (16ad4 <att_get+0x7c>)
   16a9a:	6153      	str	r3, [r2, #20]
   16a9c:	4b0b      	ldr	r3, [pc, #44]	; (16acc <att_get+0x74>)
   16a9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16aa2:	6193      	str	r3, [r2, #24]
   16aa4:	2303      	movs	r3, #3
   16aa6:	f842 3f10 	str.w	r3, [r2, #16]!
   16aaa:	e7e6      	b.n	16a7a <att_get+0x22>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   16aac:	2102      	movs	r1, #2
   16aae:	3030      	adds	r0, #48	; 0x30
   16ab0:	f015 fd2b 	bl	2c50a <atomic_test_bit>
   16ab4:	b920      	cbnz	r0, 16ac0 <att_get+0x68>
		LOG_ERR("ATT channel not connected");
   16ab6:	466c      	mov	r4, sp
   16ab8:	b088      	sub	sp, #32
   16aba:	466a      	mov	r2, sp
   16abc:	4b06      	ldr	r3, [pc, #24]	; (16ad8 <att_get+0x80>)
   16abe:	e7ec      	b.n	16a9a <att_get+0x42>
	return att_chan->att;
   16ac0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   16ac4:	e7de      	b.n	16a84 <att_get+0x2c>
   16ac6:	bf00      	nop
   16ac8:	00036c45 	.word	0x00036c45
   16acc:	0003704d 	.word	0x0003704d
   16ad0:	00031b84 	.word	0x00031b84
   16ad4:	00036e4a 	.word	0x00036e4a
   16ad8:	00036dbb 	.word	0x00036dbb

00016adc <read_group_cb>:
{
   16adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16ae0:	f04f 0800 	mov.w	r8, #0
   16ae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   16ae8:	4605      	mov	r5, r0
   16aea:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16aec:	6800      	ldr	r0, [r0, #0]
   16aee:	a902      	add	r1, sp, #8
{
   16af0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16af2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16af4:	f88d 8008 	strb.w	r8, [sp, #8]
   16af8:	f8ad 300a 	strh.w	r3, [sp, #10]
   16afc:	f015 fa34 	bl	2bf68 <bt_uuid_cmp>
   16b00:	b1a0      	cbz	r0, 16b2c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16b02:	f642 0301 	movw	r3, #10241	; 0x2801
   16b06:	6828      	ldr	r0, [r5, #0]
   16b08:	a903      	add	r1, sp, #12
   16b0a:	f88d 800c 	strb.w	r8, [sp, #12]
   16b0e:	f8ad 300e 	strh.w	r3, [sp, #14]
   16b12:	f015 fa29 	bl	2bf68 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16b16:	b148      	cbz	r0, 16b2c <read_group_cb+0x50>
		if (data->group &&
   16b18:	6923      	ldr	r3, [r4, #16]
   16b1a:	b11b      	cbz	r3, 16b24 <read_group_cb+0x48>
   16b1c:	885a      	ldrh	r2, [r3, #2]
   16b1e:	42b2      	cmp	r2, r6
   16b20:	d200      	bcs.n	16b24 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16b22:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16b24:	2001      	movs	r0, #1
}
   16b26:	b004      	add	sp, #16
   16b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16b2c:	6861      	ldr	r1, [r4, #4]
   16b2e:	6828      	ldr	r0, [r5, #0]
   16b30:	f015 fa1a 	bl	2bf68 <bt_uuid_cmp>
   16b34:	b110      	cbz	r0, 16b3c <read_group_cb+0x60>
		data->group = NULL;
   16b36:	2300      	movs	r3, #0
   16b38:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16b3a:	e7f3      	b.n	16b24 <read_group_cb+0x48>
	if (data->rsp->len &&
   16b3c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16b3e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16b40:	781a      	ldrb	r2, [r3, #0]
   16b42:	b132      	cbz	r2, 16b52 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16b44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16b46:	8a01      	ldrh	r1, [r0, #16]
   16b48:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16b4a:	4293      	cmp	r3, r2
   16b4c:	da01      	bge.n	16b52 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   16b4e:	2000      	movs	r0, #0
   16b50:	e7e9      	b.n	16b26 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16b52:	2104      	movs	r1, #4
   16b54:	300c      	adds	r0, #12
   16b56:	f003 f963 	bl	19e20 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16b5a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16b5c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16b5e:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16b60:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   16b62:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16b64:	4b07      	ldr	r3, [pc, #28]	; (16b84 <read_group_cb+0xa8>)
   16b66:	9401      	str	r4, [sp, #4]
   16b68:	9300      	str	r3, [sp, #0]
   16b6a:	4638      	mov	r0, r7
   16b6c:	2300      	movs	r3, #0
   16b6e:	68a2      	ldr	r2, [r4, #8]
   16b70:	f015 fdfb 	bl	2c76a <att_chan_read>
	if (read < 0) {
   16b74:	2800      	cmp	r0, #0
   16b76:	dbea      	blt.n	16b4e <read_group_cb+0x72>
	if (!data->group) {
   16b78:	6920      	ldr	r0, [r4, #16]
   16b7a:	3800      	subs	r0, #0
   16b7c:	bf18      	it	ne
   16b7e:	2001      	movne	r0, #1
   16b80:	e7d1      	b.n	16b26 <read_group_cb+0x4a>
   16b82:	bf00      	nop
   16b84:	0002c627 	.word	0x0002c627

00016b88 <bt_att_connected>:
{
   16b88:	b510      	push	{r4, lr}
   16b8a:	4604      	mov	r4, r0
   16b8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   16b90:	e8d3 1fef 	ldaex	r1, [r3]
   16b94:	f041 0104 	orr.w	r1, r1, #4
   16b98:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16b9c:	2a00      	cmp	r2, #0
   16b9e:	d1f7      	bne.n	16b90 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16ba0:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   16ba2:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16ba4:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16ba6:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   16ba8:	f015 fcce 	bl	2c548 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16bac:	f104 0054 	add.w	r0, r4, #84	; 0x54
   16bb0:	4903      	ldr	r1, [pc, #12]	; (16bc0 <bt_att_connected+0x38>)
   16bb2:	f00e fee3 	bl	2597c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   16bb6:	6820      	ldr	r0, [r4, #0]
}
   16bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   16bbc:	f002 bdaa 	b.w	19714 <bt_gatt_connected>
   16bc0:	00017885 	.word	0x00017885

00016bc4 <read_type_cb>:
{
   16bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16bc8:	6817      	ldr	r7, [r2, #0]
{
   16bca:	4605      	mov	r5, r0
   16bcc:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16bce:	6800      	ldr	r0, [r0, #0]
   16bd0:	6851      	ldr	r1, [r2, #4]
{
   16bd2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   16bd4:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16bd6:	f015 f9c7 	bl	2bf68 <bt_uuid_cmp>
   16bda:	4681      	mov	r9, r0
   16bdc:	2800      	cmp	r0, #0
   16bde:	d13c      	bne.n	16c5a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16be0:	4630      	mov	r0, r6
   16be2:	2295      	movs	r2, #149	; 0x95
   16be4:	4629      	mov	r1, r5
   16be6:	f016 fb82 	bl	2d2ee <bt_gatt_check_perm>
   16bea:	4606      	mov	r6, r0
   16bec:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16bee:	b140      	cbz	r0, 16c02 <read_type_cb+0x3e>
		if (data->rsp->len) {
   16bf0:	68e3      	ldr	r3, [r4, #12]
   16bf2:	781b      	ldrb	r3, [r3, #0]
   16bf4:	b10b      	cbz	r3, 16bfa <read_type_cb+0x36>
			data->err = 0x00;
   16bf6:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   16bfa:	2000      	movs	r0, #0
}
   16bfc:	b003      	add	sp, #12
   16bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c02:	68a0      	ldr	r0, [r4, #8]
   16c04:	f002 ffe2 	bl	19bcc <net_buf_frag_last>
   16c08:	2102      	movs	r1, #2
   16c0a:	300c      	adds	r0, #12
   16c0c:	f003 f908 	bl	19e20 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c10:	4b13      	ldr	r3, [pc, #76]	; (16c60 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16c12:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   16c14:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16c18:	9300      	str	r3, [sp, #0]
   16c1a:	9401      	str	r4, [sp, #4]
   16c1c:	4633      	mov	r3, r6
   16c1e:	4629      	mov	r1, r5
   16c20:	4638      	mov	r0, r7
   16c22:	68a2      	ldr	r2, [r4, #8]
   16c24:	f015 fda1 	bl	2c76a <att_chan_read>
	if (read < 0) {
   16c28:	2800      	cmp	r0, #0
   16c2a:	da07      	bge.n	16c3c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   16c2c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   16c30:	bf32      	itee	cc
   16c32:	200e      	movcc	r0, #14
		return -err;
   16c34:	4240      	negcs	r0, r0
   16c36:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   16c38:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16c3a:	e7de      	b.n	16bfa <read_type_cb+0x36>
	if (!data->item) {
   16c3c:	6923      	ldr	r3, [r4, #16]
   16c3e:	2b00      	cmp	r3, #0
   16c40:	d0db      	beq.n	16bfa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16c42:	68a0      	ldr	r0, [r4, #8]
   16c44:	f015 fc47 	bl	2c4d6 <net_buf_frags_len>
   16c48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16c4a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16c4c:	68e3      	ldr	r3, [r4, #12]
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	4298      	cmp	r0, r3
   16c52:	bf94      	ite	ls
   16c54:	2000      	movls	r0, #0
   16c56:	2001      	movhi	r0, #1
   16c58:	e7d0      	b.n	16bfc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16c5a:	2001      	movs	r0, #1
   16c5c:	e7ce      	b.n	16bfc <read_type_cb+0x38>
   16c5e:	bf00      	nop
   16c60:	0002c4e7 	.word	0x0002c4e7

00016c64 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c68:	b082      	sub	sp, #8
   16c6a:	af00      	add	r7, sp, #0
   16c6c:	4604      	mov	r4, r0
   16c6e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16c70:	2200      	movs	r2, #0
   16c72:	2300      	movs	r3, #0
   16c74:	4639      	mov	r1, r7
   16c76:	483c      	ldr	r0, [pc, #240]	; (16d68 <bt_att_accept+0x104>)
   16c78:	f00d fde8 	bl	2484c <k_mem_slab_alloc>
   16c7c:	4605      	mov	r5, r0
   16c7e:	b1b8      	cbz	r0, 16cb0 <bt_att_accept+0x4c>
		LOG_ERR("No available ATT context for conn %p", conn);
   16c80:	466d      	mov	r5, sp
   16c82:	b088      	sub	sp, #32
   16c84:	466a      	mov	r2, sp
   16c86:	4b39      	ldr	r3, [pc, #228]	; (16d6c <bt_att_accept+0x108>)
   16c88:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16c8c:	6153      	str	r3, [r2, #20]
   16c8e:	4b38      	ldr	r3, [pc, #224]	; (16d70 <bt_att_accept+0x10c>)
   16c90:	4838      	ldr	r0, [pc, #224]	; (16d74 <bt_att_accept+0x110>)
   16c92:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16c96:	2304      	movs	r3, #4
   16c98:	f842 3f10 	str.w	r3, [r2, #16]!
   16c9c:	f015 fd23 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   16ca0:	46ad      	mov	sp, r5
		return -ENOMEM;
   16ca2:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16ca6:	4628      	mov	r0, r5
   16ca8:	3708      	adds	r7, #8
   16caa:	46bd      	mov	sp, r7
   16cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   16cb0:	f010 f8f4 	bl	26e9c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   16cb4:	4b30      	ldr	r3, [pc, #192]	; (16d78 <bt_att_accept+0x114>)
	(void)memset(att, 0, sizeof(*att));
   16cb6:	f8d7 8000 	ldr.w	r8, [r7]
   16cba:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   16cbc:	6018      	str	r0, [r3, #0]
   16cbe:	222c      	movs	r2, #44	; 0x2c
   16cc0:	f108 0004 	add.w	r0, r8, #4
   16cc4:	f019 fddd 	bl	30882 <memset>
	att->conn = conn;
   16cc8:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   16ccc:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16cce:	2200      	movs	r2, #0
	list->tail = NULL;
   16cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16cd4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   16cd8:	2300      	movs	r3, #0
   16cda:	4828      	ldr	r0, [pc, #160]	; (16d7c <bt_att_accept+0x118>)
   16cdc:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16cde:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16ce0:	f00d fdb4 	bl	2484c <k_mem_slab_alloc>
   16ce4:	4605      	mov	r5, r0
   16ce6:	b190      	cbz	r0, 16d0e <bt_att_accept+0xaa>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16ce8:	6823      	ldr	r3, [r4, #0]
   16cea:	466c      	mov	r4, sp
   16cec:	b088      	sub	sp, #32
   16cee:	466a      	mov	r2, sp
   16cf0:	4923      	ldr	r1, [pc, #140]	; (16d80 <bt_att_accept+0x11c>)
   16cf2:	4820      	ldr	r0, [pc, #128]	; (16d74 <bt_att_accept+0x110>)
   16cf4:	6151      	str	r1, [r2, #20]
   16cf6:	4923      	ldr	r1, [pc, #140]	; (16d84 <bt_att_accept+0x120>)
   16cf8:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16cfc:	2304      	movs	r3, #4
   16cfe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16d02:	f842 3f10 	str.w	r3, [r2, #16]!
   16d06:	f015 fcee 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   16d0a:	46a5      	mov	sp, r4
	if (!chan) {
   16d0c:	e7c9      	b.n	16ca2 <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   16d0e:	687b      	ldr	r3, [r7, #4]
   16d10:	4601      	mov	r1, r0
   16d12:	2290      	movs	r2, #144	; 0x90
   16d14:	4618      	mov	r0, r3
   16d16:	f019 fdb4 	bl	30882 <memset>
	chan->chan.chan.ops = &ops;
   16d1a:	4a1b      	ldr	r2, [pc, #108]	; (16d88 <bt_att_accept+0x124>)
   16d1c:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   16d1e:	303c      	adds	r0, #60	; 0x3c
   16d20:	f019 fb8c 	bl	3043c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16d24:	687b      	ldr	r3, [r7, #4]
   16d26:	3334      	adds	r3, #52	; 0x34
   16d28:	e8d3 2fef 	ldaex	r2, [r3]
   16d2c:	e8c3 5fe1 	stlex	r1, r5, [r3]
   16d30:	2900      	cmp	r1, #0
   16d32:	d1f9      	bne.n	16d28 <bt_att_accept+0xc4>
	chan->att = att;
   16d34:	687b      	ldr	r3, [r7, #4]
   16d36:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   16d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   16d3a:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   16d3e:	b91b      	cbnz	r3, 16d48 <bt_att_accept+0xe4>
   16d40:	f104 000c 	add.w	r0, r4, #12
   16d44:	f019 fb7a 	bl	3043c <z_impl_k_queue_init>
	return list->head;
   16d48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16d4a:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
   16d4e:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   16d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   16d54:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   16d56:	b902      	cbnz	r2, 16d5a <bt_att_accept+0xf6>
	list->tail = node;
   16d58:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   16d5a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   16d5c:	2b00      	cmp	r3, #0
   16d5e:	d0a0      	beq.n	16ca2 <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   16d60:	3304      	adds	r3, #4
   16d62:	6033      	str	r3, [r6, #0]
	return 0;
   16d64:	e79f      	b.n	16ca6 <bt_att_accept+0x42>
   16d66:	bf00      	nop
   16d68:	2000cd60 	.word	0x2000cd60
   16d6c:	00036e69 	.word	0x00036e69
   16d70:	0003703f 	.word	0x0003703f
   16d74:	00031b84 	.word	0x00031b84
   16d78:	2000e3e0 	.word	0x2000e3e0
   16d7c:	2000cd80 	.word	0x2000cd80
   16d80:	00036e92 	.word	0x00036e92
   16d84:	00037032 	.word	0x00037032
   16d88:	2000c888 	.word	0x2000c888

00016d8c <bt_att_chan_create_pdu>:
{
   16d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   16d90:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16d92:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16d94:	1c53      	adds	r3, r2, #1
   16d96:	428b      	cmp	r3, r1
{
   16d98:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16d9a:	d916      	bls.n	16dca <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   16d9c:	466c      	mov	r4, sp
   16d9e:	b08a      	sub	sp, #40	; 0x28
   16da0:	466a      	mov	r2, sp
   16da2:	4831      	ldr	r0, [pc, #196]	; (16e68 <bt_att_chan_create_pdu+0xdc>)
   16da4:	6213      	str	r3, [r2, #32]
   16da6:	6150      	str	r0, [r2, #20]
   16da8:	4830      	ldr	r0, [pc, #192]	; (16e6c <bt_att_chan_create_pdu+0xe0>)
   16daa:	2305      	movs	r3, #5
   16dac:	e9c2 0106 	strd	r0, r1, [r2, #24]
   16db0:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   16db4:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16db8:	482d      	ldr	r0, [pc, #180]	; (16e70 <bt_att_chan_create_pdu+0xe4>)
   16dba:	f015 fc94 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   16dbe:	46a5      	mov	sp, r4
		return NULL;
   16dc0:	2400      	movs	r4, #0
}
   16dc2:	4620      	mov	r0, r4
   16dc4:	46bd      	mov	sp, r7
   16dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   16dca:	4628      	mov	r0, r5
   16dcc:	f7ff fc34 	bl	16638 <att_op_get_type>
   16dd0:	2802      	cmp	r0, #2
   16dd2:	d01b      	beq.n	16e0c <bt_att_chan_create_pdu+0x80>
   16dd4:	2804      	cmp	r0, #4
   16dd6:	d019      	beq.n	16e0c <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   16dd8:	f04f 38ff 	mov.w	r8, #4294967295
   16ddc:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   16de0:	2100      	movs	r1, #0
   16de2:	4642      	mov	r2, r8
   16de4:	464b      	mov	r3, r9
   16de6:	4608      	mov	r0, r1
   16de8:	f015 fb27 	bl	2c43a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16dec:	4604      	mov	r4, r0
   16dee:	b990      	cbnz	r0, 16e16 <bt_att_chan_create_pdu+0x8a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16df0:	466c      	mov	r4, sp
   16df2:	b088      	sub	sp, #32
   16df4:	466a      	mov	r2, sp
   16df6:	4b1f      	ldr	r3, [pc, #124]	; (16e74 <bt_att_chan_create_pdu+0xe8>)
   16df8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16dfc:	6153      	str	r3, [r2, #20]
   16dfe:	4b1b      	ldr	r3, [pc, #108]	; (16e6c <bt_att_chan_create_pdu+0xe0>)
   16e00:	e9c2 3506 	strd	r3, r5, [r2, #24]
   16e04:	2304      	movs	r3, #4
   16e06:	f842 3f10 	str.w	r3, [r2, #16]!
   16e0a:	e7d5      	b.n	16db8 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   16e0c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   16e10:	f04f 0900 	mov.w	r9, #0
   16e14:	e7e4      	b.n	16de0 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   16e16:	f010 f841 	bl	26e9c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16e1a:	4b17      	ldr	r3, [pc, #92]	; (16e78 <bt_att_chan_create_pdu+0xec>)
   16e1c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16e1e:	4817      	ldr	r0, [pc, #92]	; (16e7c <bt_att_chan_create_pdu+0xf0>)
   16e20:	bf07      	ittee	eq
   16e22:	2200      	moveq	r2, #0
   16e24:	2300      	moveq	r3, #0
   16e26:	4642      	movne	r2, r8
   16e28:	464b      	movne	r3, r9
   16e2a:	f00e f947 	bl	250bc <z_impl_k_queue_get>
	if (!data) {
   16e2e:	b998      	cbnz	r0, 16e58 <bt_att_chan_create_pdu+0xcc>
		LOG_WRN("Unable to allocate ATT TX meta");
   16e30:	466d      	mov	r5, sp
   16e32:	b088      	sub	sp, #32
   16e34:	466a      	mov	r2, sp
   16e36:	4b12      	ldr	r3, [pc, #72]	; (16e80 <bt_att_chan_create_pdu+0xf4>)
   16e38:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16e3c:	6153      	str	r3, [r2, #20]
   16e3e:	4b0b      	ldr	r3, [pc, #44]	; (16e6c <bt_att_chan_create_pdu+0xe0>)
   16e40:	480b      	ldr	r0, [pc, #44]	; (16e70 <bt_att_chan_create_pdu+0xe4>)
   16e42:	6193      	str	r3, [r2, #24]
   16e44:	2303      	movs	r3, #3
   16e46:	f842 3f10 	str.w	r3, [r2, #16]!
   16e4a:	f015 fc4c 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16e4e:	4620      	mov	r0, r4
   16e50:	46ad      	mov	sp, r5
   16e52:	f002 fe5f 	bl	19b14 <net_buf_unref>
		return NULL;
   16e56:	e7b3      	b.n	16dc0 <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   16e58:	61a0      	str	r0, [r4, #24]
   16e5a:	2101      	movs	r1, #1
   16e5c:	f104 000c 	add.w	r0, r4, #12
   16e60:	f002 ffde 	bl	19e20 <net_buf_simple_add>
	hdr->code = op;
   16e64:	7005      	strb	r5, [r0, #0]
	return buf;
   16e66:	e7ac      	b.n	16dc2 <bt_att_chan_create_pdu+0x36>
   16e68:	00036ebb 	.word	0x00036ebb
   16e6c:	00037067 	.word	0x00037067
   16e70:	00031b84 	.word	0x00031b84
   16e74:	00036ae3 	.word	0x00036ae3
   16e78:	2000ded0 	.word	0x2000ded0
   16e7c:	2000cf34 	.word	0x2000cf34
   16e80:	00036ee4 	.word	0x00036ee4

00016e84 <bt_att_recv>:
{
   16e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   16e88:	8a0b      	ldrh	r3, [r1, #16]
{
   16e8a:	4605      	mov	r5, r0
   16e8c:	4689      	mov	r9, r1
   16e8e:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   16e90:	b99b      	cbnz	r3, 16eba <bt_att_recv+0x36>
		LOG_ERR("Too small ATT PDU received");
   16e92:	466c      	mov	r4, sp
   16e94:	b088      	sub	sp, #32
   16e96:	466a      	mov	r2, sp
   16e98:	4b52      	ldr	r3, [pc, #328]	; (16fe4 <bt_att_recv+0x160>)
   16e9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16e9e:	6153      	str	r3, [r2, #20]
   16ea0:	4b51      	ldr	r3, [pc, #324]	; (16fe8 <bt_att_recv+0x164>)
   16ea2:	6193      	str	r3, [r2, #24]
   16ea4:	2303      	movs	r3, #3
   16ea6:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_WRN("Ignoring unexpected request");
   16eaa:	4850      	ldr	r0, [pc, #320]	; (16fec <bt_att_recv+0x168>)
   16eac:	f015 fc1b 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   16eb0:	46a5      	mov	sp, r4
}
   16eb2:	2000      	movs	r0, #0
   16eb4:	46bd      	mov	sp, r7
   16eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16eba:	2101      	movs	r1, #1
   16ebc:	f109 000c 	add.w	r0, r9, #12
   16ec0:	f002 ff90 	bl	19de4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16ec4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   16ec8:	4604      	mov	r4, r0
   16eca:	2b00      	cmp	r3, #0
   16ecc:	d0f1      	beq.n	16eb2 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16ece:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16ed0:	7801      	ldrb	r1, [r0, #0]
   16ed2:	f8df b11c 	ldr.w	fp, [pc, #284]	; 16ff0 <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16ed6:	1f2e      	subs	r6, r5, #4
		if (hdr->code == handlers[i].op) {
   16ed8:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   16edc:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   16ee0:	4288      	cmp	r0, r1
   16ee2:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   16ee6:	d118      	bne.n	16f1a <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   16ee8:	f892 8002 	ldrb.w	r8, [r2, #2]
   16eec:	f1b8 0f01 	cmp.w	r8, #1
   16ef0:	d137      	bne.n	16f62 <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16ef2:	2100      	movs	r1, #0
   16ef4:	f105 0030 	add.w	r0, r5, #48	; 0x30
   16ef8:	f015 fce8 	bl	2c8cc <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16efc:	2800      	cmp	r0, #0
   16efe:	d03e      	beq.n	16f7e <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected request");
   16f00:	466c      	mov	r4, sp
   16f02:	b088      	sub	sp, #32
   16f04:	466a      	mov	r2, sp
   16f06:	4b3b      	ldr	r3, [pc, #236]	; (16ff4 <bt_att_recv+0x170>)
   16f08:	6153      	str	r3, [r2, #20]
   16f0a:	4b37      	ldr	r3, [pc, #220]	; (16fe8 <bt_att_recv+0x164>)
   16f0c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16f10:	6193      	str	r3, [r2, #24]
   16f12:	2303      	movs	r3, #3
   16f14:	f842 3f10 	str.w	r3, [r2, #16]!
   16f18:	e7c7      	b.n	16eaa <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16f1a:	3301      	adds	r3, #1
   16f1c:	2b1e      	cmp	r3, #30
   16f1e:	d1db      	bne.n	16ed8 <bt_att_recv+0x54>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   16f20:	466d      	mov	r5, sp
   16f22:	b088      	sub	sp, #32
   16f24:	466a      	mov	r2, sp
   16f26:	4b34      	ldr	r3, [pc, #208]	; (16ff8 <bt_att_recv+0x174>)
   16f28:	4830      	ldr	r0, [pc, #192]	; (16fec <bt_att_recv+0x168>)
   16f2a:	6153      	str	r3, [r2, #20]
   16f2c:	4b2e      	ldr	r3, [pc, #184]	; (16fe8 <bt_att_recv+0x164>)
   16f2e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   16f32:	2304      	movs	r3, #4
   16f34:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16f38:	f842 3f10 	str.w	r3, [r2, #16]!
   16f3c:	f015 fbd3 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   16f40:	7821      	ldrb	r1, [r4, #0]
   16f42:	46ad      	mov	sp, r5
   16f44:	4608      	mov	r0, r1
   16f46:	f7ff fb77 	bl	16638 <att_op_get_type>
   16f4a:	2800      	cmp	r0, #0
   16f4c:	d0b1      	beq.n	16eb2 <bt_att_recv+0x2e>
   16f4e:	2805      	cmp	r0, #5
   16f50:	d0af      	beq.n	16eb2 <bt_att_recv+0x2e>
	if (!req) {
   16f52:	2900      	cmp	r1, #0
   16f54:	d0ad      	beq.n	16eb2 <bt_att_recv+0x2e>
   16f56:	2306      	movs	r3, #6
   16f58:	2200      	movs	r2, #0
   16f5a:	4630      	mov	r0, r6
   16f5c:	f015 fe20 	bl	2cba0 <send_err_rsp.part.0>
   16f60:	e7a7      	b.n	16eb2 <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   16f62:	f1b8 0f05 	cmp.w	r8, #5
   16f66:	d10a      	bne.n	16f7e <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   16f68:	2101      	movs	r1, #1
   16f6a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   16f6e:	f015 fcad 	bl	2c8cc <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   16f72:	b120      	cbz	r0, 16f7e <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected indication");
   16f74:	466c      	mov	r4, sp
   16f76:	b088      	sub	sp, #32
   16f78:	466a      	mov	r2, sp
   16f7a:	4b20      	ldr	r3, [pc, #128]	; (16ffc <bt_att_recv+0x178>)
   16f7c:	e7c4      	b.n	16f08 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   16f7e:	44da      	add	sl, fp
   16f80:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   16f84:	f89a 2001 	ldrb.w	r2, [sl, #1]
   16f88:	429a      	cmp	r2, r3
   16f8a:	d919      	bls.n	16fc0 <bt_att_recv+0x13c>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16f8c:	46e8      	mov	r8, sp
   16f8e:	b08a      	sub	sp, #40	; 0x28
   16f90:	466a      	mov	r2, sp
   16f92:	7821      	ldrb	r1, [r4, #0]
   16f94:	481a      	ldr	r0, [pc, #104]	; (17000 <bt_att_recv+0x17c>)
   16f96:	6211      	str	r1, [r2, #32]
   16f98:	6150      	str	r0, [r2, #20]
   16f9a:	4813      	ldr	r0, [pc, #76]	; (16fe8 <bt_att_recv+0x164>)
   16f9c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16fa0:	e9c2 0306 	strd	r0, r3, [r2, #24]
   16fa4:	2305      	movs	r3, #5
   16fa6:	4811      	ldr	r0, [pc, #68]	; (16fec <bt_att_recv+0x168>)
   16fa8:	f842 3f10 	str.w	r3, [r2, #16]!
   16fac:	f015 fb9b 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16fb0:	f89a 3002 	ldrb.w	r3, [sl, #2]
   16fb4:	46c5      	mov	sp, r8
   16fb6:	2b01      	cmp	r3, #1
   16fb8:	f47f af7b 	bne.w	16eb2 <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   16fbc:	2304      	movs	r3, #4
   16fbe:	e00c      	b.n	16fda <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   16fc0:	f8da 3004 	ldr.w	r3, [sl, #4]
   16fc4:	4649      	mov	r1, r9
   16fc6:	4630      	mov	r0, r6
   16fc8:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16fca:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   16fce:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16fd0:	f47f af6f 	bne.w	16eb2 <bt_att_recv+0x2e>
   16fd4:	2800      	cmp	r0, #0
   16fd6:	f43f af6c 	beq.w	16eb2 <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16fda:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   16fdc:	2900      	cmp	r1, #0
   16fde:	f43f af68 	beq.w	16eb2 <bt_att_recv+0x2e>
   16fe2:	e7b9      	b.n	16f58 <bt_att_recv+0xd4>
   16fe4:	00036f07 	.word	0x00036f07
   16fe8:	0003701c 	.word	0x0003701c
   16fec:	00031b84 	.word	0x00031b84
   16ff0:	00032280 	.word	0x00032280
   16ff4:	00036f44 	.word	0x00036f44
   16ff8:	00036f26 	.word	0x00036f26
   16ffc:	00036f64 	.word	0x00036f64
   17000:	00036f87 	.word	0x00036f87

00017004 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17004:	b5f0      	push	{r4, r5, r6, r7, lr}
   17006:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17008:	6803      	ldr	r3, [r0, #0]
   1700a:	460d      	mov	r5, r1
   1700c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1700e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17010:	bf18      	it	ne
   17012:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17014:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   17016:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   17018:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1701a:	f016 fa3d 	bl	2d498 <bt_gatt_change_aware>
   1701e:	b948      	cbnz	r0, 17034 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17020:	2105      	movs	r1, #5
   17022:	f104 0034 	add.w	r0, r4, #52	; 0x34
   17026:	f015 fc51 	bl	2c8cc <atomic_test_and_set_bit>
   1702a:	2800      	cmp	r0, #0
   1702c:	d048      	beq.n	170c0 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1702e:	2000      	movs	r0, #0
}
   17030:	b007      	add	sp, #28
   17032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   17034:	2e00      	cmp	r6, #0
   17036:	d045      	beq.n	170c4 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   17038:	2218      	movs	r2, #24
   1703a:	2100      	movs	r1, #0
   1703c:	4668      	mov	r0, sp
   1703e:	f019 fc20 	bl	30882 <memset>
	if (rsp) {
   17042:	bb67      	cbnz	r7, 1709e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   17044:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17046:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   17048:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1704a:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1704c:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1704e:	2300      	movs	r3, #0
   17050:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   17054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   17056:	4a1c      	ldr	r2, [pc, #112]	; (170c8 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   17058:	9303      	str	r3, [sp, #12]
	data.len = len;
   1705a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   1705e:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   17062:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17066:	2301      	movs	r3, #1
   17068:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1706c:	466b      	mov	r3, sp
   1706e:	f015 facf 	bl	2c610 <bt_gatt_foreach_attr>
	if (data.err) {
   17072:	f89d 3014 	ldrb.w	r3, [sp, #20]
   17076:	b1e3      	cbz	r3, 170b2 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   17078:	2f00      	cmp	r7, #0
   1707a:	d0d8      	beq.n	1702e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1707c:	9b01      	ldr	r3, [sp, #4]
   1707e:	6998      	ldr	r0, [r3, #24]
   17080:	f7ff fb20 	bl	166c4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17084:	9801      	ldr	r0, [sp, #4]
   17086:	f002 fd45 	bl	19b14 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1708a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1708e:	2d00      	cmp	r5, #0
   17090:	d0cd      	beq.n	1702e <att_write_rsp.constprop.0+0x2a>
   17092:	4632      	mov	r2, r6
   17094:	4629      	mov	r1, r5
   17096:	4620      	mov	r0, r4
   17098:	f015 fd82 	bl	2cba0 <send_err_rsp.part.0>
   1709c:	e7c7      	b.n	1702e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1709e:	2200      	movs	r2, #0
   170a0:	4639      	mov	r1, r7
   170a2:	4620      	mov	r0, r4
   170a4:	f7ff fe72 	bl	16d8c <bt_att_chan_create_pdu>
   170a8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   170aa:	2800      	cmp	r0, #0
   170ac:	d1ca      	bne.n	17044 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   170ae:	200e      	movs	r0, #14
   170b0:	e7be      	b.n	17030 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   170b2:	9901      	ldr	r1, [sp, #4]
   170b4:	2900      	cmp	r1, #0
   170b6:	d0ba      	beq.n	1702e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   170b8:	4620      	mov	r0, r4
   170ba:	f015 fb48 	bl	2c74e <bt_att_chan_send_rsp>
   170be:	e7b6      	b.n	1702e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   170c0:	2012      	movs	r0, #18
   170c2:	e7b5      	b.n	17030 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   170c4:	2001      	movs	r0, #1
   170c6:	e7b3      	b.n	17030 <att_write_rsp.constprop.0+0x2c>
   170c8:	0002c5af 	.word	0x0002c5af

000170cc <bt_att_create_pdu>:
{
   170cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170ce:	af00      	add	r7, sp, #0
   170d0:	460e      	mov	r6, r1
   170d2:	4615      	mov	r5, r2
	att = att_get(conn);
   170d4:	f7ff fcc0 	bl	16a58 <att_get>
	if (!att) {
   170d8:	b1f0      	cbz	r0, 17118 <bt_att_create_pdu+0x4c>
	return list->head;
   170da:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   170dc:	4618      	mov	r0, r3
   170de:	b11b      	cbz	r3, 170e8 <bt_att_create_pdu+0x1c>
	return node->next;
   170e0:	f850 3988 	ldr.w	r3, [r0], #-136
   170e4:	b103      	cbz	r3, 170e8 <bt_att_create_pdu+0x1c>
   170e6:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   170e8:	1c6c      	adds	r4, r5, #1
   170ea:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   170ec:	b118      	cbz	r0, 170f6 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   170ee:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   170f0:	42a1      	cmp	r1, r4
   170f2:	d21b      	bcs.n	1712c <bt_att_create_pdu+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   170f4:	b993      	cbnz	r3, 1711c <bt_att_create_pdu+0x50>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   170f6:	466d      	mov	r5, sp
   170f8:	b088      	sub	sp, #32
   170fa:	466a      	mov	r2, sp
   170fc:	4b0f      	ldr	r3, [pc, #60]	; (1713c <bt_att_create_pdu+0x70>)
   170fe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17102:	6153      	str	r3, [r2, #20]
   17104:	4b0e      	ldr	r3, [pc, #56]	; (17140 <bt_att_create_pdu+0x74>)
   17106:	480f      	ldr	r0, [pc, #60]	; (17144 <bt_att_create_pdu+0x78>)
   17108:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1710c:	2304      	movs	r3, #4
   1710e:	f842 3f10 	str.w	r3, [r2, #16]!
   17112:	f015 fae8 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   17116:	46ad      	mov	sp, r5
		return NULL;
   17118:	2000      	movs	r0, #0
   1711a:	e00b      	b.n	17134 <bt_att_create_pdu+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1711c:	4618      	mov	r0, r3
   1711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   17122:	b14b      	cbz	r3, 17138 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17124:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17126:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17128:	428a      	cmp	r2, r1
   1712a:	d8f7      	bhi.n	1711c <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   1712c:	462a      	mov	r2, r5
   1712e:	4631      	mov	r1, r6
   17130:	f7ff fe2c 	bl	16d8c <bt_att_chan_create_pdu>
}
   17134:	46bd      	mov	sp, r7
   17136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17138:	4614      	mov	r4, r2
   1713a:	e7d8      	b.n	170ee <bt_att_create_pdu+0x22>
   1713c:	00036faa 	.word	0x00036faa
   17140:	00037055 	.word	0x00037055
   17144:	00031b84 	.word	0x00031b84

00017148 <att_read_group_req>:
{
   17148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1714c:	8a0e      	ldrh	r6, [r1, #16]
{
   1714e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   17150:	3e04      	subs	r6, #4
   17152:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   17154:	2e02      	cmp	r6, #2
{
   17156:	4608      	mov	r0, r1
   17158:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1715a:	d001      	beq.n	17160 <att_read_group_req+0x18>
   1715c:	2e10      	cmp	r6, #16
   1715e:	d16a      	bne.n	17236 <att_read_group_req+0xee>
   17160:	2104      	movs	r1, #4
   17162:	300c      	adds	r0, #12
   17164:	f002 fe3e 	bl	19de4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17168:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1716c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1716e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17170:	1d01      	adds	r1, r0, #4
   17172:	4632      	mov	r2, r6
   17174:	4640      	mov	r0, r8
   17176:	f014 ff25 	bl	2bfc4 <bt_uuid_create>
   1717a:	2800      	cmp	r0, #0
   1717c:	d05d      	beq.n	1723a <att_read_group_req+0xf2>
	if (!start || !end) {
   1717e:	2d00      	cmp	r5, #0
   17180:	d03a      	beq.n	171f8 <att_read_group_req+0xb0>
   17182:	2600      	movs	r6, #0
   17184:	2f00      	cmp	r7, #0
   17186:	d036      	beq.n	171f6 <att_read_group_req+0xae>
	if (start > end) {
   17188:	42bd      	cmp	r5, r7
   1718a:	d835      	bhi.n	171f8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1718c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17190:	4640      	mov	r0, r8
   17192:	a901      	add	r1, sp, #4
   17194:	f88d 6004 	strb.w	r6, [sp, #4]
   17198:	f8ad 3006 	strh.w	r3, [sp, #6]
   1719c:	f014 fee4 	bl	2bf68 <bt_uuid_cmp>
   171a0:	bb70      	cbnz	r0, 17200 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   171a2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   171a4:	2214      	movs	r2, #20
   171a6:	2100      	movs	r1, #0
   171a8:	a807      	add	r0, sp, #28
   171aa:	f019 fb6a 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   171ae:	2201      	movs	r2, #1
   171b0:	2111      	movs	r1, #17
   171b2:	4630      	mov	r0, r6
   171b4:	f7ff ff8a 	bl	170cc <bt_att_create_pdu>
   171b8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   171ba:	2800      	cmp	r0, #0
   171bc:	d03d      	beq.n	1723a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   171be:	2101      	movs	r1, #1
   171c0:	300c      	adds	r0, #12
	data.uuid = uuid;
   171c2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   171c6:	f002 fe2b 	bl	19e20 <net_buf_simple_add>
	data.rsp->len = 0U;
   171ca:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   171cc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   171ce:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   171d0:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   171d2:	4a1b      	ldr	r2, [pc, #108]	; (17240 <att_read_group_req+0xf8>)
	data.group = NULL;
   171d4:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   171d6:	4628      	mov	r0, r5
   171d8:	ab07      	add	r3, sp, #28
   171da:	f015 fa19 	bl	2c610 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   171de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   171e0:	781b      	ldrb	r3, [r3, #0]
   171e2:	bb1b      	cbnz	r3, 1722c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   171e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   171e6:	6998      	ldr	r0, [r3, #24]
   171e8:	f7ff fa6c 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   171ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   171ee:	f002 fc91 	bl	19b14 <net_buf_unref>
	if (!req) {
   171f2:	230a      	movs	r3, #10
   171f4:	e001      	b.n	171fa <att_read_group_req+0xb2>
			*err = 0U;
   171f6:	463d      	mov	r5, r7
	if (!req) {
   171f8:	2301      	movs	r3, #1
   171fa:	462a      	mov	r2, r5
   171fc:	2110      	movs	r1, #16
   171fe:	e00e      	b.n	1721e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   17200:	f642 0301 	movw	r3, #10241	; 0x2801
   17204:	4640      	mov	r0, r8
   17206:	a907      	add	r1, sp, #28
   17208:	f88d 601c 	strb.w	r6, [sp, #28]
   1720c:	f8ad 301e 	strh.w	r3, [sp, #30]
   17210:	f014 feaa 	bl	2bf68 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17214:	2800      	cmp	r0, #0
   17216:	d0c4      	beq.n	171a2 <att_read_group_req+0x5a>
	if (!req) {
   17218:	2310      	movs	r3, #16
   1721a:	462a      	mov	r2, r5
   1721c:	4619      	mov	r1, r3
   1721e:	4620      	mov	r0, r4
   17220:	f015 fcbe 	bl	2cba0 <send_err_rsp.part.0>
		return 0;
   17224:	2000      	movs	r0, #0
}
   17226:	b00c      	add	sp, #48	; 0x30
   17228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1722c:	4620      	mov	r0, r4
   1722e:	9909      	ldr	r1, [sp, #36]	; 0x24
   17230:	f015 fa8d 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   17234:	e7f6      	b.n	17224 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   17236:	2004      	movs	r0, #4
   17238:	e7f5      	b.n	17226 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1723a:	200e      	movs	r0, #14
   1723c:	e7f3      	b.n	17226 <att_read_group_req+0xde>
   1723e:	bf00      	nop
   17240:	00016add 	.word	0x00016add

00017244 <att_read_mult_vl_req>:
{
   17244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17248:	6846      	ldr	r6, [r0, #4]
{
   1724a:	4604      	mov	r4, r0
   1724c:	460d      	mov	r5, r1
   1724e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   17250:	2101      	movs	r1, #1
   17252:	4630      	mov	r0, r6
   17254:	f016 f920 	bl	2d498 <bt_gatt_change_aware>
   17258:	b950      	cbnz	r0, 17270 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1725a:	2105      	movs	r1, #5
   1725c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   17260:	f015 fb34 	bl	2c8cc <atomic_test_and_set_bit>
   17264:	2800      	cmp	r0, #0
   17266:	d13b      	bne.n	172e0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17268:	2012      	movs	r0, #18
}
   1726a:	b005      	add	sp, #20
   1726c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17270:	2210      	movs	r2, #16
   17272:	2100      	movs	r1, #0
   17274:	4668      	mov	r0, sp
   17276:	f019 fb04 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1727a:	2200      	movs	r2, #0
   1727c:	2121      	movs	r1, #33	; 0x21
   1727e:	4630      	mov	r0, r6
   17280:	f7ff ff24 	bl	170cc <bt_att_create_pdu>
   17284:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17286:	b368      	cbz	r0, 172e4 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17288:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1728c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 172e8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   17290:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   17292:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   17296:	8a2b      	ldrh	r3, [r5, #16]
   17298:	2b01      	cmp	r3, #1
   1729a:	d804      	bhi.n	172a6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1729c:	4620      	mov	r0, r4
   1729e:	9902      	ldr	r1, [sp, #8]
   172a0:	f015 fa55 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   172a4:	e01c      	b.n	172e0 <att_read_mult_vl_req+0x9c>
   172a6:	4638      	mov	r0, r7
   172a8:	f016 f96f 	bl	2d58a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   172ac:	466b      	mov	r3, sp
   172ae:	464a      	mov	r2, r9
   172b0:	4601      	mov	r1, r0
   172b2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   172b4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   172b8:	f015 f9aa 	bl	2c610 <bt_gatt_foreach_attr>
		if (data.err) {
   172bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   172c0:	2b00      	cmp	r3, #0
   172c2:	d0e8      	beq.n	17296 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   172c4:	9b02      	ldr	r3, [sp, #8]
   172c6:	6998      	ldr	r0, [r3, #24]
   172c8:	f7ff f9fc 	bl	166c4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   172cc:	9802      	ldr	r0, [sp, #8]
   172ce:	f002 fc21 	bl	19b14 <net_buf_unref>
	if (!req) {
   172d2:	4632      	mov	r2, r6
   172d4:	2120      	movs	r1, #32
   172d6:	4620      	mov	r0, r4
   172d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   172dc:	f015 fc60 	bl	2cba0 <send_err_rsp.part.0>
			return 0;
   172e0:	2000      	movs	r0, #0
   172e2:	e7c2      	b.n	1726a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   172e4:	200e      	movs	r0, #14
   172e6:	e7c0      	b.n	1726a <att_read_mult_vl_req+0x26>
   172e8:	0002c935 	.word	0x0002c935

000172ec <att_read_mult_req>:
{
   172ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   172f0:	6846      	ldr	r6, [r0, #4]
{
   172f2:	4604      	mov	r4, r0
   172f4:	460d      	mov	r5, r1
   172f6:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   172f8:	2101      	movs	r1, #1
   172fa:	4630      	mov	r0, r6
   172fc:	f016 f8cc 	bl	2d498 <bt_gatt_change_aware>
   17300:	b950      	cbnz	r0, 17318 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   17302:	2105      	movs	r1, #5
   17304:	f104 0034 	add.w	r0, r4, #52	; 0x34
   17308:	f015 fae0 	bl	2c8cc <atomic_test_and_set_bit>
   1730c:	2800      	cmp	r0, #0
   1730e:	d13b      	bne.n	17388 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17310:	2012      	movs	r0, #18
}
   17312:	b005      	add	sp, #20
   17314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17318:	2210      	movs	r2, #16
   1731a:	2100      	movs	r1, #0
   1731c:	4668      	mov	r0, sp
   1731e:	f019 fab0 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17322:	2200      	movs	r2, #0
   17324:	210f      	movs	r1, #15
   17326:	4630      	mov	r0, r6
   17328:	f7ff fed0 	bl	170cc <bt_att_create_pdu>
   1732c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1732e:	b368      	cbz	r0, 1738c <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17330:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17334:	f8df 9058 	ldr.w	r9, [pc, #88]	; 17390 <att_read_mult_req+0xa4>
	data.chan = chan;
   17338:	9400      	str	r4, [sp, #0]
   1733a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1733e:	8a2b      	ldrh	r3, [r5, #16]
   17340:	2b01      	cmp	r3, #1
   17342:	d804      	bhi.n	1734e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17344:	4620      	mov	r0, r4
   17346:	9902      	ldr	r1, [sp, #8]
   17348:	f015 fa01 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   1734c:	e01c      	b.n	17388 <att_read_mult_req+0x9c>
   1734e:	4638      	mov	r0, r7
   17350:	f016 f91b 	bl	2d58a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17354:	466b      	mov	r3, sp
   17356:	464a      	mov	r2, r9
   17358:	4601      	mov	r1, r0
   1735a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1735c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17360:	f015 f956 	bl	2c610 <bt_gatt_foreach_attr>
		if (data.err) {
   17364:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17368:	2b00      	cmp	r3, #0
   1736a:	d0e8      	beq.n	1733e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1736c:	9b02      	ldr	r3, [sp, #8]
   1736e:	6998      	ldr	r0, [r3, #24]
   17370:	f7ff f9a8 	bl	166c4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17374:	9802      	ldr	r0, [sp, #8]
   17376:	f002 fbcd 	bl	19b14 <net_buf_unref>
	if (!req) {
   1737a:	4632      	mov	r2, r6
   1737c:	210e      	movs	r1, #14
   1737e:	4620      	mov	r0, r4
   17380:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17384:	f015 fc0c 	bl	2cba0 <send_err_rsp.part.0>
			return 0;
   17388:	2000      	movs	r0, #0
   1738a:	e7c2      	b.n	17312 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1738c:	200e      	movs	r0, #14
   1738e:	e7c0      	b.n	17312 <att_read_mult_req+0x26>
   17390:	0002c8ef 	.word	0x0002c8ef

00017394 <att_read_rsp>:
{
   17394:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17398:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1739c:	4604      	mov	r4, r0
   1739e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   173a0:	4640      	mov	r0, r8
   173a2:	2101      	movs	r1, #1
{
   173a4:	4617      	mov	r7, r2
   173a6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   173a8:	f016 f876 	bl	2d498 <bt_gatt_change_aware>
   173ac:	b948      	cbnz	r0, 173c2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   173ae:	2105      	movs	r1, #5
   173b0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   173b4:	f015 fa8a 	bl	2c8cc <atomic_test_and_set_bit>
   173b8:	bb78      	cbnz	r0, 1741a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   173ba:	2012      	movs	r0, #18
}
   173bc:	b004      	add	sp, #16
   173be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   173c2:	b38d      	cbz	r5, 17428 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   173c4:	2210      	movs	r2, #16
   173c6:	2100      	movs	r1, #0
   173c8:	4668      	mov	r0, sp
   173ca:	f019 fa5a 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   173ce:	2200      	movs	r2, #0
   173d0:	4639      	mov	r1, r7
   173d2:	4640      	mov	r0, r8
   173d4:	f7ff fe7a 	bl	170cc <bt_att_create_pdu>
   173d8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   173da:	b338      	cbz	r0, 1742c <att_read_rsp+0x98>
	data.offset = offset;
   173dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   173e0:	4629      	mov	r1, r5
	data.offset = offset;
   173e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   173e6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   173e8:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   173ea:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   173ee:	4a10      	ldr	r2, [pc, #64]	; (17430 <att_read_rsp+0x9c>)
   173f0:	466b      	mov	r3, sp
	data.chan = chan;
   173f2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   173f4:	f015 f90c 	bl	2c610 <bt_gatt_foreach_attr>
	if (data.err) {
   173f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   173fc:	b17b      	cbz	r3, 1741e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   173fe:	9b02      	ldr	r3, [sp, #8]
   17400:	6998      	ldr	r0, [r3, #24]
   17402:	f7ff f95f 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17406:	9802      	ldr	r0, [sp, #8]
   17408:	f002 fb84 	bl	19b14 <net_buf_unref>
	if (!req) {
   1740c:	462a      	mov	r2, r5
   1740e:	4631      	mov	r1, r6
   17410:	4620      	mov	r0, r4
   17412:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17416:	f015 fbc3 	bl	2cba0 <send_err_rsp.part.0>
			return 0;
   1741a:	2000      	movs	r0, #0
   1741c:	e7ce      	b.n	173bc <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1741e:	4620      	mov	r0, r4
   17420:	9902      	ldr	r1, [sp, #8]
   17422:	f015 f994 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   17426:	e7f8      	b.n	1741a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   17428:	2001      	movs	r0, #1
   1742a:	e7c7      	b.n	173bc <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1742c:	200e      	movs	r0, #14
   1742e:	e7c5      	b.n	173bc <att_read_rsp+0x28>
   17430:	0002c8ef 	.word	0x0002c8ef

00017434 <att_read_type_req>:
{
   17434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17438:	8a0d      	ldrh	r5, [r1, #16]
{
   1743a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1743c:	3d04      	subs	r5, #4
   1743e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   17440:	2d02      	cmp	r5, #2
{
   17442:	4608      	mov	r0, r1
   17444:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   17446:	d001      	beq.n	1744c <att_read_type_req+0x18>
   17448:	2d10      	cmp	r5, #16
   1744a:	d150      	bne.n	174ee <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1744c:	2104      	movs	r1, #4
   1744e:	300c      	adds	r0, #12
   17450:	f002 fcc8 	bl	19de4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17454:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17458:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1745a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1745c:	1d01      	adds	r1, r0, #4
   1745e:	462a      	mov	r2, r5
   17460:	4640      	mov	r0, r8
   17462:	f014 fdaf 	bl	2bfc4 <bt_uuid_create>
   17466:	b188      	cbz	r0, 1748c <att_read_type_req+0x58>
	if (!start || !end) {
   17468:	b19e      	cbz	r6, 17492 <att_read_type_req+0x5e>
   1746a:	b18f      	cbz	r7, 17490 <att_read_type_req+0x5c>
	if (start > end) {
   1746c:	42b7      	cmp	r7, r6
   1746e:	d310      	bcc.n	17492 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   17470:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   17472:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17474:	2100      	movs	r1, #0
   17476:	eb0d 0002 	add.w	r0, sp, r2
   1747a:	f019 fa02 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1747e:	2201      	movs	r2, #1
   17480:	2109      	movs	r1, #9
   17482:	4628      	mov	r0, r5
   17484:	f7ff fe22 	bl	170cc <bt_att_create_pdu>
   17488:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1748a:	b960      	cbnz	r0, 174a6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1748c:	200e      	movs	r0, #14
   1748e:	e007      	b.n	174a0 <att_read_type_req+0x6c>
			*err = 0U;
   17490:	463e      	mov	r6, r7
	if (!req) {
   17492:	2301      	movs	r3, #1
   17494:	4632      	mov	r2, r6
   17496:	2108      	movs	r1, #8
   17498:	4620      	mov	r0, r4
   1749a:	f015 fb81 	bl	2cba0 <send_err_rsp.part.0>
		return 0;
   1749e:	2000      	movs	r0, #0
}
   174a0:	b00c      	add	sp, #48	; 0x30
   174a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   174a6:	2101      	movs	r1, #1
   174a8:	300c      	adds	r0, #12
	data.uuid = uuid;
   174aa:	e9cd 4806 	strd	r4, r8, [sp, #24]
   174ae:	f002 fcb7 	bl	19e20 <net_buf_simple_add>
	data.rsp->len = 0U;
   174b2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   174b4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   174b6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   174b8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   174ba:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   174bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   174c0:	4630      	mov	r0, r6
   174c2:	ab06      	add	r3, sp, #24
   174c4:	4a0b      	ldr	r2, [pc, #44]	; (174f4 <att_read_type_req+0xc0>)
   174c6:	f015 f8a3 	bl	2c610 <bt_gatt_foreach_attr>
	if (data.err) {
   174ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   174ce:	b14b      	cbz	r3, 174e4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   174d0:	9b08      	ldr	r3, [sp, #32]
   174d2:	6998      	ldr	r0, [r3, #24]
   174d4:	f7ff f8f6 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   174d8:	9808      	ldr	r0, [sp, #32]
   174da:	f002 fb1b 	bl	19b14 <net_buf_unref>
	if (!req) {
   174de:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   174e2:	e7d7      	b.n	17494 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   174e4:	4620      	mov	r0, r4
   174e6:	9908      	ldr	r1, [sp, #32]
   174e8:	f015 f931 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   174ec:	e7d7      	b.n	1749e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   174ee:	2004      	movs	r0, #4
   174f0:	e7d6      	b.n	174a0 <att_read_type_req+0x6c>
   174f2:	bf00      	nop
   174f4:	00016bc5 	.word	0x00016bc5

000174f8 <att_find_type_req>:
{
   174f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174fc:	460f      	mov	r7, r1
   174fe:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   17500:	2106      	movs	r1, #6
   17502:	b086      	sub	sp, #24
   17504:	f107 000c 	add.w	r0, r7, #12
   17508:	f002 fc6c 	bl	19de4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1750c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1750e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   17512:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   17514:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   17518:	b1c5      	cbz	r5, 1754c <att_find_type_req+0x54>
   1751a:	2300      	movs	r3, #0
   1751c:	f1b8 0f00 	cmp.w	r8, #0
   17520:	d013      	beq.n	1754a <att_find_type_req+0x52>
	if (start > end) {
   17522:	4545      	cmp	r5, r8
   17524:	d812      	bhi.n	1754c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17526:	f88d 3000 	strb.w	r3, [sp]
   1752a:	f88d 3004 	strb.w	r3, [sp, #4]
   1752e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17532:	4668      	mov	r0, sp
   17534:	a901      	add	r1, sp, #4
   17536:	f8ad 2002 	strh.w	r2, [sp, #2]
   1753a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1753e:	f014 fd13 	bl	2bf68 <bt_uuid_cmp>
   17542:	4606      	mov	r6, r0
   17544:	b160      	cbz	r0, 17560 <att_find_type_req+0x68>
	if (!req) {
   17546:	230a      	movs	r3, #10
   17548:	e001      	b.n	1754e <att_find_type_req+0x56>
			*err = 0U;
   1754a:	4645      	mov	r5, r8
	if (!req) {
   1754c:	2301      	movs	r3, #1
   1754e:	462a      	mov	r2, r5
   17550:	2106      	movs	r1, #6
   17552:	4620      	mov	r0, r4
   17554:	f015 fb24 	bl	2cba0 <send_err_rsp.part.0>
		return 0;
   17558:	2000      	movs	r0, #0
}
   1755a:	b006      	add	sp, #24
   1755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   17560:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17564:	4601      	mov	r1, r0
   17566:	2214      	movs	r2, #20
   17568:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1756a:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1756c:	f019 f989 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17570:	4632      	mov	r2, r6
   17572:	2107      	movs	r1, #7
   17574:	4650      	mov	r0, sl
   17576:	f7ff fda9 	bl	170cc <bt_att_create_pdu>
   1757a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1757c:	b1f8      	cbz	r0, 175be <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1757e:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17580:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17582:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17586:	4628      	mov	r0, r5
   17588:	ab01      	add	r3, sp, #4
   1758a:	4a0e      	ldr	r2, [pc, #56]	; (175c4 <att_find_type_req+0xcc>)
	data.value = value;
   1758c:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   17590:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   17592:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17596:	f015 f83b 	bl	2c610 <bt_gatt_foreach_attr>
	if (data.err) {
   1759a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1759e:	b14b      	cbz	r3, 175b4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   175a0:	9b02      	ldr	r3, [sp, #8]
   175a2:	6998      	ldr	r0, [r3, #24]
   175a4:	f7ff f88e 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   175a8:	9802      	ldr	r0, [sp, #8]
   175aa:	f002 fab3 	bl	19b14 <net_buf_unref>
	if (!req) {
   175ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   175b2:	e7cc      	b.n	1754e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   175b4:	4620      	mov	r0, r4
   175b6:	9902      	ldr	r1, [sp, #8]
   175b8:	f015 f8c9 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   175bc:	e7cc      	b.n	17558 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   175be:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   175c0:	e7cb      	b.n	1755a <att_find_type_req+0x62>
   175c2:	bf00      	nop
   175c4:	00016705 	.word	0x00016705

000175c8 <att_find_info_req>:
{
   175c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   175ca:	68cb      	ldr	r3, [r1, #12]
{
   175cc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   175ce:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   175d0:	885e      	ldrh	r6, [r3, #2]
{
   175d2:	b085      	sub	sp, #20
	if (!start || !end) {
   175d4:	b195      	cbz	r5, 175fc <att_find_info_req+0x34>
   175d6:	b186      	cbz	r6, 175fa <att_find_info_req+0x32>
	if (start > end) {
   175d8:	42b5      	cmp	r5, r6
   175da:	d80f      	bhi.n	175fc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   175dc:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   175de:	2210      	movs	r2, #16
   175e0:	2100      	movs	r1, #0
   175e2:	4668      	mov	r0, sp
   175e4:	f019 f94d 	bl	30882 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   175e8:	2200      	movs	r2, #0
   175ea:	2105      	movs	r1, #5
   175ec:	4638      	mov	r0, r7
   175ee:	f7ff fd6d 	bl	170cc <bt_att_create_pdu>
   175f2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   175f4:	b958      	cbnz	r0, 1760e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   175f6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   175f8:	e007      	b.n	1760a <att_find_info_req+0x42>
			*err = 0U;
   175fa:	4635      	mov	r5, r6
	if (!req) {
   175fc:	2301      	movs	r3, #1
   175fe:	462a      	mov	r2, r5
   17600:	2104      	movs	r1, #4
   17602:	4620      	mov	r0, r4
   17604:	f015 facc 	bl	2cba0 <send_err_rsp.part.0>
		return 0;
   17608:	2000      	movs	r0, #0
}
   1760a:	b005      	add	sp, #20
   1760c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1760e:	466b      	mov	r3, sp
   17610:	4631      	mov	r1, r6
   17612:	4628      	mov	r0, r5
   17614:	4a09      	ldr	r2, [pc, #36]	; (1763c <att_find_info_req+0x74>)
	data.chan = chan;
   17616:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17618:	f014 fffa 	bl	2c610 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1761c:	9b02      	ldr	r3, [sp, #8]
   1761e:	b943      	cbnz	r3, 17632 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17620:	9b01      	ldr	r3, [sp, #4]
   17622:	6998      	ldr	r0, [r3, #24]
   17624:	f7ff f84e 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17628:	9801      	ldr	r0, [sp, #4]
   1762a:	f002 fa73 	bl	19b14 <net_buf_unref>
	if (!req) {
   1762e:	230a      	movs	r3, #10
   17630:	e7e5      	b.n	175fe <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   17632:	4620      	mov	r0, r4
   17634:	9901      	ldr	r1, [sp, #4]
   17636:	f015 f88a 	bl	2c74e <bt_att_chan_send_rsp>
	return 0;
   1763a:	e7e5      	b.n	17608 <att_find_info_req+0x40>
   1763c:	0002c647 	.word	0x0002c647

00017640 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   17640:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   17642:	4c0b      	ldr	r4, [pc, #44]	; (17670 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   17644:	4d0b      	ldr	r5, [pc, #44]	; (17674 <bt_att_init+0x34>)
   17646:	4620      	mov	r0, r4
   17648:	f018 fef8 	bl	3043c <z_impl_k_queue_init>
   1764c:	4629      	mov	r1, r5
   1764e:	4620      	mov	r0, r4
   17650:	f018 ff01 	bl	30456 <k_queue_append>
   17654:	4620      	mov	r0, r4
   17656:	f105 0114 	add.w	r1, r5, #20
   1765a:	f018 fefc 	bl	30456 <k_queue_append>
   1765e:	4620      	mov	r0, r4
   17660:	f105 0128 	add.w	r1, r5, #40	; 0x28
   17664:	f018 fef7 	bl	30456 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   17668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1766c:	f000 bc5e 	b.w	17f2c <bt_gatt_init>
   17670:	2000cf34 	.word	0x2000cf34
   17674:	2000e3a4 	.word	0x2000e3a4

00017678 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   17678:	2300      	movs	r3, #0
{
   1767a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1767c:	4605      	mov	r5, r0
   1767e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   17680:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   17682:	f00f fc0b 	bl	26e9c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   17686:	4b0c      	ldr	r3, [pc, #48]	; (176b8 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17688:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   1768a:	681b      	ldr	r3, [r3, #0]
   1768c:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1768e:	bf04      	itt	eq
   17690:	2500      	moveq	r5, #0
   17692:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17694:	462a      	mov	r2, r5
   17696:	4623      	mov	r3, r4
   17698:	4808      	ldr	r0, [pc, #32]	; (176bc <bt_att_req_alloc+0x44>)
   1769a:	f00d f8d7 	bl	2484c <k_mem_slab_alloc>
   1769e:	4601      	mov	r1, r0
   176a0:	b940      	cbnz	r0, 176b4 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   176a2:	9b01      	ldr	r3, [sp, #4]
   176a4:	2210      	movs	r2, #16
   176a6:	4618      	mov	r0, r3
   176a8:	f019 f8eb 	bl	30882 <memset>
   176ac:	4603      	mov	r3, r0

	return req;
}
   176ae:	4618      	mov	r0, r3
   176b0:	b003      	add	sp, #12
   176b2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   176b4:	2300      	movs	r3, #0
   176b6:	e7fa      	b.n	176ae <bt_att_req_alloc+0x36>
   176b8:	2000e3e0 	.word	0x2000e3e0
   176bc:	2000cda0 	.word	0x2000cda0

000176c0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   176c0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   176c2:	6883      	ldr	r3, [r0, #8]
{
   176c4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   176c6:	b14b      	cbz	r3, 176dc <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   176c8:	6998      	ldr	r0, [r3, #24]
   176ca:	f7fe fffb 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   176ce:	9b01      	ldr	r3, [sp, #4]
   176d0:	6898      	ldr	r0, [r3, #8]
   176d2:	f002 fa1f 	bl	19b14 <net_buf_unref>
		req->buf = NULL;
   176d6:	2200      	movs	r2, #0
   176d8:	9b01      	ldr	r3, [sp, #4]
   176da:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   176dc:	4803      	ldr	r0, [pc, #12]	; (176ec <bt_att_req_free+0x2c>)
   176de:	a901      	add	r1, sp, #4
   176e0:	f00d f91e 	bl	24920 <k_mem_slab_free>
}
   176e4:	b003      	add	sp, #12
   176e6:	f85d fb04 	ldr.w	pc, [sp], #4
   176ea:	bf00      	nop
   176ec:	2000cda0 	.word	0x2000cda0

000176f0 <att_handle_rsp>:
{
   176f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176f4:	4604      	mov	r4, r0
   176f6:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   176f8:	3058      	adds	r0, #88	; 0x58
{
   176fa:	af02      	add	r7, sp, #8
   176fc:	460e      	mov	r6, r1
   176fe:	4690      	mov	r8, r2
   17700:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   17702:	f00e fa5d 	bl	25bc0 <k_work_cancel_delayable>
	if (!chan->req) {
   17706:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   17708:	b9b8      	cbnz	r0, 1773a <att_handle_rsp+0x4a>
		LOG_WRN("No pending ATT request");
   1770a:	466d      	mov	r5, sp
   1770c:	b088      	sub	sp, #32
   1770e:	aa02      	add	r2, sp, #8
   17710:	4b1b      	ldr	r3, [pc, #108]	; (17780 <att_handle_rsp+0x90>)
   17712:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17716:	6153      	str	r3, [r2, #20]
   17718:	4b1a      	ldr	r3, [pc, #104]	; (17784 <att_handle_rsp+0x94>)
   1771a:	481b      	ldr	r0, [pc, #108]	; (17788 <att_handle_rsp+0x98>)
   1771c:	6193      	str	r3, [r2, #24]
   1771e:	2303      	movs	r3, #3
   17720:	f842 3f10 	str.w	r3, [r2, #16]!
   17724:	f014 ffdf 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
   17728:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   1772a:	6820      	ldr	r0, [r4, #0]
   1772c:	f015 f963 	bl	2c9f6 <att_req_send_process>
}
   17730:	2000      	movs	r0, #0
   17732:	3704      	adds	r7, #4
   17734:	46bd      	mov	sp, r7
   17736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1773a:	4b14      	ldr	r3, [pc, #80]	; (1778c <att_handle_rsp+0x9c>)
   1773c:	f04f 0900 	mov.w	r9, #0
   17740:	4298      	cmp	r0, r3
   17742:	d102      	bne.n	1774a <att_handle_rsp+0x5a>
		chan->req = NULL;
   17744:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
   17748:	e7ef      	b.n	1772a <att_handle_rsp+0x3a>
	func = chan->req->func;
   1774a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   1774e:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   17752:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   17754:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	bt_att_req_free(chan->req);
   17758:	f7ff ffb2 	bl	176c0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1775c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1775e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   17762:	f015 f948 	bl	2c9f6 <att_req_send_process>
	if (func) {
   17766:	f1ba 0f00 	cmp.w	sl, #0
   1776a:	d0e1      	beq.n	17730 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   1776c:	6820      	ldr	r0, [r4, #0]
   1776e:	f8cd b000 	str.w	fp, [sp]
   17772:	4643      	mov	r3, r8
   17774:	4632      	mov	r2, r6
   17776:	4629      	mov	r1, r5
   17778:	6800      	ldr	r0, [r0, #0]
   1777a:	47d0      	blx	sl
   1777c:	e7d8      	b.n	17730 <att_handle_rsp+0x40>
   1777e:	bf00      	nop
   17780:	00036fc9 	.word	0x00036fc9
   17784:	0003700d 	.word	0x0003700d
   17788:	00031b84 	.word	0x00031b84
   1778c:	2000e3e4 	.word	0x2000e3e4

00017790 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   17790:	6b83      	ldr	r3, [r0, #56]	; 0x38
	rsp = (void *)buf->data;
   17792:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   17794:	b153      	cbz	r3, 177ac <att_error_rsp+0x1c>
   17796:	4906      	ldr	r1, [pc, #24]	; (177b0 <att_error_rsp+0x20>)
   17798:	428b      	cmp	r3, r1
   1779a:	d007      	beq.n	177ac <att_error_rsp+0x1c>
   1779c:	78d3      	ldrb	r3, [r2, #3]
		err = BT_ATT_ERR_UNLIKELY;
   1779e:	2b00      	cmp	r3, #0
   177a0:	bf08      	it	eq
   177a2:	230e      	moveq	r3, #14
	return att_handle_rsp(chan, NULL, 0, err);
   177a4:	2200      	movs	r2, #0
   177a6:	4611      	mov	r1, r2
   177a8:	f7ff bfa2 	b.w	176f0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   177ac:	230e      	movs	r3, #14
   177ae:	e7f9      	b.n	177a4 <att_error_rsp+0x14>
   177b0:	2000e3e4 	.word	0x2000e3e4

000177b4 <bt_att_disconnected>:
{
   177b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   177b8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   177bc:	4604      	mov	r4, r0
	if (!att_chan->att) {
   177be:	2e00      	cmp	r6, #0
   177c0:	d05a      	beq.n	17878 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   177c2:	f100 0184 	add.w	r1, r0, #132	; 0x84
   177c6:	f106 0028 	add.w	r0, r6, #40	; 0x28
   177ca:	f015 f859 	bl	2c880 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   177ce:	1f27      	subs	r7, r4, #4
   177d0:	f104 0838 	add.w	r8, r4, #56	; 0x38
   177d4:	2200      	movs	r2, #0
   177d6:	2300      	movs	r3, #0
   177d8:	4640      	mov	r0, r8
   177da:	f015 fec6 	bl	2d56a <net_buf_get>
   177de:	4605      	mov	r5, r0
   177e0:	bb48      	cbnz	r0, 17836 <bt_att_disconnected+0x82>
	if (chan->req) {
   177e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   177e4:	b12b      	cbz	r3, 177f2 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   177e6:	4602      	mov	r2, r0
   177e8:	4601      	mov	r1, r0
   177ea:	230e      	movs	r3, #14
   177ec:	4638      	mov	r0, r7
   177ee:	f7ff ff7f 	bl	176f0 <att_handle_rsp>
	chan->att = NULL;
   177f2:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   177f4:	2102      	movs	r1, #2
	chan->att = NULL;
   177f6:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   177fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   177fe:	f015 f858 	bl	2c8b2 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   17802:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   17804:	2b00      	cmp	r3, #0
   17806:	d137      	bne.n	17878 <bt_att_disconnected+0xc4>
	att_reset(att);
   17808:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1780a:	9803      	ldr	r0, [sp, #12]
   1780c:	2200      	movs	r2, #0
   1780e:	2300      	movs	r3, #0
   17810:	300c      	adds	r0, #12
   17812:	f015 feaa 	bl	2d56a <net_buf_get>
   17816:	4605      	mov	r5, r0
   17818:	b9a0      	cbnz	r0, 17844 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1781a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1781c:	6845      	ldr	r5, [r0, #4]
   1781e:	b9c5      	cbnz	r5, 17852 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   17820:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   17822:	a903      	add	r1, sp, #12
   17824:	4816      	ldr	r0, [pc, #88]	; (17880 <bt_att_disconnected+0xcc>)
   17826:	f00d f87b 	bl	24920 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1782a:	6820      	ldr	r0, [r4, #0]
}
   1782c:	b004      	add	sp, #16
   1782e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   17832:	f001 bf93 	b.w	1975c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17836:	69a8      	ldr	r0, [r5, #24]
   17838:	f7fe ff44 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(buf);
   1783c:	4628      	mov	r0, r5
   1783e:	f002 f969 	bl	19b14 <net_buf_unref>
   17842:	e7c7      	b.n	177d4 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17844:	69a8      	ldr	r0, [r5, #24]
   17846:	f7fe ff3d 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(buf);
   1784a:	4628      	mov	r0, r5
   1784c:	f002 f962 	bl	19b14 <net_buf_unref>
   17850:	e7db      	b.n	1780a <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17852:	6882      	ldr	r2, [r0, #8]
	return node->next;
   17854:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17856:	4295      	cmp	r5, r2
	list->head = node;
   17858:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1785a:	bf08      	it	eq
   1785c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1785e:	686e      	ldr	r6, [r5, #4]
   17860:	b136      	cbz	r6, 17870 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17862:	68eb      	ldr	r3, [r5, #12]
   17864:	210e      	movs	r1, #14
   17866:	9300      	str	r3, [sp, #0]
   17868:	2300      	movs	r3, #0
   1786a:	6800      	ldr	r0, [r0, #0]
   1786c:	461a      	mov	r2, r3
   1786e:	47b0      	blx	r6
		bt_att_req_free(req);
   17870:	4628      	mov	r0, r5
   17872:	f7ff ff25 	bl	176c0 <bt_att_req_free>
   17876:	e7d0      	b.n	1781a <bt_att_disconnected+0x66>
}
   17878:	b004      	add	sp, #16
   1787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1787e:	bf00      	nop
   17880:	2000cd60 	.word	0x2000cd60

00017884 <att_timeout>:
{
   17884:	b5b0      	push	{r4, r5, r7, lr}
   17886:	af00      	add	r7, sp, #0
	LOG_ERR("ATT Timeout");
   17888:	466d      	mov	r5, sp
   1788a:	b088      	sub	sp, #32
{
   1788c:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1788e:	466a      	mov	r2, sp
   17890:	4b09      	ldr	r3, [pc, #36]	; (178b8 <att_timeout+0x34>)
   17892:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17896:	6153      	str	r3, [r2, #20]
   17898:	4b08      	ldr	r3, [pc, #32]	; (178bc <att_timeout+0x38>)
   1789a:	4809      	ldr	r0, [pc, #36]	; (178c0 <att_timeout+0x3c>)
   1789c:	6193      	str	r3, [r2, #24]
   1789e:	2303      	movs	r3, #3
   178a0:	f842 3f10 	str.w	r3, [r2, #16]!
   178a4:	f014 ff1f 	bl	2c6e6 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   178a8:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
   178ac:	46ad      	mov	sp, r5
   178ae:	f7ff ff81 	bl	177b4 <bt_att_disconnected>
}
   178b2:	46bd      	mov	sp, r7
   178b4:	bdb0      	pop	{r4, r5, r7, pc}
   178b6:	bf00      	nop
   178b8:	00036fe4 	.word	0x00036fe4
   178bc:	00036ff4 	.word	0x00036ff4
   178c0:	00031b84 	.word	0x00031b84

000178c4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   178c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178c6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   178c8:	b958      	cbnz	r0, 178e2 <bt_att_send+0x1e>
   178ca:	4929      	ldr	r1, [pc, #164]	; (17970 <bt_att_send+0xac>)
   178cc:	f640 63ba 	movw	r3, #3770	; 0xeba
   178d0:	4a28      	ldr	r2, [pc, #160]	; (17974 <bt_att_send+0xb0>)
   178d2:	4829      	ldr	r0, [pc, #164]	; (17978 <bt_att_send+0xb4>)
   178d4:	f013 fa70 	bl	2adb8 <assert_print>
   178d8:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   178dc:	4825      	ldr	r0, [pc, #148]	; (17974 <bt_att_send+0xb0>)
   178de:	f013 fa64 	bl	2adaa <assert_post_action>
   178e2:	b949      	cbnz	r1, 178f8 <bt_att_send+0x34>
   178e4:	4925      	ldr	r1, [pc, #148]	; (1797c <bt_att_send+0xb8>)
   178e6:	f640 63bb 	movw	r3, #3771	; 0xebb
   178ea:	4a22      	ldr	r2, [pc, #136]	; (17974 <bt_att_send+0xb0>)
   178ec:	4822      	ldr	r0, [pc, #136]	; (17978 <bt_att_send+0xb4>)
   178ee:	f013 fa63 	bl	2adb8 <assert_print>
   178f2:	f640 61bb 	movw	r1, #3771	; 0xebb
   178f6:	e7f1      	b.n	178dc <bt_att_send+0x18>

	att = att_get(conn);
   178f8:	f7ff f8ae 	bl	16a58 <att_get>
	if (!att) {
   178fc:	4605      	mov	r5, r0
   178fe:	b940      	cbnz	r0, 17912 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17900:	69a0      	ldr	r0, [r4, #24]
   17902:	f7fe fedf 	bl	166c4 <tx_meta_data_free>
		net_buf_unref(buf);
   17906:	4620      	mov	r0, r4
   17908:	f002 f904 	bl	19b14 <net_buf_unref>
		return -ENOTCONN;
   1790c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   17910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   17912:	f100 060c 	add.w	r6, r0, #12
   17916:	4621      	mov	r1, r4
   17918:	4630      	mov	r0, r6
   1791a:	f002 f8d5 	bl	19ac8 <net_buf_put>
	return list->head;
   1791e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17920:	b14d      	cbz	r5, 17936 <bt_att_send+0x72>
	return node->next;
   17922:	f855 4988 	ldr.w	r4, [r5], #-136
   17926:	b104      	cbz	r4, 1792a <bt_att_send+0x66>
   17928:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1792a:	4631      	mov	r1, r6
   1792c:	4628      	mov	r0, r5
   1792e:	f014 fef5 	bl	2c71c <process_queue>
		if (!err) {
   17932:	4603      	mov	r3, r0
   17934:	b980      	cbnz	r0, 17958 <bt_att_send+0x94>
	return 0;
   17936:	2000      	movs	r0, #0
   17938:	e7ea      	b.n	17910 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1793a:	2103      	movs	r1, #3
   1793c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   17940:	f014 fde3 	bl	2c50a <atomic_test_bit>
   17944:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   17946:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1794a:	f014 fdde 	bl	2c50a <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1794e:	4287      	cmp	r7, r0
   17950:	f06f 0301 	mvn.w	r3, #1
   17954:	d107      	bne.n	17966 <bt_att_send+0xa2>
   17956:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17958:	2c00      	cmp	r4, #0
   1795a:	d0ec      	beq.n	17936 <bt_att_send+0x72>
   1795c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   17960:	b922      	cbnz	r2, 1796c <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   17962:	3302      	adds	r3, #2
   17964:	d0e9      	beq.n	1793a <bt_att_send+0x76>
{
   17966:	4625      	mov	r5, r4
   17968:	4614      	mov	r4, r2
   1796a:	e7de      	b.n	1792a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1796c:	3a88      	subs	r2, #136	; 0x88
   1796e:	e7f8      	b.n	17962 <bt_att_send+0x9e>
   17970:	00035d7c 	.word	0x00035d7c
   17974:	00036d46 	.word	0x00036d46
   17978:	00033bc2 	.word	0x00033bc2
   1797c:	000376ce 	.word	0x000376ce

00017980 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   17980:	b510      	push	{r4, lr}
   17982:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   17984:	b958      	cbnz	r0, 1799e <bt_att_req_send+0x1e>
   17986:	4915      	ldr	r1, [pc, #84]	; (179dc <bt_att_req_send+0x5c>)
   17988:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   1798c:	4a14      	ldr	r2, [pc, #80]	; (179e0 <bt_att_req_send+0x60>)
   1798e:	4815      	ldr	r0, [pc, #84]	; (179e4 <bt_att_req_send+0x64>)
   17990:	f013 fa12 	bl	2adb8 <assert_print>
   17994:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   17998:	4811      	ldr	r0, [pc, #68]	; (179e0 <bt_att_req_send+0x60>)
   1799a:	f013 fa06 	bl	2adaa <assert_post_action>
   1799e:	b949      	cbnz	r1, 179b4 <bt_att_req_send+0x34>
   179a0:	4911      	ldr	r1, [pc, #68]	; (179e8 <bt_att_req_send+0x68>)
   179a2:	f640 63d1 	movw	r3, #3793	; 0xed1
   179a6:	4a0e      	ldr	r2, [pc, #56]	; (179e0 <bt_att_req_send+0x60>)
   179a8:	480e      	ldr	r0, [pc, #56]	; (179e4 <bt_att_req_send+0x64>)
   179aa:	f013 fa05 	bl	2adb8 <assert_print>
   179ae:	f640 61d1 	movw	r1, #3793	; 0xed1
   179b2:	e7f1      	b.n	17998 <bt_att_req_send+0x18>

	att = att_get(conn);
   179b4:	f7ff f850 	bl	16a58 <att_get>
	if (!att) {
   179b8:	b160      	cbz	r0, 179d4 <bt_att_req_send+0x54>
	parent->next = child;
   179ba:	2300      	movs	r3, #0
   179bc:	6023      	str	r3, [r4, #0]
	return list->tail;
   179be:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   179c0:	b92b      	cbnz	r3, 179ce <bt_att_req_send+0x4e>
	list->head = node;
   179c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   179c6:	f015 f816 	bl	2c9f6 <att_req_send_process>

	return 0;
   179ca:	2000      	movs	r0, #0
}
   179cc:	bd10      	pop	{r4, pc}
	parent->next = child;
   179ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   179d0:	6084      	str	r4, [r0, #8]
}
   179d2:	e7f8      	b.n	179c6 <bt_att_req_send+0x46>
		return -ENOTCONN;
   179d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   179d8:	e7f8      	b.n	179cc <bt_att_req_send+0x4c>
   179da:	bf00      	nop
   179dc:	00035d7c 	.word	0x00035d7c
   179e0:	00036d46 	.word	0x00036d46
   179e4:	00033bc2 	.word	0x00033bc2
   179e8:	00036c41 	.word	0x00036c41

000179ec <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   179ec:	b510      	push	{r4, lr}
   179ee:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   179f0:	b318      	cbz	r0, 17a3a <bt_att_req_cancel+0x4e>
   179f2:	b311      	cbz	r1, 17a3a <bt_att_req_cancel+0x4e>
		return;
	}

	att = att_get(conn);
   179f4:	f7ff f830 	bl	16a58 <att_get>
	if (!att) {
   179f8:	b1f8      	cbz	r0, 17a3a <bt_att_req_cancel+0x4e>
	return list->head;
   179fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179fc:	b1bb      	cbz	r3, 17a2e <bt_att_req_cancel+0x42>
	return node->next;
   179fe:	f853 2988 	ldr.w	r2, [r3], #-136
   17a02:	b102      	cbz	r2, 17a06 <bt_att_req_cancel+0x1a>
   17a04:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   17a06:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17a08:	428c      	cmp	r4, r1
   17a0a:	d009      	beq.n	17a20 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a0c:	b17a      	cbz	r2, 17a2e <bt_att_req_cancel+0x42>
   17a0e:	4613      	mov	r3, r2
   17a10:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   17a14:	2a00      	cmp	r2, #0
   17a16:	d0f6      	beq.n	17a06 <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   17a18:	6b99      	ldr	r1, [r3, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17a1a:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   17a1c:	428c      	cmp	r4, r1
   17a1e:	d1f6      	bne.n	17a0e <bt_att_req_cancel+0x22>
	bt_att_req_free(req);
   17a20:	4620      	mov	r0, r4
	chan->req = &cancel;
   17a22:	4a06      	ldr	r2, [pc, #24]	; (17a3c <bt_att_req_cancel+0x50>)
   17a24:	639a      	str	r2, [r3, #56]	; 0x38

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   17a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   17a2a:	f7ff be49 	b.w	176c0 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   17a2e:	3004      	adds	r0, #4
   17a30:	4621      	mov	r1, r4
   17a32:	f014 ff25 	bl	2c880 <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   17a36:	4620      	mov	r0, r4
   17a38:	e7f5      	b.n	17a26 <bt_att_req_cancel+0x3a>
}
   17a3a:	bd10      	pop	{r4, pc}
   17a3c:	2000e3e4 	.word	0x2000e3e4

00017a40 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   17a40:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   17a42:	b930      	cbnz	r0, 17a52 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17a44:	4907      	ldr	r1, [pc, #28]	; (17a64 <find_cf_cfg+0x24>)
   17a46:	4808      	ldr	r0, [pc, #32]	; (17a68 <find_cf_cfg+0x28>)
   17a48:	f015 fa2a 	bl	2cea0 <bt_addr_le_eq>
   17a4c:	b138      	cbz	r0, 17a5e <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17a4e:	4807      	ldr	r0, [pc, #28]	; (17a6c <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   17a50:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17a52:	4a05      	ldr	r2, [pc, #20]	; (17a68 <find_cf_cfg+0x28>)
   17a54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   17a58:	f014 fc58 	bl	2c30c <bt_conn_is_peer_addr_le>
   17a5c:	e7f6      	b.n	17a4c <find_cf_cfg+0xc>
	return NULL;
   17a5e:	2000      	movs	r0, #0
   17a60:	e7f6      	b.n	17a50 <find_cf_cfg+0x10>
   17a62:	bf00      	nop
   17a64:	000358c4 	.word	0x000358c4
   17a68:	2000e40d 	.word	0x2000e40d
   17a6c:	2000e40c 	.word	0x2000e40c

00017a70 <find_sc_cfg>:
{
   17a70:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   17a72:	4c07      	ldr	r4, [pc, #28]	; (17a90 <find_sc_cfg+0x20>)
   17a74:	7823      	ldrb	r3, [r4, #0]
   17a76:	4283      	cmp	r3, r0
   17a78:	d107      	bne.n	17a8a <find_sc_cfg+0x1a>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   17a7a:	1c60      	adds	r0, r4, #1
   17a7c:	f015 fa10 	bl	2cea0 <bt_addr_le_eq>
			return &sc_cfg[i];
   17a80:	2800      	cmp	r0, #0
   17a82:	bf14      	ite	ne
   17a84:	4620      	movne	r0, r4
   17a86:	2000      	moveq	r0, #0
}
   17a88:	bd10      	pop	{r4, pc}
	return NULL;
   17a8a:	2000      	movs	r0, #0
   17a8c:	e7fc      	b.n	17a88 <find_sc_cfg+0x18>
   17a8e:	bf00      	nop
   17a90:	2000ebcc 	.word	0x2000ebcc

00017a94 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   17a94:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   17a96:	1c4a      	adds	r2, r1, #1
{
   17a98:	460c      	mov	r4, r1
		if (conn) {
   17a9a:	b138      	cbz	r0, 17aac <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   17a9c:	7809      	ldrb	r1, [r1, #0]
   17a9e:	f014 fc35 	bl	2c30c <bt_conn_is_peer_addr_le>
   17aa2:	b108      	cbz	r0, 17aa8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   17aa4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   17aa6:	bd10      	pop	{r4, pc}
	return NULL;
   17aa8:	2000      	movs	r0, #0
   17aaa:	e7fc      	b.n	17aa6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17aac:	4610      	mov	r0, r2
   17aae:	4902      	ldr	r1, [pc, #8]	; (17ab8 <find_ccc_cfg+0x24>)
   17ab0:	f015 f9f6 	bl	2cea0 <bt_addr_le_eq>
   17ab4:	e7f5      	b.n	17aa2 <find_ccc_cfg+0xe>
   17ab6:	bf00      	nop
   17ab8:	000358c4 	.word	0x000358c4

00017abc <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   17abc:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   17abe:	b930      	cbnz	r0, 17ace <gatt_sub_find+0x12>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   17ac0:	4907      	ldr	r1, [pc, #28]	; (17ae0 <gatt_sub_find+0x24>)
   17ac2:	4808      	ldr	r0, [pc, #32]	; (17ae4 <gatt_sub_find+0x28>)
   17ac4:	f015 f9ec 	bl	2cea0 <bt_addr_le_eq>
   17ac8:	b138      	cbz	r0, 17ada <gatt_sub_find+0x1e>
		struct gatt_sub *sub = &subscriptions[i];
   17aca:	4807      	ldr	r0, [pc, #28]	; (17ae8 <gatt_sub_find+0x2c>)
			return sub;
		}
	}

	return NULL;
}
   17acc:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   17ace:	4a05      	ldr	r2, [pc, #20]	; (17ae4 <gatt_sub_find+0x28>)
   17ad0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   17ad4:	f014 fc1a 	bl	2c30c <bt_conn_is_peer_addr_le>
   17ad8:	e7f6      	b.n	17ac8 <gatt_sub_find+0xc>
	return NULL;
   17ada:	2000      	movs	r0, #0
   17adc:	e7f6      	b.n	17acc <gatt_sub_find+0x10>
   17ade:	bf00      	nop
   17ae0:	000358c4 	.word	0x000358c4
   17ae4:	2000e429 	.word	0x2000e429
   17ae8:	2000e428 	.word	0x2000e428

00017aec <gatt_sub_free>:
{
   17aec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   17aee:	6883      	ldr	r3, [r0, #8]
   17af0:	b15b      	cbz	r3, 17b0a <gatt_sub_free+0x1e>
   17af2:	4909      	ldr	r1, [pc, #36]	; (17b18 <gatt_sub_free+0x2c>)
   17af4:	4809      	ldr	r0, [pc, #36]	; (17b1c <gatt_sub_free+0x30>)
   17af6:	f640 5371 	movw	r3, #3441	; 0xd71
   17afa:	4a09      	ldr	r2, [pc, #36]	; (17b20 <gatt_sub_free+0x34>)
   17afc:	f013 f95c 	bl	2adb8 <assert_print>
   17b00:	f640 5171 	movw	r1, #3441	; 0xd71
   17b04:	4806      	ldr	r0, [pc, #24]	; (17b20 <gatt_sub_free+0x34>)
   17b06:	f013 f950 	bl	2adaa <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   17b0a:	4906      	ldr	r1, [pc, #24]	; (17b24 <gatt_sub_free+0x38>)
   17b0c:	3001      	adds	r0, #1
}
   17b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   17b12:	f015 ba32 	b.w	2cf7a <bt_addr_le_copy>
   17b16:	bf00      	nop
   17b18:	000370b5 	.word	0x000370b5
   17b1c:	00033bc2 	.word	0x00033bc2
   17b20:	00037085 	.word	0x00037085
   17b24:	000358c4 	.word	0x000358c4

00017b28 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, uint8_t err,
			       const void *pdu, uint16_t length,
			       void *user_data)
{
   17b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17b2c:	4688      	mov	r8, r1
   17b2e:	af00      	add	r7, sp, #0
   17b30:	6a3c      	ldr	r4, [r7, #32]
   17b32:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b34:	f06f 0104 	mvn.w	r1, #4
   17b38:	f104 0014 	add.w	r0, r4, #20
   17b3c:	f015 f9c6 	bl	2cecc <atomic_and>
	LOG_DBG("err 0x%02x", err);

	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
   17b40:	f1b8 0f00 	cmp.w	r8, #0
   17b44:	d020      	beq.n	17b88 <gatt_write_ccc_rsp+0x60>
		struct gatt_sub *sub;
		sys_snode_t *node, *tmp;

		sub = gatt_sub_find(conn);
   17b46:	4628      	mov	r0, r5
   17b48:	f7ff ffb8 	bl	17abc <gatt_sub_find>
		if (!sub) {
   17b4c:	4601      	mov	r1, r0
   17b4e:	b188      	cbz	r0, 17b74 <gatt_write_ccc_rsp+0x4c>
	return list->head;
   17b50:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   17b52:	b14b      	cbz	r3, 17b68 <gatt_write_ccc_rsp+0x40>
	return node->next;
   17b54:	681a      	ldr	r2, [r3, #0]
			return;
		}

		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
			if (node == &params->node) {
   17b56:	f104 0618 	add.w	r6, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   17b5a:	b12b      	cbz	r3, 17b68 <gatt_write_ccc_rsp+0x40>
			if (node == &params->node) {
   17b5c:	42b3      	cmp	r3, r6
   17b5e:	d10c      	bne.n	17b7a <gatt_write_ccc_rsp+0x52>
				gatt_sub_remove(conn, sub, tmp, params);
   17b60:	4623      	mov	r3, r4
   17b62:	4628      	mov	r0, r5
   17b64:	f015 fa10 	bl	2cf88 <gatt_sub_remove>
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	if (params->subscribe) {
   17b68:	6866      	ldr	r6, [r4, #4]
   17b6a:	b1be      	cbz	r6, 17b9c <gatt_write_ccc_rsp+0x74>
		params->subscribe(conn, err, params);
   17b6c:	4622      	mov	r2, r4
   17b6e:	4641      	mov	r1, r8
   17b70:	4628      	mov	r0, r5
   17b72:	47b0      	blx	r6
	} else if (params->write) {
		/* TODO: Remove after deprecation */
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
		params->write(conn, err, NULL);
	}
}
   17b74:	46bd      	mov	sp, r7
   17b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   17b7a:	b11a      	cbz	r2, 17b84 <gatt_write_ccc_rsp+0x5c>
	return node->next;
   17b7c:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   17b7e:	4613      	mov	r3, r2
   17b80:	4602      	mov	r2, r0
   17b82:	e7ea      	b.n	17b5a <gatt_write_ccc_rsp+0x32>
   17b84:	4610      	mov	r0, r2
   17b86:	e7fa      	b.n	17b7e <gatt_write_ccc_rsp+0x56>
	} else if (!params->value) {
   17b88:	8a23      	ldrh	r3, [r4, #16]
   17b8a:	2b00      	cmp	r3, #0
   17b8c:	d1ec      	bne.n	17b68 <gatt_write_ccc_rsp+0x40>
		params->notify(conn, params, NULL, 0);
   17b8e:	4643      	mov	r3, r8
   17b90:	4642      	mov	r2, r8
   17b92:	4621      	mov	r1, r4
   17b94:	4628      	mov	r0, r5
   17b96:	6826      	ldr	r6, [r4, #0]
   17b98:	47b0      	blx	r6
   17b9a:	e7e5      	b.n	17b68 <gatt_write_ccc_rsp+0x40>
	} else if (params->write) {
   17b9c:	68a3      	ldr	r3, [r4, #8]
   17b9e:	2b00      	cmp	r3, #0
   17ba0:	d0e8      	beq.n	17b74 <gatt_write_ccc_rsp+0x4c>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   17ba2:	46e9      	mov	r9, sp
   17ba4:	b088      	sub	sp, #32
   17ba6:	466a      	mov	r2, sp
   17ba8:	4b09      	ldr	r3, [pc, #36]	; (17bd0 <gatt_write_ccc_rsp+0xa8>)
   17baa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17bae:	6153      	str	r3, [r2, #20]
   17bb0:	4b08      	ldr	r3, [pc, #32]	; (17bd4 <gatt_write_ccc_rsp+0xac>)
   17bb2:	4809      	ldr	r0, [pc, #36]	; (17bd8 <gatt_write_ccc_rsp+0xb0>)
   17bb4:	6193      	str	r3, [r2, #24]
   17bb6:	2303      	movs	r3, #3
   17bb8:	f842 3f10 	str.w	r3, [r2, #16]!
   17bbc:	f015 fa91 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		params->write(conn, err, NULL);
   17bc0:	4632      	mov	r2, r6
   17bc2:	46cd      	mov	sp, r9
   17bc4:	4641      	mov	r1, r8
   17bc6:	4628      	mov	r0, r5
   17bc8:	68a3      	ldr	r3, [r4, #8]
   17bca:	4798      	blx	r3
   17bcc:	e7d2      	b.n	17b74 <gatt_write_ccc_rsp+0x4c>
   17bce:	bf00      	nop
   17bd0:	000370cc 	.word	0x000370cc
   17bd4:	000374e1 	.word	0x000374e1
   17bd8:	00031ba4 	.word	0x00031ba4

00017bdc <bt_gatt_attr_write_ccc>:
{
   17bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17be0:	af00      	add	r7, sp, #0
   17be2:	461e      	mov	r6, r3
   17be4:	8c3b      	ldrh	r3, [r7, #32]
   17be6:	4682      	mov	sl, r0
   17be8:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   17bea:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   17bee:	2b00      	cmp	r3, #0
   17bf0:	d151      	bne.n	17c96 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
   17bf2:	1e73      	subs	r3, r6, #1
   17bf4:	2b01      	cmp	r3, #1
   17bf6:	d851      	bhi.n	17c9c <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
   17bf8:	2e01      	cmp	r6, #1
	cfg = find_ccc_cfg(conn, ccc);
   17bfa:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   17bfc:	7815      	ldrb	r5, [r2, #0]
   17bfe:	bf18      	it	ne
   17c00:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   17c02:	f7ff ff47 	bl	17a94 <find_ccc_cfg>
	if (!cfg) {
   17c06:	4604      	mov	r4, r0
   17c08:	bb20      	cbnz	r0, 17c54 <bt_gatt_attr_write_ccc+0x78>
		if (!value) {
   17c0a:	b91d      	cbnz	r5, 17c14 <bt_gatt_attr_write_ccc+0x38>
			return len;
   17c0c:	4630      	mov	r0, r6
}
   17c0e:	46bd      	mov	sp, r7
   17c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17c14:	4649      	mov	r1, r9
   17c16:	f7ff ff3d 	bl	17a94 <find_ccc_cfg>
		if (!cfg) {
   17c1a:	4604      	mov	r4, r0
   17c1c:	b990      	cbnz	r0, 17c44 <bt_gatt_attr_write_ccc+0x68>
			LOG_WRN("No space to store CCC cfg");
   17c1e:	466c      	mov	r4, sp
   17c20:	b088      	sub	sp, #32
   17c22:	466a      	mov	r2, sp
   17c24:	4b1f      	ldr	r3, [pc, #124]	; (17ca4 <bt_gatt_attr_write_ccc+0xc8>)
   17c26:	4820      	ldr	r0, [pc, #128]	; (17ca8 <bt_gatt_attr_write_ccc+0xcc>)
   17c28:	6153      	str	r3, [r2, #20]
   17c2a:	4b20      	ldr	r3, [pc, #128]	; (17cac <bt_gatt_attr_write_ccc+0xd0>)
   17c2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c30:	6193      	str	r3, [r2, #24]
   17c32:	2303      	movs	r3, #3
   17c34:	f842 3f10 	str.w	r3, [r2, #16]!
   17c38:	f015 fa53 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17c3c:	f06f 0010 	mvn.w	r0, #16
   17c40:	46a5      	mov	sp, r4
   17c42:	e7e4      	b.n	17c0e <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17c44:	f10a 0190 	add.w	r1, sl, #144	; 0x90
   17c48:	3001      	adds	r0, #1
   17c4a:	f015 f996 	bl	2cf7a <bt_addr_le_copy>
		cfg->id = conn->id;
   17c4e:	f89a 3008 	ldrb.w	r3, [sl, #8]
   17c52:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17c58:	b98b      	cbnz	r3, 17c7e <bt_gatt_attr_write_ccc+0xa2>
	cfg->value = value;
   17c5a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   17c5c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   17c60:	42ab      	cmp	r3, r5
   17c62:	d003      	beq.n	17c6c <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   17c64:	4649      	mov	r1, r9
   17c66:	4640      	mov	r0, r8
   17c68:	f015 f8a6 	bl	2cdb8 <gatt_ccc_changed>
	if (!value) {
   17c6c:	2d00      	cmp	r5, #0
   17c6e:	d1cd      	bne.n	17c0c <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17c70:	490f      	ldr	r1, [pc, #60]	; (17cb0 <bt_gatt_attr_write_ccc+0xd4>)
   17c72:	1c60      	adds	r0, r4, #1
   17c74:	f015 f981 	bl	2cf7a <bt_addr_le_copy>
	cfg->id = 0U;
   17c78:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   17c7a:	8125      	strh	r5, [r4, #8]
}
   17c7c:	e7c6      	b.n	17c0c <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17c7e:	462a      	mov	r2, r5
   17c80:	4641      	mov	r1, r8
   17c82:	4650      	mov	r0, sl
   17c84:	4798      	blx	r3
		if (write < 0) {
   17c86:	2800      	cmp	r0, #0
   17c88:	dbc1      	blt.n	17c0e <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   17c8a:	3801      	subs	r0, #1
   17c8c:	2801      	cmp	r0, #1
   17c8e:	d9e4      	bls.n	17c5a <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17c90:	f06f 000d 	mvn.w	r0, #13
   17c94:	e7bb      	b.n	17c0e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17c96:	f06f 0006 	mvn.w	r0, #6
   17c9a:	e7b8      	b.n	17c0e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17c9c:	f06f 000c 	mvn.w	r0, #12
   17ca0:	e7b5      	b.n	17c0e <bt_gatt_attr_write_ccc+0x32>
   17ca2:	bf00      	nop
   17ca4:	00037107 	.word	0x00037107
   17ca8:	00031ba4 	.word	0x00031ba4
   17cac:	000375ce 	.word	0x000375ce
   17cb0:	000358c4 	.word	0x000358c4

00017cb4 <clear_cf_cfg>:
{
   17cb4:	4602      	mov	r2, r0
   17cb6:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17cb8:	4907      	ldr	r1, [pc, #28]	; (17cd8 <clear_cf_cfg+0x24>)
   17cba:	3001      	adds	r0, #1
   17cbc:	f015 f95d 	bl	2cf7a <bt_addr_le_copy>
   17cc0:	2300      	movs	r3, #0
   17cc2:	320c      	adds	r2, #12
   17cc4:	f802 3c04 	strb.w	r3, [r2, #-4]
   17cc8:	e8d2 1fef 	ldaex	r1, [r2]
   17ccc:	e8c2 3fe0 	stlex	r0, r3, [r2]
   17cd0:	2800      	cmp	r0, #0
   17cd2:	d1f9      	bne.n	17cc8 <clear_cf_cfg+0x14>
}
   17cd4:	bd08      	pop	{r3, pc}
   17cd6:	bf00      	nop
   17cd8:	000358c4 	.word	0x000358c4

00017cdc <sc_save>:
{
   17cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ce0:	af00      	add	r7, sp, #0
   17ce2:	4681      	mov	r9, r0
   17ce4:	4688      	mov	r8, r1
   17ce6:	4616      	mov	r6, r2
   17ce8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17cea:	f7ff fec1 	bl	17a70 <find_sc_cfg>
	if (!cfg) {
   17cee:	4604      	mov	r4, r0
   17cf0:	b9e0      	cbnz	r0, 17d2c <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17cf2:	4915      	ldr	r1, [pc, #84]	; (17d48 <sc_save+0x6c>)
   17cf4:	f7ff febc 	bl	17a70 <find_sc_cfg>
		if (!cfg) {
   17cf8:	4604      	mov	r4, r0
   17cfa:	b990      	cbnz	r0, 17d22 <sc_save+0x46>
			LOG_ERR("unable to save SC: no cfg left");
   17cfc:	466c      	mov	r4, sp
   17cfe:	b088      	sub	sp, #32
   17d00:	466a      	mov	r2, sp
   17d02:	4b12      	ldr	r3, [pc, #72]	; (17d4c <sc_save+0x70>)
   17d04:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d08:	6153      	str	r3, [r2, #20]
   17d0a:	4b11      	ldr	r3, [pc, #68]	; (17d50 <sc_save+0x74>)
   17d0c:	4811      	ldr	r0, [pc, #68]	; (17d54 <sc_save+0x78>)
   17d0e:	6193      	str	r3, [r2, #24]
   17d10:	2303      	movs	r3, #3
   17d12:	f842 3f10 	str.w	r3, [r2, #16]!
   17d16:	f015 f9e4 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   17d1a:	46a5      	mov	sp, r4
}
   17d1c:	46bd      	mov	sp, r7
   17d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   17d22:	4641      	mov	r1, r8
		cfg->id = id;
   17d24:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17d28:	f015 f927 	bl	2cf7a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17d2c:	8922      	ldrh	r2, [r4, #8]
   17d2e:	8963      	ldrh	r3, [r4, #10]
   17d30:	b91a      	cbnz	r2, 17d3a <sc_save+0x5e>
   17d32:	b92b      	cbnz	r3, 17d40 <sc_save+0x64>
		cfg->data.start = start;
   17d34:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17d36:	8165      	strh	r5, [r4, #10]
   17d38:	e7f0      	b.n	17d1c <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   17d3a:	4296      	cmp	r6, r2
		*start = new_start;
   17d3c:	bf38      	it	cc
   17d3e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   17d40:	429d      	cmp	r5, r3
   17d42:	d9eb      	bls.n	17d1c <sc_save+0x40>
   17d44:	e7f7      	b.n	17d36 <sc_save+0x5a>
   17d46:	bf00      	nop
   17d48:	000358c4 	.word	0x000358c4
   17d4c:	00037125 	.word	0x00037125
   17d50:	000375e5 	.word	0x000375e5
   17d54:	00031ba4 	.word	0x00031ba4

00017d58 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   17d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17d5a:	460c      	mov	r4, r1
   17d5c:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d5e:	2108      	movs	r1, #8
   17d60:	f104 0014 	add.w	r0, r4, #20
   17d64:	f015 f8a7 	bl	2ceb6 <atomic_or>
	/* The value of the params doesn't matter, this is just so we don't
	 * repeat CCC writes when the AUTO_RESUBSCRIBE quirk is enabled.
	 */
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   17d68:	2312      	movs	r3, #18
   17d6a:	2204      	movs	r2, #4
   17d6c:	4628      	mov	r0, r5
   17d6e:	e9cd 3200 	strd	r3, r2, [sp]
   17d72:	4903      	ldr	r1, [pc, #12]	; (17d80 <gatt_write_ccc+0x28>)
   17d74:	4622      	mov	r2, r4
   17d76:	4b03      	ldr	r3, [pc, #12]	; (17d84 <gatt_write_ccc+0x2c>)
   17d78:	f015 f9fd 	bl	2d176 <gatt_req_send.constprop.0>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len,
			     BT_ATT_CHAN_OPT(params));
}
   17d7c:	b003      	add	sp, #12
   17d7e:	bd30      	pop	{r4, r5, pc}
   17d80:	00017b29 	.word	0x00017b29
   17d84:	0002d1e9 	.word	0x0002d1e9

00017d88 <disconnected_cb>:
{
   17d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17d8c:	4b23      	ldr	r3, [pc, #140]	; (17e1c <disconnected_cb+0x94>)
{
   17d8e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17d90:	6882      	ldr	r2, [r0, #8]
{
   17d92:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17d94:	429a      	cmp	r2, r3
   17d96:	d102      	bne.n	17d9e <disconnected_cb+0x16>
	ccc = attr->user_data;
   17d98:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   17d9a:	8963      	ldrh	r3, [r4, #10]
   17d9c:	bb33      	cbnz	r3, 17dec <disconnected_cb+0x64>
}
   17d9e:	2001      	movs	r0, #1
   17da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   17da4:	f7fd fcfe 	bl	157a4 <bt_conn_unref>
		ccc->value = 0U;
   17da8:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   17daa:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17dac:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17dae:	2b00      	cmp	r3, #0
   17db0:	d0f5      	beq.n	17d9e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17db2:	4638      	mov	r0, r7
   17db4:	4798      	blx	r3
   17db6:	e7f2      	b.n	17d9e <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17db8:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17dbc:	4641      	mov	r1, r8
   17dbe:	7a28      	ldrb	r0, [r5, #8]
   17dc0:	f014 f9f6 	bl	2c1b0 <bt_addr_le_is_bonded>
   17dc4:	b968      	cbnz	r0, 17de2 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   17dc6:	4b16      	ldr	r3, [pc, #88]	; (17e20 <disconnected_cb+0x98>)
   17dc8:	429c      	cmp	r4, r3
   17dca:	d102      	bne.n	17dd2 <disconnected_cb+0x4a>
					sc_clear(conn);
   17dcc:	4628      	mov	r0, r5
   17dce:	f015 f98b 	bl	2d0e8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17dd2:	4630      	mov	r0, r6
   17dd4:	4913      	ldr	r1, [pc, #76]	; (17e24 <disconnected_cb+0x9c>)
   17dd6:	f015 f8d0 	bl	2cf7a <bt_addr_le_copy>
	cfg->id = 0U;
   17dda:	2300      	movs	r3, #0
   17ddc:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   17dde:	8123      	strh	r3, [r4, #8]
}
   17de0:	e7e2      	b.n	17da8 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17de2:	4641      	mov	r1, r8
   17de4:	4630      	mov	r0, r6
   17de6:	f015 f8c8 	bl	2cf7a <bt_addr_le_copy>
   17dea:	e7dd      	b.n	17da8 <disconnected_cb+0x20>
		if (!cfg->value) {
   17dec:	8923      	ldrh	r3, [r4, #8]
   17dee:	2b00      	cmp	r3, #0
   17df0:	d0da      	beq.n	17da8 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17df2:	4626      	mov	r6, r4
   17df4:	f816 1b01 	ldrb.w	r1, [r6], #1
   17df8:	4628      	mov	r0, r5
   17dfa:	4632      	mov	r2, r6
   17dfc:	f014 fa86 	bl	2c30c <bt_conn_is_peer_addr_le>
   17e00:	2800      	cmp	r0, #0
   17e02:	d1d9      	bne.n	17db8 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17e04:	4631      	mov	r1, r6
   17e06:	7820      	ldrb	r0, [r4, #0]
   17e08:	f7fd ff56 	bl	15cb8 <bt_conn_lookup_addr_le>
			if (tmp) {
   17e0c:	2800      	cmp	r0, #0
   17e0e:	d0cb      	beq.n	17da8 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   17e10:	7a83      	ldrb	r3, [r0, #10]
   17e12:	2b07      	cmp	r3, #7
   17e14:	d1c6      	bne.n	17da4 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   17e16:	f7fd fcc5 	bl	157a4 <bt_conn_unref>
	if (!value_used) {
   17e1a:	e7c0      	b.n	17d9e <disconnected_cb+0x16>
   17e1c:	00017bdd 	.word	0x00017bdd
   17e20:	2000c8c8 	.word	0x2000c8c8
   17e24:	000358c4 	.word	0x000358c4

00017e28 <cf_write>:
{
   17e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e2c:	af00      	add	r7, sp, #0
   17e2e:	4698      	mov	r8, r3
   17e30:	8c3b      	ldrh	r3, [r7, #32]
   17e32:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   17e34:	2b01      	cmp	r3, #1
{
   17e36:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   17e38:	d842      	bhi.n	17ec0 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
   17e3a:	4443      	add	r3, r8
   17e3c:	2b01      	cmp	r3, #1
   17e3e:	4645      	mov	r5, r8
   17e40:	dc41      	bgt.n	17ec6 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
   17e42:	f7ff fdfd 	bl	17a40 <find_cf_cfg>
	if (!cfg) {
   17e46:	4604      	mov	r4, r0
   17e48:	b9c8      	cbnz	r0, 17e7e <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   17e4a:	f7ff fdf9 	bl	17a40 <find_cf_cfg>
	if (!cfg) {
   17e4e:	4604      	mov	r4, r0
   17e50:	b9a8      	cbnz	r0, 17e7e <cf_write+0x56>
		LOG_WRN("No space to store Client Supported Features");
   17e52:	466c      	mov	r4, sp
   17e54:	b088      	sub	sp, #32
   17e56:	466a      	mov	r2, sp
   17e58:	4b1e      	ldr	r3, [pc, #120]	; (17ed4 <cf_write+0xac>)
   17e5a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17e5e:	6153      	str	r3, [r2, #20]
   17e60:	4b1d      	ldr	r3, [pc, #116]	; (17ed8 <cf_write+0xb0>)
   17e62:	481e      	ldr	r0, [pc, #120]	; (17edc <cf_write+0xb4>)
   17e64:	6193      	str	r3, [r2, #24]
   17e66:	2303      	movs	r3, #3
   17e68:	f842 3f10 	str.w	r3, [r2, #16]!
   17e6c:	f015 f939 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17e70:	f06f 0510 	mvn.w	r5, #16
   17e74:	46a5      	mov	sp, r4
}
   17e76:	4628      	mov	r0, r5
   17e78:	46bd      	mov	sp, r7
   17e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17e7e:	f1b8 0f00 	cmp.w	r8, #0
   17e82:	d012      	beq.n	17eaa <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
   17e84:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17e86:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   17e88:	f899 2000 	ldrb.w	r2, [r9]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17e8c:	fa21 f003 	lsr.w	r0, r1, r3
   17e90:	07c0      	lsls	r0, r0, #31
   17e92:	d503      	bpl.n	17e9c <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   17e94:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17e98:	07c0      	lsls	r0, r0, #31
   17e9a:	d517      	bpl.n	17ecc <cf_write+0xa4>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17e9c:	3301      	adds	r3, #1
   17e9e:	2b03      	cmp	r3, #3
   17ea0:	d1f4      	bne.n	17e8c <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   17ea2:	f002 0207 	and.w	r2, r2, #7
   17ea6:	4311      	orrs	r1, r2
   17ea8:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17eaa:	1c60      	adds	r0, r4, #1
   17eac:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17eb0:	f015 f863 	bl	2cf7a <bt_addr_le_copy>
	cfg->id = conn->id;
   17eb4:	7a33      	ldrb	r3, [r6, #8]
	bool changed = set_change_aware_no_store(cfg, aware);
   17eb6:	4620      	mov	r0, r4
	cfg->id = conn->id;
   17eb8:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   17eba:	f015 f9aa 	bl	2d212 <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   17ebe:	e7da      	b.n	17e76 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17ec0:	f06f 0506 	mvn.w	r5, #6
   17ec4:	e7d7      	b.n	17e76 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17ec6:	f06f 050c 	mvn.w	r5, #12
   17eca:	e7d4      	b.n	17e76 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   17ecc:	f06f 0512 	mvn.w	r5, #18
   17ed0:	e7d1      	b.n	17e76 <cf_write+0x4e>
   17ed2:	bf00      	nop
   17ed4:	00037148 	.word	0x00037148
   17ed8:	000375ed 	.word	0x000375ed
   17edc:	00031ba4 	.word	0x00031ba4

00017ee0 <sc_indicate_rsp>:
{
   17ee0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ee2:	f06f 0102 	mvn.w	r1, #2
   17ee6:	4604      	mov	r4, r0
   17ee8:	480e      	ldr	r0, [pc, #56]	; (17f24 <sc_indicate_rsp+0x44>)
   17eea:	f014 ffef 	bl	2cecc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17eee:	480d      	ldr	r0, [pc, #52]	; (17f24 <sc_indicate_rsp+0x44>)
   17ef0:	f014 ffde 	bl	2ceb0 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17ef4:	07c2      	lsls	r2, r0, #31
   17ef6:	d504      	bpl.n	17f02 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17ef8:	2200      	movs	r2, #0
   17efa:	2300      	movs	r3, #0
   17efc:	480a      	ldr	r0, [pc, #40]	; (17f28 <sc_indicate_rsp+0x48>)
   17efe:	f00d fe59 	bl	25bb4 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   17f02:	4620      	mov	r0, r4
   17f04:	f014 ff30 	bl	2cd68 <bt_att_fixed_chan_only>
   17f08:	b150      	cbz	r0, 17f20 <sc_indicate_rsp+0x40>
		cfg = find_cf_cfg(conn);
   17f0a:	4620      	mov	r0, r4
   17f0c:	f7ff fd98 	bl	17a40 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   17f10:	b130      	cbz	r0, 17f20 <sc_indicate_rsp+0x40>
   17f12:	7a03      	ldrb	r3, [r0, #8]
   17f14:	07db      	lsls	r3, r3, #31
   17f16:	d503      	bpl.n	17f20 <sc_indicate_rsp+0x40>
}
   17f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   17f1c:	f015 b979 	b.w	2d212 <set_change_aware_no_store.constprop.0.isra.0>
}
   17f20:	bd10      	pop	{r4, pc}
   17f22:	bf00      	nop
   17f24:	2000da70 	.word	0x2000da70
   17f28:	2000da40 	.word	0x2000da40

00017f2c <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f2c:	2101      	movs	r1, #1
{
   17f2e:	b510      	push	{r4, lr}
   17f30:	481f      	ldr	r0, [pc, #124]	; (17fb0 <bt_gatt_init+0x84>)
   17f32:	f014 ffc0 	bl	2ceb6 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   17f36:	07c3      	lsls	r3, r0, #31
   17f38:	d439      	bmi.n	17fae <bt_gatt_init+0x82>
   17f3a:	2102      	movs	r1, #2
   17f3c:	481c      	ldr	r0, [pc, #112]	; (17fb0 <bt_gatt_init+0x84>)
   17f3e:	f014 ffba 	bl	2ceb6 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   17f42:	4008      	ands	r0, r1
   17f44:	d11f      	bne.n	17f86 <bt_gatt_init+0x5a>
   17f46:	491b      	ldr	r1, [pc, #108]	; (17fb4 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17f48:	4a1b      	ldr	r2, [pc, #108]	; (17fb8 <bt_gatt_init+0x8c>)
   17f4a:	880b      	ldrh	r3, [r1, #0]
   17f4c:	4c1b      	ldr	r4, [pc, #108]	; (17fbc <bt_gatt_init+0x90>)
   17f4e:	42a2      	cmp	r2, r4
   17f50:	d916      	bls.n	17f80 <bt_gatt_init+0x54>
   17f52:	b100      	cbz	r0, 17f56 <bt_gatt_init+0x2a>
   17f54:	800b      	strh	r3, [r1, #0]
   17f56:	491a      	ldr	r1, [pc, #104]	; (17fc0 <bt_gatt_init+0x94>)
   17f58:	f240 53c3 	movw	r3, #1475	; 0x5c3
   17f5c:	4a19      	ldr	r2, [pc, #100]	; (17fc4 <bt_gatt_init+0x98>)
   17f5e:	481a      	ldr	r0, [pc, #104]	; (17fc8 <bt_gatt_init+0x9c>)
   17f60:	f012 ff2a 	bl	2adb8 <assert_print>
   17f64:	4819      	ldr	r0, [pc, #100]	; (17fcc <bt_gatt_init+0xa0>)
   17f66:	f012 ff27 	bl	2adb8 <assert_print>
   17f6a:	f240 51c3 	movw	r1, #1475	; 0x5c3
   17f6e:	4815      	ldr	r0, [pc, #84]	; (17fc4 <bt_gatt_init+0x98>)
   17f70:	f012 ff1b 	bl	2adaa <assert_post_action>
		last_static_handle += svc->attr_count;
   17f74:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17f76:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   17f78:	4403      	add	r3, r0
   17f7a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17f7c:	2001      	movs	r0, #1
   17f7e:	e7e6      	b.n	17f4e <bt_gatt_init+0x22>
   17f80:	d3f8      	bcc.n	17f74 <bt_gatt_init+0x48>
   17f82:	b100      	cbz	r0, 17f86 <bt_gatt_init+0x5a>
   17f84:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   17f86:	2200      	movs	r2, #0
   17f88:	4b11      	ldr	r3, [pc, #68]	; (17fd0 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17f8a:	4912      	ldr	r1, [pc, #72]	; (17fd4 <bt_gatt_init+0xa8>)
   17f8c:	4812      	ldr	r0, [pc, #72]	; (17fd8 <bt_gatt_init+0xac>)
	list->tail = NULL;
   17f8e:	e9c3 2200 	strd	r2, r2, [r3]
   17f92:	f00d fcf3 	bl	2597c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   17f96:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17f9a:	2300      	movs	r3, #0
   17f9c:	480e      	ldr	r0, [pc, #56]	; (17fd8 <bt_gatt_init+0xac>)
   17f9e:	f7fa fc55 	bl	1284c <bt_long_wq_schedule>
}
   17fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   17fa6:	490d      	ldr	r1, [pc, #52]	; (17fdc <bt_gatt_init+0xb0>)
   17fa8:	480d      	ldr	r0, [pc, #52]	; (17fe0 <bt_gatt_init+0xb4>)
   17faa:	f00d bce7 	b.w	2597c <k_work_init_delayable>
}
   17fae:	bd10      	pop	{r4, pc}
   17fb0:	2000e41c 	.word	0x2000e41c
   17fb4:	2000ebd8 	.word	0x2000ebd8
   17fb8:	00031b44 	.word	0x00031b44
   17fbc:	00031b54 	.word	0x00031b54
   17fc0:	0003717f 	.word	0x0003717f
   17fc4:	00037085 	.word	0x00037085
   17fc8:	00033bc2 	.word	0x00033bc2
   17fcc:	000342e3 	.word	0x000342e3
   17fd0:	2000e420 	.word	0x2000e420
   17fd4:	0001826d 	.word	0x0001826d
   17fd8:	2000d9c8 	.word	0x2000d9c8
   17fdc:	000186a9 	.word	0x000186a9
   17fe0:	2000da40 	.word	0x2000da40

00017fe4 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17fe4:	4603      	mov	r3, r0
{
   17fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17fea:	b398      	cbz	r0, 18054 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17fec:	8a00      	ldrh	r0, [r0, #16]
   17fee:	bb88      	cbnz	r0, 18054 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17ff0:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17ff2:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17ff6:	4919      	ldr	r1, [pc, #100]	; (1805c <bt_gatt_attr_get_handle+0x78>)
   17ff8:	f8df e064 	ldr.w	lr, [pc, #100]	; 18060 <bt_gatt_attr_get_handle+0x7c>
   17ffc:	4571      	cmp	r1, lr
   17ffe:	d928      	bls.n	18052 <bt_gatt_attr_get_handle+0x6e>
   18000:	4918      	ldr	r1, [pc, #96]	; (18064 <bt_gatt_attr_get_handle+0x80>)
   18002:	f240 7329 	movw	r3, #1833	; 0x729
   18006:	4a18      	ldr	r2, [pc, #96]	; (18068 <bt_gatt_attr_get_handle+0x84>)
   18008:	4818      	ldr	r0, [pc, #96]	; (1806c <bt_gatt_attr_get_handle+0x88>)
   1800a:	f012 fed5 	bl	2adb8 <assert_print>
   1800e:	4818      	ldr	r0, [pc, #96]	; (18070 <bt_gatt_attr_get_handle+0x8c>)
   18010:	f012 fed2 	bl	2adb8 <assert_print>
   18014:	f240 7129 	movw	r1, #1833	; 0x729
   18018:	4813      	ldr	r0, [pc, #76]	; (18068 <bt_gatt_attr_get_handle+0x84>)
   1801a:	f012 fec6 	bl	2adaa <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1801e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   18022:	42bb      	cmp	r3, r7
   18024:	d304      	bcc.n	18030 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18026:	fb0c 7206 	mla	r2, ip, r6, r7
   1802a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1802c:	4293      	cmp	r3, r2
   1802e:	d90e      	bls.n	1804e <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   18030:	4434      	add	r4, r6
   18032:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18034:	4614      	mov	r4, r2
   18036:	3108      	adds	r1, #8
   18038:	e7e0      	b.n	17ffc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1803a:	fb0c 7805 	mla	r8, ip, r5, r7
   1803e:	4543      	cmp	r3, r8
   18040:	d00a      	beq.n	18058 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18042:	3501      	adds	r5, #1
   18044:	1962      	adds	r2, r4, r5
   18046:	42b5      	cmp	r5, r6
   18048:	b292      	uxth	r2, r2
   1804a:	d1f6      	bne.n	1803a <bt_gatt_attr_get_handle+0x56>
   1804c:	e7f2      	b.n	18034 <bt_gatt_attr_get_handle+0x50>
   1804e:	2500      	movs	r5, #0
   18050:	e7f8      	b.n	18044 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18052:	d3e4      	bcc.n	1801e <bt_gatt_attr_get_handle+0x3a>
}
   18054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18058:	4610      	mov	r0, r2
   1805a:	e7fb      	b.n	18054 <bt_gatt_attr_get_handle+0x70>
   1805c:	00031b44 	.word	0x00031b44
   18060:	00031b54 	.word	0x00031b54
   18064:	00037178 	.word	0x00037178
   18068:	00037085 	.word	0x00037085
   1806c:	00033bc2 	.word	0x00033bc2
   18070:	000342e3 	.word	0x000342e3

00018074 <bt_gatt_foreach_attr_type>:
{
   18074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1807a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1807e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   18082:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   18084:	2d00      	cmp	r5, #0
   18086:	bf08      	it	eq
   18088:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1808a:	4b2b      	ldr	r3, [pc, #172]	; (18138 <bt_gatt_foreach_attr_type+0xc4>)
{
   1808c:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1808e:	881b      	ldrh	r3, [r3, #0]
{
   18090:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   18092:	4283      	cmp	r3, r0
   18094:	d232      	bcs.n	180fc <bt_gatt_foreach_attr_type+0x88>
}
   18096:	b003      	add	sp, #12
   18098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1809c:	4640      	mov	r0, r8
   1809e:	5889      	ldr	r1, [r1, r2]
   180a0:	9301      	str	r3, [sp, #4]
   180a2:	f013 ff61 	bl	2bf68 <bt_uuid_cmp>
   180a6:	9b01      	ldr	r3, [sp, #4]
   180a8:	b190      	cbz	r0, 180d0 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   180aa:	3401      	adds	r4, #1
   180ac:	f10a 0a01 	add.w	sl, sl, #1
   180b0:	b2a4      	uxth	r4, r4
   180b2:	6873      	ldr	r3, [r6, #4]
   180b4:	4553      	cmp	r3, sl
   180b6:	d92c      	bls.n	18112 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   180b8:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   180ba:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   180bc:	429c      	cmp	r4, r3
   180be:	d8ea      	bhi.n	18096 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   180c0:	42bc      	cmp	r4, r7
   180c2:	d3f2      	bcc.n	180aa <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   180c4:	fb0b f20a 	mul.w	r2, fp, sl
   180c8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   180ca:	f1b8 0f00 	cmp.w	r8, #0
   180ce:	d1e5      	bne.n	1809c <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   180d0:	f1b9 0f00 	cmp.w	r9, #0
   180d4:	d10b      	bne.n	180ee <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   180d6:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   180d8:	4618      	mov	r0, r3
	*num_matches -= 1;
   180da:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   180dc:	4621      	mov	r1, r4
   180de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   180e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180e2:	4798      	blx	r3
	if (!*num_matches) {
   180e4:	2d00      	cmp	r5, #0
   180e6:	d0d6      	beq.n	18096 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   180e8:	2800      	cmp	r0, #0
   180ea:	d1de      	bne.n	180aa <bt_gatt_foreach_attr_type+0x36>
   180ec:	e7d3      	b.n	18096 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   180ee:	68da      	ldr	r2, [r3, #12]
   180f0:	4591      	cmp	r9, r2
   180f2:	d1da      	bne.n	180aa <bt_gatt_foreach_attr_type+0x36>
   180f4:	e7ef      	b.n	180d6 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   180f6:	f04f 0a00 	mov.w	sl, #0
   180fa:	e7da      	b.n	180b2 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   180fc:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   180fe:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18102:	4e0e      	ldr	r6, [pc, #56]	; (1813c <bt_gatt_foreach_attr_type+0xc8>)
   18104:	e006      	b.n	18114 <bt_gatt_foreach_attr_type+0xa0>
   18106:	d2c6      	bcs.n	18096 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   18108:	6873      	ldr	r3, [r6, #4]
   1810a:	4423      	add	r3, r4
   1810c:	42bb      	cmp	r3, r7
   1810e:	d2f2      	bcs.n	180f6 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   18110:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18112:	3608      	adds	r6, #8
   18114:	4b0a      	ldr	r3, [pc, #40]	; (18140 <bt_gatt_foreach_attr_type+0xcc>)
   18116:	429e      	cmp	r6, r3
   18118:	d9f5      	bls.n	18106 <bt_gatt_foreach_attr_type+0x92>
   1811a:	490a      	ldr	r1, [pc, #40]	; (18144 <bt_gatt_foreach_attr_type+0xd0>)
   1811c:	f240 73ed 	movw	r3, #2029	; 0x7ed
   18120:	4a09      	ldr	r2, [pc, #36]	; (18148 <bt_gatt_foreach_attr_type+0xd4>)
   18122:	480a      	ldr	r0, [pc, #40]	; (1814c <bt_gatt_foreach_attr_type+0xd8>)
   18124:	f012 fe48 	bl	2adb8 <assert_print>
   18128:	4809      	ldr	r0, [pc, #36]	; (18150 <bt_gatt_foreach_attr_type+0xdc>)
   1812a:	f012 fe45 	bl	2adb8 <assert_print>
   1812e:	f240 71ed 	movw	r1, #2029	; 0x7ed
   18132:	4805      	ldr	r0, [pc, #20]	; (18148 <bt_gatt_foreach_attr_type+0xd4>)
   18134:	f012 fe39 	bl	2adaa <assert_post_action>
   18138:	2000ebd8 	.word	0x2000ebd8
   1813c:	00031b44 	.word	0x00031b44
   18140:	00031b54 	.word	0x00031b54
   18144:	00037178 	.word	0x00037178
   18148:	00037085 	.word	0x00037085
   1814c:	00033bc2 	.word	0x00033bc2
   18150:	000342e3 	.word	0x000342e3

00018154 <db_hash_gen>:
{
   18154:	b590      	push	{r4, r7, lr}
	uint8_t key[16] = {};
   18156:	2400      	movs	r4, #0
{
   18158:	b0c9      	sub	sp, #292	; 0x124
   1815a:	af00      	add	r7, sp, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1815c:	4639      	mov	r1, r7
   1815e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   18162:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   18166:	e9c7 4400 	strd	r4, r4, [r7]
   1816a:	e9c7 4402 	strd	r4, r4, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1816e:	f013 fba4 	bl	2b8ba <tc_cmac_setup>
   18172:	b998      	cbnz	r0, 1819c <db_hash_gen+0x48>
		LOG_ERR("Unable to setup AES CMAC");
   18174:	466c      	mov	r4, sp
   18176:	b088      	sub	sp, #32
   18178:	466a      	mov	r2, sp
   1817a:	4b1a      	ldr	r3, [pc, #104]	; (181e4 <db_hash_gen+0x90>)
		LOG_ERR("Unable to calculate hash");
   1817c:	6153      	str	r3, [r2, #20]
   1817e:	4b1a      	ldr	r3, [pc, #104]	; (181e8 <db_hash_gen+0x94>)
   18180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18184:	6193      	str	r3, [r2, #24]
   18186:	2303      	movs	r3, #3
   18188:	4818      	ldr	r0, [pc, #96]	; (181ec <db_hash_gen+0x98>)
   1818a:	f842 3f10 	str.w	r3, [r2, #16]!
   1818e:	f014 ffa8 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18192:	46a5      	mov	sp, r4
}
   18194:	f507 7792 	add.w	r7, r7, #292	; 0x124
   18198:	46bd      	mov	sp, r7
   1819a:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1819c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   181a0:	2001      	movs	r0, #1
   181a2:	4a13      	ldr	r2, [pc, #76]	; (181f0 <db_hash_gen+0x9c>)
   181a4:	f107 0310 	add.w	r3, r7, #16
   181a8:	f015 f896 	bl	2d2d8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   181ac:	4811      	ldr	r0, [pc, #68]	; (181f4 <db_hash_gen+0xa0>)
   181ae:	f107 0110 	add.w	r1, r7, #16
   181b2:	f013 fc17 	bl	2b9e4 <tc_cmac_final>
   181b6:	b920      	cbnz	r0, 181c2 <db_hash_gen+0x6e>
		LOG_ERR("Unable to calculate hash");
   181b8:	466c      	mov	r4, sp
   181ba:	b088      	sub	sp, #32
   181bc:	466a      	mov	r2, sp
   181be:	4b0e      	ldr	r3, [pc, #56]	; (181f8 <db_hash_gen+0xa4>)
   181c0:	e7dc      	b.n	1817c <db_hash_gen+0x28>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   181c2:	4621      	mov	r1, r4
   181c4:	4b0b      	ldr	r3, [pc, #44]	; (181f4 <db_hash_gen+0xa0>)
   181c6:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   181ca:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   181cc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   181d0:	3101      	adds	r1, #1
   181d2:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   181d4:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   181d8:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   181da:	d1f6      	bne.n	181ca <db_hash_gen+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   181dc:	4807      	ldr	r0, [pc, #28]	; (181fc <db_hash_gen+0xa8>)
   181de:	f014 fe6a 	bl	2ceb6 <atomic_or>
   181e2:	e7d7      	b.n	18194 <db_hash_gen+0x40>
   181e4:	000371a7 	.word	0x000371a7
   181e8:	000375f6 	.word	0x000375f6
   181ec:	00031ba4 	.word	0x00031ba4
   181f0:	0002cdfb 	.word	0x0002cdfb
   181f4:	2000d9b8 	.word	0x2000d9b8
   181f8:	000371c4 	.word	0x000371c4
   181fc:	2000da70 	.word	0x2000da70

00018200 <db_hash_read>:
{
   18200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18204:	4916      	ldr	r1, [pc, #88]	; (18260 <db_hash_read+0x60>)
{
   18206:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18208:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1820c:	4615      	mov	r5, r2
   1820e:	461e      	mov	r6, r3
   18210:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18214:	f00d fd2e 	bl	25c74 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18218:	4812      	ldr	r0, [pc, #72]	; (18264 <db_hash_read+0x64>)
   1821a:	f014 fe49 	bl	2ceb0 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1821e:	0701      	lsls	r1, r0, #28
   18220:	d401      	bmi.n	18226 <db_hash_read+0x26>
		db_hash_gen();
   18222:	f7ff ff97 	bl	18154 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   18226:	4620      	mov	r0, r4
   18228:	f7ff fc0a 	bl	17a40 <find_cf_cfg>
	if (cfg &&
   1822c:	b168      	cbz	r0, 1824a <db_hash_read+0x4a>
   1822e:	7a03      	ldrb	r3, [r0, #8]
   18230:	07da      	lsls	r2, r3, #31
   18232:	d50a      	bpl.n	1824a <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   18234:	f100 040c 	add.w	r4, r0, #12
   18238:	4620      	mov	r0, r4
   1823a:	f014 fe39 	bl	2ceb0 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1823e:	07c3      	lsls	r3, r0, #31
   18240:	d403      	bmi.n	1824a <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18242:	2102      	movs	r1, #2
   18244:	4620      	mov	r0, r4
   18246:	f014 fe36 	bl	2ceb6 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1824a:	2310      	movs	r3, #16
   1824c:	463a      	mov	r2, r7
   1824e:	9306      	str	r3, [sp, #24]
   18250:	4631      	mov	r1, r6
   18252:	4628      	mov	r0, r5
}
   18254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18258:	4b03      	ldr	r3, [pc, #12]	; (18268 <db_hash_read+0x68>)
   1825a:	f014 beba 	b.w	2cfd2 <bt_gatt_attr_read.constprop.0>
   1825e:	bf00      	nop
   18260:	2000d9f8 	.word	0x2000d9f8
   18264:	2000da70 	.word	0x2000da70
   18268:	2000d9b8 	.word	0x2000d9b8

0001826c <db_hash_process>:
{
   1826c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1826e:	4805      	ldr	r0, [pc, #20]	; (18284 <db_hash_process+0x18>)
   18270:	f014 fe1e 	bl	2ceb0 <atomic_get>
	if (new_hash) {
   18274:	0703      	lsls	r3, r0, #28
   18276:	d403      	bmi.n	18280 <db_hash_process+0x14>
}
   18278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   1827c:	f7ff bf6a 	b.w	18154 <db_hash_gen>
}
   18280:	bd08      	pop	{r3, pc}
   18282:	bf00      	nop
   18284:	2000da70 	.word	0x2000da70

00018288 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   18288:	2300      	movs	r3, #0
{
   1828a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1828c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1828e:	f7ff fea9 	bl	17fe4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   18292:	1c41      	adds	r1, r0, #1
   18294:	b289      	uxth	r1, r1
   18296:	4608      	mov	r0, r1
   18298:	4a03      	ldr	r2, [pc, #12]	; (182a8 <bt_gatt_attr_next+0x20>)
   1829a:	ab01      	add	r3, sp, #4
   1829c:	f015 f81c 	bl	2d2d8 <bt_gatt_foreach_attr>
}
   182a0:	9801      	ldr	r0, [sp, #4]
   182a2:	b003      	add	sp, #12
   182a4:	f85d fb04 	ldr.w	pc, [sp], #4
   182a8:	0002cdb3 	.word	0x0002cdb3

000182ac <bt_gatt_is_subscribed>:
{
   182ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   182b0:	460c      	mov	r4, r1
   182b2:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   182b4:	4605      	mov	r5, r0
   182b6:	b970      	cbnz	r0, 182d6 <bt_gatt_is_subscribed+0x2a>
   182b8:	495b      	ldr	r1, [pc, #364]	; (18428 <bt_gatt_is_subscribed+0x17c>)
   182ba:	f640 532e 	movw	r3, #3374	; 0xd2e
   182be:	4a5b      	ldr	r2, [pc, #364]	; (1842c <bt_gatt_is_subscribed+0x180>)
   182c0:	485b      	ldr	r0, [pc, #364]	; (18430 <bt_gatt_is_subscribed+0x184>)
   182c2:	f012 fd79 	bl	2adb8 <assert_print>
   182c6:	485b      	ldr	r0, [pc, #364]	; (18434 <bt_gatt_is_subscribed+0x188>)
   182c8:	f012 fd76 	bl	2adb8 <assert_print>
   182cc:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   182d0:	4856      	ldr	r0, [pc, #344]	; (1842c <bt_gatt_is_subscribed+0x180>)
   182d2:	f012 fd6a 	bl	2adaa <assert_post_action>
   182d6:	b961      	cbnz	r1, 182f2 <bt_gatt_is_subscribed+0x46>
   182d8:	4957      	ldr	r1, [pc, #348]	; (18438 <bt_gatt_is_subscribed+0x18c>)
   182da:	f640 532f 	movw	r3, #3375	; 0xd2f
   182de:	4a53      	ldr	r2, [pc, #332]	; (1842c <bt_gatt_is_subscribed+0x180>)
   182e0:	4853      	ldr	r0, [pc, #332]	; (18430 <bt_gatt_is_subscribed+0x184>)
   182e2:	f012 fd69 	bl	2adb8 <assert_print>
   182e6:	4853      	ldr	r0, [pc, #332]	; (18434 <bt_gatt_is_subscribed+0x188>)
   182e8:	f012 fd66 	bl	2adb8 <assert_print>
   182ec:	f640 512f 	movw	r1, #3375	; 0xd2f
   182f0:	e7ee      	b.n	182d0 <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   182f2:	7a83      	ldrb	r3, [r0, #10]
   182f4:	2b07      	cmp	r3, #7
   182f6:	d110      	bne.n	1831a <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   182f8:	2300      	movs	r3, #0
   182fa:	f88d 300c 	strb.w	r3, [sp, #12]
   182fe:	f642 0303 	movw	r3, #10243	; 0x2803
   18302:	6820      	ldr	r0, [r4, #0]
   18304:	a903      	add	r1, sp, #12
   18306:	f8ad 300e 	strh.w	r3, [sp, #14]
   1830a:	f013 fe2d 	bl	2bf68 <bt_uuid_cmp>
   1830e:	b9d0      	cbnz	r0, 18346 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   18310:	68e3      	ldr	r3, [r4, #12]
   18312:	799b      	ldrb	r3, [r3, #6]
   18314:	f013 0f30 	tst.w	r3, #48	; 0x30
   18318:	d103      	bne.n	18322 <bt_gatt_is_subscribed+0x76>
		return false;
   1831a:	2000      	movs	r0, #0
}
   1831c:	b004      	add	sp, #16
   1831e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   18322:	4620      	mov	r0, r4
   18324:	f7ff ffb0 	bl	18288 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   18328:	4604      	mov	r4, r0
   1832a:	b960      	cbnz	r0, 18346 <bt_gatt_is_subscribed+0x9a>
   1832c:	4942      	ldr	r1, [pc, #264]	; (18438 <bt_gatt_is_subscribed+0x18c>)
   1832e:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   18332:	4a3e      	ldr	r2, [pc, #248]	; (1842c <bt_gatt_is_subscribed+0x180>)
   18334:	483e      	ldr	r0, [pc, #248]	; (18430 <bt_gatt_is_subscribed+0x184>)
   18336:	f012 fd3f 	bl	2adb8 <assert_print>
   1833a:	4840      	ldr	r0, [pc, #256]	; (1843c <bt_gatt_is_subscribed+0x190>)
   1833c:	f012 fd3c 	bl	2adb8 <assert_print>
   18340:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   18344:	e7c4      	b.n	182d0 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   18346:	2300      	movs	r3, #0
   18348:	6820      	ldr	r0, [r4, #0]
   1834a:	f88d 300c 	strb.w	r3, [sp, #12]
   1834e:	f642 1302 	movw	r3, #10498	; 0x2902
   18352:	a903      	add	r1, sp, #12
   18354:	f8ad 300e 	strh.w	r3, [sp, #14]
   18358:	f013 fe06 	bl	2bf68 <bt_uuid_cmp>
   1835c:	b188      	cbz	r0, 18382 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1835e:	4620      	mov	r0, r4
   18360:	f7ff ff92 	bl	18288 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   18364:	4604      	mov	r4, r0
   18366:	b960      	cbnz	r0, 18382 <bt_gatt_is_subscribed+0xd6>
   18368:	4933      	ldr	r1, [pc, #204]	; (18438 <bt_gatt_is_subscribed+0x18c>)
   1836a:	f640 5346 	movw	r3, #3398	; 0xd46
   1836e:	4a2f      	ldr	r2, [pc, #188]	; (1842c <bt_gatt_is_subscribed+0x180>)
   18370:	482f      	ldr	r0, [pc, #188]	; (18430 <bt_gatt_is_subscribed+0x184>)
   18372:	f012 fd21 	bl	2adb8 <assert_print>
   18376:	4831      	ldr	r0, [pc, #196]	; (1843c <bt_gatt_is_subscribed+0x190>)
   18378:	f012 fd1e 	bl	2adb8 <assert_print>
   1837c:	f640 5146 	movw	r1, #3398	; 0xd46
   18380:	e7a6      	b.n	182d0 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   18382:	2600      	movs	r6, #0
   18384:	f642 1802 	movw	r8, #10498	; 0x2902
   18388:	6820      	ldr	r0, [r4, #0]
   1838a:	4669      	mov	r1, sp
   1838c:	f88d 6000 	strb.w	r6, [sp]
   18390:	f8ad 8002 	strh.w	r8, [sp, #2]
   18394:	f013 fde8 	bl	2bf68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18398:	b9d8      	cbnz	r0, 183d2 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1839a:	2300      	movs	r3, #0
   1839c:	6820      	ldr	r0, [r4, #0]
   1839e:	f88d 300c 	strb.w	r3, [sp, #12]
   183a2:	f642 1302 	movw	r3, #10498	; 0x2902
   183a6:	a903      	add	r1, sp, #12
   183a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   183ac:	f013 fddc 	bl	2bf68 <bt_uuid_cmp>
   183b0:	2800      	cmp	r0, #0
   183b2:	d1b2      	bne.n	1831a <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   183b4:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   183b6:	4628      	mov	r0, r5
   183b8:	4622      	mov	r2, r4
   183ba:	f812 1b01 	ldrb.w	r1, [r2], #1
   183be:	f013 ffa5 	bl	2c30c <bt_conn_is_peer_addr_le>
   183c2:	2800      	cmp	r0, #0
   183c4:	d0a9      	beq.n	1831a <bt_gatt_is_subscribed+0x6e>
   183c6:	8923      	ldrh	r3, [r4, #8]
   183c8:	421f      	tst	r7, r3
   183ca:	bf14      	ite	ne
   183cc:	2001      	movne	r0, #1
   183ce:	2000      	moveq	r0, #0
   183d0:	e7a4      	b.n	1831c <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   183d2:	f642 0303 	movw	r3, #10243	; 0x2803
   183d6:	6820      	ldr	r0, [r4, #0]
   183d8:	a901      	add	r1, sp, #4
   183da:	f88d 6004 	strb.w	r6, [sp, #4]
   183de:	f8ad 3006 	strh.w	r3, [sp, #6]
   183e2:	f013 fdc1 	bl	2bf68 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   183e6:	2800      	cmp	r0, #0
   183e8:	d0d7      	beq.n	1839a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   183ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   183ee:	6820      	ldr	r0, [r4, #0]
   183f0:	a902      	add	r1, sp, #8
   183f2:	f88d 6008 	strb.w	r6, [sp, #8]
   183f6:	f8ad 300a 	strh.w	r3, [sp, #10]
   183fa:	f013 fdb5 	bl	2bf68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   183fe:	2800      	cmp	r0, #0
   18400:	d0cb      	beq.n	1839a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18402:	f642 0301 	movw	r3, #10241	; 0x2801
   18406:	6820      	ldr	r0, [r4, #0]
   18408:	a903      	add	r1, sp, #12
   1840a:	f88d 600c 	strb.w	r6, [sp, #12]
   1840e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18412:	f013 fda9 	bl	2bf68 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18416:	2800      	cmp	r0, #0
   18418:	d0bf      	beq.n	1839a <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1841a:	4620      	mov	r0, r4
   1841c:	f7ff ff34 	bl	18288 <bt_gatt_attr_next>
		if (!attr) {
   18420:	4604      	mov	r4, r0
   18422:	2800      	cmp	r0, #0
   18424:	d1b0      	bne.n	18388 <bt_gatt_is_subscribed+0xdc>
   18426:	e778      	b.n	1831a <bt_gatt_is_subscribed+0x6e>
   18428:	00035d7c 	.word	0x00035d7c
   1842c:	00037085 	.word	0x00037085
   18430:	00033bc2 	.word	0x00033bc2
   18434:	000371e1 	.word	0x000371e1
   18438:	000371f6 	.word	0x000371f6
   1843c:	000371fb 	.word	0x000371fb

00018440 <gatt_indicate>:
{
   18440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18444:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18446:	6851      	ldr	r1, [r2, #4]
{
   18448:	4681      	mov	r9, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1844a:	f8b1 8012 	ldrh.w	r8, [r1, #18]
{
   1844e:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   18450:	f018 0814 	ands.w	r8, r8, #20
{
   18454:	af00      	add	r7, sp, #0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   18456:	d015      	beq.n	18484 <gatt_indicate+0x44>
		LOG_WRN("Link is not encrypted");
   18458:	466c      	mov	r4, sp
   1845a:	b088      	sub	sp, #32
   1845c:	466a      	mov	r2, sp
   1845e:	4b3b      	ldr	r3, [pc, #236]	; (1854c <gatt_indicate+0x10c>)
   18460:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18464:	6153      	str	r3, [r2, #20]
   18466:	4b3a      	ldr	r3, [pc, #232]	; (18550 <gatt_indicate+0x110>)
   18468:	483a      	ldr	r0, [pc, #232]	; (18554 <gatt_indicate+0x114>)
   1846a:	6193      	str	r3, [r2, #24]
   1846c:	2303      	movs	r3, #3
   1846e:	f842 3f10 	str.w	r3, [r2, #16]!
   18472:	f014 fe36 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18476:	f04f 35ff 	mov.w	r5, #4294967295
   1847a:	46a5      	mov	sp, r4
}
   1847c:	4628      	mov	r0, r5
   1847e:	46bd      	mov	sp, r7
   18480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   18484:	2202      	movs	r2, #2
   18486:	f7ff ff11 	bl	182ac <bt_gatt_is_subscribed>
   1848a:	b990      	cbnz	r0, 184b2 <gatt_indicate+0x72>
			LOG_WRN("Device is not subscribed to characteristic");
   1848c:	466c      	mov	r4, sp
   1848e:	b088      	sub	sp, #32
   18490:	466a      	mov	r2, sp
   18492:	4b31      	ldr	r3, [pc, #196]	; (18558 <gatt_indicate+0x118>)
   18494:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18498:	6153      	str	r3, [r2, #20]
   1849a:	4b2d      	ldr	r3, [pc, #180]	; (18550 <gatt_indicate+0x110>)
   1849c:	482d      	ldr	r0, [pc, #180]	; (18554 <gatt_indicate+0x114>)
   1849e:	6193      	str	r3, [r2, #24]
   184a0:	2303      	movs	r3, #3
   184a2:	f842 3f10 	str.w	r3, [r2, #16]!
   184a6:	f014 fe1c 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   184aa:	f06f 0515 	mvn.w	r5, #21
   184ae:	46a5      	mov	sp, r4
   184b0:	e7e4      	b.n	1847c <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   184b2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   184b6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   184b8:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   184ba:	f7ff f8dd 	bl	17678 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   184be:	3602      	adds	r6, #2
	if (!req) {
   184c0:	4604      	mov	r4, r0
   184c2:	b1e0      	cbz	r0, 184fe <gatt_indicate+0xbe>
	req->func = func;
   184c4:	4b25      	ldr	r3, [pc, #148]	; (1855c <gatt_indicate+0x11c>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   184c6:	4632      	mov	r2, r6
	req->func = func;
   184c8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   184ca:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   184cc:	211d      	movs	r1, #29
   184ce:	4648      	mov	r0, r9
   184d0:	f7fe fdfc 	bl	170cc <bt_att_create_pdu>
	if (!buf) {
   184d4:	4606      	mov	r6, r0
   184d6:	b9a8      	cbnz	r0, 18504 <gatt_indicate+0xc4>
		LOG_WRN("No buffer available to send indication");
   184d8:	466d      	mov	r5, sp
   184da:	b088      	sub	sp, #32
   184dc:	466a      	mov	r2, sp
   184de:	4b20      	ldr	r3, [pc, #128]	; (18560 <gatt_indicate+0x120>)
   184e0:	481c      	ldr	r0, [pc, #112]	; (18554 <gatt_indicate+0x114>)
   184e2:	6153      	str	r3, [r2, #20]
   184e4:	4b1a      	ldr	r3, [pc, #104]	; (18550 <gatt_indicate+0x110>)
   184e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   184ea:	6193      	str	r3, [r2, #24]
   184ec:	2303      	movs	r3, #3
   184ee:	f842 3f10 	str.w	r3, [r2, #16]!
   184f2:	f014 fdf6 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   184f6:	4620      	mov	r0, r4
   184f8:	46ad      	mov	sp, r5
   184fa:	f7ff f8e1 	bl	176c0 <bt_att_req_free>
		return -ENOMEM;
   184fe:	f06f 050b 	mvn.w	r5, #11
   18502:	e7bb      	b.n	1847c <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   18504:	2301      	movs	r3, #1
   18506:	4642      	mov	r2, r8
   18508:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1850a:	f106 0b0c 	add.w	fp, r6, #12
   1850e:	f014 fc49 	bl	2cda4 <bt_att_set_tx_meta_data>
   18512:	2102      	movs	r1, #2
   18514:	4658      	mov	r0, fp
   18516:	f001 fc83 	bl	19e20 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1851a:	4680      	mov	r8, r0
   1851c:	f828 ab02 	strh.w	sl, [r8], #2
   18520:	8aa9      	ldrh	r1, [r5, #20]
   18522:	4658      	mov	r0, fp
   18524:	f001 fc7c 	bl	19e20 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18528:	8aaa      	ldrh	r2, [r5, #20]
   1852a:	6929      	ldr	r1, [r5, #16]
   1852c:	4640      	mov	r0, r8
   1852e:	f018 f988 	bl	30842 <memcpy>
	err = bt_att_req_send(conn, req);
   18532:	4621      	mov	r1, r4
   18534:	4648      	mov	r0, r9
	req->buf = buf;
   18536:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   18538:	f7ff fa22 	bl	17980 <bt_att_req_send>
	if (err) {
   1853c:	4605      	mov	r5, r0
   1853e:	2800      	cmp	r0, #0
   18540:	d09c      	beq.n	1847c <gatt_indicate+0x3c>
		bt_att_req_free(req);
   18542:	4620      	mov	r0, r4
   18544:	f7ff f8bc 	bl	176c0 <bt_att_req_free>
   18548:	e798      	b.n	1847c <gatt_indicate+0x3c>
   1854a:	bf00      	nop
   1854c:	00037211 	.word	0x00037211
   18550:	000375b6 	.word	0x000375b6
   18554:	00031ba4 	.word	0x00031ba4
   18558:	0003722b 	.word	0x0003722b
   1855c:	0002cdcd 	.word	0x0002cdcd
   18560:	0003725a 	.word	0x0003725a

00018564 <bt_gatt_indicate>:
{
   18564:	b530      	push	{r4, r5, lr}
   18566:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18568:	460c      	mov	r4, r1
{
   1856a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1856c:	b971      	cbnz	r1, 1858c <bt_gatt_indicate+0x28>
   1856e:	4946      	ldr	r1, [pc, #280]	; (18688 <bt_gatt_indicate+0x124>)
   18570:	f640 33da 	movw	r3, #3034	; 0xbda
   18574:	4a45      	ldr	r2, [pc, #276]	; (1868c <bt_gatt_indicate+0x128>)
   18576:	4846      	ldr	r0, [pc, #280]	; (18690 <bt_gatt_indicate+0x12c>)
   18578:	f012 fc1e 	bl	2adb8 <assert_print>
   1857c:	4845      	ldr	r0, [pc, #276]	; (18694 <bt_gatt_indicate+0x130>)
   1857e:	f012 fc1b 	bl	2adb8 <assert_print>
   18582:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   18586:	4841      	ldr	r0, [pc, #260]	; (1868c <bt_gatt_indicate+0x128>)
   18588:	f012 fc0f 	bl	2adaa <assert_post_action>
   1858c:	684b      	ldr	r3, [r1, #4]
   1858e:	b973      	cbnz	r3, 185ae <bt_gatt_indicate+0x4a>
   18590:	680b      	ldr	r3, [r1, #0]
   18592:	b963      	cbnz	r3, 185ae <bt_gatt_indicate+0x4a>
   18594:	4940      	ldr	r1, [pc, #256]	; (18698 <bt_gatt_indicate+0x134>)
   18596:	f640 33db 	movw	r3, #3035	; 0xbdb
   1859a:	4a3c      	ldr	r2, [pc, #240]	; (1868c <bt_gatt_indicate+0x128>)
   1859c:	483c      	ldr	r0, [pc, #240]	; (18690 <bt_gatt_indicate+0x12c>)
   1859e:	f012 fc0b 	bl	2adb8 <assert_print>
   185a2:	483c      	ldr	r0, [pc, #240]	; (18694 <bt_gatt_indicate+0x130>)
   185a4:	f012 fc08 	bl	2adb8 <assert_print>
   185a8:	f640 31db 	movw	r1, #3035	; 0xbdb
   185ac:	e7eb      	b.n	18586 <bt_gatt_indicate+0x22>
   185ae:	483b      	ldr	r0, [pc, #236]	; (1869c <bt_gatt_indicate+0x138>)
   185b0:	f014 fc7e 	bl	2ceb0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   185b4:	0742      	lsls	r2, r0, #29
   185b6:	d561      	bpl.n	1867c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   185b8:	b115      	cbz	r5, 185c0 <bt_gatt_indicate+0x5c>
   185ba:	7aab      	ldrb	r3, [r5, #10]
   185bc:	2b07      	cmp	r3, #7
   185be:	d160      	bne.n	18682 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   185c0:	6860      	ldr	r0, [r4, #4]
   185c2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   185c4:	f7ff fd0e 	bl	17fe4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   185c8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   185ca:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   185ce:	b33a      	cbz	r2, 18620 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   185d0:	a905      	add	r1, sp, #20
   185d2:	9102      	str	r1, [sp, #8]
   185d4:	4932      	ldr	r1, [pc, #200]	; (186a0 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   185d6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   185d8:	9101      	str	r1, [sp, #4]
   185da:	2101      	movs	r1, #1
   185dc:	9100      	str	r1, [sp, #0]
   185de:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   185e2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   185e4:	f7ff fd46 	bl	18074 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   185e8:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   185ea:	b91b      	cbnz	r3, 185f4 <bt_gatt_indicate+0x90>
			return -ENOENT;
   185ec:	f06f 0001 	mvn.w	r0, #1
}
   185f0:	b00b      	add	sp, #44	; 0x2c
   185f2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   185f4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   185f6:	9b05      	ldr	r3, [sp, #20]
   185f8:	a904      	add	r1, sp, #16
   185fa:	6818      	ldr	r0, [r3, #0]
   185fc:	2300      	movs	r3, #0
   185fe:	f88d 3010 	strb.w	r3, [sp, #16]
   18602:	f642 0303 	movw	r3, #10243	; 0x2803
   18606:	f8ad 3012 	strh.w	r3, [sp, #18]
   1860a:	f013 fcad 	bl	2bf68 <bt_uuid_cmp>
   1860e:	b970      	cbnz	r0, 1862e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18610:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   18612:	68c3      	ldr	r3, [r0, #12]
   18614:	799b      	ldrb	r3, [r3, #6]
   18616:	069b      	lsls	r3, r3, #26
   18618:	d405      	bmi.n	18626 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1861a:	f06f 0015 	mvn.w	r0, #21
   1861e:	e7e7      	b.n	185f0 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   18620:	2800      	cmp	r0, #0
   18622:	d1e8      	bne.n	185f6 <bt_gatt_indicate+0x92>
   18624:	e7e2      	b.n	185ec <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18626:	f014 fe10 	bl	2d24a <bt_gatt_attr_value_handle>
   1862a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1862e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   18632:	b13d      	cbz	r5, 18644 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   18634:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   18636:	4601      	mov	r1, r0
   18638:	4622      	mov	r2, r4
   1863a:	4628      	mov	r0, r5
		params->_ref = 1;
   1863c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1863e:	f7ff feff 	bl	18440 <gatt_indicate>
   18642:	e7d5      	b.n	185f0 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   18644:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18648:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1864a:	2302      	movs	r3, #2
   1864c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18650:	f642 1302 	movw	r3, #10498	; 0x2902
   18654:	f8ad 3012 	strh.w	r3, [sp, #18]
   18658:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1865a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1865c:	9302      	str	r3, [sp, #8]
   1865e:	4b11      	ldr	r3, [pc, #68]	; (186a4 <bt_gatt_indicate+0x140>)
   18660:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18664:	9301      	str	r3, [sp, #4]
   18666:	2301      	movs	r3, #1
   18668:	aa04      	add	r2, sp, #16
   1866a:	9300      	str	r3, [sp, #0]
   1866c:	462b      	mov	r3, r5
	data.ind_params = params;
   1866e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18670:	f88d 5010 	strb.w	r5, [sp, #16]
   18674:	f7ff fcfe 	bl	18074 <bt_gatt_foreach_attr_type>
	return data.err;
   18678:	9807      	ldr	r0, [sp, #28]
   1867a:	e7b9      	b.n	185f0 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1867c:	f06f 000a 	mvn.w	r0, #10
   18680:	e7b6      	b.n	185f0 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   18682:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18686:	e7b3      	b.n	185f0 <bt_gatt_indicate+0x8c>
   18688:	0003a804 	.word	0x0003a804
   1868c:	00037085 	.word	0x00037085
   18690:	00033bc2 	.word	0x00033bc2
   18694:	00037285 	.word	0x00037285
   18698:	0003729b 	.word	0x0003729b
   1869c:	2000c654 	.word	0x2000c654
   186a0:	0002cdf3 	.word	0x0002cdf3
   186a4:	00018939 	.word	0x00018939

000186a8 <sc_process>:
{
   186a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   186aa:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   186ae:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   186b0:	f1a0 0720 	sub.w	r7, r0, #32
   186b4:	4628      	mov	r0, r5
   186b6:	f014 fbfb 	bl	2ceb0 <atomic_get>
   186ba:	0783      	lsls	r3, r0, #30
   186bc:	f3c0 0640 	ubfx	r6, r0, #1, #1
   186c0:	d50e      	bpl.n	186e0 <sc_process+0x38>
   186c2:	4919      	ldr	r1, [pc, #100]	; (18728 <sc_process+0x80>)
   186c4:	f240 532c 	movw	r3, #1324	; 0x52c
   186c8:	4a18      	ldr	r2, [pc, #96]	; (1872c <sc_process+0x84>)
   186ca:	4819      	ldr	r0, [pc, #100]	; (18730 <sc_process+0x88>)
   186cc:	f012 fb74 	bl	2adb8 <assert_print>
   186d0:	4818      	ldr	r0, [pc, #96]	; (18734 <sc_process+0x8c>)
   186d2:	f012 fb71 	bl	2adb8 <assert_print>
   186d6:	f240 512c 	movw	r1, #1324	; 0x52c
   186da:	4814      	ldr	r0, [pc, #80]	; (1872c <sc_process+0x84>)
   186dc:	f012 fb65 	bl	2adaa <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   186e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   186e4:	f06f 0101 	mvn.w	r1, #1
   186e8:	4628      	mov	r0, r5
   186ea:	9301      	str	r3, [sp, #4]
   186ec:	f014 fbee 	bl	2cecc <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   186f0:	4b11      	ldr	r3, [pc, #68]	; (18738 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   186f2:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   186f4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   186f8:	4b10      	ldr	r3, [pc, #64]	; (1873c <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   186fa:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   186fc:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   18700:	ab01      	add	r3, sp, #4
   18702:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   18706:	2304      	movs	r3, #4
	sc->start = 0U;
   18708:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   1870c:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   18710:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18714:	f7ff ff26 	bl	18564 <bt_gatt_indicate>
   18718:	b918      	cbnz	r0, 18722 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1871a:	2102      	movs	r1, #2
   1871c:	4628      	mov	r0, r5
   1871e:	f014 fbca 	bl	2ceb6 <atomic_or>
}
   18722:	b003      	add	sp, #12
   18724:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18726:	bf00      	nop
   18728:	000372b8 	.word	0x000372b8
   1872c:	00037085 	.word	0x00037085
   18730:	00033bc2 	.word	0x00033bc2
   18734:	000372e9 	.word	0x000372e9
   18738:	00032398 	.word	0x00032398
   1873c:	00017ee1 	.word	0x00017ee1

00018740 <update_ccc>:
{
   18740:	b5f0      	push	{r4, r5, r6, r7, lr}
   18742:	b083      	sub	sp, #12
	if (attr->write != bt_gatt_attr_write_ccc) {
   18744:	4b35      	ldr	r3, [pc, #212]	; (1881c <update_ccc+0xdc>)
	struct bt_conn *conn = data->conn;
   18746:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   18748:	6882      	ldr	r2, [r0, #8]
{
   1874a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1874c:	429a      	cmp	r2, r3
{
   1874e:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18750:	d121      	bne.n	18796 <update_ccc+0x56>
	ccc = attr->user_data;
   18752:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   18754:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18756:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   18758:	b1eb      	cbz	r3, 18796 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1875a:	4628      	mov	r0, r5
   1875c:	7831      	ldrb	r1, [r6, #0]
   1875e:	f013 fdd5 	bl	2c30c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18762:	b1c0      	cbz	r0, 18796 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18764:	f44f 7295 	mov.w	r2, #298	; 0x12a
   18768:	4621      	mov	r1, r4
   1876a:	4628      	mov	r0, r5
   1876c:	f014 fdbf 	bl	2d2ee <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18770:	2803      	cmp	r0, #3
   18772:	d114      	bne.n	1879e <update_ccc+0x5e>
				LOG_WRN("CCC %p not writable", attr);
   18774:	466d      	mov	r5, sp
   18776:	b088      	sub	sp, #32
   18778:	466a      	mov	r2, sp
   1877a:	4b29      	ldr	r3, [pc, #164]	; (18820 <update_ccc+0xe0>)
   1877c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18780:	6153      	str	r3, [r2, #20]
   18782:	4b28      	ldr	r3, [pc, #160]	; (18824 <update_ccc+0xe4>)
   18784:	4828      	ldr	r0, [pc, #160]	; (18828 <update_ccc+0xe8>)
   18786:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1878a:	2304      	movs	r3, #4
   1878c:	f842 3f10 	str.w	r3, [r2, #16]!
   18790:	f014 fca7 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18794:	46ad      	mov	sp, r5
}
   18796:	2001      	movs	r0, #1
   18798:	370c      	adds	r7, #12
   1879a:	46bd      	mov	sp, r7
   1879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   1879e:	4631      	mov	r1, r6
   187a0:	4620      	mov	r0, r4
   187a2:	f014 fb09 	bl	2cdb8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   187a6:	4b21      	ldr	r3, [pc, #132]	; (1882c <update_ccc+0xec>)
   187a8:	429e      	cmp	r6, r3
   187aa:	d1f4      	bne.n	18796 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   187ac:	7a28      	ldrb	r0, [r5, #8]
   187ae:	f105 0190 	add.w	r1, r5, #144	; 0x90
   187b2:	f7ff f95d 	bl	17a70 <find_sc_cfg>
	if (!cfg) {
   187b6:	2800      	cmp	r0, #0
   187b8:	d0ed      	beq.n	18796 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   187ba:	8902      	ldrh	r2, [r0, #8]
   187bc:	8943      	ldrh	r3, [r0, #10]
   187be:	ea52 0103 	orrs.w	r1, r2, r3
   187c2:	d0e8      	beq.n	18796 <update_ccc+0x56>
	index = bt_conn_index(conn);
   187c4:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   187c6:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   187c8:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   187ca:	f7fd f935 	bl	15a38 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   187ce:	2318      	movs	r3, #24
   187d0:	4917      	ldr	r1, [pc, #92]	; (18830 <update_ccc+0xf0>)
   187d2:	4a18      	ldr	r2, [pc, #96]	; (18834 <update_ccc+0xf4>)
   187d4:	fb03 1300 	mla	r3, r3, r0, r1
   187d8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   187da:	4a17      	ldr	r2, [pc, #92]	; (18838 <update_ccc+0xf8>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   187dc:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   187de:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   187e0:	1d3a      	adds	r2, r7, #4
   187e2:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   187e4:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   187e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   187ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   187ee:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   187f0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   187f2:	f7ff feb7 	bl	18564 <bt_gatt_indicate>
   187f6:	2800      	cmp	r0, #0
   187f8:	d0cd      	beq.n	18796 <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   187fa:	466c      	mov	r4, sp
   187fc:	b088      	sub	sp, #32
   187fe:	466a      	mov	r2, sp
   18800:	4b0e      	ldr	r3, [pc, #56]	; (1883c <update_ccc+0xfc>)
   18802:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18806:	6153      	str	r3, [r2, #20]
   18808:	4b0d      	ldr	r3, [pc, #52]	; (18840 <update_ccc+0x100>)
   1880a:	4807      	ldr	r0, [pc, #28]	; (18828 <update_ccc+0xe8>)
   1880c:	6193      	str	r3, [r2, #24]
   1880e:	2303      	movs	r3, #3
   18810:	f842 3f10 	str.w	r3, [r2, #16]!
   18814:	f014 fc65 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18818:	46a5      	mov	sp, r4
   1881a:	e7bc      	b.n	18796 <update_ccc+0x56>
   1881c:	00017bdd 	.word	0x00017bdd
   18820:	00037304 	.word	0x00037304
   18824:	000374d6 	.word	0x000374d6
   18828:	00031ba4 	.word	0x00031ba4
   1882c:	2000c8c8 	.word	0x2000c8c8
   18830:	2000e3f4 	.word	0x2000e3f4
   18834:	00032398 	.word	0x00032398
   18838:	0002d21b 	.word	0x0002d21b
   1883c:	0003731c 	.word	0x0003731c
   18840:	000374cb 	.word	0x000374cb

00018844 <gatt_notify>:
{
   18844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18848:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1884a:	6851      	ldr	r1, [r2, #4]
{
   1884c:	4680      	mov	r8, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1884e:	8a4b      	ldrh	r3, [r1, #18]
{
   18850:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   18852:	f003 0314 	and.w	r3, r3, #20
{
   18856:	af00      	add	r7, sp, #0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   18858:	b1a3      	cbz	r3, 18884 <gatt_notify+0x40>
		LOG_WRN("Link is not encrypted");
   1885a:	466c      	mov	r4, sp
   1885c:	b088      	sub	sp, #32
   1885e:	466a      	mov	r2, sp
   18860:	4b30      	ldr	r3, [pc, #192]	; (18924 <gatt_notify+0xe0>)
   18862:	4831      	ldr	r0, [pc, #196]	; (18928 <gatt_notify+0xe4>)
   18864:	6153      	str	r3, [r2, #20]
   18866:	4b31      	ldr	r3, [pc, #196]	; (1892c <gatt_notify+0xe8>)
   18868:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1886c:	6193      	str	r3, [r2, #24]
   1886e:	2303      	movs	r3, #3
   18870:	f842 3f10 	str.w	r3, [r2, #16]!
   18874:	f014 fc35 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18878:	f04f 30ff 	mov.w	r0, #4294967295
   1887c:	46a5      	mov	sp, r4
}
   1887e:	46bd      	mov	sp, r7
   18880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   18884:	2201      	movs	r2, #1
   18886:	f7ff fd11 	bl	182ac <bt_gatt_is_subscribed>
   1888a:	b990      	cbnz	r0, 188b2 <gatt_notify+0x6e>
			LOG_WRN("Device is not subscribed to characteristic");
   1888c:	466c      	mov	r4, sp
   1888e:	b088      	sub	sp, #32
   18890:	466a      	mov	r2, sp
   18892:	4b27      	ldr	r3, [pc, #156]	; (18930 <gatt_notify+0xec>)
   18894:	4824      	ldr	r0, [pc, #144]	; (18928 <gatt_notify+0xe4>)
   18896:	6153      	str	r3, [r2, #20]
   18898:	4b24      	ldr	r3, [pc, #144]	; (1892c <gatt_notify+0xe8>)
   1889a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1889e:	6193      	str	r3, [r2, #24]
   188a0:	2303      	movs	r3, #3
   188a2:	f842 3f10 	str.w	r3, [r2, #16]!
   188a6:	f014 fc1c 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   188aa:	f06f 0015 	mvn.w	r0, #21
   188ae:	46a5      	mov	sp, r4
   188b0:	e7e5      	b.n	1887e <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   188b2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   188b4:	211b      	movs	r1, #27
   188b6:	4640      	mov	r0, r8
   188b8:	3202      	adds	r2, #2
   188ba:	f7fe fc07 	bl	170cc <bt_att_create_pdu>
	if (!buf) {
   188be:	4605      	mov	r5, r0
   188c0:	b990      	cbnz	r0, 188e8 <gatt_notify+0xa4>
		LOG_WRN("No buffer available to send notification");
   188c2:	466c      	mov	r4, sp
   188c4:	b088      	sub	sp, #32
   188c6:	466a      	mov	r2, sp
   188c8:	4b1a      	ldr	r3, [pc, #104]	; (18934 <gatt_notify+0xf0>)
   188ca:	4817      	ldr	r0, [pc, #92]	; (18928 <gatt_notify+0xe4>)
   188cc:	6153      	str	r3, [r2, #20]
   188ce:	4b17      	ldr	r3, [pc, #92]	; (1892c <gatt_notify+0xe8>)
   188d0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   188d4:	6193      	str	r3, [r2, #24]
   188d6:	2303      	movs	r3, #3
   188d8:	f842 3f10 	str.w	r3, [r2, #16]!
   188dc:	f014 fc01 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   188e0:	f06f 000b 	mvn.w	r0, #11
   188e4:	46a5      	mov	sp, r4
   188e6:	e7ca      	b.n	1887e <gatt_notify+0x3a>
   188e8:	f100 0a0c 	add.w	sl, r0, #12
   188ec:	2102      	movs	r1, #2
   188ee:	4650      	mov	r0, sl
   188f0:	f001 fa96 	bl	19e20 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   188f4:	4606      	mov	r6, r0
   188f6:	f826 9b02 	strh.w	r9, [r6], #2
   188fa:	89a1      	ldrh	r1, [r4, #12]
   188fc:	4650      	mov	r0, sl
   188fe:	f001 fa8f 	bl	19e20 <net_buf_simple_add>
   18902:	89a2      	ldrh	r2, [r4, #12]
   18904:	68a1      	ldr	r1, [r4, #8]
   18906:	4630      	mov	r0, r6
   18908:	f017 ff9b 	bl	30842 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1890c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   18910:	4628      	mov	r0, r5
   18912:	2301      	movs	r3, #1
   18914:	f014 fa46 	bl	2cda4 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   18918:	4629      	mov	r1, r5
   1891a:	4640      	mov	r0, r8
   1891c:	f7fe ffd2 	bl	178c4 <bt_att_send>
   18920:	e7ad      	b.n	1887e <gatt_notify+0x3a>
   18922:	bf00      	nop
   18924:	00037211 	.word	0x00037211
   18928:	00031ba4 	.word	0x00031ba4
   1892c:	000375aa 	.word	0x000375aa
   18930:	0003722b 	.word	0x0003722b
   18934:	0003733d 	.word	0x0003733d

00018938 <notify_cb>:
{
   18938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1893c:	4b41      	ldr	r3, [pc, #260]	; (18a44 <notify_cb+0x10c>)
{
   1893e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18940:	6882      	ldr	r2, [r0, #8]
{
   18942:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18944:	429a      	cmp	r2, r3
{
   18946:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18948:	d003      	beq.n	18952 <notify_cb+0x1a>
		return BT_GATT_ITER_CONTINUE;
   1894a:	2001      	movs	r0, #1
}
   1894c:	46bd      	mov	sp, r7
   1894e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ccc = attr->user_data;
   18952:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18954:	4b3c      	ldr	r3, [pc, #240]	; (18a48 <notify_cb+0x110>)
   18956:	429e      	cmp	r6, r3
   18958:	d05a      	beq.n	18a10 <notify_cb+0xd8>
		if (cfg->value != data->type) {
   1895a:	8932      	ldrh	r2, [r6, #8]
   1895c:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1895e:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   18960:	429a      	cmp	r2, r3
   18962:	d1f2      	bne.n	1894a <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18964:	7830      	ldrb	r0, [r6, #0]
   18966:	f7fd f9a7 	bl	15cb8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1896a:	4604      	mov	r4, r0
   1896c:	2800      	cmp	r0, #0
   1896e:	d0ec      	beq.n	1894a <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   18970:	7a83      	ldrb	r3, [r0, #10]
   18972:	2b07      	cmp	r3, #7
   18974:	d005      	beq.n	18982 <notify_cb+0x4a>
			bt_conn_unref(conn);
   18976:	f7fc ff15 	bl	157a4 <bt_conn_unref>
			continue;
   1897a:	e7e6      	b.n	1894a <notify_cb+0x12>
			bt_conn_unref(conn);
   1897c:	f7fc ff12 	bl	157a4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18980:	e7eb      	b.n	1895a <notify_cb+0x22>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18982:	6973      	ldr	r3, [r6, #20]
   18984:	b123      	cbz	r3, 18990 <notify_cb+0x58>
   18986:	4641      	mov	r1, r8
   18988:	4798      	blx	r3
   1898a:	b908      	cbnz	r0, 18990 <notify_cb+0x58>
			bt_conn_unref(conn);
   1898c:	4620      	mov	r0, r4
   1898e:	e7f2      	b.n	18976 <notify_cb+0x3e>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   18990:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   18994:	f003 0314 	and.w	r3, r3, #20
   18998:	b183      	cbz	r3, 189bc <notify_cb+0x84>
			LOG_WRN("Link is not encrypted");
   1899a:	466d      	mov	r5, sp
   1899c:	b088      	sub	sp, #32
   1899e:	466a      	mov	r2, sp
   189a0:	4b2a      	ldr	r3, [pc, #168]	; (18a4c <notify_cb+0x114>)
   189a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   189a6:	6153      	str	r3, [r2, #20]
   189a8:	4b29      	ldr	r3, [pc, #164]	; (18a50 <notify_cb+0x118>)
   189aa:	482a      	ldr	r0, [pc, #168]	; (18a54 <notify_cb+0x11c>)
   189ac:	6193      	str	r3, [r2, #24]
   189ae:	2303      	movs	r3, #3
   189b0:	f842 3f10 	str.w	r3, [r2, #16]!
   189b4:	f014 fb95 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   189b8:	46ad      	mov	sp, r5
   189ba:	e7e7      	b.n	1898c <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   189bc:	89ab      	ldrh	r3, [r5, #12]
   189be:	2b02      	cmp	r3, #2
   189c0:	d114      	bne.n	189ec <notify_cb+0xb4>
   189c2:	8933      	ldrh	r3, [r6, #8]
   189c4:	079a      	lsls	r2, r3, #30
   189c6:	d405      	bmi.n	189d4 <notify_cb+0x9c>
		bt_conn_unref(conn);
   189c8:	4620      	mov	r0, r4
   189ca:	f7fc feeb 	bl	157a4 <bt_conn_unref>
		data->err = 0;
   189ce:	2300      	movs	r3, #0
   189d0:	60ab      	str	r3, [r5, #8]
   189d2:	e7ba      	b.n	1894a <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   189d4:	4620      	mov	r0, r4
   189d6:	692a      	ldr	r2, [r5, #16]
   189d8:	88a9      	ldrh	r1, [r5, #4]
   189da:	f7ff fd31 	bl	18440 <gatt_indicate>
			if (err == 0) {
   189de:	4606      	mov	r6, r0
   189e0:	b978      	cbnz	r0, 18a02 <notify_cb+0xca>
				data->ind_params->_ref++;
   189e2:	692a      	ldr	r2, [r5, #16]
   189e4:	7d93      	ldrb	r3, [r2, #22]
   189e6:	3301      	adds	r3, #1
   189e8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   189ea:	e7ed      	b.n	189c8 <notify_cb+0x90>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   189ec:	2b01      	cmp	r3, #1
   189ee:	d1eb      	bne.n	189c8 <notify_cb+0x90>
   189f0:	8933      	ldrh	r3, [r6, #8]
   189f2:	07db      	lsls	r3, r3, #31
   189f4:	d5e8      	bpl.n	189c8 <notify_cb+0x90>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   189f6:	4620      	mov	r0, r4
   189f8:	692a      	ldr	r2, [r5, #16]
   189fa:	88a9      	ldrh	r1, [r5, #4]
   189fc:	f7ff ff22 	bl	18844 <gatt_notify>
   18a00:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   18a02:	4620      	mov	r0, r4
   18a04:	f7fc fece 	bl	157a4 <bt_conn_unref>
		if (err < 0) {
   18a08:	2e00      	cmp	r6, #0
   18a0a:	dae0      	bge.n	189ce <notify_cb+0x96>
			return BT_GATT_ITER_STOP;
   18a0c:	2000      	movs	r0, #0
   18a0e:	e79d      	b.n	1894c <notify_cb+0x14>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18a10:	4c11      	ldr	r4, [pc, #68]	; (18a58 <notify_cb+0x120>)
   18a12:	4912      	ldr	r1, [pc, #72]	; (18a5c <notify_cb+0x124>)
   18a14:	4620      	mov	r0, r4
   18a16:	f014 fa43 	bl	2cea0 <bt_addr_le_eq>
   18a1a:	2800      	cmp	r0, #0
   18a1c:	d19d      	bne.n	1895a <notify_cb+0x22>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18a1e:	2207      	movs	r2, #7
   18a20:	4621      	mov	r1, r4
   18a22:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   18a26:	f7fd f9c3 	bl	15db0 <bt_conn_lookup_state_le>
			if (!conn) {
   18a2a:	2800      	cmp	r0, #0
   18a2c:	d1a6      	bne.n	1897c <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   18a2e:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   18a30:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   18a32:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18a34:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   18a38:	8853      	ldrh	r3, [r2, #2]
   18a3a:	8812      	ldrh	r2, [r2, #0]
   18a3c:	f7ff f94e 	bl	17cdc <sc_save>
				continue;
   18a40:	e78b      	b.n	1895a <notify_cb+0x22>
   18a42:	bf00      	nop
   18a44:	00017bdd 	.word	0x00017bdd
   18a48:	2000c8c8 	.word	0x2000c8c8
   18a4c:	00037211 	.word	0x00037211
   18a50:	000375c4 	.word	0x000375c4
   18a54:	00031ba4 	.word	0x00031ba4
   18a58:	2000ebcd 	.word	0x2000ebcd
   18a5c:	000358c4 	.word	0x000358c4

00018a60 <bt_gatt_discover>:
{
   18a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a62:	b087      	sub	sp, #28
   18a64:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   18a66:	4605      	mov	r5, r0
{
   18a68:	af02      	add	r7, sp, #8
	__ASSERT(conn, "invalid parameters\n");
   18a6a:	b970      	cbnz	r0, 18a8a <bt_gatt_discover+0x2a>
   18a6c:	4976      	ldr	r1, [pc, #472]	; (18c48 <bt_gatt_discover+0x1e8>)
   18a6e:	f241 13a4 	movw	r3, #4516	; 0x11a4
   18a72:	4a76      	ldr	r2, [pc, #472]	; (18c4c <bt_gatt_discover+0x1ec>)
   18a74:	4876      	ldr	r0, [pc, #472]	; (18c50 <bt_gatt_discover+0x1f0>)
   18a76:	f012 f99f 	bl	2adb8 <assert_print>
   18a7a:	4876      	ldr	r0, [pc, #472]	; (18c54 <bt_gatt_discover+0x1f4>)
   18a7c:	f012 f99c 	bl	2adb8 <assert_print>
   18a80:	f241 11a4 	movw	r1, #4516	; 0x11a4
	__ASSERT(params && params->func, "invalid parameters\n");
   18a84:	4871      	ldr	r0, [pc, #452]	; (18c4c <bt_gatt_discover+0x1ec>)
   18a86:	f012 f990 	bl	2adaa <assert_post_action>
   18a8a:	b109      	cbz	r1, 18a90 <bt_gatt_discover+0x30>
   18a8c:	684b      	ldr	r3, [r1, #4]
   18a8e:	b963      	cbnz	r3, 18aaa <bt_gatt_discover+0x4a>
   18a90:	4971      	ldr	r1, [pc, #452]	; (18c58 <bt_gatt_discover+0x1f8>)
   18a92:	f241 13a5 	movw	r3, #4517	; 0x11a5
   18a96:	4a6d      	ldr	r2, [pc, #436]	; (18c4c <bt_gatt_discover+0x1ec>)
   18a98:	486d      	ldr	r0, [pc, #436]	; (18c50 <bt_gatt_discover+0x1f0>)
   18a9a:	f012 f98d 	bl	2adb8 <assert_print>
   18a9e:	486d      	ldr	r0, [pc, #436]	; (18c54 <bt_gatt_discover+0x1f4>)
   18aa0:	f012 f98a 	bl	2adb8 <assert_print>
   18aa4:	f241 11a5 	movw	r1, #4517	; 0x11a5
   18aa8:	e7ec      	b.n	18a84 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle && params->end_handle),
   18aaa:	890a      	ldrh	r2, [r1, #8]
   18aac:	b10a      	cbz	r2, 18ab2 <bt_gatt_discover+0x52>
   18aae:	89cb      	ldrh	r3, [r1, #14]
   18ab0:	b963      	cbnz	r3, 18acc <bt_gatt_discover+0x6c>
   18ab2:	496a      	ldr	r1, [pc, #424]	; (18c5c <bt_gatt_discover+0x1fc>)
   18ab4:	f241 13a6 	movw	r3, #4518	; 0x11a6
   18ab8:	4a64      	ldr	r2, [pc, #400]	; (18c4c <bt_gatt_discover+0x1ec>)
   18aba:	4865      	ldr	r0, [pc, #404]	; (18c50 <bt_gatt_discover+0x1f0>)
   18abc:	f012 f97c 	bl	2adb8 <assert_print>
   18ac0:	4864      	ldr	r0, [pc, #400]	; (18c54 <bt_gatt_discover+0x1f4>)
   18ac2:	f012 f979 	bl	2adb8 <assert_print>
   18ac6:	f241 11a6 	movw	r1, #4518	; 0x11a6
   18aca:	e7db      	b.n	18a84 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle <= params->end_handle),
   18acc:	429a      	cmp	r2, r3
   18ace:	d90c      	bls.n	18aea <bt_gatt_discover+0x8a>
   18ad0:	4963      	ldr	r1, [pc, #396]	; (18c60 <bt_gatt_discover+0x200>)
   18ad2:	f241 13a8 	movw	r3, #4520	; 0x11a8
   18ad6:	4a5d      	ldr	r2, [pc, #372]	; (18c4c <bt_gatt_discover+0x1ec>)
   18ad8:	485d      	ldr	r0, [pc, #372]	; (18c50 <bt_gatt_discover+0x1f0>)
   18ada:	f012 f96d 	bl	2adb8 <assert_print>
   18ade:	485d      	ldr	r0, [pc, #372]	; (18c54 <bt_gatt_discover+0x1f4>)
   18ae0:	f012 f96a 	bl	2adb8 <assert_print>
   18ae4:	f241 11a8 	movw	r1, #4520	; 0x11a8
   18ae8:	e7cc      	b.n	18a84 <bt_gatt_discover+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   18aea:	7a83      	ldrb	r3, [r0, #10]
   18aec:	2b07      	cmp	r3, #7
   18aee:	f040 80a8 	bne.w	18c42 <bt_gatt_discover+0x1e2>
	switch (params->type) {
   18af2:	7c0b      	ldrb	r3, [r1, #16]
   18af4:	2b06      	cmp	r3, #6
   18af6:	f200 809d 	bhi.w	18c34 <bt_gatt_discover+0x1d4>
   18afa:	e8df f003 	tbb	[pc, r3]
   18afe:	0404      	.short	0x0404
   18b00:	94665e5e 	.word	0x94665e5e
   18b04:	33          	.byte	0x33
   18b05:	00          	.byte	0x00
		if (params->uuid) {
   18b06:	680b      	ldr	r3, [r1, #0]
   18b08:	b323      	cbz	r3, 18b54 <bt_gatt_discover+0xf4>
	switch (params->uuid->type) {
   18b0a:	781b      	ldrb	r3, [r3, #0]
   18b0c:	b19b      	cbz	r3, 18b36 <bt_gatt_discover+0xd6>
   18b0e:	2b02      	cmp	r3, #2
   18b10:	d01e      	beq.n	18b50 <bt_gatt_discover+0xf0>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   18b12:	466c      	mov	r4, sp
   18b14:	b088      	sub	sp, #32
   18b16:	aa02      	add	r2, sp, #8
   18b18:	4952      	ldr	r1, [pc, #328]	; (18c64 <bt_gatt_discover+0x204>)
   18b1a:	6151      	str	r1, [r2, #20]
   18b1c:	4952      	ldr	r1, [pc, #328]	; (18c68 <bt_gatt_discover+0x208>)
	switch (params->type) {
   18b1e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid discovery type: %u", params->type);
   18b22:	2304      	movs	r3, #4
   18b24:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18b28:	4850      	ldr	r0, [pc, #320]	; (18c6c <bt_gatt_discover+0x20c>)
   18b2a:	f842 3f10 	str.w	r3, [r2, #16]!
   18b2e:	f014 fad8 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18b32:	46a5      	mov	sp, r4
	return -EINVAL;
   18b34:	e054      	b.n	18be0 <bt_gatt_discover+0x180>
		len += BT_UUID_SIZE_16;
   18b36:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   18b38:	9301      	str	r3, [sp, #4]
   18b3a:	2306      	movs	r3, #6
   18b3c:	4622      	mov	r2, r4
   18b3e:	9300      	str	r3, [sp, #0]
   18b40:	494b      	ldr	r1, [pc, #300]	; (18c70 <bt_gatt_discover+0x210>)
   18b42:	4b4c      	ldr	r3, [pc, #304]	; (18c74 <bt_gatt_discover+0x214>)
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   18b44:	4628      	mov	r0, r5
   18b46:	f014 fb16 	bl	2d176 <gatt_req_send.constprop.0>
}
   18b4a:	3714      	adds	r7, #20
   18b4c:	46bd      	mov	sp, r7
   18b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (params->uuid->type) {
   18b50:	2316      	movs	r3, #22
   18b52:	e7f1      	b.n	18b38 <bt_gatt_discover+0xd8>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   18b54:	2310      	movs	r3, #16
   18b56:	2104      	movs	r1, #4
   18b58:	4622      	mov	r2, r4
   18b5a:	e9cd 3100 	strd	r3, r1, [sp]
   18b5e:	4b46      	ldr	r3, [pc, #280]	; (18c78 <bt_gatt_discover+0x218>)
   18b60:	4946      	ldr	r1, [pc, #280]	; (18c7c <bt_gatt_discover+0x21c>)
   18b62:	e7ef      	b.n	18b44 <bt_gatt_discover+0xe4>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   18b64:	6808      	ldr	r0, [r1, #0]
   18b66:	2800      	cmp	r0, #0
   18b68:	d03a      	beq.n	18be0 <bt_gatt_discover+0x180>
   18b6a:	7806      	ldrb	r6, [r0, #0]
   18b6c:	2e00      	cmp	r6, #0
   18b6e:	d137      	bne.n	18be0 <bt_gatt_discover+0x180>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   18b70:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   18b74:	4639      	mov	r1, r7
   18b76:	703e      	strb	r6, [r7, #0]
   18b78:	807b      	strh	r3, [r7, #2]
   18b7a:	f013 f9f5 	bl	2bf68 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   18b7e:	b1e0      	cbz	r0, 18bba <bt_gatt_discover+0x15a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   18b80:	f642 1302 	movw	r3, #10498	; 0x2902
   18b84:	6820      	ldr	r0, [r4, #0]
   18b86:	713e      	strb	r6, [r7, #4]
   18b88:	80fb      	strh	r3, [r7, #6]
   18b8a:	1d39      	adds	r1, r7, #4
   18b8c:	f013 f9ec 	bl	2bf68 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   18b90:	b198      	cbz	r0, 18bba <bt_gatt_discover+0x15a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   18b92:	f642 1303 	movw	r3, #10499	; 0x2903
   18b96:	6820      	ldr	r0, [r4, #0]
   18b98:	723e      	strb	r6, [r7, #8]
   18b9a:	817b      	strh	r3, [r7, #10]
   18b9c:	f107 0108 	add.w	r1, r7, #8
   18ba0:	f013 f9e2 	bl	2bf68 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   18ba4:	b148      	cbz	r0, 18bba <bt_gatt_discover+0x15a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   18ba6:	f642 1304 	movw	r3, #10500	; 0x2904
   18baa:	6820      	ldr	r0, [r4, #0]
   18bac:	733e      	strb	r6, [r7, #12]
   18bae:	81fb      	strh	r3, [r7, #14]
   18bb0:	f107 010c 	add.w	r1, r7, #12
   18bb4:	f013 f9d8 	bl	2bf68 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   18bb8:	b990      	cbnz	r0, 18be0 <bt_gatt_discover+0x180>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   18bba:	2308      	movs	r3, #8
   18bbc:	2204      	movs	r2, #4
   18bbe:	4930      	ldr	r1, [pc, #192]	; (18c80 <bt_gatt_discover+0x220>)
   18bc0:	e9cd 3200 	strd	r3, r2, [sp]
   18bc4:	4622      	mov	r2, r4
   18bc6:	4b2f      	ldr	r3, [pc, #188]	; (18c84 <bt_gatt_discover+0x224>)
   18bc8:	e7bc      	b.n	18b44 <bt_gatt_discover+0xe4>
		if (params->uuid &&
   18bca:	6808      	ldr	r0, [r1, #0]
   18bcc:	b358      	cbz	r0, 18c26 <bt_gatt_discover+0x1c6>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   18bce:	2600      	movs	r6, #0
   18bd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18bd4:	4639      	mov	r1, r7
   18bd6:	703e      	strb	r6, [r7, #0]
   18bd8:	807b      	strh	r3, [r7, #2]
   18bda:	f013 f9c5 	bl	2bf68 <bt_uuid_cmp>
		if (params->uuid &&
   18bde:	b910      	cbnz	r0, 18be6 <bt_gatt_discover+0x186>
			return -EINVAL;
   18be0:	f06f 0015 	mvn.w	r0, #21
   18be4:	e7b1      	b.n	18b4a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   18be6:	f642 0301 	movw	r3, #10241	; 0x2801
   18bea:	6820      	ldr	r0, [r4, #0]
   18bec:	713e      	strb	r6, [r7, #4]
   18bee:	80fb      	strh	r3, [r7, #6]
   18bf0:	1d39      	adds	r1, r7, #4
   18bf2:	f013 f9b9 	bl	2bf68 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   18bf6:	2800      	cmp	r0, #0
   18bf8:	d0f2      	beq.n	18be0 <bt_gatt_discover+0x180>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   18bfa:	f642 0302 	movw	r3, #10242	; 0x2802
   18bfe:	6820      	ldr	r0, [r4, #0]
   18c00:	723e      	strb	r6, [r7, #8]
   18c02:	817b      	strh	r3, [r7, #10]
   18c04:	f107 0108 	add.w	r1, r7, #8
   18c08:	f013 f9ae 	bl	2bf68 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   18c0c:	2800      	cmp	r0, #0
   18c0e:	d0e7      	beq.n	18be0 <bt_gatt_discover+0x180>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   18c10:	f642 0303 	movw	r3, #10243	; 0x2803
   18c14:	6820      	ldr	r0, [r4, #0]
   18c16:	733e      	strb	r6, [r7, #12]
   18c18:	81fb      	strh	r3, [r7, #14]
   18c1a:	f107 010c 	add.w	r1, r7, #12
   18c1e:	f013 f9a3 	bl	2bf68 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   18c22:	2800      	cmp	r0, #0
   18c24:	d0dc      	beq.n	18be0 <bt_gatt_discover+0x180>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   18c26:	2304      	movs	r3, #4
   18c28:	4622      	mov	r2, r4
   18c2a:	e9cd 3300 	strd	r3, r3, [sp]
   18c2e:	4916      	ldr	r1, [pc, #88]	; (18c88 <bt_gatt_discover+0x228>)
   18c30:	4b16      	ldr	r3, [pc, #88]	; (18c8c <bt_gatt_discover+0x22c>)
   18c32:	e787      	b.n	18b44 <bt_gatt_discover+0xe4>
		LOG_ERR("Invalid discovery type: %u", params->type);
   18c34:	466c      	mov	r4, sp
   18c36:	b088      	sub	sp, #32
   18c38:	aa02      	add	r2, sp, #8
   18c3a:	4915      	ldr	r1, [pc, #84]	; (18c90 <bt_gatt_discover+0x230>)
   18c3c:	6151      	str	r1, [r2, #20]
   18c3e:	4915      	ldr	r1, [pc, #84]	; (18c94 <bt_gatt_discover+0x234>)
   18c40:	e76d      	b.n	18b1e <bt_gatt_discover+0xbe>
		return -ENOTCONN;
   18c42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18c46:	e780      	b.n	18b4a <bt_gatt_discover+0xea>
   18c48:	00035d7c 	.word	0x00035d7c
   18c4c:	00037085 	.word	0x00037085
   18c50:	00033bc2 	.word	0x00033bc2
   18c54:	00037285 	.word	0x00037285
   18c58:	0003736a 	.word	0x0003736a
   18c5c:	00037381 	.word	0x00037381
   18c60:	000373ae 	.word	0x000373ae
   18c64:	000373db 	.word	0x000373db
   18c68:	00037570 	.word	0x00037570
   18c6c:	00031ba4 	.word	0x00031ba4
   18c70:	0002d363 	.word	0x0002d363
   18c74:	0002d10d 	.word	0x0002d10d
   18c78:	0002cf0f 	.word	0x0002cf0f
   18c7c:	00018c99 	.word	0x00018c99
   18c80:	00018dc5 	.word	0x00018dc5
   18c84:	0002cf3f 	.word	0x0002cf3f
   18c88:	00019175 	.word	0x00019175
   18c8c:	0002cef7 	.word	0x0002cef7
   18c90:	000373f4 	.word	0x000373f4
   18c94:	0003757f 	.word	0x0003757f

00018c98 <gatt_read_group_rsp>:
{
   18c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c9c:	b08f      	sub	sp, #60	; 0x3c
   18c9e:	af00      	add	r7, sp, #0
   18ca0:	4606      	mov	r6, r0
   18ca2:	4691      	mov	r9, r2
   18ca4:	f8d7 8060 	ldr.w	r8, [r7, #96]	; 0x60
	if (err) {
   18ca8:	b141      	cbz	r1, 18cbc <gatt_read_group_rsp+0x24>
		params->func(conn, NULL, params);
   18caa:	4642      	mov	r2, r8
   18cac:	2100      	movs	r1, #0
   18cae:	f8d8 3004 	ldr.w	r3, [r8, #4]
	params->func(conn, NULL, params);
   18cb2:	4798      	blx	r3
}
   18cb4:	373c      	adds	r7, #60	; 0x3c
   18cb6:	46bd      	mov	sp, r7
   18cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   18cbc:	7810      	ldrb	r0, [r2, #0]
   18cbe:	2806      	cmp	r0, #6
   18cc0:	d019      	beq.n	18cf6 <gatt_read_group_rsp+0x5e>
   18cc2:	2814      	cmp	r0, #20
   18cc4:	d016      	beq.n	18cf4 <gatt_read_group_rsp+0x5c>
		LOG_ERR("Invalid data len %u", rsp->len);
   18cc6:	466c      	mov	r4, sp
   18cc8:	b088      	sub	sp, #32
   18cca:	466a      	mov	r2, sp
   18ccc:	4b3a      	ldr	r3, [pc, #232]	; (18db8 <gatt_read_group_rsp+0x120>)
   18cce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18cd2:	6153      	str	r3, [r2, #20]
   18cd4:	4b39      	ldr	r3, [pc, #228]	; (18dbc <gatt_read_group_rsp+0x124>)
	switch (rsp->len) {
   18cd6:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid data len %u", rsp->len);
   18cda:	2304      	movs	r3, #4
   18cdc:	4838      	ldr	r0, [pc, #224]	; (18dc0 <gatt_read_group_rsp+0x128>)
   18cde:	f842 3f10 	str.w	r3, [r2, #16]!
   18ce2:	f014 f9fe 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18ce6:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   18ce8:	4642      	mov	r2, r8
   18cea:	2100      	movs	r1, #0
   18cec:	4630      	mov	r0, r6
   18cee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18cf2:	e7de      	b.n	18cb2 <gatt_read_group_rsp+0x1a>
	switch (rsp->len) {
   18cf4:	2102      	movs	r1, #2
	uint16_t start_handle, end_handle = 0U;
   18cf6:	2500      	movs	r5, #0
		struct bt_gatt_attr attr = {};
   18cf8:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   18cfa:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   18cfc:	7439      	strb	r1, [r7, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   18cfe:	b29c      	uxth	r4, r3
   18d00:	f109 0b01 	add.w	fp, r9, #1
   18d04:	f899 3000 	ldrb.w	r3, [r9]
   18d08:	42a3      	cmp	r3, r4
   18d0a:	d909      	bls.n	18d20 <gatt_read_group_rsp+0x88>
	if (length == 0U && end_handle) {
   18d0c:	2c00      	cmp	r4, #0
   18d0e:	d1eb      	bne.n	18ce8 <gatt_read_group_rsp+0x50>
   18d10:	2d00      	cmp	r5, #0
   18d12:	d0e9      	beq.n	18ce8 <gatt_read_group_rsp+0x50>
	gatt_discover_next(conn, handle, params);
   18d14:	4642      	mov	r2, r8
   18d16:	4629      	mov	r1, r5
   18d18:	4630      	mov	r0, r6
   18d1a:	f014 fb04 	bl	2d326 <gatt_discover_next>
   18d1e:	e7c9      	b.n	18cb4 <gatt_read_group_rsp+0x1c>
		struct bt_gatt_attr attr = {};
   18d20:	2214      	movs	r2, #20
   18d22:	2100      	movs	r1, #0
   18d24:	f107 0024 	add.w	r0, r7, #36	; 0x24
   18d28:	f017 fdab 	bl	30882 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   18d2c:	f8bb 2000 	ldrh.w	r2, [fp]
   18d30:	b293      	uxth	r3, r2
		if (!start_handle) {
   18d32:	2b00      	cmp	r3, #0
   18d34:	d0d8      	beq.n	18ce8 <gatt_read_group_rsp+0x50>
		end_handle = sys_le16_to_cpu(data->end_handle);
   18d36:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   18d3a:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   18d3c:	2d00      	cmp	r5, #0
   18d3e:	d0d3      	beq.n	18ce8 <gatt_read_group_rsp+0x50>
   18d40:	42ab      	cmp	r3, r5
   18d42:	d8d1      	bhi.n	18ce8 <gatt_read_group_rsp+0x50>
		switch (u.uuid.type) {
   18d44:	7c3b      	ldrb	r3, [r7, #16]
   18d46:	b32b      	cbz	r3, 18d94 <gatt_read_group_rsp+0xfc>
   18d48:	2b02      	cmp	r3, #2
   18d4a:	d027      	beq.n	18d9c <gatt_read_group_rsp+0x104>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   18d4c:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
   18d50:	81b9      	strh	r1, [r7, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   18d52:	2b00      	cmp	r3, #0
   18d54:	f642 0301 	movw	r3, #10241	; 0x2801
   18d58:	bf08      	it	eq
   18d5a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   18d5e:	80fb      	strh	r3, [r7, #6]
		value.uuid = &u.uuid;
   18d60:	f107 0310 	add.w	r3, r7, #16
   18d64:	60bb      	str	r3, [r7, #8]
		attr.uuid = &uuid_svc.uuid;
   18d66:	1d3b      	adds	r3, r7, #4
   18d68:	627b      	str	r3, [r7, #36]	; 0x24
		attr.user_data = &value;
   18d6a:	f107 0308 	add.w	r3, r7, #8
		attr.handle = start_handle;
   18d6e:	86ba      	strh	r2, [r7, #52]	; 0x34
		attr.user_data = &value;
   18d70:	633b      	str	r3, [r7, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18d72:	4642      	mov	r2, r8
   18d74:	4630      	mov	r0, r6
   18d76:	f8d8 3004 	ldr.w	r3, [r8, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   18d7a:	f887 a004 	strb.w	sl, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18d7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
   18d82:	4798      	blx	r3
   18d84:	2800      	cmp	r0, #0
   18d86:	d095      	beq.n	18cb4 <gatt_read_group_rsp+0x1c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   18d88:	f899 3000 	ldrb.w	r3, [r9]
   18d8c:	1ae4      	subs	r4, r4, r3
   18d8e:	b2a4      	uxth	r4, r4
   18d90:	449b      	add	fp, r3
   18d92:	e7b7      	b.n	18d04 <gatt_read_group_rsp+0x6c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   18d94:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   18d98:	827b      	strh	r3, [r7, #18]
			break;
   18d9a:	e7d7      	b.n	18d4c <gatt_read_group_rsp+0xb4>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   18d9c:	f10b 0304 	add.w	r3, fp, #4
   18da0:	f107 0011 	add.w	r0, r7, #17
   18da4:	f10b 0c14 	add.w	ip, fp, #20
   18da8:	f853 eb04 	ldr.w	lr, [r3], #4
   18dac:	4563      	cmp	r3, ip
   18dae:	f840 eb04 	str.w	lr, [r0], #4
   18db2:	d1f9      	bne.n	18da8 <gatt_read_group_rsp+0x110>
   18db4:	e7ca      	b.n	18d4c <gatt_read_group_rsp+0xb4>
   18db6:	bf00      	nop
   18db8:	00037413 	.word	0x00037413
   18dbc:	00037562 	.word	0x00037562
   18dc0:	00031ba4 	.word	0x00031ba4

00018dc4 <gatt_read_type_rsp>:
{
   18dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dc8:	b093      	sub	sp, #76	; 0x4c
   18dca:	af02      	add	r7, sp, #8
   18dcc:	4680      	mov	r8, r0
   18dce:	4616      	mov	r6, r2
   18dd0:	6ebd      	ldr	r5, [r7, #104]	; 0x68
	if (err) {
   18dd2:	b121      	cbz	r1, 18dde <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   18dd4:	462a      	mov	r2, r5
   18dd6:	2100      	movs	r1, #0
   18dd8:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
   18dda:	4798      	blx	r3
	if (!handle) {
   18ddc:	e06e      	b.n	18ebc <gatt_read_type_rsp+0xf8>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   18dde:	7c2a      	ldrb	r2, [r5, #16]
   18de0:	2a02      	cmp	r2, #2
   18de2:	f040 808c 	bne.w	18efe <gatt_read_type_rsp+0x13a>
	switch (rsp->len) {
   18de6:	7830      	ldrb	r0, [r6, #0]
   18de8:	2806      	cmp	r0, #6
   18dea:	d017      	beq.n	18e1c <gatt_read_type_rsp+0x58>
   18dec:	2808      	cmp	r0, #8
   18dee:	d016      	beq.n	18e1e <gatt_read_type_rsp+0x5a>
		LOG_ERR("Invalid data len %u", rsp->len);
   18df0:	466c      	mov	r4, sp
   18df2:	b088      	sub	sp, #32
   18df4:	aa02      	add	r2, sp, #8
   18df6:	4ba9      	ldr	r3, [pc, #676]	; (1909c <gatt_read_type_rsp+0x2d8>)
   18df8:	6153      	str	r3, [r2, #20]
   18dfa:	4ba9      	ldr	r3, [pc, #676]	; (190a0 <gatt_read_type_rsp+0x2dc>)
	switch (rsp->len) {
   18dfc:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid data len %u", rsp->len);
   18e00:	2304      	movs	r3, #4
   18e02:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18e06:	48a7      	ldr	r0, [pc, #668]	; (190a4 <gatt_read_type_rsp+0x2e0>)
   18e08:	f842 3f10 	str.w	r3, [r2, #16]!
   18e0c:	f014 f969 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   18e10:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   18e12:	462a      	mov	r2, r5
   18e14:	2100      	movs	r1, #0
   18e16:	4640      	mov	r0, r8
   18e18:	686b      	ldr	r3, [r5, #4]
   18e1a:	e7de      	b.n	18dda <gatt_read_type_rsp+0x16>
	switch (rsp->len) {
   18e1c:	4611      	mov	r1, r2
	uint16_t handle = 0U;
   18e1e:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   18e22:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   18e24:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   18e26:	b2a4      	uxth	r4, r4
   18e28:	f106 0b01 	add.w	fp, r6, #1
   18e2c:	7833      	ldrb	r3, [r6, #0]
   18e2e:	42a3      	cmp	r3, r4
   18e30:	d90a      	bls.n	18e48 <gatt_read_type_rsp+0x84>
	if (length == 0U && handle) {
   18e32:	2c00      	cmp	r4, #0
   18e34:	d1ed      	bne.n	18e12 <gatt_read_type_rsp+0x4e>
   18e36:	f1b9 0f00 	cmp.w	r9, #0
   18e3a:	d0ea      	beq.n	18e12 <gatt_read_type_rsp+0x4e>
	gatt_discover_next(conn, handle, params);
   18e3c:	462a      	mov	r2, r5
   18e3e:	4649      	mov	r1, r9
   18e40:	4640      	mov	r0, r8
   18e42:	f014 fa70 	bl	2d326 <gatt_discover_next>
   18e46:	e039      	b.n	18ebc <gatt_read_type_rsp+0xf8>
		handle = sys_le16_to_cpu(data->handle);
   18e48:	f8bb a000 	ldrh.w	sl, [fp]
   18e4c:	fa1f f98a 	uxth.w	r9, sl
		if (!handle) {
   18e50:	f1b9 0f00 	cmp.w	r9, #0
   18e54:	d0dd      	beq.n	18e12 <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   18e56:	f8bb 0002 	ldrh.w	r0, [fp, #2]
		switch (u.uuid.type) {
   18e5a:	7e3a      	ldrb	r2, [r7, #24]
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   18e5c:	82b8      	strh	r0, [r7, #20]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   18e5e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   18e62:	82f9      	strh	r1, [r7, #22]
		switch (u.uuid.type) {
   18e64:	b16a      	cbz	r2, 18e82 <gatt_read_type_rsp+0xbe>
   18e66:	2a02      	cmp	r2, #2
   18e68:	d016      	beq.n	18e98 <gatt_read_type_rsp+0xd4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   18e6a:	6829      	ldr	r1, [r5, #0]
   18e6c:	b351      	cbz	r1, 18ec4 <gatt_read_type_rsp+0x100>
   18e6e:	f107 0018 	add.w	r0, r7, #24
   18e72:	f013 f879 	bl	2bf68 <bt_uuid_cmp>
   18e76:	b328      	cbz	r0, 18ec4 <gatt_read_type_rsp+0x100>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   18e78:	7833      	ldrb	r3, [r6, #0]
   18e7a:	1ae4      	subs	r4, r4, r3
   18e7c:	b2a4      	uxth	r4, r4
   18e7e:	449b      	add	fp, r3
   18e80:	e7d4      	b.n	18e2c <gatt_read_type_rsp+0x68>
			value.uuid = &u.uuid;
   18e82:	f107 0218 	add.w	r2, r7, #24
   18e86:	613a      	str	r2, [r7, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   18e88:	f89b 2006 	ldrb.w	r2, [fp, #6]
   18e8c:	f89b 1007 	ldrb.w	r1, [fp, #7]
   18e90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18e94:	837a      	strh	r2, [r7, #26]
			break;
   18e96:	e7e8      	b.n	18e6a <gatt_read_type_rsp+0xa6>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   18e98:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   18e9a:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   18e9c:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   18e9e:	f8a5 a008 	strh.w	sl, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   18ea2:	4640      	mov	r0, r8
   18ea4:	9201      	str	r2, [sp, #4]
   18ea6:	9300      	str	r3, [sp, #0]
   18ea8:	462a      	mov	r2, r5
   18eaa:	4b7f      	ldr	r3, [pc, #508]	; (190a8 <gatt_read_type_rsp+0x2e4>)
   18eac:	497f      	ldr	r1, [pc, #508]	; (190ac <gatt_read_type_rsp+0x2e8>)
   18eae:	f014 f962 	bl	2d176 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   18eb2:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
   18eb6:	f1b9 0f00 	cmp.w	r9, #0
   18eba:	d1bf      	bne.n	18e3c <gatt_read_type_rsp+0x78>
}
   18ebc:	3744      	adds	r7, #68	; 0x44
   18ebe:	46bd      	mov	sp, r7
   18ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   18ec4:	f04f 0300 	mov.w	r3, #0
   18ec8:	733b      	strb	r3, [r7, #12]
   18eca:	f642 0302 	movw	r3, #10242	; 0x2802
		attr = (struct bt_gatt_attr) {
   18ece:	2210      	movs	r2, #16
   18ed0:	2100      	movs	r1, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   18ed2:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   18ed4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   18ed8:	f017 fcd3 	bl	30882 <memset>
   18edc:	f107 020c 	add.w	r2, r7, #12
   18ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
   18ee2:	f107 0210 	add.w	r2, r7, #16
   18ee6:	63ba      	str	r2, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18ee8:	4640      	mov	r0, r8
   18eea:	462a      	mov	r2, r5
   18eec:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   18eee:	f8a7 a03c 	strh.w	sl, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18ef2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18ef6:	4798      	blx	r3
   18ef8:	2800      	cmp	r0, #0
   18efa:	d1bd      	bne.n	18e78 <gatt_read_type_rsp+0xb4>
   18efc:	e7de      	b.n	18ebc <gatt_read_type_rsp+0xf8>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   18efe:	2a03      	cmp	r2, #3
   18f00:	d169      	bne.n	18fd6 <gatt_read_type_rsp+0x212>
	switch (rsp->len) {
   18f02:	7830      	ldrb	r0, [r6, #0]
   18f04:	2807      	cmp	r0, #7
   18f06:	d009      	beq.n	18f1c <gatt_read_type_rsp+0x158>
   18f08:	2815      	cmp	r0, #21
   18f0a:	d006      	beq.n	18f1a <gatt_read_type_rsp+0x156>
		LOG_ERR("Invalid data len %u", rsp->len);
   18f0c:	466c      	mov	r4, sp
   18f0e:	b088      	sub	sp, #32
   18f10:	aa02      	add	r2, sp, #8
   18f12:	4b62      	ldr	r3, [pc, #392]	; (1909c <gatt_read_type_rsp+0x2d8>)
   18f14:	6153      	str	r3, [r2, #20]
   18f16:	4b66      	ldr	r3, [pc, #408]	; (190b0 <gatt_read_type_rsp+0x2ec>)
   18f18:	e770      	b.n	18dfc <gatt_read_type_rsp+0x38>
	switch (rsp->len) {
   18f1a:	2102      	movs	r1, #2
	uint16_t handle = 0U;
   18f1c:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   18f20:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   18f22:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   18f24:	b2a4      	uxth	r4, r4
   18f26:	f106 0a01 	add.w	sl, r6, #1
   18f2a:	7833      	ldrb	r3, [r6, #0]
   18f2c:	42a3      	cmp	r3, r4
   18f2e:	d880      	bhi.n	18e32 <gatt_read_type_rsp+0x6e>
		handle = sys_le16_to_cpu(data->handle);
   18f30:	f8ba b000 	ldrh.w	fp, [sl]
   18f34:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   18f38:	f1b9 0f00 	cmp.w	r9, #0
   18f3c:	f43f af69 	beq.w	18e12 <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
   18f40:	7e3b      	ldrb	r3, [r7, #24]
   18f42:	b16b      	cbz	r3, 18f60 <gatt_read_type_rsp+0x19c>
   18f44:	2b02      	cmp	r3, #2
   18f46:	d013      	beq.n	18f70 <gatt_read_type_rsp+0x1ac>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   18f48:	6829      	ldr	r1, [r5, #0]
   18f4a:	b1f1      	cbz	r1, 18f8a <gatt_read_type_rsp+0x1c6>
   18f4c:	f107 0018 	add.w	r0, r7, #24
   18f50:	f013 f80a 	bl	2bf68 <bt_uuid_cmp>
   18f54:	b1c8      	cbz	r0, 18f8a <gatt_read_type_rsp+0x1c6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   18f56:	7833      	ldrb	r3, [r6, #0]
   18f58:	1ae4      	subs	r4, r4, r3
   18f5a:	b2a4      	uxth	r4, r4
   18f5c:	449a      	add	sl, r3
   18f5e:	e7e4      	b.n	18f2a <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   18f60:	f89a 3005 	ldrb.w	r3, [sl, #5]
   18f64:	f89a 2006 	ldrb.w	r2, [sl, #6]
   18f68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18f6c:	837b      	strh	r3, [r7, #26]
			break;
   18f6e:	e7eb      	b.n	18f48 <gatt_read_type_rsp+0x184>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   18f70:	f10a 0305 	add.w	r3, sl, #5
   18f74:	f107 0219 	add.w	r2, r7, #25
   18f78:	f10a 0115 	add.w	r1, sl, #21
   18f7c:	f853 0b04 	ldr.w	r0, [r3], #4
   18f80:	428b      	cmp	r3, r1
   18f82:	f842 0b04 	str.w	r0, [r2], #4
   18f86:	d1f9      	bne.n	18f7c <gatt_read_type_rsp+0x1b8>
   18f88:	e7de      	b.n	18f48 <gatt_read_type_rsp+0x184>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   18f8a:	f89a 3002 	ldrb.w	r3, [sl, #2]
   18f8e:	f8ba 2003 	ldrh.w	r2, [sl, #3]
   18f92:	75bb      	strb	r3, [r7, #22]
			.uuid = BT_UUID_GATT_CHRC,
   18f94:	f04f 0300 	mov.w	r3, #0
   18f98:	733b      	strb	r3, [r7, #12]
   18f9a:	f642 0303 	movw	r3, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   18f9e:	f107 0118 	add.w	r1, r7, #24
   18fa2:	6139      	str	r1, [r7, #16]
   18fa4:	82ba      	strh	r2, [r7, #20]
		attr = (struct bt_gatt_attr) {
   18fa6:	2100      	movs	r1, #0
   18fa8:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   18faa:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   18fac:	f107 0030 	add.w	r0, r7, #48	; 0x30
   18fb0:	f017 fc67 	bl	30882 <memset>
   18fb4:	f107 030c 	add.w	r3, r7, #12
   18fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   18fba:	f107 0310 	add.w	r3, r7, #16
   18fbe:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18fc0:	462a      	mov	r2, r5
   18fc2:	4640      	mov	r0, r8
   18fc4:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   18fc6:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   18fca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18fce:	4798      	blx	r3
   18fd0:	2800      	cmp	r0, #0
   18fd2:	d1c0      	bne.n	18f56 <gatt_read_type_rsp+0x192>
   18fd4:	e772      	b.n	18ebc <gatt_read_type_rsp+0xf8>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   18fd6:	6829      	ldr	r1, [r5, #0]
   18fd8:	780a      	ldrb	r2, [r1, #0]
   18fda:	2a00      	cmp	r2, #0
   18fdc:	f47f af19 	bne.w	18e12 <gatt_read_type_rsp+0x4e>
	uint16_t handle = 0U;
   18fe0:	4691      	mov	r9, r2
	uuid_val = BT_UUID_16(params->uuid)->val;
   18fe2:	8849      	ldrh	r1, [r1, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   18fe4:	1e5c      	subs	r4, r3, #1
		switch (uuid_val) {
   18fe6:	f5a1 5324 	sub.w	r3, r1, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   18fea:	b2a4      	uxth	r4, r4
   18fec:	f106 0a01 	add.w	sl, r6, #1
		switch (uuid_val) {
   18ff0:	607b      	str	r3, [r7, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
   18ff2:	7833      	ldrb	r3, [r6, #0]
   18ff4:	42a3      	cmp	r3, r4
   18ff6:	f63f af1c 	bhi.w	18e32 <gatt_read_type_rsp+0x6e>
		handle = sys_le16_to_cpu(data->handle);
   18ffa:	f8ba b000 	ldrh.w	fp, [sl]
   18ffe:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   19002:	f1b9 0f00 	cmp.w	r9, #0
   19006:	f43f af04 	beq.w	18e12 <gatt_read_type_rsp+0x4e>
		switch (uuid_val) {
   1900a:	687a      	ldr	r2, [r7, #4]
   1900c:	2a04      	cmp	r2, #4
   1900e:	f63f af00 	bhi.w	18e12 <gatt_read_type_rsp+0x4e>
   19012:	a301      	add	r3, pc, #4	; (adr r3, 19018 <gatt_read_type_rsp+0x254>)
   19014:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   19018:	0001902d 	.word	0x0001902d
   1901c:	00018e13 	.word	0x00018e13
   19020:	0001902d 	.word	0x0001902d
   19024:	0001902d 	.word	0x0001902d
   19028:	0001906d 	.word	0x0001906d
			value.scc.flags = sys_get_le16(data->value);
   1902c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   19030:	833b      	strh	r3, [r7, #24]
			.uuid = params->uuid,
   19032:	682b      	ldr	r3, [r5, #0]
		attr = (struct bt_gatt_attr) {
   19034:	2210      	movs	r2, #16
   19036:	2100      	movs	r1, #0
   19038:	f107 0030 	add.w	r0, r7, #48	; 0x30
			.uuid = params->uuid,
   1903c:	603b      	str	r3, [r7, #0]
		attr = (struct bt_gatt_attr) {
   1903e:	f017 fc20 	bl	30882 <memset>
   19042:	683b      	ldr	r3, [r7, #0]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19044:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   19046:	62fb      	str	r3, [r7, #44]	; 0x2c
   19048:	f107 0318 	add.w	r3, r7, #24
   1904c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1904e:	4640      	mov	r0, r8
   19050:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   19052:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19056:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1905a:	4798      	blx	r3
   1905c:	2800      	cmp	r0, #0
   1905e:	f43f af2d 	beq.w	18ebc <gatt_read_type_rsp+0xf8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   19062:	7833      	ldrb	r3, [r6, #0]
   19064:	1ae4      	subs	r4, r4, r3
   19066:	b2a4      	uxth	r4, r4
   19068:	449a      	add	sl, r3
   1906a:	e7c2      	b.n	18ff2 <gatt_read_type_rsp+0x22e>
			value.cpf.format = cpf->format;
   1906c:	f89a 3002 	ldrb.w	r3, [sl, #2]
   19070:	763b      	strb	r3, [r7, #24]
			value.cpf.exponent = cpf->exponent;
   19072:	f89a 3003 	ldrb.w	r3, [sl, #3]
   19076:	767b      	strb	r3, [r7, #25]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   19078:	f89a 2005 	ldrb.w	r2, [sl, #5]
   1907c:	f89a 3004 	ldrb.w	r3, [sl, #4]
   19080:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19084:	837b      	strh	r3, [r7, #26]
			value.cpf.name_space = cpf->name_space;
   19086:	f89a 3006 	ldrb.w	r3, [sl, #6]
   1908a:	773b      	strb	r3, [r7, #28]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1908c:	f89a 3007 	ldrb.w	r3, [sl, #7]
   19090:	f89a 2008 	ldrb.w	r2, [sl, #8]
   19094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19098:	83fb      	strh	r3, [r7, #30]
			break;
   1909a:	e7ca      	b.n	19032 <gatt_read_type_rsp+0x26e>
   1909c:	00037413 	.word	0x00037413
   190a0:	00037554 	.word	0x00037554
   190a4:	00031ba4 	.word	0x00031ba4
   190a8:	0002cee3 	.word	0x0002cee3
   190ac:	000190b5 	.word	0x000190b5
   190b0:	00037529 	.word	0x00037529

000190b4 <read_included_uuid_cb>:
{
   190b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   190b6:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   190b8:	2b10      	cmp	r3, #16
{
   190ba:	af00      	add	r7, sp, #0
   190bc:	4605      	mov	r5, r0
   190be:	6d3c      	ldr	r4, [r7, #80]	; 0x50
	if (length != 16U) {
   190c0:	d018      	beq.n	190f4 <read_included_uuid_cb+0x40>
		LOG_ERR("Invalid data len %u", length);
   190c2:	466e      	mov	r6, sp
   190c4:	b088      	sub	sp, #32
   190c6:	466a      	mov	r2, sp
   190c8:	4927      	ldr	r1, [pc, #156]	; (19168 <read_included_uuid_cb+0xb4>)
   190ca:	4828      	ldr	r0, [pc, #160]	; (1916c <read_included_uuid_cb+0xb8>)
   190cc:	6151      	str	r1, [r2, #20]
   190ce:	4928      	ldr	r1, [pc, #160]	; (19170 <read_included_uuid_cb+0xbc>)
   190d0:	e9c2 1306 	strd	r1, r3, [r2, #24]
   190d4:	2304      	movs	r3, #4
   190d6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   190da:	f842 3f10 	str.w	r3, [r2, #16]!
   190de:	f014 f800 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		params->func(conn, NULL, params);
   190e2:	4622      	mov	r2, r4
   190e4:	46b5      	mov	sp, r6
   190e6:	2100      	movs	r1, #0
   190e8:	4628      	mov	r0, r5
   190ea:	6863      	ldr	r3, [r4, #4]
   190ec:	4798      	blx	r3
}
   190ee:	373c      	adds	r7, #60	; 0x3c
   190f0:	46bd      	mov	sp, r7
   190f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	value.start_handle = params->_included.start_handle;
   190f4:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   190f6:	f107 0010 	add.w	r0, r7, #16
	value.start_handle = params->_included.start_handle;
   190fa:	81bb      	strh	r3, [r7, #12]
	value.end_handle = params->_included.end_handle;
   190fc:	89a3      	ldrh	r3, [r4, #12]
	handle = params->_included.attr_handle;
   190fe:	8926      	ldrh	r6, [r4, #8]
	value.end_handle = params->_included.end_handle;
   19100:	81fb      	strh	r3, [r7, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   19102:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   19104:	60b8      	str	r0, [r7, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   19106:	743b      	strb	r3, [r7, #16]
	memcpy(u.u128.val, pdu, length);
   19108:	f102 0110 	add.w	r1, r2, #16
   1910c:	f107 0311 	add.w	r3, r7, #17
   19110:	f852 cb04 	ldr.w	ip, [r2], #4
   19114:	428a      	cmp	r2, r1
   19116:	f843 cb04 	str.w	ip, [r3], #4
   1911a:	d1f9      	bne.n	19110 <read_included_uuid_cb+0x5c>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1911c:	6821      	ldr	r1, [r4, #0]
   1911e:	b9e9      	cbnz	r1, 1915c <read_included_uuid_cb+0xa8>
		.uuid = BT_UUID_GATT_INCLUDE,
   19120:	2100      	movs	r1, #0
   19122:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   19126:	2210      	movs	r2, #16
   19128:	f107 0028 	add.w	r0, r7, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1912c:	7139      	strb	r1, [r7, #4]
   1912e:	80fb      	strh	r3, [r7, #6]
	attr = (struct bt_gatt_attr) {
   19130:	f017 fba7 	bl	30882 <memset>
   19134:	1d3b      	adds	r3, r7, #4
   19136:	627b      	str	r3, [r7, #36]	; 0x24
   19138:	f107 0308 	add.w	r3, r7, #8
   1913c:	633b      	str	r3, [r7, #48]	; 0x30
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1913e:	4622      	mov	r2, r4
   19140:	4628      	mov	r0, r5
   19142:	6863      	ldr	r3, [r4, #4]
	attr = (struct bt_gatt_attr) {
   19144:	86be      	strh	r6, [r7, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19146:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1914a:	4798      	blx	r3
   1914c:	2800      	cmp	r0, #0
   1914e:	d0ce      	beq.n	190ee <read_included_uuid_cb+0x3a>
	gatt_discover_next(conn, params->start_handle, params);
   19150:	4622      	mov	r2, r4
   19152:	4628      	mov	r0, r5
   19154:	8921      	ldrh	r1, [r4, #8]
   19156:	f014 f8e6 	bl	2d326 <gatt_discover_next>
	return;
   1915a:	e7c8      	b.n	190ee <read_included_uuid_cb+0x3a>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1915c:	f012 ff04 	bl	2bf68 <bt_uuid_cmp>
   19160:	2800      	cmp	r0, #0
   19162:	d0dd      	beq.n	19120 <read_included_uuid_cb+0x6c>
   19164:	e7f4      	b.n	19150 <read_included_uuid_cb+0x9c>
   19166:	bf00      	nop
   19168:	00037413 	.word	0x00037413
   1916c:	00031ba4 	.word	0x00031ba4
   19170:	0003753e 	.word	0x0003753e

00019174 <gatt_find_info_rsp>:
{
   19174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19178:	b091      	sub	sp, #68	; 0x44
   1917a:	af00      	add	r7, sp, #0
   1917c:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   1917e:	60f8      	str	r0, [r7, #12]
	if (err) {
   19180:	b9a9      	cbnz	r1, 191ae <gatt_find_info_rsp+0x3a>
	switch (rsp->format) {
   19182:	7810      	ldrb	r0, [r2, #0]
   19184:	2801      	cmp	r0, #1
   19186:	d018      	beq.n	191ba <gatt_find_info_rsp+0x46>
   19188:	2802      	cmp	r0, #2
   1918a:	d030      	beq.n	191ee <gatt_find_info_rsp+0x7a>
		LOG_ERR("Invalid format %u", rsp->format);
   1918c:	466c      	mov	r4, sp
   1918e:	b088      	sub	sp, #32
   19190:	466a      	mov	r2, sp
   19192:	4b53      	ldr	r3, [pc, #332]	; (192e0 <gatt_find_info_rsp+0x16c>)
   19194:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19198:	6153      	str	r3, [r2, #20]
   1919a:	4b52      	ldr	r3, [pc, #328]	; (192e4 <gatt_find_info_rsp+0x170>)
	switch (rsp->format) {
   1919c:	e9c2 3006 	strd	r3, r0, [r2, #24]
		LOG_ERR("Invalid format %u", rsp->format);
   191a0:	2304      	movs	r3, #4
   191a2:	4851      	ldr	r0, [pc, #324]	; (192e8 <gatt_find_info_rsp+0x174>)
   191a4:	f842 3f10 	str.w	r3, [r2, #16]!
   191a8:	f013 ff9b 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   191ac:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   191ae:	462a      	mov	r2, r5
   191b0:	2100      	movs	r1, #0
   191b2:	686b      	ldr	r3, [r5, #4]
   191b4:	68f8      	ldr	r0, [r7, #12]
   191b6:	4798      	blx	r3
   191b8:	e08d      	b.n	192d6 <gatt_find_info_rsp+0x162>
	switch (rsp->format) {
   191ba:	f04f 0904 	mov.w	r9, #4
	length--;
   191be:	3b01      	subs	r3, #1
   191c0:	b29b      	uxth	r3, r3
	if (length < len) {
   191c2:	454b      	cmp	r3, r9
		u.uuid.type = BT_UUID_TYPE_16;
   191c4:	7639      	strb	r1, [r7, #24]
	if (length < len) {
   191c6:	d3f2      	bcc.n	191ae <gatt_find_info_rsp+0x3a>
	bool skip = false;
   191c8:	f04f 0800 	mov.w	r8, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   191cc:	fbb3 fbf9 	udiv	fp, r3, r9
			skip = false;
   191d0:	46c2      	mov	sl, r8
	for (i = length / len, pdu = rsp->info; i != 0;
   191d2:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   191d4:	f8c7 8008 	str.w	r8, [r7, #8]
   191d8:	f107 0618 	add.w	r6, r7, #24
	for (i = length / len, pdu = rsp->info; i != 0;
   191dc:	f1bb 0f00 	cmp.w	fp, #0
   191e0:	d109      	bne.n	191f6 <gatt_find_info_rsp+0x82>
	gatt_discover_next(conn, handle, params);
   191e2:	462a      	mov	r2, r5
   191e4:	e9d7 1002 	ldrd	r1, r0, [r7, #8]
   191e8:	f014 f89d 	bl	2d326 <gatt_discover_next>
	return;
   191ec:	e073      	b.n	192d6 <gatt_find_info_rsp+0x162>
	switch (rsp->format) {
   191ee:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   191f0:	f04f 0912 	mov.w	r9, #18
   191f4:	e7e3      	b.n	191be <gatt_find_info_rsp+0x4a>
		handle = sys_le16_to_cpu(info.i16->handle);
   191f6:	8823      	ldrh	r3, [r4, #0]
   191f8:	607b      	str	r3, [r7, #4]
   191fa:	88bb      	ldrh	r3, [r7, #4]
   191fc:	60bb      	str	r3, [r7, #8]
		if (skip) {
   191fe:	f1b8 0f00 	cmp.w	r8, #0
   19202:	d151      	bne.n	192a8 <gatt_find_info_rsp+0x134>
		switch (u.uuid.type) {
   19204:	7e3b      	ldrb	r3, [r7, #24]
   19206:	2b00      	cmp	r3, #0
   19208:	d037      	beq.n	1927a <gatt_find_info_rsp+0x106>
   1920a:	2b02      	cmp	r3, #2
   1920c:	d03b      	beq.n	19286 <gatt_find_info_rsp+0x112>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1920e:	6829      	ldr	r1, [r5, #0]
   19210:	2900      	cmp	r1, #0
   19212:	d144      	bne.n	1929e <gatt_find_info_rsp+0x12a>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   19214:	7c2b      	ldrb	r3, [r5, #16]
   19216:	2b04      	cmp	r3, #4
   19218:	d14c      	bne.n	192b4 <gatt_find_info_rsp+0x140>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1921a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1921e:	4630      	mov	r0, r6
   19220:	f107 0110 	add.w	r1, r7, #16
   19224:	f887 a010 	strb.w	sl, [r7, #16]
   19228:	827b      	strh	r3, [r7, #18]
   1922a:	f012 fe9d 	bl	2bf68 <bt_uuid_cmp>
   1922e:	2800      	cmp	r0, #0
   19230:	d03a      	beq.n	192a8 <gatt_find_info_rsp+0x134>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   19232:	f642 0301 	movw	r3, #10241	; 0x2801
   19236:	4630      	mov	r0, r6
   19238:	f107 0114 	add.w	r1, r7, #20
   1923c:	f887 a014 	strb.w	sl, [r7, #20]
   19240:	82fb      	strh	r3, [r7, #22]
   19242:	f012 fe91 	bl	2bf68 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   19246:	b378      	cbz	r0, 192a8 <gatt_find_info_rsp+0x134>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   19248:	f642 0302 	movw	r3, #10242	; 0x2802
   1924c:	4630      	mov	r0, r6
   1924e:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   19252:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19254:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   19258:	f012 fe86 	bl	2bf68 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1925c:	b320      	cbz	r0, 192a8 <gatt_find_info_rsp+0x134>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1925e:	f642 0303 	movw	r3, #10243	; 0x2803
   19262:	4630      	mov	r0, r6
   19264:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   19268:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1926a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1926e:	f012 fe7b 	bl	2bf68 <bt_uuid_cmp>
   19272:	b9f8      	cbnz	r0, 192b4 <gatt_find_info_rsp+0x140>
				skip = true;
   19274:	f04f 0801 	mov.w	r8, #1
   19278:	e018      	b.n	192ac <gatt_find_info_rsp+0x138>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1927a:	78a3      	ldrb	r3, [r4, #2]
   1927c:	78e2      	ldrb	r2, [r4, #3]
   1927e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19282:	837b      	strh	r3, [r7, #26]
			break;
   19284:	e7c3      	b.n	1920e <gatt_find_info_rsp+0x9a>
			memcpy(u.u128.val, info.i128->uuid, 16);
   19286:	1ca3      	adds	r3, r4, #2
   19288:	f107 0219 	add.w	r2, r7, #25
   1928c:	f104 0112 	add.w	r1, r4, #18
   19290:	f853 0b04 	ldr.w	r0, [r3], #4
   19294:	428b      	cmp	r3, r1
   19296:	f842 0b04 	str.w	r0, [r2], #4
   1929a:	d1f9      	bne.n	19290 <gatt_find_info_rsp+0x11c>
   1929c:	e7b7      	b.n	1920e <gatt_find_info_rsp+0x9a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1929e:	4630      	mov	r0, r6
   192a0:	f012 fe62 	bl	2bf68 <bt_uuid_cmp>
   192a4:	2800      	cmp	r0, #0
   192a6:	d0b5      	beq.n	19214 <gatt_find_info_rsp+0xa0>
			skip = false;
   192a8:	f04f 0800 	mov.w	r8, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   192ac:	f10b 3bff 	add.w	fp, fp, #4294967295
   192b0:	444c      	add	r4, r9
   192b2:	e793      	b.n	191dc <gatt_find_info_rsp+0x68>
		attr = (struct bt_gatt_attr) {
   192b4:	2210      	movs	r2, #16
   192b6:	2100      	movs	r1, #0
   192b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
   192bc:	f017 fae1 	bl	30882 <memset>
   192c0:	88bb      	ldrh	r3, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   192c2:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   192c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   192c6:	68f8      	ldr	r0, [r7, #12]
   192c8:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   192ca:	62fe      	str	r6, [r7, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   192cc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   192d0:	4798      	blx	r3
   192d2:	2800      	cmp	r0, #0
   192d4:	d1ea      	bne.n	192ac <gatt_find_info_rsp+0x138>
}
   192d6:	3744      	adds	r7, #68	; 0x44
   192d8:	46bd      	mov	sp, r7
   192da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192de:	bf00      	nop
   192e0:	0003742b 	.word	0x0003742b
   192e4:	00037516 	.word	0x00037516
   192e8:	00031ba4 	.word	0x00031ba4

000192ec <bt_gatt_write_without_response_cb>:
{
   192ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192f0:	b085      	sub	sp, #20
   192f2:	af04      	add	r7, sp, #16
   192f4:	461d      	mov	r5, r3
   192f6:	4688      	mov	r8, r1
   192f8:	4691      	mov	r9, r2
	__ASSERT(conn, "invalid parameters\n");
   192fa:	4606      	mov	r6, r0
{
   192fc:	f897 3020 	ldrb.w	r3, [r7, #32]
	__ASSERT(conn, "invalid parameters\n");
   19300:	b970      	cbnz	r0, 19320 <bt_gatt_write_without_response_cb+0x34>
   19302:	4934      	ldr	r1, [pc, #208]	; (193d4 <bt_gatt_write_without_response_cb+0xe8>)
   19304:	f241 3325 	movw	r3, #4901	; 0x1325
   19308:	4a33      	ldr	r2, [pc, #204]	; (193d8 <bt_gatt_write_without_response_cb+0xec>)
   1930a:	4834      	ldr	r0, [pc, #208]	; (193dc <bt_gatt_write_without_response_cb+0xf0>)
   1930c:	f011 fd54 	bl	2adb8 <assert_print>
   19310:	4833      	ldr	r0, [pc, #204]	; (193e0 <bt_gatt_write_without_response_cb+0xf4>)
   19312:	f011 fd51 	bl	2adb8 <assert_print>
   19316:	f241 3125 	movw	r1, #4901	; 0x1325
	__ASSERT(handle, "invalid parameters\n");
   1931a:	482f      	ldr	r0, [pc, #188]	; (193d8 <bt_gatt_write_without_response_cb+0xec>)
   1931c:	f011 fd45 	bl	2adaa <assert_post_action>
   19320:	b961      	cbnz	r1, 1933c <bt_gatt_write_without_response_cb+0x50>
   19322:	4930      	ldr	r1, [pc, #192]	; (193e4 <bt_gatt_write_without_response_cb+0xf8>)
   19324:	f241 3326 	movw	r3, #4902	; 0x1326
   19328:	4a2b      	ldr	r2, [pc, #172]	; (193d8 <bt_gatt_write_without_response_cb+0xec>)
   1932a:	482c      	ldr	r0, [pc, #176]	; (193dc <bt_gatt_write_without_response_cb+0xf0>)
   1932c:	f011 fd44 	bl	2adb8 <assert_print>
   19330:	482b      	ldr	r0, [pc, #172]	; (193e0 <bt_gatt_write_without_response_cb+0xf4>)
   19332:	f011 fd41 	bl	2adb8 <assert_print>
   19336:	f241 3126 	movw	r1, #4902	; 0x1326
   1933a:	e7ee      	b.n	1931a <bt_gatt_write_without_response_cb+0x2e>
	if (conn->state != BT_CONN_CONNECTED) {
   1933c:	7a82      	ldrb	r2, [r0, #10]
   1933e:	2a07      	cmp	r2, #7
   19340:	d145      	bne.n	193ce <bt_gatt_write_without_response_cb+0xe2>
	if (sign) {
   19342:	b3b3      	cbz	r3, 193b2 <bt_gatt_write_without_response_cb+0xc6>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   19344:	21d2      	movs	r1, #210	; 0xd2
   19346:	f105 020e 	add.w	r2, r5, #14
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1934a:	f7fd febf 	bl	170cc <bt_att_create_pdu>
   1934e:	4604      	mov	r4, r0
	if (!buf) {
   19350:	b348      	cbz	r0, 193a6 <bt_gatt_write_without_response_cb+0xba>
   19352:	2102      	movs	r1, #2
   19354:	300c      	adds	r0, #12
   19356:	f000 fd63 	bl	19e20 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1935a:	2200      	movs	r2, #0
	cmd->handle = sys_cpu_to_le16(handle);
   1935c:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   19360:	2300      	movs	r3, #0
   19362:	f04f 0800 	mov.w	r8, #0
   19366:	e9cd 2300 	strd	r2, r3, [sp]
   1936a:	4629      	mov	r1, r5
   1936c:	464a      	mov	r2, r9
   1936e:	4620      	mov	r0, r4
   19370:	e9cd 8802 	strd	r8, r8, [sp, #8]
   19374:	f000 fc94 	bl	19ca0 <net_buf_append_bytes>
	if (write != length) {
   19378:	4285      	cmp	r5, r0
   1937a:	d01d      	beq.n	193b8 <bt_gatt_write_without_response_cb+0xcc>
		LOG_WRN("Unable to allocate length %u: only %zu written", length, write);
   1937c:	466e      	mov	r6, sp
   1937e:	b08a      	sub	sp, #40	; 0x28
   19380:	aa04      	add	r2, sp, #16
   19382:	4b19      	ldr	r3, [pc, #100]	; (193e8 <bt_gatt_write_without_response_cb+0xfc>)
   19384:	6210      	str	r0, [r2, #32]
   19386:	6153      	str	r3, [r2, #20]
   19388:	4b18      	ldr	r3, [pc, #96]	; (193ec <bt_gatt_write_without_response_cb+0x100>)
   1938a:	4819      	ldr	r0, [pc, #100]	; (193f0 <bt_gatt_write_without_response_cb+0x104>)
   1938c:	e9c2 3506 	strd	r3, r5, [r2, #24]
   19390:	2305      	movs	r3, #5
   19392:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   19396:	f842 3f10 	str.w	r3, [r2, #16]!
   1939a:	f013 fea2 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1939e:	4620      	mov	r0, r4
   193a0:	46b5      	mov	sp, r6
   193a2:	f000 fbb7 	bl	19b14 <net_buf_unref>
		return -ENOMEM;
   193a6:	f06f 000b 	mvn.w	r0, #11
}
   193aa:	3704      	adds	r7, #4
   193ac:	46bd      	mov	sp, r7
   193ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   193b2:	2152      	movs	r1, #82	; 0x52
   193b4:	1caa      	adds	r2, r5, #2
   193b6:	e7c8      	b.n	1934a <bt_gatt_write_without_response_cb+0x5e>
	bt_att_set_tx_meta_data(buf, func, user_data, BT_ATT_CHAN_OPT_NONE);
   193b8:	4620      	mov	r0, r4
   193ba:	e9d7 1209 	ldrd	r1, r2, [r7, #36]	; 0x24
   193be:	4643      	mov	r3, r8
   193c0:	f013 fcf0 	bl	2cda4 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   193c4:	4621      	mov	r1, r4
   193c6:	4630      	mov	r0, r6
   193c8:	f7fe fa7c 	bl	178c4 <bt_att_send>
   193cc:	e7ed      	b.n	193aa <bt_gatt_write_without_response_cb+0xbe>
		return -ENOTCONN;
   193ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   193d2:	e7ea      	b.n	193aa <bt_gatt_write_without_response_cb+0xbe>
   193d4:	00035d7c 	.word	0x00035d7c
   193d8:	00037085 	.word	0x00037085
   193dc:	00033bc2 	.word	0x00033bc2
   193e0:	00037285 	.word	0x00037285
   193e4:	000374a7 	.word	0x000374a7
   193e8:	00037441 	.word	0x00037441
   193ec:	000374f4 	.word	0x000374f4
   193f0:	00031ba4 	.word	0x00031ba4

000193f4 <bt_gatt_subscribe>:
}
#endif /* CONFIG_BT_GATT_AUTO_DISCOVER_CCC */

int bt_gatt_subscribe(struct bt_conn *conn,
		      struct bt_gatt_subscribe_params *params)
{
   193f4:	b570      	push	{r4, r5, r6, lr}
   193f6:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp;
	bool has_subscription = false;

	__ASSERT(conn, "invalid parameters\n");
   193f8:	4606      	mov	r6, r0
   193fa:	b970      	cbnz	r0, 1941a <bt_gatt_subscribe+0x26>
   193fc:	4941      	ldr	r1, [pc, #260]	; (19504 <bt_gatt_subscribe+0x110>)
   193fe:	f241 4392 	movw	r3, #5266	; 0x1492
   19402:	4a41      	ldr	r2, [pc, #260]	; (19508 <bt_gatt_subscribe+0x114>)
   19404:	4841      	ldr	r0, [pc, #260]	; (1950c <bt_gatt_subscribe+0x118>)
   19406:	f011 fcd7 	bl	2adb8 <assert_print>
   1940a:	4841      	ldr	r0, [pc, #260]	; (19510 <bt_gatt_subscribe+0x11c>)
   1940c:	f011 fcd4 	bl	2adb8 <assert_print>
   19410:	f241 4192 	movw	r1, #5266	; 0x1492
	__ASSERT(params && params->notify,  "invalid parameters\n");
   19414:	483c      	ldr	r0, [pc, #240]	; (19508 <bt_gatt_subscribe+0x114>)
   19416:	f011 fcc8 	bl	2adaa <assert_post_action>
   1941a:	b109      	cbz	r1, 19420 <bt_gatt_subscribe+0x2c>
   1941c:	680b      	ldr	r3, [r1, #0]
   1941e:	b963      	cbnz	r3, 1943a <bt_gatt_subscribe+0x46>
   19420:	493c      	ldr	r1, [pc, #240]	; (19514 <bt_gatt_subscribe+0x120>)
   19422:	f241 4393 	movw	r3, #5267	; 0x1493
   19426:	4a38      	ldr	r2, [pc, #224]	; (19508 <bt_gatt_subscribe+0x114>)
   19428:	4838      	ldr	r0, [pc, #224]	; (1950c <bt_gatt_subscribe+0x118>)
   1942a:	f011 fcc5 	bl	2adb8 <assert_print>
   1942e:	4838      	ldr	r0, [pc, #224]	; (19510 <bt_gatt_subscribe+0x11c>)
   19430:	f011 fcc2 	bl	2adb8 <assert_print>
   19434:	f241 4193 	movw	r1, #5267	; 0x1493
   19438:	e7ec      	b.n	19414 <bt_gatt_subscribe+0x20>
	__ASSERT(params->value, "invalid parameters\n");
   1943a:	8a0b      	ldrh	r3, [r1, #16]
   1943c:	b963      	cbnz	r3, 19458 <bt_gatt_subscribe+0x64>
   1943e:	4936      	ldr	r1, [pc, #216]	; (19518 <bt_gatt_subscribe+0x124>)
   19440:	f241 4394 	movw	r3, #5268	; 0x1494
   19444:	4a30      	ldr	r2, [pc, #192]	; (19508 <bt_gatt_subscribe+0x114>)
   19446:	4831      	ldr	r0, [pc, #196]	; (1950c <bt_gatt_subscribe+0x118>)
   19448:	f011 fcb6 	bl	2adb8 <assert_print>
   1944c:	4830      	ldr	r0, [pc, #192]	; (19510 <bt_gatt_subscribe+0x11c>)
   1944e:	f011 fcb3 	bl	2adb8 <assert_print>
   19452:	f241 4194 	movw	r1, #5268	; 0x1494
   19456:	e7dd      	b.n	19414 <bt_gatt_subscribe+0x20>
#if defined(CONFIG_BT_GATT_AUTO_DISCOVER_CCC)
	__ASSERT(params->ccc_handle ||
		 (params->end_handle && params->disc_params),
		 "invalid parameters\n");
#else
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   19458:	89cb      	ldrh	r3, [r1, #14]
   1945a:	b963      	cbnz	r3, 19476 <bt_gatt_subscribe+0x82>
   1945c:	492f      	ldr	r1, [pc, #188]	; (1951c <bt_gatt_subscribe+0x128>)
   1945e:	f241 439a 	movw	r3, #5274	; 0x149a
   19462:	4a29      	ldr	r2, [pc, #164]	; (19508 <bt_gatt_subscribe+0x114>)
   19464:	4829      	ldr	r0, [pc, #164]	; (1950c <bt_gatt_subscribe+0x118>)
   19466:	f011 fca7 	bl	2adb8 <assert_print>
   1946a:	4829      	ldr	r0, [pc, #164]	; (19510 <bt_gatt_subscribe+0x11c>)
   1946c:	f011 fca4 	bl	2adb8 <assert_print>
   19470:	f241 419a 	movw	r1, #5274	; 0x149a
   19474:	e7ce      	b.n	19414 <bt_gatt_subscribe+0x20>
#endif

	if (conn->state != BT_CONN_CONNECTED) {
   19476:	7a83      	ldrb	r3, [r0, #10]
   19478:	2b07      	cmp	r3, #7
   1947a:	d13a      	bne.n	194f2 <bt_gatt_subscribe+0xfe>
	sub = gatt_sub_find(conn);
   1947c:	f7fe fb1e 	bl	17abc <gatt_sub_find>
	if (!sub) {
   19480:	4604      	mov	r4, r0
   19482:	b958      	cbnz	r0, 1949c <bt_gatt_subscribe+0xa8>
		sub = gatt_sub_find(NULL);
   19484:	f7fe fb1a 	bl	17abc <gatt_sub_find>
		if (sub) {
   19488:	4604      	mov	r4, r0
   1948a:	2800      	cmp	r0, #0
   1948c:	d034      	beq.n	194f8 <bt_gatt_subscribe+0x104>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1948e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19492:	3001      	adds	r0, #1
   19494:	f013 fd71 	bl	2cf7a <bt_addr_le_copy>
			sub->id = conn->id;
   19498:	7a33      	ldrb	r3, [r6, #8]
   1949a:	7023      	strb	r3, [r4, #0]
	return list->head;
   1949c:	68a3      	ldr	r3, [r4, #8]
	if (!sub) {
		return -ENOMEM;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1949e:	b17b      	cbz	r3, 194c0 <bt_gatt_subscribe+0xcc>
   194a0:	2200      	movs	r2, #0
   194a2:	3b18      	subs	r3, #24
		/* Fail if entry already exists */
		if (tmp == params) {
   194a4:	429d      	cmp	r5, r3
   194a6:	d02a      	beq.n	194fe <bt_gatt_subscribe+0x10a>
			gatt_sub_remove(conn, sub, NULL, NULL);
			return -EALREADY;
		}

		/* Check if another subscription exists */
		if (tmp->value_handle == params->value_handle &&
   194a8:	8998      	ldrh	r0, [r3, #12]
   194aa:	89a9      	ldrh	r1, [r5, #12]
   194ac:	4288      	cmp	r0, r1
   194ae:	d104      	bne.n	194ba <bt_gatt_subscribe+0xc6>
   194b0:	8a18      	ldrh	r0, [r3, #16]
   194b2:	8a29      	ldrh	r1, [r5, #16]
		    tmp->value >= params->value) {
			has_subscription = true;
   194b4:	4288      	cmp	r0, r1
   194b6:	bf28      	it	cs
   194b8:	2201      	movcs	r2, #1
	return node->next;
   194ba:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   194bc:	b96b      	cbnz	r3, 194da <bt_gatt_subscribe+0xe6>
		}
	}

	/* Skip write if already subscribed */
	if (!has_subscription) {
   194be:	b972      	cbnz	r2, 194de <bt_gatt_subscribe+0xea>
#if defined(CONFIG_BT_GATT_AUTO_DISCOVER_CCC)
		if (!params->ccc_handle) {
			return gatt_ccc_discover(conn, params);
		}
#endif
		err = gatt_write_ccc(conn, params);
   194c0:	4630      	mov	r0, r6
   194c2:	4629      	mov	r1, r5
   194c4:	f7fe fc48 	bl	17d58 <gatt_write_ccc>
		if (err) {
   194c8:	4606      	mov	r6, r0
   194ca:	b140      	cbz	r0, 194de <bt_gatt_subscribe+0xea>
	if (gatt_sub_is_empty(sub)) {
   194cc:	68a3      	ldr	r3, [r4, #8]
   194ce:	b913      	cbnz	r3, 194d6 <bt_gatt_subscribe+0xe2>
		gatt_sub_free(sub);
   194d0:	4620      	mov	r0, r4
   194d2:	f7fe fb0b 	bl	17aec <gatt_sub_free>
	 * reported to send notification before reply to CCC write.
	 */
	sys_slist_prepend(&sub->list, &params->node);

	return 0;
}
   194d6:	4630      	mov	r0, r6
   194d8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   194da:	3b18      	subs	r3, #24
   194dc:	e7e2      	b.n	194a4 <bt_gatt_subscribe+0xb0>
	return list->head;
   194de:	68a2      	ldr	r2, [r4, #8]
	sys_slist_prepend(&sub->list, &params->node);
   194e0:	f105 0318 	add.w	r3, r5, #24
	parent->next = child;
   194e4:	61aa      	str	r2, [r5, #24]
Z_GENLIST_PREPEND(slist, snode)
   194e6:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   194e8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   194ea:	b902      	cbnz	r2, 194ee <bt_gatt_subscribe+0xfa>
	list->tail = node;
   194ec:	60e3      	str	r3, [r4, #12]
	return 0;
   194ee:	2600      	movs	r6, #0
   194f0:	e7f1      	b.n	194d6 <bt_gatt_subscribe+0xe2>
		return -ENOTCONN;
   194f2:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   194f6:	e7ee      	b.n	194d6 <bt_gatt_subscribe+0xe2>
		return -ENOMEM;
   194f8:	f06f 060b 	mvn.w	r6, #11
   194fc:	e7eb      	b.n	194d6 <bt_gatt_subscribe+0xe2>
			return -EALREADY;
   194fe:	f06f 0677 	mvn.w	r6, #119	; 0x77
   19502:	e7e8      	b.n	194d6 <bt_gatt_subscribe+0xe2>
   19504:	00035d7c 	.word	0x00035d7c
   19508:	00037085 	.word	0x00037085
   1950c:	00033bc2 	.word	0x00033bc2
   19510:	00037285 	.word	0x00037285
   19514:	00037474 	.word	0x00037474
   19518:	0003748d 	.word	0x0003748d
   1951c:	0003749b 	.word	0x0003749b

00019520 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   19520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19524:	460c      	mov	r4, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp;
	bool has_subscription = false, found = false;

	__ASSERT(conn, "invalid parameters\n");
   19526:	4607      	mov	r7, r0
   19528:	b970      	cbnz	r0, 19548 <bt_gatt_unsubscribe+0x28>
   1952a:	4940      	ldr	r1, [pc, #256]	; (1962c <bt_gatt_unsubscribe+0x10c>)
   1952c:	f241 43f1 	movw	r3, #5361	; 0x14f1
   19530:	4a3f      	ldr	r2, [pc, #252]	; (19630 <bt_gatt_unsubscribe+0x110>)
   19532:	4840      	ldr	r0, [pc, #256]	; (19634 <bt_gatt_unsubscribe+0x114>)
   19534:	f011 fc40 	bl	2adb8 <assert_print>
   19538:	483f      	ldr	r0, [pc, #252]	; (19638 <bt_gatt_unsubscribe+0x118>)
   1953a:	f011 fc3d 	bl	2adb8 <assert_print>
   1953e:	f241 41f1 	movw	r1, #5361	; 0x14f1
	__ASSERT(params, "invalid parameters\n");
   19542:	483b      	ldr	r0, [pc, #236]	; (19630 <bt_gatt_unsubscribe+0x110>)
   19544:	f011 fc31 	bl	2adaa <assert_post_action>
   19548:	b961      	cbnz	r1, 19564 <bt_gatt_unsubscribe+0x44>
   1954a:	493c      	ldr	r1, [pc, #240]	; (1963c <bt_gatt_unsubscribe+0x11c>)
   1954c:	f241 43f2 	movw	r3, #5362	; 0x14f2
   19550:	4a37      	ldr	r2, [pc, #220]	; (19630 <bt_gatt_unsubscribe+0x110>)
   19552:	4838      	ldr	r0, [pc, #224]	; (19634 <bt_gatt_unsubscribe+0x114>)
   19554:	f011 fc30 	bl	2adb8 <assert_print>
   19558:	4837      	ldr	r0, [pc, #220]	; (19638 <bt_gatt_unsubscribe+0x118>)
   1955a:	f011 fc2d 	bl	2adb8 <assert_print>
   1955e:	f241 41f2 	movw	r1, #5362	; 0x14f2
   19562:	e7ee      	b.n	19542 <bt_gatt_unsubscribe+0x22>

	if (conn->state != BT_CONN_CONNECTED) {
   19564:	7a83      	ldrb	r3, [r0, #10]
   19566:	2b07      	cmp	r3, #7
   19568:	d15a      	bne.n	19620 <bt_gatt_unsubscribe+0x100>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   1956a:	f7fe faa7 	bl	17abc <gatt_sub_find>
	if (!sub) {
   1956e:	4606      	mov	r6, r0
   19570:	2800      	cmp	r0, #0
   19572:	d058      	beq.n	19626 <bt_gatt_unsubscribe+0x106>
	return list->head;
   19574:	6885      	ldr	r5, [r0, #8]
		return -EINVAL;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   19576:	2d00      	cmp	r5, #0
   19578:	d055      	beq.n	19626 <bt_gatt_unsubscribe+0x106>
   1957a:	2300      	movs	r3, #0
   1957c:	4698      	mov	r8, r3
   1957e:	3d18      	subs	r5, #24
		if (params == tmp) {
   19580:	42ac      	cmp	r4, r5
   19582:	d009      	beq.n	19598 <bt_gatt_unsubscribe+0x78>
			found = true;
			continue;
		}

		/* Check if there still remains any other subscription */
		if (tmp->value_handle == params->value_handle) {
   19584:	89a9      	ldrh	r1, [r5, #12]
   19586:	89a2      	ldrh	r2, [r4, #12]
			has_subscription = true;
   19588:	4291      	cmp	r1, r2
   1958a:	bf08      	it	eq
   1958c:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   19590:	69ad      	ldr	r5, [r5, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   19592:	b11d      	cbz	r5, 1959c <bt_gatt_unsubscribe+0x7c>
   19594:	3d18      	subs	r5, #24
   19596:	e7f3      	b.n	19580 <bt_gatt_unsubscribe+0x60>
			found = true;
   19598:	2301      	movs	r3, #1
   1959a:	e7f9      	b.n	19590 <bt_gatt_unsubscribe+0x70>
		}
	}

	if (!found) {
   1959c:	2b00      	cmp	r3, #0
   1959e:	d042      	beq.n	19626 <bt_gatt_unsubscribe+0x106>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   195a0:	f104 0014 	add.w	r0, r4, #20
   195a4:	f013 fc84 	bl	2ceb0 <atomic_get>
		return -EINVAL;
	}

	/* Attempt to cancel if write is pending */
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   195a8:	0743      	lsls	r3, r0, #29
   195aa:	d503      	bpl.n	195b4 <bt_gatt_unsubscribe+0x94>
		bt_gatt_cancel(conn, params);
   195ac:	4621      	mov	r1, r4
   195ae:	4638      	mov	r0, r7
   195b0:	f013 ff24 	bl	2d3fc <bt_gatt_cancel>
	}

	if (!has_subscription) {
   195b4:	f1b8 0f00 	cmp.w	r8, #0
   195b8:	d018      	beq.n	195ec <bt_gatt_unsubscribe+0xcc>
	return list->head;
   195ba:	68b3      	ldr	r3, [r6, #8]
		if (err) {
			return err;
		}
	}

	sys_slist_find_and_remove(&sub->list, &params->node);
   195bc:	f104 0218 	add.w	r2, r4, #24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   195c0:	b153      	cbz	r3, 195d8 <bt_gatt_unsubscribe+0xb8>
   195c2:	429a      	cmp	r2, r3
   195c4:	d122      	bne.n	1960c <bt_gatt_unsubscribe+0xec>
	return node->next;
   195c6:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   195c8:	b9d5      	cbnz	r5, 19600 <bt_gatt_unsubscribe+0xe0>
   195ca:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   195cc:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   195ce:	428a      	cmp	r2, r1
   195d0:	d100      	bne.n	195d4 <bt_gatt_unsubscribe+0xb4>
	list->tail = node;
   195d2:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   195d4:	2300      	movs	r3, #0
   195d6:	61a3      	str	r3, [r4, #24]

	if (gatt_sub_is_empty(sub)) {
   195d8:	68b3      	ldr	r3, [r6, #8]
   195da:	b913      	cbnz	r3, 195e2 <bt_gatt_unsubscribe+0xc2>
		gatt_sub_free(sub);
   195dc:	4630      	mov	r0, r6
   195de:	f7fe fa85 	bl	17aec <gatt_sub_free>
	}

	if (has_subscription) {
   195e2:	f1b8 0f00 	cmp.w	r8, #0
   195e6:	d114      	bne.n	19612 <bt_gatt_unsubscribe+0xf2>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}

	return 0;
   195e8:	2000      	movs	r0, #0
   195ea:	e007      	b.n	195fc <bt_gatt_unsubscribe+0xdc>
		err = gatt_write_ccc(conn, params);
   195ec:	4621      	mov	r1, r4
   195ee:	4638      	mov	r0, r7
		params->value = 0x0000;
   195f0:	f8a4 8010 	strh.w	r8, [r4, #16]
		err = gatt_write_ccc(conn, params);
   195f4:	f7fe fbb0 	bl	17d58 <gatt_write_ccc>
		if (err) {
   195f8:	2800      	cmp	r0, #0
   195fa:	d0de      	beq.n	195ba <bt_gatt_unsubscribe+0x9a>
}
   195fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19600:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   19602:	68f3      	ldr	r3, [r6, #12]
   19604:	429a      	cmp	r2, r3
	list->tail = node;
   19606:	bf08      	it	eq
   19608:	60f5      	streq	r5, [r6, #12]
}
   1960a:	e7e3      	b.n	195d4 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   1960c:	461d      	mov	r5, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1960e:	681b      	ldr	r3, [r3, #0]
   19610:	e7d6      	b.n	195c0 <bt_gatt_unsubscribe+0xa0>
		params->notify(conn, params, NULL, 0);
   19612:	2300      	movs	r3, #0
   19614:	4621      	mov	r1, r4
   19616:	461a      	mov	r2, r3
   19618:	4638      	mov	r0, r7
   1961a:	6825      	ldr	r5, [r4, #0]
   1961c:	47a8      	blx	r5
   1961e:	e7e3      	b.n	195e8 <bt_gatt_unsubscribe+0xc8>
		return -ENOTCONN;
   19620:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19624:	e7ea      	b.n	195fc <bt_gatt_unsubscribe+0xdc>
		return -EINVAL;
   19626:	f06f 0015 	mvn.w	r0, #21
   1962a:	e7e7      	b.n	195fc <bt_gatt_unsubscribe+0xdc>
   1962c:	00035d7c 	.word	0x00035d7c
   19630:	00037085 	.word	0x00037085
   19634:	00033bc2 	.word	0x00033bc2
   19638:	00037285 	.word	0x00037285
   1963c:	0003a804 	.word	0x0003a804

00019640 <bt_gatt_mult_notification>:
{
   19640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19644:	b087      	sub	sp, #28
   19646:	af00      	add	r7, sp, #0
   19648:	460c      	mov	r4, r1
   1964a:	4692      	mov	sl, r2
   1964c:	6078      	str	r0, [r7, #4]
	sub = gatt_sub_find(conn);
   1964e:	f7fe fa35 	bl	17abc <gatt_sub_find>
	if (!sub) {
   19652:	4680      	mov	r8, r0
   19654:	b340      	cbz	r0, 196a8 <bt_gatt_mult_notification+0x68>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   19656:	4652      	mov	r2, sl
   19658:	4621      	mov	r1, r4
   1965a:	f107 000c 	add.w	r0, r7, #12
   1965e:	f013 ff86 	bl	2d56e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   19662:	8a3b      	ldrh	r3, [r7, #16]
   19664:	2b04      	cmp	r3, #4
   19666:	d91f      	bls.n	196a8 <bt_gatt_mult_notification+0x68>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   19668:	2104      	movs	r1, #4
   1966a:	f107 000c 	add.w	r0, r7, #12
   1966e:	f000 fbb9 	bl	19de4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   19672:	8a3a      	ldrh	r2, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   19674:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   19678:	4605      	mov	r5, r0
		if (len > buf.len) {
   1967a:	454a      	cmp	r2, r9
		handle = sys_cpu_to_le16(nfy->handle);
   1967c:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   19680:	d216      	bcs.n	196b0 <bt_gatt_mult_notification+0x70>
			LOG_ERR("Invalid data len %u > %u", len, length);
   19682:	466c      	mov	r4, sp
   19684:	b08a      	sub	sp, #40	; 0x28
   19686:	466a      	mov	r2, sp
   19688:	2305      	movs	r3, #5
   1968a:	491f      	ldr	r1, [pc, #124]	; (19708 <bt_gatt_mult_notification+0xc8>)
   1968c:	f8c2 a020 	str.w	sl, [r2, #32]
   19690:	6151      	str	r1, [r2, #20]
   19692:	491e      	ldr	r1, [pc, #120]	; (1970c <bt_gatt_mult_notification+0xcc>)
   19694:	481e      	ldr	r0, [pc, #120]	; (19710 <bt_gatt_mult_notification+0xd0>)
   19696:	e9c2 1906 	strd	r1, r9, [r2, #24]
   1969a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1969e:	f842 3f10 	str.w	r3, [r2, #16]!
   196a2:	f013 fd1e 	bl	2d0e2 <z_log_msg_static_create.constprop.0>
   196a6:	46a5      	mov	sp, r4
}
   196a8:	371c      	adds	r7, #28
   196aa:	46bd      	mov	sp, r7
   196ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   196b0:	f8d8 6008 	ldr.w	r6, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   196b4:	b1fe      	cbz	r6, 196f6 <bt_gatt_mult_notification+0xb6>
	return node->next;
   196b6:	6834      	ldr	r4, [r6, #0]
   196b8:	b104      	cbz	r4, 196bc <bt_gatt_mult_notification+0x7c>
   196ba:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   196bc:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
   196c0:	455a      	cmp	r2, fp
   196c2:	d115      	bne.n	196f0 <bt_gatt_mult_notification+0xb0>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   196c4:	3e18      	subs	r6, #24
   196c6:	e007      	b.n	196d8 <bt_gatt_mult_notification+0x98>
   196c8:	4626      	mov	r6, r4
   196ca:	69a4      	ldr	r4, [r4, #24]
   196cc:	89b2      	ldrh	r2, [r6, #12]
   196ce:	b1c4      	cbz	r4, 19702 <bt_gatt_mult_notification+0xc2>
			if (handle != params->value_handle) {
   196d0:	455a      	cmp	r2, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   196d2:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   196d6:	d1f7      	bne.n	196c8 <bt_gatt_mult_notification+0x88>
				if (params->notify(conn, params, nfy->value, len) ==
   196d8:	464b      	mov	r3, r9
   196da:	4631      	mov	r1, r6
   196dc:	6878      	ldr	r0, [r7, #4]
   196de:	f8d6 c000 	ldr.w	ip, [r6]
   196e2:	1d2a      	adds	r2, r5, #4
   196e4:	47e0      	blx	ip
   196e6:	b918      	cbnz	r0, 196f0 <bt_gatt_mult_notification+0xb0>
					bt_gatt_unsubscribe(conn, params);
   196e8:	4631      	mov	r1, r6
   196ea:	6878      	ldr	r0, [r7, #4]
   196ec:	f7ff ff18 	bl	19520 <bt_gatt_unsubscribe>
   196f0:	4626      	mov	r6, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   196f2:	2c00      	cmp	r4, #0
   196f4:	d1e9      	bne.n	196ca <bt_gatt_mult_notification+0x8a>
		net_buf_simple_pull_mem(&buf, len);
   196f6:	4649      	mov	r1, r9
   196f8:	f107 000c 	add.w	r0, r7, #12
   196fc:	f000 fb72 	bl	19de4 <net_buf_simple_pull_mem>
   19700:	e7af      	b.n	19662 <bt_gatt_mult_notification+0x22>
			if (handle != params->value_handle) {
   19702:	455a      	cmp	r2, fp
   19704:	d0e8      	beq.n	196d8 <bt_gatt_mult_notification+0x98>
   19706:	e7f6      	b.n	196f6 <bt_gatt_mult_notification+0xb6>
   19708:	000374ae 	.word	0x000374ae
   1970c:	00037590 	.word	0x00037590
   19710:	00031ba4 	.word	0x00031ba4

00019714 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19714:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   19716:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   19718:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1971a:	466b      	mov	r3, sp
   1971c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19720:	4a03      	ldr	r2, [pc, #12]	; (19730 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   19722:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19726:	f013 fdd7 	bl	2d2d8 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1972a:	b003      	add	sp, #12
   1972c:	f85d fb04 	ldr.w	pc, [sp], #4
   19730:	00018741 	.word	0x00018741

00019734 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   19734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19736:	4605      	mov	r5, r0
   19738:	460e      	mov	r6, r1
   1973a:	4617      	mov	r7, r2
	return list->head;
   1973c:	4b06      	ldr	r3, [pc, #24]	; (19758 <bt_gatt_att_max_mtu_changed+0x24>)
   1973e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19740:	b14c      	cbz	r4, 19756 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   19742:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19746:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   19748:	b11b      	cbz	r3, 19752 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1974a:	463a      	mov	r2, r7
   1974c:	4631      	mov	r1, r6
   1974e:	4628      	mov	r0, r5
   19750:	4798      	blx	r3
	return node->next;
   19752:	6864      	ldr	r4, [r4, #4]
   19754:	e7f4      	b.n	19740 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   19756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19758:	2000e420 	.word	0x2000e420

0001975c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1975c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19760:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19762:	4603      	mov	r3, r0
   19764:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19768:	2001      	movs	r0, #1
   1976a:	4a2d      	ldr	r2, [pc, #180]	; (19820 <bt_gatt_disconnected+0xc4>)
   1976c:	f013 fdb4 	bl	2d2d8 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   19770:	4620      	mov	r0, r4
   19772:	f7fe f9a3 	bl	17abc <gatt_sub_find>
	if (!sub) {
   19776:	4606      	mov	r6, r0
   19778:	b938      	cbnz	r0, 1978a <bt_gatt_disconnected+0x2e>
	cfg = find_cf_cfg(conn);
   1977a:	4620      	mov	r0, r4
   1977c:	f7fe f960 	bl	17a40 <find_cf_cfg>
	if (!cfg) {
   19780:	4605      	mov	r5, r0
   19782:	2800      	cmp	r0, #0
   19784:	d139      	bne.n	197fa <bt_gatt_disconnected+0x9e>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1978a:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1978c:	2d00      	cmp	r5, #0
   1978e:	d0f4      	beq.n	1977a <bt_gatt_disconnected+0x1e>
	return node->next;
   19790:	f855 7918 	ldr.w	r7, [r5], #-24
   19794:	b107      	cbz	r7, 19798 <bt_gatt_disconnected+0x3c>
   19796:	3f18      	subs	r7, #24
{
   19798:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1979c:	f104 0990 	add.w	r9, r4, #144	; 0x90
			params->value = 0U;
   197a0:	46c2      	mov	sl, r8
   197a2:	e001      	b.n	197a8 <bt_gatt_disconnected+0x4c>
{
   197a4:	463d      	mov	r5, r7
   197a6:	461f      	mov	r7, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
   197a8:	f105 0b14 	add.w	fp, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   197ac:	f06f 0108 	mvn.w	r1, #8
   197b0:	4658      	mov	r0, fp
   197b2:	f013 fb8b 	bl	2cecc <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   197b6:	4649      	mov	r1, r9
   197b8:	7a20      	ldrb	r0, [r4, #8]
   197ba:	f012 fcf9 	bl	2c1b0 <bt_addr_le_is_bonded>
   197be:	b970      	cbnz	r0, 197de <bt_gatt_disconnected+0x82>
			gatt_sub_remove(conn, sub, prev, params);
   197c0:	462b      	mov	r3, r5
   197c2:	4642      	mov	r2, r8
   197c4:	4631      	mov	r1, r6
   197c6:	4620      	mov	r0, r4
			params->value = 0U;
   197c8:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   197cc:	f013 fbdc 	bl	2cf88 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   197d0:	2f00      	cmp	r7, #0
   197d2:	d0d2      	beq.n	1977a <bt_gatt_disconnected+0x1e>
   197d4:	69bb      	ldr	r3, [r7, #24]
   197d6:	2b00      	cmp	r3, #0
   197d8:	d0e4      	beq.n	197a4 <bt_gatt_disconnected+0x48>
   197da:	3b18      	subs	r3, #24
   197dc:	e7e2      	b.n	197a4 <bt_gatt_disconnected+0x48>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   197de:	4658      	mov	r0, fp
   197e0:	f013 fb66 	bl	2ceb0 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   197e4:	07c3      	lsls	r3, r0, #31
   197e6:	d4eb      	bmi.n	197c0 <bt_gatt_disconnected+0x64>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   197e8:	7873      	ldrb	r3, [r6, #1]
   197ea:	b11b      	cbz	r3, 197f4 <bt_gatt_disconnected+0x98>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   197ec:	4649      	mov	r1, r9
   197ee:	1c70      	adds	r0, r6, #1
   197f0:	f013 fbc3 	bl	2cf7a <bt_addr_le_copy>
			prev = &params->node;
   197f4:	f105 0818 	add.w	r8, r5, #24
   197f8:	e7ea      	b.n	197d0 <bt_gatt_disconnected+0x74>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   197fa:	f104 0690 	add.w	r6, r4, #144	; 0x90
   197fe:	4631      	mov	r1, r6
   19800:	7a20      	ldrb	r0, [r4, #8]
   19802:	f012 fcd5 	bl	2c1b0 <bt_addr_le_is_bonded>
   19806:	b920      	cbnz	r0, 19812 <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
   19808:	4628      	mov	r0, r5
}
   1980a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1980e:	f7fe ba51 	b.w	17cb4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19812:	4631      	mov	r1, r6
   19814:	1c68      	adds	r0, r5, #1
}
   19816:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1981a:	f013 bbae 	b.w	2cf7a <bt_addr_le_copy>
   1981e:	bf00      	nop
   19820:	00017d89 	.word	0x00017d89

00019824 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19824:	b580      	push	{r7, lr}
   19826:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   19828:	b088      	sub	sp, #32
   1982a:	466a      	mov	r2, sp
   1982c:	4b08      	ldr	r3, [pc, #32]	; (19850 <bt_smp_accept.part.0+0x2c>)
   1982e:	6153      	str	r3, [r2, #20]
   19830:	4b08      	ldr	r3, [pc, #32]	; (19854 <bt_smp_accept.part.0+0x30>)
   19832:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19836:	2304      	movs	r3, #4
   19838:	f842 3f10 	str.w	r3, [r2, #16]!
   1983c:	2300      	movs	r3, #0
   1983e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19842:	4805      	ldr	r0, [pc, #20]	; (19858 <bt_smp_accept.part.0+0x34>)
   19844:	f7f5 ffd4 	bl	f7f0 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   19848:	f06f 000b 	mvn.w	r0, #11
   1984c:	46bd      	mov	sp, r7
   1984e:	bd80      	pop	{r7, pc}
   19850:	00037611 	.word	0x00037611
   19854:	0003763a 	.word	0x0003763a
   19858:	00031bdc 	.word	0x00031bdc

0001985c <bt_smp_accept>:
		if (smp->chan.conn) {
   1985c:	4b04      	ldr	r3, [pc, #16]	; (19870 <bt_smp_accept+0x14>)
   1985e:	681a      	ldr	r2, [r3, #0]
   19860:	b10a      	cbz	r2, 19866 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   19862:	f7ff bfdf 	b.w	19824 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   19866:	4803      	ldr	r0, [pc, #12]	; (19874 <bt_smp_accept+0x18>)
   19868:	6058      	str	r0, [r3, #4]
}
   1986a:	4610      	mov	r0, r2
		*chan = &smp->chan;
   1986c:	600b      	str	r3, [r1, #0]
}
   1986e:	4770      	bx	lr
   19870:	2000e438 	.word	0x2000e438
   19874:	00032474 	.word	0x00032474

00019878 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19878:	2234      	movs	r2, #52	; 0x34
   1987a:	4b02      	ldr	r3, [pc, #8]	; (19884 <net_buf_pool_get+0xc>)
   1987c:	fb02 3000 	mla	r0, r2, r0, r3
   19880:	4770      	bx	lr
   19882:	bf00      	nop
   19884:	2000cf88 	.word	0x2000cf88

00019888 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19888:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1988a:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1988c:	4b06      	ldr	r3, [pc, #24]	; (198a8 <net_buf_id+0x20>)
   1988e:	fb01 3302 	mla	r3, r1, r2, r3
   19892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19898:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1989a:	331b      	adds	r3, #27
   1989c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   198a0:	fbb0 f0f3 	udiv	r0, r0, r3
   198a4:	4770      	bx	lr
   198a6:	bf00      	nop
   198a8:	2000cf88 	.word	0x2000cf88

000198ac <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   198ac:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   198ae:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   198b0:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   198b2:	4b09      	ldr	r3, [pc, #36]	; (198d8 <fixed_data_alloc+0x2c>)
   198b4:	fb04 3302 	mla	r3, r4, r2, r3
   198b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   198ba:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   198bc:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   198be:	681a      	ldr	r2, [r3, #0]
   198c0:	4294      	cmp	r4, r2
   198c2:	bf94      	ite	ls
   198c4:	600c      	strls	r4, [r1, #0]
   198c6:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   198c8:	e9d3 5400 	ldrd	r5, r4, [r3]
   198cc:	f7ff ffdc 	bl	19888 <net_buf_id>
}
   198d0:	fb05 4000 	mla	r0, r5, r0, r4
   198d4:	bd38      	pop	{r3, r4, r5, pc}
   198d6:	bf00      	nop
   198d8:	2000cf88 	.word	0x2000cf88

000198dc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   198dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e0:	b085      	sub	sp, #20
   198e2:	9103      	str	r1, [sp, #12]
   198e4:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   198e6:	4619      	mov	r1, r3
   198e8:	4610      	mov	r0, r2
{
   198ea:	4692      	mov	sl, r2
   198ec:	4699      	mov	r9, r3
   198ee:	4690      	mov	r8, r2
   198f0:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   198f2:	f016 fe7d 	bl	305f0 <sys_clock_timeout_end_calc>
   198f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   198fa:	b945      	cbnz	r5, 1990e <net_buf_alloc_len+0x32>
   198fc:	4966      	ldr	r1, [pc, #408]	; (19a98 <net_buf_alloc_len+0x1bc>)
   198fe:	23f4      	movs	r3, #244	; 0xf4
   19900:	4a66      	ldr	r2, [pc, #408]	; (19a9c <net_buf_alloc_len+0x1c0>)
   19902:	4867      	ldr	r0, [pc, #412]	; (19aa0 <net_buf_alloc_len+0x1c4>)
   19904:	f011 fa58 	bl	2adb8 <assert_print>
   19908:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1990a:	4864      	ldr	r0, [pc, #400]	; (19a9c <net_buf_alloc_len+0x1c0>)
   1990c:	e019      	b.n	19942 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1990e:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   19912:	f04f 0320 	mov.w	r3, #32
   19916:	f3ef 8b11 	mrs	fp, BASEPRI
   1991a:	f383 8812 	msr	BASEPRI_MAX, r3
   1991e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19922:	4630      	mov	r0, r6
   19924:	f00b f97c 	bl	24c20 <z_spin_lock_valid>
   19928:	b968      	cbnz	r0, 19946 <net_buf_alloc_len+0x6a>
   1992a:	2394      	movs	r3, #148	; 0x94
   1992c:	4a5d      	ldr	r2, [pc, #372]	; (19aa4 <net_buf_alloc_len+0x1c8>)
   1992e:	495e      	ldr	r1, [pc, #376]	; (19aa8 <net_buf_alloc_len+0x1cc>)
   19930:	485b      	ldr	r0, [pc, #364]	; (19aa0 <net_buf_alloc_len+0x1c4>)
   19932:	f011 fa41 	bl	2adb8 <assert_print>
   19936:	4631      	mov	r1, r6
   19938:	485c      	ldr	r0, [pc, #368]	; (19aac <net_buf_alloc_len+0x1d0>)
   1993a:	f011 fa3d 	bl	2adb8 <assert_print>
   1993e:	2194      	movs	r1, #148	; 0x94
   19940:	4858      	ldr	r0, [pc, #352]	; (19aa4 <net_buf_alloc_len+0x1c8>)
   19942:	f011 fa32 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   19946:	4630      	mov	r0, r6
   19948:	f00b f986 	bl	24c58 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1994c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1994e:	2b00      	cmp	r3, #0
   19950:	d070      	beq.n	19a34 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   19952:	8c2a      	ldrh	r2, [r5, #32]
   19954:	429a      	cmp	r2, r3
   19956:	d94d      	bls.n	199f4 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   19958:	2200      	movs	r2, #0
   1995a:	2300      	movs	r3, #0
   1995c:	4628      	mov	r0, r5
   1995e:	f00b fbad 	bl	250bc <z_impl_k_queue_get>
			if (buf) {
   19962:	4604      	mov	r4, r0
   19964:	2800      	cmp	r0, #0
   19966:	d045      	beq.n	199f4 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19968:	4630      	mov	r0, r6
   1996a:	f00b f967 	bl	24c3c <z_spin_unlock_valid>
   1996e:	b958      	cbnz	r0, 19988 <net_buf_alloc_len+0xac>
   19970:	23c2      	movs	r3, #194	; 0xc2
   19972:	4a4c      	ldr	r2, [pc, #304]	; (19aa4 <net_buf_alloc_len+0x1c8>)
   19974:	494e      	ldr	r1, [pc, #312]	; (19ab0 <net_buf_alloc_len+0x1d4>)
   19976:	484a      	ldr	r0, [pc, #296]	; (19aa0 <net_buf_alloc_len+0x1c4>)
   19978:	f011 fa1e 	bl	2adb8 <assert_print>
   1997c:	4631      	mov	r1, r6
   1997e:	484d      	ldr	r0, [pc, #308]	; (19ab4 <net_buf_alloc_len+0x1d8>)
   19980:	f011 fa1a 	bl	2adb8 <assert_print>
   19984:	21c2      	movs	r1, #194	; 0xc2
   19986:	e7db      	b.n	19940 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   19988:	f38b 8811 	msr	BASEPRI, fp
   1998c:	f3bf 8f6f 	isb	sy
	if (size) {
   19990:	9d03      	ldr	r5, [sp, #12]
   19992:	2d00      	cmp	r5, #0
   19994:	d074      	beq.n	19a80 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19996:	ea59 030a 	orrs.w	r3, r9, sl
   1999a:	d012      	beq.n	199c2 <net_buf_alloc_len+0xe6>
   1999c:	f1b9 3fff 	cmp.w	r9, #4294967295
   199a0:	bf08      	it	eq
   199a2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   199a6:	d00c      	beq.n	199c2 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   199a8:	f00d fe16 	bl	275d8 <sys_clock_tick_get>
   199ac:	9b01      	ldr	r3, [sp, #4]
   199ae:	ebb3 0800 	subs.w	r8, r3, r0
   199b2:	9b02      	ldr	r3, [sp, #8]
   199b4:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   199b8:	2f00      	cmp	r7, #0
   199ba:	bfbc      	itt	lt
   199bc:	f04f 0800 	movlt.w	r8, #0
   199c0:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   199c2:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   199c6:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   199c8:	4e3b      	ldr	r6, [pc, #236]	; (19ab8 <net_buf_alloc_len+0x1dc>)
   199ca:	4642      	mov	r2, r8
   199cc:	fb09 6303 	mla	r3, r9, r3, r6
   199d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   199d2:	4620      	mov	r0, r4
   199d4:	681b      	ldr	r3, [r3, #0]
   199d6:	a903      	add	r1, sp, #12
   199d8:	f8d3 a000 	ldr.w	sl, [r3]
   199dc:	463b      	mov	r3, r7
   199de:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   199e0:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   199e2:	2800      	cmp	r0, #0
   199e4:	d13c      	bne.n	19a60 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   199e6:	7aa0      	ldrb	r0, [r4, #10]
   199e8:	4621      	mov	r1, r4
   199ea:	fb00 6009 	mla	r0, r0, r9, r6
   199ee:	f016 fd3d 	bl	3046c <k_queue_prepend>
}
   199f2:	e030      	b.n	19a56 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   199f4:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   199f6:	4630      	mov	r0, r6
   199f8:	1e63      	subs	r3, r4, #1
   199fa:	846b      	strh	r3, [r5, #34]	; 0x22
   199fc:	f00b f91e 	bl	24c3c <z_spin_unlock_valid>
   19a00:	2800      	cmp	r0, #0
   19a02:	d0b5      	beq.n	19970 <net_buf_alloc_len+0x94>
   19a04:	f38b 8811 	msr	BASEPRI, fp
   19a08:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19a0c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19a10:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19a12:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19a14:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19a16:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19a18:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19a1c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   19a20:	4b25      	ldr	r3, [pc, #148]	; (19ab8 <net_buf_alloc_len+0x1dc>)
   19a22:	4a26      	ldr	r2, [pc, #152]	; (19abc <net_buf_alloc_len+0x1e0>)
   19a24:	1aeb      	subs	r3, r5, r3
   19a26:	109b      	asrs	r3, r3, #2
   19a28:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   19a2a:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   19a2c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   19a30:	72e3      	strb	r3, [r4, #11]
		goto success;
   19a32:	e7ad      	b.n	19990 <net_buf_alloc_len+0xb4>
   19a34:	4630      	mov	r0, r6
   19a36:	f00b f901 	bl	24c3c <z_spin_unlock_valid>
   19a3a:	2800      	cmp	r0, #0
   19a3c:	d098      	beq.n	19970 <net_buf_alloc_len+0x94>
   19a3e:	f38b 8811 	msr	BASEPRI, fp
   19a42:	f3bf 8f6f 	isb	sy
   19a46:	4652      	mov	r2, sl
   19a48:	464b      	mov	r3, r9
   19a4a:	4628      	mov	r0, r5
   19a4c:	f00b fb36 	bl	250bc <z_impl_k_queue_get>
	if (!buf) {
   19a50:	4604      	mov	r4, r0
   19a52:	2800      	cmp	r0, #0
   19a54:	d19c      	bne.n	19990 <net_buf_alloc_len+0xb4>
		return NULL;
   19a56:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19a58:	4620      	mov	r0, r4
   19a5a:	b005      	add	sp, #20
   19a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   19a60:	9b03      	ldr	r3, [sp, #12]
   19a62:	429d      	cmp	r5, r3
   19a64:	d90d      	bls.n	19a82 <net_buf_alloc_len+0x1a6>
   19a66:	4916      	ldr	r1, [pc, #88]	; (19ac0 <net_buf_alloc_len+0x1e4>)
   19a68:	f240 1355 	movw	r3, #341	; 0x155
   19a6c:	4a0b      	ldr	r2, [pc, #44]	; (19a9c <net_buf_alloc_len+0x1c0>)
   19a6e:	480c      	ldr	r0, [pc, #48]	; (19aa0 <net_buf_alloc_len+0x1c4>)
   19a70:	f011 f9a2 	bl	2adb8 <assert_print>
   19a74:	4813      	ldr	r0, [pc, #76]	; (19ac4 <net_buf_alloc_len+0x1e8>)
   19a76:	f011 f99f 	bl	2adb8 <assert_print>
   19a7a:	f240 1155 	movw	r1, #341	; 0x155
   19a7e:	e744      	b.n	1990a <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   19a80:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   19a82:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19a84:	2201      	movs	r2, #1
	buf->frags = NULL;
   19a86:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   19a88:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   19a8a:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   19a8c:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   19a8e:	6963      	ldr	r3, [r4, #20]
   19a90:	8262      	strh	r2, [r4, #18]
   19a92:	60e3      	str	r3, [r4, #12]
}
   19a94:	e7e0      	b.n	19a58 <net_buf_alloc_len+0x17c>
   19a96:	bf00      	nop
   19a98:	0003769e 	.word	0x0003769e
   19a9c:	0003764f 	.word	0x0003764f
   19aa0:	00033bc2 	.word	0x00033bc2
   19aa4:	000340d9 	.word	0x000340d9
   19aa8:	00034132 	.word	0x00034132
   19aac:	00034147 	.word	0x00034147
   19ab0:	00034106 	.word	0x00034106
   19ab4:	0003411d 	.word	0x0003411d
   19ab8:	2000cf88 	.word	0x2000cf88
   19abc:	c4ec4ec5 	.word	0xc4ec4ec5
   19ac0:	000376a3 	.word	0x000376a3
   19ac4:	00034662 	.word	0x00034662

00019ac8 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   19ac8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   19aca:	b958      	cbnz	r0, 19ae4 <net_buf_put+0x1c>
   19acc:	490d      	ldr	r1, [pc, #52]	; (19b04 <net_buf_put+0x3c>)
   19ace:	f240 13cd 	movw	r3, #461	; 0x1cd
   19ad2:	4a0d      	ldr	r2, [pc, #52]	; (19b08 <net_buf_put+0x40>)
   19ad4:	480d      	ldr	r0, [pc, #52]	; (19b0c <net_buf_put+0x44>)
   19ad6:	f011 f96f 	bl	2adb8 <assert_print>
   19ada:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   19ade:	480a      	ldr	r0, [pc, #40]	; (19b08 <net_buf_put+0x40>)
   19ae0:	f011 f963 	bl	2adaa <assert_post_action>
   19ae4:	b949      	cbnz	r1, 19afa <net_buf_put+0x32>
   19ae6:	490a      	ldr	r1, [pc, #40]	; (19b10 <net_buf_put+0x48>)
   19ae8:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   19aec:	4a06      	ldr	r2, [pc, #24]	; (19b08 <net_buf_put+0x40>)
   19aee:	4807      	ldr	r0, [pc, #28]	; (19b0c <net_buf_put+0x44>)
   19af0:	f011 f962 	bl	2adb8 <assert_print>
   19af4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   19af8:	e7f1      	b.n	19ade <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   19afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   19afe:	f016 bcaa 	b.w	30456 <k_queue_append>
   19b02:	bf00      	nop
   19b04:	000376b9 	.word	0x000376b9
   19b08:	0003764f 	.word	0x0003764f
   19b0c:	00033bc2 	.word	0x00033bc2
   19b10:	000376ce 	.word	0x000376ce

00019b14 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19b18:	4605      	mov	r5, r0
   19b1a:	b328      	cbz	r0, 19b68 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19b1c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   19b1e:	f04f 0834 	mov.w	r8, #52	; 0x34
   19b22:	4e1a      	ldr	r6, [pc, #104]	; (19b8c <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   19b24:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   19b26:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   19b28:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   19b2a:	3b01      	subs	r3, #1
   19b2c:	b2db      	uxtb	r3, r3
   19b2e:	7223      	strb	r3, [r4, #8]
   19b30:	b9c3      	cbnz	r3, 19b64 <net_buf_unref+0x50>
		if (buf->__buf) {
   19b32:	6961      	ldr	r1, [r4, #20]
   19b34:	b159      	cbz	r1, 19b4e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19b36:	7a63      	ldrb	r3, [r4, #9]
   19b38:	07db      	lsls	r3, r3, #31
   19b3a:	d407      	bmi.n	19b4c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19b3c:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   19b3e:	4620      	mov	r0, r4
   19b40:	fb08 6303 	mla	r3, r8, r3, r6
   19b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19b46:	681b      	ldr	r3, [r3, #0]
   19b48:	689b      	ldr	r3, [r3, #8]
   19b4a:	4798      	blx	r3
			buf->__buf = NULL;
   19b4c:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   19b4e:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   19b50:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   19b52:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   19b56:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   19b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19b5a:	b18b      	cbz	r3, 19b80 <net_buf_unref+0x6c>
			pool->destroy(buf);
   19b5c:	4620      	mov	r0, r4
   19b5e:	4798      	blx	r3
	while (buf) {
   19b60:	2d00      	cmp	r5, #0
   19b62:	d1df      	bne.n	19b24 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   19b68:	4909      	ldr	r1, [pc, #36]	; (19b90 <net_buf_unref+0x7c>)
   19b6a:	480a      	ldr	r0, [pc, #40]	; (19b94 <net_buf_unref+0x80>)
   19b6c:	f240 13d9 	movw	r3, #473	; 0x1d9
   19b70:	4a09      	ldr	r2, [pc, #36]	; (19b98 <net_buf_unref+0x84>)
   19b72:	f011 f921 	bl	2adb8 <assert_print>
   19b76:	f240 11d9 	movw	r1, #473	; 0x1d9
   19b7a:	4807      	ldr	r0, [pc, #28]	; (19b98 <net_buf_unref+0x84>)
   19b7c:	f011 f915 	bl	2adaa <assert_post_action>
	k_lifo_put(&pool->free, buf);
   19b80:	4621      	mov	r1, r4
   19b82:	fb00 6008 	mla	r0, r0, r8, r6
   19b86:	f016 fc71 	bl	3046c <k_queue_prepend>
}
   19b8a:	e7e9      	b.n	19b60 <net_buf_unref+0x4c>
   19b8c:	2000cf88 	.word	0x2000cf88
   19b90:	000376ce 	.word	0x000376ce
   19b94:	00033bc2 	.word	0x00033bc2
   19b98:	0003764f 	.word	0x0003764f

00019b9c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   19b9c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19b9e:	b958      	cbnz	r0, 19bb8 <net_buf_ref+0x1c>
   19ba0:	4907      	ldr	r1, [pc, #28]	; (19bc0 <net_buf_ref+0x24>)
   19ba2:	4808      	ldr	r0, [pc, #32]	; (19bc4 <net_buf_ref+0x28>)
   19ba4:	f44f 7302 	mov.w	r3, #520	; 0x208
   19ba8:	4a07      	ldr	r2, [pc, #28]	; (19bc8 <net_buf_ref+0x2c>)
   19baa:	f011 f905 	bl	2adb8 <assert_print>
   19bae:	f44f 7102 	mov.w	r1, #520	; 0x208
   19bb2:	4805      	ldr	r0, [pc, #20]	; (19bc8 <net_buf_ref+0x2c>)
   19bb4:	f011 f8f9 	bl	2adaa <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19bb8:	7a02      	ldrb	r2, [r0, #8]
   19bba:	3201      	adds	r2, #1
   19bbc:	7202      	strb	r2, [r0, #8]
	return buf;
}
   19bbe:	bd08      	pop	{r3, pc}
   19bc0:	000376ce 	.word	0x000376ce
   19bc4:	00033bc2 	.word	0x00033bc2
   19bc8:	0003764f 	.word	0x0003764f

00019bcc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   19bcc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19bce:	4603      	mov	r3, r0
   19bd0:	b958      	cbnz	r0, 19bea <net_buf_frag_last+0x1e>
   19bd2:	4908      	ldr	r1, [pc, #32]	; (19bf4 <net_buf_frag_last+0x28>)
   19bd4:	4808      	ldr	r0, [pc, #32]	; (19bf8 <net_buf_frag_last+0x2c>)
   19bd6:	f240 2345 	movw	r3, #581	; 0x245
   19bda:	4a08      	ldr	r2, [pc, #32]	; (19bfc <net_buf_frag_last+0x30>)
   19bdc:	f011 f8ec 	bl	2adb8 <assert_print>
   19be0:	f240 2145 	movw	r1, #581	; 0x245
   19be4:	4805      	ldr	r0, [pc, #20]	; (19bfc <net_buf_frag_last+0x30>)
   19be6:	f011 f8e0 	bl	2adaa <assert_post_action>

	while (buf->frags) {
   19bea:	4618      	mov	r0, r3
   19bec:	685b      	ldr	r3, [r3, #4]
   19bee:	2b00      	cmp	r3, #0
   19bf0:	d1fb      	bne.n	19bea <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   19bf2:	bd08      	pop	{r3, pc}
   19bf4:	000376ce 	.word	0x000376ce
   19bf8:	00033bc2 	.word	0x00033bc2
   19bfc:	0003764f 	.word	0x0003764f

00019c00 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   19c00:	b570      	push	{r4, r5, r6, lr}
   19c02:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   19c04:	4604      	mov	r4, r0
   19c06:	b958      	cbnz	r0, 19c20 <net_buf_frag_insert+0x20>
   19c08:	490f      	ldr	r1, [pc, #60]	; (19c48 <net_buf_frag_insert+0x48>)
   19c0a:	f44f 7314 	mov.w	r3, #592	; 0x250
   19c0e:	4a0f      	ldr	r2, [pc, #60]	; (19c4c <net_buf_frag_insert+0x4c>)
   19c10:	480f      	ldr	r0, [pc, #60]	; (19c50 <net_buf_frag_insert+0x50>)
   19c12:	f011 f8d1 	bl	2adb8 <assert_print>
   19c16:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   19c1a:	480c      	ldr	r0, [pc, #48]	; (19c4c <net_buf_frag_insert+0x4c>)
   19c1c:	f011 f8c5 	bl	2adaa <assert_post_action>
   19c20:	b949      	cbnz	r1, 19c36 <net_buf_frag_insert+0x36>
   19c22:	490c      	ldr	r1, [pc, #48]	; (19c54 <net_buf_frag_insert+0x54>)
   19c24:	f240 2351 	movw	r3, #593	; 0x251
   19c28:	4a08      	ldr	r2, [pc, #32]	; (19c4c <net_buf_frag_insert+0x4c>)
   19c2a:	4809      	ldr	r0, [pc, #36]	; (19c50 <net_buf_frag_insert+0x50>)
   19c2c:	f011 f8c4 	bl	2adb8 <assert_print>
   19c30:	f240 2151 	movw	r1, #593	; 0x251
   19c34:	e7f1      	b.n	19c1a <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   19c36:	6846      	ldr	r6, [r0, #4]
   19c38:	b11e      	cbz	r6, 19c42 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   19c3a:	4608      	mov	r0, r1
   19c3c:	f7ff ffc6 	bl	19bcc <net_buf_frag_last>
   19c40:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   19c42:	6065      	str	r5, [r4, #4]
}
   19c44:	bd70      	pop	{r4, r5, r6, pc}
   19c46:	bf00      	nop
   19c48:	000376be 	.word	0x000376be
   19c4c:	0003764f 	.word	0x0003764f
   19c50:	00033bc2 	.word	0x00033bc2
   19c54:	000376c5 	.word	0x000376c5

00019c58 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19c58:	b538      	push	{r3, r4, r5, lr}
   19c5a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   19c5c:	460c      	mov	r4, r1
   19c5e:	b959      	cbnz	r1, 19c78 <net_buf_frag_add+0x20>
   19c60:	490c      	ldr	r1, [pc, #48]	; (19c94 <net_buf_frag_add+0x3c>)
   19c62:	480d      	ldr	r0, [pc, #52]	; (19c98 <net_buf_frag_add+0x40>)
   19c64:	f44f 7317 	mov.w	r3, #604	; 0x25c
   19c68:	4a0c      	ldr	r2, [pc, #48]	; (19c9c <net_buf_frag_add+0x44>)
   19c6a:	f011 f8a5 	bl	2adb8 <assert_print>
   19c6e:	f44f 7117 	mov.w	r1, #604	; 0x25c
   19c72:	480a      	ldr	r0, [pc, #40]	; (19c9c <net_buf_frag_add+0x44>)
   19c74:	f011 f899 	bl	2adaa <assert_post_action>

	if (!head) {
   19c78:	b920      	cbnz	r0, 19c84 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   19c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   19c7e:	4608      	mov	r0, r1
   19c80:	f7ff bf8c 	b.w	19b9c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19c84:	f7ff ffa2 	bl	19bcc <net_buf_frag_last>
   19c88:	4621      	mov	r1, r4
   19c8a:	f7ff ffb9 	bl	19c00 <net_buf_frag_insert>
}
   19c8e:	4628      	mov	r0, r5
   19c90:	bd38      	pop	{r3, r4, r5, pc}
   19c92:	bf00      	nop
   19c94:	000376c5 	.word	0x000376c5
   19c98:	00033bc2 	.word	0x00033bc2
   19c9c:	0003764f 	.word	0x0003764f

00019ca0 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   19ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ca4:	4607      	mov	r7, r0
   19ca6:	460d      	mov	r5, r1
   19ca8:	4616      	mov	r6, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   19caa:	f7ff ff8f 	bl	19bcc <net_buf_frag_last>
	size_t added_len = 0;
   19cae:	f04f 0800 	mov.w	r8, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   19cb2:	4604      	mov	r4, r0
	return &_net_buf_pool_list[id];
   19cb4:	f04f 0a34 	mov.w	sl, #52	; 0x34
   19cb8:	f8df b064 	ldr.w	fp, [pc, #100]	; 19d20 <net_buf_append_bytes+0x80>
	return net_buf_simple_tailroom(&buf->b);
   19cbc:	340c      	adds	r4, #12
   19cbe:	4620      	mov	r0, r4
   19cc0:	f013 fc6f 	bl	2d5a2 <net_buf_simple_tailroom>
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   19cc4:	4285      	cmp	r5, r0
   19cc6:	d31b      	bcc.n	19d00 <net_buf_append_bytes+0x60>
   19cc8:	4620      	mov	r0, r4
   19cca:	f013 fc6a 	bl	2d5a2 <net_buf_simple_tailroom>
   19cce:	fa1f f980 	uxth.w	r9, r0
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19cd2:	4631      	mov	r1, r6
   19cd4:	464a      	mov	r2, r9
   19cd6:	4620      	mov	r0, r4
   19cd8:	f013 fc6b 	bl	2d5b2 <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   19cdc:	ebb5 0509 	subs.w	r5, r5, r9
		added_len += count;
   19ce0:	44c8      	add	r8, r9
		value8 += count;
   19ce2:	444e      	add	r6, r9
		if (len == 0) {
   19ce4:	d018      	beq.n	19d18 <net_buf_append_bytes+0x78>
			return added_len;
		}

		if (allocate_cb) {
   19ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19ce8:	b16b      	cbz	r3, 19d06 <net_buf_append_bytes+0x66>
			frag = allocate_cb(timeout, user_data);
   19cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19cf0:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   19cf2:	4604      	mov	r4, r0
		}

		if (!frag) {
   19cf4:	b180      	cbz	r0, 19d18 <net_buf_append_bytes+0x78>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   19cf6:	4601      	mov	r1, r0
   19cf8:	4638      	mov	r0, r7
   19cfa:	f7ff ffad 	bl	19c58 <net_buf_frag_add>
	do {
   19cfe:	e7dd      	b.n	19cbc <net_buf_append_bytes+0x1c>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   19d00:	fa1f f985 	uxth.w	r9, r5
   19d04:	e7e5      	b.n	19cd2 <net_buf_append_bytes+0x32>
	return &_net_buf_pool_list[id];
   19d06:	7ab8      	ldrb	r0, [r7, #10]
			frag = net_buf_alloc_len(pool, len, timeout);
   19d08:	4629      	mov	r1, r5
   19d0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   19d0e:	fb00 b00a 	mla	r0, r0, sl, fp
   19d12:	f7ff fde3 	bl	198dc <net_buf_alloc_len>
   19d16:	e7ec      	b.n	19cf2 <net_buf_append_bytes+0x52>
	} while (1);

	/* Unreachable */
	return 0;
}
   19d18:	4640      	mov	r0, r8
   19d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d1e:	bf00      	nop
   19d20:	2000cf88 	.word	0x2000cf88

00019d24 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   19d24:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19d26:	b948      	cbnz	r0, 19d3c <net_buf_simple_reserve+0x18>
   19d28:	490b      	ldr	r1, [pc, #44]	; (19d58 <net_buf_simple_reserve+0x34>)
   19d2a:	232b      	movs	r3, #43	; 0x2b
   19d2c:	4a0b      	ldr	r2, [pc, #44]	; (19d5c <net_buf_simple_reserve+0x38>)
   19d2e:	480c      	ldr	r0, [pc, #48]	; (19d60 <net_buf_simple_reserve+0x3c>)
   19d30:	f011 f842 	bl	2adb8 <assert_print>
   19d34:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   19d36:	4809      	ldr	r0, [pc, #36]	; (19d5c <net_buf_simple_reserve+0x38>)
   19d38:	f011 f837 	bl	2adaa <assert_post_action>
   19d3c:	8883      	ldrh	r3, [r0, #4]
   19d3e:	b13b      	cbz	r3, 19d50 <net_buf_simple_reserve+0x2c>
   19d40:	4908      	ldr	r1, [pc, #32]	; (19d64 <net_buf_simple_reserve+0x40>)
   19d42:	232c      	movs	r3, #44	; 0x2c
   19d44:	4a05      	ldr	r2, [pc, #20]	; (19d5c <net_buf_simple_reserve+0x38>)
   19d46:	4806      	ldr	r0, [pc, #24]	; (19d60 <net_buf_simple_reserve+0x3c>)
   19d48:	f011 f836 	bl	2adb8 <assert_print>
   19d4c:	212c      	movs	r1, #44	; 0x2c
   19d4e:	e7f2      	b.n	19d36 <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   19d50:	6883      	ldr	r3, [r0, #8]
   19d52:	440b      	add	r3, r1
   19d54:	6003      	str	r3, [r0, #0]
}
   19d56:	bd08      	pop	{r3, pc}
   19d58:	000376ce 	.word	0x000376ce
   19d5c:	000376d2 	.word	0x000376d2
   19d60:	00033bc2 	.word	0x00033bc2
   19d64:	000376fd 	.word	0x000376fd

00019d68 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19d68:	b508      	push	{r3, lr}
   19d6a:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19d6c:	6800      	ldr	r0, [r0, #0]
   19d6e:	689a      	ldr	r2, [r3, #8]
   19d70:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   19d72:	4291      	cmp	r1, r2
   19d74:	d90b      	bls.n	19d8e <net_buf_simple_push+0x26>
   19d76:	4909      	ldr	r1, [pc, #36]	; (19d9c <net_buf_simple_push+0x34>)
   19d78:	4809      	ldr	r0, [pc, #36]	; (19da0 <net_buf_simple_push+0x38>)
   19d7a:	f240 132d 	movw	r3, #301	; 0x12d
   19d7e:	4a09      	ldr	r2, [pc, #36]	; (19da4 <net_buf_simple_push+0x3c>)
   19d80:	f011 f81a 	bl	2adb8 <assert_print>
   19d84:	f240 112d 	movw	r1, #301	; 0x12d
   19d88:	4806      	ldr	r0, [pc, #24]	; (19da4 <net_buf_simple_push+0x3c>)
   19d8a:	f011 f80e 	bl	2adaa <assert_post_action>
	buf->len += len;
   19d8e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   19d90:	1a40      	subs	r0, r0, r1
	buf->len += len;
   19d92:	4411      	add	r1, r2
	buf->data -= len;
   19d94:	6018      	str	r0, [r3, #0]
	buf->len += len;
   19d96:	8099      	strh	r1, [r3, #4]
}
   19d98:	bd08      	pop	{r3, pc}
   19d9a:	bf00      	nop
   19d9c:	0003771c 	.word	0x0003771c
   19da0:	00033bc2 	.word	0x00033bc2
   19da4:	000376d2 	.word	0x000376d2

00019da8 <net_buf_simple_pull>:
{
   19da8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   19daa:	8882      	ldrh	r2, [r0, #4]
{
   19dac:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   19dae:	428a      	cmp	r2, r1
   19db0:	d20b      	bcs.n	19dca <net_buf_simple_pull+0x22>
   19db2:	4909      	ldr	r1, [pc, #36]	; (19dd8 <net_buf_simple_pull+0x30>)
   19db4:	4809      	ldr	r0, [pc, #36]	; (19ddc <net_buf_simple_pull+0x34>)
   19db6:	f240 138d 	movw	r3, #397	; 0x18d
   19dba:	4a09      	ldr	r2, [pc, #36]	; (19de0 <net_buf_simple_pull+0x38>)
   19dbc:	f010 fffc 	bl	2adb8 <assert_print>
   19dc0:	f240 118d 	movw	r1, #397	; 0x18d
   19dc4:	4806      	ldr	r0, [pc, #24]	; (19de0 <net_buf_simple_pull+0x38>)
   19dc6:	f010 fff0 	bl	2adaa <assert_post_action>
	buf->len -= len;
   19dca:	1a52      	subs	r2, r2, r1
   19dcc:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   19dce:	6800      	ldr	r0, [r0, #0]
   19dd0:	4408      	add	r0, r1
   19dd2:	6018      	str	r0, [r3, #0]
}
   19dd4:	bd08      	pop	{r3, pc}
   19dd6:	bf00      	nop
   19dd8:	0003770c 	.word	0x0003770c
   19ddc:	00033bc2 	.word	0x00033bc2
   19de0:	000376d2 	.word	0x000376d2

00019de4 <net_buf_simple_pull_mem>:
{
   19de4:	b508      	push	{r3, lr}
   19de6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   19de8:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   19dea:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   19dec:	428a      	cmp	r2, r1
   19dee:	d20b      	bcs.n	19e08 <net_buf_simple_pull_mem+0x24>
   19df0:	4908      	ldr	r1, [pc, #32]	; (19e14 <net_buf_simple_pull_mem+0x30>)
   19df2:	4809      	ldr	r0, [pc, #36]	; (19e18 <net_buf_simple_pull_mem+0x34>)
   19df4:	f240 1399 	movw	r3, #409	; 0x199
   19df8:	4a08      	ldr	r2, [pc, #32]	; (19e1c <net_buf_simple_pull_mem+0x38>)
   19dfa:	f010 ffdd 	bl	2adb8 <assert_print>
   19dfe:	f240 1199 	movw	r1, #409	; 0x199
   19e02:	4806      	ldr	r0, [pc, #24]	; (19e1c <net_buf_simple_pull_mem+0x38>)
   19e04:	f010 ffd1 	bl	2adaa <assert_post_action>
	buf->len -= len;
   19e08:	1a52      	subs	r2, r2, r1
	buf->data += len;
   19e0a:	4401      	add	r1, r0
	buf->len -= len;
   19e0c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   19e0e:	6019      	str	r1, [r3, #0]
}
   19e10:	bd08      	pop	{r3, pc}
   19e12:	bf00      	nop
   19e14:	0003770c 	.word	0x0003770c
   19e18:	00033bc2 	.word	0x00033bc2
   19e1c:	000376d2 	.word	0x000376d2

00019e20 <net_buf_simple_add>:
{
   19e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   19e22:	8885      	ldrh	r5, [r0, #4]
   19e24:	6803      	ldr	r3, [r0, #0]
   19e26:	460e      	mov	r6, r1
   19e28:	4604      	mov	r4, r0
   19e2a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   19e2c:	f013 fbb9 	bl	2d5a2 <net_buf_simple_tailroom>
   19e30:	42b0      	cmp	r0, r6
   19e32:	d209      	bcs.n	19e48 <net_buf_simple_add+0x28>
   19e34:	4906      	ldr	r1, [pc, #24]	; (19e50 <net_buf_simple_add+0x30>)
   19e36:	4807      	ldr	r0, [pc, #28]	; (19e54 <net_buf_simple_add+0x34>)
   19e38:	233e      	movs	r3, #62	; 0x3e
   19e3a:	4a07      	ldr	r2, [pc, #28]	; (19e58 <net_buf_simple_add+0x38>)
   19e3c:	f010 ffbc 	bl	2adb8 <assert_print>
   19e40:	213e      	movs	r1, #62	; 0x3e
   19e42:	4805      	ldr	r0, [pc, #20]	; (19e58 <net_buf_simple_add+0x38>)
   19e44:	f010 ffb1 	bl	2adaa <assert_post_action>
	buf->len += len;
   19e48:	4435      	add	r5, r6
   19e4a:	80a5      	strh	r5, [r4, #4]
}
   19e4c:	4638      	mov	r0, r7
   19e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e50:	00037740 	.word	0x00037740
   19e54:	00033bc2 	.word	0x00033bc2
   19e58:	000376d2 	.word	0x000376d2

00019e5c <net_if_flag_set>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
				   enum net_if_flag value)
{
   19e5c:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   19e5e:	b970      	cbnz	r0, 19e7e <net_if_flag_set+0x22>
   19e60:	490d      	ldr	r1, [pc, #52]	; (19e98 <net_if_flag_set+0x3c>)
   19e62:	f44f 7307 	mov.w	r3, #540	; 0x21c
   19e66:	4a0d      	ldr	r2, [pc, #52]	; (19e9c <net_if_flag_set+0x40>)
   19e68:	480d      	ldr	r0, [pc, #52]	; (19ea0 <net_if_flag_set+0x44>)
   19e6a:	f010 ffa5 	bl	2adb8 <assert_print>
   19e6e:	480d      	ldr	r0, [pc, #52]	; (19ea4 <net_if_flag_set+0x48>)
   19e70:	f010 ffa2 	bl	2adb8 <assert_print>
   19e74:	f44f 7107 	mov.w	r1, #540	; 0x21c
   19e78:	4808      	ldr	r0, [pc, #32]	; (19e9c <net_if_flag_set+0x40>)
   19e7a:	f010 ff96 	bl	2adaa <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   19e7e:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19e80:	6803      	ldr	r3, [r0, #0]
   19e82:	fa02 f101 	lsl.w	r1, r2, r1
   19e86:	330c      	adds	r3, #12
   19e88:	e8d3 0fef 	ldaex	r0, [r3]
   19e8c:	4308      	orrs	r0, r1
   19e8e:	e8c3 0fe2 	stlex	r2, r0, [r3]
   19e92:	2a00      	cmp	r2, #0
   19e94:	d1f8      	bne.n	19e88 <net_if_flag_set+0x2c>

	atomic_set_bit(iface->if_dev->flags, value);
}
   19e96:	bd08      	pop	{r3, pc}
   19e98:	000377a6 	.word	0x000377a6
   19e9c:	000377ac 	.word	0x000377ac
   19ea0:	00033bc2 	.word	0x00033bc2
   19ea4:	00034662 	.word	0x00034662

00019ea8 <net_if_flag_clear>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_clear(struct net_if *iface,
				     enum net_if_flag value)
{
   19ea8:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   19eaa:	b970      	cbnz	r0, 19eca <net_if_flag_clear+0x22>
   19eac:	490e      	ldr	r1, [pc, #56]	; (19ee8 <net_if_flag_clear+0x40>)
   19eae:	f240 233a 	movw	r3, #570	; 0x23a
   19eb2:	4a0e      	ldr	r2, [pc, #56]	; (19eec <net_if_flag_clear+0x44>)
   19eb4:	480e      	ldr	r0, [pc, #56]	; (19ef0 <net_if_flag_clear+0x48>)
   19eb6:	f010 ff7f 	bl	2adb8 <assert_print>
   19eba:	480e      	ldr	r0, [pc, #56]	; (19ef4 <net_if_flag_clear+0x4c>)
   19ebc:	f010 ff7c 	bl	2adb8 <assert_print>
   19ec0:	f240 213a 	movw	r1, #570	; 0x23a
   19ec4:	4809      	ldr	r0, [pc, #36]	; (19eec <net_if_flag_clear+0x44>)
   19ec6:	f010 ff70 	bl	2adaa <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   19eca:	2301      	movs	r3, #1
   19ecc:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ed0:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ed2:	6802      	ldr	r2, [r0, #0]
   19ed4:	f102 030c 	add.w	r3, r2, #12
   19ed8:	e8d3 0fef 	ldaex	r0, [r3]
   19edc:	4008      	ands	r0, r1
   19ede:	e8c3 0fe2 	stlex	r2, r0, [r3]
   19ee2:	2a00      	cmp	r2, #0
   19ee4:	d1f8      	bne.n	19ed8 <net_if_flag_clear+0x30>

	atomic_clear_bit(iface->if_dev->flags, value);
}
   19ee6:	bd08      	pop	{r3, pc}
   19ee8:	000377a6 	.word	0x000377a6
   19eec:	000377ac 	.word	0x000377ac
   19ef0:	00033bc2 	.word	0x00033bc2
   19ef4:	00034662 	.word	0x00034662

00019ef8 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   19ef8:	4602      	mov	r2, r0
   19efa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19efc:	4801      	ldr	r0, [pc, #4]	; (19f04 <k_mutex_lock.constprop.0.isra.0+0xc>)
   19efe:	f00a bee5 	b.w	24ccc <z_impl_k_mutex_lock>
   19f02:	bf00      	nop
   19f04:	2000ce7c 	.word	0x2000ce7c

00019f08 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   19f08:	4801      	ldr	r0, [pc, #4]	; (19f10 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   19f0a:	f00a bfaf 	b.w	24e6c <z_impl_k_mutex_unlock>
   19f0e:	bf00      	nop
   19f10:	2000ce7c 	.word	0x2000ce7c

00019f14 <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
   19f14:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   19f16:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   19f18:	2100      	movs	r1, #0
{
   19f1a:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   19f1c:	f893 2020 	ldrb.w	r2, [r3, #32]
   19f20:	f013 fb78 	bl	2d614 <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
   19f24:	b978      	cbnz	r0, 19f46 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   19f26:	2102      	movs	r1, #2
   19f28:	6823      	ldr	r3, [r4, #0]
   19f2a:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   19f2e:	6823      	ldr	r3, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   19f30:	f893 3020 	ldrb.w	r3, [r3, #32]
   19f34:	428b      	cmp	r3, r1
   19f36:	d13e      	bne.n	19fb6 <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
		if (prev_state != NET_IF_OPER_UP) {
			notify_iface_up(iface);
		}
	} else {
		if (prev_state == NET_IF_OPER_UP) {
   19f38:	2a06      	cmp	r2, #6
   19f3a:	d13c      	bne.n	19fb6 <update_operational_state+0xa2>
	net_if_flag_clear(iface, NET_IF_RUNNING);
   19f3c:	2108      	movs	r1, #8
   19f3e:	4620      	mov	r0, r4
   19f40:	f7ff ffb2 	bl	19ea8 <net_if_flag_clear>
	return (iface->if_dev->socket_offload != NULL);
   19f44:	e02f      	b.n	19fa6 <update_operational_state+0x92>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   19f46:	2109      	movs	r1, #9
   19f48:	4620      	mov	r0, r4
   19f4a:	f013 fb63 	bl	2d614 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   19f4e:	2800      	cmp	r0, #0
   19f50:	d0e9      	beq.n	19f26 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   19f52:	210a      	movs	r1, #10
   19f54:	4620      	mov	r0, r4
   19f56:	f013 fb5d 	bl	2d614 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   19f5a:	6823      	ldr	r3, [r4, #0]
   19f5c:	f1c0 0006 	rsb	r0, r0, #6
   19f60:	b2c0      	uxtb	r0, r0
   19f62:	f883 0020 	strb.w	r0, [r3, #32]
	return iface->if_dev->oper_state;
   19f66:	6823      	ldr	r3, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   19f68:	f893 1020 	ldrb.w	r1, [r3, #32]
   19f6c:	4281      	cmp	r1, r0
   19f6e:	d122      	bne.n	19fb6 <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   19f70:	2906      	cmp	r1, #6
   19f72:	d1e1      	bne.n	19f38 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   19f74:	2a06      	cmp	r2, #6
   19f76:	d01e      	beq.n	19fb6 <update_operational_state+0xa2>
		if (!is_iface_offloaded(iface)) {
   19f78:	69da      	ldr	r2, [r3, #28]
   19f7a:	b982      	cbnz	r2, 19f9e <update_operational_state+0x8a>
			NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   19f7c:	691b      	ldr	r3, [r3, #16]
   19f7e:	b973      	cbnz	r3, 19f9e <update_operational_state+0x8a>
   19f80:	490d      	ldr	r1, [pc, #52]	; (19fb8 <update_operational_state+0xa4>)
   19f82:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
   19f86:	4a0d      	ldr	r2, [pc, #52]	; (19fbc <update_operational_state+0xa8>)
   19f88:	480d      	ldr	r0, [pc, #52]	; (19fc0 <update_operational_state+0xac>)
   19f8a:	f010 ff15 	bl	2adb8 <assert_print>
   19f8e:	480d      	ldr	r0, [pc, #52]	; (19fc4 <update_operational_state+0xb0>)
   19f90:	f010 ff12 	bl	2adb8 <assert_print>
   19f94:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
   19f98:	4808      	ldr	r0, [pc, #32]	; (19fbc <update_operational_state+0xa8>)
   19f9a:	f010 ff06 	bl	2adaa <assert_post_action>
	net_if_flag_set(iface, NET_IF_RUNNING);
   19f9e:	2108      	movs	r1, #8
   19fa0:	4620      	mov	r0, r4
   19fa2:	f7ff ff5b 	bl	19e5c <net_if_flag_set>
	return (iface->if_dev->socket_offload != NULL);
   19fa6:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   19fa8:	69db      	ldr	r3, [r3, #28]
   19faa:	b923      	cbnz	r3, 19fb6 <update_operational_state+0xa2>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   19fac:	4620      	mov	r0, r4
			notify_iface_down(iface);
		}
	}
}
   19fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   19fb2:	f013 bb38 	b.w	2d626 <l2_flags_get.isra.0>
}
   19fb6:	bd10      	pop	{r4, pc}
   19fb8:	000377db 	.word	0x000377db
   19fbc:	0003777c 	.word	0x0003777c
   19fc0:	00033bc2 	.word	0x00033bc2
   19fc4:	00034662 	.word	0x00034662

00019fc8 <net_if_flag_test_and_set>:
{
   19fc8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   19fca:	b970      	cbnz	r0, 19fea <net_if_flag_test_and_set+0x22>
   19fcc:	4910      	ldr	r1, [pc, #64]	; (1a010 <net_if_flag_test_and_set+0x48>)
   19fce:	f44f 730b 	mov.w	r3, #556	; 0x22c
   19fd2:	4a10      	ldr	r2, [pc, #64]	; (1a014 <net_if_flag_test_and_set+0x4c>)
   19fd4:	4810      	ldr	r0, [pc, #64]	; (1a018 <net_if_flag_test_and_set+0x50>)
   19fd6:	f010 feef 	bl	2adb8 <assert_print>
   19fda:	4810      	ldr	r0, [pc, #64]	; (1a01c <net_if_flag_test_and_set+0x54>)
   19fdc:	f010 feec 	bl	2adb8 <assert_print>
   19fe0:	f44f 710b 	mov.w	r1, #556	; 0x22c
   19fe4:	480b      	ldr	r0, [pc, #44]	; (1a014 <net_if_flag_test_and_set+0x4c>)
   19fe6:	f010 fee0 	bl	2adaa <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   19fea:	2301      	movs	r3, #1
   19fec:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19ff0:	6803      	ldr	r3, [r0, #0]
   19ff2:	330c      	adds	r3, #12
   19ff4:	e8d3 2fef 	ldaex	r2, [r3]
   19ff8:	ea42 0001 	orr.w	r0, r2, r1
   19ffc:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1a000:	2c00      	cmp	r4, #0
   1a002:	d1f7      	bne.n	19ff4 <net_if_flag_test_and_set+0x2c>
	return (old & mask) != 0;
   1a004:	4211      	tst	r1, r2
}
   1a006:	bf14      	ite	ne
   1a008:	2001      	movne	r0, #1
   1a00a:	2000      	moveq	r0, #0
   1a00c:	bd10      	pop	{r4, pc}
   1a00e:	bf00      	nop
   1a010:	000377a6 	.word	0x000377a6
   1a014:	000377ac 	.word	0x000377ac
   1a018:	00033bc2 	.word	0x00033bc2
   1a01c:	00034662 	.word	0x00034662

0001a020 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1a022:	f04f 30ff 	mov.w	r0, #4294967295
   1a026:	f04f 31ff 	mov.w	r1, #4294967295
   1a02a:	f7ff ff65 	bl	19ef8 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1a02e:	4c15      	ldr	r4, [pc, #84]	; (1a084 <net_if_init+0x64>)
   1a030:	4f15      	ldr	r7, [pc, #84]	; (1a088 <net_if_init+0x68>)
   1a032:	42bc      	cmp	r4, r7
   1a034:	4625      	mov	r5, r4
   1a036:	d91f      	bls.n	1a078 <net_if_init+0x58>
   1a038:	4914      	ldr	r1, [pc, #80]	; (1a08c <net_if_init+0x6c>)
   1a03a:	f241 13ad 	movw	r3, #4525	; 0x11ad
   1a03e:	4a14      	ldr	r2, [pc, #80]	; (1a090 <net_if_init+0x70>)
   1a040:	4814      	ldr	r0, [pc, #80]	; (1a094 <net_if_init+0x74>)
   1a042:	f010 feb9 	bl	2adb8 <assert_print>
   1a046:	4814      	ldr	r0, [pc, #80]	; (1a098 <net_if_init+0x78>)
   1a048:	f010 feb6 	bl	2adb8 <assert_print>
   1a04c:	f241 11ad 	movw	r1, #4525	; 0x11ad
   1a050:	480f      	ldr	r0, [pc, #60]	; (1a090 <net_if_init+0x70>)
   1a052:	f010 feaa 	bl	2adaa <assert_post_action>
	return iface->if_dev->dev;
   1a056:	682b      	ldr	r3, [r5, #0]
   1a058:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1a05a:	681b      	ldr	r3, [r3, #0]
   1a05c:	689e      	ldr	r6, [r3, #8]
	if (!api || !api->init) {
   1a05e:	2e00      	cmp	r6, #0
   1a060:	d0e7      	beq.n	1a032 <net_if_init+0x12>
   1a062:	6833      	ldr	r3, [r6, #0]
   1a064:	2b00      	cmp	r3, #0
   1a066:	d0e4      	beq.n	1a032 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1a068:	2109      	movs	r1, #9
   1a06a:	4628      	mov	r0, r5
   1a06c:	f7ff ffac 	bl	19fc8 <net_if_flag_test_and_set>
	api->init(iface);
   1a070:	4628      	mov	r0, r5
   1a072:	6833      	ldr	r3, [r6, #0]
   1a074:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1a076:	e7dc      	b.n	1a032 <net_if_init+0x12>
   1a078:	d3ed      	bcc.n	1a056 <net_if_init+0x36>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1a07a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1a07e:	f7ff bf43 	b.w	19f08 <k_mutex_unlock.constprop.0.isra.0>
   1a082:	bf00      	nop
   1a084:	2000d0f4 	.word	0x2000d0f4
   1a088:	2000d0f8 	.word	0x2000d0f8
   1a08c:	0003780c 	.word	0x0003780c
   1a090:	0003777c 	.word	0x0003777c
   1a094:	00033bc2 	.word	0x00033bc2
   1a098:	000342e3 	.word	0x000342e3

0001a09c <net_if_post_init>:

void net_if_post_init(void)
{
   1a09c:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1a09e:	4c0f      	ldr	r4, [pc, #60]	; (1a0dc <net_if_post_init+0x40>)
   1a0a0:	4d0f      	ldr	r5, [pc, #60]	; (1a0e0 <net_if_post_init+0x44>)
   1a0a2:	42ac      	cmp	r4, r5
   1a0a4:	d918      	bls.n	1a0d8 <net_if_post_init+0x3c>
   1a0a6:	490f      	ldr	r1, [pc, #60]	; (1a0e4 <net_if_post_init+0x48>)
   1a0a8:	f241 13df 	movw	r3, #4575	; 0x11df
   1a0ac:	4a0e      	ldr	r2, [pc, #56]	; (1a0e8 <net_if_post_init+0x4c>)
   1a0ae:	480f      	ldr	r0, [pc, #60]	; (1a0ec <net_if_post_init+0x50>)
   1a0b0:	f010 fe82 	bl	2adb8 <assert_print>
   1a0b4:	480e      	ldr	r0, [pc, #56]	; (1a0f0 <net_if_post_init+0x54>)
   1a0b6:	f010 fe7f 	bl	2adb8 <assert_print>
   1a0ba:	f241 11df 	movw	r1, #4575	; 0x11df
   1a0be:	480a      	ldr	r0, [pc, #40]	; (1a0e8 <net_if_post_init+0x4c>)
   1a0c0:	f010 fe73 	bl	2adaa <assert_post_action>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1a0c4:	2103      	movs	r1, #3
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	f013 faa4 	bl	2d614 <net_if_flag_is_set>
   1a0cc:	b910      	cbnz	r0, 1a0d4 <net_if_post_init+0x38>
			net_if_up(iface);
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	f013 fab5 	bl	2d63e <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1a0d4:	3404      	adds	r4, #4
   1a0d6:	e7e4      	b.n	1a0a2 <net_if_post_init+0x6>
   1a0d8:	d3f4      	bcc.n	1a0c4 <net_if_post_init+0x28>
		}
	}
}
   1a0da:	bd38      	pop	{r3, r4, r5, pc}
   1a0dc:	2000d0f4 	.word	0x2000d0f4
   1a0e0:	2000d0f8 	.word	0x2000d0f8
   1a0e4:	0003780c 	.word	0x0003780c
   1a0e8:	0003777c 	.word	0x0003777c
   1a0ec:	00033bc2 	.word	0x00033bc2
   1a0f0:	000342e3 	.word	0x000342e3

0001a0f4 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1a0f4:	2300      	movs	r3, #0
{
   1a0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1a0fa:	2802      	cmp	r0, #2
{
   1a0fc:	b089      	sub	sp, #36	; 0x24
   1a0fe:	4605      	mov	r5, r0
   1a100:	4688      	mov	r8, r1
   1a102:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
   1a104:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   1a108:	d14d      	bne.n	1a1a6 <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   1a10a:	a806      	add	r0, sp, #24
   1a10c:	9104      	str	r1, [sp, #16]
   1a10e:	4601      	mov	r1, r0
{
   1a110:	461a      	mov	r2, r3
   1a112:	e006      	b.n	1a122 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1a114:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1a116:	3201      	adds	r2, #1
				zeros[i]++;
   1a118:	3401      	adds	r4, #1
   1a11a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1a11c:	b2d4      	uxtb	r4, r2
   1a11e:	2c08      	cmp	r4, #8
   1a120:	d003      	beq.n	1a12a <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1a122:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
   1a126:	2c00      	cmp	r4, #0
   1a128:	d0f4      	beq.n	1a114 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   1a12a:	3301      	adds	r3, #1
   1a12c:	2b08      	cmp	r3, #8
   1a12e:	f101 0101 	add.w	r1, r1, #1
   1a132:	d1ed      	bne.n	1a110 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   1a134:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1a138:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1a13a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1a13c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a140:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
   1a142:	bf88      	it	hi
   1a144:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
   1a146:	f103 0301 	add.w	r3, r3, #1
   1a14a:	b2db      	uxtb	r3, r3
				pos = i;
   1a14c:	bf88      	it	hi
   1a14e:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
   1a150:	2b08      	cmp	r3, #8
   1a152:	d1f3      	bne.n	1a13c <z_impl_net_addr_ntop+0x48>
		len = 8;
   1a154:	469a      	mov	sl, r3
   1a156:	2e01      	cmp	r6, #1
   1a158:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1a15c:	bf08      	it	eq
   1a15e:	f04f 37ff 	moveq.w	r7, #4294967295
   1a162:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   1a164:	2200      	movs	r2, #0
	char delim = ':';
   1a166:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1a168:	4614      	mov	r4, r2
   1a16a:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
   1a16c:	f1ba 0f04 	cmp.w	sl, #4
   1a170:	d158      	bne.n	1a224 <z_impl_net_addr_ntop+0x130>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
   1a172:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
				*ptr++ = '0';
   1a176:	4603      	mov	r3, r0
			if (value == 0U) {
   1a178:	bb19      	cbnz	r1, 1a1c2 <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
   1a17a:	2130      	movs	r1, #48	; 0x30
   1a17c:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
   1a180:	9901      	ldr	r1, [sp, #4]
   1a182:	7041      	strb	r1, [r0, #1]
   1a184:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
   1a186:	3401      	adds	r4, #1
   1a188:	b2e4      	uxtb	r4, r4
   1a18a:	4554      	cmp	r4, sl
   1a18c:	4623      	mov	r3, r4
   1a18e:	dbed      	blt.n	1a16c <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   1a190:	4558      	cmp	r0, fp
   1a192:	d00a      	beq.n	1a1aa <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
   1a194:	2d01      	cmp	r5, #1
   1a196:	f04f 0300 	mov.w	r3, #0
   1a19a:	f040 8089 	bne.w	1a2b0 <z_impl_net_addr_ntop+0x1bc>
		*(ptr - 1) = '\0';
   1a19e:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
   1a1a2:	4658      	mov	r0, fp
   1a1a4:	e002      	b.n	1a1ac <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
   1a1a6:	2801      	cmp	r0, #1
   1a1a8:	d003      	beq.n	1a1b2 <z_impl_net_addr_ntop+0xbe>
		return NULL;
   1a1aa:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
   1a1ac:	b009      	add	sp, #36	; 0x24
   1a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1a1b2:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   1a1b4:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
   1a1b8:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1a1bc:	4606      	mov	r6, r0
		delim = '.';
   1a1be:	9301      	str	r3, [sp, #4]
   1a1c0:	e7d0      	b.n	1a164 <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
   1a1c2:	f04f 0e00 	mov.w	lr, #0
   1a1c6:	f04f 0c09 	mov.w	ip, #9
   1a1ca:	f8cd e008 	str.w	lr, [sp, #8]
   1a1ce:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 1a2b4 <z_impl_net_addr_ntop+0x1c0>
		temp = value / divisor;
   1a1d2:	fbb1 f9fe 	udiv	r9, r1, lr
   1a1d6:	9103      	str	r1, [sp, #12]
   1a1d8:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
   1a1dc:	fb0e 1119 	mls	r1, lr, r9, r1
		if ((precision > i) || (temp != 0)) {
   1a1e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1a1e4:	45cc      	cmp	ip, r9
   1a1e6:	db03      	blt.n	1a1f0 <z_impl_net_addr_ntop+0xfc>
   1a1e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1a1ec:	45f1      	cmp	r9, lr
   1a1ee:	d307      	bcc.n	1a200 <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
   1a1f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1a1f4:	f8cd c008 	str.w	ip, [sp, #8]
   1a1f8:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1a1fc:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1a200:	f04f 090a 	mov.w	r9, #10
   1a204:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a208:	f1bc 3fff 	cmp.w	ip, #4294967295
   1a20c:	fbbe fef9 	udiv	lr, lr, r9
   1a210:	d1df      	bne.n	1a1d2 <z_impl_net_addr_ntop+0xde>
	*buf = 0;
   1a212:	2100      	movs	r1, #0
   1a214:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1a216:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
   1a218:	fa50 f083 	uxtab	r0, r0, r3
   1a21c:	9b01      	ldr	r3, [sp, #4]
   1a21e:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
   1a222:	e7b0      	b.n	1a186 <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
   1a224:	429f      	cmp	r7, r3
   1a226:	d10d      	bne.n	1a244 <z_impl_net_addr_ntop+0x150>
			if (needcolon || i == 0U) {
   1a228:	b902      	cbnz	r2, 1a22c <z_impl_net_addr_ntop+0x138>
   1a22a:	b914      	cbnz	r4, 1a232 <z_impl_net_addr_ntop+0x13e>
				*ptr++ = ':';
   1a22c:	233a      	movs	r3, #58	; 0x3a
   1a22e:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
   1a232:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1a236:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1a23a:	1e73      	subs	r3, r6, #1
   1a23c:	4423      	add	r3, r4
			needcolon = false;
   1a23e:	2200      	movs	r2, #0
			i += longest - 1U;
   1a240:	b2dc      	uxtb	r4, r3
			continue;
   1a242:	e7a0      	b.n	1a186 <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
   1a244:	b11a      	cbz	r2, 1a24e <z_impl_net_addr_ntop+0x15a>
			*ptr++ = ':';
   1a246:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1a24a:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1a24e:	9b04      	ldr	r3, [sp, #16]
   1a250:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   1a254:	ba52      	rev16	r2, r2
		if (bh) {
   1a256:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   1a25a:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   1a25e:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
   1a262:	d016      	beq.n	1a292 <z_impl_net_addr_ntop+0x19e>
			if (bh > 0x0f) {
   1a264:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1a266:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1a268:	d90a      	bls.n	1a280 <z_impl_net_addr_ntop+0x18c>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1a26a:	2300      	movs	r3, #0
   1a26c:	2261      	movs	r2, #97	; 0x61
   1a26e:	f013 fa0d 	bl	2d68c <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1a272:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1a274:	2261      	movs	r2, #97	; 0x61
   1a276:	4649      	mov	r1, r9
   1a278:	f013 fa08 	bl	2d68c <net_byte_to_hex>
		needcolon = true;
   1a27c:	2201      	movs	r2, #1
   1a27e:	e782      	b.n	1a186 <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
   1a280:	2b09      	cmp	r3, #9
   1a282:	d804      	bhi.n	1a28e <z_impl_net_addr_ntop+0x19a>
					*ptr++ = (char)(bh + '0');
   1a284:	3130      	adds	r1, #48	; 0x30
   1a286:	b2c9      	uxtb	r1, r1
   1a288:	f800 1b01 	strb.w	r1, [r0], #1
   1a28c:	e7f1      	b.n	1a272 <z_impl_net_addr_ntop+0x17e>
					*ptr++ = (char) (bh - 10 + 'a');
   1a28e:	3157      	adds	r1, #87	; 0x57
   1a290:	e7f9      	b.n	1a286 <z_impl_net_addr_ntop+0x192>
		} else if (bl > 0x0f) {
   1a292:	f1b9 0f0f 	cmp.w	r9, #15
   1a296:	d8ed      	bhi.n	1a274 <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
   1a298:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
   1a29c:	bf94      	ite	ls
   1a29e:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1a2a2:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
   1a2a6:	fa5f f989 	uxtb.w	r9, r9
   1a2aa:	f800 9b01 	strb.w	r9, [r0], #1
   1a2ae:	e7e5      	b.n	1a27c <z_impl_net_addr_ntop+0x188>
		*ptr = '\0';
   1a2b0:	7003      	strb	r3, [r0, #0]
   1a2b2:	e776      	b.n	1a1a2 <z_impl_net_addr_ntop+0xae>
   1a2b4:	3b9aca00 	.word	0x3b9aca00

0001a2b8 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1a2bc:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1a2be:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1a2c2:	4b3c      	ldr	r3, [pc, #240]	; (1a3b4 <connect_request_encode+0xfc>)
   1a2c4:	4a3c      	ldr	r2, [pc, #240]	; (1a3b8 <connect_request_encode+0x100>)
{
   1a2c6:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1a2c8:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1a2cc:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1a2ce:	2804      	cmp	r0, #4
   1a2d0:	bf14      	ite	ne
   1a2d2:	4610      	movne	r0, r2
   1a2d4:	4618      	moveq	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1a2d6:	600f      	str	r7, [r1, #0]
{
   1a2d8:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1a2da:	f013 faba 	bl	2d852 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1a2de:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1a2e2:	4603      	mov	r3, r0
   1a2e4:	b938      	cbnz	r0, 1a2f6 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1a2e6:	e9d4 2000 	ldrd	r2, r0, [r4]
   1a2ea:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1a2ec:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1a2f0:	d104      	bne.n	1a2fc <connect_request_encode+0x44>
		return -ENOMEM;
   1a2f2:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1a2f6:	4618      	mov	r0, r3
   1a2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	*(buf->cur++) = val;
   1a2fc:	1c50      	adds	r0, r2, #1
   1a2fe:	6020      	str	r0, [r4, #0]
   1a300:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1a302:	e9d4 8200 	ldrd	r8, r2, [r4]
   1a306:	4590      	cmp	r8, r2
   1a308:	d0f3      	beq.n	1a2f2 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1a30a:	f108 0201 	add.w	r2, r8, #1
   1a30e:	6022      	str	r2, [r4, #0]
   1a310:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1a314:	4621      	mov	r1, r4
   1a316:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
   1a31a:	f013 fa88 	bl	2d82e <pack_uint16>
	if (err_code != 0) {
   1a31e:	4603      	mov	r3, r0
   1a320:	2800      	cmp	r0, #0
   1a322:	d1e8      	bne.n	1a2f6 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1a324:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1a328:	f013 fa93 	bl	2d852 <pack_utf8_str>
	if (err_code != 0) {
   1a32c:	4603      	mov	r3, r0
   1a32e:	2800      	cmp	r0, #0
   1a330:	d1e1      	bne.n	1a2f6 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1a332:	6c30      	ldr	r0, [r6, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1a334:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1a336:	b1e8      	cbz	r0, 1a374 <connect_request_encode+0xbc>
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1a338:	4621      	mov	r1, r4
		connect_flags |= client->will_retain << 5;
   1a33a:	f896 a060 	ldrb.w	sl, [r6, #96]	; 0x60
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1a33e:	f890 9008 	ldrb.w	r9, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1a342:	f013 fa86 	bl	2d852 <pack_utf8_str>
		connect_flags |= client->will_retain << 5;
   1a346:	f00a 0a01 	and.w	sl, sl, #1
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1a34a:	4603      	mov	r3, r0
		if (err_code != 0) {
   1a34c:	2800      	cmp	r0, #0
   1a34e:	d1d2      	bne.n	1a2f6 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1a350:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   1a352:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1a354:	b35b      	cbz	r3, 1a3ae <connect_request_encode+0xf6>
			err_code = pack_utf8_str(client->will_message, buf);
   1a356:	4618      	mov	r0, r3
   1a358:	f013 fa7b 	bl	2d852 <pack_utf8_str>
			if (err_code != 0) {
   1a35c:	4603      	mov	r3, r0
   1a35e:	2800      	cmp	r0, #0
   1a360:	d1c9      	bne.n	1a2f6 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1a362:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1a366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
		connect_flags |= client->will_retain << 5;
   1a36a:	ea45 154a 	orr.w	r5, r5, sl, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1a36e:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1a372:	431d      	orrs	r5, r3
	if (client->user_name != NULL) {
   1a374:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1a376:	b138      	cbz	r0, 1a388 <connect_request_encode+0xd0>
		err_code = pack_utf8_str(client->user_name, buf);
   1a378:	4621      	mov	r1, r4
   1a37a:	f013 fa6a 	bl	2d852 <pack_utf8_str>
		if (err_code != 0) {
   1a37e:	4603      	mov	r3, r0
   1a380:	2800      	cmp	r0, #0
   1a382:	d1b8      	bne.n	1a2f6 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1a384:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1a388:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   1a38a:	b138      	cbz	r0, 1a39c <connect_request_encode+0xe4>
		err_code = pack_utf8_str(client->password, buf);
   1a38c:	4621      	mov	r1, r4
   1a38e:	f013 fa60 	bl	2d852 <pack_utf8_str>
		if (err_code != 0) {
   1a392:	4603      	mov	r3, r0
   1a394:	2800      	cmp	r0, #0
   1a396:	d1ae      	bne.n	1a2f6 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1a398:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1a39c:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1a3a0:	4622      	mov	r2, r4
   1a3a2:	4639      	mov	r1, r7
}
   1a3a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1a3a8:	2010      	movs	r0, #16
   1a3aa:	f013 ba6d 	b.w	2d888 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1a3ae:	f013 fa3e 	bl	2d82e <pack_uint16>
   1a3b2:	e7d3      	b.n	1a35c <connect_request_encode+0xa4>
   1a3b4:	000324a8 	.word	0x000324a8
   1a3b8:	000324b0 	.word	0x000324b0

0001a3bc <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1a3bc:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a3c0:	1a9b      	subs	r3, r3, r2
   1a3c2:	2b01      	cmp	r3, #1
   1a3c4:	bf81      	itttt	hi
   1a3c6:	4b05      	ldrhi	r3, [pc, #20]	; (1a3dc <disconnect_encode+0x20>)
   1a3c8:	881b      	ldrhhi	r3, [r3, #0]
   1a3ca:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1a3cc:	6803      	ldrhi	r3, [r0, #0]
   1a3ce:	bf83      	ittte	hi
   1a3d0:	3302      	addhi	r3, #2
   1a3d2:	6043      	strhi	r3, [r0, #4]

	return 0;
   1a3d4:	2000      	movhi	r0, #0
		return -ENOMEM;
   1a3d6:	f06f 000b 	mvnls.w	r0, #11
}
   1a3da:	4770      	bx	lr
   1a3dc:	00037870 	.word	0x00037870

0001a3e0 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1a3e0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a3e4:	1a9b      	subs	r3, r3, r2
   1a3e6:	2b01      	cmp	r3, #1
   1a3e8:	bf81      	itttt	hi
   1a3ea:	4b05      	ldrhi	r3, [pc, #20]	; (1a400 <ping_request_encode+0x20>)
   1a3ec:	881b      	ldrhhi	r3, [r3, #0]
   1a3ee:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1a3f0:	6803      	ldrhi	r3, [r0, #0]
   1a3f2:	bf83      	ittte	hi
   1a3f4:	3302      	addhi	r3, #2
   1a3f6:	6043      	strhi	r3, [r0, #4]

	return 0;
   1a3f8:	2000      	movhi	r0, #0
		return -ENOMEM;
   1a3fa:	f06f 000b 	mvnls.w	r0, #11
}
   1a3fe:	4770      	bx	lr
   1a400:	00037872 	.word	0x00037872

0001a404 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1a404:	2214      	movs	r2, #20
   1a406:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1a40a:	4353      	muls	r3, r2
   1a40c:	4a01      	ldr	r2, [pc, #4]	; (1a414 <mqtt_transport_connect+0x10>)
   1a40e:	58d3      	ldr	r3, [r2, r3]
   1a410:	4718      	bx	r3
   1a412:	bf00      	nop
   1a414:	000324b8 	.word	0x000324b8

0001a418 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1a418:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1a41a:	2514      	movs	r5, #20
   1a41c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1a420:	4b02      	ldr	r3, [pc, #8]	; (1a42c <mqtt_transport_write+0x14>)
   1a422:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   1a426:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1a428:	685b      	ldr	r3, [r3, #4]
   1a42a:	4718      	bx	r3
   1a42c:	000324b8 	.word	0x000324b8

0001a430 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1a430:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1a432:	2414      	movs	r4, #20
   1a434:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1a438:	4b02      	ldr	r3, [pc, #8]	; (1a444 <mqtt_transport_write_msg+0x14>)
   1a43a:	fb04 3302 	mla	r3, r4, r2, r3
}
   1a43e:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1a440:	689b      	ldr	r3, [r3, #8]
   1a442:	4718      	bx	r3
   1a444:	000324b8 	.word	0x000324b8

0001a448 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   1a448:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1a44a:	2614      	movs	r6, #20
   1a44c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   1a450:	4c03      	ldr	r4, [pc, #12]	; (1a460 <mqtt_transport_read+0x18>)
   1a452:	fb06 4405 	mla	r4, r6, r5, r4
   1a456:	68e4      	ldr	r4, [r4, #12]
   1a458:	46a4      	mov	ip, r4
							 shall_block);
}
   1a45a:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1a45c:	4760      	bx	ip
   1a45e:	bf00      	nop
   1a460:	000324b8 	.word	0x000324b8

0001a464 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1a464:	b510      	push	{r4, lr}
   1a466:	f00a fd01 	bl	24e6c <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1a46a:	4604      	mov	r4, r0
   1a46c:	b168      	cbz	r0, 1a48a <mqtt_mutex_unlock+0x26>
   1a46e:	233d      	movs	r3, #61	; 0x3d
   1a470:	4a06      	ldr	r2, [pc, #24]	; (1a48c <mqtt_mutex_unlock+0x28>)
   1a472:	4907      	ldr	r1, [pc, #28]	; (1a490 <mqtt_mutex_unlock+0x2c>)
   1a474:	4807      	ldr	r0, [pc, #28]	; (1a494 <mqtt_mutex_unlock+0x30>)
   1a476:	f010 fc9f 	bl	2adb8 <assert_print>
   1a47a:	4621      	mov	r1, r4
   1a47c:	4806      	ldr	r0, [pc, #24]	; (1a498 <mqtt_mutex_unlock+0x34>)
   1a47e:	f010 fc9b 	bl	2adb8 <assert_print>
   1a482:	213d      	movs	r1, #61	; 0x3d
   1a484:	4801      	ldr	r0, [pc, #4]	; (1a48c <mqtt_mutex_unlock+0x28>)
   1a486:	f010 fc90 	bl	2adaa <assert_post_action>
	(void)ret;
}
   1a48a:	bd10      	pop	{r4, pc}
   1a48c:	000378ab 	.word	0x000378ab
   1a490:	000378dc 	.word	0x000378dc
   1a494:	00033bc2 	.word	0x00033bc2
   1a498:	000378e5 	.word	0x000378e5

0001a49c <mqtt_mutex_lock>:
{
   1a49c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1a49e:	f04f 32ff 	mov.w	r2, #4294967295
   1a4a2:	f04f 33ff 	mov.w	r3, #4294967295
   1a4a6:	f00a fc11 	bl	24ccc <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1a4aa:	4604      	mov	r4, r0
   1a4ac:	b168      	cbz	r0, 1a4ca <mqtt_mutex_lock+0x2e>
   1a4ae:	2333      	movs	r3, #51	; 0x33
   1a4b0:	4a06      	ldr	r2, [pc, #24]	; (1a4cc <mqtt_mutex_lock+0x30>)
   1a4b2:	4907      	ldr	r1, [pc, #28]	; (1a4d0 <mqtt_mutex_lock+0x34>)
   1a4b4:	4807      	ldr	r0, [pc, #28]	; (1a4d4 <mqtt_mutex_lock+0x38>)
   1a4b6:	f010 fc7f 	bl	2adb8 <assert_print>
   1a4ba:	4621      	mov	r1, r4
   1a4bc:	4806      	ldr	r0, [pc, #24]	; (1a4d8 <mqtt_mutex_lock+0x3c>)
   1a4be:	f010 fc7b 	bl	2adb8 <assert_print>
   1a4c2:	2133      	movs	r1, #51	; 0x33
   1a4c4:	4801      	ldr	r0, [pc, #4]	; (1a4cc <mqtt_mutex_lock+0x30>)
   1a4c6:	f010 fc70 	bl	2adaa <assert_post_action>
}
   1a4ca:	bd10      	pop	{r4, pc}
   1a4cc:	000378ab 	.word	0x000378ab
   1a4d0:	000378dc 	.word	0x000378dc
   1a4d4:	00033bc2 	.word	0x00033bc2
   1a4d8:	00037907 	.word	0x00037907

0001a4dc <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   1a4dc:	2200      	movs	r2, #0
   1a4de:	4b02      	ldr	r3, [pc, #8]	; (1a4e8 <reset_rx+0xc>)
   1a4e0:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   1a4e2:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   1a4e4:	4770      	bx	lr
   1a4e6:	bf00      	nop
   1a4e8:	2000c914 	.word	0x2000c914

0001a4ec <get_rx>:

static struct net_buf *get_rx(k_timeout_t timeout)
{
   1a4ec:	4602      	mov	r2, r0
	LOG_DBG("type 0x%02x, evt 0x%02x", rx.type, rx.evt.evt);

	switch (rx.type) {
   1a4ee:	4809      	ldr	r0, [pc, #36]	; (1a514 <get_rx+0x28>)
{
   1a4f0:	460b      	mov	r3, r1
	switch (rx.type) {
   1a4f2:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
   1a4f6:	2902      	cmp	r1, #2
   1a4f8:	d007      	beq.n	1a50a <get_rx+0x1e>
   1a4fa:	2904      	cmp	r1, #4
   1a4fc:	d108      	bne.n	1a510 <get_rx+0x24>
	case H4_EVT:
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   1a4fe:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   1a502:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   1a506:	f7f8 ba6b 	b.w	129e0 <bt_buf_get_evt>
	case H4_ACL:
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   1a50a:	2003      	movs	r0, #3
   1a50c:	f7f8 ba18 	b.w	12940 <bt_buf_get_rx>
			return bt_buf_get_rx(BT_BUF_ISO_IN, timeout);
		}
	}

	return NULL;
}
   1a510:	2000      	movs	r0, #0
   1a512:	4770      	bx	lr
   1a514:	2000c914 	.word	0x2000c914

0001a518 <uart_irq_rx_disable.constprop.0>:
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1a518:	4802      	ldr	r0, [pc, #8]	; (1a524 <uart_irq_rx_disable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable != NULL) {
   1a51a:	6883      	ldr	r3, [r0, #8]
   1a51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a51e:	b103      	cbz	r3, 1a522 <uart_irq_rx_disable.constprop.0+0xa>
		api->irq_rx_disable(dev);
   1a520:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
   1a522:	4770      	bx	lr
   1a524:	000318bc 	.word	0x000318bc

0001a528 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   1a528:	4802      	ldr	r0, [pc, #8]	; (1a534 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   1a52a:	6883      	ldr	r3, [r0, #8]
   1a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a52e:	b103      	cbz	r3, 1a532 <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   1a530:	4718      	bx	r3
}
   1a532:	4770      	bx	lr
   1a534:	000318bc 	.word	0x000318bc

0001a538 <uart_irq_tx_disable.constprop.0>:
	const struct uart_driver_api *api =
   1a538:	4802      	ldr	r0, [pc, #8]	; (1a544 <uart_irq_tx_disable.constprop.0+0xc>)
	if (api->irq_tx_disable != NULL) {
   1a53a:	6883      	ldr	r3, [r0, #8]
   1a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a53e:	b103      	cbz	r3, 1a542 <uart_irq_tx_disable.constprop.0+0xa>
		api->irq_tx_disable(dev);
   1a540:	4718      	bx	r3
}
   1a542:	4770      	bx	lr
   1a544:	000318bc 	.word	0x000318bc

0001a548 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   1a548:	4601      	mov	r1, r0
   1a54a:	b508      	push	{r3, lr}
	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   1a54c:	4804      	ldr	r0, [pc, #16]	; (1a560 <h4_send+0x18>)
   1a54e:	f7ff fabb 	bl	19ac8 <net_buf_put>
	const struct uart_driver_api *api =
   1a552:	4804      	ldr	r0, [pc, #16]	; (1a564 <h4_send+0x1c>)
	if (api->irq_tx_enable != NULL) {
   1a554:	6883      	ldr	r3, [r0, #8]
   1a556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a558:	b103      	cbz	r3, 1a55c <h4_send+0x14>
		api->irq_tx_enable(dev);
   1a55a:	4798      	blx	r3
	uart_irq_tx_enable(h4_dev);

	return 0;
}
   1a55c:	2000      	movs	r0, #0
   1a55e:	bd08      	pop	{r3, pc}
   1a560:	2000c8f8 	.word	0x2000c8f8
   1a564:	000318bc 	.word	0x000318bc

0001a568 <uart_fifo_read.constprop.0>:
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   1a568:	b410      	push	{r4}
   1a56a:	4603      	mov	r3, r0
	const struct uart_driver_api *api =
   1a56c:	4806      	ldr	r0, [pc, #24]	; (1a588 <uart_fifo_read.constprop.0+0x20>)
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   1a56e:	460a      	mov	r2, r1
	if (api->fifo_read == NULL) {
   1a570:	6881      	ldr	r1, [r0, #8]
   1a572:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   1a574:	b11c      	cbz	r4, 1a57e <uart_fifo_read.constprop.0+0x16>
	return api->fifo_read(dev, rx_data, size);
   1a576:	4619      	mov	r1, r3
   1a578:	4623      	mov	r3, r4
}
   1a57a:	bc10      	pop	{r4}
	return api->fifo_read(dev, rx_data, size);
   1a57c:	4718      	bx	r3
}
   1a57e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a582:	bc10      	pop	{r4}
   1a584:	4770      	bx	lr
   1a586:	bf00      	nop
   1a588:	000318bc 	.word	0x000318bc

0001a58c <h4_discard.constprop.0>:
static size_t h4_discard(const struct device *uart, size_t len)
   1a58c:	b590      	push	{r4, r7, lr}
   1a58e:	b08b      	sub	sp, #44	; 0x2c
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1a590:	2821      	cmp	r0, #33	; 0x21
static size_t h4_discard(const struct device *uart, size_t len)
   1a592:	af00      	add	r7, sp, #0
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1a594:	4601      	mov	r1, r0
   1a596:	bf28      	it	cs
   1a598:	2121      	movcs	r1, #33	; 0x21
   1a59a:	1d38      	adds	r0, r7, #4
   1a59c:	f7ff ffe4 	bl	1a568 <uart_fifo_read.constprop.0>
	if (unlikely(err < 0)) {
   1a5a0:	2800      	cmp	r0, #0
   1a5a2:	da11      	bge.n	1a5c8 <h4_discard.constprop.0+0x3c>
		LOG_ERR("Unable to read from UART (err %d)", err);
   1a5a4:	466c      	mov	r4, sp
   1a5a6:	b088      	sub	sp, #32
   1a5a8:	466a      	mov	r2, sp
   1a5aa:	4b09      	ldr	r3, [pc, #36]	; (1a5d0 <h4_discard.constprop.0+0x44>)
   1a5ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a5b0:	6153      	str	r3, [r2, #20]
   1a5b2:	4b08      	ldr	r3, [pc, #32]	; (1a5d4 <h4_discard.constprop.0+0x48>)
   1a5b4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1a5b8:	2304      	movs	r3, #4
   1a5ba:	4807      	ldr	r0, [pc, #28]	; (1a5d8 <h4_discard.constprop.0+0x4c>)
   1a5bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5c0:	f013 fe05 	bl	2e1ce <z_log_msg_static_create.constprop.0>
		return 0;
   1a5c4:	2000      	movs	r0, #0
   1a5c6:	46a5      	mov	sp, r4
}
   1a5c8:	372c      	adds	r7, #44	; 0x2c
   1a5ca:	46bd      	mov	sp, r7
   1a5cc:	bd90      	pop	{r4, r7, pc}
   1a5ce:	bf00      	nop
   1a5d0:	00037930 	.word	0x00037930
   1a5d4:	00037b40 	.word	0x00037b40
   1a5d8:	00031b9c 	.word	0x00031b9c

0001a5dc <h4_read_hdr>:
{
   1a5dc:	b598      	push	{r3, r4, r7, lr}
	int bytes_read = rx.hdr_len - rx.remaining;
   1a5de:	4c12      	ldr	r4, [pc, #72]	; (1a628 <h4_read_hdr+0x4c>)
{
   1a5e0:	af00      	add	r7, sp, #0
	int bytes_read = rx.hdr_len - rx.remaining;
   1a5e2:	8c21      	ldrh	r1, [r4, #32]
   1a5e4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   1a5e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
	int bytes_read = rx.hdr_len - rx.remaining;
   1a5ec:	1a5b      	subs	r3, r3, r1
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   1a5ee:	4418      	add	r0, r3
   1a5f0:	f7ff ffba 	bl	1a568 <uart_fifo_read.constprop.0>
	if (unlikely(ret < 0)) {
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	da12      	bge.n	1a61e <h4_read_hdr+0x42>
		LOG_ERR("Unable to read from UART (ret %d)", ret);
   1a5f8:	466c      	mov	r4, sp
   1a5fa:	b088      	sub	sp, #32
   1a5fc:	466a      	mov	r2, sp
   1a5fe:	4b0b      	ldr	r3, [pc, #44]	; (1a62c <h4_read_hdr+0x50>)
   1a600:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a604:	6153      	str	r3, [r2, #20]
   1a606:	4b0a      	ldr	r3, [pc, #40]	; (1a630 <h4_read_hdr+0x54>)
   1a608:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1a60c:	2304      	movs	r3, #4
   1a60e:	4809      	ldr	r0, [pc, #36]	; (1a634 <h4_read_hdr+0x58>)
   1a610:	f842 3f10 	str.w	r3, [r2, #16]!
   1a614:	f013 fddb 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a618:	46a5      	mov	sp, r4
}
   1a61a:	46bd      	mov	sp, r7
   1a61c:	bd98      	pop	{r3, r4, r7, pc}
		rx.remaining -= ret;
   1a61e:	8c23      	ldrh	r3, [r4, #32]
   1a620:	1a1b      	subs	r3, r3, r0
   1a622:	8423      	strh	r3, [r4, #32]
}
   1a624:	e7f9      	b.n	1a61a <h4_read_hdr+0x3e>
   1a626:	bf00      	nop
   1a628:	2000c914 	.word	0x2000c914
   1a62c:	00037956 	.word	0x00037956
   1a630:	00037afa 	.word	0x00037afa
   1a634:	00031b9c 	.word	0x00031b9c

0001a638 <bt_uart_init>:
	.setup		= h4_setup
#endif
};

static int bt_uart_init(void)
{
   1a638:	b508      	push	{r3, lr}
   1a63a:	4806      	ldr	r0, [pc, #24]	; (1a654 <bt_uart_init+0x1c>)
   1a63c:	f015 fe98 	bl	30370 <z_device_is_ready>

	if (!device_is_ready(h4_dev)) {
   1a640:	b120      	cbz	r0, 1a64c <bt_uart_init+0x14>
		return -ENODEV;
	}

	bt_hci_driver_register(&drv);
   1a642:	4805      	ldr	r0, [pc, #20]	; (1a658 <bt_uart_init+0x20>)
   1a644:	f7f9 fbca 	bl	13ddc <bt_hci_driver_register>

	return 0;
   1a648:	2000      	movs	r0, #0
}
   1a64a:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1a64c:	f06f 0012 	mvn.w	r0, #18
   1a650:	e7fb      	b.n	1a64a <bt_uart_init+0x12>
   1a652:	bf00      	nop
   1a654:	000318bc 	.word	0x000318bc
   1a658:	000324cc 	.word	0x000324cc

0001a65c <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   1a65c:	4903      	ldr	r1, [pc, #12]	; (1a66c <copy_hdr+0x10>)
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a65e:	300c      	adds	r0, #12
   1a660:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   1a664:	3128      	adds	r1, #40	; 0x28
   1a666:	f012 bfa4 	b.w	2d5b2 <net_buf_simple_add_mem>
   1a66a:	bf00      	nop
   1a66c:	2000c914 	.word	0x2000c914

0001a670 <rx_thread>:
{
   1a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rx.have_hdr && !rx.buf) {
   1a672:	4c24      	ldr	r4, [pc, #144]	; (1a704 <rx_thread+0x94>)
{
   1a674:	af00      	add	r7, sp, #0
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   1a676:	1d26      	adds	r6, r4, #4
		if (rx.have_hdr && !rx.buf) {
   1a678:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1a67c:	b313      	cbz	r3, 1a6c4 <rx_thread+0x54>
   1a67e:	6823      	ldr	r3, [r4, #0]
   1a680:	bb03      	cbnz	r3, 1a6c4 <rx_thread+0x54>
			rx.buf = get_rx(K_FOREVER);
   1a682:	f04f 31ff 	mov.w	r1, #4294967295
   1a686:	f04f 30ff 	mov.w	r0, #4294967295
   1a68a:	f7ff ff2f 	bl	1a4ec <get_rx>
   1a68e:	6020      	str	r0, [r4, #0]
	return net_buf_simple_tailroom(&buf->b);
   1a690:	300c      	adds	r0, #12
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1a692:	8c25      	ldrh	r5, [r4, #32]
   1a694:	f012 ff85 	bl	2d5a2 <net_buf_simple_tailroom>
   1a698:	4285      	cmp	r5, r0
   1a69a:	d92f      	bls.n	1a6fc <rx_thread+0x8c>
				LOG_ERR("Not enough space in buffer");
   1a69c:	466d      	mov	r5, sp
   1a69e:	b088      	sub	sp, #32
   1a6a0:	466a      	mov	r2, sp
   1a6a2:	4b19      	ldr	r3, [pc, #100]	; (1a708 <rx_thread+0x98>)
   1a6a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a6a8:	6153      	str	r3, [r2, #20]
   1a6aa:	4b18      	ldr	r3, [pc, #96]	; (1a70c <rx_thread+0x9c>)
   1a6ac:	4818      	ldr	r0, [pc, #96]	; (1a710 <rx_thread+0xa0>)
   1a6ae:	6193      	str	r3, [r2, #24]
   1a6b0:	2303      	movs	r3, #3
   1a6b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a6b6:	f013 fd8a 	bl	2e1ce <z_log_msg_static_create.constprop.0>
				rx.discard = rx.remaining;
   1a6ba:	8c23      	ldrh	r3, [r4, #32]
   1a6bc:	46ad      	mov	sp, r5
   1a6be:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   1a6c0:	f7ff ff0c 	bl	1a4dc <reset_rx>
	z_impl_uart_irq_rx_enable(dev);
   1a6c4:	f7ff ff30 	bl	1a528 <z_impl_uart_irq_rx_enable.constprop.0>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   1a6c8:	f04f 32ff 	mov.w	r2, #4294967295
   1a6cc:	f04f 33ff 	mov.w	r3, #4294967295
   1a6d0:	4630      	mov	r0, r6
   1a6d2:	f012 ff4a 	bl	2d56a <net_buf_get>
   1a6d6:	4605      	mov	r5, r0
   1a6d8:	f7ff ff26 	bl	1a528 <z_impl_uart_irq_rx_enable.constprop.0>
			bt_recv(buf);
   1a6dc:	4628      	mov	r0, r5
   1a6de:	f7f9 faa3 	bl	13c28 <bt_recv>
	z_impl_k_yield();
   1a6e2:	f00c fa6d 	bl	26bc0 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   1a6e6:	f7ff ff17 	bl	1a518 <uart_irq_rx_disable.constprop.0>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   1a6ea:	2200      	movs	r2, #0
   1a6ec:	2300      	movs	r3, #0
   1a6ee:	4630      	mov	r0, r6
   1a6f0:	f012 ff3b 	bl	2d56a <net_buf_get>
		} while (buf);
   1a6f4:	4605      	mov	r5, r0
   1a6f6:	2800      	cmp	r0, #0
   1a6f8:	d1ee      	bne.n	1a6d8 <rx_thread+0x68>
   1a6fa:	e7bd      	b.n	1a678 <rx_thread+0x8>
				copy_hdr(rx.buf);
   1a6fc:	6820      	ldr	r0, [r4, #0]
   1a6fe:	f7ff ffad 	bl	1a65c <copy_hdr>
   1a702:	e7df      	b.n	1a6c4 <rx_thread+0x54>
   1a704:	2000c914 	.word	0x2000c914
   1a708:	0003797c 	.word	0x0003797c
   1a70c:	00037b36 	.word	0x00037b36
   1a710:	00031b9c 	.word	0x00031b9c

0001a714 <bt_uart_isr>:
{
   1a714:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   1a718:	b083      	sub	sp, #12
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1a71a:	4ea7      	ldr	r6, [pc, #668]	; (1a9b8 <bt_uart_isr+0x2a4>)
   1a71c:	af00      	add	r7, sp, #0
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   1a71e:	68b3      	ldr	r3, [r6, #8]
	if (!tx.buf) {
   1a720:	4da6      	ldr	r5, [pc, #664]	; (1a9bc <bt_uart_isr+0x2a8>)
   1a722:	607b      	str	r3, [r7, #4]
   1a724:	687b      	ldr	r3, [r7, #4]
   1a726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1a728:	2b00      	cmp	r3, #0
   1a72a:	f040 81fc 	bne.w	1ab26 <bt_uart_isr+0x412>
	const struct uart_driver_api *api =
   1a72e:	68b4      	ldr	r4, [r6, #8]
	if (api->irq_is_pending == NULL) {
   1a730:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1a732:	2b00      	cmp	r3, #0
   1a734:	f040 8200 	bne.w	1ab38 <bt_uart_isr+0x424>
	if (api->irq_tx_ready == NULL) {
   1a738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a73a:	b9e3      	cbnz	r3, 1a776 <bt_uart_isr+0x62>
   1a73c:	686b      	ldr	r3, [r5, #4]
   1a73e:	2b00      	cmp	r3, #0
   1a740:	d12b      	bne.n	1a79a <bt_uart_isr+0x86>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1a742:	2200      	movs	r2, #0
   1a744:	2300      	movs	r3, #0
   1a746:	489e      	ldr	r0, [pc, #632]	; (1a9c0 <bt_uart_isr+0x2ac>)
   1a748:	f012 ff0f 	bl	2d56a <net_buf_get>
   1a74c:	6068      	str	r0, [r5, #4]
		if (!tx.buf) {
   1a74e:	bb20      	cbnz	r0, 1a79a <bt_uart_isr+0x86>
			LOG_ERR("TX interrupt but no pending buffer!");
   1a750:	466c      	mov	r4, sp
   1a752:	b088      	sub	sp, #32
   1a754:	466a      	mov	r2, sp
   1a756:	4b9b      	ldr	r3, [pc, #620]	; (1a9c4 <bt_uart_isr+0x2b0>)
   1a758:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a75c:	6153      	str	r3, [r2, #20]
   1a75e:	4b9a      	ldr	r3, [pc, #616]	; (1a9c8 <bt_uart_isr+0x2b4>)
   1a760:	489a      	ldr	r0, [pc, #616]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a762:	6193      	str	r3, [r2, #24]
   1a764:	2303      	movs	r3, #3
   1a766:	f842 3f10 	str.w	r3, [r2, #16]!
   1a76a:	f013 fd30 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a76e:	46a5      	mov	sp, r4
		uart_irq_tx_disable(h4_dev);
   1a770:	f7ff fee2 	bl	1a538 <uart_irq_tx_disable.constprop.0>
   1a774:	e003      	b.n	1a77e <bt_uart_isr+0x6a>
	return api->irq_tx_ready(dev);
   1a776:	4630      	mov	r0, r6
   1a778:	4798      	blx	r3
		if (uart_irq_tx_ready(h4_dev)) {
   1a77a:	2800      	cmp	r0, #0
   1a77c:	d1de      	bne.n	1a73c <bt_uart_isr+0x28>
	if (api->irq_rx_ready == NULL) {
   1a77e:	68b3      	ldr	r3, [r6, #8]
   1a780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a782:	2b00      	cmp	r3, #0
   1a784:	d173      	bne.n	1a86e <bt_uart_isr+0x15a>
	if (rx.discard) {
   1a786:	4c92      	ldr	r4, [pc, #584]	; (1a9d0 <bt_uart_isr+0x2bc>)
   1a788:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1a78a:	2800      	cmp	r0, #0
   1a78c:	d075      	beq.n	1a87a <bt_uart_isr+0x166>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   1a78e:	f7ff fefd 	bl	1a58c <h4_discard.constprop.0>
   1a792:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1a794:	1a1b      	subs	r3, r3, r0
   1a796:	8463      	strh	r3, [r4, #34]	; 0x22
		return;
   1a798:	e7c4      	b.n	1a724 <bt_uart_isr+0x10>
	if (!tx.type) {
   1a79a:	782a      	ldrb	r2, [r5, #0]
		switch (bt_buf_get_type(tx.buf)) {
   1a79c:	686b      	ldr	r3, [r5, #4]
	if (!tx.type) {
   1a79e:	2a00      	cmp	r2, #0
   1a7a0:	d13e      	bne.n	1a820 <bt_uart_isr+0x10c>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1a7a2:	7e1b      	ldrb	r3, [r3, #24]
		switch (bt_buf_get_type(tx.buf)) {
   1a7a4:	b1fb      	cbz	r3, 1a7e6 <bt_uart_isr+0xd2>
   1a7a6:	2b02      	cmp	r3, #2
   1a7a8:	d01e      	beq.n	1a7e8 <bt_uart_isr+0xd4>
			LOG_ERR("Unknown buffer type");
   1a7aa:	466c      	mov	r4, sp
   1a7ac:	b088      	sub	sp, #32
   1a7ae:	466a      	mov	r2, sp
   1a7b0:	4b88      	ldr	r3, [pc, #544]	; (1a9d4 <bt_uart_isr+0x2c0>)
   1a7b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a7b6:	6153      	str	r3, [r2, #20]
   1a7b8:	4b83      	ldr	r3, [pc, #524]	; (1a9c8 <bt_uart_isr+0x2b4>)
   1a7ba:	4884      	ldr	r0, [pc, #528]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a7bc:	6193      	str	r3, [r2, #24]
   1a7be:	2303      	movs	r3, #3
   1a7c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7c4:	f013 fd03 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a7c8:	46a5      	mov	sp, r4
	tx.type = H4_NONE;
   1a7ca:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   1a7cc:	6868      	ldr	r0, [r5, #4]
	tx.type = H4_NONE;
   1a7ce:	702b      	strb	r3, [r5, #0]
	net_buf_unref(tx.buf);
   1a7d0:	f7ff f9a0 	bl	19b14 <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1a7d4:	2200      	movs	r2, #0
   1a7d6:	2300      	movs	r3, #0
   1a7d8:	4879      	ldr	r0, [pc, #484]	; (1a9c0 <bt_uart_isr+0x2ac>)
   1a7da:	f012 fec6 	bl	2d56a <net_buf_get>
   1a7de:	6068      	str	r0, [r5, #4]
	if (!tx.buf) {
   1a7e0:	2800      	cmp	r0, #0
   1a7e2:	d1cc      	bne.n	1a77e <bt_uart_isr+0x6a>
   1a7e4:	e7c4      	b.n	1a770 <bt_uart_isr+0x5c>
		switch (bt_buf_get_type(tx.buf)) {
   1a7e6:	2301      	movs	r3, #1
			tx.type = H4_ACL;
   1a7e8:	702b      	strb	r3, [r5, #0]
	if (api->fifo_fill == NULL) {
   1a7ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a7ec:	b993      	cbnz	r3, 1a814 <bt_uart_isr+0x100>
			LOG_WRN("Unable to send H:4 type");
   1a7ee:	466c      	mov	r4, sp
   1a7f0:	b088      	sub	sp, #32
   1a7f2:	466a      	mov	r2, sp
   1a7f4:	4b78      	ldr	r3, [pc, #480]	; (1a9d8 <bt_uart_isr+0x2c4>)
   1a7f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a7fa:	6153      	str	r3, [r2, #20]
   1a7fc:	4b72      	ldr	r3, [pc, #456]	; (1a9c8 <bt_uart_isr+0x2b4>)
   1a7fe:	4873      	ldr	r0, [pc, #460]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a800:	6193      	str	r3, [r2, #24]
   1a802:	2303      	movs	r3, #3
   1a804:	f842 3f10 	str.w	r3, [r2, #16]!
   1a808:	f013 fce1 	bl	2e1ce <z_log_msg_static_create.constprop.0>
			tx.type = H4_NONE;
   1a80c:	2300      	movs	r3, #0
   1a80e:	46a5      	mov	sp, r4
   1a810:	702b      	strb	r3, [r5, #0]
			return;
   1a812:	e7b4      	b.n	1a77e <bt_uart_isr+0x6a>
	return api->fifo_fill(dev, tx_data, size);
   1a814:	2201      	movs	r2, #1
   1a816:	4629      	mov	r1, r5
   1a818:	4630      	mov	r0, r6
   1a81a:	4798      	blx	r3
		if (bytes != 1) {
   1a81c:	2801      	cmp	r0, #1
   1a81e:	d1e6      	bne.n	1a7ee <bt_uart_isr+0xda>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   1a820:	686b      	ldr	r3, [r5, #4]
   1a822:	68d9      	ldr	r1, [r3, #12]
   1a824:	8a1a      	ldrh	r2, [r3, #16]
	if (api->fifo_fill == NULL) {
   1a826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a828:	b1cb      	cbz	r3, 1a85e <bt_uart_isr+0x14a>
	return api->fifo_fill(dev, tx_data, size);
   1a82a:	4630      	mov	r0, r6
   1a82c:	4798      	blx	r3
	if (unlikely(bytes < 0)) {
   1a82e:	1e01      	subs	r1, r0, #0
   1a830:	da18      	bge.n	1a864 <bt_uart_isr+0x150>
		LOG_ERR("Unable to write to UART (err %d)", bytes);
   1a832:	466c      	mov	r4, sp
   1a834:	b088      	sub	sp, #32
   1a836:	466a      	mov	r2, sp
   1a838:	4b68      	ldr	r3, [pc, #416]	; (1a9dc <bt_uart_isr+0x2c8>)
   1a83a:	4864      	ldr	r0, [pc, #400]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a83c:	6153      	str	r3, [r2, #20]
   1a83e:	4b62      	ldr	r3, [pc, #392]	; (1a9c8 <bt_uart_isr+0x2b4>)
   1a840:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1a844:	2304      	movs	r3, #4
   1a846:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a84a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a84e:	f013 fcbe 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a852:	46a5      	mov	sp, r4
	if (tx.buf->len) {
   1a854:	686b      	ldr	r3, [r5, #4]
   1a856:	8a1b      	ldrh	r3, [r3, #16]
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d0b6      	beq.n	1a7ca <bt_uart_isr+0xb6>
   1a85c:	e78f      	b.n	1a77e <bt_uart_isr+0x6a>
		return -ENOSYS;
   1a85e:	f06f 0157 	mvn.w	r1, #87	; 0x57
   1a862:	e7e6      	b.n	1a832 <bt_uart_isr+0x11e>
	return net_buf_simple_pull(&buf->b, len);
   1a864:	6868      	ldr	r0, [r5, #4]
   1a866:	300c      	adds	r0, #12
   1a868:	f7ff fa9e 	bl	19da8 <net_buf_simple_pull>
   1a86c:	e7f2      	b.n	1a854 <bt_uart_isr+0x140>
	return api->irq_rx_ready(dev);
   1a86e:	4630      	mov	r0, r6
   1a870:	4798      	blx	r3
		if (uart_irq_rx_ready(h4_dev)) {
   1a872:	2800      	cmp	r0, #0
   1a874:	f43f af56 	beq.w	1a724 <bt_uart_isr+0x10>
   1a878:	e785      	b.n	1a786 <bt_uart_isr+0x72>
	if (rx.have_hdr) {
   1a87a:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
   1a87e:	f1b9 0f00 	cmp.w	r9, #0
   1a882:	f000 80c6 	beq.w	1aa12 <bt_uart_isr+0x2fe>
	if (!rx.buf) {
   1a886:	6823      	ldr	r3, [r4, #0]
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d14a      	bne.n	1a922 <bt_uart_isr+0x20e>
		rx.buf = get_rx(K_NO_WAIT);
   1a88c:	2000      	movs	r0, #0
   1a88e:	2100      	movs	r1, #0
   1a890:	f7ff fe2c 	bl	1a4ec <get_rx>
   1a894:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   1a896:	bb60      	cbnz	r0, 1a8f2 <bt_uart_isr+0x1de>
			if (rx.discardable) {
   1a898:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1a89c:	4b50      	ldr	r3, [pc, #320]	; (1a9e0 <bt_uart_isr+0x2cc>)
   1a89e:	b1b2      	cbz	r2, 1a8ce <bt_uart_isr+0x1ba>
				LOG_WRN("Discarding event 0x%02x", rx.evt.evt);
   1a8a0:	46e9      	mov	r9, sp
   1a8a2:	b088      	sub	sp, #32
   1a8a4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   1a8a8:	466a      	mov	r2, sp
   1a8aa:	484e      	ldr	r0, [pc, #312]	; (1a9e4 <bt_uart_isr+0x2d0>)
   1a8ac:	61d1      	str	r1, [r2, #28]
   1a8ae:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1a8b2:	2304      	movs	r3, #4
   1a8b4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a8b8:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Not enough space in buffer");
   1a8bc:	4843      	ldr	r0, [pc, #268]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a8be:	f013 fc86 	bl	2e1ce <z_log_msg_static_create.constprop.0>
			rx.discard = rx.remaining;
   1a8c2:	8c23      	ldrh	r3, [r4, #32]
   1a8c4:	46cd      	mov	sp, r9
   1a8c6:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   1a8c8:	f7ff fe08 	bl	1a4dc <reset_rx>
   1a8cc:	e72a      	b.n	1a724 <bt_uart_isr+0x10>
			LOG_WRN("Failed to allocate, deferring to rx_thread");
   1a8ce:	466c      	mov	r4, sp
   1a8d0:	b088      	sub	sp, #32
   1a8d2:	466a      	mov	r2, sp
   1a8d4:	4944      	ldr	r1, [pc, #272]	; (1a9e8 <bt_uart_isr+0x2d4>)
   1a8d6:	483d      	ldr	r0, [pc, #244]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a8d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a8dc:	2303      	movs	r3, #3
   1a8de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a8e2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8e6:	f013 fc72 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a8ea:	46a5      	mov	sp, r4
			uart_irq_rx_disable(h4_dev);
   1a8ec:	f7ff fe14 	bl	1a518 <uart_irq_rx_disable.constprop.0>
			return;
   1a8f0:	e718      	b.n	1a724 <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   1a8f2:	300c      	adds	r0, #12
   1a8f4:	f012 fe55 	bl	2d5a2 <net_buf_simple_tailroom>
		if (buf_tailroom < rx.remaining) {
   1a8f8:	8c23      	ldrh	r3, [r4, #32]
   1a8fa:	4298      	cmp	r0, r3
   1a8fc:	d20e      	bcs.n	1a91c <bt_uart_isr+0x208>
			LOG_ERR("Not enough space in buffer %u/%zu", rx.remaining, buf_tailroom);
   1a8fe:	46e9      	mov	r9, sp
   1a900:	b08a      	sub	sp, #40	; 0x28
   1a902:	466a      	mov	r2, sp
   1a904:	4939      	ldr	r1, [pc, #228]	; (1a9ec <bt_uart_isr+0x2d8>)
   1a906:	6210      	str	r0, [r2, #32]
   1a908:	6151      	str	r1, [r2, #20]
   1a90a:	4935      	ldr	r1, [pc, #212]	; (1a9e0 <bt_uart_isr+0x2cc>)
   1a90c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1a910:	2305      	movs	r3, #5
   1a912:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1a916:	f842 3f10 	str.w	r3, [r2, #16]!
   1a91a:	e7cf      	b.n	1a8bc <bt_uart_isr+0x1a8>
		copy_hdr(rx.buf);
   1a91c:	6820      	ldr	r0, [r4, #0]
   1a91e:	f7ff fe9d 	bl	1a65c <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   1a922:	6823      	ldr	r3, [r4, #0]
   1a924:	8c21      	ldrh	r1, [r4, #32]
	return buf->data + buf->len;
   1a926:	8a1a      	ldrh	r2, [r3, #16]
   1a928:	68d8      	ldr	r0, [r3, #12]
   1a92a:	4410      	add	r0, r2
   1a92c:	f7ff fe1c 	bl	1a568 <uart_fifo_read.constprop.0>
	if (unlikely(read < 0)) {
   1a930:	f1b0 0900 	subs.w	r9, r0, #0
   1a934:	da11      	bge.n	1a95a <bt_uart_isr+0x246>
		LOG_ERR("Failed to read UART (err %d)", read);
   1a936:	466c      	mov	r4, sp
   1a938:	b088      	sub	sp, #32
   1a93a:	466a      	mov	r2, sp
   1a93c:	4b2c      	ldr	r3, [pc, #176]	; (1a9f0 <bt_uart_isr+0x2dc>)
   1a93e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a942:	6153      	str	r3, [r2, #20]
   1a944:	4b26      	ldr	r3, [pc, #152]	; (1a9e0 <bt_uart_isr+0x2cc>)
   1a946:	4821      	ldr	r0, [pc, #132]	; (1a9cc <bt_uart_isr+0x2b8>)
   1a948:	e9c2 3906 	strd	r3, r9, [r2, #24]
   1a94c:	2304      	movs	r3, #4
   1a94e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a952:	f013 fc3c 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1a956:	46a5      	mov	sp, r4
		return;
   1a958:	e6e4      	b.n	1a724 <bt_uart_isr+0x10>
	return net_buf_simple_add(&buf->b, len);
   1a95a:	6820      	ldr	r0, [r4, #0]
   1a95c:	4649      	mov	r1, r9
   1a95e:	300c      	adds	r0, #12
   1a960:	f7ff fa5e 	bl	19e20 <net_buf_simple_add>
	rx.remaining -= read;
   1a964:	8c23      	ldrh	r3, [r4, #32]
   1a966:	eba3 0109 	sub.w	r1, r3, r9
   1a96a:	b289      	uxth	r1, r1
   1a96c:	8421      	strh	r1, [r4, #32]
	if (rx.remaining) {
   1a96e:	2900      	cmp	r1, #0
   1a970:	f47f aed8 	bne.w	1a724 <bt_uart_isr+0x10>
	if (rx.type == H4_EVT) {
   1a974:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   1a978:	f8d4 9000 	ldr.w	r9, [r4]
	if (rx.type == H4_EVT) {
   1a97c:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   1a97e:	6021      	str	r1, [r4, #0]
	if (rx.type == H4_EVT) {
   1a980:	d145      	bne.n	1aa0e <bt_uart_isr+0x2fa>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   1a982:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a986:	2b0f      	cmp	r3, #15
   1a988:	d809      	bhi.n	1a99e <bt_uart_isr+0x28a>
   1a98a:	2b0d      	cmp	r3, #13
   1a98c:	d80b      	bhi.n	1a9a6 <bt_uart_isr+0x292>
   1a98e:	2b05      	cmp	r3, #5
   1a990:	d030      	beq.n	1a9f4 <bt_uart_isr+0x2e0>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a992:	2301      	movs	r3, #1
   1a994:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1a998:	f7ff fda0 	bl	1a4dc <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a99c:	e032      	b.n	1aa04 <bt_uart_isr+0x2f0>
   1a99e:	2b13      	cmp	r3, #19
   1a9a0:	d001      	beq.n	1a9a6 <bt_uart_isr+0x292>
   1a9a2:	2b1a      	cmp	r3, #26
   1a9a4:	d1f5      	bne.n	1a992 <bt_uart_isr+0x27e>
   1a9a6:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1a9a8:	4648      	mov	r0, r9
   1a9aa:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1a9ae:	f7ff fd95 	bl	1a4dc <reset_rx>
		bt_recv_prio(buf);
   1a9b2:	f7f9 f9f5 	bl	13da0 <bt_recv_prio>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1a9b6:	e6b5      	b.n	1a724 <bt_uart_isr+0x10>
   1a9b8:	000318bc 	.word	0x000318bc
   1a9bc:	2000c8f0 	.word	0x2000c8f0
   1a9c0:	2000c8f8 	.word	0x2000c8f8
   1a9c4:	0003799b 	.word	0x0003799b
   1a9c8:	00037b2b 	.word	0x00037b2b
   1a9cc:	00031b9c 	.word	0x00031b9c
   1a9d0:	2000c914 	.word	0x2000c914
   1a9d4:	000379c3 	.word	0x000379c3
   1a9d8:	000379db 	.word	0x000379db
   1a9dc:	000379f7 	.word	0x000379f7
   1a9e0:	00037b1e 	.word	0x00037b1e
   1a9e4:	00037a1c 	.word	0x00037a1c
   1a9e8:	00037a38 	.word	0x00037a38
   1a9ec:	00037a67 	.word	0x00037a67
   1a9f0:	00037a8d 	.word	0x00037a8d
   1a9f4:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1a9f6:	4648      	mov	r0, r9
   1a9f8:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1a9fc:	f7ff fd6e 	bl	1a4dc <reset_rx>
		bt_recv_prio(buf);
   1aa00:	f7f9 f9ce 	bl	13da0 <bt_recv_prio>
		net_buf_put(&rx.fifo, buf);
   1aa04:	4649      	mov	r1, r9
   1aa06:	484f      	ldr	r0, [pc, #316]	; (1ab44 <bt_uart_isr+0x430>)
   1aa08:	f7ff f85e 	bl	19ac8 <net_buf_put>
   1aa0c:	e68a      	b.n	1a724 <bt_uart_isr+0x10>
   1aa0e:	2303      	movs	r3, #3
   1aa10:	e7c0      	b.n	1a994 <bt_uart_isr+0x280>
	switch (rx.type) {
   1aa12:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1aa16:	2b02      	cmp	r3, #2
   1aa18:	d075      	beq.n	1ab06 <bt_uart_isr+0x3f2>
   1aa1a:	2b04      	cmp	r3, #4
   1aa1c:	d034      	beq.n	1aa88 <bt_uart_isr+0x374>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   1aa1e:	2101      	movs	r1, #1
   1aa20:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1aa24:	f7ff fda0 	bl	1a568 <uart_fifo_read.constprop.0>
   1aa28:	2801      	cmp	r0, #1
   1aa2a:	d012      	beq.n	1aa52 <bt_uart_isr+0x33e>
		LOG_WRN("Unable to read H:4 packet type");
   1aa2c:	46ea      	mov	sl, sp
   1aa2e:	b088      	sub	sp, #32
   1aa30:	466a      	mov	r2, sp
   1aa32:	4b45      	ldr	r3, [pc, #276]	; (1ab48 <bt_uart_isr+0x434>)
   1aa34:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1aa38:	6153      	str	r3, [r2, #20]
   1aa3a:	4b44      	ldr	r3, [pc, #272]	; (1ab4c <bt_uart_isr+0x438>)
   1aa3c:	6193      	str	r3, [r2, #24]
   1aa3e:	2303      	movs	r3, #3
   1aa40:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   1aa44:	4842      	ldr	r0, [pc, #264]	; (1ab50 <bt_uart_isr+0x43c>)
   1aa46:	f013 fbc2 	bl	2e1ce <z_log_msg_static_create.constprop.0>
   1aa4a:	46d5      	mov	sp, sl
		rx.type = H4_NONE;
   1aa4c:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
   1aa50:	e668      	b.n	1a724 <bt_uart_isr+0x10>
	switch (rx.type) {
   1aa52:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1aa56:	2b02      	cmp	r3, #2
   1aa58:	d006      	beq.n	1aa68 <bt_uart_isr+0x354>
   1aa5a:	2b04      	cmp	r3, #4
   1aa5c:	d106      	bne.n	1aa6c <bt_uart_isr+0x358>
		rx.remaining = sizeof(rx.evt);
   1aa5e:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   1aa60:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   1aa62:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   1aa66:	e65d      	b.n	1a724 <bt_uart_isr+0x10>
		rx.remaining = sizeof(rx.acl);
   1aa68:	2304      	movs	r3, #4
   1aa6a:	e7f9      	b.n	1aa60 <bt_uart_isr+0x34c>
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   1aa6c:	46ea      	mov	sl, sp
   1aa6e:	b088      	sub	sp, #32
   1aa70:	466a      	mov	r2, sp
   1aa72:	4938      	ldr	r1, [pc, #224]	; (1ab54 <bt_uart_isr+0x440>)
   1aa74:	6151      	str	r1, [r2, #20]
   1aa76:	4935      	ldr	r1, [pc, #212]	; (1ab4c <bt_uart_isr+0x438>)
	switch (rx.type) {
   1aa78:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   1aa7c:	2304      	movs	r3, #4
   1aa7e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1aa82:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa86:	e7dd      	b.n	1aa44 <bt_uart_isr+0x330>
	h4_read_hdr();
   1aa88:	f7ff fda8 	bl	1a5dc <h4_read_hdr>
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   1aa8c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1aa90:	2b02      	cmp	r3, #2
   1aa92:	d10b      	bne.n	1aaac <bt_uart_isr+0x398>
   1aa94:	8c23      	ldrh	r3, [r4, #32]
   1aa96:	2b01      	cmp	r3, #1
   1aa98:	d808      	bhi.n	1aaac <bt_uart_isr+0x398>
		switch (rx.evt.evt) {
   1aa9a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1aa9e:	2a3e      	cmp	r2, #62	; 0x3e
			rx.remaining++;
   1aaa0:	bf01      	itttt	eq
   1aaa2:	3301      	addeq	r3, #1
   1aaa4:	8423      	strheq	r3, [r4, #32]
			rx.hdr_len++;
   1aaa6:	2303      	moveq	r3, #3
   1aaa8:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   1aaac:	8c23      	ldrh	r3, [r4, #32]
   1aaae:	bb83      	cbnz	r3, 1ab12 <bt_uart_isr+0x3fe>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   1aab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aab2:	4a29      	ldr	r2, [pc, #164]	; (1ab58 <bt_uart_isr+0x444>)
   1aab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   1aab8:	4293      	cmp	r3, r2
			rx.discardable = true;
   1aaba:	bf04      	itt	eq
   1aabc:	2301      	moveq	r3, #1
   1aabe:	f884 3025 	strbeq.w	r3, [r4, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   1aac2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1aac6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1aaca:	3302      	adds	r3, #2
   1aacc:	1a9b      	subs	r3, r3, r2
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1aace:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   1aad0:	2301      	movs	r3, #1
   1aad2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   1aad6:	6820      	ldr	r0, [r4, #0]
   1aad8:	2800      	cmp	r0, #0
   1aada:	f43f ae23 	beq.w	1a724 <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   1aade:	300c      	adds	r0, #12
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1aae0:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   1aae4:	f012 fd5d 	bl	2d5a2 <net_buf_simple_tailroom>
   1aae8:	4581      	cmp	r9, r0
   1aaea:	d918      	bls.n	1ab1e <bt_uart_isr+0x40a>
			LOG_ERR("Not enough space in buffer");
   1aaec:	46e9      	mov	r9, sp
   1aaee:	b088      	sub	sp, #32
   1aaf0:	466a      	mov	r2, sp
   1aaf2:	4b1a      	ldr	r3, [pc, #104]	; (1ab5c <bt_uart_isr+0x448>)
   1aaf4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aaf8:	6153      	str	r3, [r2, #20]
   1aafa:	4b19      	ldr	r3, [pc, #100]	; (1ab60 <bt_uart_isr+0x44c>)
   1aafc:	6193      	str	r3, [r2, #24]
   1aafe:	2303      	movs	r3, #3
   1ab00:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab04:	e6da      	b.n	1a8bc <bt_uart_isr+0x1a8>
	h4_read_hdr();
   1ab06:	f7ff fd69 	bl	1a5dc <h4_read_hdr>
	if (!rx.remaining) {
   1ab0a:	8c23      	ldrh	r3, [r4, #32]
   1ab0c:	b90b      	cbnz	r3, 1ab12 <bt_uart_isr+0x3fe>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1ab0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1ab10:	e7dd      	b.n	1aace <bt_uart_isr+0x3ba>
	if (rx.have_hdr && rx.buf) {
   1ab12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ab16:	2b00      	cmp	r3, #0
   1ab18:	f43f ae04 	beq.w	1a724 <bt_uart_isr+0x10>
   1ab1c:	e7db      	b.n	1aad6 <bt_uart_isr+0x3c2>
			copy_hdr(rx.buf);
   1ab1e:	6820      	ldr	r0, [r4, #0]
   1ab20:	f7ff fd9c 	bl	1a65c <copy_hdr>
   1ab24:	e5fe      	b.n	1a724 <bt_uart_isr+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   1ab26:	4630      	mov	r0, r6
   1ab28:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1ab2a:	2800      	cmp	r0, #0
   1ab2c:	f47f adff 	bne.w	1a72e <bt_uart_isr+0x1a>
}
   1ab30:	370c      	adds	r7, #12
   1ab32:	46bd      	mov	sp, r7
   1ab34:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
	return api->irq_is_pending(dev);
   1ab38:	4630      	mov	r0, r6
   1ab3a:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1ab3c:	2800      	cmp	r0, #0
   1ab3e:	f47f adfb 	bne.w	1a738 <bt_uart_isr+0x24>
   1ab42:	e7f5      	b.n	1ab30 <bt_uart_isr+0x41c>
   1ab44:	2000c918 	.word	0x2000c918
   1ab48:	00037aae 	.word	0x00037aae
   1ab4c:	00037b06 	.word	0x00037b06
   1ab50:	00031b9c 	.word	0x00031b9c
   1ab54:	00037ad1 	.word	0x00037ad1
   1ab58:	0002003e 	.word	0x0002003e
   1ab5c:	0003797c 	.word	0x0003797c
   1ab60:	00037b12 	.word	0x00037b12

0001ab64 <h4_open>:
{
   1ab64:	b510      	push	{r4, lr}
	ret = bt_hci_transport_setup(h4_dev);
   1ab66:	4c17      	ldr	r4, [pc, #92]	; (1abc4 <h4_open+0x60>)
{
   1ab68:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   1ab6a:	f7ff fcd5 	bl	1a518 <uart_irq_rx_disable.constprop.0>
	uart_irq_tx_disable(h4_dev);
   1ab6e:	f7ff fce3 	bl	1a538 <uart_irq_tx_disable.constprop.0>
	ret = bt_hci_transport_setup(h4_dev);
   1ab72:	4620      	mov	r0, r4
   1ab74:	f7f7 fd28 	bl	125c8 <bt_hci_transport_setup>
	if (ret < 0) {
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	db20      	blt.n	1abbe <h4_open+0x5a>
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1ab7c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1ab7e:	b12b      	cbz	r3, 1ab8c <h4_open+0x28>
   1ab80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ab82:	b11b      	cbz	r3, 1ab8c <h4_open+0x28>
		api->irq_callback_set(dev, cb, user_data);
   1ab84:	2200      	movs	r2, #0
   1ab86:	4620      	mov	r0, r4
   1ab88:	490f      	ldr	r1, [pc, #60]	; (1abc8 <h4_open+0x64>)
   1ab8a:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	2300      	movs	r3, #0
   1ab90:	2400      	movs	r4, #0
   1ab92:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab96:	f06f 0307 	mvn.w	r3, #7
   1ab9a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1ab9e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1aba2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1aba6:	4b09      	ldr	r3, [pc, #36]	; (1abcc <h4_open+0x68>)
   1aba8:	4909      	ldr	r1, [pc, #36]	; (1abd0 <h4_open+0x6c>)
   1abaa:	9400      	str	r4, [sp, #0]
   1abac:	4809      	ldr	r0, [pc, #36]	; (1abd4 <h4_open+0x70>)
   1abae:	f009 ff6d 	bl	24a8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1abb2:	4909      	ldr	r1, [pc, #36]	; (1abd8 <h4_open+0x74>)
   1abb4:	f015 fc19 	bl	303ea <z_impl_k_thread_name_set>
	return 0;
   1abb8:	4620      	mov	r0, r4
}
   1abba:	b008      	add	sp, #32
   1abbc:	bd10      	pop	{r4, pc}
		return -EIO;
   1abbe:	f06f 0004 	mvn.w	r0, #4
   1abc2:	e7fa      	b.n	1abba <h4_open+0x56>
   1abc4:	000318bc 	.word	0x000318bc
   1abc8:	0001a715 	.word	0x0001a715
   1abcc:	0001a671 	.word	0x0001a671
   1abd0:	20011438 	.word	0x20011438
   1abd4:	2000da78 	.word	0x2000da78
   1abd8:	00037aed 	.word	0x00037aed

0001abdc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1abde:	2340      	movs	r3, #64	; 0x40
{
   1abe0:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1abe2:	490a      	ldr	r1, [pc, #40]	; (1ac0c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1abe4:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1abe6:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1abe8:	1149      	asrs	r1, r1, #5
{
   1abea:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1abec:	4623      	mov	r3, r4
   1abee:	4a08      	ldr	r2, [pc, #32]	; (1ac10 <onoff_start+0x34>)
   1abf0:	4808      	ldr	r0, [pc, #32]	; (1ac14 <onoff_start+0x38>)
   1abf2:	f013 fb02 	bl	2e1fa <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1abf6:	1e01      	subs	r1, r0, #0
   1abf8:	da05      	bge.n	1ac06 <onoff_start+0x2a>
		notify(mgr, err);
   1abfa:	4628      	mov	r0, r5
   1abfc:	4623      	mov	r3, r4
	}
}
   1abfe:	b003      	add	sp, #12
   1ac00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1ac04:	4718      	bx	r3
}
   1ac06:	b003      	add	sp, #12
   1ac08:	bd30      	pop	{r4, r5, pc}
   1ac0a:	bf00      	nop
   1ac0c:	2000e47c 	.word	0x2000e47c
   1ac10:	0002e265 	.word	0x0002e265
   1ac14:	00031814 	.word	0x00031814

0001ac18 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ac18:	b2c9      	uxtb	r1, r1
   1ac1a:	2901      	cmp	r1, #1
{
   1ac1c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ac1e:	d909      	bls.n	1ac34 <get_status+0x1c>
   1ac20:	4908      	ldr	r1, [pc, #32]	; (1ac44 <get_status+0x2c>)
   1ac22:	4809      	ldr	r0, [pc, #36]	; (1ac48 <get_status+0x30>)
   1ac24:	237a      	movs	r3, #122	; 0x7a
   1ac26:	4a09      	ldr	r2, [pc, #36]	; (1ac4c <get_status+0x34>)
   1ac28:	f010 f8c6 	bl	2adb8 <assert_print>
   1ac2c:	217a      	movs	r1, #122	; 0x7a
   1ac2e:	4807      	ldr	r0, [pc, #28]	; (1ac4c <get_status+0x34>)
   1ac30:	f010 f8bb 	bl	2adaa <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ac34:	220c      	movs	r2, #12
   1ac36:	6903      	ldr	r3, [r0, #16]
   1ac38:	fb01 3302 	mla	r3, r1, r2, r3
   1ac3c:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1ac3e:	f000 0007 	and.w	r0, r0, #7
   1ac42:	bd08      	pop	{r3, pc}
   1ac44:	00037b96 	.word	0x00037b96
   1ac48:	00033bc2 	.word	0x00033bc2
   1ac4c:	00037b59 	.word	0x00037b59

0001ac50 <stop>:
{
   1ac50:	b570      	push	{r4, r5, r6, lr}
   1ac52:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ac54:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1ac56:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ac58:	d90b      	bls.n	1ac72 <stop+0x22>
   1ac5a:	4919      	ldr	r1, [pc, #100]	; (1acc0 <stop+0x70>)
   1ac5c:	4819      	ldr	r0, [pc, #100]	; (1acc4 <stop+0x74>)
   1ac5e:	f240 135d 	movw	r3, #349	; 0x15d
   1ac62:	4a19      	ldr	r2, [pc, #100]	; (1acc8 <stop+0x78>)
   1ac64:	f010 f8a8 	bl	2adb8 <assert_print>
   1ac68:	f240 115d 	movw	r1, #349	; 0x15d
   1ac6c:	4816      	ldr	r0, [pc, #88]	; (1acc8 <stop+0x78>)
   1ac6e:	f010 f89c 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   1ac72:	f04f 0420 	mov.w	r4, #32
   1ac76:	f3ef 8511 	mrs	r5, BASEPRI
   1ac7a:	f384 8812 	msr	BASEPRI_MAX, r4
   1ac7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ac82:	260c      	movs	r6, #12
   1ac84:	fb06 3401 	mla	r4, r6, r1, r3
   1ac88:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ac8a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1ac8e:	d008      	beq.n	1aca2 <stop+0x52>
   1ac90:	42a2      	cmp	r2, r4
   1ac92:	d006      	beq.n	1aca2 <stop+0x52>
	__asm__ volatile(
   1ac94:	f385 8811 	msr	BASEPRI, r5
   1ac98:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1ac9c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1aca0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1aca2:	2201      	movs	r2, #1
   1aca4:	4371      	muls	r1, r6
   1aca6:	440b      	add	r3, r1
   1aca8:	649a      	str	r2, [r3, #72]	; 0x48
   1acaa:	f385 8811 	msr	BASEPRI, r5
   1acae:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1acb2:	6843      	ldr	r3, [r0, #4]
   1acb4:	440b      	add	r3, r1
   1acb6:	685b      	ldr	r3, [r3, #4]
   1acb8:	4798      	blx	r3
	return 0;
   1acba:	2000      	movs	r0, #0
   1acbc:	e7f0      	b.n	1aca0 <stop+0x50>
   1acbe:	bf00      	nop
   1acc0:	00037b96 	.word	0x00037b96
   1acc4:	00033bc2 	.word	0x00033bc2
   1acc8:	00037b59 	.word	0x00037b59

0001accc <onoff_stop>:
{
   1accc:	b570      	push	{r4, r5, r6, lr}
   1acce:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1acd0:	4906      	ldr	r1, [pc, #24]	; (1acec <onoff_stop+0x20>)
{
   1acd2:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1acd4:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1acd6:	1149      	asrs	r1, r1, #5
   1acd8:	2240      	movs	r2, #64	; 0x40
   1acda:	4805      	ldr	r0, [pc, #20]	; (1acf0 <onoff_stop+0x24>)
   1acdc:	f7ff ffb8 	bl	1ac50 <stop>
	notify(mgr, res);
   1ace0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ace2:	4601      	mov	r1, r0
	notify(mgr, res);
   1ace4:	4620      	mov	r0, r4
}
   1ace6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1acea:	4718      	bx	r3
   1acec:	2000e47c 	.word	0x2000e47c
   1acf0:	00031814 	.word	0x00031814

0001acf4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1acf4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1acf6:	2200      	movs	r2, #0
   1acf8:	2101      	movs	r1, #1
{
   1acfa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1acfc:	2005      	movs	r0, #5
   1acfe:	f7f6 fb83 	bl	11408 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1ad02:	480f      	ldr	r0, [pc, #60]	; (1ad40 <clk_init+0x4c>)
   1ad04:	f006 fc74 	bl	215f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1ad08:	4b0e      	ldr	r3, [pc, #56]	; (1ad44 <clk_init+0x50>)
   1ad0a:	4298      	cmp	r0, r3
   1ad0c:	d115      	bne.n	1ad3a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1ad0e:	f006 fc93 	bl	21638 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1ad12:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ad14:	490c      	ldr	r1, [pc, #48]	; (1ad48 <clk_init+0x54>)
   1ad16:	4630      	mov	r0, r6
   1ad18:	f010 f809 	bl	2ad2e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1ad1c:	2800      	cmp	r0, #0
   1ad1e:	db0b      	blt.n	1ad38 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ad20:	2501      	movs	r5, #1
   1ad22:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1ad24:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1ad26:	4908      	ldr	r1, [pc, #32]	; (1ad48 <clk_init+0x54>)
   1ad28:	f104 0020 	add.w	r0, r4, #32
   1ad2c:	f00f ffff 	bl	2ad2e <onoff_manager_init>
		if (err < 0) {
   1ad30:	2800      	cmp	r0, #0
   1ad32:	db01      	blt.n	1ad38 <clk_init+0x44>
	}

	return 0;
   1ad34:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ad36:	6565      	str	r5, [r4, #84]	; 0x54
}
   1ad38:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1ad3a:	f06f 0004 	mvn.w	r0, #4
   1ad3e:	e7fb      	b.n	1ad38 <clk_init+0x44>
   1ad40:	0001ad81 	.word	0x0001ad81
   1ad44:	0bad0000 	.word	0x0bad0000
   1ad48:	000324e4 	.word	0x000324e4

0001ad4c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1ad4c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ad4e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1ad50:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1ad52:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1ad54:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1ad56:	4808      	ldr	r0, [pc, #32]	; (1ad78 <clkstarted_handle.constprop.0+0x2c>)
   1ad58:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1ad5a:	3348      	adds	r3, #72	; 0x48
   1ad5c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   1ad5e:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1ad62:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1ad64:	f013 fa36 	bl	2e1d4 <set_on_state>
	if (callback) {
   1ad68:	b12d      	cbz	r5, 1ad76 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ad6a:	4632      	mov	r2, r6
   1ad6c:	462b      	mov	r3, r5
}
   1ad6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ad72:	4802      	ldr	r0, [pc, #8]	; (1ad7c <clkstarted_handle.constprop.0+0x30>)
   1ad74:	4718      	bx	r3
}
   1ad76:	bd70      	pop	{r4, r5, r6, pc}
   1ad78:	2000e47c 	.word	0x2000e47c
   1ad7c:	00031814 	.word	0x00031814

0001ad80 <clock_event_handler>:
	switch (event) {
   1ad80:	2801      	cmp	r0, #1
{
   1ad82:	b508      	push	{r3, lr}
	switch (event) {
   1ad84:	d006      	beq.n	1ad94 <clock_event_handler+0x14>
   1ad86:	2803      	cmp	r0, #3
   1ad88:	d008      	beq.n	1ad9c <clock_event_handler+0x1c>
   1ad8a:	b998      	cbnz	r0, 1adb4 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ad8c:	4b0f      	ldr	r3, [pc, #60]	; (1adcc <clock_event_handler+0x4c>)
   1ad8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ad90:	075b      	lsls	r3, r3, #29
   1ad92:	d119      	bne.n	1adc8 <clock_event_handler+0x48>
}
   1ad94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ad98:	f7ff bfd8 	b.w	1ad4c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1ad9c:	490c      	ldr	r1, [pc, #48]	; (1add0 <clock_event_handler+0x50>)
   1ad9e:	f240 236e 	movw	r3, #622	; 0x26e
   1ada2:	4a0c      	ldr	r2, [pc, #48]	; (1add4 <clock_event_handler+0x54>)
   1ada4:	480c      	ldr	r0, [pc, #48]	; (1add8 <clock_event_handler+0x58>)
   1ada6:	f010 f807 	bl	2adb8 <assert_print>
   1adaa:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1adae:	4809      	ldr	r0, [pc, #36]	; (1add4 <clock_event_handler+0x54>)
   1adb0:	f00f fffb 	bl	2adaa <assert_post_action>
   1adb4:	4906      	ldr	r1, [pc, #24]	; (1add0 <clock_event_handler+0x50>)
   1adb6:	f240 2372 	movw	r3, #626	; 0x272
   1adba:	4a06      	ldr	r2, [pc, #24]	; (1add4 <clock_event_handler+0x54>)
   1adbc:	4806      	ldr	r0, [pc, #24]	; (1add8 <clock_event_handler+0x58>)
   1adbe:	f00f fffb 	bl	2adb8 <assert_print>
   1adc2:	f240 2172 	movw	r1, #626	; 0x272
   1adc6:	e7f2      	b.n	1adae <clock_event_handler+0x2e>
}
   1adc8:	bd08      	pop	{r3, pc}
   1adca:	bf00      	nop
   1adcc:	2000e47c 	.word	0x2000e47c
   1add0:	000386dc 	.word	0x000386dc
   1add4:	00037b59 	.word	0x00037b59
   1add8:	00033bc2 	.word	0x00033bc2

0001addc <generic_hfclk_start>:
{
   1addc:	b508      	push	{r3, lr}
	__asm__ volatile(
   1adde:	f04f 0320 	mov.w	r3, #32
   1ade2:	f3ef 8111 	mrs	r1, BASEPRI
   1ade6:	f383 8812 	msr	BASEPRI_MAX, r3
   1adea:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1adee:	4a11      	ldr	r2, [pc, #68]	; (1ae34 <generic_hfclk_start+0x58>)
   1adf0:	6813      	ldr	r3, [r2, #0]
   1adf2:	f043 0002 	orr.w	r0, r3, #2
   1adf6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1adf8:	07da      	lsls	r2, r3, #31
   1adfa:	d408      	bmi.n	1ae0e <generic_hfclk_start+0x32>
	__asm__ volatile(
   1adfc:	f381 8811 	msr	BASEPRI, r1
   1ae00:	f3bf 8f6f 	isb	sy
}
   1ae04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ae08:	2001      	movs	r0, #1
   1ae0a:	f006 bc3b 	b.w	21684 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ae0e:	4b0a      	ldr	r3, [pc, #40]	; (1ae38 <generic_hfclk_start+0x5c>)
   1ae10:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ae14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ae18:	07d3      	lsls	r3, r2, #31
   1ae1a:	d5ef      	bpl.n	1adfc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1ae1c:	4807      	ldr	r0, [pc, #28]	; (1ae3c <generic_hfclk_start+0x60>)
   1ae1e:	f013 f9d9 	bl	2e1d4 <set_on_state>
   1ae22:	f381 8811 	msr	BASEPRI, r1
   1ae26:	f3bf 8f6f 	isb	sy
}
   1ae2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ae2e:	2000      	movs	r0, #0
   1ae30:	f7ff bf8c 	b.w	1ad4c <clkstarted_handle.constprop.0>
   1ae34:	2000e4d4 	.word	0x2000e4d4
   1ae38:	40005000 	.word	0x40005000
   1ae3c:	2000e4c4 	.word	0x2000e4c4

0001ae40 <api_blocking_start>:
{
   1ae40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ae42:	2200      	movs	r2, #0
   1ae44:	2301      	movs	r3, #1
   1ae46:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ae4a:	ab04      	add	r3, sp, #16
   1ae4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ae50:	4a09      	ldr	r2, [pc, #36]	; (1ae78 <api_blocking_start+0x38>)
   1ae52:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ae54:	f8cd d000 	str.w	sp, [sp]
   1ae58:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ae5c:	f013 f9fb 	bl	2e256 <api_start>
	if (err < 0) {
   1ae60:	2800      	cmp	r0, #0
   1ae62:	db05      	blt.n	1ae70 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1ae64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ae68:	2300      	movs	r3, #0
   1ae6a:	4668      	mov	r0, sp
   1ae6c:	f00a f9d4 	bl	25218 <z_impl_k_sem_take>
}
   1ae70:	b007      	add	sp, #28
   1ae72:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae76:	bf00      	nop
   1ae78:	0002e27d 	.word	0x0002e27d

0001ae7c <generic_hfclk_stop>:
{
   1ae7c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ae7e:	f04f 0320 	mov.w	r3, #32
   1ae82:	f3ef 8411 	mrs	r4, BASEPRI
   1ae86:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae8a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1ae8e:	4a07      	ldr	r2, [pc, #28]	; (1aeac <generic_hfclk_stop+0x30>)
   1ae90:	6813      	ldr	r3, [r2, #0]
   1ae92:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1ae96:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1ae98:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1ae9a:	d402      	bmi.n	1aea2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ae9c:	2001      	movs	r0, #1
   1ae9e:	f006 fc53 	bl	21748 <nrfx_clock_stop>
	__asm__ volatile(
   1aea2:	f384 8811 	msr	BASEPRI, r4
   1aea6:	f3bf 8f6f 	isb	sy
}
   1aeaa:	bd10      	pop	{r4, pc}
   1aeac:	2000e4d4 	.word	0x2000e4d4

0001aeb0 <z_nrf_clock_control_get_onoff>:
}
   1aeb0:	4b02      	ldr	r3, [pc, #8]	; (1aebc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1aeb2:	b2c0      	uxtb	r0, r0
}
   1aeb4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1aeb8:	4770      	bx	lr
   1aeba:	bf00      	nop
   1aebc:	2000e47c 	.word	0x2000e47c

0001aec0 <z_nrf_clock_control_lf_on>:
{
   1aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aec4:	2201      	movs	r2, #1
   1aec6:	4606      	mov	r6, r0
   1aec8:	4941      	ldr	r1, [pc, #260]	; (1afd0 <z_nrf_clock_control_lf_on+0x110>)
   1aeca:	e8d1 3fef 	ldaex	r3, [r1]
   1aece:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1aed2:	2800      	cmp	r0, #0
   1aed4:	d1f9      	bne.n	1aeca <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1aed6:	b9a3      	cbnz	r3, 1af02 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1aed8:	493e      	ldr	r1, [pc, #248]	; (1afd4 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1aeda:	483f      	ldr	r0, [pc, #252]	; (1afd8 <z_nrf_clock_control_lf_on+0x118>)
   1aedc:	604b      	str	r3, [r1, #4]
   1aede:	60cb      	str	r3, [r1, #12]
   1aee0:	608a      	str	r2, [r1, #8]
   1aee2:	f7f3 f901 	bl	e0e8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1aee6:	2800      	cmp	r0, #0
   1aee8:	da0b      	bge.n	1af02 <z_nrf_clock_control_lf_on+0x42>
   1aeea:	493c      	ldr	r1, [pc, #240]	; (1afdc <z_nrf_clock_control_lf_on+0x11c>)
   1aeec:	f44f 730c 	mov.w	r3, #560	; 0x230
   1aef0:	4a3b      	ldr	r2, [pc, #236]	; (1afe0 <z_nrf_clock_control_lf_on+0x120>)
   1aef2:	483c      	ldr	r0, [pc, #240]	; (1afe4 <z_nrf_clock_control_lf_on+0x124>)
   1aef4:	f00f ff60 	bl	2adb8 <assert_print>
   1aef8:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1aefc:	4838      	ldr	r0, [pc, #224]	; (1afe0 <z_nrf_clock_control_lf_on+0x120>)
   1aefe:	f00f ff54 	bl	2adaa <assert_post_action>
	switch (start_mode) {
   1af02:	b35e      	cbz	r6, 1af5c <z_nrf_clock_control_lf_on+0x9c>
   1af04:	1e73      	subs	r3, r6, #1
   1af06:	2b01      	cmp	r3, #1
   1af08:	d858      	bhi.n	1afbc <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1af0a:	2e01      	cmp	r6, #1
   1af0c:	d106      	bne.n	1af1c <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1af0e:	4b36      	ldr	r3, [pc, #216]	; (1afe8 <z_nrf_clock_control_lf_on+0x128>)
   1af10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1af14:	f003 0303 	and.w	r3, r3, #3
   1af18:	2b02      	cmp	r3, #2
   1af1a:	d01f      	beq.n	1af5c <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1af1c:	f015 fa5f 	bl	303de <k_is_in_isr>
   1af20:	4605      	mov	r5, r0
   1af22:	b9e8      	cbnz	r0, 1af60 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1af24:	4b31      	ldr	r3, [pc, #196]	; (1afec <z_nrf_clock_control_lf_on+0x12c>)
   1af26:	781b      	ldrb	r3, [r3, #0]
   1af28:	b1d3      	cbz	r3, 1af60 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1af2a:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1af2c:	4607      	mov	r7, r0
   1af2e:	4b2e      	ldr	r3, [pc, #184]	; (1afe8 <z_nrf_clock_control_lf_on+0x128>)
   1af30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1af34:	4c2c      	ldr	r4, [pc, #176]	; (1afe8 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1af36:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1aff0 <z_nrf_clock_control_lf_on+0x130>
   1af3a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1af3e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1af42:	03d2      	lsls	r2, r2, #15
   1af44:	d516      	bpl.n	1af74 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1af46:	f003 0303 	and.w	r3, r3, #3
   1af4a:	2b02      	cmp	r3, #2
   1af4c:	d001      	beq.n	1af52 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1af4e:	2e01      	cmp	r6, #1
   1af50:	d110      	bne.n	1af74 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1af52:	b375      	cbz	r5, 1afb2 <z_nrf_clock_control_lf_on+0xf2>
   1af54:	f387 8811 	msr	BASEPRI, r7
   1af58:	f3bf 8f6f 	isb	sy
}
   1af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1af60:	f04f 0320 	mov.w	r3, #32
   1af64:	f3ef 8711 	mrs	r7, BASEPRI
   1af68:	f383 8812 	msr	BASEPRI_MAX, r3
   1af6c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1af70:	2501      	movs	r5, #1
   1af72:	e7df      	b.n	1af34 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1af74:	b1c5      	cbz	r5, 1afa8 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1af76:	4638      	mov	r0, r7
   1af78:	f7f6 f99c 	bl	112b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1af7c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1af80:	b2db      	uxtb	r3, r3
   1af82:	2b01      	cmp	r3, #1
   1af84:	d1d9      	bne.n	1af3a <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1af86:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1af8a:	2a00      	cmp	r2, #0
   1af8c:	d0d5      	beq.n	1af3a <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1af8e:	2200      	movs	r2, #0
   1af90:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1af94:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1af98:	2202      	movs	r2, #2
   1af9a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1af9e:	2220      	movs	r2, #32
   1afa0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1afa4:	60a3      	str	r3, [r4, #8]
}
   1afa6:	e7c8      	b.n	1af3a <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1afa8:	2100      	movs	r1, #0
   1afaa:	2021      	movs	r0, #33	; 0x21
   1afac:	f00b ff42 	bl	26e34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1afb0:	e7e4      	b.n	1af7c <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1afb2:	2202      	movs	r2, #2
   1afb4:	4b0c      	ldr	r3, [pc, #48]	; (1afe8 <z_nrf_clock_control_lf_on+0x128>)
   1afb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1afba:	e7cf      	b.n	1af5c <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1afbc:	490d      	ldr	r1, [pc, #52]	; (1aff4 <z_nrf_clock_control_lf_on+0x134>)
   1afbe:	f240 2342 	movw	r3, #578	; 0x242
   1afc2:	4a07      	ldr	r2, [pc, #28]	; (1afe0 <z_nrf_clock_control_lf_on+0x120>)
   1afc4:	4807      	ldr	r0, [pc, #28]	; (1afe4 <z_nrf_clock_control_lf_on+0x124>)
   1afc6:	f00f fef7 	bl	2adb8 <assert_print>
   1afca:	f240 2142 	movw	r1, #578	; 0x242
   1afce:	e795      	b.n	1aefc <z_nrf_clock_control_lf_on+0x3c>
   1afd0:	2000e478 	.word	0x2000e478
   1afd4:	2000e468 	.word	0x2000e468
   1afd8:	2000e49c 	.word	0x2000e49c
   1afdc:	000344f6 	.word	0x000344f6
   1afe0:	00037b59 	.word	0x00037b59
   1afe4:	00033bc2 	.word	0x00033bc2
   1afe8:	40005000 	.word	0x40005000
   1afec:	2001048b 	.word	0x2001048b
   1aff0:	e000e100 	.word	0xe000e100
   1aff4:	000386dc 	.word	0x000386dc

0001aff8 <uart_poll_out.constprop.0>:
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
   1aff8:	4601      	mov	r1, r0
	api->poll_out(dev, out_char);
   1affa:	4802      	ldr	r0, [pc, #8]	; (1b004 <uart_poll_out.constprop.0+0xc>)
   1affc:	6883      	ldr	r3, [r0, #8]
   1affe:	69db      	ldr	r3, [r3, #28]
   1b000:	4718      	bx	r3
   1b002:	bf00      	nop
   1b004:	0003188c 	.word	0x0003188c

0001b008 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1b008:	b538      	push	{r3, r4, r5, lr}
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1b00a:	4b09      	ldr	r3, [pc, #36]	; (1b030 <console_out+0x28>)
   1b00c:	b2c5      	uxtb	r5, r0
{
   1b00e:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1b010:	681b      	ldr	r3, [r3, #0]
   1b012:	4628      	mov	r0, r5
   1b014:	4798      	blx	r3

	if (handled_by_debug_server) {
   1b016:	2801      	cmp	r0, #1
   1b018:	d007      	beq.n	1b02a <console_out+0x22>
			 */
			return c;
		}
	}

	if ('\n' == c) {
   1b01a:	2c0a      	cmp	r4, #10
   1b01c:	d102      	bne.n	1b024 <console_out+0x1c>
		uart_poll_out(uart_console_dev, '\r');
   1b01e:	200d      	movs	r0, #13
   1b020:	f7ff ffea 	bl	1aff8 <uart_poll_out.constprop.0>
	}
	uart_poll_out(uart_console_dev, c);
   1b024:	4628      	mov	r0, r5
   1b026:	f7ff ffe7 	bl	1aff8 <uart_poll_out.constprop.0>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   1b02a:	4620      	mov	r0, r4
   1b02c:	bd38      	pop	{r3, r4, r5, pc}
   1b02e:	bf00      	nop
   1b030:	2000c940 	.word	0x2000c940

0001b034 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1b034:	b508      	push	{r3, lr}
   1b036:	4807      	ldr	r0, [pc, #28]	; (1b054 <uart_console_init+0x20>)
   1b038:	f015 f99a 	bl	30370 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1b03c:	b138      	cbz	r0, 1b04e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1b03e:	4806      	ldr	r0, [pc, #24]	; (1b058 <uart_console_init+0x24>)
   1b040:	f7f7 f9d0 	bl	123e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b044:	4804      	ldr	r0, [pc, #16]	; (1b058 <uart_console_init+0x24>)
   1b046:	f7f2 fcd7 	bl	d9f8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1b04a:	2000      	movs	r0, #0
}
   1b04c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1b04e:	f06f 0012 	mvn.w	r0, #18
   1b052:	e7fb      	b.n	1b04c <uart_console_init+0x18>
   1b054:	0003188c 	.word	0x0003188c
   1b058:	0001b009 	.word	0x0001b009

0001b05c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1b05c:	b510      	push	{r4, lr}
	return port->data;
   1b05e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1b060:	b961      	cbnz	r1, 1b07c <gpio_nrfx_manage_callback+0x20>
   1b062:	4920      	ldr	r1, [pc, #128]	; (1b0e4 <gpio_nrfx_manage_callback+0x88>)
   1b064:	232a      	movs	r3, #42	; 0x2a
   1b066:	4a20      	ldr	r2, [pc, #128]	; (1b0e8 <gpio_nrfx_manage_callback+0x8c>)
   1b068:	4820      	ldr	r0, [pc, #128]	; (1b0ec <gpio_nrfx_manage_callback+0x90>)
   1b06a:	f00f fea5 	bl	2adb8 <assert_print>
   1b06e:	4820      	ldr	r0, [pc, #128]	; (1b0f0 <gpio_nrfx_manage_callback+0x94>)
   1b070:	f00f fea2 	bl	2adb8 <assert_print>
   1b074:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1b076:	481c      	ldr	r0, [pc, #112]	; (1b0e8 <gpio_nrfx_manage_callback+0x8c>)
   1b078:	f00f fe97 	bl	2adaa <assert_post_action>
   1b07c:	6848      	ldr	r0, [r1, #4]
   1b07e:	b950      	cbnz	r0, 1b096 <gpio_nrfx_manage_callback+0x3a>
   1b080:	491c      	ldr	r1, [pc, #112]	; (1b0f4 <gpio_nrfx_manage_callback+0x98>)
   1b082:	232b      	movs	r3, #43	; 0x2b
   1b084:	4a18      	ldr	r2, [pc, #96]	; (1b0e8 <gpio_nrfx_manage_callback+0x8c>)
   1b086:	4819      	ldr	r0, [pc, #100]	; (1b0ec <gpio_nrfx_manage_callback+0x90>)
   1b088:	f00f fe96 	bl	2adb8 <assert_print>
   1b08c:	481a      	ldr	r0, [pc, #104]	; (1b0f8 <gpio_nrfx_manage_callback+0x9c>)
   1b08e:	f00f fe93 	bl	2adb8 <assert_print>
   1b092:	212b      	movs	r1, #43	; 0x2b
   1b094:	e7ef      	b.n	1b076 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1b096:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1b098:	b1f8      	cbz	r0, 1b0da <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b09a:	4288      	cmp	r0, r1
   1b09c:	d119      	bne.n	1b0d2 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1b09e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1b0a0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b0a2:	42a1      	cmp	r1, r4
	list->head = node;
   1b0a4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b0a6:	d100      	bne.n	1b0aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1b0a8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1b0aa:	2000      	movs	r0, #0
   1b0ac:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1b0ae:	b12a      	cbz	r2, 1b0bc <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1b0b0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b0b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b0b4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b0b6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b0b8:	b902      	cbnz	r2, 1b0bc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1b0ba:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1b0bc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b0be:	e010      	b.n	1b0e2 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b0c0:	4281      	cmp	r1, r0
   1b0c2:	d106      	bne.n	1b0d2 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1b0c4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1b0c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b0c8:	6898      	ldr	r0, [r3, #8]
   1b0ca:	4281      	cmp	r1, r0
   1b0cc:	d1ed      	bne.n	1b0aa <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1b0ce:	609c      	str	r4, [r3, #8]
}
   1b0d0:	e7eb      	b.n	1b0aa <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1b0d2:	4604      	mov	r4, r0
   1b0d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	d1f2      	bne.n	1b0c0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1b0da:	2a00      	cmp	r2, #0
   1b0dc:	d1e8      	bne.n	1b0b0 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1b0de:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1b0e2:	bd10      	pop	{r4, pc}
   1b0e4:	00038ac9 	.word	0x00038ac9
   1b0e8:	00037bf6 	.word	0x00037bf6
   1b0ec:	00033bc2 	.word	0x00033bc2
   1b0f0:	00037c32 	.word	0x00037c32
   1b0f4:	00037c41 	.word	0x00037c41
   1b0f8:	00037c53 	.word	0x00037c53

0001b0fc <gpio_nrfx_pin_interrupt_configure>:
{
   1b0fc:	b530      	push	{r4, r5, lr}
	return port->config;
   1b0fe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b100:	f001 041f 	and.w	r4, r1, #31
   1b104:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b106:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1b10a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b10c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1b110:	d105      	bne.n	1b11e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1b112:	4620      	mov	r0, r4
   1b114:	f006 fe4e 	bl	21db4 <nrfx_gpiote_trigger_disable>
		return 0;
   1b118:	2000      	movs	r0, #0
}
   1b11a:	b005      	add	sp, #20
   1b11c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b11e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b120:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b124:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b128:	d114      	bne.n	1b154 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b12a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b12e:	bf0c      	ite	eq
   1b130:	2304      	moveq	r3, #4
   1b132:	2305      	movne	r3, #5
   1b134:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b138:	2300      	movs	r3, #0
   1b13a:	4620      	mov	r0, r4
   1b13c:	4619      	mov	r1, r3
   1b13e:	aa02      	add	r2, sp, #8
   1b140:	f006 fc3a 	bl	219b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b144:	4b26      	ldr	r3, [pc, #152]	; (1b1e0 <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1b146:	4298      	cmp	r0, r3
   1b148:	d146      	bne.n	1b1d8 <gpio_nrfx_pin_interrupt_configure+0xdc>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b14a:	2101      	movs	r1, #1
   1b14c:	4620      	mov	r0, r4
   1b14e:	f006 fdc7 	bl	21ce0 <nrfx_gpiote_trigger_enable>
	return 0;
   1b152:	e7e1      	b.n	1b118 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b154:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1b158:	d022      	beq.n	1b1a0 <gpio_nrfx_pin_interrupt_configure+0xa4>
   1b15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1b15e:	bf14      	ite	ne
   1b160:	2301      	movne	r3, #1
   1b162:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b164:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b168:	6883      	ldr	r3, [r0, #8]
   1b16a:	40cb      	lsrs	r3, r1
   1b16c:	07d9      	lsls	r1, r3, #31
   1b16e:	d4e3      	bmi.n	1b138 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1b170:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1b174:	d1e0      	bne.n	1b138 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1b176:	0963      	lsrs	r3, r4, #5
   1b178:	d106      	bne.n	1b188 <gpio_nrfx_pin_interrupt_configure+0x8c>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1b17a:	f04f 32ff 	mov.w	r2, #4294967295
    pin_number &= 0x1F;
   1b17e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b182:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b184:	07d2      	lsls	r2, r2, #31
   1b186:	d40d      	bmi.n	1b1a4 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1b188:	4916      	ldr	r1, [pc, #88]	; (1b1e4 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1b18a:	4817      	ldr	r0, [pc, #92]	; (1b1e8 <gpio_nrfx_pin_interrupt_configure+0xec>)
   1b18c:	f240 2347 	movw	r3, #583	; 0x247
   1b190:	4a16      	ldr	r2, [pc, #88]	; (1b1ec <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1b192:	f00f fe11 	bl	2adb8 <assert_print>
   1b196:	f240 2147 	movw	r1, #583	; 0x247
   1b19a:	4814      	ldr	r0, [pc, #80]	; (1b1ec <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1b19c:	f00f fe05 	bl	2adaa <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b1a0:	2303      	movs	r3, #3
   1b1a2:	e7df      	b.n	1b164 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b1a4:	4a12      	ldr	r2, [pc, #72]	; (1b1f0 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1b1a6:	3380      	adds	r3, #128	; 0x80
   1b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b1ac:	07db      	lsls	r3, r3, #31
   1b1ae:	d4c3      	bmi.n	1b138 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b1b0:	f10d 0507 	add.w	r5, sp, #7
   1b1b4:	4629      	mov	r1, r5
   1b1b6:	4620      	mov	r0, r4
   1b1b8:	f006 fd2c 	bl	21c14 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b1bc:	4b0d      	ldr	r3, [pc, #52]	; (1b1f4 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1b1be:	4298      	cmp	r0, r3
   1b1c0:	d001      	beq.n	1b1c6 <gpio_nrfx_pin_interrupt_configure+0xca>
		trigger_config.p_in_channel = &ch;
   1b1c2:	9503      	str	r5, [sp, #12]
   1b1c4:	e7b8      	b.n	1b138 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b1c6:	4628      	mov	r0, r5
   1b1c8:	f006 fd84 	bl	21cd4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b1cc:	4b04      	ldr	r3, [pc, #16]	; (1b1e0 <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1b1ce:	4298      	cmp	r0, r3
   1b1d0:	d0f7      	beq.n	1b1c2 <gpio_nrfx_pin_interrupt_configure+0xc6>
				return -ENOMEM;
   1b1d2:	f06f 000b 	mvn.w	r0, #11
   1b1d6:	e7a0      	b.n	1b11a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1b1d8:	f06f 0015 	mvn.w	r0, #21
   1b1dc:	e79d      	b.n	1b11a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1b1de:	bf00      	nop
   1b1e0:	0bad0000 	.word	0x0bad0000
   1b1e4:	00037c9d 	.word	0x00037c9d
   1b1e8:	00033bc2 	.word	0x00033bc2
   1b1ec:	00037c6a 	.word	0x00037c6a
   1b1f0:	40842500 	.word	0x40842500
   1b1f4:	0bad0004 	.word	0x0bad0004

0001b1f8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b1f8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b1fa:	f006 fd5b 	bl	21cb4 <nrfx_gpiote_is_init>
   1b1fe:	4604      	mov	r4, r0
   1b200:	b968      	cbnz	r0, 1b21e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b202:	f006 fd2f 	bl	21c64 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b206:	4b08      	ldr	r3, [pc, #32]	; (1b228 <gpio_nrfx_init+0x30>)
   1b208:	4298      	cmp	r0, r3
   1b20a:	d10a      	bne.n	1b222 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b20c:	4621      	mov	r1, r4
   1b20e:	4807      	ldr	r0, [pc, #28]	; (1b22c <gpio_nrfx_init+0x34>)
   1b210:	f006 fcfa 	bl	21c08 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b214:	4622      	mov	r2, r4
   1b216:	2101      	movs	r1, #1
   1b218:	2031      	movs	r0, #49	; 0x31
   1b21a:	f7f6 f8f5 	bl	11408 <z_arm_irq_priority_set>
		return 0;
   1b21e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b220:	bd10      	pop	{r4, pc}
		return -EIO;
   1b222:	f06f 0004 	mvn.w	r0, #4
   1b226:	e7fb      	b.n	1b220 <gpio_nrfx_init+0x28>
   1b228:	0bad0000 	.word	0x0bad0000
   1b22c:	0001b231 	.word	0x0001b231

0001b230 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b230:	0943      	lsrs	r3, r0, #5
{
   1b232:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b234:	d107      	bne.n	1b246 <nrfx_gpio_handler+0x16>
	return list->head;
   1b236:	4b12      	ldr	r3, [pc, #72]	; (1b280 <nrfx_gpio_handler+0x50>)
   1b238:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b23a:	b121      	cbz	r1, 1b246 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1b23c:	2501      	movs	r5, #1
	return node->next;
   1b23e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b240:	4e10      	ldr	r6, [pc, #64]	; (1b284 <nrfx_gpio_handler+0x54>)
   1b242:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b244:	b901      	cbnz	r1, 1b248 <nrfx_gpio_handler+0x18>
}
   1b246:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1b248:	688a      	ldr	r2, [r1, #8]
   1b24a:	402a      	ands	r2, r5
   1b24c:	d010      	beq.n	1b270 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   1b24e:	684b      	ldr	r3, [r1, #4]
   1b250:	b963      	cbnz	r3, 1b26c <nrfx_gpio_handler+0x3c>
   1b252:	490d      	ldr	r1, [pc, #52]	; (1b288 <nrfx_gpio_handler+0x58>)
   1b254:	234d      	movs	r3, #77	; 0x4d
   1b256:	4a0d      	ldr	r2, [pc, #52]	; (1b28c <nrfx_gpio_handler+0x5c>)
   1b258:	480d      	ldr	r0, [pc, #52]	; (1b290 <nrfx_gpio_handler+0x60>)
   1b25a:	f00f fdad 	bl	2adb8 <assert_print>
   1b25e:	480d      	ldr	r0, [pc, #52]	; (1b294 <nrfx_gpio_handler+0x64>)
   1b260:	f00f fdaa 	bl	2adb8 <assert_print>
   1b264:	214d      	movs	r1, #77	; 0x4d
   1b266:	4809      	ldr	r0, [pc, #36]	; (1b28c <nrfx_gpio_handler+0x5c>)
   1b268:	f00f fd9f 	bl	2adaa <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1b26c:	4630      	mov	r0, r6
   1b26e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b270:	b11c      	cbz	r4, 1b27a <nrfx_gpio_handler+0x4a>
   1b272:	6823      	ldr	r3, [r4, #0]
   1b274:	4621      	mov	r1, r4
   1b276:	461c      	mov	r4, r3
   1b278:	e7e4      	b.n	1b244 <nrfx_gpio_handler+0x14>
   1b27a:	4623      	mov	r3, r4
   1b27c:	e7fa      	b.n	1b274 <nrfx_gpio_handler+0x44>
   1b27e:	bf00      	nop
   1b280:	2000e4d8 	.word	0x2000e4d8
   1b284:	0003182c 	.word	0x0003182c
   1b288:	00037cc0 	.word	0x00037cc0
   1b28c:	00037bf6 	.word	0x00037bf6
   1b290:	00033bc2 	.word	0x00033bc2
   1b294:	00037c53 	.word	0x00037c53

0001b298 <gpio_nrfx_pin_configure>:
{
   1b298:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1b29c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b2a0:	f001 051f 	and.w	r5, r1, #31
   1b2a4:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1b2a8:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b2aa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1b2ae:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b2b0:	4628      	mov	r0, r5
   1b2b2:	f10d 0103 	add.w	r1, sp, #3
   1b2b6:	f006 fcad 	bl	21c14 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b2ba:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b2be:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b2c0:	d115      	bne.n	1b2ee <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1b2c2:	4628      	mov	r0, r5
   1b2c4:	f006 fda0 	bl	21e08 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1b2c8:	4b48      	ldr	r3, [pc, #288]	; (1b3ec <gpio_nrfx_pin_configure+0x154>)
   1b2ca:	429e      	cmp	r6, r3
   1b2cc:	d170      	bne.n	1b3b0 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1b2ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b2d2:	f006 fcf9 	bl	21cc8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b2d6:	42b0      	cmp	r0, r6
   1b2d8:	d06a      	beq.n	1b3b0 <gpio_nrfx_pin_configure+0x118>
   1b2da:	4945      	ldr	r1, [pc, #276]	; (1b3f0 <gpio_nrfx_pin_configure+0x158>)
   1b2dc:	236a      	movs	r3, #106	; 0x6a
   1b2de:	4a45      	ldr	r2, [pc, #276]	; (1b3f4 <gpio_nrfx_pin_configure+0x15c>)
   1b2e0:	4845      	ldr	r0, [pc, #276]	; (1b3f8 <gpio_nrfx_pin_configure+0x160>)
   1b2e2:	f00f fd69 	bl	2adb8 <assert_print>
   1b2e6:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b2e8:	4842      	ldr	r0, [pc, #264]	; (1b3f4 <gpio_nrfx_pin_configure+0x15c>)
   1b2ea:	f00f fd5e 	bl	2adaa <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b2ee:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b2f0:	4628      	mov	r0, r5
   1b2f2:	4619      	mov	r1, r3
   1b2f4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b2f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b2fa:	f006 fb5d 	bl	219b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b2fe:	4b3b      	ldr	r3, [pc, #236]	; (1b3ec <gpio_nrfx_pin_configure+0x154>)
   1b300:	4298      	cmp	r0, r3
   1b302:	d004      	beq.n	1b30e <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1b304:	f06f 0015 	mvn.w	r0, #21
}
   1b308:	b004      	add	sp, #16
   1b30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1b30e:	4286      	cmp	r6, r0
   1b310:	d10d      	bne.n	1b32e <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1b312:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b316:	f006 fcd7 	bl	21cc8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b31a:	42b0      	cmp	r0, r6
   1b31c:	d007      	beq.n	1b32e <gpio_nrfx_pin_configure+0x96>
   1b31e:	4934      	ldr	r1, [pc, #208]	; (1b3f0 <gpio_nrfx_pin_configure+0x158>)
   1b320:	237c      	movs	r3, #124	; 0x7c
   1b322:	4a34      	ldr	r2, [pc, #208]	; (1b3f4 <gpio_nrfx_pin_configure+0x15c>)
   1b324:	4834      	ldr	r0, [pc, #208]	; (1b3f8 <gpio_nrfx_pin_configure+0x160>)
   1b326:	f00f fd47 	bl	2adb8 <assert_print>
   1b32a:	217c      	movs	r1, #124	; 0x7c
   1b32c:	e7dc      	b.n	1b2e8 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1b32e:	03a6      	lsls	r6, r4, #14
   1b330:	d54c      	bpl.n	1b3cc <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b332:	f240 3306 	movw	r3, #774	; 0x306
   1b336:	4023      	ands	r3, r4
   1b338:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1b33c:	d019      	beq.n	1b372 <gpio_nrfx_pin_configure+0xda>
   1b33e:	d80c      	bhi.n	1b35a <gpio_nrfx_pin_configure+0xc2>
   1b340:	2b06      	cmp	r3, #6
   1b342:	d017      	beq.n	1b374 <gpio_nrfx_pin_configure+0xdc>
   1b344:	d804      	bhi.n	1b350 <gpio_nrfx_pin_configure+0xb8>
   1b346:	b1ab      	cbz	r3, 1b374 <gpio_nrfx_pin_configure+0xdc>
   1b348:	2b02      	cmp	r3, #2
   1b34a:	d1db      	bne.n	1b304 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1b34c:	2304      	movs	r3, #4
   1b34e:	e011      	b.n	1b374 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1b354:	d1d6      	bne.n	1b304 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1b356:	2301      	movs	r3, #1
   1b358:	e00c      	b.n	1b374 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b35a:	f240 2202 	movw	r2, #514	; 0x202
   1b35e:	4293      	cmp	r3, r2
   1b360:	d028      	beq.n	1b3b4 <gpio_nrfx_pin_configure+0x11c>
   1b362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1b366:	d027      	beq.n	1b3b8 <gpio_nrfx_pin_configure+0x120>
   1b368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b36c:	d1ca      	bne.n	1b304 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1b36e:	2302      	movs	r3, #2
   1b370:	e000      	b.n	1b374 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1b372:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1b374:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b378:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1b37c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1b380:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b382:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1b386:	bf4c      	ite	mi
   1b388:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b38a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b38e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1b390:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b394:	d512      	bpl.n	1b3bc <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b396:	2301      	movs	r3, #1
   1b398:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b39c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1b39e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b3a0:	2200      	movs	r2, #0
   1b3a2:	4628      	mov	r0, r5
   1b3a4:	a901      	add	r1, sp, #4
   1b3a6:	f006 fbb7 	bl	21b18 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b3aa:	4b10      	ldr	r3, [pc, #64]	; (1b3ec <gpio_nrfx_pin_configure+0x154>)
   1b3ac:	4298      	cmp	r0, r3
   1b3ae:	d1a9      	bne.n	1b304 <gpio_nrfx_pin_configure+0x6c>
   1b3b0:	2000      	movs	r0, #0
   1b3b2:	e7a9      	b.n	1b308 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1b3b4:	2305      	movs	r3, #5
   1b3b6:	e7dd      	b.n	1b374 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b3b8:	2303      	movs	r3, #3
   1b3ba:	e7db      	b.n	1b374 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b3bc:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b3be:	bf41      	itttt	mi
   1b3c0:	2301      	movmi	r3, #1
   1b3c2:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1b3c6:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1b3c8:	60d3      	strmi	r3, [r2, #12]
}
   1b3ca:	e7e9      	b.n	1b3a0 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1b3cc:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b3ce:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1b3d2:	bf4c      	ite	mi
   1b3d4:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b3d6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b3da:	461a      	mov	r2, r3
   1b3dc:	4628      	mov	r0, r5
   1b3de:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1b3e0:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b3e4:	f006 fae8 	bl	219b8 <nrfx_gpiote_input_configure>
   1b3e8:	e7df      	b.n	1b3aa <gpio_nrfx_pin_configure+0x112>
   1b3ea:	bf00      	nop
   1b3ec:	0bad0000 	.word	0x0bad0000
   1b3f0:	00037cf8 	.word	0x00037cf8
   1b3f4:	00037ccc 	.word	0x00037ccc
   1b3f8:	00033bc2 	.word	0x00033bc2

0001b3fc <nrf_gpio_pin_port_decode>:
{
   1b3fc:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b3fe:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1b400:	0953      	lsrs	r3, r2, #5
   1b402:	d104      	bne.n	1b40e <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1b404:	f04f 33ff 	mov.w	r3, #4294967295
   1b408:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b40a:	07db      	lsls	r3, r3, #31
   1b40c:	d40b      	bmi.n	1b426 <nrf_gpio_pin_port_decode+0x2a>
   1b40e:	4907      	ldr	r1, [pc, #28]	; (1b42c <nrf_gpio_pin_port_decode+0x30>)
   1b410:	4807      	ldr	r0, [pc, #28]	; (1b430 <nrf_gpio_pin_port_decode+0x34>)
   1b412:	f240 2347 	movw	r3, #583	; 0x247
   1b416:	4a07      	ldr	r2, [pc, #28]	; (1b434 <nrf_gpio_pin_port_decode+0x38>)
   1b418:	f00f fcce 	bl	2adb8 <assert_print>
   1b41c:	f240 2147 	movw	r1, #583	; 0x247
   1b420:	4804      	ldr	r0, [pc, #16]	; (1b434 <nrf_gpio_pin_port_decode+0x38>)
   1b422:	f00f fcc2 	bl	2adaa <assert_post_action>
}
   1b426:	4804      	ldr	r0, [pc, #16]	; (1b438 <nrf_gpio_pin_port_decode+0x3c>)
   1b428:	bd08      	pop	{r3, pc}
   1b42a:	bf00      	nop
   1b42c:	00037c9d 	.word	0x00037c9d
   1b430:	00033bc2 	.word	0x00033bc2
   1b434:	00037c6a 	.word	0x00037c6a
   1b438:	40842500 	.word	0x40842500

0001b43c <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1b43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct uarte_nrfx_data *data = dev->data;
	const struct uarte_nrfx_config *cfg = dev->config;
   1b440:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1b444:	4617      	mov	r7, r2
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   1b446:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1b44a:	4606      	mov	r6, r0
   1b44c:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1b44e:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b450:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1b454:	b172      	cbz	r2, 1b474 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1b456:	4941      	ldr	r1, [pc, #260]	; (1b55c <uarte_nrfx_rx_enable+0x120>)
   1b458:	f240 3341 	movw	r3, #833	; 0x341
   1b45c:	4a40      	ldr	r2, [pc, #256]	; (1b560 <uarte_nrfx_rx_enable+0x124>)
   1b45e:	4841      	ldr	r0, [pc, #260]	; (1b564 <uarte_nrfx_rx_enable+0x128>)
   1b460:	f00f fcaa 	bl	2adb8 <assert_print>
   1b464:	4840      	ldr	r0, [pc, #256]	; (1b568 <uarte_nrfx_rx_enable+0x12c>)
   1b466:	f00f fca7 	bl	2adb8 <assert_print>
   1b46a:	f240 3141 	movw	r1, #833	; 0x341
   1b46e:	483c      	ldr	r0, [pc, #240]	; (1b560 <uarte_nrfx_rx_enable+0x124>)
   1b470:	f00f fc9b 	bl	2adaa <assert_post_action>

	/* Signal error if RX is already enabled or if the driver is waiting
	 * for the RXTO event after a call to uart_rx_disable() to discard
	 * data from the UARTE internal RX FIFO.
	 */
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1b474:	6922      	ldr	r2, [r4, #16]
   1b476:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1b47a:	2900      	cmp	r1, #0
   1b47c:	d16a      	bne.n	1b554 <uarte_nrfx_rx_enable+0x118>
   1b47e:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1b482:	2900      	cmp	r1, #0
   1b484:	d166      	bne.n	1b554 <uarte_nrfx_rx_enable+0x118>
	 * 3 instead of 2 is used. Note that lower value would work in a similar
	 * way but timeouts would always occur later than expected,  most likely
	 * after ~3 ticks.
	 */
	data->async->rx_timeout_slab =
		MAX(timeout / RX_TIMEOUT_DIV,
   1b486:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1b48a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1b48c:	bfca      	itet	gt
   1b48e:	2205      	movgt	r2, #5
   1b490:	235c      	movle	r3, #92	; 0x5c
   1b492:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1b496:	6922      	ldr	r2, [r4, #16]
   1b498:	6793      	str	r3, [r2, #120]	; 0x78
		    NRFX_CEIL_DIV(3 * 1000000, CONFIG_SYS_CLOCK_TICKS_PER_SEC));

	data->async->rx_buf = buf;
   1b49a:	6923      	ldr	r3, [r4, #16]
   1b49c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1b4a0:	6923      	ldr	r3, [r4, #16]
   1b4a2:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1b4a4:	2300      	movs	r3, #0
   1b4a6:	6922      	ldr	r2, [r4, #16]
   1b4a8:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1b4aa:	6922      	ldr	r2, [r4, #16]
   1b4ac:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1b4ae:	6922      	ldr	r2, [r4, #16]
   1b4b0:	6693      	str	r3, [r2, #104]	; 0x68

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b4b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b4b6:	06da      	lsls	r2, r3, #27
   1b4b8:	d523      	bpl.n	1b502 <uarte_nrfx_rx_enable+0xc6>
		if (data->async->rx_flush_cnt) {
   1b4ba:	6921      	ldr	r1, [r4, #16]
   1b4bc:	f891 50c9 	ldrb.w	r5, [r1, #201]	; 0xc9
   1b4c0:	b1fd      	cbz	r5, 1b502 <uarte_nrfx_rx_enable+0xc6>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1b4c2:	42bd      	cmp	r5, r7
   1b4c4:	bf28      	it	cs
   1b4c6:	463d      	movcs	r5, r7
   1b4c8:	4640      	mov	r0, r8
   1b4ca:	462a      	mov	r2, r5
   1b4cc:	31c4      	adds	r1, #196	; 0xc4
   1b4ce:	f015 f9b8 	bl	30842 <memcpy>
			len -= cpy_len;

			/* If flush content filled whole new buffer complete the
			 * request and indicate rx being disabled.
			 */
			if (!len) {
   1b4d2:	1b7f      	subs	r7, r7, r5
			buf += cpy_len;
   1b4d4:	44a8      	add	r8, r5
			if (!len) {
   1b4d6:	d114      	bne.n	1b502 <uarte_nrfx_rx_enable+0xc6>
				data->async->rx_flush_cnt -= cpy_len;
   1b4d8:	6922      	ldr	r2, [r4, #16]
				notify_uart_rx_rdy(dev, cpy_len);
   1b4da:	4629      	mov	r1, r5
				data->async->rx_flush_cnt -= cpy_len;
   1b4dc:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b4e0:	4630      	mov	r0, r6
				data->async->rx_flush_cnt -= cpy_len;
   1b4e2:	1b5b      	subs	r3, r3, r5
   1b4e4:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b4e8:	f012 ffd5 	bl	2e496 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1b4ec:	6921      	ldr	r1, [r4, #16]
   1b4ee:	4630      	mov	r0, r6
   1b4f0:	3158      	adds	r1, #88	; 0x58
   1b4f2:	f012 ffe9 	bl	2e4c8 <rx_buf_release>
				notify_rx_disable(dev);
   1b4f6:	4630      	mov	r0, r6
   1b4f8:	f012 fffe 	bl	2e4f8 <notify_rx_disable>
		irq_unlock(key);
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   1b4fc:	2000      	movs	r0, #0
}
   1b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b502:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b504:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b508:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b50c:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1b510:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1b514:	2201      	movs	r2, #1
   1b516:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1b51a:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1b51e:	6923      	ldr	r3, [r4, #16]
   1b520:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b524:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b528:	06db      	lsls	r3, r3, #27
   1b52a:	d50f      	bpl.n	1b54c <uarte_nrfx_rx_enable+0x110>
   1b52c:	f04f 0320 	mov.w	r3, #32
   1b530:	f3ef 8411 	mrs	r4, BASEPRI
   1b534:	f383 8812 	msr	BASEPRI_MAX, r3
   1b538:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1b53c:	2102      	movs	r1, #2
   1b53e:	4630      	mov	r0, r6
   1b540:	f013 f8c5 	bl	2e6ce <uarte_enable>
	__asm__ volatile(
   1b544:	f384 8811 	msr	BASEPRI, r4
   1b548:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b54c:	2301      	movs	r3, #1
   1b54e:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1b552:	e7d3      	b.n	1b4fc <uarte_nrfx_rx_enable+0xc0>
		return -EBUSY;
   1b554:	f06f 000f 	mvn.w	r0, #15
   1b558:	e7d1      	b.n	1b4fe <uarte_nrfx_rx_enable+0xc2>
   1b55a:	bf00      	nop
   1b55c:	000386dc 	.word	0x000386dc
   1b560:	00037d18 	.word	0x00037d18
   1b564:	00033bc2 	.word	0x00033bc2
   1b568:	00037d4c 	.word	0x00037d4c

0001b56c <uarte_nrfx_tx>:
{
   1b56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b56e:	461d      	mov	r5, r3
	return config->uarte_regs;
   1b570:	6843      	ldr	r3, [r0, #4]
{
   1b572:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1b574:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b576:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   1b57a:	f04f 0320 	mov.w	r3, #32
   1b57e:	f3ef 8711 	mrs	r7, BASEPRI
   1b582:	f383 8812 	msr	BASEPRI_MAX, r3
   1b586:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1b58a:	6923      	ldr	r3, [r4, #16]
   1b58c:	68d8      	ldr	r0, [r3, #12]
   1b58e:	b138      	cbz	r0, 1b5a0 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1b590:	f387 8811 	msr	BASEPRI, r7
   1b594:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1b598:	f06f 000f 	mvn.w	r0, #15
}
   1b59c:	b003      	add	sp, #12
   1b59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1b5a0:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1b5a2:	6923      	ldr	r3, [r4, #16]
   1b5a4:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1b5a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b5aa:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1b5ae:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1b5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b5b6:	6923      	ldr	r3, [r4, #16]
   1b5b8:	d111      	bne.n	1b5de <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1b5ba:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1b5bc:	6923      	ldr	r3, [r4, #16]
   1b5be:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1b5c0:	4621      	mov	r1, r4
   1b5c2:	4630      	mov	r0, r6
   1b5c4:	f013 f981 	bl	2e8ca <start_tx_locked>
   1b5c8:	f387 8811 	msr	BASEPRI, r7
   1b5cc:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1b5d0:	7ae3      	ldrb	r3, [r4, #11]
   1b5d2:	2b01      	cmp	r3, #1
   1b5d4:	d101      	bne.n	1b5da <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1b5d6:	1c6b      	adds	r3, r5, #1
   1b5d8:	d106      	bne.n	1b5e8 <uarte_nrfx_tx+0x7c>
	return 0;
   1b5da:	2000      	movs	r0, #0
   1b5dc:	e7de      	b.n	1b59c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1b5de:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1b5e0:	4620      	mov	r0, r4
   1b5e2:	f013 f8dc 	bl	2e79e <setup_tx_cache>
   1b5e6:	e7eb      	b.n	1b5c0 <uarte_nrfx_tx+0x54>
   1b5e8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b5ec:	2100      	movs	r1, #0
   1b5ee:	480a      	ldr	r0, [pc, #40]	; (1b618 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1b5f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1b5f4:	2300      	movs	r3, #0
   1b5f6:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b5fa:	4a08      	ldr	r2, [pc, #32]	; (1b61c <uarte_nrfx_tx+0xb0>)
   1b5fc:	f7ed fc4a 	bl	8e94 <__aeabi_uldivmod>
   1b600:	6924      	ldr	r4, [r4, #16]
   1b602:	4602      	mov	r2, r0
   1b604:	460b      	mov	r3, r1
   1b606:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1b608:	2000      	movs	r0, #0
   1b60a:	2100      	movs	r1, #0
   1b60c:	e9cd 0100 	strd	r0, r1, [sp]
   1b610:	4620      	mov	r0, r4
   1b612:	f00c f8e7 	bl	277e4 <z_impl_k_timer_start>
   1b616:	e7e0      	b.n	1b5da <uarte_nrfx_tx+0x6e>
   1b618:	000f423f 	.word	0x000f423f
   1b61c:	000f4240 	.word	0x000f4240

0001b620 <uarte_nrfx_configure>:
{
   1b620:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1b622:	794b      	ldrb	r3, [r1, #5]
   1b624:	2b01      	cmp	r3, #1
   1b626:	d026      	beq.n	1b676 <uarte_nrfx_configure+0x56>
   1b628:	2b03      	cmp	r3, #3
   1b62a:	d121      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b62c:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b62e:	798b      	ldrb	r3, [r1, #6]
   1b630:	2b03      	cmp	r3, #3
   1b632:	d11d      	bne.n	1b670 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   1b634:	79ce      	ldrb	r6, [r1, #7]
   1b636:	b10e      	cbz	r6, 1b63c <uarte_nrfx_configure+0x1c>
   1b638:	2e01      	cmp	r6, #1
   1b63a:	d119      	bne.n	1b670 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   1b63c:	790a      	ldrb	r2, [r1, #4]
   1b63e:	b112      	cbz	r2, 1b646 <uarte_nrfx_configure+0x26>
   1b640:	2a02      	cmp	r2, #2
   1b642:	d115      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b644:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b646:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1b648:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1b64a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1b64e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1b650:	d067      	beq.n	1b722 <uarte_nrfx_configure+0x102>
   1b652:	d82d      	bhi.n	1b6b0 <uarte_nrfx_configure+0x90>
   1b654:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b658:	d066      	beq.n	1b728 <uarte_nrfx_configure+0x108>
   1b65a:	d816      	bhi.n	1b68a <uarte_nrfx_configure+0x6a>
   1b65c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b660:	d064      	beq.n	1b72c <uarte_nrfx_configure+0x10c>
   1b662:	d80a      	bhi.n	1b67a <uarte_nrfx_configure+0x5a>
   1b664:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b668:	d063      	beq.n	1b732 <uarte_nrfx_configure+0x112>
   1b66a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b66e:	d063      	beq.n	1b738 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1b670:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b674:	e054      	b.n	1b720 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1b676:	2500      	movs	r5, #0
   1b678:	e7d9      	b.n	1b62e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1b67a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b67e:	d05e      	beq.n	1b73e <uarte_nrfx_configure+0x11e>
   1b680:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b684:	d1f4      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b686:	4b38      	ldr	r3, [pc, #224]	; (1b768 <uarte_nrfx_configure+0x148>)
   1b688:	e03c      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b68a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b68e:	d059      	beq.n	1b744 <uarte_nrfx_configure+0x124>
   1b690:	d807      	bhi.n	1b6a2 <uarte_nrfx_configure+0x82>
   1b692:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b696:	d057      	beq.n	1b748 <uarte_nrfx_configure+0x128>
   1b698:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b69c:	d1e8      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b69e:	4b33      	ldr	r3, [pc, #204]	; (1b76c <uarte_nrfx_configure+0x14c>)
   1b6a0:	e030      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b6a2:	f647 2412 	movw	r4, #31250	; 0x7a12
   1b6a6:	42a3      	cmp	r3, r4
   1b6a8:	d1e2      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b6aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b6ae:	e029      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b6b0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b6b4:	d04a      	beq.n	1b74c <uarte_nrfx_configure+0x12c>
   1b6b6:	d813      	bhi.n	1b6e0 <uarte_nrfx_configure+0xc0>
   1b6b8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b6bc:	d049      	beq.n	1b752 <uarte_nrfx_configure+0x132>
   1b6be:	d809      	bhi.n	1b6d4 <uarte_nrfx_configure+0xb4>
   1b6c0:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1b6c4:	42a3      	cmp	r3, r4
   1b6c6:	d046      	beq.n	1b756 <uarte_nrfx_configure+0x136>
   1b6c8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b6cc:	d1d0      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b6ce:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b6d2:	e017      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b6d4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b6d8:	d1ca      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b6da:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b6de:	e011      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b6e0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b6e4:	d03a      	beq.n	1b75c <uarte_nrfx_configure+0x13c>
   1b6e6:	d808      	bhi.n	1b6fa <uarte_nrfx_configure+0xda>
   1b6e8:	4c21      	ldr	r4, [pc, #132]	; (1b770 <uarte_nrfx_configure+0x150>)
   1b6ea:	42a3      	cmp	r3, r4
   1b6ec:	d039      	beq.n	1b762 <uarte_nrfx_configure+0x142>
   1b6ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b6f2:	d1bd      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b6f4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b6f8:	e004      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b6fa:	4c1e      	ldr	r4, [pc, #120]	; (1b774 <uarte_nrfx_configure+0x154>)
   1b6fc:	42a3      	cmp	r3, r4
   1b6fe:	d1b7      	bne.n	1b670 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b704:	6904      	ldr	r4, [r0, #16]
    p_reg->BAUDRATE = baudrate;
   1b706:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1b70a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1b70c:	4335      	orrs	r5, r6
   1b70e:	681b      	ldr	r3, [r3, #0]
   1b710:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b712:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1b716:	1d23      	adds	r3, r4, #4
   1b718:	c903      	ldmia	r1, {r0, r1}
   1b71a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1b71e:	2000      	movs	r0, #0
}
   1b720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b722:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b726:	e7ed      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b728:	4b13      	ldr	r3, [pc, #76]	; (1b778 <uarte_nrfx_configure+0x158>)
   1b72a:	e7eb      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b72c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b730:	e7e8      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1b732:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b736:	e7e5      	b.n	1b704 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1b738:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b73c:	e7e2      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b73e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b742:	e7df      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b744:	4b0d      	ldr	r3, [pc, #52]	; (1b77c <uarte_nrfx_configure+0x15c>)
   1b746:	e7dd      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b748:	4b0d      	ldr	r3, [pc, #52]	; (1b780 <uarte_nrfx_configure+0x160>)
   1b74a:	e7db      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b74c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b750:	e7d8      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b752:	4b0c      	ldr	r3, [pc, #48]	; (1b784 <uarte_nrfx_configure+0x164>)
   1b754:	e7d6      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b756:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b75a:	e7d3      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b75c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b760:	e7d0      	b.n	1b704 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b762:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b766:	e7cd      	b.n	1b704 <uarte_nrfx_configure+0xe4>
   1b768:	0013b000 	.word	0x0013b000
   1b76c:	004ea000 	.word	0x004ea000
   1b770:	0003d090 	.word	0x0003d090
   1b774:	000f4240 	.word	0x000f4240
   1b778:	00275000 	.word	0x00275000
   1b77c:	0075c000 	.word	0x0075c000
   1b780:	003af000 	.word	0x003af000
   1b784:	013a9000 	.word	0x013a9000

0001b788 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b78c:	4604      	mov	r4, r0
   1b78e:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1b790:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b792:	f014 fe24 	bl	303de <k_is_in_isr>
   1b796:	b9b0      	cbnz	r0, 1b7c6 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1b798:	4b2a      	ldr	r3, [pc, #168]	; (1b844 <uarte_nrfx_poll_out+0xbc>)
   1b79a:	781b      	ldrb	r3, [r3, #0]
   1b79c:	b19b      	cbz	r3, 1b7c6 <uarte_nrfx_poll_out+0x3e>
{
   1b79e:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b7a0:	6860      	ldr	r0, [r4, #4]
   1b7a2:	f013 f882 	bl	2e8aa <is_tx_ready.isra.0>
   1b7a6:	2800      	cmp	r0, #0
   1b7a8:	d138      	bne.n	1b81c <uarte_nrfx_poll_out+0x94>
   1b7aa:	2001      	movs	r0, #1
   1b7ac:	f013 febe 	bl	2f52c <nrfx_busy_wait>
   1b7b0:	3f01      	subs	r7, #1
   1b7b2:	d1f5      	bne.n	1b7a0 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1b7b4:	2100      	movs	r1, #0
   1b7b6:	2021      	movs	r0, #33	; 0x21
   1b7b8:	f00b fb3c 	bl	26e34 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b7bc:	e7ef      	b.n	1b79e <uarte_nrfx_poll_out+0x16>
   1b7be:	f381 8811 	msr	BASEPRI, r1
   1b7c2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b7c6:	f04f 0320 	mov.w	r3, #32
   1b7ca:	f3ef 8111 	mrs	r1, BASEPRI
   1b7ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7d2:	f3bf 8f6f 	isb	sy
   1b7d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1b7da:	460f      	mov	r7, r1
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1b7dc:	4640      	mov	r0, r8
   1b7de:	f013 f864 	bl	2e8aa <is_tx_ready.isra.0>
   1b7e2:	2800      	cmp	r0, #0
   1b7e4:	d0eb      	beq.n	1b7be <uarte_nrfx_poll_out+0x36>
#if UARTE_ANY_ASYNC
				if (data->async && data->async->tx_size &&
   1b7e6:	692b      	ldr	r3, [r5, #16]
   1b7e8:	b15b      	cbz	r3, 1b802 <uarte_nrfx_poll_out+0x7a>
   1b7ea:	68da      	ldr	r2, [r3, #12]
   1b7ec:	b14a      	cbz	r2, 1b802 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1b7ee:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1b7f2:	2a00      	cmp	r2, #0
   1b7f4:	da05      	bge.n	1b802 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1b7f6:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1b7fa:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1b7fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
   1b802:	69ab      	ldr	r3, [r5, #24]
	tx_start(dev, data->char_out, 1);
   1b804:	2201      	movs	r2, #1
	*data->char_out = c;
   1b806:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1b808:	4620      	mov	r0, r4
   1b80a:	69a9      	ldr	r1, [r5, #24]
   1b80c:	f012 ff85 	bl	2e71a <tx_start>
	__asm__ volatile(
   1b810:	f387 8811 	msr	BASEPRI, r7
   1b814:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b81c:	f04f 0320 	mov.w	r3, #32
   1b820:	f3ef 8111 	mrs	r1, BASEPRI
   1b824:	f383 8812 	msr	BASEPRI_MAX, r3
   1b828:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b82c:	6860      	ldr	r0, [r4, #4]
   1b82e:	460f      	mov	r7, r1
   1b830:	f013 f83b 	bl	2e8aa <is_tx_ready.isra.0>
   1b834:	2800      	cmp	r0, #0
   1b836:	d1e4      	bne.n	1b802 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1b838:	f381 8811 	msr	BASEPRI, r1
   1b83c:	f3bf 8f6f 	isb	sy
}
   1b840:	e7b8      	b.n	1b7b4 <uarte_nrfx_poll_out+0x2c>
   1b842:	bf00      	nop
   1b844:	2001048b 	.word	0x2001048b

0001b848 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b84c:	b085      	sub	sp, #20
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b84e:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   1b850:	f8d0 a004 	ldr.w	sl, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b854:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   1b858:	f8da 4000 	ldr.w	r4, [sl]
static int uarte_instance_init(const struct device *dev,
   1b85c:	af00      	add	r7, sp, #0
   1b85e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b862:	f8c9 0000 	str.w	r0, [r9]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1b866:	f8da 600c 	ldr.w	r6, [sl, #12]
static int uarte_instance_init(const struct device *dev,
   1b86a:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1b86c:	f107 0208 	add.w	r2, r7, #8
   1b870:	4630      	mov	r0, r6
   1b872:	f012 fd52 	bl	2e31a <pinctrl_lookup_state>
	if (ret < 0) {
   1b876:	1e05      	subs	r5, r0, #0
   1b878:	db2c      	blt.n	1b8d4 <uarte_instance_init.constprop.0+0x8c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1b87a:	68bb      	ldr	r3, [r7, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b87c:	6832      	ldr	r2, [r6, #0]
   1b87e:	7919      	ldrb	r1, [r3, #4]
   1b880:	6818      	ldr	r0, [r3, #0]
   1b882:	f012 fd5d 	bl	2e340 <pinctrl_configure_pins>
	if (err < 0) {
   1b886:	1e05      	subs	r5, r0, #0
   1b888:	db24      	blt.n	1b8d4 <uarte_instance_init.constprop.0+0x8c>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b88a:	4640      	mov	r0, r8
   1b88c:	f109 0104 	add.w	r1, r9, #4
   1b890:	f7ff fec6 	bl	1b620 <uarte_nrfx_configure>
	if (err) {
   1b894:	4605      	mov	r5, r0
   1b896:	b9e8      	cbnz	r0, 1b8d4 <uarte_instance_init.constprop.0+0x8c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b898:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b89c:	0798      	lsls	r0, r3, #30
   1b89e:	d53c      	bpl.n	1b91a <uarte_instance_init.constprop.0+0xd2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b8a0:	f109 0020 	add.w	r0, r9, #32
   1b8a4:	f005 ffa0 	bl	217e8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b8a8:	4b8d      	ldr	r3, [pc, #564]	; (1bae0 <uarte_instance_init.constprop.0+0x298>)
   1b8aa:	4298      	cmp	r0, r3
   1b8ac:	d017      	beq.n	1b8de <uarte_instance_init.constprop.0+0x96>
		LOG_ERR("Failed to allocate PPI Channel");
   1b8ae:	466c      	mov	r4, sp
   1b8b0:	b088      	sub	sp, #32
   1b8b2:	466a      	mov	r2, sp
   1b8b4:	4b8b      	ldr	r3, [pc, #556]	; (1bae4 <uarte_instance_init.constprop.0+0x29c>)
   1b8b6:	6153      	str	r3, [r2, #20]
   1b8b8:	4b8b      	ldr	r3, [pc, #556]	; (1bae8 <uarte_instance_init.constprop.0+0x2a0>)
   1b8ba:	6193      	str	r3, [r2, #24]
   1b8bc:	2303      	movs	r3, #3
   1b8be:	f842 3f10 	str.w	r3, [r2, #16]!
   1b8c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b8c6:	462b      	mov	r3, r5
   1b8c8:	4888      	ldr	r0, [pc, #544]	; (1baec <uarte_instance_init.constprop.0+0x2a4>)
   1b8ca:	f7f3 ff91 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1b8ce:	46a5      	mov	sp, r4
		return -EIO;
   1b8d0:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b8d4:	4628      	mov	r0, r5
   1b8d6:	3714      	adds	r7, #20
   1b8d8:	46bd      	mov	sp, r7
   1b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b8de:	f899 3020 	ldrb.w	r3, [r9, #32]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1b8e2:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b8e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b8ea:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1b8ee:	d10b      	bne.n	1b908 <uarte_instance_init.constprop.0+0xc0>
   1b8f0:	497f      	ldr	r1, [pc, #508]	; (1baf0 <uarte_instance_init.constprop.0+0x2a8>)
   1b8f2:	4880      	ldr	r0, [pc, #512]	; (1baf4 <uarte_instance_init.constprop.0+0x2ac>)
   1b8f4:	f240 234e 	movw	r3, #590	; 0x24e
   1b8f8:	4a7f      	ldr	r2, [pc, #508]	; (1baf8 <uarte_instance_init.constprop.0+0x2b0>)
   1b8fa:	f00f fa5d 	bl	2adb8 <assert_print>
   1b8fe:	f240 214e 	movw	r1, #590	; 0x24e
   1b902:	487d      	ldr	r0, [pc, #500]	; (1baf8 <uarte_instance_init.constprop.0+0x2b0>)
   1b904:	f00f fa51 	bl	2adaa <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b908:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b90c:	2301      	movs	r3, #1
   1b90e:	f899 2020 	ldrb.w	r2, [r9, #32]
   1b912:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1b914:	4a79      	ldr	r2, [pc, #484]	; (1bafc <uarte_instance_init.constprop.0+0x2b4>)
   1b916:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1b91a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1b91e:	2b00      	cmp	r3, #0
   1b920:	f000 80c9 	beq.w	1bab6 <uarte_instance_init.constprop.0+0x26e>
	const struct uarte_nrfx_config *config = dev->config;
   1b924:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b928:	f8d8 6010 	ldr.w	r6, [r8, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1b92c:	607b      	str	r3, [r7, #4]
	return config->uarte_regs;
   1b92e:	f8d3 8000 	ldr.w	r8, [r3]
	if (HW_RX_COUNTING_ENABLED(data)) {
   1b932:	6933      	ldr	r3, [r6, #16]
   1b934:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   1b938:	2b00      	cmp	r3, #0
   1b93a:	f000 80b8 	beq.w	1baae <uarte_instance_init.constprop.0+0x266>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1b93e:	2300      	movs	r3, #0
   1b940:	496f      	ldr	r1, [pc, #444]	; (1bb00 <uarte_instance_init.constprop.0+0x2b8>)
		ret = nrfx_timer_init(&cfg->timer,
   1b942:	4a70      	ldr	r2, [pc, #448]	; (1bb04 <uarte_instance_init.constprop.0+0x2bc>)
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   1b944:	e9c7 1302 	strd	r1, r3, [r7, #8]
		ret = nrfx_timer_init(&cfg->timer,
   1b948:	687b      	ldr	r3, [r7, #4]
   1b94a:	f107 0108 	add.w	r1, r7, #8
   1b94e:	f103 0b10 	add.w	fp, r3, #16
   1b952:	4658      	mov	r0, fp
   1b954:	f006 fc64 	bl	22220 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   1b958:	4a61      	ldr	r2, [pc, #388]	; (1bae0 <uarte_instance_init.constprop.0+0x298>)
   1b95a:	4290      	cmp	r0, r2
   1b95c:	f000 80a0 	beq.w	1baa0 <uarte_instance_init.constprop.0+0x258>
			LOG_ERR("Timer already initialized, "
   1b960:	f8c7 d000 	str.w	sp, [r7]
   1b964:	b088      	sub	sp, #32
   1b966:	466a      	mov	r2, sp
   1b968:	4967      	ldr	r1, [pc, #412]	; (1bb08 <uarte_instance_init.constprop.0+0x2c0>)
   1b96a:	6151      	str	r1, [r2, #20]
   1b96c:	4967      	ldr	r1, [pc, #412]	; (1bb0c <uarte_instance_init.constprop.0+0x2c4>)
   1b96e:	6191      	str	r1, [r2, #24]
   1b970:	2103      	movs	r1, #3
   1b972:	f842 1f10 	str.w	r1, [r2, #16]!
   1b976:	2300      	movs	r3, #0
   1b978:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b97c:	485b      	ldr	r0, [pc, #364]	; (1baec <uarte_instance_init.constprop.0+0x2a4>)
   1b97e:	f7f3 ff37 	bl	f7f0 <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   1b982:	2300      	movs	r3, #0
   1b984:	6932      	ldr	r2, [r6, #16]
   1b986:	f8d7 d000 	ldr.w	sp, [r7]
   1b98a:	f882 30cc 	strb.w	r3, [r2, #204]	; 0xcc
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   1b98e:	6930      	ldr	r0, [r6, #16]
   1b990:	30b8      	adds	r0, #184	; 0xb8
   1b992:	f005 ff29 	bl	217e8 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   1b996:	4b52      	ldr	r3, [pc, #328]	; (1bae0 <uarte_instance_init.constprop.0+0x298>)
   1b998:	4298      	cmp	r0, r3
   1b99a:	d019      	beq.n	1b9d0 <uarte_instance_init.constprop.0+0x188>
			LOG_ERR("Failed to allocate PPI Channel, "
   1b99c:	f8c7 d000 	str.w	sp, [r7]
   1b9a0:	b088      	sub	sp, #32
   1b9a2:	466a      	mov	r2, sp
   1b9a4:	4b5a      	ldr	r3, [pc, #360]	; (1bb10 <uarte_instance_init.constprop.0+0x2c8>)
   1b9a6:	6153      	str	r3, [r2, #20]
   1b9a8:	4b58      	ldr	r3, [pc, #352]	; (1bb0c <uarte_instance_init.constprop.0+0x2c4>)
   1b9aa:	6193      	str	r3, [r2, #24]
   1b9ac:	2303      	movs	r3, #3
   1b9ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9b2:	2300      	movs	r3, #0
   1b9b4:	484d      	ldr	r0, [pc, #308]	; (1baec <uarte_instance_init.constprop.0+0x2a4>)
   1b9b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9ba:	f7f3 ff19 	bl	f7f0 <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   1b9be:	2200      	movs	r2, #0
   1b9c0:	6933      	ldr	r3, [r6, #16]
			nrfx_timer_uninit(&cfg->timer);
   1b9c2:	4658      	mov	r0, fp
   1b9c4:	f8d7 d000 	ldr.w	sp, [r7]
			data->async->hw_rx_counting = false;
   1b9c8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			nrfx_timer_uninit(&cfg->timer);
   1b9cc:	f006 fcf8 	bl	223c0 <nrfx_timer_uninit>
		nrf_uarte_publish_set(uarte,
   1b9d0:	6933      	ldr	r3, [r6, #16]
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   1b9d2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1b9d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   1b9da:	f8c8 3188 	str.w	r3, [r8, #392]	; 0x188
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   1b9de:	687b      	ldr	r3, [r7, #4]
   1b9e0:	691a      	ldr	r2, [r3, #16]
   1b9e2:	6933      	ldr	r3, [r6, #16]
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   1b9e4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1b9e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   1b9ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   1b9f0:	6933      	ldr	r3, [r6, #16]
   1b9f2:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
   1b9f6:	f005 fefd 	bl	217f4 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   1b9fa:	4b39      	ldr	r3, [pc, #228]	; (1bae0 <uarte_instance_init.constprop.0+0x298>)
   1b9fc:	4298      	cmp	r0, r3
   1b9fe:	f47f af67 	bne.w	1b8d0 <uarte_instance_init.constprop.0+0x88>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1ba02:	2301      	movs	r3, #1
   1ba04:	6932      	ldr	r2, [r6, #16]
   1ba06:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    p_reg->INTENSET = mask;
   1ba0a:	4a42      	ldr	r2, [pc, #264]	; (1bb14 <uarte_instance_init.constprop.0+0x2cc>)
   1ba0c:	f8c8 2304 	str.w	r2, [r8, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ba10:	2208      	movs	r2, #8
   1ba12:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba16:	f8d8 214c 	ldr.w	r2, [r8, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1ba1a:	b1aa      	cbz	r2, 1ba48 <uarte_instance_init.constprop.0+0x200>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba1c:	f8c8 3004 	str.w	r3, [r8, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba20:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ba24:	b91b      	cbnz	r3, 1ba2e <uarte_instance_init.constprop.0+0x1e6>
   1ba26:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
   1ba2a:	2b00      	cmp	r3, #0
   1ba2c:	d0f8      	beq.n	1ba20 <uarte_instance_init.constprop.0+0x1d8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba2e:	2300      	movs	r3, #0
   1ba30:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
   1ba34:	f8d8 214c 	ldr.w	r2, [r8, #332]	; 0x14c
   1ba38:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
   1ba3c:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
   1ba40:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
   1ba44:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1ba48:	6930      	ldr	r0, [r6, #16]
   1ba4a:	2200      	movs	r2, #0
   1ba4c:	4932      	ldr	r1, [pc, #200]	; (1bb18 <uarte_instance_init.constprop.0+0x2d0>)
   1ba4e:	3080      	adds	r0, #128	; 0x80
   1ba50:	f014 fdf0 	bl	30634 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1ba54:	6933      	ldr	r3, [r6, #16]
	timer->user_data = user_data;
   1ba56:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1ba5a:	6930      	ldr	r0, [r6, #16]
   1ba5c:	2200      	movs	r2, #0
   1ba5e:	492f      	ldr	r1, [pc, #188]	; (1bb1c <uarte_instance_init.constprop.0+0x2d4>)
   1ba60:	3020      	adds	r0, #32
   1ba62:	f014 fde7 	bl	30634 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1ba66:	6933      	ldr	r3, [r6, #16]
   1ba68:	655e      	str	r6, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ba6a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1ba6e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1ba70:	bf5c      	itt	pl
   1ba72:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1ba76:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ba7a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1ba7e:	06db      	lsls	r3, r3, #27
   1ba80:	bf44      	itt	mi
   1ba82:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ba86:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ba8a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1ba8e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ba92:	2300      	movs	r3, #0
   1ba94:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba98:	2301      	movs	r3, #1
   1ba9a:	60a3      	str	r3, [r4, #8]
   1ba9c:	60e3      	str	r3, [r4, #12]
	return 0;
   1ba9e:	e719      	b.n	1b8d4 <uarte_instance_init.constprop.0+0x8c>
			nrfx_timer_enable(&cfg->timer);
   1baa0:	4658      	mov	r0, fp
   1baa2:	f006 fc47 	bl	22334 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   1baa6:	4658      	mov	r0, fp
   1baa8:	f006 fca8 	bl	223fc <nrfx_timer_clear>
   1baac:	e76f      	b.n	1b98e <uarte_instance_init.constprop.0+0x146>
    p_reg->INTENSET = mask;
   1baae:	2304      	movs	r3, #4
   1bab0:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
	if (ret != 0) {
   1bab4:	e7a5      	b.n	1ba02 <uarte_instance_init.constprop.0+0x1ba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1bab6:	2308      	movs	r3, #8
   1bab8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1babc:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d1d2      	bne.n	1ba6a <uarte_instance_init.constprop.0+0x222>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bac4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1bac8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1bacc:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1bad0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1bad4:	2301      	movs	r3, #1
   1bad6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bada:	6023      	str	r3, [r4, #0]
}
   1badc:	e7c5      	b.n	1ba6a <uarte_instance_init.constprop.0+0x222>
   1bade:	bf00      	nop
   1bae0:	0bad0000 	.word	0x0bad0000
   1bae4:	00037d65 	.word	0x00037d65
   1bae8:	00037e6d 	.word	0x00037e6d
   1baec:	00031cec 	.word	0x00031cec
   1baf0:	00037dc0 	.word	0x00037dc0
   1baf4:	00033bc2 	.word	0x00033bc2
   1baf8:	00037d88 	.word	0x00037d88
   1bafc:	40017000 	.word	0x40017000
   1bb00:	07030100 	.word	0x07030100
   1bb04:	0002e487 	.word	0x0002e487
   1bb08:	00037dc4 	.word	0x00037dc4
   1bb0c:	00037e51 	.word	0x00037e51
   1bb10:	00037e08 	.word	0x00037e08
   1bb14:	000a0210 	.word	0x000a0210
   1bb18:	0002ea79 	.word	0x0002ea79
   1bb1c:	0002eb61 	.word	0x0002eb61

0001bb20 <uarte_nrfx_isr_async>:
{
   1bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1bb24:	6843      	ldr	r3, [r0, #4]
{
   1bb26:	4604      	mov	r4, r0
	return config->uarte_regs;
   1bb28:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1bb2a:	6903      	ldr	r3, [r0, #16]
{
   1bb2c:	b088      	sub	sp, #32
	if (!HW_RX_COUNTING_ENABLED(data)
   1bb2e:	691a      	ldr	r2, [r3, #16]
   1bb30:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
   1bb34:	b97a      	cbnz	r2, 1bb56 <uarte_nrfx_isr_async+0x36>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bb36:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1bb3a:	b161      	cbz	r1, 1bb56 <uarte_nrfx_isr_async+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb3c:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1bb40:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1bb44:	691a      	ldr	r2, [r3, #16]
   1bb46:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1bb4a:	3301      	adds	r3, #1
   1bb4c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1bb50:	b008      	add	sp, #32
   1bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bb56:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1bb5a:	b32b      	cbz	r3, 1bba8 <uarte_nrfx_isr_async+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb5c:	2100      	movs	r1, #0
   1bb5e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1bb62:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1bb66:	6863      	ldr	r3, [r4, #4]
	struct uart_event evt = {
   1bb68:	2214      	movs	r2, #20
	return config->uarte_regs;
   1bb6a:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1bb6c:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1bb6e:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1bb72:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1bb76:	f014 fe84 	bl	30882 <memset>
   1bb7a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1bb7c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1bb7e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1bb82:	f100 80f7 	bmi.w	1bd74 <uarte_nrfx_isr_async+0x254>
   1bb86:	07b3      	lsls	r3, r6, #30
   1bb88:	f100 80f6 	bmi.w	1bd78 <uarte_nrfx_isr_async+0x258>
   1bb8c:	0777      	lsls	r7, r6, #29
   1bb8e:	f100 80f5 	bmi.w	1bd7c <uarte_nrfx_isr_async+0x25c>
   1bb92:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1bb96:	4620      	mov	r0, r4
   1bb98:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1bb9a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1bb9e:	f012 fc73 	bl	2e488 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1bba2:	4620      	mov	r0, r4
   1bba4:	f012 fdd6 	bl	2e754 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bba8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d033      	beq.n	1bc18 <uarte_nrfx_isr_async+0xf8>
    return p_reg->INTENSET & mask;
   1bbb0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1bbb4:	06d8      	lsls	r0, r3, #27
   1bbb6:	d52f      	bpl.n	1bc18 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbb8:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1bbbc:	2201      	movs	r2, #1
   1bbbe:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1bbc2:	6926      	ldr	r6, [r4, #16]
   1bbc4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1bbc8:	6863      	ldr	r3, [r4, #4]
   1bbca:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1bbcc:	6933      	ldr	r3, [r6, #16]
   1bbce:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1bbd2:	6930      	ldr	r0, [r6, #16]
   1bbd4:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1bbd6:	f014 fd39 	bl	3064c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1bbda:	6932      	ldr	r2, [r6, #16]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1bbdc:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1bbe0:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1bbe4:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1bbe8:	6932      	ldr	r2, [r6, #16]
   1bbea:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1bbec:	1a1b      	subs	r3, r3, r0
   1bbee:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1bbf0:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1bbf2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1bbf6:	4408      	add	r0, r1
	if (rx_len > 0) {
   1bbf8:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1bbfa:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1bbfc:	dd02      	ble.n	1bc04 <uarte_nrfx_isr_async+0xe4>
		notify_uart_rx_rdy(dev, rx_len);
   1bbfe:	4620      	mov	r0, r4
   1bc00:	f012 fc49 	bl	2e496 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1bc04:	6931      	ldr	r1, [r6, #16]
   1bc06:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1bc0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	f040 80b6 	bne.w	1bd80 <uarte_nrfx_isr_async+0x260>
		data->async->is_in_irq = false;
   1bc14:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc18:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1bc1c:	b383      	cbz	r3, 1bc80 <uarte_nrfx_isr_async+0x160>
   1bc1e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1bc22:	bb6e      	cbnz	r6, 1bc80 <uarte_nrfx_isr_async+0x160>
	struct uart_event evt = {
   1bc24:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc26:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1bc2a:	4631      	mov	r1, r6
   1bc2c:	a803      	add	r0, sp, #12
   1bc2e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1bc32:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1bc34:	f014 fe25 	bl	30882 <memset>
   1bc38:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1bc3a:	a903      	add	r1, sp, #12
   1bc3c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1bc3e:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1bc42:	f012 fc21 	bl	2e488 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1bc46:	693b      	ldr	r3, [r7, #16]
   1bc48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1bc4a:	1c51      	adds	r1, r2, #1
   1bc4c:	d018      	beq.n	1bc80 <uarte_nrfx_isr_async+0x160>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1bc4e:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1bc50:	693f      	ldr	r7, [r7, #16]
   1bc52:	4984      	ldr	r1, [pc, #528]	; (1be64 <uarte_nrfx_isr_async+0x344>)
			      K_USEC(data->async->rx_timeout_slab),
   1bc54:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1bc56:	468e      	mov	lr, r1
   1bc58:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1bc5c:	4631      	mov	r1, r6
   1bc5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1bc62:	fbcc e100 	smlal	lr, r1, ip, r0
   1bc66:	2300      	movs	r3, #0
   1bc68:	4670      	mov	r0, lr
   1bc6a:	4a7f      	ldr	r2, [pc, #508]	; (1be68 <uarte_nrfx_isr_async+0x348>)
   1bc6c:	f7ed f912 	bl	8e94 <__aeabi_uldivmod>
   1bc70:	4602      	mov	r2, r0
   1bc72:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1bc74:	e9cd 0100 	strd	r0, r1, [sp]
   1bc78:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1bc7c:	f00b fdb2 	bl	277e4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc80:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1bc84:	b363      	cbz	r3, 1bce0 <uarte_nrfx_isr_async+0x1c0>
   1bc86:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1bc8a:	bb4e      	cbnz	r6, 1bce0 <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc8c:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1bc90:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1bc92:	4620      	mov	r0, r4
   1bc94:	6939      	ldr	r1, [r7, #16]
   1bc96:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1bc9a:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1bc9c:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1bca0:	f012 fc12 	bl	2e4c8 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1bca4:	6939      	ldr	r1, [r7, #16]
   1bca6:	4620      	mov	r0, r4
   1bca8:	3164      	adds	r1, #100	; 0x64
   1bcaa:	f012 fc0d 	bl	2e4c8 <rx_buf_release>
	data->async->rx_enabled = false;
   1bcae:	693b      	ldr	r3, [r7, #16]
   1bcb0:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1bcb4:	693b      	ldr	r3, [r7, #16]
   1bcb6:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1bcba:	b132      	cbz	r2, 1bcca <uarte_nrfx_isr_async+0x1aa>
		data->async->discard_rx_fifo = false;
   1bcbc:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1bcc0:	4632      	mov	r2, r6
   1bcc2:	4631      	mov	r1, r6
   1bcc4:	6860      	ldr	r0, [r4, #4]
   1bcc6:	f012 fd82 	bl	2e7ce <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1bcca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bcce:	06d8      	lsls	r0, r3, #27
   1bcd0:	d503      	bpl.n	1bcda <uarte_nrfx_isr_async+0x1ba>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1bcd2:	2102      	movs	r1, #2
   1bcd4:	4620      	mov	r0, r4
   1bcd6:	f012 fdaf 	bl	2e838 <async_uart_release>
	notify_rx_disable(dev);
   1bcda:	4620      	mov	r0, r4
   1bcdc:	f012 fc0c 	bl	2e4f8 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bce0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1bce4:	b133      	cbz	r3, 1bcf4 <uarte_nrfx_isr_async+0x1d4>
    return p_reg->INTENSET & mask;
   1bce6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1bcea:	05d9      	lsls	r1, r3, #23
   1bcec:	d502      	bpl.n	1bcf4 <uarte_nrfx_isr_async+0x1d4>
		endtx_isr(dev);
   1bcee:	6860      	ldr	r0, [r4, #4]
   1bcf0:	f012 fe3e 	bl	2e970 <endtx_isr.isra.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bcf4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1bcf8:	2b00      	cmp	r3, #0
   1bcfa:	f43f af29 	beq.w	1bb50 <uarte_nrfx_isr_async+0x30>
    return p_reg->INTENSET & mask;
   1bcfe:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1bd02:	025a      	lsls	r2, r3, #9
   1bd04:	f57f af24 	bpl.w	1bb50 <uarte_nrfx_isr_async+0x30>
	const struct uarte_nrfx_config *config = dev->config;
   1bd08:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bd0a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1bd0c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1bd10:	06db      	lsls	r3, r3, #27
   1bd12:	d466      	bmi.n	1bde2 <uarte_nrfx_isr_async+0x2c2>
	if (!data->async->tx_buf) {
   1bd14:	692b      	ldr	r3, [r5, #16]
   1bd16:	689b      	ldr	r3, [r3, #8]
   1bd18:	2b00      	cmp	r3, #0
   1bd1a:	f43f af19 	beq.w	1bb50 <uarte_nrfx_isr_async+0x30>
	__asm__ volatile(
   1bd1e:	f04f 0320 	mov.w	r3, #32
   1bd22:	f3ef 8211 	mrs	r2, BASEPRI
   1bd26:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd2a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1bd2e:	692b      	ldr	r3, [r5, #16]
   1bd30:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1bd34:	2900      	cmp	r1, #0
   1bd36:	bfac      	ite	ge
   1bd38:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1bd3c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1bd40:	f382 8811 	msr	BASEPRI, r2
   1bd44:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1bd48:	692b      	ldr	r3, [r5, #16]
   1bd4a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1bd4e:	2a00      	cmp	r2, #0
   1bd50:	d054      	beq.n	1bdfc <uarte_nrfx_isr_async+0x2dc>
	__asm__ volatile(
   1bd52:	f04f 0320 	mov.w	r3, #32
   1bd56:	f3ef 8611 	mrs	r6, BASEPRI
   1bd5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd5e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1bd62:	4629      	mov	r1, r5
   1bd64:	4620      	mov	r0, r4
   1bd66:	f012 fdb0 	bl	2e8ca <start_tx_locked>
	__asm__ volatile(
   1bd6a:	f386 8811 	msr	BASEPRI, r6
   1bd6e:	f3bf 8f6f 	isb	sy
				return;
   1bd72:	e6ed      	b.n	1bb50 <uarte_nrfx_isr_async+0x30>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1bd74:	2601      	movs	r6, #1
   1bd76:	e70e      	b.n	1bb96 <uarte_nrfx_isr_async+0x76>
   1bd78:	2602      	movs	r6, #2
   1bd7a:	e70c      	b.n	1bb96 <uarte_nrfx_isr_async+0x76>
   1bd7c:	2604      	movs	r6, #4
   1bd7e:	e70a      	b.n	1bb96 <uarte_nrfx_isr_async+0x76>
	rx_buf_release(dev, &data->async->rx_buf);
   1bd80:	4620      	mov	r0, r4
   1bd82:	3158      	adds	r1, #88	; 0x58
   1bd84:	f012 fba0 	bl	2e4c8 <rx_buf_release>
	__asm__ volatile(
   1bd88:	f04f 0320 	mov.w	r3, #32
   1bd8c:	f3ef 8111 	mrs	r1, BASEPRI
   1bd90:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd94:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1bd98:	6933      	ldr	r3, [r6, #16]
   1bd9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1bd9c:	b1f2      	cbz	r2, 1bddc <uarte_nrfx_isr_async+0x2bc>
		data->async->rx_buf = data->async->rx_next_buf;
   1bd9e:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1bda0:	6933      	ldr	r3, [r6, #16]
   1bda2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1bda4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1bda6:	2300      	movs	r3, #0
   1bda8:	6932      	ldr	r2, [r6, #16]
   1bdaa:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1bdac:	6932      	ldr	r2, [r6, #16]
   1bdae:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1bdb0:	6932      	ldr	r2, [r6, #16]
   1bdb2:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bdb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1bdb8:	b90b      	cbnz	r3, 1bdbe <uarte_nrfx_isr_async+0x29e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bdba:	2301      	movs	r3, #1
   1bdbc:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1bdbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1bdc2:	f023 0320 	bic.w	r3, r3, #32
   1bdc6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1bdca:	f381 8811 	msr	BASEPRI, r1
   1bdce:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1bdd2:	2200      	movs	r2, #0
   1bdd4:	6933      	ldr	r3, [r6, #16]
   1bdd6:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1bdda:	e71d      	b.n	1bc18 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bddc:	2301      	movs	r3, #1
   1bdde:	607b      	str	r3, [r7, #4]
}
   1bde0:	e7f3      	b.n	1bdca <uarte_nrfx_isr_async+0x2aa>
    p_reg->INTENCLR = mask;
   1bde2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1bde6:	2101      	movs	r1, #1
   1bde8:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1bdec:	4620      	mov	r0, r4
   1bdee:	f012 fd23 	bl	2e838 <async_uart_release>
		if (!data->async->tx_size) {
   1bdf2:	692b      	ldr	r3, [r5, #16]
   1bdf4:	68db      	ldr	r3, [r3, #12]
   1bdf6:	2b00      	cmp	r3, #0
   1bdf8:	d18c      	bne.n	1bd14 <uarte_nrfx_isr_async+0x1f4>
   1bdfa:	e6a9      	b.n	1bb50 <uarte_nrfx_isr_async+0x30>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1bdfc:	6899      	ldr	r1, [r3, #8]
   1bdfe:	691a      	ldr	r2, [r3, #16]
   1be00:	4291      	cmp	r1, r2
   1be02:	d00c      	beq.n	1be1e <uarte_nrfx_isr_async+0x2fe>
		if (amount == data->async->xfer_len) {
   1be04:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1be06:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1be08:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1be0a:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1be0c:	d128      	bne.n	1be60 <uarte_nrfx_isr_async+0x340>
			if (setup_tx_cache(data)) {
   1be0e:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1be10:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1be12:	f012 fcc4 	bl	2e79e <setup_tx_cache>
   1be16:	2800      	cmp	r0, #0
   1be18:	d19b      	bne.n	1bd52 <uarte_nrfx_isr_async+0x232>
			amount = data->async->tx_cache_offset;
   1be1a:	692b      	ldr	r3, [r5, #16]
   1be1c:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1be1e:	6928      	ldr	r0, [r5, #16]
   1be20:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1be22:	f014 fc13 	bl	3064c <z_impl_k_timer_stop>
	struct uart_event evt = {
   1be26:	2214      	movs	r2, #20
   1be28:	2100      	movs	r1, #0
   1be2a:	a803      	add	r0, sp, #12
   1be2c:	f014 fd29 	bl	30882 <memset>
		.data.tx.buf = data->async->tx_buf,
   1be30:	692b      	ldr	r3, [r5, #16]
	user_callback(dev, &evt);
   1be32:	4620      	mov	r0, r4
	struct uart_event evt = {
   1be34:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1be36:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1be38:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1be3c:	68db      	ldr	r3, [r3, #12]
   1be3e:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1be40:	bf1c      	itt	ne
   1be42:	2301      	movne	r3, #1
   1be44:	f88d 300c 	strbne.w	r3, [sp, #12]
   1be48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1be4c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1be50:	2300      	movs	r3, #0
   1be52:	692a      	ldr	r2, [r5, #16]
   1be54:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1be56:	692a      	ldr	r2, [r5, #16]
   1be58:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1be5a:	f012 fb15 	bl	2e488 <user_callback>
   1be5e:	e677      	b.n	1bb50 <uarte_nrfx_isr_async+0x30>
			amount += data->async->tx_cache_offset;
   1be60:	4616      	mov	r6, r2
   1be62:	e7dc      	b.n	1be1e <uarte_nrfx_isr_async+0x2fe>
   1be64:	000f423f 	.word	0x000f423f
   1be68:	000f4240 	.word	0x000f4240

0001be6c <nrf_gpio_pin_port_decode>:
{
   1be6c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1be6e:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1be70:	0953      	lsrs	r3, r2, #5
   1be72:	d104      	bne.n	1be7e <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1be74:	f04f 33ff 	mov.w	r3, #4294967295
   1be78:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1be7a:	07db      	lsls	r3, r3, #31
   1be7c:	d40b      	bmi.n	1be96 <nrf_gpio_pin_port_decode+0x2a>
   1be7e:	4907      	ldr	r1, [pc, #28]	; (1be9c <nrf_gpio_pin_port_decode+0x30>)
   1be80:	4807      	ldr	r0, [pc, #28]	; (1bea0 <nrf_gpio_pin_port_decode+0x34>)
   1be82:	f240 2347 	movw	r3, #583	; 0x247
   1be86:	4a07      	ldr	r2, [pc, #28]	; (1bea4 <nrf_gpio_pin_port_decode+0x38>)
   1be88:	f00e ff96 	bl	2adb8 <assert_print>
   1be8c:	f240 2147 	movw	r1, #583	; 0x247
   1be90:	4804      	ldr	r0, [pc, #16]	; (1bea4 <nrf_gpio_pin_port_decode+0x38>)
   1be92:	f00e ff8a 	bl	2adaa <assert_post_action>
}
   1be96:	4804      	ldr	r0, [pc, #16]	; (1bea8 <nrf_gpio_pin_port_decode+0x3c>)
   1be98:	bd08      	pop	{r3, pc}
   1be9a:	bf00      	nop
   1be9c:	00037c9d 	.word	0x00037c9d
   1bea0:	00033bc2 	.word	0x00033bc2
   1bea4:	00037c6a 	.word	0x00037c6a
   1bea8:	40842500 	.word	0x40842500

0001beac <rdy_pin_idle.constprop.0>:

	return 0;
}

/* Pin activated to detect high state (using SENSE). */
static void rdy_pin_idle(struct lpuart_data *data)
   1beac:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	nrfx_err_t err;
	nrfx_gpiote_trigger_config_t trigger_config = {
   1beae:	2300      	movs	r3, #0
   1beb0:	2205      	movs	r2, #5
   1beb2:	e9cd 3300 	strd	r3, r3, [sp]
		.trigger = NRFX_GPIOTE_TRIGGER_HIGH
	};

	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1beb6:	4619      	mov	r1, r3
	nrfx_gpiote_trigger_config_t trigger_config = {
   1beb8:	f88d 2000 	strb.w	r2, [sp]
static void rdy_pin_idle(struct lpuart_data *data)
   1bebc:	4604      	mov	r4, r0
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1bebe:	466a      	mov	r2, sp
   1bec0:	6880      	ldr	r0, [r0, #8]
   1bec2:	f005 fd79 	bl	219b8 <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1bec6:	4b0d      	ldr	r3, [pc, #52]	; (1befc <rdy_pin_idle.constprop.0+0x50>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1bec8:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1beca:	4298      	cmp	r0, r3
   1becc:	d010      	beq.n	1bef0 <rdy_pin_idle.constprop.0+0x44>
   1bece:	f44f 7381 	mov.w	r3, #258	; 0x102
   1bed2:	4a0b      	ldr	r2, [pc, #44]	; (1bf00 <rdy_pin_idle.constprop.0+0x54>)
   1bed4:	490b      	ldr	r1, [pc, #44]	; (1bf04 <rdy_pin_idle.constprop.0+0x58>)
   1bed6:	480c      	ldr	r0, [pc, #48]	; (1bf08 <rdy_pin_idle.constprop.0+0x5c>)
   1bed8:	f00e ff6e 	bl	2adb8 <assert_print>
   1bedc:	4629      	mov	r1, r5
   1bede:	480b      	ldr	r0, [pc, #44]	; (1bf0c <rdy_pin_idle.constprop.0+0x60>)
   1bee0:	462a      	mov	r2, r5
   1bee2:	f00e ff69 	bl	2adb8 <assert_print>
   1bee6:	f44f 7181 	mov.w	r1, #258	; 0x102
   1beea:	4805      	ldr	r0, [pc, #20]	; (1bf00 <rdy_pin_idle.constprop.0+0x54>)
   1beec:	f00e ff5d 	bl	2adaa <assert_post_action>

	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   1bef0:	2101      	movs	r1, #1
   1bef2:	68a0      	ldr	r0, [r4, #8]
   1bef4:	f005 fef4 	bl	21ce0 <nrfx_gpiote_trigger_enable>
}
   1bef8:	b003      	add	sp, #12
   1befa:	bd30      	pop	{r4, r5, pc}
   1befc:	0bad0000 	.word	0x0bad0000
   1bf00:	00037ea7 	.word	0x00037ea7
   1bf04:	00037cf8 	.word	0x00037cf8
   1bf08:	00033bc2 	.word	0x00033bc2
   1bf0c:	00037edb 	.word	0x00037edb

0001bf10 <api_rx_enable>:
	return err;
}

static int api_rx_enable(const struct device *dev, uint8_t *buf,
			 size_t len, int32_t timeout)
{
   1bf10:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   1bf12:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   1bf14:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   1bf18:	b15c      	cbz	r4, 1bf32 <api_rx_enable+0x22>
   1bf1a:	4912      	ldr	r1, [pc, #72]	; (1bf64 <api_rx_enable+0x54>)
   1bf1c:	4812      	ldr	r0, [pc, #72]	; (1bf68 <api_rx_enable+0x58>)
   1bf1e:	f240 23b5 	movw	r3, #693	; 0x2b5
   1bf22:	4a12      	ldr	r2, [pc, #72]	; (1bf6c <api_rx_enable+0x5c>)
   1bf24:	f00e ff48 	bl	2adb8 <assert_print>
   1bf28:	f240 21b5 	movw	r1, #693	; 0x2b5
   1bf2c:	480f      	ldr	r0, [pc, #60]	; (1bf6c <api_rx_enable+0x5c>)
   1bf2e:	f00e ff3c 	bl	2adaa <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bf32:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1bf36:	e8d5 6fef 	ldaex	r6, [r5]
   1bf3a:	2e00      	cmp	r6, #0
   1bf3c:	d104      	bne.n	1bf48 <api_rx_enable+0x38>
   1bf3e:	e8c5 1fec 	stlex	ip, r1, [r5]
   1bf42:	f1bc 0f00 	cmp.w	ip, #0
   1bf46:	d1f6      	bne.n	1bf36 <api_rx_enable+0x26>

	if (!atomic_ptr_cas((atomic_ptr_t *)&data->rx_buf, NULL, buf)) {
   1bf48:	d108      	bne.n	1bf5c <api_rx_enable+0x4c>
		return -EBUSY;
	}

	data->rx_len = len;
	data->rx_timeout = timeout;
   1bf4a:	e9c0 2317 	strd	r2, r3, [r0, #92]	; 0x5c
	data->rx_state = RX_IDLE;
   1bf4e:	2301      	movs	r3, #1
   1bf50:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

	LOG_DBG("RX: Enabling");
	rdy_pin_idle(data);
   1bf54:	f7ff ffaa 	bl	1beac <rdy_pin_idle.constprop.0>

	return 0;
   1bf58:	4620      	mov	r0, r4
}
   1bf5a:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   1bf5c:	f06f 000f 	mvn.w	r0, #15
   1bf60:	e7fb      	b.n	1bf5a <api_rx_enable+0x4a>
   1bf62:	bf00      	nop
   1bf64:	00037ef5 	.word	0x00037ef5
   1bf68:	00033bc2 	.word	0x00033bc2
   1bf6c:	00037ea7 	.word	0x00037ea7

0001bf70 <api_rx_buf_rsp>:

static int api_rx_buf_rsp(const struct device *dev, uint8_t *buf, size_t len)
{
   1bf70:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   1bf72:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   1bf74:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   1bf78:	b10b      	cbz	r3, 1bf7e <api_rx_buf_rsp+0xe>
   1bf7a:	2b06      	cmp	r3, #6
   1bf7c:	d10b      	bne.n	1bf96 <api_rx_buf_rsp+0x26>
   1bf7e:	490f      	ldr	r1, [pc, #60]	; (1bfbc <api_rx_buf_rsp+0x4c>)
   1bf80:	480f      	ldr	r0, [pc, #60]	; (1bfc0 <api_rx_buf_rsp+0x50>)
   1bf82:	f240 23c9 	movw	r3, #713	; 0x2c9
   1bf86:	4a0f      	ldr	r2, [pc, #60]	; (1bfc4 <api_rx_buf_rsp+0x54>)
   1bf88:	f00e ff16 	bl	2adb8 <assert_print>
   1bf8c:	f240 21c9 	movw	r1, #713	; 0x2c9
   1bf90:	480c      	ldr	r0, [pc, #48]	; (1bfc4 <api_rx_buf_rsp+0x54>)
   1bf92:	f00e ff0a 	bl	2adaa <assert_post_action>
		 (data->rx_state != RX_TO_OFF));

	LOG_DBG("buf rsp, state:%d", data->rx_state);
	if (data->rx_state == RX_TO_IDLE || data->rx_state == RX_BLOCKED) {
   1bf96:	3b04      	subs	r3, #4
   1bf98:	2b01      	cmp	r3, #1
   1bf9a:	d905      	bls.n	1bfa8 <api_rx_buf_rsp+0x38>

		return 0;
	}

	return uart_rx_buf_rsp(data->uart, buf, len);
}
   1bf9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return uart_rx_buf_rsp(data->uart, buf, len);
   1bfa0:	6800      	ldr	r0, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   1bfa2:	6883      	ldr	r3, [r0, #8]
   1bfa4:	691b      	ldr	r3, [r3, #16]
   1bfa6:	4718      	bx	r3
		data->rx_state = RX_IDLE;
   1bfa8:	2301      	movs	r3, #1
		data->rx_len = len;
   1bfaa:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
		data->rx_state = RX_IDLE;
   1bfae:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		rdy_pin_idle(data);
   1bfb2:	f7ff ff7b 	bl	1beac <rdy_pin_idle.constprop.0>
}
   1bfb6:	2000      	movs	r0, #0
   1bfb8:	bd70      	pop	{r4, r5, r6, pc}
   1bfba:	bf00      	nop
   1bfbc:	00037f0e 	.word	0x00037f0e
   1bfc0:	00033bc2 	.word	0x00033bc2
   1bfc4:	00037ea7 	.word	0x00037ea7

0001bfc8 <int_driven_rx_feed>:
	return data->int_driven.rxlen - data->int_driven.rxrd;
}

static void int_driven_rx_feed(const struct device *dev,
			       struct lpuart_data *data)
{
   1bfc8:	b508      	push	{r3, lr}
	int err;

	data->int_driven.rxlen = 0;
   1bfca:	2300      	movs	r3, #0
	data->int_driven.rxrd = 0;
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1bfcc:	2280      	movs	r2, #128	; 0x80
	data->int_driven.rxrd = 0;
   1bfce:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   1bfd2:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   1bfd6:	f7ff ffcb 	bl	1bf70 <api_rx_buf_rsp>
			     sizeof(data->int_driven.rxbuf));
	__ASSERT_NO_MSG(err >= 0);
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	da0b      	bge.n	1bff6 <int_driven_rx_feed+0x2e>
   1bfde:	4906      	ldr	r1, [pc, #24]	; (1bff8 <int_driven_rx_feed+0x30>)
   1bfe0:	4806      	ldr	r0, [pc, #24]	; (1bffc <int_driven_rx_feed+0x34>)
   1bfe2:	f240 3303 	movw	r3, #771	; 0x303
   1bfe6:	4a06      	ldr	r2, [pc, #24]	; (1c000 <int_driven_rx_feed+0x38>)
   1bfe8:	f00e fee6 	bl	2adb8 <assert_print>
   1bfec:	f240 3103 	movw	r1, #771	; 0x303
   1bff0:	4803      	ldr	r0, [pc, #12]	; (1c000 <int_driven_rx_feed+0x38>)
   1bff2:	f00e feda 	bl	2adaa <assert_post_action>
}
   1bff6:	bd08      	pop	{r3, pc}
   1bff8:	000344f6 	.word	0x000344f6
   1bffc:	00033bc2 	.word	0x00033bc2
   1c000:	00037ea7 	.word	0x00037ea7

0001c004 <int_driven_evt_handler>:

static void int_driven_evt_handler(const struct device *lpuart,
				   struct uart_event *evt,
				   void *user_data)
{
   1c004:	460b      	mov	r3, r1
   1c006:	b510      	push	{r4, lr}
	struct lpuart_data *data = get_dev_data(lpuart);
	bool call_handler = false;

	switch (evt->type) {
   1c008:	781a      	ldrb	r2, [r3, #0]
	return dev->data;
   1c00a:	6901      	ldr	r1, [r0, #16]
	switch (evt->type) {
   1c00c:	2a06      	cmp	r2, #6
   1c00e:	d823      	bhi.n	1c058 <int_driven_evt_handler+0x54>
   1c010:	e8df f002 	tbb	[pc, r2]
   1c014:	230c2204 	.word	0x230c2204
   1c018:	2e22      	.short	0x2e22
   1c01a:	2b          	.byte	0x2b
   1c01b:	00          	.byte	0x00
	case UART_TX_DONE:
		data->int_driven.txlen = 0;
   1c01c:	2300      	movs	r3, #0
   1c01e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
	default:
		break;
	}

	if (call_handler) {
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1c022:	e9d1 3120 	ldrd	r3, r1, [r1, #128]	; 0x80
	}
}
   1c026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   1c02a:	4718      	bx	r3
		__ASSERT_NO_MSG(data->int_driven.rxlen == 0);
   1c02c:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
   1c030:	b15a      	cbz	r2, 1c04a <int_driven_evt_handler+0x46>
   1c032:	491a      	ldr	r1, [pc, #104]	; (1c09c <int_driven_evt_handler+0x98>)
   1c034:	f240 3313 	movw	r3, #787	; 0x313
   1c038:	4a19      	ldr	r2, [pc, #100]	; (1c0a0 <int_driven_evt_handler+0x9c>)
   1c03a:	481a      	ldr	r0, [pc, #104]	; (1c0a4 <int_driven_evt_handler+0xa0>)
   1c03c:	f00e febc 	bl	2adb8 <assert_print>
   1c040:	f240 3113 	movw	r1, #787	; 0x313
		__ASSERT_NO_MSG(err >= 0);
   1c044:	4816      	ldr	r0, [pc, #88]	; (1c0a0 <int_driven_evt_handler+0x9c>)
   1c046:	f00e feb0 	bl	2adaa <assert_post_action>
		data->int_driven.rxlen = evt->data.rx.len;
   1c04a:	68db      	ldr	r3, [r3, #12]
   1c04c:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
		call_handler = data->int_driven.rx_enabled;
   1c050:	f891 3195 	ldrb.w	r3, [r1, #405]	; 0x195
	if (call_handler) {
   1c054:	2b00      	cmp	r3, #0
   1c056:	d1e4      	bne.n	1c022 <int_driven_evt_handler+0x1e>
}
   1c058:	bd10      	pop	{r4, pc}
		if (int_driven_rd_available(data) == 0) {
   1c05a:	e9d1 2363 	ldrd	r2, r3, [r1, #396]	; 0x18c
   1c05e:	429a      	cmp	r2, r3
   1c060:	d1fa      	bne.n	1c058 <int_driven_evt_handler+0x54>
}
   1c062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			int_driven_rx_feed(lpuart, data);
   1c066:	f7ff bfaf 	b.w	1bfc8 <int_driven_rx_feed>
		call_handler = data->int_driven.err_enabled;
   1c06a:	f891 3196 	ldrb.w	r3, [r1, #406]	; 0x196
		break;
   1c06e:	e7f1      	b.n	1c054 <int_driven_evt_handler+0x50>
		data->int_driven.rxlen = 0;
   1c070:	2300      	movs	r3, #0
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1c072:	2280      	movs	r2, #128	; 0x80
		data->int_driven.rxrd = 0;
   1c074:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   1c078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c07c:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   1c080:	f7ff ff46 	bl	1bf10 <api_rx_enable>
		__ASSERT_NO_MSG(err >= 0);
   1c084:	2800      	cmp	r0, #0
   1c086:	dae7      	bge.n	1c058 <int_driven_evt_handler+0x54>
   1c088:	4907      	ldr	r1, [pc, #28]	; (1c0a8 <int_driven_evt_handler+0xa4>)
   1c08a:	f240 3327 	movw	r3, #807	; 0x327
   1c08e:	4a04      	ldr	r2, [pc, #16]	; (1c0a0 <int_driven_evt_handler+0x9c>)
   1c090:	4804      	ldr	r0, [pc, #16]	; (1c0a4 <int_driven_evt_handler+0xa0>)
   1c092:	f00e fe91 	bl	2adb8 <assert_print>
   1c096:	f240 3127 	movw	r1, #807	; 0x327
   1c09a:	e7d3      	b.n	1c044 <int_driven_evt_handler+0x40>
   1c09c:	00037f4a 	.word	0x00037f4a
   1c0a0:	00037ea7 	.word	0x00037ea7
   1c0a4:	00033bc2 	.word	0x00033bc2
   1c0a8:	000344f6 	.word	0x000344f6

0001c0ac <deactivate_rx>:
{
   1c0ac:	b5b0      	push	{r4, r5, r7, lr}
   1c0ae:	4604      	mov	r4, r0
   1c0b0:	af00      	add	r7, sp, #0
		     z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c0b2:	2000      	movs	r0, #0
   1c0b4:	f7fe fefc 	bl	1aeb0 <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1c0b8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1c0bc:	4605      	mov	r5, r0
   1c0be:	f7f2 f915 	bl	e2ec <onoff_cancel>

	if (rv == -EALREADY) {
   1c0c2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1c0c6:	d102      	bne.n	1c0ce <deactivate_rx+0x22>
		rv = onoff_release(mgr);
   1c0c8:	4628      	mov	r0, r5
   1c0ca:	f7f2 f8a5 	bl	e218 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   1c0ce:	2800      	cmp	r0, #0
   1c0d0:	da0b      	bge.n	1c0ea <deactivate_rx+0x3e>
   1c0d2:	491a      	ldr	r1, [pc, #104]	; (1c13c <deactivate_rx+0x90>)
   1c0d4:	481a      	ldr	r0, [pc, #104]	; (1c140 <deactivate_rx+0x94>)
   1c0d6:	f240 1345 	movw	r3, #325	; 0x145
   1c0da:	4a1a      	ldr	r2, [pc, #104]	; (1c144 <deactivate_rx+0x98>)
   1c0dc:	f00e fe6c 	bl	2adb8 <assert_print>
   1c0e0:	f240 1145 	movw	r1, #325	; 0x145
   1c0e4:	4817      	ldr	r0, [pc, #92]	; (1c144 <deactivate_rx+0x98>)
   1c0e6:	f00e fe60 	bl	2adaa <assert_post_action>
	data->rx_state = RX_TO_IDLE;
   1c0ea:	2504      	movs	r5, #4
	err = uart_rx_disable(data->uart);
   1c0ec:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_IDLE;
   1c0ee:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   1c0f2:	6883      	ldr	r3, [r0, #8]
   1c0f4:	695b      	ldr	r3, [r3, #20]
   1c0f6:	4798      	blx	r3
	if (err < 0 && err != -EFAULT) {
   1c0f8:	2800      	cmp	r0, #0
   1c0fa:	da12      	bge.n	1c122 <deactivate_rx+0x76>
   1c0fc:	f110 0f0e 	cmn.w	r0, #14
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   1c100:	466c      	mov	r4, sp
   1c102:	4b11      	ldr	r3, [pc, #68]	; (1c148 <deactivate_rx+0x9c>)
	if (err < 0 && err != -EFAULT) {
   1c104:	d00f      	beq.n	1c126 <deactivate_rx+0x7a>
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   1c106:	b088      	sub	sp, #32
   1c108:	466a      	mov	r2, sp
   1c10a:	4910      	ldr	r1, [pc, #64]	; (1c14c <deactivate_rx+0xa0>)
   1c10c:	61d0      	str	r0, [r2, #28]
   1c10e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c112:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c116:	f842 5f10 	str.w	r5, [r2, #16]!
		LOG_ERR("Rx disable failed.");
   1c11a:	480d      	ldr	r0, [pc, #52]	; (1c150 <deactivate_rx+0xa4>)
   1c11c:	f012 fdd6 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c120:	46a5      	mov	sp, r4
}
   1c122:	46bd      	mov	sp, r7
   1c124:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Rx disable failed.");
   1c126:	b088      	sub	sp, #32
   1c128:	466a      	mov	r2, sp
   1c12a:	490a      	ldr	r1, [pc, #40]	; (1c154 <deactivate_rx+0xa8>)
   1c12c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c130:	2303      	movs	r3, #3
   1c132:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c136:	f842 3f10 	str.w	r3, [r2, #16]!
   1c13a:	e7ee      	b.n	1c11a <deactivate_rx+0x6e>
   1c13c:	000344f6 	.word	0x000344f6
   1c140:	00033bc2 	.word	0x00033bc2
   1c144:	00037ea7 	.word	0x00037ea7
   1c148:	000381ae 	.word	0x000381ae
   1c14c:	00037f66 	.word	0x00037f66
   1c150:	00031c1c 	.word	0x00031c1c
   1c154:	00037f8a 	.word	0x00037f8a

0001c158 <rdy_pin_handler.part.0>:
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1c158:	b5b0      	push	{r4, r5, r7, lr}
		if (data->rx_state != RX_ACTIVE) {
   1c15a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1c15e:	4604      	mov	r4, r0
		if (data->rx_state != RX_ACTIVE) {
   1c160:	2b03      	cmp	r3, #3
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   1c162:	af00      	add	r7, sp, #0
		if (data->rx_state != RX_ACTIVE) {
   1c164:	d018      	beq.n	1c198 <rdy_pin_handler.part.0+0x40>
			LOG_WRN("RX: End detected at unexpected state (%d).", data->rx_state);
   1c166:	466d      	mov	r5, sp
   1c168:	b088      	sub	sp, #32
   1c16a:	466a      	mov	r2, sp
   1c16c:	490c      	ldr	r1, [pc, #48]	; (1c1a0 <rdy_pin_handler.part.0+0x48>)
   1c16e:	480d      	ldr	r0, [pc, #52]	; (1c1a4 <rdy_pin_handler.part.0+0x4c>)
   1c170:	6151      	str	r1, [r2, #20]
   1c172:	490d      	ldr	r1, [pc, #52]	; (1c1a8 <rdy_pin_handler.part.0+0x50>)
   1c174:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1c178:	2304      	movs	r3, #4
   1c17a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1c17e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c182:	f012 fda3 	bl	2eccc <z_log_msg_static_create.constprop.0>
			data->rx_state = RX_IDLE;
   1c186:	2301      	movs	r3, #1
   1c188:	46ad      	mov	sp, r5
			rdy_pin_idle(data);
   1c18a:	4620      	mov	r0, r4
			data->rx_state = RX_IDLE;
   1c18c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			rdy_pin_idle(data);
   1c190:	f7ff fe8c 	bl	1beac <rdy_pin_idle.constprop.0>
}
   1c194:	46bd      	mov	sp, r7
   1c196:	bdb0      	pop	{r4, r5, r7, pc}
		deactivate_rx(data);
   1c198:	f7ff ff88 	bl	1c0ac <deactivate_rx>
   1c19c:	e7fa      	b.n	1c194 <rdy_pin_handler.part.0+0x3c>
   1c19e:	bf00      	nop
   1c1a0:	00037fa1 	.word	0x00037fa1
   1c1a4:	00031c1c 	.word	0x00031c1c
   1c1a8:	000381d6 	.word	0x000381d6

0001c1ac <rdy_pin_handler>:
{
   1c1ac:	b538      	push	{r3, r4, r5, lr}
   1c1ae:	460d      	mov	r5, r1
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1c1b0:	6890      	ldr	r0, [r2, #8]
{
   1c1b2:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1c1b4:	f005 fdfe 	bl	21db4 <nrfx_gpiote_trigger_disable>
	if (trigger == NRFX_GPIOTE_TRIGGER_HIGH) {
   1c1b8:	2d05      	cmp	r5, #5
   1c1ba:	d12d      	bne.n	1c218 <rdy_pin_handler+0x6c>
		__ASSERT_NO_MSG(data->rx_state != RX_ACTIVE);
   1c1bc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1c1c0:	2b03      	cmp	r3, #3
   1c1c2:	d10b      	bne.n	1c1dc <rdy_pin_handler+0x30>
   1c1c4:	4917      	ldr	r1, [pc, #92]	; (1c224 <rdy_pin_handler+0x78>)
   1c1c6:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1c1ca:	4a17      	ldr	r2, [pc, #92]	; (1c228 <rdy_pin_handler+0x7c>)
   1c1cc:	4817      	ldr	r0, [pc, #92]	; (1c22c <rdy_pin_handler+0x80>)
   1c1ce:	f00e fdf3 	bl	2adb8 <assert_print>
   1c1d2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(err >= 0);
   1c1d6:	4814      	ldr	r0, [pc, #80]	; (1c228 <rdy_pin_handler+0x7c>)
   1c1d8:	f00e fde7 	bl	2adaa <assert_post_action>
		if (data->rx_state == RX_IDLE) {
   1c1dc:	2b01      	cmp	r3, #1
   1c1de:	d120      	bne.n	1c222 <rdy_pin_handler+0x76>
	data->rx_state = RX_PREPARE;
   1c1e0:	2302      	movs	r3, #2
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c1e2:	2000      	movs	r0, #0
	data->rx_state = RX_PREPARE;
   1c1e4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1c1e8:	f7fe fe62 	bl	1aeb0 <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1c1ec:	4b10      	ldr	r3, [pc, #64]	; (1c230 <rdy_pin_handler+0x84>)
   1c1ee:	2200      	movs	r2, #0
   1c1f0:	6763      	str	r3, [r4, #116]	; 0x74
   1c1f2:	2303      	movs	r3, #3
   1c1f4:	67e2      	str	r2, [r4, #124]	; 0x7c
   1c1f6:	67a3      	str	r3, [r4, #120]	; 0x78
	err = onoff_request(mgr, &data->rx_clk_cli);
   1c1f8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1c1fc:	f7f1 ff74 	bl	e0e8 <onoff_request>
	__ASSERT_NO_MSG(err >= 0);
   1c200:	2800      	cmp	r0, #0
   1c202:	da0e      	bge.n	1c222 <rdy_pin_handler+0x76>
   1c204:	490b      	ldr	r1, [pc, #44]	; (1c234 <rdy_pin_handler+0x88>)
   1c206:	f44f 73c1 	mov.w	r3, #386	; 0x182
   1c20a:	4a07      	ldr	r2, [pc, #28]	; (1c228 <rdy_pin_handler+0x7c>)
   1c20c:	4807      	ldr	r0, [pc, #28]	; (1c22c <rdy_pin_handler+0x80>)
   1c20e:	f00e fdd3 	bl	2adb8 <assert_print>
   1c212:	f44f 71c1 	mov.w	r1, #386	; 0x182
   1c216:	e7de      	b.n	1c1d6 <rdy_pin_handler+0x2a>
   1c218:	4620      	mov	r0, r4
}
   1c21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c21e:	f7ff bf9b 	b.w	1c158 <rdy_pin_handler.part.0>
   1c222:	bd38      	pop	{r3, r4, r5, pc}
   1c224:	00037fd0 	.word	0x00037fd0
   1c228:	00037ea7 	.word	0x00037ea7
   1c22c:	00033bc2 	.word	0x00033bc2
   1c230:	0001c5c9 	.word	0x0001c5c9
   1c234:	000344f6 	.word	0x000344f6

0001c238 <api_tx>:
{
   1c238:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   1c23a:	6905      	ldr	r5, [r0, #16]
{
   1c23c:	b085      	sub	sp, #20
   1c23e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1c242:	e8d0 4fef 	ldaex	r4, [r0]
   1c246:	2c00      	cmp	r4, #0
   1c248:	d103      	bne.n	1c252 <api_tx+0x1a>
   1c24a:	e8c0 1fe6 	stlex	r6, r1, [r0]
   1c24e:	2e00      	cmp	r6, #0
   1c250:	d1f7      	bne.n	1c242 <api_tx+0xa>
	if (!atomic_ptr_cas((atomic_ptr_t *)&data->tx_buf, NULL, (void *)buf)) {
   1c252:	d131      	bne.n	1c2b8 <api_tx+0x80>
	data->tx_len = len;
   1c254:	652a      	str	r2, [r5, #80]	; 0x50
	k_timer_start(&data->tx_timer,
   1c256:	1c5a      	adds	r2, r3, #1
   1c258:	f105 0610 	add.w	r6, r5, #16
   1c25c:	d028      	beq.n	1c2b0 <api_tx+0x78>
   1c25e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1c262:	2100      	movs	r1, #0
   1c264:	4816      	ldr	r0, [pc, #88]	; (1c2c0 <api_tx+0x88>)
		      timeout == SYS_FOREVER_US ? K_FOREVER : K_USEC(timeout),
   1c266:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   1c26a:	4a16      	ldr	r2, [pc, #88]	; (1c2c4 <api_tx+0x8c>)
   1c26c:	2300      	movs	r3, #0
   1c26e:	fbc4 0107 	smlal	r0, r1, r4, r7
   1c272:	f7ec fe0f 	bl	8e94 <__aeabi_uldivmod>
   1c276:	4602      	mov	r2, r0
   1c278:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1c27a:	2100      	movs	r1, #0
   1c27c:	2000      	movs	r0, #0
   1c27e:	e9cd 0100 	strd	r0, r1, [sp]
   1c282:	4630      	mov	r0, r6
   1c284:	f00b faae 	bl	277e4 <z_impl_k_timer_start>
	nrf_gpio_reconfigure(data->req_pin, NULL, NULL, &pull, NULL, NULL);
   1c288:	686c      	ldr	r4, [r5, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c28a:	a803      	add	r0, sp, #12
   1c28c:	9403      	str	r4, [sp, #12]
   1c28e:	f7ff fded 	bl	1be6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c292:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1c296:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_enable(data->req_pin, true);
   1c29a:	2101      	movs	r1, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c29c:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   1c2a0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   1c2a4:	6868      	ldr	r0, [r5, #4]
   1c2a6:	f005 fd1b 	bl	21ce0 <nrfx_gpiote_trigger_enable>
	return 0;
   1c2aa:	2000      	movs	r0, #0
}
   1c2ac:	b005      	add	sp, #20
   1c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_timer_start(&data->tx_timer,
   1c2b0:	f04f 32ff 	mov.w	r2, #4294967295
   1c2b4:	4613      	mov	r3, r2
   1c2b6:	e7e0      	b.n	1c27a <api_tx+0x42>
		return -EBUSY;
   1c2b8:	f06f 000f 	mvn.w	r0, #15
   1c2bc:	e7f6      	b.n	1c2ac <api_tx+0x74>
   1c2be:	bf00      	nop
   1c2c0:	000f423f 	.word	0x000f423f
   1c2c4:	000f4240 	.word	0x000f4240

0001c2c8 <api_fifo_fill>:
			 int size)
{
	struct lpuart_data *data = get_dev_data(dev);
	int err;

	size = MIN(size, sizeof(data->int_driven.txbuf));
   1c2c8:	2a80      	cmp	r2, #128	; 0x80
   1c2ca:	bf28      	it	cs
   1c2cc:	2280      	movcs	r2, #128	; 0x80
{
   1c2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2d0:	4606      	mov	r6, r0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   1c2d2:	4614      	mov	r4, r2
	return dev->data;
   1c2d4:	6905      	ldr	r5, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c2d6:	f505 7384 	add.w	r3, r5, #264	; 0x108
   1c2da:	e8d3 2fef 	ldaex	r2, [r3]
   1c2de:	2a00      	cmp	r2, #0
   1c2e0:	d103      	bne.n	1c2ea <api_fifo_fill+0x22>
   1c2e2:	e8c3 4fe0 	stlex	r0, r4, [r3]
   1c2e6:	2800      	cmp	r0, #0
   1c2e8:	d1f7      	bne.n	1c2da <api_fifo_fill+0x12>
	if (!atomic_cas((atomic_t *)&data->int_driven.txlen, 0, size)) {
   1c2ea:	d113      	bne.n	1c314 <api_fifo_fill+0x4c>
		return 0;
	}

	memcpy(data->int_driven.txbuf, tx_data, size);
   1c2ec:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1c2f0:	4622      	mov	r2, r4
   1c2f2:	4638      	mov	r0, r7
   1c2f4:	f014 faa5 	bl	30842 <memcpy>

	err = api_tx(dev, data->int_driven.txbuf,
   1c2f8:	4639      	mov	r1, r7
   1c2fa:	4630      	mov	r0, r6
   1c2fc:	4b06      	ldr	r3, [pc, #24]	; (1c318 <api_fifo_fill+0x50>)
   1c2fe:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
   1c302:	f7ff ff99 	bl	1c238 <api_tx>
		     data->int_driven.txlen,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
   1c306:	2800      	cmp	r0, #0
   1c308:	db01      	blt.n	1c30e <api_fifo_fill+0x46>
	size = MIN(size, sizeof(data->int_driven.txbuf));
   1c30a:	4620      	mov	r0, r4

		return 0;
	}

	return size;
}
   1c30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven.txlen = 0;
   1c30e:	2300      	movs	r3, #0
   1c310:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
		return 0;
   1c314:	2000      	movs	r0, #0
   1c316:	e7f9      	b.n	1c30c <api_fifo_fill+0x44>
   1c318:	000f4240 	.word	0x000f4240

0001c31c <api_poll_out>:
	return -ENOTSUP;
#endif
}

static void api_poll_out(const struct device *dev, unsigned char out_char)
{
   1c31c:	b570      	push	{r4, r5, r6, lr}
   1c31e:	4605      	mov	r5, r0
   1c320:	460e      	mov	r6, r1
	return dev->data;
   1c322:	6904      	ldr	r4, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);
	bool thread_ctx = !k_is_in_isr() && !k_is_pre_kernel();
   1c324:	f014 f85b 	bl	303de <k_is_in_isr>
   1c328:	b910      	cbnz	r0, 1c330 <api_poll_out+0x14>
	return !z_sys_post_kernel;
   1c32a:	4b12      	ldr	r3, [pc, #72]	; (1c374 <api_poll_out+0x58>)
   1c32c:	781b      	ldrb	r3, [r3, #0]
   1c32e:	b98b      	cbnz	r3, 1c354 <api_poll_out+0x38>
	if (thread_ctx) {
		/* in thread context pend until tx is in idle */
		while (data->tx_buf) {
			k_msleep(1);
		}
	} else if (data->tx_buf) {
   1c330:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c332:	b953      	cbnz	r3, 1c34a <api_poll_out+0x2e>
		return;
	}

	if (!atomic_cas(&data->txbyte, -1, out_char)) {
   1c334:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1c338:	e8d1 3fef 	ldaex	r3, [r1]
   1c33c:	3301      	adds	r3, #1
   1c33e:	d103      	bne.n	1c348 <api_poll_out+0x2c>
   1c340:	e8c1 6fe2 	stlex	r2, r6, [r1]
   1c344:	2a00      	cmp	r2, #0
   1c346:	d1f7      	bne.n	1c338 <api_poll_out+0x1c>
   1c348:	d008      	beq.n	1c35c <api_poll_out+0x40>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
		data->txbyte = -1;
	}
}
   1c34a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   1c34c:	2021      	movs	r0, #33	; 0x21
   1c34e:	2100      	movs	r1, #0
   1c350:	f00a fd70 	bl	26e34 <z_impl_k_sleep>
		while (data->tx_buf) {
   1c354:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c356:	2b00      	cmp	r3, #0
   1c358:	d1f8      	bne.n	1c34c <api_poll_out+0x30>
   1c35a:	e7eb      	b.n	1c334 <api_poll_out+0x18>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
   1c35c:	4b06      	ldr	r3, [pc, #24]	; (1c378 <api_poll_out+0x5c>)
   1c35e:	2201      	movs	r2, #1
   1c360:	4628      	mov	r0, r5
   1c362:	f7ff ff69 	bl	1c238 <api_tx>
	if (err < 0) {
   1c366:	2800      	cmp	r0, #0
		data->txbyte = -1;
   1c368:	bfbc      	itt	lt
   1c36a:	f04f 33ff 	movlt.w	r3, #4294967295
   1c36e:	64a3      	strlt	r3, [r4, #72]	; 0x48
   1c370:	e7eb      	b.n	1c34a <api_poll_out+0x2e>
   1c372:	bf00      	nop
   1c374:	2001048b 	.word	0x2001048b
   1c378:	000f4240 	.word	0x000f4240

0001c37c <uart_callback>:
{
   1c37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type) {
   1c380:	780b      	ldrb	r3, [r1, #0]
{
   1c382:	460d      	mov	r5, r1
   1c384:	4616      	mov	r6, r2
	return dev->data;
   1c386:	6914      	ldr	r4, [r2, #16]
{
   1c388:	af00      	add	r7, sp, #0
	switch (evt->type) {
   1c38a:	2b06      	cmp	r3, #6
   1c38c:	d811      	bhi.n	1c3b2 <uart_callback+0x36>
   1c38e:	e8df f003 	tbb	[pc, r3]
   1c392:	1604      	.short	0x1604
   1c394:	371f1b13 	.word	0x371f1b13
   1c398:	16          	.byte	0x16
   1c399:	00          	.byte	0x00
		const uint8_t *txbuf = evt->data.tx.buf;
   1c39a:	f8d1 8004 	ldr.w	r8, [r1, #4]
		tx_complete(data);
   1c39e:	4620      	mov	r0, r4
   1c3a0:	f012 fcac 	bl	2ecfc <tx_complete>
		if (txbuf == (void *)&data->txbyte) {
   1c3a4:	f104 0348 	add.w	r3, r4, #72	; 0x48
   1c3a8:	4598      	cmp	r8, r3
   1c3aa:	d108      	bne.n	1c3be <uart_callback+0x42>
			data->txbyte = -1;
   1c3ac:	f04f 33ff 	mov.w	r3, #4294967295
   1c3b0:	64a3      	str	r3, [r4, #72]	; 0x48
}
   1c3b2:	46bd      	mov	sp, r7
   1c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->rx_got_data = true;
   1c3b8:	2301      	movs	r3, #1
   1c3ba:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
		user_callback(dev, evt);
   1c3be:	4629      	mov	r1, r5
   1c3c0:	4630      	mov	r0, r6
   1c3c2:	f012 fbd6 	bl	2eb72 <user_callback>
		break;
   1c3c6:	e7f4      	b.n	1c3b2 <uart_callback+0x36>
		if (data->rx_len < CONFIG_NRF_SW_LPUART_MAX_PACKET_SIZE) {
   1c3c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c3ca:	2b7f      	cmp	r3, #127	; 0x7f
   1c3cc:	d8f1      	bhi.n	1c3b2 <uart_callback+0x36>
   1c3ce:	e7f6      	b.n	1c3be <uart_callback+0x42>
		if (!data->rx_got_data) {
   1c3d0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1c3d4:	2b00      	cmp	r3, #0
   1c3d6:	d1f2      	bne.n	1c3be <uart_callback+0x42>
			LOG_ERR("Empty receiver state:%d", data->rx_state);
   1c3d8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1c3dc:	466c      	mov	r4, sp
   1c3de:	b088      	sub	sp, #32
   1c3e0:	466a      	mov	r2, sp
   1c3e2:	491b      	ldr	r1, [pc, #108]	; (1c450 <uart_callback+0xd4>)
   1c3e4:	481b      	ldr	r0, [pc, #108]	; (1c454 <uart_callback+0xd8>)
   1c3e6:	6151      	str	r1, [r2, #20]
   1c3e8:	491b      	ldr	r1, [pc, #108]	; (1c458 <uart_callback+0xdc>)
   1c3ea:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1c3ee:	2304      	movs	r3, #4
   1c3f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c3f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c3f8:	f012 fc68 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c3fc:	46a5      	mov	sp, r4
   1c3fe:	e7de      	b.n	1c3be <uart_callback+0x42>
		__ASSERT_NO_MSG((data->rx_state != RX_IDLE) &&
   1c400:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1c404:	2b01      	cmp	r3, #1
   1c406:	d80b      	bhi.n	1c420 <uart_callback+0xa4>
   1c408:	4914      	ldr	r1, [pc, #80]	; (1c45c <uart_callback+0xe0>)
   1c40a:	4815      	ldr	r0, [pc, #84]	; (1c460 <uart_callback+0xe4>)
   1c40c:	f240 232f 	movw	r3, #559	; 0x22f
   1c410:	4a14      	ldr	r2, [pc, #80]	; (1c464 <uart_callback+0xe8>)
   1c412:	f00e fcd1 	bl	2adb8 <assert_print>
   1c416:	f240 212f 	movw	r1, #559	; 0x22f
   1c41a:	4812      	ldr	r0, [pc, #72]	; (1c464 <uart_callback+0xe8>)
   1c41c:	f00e fcc5 	bl	2adaa <assert_post_action>
		if (data->rx_state == RX_TO_IDLE) {
   1c420:	2b04      	cmp	r3, #4
   1c422:	d10f      	bne.n	1c444 <uart_callback+0xc8>
			if (data->rx_got_data) {
   1c424:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1c428:	b12b      	cbz	r3, 1c436 <uart_callback+0xba>
				data->rx_state = RX_BLOCKED;
   1c42a:	2305      	movs	r3, #5
   1c42c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				evt->type = UART_RX_BUF_REQUEST;
   1c430:	2303      	movs	r3, #3
   1c432:	700b      	strb	r3, [r1, #0]
		if (call_cb) {
   1c434:	e7c3      	b.n	1c3be <uart_callback+0x42>
				data->rx_state = RX_IDLE;
   1c436:	2301      	movs	r3, #1
				rdy_pin_idle(data);
   1c438:	4620      	mov	r0, r4
				data->rx_state = RX_IDLE;
   1c43a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				rdy_pin_idle(data);
   1c43e:	f7ff fd35 	bl	1beac <rdy_pin_idle.constprop.0>
		if (call_cb) {
   1c442:	e7b6      	b.n	1c3b2 <uart_callback+0x36>
			data->rx_buf = NULL;
   1c444:	2300      	movs	r3, #0
   1c446:	65a3      	str	r3, [r4, #88]	; 0x58
			data->rx_state = RX_OFF;
   1c448:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		if (call_cb) {
   1c44c:	e7b7      	b.n	1c3be <uart_callback+0x42>
   1c44e:	bf00      	nop
   1c450:	00037fec 	.word	0x00037fec
   1c454:	00031c1c 	.word	0x00031c1c
   1c458:	0003820e 	.word	0x0003820e
   1c45c:	00038008 	.word	0x00038008
   1c460:	00033bc2 	.word	0x00033bc2
   1c464:	00037ea7 	.word	0x00037ea7

0001c468 <tx_timeout>:
{
   1c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c46c:	b086      	sub	sp, #24
   1c46e:	af00      	add	r7, sp, #0
	return timer->user_data;
   1c470:	6b45      	ldr	r5, [r0, #52]	; 0x34
	LOG_WRN("Tx timeout");
   1c472:	46e8      	mov	r8, sp
	return dev->data;
   1c474:	692c      	ldr	r4, [r5, #16]
	LOG_WRN("Tx timeout");
   1c476:	b088      	sub	sp, #32
   1c478:	466a      	mov	r2, sp
	const uint8_t *txbuf = data->tx_buf;
   1c47a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
	LOG_WRN("Tx timeout");
   1c47c:	4b23      	ldr	r3, [pc, #140]	; (1c50c <tx_timeout+0xa4>)
   1c47e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c482:	6153      	str	r3, [r2, #20]
   1c484:	4b22      	ldr	r3, [pc, #136]	; (1c510 <tx_timeout+0xa8>)
   1c486:	4823      	ldr	r0, [pc, #140]	; (1c514 <tx_timeout+0xac>)
   1c488:	6193      	str	r3, [r2, #24]
   1c48a:	2303      	movs	r3, #3
   1c48c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c490:	f012 fc1c 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c494:	46c5      	mov	sp, r8
	if (data->tx_active) {
   1c496:	f894 8054 	ldrb.w	r8, [r4, #84]	; 0x54
   1c49a:	f1b8 0f00 	cmp.w	r8, #0
   1c49e:	d019      	beq.n	1c4d4 <tx_timeout+0x6c>
		err = uart_tx_abort(data->uart);
   1c4a0:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   1c4a2:	6883      	ldr	r3, [r0, #8]
   1c4a4:	689b      	ldr	r3, [r3, #8]
   1c4a6:	4798      	blx	r3
		if (err == -EFAULT) {
   1c4a8:	f110 0f0e 	cmn.w	r0, #14
   1c4ac:	4604      	mov	r4, r0
   1c4ae:	d01b      	beq.n	1c4e8 <tx_timeout+0x80>
		} else if (err < 0) {
   1c4b0:	2800      	cmp	r0, #0
   1c4b2:	da19      	bge.n	1c4e8 <tx_timeout+0x80>
			__ASSERT(0, "Unexpected tx_abort error:%d", err);
   1c4b4:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1c4b8:	4a17      	ldr	r2, [pc, #92]	; (1c518 <tx_timeout+0xb0>)
   1c4ba:	4918      	ldr	r1, [pc, #96]	; (1c51c <tx_timeout+0xb4>)
   1c4bc:	4818      	ldr	r0, [pc, #96]	; (1c520 <tx_timeout+0xb8>)
   1c4be:	f00e fc7b 	bl	2adb8 <assert_print>
   1c4c2:	4621      	mov	r1, r4
   1c4c4:	4817      	ldr	r0, [pc, #92]	; (1c524 <tx_timeout+0xbc>)
   1c4c6:	f00e fc77 	bl	2adb8 <assert_print>
   1c4ca:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1c4ce:	4812      	ldr	r0, [pc, #72]	; (1c518 <tx_timeout+0xb0>)
   1c4d0:	f00e fc6b 	bl	2adaa <assert_post_action>
	tx_complete(data);
   1c4d4:	4620      	mov	r0, r4
   1c4d6:	f012 fc11 	bl	2ecfc <tx_complete>
	if (txbuf == (void *)&data->txbyte) {
   1c4da:	f104 0348 	add.w	r3, r4, #72	; 0x48
   1c4de:	429e      	cmp	r6, r3
   1c4e0:	d106      	bne.n	1c4f0 <tx_timeout+0x88>
		data->txbyte = -1;
   1c4e2:	f04f 33ff 	mov.w	r3, #4294967295
   1c4e6:	64a3      	str	r3, [r4, #72]	; 0x48
}
   1c4e8:	3718      	adds	r7, #24
   1c4ea:	46bd      	mov	sp, r7
   1c4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct uart_event evt = {
   1c4f0:	4641      	mov	r1, r8
   1c4f2:	2214      	movs	r2, #20
   1c4f4:	1d38      	adds	r0, r7, #4
   1c4f6:	f014 f9c4 	bl	30882 <memset>
   1c4fa:	2301      	movs	r3, #1
		user_callback(dev, &evt);
   1c4fc:	4628      	mov	r0, r5
   1c4fe:	1d39      	adds	r1, r7, #4
		struct uart_event evt = {
   1c500:	713b      	strb	r3, [r7, #4]
   1c502:	60be      	str	r6, [r7, #8]
		user_callback(dev, &evt);
   1c504:	f012 fb35 	bl	2eb72 <user_callback>
   1c508:	e7ee      	b.n	1c4e8 <tx_timeout+0x80>
   1c50a:	bf00      	nop
   1c50c:	00038042 	.word	0x00038042
   1c510:	00038203 	.word	0x00038203
   1c514:	00031c1c 	.word	0x00031c1c
   1c518:	00037ea7 	.word	0x00037ea7
   1c51c:	000386dc 	.word	0x000386dc
   1c520:	00033bc2 	.word	0x00033bc2
   1c524:	00038051 	.word	0x00038051

0001c528 <req_pin_handler>:
{
   1c528:	b5b0      	push	{r4, r5, r7, lr}
	if (data->tx_buf == NULL) {
   1c52a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
{
   1c52c:	4614      	mov	r4, r2
   1c52e:	af00      	add	r7, sp, #0
	if (data->tx_buf == NULL) {
   1c530:	b9a3      	cbnz	r3, 1c55c <req_pin_handler+0x34>
		LOG_WRN("TX: request confirmed but no data to send");
   1c532:	466d      	mov	r5, sp
   1c534:	b088      	sub	sp, #32
   1c536:	466a      	mov	r2, sp
   1c538:	4b1f      	ldr	r3, [pc, #124]	; (1c5b8 <req_pin_handler+0x90>)
   1c53a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c53e:	6153      	str	r3, [r2, #20]
   1c540:	4b1e      	ldr	r3, [pc, #120]	; (1c5bc <req_pin_handler+0x94>)
   1c542:	6193      	str	r3, [r2, #24]
   1c544:	2303      	movs	r3, #3
   1c546:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("TX: Not started (error: %d)", err);
   1c54a:	481d      	ldr	r0, [pc, #116]	; (1c5c0 <req_pin_handler+0x98>)
   1c54c:	f012 fbbe 	bl	2eccc <z_log_msg_static_create.constprop.0>
		tx_complete(data);
   1c550:	4620      	mov	r0, r4
   1c552:	46ad      	mov	sp, r5
   1c554:	f012 fbd2 	bl	2ecfc <tx_complete>
}
   1c558:	46bd      	mov	sp, r7
   1c55a:	bdb0      	pop	{r4, r5, r7, pc}
	req_pin_set(data);
   1c55c:	4610      	mov	r0, r2
   1c55e:	f012 fbb8 	bl	2ecd2 <req_pin_set>
	z_impl_k_timer_stop(timer);
   1c562:	f104 0010 	add.w	r0, r4, #16
   1c566:	f014 f871 	bl	3064c <z_impl_k_timer_stop>
	__asm__ volatile(
   1c56a:	f04f 0220 	mov.w	r2, #32
   1c56e:	f3ef 8311 	mrs	r3, BASEPRI
   1c572:	f382 8812 	msr	BASEPRI_MAX, r2
   1c576:	f3bf 8f6f 	isb	sy
	data->tx_active = true;
   1c57a:	2201      	movs	r2, #1
   1c57c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
	len = data->tx_len;
   1c580:	e9d4 1213 	ldrd	r1, r2, [r4, #76]	; 0x4c
	__asm__ volatile(
   1c584:	f383 8811 	msr	BASEPRI, r3
   1c588:	f3bf 8f6f 	isb	sy
	err = uart_tx(data->uart, buf, len, 0);
   1c58c:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
   1c58e:	6883      	ldr	r3, [r0, #8]
   1c590:	685d      	ldr	r5, [r3, #4]
   1c592:	2300      	movs	r3, #0
   1c594:	47a8      	blx	r5
	if (err < 0) {
   1c596:	2800      	cmp	r0, #0
   1c598:	dade      	bge.n	1c558 <req_pin_handler+0x30>
		LOG_ERR("TX: Not started (error: %d)", err);
   1c59a:	466d      	mov	r5, sp
   1c59c:	b088      	sub	sp, #32
   1c59e:	466a      	mov	r2, sp
   1c5a0:	4b08      	ldr	r3, [pc, #32]	; (1c5c4 <req_pin_handler+0x9c>)
   1c5a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c5a6:	6153      	str	r3, [r2, #20]
   1c5a8:	4b04      	ldr	r3, [pc, #16]	; (1c5bc <req_pin_handler+0x94>)
   1c5aa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c5ae:	2304      	movs	r3, #4
   1c5b0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5b4:	e7c9      	b.n	1c54a <req_pin_handler+0x22>
   1c5b6:	bf00      	nop
   1c5b8:	00038070 	.word	0x00038070
   1c5bc:	000381f3 	.word	0x000381f3
   1c5c0:	00031c1c 	.word	0x00031c1c
   1c5c4:	0003809e 	.word	0x0003809e

0001c5c8 <rx_hfclk_callback>:
{
   1c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(res >= 0);
   1c5cc:	2b00      	cmp	r3, #0
{
   1c5ce:	b084      	sub	sp, #16
   1c5d0:	460c      	mov	r4, r1
   1c5d2:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(res >= 0);
   1c5d4:	da0b      	bge.n	1c5ee <rx_hfclk_callback+0x26>
   1c5d6:	4968      	ldr	r1, [pc, #416]	; (1c778 <rx_hfclk_callback+0x1b0>)
   1c5d8:	f240 1375 	movw	r3, #373	; 0x175
   1c5dc:	4a67      	ldr	r2, [pc, #412]	; (1c77c <rx_hfclk_callback+0x1b4>)
   1c5de:	4868      	ldr	r0, [pc, #416]	; (1c780 <rx_hfclk_callback+0x1b8>)
   1c5e0:	f00e fbea 	bl	2adb8 <assert_print>
   1c5e4:	f240 1175 	movw	r1, #373	; 0x175
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1c5e8:	4864      	ldr	r0, [pc, #400]	; (1c77c <rx_hfclk_callback+0x1b4>)
   1c5ea:	f00e fbde 	bl	2adaa <assert_post_action>
	if (data->rx_buf == NULL) {
   1c5ee:	f851 1c18 	ldr.w	r1, [r1, #-24]
   1c5f2:	b999      	cbnz	r1, 1c61c <rx_hfclk_callback+0x54>
		LOG_ERR("RX: Request before enabling RX");
   1c5f4:	466c      	mov	r4, sp
   1c5f6:	b088      	sub	sp, #32
   1c5f8:	466a      	mov	r2, sp
   1c5fa:	4b62      	ldr	r3, [pc, #392]	; (1c784 <rx_hfclk_callback+0x1bc>)
   1c5fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c600:	6153      	str	r3, [r2, #20]
   1c602:	4b61      	ldr	r3, [pc, #388]	; (1c788 <rx_hfclk_callback+0x1c0>)
   1c604:	4861      	ldr	r0, [pc, #388]	; (1c78c <rx_hfclk_callback+0x1c4>)
   1c606:	6193      	str	r3, [r2, #24]
   1c608:	2303      	movs	r3, #3
   1c60a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c60e:	f012 fb5d 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c612:	46a5      	mov	sp, r4
}
   1c614:	3710      	adds	r7, #16
   1c616:	46bd      	mov	sp, r7
   1c618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	data->rx_got_data = false;
   1c61c:	2300      	movs	r3, #0
	data->rx_state = RX_ACTIVE;
   1c61e:	2603      	movs	r6, #3
	data->rx_got_data = false;
   1c620:	f804 3c1b 	strb.w	r3, [r4, #-27]
	err = uart_rx_enable(data->uart, data->rx_buf,
   1c624:	f854 0c70 	ldr.w	r0, [r4, #-112]
	data->rx_state = RX_ACTIVE;
   1c628:	f804 6c04 	strb.w	r6, [r4, #-4]
	err = uart_rx_enable(data->uart, data->rx_buf,
   1c62c:	e954 2305 	ldrd	r2, r3, [r4, #-20]
	return api->rx_enable(dev, buf, len, timeout);
   1c630:	6885      	ldr	r5, [r0, #8]
   1c632:	68ed      	ldr	r5, [r5, #12]
   1c634:	47a8      	blx	r5
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   1c636:	4605      	mov	r5, r0
   1c638:	b168      	cbz	r0, 1c656 <rx_hfclk_callback+0x8e>
   1c63a:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1c63e:	4a4f      	ldr	r2, [pc, #316]	; (1c77c <rx_hfclk_callback+0x1b4>)
   1c640:	4953      	ldr	r1, [pc, #332]	; (1c790 <rx_hfclk_callback+0x1c8>)
   1c642:	484f      	ldr	r0, [pc, #316]	; (1c780 <rx_hfclk_callback+0x1b8>)
   1c644:	f00e fbb8 	bl	2adb8 <assert_print>
   1c648:	4629      	mov	r1, r5
   1c64a:	4852      	ldr	r0, [pc, #328]	; (1c794 <rx_hfclk_callback+0x1cc>)
   1c64c:	f00e fbb4 	bl	2adb8 <assert_print>
   1c650:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1c654:	e7c8      	b.n	1c5e8 <rx_hfclk_callback+0x20>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c656:	2302      	movs	r3, #2
	nrf_gpio_reconfigure(data->rdy_pin, &dir_out, NULL, NULL, NULL, NULL);
   1c658:	f854 9c68 	ldr.w	r9, [r4, #-104]
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c65c:	723b      	strb	r3, [r7, #8]
   1c65e:	f8c7 9004 	str.w	r9, [r7, #4]
		.p_in_channel = &data->rdy_ch
   1c662:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c666:	1d38      	adds	r0, r7, #4
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c668:	60fb      	str	r3, [r7, #12]
   1c66a:	f7ff fbff 	bl	1be6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c66e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   1c672:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1c676:	4629      	mov	r1, r5
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c678:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1c67c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   1c680:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1c684:	462b      	mov	r3, r5
   1c686:	f107 0208 	add.w	r2, r7, #8
   1c68a:	f005 f995 	bl	219b8 <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1c68e:	4b42      	ldr	r3, [pc, #264]	; (1c798 <rx_hfclk_callback+0x1d0>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   1c690:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1c692:	4298      	cmp	r0, r3
		.p_in_channel = &data->rdy_ch
   1c694:	f1a4 0870 	sub.w	r8, r4, #112	; 0x70
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   1c698:	d00e      	beq.n	1c6b8 <rx_hfclk_callback+0xf0>
   1c69a:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1c69e:	4a37      	ldr	r2, [pc, #220]	; (1c77c <rx_hfclk_callback+0x1b4>)
   1c6a0:	493e      	ldr	r1, [pc, #248]	; (1c79c <rx_hfclk_callback+0x1d4>)
   1c6a2:	4837      	ldr	r0, [pc, #220]	; (1c780 <rx_hfclk_callback+0x1b8>)
   1c6a4:	f00e fb88 	bl	2adb8 <assert_print>
   1c6a8:	4629      	mov	r1, r5
   1c6aa:	462a      	mov	r2, r5
   1c6ac:	483c      	ldr	r0, [pc, #240]	; (1c7a0 <rx_hfclk_callback+0x1d8>)
   1c6ae:	f00e fb83 	bl	2adb8 <assert_print>
   1c6b2:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1c6b6:	e797      	b.n	1c5e8 <rx_hfclk_callback+0x20>
	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   1c6b8:	2101      	movs	r1, #1
   1c6ba:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1c6be:	f005 fb0f 	bl	21ce0 <nrfx_gpiote_trigger_enable>
	__asm__ volatile(
   1c6c2:	f04f 0320 	mov.w	r3, #32
   1c6c6:	f3ef 8911 	mrs	r9, BASEPRI
   1c6ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6ce:	f3bf 8f6f 	isb	sy
	nrf_gpiote_event_t event = nrf_gpiote_in_event_get(data->rdy_ch);
   1c6d2:	f814 5c64 	ldrb.w	r5, [r4, #-100]
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1c6d6:	2d07      	cmp	r5, #7
   1c6d8:	d90a      	bls.n	1c6f0 <rx_hfclk_callback+0x128>
   1c6da:	4932      	ldr	r1, [pc, #200]	; (1c7a4 <rx_hfclk_callback+0x1dc>)
   1c6dc:	4828      	ldr	r0, [pc, #160]	; (1c780 <rx_hfclk_callback+0x1b8>)
   1c6de:	f44f 7323 	mov.w	r3, #652	; 0x28c
   1c6e2:	4a31      	ldr	r2, [pc, #196]	; (1c7a8 <rx_hfclk_callback+0x1e0>)
   1c6e4:	f00e fb68 	bl	2adb8 <assert_print>
   1c6e8:	f44f 7123 	mov.w	r1, #652	; 0x28c
   1c6ec:	482e      	ldr	r0, [pc, #184]	; (1c7a8 <rx_hfclk_callback+0x1e0>)
   1c6ee:	e77c      	b.n	1c5ea <rx_hfclk_callback+0x22>
	nrf_gpio_reconfigure(data->rdy_pin, &dir_in, NULL, NULL, NULL, NULL);
   1c6f0:	f854 ac68 	ldr.w	sl, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c6f4:	1d38      	adds	r0, r7, #4
   1c6f6:	f8c7 a004 	str.w	sl, [r7, #4]
   1c6fa:	f7ff fbb7 	bl	1be6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c6fe:	eb00 008a 	add.w	r0, r0, sl, lsl #2
   1c702:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   1c706:	f023 0301 	bic.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1c70a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	z_impl_k_busy_wait(usec_to_wait);
   1c70e:	2001      	movs	r0, #1
   1c710:	f013 ff6a 	bl	305e8 <z_impl_k_busy_wait>
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   1c714:	f854 ac68 	ldr.w	sl, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c718:	1d38      	adds	r0, r7, #4
   1c71a:	f8c7 a004 	str.w	sl, [r7, #4]
   1c71e:	f7ff fba5 	bl	1be6c <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   1c722:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c724:	fa23 f30a 	lsr.w	r3, r3, sl
   1c728:	07db      	lsls	r3, r3, #31
   1c72a:	d504      	bpl.n	1c736 <rx_hfclk_callback+0x16e>
	__asm__ volatile(
   1c72c:	f389 8811 	msr	BASEPRI, r9
   1c730:	f3bf 8f6f 	isb	sy
}
   1c734:	e76e      	b.n	1c614 <rx_hfclk_callback+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c736:	4b1d      	ldr	r3, [pc, #116]	; (1c7ac <rx_hfclk_callback+0x1e4>)
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1c738:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c73a:	595b      	ldr	r3, [r3, r5]
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   1c73c:	2b00      	cmp	r3, #0
   1c73e:	d1f5      	bne.n	1c72c <rx_hfclk_callback+0x164>
		LOG_WRN("req pin low when expected high");
   1c740:	466d      	mov	r5, sp
   1c742:	b088      	sub	sp, #32
   1c744:	466a      	mov	r2, sp
   1c746:	4b1a      	ldr	r3, [pc, #104]	; (1c7b0 <rx_hfclk_callback+0x1e8>)
   1c748:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c74c:	6153      	str	r3, [r2, #20]
   1c74e:	4b19      	ldr	r3, [pc, #100]	; (1c7b4 <rx_hfclk_callback+0x1ec>)
   1c750:	480e      	ldr	r0, [pc, #56]	; (1c78c <rx_hfclk_callback+0x1c4>)
   1c752:	6193      	str	r3, [r2, #24]
   1c754:	f842 6f10 	str.w	r6, [r2, #16]!
   1c758:	f012 fab8 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c75c:	46ad      	mov	sp, r5
   1c75e:	f389 8811 	msr	BASEPRI, r9
   1c762:	f3bf 8f6f 	isb	sy
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   1c766:	f854 0c68 	ldr.w	r0, [r4, #-104]
   1c76a:	f005 fb23 	bl	21db4 <nrfx_gpiote_trigger_disable>
		deactivate_rx(data);
   1c76e:	4640      	mov	r0, r8
   1c770:	f7ff fc9c 	bl	1c0ac <deactivate_rx>
   1c774:	e74e      	b.n	1c614 <rx_hfclk_callback+0x4c>
   1c776:	bf00      	nop
   1c778:	000380be 	.word	0x000380be
   1c77c:	00037ea7 	.word	0x00037ea7
   1c780:	00033bc2 	.word	0x00033bc2
   1c784:	000380c7 	.word	0x000380c7
   1c788:	000381ca 	.word	0x000381ca
   1c78c:	00031c1c 	.word	0x00031c1c
   1c790:	00034233 	.word	0x00034233
   1c794:	000380ea 	.word	0x000380ea
   1c798:	0bad0000 	.word	0x0bad0000
   1c79c:	00037cf8 	.word	0x00037cf8
   1c7a0:	00037edb 	.word	0x00037edb
   1c7a4:	0003813e 	.word	0x0003813e
   1c7a8:	00038109 	.word	0x00038109
   1c7ac:	40031100 	.word	0x40031100
   1c7b0:	00038148 	.word	0x00038148
   1c7b4:	000381bc 	.word	0x000381bc

0001c7b8 <lpuart_init>:
{
   1c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7bc:	b089      	sub	sp, #36	; 0x24
   1c7be:	4605      	mov	r5, r0
	return dev->data;
   1c7c0:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1c7c2:	f8d0 9004 	ldr.w	r9, [r0, #4]
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   1c7c6:	485a      	ldr	r0, [pc, #360]	; (1c930 <lpuart_init+0x178>)
{
   1c7c8:	af00      	add	r7, sp, #0
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   1c7ca:	6020      	str	r0, [r4, #0]
   1c7cc:	f013 fdd0 	bl	30370 <z_device_is_ready>
	if (!device_is_ready(data->uart)) {
   1c7d0:	2800      	cmp	r0, #0
   1c7d2:	f000 80aa 	beq.w	1c92a <lpuart_init+0x172>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7d6:	2302      	movs	r3, #2
	nrfx_gpiote_input_config_t input_config = {
   1c7d8:	f04f 0801 	mov.w	r8, #1
	err = req_pin_init(data, cfg->req_pin);
   1c7dc:	f8d9 a000 	ldr.w	sl, [r9]
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7e0:	743b      	strb	r3, [r7, #16]
	nrfx_gpiote_handler_config_t handler_config = {
   1c7e2:	4b54      	ldr	r3, [pc, #336]	; (1c934 <lpuart_init+0x17c>)
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7e4:	f107 0b0c 	add.w	fp, r7, #12
	nrfx_gpiote_handler_config_t handler_config = {
   1c7e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	err = nrfx_gpiote_channel_alloc(&ch);
   1c7ec:	4658      	mov	r0, fp
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7ee:	f8c7 b014 	str.w	fp, [r7, #20]
	nrfx_gpiote_input_config_t input_config = {
   1c7f2:	f887 8008 	strb.w	r8, [r7, #8]
	err = nrfx_gpiote_channel_alloc(&ch);
   1c7f6:	f005 fa6d 	bl	21cd4 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   1c7fa:	4b4f      	ldr	r3, [pc, #316]	; (1c938 <lpuart_init+0x180>)
	err = nrfx_gpiote_channel_alloc(&ch);
   1c7fc:	4606      	mov	r6, r0
	if (err != NRFX_SUCCESS) {
   1c7fe:	4298      	cmp	r0, r3
   1c800:	d122      	bne.n	1c848 <lpuart_init+0x90>
	err = nrfx_gpiote_input_configure(pin, &input_config, &trigger_config, &handler_config);
   1c802:	4650      	mov	r0, sl
   1c804:	f107 0318 	add.w	r3, r7, #24
   1c808:	f107 0210 	add.w	r2, r7, #16
   1c80c:	f107 0108 	add.w	r1, r7, #8
   1c810:	f005 f8d2 	bl	219b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c814:	42b0      	cmp	r0, r6
   1c816:	6078      	str	r0, [r7, #4]
   1c818:	d12a      	bne.n	1c870 <lpuart_init+0xb8>
	nrfx_gpiote_input_config_t input_config = {
   1c81a:	2600      	movs	r6, #0
	req_pin_idle(data);
   1c81c:	4620      	mov	r0, r4
	data->req_pin = pin;
   1c81e:	f8c4 a004 	str.w	sl, [r4, #4]
	req_pin_idle(data);
   1c822:	f012 fa0a 	bl	2ec3a <req_pin_idle>
	nrfx_gpiote_handler_config_t handler_config = {
   1c826:	4a45      	ldr	r2, [pc, #276]	; (1c93c <lpuart_init+0x184>)
	err = rdy_pin_init(data, cfg->rdy_pin);
   1c828:	f8d9 9004 	ldr.w	r9, [r9, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1c82c:	f104 000c 	add.w	r0, r4, #12
	nrfx_gpiote_handler_config_t handler_config = {
   1c830:	e9c7 2406 	strd	r2, r4, [r7, #24]
	nrfx_gpiote_input_config_t input_config = {
   1c834:	733e      	strb	r6, [r7, #12]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1c836:	f005 fa4d 	bl	21cd4 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   1c83a:	687b      	ldr	r3, [r7, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   1c83c:	4682      	mov	sl, r0
	if (err != NRFX_SUCCESS) {
   1c83e:	4298      	cmp	r0, r3
   1c840:	d019      	beq.n	1c876 <lpuart_init+0xbe>
		return -ENOMEM;
   1c842:	f06f 050b 	mvn.w	r5, #11
   1c846:	e032      	b.n	1c8ae <lpuart_init+0xf6>
		return -ENOMEM;
   1c848:	f06f 050b 	mvn.w	r5, #11
		LOG_ERR("req pin init failed:%d", err);
   1c84c:	466c      	mov	r4, sp
   1c84e:	b088      	sub	sp, #32
   1c850:	466a      	mov	r2, sp
   1c852:	4b3b      	ldr	r3, [pc, #236]	; (1c940 <lpuart_init+0x188>)
		LOG_ERR("rdy pin init failed:%d", err);
   1c854:	6153      	str	r3, [r2, #20]
   1c856:	4b3b      	ldr	r3, [pc, #236]	; (1c944 <lpuart_init+0x18c>)
   1c858:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c85c:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1c860:	2304      	movs	r3, #4
   1c862:	4839      	ldr	r0, [pc, #228]	; (1c948 <lpuart_init+0x190>)
   1c864:	f842 3f10 	str.w	r3, [r2, #16]!
   1c868:	f012 fa30 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c86c:	46a5      	mov	sp, r4
		return err;
   1c86e:	e03b      	b.n	1c8e8 <lpuart_init+0x130>
		return -EINVAL;
   1c870:	f06f 0515 	mvn.w	r5, #21
   1c874:	e7ea      	b.n	1c84c <lpuart_init+0x94>
	err = nrfx_gpiote_input_configure(pin, &input_config, NULL, &handler_config);
   1c876:	4632      	mov	r2, r6
   1c878:	4659      	mov	r1, fp
   1c87a:	4648      	mov	r0, r9
   1c87c:	f107 0318 	add.w	r3, r7, #24
   1c880:	f005 f89a 	bl	219b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c884:	4550      	cmp	r0, sl
   1c886:	d017      	beq.n	1c8b8 <lpuart_init+0x100>
		LOG_ERR("err:%08x", err);
   1c888:	466c      	mov	r4, sp
   1c88a:	b088      	sub	sp, #32
   1c88c:	466a      	mov	r2, sp
   1c88e:	4b2f      	ldr	r3, [pc, #188]	; (1c94c <lpuart_init+0x194>)
   1c890:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c894:	6153      	str	r3, [r2, #20]
   1c896:	4b2e      	ldr	r3, [pc, #184]	; (1c950 <lpuart_init+0x198>)
		return -EINVAL;
   1c898:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("err:%08x", err);
   1c89c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c8a0:	2304      	movs	r3, #4
   1c8a2:	4829      	ldr	r0, [pc, #164]	; (1c948 <lpuart_init+0x190>)
   1c8a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8a8:	f012 fa10 	bl	2eccc <z_log_msg_static_create.constprop.0>
   1c8ac:	46a5      	mov	sp, r4
		LOG_ERR("rdy pin init failed:%d", err);
   1c8ae:	466c      	mov	r4, sp
   1c8b0:	b088      	sub	sp, #32
   1c8b2:	466a      	mov	r2, sp
   1c8b4:	4b27      	ldr	r3, [pc, #156]	; (1c954 <lpuart_init+0x19c>)
   1c8b6:	e7cd      	b.n	1c854 <lpuart_init+0x9c>
	data->rdy_pin = pin;
   1c8b8:	f8c4 9008 	str.w	r9, [r4, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c8bc:	f107 0010 	add.w	r0, r7, #16
   1c8c0:	f8c7 9010 	str.w	r9, [r7, #16]
   1c8c4:	f7ff fad2 	bl	1be6c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c8c8:	fa08 f309 	lsl.w	r3, r8, r9
    p_reg->OUTCLR = clr_mask;
   1c8cc:	60c3      	str	r3, [r0, #12]
	k_timer_init(&data->tx_timer, tx_timeout, NULL);
   1c8ce:	4632      	mov	r2, r6
   1c8d0:	4921      	ldr	r1, [pc, #132]	; (1c958 <lpuart_init+0x1a0>)
   1c8d2:	f104 0010 	add.w	r0, r4, #16
   1c8d6:	f013 fead 	bl	30634 <k_timer_init>
	err = uart_callback_set(data->uart, uart_callback, (void *)dev);
   1c8da:	6820      	ldr	r0, [r4, #0]
	timer->user_data = user_data;
   1c8dc:	6465      	str	r5, [r4, #68]	; 0x44
	if (api->callback_set == NULL) {
   1c8de:	6883      	ldr	r3, [r0, #8]
   1c8e0:	681b      	ldr	r3, [r3, #0]
   1c8e2:	b933      	cbnz	r3, 1c8f2 <lpuart_init+0x13a>
		return -EINVAL;
   1c8e4:	f06f 0515 	mvn.w	r5, #21
}
   1c8e8:	4628      	mov	r0, r5
   1c8ea:	3724      	adds	r7, #36	; 0x24
   1c8ec:	46bd      	mov	sp, r7
   1c8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->callback_set(dev, callback, user_data);
   1c8f2:	462a      	mov	r2, r5
   1c8f4:	4919      	ldr	r1, [pc, #100]	; (1c95c <lpuart_init+0x1a4>)
   1c8f6:	4798      	blx	r3
	if (err < 0) {
   1c8f8:	2800      	cmp	r0, #0
   1c8fa:	dbf3      	blt.n	1c8e4 <lpuart_init+0x12c>
	if (api->callback_set == NULL) {
   1c8fc:	68ab      	ldr	r3, [r5, #8]
   1c8fe:	681b      	ldr	r3, [r3, #0]
   1c900:	2b00      	cmp	r3, #0
   1c902:	d0ef      	beq.n	1c8e4 <lpuart_init+0x12c>
	return api->callback_set(dev, callback, user_data);
   1c904:	4632      	mov	r2, r6
   1c906:	4628      	mov	r0, r5
   1c908:	4915      	ldr	r1, [pc, #84]	; (1c960 <lpuart_init+0x1a8>)
   1c90a:	4798      	blx	r3
	if (err < 0) {
   1c90c:	2800      	cmp	r0, #0
   1c90e:	dbe9      	blt.n	1c8e4 <lpuart_init+0x12c>
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   1c910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c914:	4628      	mov	r0, r5
   1c916:	2280      	movs	r2, #128	; 0x80
   1c918:	f504 7186 	add.w	r1, r4, #268	; 0x10c
   1c91c:	f7ff faf8 	bl	1bf10 <api_rx_enable>
	data->txbyte = -1;
   1c920:	f04f 33ff 	mov.w	r3, #4294967295
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   1c924:	4605      	mov	r5, r0
	data->txbyte = -1;
   1c926:	64a3      	str	r3, [r4, #72]	; 0x48
	return err;
   1c928:	e7de      	b.n	1c8e8 <lpuart_init+0x130>
		return -ENODEV;
   1c92a:	f06f 0512 	mvn.w	r5, #18
   1c92e:	e7db      	b.n	1c8e8 <lpuart_init+0x130>
   1c930:	00031874 	.word	0x00031874
   1c934:	0001c529 	.word	0x0001c529
   1c938:	0bad0000 	.word	0x0bad0000
   1c93c:	0001c1ad 	.word	0x0001c1ad
   1c940:	0003816b 	.word	0x0003816b
   1c944:	0003821c 	.word	0x0003821c
   1c948:	00031c1c 	.word	0x00031c1c
   1c94c:	00038186 	.word	0x00038186
   1c950:	000381e6 	.word	0x000381e6
   1c954:	00038193 	.word	0x00038193
   1c958:	0001c469 	.word	0x0001c469
   1c95c:	0001c37d 	.word	0x0001c37d
   1c960:	0001c005 	.word	0x0001c005

0001c964 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1c964:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1c966:	490e      	ldr	r1, [pc, #56]	; (1c9a0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   1c968:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1c96c:	e9d1 3400 	ldrd	r3, r4, [r1]
   1c970:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1c972:	18c3      	adds	r3, r0, r3
   1c974:	f144 0400 	adc.w	r4, r4, #0
   1c978:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1c97c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1c980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1c984:	d209      	bcs.n	1c99a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1c986:	4b07      	ldr	r3, [pc, #28]	; (1c9a4 <sys_clock_timeout_handler+0x40>)
   1c988:	681b      	ldr	r3, [r3, #0]
   1c98a:	0a1a      	lsrs	r2, r3, #8
   1c98c:	061b      	lsls	r3, r3, #24
   1c98e:	199c      	adds	r4, r3, r6
   1c990:	4b05      	ldr	r3, [pc, #20]	; (1c9a8 <sys_clock_timeout_handler+0x44>)
   1c992:	f142 0500 	adc.w	r5, r2, #0
   1c996:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1c99a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1c99c:	f00a bd6e 	b.w	2747c <sys_clock_announce>
   1c9a0:	2000dca8 	.word	0x2000dca8
   1c9a4:	2000e4ec 	.word	0x2000e4ec
   1c9a8:	2000dcb0 	.word	0x2000dcb0

0001c9ac <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1c9ac:	4b0d      	ldr	r3, [pc, #52]	; (1c9e4 <z_nrf_rtc_timer_read+0x38>)
   1c9ae:	6818      	ldr	r0, [r3, #0]
   1c9b0:	0a01      	lsrs	r1, r0, #8
   1c9b2:	0600      	lsls	r0, r0, #24
   1c9b4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1c9b8:	4b0b      	ldr	r3, [pc, #44]	; (1c9e8 <z_nrf_rtc_timer_read+0x3c>)
   1c9ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1c9be:	1818      	adds	r0, r3, r0
   1c9c0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1c9c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1c9c8:	d20a      	bcs.n	1c9e0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1c9ca:	4b08      	ldr	r3, [pc, #32]	; (1c9ec <z_nrf_rtc_timer_read+0x40>)
   1c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c9d0:	4290      	cmp	r0, r2
   1c9d2:	eb71 0303 	sbcs.w	r3, r1, r3
   1c9d6:	d203      	bcs.n	1c9e0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1c9d8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1c9dc:	f141 0100 	adc.w	r1, r1, #0
}
   1c9e0:	4770      	bx	lr
   1c9e2:	bf00      	nop
   1c9e4:	2000e4ec 	.word	0x2000e4ec
   1c9e8:	40015000 	.word	0x40015000
   1c9ec:	2000dcb0 	.word	0x2000dcb0

0001c9f0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1c9f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1c9f4:	4b2e      	ldr	r3, [pc, #184]	; (1cab0 <rtc_nrf_isr+0xc0>)
   1c9f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1c9fa:	0790      	lsls	r0, r2, #30
   1c9fc:	d50b      	bpl.n	1ca16 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c9fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1ca02:	b142      	cbz	r2, 1ca16 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ca04:	2200      	movs	r2, #0
   1ca06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1ca0a:	4a2a      	ldr	r2, [pc, #168]	; (1cab4 <rtc_nrf_isr+0xc4>)
   1ca0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1ca10:	6813      	ldr	r3, [r2, #0]
   1ca12:	3301      	adds	r3, #1
   1ca14:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1ca16:	4a26      	ldr	r2, [pc, #152]	; (1cab0 <rtc_nrf_isr+0xc0>)
   1ca18:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1ca1c:	03d9      	lsls	r1, r3, #15
   1ca1e:	d527      	bpl.n	1ca70 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ca20:	4b25      	ldr	r3, [pc, #148]	; (1cab8 <rtc_nrf_isr+0xc8>)
   1ca22:	e8d3 1fef 	ldaex	r1, [r3]
   1ca26:	f021 0001 	bic.w	r0, r1, #1
   1ca2a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1ca2e:	2c00      	cmp	r4, #0
   1ca30:	d1f7      	bne.n	1ca22 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1ca32:	07cb      	lsls	r3, r1, #31
   1ca34:	d402      	bmi.n	1ca3c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca36:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1ca3a:	b1cb      	cbz	r3, 1ca70 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ca3c:	2500      	movs	r5, #0
   1ca3e:	4c1c      	ldr	r4, [pc, #112]	; (1cab0 <rtc_nrf_isr+0xc0>)
   1ca40:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1ca44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1ca48:	f7ff ffb0 	bl	1c9ac <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1ca4c:	f04f 0320 	mov.w	r3, #32
   1ca50:	f3ef 8211 	mrs	r2, BASEPRI
   1ca54:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca58:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1ca5c:	4b17      	ldr	r3, [pc, #92]	; (1cabc <rtc_nrf_isr+0xcc>)
   1ca5e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1ca62:	42b0      	cmp	r0, r6
   1ca64:	41b9      	sbcs	r1, r7
   1ca66:	d206      	bcs.n	1ca76 <rtc_nrf_isr+0x86>
	__asm__ volatile(
   1ca68:	f382 8811 	msr	BASEPRI, r2
   1ca6c:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1ca70:	b003      	add	sp, #12
   1ca72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ca76:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   1ca7a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ca7e:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   1ca82:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ca84:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ca88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ca8c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ca90:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1ca94:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1ca98:	f382 8811 	msr	BASEPRI, r2
   1ca9c:	f3bf 8f6f 	isb	sy
		if (handler) {
   1caa0:	2900      	cmp	r1, #0
   1caa2:	d0e5      	beq.n	1ca70 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   1caa4:	9000      	str	r0, [sp, #0]
   1caa6:	4632      	mov	r2, r6
   1caa8:	463b      	mov	r3, r7
   1caaa:	4628      	mov	r0, r5
   1caac:	4788      	blx	r1
   1caae:	e7df      	b.n	1ca70 <rtc_nrf_isr+0x80>
   1cab0:	40015000 	.word	0x40015000
   1cab4:	2000e4ec 	.word	0x2000e4ec
   1cab8:	2000e4e4 	.word	0x2000e4e4
   1cabc:	2000dc98 	.word	0x2000dc98

0001cac0 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1cac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cac4:	4604      	mov	r4, r0
   1cac6:	460d      	mov	r5, r1
   1cac8:	4f43      	ldr	r7, [pc, #268]	; (1cbd8 <compare_set.constprop.0.isra.0+0x118>)
   1caca:	e8d7 8fef 	ldaex	r8, [r7]
   1cace:	f028 0301 	bic.w	r3, r8, #1
   1cad2:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1cad6:	2a00      	cmp	r2, #0
   1cad8:	d1f7      	bne.n	1caca <compare_set.constprop.0.isra.0+0xa>
    p_reg->INTENCLR = mask;
   1cada:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1cade:	4e3f      	ldr	r6, [pc, #252]	; (1cbdc <compare_set.constprop.0.isra.0+0x11c>)
   1cae0:	f8c6 9308 	str.w	r9, [r6, #776]	; 0x308
   1cae4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cae8:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1caec:	f7ff ff5e 	bl	1c9ac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1caf0:	42a0      	cmp	r0, r4
   1caf2:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   1caf6:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1cafa:	d240      	bcs.n	1cb7e <compare_set.constprop.0.isra.0+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1cafc:	4b38      	ldr	r3, [pc, #224]	; (1cbe0 <compare_set.constprop.0.isra.0+0x120>)
   1cafe:	1a20      	subs	r0, r4, r0
   1cb00:	eb65 0101 	sbc.w	r1, r5, r1
   1cb04:	4298      	cmp	r0, r3
   1cb06:	f171 0100 	sbcs.w	r1, r1, #0
   1cb0a:	d248      	bcs.n	1cb9e <compare_set.constprop.0.isra.0+0xde>
		if (target_time != cc_data[chan].target_time) {
   1cb0c:	4b35      	ldr	r3, [pc, #212]	; (1cbe4 <compare_set.constprop.0.isra.0+0x124>)
   1cb0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1cb12:	429d      	cmp	r5, r3
   1cb14:	bf08      	it	eq
   1cb16:	4294      	cmpeq	r4, r2
   1cb18:	d03a      	beq.n	1cb90 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cb1a:	f04f 0c00 	mov.w	ip, #0
	return absolute_time & COUNTER_MAX;
   1cb1e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
   1cb22:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1cb24:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1cb26:	f06f 0e02 	mvn.w	lr, #2
    p_reg->EVTENCLR = mask;
   1cb2a:	f8c6 9348 	str.w	r9, [r6, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cb2e:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   1cb32:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1cb36:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1cbe8 <compare_set.constprop.0.isra.0+0x128>
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cb3a:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1cb3e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1cb42:	f8c6 9344 	str.w	r9, [r6, #836]	; 0x344
     return p_reg->COUNTER;
   1cb46:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cb4a:	ebae 0302 	sub.w	r3, lr, r2
   1cb4e:	445b      	add	r3, fp
   1cb50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1cb54:	4553      	cmp	r3, sl
   1cb56:	d91b      	bls.n	1cb90 <compare_set.constprop.0.isra.0+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cb58:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			if (event_check(chan)) {
   1cb5c:	b15b      	cbz	r3, 1cb76 <compare_set.constprop.0.isra.0+0xb6>
     return p_reg->COUNTER;
   1cb5e:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cb62:	1a13      	subs	r3, r2, r0
   1cb64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1cb68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1cb6c:	d910      	bls.n	1cb90 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cb6e:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   1cb72:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			cc_val = now + cc_inc;
   1cb76:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1cb7a:	3101      	adds	r1, #1
	for (;;) {
   1cb7c:	e7dd      	b.n	1cb3a <compare_set.constprop.0.isra.0+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cb7e:	4b1b      	ldr	r3, [pc, #108]	; (1cbec <compare_set.constprop.0.isra.0+0x12c>)
   1cb80:	e8d3 1fef 	ldaex	r1, [r3]
   1cb84:	f041 0101 	orr.w	r1, r1, #1
   1cb88:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cb8c:	2a00      	cmp	r2, #0
   1cb8e:	d1f7      	bne.n	1cb80 <compare_set.constprop.0.isra.0+0xc0>
	cc_data[chan].target_time = target_time;
   1cb90:	4b14      	ldr	r3, [pc, #80]	; (1cbe4 <compare_set.constprop.0.isra.0+0x124>)
	cc_data[chan].callback = handler;
   1cb92:	4a17      	ldr	r2, [pc, #92]	; (1cbf0 <compare_set.constprop.0.isra.0+0x130>)
	cc_data[chan].target_time = target_time;
   1cb94:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].callback = handler;
   1cb98:	601a      	str	r2, [r3, #0]
	cc_data[chan].user_context = user_data;
   1cb9a:	2200      	movs	r2, #0
   1cb9c:	605a      	str	r2, [r3, #4]
	if (key) {
   1cb9e:	f1b8 0f00 	cmp.w	r8, #0
   1cba2:	d016      	beq.n	1cbd2 <compare_set.constprop.0.isra.0+0x112>
   1cba4:	e8d7 3fef 	ldaex	r3, [r7]
   1cba8:	f043 0301 	orr.w	r3, r3, #1
   1cbac:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1cbb0:	2a00      	cmp	r2, #0
   1cbb2:	d1f7      	bne.n	1cba4 <compare_set.constprop.0.isra.0+0xe4>
    p_reg->INTENSET = mask;
   1cbb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cbb8:	4b08      	ldr	r3, [pc, #32]	; (1cbdc <compare_set.constprop.0.isra.0+0x11c>)
   1cbba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cbbe:	4b0b      	ldr	r3, [pc, #44]	; (1cbec <compare_set.constprop.0.isra.0+0x12c>)
   1cbc0:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1cbc4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cbc6:	bf42      	ittt	mi
   1cbc8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1cbcc:	4b09      	ldrmi	r3, [pc, #36]	; (1cbf4 <compare_set.constprop.0.isra.0+0x134>)
   1cbce:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1cbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbd6:	bf00      	nop
   1cbd8:	2000e4e8 	.word	0x2000e4e8
   1cbdc:	40015000 	.word	0x40015000
   1cbe0:	00800001 	.word	0x00800001
   1cbe4:	2000dc98 	.word	0x2000dc98
   1cbe8:	007ffffd 	.word	0x007ffffd
   1cbec:	2000e4e4 	.word	0x2000e4e4
   1cbf0:	0001c965 	.word	0x0001c965
   1cbf4:	e000e100 	.word	0xe000e100

0001cbf8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1cbf8:	b570      	push	{r4, r5, r6, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1cbfa:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->PRESCALER = val;
   1cbfe:	2500      	movs	r5, #0
   1cc00:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   1cc04:	4c16      	ldr	r4, [pc, #88]	; (1cc60 <sys_clock_driver_init+0x68>)
   1cc06:	4b17      	ldr	r3, [pc, #92]	; (1cc64 <sys_clock_driver_init+0x6c>)
    p_reg->INTENSET = mask;
   1cc08:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   1cc0a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1cc0e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1cc12:	4b15      	ldr	r3, [pc, #84]	; (1cc68 <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1cc14:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1cc18:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1cc1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1cc24:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1cc28:	4b10      	ldr	r3, [pc, #64]	; (1cc6c <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1cc2a:	2101      	movs	r1, #1
   1cc2c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1cc30:	2015      	movs	r0, #21
   1cc32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1cc36:	462a      	mov	r2, r5
   1cc38:	f7f4 fbe6 	bl	11408 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1cc3c:	2015      	movs	r0, #21
   1cc3e:	f7f4 fbb3 	bl	113a8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1cc42:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1cc44:	4a0a      	ldr	r2, [pc, #40]	; (1cc70 <sys_clock_driver_init+0x78>)
   1cc46:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1cc48:	2100      	movs	r1, #0
   1cc4a:	6023      	str	r3, [r4, #0]
   1cc4c:	4809      	ldr	r0, [pc, #36]	; (1cc74 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1cc4e:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1cc50:	f7ff ff36 	bl	1cac0 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1cc54:	4630      	mov	r0, r6
   1cc56:	f7fe f933 	bl	1aec0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1cc5a:	4628      	mov	r0, r5
   1cc5c:	bd70      	pop	{r4, r5, r6, pc}
   1cc5e:	bf00      	nop
   1cc60:	40015000 	.word	0x40015000
   1cc64:	000f0003 	.word	0x000f0003
   1cc68:	2000dc98 	.word	0x2000dc98
   1cc6c:	e000e100 	.word	0xe000e100
   1cc70:	2000e4e8 	.word	0x2000e4e8
   1cc74:	007fffff 	.word	0x007fffff

0001cc78 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1cc78:	1c43      	adds	r3, r0, #1
{
   1cc7a:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1cc7c:	d01d      	beq.n	1ccba <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1cc7e:	2801      	cmp	r0, #1
   1cc80:	dd1d      	ble.n	1ccbe <sys_clock_set_timeout+0x46>
   1cc82:	4a10      	ldr	r2, [pc, #64]	; (1ccc4 <sys_clock_set_timeout+0x4c>)
   1cc84:	4b10      	ldr	r3, [pc, #64]	; (1ccc8 <sys_clock_set_timeout+0x50>)
   1cc86:	4290      	cmp	r0, r2
   1cc88:	bfd4      	ite	le
   1cc8a:	4604      	movle	r4, r0
   1cc8c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1cc8e:	f7ff fe8d 	bl	1c9ac <z_nrf_rtc_timer_read>
   1cc92:	4a0e      	ldr	r2, [pc, #56]	; (1cccc <sys_clock_set_timeout+0x54>)
   1cc94:	e9d2 3100 	ldrd	r3, r1, [r2]
   1cc98:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1cc9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cc9e:	bf28      	it	cs
   1cca0:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1cca2:	4a09      	ldr	r2, [pc, #36]	; (1ccc8 <sys_clock_set_timeout+0x50>)
	cyc += unannounced;
   1cca4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1cca6:	4294      	cmp	r4, r2
   1cca8:	bf28      	it	cs
   1ccaa:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1ccac:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ccae:	f141 0100 	adc.w	r1, r1, #0
}
   1ccb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ccb6:	f7ff bf03 	b.w	1cac0 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1ccba:	4c03      	ldr	r4, [pc, #12]	; (1ccc8 <sys_clock_set_timeout+0x50>)
   1ccbc:	e7e7      	b.n	1cc8e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ccbe:	2401      	movs	r4, #1
   1ccc0:	e7e5      	b.n	1cc8e <sys_clock_set_timeout+0x16>
   1ccc2:	bf00      	nop
   1ccc4:	007ffffe 	.word	0x007ffffe
   1ccc8:	007fffff 	.word	0x007fffff
   1cccc:	2000dca8 	.word	0x2000dca8

0001ccd0 <sys_clock_elapsed>:
{
   1ccd0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ccd2:	f7ff fe6b 	bl	1c9ac <z_nrf_rtc_timer_read>
   1ccd6:	4b02      	ldr	r3, [pc, #8]	; (1cce0 <sys_clock_elapsed+0x10>)
   1ccd8:	681b      	ldr	r3, [r3, #0]
}
   1ccda:	1ac0      	subs	r0, r0, r3
   1ccdc:	bd08      	pop	{r3, pc}
   1ccde:	bf00      	nop
   1cce0:	2000dca8 	.word	0x2000dca8

0001cce4 <sys_clock_disable>:
   1cce4:	2301      	movs	r3, #1
{
   1cce6:	b510      	push	{r4, lr}
   1cce8:	4c07      	ldr	r4, [pc, #28]	; (1cd08 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
   1ccea:	2015      	movs	r0, #21
   1ccec:	6063      	str	r3, [r4, #4]
   1ccee:	f7f4 fb69 	bl	113c4 <arch_irq_disable>
   1ccf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
   1ccf6:	4b05      	ldr	r3, [pc, #20]	; (1cd0c <sys_clock_disable+0x28>)
   1ccf8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1ccfc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1cd00:	4b03      	ldr	r3, [pc, #12]	; (1cd10 <sys_clock_disable+0x2c>)
   1cd02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1cd06:	bd10      	pop	{r4, pc}
   1cd08:	40015000 	.word	0x40015000
   1cd0c:	000f0003 	.word	0x000f0003
   1cd10:	e000e100 	.word	0xe000e100

0001cd14 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
   1cd14:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   1cd16:	2200      	movs	r2, #0
   1cd18:	2101      	movs	r1, #1
   1cd1a:	202a      	movs	r0, #42	; 0x2a
   1cd1c:	f7f4 fb74 	bl	11408 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
   1cd20:	480e      	ldr	r0, [pc, #56]	; (1cd5c <nrf_modem_lib_init+0x48>)
   1cd22:	f007 f9c9 	bl	240b8 <nrf_modem_init>
   1cd26:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1cd28:	4c0d      	ldr	r4, [pc, #52]	; (1cd60 <nrf_modem_lib_init+0x4c>)
   1cd2a:	4e0e      	ldr	r6, [pc, #56]	; (1cd64 <nrf_modem_lib_init+0x50>)
   1cd2c:	42b4      	cmp	r4, r6
   1cd2e:	d912      	bls.n	1cd56 <nrf_modem_lib_init+0x42>
   1cd30:	490d      	ldr	r1, [pc, #52]	; (1cd68 <nrf_modem_lib_init+0x54>)
   1cd32:	2380      	movs	r3, #128	; 0x80
   1cd34:	4a0d      	ldr	r2, [pc, #52]	; (1cd6c <nrf_modem_lib_init+0x58>)
   1cd36:	480e      	ldr	r0, [pc, #56]	; (1cd70 <nrf_modem_lib_init+0x5c>)
   1cd38:	f00e f83e 	bl	2adb8 <assert_print>
   1cd3c:	480d      	ldr	r0, [pc, #52]	; (1cd74 <nrf_modem_lib_init+0x60>)
   1cd3e:	f00e f83b 	bl	2adb8 <assert_print>
   1cd42:	2180      	movs	r1, #128	; 0x80
   1cd44:	4809      	ldr	r0, [pc, #36]	; (1cd6c <nrf_modem_lib_init+0x58>)
   1cd46:	f00e f830 	bl	2adaa <assert_post_action>
		e->callback(rc, e->context);
   1cd4a:	e9d4 3100 	ldrd	r3, r1, [r4]
   1cd4e:	4628      	mov	r0, r5
   1cd50:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   1cd52:	3408      	adds	r4, #8
   1cd54:	e7ea      	b.n	1cd2c <nrf_modem_lib_init+0x18>
   1cd56:	d3f8      	bcc.n	1cd4a <nrf_modem_lib_init+0x36>
	return _nrf_modem_lib_init();
}
   1cd58:	4628      	mov	r0, r5
   1cd5a:	bd70      	pop	{r4, r5, r6, pc}
   1cd5c:	000326a8 	.word	0x000326a8
   1cd60:	0003c338 	.word	0x0003c338
   1cd64:	0003c348 	.word	0x0003c348
   1cd68:	00038268 	.word	0x00038268
   1cd6c:	00038236 	.word	0x00038236
   1cd70:	00033bc2 	.word	0x00033bc2
   1cd74:	000342e3 	.word	0x000342e3

0001cd78 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1cd7a:	4b0f      	ldr	r3, [pc, #60]	; (1cdb8 <thread_monitor_entry_get+0x40>)
{
   1cd7c:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1cd7e:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1cd80:	4b0e      	ldr	r3, [pc, #56]	; (1cdbc <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1cd82:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   1cd84:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1cd86:	4618      	mov	r0, r3
   1cd88:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1cd8a:	42b8      	cmp	r0, r7
   1cd8c:	d301      	bcc.n	1cd92 <thread_monitor_entry_get+0x1a>
   1cd8e:	3d01      	subs	r5, #1
   1cd90:	d104      	bne.n	1cd9c <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1cd92:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1cd94:	3a01      	subs	r2, #1
	new_entry->id = id;
   1cd96:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1cd98:	605a      	str	r2, [r3, #4]
}
   1cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   1cd9c:	6804      	ldr	r4, [r0, #0]
   1cd9e:	428c      	cmp	r4, r1
   1cda0:	d0fb      	beq.n	1cd9a <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   1cda2:	b13c      	cbz	r4, 1cdb4 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   1cda4:	6844      	ldr	r4, [r0, #4]
   1cda6:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1cda8:	42a6      	cmp	r6, r4
   1cdaa:	bfbc      	itt	lt
   1cdac:	4603      	movlt	r3, r0
   1cdae:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1cdb0:	3008      	adds	r0, #8
   1cdb2:	e7ea      	b.n	1cd8a <thread_monitor_entry_get+0x12>
   1cdb4:	4603      	mov	r3, r0
   1cdb6:	e7ec      	b.n	1cd92 <thread_monitor_entry_get+0x1a>
   1cdb8:	2000e598 	.word	0x2000e598
   1cdbc:	2000e5a4 	.word	0x2000e5a4

0001cdc0 <on_init>:
	list->head = NULL;
   1cdc0:	2000      	movs	r0, #0
   1cdc2:	4b05      	ldr	r3, [pc, #20]	; (1cdd8 <on_init+0x18>)
	list->tail = NULL;
   1cdc4:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cdc8:	4b04      	ldr	r3, [pc, #16]	; (1cddc <on_init+0x1c>)
   1cdca:	e8d3 2fef 	ldaex	r2, [r3]
   1cdce:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1cdd2:	2900      	cmp	r1, #0
   1cdd4:	d1f9      	bne.n	1cdca <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   1cdd6:	4770      	bx	lr
   1cdd8:	2000e59c 	.word	0x2000e59c
   1cddc:	2000e598 	.word	0x2000e598

0001cde0 <nrf_modem_os_timedwait>:
{
   1cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cde4:	b088      	sub	sp, #32
   1cde6:	4605      	mov	r5, r0
   1cde8:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   1cdea:	f013 fabe 	bl	3036a <nrf_modem_is_initialized>
   1cdee:	b920      	cbnz	r0, 1cdfa <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   1cdf0:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   1cdf4:	b008      	add	sp, #32
   1cdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1cdfa:	f013 fbf3 	bl	305e4 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1cdfe:	6833      	ldr	r3, [r6, #0]
   1ce00:	4604      	mov	r4, r0
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	460f      	mov	r7, r1
   1ce06:	d104      	bne.n	1ce12 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   1ce08:	f009 feda 	bl	26bc0 <z_impl_k_yield>
		return -NRF_EAGAIN;
   1ce0c:	f06f 000a 	mvn.w	r0, #10
   1ce10:	e7f0      	b.n	1cdf4 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   1ce12:	bfbc      	itt	lt
   1ce14:	f04f 33ff 	movlt.w	r3, #4294967295
   1ce18:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ce1a:	2201      	movs	r2, #1
   1ce1c:	2100      	movs	r1, #0
   1ce1e:	a801      	add	r0, sp, #4
   1ce20:	f013 fb32 	bl	30488 <z_impl_k_sem_init>
   1ce24:	46e8      	mov	r8, sp
	thread->context = context;
   1ce26:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   1ce28:	f04f 0320 	mov.w	r3, #32
   1ce2c:	f3ef 8a11 	mrs	sl, BASEPRI
   1ce30:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce34:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ce38:	f00a f830 	bl	26e9c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ce3c:	f7ff ff9c 	bl	1cd78 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1ce40:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1cf5c <nrf_modem_os_timedwait+0x17c>
   1ce44:	6842      	ldr	r2, [r0, #4]
   1ce46:	f8d9 3000 	ldr.w	r3, [r9]
   1ce4a:	429a      	cmp	r2, r3
   1ce4c:	d16d      	bne.n	1cf2a <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   1ce4e:	2300      	movs	r3, #0
	return list->tail;
   1ce50:	4d43      	ldr	r5, [pc, #268]	; (1cf60 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   1ce52:	9300      	str	r3, [sp, #0]
	return list->tail;
   1ce54:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ce56:	2b00      	cmp	r3, #0
   1ce58:	d16e      	bne.n	1cf38 <nrf_modem_os_timedwait+0x158>
	list->head = node;
   1ce5a:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   1ce5e:	f38a 8811 	msr	BASEPRI, sl
   1ce62:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ce66:	6833      	ldr	r3, [r6, #0]
   1ce68:	1c5a      	adds	r2, r3, #1
   1ce6a:	d06a      	beq.n	1cf42 <nrf_modem_os_timedwait+0x162>
   1ce6c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1ce70:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ce74:	2100      	movs	r1, #0
   1ce76:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1ce7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ce7e:	2300      	movs	r3, #0
   1ce80:	fbcc 010e 	smlal	r0, r1, ip, lr
   1ce84:	f7ec f806 	bl	8e94 <__aeabi_uldivmod>
   1ce88:	4602      	mov	r2, r0
   1ce8a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ce8c:	a801      	add	r0, sp, #4
   1ce8e:	f008 f9c3 	bl	25218 <z_impl_k_sem_take>
	__asm__ volatile(
   1ce92:	f04f 0320 	mov.w	r3, #32
   1ce96:	f3ef 8a11 	mrs	sl, BASEPRI
   1ce9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce9e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cea2:	2200      	movs	r2, #0
	return list->head;
   1cea4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cea6:	b15b      	cbz	r3, 1cec0 <nrf_modem_os_timedwait+0xe0>
   1cea8:	4543      	cmp	r3, r8
   1ceaa:	d154      	bne.n	1cf56 <nrf_modem_os_timedwait+0x176>
	return node->next;
   1ceac:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ceae:	2a00      	cmp	r2, #0
   1ceb0:	d14b      	bne.n	1cf4a <nrf_modem_os_timedwait+0x16a>
   1ceb2:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   1ceb4:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ceb6:	429a      	cmp	r2, r3
   1ceb8:	d100      	bne.n	1cebc <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   1ceba:	6069      	str	r1, [r5, #4]
	parent->next = child;
   1cebc:	2300      	movs	r3, #0
   1cebe:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   1cec0:	f009 ffec 	bl	26e9c <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1cec4:	f7ff ff58 	bl	1cd78 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1cec8:	f8d9 3000 	ldr.w	r3, [r9]
   1cecc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1cece:	f38a 8811 	msr	BASEPRI, sl
   1ced2:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   1ced6:	f013 fa48 	bl	3036a <nrf_modem_is_initialized>
   1ceda:	2800      	cmp	r0, #0
   1cedc:	d088      	beq.n	1cdf0 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   1cede:	6835      	ldr	r5, [r6, #0]
   1cee0:	1c6b      	adds	r3, r5, #1
   1cee2:	d027      	beq.n	1cf34 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   1cee4:	f013 fb7e 	bl	305e4 <z_impl_k_uptime_ticks>
   1cee8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1ceec:	fba0 320e 	umull	r3, r2, r0, lr
   1cef0:	fb0e 2101 	mla	r1, lr, r1, r2
   1cef4:	fba4 420e 	umull	r4, r2, r4, lr
   1cef8:	fb0e 2207 	mla	r2, lr, r7, r2
   1cefc:	0bdb      	lsrs	r3, r3, #15
   1cefe:	0be4      	lsrs	r4, r4, #15
   1cf00:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1cf04:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   1cf08:	1b1b      	subs	r3, r3, r4
   1cf0a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1cf0e:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1cf12:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   1cf16:	1aed      	subs	r5, r5, r3
   1cf18:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1cf1c:	f1bc 0f00 	cmp.w	ip, #0
   1cf20:	bfb8      	it	lt
   1cf22:	2500      	movlt	r5, #0
   1cf24:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   1cf26:	b92d      	cbnz	r5, 1cf34 <nrf_modem_os_timedwait+0x154>
   1cf28:	e770      	b.n	1ce0c <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   1cf2a:	6043      	str	r3, [r0, #4]
   1cf2c:	f38a 8811 	msr	BASEPRI, sl
   1cf30:	f3bf 8f6f 	isb	sy
		return 0;
   1cf34:	2000      	movs	r0, #0
   1cf36:	e75d      	b.n	1cdf4 <nrf_modem_os_timedwait+0x14>
   1cf38:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   1cf3c:	f8c5 8004 	str.w	r8, [r5, #4]
   1cf40:	e78d      	b.n	1ce5e <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1cf42:	f04f 32ff 	mov.w	r2, #4294967295
   1cf46:	4613      	mov	r3, r2
   1cf48:	e7a0      	b.n	1ce8c <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   1cf4a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cf4c:	6869      	ldr	r1, [r5, #4]
   1cf4e:	4299      	cmp	r1, r3
	list->tail = node;
   1cf50:	bf08      	it	eq
   1cf52:	606a      	streq	r2, [r5, #4]
}
   1cf54:	e7b2      	b.n	1cebc <nrf_modem_os_timedwait+0xdc>
	return node->next;
   1cf56:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	e7a4      	b.n	1cea6 <nrf_modem_os_timedwait+0xc6>
   1cf5c:	2000e598 	.word	0x2000e598
   1cf60:	2000e59c 	.word	0x2000e59c

0001cf64 <nrf_modem_os_errno_set>:
{
   1cf64:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   1cf66:	1e04      	subs	r4, r0, #0
   1cf68:	dc0d      	bgt.n	1cf86 <nrf_modem_os_errno_set+0x22>
   1cf6a:	23df      	movs	r3, #223	; 0xdf
   1cf6c:	4a08      	ldr	r2, [pc, #32]	; (1cf90 <nrf_modem_os_errno_set+0x2c>)
   1cf6e:	4909      	ldr	r1, [pc, #36]	; (1cf94 <nrf_modem_os_errno_set+0x30>)
   1cf70:	4809      	ldr	r0, [pc, #36]	; (1cf98 <nrf_modem_os_errno_set+0x34>)
   1cf72:	f00d ff21 	bl	2adb8 <assert_print>
   1cf76:	4621      	mov	r1, r4
   1cf78:	4808      	ldr	r0, [pc, #32]	; (1cf9c <nrf_modem_os_errno_set+0x38>)
   1cf7a:	f00d ff1d 	bl	2adb8 <assert_print>
   1cf7e:	21df      	movs	r1, #223	; 0xdf
   1cf80:	4803      	ldr	r0, [pc, #12]	; (1cf90 <nrf_modem_os_errno_set+0x2c>)
   1cf82:	f00d ff12 	bl	2adaa <assert_post_action>
	errno = err_code;
   1cf86:	f00e ffed 	bl	2bf64 <__errno>
   1cf8a:	6004      	str	r4, [r0, #0]
}
   1cf8c:	bd10      	pop	{r4, pc}
   1cf8e:	bf00      	nop
   1cf90:	0003828d 	.word	0x0003828d
   1cf94:	000382be 	.word	0x000382be
   1cf98:	00033bc2 	.word	0x00033bc2
   1cf9c:	000382cb 	.word	0x000382cb

0001cfa0 <nrf_modem_os_sem_init>:
{
   1cfa0:	b570      	push	{r4, r5, r6, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1cfa2:	6803      	ldr	r3, [r0, #0]
   1cfa4:	4c12      	ldr	r4, [pc, #72]	; (1cff0 <nrf_modem_os_sem_init+0x50>)
   1cfa6:	b12b      	cbz	r3, 1cfb4 <nrf_modem_os_sem_init+0x14>
   1cfa8:	42a3      	cmp	r3, r4
   1cfaa:	d303      	bcc.n	1cfb4 <nrf_modem_os_sem_init+0x14>
   1cfac:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   1cfb0:	42ab      	cmp	r3, r5
   1cfb2:	d317      	bcc.n	1cfe4 <nrf_modem_os_sem_init+0x44>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   1cfb4:	4d0f      	ldr	r5, [pc, #60]	; (1cff4 <nrf_modem_os_sem_init+0x54>)
   1cfb6:	782b      	ldrb	r3, [r5, #0]
   1cfb8:	2b06      	cmp	r3, #6
   1cfba:	d90c      	bls.n	1cfd6 <nrf_modem_os_sem_init+0x36>
   1cfbc:	490e      	ldr	r1, [pc, #56]	; (1cff8 <nrf_modem_os_sem_init+0x58>)
   1cfbe:	23f3      	movs	r3, #243	; 0xf3
   1cfc0:	4a0e      	ldr	r2, [pc, #56]	; (1cffc <nrf_modem_os_sem_init+0x5c>)
   1cfc2:	480f      	ldr	r0, [pc, #60]	; (1d000 <nrf_modem_os_sem_init+0x60>)
   1cfc4:	f00d fef8 	bl	2adb8 <assert_print>
   1cfc8:	480e      	ldr	r0, [pc, #56]	; (1d004 <nrf_modem_os_sem_init+0x64>)
   1cfca:	f00d fef5 	bl	2adb8 <assert_print>
   1cfce:	21f3      	movs	r1, #243	; 0xf3
   1cfd0:	480a      	ldr	r0, [pc, #40]	; (1cffc <nrf_modem_os_sem_init+0x5c>)
   1cfd2:	f00d feea 	bl	2adaa <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   1cfd6:	1c5e      	adds	r6, r3, #1
   1cfd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cfdc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1cfe0:	702e      	strb	r6, [r5, #0]
   1cfe2:	6004      	str	r4, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1cfe4:	6800      	ldr	r0, [r0, #0]
}
   1cfe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cfea:	f013 ba4d 	b.w	30488 <z_impl_k_sem_init>
   1cfee:	bf00      	nop
   1cff0:	2000e4f0 	.word	0x2000e4f0
   1cff4:	2000ef41 	.word	0x2000ef41
   1cff8:	000382f2 	.word	0x000382f2
   1cffc:	0003828d 	.word	0x0003828d
   1d000:	00033bc2 	.word	0x00033bc2
   1d004:	000382fb 	.word	0x000382fb

0001d008 <nrf_modem_os_sem_give>:
{
   1d008:	b508      	push	{r3, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1d00a:	b128      	cbz	r0, 1d018 <nrf_modem_os_sem_give+0x10>
   1d00c:	4a0b      	ldr	r2, [pc, #44]	; (1d03c <nrf_modem_os_sem_give+0x34>)
   1d00e:	4290      	cmp	r0, r2
   1d010:	d302      	bcc.n	1d018 <nrf_modem_os_sem_give+0x10>
   1d012:	32a8      	adds	r2, #168	; 0xa8
   1d014:	4290      	cmp	r0, r2
   1d016:	d30c      	bcc.n	1d032 <nrf_modem_os_sem_give+0x2a>
   1d018:	4909      	ldr	r1, [pc, #36]	; (1d040 <nrf_modem_os_sem_give+0x38>)
   1d01a:	23fe      	movs	r3, #254	; 0xfe
   1d01c:	4a09      	ldr	r2, [pc, #36]	; (1d044 <nrf_modem_os_sem_give+0x3c>)
   1d01e:	480a      	ldr	r0, [pc, #40]	; (1d048 <nrf_modem_os_sem_give+0x40>)
   1d020:	f00d feca 	bl	2adb8 <assert_print>
   1d024:	4809      	ldr	r0, [pc, #36]	; (1d04c <nrf_modem_os_sem_give+0x44>)
   1d026:	f00d fec7 	bl	2adb8 <assert_print>
   1d02a:	21fe      	movs	r1, #254	; 0xfe
   1d02c:	4805      	ldr	r0, [pc, #20]	; (1d044 <nrf_modem_os_sem_give+0x3c>)
   1d02e:	f00d febc 	bl	2adaa <assert_post_action>
}
   1d032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   1d036:	f008 b8ab 	b.w	25190 <z_impl_k_sem_give>
   1d03a:	bf00      	nop
   1d03c:	2000e4f0 	.word	0x2000e4f0
   1d040:	00038321 	.word	0x00038321
   1d044:	0003828d 	.word	0x0003828d
   1d048:	00033bc2 	.word	0x00033bc2
   1d04c:	000384a7 	.word	0x000384a7

0001d050 <nrf_modem_os_sem_take>:
{
   1d050:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1d052:	4605      	mov	r5, r0
   1d054:	b128      	cbz	r0, 1d062 <nrf_modem_os_sem_take+0x12>
   1d056:	4b19      	ldr	r3, [pc, #100]	; (1d0bc <nrf_modem_os_sem_take+0x6c>)
   1d058:	4298      	cmp	r0, r3
   1d05a:	d302      	bcc.n	1d062 <nrf_modem_os_sem_take+0x12>
   1d05c:	33a8      	adds	r3, #168	; 0xa8
   1d05e:	4298      	cmp	r0, r3
   1d060:	d30e      	bcc.n	1d080 <nrf_modem_os_sem_take+0x30>
   1d062:	4917      	ldr	r1, [pc, #92]	; (1d0c0 <nrf_modem_os_sem_take+0x70>)
   1d064:	f44f 7384 	mov.w	r3, #264	; 0x108
   1d068:	4a16      	ldr	r2, [pc, #88]	; (1d0c4 <nrf_modem_os_sem_take+0x74>)
   1d06a:	4817      	ldr	r0, [pc, #92]	; (1d0c8 <nrf_modem_os_sem_take+0x78>)
   1d06c:	f00d fea4 	bl	2adb8 <assert_print>
   1d070:	4816      	ldr	r0, [pc, #88]	; (1d0cc <nrf_modem_os_sem_take+0x7c>)
   1d072:	f00d fea1 	bl	2adb8 <assert_print>
   1d076:	f44f 7184 	mov.w	r1, #264	; 0x108
   1d07a:	4812      	ldr	r0, [pc, #72]	; (1d0c4 <nrf_modem_os_sem_take+0x74>)
   1d07c:	f00d fe95 	bl	2adaa <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1d080:	1c4b      	adds	r3, r1, #1
   1d082:	d017      	beq.n	1d0b4 <nrf_modem_os_sem_take+0x64>
   1d084:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1d088:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d08c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d090:	2100      	movs	r1, #0
   1d092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d096:	2300      	movs	r3, #0
   1d098:	fbc4 0106 	smlal	r0, r1, r4, r6
   1d09c:	f7eb fefa 	bl	8e94 <__aeabi_uldivmod>
   1d0a0:	4602      	mov	r2, r0
   1d0a2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	f008 f8b7 	bl	25218 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   1d0aa:	2800      	cmp	r0, #0
}
   1d0ac:	bf18      	it	ne
   1d0ae:	f06f 000a 	mvnne.w	r0, #10
   1d0b2:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1d0b4:	f04f 32ff 	mov.w	r2, #4294967295
   1d0b8:	4613      	mov	r3, r2
   1d0ba:	e7f3      	b.n	1d0a4 <nrf_modem_os_sem_take+0x54>
   1d0bc:	2000e4f0 	.word	0x2000e4f0
   1d0c0:	00038321 	.word	0x00038321
   1d0c4:	0003828d 	.word	0x0003828d
   1d0c8:	00033bc2 	.word	0x00033bc2
   1d0cc:	000384a7 	.word	0x000384a7

0001d0d0 <nrf_modem_os_event_notify>:
{
   1d0d0:	b538      	push	{r3, r4, r5, lr}
   1d0d2:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d0d4:	4b0a      	ldr	r3, [pc, #40]	; (1d100 <nrf_modem_os_event_notify+0x30>)
   1d0d6:	e8d3 1fef 	ldaex	r1, [r3]
   1d0da:	3101      	adds	r1, #1
   1d0dc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d0e0:	2a00      	cmp	r2, #0
   1d0e2:	d1f8      	bne.n	1d0d6 <nrf_modem_os_event_notify+0x6>
	return list->head;
   1d0e4:	4b07      	ldr	r3, [pc, #28]	; (1d104 <nrf_modem_os_event_notify+0x34>)
   1d0e6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1d0e8:	b904      	cbnz	r4, 1d0ec <nrf_modem_os_event_notify+0x1c>
}
   1d0ea:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   1d0ec:	69e3      	ldr	r3, [r4, #28]
   1d0ee:	42ab      	cmp	r3, r5
   1d0f0:	d000      	beq.n	1d0f4 <nrf_modem_os_event_notify+0x24>
   1d0f2:	b915      	cbnz	r5, 1d0fa <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   1d0f4:	1d20      	adds	r0, r4, #4
   1d0f6:	f008 f84b 	bl	25190 <z_impl_k_sem_give>
	return node->next;
   1d0fa:	6824      	ldr	r4, [r4, #0]
   1d0fc:	e7f4      	b.n	1d0e8 <nrf_modem_os_event_notify+0x18>
   1d0fe:	bf00      	nop
   1d100:	2000e598 	.word	0x2000e598
   1d104:	2000e59c 	.word	0x2000e59c

0001d108 <nrf_modem_os_alloc>:
{
   1d108:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   1d10a:	2200      	movs	r2, #0
   1d10c:	2300      	movs	r3, #0
   1d10e:	4801      	ldr	r0, [pc, #4]	; (1d114 <nrf_modem_os_alloc+0xc>)
   1d110:	f013 b945 	b.w	3039e <k_heap_alloc>
   1d114:	2000e5f4 	.word	0x2000e5f4

0001d118 <nrf_modem_os_free>:
{
   1d118:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   1d11a:	4801      	ldr	r0, [pc, #4]	; (1d120 <nrf_modem_os_free+0x8>)
   1d11c:	f007 bb1c 	b.w	24758 <k_heap_free>
   1d120:	2000e5f4 	.word	0x2000e5f4

0001d124 <nrf_modem_os_shm_tx_alloc>:
{
   1d124:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   1d126:	2200      	movs	r2, #0
   1d128:	2300      	movs	r3, #0
   1d12a:	4801      	ldr	r0, [pc, #4]	; (1d130 <nrf_modem_os_shm_tx_alloc+0xc>)
   1d12c:	f013 b937 	b.w	3039e <k_heap_alloc>
   1d130:	2000e60c 	.word	0x2000e60c

0001d134 <nrf_modem_os_shm_tx_free>:
{
   1d134:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   1d136:	4801      	ldr	r0, [pc, #4]	; (1d13c <nrf_modem_os_shm_tx_free+0x8>)
   1d138:	f007 bb0e 	b.w	24758 <k_heap_free>
   1d13c:	2000e60c 	.word	0x2000e60c

0001d140 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   1d140:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   1d142:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d146:	4906      	ldr	r1, [pc, #24]	; (1d160 <nrf_modem_os_init+0x20>)
   1d148:	4806      	ldr	r0, [pc, #24]	; (1d164 <nrf_modem_os_init+0x24>)
   1d14a:	f013 f920 	bl	3038e <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   1d14e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   1d152:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   1d156:	4904      	ldr	r1, [pc, #16]	; (1d168 <nrf_modem_os_init+0x28>)
   1d158:	4804      	ldr	r0, [pc, #16]	; (1d16c <nrf_modem_os_init+0x2c>)
   1d15a:	f013 b918 	b.w	3038e <k_heap_init>
   1d15e:	bf00      	nop
   1d160:	2000ef42 	.word	0x2000ef42
   1d164:	2000e5f4 	.word	0x2000e5f4
   1d168:	200084e8 	.word	0x200084e8
   1d16c:	2000e60c 	.word	0x2000e60c

0001d170 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
   1d170:	b510      	push	{r4, lr}
	return list->head;
   1d172:	4b04      	ldr	r3, [pc, #16]	; (1d184 <nrf_modem_os_shutdown+0x14>)
   1d174:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1d176:	b904      	cbnz	r4, 1d17a <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
   1d178:	bd10      	pop	{r4, pc}
   1d17a:	1d20      	adds	r0, r4, #4
   1d17c:	f008 f808 	bl	25190 <z_impl_k_sem_give>
	return node->next;
   1d180:	6824      	ldr	r4, [r4, #0]
   1d182:	e7f8      	b.n	1d176 <nrf_modem_os_shutdown+0x6>
   1d184:	2000e59c 	.word	0x2000e59c

0001d188 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1d188:	2801      	cmp	r0, #1
   1d18a:	d01e      	beq.n	1d1ca <z_to_nrf_optname+0x42>
   1d18c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1d190:	d123      	bne.n	1d1da <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
   1d192:	1e4b      	subs	r3, r1, #1
   1d194:	2b14      	cmp	r3, #20
   1d196:	d820      	bhi.n	1d1da <z_to_nrf_optname+0x52>
   1d198:	e8df f003 	tbb	[pc, r3]
   1d19c:	0c0c0c0c 	.word	0x0c0c0c0c
   1d1a0:	1f1f0c0c 	.word	0x1f1f0c0c
   1d1a4:	0c1f1f1f 	.word	0x0c1f1f1f
   1d1a8:	1f1f0c0c 	.word	0x1f1f0c0c
   1d1ac:	13110f0b 	.word	0x13110f0b
   1d1b0:	15          	.byte	0x15
   1d1b1:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
   1d1b2:	210f      	movs	r1, #15
	int retval = 0;
   1d1b4:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1d1b6:	6011      	str	r1, [r2, #0]
   1d1b8:	4770      	bx	lr
			break;
   1d1ba:	2110      	movs	r1, #16
   1d1bc:	e7fa      	b.n	1d1b4 <z_to_nrf_optname+0x2c>
			break;
   1d1be:	2111      	movs	r1, #17
   1d1c0:	e7f8      	b.n	1d1b4 <z_to_nrf_optname+0x2c>
			break;
   1d1c2:	2112      	movs	r1, #18
   1d1c4:	e7f6      	b.n	1d1b4 <z_to_nrf_optname+0x2c>
			break;
   1d1c6:	2113      	movs	r1, #19
   1d1c8:	e7f4      	b.n	1d1b4 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
   1d1ca:	2937      	cmp	r1, #55	; 0x37
   1d1cc:	dc05      	bgt.n	1d1da <z_to_nrf_optname+0x52>
   1d1ce:	2913      	cmp	r1, #19
   1d1d0:	dc06      	bgt.n	1d1e0 <z_to_nrf_optname+0x58>
   1d1d2:	2902      	cmp	r1, #2
   1d1d4:	d0ee      	beq.n	1d1b4 <z_to_nrf_optname+0x2c>
   1d1d6:	2904      	cmp	r1, #4
   1d1d8:	d0ec      	beq.n	1d1b4 <z_to_nrf_optname+0x2c>
   1d1da:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1d1de:	4770      	bx	lr
   1d1e0:	f1a1 0314 	sub.w	r3, r1, #20
   1d1e4:	2b23      	cmp	r3, #35	; 0x23
   1d1e6:	d8f8      	bhi.n	1d1da <z_to_nrf_optname+0x52>
   1d1e8:	a001      	add	r0, pc, #4	; (adr r0, 1d1f0 <z_to_nrf_optname+0x68>)
   1d1ea:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d1ee:	bf00      	nop
   1d1f0:	0001d1b5 	.word	0x0001d1b5
   1d1f4:	0001d1b5 	.word	0x0001d1b5
   1d1f8:	0001d1db 	.word	0x0001d1db
   1d1fc:	0001d1db 	.word	0x0001d1db
   1d200:	0001d1db 	.word	0x0001d1db
   1d204:	0001d1b5 	.word	0x0001d1b5
   1d208:	0001d1db 	.word	0x0001d1db
   1d20c:	0001d1db 	.word	0x0001d1db
   1d210:	0001d1db 	.word	0x0001d1db
   1d214:	0001d1db 	.word	0x0001d1db
   1d218:	0001d1b5 	.word	0x0001d1b5
   1d21c:	0001d1b5 	.word	0x0001d1b5
   1d220:	0001d1b5 	.word	0x0001d1b5
   1d224:	0001d1db 	.word	0x0001d1db
   1d228:	0001d1db 	.word	0x0001d1db
   1d22c:	0001d1db 	.word	0x0001d1db
   1d230:	0001d1db 	.word	0x0001d1db
   1d234:	0001d1db 	.word	0x0001d1db
   1d238:	0001d1db 	.word	0x0001d1db
   1d23c:	0001d1db 	.word	0x0001d1db
   1d240:	0001d1db 	.word	0x0001d1db
   1d244:	0001d1db 	.word	0x0001d1db
   1d248:	0001d1db 	.word	0x0001d1db
   1d24c:	0001d1db 	.word	0x0001d1db
   1d250:	0001d1db 	.word	0x0001d1db
   1d254:	0001d1db 	.word	0x0001d1db
   1d258:	0001d1db 	.word	0x0001d1db
   1d25c:	0001d1db 	.word	0x0001d1db
   1d260:	0001d1db 	.word	0x0001d1db
   1d264:	0001d1db 	.word	0x0001d1db
   1d268:	0001d1b5 	.word	0x0001d1b5
   1d26c:	0001d1b5 	.word	0x0001d1b5
   1d270:	0001d1b5 	.word	0x0001d1b5
   1d274:	0001d1b5 	.word	0x0001d1b5
   1d278:	0001d1b5 	.word	0x0001d1b5
   1d27c:	0001d1b5 	.word	0x0001d1b5

0001d280 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1d280:	f04f 32ff 	mov.w	r2, #4294967295
   1d284:	4b06      	ldr	r3, [pc, #24]	; (1d2a0 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
   1d286:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1d288:	601a      	str	r2, [r3, #0]
   1d28a:	619a      	str	r2, [r3, #24]
   1d28c:	631a      	str	r2, [r3, #48]	; 0x30
   1d28e:	649a      	str	r2, [r3, #72]	; 0x48
   1d290:	661a      	str	r2, [r3, #96]	; 0x60
   1d292:	679a      	str	r2, [r3, #120]	; 0x78
   1d294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1d298:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   1d29c:	4770      	bx	lr
   1d29e:	bf00      	nop
   1d2a0:	2000e628 	.word	0x2000e628

0001d2a4 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1d2a4:	490b      	ldr	r1, [pc, #44]	; (1d2d4 <nrf91_socket_is_supported+0x30>)
{
   1d2a6:	4603      	mov	r3, r0
	if (offload_disabled) {
   1d2a8:	7808      	ldrb	r0, [r1, #0]
   1d2aa:	b980      	cbnz	r0, 1d2ce <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1d2ac:	490a      	ldr	r1, [pc, #40]	; (1d2d8 <nrf91_socket_is_supported+0x34>)
   1d2ae:	7809      	ldrb	r1, [r1, #0]
   1d2b0:	b139      	cbz	r1, 1d2c2 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1d2b2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   1d2b6:	2902      	cmp	r1, #2
   1d2b8:	d90a      	bls.n	1d2d0 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1d2ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1d2be:	2a01      	cmp	r2, #1
   1d2c0:	d906      	bls.n	1d2d0 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   1d2c2:	3b01      	subs	r3, #1
   1d2c4:	2b02      	cmp	r3, #2
   1d2c6:	bf8c      	ite	hi
   1d2c8:	2000      	movhi	r0, #0
   1d2ca:	2001      	movls	r0, #1
	return af_is_supported(family);
   1d2cc:	4770      	bx	lr
		return false;
   1d2ce:	2000      	movs	r0, #0
}
   1d2d0:	4770      	bx	lr
   1d2d2:	bf00      	nop
   1d2d4:	2000f3c3 	.word	0x2000f3c3
   1d2d8:	2000f3c2 	.word	0x2000f3c2

0001d2dc <pollcb>:
{
   1d2dc:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1d2de:	2300      	movs	r3, #0
   1d2e0:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   1d2e2:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   1d2e4:	4c08      	ldr	r4, [pc, #32]	; (1d308 <pollcb+0x2c>)
   1d2e6:	fb05 f203 	mul.w	r2, r5, r3
   1d2ea:	58a6      	ldr	r6, [r4, r2]
   1d2ec:	42b1      	cmp	r1, r6
   1d2ee:	d106      	bne.n	1d2fe <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   1d2f0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   1d2f4:	3208      	adds	r2, #8
	return z_impl_k_poll_signal_raise(sig, result);
   1d2f6:	18a0      	adds	r0, r4, r2
}
   1d2f8:	bc70      	pop	{r4, r5, r6}
   1d2fa:	f00a bd93 	b.w	27e24 <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1d2fe:	3301      	adds	r3, #1
   1d300:	2b08      	cmp	r3, #8
   1d302:	d1f0      	bne.n	1d2e6 <pollcb+0xa>
}
   1d304:	bc70      	pop	{r4, r5, r6}
   1d306:	4770      	bx	lr
   1d308:	2000e628 	.word	0x2000e628

0001d30c <nrf91_socket_offload_getaddrinfo>:
{
   1d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d310:	4614      	mov	r4, r2
   1d312:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1d314:	2100      	movs	r1, #0
{
   1d316:	b08b      	sub	sp, #44	; 0x2c
   1d318:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1d31a:	2220      	movs	r2, #32
   1d31c:	a802      	add	r0, sp, #8
{
   1d31e:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1d320:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1d322:	f013 faae 	bl	30882 <memset>
	if (hints != NULL) {
   1d326:	b15c      	cbz	r4, 1d340 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   1d328:	6863      	ldr	r3, [r4, #4]
   1d32a:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   1d32c:	68e3      	ldr	r3, [r4, #12]
   1d32e:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   1d330:	68a3      	ldr	r3, [r4, #8]
   1d332:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   1d334:	6923      	ldr	r3, [r4, #16]
   1d336:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   1d338:	69e3      	ldr	r3, [r4, #28]
   1d33a:	b103      	cbz	r3, 1d33e <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1d33c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1d33e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1d340:	f04f 32ff 	mov.w	r2, #4294967295
   1d344:	f04f 33ff 	mov.w	r3, #4294967295
   1d348:	4834      	ldr	r0, [pc, #208]	; (1d41c <nrf91_socket_offload_getaddrinfo+0x110>)
   1d34a:	f011 fea2 	bl	2f092 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1d34e:	4631      	mov	r1, r6
   1d350:	4622      	mov	r2, r4
   1d352:	4628      	mov	r0, r5
   1d354:	ab01      	add	r3, sp, #4
   1d356:	f005 fed7 	bl	23108 <nrf_getaddrinfo>
	if (retval != 0) {
   1d35a:	4606      	mov	r6, r0
   1d35c:	b948      	cbnz	r0, 1d372 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   1d35e:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1d360:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1d362:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1d366:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   1d368:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1d36a:	b94d      	cbnz	r5, 1d380 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   1d36c:	9801      	ldr	r0, [sp, #4]
   1d36e:	f012 fb76 	bl	2fa5e <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   1d372:	482a      	ldr	r0, [pc, #168]	; (1d41c <nrf91_socket_offload_getaddrinfo+0x110>)
   1d374:	f011 fe8f 	bl	2f096 <k_mutex_unlock.isra.0>
}
   1d378:	4630      	mov	r0, r6
   1d37a:	b00b      	add	sp, #44	; 0x2c
   1d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   1d380:	2050      	movs	r0, #80	; 0x50
   1d382:	f013 fa2a 	bl	307da <k_malloc>
		if (next_z_res == NULL) {
   1d386:	4604      	mov	r4, r0
   1d388:	2800      	cmp	r0, #0
   1d38a:	d040      	beq.n	1d40e <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   1d38c:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1d390:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   1d394:	682b      	ldr	r3, [r5, #0]
   1d396:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1d398:	68ab      	ldr	r3, [r5, #8]
   1d39a:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   1d39c:	686b      	ldr	r3, [r5, #4]
   1d39e:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   1d3a0:	68eb      	ldr	r3, [r5, #12]
   1d3a2:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1d3a4:	f8d5 b004 	ldr.w	fp, [r5, #4]
   1d3a8:	f1bb 0f01 	cmp.w	fp, #1
   1d3ac:	d114      	bne.n	1d3d8 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1d3ae:	2008      	movs	r0, #8
   1d3b0:	f013 fa13 	bl	307da <k_malloc>
   1d3b4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1d3b6:	b338      	cbz	r0, 1d408 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1d3b8:	2308      	movs	r3, #8
   1d3ba:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1d3bc:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   1d3be:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   1d3c0:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   1d3c4:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1d3c6:	68db      	ldr	r3, [r3, #12]
   1d3c8:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   1d3ca:	f1b8 0f00 	cmp.w	r8, #0
   1d3ce:	d121      	bne.n	1d414 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   1d3d0:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   1d3d2:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   1d3d4:	69ed      	ldr	r5, [r5, #28]
   1d3d6:	e7c8      	b.n	1d36a <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1d3d8:	f1bb 0f02 	cmp.w	fp, #2
   1d3dc:	d009      	beq.n	1d3f2 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   1d3de:	f013 f9f5 	bl	307cc <k_free>
			retval = DNS_EAI_FAMILY;
   1d3e2:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   1d3e6:	6838      	ldr	r0, [r7, #0]
   1d3e8:	f011 fd88 	bl	2eefc <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1d3ec:	2300      	movs	r3, #0
   1d3ee:	603b      	str	r3, [r7, #0]
   1d3f0:	e7bc      	b.n	1d36c <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1d3f2:	2018      	movs	r0, #24
   1d3f4:	f013 f9f1 	bl	307da <k_malloc>
   1d3f8:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1d3fa:	b128      	cbz	r0, 1d408 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1d3fc:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1d400:	6969      	ldr	r1, [r5, #20]
   1d402:	f011 fd88 	bl	2ef16 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   1d406:	e7e0      	b.n	1d3ca <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   1d408:	4620      	mov	r0, r4
   1d40a:	f013 f9df 	bl	307cc <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   1d40e:	f06f 0609 	mvn.w	r6, #9
   1d412:	e7e8      	b.n	1d3e6 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   1d414:	f8c8 4000 	str.w	r4, [r8]
   1d418:	e7db      	b.n	1d3d2 <nrf91_socket_offload_getaddrinfo+0xc6>
   1d41a:	bf00      	nop
   1d41c:	2000ce54 	.word	0x2000ce54

0001d420 <nrf91_socket_offload_sendmsg>:
{
   1d420:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d424:	4607      	mov	r7, r0
   1d426:	4690      	mov	r8, r2
	if (msg == NULL) {
   1d428:	460c      	mov	r4, r1
   1d42a:	b379      	cbz	r1, 1d48c <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d42c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1d42e:	461a      	mov	r2, r3
   1d430:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d432:	4283      	cmp	r3, r0
   1d434:	d134      	bne.n	1d4a0 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   1d436:	2a80      	cmp	r2, #128	; 0x80
   1d438:	d871      	bhi.n	1d51e <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d43a:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1d43c:	f04f 32ff 	mov.w	r2, #4294967295
   1d440:	f04f 33ff 	mov.w	r3, #4294967295
   1d444:	4838      	ldr	r0, [pc, #224]	; (1d528 <nrf91_socket_offload_sendmsg+0x108>)
   1d446:	f011 fe24 	bl	2f092 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1d44a:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1d44c:	4e37      	ldr	r6, [pc, #220]	; (1d52c <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d44e:	68e3      	ldr	r3, [r4, #12]
   1d450:	429d      	cmp	r5, r3
   1d452:	d32c      	bcc.n	1d4ae <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   1d454:	2600      	movs	r6, #0
		ret = 0;
   1d456:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1d458:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1d52c <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   1d45c:	45b1      	cmp	r9, r6
   1d45e:	dd11      	ble.n	1d484 <nrf91_socket_offload_sendmsg+0x64>
   1d460:	b985      	cbnz	r5, 1d484 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   1d462:	6863      	ldr	r3, [r4, #4]
   1d464:	4638      	mov	r0, r7
   1d466:	9301      	str	r3, [sp, #4]
   1d468:	6823      	ldr	r3, [r4, #0]
   1d46a:	eba9 0206 	sub.w	r2, r9, r6
   1d46e:	9300      	str	r3, [sp, #0]
   1d470:	eb0a 0106 	add.w	r1, sl, r6
   1d474:	4643      	mov	r3, r8
   1d476:	f011 fd7b 	bl	2ef70 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1d47a:	1e05      	subs	r5, r0, #0
   1d47c:	ddee      	ble.n	1d45c <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   1d47e:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   1d480:	45b1      	cmp	r9, r6
   1d482:	dcee      	bgt.n	1d462 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   1d484:	4828      	ldr	r0, [pc, #160]	; (1d528 <nrf91_socket_offload_sendmsg+0x108>)
   1d486:	f011 fe06 	bl	2f096 <k_mutex_unlock.isra.0>
		return ret;
   1d48a:	e005      	b.n	1d498 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   1d48c:	f00e fd6a 	bl	2bf64 <__errno>
   1d490:	2316      	movs	r3, #22
		return -1;
   1d492:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1d496:	6003      	str	r3, [r0, #0]
}
   1d498:	4628      	mov	r0, r5
   1d49a:	b002      	add	sp, #8
   1d49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1d4a0:	68a1      	ldr	r1, [r4, #8]
   1d4a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d4a6:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d4a8:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1d4aa:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d4ac:	e7c1      	b.n	1d432 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1d4ae:	68a3      	ldr	r3, [r4, #8]
   1d4b0:	eb06 0009 	add.w	r0, r6, r9
   1d4b4:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   1d4b8:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1d4bc:	6852      	ldr	r2, [r2, #4]
   1d4be:	f013 f9c0 	bl	30842 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1d4c2:	68a3      	ldr	r3, [r4, #8]
   1d4c4:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1d4c8:	4453      	add	r3, sl
   1d4ca:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d4cc:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1d4ce:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1d4d0:	e7bd      	b.n	1d44e <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   1d4d2:	68a3      	ldr	r3, [r4, #8]
   1d4d4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1d4d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1d4dc:	685b      	ldr	r3, [r3, #4]
   1d4de:	b13b      	cbz	r3, 1d4f0 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   1d4e0:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1d4e4:	68a3      	ldr	r3, [r4, #8]
   1d4e6:	eb03 020a 	add.w	r2, r3, sl
   1d4ea:	6852      	ldr	r2, [r2, #4]
   1d4ec:	4591      	cmp	r9, r2
   1d4ee:	d304      	bcc.n	1d4fa <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d4f0:	3601      	adds	r6, #1
   1d4f2:	68e3      	ldr	r3, [r4, #12]
   1d4f4:	429e      	cmp	r6, r3
   1d4f6:	d3ec      	bcc.n	1d4d2 <nrf91_socket_offload_sendmsg+0xb2>
   1d4f8:	e7ce      	b.n	1d498 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   1d4fa:	f853 100a 	ldr.w	r1, [r3, sl]
   1d4fe:	6863      	ldr	r3, [r4, #4]
   1d500:	4449      	add	r1, r9
   1d502:	9301      	str	r3, [sp, #4]
   1d504:	6823      	ldr	r3, [r4, #0]
   1d506:	4638      	mov	r0, r7
   1d508:	9300      	str	r3, [sp, #0]
   1d50a:	eba2 0209 	sub.w	r2, r2, r9
   1d50e:	4643      	mov	r3, r8
   1d510:	f011 fd2e 	bl	2ef70 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1d514:	1e01      	subs	r1, r0, #0
   1d516:	db05      	blt.n	1d524 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   1d518:	4489      	add	r9, r1
			len += ret;
   1d51a:	440d      	add	r5, r1
   1d51c:	e7e2      	b.n	1d4e4 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1d51e:	2600      	movs	r6, #0
	len = 0;
   1d520:	4635      	mov	r5, r6
   1d522:	e7e6      	b.n	1d4f2 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   1d524:	460d      	mov	r5, r1
   1d526:	e7b7      	b.n	1d498 <nrf91_socket_offload_sendmsg+0x78>
   1d528:	2000cea4 	.word	0x2000cea4
   1d52c:	2000f342 	.word	0x2000f342

0001d530 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1d530:	f04f 32ff 	mov.w	r2, #4294967295
   1d534:	f04f 33ff 	mov.w	r3, #4294967295
{
   1d538:	b570      	push	{r4, r5, r6, lr}
   1d53a:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1d53c:	480b      	ldr	r0, [pc, #44]	; (1d56c <allocate_ctx+0x3c>)
   1d53e:	f011 fda8 	bl	2f092 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1d542:	2300      	movs	r3, #0
   1d544:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   1d546:	4a0a      	ldr	r2, [pc, #40]	; (1d570 <allocate_ctx+0x40>)
   1d548:	fb00 f103 	mul.w	r1, r0, r3
   1d54c:	5856      	ldr	r6, [r2, r1]
   1d54e:	188c      	adds	r4, r1, r2
   1d550:	3601      	adds	r6, #1
   1d552:	d105      	bne.n	1d560 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   1d554:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   1d556:	4805      	ldr	r0, [pc, #20]	; (1d56c <allocate_ctx+0x3c>)
   1d558:	f011 fd9d 	bl	2f096 <k_mutex_unlock.isra.0>
}
   1d55c:	4620      	mov	r0, r4
   1d55e:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1d560:	3301      	adds	r3, #1
   1d562:	2b08      	cmp	r3, #8
   1d564:	d1f0      	bne.n	1d548 <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   1d566:	2400      	movs	r4, #0
   1d568:	e7f5      	b.n	1d556 <allocate_ctx+0x26>
   1d56a:	bf00      	nop
   1d56c:	2000ce2c 	.word	0x2000ce2c
   1d570:	2000e628 	.word	0x2000e628

0001d574 <release_ctx>:
{
   1d574:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1d576:	4d09      	ldr	r5, [pc, #36]	; (1d59c <release_ctx+0x28>)
{
   1d578:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1d57a:	f04f 32ff 	mov.w	r2, #4294967295
   1d57e:	4628      	mov	r0, r5
   1d580:	f04f 33ff 	mov.w	r3, #4294967295
   1d584:	f011 fd85 	bl	2f092 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1d588:	2300      	movs	r3, #0
   1d58a:	f04f 32ff 	mov.w	r2, #4294967295
   1d58e:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   1d592:	4628      	mov	r0, r5
}
   1d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1d598:	f011 bd7d 	b.w	2f096 <k_mutex_unlock.isra.0>
   1d59c:	2000ce2c 	.word	0x2000ce2c

0001d5a0 <nrf91_socket_offload_accept>:
{
   1d5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d5a4:	b08b      	sub	sp, #44	; 0x2c
   1d5a6:	4607      	mov	r7, r0
   1d5a8:	460c      	mov	r4, r1
   1d5aa:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1d5ac:	f7f0 f9b8 	bl	d920 <z_reserve_fd>
   1d5b0:	4606      	mov	r6, r0
	if (fd < 0) {
   1d5b2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1d5b4:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1d5b6:	db1e      	blt.n	1d5f6 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   1d5b8:	b304      	cbz	r4, 1d5fc <nrf91_socket_offload_accept+0x5c>
   1d5ba:	b315      	cbz	r5, 1d602 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d5bc:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1d5be:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1d5c0:	2b08      	cmp	r3, #8
   1d5c2:	bf14      	ite	ne
   1d5c4:	2324      	movne	r3, #36	; 0x24
   1d5c6:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1d5c8:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1d5cc:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1d5ce:	4649      	mov	r1, r9
   1d5d0:	f012 fbc5 	bl	2fd5e <nrf_accept>
	if (new_sd < 0) {
   1d5d4:	f1b0 0800 	subs.w	r8, r0, #0
   1d5d8:	db0a      	blt.n	1d5f0 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   1d5da:	f7ff ffa9 	bl	1d530 <allocate_ctx>
	if (ctx == NULL) {
   1d5de:	4607      	mov	r7, r0
   1d5e0:	b990      	cbnz	r0, 1d608 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   1d5e2:	f00e fcbf 	bl	2bf64 <__errno>
   1d5e6:	230c      	movs	r3, #12
   1d5e8:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1d5ea:	4640      	mov	r0, r8
   1d5ec:	f006 f834 	bl	23658 <nrf_close>
	z_free_fd(fd);
   1d5f0:	4630      	mov	r0, r6
   1d5f2:	f7f0 f9e3 	bl	d9bc <z_free_fd>
		return -1;
   1d5f6:	f04f 36ff 	mov.w	r6, #4294967295
   1d5fa:	e018      	b.n	1d62e <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d5fc:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d5fe:	46a1      	mov	r9, r4
   1d600:	e7e5      	b.n	1d5ce <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1d602:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1d604:	46a9      	mov	r9, r5
   1d606:	e7e2      	b.n	1d5ce <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   1d608:	b164      	cbz	r4, 1d624 <nrf91_socket_offload_accept+0x84>
   1d60a:	b15d      	cbz	r5, 1d624 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1d60c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d610:	2b01      	cmp	r3, #1
   1d612:	d110      	bne.n	1d636 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   1d614:	2208      	movs	r2, #8
   1d616:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1d618:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   1d61c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1d61e:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   1d620:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1d622:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1d624:	4639      	mov	r1, r7
   1d626:	4630      	mov	r0, r6
   1d628:	4a0d      	ldr	r2, [pc, #52]	; (1d660 <nrf91_socket_offload_accept+0xc0>)
   1d62a:	f7f0 f9af 	bl	d98c <z_finalize_fd>
}
   1d62e:	4630      	mov	r0, r6
   1d630:	b00b      	add	sp, #44	; 0x2c
   1d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1d636:	2b02      	cmp	r3, #2
   1d638:	d106      	bne.n	1d648 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   1d63a:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1d63c:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1d63e:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1d640:	a901      	add	r1, sp, #4
   1d642:	f011 fc68 	bl	2ef16 <nrf_to_z_ipv6>
   1d646:	e7ed      	b.n	1d624 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   1d648:	f00e fc8c 	bl	2bf64 <__errno>
   1d64c:	2386      	movs	r3, #134	; 0x86
   1d64e:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1d650:	4640      	mov	r0, r8
   1d652:	f006 f801 	bl	23658 <nrf_close>
		release_ctx(ctx);
   1d656:	4638      	mov	r0, r7
   1d658:	f7ff ff8c 	bl	1d574 <release_ctx>
   1d65c:	e7c8      	b.n	1d5f0 <nrf91_socket_offload_accept+0x50>
   1d65e:	bf00      	nop
   1d660:	000326d8 	.word	0x000326d8

0001d664 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
   1d664:	b510      	push	{r4, lr}
   1d666:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
   1d668:	4b09      	ldr	r3, [pc, #36]	; (1d690 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   1d66a:	4a0a      	ldr	r2, [pc, #40]	; (1d694 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
   1d66c:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   1d66e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d670:	4809      	ldr	r0, [pc, #36]	; (1d698 <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   1d672:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1d674:	f7f2 ff0e 	bl	10494 <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d678:	6823      	ldr	r3, [r4, #0]
   1d67a:	330c      	adds	r3, #12
   1d67c:	e8d3 1fef 	ldaex	r1, [r3]
   1d680:	f041 0108 	orr.w	r1, r1, #8
   1d684:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d688:	2a00      	cmp	r2, #0
   1d68a:	d1f7      	bne.n	1d67c <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
   1d68c:	bd10      	pop	{r4, pc}
   1d68e:	bf00      	nop
   1d690:	2000e624 	.word	0x2000e624
   1d694:	0001d7a9 	.word	0x0001d7a9
   1d698:	000326d0 	.word	0x000326d0

0001d69c <nrf91_socket_offload_ioctl>:
{
   1d69c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   1d69e:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   1d6a2:	6804      	ldr	r4, [r0, #0]
{
   1d6a4:	b087      	sub	sp, #28
	switch (request) {
   1d6a6:	2b03      	cmp	r3, #3
   1d6a8:	d857      	bhi.n	1d75a <nrf91_socket_offload_ioctl+0xbe>
   1d6aa:	e8df f003 	tbb	[pc, r3]
   1d6ae:	4002      	.short	0x4002
   1d6b0:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   1d6b2:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   1d6b4:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   1d6b8:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   1d6ba:	4a3a      	ldr	r2, [pc, #232]	; (1d7a4 <nrf91_socket_offload_ioctl+0x108>)
   1d6bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1d6c0:	9204      	str	r2, [sp, #16]
   1d6c2:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d6c6:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   1d6ca:	6833      	ldr	r3, [r6, #0]
   1d6cc:	4299      	cmp	r1, r3
   1d6ce:	d104      	bne.n	1d6da <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   1d6d0:	f00e fc48 	bl	2bf64 <__errno>
   1d6d4:	230c      	movs	r3, #12
		errno = EINVAL;
   1d6d6:	6003      	str	r3, [r0, #0]
   1d6d8:	e014      	b.n	1d704 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   1d6da:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   1d6de:	4628      	mov	r0, r5
   1d6e0:	f013 f86a 	bl	307b8 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   1d6e4:	462b      	mov	r3, r5
   1d6e6:	2200      	movs	r2, #0
   1d6e8:	4639      	mov	r1, r7
   1d6ea:	6830      	ldr	r0, [r6, #0]
   1d6ec:	f00a fa7c 	bl	27be8 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   1d6f0:	2308      	movs	r3, #8
   1d6f2:	4620      	mov	r0, r4
   1d6f4:	9300      	str	r3, [sp, #0]
   1d6f6:	223c      	movs	r2, #60	; 0x3c
   1d6f8:	4639      	mov	r1, r7
   1d6fa:	ab04      	add	r3, sp, #16
   1d6fc:	f006 f8ec 	bl	238d8 <nrf_setsockopt>
	if (err) {
   1d700:	4604      	mov	r4, r0
   1d702:	b110      	cbz	r0, 1d70a <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   1d704:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   1d708:	e00e      	b.n	1d728 <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   1d70a:	6833      	ldr	r3, [r6, #0]
   1d70c:	3314      	adds	r3, #20
   1d70e:	6033      	str	r3, [r6, #0]
	flags = 0;
   1d710:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   1d714:	4628      	mov	r0, r5
   1d716:	aa02      	add	r2, sp, #8
   1d718:	a903      	add	r1, sp, #12
   1d71a:	f013 f852 	bl	307c2 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1d71e:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   1d720:	2b00      	cmp	r3, #0
   1d722:	bf18      	it	ne
   1d724:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   1d728:	4620      	mov	r0, r4
   1d72a:	b007      	add	sp, #28
   1d72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   1d72e:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   1d732:	6813      	ldr	r3, [r2, #0]
   1d734:	3314      	adds	r3, #20
   1d736:	6013      	str	r3, [r2, #0]
	signaled = 0;
   1d738:	2300      	movs	r3, #0
	flags = 0;
   1d73a:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1d73e:	aa03      	add	r2, sp, #12
   1d740:	a904      	add	r1, sp, #16
   1d742:	3008      	adds	r0, #8
   1d744:	f013 f83d 	bl	307c2 <z_impl_k_poll_signal_check>
	if (!signaled) {
   1d748:	9b04      	ldr	r3, [sp, #16]
   1d74a:	b10b      	cbz	r3, 1d750 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   1d74c:	9b03      	ldr	r3, [sp, #12]
   1d74e:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   1d750:	2400      	movs	r4, #0
   1d752:	e7e9      	b.n	1d728 <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   1d754:	6813      	ldr	r3, [r2, #0]
   1d756:	6043      	str	r3, [r0, #4]
		return 0;
   1d758:	e7fa      	b.n	1d750 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   1d75a:	2903      	cmp	r1, #3
   1d75c:	d012      	beq.n	1d784 <nrf91_socket_offload_ioctl+0xe8>
   1d75e:	2904      	cmp	r1, #4
   1d760:	d118      	bne.n	1d794 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   1d762:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   1d764:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   1d768:	d003      	beq.n	1d772 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   1d76a:	f00e fbfb 	bl	2bf64 <__errno>
   1d76e:	2316      	movs	r3, #22
   1d770:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d772:	2104      	movs	r1, #4
   1d774:	4620      	mov	r0, r4
   1d776:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   1d77a:	b007      	add	sp, #28
   1d77c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1d780:	f012 bd35 	b.w	301ee <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1d784:	4620      	mov	r0, r4
   1d786:	2200      	movs	r2, #0
   1d788:	f012 fd31 	bl	301ee <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1d78c:	0384      	lsls	r4, r0, #14
   1d78e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1d792:	e7c9      	b.n	1d728 <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   1d794:	f00e fbe6 	bl	2bf64 <__errno>
   1d798:	2316      	movs	r3, #22
   1d79a:	e79c      	b.n	1d6d6 <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   1d79c:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1d7a0:	e7c2      	b.n	1d728 <nrf91_socket_offload_ioctl+0x8c>
   1d7a2:	bf00      	nop
   1d7a4:	0001d2dd 	.word	0x0001d2dd

0001d7a8 <nrf91_socket_create>:
{
   1d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1d7ac:	1e0d      	subs	r5, r1, #0
{
   1d7ae:	4607      	mov	r7, r0
   1d7b0:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   1d7b2:	da12      	bge.n	1d7da <nrf91_socket_create+0x32>
	k_sched_lock();
   1d7b4:	f008 fd04 	bl	261c0 <k_sched_lock>
	*offload_lock = true;
   1d7b8:	4e1c      	ldr	r6, [pc, #112]	; (1d82c <nrf91_socket_create+0x84>)
   1d7ba:	2301      	movs	r3, #1
   1d7bc:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   1d7be:	4642      	mov	r2, r8
   1d7c0:	4638      	mov	r0, r7
   1d7c2:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   1d7c6:	f7f2 fd1d 	bl	10204 <z_impl_zsock_socket>
	*offload_lock = false;
   1d7ca:	2300      	movs	r3, #0
   1d7cc:	7033      	strb	r3, [r6, #0]
   1d7ce:	4604      	mov	r4, r0
	k_sched_unlock();
   1d7d0:	f008 fd62 	bl	26298 <k_sched_unlock>
}
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1d7da:	006b      	lsls	r3, r5, #1
   1d7dc:	d503      	bpl.n	1d7e6 <nrf91_socket_create+0x3e>
	k_sched_lock();
   1d7de:	f008 fcef 	bl	261c0 <k_sched_lock>
	*offload_lock = true;
   1d7e2:	4e13      	ldr	r6, [pc, #76]	; (1d830 <nrf91_socket_create+0x88>)
   1d7e4:	e7e9      	b.n	1d7ba <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   1d7e6:	f7f0 f89b 	bl	d920 <z_reserve_fd>
	if (fd < 0) {
   1d7ea:	1e04      	subs	r4, r0, #0
   1d7ec:	db09      	blt.n	1d802 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   1d7ee:	4629      	mov	r1, r5
   1d7f0:	4642      	mov	r2, r8
   1d7f2:	4638      	mov	r0, r7
   1d7f4:	f012 f946 	bl	2fa84 <nrf_socket>
	if (sd < 0) {
   1d7f8:	1e05      	subs	r5, r0, #0
   1d7fa:	da05      	bge.n	1d808 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   1d7fc:	4620      	mov	r0, r4
   1d7fe:	f7f0 f8dd 	bl	d9bc <z_free_fd>
		return -1;
   1d802:	f04f 34ff 	mov.w	r4, #4294967295
   1d806:	e7e5      	b.n	1d7d4 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   1d808:	f7ff fe92 	bl	1d530 <allocate_ctx>
	if (ctx == NULL) {
   1d80c:	4601      	mov	r1, r0
   1d80e:	b938      	cbnz	r0, 1d820 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   1d810:	f00e fba8 	bl	2bf64 <__errno>
   1d814:	230c      	movs	r3, #12
   1d816:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1d818:	4628      	mov	r0, r5
   1d81a:	f005 ff1d 	bl	23658 <nrf_close>
		z_free_fd(fd);
   1d81e:	e7ed      	b.n	1d7fc <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   1d820:	4620      	mov	r0, r4
   1d822:	4a04      	ldr	r2, [pc, #16]	; (1d834 <nrf91_socket_create+0x8c>)
   1d824:	f7f0 f8b2 	bl	d98c <z_finalize_fd>
	return fd;
   1d828:	e7d4      	b.n	1d7d4 <nrf91_socket_create+0x2c>
   1d82a:	bf00      	nop
   1d82c:	2000f3c3 	.word	0x2000f3c3
   1d830:	2000f3c2 	.word	0x2000f3c2
   1d834:	000326d8 	.word	0x000326d8

0001d838 <z_impl_gpio_pin_configure>:
{
   1d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d83c:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   1d840:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   1d842:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1d846:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d848:	d00e      	beq.n	1d868 <z_impl_gpio_pin_configure+0x30>
   1d84a:	4942      	ldr	r1, [pc, #264]	; (1d954 <z_impl_gpio_pin_configure+0x11c>)
   1d84c:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1d850:	4a41      	ldr	r2, [pc, #260]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d852:	4842      	ldr	r0, [pc, #264]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d854:	f00d fab0 	bl	2adb8 <assert_print>
   1d858:	4841      	ldr	r0, [pc, #260]	; (1d960 <z_impl_gpio_pin_configure+0x128>)
   1d85a:	f00d faad 	bl	2adb8 <assert_print>
   1d85e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d862:	483d      	ldr	r0, [pc, #244]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d864:	f00d faa1 	bl	2adaa <assert_post_action>
   1d868:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1d86c:	2a30      	cmp	r2, #48	; 0x30
   1d86e:	d10c      	bne.n	1d88a <z_impl_gpio_pin_configure+0x52>
   1d870:	493c      	ldr	r1, [pc, #240]	; (1d964 <z_impl_gpio_pin_configure+0x12c>)
   1d872:	f240 23d7 	movw	r3, #727	; 0x2d7
   1d876:	4a38      	ldr	r2, [pc, #224]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d878:	4838      	ldr	r0, [pc, #224]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d87a:	f00d fa9d 	bl	2adb8 <assert_print>
   1d87e:	483a      	ldr	r0, [pc, #232]	; (1d968 <z_impl_gpio_pin_configure+0x130>)
   1d880:	f00d fa9a 	bl	2adb8 <assert_print>
   1d884:	f240 21d7 	movw	r1, #727	; 0x2d7
   1d888:	e7eb      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1d88a:	4a38      	ldr	r2, [pc, #224]	; (1d96c <z_impl_gpio_pin_configure+0x134>)
   1d88c:	4d38      	ldr	r5, [pc, #224]	; (1d970 <z_impl_gpio_pin_configure+0x138>)
   1d88e:	401a      	ands	r2, r3
   1d890:	42aa      	cmp	r2, r5
   1d892:	d10c      	bne.n	1d8ae <z_impl_gpio_pin_configure+0x76>
   1d894:	4937      	ldr	r1, [pc, #220]	; (1d974 <z_impl_gpio_pin_configure+0x13c>)
   1d896:	f240 23db 	movw	r3, #731	; 0x2db
   1d89a:	4a2f      	ldr	r2, [pc, #188]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d89c:	482f      	ldr	r0, [pc, #188]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d89e:	f00d fa8b 	bl	2adb8 <assert_print>
   1d8a2:	4835      	ldr	r0, [pc, #212]	; (1d978 <z_impl_gpio_pin_configure+0x140>)
   1d8a4:	f00d fa88 	bl	2adb8 <assert_print>
   1d8a8:	f240 21db 	movw	r1, #731	; 0x2db
   1d8ac:	e7d9      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d8ae:	f003 0206 	and.w	r2, r3, #6
   1d8b2:	2a04      	cmp	r2, #4
   1d8b4:	d109      	bne.n	1d8ca <z_impl_gpio_pin_configure+0x92>
   1d8b6:	4931      	ldr	r1, [pc, #196]	; (1d97c <z_impl_gpio_pin_configure+0x144>)
   1d8b8:	f240 23de 	movw	r3, #734	; 0x2de
   1d8bc:	4a26      	ldr	r2, [pc, #152]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d8be:	4827      	ldr	r0, [pc, #156]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d8c0:	f00d fa7a 	bl	2adb8 <assert_print>
   1d8c4:	f240 21de 	movw	r1, #734	; 0x2de
   1d8c8:	e7cb      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1d8ca:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1d8ce:	d016      	beq.n	1d8fe <z_impl_gpio_pin_configure+0xc6>
   1d8d0:	039d      	lsls	r5, r3, #14
   1d8d2:	d40c      	bmi.n	1d8ee <z_impl_gpio_pin_configure+0xb6>
   1d8d4:	492a      	ldr	r1, [pc, #168]	; (1d980 <z_impl_gpio_pin_configure+0x148>)
   1d8d6:	f240 23e1 	movw	r3, #737	; 0x2e1
   1d8da:	4a1f      	ldr	r2, [pc, #124]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d8dc:	481f      	ldr	r0, [pc, #124]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d8de:	f00d fa6b 	bl	2adb8 <assert_print>
   1d8e2:	4828      	ldr	r0, [pc, #160]	; (1d984 <z_impl_gpio_pin_configure+0x14c>)
   1d8e4:	f00d fa68 	bl	2adb8 <assert_print>
   1d8e8:	f240 21e1 	movw	r1, #737	; 0x2e1
   1d8ec:	e7b9      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d8ee:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1d8f2:	d018      	beq.n	1d926 <z_impl_gpio_pin_configure+0xee>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d8f4:	4a24      	ldr	r2, [pc, #144]	; (1d988 <z_impl_gpio_pin_configure+0x150>)
   1d8f6:	439a      	bics	r2, r3
   1d8f8:	d101      	bne.n	1d8fe <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d8fa:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d8fe:	2501      	movs	r5, #1
   1d900:	6824      	ldr	r4, [r4, #0]
   1d902:	408d      	lsls	r5, r1
   1d904:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d90a:	d119      	bne.n	1d940 <z_impl_gpio_pin_configure+0x108>
   1d90c:	491f      	ldr	r1, [pc, #124]	; (1d98c <z_impl_gpio_pin_configure+0x154>)
   1d90e:	f240 23f1 	movw	r3, #753	; 0x2f1
   1d912:	4a11      	ldr	r2, [pc, #68]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d914:	4811      	ldr	r0, [pc, #68]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d916:	f00d fa4f 	bl	2adb8 <assert_print>
   1d91a:	481d      	ldr	r0, [pc, #116]	; (1d990 <z_impl_gpio_pin_configure+0x158>)
   1d91c:	f00d fa4c 	bl	2adb8 <assert_print>
   1d920:	f240 21f1 	movw	r1, #753	; 0x2f1
   1d924:	e79d      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d926:	491b      	ldr	r1, [pc, #108]	; (1d994 <z_impl_gpio_pin_configure+0x15c>)
   1d928:	f240 23e5 	movw	r3, #741	; 0x2e5
   1d92c:	4a0a      	ldr	r2, [pc, #40]	; (1d958 <z_impl_gpio_pin_configure+0x120>)
   1d92e:	480b      	ldr	r0, [pc, #44]	; (1d95c <z_impl_gpio_pin_configure+0x124>)
   1d930:	f00d fa42 	bl	2adb8 <assert_print>
   1d934:	4818      	ldr	r0, [pc, #96]	; (1d998 <z_impl_gpio_pin_configure+0x160>)
   1d936:	f00d fa3f 	bl	2adb8 <assert_print>
   1d93a:	f240 21e5 	movw	r1, #741	; 0x2e5
   1d93e:	e790      	b.n	1d862 <z_impl_gpio_pin_configure+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d940:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d942:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d944:	bf4c      	ite	mi
   1d946:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d948:	43ac      	bicpl	r4, r5
   1d94a:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1d94c:	683b      	ldr	r3, [r7, #0]
}
   1d94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1d952:	4718      	bx	r3
   1d954:	000384d8 	.word	0x000384d8
   1d958:	000357c9 	.word	0x000357c9
   1d95c:	00033bc2 	.word	0x00033bc2
   1d960:	00038535 	.word	0x00038535
   1d964:	00038559 	.word	0x00038559
   1d968:	00038592 	.word	0x00038592
   1d96c:	00030002 	.word	0x00030002
   1d970:	00010002 	.word	0x00010002
   1d974:	000385cf 	.word	0x000385cf
   1d978:	00038616 	.word	0x00038616
   1d97c:	00038665 	.word	0x00038665
   1d980:	00038698 	.word	0x00038698
   1d984:	000386de 	.word	0x000386de
   1d988:	00100001 	.word	0x00100001
   1d98c:	000357fa 	.word	0x000357fa
   1d990:	00035838 	.word	0x00035838
   1d994:	00038719 	.word	0x00038719
   1d998:	0003875a 	.word	0x0003875a

0001d99c <z_impl_gpio_pin_interrupt_configure>:
{
   1d99c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d99e:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   1d9a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	const struct gpio_driver_data *const data =
   1d9a6:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1d9a8:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1d9ac:	d10e      	bne.n	1d9cc <z_impl_gpio_pin_interrupt_configure+0x30>
   1d9ae:	4931      	ldr	r1, [pc, #196]	; (1da74 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1d9b0:	f240 2377 	movw	r3, #631	; 0x277
   1d9b4:	4a30      	ldr	r2, [pc, #192]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1d9b6:	4831      	ldr	r0, [pc, #196]	; (1da7c <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1d9b8:	f00d f9fe 	bl	2adb8 <assert_print>
   1d9bc:	4830      	ldr	r0, [pc, #192]	; (1da80 <z_impl_gpio_pin_interrupt_configure+0xe4>)
   1d9be:	f00d f9fb 	bl	2adb8 <assert_print>
   1d9c2:	f240 2177 	movw	r1, #631	; 0x277
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1d9c6:	482c      	ldr	r0, [pc, #176]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1d9c8:	f00d f9ef 	bl	2adaa <assert_post_action>
   1d9cc:	b963      	cbnz	r3, 1d9e8 <z_impl_gpio_pin_interrupt_configure+0x4c>
   1d9ce:	492d      	ldr	r1, [pc, #180]	; (1da84 <z_impl_gpio_pin_interrupt_configure+0xe8>)
   1d9d0:	f240 237b 	movw	r3, #635	; 0x27b
   1d9d4:	4a28      	ldr	r2, [pc, #160]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1d9d6:	4829      	ldr	r0, [pc, #164]	; (1da7c <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1d9d8:	f00d f9ee 	bl	2adb8 <assert_print>
   1d9dc:	482a      	ldr	r0, [pc, #168]	; (1da88 <z_impl_gpio_pin_interrupt_configure+0xec>)
   1d9de:	f00d f9eb 	bl	2adb8 <assert_print>
   1d9e2:	f240 217b 	movw	r1, #635	; 0x27b
   1d9e6:	e7ee      	b.n	1d9c6 <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1d9e8:	f002 63e8 	and.w	r3, r2, #121634816	; 0x7400000
   1d9ec:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
   1d9f0:	d10c      	bne.n	1da0c <z_impl_gpio_pin_interrupt_configure+0x70>
   1d9f2:	4926      	ldr	r1, [pc, #152]	; (1da8c <z_impl_gpio_pin_interrupt_configure+0xf0>)
   1d9f4:	f240 237e 	movw	r3, #638	; 0x27e
   1d9f8:	4a1f      	ldr	r2, [pc, #124]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1d9fa:	4820      	ldr	r0, [pc, #128]	; (1da7c <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1d9fc:	f00d f9dc 	bl	2adb8 <assert_print>
   1da00:	4823      	ldr	r0, [pc, #140]	; (1da90 <z_impl_gpio_pin_interrupt_configure+0xf4>)
   1da02:	f00d f9d9 	bl	2adb8 <assert_print>
   1da06:	f240 217e 	movw	r1, #638	; 0x27e
   1da0a:	e7dc      	b.n	1d9c6 <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1da0c:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1da10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1da14:	d10c      	bne.n	1da30 <z_impl_gpio_pin_interrupt_configure+0x94>
   1da16:	491f      	ldr	r1, [pc, #124]	; (1da94 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   1da18:	f240 2385 	movw	r3, #645	; 0x285
   1da1c:	4a16      	ldr	r2, [pc, #88]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1da1e:	4817      	ldr	r0, [pc, #92]	; (1da7c <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1da20:	f00d f9ca 	bl	2adb8 <assert_print>
   1da24:	481c      	ldr	r0, [pc, #112]	; (1da98 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   1da26:	f00d f9c7 	bl	2adb8 <assert_print>
   1da2a:	f240 2185 	movw	r1, #645	; 0x285
   1da2e:	e7ca      	b.n	1d9c6 <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1da30:	2301      	movs	r3, #1
   1da32:	6836      	ldr	r6, [r6, #0]
   1da34:	408b      	lsls	r3, r1
   1da36:	4233      	tst	r3, r6
   1da38:	d10c      	bne.n	1da54 <z_impl_gpio_pin_interrupt_configure+0xb8>
   1da3a:	4918      	ldr	r1, [pc, #96]	; (1da9c <z_impl_gpio_pin_interrupt_configure+0x100>)
   1da3c:	f240 238f 	movw	r3, #655	; 0x28f
   1da40:	4a0d      	ldr	r2, [pc, #52]	; (1da78 <z_impl_gpio_pin_interrupt_configure+0xdc>)
   1da42:	480e      	ldr	r0, [pc, #56]	; (1da7c <z_impl_gpio_pin_interrupt_configure+0xe0>)
   1da44:	f00d f9b8 	bl	2adb8 <assert_print>
   1da48:	4815      	ldr	r0, [pc, #84]	; (1daa0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1da4a:	f00d f9b5 	bl	2adb8 <assert_print>
   1da4e:	f240 218f 	movw	r1, #655	; 0x28f
   1da52:	e7b8      	b.n	1d9c6 <z_impl_gpio_pin_interrupt_configure+0x2a>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1da54:	0216      	lsls	r6, r2, #8
   1da56:	d504      	bpl.n	1da62 <z_impl_gpio_pin_interrupt_configure+0xc6>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1da58:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1da5a:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1da5c:	bf18      	it	ne
   1da5e:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1da62:	69a4      	ldr	r4, [r4, #24]
   1da64:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1da68:	46a4      	mov	ip, r4
}
   1da6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1da6e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1da72:	4760      	bx	ip
   1da74:	00038786 	.word	0x00038786
   1da78:	000357c9 	.word	0x000357c9
   1da7c:	00033bc2 	.word	0x00033bc2
   1da80:	000387c7 	.word	0x000387c7
   1da84:	000387f3 	.word	0x000387f3
   1da88:	0003881d 	.word	0x0003881d
   1da8c:	00038848 	.word	0x00038848
   1da90:	000388c9 	.word	0x000388c9
   1da94:	0003891d 	.word	0x0003891d
   1da98:	00038967 	.word	0x00038967
   1da9c:	000357fa 	.word	0x000357fa
   1daa0:	00035838 	.word	0x00035838

0001daa4 <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1daa4:	2301      	movs	r3, #1
{
   1daa6:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1daa8:	fa03 f101 	lsl.w	r1, r3, r1
   1daac:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1daae:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dab0:	681b      	ldr	r3, [r3, #0]
   1dab2:	4219      	tst	r1, r3
   1dab4:	d10e      	bne.n	1dad4 <gpio_pin_set+0x30>
   1dab6:	490e      	ldr	r1, [pc, #56]	; (1daf0 <gpio_pin_set+0x4c>)
   1dab8:	f240 535c 	movw	r3, #1372	; 0x55c
   1dabc:	4a0d      	ldr	r2, [pc, #52]	; (1daf4 <gpio_pin_set+0x50>)
   1dabe:	480e      	ldr	r0, [pc, #56]	; (1daf8 <gpio_pin_set+0x54>)
   1dac0:	f00d f97a 	bl	2adb8 <assert_print>
   1dac4:	480d      	ldr	r0, [pc, #52]	; (1dafc <gpio_pin_set+0x58>)
   1dac6:	f00d f977 	bl	2adb8 <assert_print>
   1daca:	f240 515c 	movw	r1, #1372	; 0x55c
   1dace:	4809      	ldr	r0, [pc, #36]	; (1daf4 <gpio_pin_set+0x50>)
   1dad0:	f00d f96b 	bl	2adaa <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dad4:	6823      	ldr	r3, [r4, #0]
   1dad6:	4219      	tst	r1, r3
   1dad8:	d003      	beq.n	1dae2 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1dada:	b122      	cbz	r2, 1dae6 <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1dadc:	6883      	ldr	r3, [r0, #8]
   1dade:	691b      	ldr	r3, [r3, #16]
   1dae0:	e003      	b.n	1daea <gpio_pin_set+0x46>
	if (value != 0)	{
   1dae2:	2a00      	cmp	r2, #0
   1dae4:	d0fa      	beq.n	1dadc <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1dae6:	6883      	ldr	r3, [r0, #8]
   1dae8:	68db      	ldr	r3, [r3, #12]
}
   1daea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1daee:	4718      	bx	r3
   1daf0:	000357fa 	.word	0x000357fa
   1daf4:	000357c9 	.word	0x000357c9
   1daf8:	00033bc2 	.word	0x00033bc2
   1dafc:	00035838 	.word	0x00035838

0001db00 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1db00:	b580      	push	{r7, lr}
   1db02:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1db04:	b088      	sub	sp, #32
   1db06:	466a      	mov	r2, sp
   1db08:	4b07      	ldr	r3, [pc, #28]	; (1db28 <get_buttons.part.0+0x28>)
   1db0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1db0e:	6153      	str	r3, [r2, #20]
   1db10:	4b06      	ldr	r3, [pc, #24]	; (1db2c <get_buttons.part.0+0x2c>)
   1db12:	4807      	ldr	r0, [pc, #28]	; (1db30 <get_buttons.part.0+0x30>)
   1db14:	6193      	str	r3, [r2, #24]
   1db16:	2303      	movs	r3, #3
   1db18:	f842 3f10 	str.w	r3, [r2, #16]!
   1db1c:	f011 fb27 	bl	2f16e <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1db20:	2000      	movs	r0, #0
   1db22:	46bd      	mov	sp, r7
   1db24:	bd80      	pop	{r7, pc}
   1db26:	bf00      	nop
   1db28:	000389ac 	.word	0x000389ac
   1db2c:	00038b0e 	.word	0x00038b0e
   1db30:	00031bf4 	.word	0x00031bf4

0001db34 <get_buttons>:
{
   1db34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1db38:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db3a:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1db3e:	4625      	mov	r5, r4
   1db40:	4e1c      	ldr	r6, [pc, #112]	; (1dbb4 <get_buttons+0x80>)
	return gpio_pin_get(spec->port, spec->pin);
   1db42:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db44:	7937      	ldrb	r7, [r6, #4]
   1db46:	6843      	ldr	r3, [r0, #4]
   1db48:	fa08 f707 	lsl.w	r7, r8, r7
   1db4c:	681b      	ldr	r3, [r3, #0]
   1db4e:	421f      	tst	r7, r3
   1db50:	d10e      	bne.n	1db70 <get_buttons+0x3c>
   1db52:	4919      	ldr	r1, [pc, #100]	; (1dbb8 <get_buttons+0x84>)
   1db54:	f240 5303 	movw	r3, #1283	; 0x503
   1db58:	4a18      	ldr	r2, [pc, #96]	; (1dbbc <get_buttons+0x88>)
   1db5a:	4819      	ldr	r0, [pc, #100]	; (1dbc0 <get_buttons+0x8c>)
   1db5c:	f00d f92c 	bl	2adb8 <assert_print>
   1db60:	4818      	ldr	r0, [pc, #96]	; (1dbc4 <get_buttons+0x90>)
   1db62:	f00d f929 	bl	2adb8 <assert_print>
   1db66:	f240 5103 	movw	r1, #1283	; 0x503
   1db6a:	4814      	ldr	r0, [pc, #80]	; (1dbbc <get_buttons+0x88>)
   1db6c:	f00d f91d 	bl	2adaa <assert_post_action>
	const struct gpio_driver_data *const data =
   1db70:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1db74:	6883      	ldr	r3, [r0, #8]
   1db76:	a901      	add	r1, sp, #4
   1db78:	685b      	ldr	r3, [r3, #4]
   1db7a:	4798      	blx	r3
	if (ret == 0) {
   1db7c:	2800      	cmp	r0, #0
   1db7e:	d00c      	beq.n	1db9a <get_buttons+0x66>
		if (val < 0) {
   1db80:	db12      	blt.n	1dba8 <get_buttons+0x74>
			ret |= 1U << i;
   1db82:	fa08 f305 	lsl.w	r3, r8, r5
   1db86:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1db88:	3501      	adds	r5, #1
   1db8a:	2d04      	cmp	r5, #4
   1db8c:	f106 0608 	add.w	r6, r6, #8
   1db90:	d1d7      	bne.n	1db42 <get_buttons+0xe>
}
   1db92:	4620      	mov	r0, r4
   1db94:	b003      	add	sp, #12
   1db96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   1db9a:	f8d9 2000 	ldr.w	r2, [r9]
   1db9e:	9b01      	ldr	r3, [sp, #4]
   1dba0:	4053      	eors	r3, r2
		if (val) {
   1dba2:	423b      	tst	r3, r7
   1dba4:	d0f0      	beq.n	1db88 <get_buttons+0x54>
   1dba6:	e7ec      	b.n	1db82 <get_buttons+0x4e>
}
   1dba8:	b003      	add	sp, #12
   1dbaa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbae:	f7ff bfa7 	b.w	1db00 <get_buttons.part.0>
   1dbb2:	bf00      	nop
   1dbb4:	00032738 	.word	0x00032738
   1dbb8:	000357fa 	.word	0x000357fa
   1dbbc:	000357c9 	.word	0x000357c9
   1dbc0:	00033bc2 	.word	0x00033bc2
   1dbc4:	00035838 	.word	0x00035838

0001dbc8 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1dbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dbcc:	4680      	mov	r8, r0
   1dbce:	4689      	mov	r9, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dbd0:	2500      	movs	r5, #0
   1dbd2:	4e17      	ldr	r6, [pc, #92]	; (1dc30 <dk_set_leds_state.part.0+0x68>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1dbd4:	af00      	add	r7, sp, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1dbd6:	fa28 f205 	lsr.w	r2, r8, r5
   1dbda:	f012 0201 	ands.w	r2, r2, #1
   1dbde:	d11d      	bne.n	1dc1c <dk_set_leds_state.part.0+0x54>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1dbe0:	fa29 f305 	lsr.w	r3, r9, r5
   1dbe4:	07db      	lsls	r3, r3, #31
   1dbe6:	d51b      	bpl.n	1dc20 <dk_set_leds_state.part.0+0x58>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1dbe8:	7931      	ldrb	r1, [r6, #4]
   1dbea:	6830      	ldr	r0, [r6, #0]
   1dbec:	f7ff ff5a 	bl	1daa4 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1dbf0:	4604      	mov	r4, r0
   1dbf2:	b1a8      	cbz	r0, 1dc20 <dk_set_leds_state.part.0+0x58>
			LOG_ERR("Cannot write LED gpio");
   1dbf4:	466d      	mov	r5, sp
   1dbf6:	b088      	sub	sp, #32
   1dbf8:	466a      	mov	r2, sp
   1dbfa:	4b0e      	ldr	r3, [pc, #56]	; (1dc34 <dk_set_leds_state.part.0+0x6c>)
   1dbfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dc00:	6153      	str	r3, [r2, #20]
   1dc02:	4b0d      	ldr	r3, [pc, #52]	; (1dc38 <dk_set_leds_state.part.0+0x70>)
   1dc04:	480d      	ldr	r0, [pc, #52]	; (1dc3c <dk_set_leds_state.part.0+0x74>)
   1dc06:	6193      	str	r3, [r2, #24]
   1dc08:	2303      	movs	r3, #3
   1dc0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc0e:	f011 faae 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1dc12:	46ad      	mov	sp, r5
			return err;
		}
	}

	return 0;
}
   1dc14:	4620      	mov	r0, r4
   1dc16:	46bd      	mov	sp, r7
   1dc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			val = 1;
   1dc1c:	2201      	movs	r2, #1
   1dc1e:	e7e3      	b.n	1dbe8 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dc20:	3501      	adds	r5, #1
   1dc22:	2d04      	cmp	r5, #4
   1dc24:	f106 0608 	add.w	r6, r6, #8
   1dc28:	d1d5      	bne.n	1dbd6 <dk_set_leds_state.part.0+0xe>
	return 0;
   1dc2a:	2400      	movs	r4, #0
   1dc2c:	e7f2      	b.n	1dc14 <dk_set_leds_state.part.0+0x4c>
   1dc2e:	bf00      	nop
   1dc30:	00032718 	.word	0x00032718
   1dc34:	000389c5 	.word	0x000389c5
   1dc38:	00038afc 	.word	0x00038afc
   1dc3c:	00031bf4 	.word	0x00031bf4

0001dc40 <callback_ctrl>:
{
   1dc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dc44:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1dc46:	2600      	movs	r6, #0
   1dc48:	4d1a      	ldr	r5, [pc, #104]	; (1dcb4 <callback_ctrl+0x74>)
					 FLAGS_GPIO_0_1_ACTIVE :
   1dc4a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1dcb8 <callback_ctrl+0x78>
{
   1dc4e:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1dc50:	6828      	ldr	r0, [r5, #0]
		if (enable) {
   1dc52:	f1b8 0f00 	cmp.w	r8, #0
   1dc56:	d021      	beq.n	1dc9c <callback_ctrl+0x5c>
					 FLAGS_GPIO_0_1_ACTIVE :
   1dc58:	4548      	cmp	r0, r9
   1dc5a:	d022      	beq.n	1dca2 <callback_ctrl+0x62>
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	bf14      	ite	ne
   1dc60:	f04f 62e8 	movne.w	r2, #121634816	; 0x7400000
   1dc64:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1dc68:	7929      	ldrb	r1, [r5, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1dc6a:	f7ff fe97 	bl	1d99c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1dc6e:	4604      	mov	r4, r0
   1dc70:	b1d0      	cbz	r0, 1dca8 <callback_ctrl+0x68>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   1dc72:	466d      	mov	r5, sp
   1dc74:	b088      	sub	sp, #32
   1dc76:	466a      	mov	r2, sp
   1dc78:	4b10      	ldr	r3, [pc, #64]	; (1dcbc <callback_ctrl+0x7c>)
   1dc7a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dc7e:	6153      	str	r3, [r2, #20]
   1dc80:	4b0f      	ldr	r3, [pc, #60]	; (1dcc0 <callback_ctrl+0x80>)
   1dc82:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1dc86:	2304      	movs	r3, #4
   1dc88:	480e      	ldr	r0, [pc, #56]	; (1dcc4 <callback_ctrl+0x84>)
   1dc8a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc8e:	f011 fa6e 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1dc92:	46ad      	mov	sp, r5
}
   1dc94:	4620      	mov	r0, r4
   1dc96:	46bd      	mov	sp, r7
   1dc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			flags = GPIO_INT_DISABLE;
   1dc9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1dca0:	e7e2      	b.n	1dc68 <callback_ctrl+0x28>
					 FLAGS_GPIO_0_1_ACTIVE :
   1dca2:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
   1dca6:	e7df      	b.n	1dc68 <callback_ctrl+0x28>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1dca8:	3601      	adds	r6, #1
   1dcaa:	2e04      	cmp	r6, #4
   1dcac:	f105 0508 	add.w	r5, r5, #8
   1dcb0:	d1ce      	bne.n	1dc50 <callback_ctrl+0x10>
   1dcb2:	e7ef      	b.n	1dc94 <callback_ctrl+0x54>
   1dcb4:	00032738 	.word	0x00032738
   1dcb8:	0003182c 	.word	0x0003182c
   1dcbc:	000389df 	.word	0x000389df
   1dcc0:	00038b29 	.word	0x00038b29
   1dcc4:	00031bf4 	.word	0x00031bf4

0001dcc8 <button_pressed>:
{
   1dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcca:	4604      	mov	r4, r0
   1dccc:	af00      	add	r7, sp, #0
	__asm__ volatile(
   1dcce:	f04f 0320 	mov.w	r3, #32
   1dcd2:	f3ef 8611 	mrs	r6, BASEPRI
   1dcd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dcde:	4828      	ldr	r0, [pc, #160]	; (1dd80 <button_pressed+0xb8>)
   1dce0:	f006 ff9e 	bl	24c20 <z_spin_lock_valid>
   1dce4:	b968      	cbnz	r0, 1dd02 <button_pressed+0x3a>
   1dce6:	2394      	movs	r3, #148	; 0x94
   1dce8:	4a26      	ldr	r2, [pc, #152]	; (1dd84 <button_pressed+0xbc>)
   1dcea:	4927      	ldr	r1, [pc, #156]	; (1dd88 <button_pressed+0xc0>)
   1dcec:	4827      	ldr	r0, [pc, #156]	; (1dd8c <button_pressed+0xc4>)
   1dcee:	f00d f863 	bl	2adb8 <assert_print>
   1dcf2:	4923      	ldr	r1, [pc, #140]	; (1dd80 <button_pressed+0xb8>)
   1dcf4:	4826      	ldr	r0, [pc, #152]	; (1dd90 <button_pressed+0xc8>)
   1dcf6:	f00d f85f 	bl	2adb8 <assert_print>
   1dcfa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dcfc:	4821      	ldr	r0, [pc, #132]	; (1dd84 <button_pressed+0xbc>)
   1dcfe:	f00d f854 	bl	2adaa <assert_post_action>
	switch (state) {
   1dd02:	4d24      	ldr	r5, [pc, #144]	; (1dd94 <button_pressed+0xcc>)
	z_spin_lock_set_owner(l);
   1dd04:	481e      	ldr	r0, [pc, #120]	; (1dd80 <button_pressed+0xb8>)
   1dd06:	f006 ffa7 	bl	24c58 <z_spin_lock_set_owner>
   1dd0a:	782b      	ldrb	r3, [r5, #0]
   1dd0c:	bb0b      	cbnz	r3, 1dd52 <button_pressed+0x8a>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   1dd0e:	4b22      	ldr	r3, [pc, #136]	; (1dd98 <button_pressed+0xd0>)
   1dd10:	429c      	cmp	r4, r3
   1dd12:	d000      	beq.n	1dd16 <button_pressed+0x4e>
   1dd14:	b9b4      	cbnz	r4, 1dd44 <button_pressed+0x7c>
			err = callback_ctrl(false);
   1dd16:	2000      	movs	r0, #0
   1dd18:	f7ff ff92 	bl	1dc40 <callback_ctrl>
			if (err) {
   1dd1c:	b178      	cbz	r0, 1dd3e <button_pressed+0x76>
				LOG_ERR("Failed disabling interrupts");
   1dd1e:	466c      	mov	r4, sp
   1dd20:	b088      	sub	sp, #32
   1dd22:	466a      	mov	r2, sp
   1dd24:	4b1d      	ldr	r3, [pc, #116]	; (1dd9c <button_pressed+0xd4>)
   1dd26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd2a:	6153      	str	r3, [r2, #20]
   1dd2c:	4b1c      	ldr	r3, [pc, #112]	; (1dda0 <button_pressed+0xd8>)
   1dd2e:	481d      	ldr	r0, [pc, #116]	; (1dda4 <button_pressed+0xdc>)
   1dd30:	6193      	str	r3, [r2, #24]
   1dd32:	2303      	movs	r3, #3
   1dd34:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd38:	f011 fa19 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1dd3c:	46a5      	mov	sp, r4
			irq_enabled = false;
   1dd3e:	2200      	movs	r2, #0
   1dd40:	4b19      	ldr	r3, [pc, #100]	; (1dda8 <button_pressed+0xe0>)
   1dd42:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   1dd44:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1dd46:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   1dd48:	702b      	strb	r3, [r5, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1dd4a:	4818      	ldr	r0, [pc, #96]	; (1ddac <button_pressed+0xe4>)
   1dd4c:	2300      	movs	r3, #0
   1dd4e:	f007 ff31 	bl	25bb4 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dd52:	480b      	ldr	r0, [pc, #44]	; (1dd80 <button_pressed+0xb8>)
   1dd54:	f006 ff72 	bl	24c3c <z_spin_unlock_valid>
   1dd58:	b958      	cbnz	r0, 1dd72 <button_pressed+0xaa>
   1dd5a:	23c2      	movs	r3, #194	; 0xc2
   1dd5c:	4a09      	ldr	r2, [pc, #36]	; (1dd84 <button_pressed+0xbc>)
   1dd5e:	4914      	ldr	r1, [pc, #80]	; (1ddb0 <button_pressed+0xe8>)
   1dd60:	480a      	ldr	r0, [pc, #40]	; (1dd8c <button_pressed+0xc4>)
   1dd62:	f00d f829 	bl	2adb8 <assert_print>
   1dd66:	4906      	ldr	r1, [pc, #24]	; (1dd80 <button_pressed+0xb8>)
   1dd68:	4812      	ldr	r0, [pc, #72]	; (1ddb4 <button_pressed+0xec>)
   1dd6a:	f00d f825 	bl	2adb8 <assert_print>
   1dd6e:	21c2      	movs	r1, #194	; 0xc2
   1dd70:	e7c4      	b.n	1dcfc <button_pressed+0x34>
	__asm__ volatile(
   1dd72:	f386 8811 	msr	BASEPRI, r6
   1dd76:	f3bf 8f6f 	isb	sy
}
   1dd7a:	46bd      	mov	sp, r7
   1dd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd7e:	bf00      	nop
   1dd80:	2000e70c 	.word	0x2000e70c
   1dd84:	000340d9 	.word	0x000340d9
   1dd88:	00034132 	.word	0x00034132
   1dd8c:	00033bc2 	.word	0x00033bc2
   1dd90:	00034147 	.word	0x00034147
   1dd94:	2000f3c5 	.word	0x2000f3c5
   1dd98:	0003182c 	.word	0x0003182c
   1dd9c:	00038a03 	.word	0x00038a03
   1dda0:	00038b1a 	.word	0x00038b1a
   1dda4:	00031bf4 	.word	0x00031bf4
   1dda8:	2000f3c4 	.word	0x2000f3c4
   1ddac:	2000dcb8 	.word	0x2000dcb8
   1ddb0:	00034106 	.word	0x00034106
   1ddb4:	0003411d 	.word	0x0003411d

0001ddb8 <buttons_scan_fn>:
{
   1ddb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (irq_enabled) {
   1ddbc:	4e4c      	ldr	r6, [pc, #304]	; (1def0 <buttons_scan_fn+0x138>)
{
   1ddbe:	af00      	add	r7, sp, #0
	if (irq_enabled) {
   1ddc0:	7833      	ldrb	r3, [r6, #0]
   1ddc2:	b1ab      	cbz	r3, 1ddf0 <buttons_scan_fn+0x38>
		err = callback_ctrl(false);
   1ddc4:	2000      	movs	r0, #0
   1ddc6:	f7ff ff3b 	bl	1dc40 <callback_ctrl>
		if (err) {
   1ddca:	b180      	cbz	r0, 1ddee <buttons_scan_fn+0x36>
			LOG_ERR("Cannot disable callbacks");
   1ddcc:	466c      	mov	r4, sp
   1ddce:	b088      	sub	sp, #32
   1ddd0:	466a      	mov	r2, sp
   1ddd2:	4b48      	ldr	r3, [pc, #288]	; (1def4 <buttons_scan_fn+0x13c>)
			LOG_ERR("Cannot enable callbacks");
   1ddd4:	6153      	str	r3, [r2, #20]
   1ddd6:	4b48      	ldr	r3, [pc, #288]	; (1def8 <buttons_scan_fn+0x140>)
   1ddd8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dddc:	6193      	str	r3, [r2, #24]
   1ddde:	2303      	movs	r3, #3
   1dde0:	4846      	ldr	r0, [pc, #280]	; (1defc <buttons_scan_fn+0x144>)
   1dde2:	f842 3f10 	str.w	r3, [r2, #16]!
   1dde6:	f011 f9c2 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1ddea:	46a5      	mov	sp, r4
   1ddec:	e037      	b.n	1de5e <buttons_scan_fn+0xa6>
		irq_enabled = false;
   1ddee:	7030      	strb	r0, [r6, #0]
	button_scan = get_buttons();
   1ddf0:	f7ff fea0 	bl	1db34 <get_buttons>
   1ddf4:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ddf6:	4b42      	ldr	r3, [pc, #264]	; (1df00 <buttons_scan_fn+0x148>)
   1ddf8:	e8d3 2fef 	ldaex	r2, [r3]
   1ddfc:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1de00:	2900      	cmp	r1, #0
   1de02:	d1f9      	bne.n	1ddf8 <buttons_scan_fn+0x40>
	if (!initial_run) {
   1de04:	4b3f      	ldr	r3, [pc, #252]	; (1df04 <buttons_scan_fn+0x14c>)
   1de06:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1df08 <buttons_scan_fn+0x150>
   1de0a:	781a      	ldrb	r2, [r3, #0]
   1de0c:	bb52      	cbnz	r2, 1de64 <buttons_scan_fn+0xac>
		if (button_scan != last_button_scan) {
   1de0e:	f8d9 3000 	ldr.w	r3, [r9]
   1de12:	42a3      	cmp	r3, r4
   1de14:	d01a      	beq.n	1de4c <buttons_scan_fn+0x94>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1de16:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   1de1a:	4b3c      	ldr	r3, [pc, #240]	; (1df0c <buttons_scan_fn+0x154>)
   1de1c:	681b      	ldr	r3, [r3, #0]
   1de1e:	b10b      	cbz	r3, 1de24 <buttons_scan_fn+0x6c>
		button_handler_cb(button_state, has_changed);
   1de20:	4641      	mov	r1, r8
   1de22:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1de24:	f04f 33ff 	mov.w	r3, #4294967295
   1de28:	f04f 32ff 	mov.w	r2, #4294967295
   1de2c:	4838      	ldr	r0, [pc, #224]	; (1df10 <buttons_scan_fn+0x158>)
   1de2e:	f006 ff4d 	bl	24ccc <z_impl_k_mutex_lock>
	return list->head;
   1de32:	4b38      	ldr	r3, [pc, #224]	; (1df14 <buttons_scan_fn+0x15c>)
   1de34:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1de36:	b135      	cbz	r5, 1de46 <buttons_scan_fn+0x8e>
   1de38:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1de3a:	682b      	ldr	r3, [r5, #0]
   1de3c:	4641      	mov	r1, r8
   1de3e:	4620      	mov	r0, r4
   1de40:	4798      	blx	r3
	return node->next;
   1de42:	686d      	ldr	r5, [r5, #4]
   1de44:	e7f7      	b.n	1de36 <buttons_scan_fn+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   1de46:	4832      	ldr	r0, [pc, #200]	; (1df10 <buttons_scan_fn+0x158>)
   1de48:	f007 f810 	bl	24e6c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1de4c:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   1de50:	b15c      	cbz	r4, 1de6a <buttons_scan_fn+0xb2>
		k_work_reschedule(&buttons_scan,
   1de52:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1de56:	2300      	movs	r3, #0
   1de58:	482f      	ldr	r0, [pc, #188]	; (1df18 <buttons_scan_fn+0x160>)
   1de5a:	f007 feab 	bl	25bb4 <k_work_reschedule>
}
   1de5e:	46bd      	mov	sp, r7
   1de60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		initial_run = false;
   1de64:	2200      	movs	r2, #0
   1de66:	701a      	strb	r2, [r3, #0]
   1de68:	e7f0      	b.n	1de4c <buttons_scan_fn+0x94>
	__asm__ volatile(
   1de6a:	f04f 0320 	mov.w	r3, #32
   1de6e:	f3ef 8811 	mrs	r8, BASEPRI
   1de72:	f383 8812 	msr	BASEPRI_MAX, r3
   1de76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1de7a:	4828      	ldr	r0, [pc, #160]	; (1df1c <buttons_scan_fn+0x164>)
   1de7c:	f006 fed0 	bl	24c20 <z_spin_lock_valid>
   1de80:	b968      	cbnz	r0, 1de9e <buttons_scan_fn+0xe6>
   1de82:	2394      	movs	r3, #148	; 0x94
   1de84:	4a26      	ldr	r2, [pc, #152]	; (1df20 <buttons_scan_fn+0x168>)
   1de86:	4927      	ldr	r1, [pc, #156]	; (1df24 <buttons_scan_fn+0x16c>)
   1de88:	4827      	ldr	r0, [pc, #156]	; (1df28 <buttons_scan_fn+0x170>)
   1de8a:	f00c ff95 	bl	2adb8 <assert_print>
   1de8e:	4923      	ldr	r1, [pc, #140]	; (1df1c <buttons_scan_fn+0x164>)
   1de90:	4826      	ldr	r0, [pc, #152]	; (1df2c <buttons_scan_fn+0x174>)
   1de92:	f00c ff91 	bl	2adb8 <assert_print>
   1de96:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1de98:	4821      	ldr	r0, [pc, #132]	; (1df20 <buttons_scan_fn+0x168>)
   1de9a:	f00c ff86 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   1de9e:	481f      	ldr	r0, [pc, #124]	; (1df1c <buttons_scan_fn+0x164>)
   1dea0:	f006 feda 	bl	24c58 <z_spin_lock_set_owner>
		switch (state) {
   1dea4:	4b22      	ldr	r3, [pc, #136]	; (1df30 <buttons_scan_fn+0x178>)
   1dea6:	781d      	ldrb	r5, [r3, #0]
   1dea8:	2d01      	cmp	r5, #1
   1deaa:	d105      	bne.n	1deb8 <buttons_scan_fn+0x100>
			err = callback_ctrl(true);
   1deac:	4628      	mov	r0, r5
			state = STATE_WAITING;
   1deae:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1deb0:	f7ff fec6 	bl	1dc40 <callback_ctrl>
   1deb4:	4604      	mov	r4, r0
			irq_enabled = true;
   1deb6:	7035      	strb	r5, [r6, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1deb8:	4818      	ldr	r0, [pc, #96]	; (1df1c <buttons_scan_fn+0x164>)
   1deba:	f006 febf 	bl	24c3c <z_spin_unlock_valid>
   1debe:	b958      	cbnz	r0, 1ded8 <buttons_scan_fn+0x120>
   1dec0:	23c2      	movs	r3, #194	; 0xc2
   1dec2:	4a17      	ldr	r2, [pc, #92]	; (1df20 <buttons_scan_fn+0x168>)
   1dec4:	491b      	ldr	r1, [pc, #108]	; (1df34 <buttons_scan_fn+0x17c>)
   1dec6:	4818      	ldr	r0, [pc, #96]	; (1df28 <buttons_scan_fn+0x170>)
   1dec8:	f00c ff76 	bl	2adb8 <assert_print>
   1decc:	4913      	ldr	r1, [pc, #76]	; (1df1c <buttons_scan_fn+0x164>)
   1dece:	481a      	ldr	r0, [pc, #104]	; (1df38 <buttons_scan_fn+0x180>)
   1ded0:	f00c ff72 	bl	2adb8 <assert_print>
   1ded4:	21c2      	movs	r1, #194	; 0xc2
   1ded6:	e7df      	b.n	1de98 <buttons_scan_fn+0xe0>
	__asm__ volatile(
   1ded8:	f388 8811 	msr	BASEPRI, r8
   1dedc:	f3bf 8f6f 	isb	sy
		if (err) {
   1dee0:	2c00      	cmp	r4, #0
   1dee2:	d0bc      	beq.n	1de5e <buttons_scan_fn+0xa6>
			LOG_ERR("Cannot enable callbacks");
   1dee4:	466c      	mov	r4, sp
   1dee6:	b088      	sub	sp, #32
   1dee8:	466a      	mov	r2, sp
   1deea:	4b14      	ldr	r3, [pc, #80]	; (1df3c <buttons_scan_fn+0x184>)
   1deec:	e772      	b.n	1ddd4 <buttons_scan_fn+0x1c>
   1deee:	bf00      	nop
   1def0:	2000f3c4 	.word	0x2000f3c4
   1def4:	00038a23 	.word	0x00038a23
   1def8:	00038b37 	.word	0x00038b37
   1defc:	00031bf4 	.word	0x00031bf4
   1df00:	2000e71c 	.word	0x2000e71c
   1df04:	2000cc7c 	.word	0x2000cc7c
   1df08:	2000e6ec 	.word	0x2000e6ec
   1df0c:	2000e720 	.word	0x2000e720
   1df10:	2000e6f0 	.word	0x2000e6f0
   1df14:	2000e704 	.word	0x2000e704
   1df18:	2000dcb8 	.word	0x2000dcb8
   1df1c:	2000e70c 	.word	0x2000e70c
   1df20:	000340d9 	.word	0x000340d9
   1df24:	00034132 	.word	0x00034132
   1df28:	00033bc2 	.word	0x00033bc2
   1df2c:	00034147 	.word	0x00034147
   1df30:	2000f3c5 	.word	0x2000f3c5
   1df34:	00034106 	.word	0x00034106
   1df38:	0003411d 	.word	0x0003411d
   1df3c:	00038a40 	.word	0x00038a40

0001df40 <dk_leds_init>:
{
   1df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1df42:	2600      	movs	r6, #0
   1df44:	4d13      	ldr	r5, [pc, #76]	; (1df94 <dk_leds_init+0x54>)
{
   1df46:	af00      	add	r7, sp, #0
				  spec->dt_flags | extra_flags);
   1df48:	88ea      	ldrh	r2, [r5, #6]
	return gpio_pin_configure(spec->port,
   1df4a:	6828      	ldr	r0, [r5, #0]
				  spec->pin,
   1df4c:	7929      	ldrb	r1, [r5, #4]
	return gpio_pin_configure(spec->port,
   1df4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1df52:	f7ff fc71 	bl	1d838 <z_impl_gpio_pin_configure>
		if (err) {
   1df56:	4604      	mov	r4, r0
   1df58:	b190      	cbz	r0, 1df80 <dk_leds_init+0x40>
			LOG_ERR("Cannot configure LED gpio");
   1df5a:	466d      	mov	r5, sp
   1df5c:	b088      	sub	sp, #32
   1df5e:	466a      	mov	r2, sp
   1df60:	4b0d      	ldr	r3, [pc, #52]	; (1df98 <dk_leds_init+0x58>)
   1df62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df66:	6153      	str	r3, [r2, #20]
   1df68:	4b0c      	ldr	r3, [pc, #48]	; (1df9c <dk_leds_init+0x5c>)
   1df6a:	480d      	ldr	r0, [pc, #52]	; (1dfa0 <dk_leds_init+0x60>)
   1df6c:	6193      	str	r3, [r2, #24]
   1df6e:	2303      	movs	r3, #3
   1df70:	f842 3f10 	str.w	r3, [r2, #16]!
   1df74:	f011 f8fb 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1df78:	46ad      	mov	sp, r5
}
   1df7a:	4620      	mov	r0, r4
   1df7c:	46bd      	mov	sp, r7
   1df7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1df80:	3601      	adds	r6, #1
   1df82:	2e04      	cmp	r6, #4
   1df84:	f105 0508 	add.w	r5, r5, #8
   1df88:	d1de      	bne.n	1df48 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1df8a:	210f      	movs	r1, #15
   1df8c:	f7ff fe1c 	bl	1dbc8 <dk_set_leds_state.part.0>
   1df90:	4604      	mov	r4, r0
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   1df92:	e7f2      	b.n	1df7a <dk_leds_init+0x3a>
   1df94:	00032718 	.word	0x00032718
   1df98:	00038a5c 	.word	0x00038a5c
   1df9c:	00038b57 	.word	0x00038b57
   1dfa0:	00031bf4 	.word	0x00031bf4

0001dfa4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dfa4:	4b05      	ldr	r3, [pc, #20]	; (1dfbc <dk_read_buttons+0x18>)
   1dfa6:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   1dfaa:	b100      	cbz	r0, 1dfae <dk_read_buttons+0xa>
		*button_state = current_state;
   1dfac:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1dfae:	4804      	ldr	r0, [pc, #16]	; (1dfc0 <dk_read_buttons+0x1c>)
   1dfb0:	b111      	cbz	r1, 1dfb8 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1dfb2:	6802      	ldr	r2, [r0, #0]
   1dfb4:	405a      	eors	r2, r3
   1dfb6:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1dfb8:	6003      	str	r3, [r0, #0]
}
   1dfba:	4770      	bx	lr
   1dfbc:	2000e71c 	.word	0x2000e71c
   1dfc0:	2000e6e8 	.word	0x2000e6e8

0001dfc4 <dk_buttons_init>:
{
   1dfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	button_handler_cb = button_handler;
   1dfc8:	4b43      	ldr	r3, [pc, #268]	; (1e0d8 <dk_buttons_init+0x114>)
{
   1dfca:	af00      	add	r7, sp, #0
	button_handler_cb = button_handler;
   1dfcc:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1dfce:	4d43      	ldr	r5, [pc, #268]	; (1e0dc <dk_buttons_init+0x118>)
   1dfd0:	4843      	ldr	r0, [pc, #268]	; (1e0e0 <dk_buttons_init+0x11c>)
   1dfd2:	f012 fa20 	bl	30416 <z_impl_k_mutex_init>
   1dfd6:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1dfd8:	f04f 0900 	mov.w	r9, #0
   1dfdc:	46a8      	mov	r8, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   1dfde:	88f2      	ldrh	r2, [r6, #6]
   1dfe0:	6830      	ldr	r0, [r6, #0]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1dfe2:	f012 0f01 	tst.w	r2, #1
   1dfe6:	bf14      	ite	ne
   1dfe8:	2310      	movne	r3, #16
   1dfea:	2320      	moveq	r3, #32
				  spec->pin,
   1dfec:	7931      	ldrb	r1, [r6, #4]
	return gpio_pin_configure(spec->port,
   1dfee:	431a      	orrs	r2, r3
   1dff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   1dff4:	f7ff fc20 	bl	1d838 <z_impl_gpio_pin_configure>
		if (err) {
   1dff8:	4604      	mov	r4, r0
   1dffa:	b198      	cbz	r0, 1e024 <dk_buttons_init+0x60>
			LOG_ERR("Cannot configure button gpio");
   1dffc:	466d      	mov	r5, sp
   1dffe:	b088      	sub	sp, #32
   1e000:	466a      	mov	r2, sp
   1e002:	4b38      	ldr	r3, [pc, #224]	; (1e0e4 <dk_buttons_init+0x120>)
			LOG_ERR("Cannot disable callbacks()");
   1e004:	6153      	str	r3, [r2, #20]
   1e006:	4b38      	ldr	r3, [pc, #224]	; (1e0e8 <dk_buttons_init+0x124>)
   1e008:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e00c:	6193      	str	r3, [r2, #24]
   1e00e:	2303      	movs	r3, #3
   1e010:	4836      	ldr	r0, [pc, #216]	; (1e0ec <dk_buttons_init+0x128>)
   1e012:	f842 3f10 	str.w	r3, [r2, #16]!
   1e016:	f011 f8aa 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1e01a:	46ad      	mov	sp, r5
}
   1e01c:	4620      	mov	r0, r4
   1e01e:	46bd      	mov	sp, r7
   1e020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e024:	f109 0901 	add.w	r9, r9, #1
   1e028:	f1b9 0f04 	cmp.w	r9, #4
   1e02c:	f106 0608 	add.w	r6, r6, #8
   1e030:	d1d5      	bne.n	1dfde <dk_buttons_init+0x1a>
	uint32_t pin_mask = 0;
   1e032:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e034:	4681      	mov	r9, r0
		pin_mask |= BIT(buttons[i].pin);
   1e036:	f04f 0a01 	mov.w	sl, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1e03a:	6828      	ldr	r0, [r5, #0]
   1e03c:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1e03e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e042:	f7ff fcab 	bl	1d99c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1e046:	4604      	mov	r4, r0
   1e048:	b120      	cbz	r0, 1e054 <dk_buttons_init+0x90>
			LOG_ERR("Cannot disable callbacks()");
   1e04a:	466d      	mov	r5, sp
   1e04c:	b088      	sub	sp, #32
   1e04e:	466a      	mov	r2, sp
   1e050:	4b27      	ldr	r3, [pc, #156]	; (1e0f0 <dk_buttons_init+0x12c>)
   1e052:	e7d7      	b.n	1e004 <dk_buttons_init+0x40>
		pin_mask |= BIT(buttons[i].pin);
   1e054:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e056:	f109 0901 	add.w	r9, r9, #1
		pin_mask |= BIT(buttons[i].pin);
   1e05a:	fa0a f303 	lsl.w	r3, sl, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e05e:	f1b9 0f04 	cmp.w	r9, #4
		pin_mask |= BIT(buttons[i].pin);
   1e062:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e066:	f105 0508 	add.w	r5, r5, #8
   1e06a:	d1e6      	bne.n	1e03a <dk_buttons_init+0x76>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e06c:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1e06e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1e0f4 <dk_buttons_init+0x130>
   1e072:	4b21      	ldr	r3, [pc, #132]	; (1e0f8 <dk_buttons_init+0x134>)
	callback->pin_mask = pin_mask;
   1e074:	e9c9 3601 	strd	r3, r6, [r9, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1e078:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1e07c:	6883      	ldr	r3, [r0, #8]
   1e07e:	69db      	ldr	r3, [r3, #28]
   1e080:	b14b      	cbz	r3, 1e096 <dk_buttons_init+0xd2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1e082:	2201      	movs	r2, #1
   1e084:	4649      	mov	r1, r9
   1e086:	4798      	blx	r3
		if (err) {
   1e088:	4604      	mov	r4, r0
   1e08a:	b138      	cbz	r0, 1e09c <dk_buttons_init+0xd8>
			LOG_ERR("Cannot add callback");
   1e08c:	466d      	mov	r5, sp
   1e08e:	b088      	sub	sp, #32
   1e090:	466a      	mov	r2, sp
   1e092:	4b1a      	ldr	r3, [pc, #104]	; (1e0fc <dk_buttons_init+0x138>)
   1e094:	e7b6      	b.n	1e004 <dk_buttons_init+0x40>
		return -ENOTSUP;
   1e096:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e09a:	e7f7      	b.n	1e08c <dk_buttons_init+0xc8>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1e09c:	3501      	adds	r5, #1
   1e09e:	2d04      	cmp	r5, #4
   1e0a0:	d1ea      	bne.n	1e078 <dk_buttons_init+0xb4>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1e0a2:	4917      	ldr	r1, [pc, #92]	; (1e100 <dk_buttons_init+0x13c>)
   1e0a4:	4817      	ldr	r0, [pc, #92]	; (1e104 <dk_buttons_init+0x140>)
   1e0a6:	f007 fc69 	bl	2597c <k_work_init_delayable>
	state = STATE_SCANNING;
   1e0aa:	2201      	movs	r2, #1
   1e0ac:	4b16      	ldr	r3, [pc, #88]	; (1e108 <dk_buttons_init+0x144>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1e0ae:	4815      	ldr	r0, [pc, #84]	; (1e104 <dk_buttons_init+0x140>)
	state = STATE_SCANNING;
   1e0b0:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1e0b2:	2300      	movs	r3, #0
   1e0b4:	2200      	movs	r2, #0
   1e0b6:	f007 fd03 	bl	25ac0 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1e0ba:	4621      	mov	r1, r4
   1e0bc:	4620      	mov	r0, r4
   1e0be:	f7ff ff71 	bl	1dfa4 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1e0c2:	f7ff fd37 	bl	1db34 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e0c6:	4b11      	ldr	r3, [pc, #68]	; (1e10c <dk_buttons_init+0x148>)
   1e0c8:	e8d3 2fef 	ldaex	r2, [r3]
   1e0cc:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1e0d0:	2900      	cmp	r1, #0
   1e0d2:	d0a3      	beq.n	1e01c <dk_buttons_init+0x58>
   1e0d4:	e7f8      	b.n	1e0c8 <dk_buttons_init+0x104>
   1e0d6:	bf00      	nop
   1e0d8:	2000e720 	.word	0x2000e720
   1e0dc:	00032738 	.word	0x00032738
   1e0e0:	2000e6f0 	.word	0x2000e6f0
   1e0e4:	00038a7a 	.word	0x00038a7a
   1e0e8:	00038b47 	.word	0x00038b47
   1e0ec:	00031bf4 	.word	0x00031bf4
   1e0f0:	00038a9b 	.word	0x00038a9b
   1e0f4:	2000e710 	.word	0x2000e710
   1e0f8:	0001dcc9 	.word	0x0001dcc9
   1e0fc:	00038aba 	.word	0x00038aba
   1e100:	0001ddb9 	.word	0x0001ddb9
   1e104:	2000dcb8 	.word	0x2000dcb8
   1e108:	2000f3c5 	.word	0x2000f3c5
   1e10c:	2000e71c 	.word	0x2000e71c

0001e110 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1e110:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1e112:	2803      	cmp	r0, #3
{
   1e114:	460a      	mov	r2, r1
   1e116:	af00      	add	r7, sp, #0
	if (led_idx >= ARRAY_SIZE(leds)) {
   1e118:	d914      	bls.n	1e144 <dk_set_led+0x34>
		LOG_ERR("LED index out of the range");
   1e11a:	466c      	mov	r4, sp
   1e11c:	b088      	sub	sp, #32
   1e11e:	466a      	mov	r2, sp
   1e120:	4b16      	ldr	r3, [pc, #88]	; (1e17c <dk_set_led+0x6c>)
   1e122:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e126:	6153      	str	r3, [r2, #20]
   1e128:	4b15      	ldr	r3, [pc, #84]	; (1e180 <dk_set_led+0x70>)
   1e12a:	4816      	ldr	r0, [pc, #88]	; (1e184 <dk_set_led+0x74>)
   1e12c:	6193      	str	r3, [r2, #24]
   1e12e:	2303      	movs	r3, #3
   1e130:	f842 3f10 	str.w	r3, [r2, #16]!
   1e134:	f011 f81b 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1e138:	46a5      	mov	sp, r4
		return -EINVAL;
   1e13a:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1e13e:	4620      	mov	r0, r4
   1e140:	46bd      	mov	sp, r7
   1e142:	bdb0      	pop	{r4, r5, r7, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1e144:	4b10      	ldr	r3, [pc, #64]	; (1e188 <dk_set_led+0x78>)
   1e146:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1e14a:	7909      	ldrb	r1, [r1, #4]
   1e14c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1e150:	f7ff fca8 	bl	1daa4 <gpio_pin_set>
	if (err) {
   1e154:	4604      	mov	r4, r0
   1e156:	2800      	cmp	r0, #0
   1e158:	d0f1      	beq.n	1e13e <dk_set_led+0x2e>
		LOG_ERR("Cannot write LED gpio");
   1e15a:	466d      	mov	r5, sp
   1e15c:	b088      	sub	sp, #32
   1e15e:	466a      	mov	r2, sp
   1e160:	4b0a      	ldr	r3, [pc, #40]	; (1e18c <dk_set_led+0x7c>)
   1e162:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e166:	6153      	str	r3, [r2, #20]
   1e168:	4b05      	ldr	r3, [pc, #20]	; (1e180 <dk_set_led+0x70>)
   1e16a:	4806      	ldr	r0, [pc, #24]	; (1e184 <dk_set_led+0x74>)
   1e16c:	6193      	str	r3, [r2, #24]
   1e16e:	2303      	movs	r3, #3
   1e170:	f842 3f10 	str.w	r3, [r2, #16]!
   1e174:	f010 fffb 	bl	2f16e <z_log_msg_static_create.constprop.0>
   1e178:	46ad      	mov	sp, r5
   1e17a:	e7e0      	b.n	1e13e <dk_set_led+0x2e>
   1e17c:	00038ad2 	.word	0x00038ad2
   1e180:	00038af1 	.word	0x00038af1
   1e184:	00031bf4 	.word	0x00031bf4
   1e188:	00032718 	.word	0x00032718
   1e18c:	000389c5 	.word	0x000389c5

0001e190 <at_monitor_dispatch.part.0>:

/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
   1e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e194:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   1e196:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e198:	4d2c      	ldr	r5, [pc, #176]	; (1e24c <at_monitor_dispatch.part.0+0xbc>)
   1e19a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1e250 <at_monitor_dispatch.part.0+0xc0>
void at_monitor_dispatch(const char *notif)
   1e19e:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e1a0:	454d      	cmp	r5, r9
   1e1a2:	d921      	bls.n	1e1e8 <at_monitor_dispatch.part.0+0x58>
   1e1a4:	492b      	ldr	r1, [pc, #172]	; (1e254 <at_monitor_dispatch.part.0+0xc4>)
   1e1a6:	2339      	movs	r3, #57	; 0x39
   1e1a8:	4a2b      	ldr	r2, [pc, #172]	; (1e258 <at_monitor_dispatch.part.0+0xc8>)
   1e1aa:	482c      	ldr	r0, [pc, #176]	; (1e25c <at_monitor_dispatch.part.0+0xcc>)
   1e1ac:	f00c fe04 	bl	2adb8 <assert_print>
   1e1b0:	482b      	ldr	r0, [pc, #172]	; (1e260 <at_monitor_dispatch.part.0+0xd0>)
   1e1b2:	f00c fe01 	bl	2adb8 <assert_print>
   1e1b6:	2139      	movs	r1, #57	; 0x39
   1e1b8:	4827      	ldr	r0, [pc, #156]	; (1e258 <at_monitor_dispatch.part.0+0xc8>)
   1e1ba:	f00c fdf6 	bl	2adaa <assert_post_action>
	return mon->flags.paused;
   1e1be:	f895 8008 	ldrb.w	r8, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   1e1c2:	f018 0f01 	tst.w	r8, #1
   1e1c6:	d10b      	bne.n	1e1e0 <at_monitor_dispatch.part.0+0x50>
   1e1c8:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e1ca:	b119      	cbz	r1, 1e1d4 <at_monitor_dispatch.part.0+0x44>
   1e1cc:	4620      	mov	r0, r4
   1e1ce:	f012 fcfd 	bl	30bcc <strstr>
   1e1d2:	b128      	cbz	r0, 1e1e0 <at_monitor_dispatch.part.0+0x50>
			if (is_direct(e)) {
   1e1d4:	f018 0f02 	tst.w	r8, #2
   1e1d8:	d004      	beq.n	1e1e4 <at_monitor_dispatch.part.0+0x54>
				LOG_DBG("Dispatching to %p (ISR)", e->handler);
				e->handler(notif);
   1e1da:	4620      	mov	r0, r4
   1e1dc:	686b      	ldr	r3, [r5, #4]
   1e1de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e1e0:	350c      	adds	r5, #12
   1e1e2:	e7dd      	b.n	1e1a0 <at_monitor_dispatch.part.0+0x10>
			} else {
				/* Copy and schedule work-queue task */
				monitored = true;
   1e1e4:	2601      	movs	r6, #1
   1e1e6:	e7fb      	b.n	1e1e0 <at_monitor_dispatch.part.0+0x50>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e1e8:	d3e9      	bcc.n	1e1be <at_monitor_dispatch.part.0+0x2e>
			}
		}
	}

	if (!monitored) {
   1e1ea:	b1fe      	cbz	r6, 1e22c <at_monitor_dispatch.part.0+0x9c>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1e1ec:	4620      	mov	r0, r4
   1e1ee:	f7eb f818 	bl	9222 <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1e1f2:	2200      	movs	r2, #0
   1e1f4:	1d41      	adds	r1, r0, #5
   1e1f6:	2300      	movs	r3, #0
   1e1f8:	481a      	ldr	r0, [pc, #104]	; (1e264 <at_monitor_dispatch.part.0+0xd4>)
   1e1fa:	f012 f8d0 	bl	3039e <k_heap_alloc>
	if (!at_notif) {
   1e1fe:	4605      	mov	r5, r0
   1e200:	b9b8      	cbnz	r0, 1e232 <at_monitor_dispatch.part.0+0xa2>
		LOG_WRN("No heap space for incoming notification: %s",
   1e202:	466e      	mov	r6, sp
   1e204:	b08a      	sub	sp, #40	; 0x28
   1e206:	466a      	mov	r2, sp
   1e208:	4b17      	ldr	r3, [pc, #92]	; (1e268 <at_monitor_dispatch.part.0+0xd8>)
   1e20a:	6153      	str	r3, [r2, #20]
   1e20c:	4b17      	ldr	r3, [pc, #92]	; (1e26c <at_monitor_dispatch.part.0+0xdc>)
   1e20e:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1e212:	f240 3301 	movw	r3, #769	; 0x301
   1e216:	8413      	strh	r3, [r2, #32]
   1e218:	4b15      	ldr	r3, [pc, #84]	; (1e270 <at_monitor_dispatch.part.0+0xe0>)
   1e21a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e21e:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1e222:	4603      	mov	r3, r0
   1e224:	4813      	ldr	r0, [pc, #76]	; (1e274 <at_monitor_dispatch.part.0+0xe4>)
   1e226:	f7f1 fae3 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1e22a:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   1e22c:	46bd      	mov	sp, r7
   1e22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1e232:	4621      	mov	r1, r4
   1e234:	3004      	adds	r0, #4
   1e236:	f012 fc90 	bl	30b5a <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1e23a:	4629      	mov	r1, r5
   1e23c:	480e      	ldr	r0, [pc, #56]	; (1e278 <at_monitor_dispatch.part.0+0xe8>)
   1e23e:	f012 f90a 	bl	30456 <k_queue_append>
	k_work_submit(&at_monitor_work);
   1e242:	480e      	ldr	r0, [pc, #56]	; (1e27c <at_monitor_dispatch.part.0+0xec>)
   1e244:	f007 fb12 	bl	2586c <k_work_submit>
   1e248:	e7f0      	b.n	1e22c <at_monitor_dispatch.part.0+0x9c>
   1e24a:	bf00      	nop
   1e24c:	2000cc9c 	.word	0x2000cc9c
   1e250:	2000cd08 	.word	0x2000cd08
   1e254:	00038ba4 	.word	0x00038ba4
   1e258:	00038b78 	.word	0x00038b78
   1e25c:	00033bc2 	.word	0x00033bc2
   1e260:	000342e3 	.word	0x000342e3
   1e264:	2000cdd8 	.word	0x2000cdd8
   1e268:	00038bc4 	.word	0x00038bc4
   1e26c:	00038c4e 	.word	0x00038c4e
   1e270:	01000004 	.word	0x01000004
   1e274:	00031b7c 	.word	0x00031b7c
   1e278:	2000cefc 	.word	0x2000cefc
   1e27c:	2000c9a8 	.word	0x2000c9a8

0001e280 <at_monitor_dispatch>:
{
   1e280:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(notif != NULL);
   1e282:	b948      	cbnz	r0, 1e298 <at_monitor_dispatch+0x18>
   1e284:	4906      	ldr	r1, [pc, #24]	; (1e2a0 <at_monitor_dispatch+0x20>)
   1e286:	4807      	ldr	r0, [pc, #28]	; (1e2a4 <at_monitor_dispatch+0x24>)
   1e288:	2336      	movs	r3, #54	; 0x36
   1e28a:	4a07      	ldr	r2, [pc, #28]	; (1e2a8 <at_monitor_dispatch+0x28>)
   1e28c:	f00c fd94 	bl	2adb8 <assert_print>
   1e290:	2136      	movs	r1, #54	; 0x36
   1e292:	4805      	ldr	r0, [pc, #20]	; (1e2a8 <at_monitor_dispatch+0x28>)
   1e294:	f00c fd89 	bl	2adaa <assert_post_action>
}
   1e298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e29c:	f7ff bf78 	b.w	1e190 <at_monitor_dispatch.part.0>
   1e2a0:	00038bf4 	.word	0x00038bf4
   1e2a4:	00033bc2 	.word	0x00033bc2
   1e2a8:	00038b78 	.word	0x00038b78

0001e2ac <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
   1e2ac:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e2ae:	480d      	ldr	r0, [pc, #52]	; (1e2e4 <at_monitor_sys_init+0x38>)
{
   1e2b0:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1e2b2:	f004 fcc1 	bl	22c38 <nrf_modem_at_notif_handler_set>
	if (err) {
   1e2b6:	b188      	cbz	r0, 1e2dc <at_monitor_sys_init+0x30>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1e2b8:	466c      	mov	r4, sp
   1e2ba:	b088      	sub	sp, #32
   1e2bc:	466a      	mov	r2, sp
   1e2be:	4b0a      	ldr	r3, [pc, #40]	; (1e2e8 <at_monitor_sys_init+0x3c>)
   1e2c0:	6153      	str	r3, [r2, #20]
   1e2c2:	4b0a      	ldr	r3, [pc, #40]	; (1e2ec <at_monitor_sys_init+0x40>)
   1e2c4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e2c8:	2304      	movs	r3, #4
   1e2ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1e2ce:	2300      	movs	r3, #0
   1e2d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e2d4:	4806      	ldr	r0, [pc, #24]	; (1e2f0 <at_monitor_sys_init+0x44>)
   1e2d6:	f7f1 fa8b 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1e2da:	46a5      	mov	sp, r4
	}

	return 0;
}
   1e2dc:	2000      	movs	r0, #0
   1e2de:	46bd      	mov	sp, r7
   1e2e0:	bd98      	pop	{r3, r4, r7, pc}
   1e2e2:	bf00      	nop
   1e2e4:	0001e281 	.word	0x0001e281
   1e2e8:	00038c09 	.word	0x00038c09
   1e2ec:	00038c3a 	.word	0x00038c3a
   1e2f0:	00031b7c 	.word	0x00031b7c

0001e2f4 <at_monitor_task>:
{
   1e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1e2f8:	4e1a      	ldr	r6, [pc, #104]	; (1e364 <at_monitor_task+0x70>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e2fa:	4f1b      	ldr	r7, [pc, #108]	; (1e368 <at_monitor_task+0x74>)
		k_heap_free(&at_monitor_heap, at_notif);
   1e2fc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1e36c <at_monitor_task+0x78>
   1e300:	2200      	movs	r2, #0
   1e302:	2300      	movs	r3, #0
   1e304:	4630      	mov	r0, r6
   1e306:	f006 fed9 	bl	250bc <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1e30a:	4605      	mov	r5, r0
   1e30c:	b9f8      	cbnz	r0, 1e34e <at_monitor_task+0x5a>
}
   1e30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   1e312:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e314:	07da      	lsls	r2, r3, #31
   1e316:	d40a      	bmi.n	1e32e <at_monitor_task+0x3a>
   1e318:	079b      	lsls	r3, r3, #30
   1e31a:	d408      	bmi.n	1e32e <at_monitor_task+0x3a>
   1e31c:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   1e31e:	b119      	cbz	r1, 1e328 <at_monitor_task+0x34>
   1e320:	4648      	mov	r0, r9
   1e322:	f012 fc53 	bl	30bcc <strstr>
   1e326:	b110      	cbz	r0, 1e32e <at_monitor_task+0x3a>
				e->handler(at_notif->data);
   1e328:	4648      	mov	r0, r9
   1e32a:	6863      	ldr	r3, [r4, #4]
   1e32c:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e32e:	340c      	adds	r4, #12
   1e330:	42bc      	cmp	r4, r7
   1e332:	d910      	bls.n	1e356 <at_monitor_task+0x62>
   1e334:	490e      	ldr	r1, [pc, #56]	; (1e370 <at_monitor_task+0x7c>)
   1e336:	2360      	movs	r3, #96	; 0x60
   1e338:	4a0e      	ldr	r2, [pc, #56]	; (1e374 <at_monitor_task+0x80>)
   1e33a:	480f      	ldr	r0, [pc, #60]	; (1e378 <at_monitor_task+0x84>)
   1e33c:	f00c fd3c 	bl	2adb8 <assert_print>
   1e340:	480e      	ldr	r0, [pc, #56]	; (1e37c <at_monitor_task+0x88>)
   1e342:	f00c fd39 	bl	2adb8 <assert_print>
   1e346:	2160      	movs	r1, #96	; 0x60
   1e348:	480a      	ldr	r0, [pc, #40]	; (1e374 <at_monitor_task+0x80>)
   1e34a:	f00c fd2e 	bl	2adaa <assert_post_action>
   1e34e:	4c0c      	ldr	r4, [pc, #48]	; (1e380 <at_monitor_task+0x8c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   1e350:	f105 0904 	add.w	r9, r5, #4
   1e354:	e7ec      	b.n	1e330 <at_monitor_task+0x3c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1e356:	d3dc      	bcc.n	1e312 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   1e358:	4629      	mov	r1, r5
   1e35a:	4640      	mov	r0, r8
   1e35c:	f006 f9fc 	bl	24758 <k_heap_free>
   1e360:	e7ce      	b.n	1e300 <at_monitor_task+0xc>
   1e362:	bf00      	nop
   1e364:	2000cefc 	.word	0x2000cefc
   1e368:	2000cd08 	.word	0x2000cd08
   1e36c:	2000cdd8 	.word	0x2000cdd8
   1e370:	00038ba4 	.word	0x00038ba4
   1e374:	00038b78 	.word	0x00038b78
   1e378:	00033bc2 	.word	0x00033bc2
   1e37c:	000342e3 	.word	0x000342e3
   1e380:	2000cc9c 	.word	0x2000cc9c

0001e384 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   1e384:	4802      	ldr	r0, [pc, #8]	; (1e390 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   1e386:	6883      	ldr	r3, [r0, #8]
   1e388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e38a:	b103      	cbz	r3, 1e38e <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   1e38c:	4718      	bx	r3
}
   1e38e:	4770      	bx	lr
   1e390:	0003188c 	.word	0x0003188c

0001e394 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   1e394:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   1e396:	4d05      	ldr	r5, [pc, #20]	; (1e3ac <write_uart_string+0x18>)
   1e398:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   1e39a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1e39e:	b901      	cbnz	r1, 1e3a2 <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   1e3a0:	bd38      	pop	{r3, r4, r5, pc}
   1e3a2:	68ab      	ldr	r3, [r5, #8]
   1e3a4:	4801      	ldr	r0, [pc, #4]	; (1e3ac <write_uart_string+0x18>)
   1e3a6:	69db      	ldr	r3, [r3, #28]
   1e3a8:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1e3aa:	e7f6      	b.n	1e39a <write_uart_string+0x6>
   1e3ac:	0003188c 	.word	0x0003188c

0001e3b0 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   1e3b0:	b598      	push	{r3, r4, r7, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   1e3b2:	4b13      	ldr	r3, [pc, #76]	; (1e400 <cmd_send+0x50>)
   1e3b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1e3b8:	4618      	mov	r0, r3
   1e3ba:	4a12      	ldr	r2, [pc, #72]	; (1e404 <cmd_send+0x54>)
{
   1e3bc:	af00      	add	r7, sp, #0
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   1e3be:	f004 fc8d 	bl	22cdc <nrf_modem_at_cmd>
	if (err < 0) {
   1e3c2:	2800      	cmp	r0, #0
   1e3c4:	da11      	bge.n	1e3ea <cmd_send+0x3a>
		LOG_ERR("Error while processing AT command: %d", err);
   1e3c6:	466c      	mov	r4, sp
   1e3c8:	b088      	sub	sp, #32
   1e3ca:	466a      	mov	r2, sp
   1e3cc:	4b0e      	ldr	r3, [pc, #56]	; (1e408 <cmd_send+0x58>)
   1e3ce:	6153      	str	r3, [r2, #20]
   1e3d0:	4b0e      	ldr	r3, [pc, #56]	; (1e40c <cmd_send+0x5c>)
   1e3d2:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e3d6:	2304      	movs	r3, #4
   1e3d8:	f842 3f10 	str.w	r3, [r2, #16]!
   1e3dc:	2300      	movs	r3, #0
   1e3de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e3e2:	480b      	ldr	r0, [pc, #44]	; (1e410 <cmd_send+0x60>)
   1e3e4:	f7f1 fa04 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1e3e8:	46a5      	mov	sp, r4
	}

	write_uart_string(at_buf);
   1e3ea:	4805      	ldr	r0, [pc, #20]	; (1e400 <cmd_send+0x50>)
   1e3ec:	f7ff ffd2 	bl	1e394 <write_uart_string>

	at_buf_busy = false;
   1e3f0:	2200      	movs	r2, #0
   1e3f2:	4b08      	ldr	r3, [pc, #32]	; (1e414 <cmd_send+0x64>)
   1e3f4:	701a      	strb	r2, [r3, #0]
	z_impl_uart_irq_rx_enable(dev);
   1e3f6:	f7ff ffc5 	bl	1e384 <z_impl_uart_irq_rx_enable.constprop.0>
	uart_irq_rx_enable(uart_dev);
}
   1e3fa:	46bd      	mov	sp, r7
   1e3fc:	bd98      	pop	{r3, r4, r7, pc}
   1e3fe:	bf00      	nop
   1e400:	2000f3c7 	.word	0x2000f3c7
   1e404:	00039324 	.word	0x00039324
   1e408:	00038c6d 	.word	0x00038c6d
   1e40c:	00038dbb 	.word	0x00038dbb
   1e410:	00031b74 	.word	0x00031b74
   1e414:	200103c7 	.word	0x200103c7

0001e418 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   1e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e41c:	b082      	sub	sp, #8
   1e41e:	4604      	mov	r4, r0
   1e420:	af00      	add	r7, sp, #0
	if (api->irq_update == NULL) {
   1e422:	6883      	ldr	r3, [r0, #8]
   1e424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1e426:	b103      	cbz	r3, 1e42a <isr+0x12>
	return api->irq_update(dev);
   1e428:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   1e42a:	68a3      	ldr	r3, [r4, #8]
   1e42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e42e:	b9b3      	cbnz	r3, 1e45e <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   1e430:	4e5c      	ldr	r6, [pc, #368]	; (1e5a4 <isr+0x18c>)
		if (at_cmd_len > 0) {
   1e432:	4d5d      	ldr	r5, [pc, #372]	; (1e5a8 <isr+0x190>)
	while ((!at_buf_busy) &&
   1e434:	7833      	ldrb	r3, [r6, #0]
   1e436:	b9b3      	cbnz	r3, 1e466 <isr+0x4e>
	if (api->fifo_read == NULL) {
   1e438:	68a3      	ldr	r3, [r4, #8]
   1e43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e43c:	b123      	cbz	r3, 1e448 <isr+0x30>
	return api->fifo_read(dev, rx_data, size);
   1e43e:	2201      	movs	r2, #1
   1e440:	4620      	mov	r0, r4
   1e442:	1df9      	adds	r1, r7, #7
   1e444:	4798      	blx	r3
   1e446:	b170      	cbz	r0, 1e466 <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   1e448:	79fb      	ldrb	r3, [r7, #7]
	switch (character) {
   1e44a:	2b08      	cmp	r3, #8
   1e44c:	d001      	beq.n	1e452 <isr+0x3a>
   1e44e:	2b7f      	cmp	r3, #127	; 0x7f
   1e450:	d10d      	bne.n	1e46e <isr+0x56>
		if (at_cmd_len > 0) {
   1e452:	682b      	ldr	r3, [r5, #0]
   1e454:	2b00      	cmp	r3, #0
   1e456:	d0ed      	beq.n	1e434 <isr+0x1c>
			at_cmd_len--;
   1e458:	3b01      	subs	r3, #1
   1e45a:	602b      	str	r3, [r5, #0]
   1e45c:	e7ea      	b.n	1e434 <isr+0x1c>
	return api->irq_rx_ready(dev);
   1e45e:	4620      	mov	r0, r4
   1e460:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   1e462:	2800      	cmp	r0, #0
   1e464:	d1e4      	bne.n	1e430 <isr+0x18>
	}
}
   1e466:	3708      	adds	r7, #8
   1e468:	46bd      	mov	sp, r7
   1e46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!inside_quotes) {
   1e46e:	484f      	ldr	r0, [pc, #316]	; (1e5ac <isr+0x194>)
   1e470:	7802      	ldrb	r2, [r0, #0]
   1e472:	2a00      	cmp	r2, #0
   1e474:	d163      	bne.n	1e53e <isr+0x126>
		switch (character) {
   1e476:	2b0a      	cmp	r3, #10
   1e478:	d02c      	beq.n	1e4d4 <isr+0xbc>
   1e47a:	2b0d      	cmp	r3, #13
   1e47c:	d015      	beq.n	1e4aa <isr+0x92>
   1e47e:	2b00      	cmp	r3, #0
   1e480:	d15d      	bne.n	1e53e <isr+0x126>
			if (term_mode == MODE_NULL_TERM) {
   1e482:	4a4b      	ldr	r2, [pc, #300]	; (1e5b0 <isr+0x198>)
   1e484:	7812      	ldrb	r2, [r2, #0]
   1e486:	b1a2      	cbz	r2, 1e4b2 <isr+0x9a>
			LOG_WRN("Ignored null; would terminate string early.");
   1e488:	46e8      	mov	r8, sp
   1e48a:	b088      	sub	sp, #32
   1e48c:	466a      	mov	r2, sp
   1e48e:	4949      	ldr	r1, [pc, #292]	; (1e5b4 <isr+0x19c>)
   1e490:	6151      	str	r1, [r2, #20]
   1e492:	4949      	ldr	r1, [pc, #292]	; (1e5b8 <isr+0x1a0>)
   1e494:	6191      	str	r1, [r2, #24]
   1e496:	2103      	movs	r1, #3
   1e498:	f842 1f10 	str.w	r1, [r2, #16]!
   1e49c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e4a0:	4846      	ldr	r0, [pc, #280]	; (1e5bc <isr+0x1a4>)
   1e4a2:	f7f1 f9a5 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1e4a6:	46c5      	mov	sp, r8
		return;
   1e4a8:	e7c4      	b.n	1e434 <isr+0x1c>
			if (term_mode == MODE_CR) {
   1e4aa:	4a41      	ldr	r2, [pc, #260]	; (1e5b0 <isr+0x198>)
   1e4ac:	7812      	ldrb	r2, [r2, #0]
   1e4ae:	2a01      	cmp	r2, #1
   1e4b0:	d139      	bne.n	1e526 <isr+0x10e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1e4b2:	2200      	movs	r2, #0
   1e4b4:	493c      	ldr	r1, [pc, #240]	; (1e5a8 <isr+0x190>)
   1e4b6:	4b42      	ldr	r3, [pc, #264]	; (1e5c0 <isr+0x1a8>)
   1e4b8:	f8d1 c000 	ldr.w	ip, [r1]
	at_cmd_len = 0;
   1e4bc:	600a      	str	r2, [r1, #0]
   1e4be:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1e4c0:	f803 200c 	strb.w	r2, [r3, ip]
	inside_quotes = false;
   1e4c4:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   1e4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   1e4ca:	2a20      	cmp	r2, #32
   1e4cc:	d859      	bhi.n	1e582 <isr+0x16a>
		} else if (*c == '\0') {
   1e4ce:	2a00      	cmp	r2, #0
   1e4d0:	d1f9      	bne.n	1e4c6 <isr+0xae>
   1e4d2:	e7af      	b.n	1e434 <isr+0x1c>
			if (term_mode == MODE_LF) {
   1e4d4:	4a36      	ldr	r2, [pc, #216]	; (1e5b0 <isr+0x198>)
   1e4d6:	f892 c000 	ldrb.w	ip, [r2]
   1e4da:	f1bc 0f02 	cmp.w	ip, #2
   1e4de:	d0e8      	beq.n	1e4b2 <isr+0x9a>
		if (at_cmd_len > 0) {
   1e4e0:	4931      	ldr	r1, [pc, #196]	; (1e5a8 <isr+0x190>)
			if (term_mode == MODE_CR_LF &&
   1e4e2:	f1bc 0f03 	cmp.w	ip, #3
		if (at_cmd_len > 0) {
   1e4e6:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   1e4e8:	d116      	bne.n	1e518 <isr+0x100>
   1e4ea:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1e5c0 <isr+0x1a8>
   1e4ee:	b172      	cbz	r2, 1e50e <isr+0xf6>
			    at_buf[at_cmd_len - 1] == '\r') {
   1e4f0:	eb0c 0e02 	add.w	lr, ip, r2
			    at_cmd_len > 0 &&
   1e4f4:	f81e ec01 	ldrb.w	lr, [lr, #-1]
   1e4f8:	f1be 0f0d 	cmp.w	lr, #13
   1e4fc:	d0d9      	beq.n	1e4b2 <isr+0x9a>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1e4fe:	1c50      	adds	r0, r2, #1
   1e500:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1e504:	d222      	bcs.n	1e54c <isr+0x134>
	at_buf[at_cmd_len] = character;
   1e506:	f80c 3002 	strb.w	r3, [ip, r2]
	at_cmd_len++;
   1e50a:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   1e50c:	e792      	b.n	1e434 <isr+0x1c>
	at_buf[at_cmd_len] = character;
   1e50e:	f88c 3000 	strb.w	r3, [ip]
	at_cmd_len++;
   1e512:	2301      	movs	r3, #1
   1e514:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   1e516:	e78d      	b.n	1e434 <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1e518:	1c50      	adds	r0, r2, #1
   1e51a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1e51e:	d215      	bcs.n	1e54c <isr+0x134>
	at_buf[at_cmd_len] = character;
   1e520:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1e5c0 <isr+0x1a8>
   1e524:	e7ef      	b.n	1e506 <isr+0xee>
		if (at_cmd_len > 0) {
   1e526:	4a20      	ldr	r2, [pc, #128]	; (1e5a8 <isr+0x190>)
   1e528:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1e52a:	1c41      	adds	r1, r0, #1
   1e52c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1e530:	d20c      	bcs.n	1e54c <isr+0x134>
	at_buf[at_cmd_len] = character;
   1e532:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1e5c0 <isr+0x1a8>
	at_cmd_len++;
   1e536:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   1e538:	f80c 3000 	strb.w	r3, [ip, r0]
	if (character == '"') {
   1e53c:	e77a      	b.n	1e434 <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1e53e:	f8d5 c000 	ldr.w	ip, [r5]
   1e542:	f10c 0101 	add.w	r1, ip, #1
   1e546:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1e54a:	d30e      	bcc.n	1e56a <isr+0x152>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1e54c:	46e8      	mov	r8, sp
   1e54e:	b088      	sub	sp, #32
   1e550:	466a      	mov	r2, sp
   1e552:	491c      	ldr	r1, [pc, #112]	; (1e5c4 <isr+0x1ac>)
   1e554:	6151      	str	r1, [r2, #20]
   1e556:	4918      	ldr	r1, [pc, #96]	; (1e5b8 <isr+0x1a0>)
	switch (character) {
   1e558:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1e55c:	2304      	movs	r3, #4
   1e55e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e562:	2300      	movs	r3, #0
   1e564:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e568:	e79a      	b.n	1e4a0 <isr+0x88>
	at_buf[at_cmd_len] = character;
   1e56a:	f8df e054 	ldr.w	lr, [pc, #84]	; 1e5c0 <isr+0x1a8>
	if (character == '"') {
   1e56e:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   1e570:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   1e574:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   1e576:	f47f af5d 	bne.w	1e434 <isr+0x1c>
	if (!inside_quotes) {
   1e57a:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   1e57e:	7002      	strb	r2, [r0, #0]
   1e580:	e758      	b.n	1e434 <isr+0x1c>
	if (at_buf[0]) {
   1e582:	780b      	ldrb	r3, [r1, #0]
   1e584:	2b00      	cmp	r3, #0
   1e586:	f43f af55 	beq.w	1e434 <isr+0x1c>
	const struct uart_driver_api *api =
   1e58a:	480f      	ldr	r0, [pc, #60]	; (1e5c8 <isr+0x1b0>)
	if (api->irq_rx_disable != NULL) {
   1e58c:	6883      	ldr	r3, [r0, #8]
   1e58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e590:	b103      	cbz	r3, 1e594 <isr+0x17c>
		api->irq_rx_disable(dev);
   1e592:	4798      	blx	r3
		at_buf_busy = true;
   1e594:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   1e596:	490d      	ldr	r1, [pc, #52]	; (1e5cc <isr+0x1b4>)
   1e598:	480d      	ldr	r0, [pc, #52]	; (1e5d0 <isr+0x1b8>)
		at_buf_busy = true;
   1e59a:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   1e59c:	f011 ffd8 	bl	30550 <k_work_submit_to_queue>
   1e5a0:	e748      	b.n	1e434 <isr+0x1c>
   1e5a2:	bf00      	nop
   1e5a4:	200103c7 	.word	0x200103c7
   1e5a8:	2000e724 	.word	0x2000e724
   1e5ac:	2000f3c6 	.word	0x2000f3c6
   1e5b0:	200103c8 	.word	0x200103c8
   1e5b4:	00038c97 	.word	0x00038c97
   1e5b8:	00038d9e 	.word	0x00038d9e
   1e5bc:	00031b74 	.word	0x00031b74
   1e5c0:	2000f3c7 	.word	0x2000f3c7
   1e5c4:	00038cc7 	.word	0x00038cc7
   1e5c8:	0003188c 	.word	0x0003188c
   1e5cc:	2000e728 	.word	0x2000e728
   1e5d0:	2000dce8 	.word	0x2000dce8

0001e5d4 <at_host_init>:
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   1e5d4:	2201      	movs	r2, #1
{
   1e5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		term_mode = mode;
   1e5da:	4b55      	ldr	r3, [pc, #340]	; (1e730 <at_host_init+0x15c>)
{
   1e5dc:	b084      	sub	sp, #16
   1e5de:	af02      	add	r7, sp, #8
		term_mode = mode;
   1e5e0:	701a      	strb	r2, [r3, #0]
   1e5e2:	4854      	ldr	r0, [pc, #336]	; (1e734 <at_host_init+0x160>)
   1e5e4:	f011 fec4 	bl	30370 <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
   1e5e8:	4603      	mov	r3, r0
   1e5ea:	bb50      	cbnz	r0, 1e642 <at_host_init+0x6e>
		LOG_ERR("UART device not ready");
   1e5ec:	466c      	mov	r4, sp
   1e5ee:	b088      	sub	sp, #32
   1e5f0:	aa02      	add	r2, sp, #8
   1e5f2:	4951      	ldr	r1, [pc, #324]	; (1e738 <at_host_init+0x164>)
   1e5f4:	6151      	str	r1, [r2, #20]
   1e5f6:	4951      	ldr	r1, [pc, #324]	; (1e73c <at_host_init+0x168>)
   1e5f8:	6191      	str	r1, [r2, #24]
   1e5fa:	2103      	movs	r1, #3
   1e5fc:	f842 1f10 	str.w	r1, [r2, #16]!
   1e600:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e604:	484e      	ldr	r0, [pc, #312]	; (1e740 <at_host_init+0x16c>)
   1e606:	f7f1 f8f3 	bl	f7f0 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1e60a:	f06f 0312 	mvn.w	r3, #18
   1e60e:	46a5      	mov	sp, r4
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   1e610:	466c      	mov	r4, sp
   1e612:	b088      	sub	sp, #32
   1e614:	aa02      	add	r2, sp, #8
   1e616:	494b      	ldr	r1, [pc, #300]	; (1e744 <at_host_init+0x170>)
   1e618:	6151      	str	r1, [r2, #20]
   1e61a:	494b      	ldr	r1, [pc, #300]	; (1e748 <at_host_init+0x174>)
   1e61c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1e620:	2304      	movs	r3, #4
   1e622:	f842 3f10 	str.w	r3, [r2, #16]!
   1e626:	2300      	movs	r3, #0
   1e628:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e62c:	4844      	ldr	r0, [pc, #272]	; (1e740 <at_host_init+0x16c>)
   1e62e:	f7f1 f8df 	bl	f7f0 <z_impl_z_log_msg_static_create>
		return -EFAULT;
   1e632:	f06f 060d 	mvn.w	r6, #13
   1e636:	46a5      	mov	sp, r4
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   1e638:	4630      	mov	r0, r6
   1e63a:	3708      	adds	r7, #8
   1e63c:	46bd      	mov	sp, r7
   1e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   1e642:	f011 ffcf 	bl	305e4 <z_impl_k_uptime_ticks>
   1e646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e64a:	fba0 0302 	umull	r0, r3, r0, r2
   1e64e:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   1e652:	4d38      	ldr	r5, [pc, #224]	; (1e734 <at_host_init+0x160>)
   1e654:	0bc0      	lsrs	r0, r0, #15
   1e656:	f8d5 8008 	ldr.w	r8, [r5, #8]
   1e65a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 1e73c <at_host_init+0x168>
   1e65e:	ea40 4443 	orr.w	r4, r0, r3, lsl #17
	if (api->err_check == NULL) {
   1e662:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1e666:	b1bb      	cbz	r3, 1e698 <at_host_init+0xc4>
	return api->err_check(dev);
   1e668:	4628      	mov	r0, r5
   1e66a:	4798      	blx	r3
		if (err) {
   1e66c:	4606      	mov	r6, r0
   1e66e:	b9a8      	cbnz	r0, 1e69c <at_host_init+0xc8>
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1e670:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
   1e674:	2b00      	cmp	r3, #0
   1e676:	d155      	bne.n	1e724 <at_host_init+0x150>
	k_work_init(&cmd_send_work, cmd_send);
   1e678:	4934      	ldr	r1, [pc, #208]	; (1e74c <at_host_init+0x178>)
   1e67a:	4835      	ldr	r0, [pc, #212]	; (1e750 <at_host_init+0x17c>)
   1e67c:	f007 f830 	bl	256e0 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   1e680:	2300      	movs	r3, #0
   1e682:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e686:	9300      	str	r3, [sp, #0]
   1e688:	4932      	ldr	r1, [pc, #200]	; (1e754 <at_host_init+0x180>)
   1e68a:	230a      	movs	r3, #10
   1e68c:	4832      	ldr	r0, [pc, #200]	; (1e758 <at_host_init+0x184>)
   1e68e:	f007 f90d 	bl	258ac <k_work_queue_start>
   1e692:	f7ff fe77 	bl	1e384 <z_impl_uart_irq_rx_enable.constprop.0>
}
   1e696:	e7cf      	b.n	1e638 <at_host_init+0x64>
		return -ENOSYS;
   1e698:	f06f 0657 	mvn.w	r6, #87	; 0x57
   1e69c:	f011 ffa2 	bl	305e4 <z_impl_k_uptime_ticks>
   1e6a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e6a4:	fba0 0302 	umull	r0, r3, r0, r2
   1e6a8:	fb02 3101 	mla	r1, r2, r1, r3
   1e6ac:	0bc3      	lsrs	r3, r0, #15
   1e6ae:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   1e6b2:	1b1b      	subs	r3, r3, r4
   1e6b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e6b8:	d913      	bls.n	1e6e2 <at_host_init+0x10e>
				LOG_ERR("UART check failed: %d. "
   1e6ba:	466c      	mov	r4, sp
   1e6bc:	b088      	sub	sp, #32
   1e6be:	aa02      	add	r2, sp, #8
   1e6c0:	4b26      	ldr	r3, [pc, #152]	; (1e75c <at_host_init+0x188>)
   1e6c2:	61d6      	str	r6, [r2, #28]
   1e6c4:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1e6c8:	2304      	movs	r3, #4
   1e6ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1e6ce:	2300      	movs	r3, #0
   1e6d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e6d4:	481a      	ldr	r0, [pc, #104]	; (1e740 <at_host_init+0x16c>)
   1e6d6:	f7f1 f88b 	bl	f7f0 <z_impl_z_log_msg_static_create>
				return -EIO;
   1e6da:	f06f 0304 	mvn.w	r3, #4
   1e6de:	46a5      	mov	sp, r4
	if (err) {
   1e6e0:	e796      	b.n	1e610 <at_host_init+0x3c>
			LOG_INF("UART check failed: %d. "
   1e6e2:	46ea      	mov	sl, sp
   1e6e4:	b088      	sub	sp, #32
   1e6e6:	aa02      	add	r2, sp, #8
   1e6e8:	4b1d      	ldr	r3, [pc, #116]	; (1e760 <at_host_init+0x18c>)
   1e6ea:	61d6      	str	r6, [r2, #28]
   1e6ec:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1e6f0:	2304      	movs	r3, #4
   1e6f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e6f6:	2300      	movs	r3, #0
   1e6f8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
   1e6fc:	4810      	ldr	r0, [pc, #64]	; (1e740 <at_host_init+0x16c>)
   1e6fe:	f7f1 f877 	bl	f7f0 <z_impl_z_log_msg_static_create>
   1e702:	46d5      	mov	sp, sl
	if (api->fifo_read == NULL) {
   1e704:	68ae      	ldr	r6, [r5, #8]
   1e706:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e708:	2b00      	cmp	r3, #0
   1e70a:	d0fc      	beq.n	1e706 <at_host_init+0x132>
	return api->fifo_read(dev, rx_data, size);
   1e70c:	2201      	movs	r2, #1
   1e70e:	4628      	mov	r0, r5
   1e710:	1df9      	adds	r1, r7, #7
   1e712:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1e714:	2800      	cmp	r0, #0
   1e716:	d1f6      	bne.n	1e706 <at_host_init+0x132>
	return z_impl_k_sleep(timeout);
   1e718:	2100      	movs	r1, #0
   1e71a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1e71e:	f008 fb89 	bl	26e34 <z_impl_k_sleep>
	} while (err);
   1e722:	e79e      	b.n	1e662 <at_host_init+0x8e>
		api->irq_callback_set(dev, cb, user_data);
   1e724:	4602      	mov	r2, r0
   1e726:	490f      	ldr	r1, [pc, #60]	; (1e764 <at_host_init+0x190>)
   1e728:	4802      	ldr	r0, [pc, #8]	; (1e734 <at_host_init+0x160>)
   1e72a:	4798      	blx	r3
	if (err) {
   1e72c:	e7a4      	b.n	1e678 <at_host_init+0xa4>
   1e72e:	bf00      	nop
   1e730:	200103c8 	.word	0x200103c8
   1e734:	0003188c 	.word	0x0003188c
   1e738:	00038ceb 	.word	0x00038ceb
   1e73c:	00038dae 	.word	0x00038dae
   1e740:	00031b74 	.word	0x00031b74
   1e744:	00038d78 	.word	0x00038d78
   1e748:	00038dc4 	.word	0x00038dc4
   1e74c:	0001e3b1 	.word	0x0001e3b1
   1e750:	2000e728 	.word	0x2000e728
   1e754:	200119e8 	.word	0x200119e8
   1e758:	2000dce8 	.word	0x2000dce8
   1e75c:	00038d05 	.word	0x00038d05
   1e760:	00038d3f 	.word	0x00038d3f
   1e764:	0001e419 	.word	0x0001e419

0001e768 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1e768:	4b09      	ldr	r3, [pc, #36]	; (1e790 <is_valid_notification_char+0x28>)
   1e76a:	5c1b      	ldrb	r3, [r3, r0]
   1e76c:	f003 0303 	and.w	r3, r3, #3
   1e770:	2b02      	cmp	r3, #2
   1e772:	bf08      	it	eq
   1e774:	3820      	subeq	r0, #32
   1e776:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   1e778:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1e77c:	2b19      	cmp	r3, #25
   1e77e:	d904      	bls.n	1e78a <is_valid_notification_char+0x22>
   1e780:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   1e784:	4258      	negs	r0, r3
   1e786:	4158      	adcs	r0, r3
   1e788:	4770      	bx	lr
		return true;
   1e78a:	2001      	movs	r0, #1
	}

	return false;
}
   1e78c:	4770      	bx	lr
   1e78e:	bf00      	nop
   1e790:	0003c002 	.word	0x0003c002

0001e794 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1e794:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   1e798:	b2db      	uxtb	r3, r3
   1e79a:	2b11      	cmp	r3, #17
   1e79c:	bf9d      	ittte	ls
   1e79e:	4803      	ldrls	r0, [pc, #12]	; (1e7ac <is_separator+0x18>)
   1e7a0:	40d8      	lsrls	r0, r3
   1e7a2:	f000 0001 	andls.w	r0, r0, #1
{
   1e7a6:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   1e7a8:	4770      	bx	lr
   1e7aa:	bf00      	nop
   1e7ac:	00024001 	.word	0x00024001

0001e7b0 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7b2:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e7b4:	2400      	movs	r4, #0
   1e7b6:	4e09      	ldr	r6, [pc, #36]	; (1e7dc <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1e7b8:	f856 7b04 	ldr.w	r7, [r6], #4
   1e7bc:	4638      	mov	r0, r7
   1e7be:	f7ea fd30 	bl	9222 <strlen>
   1e7c2:	4639      	mov	r1, r7
   1e7c4:	4602      	mov	r2, r0
   1e7c6:	4628      	mov	r0, r5
   1e7c8:	f012 f9cf 	bl	30b6a <strncmp>
		if (!diff) {
   1e7cc:	b120      	cbz	r0, 1e7d8 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1e7ce:	3401      	adds	r4, #1
   1e7d0:	2c04      	cmp	r4, #4
   1e7d2:	d1f1      	bne.n	1e7b8 <is_result+0x8>
			return true;
		}
	}

	return false;
   1e7d4:	2000      	movs	r0, #0
}
   1e7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1e7d8:	2001      	movs	r0, #1
   1e7da:	e7fc      	b.n	1e7d6 <is_result+0x26>
   1e7dc:	00032758 	.word	0x00032758

0001e7e0 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1e7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1e7e4:	6804      	ldr	r4, [r0, #0]
{
   1e7e6:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e7e8:	7823      	ldrb	r3, [r4, #0]
   1e7ea:	4680      	mov	r8, r0
   1e7ec:	460e      	mov	r6, r1
   1e7ee:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   1e7f0:	9400      	str	r4, [sp, #0]
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	f000 80cf 	beq.w	1e996 <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1e7f8:	4b68      	ldr	r3, [pc, #416]	; (1e99c <at_parse_process_element+0x1bc>)
   1e7fa:	781b      	ldrb	r3, [r3, #0]
   1e7fc:	2b06      	cmp	r3, #6
   1e7fe:	d113      	bne.n	1e828 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   1e800:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   1e802:	1c62      	adds	r2, r4, #1
   1e804:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   1e806:	4611      	mov	r1, r2
   1e808:	4607      	mov	r7, r0
   1e80a:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e80e:	f7ff ffab 	bl	1e768 <is_valid_notification_char>
   1e812:	2800      	cmp	r0, #0
   1e814:	d1f7      	bne.n	1e806 <at_parse_process_element+0x26>
   1e816:	b107      	cbz	r7, 1e81a <at_parse_process_element+0x3a>
   1e818:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e81a:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1e81c:	4622      	mov	r2, r4
   1e81e:	4631      	mov	r1, r6
   1e820:	4628      	mov	r0, r5
   1e822:	f010 fd2c 	bl	2f27e <at_params_string_put>
   1e826:	e046      	b.n	1e8b6 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   1e828:	3b01      	subs	r3, #1
   1e82a:	2b08      	cmp	r3, #8
   1e82c:	d843      	bhi.n	1e8b6 <at_parse_process_element+0xd6>
   1e82e:	e8df f003 	tbb	[pc, r3]
   1e832:	4964      	.short	0x4964
   1e834:	420da25a 	.word	0x420da25a
   1e838:	3f1c      	.short	0x3f1c
   1e83a:	05          	.byte	0x05
   1e83b:	00          	.byte	0x00
   1e83c:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   1e83e:	2100      	movs	r1, #0
   1e840:	4613      	mov	r3, r2
   1e842:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e846:	b160      	cbz	r0, 1e862 <at_parse_process_element+0x82>
   1e848:	2101      	movs	r1, #1
   1e84a:	e7f9      	b.n	1e840 <at_parse_process_element+0x60>
   1e84c:	4622      	mov	r2, r4
   1e84e:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   1e850:	4f53      	ldr	r7, [pc, #332]	; (1e9a0 <at_parse_process_element+0x1c0>)
   1e852:	4613      	mov	r3, r2
   1e854:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e858:	5c38      	ldrb	r0, [r7, r0]
   1e85a:	f010 0f44 	tst.w	r0, #68	; 0x44
   1e85e:	f040 8098 	bne.w	1e992 <at_parse_process_element+0x1b2>
   1e862:	b101      	cbz	r1, 1e866 <at_parse_process_element+0x86>
   1e864:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e866:	1b1b      	subs	r3, r3, r4
   1e868:	e7d8      	b.n	1e81c <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   1e86a:	4668      	mov	r0, sp
   1e86c:	f010 fcab 	bl	2f1c6 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   1e870:	2200      	movs	r2, #0
   1e872:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1e874:	484a      	ldr	r0, [pc, #296]	; (1e9a0 <at_parse_process_element+0x1c0>)
   1e876:	461f      	mov	r7, r3
   1e878:	f813 1b01 	ldrb.w	r1, [r3], #1
   1e87c:	5c41      	ldrb	r1, [r0, r1]
   1e87e:	0749      	lsls	r1, r1, #29
   1e880:	d110      	bne.n	1e8a4 <at_parse_process_element+0xc4>
   1e882:	b102      	cbz	r2, 1e886 <at_parse_process_element+0xa6>
   1e884:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   1e886:	1b3b      	subs	r3, r7, r4
   1e888:	4622      	mov	r2, r4
   1e88a:	4631      	mov	r1, r6
   1e88c:	4628      	mov	r0, r5
   1e88e:	f010 fcf6 	bl	2f27e <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1e892:	783b      	ldrb	r3, [r7, #0]
   1e894:	2b3d      	cmp	r3, #61	; 0x3d
   1e896:	d107      	bne.n	1e8a8 <at_parse_process_element+0xc8>
   1e898:	787b      	ldrb	r3, [r7, #1]
   1e89a:	2b3f      	cmp	r3, #63	; 0x3f
   1e89c:	d10b      	bne.n	1e8b6 <at_parse_process_element+0xd6>
			tmpstr += 2;
   1e89e:	3702      	adds	r7, #2
		tmpstr++;
   1e8a0:	9700      	str	r7, [sp, #0]
   1e8a2:	e008      	b.n	1e8b6 <at_parse_process_element+0xd6>
   1e8a4:	2201      	movs	r2, #1
   1e8a6:	e7e6      	b.n	1e876 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1e8a8:	2b3f      	cmp	r3, #63	; 0x3f
   1e8aa:	d104      	bne.n	1e8b6 <at_parse_process_element+0xd6>
			tmpstr++;
   1e8ac:	3701      	adds	r7, #1
   1e8ae:	e7f7      	b.n	1e8a0 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   1e8b0:	4628      	mov	r0, r5
   1e8b2:	f010 fcba 	bl	2f22a <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1e8b6:	2000      	movs	r0, #0
	*str = tmpstr;
   1e8b8:	9b00      	ldr	r3, [sp, #0]
   1e8ba:	f8c8 3000 	str.w	r3, [r8]
}
   1e8be:	b023      	add	sp, #140	; 0x8c
   1e8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   1e8c4:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1e8c6:	783a      	ldrb	r2, [r7, #0]
   1e8c8:	4610      	mov	r0, r2
   1e8ca:	f010 fc73 	bl	2f1b4 <is_lfcr>
   1e8ce:	463b      	mov	r3, r7
			tmpstr++;
   1e8d0:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1e8d2:	b908      	cbnz	r0, 1e8d8 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e8d4:	2a00      	cmp	r2, #0
   1e8d6:	d1f6      	bne.n	1e8c6 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   1e8d8:	4622      	mov	r2, r4
   1e8da:	4631      	mov	r1, r6
   1e8dc:	4628      	mov	r0, r5
   1e8de:	1b1b      	subs	r3, r3, r4
   1e8e0:	f010 fccd 	bl	2f27e <at_params_string_put>
   1e8e4:	e7dc      	b.n	1e8a0 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   1e8e6:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1e8e8:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1e8ea:	463b      	mov	r3, r7
   1e8ec:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   1e8ee:	f107 0701 	add.w	r7, r7, #1
   1e8f2:	d0f1      	beq.n	1e8d8 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e8f4:	2a00      	cmp	r2, #0
   1e8f6:	d1f7      	bne.n	1e8e8 <at_parse_process_element+0x108>
   1e8f8:	e7ee      	b.n	1e8d8 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e8fa:	4620      	mov	r0, r4
   1e8fc:	220a      	movs	r2, #10
   1e8fe:	a901      	add	r1, sp, #4
   1e900:	f00a f980 	bl	28c04 <strtoul>
   1e904:	2401      	movs	r4, #1
		tmpstr = next;
   1e906:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e908:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1e90a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1e90c:	9b00      	ldr	r3, [sp, #0]
   1e90e:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1e910:	2829      	cmp	r0, #41	; 0x29
   1e912:	d025      	beq.n	1e960 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e914:	b320      	cbz	r0, 1e960 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1e916:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   1e91a:	f7ff ff3b 	bl	1e794 <is_separator>
				tmparray[i++] =
   1e91e:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   1e922:	b908      	cbnz	r0, 1e928 <at_parse_process_element+0x148>
					tmpstr = next;
   1e924:	4627      	mov	r7, r4
   1e926:	e019      	b.n	1e95c <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1e928:	220a      	movs	r2, #10
   1e92a:	a901      	add	r1, sp, #4
   1e92c:	4648      	mov	r0, r9
   1e92e:	f00a f969 	bl	28c04 <strtoul>
				tmparray[i++] =
   1e932:	ab22      	add	r3, sp, #136	; 0x88
   1e934:	1c67      	adds	r7, r4, #1
   1e936:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1e93a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1e93e:	4648      	mov	r0, r9
   1e940:	f7ea fc6f 	bl	9222 <strlen>
   1e944:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1e948:	4604      	mov	r4, r0
   1e94a:	4648      	mov	r0, r9
   1e94c:	f7ea fc69 	bl	9222 <strlen>
   1e950:	4284      	cmp	r4, r0
   1e952:	d006      	beq.n	1e962 <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e954:	2f20      	cmp	r7, #32
					tmpstr = next;
   1e956:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1e95a:	d002      	beq.n	1e962 <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1e95c:	463c      	mov	r4, r7
   1e95e:	e7d5      	b.n	1e90c <at_parse_process_element+0x12c>
   1e960:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1e962:	00bb      	lsls	r3, r7, #2
   1e964:	4631      	mov	r1, r6
   1e966:	4628      	mov	r0, r5
   1e968:	aa02      	add	r2, sp, #8
   1e96a:	f010 fcab 	bl	2f2c4 <at_params_array_put>
		tmpstr++;
   1e96e:	9b00      	ldr	r3, [sp, #0]
   1e970:	3301      	adds	r3, #1
   1e972:	9300      	str	r3, [sp, #0]
   1e974:	e79f      	b.n	1e8b6 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1e976:	220a      	movs	r2, #10
   1e978:	4620      	mov	r0, r4
   1e97a:	a902      	add	r1, sp, #8
   1e97c:	f00a f8c6 	bl	28b0c <strtoll>
   1e980:	460b      	mov	r3, r1
		tmpstr = next;
   1e982:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1e984:	4602      	mov	r2, r0
		tmpstr = next;
   1e986:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1e988:	4628      	mov	r0, r5
   1e98a:	4631      	mov	r1, r6
   1e98c:	f010 fc62 	bl	2f254 <at_params_int_put>
   1e990:	e791      	b.n	1e8b6 <at_parse_process_element+0xd6>
   1e992:	2101      	movs	r1, #1
   1e994:	e75d      	b.n	1e852 <at_parse_process_element+0x72>
		return -1;
   1e996:	f04f 30ff 	mov.w	r0, #4294967295
   1e99a:	e790      	b.n	1e8be <at_parse_process_element+0xde>
   1e99c:	200103ca 	.word	0x200103ca
   1e9a0:	0003c002 	.word	0x0003c002

0001e9a4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e9a4:	b510      	push	{r4, lr}
   1e9a6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e9a8:	f7ea fc3b 	bl	9222 <strlen>
   1e9ac:	2801      	cmp	r0, #1
   1e9ae:	d921      	bls.n	1e9f4 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1e9b0:	7823      	ldrb	r3, [r4, #0]
   1e9b2:	4912      	ldr	r1, [pc, #72]	; (1e9fc <is_command+0x58>)
   1e9b4:	5cca      	ldrb	r2, [r1, r3]
   1e9b6:	f002 0203 	and.w	r2, r2, #3
   1e9ba:	2a02      	cmp	r2, #2
   1e9bc:	bf08      	it	eq
   1e9be:	3b20      	subeq	r3, #32
   1e9c0:	2b41      	cmp	r3, #65	; 0x41
   1e9c2:	d117      	bne.n	1e9f4 <is_command+0x50>
   1e9c4:	7863      	ldrb	r3, [r4, #1]
   1e9c6:	5cca      	ldrb	r2, [r1, r3]
   1e9c8:	f002 0203 	and.w	r2, r2, #3
   1e9cc:	2a02      	cmp	r2, #2
   1e9ce:	bf08      	it	eq
   1e9d0:	3b20      	subeq	r3, #32
   1e9d2:	2b54      	cmp	r3, #84	; 0x54
   1e9d4:	d10e      	bne.n	1e9f4 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e9d6:	78a2      	ldrb	r2, [r4, #2]
   1e9d8:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e9dc:	2b23      	cmp	r3, #35	; 0x23
   1e9de:	d00b      	beq.n	1e9f8 <is_command+0x54>
   1e9e0:	2a25      	cmp	r2, #37	; 0x25
   1e9e2:	d009      	beq.n	1e9f8 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e9e4:	4610      	mov	r0, r2
   1e9e6:	f010 fbe5 	bl	2f1b4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e9ea:	b910      	cbnz	r0, 1e9f2 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e9ec:	fab2 f082 	clz	r0, r2
   1e9f0:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e9f2:	bd10      	pop	{r4, pc}
		return false;
   1e9f4:	2000      	movs	r0, #0
   1e9f6:	e7fc      	b.n	1e9f2 <is_command+0x4e>
		return true;
   1e9f8:	2001      	movs	r0, #1
   1e9fa:	e7fa      	b.n	1e9f2 <is_command+0x4e>
   1e9fc:	0003c002 	.word	0x0003c002

0001ea00 <at_parse_detect_type>:
{
   1ea00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea04:	4607      	mov	r7, r0
	const char *tmpstr = *str;
   1ea06:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1ea08:	f8df 8190 	ldr.w	r8, [pc, #400]	; 1eb9c <at_parse_detect_type+0x19c>
   1ea0c:	2900      	cmp	r1, #0
   1ea0e:	d13d      	bne.n	1ea8c <at_parse_detect_type+0x8c>
   1ea10:	7820      	ldrb	r0, [r4, #0]
   1ea12:	f010 fbc3 	bl	2f19c <is_notification>
   1ea16:	4e62      	ldr	r6, [pc, #392]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1ea18:	4605      	mov	r5, r0
   1ea1a:	b360      	cbz	r0, 1ea76 <at_parse_detect_type+0x76>
	state = new_state;
   1ea1c:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ea1e:	2205      	movs	r2, #5
   1ea20:	4620      	mov	r0, r4
   1ea22:	4960      	ldr	r1, [pc, #384]	; (1eba4 <at_parse_detect_type+0x1a4>)
	state = new_state;
   1ea24:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ea26:	f012 f8a0 	bl	30b6a <strncmp>
   1ea2a:	b1f8      	cbz	r0, 1ea6c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1ea2c:	2205      	movs	r2, #5
   1ea2e:	4620      	mov	r0, r4
   1ea30:	495d      	ldr	r1, [pc, #372]	; (1eba8 <at_parse_detect_type+0x1a8>)
   1ea32:	f012 f89a 	bl	30b6a <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1ea36:	b1c8      	cbz	r0, 1ea6c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ea38:	220b      	movs	r2, #11
   1ea3a:	4620      	mov	r0, r4
   1ea3c:	495b      	ldr	r1, [pc, #364]	; (1ebac <at_parse_detect_type+0x1ac>)
   1ea3e:	f012 f894 	bl	30b6a <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1ea42:	b198      	cbz	r0, 1ea6c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ea44:	220a      	movs	r2, #10
   1ea46:	4620      	mov	r0, r4
   1ea48:	4959      	ldr	r1, [pc, #356]	; (1ebb0 <at_parse_detect_type+0x1b0>)
   1ea4a:	f012 f88e 	bl	30b6a <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1ea4e:	b168      	cbz	r0, 1ea6c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ea50:	220b      	movs	r2, #11
   1ea52:	4620      	mov	r0, r4
   1ea54:	4957      	ldr	r1, [pc, #348]	; (1ebb4 <at_parse_detect_type+0x1b4>)
   1ea56:	f012 f888 	bl	30b6a <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1ea5a:	b138      	cbz	r0, 1ea6c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1ea5c:	2207      	movs	r2, #7
   1ea5e:	4620      	mov	r0, r4
   1ea60:	4955      	ldr	r1, [pc, #340]	; (1ebb8 <at_parse_detect_type+0x1b8>)
   1ea62:	f012 f882 	bl	30b6a <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1ea66:	fab0 f580 	clz	r5, r0
   1ea6a:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   1ea6c:	f888 5000 	strb.w	r5, [r8]
	return 0;
   1ea70:	2000      	movs	r0, #0
	*str = tmpstr;
   1ea72:	603c      	str	r4, [r7, #0]
	return 0;
   1ea74:	e04e      	b.n	1eb14 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
   1ea76:	f898 3000 	ldrb.w	r3, [r8]
   1ea7a:	b953      	cbnz	r3, 1ea92 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   1ea7c:	4620      	mov	r0, r4
   1ea7e:	f7ff ff91 	bl	1e9a4 <is_command>
   1ea82:	2800      	cmp	r0, #0
   1ea84:	d048      	beq.n	1eb18 <at_parse_detect_type+0x118>
	state = new_state;
   1ea86:	2307      	movs	r3, #7
   1ea88:	7033      	strb	r3, [r6, #0]
}
   1ea8a:	e7f1      	b.n	1ea70 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   1ea8c:	f898 3000 	ldrb.w	r3, [r8]
   1ea90:	b11b      	cbz	r3, 1ea9a <at_parse_detect_type+0x9a>
	state = new_state;
   1ea92:	2202      	movs	r2, #2
   1ea94:	4b42      	ldr	r3, [pc, #264]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1ea96:	701a      	strb	r2, [r3, #0]
}
   1ea98:	e7ea      	b.n	1ea70 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1ea9a:	2900      	cmp	r1, #0
   1ea9c:	dd43      	ble.n	1eb26 <at_parse_detect_type+0x126>
   1ea9e:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1eaa0:	7815      	ldrb	r5, [r2, #0]
   1eaa2:	4616      	mov	r6, r2
   1eaa4:	4628      	mov	r0, r5
   1eaa6:	3201      	adds	r2, #1
   1eaa8:	f010 fb84 	bl	2f1b4 <is_lfcr>
   1eaac:	2800      	cmp	r0, #0
   1eaae:	d1f7      	bne.n	1eaa0 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   1eab0:	4630      	mov	r0, r6
   1eab2:	f7ea fbb6 	bl	9222 <strlen>
   1eab6:	2803      	cmp	r0, #3
   1eab8:	d930      	bls.n	1eb1c <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1eaba:	462b      	mov	r3, r5
   1eabc:	4a3f      	ldr	r2, [pc, #252]	; (1ebbc <at_parse_detect_type+0x1bc>)
   1eabe:	5d51      	ldrb	r1, [r2, r5]
   1eac0:	f001 0103 	and.w	r1, r1, #3
   1eac4:	2902      	cmp	r1, #2
   1eac6:	bf08      	it	eq
   1eac8:	f1a5 0320 	subeq.w	r3, r5, #32
   1eacc:	2b41      	cmp	r3, #65	; 0x41
   1eace:	d125      	bne.n	1eb1c <at_parse_detect_type+0x11c>
   1ead0:	7873      	ldrb	r3, [r6, #1]
   1ead2:	5cd1      	ldrb	r1, [r2, r3]
   1ead4:	f001 0103 	and.w	r1, r1, #3
   1ead8:	2902      	cmp	r1, #2
   1eada:	bf08      	it	eq
   1eadc:	3b20      	subeq	r3, #32
   1eade:	2b54      	cmp	r3, #84	; 0x54
   1eae0:	d11c      	bne.n	1eb1c <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1eae2:	78b3      	ldrb	r3, [r6, #2]
   1eae4:	5cd1      	ldrb	r1, [r2, r3]
   1eae6:	f001 0103 	and.w	r1, r1, #3
   1eaea:	2902      	cmp	r1, #2
   1eaec:	bf08      	it	eq
   1eaee:	3b20      	subeq	r3, #32
   1eaf0:	2b2b      	cmp	r3, #43	; 0x2b
   1eaf2:	d00a      	beq.n	1eb0a <at_parse_detect_type+0x10a>
   1eaf4:	2b25      	cmp	r3, #37	; 0x25
   1eaf6:	d111      	bne.n	1eb1c <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1eaf8:	78f3      	ldrb	r3, [r6, #3]
   1eafa:	5cd2      	ldrb	r2, [r2, r3]
   1eafc:	f002 0203 	and.w	r2, r2, #3
   1eb00:	2a02      	cmp	r2, #2
   1eb02:	bf08      	it	eq
   1eb04:	3b20      	subeq	r3, #32
   1eb06:	2b58      	cmp	r3, #88	; 0x58
   1eb08:	d008      	beq.n	1eb1c <at_parse_detect_type+0x11c>
	state = new_state;
   1eb0a:	2209      	movs	r2, #9
		return -2;
   1eb0c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1eb10:	4b23      	ldr	r3, [pc, #140]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1eb12:	701a      	strb	r2, [r3, #0]
}
   1eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
   1eb18:	2302      	movs	r3, #2
   1eb1a:	e7b5      	b.n	1ea88 <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1eb1c:	7820      	ldrb	r0, [r4, #0]
   1eb1e:	f010 fb3d 	bl	2f19c <is_notification>
   1eb22:	2800      	cmp	r0, #0
   1eb24:	d136      	bne.n	1eb94 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
   1eb26:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1eb28:	4b24      	ldr	r3, [pc, #144]	; (1ebbc <at_parse_detect_type+0x1bc>)
   1eb2a:	5c9b      	ldrb	r3, [r3, r2]
   1eb2c:	075b      	lsls	r3, r3, #29
   1eb2e:	d40a      	bmi.n	1eb46 <at_parse_detect_type+0x146>
   1eb30:	2a2d      	cmp	r2, #45	; 0x2d
   1eb32:	d008      	beq.n	1eb46 <at_parse_detect_type+0x146>
   1eb34:	2a2b      	cmp	r2, #43	; 0x2b
   1eb36:	d006      	beq.n	1eb46 <at_parse_detect_type+0x146>
	if (chr == '"') {
   1eb38:	2a22      	cmp	r2, #34	; 0x22
   1eb3a:	d107      	bne.n	1eb4c <at_parse_detect_type+0x14c>
	state = new_state;
   1eb3c:	2203      	movs	r2, #3
   1eb3e:	4b18      	ldr	r3, [pc, #96]	; (1eba0 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1eb40:	3401      	adds	r4, #1
	state = new_state;
   1eb42:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1eb44:	e794      	b.n	1ea70 <at_parse_detect_type+0x70>
	state = new_state;
   1eb46:	2204      	movs	r2, #4
   1eb48:	4b15      	ldr	r3, [pc, #84]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1eb4a:	e7a4      	b.n	1ea96 <at_parse_detect_type+0x96>
	if (chr == '(') {
   1eb4c:	2a28      	cmp	r2, #40	; 0x28
   1eb4e:	d104      	bne.n	1eb5a <at_parse_detect_type+0x15a>
   1eb50:	2201      	movs	r2, #1
   1eb52:	4b13      	ldr	r3, [pc, #76]	; (1eba0 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   1eb54:	4414      	add	r4, r2
	state = new_state;
   1eb56:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1eb58:	e78a      	b.n	1ea70 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1eb5a:	4610      	mov	r0, r2
   1eb5c:	f010 fb2a 	bl	2f1b4 <is_lfcr>
   1eb60:	b188      	cbz	r0, 1eb86 <at_parse_detect_type+0x186>
   1eb62:	490f      	ldr	r1, [pc, #60]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1eb64:	780b      	ldrb	r3, [r1, #0]
   1eb66:	2b04      	cmp	r3, #4
   1eb68:	d10a      	bne.n	1eb80 <at_parse_detect_type+0x180>
   1eb6a:	4622      	mov	r2, r4
   1eb6c:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   1eb6e:	f812 0b01 	ldrb.w	r0, [r2], #1
   1eb72:	f010 fb1f 	bl	2f1b4 <is_lfcr>
   1eb76:	2800      	cmp	r0, #0
   1eb78:	d1f8      	bne.n	1eb6c <at_parse_detect_type+0x16c>
	state = new_state;
   1eb7a:	2305      	movs	r3, #5
   1eb7c:	700b      	strb	r3, [r1, #0]
}
   1eb7e:	e777      	b.n	1ea70 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1eb80:	2b08      	cmp	r3, #8
   1eb82:	f43f af75 	beq.w	1ea70 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   1eb86:	4610      	mov	r0, r2
   1eb88:	f7ff fe04 	bl	1e794 <is_separator>
   1eb8c:	b110      	cbz	r0, 1eb94 <at_parse_detect_type+0x194>
	state = new_state;
   1eb8e:	2208      	movs	r2, #8
   1eb90:	4b03      	ldr	r3, [pc, #12]	; (1eba0 <at_parse_detect_type+0x1a0>)
   1eb92:	e780      	b.n	1ea96 <at_parse_detect_type+0x96>
		return -1;
   1eb94:	f04f 30ff 	mov.w	r0, #4294967295
   1eb98:	e7bc      	b.n	1eb14 <at_parse_detect_type+0x114>
   1eb9a:	bf00      	nop
   1eb9c:	200103c9 	.word	0x200103c9
   1eba0:	200103ca 	.word	0x200103ca
   1eba4:	00038dd9 	.word	0x00038dd9
   1eba8:	00038ddf 	.word	0x00038ddf
   1ebac:	00038de5 	.word	0x00038de5
   1ebb0:	00038df1 	.word	0x00038df1
   1ebb4:	00038dfc 	.word	0x00038dfc
   1ebb8:	00038e08 	.word	0x00038e08
   1ebbc:	0003c002 	.word	0x0003c002

0001ebc0 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1ebc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebc4:	4689      	mov	r9, r1
   1ebc6:	4616      	mov	r6, r2
   1ebc8:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1ebca:	4680      	mov	r8, r0
   1ebcc:	2800      	cmp	r0, #0
   1ebce:	f000 8099 	beq.w	1ed04 <at_parser_max_params_from_str+0x144>
   1ebd2:	2a00      	cmp	r2, #0
   1ebd4:	f000 8096 	beq.w	1ed04 <at_parser_max_params_from_str+0x144>
   1ebd8:	6853      	ldr	r3, [r2, #4]
   1ebda:	2b00      	cmp	r3, #0
   1ebdc:	f000 8092 	beq.w	1ed04 <at_parser_max_params_from_str+0x144>
	state = IDLE;
   1ebe0:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   1ebe2:	4610      	mov	r0, r2
   1ebe4:	f000 f900 	bl	1ede8 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1ebe8:	4642      	mov	r2, r8
   1ebea:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1ebec:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1ebf0:	429f      	cmp	r7, r3
   1ebf2:	bf28      	it	cs
   1ebf4:	461f      	movcs	r7, r3
	state = IDLE;
   1ebf6:	4b45      	ldr	r3, [pc, #276]	; (1ed0c <at_parser_max_params_from_str+0x14c>)
   1ebf8:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1ebfa:	4b45      	ldr	r3, [pc, #276]	; (1ed10 <at_parser_max_params_from_str+0x150>)
   1ebfc:	701c      	strb	r4, [r3, #0]
   1ebfe:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   1ec00:	7808      	ldrb	r0, [r1, #0]
   1ec02:	f010 fad7 	bl	2f1b4 <is_lfcr>
   1ec06:	4625      	mov	r5, r4
   1ec08:	3201      	adds	r2, #1
   1ec0a:	4604      	mov	r4, r0
   1ec0c:	2800      	cmp	r0, #0
   1ec0e:	d1f6      	bne.n	1ebfe <at_parser_max_params_from_str+0x3e>
   1ec10:	b105      	cbz	r5, 1ec14 <at_parser_max_params_from_str+0x54>
   1ec12:	9101      	str	r1, [sp, #4]
	int index = 0;
   1ec14:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   1ec16:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 1ed14 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   1ec1a:	9b01      	ldr	r3, [sp, #4]
   1ec1c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ec1e:	2a00      	cmp	r2, #0
   1ec20:	d050      	beq.n	1ecc4 <at_parser_max_params_from_str+0x104>
   1ec22:	42af      	cmp	r7, r5
   1ec24:	d94e      	bls.n	1ecc4 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
   1ec26:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   1ec2a:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   1ec2c:	0712      	lsls	r2, r2, #28
			str++;
   1ec2e:	bf48      	it	mi
   1ec30:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1ec32:	a801      	add	r0, sp, #4
			str++;
   1ec34:	bf48      	it	mi
   1ec36:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   1ec38:	f7ff fee2 	bl	1ea00 <at_parse_detect_type>
		if (ret == -1) {
   1ec3c:	1c43      	adds	r3, r0, #1
   1ec3e:	d041      	beq.n	1ecc4 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
   1ec40:	3002      	adds	r0, #2
			index = 0;
   1ec42:	bf08      	it	eq
   1ec44:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1ec46:	4632      	mov	r2, r6
   1ec48:	4629      	mov	r1, r5
   1ec4a:	a801      	add	r0, sp, #4
			str = *at_params_str;
   1ec4c:	bf08      	it	eq
   1ec4e:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   1ec52:	f7ff fdc5 	bl	1e7e0 <at_parse_process_element>
   1ec56:	3001      	adds	r0, #1
   1ec58:	d034      	beq.n	1ecc4 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
   1ec5a:	9a01      	ldr	r2, [sp, #4]
   1ec5c:	7810      	ldrb	r0, [r2, #0]
   1ec5e:	f7ff fd99 	bl	1e794 <is_separator>
   1ec62:	b1b0      	cbz	r0, 1ec92 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   1ec64:	7850      	ldrb	r0, [r2, #1]
   1ec66:	f010 faa5 	bl	2f1b4 <is_lfcr>
   1ec6a:	b178      	cbz	r0, 1ec8c <at_parser_max_params_from_str+0xcc>
				index++;
   1ec6c:	3501      	adds	r5, #1
				if (index == max_params) {
   1ec6e:	42bd      	cmp	r5, r7
   1ec70:	d041      	beq.n	1ecf6 <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
   1ec72:	4629      	mov	r1, r5
   1ec74:	a801      	add	r0, sp, #4
   1ec76:	f7ff fec3 	bl	1ea00 <at_parse_detect_type>
   1ec7a:	3001      	adds	r0, #1
   1ec7c:	d022      	beq.n	1ecc4 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
   1ec7e:	4632      	mov	r2, r6
   1ec80:	4629      	mov	r1, r5
   1ec82:	a801      	add	r0, sp, #4
   1ec84:	f7ff fdac 	bl	1e7e0 <at_parse_process_element>
   1ec88:	3001      	adds	r0, #1
   1ec8a:	d01b      	beq.n	1ecc4 <at_parser_max_params_from_str+0x104>
			str++;
   1ec8c:	9b01      	ldr	r3, [sp, #4]
   1ec8e:	3301      	adds	r3, #1
   1ec90:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   1ec92:	9a01      	ldr	r2, [sp, #4]
   1ec94:	7810      	ldrb	r0, [r2, #0]
   1ec96:	f010 fa8d 	bl	2f1b4 <is_lfcr>
   1ec9a:	b338      	cbz	r0, 1ecec <at_parser_max_params_from_str+0x12c>
   1ec9c:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1ec9e:	7811      	ldrb	r1, [r2, #0]
   1eca0:	4692      	mov	sl, r2
   1eca2:	4608      	mov	r0, r1
   1eca4:	3201      	adds	r2, #1
   1eca6:	f010 fa85 	bl	2f1b4 <is_lfcr>
   1ecaa:	2800      	cmp	r0, #0
   1ecac:	d1f7      	bne.n	1ec9e <at_parser_max_params_from_str+0xde>
   1ecae:	b139      	cbz	r1, 1ecc0 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ecb0:	4608      	mov	r0, r1
   1ecb2:	f010 fa73 	bl	2f19c <is_notification>
   1ecb6:	b918      	cbnz	r0, 1ecc0 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
   1ecb8:	4650      	mov	r0, sl
   1ecba:	f7ff fd79 	bl	1e7b0 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1ecbe:	b1a8      	cbz	r0, 1ecec <at_parser_max_params_from_str+0x12c>
				str += i;
   1ecc0:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1ecc4:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   1ecc6:	b9c4      	cbnz	r4, 1ecfa <at_parser_max_params_from_str+0x13a>
   1ecc8:	782b      	ldrb	r3, [r5, #0]
   1ecca:	b1cb      	cbz	r3, 1ed00 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
   1eccc:	4628      	mov	r0, r5
   1ecce:	f7ff fd6f 	bl	1e7b0 <is_result>
		return -EAGAIN;
   1ecd2:	2800      	cmp	r0, #0
   1ecd4:	bf14      	ite	ne
   1ecd6:	2000      	movne	r0, #0
   1ecd8:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1ecdc:	f1b9 0f00 	cmp.w	r9, #0
   1ece0:	d001      	beq.n	1ece6 <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
   1ece2:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   1ece6:	b003      	add	sp, #12
   1ece8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   1ecec:	3501      	adds	r5, #1
			oversized = true;
   1ecee:	42bd      	cmp	r5, r7
   1ecf0:	bf08      	it	eq
   1ecf2:	2401      	moveq	r4, #1
   1ecf4:	e791      	b.n	1ec1a <at_parser_max_params_from_str+0x5a>
					oversized = true;
   1ecf6:	4604      	mov	r4, r0
   1ecf8:	e7e4      	b.n	1ecc4 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
   1ecfa:	f06f 0006 	mvn.w	r0, #6
   1ecfe:	e7ed      	b.n	1ecdc <at_parser_max_params_from_str+0x11c>
	return 0;
   1ed00:	4620      	mov	r0, r4
   1ed02:	e7eb      	b.n	1ecdc <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
   1ed04:	f06f 0015 	mvn.w	r0, #21
   1ed08:	e7ed      	b.n	1ece6 <at_parser_max_params_from_str+0x126>
   1ed0a:	bf00      	nop
   1ed0c:	200103ca 	.word	0x200103ca
   1ed10:	200103c9 	.word	0x200103c9
   1ed14:	0003c002 	.word	0x0003c002

0001ed18 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1ed18:	b508      	push	{r3, lr}
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1ed1a:	b960      	cbnz	r0, 1ed36 <at_params_get+0x1e>
   1ed1c:	490a      	ldr	r1, [pc, #40]	; (1ed48 <at_params_get+0x30>)
   1ed1e:	232b      	movs	r3, #43	; 0x2b
   1ed20:	4a0a      	ldr	r2, [pc, #40]	; (1ed4c <at_params_get+0x34>)
   1ed22:	480b      	ldr	r0, [pc, #44]	; (1ed50 <at_params_get+0x38>)
   1ed24:	f00c f848 	bl	2adb8 <assert_print>
   1ed28:	480a      	ldr	r0, [pc, #40]	; (1ed54 <at_params_get+0x3c>)
   1ed2a:	f00c f845 	bl	2adb8 <assert_print>
   1ed2e:	212b      	movs	r1, #43	; 0x2b
   1ed30:	4806      	ldr	r0, [pc, #24]	; (1ed4c <at_params_get+0x34>)
   1ed32:	f00c f83a 	bl	2adaa <assert_post_action>

	if (index >= list->param_count) {
   1ed36:	6803      	ldr	r3, [r0, #0]
   1ed38:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1ed3a:	bf8a      	itet	hi
   1ed3c:	6840      	ldrhi	r0, [r0, #4]
		return NULL;
   1ed3e:	2000      	movls	r0, #0
	return &param[index];
   1ed40:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
}
   1ed44:	bd08      	pop	{r3, pc}
   1ed46:	bf00      	nop
   1ed48:	00038e61 	.word	0x00038e61
   1ed4c:	00038e33 	.word	0x00038e33
   1ed50:	00033bc2 	.word	0x00033bc2
   1ed54:	00038e75 	.word	0x00038e75

0001ed58 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1ed58:	b508      	push	{r3, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1ed5a:	b960      	cbnz	r0, 1ed76 <at_param_size+0x1e>
   1ed5c:	490c      	ldr	r1, [pc, #48]	; (1ed90 <at_param_size+0x38>)
   1ed5e:	2339      	movs	r3, #57	; 0x39
   1ed60:	4a0c      	ldr	r2, [pc, #48]	; (1ed94 <at_param_size+0x3c>)
   1ed62:	480d      	ldr	r0, [pc, #52]	; (1ed98 <at_param_size+0x40>)
   1ed64:	f00c f828 	bl	2adb8 <assert_print>
   1ed68:	480c      	ldr	r0, [pc, #48]	; (1ed9c <at_param_size+0x44>)
   1ed6a:	f00c f825 	bl	2adb8 <assert_print>
   1ed6e:	2139      	movs	r1, #57	; 0x39
   1ed70:	4808      	ldr	r0, [pc, #32]	; (1ed94 <at_param_size+0x3c>)
   1ed72:	f00c f81a 	bl	2adaa <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1ed76:	7803      	ldrb	r3, [r0, #0]
   1ed78:	2b01      	cmp	r3, #1
   1ed7a:	d004      	beq.n	1ed86 <at_param_size+0x2e>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1ed7c:	3b02      	subs	r3, #2
   1ed7e:	2b01      	cmp	r3, #1
   1ed80:	d803      	bhi.n	1ed8a <at_param_size+0x32>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1ed82:	6840      	ldr	r0, [r0, #4]
	}

	return 0;
}
   1ed84:	bd08      	pop	{r3, pc}
		return sizeof(uint64_t);
   1ed86:	2008      	movs	r0, #8
   1ed88:	e7fc      	b.n	1ed84 <at_param_size+0x2c>
	return 0;
   1ed8a:	2000      	movs	r0, #0
   1ed8c:	e7fa      	b.n	1ed84 <at_param_size+0x2c>
   1ed8e:	bf00      	nop
   1ed90:	00038e96 	.word	0x00038e96
   1ed94:	00038e33 	.word	0x00038e33
   1ed98:	00033bc2 	.word	0x00033bc2
   1ed9c:	00038eab 	.word	0x00038eab

0001eda0 <at_param_clear>:
{
   1eda0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1eda2:	4604      	mov	r4, r0
   1eda4:	b960      	cbnz	r0, 1edc0 <at_param_clear+0x20>
   1eda6:	490c      	ldr	r1, [pc, #48]	; (1edd8 <at_param_clear+0x38>)
   1eda8:	231d      	movs	r3, #29
   1edaa:	4a0c      	ldr	r2, [pc, #48]	; (1eddc <at_param_clear+0x3c>)
   1edac:	480c      	ldr	r0, [pc, #48]	; (1ede0 <at_param_clear+0x40>)
   1edae:	f00c f803 	bl	2adb8 <assert_print>
   1edb2:	480c      	ldr	r0, [pc, #48]	; (1ede4 <at_param_clear+0x44>)
   1edb4:	f00c f800 	bl	2adb8 <assert_print>
   1edb8:	211d      	movs	r1, #29
   1edba:	4808      	ldr	r0, [pc, #32]	; (1eddc <at_param_clear+0x3c>)
   1edbc:	f00b fff5 	bl	2adaa <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1edc0:	7803      	ldrb	r3, [r0, #0]
   1edc2:	3b02      	subs	r3, #2
   1edc4:	2b01      	cmp	r3, #1
   1edc6:	d802      	bhi.n	1edce <at_param_clear+0x2e>
		k_free(param->value.str_val);
   1edc8:	6880      	ldr	r0, [r0, #8]
   1edca:	f011 fcff 	bl	307cc <k_free>
	param->value.int_val = 0;
   1edce:	2200      	movs	r2, #0
   1edd0:	2300      	movs	r3, #0
   1edd2:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1edd6:	bd10      	pop	{r4, pc}
   1edd8:	00038e96 	.word	0x00038e96
   1eddc:	00038e33 	.word	0x00038e33
   1ede0:	00033bc2 	.word	0x00033bc2
   1ede4:	00038eab 	.word	0x00038eab

0001ede8 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1ede8:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   1edea:	4604      	mov	r4, r0
   1edec:	b128      	cbz	r0, 1edfa <at_params_list_clear+0x12>
   1edee:	6843      	ldr	r3, [r0, #4]
   1edf0:	b11b      	cbz	r3, 1edfa <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1edf2:	2600      	movs	r6, #0
   1edf4:	6823      	ldr	r3, [r4, #0]
   1edf6:	429e      	cmp	r6, r3
   1edf8:	d300      	bcc.n	1edfc <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1edfa:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   1edfc:	6865      	ldr	r5, [r4, #4]
   1edfe:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1ee02:	4628      	mov	r0, r5
   1ee04:	f7ff ffcc 	bl	1eda0 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1ee08:	b965      	cbnz	r5, 1ee24 <at_params_list_clear+0x3c>
   1ee0a:	490a      	ldr	r1, [pc, #40]	; (1ee34 <at_params_list_clear+0x4c>)
   1ee0c:	2314      	movs	r3, #20
   1ee0e:	4a0a      	ldr	r2, [pc, #40]	; (1ee38 <at_params_list_clear+0x50>)
   1ee10:	480a      	ldr	r0, [pc, #40]	; (1ee3c <at_params_list_clear+0x54>)
   1ee12:	f00b ffd1 	bl	2adb8 <assert_print>
   1ee16:	480a      	ldr	r0, [pc, #40]	; (1ee40 <at_params_list_clear+0x58>)
   1ee18:	f00b ffce 	bl	2adb8 <assert_print>
   1ee1c:	2114      	movs	r1, #20
   1ee1e:	4806      	ldr	r0, [pc, #24]	; (1ee38 <at_params_list_clear+0x50>)
   1ee20:	f00b ffc3 	bl	2adaa <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1ee24:	2210      	movs	r2, #16
   1ee26:	2100      	movs	r1, #0
   1ee28:	4628      	mov	r0, r5
   1ee2a:	f011 fd2a 	bl	30882 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1ee2e:	3601      	adds	r6, #1
   1ee30:	e7e0      	b.n	1edf4 <at_params_list_clear+0xc>
   1ee32:	bf00      	nop
   1ee34:	00038e96 	.word	0x00038e96
   1ee38:	00038e33 	.word	0x00038e33
   1ee3c:	00033bc2 	.word	0x00033bc2
   1ee40:	00038eab 	.word	0x00038eab

0001ee44 <lte_lc_connect_async.part.0>:
int lte_lc_init_and_connect(void)
{
	return init_and_connect();
}

int lte_lc_connect_async(lte_lc_evt_handler_t handler)
   1ee44:	b580      	push	{r7, lr}
   1ee46:	af00      	add	r7, sp, #0
{
	if (handler) {
		event_handler_list_append_handler(handler);
	} else if (event_handler_list_is_empty()) {
		LOG_ERR("No handler registered");
   1ee48:	b088      	sub	sp, #32
   1ee4a:	466a      	mov	r2, sp
   1ee4c:	4b07      	ldr	r3, [pc, #28]	; (1ee6c <lte_lc_connect_async.part.0+0x28>)
   1ee4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee52:	6153      	str	r3, [r2, #20]
   1ee54:	4b06      	ldr	r3, [pc, #24]	; (1ee70 <lte_lc_connect_async.part.0+0x2c>)
   1ee56:	4807      	ldr	r0, [pc, #28]	; (1ee74 <lte_lc_connect_async.part.0+0x30>)
   1ee58:	6193      	str	r3, [r2, #24]
   1ee5a:	2303      	movs	r3, #3
   1ee5c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee60:	f010 faf1 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
	}

	return connect_lte(false);
}
   1ee64:	f06f 0015 	mvn.w	r0, #21
   1ee68:	46bd      	mov	sp, r7
   1ee6a:	bd80      	pop	{r7, pc}
   1ee6c:	00038ec7 	.word	0x00038ec7
   1ee70:	0003985e 	.word	0x0003985e
   1ee74:	00031c2c 	.word	0x00031c2c

0001ee78 <enable_notifications>:
{
   1ee78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee7c:	b08f      	sub	sp, #60	; 0x3c
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ee7e:	4833      	ldr	r0, [pc, #204]	; (1ef4c <enable_notifications+0xd4>)
{
   1ee80:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   1ee82:	f003 fedf 	bl	22c44 <nrf_modem_at_printf>
	if (err) {
   1ee86:	4604      	mov	r4, r0
   1ee88:	b1b8      	cbz	r0, 1eeba <enable_notifications+0x42>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1ee8a:	466d      	mov	r5, sp
   1ee8c:	b088      	sub	sp, #32
   1ee8e:	466a      	mov	r2, sp
   1ee90:	4b2f      	ldr	r3, [pc, #188]	; (1ef50 <enable_notifications+0xd8>)
   1ee92:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ee96:	6153      	str	r3, [r2, #20]
   1ee98:	4b2e      	ldr	r3, [pc, #184]	; (1ef54 <enable_notifications+0xdc>)
		return -EFAULT;
   1ee9a:	f06f 040d 	mvn.w	r4, #13
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1ee9e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1eea2:	2304      	movs	r3, #4
   1eea4:	482c      	ldr	r0, [pc, #176]	; (1ef58 <enable_notifications+0xe0>)
   1eea6:	f842 3f10 	str.w	r3, [r2, #16]!
   1eeaa:	f010 facc 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1eeae:	46ad      	mov	sp, r5
}
   1eeb0:	4620      	mov	r0, r4
   1eeb2:	373c      	adds	r7, #60	; 0x3c
   1eeb4:	46bd      	mov	sp, r7
   1eeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = nrf_modem_at_printf(cscon);
   1eeba:	4828      	ldr	r0, [pc, #160]	; (1ef5c <enable_notifications+0xe4>)
   1eebc:	f003 fec2 	bl	22c44 <nrf_modem_at_printf>
	if (err) {
   1eec0:	2800      	cmp	r0, #0
   1eec2:	d0f5      	beq.n	1eeb0 <enable_notifications+0x38>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1eec4:	46e9      	mov	r9, sp
   1eec6:	b088      	sub	sp, #32
   1eec8:	466d      	mov	r5, sp
   1eeca:	4b25      	ldr	r3, [pc, #148]	; (1ef60 <enable_notifications+0xe8>)
   1eecc:	462e      	mov	r6, r5
   1eece:	616b      	str	r3, [r5, #20]
   1eed0:	2304      	movs	r3, #4
   1eed2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1ef54 <enable_notifications+0xdc>
   1eed6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1eeda:	e9c5 8006 	strd	r8, r0, [r5, #24]
   1eede:	f846 3f10 	str.w	r3, [r6, #16]!
   1eee2:	4632      	mov	r2, r6
   1eee4:	481c      	ldr	r0, [pc, #112]	; (1ef58 <enable_notifications+0xe0>)
   1eee6:	f010 faae 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1eeea:	46cd      	mov	sp, r9
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1eeec:	46ad      	mov	sp, r5
   1eeee:	4b1d      	ldr	r3, [pc, #116]	; (1ef64 <enable_notifications+0xec>)
   1eef0:	4632      	mov	r2, r6
   1eef2:	e9c5 3805 	strd	r3, r8, [r5, #20]
   1eef6:	2303      	movs	r3, #3
   1eef8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eefc:	4816      	ldr	r0, [pc, #88]	; (1ef58 <enable_notifications+0xe0>)
   1eefe:	612b      	str	r3, [r5, #16]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1ef00:	1d3d      	adds	r5, r7, #4
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1ef02:	f010 faa0 	bl	2f446 <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1ef06:	2132      	movs	r1, #50	; 0x32
   1ef08:	46cd      	mov	sp, r9
   1ef0a:	4628      	mov	r0, r5
   1ef0c:	4a16      	ldr	r2, [pc, #88]	; (1ef68 <enable_notifications+0xf0>)
   1ef0e:	f003 fee5 	bl	22cdc <nrf_modem_at_cmd>
		if (err == 0) {
   1ef12:	2800      	cmp	r0, #0
   1ef14:	d1cc      	bne.n	1eeb0 <enable_notifications+0x38>
			char *end = strstr(buf, "\r\nOK");
   1ef16:	4628      	mov	r0, r5
   1ef18:	4914      	ldr	r1, [pc, #80]	; (1ef6c <enable_notifications+0xf4>)
   1ef1a:	f011 fe57 	bl	30bcc <strstr>
			if (end) {
   1ef1e:	b100      	cbz	r0, 1ef22 <enable_notifications+0xaa>
				*end = '\0';
   1ef20:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   1ef22:	466e      	mov	r6, sp
   1ef24:	b08a      	sub	sp, #40	; 0x28
   1ef26:	466a      	mov	r2, sp
   1ef28:	4b11      	ldr	r3, [pc, #68]	; (1ef70 <enable_notifications+0xf8>)
   1ef2a:	61d5      	str	r5, [r2, #28]
   1ef2c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ef30:	f240 3301 	movw	r3, #769	; 0x301
   1ef34:	8413      	strh	r3, [r2, #32]
   1ef36:	4b0f      	ldr	r3, [pc, #60]	; (1ef74 <enable_notifications+0xfc>)
   1ef38:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1ef3c:	4806      	ldr	r0, [pc, #24]	; (1ef58 <enable_notifications+0xe0>)
   1ef3e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef42:	f010 fa80 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1ef46:	46b5      	mov	sp, r6
   1ef48:	e7b2      	b.n	1eeb0 <enable_notifications+0x38>
   1ef4a:	bf00      	nop
   1ef4c:	00038ee1 	.word	0x00038ee1
   1ef50:	00038eec 	.word	0x00038eec
   1ef54:	0003987f 	.word	0x0003987f
   1ef58:	00031c2c 	.word	0x00031c2c
   1ef5c:	000399b9 	.word	0x000399b9
   1ef60:	00038f26 	.word	0x00038f26
   1ef64:	00038f62 	.word	0x00038f62
   1ef68:	00038f97 	.word	0x00038f97
   1ef6c:	00038f9f 	.word	0x00038f9f
   1ef70:	00038fa4 	.word	0x00038fa4
   1ef74:	01000004 	.word	0x01000004

0001ef78 <at_handler_mdmev>:
{
   1ef78:	b590      	push	{r4, r7, lr}
   1ef7a:	4604      	mov	r4, r0
   1ef7c:	b093      	sub	sp, #76	; 0x4c
   1ef7e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1ef80:	2248      	movs	r2, #72	; 0x48
   1ef82:	2100      	movs	r1, #0
   1ef84:	4638      	mov	r0, r7
   1ef86:	f011 fc7c 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1ef8a:	b95c      	cbnz	r4, 1efa4 <at_handler_mdmev+0x2c>
   1ef8c:	4915      	ldr	r1, [pc, #84]	; (1efe4 <at_handler_mdmev+0x6c>)
   1ef8e:	4816      	ldr	r0, [pc, #88]	; (1efe8 <at_handler_mdmev+0x70>)
   1ef90:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1ef94:	4a15      	ldr	r2, [pc, #84]	; (1efec <at_handler_mdmev+0x74>)
   1ef96:	f00b ff0f 	bl	2adb8 <assert_print>
   1ef9a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1ef9e:	4813      	ldr	r0, [pc, #76]	; (1efec <at_handler_mdmev+0x74>)
   1efa0:	f00b ff03 	bl	2adaa <assert_post_action>
	err = parse_mdmev(response, &evt.modem_evt);
   1efa4:	4620      	mov	r0, r4
   1efa6:	f107 0108 	add.w	r1, r7, #8
   1efaa:	f002 f8bb 	bl	21124 <parse_mdmev>
	if (err) {
   1efae:	b198      	cbz	r0, 1efd8 <at_handler_mdmev+0x60>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1efb0:	466c      	mov	r4, sp
   1efb2:	b088      	sub	sp, #32
   1efb4:	466a      	mov	r2, sp
   1efb6:	4b0e      	ldr	r3, [pc, #56]	; (1eff0 <at_handler_mdmev+0x78>)
   1efb8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1efbc:	6153      	str	r3, [r2, #20]
   1efbe:	4b0d      	ldr	r3, [pc, #52]	; (1eff4 <at_handler_mdmev+0x7c>)
   1efc0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1efc4:	2304      	movs	r3, #4
   1efc6:	480c      	ldr	r0, [pc, #48]	; (1eff8 <at_handler_mdmev+0x80>)
   1efc8:	f842 3f10 	str.w	r3, [r2, #16]!
   1efcc:	f010 fa3b 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1efd0:	46a5      	mov	sp, r4
}
   1efd2:	374c      	adds	r7, #76	; 0x4c
   1efd4:	46bd      	mov	sp, r7
   1efd6:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efd8:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1efda:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1efdc:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1efde:	f001 f84d 	bl	2007c <event_handler_list_dispatch>
   1efe2:	e7f6      	b.n	1efd2 <at_handler_mdmev+0x5a>
   1efe4:	00038ff9 	.word	0x00038ff9
   1efe8:	00033bc2 	.word	0x00033bc2
   1efec:	00038fcb 	.word	0x00038fcb
   1eff0:	00039011 	.word	0x00039011
   1eff4:	000398a4 	.word	0x000398a4
   1eff8:	00031c2c 	.word	0x00031c2c

0001effc <at_handler_xmodemsleep>:
{
   1effc:	b590      	push	{r4, r7, lr}
   1effe:	4604      	mov	r4, r0
   1f000:	b093      	sub	sp, #76	; 0x4c
   1f002:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f004:	2248      	movs	r2, #72	; 0x48
   1f006:	2100      	movs	r1, #0
   1f008:	4638      	mov	r0, r7
   1f00a:	f011 fc3a 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f00e:	b95c      	cbnz	r4, 1f028 <at_handler_xmodemsleep+0x2c>
   1f010:	491f      	ldr	r1, [pc, #124]	; (1f090 <at_handler_xmodemsleep+0x94>)
   1f012:	4820      	ldr	r0, [pc, #128]	; (1f094 <at_handler_xmodemsleep+0x98>)
   1f014:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1f018:	4a1f      	ldr	r2, [pc, #124]	; (1f098 <at_handler_xmodemsleep+0x9c>)
   1f01a:	f00b fecd 	bl	2adb8 <assert_print>
   1f01e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1f022:	481d      	ldr	r0, [pc, #116]	; (1f098 <at_handler_xmodemsleep+0x9c>)
   1f024:	f00b fec1 	bl	2adaa <assert_post_action>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1f028:	4620      	mov	r0, r4
   1f02a:	f107 0108 	add.w	r1, r7, #8
   1f02e:	f001 fff9 	bl	21024 <parse_xmodemsleep>
	if (err) {
   1f032:	b198      	cbz	r0, 1f05c <at_handler_xmodemsleep+0x60>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1f034:	466c      	mov	r4, sp
   1f036:	b088      	sub	sp, #32
   1f038:	466a      	mov	r2, sp
   1f03a:	4b18      	ldr	r3, [pc, #96]	; (1f09c <at_handler_xmodemsleep+0xa0>)
   1f03c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f040:	6153      	str	r3, [r2, #20]
   1f042:	4b17      	ldr	r3, [pc, #92]	; (1f0a0 <at_handler_xmodemsleep+0xa4>)
   1f044:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f048:	2304      	movs	r3, #4
   1f04a:	4816      	ldr	r0, [pc, #88]	; (1f0a4 <at_handler_xmodemsleep+0xa8>)
   1f04c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f050:	f010 f9f9 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f054:	46a5      	mov	sp, r4
}
   1f056:	374c      	adds	r7, #76	; 0x4c
   1f058:	46bd      	mov	sp, r7
   1f05a:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1f05c:	7a3b      	ldrb	r3, [r7, #8]
   1f05e:	1e5a      	subs	r2, r3, #1
   1f060:	2a03      	cmp	r2, #3
   1f062:	d901      	bls.n	1f068 <at_handler_xmodemsleep+0x6c>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
   1f064:	2b07      	cmp	r3, #7
   1f066:	d1f6      	bne.n	1f056 <at_handler_xmodemsleep+0x5a>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1f068:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   1f06c:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   1f070:	3b08      	subs	r3, #8
   1f072:	430b      	orrs	r3, r1
   1f074:	d007      	beq.n	1f086 <at_handler_xmodemsleep+0x8a>
	} else if (evt.modem_sleep.time == 0) {
   1f076:	430a      	orrs	r2, r1
   1f078:	d007      	beq.n	1f08a <at_handler_xmodemsleep+0x8e>
   1f07a:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   1f07c:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1f07e:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f080:	f000 fffc 	bl	2007c <event_handler_list_dispatch>
   1f084:	e7e7      	b.n	1f056 <at_handler_xmodemsleep+0x5a>
   1f086:	2308      	movs	r3, #8
   1f088:	e7f8      	b.n	1f07c <at_handler_xmodemsleep+0x80>
   1f08a:	2309      	movs	r3, #9
   1f08c:	e7f6      	b.n	1f07c <at_handler_xmodemsleep+0x80>
   1f08e:	bf00      	nop
   1f090:	00038ff9 	.word	0x00038ff9
   1f094:	00033bc2 	.word	0x00033bc2
   1f098:	00038fcb 	.word	0x00038fcb
   1f09c:	00039045 	.word	0x00039045
   1f0a0:	000398b5 	.word	0x000398b5
   1f0a4:	00031c2c 	.word	0x00031c2c

0001f0a8 <at_handler_ncellmeas>:
{
   1f0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0ac:	4606      	mov	r6, r0
   1f0ae:	b0a4      	sub	sp, #144	; 0x90
   1f0b0:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f0b2:	2248      	movs	r2, #72	; 0x48
   1f0b4:	2100      	movs	r1, #0
   1f0b6:	4638      	mov	r0, r7
   1f0b8:	f011 fbe3 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f0bc:	b95e      	cbnz	r6, 1f0d6 <at_handler_ncellmeas+0x2e>
   1f0be:	4971      	ldr	r1, [pc, #452]	; (1f284 <at_handler_ncellmeas+0x1dc>)
   1f0c0:	4871      	ldr	r0, [pc, #452]	; (1f288 <at_handler_ncellmeas+0x1e0>)
   1f0c2:	f240 138b 	movw	r3, #395	; 0x18b
   1f0c6:	4a71      	ldr	r2, [pc, #452]	; (1f28c <at_handler_ncellmeas+0x1e4>)
   1f0c8:	f00b fe76 	bl	2adb8 <assert_print>
   1f0cc:	f240 118b 	movw	r1, #395	; 0x18b
   1f0d0:	486e      	ldr	r0, [pc, #440]	; (1f28c <at_handler_ncellmeas+0x1e4>)
   1f0d2:	f00b fe6a 	bl	2adaa <assert_post_action>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   1f0d6:	f000 ff9d 	bl	20014 <event_handler_list_is_empty>
   1f0da:	4d6d      	ldr	r5, [pc, #436]	; (1f290 <at_handler_ncellmeas+0x1e8>)
   1f0dc:	4601      	mov	r1, r0
   1f0de:	bb00      	cbnz	r0, 1f122 <at_handler_ncellmeas+0x7a>
   1f0e0:	782b      	ldrb	r3, [r5, #0]
   1f0e2:	b1f3      	cbz	r3, 1f122 <at_handler_ncellmeas+0x7a>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   1f0e4:	4c6b      	ldr	r4, [pc, #428]	; (1f294 <at_handler_ncellmeas+0x1ec>)
   1f0e6:	7823      	ldrb	r3, [r4, #0]
   1f0e8:	2b03      	cmp	r3, #3
   1f0ea:	d971      	bls.n	1f1d0 <at_handler_ncellmeas+0x128>
	struct lte_lc_evt evt = {0};
   1f0ec:	2248      	movs	r2, #72	; 0x48
   1f0ee:	18b8      	adds	r0, r7, r2
   1f0f0:	f011 fbc7 	bl	30882 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   1f0f4:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   1f0f6:	b1d0      	cbz	r0, 1f12e <at_handler_ncellmeas+0x86>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   1f0f8:	2130      	movs	r1, #48	; 0x30
   1f0fa:	f011 fb72 	bl	307e2 <k_calloc>
		if (cells == NULL) {
   1f0fe:	4604      	mov	r4, r0
   1f100:	b9b0      	cbnz	r0, 1f130 <at_handler_ncellmeas+0x88>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   1f102:	466c      	mov	r4, sp
   1f104:	b088      	sub	sp, #32
   1f106:	466a      	mov	r2, sp
   1f108:	4b63      	ldr	r3, [pc, #396]	; (1f298 <at_handler_ncellmeas+0x1f0>)
   1f10a:	6153      	str	r3, [r2, #20]
   1f10c:	4b63      	ldr	r3, [pc, #396]	; (1f29c <at_handler_ncellmeas+0x1f4>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f10e:	6193      	str	r3, [r2, #24]
   1f110:	2303      	movs	r3, #3
   1f112:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f116:	4862      	ldr	r0, [pc, #392]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f118:	f842 3f10 	str.w	r3, [r2, #16]!
   1f11c:	f010 f993 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f120:	46a5      	mov	sp, r4
	ncellmeas_ongoing = false;
   1f122:	2300      	movs	r3, #0
}
   1f124:	3790      	adds	r7, #144	; 0x90
	ncellmeas_ongoing = false;
   1f126:	702b      	strb	r3, [r5, #0]
}
   1f128:	46bd      	mov	sp, r7
   1f12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lte_lc_cell *cells = NULL;
   1f12e:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f130:	4631      	mov	r1, r6
   1f132:	4858      	ldr	r0, [pc, #352]	; (1f294 <at_handler_ncellmeas+0x1ec>)
   1f134:	f107 0250 	add.w	r2, r7, #80	; 0x50
	evt.cells_info.gci_cells = cells;
   1f138:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   1f13c:	f001 fc82 	bl	20a44 <parse_ncellmeas_gci>
	switch (err) {
   1f140:	1dc6      	adds	r6, r0, #7
   1f142:	d013      	beq.n	1f16c <at_handler_ncellmeas+0xc4>
   1f144:	2801      	cmp	r0, #1
   1f146:	d934      	bls.n	1f1b2 <at_handler_ncellmeas+0x10a>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f148:	466e      	mov	r6, sp
   1f14a:	b088      	sub	sp, #32
   1f14c:	466a      	mov	r2, sp
   1f14e:	4b55      	ldr	r3, [pc, #340]	; (1f2a4 <at_handler_ncellmeas+0x1fc>)
   1f150:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f154:	6153      	str	r3, [r2, #20]
   1f156:	4b51      	ldr	r3, [pc, #324]	; (1f29c <at_handler_ncellmeas+0x1f4>)
   1f158:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f15c:	2304      	movs	r3, #4
   1f15e:	4850      	ldr	r0, [pc, #320]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f160:	f842 3f10 	str.w	r3, [r2, #16]!
   1f164:	f010 f96f 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f168:	46b5      	mov	sp, r6
   1f16a:	e029      	b.n	1f1c0 <at_handler_ncellmeas+0x118>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f16c:	46e9      	mov	r9, sp
   1f16e:	b088      	sub	sp, #32
   1f170:	466e      	mov	r6, sp
   1f172:	4b4d      	ldr	r3, [pc, #308]	; (1f2a8 <at_handler_ncellmeas+0x200>)
   1f174:	46b0      	mov	r8, r6
   1f176:	6173      	str	r3, [r6, #20]
   1f178:	2303      	movs	r3, #3
   1f17a:	f8df a120 	ldr.w	sl, [pc, #288]	; 1f29c <at_handler_ncellmeas+0x1f4>
   1f17e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f182:	f8c6 a018 	str.w	sl, [r6, #24]
   1f186:	f848 3f10 	str.w	r3, [r8, #16]!
   1f18a:	4642      	mov	r2, r8
   1f18c:	4844      	ldr	r0, [pc, #272]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f18e:	f010 f95a 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f192:	46cd      	mov	sp, r9
		LOG_WRN("More cells than the configured max count of %d were found",
   1f194:	46b5      	mov	sp, r6
   1f196:	4b45      	ldr	r3, [pc, #276]	; (1f2ac <at_handler_ncellmeas+0x204>)
   1f198:	4642      	mov	r2, r8
   1f19a:	e9c6 3a05 	strd	r3, sl, [r6, #20]
   1f19e:	230a      	movs	r3, #10
   1f1a0:	61f3      	str	r3, [r6, #28]
   1f1a2:	2304      	movs	r3, #4
   1f1a4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1f1a8:	483d      	ldr	r0, [pc, #244]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f1aa:	6133      	str	r3, [r6, #16]
   1f1ac:	f010 f94b 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f1b0:	46cd      	mov	sp, r9
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1b2:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f1b4:	f107 0048 	add.w	r0, r7, #72	; 0x48
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f1b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1f1bc:	f000 ff5e 	bl	2007c <event_handler_list_dispatch>
	k_free(cells);
   1f1c0:	4620      	mov	r0, r4
   1f1c2:	f011 fb03 	bl	307cc <k_free>
	k_free(evt.cells_info.neighbor_cells);
   1f1c6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
		k_free(neighbor_cells);
   1f1ca:	f011 faff 	bl	307cc <k_free>
   1f1ce:	e7a8      	b.n	1f122 <at_handler_ncellmeas+0x7a>
	int ncell_count = neighborcell_count_get(response);
   1f1d0:	4630      	mov	r0, r6
   1f1d2:	f001 fa69 	bl	206a8 <neighborcell_count_get>
   1f1d6:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   1f1d8:	b158      	cbz	r0, 1f1f2 <at_handler_ncellmeas+0x14a>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1f1da:	2110      	movs	r1, #16
   1f1dc:	f011 fb01 	bl	307e2 <k_calloc>
		if (neighbor_cells == NULL) {
   1f1e0:	4604      	mov	r4, r0
   1f1e2:	b930      	cbnz	r0, 1f1f2 <at_handler_ncellmeas+0x14a>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1f1e4:	466c      	mov	r4, sp
   1f1e6:	b088      	sub	sp, #32
   1f1e8:	466a      	mov	r2, sp
   1f1ea:	4b31      	ldr	r3, [pc, #196]	; (1f2b0 <at_handler_ncellmeas+0x208>)
   1f1ec:	6153      	str	r3, [r2, #20]
   1f1ee:	4b31      	ldr	r3, [pc, #196]	; (1f2b4 <at_handler_ncellmeas+0x20c>)
   1f1f0:	e78d      	b.n	1f10e <at_handler_ncellmeas+0x66>
	err = parse_ncellmeas(response, &evt.cells_info);
   1f1f2:	f107 0108 	add.w	r1, r7, #8
   1f1f6:	4630      	mov	r0, r6
	evt.cells_info.neighbor_cells = neighbor_cells;
   1f1f8:	63fc      	str	r4, [r7, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   1f1fa:	f001 fa83 	bl	20704 <parse_ncellmeas>
	switch (err) {
   1f1fe:	1dc1      	adds	r1, r0, #7
   1f200:	d013      	beq.n	1f22a <at_handler_ncellmeas+0x182>
   1f202:	2801      	cmp	r0, #1
   1f204:	d934      	bls.n	1f270 <at_handler_ncellmeas+0x1c8>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1f206:	466e      	mov	r6, sp
   1f208:	b088      	sub	sp, #32
   1f20a:	466a      	mov	r2, sp
   1f20c:	4b25      	ldr	r3, [pc, #148]	; (1f2a4 <at_handler_ncellmeas+0x1fc>)
   1f20e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f212:	6153      	str	r3, [r2, #20]
   1f214:	4b27      	ldr	r3, [pc, #156]	; (1f2b4 <at_handler_ncellmeas+0x20c>)
   1f216:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f21a:	2304      	movs	r3, #4
   1f21c:	4820      	ldr	r0, [pc, #128]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f21e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f222:	f010 f910 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f226:	46b5      	mov	sp, r6
   1f228:	e027      	b.n	1f27a <at_handler_ncellmeas+0x1d2>
		LOG_WRN("Not all neighbor cells could be parsed");
   1f22a:	46e9      	mov	r9, sp
   1f22c:	b088      	sub	sp, #32
   1f22e:	466e      	mov	r6, sp
   1f230:	4b1d      	ldr	r3, [pc, #116]	; (1f2a8 <at_handler_ncellmeas+0x200>)
   1f232:	46b0      	mov	r8, r6
   1f234:	6173      	str	r3, [r6, #20]
   1f236:	2303      	movs	r3, #3
   1f238:	f8df a078 	ldr.w	sl, [pc, #120]	; 1f2b4 <at_handler_ncellmeas+0x20c>
   1f23c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1f240:	f8c6 a018 	str.w	sl, [r6, #24]
   1f244:	f848 3f10 	str.w	r3, [r8, #16]!
   1f248:	4642      	mov	r2, r8
   1f24a:	4815      	ldr	r0, [pc, #84]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f24c:	f010 f8fb 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f250:	46cd      	mov	sp, r9
		LOG_WRN("More cells than the configured max count of %d were found",
   1f252:	46b5      	mov	sp, r6
   1f254:	4b15      	ldr	r3, [pc, #84]	; (1f2ac <at_handler_ncellmeas+0x204>)
   1f256:	4642      	mov	r2, r8
   1f258:	e9c6 3a05 	strd	r3, sl, [r6, #20]
   1f25c:	230a      	movs	r3, #10
   1f25e:	61f3      	str	r3, [r6, #28]
   1f260:	2304      	movs	r3, #4
   1f262:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1f266:	480e      	ldr	r0, [pc, #56]	; (1f2a0 <at_handler_ncellmeas+0x1f8>)
   1f268:	6133      	str	r3, [r6, #16]
   1f26a:	f010 f8ec 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f26e:	46cd      	mov	sp, r9
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f270:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1f272:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1f274:	703b      	strb	r3, [r7, #0]
		event_handler_list_dispatch(&evt);
   1f276:	f000 ff01 	bl	2007c <event_handler_list_dispatch>
	if (neighbor_cells) {
   1f27a:	2c00      	cmp	r4, #0
   1f27c:	f43f af51 	beq.w	1f122 <at_handler_ncellmeas+0x7a>
		k_free(neighbor_cells);
   1f280:	4620      	mov	r0, r4
   1f282:	e7a2      	b.n	1f1ca <at_handler_ncellmeas+0x122>
   1f284:	00038ff9 	.word	0x00038ff9
   1f288:	00033bc2 	.word	0x00033bc2
   1f28c:	00038fcb 	.word	0x00038fcb
   1f290:	20010470 	.word	0x20010470
   1f294:	20010471 	.word	0x20010471
   1f298:	00039085 	.word	0x00039085
   1f29c:	000398cc 	.word	0x000398cc
   1f2a0:	00031c2c 	.word	0x00031c2c
   1f2a4:	0003911e 	.word	0x0003911e
   1f2a8:	000390b5 	.word	0x000390b5
   1f2ac:	000390e0 	.word	0x000390e0
   1f2b0:	0003914c 	.word	0x0003914c
   1f2b4:	000398e5 	.word	0x000398e5

0001f2b8 <at_handler_xt3412>:
{
   1f2b8:	b590      	push	{r4, r7, lr}
   1f2ba:	4604      	mov	r4, r0
   1f2bc:	b093      	sub	sp, #76	; 0x4c
   1f2be:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f2c0:	2248      	movs	r2, #72	; 0x48
   1f2c2:	2100      	movs	r1, #0
   1f2c4:	4638      	mov	r0, r7
   1f2c6:	f011 fadc 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f2ca:	b95c      	cbnz	r4, 1f2e4 <at_handler_xt3412+0x2c>
   1f2cc:	4919      	ldr	r1, [pc, #100]	; (1f334 <at_handler_xt3412+0x7c>)
   1f2ce:	481a      	ldr	r0, [pc, #104]	; (1f338 <at_handler_xt3412+0x80>)
   1f2d0:	f240 1341 	movw	r3, #321	; 0x141
   1f2d4:	4a19      	ldr	r2, [pc, #100]	; (1f33c <at_handler_xt3412+0x84>)
   1f2d6:	f00b fd6f 	bl	2adb8 <assert_print>
   1f2da:	f240 1141 	movw	r1, #321	; 0x141
   1f2de:	4817      	ldr	r0, [pc, #92]	; (1f33c <at_handler_xt3412+0x84>)
   1f2e0:	f00b fd63 	bl	2adaa <assert_post_action>
	err = parse_xt3412(response, &evt.time);
   1f2e4:	4620      	mov	r0, r4
   1f2e6:	f107 0108 	add.w	r1, r7, #8
   1f2ea:	f001 f961 	bl	205b0 <parse_xt3412>
	if (err) {
   1f2ee:	b198      	cbz	r0, 1f318 <at_handler_xt3412+0x60>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1f2f0:	466c      	mov	r4, sp
   1f2f2:	b088      	sub	sp, #32
   1f2f4:	466a      	mov	r2, sp
   1f2f6:	4b12      	ldr	r3, [pc, #72]	; (1f340 <at_handler_xt3412+0x88>)
   1f2f8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f2fc:	6153      	str	r3, [r2, #20]
   1f2fe:	4b11      	ldr	r3, [pc, #68]	; (1f344 <at_handler_xt3412+0x8c>)
   1f300:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f304:	2304      	movs	r3, #4
   1f306:	4810      	ldr	r0, [pc, #64]	; (1f348 <at_handler_xt3412+0x90>)
   1f308:	f842 3f10 	str.w	r3, [r2, #16]!
   1f30c:	f010 f89b 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f310:	46a5      	mov	sp, r4
}
   1f312:	374c      	adds	r7, #76	; 0x4c
   1f314:	46bd      	mov	sp, r7
   1f316:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1f318:	68bb      	ldr	r3, [r7, #8]
   1f31a:	68fa      	ldr	r2, [r7, #12]
   1f31c:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1f320:	3b08      	subs	r3, #8
   1f322:	4313      	orrs	r3, r2
   1f324:	d1f5      	bne.n	1f312 <at_handler_xt3412+0x5a>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f326:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1f328:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1f32a:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f32c:	f000 fea6 	bl	2007c <event_handler_list_dispatch>
   1f330:	e7ef      	b.n	1f312 <at_handler_xt3412+0x5a>
   1f332:	bf00      	nop
   1f334:	00038ff9 	.word	0x00038ff9
   1f338:	00033bc2 	.word	0x00033bc2
   1f33c:	00038fcb 	.word	0x00038fcb
   1f340:	0003917d 	.word	0x0003917d
   1f344:	000398fa 	.word	0x000398fa
   1f348:	00031c2c 	.word	0x00031c2c

0001f34c <at_handler_cedrxp>:
{
   1f34c:	b590      	push	{r4, r7, lr}
   1f34e:	4604      	mov	r4, r0
   1f350:	b093      	sub	sp, #76	; 0x4c
   1f352:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f354:	2248      	movs	r2, #72	; 0x48
   1f356:	2100      	movs	r1, #0
   1f358:	4638      	mov	r0, r7
   1f35a:	f011 fa92 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f35e:	b95c      	cbnz	r4, 1f378 <at_handler_cedrxp+0x2c>
   1f360:	4915      	ldr	r1, [pc, #84]	; (1f3b8 <at_handler_cedrxp+0x6c>)
   1f362:	4816      	ldr	r0, [pc, #88]	; (1f3bc <at_handler_cedrxp+0x70>)
   1f364:	f240 132d 	movw	r3, #301	; 0x12d
   1f368:	4a15      	ldr	r2, [pc, #84]	; (1f3c0 <at_handler_cedrxp+0x74>)
   1f36a:	f00b fd25 	bl	2adb8 <assert_print>
   1f36e:	f240 112d 	movw	r1, #301	; 0x12d
   1f372:	4813      	ldr	r0, [pc, #76]	; (1f3c0 <at_handler_cedrxp+0x74>)
   1f374:	f00b fd19 	bl	2adaa <assert_post_action>
	err = parse_edrx(response, &evt.edrx_cfg);
   1f378:	4620      	mov	r0, r4
   1f37a:	f107 0108 	add.w	r1, r7, #8
   1f37e:	f7ea f8db 	bl	9538 <parse_edrx>
	if (err) {
   1f382:	b198      	cbz	r0, 1f3ac <at_handler_cedrxp+0x60>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1f384:	466c      	mov	r4, sp
   1f386:	b088      	sub	sp, #32
   1f388:	466a      	mov	r2, sp
   1f38a:	4b0e      	ldr	r3, [pc, #56]	; (1f3c4 <at_handler_cedrxp+0x78>)
   1f38c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f390:	6153      	str	r3, [r2, #20]
   1f392:	4b0d      	ldr	r3, [pc, #52]	; (1f3c8 <at_handler_cedrxp+0x7c>)
   1f394:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f398:	2304      	movs	r3, #4
   1f39a:	480c      	ldr	r0, [pc, #48]	; (1f3cc <at_handler_cedrxp+0x80>)
   1f39c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3a0:	f010 f851 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f3a4:	46a5      	mov	sp, r4
}
   1f3a6:	374c      	adds	r7, #76	; 0x4c
   1f3a8:	46bd      	mov	sp, r7
   1f3aa:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f3ac:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1f3ae:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1f3b0:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f3b2:	f000 fe63 	bl	2007c <event_handler_list_dispatch>
   1f3b6:	e7f6      	b.n	1f3a6 <at_handler_cedrxp+0x5a>
   1f3b8:	00038ff9 	.word	0x00038ff9
   1f3bc:	00033bc2 	.word	0x00033bc2
   1f3c0:	00038fcb 	.word	0x00038fcb
   1f3c4:	000391b5 	.word	0x000391b5
   1f3c8:	0003990c 	.word	0x0003990c
   1f3cc:	00031c2c 	.word	0x00031c2c

0001f3d0 <at_handler_cscon>:
{
   1f3d0:	b590      	push	{r4, r7, lr}
   1f3d2:	4604      	mov	r4, r0
   1f3d4:	b093      	sub	sp, #76	; 0x4c
   1f3d6:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   1f3d8:	2248      	movs	r2, #72	; 0x48
   1f3da:	2100      	movs	r1, #0
   1f3dc:	4638      	mov	r0, r7
   1f3de:	f011 fa50 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f3e2:	b95c      	cbnz	r4, 1f3fc <at_handler_cscon+0x2c>
   1f3e4:	4916      	ldr	r1, [pc, #88]	; (1f440 <at_handler_cscon+0x70>)
   1f3e6:	4817      	ldr	r0, [pc, #92]	; (1f444 <at_handler_cscon+0x74>)
   1f3e8:	f240 1313 	movw	r3, #275	; 0x113
   1f3ec:	4a16      	ldr	r2, [pc, #88]	; (1f448 <at_handler_cscon+0x78>)
   1f3ee:	f00b fce3 	bl	2adb8 <assert_print>
   1f3f2:	f240 1113 	movw	r1, #275	; 0x113
   1f3f6:	4814      	ldr	r0, [pc, #80]	; (1f448 <at_handler_cscon+0x78>)
   1f3f8:	f00b fcd7 	bl	2adaa <assert_post_action>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1f3fc:	2201      	movs	r2, #1
   1f3fe:	4620      	mov	r0, r4
   1f400:	f107 0108 	add.w	r1, r7, #8
   1f404:	f000 ff2e 	bl	20264 <parse_rrc_mode>
	if (err) {
   1f408:	b198      	cbz	r0, 1f432 <at_handler_cscon+0x62>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1f40a:	466c      	mov	r4, sp
   1f40c:	b088      	sub	sp, #32
   1f40e:	466a      	mov	r2, sp
   1f410:	4b0e      	ldr	r3, [pc, #56]	; (1f44c <at_handler_cscon+0x7c>)
   1f412:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f416:	6153      	str	r3, [r2, #20]
   1f418:	4b0d      	ldr	r3, [pc, #52]	; (1f450 <at_handler_cscon+0x80>)
   1f41a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f41e:	2304      	movs	r3, #4
   1f420:	480c      	ldr	r0, [pc, #48]	; (1f454 <at_handler_cscon+0x84>)
   1f422:	f842 3f10 	str.w	r3, [r2, #16]!
   1f426:	f010 f80e 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f42a:	46a5      	mov	sp, r4
}
   1f42c:	374c      	adds	r7, #76	; 0x4c
   1f42e:	46bd      	mov	sp, r7
   1f430:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f432:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1f434:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1f436:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   1f438:	f000 fe20 	bl	2007c <event_handler_list_dispatch>
   1f43c:	e7f6      	b.n	1f42c <at_handler_cscon+0x5c>
   1f43e:	bf00      	nop
   1f440:	00038ff9 	.word	0x00038ff9
   1f444:	00033bc2 	.word	0x00033bc2
   1f448:	00038fcb 	.word	0x00038fcb
   1f44c:	000391d5 	.word	0x000391d5
   1f450:	0003991e 	.word	0x0003991e
   1f454:	00031c2c 	.word	0x00031c2c

0001f458 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   1f458:	b598      	push	{r3, r4, r7, lr}
   1f45a:	af00      	add	r7, sp, #0
	int err;

	if (enable) {
   1f45c:	2800      	cmp	r0, #0
   1f45e:	d033      	beq.n	1f4c8 <lte_lc_psm_req+0x70>
		if (strlen(psm_param_rptau) == 8 &&
   1f460:	481a      	ldr	r0, [pc, #104]	; (1f4cc <lte_lc_psm_req+0x74>)
   1f462:	f7e9 fede 	bl	9222 <strlen>
   1f466:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
   1f468:	4819      	ldr	r0, [pc, #100]	; (1f4d0 <lte_lc_psm_req+0x78>)
   1f46a:	f7e9 feda 	bl	9222 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   1f46e:	2c08      	cmp	r4, #8
   1f470:	d121      	bne.n	1f4b6 <lte_lc_psm_req+0x5e>
   1f472:	2808      	cmp	r0, #8
   1f474:	d11a      	bne.n	1f4ac <lte_lc_psm_req+0x54>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   1f476:	4a16      	ldr	r2, [pc, #88]	; (1f4d0 <lte_lc_psm_req+0x78>)
   1f478:	4914      	ldr	r1, [pc, #80]	; (1f4cc <lte_lc_psm_req+0x74>)
   1f47a:	4816      	ldr	r0, [pc, #88]	; (1f4d4 <lte_lc_psm_req+0x7c>)
   1f47c:	f003 fbe2 	bl	22c44 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   1f480:	b190      	cbz	r0, 1f4a8 <lte_lc_psm_req+0x50>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   1f482:	466c      	mov	r4, sp
   1f484:	b088      	sub	sp, #32
   1f486:	466a      	mov	r2, sp
   1f488:	4b13      	ldr	r3, [pc, #76]	; (1f4d8 <lte_lc_psm_req+0x80>)
   1f48a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f48e:	6153      	str	r3, [r2, #20]
   1f490:	4b12      	ldr	r3, [pc, #72]	; (1f4dc <lte_lc_psm_req+0x84>)
   1f492:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f496:	2304      	movs	r3, #4
   1f498:	4811      	ldr	r0, [pc, #68]	; (1f4e0 <lte_lc_psm_req+0x88>)
   1f49a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f49e:	f00f ffd2 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1f4a2:	f06f 000d 	mvn.w	r0, #13
   1f4a6:	46a5      	mov	sp, r4
	}

	return 0;
}
   1f4a8:	46bd      	mov	sp, r7
   1f4aa:	bd98      	pop	{r3, r4, r7, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   1f4ac:	4907      	ldr	r1, [pc, #28]	; (1f4cc <lte_lc_psm_req+0x74>)
   1f4ae:	480d      	ldr	r0, [pc, #52]	; (1f4e4 <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1f4b0:	f003 fbc8 	bl	22c44 <nrf_modem_at_printf>
   1f4b4:	e7e4      	b.n	1f480 <lte_lc_psm_req+0x28>
		} else if (strlen(psm_param_rat) == 8) {
   1f4b6:	2808      	cmp	r0, #8
   1f4b8:	d102      	bne.n	1f4c0 <lte_lc_psm_req+0x68>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   1f4ba:	4905      	ldr	r1, [pc, #20]	; (1f4d0 <lte_lc_psm_req+0x78>)
   1f4bc:	480a      	ldr	r0, [pc, #40]	; (1f4e8 <lte_lc_psm_req+0x90>)
   1f4be:	e7f7      	b.n	1f4b0 <lte_lc_psm_req+0x58>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   1f4c0:	480a      	ldr	r0, [pc, #40]	; (1f4ec <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   1f4c2:	f003 fbbf 	bl	22c44 <nrf_modem_at_printf>
   1f4c6:	e7db      	b.n	1f480 <lte_lc_psm_req+0x28>
   1f4c8:	4809      	ldr	r0, [pc, #36]	; (1f4f0 <lte_lc_psm_req+0x98>)
   1f4ca:	e7fa      	b.n	1f4c2 <lte_lc_psm_req+0x6a>
   1f4cc:	2000cc7e 	.word	0x2000cc7e
   1f4d0:	2000cc87 	.word	0x2000cc87
   1f4d4:	00039200 	.word	0x00039200
   1f4d8:	00039247 	.word	0x00039247
   1f4dc:	0003984f 	.word	0x0003984f
   1f4e0:	00031c2c 	.word	0x00031c2c
   1f4e4:	00039217 	.word	0x00039217
   1f4e8:	00039229 	.word	0x00039229
   1f4ec:	0003923c 	.word	0x0003923c
   1f4f0:	000399c4 	.word	0x000399c4

0001f4f4 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1f4f4:	2300      	movs	r3, #0
{
   1f4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4fa:	b08c      	sub	sp, #48	; 0x30
   1f4fc:	af00      	add	r7, sp, #0
   1f4fe:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1f500:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1f502:	e9c7 3303 	strd	r3, r3, [r7, #12]
	char tau_ext_str[9] = {0};
   1f506:	e9c7 3306 	strd	r3, r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   1f50a:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	char active_time_str[9] = {0};
   1f50e:	753b      	strb	r3, [r7, #20]
	char tau_ext_str[9] = {0};
   1f510:	f887 3020 	strb.w	r3, [r7, #32]
	char tau_legacy_str[9] = {0};
   1f514:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   1f518:	2800      	cmp	r0, #0
   1f51a:	f000 808a 	beq.w	1f632 <lte_lc_psm_get+0x13e>
   1f51e:	2900      	cmp	r1, #0
   1f520:	f000 8087 	beq.w	1f632 <lte_lc_psm_get+0x13e>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1f524:	4c44      	ldr	r4, [pc, #272]	; (1f638 <lte_lc_psm_get+0x144>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f526:	21a0      	movs	r1, #160	; 0xa0
   1f528:	4620      	mov	r0, r4
   1f52a:	4a44      	ldr	r2, [pc, #272]	; (1f63c <lte_lc_psm_get+0x148>)
	response[0] = '\0';
   1f52c:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1f52e:	f003 fbd5 	bl	22cdc <nrf_modem_at_cmd>
	if (err) {
   1f532:	b1b8      	cbz	r0, 1f564 <lte_lc_psm_get+0x70>
		LOG_ERR("AT command failed, error: %d", err);
   1f534:	466c      	mov	r4, sp
   1f536:	b088      	sub	sp, #32
   1f538:	466a      	mov	r2, sp
   1f53a:	4b41      	ldr	r3, [pc, #260]	; (1f640 <lte_lc_psm_get+0x14c>)
   1f53c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f540:	6153      	str	r3, [r2, #20]
   1f542:	4b40      	ldr	r3, [pc, #256]	; (1f644 <lte_lc_psm_get+0x150>)
   1f544:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f548:	2304      	movs	r3, #4
   1f54a:	483f      	ldr	r0, [pc, #252]	; (1f648 <lte_lc_psm_get+0x154>)
   1f54c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f550:	f00f ff79 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f554:	46a5      	mov	sp, r4
		return -EFAULT;
   1f556:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   1f55a:	4620      	mov	r0, r4
   1f55c:	3730      	adds	r7, #48	; 0x30
   1f55e:	46bd      	mov	sp, r7
   1f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   1f564:	4620      	mov	r0, r4
   1f566:	212c      	movs	r1, #44	; 0x2c
   1f568:	f011 faea 	bl	30b40 <strchr>
	if (!comma_ptr) {
   1f56c:	4604      	mov	r4, r0
   1f56e:	2800      	cmp	r0, #0
   1f570:	d050      	beq.n	1f614 <lte_lc_psm_get+0x120>
   1f572:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f576:	1c60      	adds	r0, r4, #1
   1f578:	212c      	movs	r1, #44	; 0x2c
   1f57a:	f011 fae1 	bl	30b40 <strchr>
	for (int i = 0; i < 12; i++) {
   1f57e:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1f582:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1f584:	d134      	bne.n	1f5f0 <lte_lc_psm_get+0xfc>
	if (comma_ptr) {
   1f586:	b3a8      	cbz	r0, 1f5f4 <lte_lc_psm_get+0x100>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1f588:	1c81      	adds	r1, r0, #2
   1f58a:	2208      	movs	r2, #8
   1f58c:	f107 000c 	add.w	r0, r7, #12
   1f590:	f011 fafd 	bl	30b8e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f594:	1c60      	adds	r0, r4, #1
   1f596:	212c      	movs	r1, #44	; 0x2c
   1f598:	f011 fad2 	bl	30b40 <strchr>
	if (comma_ptr) {
   1f59c:	4604      	mov	r4, r0
   1f59e:	b348      	cbz	r0, 1f5f4 <lte_lc_psm_get+0x100>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1f5a0:	1c81      	adds	r1, r0, #2
   1f5a2:	2208      	movs	r2, #8
   1f5a4:	f107 0018 	add.w	r0, r7, #24
   1f5a8:	f011 faf1 	bl	30b8e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1f5ac:	212c      	movs	r1, #44	; 0x2c
   1f5ae:	1c60      	adds	r0, r4, #1
   1f5b0:	f011 fac6 	bl	30b40 <strchr>
	if (comma_ptr) {
   1f5b4:	bb88      	cbnz	r0, 1f61a <lte_lc_psm_get+0x126>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1f5b6:	1d3b      	adds	r3, r7, #4
   1f5b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1f5bc:	f107 0118 	add.w	r1, r7, #24
   1f5c0:	f107 000c 	add.w	r0, r7, #12
   1f5c4:	f000 fdac 	bl	20120 <parse_psm>
	if (err) {
   1f5c8:	4604      	mov	r4, r0
   1f5ca:	b368      	cbz	r0, 1f628 <lte_lc_psm_get+0x134>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1f5cc:	466d      	mov	r5, sp
   1f5ce:	b088      	sub	sp, #32
   1f5d0:	466a      	mov	r2, sp
   1f5d2:	4b1e      	ldr	r3, [pc, #120]	; (1f64c <lte_lc_psm_get+0x158>)
   1f5d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f5d8:	6153      	str	r3, [r2, #20]
   1f5da:	4b1a      	ldr	r3, [pc, #104]	; (1f644 <lte_lc_psm_get+0x150>)
   1f5dc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f5e0:	2304      	movs	r3, #4
   1f5e2:	4819      	ldr	r0, [pc, #100]	; (1f648 <lte_lc_psm_get+0x154>)
   1f5e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5e8:	f00f ff2d 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f5ec:	46ad      	mov	sp, r5
		return err;
   1f5ee:	e7b4      	b.n	1f55a <lte_lc_psm_get+0x66>
		if (comma_ptr) {
   1f5f0:	2c00      	cmp	r4, #0
   1f5f2:	d1c0      	bne.n	1f576 <lte_lc_psm_get+0x82>
		LOG_ERR("AT command parsing failed");
   1f5f4:	466c      	mov	r4, sp
   1f5f6:	b088      	sub	sp, #32
   1f5f8:	466a      	mov	r2, sp
   1f5fa:	4b15      	ldr	r3, [pc, #84]	; (1f650 <lte_lc_psm_get+0x15c>)
   1f5fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f600:	6153      	str	r3, [r2, #20]
   1f602:	4b10      	ldr	r3, [pc, #64]	; (1f644 <lte_lc_psm_get+0x150>)
   1f604:	4810      	ldr	r0, [pc, #64]	; (1f648 <lte_lc_psm_get+0x154>)
   1f606:	6193      	str	r3, [r2, #24]
   1f608:	2303      	movs	r3, #3
   1f60a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f60e:	f00f ff1a 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f612:	46a5      	mov	sp, r4
		return -EBADMSG;
   1f614:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   1f618:	e79f      	b.n	1f55a <lte_lc_psm_get+0x66>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1f61a:	1c81      	adds	r1, r0, #2
   1f61c:	2208      	movs	r2, #8
   1f61e:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1f622:	f011 fab4 	bl	30b8e <strncpy>
   1f626:	e7c6      	b.n	1f5b6 <lte_lc_psm_get+0xc2>
	*tau = psm_cfg.tau;
   1f628:	687b      	ldr	r3, [r7, #4]
   1f62a:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1f62c:	68bb      	ldr	r3, [r7, #8]
   1f62e:	602b      	str	r3, [r5, #0]
	return 0;
   1f630:	e793      	b.n	1f55a <lte_lc_psm_get+0x66>
		return -EINVAL;
   1f632:	f06f 0415 	mvn.w	r4, #21
   1f636:	e790      	b.n	1f55a <lte_lc_psm_get+0x66>
   1f638:	200103cb 	.word	0x200103cb
   1f63c:	0003927a 	.word	0x0003927a
   1f640:	00039287 	.word	0x00039287
   1f644:	00039840 	.word	0x00039840
   1f648:	00031c2c 	.word	0x00031c2c
   1f64c:	000392c6 	.word	0x000392c6
   1f650:	000392a8 	.word	0x000392a8

0001f654 <at_handler_cereg>:
{
   1f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f658:	4604      	mov	r4, r0
   1f65a:	b0a4      	sub	sp, #144	; 0x90
   1f65c:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   1f65e:	2248      	movs	r2, #72	; 0x48
   1f660:	2100      	movs	r1, #0
   1f662:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1f666:	f011 f90c 	bl	30882 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1f66a:	b94c      	cbnz	r4, 1f680 <at_handler_cereg+0x2c>
   1f66c:	4964      	ldr	r1, [pc, #400]	; (1f800 <at_handler_cereg+0x1ac>)
   1f66e:	4865      	ldr	r0, [pc, #404]	; (1f804 <at_handler_cereg+0x1b0>)
   1f670:	2397      	movs	r3, #151	; 0x97
   1f672:	4a65      	ldr	r2, [pc, #404]	; (1f808 <at_handler_cereg+0x1b4>)
   1f674:	f00b fba0 	bl	2adb8 <assert_print>
   1f678:	2197      	movs	r1, #151	; 0x97
   1f67a:	4863      	ldr	r0, [pc, #396]	; (1f808 <at_handler_cereg+0x1b4>)
   1f67c:	f00b fb95 	bl	2adaa <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   1f680:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   1f682:	2230      	movs	r2, #48	; 0x30
   1f684:	4629      	mov	r1, r5
   1f686:	f107 0010 	add.w	r0, r7, #16
	enum lte_lc_nw_reg_status reg_status = 0;
   1f68a:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f68c:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   1f690:	f011 f8f7 	bl	30882 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f694:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   1f696:	60bd      	str	r5, [r7, #8]
   1f698:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1f69c:	2101      	movs	r1, #1
   1f69e:	9300      	str	r3, [sp, #0]
   1f6a0:	4620      	mov	r0, r4
   1f6a2:	f107 0310 	add.w	r3, r7, #16
   1f6a6:	1dba      	adds	r2, r7, #6
   1f6a8:	f000 fe56 	bl	20358 <parse_cereg>
	if (err) {
   1f6ac:	b1c0      	cbz	r0, 1f6e0 <at_handler_cereg+0x8c>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1f6ae:	466d      	mov	r5, sp
   1f6b0:	b08a      	sub	sp, #40	; 0x28
   1f6b2:	aa02      	add	r2, sp, #8
   1f6b4:	4b55      	ldr	r3, [pc, #340]	; (1f80c <at_handler_cereg+0x1b8>)
   1f6b6:	6214      	str	r4, [r2, #32]
   1f6b8:	6153      	str	r3, [r2, #20]
   1f6ba:	4b55      	ldr	r3, [pc, #340]	; (1f810 <at_handler_cereg+0x1bc>)
   1f6bc:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1f6c0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f6c4:	f240 4302 	movw	r3, #1026	; 0x402
   1f6c8:	8493      	strh	r3, [r2, #36]	; 0x24
   1f6ca:	4b52      	ldr	r3, [pc, #328]	; (1f814 <at_handler_cereg+0x1c0>)
   1f6cc:	4852      	ldr	r0, [pc, #328]	; (1f818 <at_handler_cereg+0x1c4>)
   1f6ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1f6d2:	f00f feb8 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f6d6:	46ad      	mov	sp, r5
}
   1f6d8:	3788      	adds	r7, #136	; 0x88
   1f6da:	46bd      	mov	sp, r7
   1f6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1f6e0:	79bb      	ldrb	r3, [r7, #6]
   1f6e2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f6e6:	2b01      	cmp	r3, #1
   1f6e8:	d104      	bne.n	1f6f4 <at_handler_cereg+0xa0>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1f6ea:	69bb      	ldr	r3, [r7, #24]
   1f6ec:	3301      	adds	r3, #1
   1f6ee:	d167      	bne.n	1f7c0 <at_handler_cereg+0x16c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1f6f0:	2304      	movs	r3, #4
   1f6f2:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   1f6f4:	f000 fc8e 	bl	20014 <event_handler_list_is_empty>
   1f6f8:	2800      	cmp	r0, #0
   1f6fa:	d1ed      	bne.n	1f6d8 <at_handler_cereg+0x84>
	if (reg_status != prev_reg_status) {
   1f6fc:	4a47      	ldr	r2, [pc, #284]	; (1f81c <at_handler_cereg+0x1c8>)
   1f6fe:	79bb      	ldrb	r3, [r7, #6]
   1f700:	7811      	ldrb	r1, [r2, #0]
   1f702:	4299      	cmp	r1, r3
   1f704:	d008      	beq.n	1f718 <at_handler_cereg+0xc4>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1f706:	f887 0040 	strb.w	r0, [r7, #64]	; 0x40
		event_handler_list_dispatch(&evt);
   1f70a:	f107 0040 	add.w	r0, r7, #64	; 0x40
		prev_reg_status = reg_status;
   1f70e:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1f710:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1f714:	f000 fcb2 	bl	2007c <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   1f718:	4b41      	ldr	r3, [pc, #260]	; (1f820 <at_handler_cereg+0x1cc>)
   1f71a:	69b9      	ldr	r1, [r7, #24]
   1f71c:	689a      	ldr	r2, [r3, #8]
   1f71e:	4291      	cmp	r1, r2
   1f720:	d103      	bne.n	1f72a <at_handler_cereg+0xd6>
   1f722:	68db      	ldr	r3, [r3, #12]
   1f724:	69fa      	ldr	r2, [r7, #28]
   1f726:	429a      	cmp	r2, r3
   1f728:	d01d      	beq.n	1f766 <at_handler_cereg+0x112>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f72a:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f72c:	4d3c      	ldr	r5, [pc, #240]	; (1f820 <at_handler_cereg+0x1cc>)
   1f72e:	f107 0410 	add.w	r4, r7, #16
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1f732:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1f736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f73c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f73e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f742:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1f746:	f107 0648 	add.w	r6, r7, #72	; 0x48
   1f74a:	f107 0510 	add.w	r5, r7, #16
   1f74e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f750:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f754:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f756:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f75a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1f75e:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1f762:	f000 fc8b 	bl	2007c <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1f766:	4a2f      	ldr	r2, [pc, #188]	; (1f824 <at_handler_cereg+0x1d0>)
   1f768:	79fb      	ldrb	r3, [r7, #7]
   1f76a:	7811      	ldrb	r1, [r2, #0]
   1f76c:	4299      	cmp	r1, r3
   1f76e:	d009      	beq.n	1f784 <at_handler_cereg+0x130>
		prev_lte_mode = lte_mode;
   1f770:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f772:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1f774:	f107 0040 	add.w	r0, r7, #64	; 0x40
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1f778:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
		evt.lte_mode = lte_mode;
   1f77c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1f780:	f000 fc7c 	bl	2007c <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1f784:	79bb      	ldrb	r3, [r7, #6]
   1f786:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1f78a:	2b01      	cmp	r3, #1
   1f78c:	d1a4      	bne.n	1f6d8 <at_handler_cereg+0x84>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1f78e:	4640      	mov	r0, r8
   1f790:	f107 010c 	add.w	r1, r7, #12
   1f794:	f7ff feae 	bl	1f4f4 <lte_lc_psm_get>
	if (err) {
   1f798:	b1b0      	cbz	r0, 1f7c8 <at_handler_cereg+0x174>
		if (err != -EBADMSG) {
   1f79a:	304d      	adds	r0, #77	; 0x4d
   1f79c:	d09c      	beq.n	1f6d8 <at_handler_cereg+0x84>
			LOG_ERR("Failed to get PSM information");
   1f79e:	466c      	mov	r4, sp
   1f7a0:	b088      	sub	sp, #32
   1f7a2:	aa02      	add	r2, sp, #8
   1f7a4:	4b20      	ldr	r3, [pc, #128]	; (1f828 <at_handler_cereg+0x1d4>)
   1f7a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f7aa:	6153      	str	r3, [r2, #20]
   1f7ac:	4b18      	ldr	r3, [pc, #96]	; (1f810 <at_handler_cereg+0x1bc>)
   1f7ae:	481a      	ldr	r0, [pc, #104]	; (1f818 <at_handler_cereg+0x1c4>)
   1f7b0:	6193      	str	r3, [r2, #24]
   1f7b2:	2303      	movs	r3, #3
   1f7b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1f7b8:	f00f fe45 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f7bc:	46a5      	mov	sp, r4
   1f7be:	e78b      	b.n	1f6d8 <at_handler_cereg+0x84>
	z_impl_k_sem_give(sem);
   1f7c0:	481a      	ldr	r0, [pc, #104]	; (1f82c <at_handler_cereg+0x1d8>)
   1f7c2:	f005 fce5 	bl	25190 <z_impl_k_sem_give>
}
   1f7c6:	e795      	b.n	1f6f4 <at_handler_cereg+0xa0>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   1f7c8:	4b19      	ldr	r3, [pc, #100]	; (1f830 <at_handler_cereg+0x1dc>)
   1f7ca:	68b9      	ldr	r1, [r7, #8]
   1f7cc:	681a      	ldr	r2, [r3, #0]
   1f7ce:	4291      	cmp	r1, r2
   1f7d0:	461a      	mov	r2, r3
   1f7d2:	d104      	bne.n	1f7de <at_handler_cereg+0x18a>
   1f7d4:	685b      	ldr	r3, [r3, #4]
   1f7d6:	68f9      	ldr	r1, [r7, #12]
   1f7d8:	4299      	cmp	r1, r3
   1f7da:	f43f af7d 	beq.w	1f6d8 <at_handler_cereg+0x84>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f7de:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1f7e2:	2301      	movs	r3, #1
   1f7e4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f7e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f7ec:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1f7f0:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1f7f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1f7f8:	f000 fc40 	bl	2007c <event_handler_list_dispatch>
   1f7fc:	e76c      	b.n	1f6d8 <at_handler_cereg+0x84>
   1f7fe:	bf00      	nop
   1f800:	00038ff9 	.word	0x00038ff9
   1f804:	00033bc2 	.word	0x00033bc2
   1f808:	00038fcb 	.word	0x00038fcb
   1f80c:	000392f7 	.word	0x000392f7
   1f810:	0003992f 	.word	0x0003992f
   1f814:	01000005 	.word	0x01000005
   1f818:	00031c2c 	.word	0x00031c2c
   1f81c:	2001046c 	.word	0x2001046c
   1f820:	2000dd90 	.word	0x2000dd90
   1f824:	2001046b 	.word	0x2001046b
   1f828:	00039327 	.word	0x00039327
   1f82c:	2000e744 	.word	0x2000e744
   1f830:	2000e73c 	.word	0x2000e73c

0001f834 <lte_lc_edrx_req>:

	return 0;
}

int lte_lc_edrx_req(bool enable)
{
   1f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   1f838:	2305      	movs	r3, #5
   1f83a:	2404      	movs	r4, #4
{
   1f83c:	b085      	sub	sp, #20
   1f83e:	af00      	add	r7, sp, #0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   1f840:	e9c7 4302 	strd	r4, r3, [r7, #8]

	if (!enable) {
   1f844:	b9d0      	cbnz	r0, 1f87c <lte_lc_edrx_req+0x48>
		err = nrf_modem_at_printf(edrx_disable);
   1f846:	4835      	ldr	r0, [pc, #212]	; (1f91c <lte_lc_edrx_req+0xe8>)
   1f848:	f003 f9fc 	bl	22c44 <nrf_modem_at_printf>
		if (err) {
   1f84c:	2800      	cmp	r0, #0
   1f84e:	d063      	beq.n	1f918 <lte_lc_edrx_req+0xe4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   1f850:	466d      	mov	r5, sp
   1f852:	b088      	sub	sp, #32
   1f854:	466a      	mov	r2, sp
   1f856:	4b32      	ldr	r3, [pc, #200]	; (1f920 <lte_lc_edrx_req+0xec>)
   1f858:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f85c:	6153      	str	r3, [r2, #20]
   1f85e:	4b31      	ldr	r3, [pc, #196]	; (1f924 <lte_lc_edrx_req+0xf0>)
   1f860:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f864:	4830      	ldr	r0, [pc, #192]	; (1f928 <lte_lc_edrx_req+0xf4>)
   1f866:	f842 4f10 	str.w	r4, [r2, #16]!
   1f86a:	f00f fdec 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f86e:	46ad      	mov	sp, r5
			return -EFAULT;
   1f870:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   1f874:	3714      	adds	r7, #20
   1f876:	46bd      	mov	sp, r7
   1f878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1f87c:	2600      	movs	r6, #0
					edrx_param_ltem : edrx_param_nbiot;
   1f87e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1f92c <lte_lc_edrx_req+0xf8>
   1f882:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1f930 <lte_lc_edrx_req+0xfc>
   1f886:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1f934 <lte_lc_edrx_req+0x100>
   1f88a:	f107 0808 	add.w	r8, r7, #8
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   1f88e:	f858 4b04 	ldr.w	r4, [r8], #4
					edrx_param_ltem : edrx_param_nbiot;
   1f892:	4d29      	ldr	r5, [pc, #164]	; (1f938 <lte_lc_edrx_req+0x104>)
   1f894:	2c04      	cmp	r4, #4
   1f896:	bf14      	ite	ne
   1f898:	464a      	movne	r2, r9
   1f89a:	4652      	moveq	r2, sl
		if (strlen(edrx_param) == 4) {
   1f89c:	4610      	mov	r0, r2
					edrx_param_ltem : edrx_param_nbiot;
   1f89e:	bf18      	it	ne
   1f8a0:	465d      	movne	r5, fp
		if (strlen(edrx_param) == 4) {
   1f8a2:	607a      	str	r2, [r7, #4]
   1f8a4:	f7e9 fcbd 	bl	9222 <strlen>
   1f8a8:	2804      	cmp	r0, #4
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   1f8aa:	4621      	mov	r1, r4
		if (strlen(edrx_param) == 4) {
   1f8ac:	687a      	ldr	r2, [r7, #4]
   1f8ae:	d117      	bne.n	1f8e0 <lte_lc_edrx_req+0xac>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   1f8b0:	4822      	ldr	r0, [pc, #136]	; (1f93c <lte_lc_edrx_req+0x108>)
   1f8b2:	f003 f9c7 	bl	22c44 <nrf_modem_at_printf>
		if (err) {
   1f8b6:	b1b8      	cbz	r0, 1f8e8 <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   1f8b8:	466c      	mov	r4, sp
   1f8ba:	b088      	sub	sp, #32
   1f8bc:	466a      	mov	r2, sp
   1f8be:	4b20      	ldr	r3, [pc, #128]	; (1f940 <lte_lc_edrx_req+0x10c>)
   1f8c0:	6153      	str	r3, [r2, #20]
   1f8c2:	4b18      	ldr	r3, [pc, #96]	; (1f924 <lte_lc_edrx_req+0xf0>)
   1f8c4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f8c8:	2304      	movs	r3, #4
   1f8ca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f8ce:	4816      	ldr	r0, [pc, #88]	; (1f928 <lte_lc_edrx_req+0xf4>)
   1f8d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f8d4:	f00f fdb7 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f8d8:	46a5      	mov	sp, r4
			return -EFAULT;
   1f8da:	e7c9      	b.n	1f870 <lte_lc_edrx_req+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1f8dc:	2601      	movs	r6, #1
   1f8de:	e7d6      	b.n	1f88e <lte_lc_edrx_req+0x5a>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   1f8e0:	4818      	ldr	r0, [pc, #96]	; (1f944 <lte_lc_edrx_req+0x110>)
   1f8e2:	f003 f9af 	bl	22c44 <nrf_modem_at_printf>
   1f8e6:	e7e6      	b.n	1f8b6 <lte_lc_edrx_req+0x82>
		if (strlen(ptw_param) != 4) {
   1f8e8:	4628      	mov	r0, r5
   1f8ea:	f7e9 fc9a 	bl	9222 <strlen>
   1f8ee:	2804      	cmp	r0, #4
   1f8f0:	d110      	bne.n	1f914 <lte_lc_edrx_req+0xe0>
   1f8f2:	6078      	str	r0, [r7, #4]
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   1f8f4:	462a      	mov	r2, r5
   1f8f6:	4621      	mov	r1, r4
   1f8f8:	4813      	ldr	r0, [pc, #76]	; (1f948 <lte_lc_edrx_req+0x114>)
   1f8fa:	f003 f9a3 	bl	22c44 <nrf_modem_at_printf>
		if (err) {
   1f8fe:	687b      	ldr	r3, [r7, #4]
   1f900:	b140      	cbz	r0, 1f914 <lte_lc_edrx_req+0xe0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   1f902:	466c      	mov	r4, sp
   1f904:	b088      	sub	sp, #32
   1f906:	466a      	mov	r2, sp
   1f908:	4910      	ldr	r1, [pc, #64]	; (1f94c <lte_lc_edrx_req+0x118>)
   1f90a:	6151      	str	r1, [r2, #20]
   1f90c:	4905      	ldr	r1, [pc, #20]	; (1f924 <lte_lc_edrx_req+0xf0>)
   1f90e:	e9c2 1006 	strd	r1, r0, [r2, #24]
   1f912:	e7da      	b.n	1f8ca <lte_lc_edrx_req+0x96>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   1f914:	2e00      	cmp	r6, #0
   1f916:	d0e1      	beq.n	1f8dc <lte_lc_edrx_req+0xa8>
		return 0;
   1f918:	2000      	movs	r0, #0
   1f91a:	e7ab      	b.n	1f874 <lte_lc_edrx_req+0x40>
   1f91c:	000399ce 	.word	0x000399ce
   1f920:	00039349 	.word	0x00039349
   1f924:	00039830 	.word	0x00039830
   1f928:	00031c2c 	.word	0x00031c2c
   1f92c:	2000cc90 	.word	0x2000cc90
   1f930:	2000cc95 	.word	0x2000cc95
   1f934:	20010473 	.word	0x20010473
   1f938:	20010478 	.word	0x20010478
   1f93c:	00039378 	.word	0x00039378
   1f940:	0003939b 	.word	0x0003939b
   1f944:	0003938c 	.word	0x0003938c
   1f948:	000393c9 	.word	0x000393c9
   1f94c:	000393da 	.word	0x000393da

0001f950 <lte_lc_nw_reg_status_get>:

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   1f950:	2300      	movs	r3, #0
{
   1f952:	b590      	push	{r4, r7, lr}
   1f954:	b083      	sub	sp, #12
   1f956:	af00      	add	r7, sp, #0

	if (status == NULL) {
   1f958:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   1f95a:	607b      	str	r3, [r7, #4]
	if (status == NULL) {
   1f95c:	b330      	cbz	r0, 1f9ac <lte_lc_nw_reg_status_get+0x5c>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   1f95e:	4915      	ldr	r1, [pc, #84]	; (1f9b4 <lte_lc_nw_reg_status_get+0x64>)
   1f960:	4815      	ldr	r0, [pc, #84]	; (1f9b8 <lte_lc_nw_reg_status_get+0x68>)
   1f962:	1d3b      	adds	r3, r7, #4
   1f964:	1cba      	adds	r2, r7, #2
   1f966:	f003 fa4d 	bl	22e04 <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   1f96a:	2800      	cmp	r0, #0
   1f96c:	dc15      	bgt.n	1f99a <lte_lc_nw_reg_status_get+0x4a>
		LOG_ERR("Could not get registration status, error: %d", err);
   1f96e:	466c      	mov	r4, sp
   1f970:	b088      	sub	sp, #32
   1f972:	466a      	mov	r2, sp
   1f974:	4b11      	ldr	r3, [pc, #68]	; (1f9bc <lte_lc_nw_reg_status_get+0x6c>)
   1f976:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f97a:	6153      	str	r3, [r2, #20]
   1f97c:	4b10      	ldr	r3, [pc, #64]	; (1f9c0 <lte_lc_nw_reg_status_get+0x70>)
   1f97e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f982:	2304      	movs	r3, #4
   1f984:	480f      	ldr	r0, [pc, #60]	; (1f9c4 <lte_lc_nw_reg_status_get+0x74>)
   1f986:	f842 3f10 	str.w	r3, [r2, #16]!
   1f98a:	f00f fd5c 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1f98e:	f06f 000d 	mvn.w	r0, #13
   1f992:	46a5      	mov	sp, r4
	} else {
		*status = status_tmp;
	}

	return 0;
}
   1f994:	370c      	adds	r7, #12
   1f996:	46bd      	mov	sp, r7
   1f998:	bd90      	pop	{r4, r7, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1f99a:	687b      	ldr	r3, [r7, #4]
   1f99c:	3301      	adds	r3, #1
   1f99e:	d103      	bne.n	1f9a8 <lte_lc_nw_reg_status_get+0x58>
   1f9a0:	2304      	movs	r3, #4
	return 0;
   1f9a2:	2000      	movs	r0, #0
		*status = LTE_LC_NW_REG_UNKNOWN;
   1f9a4:	7023      	strb	r3, [r4, #0]
   1f9a6:	e7f5      	b.n	1f994 <lte_lc_nw_reg_status_get+0x44>
		*status = status_tmp;
   1f9a8:	78bb      	ldrb	r3, [r7, #2]
   1f9aa:	e7fa      	b.n	1f9a2 <lte_lc_nw_reg_status_get+0x52>
		return -EINVAL;
   1f9ac:	f06f 0015 	mvn.w	r0, #21
   1f9b0:	e7f0      	b.n	1f994 <lte_lc_nw_reg_status_get+0x44>
   1f9b2:	bf00      	nop
   1f9b4:	00039408 	.word	0x00039408
   1f9b8:	00039425 	.word	0x00039425
   1f9bc:	0003942f 	.word	0x0003942f
   1f9c0:	00039817 	.word	0x00039817
   1f9c4:	00031c2c 	.word	0x00031c2c

0001f9c8 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   1f9c8:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	switch (mode) {
   1f9ca:	2807      	cmp	r0, #7
{
   1f9cc:	4605      	mov	r5, r0
   1f9ce:	460c      	mov	r4, r1
   1f9d0:	af00      	add	r7, sp, #0
	switch (mode) {
   1f9d2:	d914      	bls.n	1f9fe <lte_lc_system_mode_set+0x36>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   1f9d4:	466c      	mov	r4, sp
   1f9d6:	b088      	sub	sp, #32
   1f9d8:	466a      	mov	r2, sp
   1f9da:	4b26      	ldr	r3, [pc, #152]	; (1fa74 <lte_lc_system_mode_set+0xac>)
   1f9dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f9e0:	6153      	str	r3, [r2, #20]
   1f9e2:	4b25      	ldr	r3, [pc, #148]	; (1fa78 <lte_lc_system_mode_set+0xb0>)
   1f9e4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f9e8:	2304      	movs	r3, #4
   1f9ea:	4824      	ldr	r0, [pc, #144]	; (1fa7c <lte_lc_system_mode_set+0xb4>)
   1f9ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1f9f0:	f00f fd29 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1f9f4:	46a5      	mov	sp, r4
		return -EINVAL;
   1f9f6:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   1f9fa:	46bd      	mov	sp, r7
   1f9fc:	bdb0      	pop	{r4, r5, r7, pc}
	switch (preference) {
   1f9fe:	2904      	cmp	r1, #4
   1fa00:	d911      	bls.n	1fa26 <lte_lc_system_mode_set+0x5e>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   1fa02:	466d      	mov	r5, sp
   1fa04:	b088      	sub	sp, #32
   1fa06:	466a      	mov	r2, sp
   1fa08:	4b1d      	ldr	r3, [pc, #116]	; (1fa80 <lte_lc_system_mode_set+0xb8>)
   1fa0a:	481c      	ldr	r0, [pc, #112]	; (1fa7c <lte_lc_system_mode_set+0xb4>)
   1fa0c:	6153      	str	r3, [r2, #20]
   1fa0e:	4b1a      	ldr	r3, [pc, #104]	; (1fa78 <lte_lc_system_mode_set+0xb0>)
   1fa10:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1fa14:	2304      	movs	r3, #4
   1fa16:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fa1a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa1e:	f00f fd12 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1fa22:	46ad      	mov	sp, r5
		return -EINVAL;
   1fa24:	e7e7      	b.n	1f9f6 <lte_lc_system_mode_set+0x2e>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   1fa26:	4b17      	ldr	r3, [pc, #92]	; (1fa84 <lte_lc_system_mode_set+0xbc>)
   1fa28:	5c5a      	ldrb	r2, [r3, r1]
   1fa2a:	4b17      	ldr	r3, [pc, #92]	; (1fa88 <lte_lc_system_mode_set+0xc0>)
   1fa2c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1fa30:	4816      	ldr	r0, [pc, #88]	; (1fa8c <lte_lc_system_mode_set+0xc4>)
   1fa32:	f003 f907 	bl	22c44 <nrf_modem_at_printf>
	if (err) {
   1fa36:	b198      	cbz	r0, 1fa60 <lte_lc_system_mode_set+0x98>
		LOG_ERR("Could not send AT command, error: %d", err);
   1fa38:	466c      	mov	r4, sp
   1fa3a:	b088      	sub	sp, #32
   1fa3c:	466a      	mov	r2, sp
   1fa3e:	4b14      	ldr	r3, [pc, #80]	; (1fa90 <lte_lc_system_mode_set+0xc8>)
   1fa40:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fa44:	6153      	str	r3, [r2, #20]
   1fa46:	4b0c      	ldr	r3, [pc, #48]	; (1fa78 <lte_lc_system_mode_set+0xb0>)
   1fa48:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1fa4c:	2304      	movs	r3, #4
   1fa4e:	480b      	ldr	r0, [pc, #44]	; (1fa7c <lte_lc_system_mode_set+0xb4>)
   1fa50:	f842 3f10 	str.w	r3, [r2, #16]!
   1fa54:	f00f fcf7 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1fa58:	f06f 000d 	mvn.w	r0, #13
   1fa5c:	46a5      	mov	sp, r4
   1fa5e:	e7cc      	b.n	1f9fa <lte_lc_system_mode_set+0x32>
	sys_mode_current = mode;
   1fa60:	4b0c      	ldr	r3, [pc, #48]	; (1fa94 <lte_lc_system_mode_set+0xcc>)
   1fa62:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   1fa64:	4b0c      	ldr	r3, [pc, #48]	; (1fa98 <lte_lc_system_mode_set+0xd0>)
   1fa66:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   1fa68:	4b0c      	ldr	r3, [pc, #48]	; (1fa9c <lte_lc_system_mode_set+0xd4>)
   1fa6a:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   1fa6c:	4b0c      	ldr	r3, [pc, #48]	; (1faa0 <lte_lc_system_mode_set+0xd8>)
   1fa6e:	701c      	strb	r4, [r3, #0]
	return 0;
   1fa70:	e7c3      	b.n	1f9fa <lte_lc_system_mode_set+0x32>
   1fa72:	bf00      	nop
   1fa74:	00039460 	.word	0x00039460
   1fa78:	00039800 	.word	0x00039800
   1fa7c:	00031c2c 	.word	0x00031c2c
   1fa80:	00039486 	.word	0x00039486
   1fa84:	000399b4 	.word	0x000399b4
   1fa88:	00032768 	.word	0x00032768
   1fa8c:	000394af 	.word	0x000394af
   1fa90:	000394c5 	.word	0x000394c5
   1fa94:	2001046d 	.word	0x2001046d
   1fa98:	2000cc7d 	.word	0x2000cc7d
   1fa9c:	2001046e 	.word	0x2001046e
   1faa0:	2001046f 	.word	0x2001046f

0001faa4 <lte_lc_system_mode_get>:
int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   1faa4:	2300      	movs	r3, #0
{
   1faa6:	b5b0      	push	{r4, r5, r7, lr}
   1faa8:	b086      	sub	sp, #24
   1faaa:	af02      	add	r7, sp, #8
   1faac:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   1faae:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   1fab0:	e9c7 3300 	strd	r3, r3, [r7]
	int mode_preference = 0;
   1fab4:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (mode == NULL) {
   1fab8:	2800      	cmp	r0, #0
   1faba:	f000 8090 	beq.w	1fbde <lte_lc_system_mode_get+0x13a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   1fabe:	f107 030c 	add.w	r3, r7, #12
   1fac2:	9301      	str	r3, [sp, #4]
   1fac4:	f107 0308 	add.w	r3, r7, #8
   1fac8:	9300      	str	r3, [sp, #0]
   1faca:	463a      	mov	r2, r7
   1facc:	4945      	ldr	r1, [pc, #276]	; (1fbe4 <lte_lc_system_mode_get+0x140>)
   1face:	4846      	ldr	r0, [pc, #280]	; (1fbe8 <lte_lc_system_mode_get+0x144>)
   1fad0:	1d3b      	adds	r3, r7, #4
   1fad2:	f003 f997 	bl	22e04 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   1fad6:	2804      	cmp	r0, #4
   1fad8:	d00d      	beq.n	1faf6 <lte_lc_system_mode_get+0x52>
		LOG_ERR("Failed to get system mode, error: %d", err);
   1fada:	466c      	mov	r4, sp
   1fadc:	b088      	sub	sp, #32
   1fade:	aa02      	add	r2, sp, #8
   1fae0:	4b42      	ldr	r3, [pc, #264]	; (1fbec <lte_lc_system_mode_get+0x148>)
   1fae2:	6153      	str	r3, [r2, #20]
   1fae4:	4b42      	ldr	r3, [pc, #264]	; (1fbf0 <lte_lc_system_mode_get+0x14c>)
   1fae6:	e9c2 3006 	strd	r3, r0, [r2, #24]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   1faea:	2304      	movs	r3, #4
   1faec:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1faf0:	f842 3f10 	str.w	r3, [r2, #16]!
   1faf4:	e03e      	b.n	1fb74 <lte_lc_system_mode_get+0xd0>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1faf6:	687b      	ldr	r3, [r7, #4]
   1faf8:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   1fafa:	683b      	ldr	r3, [r7, #0]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1fafc:	bf18      	it	ne
   1fafe:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   1fb00:	3b00      	subs	r3, #0
   1fb02:	bf18      	it	ne
   1fb04:	2301      	movne	r3, #1
   1fb06:	005b      	lsls	r3, r3, #1
   1fb08:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   1fb0c:	68ba      	ldr	r2, [r7, #8]
   1fb0e:	3a00      	subs	r2, #0
   1fb10:	bf18      	it	ne
   1fb12:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   1fb14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   1fb18:	2b0e      	cmp	r3, #14
   1fb1a:	d81f      	bhi.n	1fb5c <lte_lc_system_mode_get+0xb8>
   1fb1c:	e8df f003 	tbb	[pc, r3]
   1fb20:	1e081e33 	.word	0x1e081e33
   1fb24:	1e1a1e35 	.word	0x1e1a1e35
   1fb28:	1e161e14 	.word	0x1e161e14
   1fb2c:	1e18      	.short	0x1e18
   1fb2e:	1c          	.byte	0x1c
   1fb2f:	00          	.byte	0x00
   1fb30:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   1fb32:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   1fb34:	2c00      	cmp	r4, #0
   1fb36:	d049      	beq.n	1fbcc <lte_lc_system_mode_get+0x128>
		switch (mode_preference) {
   1fb38:	68fb      	ldr	r3, [r7, #12]
   1fb3a:	2b04      	cmp	r3, #4
   1fb3c:	d83d      	bhi.n	1fbba <lte_lc_system_mode_get+0x116>
   1fb3e:	e8df f003 	tbb	[pc, r3]
   1fb42:	3426      	.short	0x3426
   1fb44:	3836      	.short	0x3836
   1fb46:	3a          	.byte	0x3a
   1fb47:	00          	.byte	0x00
		break;
   1fb48:	2303      	movs	r3, #3
   1fb4a:	e7f2      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
		break;
   1fb4c:	2304      	movs	r3, #4
   1fb4e:	e7f0      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
		break;
   1fb50:	2305      	movs	r3, #5
   1fb52:	e7ee      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
		break;
   1fb54:	2306      	movs	r3, #6
   1fb56:	e7ec      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
		break;
   1fb58:	2307      	movs	r3, #7
   1fb5a:	e7ea      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
		LOG_ERR("Invalid system mode, assuming parsing error");
   1fb5c:	466c      	mov	r4, sp
   1fb5e:	b088      	sub	sp, #32
   1fb60:	aa02      	add	r2, sp, #8
   1fb62:	4b24      	ldr	r3, [pc, #144]	; (1fbf4 <lte_lc_system_mode_get+0x150>)
   1fb64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb68:	6153      	str	r3, [r2, #20]
   1fb6a:	4b21      	ldr	r3, [pc, #132]	; (1fbf0 <lte_lc_system_mode_get+0x14c>)
   1fb6c:	6193      	str	r3, [r2, #24]
   1fb6e:	2303      	movs	r3, #3
   1fb70:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb74:	4820      	ldr	r0, [pc, #128]	; (1fbf8 <lte_lc_system_mode_get+0x154>)
   1fb76:	f00f fc66 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1fb7a:	f06f 000d 	mvn.w	r0, #13
   1fb7e:	46a5      	mov	sp, r4
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   1fb80:	3710      	adds	r7, #16
   1fb82:	46bd      	mov	sp, r7
   1fb84:	bdb0      	pop	{r4, r5, r7, pc}
	switch (mode_bitmask) {
   1fb86:	2300      	movs	r3, #0
   1fb88:	e7d3      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
   1fb8a:	2302      	movs	r3, #2
   1fb8c:	e7d1      	b.n	1fb32 <lte_lc_system_mode_get+0x8e>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   1fb8e:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   1fb90:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   1fb92:	4b1a      	ldr	r3, [pc, #104]	; (1fbfc <lte_lc_system_mode_get+0x158>)
   1fb94:	782a      	ldrb	r2, [r5, #0]
   1fb96:	7819      	ldrb	r1, [r3, #0]
   1fb98:	4291      	cmp	r1, r2
   1fb9a:	d11e      	bne.n	1fbda <lte_lc_system_mode_get+0x136>
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   1fb9c:	4b18      	ldr	r3, [pc, #96]	; (1fc00 <lte_lc_system_mode_get+0x15c>)
   1fb9e:	7822      	ldrb	r2, [r4, #0]
   1fba0:	7819      	ldrb	r1, [r3, #0]
   1fba2:	4291      	cmp	r1, r2
   1fba4:	d017      	beq.n	1fbd6 <lte_lc_system_mode_get+0x132>
		mode_pref_current = *preference;
   1fba6:	701a      	strb	r2, [r3, #0]
   1fba8:	e015      	b.n	1fbd6 <lte_lc_system_mode_get+0x132>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   1fbaa:	2301      	movs	r3, #1
   1fbac:	e7f0      	b.n	1fb90 <lte_lc_system_mode_get+0xec>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   1fbae:	2302      	movs	r3, #2
   1fbb0:	e7ee      	b.n	1fb90 <lte_lc_system_mode_get+0xec>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   1fbb2:	2303      	movs	r3, #3
   1fbb4:	e7ec      	b.n	1fb90 <lte_lc_system_mode_get+0xec>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   1fbb6:	2304      	movs	r3, #4
   1fbb8:	e7ea      	b.n	1fb90 <lte_lc_system_mode_get+0xec>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   1fbba:	466c      	mov	r4, sp
   1fbbc:	b088      	sub	sp, #32
   1fbbe:	aa02      	add	r2, sp, #8
   1fbc0:	4910      	ldr	r1, [pc, #64]	; (1fc04 <lte_lc_system_mode_get+0x160>)
   1fbc2:	6151      	str	r1, [r2, #20]
   1fbc4:	490a      	ldr	r1, [pc, #40]	; (1fbf0 <lte_lc_system_mode_get+0x14c>)
   1fbc6:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1fbca:	e78e      	b.n	1faea <lte_lc_system_mode_get+0x46>
	if (sys_mode_current != *mode) {
   1fbcc:	4a0b      	ldr	r2, [pc, #44]	; (1fbfc <lte_lc_system_mode_get+0x158>)
   1fbce:	7811      	ldrb	r1, [r2, #0]
   1fbd0:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   1fbd2:	bf18      	it	ne
   1fbd4:	7013      	strbne	r3, [r2, #0]
	return 0;
   1fbd6:	2000      	movs	r0, #0
   1fbd8:	e7d2      	b.n	1fb80 <lte_lc_system_mode_get+0xdc>
		sys_mode_current = *mode;
   1fbda:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   1fbdc:	e7de      	b.n	1fb9c <lte_lc_system_mode_get+0xf8>
		return -EINVAL;
   1fbde:	f06f 0015 	mvn.w	r0, #21
   1fbe2:	e7cd      	b.n	1fb80 <lte_lc_system_mode_get+0xdc>
   1fbe4:	000394ee 	.word	0x000394ee
   1fbe8:	00039509 	.word	0x00039509
   1fbec:	00039519 	.word	0x00039519
   1fbf0:	000397e9 	.word	0x000397e9
   1fbf4:	00039542 	.word	0x00039542
   1fbf8:	00031c2c 	.word	0x00031c2c
   1fbfc:	2001046d 	.word	0x2001046d
   1fc00:	2001046e 	.word	0x2001046e
   1fc04:	00039572 	.word	0x00039572

0001fc08 <init_and_config>:
{
   1fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (is_initialized) {
   1fc0c:	4d27      	ldr	r5, [pc, #156]	; (1fcac <init_and_config+0xa4>)
{
   1fc0e:	af00      	add	r7, sp, #0
	if (is_initialized) {
   1fc10:	7829      	ldrb	r1, [r5, #0]
   1fc12:	2900      	cmp	r1, #0
   1fc14:	d148      	bne.n	1fca8 <init_and_config+0xa0>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   1fc16:	4e26      	ldr	r6, [pc, #152]	; (1fcb0 <init_and_config+0xa8>)
   1fc18:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1fcb4 <init_and_config+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fc1c:	2201      	movs	r2, #1
   1fc1e:	4826      	ldr	r0, [pc, #152]	; (1fcb8 <init_and_config+0xb0>)
   1fc20:	f010 fc32 	bl	30488 <z_impl_k_sem_init>
   1fc24:	4631      	mov	r1, r6
   1fc26:	4640      	mov	r0, r8
   1fc28:	f7ff ff3c 	bl	1faa4 <lte_lc_system_mode_get>
	if (err) {
   1fc2c:	4604      	mov	r4, r0
   1fc2e:	b1a0      	cbz	r0, 1fc5a <init_and_config+0x52>
		LOG_ERR("Could not get current system mode, error: %d", err);
   1fc30:	466d      	mov	r5, sp
   1fc32:	b088      	sub	sp, #32
   1fc34:	466a      	mov	r2, sp
   1fc36:	4b21      	ldr	r3, [pc, #132]	; (1fcbc <init_and_config+0xb4>)
			LOG_ERR("Could not set system mode, error: %d", err);
   1fc38:	6153      	str	r3, [r2, #20]
   1fc3a:	4b21      	ldr	r3, [pc, #132]	; (1fcc0 <init_and_config+0xb8>)
   1fc3c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fc40:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1fc44:	2304      	movs	r3, #4
   1fc46:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Failed to enable notifications");
   1fc4a:	481e      	ldr	r0, [pc, #120]	; (1fcc4 <init_and_config+0xbc>)
   1fc4c:	f00f fbfb 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1fc50:	46ad      	mov	sp, r5
}
   1fc52:	4620      	mov	r0, r4
   1fc54:	46bd      	mov	sp, r7
   1fc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   1fc5a:	4b1b      	ldr	r3, [pc, #108]	; (1fcc8 <init_and_config+0xc0>)
   1fc5c:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   1fc5e:	4b1b      	ldr	r3, [pc, #108]	; (1fccc <init_and_config+0xc4>)
   1fc60:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   1fc62:	f898 3000 	ldrb.w	r3, [r8]
   1fc66:	4283      	cmp	r3, r0
   1fc68:	d102      	bne.n	1fc70 <init_and_config+0x68>
   1fc6a:	7833      	ldrb	r3, [r6, #0]
   1fc6c:	428b      	cmp	r3, r1
   1fc6e:	d008      	beq.n	1fc82 <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   1fc70:	f7ff feaa 	bl	1f9c8 <lte_lc_system_mode_set>
		if (err) {
   1fc74:	4604      	mov	r4, r0
   1fc76:	b120      	cbz	r0, 1fc82 <init_and_config+0x7a>
			LOG_ERR("Could not set system mode, error: %d", err);
   1fc78:	466d      	mov	r5, sp
   1fc7a:	b088      	sub	sp, #32
   1fc7c:	466a      	mov	r2, sp
   1fc7e:	4b14      	ldr	r3, [pc, #80]	; (1fcd0 <init_and_config+0xc8>)
   1fc80:	e7da      	b.n	1fc38 <init_and_config+0x30>
	err = enable_notifications();
   1fc82:	f7ff f8f9 	bl	1ee78 <enable_notifications>
	if (err) {
   1fc86:	4604      	mov	r4, r0
   1fc88:	b160      	cbz	r0, 1fca4 <init_and_config+0x9c>
		LOG_ERR("Failed to enable notifications");
   1fc8a:	466d      	mov	r5, sp
   1fc8c:	b088      	sub	sp, #32
   1fc8e:	466a      	mov	r2, sp
   1fc90:	4b10      	ldr	r3, [pc, #64]	; (1fcd4 <init_and_config+0xcc>)
   1fc92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc96:	6153      	str	r3, [r2, #20]
   1fc98:	4b09      	ldr	r3, [pc, #36]	; (1fcc0 <init_and_config+0xb8>)
   1fc9a:	6193      	str	r3, [r2, #24]
   1fc9c:	2303      	movs	r3, #3
   1fc9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1fca2:	e7d2      	b.n	1fc4a <init_and_config+0x42>
	is_initialized = true;
   1fca4:	2301      	movs	r3, #1
   1fca6:	702b      	strb	r3, [r5, #0]
		return 0;
   1fca8:	2400      	movs	r4, #0
   1fcaa:	e7d2      	b.n	1fc52 <init_and_config+0x4a>
   1fcac:	2001047d 	.word	0x2001047d
   1fcb0:	2001046e 	.word	0x2001046e
   1fcb4:	2001046d 	.word	0x2001046d
   1fcb8:	2000e744 	.word	0x2000e744
   1fcbc:	00039595 	.word	0x00039595
   1fcc0:	00039894 	.word	0x00039894
   1fcc4:	00031c2c 	.word	0x00031c2c
   1fcc8:	2000cc7d 	.word	0x2000cc7d
   1fccc:	2001046f 	.word	0x2001046f
   1fcd0:	000395c6 	.word	0x000395c6
   1fcd4:	000395ef 	.word	0x000395ef

0001fcd8 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   1fcd8:	b590      	push	{r4, r7, lr}
   1fcda:	b083      	sub	sp, #12
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   1fcdc:	4604      	mov	r4, r0
{
   1fcde:	af00      	add	r7, sp, #0
	if (mode == NULL) {
   1fce0:	b300      	cbz	r0, 1fd24 <lte_lc_func_mode_get+0x4c>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   1fce2:	4912      	ldr	r1, [pc, #72]	; (1fd2c <lte_lc_func_mode_get+0x54>)
   1fce4:	4812      	ldr	r0, [pc, #72]	; (1fd30 <lte_lc_func_mode_get+0x58>)
   1fce6:	1dba      	adds	r2, r7, #6
   1fce8:	f003 f88c 	bl	22e04 <nrf_modem_at_scanf>
	if (err != 1) {
   1fcec:	2801      	cmp	r0, #1
   1fcee:	d015      	beq.n	1fd1c <lte_lc_func_mode_get+0x44>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   1fcf0:	466c      	mov	r4, sp
   1fcf2:	b088      	sub	sp, #32
   1fcf4:	466a      	mov	r2, sp
   1fcf6:	4b0f      	ldr	r3, [pc, #60]	; (1fd34 <lte_lc_func_mode_get+0x5c>)
   1fcf8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fcfc:	6153      	str	r3, [r2, #20]
   1fcfe:	4b0e      	ldr	r3, [pc, #56]	; (1fd38 <lte_lc_func_mode_get+0x60>)
   1fd00:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1fd04:	2304      	movs	r3, #4
   1fd06:	480d      	ldr	r0, [pc, #52]	; (1fd3c <lte_lc_func_mode_get+0x64>)
   1fd08:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd0c:	f00f fb9b 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1fd10:	f06f 000d 	mvn.w	r0, #13
   1fd14:	46a5      	mov	sp, r4
	}

	*mode = mode_tmp;

	return 0;
}
   1fd16:	370c      	adds	r7, #12
   1fd18:	46bd      	mov	sp, r7
   1fd1a:	bd90      	pop	{r4, r7, pc}
	*mode = mode_tmp;
   1fd1c:	88fb      	ldrh	r3, [r7, #6]
	return 0;
   1fd1e:	2000      	movs	r0, #0
	*mode = mode_tmp;
   1fd20:	7023      	strb	r3, [r4, #0]
	return 0;
   1fd22:	e7f8      	b.n	1fd16 <lte_lc_func_mode_get+0x3e>
		return -EINVAL;
   1fd24:	f06f 0015 	mvn.w	r0, #21
   1fd28:	e7f5      	b.n	1fd16 <lte_lc_func_mode_get+0x3e>
   1fd2a:	bf00      	nop
   1fd2c:	00039612 	.word	0x00039612
   1fd30:	0003961d 	.word	0x0003961d
   1fd34:	00039626 	.word	0x00039626
   1fd38:	000397d4 	.word	0x000397d4
   1fd3c:	00031c2c 	.word	0x00031c2c

0001fd40 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   1fd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   1fd44:	2804      	cmp	r0, #4
{
   1fd46:	4604      	mov	r4, r0
   1fd48:	af00      	add	r7, sp, #0
	switch (mode) {
   1fd4a:	d827      	bhi.n	1fd9c <lte_lc_func_mode_set+0x5c>
   1fd4c:	2804      	cmp	r0, #4
   1fd4e:	d82a      	bhi.n	1fda6 <lte_lc_func_mode_set+0x66>
   1fd50:	e8df f000 	tbb	[pc, r0]
   1fd54:	293d0a3d 	.word	0x293d0a3d
   1fd58:	3d          	.byte	0x3d
   1fd59:	00          	.byte	0x00
   1fd5a:	2201      	movs	r2, #1
   1fd5c:	4933      	ldr	r1, [pc, #204]	; (1fe2c <lte_lc_func_mode_set+0xec>)
   1fd5e:	409a      	lsls	r2, r3
   1fd60:	420a      	tst	r2, r1
   1fd62:	d134      	bne.n	1fdce <lte_lc_func_mode_set+0x8e>
   1fd64:	2b01      	cmp	r3, #1
   1fd66:	d11e      	bne.n	1fda6 <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   1fd68:	f7ff f886 	bl	1ee78 <enable_notifications>
		if (err) {
   1fd6c:	b378      	cbz	r0, 1fdce <lte_lc_func_mode_set+0x8e>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   1fd6e:	466c      	mov	r4, sp
   1fd70:	b088      	sub	sp, #32
   1fd72:	466a      	mov	r2, sp
   1fd74:	4b2e      	ldr	r3, [pc, #184]	; (1fe30 <lte_lc_func_mode_set+0xf0>)
   1fd76:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fd7a:	6153      	str	r3, [r2, #20]
   1fd7c:	4b2d      	ldr	r3, [pc, #180]	; (1fe34 <lte_lc_func_mode_set+0xf4>)
   1fd7e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1fd82:	2304      	movs	r3, #4
   1fd84:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd88:	482b      	ldr	r0, [pc, #172]	; (1fe38 <lte_lc_func_mode_set+0xf8>)
   1fd8a:	f00f fb5c 	bl	2f446 <z_log_msg_static_create.constprop.0>
			return -EFAULT;
   1fd8e:	f06f 050d 	mvn.w	r5, #13
   1fd92:	46a5      	mov	sp, r4
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   1fd94:	4628      	mov	r0, r5
   1fd96:	46bd      	mov	sp, r7
   1fd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   1fd9c:	f1a0 0314 	sub.w	r3, r0, #20
   1fda0:	b2db      	uxtb	r3, r3
   1fda2:	2b18      	cmp	r3, #24
   1fda4:	d9d9      	bls.n	1fd5a <lte_lc_func_mode_set+0x1a>
		LOG_ERR("Invalid functional mode: %d", mode);
   1fda6:	466d      	mov	r5, sp
   1fda8:	b088      	sub	sp, #32
   1fdaa:	466a      	mov	r2, sp
   1fdac:	4b23      	ldr	r3, [pc, #140]	; (1fe3c <lte_lc_func_mode_set+0xfc>)
   1fdae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fdb2:	6153      	str	r3, [r2, #20]
   1fdb4:	4b1f      	ldr	r3, [pc, #124]	; (1fe34 <lte_lc_func_mode_set+0xf4>)
   1fdb6:	4820      	ldr	r0, [pc, #128]	; (1fe38 <lte_lc_func_mode_set+0xf8>)
   1fdb8:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1fdbc:	2304      	movs	r3, #4
   1fdbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdc2:	f00f fb40 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1fdc6:	46ad      	mov	sp, r5
		return -EINVAL;
   1fdc8:	f06f 0515 	mvn.w	r5, #21
   1fdcc:	e7e2      	b.n	1fd94 <lte_lc_func_mode_set+0x54>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   1fdce:	4621      	mov	r1, r4
   1fdd0:	481b      	ldr	r0, [pc, #108]	; (1fe40 <lte_lc_func_mode_set+0x100>)
   1fdd2:	f002 ff37 	bl	22c44 <nrf_modem_at_printf>
	if (err) {
   1fdd6:	4605      	mov	r5, r0
   1fdd8:	b160      	cbz	r0, 1fdf4 <lte_lc_func_mode_set+0xb4>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   1fdda:	466c      	mov	r4, sp
   1fddc:	b088      	sub	sp, #32
   1fdde:	466a      	mov	r2, sp
   1fde0:	4b18      	ldr	r3, [pc, #96]	; (1fe44 <lte_lc_func_mode_set+0x104>)
   1fde2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fde6:	6153      	str	r3, [r2, #20]
   1fde8:	4b12      	ldr	r3, [pc, #72]	; (1fe34 <lte_lc_func_mode_set+0xf4>)
   1fdea:	6193      	str	r3, [r2, #24]
   1fdec:	2303      	movs	r3, #3
   1fdee:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdf2:	e7c9      	b.n	1fd88 <lte_lc_func_mode_set+0x48>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1fdf4:	4e14      	ldr	r6, [pc, #80]	; (1fe48 <lte_lc_func_mode_set+0x108>)
   1fdf6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1fe4c <lte_lc_func_mode_set+0x10c>
   1fdfa:	e005      	b.n	1fe08 <lte_lc_func_mode_set+0xc8>
   1fdfc:	d2ca      	bcs.n	1fd94 <lte_lc_func_mode_set+0x54>
		e->callback(mode, e->context);
   1fdfe:	e9d6 3100 	ldrd	r3, r1, [r6]
   1fe02:	4620      	mov	r0, r4
   1fe04:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   1fe06:	3608      	adds	r6, #8
   1fe08:	4546      	cmp	r6, r8
   1fe0a:	d9f7      	bls.n	1fdfc <lte_lc_func_mode_set+0xbc>
   1fe0c:	4910      	ldr	r1, [pc, #64]	; (1fe50 <lte_lc_func_mode_set+0x110>)
   1fe0e:	f240 5376 	movw	r3, #1398	; 0x576
   1fe12:	4a10      	ldr	r2, [pc, #64]	; (1fe54 <lte_lc_func_mode_set+0x114>)
   1fe14:	4810      	ldr	r0, [pc, #64]	; (1fe58 <lte_lc_func_mode_set+0x118>)
   1fe16:	f00a ffcf 	bl	2adb8 <assert_print>
   1fe1a:	4810      	ldr	r0, [pc, #64]	; (1fe5c <lte_lc_func_mode_set+0x11c>)
   1fe1c:	f00a ffcc 	bl	2adb8 <assert_print>
   1fe20:	f240 5176 	movw	r1, #1398	; 0x576
   1fe24:	480b      	ldr	r0, [pc, #44]	; (1fe54 <lte_lc_func_mode_set+0x114>)
   1fe26:	f00a ffc0 	bl	2adaa <assert_post_action>
   1fe2a:	bf00      	nop
   1fe2c:	01300c01 	.word	0x01300c01
   1fe30:	00039665 	.word	0x00039665
   1fe34:	000397bf 	.word	0x000397bf
   1fe38:	00031c2c 	.word	0x00031c2c
   1fe3c:	00039693 	.word	0x00039693
   1fe40:	000396b3 	.word	0x000396b3
   1fe44:	000396be 	.word	0x000396be
   1fe48:	0003c338 	.word	0x0003c338
   1fe4c:	0003c338 	.word	0x0003c338
   1fe50:	000396fb 	.word	0x000396fb
   1fe54:	00038fcb 	.word	0x00038fcb
   1fe58:	00033bc2 	.word	0x00033bc2
   1fe5c:	000342e3 	.word	0x000342e3

0001fe60 <connect_lte>:
{
   1fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe64:	b083      	sub	sp, #12
	if (!is_initialized) {
   1fe66:	4b55      	ldr	r3, [pc, #340]	; (1ffbc <connect_lte+0x15c>)
{
   1fe68:	4605      	mov	r5, r0
	if (!is_initialized) {
   1fe6a:	781b      	ldrb	r3, [r3, #0]
{
   1fe6c:	af00      	add	r7, sp, #0
	if (!is_initialized) {
   1fe6e:	b9ab      	cbnz	r3, 1fe9c <connect_lte+0x3c>
		LOG_ERR("The LTE link controller is not initialized");
   1fe70:	466c      	mov	r4, sp
   1fe72:	b088      	sub	sp, #32
   1fe74:	466a      	mov	r2, sp
   1fe76:	4b52      	ldr	r3, [pc, #328]	; (1ffc0 <connect_lte+0x160>)
   1fe78:	4852      	ldr	r0, [pc, #328]	; (1ffc4 <connect_lte+0x164>)
   1fe7a:	6153      	str	r3, [r2, #20]
   1fe7c:	4b52      	ldr	r3, [pc, #328]	; (1ffc8 <connect_lte+0x168>)
   1fe7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fe82:	6193      	str	r3, [r2, #24]
   1fe84:	2303      	movs	r3, #3
   1fe86:	f842 3f10 	str.w	r3, [r2, #16]!
   1fe8a:	f00f fadc 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1fe8e:	f04f 30ff 	mov.w	r0, #4294967295
   1fe92:	46a5      	mov	sp, r4
}
   1fe94:	370c      	adds	r7, #12
   1fe96:	46bd      	mov	sp, r7
   1fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe9c:	2601      	movs	r6, #1
   1fe9e:	4c4b      	ldr	r4, [pc, #300]	; (1ffcc <connect_lte+0x16c>)
   1fea0:	e8d4 3fef 	ldaex	r3, [r4]
   1fea4:	e8c4 6fe2 	stlex	r2, r6, [r4]
   1fea8:	2a00      	cmp	r2, #0
   1feaa:	d1f9      	bne.n	1fea0 <connect_lte+0x40>
	if (atomic_set(&in_progress, 1)) {
   1feac:	2b00      	cmp	r3, #0
   1feae:	f040 8081 	bne.w	1ffb4 <connect_lte+0x154>
	err = lte_lc_nw_reg_status_get(&reg_status);
   1feb2:	1df8      	adds	r0, r7, #7
   1feb4:	f7ff fd4c 	bl	1f950 <lte_lc_nw_reg_status_get>
	if (err) {
   1feb8:	b190      	cbz	r0, 1fee0 <connect_lte+0x80>
		LOG_ERR("Failed to get current registration status");
   1feba:	466c      	mov	r4, sp
   1febc:	b088      	sub	sp, #32
   1febe:	466a      	mov	r2, sp
   1fec0:	4b43      	ldr	r3, [pc, #268]	; (1ffd0 <connect_lte+0x170>)
   1fec2:	4840      	ldr	r0, [pc, #256]	; (1ffc4 <connect_lte+0x164>)
   1fec4:	6153      	str	r3, [r2, #20]
   1fec6:	4b40      	ldr	r3, [pc, #256]	; (1ffc8 <connect_lte+0x168>)
   1fec8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fecc:	6193      	str	r3, [r2, #24]
   1fece:	2303      	movs	r3, #3
   1fed0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fed4:	f00f fab7 	bl	2f446 <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   1fed8:	f06f 000d 	mvn.w	r0, #13
   1fedc:	46a5      	mov	sp, r4
   1fede:	e7d9      	b.n	1fe94 <connect_lte+0x34>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1fee0:	79fb      	ldrb	r3, [r7, #7]
   1fee2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1fee6:	2b01      	cmp	r3, #1
   1fee8:	d016      	beq.n	1ff18 <connect_lte+0xb8>
	if (blocking) {
   1feea:	b125      	cbz	r5, 1fef6 <connect_lte+0x96>
   1feec:	4601      	mov	r1, r0
   1feee:	4632      	mov	r2, r6
   1fef0:	4838      	ldr	r0, [pc, #224]	; (1ffd4 <connect_lte+0x174>)
   1fef2:	f010 fac9 	bl	30488 <z_impl_k_sem_init>
{
   1fef6:	2602      	movs	r6, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   1fef8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1ffd8 <connect_lte+0x178>
			LOG_INF("Network connection attempt timed out");
   1fefc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1ffc8 <connect_lte+0x168>
		err = lte_lc_func_mode_get(&current_func_mode);
   1ff00:	1db8      	adds	r0, r7, #6
   1ff02:	f7ff fee9 	bl	1fcd8 <lte_lc_func_mode_get>
		if (err) {
   1ff06:	b9b8      	cbnz	r0, 1ff38 <connect_lte+0xd8>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   1ff08:	79bb      	ldrb	r3, [r7, #6]
   1ff0a:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   1ff0e:	d00b      	beq.n	1ff28 <connect_lte+0xc8>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   1ff10:	2001      	movs	r0, #1
   1ff12:	f7ff ff15 	bl	1fd40 <lte_lc_func_mode_set>
		if (err || !blocking) {
   1ff16:	b190      	cbz	r0, 1ff3e <connect_lte+0xde>
   1ff18:	2300      	movs	r3, #0
   1ff1a:	e8d4 2fef 	ldaex	r2, [r4]
   1ff1e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1ff22:	2900      	cmp	r1, #0
   1ff24:	d0b6      	beq.n	1fe94 <connect_lte+0x34>
   1ff26:	e7f8      	b.n	1ff1a <connect_lte+0xba>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   1ff28:	4b2c      	ldr	r3, [pc, #176]	; (1ffdc <connect_lte+0x17c>)
   1ff2a:	f899 1000 	ldrb.w	r1, [r9]
   1ff2e:	7818      	ldrb	r0, [r3, #0]
   1ff30:	f7ff fd4a 	bl	1f9c8 <lte_lc_system_mode_set>
			if (err) {
   1ff34:	2800      	cmp	r0, #0
   1ff36:	d0eb      	beq.n	1ff10 <connect_lte+0xb0>
			err = -EFAULT;
   1ff38:	f06f 000d 	mvn.w	r0, #13
   1ff3c:	e7ec      	b.n	1ff18 <connect_lte+0xb8>
		if (err || !blocking) {
   1ff3e:	2d00      	cmp	r5, #0
   1ff40:	d0ea      	beq.n	1ff18 <connect_lte+0xb8>
	return z_impl_k_sem_take(sem, timeout);
   1ff42:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   1ff46:	2300      	movs	r3, #0
   1ff48:	4822      	ldr	r0, [pc, #136]	; (1ffd4 <connect_lte+0x174>)
   1ff4a:	f005 f965 	bl	25218 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   1ff4e:	f110 0f0b 	cmn.w	r0, #11
   1ff52:	d1e1      	bne.n	1ff18 <connect_lte+0xb8>
			LOG_INF("Network connection attempt timed out");
   1ff54:	46ea      	mov	sl, sp
   1ff56:	b088      	sub	sp, #32
   1ff58:	466a      	mov	r2, sp
   1ff5a:	f04f 0b03 	mov.w	fp, #3
   1ff5e:	4b20      	ldr	r3, [pc, #128]	; (1ffe0 <connect_lte+0x180>)
   1ff60:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1ff64:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ff68:	4816      	ldr	r0, [pc, #88]	; (1ffc4 <connect_lte+0x164>)
   1ff6a:	f842 bf10 	str.w	fp, [r2, #16]!
   1ff6e:	f00f fa6a 	bl	2f446 <z_log_msg_static_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   1ff72:	2e01      	cmp	r6, #1
   1ff74:	46d5      	mov	sp, sl
   1ff76:	d01a      	beq.n	1ffae <connect_lte+0x14e>
				if (sys_mode_target == sys_mode_preferred) {
   1ff78:	4b18      	ldr	r3, [pc, #96]	; (1ffdc <connect_lte+0x17c>)
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   1ff7a:	2004      	movs	r0, #4
				if (sys_mode_target == sys_mode_preferred) {
   1ff7c:	781a      	ldrb	r2, [r3, #0]
					sys_mode_target = sys_mode_fallback;
   1ff7e:	2a04      	cmp	r2, #4
   1ff80:	bf14      	ite	ne
   1ff82:	2204      	movne	r2, #4
   1ff84:	2205      	moveq	r2, #5
   1ff86:	701a      	strb	r2, [r3, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   1ff88:	f7ff feda 	bl	1fd40 <lte_lc_func_mode_set>
				if (err) {
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	d1d3      	bne.n	1ff38 <connect_lte+0xd8>
				LOG_INF("Using fallback network mode");
   1ff90:	b088      	sub	sp, #32
   1ff92:	466a      	mov	r2, sp
   1ff94:	4b13      	ldr	r3, [pc, #76]	; (1ffe4 <connect_lte+0x184>)
   1ff96:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1ff9a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ff9e:	4809      	ldr	r0, [pc, #36]	; (1ffc4 <connect_lte+0x164>)
   1ffa0:	f842 bf10 	str.w	fp, [r2, #16]!
   1ffa4:	f00f fa4f 	bl	2f446 <z_log_msg_static_create.constprop.0>
   1ffa8:	2601      	movs	r6, #1
   1ffaa:	46d5      	mov	sp, sl
	} while (tries > 0);
   1ffac:	e7a8      	b.n	1ff00 <connect_lte+0xa0>
				err = -ETIMEDOUT;
   1ffae:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1ffb2:	e7b1      	b.n	1ff18 <connect_lte+0xb8>
		return -EINPROGRESS;
   1ffb4:	f06f 0076 	mvn.w	r0, #118	; 0x76
   1ffb8:	e76c      	b.n	1fe94 <connect_lte+0x34>
   1ffba:	bf00      	nop
   1ffbc:	2001047d 	.word	0x2001047d
   1ffc0:	00039719 	.word	0x00039719
   1ffc4:	00031c2c 	.word	0x00031c2c
   1ffc8:	00039873 	.word	0x00039873
   1ffcc:	2000e738 	.word	0x2000e738
   1ffd0:	00039748 	.word	0x00039748
   1ffd4:	2000e744 	.word	0x2000e744
   1ffd8:	2001046e 	.word	0x2001046e
   1ffdc:	2000cc7d 	.word	0x2000cc7d
   1ffe0:	00039776 	.word	0x00039776
   1ffe4:	0003979f 	.word	0x0003979f

0001ffe8 <lte_lc_deinit>:
{
   1ffe8:	b508      	push	{r3, lr}
	if (is_initialized) {
   1ffea:	4b06      	ldr	r3, [pc, #24]	; (20004 <lte_lc_deinit+0x1c>)
   1ffec:	781a      	ldrb	r2, [r3, #0]
   1ffee:	b122      	cbz	r2, 1fffa <lte_lc_deinit+0x12>
		is_initialized = false;
   1fff0:	2000      	movs	r0, #0
   1fff2:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1fff4:	f7ff fea4 	bl	1fd40 <lte_lc_func_mode_set>
   1fff8:	b908      	cbnz	r0, 1fffe <lte_lc_deinit+0x16>
   1fffa:	2000      	movs	r0, #0
}
   1fffc:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   1fffe:	f06f 000d 	mvn.w	r0, #13
   20002:	e7fb      	b.n	1fffc <lte_lc_deinit+0x14>
   20004:	2001047d 	.word	0x2001047d

00020008 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20008:	4801      	ldr	r0, [pc, #4]	; (20010 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2000a:	f004 bf2f 	b.w	24e6c <z_impl_k_mutex_unlock>
   2000e:	bf00      	nop
   20010:	2000ce68 	.word	0x2000ce68

00020014 <event_handler_list_is_empty>:
	return list->head;
   20014:	4b02      	ldr	r3, [pc, #8]	; (20020 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   20016:	6818      	ldr	r0, [r3, #0]
}
   20018:	fab0 f080 	clz	r0, r0
   2001c:	0940      	lsrs	r0, r0, #5
   2001e:	4770      	bx	lr
   20020:	2000e75c 	.word	0x2000e75c

00020024 <event_handler_list_append_handler>:
{
   20024:	b570      	push	{r4, r5, r6, lr}
   20026:	4606      	mov	r6, r0
	return list->head;
   20028:	4d12      	ldr	r5, [pc, #72]	; (20074 <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2002a:	f04f 32ff 	mov.w	r2, #4294967295
   2002e:	f04f 33ff 	mov.w	r3, #4294967295
   20032:	4811      	ldr	r0, [pc, #68]	; (20078 <event_handler_list_append_handler+0x54>)
   20034:	f004 fe4a 	bl	24ccc <z_impl_k_mutex_lock>
   20038:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2003a:	b944      	cbnz	r4, 2004e <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   2003c:	2008      	movs	r0, #8
   2003e:	f010 fbcc 	bl	307da <k_malloc>
	if (to_ins == NULL) {
   20042:	b948      	cbnz	r0, 20058 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   20044:	f7ff ffe0 	bl	20008 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   20048:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2004c:	e00d      	b.n	2006a <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   2004e:	6863      	ldr	r3, [r4, #4]
   20050:	429e      	cmp	r6, r3
   20052:	d007      	beq.n	20064 <event_handler_list_append_handler+0x40>
	return node->next;
   20054:	6824      	ldr	r4, [r4, #0]
   20056:	e7f0      	b.n	2003a <event_handler_list_append_handler+0x16>
   20058:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   2005a:	6046      	str	r6, [r0, #4]
	return list->tail;
   2005c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2005e:	b92b      	cbnz	r3, 2006c <event_handler_list_append_handler+0x48>
	list->head = node;
   20060:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   20064:	f7ff ffd0 	bl	20008 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   20068:	2000      	movs	r0, #0
}
   2006a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2006c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2006e:	6068      	str	r0, [r5, #4]
}
   20070:	e7f8      	b.n	20064 <event_handler_list_append_handler+0x40>
   20072:	bf00      	nop
   20074:	2000e75c 	.word	0x2000e75c
   20078:	2000ce68 	.word	0x2000ce68

0002007c <event_handler_list_dispatch>:
{
   2007c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2007e:	4c0f      	ldr	r4, [pc, #60]	; (200bc <event_handler_list_dispatch+0x40>)
   20080:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   20082:	6823      	ldr	r3, [r4, #0]
   20084:	b1c3      	cbz	r3, 200b8 <event_handler_list_dispatch+0x3c>
   20086:	f04f 33ff 	mov.w	r3, #4294967295
   2008a:	f04f 32ff 	mov.w	r2, #4294967295
   2008e:	480c      	ldr	r0, [pc, #48]	; (200c0 <event_handler_list_dispatch+0x44>)
   20090:	f004 fe1c 	bl	24ccc <z_impl_k_mutex_lock>
   20094:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20096:	b10b      	cbz	r3, 2009c <event_handler_list_dispatch+0x20>
	return node->next;
   20098:	681c      	ldr	r4, [r3, #0]
   2009a:	b91b      	cbnz	r3, 200a4 <event_handler_list_dispatch+0x28>
}
   2009c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   200a0:	f7ff bfb2 	b.w	20008 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   200a4:	4628      	mov	r0, r5
   200a6:	685b      	ldr	r3, [r3, #4]
   200a8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   200aa:	b11c      	cbz	r4, 200b4 <event_handler_list_dispatch+0x38>
   200ac:	6822      	ldr	r2, [r4, #0]
   200ae:	4623      	mov	r3, r4
   200b0:	4614      	mov	r4, r2
   200b2:	e7f2      	b.n	2009a <event_handler_list_dispatch+0x1e>
   200b4:	4622      	mov	r2, r4
   200b6:	e7fa      	b.n	200ae <event_handler_list_dispatch+0x32>
}
   200b8:	bd38      	pop	{r3, r4, r5, pc}
   200ba:	bf00      	nop
   200bc:	2000e75c 	.word	0x2000e75c
   200c0:	2000ce68 	.word	0x2000ce68

000200c4 <response_is_valid>:
{
   200c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200c6:	460e      	mov	r6, r1
   200c8:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   200ca:	4605      	mov	r5, r0
{
   200cc:	af00      	add	r7, sp, #0
	if ((response == NULL) || (check == NULL)) {
   200ce:	b100      	cbz	r0, 200d2 <response_is_valid+0xe>
   200d0:	b992      	cbnz	r2, 200f8 <response_is_valid+0x34>
		LOG_ERR("Invalid pointer provided");
   200d2:	466c      	mov	r4, sp
   200d4:	b088      	sub	sp, #32
   200d6:	466a      	mov	r2, sp
   200d8:	4b0e      	ldr	r3, [pc, #56]	; (20114 <response_is_valid+0x50>)
   200da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   200de:	6153      	str	r3, [r2, #20]
   200e0:	4b0d      	ldr	r3, [pc, #52]	; (20118 <response_is_valid+0x54>)
   200e2:	480e      	ldr	r0, [pc, #56]	; (2011c <response_is_valid+0x58>)
   200e4:	6193      	str	r3, [r2, #24]
   200e6:	2303      	movs	r3, #3
   200e8:	f842 3f10 	str.w	r3, [r2, #16]!
   200ec:	f00f f9cc 	bl	2f488 <z_log_msg_static_create.constprop.0>
   200f0:	46a5      	mov	sp, r4
		return false;
   200f2:	2000      	movs	r0, #0
}
   200f4:	46bd      	mov	sp, r7
   200f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((response_len < strlen(check)) ||
   200f8:	4610      	mov	r0, r2
   200fa:	f7e9 f892 	bl	9222 <strlen>
   200fe:	42b0      	cmp	r0, r6
   20100:	d8f7      	bhi.n	200f2 <response_is_valid+0x2e>
	    (memcmp(response, check, response_len) != 0)) {
   20102:	4632      	mov	r2, r6
   20104:	4621      	mov	r1, r4
   20106:	4628      	mov	r0, r5
   20108:	f010 fb8b 	bl	30822 <memcmp>
	if ((response_len < strlen(check)) ||
   2010c:	fab0 f080 	clz	r0, r0
   20110:	0940      	lsrs	r0, r0, #5
   20112:	e7ef      	b.n	200f4 <response_is_valid+0x30>
   20114:	000399da 	.word	0x000399da
   20118:	0003a52e 	.word	0x0003a52e
   2011c:	00031c34 	.word	0x00031c34

00020120 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   20120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char unit_str[4] = {0};
   20124:	f04f 0900 	mov.w	r9, #0
{
   20128:	b082      	sub	sp, #8
   2012a:	af00      	add	r7, sp, #0
   2012c:	4680      	mov	r8, r0
   2012e:	460e      	mov	r6, r1
   20130:	4614      	mov	r4, r2
   20132:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   20134:	f8c7 9004 	str.w	r9, [r7, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   20138:	f7e9 f873 	bl	9222 <strlen>
   2013c:	2808      	cmp	r0, #8
   2013e:	d11f      	bne.n	20180 <parse_psm+0x60>
   20140:	4630      	mov	r0, r6
   20142:	f7e9 f86e 	bl	9222 <strlen>
   20146:	2808      	cmp	r0, #8
   20148:	d11a      	bne.n	20180 <parse_psm+0x60>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2014a:	8832      	ldrh	r2, [r6, #0]
   2014c:	78b3      	ldrb	r3, [r6, #2]
   2014e:	80ba      	strh	r2, [r7, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   20150:	4649      	mov	r1, r9
   20152:	2202      	movs	r2, #2
   20154:	1d38      	adds	r0, r7, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   20156:	71bb      	strb	r3, [r7, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   20158:	f008 fd54 	bl	28c04 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   2015c:	2807      	cmp	r0, #7
   2015e:	d915      	bls.n	2018c <parse_psm+0x6c>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   20160:	466c      	mov	r4, sp
   20162:	b088      	sub	sp, #32
   20164:	466a      	mov	r2, sp
   20166:	4b37      	ldr	r3, [pc, #220]	; (20244 <parse_psm+0x124>)
   20168:	6153      	str	r3, [r2, #20]
   2016a:	4b37      	ldr	r3, [pc, #220]	; (20248 <parse_psm+0x128>)
   2016c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20170:	6193      	str	r3, [r2, #24]
   20172:	2303      	movs	r3, #3
   20174:	4835      	ldr	r0, [pc, #212]	; (2024c <parse_psm+0x12c>)
   20176:	f842 3f10 	str.w	r3, [r2, #16]!
   2017a:	f00f f985 	bl	2f488 <z_log_msg_static_create.constprop.0>
   2017e:	46a5      	mov	sp, r4
		return -EINVAL;
   20180:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   20184:	3708      	adds	r7, #8
   20186:	46bd      	mov	sp, r7
   20188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   2018c:	4b30      	ldr	r3, [pc, #192]	; (20250 <parse_psm+0x130>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   2018e:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   20190:	f853 a020 	ldr.w	sl, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20194:	4649      	mov	r1, r9
   20196:	1cf0      	adds	r0, r6, #3
   20198:	f008 fd34 	bl	28c04 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2019c:	f1ba 0f00 	cmp.w	sl, #0
   201a0:	d118      	bne.n	201d4 <parse_psm+0xb4>
   201a2:	f04f 33ff 	mov.w	r3, #4294967295
   201a6:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   201a8:	b1cc      	cbz	r4, 201de <parse_psm+0xbe>
   201aa:	4620      	mov	r0, r4
   201ac:	f7e9 f839 	bl	9222 <strlen>
   201b0:	2808      	cmp	r0, #8
   201b2:	d114      	bne.n	201de <parse_psm+0xbe>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   201b4:	8822      	ldrh	r2, [r4, #0]
   201b6:	78a3      	ldrb	r3, [r4, #2]
   201b8:	80ba      	strh	r2, [r7, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   201ba:	2100      	movs	r1, #0
   201bc:	2202      	movs	r2, #2
   201be:	1d38      	adds	r0, r7, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   201c0:	71bb      	strb	r3, [r7, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   201c2:	f008 fd1f 	bl	28c04 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   201c6:	2807      	cmp	r0, #7
   201c8:	d91b      	bls.n	20202 <parse_psm+0xe2>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   201ca:	466c      	mov	r4, sp
   201cc:	b088      	sub	sp, #32
   201ce:	466a      	mov	r2, sp
   201d0:	4b20      	ldr	r3, [pc, #128]	; (20254 <parse_psm+0x134>)
   201d2:	e7c9      	b.n	20168 <parse_psm+0x48>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   201d4:	fb0a f000 	mul.w	r0, sl, r0
   201d8:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   201da:	3001      	adds	r0, #1
   201dc:	d0e4      	beq.n	201a8 <parse_psm+0x88>
	memcpy(unit_str, active_time_str, unit_str_len);
   201de:	f8b8 2000 	ldrh.w	r2, [r8]
   201e2:	f898 3002 	ldrb.w	r3, [r8, #2]
   201e6:	80ba      	strh	r2, [r7, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   201e8:	2100      	movs	r1, #0
   201ea:	2202      	movs	r2, #2
   201ec:	1d38      	adds	r0, r7, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   201ee:	71bb      	strb	r3, [r7, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   201f0:	f008 fd08 	bl	28c04 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   201f4:	2807      	cmp	r0, #7
   201f6:	d913      	bls.n	20220 <parse_psm+0x100>
		LOG_ERR("Unable to parse active time string");
   201f8:	466c      	mov	r4, sp
   201fa:	b088      	sub	sp, #32
   201fc:	466a      	mov	r2, sp
   201fe:	4b16      	ldr	r3, [pc, #88]	; (20258 <parse_psm+0x138>)
   20200:	e7b2      	b.n	20168 <parse_psm+0x48>
		timer_unit = t3412_lookup[lut_idx];
   20202:	4b16      	ldr	r3, [pc, #88]	; (2025c <parse_psm+0x13c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20204:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   20206:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2020a:	2100      	movs	r1, #0
   2020c:	1ce0      	adds	r0, r4, #3
   2020e:	f008 fcf9 	bl	28c04 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20212:	b116      	cbz	r6, 2021a <parse_psm+0xfa>
   20214:	4346      	muls	r6, r0
   20216:	602e      	str	r6, [r5, #0]
   20218:	e7e1      	b.n	201de <parse_psm+0xbe>
   2021a:	f04f 36ff 	mov.w	r6, #4294967295
   2021e:	e7fa      	b.n	20216 <parse_psm+0xf6>
	timer_unit = t3324_lookup[lut_idx];
   20220:	4b0f      	ldr	r3, [pc, #60]	; (20260 <parse_psm+0x140>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20222:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   20224:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20228:	2100      	movs	r1, #0
   2022a:	f108 0003 	add.w	r0, r8, #3
   2022e:	f008 fce9 	bl	28c04 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20232:	b11c      	cbz	r4, 2023c <parse_psm+0x11c>
   20234:	4344      	muls	r4, r0
	return 0;
   20236:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20238:	606c      	str	r4, [r5, #4]
	return 0;
   2023a:	e7a3      	b.n	20184 <parse_psm+0x64>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2023c:	f04f 34ff 	mov.w	r4, #4294967295
   20240:	e7f9      	b.n	20236 <parse_psm+0x116>
   20242:	bf00      	nop
   20244:	00039b4e 	.word	0x00039b4e
   20248:	0003a519 	.word	0x0003a519
   2024c:	00031c34 	.word	0x00031c34
   20250:	000327d0 	.word	0x000327d0
   20254:	00039b87 	.word	0x00039b87
   20258:	00039bb7 	.word	0x00039bb7
   2025c:	000327b0 	.word	0x000327b0
   20260:	000327b0 	.word	0x000327b0

00020264 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   20264:	2300      	movs	r3, #0
{
   20266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2026a:	b084      	sub	sp, #16
   2026c:	af00      	add	r7, sp, #0
   2026e:	4680      	mov	r8, r0
   20270:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   20272:	f107 0008 	add.w	r0, r7, #8
   20276:	2104      	movs	r1, #4
{
   20278:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   2027a:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2027e:	f00e ffb3 	bl	2f1e8 <at_params_list_init>
	if (err) {
   20282:	4604      	mov	r4, r0
   20284:	b1a8      	cbz	r0, 202b2 <parse_rrc_mode+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20286:	466d      	mov	r5, sp
   20288:	b088      	sub	sp, #32
   2028a:	466a      	mov	r2, sp
   2028c:	4b2c      	ldr	r3, [pc, #176]	; (20340 <parse_rrc_mode+0xdc>)
   2028e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20292:	6153      	str	r3, [r2, #20]
   20294:	4b2b      	ldr	r3, [pc, #172]	; (20344 <parse_rrc_mode+0xe0>)
   20296:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2029a:	2304      	movs	r3, #4
   2029c:	482a      	ldr	r0, [pc, #168]	; (20348 <parse_rrc_mode+0xe4>)
   2029e:	f842 3f10 	str.w	r3, [r2, #16]!
   202a2:	f00f f8f1 	bl	2f488 <z_log_msg_static_create.constprop.0>
   202a6:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   202a8:	4620      	mov	r0, r4
   202aa:	3710      	adds	r7, #16
   202ac:	46bd      	mov	sp, r7
   202ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   202b2:	4601      	mov	r1, r0
   202b4:	f107 0208 	add.w	r2, r7, #8
   202b8:	4640      	mov	r0, r8
   202ba:	f00e ff92 	bl	2f1e2 <at_parser_params_from_str>
	if (err) {
   202be:	4604      	mov	r4, r0
   202c0:	b1a8      	cbz	r0, 202ee <parse_rrc_mode+0x8a>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   202c2:	466d      	mov	r5, sp
   202c4:	b088      	sub	sp, #32
   202c6:	466a      	mov	r2, sp
   202c8:	4b20      	ldr	r3, [pc, #128]	; (2034c <parse_rrc_mode+0xe8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   202ca:	6153      	str	r3, [r2, #20]
   202cc:	4b1d      	ldr	r3, [pc, #116]	; (20344 <parse_rrc_mode+0xe0>)
   202ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   202d2:	e9c2 3406 	strd	r3, r4, [r2, #24]
   202d6:	2304      	movs	r3, #4
   202d8:	481b      	ldr	r0, [pc, #108]	; (20348 <parse_rrc_mode+0xe4>)
   202da:	f842 3f10 	str.w	r3, [r2, #16]!
   202de:	f00f f8d3 	bl	2f488 <z_log_msg_static_create.constprop.0>
   202e2:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   202e4:	f107 0008 	add.w	r0, r7, #8
   202e8:	f00e ff91 	bl	2f20e <at_params_list_free>
	return err;
   202ec:	e7dc      	b.n	202a8 <parse_rrc_mode+0x44>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   202ee:	4631      	mov	r1, r6
   202f0:	1d3a      	adds	r2, r7, #4
   202f2:	f107 0008 	add.w	r0, r7, #8
   202f6:	f00f f83e 	bl	2f376 <at_params_int_get>
	if (err) {
   202fa:	4604      	mov	r4, r0
   202fc:	b120      	cbz	r0, 20308 <parse_rrc_mode+0xa4>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   202fe:	466d      	mov	r5, sp
   20300:	b088      	sub	sp, #32
   20302:	466a      	mov	r2, sp
   20304:	4b12      	ldr	r3, [pc, #72]	; (20350 <parse_rrc_mode+0xec>)
   20306:	e7e0      	b.n	202ca <parse_rrc_mode+0x66>
	if (temp_mode == 0) {
   20308:	687b      	ldr	r3, [r7, #4]
   2030a:	b11b      	cbz	r3, 20314 <parse_rrc_mode+0xb0>
	} else if (temp_mode == 1) {
   2030c:	2b01      	cmp	r3, #1
   2030e:	d103      	bne.n	20318 <parse_rrc_mode+0xb4>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   20310:	702b      	strb	r3, [r5, #0]
   20312:	e7e7      	b.n	202e4 <parse_rrc_mode+0x80>
   20314:	4603      	mov	r3, r0
   20316:	e7fb      	b.n	20310 <parse_rrc_mode+0xac>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   20318:	466c      	mov	r4, sp
   2031a:	b088      	sub	sp, #32
   2031c:	466a      	mov	r2, sp
   2031e:	490d      	ldr	r1, [pc, #52]	; (20354 <parse_rrc_mode+0xf0>)
   20320:	4809      	ldr	r0, [pc, #36]	; (20348 <parse_rrc_mode+0xe4>)
   20322:	6151      	str	r1, [r2, #20]
   20324:	4907      	ldr	r1, [pc, #28]	; (20344 <parse_rrc_mode+0xe0>)
   20326:	e9c2 1306 	strd	r1, r3, [r2, #24]
   2032a:	2304      	movs	r3, #4
   2032c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20330:	f842 3f10 	str.w	r3, [r2, #16]!
   20334:	f00f f8a8 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20338:	46a5      	mov	sp, r4
		err = -EINVAL;
   2033a:	f06f 0415 	mvn.w	r4, #21
   2033e:	e7d1      	b.n	202e4 <parse_rrc_mode+0x80>
   20340:	000399f7 	.word	0x000399f7
   20344:	0003a50a 	.word	0x0003a50a
   20348:	00031c34 	.word	0x00031c34
   2034c:	00039bde 	.word	0x00039bde
   20350:	00039c0d 	.word	0x00039c0d
   20354:	00039c3a 	.word	0x00039c3a

00020358 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   20358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2035c:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2035e:	2300      	movs	r3, #0
{
   20360:	b08a      	sub	sp, #40	; 0x28
   20362:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   20364:	60fb      	str	r3, [r7, #12]
   20366:	823b      	strh	r3, [r7, #16]
   20368:	74bb      	strb	r3, [r7, #18]
{
   2036a:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   2036c:	2309      	movs	r3, #9
   2036e:	2207      	movs	r2, #7
{
   20370:	4680      	mov	r8, r0
   20372:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20374:	f107 0014 	add.w	r0, r7, #20
   20378:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   2037a:	e9c7 2300 	strd	r2, r3, [r7]
{
   2037e:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20382:	f00e ff31 	bl	2f1e8 <at_params_list_init>
	if (err) {
   20386:	4604      	mov	r4, r0
   20388:	b1a8      	cbz	r0, 203b6 <parse_cereg+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2038a:	466d      	mov	r5, sp
   2038c:	b088      	sub	sp, #32
   2038e:	466a      	mov	r2, sp
   20390:	4b7c      	ldr	r3, [pc, #496]	; (20584 <parse_cereg+0x22c>)
   20392:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20396:	6153      	str	r3, [r2, #20]
   20398:	4b7b      	ldr	r3, [pc, #492]	; (20588 <parse_cereg+0x230>)
   2039a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2039e:	2304      	movs	r3, #4
   203a0:	487a      	ldr	r0, [pc, #488]	; (2058c <parse_cereg+0x234>)
   203a2:	f842 3f10 	str.w	r3, [r2, #16]!
   203a6:	f00f f86f 	bl	2f488 <z_log_msg_static_create.constprop.0>
   203aa:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   203ac:	4620      	mov	r0, r4
   203ae:	3728      	adds	r7, #40	; 0x28
   203b0:	46bd      	mov	sp, r7
   203b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   203b6:	4601      	mov	r1, r0
   203b8:	f107 0214 	add.w	r2, r7, #20
   203bc:	4640      	mov	r0, r8
   203be:	f00e ff10 	bl	2f1e2 <at_parser_params_from_str>
	if (err) {
   203c2:	4604      	mov	r4, r0
   203c4:	b1a8      	cbz	r0, 203f2 <parse_cereg+0x9a>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   203c6:	466d      	mov	r5, sp
   203c8:	b088      	sub	sp, #32
   203ca:	466a      	mov	r2, sp
   203cc:	4b70      	ldr	r3, [pc, #448]	; (20590 <parse_cereg+0x238>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   203ce:	6153      	str	r3, [r2, #20]
   203d0:	4b6d      	ldr	r3, [pc, #436]	; (20588 <parse_cereg+0x230>)
   203d2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   203d6:	e9c2 3406 	strd	r3, r4, [r2, #24]
   203da:	2304      	movs	r3, #4
   203dc:	486b      	ldr	r0, [pc, #428]	; (2058c <parse_cereg+0x234>)
   203de:	f842 3f10 	str.w	r3, [r2, #16]!
   203e2:	f00f f851 	bl	2f488 <z_log_msg_static_create.constprop.0>
   203e6:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   203e8:	f107 0014 	add.w	r0, r7, #20
   203ec:	f00e ff0f 	bl	2f20e <at_params_list_free>
	return err;
   203f0:	e7dc      	b.n	203ac <parse_cereg+0x54>
	err = at_params_string_get(&resp_list,
   203f2:	4601      	mov	r1, r0
   203f4:	463b      	mov	r3, r7
   203f6:	f107 020c 	add.w	r2, r7, #12
   203fa:	f107 0014 	add.w	r0, r7, #20
   203fe:	f00e ffe8 	bl	2f3d2 <at_params_string_get>
	if (err) {
   20402:	4604      	mov	r4, r0
   20404:	b120      	cbz	r0, 20410 <parse_cereg+0xb8>
		LOG_ERR("Could not get response prefix, error: %d", err);
   20406:	466d      	mov	r5, sp
   20408:	b088      	sub	sp, #32
   2040a:	466a      	mov	r2, sp
   2040c:	4b61      	ldr	r3, [pc, #388]	; (20594 <parse_cereg+0x23c>)
   2040e:	e7de      	b.n	203ce <parse_cereg+0x76>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20410:	4a61      	ldr	r2, [pc, #388]	; (20598 <parse_cereg+0x240>)
   20412:	6839      	ldr	r1, [r7, #0]
   20414:	f107 000c 	add.w	r0, r7, #12
   20418:	f7ff fe54 	bl	200c4 <response_is_valid>
   2041c:	2800      	cmp	r0, #0
   2041e:	d0e3      	beq.n	203e8 <parse_cereg+0x90>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   20420:	f107 021c 	add.w	r2, r7, #28
   20424:	f1c9 0102 	rsb	r1, r9, #2
   20428:	f107 0014 	add.w	r0, r7, #20
   2042c:	f00e ffa3 	bl	2f376 <at_params_int_get>
	if (err) {
   20430:	f1b0 0800 	subs.w	r8, r0, #0
   20434:	d16b      	bne.n	2050e <parse_cereg+0x1b6>
	switch (reg_status) {
   20436:	69fb      	ldr	r3, [r7, #28]
   20438:	2b08      	cmp	r3, #8
   2043a:	d03f      	beq.n	204bc <parse_cereg+0x164>
   2043c:	dc27      	bgt.n	2048e <parse_cereg+0x136>
   2043e:	2b05      	cmp	r3, #5
   20440:	d93c      	bls.n	204bc <parse_cereg+0x164>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   20442:	466c      	mov	r4, sp
   20444:	b088      	sub	sp, #32
   20446:	466a      	mov	r2, sp
   20448:	4954      	ldr	r1, [pc, #336]	; (2059c <parse_cereg+0x244>)
   2044a:	4850      	ldr	r0, [pc, #320]	; (2058c <parse_cereg+0x234>)
   2044c:	6151      	str	r1, [r2, #20]
   2044e:	4954      	ldr	r1, [pc, #336]	; (205a0 <parse_cereg+0x248>)
		return -EINVAL;
   20450:	f06f 0815 	mvn.w	r8, #21
		LOG_ERR("Invalid network registration status: %d", reg_status);
   20454:	e9c2 1306 	strd	r1, r3, [r2, #24]
   20458:	2304      	movs	r3, #4
   2045a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2045e:	f842 3f10 	str.w	r3, [r2, #16]!
   20462:	f00f f811 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20466:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   20468:	466c      	mov	r4, sp
   2046a:	b088      	sub	sp, #32
   2046c:	466a      	mov	r2, sp
   2046e:	4b4d      	ldr	r3, [pc, #308]	; (205a4 <parse_cereg+0x24c>)
   20470:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20474:	6153      	str	r3, [r2, #20]
   20476:	4b44      	ldr	r3, [pc, #272]	; (20588 <parse_cereg+0x230>)
   20478:	4844      	ldr	r0, [pc, #272]	; (2058c <parse_cereg+0x234>)
   2047a:	e9c2 3806 	strd	r3, r8, [r2, #24]
   2047e:	2304      	movs	r3, #4
   20480:	f842 3f10 	str.w	r3, [r2, #16]!
   20484:	f00f f800 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20488:	46a5      	mov	sp, r4
		goto clean_exit;
   2048a:	4644      	mov	r4, r8
   2048c:	e7ac      	b.n	203e8 <parse_cereg+0x90>
	switch (reg_status) {
   2048e:	2b5a      	cmp	r3, #90	; 0x5a
   20490:	d1d7      	bne.n	20442 <parse_cereg+0xea>
	if (reg_status) {
   20492:	b106      	cbz	r6, 20496 <parse_cereg+0x13e>
		*reg_status = status;
   20494:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20496:	2d00      	cmp	r5, #0
   20498:	d142      	bne.n	20520 <parse_cereg+0x1c8>
	if (lte_mode) {
   2049a:	f1ba 0f00 	cmp.w	sl, #0
   2049e:	d0a3      	beq.n	203e8 <parse_cereg+0x90>
		err = at_params_int_get(&resp_list,
   204a0:	f107 0208 	add.w	r2, r7, #8
   204a4:	f1c9 0105 	rsb	r1, r9, #5
   204a8:	f107 0014 	add.w	r0, r7, #20
   204ac:	f00e ff63 	bl	2f376 <at_params_int_get>
		if (err) {
   204b0:	2800      	cmp	r0, #0
   204b2:	d165      	bne.n	20580 <parse_cereg+0x228>
			*lte_mode = mode;
   204b4:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   204b6:	f88a 3000 	strb.w	r3, [sl]
   204ba:	e795      	b.n	203e8 <parse_cereg+0x90>
	if (reg_status) {
   204bc:	bb2e      	cbnz	r6, 2050a <parse_cereg+0x1b2>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   204be:	2d00      	cmp	r5, #0
   204c0:	d0eb      	beq.n	2049a <parse_cereg+0x142>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   204c2:	f107 0014 	add.w	r0, r7, #20
   204c6:	f00e ffa7 	bl	2f418 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   204ca:	2803      	cmp	r0, #3
   204cc:	d928      	bls.n	20520 <parse_cereg+0x1c8>
		err = at_params_string_get(
   204ce:	1d3b      	adds	r3, r7, #4
   204d0:	f107 021c 	add.w	r2, r7, #28
   204d4:	f1c9 0103 	rsb	r1, r9, #3
   204d8:	f107 0014 	add.w	r0, r7, #20
   204dc:	f00e ff79 	bl	2f3d2 <at_params_string_get>
		if (err) {
   204e0:	4606      	mov	r6, r0
   204e2:	b310      	cbz	r0, 2052a <parse_cereg+0x1d2>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   204e4:	466c      	mov	r4, sp
   204e6:	b088      	sub	sp, #32
   204e8:	466a      	mov	r2, sp
   204ea:	4b2f      	ldr	r3, [pc, #188]	; (205a8 <parse_cereg+0x250>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   204ec:	6153      	str	r3, [r2, #20]
   204ee:	4b26      	ldr	r3, [pc, #152]	; (20588 <parse_cereg+0x230>)
   204f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   204f4:	e9c2 3606 	strd	r3, r6, [r2, #24]
   204f8:	2304      	movs	r3, #4
   204fa:	4824      	ldr	r0, [pc, #144]	; (2058c <parse_cereg+0x234>)
   204fc:	f842 3f10 	str.w	r3, [r2, #16]!
   20500:	f00e ffc2 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20504:	46a5      	mov	sp, r4
			goto clean_exit;
   20506:	4634      	mov	r4, r6
   20508:	e76e      	b.n	203e8 <parse_cereg+0x90>
		*reg_status = status;
   2050a:	7033      	strb	r3, [r6, #0]
   2050c:	e7d7      	b.n	204be <parse_cereg+0x166>
	if (status < 0) {
   2050e:	dbab      	blt.n	20468 <parse_cereg+0x110>
	if (reg_status) {
   20510:	b10e      	cbz	r6, 20516 <parse_cereg+0x1be>
		*reg_status = status;
   20512:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20516:	2d00      	cmp	r5, #0
   20518:	d0bf      	beq.n	2049a <parse_cereg+0x142>
   2051a:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   2051e:	d1d0      	bne.n	204c2 <parse_cereg+0x16a>
		cell->tac = UINT32_MAX;
   20520:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20524:	e9c5 3302 	strd	r3, r3, [r5, #8]
   20528:	e7b7      	b.n	2049a <parse_cereg+0x142>
		str_buf[len] = '\0';
   2052a:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   2052c:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2052e:	3328      	adds	r3, #40	; 0x28
   20530:	443b      	add	r3, r7
   20532:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   20536:	2210      	movs	r2, #16
   20538:	f107 001c 	add.w	r0, r7, #28
   2053c:	f008 fb62 	bl	28c04 <strtoul>
		len = sizeof(str_buf) - 1;
   20540:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   20542:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   20544:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   20546:	f107 021c 	add.w	r2, r7, #28
   2054a:	1d3b      	adds	r3, r7, #4
   2054c:	f1c9 0104 	rsb	r1, r9, #4
   20550:	f107 0014 	add.w	r0, r7, #20
   20554:	f00e ff3d 	bl	2f3d2 <at_params_string_get>
		if (err) {
   20558:	4606      	mov	r6, r0
   2055a:	b120      	cbz	r0, 20566 <parse_cereg+0x20e>
			LOG_ERR("Could not get cell ID, error: %d", err);
   2055c:	466c      	mov	r4, sp
   2055e:	b088      	sub	sp, #32
   20560:	466a      	mov	r2, sp
   20562:	4b12      	ldr	r3, [pc, #72]	; (205ac <parse_cereg+0x254>)
   20564:	e7c2      	b.n	204ec <parse_cereg+0x194>
		str_buf[len] = '\0';
   20566:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   20568:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2056a:	3328      	adds	r3, #40	; 0x28
   2056c:	443b      	add	r3, r7
   2056e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   20572:	2210      	movs	r2, #16
   20574:	f107 001c 	add.w	r0, r7, #28
   20578:	f008 fb44 	bl	28c04 <strtoul>
   2057c:	60a8      	str	r0, [r5, #8]
   2057e:	e78c      	b.n	2049a <parse_cereg+0x142>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   20580:	2300      	movs	r3, #0
   20582:	e798      	b.n	204b6 <parse_cereg+0x15e>
   20584:	000399f7 	.word	0x000399f7
   20588:	0003a4fe 	.word	0x0003a4fe
   2058c:	00031c34 	.word	0x00031c34
   20590:	00039c5a 	.word	0x00039c5a
   20594:	00039c8b 	.word	0x00039c8b
   20598:	00039976 	.word	0x00039976
   2059c:	00039cb8 	.word	0x00039cb8
   205a0:	0003a4ec 	.word	0x0003a4ec
   205a4:	0003942f 	.word	0x0003942f
   205a8:	00039ce4 	.word	0x00039ce4
   205ac:	00039d14 	.word	0x00039d14

000205b0 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   205b0:	2300      	movs	r3, #0
{
   205b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   205b4:	b083      	sub	sp, #12
   205b6:	af00      	add	r7, sp, #0
   205b8:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   205ba:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   205bc:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   205c0:	2900      	cmp	r1, #0
   205c2:	d05f      	beq.n	20684 <parse_xt3412+0xd4>
   205c4:	2800      	cmp	r0, #0
   205c6:	d05d      	beq.n	20684 <parse_xt3412+0xd4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   205c8:	2104      	movs	r1, #4
   205ca:	4638      	mov	r0, r7
   205cc:	f00e fe0c 	bl	2f1e8 <at_params_list_init>
	if (err) {
   205d0:	4604      	mov	r4, r0
   205d2:	b1a0      	cbz	r0, 205fe <parse_xt3412+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   205d4:	466d      	mov	r5, sp
   205d6:	b088      	sub	sp, #32
   205d8:	466a      	mov	r2, sp
   205da:	4b2c      	ldr	r3, [pc, #176]	; (2068c <parse_xt3412+0xdc>)
   205dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   205e0:	6153      	str	r3, [r2, #20]
   205e2:	4b2b      	ldr	r3, [pc, #172]	; (20690 <parse_xt3412+0xe0>)
   205e4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   205e8:	2304      	movs	r3, #4
   205ea:	482a      	ldr	r0, [pc, #168]	; (20694 <parse_xt3412+0xe4>)
   205ec:	f842 3f10 	str.w	r3, [r2, #16]!
   205f0:	f00e ff4a 	bl	2f488 <z_log_msg_static_create.constprop.0>
   205f4:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   205f6:	4620      	mov	r0, r4
   205f8:	370c      	adds	r7, #12
   205fa:	46bd      	mov	sp, r7
   205fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   205fe:	4601      	mov	r1, r0
   20600:	463a      	mov	r2, r7
   20602:	4630      	mov	r0, r6
   20604:	f00e fded 	bl	2f1e2 <at_parser_params_from_str>
	if (err) {
   20608:	4604      	mov	r4, r0
   2060a:	b1a0      	cbz	r0, 20636 <parse_xt3412+0x86>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   2060c:	466d      	mov	r5, sp
   2060e:	b088      	sub	sp, #32
   20610:	466a      	mov	r2, sp
   20612:	4b21      	ldr	r3, [pc, #132]	; (20698 <parse_xt3412+0xe8>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   20614:	6153      	str	r3, [r2, #20]
   20616:	4b1e      	ldr	r3, [pc, #120]	; (20690 <parse_xt3412+0xe0>)
   20618:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2061c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   20620:	2304      	movs	r3, #4
   20622:	481c      	ldr	r0, [pc, #112]	; (20694 <parse_xt3412+0xe4>)
   20624:	f842 3f10 	str.w	r3, [r2, #16]!
   20628:	f00e ff2e 	bl	2f488 <z_log_msg_static_create.constprop.0>
   2062c:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   2062e:	4638      	mov	r0, r7
   20630:	f00e fded 	bl	2f20e <at_params_list_free>
	return err;
   20634:	e7df      	b.n	205f6 <parse_xt3412+0x46>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   20636:	462a      	mov	r2, r5
   20638:	2102      	movs	r1, #2
   2063a:	4638      	mov	r0, r7
   2063c:	f00e feb4 	bl	2f3a8 <at_params_int64_get>
	if (err) {
   20640:	4604      	mov	r4, r0
   20642:	b120      	cbz	r0, 2064e <parse_xt3412+0x9e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   20644:	466d      	mov	r5, sp
   20646:	b088      	sub	sp, #32
   20648:	466a      	mov	r2, sp
   2064a:	4b14      	ldr	r3, [pc, #80]	; (2069c <parse_xt3412+0xec>)
   2064c:	e7e2      	b.n	20614 <parse_xt3412+0x64>
	if ((*time > T3412_MAX) || *time < 0) {
   2064e:	4914      	ldr	r1, [pc, #80]	; (206a0 <parse_xt3412+0xf0>)
   20650:	e9d5 3200 	ldrd	r3, r2, [r5]
   20654:	4299      	cmp	r1, r3
   20656:	f04f 0308 	mov.w	r3, #8
   2065a:	4193      	sbcs	r3, r2
   2065c:	d2e7      	bcs.n	2062e <parse_xt3412+0x7e>
		LOG_WRN("Parsed time parameter not within valid range");
   2065e:	466c      	mov	r4, sp
   20660:	b088      	sub	sp, #32
   20662:	466a      	mov	r2, sp
   20664:	4b0f      	ldr	r3, [pc, #60]	; (206a4 <parse_xt3412+0xf4>)
   20666:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2066a:	6153      	str	r3, [r2, #20]
   2066c:	4b08      	ldr	r3, [pc, #32]	; (20690 <parse_xt3412+0xe0>)
   2066e:	4809      	ldr	r0, [pc, #36]	; (20694 <parse_xt3412+0xe4>)
   20670:	6193      	str	r3, [r2, #24]
   20672:	2303      	movs	r3, #3
   20674:	f842 3f10 	str.w	r3, [r2, #16]!
   20678:	f00e ff06 	bl	2f488 <z_log_msg_static_create.constprop.0>
   2067c:	46a5      	mov	sp, r4
		err = -EINVAL;
   2067e:	f06f 0415 	mvn.w	r4, #21
   20682:	e7d4      	b.n	2062e <parse_xt3412+0x7e>
		return -EINVAL;
   20684:	f06f 0415 	mvn.w	r4, #21
   20688:	e7b5      	b.n	205f6 <parse_xt3412+0x46>
   2068a:	bf00      	nop
   2068c:	000399f7 	.word	0x000399f7
   20690:	0003a4df 	.word	0x0003a4df
   20694:	00031c34 	.word	0x00031c34
   20698:	00039d39 	.word	0x00039d39
   2069c:	00039d6a 	.word	0x00039d6a
   206a0:	5099e000 	.word	0x5099e000
   206a4:	00039d9b 	.word	0x00039d9b

000206a8 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   206a8:	b598      	push	{r3, r4, r7, lr}
   206aa:	af00      	add	r7, sp, #0
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   206ac:	b990      	cbnz	r0, 206d4 <neighborcell_count_get+0x2c>
		LOG_ERR("at_response is NULL, can't get cell count");
   206ae:	466c      	mov	r4, sp
   206b0:	b088      	sub	sp, #32
   206b2:	466a      	mov	r2, sp
   206b4:	4b10      	ldr	r3, [pc, #64]	; (206f8 <neighborcell_count_get+0x50>)
   206b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   206ba:	6153      	str	r3, [r2, #20]
   206bc:	4b0f      	ldr	r3, [pc, #60]	; (206fc <neighborcell_count_get+0x54>)
   206be:	4810      	ldr	r0, [pc, #64]	; (20700 <neighborcell_count_get+0x58>)
   206c0:	6193      	str	r3, [r2, #24]
   206c2:	2303      	movs	r3, #3
   206c4:	f842 3f10 	str.w	r3, [r2, #16]!
   206c8:	f00e fede 	bl	2f488 <z_log_msg_static_create.constprop.0>
   206cc:	46a5      	mov	sp, r4
		return 0;
   206ce:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   206d0:	46bd      	mov	sp, r7
   206d2:	bd98      	pop	{r3, r4, r7, pc}
	uint32_t count = 0;
   206d4:	2300      	movs	r3, #0
   206d6:	3801      	subs	r0, #1
		if (*str == c) {
   206d8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   206dc:	2a2c      	cmp	r2, #44	; 0x2c
   206de:	d101      	bne.n	206e4 <neighborcell_count_get+0x3c>
			count++;
   206e0:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   206e2:	e7f9      	b.n	206d8 <neighborcell_count_get+0x30>
   206e4:	2a00      	cmp	r2, #0
   206e6:	d1f7      	bne.n	206d8 <neighborcell_count_get+0x30>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   206e8:	2b0a      	cmp	r3, #10
   206ea:	d9f0      	bls.n	206ce <neighborcell_count_get+0x26>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   206ec:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   206f0:	2305      	movs	r3, #5
   206f2:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   206f6:	e7eb      	b.n	206d0 <neighborcell_count_get+0x28>
   206f8:	00039dcc 	.word	0x00039dcc
   206fc:	0003a4c8 	.word	0x0003a4c8
   20700:	00031c34 	.word	0x00031c34

00020704 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   20704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   20708:	230b      	movs	r3, #11
{
   2070a:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2070c:	2100      	movs	r1, #0
{
   2070e:	4680      	mov	r8, r0
   20710:	b08c      	sub	sp, #48	; 0x30
   20712:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20714:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   20718:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2071a:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   2071e:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   20720:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20724:	2b2c      	cmp	r3, #44	; 0x2c
   20726:	d101      	bne.n	2072c <parse_ncellmeas+0x28>
			count++;
   20728:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   2072a:	e7f9      	b.n	20720 <parse_ncellmeas+0x1c>
   2072c:	2b00      	cmp	r3, #0
   2072e:	d1f7      	bne.n	20720 <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   20730:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20734:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   20738:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2073a:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   2073c:	f107 001c 	add.w	r0, r7, #28
   20740:	f00e fd52 	bl	2f1e8 <at_params_list_init>
	if (err) {
   20744:	4604      	mov	r4, r0
   20746:	b1a8      	cbz	r0, 20774 <parse_ncellmeas+0x70>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20748:	466d      	mov	r5, sp
   2074a:	b088      	sub	sp, #32
   2074c:	466a      	mov	r2, sp
   2074e:	4bb7      	ldr	r3, [pc, #732]	; (20a2c <parse_ncellmeas+0x328>)
   20750:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20754:	6153      	str	r3, [r2, #20]
   20756:	4bb6      	ldr	r3, [pc, #728]	; (20a30 <parse_ncellmeas+0x32c>)
   20758:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2075c:	2304      	movs	r3, #4
   2075e:	48b5      	ldr	r0, [pc, #724]	; (20a34 <parse_ncellmeas+0x330>)
   20760:	f842 3f10 	str.w	r3, [r2, #16]!
   20764:	f00e fe90 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20768:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2076a:	4620      	mov	r0, r4
   2076c:	3730      	adds	r7, #48	; 0x30
   2076e:	46bd      	mov	sp, r7
   20770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   20774:	4601      	mov	r1, r0
   20776:	f107 021c 	add.w	r2, r7, #28
   2077a:	4640      	mov	r0, r8
   2077c:	f00e fd31 	bl	2f1e2 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   20780:	4604      	mov	r4, r0
   20782:	b1b8      	cbz	r0, 207b4 <parse_ncellmeas+0xb0>
   20784:	1dc3      	adds	r3, r0, #7
   20786:	d026      	beq.n	207d6 <parse_ncellmeas+0xd2>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   20788:	466d      	mov	r5, sp
   2078a:	b088      	sub	sp, #32
   2078c:	466a      	mov	r2, sp
   2078e:	4baa      	ldr	r3, [pc, #680]	; (20a38 <parse_ncellmeas+0x334>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   20790:	6153      	str	r3, [r2, #20]
   20792:	4ba7      	ldr	r3, [pc, #668]	; (20a30 <parse_ncellmeas+0x32c>)
   20794:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20798:	e9c2 3406 	strd	r3, r4, [r2, #24]
   2079c:	2304      	movs	r3, #4
   2079e:	48a5      	ldr	r0, [pc, #660]	; (20a34 <parse_ncellmeas+0x330>)
   207a0:	f842 3f10 	str.w	r3, [r2, #16]!
   207a4:	f00e fe70 	bl	2f488 <z_log_msg_static_create.constprop.0>
   207a8:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   207aa:	f107 001c 	add.w	r0, r7, #28
   207ae:	f00e fd2e 	bl	2f20e <at_params_list_free>
	return err;
   207b2:	e7da      	b.n	2076a <parse_ncellmeas+0x66>
	bool incomplete = false;
   207b4:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   207b6:	2100      	movs	r1, #0
   207b8:	f107 0310 	add.w	r3, r7, #16
   207bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
   207c0:	f107 001c 	add.w	r0, r7, #28
   207c4:	f00e fe05 	bl	2f3d2 <at_params_string_get>
	if (err) {
   207c8:	4604      	mov	r4, r0
   207ca:	b130      	cbz	r0, 207da <parse_ncellmeas+0xd6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   207cc:	466d      	mov	r5, sp
   207ce:	b088      	sub	sp, #32
   207d0:	466a      	mov	r2, sp
   207d2:	4b9a      	ldr	r3, [pc, #616]	; (20a3c <parse_ncellmeas+0x338>)
   207d4:	e7dc      	b.n	20790 <parse_ncellmeas+0x8c>
		incomplete = true;
   207d6:	2601      	movs	r6, #1
   207d8:	e7ed      	b.n	207b6 <parse_ncellmeas+0xb2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   207da:	4a99      	ldr	r2, [pc, #612]	; (20a40 <parse_ncellmeas+0x33c>)
   207dc:	6939      	ldr	r1, [r7, #16]
   207de:	f107 0024 	add.w	r0, r7, #36	; 0x24
   207e2:	f7ff fc6f 	bl	200c4 <response_is_valid>
   207e6:	2800      	cmp	r0, #0
   207e8:	f000 80b9 	beq.w	2095e <parse_ncellmeas+0x25a>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   207ec:	2101      	movs	r1, #1
   207ee:	1d3a      	adds	r2, r7, #4
   207f0:	f107 001c 	add.w	r0, r7, #28
   207f4:	f00e fdbf 	bl	2f376 <at_params_int_get>
	if (err) {
   207f8:	4604      	mov	r4, r0
   207fa:	2800      	cmp	r0, #0
   207fc:	d1d5      	bne.n	207aa <parse_ncellmeas+0xa6>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   207fe:	687b      	ldr	r3, [r7, #4]
   20800:	2b00      	cmp	r3, #0
   20802:	f040 8110 	bne.w	20a26 <parse_ncellmeas+0x322>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   20806:	2102      	movs	r1, #2
   20808:	f107 0208 	add.w	r2, r7, #8
   2080c:	f107 001c 	add.w	r0, r7, #28
   20810:	f00e fe63 	bl	2f4da <string_param_to_int.constprop.0>
	if (err) {
   20814:	4604      	mov	r4, r0
   20816:	2800      	cmp	r0, #0
   20818:	d1c7      	bne.n	207aa <parse_ncellmeas+0xa6>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   2081a:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   2081c:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20824:	bfa4      	itt	ge
   20826:	f04f 33ff 	movge.w	r3, #4294967295
   2082a:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   2082c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   2082e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   20830:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20832:	f107 0214 	add.w	r2, r7, #20
   20836:	f107 030c 	add.w	r3, r7, #12
   2083a:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   2083e:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20842:	f00e fdc6 	bl	2f3d2 <at_params_string_get>
	if (err) {
   20846:	4604      	mov	r4, r0
   20848:	2800      	cmp	r0, #0
   2084a:	d1ae      	bne.n	207aa <parse_ncellmeas+0xa6>
	tmp_str[len] = '\0';
   2084c:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   2084e:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   20850:	3330      	adds	r3, #48	; 0x30
   20852:	443b      	add	r3, r7
   20854:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   20858:	1d2a      	adds	r2, r5, #4
   2085a:	f107 0017 	add.w	r0, r7, #23
   2085e:	f00e fe16 	bl	2f48e <string_to_int>
	if (err) {
   20862:	4604      	mov	r4, r0
   20864:	2800      	cmp	r0, #0
   20866:	d1a0      	bne.n	207aa <parse_ncellmeas+0xa6>
	tmp_str[3] = '\0';
   20868:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   2086a:	462a      	mov	r2, r5
   2086c:	210a      	movs	r1, #10
   2086e:	f107 0014 	add.w	r0, r7, #20
   20872:	f00e fe0c 	bl	2f48e <string_to_int>
	if (err) {
   20876:	4604      	mov	r4, r0
   20878:	2800      	cmp	r0, #0
   2087a:	d196      	bne.n	207aa <parse_ncellmeas+0xa6>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   2087c:	2104      	movs	r1, #4
   2087e:	f107 0208 	add.w	r2, r7, #8
   20882:	f107 001c 	add.w	r0, r7, #28
   20886:	f00e fe28 	bl	2f4da <string_param_to_int.constprop.0>
	if (err) {
   2088a:	4604      	mov	r4, r0
   2088c:	2800      	cmp	r0, #0
   2088e:	d18c      	bne.n	207aa <parse_ncellmeas+0xa6>
	cells->current_cell.tac = tmp;
   20890:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20892:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   20894:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20896:	f107 0208 	add.w	r2, r7, #8
   2089a:	f107 001c 	add.w	r0, r7, #28
   2089e:	f00e fd6a 	bl	2f376 <at_params_int_get>
	if (err) {
   208a2:	4604      	mov	r4, r0
   208a4:	2800      	cmp	r0, #0
   208a6:	d180      	bne.n	207aa <parse_ncellmeas+0xa6>
	cells->current_cell.timing_advance = tmp;
   208a8:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   208aa:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   208ac:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   208ae:	f105 0210 	add.w	r2, r5, #16
   208b2:	f107 001c 	add.w	r0, r7, #28
   208b6:	f00e fd5e 	bl	2f376 <at_params_int_get>
	if (err) {
   208ba:	4604      	mov	r4, r0
   208bc:	2800      	cmp	r0, #0
   208be:	f47f af74 	bne.w	207aa <parse_ncellmeas+0xa6>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   208c2:	4649      	mov	r1, r9
   208c4:	f105 0228 	add.w	r2, r5, #40	; 0x28
   208c8:	f107 001c 	add.w	r0, r7, #28
   208cc:	f00e fd1d 	bl	2f30a <at_params_short_get>
	if (err) {
   208d0:	4604      	mov	r4, r0
   208d2:	2800      	cmp	r0, #0
   208d4:	f47f af69 	bne.w	207aa <parse_ncellmeas+0xa6>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   208d8:	2108      	movs	r1, #8
   208da:	f107 0208 	add.w	r2, r7, #8
   208de:	f107 001c 	add.w	r0, r7, #28
   208e2:	f00e fd48 	bl	2f376 <at_params_int_get>
	if (err) {
   208e6:	4604      	mov	r4, r0
   208e8:	2800      	cmp	r0, #0
   208ea:	f47f af5e 	bne.w	207aa <parse_ncellmeas+0xa6>
	cells->current_cell.rsrp = tmp;
   208ee:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   208f0:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   208f2:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   208f4:	f107 0208 	add.w	r2, r7, #8
   208f8:	f107 001c 	add.w	r0, r7, #28
   208fc:	f00e fd3b 	bl	2f376 <at_params_int_get>
	if (err) {
   20900:	4604      	mov	r4, r0
   20902:	2800      	cmp	r0, #0
   20904:	f47f af51 	bne.w	207aa <parse_ncellmeas+0xa6>
	cells->current_cell.rsrq = tmp;
   20908:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2090a:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   2090c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2090e:	f105 0220 	add.w	r2, r5, #32
   20912:	f107 001c 	add.w	r0, r7, #28
   20916:	f00e fd47 	bl	2f3a8 <at_params_int64_get>
	if (err) {
   2091a:	4604      	mov	r4, r0
   2091c:	2800      	cmp	r0, #0
   2091e:	f47f af44 	bne.w	207aa <parse_ncellmeas+0xa6>
	cells->ncells_count = neighborcell_count_get(at_response);
   20922:	4640      	mov	r0, r8
   20924:	f7ff fec0 	bl	206a8 <neighborcell_count_get>
   20928:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   2092c:	b2c0      	uxtb	r0, r0
   2092e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   20932:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   20936:	f107 001c 	add.w	r0, r7, #28
   2093a:	f00e fd6d 	bl	2f418 <at_params_valid_count_get>
   2093e:	42a0      	cmp	r0, r4
   20940:	d90f      	bls.n	20962 <parse_ncellmeas+0x25e>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   20942:	4621      	mov	r1, r4
   20944:	f105 0218 	add.w	r2, r5, #24
   20948:	f107 001c 	add.w	r0, r7, #28
   2094c:	f00e fd2c 	bl	2f3a8 <at_params_int64_get>
		if (err) {
   20950:	4604      	mov	r4, r0
   20952:	2800      	cmp	r0, #0
   20954:	f47f af29 	bne.w	207aa <parse_ncellmeas+0xa6>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   20958:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2095c:	b933      	cbnz	r3, 2096c <parse_ncellmeas+0x268>
	err = at_params_string_get(&resp_list,
   2095e:	2400      	movs	r4, #0
   20960:	e723      	b.n	207aa <parse_ncellmeas+0xa6>
		cells->current_cell.timing_advance_meas_time = 0;
   20962:	2200      	movs	r2, #0
   20964:	2300      	movs	r3, #0
   20966:	e9c5 2306 	strd	r2, r3, [r5, #24]
   2096a:	e7f5      	b.n	20958 <parse_ncellmeas+0x254>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   2096c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2096e:	2b00      	cmp	r3, #0
   20970:	d0f5      	beq.n	2095e <parse_ncellmeas+0x25a>
   20972:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20976:	f04f 0900 	mov.w	r9, #0
   2097a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2097e:	4599      	cmp	r9, r3
   20980:	d304      	bcc.n	2098c <parse_ncellmeas+0x288>
	if (incomplete) {
   20982:	2e00      	cmp	r6, #0
   20984:	d0eb      	beq.n	2095e <parse_ncellmeas+0x25a>
		err = -E2BIG;
   20986:	f06f 0406 	mvn.w	r4, #6
   2098a:	e70e      	b.n	207aa <parse_ncellmeas+0xa6>
					&cells->neighbor_cells[i].earfcn);
   2098c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   2098e:	f1a8 0104 	sub.w	r1, r8, #4
   20992:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   20996:	f107 001c 	add.w	r0, r7, #28
   2099a:	f00e fcec 	bl	2f376 <at_params_int_get>
		if (err) {
   2099e:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   209a2:	4604      	mov	r4, r0
   209a4:	2800      	cmp	r0, #0
   209a6:	f47f af00 	bne.w	207aa <parse_ncellmeas+0xa6>
					  &cells->neighbor_cells[i].phys_cell_id);
   209aa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   209ac:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   209b0:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   209b2:	3208      	adds	r2, #8
   209b4:	f107 001c 	add.w	r0, r7, #28
   209b8:	f00e fca7 	bl	2f30a <at_params_short_get>
		if (err) {
   209bc:	4604      	mov	r4, r0
   209be:	2800      	cmp	r0, #0
   209c0:	f47f aef3 	bne.w	207aa <parse_ncellmeas+0xa6>
		err = at_params_int_get(&resp_list,
   209c4:	f107 0208 	add.w	r2, r7, #8
   209c8:	f1a8 0102 	sub.w	r1, r8, #2
   209cc:	f107 001c 	add.w	r0, r7, #28
   209d0:	f00e fcd1 	bl	2f376 <at_params_int_get>
		if (err) {
   209d4:	4604      	mov	r4, r0
   209d6:	2800      	cmp	r0, #0
   209d8:	f47f aee7 	bne.w	207aa <parse_ncellmeas+0xa6>
		cells->neighbor_cells[i].rsrp = tmp;
   209dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   209de:	68ba      	ldr	r2, [r7, #8]
   209e0:	4453      	add	r3, sl
   209e2:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   209e4:	f108 31ff 	add.w	r1, r8, #4294967295
   209e8:	f107 0208 	add.w	r2, r7, #8
   209ec:	f107 001c 	add.w	r0, r7, #28
   209f0:	f00e fcc1 	bl	2f376 <at_params_int_get>
		if (err) {
   209f4:	4604      	mov	r4, r0
   209f6:	2800      	cmp	r0, #0
   209f8:	f47f aed7 	bne.w	207aa <parse_ncellmeas+0xa6>
		cells->neighbor_cells[i].rsrq = tmp;
   209fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   209fe:	68ba      	ldr	r2, [r7, #8]
   20a00:	4453      	add	r3, sl
   20a02:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   20a04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   20a06:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   20a08:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   20a0a:	3204      	adds	r2, #4
   20a0c:	f107 001c 	add.w	r0, r7, #28
   20a10:	f00e fcb1 	bl	2f376 <at_params_int_get>
		if (err) {
   20a14:	f108 0805 	add.w	r8, r8, #5
   20a18:	4604      	mov	r4, r0
   20a1a:	2800      	cmp	r0, #0
   20a1c:	f47f aec5 	bne.w	207aa <parse_ncellmeas+0xa6>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20a20:	f109 0901 	add.w	r9, r9, #1
   20a24:	e7a9      	b.n	2097a <parse_ncellmeas+0x276>
		err = 1;
   20a26:	2401      	movs	r4, #1
   20a28:	e6bf      	b.n	207aa <parse_ncellmeas+0xa6>
   20a2a:	bf00      	nop
   20a2c:	000399f7 	.word	0x000399f7
   20a30:	0003a4b8 	.word	0x0003a4b8
   20a34:	00031c34 	.word	0x00031c34
   20a38:	00039dfa 	.word	0x00039dfa
   20a3c:	00039c8b 	.word	0x00039c8b
   20a40:	00039954 	.word	0x00039954

00020a44 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20a44:	2300      	movs	r3, #0
{
   20a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a4a:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   20a4c:	220b      	movs	r2, #11
{
   20a4e:	460d      	mov	r5, r1
	uint32_t count = 0;
   20a50:	4699      	mov	r9, r3
{
   20a52:	b09f      	sub	sp, #124	; 0x7c
   20a54:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20a56:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   20a5a:	62ba      	str	r2, [r7, #40]	; 0x28
{
   20a5c:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20a5e:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   20a62:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   20a64:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20a68:	2b2c      	cmp	r3, #44	; 0x2c
   20a6a:	d102      	bne.n	20a72 <parse_ncellmeas_gci+0x2e>
			count++;
   20a6c:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   20a70:	e7f8      	b.n	20a64 <parse_ncellmeas_gci+0x20>
   20a72:	2b00      	cmp	r3, #0
   20a74:	d1f6      	bne.n	20a64 <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a76:	f04f 32ff 	mov.w	r2, #4294967295
   20a7a:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   20a7c:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   20a80:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   20a84:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a88:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   20a8a:	68f9      	ldr	r1, [r7, #12]
   20a8c:	7849      	ldrb	r1, [r1, #1]
   20a8e:	4299      	cmp	r1, r3
   20a90:	d80d      	bhi.n	20aae <parse_ncellmeas_gci+0x6a>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   20a92:	4641      	mov	r1, r8
   20a94:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20a98:	f00e fba6 	bl	2f1e8 <at_params_list_init>
	if (err) {
   20a9c:	4604      	mov	r4, r0
   20a9e:	b180      	cbz	r0, 20ac2 <parse_ncellmeas_gci+0x7e>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   20aa0:	466d      	mov	r5, sp
   20aa2:	b088      	sub	sp, #32
   20aa4:	466a      	mov	r2, sp
   20aa6:	4baf      	ldr	r3, [pc, #700]	; (20d64 <parse_ncellmeas_gci+0x320>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20aa8:	6153      	str	r3, [r2, #20]
   20aaa:	4baf      	ldr	r3, [pc, #700]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20aac:	e01a      	b.n	20ae4 <parse_ncellmeas_gci+0xa0>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20aae:	fb04 f003 	mul.w	r0, r4, r3
   20ab2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   20ab4:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20ab6:	4401      	add	r1, r0
   20ab8:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   20aba:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   20abc:	4401      	add	r1, r0
   20abe:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   20ac0:	e7e3      	b.n	20a8a <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20ac2:	4601      	mov	r1, r0
   20ac4:	f107 0234 	add.w	r2, r7, #52	; 0x34
   20ac8:	4628      	mov	r0, r5
   20aca:	f00e fb8a 	bl	2f1e2 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   20ace:	4604      	mov	r4, r0
   20ad0:	2800      	cmp	r0, #0
   20ad2:	d036      	beq.n	20b42 <parse_ncellmeas_gci+0xfe>
   20ad4:	1dc3      	adds	r3, r0, #7
   20ad6:	4ba4      	ldr	r3, [pc, #656]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20ad8:	d00c      	beq.n	20af4 <parse_ncellmeas_gci+0xb0>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   20ada:	466d      	mov	r5, sp
   20adc:	b088      	sub	sp, #32
   20ade:	466a      	mov	r2, sp
   20ae0:	49a2      	ldr	r1, [pc, #648]	; (20d6c <parse_ncellmeas_gci+0x328>)
   20ae2:	6151      	str	r1, [r2, #20]
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20ae4:	6193      	str	r3, [r2, #24]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   20ae6:	2304      	movs	r3, #4
   20ae8:	61d4      	str	r4, [r2, #28]
   20aea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20aee:	f842 3f10 	str.w	r3, [r2, #16]!
   20af2:	e09e      	b.n	20c32 <parse_ncellmeas_gci+0x1ee>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   20af4:	46ea      	mov	sl, sp
   20af6:	b08c      	sub	sp, #48	; 0x30
   20af8:	466a      	mov	r2, sp
   20afa:	499d      	ldr	r1, [pc, #628]	; (20d70 <parse_ncellmeas_gci+0x32c>)
   20afc:	e9c2 8007 	strd	r8, r0, [r2, #28]
   20b00:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20b04:	f240 5303 	movw	r3, #1283	; 0x503
   20b08:	8513      	strh	r3, [r2, #40]	; 0x28
   20b0a:	4b9a      	ldr	r3, [pc, #616]	; (20d74 <parse_ncellmeas_gci+0x330>)
   20b0c:	6255      	str	r5, [r2, #36]	; 0x24
   20b0e:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   20b12:	f842 3f10 	str.w	r3, [r2, #16]!
   20b16:	4898      	ldr	r0, [pc, #608]	; (20d78 <parse_ncellmeas_gci+0x334>)
   20b18:	f00e fcb6 	bl	2f488 <z_log_msg_static_create.constprop.0>
		incomplete = true;
   20b1c:	2301      	movs	r3, #1
   20b1e:	46d5      	mov	sp, sl
   20b20:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   20b22:	2100      	movs	r1, #0
   20b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
   20b28:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   20b2c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20b30:	f00e fc4f 	bl	2f3d2 <at_params_string_get>
	if (err) {
   20b34:	4604      	mov	r4, r0
   20b36:	b130      	cbz	r0, 20b46 <parse_ncellmeas_gci+0x102>
		LOG_ERR("Could not get response prefix, error: %d", err);
   20b38:	466d      	mov	r5, sp
   20b3a:	b088      	sub	sp, #32
   20b3c:	466a      	mov	r2, sp
   20b3e:	4b8f      	ldr	r3, [pc, #572]	; (20d7c <parse_ncellmeas_gci+0x338>)
   20b40:	e7b2      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   20b42:	6178      	str	r0, [r7, #20]
   20b44:	e7ed      	b.n	20b22 <parse_ncellmeas_gci+0xde>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20b46:	4a8e      	ldr	r2, [pc, #568]	; (20d80 <parse_ncellmeas_gci+0x33c>)
   20b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   20b4a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   20b4e:	f7ff fab9 	bl	200c4 <response_is_valid>
   20b52:	6138      	str	r0, [r7, #16]
   20b54:	b9c8      	cbnz	r0, 20b8a <parse_ncellmeas_gci+0x146>
		LOG_ERR("Not a valid NCELLMEAS response");
   20b56:	466c      	mov	r4, sp
   20b58:	b088      	sub	sp, #32
   20b5a:	466a      	mov	r2, sp
   20b5c:	4b89      	ldr	r3, [pc, #548]	; (20d84 <parse_ncellmeas_gci+0x340>)
   20b5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20b62:	6153      	str	r3, [r2, #20]
   20b64:	4b80      	ldr	r3, [pc, #512]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20b66:	4884      	ldr	r0, [pc, #528]	; (20d78 <parse_ncellmeas_gci+0x334>)
   20b68:	6193      	str	r3, [r2, #24]
   20b6a:	2303      	movs	r3, #3
   20b6c:	f842 3f10 	str.w	r3, [r2, #16]!
   20b70:	f00e fc8a 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20b74:	46a5      	mov	sp, r4
	err = at_params_string_get(&resp_list,
   20b76:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   20b78:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20b7c:	f00e fb47 	bl	2f20e <at_params_list_free>

	return err;
}
   20b80:	4620      	mov	r0, r4
   20b82:	377c      	adds	r7, #124	; 0x7c
   20b84:	46bd      	mov	sp, r7
   20b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   20b8a:	2101      	movs	r1, #1
   20b8c:	f107 021c 	add.w	r2, r7, #28
   20b90:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20b94:	f00e fbef 	bl	2f376 <at_params_int_get>
	if (err) {
   20b98:	4604      	mov	r4, r0
   20b9a:	2800      	cmp	r0, #0
   20b9c:	d1ec      	bne.n	20b78 <parse_ncellmeas_gci+0x134>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   20b9e:	69fc      	ldr	r4, [r7, #28]
   20ba0:	2c01      	cmp	r4, #1
   20ba2:	d0e9      	beq.n	20b78 <parse_ncellmeas_gci+0x134>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   20ba4:	2c02      	cmp	r4, #2
   20ba6:	d10f      	bne.n	20bc8 <parse_ncellmeas_gci+0x184>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   20ba8:	466c      	mov	r4, sp
   20baa:	b088      	sub	sp, #32
   20bac:	466a      	mov	r2, sp
   20bae:	4b76      	ldr	r3, [pc, #472]	; (20d88 <parse_ncellmeas_gci+0x344>)
   20bb0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   20bb4:	6153      	str	r3, [r2, #20]
   20bb6:	4b6c      	ldr	r3, [pc, #432]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20bb8:	486f      	ldr	r0, [pc, #444]	; (20d78 <parse_ncellmeas_gci+0x334>)
   20bba:	6193      	str	r3, [r2, #24]
   20bbc:	2303      	movs	r3, #3
   20bbe:	f842 3f10 	str.w	r3, [r2, #16]!
   20bc2:	f00e fc61 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20bc6:	46a5      	mov	sp, r4
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20bc8:	f04f 0a00 	mov.w	sl, #0
   20bcc:	2501      	movs	r5, #1
   20bce:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   20bd0:	f1a9 030a 	sub.w	r3, r9, #10
   20bd4:	607b      	str	r3, [r7, #4]
   20bd6:	687b      	ldr	r3, [r7, #4]
   20bd8:	42ab      	cmp	r3, r5
   20bda:	d903      	bls.n	20be4 <parse_ncellmeas_gci+0x1a0>
			i < params->gci_count; i++) {
   20bdc:	68fb      	ldr	r3, [r7, #12]
   20bde:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   20be0:	4543      	cmp	r3, r8
   20be2:	d80c      	bhi.n	20bfe <parse_ncellmeas_gci+0x1ba>
	if (incomplete) {
   20be4:	697b      	ldr	r3, [r7, #20]
   20be6:	2b00      	cmp	r3, #0
   20be8:	d0c5      	beq.n	20b76 <parse_ncellmeas_gci+0x132>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   20bea:	466d      	mov	r5, sp
   20bec:	b088      	sub	sp, #32
   20bee:	466a      	mov	r2, sp
   20bf0:	4b66      	ldr	r3, [pc, #408]	; (20d8c <parse_ncellmeas_gci+0x348>)
   20bf2:	f06f 0406 	mvn.w	r4, #6
   20bf6:	6153      	str	r3, [r2, #20]
   20bf8:	4b5b      	ldr	r3, [pc, #364]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20bfa:	6193      	str	r3, [r2, #24]
   20bfc:	e773      	b.n	20ae6 <parse_ncellmeas_gci+0xa2>
		curr_index++;
   20bfe:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   20c02:	4649      	mov	r1, r9
   20c04:	f107 0220 	add.w	r2, r7, #32
   20c08:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20c0c:	f00e fc65 	bl	2f4da <string_param_to_int.constprop.0>
		if (err) {
   20c10:	4604      	mov	r4, r0
   20c12:	b198      	cbz	r0, 20c3c <parse_ncellmeas_gci+0x1f8>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   20c14:	466d      	mov	r5, sp
   20c16:	b08a      	sub	sp, #40	; 0x28
   20c18:	466a      	mov	r2, sp
   20c1a:	4b5d      	ldr	r3, [pc, #372]	; (20d90 <parse_ncellmeas_gci+0x34c>)
   20c1c:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   20c20:	6153      	str	r3, [r2, #20]
   20c22:	4b51      	ldr	r3, [pc, #324]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20c24:	e9c2 8008 	strd	r8, r0, [r2, #32]
   20c28:	e9c2 3906 	strd	r3, r9, [r2, #24]
   20c2c:	2306      	movs	r3, #6
   20c2e:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   20c32:	4851      	ldr	r0, [pc, #324]	; (20d78 <parse_ncellmeas_gci+0x334>)
   20c34:	f00e fc28 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20c38:	46ad      	mov	sp, r5
   20c3a:	e79d      	b.n	20b78 <parse_ncellmeas_gci+0x134>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20c3c:	6a3b      	ldr	r3, [r7, #32]
   20c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   20c42:	db13      	blt.n	20c6c <parse_ncellmeas_gci+0x228>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   20c44:	466c      	mov	r4, sp
   20c46:	b088      	sub	sp, #32
   20c48:	466a      	mov	r2, sp
   20c4a:	4952      	ldr	r1, [pc, #328]	; (20d94 <parse_ncellmeas_gci+0x350>)
   20c4c:	484a      	ldr	r0, [pc, #296]	; (20d78 <parse_ncellmeas_gci+0x334>)
   20c4e:	6151      	str	r1, [r2, #20]
   20c50:	4945      	ldr	r1, [pc, #276]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20c52:	e9c2 1306 	strd	r1, r3, [r2, #24]
   20c56:	2304      	movs	r3, #4
   20c58:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   20c5c:	f842 3f10 	str.w	r3, [r2, #16]!
   20c60:	f00e fc12 	bl	2f488 <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20c64:	f04f 33ff 	mov.w	r3, #4294967295
   20c68:	46a5      	mov	sp, r4
   20c6a:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   20c6c:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20c6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   20c72:	653b      	str	r3, [r7, #80]	; 0x50
		len = sizeof(tmp_str);
   20c74:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20c76:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   20c78:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   20c7a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   20c82:	f00e fba6 	bl	2f3d2 <at_params_string_get>
		if (err) {
   20c86:	4604      	mov	r4, r0
   20c88:	b120      	cbz	r0, 20c94 <parse_ncellmeas_gci+0x250>
			LOG_ERR("Could not parse plmn, error: %d", err);
   20c8a:	466d      	mov	r5, sp
   20c8c:	b088      	sub	sp, #32
   20c8e:	466a      	mov	r2, sp
   20c90:	4b41      	ldr	r3, [pc, #260]	; (20d98 <parse_ncellmeas_gci+0x354>)
   20c92:	e709      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   20c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20c96:	f107 0218 	add.w	r2, r7, #24
   20c9a:	3360      	adds	r3, #96	; 0x60
   20c9c:	4413      	add	r3, r2
   20c9e:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   20ca2:	210a      	movs	r1, #10
   20ca4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   20ca8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   20cac:	f00e fbef 	bl	2f48e <string_to_int>
		if (err) {
   20cb0:	4604      	mov	r4, r0
   20cb2:	b120      	cbz	r0, 20cbe <parse_ncellmeas_gci+0x27a>
			LOG_ERR("string_to_int, error: %d", err);
   20cb4:	466d      	mov	r5, sp
   20cb6:	b088      	sub	sp, #32
   20cb8:	466a      	mov	r2, sp
   20cba:	4b38      	ldr	r3, [pc, #224]	; (20d9c <parse_ncellmeas_gci+0x358>)
   20cbc:	e6f4      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   20cbe:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   20cc2:	210a      	movs	r1, #10
   20cc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
   20cc8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   20ccc:	f00e fbdf 	bl	2f48e <string_to_int>
		if (err) {
   20cd0:	4604      	mov	r4, r0
   20cd2:	2800      	cmp	r0, #0
   20cd4:	d1ee      	bne.n	20cb4 <parse_ncellmeas_gci+0x270>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   20cd6:	f107 0220 	add.w	r2, r7, #32
   20cda:	1ce9      	adds	r1, r5, #3
   20cdc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20ce0:	f00e fbfb 	bl	2f4da <string_param_to_int.constprop.0>
		if (err) {
   20ce4:	4604      	mov	r4, r0
   20ce6:	b170      	cbz	r0, 20d06 <parse_ncellmeas_gci+0x2c2>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   20ce8:	466d      	mov	r5, sp
   20cea:	b08a      	sub	sp, #40	; 0x28
   20cec:	466a      	mov	r2, sp
   20cee:	4b2c      	ldr	r3, [pc, #176]	; (20da0 <parse_ncellmeas_gci+0x35c>)
   20cf0:	6210      	str	r0, [r2, #32]
   20cf2:	6153      	str	r3, [r2, #20]
   20cf4:	4b1c      	ldr	r3, [pc, #112]	; (20d68 <parse_ncellmeas_gci+0x324>)
   20cf6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   20cfa:	e9c2 3806 	strd	r3, r8, [r2, #24]
   20cfe:	2305      	movs	r3, #5
   20d00:	f842 3f10 	str.w	r3, [r2, #16]!
   20d04:	e795      	b.n	20c32 <parse_ncellmeas_gci+0x1ee>
		parsed_cell.tac = tmp_int;
   20d06:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20d08:	f107 0220 	add.w	r2, r7, #32
   20d0c:	1d29      	adds	r1, r5, #4
   20d0e:	f107 0034 	add.w	r0, r7, #52	; 0x34
		parsed_cell.tac = tmp_int;
   20d12:	657b      	str	r3, [r7, #84]	; 0x54
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20d14:	f00e fb2f 	bl	2f376 <at_params_int_get>
		if (err) {
   20d18:	4604      	mov	r4, r0
   20d1a:	b120      	cbz	r0, 20d26 <parse_ncellmeas_gci+0x2e2>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   20d1c:	466d      	mov	r5, sp
   20d1e:	b088      	sub	sp, #32
   20d20:	466a      	mov	r2, sp
   20d22:	4b20      	ldr	r3, [pc, #128]	; (20da4 <parse_ncellmeas_gci+0x360>)
   20d24:	e6c0      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   20d26:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   20d28:	f107 0260 	add.w	r2, r7, #96	; 0x60
   20d2c:	1d69      	adds	r1, r5, #5
   20d2e:	f107 0034 	add.w	r0, r7, #52	; 0x34
		parsed_cell.timing_advance = tmp_int;
   20d32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		err = at_params_int64_get(&resp_list, curr_index,
   20d36:	f00e fb37 	bl	2f3a8 <at_params_int64_get>
		if (err) {
   20d3a:	4604      	mov	r4, r0
   20d3c:	b120      	cbz	r0, 20d48 <parse_ncellmeas_gci+0x304>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   20d3e:	466d      	mov	r5, sp
   20d40:	b088      	sub	sp, #32
   20d42:	466a      	mov	r2, sp
   20d44:	4b18      	ldr	r3, [pc, #96]	; (20da8 <parse_ncellmeas_gci+0x364>)
   20d46:	e6af      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   20d48:	f107 0258 	add.w	r2, r7, #88	; 0x58
   20d4c:	1da9      	adds	r1, r5, #6
   20d4e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20d52:	f00e fb10 	bl	2f376 <at_params_int_get>
		if (err) {
   20d56:	4604      	mov	r4, r0
   20d58:	b350      	cbz	r0, 20db0 <parse_ncellmeas_gci+0x36c>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   20d5a:	466d      	mov	r5, sp
   20d5c:	b088      	sub	sp, #32
   20d5e:	466a      	mov	r2, sp
   20d60:	4b12      	ldr	r3, [pc, #72]	; (20dac <parse_ncellmeas_gci+0x368>)
   20d62:	e6a1      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
   20d64:	00039e30 	.word	0x00039e30
   20d68:	0003a4a4 	.word	0x0003a4a4
   20d6c:	00039dfa 	.word	0x00039dfa
   20d70:	00039e6b 	.word	0x00039e6b
   20d74:	01000006 	.word	0x01000006
   20d78:	00031c34 	.word	0x00031c34
   20d7c:	00039c8b 	.word	0x00039c8b
   20d80:	00039954 	.word	0x00039954
   20d84:	00039eac 	.word	0x00039eac
   20d88:	00039ecf 	.word	0x00039ecf
   20d8c:	0003a2df 	.word	0x0003a2df
   20d90:	00039f0a 	.word	0x00039f0a
   20d94:	00039f40 	.word	0x00039f40
   20d98:	00039f87 	.word	0x00039f87
   20d9c:	00039fab 	.word	0x00039fab
   20da0:	00039fc8 	.word	0x00039fc8
   20da4:	0003a002 	.word	0x0003a002
   20da8:	0003a030 	.word	0x0003a030
   20dac:	0003a068 	.word	0x0003a068
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   20db0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   20db4:	1de9      	adds	r1, r5, #7
   20db6:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20dba:	f00e faa6 	bl	2f30a <at_params_short_get>
		if (err) {
   20dbe:	4604      	mov	r4, r0
   20dc0:	b120      	cbz	r0, 20dcc <parse_ncellmeas_gci+0x388>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   20dc2:	466d      	mov	r5, sp
   20dc4:	b088      	sub	sp, #32
   20dc6:	466a      	mov	r2, sp
   20dc8:	4b87      	ldr	r3, [pc, #540]	; (20fe8 <parse_ncellmeas_gci+0x5a4>)
   20dca:	e66d      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   20dcc:	f107 0272 	add.w	r2, r7, #114	; 0x72
   20dd0:	f105 0108 	add.w	r1, r5, #8
   20dd4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20dd8:	f00e fa97 	bl	2f30a <at_params_short_get>
		if (err) {
   20ddc:	4604      	mov	r4, r0
   20dde:	b120      	cbz	r0, 20dea <parse_ncellmeas_gci+0x3a6>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   20de0:	466d      	mov	r5, sp
   20de2:	b088      	sub	sp, #32
   20de4:	466a      	mov	r2, sp
   20de6:	4b81      	ldr	r3, [pc, #516]	; (20fec <parse_ncellmeas_gci+0x5a8>)
   20de8:	e65e      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   20dea:	f107 0274 	add.w	r2, r7, #116	; 0x74
   20dee:	f105 0109 	add.w	r1, r5, #9
   20df2:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20df6:	f00e fa88 	bl	2f30a <at_params_short_get>
		if (err) {
   20dfa:	4604      	mov	r4, r0
   20dfc:	b120      	cbz	r0, 20e08 <parse_ncellmeas_gci+0x3c4>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   20dfe:	466d      	mov	r5, sp
   20e00:	b088      	sub	sp, #32
   20e02:	466a      	mov	r2, sp
   20e04:	4b7a      	ldr	r3, [pc, #488]	; (20ff0 <parse_ncellmeas_gci+0x5ac>)
   20e06:	e64f      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   20e08:	f107 0268 	add.w	r2, r7, #104	; 0x68
   20e0c:	f105 010a 	add.w	r1, r5, #10
   20e10:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20e14:	f00e fac8 	bl	2f3a8 <at_params_int64_get>
		if (err) {
   20e18:	4604      	mov	r4, r0
   20e1a:	b120      	cbz	r0, 20e26 <parse_ncellmeas_gci+0x3e2>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   20e1c:	466d      	mov	r5, sp
   20e1e:	b088      	sub	sp, #32
   20e20:	466a      	mov	r2, sp
   20e22:	4b74      	ldr	r3, [pc, #464]	; (20ff4 <parse_ncellmeas_gci+0x5b0>)
   20e24:	e640      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20e26:	f107 021a 	add.w	r2, r7, #26
   20e2a:	f105 010b 	add.w	r1, r5, #11
   20e2e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20e32:	f00e fa6a 	bl	2f30a <at_params_short_get>
		if (err) {
   20e36:	4604      	mov	r4, r0
   20e38:	b120      	cbz	r0, 20e44 <parse_ncellmeas_gci+0x400>
			LOG_ERR("Could not parse serving, error: %d", err);
   20e3a:	466d      	mov	r5, sp
   20e3c:	b088      	sub	sp, #32
   20e3e:	466a      	mov	r2, sp
   20e40:	4b6d      	ldr	r3, [pc, #436]	; (20ff8 <parse_ncellmeas_gci+0x5b4>)
   20e42:	e631      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		curr_index++;
   20e44:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20e46:	4629      	mov	r1, r5
   20e48:	f107 021a 	add.w	r2, r7, #26
   20e4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   20e50:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   20e54:	f00e fa59 	bl	2f30a <at_params_short_get>
		if (err) {
   20e58:	4604      	mov	r4, r0
   20e5a:	b120      	cbz	r0, 20e66 <parse_ncellmeas_gci+0x422>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   20e5c:	466d      	mov	r5, sp
   20e5e:	b088      	sub	sp, #32
   20e60:	466a      	mov	r2, sp
   20e62:	4b66      	ldr	r3, [pc, #408]	; (20ffc <parse_ncellmeas_gci+0x5b8>)
   20e64:	e620      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   20e66:	f1b9 0f00 	cmp.w	r9, #0
   20e6a:	f000 80a5 	beq.w	20fb8 <parse_ncellmeas_gci+0x574>
			cells->current_cell = parsed_cell;
   20e6e:	46b4      	mov	ip, r6
   20e70:	f107 0e48 	add.w	lr, r7, #72	; 0x48
   20e74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20e84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   20e88:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   20e8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   20e90:	f1b9 0f00 	cmp.w	r9, #0
   20e94:	d033      	beq.n	20efe <parse_ncellmeas_gci+0x4ba>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   20e96:	f1b9 0f0a 	cmp.w	r9, #10
   20e9a:	d92b      	bls.n	20ef4 <parse_ncellmeas_gci+0x4b0>
					LOG_WRN("Cutting response, because received neigbor cell"
   20e9c:	46e9      	mov	r9, sp
   20e9e:	b088      	sub	sp, #32
   20ea0:	466a      	mov	r2, sp
   20ea2:	4b57      	ldr	r3, [pc, #348]	; (21000 <parse_ncellmeas_gci+0x5bc>)
   20ea4:	240a      	movs	r4, #10
   20ea6:	6153      	str	r3, [r2, #20]
   20ea8:	4b56      	ldr	r3, [pc, #344]	; (21004 <parse_ncellmeas_gci+0x5c0>)
   20eaa:	61d4      	str	r4, [r2, #28]
   20eac:	6193      	str	r3, [r2, #24]
   20eae:	2304      	movs	r3, #4
   20eb0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   20eb4:	f842 3f10 	str.w	r3, [r2, #16]!
   20eb8:	4853      	ldr	r0, [pc, #332]	; (21008 <parse_ncellmeas_gci+0x5c4>)
   20eba:	f00e fae5 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20ebe:	46cd      	mov	sp, r9
					incomplete = true;
   20ec0:	693b      	ldr	r3, [r7, #16]
   20ec2:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   20ec4:	2110      	movs	r1, #16
   20ec6:	4620      	mov	r0, r4
   20ec8:	f00f fc8b 	bl	307e2 <k_calloc>
				if (ncells == NULL) {
   20ecc:	b9a0      	cbnz	r0, 20ef8 <parse_ncellmeas_gci+0x4b4>
					LOG_WRN("Failed to allocate memory for the ncells"
   20ece:	466c      	mov	r4, sp
   20ed0:	b088      	sub	sp, #32
   20ed2:	466a      	mov	r2, sp
   20ed4:	4b4d      	ldr	r3, [pc, #308]	; (2100c <parse_ncellmeas_gci+0x5c8>)
   20ed6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   20eda:	6153      	str	r3, [r2, #20]
   20edc:	4b49      	ldr	r3, [pc, #292]	; (21004 <parse_ncellmeas_gci+0x5c0>)
   20ede:	484a      	ldr	r0, [pc, #296]	; (21008 <parse_ncellmeas_gci+0x5c4>)
   20ee0:	6193      	str	r3, [r2, #24]
   20ee2:	2303      	movs	r3, #3
   20ee4:	f842 3f10 	str.w	r3, [r2, #16]!
   20ee8:	f00e face 	bl	2f488 <z_log_msg_static_create.constprop.0>
   20eec:	46a5      	mov	sp, r4
			i < params->gci_count; i++) {
   20eee:	f108 0801 	add.w	r8, r8, #1
   20ef2:	e670      	b.n	20bd6 <parse_ncellmeas_gci+0x192>
					to_be_parsed_ncell_count = parsed_ncells_count;
   20ef4:	464c      	mov	r4, r9
   20ef6:	e7e5      	b.n	20ec4 <parse_ncellmeas_gci+0x480>
				cells->neighbor_cells = ncells;
   20ef8:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   20efa:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20efe:	f04f 0900 	mov.w	r9, #0
   20f02:	60bc      	str	r4, [r7, #8]
   20f04:	68bb      	ldr	r3, [r7, #8]
   20f06:	4599      	cmp	r9, r3
   20f08:	d0f1      	beq.n	20eee <parse_ncellmeas_gci+0x4aa>
							&cells->neighbor_cells[j].earfcn);
   20f0a:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   20f0c:	1c69      	adds	r1, r5, #1
   20f0e:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   20f12:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20f16:	f00e fa2e 	bl	2f376 <at_params_int_get>
				if (err) {
   20f1a:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   20f1e:	4604      	mov	r4, r0
   20f20:	b120      	cbz	r0, 20f2c <parse_ncellmeas_gci+0x4e8>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   20f22:	466d      	mov	r5, sp
   20f24:	b088      	sub	sp, #32
   20f26:	466a      	mov	r2, sp
   20f28:	4b39      	ldr	r3, [pc, #228]	; (21010 <parse_ncellmeas_gci+0x5cc>)
   20f2a:	e5bd      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   20f2c:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   20f2e:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   20f30:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   20f32:	3208      	adds	r2, #8
   20f34:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20f38:	f00e f9e7 	bl	2f30a <at_params_short_get>
				if (err) {
   20f3c:	4604      	mov	r4, r0
   20f3e:	b120      	cbz	r0, 20f4a <parse_ncellmeas_gci+0x506>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   20f40:	466d      	mov	r5, sp
   20f42:	b088      	sub	sp, #32
   20f44:	466a      	mov	r2, sp
   20f46:	4b33      	ldr	r3, [pc, #204]	; (21014 <parse_ncellmeas_gci+0x5d0>)
   20f48:	e5ae      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20f4a:	f107 0220 	add.w	r2, r7, #32
   20f4e:	1ce9      	adds	r1, r5, #3
   20f50:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20f54:	f00e fa0f 	bl	2f376 <at_params_int_get>
				if (err) {
   20f58:	4604      	mov	r4, r0
   20f5a:	b120      	cbz	r0, 20f66 <parse_ncellmeas_gci+0x522>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   20f5c:	466d      	mov	r5, sp
   20f5e:	b088      	sub	sp, #32
   20f60:	466a      	mov	r2, sp
   20f62:	4b2d      	ldr	r3, [pc, #180]	; (21018 <parse_ncellmeas_gci+0x5d4>)
   20f64:	e5a0      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   20f66:	6b73      	ldr	r3, [r6, #52]	; 0x34
   20f68:	6a3a      	ldr	r2, [r7, #32]
   20f6a:	445b      	add	r3, fp
   20f6c:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   20f6e:	1d29      	adds	r1, r5, #4
   20f70:	f107 0220 	add.w	r2, r7, #32
   20f74:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20f78:	f00e f9fd 	bl	2f376 <at_params_int_get>
				if (err) {
   20f7c:	4604      	mov	r4, r0
   20f7e:	b120      	cbz	r0, 20f8a <parse_ncellmeas_gci+0x546>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   20f80:	466d      	mov	r5, sp
   20f82:	b088      	sub	sp, #32
   20f84:	466a      	mov	r2, sp
   20f86:	4b25      	ldr	r3, [pc, #148]	; (2101c <parse_ncellmeas_gci+0x5d8>)
   20f88:	e58e      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   20f8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   20f8c:	6a3a      	ldr	r2, [r7, #32]
   20f8e:	445b      	add	r3, fp
   20f90:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   20f92:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   20f94:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   20f96:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   20f98:	4629      	mov	r1, r5
   20f9a:	3204      	adds	r2, #4
   20f9c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   20fa0:	f00e f9e9 	bl	2f376 <at_params_int_get>
				if (err) {
   20fa4:	4604      	mov	r4, r0
   20fa6:	b120      	cbz	r0, 20fb2 <parse_ncellmeas_gci+0x56e>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   20fa8:	466d      	mov	r5, sp
   20faa:	b088      	sub	sp, #32
   20fac:	466a      	mov	r2, sp
   20fae:	4b1c      	ldr	r3, [pc, #112]	; (21020 <parse_ncellmeas_gci+0x5dc>)
   20fb0:	e57a      	b.n	20aa8 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   20fb2:	f109 0901 	add.w	r9, r9, #1
   20fb6:	e7a5      	b.n	20f04 <parse_ncellmeas_gci+0x4c0>
			cells->gci_cells[k] = parsed_cell;
   20fb8:	2330      	movs	r3, #48	; 0x30
   20fba:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   20fbc:	f107 0c48 	add.w	ip, r7, #72	; 0x48
   20fc0:	fb03 440a 	mla	r4, r3, sl, r4
   20fc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20fca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20fd0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   20fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20fd8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   20fdc:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   20fe0:	3301      	adds	r3, #1
   20fe2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   20fe6:	e782      	b.n	20eee <parse_ncellmeas_gci+0x4aa>
   20fe8:	0003a08e 	.word	0x0003a08e
   20fec:	0003a0ba 	.word	0x0003a0ba
   20ff0:	0003a0de 	.word	0x0003a0de
   20ff4:	0003a102 	.word	0x0003a102
   20ff8:	0003a12b 	.word	0x0003a12b
   20ffc:	0003a152 	.word	0x0003a152
   21000:	0003a180 	.word	0x0003a180
   21004:	0003a4a4 	.word	0x0003a4a4
   21008:	00031c34 	.word	0x00031c34
   2100c:	0003a1dc 	.word	0x0003a1dc
   21010:	0003a214 	.word	0x0003a214
   21014:	0003a23c 	.word	0x0003a23c
   21018:	0003a26a 	.word	0x0003a26a
   2101c:	0003a290 	.word	0x0003a290
   21020:	0003a2b6 	.word	0x0003a2b6

00021024 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   21024:	2300      	movs	r3, #0
{
   21026:	b5f0      	push	{r4, r5, r6, r7, lr}
   21028:	b085      	sub	sp, #20
   2102a:	af00      	add	r7, sp, #0
   2102c:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   2102e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   21030:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   21034:	2900      	cmp	r1, #0
   21036:	d066      	beq.n	21106 <parse_xmodemsleep+0xe2>
   21038:	2800      	cmp	r0, #0
   2103a:	d064      	beq.n	21106 <parse_xmodemsleep+0xe2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   2103c:	2104      	movs	r1, #4
   2103e:	f107 0008 	add.w	r0, r7, #8
   21042:	f00e f8d1 	bl	2f1e8 <at_params_list_init>
	if (err) {
   21046:	4604      	mov	r4, r0
   21048:	b1a0      	cbz	r0, 21074 <parse_xmodemsleep+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2104a:	466d      	mov	r5, sp
   2104c:	b088      	sub	sp, #32
   2104e:	466a      	mov	r2, sp
   21050:	4b2e      	ldr	r3, [pc, #184]	; (2110c <parse_xmodemsleep+0xe8>)
   21052:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21056:	6153      	str	r3, [r2, #20]
   21058:	4b2d      	ldr	r3, [pc, #180]	; (21110 <parse_xmodemsleep+0xec>)
   2105a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2105e:	2304      	movs	r3, #4
   21060:	482c      	ldr	r0, [pc, #176]	; (21114 <parse_xmodemsleep+0xf0>)
   21062:	f842 3f10 	str.w	r3, [r2, #16]!
   21066:	f00e fa0f 	bl	2f488 <z_log_msg_static_create.constprop.0>
   2106a:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2106c:	4620      	mov	r0, r4
   2106e:	3714      	adds	r7, #20
   21070:	46bd      	mov	sp, r7
   21072:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   21074:	4601      	mov	r1, r0
   21076:	f107 0208 	add.w	r2, r7, #8
   2107a:	4630      	mov	r0, r6
   2107c:	f00e f8b1 	bl	2f1e2 <at_parser_params_from_str>
	if (err) {
   21080:	4604      	mov	r4, r0
   21082:	b188      	cbz	r0, 210a8 <parse_xmodemsleep+0x84>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   21084:	466d      	mov	r5, sp
   21086:	b088      	sub	sp, #32
   21088:	466a      	mov	r2, sp
   2108a:	4b23      	ldr	r3, [pc, #140]	; (21118 <parse_xmodemsleep+0xf4>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   2108c:	6153      	str	r3, [r2, #20]
   2108e:	4b20      	ldr	r3, [pc, #128]	; (21110 <parse_xmodemsleep+0xec>)
   21090:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21094:	e9c2 3406 	strd	r3, r4, [r2, #24]
   21098:	2304      	movs	r3, #4
   2109a:	481e      	ldr	r0, [pc, #120]	; (21114 <parse_xmodemsleep+0xf0>)
   2109c:	f842 3f10 	str.w	r3, [r2, #16]!
   210a0:	f00e f9f2 	bl	2f488 <z_log_msg_static_create.constprop.0>
   210a4:	46ad      	mov	sp, r5
		goto clean_exit;
   210a6:	e01a      	b.n	210de <parse_xmodemsleep+0xba>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   210a8:	2101      	movs	r1, #1
   210aa:	1dba      	adds	r2, r7, #6
   210ac:	f107 0008 	add.w	r0, r7, #8
   210b0:	f00e f948 	bl	2f344 <at_params_unsigned_short_get>
	if (err) {
   210b4:	4604      	mov	r4, r0
   210b6:	b120      	cbz	r0, 210c2 <parse_xmodemsleep+0x9e>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   210b8:	466d      	mov	r5, sp
   210ba:	b088      	sub	sp, #32
   210bc:	466a      	mov	r2, sp
   210be:	4b17      	ldr	r3, [pc, #92]	; (2111c <parse_xmodemsleep+0xf8>)
   210c0:	e7e4      	b.n	2108c <parse_xmodemsleep+0x68>
	modem_sleep->type = type;
   210c2:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   210c4:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   210c8:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   210ca:	f00e f9a5 	bl	2f418 <at_params_valid_count_get>
   210ce:	2802      	cmp	r0, #2
   210d0:	d80a      	bhi.n	210e8 <parse_xmodemsleep+0xc4>
		modem_sleep->time = -1;
   210d2:	f04f 32ff 	mov.w	r2, #4294967295
   210d6:	f04f 33ff 	mov.w	r3, #4294967295
   210da:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   210de:	f107 0008 	add.w	r0, r7, #8
   210e2:	f00e f894 	bl	2f20e <at_params_list_free>
	return err;
   210e6:	e7c1      	b.n	2106c <parse_xmodemsleep+0x48>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   210e8:	2102      	movs	r1, #2
   210ea:	f105 0208 	add.w	r2, r5, #8
   210ee:	f107 0008 	add.w	r0, r7, #8
   210f2:	f00e f959 	bl	2f3a8 <at_params_int64_get>
	if (err) {
   210f6:	4604      	mov	r4, r0
   210f8:	2800      	cmp	r0, #0
   210fa:	d0f0      	beq.n	210de <parse_xmodemsleep+0xba>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   210fc:	466d      	mov	r5, sp
   210fe:	b088      	sub	sp, #32
   21100:	466a      	mov	r2, sp
   21102:	4b07      	ldr	r3, [pc, #28]	; (21120 <parse_xmodemsleep+0xfc>)
   21104:	e7c2      	b.n	2108c <parse_xmodemsleep+0x68>
		return -EINVAL;
   21106:	f06f 0415 	mvn.w	r4, #21
   2110a:	e7af      	b.n	2106c <parse_xmodemsleep+0x48>
   2110c:	000399f7 	.word	0x000399f7
   21110:	0003a492 	.word	0x0003a492
   21114:	00031c34 	.word	0x00031c34
   21118:	0003a30f 	.word	0x0003a30f
   2111c:	0003a345 	.word	0x0003a345
   21120:	0003a372 	.word	0x0003a372

00021124 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   21124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21128:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   2112a:	4604      	mov	r4, r0
{
   2112c:	af00      	add	r7, sp, #0
	if (at_response == NULL || modem_evt == NULL) {
   2112e:	b360      	cbz	r0, 2118a <parse_mdmev+0x66>
   21130:	b359      	cbz	r1, 2118a <parse_mdmev+0x66>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   21132:	2108      	movs	r1, #8
   21134:	4a16      	ldr	r2, [pc, #88]	; (21190 <parse_mdmev+0x6c>)
   21136:	f7fe ffc5 	bl	200c4 <response_is_valid>
   2113a:	b9a0      	cbnz	r0, 21166 <parse_mdmev+0x42>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   2113c:	466c      	mov	r4, sp
   2113e:	b088      	sub	sp, #32
   21140:	466a      	mov	r2, sp
   21142:	4b14      	ldr	r3, [pc, #80]	; (21194 <parse_mdmev+0x70>)
   21144:	4814      	ldr	r0, [pc, #80]	; (21198 <parse_mdmev+0x74>)
   21146:	6153      	str	r3, [r2, #20]
   21148:	4b14      	ldr	r3, [pc, #80]	; (2119c <parse_mdmev+0x78>)
   2114a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2114e:	6193      	str	r3, [r2, #24]
   21150:	2303      	movs	r3, #3
   21152:	f842 3f10 	str.w	r3, [r2, #16]!
   21156:	f00e f997 	bl	2f488 <z_log_msg_static_create.constprop.0>
		return -EIO;
   2115a:	f06f 0004 	mvn.w	r0, #4
   2115e:	46a5      	mov	sp, r4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   21160:	46bd      	mov	sp, r7
   21162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   21166:	2500      	movs	r5, #0
   21168:	f8df 8034 	ldr.w	r8, [pc, #52]	; 211a0 <parse_mdmev+0x7c>
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   2116c:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   2116e:	4621      	mov	r1, r4
   21170:	f858 0b04 	ldr.w	r0, [r8], #4
   21174:	f7e8 f84b 	bl	920e <strcmp>
   21178:	b908      	cbnz	r0, 2117e <parse_mdmev+0x5a>
			*modem_evt = i;
   2117a:	7035      	strb	r5, [r6, #0]
			return 0;
   2117c:	e7f0      	b.n	21160 <parse_mdmev+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2117e:	3501      	adds	r5, #1
   21180:	2d0a      	cmp	r5, #10
   21182:	d1f4      	bne.n	2116e <parse_mdmev+0x4a>
	return -ENODATA;
   21184:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   21188:	e7ea      	b.n	21160 <parse_mdmev+0x3c>
		return -EINVAL;
   2118a:	f06f 0015 	mvn.w	r0, #21
   2118e:	e7e7      	b.n	21160 <parse_mdmev+0x3c>
   21190:	0003a3ab 	.word	0x0003a3ab
   21194:	0003a3b4 	.word	0x0003a3b4
   21198:	00031c34 	.word	0x00031c34
   2119c:	0003a486 	.word	0x0003a486
   211a0:	00032788 	.word	0x00032788

000211a4 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   211a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (err) {
   211a6:	4604      	mov	r4, r0
{
   211a8:	af00      	add	r7, sp, #0
	if (err) {
   211aa:	b1b0      	cbz	r0, 211da <on_modem_init+0x36>
		if (err == NRF_MODEM_DFU_RESULT_OK) {
   211ac:	4b22      	ldr	r3, [pc, #136]	; (21238 <on_modem_init+0x94>)
   211ae:	4298      	cmp	r0, r3
   211b0:	d011      	beq.n	211d6 <on_modem_init+0x32>
			LOG_DBG("Modem DFU, lte_lc not initialized");
			return;
		}
		LOG_ERR("Modem library init error: %d, lte_lc not initialized", err);
   211b2:	466d      	mov	r5, sp
   211b4:	b088      	sub	sp, #32
   211b6:	466a      	mov	r2, sp
   211b8:	4b20      	ldr	r3, [pc, #128]	; (2123c <on_modem_init+0x98>)
   211ba:	6153      	str	r3, [r2, #20]
   211bc:	4b20      	ldr	r3, [pc, #128]	; (21240 <on_modem_init+0x9c>)
   211be:	e9c2 3006 	strd	r3, r0, [r2, #24]
   211c2:	2304      	movs	r3, #4
   211c4:	f842 3f10 	str.w	r3, [r2, #16]!
   211c8:	2300      	movs	r3, #0
   211ca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   211ce:	481d      	ldr	r0, [pc, #116]	; (21244 <on_modem_init+0xa0>)
   211d0:	f7ee fb0e 	bl	f7f0 <z_impl_z_log_msg_static_create>
   211d4:	46ad      	mov	sp, r5
	if (err) {
		LOG_ERR("Lte_lc failed to initialize and connect, err %d", err);
		return;
	}
#endif
}
   211d6:	46bd      	mov	sp, r7
   211d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   211da:	f7fe f93d 	bl	1f458 <lte_lc_psm_req>
	if (err) {
   211de:	4605      	mov	r5, r0
   211e0:	b190      	cbz	r0, 21208 <on_modem_init+0x64>
		LOG_ERR("Failed to configure PSM, err %d", err);
   211e2:	466e      	mov	r6, sp
   211e4:	b088      	sub	sp, #32
   211e6:	466a      	mov	r2, sp
   211e8:	4b17      	ldr	r3, [pc, #92]	; (21248 <on_modem_init+0xa4>)
   211ea:	6153      	str	r3, [r2, #20]
   211ec:	4b14      	ldr	r3, [pc, #80]	; (21240 <on_modem_init+0x9c>)
   211ee:	e9c2 3006 	strd	r3, r0, [r2, #24]
   211f2:	2304      	movs	r3, #4
   211f4:	f842 3f10 	str.w	r3, [r2, #16]!
   211f8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   211fc:	4623      	mov	r3, r4
   211fe:	4811      	ldr	r0, [pc, #68]	; (21244 <on_modem_init+0xa0>)
   21200:	f7ee faf6 	bl	f7f0 <z_impl_z_log_msg_static_create>
   21204:	46b5      	mov	sp, r6
		return;
   21206:	e7e6      	b.n	211d6 <on_modem_init+0x32>
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   21208:	f7fe fb14 	bl	1f834 <lte_lc_edrx_req>
	if (err) {
   2120c:	2800      	cmp	r0, #0
   2120e:	d0e2      	beq.n	211d6 <on_modem_init+0x32>
		LOG_ERR("Failed to configure eDRX, err %d", err);
   21210:	466c      	mov	r4, sp
   21212:	b088      	sub	sp, #32
   21214:	466a      	mov	r2, sp
   21216:	4b0d      	ldr	r3, [pc, #52]	; (2124c <on_modem_init+0xa8>)
   21218:	6153      	str	r3, [r2, #20]
   2121a:	4b09      	ldr	r3, [pc, #36]	; (21240 <on_modem_init+0x9c>)
   2121c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   21220:	2304      	movs	r3, #4
   21222:	f842 3f10 	str.w	r3, [r2, #16]!
   21226:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2122a:	462b      	mov	r3, r5
   2122c:	4805      	ldr	r0, [pc, #20]	; (21244 <on_modem_init+0xa0>)
   2122e:	f7ee fadf 	bl	f7f0 <z_impl_z_log_msg_static_create>
   21232:	46a5      	mov	sp, r4
		return;
   21234:	e7cf      	b.n	211d6 <on_modem_init+0x32>
   21236:	bf00      	nop
   21238:	05500001 	.word	0x05500001
   2123c:	0003a540 	.word	0x0003a540
   21240:	0003a5c2 	.word	0x0003a5c2
   21244:	00031c2c 	.word	0x00031c2c
   21248:	0003a579 	.word	0x0003a579
   2124c:	0003a59d 	.word	0x0003a59d

00021250 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   21250:	b510      	push	{r4, lr}
   21252:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   21254:	4a09      	ldr	r2, [pc, #36]	; (2127c <modem_info_parse+0x2c>)
{
   21256:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   21258:	7a63      	ldrb	r3, [r4, #9]
   2125a:	2100      	movs	r1, #0
   2125c:	f7fd fcb0 	bl	1ebc0 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   21260:	f110 0f0b 	cmn.w	r0, #11
   21264:	d000      	beq.n	21268 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   21266:	b940      	cbnz	r0, 2127a <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   21268:	4804      	ldr	r0, [pc, #16]	; (2127c <modem_info_parse+0x2c>)
   2126a:	f00e f8d5 	bl	2f418 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2126e:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
   21270:	4298      	cmp	r0, r3
   21272:	bf8c      	ite	hi
   21274:	f06f 000a 	mvnhi.w	r0, #10
   21278:	2000      	movls	r0, #0
}
   2127a:	bd10      	pop	{r4, pc}
   2127c:	2000e764 	.word	0x2000e764

00021280 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   21280:	b590      	push	{r4, r7, lr}
   21282:	b085      	sub	sp, #20
   21284:	4604      	mov	r4, r0
   21286:	af00      	add	r7, sp, #0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   21288:	4a16      	ldr	r2, [pc, #88]	; (212e4 <modem_info_rsrp_subscribe_handler+0x64>)
   2128a:	1d3b      	adds	r3, r7, #4
   2128c:	ca07      	ldmia	r2, {r0, r1, r2}
   2128e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   21292:	4621      	mov	r1, r4
   21294:	4618      	mov	r0, r3
   21296:	f7ff ffdb 	bl	21250 <modem_info_parse>
	if (err != 0) {
   2129a:	b198      	cbz	r0, 212c4 <modem_info_rsrp_subscribe_handler+0x44>
		LOG_ERR("modem_info_parse failed to parse "
   2129c:	466c      	mov	r4, sp
   2129e:	b088      	sub	sp, #32
   212a0:	466a      	mov	r2, sp
   212a2:	4b11      	ldr	r3, [pc, #68]	; (212e8 <modem_info_rsrp_subscribe_handler+0x68>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   212a4:	6153      	str	r3, [r2, #20]
   212a6:	4b11      	ldr	r3, [pc, #68]	; (212ec <modem_info_rsrp_subscribe_handler+0x6c>)
   212a8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   212ac:	e9c2 3006 	strd	r3, r0, [r2, #24]
   212b0:	2304      	movs	r3, #4
   212b2:	480f      	ldr	r0, [pc, #60]	; (212f0 <modem_info_rsrp_subscribe_handler+0x70>)
   212b4:	f842 3f10 	str.w	r3, [r2, #16]!
   212b8:	f00e f92b 	bl	2f512 <z_log_msg_static_create.constprop.0>
   212bc:	46a5      	mov	sp, r4
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   212be:	3714      	adds	r7, #20
   212c0:	46bd      	mov	sp, r7
   212c2:	bd90      	pop	{r4, r7, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   212c4:	2101      	movs	r1, #1
   212c6:	480b      	ldr	r0, [pc, #44]	; (212f4 <modem_info_rsrp_subscribe_handler+0x74>)
   212c8:	1cba      	adds	r2, r7, #2
   212ca:	f00e f83b 	bl	2f344 <at_params_unsigned_short_get>
	if (err != 0) {
   212ce:	b120      	cbz	r0, 212da <modem_info_rsrp_subscribe_handler+0x5a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   212d0:	466c      	mov	r4, sp
   212d2:	b088      	sub	sp, #32
   212d4:	466a      	mov	r2, sp
   212d6:	4b08      	ldr	r3, [pc, #32]	; (212f8 <modem_info_rsrp_subscribe_handler+0x78>)
   212d8:	e7e4      	b.n	212a4 <modem_info_rsrp_subscribe_handler+0x24>
	modem_info_rsrp_cb(param_value);
   212da:	4b08      	ldr	r3, [pc, #32]	; (212fc <modem_info_rsrp_subscribe_handler+0x7c>)
   212dc:	78b8      	ldrb	r0, [r7, #2]
   212de:	681b      	ldr	r3, [r3, #0]
   212e0:	4798      	blx	r3
   212e2:	e7ec      	b.n	212be <modem_info_rsrp_subscribe_handler+0x3e>
   212e4:	00031da4 	.word	0x00031da4
   212e8:	0003a5d0 	.word	0x0003a5d0
   212ec:	0003a67f 	.word	0x0003a67f
   212f0:	00031c44 	.word	0x00031c44
   212f4:	2000e764 	.word	0x2000e764
   212f8:	0003a60b 	.word	0x0003a60b
   212fc:	2000e76c 	.word	0x2000e76c

00021300 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   21300:	b598      	push	{r3, r4, r7, lr}
   21302:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   21304:	f7ee f90e 	bl	f524 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21308:	466c      	mov	r4, sp
   2130a:	b088      	sub	sp, #32
   2130c:	466a      	mov	r2, sp
   2130e:	4b08      	ldr	r3, [pc, #32]	; (21330 <k_sys_fatal_error_handler+0x30>)
   21310:	6153      	str	r3, [r2, #20]
   21312:	4b08      	ldr	r3, [pc, #32]	; (21334 <k_sys_fatal_error_handler+0x34>)
   21314:	6193      	str	r3, [r2, #24]
   21316:	2303      	movs	r3, #3
   21318:	f842 3f10 	str.w	r3, [r2, #16]!
   2131c:	4806      	ldr	r0, [pc, #24]	; (21338 <k_sys_fatal_error_handler+0x38>)
   2131e:	2300      	movs	r3, #0
   21320:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21324:	f7ee fa64 	bl	f7f0 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   21328:	2000      	movs	r0, #0
   2132a:	46a5      	mov	sp, r4
   2132c:	f7f0 fdb0 	bl	11e90 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21330:	0003a80b 	.word	0x0003a80b
   21334:	0003a820 	.word	0x0003a820
   21338:	00031bfc 	.word	0x00031bfc

0002133c <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   2133c:	b598      	push	{r3, r4, r7, lr}
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   2133e:	4918      	ldr	r1, [pc, #96]	; (213a0 <on_modem_lib_init.part.0+0x64>)
static void on_modem_lib_init(int ret, void *ctx)
   21340:	af00      	add	r7, sp, #0
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   21342:	4818      	ldr	r0, [pc, #96]	; (213a4 <on_modem_lib_init.part.0+0x68>)
   21344:	f001 fc7e 	bl	22c44 <nrf_modem_at_printf>
		if (err) {
   21348:	b188      	cbz	r0, 2136e <on_modem_lib_init.part.0+0x32>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   2134a:	466c      	mov	r4, sp
   2134c:	b088      	sub	sp, #32
   2134e:	466a      	mov	r2, sp
   21350:	4b15      	ldr	r3, [pc, #84]	; (213a8 <on_modem_lib_init.part.0+0x6c>)
   21352:	6153      	str	r3, [r2, #20]
   21354:	4b15      	ldr	r3, [pc, #84]	; (213ac <on_modem_lib_init.part.0+0x70>)
   21356:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2135a:	2304      	movs	r3, #4
   2135c:	f842 3f10 	str.w	r3, [r2, #16]!
   21360:	2300      	movs	r3, #0
   21362:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21366:	4812      	ldr	r0, [pc, #72]	; (213b0 <on_modem_lib_init.part.0+0x74>)
   21368:	f7ee fa42 	bl	f7f0 <z_impl_z_log_msg_static_create>
   2136c:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   2136e:	4911      	ldr	r1, [pc, #68]	; (213b4 <on_modem_lib_init.part.0+0x78>)
   21370:	480c      	ldr	r0, [pc, #48]	; (213a4 <on_modem_lib_init.part.0+0x68>)
   21372:	f001 fc67 	bl	22c44 <nrf_modem_at_printf>
		if (err) {
   21376:	b188      	cbz	r0, 2139c <on_modem_lib_init.part.0+0x60>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   21378:	466c      	mov	r4, sp
   2137a:	b088      	sub	sp, #32
   2137c:	466a      	mov	r2, sp
   2137e:	4b0e      	ldr	r3, [pc, #56]	; (213b8 <on_modem_lib_init.part.0+0x7c>)
   21380:	6153      	str	r3, [r2, #20]
   21382:	4b0a      	ldr	r3, [pc, #40]	; (213ac <on_modem_lib_init.part.0+0x70>)
   21384:	e9c2 3006 	strd	r3, r0, [r2, #24]
   21388:	2304      	movs	r3, #4
   2138a:	f842 3f10 	str.w	r3, [r2, #16]!
   2138e:	2300      	movs	r3, #0
   21390:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21394:	4806      	ldr	r0, [pc, #24]	; (213b0 <on_modem_lib_init.part.0+0x74>)
   21396:	f7ee fa2b 	bl	f7f0 <z_impl_z_log_msg_static_create>
   2139a:	46a5      	mov	sp, r4
		}
	}
}
   2139c:	46bd      	mov	sp, r7
   2139e:	bd98      	pop	{r3, r4, r7, pc}
   213a0:	0003a846 	.word	0x0003a846
   213a4:	00039324 	.word	0x00039324
   213a8:	0003a865 	.word	0x0003a865
   213ac:	0003a8de 	.word	0x0003a8de
   213b0:	00031c3c 	.word	0x00031c3c
   213b4:	0003a896 	.word	0x0003a896
   213b8:	0003a8ae 	.word	0x0003a8ae

000213bc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   213bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   213c0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   213c2:	4b15      	ldr	r3, [pc, #84]	; (21418 <tfm_ns_interface_dispatch+0x5c>)
   213c4:	4604      	mov	r4, r0
   213c6:	f893 8000 	ldrb.w	r8, [r3]
   213ca:	460d      	mov	r5, r1
   213cc:	4616      	mov	r6, r2
   213ce:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   213d0:	f1b8 0f00 	cmp.w	r8, #0
   213d4:	d115      	bne.n	21402 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   213d6:	4668      	mov	r0, sp
   213d8:	f00a fd79 	bl	2bece <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   213dc:	463a      	mov	r2, r7
   213de:	4631      	mov	r1, r6
   213e0:	4628      	mov	r0, r5
   213e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   213e4:	47a0      	blx	r4
   213e6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   213e8:	4668      	mov	r0, sp
   213ea:	f00a fd71 	bl	2bed0 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   213ee:	f1b8 0f00 	cmp.w	r8, #0
   213f2:	d002      	beq.n	213fa <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   213f4:	4809      	ldr	r0, [pc, #36]	; (2141c <tfm_ns_interface_dispatch+0x60>)
   213f6:	f003 fd39 	bl	24e6c <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   213fa:	4620      	mov	r0, r4
   213fc:	b022      	add	sp, #136	; 0x88
   213fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   21402:	f04f 32ff 	mov.w	r2, #4294967295
   21406:	f04f 33ff 	mov.w	r3, #4294967295
   2140a:	4804      	ldr	r0, [pc, #16]	; (2141c <tfm_ns_interface_dispatch+0x60>)
   2140c:	f003 fc5e 	bl	24ccc <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   21410:	2800      	cmp	r0, #0
   21412:	d0e0      	beq.n	213d6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   21414:	241f      	movs	r4, #31
   21416:	e7f0      	b.n	213fa <tfm_ns_interface_dispatch+0x3e>
   21418:	2001048b 	.word	0x2001048b
   2141c:	2000ceb8 	.word	0x2000ceb8

00021420 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   21420:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   21422:	2630      	movs	r6, #48	; 0x30
{
   21424:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   21426:	ab06      	add	r3, sp, #24
{
   21428:	4605      	mov	r5, r0
   2142a:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   2142c:	4632      	mov	r2, r6
   2142e:	2100      	movs	r1, #0
   21430:	4618      	mov	r0, r3
   21432:	f00f fa26 	bl	30882 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   21436:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   2143a:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   2143e:	b154      	cbz	r4, 21456 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   21440:	2301      	movs	r3, #1
   21442:	aa04      	add	r2, sp, #16
   21444:	9200      	str	r2, [sp, #0]
   21446:	2100      	movs	r1, #0
   21448:	4804      	ldr	r0, [pc, #16]	; (2145c <psa_generate_random+0x3c>)
   2144a:	9301      	str	r3, [sp, #4]
   2144c:	aa02      	add	r2, sp, #8
   2144e:	f000 f807 	bl	21460 <psa_call>
}
   21452:	b012      	add	sp, #72	; 0x48
   21454:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   21456:	4620      	mov	r0, r4
   21458:	e7fb      	b.n	21452 <psa_generate_random+0x32>
   2145a:	bf00      	nop
   2145c:	40000100 	.word	0x40000100

00021460 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   21460:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   21462:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   21466:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   2146a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   2146c:	d20d      	bcs.n	2148a <psa_call+0x2a>
        (type < INT16_MIN) ||
   2146e:	ea43 0504 	orr.w	r5, r3, r4
   21472:	2dff      	cmp	r5, #255	; 0xff
   21474:	d809      	bhi.n	2148a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   21476:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   2147a:	4613      	mov	r3, r2
   2147c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   21480:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   21482:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   21484:	4803      	ldr	r0, [pc, #12]	; (21494 <psa_call+0x34>)
   21486:	f7ff bf99 	b.w	213bc <tfm_ns_interface_dispatch>
}
   2148a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2148e:	bc30      	pop	{r4, r5}
   21490:	4770      	bx	lr
   21492:	bf00      	nop
   21494:	00007c11 	.word	0x00007c11

00021498 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   21498:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2149a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2149c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2149e:	fab2 f382 	clz	r3, r2
   214a2:	f1c3 031f 	rsb	r3, r3, #31
   214a6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   214a8:	fa05 f403 	lsl.w	r4, r5, r3
   214ac:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   214b0:	e8d0 6fef 	ldaex	r6, [r0]
   214b4:	4296      	cmp	r6, r2
   214b6:	d104      	bne.n	214c2 <nrfx_flag32_alloc+0x2a>
   214b8:	e8c0 4fec 	stlex	ip, r4, [r0]
   214bc:	f1bc 0f00 	cmp.w	ip, #0
   214c0:	d1f6      	bne.n	214b0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   214c2:	d1eb      	bne.n	2149c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   214c4:	4801      	ldr	r0, [pc, #4]	; (214cc <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   214c6:	700b      	strb	r3, [r1, #0]
}
   214c8:	bd70      	pop	{r4, r5, r6, pc}
   214ca:	bf00      	nop
   214cc:	0bad0000 	.word	0x0bad0000

000214d0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   214d0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   214d2:	6803      	ldr	r3, [r0, #0]
   214d4:	40cb      	lsrs	r3, r1
   214d6:	07db      	lsls	r3, r3, #31
   214d8:	d410      	bmi.n	214fc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   214da:	2301      	movs	r3, #1
   214dc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   214de:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   214e0:	ea43 0102 	orr.w	r1, r3, r2
   214e4:	e8d0 4fef 	ldaex	r4, [r0]
   214e8:	4294      	cmp	r4, r2
   214ea:	d104      	bne.n	214f6 <nrfx_flag32_free+0x26>
   214ec:	e8c0 1fec 	stlex	ip, r1, [r0]
   214f0:	f1bc 0f00 	cmp.w	ip, #0
   214f4:	d1f6      	bne.n	214e4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   214f6:	d1f2      	bne.n	214de <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   214f8:	4801      	ldr	r0, [pc, #4]	; (21500 <nrfx_flag32_free+0x30>)
}
   214fa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   214fc:	4801      	ldr	r0, [pc, #4]	; (21504 <nrfx_flag32_free+0x34>)
   214fe:	e7fc      	b.n	214fa <nrfx_flag32_free+0x2a>
   21500:	0bad0000 	.word	0x0bad0000
   21504:	0bad0004 	.word	0x0bad0004

00021508 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   21508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2150a:	4b34      	ldr	r3, [pc, #208]	; (215dc <clock_stop+0xd4>)
    switch (domain)
   2150c:	4604      	mov	r4, r0
   2150e:	b158      	cbz	r0, 21528 <clock_stop+0x20>
   21510:	2801      	cmp	r0, #1
   21512:	d027      	beq.n	21564 <clock_stop+0x5c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21514:	4932      	ldr	r1, [pc, #200]	; (215e0 <clock_stop+0xd8>)
   21516:	4833      	ldr	r0, [pc, #204]	; (215e4 <clock_stop+0xdc>)
   21518:	23d8      	movs	r3, #216	; 0xd8
   2151a:	4a33      	ldr	r2, [pc, #204]	; (215e8 <clock_stop+0xe0>)
   2151c:	f009 fc4c 	bl	2adb8 <assert_print>
   21520:	21d8      	movs	r1, #216	; 0xd8
   21522:	4831      	ldr	r0, [pc, #196]	; (215e8 <clock_stop+0xe0>)
            NRFX_ASSERT(0);
   21524:	f009 fc41 	bl	2adaa <assert_post_action>
    p_reg->INTENCLR = mask;
   21528:	2202      	movs	r2, #2
   2152a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2152e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   21532:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21536:	2201      	movs	r2, #1
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   21538:	4607      	mov	r7, r0
   2153a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2153c:	2301      	movs	r3, #1
   2153e:	f242 7510 	movw	r5, #10000	; 0x2710
   21542:	4e26      	ldr	r6, [pc, #152]	; (215dc <clock_stop+0xd4>)
   21544:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   21548:	b1bc      	cbz	r4, 2157a <clock_stop+0x72>
   2154a:	2c01      	cmp	r4, #1
   2154c:	d033      	beq.n	215b6 <clock_stop+0xae>
            NRFX_ASSERT(0);
   2154e:	4924      	ldr	r1, [pc, #144]	; (215e0 <clock_stop+0xd8>)
   21550:	4824      	ldr	r0, [pc, #144]	; (215e4 <clock_stop+0xdc>)
   21552:	f240 3347 	movw	r3, #839	; 0x347
   21556:	4a25      	ldr	r2, [pc, #148]	; (215ec <clock_stop+0xe4>)
   21558:	f009 fc2e 	bl	2adb8 <assert_print>
   2155c:	f240 3147 	movw	r1, #839	; 0x347
   21560:	4822      	ldr	r0, [pc, #136]	; (215ec <clock_stop+0xe4>)
   21562:	e7df      	b.n	21524 <clock_stop+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21564:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   21566:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2156a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2156e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   21572:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21576:	6058      	str	r0, [r3, #4]
   21578:	e7e0      	b.n	2153c <clock_stop+0x34>
            if (p_clk_src != NULL)
   2157a:	b18f      	cbz	r7, 215a0 <clock_stop+0x98>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2157c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   21580:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21584:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21586:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2158a:	03da      	lsls	r2, r3, #15
   2158c:	d511      	bpl.n	215b2 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2158e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21592:	2801      	cmp	r0, #1
   21594:	d10d      	bne.n	215b2 <clock_stop+0xaa>
   21596:	f00d ffc9 	bl	2f52c <nrfx_busy_wait>
   2159a:	3d01      	subs	r5, #1
   2159c:	d1d4      	bne.n	21548 <clock_stop+0x40>
   2159e:	e008      	b.n	215b2 <clock_stop+0xaa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   215a0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   215a4:	03d9      	lsls	r1, r3, #15
   215a6:	d504      	bpl.n	215b2 <clock_stop+0xaa>
   215a8:	2001      	movs	r0, #1
   215aa:	f00d ffbf 	bl	2f52c <nrfx_busy_wait>
   215ae:	3d01      	subs	r5, #1
   215b0:	d1f6      	bne.n	215a0 <clock_stop+0x98>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   215b2:	b003      	add	sp, #12
   215b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   215b6:	b13f      	cbz	r7, 215c8 <clock_stop+0xc0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   215b8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   215bc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   215c0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   215c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   215c6:	e7e0      	b.n	2158a <clock_stop+0x82>
   215c8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   215cc:	03db      	lsls	r3, r3, #15
   215ce:	d5f0      	bpl.n	215b2 <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   215d0:	2001      	movs	r0, #1
   215d2:	f00d ffab 	bl	2f52c <nrfx_busy_wait>
   215d6:	3d01      	subs	r5, #1
   215d8:	d1f6      	bne.n	215c8 <clock_stop+0xc0>
   215da:	e7ea      	b.n	215b2 <clock_stop+0xaa>
   215dc:	40005000 	.word	0x40005000
   215e0:	000386dc 	.word	0x000386dc
   215e4:	00033bc2 	.word	0x00033bc2
   215e8:	0003a8fe 	.word	0x0003a8fe
   215ec:	0003a93b 	.word	0x0003a93b

000215f0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   215f0:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   215f2:	b958      	cbnz	r0, 2160c <nrfx_clock_init+0x1c>
   215f4:	490a      	ldr	r1, [pc, #40]	; (21620 <nrfx_clock_init+0x30>)
   215f6:	480b      	ldr	r0, [pc, #44]	; (21624 <nrfx_clock_init+0x34>)
   215f8:	f240 1315 	movw	r3, #277	; 0x115
   215fc:	4a0a      	ldr	r2, [pc, #40]	; (21628 <nrfx_clock_init+0x38>)
   215fe:	f009 fbdb 	bl	2adb8 <assert_print>
   21602:	f240 1115 	movw	r1, #277	; 0x115
   21606:	4808      	ldr	r0, [pc, #32]	; (21628 <nrfx_clock_init+0x38>)
   21608:	f009 fbcf 	bl	2adaa <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2160c:	4b07      	ldr	r3, [pc, #28]	; (2162c <nrfx_clock_init+0x3c>)
   2160e:	791a      	ldrb	r2, [r3, #4]
   21610:	b922      	cbnz	r2, 2161c <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21612:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   21614:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   21616:	4806      	ldr	r0, [pc, #24]	; (21630 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   21618:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2161a:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2161c:	4805      	ldr	r0, [pc, #20]	; (21634 <nrfx_clock_init+0x44>)
    return err_code;
   2161e:	e7fc      	b.n	2161a <nrfx_clock_init+0x2a>
   21620:	0003a96f 	.word	0x0003a96f
   21624:	00033bc2 	.word	0x00033bc2
   21628:	0003a8fe 	.word	0x0003a8fe
   2162c:	2000e770 	.word	0x2000e770
   21630:	0bad0000 	.word	0x0bad0000
   21634:	0bad000c 	.word	0x0bad000c

00021638 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21638:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2163a:	4b0d      	ldr	r3, [pc, #52]	; (21670 <nrfx_clock_enable+0x38>)
   2163c:	791b      	ldrb	r3, [r3, #4]
   2163e:	b95b      	cbnz	r3, 21658 <nrfx_clock_enable+0x20>
   21640:	490c      	ldr	r1, [pc, #48]	; (21674 <nrfx_clock_enable+0x3c>)
   21642:	480d      	ldr	r0, [pc, #52]	; (21678 <nrfx_clock_enable+0x40>)
   21644:	f44f 7397 	mov.w	r3, #302	; 0x12e
   21648:	4a0c      	ldr	r2, [pc, #48]	; (2167c <nrfx_clock_enable+0x44>)
   2164a:	f009 fbb5 	bl	2adb8 <assert_print>
   2164e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   21652:	480a      	ldr	r0, [pc, #40]	; (2167c <nrfx_clock_enable+0x44>)
   21654:	f009 fba9 	bl	2adaa <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21658:	2005      	movs	r0, #5
   2165a:	f7ef fec7 	bl	113ec <arch_irq_is_enabled>
   2165e:	b910      	cbnz	r0, 21666 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21660:	2005      	movs	r0, #5
   21662:	f7ef fea1 	bl	113a8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21666:	2201      	movs	r2, #1
   21668:	4b05      	ldr	r3, [pc, #20]	; (21680 <nrfx_clock_enable+0x48>)
   2166a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2166e:	bd08      	pop	{r3, pc}
   21670:	2000e770 	.word	0x2000e770
   21674:	0003a97d 	.word	0x0003a97d
   21678:	00033bc2 	.word	0x00033bc2
   2167c:	0003a8fe 	.word	0x0003a8fe
   21680:	40005000 	.word	0x40005000

00021684 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   21684:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21686:	4b2a      	ldr	r3, [pc, #168]	; (21730 <nrfx_clock_start+0xac>)
   21688:	791b      	ldrb	r3, [r3, #4]
   2168a:	b95b      	cbnz	r3, 216a4 <nrfx_clock_start+0x20>
   2168c:	4929      	ldr	r1, [pc, #164]	; (21734 <nrfx_clock_start+0xb0>)
   2168e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   21692:	4a29      	ldr	r2, [pc, #164]	; (21738 <nrfx_clock_start+0xb4>)
   21694:	4829      	ldr	r0, [pc, #164]	; (2173c <nrfx_clock_start+0xb8>)
   21696:	f009 fb8f 	bl	2adb8 <assert_print>
   2169a:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2169e:	4826      	ldr	r0, [pc, #152]	; (21738 <nrfx_clock_start+0xb4>)
   216a0:	f009 fb83 	bl	2adaa <assert_post_action>
    switch (domain)
   216a4:	4b26      	ldr	r3, [pc, #152]	; (21740 <nrfx_clock_start+0xbc>)
   216a6:	b158      	cbz	r0, 216c0 <nrfx_clock_start+0x3c>
   216a8:	2801      	cmp	r0, #1
   216aa:	d037      	beq.n	2171c <nrfx_clock_start+0x98>
            NRFX_ASSERT(0);
   216ac:	4925      	ldr	r1, [pc, #148]	; (21744 <nrfx_clock_start+0xc0>)
   216ae:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   216b2:	4a21      	ldr	r2, [pc, #132]	; (21738 <nrfx_clock_start+0xb4>)
   216b4:	4821      	ldr	r0, [pc, #132]	; (2173c <nrfx_clock_start+0xb8>)
   216b6:	f009 fb7f 	bl	2adb8 <assert_print>
   216ba:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   216be:	e7ee      	b.n	2169e <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   216c0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   216c4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   216c8:	03c9      	lsls	r1, r1, #15
   216ca:	d511      	bpl.n	216f0 <nrfx_clock_start+0x6c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   216cc:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   216d0:	2b02      	cmp	r3, #2
   216d2:	d11c      	bne.n	2170e <nrfx_clock_start+0x8a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   216d4:	4a1a      	ldr	r2, [pc, #104]	; (21740 <nrfx_clock_start+0xbc>)
   216d6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216da:	2300      	movs	r3, #0
   216dc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   216e0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   216e4:	2302      	movs	r3, #2
   216e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216ea:	2301      	movs	r3, #1
   216ec:	6093      	str	r3, [r2, #8]
}
   216ee:	e00d      	b.n	2170c <nrfx_clock_start+0x88>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   216f0:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   216f4:	07d2      	lsls	r2, r2, #31
   216f6:	d50f      	bpl.n	21718 <nrfx_clock_start+0x94>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   216f8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   216fc:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   21700:	3a01      	subs	r2, #1
   21702:	2a01      	cmp	r2, #1
   21704:	d805      	bhi.n	21712 <nrfx_clock_start+0x8e>
    p_reg->INTENSET = mask;
   21706:	2202      	movs	r2, #2
   21708:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   2170c:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2170e:	2b01      	cmp	r3, #1
   21710:	d002      	beq.n	21718 <nrfx_clock_start+0x94>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   21712:	2000      	movs	r0, #0
   21714:	f7ff fef8 	bl	21508 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   21718:	2301      	movs	r3, #1
   2171a:	e7db      	b.n	216d4 <nrfx_clock_start+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2171c:	2200      	movs	r2, #0
   2171e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21722:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   21726:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2172a:	6018      	str	r0, [r3, #0]
}
   2172c:	e7ee      	b.n	2170c <nrfx_clock_start+0x88>
   2172e:	bf00      	nop
   21730:	2000e770 	.word	0x2000e770
   21734:	0003a97d 	.word	0x0003a97d
   21738:	0003a8fe 	.word	0x0003a8fe
   2173c:	00033bc2 	.word	0x00033bc2
   21740:	40005000 	.word	0x40005000
   21744:	000386dc 	.word	0x000386dc

00021748 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   21748:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2174a:	4b09      	ldr	r3, [pc, #36]	; (21770 <nrfx_clock_stop+0x28>)
   2174c:	791b      	ldrb	r3, [r3, #4]
   2174e:	b95b      	cbnz	r3, 21768 <nrfx_clock_stop+0x20>
   21750:	4908      	ldr	r1, [pc, #32]	; (21774 <nrfx_clock_stop+0x2c>)
   21752:	4809      	ldr	r0, [pc, #36]	; (21778 <nrfx_clock_stop+0x30>)
   21754:	f240 13ad 	movw	r3, #429	; 0x1ad
   21758:	4a08      	ldr	r2, [pc, #32]	; (2177c <nrfx_clock_stop+0x34>)
   2175a:	f009 fb2d 	bl	2adb8 <assert_print>
   2175e:	f240 11ad 	movw	r1, #429	; 0x1ad
   21762:	4806      	ldr	r0, [pc, #24]	; (2177c <nrfx_clock_stop+0x34>)
   21764:	f009 fb21 	bl	2adaa <assert_post_action>
    clock_stop(domain);
}
   21768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   2176c:	f7ff becc 	b.w	21508 <clock_stop>
   21770:	2000e770 	.word	0x2000e770
   21774:	0003a97d 	.word	0x0003a97d
   21778:	00033bc2 	.word	0x00033bc2
   2177c:	0003a8fe 	.word	0x0003a8fe

00021780 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   21780:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21782:	4b17      	ldr	r3, [pc, #92]	; (217e0 <nrfx_power_clock_irq_handler+0x60>)
   21784:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   21788:	b152      	cbz	r2, 217a0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2178a:	2000      	movs	r0, #0
   2178c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   21790:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   21794:	2201      	movs	r2, #1
   21796:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2179a:	4b12      	ldr	r3, [pc, #72]	; (217e4 <nrfx_power_clock_irq_handler+0x64>)
   2179c:	681b      	ldr	r3, [r3, #0]
   2179e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   217a0:	4b0f      	ldr	r3, [pc, #60]	; (217e0 <nrfx_power_clock_irq_handler+0x60>)
   217a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   217a6:	b18a      	cbz	r2, 217cc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   217a8:	2200      	movs	r2, #0
   217aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   217ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   217b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   217b6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   217ba:	f002 0203 	and.w	r2, r2, #3
   217be:	2a01      	cmp	r2, #1
   217c0:	f04f 0102 	mov.w	r1, #2
   217c4:	d103      	bne.n	217ce <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   217c6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   217ca:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   217cc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   217ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   217d2:	4b04      	ldr	r3, [pc, #16]	; (217e4 <nrfx_power_clock_irq_handler+0x64>)
   217d4:	2001      	movs	r0, #1
}
   217d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   217da:	681b      	ldr	r3, [r3, #0]
   217dc:	4718      	bx	r3
   217de:	bf00      	nop
   217e0:	40005000 	.word	0x40005000
   217e4:	2000e770 	.word	0x2000e770

000217e8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   217e8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   217ea:	4801      	ldr	r0, [pc, #4]	; (217f0 <nrfx_dppi_channel_alloc+0x8>)
   217ec:	f7ff be54 	b.w	21498 <nrfx_flag32_alloc>
   217f0:	2000c9b8 	.word	0x2000c9b8

000217f4 <nrfx_dppi_channel_enable>:
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    return nrfx_flag32_free(&m_allocated_channels, channel);
}

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
   217f4:	b510      	push	{r4, lr}
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   217f6:	4b08      	ldr	r3, [pc, #32]	; (21818 <nrfx_dppi_channel_enable+0x24>)
{
   217f8:	4604      	mov	r4, r0
    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   217fa:	4601      	mov	r1, r0
   217fc:	6818      	ldr	r0, [r3, #0]
   217fe:	f00d fe97 	bl	2f530 <nrfx_flag32_is_allocated>
   21802:	b130      	cbz	r0, 21812 <nrfx_dppi_channel_enable+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   21804:	2301      	movs	r3, #1
   21806:	4a05      	ldr	r2, [pc, #20]	; (2181c <nrfx_dppi_channel_enable+0x28>)
   21808:	40a3      	lsls	r3, r4
    nrfx_err_t err_code = NRFX_SUCCESS;
   2180a:	4805      	ldr	r0, [pc, #20]	; (21820 <nrfx_dppi_channel_enable+0x2c>)
   2180c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21810:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_PARAM;
   21812:	4804      	ldr	r0, [pc, #16]	; (21824 <nrfx_dppi_channel_enable+0x30>)
    return err_code;
   21814:	e7fc      	b.n	21810 <nrfx_dppi_channel_enable+0x1c>
   21816:	bf00      	nop
   21818:	2000c9b8 	.word	0x2000c9b8
   2181c:	40017000 	.word	0x40017000
   21820:	0bad0000 	.word	0x0bad0000
   21824:	0bad0004 	.word	0x0bad0004

00021828 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21828:	4b03      	ldr	r3, [pc, #12]	; (21838 <pin_in_use_by_te+0x10>)
   2182a:	300c      	adds	r0, #12
   2182c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21830:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21834:	4770      	bx	lr
   21836:	bf00      	nop
   21838:	2000c9bc 	.word	0x2000c9bc

0002183c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2183c:	4b04      	ldr	r3, [pc, #16]	; (21850 <pin_has_trigger+0x14>)
   2183e:	300c      	adds	r0, #12
   21840:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21844:	f010 001c 	ands.w	r0, r0, #28
   21848:	bf18      	it	ne
   2184a:	2001      	movne	r0, #1
   2184c:	4770      	bx	lr
   2184e:	bf00      	nop
   21850:	2000c9bc 	.word	0x2000c9bc

00021854 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21854:	4b03      	ldr	r3, [pc, #12]	; (21864 <pin_is_output+0x10>)
   21856:	300c      	adds	r0, #12
   21858:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2185c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   21860:	4770      	bx	lr
   21862:	bf00      	nop
   21864:	2000c9bc 	.word	0x2000c9bc

00021868 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   21868:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2186a:	4c0d      	ldr	r4, [pc, #52]	; (218a0 <call_handler+0x38>)
   2186c:	f100 030c 	add.w	r3, r0, #12
   21870:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   21874:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21876:	05da      	lsls	r2, r3, #23
{
   21878:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2187a:	d507      	bpl.n	2188c <call_handler+0x24>
   2187c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   21880:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   21884:	6852      	ldr	r2, [r2, #4]
   21886:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2188a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2188c:	6923      	ldr	r3, [r4, #16]
   2188e:	b12b      	cbz	r3, 2189c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   21890:	4631      	mov	r1, r6
   21892:	4628      	mov	r0, r5
   21894:	6962      	ldr	r2, [r4, #20]
    }
}
   21896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2189a:	4718      	bx	r3
}
   2189c:	bd70      	pop	{r4, r5, r6, pc}
   2189e:	bf00      	nop
   218a0:	2000c9bc 	.word	0x2000c9bc

000218a4 <release_handler>:
{
   218a4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   218a6:	4a18      	ldr	r2, [pc, #96]	; (21908 <release_handler+0x64>)
   218a8:	300c      	adds	r0, #12
   218aa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   218ae:	05d9      	lsls	r1, r3, #23
   218b0:	d51d      	bpl.n	218ee <release_handler+0x4a>
   218b2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   218b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   218ba:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   218be:	2000      	movs	r0, #0
   218c0:	f102 0416 	add.w	r4, r2, #22
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   218c4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   218c8:	f413 7f80 	tst.w	r3, #256	; 0x100
   218cc:	d003      	beq.n	218d6 <release_handler+0x32>
   218ce:	f3c3 2343 	ubfx	r3, r3, #9, #4
   218d2:	4299      	cmp	r1, r3
   218d4:	d00b      	beq.n	218ee <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   218d6:	3001      	adds	r0, #1
   218d8:	2820      	cmp	r0, #32
   218da:	d1f3      	bne.n	218c4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   218dc:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   218de:	480b      	ldr	r0, [pc, #44]	; (2190c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   218e0:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   218e4:	f7ff fdf4 	bl	214d0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   218e8:	4b09      	ldr	r3, [pc, #36]	; (21910 <release_handler+0x6c>)
   218ea:	4298      	cmp	r0, r3
   218ec:	d100      	bne.n	218f0 <release_handler+0x4c>
}
   218ee:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   218f0:	4908      	ldr	r1, [pc, #32]	; (21914 <release_handler+0x70>)
   218f2:	4809      	ldr	r0, [pc, #36]	; (21918 <release_handler+0x74>)
   218f4:	f44f 7399 	mov.w	r3, #306	; 0x132
   218f8:	4a08      	ldr	r2, [pc, #32]	; (2191c <release_handler+0x78>)
   218fa:	f009 fa5d 	bl	2adb8 <assert_print>
   218fe:	f44f 7199 	mov.w	r1, #306	; 0x132
   21902:	4806      	ldr	r0, [pc, #24]	; (2191c <release_handler+0x78>)
   21904:	f009 fa51 	bl	2adaa <assert_post_action>
   21908:	2000c9bc 	.word	0x2000c9bc
   2190c:	2000ca18 	.word	0x2000ca18
   21910:	0bad0000 	.word	0x0bad0000
   21914:	00037cf8 	.word	0x00037cf8
   21918:	00033bc2 	.word	0x00033bc2
   2191c:	0003a9b0 	.word	0x0003a9b0

00021920 <pin_handler_trigger_uninit>:
{
   21920:	b538      	push	{r3, r4, r5, lr}
   21922:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21924:	f7ff ff80 	bl	21828 <pin_in_use_by_te>
   21928:	4c0b      	ldr	r4, [pc, #44]	; (21958 <pin_handler_trigger_uninit+0x38>)
   2192a:	f102 050c 	add.w	r5, r2, #12
   2192e:	b160      	cbz	r0, 2194a <pin_handler_trigger_uninit+0x2a>
    p_reg->CONFIG[idx] = 0;
   21930:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21932:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21936:	0b5b      	lsrs	r3, r3, #13
   21938:	009b      	lsls	r3, r3, #2
   2193a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2193e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21942:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   21946:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   2194a:	4610      	mov	r0, r2
   2194c:	f7ff ffaa 	bl	218a4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21950:	2300      	movs	r3, #0
   21952:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21956:	bd38      	pop	{r3, r4, r5, pc}
   21958:	2000c9bc 	.word	0x2000c9bc

0002195c <nrf_gpio_pin_port_decode>:
{
   2195c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2195e:	6802      	ldr	r2, [r0, #0]
{
   21960:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21962:	4610      	mov	r0, r2
   21964:	f00d fde9 	bl	2f53a <nrf_gpio_pin_present_check>
   21968:	b958      	cbnz	r0, 21982 <nrf_gpio_pin_port_decode+0x26>
   2196a:	490e      	ldr	r1, [pc, #56]	; (219a4 <nrf_gpio_pin_port_decode+0x48>)
   2196c:	f240 2347 	movw	r3, #583	; 0x247
   21970:	4a0d      	ldr	r2, [pc, #52]	; (219a8 <nrf_gpio_pin_port_decode+0x4c>)
   21972:	480e      	ldr	r0, [pc, #56]	; (219ac <nrf_gpio_pin_port_decode+0x50>)
   21974:	f009 fa20 	bl	2adb8 <assert_print>
   21978:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   2197c:	480a      	ldr	r0, [pc, #40]	; (219a8 <nrf_gpio_pin_port_decode+0x4c>)
   2197e:	f009 fa14 	bl	2adaa <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   21982:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21986:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   21988:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2198a:	d009      	beq.n	219a0 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   2198c:	4908      	ldr	r1, [pc, #32]	; (219b0 <nrf_gpio_pin_port_decode+0x54>)
   2198e:	f44f 7313 	mov.w	r3, #588	; 0x24c
   21992:	4a05      	ldr	r2, [pc, #20]	; (219a8 <nrf_gpio_pin_port_decode+0x4c>)
   21994:	4805      	ldr	r0, [pc, #20]	; (219ac <nrf_gpio_pin_port_decode+0x50>)
   21996:	f009 fa0f 	bl	2adb8 <assert_print>
   2199a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2199e:	e7ed      	b.n	2197c <nrf_gpio_pin_port_decode+0x20>
}
   219a0:	4804      	ldr	r0, [pc, #16]	; (219b4 <nrf_gpio_pin_port_decode+0x58>)
   219a2:	bd08      	pop	{r3, pc}
   219a4:	00037c9d 	.word	0x00037c9d
   219a8:	00037c6a 	.word	0x00037c6a
   219ac:	00033bc2 	.word	0x00033bc2
   219b0:	000386dc 	.word	0x000386dc
   219b4:	40842500 	.word	0x40842500

000219b8 <nrfx_gpiote_input_configure>:
{
   219b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   219ba:	4604      	mov	r4, r0
   219bc:	4617      	mov	r7, r2
   219be:	461d      	mov	r5, r3
   219c0:	b085      	sub	sp, #20
    if (p_input_config)
   219c2:	b1d9      	cbz	r1, 219fc <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   219c4:	f00d fdc5 	bl	2f552 <pin_is_task_output>
   219c8:	bb00      	cbnz	r0, 21a0c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   219ca:	460b      	mov	r3, r1
   219cc:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   219d0:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   219d4:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   219d8:	f10d 020f 	add.w	r2, sp, #15
   219dc:	f10d 010e 	add.w	r1, sp, #14
   219e0:	4620      	mov	r0, r4
   219e2:	f00d fdc1 	bl	2f568 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   219e6:	4a48      	ldr	r2, [pc, #288]	; (21b08 <nrfx_gpiote_input_configure+0x150>)
   219e8:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   219ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   219f0:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   219f4:	f043 0301 	orr.w	r3, r3, #1
   219f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   219fc:	b36f      	cbz	r7, 21a5a <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   219fe:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21a00:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21a02:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   21a04:	f7ff ff26 	bl	21854 <pin_is_output>
   21a08:	b110      	cbz	r0, 21a10 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   21a0a:	b1da      	cbz	r2, 21a44 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   21a0c:	483f      	ldr	r0, [pc, #252]	; (21b0c <nrfx_gpiote_input_configure+0x154>)
   21a0e:	e026      	b.n	21a5e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   21a10:	483d      	ldr	r0, [pc, #244]	; (21b08 <nrfx_gpiote_input_configure+0x150>)
   21a12:	f104 0c0c 	add.w	ip, r4, #12
   21a16:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   21a1a:	f021 0120 	bic.w	r1, r1, #32
   21a1e:	04c9      	lsls	r1, r1, #19
   21a20:	0cc9      	lsrs	r1, r1, #19
   21a22:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   21a26:	b16a      	cbz	r2, 21a44 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   21a28:	2e03      	cmp	r6, #3
   21a2a:	d8ef      	bhi.n	21a0c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21a2c:	687b      	ldr	r3, [r7, #4]
   21a2e:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21a30:	00ba      	lsls	r2, r7, #2
   21a32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21a36:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21a3a:	b996      	cbnz	r6, 21a62 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   21a3c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   21a40:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21a44:	4a30      	ldr	r2, [pc, #192]	; (21b08 <nrfx_gpiote_input_configure+0x150>)
   21a46:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21a4a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21a4e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21a52:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   21a56:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   21a5a:	bb15      	cbnz	r5, 21aa2 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   21a5c:	482c      	ldr	r0, [pc, #176]	; (21b10 <nrfx_gpiote_input_configure+0x158>)
}
   21a5e:	b005      	add	sp, #20
   21a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21a62:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21a66:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   21a6a:	f023 0303 	bic.w	r3, r3, #3
   21a6e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21a72:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   21a76:	f041 0120 	orr.w	r1, r1, #32
   21a7a:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   21a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   21a82:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21a86:	0223      	lsls	r3, r4, #8
   21a88:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   21a8c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   21a90:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   21a94:	ea43 030e 	orr.w	r3, r3, lr
   21a98:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   21a9c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   21aa0:	e7d0      	b.n	21a44 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   21aa2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21aa4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21aa8:	f7ff fefc 	bl	218a4 <release_handler>
    if (!handler)
   21aac:	2e00      	cmp	r6, #0
   21aae:	d0d5      	beq.n	21a5c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21ab0:	4d15      	ldr	r5, [pc, #84]	; (21b08 <nrfx_gpiote_input_configure+0x150>)
   21ab2:	682b      	ldr	r3, [r5, #0]
   21ab4:	429e      	cmp	r6, r3
   21ab6:	d102      	bne.n	21abe <nrfx_gpiote_input_configure+0x106>
   21ab8:	686b      	ldr	r3, [r5, #4]
   21aba:	429f      	cmp	r7, r3
   21abc:	d016      	beq.n	21aec <nrfx_gpiote_input_configure+0x134>
   21abe:	68ab      	ldr	r3, [r5, #8]
   21ac0:	429e      	cmp	r6, r3
   21ac2:	d115      	bne.n	21af0 <nrfx_gpiote_input_configure+0x138>
   21ac4:	68eb      	ldr	r3, [r5, #12]
   21ac6:	429f      	cmp	r7, r3
   21ac8:	d112      	bne.n	21af0 <nrfx_gpiote_input_configure+0x138>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21aca:	2301      	movs	r3, #1
    m_cb.handlers[handler_id].p_context = p_context;
   21acc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21ad0:	f104 000c 	add.w	r0, r4, #12
    m_cb.handlers[handler_id].p_context = p_context;
   21ad4:	6057      	str	r7, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21ad6:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   21ada:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21ade:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
   21ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21ae6:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   21aea:	e7b7      	b.n	21a5c <nrfx_gpiote_input_configure+0xa4>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   21aec:	2300      	movs	r3, #0
    if (handler_id < 0)
   21aee:	e7ed      	b.n	21acc <nrfx_gpiote_input_configure+0x114>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21af0:	4808      	ldr	r0, [pc, #32]	; (21b14 <nrfx_gpiote_input_configure+0x15c>)
   21af2:	f10d 010f 	add.w	r1, sp, #15
   21af6:	f7ff fccf 	bl	21498 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21afa:	4b05      	ldr	r3, [pc, #20]	; (21b10 <nrfx_gpiote_input_configure+0x158>)
   21afc:	4298      	cmp	r0, r3
   21afe:	d1ae      	bne.n	21a5e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   21b00:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21b04:	e7e2      	b.n	21acc <nrfx_gpiote_input_configure+0x114>
   21b06:	bf00      	nop
   21b08:	2000c9bc 	.word	0x2000c9bc
   21b0c:	0bad0004 	.word	0x0bad0004
   21b10:	0bad0000 	.word	0x0bad0000
   21b14:	2000ca18 	.word	0x2000ca18

00021b18 <nrfx_gpiote_output_configure>:
{
   21b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b1a:	4604      	mov	r4, r0
   21b1c:	4615      	mov	r5, r2
   21b1e:	b085      	sub	sp, #20
    if (p_config)
   21b20:	b321      	cbz	r1, 21b6c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   21b22:	f7ff fe97 	bl	21854 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21b26:	b920      	cbnz	r0, 21b32 <nrfx_gpiote_output_configure+0x1a>
   21b28:	4620      	mov	r0, r4
   21b2a:	f7ff fe7d 	bl	21828 <pin_in_use_by_te>
   21b2e:	2800      	cmp	r0, #0
   21b30:	d161      	bne.n	21bf6 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21b32:	4620      	mov	r0, r4
   21b34:	f7ff fe82 	bl	2183c <pin_has_trigger>
   21b38:	b110      	cbz	r0, 21b40 <nrfx_gpiote_output_configure+0x28>
   21b3a:	784b      	ldrb	r3, [r1, #1]
   21b3c:	2b01      	cmp	r3, #1
   21b3e:	d05a      	beq.n	21bf6 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21b40:	2301      	movs	r3, #1
   21b42:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21b46:	2300      	movs	r3, #0
   21b48:	1c4a      	adds	r2, r1, #1
   21b4a:	e9cd 1300 	strd	r1, r3, [sp]
   21b4e:	4620      	mov	r0, r4
   21b50:	1c8b      	adds	r3, r1, #2
   21b52:	f10d 010f 	add.w	r1, sp, #15
   21b56:	f00d fd07 	bl	2f568 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21b5a:	4a28      	ldr	r2, [pc, #160]	; (21bfc <nrfx_gpiote_output_configure+0xe4>)
   21b5c:	f104 010c 	add.w	r1, r4, #12
   21b60:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21b64:	f043 0303 	orr.w	r3, r3, #3
   21b68:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   21b6c:	b915      	cbnz	r5, 21b74 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   21b6e:	4824      	ldr	r0, [pc, #144]	; (21c00 <nrfx_gpiote_output_configure+0xe8>)
}
   21b70:	b005      	add	sp, #20
   21b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   21b74:	4620      	mov	r0, r4
   21b76:	f7ff fe6d 	bl	21854 <pin_is_output>
        if (pin_is_input(pin))
   21b7a:	2800      	cmp	r0, #0
   21b7c:	d03b      	beq.n	21bf6 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   21b7e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   21b82:	2300      	movs	r3, #0
   21b84:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21b86:	4e1d      	ldr	r6, [pc, #116]	; (21bfc <nrfx_gpiote_output_configure+0xe4>)
   21b88:	f104 070c 	add.w	r7, r4, #12
   21b8c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   21b90:	0089      	lsls	r1, r1, #2
   21b92:	f020 0020 	bic.w	r0, r0, #32
   21b96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21b9a:	04c0      	lsls	r0, r0, #19
   21b9c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   21ba0:	0cc0      	lsrs	r0, r0, #19
   21ba2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21ba6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   21baa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   21bae:	786a      	ldrb	r2, [r5, #1]
   21bb0:	2a00      	cmp	r2, #0
   21bb2:	d0dc      	beq.n	21b6e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21bb4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   21bb8:	78ad      	ldrb	r5, [r5, #2]
   21bba:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   21bbe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21bc2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21bc6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21bca:	0223      	lsls	r3, r4, #8
   21bcc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21bd0:	0412      	lsls	r2, r2, #16
   21bd2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21bd6:	ea43 030e 	orr.w	r3, r3, lr
   21bda:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21bdc:	052a      	lsls	r2, r5, #20
   21bde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21be2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21be6:	4313      	orrs	r3, r2
   21be8:	f040 0020 	orr.w	r0, r0, #32
   21bec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21bf0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21bf4:	e7bb      	b.n	21b6e <nrfx_gpiote_output_configure+0x56>
{
   21bf6:	4803      	ldr	r0, [pc, #12]	; (21c04 <nrfx_gpiote_output_configure+0xec>)
   21bf8:	e7ba      	b.n	21b70 <nrfx_gpiote_output_configure+0x58>
   21bfa:	bf00      	nop
   21bfc:	2000c9bc 	.word	0x2000c9bc
   21c00:	0bad0000 	.word	0x0bad0000
   21c04:	0bad0004 	.word	0x0bad0004

00021c08 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21c08:	4b01      	ldr	r3, [pc, #4]	; (21c10 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   21c0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   21c0e:	4770      	bx	lr
   21c10:	2000c9bc 	.word	0x2000c9bc

00021c14 <nrfx_gpiote_channel_get>:
{
   21c14:	4602      	mov	r2, r0
   21c16:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   21c18:	b959      	cbnz	r1, 21c32 <nrfx_gpiote_channel_get+0x1e>
   21c1a:	490c      	ldr	r1, [pc, #48]	; (21c4c <nrfx_gpiote_channel_get+0x38>)
   21c1c:	480c      	ldr	r0, [pc, #48]	; (21c50 <nrfx_gpiote_channel_get+0x3c>)
   21c1e:	f240 2335 	movw	r3, #565	; 0x235
   21c22:	4a0c      	ldr	r2, [pc, #48]	; (21c54 <nrfx_gpiote_channel_get+0x40>)
   21c24:	f009 f8c8 	bl	2adb8 <assert_print>
   21c28:	f240 2135 	movw	r1, #565	; 0x235
   21c2c:	4809      	ldr	r0, [pc, #36]	; (21c54 <nrfx_gpiote_channel_get+0x40>)
   21c2e:	f009 f8bc 	bl	2adaa <assert_post_action>
    if (pin_in_use_by_te(pin))
   21c32:	f7ff fdf9 	bl	21828 <pin_in_use_by_te>
   21c36:	b138      	cbz	r0, 21c48 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21c38:	4b07      	ldr	r3, [pc, #28]	; (21c58 <nrfx_gpiote_channel_get+0x44>)
   21c3a:	320c      	adds	r2, #12
   21c3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   21c40:	4806      	ldr	r0, [pc, #24]	; (21c5c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21c42:	0b5b      	lsrs	r3, r3, #13
   21c44:	700b      	strb	r3, [r1, #0]
}
   21c46:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21c48:	4805      	ldr	r0, [pc, #20]	; (21c60 <nrfx_gpiote_channel_get+0x4c>)
   21c4a:	e7fc      	b.n	21c46 <nrfx_gpiote_channel_get+0x32>
   21c4c:	0003a9ee 	.word	0x0003a9ee
   21c50:	00033bc2 	.word	0x00033bc2
   21c54:	0003a9b0 	.word	0x0003a9b0
   21c58:	2000c9bc 	.word	0x2000c9bc
   21c5c:	0bad0000 	.word	0x0bad0000
   21c60:	0bad0004 	.word	0x0bad0004

00021c64 <nrfx_gpiote_init>:
{
   21c64:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21c66:	4c0f      	ldr	r4, [pc, #60]	; (21ca4 <nrfx_gpiote_init+0x40>)
   21c68:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
   21c6c:	b9c5      	cbnz	r5, 21ca0 <nrfx_gpiote_init+0x3c>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   21c6e:	2240      	movs	r2, #64	; 0x40
   21c70:	4629      	mov	r1, r5
   21c72:	f104 0018 	add.w	r0, r4, #24
   21c76:	f00e fe04 	bl	30882 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21c7a:	2031      	movs	r0, #49	; 0x31
   21c7c:	f7ef fb94 	bl	113a8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21c80:	4b09      	ldr	r3, [pc, #36]	; (21ca8 <nrfx_gpiote_init+0x44>)
    return err_code;
   21c82:	480a      	ldr	r0, [pc, #40]	; (21cac <nrfx_gpiote_init+0x48>)
   21c84:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   21c88:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   21c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21c90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21c94:	2301      	movs	r3, #1
   21c96:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   21c9a:	2303      	movs	r3, #3
   21c9c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
   21c9e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   21ca0:	4803      	ldr	r0, [pc, #12]	; (21cb0 <nrfx_gpiote_init+0x4c>)
   21ca2:	e7fc      	b.n	21c9e <nrfx_gpiote_init+0x3a>
   21ca4:	2000c9bc 	.word	0x2000c9bc
   21ca8:	40031000 	.word	0x40031000
   21cac:	0bad0000 	.word	0x0bad0000
   21cb0:	0bad0005 	.word	0x0bad0005

00021cb4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21cb4:	4b03      	ldr	r3, [pc, #12]	; (21cc4 <nrfx_gpiote_is_init+0x10>)
   21cb6:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
}
   21cba:	3800      	subs	r0, #0
   21cbc:	bf18      	it	ne
   21cbe:	2001      	movne	r0, #1
   21cc0:	4770      	bx	lr
   21cc2:	bf00      	nop
   21cc4:	2000c9bc 	.word	0x2000c9bc

00021cc8 <nrfx_gpiote_channel_free>:
{
   21cc8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21cca:	4801      	ldr	r0, [pc, #4]	; (21cd0 <nrfx_gpiote_channel_free+0x8>)
   21ccc:	f7ff bc00 	b.w	214d0 <nrfx_flag32_free>
   21cd0:	2000ca14 	.word	0x2000ca14

00021cd4 <nrfx_gpiote_channel_alloc>:
{
   21cd4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21cd6:	4801      	ldr	r0, [pc, #4]	; (21cdc <nrfx_gpiote_channel_alloc+0x8>)
   21cd8:	f7ff bbde 	b.w	21498 <nrfx_flag32_alloc>
   21cdc:	2000ca14 	.word	0x2000ca14

00021ce0 <nrfx_gpiote_trigger_enable>:
{
   21ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21ce2:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   21ce4:	f7ff fdaa 	bl	2183c <pin_has_trigger>
   21ce8:	b958      	cbnz	r0, 21d02 <nrfx_gpiote_trigger_enable+0x22>
   21cea:	492b      	ldr	r1, [pc, #172]	; (21d98 <nrfx_gpiote_trigger_enable+0xb8>)
   21cec:	f240 33df 	movw	r3, #991	; 0x3df
   21cf0:	4a2a      	ldr	r2, [pc, #168]	; (21d9c <nrfx_gpiote_trigger_enable+0xbc>)
   21cf2:	482b      	ldr	r0, [pc, #172]	; (21da0 <nrfx_gpiote_trigger_enable+0xc0>)
   21cf4:	f009 f860 	bl	2adb8 <assert_print>
   21cf8:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   21cfc:	4827      	ldr	r0, [pc, #156]	; (21d9c <nrfx_gpiote_trigger_enable+0xbc>)
   21cfe:	f009 f854 	bl	2adaa <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21d02:	4620      	mov	r0, r4
   21d04:	f7ff fd90 	bl	21828 <pin_in_use_by_te>
   21d08:	4a26      	ldr	r2, [pc, #152]	; (21da4 <nrfx_gpiote_trigger_enable+0xc4>)
   21d0a:	f104 050c 	add.w	r5, r4, #12
   21d0e:	b1e0      	cbz	r0, 21d4a <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   21d10:	4620      	mov	r0, r4
   21d12:	f7ff fd9f 	bl	21854 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21d16:	b9c0      	cbnz	r0, 21d4a <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21d18:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   21d1c:	4c22      	ldr	r4, [pc, #136]	; (21da8 <nrfx_gpiote_trigger_enable+0xc8>)
   21d1e:	0b52      	lsrs	r2, r2, #13
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   21d20:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21d22:	50e0      	str	r0, [r4, r3]
   21d24:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21d26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21d2a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21d2e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   21d32:	f040 0001 	orr.w	r0, r0, #1
   21d36:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   21d3a:	b121      	cbz	r1, 21d46 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21d3c:	2301      	movs	r3, #1
   21d3e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   21d40:	4a1a      	ldr	r2, [pc, #104]	; (21dac <nrfx_gpiote_trigger_enable+0xcc>)
   21d42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21d46:	b003      	add	sp, #12
   21d48:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   21d4a:	b949      	cbnz	r1, 21d60 <nrfx_gpiote_trigger_enable+0x80>
   21d4c:	4918      	ldr	r1, [pc, #96]	; (21db0 <nrfx_gpiote_trigger_enable+0xd0>)
   21d4e:	f240 33ee 	movw	r3, #1006	; 0x3ee
   21d52:	4a12      	ldr	r2, [pc, #72]	; (21d9c <nrfx_gpiote_trigger_enable+0xbc>)
   21d54:	4812      	ldr	r0, [pc, #72]	; (21da0 <nrfx_gpiote_trigger_enable+0xc0>)
   21d56:	f009 f82f 	bl	2adb8 <assert_print>
   21d5a:	f240 31ee 	movw	r1, #1006	; 0x3ee
   21d5e:	e7cd      	b.n	21cfc <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21d60:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   21d64:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   21d68:	2b04      	cmp	r3, #4
   21d6a:	d011      	beq.n	21d90 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21d6c:	2b05      	cmp	r3, #5
   21d6e:	d011      	beq.n	21d94 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21d70:	a801      	add	r0, sp, #4
   21d72:	9401      	str	r4, [sp, #4]
   21d74:	f7ff fdf2 	bl	2195c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21d78:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   21d7a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21d7c:	40d9      	lsrs	r1, r3
   21d7e:	f001 0101 	and.w	r1, r1, #1
   21d82:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21d84:	4620      	mov	r0, r4
}
   21d86:	b003      	add	sp, #12
   21d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21d8c:	f00d bc39 	b.w	2f602 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   21d90:	2103      	movs	r1, #3
   21d92:	e7f7      	b.n	21d84 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   21d94:	2102      	movs	r1, #2
   21d96:	e7f5      	b.n	21d84 <nrfx_gpiote_trigger_enable+0xa4>
   21d98:	0003aa45 	.word	0x0003aa45
   21d9c:	0003a9b0 	.word	0x0003a9b0
   21da0:	00033bc2 	.word	0x00033bc2
   21da4:	2000c9bc 	.word	0x2000c9bc
   21da8:	40031100 	.word	0x40031100
   21dac:	40031000 	.word	0x40031000
   21db0:	0003aa5a 	.word	0x0003aa5a

00021db4 <nrfx_gpiote_trigger_disable>:
{
   21db4:	b508      	push	{r3, lr}
   21db6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21db8:	f7ff fd36 	bl	21828 <pin_in_use_by_te>
   21dbc:	b1c8      	cbz	r0, 21df2 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   21dbe:	4610      	mov	r0, r2
   21dc0:	f7ff fd48 	bl	21854 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21dc4:	b9a8      	cbnz	r0, 21df2 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21dc6:	4b0e      	ldr	r3, [pc, #56]	; (21e00 <nrfx_gpiote_trigger_disable+0x4c>)
   21dc8:	320c      	adds	r2, #12
   21dca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21dce:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21dd0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21dd2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21dd4:	490b      	ldr	r1, [pc, #44]	; (21e04 <nrfx_gpiote_trigger_disable+0x50>)
   21dd6:	009b      	lsls	r3, r3, #2
   21dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21ddc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21de0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21de4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21de8:	f022 0203 	bic.w	r2, r2, #3
   21dec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21df0:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21df2:	2100      	movs	r1, #0
}
   21df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21df8:	4610      	mov	r0, r2
   21dfa:	f00d bc02 	b.w	2f602 <nrf_gpio_cfg_sense_set>
   21dfe:	bf00      	nop
   21e00:	2000c9bc 	.word	0x2000c9bc
   21e04:	40031000 	.word	0x40031000

00021e08 <nrfx_gpiote_pin_uninit>:
{
   21e08:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21e0a:	4b0d      	ldr	r3, [pc, #52]	; (21e40 <nrfx_gpiote_pin_uninit+0x38>)
   21e0c:	f100 020c 	add.w	r2, r0, #12
   21e10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   21e14:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21e16:	07db      	lsls	r3, r3, #31
   21e18:	d510      	bpl.n	21e3c <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   21e1a:	f7ff ffcb 	bl	21db4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21e1e:	4620      	mov	r0, r4
   21e20:	f7ff fd7e 	bl	21920 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e24:	a801      	add	r0, sp, #4
   21e26:	9401      	str	r4, [sp, #4]
   21e28:	f7ff fd98 	bl	2195c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21e2c:	2202      	movs	r2, #2
   21e2e:	9b01      	ldr	r3, [sp, #4]
   21e30:	3380      	adds	r3, #128	; 0x80
   21e32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21e36:	4803      	ldr	r0, [pc, #12]	; (21e44 <nrfx_gpiote_pin_uninit+0x3c>)
}
   21e38:	b002      	add	sp, #8
   21e3a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21e3c:	4802      	ldr	r0, [pc, #8]	; (21e48 <nrfx_gpiote_pin_uninit+0x40>)
   21e3e:	e7fb      	b.n	21e38 <nrfx_gpiote_pin_uninit+0x30>
   21e40:	2000c9bc 	.word	0x2000c9bc
   21e44:	0bad0000 	.word	0x0bad0000
   21e48:	0bad0004 	.word	0x0bad0004

00021e4c <nrfx_gpiote_in_is_set>:
{
   21e4c:	b507      	push	{r0, r1, r2, lr}
   21e4e:	4602      	mov	r2, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   21e50:	f00d fb73 	bl	2f53a <nrf_gpio_pin_present_check>
   21e54:	b958      	cbnz	r0, 21e6e <nrfx_gpiote_in_is_set+0x22>
   21e56:	490c      	ldr	r1, [pc, #48]	; (21e88 <nrfx_gpiote_in_is_set+0x3c>)
   21e58:	480c      	ldr	r0, [pc, #48]	; (21e8c <nrfx_gpiote_in_is_set+0x40>)
   21e5a:	f240 4326 	movw	r3, #1062	; 0x426
   21e5e:	4a0c      	ldr	r2, [pc, #48]	; (21e90 <nrfx_gpiote_in_is_set+0x44>)
   21e60:	f008 ffaa 	bl	2adb8 <assert_print>
   21e64:	f240 4126 	movw	r1, #1062	; 0x426
   21e68:	4809      	ldr	r0, [pc, #36]	; (21e90 <nrfx_gpiote_in_is_set+0x44>)
   21e6a:	f008 ff9e 	bl	2adaa <assert_post_action>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e6e:	a801      	add	r0, sp, #4
   21e70:	9201      	str	r2, [sp, #4]
   21e72:	f7ff fd73 	bl	2195c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21e76:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   21e78:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21e7a:	40d8      	lsrs	r0, r3
}
   21e7c:	f000 0001 	and.w	r0, r0, #1
   21e80:	b003      	add	sp, #12
   21e82:	f85d fb04 	ldr.w	pc, [sp], #4
   21e86:	bf00      	nop
   21e88:	0003a9f8 	.word	0x0003a9f8
   21e8c:	00033bc2 	.word	0x00033bc2
   21e90:	0003a9b0 	.word	0x0003a9b0

00021e94 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   21e98:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21e9a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21e9c:	462c      	mov	r4, r5
{
   21e9e:	4b56      	ldr	r3, [pc, #344]	; (21ff8 <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
   21ea0:	4856      	ldr	r0, [pc, #344]	; (21ffc <nrfx_gpiote_irq_handler+0x168>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21ea2:	4957      	ldr	r1, [pc, #348]	; (22000 <nrfx_gpiote_irq_handler+0x16c>)
{
   21ea4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ea6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21ea8:	b136      	cbz	r6, 21eb8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   21eaa:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   21eae:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21eb0:	bf1e      	ittt	ne
   21eb2:	601c      	strne	r4, [r3, #0]
   21eb4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   21eb6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21eb8:	3304      	adds	r3, #4
   21eba:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   21ebc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21ec0:	d1f1      	bne.n	21ea6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ec2:	f8df 8138 	ldr.w	r8, [pc, #312]	; 21ffc <nrfx_gpiote_irq_handler+0x168>
   21ec6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21eca:	b183      	cbz	r3, 21eee <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   21ecc:	4f4d      	ldr	r7, [pc, #308]	; (22004 <nrfx_gpiote_irq_handler+0x170>)
   21ece:	6a3b      	ldr	r3, [r7, #32]
   21ed0:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21ed2:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   21ed4:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   21ed8:	9c02      	ldr	r4, [sp, #8]
   21eda:	b974      	cbnz	r4, 21efa <nrfx_gpiote_irq_handler+0x66>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21edc:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   21ee0:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   21ee4:	6a3b      	ldr	r3, [r7, #32]
   21ee6:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21ee8:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   21eea:	2b00      	cmp	r3, #0
   21eec:	d1f2      	bne.n	21ed4 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   21eee:	2401      	movs	r4, #1
    while (mask)
   21ef0:	2d00      	cmp	r5, #0
   21ef2:	d168      	bne.n	21fc6 <nrfx_gpiote_irq_handler+0x132>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   21ef4:	b005      	add	sp, #20
   21ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   21efa:	fa94 f4a4 	rbit	r4, r4
   21efe:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21f02:	4a41      	ldr	r2, [pc, #260]	; (22008 <nrfx_gpiote_irq_handler+0x174>)
   21f04:	f104 030c 	add.w	r3, r4, #12
   21f08:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21f0c:	08e0      	lsrs	r0, r4, #3
    p_mask8[byte_idx] &= ~(1 << bit);
   21f0e:	ab02      	add	r3, sp, #8
   21f10:	5c1b      	ldrb	r3, [r3, r0]
    bit = BITMASK_RELBIT_GET(bit);
   21f12:	f004 0107 	and.w	r1, r4, #7
   21f16:	08b2      	lsrs	r2, r6, #2
    p_mask8[byte_idx] &= ~(1 << bit);
   21f18:	fa09 f101 	lsl.w	r1, r9, r1
   21f1c:	ea23 0301 	bic.w	r3, r3, r1
   21f20:	9201      	str	r2, [sp, #4]
   21f22:	aa02      	add	r2, sp, #8
   21f24:	5413      	strb	r3, [r2, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21f26:	a803      	add	r0, sp, #12
   21f28:	9403      	str	r4, [sp, #12]
   21f2a:	f7ff fd17 	bl	2195c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21f2e:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   21f30:	9a01      	ldr	r2, [sp, #4]
   21f32:	3380      	adds	r3, #128	; 0x80
   21f34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21f38:	f3c6 0b82 	ubfx	fp, r6, #2, #3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21f3c:	f3c3 4a01 	ubfx	sl, r3, #16, #2
    if (is_level(trigger))
   21f40:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21f42:	465e      	mov	r6, fp
    if (is_level(trigger))
   21f44:	d522      	bpl.n	21f8c <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
   21f46:	4659      	mov	r1, fp
   21f48:	4620      	mov	r0, r4
   21f4a:	f7ff fc8d 	bl	21868 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21f4e:	a803      	add	r0, sp, #12
   21f50:	9403      	str	r4, [sp, #12]
   21f52:	f7ff fd03 	bl	2195c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21f56:	9b03      	ldr	r3, [sp, #12]
   21f58:	fa5f fa8a 	uxtb.w	sl, sl
   21f5c:	3380      	adds	r3, #128	; 0x80
   21f5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21f62:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21f66:	459a      	cmp	sl, r3
   21f68:	d107      	bne.n	21f7a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21f6a:	2100      	movs	r1, #0
   21f6c:	4620      	mov	r0, r4
   21f6e:	f00d fb48 	bl	2f602 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21f72:	4651      	mov	r1, sl
   21f74:	4620      	mov	r0, r4
   21f76:	f00d fb44 	bl	2f602 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21f7a:	a803      	add	r0, sp, #12
   21f7c:	9403      	str	r4, [sp, #12]
   21f7e:	f7ff fced 	bl	2195c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   21f82:	9b03      	ldr	r3, [sp, #12]
   21f84:	fa09 f303 	lsl.w	r3, r9, r3
   21f88:	6203      	str	r3, [r0, #32]
   21f8a:	e7a5      	b.n	21ed8 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21f8c:	f1ba 0f02 	cmp.w	sl, #2
   21f90:	d10c      	bne.n	21fac <nrfx_gpiote_irq_handler+0x118>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21f92:	2103      	movs	r1, #3
   21f94:	4620      	mov	r0, r4
   21f96:	f00d fb34 	bl	2f602 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21f9a:	f00b 0305 	and.w	r3, fp, #5
   21f9e:	2b01      	cmp	r3, #1
   21fa0:	d1eb      	bne.n	21f7a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   21fa2:	4631      	mov	r1, r6
   21fa4:	4620      	mov	r0, r4
   21fa6:	f7ff fc5f 	bl	21868 <call_handler>
   21faa:	e7e6      	b.n	21f7a <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21fac:	2102      	movs	r1, #2
   21fae:	4620      	mov	r0, r4
   21fb0:	f00d fb27 	bl	2f602 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21fb4:	f1bb 0f03 	cmp.w	fp, #3
   21fb8:	d0f3      	beq.n	21fa2 <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21fba:	f1ba 0f03 	cmp.w	sl, #3
   21fbe:	d1dc      	bne.n	21f7a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21fc0:	f1bb 0f02 	cmp.w	fp, #2
   21fc4:	e7ec      	b.n	21fa0 <nrfx_gpiote_irq_handler+0x10c>
        uint32_t ch = NRF_CTZ(mask);
   21fc6:	fa95 f3a5 	rbit	r3, r5
   21fca:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21fce:	fa04 f203 	lsl.w	r2, r4, r3
   21fd2:	009b      	lsls	r3, r3, #2
   21fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21fd8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21fdc:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21fe0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21fe4:	f3c0 2004 	ubfx	r0, r0, #8, #5
   21fe8:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   21fec:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21ff0:	f7ff fc3a 	bl	21868 <call_handler>
   21ff4:	e77c      	b.n	21ef0 <nrfx_gpiote_irq_handler+0x5c>
   21ff6:	bf00      	nop
   21ff8:	40031100 	.word	0x40031100
   21ffc:	40031000 	.word	0x40031000
   22000:	40031120 	.word	0x40031120
   22004:	40842500 	.word	0x40842500
   22008:	2000c9bc 	.word	0x2000c9bc

0002200c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   2200c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2200e:	4c08      	ldr	r4, [pc, #32]	; (22030 <nrfx_ipc_init+0x24>)
{
   22010:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22012:	7923      	ldrb	r3, [r4, #4]
{
   22014:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22016:	b943      	cbnz	r3, 2202a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   22018:	202a      	movs	r0, #42	; 0x2a
   2201a:	f7ef f9c5 	bl	113a8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2201e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   22020:	4804      	ldr	r0, [pc, #16]	; (22034 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22022:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   22024:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   22026:	60a5      	str	r5, [r4, #8]
}
   22028:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2202a:	4803      	ldr	r0, [pc, #12]	; (22038 <nrfx_ipc_init+0x2c>)
   2202c:	e7fc      	b.n	22028 <nrfx_ipc_init+0x1c>
   2202e:	bf00      	nop
   22030:	2000e778 	.word	0x2000e778
   22034:	0bad0000 	.word	0x0bad0000
   22038:	0bad000c 	.word	0x0bad000c

0002203c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   2203c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   2203e:	b948      	cbnz	r0, 22054 <nrfx_ipc_config_load+0x18>
   22040:	4918      	ldr	r1, [pc, #96]	; (220a4 <nrfx_ipc_config_load+0x68>)
   22042:	2345      	movs	r3, #69	; 0x45
   22044:	4a18      	ldr	r2, [pc, #96]	; (220a8 <nrfx_ipc_config_load+0x6c>)
   22046:	4819      	ldr	r0, [pc, #100]	; (220ac <nrfx_ipc_config_load+0x70>)
   22048:	f008 feb6 	bl	2adb8 <assert_print>
   2204c:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2204e:	4816      	ldr	r0, [pc, #88]	; (220a8 <nrfx_ipc_config_load+0x6c>)
   22050:	f008 feab 	bl	2adaa <assert_post_action>
   22054:	4b16      	ldr	r3, [pc, #88]	; (220b0 <nrfx_ipc_config_load+0x74>)
   22056:	791b      	ldrb	r3, [r3, #4]
   22058:	2b01      	cmp	r3, #1
   2205a:	d007      	beq.n	2206c <nrfx_ipc_config_load+0x30>
   2205c:	4915      	ldr	r1, [pc, #84]	; (220b4 <nrfx_ipc_config_load+0x78>)
   2205e:	2346      	movs	r3, #70	; 0x46
   22060:	4a11      	ldr	r2, [pc, #68]	; (220a8 <nrfx_ipc_config_load+0x6c>)
   22062:	4812      	ldr	r0, [pc, #72]	; (220ac <nrfx_ipc_config_load+0x70>)
   22064:	f008 fea8 	bl	2adb8 <assert_print>
   22068:	2146      	movs	r1, #70	; 0x46
   2206a:	e7f0      	b.n	2204e <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2206c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   2206e:	4a12      	ldr	r2, [pc, #72]	; (220b8 <nrfx_ipc_config_load+0x7c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   22070:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   22074:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   22078:	3301      	adds	r3, #1
   2207a:	2b08      	cmp	r3, #8
   2207c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   22080:	d1f6      	bne.n	22070 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   22082:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   22084:	4a0c      	ldr	r2, [pc, #48]	; (220b8 <nrfx_ipc_config_load+0x7c>)
   22086:	f100 011c 	add.w	r1, r0, #28
   2208a:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   2208e:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   22092:	3301      	adds	r3, #1
   22094:	2b08      	cmp	r3, #8
   22096:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2209a:	d1f6      	bne.n	2208a <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2209c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   2209e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   220a2:	bd38      	pop	{r3, r4, r5, pc}
   220a4:	0003aaac 	.word	0x0003aaac
   220a8:	0003aa71 	.word	0x0003aa71
   220ac:	00033bc2 	.word	0x00033bc2
   220b0:	2000e778 	.word	0x2000e778
   220b4:	0003aab5 	.word	0x0003aab5
   220b8:	4002a000 	.word	0x4002a000

000220bc <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   220bc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   220be:	491b      	ldr	r1, [pc, #108]	; (2212c <nrfx_ipc_uninit+0x70>)
   220c0:	790b      	ldrb	r3, [r1, #4]
   220c2:	2b01      	cmp	r3, #1
   220c4:	d009      	beq.n	220da <nrfx_ipc_uninit+0x1e>
   220c6:	491a      	ldr	r1, [pc, #104]	; (22130 <nrfx_ipc_uninit+0x74>)
   220c8:	481a      	ldr	r0, [pc, #104]	; (22134 <nrfx_ipc_uninit+0x78>)
   220ca:	2358      	movs	r3, #88	; 0x58
   220cc:	4a1a      	ldr	r2, [pc, #104]	; (22138 <nrfx_ipc_uninit+0x7c>)
   220ce:	f008 fe73 	bl	2adb8 <assert_print>
   220d2:	2158      	movs	r1, #88	; 0x58
   220d4:	4818      	ldr	r0, [pc, #96]	; (22138 <nrfx_ipc_uninit+0x7c>)
   220d6:	f008 fe68 	bl	2adaa <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   220da:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   220dc:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   220e0:	4a16      	ldr	r2, [pc, #88]	; (2213c <nrfx_ipc_uninit+0x80>)
   220e2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   220e6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   220ea:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   220ee:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   220f2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   220f6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   220fa:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   220fe:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   22102:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   22106:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   2210a:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   2210e:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   22112:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   22116:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   2211a:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   2211e:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   22122:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   22126:	710b      	strb	r3, [r1, #4]
}
   22128:	bd08      	pop	{r3, pc}
   2212a:	bf00      	nop
   2212c:	2000e778 	.word	0x2000e778
   22130:	0003aab5 	.word	0x0003aab5
   22134:	00033bc2 	.word	0x00033bc2
   22138:	0003aa71 	.word	0x0003aa71
   2213c:	4002a000 	.word	0x4002a000

00022140 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   22140:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   22142:	4b09      	ldr	r3, [pc, #36]	; (22168 <nrfx_ipc_receive_event_enable+0x28>)
   22144:	791b      	ldrb	r3, [r3, #4]
   22146:	2b01      	cmp	r3, #1
   22148:	d009      	beq.n	2215e <nrfx_ipc_receive_event_enable+0x1e>
   2214a:	4908      	ldr	r1, [pc, #32]	; (2216c <nrfx_ipc_receive_event_enable+0x2c>)
   2214c:	4808      	ldr	r0, [pc, #32]	; (22170 <nrfx_ipc_receive_event_enable+0x30>)
   2214e:	236b      	movs	r3, #107	; 0x6b
   22150:	4a08      	ldr	r2, [pc, #32]	; (22174 <nrfx_ipc_receive_event_enable+0x34>)
   22152:	f008 fe31 	bl	2adb8 <assert_print>
   22156:	216b      	movs	r1, #107	; 0x6b
   22158:	4806      	ldr	r0, [pc, #24]	; (22174 <nrfx_ipc_receive_event_enable+0x34>)
   2215a:	f008 fe26 	bl	2adaa <assert_post_action>
    p_reg->INTENSET = mask;
   2215e:	4a06      	ldr	r2, [pc, #24]	; (22178 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   22160:	4083      	lsls	r3, r0
   22162:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22166:	bd08      	pop	{r3, pc}
   22168:	2000e778 	.word	0x2000e778
   2216c:	0003aab5 	.word	0x0003aab5
   22170:	00033bc2 	.word	0x00033bc2
   22174:	0003aa71 	.word	0x0003aa71
   22178:	4002a000 	.word	0x4002a000

0002217c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   2217c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2217e:	4b09      	ldr	r3, [pc, #36]	; (221a4 <nrfx_ipc_receive_event_disable+0x28>)
   22180:	791b      	ldrb	r3, [r3, #4]
   22182:	2b01      	cmp	r3, #1
   22184:	d009      	beq.n	2219a <nrfx_ipc_receive_event_disable+0x1e>
   22186:	4908      	ldr	r1, [pc, #32]	; (221a8 <nrfx_ipc_receive_event_disable+0x2c>)
   22188:	4808      	ldr	r0, [pc, #32]	; (221ac <nrfx_ipc_receive_event_disable+0x30>)
   2218a:	2371      	movs	r3, #113	; 0x71
   2218c:	4a08      	ldr	r2, [pc, #32]	; (221b0 <nrfx_ipc_receive_event_disable+0x34>)
   2218e:	f008 fe13 	bl	2adb8 <assert_print>
   22192:	2171      	movs	r1, #113	; 0x71
   22194:	4806      	ldr	r0, [pc, #24]	; (221b0 <nrfx_ipc_receive_event_disable+0x34>)
   22196:	f008 fe08 	bl	2adaa <assert_post_action>
    p_reg->INTENCLR = mask;
   2219a:	4a06      	ldr	r2, [pc, #24]	; (221b4 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   2219c:	4083      	lsls	r3, r0
   2219e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   221a2:	bd08      	pop	{r3, pc}
   221a4:	2000e778 	.word	0x2000e778
   221a8:	0003aab5 	.word	0x0003aab5
   221ac:	00033bc2 	.word	0x00033bc2
   221b0:	0003aa71 	.word	0x0003aa71
   221b4:	4002a000 	.word	0x4002a000

000221b8 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   221b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   221ba:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221bc:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   221be:	4b12      	ldr	r3, [pc, #72]	; (22208 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   221c0:	4d12      	ldr	r5, [pc, #72]	; (2220c <nrfx_ipc_irq_handler+0x54>)
   221c2:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   221c6:	b904      	cbnz	r4, 221ca <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   221c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   221ca:	fa94 f0a4 	rbit	r0, r4
   221ce:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   221d2:	fa06 f300 	lsl.w	r3, r6, r0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   221d6:	2807      	cmp	r0, #7
   221d8:	ea24 0403 	bic.w	r4, r4, r3
   221dc:	dd0b      	ble.n	221f6 <nrfx_ipc_irq_handler+0x3e>
   221de:	490c      	ldr	r1, [pc, #48]	; (22210 <nrfx_ipc_irq_handler+0x58>)
   221e0:	480c      	ldr	r0, [pc, #48]	; (22214 <nrfx_ipc_irq_handler+0x5c>)
   221e2:	f240 13e7 	movw	r3, #487	; 0x1e7
   221e6:	4a0c      	ldr	r2, [pc, #48]	; (22218 <nrfx_ipc_irq_handler+0x60>)
   221e8:	f008 fde6 	bl	2adb8 <assert_print>
   221ec:	f240 11e7 	movw	r1, #487	; 0x1e7
   221f0:	4809      	ldr	r0, [pc, #36]	; (22218 <nrfx_ipc_irq_handler+0x60>)
   221f2:	f008 fdda 	bl	2adaa <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221f6:	4b09      	ldr	r3, [pc, #36]	; (2221c <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   221f8:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   221fa:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   221fc:	682b      	ldr	r3, [r5, #0]
   221fe:	2b00      	cmp	r3, #0
   22200:	d0e1      	beq.n	221c6 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   22202:	68a9      	ldr	r1, [r5, #8]
   22204:	4798      	blx	r3
   22206:	e7de      	b.n	221c6 <nrfx_ipc_irq_handler+0xe>
   22208:	4002a000 	.word	0x4002a000
   2220c:	2000e778 	.word	0x2000e778
   22210:	0003813e 	.word	0x0003813e
   22214:	00033bc2 	.word	0x00033bc2
   22218:	0003aae2 	.word	0x0003aae2
   2221c:	4002a100 	.word	0x4002a100

00022220 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   22220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22222:	4604      	mov	r4, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   22224:	460d      	mov	r5, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   22226:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   22228:	b949      	cbnz	r1, 2223e <nrfx_timer_init+0x1e>
   2222a:	4938      	ldr	r1, [pc, #224]	; (2230c <nrfx_timer_init+0xec>)
   2222c:	2353      	movs	r3, #83	; 0x53
   2222e:	4a38      	ldr	r2, [pc, #224]	; (22310 <nrfx_timer_init+0xf0>)
   22230:	4838      	ldr	r0, [pc, #224]	; (22314 <nrfx_timer_init+0xf4>)
   22232:	f008 fdc1 	bl	2adb8 <assert_print>
   22236:	2153      	movs	r1, #83	; 0x53
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   22238:	4835      	ldr	r0, [pc, #212]	; (22310 <nrfx_timer_init+0xf0>)
   2223a:	f008 fdb6 	bl	2adaa <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2223e:	230c      	movs	r3, #12
   22240:	4e35      	ldr	r6, [pc, #212]	; (22318 <nrfx_timer_init+0xf8>)
   22242:	fb03 6307 	mla	r3, r3, r7, r6
   22246:	7a1b      	ldrb	r3, [r3, #8]
   22248:	2b00      	cmp	r3, #0
   2224a:	d15d      	bne.n	22308 <nrfx_timer_init+0xe8>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   2224c:	6803      	ldr	r3, [r0, #0]
   2224e:	4933      	ldr	r1, [pc, #204]	; (2231c <nrfx_timer_init+0xfc>)
   22250:	428b      	cmp	r3, r1
   22252:	d007      	beq.n	22264 <nrfx_timer_init+0x44>
   22254:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   22258:	428b      	cmp	r3, r1
   2225a:	d003      	beq.n	22264 <nrfx_timer_init+0x44>
   2225c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   22260:	428b      	cmp	r3, r1
   22262:	d102      	bne.n	2226a <nrfx_timer_init+0x4a>
   22264:	78ab      	ldrb	r3, [r5, #2]
   22266:	2b03      	cmp	r3, #3
   22268:	d907      	bls.n	2227a <nrfx_timer_init+0x5a>
   2226a:	492d      	ldr	r1, [pc, #180]	; (22320 <nrfx_timer_init+0x100>)
   2226c:	2360      	movs	r3, #96	; 0x60
   2226e:	4a28      	ldr	r2, [pc, #160]	; (22310 <nrfx_timer_init+0xf0>)
   22270:	4828      	ldr	r0, [pc, #160]	; (22314 <nrfx_timer_init+0xf4>)
   22272:	f008 fda1 	bl	2adb8 <assert_print>
   22276:	2160      	movs	r1, #96	; 0x60
   22278:	e7de      	b.n	22238 <nrfx_timer_init+0x18>

    p_cb->handler = timer_event_handler;
   2227a:	230c      	movs	r3, #12
   2227c:	437b      	muls	r3, r7
   2227e:	50f2      	str	r2, [r6, r3]
    p_cb->context = p_config->p_context;

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   22280:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22282:	4694      	mov	ip, r2
    p_cb->handler = timer_event_handler;
   22284:	18f1      	adds	r1, r6, r3
    p_cb->context = p_config->p_context;
   22286:	686b      	ldr	r3, [r5, #4]
   22288:	604b      	str	r3, [r1, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   2228a:	7961      	ldrb	r1, [r4, #5]
   2228c:	b2d3      	uxtb	r3, r2
   2228e:	4299      	cmp	r1, r3
    {
        nrf_timer_event_clear(p_instance->p_reg,
   22290:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   22292:	d828      	bhi.n	222e6 <nrfx_timer_init+0xc6>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   22294:	f340 3007 	sbfx	r0, r0, #12, #8
   22298:	f7ef f886 	bl	113a8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   2229c:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   2229e:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   222a0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   222a4:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   222a8:	f022 0203 	bic.w	r2, r2, #3
   222ac:	4313      	orrs	r3, r2
   222ae:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   222b2:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   222b4:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   222b6:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   222ba:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   222be:	f022 0203 	bic.w	r2, r2, #3
   222c2:	4313      	orrs	r3, r2
   222c4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    // nrf_timer_frequency_t is mapped to prescaler for 16MHz base clock frequency timers
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
   222c8:	782b      	ldrb	r3, [r5, #0]
   222ca:	6822      	ldr	r2, [r4, #0]
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
   222cc:	2b09      	cmp	r3, #9
   222ce:	d912      	bls.n	222f6 <nrfx_timer_init+0xd6>
   222d0:	4914      	ldr	r1, [pc, #80]	; (22324 <nrfx_timer_init+0x104>)
   222d2:	4810      	ldr	r0, [pc, #64]	; (22314 <nrfx_timer_init+0xf4>)
   222d4:	f240 3355 	movw	r3, #853	; 0x355
   222d8:	4a13      	ldr	r2, [pc, #76]	; (22328 <nrfx_timer_init+0x108>)
   222da:	f008 fd6d 	bl	2adb8 <assert_print>
   222de:	f240 3155 	movw	r1, #853	; 0x355
   222e2:	4811      	ldr	r0, [pc, #68]	; (22328 <nrfx_timer_init+0x108>)
   222e4:	e7a9      	b.n	2223a <nrfx_timer_init+0x1a>
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   222e6:	009b      	lsls	r3, r3, #2
   222e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   222ec:	f840 c003 	str.w	ip, [r0, r3]
   222f0:	58c3      	ldr	r3, [r0, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   222f2:	3201      	adds	r2, #1
   222f4:	e7c9      	b.n	2228a <nrfx_timer_init+0x6a>
    p_reg->PRESCALER = prescaler_factor;
   222f6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   222fa:	230c      	movs	r3, #12
   222fc:	fb03 6607 	mla	r6, r3, r7, r6
   22300:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22302:	480a      	ldr	r0, [pc, #40]	; (2232c <nrfx_timer_init+0x10c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22304:	7233      	strb	r3, [r6, #8]
}
   22306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   22308:	4809      	ldr	r0, [pc, #36]	; (22330 <nrfx_timer_init+0x110>)
   2230a:	e7fc      	b.n	22306 <nrfx_timer_init+0xe6>
   2230c:	0003aaac 	.word	0x0003aaac
   22310:	0003ab14 	.word	0x0003ab14
   22314:	00033bc2 	.word	0x00033bc2
   22318:	2000e784 	.word	0x2000e784
   2231c:	4000f000 	.word	0x4000f000
   22320:	0003ab51 	.word	0x0003ab51
   22324:	0003b2c6 	.word	0x0003b2c6
   22328:	0003b292 	.word	0x0003b292
   2232c:	0bad0000 	.word	0x0bad0000
   22330:	0bad0005 	.word	0x0bad0005

00022334 <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   22334:	210c      	movs	r1, #12
{
   22336:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   22338:	4b0c      	ldr	r3, [pc, #48]	; (2236c <nrfx_timer_enable+0x38>)
   2233a:	7902      	ldrb	r2, [r0, #4]
   2233c:	fb01 3202 	mla	r2, r1, r2, r3
   22340:	7a12      	ldrb	r2, [r2, #8]
   22342:	2a01      	cmp	r2, #1
   22344:	d009      	beq.n	2235a <nrfx_timer_enable+0x26>
   22346:	490a      	ldr	r1, [pc, #40]	; (22370 <nrfx_timer_enable+0x3c>)
   22348:	480a      	ldr	r0, [pc, #40]	; (22374 <nrfx_timer_enable+0x40>)
   2234a:	238f      	movs	r3, #143	; 0x8f
   2234c:	4a0a      	ldr	r2, [pc, #40]	; (22378 <nrfx_timer_enable+0x44>)
   2234e:	f008 fd33 	bl	2adb8 <assert_print>
   22352:	218f      	movs	r1, #143	; 0x8f
   22354:	4808      	ldr	r0, [pc, #32]	; (22378 <nrfx_timer_enable+0x44>)
   22356:	f008 fd28 	bl	2adaa <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   2235a:	6804      	ldr	r4, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2235c:	6022      	str	r2, [r4, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   2235e:	7902      	ldrb	r2, [r0, #4]
   22360:	fb01 3302 	mla	r3, r1, r2, r3
   22364:	2202      	movs	r2, #2
   22366:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   22368:	bd10      	pop	{r4, pc}
   2236a:	bf00      	nop
   2236c:	2000e784 	.word	0x2000e784
   22370:	0003b2dc 	.word	0x0003b2dc
   22374:	00033bc2 	.word	0x00033bc2
   22378:	0003ab14 	.word	0x0003ab14

0002237c <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2237c:	210c      	movs	r1, #12
{
   2237e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   22380:	4b0b      	ldr	r3, [pc, #44]	; (223b0 <nrfx_timer_disable+0x34>)
   22382:	7902      	ldrb	r2, [r0, #4]
   22384:	fb01 3202 	mla	r2, r1, r2, r3
   22388:	7a12      	ldrb	r2, [r2, #8]
   2238a:	b94a      	cbnz	r2, 223a0 <nrfx_timer_disable+0x24>
   2238c:	4909      	ldr	r1, [pc, #36]	; (223b4 <nrfx_timer_disable+0x38>)
   2238e:	480a      	ldr	r0, [pc, #40]	; (223b8 <nrfx_timer_disable+0x3c>)
   22390:	2397      	movs	r3, #151	; 0x97
   22392:	4a0a      	ldr	r2, [pc, #40]	; (223bc <nrfx_timer_disable+0x40>)
   22394:	f008 fd10 	bl	2adb8 <assert_print>
   22398:	2197      	movs	r1, #151	; 0x97
   2239a:	4808      	ldr	r0, [pc, #32]	; (223bc <nrfx_timer_disable+0x40>)
   2239c:	f008 fd05 	bl	2adaa <assert_post_action>
   223a0:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   223a2:	6804      	ldr	r4, [r0, #0]
   223a4:	6122      	str	r2, [r4, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   223a6:	7900      	ldrb	r0, [r0, #4]
   223a8:	fb01 3300 	mla	r3, r1, r0, r3
   223ac:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   223ae:	bd10      	pop	{r4, pc}
   223b0:	2000e784 	.word	0x2000e784
   223b4:	0003b31e 	.word	0x0003b31e
   223b8:	00033bc2 	.word	0x00033bc2
   223bc:	0003ab14 	.word	0x0003ab14

000223c0 <nrfx_timer_uninit>:
{
   223c0:	b538      	push	{r3, r4, r5, lr}
   223c2:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   223c4:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   223c6:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   223c8:	f340 3007 	sbfx	r0, r0, #12, #8
   223cc:	f7ee fffa 	bl	113c4 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   223d0:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   223d2:	4620      	mov	r0, r4
   223d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   223d8:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   223dc:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
   223e0:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
   223e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   223e6:	f7ff ffc9 	bl	2237c <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   223ea:	210c      	movs	r1, #12
   223ec:	7922      	ldrb	r2, [r4, #4]
   223ee:	4b02      	ldr	r3, [pc, #8]	; (223f8 <nrfx_timer_uninit+0x38>)
   223f0:	fb01 3302 	mla	r3, r1, r2, r3
   223f4:	721d      	strb	r5, [r3, #8]
}
   223f6:	bd38      	pop	{r3, r4, r5, pc}
   223f8:	2000e784 	.word	0x2000e784

000223fc <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   223fc:	210c      	movs	r1, #12
{
   223fe:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   22400:	4b09      	ldr	r3, [pc, #36]	; (22428 <nrfx_timer_clear+0x2c>)
   22402:	7902      	ldrb	r2, [r0, #4]
   22404:	fb01 3302 	mla	r3, r1, r2, r3
   22408:	7a1b      	ldrb	r3, [r3, #8]
   2240a:	b94b      	cbnz	r3, 22420 <nrfx_timer_clear+0x24>
   2240c:	4907      	ldr	r1, [pc, #28]	; (2242c <nrfx_timer_clear+0x30>)
   2240e:	4808      	ldr	r0, [pc, #32]	; (22430 <nrfx_timer_clear+0x34>)
   22410:	23b3      	movs	r3, #179	; 0xb3
   22412:	4a08      	ldr	r2, [pc, #32]	; (22434 <nrfx_timer_clear+0x38>)
   22414:	f008 fcd0 	bl	2adb8 <assert_print>
   22418:	21b3      	movs	r1, #179	; 0xb3
   2241a:	4806      	ldr	r0, [pc, #24]	; (22434 <nrfx_timer_clear+0x38>)
   2241c:	f008 fcc5 	bl	2adaa <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22420:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   22422:	6803      	ldr	r3, [r0, #0]
   22424:	60da      	str	r2, [r3, #12]
}
   22426:	bd08      	pop	{r3, pc}
   22428:	2000e784 	.word	0x2000e784
   2242c:	0003b31e 	.word	0x0003b31e
   22430:	00033bc2 	.word	0x00033bc2
   22434:	0003ab14 	.word	0x0003ab14

00022438 <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   22438:	210c      	movs	r1, #12
{
   2243a:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2243c:	4b0f      	ldr	r3, [pc, #60]	; (2247c <nrfx_timer_increment+0x44>)
   2243e:	7902      	ldrb	r2, [r0, #4]
   22440:	fb01 3302 	mla	r3, r1, r2, r3
   22444:	7a1b      	ldrb	r3, [r3, #8]
   22446:	b94b      	cbnz	r3, 2245c <nrfx_timer_increment+0x24>
   22448:	490d      	ldr	r1, [pc, #52]	; (22480 <nrfx_timer_increment+0x48>)
   2244a:	23b9      	movs	r3, #185	; 0xb9
   2244c:	4a0d      	ldr	r2, [pc, #52]	; (22484 <nrfx_timer_increment+0x4c>)
   2244e:	480e      	ldr	r0, [pc, #56]	; (22488 <nrfx_timer_increment+0x50>)
   22450:	f008 fcb2 	bl	2adb8 <assert_print>
   22454:	21b9      	movs	r1, #185	; 0xb9
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   22456:	480b      	ldr	r0, [pc, #44]	; (22484 <nrfx_timer_increment+0x4c>)
   22458:	f008 fca7 	bl	2adaa <assert_post_action>
   2245c:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   2245e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   22462:	b2db      	uxtb	r3, r3
   22464:	b93b      	cbnz	r3, 22476 <nrfx_timer_increment+0x3e>
   22466:	4909      	ldr	r1, [pc, #36]	; (2248c <nrfx_timer_increment+0x54>)
   22468:	23ba      	movs	r3, #186	; 0xba
   2246a:	4a06      	ldr	r2, [pc, #24]	; (22484 <nrfx_timer_increment+0x4c>)
   2246c:	4806      	ldr	r0, [pc, #24]	; (22488 <nrfx_timer_increment+0x50>)
   2246e:	f008 fca3 	bl	2adb8 <assert_print>
   22472:	21ba      	movs	r1, #186	; 0xba
   22474:	e7ef      	b.n	22456 <nrfx_timer_increment+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22476:	2301      	movs	r3, #1
   22478:	6093      	str	r3, [r2, #8]

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
}
   2247a:	bd08      	pop	{r3, pc}
   2247c:	2000e784 	.word	0x2000e784
   22480:	0003b31e 	.word	0x0003b31e
   22484:	0003ab14 	.word	0x0003ab14
   22488:	00033bc2 	.word	0x00033bc2
   2248c:	0003b362 	.word	0x0003b362

00022490 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   22490:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   22492:	240c      	movs	r4, #12
   22494:	7902      	ldrb	r2, [r0, #4]
   22496:	4b13      	ldr	r3, [pc, #76]	; (224e4 <nrfx_timer_capture+0x54>)
   22498:	fb04 3302 	mla	r3, r4, r2, r3
   2249c:	7a1b      	ldrb	r3, [r3, #8]
   2249e:	b94b      	cbnz	r3, 224b4 <nrfx_timer_capture+0x24>
   224a0:	4911      	ldr	r1, [pc, #68]	; (224e8 <nrfx_timer_capture+0x58>)
   224a2:	23c2      	movs	r3, #194	; 0xc2
   224a4:	4a11      	ldr	r2, [pc, #68]	; (224ec <nrfx_timer_capture+0x5c>)
   224a6:	4812      	ldr	r0, [pc, #72]	; (224f0 <nrfx_timer_capture+0x60>)
   224a8:	f008 fc86 	bl	2adb8 <assert_print>
   224ac:	21c2      	movs	r1, #194	; 0xc2
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   224ae:	480f      	ldr	r0, [pc, #60]	; (224ec <nrfx_timer_capture+0x5c>)
   224b0:	f008 fc7b 	bl	2adaa <assert_post_action>
   224b4:	7943      	ldrb	r3, [r0, #5]
   224b6:	428b      	cmp	r3, r1
   224b8:	d807      	bhi.n	224ca <nrfx_timer_capture+0x3a>
   224ba:	490e      	ldr	r1, [pc, #56]	; (224f4 <nrfx_timer_capture+0x64>)
   224bc:	23c3      	movs	r3, #195	; 0xc3
   224be:	4a0b      	ldr	r2, [pc, #44]	; (224ec <nrfx_timer_capture+0x5c>)
   224c0:	480b      	ldr	r0, [pc, #44]	; (224f0 <nrfx_timer_capture+0x60>)
   224c2:	f008 fc79 	bl	2adb8 <assert_print>
   224c6:	21c3      	movs	r1, #195	; 0xc3
   224c8:	e7f1      	b.n	224ae <nrfx_timer_capture+0x1e>
   224ca:	2401      	movs	r4, #1
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   224cc:	008b      	lsls	r3, r1, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224ce:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   224d0:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224d2:	b2db      	uxtb	r3, r3
   224d4:	50d4      	str	r4, [r2, r3]

    nrf_timer_task_trigger(p_instance->p_reg,
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
   224d6:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg->CC[cc_channel];
   224d8:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   224dc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
   224e0:	bd10      	pop	{r4, pc}
   224e2:	bf00      	nop
   224e4:	2000e784 	.word	0x2000e784
   224e8:	0003b31e 	.word	0x0003b31e
   224ec:	0003ab14 	.word	0x0003ab14
   224f0:	00033bc2 	.word	0x00033bc2
   224f4:	0003b3a0 	.word	0x0003b3a0

000224f8 <rpc_handle_data_message>:
   224f8:	b570      	push	{r4, r5, r6, lr}
   224fa:	6803      	ldr	r3, [r0, #0]
   224fc:	4604      	mov	r4, r0
   224fe:	3b03      	subs	r3, #3
   22500:	b2db      	uxtb	r3, r3
   22502:	2b04      	cmp	r3, #4
   22504:	d803      	bhi.n	2250e <rpc_handle_data_message+0x16>
   22506:	4a09      	ldr	r2, [pc, #36]	; (2252c <rpc_handle_data_message+0x34>)
   22508:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2250c:	b92d      	cbnz	r5, 2251a <rpc_handle_data_message+0x22>
   2250e:	68a0      	ldr	r0, [r4, #8]
   22510:	b108      	cbz	r0, 22516 <rpc_handle_data_message+0x1e>
   22512:	f000 f825 	bl	22560 <rpc_transport_msg_data_rx_free>
   22516:	2000      	movs	r0, #0
   22518:	bd70      	pop	{r4, r5, r6, pc}
   2251a:	f00d f8d8 	bl	2f6ce <rpc_client_msg_from_rpc_msg_get>
   2251e:	6821      	ldr	r1, [r4, #0]
   22520:	462b      	mov	r3, r5
   22522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22526:	0c09      	lsrs	r1, r1, #16
   22528:	4718      	bx	r3
   2252a:	bf00      	nop
   2252c:	000327f0 	.word	0x000327f0

00022530 <rpc_transport_init>:
   22530:	4b01      	ldr	r3, [pc, #4]	; (22538 <rpc_transport_init+0x8>)
   22532:	699b      	ldr	r3, [r3, #24]
   22534:	4718      	bx	r3
   22536:	bf00      	nop
   22538:	2000ca20 	.word	0x2000ca20

0002253c <rpc_transport_msg_alloc>:
   2253c:	4b01      	ldr	r3, [pc, #4]	; (22544 <rpc_transport_msg_alloc+0x8>)
   2253e:	681b      	ldr	r3, [r3, #0]
   22540:	4718      	bx	r3
   22542:	bf00      	nop
   22544:	2000ca20 	.word	0x2000ca20

00022548 <rpc_transport_msg_data_tx_size>:
   22548:	4b01      	ldr	r3, [pc, #4]	; (22550 <rpc_transport_msg_data_tx_size+0x8>)
   2254a:	685b      	ldr	r3, [r3, #4]
   2254c:	4718      	bx	r3
   2254e:	bf00      	nop
   22550:	2000ca20 	.word	0x2000ca20

00022554 <rpc_transport_msg_rx_free>:
   22554:	4b01      	ldr	r3, [pc, #4]	; (2255c <rpc_transport_msg_rx_free+0x8>)
   22556:	68db      	ldr	r3, [r3, #12]
   22558:	4718      	bx	r3
   2255a:	bf00      	nop
   2255c:	2000ca20 	.word	0x2000ca20

00022560 <rpc_transport_msg_data_rx_free>:
   22560:	4b01      	ldr	r3, [pc, #4]	; (22568 <rpc_transport_msg_data_rx_free+0x8>)
   22562:	695b      	ldr	r3, [r3, #20]
   22564:	4718      	bx	r3
   22566:	bf00      	nop
   22568:	2000ca20 	.word	0x2000ca20

0002256c <rpc_transport_msg_send>:
   2256c:	4b01      	ldr	r3, [pc, #4]	; (22574 <rpc_transport_msg_send+0x8>)
   2256e:	689b      	ldr	r3, [r3, #8]
   22570:	4718      	bx	r3
   22572:	bf00      	nop
   22574:	2000ca20 	.word	0x2000ca20

00022578 <rpc_transport_data_rx_suspend>:
   22578:	4b01      	ldr	r3, [pc, #4]	; (22580 <rpc_transport_data_rx_suspend+0x8>)
   2257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2257c:	4718      	bx	r3
   2257e:	bf00      	nop
   22580:	2000ca20 	.word	0x2000ca20

00022584 <rpc_transport_data_rx_resume>:
   22584:	4b01      	ldr	r3, [pc, #4]	; (2258c <rpc_transport_data_rx_resume+0x8>)
   22586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22588:	4718      	bx	r3
   2258a:	bf00      	nop
   2258c:	2000ca20 	.word	0x2000ca20

00022590 <rpc_transport_ipc_msg_data_tx_size>:
   22590:	4b01      	ldr	r3, [pc, #4]	; (22598 <rpc_transport_ipc_msg_data_tx_size+0x8>)
   22592:	681b      	ldr	r3, [r3, #0]
   22594:	68d8      	ldr	r0, [r3, #12]
   22596:	4770      	bx	lr
   22598:	2000e790 	.word	0x2000e790

0002259c <rpc_transport_ipc_msg_rx_free>:
   2259c:	2300      	movs	r3, #0
   2259e:	b530      	push	{r4, r5, lr}
   225a0:	4910      	ldr	r1, [pc, #64]	; (225e4 <rpc_transport_ipc_msg_rx_free+0x48>)
   225a2:	680a      	ldr	r2, [r1, #0]
   225a4:	6814      	ldr	r4, [r2, #0]
   225a6:	42a3      	cmp	r3, r4
   225a8:	d10b      	bne.n	225c2 <rpc_transport_ipc_msg_rx_free+0x26>
   225aa:	2300      	movs	r3, #0
   225ac:	684a      	ldr	r2, [r1, #4]
   225ae:	6811      	ldr	r1, [r2, #0]
   225b0:	428b      	cmp	r3, r1
   225b2:	d015      	beq.n	225e0 <rpc_transport_ipc_msg_rx_free+0x44>
   225b4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   225b8:	68a4      	ldr	r4, [r4, #8]
   225ba:	42a0      	cmp	r0, r4
   225bc:	d008      	beq.n	225d0 <rpc_transport_ipc_msg_rx_free+0x34>
   225be:	3301      	adds	r3, #1
   225c0:	e7f6      	b.n	225b0 <rpc_transport_ipc_msg_rx_free+0x14>
   225c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   225c6:	68ad      	ldr	r5, [r5, #8]
   225c8:	42a8      	cmp	r0, r5
   225ca:	d001      	beq.n	225d0 <rpc_transport_ipc_msg_rx_free+0x34>
   225cc:	3301      	adds	r3, #1
   225ce:	e7ea      	b.n	225a6 <rpc_transport_ipc_msg_rx_free+0xa>
   225d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   225d4:	6853      	ldr	r3, [r2, #4]
   225d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   225da:	f043 0303 	orr.w	r3, r3, #3
   225de:	6053      	str	r3, [r2, #4]
   225e0:	bd30      	pop	{r4, r5, pc}
   225e2:	bf00      	nop
   225e4:	2000e7b0 	.word	0x2000e7b0

000225e8 <rpc_transport_ipc_msg_tx_free>:
   225e8:	2200      	movs	r2, #0
   225ea:	b530      	push	{r4, r5, lr}
   225ec:	4b0b      	ldr	r3, [pc, #44]	; (2261c <rpc_transport_ipc_msg_tx_free+0x34>)
   225ee:	6819      	ldr	r1, [r3, #0]
   225f0:	680c      	ldr	r4, [r1, #0]
   225f2:	4294      	cmp	r4, r2
   225f4:	d00f      	beq.n	22616 <rpc_transport_ipc_msg_tx_free+0x2e>
   225f6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   225fa:	689d      	ldr	r5, [r3, #8]
   225fc:	42a8      	cmp	r0, r5
   225fe:	d10b      	bne.n	22618 <rpc_transport_ipc_msg_tx_free+0x30>
   22600:	f04f 0203 	mov.w	r2, #3
   22604:	3304      	adds	r3, #4
   22606:	e8d3 1fcf 	ldaexb	r1, [r3]
   2260a:	2900      	cmp	r1, #0
   2260c:	d103      	bne.n	22616 <rpc_transport_ipc_msg_tx_free+0x2e>
   2260e:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   22612:	2800      	cmp	r0, #0
   22614:	d1f7      	bne.n	22606 <rpc_transport_ipc_msg_tx_free+0x1e>
   22616:	bd30      	pop	{r4, r5, pc}
   22618:	3201      	adds	r2, #1
   2261a:	e7ea      	b.n	225f2 <rpc_transport_ipc_msg_tx_free+0xa>
   2261c:	2000e7a8 	.word	0x2000e7a8

00022620 <handle_modem_rpc_msg>:
   22620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22624:	2500      	movs	r5, #0
   22626:	4606      	mov	r6, r0
   22628:	460f      	mov	r7, r1
   2262a:	4628      	mov	r0, r5
   2262c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 22694 <handle_modem_rpc_msg+0x74>
   22630:	6833      	ldr	r3, [r6, #0]
   22632:	42ab      	cmp	r3, r5
   22634:	d801      	bhi.n	2263a <handle_modem_rpc_msg+0x1a>
   22636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2263a:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   2263e:	6863      	ldr	r3, [r4, #4]
   22640:	b2db      	uxtb	r3, r3
   22642:	2b01      	cmp	r3, #1
   22644:	d117      	bne.n	22676 <handle_modem_rpc_msg+0x56>
   22646:	6862      	ldr	r2, [r4, #4]
   22648:	f8b8 3000 	ldrh.w	r3, [r8]
   2264c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   22650:	d111      	bne.n	22676 <handle_modem_rpc_msg+0x56>
   22652:	2f02      	cmp	r7, #2
   22654:	68a0      	ldr	r0, [r4, #8]
   22656:	d110      	bne.n	2267a <handle_modem_rpc_msg+0x5a>
   22658:	f7ff ff4e 	bl	224f8 <rpc_handle_data_message>
   2265c:	b990      	cbnz	r0, 22684 <handle_modem_rpc_msg+0x64>
   2265e:	6863      	ldr	r3, [r4, #4]
   22660:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22664:	f043 0303 	orr.w	r3, r3, #3
   22668:	6063      	str	r3, [r4, #4]
   2266a:	2001      	movs	r0, #1
   2266c:	f8b8 3000 	ldrh.w	r3, [r8]
   22670:	3301      	adds	r3, #1
   22672:	f8a8 3000 	strh.w	r3, [r8]
   22676:	3501      	adds	r5, #1
   22678:	e7da      	b.n	22630 <handle_modem_rpc_msg+0x10>
   2267a:	6801      	ldr	r1, [r0, #0]
   2267c:	0c09      	lsrs	r1, r1, #16
   2267e:	f00c ffcf 	bl	2f620 <rpc_handle_ctrl_message>
   22682:	e7eb      	b.n	2265c <handle_modem_rpc_msg+0x3c>
   22684:	2801      	cmp	r0, #1
   22686:	d1f0      	bne.n	2266a <handle_modem_rpc_msg+0x4a>
   22688:	6863      	ldr	r3, [r4, #4]
   2268a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2268e:	f043 0302 	orr.w	r3, r3, #2
   22692:	e7e9      	b.n	22668 <handle_modem_rpc_msg+0x48>
   22694:	2000ebda 	.word	0x2000ebda

00022698 <rpc_message_handler>:
   22698:	b538      	push	{r3, r4, r5, lr}
   2269a:	4d07      	ldr	r5, [pc, #28]	; (226b8 <rpc_message_handler+0x20>)
   2269c:	2101      	movs	r1, #1
   2269e:	6828      	ldr	r0, [r5, #0]
   226a0:	f7ff ffbe 	bl	22620 <handle_modem_rpc_msg>
   226a4:	2102      	movs	r1, #2
   226a6:	4604      	mov	r4, r0
   226a8:	6868      	ldr	r0, [r5, #4]
   226aa:	f7ff ffb9 	bl	22620 <handle_modem_rpc_msg>
   226ae:	2800      	cmp	r0, #0
   226b0:	d1f4      	bne.n	2269c <rpc_message_handler+0x4>
   226b2:	2c00      	cmp	r4, #0
   226b4:	d1f2      	bne.n	2269c <rpc_message_handler+0x4>
   226b6:	bd38      	pop	{r3, r4, r5, pc}
   226b8:	2000e7b0 	.word	0x2000e7b0

000226bc <ipc_irq_handler>:
   226bc:	b570      	push	{r4, r5, r6, lr}
   226be:	2807      	cmp	r0, #7
   226c0:	d868      	bhi.n	22794 <ipc_irq_handler+0xd8>
   226c2:	e8df f000 	tbb	[pc, r0]
   226c6:	670b      	.short	0x670b
   226c8:	674b674f 	.word	0x674b674f
   226cc:	0440      	.short	0x0440
   226ce:	f001 fd85 	bl	241dc <ipc_trace_handler>
   226d2:	2003      	movs	r0, #3
   226d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   226d8:	f7fa bcfa 	b.w	1d0d0 <nrf_modem_os_event_notify>
   226dc:	2003      	movs	r0, #3
   226de:	4b2e      	ldr	r3, [pc, #184]	; (22798 <ipc_irq_handler+0xdc>)
   226e0:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   226e4:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   226e8:	4b2c      	ldr	r3, [pc, #176]	; (2279c <ipc_irq_handler+0xe0>)
   226ea:	781d      	ldrb	r5, [r3, #0]
   226ec:	7018      	strb	r0, [r3, #0]
   226ee:	f001 fd4b 	bl	24188 <nrf_modem_state_set>
   226f2:	4b2b      	ldr	r3, [pc, #172]	; (227a0 <ipc_irq_handler+0xe4>)
   226f4:	b2ed      	uxtb	r5, r5
   226f6:	6818      	ldr	r0, [r3, #0]
   226f8:	f7fa fc86 	bl	1d008 <nrf_modem_os_sem_give>
   226fc:	2d01      	cmp	r5, #1
   226fe:	d11c      	bne.n	2273a <ipc_irq_handler+0x7e>
   22700:	4b28      	ldr	r3, [pc, #160]	; (227a4 <ipc_irq_handler+0xe8>)
   22702:	429c      	cmp	r4, r3
   22704:	d010      	beq.n	22728 <ipc_irq_handler+0x6c>
   22706:	d809      	bhi.n	2271c <ipc_irq_handler+0x60>
   22708:	3b02      	subs	r3, #2
   2270a:	429c      	cmp	r4, r3
   2270c:	d00f      	beq.n	2272e <ipc_irq_handler+0x72>
   2270e:	3301      	adds	r3, #1
   22710:	429c      	cmp	r4, r3
   22712:	d00f      	beq.n	22734 <ipc_irq_handler+0x78>
   22714:	4b24      	ldr	r3, [pc, #144]	; (227a8 <ipc_irq_handler+0xec>)
   22716:	601c      	str	r4, [r3, #0]
   22718:	2000      	movs	r0, #0
   2271a:	e7db      	b.n	226d4 <ipc_irq_handler+0x18>
   2271c:	4b23      	ldr	r3, [pc, #140]	; (227ac <ipc_irq_handler+0xf0>)
   2271e:	429c      	cmp	r4, r3
   22720:	d1f8      	bne.n	22714 <ipc_irq_handler+0x58>
   22722:	f06f 040c 	mvn.w	r4, #12
   22726:	e7f5      	b.n	22714 <ipc_irq_handler+0x58>
   22728:	f06f 040b 	mvn.w	r4, #11
   2272c:	e7f2      	b.n	22714 <ipc_irq_handler+0x58>
   2272e:	f06f 0415 	mvn.w	r4, #21
   22732:	e7ef      	b.n	22714 <ipc_irq_handler+0x58>
   22734:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22738:	e7ec      	b.n	22714 <ipc_irq_handler+0x58>
   2273a:	4631      	mov	r1, r6
   2273c:	f3c4 000b 	ubfx	r0, r4, #0, #12
   22740:	f001 fd16 	bl	24170 <nrf_modem_fault_handler_internal>
   22744:	e7e8      	b.n	22718 <ipc_irq_handler+0x5c>
   22746:	2202      	movs	r2, #2
   22748:	4b14      	ldr	r3, [pc, #80]	; (2279c <ipc_irq_handler+0xe0>)
   2274a:	2000      	movs	r0, #0
   2274c:	701a      	strb	r2, [r3, #0]
   2274e:	f001 fd1b 	bl	24188 <nrf_modem_state_set>
   22752:	4b13      	ldr	r3, [pc, #76]	; (227a0 <ipc_irq_handler+0xe4>)
   22754:	6818      	ldr	r0, [r3, #0]
   22756:	f7fa fc57 	bl	1d008 <nrf_modem_os_sem_give>
   2275a:	e7dd      	b.n	22718 <ipc_irq_handler+0x5c>
   2275c:	f7ff ff9c 	bl	22698 <rpc_message_handler>
   22760:	2002      	movs	r0, #2
   22762:	e7b7      	b.n	226d4 <ipc_irq_handler+0x18>
   22764:	4b0d      	ldr	r3, [pc, #52]	; (2279c <ipc_irq_handler+0xe0>)
   22766:	781a      	ldrb	r2, [r3, #0]
   22768:	2a01      	cmp	r2, #1
   2276a:	b2d0      	uxtb	r0, r2
   2276c:	d10e      	bne.n	2278c <ipc_irq_handler+0xd0>
   2276e:	4a10      	ldr	r2, [pc, #64]	; (227b0 <ipc_irq_handler+0xf4>)
   22770:	6811      	ldr	r1, [r2, #0]
   22772:	4a10      	ldr	r2, [pc, #64]	; (227b4 <ipc_irq_handler+0xf8>)
   22774:	688c      	ldr	r4, [r1, #8]
   22776:	6054      	str	r4, [r2, #4]
   22778:	6849      	ldr	r1, [r1, #4]
   2277a:	6011      	str	r1, [r2, #0]
   2277c:	2200      	movs	r2, #0
   2277e:	701a      	strb	r2, [r3, #0]
   22780:	f001 fd02 	bl	24188 <nrf_modem_state_set>
   22784:	4b06      	ldr	r3, [pc, #24]	; (227a0 <ipc_irq_handler+0xe4>)
   22786:	6818      	ldr	r0, [r3, #0]
   22788:	f7fa fc3e 	bl	1d008 <nrf_modem_os_sem_give>
   2278c:	f7ff ff84 	bl	22698 <rpc_message_handler>
   22790:	2001      	movs	r0, #1
   22792:	e79f      	b.n	226d4 <ipc_irq_handler+0x18>
   22794:	bd70      	pop	{r4, r5, r6, pc}
   22796:	bf00      	nop
   22798:	4002a000 	.word	0x4002a000
   2279c:	2001047f 	.word	0x2001047f
   227a0:	2000e798 	.word	0x2000e798
   227a4:	00010022 	.word	0x00010022
   227a8:	2000e7ac 	.word	0x2000e7ac
   227ac:	00013032 	.word	0x00013032
   227b0:	2000e794 	.word	0x2000e794
   227b4:	2000e7b0 	.word	0x2000e7b0

000227b8 <rpc_transport_ipc_data_msg_send>:
   227b8:	b570      	push	{r4, r5, r6, lr}
   227ba:	4b16      	ldr	r3, [pc, #88]	; (22814 <rpc_transport_ipc_data_msg_send+0x5c>)
   227bc:	6842      	ldr	r2, [r0, #4]
   227be:	681b      	ldr	r3, [r3, #0]
   227c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   227c4:	f042 0202 	orr.w	r2, r2, #2
   227c8:	1ac3      	subs	r3, r0, r3
   227ca:	6042      	str	r2, [r0, #4]
   227cc:	4812      	ldr	r0, [pc, #72]	; (22818 <rpc_transport_ipc_data_msg_send+0x60>)
   227ce:	4a13      	ldr	r2, [pc, #76]	; (2281c <rpc_transport_ipc_data_msg_send+0x64>)
   227d0:	6801      	ldr	r1, [r0, #0]
   227d2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   227d6:	e8d2 4fdf 	ldaexh	r4, [r2]
   227da:	1c65      	adds	r5, r4, #1
   227dc:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   227e0:	2e00      	cmp	r6, #0
   227e2:	d1f8      	bne.n	227d6 <rpc_transport_ipc_data_msg_send+0x1e>
   227e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   227e8:	684a      	ldr	r2, [r1, #4]
   227ea:	b292      	uxth	r2, r2
   227ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   227f0:	604a      	str	r2, [r1, #4]
   227f2:	6802      	ldr	r2, [r0, #0]
   227f4:	2003      	movs	r0, #3
   227f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   227fa:	6853      	ldr	r3, [r2, #4]
   227fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22800:	f043 0301 	orr.w	r3, r3, #1
   22804:	6053      	str	r3, [r2, #4]
   22806:	f00c faeb 	bl	2ede0 <nrf_modem_os_busywait>
   2280a:	2201      	movs	r2, #1
   2280c:	4b04      	ldr	r3, [pc, #16]	; (22820 <rpc_transport_ipc_data_msg_send+0x68>)
   2280e:	60da      	str	r2, [r3, #12]
   22810:	bd70      	pop	{r4, r5, r6, pc}
   22812:	bf00      	nop
   22814:	2000e7a0 	.word	0x2000e7a0
   22818:	2000e7a8 	.word	0x2000e7a8
   2281c:	2000ebdc 	.word	0x2000ebdc
   22820:	4002a000 	.word	0x4002a000

00022824 <rpc_transport_ipc_ctrl_msg_alloc>:
   22824:	230a      	movs	r3, #10
   22826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22828:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2282c:	4e0c      	ldr	r6, [pc, #48]	; (22860 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   2282e:	4f0d      	ldr	r7, [pc, #52]	; (22864 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   22830:	9301      	str	r3, [sp, #4]
   22832:	6831      	ldr	r1, [r6, #0]
   22834:	6838      	ldr	r0, [r7, #0]
   22836:	f00c ff25 	bl	2f684 <rpc_transport_ipc_msg_alloc>
   2283a:	4604      	mov	r4, r0
   2283c:	b940      	cbnz	r0, 22850 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   2283e:	f00c fad1 	bl	2ede4 <nrf_modem_os_is_in_isr>
   22842:	b940      	cbnz	r0, 22856 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   22844:	2001      	movs	r0, #1
   22846:	a901      	add	r1, sp, #4
   22848:	f7fa faca 	bl	1cde0 <nrf_modem_os_timedwait>
   2284c:	306e      	adds	r0, #110	; 0x6e
   2284e:	d1f0      	bne.n	22832 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   22850:	4620      	mov	r0, r4
   22852:	b003      	add	sp, #12
   22854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22856:	9801      	ldr	r0, [sp, #4]
   22858:	4368      	muls	r0, r5
   2285a:	f00c fac1 	bl	2ede0 <nrf_modem_os_busywait>
   2285e:	e7e8      	b.n	22832 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   22860:	2000e79c 	.word	0x2000e79c
   22864:	2000e7a4 	.word	0x2000e7a4

00022868 <rpc_transport_ipc_data_msg_alloc>:
   22868:	4b05      	ldr	r3, [pc, #20]	; (22880 <rpc_transport_ipc_data_msg_alloc+0x18>)
   2286a:	781b      	ldrb	r3, [r3, #0]
   2286c:	b92b      	cbnz	r3, 2287a <rpc_transport_ipc_data_msg_alloc+0x12>
   2286e:	4b05      	ldr	r3, [pc, #20]	; (22884 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   22870:	6819      	ldr	r1, [r3, #0]
   22872:	4b05      	ldr	r3, [pc, #20]	; (22888 <rpc_transport_ipc_data_msg_alloc+0x20>)
   22874:	6818      	ldr	r0, [r3, #0]
   22876:	f00c bf05 	b.w	2f684 <rpc_transport_ipc_msg_alloc>
   2287a:	2000      	movs	r0, #0
   2287c:	4770      	bx	lr
   2287e:	bf00      	nop
   22880:	2001047e 	.word	0x2001047e
   22884:	2000e7a0 	.word	0x2000e7a0
   22888:	2000e7a8 	.word	0x2000e7a8

0002288c <rpc_transport_ipc_init>:
   2288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22890:	b095      	sub	sp, #84	; 0x54
   22892:	2238      	movs	r2, #56	; 0x38
   22894:	2100      	movs	r1, #0
   22896:	4606      	mov	r6, r0
   22898:	a803      	add	r0, sp, #12
   2289a:	f00d fff2 	bl	30882 <memset>
   2289e:	2302      	movs	r3, #2
   228a0:	9304      	str	r3, [sp, #16]
   228a2:	2308      	movs	r3, #8
   228a4:	9306      	str	r3, [sp, #24]
   228a6:	2320      	movs	r3, #32
   228a8:	9308      	str	r3, [sp, #32]
   228aa:	2304      	movs	r3, #4
   228ac:	930d      	str	r3, [sp, #52]	; 0x34
   228ae:	2310      	movs	r3, #16
   228b0:	2540      	movs	r5, #64	; 0x40
   228b2:	930f      	str	r3, [sp, #60]	; 0x3c
   228b4:	2380      	movs	r3, #128	; 0x80
   228b6:	2201      	movs	r2, #1
   228b8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   228bc:	23d5      	movs	r3, #213	; 0xd5
   228be:	2100      	movs	r1, #0
   228c0:	4855      	ldr	r0, [pc, #340]	; (22a18 <rpc_transport_ipc_init+0x18c>)
   228c2:	920b      	str	r2, [sp, #44]	; 0x2c
   228c4:	9313      	str	r3, [sp, #76]	; 0x4c
   228c6:	f7fa fb6b 	bl	1cfa0 <nrf_modem_os_sem_init>
   228ca:	4605      	mov	r5, r0
   228cc:	2800      	cmp	r0, #0
   228ce:	f040 809f 	bne.w	22a10 <rpc_transport_ipc_init+0x184>
   228d2:	4602      	mov	r2, r0
   228d4:	4951      	ldr	r1, [pc, #324]	; (22a1c <rpc_transport_ipc_init+0x190>)
   228d6:	7930      	ldrb	r0, [r6, #4]
   228d8:	f7ff fb98 	bl	2200c <nrfx_ipc_init>
   228dc:	a803      	add	r0, sp, #12
   228de:	f7ff fbad 	bl	2203c <nrfx_ipc_config_load>
   228e2:	6834      	ldr	r4, [r6, #0]
   228e4:	6862      	ldr	r2, [r4, #4]
   228e6:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   228ea:	f040 8089 	bne.w	22a00 <rpc_transport_ipc_init+0x174>
   228ee:	6961      	ldr	r1, [r4, #20]
   228f0:	68e3      	ldr	r3, [r4, #12]
   228f2:	440b      	add	r3, r1
   228f4:	69e1      	ldr	r1, [r4, #28]
   228f6:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   228fa:	440b      	add	r3, r1
   228fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   22900:	d87e      	bhi.n	22a00 <rpc_transport_ipc_init+0x174>
   22902:	6820      	ldr	r0, [r4, #0]
   22904:	4629      	mov	r1, r5
   22906:	f00d ffbc 	bl	30882 <memset>
   2290a:	6833      	ldr	r3, [r6, #0]
   2290c:	681c      	ldr	r4, [r3, #0]
   2290e:	f8d3 901c 	ldr.w	r9, [r3, #28]
   22912:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   22916:	9201      	str	r2, [sp, #4]
   22918:	f104 0760 	add.w	r7, r4, #96	; 0x60
   2291c:	4a40      	ldr	r2, [pc, #256]	; (22a20 <rpc_transport_ipc_init+0x194>)
   2291e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   22922:	f104 0b20 	add.w	fp, r4, #32
   22926:	f1b9 0f00 	cmp.w	r9, #0
   2292a:	d15c      	bne.n	229e6 <rpc_transport_ipc_init+0x15a>
   2292c:	f8c2 b000 	str.w	fp, [r2]
   22930:	2500      	movs	r5, #0
   22932:	f04f 0a01 	mov.w	sl, #1
   22936:	7025      	strb	r5, [r4, #0]
   22938:	7065      	strb	r5, [r4, #1]
   2293a:	f884 a002 	strb.w	sl, [r4, #2]
   2293e:	70e5      	strb	r5, [r4, #3]
   22940:	6833      	ldr	r3, [r6, #0]
   22942:	4640      	mov	r0, r8
   22944:	691b      	ldr	r3, [r3, #16]
   22946:	6063      	str	r3, [r4, #4]
   22948:	6833      	ldr	r3, [r6, #0]
   2294a:	695b      	ldr	r3, [r3, #20]
   2294c:	f8c4 b014 	str.w	fp, [r4, #20]
   22950:	60a3      	str	r3, [r4, #8]
   22952:	4b34      	ldr	r3, [pc, #208]	; (22a24 <rpc_transport_ipc_init+0x198>)
   22954:	f8c4 9018 	str.w	r9, [r4, #24]
   22958:	f8c3 8000 	str.w	r8, [r3]
   2295c:	4b32      	ldr	r3, [pc, #200]	; (22a28 <rpc_transport_ipc_init+0x19c>)
   2295e:	60e7      	str	r7, [r4, #12]
   22960:	601f      	str	r7, [r3, #0]
   22962:	2308      	movs	r3, #8
   22964:	f8c4 8010 	str.w	r8, [r4, #16]
   22968:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   2296c:	f888 5001 	strb.w	r5, [r8, #1]
   22970:	f888 5002 	strb.w	r5, [r8, #2]
   22974:	f888 5003 	strb.w	r5, [r8, #3]
   22978:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   2297c:	707d      	strb	r5, [r7, #1]
   2297e:	70bd      	strb	r5, [r7, #2]
   22980:	70fd      	strb	r5, [r7, #3]
   22982:	f00c fe67 	bl	2f654 <rpc_list_preambles_init>
   22986:	4638      	mov	r0, r7
   22988:	f00c fe64 	bl	2f654 <rpc_list_preambles_init>
   2298c:	4b27      	ldr	r3, [pc, #156]	; (22a2c <rpc_transport_ipc_init+0x1a0>)
   2298e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   22992:	601a      	str	r2, [r3, #0]
   22994:	4b26      	ldr	r3, [pc, #152]	; (22a30 <rpc_transport_ipc_init+0x1a4>)
   22996:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   2299a:	601a      	str	r2, [r3, #0]
   2299c:	6831      	ldr	r1, [r6, #0]
   2299e:	4b25      	ldr	r3, [pc, #148]	; (22a34 <rpc_transport_ipc_init+0x1a8>)
   229a0:	6019      	str	r1, [r3, #0]
   229a2:	4b25      	ldr	r3, [pc, #148]	; (22a38 <rpc_transport_ipc_init+0x1ac>)
   229a4:	4925      	ldr	r1, [pc, #148]	; (22a3c <rpc_transport_ipc_init+0x1b0>)
   229a6:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   229aa:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   229ae:	4b24      	ldr	r3, [pc, #144]	; (22a40 <rpc_transport_ipc_init+0x1b4>)
   229b0:	4c24      	ldr	r4, [pc, #144]	; (22a44 <rpc_transport_ipc_init+0x1b8>)
   229b2:	801d      	strh	r5, [r3, #0]
   229b4:	4b24      	ldr	r3, [pc, #144]	; (22a48 <rpc_transport_ipc_init+0x1bc>)
   229b6:	6025      	str	r5, [r4, #0]
   229b8:	801d      	strh	r5, [r3, #0]
   229ba:	4b24      	ldr	r3, [pc, #144]	; (22a4c <rpc_transport_ipc_init+0x1c0>)
   229bc:	f883 a000 	strb.w	sl, [r3]
   229c0:	4b23      	ldr	r3, [pc, #140]	; (22a50 <rpc_transport_ipc_init+0x1c4>)
   229c2:	9502      	str	r5, [sp, #8]
   229c4:	611d      	str	r5, [r3, #16]
   229c6:	691b      	ldr	r3, [r3, #16]
   229c8:	9302      	str	r3, [sp, #8]
   229ca:	9b02      	ldr	r3, [sp, #8]
   229cc:	4b12      	ldr	r3, [pc, #72]	; (22a18 <rpc_transport_ipc_init+0x18c>)
   229ce:	6818      	ldr	r0, [r3, #0]
   229d0:	f7fa fb3e 	bl	1d050 <nrf_modem_os_sem_take>
   229d4:	b9c8      	cbnz	r0, 22a0a <rpc_transport_ipc_init+0x17e>
   229d6:	6824      	ldr	r4, [r4, #0]
   229d8:	b9a4      	cbnz	r4, 22a04 <rpc_transport_ipc_init+0x178>
   229da:	4b1e      	ldr	r3, [pc, #120]	; (22a54 <rpc_transport_ipc_init+0x1c8>)
   229dc:	701c      	strb	r4, [r3, #0]
   229de:	4620      	mov	r0, r4
   229e0:	b015      	add	sp, #84	; 0x54
   229e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229e6:	699b      	ldr	r3, [r3, #24]
   229e8:	f104 0940 	add.w	r9, r4, #64	; 0x40
   229ec:	6463      	str	r3, [r4, #68]	; 0x44
   229ee:	6833      	ldr	r3, [r6, #0]
   229f0:	4648      	mov	r0, r9
   229f2:	69db      	ldr	r3, [r3, #28]
   229f4:	f8c2 b000 	str.w	fp, [r2]
   229f8:	6423      	str	r3, [r4, #64]	; 0x40
   229fa:	f001 fbd3 	bl	241a4 <ipc_trace_init>
   229fe:	e797      	b.n	22930 <rpc_transport_ipc_init+0xa4>
   22a00:	f06f 0415 	mvn.w	r4, #21
   22a04:	f7ff fb5a 	bl	220bc <nrfx_ipc_uninit>
   22a08:	e7e9      	b.n	229de <rpc_transport_ipc_init+0x152>
   22a0a:	f06f 0473 	mvn.w	r4, #115	; 0x73
   22a0e:	e7f9      	b.n	22a04 <rpc_transport_ipc_init+0x178>
   22a10:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   22a14:	e7e3      	b.n	229de <rpc_transport_ipc_init+0x152>
   22a16:	bf00      	nop
   22a18:	2000e798 	.word	0x2000e798
   22a1c:	000226bd 	.word	0x000226bd
   22a20:	2000e794 	.word	0x2000e794
   22a24:	2000e7a8 	.word	0x2000e7a8
   22a28:	2000e7a4 	.word	0x2000e7a4
   22a2c:	2000e7a0 	.word	0x2000e7a0
   22a30:	2000e79c 	.word	0x2000e79c
   22a34:	2000e790 	.word	0x2000e790
   22a38:	4002a000 	.word	0x4002a000
   22a3c:	000249f0 	.word	0x000249f0
   22a40:	2000ebdc 	.word	0x2000ebdc
   22a44:	2000e7ac 	.word	0x2000e7ac
   22a48:	2000ebda 	.word	0x2000ebda
   22a4c:	2001047f 	.word	0x2001047f
   22a50:	40005600 	.word	0x40005600
   22a54:	2001047e 	.word	0x2001047e

00022a58 <rpc_transport_ipc_ctrl_msg_send>:
   22a58:	b570      	push	{r4, r5, r6, lr}
   22a5a:	4b16      	ldr	r3, [pc, #88]	; (22ab4 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   22a5c:	6842      	ldr	r2, [r0, #4]
   22a5e:	681b      	ldr	r3, [r3, #0]
   22a60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   22a64:	f042 0201 	orr.w	r2, r2, #1
   22a68:	1ac3      	subs	r3, r0, r3
   22a6a:	6042      	str	r2, [r0, #4]
   22a6c:	4812      	ldr	r0, [pc, #72]	; (22ab8 <rpc_transport_ipc_ctrl_msg_send+0x60>)
   22a6e:	4a13      	ldr	r2, [pc, #76]	; (22abc <rpc_transport_ipc_ctrl_msg_send+0x64>)
   22a70:	6801      	ldr	r1, [r0, #0]
   22a72:	f3c3 1389 	ubfx	r3, r3, #6, #10
   22a76:	e8d2 4fdf 	ldaexh	r4, [r2]
   22a7a:	1c65      	adds	r5, r4, #1
   22a7c:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   22a80:	2e00      	cmp	r6, #0
   22a82:	d1f8      	bne.n	22a76 <rpc_transport_ipc_ctrl_msg_send+0x1e>
   22a84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   22a88:	684a      	ldr	r2, [r1, #4]
   22a8a:	b292      	uxth	r2, r2
   22a8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   22a90:	604a      	str	r2, [r1, #4]
   22a92:	6802      	ldr	r2, [r0, #0]
   22a94:	2003      	movs	r0, #3
   22a96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22a9a:	6853      	ldr	r3, [r2, #4]
   22a9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   22aa0:	f043 0301 	orr.w	r3, r3, #1
   22aa4:	6053      	str	r3, [r2, #4]
   22aa6:	f00c f99b 	bl	2ede0 <nrf_modem_os_busywait>
   22aaa:	2201      	movs	r2, #1
   22aac:	4b04      	ldr	r3, [pc, #16]	; (22ac0 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   22aae:	605a      	str	r2, [r3, #4]
   22ab0:	bd70      	pop	{r4, r5, r6, pc}
   22ab2:	bf00      	nop
   22ab4:	2000e79c 	.word	0x2000e79c
   22ab8:	2000e7a4 	.word	0x2000e7a4
   22abc:	2000ebdc 	.word	0x2000ebdc
   22ac0:	4002a000 	.word	0x4002a000

00022ac4 <rpc_transport_ipc_request_shutdown>:
   22ac4:	b510      	push	{r4, lr}
   22ac6:	f7ff fead 	bl	22824 <rpc_transport_ipc_ctrl_msg_alloc>
   22aca:	2401      	movs	r4, #1
   22acc:	2200      	movs	r2, #0
   22ace:	2103      	movs	r1, #3
   22ad0:	7004      	strb	r4, [r0, #0]
   22ad2:	7081      	strb	r1, [r0, #2]
   22ad4:	7042      	strb	r2, [r0, #1]
   22ad6:	70c2      	strb	r2, [r0, #3]
   22ad8:	f7ff ffbe 	bl	22a58 <rpc_transport_ipc_ctrl_msg_send>
   22adc:	4b05      	ldr	r3, [pc, #20]	; (22af4 <rpc_transport_ipc_request_shutdown+0x30>)
   22ade:	701c      	strb	r4, [r3, #0]
   22ae0:	f00c fdcb 	bl	2f67a <rpc_transport_ipc_data_rx_suspend>
   22ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22ae8:	4b03      	ldr	r3, [pc, #12]	; (22af8 <rpc_transport_ipc_request_shutdown+0x34>)
   22aea:	f247 5130 	movw	r1, #30000	; 0x7530
   22aee:	6818      	ldr	r0, [r3, #0]
   22af0:	f7fa baae 	b.w	1d050 <nrf_modem_os_sem_take>
   22af4:	2001047e 	.word	0x2001047e
   22af8:	2000e798 	.word	0x2000e798

00022afc <rpc_transport_ipc_msg_data_rx_free>:
   22afc:	b510      	push	{r4, lr}
   22afe:	4b0a      	ldr	r3, [pc, #40]	; (22b28 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   22b00:	4604      	mov	r4, r0
   22b02:	781b      	ldrb	r3, [r3, #0]
   22b04:	2b03      	cmp	r3, #3
   22b06:	d00e      	beq.n	22b26 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22b08:	f7ff fe8c 	bl	22824 <rpc_transport_ipc_ctrl_msg_alloc>
   22b0c:	b158      	cbz	r0, 22b26 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   22b0e:	2101      	movs	r1, #1
   22b10:	2200      	movs	r2, #0
   22b12:	7001      	strb	r1, [r0, #0]
   22b14:	2102      	movs	r1, #2
   22b16:	6084      	str	r4, [r0, #8]
   22b18:	7042      	strb	r2, [r0, #1]
   22b1a:	7081      	strb	r1, [r0, #2]
   22b1c:	70c2      	strb	r2, [r0, #3]
   22b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22b22:	f7ff bf99 	b.w	22a58 <rpc_transport_ipc_ctrl_msg_send>
   22b26:	bd10      	pop	{r4, pc}
   22b28:	2001047f 	.word	0x2001047f

00022b2c <at_cmd_send>:
   22b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22b30:	4605      	mov	r5, r0
   22b32:	2000      	movs	r0, #0
   22b34:	4617      	mov	r7, r2
   22b36:	4688      	mov	r8, r1
   22b38:	461e      	mov	r6, r3
   22b3a:	f00c fdca 	bl	2f6d2 <rpc_client_msg_alloc>
   22b3e:	4602      	mov	r2, r0
   22b40:	b940      	cbnz	r0, 22b54 <at_cmd_send+0x28>
   22b42:	b115      	cbz	r5, 22b4a <at_cmd_send+0x1e>
   22b44:	4628      	mov	r0, r5
   22b46:	f00c fdf0 	bl	2f72a <rpc_client_msg_data_tx_free>
   22b4a:	f06f 000b 	mvn.w	r0, #11
   22b4e:	b002      	add	sp, #8
   22b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b54:	f06f 0358 	mvn.w	r3, #88	; 0x58
   22b58:	2400      	movs	r4, #0
   22b5a:	7303      	strb	r3, [r0, #12]
   22b5c:	2304      	movs	r3, #4
   22b5e:	6005      	str	r5, [r0, #0]
   22b60:	4d0e      	ldr	r5, [pc, #56]	; (22b9c <at_cmd_send+0x70>)
   22b62:	7203      	strb	r3, [r0, #8]
   22b64:	7344      	strb	r4, [r0, #13]
   22b66:	7384      	strb	r4, [r0, #14]
   22b68:	73c4      	strb	r4, [r0, #15]
   22b6a:	7244      	strb	r4, [r0, #9]
   22b6c:	7284      	strb	r4, [r0, #10]
   22b6e:	72c4      	strb	r4, [r0, #11]
   22b70:	f8c0 8004 	str.w	r8, [r0, #4]
   22b74:	4639      	mov	r1, r7
   22b76:	2003      	movs	r0, #3
   22b78:	702c      	strb	r4, [r5, #0]
   22b7a:	f00c fdc6 	bl	2f70a <rpc_client_msg_send>
   22b7e:	f04f 33ff 	mov.w	r3, #4294967295
   22b82:	9301      	str	r3, [sp, #4]
   22b84:	782b      	ldrb	r3, [r5, #0]
   22b86:	42b3      	cmp	r3, r6
   22b88:	d101      	bne.n	22b8e <at_cmd_send+0x62>
   22b8a:	2000      	movs	r0, #0
   22b8c:	e7df      	b.n	22b4e <at_cmd_send+0x22>
   22b8e:	2002      	movs	r0, #2
   22b90:	a901      	add	r1, sp, #4
   22b92:	f7fa f925 	bl	1cde0 <nrf_modem_os_timedwait>
   22b96:	2800      	cmp	r0, #0
   22b98:	d0f4      	beq.n	22b84 <at_cmd_send+0x58>
   22b9a:	e7d8      	b.n	22b4e <at_cmd_send+0x22>
   22b9c:	20010480 	.word	0x20010480

00022ba0 <at_response_match>:
   22ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ba2:	4605      	mov	r5, r0
   22ba4:	2400      	movs	r4, #0
   22ba6:	4f0f      	ldr	r7, [pc, #60]	; (22be4 <at_response_match+0x44>)
   22ba8:	f857 6b04 	ldr.w	r6, [r7], #4
   22bac:	4628      	mov	r0, r5
   22bae:	4631      	mov	r1, r6
   22bb0:	f00e f80c 	bl	30bcc <strstr>
   22bb4:	b928      	cbnz	r0, 22bc2 <at_response_match+0x22>
   22bb6:	3401      	adds	r4, #1
   22bb8:	2c04      	cmp	r4, #4
   22bba:	d1f5      	bne.n	22ba8 <at_response_match+0x8>
   22bbc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22bc0:	e00d      	b.n	22bde <at_response_match+0x3e>
   22bc2:	b16c      	cbz	r4, 22be0 <at_response_match+0x40>
   22bc4:	1ea3      	subs	r3, r4, #2
   22bc6:	2b01      	cmp	r3, #1
   22bc8:	d8f8      	bhi.n	22bbc <at_response_match+0x1c>
   22bca:	4630      	mov	r0, r6
   22bcc:	f7e6 fb29 	bl	9222 <strlen>
   22bd0:	220a      	movs	r2, #10
   22bd2:	2100      	movs	r1, #0
   22bd4:	4428      	add	r0, r5
   22bd6:	f005 fefb 	bl	289d0 <strtol>
   22bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   22bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22be0:	4620      	mov	r0, r4
   22be2:	e7fc      	b.n	22bde <at_response_match+0x3e>
   22be4:	00032804 	.word	0x00032804

00022be8 <at_vsprintf>:
   22be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22bec:	2500      	movs	r5, #0
   22bee:	4681      	mov	r9, r0
   22bf0:	460f      	mov	r7, r1
   22bf2:	4810      	ldr	r0, [pc, #64]	; (22c34 <at_vsprintf+0x4c>)
   22bf4:	4629      	mov	r1, r5
   22bf6:	4690      	mov	r8, r2
   22bf8:	461e      	mov	r6, r3
   22bfa:	9301      	str	r3, [sp, #4]
   22bfc:	f006 f80c 	bl	28c18 <vsniprintf>
   22c00:	1e04      	subs	r4, r0, #0
   22c02:	db11      	blt.n	22c28 <at_vsprintf+0x40>
   22c04:	3401      	adds	r4, #1
   22c06:	4620      	mov	r0, r4
   22c08:	f00c fd8d 	bl	2f726 <rpc_client_msg_data_tx_alloc>
   22c0c:	f8c9 0000 	str.w	r0, [r9]
   22c10:	b168      	cbz	r0, 22c2e <at_vsprintf+0x46>
   22c12:	4633      	mov	r3, r6
   22c14:	4642      	mov	r2, r8
   22c16:	4621      	mov	r1, r4
   22c18:	9601      	str	r6, [sp, #4]
   22c1a:	f005 fffd 	bl	28c18 <vsniprintf>
   22c1e:	4628      	mov	r0, r5
   22c20:	603c      	str	r4, [r7, #0]
   22c22:	b003      	add	sp, #12
   22c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22c28:	f06f 0015 	mvn.w	r0, #21
   22c2c:	e7f9      	b.n	22c22 <at_vsprintf+0x3a>
   22c2e:	f06f 000b 	mvn.w	r0, #11
   22c32:	e7f6      	b.n	22c22 <at_vsprintf+0x3a>
   22c34:	00031e0f 	.word	0x00031e0f

00022c38 <nrf_modem_at_notif_handler_set>:
   22c38:	4b01      	ldr	r3, [pc, #4]	; (22c40 <nrf_modem_at_notif_handler_set+0x8>)
   22c3a:	6018      	str	r0, [r3, #0]
   22c3c:	2000      	movs	r0, #0
   22c3e:	4770      	bx	lr
   22c40:	2000e7c4 	.word	0x2000e7c4

00022c44 <nrf_modem_at_printf>:
   22c44:	b40f      	push	{r0, r1, r2, r3}
   22c46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22c48:	9c08      	ldr	r4, [sp, #32]
   22c4a:	f001 faa3 	bl	24194 <nrf_modem_state_is_initialized>
   22c4e:	2800      	cmp	r0, #0
   22c50:	d039      	beq.n	22cc6 <nrf_modem_at_printf+0x82>
   22c52:	2c00      	cmp	r4, #0
   22c54:	d03a      	beq.n	22ccc <nrf_modem_at_printf+0x88>
   22c56:	4622      	mov	r2, r4
   22c58:	ab09      	add	r3, sp, #36	; 0x24
   22c5a:	a903      	add	r1, sp, #12
   22c5c:	a802      	add	r0, sp, #8
   22c5e:	9301      	str	r3, [sp, #4]
   22c60:	f7ff ffc2 	bl	22be8 <at_vsprintf>
   22c64:	4604      	mov	r4, r0
   22c66:	b960      	cbnz	r0, 22c82 <nrf_modem_at_printf+0x3e>
   22c68:	4e1a      	ldr	r6, [pc, #104]	; (22cd4 <nrf_modem_at_printf+0x90>)
   22c6a:	f04f 31ff 	mov.w	r1, #4294967295
   22c6e:	6830      	ldr	r0, [r6, #0]
   22c70:	f7fa f9ee 	bl	1d050 <nrf_modem_os_sem_take>
   22c74:	4603      	mov	r3, r0
   22c76:	9802      	ldr	r0, [sp, #8]
   22c78:	b14b      	cbz	r3, 22c8e <nrf_modem_at_printf+0x4a>
   22c7a:	f00c fd56 	bl	2f72a <rpc_client_msg_data_tx_free>
   22c7e:	f06f 040a 	mvn.w	r4, #10
   22c82:	4620      	mov	r0, r4
   22c84:	b004      	add	sp, #16
   22c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22c8a:	b004      	add	sp, #16
   22c8c:	4770      	bx	lr
   22c8e:	2302      	movs	r3, #2
   22c90:	2201      	movs	r2, #1
   22c92:	9903      	ldr	r1, [sp, #12]
   22c94:	f7ff ff4a 	bl	22b2c <at_cmd_send>
   22c98:	4604      	mov	r4, r0
   22c9a:	b118      	cbz	r0, 22ca4 <nrf_modem_at_printf+0x60>
   22c9c:	6830      	ldr	r0, [r6, #0]
   22c9e:	f7fa f9b3 	bl	1d008 <nrf_modem_os_sem_give>
   22ca2:	e7ee      	b.n	22c82 <nrf_modem_at_printf+0x3e>
   22ca4:	4d0c      	ldr	r5, [pc, #48]	; (22cd8 <nrf_modem_at_printf+0x94>)
   22ca6:	682b      	ldr	r3, [r5, #0]
   22ca8:	6818      	ldr	r0, [r3, #0]
   22caa:	f7ff ff79 	bl	22ba0 <at_response_match>
   22cae:	4604      	mov	r4, r0
   22cb0:	6830      	ldr	r0, [r6, #0]
   22cb2:	f7fa f9a9 	bl	1d008 <nrf_modem_os_sem_give>
   22cb6:	682b      	ldr	r3, [r5, #0]
   22cb8:	6818      	ldr	r0, [r3, #0]
   22cba:	f00c fd30 	bl	2f71e <rpc_client_msg_data_rx_free>
   22cbe:	6828      	ldr	r0, [r5, #0]
   22cc0:	f00c fd2a 	bl	2f718 <rpc_client_msg_rx_free>
   22cc4:	e7dd      	b.n	22c82 <nrf_modem_at_printf+0x3e>
   22cc6:	f04f 34ff 	mov.w	r4, #4294967295
   22cca:	e7da      	b.n	22c82 <nrf_modem_at_printf+0x3e>
   22ccc:	f06f 040d 	mvn.w	r4, #13
   22cd0:	e7d7      	b.n	22c82 <nrf_modem_at_printf+0x3e>
   22cd2:	bf00      	nop
   22cd4:	2000e7cc 	.word	0x2000e7cc
   22cd8:	2000e7c8 	.word	0x2000e7c8

00022cdc <nrf_modem_at_cmd>:
   22cdc:	b40c      	push	{r2, r3}
   22cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22ce2:	b085      	sub	sp, #20
   22ce4:	4606      	mov	r6, r0
   22ce6:	460d      	mov	r5, r1
   22ce8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   22cea:	f001 fa53 	bl	24194 <nrf_modem_state_is_initialized>
   22cee:	2800      	cmp	r0, #0
   22cf0:	d076      	beq.n	22de0 <nrf_modem_at_cmd+0x104>
   22cf2:	2e00      	cmp	r6, #0
   22cf4:	d077      	beq.n	22de6 <nrf_modem_at_cmd+0x10a>
   22cf6:	2c00      	cmp	r4, #0
   22cf8:	d075      	beq.n	22de6 <nrf_modem_at_cmd+0x10a>
   22cfa:	2d00      	cmp	r5, #0
   22cfc:	d076      	beq.n	22dec <nrf_modem_at_cmd+0x110>
   22cfe:	4622      	mov	r2, r4
   22d00:	ab0d      	add	r3, sp, #52	; 0x34
   22d02:	a903      	add	r1, sp, #12
   22d04:	a802      	add	r0, sp, #8
   22d06:	9301      	str	r3, [sp, #4]
   22d08:	f7ff ff6e 	bl	22be8 <at_vsprintf>
   22d0c:	4604      	mov	r4, r0
   22d0e:	bba0      	cbnz	r0, 22d7a <nrf_modem_at_cmd+0x9e>
   22d10:	4b38      	ldr	r3, [pc, #224]	; (22df4 <nrf_modem_at_cmd+0x118>)
   22d12:	9f02      	ldr	r7, [sp, #8]
   22d14:	f8d3 8000 	ldr.w	r8, [r3]
   22d18:	f1b8 0f00 	cmp.w	r8, #0
   22d1c:	d00f      	beq.n	22d3e <nrf_modem_at_cmd+0x62>
   22d1e:	4b36      	ldr	r3, [pc, #216]	; (22df8 <nrf_modem_at_cmd+0x11c>)
   22d20:	f8d3 9000 	ldr.w	r9, [r3]
   22d24:	454c      	cmp	r4, r9
   22d26:	d00a      	beq.n	22d3e <nrf_modem_at_cmd+0x62>
   22d28:	4638      	mov	r0, r7
   22d2a:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   22d2e:	f00d ff4d 	bl	30bcc <strstr>
   22d32:	b198      	cbz	r0, 22d5c <nrf_modem_at_cmd+0x80>
   22d34:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   22d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22d3c:	b983      	cbnz	r3, 22d60 <nrf_modem_at_cmd+0x84>
   22d3e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 22dfc <nrf_modem_at_cmd+0x120>
   22d42:	f04f 31ff 	mov.w	r1, #4294967295
   22d46:	f8d8 0000 	ldr.w	r0, [r8]
   22d4a:	f7fa f981 	bl	1d050 <nrf_modem_os_sem_take>
   22d4e:	b1d0      	cbz	r0, 22d86 <nrf_modem_at_cmd+0xaa>
   22d50:	4638      	mov	r0, r7
   22d52:	f00c fcea 	bl	2f72a <rpc_client_msg_data_tx_free>
   22d56:	f06f 040a 	mvn.w	r4, #10
   22d5a:	e00e      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22d5c:	3401      	adds	r4, #1
   22d5e:	e7e1      	b.n	22d24 <nrf_modem_at_cmd+0x48>
   22d60:	463a      	mov	r2, r7
   22d62:	4629      	mov	r1, r5
   22d64:	4630      	mov	r0, r6
   22d66:	4798      	blx	r3
   22d68:	4604      	mov	r4, r0
   22d6a:	b918      	cbnz	r0, 22d74 <nrf_modem_at_cmd+0x98>
   22d6c:	4630      	mov	r0, r6
   22d6e:	f7ff ff17 	bl	22ba0 <at_response_match>
   22d72:	4604      	mov	r4, r0
   22d74:	4638      	mov	r0, r7
   22d76:	f00c fcd8 	bl	2f72a <rpc_client_msg_data_tx_free>
   22d7a:	4620      	mov	r0, r4
   22d7c:	b005      	add	sp, #20
   22d7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22d82:	b002      	add	sp, #8
   22d84:	4770      	bx	lr
   22d86:	2302      	movs	r3, #2
   22d88:	2201      	movs	r2, #1
   22d8a:	4638      	mov	r0, r7
   22d8c:	9903      	ldr	r1, [sp, #12]
   22d8e:	f7ff fecd 	bl	22b2c <at_cmd_send>
   22d92:	4604      	mov	r4, r0
   22d94:	b120      	cbz	r0, 22da0 <nrf_modem_at_cmd+0xc4>
   22d96:	f8d8 0000 	ldr.w	r0, [r8]
   22d9a:	f7fa f935 	bl	1d008 <nrf_modem_os_sem_give>
   22d9e:	e7ec      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22da0:	4f17      	ldr	r7, [pc, #92]	; (22e00 <nrf_modem_at_cmd+0x124>)
   22da2:	4630      	mov	r0, r6
   22da4:	683c      	ldr	r4, [r7, #0]
   22da6:	6862      	ldr	r2, [r4, #4]
   22da8:	6821      	ldr	r1, [r4, #0]
   22daa:	42aa      	cmp	r2, r5
   22dac:	bf28      	it	cs
   22dae:	462a      	movcs	r2, r5
   22db0:	f00d fd47 	bl	30842 <memcpy>
   22db4:	6863      	ldr	r3, [r4, #4]
   22db6:	42ab      	cmp	r3, r5
   22db8:	d80f      	bhi.n	22dda <nrf_modem_at_cmd+0xfe>
   22dba:	6820      	ldr	r0, [r4, #0]
   22dbc:	f7ff fef0 	bl	22ba0 <at_response_match>
   22dc0:	4604      	mov	r4, r0
   22dc2:	f8d8 0000 	ldr.w	r0, [r8]
   22dc6:	f7fa f91f 	bl	1d008 <nrf_modem_os_sem_give>
   22dca:	683b      	ldr	r3, [r7, #0]
   22dcc:	6818      	ldr	r0, [r3, #0]
   22dce:	f00c fca6 	bl	2f71e <rpc_client_msg_data_rx_free>
   22dd2:	6838      	ldr	r0, [r7, #0]
   22dd4:	f00c fca0 	bl	2f718 <rpc_client_msg_rx_free>
   22dd8:	e7cf      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22dda:	f06f 0406 	mvn.w	r4, #6
   22dde:	e7f0      	b.n	22dc2 <nrf_modem_at_cmd+0xe6>
   22de0:	f04f 34ff 	mov.w	r4, #4294967295
   22de4:	e7c9      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22de6:	f06f 040d 	mvn.w	r4, #13
   22dea:	e7c6      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22dec:	f06f 0415 	mvn.w	r4, #21
   22df0:	e7c3      	b.n	22d7a <nrf_modem_at_cmd+0x9e>
   22df2:	bf00      	nop
   22df4:	2000e7bc 	.word	0x2000e7bc
   22df8:	2000e7b8 	.word	0x2000e7b8
   22dfc:	2000e7cc 	.word	0x2000e7cc
   22e00:	2000e7c8 	.word	0x2000e7c8

00022e04 <nrf_modem_at_scanf>:
   22e04:	b40e      	push	{r1, r2, r3}
   22e06:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   22e08:	9f07      	ldr	r7, [sp, #28]
   22e0a:	4606      	mov	r6, r0
   22e0c:	f001 f9c2 	bl	24194 <nrf_modem_state_is_initialized>
   22e10:	2800      	cmp	r0, #0
   22e12:	d042      	beq.n	22e9a <nrf_modem_at_scanf+0x96>
   22e14:	2e00      	cmp	r6, #0
   22e16:	d043      	beq.n	22ea0 <nrf_modem_at_scanf+0x9c>
   22e18:	2f00      	cmp	r7, #0
   22e1a:	d041      	beq.n	22ea0 <nrf_modem_at_scanf+0x9c>
   22e1c:	4630      	mov	r0, r6
   22e1e:	f7e6 fa00 	bl	9222 <strlen>
   22e22:	1c45      	adds	r5, r0, #1
   22e24:	4628      	mov	r0, r5
   22e26:	f00c fc7e 	bl	2f726 <rpc_client_msg_data_tx_alloc>
   22e2a:	4604      	mov	r4, r0
   22e2c:	2800      	cmp	r0, #0
   22e2e:	d03a      	beq.n	22ea6 <nrf_modem_at_scanf+0xa2>
   22e30:	4631      	mov	r1, r6
   22e32:	4e1e      	ldr	r6, [pc, #120]	; (22eac <nrf_modem_at_scanf+0xa8>)
   22e34:	462a      	mov	r2, r5
   22e36:	f00d feaa 	bl	30b8e <strncpy>
   22e3a:	f04f 31ff 	mov.w	r1, #4294967295
   22e3e:	6830      	ldr	r0, [r6, #0]
   22e40:	f7fa f906 	bl	1d050 <nrf_modem_os_sem_take>
   22e44:	b150      	cbz	r0, 22e5c <nrf_modem_at_scanf+0x58>
   22e46:	4620      	mov	r0, r4
   22e48:	f00c fc6f 	bl	2f72a <rpc_client_msg_data_tx_free>
   22e4c:	f06f 040a 	mvn.w	r4, #10
   22e50:	4620      	mov	r0, r4
   22e52:	b002      	add	sp, #8
   22e54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22e58:	b003      	add	sp, #12
   22e5a:	4770      	bx	lr
   22e5c:	4620      	mov	r0, r4
   22e5e:	2302      	movs	r3, #2
   22e60:	2201      	movs	r2, #1
   22e62:	4629      	mov	r1, r5
   22e64:	f7ff fe62 	bl	22b2c <at_cmd_send>
   22e68:	4604      	mov	r4, r0
   22e6a:	b990      	cbnz	r0, 22e92 <nrf_modem_at_scanf+0x8e>
   22e6c:	4d10      	ldr	r5, [pc, #64]	; (22eb0 <nrf_modem_at_scanf+0xac>)
   22e6e:	aa08      	add	r2, sp, #32
   22e70:	682b      	ldr	r3, [r5, #0]
   22e72:	4639      	mov	r1, r7
   22e74:	6818      	ldr	r0, [r3, #0]
   22e76:	9201      	str	r2, [sp, #4]
   22e78:	f005 ff00 	bl	28c7c <vsiscanf>
   22e7c:	682b      	ldr	r3, [r5, #0]
   22e7e:	1e04      	subs	r4, r0, #0
   22e80:	6818      	ldr	r0, [r3, #0]
   22e82:	bf08      	it	eq
   22e84:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   22e88:	f00c fc49 	bl	2f71e <rpc_client_msg_data_rx_free>
   22e8c:	6828      	ldr	r0, [r5, #0]
   22e8e:	f00c fc43 	bl	2f718 <rpc_client_msg_rx_free>
   22e92:	6830      	ldr	r0, [r6, #0]
   22e94:	f7fa f8b8 	bl	1d008 <nrf_modem_os_sem_give>
   22e98:	e7da      	b.n	22e50 <nrf_modem_at_scanf+0x4c>
   22e9a:	f04f 34ff 	mov.w	r4, #4294967295
   22e9e:	e7d7      	b.n	22e50 <nrf_modem_at_scanf+0x4c>
   22ea0:	f06f 040d 	mvn.w	r4, #13
   22ea4:	e7d4      	b.n	22e50 <nrf_modem_at_scanf+0x4c>
   22ea6:	f06f 040b 	mvn.w	r4, #11
   22eaa:	e7d1      	b.n	22e50 <nrf_modem_at_scanf+0x4c>
   22eac:	2000e7cc 	.word	0x2000e7cc
   22eb0:	2000e7c8 	.word	0x2000e7c8

00022eb4 <rpc_at_event_handler>:
   22eb4:	b538      	push	{r3, r4, r5, lr}
   22eb6:	68c3      	ldr	r3, [r0, #12]
   22eb8:	4604      	mov	r4, r0
   22eba:	2ba7      	cmp	r3, #167	; 0xa7
   22ebc:	d003      	beq.n	22ec6 <rpc_at_event_handler+0x12>
   22ebe:	6820      	ldr	r0, [r4, #0]
   22ec0:	f00c fc2d 	bl	2f71e <rpc_client_msg_data_rx_free>
   22ec4:	e008      	b.n	22ed8 <rpc_at_event_handler+0x24>
   22ec6:	2903      	cmp	r1, #3
   22ec8:	d008      	beq.n	22edc <rpc_at_event_handler+0x28>
   22eca:	2904      	cmp	r1, #4
   22ecc:	d021      	beq.n	22f12 <rpc_at_event_handler+0x5e>
   22ece:	2902      	cmp	r1, #2
   22ed0:	bf02      	ittt	eq
   22ed2:	2201      	moveq	r2, #1
   22ed4:	4b12      	ldreq	r3, [pc, #72]	; (22f20 <rpc_at_event_handler+0x6c>)
   22ed6:	701a      	strbeq	r2, [r3, #0]
   22ed8:	2000      	movs	r0, #0
   22eda:	bd38      	pop	{r3, r4, r5, pc}
   22edc:	4d11      	ldr	r5, [pc, #68]	; (22f24 <rpc_at_event_handler+0x70>)
   22ede:	682b      	ldr	r3, [r5, #0]
   22ee0:	b13b      	cbz	r3, 22ef2 <rpc_at_event_handler+0x3e>
   22ee2:	6800      	ldr	r0, [r0, #0]
   22ee4:	4798      	blx	r3
   22ee6:	2300      	movs	r3, #0
   22ee8:	6820      	ldr	r0, [r4, #0]
   22eea:	602b      	str	r3, [r5, #0]
   22eec:	f00c fc17 	bl	2f71e <rpc_client_msg_data_rx_free>
   22ef0:	e006      	b.n	22f00 <rpc_at_event_handler+0x4c>
   22ef2:	4b0b      	ldr	r3, [pc, #44]	; (22f20 <rpc_at_event_handler+0x6c>)
   22ef4:	781a      	ldrb	r2, [r3, #0]
   22ef6:	2a02      	cmp	r2, #2
   22ef8:	d105      	bne.n	22f06 <rpc_at_event_handler+0x52>
   22efa:	6800      	ldr	r0, [r0, #0]
   22efc:	2800      	cmp	r0, #0
   22efe:	d1f5      	bne.n	22eec <rpc_at_event_handler+0x38>
   22f00:	2000      	movs	r0, #0
   22f02:	b2c0      	uxtb	r0, r0
   22f04:	e7e9      	b.n	22eda <rpc_at_event_handler+0x26>
   22f06:	4a08      	ldr	r2, [pc, #32]	; (22f28 <rpc_at_event_handler+0x74>)
   22f08:	6010      	str	r0, [r2, #0]
   22f0a:	2202      	movs	r2, #2
   22f0c:	2001      	movs	r0, #1
   22f0e:	701a      	strb	r2, [r3, #0]
   22f10:	e7f7      	b.n	22f02 <rpc_at_event_handler+0x4e>
   22f12:	4b06      	ldr	r3, [pc, #24]	; (22f2c <rpc_at_event_handler+0x78>)
   22f14:	681b      	ldr	r3, [r3, #0]
   22f16:	2b00      	cmp	r3, #0
   22f18:	d0d1      	beq.n	22ebe <rpc_at_event_handler+0xa>
   22f1a:	6800      	ldr	r0, [r0, #0]
   22f1c:	4798      	blx	r3
   22f1e:	e7ce      	b.n	22ebe <rpc_at_event_handler+0xa>
   22f20:	20010480 	.word	0x20010480
   22f24:	2000e7c0 	.word	0x2000e7c0
   22f28:	2000e7c8 	.word	0x2000e7c8
   22f2c:	2000e7c4 	.word	0x2000e7c4

00022f30 <rpc_at_init>:
   22f30:	2201      	movs	r2, #1
   22f32:	b510      	push	{r4, lr}
   22f34:	4611      	mov	r1, r2
   22f36:	4807      	ldr	r0, [pc, #28]	; (22f54 <rpc_at_init+0x24>)
   22f38:	f7fa f832 	bl	1cfa0 <nrf_modem_os_sem_init>
   22f3c:	4601      	mov	r1, r0
   22f3e:	b928      	cbnz	r0, 22f4c <rpc_at_init+0x1c>
   22f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22f44:	2301      	movs	r3, #1
   22f46:	2205      	movs	r2, #5
   22f48:	f7ff bdf0 	b.w	22b2c <at_cmd_send>
   22f4c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   22f50:	bd10      	pop	{r4, pc}
   22f52:	bf00      	nop
   22f54:	2000e7cc 	.word	0x2000e7cc

00022f58 <sock_init>:
   22f58:	f44f 7248 	mov.w	r2, #800	; 0x320
   22f5c:	2100      	movs	r1, #0
   22f5e:	b508      	push	{r3, lr}
   22f60:	4808      	ldr	r0, [pc, #32]	; (22f84 <sock_init+0x2c>)
   22f62:	f00d fc8e 	bl	30882 <memset>
   22f66:	2300      	movs	r3, #0
   22f68:	4619      	mov	r1, r3
   22f6a:	4a07      	ldr	r2, [pc, #28]	; (22f88 <sock_init+0x30>)
   22f6c:	4807      	ldr	r0, [pc, #28]	; (22f8c <sock_init+0x34>)
   22f6e:	7013      	strb	r3, [r2, #0]
   22f70:	4a04      	ldr	r2, [pc, #16]	; (22f84 <sock_init+0x2c>)
   22f72:	3301      	adds	r3, #1
   22f74:	2b08      	cmp	r3, #8
   22f76:	e9c2 0100 	strd	r0, r1, [r2]
   22f7a:	6091      	str	r1, [r2, #8]
   22f7c:	f102 0264 	add.w	r2, r2, #100	; 0x64
   22f80:	d1f7      	bne.n	22f72 <sock_init+0x1a>
   22f82:	bd08      	pop	{r3, pc}
   22f84:	2000e7d0 	.word	0x2000e7d0
   22f88:	20010481 	.word	0x20010481
   22f8c:	1badf11e 	.word	0x1badf11e

00022f90 <sock_open>:
   22f90:	b570      	push	{r4, r5, r6, lr}
   22f92:	2300      	movs	r3, #0
   22f94:	2464      	movs	r4, #100	; 0x64
   22f96:	4a0e      	ldr	r2, [pc, #56]	; (22fd0 <sock_open+0x40>)
   22f98:	4d0e      	ldr	r5, [pc, #56]	; (22fd4 <sock_open+0x44>)
   22f9a:	fb04 f103 	mul.w	r1, r4, r3
   22f9e:	5856      	ldr	r6, [r2, r1]
   22fa0:	1888      	adds	r0, r1, r2
   22fa2:	42ae      	cmp	r6, r5
   22fa4:	d10e      	bne.n	22fc4 <sock_open+0x34>
   22fa6:	f04f 33ff 	mov.w	r3, #4294967295
   22faa:	5053      	str	r3, [r2, r1]
   22fac:	4a0a      	ldr	r2, [pc, #40]	; (22fd8 <sock_open+0x48>)
   22fae:	7f03      	ldrb	r3, [r0, #28]
   22fb0:	7812      	ldrb	r2, [r2, #0]
   22fb2:	f362 1386 	bfi	r3, r2, #6, #1
   22fb6:	7703      	strb	r3, [r0, #28]
   22fb8:	2302      	movs	r3, #2
   22fba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   22fbe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   22fc2:	bd70      	pop	{r4, r5, r6, pc}
   22fc4:	3301      	adds	r3, #1
   22fc6:	2b08      	cmp	r3, #8
   22fc8:	d1e7      	bne.n	22f9a <sock_open+0xa>
   22fca:	2000      	movs	r0, #0
   22fcc:	e7f9      	b.n	22fc2 <sock_open+0x32>
   22fce:	bf00      	nop
   22fd0:	2000e7d0 	.word	0x2000e7d0
   22fd4:	1badf11e 	.word	0x1badf11e
   22fd8:	20010481 	.word	0x20010481

00022fdc <sock_find>:
   22fdc:	b530      	push	{r4, r5, lr}
   22fde:	4602      	mov	r2, r0
   22fe0:	2300      	movs	r3, #0
   22fe2:	2564      	movs	r5, #100	; 0x64
   22fe4:	4905      	ldr	r1, [pc, #20]	; (22ffc <sock_find+0x20>)
   22fe6:	fb05 f403 	mul.w	r4, r5, r3
   22fea:	1860      	adds	r0, r4, r1
   22fec:	590c      	ldr	r4, [r1, r4]
   22fee:	4294      	cmp	r4, r2
   22ff0:	d003      	beq.n	22ffa <sock_find+0x1e>
   22ff2:	3301      	adds	r3, #1
   22ff4:	2b08      	cmp	r3, #8
   22ff6:	d1f6      	bne.n	22fe6 <sock_find+0xa>
   22ff8:	2000      	movs	r0, #0
   22ffa:	bd30      	pop	{r4, r5, pc}
   22ffc:	2000e7d0 	.word	0x2000e7d0

00023000 <_sock_close>:
   23000:	b538      	push	{r3, r4, r5, lr}
   23002:	f7ff ffeb 	bl	22fdc <sock_find>
   23006:	4604      	mov	r4, r0
   23008:	1d05      	adds	r5, r0, #4
   2300a:	4628      	mov	r0, r5
   2300c:	f00c fd17 	bl	2fa3e <pkt_flush>
   23010:	6c20      	ldr	r0, [r4, #64]	; 0x40
   23012:	b108      	cbz	r0, 23018 <_sock_close+0x18>
   23014:	f7fa f880 	bl	1d118 <nrf_modem_os_free>
   23018:	2260      	movs	r2, #96	; 0x60
   2301a:	2100      	movs	r1, #0
   2301c:	4628      	mov	r0, r5
   2301e:	f00d fc30 	bl	30882 <memset>
   23022:	4b01      	ldr	r3, [pc, #4]	; (23028 <_sock_close+0x28>)
   23024:	6023      	str	r3, [r4, #0]
   23026:	bd38      	pop	{r3, r4, r5, pc}
   23028:	1badf11e 	.word	0x1badf11e

0002302c <sock_shutdown>:
   2302c:	b570      	push	{r4, r5, r6, lr}
   2302e:	2400      	movs	r4, #0
   23030:	4d05      	ldr	r5, [pc, #20]	; (23048 <sock_shutdown+0x1c>)
   23032:	4e06      	ldr	r6, [pc, #24]	; (2304c <sock_shutdown+0x20>)
   23034:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   23038:	42b0      	cmp	r0, r6
   2303a:	d001      	beq.n	23040 <sock_shutdown+0x14>
   2303c:	f7ff ffe0 	bl	23000 <_sock_close>
   23040:	3419      	adds	r4, #25
   23042:	2cc8      	cmp	r4, #200	; 0xc8
   23044:	d1f6      	bne.n	23034 <sock_shutdown+0x8>
   23046:	bd70      	pop	{r4, r5, r6, pc}
   23048:	2000e7d0 	.word	0x2000e7d0
   2304c:	1badf11e 	.word	0x1badf11e

00023050 <sock_flow_control_set>:
   23050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23054:	1e02      	subs	r2, r0, #0
   23056:	4c10      	ldr	r4, [pc, #64]	; (23098 <sock_flow_control_set+0x48>)
   23058:	bf18      	it	ne
   2305a:	2201      	movne	r2, #1
   2305c:	4606      	mov	r6, r0
   2305e:	2500      	movs	r5, #0
   23060:	46a0      	mov	r8, r4
   23062:	f04f 0964 	mov.w	r9, #100	; 0x64
   23066:	4b0d      	ldr	r3, [pc, #52]	; (2309c <sock_flow_control_set+0x4c>)
   23068:	4f0d      	ldr	r7, [pc, #52]	; (230a0 <sock_flow_control_set+0x50>)
   2306a:	701a      	strb	r2, [r3, #0]
   2306c:	6823      	ldr	r3, [r4, #0]
   2306e:	42bb      	cmp	r3, r7
   23070:	d00a      	beq.n	23088 <sock_flow_control_set+0x38>
   23072:	fb09 8305 	mla	r3, r9, r5, r8
   23076:	7f1a      	ldrb	r2, [r3, #28]
   23078:	f366 1286 	bfi	r2, r6, #6, #1
   2307c:	771a      	strb	r2, [r3, #28]
   2307e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23080:	b113      	cbz	r3, 23088 <sock_flow_control_set+0x38>
   23082:	4620      	mov	r0, r4
   23084:	f00c fb92 	bl	2f7ac <sock_pollcb>
   23088:	3501      	adds	r5, #1
   2308a:	2d08      	cmp	r5, #8
   2308c:	f104 0464 	add.w	r4, r4, #100	; 0x64
   23090:	d1ec      	bne.n	2306c <sock_flow_control_set+0x1c>
   23092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23096:	bf00      	nop
   23098:	2000e7d0 	.word	0x2000e7d0
   2309c:	20010481 	.word	0x20010481
   230a0:	1badf11e 	.word	0x1badf11e

000230a4 <sock_proto_is_valid>:
   230a4:	2811      	cmp	r0, #17
   230a6:	dc06      	bgt.n	230b6 <sock_proto_is_valid+0x12>
   230a8:	2800      	cmp	r0, #0
   230aa:	db0d      	blt.n	230c8 <sock_proto_is_valid+0x24>
   230ac:	4b08      	ldr	r3, [pc, #32]	; (230d0 <sock_proto_is_valid+0x2c>)
   230ae:	40c3      	lsrs	r3, r0
   230b0:	f003 0001 	and.w	r0, r3, #1
   230b4:	4770      	bx	lr
   230b6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   230ba:	d007      	beq.n	230cc <sock_proto_is_valid+0x28>
   230bc:	f240 1311 	movw	r3, #273	; 0x111
   230c0:	1ac3      	subs	r3, r0, r3
   230c2:	4258      	negs	r0, r3
   230c4:	4158      	adcs	r0, r3
   230c6:	4770      	bx	lr
   230c8:	2000      	movs	r0, #0
   230ca:	4770      	bx	lr
   230cc:	2001      	movs	r0, #1
   230ce:	4770      	bx	lr
   230d0:	00020041 	.word	0x00020041

000230d4 <on_getaddrinfo_res>:
   230d4:	2301      	movs	r3, #1
   230d6:	4a03      	ldr	r2, [pc, #12]	; (230e4 <on_getaddrinfo_res+0x10>)
   230d8:	7013      	strb	r3, [r2, #0]
   230da:	4a03      	ldr	r2, [pc, #12]	; (230e8 <on_getaddrinfo_res+0x14>)
   230dc:	6010      	str	r0, [r2, #0]
   230de:	4618      	mov	r0, r3
   230e0:	4770      	bx	lr
   230e2:	bf00      	nop
   230e4:	20010482 	.word	0x20010482
   230e8:	2000eaf0 	.word	0x2000eaf0

000230ec <addrinfo_init>:
   230ec:	2201      	movs	r2, #1
   230ee:	b508      	push	{r3, lr}
   230f0:	4611      	mov	r1, r2
   230f2:	4804      	ldr	r0, [pc, #16]	; (23104 <addrinfo_init+0x18>)
   230f4:	f7f9 ff54 	bl	1cfa0 <nrf_modem_os_sem_init>
   230f8:	2800      	cmp	r0, #0
   230fa:	bf18      	it	ne
   230fc:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   23100:	bd08      	pop	{r3, pc}
   23102:	bf00      	nop
   23104:	2000eaf4 	.word	0x2000eaf4

00023108 <nrf_getaddrinfo>:
   23108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2310c:	b085      	sub	sp, #20
   2310e:	4682      	mov	sl, r0
   23110:	460f      	mov	r7, r1
   23112:	4616      	mov	r6, r2
   23114:	461d      	mov	r5, r3
   23116:	f001 f83d 	bl	24194 <nrf_modem_state_is_initialized>
   2311a:	b928      	cbnz	r0, 23128 <nrf_getaddrinfo+0x20>
   2311c:	2001      	movs	r0, #1
   2311e:	f7f9 ff21 	bl	1cf64 <nrf_modem_os_errno_set>
   23122:	f06f 040a 	mvn.w	r4, #10
   23126:	e01c      	b.n	23162 <nrf_getaddrinfo+0x5a>
   23128:	ea5a 0307 	orrs.w	r3, sl, r7
   2312c:	f000 8158 	beq.w	233e0 <nrf_getaddrinfo+0x2d8>
   23130:	b31e      	cbz	r6, 2317a <nrf_getaddrinfo+0x72>
   23132:	6833      	ldr	r3, [r6, #0]
   23134:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   23138:	f023 0302 	bic.w	r3, r3, #2
   2313c:	2b00      	cmp	r3, #0
   2313e:	f040 8152 	bne.w	233e6 <nrf_getaddrinfo+0x2de>
   23142:	6870      	ldr	r0, [r6, #4]
   23144:	b938      	cbnz	r0, 23156 <nrf_getaddrinfo+0x4e>
   23146:	68b0      	ldr	r0, [r6, #8]
   23148:	b178      	cbz	r0, 2316a <nrf_getaddrinfo+0x62>
   2314a:	f00c fc15 	bl	2f978 <sock_type_is_valid>
   2314e:	b960      	cbnz	r0, 2316a <nrf_getaddrinfo+0x62>
   23150:	f06f 0406 	mvn.w	r4, #6
   23154:	e005      	b.n	23162 <nrf_getaddrinfo+0x5a>
   23156:	f00c fc09 	bl	2f96c <sock_family_is_valid>
   2315a:	2800      	cmp	r0, #0
   2315c:	d1f3      	bne.n	23146 <nrf_getaddrinfo+0x3e>
   2315e:	f06f 0405 	mvn.w	r4, #5
   23162:	4620      	mov	r0, r4
   23164:	b005      	add	sp, #20
   23166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2316a:	68f0      	ldr	r0, [r6, #12]
   2316c:	b128      	cbz	r0, 2317a <nrf_getaddrinfo+0x72>
   2316e:	68b1      	ldr	r1, [r6, #8]
   23170:	f00c fc08 	bl	2f984 <sock_proto_supports_type>
   23174:	b908      	cbnz	r0, 2317a <nrf_getaddrinfo+0x72>
   23176:	206b      	movs	r0, #107	; 0x6b
   23178:	e7d1      	b.n	2311e <nrf_getaddrinfo+0x16>
   2317a:	4b9e      	ldr	r3, [pc, #632]	; (233f4 <nrf_getaddrinfo+0x2ec>)
   2317c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   23180:	6818      	ldr	r0, [r3, #0]
   23182:	f7f9 ff65 	bl	1d050 <nrf_modem_os_sem_take>
   23186:	4604      	mov	r4, r0
   23188:	2800      	cmp	r0, #0
   2318a:	f040 812f 	bne.w	233ec <nrf_getaddrinfo+0x2e4>
   2318e:	2f00      	cmp	r7, #0
   23190:	d062      	beq.n	23258 <nrf_getaddrinfo+0x150>
   23192:	b1f6      	cbz	r6, 231d2 <nrf_getaddrinfo+0xca>
   23194:	6833      	ldr	r3, [r6, #0]
   23196:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   2319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2319e:	d118      	bne.n	231d2 <nrf_getaddrinfo+0xca>
   231a0:	6833      	ldr	r3, [r6, #0]
   231a2:	04db      	lsls	r3, r3, #19
   231a4:	d443      	bmi.n	2322e <nrf_getaddrinfo+0x126>
   231a6:	f04f 38ff 	mov.w	r8, #4294967295
   231aa:	6870      	ldr	r0, [r6, #4]
   231ac:	b108      	cbz	r0, 231b2 <nrf_getaddrinfo+0xaa>
   231ae:	f000 fe6b 	bl	23e88 <nrf_af_to_rpc_af>
   231b2:	4b91      	ldr	r3, [pc, #580]	; (233f8 <nrf_getaddrinfo+0x2f0>)
   231b4:	4a91      	ldr	r2, [pc, #580]	; (233fc <nrf_getaddrinfo+0x2f4>)
   231b6:	6018      	str	r0, [r3, #0]
   231b8:	68b3      	ldr	r3, [r6, #8]
   231ba:	2b00      	cmp	r3, #0
   231bc:	bf08      	it	eq
   231be:	2301      	moveq	r3, #1
   231c0:	6013      	str	r3, [r2, #0]
   231c2:	68f3      	ldr	r3, [r6, #12]
   231c4:	4a8e      	ldr	r2, [pc, #568]	; (23400 <nrf_getaddrinfo+0x2f8>)
   231c6:	2b00      	cmp	r3, #0
   231c8:	bf08      	it	eq
   231ca:	2306      	moveq	r3, #6
   231cc:	6013      	str	r3, [r2, #0]
   231ce:	6833      	ldr	r3, [r6, #0]
   231d0:	e01c      	b.n	2320c <nrf_getaddrinfo+0x104>
   231d2:	220a      	movs	r2, #10
   231d4:	2100      	movs	r1, #0
   231d6:	4638      	mov	r0, r7
   231d8:	f005 fd14 	bl	28c04 <strtoul>
   231dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   231e0:	1e42      	subs	r2, r0, #1
   231e2:	429a      	cmp	r2, r3
   231e4:	f200 80f9 	bhi.w	233da <nrf_getaddrinfo+0x2d2>
   231e8:	4a86      	ldr	r2, [pc, #536]	; (23404 <nrf_getaddrinfo+0x2fc>)
   231ea:	0203      	lsls	r3, r0, #8
   231ec:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   231f0:	8013      	strh	r3, [r2, #0]
   231f2:	2e00      	cmp	r6, #0
   231f4:	d1d4      	bne.n	231a0 <nrf_getaddrinfo+0x98>
   231f6:	2300      	movs	r3, #0
   231f8:	2101      	movs	r1, #1
   231fa:	4a7f      	ldr	r2, [pc, #508]	; (233f8 <nrf_getaddrinfo+0x2f0>)
   231fc:	f04f 38ff 	mov.w	r8, #4294967295
   23200:	6013      	str	r3, [r2, #0]
   23202:	4a7e      	ldr	r2, [pc, #504]	; (233fc <nrf_getaddrinfo+0x2f4>)
   23204:	6011      	str	r1, [r2, #0]
   23206:	2106      	movs	r1, #6
   23208:	4a7d      	ldr	r2, [pc, #500]	; (23400 <nrf_getaddrinfo+0x2f8>)
   2320a:	6011      	str	r1, [r2, #0]
   2320c:	4f7e      	ldr	r7, [pc, #504]	; (23408 <nrf_getaddrinfo+0x300>)
   2320e:	4650      	mov	r0, sl
   23210:	603b      	str	r3, [r7, #0]
   23212:	f1ba 0f00 	cmp.w	sl, #0
   23216:	d16f      	bne.n	232f8 <nrf_getaddrinfo+0x1f0>
   23218:	f00c fa5b 	bl	2f6d2 <rpc_client_msg_alloc>
   2321c:	4606      	mov	r6, r0
   2321e:	bb00      	cbnz	r0, 23262 <nrf_getaddrinfo+0x15a>
   23220:	f06f 0409 	mvn.w	r4, #9
   23224:	4b73      	ldr	r3, [pc, #460]	; (233f4 <nrf_getaddrinfo+0x2ec>)
   23226:	6818      	ldr	r0, [r3, #0]
   23228:	f7f9 feee 	bl	1d008 <nrf_modem_os_sem_give>
   2322c:	e799      	b.n	23162 <nrf_getaddrinfo+0x5a>
   2322e:	213a      	movs	r1, #58	; 0x3a
   23230:	4638      	mov	r0, r7
   23232:	f00d fc85 	bl	30b40 <strchr>
   23236:	b100      	cbz	r0, 2323a <nrf_getaddrinfo+0x132>
   23238:	1c47      	adds	r7, r0, #1
   2323a:	4638      	mov	r0, r7
   2323c:	4973      	ldr	r1, [pc, #460]	; (2340c <nrf_getaddrinfo+0x304>)
   2323e:	f00d fcc5 	bl	30bcc <strstr>
   23242:	220a      	movs	r2, #10
   23244:	b128      	cbz	r0, 23252 <nrf_getaddrinfo+0x14a>
   23246:	2100      	movs	r1, #0
   23248:	3003      	adds	r0, #3
   2324a:	f005 fbc1 	bl	289d0 <strtol>
   2324e:	4680      	mov	r8, r0
   23250:	e7ab      	b.n	231aa <nrf_getaddrinfo+0xa2>
   23252:	4601      	mov	r1, r0
   23254:	4638      	mov	r0, r7
   23256:	e7f8      	b.n	2324a <nrf_getaddrinfo+0x142>
   23258:	4b6a      	ldr	r3, [pc, #424]	; (23404 <nrf_getaddrinfo+0x2fc>)
   2325a:	8018      	strh	r0, [r3, #0]
   2325c:	2e00      	cmp	r6, #0
   2325e:	d0ca      	beq.n	231f6 <nrf_getaddrinfo+0xee>
   23260:	e7a1      	b.n	231a6 <nrf_getaddrinfo+0x9e>
   23262:	f8c0 8010 	str.w	r8, [r0, #16]
   23266:	4b64      	ldr	r3, [pc, #400]	; (233f8 <nrf_getaddrinfo+0x2f0>)
   23268:	f8df b190 	ldr.w	fp, [pc, #400]	; 233fc <nrf_getaddrinfo+0x2f4>
   2326c:	681b      	ldr	r3, [r3, #0]
   2326e:	f8df a190 	ldr.w	sl, [pc, #400]	; 23400 <nrf_getaddrinfo+0x2f8>
   23272:	61b3      	str	r3, [r6, #24]
   23274:	f8db 3000 	ldr.w	r3, [fp]
   23278:	4632      	mov	r2, r6
   2327a:	61f3      	str	r3, [r6, #28]
   2327c:	f8da 3000 	ldr.w	r3, [sl]
   23280:	f247 010d 	movw	r1, #28685	; 0x700d
   23284:	6233      	str	r3, [r6, #32]
   23286:	683b      	ldr	r3, [r7, #0]
   23288:	2004      	movs	r0, #4
   2328a:	6173      	str	r3, [r6, #20]
   2328c:	f00c fa3d 	bl	2f70a <rpc_client_msg_send>
   23290:	2300      	movs	r3, #0
   23292:	4e5f      	ldr	r6, [pc, #380]	; (23410 <nrf_getaddrinfo+0x308>)
   23294:	7033      	strb	r3, [r6, #0]
   23296:	f04f 33ff 	mov.w	r3, #4294967295
   2329a:	9303      	str	r3, [sp, #12]
   2329c:	7833      	ldrb	r3, [r6, #0]
   2329e:	2b01      	cmp	r3, #1
   232a0:	d13c      	bne.n	2331c <nrf_getaddrinfo+0x214>
   232a2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23414 <nrf_getaddrinfo+0x30c>
   232a6:	f8d8 3000 	ldr.w	r3, [r8]
   232aa:	6958      	ldr	r0, [r3, #20]
   232ac:	2800      	cmp	r0, #0
   232ae:	f040 8090 	bne.w	233d2 <nrf_getaddrinfo+0x2ca>
   232b2:	2020      	movs	r0, #32
   232b4:	f8d3 9000 	ldr.w	r9, [r3]
   232b8:	f7f9 ff26 	bl	1d108 <nrf_modem_os_alloc>
   232bc:	6028      	str	r0, [r5, #0]
   232be:	b170      	cbz	r0, 232de <nrf_getaddrinfo+0x1d6>
   232c0:	f109 0318 	add.w	r3, r9, #24
   232c4:	4a4f      	ldr	r2, [pc, #316]	; (23404 <nrf_getaddrinfo+0x2fc>)
   232c6:	9301      	str	r3, [sp, #4]
   232c8:	4618      	mov	r0, r3
   232ca:	8812      	ldrh	r2, [r2, #0]
   232cc:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   232d0:	f00c fa33 	bl	2f73a <sockaddr_init>
   232d4:	4606      	mov	r6, r0
   232d6:	bb68      	cbnz	r0, 23334 <nrf_getaddrinfo+0x22c>
   232d8:	6828      	ldr	r0, [r5, #0]
   232da:	f7f9 ff1d 	bl	1d118 <nrf_modem_os_free>
   232de:	f06f 0409 	mvn.w	r4, #9
   232e2:	f8d8 3000 	ldr.w	r3, [r8]
   232e6:	6818      	ldr	r0, [r3, #0]
   232e8:	b108      	cbz	r0, 232ee <nrf_getaddrinfo+0x1e6>
   232ea:	f00c fa18 	bl	2f71e <rpc_client_msg_data_rx_free>
   232ee:	f8d8 0000 	ldr.w	r0, [r8]
   232f2:	f00c fa11 	bl	2f718 <rpc_client_msg_rx_free>
   232f6:	e795      	b.n	23224 <nrf_getaddrinfo+0x11c>
   232f8:	f7e5 ff93 	bl	9222 <strlen>
   232fc:	f00c f9e9 	bl	2f6d2 <rpc_client_msg_alloc>
   23300:	4606      	mov	r6, r0
   23302:	2800      	cmp	r0, #0
   23304:	d08c      	beq.n	23220 <nrf_getaddrinfo+0x118>
   23306:	f8c0 8010 	str.w	r8, [r0, #16]
   2330a:	4650      	mov	r0, sl
   2330c:	f7e5 ff89 	bl	9222 <strlen>
   23310:	4651      	mov	r1, sl
   23312:	4602      	mov	r2, r0
   23314:	6830      	ldr	r0, [r6, #0]
   23316:	f00d fa94 	bl	30842 <memcpy>
   2331a:	e7a4      	b.n	23266 <nrf_getaddrinfo+0x15e>
   2331c:	2002      	movs	r0, #2
   2331e:	a903      	add	r1, sp, #12
   23320:	f7f9 fd5e 	bl	1cde0 <nrf_modem_os_timedwait>
   23324:	2800      	cmp	r0, #0
   23326:	d0b9      	beq.n	2329c <nrf_getaddrinfo+0x194>
   23328:	206e      	movs	r0, #110	; 0x6e
   2332a:	f7f9 fe1b 	bl	1cf64 <nrf_modem_os_errno_set>
   2332e:	f06f 040a 	mvn.w	r4, #10
   23332:	e777      	b.n	23224 <nrf_getaddrinfo+0x11c>
   23334:	f8d9 2008 	ldr.w	r2, [r9, #8]
   23338:	2a01      	cmp	r2, #1
   2333a:	d004      	beq.n	23346 <nrf_getaddrinfo+0x23e>
   2333c:	2a02      	cmp	r2, #2
   2333e:	d01a      	beq.n	23376 <nrf_getaddrinfo+0x26e>
   23340:	f06f 0405 	mvn.w	r4, #5
   23344:	e7cd      	b.n	232e2 <nrf_getaddrinfo+0x1da>
   23346:	2110      	movs	r1, #16
   23348:	682a      	ldr	r2, [r5, #0]
   2334a:	6111      	str	r1, [r2, #16]
   2334c:	683a      	ldr	r2, [r7, #0]
   2334e:	6829      	ldr	r1, [r5, #0]
   23350:	f012 0202 	ands.w	r2, r2, #2
   23354:	d03b      	beq.n	233ce <nrf_getaddrinfo+0x2c6>
   23356:	9101      	str	r1, [sp, #4]
   23358:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   2335c:	3001      	adds	r0, #1
   2335e:	f7f9 fed3 	bl	1d108 <nrf_modem_os_alloc>
   23362:	9901      	ldr	r1, [sp, #4]
   23364:	6188      	str	r0, [r1, #24]
   23366:	682a      	ldr	r2, [r5, #0]
   23368:	6990      	ldr	r0, [r2, #24]
   2336a:	b938      	cbnz	r0, 2337c <nrf_getaddrinfo+0x274>
   2336c:	4628      	mov	r0, r5
   2336e:	f7f9 fed3 	bl	1d118 <nrf_modem_os_free>
   23372:	4630      	mov	r0, r6
   23374:	e7b1      	b.n	232da <nrf_getaddrinfo+0x1d2>
   23376:	2124      	movs	r1, #36	; 0x24
   23378:	682a      	ldr	r2, [r5, #0]
   2337a:	e7e6      	b.n	2334a <nrf_getaddrinfo+0x242>
   2337c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   23380:	f109 0318 	add.w	r3, r9, #24
   23384:	440b      	add	r3, r1
   23386:	4619      	mov	r1, r3
   23388:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   2338c:	f00d fa59 	bl	30842 <memcpy>
   23390:	2000      	movs	r0, #0
   23392:	6829      	ldr	r1, [r5, #0]
   23394:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   23398:	6989      	ldr	r1, [r1, #24]
   2339a:	5488      	strb	r0, [r1, r2]
   2339c:	682a      	ldr	r2, [r5, #0]
   2339e:	9201      	str	r2, [sp, #4]
   233a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   233a4:	f00c ff3c 	bl	30220 <rpc_af_to_nrf_af>
   233a8:	9a01      	ldr	r2, [sp, #4]
   233aa:	6050      	str	r0, [r2, #4]
   233ac:	682b      	ldr	r3, [r5, #0]
   233ae:	f8db 2000 	ldr.w	r2, [fp]
   233b2:	609a      	str	r2, [r3, #8]
   233b4:	682b      	ldr	r3, [r5, #0]
   233b6:	f8da 2000 	ldr.w	r2, [sl]
   233ba:	60da      	str	r2, [r3, #12]
   233bc:	682b      	ldr	r3, [r5, #0]
   233be:	683a      	ldr	r2, [r7, #0]
   233c0:	601a      	str	r2, [r3, #0]
   233c2:	2200      	movs	r2, #0
   233c4:	682b      	ldr	r3, [r5, #0]
   233c6:	615e      	str	r6, [r3, #20]
   233c8:	682b      	ldr	r3, [r5, #0]
   233ca:	61da      	str	r2, [r3, #28]
   233cc:	e789      	b.n	232e2 <nrf_getaddrinfo+0x1da>
   233ce:	618a      	str	r2, [r1, #24]
   233d0:	e7e4      	b.n	2339c <nrf_getaddrinfo+0x294>
   233d2:	f00c ff6b 	bl	302ac <rpc_error_to_nrf_gai_errno>
   233d6:	4604      	mov	r4, r0
   233d8:	e783      	b.n	232e2 <nrf_getaddrinfo+0x1da>
   233da:	f06f 0407 	mvn.w	r4, #7
   233de:	e721      	b.n	23224 <nrf_getaddrinfo+0x11c>
   233e0:	f06f 0401 	mvn.w	r4, #1
   233e4:	e6bd      	b.n	23162 <nrf_getaddrinfo+0x5a>
   233e6:	f04f 34ff 	mov.w	r4, #4294967295
   233ea:	e6ba      	b.n	23162 <nrf_getaddrinfo+0x5a>
   233ec:	f06f 0402 	mvn.w	r4, #2
   233f0:	e6b7      	b.n	23162 <nrf_getaddrinfo+0x5a>
   233f2:	bf00      	nop
   233f4:	2000eaf4 	.word	0x2000eaf4
   233f8:	2000eb00 	.word	0x2000eb00
   233fc:	2000eafc 	.word	0x2000eafc
   23400:	2000eaf8 	.word	0x2000eaf8
   23404:	2000ebde 	.word	0x2000ebde
   23408:	2000eb04 	.word	0x2000eb04
   2340c:	0003b3ed 	.word	0x0003b3ed
   23410:	20010482 	.word	0x20010482
   23414:	2000eaf0 	.word	0x2000eaf0

00023418 <rpc_ip_event_handler>:
   23418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2341a:	f248 030f 	movw	r3, #32783	; 0x800f
   2341e:	4299      	cmp	r1, r3
   23420:	4606      	mov	r6, r0
   23422:	460d      	mov	r5, r1
   23424:	d03b      	beq.n	2349e <rpc_ip_event_handler+0x86>
   23426:	d822      	bhi.n	2346e <rpc_ip_event_handler+0x56>
   23428:	f248 030d 	movw	r3, #32781	; 0x800d
   2342c:	4299      	cmp	r1, r3
   2342e:	d02f      	beq.n	23490 <rpc_ip_event_handler+0x78>
   23430:	f248 030e 	movw	r3, #32782	; 0x800e
   23434:	4299      	cmp	r1, r3
   23436:	d02f      	beq.n	23498 <rpc_ip_event_handler+0x80>
   23438:	6900      	ldr	r0, [r0, #16]
   2343a:	f7ff fdcf 	bl	22fdc <sock_find>
   2343e:	4604      	mov	r4, r0
   23440:	b308      	cbz	r0, 23486 <rpc_ip_event_handler+0x6e>
   23442:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   23446:	d91e      	bls.n	23486 <rpc_ip_event_handler+0x6e>
   23448:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   2344c:	3d01      	subs	r5, #1
   2344e:	2d0b      	cmp	r5, #11
   23450:	d819      	bhi.n	23486 <rpc_ip_event_handler+0x6e>
   23452:	e8df f015 	tbh	[pc, r5, lsl #1]
   23456:	0090      	.short	0x0090
   23458:	009400b3 	.word	0x009400b3
   2345c:	00940094 	.word	0x00940094
   23460:	00ee00ee 	.word	0x00ee00ee
   23464:	00990094 	.word	0x00990094
   23468:	00180018 	.word	0x00180018
   2346c:	00d2      	.short	0x00d2
   2346e:	f249 0304 	movw	r3, #36868	; 0x9004
   23472:	4299      	cmp	r1, r3
   23474:	d016      	beq.n	234a4 <rpc_ip_event_handler+0x8c>
   23476:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   2347a:	d924      	bls.n	234c6 <rpc_ip_event_handler+0xae>
   2347c:	68c0      	ldr	r0, [r0, #12]
   2347e:	f7ff fdad 	bl	22fdc <sock_find>
   23482:	4604      	mov	r4, r0
   23484:	bb70      	cbnz	r0, 234e4 <rpc_ip_event_handler+0xcc>
   23486:	6830      	ldr	r0, [r6, #0]
   23488:	b1b0      	cbz	r0, 234b8 <rpc_ip_event_handler+0xa0>
   2348a:	f00c f948 	bl	2f71e <rpc_client_msg_data_rx_free>
   2348e:	e013      	b.n	234b8 <rpc_ip_event_handler+0xa0>
   23490:	f7ff fe20 	bl	230d4 <on_getaddrinfo_res>
   23494:	b2c0      	uxtb	r0, r0
   23496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23498:	f00c faf2 	bl	2fa80 <on_getifaddrs_res>
   2349c:	e7fa      	b.n	23494 <rpc_ip_event_handler+0x7c>
   2349e:	f00c fadc 	bl	2fa5a <on_conf_dnssrv_res>
   234a2:	e7f7      	b.n	23494 <rpc_ip_event_handler+0x7c>
   234a4:	6903      	ldr	r3, [r0, #16]
   234a6:	2b03      	cmp	r3, #3
   234a8:	d806      	bhi.n	234b8 <rpc_ip_event_handler+0xa0>
   234aa:	e8df f003 	tbb	[pc, r3]
   234ae:	0a02      	.short	0x0a02
   234b0:	0702      	.short	0x0702
   234b2:	2000      	movs	r0, #0
   234b4:	f7ff fdcc 	bl	23050 <sock_flow_control_set>
   234b8:	2000      	movs	r0, #0
   234ba:	e7ec      	b.n	23496 <rpc_ip_event_handler+0x7e>
   234bc:	2201      	movs	r2, #1
   234be:	4b65      	ldr	r3, [pc, #404]	; (23654 <rpc_ip_event_handler+0x23c>)
   234c0:	701a      	strb	r2, [r3, #0]
   234c2:	2001      	movs	r0, #1
   234c4:	e7f6      	b.n	234b4 <rpc_ip_event_handler+0x9c>
   234c6:	6900      	ldr	r0, [r0, #16]
   234c8:	f7ff fd88 	bl	22fdc <sock_find>
   234cc:	4604      	mov	r4, r0
   234ce:	2800      	cmp	r0, #0
   234d0:	d0d9      	beq.n	23486 <rpc_ip_event_handler+0x6e>
   234d2:	f248 0381 	movw	r3, #32897	; 0x8081
   234d6:	429d      	cmp	r5, r3
   234d8:	d1d5      	bne.n	23486 <rpc_ip_event_handler+0x6e>
   234da:	4601      	mov	r1, r0
   234dc:	4630      	mov	r0, r6
   234de:	f000 fc2d 	bl	23d3c <on_tls_attach_res>
   234e2:	e04f      	b.n	23584 <rpc_ip_event_handler+0x16c>
   234e4:	f249 0302 	movw	r3, #36866	; 0x9002
   234e8:	429d      	cmp	r5, r3
   234ea:	f000 809e 	beq.w	2362a <rpc_ip_event_handler+0x212>
   234ee:	d835      	bhi.n	2355c <rpc_ip_event_handler+0x144>
   234f0:	f00c f9d7 	bl	2f8a2 <sock_has_stream_error>
   234f4:	4607      	mov	r7, r0
   234f6:	b9e0      	cbnz	r0, 23532 <rpc_ip_event_handler+0x11a>
   234f8:	2010      	movs	r0, #16
   234fa:	f7f9 fe05 	bl	1d108 <nrf_modem_os_alloc>
   234fe:	4605      	mov	r5, r0
   23500:	b1b8      	cbz	r0, 23532 <rpc_ip_event_handler+0x11a>
   23502:	4639      	mov	r1, r7
   23504:	2210      	movs	r2, #16
   23506:	f00d f9bc 	bl	30882 <memset>
   2350a:	6833      	ldr	r3, [r6, #0]
   2350c:	606b      	str	r3, [r5, #4]
   2350e:	6873      	ldr	r3, [r6, #4]
   23510:	812b      	strh	r3, [r5, #8]
   23512:	8a71      	ldrh	r1, [r6, #18]
   23514:	2900      	cmp	r1, #0
   23516:	f000 8097 	beq.w	23648 <rpc_ip_event_handler+0x230>
   2351a:	8a32      	ldrh	r2, [r6, #16]
   2351c:	f106 0014 	add.w	r0, r6, #20
   23520:	f00c f90b 	bl	2f73a <sockaddr_init>
   23524:	60e8      	str	r0, [r5, #12]
   23526:	2800      	cmp	r0, #0
   23528:	f040 808e 	bne.w	23648 <rpc_ip_event_handler+0x230>
   2352c:	4628      	mov	r0, r5
   2352e:	f7f9 fdf3 	bl	1d118 <nrf_modem_os_free>
   23532:	6830      	ldr	r0, [r6, #0]
   23534:	f00c f8f3 	bl	2f71e <rpc_client_msg_data_rx_free>
   23538:	4620      	mov	r0, r4
   2353a:	f00c f974 	bl	2f826 <sock_is_stream>
   2353e:	b148      	cbz	r0, 23554 <rpc_ip_event_handler+0x13c>
   23540:	4620      	mov	r0, r4
   23542:	f00c f9ae 	bl	2f8a2 <sock_has_stream_error>
   23546:	b928      	cbnz	r0, 23554 <rpc_ip_event_handler+0x13c>
   23548:	230c      	movs	r3, #12
   2354a:	61a3      	str	r3, [r4, #24]
   2354c:	7f23      	ldrb	r3, [r4, #28]
   2354e:	f063 037e 	orn	r3, r3, #126	; 0x7e
   23552:	7723      	strb	r3, [r4, #28]
   23554:	4620      	mov	r0, r4
   23556:	f00c f96b 	bl	2f830 <sock_is_datagram>
   2355a:	e025      	b.n	235a8 <rpc_ip_event_handler+0x190>
   2355c:	f249 0303 	movw	r3, #36867	; 0x9003
   23560:	429d      	cmp	r5, r3
   23562:	d018      	beq.n	23596 <rpc_ip_event_handler+0x17e>
   23564:	f249 0382 	movw	r3, #36994	; 0x9082
   23568:	429d      	cmp	r5, r3
   2356a:	d18c      	bne.n	23486 <rpc_ip_event_handler+0x6e>
   2356c:	4601      	mov	r1, r0
   2356e:	4630      	mov	r0, r6
   23570:	f000 fbf8 	bl	23d64 <on_tls_handshake_ntf>
   23574:	e006      	b.n	23584 <rpc_ip_event_handler+0x16c>
   23576:	6973      	ldr	r3, [r6, #20]
   23578:	b90b      	cbnz	r3, 2357e <rpc_ip_event_handler+0x166>
   2357a:	69b3      	ldr	r3, [r6, #24]
   2357c:	6003      	str	r3, [r0, #0]
   2357e:	4630      	mov	r0, r6
   23580:	f00c fede 	bl	30340 <res_forward>
   23584:	4605      	mov	r5, r0
   23586:	e010      	b.n	235aa <rpc_ip_event_handler+0x192>
   23588:	7f03      	ldrb	r3, [r0, #28]
   2358a:	f023 0303 	bic.w	r3, r3, #3
   2358e:	f043 0303 	orr.w	r3, r3, #3
   23592:	7703      	strb	r3, [r0, #28]
   23594:	e7f3      	b.n	2357e <rpc_ip_event_handler+0x166>
   23596:	7f03      	ldrb	r3, [r0, #28]
   23598:	f043 0301 	orr.w	r3, r3, #1
   2359c:	7703      	strb	r3, [r0, #28]
   2359e:	6930      	ldr	r0, [r6, #16]
   235a0:	2869      	cmp	r0, #105	; 0x69
   235a2:	d112      	bne.n	235ca <rpc_ip_event_handler+0x1b2>
   235a4:	2368      	movs	r3, #104	; 0x68
   235a6:	61a3      	str	r3, [r4, #24]
   235a8:	2500      	movs	r5, #0
   235aa:	4620      	mov	r0, r4
   235ac:	f00c f987 	bl	2f8be <sock_has_pollcb>
   235b0:	b110      	cbz	r0, 235b8 <rpc_ip_event_handler+0x1a0>
   235b2:	4620      	mov	r0, r4
   235b4:	f00c f8fa 	bl	2f7ac <sock_pollcb>
   235b8:	b2e8      	uxtb	r0, r5
   235ba:	e76c      	b.n	23496 <rpc_ip_event_handler+0x7e>
   235bc:	7f03      	ldrb	r3, [r0, #28]
   235be:	68f5      	ldr	r5, [r6, #12]
   235c0:	f36f 0382 	bfc	r3, #2, #1
   235c4:	7703      	strb	r3, [r0, #28]
   235c6:	6970      	ldr	r0, [r6, #20]
   235c8:	b118      	cbz	r0, 235d2 <rpc_ip_event_handler+0x1ba>
   235ca:	f000 fc71 	bl	23eb0 <rpc_error_to_nrf_errno>
   235ce:	61a0      	str	r0, [r4, #24]
   235d0:	e7ea      	b.n	235a8 <rpc_ip_event_handler+0x190>
   235d2:	4620      	mov	r0, r4
   235d4:	f00c f936 	bl	2f844 <sock_proto_is_secure>
   235d8:	b918      	cbnz	r0, 235e2 <rpc_ip_event_handler+0x1ca>
   235da:	7f23      	ldrb	r3, [r4, #28]
   235dc:	f043 0308 	orr.w	r3, r3, #8
   235e0:	7723      	strb	r3, [r4, #28]
   235e2:	4620      	mov	r0, r4
   235e4:	f00c f92e 	bl	2f844 <sock_proto_is_secure>
   235e8:	2800      	cmp	r0, #0
   235ea:	d0cb      	beq.n	23584 <rpc_ip_event_handler+0x16c>
   235ec:	2d00      	cmp	r5, #0
   235ee:	d0dc      	beq.n	235aa <rpc_ip_event_handler+0x192>
   235f0:	2100      	movs	r1, #0
   235f2:	4620      	mov	r0, r4
   235f4:	f000 fbd0 	bl	23d98 <tls_attach>
   235f8:	e7d6      	b.n	235a8 <rpc_ip_event_handler+0x190>
   235fa:	7f43      	ldrb	r3, [r0, #29]
   235fc:	3b01      	subs	r3, #1
   235fe:	7743      	strb	r3, [r0, #29]
   23600:	6973      	ldr	r3, [r6, #20]
   23602:	2b00      	cmp	r3, #0
   23604:	d1bb      	bne.n	2357e <rpc_ip_event_handler+0x166>
   23606:	4630      	mov	r0, r6
   23608:	f00c fe98 	bl	3033c <res_cookie_get>
   2360c:	69b2      	ldr	r2, [r6, #24]
   2360e:	6843      	ldr	r3, [r0, #4]
   23610:	601a      	str	r2, [r3, #0]
   23612:	6842      	ldr	r2, [r0, #4]
   23614:	7f13      	ldrb	r3, [r2, #28]
   23616:	f043 0308 	orr.w	r3, r3, #8
   2361a:	7713      	strb	r3, [r2, #28]
   2361c:	6843      	ldr	r3, [r0, #4]
   2361e:	6922      	ldr	r2, [r4, #16]
   23620:	611a      	str	r2, [r3, #16]
   23622:	6843      	ldr	r3, [r0, #4]
   23624:	6962      	ldr	r2, [r4, #20]
   23626:	615a      	str	r2, [r3, #20]
   23628:	e7a9      	b.n	2357e <rpc_ip_event_handler+0x166>
   2362a:	7f43      	ldrb	r3, [r0, #29]
   2362c:	3301      	adds	r3, #1
   2362e:	7743      	strb	r3, [r0, #29]
   23630:	e7ba      	b.n	235a8 <rpc_ip_event_handler+0x190>
   23632:	4630      	mov	r0, r6
   23634:	f00c fe82 	bl	3033c <res_cookie_get>
   23638:	6973      	ldr	r3, [r6, #20]
   2363a:	b913      	cbnz	r3, 23642 <rpc_ip_event_handler+0x22a>
   2363c:	69b3      	ldr	r3, [r6, #24]
   2363e:	6043      	str	r3, [r0, #4]
   23640:	e79d      	b.n	2357e <rpc_ip_event_handler+0x166>
   23642:	f04f 33ff 	mov.w	r3, #4294967295
   23646:	e7fa      	b.n	2363e <rpc_ip_event_handler+0x226>
   23648:	4629      	mov	r1, r5
   2364a:	4620      	mov	r0, r4
   2364c:	f00c f8cb 	bl	2f7e6 <sock_pkt_append>
   23650:	e7aa      	b.n	235a8 <rpc_ip_event_handler+0x190>
   23652:	bf00      	nop
   23654:	20010483 	.word	0x20010483

00023658 <nrf_close>:
   23658:	b570      	push	{r4, r5, r6, lr}
   2365a:	4604      	mov	r4, r0
   2365c:	f7ff fcbe 	bl	22fdc <sock_find>
   23660:	4605      	mov	r5, r0
   23662:	b930      	cbnz	r0, 23672 <nrf_close+0x1a>
   23664:	2009      	movs	r0, #9
   23666:	f7f9 fc7d 	bl	1cf64 <nrf_modem_os_errno_set>
   2366a:	f04f 36ff 	mov.w	r6, #4294967295
   2366e:	4630      	mov	r0, r6
   23670:	bd70      	pop	{r4, r5, r6, pc}
   23672:	f000 fd8f 	bl	24194 <nrf_modem_state_is_initialized>
   23676:	b960      	cbnz	r0, 23692 <nrf_close+0x3a>
   23678:	2600      	movs	r6, #0
   2367a:	4628      	mov	r0, r5
   2367c:	f00c f8f6 	bl	2f86c <sock_is_attaching>
   23680:	b118      	cbz	r0, 2368a <nrf_close+0x32>
   23682:	4b0e      	ldr	r3, [pc, #56]	; (236bc <nrf_close+0x64>)
   23684:	6818      	ldr	r0, [r3, #0]
   23686:	f7f9 fcbf 	bl	1d008 <nrf_modem_os_sem_give>
   2368a:	4620      	mov	r0, r4
   2368c:	f7ff fcb8 	bl	23000 <_sock_close>
   23690:	e7ed      	b.n	2366e <nrf_close+0x16>
   23692:	2000      	movs	r0, #0
   23694:	f00c f81d 	bl	2f6d2 <rpc_client_msg_alloc>
   23698:	4601      	mov	r1, r0
   2369a:	b908      	cbnz	r0, 236a0 <nrf_close+0x48>
   2369c:	2069      	movs	r0, #105	; 0x69
   2369e:	e7e2      	b.n	23666 <nrf_close+0xe>
   236a0:	6104      	str	r4, [r0, #16]
   236a2:	f247 0009 	movw	r0, #28681	; 0x7009
   236a6:	f00c fe1b 	bl	302e0 <req_forward>
   236aa:	2800      	cmp	r0, #0
   236ac:	d0e4      	beq.n	23678 <nrf_close+0x20>
   236ae:	2816      	cmp	r0, #22
   236b0:	d0e2      	beq.n	23678 <nrf_close+0x20>
   236b2:	f7f9 fc57 	bl	1cf64 <nrf_modem_os_errno_set>
   236b6:	f04f 36ff 	mov.w	r6, #4294967295
   236ba:	e7de      	b.n	2367a <nrf_close+0x22>
   236bc:	2000eb08 	.word	0x2000eb08

000236c0 <nrf_sendto>:
   236c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236c4:	4698      	mov	r8, r3
   236c6:	2300      	movs	r3, #0
   236c8:	b085      	sub	sp, #20
   236ca:	4682      	mov	sl, r0
   236cc:	4689      	mov	r9, r1
   236ce:	4616      	mov	r6, r2
   236d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   236d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   236d6:	f7ff fc81 	bl	22fdc <sock_find>
   236da:	4605      	mov	r5, r0
   236dc:	b940      	cbnz	r0, 236f0 <nrf_sendto+0x30>
   236de:	2009      	movs	r0, #9
   236e0:	f7f9 fc40 	bl	1cf64 <nrf_modem_os_errno_set>
   236e4:	f04f 34ff 	mov.w	r4, #4294967295
   236e8:	4620      	mov	r0, r4
   236ea:	b005      	add	sp, #20
   236ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236f0:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   236f4:	d001      	beq.n	236fa <nrf_sendto+0x3a>
   236f6:	205f      	movs	r0, #95	; 0x5f
   236f8:	e7f2      	b.n	236e0 <nrf_sendto+0x20>
   236fa:	f00c f8e5 	bl	2f8c8 <sock_has_rai_no_data>
   236fe:	b128      	cbz	r0, 2370c <nrf_sendto+0x4c>
   23700:	4628      	mov	r0, r5
   23702:	f00c f8d1 	bl	2f8a8 <sock_has_error>
   23706:	b128      	cbz	r0, 23714 <nrf_sendto+0x54>
   23708:	69a8      	ldr	r0, [r5, #24]
   2370a:	e7e9      	b.n	236e0 <nrf_sendto+0x20>
   2370c:	4628      	mov	r0, r5
   2370e:	f00c f8b5 	bl	2f87c <sock_is_closed>
   23712:	e7f8      	b.n	23706 <nrf_sendto+0x46>
   23714:	4628      	mov	r0, r5
   23716:	b1d7      	cbz	r7, 2374e <nrf_sendto+0x8e>
   23718:	f00c f885 	bl	2f826 <sock_is_stream>
   2371c:	bb00      	cbnz	r0, 23760 <nrf_sendto+0xa0>
   2371e:	4639      	mov	r1, r7
   23720:	4628      	mov	r0, r5
   23722:	f00c f95d 	bl	2f9e0 <sock_sockaddr_fam_is_valid>
   23726:	b908      	cbnz	r0, 2372c <nrf_sendto+0x6c>
   23728:	206a      	movs	r0, #106	; 0x6a
   2372a:	e7d9      	b.n	236e0 <nrf_sendto+0x20>
   2372c:	4638      	mov	r0, r7
   2372e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23730:	f00c f942 	bl	2f9b8 <sock_sockaddr_len_is_valid>
   23734:	b908      	cbnz	r0, 2373a <nrf_sendto+0x7a>
   23736:	2016      	movs	r0, #22
   23738:	e7d2      	b.n	236e0 <nrf_sendto+0x20>
   2373a:	4628      	mov	r0, r5
   2373c:	f00c f878 	bl	2f830 <sock_is_datagram>
   23740:	b170      	cbz	r0, 23760 <nrf_sendto+0xa0>
   23742:	4628      	mov	r0, r5
   23744:	f00c f87e 	bl	2f844 <sock_proto_is_secure>
   23748:	b150      	cbz	r0, 23760 <nrf_sendto+0xa0>
   2374a:	207f      	movs	r0, #127	; 0x7f
   2374c:	e7c8      	b.n	236e0 <nrf_sendto+0x20>
   2374e:	f00c f86f 	bl	2f830 <sock_is_datagram>
   23752:	b128      	cbz	r0, 23760 <nrf_sendto+0xa0>
   23754:	4628      	mov	r0, r5
   23756:	f00c f885 	bl	2f864 <sock_is_connected>
   2375a:	b908      	cbnz	r0, 23760 <nrf_sendto+0xa0>
   2375c:	2079      	movs	r0, #121	; 0x79
   2375e:	e7bf      	b.n	236e0 <nrf_sendto+0x20>
   23760:	4628      	mov	r0, r5
   23762:	f00c f8f1 	bl	2f948 <sock_sndtimeo_ms_get>
   23766:	9001      	str	r0, [sp, #4]
   23768:	4628      	mov	r0, r5
   2376a:	f00c f883 	bl	2f874 <sock_is_nonblock>
   2376e:	bb78      	cbnz	r0, 237d0 <nrf_sendto+0x110>
   23770:	f3c8 1880 	ubfx	r8, r8, #6, #1
   23774:	4628      	mov	r0, r5
   23776:	f00c f856 	bl	2f826 <sock_is_stream>
   2377a:	b140      	cbz	r0, 2378e <nrf_sendto+0xce>
   2377c:	4628      	mov	r0, r5
   2377e:	f00c f861 	bl	2f844 <sock_proto_is_secure>
   23782:	b120      	cbz	r0, 2378e <nrf_sendto+0xce>
   23784:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   23788:	bf28      	it	cs
   2378a:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   2378e:	f00b ffc8 	bl	2f722 <rpc_client_msg_data_tx_size>
   23792:	42b0      	cmp	r0, r6
   23794:	d206      	bcs.n	237a4 <nrf_sendto+0xe4>
   23796:	4628      	mov	r0, r5
   23798:	f00c f845 	bl	2f826 <sock_is_stream>
   2379c:	b1d8      	cbz	r0, 237d6 <nrf_sendto+0x116>
   2379e:	f00b ffc0 	bl	2f722 <rpc_client_msg_data_tx_size>
   237a2:	4606      	mov	r6, r0
   237a4:	4628      	mov	r0, r5
   237a6:	f00c f886 	bl	2f8b6 <sock_has_flow_control>
   237aa:	b118      	cbz	r0, 237b4 <nrf_sendto+0xf4>
   237ac:	4628      	mov	r0, r5
   237ae:	f00c f865 	bl	2f87c <sock_is_closed>
   237b2:	b190      	cbz	r0, 237da <nrf_sendto+0x11a>
   237b4:	4630      	mov	r0, r6
   237b6:	f00b ff8c 	bl	2f6d2 <rpc_client_msg_alloc>
   237ba:	4604      	mov	r4, r0
   237bc:	b9e0      	cbnz	r0, 237f8 <nrf_sendto+0x138>
   237be:	2001      	movs	r0, #1
   237c0:	a901      	add	r1, sp, #4
   237c2:	f7f9 fb0d 	bl	1cde0 <nrf_modem_os_timedwait>
   237c6:	b998      	cbnz	r0, 237f0 <nrf_sendto+0x130>
   237c8:	f1b8 0f00 	cmp.w	r8, #0
   237cc:	d0f2      	beq.n	237b4 <nrf_sendto+0xf4>
   237ce:	e007      	b.n	237e0 <nrf_sendto+0x120>
   237d0:	f04f 0801 	mov.w	r8, #1
   237d4:	e7ce      	b.n	23774 <nrf_sendto+0xb4>
   237d6:	207a      	movs	r0, #122	; 0x7a
   237d8:	e782      	b.n	236e0 <nrf_sendto+0x20>
   237da:	f1b8 0f00 	cmp.w	r8, #0
   237de:	d001      	beq.n	237e4 <nrf_sendto+0x124>
   237e0:	200b      	movs	r0, #11
   237e2:	e77d      	b.n	236e0 <nrf_sendto+0x20>
   237e4:	2002      	movs	r0, #2
   237e6:	a901      	add	r1, sp, #4
   237e8:	f7f9 fafa 	bl	1cde0 <nrf_modem_os_timedwait>
   237ec:	2800      	cmp	r0, #0
   237ee:	d0d9      	beq.n	237a4 <nrf_sendto+0xe4>
   237f0:	2800      	cmp	r0, #0
   237f2:	bfb8      	it	lt
   237f4:	4240      	neglt	r0, r0
   237f6:	e773      	b.n	236e0 <nrf_sendto+0x20>
   237f8:	f8c0 a010 	str.w	sl, [r0, #16]
   237fc:	f1b9 0f00 	cmp.w	r9, #0
   23800:	d004      	beq.n	2380c <nrf_sendto+0x14c>
   23802:	4632      	mov	r2, r6
   23804:	4649      	mov	r1, r9
   23806:	6800      	ldr	r0, [r0, #0]
   23808:	f00d f81b 	bl	30842 <memcpy>
   2380c:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   23810:	f1bb 0f00 	cmp.w	fp, #0
   23814:	d001      	beq.n	2381a <nrf_sendto+0x15a>
   23816:	2300      	movs	r3, #0
   23818:	632b      	str	r3, [r5, #48]	; 0x30
   2381a:	b3cf      	cbz	r7, 23890 <nrf_sendto+0x1d0>
   2381c:	4628      	mov	r0, r5
   2381e:	f00c f802 	bl	2f826 <sock_is_stream>
   23822:	bba8      	cbnz	r0, 23890 <nrf_sendto+0x1d0>
   23824:	2318      	movs	r3, #24
   23826:	7260      	strb	r0, [r4, #9]
   23828:	7223      	strb	r3, [r4, #8]
   2382a:	72a0      	strb	r0, [r4, #10]
   2382c:	72e0      	strb	r0, [r4, #11]
   2382e:	f8c4 b014 	str.w	fp, [r4, #20]
   23832:	687b      	ldr	r3, [r7, #4]
   23834:	2b01      	cmp	r3, #1
   23836:	d012      	beq.n	2385e <nrf_sendto+0x19e>
   23838:	2b02      	cmp	r3, #2
   2383a:	d018      	beq.n	2386e <nrf_sendto+0x1ae>
   2383c:	f247 0b07 	movw	fp, #28679	; 0x7007
   23840:	4620      	mov	r0, r4
   23842:	a902      	add	r1, sp, #8
   23844:	f00c fd78 	bl	30338 <req_cookie_set>
   23848:	4621      	mov	r1, r4
   2384a:	4658      	mov	r0, fp
   2384c:	f00c fd48 	bl	302e0 <req_forward>
   23850:	4603      	mov	r3, r0
   23852:	bb40      	cbnz	r0, 238a6 <nrf_sendto+0x1e6>
   23854:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   23858:	f00b ff5e 	bl	2f718 <rpc_client_msg_rx_free>
   2385c:	e744      	b.n	236e8 <nrf_sendto+0x28>
   2385e:	893b      	ldrh	r3, [r7, #8]
   23860:	76e0      	strb	r0, [r4, #27]
   23862:	8323      	strh	r3, [r4, #24]
   23864:	2304      	movs	r3, #4
   23866:	76a3      	strb	r3, [r4, #26]
   23868:	68fb      	ldr	r3, [r7, #12]
   2386a:	61e3      	str	r3, [r4, #28]
   2386c:	e7e6      	b.n	2383c <nrf_sendto+0x17c>
   2386e:	893b      	ldrh	r3, [r7, #8]
   23870:	f104 021c 	add.w	r2, r4, #28
   23874:	8323      	strh	r3, [r4, #24]
   23876:	2310      	movs	r3, #16
   23878:	76e0      	strb	r0, [r4, #27]
   2387a:	76a3      	strb	r3, [r4, #26]
   2387c:	f107 0120 	add.w	r1, r7, #32
   23880:	18fb      	adds	r3, r7, r3
   23882:	f853 0b04 	ldr.w	r0, [r3], #4
   23886:	428b      	cmp	r3, r1
   23888:	f842 0b04 	str.w	r0, [r2], #4
   2388c:	d1f9      	bne.n	23882 <nrf_sendto+0x1c2>
   2388e:	e7d5      	b.n	2383c <nrf_sendto+0x17c>
   23890:	2300      	movs	r3, #0
   23892:	2204      	movs	r2, #4
   23894:	f8c4 b014 	str.w	fp, [r4, #20]
   23898:	7222      	strb	r2, [r4, #8]
   2389a:	f247 0b06 	movw	fp, #28678	; 0x7006
   2389e:	7263      	strb	r3, [r4, #9]
   238a0:	72a3      	strb	r3, [r4, #10]
   238a2:	72e3      	strb	r3, [r4, #11]
   238a4:	e7cc      	b.n	23840 <nrf_sendto+0x180>
   238a6:	280c      	cmp	r0, #12
   238a8:	dc0f      	bgt.n	238ca <nrf_sendto+0x20a>
   238aa:	280a      	cmp	r0, #10
   238ac:	dd10      	ble.n	238d0 <nrf_sendto+0x210>
   238ae:	4b09      	ldr	r3, [pc, #36]	; (238d4 <nrf_sendto+0x214>)
   238b0:	781b      	ldrb	r3, [r3, #0]
   238b2:	b92b      	cbnz	r3, 238c0 <nrf_sendto+0x200>
   238b4:	2001      	movs	r0, #1
   238b6:	a901      	add	r1, sp, #4
   238b8:	f7f9 fa92 	bl	1cde0 <nrf_modem_os_timedwait>
   238bc:	2800      	cmp	r0, #0
   238be:	d197      	bne.n	237f0 <nrf_sendto+0x130>
   238c0:	f1b8 0f00 	cmp.w	r8, #0
   238c4:	f43f af6e 	beq.w	237a4 <nrf_sendto+0xe4>
   238c8:	e78a      	b.n	237e0 <nrf_sendto+0x120>
   238ca:	288c      	cmp	r0, #140	; 0x8c
   238cc:	f43f af08 	beq.w	236e0 <nrf_sendto+0x20>
   238d0:	4618      	mov	r0, r3
   238d2:	e705      	b.n	236e0 <nrf_sendto+0x20>
   238d4:	20010483 	.word	0x20010483

000238d8 <nrf_setsockopt>:
   238d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238dc:	b085      	sub	sp, #20
   238de:	4681      	mov	r9, r0
   238e0:	4688      	mov	r8, r1
   238e2:	4617      	mov	r7, r2
   238e4:	461e      	mov	r6, r3
   238e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   238e8:	f7ff fb78 	bl	22fdc <sock_find>
   238ec:	4604      	mov	r4, r0
   238ee:	b938      	cbnz	r0, 23900 <nrf_setsockopt+0x28>
   238f0:	2009      	movs	r0, #9
   238f2:	f7f9 fb37 	bl	1cf64 <nrf_modem_os_errno_set>
   238f6:	f04f 30ff 	mov.w	r0, #4294967295
   238fa:	b005      	add	sp, #20
   238fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23900:	b916      	cbnz	r6, 23908 <nrf_setsockopt+0x30>
   23902:	b10d      	cbz	r5, 23908 <nrf_setsockopt+0x30>
   23904:	2016      	movs	r0, #22
   23906:	e7f4      	b.n	238f2 <nrf_setsockopt+0x1a>
   23908:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   2390c:	f000 80fe 	beq.w	23b0c <nrf_setsockopt+0x234>
   23910:	dc0c      	bgt.n	2392c <nrf_setsockopt+0x54>
   23912:	f1b8 0f01 	cmp.w	r8, #1
   23916:	d012      	beq.n	2393e <nrf_setsockopt+0x66>
   23918:	f1b8 0f06 	cmp.w	r8, #6
   2391c:	f000 80f0 	beq.w	23b00 <nrf_setsockopt+0x228>
   23920:	f1b8 0f00 	cmp.w	r8, #0
   23924:	f000 80f0 	beq.w	23b08 <nrf_setsockopt+0x230>
   23928:	206d      	movs	r0, #109	; 0x6d
   2392a:	e7e2      	b.n	238f2 <nrf_setsockopt+0x1a>
   2392c:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   23930:	f000 8092 	beq.w	23a58 <nrf_setsockopt+0x180>
   23934:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   23938:	d1f6      	bne.n	23928 <nrf_setsockopt+0x50>
   2393a:	2f1e      	cmp	r7, #30
   2393c:	e0e1      	b.n	23b02 <nrf_setsockopt+0x22a>
   2393e:	2f3c      	cmp	r7, #60	; 0x3c
   23940:	dcf2      	bgt.n	23928 <nrf_setsockopt+0x50>
   23942:	2f31      	cmp	r7, #49	; 0x31
   23944:	dc0f      	bgt.n	23966 <nrf_setsockopt+0x8e>
   23946:	2f15      	cmp	r7, #21
   23948:	d046      	beq.n	239d8 <nrf_setsockopt+0x100>
   2394a:	dc29      	bgt.n	239a0 <nrf_setsockopt+0xc8>
   2394c:	2f02      	cmp	r7, #2
   2394e:	d03a      	beq.n	239c6 <nrf_setsockopt+0xee>
   23950:	2f14      	cmp	r7, #20
   23952:	d1e9      	bne.n	23928 <nrf_setsockopt+0x50>
   23954:	f104 0020 	add.w	r0, r4, #32
   23958:	2d00      	cmp	r5, #0
   2395a:	d143      	bne.n	239e4 <nrf_setsockopt+0x10c>
   2395c:	2300      	movs	r3, #0
   2395e:	6223      	str	r3, [r4, #32]
   23960:	6043      	str	r3, [r0, #4]
   23962:	2000      	movs	r0, #0
   23964:	e7c9      	b.n	238fa <nrf_setsockopt+0x22>
   23966:	3f32      	subs	r7, #50	; 0x32
   23968:	2f0a      	cmp	r7, #10
   2396a:	d8dd      	bhi.n	23928 <nrf_setsockopt+0x50>
   2396c:	a301      	add	r3, pc, #4	; (adr r3, 23974 <nrf_setsockopt+0x9c>)
   2396e:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   23972:	bf00      	nop
   23974:	00023a3d 	.word	0x00023a3d
   23978:	00023a23 	.word	0x00023a23
   2397c:	00023a2b 	.word	0x00023a2b
   23980:	00023a31 	.word	0x00023a31
   23984:	00023a37 	.word	0x00023a37
   23988:	00023929 	.word	0x00023929
   2398c:	00023929 	.word	0x00023929
   23990:	00023929 	.word	0x00023929
   23994:	00023929 	.word	0x00023929
   23998:	00023929 	.word	0x00023929
   2399c:	000239f5 	.word	0x000239f5
   239a0:	2f19      	cmp	r7, #25
   239a2:	d1c1      	bne.n	23928 <nrf_setsockopt+0x50>
   239a4:	2e00      	cmp	r6, #0
   239a6:	d0ad      	beq.n	23904 <nrf_setsockopt+0x2c>
   239a8:	2203      	movs	r2, #3
   239aa:	4969      	ldr	r1, [pc, #420]	; (23b50 <nrf_setsockopt+0x278>)
   239ac:	4630      	mov	r0, r6
   239ae:	f00c ff38 	bl	30822 <memcmp>
   239b2:	220a      	movs	r2, #10
   239b4:	2100      	movs	r1, #0
   239b6:	2800      	cmp	r0, #0
   239b8:	d14c      	bne.n	23a54 <nrf_setsockopt+0x17c>
   239ba:	1cf0      	adds	r0, r6, #3
   239bc:	f005 f922 	bl	28c04 <strtoul>
   239c0:	2504      	movs	r5, #4
   239c2:	9003      	str	r0, [sp, #12]
   239c4:	ae03      	add	r6, sp, #12
   239c6:	4628      	mov	r0, r5
   239c8:	f00b fe83 	bl	2f6d2 <rpc_client_msg_alloc>
   239cc:	4604      	mov	r4, r0
   239ce:	2800      	cmp	r0, #0
   239d0:	f040 809e 	bne.w	23b10 <nrf_setsockopt+0x238>
   239d4:	2069      	movs	r0, #105	; 0x69
   239d6:	e78c      	b.n	238f2 <nrf_setsockopt+0x1a>
   239d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   239dc:	b915      	cbnz	r5, 239e4 <nrf_setsockopt+0x10c>
   239de:	62a5      	str	r5, [r4, #40]	; 0x28
   239e0:	6045      	str	r5, [r0, #4]
   239e2:	e7be      	b.n	23962 <nrf_setsockopt+0x8a>
   239e4:	2d08      	cmp	r5, #8
   239e6:	462a      	mov	r2, r5
   239e8:	4631      	mov	r1, r6
   239ea:	bf28      	it	cs
   239ec:	2208      	movcs	r2, #8
   239ee:	f00c ff28 	bl	30842 <memcpy>
   239f2:	e7b6      	b.n	23962 <nrf_setsockopt+0x8a>
   239f4:	b17e      	cbz	r6, 23a16 <nrf_setsockopt+0x13e>
   239f6:	2d08      	cmp	r5, #8
   239f8:	d184      	bne.n	23904 <nrf_setsockopt+0x2c>
   239fa:	f7fe fdbd 	bl	22578 <rpc_transport_data_rx_suspend>
   239fe:	e896 0003 	ldmia.w	r6, {r0, r1}
   23a02:	f104 0334 	add.w	r3, r4, #52	; 0x34
   23a06:	e883 0003 	stmia.w	r3, {r0, r1}
   23a0a:	4620      	mov	r0, r4
   23a0c:	f00b fece 	bl	2f7ac <sock_pollcb>
   23a10:	f7fe fdb8 	bl	22584 <rpc_transport_data_rx_resume>
   23a14:	e7a5      	b.n	23962 <nrf_setsockopt+0x8a>
   23a16:	2d00      	cmp	r5, #0
   23a18:	f47f af74 	bne.w	23904 <nrf_setsockopt+0x2c>
   23a1c:	6365      	str	r5, [r4, #52]	; 0x34
   23a1e:	63a5      	str	r5, [r4, #56]	; 0x38
   23a20:	e79f      	b.n	23962 <nrf_setsockopt+0x8a>
   23a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   23a26:	6323      	str	r3, [r4, #48]	; 0x30
   23a28:	e79b      	b.n	23962 <nrf_setsockopt+0x8a>
   23a2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   23a2e:	e7fa      	b.n	23a26 <nrf_setsockopt+0x14e>
   23a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   23a34:	e7f7      	b.n	23a26 <nrf_setsockopt+0x14e>
   23a36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23a3a:	e7f4      	b.n	23a26 <nrf_setsockopt+0x14e>
   23a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   23a40:	6323      	str	r3, [r4, #48]	; 0x30
   23a42:	2300      	movs	r3, #0
   23a44:	4648      	mov	r0, r9
   23a46:	461a      	mov	r2, r3
   23a48:	4619      	mov	r1, r3
   23a4a:	e9cd 3300 	strd	r3, r3, [sp]
   23a4e:	f7ff fe37 	bl	236c0 <nrf_sendto>
   23a52:	e752      	b.n	238fa <nrf_setsockopt+0x22>
   23a54:	4630      	mov	r0, r6
   23a56:	e7b1      	b.n	239bc <nrf_setsockopt+0xe4>
   23a58:	1e7b      	subs	r3, r7, #1
   23a5a:	2b11      	cmp	r3, #17
   23a5c:	f63f af64 	bhi.w	23928 <nrf_setsockopt+0x50>
   23a60:	a201      	add	r2, pc, #4	; (adr r2, 23a68 <nrf_setsockopt+0x190>)
   23a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23a66:	bf00      	nop
   23a68:	00023ac1 	.word	0x00023ac1
   23a6c:	00023af1 	.word	0x00023af1
   23a70:	000239c7 	.word	0x000239c7
   23a74:	00023929 	.word	0x00023929
   23a78:	00023ae1 	.word	0x00023ae1
   23a7c:	00023ab1 	.word	0x00023ab1
   23a80:	00023929 	.word	0x00023929
   23a84:	00023929 	.word	0x00023929
   23a88:	00023929 	.word	0x00023929
   23a8c:	00023929 	.word	0x00023929
   23a90:	00023929 	.word	0x00023929
   23a94:	00023ad1 	.word	0x00023ad1
   23a98:	000239c7 	.word	0x000239c7
   23a9c:	000239c7 	.word	0x000239c7
   23aa0:	000239c7 	.word	0x000239c7
   23aa4:	00023929 	.word	0x00023929
   23aa8:	000239c7 	.word	0x000239c7
   23aac:	000239c7 	.word	0x000239c7
   23ab0:	462a      	mov	r2, r5
   23ab2:	4631      	mov	r1, r6
   23ab4:	4620      	mov	r0, r4
   23ab6:	b005      	add	sp, #20
   23ab8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23abc:	f00c badd 	b.w	3007a <tls_setopt_role>
   23ac0:	462a      	mov	r2, r5
   23ac2:	4631      	mov	r1, r6
   23ac4:	4620      	mov	r0, r4
   23ac6:	b005      	add	sp, #20
   23ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23acc:	f00c bae9 	b.w	300a2 <tls_setopt_taglist>
   23ad0:	462a      	mov	r2, r5
   23ad2:	4631      	mov	r1, r6
   23ad4:	4620      	mov	r0, r4
   23ad6:	b005      	add	sp, #20
   23ad8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23adc:	f00c baf6 	b.w	300cc <tls_setopt_sess_cache>
   23ae0:	462a      	mov	r2, r5
   23ae2:	4631      	mov	r1, r6
   23ae4:	4620      	mov	r0, r4
   23ae6:	b005      	add	sp, #20
   23ae8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23aec:	f00c bb00 	b.w	300f0 <tls_setopt_peer_verify>
   23af0:	462a      	mov	r2, r5
   23af2:	4631      	mov	r1, r6
   23af4:	4620      	mov	r0, r4
   23af6:	b005      	add	sp, #20
   23af8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23afc:	f00c bb07 	b.w	3010e <tls_setopt_hostname>
   23b00:	2f37      	cmp	r7, #55	; 0x37
   23b02:	f43f af60 	beq.w	239c6 <nrf_setsockopt+0xee>
   23b06:	e70f      	b.n	23928 <nrf_setsockopt+0x50>
   23b08:	2f1f      	cmp	r7, #31
   23b0a:	e7fa      	b.n	23b02 <nrf_setsockopt+0x22a>
   23b0c:	2f20      	cmp	r7, #32
   23b0e:	e7f8      	b.n	23b02 <nrf_setsockopt+0x22a>
   23b10:	2300      	movs	r3, #0
   23b12:	2208      	movs	r2, #8
   23b14:	7243      	strb	r3, [r0, #9]
   23b16:	7202      	strb	r2, [r0, #8]
   23b18:	7283      	strb	r3, [r0, #10]
   23b1a:	72c3      	strb	r3, [r0, #11]
   23b1c:	f8c0 9010 	str.w	r9, [r0, #16]
   23b20:	4640      	mov	r0, r8
   23b22:	f00c fba6 	bl	30272 <nrf_sol_to_rpc_sol>
   23b26:	6160      	str	r0, [r4, #20]
   23b28:	4638      	mov	r0, r7
   23b2a:	f000 f9b5 	bl	23e98 <nrf_so_to_rpc_so>
   23b2e:	4631      	mov	r1, r6
   23b30:	61a0      	str	r0, [r4, #24]
   23b32:	462a      	mov	r2, r5
   23b34:	6820      	ldr	r0, [r4, #0]
   23b36:	f00c fe84 	bl	30842 <memcpy>
   23b3a:	4621      	mov	r1, r4
   23b3c:	f247 0003 	movw	r0, #28675	; 0x7003
   23b40:	6065      	str	r5, [r4, #4]
   23b42:	f00c fbcd 	bl	302e0 <req_forward>
   23b46:	2800      	cmp	r0, #0
   23b48:	f43f af0b 	beq.w	23962 <nrf_setsockopt+0x8a>
   23b4c:	e6d1      	b.n	238f2 <nrf_setsockopt+0x1a>
   23b4e:	bf00      	nop
   23b50:	0003b3ed 	.word	0x0003b3ed

00023b54 <nrf_getsockopt>:
   23b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b58:	9c08      	ldr	r4, [sp, #32]
   23b5a:	4681      	mov	r9, r0
   23b5c:	4688      	mov	r8, r1
   23b5e:	4617      	mov	r7, r2
   23b60:	461e      	mov	r6, r3
   23b62:	f7ff fa3b 	bl	22fdc <sock_find>
   23b66:	b930      	cbnz	r0, 23b76 <nrf_getsockopt+0x22>
   23b68:	2009      	movs	r0, #9
   23b6a:	f7f9 f9fb 	bl	1cf64 <nrf_modem_os_errno_set>
   23b6e:	f04f 30ff 	mov.w	r0, #4294967295
   23b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23b76:	b106      	cbz	r6, 23b7a <nrf_getsockopt+0x26>
   23b78:	b90c      	cbnz	r4, 23b7e <nrf_getsockopt+0x2a>
   23b7a:	200e      	movs	r0, #14
   23b7c:	e7f5      	b.n	23b6a <nrf_getsockopt+0x16>
   23b7e:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   23b82:	f000 8096 	beq.w	23cb2 <nrf_getsockopt+0x15e>
   23b86:	dc0c      	bgt.n	23ba2 <nrf_getsockopt+0x4e>
   23b88:	f1b8 0f01 	cmp.w	r8, #1
   23b8c:	d011      	beq.n	23bb2 <nrf_getsockopt+0x5e>
   23b8e:	f1b8 0f06 	cmp.w	r8, #6
   23b92:	f000 8082 	beq.w	23c9a <nrf_getsockopt+0x146>
   23b96:	f1b8 0f00 	cmp.w	r8, #0
   23b9a:	f000 8088 	beq.w	23cae <nrf_getsockopt+0x15a>
   23b9e:	206d      	movs	r0, #109	; 0x6d
   23ba0:	e7e3      	b.n	23b6a <nrf_getsockopt+0x16>
   23ba2:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   23ba6:	d024      	beq.n	23bf2 <nrf_getsockopt+0x9e>
   23ba8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   23bac:	d1f7      	bne.n	23b9e <nrf_getsockopt+0x4a>
   23bae:	2f1e      	cmp	r7, #30
   23bb0:	e074      	b.n	23c9c <nrf_getsockopt+0x148>
   23bb2:	2f14      	cmp	r7, #20
   23bb4:	d00a      	beq.n	23bcc <nrf_getsockopt+0x78>
   23bb6:	2f15      	cmp	r7, #21
   23bb8:	d013      	beq.n	23be2 <nrf_getsockopt+0x8e>
   23bba:	2f04      	cmp	r7, #4
   23bbc:	d1ef      	bne.n	23b9e <nrf_getsockopt+0x4a>
   23bbe:	6983      	ldr	r3, [r0, #24]
   23bc0:	6027      	str	r7, [r4, #0]
   23bc2:	6033      	str	r3, [r6, #0]
   23bc4:	2300      	movs	r3, #0
   23bc6:	6183      	str	r3, [r0, #24]
   23bc8:	2000      	movs	r0, #0
   23bca:	e7d2      	b.n	23b72 <nrf_getsockopt+0x1e>
   23bcc:	6822      	ldr	r2, [r4, #0]
   23bce:	f100 0120 	add.w	r1, r0, #32
   23bd2:	2a08      	cmp	r2, #8
   23bd4:	bf28      	it	cs
   23bd6:	2208      	movcs	r2, #8
   23bd8:	6022      	str	r2, [r4, #0]
   23bda:	4630      	mov	r0, r6
   23bdc:	f00c fe31 	bl	30842 <memcpy>
   23be0:	e7f2      	b.n	23bc8 <nrf_getsockopt+0x74>
   23be2:	6822      	ldr	r2, [r4, #0]
   23be4:	f100 0128 	add.w	r1, r0, #40	; 0x28
   23be8:	2a08      	cmp	r2, #8
   23bea:	bf28      	it	cs
   23bec:	2208      	movcs	r2, #8
   23bee:	6022      	str	r2, [r4, #0]
   23bf0:	e7f3      	b.n	23bda <nrf_getsockopt+0x86>
   23bf2:	1e7b      	subs	r3, r7, #1
   23bf4:	2b12      	cmp	r3, #18
   23bf6:	d8d2      	bhi.n	23b9e <nrf_getsockopt+0x4a>
   23bf8:	a201      	add	r2, pc, #4	; (adr r2, 23c00 <nrf_getsockopt+0xac>)
   23bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23bfe:	bf00      	nop
   23c00:	00023c6d 	.word	0x00023c6d
   23c04:	00023c83 	.word	0x00023c83
   23c08:	00023ca1 	.word	0x00023ca1
   23c0c:	00023ca1 	.word	0x00023ca1
   23c10:	00023c63 	.word	0x00023c63
   23c14:	00023c4d 	.word	0x00023c4d
   23c18:	00023b9f 	.word	0x00023b9f
   23c1c:	00023b9f 	.word	0x00023b9f
   23c20:	00023b9f 	.word	0x00023b9f
   23c24:	00023b9f 	.word	0x00023b9f
   23c28:	00023b9f 	.word	0x00023b9f
   23c2c:	00023c59 	.word	0x00023c59
   23c30:	00023b9f 	.word	0x00023b9f
   23c34:	00023ca1 	.word	0x00023ca1
   23c38:	00023ca1 	.word	0x00023ca1
   23c3c:	00023ca1 	.word	0x00023ca1
   23c40:	00023b9f 	.word	0x00023b9f
   23c44:	00023b9f 	.word	0x00023b9f
   23c48:	00023ca1 	.word	0x00023ca1
   23c4c:	2304      	movs	r3, #4
   23c4e:	6023      	str	r3, [r4, #0]
   23c50:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   23c54:	6033      	str	r3, [r6, #0]
   23c56:	e7b7      	b.n	23bc8 <nrf_getsockopt+0x74>
   23c58:	2304      	movs	r3, #4
   23c5a:	6023      	str	r3, [r4, #0]
   23c5c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   23c60:	e7f8      	b.n	23c54 <nrf_getsockopt+0x100>
   23c62:	2304      	movs	r3, #4
   23c64:	6023      	str	r3, [r4, #0]
   23c66:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   23c6a:	e7f3      	b.n	23c54 <nrf_getsockopt+0x100>
   23c6c:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   23c70:	6823      	ldr	r3, [r4, #0]
   23c72:	0092      	lsls	r2, r2, #2
   23c74:	429a      	cmp	r2, r3
   23c76:	bf28      	it	cs
   23c78:	461a      	movcs	r2, r3
   23c7a:	f100 0148 	add.w	r1, r0, #72	; 0x48
   23c7e:	6022      	str	r2, [r4, #0]
   23c80:	e7ab      	b.n	23bda <nrf_getsockopt+0x86>
   23c82:	6c05      	ldr	r5, [r0, #64]	; 0x40
   23c84:	4628      	mov	r0, r5
   23c86:	f7e5 facc 	bl	9222 <strlen>
   23c8a:	6823      	ldr	r3, [r4, #0]
   23c8c:	1c42      	adds	r2, r0, #1
   23c8e:	429a      	cmp	r2, r3
   23c90:	bf28      	it	cs
   23c92:	461a      	movcs	r2, r3
   23c94:	4629      	mov	r1, r5
   23c96:	6022      	str	r2, [r4, #0]
   23c98:	e79f      	b.n	23bda <nrf_getsockopt+0x86>
   23c9a:	2f37      	cmp	r7, #55	; 0x37
   23c9c:	f47f af7f 	bne.w	23b9e <nrf_getsockopt+0x4a>
   23ca0:	6820      	ldr	r0, [r4, #0]
   23ca2:	f00b fd16 	bl	2f6d2 <rpc_client_msg_alloc>
   23ca6:	4605      	mov	r5, r0
   23ca8:	b928      	cbnz	r0, 23cb6 <nrf_getsockopt+0x162>
   23caa:	2069      	movs	r0, #105	; 0x69
   23cac:	e75d      	b.n	23b6a <nrf_getsockopt+0x16>
   23cae:	2f1f      	cmp	r7, #31
   23cb0:	e7f4      	b.n	23c9c <nrf_getsockopt+0x148>
   23cb2:	2f20      	cmp	r7, #32
   23cb4:	e7f2      	b.n	23c9c <nrf_getsockopt+0x148>
   23cb6:	2300      	movs	r3, #0
   23cb8:	2208      	movs	r2, #8
   23cba:	7243      	strb	r3, [r0, #9]
   23cbc:	7202      	strb	r2, [r0, #8]
   23cbe:	7283      	strb	r3, [r0, #10]
   23cc0:	72c3      	strb	r3, [r0, #11]
   23cc2:	f8c0 9010 	str.w	r9, [r0, #16]
   23cc6:	4640      	mov	r0, r8
   23cc8:	f00c fad3 	bl	30272 <nrf_sol_to_rpc_sol>
   23ccc:	6168      	str	r0, [r5, #20]
   23cce:	4638      	mov	r0, r7
   23cd0:	f000 f8e2 	bl	23e98 <nrf_so_to_rpc_so>
   23cd4:	4629      	mov	r1, r5
   23cd6:	61a8      	str	r0, [r5, #24]
   23cd8:	f247 0004 	movw	r0, #28676	; 0x7004
   23cdc:	f8d5 8000 	ldr.w	r8, [r5]
   23ce0:	f00c fafe 	bl	302e0 <req_forward>
   23ce4:	4607      	mov	r7, r0
   23ce6:	b120      	cbz	r0, 23cf2 <nrf_getsockopt+0x19e>
   23ce8:	4640      	mov	r0, r8
   23cea:	f00b fd1e 	bl	2f72a <rpc_client_msg_data_tx_free>
   23cee:	4638      	mov	r0, r7
   23cf0:	e73b      	b.n	23b6a <nrf_getsockopt+0x16>
   23cf2:	686a      	ldr	r2, [r5, #4]
   23cf4:	6823      	ldr	r3, [r4, #0]
   23cf6:	4641      	mov	r1, r8
   23cf8:	429a      	cmp	r2, r3
   23cfa:	bf28      	it	cs
   23cfc:	461a      	movcs	r2, r3
   23cfe:	4630      	mov	r0, r6
   23d00:	6022      	str	r2, [r4, #0]
   23d02:	f00c fd9e 	bl	30842 <memcpy>
   23d06:	4640      	mov	r0, r8
   23d08:	f00b fd0f 	bl	2f72a <rpc_client_msg_data_tx_free>
   23d0c:	e75c      	b.n	23bc8 <nrf_getsockopt+0x74>
   23d0e:	bf00      	nop

00023d10 <rpc_ip_init>:
   23d10:	b508      	push	{r3, lr}
   23d12:	f7ff f921 	bl	22f58 <sock_init>
   23d16:	f7ff f9e9 	bl	230ec <addrinfo_init>
   23d1a:	2200      	movs	r2, #0
   23d1c:	4b05      	ldr	r3, [pc, #20]	; (23d34 <rpc_ip_init+0x24>)
   23d1e:	4806      	ldr	r0, [pc, #24]	; (23d38 <rpc_ip_init+0x28>)
   23d20:	701a      	strb	r2, [r3, #0]
   23d22:	2201      	movs	r2, #1
   23d24:	4611      	mov	r1, r2
   23d26:	f7f9 f93b 	bl	1cfa0 <nrf_modem_os_sem_init>
   23d2a:	2800      	cmp	r0, #0
   23d2c:	bf18      	it	ne
   23d2e:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   23d32:	bd08      	pop	{r3, pc}
   23d34:	20010483 	.word	0x20010483
   23d38:	2000eb08 	.word	0x2000eb08

00023d3c <on_tls_attach_res>:
   23d3c:	b510      	push	{r4, lr}
   23d3e:	6943      	ldr	r3, [r0, #20]
   23d40:	460c      	mov	r4, r1
   23d42:	b15b      	cbz	r3, 23d5c <on_tls_attach_res+0x20>
   23d44:	7f0b      	ldrb	r3, [r1, #28]
   23d46:	f36f 1304 	bfc	r3, #4, #1
   23d4a:	770b      	strb	r3, [r1, #28]
   23d4c:	6940      	ldr	r0, [r0, #20]
   23d4e:	f000 f8af 	bl	23eb0 <rpc_error_to_nrf_errno>
   23d52:	4b03      	ldr	r3, [pc, #12]	; (23d60 <on_tls_attach_res+0x24>)
   23d54:	61a0      	str	r0, [r4, #24]
   23d56:	6818      	ldr	r0, [r3, #0]
   23d58:	f7f9 f956 	bl	1d008 <nrf_modem_os_sem_give>
   23d5c:	2000      	movs	r0, #0
   23d5e:	bd10      	pop	{r4, pc}
   23d60:	2000eb08 	.word	0x2000eb08

00023d64 <on_tls_handshake_ntf>:
   23d64:	b510      	push	{r4, lr}
   23d66:	7f0b      	ldrb	r3, [r1, #28]
   23d68:	460c      	mov	r4, r1
   23d6a:	f36f 1304 	bfc	r3, #4, #1
   23d6e:	770b      	strb	r3, [r1, #28]
   23d70:	6900      	ldr	r0, [r0, #16]
   23d72:	b958      	cbnz	r0, 23d8c <on_tls_handshake_ntf+0x28>
   23d74:	b2db      	uxtb	r3, r3
   23d76:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   23d7a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   23d7e:	770b      	strb	r3, [r1, #28]
   23d80:	4b04      	ldr	r3, [pc, #16]	; (23d94 <on_tls_handshake_ntf+0x30>)
   23d82:	6818      	ldr	r0, [r3, #0]
   23d84:	f7f9 f940 	bl	1d008 <nrf_modem_os_sem_give>
   23d88:	2000      	movs	r0, #0
   23d8a:	bd10      	pop	{r4, pc}
   23d8c:	f000 f890 	bl	23eb0 <rpc_error_to_nrf_errno>
   23d90:	61a0      	str	r0, [r4, #24]
   23d92:	e7f5      	b.n	23d80 <on_tls_handshake_ntf+0x1c>
   23d94:	2000eb08 	.word	0x2000eb08

00023d98 <tls_attach>:
   23d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23d9c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 23e84 <tls_attach+0xec>
   23da0:	4605      	mov	r5, r0
   23da2:	f8d8 0000 	ldr.w	r0, [r8]
   23da6:	9101      	str	r1, [sp, #4]
   23da8:	f7f9 f952 	bl	1d050 <nrf_modem_os_sem_take>
   23dac:	4607      	mov	r7, r0
   23dae:	b150      	cbz	r0, 23dc6 <tls_attach+0x2e>
   23db0:	9b01      	ldr	r3, [sp, #4]
   23db2:	2b00      	cmp	r3, #0
   23db4:	d163      	bne.n	23e7e <tls_attach+0xe6>
   23db6:	2310      	movs	r3, #16
   23db8:	61ab      	str	r3, [r5, #24]
   23dba:	f04f 37ff 	mov.w	r7, #4294967295
   23dbe:	4638      	mov	r0, r7
   23dc0:	b002      	add	sp, #8
   23dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dc6:	6c28      	ldr	r0, [r5, #64]	; 0x40
   23dc8:	b1a8      	cbz	r0, 23df6 <tls_attach+0x5e>
   23dca:	f7e5 fa2a 	bl	9222 <strlen>
   23dce:	1c46      	adds	r6, r0, #1
   23dd0:	4630      	mov	r0, r6
   23dd2:	f00b fc7e 	bl	2f6d2 <rpc_client_msg_alloc>
   23dd6:	4604      	mov	r4, r0
   23dd8:	b978      	cbnz	r0, 23dfa <tls_attach+0x62>
   23dda:	4628      	mov	r0, r5
   23ddc:	f00b fd4a 	bl	2f874 <sock_is_nonblock>
   23de0:	b108      	cbz	r0, 23de6 <tls_attach+0x4e>
   23de2:	2369      	movs	r3, #105	; 0x69
   23de4:	61ab      	str	r3, [r5, #24]
   23de6:	f8d8 0000 	ldr.w	r0, [r8]
   23dea:	f7f9 f90d 	bl	1d008 <nrf_modem_os_sem_give>
   23dee:	2069      	movs	r0, #105	; 0x69
   23df0:	f7f9 f8b8 	bl	1cf64 <nrf_modem_os_errno_set>
   23df4:	e7e1      	b.n	23dba <tls_attach+0x22>
   23df6:	463e      	mov	r6, r7
   23df8:	e7ea      	b.n	23dd0 <tls_attach+0x38>
   23dfa:	682b      	ldr	r3, [r5, #0]
   23dfc:	2204      	movs	r2, #4
   23dfe:	6103      	str	r3, [r0, #16]
   23e00:	2300      	movs	r3, #0
   23e02:	7202      	strb	r2, [r0, #8]
   23e04:	7243      	strb	r3, [r0, #9]
   23e06:	7283      	strb	r3, [r0, #10]
   23e08:	72c3      	strb	r3, [r0, #11]
   23e0a:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   23e0e:	f105 0144 	add.w	r1, r5, #68	; 0x44
   23e12:	3201      	adds	r2, #1
   23e14:	0092      	lsls	r2, r2, #2
   23e16:	6082      	str	r2, [r0, #8]
   23e18:	3014      	adds	r0, #20
   23e1a:	f00c fd12 	bl	30842 <memcpy>
   23e1e:	b1e6      	cbz	r6, 23e5a <tls_attach+0xc2>
   23e20:	4632      	mov	r2, r6
   23e22:	6c29      	ldr	r1, [r5, #64]	; 0x40
   23e24:	6820      	ldr	r0, [r4, #0]
   23e26:	f00c feb2 	bl	30b8e <strncpy>
   23e2a:	6066      	str	r6, [r4, #4]
   23e2c:	7f2b      	ldrb	r3, [r5, #28]
   23e2e:	2004      	movs	r0, #4
   23e30:	f043 0310 	orr.w	r3, r3, #16
   23e34:	4622      	mov	r2, r4
   23e36:	f247 0181 	movw	r1, #28801	; 0x7081
   23e3a:	772b      	strb	r3, [r5, #28]
   23e3c:	f00b fc65 	bl	2f70a <rpc_client_msg_send>
   23e40:	4628      	mov	r0, r5
   23e42:	f00b fd17 	bl	2f874 <sock_is_nonblock>
   23e46:	2800      	cmp	r0, #0
   23e48:	d1b9      	bne.n	23dbe <tls_attach+0x26>
   23e4a:	4628      	mov	r0, r5
   23e4c:	f00b fd0e 	bl	2f86c <sock_is_attaching>
   23e50:	b940      	cbnz	r0, 23e64 <tls_attach+0xcc>
   23e52:	69a8      	ldr	r0, [r5, #24]
   23e54:	2800      	cmp	r0, #0
   23e56:	d0b2      	beq.n	23dbe <tls_attach+0x26>
   23e58:	e7ca      	b.n	23df0 <tls_attach+0x58>
   23e5a:	7026      	strb	r6, [r4, #0]
   23e5c:	7066      	strb	r6, [r4, #1]
   23e5e:	70a6      	strb	r6, [r4, #2]
   23e60:	70e6      	strb	r6, [r4, #3]
   23e62:	e7e2      	b.n	23e2a <tls_attach+0x92>
   23e64:	2002      	movs	r0, #2
   23e66:	a901      	add	r1, sp, #4
   23e68:	f7f8 ffba 	bl	1cde0 <nrf_modem_os_timedwait>
   23e6c:	f110 0f0b 	cmn.w	r0, #11
   23e70:	d005      	beq.n	23e7e <tls_attach+0xe6>
   23e72:	2800      	cmp	r0, #0
   23e74:	d0e9      	beq.n	23e4a <tls_attach+0xb2>
   23e76:	2800      	cmp	r0, #0
   23e78:	bfb8      	it	lt
   23e7a:	4240      	neglt	r0, r0
   23e7c:	e7b8      	b.n	23df0 <tls_attach+0x58>
   23e7e:	2074      	movs	r0, #116	; 0x74
   23e80:	e7b6      	b.n	23df0 <tls_attach+0x58>
   23e82:	bf00      	nop
   23e84:	2000eb08 	.word	0x2000eb08

00023e88 <nrf_af_to_rpc_af>:
   23e88:	2803      	cmp	r0, #3
   23e8a:	bf9c      	itt	ls
   23e8c:	4b01      	ldrls	r3, [pc, #4]	; (23e94 <nrf_af_to_rpc_af+0xc>)
   23e8e:	5618      	ldrsbls	r0, [r3, r0]
   23e90:	4770      	bx	lr
   23e92:	bf00      	nop
   23e94:	0003b3f1 	.word	0x0003b3f1

00023e98 <nrf_so_to_rpc_so>:
   23e98:	3802      	subs	r0, #2
   23e9a:	2835      	cmp	r0, #53	; 0x35
   23e9c:	bf9a      	itte	ls
   23e9e:	4b03      	ldrls	r3, [pc, #12]	; (23eac <nrf_so_to_rpc_so+0x14>)
   23ea0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   23ea4:	f04f 30ff 	movhi.w	r0, #4294967295
   23ea8:	4770      	bx	lr
   23eaa:	bf00      	nop
   23eac:	000329d8 	.word	0x000329d8

00023eb0 <rpc_error_to_nrf_errno>:
   23eb0:	2870      	cmp	r0, #112	; 0x70
   23eb2:	bf9a      	itte	ls
   23eb4:	4b02      	ldrls	r3, [pc, #8]	; (23ec0 <rpc_error_to_nrf_errno+0x10>)
   23eb6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   23eba:	4802      	ldrhi	r0, [pc, #8]	; (23ec4 <rpc_error_to_nrf_errno+0x14>)
   23ebc:	4770      	bx	lr
   23ebe:	bf00      	nop
   23ec0:	00032814 	.word	0x00032814
   23ec4:	baadbaad 	.word	0xbaadbaad

00023ec8 <rpc_gnss_event_handler>:
   23ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23eca:	6804      	ldr	r4, [r0, #0]
   23ecc:	4606      	mov	r6, r0
   23ece:	b13c      	cbz	r4, 23ee0 <rpc_gnss_event_handler+0x18>
   23ed0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   23ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   23ed8:	d104      	bne.n	23ee4 <rpc_gnss_event_handler+0x1c>
   23eda:	4b41      	ldr	r3, [pc, #260]	; (23fe0 <rpc_gnss_event_handler+0x118>)
   23edc:	e9c3 1400 	strd	r1, r4, [r3]
   23ee0:	2000      	movs	r0, #0
   23ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ee4:	4d3f      	ldr	r5, [pc, #252]	; (23fe4 <rpc_gnss_event_handler+0x11c>)
   23ee6:	682b      	ldr	r3, [r5, #0]
   23ee8:	2b00      	cmp	r3, #0
   23eea:	d06f      	beq.n	23fcc <rpc_gnss_event_handler+0x104>
   23eec:	f244 0204 	movw	r2, #16388	; 0x4004
   23ef0:	4291      	cmp	r1, r2
   23ef2:	d80b      	bhi.n	23f0c <rpc_gnss_event_handler+0x44>
   23ef4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   23ef8:	d968      	bls.n	23fcc <rpc_gnss_event_handler+0x104>
   23efa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   23efe:	3902      	subs	r1, #2
   23f00:	2902      	cmp	r1, #2
   23f02:	d82a      	bhi.n	23f5a <rpc_gnss_event_handler+0x92>
   23f04:	e8df f001 	tbb	[pc, r1]
   23f08:	5047      	.short	0x5047
   23f0a:	59          	.byte	0x59
   23f0b:	00          	.byte	0x00
   23f0c:	f244 1301 	movw	r3, #16641	; 0x4101
   23f10:	4299      	cmp	r1, r3
   23f12:	d02e      	beq.n	23f72 <rpc_gnss_event_handler+0xaa>
   23f14:	f244 2301 	movw	r3, #16897	; 0x4201
   23f18:	4299      	cmp	r1, r3
   23f1a:	d157      	bne.n	23fcc <rpc_gnss_event_handler+0x104>
   23f1c:	4e32      	ldr	r6, [pc, #200]	; (23fe8 <rpc_gnss_event_handler+0x120>)
   23f1e:	6830      	ldr	r0, [r6, #0]
   23f20:	b108      	cbz	r0, 23f26 <rpc_gnss_event_handler+0x5e>
   23f22:	f00b fbfc 	bl	2f71e <rpc_client_msg_data_rx_free>
   23f26:	2202      	movs	r2, #2
   23f28:	4b30      	ldr	r3, [pc, #192]	; (23fec <rpc_gnss_event_handler+0x124>)
   23f2a:	6034      	str	r4, [r6, #0]
   23f2c:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   23f30:	701a      	strb	r2, [r3, #0]
   23f32:	4e2f      	ldr	r6, [pc, #188]	; (23ff0 <rpc_gnss_event_handler+0x128>)
   23f34:	f014 0708 	ands.w	r7, r4, #8
   23f38:	682b      	ldr	r3, [r5, #0]
   23f3a:	7832      	ldrb	r2, [r6, #0]
   23f3c:	d025      	beq.n	23f8a <rpc_gnss_event_handler+0xc2>
   23f3e:	b91a      	cbnz	r2, 23f48 <rpc_gnss_event_handler+0x80>
   23f40:	2005      	movs	r0, #5
   23f42:	4798      	blx	r3
   23f44:	2301      	movs	r3, #1
   23f46:	7033      	strb	r3, [r6, #0]
   23f48:	07e3      	lsls	r3, r4, #31
   23f4a:	d502      	bpl.n	23f52 <rpc_gnss_event_handler+0x8a>
   23f4c:	2002      	movs	r0, #2
   23f4e:	682b      	ldr	r3, [r5, #0]
   23f50:	4798      	blx	r3
   23f52:	2001      	movs	r0, #1
   23f54:	682b      	ldr	r3, [r5, #0]
   23f56:	4798      	blx	r3
   23f58:	e7c2      	b.n	23ee0 <rpc_gnss_event_handler+0x18>
   23f5a:	4e23      	ldr	r6, [pc, #140]	; (23fe8 <rpc_gnss_event_handler+0x120>)
   23f5c:	6830      	ldr	r0, [r6, #0]
   23f5e:	b108      	cbz	r0, 23f64 <rpc_gnss_event_handler+0x9c>
   23f60:	f00b fbdd 	bl	2f71e <rpc_client_msg_data_rx_free>
   23f64:	2200      	movs	r2, #0
   23f66:	4b21      	ldr	r3, [pc, #132]	; (23fec <rpc_gnss_event_handler+0x124>)
   23f68:	6034      	str	r4, [r6, #0]
   23f6a:	701a      	strb	r2, [r3, #0]
   23f6c:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   23f70:	e7df      	b.n	23f32 <rpc_gnss_event_handler+0x6a>
   23f72:	4e1d      	ldr	r6, [pc, #116]	; (23fe8 <rpc_gnss_event_handler+0x120>)
   23f74:	6830      	ldr	r0, [r6, #0]
   23f76:	b108      	cbz	r0, 23f7c <rpc_gnss_event_handler+0xb4>
   23f78:	f00b fbd1 	bl	2f71e <rpc_client_msg_data_rx_free>
   23f7c:	2201      	movs	r2, #1
   23f7e:	4b1b      	ldr	r3, [pc, #108]	; (23fec <rpc_gnss_event_handler+0x124>)
   23f80:	6034      	str	r4, [r6, #0]
   23f82:	701a      	strb	r2, [r3, #0]
   23f84:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   23f88:	e7d3      	b.n	23f32 <rpc_gnss_event_handler+0x6a>
   23f8a:	2a00      	cmp	r2, #0
   23f8c:	d0dc      	beq.n	23f48 <rpc_gnss_event_handler+0x80>
   23f8e:	2006      	movs	r0, #6
   23f90:	4798      	blx	r3
   23f92:	7037      	strb	r7, [r6, #0]
   23f94:	e7d8      	b.n	23f48 <rpc_gnss_event_handler+0x80>
   23f96:	4e17      	ldr	r6, [pc, #92]	; (23ff4 <rpc_gnss_event_handler+0x12c>)
   23f98:	6830      	ldr	r0, [r6, #0]
   23f9a:	b108      	cbz	r0, 23fa0 <rpc_gnss_event_handler+0xd8>
   23f9c:	f00b fbbf 	bl	2f71e <rpc_client_msg_data_rx_free>
   23fa0:	2003      	movs	r0, #3
   23fa2:	682b      	ldr	r3, [r5, #0]
   23fa4:	6034      	str	r4, [r6, #0]
   23fa6:	e7d6      	b.n	23f56 <rpc_gnss_event_handler+0x8e>
   23fa8:	4e13      	ldr	r6, [pc, #76]	; (23ff8 <rpc_gnss_event_handler+0x130>)
   23faa:	6830      	ldr	r0, [r6, #0]
   23fac:	b108      	cbz	r0, 23fb2 <rpc_gnss_event_handler+0xea>
   23fae:	f00b fbb6 	bl	2f71e <rpc_client_msg_data_rx_free>
   23fb2:	2004      	movs	r0, #4
   23fb4:	682b      	ldr	r3, [r5, #0]
   23fb6:	6034      	str	r4, [r6, #0]
   23fb8:	e7cd      	b.n	23f56 <rpc_gnss_event_handler+0x8e>
   23fba:	7822      	ldrb	r2, [r4, #0]
   23fbc:	2a03      	cmp	r2, #3
   23fbe:	d805      	bhi.n	23fcc <rpc_gnss_event_handler+0x104>
   23fc0:	e8df f002 	tbb	[pc, r2]
   23fc4:	0c0a0802 	.word	0x0c0a0802
   23fc8:	2007      	movs	r0, #7
   23fca:	4798      	blx	r3
   23fcc:	6830      	ldr	r0, [r6, #0]
   23fce:	f00b fba6 	bl	2f71e <rpc_client_msg_data_rx_free>
   23fd2:	e785      	b.n	23ee0 <rpc_gnss_event_handler+0x18>
   23fd4:	2008      	movs	r0, #8
   23fd6:	e7f8      	b.n	23fca <rpc_gnss_event_handler+0x102>
   23fd8:	2009      	movs	r0, #9
   23fda:	e7f6      	b.n	23fca <rpc_gnss_event_handler+0x102>
   23fdc:	200a      	movs	r0, #10
   23fde:	e7f4      	b.n	23fca <rpc_gnss_event_handler+0x102>
   23fe0:	2000eb1c 	.word	0x2000eb1c
   23fe4:	2000eb0c 	.word	0x2000eb0c
   23fe8:	2000eb18 	.word	0x2000eb18
   23fec:	20010484 	.word	0x20010484
   23ff0:	20010485 	.word	0x20010485
   23ff4:	2000eb14 	.word	0x2000eb14
   23ff8:	2000eb10 	.word	0x2000eb10

00023ffc <rpc_gnss_init>:
   23ffc:	b508      	push	{r3, lr}
   23ffe:	2300      	movs	r3, #0
   24000:	4a09      	ldr	r2, [pc, #36]	; (24028 <rpc_gnss_init+0x2c>)
   24002:	480a      	ldr	r0, [pc, #40]	; (2402c <rpc_gnss_init+0x30>)
   24004:	7013      	strb	r3, [r2, #0]
   24006:	4a0a      	ldr	r2, [pc, #40]	; (24030 <rpc_gnss_init+0x34>)
   24008:	7013      	strb	r3, [r2, #0]
   2400a:	4a0a      	ldr	r2, [pc, #40]	; (24034 <rpc_gnss_init+0x38>)
   2400c:	7013      	strb	r3, [r2, #0]
   2400e:	4a0a      	ldr	r2, [pc, #40]	; (24038 <rpc_gnss_init+0x3c>)
   24010:	7013      	strb	r3, [r2, #0]
   24012:	4a0a      	ldr	r2, [pc, #40]	; (2403c <rpc_gnss_init+0x40>)
   24014:	6013      	str	r3, [r2, #0]
   24016:	2201      	movs	r2, #1
   24018:	4611      	mov	r1, r2
   2401a:	f7f8 ffc1 	bl	1cfa0 <nrf_modem_os_sem_init>
   2401e:	2800      	cmp	r0, #0
   24020:	bf18      	it	ne
   24022:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   24026:	bd08      	pop	{r3, pc}
   24028:	20010485 	.word	0x20010485
   2402c:	2000eb24 	.word	0x2000eb24
   24030:	20010487 	.word	0x20010487
   24034:	20010486 	.word	0x20010486
   24038:	20010484 	.word	0x20010484
   2403c:	2000eb0c 	.word	0x2000eb0c

00024040 <rpc_gnss_deinit>:
   24040:	b510      	push	{r4, lr}
   24042:	4c0b      	ldr	r4, [pc, #44]	; (24070 <rpc_gnss_deinit+0x30>)
   24044:	6820      	ldr	r0, [r4, #0]
   24046:	b118      	cbz	r0, 24050 <rpc_gnss_deinit+0x10>
   24048:	f00b fb69 	bl	2f71e <rpc_client_msg_data_rx_free>
   2404c:	2300      	movs	r3, #0
   2404e:	6023      	str	r3, [r4, #0]
   24050:	4c08      	ldr	r4, [pc, #32]	; (24074 <rpc_gnss_deinit+0x34>)
   24052:	6820      	ldr	r0, [r4, #0]
   24054:	b118      	cbz	r0, 2405e <rpc_gnss_deinit+0x1e>
   24056:	f00b fb62 	bl	2f71e <rpc_client_msg_data_rx_free>
   2405a:	2300      	movs	r3, #0
   2405c:	6023      	str	r3, [r4, #0]
   2405e:	4c06      	ldr	r4, [pc, #24]	; (24078 <rpc_gnss_deinit+0x38>)
   24060:	6820      	ldr	r0, [r4, #0]
   24062:	b118      	cbz	r0, 2406c <rpc_gnss_deinit+0x2c>
   24064:	f00b fb5b 	bl	2f71e <rpc_client_msg_data_rx_free>
   24068:	2300      	movs	r3, #0
   2406a:	6023      	str	r3, [r4, #0]
   2406c:	2000      	movs	r0, #0
   2406e:	bd10      	pop	{r4, pc}
   24070:	2000eb18 	.word	0x2000eb18
   24074:	2000eb14 	.word	0x2000eb14
   24078:	2000eb10 	.word	0x2000eb10

0002407c <modem_off>:
   2407c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2407e:	2501      	movs	r5, #1
   24080:	4c07      	ldr	r4, [pc, #28]	; (240a0 <modem_off+0x24>)
   24082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   24086:	6165      	str	r5, [r4, #20]
   24088:	f00a feaa 	bl	2ede0 <nrf_modem_os_busywait>
   2408c:	2300      	movs	r3, #0
   2408e:	6163      	str	r3, [r4, #20]
   24090:	9301      	str	r3, [sp, #4]
   24092:	6125      	str	r5, [r4, #16]
   24094:	6923      	ldr	r3, [r4, #16]
   24096:	9301      	str	r3, [sp, #4]
   24098:	9b01      	ldr	r3, [sp, #4]
   2409a:	b003      	add	sp, #12
   2409c:	bd30      	pop	{r4, r5, pc}
   2409e:	bf00      	nop
   240a0:	40005600 	.word	0x40005600

000240a4 <atomic_set.constprop.0.isra.0>:
   240a4:	4b03      	ldr	r3, [pc, #12]	; (240b4 <atomic_set.constprop.0.isra.0+0x10>)
   240a6:	e8d3 2fef 	ldaex	r2, [r3]
   240aa:	e8c3 0fe1 	stlex	r1, r0, [r3]
   240ae:	2900      	cmp	r1, #0
   240b0:	d1f9      	bne.n	240a6 <atomic_set.constprop.0.isra.0+0x2>
   240b2:	4770      	bx	lr
   240b4:	2000eb28 	.word	0x2000eb28

000240b8 <nrf_modem_init>:
   240b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   240ba:	4604      	mov	r4, r0
   240bc:	b087      	sub	sp, #28
   240be:	2800      	cmp	r0, #0
   240c0:	d040      	beq.n	24144 <nrf_modem_init+0x8c>
   240c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   240c4:	2b00      	cmp	r3, #0
   240c6:	d040      	beq.n	2414a <nrf_modem_init+0x92>
   240c8:	2601      	movs	r6, #1
   240ca:	4b23      	ldr	r3, [pc, #140]	; (24158 <nrf_modem_init+0xa0>)
   240cc:	e8d3 2fef 	ldaex	r2, [r3]
   240d0:	2a00      	cmp	r2, #0
   240d2:	d103      	bne.n	240dc <nrf_modem_init+0x24>
   240d4:	e8c3 6fe1 	stlex	r1, r6, [r3]
   240d8:	2900      	cmp	r1, #0
   240da:	d1f7      	bne.n	240cc <nrf_modem_init+0x14>
   240dc:	d138      	bne.n	24150 <nrf_modem_init+0x98>
   240de:	4f1f      	ldr	r7, [pc, #124]	; (2415c <nrf_modem_init+0xa4>)
   240e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   240e2:	f000 f83f 	bl	24164 <nrf_modem_fault_handler_set>
   240e6:	f7f9 f82b 	bl	1d140 <nrf_modem_os_init>
   240ea:	20c8      	movs	r0, #200	; 0xc8
   240ec:	66be      	str	r6, [r7, #104]	; 0x68
   240ee:	f00a fe77 	bl	2ede0 <nrf_modem_os_busywait>
   240f2:	6a23      	ldr	r3, [r4, #32]
   240f4:	ad02      	add	r5, sp, #8
   240f6:	f88d 3004 	strb.w	r3, [sp, #4]
   240fa:	4b19      	ldr	r3, [pc, #100]	; (24160 <nrf_modem_init+0xa8>)
   240fc:	9400      	str	r4, [sp, #0]
   240fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   24100:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   24104:	4668      	mov	r0, sp
   24106:	f00b faa3 	bl	2f650 <rpc_init>
   2410a:	4604      	mov	r4, r0
   2410c:	b150      	cbz	r0, 24124 <nrf_modem_init+0x6c>
   2410e:	66fe      	str	r6, [r7, #108]	; 0x6c
   24110:	f7ff ffb4 	bl	2407c <modem_off>
   24114:	f7f9 f82c 	bl	1d170 <nrf_modem_os_shutdown>
   24118:	2000      	movs	r0, #0
   2411a:	f7ff ffc3 	bl	240a4 <atomic_set.constprop.0.isra.0>
   2411e:	4620      	mov	r0, r4
   24120:	b007      	add	sp, #28
   24122:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24124:	4606      	mov	r6, r0
   24126:	f855 3b04 	ldr.w	r3, [r5], #4
   2412a:	4798      	blx	r3
   2412c:	4604      	mov	r4, r0
   2412e:	b910      	cbnz	r0, 24136 <nrf_modem_init+0x7e>
   24130:	3601      	adds	r6, #1
   24132:	2e04      	cmp	r6, #4
   24134:	d1f7      	bne.n	24126 <nrf_modem_init+0x6e>
   24136:	2201      	movs	r2, #1
   24138:	4b08      	ldr	r3, [pc, #32]	; (2415c <nrf_modem_init+0xa4>)
   2413a:	66da      	str	r2, [r3, #108]	; 0x6c
   2413c:	2c00      	cmp	r4, #0
   2413e:	d1e7      	bne.n	24110 <nrf_modem_init+0x58>
   24140:	2002      	movs	r0, #2
   24142:	e7ea      	b.n	2411a <nrf_modem_init+0x62>
   24144:	f06f 040d 	mvn.w	r4, #13
   24148:	e7e9      	b.n	2411e <nrf_modem_init+0x66>
   2414a:	f06f 0415 	mvn.w	r4, #21
   2414e:	e7e6      	b.n	2411e <nrf_modem_init+0x66>
   24150:	f04f 34ff 	mov.w	r4, #4294967295
   24154:	e7e3      	b.n	2411e <nrf_modem_init+0x66>
   24156:	bf00      	nop
   24158:	2000eb28 	.word	0x2000eb28
   2415c:	40005000 	.word	0x40005000
   24160:	00031db0 	.word	0x00031db0

00024164 <nrf_modem_fault_handler_set>:
   24164:	4b01      	ldr	r3, [pc, #4]	; (2416c <nrf_modem_fault_handler_set+0x8>)
   24166:	6018      	str	r0, [r3, #0]
   24168:	4770      	bx	lr
   2416a:	bf00      	nop
   2416c:	2000eb2c 	.word	0x2000eb2c

00024170 <nrf_modem_fault_handler_internal>:
   24170:	b507      	push	{r0, r1, r2, lr}
   24172:	4b04      	ldr	r3, [pc, #16]	; (24184 <nrf_modem_fault_handler_internal+0x14>)
   24174:	e9cd 0100 	strd	r0, r1, [sp]
   24178:	681b      	ldr	r3, [r3, #0]
   2417a:	4668      	mov	r0, sp
   2417c:	4798      	blx	r3
   2417e:	b003      	add	sp, #12
   24180:	f85d fb04 	ldr.w	pc, [sp], #4
   24184:	2000eb2c 	.word	0x2000eb2c

00024188 <nrf_modem_state_set>:
   24188:	4b01      	ldr	r3, [pc, #4]	; (24190 <nrf_modem_state_set+0x8>)
   2418a:	7018      	strb	r0, [r3, #0]
   2418c:	4770      	bx	lr
   2418e:	bf00      	nop
   24190:	20010488 	.word	0x20010488

00024194 <nrf_modem_state_is_initialized>:
   24194:	4b02      	ldr	r3, [pc, #8]	; (241a0 <nrf_modem_state_is_initialized+0xc>)
   24196:	7818      	ldrb	r0, [r3, #0]
   24198:	1e43      	subs	r3, r0, #1
   2419a:	4258      	negs	r0, r3
   2419c:	4158      	adcs	r0, r3
   2419e:	4770      	bx	lr
   241a0:	20010488 	.word	0x20010488

000241a4 <ipc_trace_init>:
   241a4:	2100      	movs	r1, #0
   241a6:	4b07      	ldr	r3, [pc, #28]	; (241c4 <ipc_trace_init+0x20>)
   241a8:	2201      	movs	r2, #1
   241aa:	7019      	strb	r1, [r3, #0]
   241ac:	4b06      	ldr	r3, [pc, #24]	; (241c8 <ipc_trace_init+0x24>)
   241ae:	7019      	strb	r1, [r3, #0]
   241b0:	4b06      	ldr	r3, [pc, #24]	; (241cc <ipc_trace_init+0x28>)
   241b2:	6019      	str	r1, [r3, #0]
   241b4:	4b06      	ldr	r3, [pc, #24]	; (241d0 <ipc_trace_init+0x2c>)
   241b6:	6019      	str	r1, [r3, #0]
   241b8:	4b06      	ldr	r3, [pc, #24]	; (241d4 <ipc_trace_init+0x30>)
   241ba:	6018      	str	r0, [r3, #0]
   241bc:	4806      	ldr	r0, [pc, #24]	; (241d8 <ipc_trace_init+0x34>)
   241be:	f7f8 beef 	b.w	1cfa0 <nrf_modem_os_sem_init>
   241c2:	bf00      	nop
   241c4:	20010489 	.word	0x20010489
   241c8:	2001048a 	.word	0x2001048a
   241cc:	2000eb34 	.word	0x2000eb34
   241d0:	2000eb38 	.word	0x2000eb38
   241d4:	2000eb48 	.word	0x2000eb48
   241d8:	2000eb30 	.word	0x2000eb30

000241dc <ipc_trace_handler>:
   241dc:	b470      	push	{r4, r5, r6}
   241de:	4b2d      	ldr	r3, [pc, #180]	; (24294 <ipc_trace_handler+0xb8>)
   241e0:	681b      	ldr	r3, [r3, #0]
   241e2:	6919      	ldr	r1, [r3, #16]
   241e4:	6958      	ldr	r0, [r3, #20]
   241e6:	7c1a      	ldrb	r2, [r3, #16]
   241e8:	2200      	movs	r2, #0
   241ea:	741a      	strb	r2, [r3, #16]
   241ec:	7c5c      	ldrb	r4, [r3, #17]
   241ee:	745a      	strb	r2, [r3, #17]
   241f0:	7c9c      	ldrb	r4, [r3, #18]
   241f2:	749a      	strb	r2, [r3, #18]
   241f4:	7cdc      	ldrb	r4, [r3, #19]
   241f6:	74da      	strb	r2, [r3, #19]
   241f8:	7d1c      	ldrb	r4, [r3, #20]
   241fa:	751a      	strb	r2, [r3, #20]
   241fc:	7d5c      	ldrb	r4, [r3, #21]
   241fe:	755a      	strb	r2, [r3, #21]
   24200:	7d9c      	ldrb	r4, [r3, #22]
   24202:	2903      	cmp	r1, #3
   24204:	759a      	strb	r2, [r3, #22]
   24206:	7ddc      	ldrb	r4, [r3, #23]
   24208:	75da      	strb	r2, [r3, #23]
   2420a:	d029      	beq.n	24260 <ipc_trace_handler+0x84>
   2420c:	2904      	cmp	r1, #4
   2420e:	d033      	beq.n	24278 <ipc_trace_handler+0x9c>
   24210:	2901      	cmp	r1, #1
   24212:	d12f      	bne.n	24274 <ipc_trace_handler+0x98>
   24214:	6885      	ldr	r5, [r0, #8]
   24216:	4e20      	ldr	r6, [pc, #128]	; (24298 <ipc_trace_handler+0xbc>)
   24218:	4295      	cmp	r5, r2
   2421a:	d110      	bne.n	2423e <ipc_trace_handler+0x62>
   2421c:	2101      	movs	r1, #1
   2421e:	7a1a      	ldrb	r2, [r3, #8]
   24220:	2200      	movs	r2, #0
   24222:	7219      	strb	r1, [r3, #8]
   24224:	7a59      	ldrb	r1, [r3, #9]
   24226:	725a      	strb	r2, [r3, #9]
   24228:	7a99      	ldrb	r1, [r3, #10]
   2422a:	729a      	strb	r2, [r3, #10]
   2422c:	7ada      	ldrb	r2, [r3, #11]
   2422e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24232:	72da      	strb	r2, [r3, #11]
   24234:	4b19      	ldr	r3, [pc, #100]	; (2429c <ipc_trace_handler+0xc0>)
   24236:	bc70      	pop	{r4, r5, r6}
   24238:	6818      	ldr	r0, [r3, #0]
   2423a:	f7f8 bee5 	b.w	1d008 <nrf_modem_os_sem_give>
   2423e:	1c91      	adds	r1, r2, #2
   24240:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24244:	684c      	ldr	r4, [r1, #4]
   24246:	7821      	ldrb	r1, [r4, #0]
   24248:	2962      	cmp	r1, #98	; 0x62
   2424a:	d007      	beq.n	2425c <ipc_trace_handler+0x80>
   2424c:	3963      	subs	r1, #99	; 0x63
   2424e:	bf18      	it	ne
   24250:	2101      	movne	r1, #1
   24252:	0049      	lsls	r1, r1, #1
   24254:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   24258:	3201      	adds	r2, #1
   2425a:	e7dd      	b.n	24218 <ipc_trace_handler+0x3c>
   2425c:	2101      	movs	r1, #1
   2425e:	e7f9      	b.n	24254 <ipc_trace_handler+0x78>
   24260:	7a18      	ldrb	r0, [r3, #8]
   24262:	7219      	strb	r1, [r3, #8]
   24264:	7a59      	ldrb	r1, [r3, #9]
   24266:	725a      	strb	r2, [r3, #9]
   24268:	7a99      	ldrb	r1, [r3, #10]
   2426a:	729a      	strb	r2, [r3, #10]
   2426c:	7ada      	ldrb	r2, [r3, #11]
   2426e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   24272:	72da      	strb	r2, [r3, #11]
   24274:	bc70      	pop	{r4, r5, r6}
   24276:	4770      	bx	lr
   24278:	7a18      	ldrb	r0, [r3, #8]
   2427a:	7219      	strb	r1, [r3, #8]
   2427c:	7a59      	ldrb	r1, [r3, #9]
   2427e:	725a      	strb	r2, [r3, #9]
   24280:	7a99      	ldrb	r1, [r3, #10]
   24282:	729a      	strb	r2, [r3, #10]
   24284:	7ada      	ldrb	r2, [r3, #11]
   24286:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2428a:	72da      	strb	r2, [r3, #11]
   2428c:	2201      	movs	r2, #1
   2428e:	4b04      	ldr	r3, [pc, #16]	; (242a0 <ipc_trace_handler+0xc4>)
   24290:	701a      	strb	r2, [r3, #0]
   24292:	e7ef      	b.n	24274 <ipc_trace_handler+0x98>
   24294:	2000eb48 	.word	0x2000eb48
   24298:	2000eb3c 	.word	0x2000eb3c
   2429c:	2000eb30 	.word	0x2000eb30
   242a0:	2001048a 	.word	0x2001048a

000242a4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   242a4:	4b01      	ldr	r3, [pc, #4]	; (242ac <z_impl_z_errno+0x8>)
   242a6:	6898      	ldr	r0, [r3, #8]
}
   242a8:	3064      	adds	r0, #100	; 0x64
   242aa:	4770      	bx	lr
   242ac:	2000eb4c 	.word	0x2000eb4c

000242b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   242b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b4:	4604      	mov	r4, r0
   242b6:	460e      	mov	r6, r1
   242b8:	af00      	add	r7, sp, #0
	__asm__ volatile(
   242ba:	f04f 0320 	mov.w	r3, #32
   242be:	f3ef 8a11 	mrs	sl, BASEPRI
   242c2:	f383 8812 	msr	BASEPRI_MAX, r3
   242c6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   242ca:	f002 fde7 	bl	26e9c <z_impl_z_current_get>
   242ce:	2c04      	cmp	r4, #4
   242d0:	bf98      	it	ls
   242d2:	4b37      	ldrls	r3, [pc, #220]	; (243b0 <z_fatal_error+0x100>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   242d4:	46e9      	mov	r9, sp
   242d6:	b08c      	sub	sp, #48	; 0x30
   242d8:	4605      	mov	r5, r0
   242da:	466a      	mov	r2, sp
   242dc:	bf94      	ite	ls
   242de:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   242e2:	4b34      	ldrhi	r3, [pc, #208]	; (243b4 <z_fatal_error+0x104>)
   242e4:	6213      	str	r3, [r2, #32]
   242e6:	f240 4302 	movw	r3, #1026	; 0x402
   242ea:	f04f 0b00 	mov.w	fp, #0
   242ee:	8513      	strh	r3, [r2, #40]	; 0x28
   242f0:	4931      	ldr	r1, [pc, #196]	; (243b8 <z_fatal_error+0x108>)
   242f2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 243bc <z_fatal_error+0x10c>
   242f6:	4b32      	ldr	r3, [pc, #200]	; (243c0 <z_fatal_error+0x110>)
   242f8:	e9c2 8406 	strd	r8, r4, [r2, #24]
   242fc:	6151      	str	r1, [r2, #20]
   242fe:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   24302:	f842 3f10 	str.w	r3, [r2, #16]!
   24306:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   2430a:	465b      	mov	r3, fp
   2430c:	482d      	ldr	r0, [pc, #180]	; (243c4 <z_fatal_error+0x114>)
   2430e:	f7eb fa6f 	bl	f7f0 <z_impl_z_log_msg_static_create>
   24312:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24314:	b196      	cbz	r6, 2433c <z_fatal_error+0x8c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24316:	69f3      	ldr	r3, [r6, #28]
   24318:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2431c:	b173      	cbz	r3, 2433c <z_fatal_error+0x8c>
		LOG_ERR("Fault during interrupt handling\n");
   2431e:	b088      	sub	sp, #32
   24320:	466a      	mov	r2, sp
   24322:	4b29      	ldr	r3, [pc, #164]	; (243c8 <z_fatal_error+0x118>)
   24324:	e9c2 3805 	strd	r3, r8, [r2, #20]
   24328:	2303      	movs	r3, #3
   2432a:	f842 3f10 	str.w	r3, [r2, #16]!
   2432e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24332:	465b      	mov	r3, fp
   24334:	4823      	ldr	r0, [pc, #140]	; (243c4 <z_fatal_error+0x114>)
   24336:	f7eb fa5b 	bl	f7f0 <z_impl_z_log_msg_static_create>
   2433a:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2433c:	b12d      	cbz	r5, 2434a <z_fatal_error+0x9a>
   2433e:	4628      	mov	r0, r5
   24340:	f00c f856 	bl	303f0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24344:	b108      	cbz	r0, 2434a <z_fatal_error+0x9a>
   24346:	7803      	ldrb	r3, [r0, #0]
   24348:	b903      	cbnz	r3, 2434c <z_fatal_error+0x9c>
		thread_name = "unknown";
   2434a:	4820      	ldr	r0, [pc, #128]	; (243cc <z_fatal_error+0x11c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2434c:	46e9      	mov	r9, sp
   2434e:	b08a      	sub	sp, #40	; 0x28
   24350:	466a      	mov	r2, sp
   24352:	4b1f      	ldr	r3, [pc, #124]	; (243d0 <z_fatal_error+0x120>)
   24354:	e9c2 5007 	strd	r5, r0, [r2, #28]
   24358:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2435c:	f240 4302 	movw	r3, #1026	; 0x402
   24360:	8493      	strh	r3, [r2, #36]	; 0x24
   24362:	4b1c      	ldr	r3, [pc, #112]	; (243d4 <z_fatal_error+0x124>)
   24364:	f842 3f10 	str.w	r3, [r2, #16]!
   24368:	2300      	movs	r3, #0
   2436a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2436e:	4815      	ldr	r0, [pc, #84]	; (243c4 <z_fatal_error+0x114>)
   24370:	f7eb fa3e 	bl	f7f0 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24374:	4631      	mov	r1, r6
   24376:	46cd      	mov	sp, r9
   24378:	4620      	mov	r0, r4
   2437a:	f7fc ffc1 	bl	21300 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2437e:	2c04      	cmp	r4, #4
   24380:	d10c      	bne.n	2439c <z_fatal_error+0xec>
   24382:	4915      	ldr	r1, [pc, #84]	; (243d8 <z_fatal_error+0x128>)
   24384:	2393      	movs	r3, #147	; 0x93
   24386:	4a15      	ldr	r2, [pc, #84]	; (243dc <z_fatal_error+0x12c>)
   24388:	4815      	ldr	r0, [pc, #84]	; (243e0 <z_fatal_error+0x130>)
   2438a:	f006 fd15 	bl	2adb8 <assert_print>
   2438e:	4815      	ldr	r0, [pc, #84]	; (243e4 <z_fatal_error+0x134>)
   24390:	f006 fd12 	bl	2adb8 <assert_print>
   24394:	2193      	movs	r1, #147	; 0x93
   24396:	4811      	ldr	r0, [pc, #68]	; (243dc <z_fatal_error+0x12c>)
   24398:	f006 fd07 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   2439c:	f38a 8811 	msr	BASEPRI, sl
   243a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   243a4:	4628      	mov	r0, r5
   243a6:	f7ed fdbd 	bl	11f24 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   243aa:	46bd      	mov	sp, r7
   243ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243b0:	00032ab4 	.word	0x00032ab4
   243b4:	0003b3f5 	.word	0x0003b3f5
   243b8:	0003b403 	.word	0x0003b403
   243bc:	0003b52e 	.word	0x0003b52e
   243c0:	01000006 	.word	0x01000006
   243c4:	00031cd4 	.word	0x00031cd4
   243c8:	0003b42f 	.word	0x0003b42f
   243cc:	000359f0 	.word	0x000359f0
   243d0:	0003b454 	.word	0x0003b454
   243d4:	01000005 	.word	0x01000005
   243d8:	0003b492 	.word	0x0003b492
   243dc:	0003b470 	.word	0x0003b470
   243e0:	00033bc2 	.word	0x00033bc2
   243e4:	0003b4af 	.word	0x0003b4af

000243e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243e8:	4b10      	ldr	r3, [pc, #64]	; (2442c <z_sys_init_run_level+0x44>)
{
   243ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   243f0:	3001      	adds	r0, #1
   243f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   243f6:	42a6      	cmp	r6, r4
   243f8:	d800      	bhi.n	243fc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   243fa:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   243fc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   24400:	b18d      	cbz	r5, 24426 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   24402:	4628      	mov	r0, r5
   24404:	4798      	blx	r3
			if (rc != 0) {
   24406:	b138      	cbz	r0, 24418 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24408:	2800      	cmp	r0, #0
   2440a:	bfb8      	it	lt
   2440c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   2440e:	28ff      	cmp	r0, #255	; 0xff
   24410:	bfa8      	it	ge
   24412:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24414:	68eb      	ldr	r3, [r5, #12]
   24416:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24418:	68ea      	ldr	r2, [r5, #12]
   2441a:	7853      	ldrb	r3, [r2, #1]
   2441c:	f043 0301 	orr.w	r3, r3, #1
   24420:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24422:	3408      	adds	r4, #8
   24424:	e7e7      	b.n	243f6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   24426:	4798      	blx	r3
   24428:	e7fb      	b.n	24422 <z_sys_init_run_level+0x3a>
   2442a:	bf00      	nop
   2442c:	00032ac8 	.word	0x00032ac8

00024430 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24430:	2201      	movs	r2, #1
{
   24432:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24434:	4b09      	ldr	r3, [pc, #36]	; (2445c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24436:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24438:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2443a:	f7ff ffd5 	bl	243e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2443e:	f003 fdd3 	bl	27fe8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24442:	2004      	movs	r0, #4
   24444:	f7ff ffd0 	bl	243e8 <z_sys_init_run_level>

	z_init_static_threads();
   24448:	f000 fb66 	bl	24b18 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   2444c:	f7e7 f9d2 	bl	b7f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24450:	4a03      	ldr	r2, [pc, #12]	; (24460 <bg_thread_main+0x30>)
   24452:	7b13      	ldrb	r3, [r2, #12]
   24454:	f023 0301 	bic.w	r3, r3, #1
   24458:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2445a:	bd08      	pop	{r3, pc}
   2445c:	2001048b 	.word	0x2001048b
   24460:	2000de48 	.word	0x2000de48

00024464 <z_bss_zero>:
{
   24464:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24466:	4803      	ldr	r0, [pc, #12]	; (24474 <z_bss_zero+0x10>)
   24468:	4a03      	ldr	r2, [pc, #12]	; (24478 <z_bss_zero+0x14>)
   2446a:	2100      	movs	r1, #0
   2446c:	1a12      	subs	r2, r2, r0
   2446e:	f00b ff8a 	bl	30386 <z_early_memset>
}
   24472:	bd08      	pop	{r3, pc}
   24474:	2000d130 	.word	0x2000d130
   24478:	20010490 	.word	0x20010490

0002447c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2447c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2447e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   24480:	4e13      	ldr	r6, [pc, #76]	; (244d0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   24482:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   24484:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   24488:	2300      	movs	r3, #0
{
   2448a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2448c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24490:	220f      	movs	r2, #15
   24492:	9301      	str	r3, [sp, #4]
   24494:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24498:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   2449a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2449e:	4d0d      	ldr	r5, [pc, #52]	; (244d4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   244a0:	490d      	ldr	r1, [pc, #52]	; (244d8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   244a2:	fb03 5500 	mla	r5, r3, r0, r5
{
   244a6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   244a8:	fb02 1100 	mla	r1, r2, r0, r1
   244ac:	4b0b      	ldr	r3, [pc, #44]	; (244dc <z_init_cpu+0x60>)
   244ae:	4630      	mov	r0, r6
   244b0:	9500      	str	r5, [sp, #0]
   244b2:	f000 fa97 	bl	249e4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   244b6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   244b8:	742c      	strb	r4, [r5, #16]
   244ba:	f023 0304 	bic.w	r3, r3, #4
   244be:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   244c0:	4b07      	ldr	r3, [pc, #28]	; (244e0 <z_init_cpu+0x64>)
   244c2:	3401      	adds	r4, #1
   244c4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   244c8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   244ca:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   244cc:	b006      	add	sp, #24
   244ce:	bd70      	pop	{r4, r5, r6, pc}
   244d0:	2000ddc0 	.word	0x2000ddc0
   244d4:	2000eb4c 	.word	0x2000eb4c
   244d8:	200125e8 	.word	0x200125e8
   244dc:	00024c69 	.word	0x00024c69
   244e0:	20011de8 	.word	0x20011de8

000244e4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   244e4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   244e6:	2000      	movs	r0, #0
{
   244e8:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   244ea:	f7ff ff7d 	bl	243e8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   244ee:	4b2f      	ldr	r3, [pc, #188]	; (245ac <z_cstart+0xc8>)
	uint32_t msp =
   244f0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   244f4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   244f8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   244fc:	2400      	movs	r4, #0
   244fe:	23e0      	movs	r3, #224	; 0xe0
   24500:	4d2b      	ldr	r5, [pc, #172]	; (245b0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24502:	4e2c      	ldr	r6, [pc, #176]	; (245b4 <z_cstart+0xd0>)
   24504:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24508:	77ec      	strb	r4, [r5, #31]
   2450a:	762c      	strb	r4, [r5, #24]
   2450c:	766c      	strb	r4, [r5, #25]
   2450e:	76ac      	strb	r4, [r5, #26]
   24510:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24516:	4f28      	ldr	r7, [pc, #160]	; (245b8 <z_cstart+0xd4>)
   24518:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2451c:	626b      	str	r3, [r5, #36]	; 0x24
   2451e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24522:	f7ed fc63 	bl	11dec <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24526:	f7ec feb1 	bl	1128c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2452a:	f04f 33ff 	mov.w	r3, #4294967295
   2452e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24530:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24532:	f7ed fee1 	bl	122f8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24536:	f7ed fd0b 	bl	11f50 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2453a:	f7ea ff4b 	bl	f3d4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2453e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   24542:	ad06      	add	r5, sp, #24
   24544:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   24546:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2454a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   2454e:	f003 fd2d 	bl	27fac <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   24552:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24554:	f00b ff0b 	bl	3036e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24558:	2001      	movs	r0, #1
   2455a:	f7ff ff45 	bl	243e8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2455e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   24560:	4d16      	ldr	r5, [pc, #88]	; (245bc <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24562:	f7ff ff41 	bl	243e8 <z_sys_init_run_level>
	z_sched_init();
   24566:	f002 fb23 	bl	26bb0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2456a:	4b15      	ldr	r3, [pc, #84]	; (245c0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2456c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2456e:	9305      	str	r3, [sp, #20]
   24570:	2301      	movs	r3, #1
   24572:	4914      	ldr	r1, [pc, #80]	; (245c4 <z_cstart+0xe0>)
   24574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   24578:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2457c:	4628      	mov	r0, r5
   2457e:	463b      	mov	r3, r7
   24580:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24584:	9400      	str	r4, [sp, #0]
   24586:	f000 fa2d 	bl	249e4 <z_setup_new_thread>
   2458a:	4606      	mov	r6, r0
   2458c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2458e:	4628      	mov	r0, r5
   24590:	f022 0204 	bic.w	r2, r2, #4
   24594:	736a      	strb	r2, [r5, #13]
   24596:	f001 fcf1 	bl	25f7c <z_ready_thread>
	z_init_cpu(0);
   2459a:	4620      	mov	r0, r4
   2459c:	f7ff ff6e 	bl	2447c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   245a0:	463a      	mov	r2, r7
   245a2:	4631      	mov	r1, r6
   245a4:	4628      	mov	r0, r5
   245a6:	f7ec fffb 	bl	115a0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   245aa:	bf00      	nop
   245ac:	20011de8 	.word	0x20011de8
   245b0:	e000ed00 	.word	0xe000ed00
   245b4:	2000eb4c 	.word	0x2000eb4c
   245b8:	00024431 	.word	0x00024431
   245bc:	2000de48 	.word	0x2000de48
   245c0:	0003b53c 	.word	0x0003b53c
   245c4:	20012728 	.word	0x20012728

000245c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   245c8:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   245ca:	4c0d      	ldr	r4, [pc, #52]	; (24600 <statics_init+0x38>)
   245cc:	4d0d      	ldr	r5, [pc, #52]	; (24604 <statics_init+0x3c>)
   245ce:	42ac      	cmp	r4, r5
   245d0:	d913      	bls.n	245fa <statics_init+0x32>
   245d2:	490d      	ldr	r1, [pc, #52]	; (24608 <statics_init+0x40>)
   245d4:	2317      	movs	r3, #23
   245d6:	4a0d      	ldr	r2, [pc, #52]	; (2460c <statics_init+0x44>)
   245d8:	480d      	ldr	r0, [pc, #52]	; (24610 <statics_init+0x48>)
   245da:	f006 fbed 	bl	2adb8 <assert_print>
   245de:	480d      	ldr	r0, [pc, #52]	; (24614 <statics_init+0x4c>)
   245e0:	f006 fbea 	bl	2adb8 <assert_print>
   245e4:	2117      	movs	r1, #23
   245e6:	4809      	ldr	r0, [pc, #36]	; (2460c <statics_init+0x44>)
   245e8:	f006 fbdf 	bl	2adaa <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   245ec:	4620      	mov	r0, r4
   245ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   245f2:	f00b fecc 	bl	3038e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   245f6:	3418      	adds	r4, #24
   245f8:	e7e9      	b.n	245ce <statics_init+0x6>
   245fa:	d3f7      	bcc.n	245ec <statics_init+0x24>
		}
	}
	return 0;
}
   245fc:	2000      	movs	r0, #0
   245fe:	bd38      	pop	{r3, r4, r5, pc}
   24600:	2000cdc0 	.word	0x2000cdc0
   24604:	2000cdf0 	.word	0x2000cdf0
   24608:	0003b566 	.word	0x0003b566
   2460c:	0003b544 	.word	0x0003b544
   24610:	00033bc2 	.word	0x00033bc2
   24614:	000342e3 	.word	0x000342e3

00024618 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2461c:	b085      	sub	sp, #20
   2461e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24622:	4680      	mov	r8, r0
   24624:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24626:	4648      	mov	r0, r9
   24628:	4659      	mov	r1, fp
{
   2462a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2462c:	f00b ffe0 	bl	305f0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24630:	f1bb 3fff 	cmp.w	fp, #4294967295
   24634:	bf08      	it	eq
   24636:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2463a:	4606      	mov	r6, r0
   2463c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2463e:	bf04      	itt	eq
   24640:	f04f 36ff 	moveq.w	r6, #4294967295
   24644:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24648:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   2464c:	f04f 0320 	mov.w	r3, #32
   24650:	f3ef 8511 	mrs	r5, BASEPRI
   24654:	f383 8812 	msr	BASEPRI_MAX, r3
   24658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2465c:	4620      	mov	r0, r4
   2465e:	f000 fadf 	bl	24c20 <z_spin_lock_valid>
   24662:	b960      	cbnz	r0, 2467e <k_heap_aligned_alloc+0x66>
   24664:	2394      	movs	r3, #148	; 0x94
   24666:	4a33      	ldr	r2, [pc, #204]	; (24734 <k_heap_aligned_alloc+0x11c>)
   24668:	4933      	ldr	r1, [pc, #204]	; (24738 <k_heap_aligned_alloc+0x120>)
   2466a:	4834      	ldr	r0, [pc, #208]	; (2473c <k_heap_aligned_alloc+0x124>)
   2466c:	f006 fba4 	bl	2adb8 <assert_print>
   24670:	4621      	mov	r1, r4
   24672:	4833      	ldr	r0, [pc, #204]	; (24740 <k_heap_aligned_alloc+0x128>)
   24674:	f006 fba0 	bl	2adb8 <assert_print>
   24678:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2467a:	482e      	ldr	r0, [pc, #184]	; (24734 <k_heap_aligned_alloc+0x11c>)
   2467c:	e031      	b.n	246e2 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   2467e:	4620      	mov	r0, r4
   24680:	f000 faea 	bl	24c58 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24684:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24688:	b113      	cbz	r3, 24690 <k_heap_aligned_alloc+0x78>
   2468a:	ea5b 0909 	orrs.w	r9, fp, r9
   2468e:	d11d      	bne.n	246cc <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24690:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24694:	4652      	mov	r2, sl
   24696:	4640      	mov	r0, r8
   24698:	9903      	ldr	r1, [sp, #12]
   2469a:	f7e9 fa0f 	bl	dabc <sys_heap_aligned_alloc>
   2469e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   246a0:	f002 ff9a 	bl	275d8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   246a4:	f1b9 0f00 	cmp.w	r9, #0
   246a8:	d01d      	beq.n	246e6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   246aa:	4620      	mov	r0, r4
   246ac:	f000 fac6 	bl	24c3c <z_spin_unlock_valid>
   246b0:	2800      	cmp	r0, #0
   246b2:	d137      	bne.n	24724 <k_heap_aligned_alloc+0x10c>
   246b4:	23c2      	movs	r3, #194	; 0xc2
   246b6:	4a1f      	ldr	r2, [pc, #124]	; (24734 <k_heap_aligned_alloc+0x11c>)
   246b8:	4922      	ldr	r1, [pc, #136]	; (24744 <k_heap_aligned_alloc+0x12c>)
   246ba:	4820      	ldr	r0, [pc, #128]	; (2473c <k_heap_aligned_alloc+0x124>)
   246bc:	f006 fb7c 	bl	2adb8 <assert_print>
   246c0:	4621      	mov	r1, r4
   246c2:	4821      	ldr	r0, [pc, #132]	; (24748 <k_heap_aligned_alloc+0x130>)
   246c4:	f006 fb78 	bl	2adb8 <assert_print>
   246c8:	21c2      	movs	r1, #194	; 0xc2
   246ca:	e7d6      	b.n	2467a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   246cc:	491f      	ldr	r1, [pc, #124]	; (2474c <k_heap_aligned_alloc+0x134>)
   246ce:	234b      	movs	r3, #75	; 0x4b
   246d0:	4a1f      	ldr	r2, [pc, #124]	; (24750 <k_heap_aligned_alloc+0x138>)
   246d2:	481a      	ldr	r0, [pc, #104]	; (2473c <k_heap_aligned_alloc+0x124>)
   246d4:	f006 fb70 	bl	2adb8 <assert_print>
   246d8:	481e      	ldr	r0, [pc, #120]	; (24754 <k_heap_aligned_alloc+0x13c>)
   246da:	f006 fb6d 	bl	2adb8 <assert_print>
   246de:	214b      	movs	r1, #75	; 0x4b
   246e0:	481b      	ldr	r0, [pc, #108]	; (24750 <k_heap_aligned_alloc+0x138>)
   246e2:	f006 fb62 	bl	2adaa <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   246e6:	1a30      	subs	r0, r6, r0
   246e8:	eb67 0101 	sbc.w	r1, r7, r1
   246ec:	2801      	cmp	r0, #1
   246ee:	f171 0300 	sbcs.w	r3, r1, #0
   246f2:	dbda      	blt.n	246aa <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   246f4:	e9cd 0100 	strd	r0, r1, [sp]
   246f8:	465a      	mov	r2, fp
   246fa:	4629      	mov	r1, r5
   246fc:	4620      	mov	r0, r4
   246fe:	f001 ff87 	bl	26610 <z_pend_curr>
   24702:	f04f 0320 	mov.w	r3, #32
   24706:	f3ef 8511 	mrs	r5, BASEPRI
   2470a:	f383 8812 	msr	BASEPRI_MAX, r3
   2470e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24712:	4620      	mov	r0, r4
   24714:	f000 fa84 	bl	24c20 <z_spin_lock_valid>
   24718:	2800      	cmp	r0, #0
   2471a:	d0a3      	beq.n	24664 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   2471c:	4620      	mov	r0, r4
   2471e:	f000 fa9b 	bl	24c58 <z_spin_lock_set_owner>
	return k;
   24722:	e7b7      	b.n	24694 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   24724:	f385 8811 	msr	BASEPRI, r5
   24728:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2472c:	4648      	mov	r0, r9
   2472e:	b005      	add	sp, #20
   24730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24734:	000340d9 	.word	0x000340d9
   24738:	00034132 	.word	0x00034132
   2473c:	00033bc2 	.word	0x00033bc2
   24740:	00034147 	.word	0x00034147
   24744:	00034106 	.word	0x00034106
   24748:	0003411d 	.word	0x0003411d
   2474c:	0003b57c 	.word	0x0003b57c
   24750:	0003b544 	.word	0x0003b544
   24754:	00034662 	.word	0x00034662

00024758 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2475a:	4605      	mov	r5, r0
   2475c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2475e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   24762:	f04f 0320 	mov.w	r3, #32
   24766:	f3ef 8711 	mrs	r7, BASEPRI
   2476a:	f383 8812 	msr	BASEPRI_MAX, r3
   2476e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24772:	4620      	mov	r0, r4
   24774:	f000 fa54 	bl	24c20 <z_spin_lock_valid>
   24778:	b968      	cbnz	r0, 24796 <k_heap_free+0x3e>
   2477a:	2394      	movs	r3, #148	; 0x94
   2477c:	4a19      	ldr	r2, [pc, #100]	; (247e4 <k_heap_free+0x8c>)
   2477e:	491a      	ldr	r1, [pc, #104]	; (247e8 <k_heap_free+0x90>)
   24780:	481a      	ldr	r0, [pc, #104]	; (247ec <k_heap_free+0x94>)
   24782:	f006 fb19 	bl	2adb8 <assert_print>
   24786:	4621      	mov	r1, r4
   24788:	4819      	ldr	r0, [pc, #100]	; (247f0 <k_heap_free+0x98>)
   2478a:	f006 fb15 	bl	2adb8 <assert_print>
   2478e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24790:	4814      	ldr	r0, [pc, #80]	; (247e4 <k_heap_free+0x8c>)
   24792:	f006 fb0a 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   24796:	4620      	mov	r0, r4
   24798:	f000 fa5e 	bl	24c58 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2479c:	4628      	mov	r0, r5
   2479e:	4631      	mov	r1, r6
   247a0:	f7e9 f946 	bl	da30 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   247a4:	f105 000c 	add.w	r0, r5, #12
   247a8:	f00b ff08 	bl	305bc <z_unpend_all>
   247ac:	b128      	cbz	r0, 247ba <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   247ae:	4639      	mov	r1, r7
   247b0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   247b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   247b6:	f001 bc6f 	b.w	26098 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247ba:	4620      	mov	r0, r4
   247bc:	f000 fa3e 	bl	24c3c <z_spin_unlock_valid>
   247c0:	b958      	cbnz	r0, 247da <k_heap_free+0x82>
   247c2:	23c2      	movs	r3, #194	; 0xc2
   247c4:	4a07      	ldr	r2, [pc, #28]	; (247e4 <k_heap_free+0x8c>)
   247c6:	490b      	ldr	r1, [pc, #44]	; (247f4 <k_heap_free+0x9c>)
   247c8:	4808      	ldr	r0, [pc, #32]	; (247ec <k_heap_free+0x94>)
   247ca:	f006 faf5 	bl	2adb8 <assert_print>
   247ce:	4621      	mov	r1, r4
   247d0:	4809      	ldr	r0, [pc, #36]	; (247f8 <k_heap_free+0xa0>)
   247d2:	f006 faf1 	bl	2adb8 <assert_print>
   247d6:	21c2      	movs	r1, #194	; 0xc2
   247d8:	e7da      	b.n	24790 <k_heap_free+0x38>
	__asm__ volatile(
   247da:	f387 8811 	msr	BASEPRI, r7
   247de:	f3bf 8f6f 	isb	sy
}
   247e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   247e4:	000340d9 	.word	0x000340d9
   247e8:	00034132 	.word	0x00034132
   247ec:	00033bc2 	.word	0x00033bc2
   247f0:	00034147 	.word	0x00034147
   247f4:	00034106 	.word	0x00034106
   247f8:	0003411d 	.word	0x0003411d

000247fc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   247fc:	2000      	movs	r0, #0
{
   247fe:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24800:	4c0c      	ldr	r4, [pc, #48]	; (24834 <init_mem_slab_module+0x38>)
   24802:	4d0d      	ldr	r5, [pc, #52]	; (24838 <init_mem_slab_module+0x3c>)
   24804:	42ac      	cmp	r4, r5
   24806:	d913      	bls.n	24830 <init_mem_slab_module+0x34>
   24808:	490c      	ldr	r1, [pc, #48]	; (2483c <init_mem_slab_module+0x40>)
   2480a:	233c      	movs	r3, #60	; 0x3c
   2480c:	4a0c      	ldr	r2, [pc, #48]	; (24840 <init_mem_slab_module+0x44>)
   2480e:	480d      	ldr	r0, [pc, #52]	; (24844 <init_mem_slab_module+0x48>)
   24810:	f006 fad2 	bl	2adb8 <assert_print>
   24814:	480c      	ldr	r0, [pc, #48]	; (24848 <init_mem_slab_module+0x4c>)
   24816:	f006 facf 	bl	2adb8 <assert_print>
   2481a:	213c      	movs	r1, #60	; 0x3c
   2481c:	4808      	ldr	r0, [pc, #32]	; (24840 <init_mem_slab_module+0x44>)
   2481e:	f006 fac4 	bl	2adaa <assert_post_action>
		rc = create_free_list(slab);
   24822:	4620      	mov	r0, r4
   24824:	f00b fdc5 	bl	303b2 <create_free_list>
		if (rc < 0) {
   24828:	2800      	cmp	r0, #0
   2482a:	db02      	blt.n	24832 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2482c:	3420      	adds	r4, #32
   2482e:	e7e9      	b.n	24804 <init_mem_slab_module+0x8>
   24830:	d3f7      	bcc.n	24822 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   24832:	bd38      	pop	{r3, r4, r5, pc}
   24834:	2000cd60 	.word	0x2000cd60
   24838:	2000cdc0 	.word	0x2000cdc0
   2483c:	0003b5e7 	.word	0x0003b5e7
   24840:	0003b5c2 	.word	0x0003b5c2
   24844:	00033bc2 	.word	0x00033bc2
   24848:	000342e3 	.word	0x000342e3

0002484c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2484c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24850:	4604      	mov	r4, r0
   24852:	460e      	mov	r6, r1
   24854:	4690      	mov	r8, r2
   24856:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24858:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2485c:	f04f 0320 	mov.w	r3, #32
   24860:	f3ef 8911 	mrs	r9, BASEPRI
   24864:	f383 8812 	msr	BASEPRI_MAX, r3
   24868:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2486c:	4628      	mov	r0, r5
   2486e:	f000 f9d7 	bl	24c20 <z_spin_lock_valid>
   24872:	b968      	cbnz	r0, 24890 <k_mem_slab_alloc+0x44>
   24874:	2394      	movs	r3, #148	; 0x94
   24876:	4a23      	ldr	r2, [pc, #140]	; (24904 <k_mem_slab_alloc+0xb8>)
   24878:	4923      	ldr	r1, [pc, #140]	; (24908 <k_mem_slab_alloc+0xbc>)
   2487a:	4824      	ldr	r0, [pc, #144]	; (2490c <k_mem_slab_alloc+0xc0>)
   2487c:	f006 fa9c 	bl	2adb8 <assert_print>
   24880:	4629      	mov	r1, r5
   24882:	4823      	ldr	r0, [pc, #140]	; (24910 <k_mem_slab_alloc+0xc4>)
   24884:	f006 fa98 	bl	2adb8 <assert_print>
   24888:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2488a:	481e      	ldr	r0, [pc, #120]	; (24904 <k_mem_slab_alloc+0xb8>)
   2488c:	f006 fa8d 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   24890:	4628      	mov	r0, r5
   24892:	f000 f9e1 	bl	24c58 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24896:	69a3      	ldr	r3, [r4, #24]
   24898:	b1b3      	cbz	r3, 248c8 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   2489a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2489c:	681b      	ldr	r3, [r3, #0]
   2489e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   248a0:	69e3      	ldr	r3, [r4, #28]
   248a2:	3301      	adds	r3, #1
   248a4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   248a6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   248a8:	4628      	mov	r0, r5
   248aa:	f000 f9c7 	bl	24c3c <z_spin_unlock_valid>
   248ae:	bb18      	cbnz	r0, 248f8 <k_mem_slab_alloc+0xac>
   248b0:	23c2      	movs	r3, #194	; 0xc2
   248b2:	4a14      	ldr	r2, [pc, #80]	; (24904 <k_mem_slab_alloc+0xb8>)
   248b4:	4917      	ldr	r1, [pc, #92]	; (24914 <k_mem_slab_alloc+0xc8>)
   248b6:	4815      	ldr	r0, [pc, #84]	; (2490c <k_mem_slab_alloc+0xc0>)
   248b8:	f006 fa7e 	bl	2adb8 <assert_print>
   248bc:	4629      	mov	r1, r5
   248be:	4816      	ldr	r0, [pc, #88]	; (24918 <k_mem_slab_alloc+0xcc>)
   248c0:	f006 fa7a 	bl	2adb8 <assert_print>
   248c4:	21c2      	movs	r1, #194	; 0xc2
   248c6:	e7e0      	b.n	2488a <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   248c8:	ea58 0207 	orrs.w	r2, r8, r7
   248cc:	d103      	bne.n	248d6 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   248ce:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   248d2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   248d4:	e7e8      	b.n	248a8 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   248d6:	4622      	mov	r2, r4
   248d8:	4649      	mov	r1, r9
   248da:	4628      	mov	r0, r5
   248dc:	e9cd 8700 	strd	r8, r7, [sp]
   248e0:	f001 fe96 	bl	26610 <z_pend_curr>
		if (result == 0) {
   248e4:	4604      	mov	r4, r0
   248e6:	b918      	cbnz	r0, 248f0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   248e8:	4b0c      	ldr	r3, [pc, #48]	; (2491c <k_mem_slab_alloc+0xd0>)
   248ea:	689b      	ldr	r3, [r3, #8]
   248ec:	695b      	ldr	r3, [r3, #20]
   248ee:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   248f0:	4620      	mov	r0, r4
   248f2:	b003      	add	sp, #12
   248f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   248f8:	f389 8811 	msr	BASEPRI, r9
   248fc:	f3bf 8f6f 	isb	sy
	return result;
   24900:	e7f6      	b.n	248f0 <k_mem_slab_alloc+0xa4>
   24902:	bf00      	nop
   24904:	000340d9 	.word	0x000340d9
   24908:	00034132 	.word	0x00034132
   2490c:	00033bc2 	.word	0x00033bc2
   24910:	00034147 	.word	0x00034147
   24914:	00034106 	.word	0x00034106
   24918:	0003411d 	.word	0x0003411d
   2491c:	2000eb4c 	.word	0x2000eb4c

00024920 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24924:	4604      	mov	r4, r0
   24926:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24928:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2492c:	f04f 0320 	mov.w	r3, #32
   24930:	f3ef 8711 	mrs	r7, BASEPRI
   24934:	f383 8812 	msr	BASEPRI_MAX, r3
   24938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2493c:	4628      	mov	r0, r5
   2493e:	f000 f96f 	bl	24c20 <z_spin_lock_valid>
   24942:	b968      	cbnz	r0, 24960 <k_mem_slab_free+0x40>
   24944:	2394      	movs	r3, #148	; 0x94
   24946:	4a21      	ldr	r2, [pc, #132]	; (249cc <k_mem_slab_free+0xac>)
   24948:	4921      	ldr	r1, [pc, #132]	; (249d0 <k_mem_slab_free+0xb0>)
   2494a:	4822      	ldr	r0, [pc, #136]	; (249d4 <k_mem_slab_free+0xb4>)
   2494c:	f006 fa34 	bl	2adb8 <assert_print>
   24950:	4629      	mov	r1, r5
   24952:	4821      	ldr	r0, [pc, #132]	; (249d8 <k_mem_slab_free+0xb8>)
   24954:	f006 fa30 	bl	2adb8 <assert_print>
   24958:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2495a:	481c      	ldr	r0, [pc, #112]	; (249cc <k_mem_slab_free+0xac>)
   2495c:	f006 fa25 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   24960:	4628      	mov	r0, r5
   24962:	f000 f979 	bl	24c58 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24966:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2496a:	f1b8 0f00 	cmp.w	r8, #0
   2496e:	d10f      	bne.n	24990 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24970:	4620      	mov	r0, r4
   24972:	f002 f8cd 	bl	26b10 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24976:	b158      	cbz	r0, 24990 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24978:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2497a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2497e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24980:	f001 fafc 	bl	25f7c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24984:	4639      	mov	r1, r7
   24986:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2498c:	f001 bb84 	b.w	26098 <z_reschedule>
	**(char ***) mem = slab->free_list;
   24990:	6833      	ldr	r3, [r6, #0]
   24992:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24994:	4628      	mov	r0, r5
   24996:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24998:	6833      	ldr	r3, [r6, #0]
   2499a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2499c:	69e3      	ldr	r3, [r4, #28]
   2499e:	3b01      	subs	r3, #1
   249a0:	61e3      	str	r3, [r4, #28]
   249a2:	f000 f94b 	bl	24c3c <z_spin_unlock_valid>
   249a6:	b958      	cbnz	r0, 249c0 <k_mem_slab_free+0xa0>
   249a8:	23c2      	movs	r3, #194	; 0xc2
   249aa:	4a08      	ldr	r2, [pc, #32]	; (249cc <k_mem_slab_free+0xac>)
   249ac:	490b      	ldr	r1, [pc, #44]	; (249dc <k_mem_slab_free+0xbc>)
   249ae:	4809      	ldr	r0, [pc, #36]	; (249d4 <k_mem_slab_free+0xb4>)
   249b0:	f006 fa02 	bl	2adb8 <assert_print>
   249b4:	4629      	mov	r1, r5
   249b6:	480a      	ldr	r0, [pc, #40]	; (249e0 <k_mem_slab_free+0xc0>)
   249b8:	f006 f9fe 	bl	2adb8 <assert_print>
   249bc:	21c2      	movs	r1, #194	; 0xc2
   249be:	e7cc      	b.n	2495a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   249c0:	f387 8811 	msr	BASEPRI, r7
   249c4:	f3bf 8f6f 	isb	sy
}
   249c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   249cc:	000340d9 	.word	0x000340d9
   249d0:	00034132 	.word	0x00034132
   249d4:	00033bc2 	.word	0x00033bc2
   249d8:	00034147 	.word	0x00034147
   249dc:	00034106 	.word	0x00034106
   249e0:	0003411d 	.word	0x0003411d

000249e4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   249e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   249e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   249e8:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   249ea:	2e0f      	cmp	r6, #15
   249ec:	d12a      	bne.n	24a44 <z_setup_new_thread+0x60>
   249ee:	4821      	ldr	r0, [pc, #132]	; (24a74 <z_setup_new_thread+0x90>)
   249f0:	4283      	cmp	r3, r0
   249f2:	d12b      	bne.n	24a4c <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   249f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   249f8:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   249fc:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   249fe:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   24a00:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24a02:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24a04:	3207      	adds	r2, #7
   24a06:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   24a0a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   24a0e:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   24a10:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   24a14:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   24a16:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   24a1a:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   24a1c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   24a1e:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24a20:	9202      	str	r2, [sp, #8]
   24a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24a24:	4620      	mov	r0, r4
   24a26:	9201      	str	r2, [sp, #4]
   24a28:	9a08      	ldr	r2, [sp, #32]
   24a2a:	9200      	str	r2, [sp, #0]
   24a2c:	4632      	mov	r2, r6
   24a2e:	f7ec fd97 	bl	11560 <arch_new_thread>
	if (!_current) {
   24a32:	4b11      	ldr	r3, [pc, #68]	; (24a78 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   24a34:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24a36:	689b      	ldr	r3, [r3, #8]
   24a38:	b103      	cbz	r3, 24a3c <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   24a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24a3c:	4630      	mov	r0, r6
   24a3e:	6763      	str	r3, [r4, #116]	; 0x74
   24a40:	b004      	add	sp, #16
   24a42:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24a44:	f106 0010 	add.w	r0, r6, #16
   24a48:	281e      	cmp	r0, #30
   24a4a:	d9d3      	bls.n	249f4 <z_setup_new_thread+0x10>
   24a4c:	f44f 7306 	mov.w	r3, #536	; 0x218
   24a50:	4a0a      	ldr	r2, [pc, #40]	; (24a7c <z_setup_new_thread+0x98>)
   24a52:	490b      	ldr	r1, [pc, #44]	; (24a80 <z_setup_new_thread+0x9c>)
   24a54:	480b      	ldr	r0, [pc, #44]	; (24a84 <z_setup_new_thread+0xa0>)
   24a56:	f006 f9af 	bl	2adb8 <assert_print>
   24a5a:	4631      	mov	r1, r6
   24a5c:	480a      	ldr	r0, [pc, #40]	; (24a88 <z_setup_new_thread+0xa4>)
   24a5e:	f06f 030f 	mvn.w	r3, #15
   24a62:	220e      	movs	r2, #14
   24a64:	f006 f9a8 	bl	2adb8 <assert_print>
   24a68:	f44f 7106 	mov.w	r1, #536	; 0x218
   24a6c:	4803      	ldr	r0, [pc, #12]	; (24a7c <z_setup_new_thread+0x98>)
   24a6e:	f006 f99c 	bl	2adaa <assert_post_action>
   24a72:	bf00      	nop
   24a74:	00024c69 	.word	0x00024c69
   24a78:	2000eb4c 	.word	0x2000eb4c
   24a7c:	0003b604 	.word	0x0003b604
   24a80:	0003b627 	.word	0x0003b627
   24a84:	00033bc2 	.word	0x00033bc2
   24a88:	0003b6a7 	.word	0x0003b6a7

00024a8c <z_impl_k_thread_create>:
{
   24a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a8e:	b087      	sub	sp, #28
   24a90:	4604      	mov	r4, r0
   24a92:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   24a96:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24a9a:	b175      	cbz	r5, 24aba <z_impl_k_thread_create+0x2e>
   24a9c:	4919      	ldr	r1, [pc, #100]	; (24b04 <z_impl_k_thread_create+0x78>)
   24a9e:	f240 238a 	movw	r3, #650	; 0x28a
   24aa2:	4a19      	ldr	r2, [pc, #100]	; (24b08 <z_impl_k_thread_create+0x7c>)
   24aa4:	4819      	ldr	r0, [pc, #100]	; (24b0c <z_impl_k_thread_create+0x80>)
   24aa6:	f006 f987 	bl	2adb8 <assert_print>
   24aaa:	4819      	ldr	r0, [pc, #100]	; (24b10 <z_impl_k_thread_create+0x84>)
   24aac:	f006 f984 	bl	2adb8 <assert_print>
   24ab0:	f240 218a 	movw	r1, #650	; 0x28a
   24ab4:	4814      	ldr	r0, [pc, #80]	; (24b08 <z_impl_k_thread_create+0x7c>)
   24ab6:	f006 f978 	bl	2adaa <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24aba:	9505      	str	r5, [sp, #20]
   24abc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24abe:	9504      	str	r5, [sp, #16]
   24ac0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24ac2:	9503      	str	r5, [sp, #12]
   24ac4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24ac6:	9502      	str	r5, [sp, #8]
   24ac8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24aca:	9501      	str	r5, [sp, #4]
   24acc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24ace:	9500      	str	r5, [sp, #0]
   24ad0:	f7ff ff88 	bl	249e4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24ad4:	f1b6 3fff 	cmp.w	r6, #4294967295
   24ad8:	bf08      	it	eq
   24ada:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   24ade:	d005      	beq.n	24aec <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24ae0:	ea56 0307 	orrs.w	r3, r6, r7
   24ae4:	d105      	bne.n	24af2 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   24ae6:	4620      	mov	r0, r4
   24ae8:	f001 fb18 	bl	2611c <z_sched_start>
}
   24aec:	4620      	mov	r0, r4
   24aee:	b007      	add	sp, #28
   24af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24af2:	463a      	mov	r2, r7
   24af4:	4633      	mov	r3, r6
   24af6:	4907      	ldr	r1, [pc, #28]	; (24b14 <z_impl_k_thread_create+0x88>)
   24af8:	f104 0018 	add.w	r0, r4, #24
   24afc:	f002 fb6c 	bl	271d8 <z_add_timeout>
   24b00:	e7f4      	b.n	24aec <z_impl_k_thread_create+0x60>
   24b02:	bf00      	nop
   24b04:	0003b6d8 	.word	0x0003b6d8
   24b08:	0003b604 	.word	0x0003b604
   24b0c:	00033bc2 	.word	0x00033bc2
   24b10:	0003b6ea 	.word	0x0003b6ea
   24b14:	000305b5 	.word	0x000305b5

00024b18 <z_init_static_threads>:
{
   24b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b1c:	4c39      	ldr	r4, [pc, #228]	; (24c04 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   24b1e:	4d3a      	ldr	r5, [pc, #232]	; (24c08 <z_init_static_threads+0xf0>)
{
   24b20:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24b22:	42ac      	cmp	r4, r5
   24b24:	4626      	mov	r6, r4
   24b26:	d92a      	bls.n	24b7e <z_init_static_threads+0x66>
   24b28:	4938      	ldr	r1, [pc, #224]	; (24c0c <z_init_static_threads+0xf4>)
   24b2a:	f240 23f1 	movw	r3, #753	; 0x2f1
   24b2e:	4a38      	ldr	r2, [pc, #224]	; (24c10 <z_init_static_threads+0xf8>)
   24b30:	4838      	ldr	r0, [pc, #224]	; (24c14 <z_init_static_threads+0xfc>)
   24b32:	f006 f941 	bl	2adb8 <assert_print>
   24b36:	4838      	ldr	r0, [pc, #224]	; (24c18 <z_init_static_threads+0x100>)
   24b38:	f006 f93e 	bl	2adb8 <assert_print>
   24b3c:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   24b40:	4833      	ldr	r0, [pc, #204]	; (24c10 <z_init_static_threads+0xf8>)
   24b42:	f006 f932 	bl	2adaa <assert_post_action>
		z_setup_new_thread(
   24b46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24b4a:	9305      	str	r3, [sp, #20]
   24b4c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   24b50:	9304      	str	r3, [sp, #16]
   24b52:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24b56:	9303      	str	r3, [sp, #12]
   24b58:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24b5c:	9302      	str	r3, [sp, #8]
   24b5e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24b62:	9301      	str	r3, [sp, #4]
   24b64:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24b68:	9300      	str	r3, [sp, #0]
   24b6a:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   24b6e:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   24b72:	f7ff ff37 	bl	249e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24b76:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   24b7a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24b7c:	e7d1      	b.n	24b22 <z_init_static_threads+0xa>
   24b7e:	42ae      	cmp	r6, r5
   24b80:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   24b84:	d3df      	bcc.n	24b46 <z_init_static_threads+0x2e>
	k_sched_lock();
   24b86:	f001 fb1b 	bl	261c0 <k_sched_lock>
   24b8a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   24b8e:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   24b92:	4c1c      	ldr	r4, [pc, #112]	; (24c04 <z_init_static_threads+0xec>)
   24b94:	f8df 9084 	ldr.w	r9, [pc, #132]	; 24c1c <z_init_static_threads+0x104>
   24b98:	42ac      	cmp	r4, r5
   24b9a:	d92c      	bls.n	24bf6 <z_init_static_threads+0xde>
   24b9c:	491b      	ldr	r1, [pc, #108]	; (24c0c <z_init_static_threads+0xf4>)
   24b9e:	f44f 7344 	mov.w	r3, #784	; 0x310
   24ba2:	4a1b      	ldr	r2, [pc, #108]	; (24c10 <z_init_static_threads+0xf8>)
   24ba4:	481b      	ldr	r0, [pc, #108]	; (24c14 <z_init_static_threads+0xfc>)
   24ba6:	f006 f907 	bl	2adb8 <assert_print>
   24baa:	481b      	ldr	r0, [pc, #108]	; (24c18 <z_init_static_threads+0x100>)
   24bac:	f006 f904 	bl	2adb8 <assert_print>
   24bb0:	f44f 7144 	mov.w	r1, #784	; 0x310
   24bb4:	e7c4      	b.n	24b40 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24bb8:	1c5a      	adds	r2, r3, #1
   24bba:	d00d      	beq.n	24bd8 <z_init_static_threads+0xc0>
   24bbc:	2100      	movs	r1, #0
   24bbe:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   24bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24bc4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24bc8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   24bcc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24bd0:	d104      	bne.n	24bdc <z_init_static_threads+0xc4>
	z_sched_start(thread);
   24bd2:	4640      	mov	r0, r8
   24bd4:	f001 faa2 	bl	2611c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24bd8:	342c      	adds	r4, #44	; 0x2c
   24bda:	e7dd      	b.n	24b98 <z_init_static_threads+0x80>
   24bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24be0:	2300      	movs	r3, #0
   24be2:	f7e4 f957 	bl	8e94 <__aeabi_uldivmod>
   24be6:	4602      	mov	r2, r0
   24be8:	460b      	mov	r3, r1
   24bea:	f108 0018 	add.w	r0, r8, #24
   24bee:	4649      	mov	r1, r9
   24bf0:	f002 faf2 	bl	271d8 <z_add_timeout>
   24bf4:	e7f0      	b.n	24bd8 <z_init_static_threads+0xc0>
   24bf6:	d3de      	bcc.n	24bb6 <z_init_static_threads+0x9e>
}
   24bf8:	b007      	add	sp, #28
   24bfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   24bfe:	f001 bb4b 	b.w	26298 <k_sched_unlock>
   24c02:	bf00      	nop
   24c04:	00031adc 	.word	0x00031adc
   24c08:	00031adc 	.word	0x00031adc
   24c0c:	0003b70f 	.word	0x0003b70f
   24c10:	0003b604 	.word	0x0003b604
   24c14:	00033bc2 	.word	0x00033bc2
   24c18:	000342e3 	.word	0x000342e3
   24c1c:	000305b5 	.word	0x000305b5

00024c20 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24c20:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   24c22:	b138      	cbz	r0, 24c34 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   24c24:	4b04      	ldr	r3, [pc, #16]	; (24c38 <z_spin_lock_valid+0x18>)
   24c26:	f000 0003 	and.w	r0, r0, #3
   24c2a:	7c1b      	ldrb	r3, [r3, #16]
   24c2c:	1ac0      	subs	r0, r0, r3
   24c2e:	bf18      	it	ne
   24c30:	2001      	movne	r0, #1
   24c32:	4770      	bx	lr
			return false;
		}
	}
	return true;
   24c34:	2001      	movs	r0, #1
}
   24c36:	4770      	bx	lr
   24c38:	2000eb4c 	.word	0x2000eb4c

00024c3c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24c3c:	4a05      	ldr	r2, [pc, #20]	; (24c54 <z_spin_unlock_valid+0x18>)
{
   24c3e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24c40:	7c11      	ldrb	r1, [r2, #16]
   24c42:	6892      	ldr	r2, [r2, #8]
   24c44:	430a      	orrs	r2, r1
   24c46:	6801      	ldr	r1, [r0, #0]
   24c48:	2000      	movs	r0, #0
   24c4a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   24c4c:	bf04      	itt	eq
   24c4e:	6018      	streq	r0, [r3, #0]
	return true;
   24c50:	2001      	moveq	r0, #1
}
   24c52:	4770      	bx	lr
   24c54:	2000eb4c 	.word	0x2000eb4c

00024c58 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24c58:	4b02      	ldr	r3, [pc, #8]	; (24c64 <z_spin_lock_set_owner+0xc>)
   24c5a:	7c1a      	ldrb	r2, [r3, #16]
   24c5c:	689b      	ldr	r3, [r3, #8]
   24c5e:	4313      	orrs	r3, r2
   24c60:	6003      	str	r3, [r0, #0]
}
   24c62:	4770      	bx	lr
   24c64:	2000eb4c 	.word	0x2000eb4c

00024c68 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24c68:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24c6a:	4c13      	ldr	r4, [pc, #76]	; (24cb8 <idle+0x50>)
   24c6c:	68a3      	ldr	r3, [r4, #8]
   24c6e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   24c72:	2b00      	cmp	r3, #0
   24c74:	db10      	blt.n	24c98 <idle+0x30>
   24c76:	4d11      	ldr	r5, [pc, #68]	; (24cbc <idle+0x54>)
	__asm__ volatile(
   24c78:	f04f 0220 	mov.w	r2, #32
   24c7c:	f3ef 8311 	mrs	r3, BASEPRI
   24c80:	f382 8812 	msr	BASEPRI_MAX, r2
   24c84:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24c88:	f002 fbb2 	bl	273f0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24c8c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   24c8e:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24c90:	b963      	cbnz	r3, 24cac <idle+0x44>
	arch_cpu_idle();
   24c92:	f7ec fb01 	bl	11298 <arch_cpu_idle>
}
   24c96:	e7ef      	b.n	24c78 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24c98:	4909      	ldr	r1, [pc, #36]	; (24cc0 <idle+0x58>)
   24c9a:	480a      	ldr	r0, [pc, #40]	; (24cc4 <idle+0x5c>)
   24c9c:	2327      	movs	r3, #39	; 0x27
   24c9e:	4a0a      	ldr	r2, [pc, #40]	; (24cc8 <idle+0x60>)
   24ca0:	f006 f88a 	bl	2adb8 <assert_print>
   24ca4:	2127      	movs	r1, #39	; 0x27
   24ca6:	4808      	ldr	r0, [pc, #32]	; (24cc8 <idle+0x60>)
   24ca8:	f006 f87f 	bl	2adaa <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24cac:	f7eb f9ae 	bl	1000c <pm_system_suspend>
   24cb0:	2800      	cmp	r0, #0
   24cb2:	d1e1      	bne.n	24c78 <idle+0x10>
   24cb4:	e7ed      	b.n	24c92 <idle+0x2a>
   24cb6:	bf00      	nop
   24cb8:	2000eb4c 	.word	0x2000eb4c
   24cbc:	2001048b 	.word	0x2001048b
   24cc0:	0003b75d 	.word	0x0003b75d
   24cc4:	00033bc2 	.word	0x00033bc2
   24cc8:	0003b73c 	.word	0x0003b73c

00024ccc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   24ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24cd0:	4604      	mov	r4, r0
   24cd2:	4617      	mov	r7, r2
   24cd4:	461e      	mov	r6, r3
   24cd6:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24cda:	b165      	cbz	r5, 24cf6 <z_impl_k_mutex_lock+0x2a>
   24cdc:	4958      	ldr	r1, [pc, #352]	; (24e40 <z_impl_k_mutex_lock+0x174>)
   24cde:	2365      	movs	r3, #101	; 0x65
   24ce0:	4a58      	ldr	r2, [pc, #352]	; (24e44 <z_impl_k_mutex_lock+0x178>)
   24ce2:	4859      	ldr	r0, [pc, #356]	; (24e48 <z_impl_k_mutex_lock+0x17c>)
   24ce4:	f006 f868 	bl	2adb8 <assert_print>
   24ce8:	4858      	ldr	r0, [pc, #352]	; (24e4c <z_impl_k_mutex_lock+0x180>)
   24cea:	f006 f865 	bl	2adb8 <assert_print>
   24cee:	2165      	movs	r1, #101	; 0x65
   24cf0:	4854      	ldr	r0, [pc, #336]	; (24e44 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cf2:	f006 f85a 	bl	2adaa <assert_post_action>
   24cf6:	f04f 0320 	mov.w	r3, #32
   24cfa:	f3ef 8811 	mrs	r8, BASEPRI
   24cfe:	f383 8812 	msr	BASEPRI_MAX, r3
   24d02:	f3bf 8f6f 	isb	sy
   24d06:	4852      	ldr	r0, [pc, #328]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24d08:	f7ff ff8a 	bl	24c20 <z_spin_lock_valid>
   24d0c:	b960      	cbnz	r0, 24d28 <z_impl_k_mutex_lock+0x5c>
   24d0e:	2394      	movs	r3, #148	; 0x94
   24d10:	4a50      	ldr	r2, [pc, #320]	; (24e54 <z_impl_k_mutex_lock+0x188>)
   24d12:	4951      	ldr	r1, [pc, #324]	; (24e58 <z_impl_k_mutex_lock+0x18c>)
   24d14:	484c      	ldr	r0, [pc, #304]	; (24e48 <z_impl_k_mutex_lock+0x17c>)
   24d16:	f006 f84f 	bl	2adb8 <assert_print>
   24d1a:	494d      	ldr	r1, [pc, #308]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24d1c:	484f      	ldr	r0, [pc, #316]	; (24e5c <z_impl_k_mutex_lock+0x190>)
   24d1e:	f006 f84b 	bl	2adb8 <assert_print>
   24d22:	2194      	movs	r1, #148	; 0x94
   24d24:	484b      	ldr	r0, [pc, #300]	; (24e54 <z_impl_k_mutex_lock+0x188>)
   24d26:	e7e4      	b.n	24cf2 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   24d28:	4849      	ldr	r0, [pc, #292]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24d2a:	f7ff ff95 	bl	24c58 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   24d2e:	68e3      	ldr	r3, [r4, #12]
   24d30:	4a4b      	ldr	r2, [pc, #300]	; (24e60 <z_impl_k_mutex_lock+0x194>)
   24d32:	b19b      	cbz	r3, 24d5c <z_impl_k_mutex_lock+0x90>
   24d34:	68a0      	ldr	r0, [r4, #8]
   24d36:	6891      	ldr	r1, [r2, #8]
   24d38:	4288      	cmp	r0, r1
   24d3a:	d027      	beq.n	24d8c <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   24d3c:	ea57 0306 	orrs.w	r3, r7, r6
   24d40:	d12c      	bne.n	24d9c <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d42:	4843      	ldr	r0, [pc, #268]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24d44:	f7ff ff7a 	bl	24c3c <z_spin_unlock_valid>
   24d48:	b1a0      	cbz	r0, 24d74 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   24d4a:	f388 8811 	msr	BASEPRI, r8
   24d4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   24d52:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24d56:	b002      	add	sp, #8
   24d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   24d5c:	6891      	ldr	r1, [r2, #8]
   24d5e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   24d62:	3301      	adds	r3, #1
   24d64:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   24d66:	6893      	ldr	r3, [r2, #8]
   24d68:	4839      	ldr	r0, [pc, #228]	; (24e50 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   24d6a:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   24d6c:	60a3      	str	r3, [r4, #8]
   24d6e:	f7ff ff65 	bl	24c3c <z_spin_unlock_valid>
   24d72:	b968      	cbnz	r0, 24d90 <z_impl_k_mutex_lock+0xc4>
   24d74:	23c2      	movs	r3, #194	; 0xc2
   24d76:	4a37      	ldr	r2, [pc, #220]	; (24e54 <z_impl_k_mutex_lock+0x188>)
   24d78:	493a      	ldr	r1, [pc, #232]	; (24e64 <z_impl_k_mutex_lock+0x198>)
   24d7a:	4833      	ldr	r0, [pc, #204]	; (24e48 <z_impl_k_mutex_lock+0x17c>)
   24d7c:	f006 f81c 	bl	2adb8 <assert_print>
   24d80:	4933      	ldr	r1, [pc, #204]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24d82:	4839      	ldr	r0, [pc, #228]	; (24e68 <z_impl_k_mutex_lock+0x19c>)
   24d84:	f006 f818 	bl	2adb8 <assert_print>
   24d88:	21c2      	movs	r1, #194	; 0xc2
   24d8a:	e7cb      	b.n	24d24 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   24d8c:	6921      	ldr	r1, [r4, #16]
   24d8e:	e7e8      	b.n	24d62 <z_impl_k_mutex_lock+0x96>
   24d90:	f388 8811 	msr	BASEPRI, r8
   24d94:	f3bf 8f6f 	isb	sy
		return 0;
   24d98:	2000      	movs	r0, #0
   24d9a:	e7dc      	b.n	24d56 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   24d9c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24da0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   24da4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   24da8:	4299      	cmp	r1, r3
   24daa:	bfa8      	it	ge
   24dac:	4619      	movge	r1, r3
   24dae:	4291      	cmp	r1, r2
   24db0:	bfb8      	it	lt
   24db2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24db4:	428b      	cmp	r3, r1
   24db6:	dd02      	ble.n	24dbe <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   24db8:	f00b fb25 	bl	30406 <adjust_owner_prio.isra.0>
   24dbc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   24dbe:	4622      	mov	r2, r4
   24dc0:	4641      	mov	r1, r8
   24dc2:	e9cd 7600 	strd	r7, r6, [sp]
   24dc6:	4822      	ldr	r0, [pc, #136]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24dc8:	f001 fc22 	bl	26610 <z_pend_curr>
	if (got_mutex == 0) {
   24dcc:	2800      	cmp	r0, #0
   24dce:	d0e3      	beq.n	24d98 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   24dd0:	f04f 0320 	mov.w	r3, #32
   24dd4:	f3ef 8611 	mrs	r6, BASEPRI
   24dd8:	f383 8812 	msr	BASEPRI_MAX, r3
   24ddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24de0:	481b      	ldr	r0, [pc, #108]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24de2:	f7ff ff1d 	bl	24c20 <z_spin_lock_valid>
   24de6:	2800      	cmp	r0, #0
   24de8:	d091      	beq.n	24d0e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   24dea:	4819      	ldr	r0, [pc, #100]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24dec:	f7ff ff34 	bl	24c58 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   24df0:	68a0      	ldr	r0, [r4, #8]
   24df2:	b1c0      	cbz	r0, 24e26 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   24df4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   24df6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24df8:	429c      	cmp	r4, r3
   24dfa:	d00a      	beq.n	24e12 <z_impl_k_mutex_lock+0x146>
   24dfc:	b14b      	cbz	r3, 24e12 <z_impl_k_mutex_lock+0x146>
   24dfe:	f993 300e 	ldrsb.w	r3, [r3, #14]
   24e02:	4299      	cmp	r1, r3
   24e04:	bfa8      	it	ge
   24e06:	4619      	movge	r1, r3
   24e08:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24e0c:	4299      	cmp	r1, r3
   24e0e:	bfb8      	it	lt
   24e10:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   24e12:	f00b faf8 	bl	30406 <adjust_owner_prio.isra.0>
   24e16:	b130      	cbz	r0, 24e26 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   24e18:	4631      	mov	r1, r6
   24e1a:	480d      	ldr	r0, [pc, #52]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24e1c:	f001 f93c 	bl	26098 <z_reschedule>
	return -EAGAIN;
   24e20:	f06f 000a 	mvn.w	r0, #10
   24e24:	e797      	b.n	24d56 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   24e26:	2d00      	cmp	r5, #0
   24e28:	d1f6      	bne.n	24e18 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e2a:	4809      	ldr	r0, [pc, #36]	; (24e50 <z_impl_k_mutex_lock+0x184>)
   24e2c:	f7ff ff06 	bl	24c3c <z_spin_unlock_valid>
   24e30:	2800      	cmp	r0, #0
   24e32:	d09f      	beq.n	24d74 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   24e34:	f386 8811 	msr	BASEPRI, r6
   24e38:	f3bf 8f6f 	isb	sy
   24e3c:	e7f0      	b.n	24e20 <z_impl_k_mutex_lock+0x154>
   24e3e:	bf00      	nop
   24e40:	0003b6d8 	.word	0x0003b6d8
   24e44:	0003b785 	.word	0x0003b785
   24e48:	00033bc2 	.word	0x00033bc2
   24e4c:	0003b7a7 	.word	0x0003b7a7
   24e50:	2000eb70 	.word	0x2000eb70
   24e54:	000340d9 	.word	0x000340d9
   24e58:	00034132 	.word	0x00034132
   24e5c:	00034147 	.word	0x00034147
   24e60:	2000eb4c 	.word	0x2000eb4c
   24e64:	00034106 	.word	0x00034106
   24e68:	0003411d 	.word	0x0003411d

00024e6c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   24e6c:	b570      	push	{r4, r5, r6, lr}
   24e6e:	4604      	mov	r4, r0
   24e70:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24e74:	b166      	cbz	r6, 24e90 <z_impl_k_mutex_unlock+0x24>
   24e76:	4938      	ldr	r1, [pc, #224]	; (24f58 <z_impl_k_mutex_unlock+0xec>)
   24e78:	23cd      	movs	r3, #205	; 0xcd
   24e7a:	4a38      	ldr	r2, [pc, #224]	; (24f5c <z_impl_k_mutex_unlock+0xf0>)
   24e7c:	4838      	ldr	r0, [pc, #224]	; (24f60 <z_impl_k_mutex_unlock+0xf4>)
   24e7e:	f005 ff9b 	bl	2adb8 <assert_print>
   24e82:	4838      	ldr	r0, [pc, #224]	; (24f64 <z_impl_k_mutex_unlock+0xf8>)
   24e84:	f005 ff98 	bl	2adb8 <assert_print>
   24e88:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24e8a:	4834      	ldr	r0, [pc, #208]	; (24f5c <z_impl_k_mutex_unlock+0xf0>)
   24e8c:	f005 ff8d 	bl	2adaa <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   24e90:	6883      	ldr	r3, [r0, #8]
   24e92:	2b00      	cmp	r3, #0
   24e94:	d059      	beq.n	24f4a <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   24e96:	4a34      	ldr	r2, [pc, #208]	; (24f68 <z_impl_k_mutex_unlock+0xfc>)
   24e98:	6892      	ldr	r2, [r2, #8]
   24e9a:	4293      	cmp	r3, r2
   24e9c:	d158      	bne.n	24f50 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24e9e:	68c3      	ldr	r3, [r0, #12]
   24ea0:	b93b      	cbnz	r3, 24eb2 <z_impl_k_mutex_unlock+0x46>
   24ea2:	4932      	ldr	r1, [pc, #200]	; (24f6c <z_impl_k_mutex_unlock+0x100>)
   24ea4:	23e5      	movs	r3, #229	; 0xe5
   24ea6:	4a2d      	ldr	r2, [pc, #180]	; (24f5c <z_impl_k_mutex_unlock+0xf0>)
   24ea8:	482d      	ldr	r0, [pc, #180]	; (24f60 <z_impl_k_mutex_unlock+0xf4>)
   24eaa:	f005 ff85 	bl	2adb8 <assert_print>
   24eae:	21e5      	movs	r1, #229	; 0xe5
   24eb0:	e7eb      	b.n	24e8a <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24eb2:	2b01      	cmp	r3, #1
   24eb4:	d003      	beq.n	24ebe <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   24eb6:	3b01      	subs	r3, #1
   24eb8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   24eba:	2000      	movs	r0, #0
}
   24ebc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   24ebe:	f04f 0320 	mov.w	r3, #32
   24ec2:	f3ef 8511 	mrs	r5, BASEPRI
   24ec6:	f383 8812 	msr	BASEPRI_MAX, r3
   24eca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ece:	4828      	ldr	r0, [pc, #160]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24ed0:	f7ff fea6 	bl	24c20 <z_spin_lock_valid>
   24ed4:	b960      	cbnz	r0, 24ef0 <z_impl_k_mutex_unlock+0x84>
   24ed6:	2394      	movs	r3, #148	; 0x94
   24ed8:	4a26      	ldr	r2, [pc, #152]	; (24f74 <z_impl_k_mutex_unlock+0x108>)
   24eda:	4927      	ldr	r1, [pc, #156]	; (24f78 <z_impl_k_mutex_unlock+0x10c>)
   24edc:	4820      	ldr	r0, [pc, #128]	; (24f60 <z_impl_k_mutex_unlock+0xf4>)
   24ede:	f005 ff6b 	bl	2adb8 <assert_print>
   24ee2:	4923      	ldr	r1, [pc, #140]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24ee4:	4825      	ldr	r0, [pc, #148]	; (24f7c <z_impl_k_mutex_unlock+0x110>)
   24ee6:	f005 ff67 	bl	2adb8 <assert_print>
   24eea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24eec:	4821      	ldr	r0, [pc, #132]	; (24f74 <z_impl_k_mutex_unlock+0x108>)
   24eee:	e7cd      	b.n	24e8c <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   24ef0:	481f      	ldr	r0, [pc, #124]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24ef2:	f7ff feb1 	bl	24c58 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   24ef6:	6921      	ldr	r1, [r4, #16]
   24ef8:	68a0      	ldr	r0, [r4, #8]
   24efa:	f00b fa84 	bl	30406 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   24efe:	4620      	mov	r0, r4
   24f00:	f001 fe06 	bl	26b10 <z_unpend_first_thread>
	mutex->owner = new_owner;
   24f04:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24f06:	b150      	cbz	r0, 24f1e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   24f08:	f990 200e 	ldrsb.w	r2, [r0, #14]
   24f0c:	6122      	str	r2, [r4, #16]
   24f0e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   24f10:	f001 f834 	bl	25f7c <z_ready_thread>
		z_reschedule(&lock, key);
   24f14:	4629      	mov	r1, r5
   24f16:	4816      	ldr	r0, [pc, #88]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24f18:	f001 f8be 	bl	26098 <z_reschedule>
   24f1c:	e7cd      	b.n	24eba <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   24f1e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f20:	4813      	ldr	r0, [pc, #76]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24f22:	f7ff fe8b 	bl	24c3c <z_spin_unlock_valid>
   24f26:	b958      	cbnz	r0, 24f40 <z_impl_k_mutex_unlock+0xd4>
   24f28:	23c2      	movs	r3, #194	; 0xc2
   24f2a:	4a12      	ldr	r2, [pc, #72]	; (24f74 <z_impl_k_mutex_unlock+0x108>)
   24f2c:	4914      	ldr	r1, [pc, #80]	; (24f80 <z_impl_k_mutex_unlock+0x114>)
   24f2e:	480c      	ldr	r0, [pc, #48]	; (24f60 <z_impl_k_mutex_unlock+0xf4>)
   24f30:	f005 ff42 	bl	2adb8 <assert_print>
   24f34:	490e      	ldr	r1, [pc, #56]	; (24f70 <z_impl_k_mutex_unlock+0x104>)
   24f36:	4813      	ldr	r0, [pc, #76]	; (24f84 <z_impl_k_mutex_unlock+0x118>)
   24f38:	f005 ff3e 	bl	2adb8 <assert_print>
   24f3c:	21c2      	movs	r1, #194	; 0xc2
   24f3e:	e7d5      	b.n	24eec <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   24f40:	f385 8811 	msr	BASEPRI, r5
   24f44:	f3bf 8f6f 	isb	sy
   24f48:	e7b7      	b.n	24eba <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   24f4a:	f06f 0015 	mvn.w	r0, #21
   24f4e:	e7b5      	b.n	24ebc <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   24f50:	f04f 30ff 	mov.w	r0, #4294967295
   24f54:	e7b2      	b.n	24ebc <z_impl_k_mutex_unlock+0x50>
   24f56:	bf00      	nop
   24f58:	0003b6d8 	.word	0x0003b6d8
   24f5c:	0003b785 	.word	0x0003b785
   24f60:	00033bc2 	.word	0x00033bc2
   24f64:	0003b7a7 	.word	0x0003b7a7
   24f68:	2000eb4c 	.word	0x2000eb4c
   24f6c:	0003b7cc 	.word	0x0003b7cc
   24f70:	2000eb70 	.word	0x2000eb70
   24f74:	000340d9 	.word	0x000340d9
   24f78:	00034132 	.word	0x00034132
   24f7c:	00034147 	.word	0x00034147
   24f80:	00034106 	.word	0x00034106
   24f84:	0003411d 	.word	0x0003411d

00024f88 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   24f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f8c:	4604      	mov	r4, r0
   24f8e:	460e      	mov	r6, r1
   24f90:	4690      	mov	r8, r2
   24f92:	4699      	mov	r9, r3
   24f94:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24f98:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24f9c:	f04f 0320 	mov.w	r3, #32
   24fa0:	f3ef 8711 	mrs	r7, BASEPRI
   24fa4:	f383 8812 	msr	BASEPRI_MAX, r3
   24fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fac:	4628      	mov	r0, r5
   24fae:	f7ff fe37 	bl	24c20 <z_spin_lock_valid>
   24fb2:	b968      	cbnz	r0, 24fd0 <queue_insert+0x48>
   24fb4:	2394      	movs	r3, #148	; 0x94
   24fb6:	4a3b      	ldr	r2, [pc, #236]	; (250a4 <queue_insert+0x11c>)
   24fb8:	493b      	ldr	r1, [pc, #236]	; (250a8 <queue_insert+0x120>)
   24fba:	483c      	ldr	r0, [pc, #240]	; (250ac <queue_insert+0x124>)
   24fbc:	f005 fefc 	bl	2adb8 <assert_print>
   24fc0:	4629      	mov	r1, r5
   24fc2:	483b      	ldr	r0, [pc, #236]	; (250b0 <queue_insert+0x128>)
   24fc4:	f005 fef8 	bl	2adb8 <assert_print>
   24fc8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24fca:	4836      	ldr	r0, [pc, #216]	; (250a4 <queue_insert+0x11c>)
   24fcc:	f005 feed 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   24fd0:	4628      	mov	r0, r5
   24fd2:	f7ff fe41 	bl	24c58 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   24fd6:	f1ba 0f00 	cmp.w	sl, #0
   24fda:	d000      	beq.n	24fde <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   24fdc:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24fde:	f104 000c 	add.w	r0, r4, #12
   24fe2:	f001 fd95 	bl	26b10 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   24fe6:	b158      	cbz	r0, 25000 <queue_insert+0x78>
   24fe8:	2300      	movs	r3, #0
   24fea:	f8c0 8014 	str.w	r8, [r0, #20]
   24fee:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   24ff0:	f000 ffc4 	bl	25f7c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   24ff4:	4628      	mov	r0, r5
   24ff6:	4639      	mov	r1, r7
   24ff8:	f001 f84e 	bl	26098 <z_reschedule>
		return 0;
   24ffc:	2000      	movs	r0, #0
   24ffe:	e01c      	b.n	2503a <queue_insert+0xb2>
	if (alloc) {
   25000:	f1b9 0f00 	cmp.w	r9, #0
   25004:	d02b      	beq.n	2505e <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   25006:	2108      	movs	r1, #8
   25008:	f002 ffd6 	bl	27fb8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2500c:	b9b8      	cbnz	r0, 2503e <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2500e:	4628      	mov	r0, r5
   25010:	f7ff fe14 	bl	24c3c <z_spin_unlock_valid>
   25014:	b958      	cbnz	r0, 2502e <queue_insert+0xa6>
   25016:	23c2      	movs	r3, #194	; 0xc2
   25018:	4a22      	ldr	r2, [pc, #136]	; (250a4 <queue_insert+0x11c>)
   2501a:	4926      	ldr	r1, [pc, #152]	; (250b4 <queue_insert+0x12c>)
   2501c:	4823      	ldr	r0, [pc, #140]	; (250ac <queue_insert+0x124>)
   2501e:	f005 fecb 	bl	2adb8 <assert_print>
   25022:	4629      	mov	r1, r5
   25024:	4824      	ldr	r0, [pc, #144]	; (250b8 <queue_insert+0x130>)
   25026:	f005 fec7 	bl	2adb8 <assert_print>
   2502a:	21c2      	movs	r1, #194	; 0xc2
   2502c:	e7cd      	b.n	24fca <queue_insert+0x42>
	__asm__ volatile(
   2502e:	f387 8811 	msr	BASEPRI, r7
   25032:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25036:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   2503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2503e:	2201      	movs	r2, #1
		anode->data = data;
   25040:	f8c0 8004 	str.w	r8, [r0, #4]
   25044:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25046:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25048:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2504c:	b95e      	cbnz	r6, 25066 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2504e:	6822      	ldr	r2, [r4, #0]
   25050:	430a      	orrs	r2, r1
   25052:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25054:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   25056:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25058:	b96a      	cbnz	r2, 25076 <queue_insert+0xee>
	list->tail = node;
   2505a:	6060      	str	r0, [r4, #4]
}
   2505c:	e00b      	b.n	25076 <queue_insert+0xee>
}
   2505e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   25060:	f8c8 9000 	str.w	r9, [r8]
}
   25064:	e7ef      	b.n	25046 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25066:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25068:	2a03      	cmp	r2, #3
   2506a:	d810      	bhi.n	2508e <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2506c:	6001      	str	r1, [r0, #0]
	return list->tail;
   2506e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25070:	b939      	cbnz	r1, 25082 <queue_insert+0xfa>
	list->head = node;
   25072:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25076:	2104      	movs	r1, #4
   25078:	f104 0014 	add.w	r0, r4, #20
   2507c:	f00b fb8e 	bl	3079c <z_handle_obj_poll_events>
   25080:	e7b8      	b.n	24ff4 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25082:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25084:	f002 0203 	and.w	r2, r2, #3
   25088:	4302      	orrs	r2, r0
   2508a:	600a      	str	r2, [r1, #0]
   2508c:	e7e5      	b.n	2505a <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2508e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25092:	430a      	orrs	r2, r1
   25094:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25096:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25098:	f002 0203 	and.w	r2, r2, #3
   2509c:	ea40 0302 	orr.w	r3, r0, r2
   250a0:	6033      	str	r3, [r6, #0]
}
   250a2:	e7e8      	b.n	25076 <queue_insert+0xee>
   250a4:	000340d9 	.word	0x000340d9
   250a8:	00034132 	.word	0x00034132
   250ac:	00033bc2 	.word	0x00033bc2
   250b0:	00034147 	.word	0x00034147
   250b4:	00034106 	.word	0x00034106
   250b8:	0003411d 	.word	0x0003411d

000250bc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   250bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   250c0:	4606      	mov	r6, r0
   250c2:	4691      	mov	r9, r2
   250c4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   250c6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   250ca:	f04f 0320 	mov.w	r3, #32
   250ce:	f3ef 8811 	mrs	r8, BASEPRI
   250d2:	f383 8812 	msr	BASEPRI_MAX, r3
   250d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   250da:	4628      	mov	r0, r5
   250dc:	f7ff fda0 	bl	24c20 <z_spin_lock_valid>
   250e0:	b968      	cbnz	r0, 250fe <z_impl_k_queue_get+0x42>
   250e2:	2394      	movs	r3, #148	; 0x94
   250e4:	4a23      	ldr	r2, [pc, #140]	; (25174 <z_impl_k_queue_get+0xb8>)
   250e6:	4924      	ldr	r1, [pc, #144]	; (25178 <z_impl_k_queue_get+0xbc>)
   250e8:	4824      	ldr	r0, [pc, #144]	; (2517c <z_impl_k_queue_get+0xc0>)
   250ea:	f005 fe65 	bl	2adb8 <assert_print>
   250ee:	4629      	mov	r1, r5
   250f0:	4823      	ldr	r0, [pc, #140]	; (25180 <z_impl_k_queue_get+0xc4>)
   250f2:	f005 fe61 	bl	2adb8 <assert_print>
   250f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   250f8:	481e      	ldr	r0, [pc, #120]	; (25174 <z_impl_k_queue_get+0xb8>)
   250fa:	f005 fe56 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   250fe:	4628      	mov	r0, r5
   25100:	f7ff fdaa 	bl	24c58 <z_spin_lock_set_owner>
	return list->head;
   25104:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25106:	b1ec      	cbz	r4, 25144 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25108:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2510a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2510c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25110:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25112:	4620      	mov	r0, r4
   25114:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   25118:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2511a:	bf08      	it	eq
   2511c:	6073      	streq	r3, [r6, #4]
   2511e:	f00b f981 	bl	30424 <z_queue_node_peek>
   25122:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25124:	4628      	mov	r0, r5
   25126:	f7ff fd89 	bl	24c3c <z_spin_unlock_valid>
   2512a:	b9d8      	cbnz	r0, 25164 <z_impl_k_queue_get+0xa8>
   2512c:	23c2      	movs	r3, #194	; 0xc2
   2512e:	4a11      	ldr	r2, [pc, #68]	; (25174 <z_impl_k_queue_get+0xb8>)
   25130:	4914      	ldr	r1, [pc, #80]	; (25184 <z_impl_k_queue_get+0xc8>)
   25132:	4812      	ldr	r0, [pc, #72]	; (2517c <z_impl_k_queue_get+0xc0>)
   25134:	f005 fe40 	bl	2adb8 <assert_print>
   25138:	4629      	mov	r1, r5
   2513a:	4813      	ldr	r0, [pc, #76]	; (25188 <z_impl_k_queue_get+0xcc>)
   2513c:	f005 fe3c 	bl	2adb8 <assert_print>
   25140:	21c2      	movs	r1, #194	; 0xc2
   25142:	e7d9      	b.n	250f8 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25144:	ea59 0307 	orrs.w	r3, r9, r7
   25148:	d0ec      	beq.n	25124 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2514a:	4641      	mov	r1, r8
   2514c:	4628      	mov	r0, r5
   2514e:	e9cd 9700 	strd	r9, r7, [sp]
   25152:	f106 020c 	add.w	r2, r6, #12
   25156:	f001 fa5b 	bl	26610 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   2515a:	b938      	cbnz	r0, 2516c <z_impl_k_queue_get+0xb0>
   2515c:	4b0b      	ldr	r3, [pc, #44]	; (2518c <z_impl_k_queue_get+0xd0>)
   2515e:	689b      	ldr	r3, [r3, #8]
   25160:	695c      	ldr	r4, [r3, #20]
   25162:	e003      	b.n	2516c <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   25164:	f388 8811 	msr	BASEPRI, r8
   25168:	f3bf 8f6f 	isb	sy
}
   2516c:	4620      	mov	r0, r4
   2516e:	b003      	add	sp, #12
   25170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25174:	000340d9 	.word	0x000340d9
   25178:	00034132 	.word	0x00034132
   2517c:	00033bc2 	.word	0x00033bc2
   25180:	00034147 	.word	0x00034147
   25184:	00034106 	.word	0x00034106
   25188:	0003411d 	.word	0x0003411d
   2518c:	2000eb4c 	.word	0x2000eb4c

00025190 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25190:	b538      	push	{r3, r4, r5, lr}
   25192:	4604      	mov	r4, r0
	__asm__ volatile(
   25194:	f04f 0320 	mov.w	r3, #32
   25198:	f3ef 8511 	mrs	r5, BASEPRI
   2519c:	f383 8812 	msr	BASEPRI_MAX, r3
   251a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251a4:	4817      	ldr	r0, [pc, #92]	; (25204 <z_impl_k_sem_give+0x74>)
   251a6:	f7ff fd3b 	bl	24c20 <z_spin_lock_valid>
   251aa:	b968      	cbnz	r0, 251c8 <z_impl_k_sem_give+0x38>
   251ac:	2394      	movs	r3, #148	; 0x94
   251ae:	4a16      	ldr	r2, [pc, #88]	; (25208 <z_impl_k_sem_give+0x78>)
   251b0:	4916      	ldr	r1, [pc, #88]	; (2520c <z_impl_k_sem_give+0x7c>)
   251b2:	4817      	ldr	r0, [pc, #92]	; (25210 <z_impl_k_sem_give+0x80>)
   251b4:	f005 fe00 	bl	2adb8 <assert_print>
   251b8:	4912      	ldr	r1, [pc, #72]	; (25204 <z_impl_k_sem_give+0x74>)
   251ba:	4816      	ldr	r0, [pc, #88]	; (25214 <z_impl_k_sem_give+0x84>)
   251bc:	f005 fdfc 	bl	2adb8 <assert_print>
   251c0:	2194      	movs	r1, #148	; 0x94
   251c2:	4811      	ldr	r0, [pc, #68]	; (25208 <z_impl_k_sem_give+0x78>)
   251c4:	f005 fdf1 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   251c8:	480e      	ldr	r0, [pc, #56]	; (25204 <z_impl_k_sem_give+0x74>)
   251ca:	f7ff fd45 	bl	24c58 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   251ce:	4620      	mov	r0, r4
   251d0:	f001 fc9e 	bl	26b10 <z_unpend_first_thread>

	if (thread != NULL) {
   251d4:	b148      	cbz	r0, 251ea <z_impl_k_sem_give+0x5a>
   251d6:	2200      	movs	r2, #0
   251d8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   251da:	f000 fecf 	bl	25f7c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   251de:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   251e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   251e4:	4807      	ldr	r0, [pc, #28]	; (25204 <z_impl_k_sem_give+0x74>)
   251e6:	f000 bf57 	b.w	26098 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   251ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   251ee:	429a      	cmp	r2, r3
   251f0:	bf18      	it	ne
   251f2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   251f4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   251f6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   251f8:	f104 0010 	add.w	r0, r4, #16
   251fc:	f00b face 	bl	3079c <z_handle_obj_poll_events>
}
   25200:	e7ed      	b.n	251de <z_impl_k_sem_give+0x4e>
   25202:	bf00      	nop
   25204:	2000eb74 	.word	0x2000eb74
   25208:	000340d9 	.word	0x000340d9
   2520c:	00034132 	.word	0x00034132
   25210:	00033bc2 	.word	0x00033bc2
   25214:	00034147 	.word	0x00034147

00025218 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2521a:	4604      	mov	r4, r0
   2521c:	4616      	mov	r6, r2
   2521e:	461d      	mov	r5, r3
   25220:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25224:	b17b      	cbz	r3, 25246 <z_impl_k_sem_take+0x2e>
   25226:	ea52 0305 	orrs.w	r3, r2, r5
   2522a:	d00c      	beq.n	25246 <z_impl_k_sem_take+0x2e>
   2522c:	492d      	ldr	r1, [pc, #180]	; (252e4 <z_impl_k_sem_take+0xcc>)
   2522e:	2379      	movs	r3, #121	; 0x79
   25230:	4a2d      	ldr	r2, [pc, #180]	; (252e8 <z_impl_k_sem_take+0xd0>)
   25232:	482e      	ldr	r0, [pc, #184]	; (252ec <z_impl_k_sem_take+0xd4>)
   25234:	f005 fdc0 	bl	2adb8 <assert_print>
   25238:	482d      	ldr	r0, [pc, #180]	; (252f0 <z_impl_k_sem_take+0xd8>)
   2523a:	f005 fdbd 	bl	2adb8 <assert_print>
   2523e:	2179      	movs	r1, #121	; 0x79
   25240:	4829      	ldr	r0, [pc, #164]	; (252e8 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25242:	f005 fdb2 	bl	2adaa <assert_post_action>
   25246:	f04f 0320 	mov.w	r3, #32
   2524a:	f3ef 8711 	mrs	r7, BASEPRI
   2524e:	f383 8812 	msr	BASEPRI_MAX, r3
   25252:	f3bf 8f6f 	isb	sy
   25256:	4827      	ldr	r0, [pc, #156]	; (252f4 <z_impl_k_sem_take+0xdc>)
   25258:	f7ff fce2 	bl	24c20 <z_spin_lock_valid>
   2525c:	b960      	cbnz	r0, 25278 <z_impl_k_sem_take+0x60>
   2525e:	2394      	movs	r3, #148	; 0x94
   25260:	4a25      	ldr	r2, [pc, #148]	; (252f8 <z_impl_k_sem_take+0xe0>)
   25262:	4926      	ldr	r1, [pc, #152]	; (252fc <z_impl_k_sem_take+0xe4>)
   25264:	4821      	ldr	r0, [pc, #132]	; (252ec <z_impl_k_sem_take+0xd4>)
   25266:	f005 fda7 	bl	2adb8 <assert_print>
   2526a:	4922      	ldr	r1, [pc, #136]	; (252f4 <z_impl_k_sem_take+0xdc>)
   2526c:	4824      	ldr	r0, [pc, #144]	; (25300 <z_impl_k_sem_take+0xe8>)
   2526e:	f005 fda3 	bl	2adb8 <assert_print>
   25272:	2194      	movs	r1, #148	; 0x94
   25274:	4820      	ldr	r0, [pc, #128]	; (252f8 <z_impl_k_sem_take+0xe0>)
   25276:	e7e4      	b.n	25242 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   25278:	481e      	ldr	r0, [pc, #120]	; (252f4 <z_impl_k_sem_take+0xdc>)
   2527a:	f7ff fced 	bl	24c58 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2527e:	68a3      	ldr	r3, [r4, #8]
   25280:	b1c3      	cbz	r3, 252b4 <z_impl_k_sem_take+0x9c>
		sem->count--;
   25282:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25284:	481b      	ldr	r0, [pc, #108]	; (252f4 <z_impl_k_sem_take+0xdc>)
   25286:	60a3      	str	r3, [r4, #8]
   25288:	f7ff fcd8 	bl	24c3c <z_spin_unlock_valid>
   2528c:	b958      	cbnz	r0, 252a6 <z_impl_k_sem_take+0x8e>
   2528e:	23c2      	movs	r3, #194	; 0xc2
   25290:	4a19      	ldr	r2, [pc, #100]	; (252f8 <z_impl_k_sem_take+0xe0>)
   25292:	491c      	ldr	r1, [pc, #112]	; (25304 <z_impl_k_sem_take+0xec>)
   25294:	4815      	ldr	r0, [pc, #84]	; (252ec <z_impl_k_sem_take+0xd4>)
   25296:	f005 fd8f 	bl	2adb8 <assert_print>
   2529a:	4916      	ldr	r1, [pc, #88]	; (252f4 <z_impl_k_sem_take+0xdc>)
   2529c:	481a      	ldr	r0, [pc, #104]	; (25308 <z_impl_k_sem_take+0xf0>)
   2529e:	f005 fd8b 	bl	2adb8 <assert_print>
   252a2:	21c2      	movs	r1, #194	; 0xc2
   252a4:	e7e6      	b.n	25274 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   252a6:	f387 8811 	msr	BASEPRI, r7
   252aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   252ae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   252b0:	b003      	add	sp, #12
   252b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   252b4:	ea56 0305 	orrs.w	r3, r6, r5
   252b8:	d10b      	bne.n	252d2 <z_impl_k_sem_take+0xba>
   252ba:	480e      	ldr	r0, [pc, #56]	; (252f4 <z_impl_k_sem_take+0xdc>)
   252bc:	f7ff fcbe 	bl	24c3c <z_spin_unlock_valid>
   252c0:	2800      	cmp	r0, #0
   252c2:	d0e4      	beq.n	2528e <z_impl_k_sem_take+0x76>
   252c4:	f387 8811 	msr	BASEPRI, r7
   252c8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   252cc:	f06f 000f 	mvn.w	r0, #15
   252d0:	e7ee      	b.n	252b0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   252d2:	4622      	mov	r2, r4
   252d4:	4639      	mov	r1, r7
   252d6:	e9cd 6500 	strd	r6, r5, [sp]
   252da:	4806      	ldr	r0, [pc, #24]	; (252f4 <z_impl_k_sem_take+0xdc>)
   252dc:	f001 f998 	bl	26610 <z_pend_curr>
	return ret;
   252e0:	e7e6      	b.n	252b0 <z_impl_k_sem_take+0x98>
   252e2:	bf00      	nop
   252e4:	0003b803 	.word	0x0003b803
   252e8:	0003b7e3 	.word	0x0003b7e3
   252ec:	00033bc2 	.word	0x00033bc2
   252f0:	00034662 	.word	0x00034662
   252f4:	2000eb74 	.word	0x2000eb74
   252f8:	000340d9 	.word	0x000340d9
   252fc:	00034132 	.word	0x00034132
   25300:	00034147 	.word	0x00034147
   25304:	00034106 	.word	0x00034106
   25308:	0003411d 	.word	0x0003411d

0002530c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   2530c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2530e:	2400      	movs	r4, #0
   25310:	4b08      	ldr	r3, [pc, #32]	; (25334 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   25316:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25318:	ab02      	add	r3, sp, #8
   2531a:	9300      	str	r3, [sp, #0]
   2531c:	4906      	ldr	r1, [pc, #24]	; (25338 <k_sys_work_q_init+0x2c>)
   2531e:	f04f 33ff 	mov.w	r3, #4294967295
   25322:	4806      	ldr	r0, [pc, #24]	; (2533c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25324:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25328:	f000 fac0 	bl	258ac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2532c:	4620      	mov	r0, r4
   2532e:	b004      	add	sp, #16
   25330:	bd10      	pop	{r4, pc}
   25332:	bf00      	nop
   25334:	0003b851 	.word	0x0003b851
   25338:	20014728 	.word	0x20014728
   2533c:	2000ded0 	.word	0x2000ded0

00025340 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25344:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25346:	4e6e      	ldr	r6, [pc, #440]	; (25500 <work_queue_main+0x1c0>)
	return list->head;
   25348:	4f6e      	ldr	r7, [pc, #440]	; (25504 <work_queue_main+0x1c4>)
   2534a:	b085      	sub	sp, #20
	__asm__ volatile(
   2534c:	f04f 0320 	mov.w	r3, #32
   25350:	f3ef 8811 	mrs	r8, BASEPRI
   25354:	f383 8812 	msr	BASEPRI_MAX, r3
   25358:	f3bf 8f6f 	isb	sy
   2535c:	4630      	mov	r0, r6
   2535e:	f7ff fc5f 	bl	24c20 <z_spin_lock_valid>
   25362:	b968      	cbnz	r0, 25380 <work_queue_main+0x40>
   25364:	2394      	movs	r3, #148	; 0x94
   25366:	4a68      	ldr	r2, [pc, #416]	; (25508 <work_queue_main+0x1c8>)
   25368:	4968      	ldr	r1, [pc, #416]	; (2550c <work_queue_main+0x1cc>)
   2536a:	4869      	ldr	r0, [pc, #420]	; (25510 <work_queue_main+0x1d0>)
   2536c:	f005 fd24 	bl	2adb8 <assert_print>
   25370:	4963      	ldr	r1, [pc, #396]	; (25500 <work_queue_main+0x1c0>)
   25372:	4868      	ldr	r0, [pc, #416]	; (25514 <work_queue_main+0x1d4>)
   25374:	f005 fd20 	bl	2adb8 <assert_print>
   25378:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2537a:	4863      	ldr	r0, [pc, #396]	; (25508 <work_queue_main+0x1c8>)
   2537c:	f005 fd15 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   25380:	4630      	mov	r0, r6
   25382:	f7ff fc69 	bl	24c58 <z_spin_lock_set_owner>
   25386:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   2538a:	b9ad      	cbnz	r5, 253b8 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2538c:	2102      	movs	r1, #2
   2538e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   25392:	f00b f889 	bl	304a8 <flag_test_and_clear>
   25396:	2800      	cmp	r0, #0
   25398:	d135      	bne.n	25406 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2539a:	2300      	movs	r3, #0
   2539c:	f04f 32ff 	mov.w	r2, #4294967295
   253a0:	9302      	str	r3, [sp, #8]
   253a2:	f04f 33ff 	mov.w	r3, #4294967295
   253a6:	4641      	mov	r1, r8
   253a8:	e9cd 2300 	strd	r2, r3, [sp]
   253ac:	4630      	mov	r0, r6
   253ae:	f104 0290 	add.w	r2, r4, #144	; 0x90
   253b2:	f001 fe9f 	bl	270f4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   253b6:	e7c9      	b.n	2534c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   253b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   253bc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   253be:	4295      	cmp	r5, r2
	list->tail = node;
   253c0:	bf08      	it	eq
   253c2:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   253c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   253ca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   253ce:	4630      	mov	r0, r6
   253d0:	f043 0302 	orr.w	r3, r3, #2
   253d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   253d8:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   253da:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   253de:	f023 0304 	bic.w	r3, r3, #4
   253e2:	f043 0301 	orr.w	r3, r3, #1
   253e6:	60eb      	str	r3, [r5, #12]
   253e8:	f7ff fc28 	bl	24c3c <z_spin_unlock_valid>
   253ec:	b9a8      	cbnz	r0, 2541a <work_queue_main+0xda>
   253ee:	23c2      	movs	r3, #194	; 0xc2
   253f0:	4a45      	ldr	r2, [pc, #276]	; (25508 <work_queue_main+0x1c8>)
   253f2:	4949      	ldr	r1, [pc, #292]	; (25518 <work_queue_main+0x1d8>)
   253f4:	4846      	ldr	r0, [pc, #280]	; (25510 <work_queue_main+0x1d0>)
   253f6:	f005 fcdf 	bl	2adb8 <assert_print>
   253fa:	4941      	ldr	r1, [pc, #260]	; (25500 <work_queue_main+0x1c0>)
   253fc:	4847      	ldr	r0, [pc, #284]	; (2551c <work_queue_main+0x1dc>)
   253fe:	f005 fcdb 	bl	2adb8 <assert_print>
   25402:	21c2      	movs	r1, #194	; 0xc2
   25404:	e7b9      	b.n	2537a <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25406:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2540a:	2200      	movs	r2, #0
   2540c:	2101      	movs	r1, #1
   2540e:	4628      	mov	r0, r5
   25410:	f001 fe12 	bl	27038 <z_sched_wake>
   25414:	2800      	cmp	r0, #0
   25416:	d1f8      	bne.n	2540a <work_queue_main+0xca>
   25418:	e7bf      	b.n	2539a <work_queue_main+0x5a>
	__asm__ volatile(
   2541a:	f388 8811 	msr	BASEPRI, r8
   2541e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   25422:	f1b9 0f00 	cmp.w	r9, #0
   25426:	d10a      	bne.n	2543e <work_queue_main+0xfe>
   25428:	493d      	ldr	r1, [pc, #244]	; (25520 <work_queue_main+0x1e0>)
   2542a:	4839      	ldr	r0, [pc, #228]	; (25510 <work_queue_main+0x1d0>)
   2542c:	f240 239b 	movw	r3, #667	; 0x29b
   25430:	4a3c      	ldr	r2, [pc, #240]	; (25524 <work_queue_main+0x1e4>)
   25432:	f005 fcc1 	bl	2adb8 <assert_print>
   25436:	f240 219b 	movw	r1, #667	; 0x29b
   2543a:	483a      	ldr	r0, [pc, #232]	; (25524 <work_queue_main+0x1e4>)
   2543c:	e79e      	b.n	2537c <work_queue_main+0x3c>
		handler(work);
   2543e:	4628      	mov	r0, r5
   25440:	47c8      	blx	r9
	__asm__ volatile(
   25442:	f04f 0320 	mov.w	r3, #32
   25446:	f3ef 8a11 	mrs	sl, BASEPRI
   2544a:	f383 8812 	msr	BASEPRI_MAX, r3
   2544e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25452:	4630      	mov	r0, r6
   25454:	f7ff fbe4 	bl	24c20 <z_spin_lock_valid>
   25458:	2800      	cmp	r0, #0
   2545a:	d083      	beq.n	25364 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   2545c:	4630      	mov	r0, r6
   2545e:	f7ff fbfb 	bl	24c58 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   25462:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25464:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25466:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2546a:	d417      	bmi.n	2549c <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   2546c:	60ea      	str	r2, [r5, #12]
   2546e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25472:	4630      	mov	r0, r6
   25474:	f023 0302 	bic.w	r3, r3, #2
   25478:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   2547c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25480:	f7ff fbdc 	bl	24c3c <z_spin_unlock_valid>
   25484:	2800      	cmp	r0, #0
   25486:	d0b2      	beq.n	253ee <work_queue_main+0xae>
	__asm__ volatile(
   25488:	f38a 8811 	msr	BASEPRI, sl
   2548c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25490:	2d00      	cmp	r5, #0
   25492:	f47f af5b 	bne.w	2534c <work_queue_main+0xc>
	z_impl_k_yield();
   25496:	f001 fb93 	bl	26bc0 <z_impl_k_yield>
}
   2549a:	e757      	b.n	2534c <work_queue_main+0xc>
	return list->head;
   2549c:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2549e:	f023 0303 	bic.w	r3, r3, #3
   254a2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   254a4:	2800      	cmp	r0, #0
   254a6:	d0e2      	beq.n	2546e <work_queue_main+0x12e>
	return node->next;
   254a8:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   254ac:	46c3      	mov	fp, r8
	return node->next;
   254ae:	f8d0 9000 	ldr.w	r9, [r0]
   254b2:	2800      	cmp	r0, #0
   254b4:	d0db      	beq.n	2546e <work_queue_main+0x12e>
		if (wc->work == work) {
   254b6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   254b8:	4602      	mov	r2, r0
		if (wc->work == work) {
   254ba:	429d      	cmp	r5, r3
   254bc:	d10d      	bne.n	254da <work_queue_main+0x19a>
   254be:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   254c0:	f1b8 0f00 	cmp.w	r8, #0
   254c4:	d112      	bne.n	254ec <work_queue_main+0x1ac>
   254c6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   254c8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   254ca:	4283      	cmp	r3, r0
   254cc:	d100      	bne.n	254d0 <work_queue_main+0x190>
	list->tail = node;
   254ce:	607a      	str	r2, [r7, #4]
	parent->next = child;
   254d0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   254d4:	f7ff fe5c 	bl	25190 <z_impl_k_sem_give>
}
   254d8:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   254da:	f1b9 0f00 	cmp.w	r9, #0
   254de:	d00d      	beq.n	254fc <work_queue_main+0x1bc>
	return node->next;
   254e0:	f8d9 3000 	ldr.w	r3, [r9]
   254e4:	4648      	mov	r0, r9
   254e6:	4690      	mov	r8, r2
   254e8:	4699      	mov	r9, r3
   254ea:	e7e2      	b.n	254b2 <work_queue_main+0x172>
	parent->next = child;
   254ec:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   254f0:	687b      	ldr	r3, [r7, #4]
   254f2:	4283      	cmp	r3, r0
	list->tail = node;
   254f4:	bf08      	it	eq
   254f6:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   254fa:	e7e9      	b.n	254d0 <work_queue_main+0x190>
   254fc:	464b      	mov	r3, r9
   254fe:	e7f1      	b.n	254e4 <work_queue_main+0x1a4>
   25500:	2000eb80 	.word	0x2000eb80
   25504:	2000eb78 	.word	0x2000eb78
   25508:	000340d9 	.word	0x000340d9
   2550c:	00034132 	.word	0x00034132
   25510:	00033bc2 	.word	0x00033bc2
   25514:	00034147 	.word	0x00034147
   25518:	00034106 	.word	0x00034106
   2551c:	0003411d 	.word	0x0003411d
   25520:	0003b87b 	.word	0x0003b87b
   25524:	0003b85a 	.word	0x0003b85a

00025528 <cancel_sync_locked>:
{
   25528:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2552a:	68c3      	ldr	r3, [r0, #12]
{
   2552c:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   2552e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25532:	079b      	lsls	r3, r3, #30
{
   25534:	460c      	mov	r4, r1
	if (ret) {
   25536:	d50d      	bpl.n	25554 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25538:	2201      	movs	r2, #1
   2553a:	2100      	movs	r1, #0
   2553c:	f104 0008 	add.w	r0, r4, #8
   25540:	f00a ffa2 	bl	30488 <z_impl_k_sem_init>
	parent->next = child;
   25544:	2300      	movs	r3, #0
   25546:	6023      	str	r3, [r4, #0]
	return list->tail;
   25548:	4b05      	ldr	r3, [pc, #20]	; (25560 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2554a:	6065      	str	r5, [r4, #4]
   2554c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2554e:	b91a      	cbnz	r2, 25558 <cancel_sync_locked+0x30>
	list->head = node;
   25550:	e9c3 4400 	strd	r4, r4, [r3]
}
   25554:	4630      	mov	r0, r6
   25556:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25558:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2555a:	605c      	str	r4, [r3, #4]
}
   2555c:	e7fa      	b.n	25554 <cancel_sync_locked+0x2c>
   2555e:	bf00      	nop
   25560:	2000eb78 	.word	0x2000eb78

00025564 <submit_to_queue_locked>:
{
   25564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25566:	68c3      	ldr	r3, [r0, #12]
{
   25568:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2556a:	079a      	lsls	r2, r3, #30
{
   2556c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2556e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25572:	d439      	bmi.n	255e8 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25574:	075b      	lsls	r3, r3, #29
   25576:	d425      	bmi.n	255c4 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   25578:	680b      	ldr	r3, [r1, #0]
   2557a:	b90b      	cbnz	r3, 25580 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2557c:	6883      	ldr	r3, [r0, #8]
   2557e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25580:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25582:	07dd      	lsls	r5, r3, #31
   25584:	d521      	bpl.n	255ca <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   25586:	68a3      	ldr	r3, [r4, #8]
   25588:	b95b      	cbnz	r3, 255a2 <submit_to_queue_locked+0x3e>
   2558a:	4928      	ldr	r1, [pc, #160]	; (2562c <submit_to_queue_locked+0xc8>)
   2558c:	4828      	ldr	r0, [pc, #160]	; (25630 <submit_to_queue_locked+0xcc>)
   2558e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   25592:	4a28      	ldr	r2, [pc, #160]	; (25634 <submit_to_queue_locked+0xd0>)
   25594:	f005 fc10 	bl	2adb8 <assert_print>
   25598:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2559c:	4825      	ldr	r0, [pc, #148]	; (25634 <submit_to_queue_locked+0xd0>)
   2559e:	f005 fc04 	bl	2adaa <assert_post_action>
			ret = 2;
   255a2:	2602      	movs	r6, #2
			*queuep = work->queue;
   255a4:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   255a6:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   255a8:	2d00      	cmp	r5, #0
   255aa:	d03c      	beq.n	25626 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   255ac:	4b22      	ldr	r3, [pc, #136]	; (25638 <submit_to_queue_locked+0xd4>)
   255ae:	689b      	ldr	r3, [r3, #8]
   255b0:	42ab      	cmp	r3, r5
   255b2:	d00c      	beq.n	255ce <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   255b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   255b8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   255ba:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   255be:	d416      	bmi.n	255ee <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   255c0:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   255c4:	2300      	movs	r3, #0
   255c6:	603b      	str	r3, [r7, #0]
	return ret;
   255c8:	e027      	b.n	2561a <submit_to_queue_locked+0xb6>
		ret = 1;
   255ca:	2601      	movs	r6, #1
   255cc:	e7eb      	b.n	255a6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   255ce:	f00a ff06 	bl	303de <k_is_in_isr>
   255d2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   255d6:	2800      	cmp	r0, #0
   255d8:	d1ee      	bne.n	255b8 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   255da:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   255dc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   255e0:	d5ee      	bpl.n	255c0 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   255e2:	b152      	cbz	r2, 255fa <submit_to_queue_locked+0x96>
   255e4:	075b      	lsls	r3, r3, #29
   255e6:	d408      	bmi.n	255fa <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   255e8:	f06f 060f 	mvn.w	r6, #15
   255ec:	e7ea      	b.n	255c4 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   255ee:	2a00      	cmp	r2, #0
   255f0:	d1fa      	bne.n	255e8 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   255f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   255f6:	2b00      	cmp	r3, #0
   255f8:	d1f6      	bne.n	255e8 <submit_to_queue_locked+0x84>
	parent->next = child;
   255fa:	2300      	movs	r3, #0
   255fc:	6023      	str	r3, [r4, #0]
	return list->tail;
   255fe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   25602:	b963      	cbnz	r3, 2561e <submit_to_queue_locked+0xba>
	list->head = node;
   25604:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   25608:	4628      	mov	r0, r5
   2560a:	f00a ff67 	bl	304dc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2560e:	68e3      	ldr	r3, [r4, #12]
   25610:	f043 0304 	orr.w	r3, r3, #4
   25614:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25616:	683b      	ldr	r3, [r7, #0]
   25618:	60a3      	str	r3, [r4, #8]
}
   2561a:	4630      	mov	r0, r6
   2561c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2561e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25620:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   25624:	e7f0      	b.n	25608 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   25626:	f06f 0615 	mvn.w	r6, #21
   2562a:	e7cb      	b.n	255c4 <submit_to_queue_locked+0x60>
   2562c:	0003b892 	.word	0x0003b892
   25630:	00033bc2 	.word	0x00033bc2
   25634:	0003b85a 	.word	0x0003b85a
   25638:	2000eb4c 	.word	0x2000eb4c

0002563c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   2563c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2563e:	4604      	mov	r4, r0
	__asm__ volatile(
   25640:	f04f 0320 	mov.w	r3, #32
   25644:	f3ef 8511 	mrs	r5, BASEPRI
   25648:	f383 8812 	msr	BASEPRI_MAX, r3
   2564c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25650:	481c      	ldr	r0, [pc, #112]	; (256c4 <work_timeout+0x88>)
   25652:	f7ff fae5 	bl	24c20 <z_spin_lock_valid>
   25656:	b968      	cbnz	r0, 25674 <work_timeout+0x38>
   25658:	2394      	movs	r3, #148	; 0x94
   2565a:	4a1b      	ldr	r2, [pc, #108]	; (256c8 <work_timeout+0x8c>)
   2565c:	491b      	ldr	r1, [pc, #108]	; (256cc <work_timeout+0x90>)
   2565e:	481c      	ldr	r0, [pc, #112]	; (256d0 <work_timeout+0x94>)
   25660:	f005 fbaa 	bl	2adb8 <assert_print>
   25664:	4917      	ldr	r1, [pc, #92]	; (256c4 <work_timeout+0x88>)
   25666:	481b      	ldr	r0, [pc, #108]	; (256d4 <work_timeout+0x98>)
   25668:	f005 fba6 	bl	2adb8 <assert_print>
   2566c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2566e:	4816      	ldr	r0, [pc, #88]	; (256c8 <work_timeout+0x8c>)
   25670:	f005 fb9b 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   25674:	4813      	ldr	r0, [pc, #76]	; (256c4 <work_timeout+0x88>)
   25676:	f7ff faef 	bl	24c58 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2567a:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2567c:	2103      	movs	r1, #3
   2567e:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   25680:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25682:	f1a4 0610 	sub.w	r6, r4, #16
   25686:	f00a ff0f 	bl	304a8 <flag_test_and_clear>
   2568a:	b128      	cbz	r0, 25698 <work_timeout+0x5c>
		queue = dw->queue;
   2568c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2568e:	4630      	mov	r0, r6
   25690:	a901      	add	r1, sp, #4
		queue = dw->queue;
   25692:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25694:	f7ff ff66 	bl	25564 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25698:	480a      	ldr	r0, [pc, #40]	; (256c4 <work_timeout+0x88>)
   2569a:	f7ff facf 	bl	24c3c <z_spin_unlock_valid>
   2569e:	b958      	cbnz	r0, 256b8 <work_timeout+0x7c>
   256a0:	23c2      	movs	r3, #194	; 0xc2
   256a2:	4a09      	ldr	r2, [pc, #36]	; (256c8 <work_timeout+0x8c>)
   256a4:	490c      	ldr	r1, [pc, #48]	; (256d8 <work_timeout+0x9c>)
   256a6:	480a      	ldr	r0, [pc, #40]	; (256d0 <work_timeout+0x94>)
   256a8:	f005 fb86 	bl	2adb8 <assert_print>
   256ac:	4905      	ldr	r1, [pc, #20]	; (256c4 <work_timeout+0x88>)
   256ae:	480b      	ldr	r0, [pc, #44]	; (256dc <work_timeout+0xa0>)
   256b0:	f005 fb82 	bl	2adb8 <assert_print>
   256b4:	21c2      	movs	r1, #194	; 0xc2
   256b6:	e7da      	b.n	2566e <work_timeout+0x32>
	__asm__ volatile(
   256b8:	f385 8811 	msr	BASEPRI, r5
   256bc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   256c0:	b002      	add	sp, #8
   256c2:	bd70      	pop	{r4, r5, r6, pc}
   256c4:	2000eb80 	.word	0x2000eb80
   256c8:	000340d9 	.word	0x000340d9
   256cc:	00034132 	.word	0x00034132
   256d0:	00033bc2 	.word	0x00033bc2
   256d4:	00034147 	.word	0x00034147
   256d8:	00034106 	.word	0x00034106
   256dc:	0003411d 	.word	0x0003411d

000256e0 <k_work_init>:
{
   256e0:	b538      	push	{r3, r4, r5, lr}
   256e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   256e4:	4604      	mov	r4, r0
   256e6:	b948      	cbnz	r0, 256fc <k_work_init+0x1c>
   256e8:	490c      	ldr	r1, [pc, #48]	; (2571c <k_work_init+0x3c>)
   256ea:	2389      	movs	r3, #137	; 0x89
   256ec:	4a0c      	ldr	r2, [pc, #48]	; (25720 <k_work_init+0x40>)
   256ee:	480d      	ldr	r0, [pc, #52]	; (25724 <k_work_init+0x44>)
   256f0:	f005 fb62 	bl	2adb8 <assert_print>
   256f4:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   256f6:	480a      	ldr	r0, [pc, #40]	; (25720 <k_work_init+0x40>)
   256f8:	f005 fb57 	bl	2adaa <assert_post_action>
   256fc:	b939      	cbnz	r1, 2570e <k_work_init+0x2e>
   256fe:	490a      	ldr	r1, [pc, #40]	; (25728 <k_work_init+0x48>)
   25700:	238a      	movs	r3, #138	; 0x8a
   25702:	4a07      	ldr	r2, [pc, #28]	; (25720 <k_work_init+0x40>)
   25704:	4807      	ldr	r0, [pc, #28]	; (25724 <k_work_init+0x44>)
   25706:	f005 fb57 	bl	2adb8 <assert_print>
   2570a:	218a      	movs	r1, #138	; 0x8a
   2570c:	e7f3      	b.n	256f6 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2570e:	2210      	movs	r2, #16
   25710:	2100      	movs	r1, #0
   25712:	f00b f8b6 	bl	30882 <memset>
   25716:	6065      	str	r5, [r4, #4]
}
   25718:	bd38      	pop	{r3, r4, r5, pc}
   2571a:	bf00      	nop
   2571c:	0003b931 	.word	0x0003b931
   25720:	0003b85a 	.word	0x0003b85a
   25724:	00033bc2 	.word	0x00033bc2
   25728:	0003b87b 	.word	0x0003b87b

0002572c <k_work_busy_get>:
{
   2572c:	b538      	push	{r3, r4, r5, lr}
   2572e:	4604      	mov	r4, r0
	__asm__ volatile(
   25730:	f04f 0320 	mov.w	r3, #32
   25734:	f3ef 8511 	mrs	r5, BASEPRI
   25738:	f383 8812 	msr	BASEPRI_MAX, r3
   2573c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25740:	4816      	ldr	r0, [pc, #88]	; (2579c <k_work_busy_get+0x70>)
   25742:	f7ff fa6d 	bl	24c20 <z_spin_lock_valid>
   25746:	b968      	cbnz	r0, 25764 <k_work_busy_get+0x38>
   25748:	2394      	movs	r3, #148	; 0x94
   2574a:	4a15      	ldr	r2, [pc, #84]	; (257a0 <k_work_busy_get+0x74>)
   2574c:	4915      	ldr	r1, [pc, #84]	; (257a4 <k_work_busy_get+0x78>)
   2574e:	4816      	ldr	r0, [pc, #88]	; (257a8 <k_work_busy_get+0x7c>)
   25750:	f005 fb32 	bl	2adb8 <assert_print>
   25754:	4911      	ldr	r1, [pc, #68]	; (2579c <k_work_busy_get+0x70>)
   25756:	4815      	ldr	r0, [pc, #84]	; (257ac <k_work_busy_get+0x80>)
   25758:	f005 fb2e 	bl	2adb8 <assert_print>
   2575c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2575e:	4810      	ldr	r0, [pc, #64]	; (257a0 <k_work_busy_get+0x74>)
   25760:	f005 fb23 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   25764:	480d      	ldr	r0, [pc, #52]	; (2579c <k_work_busy_get+0x70>)
   25766:	f7ff fa77 	bl	24c58 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2576a:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2576c:	480b      	ldr	r0, [pc, #44]	; (2579c <k_work_busy_get+0x70>)
   2576e:	f004 040f 	and.w	r4, r4, #15
   25772:	f7ff fa63 	bl	24c3c <z_spin_unlock_valid>
   25776:	b958      	cbnz	r0, 25790 <k_work_busy_get+0x64>
   25778:	23c2      	movs	r3, #194	; 0xc2
   2577a:	4a09      	ldr	r2, [pc, #36]	; (257a0 <k_work_busy_get+0x74>)
   2577c:	490c      	ldr	r1, [pc, #48]	; (257b0 <k_work_busy_get+0x84>)
   2577e:	480a      	ldr	r0, [pc, #40]	; (257a8 <k_work_busy_get+0x7c>)
   25780:	f005 fb1a 	bl	2adb8 <assert_print>
   25784:	4905      	ldr	r1, [pc, #20]	; (2579c <k_work_busy_get+0x70>)
   25786:	480b      	ldr	r0, [pc, #44]	; (257b4 <k_work_busy_get+0x88>)
   25788:	f005 fb16 	bl	2adb8 <assert_print>
   2578c:	21c2      	movs	r1, #194	; 0xc2
   2578e:	e7e6      	b.n	2575e <k_work_busy_get+0x32>
	__asm__ volatile(
   25790:	f385 8811 	msr	BASEPRI, r5
   25794:	f3bf 8f6f 	isb	sy
}
   25798:	4620      	mov	r0, r4
   2579a:	bd38      	pop	{r3, r4, r5, pc}
   2579c:	2000eb80 	.word	0x2000eb80
   257a0:	000340d9 	.word	0x000340d9
   257a4:	00034132 	.word	0x00034132
   257a8:	00033bc2 	.word	0x00033bc2
   257ac:	00034147 	.word	0x00034147
   257b0:	00034106 	.word	0x00034106
   257b4:	0003411d 	.word	0x0003411d

000257b8 <z_work_submit_to_queue>:
{
   257b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   257ba:	460c      	mov	r4, r1
{
   257bc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   257be:	b959      	cbnz	r1, 257d8 <z_work_submit_to_queue+0x20>
   257c0:	4921      	ldr	r1, [pc, #132]	; (25848 <z_work_submit_to_queue+0x90>)
   257c2:	4822      	ldr	r0, [pc, #136]	; (2584c <z_work_submit_to_queue+0x94>)
   257c4:	f44f 73ba 	mov.w	r3, #372	; 0x174
   257c8:	4a21      	ldr	r2, [pc, #132]	; (25850 <z_work_submit_to_queue+0x98>)
   257ca:	f005 faf5 	bl	2adb8 <assert_print>
   257ce:	f44f 71ba 	mov.w	r1, #372	; 0x174
   257d2:	481f      	ldr	r0, [pc, #124]	; (25850 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257d4:	f005 fae9 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   257d8:	f04f 0320 	mov.w	r3, #32
   257dc:	f3ef 8511 	mrs	r5, BASEPRI
   257e0:	f383 8812 	msr	BASEPRI_MAX, r3
   257e4:	f3bf 8f6f 	isb	sy
   257e8:	481a      	ldr	r0, [pc, #104]	; (25854 <z_work_submit_to_queue+0x9c>)
   257ea:	f7ff fa19 	bl	24c20 <z_spin_lock_valid>
   257ee:	b960      	cbnz	r0, 2580a <z_work_submit_to_queue+0x52>
   257f0:	2394      	movs	r3, #148	; 0x94
   257f2:	4a19      	ldr	r2, [pc, #100]	; (25858 <z_work_submit_to_queue+0xa0>)
   257f4:	4919      	ldr	r1, [pc, #100]	; (2585c <z_work_submit_to_queue+0xa4>)
   257f6:	4815      	ldr	r0, [pc, #84]	; (2584c <z_work_submit_to_queue+0x94>)
   257f8:	f005 fade 	bl	2adb8 <assert_print>
   257fc:	4915      	ldr	r1, [pc, #84]	; (25854 <z_work_submit_to_queue+0x9c>)
   257fe:	4818      	ldr	r0, [pc, #96]	; (25860 <z_work_submit_to_queue+0xa8>)
   25800:	f005 fada 	bl	2adb8 <assert_print>
   25804:	2194      	movs	r1, #148	; 0x94
   25806:	4814      	ldr	r0, [pc, #80]	; (25858 <z_work_submit_to_queue+0xa0>)
   25808:	e7e4      	b.n	257d4 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   2580a:	4812      	ldr	r0, [pc, #72]	; (25854 <z_work_submit_to_queue+0x9c>)
   2580c:	f7ff fa24 	bl	24c58 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25810:	4620      	mov	r0, r4
   25812:	a901      	add	r1, sp, #4
   25814:	f7ff fea6 	bl	25564 <submit_to_queue_locked>
   25818:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2581a:	480e      	ldr	r0, [pc, #56]	; (25854 <z_work_submit_to_queue+0x9c>)
   2581c:	f7ff fa0e 	bl	24c3c <z_spin_unlock_valid>
   25820:	b958      	cbnz	r0, 2583a <z_work_submit_to_queue+0x82>
   25822:	23c2      	movs	r3, #194	; 0xc2
   25824:	4a0c      	ldr	r2, [pc, #48]	; (25858 <z_work_submit_to_queue+0xa0>)
   25826:	490f      	ldr	r1, [pc, #60]	; (25864 <z_work_submit_to_queue+0xac>)
   25828:	4808      	ldr	r0, [pc, #32]	; (2584c <z_work_submit_to_queue+0x94>)
   2582a:	f005 fac5 	bl	2adb8 <assert_print>
   2582e:	4909      	ldr	r1, [pc, #36]	; (25854 <z_work_submit_to_queue+0x9c>)
   25830:	480d      	ldr	r0, [pc, #52]	; (25868 <z_work_submit_to_queue+0xb0>)
   25832:	f005 fac1 	bl	2adb8 <assert_print>
   25836:	21c2      	movs	r1, #194	; 0xc2
   25838:	e7e5      	b.n	25806 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   2583a:	f385 8811 	msr	BASEPRI, r5
   2583e:	f3bf 8f6f 	isb	sy
}
   25842:	4620      	mov	r0, r4
   25844:	b003      	add	sp, #12
   25846:	bd30      	pop	{r4, r5, pc}
   25848:	0003b931 	.word	0x0003b931
   2584c:	00033bc2 	.word	0x00033bc2
   25850:	0003b85a 	.word	0x0003b85a
   25854:	2000eb80 	.word	0x2000eb80
   25858:	000340d9 	.word	0x000340d9
   2585c:	00034132 	.word	0x00034132
   25860:	00034147 	.word	0x00034147
   25864:	00034106 	.word	0x00034106
   25868:	0003411d 	.word	0x0003411d

0002586c <k_work_submit>:
{
   2586c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2586e:	4801      	ldr	r0, [pc, #4]	; (25874 <k_work_submit+0x8>)
   25870:	f00a be6e 	b.w	30550 <k_work_submit_to_queue>
   25874:	2000ded0 	.word	0x2000ded0

00025878 <k_work_queue_init>:
{
   25878:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   2587a:	b958      	cbnz	r0, 25894 <k_work_queue_init+0x1c>
   2587c:	4908      	ldr	r1, [pc, #32]	; (258a0 <k_work_queue_init+0x28>)
   2587e:	4809      	ldr	r0, [pc, #36]	; (258a4 <k_work_queue_init+0x2c>)
   25880:	f240 23b9 	movw	r3, #697	; 0x2b9
   25884:	4a08      	ldr	r2, [pc, #32]	; (258a8 <k_work_queue_init+0x30>)
   25886:	f005 fa97 	bl	2adb8 <assert_print>
   2588a:	f240 21b9 	movw	r1, #697	; 0x2b9
   2588e:	4806      	ldr	r0, [pc, #24]	; (258a8 <k_work_queue_init+0x30>)
   25890:	f005 fa8b 	bl	2adaa <assert_post_action>
	*queue = (struct k_work_q) {
   25894:	22a8      	movs	r2, #168	; 0xa8
   25896:	2100      	movs	r1, #0
   25898:	f00a fff3 	bl	30882 <memset>
}
   2589c:	bd08      	pop	{r3, pc}
   2589e:	bf00      	nop
   258a0:	0003b898 	.word	0x0003b898
   258a4:	00033bc2 	.word	0x00033bc2
   258a8:	0003b85a 	.word	0x0003b85a

000258ac <k_work_queue_start>:
{
   258ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   258ae:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   258b0:	4604      	mov	r4, r0
{
   258b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   258b4:	b958      	cbnz	r0, 258ce <k_work_queue_start+0x22>
   258b6:	492b      	ldr	r1, [pc, #172]	; (25964 <k_work_queue_start+0xb8>)
   258b8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   258bc:	4a2a      	ldr	r2, [pc, #168]	; (25968 <k_work_queue_start+0xbc>)
   258be:	482b      	ldr	r0, [pc, #172]	; (2596c <k_work_queue_start+0xc0>)
   258c0:	f005 fa7a 	bl	2adb8 <assert_print>
   258c4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   258c8:	4827      	ldr	r0, [pc, #156]	; (25968 <k_work_queue_start+0xbc>)
   258ca:	f005 fa6e 	bl	2adaa <assert_post_action>
   258ce:	b949      	cbnz	r1, 258e4 <k_work_queue_start+0x38>
   258d0:	4927      	ldr	r1, [pc, #156]	; (25970 <k_work_queue_start+0xc4>)
   258d2:	f240 23c9 	movw	r3, #713	; 0x2c9
   258d6:	4a24      	ldr	r2, [pc, #144]	; (25968 <k_work_queue_start+0xbc>)
   258d8:	4824      	ldr	r0, [pc, #144]	; (2596c <k_work_queue_start+0xc0>)
   258da:	f005 fa6d 	bl	2adb8 <assert_print>
   258de:	f240 21c9 	movw	r1, #713	; 0x2c9
   258e2:	e7f1      	b.n	258c8 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   258e4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   258e8:	f010 0001 	ands.w	r0, r0, #1
   258ec:	d009      	beq.n	25902 <k_work_queue_start+0x56>
   258ee:	4921      	ldr	r1, [pc, #132]	; (25974 <k_work_queue_start+0xc8>)
   258f0:	f240 23ca 	movw	r3, #714	; 0x2ca
   258f4:	4a1c      	ldr	r2, [pc, #112]	; (25968 <k_work_queue_start+0xbc>)
   258f6:	481d      	ldr	r0, [pc, #116]	; (2596c <k_work_queue_start+0xc0>)
   258f8:	f005 fa5e 	bl	2adb8 <assert_print>
   258fc:	f240 21ca 	movw	r1, #714	; 0x2ca
   25900:	e7e2      	b.n	258c8 <k_work_queue_start+0x1c>
	list->tail = NULL;
   25902:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   25906:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   2590a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2590e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25912:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   25916:	b31d      	cbz	r5, 25960 <k_work_queue_start+0xb4>
   25918:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2591a:	2800      	cmp	r0, #0
   2591c:	f240 1001 	movw	r0, #257	; 0x101
   25920:	bf08      	it	eq
   25922:	2001      	moveq	r0, #1
	*flagp = flags;
   25924:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25928:	2000      	movs	r0, #0
   2592a:	f04f 36ff 	mov.w	r6, #4294967295
   2592e:	f04f 37ff 	mov.w	r7, #4294967295
   25932:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25936:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2593a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2593e:	4620      	mov	r0, r4
   25940:	4b0d      	ldr	r3, [pc, #52]	; (25978 <k_work_queue_start+0xcc>)
   25942:	9400      	str	r4, [sp, #0]
   25944:	f7ff f8a2 	bl	24a8c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25948:	b125      	cbz	r5, 25954 <k_work_queue_start+0xa8>
   2594a:	6829      	ldr	r1, [r5, #0]
   2594c:	b111      	cbz	r1, 25954 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   2594e:	4620      	mov	r0, r4
   25950:	f00a fd4b 	bl	303ea <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25954:	4620      	mov	r0, r4
}
   25956:	b009      	add	sp, #36	; 0x24
   25958:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2595c:	f00a bd4a 	b.w	303f4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25960:	2001      	movs	r0, #1
   25962:	e7df      	b.n	25924 <k_work_queue_start+0x78>
   25964:	0003b8f0 	.word	0x0003b8f0
   25968:	0003b85a 	.word	0x0003b85a
   2596c:	00033bc2 	.word	0x00033bc2
   25970:	0003b8f6 	.word	0x0003b8f6
   25974:	0003b8fc 	.word	0x0003b8fc
   25978:	00025341 	.word	0x00025341

0002597c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2597c:	b538      	push	{r3, r4, r5, lr}
   2597e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25980:	4604      	mov	r4, r0
   25982:	b958      	cbnz	r0, 2599c <k_work_init_delayable+0x20>
   25984:	490f      	ldr	r1, [pc, #60]	; (259c4 <k_work_init_delayable+0x48>)
   25986:	f44f 7350 	mov.w	r3, #832	; 0x340
   2598a:	4a0f      	ldr	r2, [pc, #60]	; (259c8 <k_work_init_delayable+0x4c>)
   2598c:	480f      	ldr	r0, [pc, #60]	; (259cc <k_work_init_delayable+0x50>)
   2598e:	f005 fa13 	bl	2adb8 <assert_print>
   25992:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   25996:	480c      	ldr	r0, [pc, #48]	; (259c8 <k_work_init_delayable+0x4c>)
   25998:	f005 fa07 	bl	2adaa <assert_post_action>
   2599c:	b949      	cbnz	r1, 259b2 <k_work_init_delayable+0x36>
   2599e:	490c      	ldr	r1, [pc, #48]	; (259d0 <k_work_init_delayable+0x54>)
   259a0:	f240 3341 	movw	r3, #833	; 0x341
   259a4:	4a08      	ldr	r2, [pc, #32]	; (259c8 <k_work_init_delayable+0x4c>)
   259a6:	4809      	ldr	r0, [pc, #36]	; (259cc <k_work_init_delayable+0x50>)
   259a8:	f005 fa06 	bl	2adb8 <assert_print>
   259ac:	f240 3141 	movw	r1, #833	; 0x341
   259b0:	e7f1      	b.n	25996 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   259b2:	2230      	movs	r2, #48	; 0x30
   259b4:	2100      	movs	r1, #0
   259b6:	f00a ff64 	bl	30882 <memset>
   259ba:	f44f 7380 	mov.w	r3, #256	; 0x100
   259be:	6065      	str	r5, [r4, #4]
   259c0:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   259c2:	bd38      	pop	{r3, r4, r5, pc}
   259c4:	0003b930 	.word	0x0003b930
   259c8:	0003b85a 	.word	0x0003b85a
   259cc:	00033bc2 	.word	0x00033bc2
   259d0:	0003b87b 	.word	0x0003b87b

000259d4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   259d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   259d6:	4616      	mov	r6, r2
   259d8:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   259da:	460c      	mov	r4, r1
{
   259dc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   259de:	b959      	cbnz	r1, 259f8 <k_work_schedule_for_queue+0x24>
   259e0:	492d      	ldr	r1, [pc, #180]	; (25a98 <k_work_schedule_for_queue+0xc4>)
   259e2:	482e      	ldr	r0, [pc, #184]	; (25a9c <k_work_schedule_for_queue+0xc8>)
   259e4:	f240 33ba 	movw	r3, #954	; 0x3ba
   259e8:	4a2d      	ldr	r2, [pc, #180]	; (25aa0 <k_work_schedule_for_queue+0xcc>)
   259ea:	f005 f9e5 	bl	2adb8 <assert_print>
   259ee:	f240 31ba 	movw	r1, #954	; 0x3ba
   259f2:	482b      	ldr	r0, [pc, #172]	; (25aa0 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259f4:	f005 f9d9 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   259f8:	f04f 0320 	mov.w	r3, #32
   259fc:	f3ef 8711 	mrs	r7, BASEPRI
   25a00:	f383 8812 	msr	BASEPRI_MAX, r3
   25a04:	f3bf 8f6f 	isb	sy
   25a08:	4826      	ldr	r0, [pc, #152]	; (25aa4 <k_work_schedule_for_queue+0xd0>)
   25a0a:	f7ff f909 	bl	24c20 <z_spin_lock_valid>
   25a0e:	b960      	cbnz	r0, 25a2a <k_work_schedule_for_queue+0x56>
   25a10:	2394      	movs	r3, #148	; 0x94
   25a12:	4a25      	ldr	r2, [pc, #148]	; (25aa8 <k_work_schedule_for_queue+0xd4>)
   25a14:	4925      	ldr	r1, [pc, #148]	; (25aac <k_work_schedule_for_queue+0xd8>)
   25a16:	4821      	ldr	r0, [pc, #132]	; (25a9c <k_work_schedule_for_queue+0xc8>)
   25a18:	f005 f9ce 	bl	2adb8 <assert_print>
   25a1c:	4921      	ldr	r1, [pc, #132]	; (25aa4 <k_work_schedule_for_queue+0xd0>)
   25a1e:	4824      	ldr	r0, [pc, #144]	; (25ab0 <k_work_schedule_for_queue+0xdc>)
   25a20:	f005 f9ca 	bl	2adb8 <assert_print>
   25a24:	2194      	movs	r1, #148	; 0x94
   25a26:	4820      	ldr	r0, [pc, #128]	; (25aa8 <k_work_schedule_for_queue+0xd4>)
   25a28:	e7e4      	b.n	259f4 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   25a2a:	481e      	ldr	r0, [pc, #120]	; (25aa4 <k_work_schedule_for_queue+0xd0>)
   25a2c:	f7ff f914 	bl	24c58 <z_spin_lock_set_owner>
	return *flagp;
   25a30:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25a32:	f013 0f0e 	tst.w	r3, #14
   25a36:	d125      	bne.n	25a84 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25a38:	ea55 0206 	orrs.w	r2, r5, r6
   25a3c:	d114      	bne.n	25a68 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   25a3e:	4620      	mov	r0, r4
   25a40:	a901      	add	r1, sp, #4
   25a42:	f7ff fd8f 	bl	25564 <submit_to_queue_locked>
   25a46:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a48:	4816      	ldr	r0, [pc, #88]	; (25aa4 <k_work_schedule_for_queue+0xd0>)
   25a4a:	f7ff f8f7 	bl	24c3c <z_spin_unlock_valid>
   25a4e:	b9d8      	cbnz	r0, 25a88 <k_work_schedule_for_queue+0xb4>
   25a50:	23c2      	movs	r3, #194	; 0xc2
   25a52:	4a15      	ldr	r2, [pc, #84]	; (25aa8 <k_work_schedule_for_queue+0xd4>)
   25a54:	4917      	ldr	r1, [pc, #92]	; (25ab4 <k_work_schedule_for_queue+0xe0>)
   25a56:	4811      	ldr	r0, [pc, #68]	; (25a9c <k_work_schedule_for_queue+0xc8>)
   25a58:	f005 f9ae 	bl	2adb8 <assert_print>
   25a5c:	4911      	ldr	r1, [pc, #68]	; (25aa4 <k_work_schedule_for_queue+0xd0>)
   25a5e:	4816      	ldr	r0, [pc, #88]	; (25ab8 <k_work_schedule_for_queue+0xe4>)
   25a60:	f005 f9aa 	bl	2adb8 <assert_print>
   25a64:	21c2      	movs	r1, #194	; 0xc2
   25a66:	e7de      	b.n	25a26 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   25a68:	f043 0308 	orr.w	r3, r3, #8
   25a6c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25a6e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25a70:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   25a74:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25a76:	4632      	mov	r2, r6
   25a78:	462b      	mov	r3, r5
   25a7a:	4910      	ldr	r1, [pc, #64]	; (25abc <k_work_schedule_for_queue+0xe8>)
   25a7c:	f001 fbac 	bl	271d8 <z_add_timeout>
	return ret;
   25a80:	2401      	movs	r4, #1
   25a82:	e7e1      	b.n	25a48 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   25a84:	2400      	movs	r4, #0
   25a86:	e7df      	b.n	25a48 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   25a88:	f387 8811 	msr	BASEPRI, r7
   25a8c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25a90:	4620      	mov	r0, r4
   25a92:	b003      	add	sp, #12
   25a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25a96:	bf00      	nop
   25a98:	0003b930 	.word	0x0003b930
   25a9c:	00033bc2 	.word	0x00033bc2
   25aa0:	0003b85a 	.word	0x0003b85a
   25aa4:	2000eb80 	.word	0x2000eb80
   25aa8:	000340d9 	.word	0x000340d9
   25aac:	00034132 	.word	0x00034132
   25ab0:	00034147 	.word	0x00034147
   25ab4:	00034106 	.word	0x00034106
   25ab8:	0003411d 	.word	0x0003411d
   25abc:	0002563d 	.word	0x0002563d

00025ac0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25ac0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25ac2:	4801      	ldr	r0, [pc, #4]	; (25ac8 <k_work_schedule+0x8>)
   25ac4:	f7ff bf86 	b.w	259d4 <k_work_schedule_for_queue>
   25ac8:	2000ded0 	.word	0x2000ded0

00025acc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25ace:	4616      	mov	r6, r2
   25ad0:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25ad2:	460c      	mov	r4, r1
{
   25ad4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   25ad6:	b959      	cbnz	r1, 25af0 <k_work_reschedule_for_queue+0x24>
   25ad8:	492c      	ldr	r1, [pc, #176]	; (25b8c <k_work_reschedule_for_queue+0xc0>)
   25ada:	482d      	ldr	r0, [pc, #180]	; (25b90 <k_work_reschedule_for_queue+0xc4>)
   25adc:	f240 33de 	movw	r3, #990	; 0x3de
   25ae0:	4a2c      	ldr	r2, [pc, #176]	; (25b94 <k_work_reschedule_for_queue+0xc8>)
   25ae2:	f005 f969 	bl	2adb8 <assert_print>
   25ae6:	f240 31de 	movw	r1, #990	; 0x3de
   25aea:	482a      	ldr	r0, [pc, #168]	; (25b94 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25aec:	f005 f95d 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   25af0:	f04f 0320 	mov.w	r3, #32
   25af4:	f3ef 8711 	mrs	r7, BASEPRI
   25af8:	f383 8812 	msr	BASEPRI_MAX, r3
   25afc:	f3bf 8f6f 	isb	sy
   25b00:	4825      	ldr	r0, [pc, #148]	; (25b98 <k_work_reschedule_for_queue+0xcc>)
   25b02:	f7ff f88d 	bl	24c20 <z_spin_lock_valid>
   25b06:	b960      	cbnz	r0, 25b22 <k_work_reschedule_for_queue+0x56>
   25b08:	2394      	movs	r3, #148	; 0x94
   25b0a:	4a24      	ldr	r2, [pc, #144]	; (25b9c <k_work_reschedule_for_queue+0xd0>)
   25b0c:	4924      	ldr	r1, [pc, #144]	; (25ba0 <k_work_reschedule_for_queue+0xd4>)
   25b0e:	4820      	ldr	r0, [pc, #128]	; (25b90 <k_work_reschedule_for_queue+0xc4>)
   25b10:	f005 f952 	bl	2adb8 <assert_print>
   25b14:	4920      	ldr	r1, [pc, #128]	; (25b98 <k_work_reschedule_for_queue+0xcc>)
   25b16:	4823      	ldr	r0, [pc, #140]	; (25ba4 <k_work_reschedule_for_queue+0xd8>)
   25b18:	f005 f94e 	bl	2adb8 <assert_print>
   25b1c:	2194      	movs	r1, #148	; 0x94
   25b1e:	481f      	ldr	r0, [pc, #124]	; (25b9c <k_work_reschedule_for_queue+0xd0>)
   25b20:	e7e4      	b.n	25aec <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   25b22:	481d      	ldr	r0, [pc, #116]	; (25b98 <k_work_reschedule_for_queue+0xcc>)
   25b24:	f7ff f898 	bl	24c58 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   25b28:	4620      	mov	r0, r4
   25b2a:	f00a fcc8 	bl	304be <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25b2e:	ea55 0306 	orrs.w	r3, r5, r6
   25b32:	d114      	bne.n	25b5e <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   25b34:	4620      	mov	r0, r4
   25b36:	a901      	add	r1, sp, #4
   25b38:	f7ff fd14 	bl	25564 <submit_to_queue_locked>
   25b3c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b3e:	4816      	ldr	r0, [pc, #88]	; (25b98 <k_work_reschedule_for_queue+0xcc>)
   25b40:	f7ff f87c 	bl	24c3c <z_spin_unlock_valid>
   25b44:	b9d0      	cbnz	r0, 25b7c <k_work_reschedule_for_queue+0xb0>
   25b46:	23c2      	movs	r3, #194	; 0xc2
   25b48:	4a14      	ldr	r2, [pc, #80]	; (25b9c <k_work_reschedule_for_queue+0xd0>)
   25b4a:	4917      	ldr	r1, [pc, #92]	; (25ba8 <k_work_reschedule_for_queue+0xdc>)
   25b4c:	4810      	ldr	r0, [pc, #64]	; (25b90 <k_work_reschedule_for_queue+0xc4>)
   25b4e:	f005 f933 	bl	2adb8 <assert_print>
   25b52:	4911      	ldr	r1, [pc, #68]	; (25b98 <k_work_reschedule_for_queue+0xcc>)
   25b54:	4815      	ldr	r0, [pc, #84]	; (25bac <k_work_reschedule_for_queue+0xe0>)
   25b56:	f005 f92f 	bl	2adb8 <assert_print>
   25b5a:	21c2      	movs	r1, #194	; 0xc2
   25b5c:	e7df      	b.n	25b1e <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   25b5e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25b60:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   25b64:	f043 0308 	orr.w	r3, r3, #8
   25b68:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25b6a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25b6c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   25b6e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25b70:	490f      	ldr	r1, [pc, #60]	; (25bb0 <k_work_reschedule_for_queue+0xe4>)
   25b72:	462b      	mov	r3, r5
   25b74:	f001 fb30 	bl	271d8 <z_add_timeout>
	return ret;
   25b78:	2401      	movs	r4, #1
   25b7a:	e7e0      	b.n	25b3e <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   25b7c:	f387 8811 	msr	BASEPRI, r7
   25b80:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25b84:	4620      	mov	r0, r4
   25b86:	b003      	add	sp, #12
   25b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25b8a:	bf00      	nop
   25b8c:	0003b930 	.word	0x0003b930
   25b90:	00033bc2 	.word	0x00033bc2
   25b94:	0003b85a 	.word	0x0003b85a
   25b98:	2000eb80 	.word	0x2000eb80
   25b9c:	000340d9 	.word	0x000340d9
   25ba0:	00034132 	.word	0x00034132
   25ba4:	00034147 	.word	0x00034147
   25ba8:	00034106 	.word	0x00034106
   25bac:	0003411d 	.word	0x0003411d
   25bb0:	0002563d 	.word	0x0002563d

00025bb4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25bb4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25bb6:	4801      	ldr	r0, [pc, #4]	; (25bbc <k_work_reschedule+0x8>)
   25bb8:	f7ff bf88 	b.w	25acc <k_work_reschedule_for_queue>
   25bbc:	2000ded0 	.word	0x2000ded0

00025bc0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25bc0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   25bc2:	4604      	mov	r4, r0
   25bc4:	b958      	cbnz	r0, 25bde <k_work_cancel_delayable+0x1e>
   25bc6:	4922      	ldr	r1, [pc, #136]	; (25c50 <k_work_cancel_delayable+0x90>)
   25bc8:	4822      	ldr	r0, [pc, #136]	; (25c54 <k_work_cancel_delayable+0x94>)
   25bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25bce:	4a22      	ldr	r2, [pc, #136]	; (25c58 <k_work_cancel_delayable+0x98>)
   25bd0:	f005 f8f2 	bl	2adb8 <assert_print>
   25bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   25bd8:	481f      	ldr	r0, [pc, #124]	; (25c58 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25bda:	f005 f8e6 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   25bde:	f04f 0320 	mov.w	r3, #32
   25be2:	f3ef 8511 	mrs	r5, BASEPRI
   25be6:	f383 8812 	msr	BASEPRI_MAX, r3
   25bea:	f3bf 8f6f 	isb	sy
   25bee:	481b      	ldr	r0, [pc, #108]	; (25c5c <k_work_cancel_delayable+0x9c>)
   25bf0:	f7ff f816 	bl	24c20 <z_spin_lock_valid>
   25bf4:	b960      	cbnz	r0, 25c10 <k_work_cancel_delayable+0x50>
   25bf6:	2394      	movs	r3, #148	; 0x94
   25bf8:	4a19      	ldr	r2, [pc, #100]	; (25c60 <k_work_cancel_delayable+0xa0>)
   25bfa:	491a      	ldr	r1, [pc, #104]	; (25c64 <k_work_cancel_delayable+0xa4>)
   25bfc:	4815      	ldr	r0, [pc, #84]	; (25c54 <k_work_cancel_delayable+0x94>)
   25bfe:	f005 f8db 	bl	2adb8 <assert_print>
   25c02:	4916      	ldr	r1, [pc, #88]	; (25c5c <k_work_cancel_delayable+0x9c>)
   25c04:	4818      	ldr	r0, [pc, #96]	; (25c68 <k_work_cancel_delayable+0xa8>)
   25c06:	f005 f8d7 	bl	2adb8 <assert_print>
   25c0a:	2194      	movs	r1, #148	; 0x94
   25c0c:	4814      	ldr	r0, [pc, #80]	; (25c60 <k_work_cancel_delayable+0xa0>)
   25c0e:	e7e4      	b.n	25bda <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   25c10:	4812      	ldr	r0, [pc, #72]	; (25c5c <k_work_cancel_delayable+0x9c>)
   25c12:	f7ff f821 	bl	24c58 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   25c16:	4620      	mov	r0, r4
   25c18:	f00a fc51 	bl	304be <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25c1c:	4620      	mov	r0, r4
   25c1e:	f00a fc64 	bl	304ea <cancel_async_locked>
   25c22:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c24:	480d      	ldr	r0, [pc, #52]	; (25c5c <k_work_cancel_delayable+0x9c>)
   25c26:	f7ff f809 	bl	24c3c <z_spin_unlock_valid>
   25c2a:	b958      	cbnz	r0, 25c44 <k_work_cancel_delayable+0x84>
   25c2c:	23c2      	movs	r3, #194	; 0xc2
   25c2e:	4a0c      	ldr	r2, [pc, #48]	; (25c60 <k_work_cancel_delayable+0xa0>)
   25c30:	490e      	ldr	r1, [pc, #56]	; (25c6c <k_work_cancel_delayable+0xac>)
   25c32:	4808      	ldr	r0, [pc, #32]	; (25c54 <k_work_cancel_delayable+0x94>)
   25c34:	f005 f8c0 	bl	2adb8 <assert_print>
   25c38:	4908      	ldr	r1, [pc, #32]	; (25c5c <k_work_cancel_delayable+0x9c>)
   25c3a:	480d      	ldr	r0, [pc, #52]	; (25c70 <k_work_cancel_delayable+0xb0>)
   25c3c:	f005 f8bc 	bl	2adb8 <assert_print>
   25c40:	21c2      	movs	r1, #194	; 0xc2
   25c42:	e7e3      	b.n	25c0c <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   25c44:	f385 8811 	msr	BASEPRI, r5
   25c48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   25c4c:	4620      	mov	r0, r4
   25c4e:	bd38      	pop	{r3, r4, r5, pc}
   25c50:	0003b930 	.word	0x0003b930
   25c54:	00033bc2 	.word	0x00033bc2
   25c58:	0003b85a 	.word	0x0003b85a
   25c5c:	2000eb80 	.word	0x2000eb80
   25c60:	000340d9 	.word	0x000340d9
   25c64:	00034132 	.word	0x00034132
   25c68:	00034147 	.word	0x00034147
   25c6c:	00034106 	.word	0x00034106
   25c70:	0003411d 	.word	0x0003411d

00025c74 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   25c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c78:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25c7a:	4605      	mov	r5, r0
   25c7c:	b958      	cbnz	r0, 25c96 <k_work_cancel_delayable_sync+0x22>
   25c7e:	493a      	ldr	r1, [pc, #232]	; (25d68 <k_work_cancel_delayable_sync+0xf4>)
   25c80:	f240 4311 	movw	r3, #1041	; 0x411
   25c84:	4a39      	ldr	r2, [pc, #228]	; (25d6c <k_work_cancel_delayable_sync+0xf8>)
   25c86:	483a      	ldr	r0, [pc, #232]	; (25d70 <k_work_cancel_delayable_sync+0xfc>)
   25c88:	f005 f896 	bl	2adb8 <assert_print>
   25c8c:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   25c90:	4836      	ldr	r0, [pc, #216]	; (25d6c <k_work_cancel_delayable_sync+0xf8>)
   25c92:	f005 f88a 	bl	2adaa <assert_post_action>
   25c96:	b949      	cbnz	r1, 25cac <k_work_cancel_delayable_sync+0x38>
   25c98:	4936      	ldr	r1, [pc, #216]	; (25d74 <k_work_cancel_delayable_sync+0x100>)
   25c9a:	f240 4312 	movw	r3, #1042	; 0x412
   25c9e:	4a33      	ldr	r2, [pc, #204]	; (25d6c <k_work_cancel_delayable_sync+0xf8>)
   25ca0:	4833      	ldr	r0, [pc, #204]	; (25d70 <k_work_cancel_delayable_sync+0xfc>)
   25ca2:	f005 f889 	bl	2adb8 <assert_print>
   25ca6:	f240 4112 	movw	r1, #1042	; 0x412
   25caa:	e7f1      	b.n	25c90 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   25cac:	f00a fb97 	bl	303de <k_is_in_isr>
   25cb0:	4604      	mov	r4, r0
   25cb2:	b148      	cbz	r0, 25cc8 <k_work_cancel_delayable_sync+0x54>
   25cb4:	4930      	ldr	r1, [pc, #192]	; (25d78 <k_work_cancel_delayable_sync+0x104>)
   25cb6:	f240 4313 	movw	r3, #1043	; 0x413
   25cba:	4a2c      	ldr	r2, [pc, #176]	; (25d6c <k_work_cancel_delayable_sync+0xf8>)
   25cbc:	482c      	ldr	r0, [pc, #176]	; (25d70 <k_work_cancel_delayable_sync+0xfc>)
   25cbe:	f005 f87b 	bl	2adb8 <assert_print>
   25cc2:	f240 4113 	movw	r1, #1043	; 0x413
   25cc6:	e7e3      	b.n	25c90 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   25cc8:	f04f 0320 	mov.w	r3, #32
   25ccc:	f3ef 8811 	mrs	r8, BASEPRI
   25cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   25cd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25cd8:	4828      	ldr	r0, [pc, #160]	; (25d7c <k_work_cancel_delayable_sync+0x108>)
   25cda:	f7fe ffa1 	bl	24c20 <z_spin_lock_valid>
   25cde:	b960      	cbnz	r0, 25cfa <k_work_cancel_delayable_sync+0x86>
   25ce0:	2394      	movs	r3, #148	; 0x94
   25ce2:	4a27      	ldr	r2, [pc, #156]	; (25d80 <k_work_cancel_delayable_sync+0x10c>)
   25ce4:	4927      	ldr	r1, [pc, #156]	; (25d84 <k_work_cancel_delayable_sync+0x110>)
   25ce6:	4822      	ldr	r0, [pc, #136]	; (25d70 <k_work_cancel_delayable_sync+0xfc>)
   25ce8:	f005 f866 	bl	2adb8 <assert_print>
   25cec:	4923      	ldr	r1, [pc, #140]	; (25d7c <k_work_cancel_delayable_sync+0x108>)
   25cee:	4826      	ldr	r0, [pc, #152]	; (25d88 <k_work_cancel_delayable_sync+0x114>)
   25cf0:	f005 f862 	bl	2adb8 <assert_print>
   25cf4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25cf6:	4822      	ldr	r0, [pc, #136]	; (25d80 <k_work_cancel_delayable_sync+0x10c>)
   25cf8:	e7cb      	b.n	25c92 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   25cfa:	4820      	ldr	r0, [pc, #128]	; (25d7c <k_work_cancel_delayable_sync+0x108>)
   25cfc:	f7fe ffac 	bl	24c58 <z_spin_lock_set_owner>
	return *flagp;
   25d00:	68eb      	ldr	r3, [r5, #12]
   25d02:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   25d06:	2b00      	cmp	r3, #0
   25d08:	bf14      	ite	ne
   25d0a:	2701      	movne	r7, #1
   25d0c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   25d0e:	d00a      	beq.n	25d26 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   25d10:	4628      	mov	r0, r5
   25d12:	f00a fbd4 	bl	304be <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25d16:	4628      	mov	r0, r5
   25d18:	f00a fbe7 	bl	304ea <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25d1c:	4631      	mov	r1, r6
   25d1e:	4628      	mov	r0, r5
   25d20:	f7ff fc02 	bl	25528 <cancel_sync_locked>
   25d24:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d26:	4815      	ldr	r0, [pc, #84]	; (25d7c <k_work_cancel_delayable_sync+0x108>)
   25d28:	f7fe ff88 	bl	24c3c <z_spin_unlock_valid>
   25d2c:	b958      	cbnz	r0, 25d46 <k_work_cancel_delayable_sync+0xd2>
   25d2e:	23c2      	movs	r3, #194	; 0xc2
   25d30:	4a13      	ldr	r2, [pc, #76]	; (25d80 <k_work_cancel_delayable_sync+0x10c>)
   25d32:	4916      	ldr	r1, [pc, #88]	; (25d8c <k_work_cancel_delayable_sync+0x118>)
   25d34:	480e      	ldr	r0, [pc, #56]	; (25d70 <k_work_cancel_delayable_sync+0xfc>)
   25d36:	f005 f83f 	bl	2adb8 <assert_print>
   25d3a:	4910      	ldr	r1, [pc, #64]	; (25d7c <k_work_cancel_delayable_sync+0x108>)
   25d3c:	4814      	ldr	r0, [pc, #80]	; (25d90 <k_work_cancel_delayable_sync+0x11c>)
   25d3e:	f005 f83b 	bl	2adb8 <assert_print>
   25d42:	21c2      	movs	r1, #194	; 0xc2
   25d44:	e7d7      	b.n	25cf6 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   25d46:	f388 8811 	msr	BASEPRI, r8
   25d4a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   25d4e:	b13c      	cbz	r4, 25d60 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   25d50:	f04f 32ff 	mov.w	r2, #4294967295
   25d54:	f04f 33ff 	mov.w	r3, #4294967295
   25d58:	f106 0008 	add.w	r0, r6, #8
   25d5c:	f7ff fa5c 	bl	25218 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   25d60:	4638      	mov	r0, r7
   25d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25d66:	bf00      	nop
   25d68:	0003b930 	.word	0x0003b930
   25d6c:	0003b85a 	.word	0x0003b85a
   25d70:	00033bc2 	.word	0x00033bc2
   25d74:	0003b8dc 	.word	0x0003b8dc
   25d78:	00036947 	.word	0x00036947
   25d7c:	2000eb80 	.word	0x2000eb80
   25d80:	000340d9 	.word	0x000340d9
   25d84:	00034132 	.word	0x00034132
   25d88:	00034147 	.word	0x00034147
   25d8c:	00034106 	.word	0x00034106
   25d90:	0003411d 	.word	0x0003411d

00025d94 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   25d94:	89c3      	ldrh	r3, [r0, #14]
   25d96:	2b7f      	cmp	r3, #127	; 0x7f
   25d98:	d812      	bhi.n	25dc0 <sliceable+0x2c>
	int ret = slice_ticks;
   25d9a:	4b0a      	ldr	r3, [pc, #40]	; (25dc4 <sliceable+0x30>)
   25d9c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   25d9e:	b163      	cbz	r3, 25dba <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25da0:	4b09      	ldr	r3, [pc, #36]	; (25dc8 <sliceable+0x34>)
   25da2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25da6:	681b      	ldr	r3, [r3, #0]
   25da8:	429a      	cmp	r2, r3
   25daa:	db09      	blt.n	25dc0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   25dac:	7b43      	ldrb	r3, [r0, #13]
   25dae:	06db      	lsls	r3, r3, #27
   25db0:	d106      	bne.n	25dc0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   25db2:	4b06      	ldr	r3, [pc, #24]	; (25dcc <sliceable+0x38>)
   25db4:	1ac3      	subs	r3, r0, r3
   25db6:	bf18      	it	ne
   25db8:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   25dba:	f003 0001 	and.w	r0, r3, #1
   25dbe:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   25dc0:	2300      	movs	r3, #0
   25dc2:	e7fa      	b.n	25dba <sliceable+0x26>
   25dc4:	2000eb8c 	.word	0x2000eb8c
   25dc8:	2000eb88 	.word	0x2000eb88
   25dcc:	2000ddc0 	.word	0x2000ddc0

00025dd0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   25dd0:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   25dd2:	b168      	cbz	r0, 25df0 <slice_timeout+0x20>
   25dd4:	4b10      	ldr	r3, [pc, #64]	; (25e18 <slice_timeout+0x48>)
   25dd6:	4298      	cmp	r0, r3
   25dd8:	d30a      	bcc.n	25df0 <slice_timeout+0x20>
   25dda:	f103 0218 	add.w	r2, r3, #24
   25dde:	4290      	cmp	r0, r2
   25de0:	d206      	bcs.n	25df0 <slice_timeout+0x20>
   25de2:	2218      	movs	r2, #24
   25de4:	1ac0      	subs	r0, r0, r3
   25de6:	fbb0 f3f2 	udiv	r3, r0, r2
   25dea:	fb02 0313 	mls	r3, r2, r3, r0
   25dee:	b15b      	cbz	r3, 25e08 <slice_timeout+0x38>
   25df0:	490a      	ldr	r1, [pc, #40]	; (25e1c <slice_timeout+0x4c>)
   25df2:	480b      	ldr	r0, [pc, #44]	; (25e20 <slice_timeout+0x50>)
   25df4:	f240 13cb 	movw	r3, #459	; 0x1cb
   25df8:	4a0a      	ldr	r2, [pc, #40]	; (25e24 <slice_timeout+0x54>)
   25dfa:	f004 ffdd 	bl	2adb8 <assert_print>
   25dfe:	f240 11cb 	movw	r1, #459	; 0x1cb
   25e02:	4808      	ldr	r0, [pc, #32]	; (25e24 <slice_timeout+0x54>)
   25e04:	f004 ffd1 	bl	2adaa <assert_post_action>

	slice_expired[cpu] = true;
   25e08:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   25e0a:	4b07      	ldr	r3, [pc, #28]	; (25e28 <slice_timeout+0x58>)
   25e0c:	10c0      	asrs	r0, r0, #3
   25e0e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   25e10:	4b06      	ldr	r3, [pc, #24]	; (25e2c <slice_timeout+0x5c>)
   25e12:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   25e14:	bd08      	pop	{r3, pc}
   25e16:	bf00      	nop
   25e18:	2000df78 	.word	0x2000df78
   25e1c:	0003b967 	.word	0x0003b967
   25e20:	00033bc2 	.word	0x00033bc2
   25e24:	0003b945 	.word	0x0003b945
   25e28:	aaaaaaab 	.word	0xaaaaaaab
   25e2c:	2001048c 	.word	0x2001048c

00025e30 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   25e30:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   25e32:	4b0e      	ldr	r3, [pc, #56]	; (25e6c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   25e34:	4c0e      	ldr	r4, [pc, #56]	; (25e70 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   25e36:	7c1e      	ldrb	r6, [r3, #16]
{
   25e38:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   25e3a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   25e3e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   25e42:	4620      	mov	r0, r4
   25e44:	f001 fa88 	bl	27358 <z_abort_timeout>
	slice_expired[cpu] = false;
   25e48:	2200      	movs	r2, #0
   25e4a:	4b0a      	ldr	r3, [pc, #40]	; (25e74 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   25e4c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   25e4e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   25e50:	f7ff ffa0 	bl	25d94 <sliceable>
   25e54:	b148      	cbz	r0, 25e6a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   25e56:	4b08      	ldr	r3, [pc, #32]	; (25e78 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   25e58:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   25e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   25e5e:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   25e60:	4906      	ldr	r1, [pc, #24]	; (25e7c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   25e62:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   25e64:	17d3      	asrs	r3, r2, #31
   25e66:	f001 b9b7 	b.w	271d8 <z_add_timeout>
}
   25e6a:	bd70      	pop	{r4, r5, r6, pc}
   25e6c:	2000eb4c 	.word	0x2000eb4c
   25e70:	2000df78 	.word	0x2000df78
   25e74:	2001048c 	.word	0x2001048c
   25e78:	2000eb8c 	.word	0x2000eb8c
   25e7c:	00025dd1 	.word	0x00025dd1

00025e80 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   25e80:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   25e82:	4d14      	ldr	r5, [pc, #80]	; (25ed4 <update_cache+0x54>)
   25e84:	462b      	mov	r3, r5
   25e86:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e8a:	429c      	cmp	r4, r3
   25e8c:	d000      	beq.n	25e90 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25e8e:	b904      	cbnz	r4, 25e92 <update_cache+0x12>
   25e90:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   25e92:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   25e94:	b9a8      	cbnz	r0, 25ec2 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   25e96:	b963      	cbnz	r3, 25eb2 <update_cache+0x32>
   25e98:	490f      	ldr	r1, [pc, #60]	; (25ed8 <update_cache+0x58>)
   25e9a:	238a      	movs	r3, #138	; 0x8a
   25e9c:	4a0f      	ldr	r2, [pc, #60]	; (25edc <update_cache+0x5c>)
   25e9e:	4810      	ldr	r0, [pc, #64]	; (25ee0 <update_cache+0x60>)
   25ea0:	f004 ff8a 	bl	2adb8 <assert_print>
   25ea4:	480f      	ldr	r0, [pc, #60]	; (25ee4 <update_cache+0x64>)
   25ea6:	f004 ff87 	bl	2adb8 <assert_print>
   25eaa:	218a      	movs	r1, #138	; 0x8a
   25eac:	480b      	ldr	r0, [pc, #44]	; (25edc <update_cache+0x5c>)
   25eae:	f004 ff7c 	bl	2adaa <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   25eb2:	7b5a      	ldrb	r2, [r3, #13]
   25eb4:	06d2      	lsls	r2, r2, #27
   25eb6:	d104      	bne.n	25ec2 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25eb8:	69a2      	ldr	r2, [r4, #24]
   25eba:	b912      	cbnz	r2, 25ec2 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   25ebc:	89da      	ldrh	r2, [r3, #14]
   25ebe:	2a7f      	cmp	r2, #127	; 0x7f
   25ec0:	d805      	bhi.n	25ece <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   25ec2:	429c      	cmp	r4, r3
   25ec4:	d002      	beq.n	25ecc <update_cache+0x4c>
			z_reset_time_slice(thread);
   25ec6:	4620      	mov	r0, r4
   25ec8:	f7ff ffb2 	bl	25e30 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   25ecc:	4623      	mov	r3, r4
   25ece:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   25ed0:	bd38      	pop	{r3, r4, r5, pc}
   25ed2:	bf00      	nop
   25ed4:	2000eb4c 	.word	0x2000eb4c
   25ed8:	0003bb00 	.word	0x0003bb00
   25edc:	0003b945 	.word	0x0003b945
   25ee0:	00033bc2 	.word	0x00033bc2
   25ee4:	00034662 	.word	0x00034662

00025ee8 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   25ee8:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25eea:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25eee:	7b42      	ldrb	r2, [r0, #13]
   25ef0:	2b00      	cmp	r3, #0
   25ef2:	db38      	blt.n	25f66 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25ef4:	06d3      	lsls	r3, r2, #27
   25ef6:	d136      	bne.n	25f66 <ready_thread+0x7e>
	return node->next != NULL;
   25ef8:	6983      	ldr	r3, [r0, #24]
   25efa:	2b00      	cmp	r3, #0
   25efc:	d133      	bne.n	25f66 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   25efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25f02:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25f04:	4a18      	ldr	r2, [pc, #96]	; (25f68 <ready_thread+0x80>)
   25f06:	4290      	cmp	r0, r2
   25f08:	d109      	bne.n	25f1e <ready_thread+0x36>
   25f0a:	4918      	ldr	r1, [pc, #96]	; (25f6c <ready_thread+0x84>)
   25f0c:	4818      	ldr	r0, [pc, #96]	; (25f70 <ready_thread+0x88>)
   25f0e:	23bc      	movs	r3, #188	; 0xbc
   25f10:	4a18      	ldr	r2, [pc, #96]	; (25f74 <ready_thread+0x8c>)
   25f12:	f004 ff51 	bl	2adb8 <assert_print>
   25f16:	21bc      	movs	r1, #188	; 0xbc
   25f18:	4816      	ldr	r0, [pc, #88]	; (25f74 <ready_thread+0x8c>)
   25f1a:	f004 ff46 	bl	2adaa <assert_post_action>
	return list->head == list;
   25f1e:	4916      	ldr	r1, [pc, #88]	; (25f78 <ready_thread+0x90>)
   25f20:	460a      	mov	r2, r1
   25f22:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f26:	4294      	cmp	r4, r2
   25f28:	bf18      	it	ne
   25f2a:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   25f2c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25f2e:	b923      	cbnz	r3, 25f3a <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   25f30:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   25f34:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25f36:	6208      	str	r0, [r1, #32]
}
   25f38:	e00c      	b.n	25f54 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   25f3a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25f3e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25f42:	42b5      	cmp	r5, r6
   25f44:	d00b      	beq.n	25f5e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25f46:	42ae      	cmp	r6, r5
   25f48:	dd09      	ble.n	25f5e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25f4a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25f4c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25f50:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25f52:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   25f54:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   25f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   25f5a:	f7ff bf91 	b.w	25e80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25f5e:	42a3      	cmp	r3, r4
   25f60:	d0e6      	beq.n	25f30 <ready_thread+0x48>
   25f62:	681b      	ldr	r3, [r3, #0]
   25f64:	e7e3      	b.n	25f2e <ready_thread+0x46>
}
   25f66:	bd70      	pop	{r4, r5, r6, pc}
   25f68:	2000ddc0 	.word	0x2000ddc0
   25f6c:	0003bb27 	.word	0x0003bb27
   25f70:	00033bc2 	.word	0x00033bc2
   25f74:	0003b945 	.word	0x0003b945
   25f78:	2000eb4c 	.word	0x2000eb4c

00025f7c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   25f7c:	b538      	push	{r3, r4, r5, lr}
   25f7e:	4604      	mov	r4, r0
	__asm__ volatile(
   25f80:	f04f 0320 	mov.w	r3, #32
   25f84:	f3ef 8511 	mrs	r5, BASEPRI
   25f88:	f383 8812 	msr	BASEPRI_MAX, r3
   25f8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f90:	4816      	ldr	r0, [pc, #88]	; (25fec <z_ready_thread+0x70>)
   25f92:	f7fe fe45 	bl	24c20 <z_spin_lock_valid>
   25f96:	b968      	cbnz	r0, 25fb4 <z_ready_thread+0x38>
   25f98:	2394      	movs	r3, #148	; 0x94
   25f9a:	4a15      	ldr	r2, [pc, #84]	; (25ff0 <z_ready_thread+0x74>)
   25f9c:	4915      	ldr	r1, [pc, #84]	; (25ff4 <z_ready_thread+0x78>)
   25f9e:	4816      	ldr	r0, [pc, #88]	; (25ff8 <z_ready_thread+0x7c>)
   25fa0:	f004 ff0a 	bl	2adb8 <assert_print>
   25fa4:	4911      	ldr	r1, [pc, #68]	; (25fec <z_ready_thread+0x70>)
   25fa6:	4815      	ldr	r0, [pc, #84]	; (25ffc <z_ready_thread+0x80>)
   25fa8:	f004 ff06 	bl	2adb8 <assert_print>
   25fac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fae:	4810      	ldr	r0, [pc, #64]	; (25ff0 <z_ready_thread+0x74>)
   25fb0:	f004 fefb 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   25fb4:	480d      	ldr	r0, [pc, #52]	; (25fec <z_ready_thread+0x70>)
   25fb6:	f7fe fe4f 	bl	24c58 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   25fba:	4620      	mov	r0, r4
   25fbc:	f7ff ff94 	bl	25ee8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fc0:	480a      	ldr	r0, [pc, #40]	; (25fec <z_ready_thread+0x70>)
   25fc2:	f7fe fe3b 	bl	24c3c <z_spin_unlock_valid>
   25fc6:	b958      	cbnz	r0, 25fe0 <z_ready_thread+0x64>
   25fc8:	23c2      	movs	r3, #194	; 0xc2
   25fca:	4a09      	ldr	r2, [pc, #36]	; (25ff0 <z_ready_thread+0x74>)
   25fcc:	490c      	ldr	r1, [pc, #48]	; (26000 <z_ready_thread+0x84>)
   25fce:	480a      	ldr	r0, [pc, #40]	; (25ff8 <z_ready_thread+0x7c>)
   25fd0:	f004 fef2 	bl	2adb8 <assert_print>
   25fd4:	4905      	ldr	r1, [pc, #20]	; (25fec <z_ready_thread+0x70>)
   25fd6:	480b      	ldr	r0, [pc, #44]	; (26004 <z_ready_thread+0x88>)
   25fd8:	f004 feee 	bl	2adb8 <assert_print>
   25fdc:	21c2      	movs	r1, #194	; 0xc2
   25fde:	e7e6      	b.n	25fae <z_ready_thread+0x32>
	__asm__ volatile(
   25fe0:	f385 8811 	msr	BASEPRI, r5
   25fe4:	f3bf 8f6f 	isb	sy
		}
	}
}
   25fe8:	bd38      	pop	{r3, r4, r5, pc}
   25fea:	bf00      	nop
   25fec:	2000eb90 	.word	0x2000eb90
   25ff0:	000340d9 	.word	0x000340d9
   25ff4:	00034132 	.word	0x00034132
   25ff8:	00033bc2 	.word	0x00033bc2
   25ffc:	00034147 	.word	0x00034147
   26000:	00034106 	.word	0x00034106
   26004:	0003411d 	.word	0x0003411d

00026008 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26008:	b538      	push	{r3, r4, r5, lr}
   2600a:	4604      	mov	r4, r0
	__asm__ volatile(
   2600c:	f04f 0320 	mov.w	r3, #32
   26010:	f3ef 8511 	mrs	r5, BASEPRI
   26014:	f383 8812 	msr	BASEPRI_MAX, r3
   26018:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2601c:	4817      	ldr	r0, [pc, #92]	; (2607c <z_unpend_thread_no_timeout+0x74>)
   2601e:	f7fe fdff 	bl	24c20 <z_spin_lock_valid>
   26022:	b968      	cbnz	r0, 26040 <z_unpend_thread_no_timeout+0x38>
   26024:	2394      	movs	r3, #148	; 0x94
   26026:	4a16      	ldr	r2, [pc, #88]	; (26080 <z_unpend_thread_no_timeout+0x78>)
   26028:	4916      	ldr	r1, [pc, #88]	; (26084 <z_unpend_thread_no_timeout+0x7c>)
   2602a:	4817      	ldr	r0, [pc, #92]	; (26088 <z_unpend_thread_no_timeout+0x80>)
   2602c:	f004 fec4 	bl	2adb8 <assert_print>
   26030:	4912      	ldr	r1, [pc, #72]	; (2607c <z_unpend_thread_no_timeout+0x74>)
   26032:	4816      	ldr	r0, [pc, #88]	; (2608c <z_unpend_thread_no_timeout+0x84>)
   26034:	f004 fec0 	bl	2adb8 <assert_print>
   26038:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2603a:	4811      	ldr	r0, [pc, #68]	; (26080 <z_unpend_thread_no_timeout+0x78>)
   2603c:	f004 feb5 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26040:	480e      	ldr	r0, [pc, #56]	; (2607c <z_unpend_thread_no_timeout+0x74>)
   26042:	f7fe fe09 	bl	24c58 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   26046:	68a3      	ldr	r3, [r4, #8]
   26048:	b113      	cbz	r3, 26050 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   2604a:	4620      	mov	r0, r4
   2604c:	f000 fc50 	bl	268f0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26050:	480a      	ldr	r0, [pc, #40]	; (2607c <z_unpend_thread_no_timeout+0x74>)
   26052:	f7fe fdf3 	bl	24c3c <z_spin_unlock_valid>
   26056:	b958      	cbnz	r0, 26070 <z_unpend_thread_no_timeout+0x68>
   26058:	23c2      	movs	r3, #194	; 0xc2
   2605a:	4a09      	ldr	r2, [pc, #36]	; (26080 <z_unpend_thread_no_timeout+0x78>)
   2605c:	490c      	ldr	r1, [pc, #48]	; (26090 <z_unpend_thread_no_timeout+0x88>)
   2605e:	480a      	ldr	r0, [pc, #40]	; (26088 <z_unpend_thread_no_timeout+0x80>)
   26060:	f004 feaa 	bl	2adb8 <assert_print>
   26064:	4905      	ldr	r1, [pc, #20]	; (2607c <z_unpend_thread_no_timeout+0x74>)
   26066:	480b      	ldr	r0, [pc, #44]	; (26094 <z_unpend_thread_no_timeout+0x8c>)
   26068:	f004 fea6 	bl	2adb8 <assert_print>
   2606c:	21c2      	movs	r1, #194	; 0xc2
   2606e:	e7e4      	b.n	2603a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   26070:	f385 8811 	msr	BASEPRI, r5
   26074:	f3bf 8f6f 	isb	sy
		}
	}
}
   26078:	bd38      	pop	{r3, r4, r5, pc}
   2607a:	bf00      	nop
   2607c:	2000eb90 	.word	0x2000eb90
   26080:	000340d9 	.word	0x000340d9
   26084:	00034132 	.word	0x00034132
   26088:	00033bc2 	.word	0x00033bc2
   2608c:	00034147 	.word	0x00034147
   26090:	00034106 	.word	0x00034106
   26094:	0003411d 	.word	0x0003411d

00026098 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26098:	b570      	push	{r4, r5, r6, lr}
   2609a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2609c:	460d      	mov	r5, r1
   2609e:	b9e9      	cbnz	r1, 260dc <z_reschedule+0x44>
   260a0:	f3ef 8605 	mrs	r6, IPSR
   260a4:	b9d6      	cbnz	r6, 260dc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   260a6:	4b18      	ldr	r3, [pc, #96]	; (26108 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   260a8:	699a      	ldr	r2, [r3, #24]
   260aa:	689b      	ldr	r3, [r3, #8]
   260ac:	429a      	cmp	r2, r3
   260ae:	d015      	beq.n	260dc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260b0:	f7fe fdc4 	bl	24c3c <z_spin_unlock_valid>
   260b4:	b968      	cbnz	r0, 260d2 <z_reschedule+0x3a>
   260b6:	23e1      	movs	r3, #225	; 0xe1
   260b8:	4a14      	ldr	r2, [pc, #80]	; (2610c <z_reschedule+0x74>)
   260ba:	4915      	ldr	r1, [pc, #84]	; (26110 <z_reschedule+0x78>)
   260bc:	4815      	ldr	r0, [pc, #84]	; (26114 <z_reschedule+0x7c>)
   260be:	f004 fe7b 	bl	2adb8 <assert_print>
   260c2:	4621      	mov	r1, r4
   260c4:	4814      	ldr	r0, [pc, #80]	; (26118 <z_reschedule+0x80>)
   260c6:	f004 fe77 	bl	2adb8 <assert_print>
   260ca:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260cc:	480f      	ldr	r0, [pc, #60]	; (2610c <z_reschedule+0x74>)
   260ce:	f004 fe6c 	bl	2adaa <assert_post_action>
	ret = arch_swap(key);
   260d2:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   260d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   260d8:	f7eb b9e8 	b.w	114ac <arch_swap>
   260dc:	4620      	mov	r0, r4
   260de:	f7fe fdad 	bl	24c3c <z_spin_unlock_valid>
   260e2:	b958      	cbnz	r0, 260fc <z_reschedule+0x64>
   260e4:	23c2      	movs	r3, #194	; 0xc2
   260e6:	4a09      	ldr	r2, [pc, #36]	; (2610c <z_reschedule+0x74>)
   260e8:	4909      	ldr	r1, [pc, #36]	; (26110 <z_reschedule+0x78>)
   260ea:	480a      	ldr	r0, [pc, #40]	; (26114 <z_reschedule+0x7c>)
   260ec:	f004 fe64 	bl	2adb8 <assert_print>
   260f0:	4621      	mov	r1, r4
   260f2:	4809      	ldr	r0, [pc, #36]	; (26118 <z_reschedule+0x80>)
   260f4:	f004 fe60 	bl	2adb8 <assert_print>
   260f8:	21c2      	movs	r1, #194	; 0xc2
   260fa:	e7e7      	b.n	260cc <z_reschedule+0x34>
   260fc:	f385 8811 	msr	BASEPRI, r5
   26100:	f3bf 8f6f 	isb	sy
   26104:	bd70      	pop	{r4, r5, r6, pc}
   26106:	bf00      	nop
   26108:	2000eb4c 	.word	0x2000eb4c
   2610c:	000340d9 	.word	0x000340d9
   26110:	00034106 	.word	0x00034106
   26114:	00033bc2 	.word	0x00033bc2
   26118:	0003411d 	.word	0x0003411d

0002611c <z_sched_start>:
{
   2611c:	b538      	push	{r3, r4, r5, lr}
   2611e:	4604      	mov	r4, r0
	__asm__ volatile(
   26120:	f04f 0320 	mov.w	r3, #32
   26124:	f3ef 8511 	mrs	r5, BASEPRI
   26128:	f383 8812 	msr	BASEPRI_MAX, r3
   2612c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26130:	481c      	ldr	r0, [pc, #112]	; (261a4 <z_sched_start+0x88>)
   26132:	f7fe fd75 	bl	24c20 <z_spin_lock_valid>
   26136:	b968      	cbnz	r0, 26154 <z_sched_start+0x38>
   26138:	2394      	movs	r3, #148	; 0x94
   2613a:	4a1b      	ldr	r2, [pc, #108]	; (261a8 <z_sched_start+0x8c>)
   2613c:	491b      	ldr	r1, [pc, #108]	; (261ac <z_sched_start+0x90>)
   2613e:	481c      	ldr	r0, [pc, #112]	; (261b0 <z_sched_start+0x94>)
   26140:	f004 fe3a 	bl	2adb8 <assert_print>
   26144:	4917      	ldr	r1, [pc, #92]	; (261a4 <z_sched_start+0x88>)
   26146:	481b      	ldr	r0, [pc, #108]	; (261b4 <z_sched_start+0x98>)
   26148:	f004 fe36 	bl	2adb8 <assert_print>
   2614c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2614e:	4816      	ldr	r0, [pc, #88]	; (261a8 <z_sched_start+0x8c>)
   26150:	f004 fe2b 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26154:	4813      	ldr	r0, [pc, #76]	; (261a4 <z_sched_start+0x88>)
   26156:	f7fe fd7f 	bl	24c58 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2615a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   2615c:	075a      	lsls	r2, r3, #29
   2615e:	d414      	bmi.n	2618a <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26160:	4810      	ldr	r0, [pc, #64]	; (261a4 <z_sched_start+0x88>)
   26162:	f7fe fd6b 	bl	24c3c <z_spin_unlock_valid>
   26166:	b958      	cbnz	r0, 26180 <z_sched_start+0x64>
   26168:	23c2      	movs	r3, #194	; 0xc2
   2616a:	4a0f      	ldr	r2, [pc, #60]	; (261a8 <z_sched_start+0x8c>)
   2616c:	4912      	ldr	r1, [pc, #72]	; (261b8 <z_sched_start+0x9c>)
   2616e:	4810      	ldr	r0, [pc, #64]	; (261b0 <z_sched_start+0x94>)
   26170:	f004 fe22 	bl	2adb8 <assert_print>
   26174:	490b      	ldr	r1, [pc, #44]	; (261a4 <z_sched_start+0x88>)
   26176:	4811      	ldr	r0, [pc, #68]	; (261bc <z_sched_start+0xa0>)
   26178:	f004 fe1e 	bl	2adb8 <assert_print>
   2617c:	21c2      	movs	r1, #194	; 0xc2
   2617e:	e7e6      	b.n	2614e <z_sched_start+0x32>
	__asm__ volatile(
   26180:	f385 8811 	msr	BASEPRI, r5
   26184:	f3bf 8f6f 	isb	sy
}
   26188:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2618a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2618e:	4620      	mov	r0, r4
   26190:	7363      	strb	r3, [r4, #13]
   26192:	f7ff fea9 	bl	25ee8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26196:	4629      	mov	r1, r5
}
   26198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2619c:	4801      	ldr	r0, [pc, #4]	; (261a4 <z_sched_start+0x88>)
   2619e:	f7ff bf7b 	b.w	26098 <z_reschedule>
   261a2:	bf00      	nop
   261a4:	2000eb90 	.word	0x2000eb90
   261a8:	000340d9 	.word	0x000340d9
   261ac:	00034132 	.word	0x00034132
   261b0:	00033bc2 	.word	0x00033bc2
   261b4:	00034147 	.word	0x00034147
   261b8:	00034106 	.word	0x00034106
   261bc:	0003411d 	.word	0x0003411d

000261c0 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   261c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   261c2:	f04f 0320 	mov.w	r3, #32
   261c6:	f3ef 8411 	mrs	r4, BASEPRI
   261ca:	f383 8812 	msr	BASEPRI_MAX, r3
   261ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261d2:	4825      	ldr	r0, [pc, #148]	; (26268 <k_sched_lock+0xa8>)
   261d4:	f7fe fd24 	bl	24c20 <z_spin_lock_valid>
   261d8:	b960      	cbnz	r0, 261f4 <k_sched_lock+0x34>
   261da:	2394      	movs	r3, #148	; 0x94
   261dc:	4a23      	ldr	r2, [pc, #140]	; (2626c <k_sched_lock+0xac>)
   261de:	4924      	ldr	r1, [pc, #144]	; (26270 <k_sched_lock+0xb0>)
   261e0:	4824      	ldr	r0, [pc, #144]	; (26274 <k_sched_lock+0xb4>)
   261e2:	f004 fde9 	bl	2adb8 <assert_print>
   261e6:	4920      	ldr	r1, [pc, #128]	; (26268 <k_sched_lock+0xa8>)
   261e8:	4823      	ldr	r0, [pc, #140]	; (26278 <k_sched_lock+0xb8>)
   261ea:	f004 fde5 	bl	2adb8 <assert_print>
   261ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261f0:	481e      	ldr	r0, [pc, #120]	; (2626c <k_sched_lock+0xac>)
   261f2:	e010      	b.n	26216 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   261f4:	481c      	ldr	r0, [pc, #112]	; (26268 <k_sched_lock+0xa8>)
   261f6:	f7fe fd2f 	bl	24c58 <z_spin_lock_set_owner>
   261fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   261fe:	b163      	cbz	r3, 2621a <k_sched_lock+0x5a>
   26200:	491e      	ldr	r1, [pc, #120]	; (2627c <k_sched_lock+0xbc>)
   26202:	23fd      	movs	r3, #253	; 0xfd
   26204:	4a1e      	ldr	r2, [pc, #120]	; (26280 <k_sched_lock+0xc0>)
   26206:	481b      	ldr	r0, [pc, #108]	; (26274 <k_sched_lock+0xb4>)
   26208:	f004 fdd6 	bl	2adb8 <assert_print>
   2620c:	481d      	ldr	r0, [pc, #116]	; (26284 <k_sched_lock+0xc4>)
   2620e:	f004 fdd3 	bl	2adb8 <assert_print>
   26212:	21fd      	movs	r1, #253	; 0xfd
   26214:	481a      	ldr	r0, [pc, #104]	; (26280 <k_sched_lock+0xc0>)
   26216:	f004 fdc8 	bl	2adaa <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2621a:	4b1b      	ldr	r3, [pc, #108]	; (26288 <k_sched_lock+0xc8>)
   2621c:	689a      	ldr	r2, [r3, #8]
   2621e:	7bd3      	ldrb	r3, [r2, #15]
   26220:	2b01      	cmp	r3, #1
   26222:	d10a      	bne.n	2623a <k_sched_lock+0x7a>
   26224:	4919      	ldr	r1, [pc, #100]	; (2628c <k_sched_lock+0xcc>)
   26226:	23fe      	movs	r3, #254	; 0xfe
   26228:	4a15      	ldr	r2, [pc, #84]	; (26280 <k_sched_lock+0xc0>)
   2622a:	4812      	ldr	r0, [pc, #72]	; (26274 <k_sched_lock+0xb4>)
   2622c:	f004 fdc4 	bl	2adb8 <assert_print>
   26230:	4814      	ldr	r0, [pc, #80]	; (26284 <k_sched_lock+0xc4>)
   26232:	f004 fdc1 	bl	2adb8 <assert_print>
   26236:	21fe      	movs	r1, #254	; 0xfe
   26238:	e7ec      	b.n	26214 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   2623a:	3b01      	subs	r3, #1
   2623c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2623e:	480a      	ldr	r0, [pc, #40]	; (26268 <k_sched_lock+0xa8>)
   26240:	f7fe fcfc 	bl	24c3c <z_spin_unlock_valid>
   26244:	b958      	cbnz	r0, 2625e <k_sched_lock+0x9e>
   26246:	23c2      	movs	r3, #194	; 0xc2
   26248:	4a08      	ldr	r2, [pc, #32]	; (2626c <k_sched_lock+0xac>)
   2624a:	4911      	ldr	r1, [pc, #68]	; (26290 <k_sched_lock+0xd0>)
   2624c:	4809      	ldr	r0, [pc, #36]	; (26274 <k_sched_lock+0xb4>)
   2624e:	f004 fdb3 	bl	2adb8 <assert_print>
   26252:	4905      	ldr	r1, [pc, #20]	; (26268 <k_sched_lock+0xa8>)
   26254:	480f      	ldr	r0, [pc, #60]	; (26294 <k_sched_lock+0xd4>)
   26256:	f004 fdaf 	bl	2adb8 <assert_print>
   2625a:	21c2      	movs	r1, #194	; 0xc2
   2625c:	e7c8      	b.n	261f0 <k_sched_lock+0x30>
	__asm__ volatile(
   2625e:	f384 8811 	msr	BASEPRI, r4
   26262:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26266:	bd10      	pop	{r4, pc}
   26268:	2000eb90 	.word	0x2000eb90
   2626c:	000340d9 	.word	0x000340d9
   26270:	00034132 	.word	0x00034132
   26274:	00033bc2 	.word	0x00033bc2
   26278:	00034147 	.word	0x00034147
   2627c:	0003b6d8 	.word	0x0003b6d8
   26280:	0003bb48 	.word	0x0003bb48
   26284:	00034662 	.word	0x00034662
   26288:	2000eb4c 	.word	0x2000eb4c
   2628c:	0003bb73 	.word	0x0003bb73
   26290:	00034106 	.word	0x00034106
   26294:	0003411d 	.word	0x0003411d

00026298 <k_sched_unlock>:

void k_sched_unlock(void)
{
   26298:	b510      	push	{r4, lr}
	__asm__ volatile(
   2629a:	f04f 0320 	mov.w	r3, #32
   2629e:	f3ef 8411 	mrs	r4, BASEPRI
   262a2:	f383 8812 	msr	BASEPRI_MAX, r3
   262a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262aa:	4829      	ldr	r0, [pc, #164]	; (26350 <k_sched_unlock+0xb8>)
   262ac:	f7fe fcb8 	bl	24c20 <z_spin_lock_valid>
   262b0:	b960      	cbnz	r0, 262cc <k_sched_unlock+0x34>
   262b2:	2394      	movs	r3, #148	; 0x94
   262b4:	4a27      	ldr	r2, [pc, #156]	; (26354 <k_sched_unlock+0xbc>)
   262b6:	4928      	ldr	r1, [pc, #160]	; (26358 <k_sched_unlock+0xc0>)
   262b8:	4828      	ldr	r0, [pc, #160]	; (2635c <k_sched_unlock+0xc4>)
   262ba:	f004 fd7d 	bl	2adb8 <assert_print>
   262be:	4924      	ldr	r1, [pc, #144]	; (26350 <k_sched_unlock+0xb8>)
   262c0:	4827      	ldr	r0, [pc, #156]	; (26360 <k_sched_unlock+0xc8>)
   262c2:	f004 fd79 	bl	2adb8 <assert_print>
   262c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262c8:	4822      	ldr	r0, [pc, #136]	; (26354 <k_sched_unlock+0xbc>)
   262ca:	e013      	b.n	262f4 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   262cc:	4820      	ldr	r0, [pc, #128]	; (26350 <k_sched_unlock+0xb8>)
   262ce:	f7fe fcc3 	bl	24c58 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   262d2:	4b24      	ldr	r3, [pc, #144]	; (26364 <k_sched_unlock+0xcc>)
   262d4:	689a      	ldr	r2, [r3, #8]
   262d6:	7bd3      	ldrb	r3, [r2, #15]
   262d8:	b973      	cbnz	r3, 262f8 <k_sched_unlock+0x60>
   262da:	4923      	ldr	r1, [pc, #140]	; (26368 <k_sched_unlock+0xd0>)
   262dc:	f240 33ef 	movw	r3, #1007	; 0x3ef
   262e0:	4a22      	ldr	r2, [pc, #136]	; (2636c <k_sched_unlock+0xd4>)
   262e2:	481e      	ldr	r0, [pc, #120]	; (2635c <k_sched_unlock+0xc4>)
   262e4:	f004 fd68 	bl	2adb8 <assert_print>
   262e8:	4821      	ldr	r0, [pc, #132]	; (26370 <k_sched_unlock+0xd8>)
   262ea:	f004 fd65 	bl	2adb8 <assert_print>
   262ee:	f240 31ef 	movw	r1, #1007	; 0x3ef
   262f2:	481e      	ldr	r0, [pc, #120]	; (2636c <k_sched_unlock+0xd4>)
   262f4:	f004 fd59 	bl	2adaa <assert_post_action>
   262f8:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   262fc:	b160      	cbz	r0, 26318 <k_sched_unlock+0x80>
   262fe:	491d      	ldr	r1, [pc, #116]	; (26374 <k_sched_unlock+0xdc>)
   26300:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   26304:	4a19      	ldr	r2, [pc, #100]	; (2636c <k_sched_unlock+0xd4>)
   26306:	4815      	ldr	r0, [pc, #84]	; (2635c <k_sched_unlock+0xc4>)
   26308:	f004 fd56 	bl	2adb8 <assert_print>
   2630c:	4818      	ldr	r0, [pc, #96]	; (26370 <k_sched_unlock+0xd8>)
   2630e:	f004 fd53 	bl	2adb8 <assert_print>
   26312:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   26316:	e7ec      	b.n	262f2 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   26318:	3301      	adds	r3, #1
   2631a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2631c:	f7ff fdb0 	bl	25e80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26320:	480b      	ldr	r0, [pc, #44]	; (26350 <k_sched_unlock+0xb8>)
   26322:	f7fe fc8b 	bl	24c3c <z_spin_unlock_valid>
   26326:	b958      	cbnz	r0, 26340 <k_sched_unlock+0xa8>
   26328:	23c2      	movs	r3, #194	; 0xc2
   2632a:	4a0a      	ldr	r2, [pc, #40]	; (26354 <k_sched_unlock+0xbc>)
   2632c:	4912      	ldr	r1, [pc, #72]	; (26378 <k_sched_unlock+0xe0>)
   2632e:	480b      	ldr	r0, [pc, #44]	; (2635c <k_sched_unlock+0xc4>)
   26330:	f004 fd42 	bl	2adb8 <assert_print>
   26334:	4906      	ldr	r1, [pc, #24]	; (26350 <k_sched_unlock+0xb8>)
   26336:	4811      	ldr	r0, [pc, #68]	; (2637c <k_sched_unlock+0xe4>)
   26338:	f004 fd3e 	bl	2adb8 <assert_print>
   2633c:	21c2      	movs	r1, #194	; 0xc2
   2633e:	e7c3      	b.n	262c8 <k_sched_unlock+0x30>
	__asm__ volatile(
   26340:	f384 8811 	msr	BASEPRI, r4
   26344:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   26348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2634c:	f00a b928 	b.w	305a0 <z_reschedule_unlocked>
   26350:	2000eb90 	.word	0x2000eb90
   26354:	000340d9 	.word	0x000340d9
   26358:	00034132 	.word	0x00034132
   2635c:	00033bc2 	.word	0x00033bc2
   26360:	00034147 	.word	0x00034147
   26364:	2000eb4c 	.word	0x2000eb4c
   26368:	0003bba4 	.word	0x0003bba4
   2636c:	0003b945 	.word	0x0003b945
   26370:	00034662 	.word	0x00034662
   26374:	0003b6d8 	.word	0x0003b6d8
   26378:	00034106 	.word	0x00034106
   2637c:	0003411d 	.word	0x0003411d

00026380 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   26380:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26382:	4b0b      	ldr	r3, [pc, #44]	; (263b0 <z_priq_dumb_remove+0x30>)
   26384:	4299      	cmp	r1, r3
   26386:	d10b      	bne.n	263a0 <z_priq_dumb_remove+0x20>
   26388:	490a      	ldr	r1, [pc, #40]	; (263b4 <z_priq_dumb_remove+0x34>)
   2638a:	480b      	ldr	r0, [pc, #44]	; (263b8 <z_priq_dumb_remove+0x38>)
   2638c:	f240 437b 	movw	r3, #1147	; 0x47b
   26390:	4a0a      	ldr	r2, [pc, #40]	; (263bc <z_priq_dumb_remove+0x3c>)
   26392:	f004 fd11 	bl	2adb8 <assert_print>
   26396:	f240 417b 	movw	r1, #1147	; 0x47b
   2639a:	4808      	ldr	r0, [pc, #32]	; (263bc <z_priq_dumb_remove+0x3c>)
   2639c:	f004 fd05 	bl	2adaa <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   263a0:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   263a4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   263a6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   263a8:	2300      	movs	r3, #0
	node->prev = NULL;
   263aa:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   263ae:	bd08      	pop	{r3, pc}
   263b0:	2000ddc0 	.word	0x2000ddc0
   263b4:	0003bb27 	.word	0x0003bb27
   263b8:	00033bc2 	.word	0x00033bc2
   263bc:	0003b945 	.word	0x0003b945

000263c0 <move_thread_to_end_of_prio_q>:
{
   263c0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   263c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   263c6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   263c8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   263ca:	7b43      	ldrb	r3, [r0, #13]
   263cc:	da06      	bge.n	263dc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   263d2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263d4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   263d6:	481d      	ldr	r0, [pc, #116]	; (2644c <move_thread_to_end_of_prio_q+0x8c>)
   263d8:	f7ff ffd2 	bl	26380 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   263dc:	7b63      	ldrb	r3, [r4, #13]
   263de:	f063 037f 	orn	r3, r3, #127	; 0x7f
   263e2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   263e4:	4b1a      	ldr	r3, [pc, #104]	; (26450 <move_thread_to_end_of_prio_q+0x90>)
   263e6:	429c      	cmp	r4, r3
   263e8:	d109      	bne.n	263fe <move_thread_to_end_of_prio_q+0x3e>
   263ea:	491a      	ldr	r1, [pc, #104]	; (26454 <move_thread_to_end_of_prio_q+0x94>)
   263ec:	481a      	ldr	r0, [pc, #104]	; (26458 <move_thread_to_end_of_prio_q+0x98>)
   263ee:	23bc      	movs	r3, #188	; 0xbc
   263f0:	4a1a      	ldr	r2, [pc, #104]	; (2645c <move_thread_to_end_of_prio_q+0x9c>)
   263f2:	f004 fce1 	bl	2adb8 <assert_print>
   263f6:	21bc      	movs	r1, #188	; 0xbc
   263f8:	4818      	ldr	r0, [pc, #96]	; (2645c <move_thread_to_end_of_prio_q+0x9c>)
   263fa:	f004 fcd6 	bl	2adaa <assert_post_action>
	return list->head == list;
   263fe:	4a18      	ldr	r2, [pc, #96]	; (26460 <move_thread_to_end_of_prio_q+0xa0>)
   26400:	4611      	mov	r1, r2
   26402:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return (node == list->tail) ? NULL : node->next;
   26406:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26408:	428b      	cmp	r3, r1
   2640a:	bf08      	it	eq
   2640c:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2640e:	b923      	cbnz	r3, 2641a <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   26410:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   26414:	6004      	str	r4, [r0, #0]
	list->tail = node;
   26416:	6214      	str	r4, [r2, #32]
}
   26418:	e00c      	b.n	26434 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2641a:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2641e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26422:	42b5      	cmp	r5, r6
   26424:	d00e      	beq.n	26444 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26426:	42ae      	cmp	r6, r5
   26428:	dd0c      	ble.n	26444 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2642a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2642c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   26430:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   26432:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   26434:	6890      	ldr	r0, [r2, #8]
   26436:	1b03      	subs	r3, r0, r4
   26438:	4258      	negs	r0, r3
   2643a:	4158      	adcs	r0, r3
}
   2643c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26440:	f7ff bd1e 	b.w	25e80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26444:	4298      	cmp	r0, r3
   26446:	d0e3      	beq.n	26410 <move_thread_to_end_of_prio_q+0x50>
   26448:	681b      	ldr	r3, [r3, #0]
   2644a:	e7e0      	b.n	2640e <move_thread_to_end_of_prio_q+0x4e>
   2644c:	2000eb68 	.word	0x2000eb68
   26450:	2000ddc0 	.word	0x2000ddc0
   26454:	0003bb27 	.word	0x0003bb27
   26458:	00033bc2 	.word	0x00033bc2
   2645c:	0003b945 	.word	0x0003b945
   26460:	2000eb4c 	.word	0x2000eb4c

00026464 <z_time_slice>:
{
   26464:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26466:	f04f 0320 	mov.w	r3, #32
   2646a:	f3ef 8511 	mrs	r5, BASEPRI
   2646e:	f383 8812 	msr	BASEPRI_MAX, r3
   26472:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26476:	4823      	ldr	r0, [pc, #140]	; (26504 <z_time_slice+0xa0>)
   26478:	f7fe fbd2 	bl	24c20 <z_spin_lock_valid>
   2647c:	b968      	cbnz	r0, 2649a <z_time_slice+0x36>
   2647e:	2394      	movs	r3, #148	; 0x94
   26480:	4a21      	ldr	r2, [pc, #132]	; (26508 <z_time_slice+0xa4>)
   26482:	4922      	ldr	r1, [pc, #136]	; (2650c <z_time_slice+0xa8>)
   26484:	4822      	ldr	r0, [pc, #136]	; (26510 <z_time_slice+0xac>)
   26486:	f004 fc97 	bl	2adb8 <assert_print>
   2648a:	491e      	ldr	r1, [pc, #120]	; (26504 <z_time_slice+0xa0>)
   2648c:	4821      	ldr	r0, [pc, #132]	; (26514 <z_time_slice+0xb0>)
   2648e:	f004 fc93 	bl	2adb8 <assert_print>
   26492:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26494:	481c      	ldr	r0, [pc, #112]	; (26508 <z_time_slice+0xa4>)
   26496:	f004 fc88 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   2649a:	481a      	ldr	r0, [pc, #104]	; (26504 <z_time_slice+0xa0>)
   2649c:	f7fe fbdc 	bl	24c58 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   264a0:	4b1d      	ldr	r3, [pc, #116]	; (26518 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   264a2:	4a1e      	ldr	r2, [pc, #120]	; (2651c <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   264a4:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   264a6:	6810      	ldr	r0, [r2, #0]
   264a8:	42a0      	cmp	r0, r4
   264aa:	d111      	bne.n	264d0 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   264ac:	f7ff fcc0 	bl	25e30 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264b0:	4814      	ldr	r0, [pc, #80]	; (26504 <z_time_slice+0xa0>)
   264b2:	f7fe fbc3 	bl	24c3c <z_spin_unlock_valid>
   264b6:	b9f8      	cbnz	r0, 264f8 <z_time_slice+0x94>
   264b8:	23c2      	movs	r3, #194	; 0xc2
   264ba:	4a13      	ldr	r2, [pc, #76]	; (26508 <z_time_slice+0xa4>)
   264bc:	4918      	ldr	r1, [pc, #96]	; (26520 <z_time_slice+0xbc>)
   264be:	4814      	ldr	r0, [pc, #80]	; (26510 <z_time_slice+0xac>)
   264c0:	f004 fc7a 	bl	2adb8 <assert_print>
   264c4:	490f      	ldr	r1, [pc, #60]	; (26504 <z_time_slice+0xa0>)
   264c6:	4817      	ldr	r0, [pc, #92]	; (26524 <z_time_slice+0xc0>)
   264c8:	f004 fc76 	bl	2adb8 <assert_print>
   264cc:	21c2      	movs	r1, #194	; 0xc2
   264ce:	e7e1      	b.n	26494 <z_time_slice+0x30>
	pending_current = NULL;
   264d0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   264d2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   264d4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   264d6:	4a14      	ldr	r2, [pc, #80]	; (26528 <z_time_slice+0xc4>)
   264d8:	5cd3      	ldrb	r3, [r2, r3]
   264da:	2b00      	cmp	r3, #0
   264dc:	d0e8      	beq.n	264b0 <z_time_slice+0x4c>
   264de:	4620      	mov	r0, r4
   264e0:	f7ff fc58 	bl	25d94 <sliceable>
   264e4:	2800      	cmp	r0, #0
   264e6:	d0e3      	beq.n	264b0 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   264e8:	7b63      	ldrb	r3, [r4, #13]
   264ea:	06db      	lsls	r3, r3, #27
   264ec:	d102      	bne.n	264f4 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   264ee:	4620      	mov	r0, r4
   264f0:	f7ff ff66 	bl	263c0 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   264f4:	4620      	mov	r0, r4
   264f6:	e7d9      	b.n	264ac <z_time_slice+0x48>
	__asm__ volatile(
   264f8:	f385 8811 	msr	BASEPRI, r5
   264fc:	f3bf 8f6f 	isb	sy
}
   26500:	bd38      	pop	{r3, r4, r5, pc}
   26502:	bf00      	nop
   26504:	2000eb90 	.word	0x2000eb90
   26508:	000340d9 	.word	0x000340d9
   2650c:	00034132 	.word	0x00034132
   26510:	00033bc2 	.word	0x00033bc2
   26514:	00034147 	.word	0x00034147
   26518:	2000eb4c 	.word	0x2000eb4c
   2651c:	2000eb84 	.word	0x2000eb84
   26520:	00034106 	.word	0x00034106
   26524:	0003411d 	.word	0x0003411d
   26528:	2001048c 	.word	0x2001048c

0002652c <unready_thread>:
{
   2652c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2652e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26532:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26534:	2a00      	cmp	r2, #0
   26536:	7b43      	ldrb	r3, [r0, #13]
   26538:	da06      	bge.n	26548 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2653e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26540:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26542:	4806      	ldr	r0, [pc, #24]	; (2655c <unready_thread+0x30>)
   26544:	f7ff ff1c 	bl	26380 <z_priq_dumb_remove>
	update_cache(thread == _current);
   26548:	4b05      	ldr	r3, [pc, #20]	; (26560 <unready_thread+0x34>)
   2654a:	6898      	ldr	r0, [r3, #8]
   2654c:	1b03      	subs	r3, r0, r4
   2654e:	4258      	negs	r0, r3
   26550:	4158      	adcs	r0, r3
}
   26552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   26556:	f7ff bc93 	b.w	25e80 <update_cache>
   2655a:	bf00      	nop
   2655c:	2000eb68 	.word	0x2000eb68
   26560:	2000eb4c 	.word	0x2000eb4c

00026564 <add_to_waitq_locked>:
{
   26564:	b538      	push	{r3, r4, r5, lr}
   26566:	4604      	mov	r4, r0
   26568:	460d      	mov	r5, r1
	unready_thread(thread);
   2656a:	f7ff ffdf 	bl	2652c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2656e:	7b63      	ldrb	r3, [r4, #13]
   26570:	f043 0302 	orr.w	r3, r3, #2
   26574:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26576:	b34d      	cbz	r5, 265cc <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26578:	4b15      	ldr	r3, [pc, #84]	; (265d0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2657a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2657c:	429c      	cmp	r4, r3
   2657e:	d109      	bne.n	26594 <add_to_waitq_locked+0x30>
   26580:	4914      	ldr	r1, [pc, #80]	; (265d4 <add_to_waitq_locked+0x70>)
   26582:	4815      	ldr	r0, [pc, #84]	; (265d8 <add_to_waitq_locked+0x74>)
   26584:	23bc      	movs	r3, #188	; 0xbc
   26586:	4a15      	ldr	r2, [pc, #84]	; (265dc <add_to_waitq_locked+0x78>)
   26588:	f004 fc16 	bl	2adb8 <assert_print>
   2658c:	21bc      	movs	r1, #188	; 0xbc
   2658e:	4813      	ldr	r0, [pc, #76]	; (265dc <add_to_waitq_locked+0x78>)
   26590:	f004 fc0b 	bl	2adaa <assert_post_action>
	return list->head == list;
   26594:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26596:	429d      	cmp	r5, r3
   26598:	d109      	bne.n	265ae <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   2659a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2659c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   265a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   265a2:	606c      	str	r4, [r5, #4]
}
   265a4:	e012      	b.n	265cc <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   265a6:	686a      	ldr	r2, [r5, #4]
   265a8:	4293      	cmp	r3, r2
   265aa:	d0f6      	beq.n	2659a <add_to_waitq_locked+0x36>
   265ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   265ae:	2b00      	cmp	r3, #0
   265b0:	d0f3      	beq.n	2659a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   265b2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   265b6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   265ba:	428a      	cmp	r2, r1
   265bc:	d0f3      	beq.n	265a6 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   265be:	4291      	cmp	r1, r2
   265c0:	ddf1      	ble.n	265a6 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   265c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   265c4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   265c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   265ca:	605c      	str	r4, [r3, #4]
}
   265cc:	bd38      	pop	{r3, r4, r5, pc}
   265ce:	bf00      	nop
   265d0:	2000ddc0 	.word	0x2000ddc0
   265d4:	0003bb27 	.word	0x0003bb27
   265d8:	00033bc2 	.word	0x00033bc2
   265dc:	0003b945 	.word	0x0003b945

000265e0 <pend_locked>:
{
   265e0:	b570      	push	{r4, r5, r6, lr}
   265e2:	4615      	mov	r5, r2
   265e4:	461c      	mov	r4, r3
   265e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   265e8:	f7ff ffbc 	bl	26564 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   265ec:	f1b4 3fff 	cmp.w	r4, #4294967295
   265f0:	bf08      	it	eq
   265f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   265f6:	d008      	beq.n	2660a <pend_locked+0x2a>
   265f8:	462a      	mov	r2, r5
   265fa:	4623      	mov	r3, r4
   265fc:	f106 0018 	add.w	r0, r6, #24
   26600:	4902      	ldr	r1, [pc, #8]	; (2660c <pend_locked+0x2c>)
}
   26602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26606:	f000 bde7 	b.w	271d8 <z_add_timeout>
   2660a:	bd70      	pop	{r4, r5, r6, pc}
   2660c:	000305b5 	.word	0x000305b5

00026610 <z_pend_curr>:
{
   26610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26614:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   26618:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 266d0 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2661c:	4c2d      	ldr	r4, [pc, #180]	; (266d4 <z_pend_curr+0xc4>)
{
   2661e:	4617      	mov	r7, r2
	pending_current = _current;
   26620:	4b2d      	ldr	r3, [pc, #180]	; (266d8 <z_pend_curr+0xc8>)
   26622:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26626:	42a0      	cmp	r0, r4
{
   26628:	4605      	mov	r5, r0
   2662a:	460e      	mov	r6, r1
	pending_current = _current;
   2662c:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2662e:	d10b      	bne.n	26648 <z_pend_curr+0x38>
   26630:	492a      	ldr	r1, [pc, #168]	; (266dc <z_pend_curr+0xcc>)
   26632:	482b      	ldr	r0, [pc, #172]	; (266e0 <z_pend_curr+0xd0>)
   26634:	f240 3356 	movw	r3, #854	; 0x356
   26638:	4a2a      	ldr	r2, [pc, #168]	; (266e4 <z_pend_curr+0xd4>)
   2663a:	f004 fbbd 	bl	2adb8 <assert_print>
   2663e:	f240 3156 	movw	r1, #854	; 0x356
   26642:	4828      	ldr	r0, [pc, #160]	; (266e4 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26644:	f004 fbb1 	bl	2adaa <assert_post_action>
	__asm__ volatile(
   26648:	f04f 0220 	mov.w	r2, #32
   2664c:	f3ef 8311 	mrs	r3, BASEPRI
   26650:	f382 8812 	msr	BASEPRI_MAX, r2
   26654:	f3bf 8f6f 	isb	sy
   26658:	4620      	mov	r0, r4
   2665a:	f7fe fae1 	bl	24c20 <z_spin_lock_valid>
   2665e:	b960      	cbnz	r0, 2667a <z_pend_curr+0x6a>
   26660:	2394      	movs	r3, #148	; 0x94
   26662:	4a21      	ldr	r2, [pc, #132]	; (266e8 <z_pend_curr+0xd8>)
   26664:	4921      	ldr	r1, [pc, #132]	; (266ec <z_pend_curr+0xdc>)
   26666:	481e      	ldr	r0, [pc, #120]	; (266e0 <z_pend_curr+0xd0>)
   26668:	f004 fba6 	bl	2adb8 <assert_print>
   2666c:	4621      	mov	r1, r4
   2666e:	4820      	ldr	r0, [pc, #128]	; (266f0 <z_pend_curr+0xe0>)
   26670:	f004 fba2 	bl	2adb8 <assert_print>
   26674:	2194      	movs	r1, #148	; 0x94
   26676:	481c      	ldr	r0, [pc, #112]	; (266e8 <z_pend_curr+0xd8>)
   26678:	e7e4      	b.n	26644 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2667a:	4620      	mov	r0, r4
   2667c:	f7fe faec 	bl	24c58 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   26680:	f8da 0008 	ldr.w	r0, [sl, #8]
   26684:	4642      	mov	r2, r8
   26686:	464b      	mov	r3, r9
   26688:	4639      	mov	r1, r7
   2668a:	f7ff ffa9 	bl	265e0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2668e:	4628      	mov	r0, r5
   26690:	f7fe fad4 	bl	24c3c <z_spin_unlock_valid>
   26694:	b958      	cbnz	r0, 266ae <z_pend_curr+0x9e>
   26696:	4917      	ldr	r1, [pc, #92]	; (266f4 <z_pend_curr+0xe4>)
   26698:	23e1      	movs	r3, #225	; 0xe1
   2669a:	4a13      	ldr	r2, [pc, #76]	; (266e8 <z_pend_curr+0xd8>)
   2669c:	4810      	ldr	r0, [pc, #64]	; (266e0 <z_pend_curr+0xd0>)
   2669e:	f004 fb8b 	bl	2adb8 <assert_print>
   266a2:	4629      	mov	r1, r5
   266a4:	4814      	ldr	r0, [pc, #80]	; (266f8 <z_pend_curr+0xe8>)
   266a6:	f004 fb87 	bl	2adb8 <assert_print>
   266aa:	21e1      	movs	r1, #225	; 0xe1
   266ac:	e7e3      	b.n	26676 <z_pend_curr+0x66>
   266ae:	4620      	mov	r0, r4
   266b0:	f7fe fac4 	bl	24c3c <z_spin_unlock_valid>
   266b4:	b938      	cbnz	r0, 266c6 <z_pend_curr+0xb6>
   266b6:	490f      	ldr	r1, [pc, #60]	; (266f4 <z_pend_curr+0xe4>)
   266b8:	23e1      	movs	r3, #225	; 0xe1
   266ba:	4a0b      	ldr	r2, [pc, #44]	; (266e8 <z_pend_curr+0xd8>)
   266bc:	4808      	ldr	r0, [pc, #32]	; (266e0 <z_pend_curr+0xd0>)
   266be:	f004 fb7b 	bl	2adb8 <assert_print>
   266c2:	4621      	mov	r1, r4
   266c4:	e7ee      	b.n	266a4 <z_pend_curr+0x94>
   266c6:	4630      	mov	r0, r6
}
   266c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   266cc:	f7ea beee 	b.w	114ac <arch_swap>
   266d0:	2000eb4c 	.word	0x2000eb4c
   266d4:	2000eb90 	.word	0x2000eb90
   266d8:	2000eb84 	.word	0x2000eb84
   266dc:	0003bbd5 	.word	0x0003bbd5
   266e0:	00033bc2 	.word	0x00033bc2
   266e4:	0003b945 	.word	0x0003b945
   266e8:	000340d9 	.word	0x000340d9
   266ec:	00034132 	.word	0x00034132
   266f0:	00034147 	.word	0x00034147
   266f4:	00034106 	.word	0x00034106
   266f8:	0003411d 	.word	0x0003411d

000266fc <z_set_prio>:
{
   266fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26700:	4604      	mov	r4, r0
   26702:	460e      	mov	r6, r1
   26704:	f04f 0320 	mov.w	r3, #32
   26708:	f3ef 8911 	mrs	r9, BASEPRI
   2670c:	f383 8812 	msr	BASEPRI_MAX, r3
   26710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26714:	4837      	ldr	r0, [pc, #220]	; (267f4 <z_set_prio+0xf8>)
   26716:	f7fe fa83 	bl	24c20 <z_spin_lock_valid>
   2671a:	4607      	mov	r7, r0
   2671c:	b960      	cbnz	r0, 26738 <z_set_prio+0x3c>
   2671e:	2394      	movs	r3, #148	; 0x94
   26720:	4a35      	ldr	r2, [pc, #212]	; (267f8 <z_set_prio+0xfc>)
   26722:	4936      	ldr	r1, [pc, #216]	; (267fc <z_set_prio+0x100>)
   26724:	4836      	ldr	r0, [pc, #216]	; (26800 <z_set_prio+0x104>)
   26726:	f004 fb47 	bl	2adb8 <assert_print>
   2672a:	4932      	ldr	r1, [pc, #200]	; (267f4 <z_set_prio+0xf8>)
   2672c:	4835      	ldr	r0, [pc, #212]	; (26804 <z_set_prio+0x108>)
   2672e:	f004 fb43 	bl	2adb8 <assert_print>
   26732:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26734:	4830      	ldr	r0, [pc, #192]	; (267f8 <z_set_prio+0xfc>)
   26736:	e021      	b.n	2677c <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   26738:	482e      	ldr	r0, [pc, #184]	; (267f4 <z_set_prio+0xf8>)
   2673a:	f7fe fa8d 	bl	24c58 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2673e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26740:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26742:	06da      	lsls	r2, r3, #27
   26744:	d11c      	bne.n	26780 <z_set_prio+0x84>
	return node->next != NULL;
   26746:	69a5      	ldr	r5, [r4, #24]
   26748:	b9d5      	cbnz	r5, 26780 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2674a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 26808 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2674e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26752:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26754:	4621      	mov	r1, r4
   26756:	4640      	mov	r0, r8
   26758:	f7ff fe12 	bl	26380 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2675c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2675e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26760:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26764:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26766:	4b29      	ldr	r3, [pc, #164]	; (2680c <z_set_prio+0x110>)
   26768:	429c      	cmp	r4, r3
   2676a:	d11b      	bne.n	267a4 <z_set_prio+0xa8>
   2676c:	4928      	ldr	r1, [pc, #160]	; (26810 <z_set_prio+0x114>)
   2676e:	4824      	ldr	r0, [pc, #144]	; (26800 <z_set_prio+0x104>)
   26770:	23bc      	movs	r3, #188	; 0xbc
   26772:	4a28      	ldr	r2, [pc, #160]	; (26814 <z_set_prio+0x118>)
   26774:	f004 fb20 	bl	2adb8 <assert_print>
   26778:	21bc      	movs	r1, #188	; 0xbc
   2677a:	4826      	ldr	r0, [pc, #152]	; (26814 <z_set_prio+0x118>)
   2677c:	f004 fb15 	bl	2adaa <assert_post_action>
   26780:	2700      	movs	r7, #0
			thread->base.prio = prio;
   26782:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26784:	481b      	ldr	r0, [pc, #108]	; (267f4 <z_set_prio+0xf8>)
   26786:	f7fe fa59 	bl	24c3c <z_spin_unlock_valid>
   2678a:	bb58      	cbnz	r0, 267e4 <z_set_prio+0xe8>
   2678c:	23c2      	movs	r3, #194	; 0xc2
   2678e:	4a1a      	ldr	r2, [pc, #104]	; (267f8 <z_set_prio+0xfc>)
   26790:	4921      	ldr	r1, [pc, #132]	; (26818 <z_set_prio+0x11c>)
   26792:	481b      	ldr	r0, [pc, #108]	; (26800 <z_set_prio+0x104>)
   26794:	f004 fb10 	bl	2adb8 <assert_print>
   26798:	4916      	ldr	r1, [pc, #88]	; (267f4 <z_set_prio+0xf8>)
   2679a:	4820      	ldr	r0, [pc, #128]	; (2681c <z_set_prio+0x120>)
   2679c:	f004 fb0c 	bl	2adb8 <assert_print>
   267a0:	21c2      	movs	r1, #194	; 0xc2
   267a2:	e7c7      	b.n	26734 <z_set_prio+0x38>
	return list->head == list;
   267a4:	4643      	mov	r3, r8
   267a6:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267aa:	4542      	cmp	r2, r8
   267ac:	bf18      	it	ne
   267ae:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   267b0:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   267b2:	b925      	cbnz	r5, 267be <z_set_prio+0xc2>
	node->prev = tail;
   267b4:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   267b8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   267ba:	621c      	str	r4, [r3, #32]
}
   267bc:	e00a      	b.n	267d4 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   267be:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   267c2:	428e      	cmp	r6, r1
   267c4:	d00a      	beq.n	267dc <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   267c6:	42b1      	cmp	r1, r6
   267c8:	dd08      	ble.n	267dc <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   267ca:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   267cc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   267d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   267d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   267d4:	2001      	movs	r0, #1
   267d6:	f7ff fb53 	bl	25e80 <update_cache>
   267da:	e7d3      	b.n	26784 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   267dc:	42aa      	cmp	r2, r5
   267de:	d0e9      	beq.n	267b4 <z_set_prio+0xb8>
   267e0:	682d      	ldr	r5, [r5, #0]
   267e2:	e7e6      	b.n	267b2 <z_set_prio+0xb6>
	__asm__ volatile(
   267e4:	f389 8811 	msr	BASEPRI, r9
   267e8:	f3bf 8f6f 	isb	sy
}
   267ec:	4638      	mov	r0, r7
   267ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   267f2:	bf00      	nop
   267f4:	2000eb90 	.word	0x2000eb90
   267f8:	000340d9 	.word	0x000340d9
   267fc:	00034132 	.word	0x00034132
   26800:	00033bc2 	.word	0x00033bc2
   26804:	00034147 	.word	0x00034147
   26808:	2000eb68 	.word	0x2000eb68
   2680c:	2000ddc0 	.word	0x2000ddc0
   26810:	0003bb27 	.word	0x0003bb27
   26814:	0003b945 	.word	0x0003b945
   26818:	00034106 	.word	0x00034106
   2681c:	0003411d 	.word	0x0003411d

00026820 <z_impl_k_thread_suspend>:
{
   26820:	b570      	push	{r4, r5, r6, lr}
   26822:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26824:	3018      	adds	r0, #24
   26826:	f000 fd97 	bl	27358 <z_abort_timeout>
	__asm__ volatile(
   2682a:	f04f 0320 	mov.w	r3, #32
   2682e:	f3ef 8611 	mrs	r6, BASEPRI
   26832:	f383 8812 	msr	BASEPRI_MAX, r3
   26836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2683a:	4824      	ldr	r0, [pc, #144]	; (268cc <z_impl_k_thread_suspend+0xac>)
   2683c:	f7fe f9f0 	bl	24c20 <z_spin_lock_valid>
   26840:	b968      	cbnz	r0, 2685e <z_impl_k_thread_suspend+0x3e>
   26842:	2394      	movs	r3, #148	; 0x94
   26844:	4a22      	ldr	r2, [pc, #136]	; (268d0 <z_impl_k_thread_suspend+0xb0>)
   26846:	4923      	ldr	r1, [pc, #140]	; (268d4 <z_impl_k_thread_suspend+0xb4>)
   26848:	4823      	ldr	r0, [pc, #140]	; (268d8 <z_impl_k_thread_suspend+0xb8>)
   2684a:	f004 fab5 	bl	2adb8 <assert_print>
   2684e:	491f      	ldr	r1, [pc, #124]	; (268cc <z_impl_k_thread_suspend+0xac>)
   26850:	4822      	ldr	r0, [pc, #136]	; (268dc <z_impl_k_thread_suspend+0xbc>)
   26852:	f004 fab1 	bl	2adb8 <assert_print>
   26856:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26858:	481d      	ldr	r0, [pc, #116]	; (268d0 <z_impl_k_thread_suspend+0xb0>)
   2685a:	f004 faa6 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   2685e:	481b      	ldr	r0, [pc, #108]	; (268cc <z_impl_k_thread_suspend+0xac>)
   26860:	f7fe f9fa 	bl	24c58 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   26864:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26868:	7b63      	ldrb	r3, [r4, #13]
   2686a:	2a00      	cmp	r2, #0
   2686c:	da06      	bge.n	2687c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2686e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26872:	4621      	mov	r1, r4
   26874:	481a      	ldr	r0, [pc, #104]	; (268e0 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26876:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26878:	f7ff fd82 	bl	26380 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2687c:	4d19      	ldr	r5, [pc, #100]	; (268e4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2687e:	7b63      	ldrb	r3, [r4, #13]
   26880:	68a8      	ldr	r0, [r5, #8]
   26882:	f043 0310 	orr.w	r3, r3, #16
   26886:	7363      	strb	r3, [r4, #13]
   26888:	1b03      	subs	r3, r0, r4
   2688a:	4258      	negs	r0, r3
   2688c:	4158      	adcs	r0, r3
   2688e:	f7ff faf7 	bl	25e80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26892:	480e      	ldr	r0, [pc, #56]	; (268cc <z_impl_k_thread_suspend+0xac>)
   26894:	f7fe f9d2 	bl	24c3c <z_spin_unlock_valid>
   26898:	b958      	cbnz	r0, 268b2 <z_impl_k_thread_suspend+0x92>
   2689a:	23c2      	movs	r3, #194	; 0xc2
   2689c:	4a0c      	ldr	r2, [pc, #48]	; (268d0 <z_impl_k_thread_suspend+0xb0>)
   2689e:	4912      	ldr	r1, [pc, #72]	; (268e8 <z_impl_k_thread_suspend+0xc8>)
   268a0:	480d      	ldr	r0, [pc, #52]	; (268d8 <z_impl_k_thread_suspend+0xb8>)
   268a2:	f004 fa89 	bl	2adb8 <assert_print>
   268a6:	4909      	ldr	r1, [pc, #36]	; (268cc <z_impl_k_thread_suspend+0xac>)
   268a8:	4810      	ldr	r0, [pc, #64]	; (268ec <z_impl_k_thread_suspend+0xcc>)
   268aa:	f004 fa85 	bl	2adb8 <assert_print>
   268ae:	21c2      	movs	r1, #194	; 0xc2
   268b0:	e7d2      	b.n	26858 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   268b2:	f386 8811 	msr	BASEPRI, r6
   268b6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   268ba:	68ab      	ldr	r3, [r5, #8]
   268bc:	42a3      	cmp	r3, r4
   268be:	d103      	bne.n	268c8 <z_impl_k_thread_suspend+0xa8>
}
   268c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   268c4:	f009 be6c 	b.w	305a0 <z_reschedule_unlocked>
}
   268c8:	bd70      	pop	{r4, r5, r6, pc}
   268ca:	bf00      	nop
   268cc:	2000eb90 	.word	0x2000eb90
   268d0:	000340d9 	.word	0x000340d9
   268d4:	00034132 	.word	0x00034132
   268d8:	00033bc2 	.word	0x00033bc2
   268dc:	00034147 	.word	0x00034147
   268e0:	2000eb68 	.word	0x2000eb68
   268e4:	2000eb4c 	.word	0x2000eb4c
   268e8:	00034106 	.word	0x00034106
   268ec:	0003411d 	.word	0x0003411d

000268f0 <unpend_thread_no_timeout>:
{
   268f0:	b510      	push	{r4, lr}
   268f2:	4604      	mov	r4, r0
   268f4:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   268f6:	b958      	cbnz	r0, 26910 <unpend_thread_no_timeout+0x20>
   268f8:	490a      	ldr	r1, [pc, #40]	; (26924 <unpend_thread_no_timeout+0x34>)
   268fa:	480b      	ldr	r0, [pc, #44]	; (26928 <unpend_thread_no_timeout+0x38>)
   268fc:	f240 23c9 	movw	r3, #713	; 0x2c9
   26900:	4a0a      	ldr	r2, [pc, #40]	; (2692c <unpend_thread_no_timeout+0x3c>)
   26902:	f004 fa59 	bl	2adb8 <assert_print>
   26906:	f240 21c9 	movw	r1, #713	; 0x2c9
   2690a:	4808      	ldr	r0, [pc, #32]	; (2692c <unpend_thread_no_timeout+0x3c>)
   2690c:	f004 fa4d 	bl	2adaa <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26910:	4621      	mov	r1, r4
   26912:	f7ff fd35 	bl	26380 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26916:	7b63      	ldrb	r3, [r4, #13]
   26918:	f023 0302 	bic.w	r3, r3, #2
   2691c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2691e:	2300      	movs	r3, #0
   26920:	60a3      	str	r3, [r4, #8]
}
   26922:	bd10      	pop	{r4, pc}
   26924:	0003bc0c 	.word	0x0003bc0c
   26928:	00033bc2 	.word	0x00033bc2
   2692c:	0003b945 	.word	0x0003b945

00026930 <z_unpend_thread>:
{
   26930:	b538      	push	{r3, r4, r5, lr}
   26932:	4604      	mov	r4, r0
	__asm__ volatile(
   26934:	f04f 0320 	mov.w	r3, #32
   26938:	f3ef 8511 	mrs	r5, BASEPRI
   2693c:	f383 8812 	msr	BASEPRI_MAX, r3
   26940:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26944:	4819      	ldr	r0, [pc, #100]	; (269ac <z_unpend_thread+0x7c>)
   26946:	f7fe f96b 	bl	24c20 <z_spin_lock_valid>
   2694a:	b968      	cbnz	r0, 26968 <z_unpend_thread+0x38>
   2694c:	2394      	movs	r3, #148	; 0x94
   2694e:	4a18      	ldr	r2, [pc, #96]	; (269b0 <z_unpend_thread+0x80>)
   26950:	4918      	ldr	r1, [pc, #96]	; (269b4 <z_unpend_thread+0x84>)
   26952:	4819      	ldr	r0, [pc, #100]	; (269b8 <z_unpend_thread+0x88>)
   26954:	f004 fa30 	bl	2adb8 <assert_print>
   26958:	4914      	ldr	r1, [pc, #80]	; (269ac <z_unpend_thread+0x7c>)
   2695a:	4818      	ldr	r0, [pc, #96]	; (269bc <z_unpend_thread+0x8c>)
   2695c:	f004 fa2c 	bl	2adb8 <assert_print>
   26960:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26962:	4813      	ldr	r0, [pc, #76]	; (269b0 <z_unpend_thread+0x80>)
   26964:	f004 fa21 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26968:	4810      	ldr	r0, [pc, #64]	; (269ac <z_unpend_thread+0x7c>)
   2696a:	f7fe f975 	bl	24c58 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   2696e:	68a3      	ldr	r3, [r4, #8]
   26970:	b113      	cbz	r3, 26978 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   26972:	4620      	mov	r0, r4
   26974:	f7ff ffbc 	bl	268f0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26978:	480c      	ldr	r0, [pc, #48]	; (269ac <z_unpend_thread+0x7c>)
   2697a:	f7fe f95f 	bl	24c3c <z_spin_unlock_valid>
   2697e:	b958      	cbnz	r0, 26998 <z_unpend_thread+0x68>
   26980:	23c2      	movs	r3, #194	; 0xc2
   26982:	4a0b      	ldr	r2, [pc, #44]	; (269b0 <z_unpend_thread+0x80>)
   26984:	490e      	ldr	r1, [pc, #56]	; (269c0 <z_unpend_thread+0x90>)
   26986:	480c      	ldr	r0, [pc, #48]	; (269b8 <z_unpend_thread+0x88>)
   26988:	f004 fa16 	bl	2adb8 <assert_print>
   2698c:	4907      	ldr	r1, [pc, #28]	; (269ac <z_unpend_thread+0x7c>)
   2698e:	480d      	ldr	r0, [pc, #52]	; (269c4 <z_unpend_thread+0x94>)
   26990:	f004 fa12 	bl	2adb8 <assert_print>
   26994:	21c2      	movs	r1, #194	; 0xc2
   26996:	e7e4      	b.n	26962 <z_unpend_thread+0x32>
	__asm__ volatile(
   26998:	f385 8811 	msr	BASEPRI, r5
   2699c:	f3bf 8f6f 	isb	sy
   269a0:	f104 0018 	add.w	r0, r4, #24
}
   269a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   269a8:	f000 bcd6 	b.w	27358 <z_abort_timeout>
   269ac:	2000eb90 	.word	0x2000eb90
   269b0:	000340d9 	.word	0x000340d9
   269b4:	00034132 	.word	0x00034132
   269b8:	00033bc2 	.word	0x00033bc2
   269bc:	00034147 	.word	0x00034147
   269c0:	00034106 	.word	0x00034106
   269c4:	0003411d 	.word	0x0003411d

000269c8 <z_sched_wake_thread>:
{
   269c8:	b570      	push	{r4, r5, r6, lr}
   269ca:	4604      	mov	r4, r0
   269cc:	460d      	mov	r5, r1
	__asm__ volatile(
   269ce:	f04f 0320 	mov.w	r3, #32
   269d2:	f3ef 8611 	mrs	r6, BASEPRI
   269d6:	f383 8812 	msr	BASEPRI_MAX, r3
   269da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269de:	481f      	ldr	r0, [pc, #124]	; (26a5c <z_sched_wake_thread+0x94>)
   269e0:	f7fe f91e 	bl	24c20 <z_spin_lock_valid>
   269e4:	b968      	cbnz	r0, 26a02 <z_sched_wake_thread+0x3a>
   269e6:	2394      	movs	r3, #148	; 0x94
   269e8:	4a1d      	ldr	r2, [pc, #116]	; (26a60 <z_sched_wake_thread+0x98>)
   269ea:	491e      	ldr	r1, [pc, #120]	; (26a64 <z_sched_wake_thread+0x9c>)
   269ec:	481e      	ldr	r0, [pc, #120]	; (26a68 <z_sched_wake_thread+0xa0>)
   269ee:	f004 f9e3 	bl	2adb8 <assert_print>
   269f2:	491a      	ldr	r1, [pc, #104]	; (26a5c <z_sched_wake_thread+0x94>)
   269f4:	481d      	ldr	r0, [pc, #116]	; (26a6c <z_sched_wake_thread+0xa4>)
   269f6:	f004 f9df 	bl	2adb8 <assert_print>
   269fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269fc:	4818      	ldr	r0, [pc, #96]	; (26a60 <z_sched_wake_thread+0x98>)
   269fe:	f004 f9d4 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26a02:	4816      	ldr	r0, [pc, #88]	; (26a5c <z_sched_wake_thread+0x94>)
   26a04:	f7fe f928 	bl	24c58 <z_spin_lock_set_owner>
		if (!killed) {
   26a08:	7b63      	ldrb	r3, [r4, #13]
   26a0a:	f013 0f28 	tst.w	r3, #40	; 0x28
   26a0e:	d10c      	bne.n	26a2a <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   26a10:	68a3      	ldr	r3, [r4, #8]
   26a12:	b113      	cbz	r3, 26a1a <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   26a14:	4620      	mov	r0, r4
   26a16:	f7ff ff6b 	bl	268f0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26a1a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   26a1c:	b9ad      	cbnz	r5, 26a4a <z_sched_wake_thread+0x82>
   26a1e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   26a22:	4620      	mov	r0, r4
   26a24:	7363      	strb	r3, [r4, #13]
   26a26:	f7ff fa5f 	bl	25ee8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a2a:	480c      	ldr	r0, [pc, #48]	; (26a5c <z_sched_wake_thread+0x94>)
   26a2c:	f7fe f906 	bl	24c3c <z_spin_unlock_valid>
   26a30:	b970      	cbnz	r0, 26a50 <z_sched_wake_thread+0x88>
   26a32:	23c2      	movs	r3, #194	; 0xc2
   26a34:	4a0a      	ldr	r2, [pc, #40]	; (26a60 <z_sched_wake_thread+0x98>)
   26a36:	490e      	ldr	r1, [pc, #56]	; (26a70 <z_sched_wake_thread+0xa8>)
   26a38:	480b      	ldr	r0, [pc, #44]	; (26a68 <z_sched_wake_thread+0xa0>)
   26a3a:	f004 f9bd 	bl	2adb8 <assert_print>
   26a3e:	4907      	ldr	r1, [pc, #28]	; (26a5c <z_sched_wake_thread+0x94>)
   26a40:	480c      	ldr	r0, [pc, #48]	; (26a74 <z_sched_wake_thread+0xac>)
   26a42:	f004 f9b9 	bl	2adb8 <assert_print>
   26a46:	21c2      	movs	r1, #194	; 0xc2
   26a48:	e7d8      	b.n	269fc <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26a4a:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   26a4e:	e7e8      	b.n	26a22 <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   26a50:	f386 8811 	msr	BASEPRI, r6
   26a54:	f3bf 8f6f 	isb	sy
}
   26a58:	bd70      	pop	{r4, r5, r6, pc}
   26a5a:	bf00      	nop
   26a5c:	2000eb90 	.word	0x2000eb90
   26a60:	000340d9 	.word	0x000340d9
   26a64:	00034132 	.word	0x00034132
   26a68:	00033bc2 	.word	0x00033bc2
   26a6c:	00034147 	.word	0x00034147
   26a70:	00034106 	.word	0x00034106
   26a74:	0003411d 	.word	0x0003411d

00026a78 <z_unpend1_no_timeout>:
{
   26a78:	b570      	push	{r4, r5, r6, lr}
   26a7a:	4605      	mov	r5, r0
	__asm__ volatile(
   26a7c:	f04f 0320 	mov.w	r3, #32
   26a80:	f3ef 8611 	mrs	r6, BASEPRI
   26a84:	f383 8812 	msr	BASEPRI_MAX, r3
   26a88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a8c:	4819      	ldr	r0, [pc, #100]	; (26af4 <z_unpend1_no_timeout+0x7c>)
   26a8e:	f7fe f8c7 	bl	24c20 <z_spin_lock_valid>
   26a92:	b968      	cbnz	r0, 26ab0 <z_unpend1_no_timeout+0x38>
   26a94:	2394      	movs	r3, #148	; 0x94
   26a96:	4a18      	ldr	r2, [pc, #96]	; (26af8 <z_unpend1_no_timeout+0x80>)
   26a98:	4918      	ldr	r1, [pc, #96]	; (26afc <z_unpend1_no_timeout+0x84>)
   26a9a:	4819      	ldr	r0, [pc, #100]	; (26b00 <z_unpend1_no_timeout+0x88>)
   26a9c:	f004 f98c 	bl	2adb8 <assert_print>
   26aa0:	4914      	ldr	r1, [pc, #80]	; (26af4 <z_unpend1_no_timeout+0x7c>)
   26aa2:	4818      	ldr	r0, [pc, #96]	; (26b04 <z_unpend1_no_timeout+0x8c>)
   26aa4:	f004 f988 	bl	2adb8 <assert_print>
   26aa8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26aaa:	4813      	ldr	r0, [pc, #76]	; (26af8 <z_unpend1_no_timeout+0x80>)
   26aac:	f004 f97d 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26ab0:	4810      	ldr	r0, [pc, #64]	; (26af4 <z_unpend1_no_timeout+0x7c>)
   26ab2:	f7fe f8d1 	bl	24c58 <z_spin_lock_set_owner>
	return list->head == list;
   26ab6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ab8:	42a5      	cmp	r5, r4
   26aba:	d013      	beq.n	26ae4 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   26abc:	b114      	cbz	r4, 26ac4 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   26abe:	4620      	mov	r0, r4
   26ac0:	f7ff ff16 	bl	268f0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ac4:	480b      	ldr	r0, [pc, #44]	; (26af4 <z_unpend1_no_timeout+0x7c>)
   26ac6:	f7fe f8b9 	bl	24c3c <z_spin_unlock_valid>
   26aca:	b968      	cbnz	r0, 26ae8 <z_unpend1_no_timeout+0x70>
   26acc:	23c2      	movs	r3, #194	; 0xc2
   26ace:	4a0a      	ldr	r2, [pc, #40]	; (26af8 <z_unpend1_no_timeout+0x80>)
   26ad0:	490d      	ldr	r1, [pc, #52]	; (26b08 <z_unpend1_no_timeout+0x90>)
   26ad2:	480b      	ldr	r0, [pc, #44]	; (26b00 <z_unpend1_no_timeout+0x88>)
   26ad4:	f004 f970 	bl	2adb8 <assert_print>
   26ad8:	4906      	ldr	r1, [pc, #24]	; (26af4 <z_unpend1_no_timeout+0x7c>)
   26ada:	480c      	ldr	r0, [pc, #48]	; (26b0c <z_unpend1_no_timeout+0x94>)
   26adc:	f004 f96c 	bl	2adb8 <assert_print>
   26ae0:	21c2      	movs	r1, #194	; 0xc2
   26ae2:	e7e2      	b.n	26aaa <z_unpend1_no_timeout+0x32>
   26ae4:	2400      	movs	r4, #0
   26ae6:	e7ed      	b.n	26ac4 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   26ae8:	f386 8811 	msr	BASEPRI, r6
   26aec:	f3bf 8f6f 	isb	sy
}
   26af0:	4620      	mov	r0, r4
   26af2:	bd70      	pop	{r4, r5, r6, pc}
   26af4:	2000eb90 	.word	0x2000eb90
   26af8:	000340d9 	.word	0x000340d9
   26afc:	00034132 	.word	0x00034132
   26b00:	00033bc2 	.word	0x00033bc2
   26b04:	00034147 	.word	0x00034147
   26b08:	00034106 	.word	0x00034106
   26b0c:	0003411d 	.word	0x0003411d

00026b10 <z_unpend_first_thread>:
{
   26b10:	b570      	push	{r4, r5, r6, lr}
   26b12:	4605      	mov	r5, r0
	__asm__ volatile(
   26b14:	f04f 0320 	mov.w	r3, #32
   26b18:	f3ef 8611 	mrs	r6, BASEPRI
   26b1c:	f383 8812 	msr	BASEPRI_MAX, r3
   26b20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b24:	481b      	ldr	r0, [pc, #108]	; (26b94 <z_unpend_first_thread+0x84>)
   26b26:	f7fe f87b 	bl	24c20 <z_spin_lock_valid>
   26b2a:	b968      	cbnz	r0, 26b48 <z_unpend_first_thread+0x38>
   26b2c:	2394      	movs	r3, #148	; 0x94
   26b2e:	4a1a      	ldr	r2, [pc, #104]	; (26b98 <z_unpend_first_thread+0x88>)
   26b30:	491a      	ldr	r1, [pc, #104]	; (26b9c <z_unpend_first_thread+0x8c>)
   26b32:	481b      	ldr	r0, [pc, #108]	; (26ba0 <z_unpend_first_thread+0x90>)
   26b34:	f004 f940 	bl	2adb8 <assert_print>
   26b38:	4916      	ldr	r1, [pc, #88]	; (26b94 <z_unpend_first_thread+0x84>)
   26b3a:	481a      	ldr	r0, [pc, #104]	; (26ba4 <z_unpend_first_thread+0x94>)
   26b3c:	f004 f93c 	bl	2adb8 <assert_print>
   26b40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b42:	4815      	ldr	r0, [pc, #84]	; (26b98 <z_unpend_first_thread+0x88>)
   26b44:	f004 f931 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26b48:	4812      	ldr	r0, [pc, #72]	; (26b94 <z_unpend_first_thread+0x84>)
   26b4a:	f7fe f885 	bl	24c58 <z_spin_lock_set_owner>
	return list->head == list;
   26b4e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b50:	42a5      	cmp	r5, r4
   26b52:	d017      	beq.n	26b84 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   26b54:	b134      	cbz	r4, 26b64 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   26b56:	4620      	mov	r0, r4
   26b58:	f7ff feca 	bl	268f0 <unpend_thread_no_timeout>
   26b5c:	f104 0018 	add.w	r0, r4, #24
   26b60:	f000 fbfa 	bl	27358 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b64:	480b      	ldr	r0, [pc, #44]	; (26b94 <z_unpend_first_thread+0x84>)
   26b66:	f7fe f869 	bl	24c3c <z_spin_unlock_valid>
   26b6a:	b968      	cbnz	r0, 26b88 <z_unpend_first_thread+0x78>
   26b6c:	23c2      	movs	r3, #194	; 0xc2
   26b6e:	4a0a      	ldr	r2, [pc, #40]	; (26b98 <z_unpend_first_thread+0x88>)
   26b70:	490d      	ldr	r1, [pc, #52]	; (26ba8 <z_unpend_first_thread+0x98>)
   26b72:	480b      	ldr	r0, [pc, #44]	; (26ba0 <z_unpend_first_thread+0x90>)
   26b74:	f004 f920 	bl	2adb8 <assert_print>
   26b78:	4906      	ldr	r1, [pc, #24]	; (26b94 <z_unpend_first_thread+0x84>)
   26b7a:	480c      	ldr	r0, [pc, #48]	; (26bac <z_unpend_first_thread+0x9c>)
   26b7c:	f004 f91c 	bl	2adb8 <assert_print>
   26b80:	21c2      	movs	r1, #194	; 0xc2
   26b82:	e7de      	b.n	26b42 <z_unpend_first_thread+0x32>
   26b84:	2400      	movs	r4, #0
   26b86:	e7ed      	b.n	26b64 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   26b88:	f386 8811 	msr	BASEPRI, r6
   26b8c:	f3bf 8f6f 	isb	sy
}
   26b90:	4620      	mov	r0, r4
   26b92:	bd70      	pop	{r4, r5, r6, pc}
   26b94:	2000eb90 	.word	0x2000eb90
   26b98:	000340d9 	.word	0x000340d9
   26b9c:	00034132 	.word	0x00034132
   26ba0:	00033bc2 	.word	0x00033bc2
   26ba4:	00034147 	.word	0x00034147
   26ba8:	00034106 	.word	0x00034106
   26bac:	0003411d 	.word	0x0003411d

00026bb0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   26bb0:	4b02      	ldr	r3, [pc, #8]	; (26bbc <z_sched_init+0xc>)
   26bb2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   26bb6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   26bba:	4770      	bx	lr
   26bbc:	2000eb4c 	.word	0x2000eb4c

00026bc0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bc2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26bc6:	b16b      	cbz	r3, 26be4 <z_impl_k_yield+0x24>
   26bc8:	493c      	ldr	r1, [pc, #240]	; (26cbc <z_impl_k_yield+0xfc>)
   26bca:	f240 5371 	movw	r3, #1393	; 0x571
   26bce:	4a3c      	ldr	r2, [pc, #240]	; (26cc0 <z_impl_k_yield+0x100>)
   26bd0:	483c      	ldr	r0, [pc, #240]	; (26cc4 <z_impl_k_yield+0x104>)
   26bd2:	f004 f8f1 	bl	2adb8 <assert_print>
   26bd6:	483c      	ldr	r0, [pc, #240]	; (26cc8 <z_impl_k_yield+0x108>)
   26bd8:	f004 f8ee 	bl	2adb8 <assert_print>
   26bdc:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26be0:	4837      	ldr	r0, [pc, #220]	; (26cc0 <z_impl_k_yield+0x100>)
   26be2:	e017      	b.n	26c14 <z_impl_k_yield+0x54>
	__asm__ volatile(
   26be4:	f04f 0320 	mov.w	r3, #32
   26be8:	f3ef 8611 	mrs	r6, BASEPRI
   26bec:	f383 8812 	msr	BASEPRI_MAX, r3
   26bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26bf4:	4835      	ldr	r0, [pc, #212]	; (26ccc <z_impl_k_yield+0x10c>)
   26bf6:	f7fe f813 	bl	24c20 <z_spin_lock_valid>
   26bfa:	b968      	cbnz	r0, 26c18 <z_impl_k_yield+0x58>
   26bfc:	2394      	movs	r3, #148	; 0x94
   26bfe:	4a34      	ldr	r2, [pc, #208]	; (26cd0 <z_impl_k_yield+0x110>)
   26c00:	4934      	ldr	r1, [pc, #208]	; (26cd4 <z_impl_k_yield+0x114>)
   26c02:	4830      	ldr	r0, [pc, #192]	; (26cc4 <z_impl_k_yield+0x104>)
   26c04:	f004 f8d8 	bl	2adb8 <assert_print>
   26c08:	4930      	ldr	r1, [pc, #192]	; (26ccc <z_impl_k_yield+0x10c>)
   26c0a:	4833      	ldr	r0, [pc, #204]	; (26cd8 <z_impl_k_yield+0x118>)
   26c0c:	f004 f8d4 	bl	2adb8 <assert_print>
   26c10:	2194      	movs	r1, #148	; 0x94
   26c12:	482f      	ldr	r0, [pc, #188]	; (26cd0 <z_impl_k_yield+0x110>)
   26c14:	f004 f8c9 	bl	2adaa <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   26c18:	4c30      	ldr	r4, [pc, #192]	; (26cdc <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   26c1a:	482c      	ldr	r0, [pc, #176]	; (26ccc <z_impl_k_yield+0x10c>)
   26c1c:	f7fe f81c 	bl	24c58 <z_spin_lock_set_owner>
   26c20:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   26c22:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26c26:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26c28:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26c2e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26c30:	f7ff fba6 	bl	26380 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   26c34:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26c36:	7b5a      	ldrb	r2, [r3, #13]
   26c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26c3c:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26c3e:	4a28      	ldr	r2, [pc, #160]	; (26ce0 <z_impl_k_yield+0x120>)
   26c40:	4293      	cmp	r3, r2
   26c42:	d107      	bne.n	26c54 <z_impl_k_yield+0x94>
   26c44:	4927      	ldr	r1, [pc, #156]	; (26ce4 <z_impl_k_yield+0x124>)
   26c46:	23bc      	movs	r3, #188	; 0xbc
   26c48:	4a1d      	ldr	r2, [pc, #116]	; (26cc0 <z_impl_k_yield+0x100>)
   26c4a:	481e      	ldr	r0, [pc, #120]	; (26cc4 <z_impl_k_yield+0x104>)
   26c4c:	f004 f8b4 	bl	2adb8 <assert_print>
   26c50:	21bc      	movs	r1, #188	; 0xbc
   26c52:	e7c5      	b.n	26be0 <z_impl_k_yield+0x20>
	return list->head == list;
   26c54:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   26c56:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26c58:	42aa      	cmp	r2, r5
   26c5a:	bf08      	it	eq
   26c5c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26c5e:	b922      	cbnz	r2, 26c6a <z_impl_k_yield+0xaa>
	node->prev = tail;
   26c60:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   26c64:	600b      	str	r3, [r1, #0]
	list->tail = node;
   26c66:	6223      	str	r3, [r4, #32]
}
   26c68:	e00c      	b.n	26c84 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   26c6a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26c6e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26c72:	42b8      	cmp	r0, r7
   26c74:	d019      	beq.n	26caa <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26c76:	4287      	cmp	r7, r0
   26c78:	dd17      	ble.n	26caa <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   26c7a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26c7c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26c80:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26c82:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26c84:	2001      	movs	r0, #1
   26c86:	f7ff f8fb 	bl	25e80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c8a:	4810      	ldr	r0, [pc, #64]	; (26ccc <z_impl_k_yield+0x10c>)
   26c8c:	f7fd ffd6 	bl	24c3c <z_spin_unlock_valid>
   26c90:	b978      	cbnz	r0, 26cb2 <z_impl_k_yield+0xf2>
   26c92:	23e1      	movs	r3, #225	; 0xe1
   26c94:	4a0e      	ldr	r2, [pc, #56]	; (26cd0 <z_impl_k_yield+0x110>)
   26c96:	4914      	ldr	r1, [pc, #80]	; (26ce8 <z_impl_k_yield+0x128>)
   26c98:	480a      	ldr	r0, [pc, #40]	; (26cc4 <z_impl_k_yield+0x104>)
   26c9a:	f004 f88d 	bl	2adb8 <assert_print>
   26c9e:	490b      	ldr	r1, [pc, #44]	; (26ccc <z_impl_k_yield+0x10c>)
   26ca0:	4812      	ldr	r0, [pc, #72]	; (26cec <z_impl_k_yield+0x12c>)
   26ca2:	f004 f889 	bl	2adb8 <assert_print>
   26ca6:	21e1      	movs	r1, #225	; 0xe1
   26ca8:	e7b3      	b.n	26c12 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   26caa:	428a      	cmp	r2, r1
   26cac:	d0d8      	beq.n	26c60 <z_impl_k_yield+0xa0>
   26cae:	6812      	ldr	r2, [r2, #0]
   26cb0:	e7d5      	b.n	26c5e <z_impl_k_yield+0x9e>
   26cb2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   26cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26cb8:	f7ea bbf8 	b.w	114ac <arch_swap>
   26cbc:	0003b6d8 	.word	0x0003b6d8
   26cc0:	0003b945 	.word	0x0003b945
   26cc4:	00033bc2 	.word	0x00033bc2
   26cc8:	00034662 	.word	0x00034662
   26ccc:	2000eb90 	.word	0x2000eb90
   26cd0:	000340d9 	.word	0x000340d9
   26cd4:	00034132 	.word	0x00034132
   26cd8:	00034147 	.word	0x00034147
   26cdc:	2000eb4c 	.word	0x2000eb4c
   26ce0:	2000ddc0 	.word	0x2000ddc0
   26ce4:	0003bb27 	.word	0x0003bb27
   26ce8:	00034106 	.word	0x00034106
   26cec:	0003411d 	.word	0x0003411d

00026cf0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   26cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26cf4:	4605      	mov	r5, r0
   26cf6:	460e      	mov	r6, r1
   26cf8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   26cfc:	b16b      	cbz	r3, 26d1a <z_tick_sleep+0x2a>
   26cfe:	493f      	ldr	r1, [pc, #252]	; (26dfc <z_tick_sleep+0x10c>)
   26d00:	f240 538d 	movw	r3, #1421	; 0x58d
   26d04:	4a3e      	ldr	r2, [pc, #248]	; (26e00 <z_tick_sleep+0x110>)
   26d06:	483f      	ldr	r0, [pc, #252]	; (26e04 <z_tick_sleep+0x114>)
   26d08:	f004 f856 	bl	2adb8 <assert_print>
   26d0c:	483e      	ldr	r0, [pc, #248]	; (26e08 <z_tick_sleep+0x118>)
   26d0e:	f004 f853 	bl	2adb8 <assert_print>
   26d12:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   26d16:	483a      	ldr	r0, [pc, #232]	; (26e00 <z_tick_sleep+0x110>)
   26d18:	e025      	b.n	26d66 <z_tick_sleep+0x76>
	if (ticks == 0) {
   26d1a:	ea50 0301 	orrs.w	r3, r0, r1
   26d1e:	d103      	bne.n	26d28 <z_tick_sleep+0x38>
	z_impl_k_yield();
   26d20:	f7ff ff4e 	bl	26bc0 <z_impl_k_yield>
		return 0;
   26d24:	2000      	movs	r0, #0
   26d26:	e066      	b.n	26df6 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   26d28:	1c82      	adds	r2, r0, #2
   26d2a:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26d2e:	db1c      	blt.n	26d6a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   26d30:	f009 fc54 	bl	305dc <sys_clock_tick_get_32>
   26d34:	182c      	adds	r4, r5, r0
   26d36:	f04f 0320 	mov.w	r3, #32
   26d3a:	f3ef 8811 	mrs	r8, BASEPRI
   26d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   26d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d46:	4831      	ldr	r0, [pc, #196]	; (26e0c <z_tick_sleep+0x11c>)
   26d48:	f7fd ff6a 	bl	24c20 <z_spin_lock_valid>
   26d4c:	b988      	cbnz	r0, 26d72 <z_tick_sleep+0x82>
   26d4e:	2394      	movs	r3, #148	; 0x94
   26d50:	4a2f      	ldr	r2, [pc, #188]	; (26e10 <z_tick_sleep+0x120>)
   26d52:	4930      	ldr	r1, [pc, #192]	; (26e14 <z_tick_sleep+0x124>)
   26d54:	482b      	ldr	r0, [pc, #172]	; (26e04 <z_tick_sleep+0x114>)
   26d56:	f004 f82f 	bl	2adb8 <assert_print>
   26d5a:	492c      	ldr	r1, [pc, #176]	; (26e0c <z_tick_sleep+0x11c>)
   26d5c:	482e      	ldr	r0, [pc, #184]	; (26e18 <z_tick_sleep+0x128>)
   26d5e:	f004 f82b 	bl	2adb8 <assert_print>
   26d62:	2194      	movs	r1, #148	; 0x94
   26d64:	482a      	ldr	r0, [pc, #168]	; (26e10 <z_tick_sleep+0x120>)
   26d66:	f004 f820 	bl	2adaa <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26d6a:	f06f 0401 	mvn.w	r4, #1
   26d6e:	1a24      	subs	r4, r4, r0
   26d70:	e7e1      	b.n	26d36 <z_tick_sleep+0x46>
	pending_current = _current;
   26d72:	4f2a      	ldr	r7, [pc, #168]	; (26e1c <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   26d74:	4825      	ldr	r0, [pc, #148]	; (26e0c <z_tick_sleep+0x11c>)
   26d76:	f7fd ff6f 	bl	24c58 <z_spin_lock_set_owner>
   26d7a:	68b8      	ldr	r0, [r7, #8]
   26d7c:	4b28      	ldr	r3, [pc, #160]	; (26e20 <z_tick_sleep+0x130>)
   26d7e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   26d80:	f7ff fbd4 	bl	2652c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26d84:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26d86:	462a      	mov	r2, r5
   26d88:	4633      	mov	r3, r6
   26d8a:	3018      	adds	r0, #24
   26d8c:	4925      	ldr	r1, [pc, #148]	; (26e24 <z_tick_sleep+0x134>)
   26d8e:	f000 fa23 	bl	271d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   26d92:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d94:	481d      	ldr	r0, [pc, #116]	; (26e0c <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26d96:	7b53      	ldrb	r3, [r2, #13]
   26d98:	f043 0310 	orr.w	r3, r3, #16
   26d9c:	7353      	strb	r3, [r2, #13]
   26d9e:	f7fd ff4d 	bl	24c3c <z_spin_unlock_valid>
   26da2:	b958      	cbnz	r0, 26dbc <z_tick_sleep+0xcc>
   26da4:	23e1      	movs	r3, #225	; 0xe1
   26da6:	4a1a      	ldr	r2, [pc, #104]	; (26e10 <z_tick_sleep+0x120>)
   26da8:	491f      	ldr	r1, [pc, #124]	; (26e28 <z_tick_sleep+0x138>)
   26daa:	4816      	ldr	r0, [pc, #88]	; (26e04 <z_tick_sleep+0x114>)
   26dac:	f004 f804 	bl	2adb8 <assert_print>
   26db0:	4916      	ldr	r1, [pc, #88]	; (26e0c <z_tick_sleep+0x11c>)
   26db2:	481e      	ldr	r0, [pc, #120]	; (26e2c <z_tick_sleep+0x13c>)
   26db4:	f004 f800 	bl	2adb8 <assert_print>
   26db8:	21e1      	movs	r1, #225	; 0xe1
   26dba:	e7d3      	b.n	26d64 <z_tick_sleep+0x74>
   26dbc:	4640      	mov	r0, r8
   26dbe:	f7ea fb75 	bl	114ac <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   26dc2:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   26dc4:	7b5b      	ldrb	r3, [r3, #13]
   26dc6:	06db      	lsls	r3, r3, #27
   26dc8:	d50c      	bpl.n	26de4 <z_tick_sleep+0xf4>
   26dca:	4919      	ldr	r1, [pc, #100]	; (26e30 <z_tick_sleep+0x140>)
   26dcc:	f240 53a9 	movw	r3, #1449	; 0x5a9
   26dd0:	4a0b      	ldr	r2, [pc, #44]	; (26e00 <z_tick_sleep+0x110>)
   26dd2:	480c      	ldr	r0, [pc, #48]	; (26e04 <z_tick_sleep+0x114>)
   26dd4:	f003 fff0 	bl	2adb8 <assert_print>
   26dd8:	480b      	ldr	r0, [pc, #44]	; (26e08 <z_tick_sleep+0x118>)
   26dda:	f003 ffed 	bl	2adb8 <assert_print>
   26dde:	f240 51a9 	movw	r1, #1449	; 0x5a9
   26de2:	e798      	b.n	26d16 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26de4:	f009 fbfa 	bl	305dc <sys_clock_tick_get_32>
   26de8:	1a20      	subs	r0, r4, r0
   26dea:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   26dee:	2801      	cmp	r0, #1
   26df0:	f173 0300 	sbcs.w	r3, r3, #0
   26df4:	db96      	blt.n	26d24 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   26df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26dfa:	bf00      	nop
   26dfc:	0003b6d8 	.word	0x0003b6d8
   26e00:	0003b945 	.word	0x0003b945
   26e04:	00033bc2 	.word	0x00033bc2
   26e08:	00034662 	.word	0x00034662
   26e0c:	2000eb90 	.word	0x2000eb90
   26e10:	000340d9 	.word	0x000340d9
   26e14:	00034132 	.word	0x00034132
   26e18:	00034147 	.word	0x00034147
   26e1c:	2000eb4c 	.word	0x2000eb4c
   26e20:	2000eb84 	.word	0x2000eb84
   26e24:	000305b5 	.word	0x000305b5
   26e28:	00034106 	.word	0x00034106
   26e2c:	0003411d 	.word	0x0003411d
   26e30:	0003bc23 	.word	0x0003bc23

00026e34 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   26e34:	b508      	push	{r3, lr}
   26e36:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   26e3a:	b173      	cbz	r3, 26e5a <z_impl_k_sleep+0x26>
   26e3c:	4912      	ldr	r1, [pc, #72]	; (26e88 <z_impl_k_sleep+0x54>)
   26e3e:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   26e42:	4a12      	ldr	r2, [pc, #72]	; (26e8c <z_impl_k_sleep+0x58>)
   26e44:	4812      	ldr	r0, [pc, #72]	; (26e90 <z_impl_k_sleep+0x5c>)
   26e46:	f003 ffb7 	bl	2adb8 <assert_print>
   26e4a:	4812      	ldr	r0, [pc, #72]	; (26e94 <z_impl_k_sleep+0x60>)
   26e4c:	f003 ffb4 	bl	2adb8 <assert_print>
   26e50:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   26e54:	480d      	ldr	r0, [pc, #52]	; (26e8c <z_impl_k_sleep+0x58>)
   26e56:	f003 ffa8 	bl	2adaa <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26e5a:	f1b1 3fff 	cmp.w	r1, #4294967295
   26e5e:	bf08      	it	eq
   26e60:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   26e64:	d106      	bne.n	26e74 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   26e66:	4b0c      	ldr	r3, [pc, #48]	; (26e98 <z_impl_k_sleep+0x64>)
   26e68:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26e6a:	f7ff fcd9 	bl	26820 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26e6e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26e72:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26e74:	f7ff ff3c 	bl	26cf0 <z_tick_sleep>
   26e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26e7c:	fb80 0303 	smull	r0, r3, r0, r3
   26e80:	0bc0      	lsrs	r0, r0, #15
   26e82:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   26e86:	e7f4      	b.n	26e72 <z_impl_k_sleep+0x3e>
   26e88:	0003b6d8 	.word	0x0003b6d8
   26e8c:	0003b945 	.word	0x0003b945
   26e90:	00033bc2 	.word	0x00033bc2
   26e94:	00034662 	.word	0x00034662
   26e98:	2000eb4c 	.word	0x2000eb4c

00026e9c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26e9c:	4b01      	ldr	r3, [pc, #4]	; (26ea4 <z_impl_z_current_get+0x8>)
   26e9e:	6898      	ldr	r0, [r3, #8]
   26ea0:	4770      	bx	lr
   26ea2:	bf00      	nop
   26ea4:	2000eb4c 	.word	0x2000eb4c

00026ea8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   26ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26eac:	4604      	mov	r4, r0
   26eae:	f04f 0320 	mov.w	r3, #32
   26eb2:	f3ef 8611 	mrs	r6, BASEPRI
   26eb6:	f383 8812 	msr	BASEPRI_MAX, r3
   26eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ebe:	4851      	ldr	r0, [pc, #324]	; (27004 <z_thread_abort+0x15c>)
   26ec0:	f7fd feae 	bl	24c20 <z_spin_lock_valid>
   26ec4:	b968      	cbnz	r0, 26ee2 <z_thread_abort+0x3a>
   26ec6:	2394      	movs	r3, #148	; 0x94
   26ec8:	4a4f      	ldr	r2, [pc, #316]	; (27008 <z_thread_abort+0x160>)
   26eca:	4950      	ldr	r1, [pc, #320]	; (2700c <z_thread_abort+0x164>)
   26ecc:	4850      	ldr	r0, [pc, #320]	; (27010 <z_thread_abort+0x168>)
   26ece:	f003 ff73 	bl	2adb8 <assert_print>
   26ed2:	494c      	ldr	r1, [pc, #304]	; (27004 <z_thread_abort+0x15c>)
   26ed4:	484f      	ldr	r0, [pc, #316]	; (27014 <z_thread_abort+0x16c>)
   26ed6:	f003 ff6f 	bl	2adb8 <assert_print>
   26eda:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26edc:	484a      	ldr	r0, [pc, #296]	; (27008 <z_thread_abort+0x160>)
   26ede:	f003 ff64 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   26ee2:	4848      	ldr	r0, [pc, #288]	; (27004 <z_thread_abort+0x15c>)
   26ee4:	f7fd feb8 	bl	24c58 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   26ee8:	7b23      	ldrb	r3, [r4, #12]
   26eea:	07d9      	lsls	r1, r3, #31
   26eec:	d522      	bpl.n	26f34 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eee:	4845      	ldr	r0, [pc, #276]	; (27004 <z_thread_abort+0x15c>)
   26ef0:	f7fd fea4 	bl	24c3c <z_spin_unlock_valid>
   26ef4:	b958      	cbnz	r0, 26f0e <z_thread_abort+0x66>
   26ef6:	23c2      	movs	r3, #194	; 0xc2
   26ef8:	4a43      	ldr	r2, [pc, #268]	; (27008 <z_thread_abort+0x160>)
   26efa:	4947      	ldr	r1, [pc, #284]	; (27018 <z_thread_abort+0x170>)
   26efc:	4844      	ldr	r0, [pc, #272]	; (27010 <z_thread_abort+0x168>)
   26efe:	f003 ff5b 	bl	2adb8 <assert_print>
   26f02:	4940      	ldr	r1, [pc, #256]	; (27004 <z_thread_abort+0x15c>)
   26f04:	4845      	ldr	r0, [pc, #276]	; (2701c <z_thread_abort+0x174>)
   26f06:	f003 ff57 	bl	2adb8 <assert_print>
   26f0a:	21c2      	movs	r1, #194	; 0xc2
   26f0c:	e7e6      	b.n	26edc <z_thread_abort+0x34>
	__asm__ volatile(
   26f0e:	f386 8811 	msr	BASEPRI, r6
   26f12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   26f16:	f240 63ca 	movw	r3, #1738	; 0x6ca
   26f1a:	4a41      	ldr	r2, [pc, #260]	; (27020 <z_thread_abort+0x178>)
   26f1c:	4941      	ldr	r1, [pc, #260]	; (27024 <z_thread_abort+0x17c>)
   26f1e:	483c      	ldr	r0, [pc, #240]	; (27010 <z_thread_abort+0x168>)
   26f20:	f003 ff4a 	bl	2adb8 <assert_print>
   26f24:	4621      	mov	r1, r4
   26f26:	4840      	ldr	r0, [pc, #256]	; (27028 <z_thread_abort+0x180>)
   26f28:	f003 ff46 	bl	2adb8 <assert_print>
   26f2c:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   26f30:	483b      	ldr	r0, [pc, #236]	; (27020 <z_thread_abort+0x178>)
   26f32:	e7d4      	b.n	26ede <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26f34:	7b63      	ldrb	r3, [r4, #13]
   26f36:	071a      	lsls	r2, r3, #28
   26f38:	d50a      	bpl.n	26f50 <z_thread_abort+0xa8>
   26f3a:	4832      	ldr	r0, [pc, #200]	; (27004 <z_thread_abort+0x15c>)
   26f3c:	f7fd fe7e 	bl	24c3c <z_spin_unlock_valid>
   26f40:	2800      	cmp	r0, #0
   26f42:	d0d8      	beq.n	26ef6 <z_thread_abort+0x4e>
   26f44:	f386 8811 	msr	BASEPRI, r6
   26f48:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   26f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26f50:	f023 0220 	bic.w	r2, r3, #32
   26f54:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   26f58:	09d2      	lsrs	r2, r2, #7
   26f5a:	d12c      	bne.n	26fb6 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26f5c:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   26f5e:	68a3      	ldr	r3, [r4, #8]
   26f60:	b113      	cbz	r3, 26f68 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   26f62:	4620      	mov	r0, r4
   26f64:	f7ff fcc4 	bl	268f0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   26f68:	f104 0018 	add.w	r0, r4, #24
   26f6c:	f000 f9f4 	bl	27358 <z_abort_timeout>
   26f70:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   26f74:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   26f78:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f7a:	42bd      	cmp	r5, r7
   26f7c:	d000      	beq.n	26f80 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26f7e:	bb25      	cbnz	r5, 26fca <z_thread_abort+0x122>
		update_cache(1);
   26f80:	2001      	movs	r0, #1
   26f82:	f7fe ff7d 	bl	25e80 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   26f86:	4b29      	ldr	r3, [pc, #164]	; (2702c <z_thread_abort+0x184>)
   26f88:	689b      	ldr	r3, [r3, #8]
   26f8a:	42a3      	cmp	r3, r4
   26f8c:	d1d5      	bne.n	26f3a <z_thread_abort+0x92>
   26f8e:	f3ef 8305 	mrs	r3, IPSR
   26f92:	2b00      	cmp	r3, #0
   26f94:	d1d1      	bne.n	26f3a <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f96:	481b      	ldr	r0, [pc, #108]	; (27004 <z_thread_abort+0x15c>)
   26f98:	f7fd fe50 	bl	24c3c <z_spin_unlock_valid>
   26f9c:	bb10      	cbnz	r0, 26fe4 <z_thread_abort+0x13c>
   26f9e:	23e1      	movs	r3, #225	; 0xe1
   26fa0:	4a19      	ldr	r2, [pc, #100]	; (27008 <z_thread_abort+0x160>)
   26fa2:	491d      	ldr	r1, [pc, #116]	; (27018 <z_thread_abort+0x170>)
   26fa4:	481a      	ldr	r0, [pc, #104]	; (27010 <z_thread_abort+0x168>)
   26fa6:	f003 ff07 	bl	2adb8 <assert_print>
   26faa:	4916      	ldr	r1, [pc, #88]	; (27004 <z_thread_abort+0x15c>)
   26fac:	481b      	ldr	r0, [pc, #108]	; (2701c <z_thread_abort+0x174>)
   26fae:	f003 ff03 	bl	2adb8 <assert_print>
   26fb2:	21e1      	movs	r1, #225	; 0xe1
   26fb4:	e792      	b.n	26edc <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26fb6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26fba:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   26fbe:	4621      	mov	r1, r4
   26fc0:	481b      	ldr	r0, [pc, #108]	; (27030 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26fc2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26fc4:	f7ff f9dc 	bl	26380 <z_priq_dumb_remove>
}
   26fc8:	e7c9      	b.n	26f5e <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   26fca:	4628      	mov	r0, r5
   26fcc:	f7ff fc90 	bl	268f0 <unpend_thread_no_timeout>
   26fd0:	f105 0018 	add.w	r0, r5, #24
   26fd4:	f000 f9c0 	bl	27358 <z_abort_timeout>
		ready_thread(thread);
   26fd8:	4628      	mov	r0, r5
   26fda:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   26fde:	f7fe ff83 	bl	25ee8 <ready_thread>
   26fe2:	e7c9      	b.n	26f78 <z_thread_abort+0xd0>
   26fe4:	4630      	mov	r0, r6
   26fe6:	f7ea fa61 	bl	114ac <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   26fea:	490e      	ldr	r1, [pc, #56]	; (27024 <z_thread_abort+0x17c>)
   26fec:	f240 63f9 	movw	r3, #1785	; 0x6f9
   26ff0:	4a0b      	ldr	r2, [pc, #44]	; (27020 <z_thread_abort+0x178>)
   26ff2:	4807      	ldr	r0, [pc, #28]	; (27010 <z_thread_abort+0x168>)
   26ff4:	f003 fee0 	bl	2adb8 <assert_print>
   26ff8:	480e      	ldr	r0, [pc, #56]	; (27034 <z_thread_abort+0x18c>)
   26ffa:	f003 fedd 	bl	2adb8 <assert_print>
   26ffe:	f240 61f9 	movw	r1, #1785	; 0x6f9
   27002:	e795      	b.n	26f30 <z_thread_abort+0x88>
   27004:	2000eb90 	.word	0x2000eb90
   27008:	000340d9 	.word	0x000340d9
   2700c:	00034132 	.word	0x00034132
   27010:	00033bc2 	.word	0x00033bc2
   27014:	00034147 	.word	0x00034147
   27018:	00034106 	.word	0x00034106
   2701c:	0003411d 	.word	0x0003411d
   27020:	0003b945 	.word	0x0003b945
   27024:	000386dc 	.word	0x000386dc
   27028:	0003bc63 	.word	0x0003bc63
   2702c:	2000eb4c 	.word	0x2000eb4c
   27030:	2000eb68 	.word	0x2000eb68
   27034:	0003bc82 	.word	0x0003bc82

00027038 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2703c:	4606      	mov	r6, r0
   2703e:	4688      	mov	r8, r1
   27040:	4617      	mov	r7, r2
	__asm__ volatile(
   27042:	f04f 0320 	mov.w	r3, #32
   27046:	f3ef 8911 	mrs	r9, BASEPRI
   2704a:	f383 8812 	msr	BASEPRI_MAX, r3
   2704e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27052:	4821      	ldr	r0, [pc, #132]	; (270d8 <z_sched_wake+0xa0>)
   27054:	f7fd fde4 	bl	24c20 <z_spin_lock_valid>
   27058:	4605      	mov	r5, r0
   2705a:	b968      	cbnz	r0, 27078 <z_sched_wake+0x40>
   2705c:	2394      	movs	r3, #148	; 0x94
   2705e:	4a1f      	ldr	r2, [pc, #124]	; (270dc <z_sched_wake+0xa4>)
   27060:	491f      	ldr	r1, [pc, #124]	; (270e0 <z_sched_wake+0xa8>)
   27062:	4820      	ldr	r0, [pc, #128]	; (270e4 <z_sched_wake+0xac>)
   27064:	f003 fea8 	bl	2adb8 <assert_print>
   27068:	491b      	ldr	r1, [pc, #108]	; (270d8 <z_sched_wake+0xa0>)
   2706a:	481f      	ldr	r0, [pc, #124]	; (270e8 <z_sched_wake+0xb0>)
   2706c:	f003 fea4 	bl	2adb8 <assert_print>
   27070:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27072:	481a      	ldr	r0, [pc, #104]	; (270dc <z_sched_wake+0xa4>)
   27074:	f003 fe99 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   27078:	4817      	ldr	r0, [pc, #92]	; (270d8 <z_sched_wake+0xa0>)
   2707a:	f7fd fded 	bl	24c58 <z_spin_lock_set_owner>
	return list->head == list;
   2707e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27080:	42a6      	cmp	r6, r4
   27082:	d01d      	beq.n	270c0 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   27084:	b1f4      	cbz	r4, 270c4 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27086:	4620      	mov	r0, r4
   27088:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2708c:	6167      	str	r7, [r4, #20]
   2708e:	f7ff fc2f 	bl	268f0 <unpend_thread_no_timeout>
   27092:	f104 0018 	add.w	r0, r4, #24
   27096:	f000 f95f 	bl	27358 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2709a:	4620      	mov	r0, r4
   2709c:	f7fe ff24 	bl	25ee8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270a0:	480d      	ldr	r0, [pc, #52]	; (270d8 <z_sched_wake+0xa0>)
   270a2:	f7fd fdcb 	bl	24c3c <z_spin_unlock_valid>
   270a6:	b978      	cbnz	r0, 270c8 <z_sched_wake+0x90>
   270a8:	23c2      	movs	r3, #194	; 0xc2
   270aa:	4a0c      	ldr	r2, [pc, #48]	; (270dc <z_sched_wake+0xa4>)
   270ac:	490f      	ldr	r1, [pc, #60]	; (270ec <z_sched_wake+0xb4>)
   270ae:	480d      	ldr	r0, [pc, #52]	; (270e4 <z_sched_wake+0xac>)
   270b0:	f003 fe82 	bl	2adb8 <assert_print>
   270b4:	4908      	ldr	r1, [pc, #32]	; (270d8 <z_sched_wake+0xa0>)
   270b6:	480e      	ldr	r0, [pc, #56]	; (270f0 <z_sched_wake+0xb8>)
   270b8:	f003 fe7e 	bl	2adb8 <assert_print>
   270bc:	21c2      	movs	r1, #194	; 0xc2
   270be:	e7d8      	b.n	27072 <z_sched_wake+0x3a>
	bool ret = false;
   270c0:	2500      	movs	r5, #0
   270c2:	e7ed      	b.n	270a0 <z_sched_wake+0x68>
   270c4:	4625      	mov	r5, r4
   270c6:	e7eb      	b.n	270a0 <z_sched_wake+0x68>
	__asm__ volatile(
   270c8:	f389 8811 	msr	BASEPRI, r9
   270cc:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   270d0:	4628      	mov	r0, r5
   270d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   270d6:	bf00      	nop
   270d8:	2000eb90 	.word	0x2000eb90
   270dc:	000340d9 	.word	0x000340d9
   270e0:	00034132 	.word	0x00034132
   270e4:	00033bc2 	.word	0x00033bc2
   270e8:	00034147 	.word	0x00034147
   270ec:	00034106 	.word	0x00034106
   270f0:	0003411d 	.word	0x0003411d

000270f4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   270f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   270f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   270fa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   270fc:	e9cd 6700 	strd	r6, r7, [sp]
   27100:	f7ff fa86 	bl	26610 <z_pend_curr>

	if (data != NULL) {
   27104:	b11c      	cbz	r4, 2710e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   27106:	4b03      	ldr	r3, [pc, #12]	; (27114 <z_sched_wait+0x20>)
   27108:	689b      	ldr	r3, [r3, #8]
   2710a:	695b      	ldr	r3, [r3, #20]
   2710c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2710e:	b002      	add	sp, #8
   27110:	bdd0      	pop	{r4, r6, r7, pc}
   27112:	bf00      	nop
   27114:	2000eb4c 	.word	0x2000eb4c

00027118 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   27118:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2711a:	4806      	ldr	r0, [pc, #24]	; (27134 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2711c:	4a06      	ldr	r2, [pc, #24]	; (27138 <z_data_copy+0x20>)
   2711e:	4907      	ldr	r1, [pc, #28]	; (2713c <z_data_copy+0x24>)
   27120:	1a12      	subs	r2, r2, r0
   27122:	f009 f932 	bl	3038a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   27126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2712a:	4a05      	ldr	r2, [pc, #20]	; (27140 <z_data_copy+0x28>)
   2712c:	4905      	ldr	r1, [pc, #20]	; (27144 <z_data_copy+0x2c>)
   2712e:	4806      	ldr	r0, [pc, #24]	; (27148 <z_data_copy+0x30>)
   27130:	f009 b92b 	b.w	3038a <z_early_memcpy>
   27134:	2000c580 	.word	0x2000c580
   27138:	2000d12c 	.word	0x2000d12c
   2713c:	0003c368 	.word	0x0003c368
   27140:	00000000 	.word	0x00000000
   27144:	0003c350 	.word	0x0003c350
   27148:	2000c580 	.word	0x2000c580

0002714c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2714c:	4b03      	ldr	r3, [pc, #12]	; (2715c <elapsed+0x10>)
   2714e:	681b      	ldr	r3, [r3, #0]
   27150:	b90b      	cbnz	r3, 27156 <elapsed+0xa>
   27152:	f7f5 bdbd 	b.w	1ccd0 <sys_clock_elapsed>
}
   27156:	2000      	movs	r0, #0
   27158:	4770      	bx	lr
   2715a:	bf00      	nop
   2715c:	2000eb94 	.word	0x2000eb94

00027160 <next_timeout>:

static int32_t next_timeout(void)
{
   27160:	b510      	push	{r4, lr}
	return list->head == list;
   27162:	4b0e      	ldr	r3, [pc, #56]	; (2719c <next_timeout+0x3c>)
   27164:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27166:	429c      	cmp	r4, r3
   27168:	d104      	bne.n	27174 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2716a:	f7ff ffef 	bl	2714c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2716e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   27172:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   27174:	f7ff ffea 	bl	2714c <elapsed>
	if ((to == NULL) ||
   27178:	2c00      	cmp	r4, #0
   2717a:	d0f8      	beq.n	2716e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2717c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   27180:	1a1b      	subs	r3, r3, r0
   27182:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   27186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2718a:	f172 0100 	sbcs.w	r1, r2, #0
   2718e:	daee      	bge.n	2716e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   27190:	2a00      	cmp	r2, #0
   27192:	bfac      	ite	ge
   27194:	4618      	movge	r0, r3
   27196:	2000      	movlt	r0, #0
	return ret;
   27198:	e7eb      	b.n	27172 <next_timeout+0x12>
   2719a:	bf00      	nop
   2719c:	2000ca4c 	.word	0x2000ca4c

000271a0 <remove_timeout>:
{
   271a0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   271a2:	b170      	cbz	r0, 271c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   271a4:	4b0b      	ldr	r3, [pc, #44]	; (271d4 <remove_timeout+0x34>)
   271a6:	685b      	ldr	r3, [r3, #4]
   271a8:	4298      	cmp	r0, r3
   271aa:	d00a      	beq.n	271c2 <remove_timeout+0x22>
   271ac:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   271ae:	b143      	cbz	r3, 271c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   271b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   271b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   271b8:	1912      	adds	r2, r2, r4
   271ba:	eb41 0105 	adc.w	r1, r1, r5
   271be:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   271c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   271c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   271c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   271ca:	2300      	movs	r3, #0
	node->prev = NULL;
   271cc:	e9c0 3300 	strd	r3, r3, [r0]
}
   271d0:	bd30      	pop	{r4, r5, pc}
   271d2:	bf00      	nop
   271d4:	2000ca4c 	.word	0x2000ca4c

000271d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   271d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   271dc:	bf08      	it	eq
   271de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   271e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   271e6:	4604      	mov	r4, r0
   271e8:	4692      	mov	sl, r2
   271ea:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   271ec:	f000 8099 	beq.w	27322 <z_add_timeout+0x14a>
	return node->next != NULL;
   271f0:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   271f2:	b166      	cbz	r6, 2720e <z_add_timeout+0x36>
   271f4:	494c      	ldr	r1, [pc, #304]	; (27328 <z_add_timeout+0x150>)
   271f6:	235e      	movs	r3, #94	; 0x5e
   271f8:	4a4c      	ldr	r2, [pc, #304]	; (2732c <z_add_timeout+0x154>)
   271fa:	484d      	ldr	r0, [pc, #308]	; (27330 <z_add_timeout+0x158>)
   271fc:	f003 fddc 	bl	2adb8 <assert_print>
   27200:	484c      	ldr	r0, [pc, #304]	; (27334 <z_add_timeout+0x15c>)
   27202:	f003 fdd9 	bl	2adb8 <assert_print>
   27206:	215e      	movs	r1, #94	; 0x5e
   27208:	4848      	ldr	r0, [pc, #288]	; (2732c <z_add_timeout+0x154>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2720a:	f003 fdce 	bl	2adaa <assert_post_action>
	to->fn = fn;
   2720e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   27210:	f04f 0320 	mov.w	r3, #32
   27214:	f3ef 8711 	mrs	r7, BASEPRI
   27218:	f383 8812 	msr	BASEPRI_MAX, r3
   2721c:	f3bf 8f6f 	isb	sy
   27220:	4845      	ldr	r0, [pc, #276]	; (27338 <z_add_timeout+0x160>)
   27222:	f7fd fcfd 	bl	24c20 <z_spin_lock_valid>
   27226:	b960      	cbnz	r0, 27242 <z_add_timeout+0x6a>
   27228:	2394      	movs	r3, #148	; 0x94
   2722a:	4a44      	ldr	r2, [pc, #272]	; (2733c <z_add_timeout+0x164>)
   2722c:	4944      	ldr	r1, [pc, #272]	; (27340 <z_add_timeout+0x168>)
   2722e:	4840      	ldr	r0, [pc, #256]	; (27330 <z_add_timeout+0x158>)
   27230:	f003 fdc2 	bl	2adb8 <assert_print>
   27234:	4940      	ldr	r1, [pc, #256]	; (27338 <z_add_timeout+0x160>)
   27236:	4843      	ldr	r0, [pc, #268]	; (27344 <z_add_timeout+0x16c>)
   27238:	f003 fdbe 	bl	2adb8 <assert_print>
   2723c:	2194      	movs	r1, #148	; 0x94
   2723e:	483f      	ldr	r0, [pc, #252]	; (2733c <z_add_timeout+0x164>)
   27240:	e7e3      	b.n	2720a <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   27242:	483d      	ldr	r0, [pc, #244]	; (27338 <z_add_timeout+0x160>)
   27244:	f7fd fd08 	bl	24c58 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   27248:	f1ba 3fff 	cmp.w	sl, #4294967295
   2724c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   27250:	da23      	bge.n	2729a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   27252:	f06f 0301 	mvn.w	r3, #1
   27256:	493c      	ldr	r1, [pc, #240]	; (27348 <z_add_timeout+0x170>)
   27258:	e9d1 2000 	ldrd	r2, r0, [r1]
   2725c:	1a9b      	subs	r3, r3, r2
   2725e:	f04f 32ff 	mov.w	r2, #4294967295
   27262:	eb62 0000 	sbc.w	r0, r2, r0
   27266:	ebb3 030a 	subs.w	r3, r3, sl
   2726a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2726e:	2b01      	cmp	r3, #1
   27270:	f170 0200 	sbcs.w	r2, r0, #0
   27274:	da01      	bge.n	2727a <z_add_timeout+0xa2>
   27276:	2301      	movs	r3, #1
   27278:	4630      	mov	r0, r6
   2727a:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2727e:	4b33      	ldr	r3, [pc, #204]	; (2734c <z_add_timeout+0x174>)
   27280:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   27282:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27286:	429a      	cmp	r2, r3
   27288:	bf18      	it	ne
   2728a:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2728c:	b986      	cbnz	r6, 272b0 <z_add_timeout+0xd8>
	node->prev = tail;
   2728e:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   27292:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   27296:	605c      	str	r4, [r3, #4]
}
   27298:	e01c      	b.n	272d4 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   2729a:	f7ff ff57 	bl	2714c <elapsed>
   2729e:	f11a 0801 	adds.w	r8, sl, #1
   272a2:	f145 0500 	adc.w	r5, r5, #0
   272a6:	eb18 0300 	adds.w	r3, r8, r0
   272aa:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   272ae:	e7e4      	b.n	2727a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   272b0:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   272b4:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   272b8:	428a      	cmp	r2, r1
   272ba:	eb70 0e05 	sbcs.w	lr, r0, r5
   272be:	da23      	bge.n	27308 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   272c0:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   272c2:	6872      	ldr	r2, [r6, #4]
   272c4:	eb65 0500 	sbc.w	r5, r5, r0
   272c8:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   272cc:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   272d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   272d2:	6074      	str	r4, [r6, #4]
	return list->head == list;
   272d4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272d6:	429a      	cmp	r2, r3
   272d8:	d006      	beq.n	272e8 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   272da:	4294      	cmp	r4, r2
   272dc:	d104      	bne.n	272e8 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   272de:	f7ff ff3f 	bl	27160 <next_timeout>
   272e2:	2100      	movs	r1, #0
   272e4:	f7f5 fcc8 	bl	1cc78 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272e8:	4813      	ldr	r0, [pc, #76]	; (27338 <z_add_timeout+0x160>)
   272ea:	f7fd fca7 	bl	24c3c <z_spin_unlock_valid>
   272ee:	b9a0      	cbnz	r0, 2731a <z_add_timeout+0x142>
   272f0:	23c2      	movs	r3, #194	; 0xc2
   272f2:	4a12      	ldr	r2, [pc, #72]	; (2733c <z_add_timeout+0x164>)
   272f4:	4916      	ldr	r1, [pc, #88]	; (27350 <z_add_timeout+0x178>)
   272f6:	480e      	ldr	r0, [pc, #56]	; (27330 <z_add_timeout+0x158>)
   272f8:	f003 fd5e 	bl	2adb8 <assert_print>
   272fc:	490e      	ldr	r1, [pc, #56]	; (27338 <z_add_timeout+0x160>)
   272fe:	4815      	ldr	r0, [pc, #84]	; (27354 <z_add_timeout+0x17c>)
   27300:	f003 fd5a 	bl	2adb8 <assert_print>
   27304:	21c2      	movs	r1, #194	; 0xc2
   27306:	e79a      	b.n	2723e <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   27308:	1a52      	subs	r2, r2, r1
   2730a:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2730e:	4566      	cmp	r6, ip
   27310:	e9c4 2004 	strd	r2, r0, [r4, #16]
   27314:	d0bb      	beq.n	2728e <z_add_timeout+0xb6>
   27316:	6836      	ldr	r6, [r6, #0]
   27318:	e7b8      	b.n	2728c <z_add_timeout+0xb4>
	__asm__ volatile(
   2731a:	f387 8811 	msr	BASEPRI, r7
   2731e:	f3bf 8f6f 	isb	sy
		}
	}
}
   27322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27326:	bf00      	nop
   27328:	0003bcc8 	.word	0x0003bcc8
   2732c:	0003bca4 	.word	0x0003bca4
   27330:	00033bc2 	.word	0x00033bc2
   27334:	00034662 	.word	0x00034662
   27338:	2000eb98 	.word	0x2000eb98
   2733c:	000340d9 	.word	0x000340d9
   27340:	00034132 	.word	0x00034132
   27344:	00034147 	.word	0x00034147
   27348:	2000df90 	.word	0x2000df90
   2734c:	2000ca4c 	.word	0x2000ca4c
   27350:	00034106 	.word	0x00034106
   27354:	0003411d 	.word	0x0003411d

00027358 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   27358:	b538      	push	{r3, r4, r5, lr}
   2735a:	4604      	mov	r4, r0
	__asm__ volatile(
   2735c:	f04f 0320 	mov.w	r3, #32
   27360:	f3ef 8511 	mrs	r5, BASEPRI
   27364:	f383 8812 	msr	BASEPRI_MAX, r3
   27368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2736c:	4819      	ldr	r0, [pc, #100]	; (273d4 <z_abort_timeout+0x7c>)
   2736e:	f7fd fc57 	bl	24c20 <z_spin_lock_valid>
   27372:	b968      	cbnz	r0, 27390 <z_abort_timeout+0x38>
   27374:	2394      	movs	r3, #148	; 0x94
   27376:	4a18      	ldr	r2, [pc, #96]	; (273d8 <z_abort_timeout+0x80>)
   27378:	4918      	ldr	r1, [pc, #96]	; (273dc <z_abort_timeout+0x84>)
   2737a:	4819      	ldr	r0, [pc, #100]	; (273e0 <z_abort_timeout+0x88>)
   2737c:	f003 fd1c 	bl	2adb8 <assert_print>
   27380:	4914      	ldr	r1, [pc, #80]	; (273d4 <z_abort_timeout+0x7c>)
   27382:	4818      	ldr	r0, [pc, #96]	; (273e4 <z_abort_timeout+0x8c>)
   27384:	f003 fd18 	bl	2adb8 <assert_print>
   27388:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2738a:	4813      	ldr	r0, [pc, #76]	; (273d8 <z_abort_timeout+0x80>)
   2738c:	f003 fd0d 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   27390:	4810      	ldr	r0, [pc, #64]	; (273d4 <z_abort_timeout+0x7c>)
   27392:	f7fd fc61 	bl	24c58 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   27396:	6823      	ldr	r3, [r4, #0]
   27398:	b19b      	cbz	r3, 273c2 <z_abort_timeout+0x6a>
			remove_timeout(to);
   2739a:	4620      	mov	r0, r4
   2739c:	f7ff ff00 	bl	271a0 <remove_timeout>
			ret = 0;
   273a0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273a2:	480c      	ldr	r0, [pc, #48]	; (273d4 <z_abort_timeout+0x7c>)
   273a4:	f7fd fc4a 	bl	24c3c <z_spin_unlock_valid>
   273a8:	b970      	cbnz	r0, 273c8 <z_abort_timeout+0x70>
   273aa:	23c2      	movs	r3, #194	; 0xc2
   273ac:	4a0a      	ldr	r2, [pc, #40]	; (273d8 <z_abort_timeout+0x80>)
   273ae:	490e      	ldr	r1, [pc, #56]	; (273e8 <z_abort_timeout+0x90>)
   273b0:	480b      	ldr	r0, [pc, #44]	; (273e0 <z_abort_timeout+0x88>)
   273b2:	f003 fd01 	bl	2adb8 <assert_print>
   273b6:	4907      	ldr	r1, [pc, #28]	; (273d4 <z_abort_timeout+0x7c>)
   273b8:	480c      	ldr	r0, [pc, #48]	; (273ec <z_abort_timeout+0x94>)
   273ba:	f003 fcfd 	bl	2adb8 <assert_print>
   273be:	21c2      	movs	r1, #194	; 0xc2
   273c0:	e7e3      	b.n	2738a <z_abort_timeout+0x32>
	int ret = -EINVAL;
   273c2:	f06f 0415 	mvn.w	r4, #21
   273c6:	e7ec      	b.n	273a2 <z_abort_timeout+0x4a>
	__asm__ volatile(
   273c8:	f385 8811 	msr	BASEPRI, r5
   273cc:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   273d0:	4620      	mov	r0, r4
   273d2:	bd38      	pop	{r3, r4, r5, pc}
   273d4:	2000eb98 	.word	0x2000eb98
   273d8:	000340d9 	.word	0x000340d9
   273dc:	00034132 	.word	0x00034132
   273e0:	00033bc2 	.word	0x00033bc2
   273e4:	00034147 	.word	0x00034147
   273e8:	00034106 	.word	0x00034106
   273ec:	0003411d 	.word	0x0003411d

000273f0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   273f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   273f2:	f04f 0320 	mov.w	r3, #32
   273f6:	f3ef 8511 	mrs	r5, BASEPRI
   273fa:	f383 8812 	msr	BASEPRI_MAX, r3
   273fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27402:	4817      	ldr	r0, [pc, #92]	; (27460 <z_get_next_timeout_expiry+0x70>)
   27404:	f7fd fc0c 	bl	24c20 <z_spin_lock_valid>
   27408:	b968      	cbnz	r0, 27426 <z_get_next_timeout_expiry+0x36>
   2740a:	2394      	movs	r3, #148	; 0x94
   2740c:	4a15      	ldr	r2, [pc, #84]	; (27464 <z_get_next_timeout_expiry+0x74>)
   2740e:	4916      	ldr	r1, [pc, #88]	; (27468 <z_get_next_timeout_expiry+0x78>)
   27410:	4816      	ldr	r0, [pc, #88]	; (2746c <z_get_next_timeout_expiry+0x7c>)
   27412:	f003 fcd1 	bl	2adb8 <assert_print>
   27416:	4912      	ldr	r1, [pc, #72]	; (27460 <z_get_next_timeout_expiry+0x70>)
   27418:	4815      	ldr	r0, [pc, #84]	; (27470 <z_get_next_timeout_expiry+0x80>)
   2741a:	f003 fccd 	bl	2adb8 <assert_print>
   2741e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27420:	4810      	ldr	r0, [pc, #64]	; (27464 <z_get_next_timeout_expiry+0x74>)
   27422:	f003 fcc2 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   27426:	480e      	ldr	r0, [pc, #56]	; (27460 <z_get_next_timeout_expiry+0x70>)
   27428:	f7fd fc16 	bl	24c58 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2742c:	f7ff fe98 	bl	27160 <next_timeout>
   27430:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27432:	480b      	ldr	r0, [pc, #44]	; (27460 <z_get_next_timeout_expiry+0x70>)
   27434:	f7fd fc02 	bl	24c3c <z_spin_unlock_valid>
   27438:	b958      	cbnz	r0, 27452 <z_get_next_timeout_expiry+0x62>
   2743a:	23c2      	movs	r3, #194	; 0xc2
   2743c:	4a09      	ldr	r2, [pc, #36]	; (27464 <z_get_next_timeout_expiry+0x74>)
   2743e:	490d      	ldr	r1, [pc, #52]	; (27474 <z_get_next_timeout_expiry+0x84>)
   27440:	480a      	ldr	r0, [pc, #40]	; (2746c <z_get_next_timeout_expiry+0x7c>)
   27442:	f003 fcb9 	bl	2adb8 <assert_print>
   27446:	4906      	ldr	r1, [pc, #24]	; (27460 <z_get_next_timeout_expiry+0x70>)
   27448:	480b      	ldr	r0, [pc, #44]	; (27478 <z_get_next_timeout_expiry+0x88>)
   2744a:	f003 fcb5 	bl	2adb8 <assert_print>
   2744e:	21c2      	movs	r1, #194	; 0xc2
   27450:	e7e6      	b.n	27420 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   27452:	f385 8811 	msr	BASEPRI, r5
   27456:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2745a:	4620      	mov	r0, r4
   2745c:	bd38      	pop	{r3, r4, r5, pc}
   2745e:	bf00      	nop
   27460:	2000eb98 	.word	0x2000eb98
   27464:	000340d9 	.word	0x000340d9
   27468:	00034132 	.word	0x00034132
   2746c:	00033bc2 	.word	0x00033bc2
   27470:	00034147 	.word	0x00034147
   27474:	00034106 	.word	0x00034106
   27478:	0003411d 	.word	0x0003411d

0002747c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2747c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27480:	4604      	mov	r4, r0
	__asm__ volatile(
   27482:	f04f 0320 	mov.w	r3, #32
   27486:	f3ef 8811 	mrs	r8, BASEPRI
   2748a:	f383 8812 	msr	BASEPRI_MAX, r3
   2748e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27492:	4847      	ldr	r0, [pc, #284]	; (275b0 <sys_clock_announce+0x134>)
   27494:	f7fd fbc4 	bl	24c20 <z_spin_lock_valid>
   27498:	b968      	cbnz	r0, 274b6 <sys_clock_announce+0x3a>
   2749a:	2394      	movs	r3, #148	; 0x94
   2749c:	4a45      	ldr	r2, [pc, #276]	; (275b4 <sys_clock_announce+0x138>)
   2749e:	4946      	ldr	r1, [pc, #280]	; (275b8 <sys_clock_announce+0x13c>)
   274a0:	4846      	ldr	r0, [pc, #280]	; (275bc <sys_clock_announce+0x140>)
   274a2:	f003 fc89 	bl	2adb8 <assert_print>
   274a6:	4942      	ldr	r1, [pc, #264]	; (275b0 <sys_clock_announce+0x134>)
   274a8:	4845      	ldr	r0, [pc, #276]	; (275c0 <sys_clock_announce+0x144>)
   274aa:	f003 fc85 	bl	2adb8 <assert_print>
   274ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   274b0:	4840      	ldr	r0, [pc, #256]	; (275b4 <sys_clock_announce+0x138>)
   274b2:	f003 fc7a 	bl	2adaa <assert_post_action>
	return list->head == list;
   274b6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 275c4 <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   274ba:	f8df b10c 	ldr.w	fp, [pc, #268]	; 275c8 <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
   274be:	483c      	ldr	r0, [pc, #240]	; (275b0 <sys_clock_announce+0x134>)
   274c0:	f7fd fbca 	bl	24c58 <z_spin_lock_set_owner>
   274c4:	f8cb 4000 	str.w	r4, [fp]
   274c8:	f8d9 4000 	ldr.w	r4, [r9]
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   274cc:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274ce:	454c      	cmp	r4, r9
   274d0:	bf08      	it	eq
   274d2:	2400      	moveq	r4, #0
   274d4:	2700      	movs	r7, #0
		curr_tick += dt;
   274d6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 275cc <sys_clock_announce+0x150>
	     (t != NULL) && (t->dticks <= announce_remaining);
   274da:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
   274de:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
   274e2:	2c00      	cmp	r4, #0
   274e4:	d049      	beq.n	2757a <sys_clock_announce+0xfe>
   274e6:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   274ea:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   274ee:	42ab      	cmp	r3, r5
   274f0:	eb7c 0e00 	sbcs.w	lr, ip, r0
   274f4:	da05      	bge.n	27502 <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   274f6:	1aed      	subs	r5, r5, r3
   274f8:	eb60 000c 	sbc.w	r0, r0, ip
   274fc:	e9c4 5004 	strd	r5, r0, [r4, #16]
   27500:	e03b      	b.n	2757a <sys_clock_announce+0xfe>
		curr_tick += dt;
   27502:	18aa      	adds	r2, r5, r2
   27504:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
   27508:	4620      	mov	r0, r4
		t->dticks = 0;
   2750a:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
   2750e:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
   27512:	f7ff fe45 	bl	271a0 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27516:	4826      	ldr	r0, [pc, #152]	; (275b0 <sys_clock_announce+0x134>)
   27518:	f7fd fb90 	bl	24c3c <z_spin_unlock_valid>
   2751c:	b958      	cbnz	r0, 27536 <sys_clock_announce+0xba>
   2751e:	23c2      	movs	r3, #194	; 0xc2
   27520:	4a24      	ldr	r2, [pc, #144]	; (275b4 <sys_clock_announce+0x138>)
   27522:	492b      	ldr	r1, [pc, #172]	; (275d0 <sys_clock_announce+0x154>)
   27524:	4825      	ldr	r0, [pc, #148]	; (275bc <sys_clock_announce+0x140>)
   27526:	f003 fc47 	bl	2adb8 <assert_print>
   2752a:	4921      	ldr	r1, [pc, #132]	; (275b0 <sys_clock_announce+0x134>)
   2752c:	4829      	ldr	r0, [pc, #164]	; (275d4 <sys_clock_announce+0x158>)
   2752e:	f003 fc43 	bl	2adb8 <assert_print>
   27532:	21c2      	movs	r1, #194	; 0xc2
   27534:	e7bc      	b.n	274b0 <sys_clock_announce+0x34>
	__asm__ volatile(
   27536:	f388 8811 	msr	BASEPRI, r8
   2753a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2753e:	4620      	mov	r0, r4
   27540:	68a3      	ldr	r3, [r4, #8]
   27542:	4798      	blx	r3
	__asm__ volatile(
   27544:	f04f 0320 	mov.w	r3, #32
   27548:	f3ef 8811 	mrs	r8, BASEPRI
   2754c:	f383 8812 	msr	BASEPRI_MAX, r3
   27550:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27554:	4816      	ldr	r0, [pc, #88]	; (275b0 <sys_clock_announce+0x134>)
   27556:	f7fd fb63 	bl	24c20 <z_spin_lock_valid>
   2755a:	2800      	cmp	r0, #0
   2755c:	d09d      	beq.n	2749a <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   2755e:	4814      	ldr	r0, [pc, #80]	; (275b0 <sys_clock_announce+0x134>)
   27560:	f7fd fb7a 	bl	24c58 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   27564:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
   27568:	f8d9 4000 	ldr.w	r4, [r9]
   2756c:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2756e:	454c      	cmp	r4, r9
   27570:	f8cb 3000 	str.w	r3, [fp]
   27574:	d1b1      	bne.n	274da <sys_clock_announce+0x5e>
		curr_tick += dt;
   27576:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2757a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2757c:	189a      	adds	r2, r3, r2
   2757e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   27582:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
   27586:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   2758a:	f7ff fde9 	bl	27160 <next_timeout>
   2758e:	4621      	mov	r1, r4
   27590:	f7f5 fb72 	bl	1cc78 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27594:	4806      	ldr	r0, [pc, #24]	; (275b0 <sys_clock_announce+0x134>)
   27596:	f7fd fb51 	bl	24c3c <z_spin_unlock_valid>
   2759a:	2800      	cmp	r0, #0
   2759c:	d0bf      	beq.n	2751e <sys_clock_announce+0xa2>
	__asm__ volatile(
   2759e:	f388 8811 	msr	BASEPRI, r8
   275a2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   275a6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   275aa:	f7fe bf5b 	b.w	26464 <z_time_slice>
   275ae:	bf00      	nop
   275b0:	2000eb98 	.word	0x2000eb98
   275b4:	000340d9 	.word	0x000340d9
   275b8:	00034132 	.word	0x00034132
   275bc:	00033bc2 	.word	0x00033bc2
   275c0:	00034147 	.word	0x00034147
   275c4:	2000ca4c 	.word	0x2000ca4c
   275c8:	2000eb94 	.word	0x2000eb94
   275cc:	2000df90 	.word	0x2000df90
   275d0:	00034106 	.word	0x00034106
   275d4:	0003411d 	.word	0x0003411d

000275d8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   275d8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   275da:	f04f 0320 	mov.w	r3, #32
   275de:	f3ef 8611 	mrs	r6, BASEPRI
   275e2:	f383 8812 	msr	BASEPRI_MAX, r3
   275e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275ea:	481a      	ldr	r0, [pc, #104]	; (27654 <sys_clock_tick_get+0x7c>)
   275ec:	f7fd fb18 	bl	24c20 <z_spin_lock_valid>
   275f0:	b968      	cbnz	r0, 2760e <sys_clock_tick_get+0x36>
   275f2:	2394      	movs	r3, #148	; 0x94
   275f4:	4a18      	ldr	r2, [pc, #96]	; (27658 <sys_clock_tick_get+0x80>)
   275f6:	4919      	ldr	r1, [pc, #100]	; (2765c <sys_clock_tick_get+0x84>)
   275f8:	4819      	ldr	r0, [pc, #100]	; (27660 <sys_clock_tick_get+0x88>)
   275fa:	f003 fbdd 	bl	2adb8 <assert_print>
   275fe:	4915      	ldr	r1, [pc, #84]	; (27654 <sys_clock_tick_get+0x7c>)
   27600:	4818      	ldr	r0, [pc, #96]	; (27664 <sys_clock_tick_get+0x8c>)
   27602:	f003 fbd9 	bl	2adb8 <assert_print>
   27606:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27608:	4813      	ldr	r0, [pc, #76]	; (27658 <sys_clock_tick_get+0x80>)
   2760a:	f003 fbce 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   2760e:	4811      	ldr	r0, [pc, #68]	; (27654 <sys_clock_tick_get+0x7c>)
   27610:	f7fd fb22 	bl	24c58 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   27614:	f7ff fd9a 	bl	2714c <elapsed>
   27618:	4a13      	ldr	r2, [pc, #76]	; (27668 <sys_clock_tick_get+0x90>)
   2761a:	e9d2 4500 	ldrd	r4, r5, [r2]
   2761e:	1904      	adds	r4, r0, r4
   27620:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27624:	480b      	ldr	r0, [pc, #44]	; (27654 <sys_clock_tick_get+0x7c>)
   27626:	f7fd fb09 	bl	24c3c <z_spin_unlock_valid>
   2762a:	b958      	cbnz	r0, 27644 <sys_clock_tick_get+0x6c>
   2762c:	23c2      	movs	r3, #194	; 0xc2
   2762e:	4a0a      	ldr	r2, [pc, #40]	; (27658 <sys_clock_tick_get+0x80>)
   27630:	490e      	ldr	r1, [pc, #56]	; (2766c <sys_clock_tick_get+0x94>)
   27632:	480b      	ldr	r0, [pc, #44]	; (27660 <sys_clock_tick_get+0x88>)
   27634:	f003 fbc0 	bl	2adb8 <assert_print>
   27638:	4906      	ldr	r1, [pc, #24]	; (27654 <sys_clock_tick_get+0x7c>)
   2763a:	480d      	ldr	r0, [pc, #52]	; (27670 <sys_clock_tick_get+0x98>)
   2763c:	f003 fbbc 	bl	2adb8 <assert_print>
   27640:	21c2      	movs	r1, #194	; 0xc2
   27642:	e7e1      	b.n	27608 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   27644:	f386 8811 	msr	BASEPRI, r6
   27648:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2764c:	4620      	mov	r0, r4
   2764e:	4629      	mov	r1, r5
   27650:	bd70      	pop	{r4, r5, r6, pc}
   27652:	bf00      	nop
   27654:	2000eb98 	.word	0x2000eb98
   27658:	000340d9 	.word	0x000340d9
   2765c:	00034132 	.word	0x00034132
   27660:	00033bc2 	.word	0x00033bc2
   27664:	00034147 	.word	0x00034147
   27668:	2000df90 	.word	0x2000df90
   2766c:	00034106 	.word	0x00034106
   27670:	0003411d 	.word	0x0003411d

00027674 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27676:	4604      	mov	r4, r0
	__asm__ volatile(
   27678:	f04f 0320 	mov.w	r3, #32
   2767c:	f3ef 8711 	mrs	r7, BASEPRI
   27680:	f383 8812 	msr	BASEPRI_MAX, r3
   27684:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27688:	484e      	ldr	r0, [pc, #312]	; (277c4 <z_timer_expiration_handler+0x150>)
   2768a:	f7fd fac9 	bl	24c20 <z_spin_lock_valid>
   2768e:	b968      	cbnz	r0, 276ac <z_timer_expiration_handler+0x38>
   27690:	2394      	movs	r3, #148	; 0x94
   27692:	4a4d      	ldr	r2, [pc, #308]	; (277c8 <z_timer_expiration_handler+0x154>)
   27694:	494d      	ldr	r1, [pc, #308]	; (277cc <z_timer_expiration_handler+0x158>)
   27696:	484e      	ldr	r0, [pc, #312]	; (277d0 <z_timer_expiration_handler+0x15c>)
   27698:	f003 fb8e 	bl	2adb8 <assert_print>
   2769c:	4949      	ldr	r1, [pc, #292]	; (277c4 <z_timer_expiration_handler+0x150>)
   2769e:	484d      	ldr	r0, [pc, #308]	; (277d4 <z_timer_expiration_handler+0x160>)
   276a0:	f003 fb8a 	bl	2adb8 <assert_print>
   276a4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276a6:	4848      	ldr	r0, [pc, #288]	; (277c8 <z_timer_expiration_handler+0x154>)
   276a8:	f003 fb7f 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   276ac:	4845      	ldr	r0, [pc, #276]	; (277c4 <z_timer_expiration_handler+0x150>)
   276ae:	f7fd fad3 	bl	24c58 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   276b2:	6822      	ldr	r2, [r4, #0]
   276b4:	b182      	cbz	r2, 276d8 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276b6:	4843      	ldr	r0, [pc, #268]	; (277c4 <z_timer_expiration_handler+0x150>)
   276b8:	f7fd fac0 	bl	24c3c <z_spin_unlock_valid>
   276bc:	2800      	cmp	r0, #0
   276be:	d17b      	bne.n	277b8 <z_timer_expiration_handler+0x144>
   276c0:	23c2      	movs	r3, #194	; 0xc2
   276c2:	4a41      	ldr	r2, [pc, #260]	; (277c8 <z_timer_expiration_handler+0x154>)
   276c4:	4944      	ldr	r1, [pc, #272]	; (277d8 <z_timer_expiration_handler+0x164>)
   276c6:	4842      	ldr	r0, [pc, #264]	; (277d0 <z_timer_expiration_handler+0x15c>)
   276c8:	f003 fb76 	bl	2adb8 <assert_print>
   276cc:	493d      	ldr	r1, [pc, #244]	; (277c4 <z_timer_expiration_handler+0x150>)
   276ce:	4843      	ldr	r0, [pc, #268]	; (277dc <z_timer_expiration_handler+0x168>)
   276d0:	f003 fb72 	bl	2adb8 <assert_print>
   276d4:	21c2      	movs	r1, #194	; 0xc2
   276d6:	e7e6      	b.n	276a6 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   276d8:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   276dc:	1c58      	adds	r0, r3, #1
   276de:	f146 0100 	adc.w	r1, r6, #0
   276e2:	2802      	cmp	r0, #2
   276e4:	f171 0100 	sbcs.w	r1, r1, #0
   276e8:	d327      	bcc.n	2773a <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   276ea:	2b01      	cmp	r3, #1
   276ec:	f176 0100 	sbcs.w	r1, r6, #0
   276f0:	bfbc      	itt	lt
   276f2:	2301      	movlt	r3, #1
   276f4:	4616      	movlt	r6, r2
   276f6:	1e5d      	subs	r5, r3, #1
   276f8:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   276fc:	f008 ff72 	bl	305e4 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   27700:	3001      	adds	r0, #1
   27702:	f141 0100 	adc.w	r1, r1, #0
   27706:	1940      	adds	r0, r0, r5
   27708:	eb46 0101 	adc.w	r1, r6, r1
   2770c:	2801      	cmp	r0, #1
   2770e:	f171 0100 	sbcs.w	r1, r1, #0
   27712:	db4c      	blt.n	277ae <z_timer_expiration_handler+0x13a>
   27714:	f008 ff66 	bl	305e4 <z_impl_k_uptime_ticks>
   27718:	3001      	adds	r0, #1
   2771a:	f141 0100 	adc.w	r1, r1, #0
   2771e:	f06f 0201 	mvn.w	r2, #1
   27722:	1940      	adds	r0, r0, r5
   27724:	eb46 0301 	adc.w	r3, r6, r1
   27728:	f04f 31ff 	mov.w	r1, #4294967295
   2772c:	1a12      	subs	r2, r2, r0
   2772e:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27732:	4620      	mov	r0, r4
   27734:	492a      	ldr	r1, [pc, #168]	; (277e0 <z_timer_expiration_handler+0x16c>)
   27736:	f7ff fd4f 	bl	271d8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2773a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2773c:	3301      	adds	r3, #1
   2773e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27740:	6a23      	ldr	r3, [r4, #32]
   27742:	b1db      	cbz	r3, 2777c <z_timer_expiration_handler+0x108>
   27744:	481f      	ldr	r0, [pc, #124]	; (277c4 <z_timer_expiration_handler+0x150>)
   27746:	f7fd fa79 	bl	24c3c <z_spin_unlock_valid>
   2774a:	2800      	cmp	r0, #0
   2774c:	d0b8      	beq.n	276c0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2774e:	f387 8811 	msr	BASEPRI, r7
   27752:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27756:	4620      	mov	r0, r4
   27758:	6a23      	ldr	r3, [r4, #32]
   2775a:	4798      	blx	r3
	__asm__ volatile(
   2775c:	f04f 0320 	mov.w	r3, #32
   27760:	f3ef 8711 	mrs	r7, BASEPRI
   27764:	f383 8812 	msr	BASEPRI_MAX, r3
   27768:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2776c:	4815      	ldr	r0, [pc, #84]	; (277c4 <z_timer_expiration_handler+0x150>)
   2776e:	f7fd fa57 	bl	24c20 <z_spin_lock_valid>
   27772:	2800      	cmp	r0, #0
   27774:	d08c      	beq.n	27690 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   27776:	4813      	ldr	r0, [pc, #76]	; (277c4 <z_timer_expiration_handler+0x150>)
   27778:	f7fd fa6e 	bl	24c58 <z_spin_lock_set_owner>
	return list->head == list;
   2777c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27780:	42a5      	cmp	r5, r4
   27782:	d098      	beq.n	276b6 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27784:	2d00      	cmp	r5, #0
   27786:	d096      	beq.n	276b6 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   27788:	4628      	mov	r0, r5
   2778a:	f7fe fc3d 	bl	26008 <z_unpend_thread_no_timeout>
   2778e:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27790:	480c      	ldr	r0, [pc, #48]	; (277c4 <z_timer_expiration_handler+0x150>)
   27792:	67eb      	str	r3, [r5, #124]	; 0x7c
   27794:	f7fd fa52 	bl	24c3c <z_spin_unlock_valid>
   27798:	2800      	cmp	r0, #0
   2779a:	d091      	beq.n	276c0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2779c:	f387 8811 	msr	BASEPRI, r7
   277a0:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   277a4:	4628      	mov	r0, r5
}
   277a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   277aa:	f7fe bbe7 	b.w	25f7c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   277ae:	f06f 0201 	mvn.w	r2, #1
   277b2:	f04f 33ff 	mov.w	r3, #4294967295
   277b6:	e7bc      	b.n	27732 <z_timer_expiration_handler+0xbe>
   277b8:	f387 8811 	msr	BASEPRI, r7
   277bc:	f3bf 8f6f 	isb	sy
}
   277c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   277c2:	bf00      	nop
   277c4:	2000eb9c 	.word	0x2000eb9c
   277c8:	000340d9 	.word	0x000340d9
   277cc:	00034132 	.word	0x00034132
   277d0:	00033bc2 	.word	0x00033bc2
   277d4:	00034147 	.word	0x00034147
   277d8:	00034106 	.word	0x00034106
   277dc:	0003411d 	.word	0x0003411d
   277e0:	00027675 	.word	0x00027675

000277e4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   277e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   277e8:	bf08      	it	eq
   277ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   277ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   277f2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   277f6:	4605      	mov	r5, r0
   277f8:	461c      	mov	r4, r3
   277fa:	4691      	mov	r9, r2
   277fc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   277fe:	d01c      	beq.n	2783a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27800:	1c53      	adds	r3, r2, #1
   27802:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   27806:	db09      	blt.n	2781c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27808:	2a01      	cmp	r2, #1
   2780a:	f174 0300 	sbcs.w	r3, r4, #0
   2780e:	bfbc      	itt	lt
   27810:	2201      	movlt	r2, #1
   27812:	2400      	movlt	r4, #0
   27814:	f112 39ff 	adds.w	r9, r2, #4294967295
   27818:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2781c:	4628      	mov	r0, r5
   2781e:	f7ff fd9b 	bl	27358 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27822:	2300      	movs	r3, #0
	timer->period = period;
   27824:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   27828:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2782a:	464a      	mov	r2, r9
   2782c:	4643      	mov	r3, r8
   2782e:	4628      	mov	r0, r5
		     duration);
}
   27830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27834:	4902      	ldr	r1, [pc, #8]	; (27840 <z_impl_k_timer_start+0x5c>)
   27836:	f7ff bccf 	b.w	271d8 <z_add_timeout>
}
   2783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2783e:	bf00      	nop
   27840:	00027675 	.word	0x00027675

00027844 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   27844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27848:	2600      	movs	r6, #0
{
   2784a:	4688      	mov	r8, r1
   2784c:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   2784e:	4604      	mov	r4, r0
	int events_registered = 0;
   27850:	4637      	mov	r7, r6
	event->poller = NULL;
   27852:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27854:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 27a14 <register_events+0x1d0>
{
   27858:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2785a:	4546      	cmp	r6, r8
   2785c:	db03      	blt.n	27866 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2785e:	4638      	mov	r0, r7
   27860:	b003      	add	sp, #12
   27862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   27866:	f04f 0320 	mov.w	r3, #32
   2786a:	f3ef 8b11 	mrs	fp, BASEPRI
   2786e:	f383 8812 	msr	BASEPRI_MAX, r3
   27872:	f3bf 8f6f 	isb	sy
   27876:	4648      	mov	r0, r9
   27878:	f7fd f9d2 	bl	24c20 <z_spin_lock_valid>
   2787c:	b960      	cbnz	r0, 27898 <register_events+0x54>
   2787e:	2394      	movs	r3, #148	; 0x94
   27880:	4a65      	ldr	r2, [pc, #404]	; (27a18 <register_events+0x1d4>)
   27882:	4966      	ldr	r1, [pc, #408]	; (27a1c <register_events+0x1d8>)
   27884:	4866      	ldr	r0, [pc, #408]	; (27a20 <register_events+0x1dc>)
   27886:	f003 fa97 	bl	2adb8 <assert_print>
   2788a:	4962      	ldr	r1, [pc, #392]	; (27a14 <register_events+0x1d0>)
   2788c:	4865      	ldr	r0, [pc, #404]	; (27a24 <register_events+0x1e0>)
   2788e:	f003 fa93 	bl	2adb8 <assert_print>
   27892:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27894:	4860      	ldr	r0, [pc, #384]	; (27a18 <register_events+0x1d4>)
   27896:	e060      	b.n	2795a <register_events+0x116>
	z_spin_lock_set_owner(l);
   27898:	4648      	mov	r0, r9
   2789a:	f7fd f9dd 	bl	24c58 <z_spin_lock_set_owner>
	switch (event->type) {
   2789e:	7b63      	ldrb	r3, [r4, #13]
   278a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   278a4:	2b08      	cmp	r3, #8
   278a6:	d84a      	bhi.n	2793e <register_events+0xfa>
   278a8:	e8df f003 	tbb	[pc, r3]
   278ac:	49053d2b 	.word	0x49053d2b
   278b0:	49494927 	.word	0x49494927
   278b4:	43          	.byte	0x43
   278b5:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   278b6:	6923      	ldr	r3, [r4, #16]
   278b8:	689b      	ldr	r3, [r3, #8]
   278ba:	b313      	cbz	r3, 27902 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   278bc:	2302      	movs	r3, #2
	event->state |= state;
   278be:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   278c0:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   278c4:	f3c2 3186 	ubfx	r1, r2, #14, #7
   278c8:	430b      	orrs	r3, r1
   278ca:	f363 3294 	bfi	r2, r3, #14, #7
   278ce:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   278d0:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   278d4:	4648      	mov	r0, r9
   278d6:	f7fd f9b1 	bl	24c3c <z_spin_unlock_valid>
   278da:	3414      	adds	r4, #20
   278dc:	2800      	cmp	r0, #0
   278de:	f040 8092 	bne.w	27a06 <register_events+0x1c2>
   278e2:	23c2      	movs	r3, #194	; 0xc2
   278e4:	4a4c      	ldr	r2, [pc, #304]	; (27a18 <register_events+0x1d4>)
   278e6:	4950      	ldr	r1, [pc, #320]	; (27a28 <register_events+0x1e4>)
   278e8:	484d      	ldr	r0, [pc, #308]	; (27a20 <register_events+0x1dc>)
   278ea:	f003 fa65 	bl	2adb8 <assert_print>
   278ee:	4949      	ldr	r1, [pc, #292]	; (27a14 <register_events+0x1d0>)
   278f0:	484e      	ldr	r0, [pc, #312]	; (27a2c <register_events+0x1e8>)
   278f2:	f003 fa61 	bl	2adb8 <assert_print>
   278f6:	21c2      	movs	r1, #194	; 0xc2
   278f8:	e7cc      	b.n	27894 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   278fa:	6923      	ldr	r3, [r4, #16]
   278fc:	681b      	ldr	r3, [r3, #0]
   278fe:	2b00      	cmp	r3, #0
   27900:	d12d      	bne.n	2795e <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   27902:	9b01      	ldr	r3, [sp, #4]
   27904:	2b00      	cmp	r3, #0
   27906:	d1e5      	bne.n	278d4 <register_events+0x90>
   27908:	782b      	ldrb	r3, [r5, #0]
   2790a:	2b00      	cmp	r3, #0
   2790c:	d0e2      	beq.n	278d4 <register_events+0x90>
	switch (event->type) {
   2790e:	7b63      	ldrb	r3, [r4, #13]
   27910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27914:	2b08      	cmp	r3, #8
   27916:	d86b      	bhi.n	279f0 <register_events+0x1ac>
   27918:	e8df f003 	tbb	[pc, r3]
   2791c:	6a234935 	.word	0x6a234935
   27920:	6a6a6a38 	.word	0x6a6a6a38
   27924:	59          	.byte	0x59
   27925:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   27926:	6923      	ldr	r3, [r4, #16]
   27928:	689b      	ldr	r3, [r3, #8]
   2792a:	2b00      	cmp	r3, #0
   2792c:	d0e9      	beq.n	27902 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   2792e:	2301      	movs	r3, #1
   27930:	e7c5      	b.n	278be <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   27932:	6923      	ldr	r3, [r4, #16]
   27934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27936:	2b00      	cmp	r3, #0
   27938:	d0e3      	beq.n	27902 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2793a:	2310      	movs	r3, #16
   2793c:	e7bf      	b.n	278be <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2793e:	2363      	movs	r3, #99	; 0x63
   27940:	4a3b      	ldr	r2, [pc, #236]	; (27a30 <register_events+0x1ec>)
   27942:	493c      	ldr	r1, [pc, #240]	; (27a34 <register_events+0x1f0>)
   27944:	4836      	ldr	r0, [pc, #216]	; (27a20 <register_events+0x1dc>)
   27946:	f003 fa37 	bl	2adb8 <assert_print>
   2794a:	7b61      	ldrb	r1, [r4, #13]
   2794c:	483a      	ldr	r0, [pc, #232]	; (27a38 <register_events+0x1f4>)
   2794e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   27952:	f003 fa31 	bl	2adb8 <assert_print>
   27956:	2163      	movs	r1, #99	; 0x63
   27958:	4835      	ldr	r0, [pc, #212]	; (27a30 <register_events+0x1ec>)
   2795a:	f003 fa26 	bl	2adaa <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2795e:	2304      	movs	r3, #4
   27960:	e7ad      	b.n	278be <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27962:	6920      	ldr	r0, [r4, #16]
   27964:	b950      	cbnz	r0, 2797c <register_events+0x138>
   27966:	4935      	ldr	r1, [pc, #212]	; (27a3c <register_events+0x1f8>)
   27968:	238d      	movs	r3, #141	; 0x8d
   2796a:	4a31      	ldr	r2, [pc, #196]	; (27a30 <register_events+0x1ec>)
   2796c:	482c      	ldr	r0, [pc, #176]	; (27a20 <register_events+0x1dc>)
   2796e:	f003 fa23 	bl	2adb8 <assert_print>
   27972:	4833      	ldr	r0, [pc, #204]	; (27a40 <register_events+0x1fc>)
   27974:	f003 fa20 	bl	2adb8 <assert_print>
   27978:	218d      	movs	r1, #141	; 0x8d
   2797a:	e7ed      	b.n	27958 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   2797c:	462a      	mov	r2, r5
   2797e:	4621      	mov	r1, r4
   27980:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27982:	f008 fe80 	bl	30686 <add_event>
	event->poller = poller;
   27986:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   27988:	3701      	adds	r7, #1
   2798a:	e7a3      	b.n	278d4 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2798c:	6920      	ldr	r0, [r4, #16]
   2798e:	b950      	cbnz	r0, 279a6 <register_events+0x162>
   27990:	492c      	ldr	r1, [pc, #176]	; (27a44 <register_events+0x200>)
   27992:	2391      	movs	r3, #145	; 0x91
   27994:	4a26      	ldr	r2, [pc, #152]	; (27a30 <register_events+0x1ec>)
   27996:	4822      	ldr	r0, [pc, #136]	; (27a20 <register_events+0x1dc>)
   27998:	f003 fa0e 	bl	2adb8 <assert_print>
   2799c:	482a      	ldr	r0, [pc, #168]	; (27a48 <register_events+0x204>)
   2799e:	f003 fa0b 	bl	2adb8 <assert_print>
   279a2:	2191      	movs	r1, #145	; 0x91
   279a4:	e7d8      	b.n	27958 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   279a6:	462a      	mov	r2, r5
   279a8:	4621      	mov	r1, r4
   279aa:	3014      	adds	r0, #20
   279ac:	e7e9      	b.n	27982 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   279ae:	6920      	ldr	r0, [r4, #16]
   279b0:	b950      	cbnz	r0, 279c8 <register_events+0x184>
   279b2:	4926      	ldr	r1, [pc, #152]	; (27a4c <register_events+0x208>)
   279b4:	2395      	movs	r3, #149	; 0x95
   279b6:	4a1e      	ldr	r2, [pc, #120]	; (27a30 <register_events+0x1ec>)
   279b8:	4819      	ldr	r0, [pc, #100]	; (27a20 <register_events+0x1dc>)
   279ba:	f003 f9fd 	bl	2adb8 <assert_print>
   279be:	4824      	ldr	r0, [pc, #144]	; (27a50 <register_events+0x20c>)
   279c0:	f003 f9fa 	bl	2adb8 <assert_print>
   279c4:	2195      	movs	r1, #149	; 0x95
   279c6:	e7c7      	b.n	27958 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   279c8:	462a      	mov	r2, r5
   279ca:	4621      	mov	r1, r4
   279cc:	e7d9      	b.n	27982 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   279ce:	6920      	ldr	r0, [r4, #16]
   279d0:	b950      	cbnz	r0, 279e8 <register_events+0x1a4>
   279d2:	4920      	ldr	r1, [pc, #128]	; (27a54 <register_events+0x210>)
   279d4:	2399      	movs	r3, #153	; 0x99
   279d6:	4a16      	ldr	r2, [pc, #88]	; (27a30 <register_events+0x1ec>)
   279d8:	4811      	ldr	r0, [pc, #68]	; (27a20 <register_events+0x1dc>)
   279da:	f003 f9ed 	bl	2adb8 <assert_print>
   279de:	481e      	ldr	r0, [pc, #120]	; (27a58 <register_events+0x214>)
   279e0:	f003 f9ea 	bl	2adb8 <assert_print>
   279e4:	2199      	movs	r1, #153	; 0x99
   279e6:	e7b7      	b.n	27958 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   279e8:	462a      	mov	r2, r5
   279ea:	4621      	mov	r1, r4
   279ec:	3028      	adds	r0, #40	; 0x28
   279ee:	e7c8      	b.n	27982 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   279f0:	4910      	ldr	r1, [pc, #64]	; (27a34 <register_events+0x1f0>)
   279f2:	23a6      	movs	r3, #166	; 0xa6
   279f4:	4a0e      	ldr	r2, [pc, #56]	; (27a30 <register_events+0x1ec>)
   279f6:	480a      	ldr	r0, [pc, #40]	; (27a20 <register_events+0x1dc>)
   279f8:	f003 f9de 	bl	2adb8 <assert_print>
   279fc:	4817      	ldr	r0, [pc, #92]	; (27a5c <register_events+0x218>)
   279fe:	f003 f9db 	bl	2adb8 <assert_print>
   27a02:	21a6      	movs	r1, #166	; 0xa6
   27a04:	e7a8      	b.n	27958 <register_events+0x114>
	__asm__ volatile(
   27a06:	f38b 8811 	msr	BASEPRI, fp
   27a0a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27a0e:	3601      	adds	r6, #1
   27a10:	e723      	b.n	2785a <register_events+0x16>
   27a12:	bf00      	nop
   27a14:	2000eba0 	.word	0x2000eba0
   27a18:	000340d9 	.word	0x000340d9
   27a1c:	00034132 	.word	0x00034132
   27a20:	00033bc2 	.word	0x00033bc2
   27a24:	00034147 	.word	0x00034147
   27a28:	00034106 	.word	0x00034106
   27a2c:	0003411d 	.word	0x0003411d
   27a30:	0003bce8 	.word	0x0003bce8
   27a34:	000386dc 	.word	0x000386dc
   27a38:	0003bd09 	.word	0x0003bd09
   27a3c:	0003bd26 	.word	0x0003bd26
   27a40:	0003bd40 	.word	0x0003bd40
   27a44:	0003bd55 	.word	0x0003bd55
   27a48:	0003bd71 	.word	0x0003bd71
   27a4c:	0003bd82 	.word	0x0003bd82
   27a50:	0003bd9f 	.word	0x0003bd9f
   27a54:	0003bdb6 	.word	0x0003bdb6
   27a58:	0003bdd1 	.word	0x0003bdd1
   27a5c:	0003bdea 	.word	0x0003bdea

00027a60 <clear_event_registrations>:
{
   27a60:	2314      	movs	r3, #20
   27a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a66:	4615      	mov	r5, r2
	while (num_events--) {
   27a68:	460c      	mov	r4, r1
	event->poller = NULL;
   27a6a:	2600      	movs	r6, #0
   27a6c:	fb03 0001 	mla	r0, r3, r1, r0
   27a70:	4f4b      	ldr	r7, [pc, #300]	; (27ba0 <clear_event_registrations+0x140>)
	while (num_events--) {
   27a72:	b90c      	cbnz	r4, 27a78 <clear_event_registrations+0x18>
}
   27a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   27a78:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   27a7c:	f1a0 0814 	sub.w	r8, r0, #20
   27a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   27a84:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   27a88:	2b08      	cmp	r3, #8
   27a8a:	d842      	bhi.n	27b12 <clear_event_registrations+0xb2>
   27a8c:	e8df f003 	tbb	[pc, r3]
   27a90:	41052555 	.word	0x41052555
   27a94:	41414116 	.word	0x41414116
   27a98:	33          	.byte	0x33
   27a99:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27a9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27a9e:	2b00      	cmp	r3, #0
   27aa0:	d142      	bne.n	27b28 <clear_event_registrations+0xc8>
   27aa2:	4940      	ldr	r1, [pc, #256]	; (27ba4 <clear_event_registrations+0x144>)
   27aa4:	23b6      	movs	r3, #182	; 0xb6
   27aa6:	4a40      	ldr	r2, [pc, #256]	; (27ba8 <clear_event_registrations+0x148>)
   27aa8:	4840      	ldr	r0, [pc, #256]	; (27bac <clear_event_registrations+0x14c>)
   27aaa:	f003 f985 	bl	2adb8 <assert_print>
   27aae:	4840      	ldr	r0, [pc, #256]	; (27bb0 <clear_event_registrations+0x150>)
   27ab0:	f003 f982 	bl	2adb8 <assert_print>
   27ab4:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27ab6:	483c      	ldr	r0, [pc, #240]	; (27ba8 <clear_event_registrations+0x148>)
   27ab8:	f003 f977 	bl	2adaa <assert_post_action>
   27abc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27ac0:	2b00      	cmp	r3, #0
   27ac2:	d131      	bne.n	27b28 <clear_event_registrations+0xc8>
   27ac4:	493b      	ldr	r1, [pc, #236]	; (27bb4 <clear_event_registrations+0x154>)
   27ac6:	23ba      	movs	r3, #186	; 0xba
   27ac8:	4a37      	ldr	r2, [pc, #220]	; (27ba8 <clear_event_registrations+0x148>)
   27aca:	4838      	ldr	r0, [pc, #224]	; (27bac <clear_event_registrations+0x14c>)
   27acc:	f003 f974 	bl	2adb8 <assert_print>
   27ad0:	4839      	ldr	r0, [pc, #228]	; (27bb8 <clear_event_registrations+0x158>)
   27ad2:	f003 f971 	bl	2adb8 <assert_print>
   27ad6:	21ba      	movs	r1, #186	; 0xba
   27ad8:	e7ed      	b.n	27ab6 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27ada:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27ade:	bb1b      	cbnz	r3, 27b28 <clear_event_registrations+0xc8>
   27ae0:	4936      	ldr	r1, [pc, #216]	; (27bbc <clear_event_registrations+0x15c>)
   27ae2:	23be      	movs	r3, #190	; 0xbe
   27ae4:	4a30      	ldr	r2, [pc, #192]	; (27ba8 <clear_event_registrations+0x148>)
   27ae6:	4831      	ldr	r0, [pc, #196]	; (27bac <clear_event_registrations+0x14c>)
   27ae8:	f003 f966 	bl	2adb8 <assert_print>
   27aec:	4834      	ldr	r0, [pc, #208]	; (27bc0 <clear_event_registrations+0x160>)
   27aee:	f003 f963 	bl	2adb8 <assert_print>
   27af2:	21be      	movs	r1, #190	; 0xbe
   27af4:	e7df      	b.n	27ab6 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27af6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27afa:	b9ab      	cbnz	r3, 27b28 <clear_event_registrations+0xc8>
   27afc:	4931      	ldr	r1, [pc, #196]	; (27bc4 <clear_event_registrations+0x164>)
   27afe:	23c2      	movs	r3, #194	; 0xc2
   27b00:	4a29      	ldr	r2, [pc, #164]	; (27ba8 <clear_event_registrations+0x148>)
   27b02:	482a      	ldr	r0, [pc, #168]	; (27bac <clear_event_registrations+0x14c>)
   27b04:	f003 f958 	bl	2adb8 <assert_print>
   27b08:	482f      	ldr	r0, [pc, #188]	; (27bc8 <clear_event_registrations+0x168>)
   27b0a:	f003 f955 	bl	2adb8 <assert_print>
   27b0e:	21c2      	movs	r1, #194	; 0xc2
   27b10:	e7d1      	b.n	27ab6 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   27b12:	492e      	ldr	r1, [pc, #184]	; (27bcc <clear_event_registrations+0x16c>)
   27b14:	23cf      	movs	r3, #207	; 0xcf
   27b16:	4a24      	ldr	r2, [pc, #144]	; (27ba8 <clear_event_registrations+0x148>)
   27b18:	4824      	ldr	r0, [pc, #144]	; (27bac <clear_event_registrations+0x14c>)
   27b1a:	f003 f94d 	bl	2adb8 <assert_print>
   27b1e:	482c      	ldr	r0, [pc, #176]	; (27bd0 <clear_event_registrations+0x170>)
   27b20:	f003 f94a 	bl	2adb8 <assert_print>
   27b24:	21cf      	movs	r1, #207	; 0xcf
   27b26:	e7c6      	b.n	27ab6 <clear_event_registrations+0x56>
	return node->next != NULL;
   27b28:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27b2c:	b12b      	cbz	r3, 27b3a <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   27b2e:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   27b32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27b34:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   27b36:	e940 6605 	strd	r6, r6, [r0, #-20]
   27b3a:	4638      	mov	r0, r7
   27b3c:	f7fd f87e 	bl	24c3c <z_spin_unlock_valid>
   27b40:	b960      	cbnz	r0, 27b5c <clear_event_registrations+0xfc>
   27b42:	23c2      	movs	r3, #194	; 0xc2
   27b44:	4a23      	ldr	r2, [pc, #140]	; (27bd4 <clear_event_registrations+0x174>)
   27b46:	4924      	ldr	r1, [pc, #144]	; (27bd8 <clear_event_registrations+0x178>)
   27b48:	4818      	ldr	r0, [pc, #96]	; (27bac <clear_event_registrations+0x14c>)
   27b4a:	f003 f935 	bl	2adb8 <assert_print>
   27b4e:	4914      	ldr	r1, [pc, #80]	; (27ba0 <clear_event_registrations+0x140>)
   27b50:	4822      	ldr	r0, [pc, #136]	; (27bdc <clear_event_registrations+0x17c>)
   27b52:	f003 f931 	bl	2adb8 <assert_print>
   27b56:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b58:	481e      	ldr	r0, [pc, #120]	; (27bd4 <clear_event_registrations+0x174>)
   27b5a:	e7ad      	b.n	27ab8 <clear_event_registrations+0x58>
   27b5c:	f385 8811 	msr	BASEPRI, r5
   27b60:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27b64:	f04f 0320 	mov.w	r3, #32
   27b68:	f3ef 8511 	mrs	r5, BASEPRI
   27b6c:	f383 8812 	msr	BASEPRI_MAX, r3
   27b70:	f3bf 8f6f 	isb	sy
   27b74:	4638      	mov	r0, r7
   27b76:	f7fd f853 	bl	24c20 <z_spin_lock_valid>
   27b7a:	3c01      	subs	r4, #1
   27b7c:	b958      	cbnz	r0, 27b96 <clear_event_registrations+0x136>
   27b7e:	2394      	movs	r3, #148	; 0x94
   27b80:	4a14      	ldr	r2, [pc, #80]	; (27bd4 <clear_event_registrations+0x174>)
   27b82:	4917      	ldr	r1, [pc, #92]	; (27be0 <clear_event_registrations+0x180>)
   27b84:	4809      	ldr	r0, [pc, #36]	; (27bac <clear_event_registrations+0x14c>)
   27b86:	f003 f917 	bl	2adb8 <assert_print>
   27b8a:	4905      	ldr	r1, [pc, #20]	; (27ba0 <clear_event_registrations+0x140>)
   27b8c:	4815      	ldr	r0, [pc, #84]	; (27be4 <clear_event_registrations+0x184>)
   27b8e:	f003 f913 	bl	2adb8 <assert_print>
   27b92:	2194      	movs	r1, #148	; 0x94
   27b94:	e7e0      	b.n	27b58 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   27b96:	4638      	mov	r0, r7
   27b98:	f7fd f85e 	bl	24c58 <z_spin_lock_set_owner>
	return k;
   27b9c:	4640      	mov	r0, r8
   27b9e:	e768      	b.n	27a72 <clear_event_registrations+0x12>
   27ba0:	2000eba0 	.word	0x2000eba0
   27ba4:	0003bd26 	.word	0x0003bd26
   27ba8:	0003bce8 	.word	0x0003bce8
   27bac:	00033bc2 	.word	0x00033bc2
   27bb0:	0003bd40 	.word	0x0003bd40
   27bb4:	0003bd55 	.word	0x0003bd55
   27bb8:	0003bd71 	.word	0x0003bd71
   27bbc:	0003bd82 	.word	0x0003bd82
   27bc0:	0003bd9f 	.word	0x0003bd9f
   27bc4:	0003bdb6 	.word	0x0003bdb6
   27bc8:	0003bdd1 	.word	0x0003bdd1
   27bcc:	000386dc 	.word	0x000386dc
   27bd0:	0003bdea 	.word	0x0003bdea
   27bd4:	000340d9 	.word	0x000340d9
   27bd8:	00034106 	.word	0x00034106
   27bdc:	0003411d 	.word	0x0003411d
   27be0:	00034132 	.word	0x00034132
   27be4:	00034147 	.word	0x00034147

00027be8 <k_poll_event_init>:
{
   27be8:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   27bea:	b162      	cbz	r2, 27c06 <k_poll_event_init+0x1e>
   27bec:	4917      	ldr	r1, [pc, #92]	; (27c4c <k_poll_event_init+0x64>)
   27bee:	232d      	movs	r3, #45	; 0x2d
   27bf0:	4a17      	ldr	r2, [pc, #92]	; (27c50 <k_poll_event_init+0x68>)
   27bf2:	4818      	ldr	r0, [pc, #96]	; (27c54 <k_poll_event_init+0x6c>)
   27bf4:	f003 f8e0 	bl	2adb8 <assert_print>
   27bf8:	4817      	ldr	r0, [pc, #92]	; (27c58 <k_poll_event_init+0x70>)
   27bfa:	f003 f8dd 	bl	2adb8 <assert_print>
   27bfe:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   27c00:	4813      	ldr	r0, [pc, #76]	; (27c50 <k_poll_event_init+0x68>)
   27c02:	f003 f8d2 	bl	2adaa <assert_post_action>
   27c06:	293f      	cmp	r1, #63	; 0x3f
   27c08:	d90a      	bls.n	27c20 <k_poll_event_init+0x38>
   27c0a:	4914      	ldr	r1, [pc, #80]	; (27c5c <k_poll_event_init+0x74>)
   27c0c:	232f      	movs	r3, #47	; 0x2f
   27c0e:	4a10      	ldr	r2, [pc, #64]	; (27c50 <k_poll_event_init+0x68>)
   27c10:	4810      	ldr	r0, [pc, #64]	; (27c54 <k_poll_event_init+0x6c>)
   27c12:	f003 f8d1 	bl	2adb8 <assert_print>
   27c16:	4812      	ldr	r0, [pc, #72]	; (27c60 <k_poll_event_init+0x78>)
   27c18:	f003 f8ce 	bl	2adb8 <assert_print>
   27c1c:	212f      	movs	r1, #47	; 0x2f
   27c1e:	e7ef      	b.n	27c00 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   27c20:	b953      	cbnz	r3, 27c38 <k_poll_event_init+0x50>
   27c22:	4910      	ldr	r1, [pc, #64]	; (27c64 <k_poll_event_init+0x7c>)
   27c24:	2330      	movs	r3, #48	; 0x30
   27c26:	4a0a      	ldr	r2, [pc, #40]	; (27c50 <k_poll_event_init+0x68>)
   27c28:	480a      	ldr	r0, [pc, #40]	; (27c54 <k_poll_event_init+0x6c>)
   27c2a:	f003 f8c5 	bl	2adb8 <assert_print>
   27c2e:	480e      	ldr	r0, [pc, #56]	; (27c68 <k_poll_event_init+0x80>)
   27c30:	f003 f8c2 	bl	2adb8 <assert_print>
   27c34:	2130      	movs	r1, #48	; 0x30
   27c36:	e7e3      	b.n	27c00 <k_poll_event_init+0x18>
	event->poller = NULL;
   27c38:	6082      	str	r2, [r0, #8]
	event->type = type;
   27c3a:	0209      	lsls	r1, r1, #8
   27c3c:	7b02      	ldrb	r2, [r0, #12]
   27c3e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   27c42:	4311      	orrs	r1, r2
	event->obj = obj;
   27c44:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   27c48:	bd08      	pop	{r3, pc}
   27c4a:	bf00      	nop
   27c4c:	0003be00 	.word	0x0003be00
   27c50:	0003bce8 	.word	0x0003bce8
   27c54:	00033bc2 	.word	0x00033bc2
   27c58:	0003be20 	.word	0x0003be20
   27c5c:	0003be46 	.word	0x0003be46
   27c60:	0003be6a 	.word	0x0003be6a
   27c64:	0003be7a 	.word	0x0003be7a
   27c68:	0003be8d 	.word	0x0003be8d

00027c6c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c70:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   27c72:	4b5c      	ldr	r3, [pc, #368]	; (27de4 <z_impl_k_poll+0x178>)
{
   27c74:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   27c76:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   27c7a:	2301      	movs	r3, #1
{
   27c7c:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   27c7e:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   27c82:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   27c86:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   27c8a:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   27c8e:	f1bb 0f00 	cmp.w	fp, #0
   27c92:	d00e      	beq.n	27cb2 <z_impl_k_poll+0x46>
   27c94:	4954      	ldr	r1, [pc, #336]	; (27de8 <z_impl_k_poll+0x17c>)
   27c96:	f240 132d 	movw	r3, #301	; 0x12d
   27c9a:	4a54      	ldr	r2, [pc, #336]	; (27dec <z_impl_k_poll+0x180>)
   27c9c:	4854      	ldr	r0, [pc, #336]	; (27df0 <z_impl_k_poll+0x184>)
   27c9e:	f003 f88b 	bl	2adb8 <assert_print>
   27ca2:	4854      	ldr	r0, [pc, #336]	; (27df4 <z_impl_k_poll+0x188>)
   27ca4:	f003 f888 	bl	2adb8 <assert_print>
   27ca8:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   27cac:	484f      	ldr	r0, [pc, #316]	; (27dec <z_impl_k_poll+0x180>)
   27cae:	f003 f87c 	bl	2adaa <assert_post_action>
   27cb2:	b960      	cbnz	r0, 27cce <z_impl_k_poll+0x62>
   27cb4:	4950      	ldr	r1, [pc, #320]	; (27df8 <z_impl_k_poll+0x18c>)
   27cb6:	f44f 7397 	mov.w	r3, #302	; 0x12e
   27cba:	4a4c      	ldr	r2, [pc, #304]	; (27dec <z_impl_k_poll+0x180>)
   27cbc:	484c      	ldr	r0, [pc, #304]	; (27df0 <z_impl_k_poll+0x184>)
   27cbe:	f003 f87b 	bl	2adb8 <assert_print>
   27cc2:	484e      	ldr	r0, [pc, #312]	; (27dfc <z_impl_k_poll+0x190>)
   27cc4:	f003 f878 	bl	2adb8 <assert_print>
   27cc8:	f44f 7197 	mov.w	r1, #302	; 0x12e
   27ccc:	e7ee      	b.n	27cac <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   27cce:	2900      	cmp	r1, #0
   27cd0:	da0c      	bge.n	27cec <z_impl_k_poll+0x80>
   27cd2:	494b      	ldr	r1, [pc, #300]	; (27e00 <z_impl_k_poll+0x194>)
   27cd4:	f240 132f 	movw	r3, #303	; 0x12f
   27cd8:	4a44      	ldr	r2, [pc, #272]	; (27dec <z_impl_k_poll+0x180>)
   27cda:	4845      	ldr	r0, [pc, #276]	; (27df0 <z_impl_k_poll+0x184>)
   27cdc:	f003 f86c 	bl	2adb8 <assert_print>
   27ce0:	4848      	ldr	r0, [pc, #288]	; (27e04 <z_impl_k_poll+0x198>)
   27ce2:	f003 f869 	bl	2adb8 <assert_print>
   27ce6:	f240 112f 	movw	r1, #303	; 0x12f
   27cea:	e7df      	b.n	27cac <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   27cec:	ea57 0306 	orrs.w	r3, r7, r6
   27cf0:	bf0c      	ite	eq
   27cf2:	2301      	moveq	r3, #1
   27cf4:	2300      	movne	r3, #0
   27cf6:	f7ff fda5 	bl	27844 <register_events>
   27cfa:	4681      	mov	r9, r0
   27cfc:	f04f 0320 	mov.w	r3, #32
   27d00:	f3ef 8a11 	mrs	sl, BASEPRI
   27d04:	f383 8812 	msr	BASEPRI_MAX, r3
   27d08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d0c:	483e      	ldr	r0, [pc, #248]	; (27e08 <z_impl_k_poll+0x19c>)
   27d0e:	f7fc ff87 	bl	24c20 <z_spin_lock_valid>
   27d12:	b960      	cbnz	r0, 27d2e <z_impl_k_poll+0xc2>
   27d14:	2394      	movs	r3, #148	; 0x94
   27d16:	4a3d      	ldr	r2, [pc, #244]	; (27e0c <z_impl_k_poll+0x1a0>)
   27d18:	493d      	ldr	r1, [pc, #244]	; (27e10 <z_impl_k_poll+0x1a4>)
   27d1a:	4835      	ldr	r0, [pc, #212]	; (27df0 <z_impl_k_poll+0x184>)
   27d1c:	f003 f84c 	bl	2adb8 <assert_print>
   27d20:	4939      	ldr	r1, [pc, #228]	; (27e08 <z_impl_k_poll+0x19c>)
   27d22:	483c      	ldr	r0, [pc, #240]	; (27e14 <z_impl_k_poll+0x1a8>)
   27d24:	f003 f848 	bl	2adb8 <assert_print>
   27d28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d2a:	4838      	ldr	r0, [pc, #224]	; (27e0c <z_impl_k_poll+0x1a0>)
   27d2c:	e7bf      	b.n	27cae <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   27d2e:	4836      	ldr	r0, [pc, #216]	; (27e08 <z_impl_k_poll+0x19c>)
   27d30:	f7fc ff92 	bl	24c58 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   27d34:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   27d38:	b9e4      	cbnz	r4, 27d74 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   27d3a:	4628      	mov	r0, r5
   27d3c:	4652      	mov	r2, sl
   27d3e:	4649      	mov	r1, r9
   27d40:	f7ff fe8e 	bl	27a60 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d44:	4830      	ldr	r0, [pc, #192]	; (27e08 <z_impl_k_poll+0x19c>)
   27d46:	f7fc ff79 	bl	24c3c <z_spin_unlock_valid>
   27d4a:	b958      	cbnz	r0, 27d64 <z_impl_k_poll+0xf8>
   27d4c:	23c2      	movs	r3, #194	; 0xc2
   27d4e:	4a2f      	ldr	r2, [pc, #188]	; (27e0c <z_impl_k_poll+0x1a0>)
   27d50:	4931      	ldr	r1, [pc, #196]	; (27e18 <z_impl_k_poll+0x1ac>)
   27d52:	4827      	ldr	r0, [pc, #156]	; (27df0 <z_impl_k_poll+0x184>)
   27d54:	f003 f830 	bl	2adb8 <assert_print>
   27d58:	492b      	ldr	r1, [pc, #172]	; (27e08 <z_impl_k_poll+0x19c>)
   27d5a:	4830      	ldr	r0, [pc, #192]	; (27e1c <z_impl_k_poll+0x1b0>)
   27d5c:	f003 f82c 	bl	2adb8 <assert_print>
   27d60:	21c2      	movs	r1, #194	; 0xc2
   27d62:	e7e2      	b.n	27d2a <z_impl_k_poll+0xbe>
	__asm__ volatile(
   27d64:	f38a 8811 	msr	BASEPRI, sl
   27d68:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   27d6c:	4620      	mov	r0, r4
   27d6e:	b003      	add	sp, #12
   27d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27d74:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   27d78:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27d7c:	d10b      	bne.n	27d96 <z_impl_k_poll+0x12a>
   27d7e:	4822      	ldr	r0, [pc, #136]	; (27e08 <z_impl_k_poll+0x19c>)
   27d80:	f7fc ff5c 	bl	24c3c <z_spin_unlock_valid>
   27d84:	2800      	cmp	r0, #0
   27d86:	d0e1      	beq.n	27d4c <z_impl_k_poll+0xe0>
   27d88:	f38a 8811 	msr	BASEPRI, sl
   27d8c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   27d90:	f06f 040a 	mvn.w	r4, #10
   27d94:	e7ea      	b.n	27d6c <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   27d96:	4651      	mov	r1, sl
   27d98:	e9cd 7600 	strd	r7, r6, [sp]
   27d9c:	4a20      	ldr	r2, [pc, #128]	; (27e20 <z_impl_k_poll+0x1b4>)
   27d9e:	481a      	ldr	r0, [pc, #104]	; (27e08 <z_impl_k_poll+0x19c>)
   27da0:	f7fe fc36 	bl	26610 <z_pend_curr>
   27da4:	4604      	mov	r4, r0
	__asm__ volatile(
   27da6:	f04f 0320 	mov.w	r3, #32
   27daa:	f3ef 8611 	mrs	r6, BASEPRI
   27dae:	f383 8812 	msr	BASEPRI_MAX, r3
   27db2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27db6:	4814      	ldr	r0, [pc, #80]	; (27e08 <z_impl_k_poll+0x19c>)
   27db8:	f7fc ff32 	bl	24c20 <z_spin_lock_valid>
   27dbc:	2800      	cmp	r0, #0
   27dbe:	d0a9      	beq.n	27d14 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   27dc0:	4811      	ldr	r0, [pc, #68]	; (27e08 <z_impl_k_poll+0x19c>)
   27dc2:	f7fc ff49 	bl	24c58 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   27dc6:	4628      	mov	r0, r5
   27dc8:	4632      	mov	r2, r6
   27dca:	4649      	mov	r1, r9
   27dcc:	f7ff fe48 	bl	27a60 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27dd0:	480d      	ldr	r0, [pc, #52]	; (27e08 <z_impl_k_poll+0x19c>)
   27dd2:	f7fc ff33 	bl	24c3c <z_spin_unlock_valid>
   27dd6:	2800      	cmp	r0, #0
   27dd8:	d0b8      	beq.n	27d4c <z_impl_k_poll+0xe0>
	__asm__ volatile(
   27dda:	f386 8811 	msr	BASEPRI, r6
   27dde:	f3bf 8f6f 	isb	sy
	return swap_rc;
   27de2:	e7c3      	b.n	27d6c <z_impl_k_poll+0x100>
   27de4:	2000eb4c 	.word	0x2000eb4c
   27de8:	0003b6d8 	.word	0x0003b6d8
   27dec:	0003bce8 	.word	0x0003bce8
   27df0:	00033bc2 	.word	0x00033bc2
   27df4:	00034662 	.word	0x00034662
   27df8:	0003bea7 	.word	0x0003bea7
   27dfc:	0003bebd 	.word	0x0003bebd
   27e00:	0003becc 	.word	0x0003becc
   27e04:	0003bedc 	.word	0x0003bedc
   27e08:	2000eba0 	.word	0x2000eba0
   27e0c:	000340d9 	.word	0x000340d9
   27e10:	00034132 	.word	0x00034132
   27e14:	00034147 	.word	0x00034147
   27e18:	00034106 	.word	0x00034106
   27e1c:	0003411d 	.word	0x0003411d
   27e20:	2000ca54 	.word	0x2000ca54

00027e24 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   27e24:	b570      	push	{r4, r5, r6, lr}
   27e26:	4604      	mov	r4, r0
   27e28:	460d      	mov	r5, r1
	__asm__ volatile(
   27e2a:	f04f 0320 	mov.w	r3, #32
   27e2e:	f3ef 8611 	mrs	r6, BASEPRI
   27e32:	f383 8812 	msr	BASEPRI_MAX, r3
   27e36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e3a:	4820      	ldr	r0, [pc, #128]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27e3c:	f7fc fef0 	bl	24c20 <z_spin_lock_valid>
   27e40:	b968      	cbnz	r0, 27e5e <z_impl_k_poll_signal_raise+0x3a>
   27e42:	2394      	movs	r3, #148	; 0x94
   27e44:	4a1e      	ldr	r2, [pc, #120]	; (27ec0 <z_impl_k_poll_signal_raise+0x9c>)
   27e46:	491f      	ldr	r1, [pc, #124]	; (27ec4 <z_impl_k_poll_signal_raise+0xa0>)
   27e48:	481f      	ldr	r0, [pc, #124]	; (27ec8 <z_impl_k_poll_signal_raise+0xa4>)
   27e4a:	f002 ffb5 	bl	2adb8 <assert_print>
   27e4e:	491b      	ldr	r1, [pc, #108]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27e50:	481e      	ldr	r0, [pc, #120]	; (27ecc <z_impl_k_poll_signal_raise+0xa8>)
   27e52:	f002 ffb1 	bl	2adb8 <assert_print>
   27e56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e58:	4819      	ldr	r0, [pc, #100]	; (27ec0 <z_impl_k_poll_signal_raise+0x9c>)
   27e5a:	f002 ffa6 	bl	2adaa <assert_post_action>
	z_spin_lock_set_owner(l);
   27e5e:	4817      	ldr	r0, [pc, #92]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27e60:	f7fc fefa 	bl	24c58 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   27e64:	2101      	movs	r1, #1
	return list->head == list;
   27e66:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   27e68:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27e6a:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   27e6c:	60a1      	str	r1, [r4, #8]
   27e6e:	d10f      	bne.n	27e90 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e70:	4812      	ldr	r0, [pc, #72]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27e72:	f7fc fee3 	bl	24c3c <z_spin_unlock_valid>
   27e76:	b9d8      	cbnz	r0, 27eb0 <z_impl_k_poll_signal_raise+0x8c>
   27e78:	23c2      	movs	r3, #194	; 0xc2
   27e7a:	4a11      	ldr	r2, [pc, #68]	; (27ec0 <z_impl_k_poll_signal_raise+0x9c>)
   27e7c:	4914      	ldr	r1, [pc, #80]	; (27ed0 <z_impl_k_poll_signal_raise+0xac>)
   27e7e:	4812      	ldr	r0, [pc, #72]	; (27ec8 <z_impl_k_poll_signal_raise+0xa4>)
   27e80:	f002 ff9a 	bl	2adb8 <assert_print>
   27e84:	490d      	ldr	r1, [pc, #52]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27e86:	4813      	ldr	r0, [pc, #76]	; (27ed4 <z_impl_k_poll_signal_raise+0xb0>)
   27e88:	f002 ff96 	bl	2adb8 <assert_print>
   27e8c:	21c2      	movs	r1, #194	; 0xc2
   27e8e:	e7e3      	b.n	27e58 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   27e90:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27e94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27e96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27e98:	2300      	movs	r3, #0
	node->prev = NULL;
   27e9a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27e9e:	f008 fc23 	bl	306e8 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   27ea2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27ea4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   27ea6:	4805      	ldr	r0, [pc, #20]	; (27ebc <z_impl_k_poll_signal_raise+0x98>)
   27ea8:	f7fe f8f6 	bl	26098 <z_reschedule>
	return rc;
}
   27eac:	4620      	mov	r0, r4
   27eae:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   27eb0:	f386 8811 	msr	BASEPRI, r6
   27eb4:	f3bf 8f6f 	isb	sy
		return 0;
   27eb8:	2400      	movs	r4, #0
   27eba:	e7f7      	b.n	27eac <z_impl_k_poll_signal_raise+0x88>
   27ebc:	2000eba0 	.word	0x2000eba0
   27ec0:	000340d9 	.word	0x000340d9
   27ec4:	00034132 	.word	0x00034132
   27ec8:	00033bc2 	.word	0x00033bc2
   27ecc:	00034147 	.word	0x00034147
   27ed0:	00034106 	.word	0x00034106
   27ed4:	0003411d 	.word	0x0003411d

00027ed8 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   27ed8:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   27eda:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   27ede:	4606      	mov	r6, r0
   27ee0:	460d      	mov	r5, r1
   27ee2:	d220      	bcs.n	27f26 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   27ee4:	f04f 0800 	mov.w	r8, #0
   27ee8:	f04f 0900 	mov.w	r9, #0
   27eec:	f041 0104 	orr.w	r1, r1, #4
   27ef0:	e9cd 8900 	strd	r8, r9, [sp]
   27ef4:	f7fc fb90 	bl	24618 <k_heap_aligned_alloc>
	if (mem == NULL) {
   27ef8:	4604      	mov	r4, r0
   27efa:	b1a0      	cbz	r0, 27f26 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   27efc:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   27f00:	b195      	cbz	r5, 27f28 <z_heap_aligned_alloc+0x50>
   27f02:	1e6b      	subs	r3, r5, #1
   27f04:	421c      	tst	r4, r3
   27f06:	d00f      	beq.n	27f28 <z_heap_aligned_alloc+0x50>
   27f08:	2325      	movs	r3, #37	; 0x25
   27f0a:	4a09      	ldr	r2, [pc, #36]	; (27f30 <z_heap_aligned_alloc+0x58>)
   27f0c:	4909      	ldr	r1, [pc, #36]	; (27f34 <z_heap_aligned_alloc+0x5c>)
   27f0e:	480a      	ldr	r0, [pc, #40]	; (27f38 <z_heap_aligned_alloc+0x60>)
   27f10:	f002 ff52 	bl	2adb8 <assert_print>
   27f14:	4621      	mov	r1, r4
   27f16:	4809      	ldr	r0, [pc, #36]	; (27f3c <z_heap_aligned_alloc+0x64>)
   27f18:	462a      	mov	r2, r5
   27f1a:	f002 ff4d 	bl	2adb8 <assert_print>
   27f1e:	2125      	movs	r1, #37	; 0x25
   27f20:	4803      	ldr	r0, [pc, #12]	; (27f30 <z_heap_aligned_alloc+0x58>)
   27f22:	f002 ff42 	bl	2adaa <assert_post_action>
		return NULL;
   27f26:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   27f28:	4620      	mov	r0, r4
   27f2a:	b002      	add	sp, #8
   27f2c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   27f30:	0003bee9 	.word	0x0003bee9
   27f34:	0003bf0d 	.word	0x0003bf0d
   27f38:	00033bc2 	.word	0x00033bc2
   27f3c:	0003bf3f 	.word	0x0003bf3f

00027f40 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   27f40:	2803      	cmp	r0, #3
{
   27f42:	460a      	mov	r2, r1
   27f44:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   27f46:	d901      	bls.n	27f4c <k_aligned_alloc+0xc>
   27f48:	0783      	lsls	r3, r0, #30
   27f4a:	d00c      	beq.n	27f66 <k_aligned_alloc+0x26>
   27f4c:	4910      	ldr	r1, [pc, #64]	; (27f90 <k_aligned_alloc+0x50>)
   27f4e:	2342      	movs	r3, #66	; 0x42
   27f50:	4a10      	ldr	r2, [pc, #64]	; (27f94 <k_aligned_alloc+0x54>)
   27f52:	4811      	ldr	r0, [pc, #68]	; (27f98 <k_aligned_alloc+0x58>)
   27f54:	f002 ff30 	bl	2adb8 <assert_print>
   27f58:	4810      	ldr	r0, [pc, #64]	; (27f9c <k_aligned_alloc+0x5c>)
   27f5a:	f002 ff2d 	bl	2adb8 <assert_print>
   27f5e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   27f60:	480c      	ldr	r0, [pc, #48]	; (27f94 <k_aligned_alloc+0x54>)
   27f62:	f002 ff22 	bl	2adaa <assert_post_action>
   27f66:	1e43      	subs	r3, r0, #1
   27f68:	4203      	tst	r3, r0
   27f6a:	d00a      	beq.n	27f82 <k_aligned_alloc+0x42>
   27f6c:	490c      	ldr	r1, [pc, #48]	; (27fa0 <k_aligned_alloc+0x60>)
   27f6e:	2346      	movs	r3, #70	; 0x46
   27f70:	4a08      	ldr	r2, [pc, #32]	; (27f94 <k_aligned_alloc+0x54>)
   27f72:	4809      	ldr	r0, [pc, #36]	; (27f98 <k_aligned_alloc+0x58>)
   27f74:	f002 ff20 	bl	2adb8 <assert_print>
   27f78:	480a      	ldr	r0, [pc, #40]	; (27fa4 <k_aligned_alloc+0x64>)
   27f7a:	f002 ff1d 	bl	2adb8 <assert_print>
   27f7e:	2146      	movs	r1, #70	; 0x46
   27f80:	e7ee      	b.n	27f60 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   27f82:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   27f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   27f88:	4807      	ldr	r0, [pc, #28]	; (27fa8 <k_aligned_alloc+0x68>)
   27f8a:	f7ff bfa5 	b.w	27ed8 <z_heap_aligned_alloc>
   27f8e:	bf00      	nop
   27f90:	0003bf67 	.word	0x0003bf67
   27f94:	0003bee9 	.word	0x0003bee9
   27f98:	00033bc2 	.word	0x00033bc2
   27f9c:	0003bfa4 	.word	0x0003bfa4
   27fa0:	00033f43 	.word	0x00033f43
   27fa4:	00033f5e 	.word	0x00033f5e
   27fa8:	2000cdc0 	.word	0x2000cdc0

00027fac <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   27fac:	4b01      	ldr	r3, [pc, #4]	; (27fb4 <k_thread_system_pool_assign+0x8>)
   27fae:	6743      	str	r3, [r0, #116]	; 0x74
}
   27fb0:	4770      	bx	lr
   27fb2:	bf00      	nop
   27fb4:	2000cdc0 	.word	0x2000cdc0

00027fb8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   27fb8:	b538      	push	{r3, r4, r5, lr}
   27fba:	4604      	mov	r4, r0
   27fbc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   27fbe:	f008 fa0e 	bl	303de <k_is_in_isr>
   27fc2:	b920      	cbnz	r0, 27fce <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   27fc4:	4b06      	ldr	r3, [pc, #24]	; (27fe0 <z_thread_aligned_alloc+0x28>)
   27fc6:	689b      	ldr	r3, [r3, #8]
   27fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   27fca:	b90b      	cbnz	r3, 27fd0 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   27fcc:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   27fce:	4b05      	ldr	r3, [pc, #20]	; (27fe4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   27fd0:	462a      	mov	r2, r5
   27fd2:	4621      	mov	r1, r4
   27fd4:	4618      	mov	r0, r3
}
   27fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   27fda:	f7ff bf7d 	b.w	27ed8 <z_heap_aligned_alloc>
   27fde:	bf00      	nop
   27fe0:	2000eb4c 	.word	0x2000eb4c
   27fe4:	2000cdc0 	.word	0x2000cdc0

00027fe8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   27fe8:	4801      	ldr	r0, [pc, #4]	; (27ff0 <boot_banner+0x8>)
   27fea:	f002 bd08 	b.w	2a9fe <printk>
   27fee:	bf00      	nop
   27ff0:	0003bfd1 	.word	0x0003bfd1

00027ff4 <malloc>:
   27ff4:	4b02      	ldr	r3, [pc, #8]	; (28000 <malloc+0xc>)
   27ff6:	4601      	mov	r1, r0
   27ff8:	6818      	ldr	r0, [r3, #0]
   27ffa:	f000 b855 	b.w	280a8 <_malloc_r>
   27ffe:	bf00      	nop
   28000:	2000ca5c 	.word	0x2000ca5c

00028004 <free>:
   28004:	4b02      	ldr	r3, [pc, #8]	; (28010 <free+0xc>)
   28006:	4601      	mov	r1, r0
   28008:	6818      	ldr	r0, [r3, #0]
   2800a:	f000 b803 	b.w	28014 <_free_r>
   2800e:	bf00      	nop
   28010:	2000ca5c 	.word	0x2000ca5c

00028014 <_free_r>:
   28014:	b538      	push	{r3, r4, r5, lr}
   28016:	4605      	mov	r5, r0
   28018:	2900      	cmp	r1, #0
   2801a:	d041      	beq.n	280a0 <_free_r+0x8c>
   2801c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28020:	1f0c      	subs	r4, r1, #4
   28022:	2b00      	cmp	r3, #0
   28024:	bfb8      	it	lt
   28026:	18e4      	addlt	r4, r4, r3
   28028:	f001 f89a 	bl	29160 <__malloc_lock>
   2802c:	4a1d      	ldr	r2, [pc, #116]	; (280a4 <_free_r+0x90>)
   2802e:	6813      	ldr	r3, [r2, #0]
   28030:	b933      	cbnz	r3, 28040 <_free_r+0x2c>
   28032:	6063      	str	r3, [r4, #4]
   28034:	6014      	str	r4, [r2, #0]
   28036:	4628      	mov	r0, r5
   28038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2803c:	f001 b896 	b.w	2916c <__malloc_unlock>
   28040:	42a3      	cmp	r3, r4
   28042:	d908      	bls.n	28056 <_free_r+0x42>
   28044:	6820      	ldr	r0, [r4, #0]
   28046:	1821      	adds	r1, r4, r0
   28048:	428b      	cmp	r3, r1
   2804a:	bf01      	itttt	eq
   2804c:	6819      	ldreq	r1, [r3, #0]
   2804e:	685b      	ldreq	r3, [r3, #4]
   28050:	1809      	addeq	r1, r1, r0
   28052:	6021      	streq	r1, [r4, #0]
   28054:	e7ed      	b.n	28032 <_free_r+0x1e>
   28056:	461a      	mov	r2, r3
   28058:	685b      	ldr	r3, [r3, #4]
   2805a:	b10b      	cbz	r3, 28060 <_free_r+0x4c>
   2805c:	42a3      	cmp	r3, r4
   2805e:	d9fa      	bls.n	28056 <_free_r+0x42>
   28060:	6811      	ldr	r1, [r2, #0]
   28062:	1850      	adds	r0, r2, r1
   28064:	42a0      	cmp	r0, r4
   28066:	d10b      	bne.n	28080 <_free_r+0x6c>
   28068:	6820      	ldr	r0, [r4, #0]
   2806a:	4401      	add	r1, r0
   2806c:	1850      	adds	r0, r2, r1
   2806e:	6011      	str	r1, [r2, #0]
   28070:	4283      	cmp	r3, r0
   28072:	d1e0      	bne.n	28036 <_free_r+0x22>
   28074:	6818      	ldr	r0, [r3, #0]
   28076:	685b      	ldr	r3, [r3, #4]
   28078:	4408      	add	r0, r1
   2807a:	6053      	str	r3, [r2, #4]
   2807c:	6010      	str	r0, [r2, #0]
   2807e:	e7da      	b.n	28036 <_free_r+0x22>
   28080:	d902      	bls.n	28088 <_free_r+0x74>
   28082:	230c      	movs	r3, #12
   28084:	602b      	str	r3, [r5, #0]
   28086:	e7d6      	b.n	28036 <_free_r+0x22>
   28088:	6820      	ldr	r0, [r4, #0]
   2808a:	1821      	adds	r1, r4, r0
   2808c:	428b      	cmp	r3, r1
   2808e:	bf02      	ittt	eq
   28090:	6819      	ldreq	r1, [r3, #0]
   28092:	685b      	ldreq	r3, [r3, #4]
   28094:	1809      	addeq	r1, r1, r0
   28096:	6063      	str	r3, [r4, #4]
   28098:	bf08      	it	eq
   2809a:	6021      	streq	r1, [r4, #0]
   2809c:	6054      	str	r4, [r2, #4]
   2809e:	e7ca      	b.n	28036 <_free_r+0x22>
   280a0:	bd38      	pop	{r3, r4, r5, pc}
   280a2:	bf00      	nop
   280a4:	2000eba8 	.word	0x2000eba8

000280a8 <_malloc_r>:
   280a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   280aa:	1ccd      	adds	r5, r1, #3
   280ac:	4606      	mov	r6, r0
   280ae:	f025 0503 	bic.w	r5, r5, #3
   280b2:	3508      	adds	r5, #8
   280b4:	2d0c      	cmp	r5, #12
   280b6:	bf38      	it	cc
   280b8:	250c      	movcc	r5, #12
   280ba:	2d00      	cmp	r5, #0
   280bc:	db01      	blt.n	280c2 <_malloc_r+0x1a>
   280be:	42a9      	cmp	r1, r5
   280c0:	d903      	bls.n	280ca <_malloc_r+0x22>
   280c2:	230c      	movs	r3, #12
   280c4:	6033      	str	r3, [r6, #0]
   280c6:	2000      	movs	r0, #0
   280c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   280ca:	f001 f849 	bl	29160 <__malloc_lock>
   280ce:	4921      	ldr	r1, [pc, #132]	; (28154 <_malloc_r+0xac>)
   280d0:	680a      	ldr	r2, [r1, #0]
   280d2:	4614      	mov	r4, r2
   280d4:	b99c      	cbnz	r4, 280fe <_malloc_r+0x56>
   280d6:	4f20      	ldr	r7, [pc, #128]	; (28158 <_malloc_r+0xb0>)
   280d8:	683b      	ldr	r3, [r7, #0]
   280da:	b923      	cbnz	r3, 280e6 <_malloc_r+0x3e>
   280dc:	4621      	mov	r1, r4
   280de:	4630      	mov	r0, r6
   280e0:	f000 fba8 	bl	28834 <_sbrk_r>
   280e4:	6038      	str	r0, [r7, #0]
   280e6:	4629      	mov	r1, r5
   280e8:	4630      	mov	r0, r6
   280ea:	f000 fba3 	bl	28834 <_sbrk_r>
   280ee:	1c43      	adds	r3, r0, #1
   280f0:	d123      	bne.n	2813a <_malloc_r+0x92>
   280f2:	230c      	movs	r3, #12
   280f4:	4630      	mov	r0, r6
   280f6:	6033      	str	r3, [r6, #0]
   280f8:	f001 f838 	bl	2916c <__malloc_unlock>
   280fc:	e7e3      	b.n	280c6 <_malloc_r+0x1e>
   280fe:	6823      	ldr	r3, [r4, #0]
   28100:	1b5b      	subs	r3, r3, r5
   28102:	d417      	bmi.n	28134 <_malloc_r+0x8c>
   28104:	2b0b      	cmp	r3, #11
   28106:	d903      	bls.n	28110 <_malloc_r+0x68>
   28108:	6023      	str	r3, [r4, #0]
   2810a:	441c      	add	r4, r3
   2810c:	6025      	str	r5, [r4, #0]
   2810e:	e004      	b.n	2811a <_malloc_r+0x72>
   28110:	6863      	ldr	r3, [r4, #4]
   28112:	42a2      	cmp	r2, r4
   28114:	bf0c      	ite	eq
   28116:	600b      	streq	r3, [r1, #0]
   28118:	6053      	strne	r3, [r2, #4]
   2811a:	4630      	mov	r0, r6
   2811c:	f001 f826 	bl	2916c <__malloc_unlock>
   28120:	f104 000b 	add.w	r0, r4, #11
   28124:	1d23      	adds	r3, r4, #4
   28126:	f020 0007 	bic.w	r0, r0, #7
   2812a:	1ac2      	subs	r2, r0, r3
   2812c:	bf1c      	itt	ne
   2812e:	1a1b      	subne	r3, r3, r0
   28130:	50a3      	strne	r3, [r4, r2]
   28132:	e7c9      	b.n	280c8 <_malloc_r+0x20>
   28134:	4622      	mov	r2, r4
   28136:	6864      	ldr	r4, [r4, #4]
   28138:	e7cc      	b.n	280d4 <_malloc_r+0x2c>
   2813a:	1cc4      	adds	r4, r0, #3
   2813c:	f024 0403 	bic.w	r4, r4, #3
   28140:	42a0      	cmp	r0, r4
   28142:	d0e3      	beq.n	2810c <_malloc_r+0x64>
   28144:	1a21      	subs	r1, r4, r0
   28146:	4630      	mov	r0, r6
   28148:	f000 fb74 	bl	28834 <_sbrk_r>
   2814c:	3001      	adds	r0, #1
   2814e:	d1dd      	bne.n	2810c <_malloc_r+0x64>
   28150:	e7cf      	b.n	280f2 <_malloc_r+0x4a>
   28152:	bf00      	nop
   28154:	2000eba8 	.word	0x2000eba8
   28158:	2000eba4 	.word	0x2000eba4

0002815c <_printf_float>:
   2815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28160:	b091      	sub	sp, #68	; 0x44
   28162:	460c      	mov	r4, r1
   28164:	4616      	mov	r6, r2
   28166:	461f      	mov	r7, r3
   28168:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2816c:	4605      	mov	r5, r0
   2816e:	f000 ffe1 	bl	29134 <_localeconv_r>
   28172:	6803      	ldr	r3, [r0, #0]
   28174:	4618      	mov	r0, r3
   28176:	9308      	str	r3, [sp, #32]
   28178:	f7e1 f853 	bl	9222 <strlen>
   2817c:	2300      	movs	r3, #0
   2817e:	9009      	str	r0, [sp, #36]	; 0x24
   28180:	930e      	str	r3, [sp, #56]	; 0x38
   28182:	f8d8 3000 	ldr.w	r3, [r8]
   28186:	f894 a018 	ldrb.w	sl, [r4, #24]
   2818a:	3307      	adds	r3, #7
   2818c:	f8d4 b000 	ldr.w	fp, [r4]
   28190:	f023 0307 	bic.w	r3, r3, #7
   28194:	f103 0208 	add.w	r2, r3, #8
   28198:	f8c8 2000 	str.w	r2, [r8]
   2819c:	f04f 32ff 	mov.w	r2, #4294967295
   281a0:	e9d3 8900 	ldrd	r8, r9, [r3]
   281a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   281a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   281ac:	930b      	str	r3, [sp, #44]	; 0x2c
   281ae:	4b9d      	ldr	r3, [pc, #628]	; (28424 <_printf_float+0x2c8>)
   281b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   281b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   281b8:	f7e0 fcd0 	bl	8b5c <__aeabi_dcmpun>
   281bc:	bb70      	cbnz	r0, 2821c <_printf_float+0xc0>
   281be:	f04f 32ff 	mov.w	r2, #4294967295
   281c2:	4b98      	ldr	r3, [pc, #608]	; (28424 <_printf_float+0x2c8>)
   281c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   281c8:	f7e0 fcaa 	bl	8b20 <__aeabi_dcmple>
   281cc:	bb30      	cbnz	r0, 2821c <_printf_float+0xc0>
   281ce:	2200      	movs	r2, #0
   281d0:	2300      	movs	r3, #0
   281d2:	4640      	mov	r0, r8
   281d4:	4649      	mov	r1, r9
   281d6:	f7e0 fc99 	bl	8b0c <__aeabi_dcmplt>
   281da:	b110      	cbz	r0, 281e2 <_printf_float+0x86>
   281dc:	232d      	movs	r3, #45	; 0x2d
   281de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   281e2:	4a91      	ldr	r2, [pc, #580]	; (28428 <_printf_float+0x2cc>)
   281e4:	4b91      	ldr	r3, [pc, #580]	; (2842c <_printf_float+0x2d0>)
   281e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   281ea:	bf94      	ite	ls
   281ec:	4690      	movls	r8, r2
   281ee:	4698      	movhi	r8, r3
   281f0:	2303      	movs	r3, #3
   281f2:	f04f 0900 	mov.w	r9, #0
   281f6:	6123      	str	r3, [r4, #16]
   281f8:	f02b 0304 	bic.w	r3, fp, #4
   281fc:	6023      	str	r3, [r4, #0]
   281fe:	4633      	mov	r3, r6
   28200:	aa0f      	add	r2, sp, #60	; 0x3c
   28202:	4621      	mov	r1, r4
   28204:	4628      	mov	r0, r5
   28206:	9700      	str	r7, [sp, #0]
   28208:	f008 fbe3 	bl	309d2 <_printf_common>
   2820c:	3001      	adds	r0, #1
   2820e:	f040 8099 	bne.w	28344 <_printf_float+0x1e8>
   28212:	f04f 30ff 	mov.w	r0, #4294967295
   28216:	b011      	add	sp, #68	; 0x44
   28218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2821c:	4642      	mov	r2, r8
   2821e:	464b      	mov	r3, r9
   28220:	4640      	mov	r0, r8
   28222:	4649      	mov	r1, r9
   28224:	f7e0 fc9a 	bl	8b5c <__aeabi_dcmpun>
   28228:	b140      	cbz	r0, 2823c <_printf_float+0xe0>
   2822a:	464b      	mov	r3, r9
   2822c:	4a80      	ldr	r2, [pc, #512]	; (28430 <_printf_float+0x2d4>)
   2822e:	2b00      	cmp	r3, #0
   28230:	bfbc      	itt	lt
   28232:	232d      	movlt	r3, #45	; 0x2d
   28234:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   28238:	4b7e      	ldr	r3, [pc, #504]	; (28434 <_printf_float+0x2d8>)
   2823a:	e7d4      	b.n	281e6 <_printf_float+0x8a>
   2823c:	6863      	ldr	r3, [r4, #4]
   2823e:	1c5a      	adds	r2, r3, #1
   28240:	d129      	bne.n	28296 <_printf_float+0x13a>
   28242:	2306      	movs	r3, #6
   28244:	6063      	str	r3, [r4, #4]
   28246:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2824a:	2200      	movs	r2, #0
   2824c:	4628      	mov	r0, r5
   2824e:	6023      	str	r3, [r4, #0]
   28250:	9206      	str	r2, [sp, #24]
   28252:	aa0e      	add	r2, sp, #56	; 0x38
   28254:	e9cd a204 	strd	sl, r2, [sp, #16]
   28258:	aa0d      	add	r2, sp, #52	; 0x34
   2825a:	9203      	str	r2, [sp, #12]
   2825c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   28260:	e9cd 3201 	strd	r3, r2, [sp, #4]
   28264:	6863      	ldr	r3, [r4, #4]
   28266:	4642      	mov	r2, r8
   28268:	9300      	str	r3, [sp, #0]
   2826a:	464b      	mov	r3, r9
   2826c:	f008 fb11 	bl	30892 <__cvt>
   28270:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   28274:	4680      	mov	r8, r0
   28276:	990d      	ldr	r1, [sp, #52]	; 0x34
   28278:	d115      	bne.n	282a6 <_printf_float+0x14a>
   2827a:	1ccb      	adds	r3, r1, #3
   2827c:	db3b      	blt.n	282f6 <_printf_float+0x19a>
   2827e:	6863      	ldr	r3, [r4, #4]
   28280:	4299      	cmp	r1, r3
   28282:	dc38      	bgt.n	282f6 <_printf_float+0x19a>
   28284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28286:	4299      	cmp	r1, r3
   28288:	db55      	blt.n	28336 <_printf_float+0x1da>
   2828a:	6823      	ldr	r3, [r4, #0]
   2828c:	6121      	str	r1, [r4, #16]
   2828e:	07d8      	lsls	r0, r3, #31
   28290:	d545      	bpl.n	2831e <_printf_float+0x1c2>
   28292:	1c4b      	adds	r3, r1, #1
   28294:	e042      	b.n	2831c <_printf_float+0x1c0>
   28296:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2829a:	2a47      	cmp	r2, #71	; 0x47
   2829c:	d1d3      	bne.n	28246 <_printf_float+0xea>
   2829e:	2b00      	cmp	r3, #0
   282a0:	d1d1      	bne.n	28246 <_printf_float+0xea>
   282a2:	2301      	movs	r3, #1
   282a4:	e7ce      	b.n	28244 <_printf_float+0xe8>
   282a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   282aa:	d107      	bne.n	282bc <_printf_float+0x160>
   282ac:	1cc8      	adds	r0, r1, #3
   282ae:	db25      	blt.n	282fc <_printf_float+0x1a0>
   282b0:	6863      	ldr	r3, [r4, #4]
   282b2:	428b      	cmp	r3, r1
   282b4:	db22      	blt.n	282fc <_printf_float+0x1a0>
   282b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
   282ba:	e7e3      	b.n	28284 <_printf_float+0x128>
   282bc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   282c0:	d81f      	bhi.n	28302 <_printf_float+0x1a6>
   282c2:	3901      	subs	r1, #1
   282c4:	4652      	mov	r2, sl
   282c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   282ca:	910d      	str	r1, [sp, #52]	; 0x34
   282cc:	f008 fb48 	bl	30960 <__exponent>
   282d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   282d2:	4681      	mov	r9, r0
   282d4:	1813      	adds	r3, r2, r0
   282d6:	2a01      	cmp	r2, #1
   282d8:	6123      	str	r3, [r4, #16]
   282da:	dc02      	bgt.n	282e2 <_printf_float+0x186>
   282dc:	6822      	ldr	r2, [r4, #0]
   282de:	07d2      	lsls	r2, r2, #31
   282e0:	d501      	bpl.n	282e6 <_printf_float+0x18a>
   282e2:	3301      	adds	r3, #1
   282e4:	6123      	str	r3, [r4, #16]
   282e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   282ea:	2b00      	cmp	r3, #0
   282ec:	d087      	beq.n	281fe <_printf_float+0xa2>
   282ee:	232d      	movs	r3, #45	; 0x2d
   282f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   282f4:	e783      	b.n	281fe <_printf_float+0xa2>
   282f6:	f04f 0a65 	mov.w	sl, #101	; 0x65
   282fa:	e7e2      	b.n	282c2 <_printf_float+0x166>
   282fc:	f04f 0a45 	mov.w	sl, #69	; 0x45
   28300:	e7df      	b.n	282c2 <_printf_float+0x166>
   28302:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   28306:	d1bd      	bne.n	28284 <_printf_float+0x128>
   28308:	2900      	cmp	r1, #0
   2830a:	6863      	ldr	r3, [r4, #4]
   2830c:	dd0b      	ble.n	28326 <_printf_float+0x1ca>
   2830e:	6121      	str	r1, [r4, #16]
   28310:	b913      	cbnz	r3, 28318 <_printf_float+0x1bc>
   28312:	6822      	ldr	r2, [r4, #0]
   28314:	07d0      	lsls	r0, r2, #31
   28316:	d502      	bpl.n	2831e <_printf_float+0x1c2>
   28318:	3301      	adds	r3, #1
   2831a:	440b      	add	r3, r1
   2831c:	6123      	str	r3, [r4, #16]
   2831e:	f04f 0900 	mov.w	r9, #0
   28322:	65a1      	str	r1, [r4, #88]	; 0x58
   28324:	e7df      	b.n	282e6 <_printf_float+0x18a>
   28326:	b913      	cbnz	r3, 2832e <_printf_float+0x1d2>
   28328:	6822      	ldr	r2, [r4, #0]
   2832a:	07d2      	lsls	r2, r2, #31
   2832c:	d501      	bpl.n	28332 <_printf_float+0x1d6>
   2832e:	3302      	adds	r3, #2
   28330:	e7f4      	b.n	2831c <_printf_float+0x1c0>
   28332:	2301      	movs	r3, #1
   28334:	e7f2      	b.n	2831c <_printf_float+0x1c0>
   28336:	2900      	cmp	r1, #0
   28338:	bfd4      	ite	le
   2833a:	f1c1 0202 	rsble	r2, r1, #2
   2833e:	2201      	movgt	r2, #1
   28340:	4413      	add	r3, r2
   28342:	e7eb      	b.n	2831c <_printf_float+0x1c0>
   28344:	6823      	ldr	r3, [r4, #0]
   28346:	055a      	lsls	r2, r3, #21
   28348:	d407      	bmi.n	2835a <_printf_float+0x1fe>
   2834a:	6923      	ldr	r3, [r4, #16]
   2834c:	4642      	mov	r2, r8
   2834e:	4631      	mov	r1, r6
   28350:	4628      	mov	r0, r5
   28352:	47b8      	blx	r7
   28354:	3001      	adds	r0, #1
   28356:	d12b      	bne.n	283b0 <_printf_float+0x254>
   28358:	e75b      	b.n	28212 <_printf_float+0xb6>
   2835a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2835e:	f240 80dc 	bls.w	2851a <_printf_float+0x3be>
   28362:	2200      	movs	r2, #0
   28364:	2300      	movs	r3, #0
   28366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2836a:	f7e0 fbc5 	bl	8af8 <__aeabi_dcmpeq>
   2836e:	2800      	cmp	r0, #0
   28370:	d033      	beq.n	283da <_printf_float+0x27e>
   28372:	2301      	movs	r3, #1
   28374:	4a30      	ldr	r2, [pc, #192]	; (28438 <_printf_float+0x2dc>)
   28376:	4631      	mov	r1, r6
   28378:	4628      	mov	r0, r5
   2837a:	47b8      	blx	r7
   2837c:	3001      	adds	r0, #1
   2837e:	f43f af48 	beq.w	28212 <_printf_float+0xb6>
   28382:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   28386:	4543      	cmp	r3, r8
   28388:	db02      	blt.n	28390 <_printf_float+0x234>
   2838a:	6823      	ldr	r3, [r4, #0]
   2838c:	07d8      	lsls	r0, r3, #31
   2838e:	d50f      	bpl.n	283b0 <_printf_float+0x254>
   28390:	4631      	mov	r1, r6
   28392:	4628      	mov	r0, r5
   28394:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28398:	47b8      	blx	r7
   2839a:	3001      	adds	r0, #1
   2839c:	f43f af39 	beq.w	28212 <_printf_float+0xb6>
   283a0:	f04f 0900 	mov.w	r9, #0
   283a4:	f108 38ff 	add.w	r8, r8, #4294967295
   283a8:	f104 0a1a 	add.w	sl, r4, #26
   283ac:	45c8      	cmp	r8, r9
   283ae:	dc09      	bgt.n	283c4 <_printf_float+0x268>
   283b0:	6823      	ldr	r3, [r4, #0]
   283b2:	079b      	lsls	r3, r3, #30
   283b4:	f100 8102 	bmi.w	285bc <_printf_float+0x460>
   283b8:	68e0      	ldr	r0, [r4, #12]
   283ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   283bc:	4298      	cmp	r0, r3
   283be:	bfb8      	it	lt
   283c0:	4618      	movlt	r0, r3
   283c2:	e728      	b.n	28216 <_printf_float+0xba>
   283c4:	2301      	movs	r3, #1
   283c6:	4652      	mov	r2, sl
   283c8:	4631      	mov	r1, r6
   283ca:	4628      	mov	r0, r5
   283cc:	47b8      	blx	r7
   283ce:	3001      	adds	r0, #1
   283d0:	f43f af1f 	beq.w	28212 <_printf_float+0xb6>
   283d4:	f109 0901 	add.w	r9, r9, #1
   283d8:	e7e8      	b.n	283ac <_printf_float+0x250>
   283da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   283dc:	2b00      	cmp	r3, #0
   283de:	dc38      	bgt.n	28452 <_printf_float+0x2f6>
   283e0:	2301      	movs	r3, #1
   283e2:	4a15      	ldr	r2, [pc, #84]	; (28438 <_printf_float+0x2dc>)
   283e4:	4631      	mov	r1, r6
   283e6:	4628      	mov	r0, r5
   283e8:	47b8      	blx	r7
   283ea:	3001      	adds	r0, #1
   283ec:	f43f af11 	beq.w	28212 <_printf_float+0xb6>
   283f0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   283f4:	ea59 0303 	orrs.w	r3, r9, r3
   283f8:	d102      	bne.n	28400 <_printf_float+0x2a4>
   283fa:	6823      	ldr	r3, [r4, #0]
   283fc:	07d9      	lsls	r1, r3, #31
   283fe:	d5d7      	bpl.n	283b0 <_printf_float+0x254>
   28400:	4631      	mov	r1, r6
   28402:	4628      	mov	r0, r5
   28404:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28408:	47b8      	blx	r7
   2840a:	3001      	adds	r0, #1
   2840c:	f43f af01 	beq.w	28212 <_printf_float+0xb6>
   28410:	f04f 0a00 	mov.w	sl, #0
   28414:	f104 0b1a 	add.w	fp, r4, #26
   28418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2841a:	425b      	negs	r3, r3
   2841c:	4553      	cmp	r3, sl
   2841e:	dc0d      	bgt.n	2843c <_printf_float+0x2e0>
   28420:	464b      	mov	r3, r9
   28422:	e793      	b.n	2834c <_printf_float+0x1f0>
   28424:	7fefffff 	.word	0x7fefffff
   28428:	0003c102 	.word	0x0003c102
   2842c:	0003454b 	.word	0x0003454b
   28430:	0003c106 	.word	0x0003c106
   28434:	0003c10a 	.word	0x0003c10a
   28438:	000386dc 	.word	0x000386dc
   2843c:	2301      	movs	r3, #1
   2843e:	465a      	mov	r2, fp
   28440:	4631      	mov	r1, r6
   28442:	4628      	mov	r0, r5
   28444:	47b8      	blx	r7
   28446:	3001      	adds	r0, #1
   28448:	f43f aee3 	beq.w	28212 <_printf_float+0xb6>
   2844c:	f10a 0a01 	add.w	sl, sl, #1
   28450:	e7e2      	b.n	28418 <_printf_float+0x2bc>
   28452:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28454:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28458:	4553      	cmp	r3, sl
   2845a:	bfa8      	it	ge
   2845c:	4653      	movge	r3, sl
   2845e:	2b00      	cmp	r3, #0
   28460:	4699      	mov	r9, r3
   28462:	dc36      	bgt.n	284d2 <_printf_float+0x376>
   28464:	f04f 0b00 	mov.w	fp, #0
   28468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2846c:	f104 021a 	add.w	r2, r4, #26
   28470:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28472:	930a      	str	r3, [sp, #40]	; 0x28
   28474:	eba3 0309 	sub.w	r3, r3, r9
   28478:	455b      	cmp	r3, fp
   2847a:	dc31      	bgt.n	284e0 <_printf_float+0x384>
   2847c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2847e:	459a      	cmp	sl, r3
   28480:	dc3a      	bgt.n	284f8 <_printf_float+0x39c>
   28482:	6823      	ldr	r3, [r4, #0]
   28484:	07da      	lsls	r2, r3, #31
   28486:	d437      	bmi.n	284f8 <_printf_float+0x39c>
   28488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2848a:	ebaa 0903 	sub.w	r9, sl, r3
   2848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28490:	ebaa 0303 	sub.w	r3, sl, r3
   28494:	4599      	cmp	r9, r3
   28496:	bfa8      	it	ge
   28498:	4699      	movge	r9, r3
   2849a:	f1b9 0f00 	cmp.w	r9, #0
   2849e:	dc33      	bgt.n	28508 <_printf_float+0x3ac>
   284a0:	f04f 0800 	mov.w	r8, #0
   284a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   284a8:	f104 0b1a 	add.w	fp, r4, #26
   284ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   284ae:	ebaa 0303 	sub.w	r3, sl, r3
   284b2:	eba3 0309 	sub.w	r3, r3, r9
   284b6:	4543      	cmp	r3, r8
   284b8:	f77f af7a 	ble.w	283b0 <_printf_float+0x254>
   284bc:	2301      	movs	r3, #1
   284be:	465a      	mov	r2, fp
   284c0:	4631      	mov	r1, r6
   284c2:	4628      	mov	r0, r5
   284c4:	47b8      	blx	r7
   284c6:	3001      	adds	r0, #1
   284c8:	f43f aea3 	beq.w	28212 <_printf_float+0xb6>
   284cc:	f108 0801 	add.w	r8, r8, #1
   284d0:	e7ec      	b.n	284ac <_printf_float+0x350>
   284d2:	4642      	mov	r2, r8
   284d4:	4631      	mov	r1, r6
   284d6:	4628      	mov	r0, r5
   284d8:	47b8      	blx	r7
   284da:	3001      	adds	r0, #1
   284dc:	d1c2      	bne.n	28464 <_printf_float+0x308>
   284de:	e698      	b.n	28212 <_printf_float+0xb6>
   284e0:	2301      	movs	r3, #1
   284e2:	4631      	mov	r1, r6
   284e4:	4628      	mov	r0, r5
   284e6:	920a      	str	r2, [sp, #40]	; 0x28
   284e8:	47b8      	blx	r7
   284ea:	3001      	adds	r0, #1
   284ec:	f43f ae91 	beq.w	28212 <_printf_float+0xb6>
   284f0:	f10b 0b01 	add.w	fp, fp, #1
   284f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   284f6:	e7bb      	b.n	28470 <_printf_float+0x314>
   284f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   284fc:	4631      	mov	r1, r6
   284fe:	4628      	mov	r0, r5
   28500:	47b8      	blx	r7
   28502:	3001      	adds	r0, #1
   28504:	d1c0      	bne.n	28488 <_printf_float+0x32c>
   28506:	e684      	b.n	28212 <_printf_float+0xb6>
   28508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2850a:	464b      	mov	r3, r9
   2850c:	4631      	mov	r1, r6
   2850e:	4628      	mov	r0, r5
   28510:	4442      	add	r2, r8
   28512:	47b8      	blx	r7
   28514:	3001      	adds	r0, #1
   28516:	d1c3      	bne.n	284a0 <_printf_float+0x344>
   28518:	e67b      	b.n	28212 <_printf_float+0xb6>
   2851a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2851e:	f1ba 0f01 	cmp.w	sl, #1
   28522:	dc01      	bgt.n	28528 <_printf_float+0x3cc>
   28524:	07db      	lsls	r3, r3, #31
   28526:	d536      	bpl.n	28596 <_printf_float+0x43a>
   28528:	2301      	movs	r3, #1
   2852a:	4642      	mov	r2, r8
   2852c:	4631      	mov	r1, r6
   2852e:	4628      	mov	r0, r5
   28530:	47b8      	blx	r7
   28532:	3001      	adds	r0, #1
   28534:	f43f ae6d 	beq.w	28212 <_printf_float+0xb6>
   28538:	4631      	mov	r1, r6
   2853a:	4628      	mov	r0, r5
   2853c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28540:	47b8      	blx	r7
   28542:	3001      	adds	r0, #1
   28544:	f43f ae65 	beq.w	28212 <_printf_float+0xb6>
   28548:	2200      	movs	r2, #0
   2854a:	2300      	movs	r3, #0
   2854c:	f10a 3aff 	add.w	sl, sl, #4294967295
   28550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28554:	f7e0 fad0 	bl	8af8 <__aeabi_dcmpeq>
   28558:	b9c0      	cbnz	r0, 2858c <_printf_float+0x430>
   2855a:	4653      	mov	r3, sl
   2855c:	f108 0201 	add.w	r2, r8, #1
   28560:	4631      	mov	r1, r6
   28562:	4628      	mov	r0, r5
   28564:	47b8      	blx	r7
   28566:	3001      	adds	r0, #1
   28568:	d10c      	bne.n	28584 <_printf_float+0x428>
   2856a:	e652      	b.n	28212 <_printf_float+0xb6>
   2856c:	2301      	movs	r3, #1
   2856e:	465a      	mov	r2, fp
   28570:	4631      	mov	r1, r6
   28572:	4628      	mov	r0, r5
   28574:	47b8      	blx	r7
   28576:	3001      	adds	r0, #1
   28578:	f43f ae4b 	beq.w	28212 <_printf_float+0xb6>
   2857c:	f108 0801 	add.w	r8, r8, #1
   28580:	45d0      	cmp	r8, sl
   28582:	dbf3      	blt.n	2856c <_printf_float+0x410>
   28584:	464b      	mov	r3, r9
   28586:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2858a:	e6e0      	b.n	2834e <_printf_float+0x1f2>
   2858c:	f04f 0800 	mov.w	r8, #0
   28590:	f104 0b1a 	add.w	fp, r4, #26
   28594:	e7f4      	b.n	28580 <_printf_float+0x424>
   28596:	2301      	movs	r3, #1
   28598:	4642      	mov	r2, r8
   2859a:	e7e1      	b.n	28560 <_printf_float+0x404>
   2859c:	2301      	movs	r3, #1
   2859e:	464a      	mov	r2, r9
   285a0:	4631      	mov	r1, r6
   285a2:	4628      	mov	r0, r5
   285a4:	47b8      	blx	r7
   285a6:	3001      	adds	r0, #1
   285a8:	f43f ae33 	beq.w	28212 <_printf_float+0xb6>
   285ac:	f108 0801 	add.w	r8, r8, #1
   285b0:	68e3      	ldr	r3, [r4, #12]
   285b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   285b4:	1a5b      	subs	r3, r3, r1
   285b6:	4543      	cmp	r3, r8
   285b8:	dcf0      	bgt.n	2859c <_printf_float+0x440>
   285ba:	e6fd      	b.n	283b8 <_printf_float+0x25c>
   285bc:	f04f 0800 	mov.w	r8, #0
   285c0:	f104 0919 	add.w	r9, r4, #25
   285c4:	e7f4      	b.n	285b0 <_printf_float+0x454>
   285c6:	bf00      	nop

000285c8 <_printf_i>:
   285c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   285cc:	7e0f      	ldrb	r7, [r1, #24]
   285ce:	4691      	mov	r9, r2
   285d0:	4680      	mov	r8, r0
   285d2:	460c      	mov	r4, r1
   285d4:	2f78      	cmp	r7, #120	; 0x78
   285d6:	469a      	mov	sl, r3
   285d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   285da:	f101 0243 	add.w	r2, r1, #67	; 0x43
   285de:	d807      	bhi.n	285f0 <_printf_i+0x28>
   285e0:	2f62      	cmp	r7, #98	; 0x62
   285e2:	d80a      	bhi.n	285fa <_printf_i+0x32>
   285e4:	2f00      	cmp	r7, #0
   285e6:	f000 80e0 	beq.w	287aa <_printf_i+0x1e2>
   285ea:	2f58      	cmp	r7, #88	; 0x58
   285ec:	f000 80bb 	beq.w	28766 <_printf_i+0x19e>
   285f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   285f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   285f8:	e03a      	b.n	28670 <_printf_i+0xa8>
   285fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   285fe:	2b15      	cmp	r3, #21
   28600:	d8f6      	bhi.n	285f0 <_printf_i+0x28>
   28602:	a101      	add	r1, pc, #4	; (adr r1, 28608 <_printf_i+0x40>)
   28604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28608:	00028661 	.word	0x00028661
   2860c:	00028675 	.word	0x00028675
   28610:	000285f1 	.word	0x000285f1
   28614:	000285f1 	.word	0x000285f1
   28618:	000285f1 	.word	0x000285f1
   2861c:	000285f1 	.word	0x000285f1
   28620:	00028675 	.word	0x00028675
   28624:	000285f1 	.word	0x000285f1
   28628:	000285f1 	.word	0x000285f1
   2862c:	000285f1 	.word	0x000285f1
   28630:	000285f1 	.word	0x000285f1
   28634:	00028791 	.word	0x00028791
   28638:	00028705 	.word	0x00028705
   2863c:	00028747 	.word	0x00028747
   28640:	000285f1 	.word	0x000285f1
   28644:	000285f1 	.word	0x000285f1
   28648:	000287b3 	.word	0x000287b3
   2864c:	000285f1 	.word	0x000285f1
   28650:	00028705 	.word	0x00028705
   28654:	000285f1 	.word	0x000285f1
   28658:	000285f1 	.word	0x000285f1
   2865c:	0002874f 	.word	0x0002874f
   28660:	682b      	ldr	r3, [r5, #0]
   28662:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28666:	1d1a      	adds	r2, r3, #4
   28668:	681b      	ldr	r3, [r3, #0]
   2866a:	602a      	str	r2, [r5, #0]
   2866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28670:	2301      	movs	r3, #1
   28672:	e0ab      	b.n	287cc <_printf_i+0x204>
   28674:	6823      	ldr	r3, [r4, #0]
   28676:	6829      	ldr	r1, [r5, #0]
   28678:	061f      	lsls	r7, r3, #24
   2867a:	f101 0004 	add.w	r0, r1, #4
   2867e:	6028      	str	r0, [r5, #0]
   28680:	d501      	bpl.n	28686 <_printf_i+0xbe>
   28682:	680d      	ldr	r5, [r1, #0]
   28684:	e003      	b.n	2868e <_printf_i+0xc6>
   28686:	065e      	lsls	r6, r3, #25
   28688:	d5fb      	bpl.n	28682 <_printf_i+0xba>
   2868a:	f9b1 5000 	ldrsh.w	r5, [r1]
   2868e:	2d00      	cmp	r5, #0
   28690:	6861      	ldr	r1, [r4, #4]
   28692:	da7a      	bge.n	2878a <_printf_i+0x1c2>
   28694:	202d      	movs	r0, #45	; 0x2d
   28696:	2900      	cmp	r1, #0
   28698:	60a1      	str	r1, [r4, #8]
   2869a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2869e:	da2d      	bge.n	286fc <_printf_i+0x134>
   286a0:	426d      	negs	r5, r5
   286a2:	485e      	ldr	r0, [pc, #376]	; (2881c <_printf_i+0x254>)
   286a4:	230a      	movs	r3, #10
   286a6:	4616      	mov	r6, r2
   286a8:	fbb5 f1f3 	udiv	r1, r5, r3
   286ac:	fb03 5711 	mls	r7, r3, r1, r5
   286b0:	5dc7      	ldrb	r7, [r0, r7]
   286b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
   286b6:	462f      	mov	r7, r5
   286b8:	460d      	mov	r5, r1
   286ba:	42bb      	cmp	r3, r7
   286bc:	d9f4      	bls.n	286a8 <_printf_i+0xe0>
   286be:	2b08      	cmp	r3, #8
   286c0:	d10b      	bne.n	286da <_printf_i+0x112>
   286c2:	6823      	ldr	r3, [r4, #0]
   286c4:	07df      	lsls	r7, r3, #31
   286c6:	d508      	bpl.n	286da <_printf_i+0x112>
   286c8:	6923      	ldr	r3, [r4, #16]
   286ca:	6861      	ldr	r1, [r4, #4]
   286cc:	4299      	cmp	r1, r3
   286ce:	bfde      	ittt	le
   286d0:	2330      	movle	r3, #48	; 0x30
   286d2:	f806 3c01 	strble.w	r3, [r6, #-1]
   286d6:	f106 36ff 	addle.w	r6, r6, #4294967295
   286da:	1b92      	subs	r2, r2, r6
   286dc:	6122      	str	r2, [r4, #16]
   286de:	464b      	mov	r3, r9
   286e0:	aa03      	add	r2, sp, #12
   286e2:	4621      	mov	r1, r4
   286e4:	4640      	mov	r0, r8
   286e6:	f8cd a000 	str.w	sl, [sp]
   286ea:	f008 f972 	bl	309d2 <_printf_common>
   286ee:	3001      	adds	r0, #1
   286f0:	d171      	bne.n	287d6 <_printf_i+0x20e>
   286f2:	f04f 30ff 	mov.w	r0, #4294967295
   286f6:	b004      	add	sp, #16
   286f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   286fc:	f023 0304 	bic.w	r3, r3, #4
   28700:	6023      	str	r3, [r4, #0]
   28702:	e7cd      	b.n	286a0 <_printf_i+0xd8>
   28704:	682b      	ldr	r3, [r5, #0]
   28706:	6820      	ldr	r0, [r4, #0]
   28708:	1d19      	adds	r1, r3, #4
   2870a:	6029      	str	r1, [r5, #0]
   2870c:	0605      	lsls	r5, r0, #24
   2870e:	d501      	bpl.n	28714 <_printf_i+0x14c>
   28710:	681d      	ldr	r5, [r3, #0]
   28712:	e002      	b.n	2871a <_printf_i+0x152>
   28714:	0641      	lsls	r1, r0, #25
   28716:	d5fb      	bpl.n	28710 <_printf_i+0x148>
   28718:	881d      	ldrh	r5, [r3, #0]
   2871a:	2f6f      	cmp	r7, #111	; 0x6f
   2871c:	483f      	ldr	r0, [pc, #252]	; (2881c <_printf_i+0x254>)
   2871e:	bf14      	ite	ne
   28720:	230a      	movne	r3, #10
   28722:	2308      	moveq	r3, #8
   28724:	2100      	movs	r1, #0
   28726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2872a:	6866      	ldr	r6, [r4, #4]
   2872c:	2e00      	cmp	r6, #0
   2872e:	60a6      	str	r6, [r4, #8]
   28730:	dbb9      	blt.n	286a6 <_printf_i+0xde>
   28732:	6821      	ldr	r1, [r4, #0]
   28734:	f021 0104 	bic.w	r1, r1, #4
   28738:	6021      	str	r1, [r4, #0]
   2873a:	2d00      	cmp	r5, #0
   2873c:	d1b3      	bne.n	286a6 <_printf_i+0xde>
   2873e:	2e00      	cmp	r6, #0
   28740:	d1b1      	bne.n	286a6 <_printf_i+0xde>
   28742:	4616      	mov	r6, r2
   28744:	e7bb      	b.n	286be <_printf_i+0xf6>
   28746:	6823      	ldr	r3, [r4, #0]
   28748:	f043 0320 	orr.w	r3, r3, #32
   2874c:	6023      	str	r3, [r4, #0]
   2874e:	2778      	movs	r7, #120	; 0x78
   28750:	4833      	ldr	r0, [pc, #204]	; (28820 <_printf_i+0x258>)
   28752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   28756:	6829      	ldr	r1, [r5, #0]
   28758:	6823      	ldr	r3, [r4, #0]
   2875a:	1d0e      	adds	r6, r1, #4
   2875c:	602e      	str	r6, [r5, #0]
   2875e:	061e      	lsls	r6, r3, #24
   28760:	d503      	bpl.n	2876a <_printf_i+0x1a2>
   28762:	680d      	ldr	r5, [r1, #0]
   28764:	e004      	b.n	28770 <_printf_i+0x1a8>
   28766:	482d      	ldr	r0, [pc, #180]	; (2881c <_printf_i+0x254>)
   28768:	e7f3      	b.n	28752 <_printf_i+0x18a>
   2876a:	065d      	lsls	r5, r3, #25
   2876c:	d5f9      	bpl.n	28762 <_printf_i+0x19a>
   2876e:	880d      	ldrh	r5, [r1, #0]
   28770:	07d9      	lsls	r1, r3, #31
   28772:	bf44      	itt	mi
   28774:	f043 0320 	orrmi.w	r3, r3, #32
   28778:	6023      	strmi	r3, [r4, #0]
   2877a:	b10d      	cbz	r5, 28780 <_printf_i+0x1b8>
   2877c:	2310      	movs	r3, #16
   2877e:	e7d1      	b.n	28724 <_printf_i+0x15c>
   28780:	6823      	ldr	r3, [r4, #0]
   28782:	f023 0320 	bic.w	r3, r3, #32
   28786:	6023      	str	r3, [r4, #0]
   28788:	e7f8      	b.n	2877c <_printf_i+0x1b4>
   2878a:	4824      	ldr	r0, [pc, #144]	; (2881c <_printf_i+0x254>)
   2878c:	230a      	movs	r3, #10
   2878e:	e7cc      	b.n	2872a <_printf_i+0x162>
   28790:	682b      	ldr	r3, [r5, #0]
   28792:	6826      	ldr	r6, [r4, #0]
   28794:	1d18      	adds	r0, r3, #4
   28796:	6961      	ldr	r1, [r4, #20]
   28798:	6028      	str	r0, [r5, #0]
   2879a:	0635      	lsls	r5, r6, #24
   2879c:	681b      	ldr	r3, [r3, #0]
   2879e:	d501      	bpl.n	287a4 <_printf_i+0x1dc>
   287a0:	6019      	str	r1, [r3, #0]
   287a2:	e002      	b.n	287aa <_printf_i+0x1e2>
   287a4:	0670      	lsls	r0, r6, #25
   287a6:	d5fb      	bpl.n	287a0 <_printf_i+0x1d8>
   287a8:	8019      	strh	r1, [r3, #0]
   287aa:	2300      	movs	r3, #0
   287ac:	4616      	mov	r6, r2
   287ae:	6123      	str	r3, [r4, #16]
   287b0:	e795      	b.n	286de <_printf_i+0x116>
   287b2:	682b      	ldr	r3, [r5, #0]
   287b4:	2100      	movs	r1, #0
   287b6:	1d1a      	adds	r2, r3, #4
   287b8:	602a      	str	r2, [r5, #0]
   287ba:	681e      	ldr	r6, [r3, #0]
   287bc:	6862      	ldr	r2, [r4, #4]
   287be:	4630      	mov	r0, r6
   287c0:	f008 f821 	bl	30806 <memchr>
   287c4:	b108      	cbz	r0, 287ca <_printf_i+0x202>
   287c6:	1b80      	subs	r0, r0, r6
   287c8:	6060      	str	r0, [r4, #4]
   287ca:	6863      	ldr	r3, [r4, #4]
   287cc:	6123      	str	r3, [r4, #16]
   287ce:	2300      	movs	r3, #0
   287d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   287d4:	e783      	b.n	286de <_printf_i+0x116>
   287d6:	6923      	ldr	r3, [r4, #16]
   287d8:	4632      	mov	r2, r6
   287da:	4649      	mov	r1, r9
   287dc:	4640      	mov	r0, r8
   287de:	47d0      	blx	sl
   287e0:	3001      	adds	r0, #1
   287e2:	d086      	beq.n	286f2 <_printf_i+0x12a>
   287e4:	6823      	ldr	r3, [r4, #0]
   287e6:	079b      	lsls	r3, r3, #30
   287e8:	d414      	bmi.n	28814 <_printf_i+0x24c>
   287ea:	68e0      	ldr	r0, [r4, #12]
   287ec:	9b03      	ldr	r3, [sp, #12]
   287ee:	4298      	cmp	r0, r3
   287f0:	bfb8      	it	lt
   287f2:	4618      	movlt	r0, r3
   287f4:	e77f      	b.n	286f6 <_printf_i+0x12e>
   287f6:	2301      	movs	r3, #1
   287f8:	4632      	mov	r2, r6
   287fa:	4649      	mov	r1, r9
   287fc:	4640      	mov	r0, r8
   287fe:	47d0      	blx	sl
   28800:	3001      	adds	r0, #1
   28802:	f43f af76 	beq.w	286f2 <_printf_i+0x12a>
   28806:	3501      	adds	r5, #1
   28808:	68e3      	ldr	r3, [r4, #12]
   2880a:	9903      	ldr	r1, [sp, #12]
   2880c:	1a5b      	subs	r3, r3, r1
   2880e:	42ab      	cmp	r3, r5
   28810:	dcf1      	bgt.n	287f6 <_printf_i+0x22e>
   28812:	e7ea      	b.n	287ea <_printf_i+0x222>
   28814:	2500      	movs	r5, #0
   28816:	f104 0619 	add.w	r6, r4, #25
   2881a:	e7f5      	b.n	28808 <_printf_i+0x240>
   2881c:	0003c10e 	.word	0x0003c10e
   28820:	0003c11f 	.word	0x0003c11f

00028824 <realloc>:
   28824:	4b02      	ldr	r3, [pc, #8]	; (28830 <realloc+0xc>)
   28826:	460a      	mov	r2, r1
   28828:	4601      	mov	r1, r0
   2882a:	6818      	ldr	r0, [r3, #0]
   2882c:	f008 bce6 	b.w	311fc <_realloc_r>
   28830:	2000ca5c 	.word	0x2000ca5c

00028834 <_sbrk_r>:
   28834:	b538      	push	{r3, r4, r5, lr}
   28836:	2300      	movs	r3, #0
   28838:	4d05      	ldr	r5, [pc, #20]	; (28850 <_sbrk_r+0x1c>)
   2883a:	4604      	mov	r4, r0
   2883c:	4608      	mov	r0, r1
   2883e:	602b      	str	r3, [r5, #0]
   28840:	f7e9 fe0a 	bl	12458 <_sbrk>
   28844:	1c43      	adds	r3, r0, #1
   28846:	d102      	bne.n	2884e <_sbrk_r+0x1a>
   28848:	682b      	ldr	r3, [r5, #0]
   2884a:	b103      	cbz	r3, 2884e <_sbrk_r+0x1a>
   2884c:	6023      	str	r3, [r4, #0]
   2884e:	bd38      	pop	{r3, r4, r5, pc}
   28850:	2000ebac 	.word	0x2000ebac

00028854 <sniprintf>:
   28854:	b40c      	push	{r2, r3}
   28856:	4b18      	ldr	r3, [pc, #96]	; (288b8 <sniprintf+0x64>)
   28858:	b530      	push	{r4, r5, lr}
   2885a:	1e0c      	subs	r4, r1, #0
   2885c:	b09d      	sub	sp, #116	; 0x74
   2885e:	681d      	ldr	r5, [r3, #0]
   28860:	da08      	bge.n	28874 <sniprintf+0x20>
   28862:	238b      	movs	r3, #139	; 0x8b
   28864:	f04f 30ff 	mov.w	r0, #4294967295
   28868:	602b      	str	r3, [r5, #0]
   2886a:	b01d      	add	sp, #116	; 0x74
   2886c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   28870:	b002      	add	sp, #8
   28872:	4770      	bx	lr
   28874:	f44f 7302 	mov.w	r3, #520	; 0x208
   28878:	9002      	str	r0, [sp, #8]
   2887a:	9006      	str	r0, [sp, #24]
   2887c:	a902      	add	r1, sp, #8
   2887e:	f8ad 3014 	strh.w	r3, [sp, #20]
   28882:	bf14      	ite	ne
   28884:	f104 33ff 	addne.w	r3, r4, #4294967295
   28888:	4623      	moveq	r3, r4
   2888a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2888c:	4628      	mov	r0, r5
   2888e:	9304      	str	r3, [sp, #16]
   28890:	9307      	str	r3, [sp, #28]
   28892:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28896:	f8ad 3016 	strh.w	r3, [sp, #22]
   2889a:	ab21      	add	r3, sp, #132	; 0x84
   2889c:	9301      	str	r3, [sp, #4]
   2889e:	f001 f83d 	bl	2991c <_svfiprintf_r>
   288a2:	1c43      	adds	r3, r0, #1
   288a4:	bfbc      	itt	lt
   288a6:	238b      	movlt	r3, #139	; 0x8b
   288a8:	602b      	strlt	r3, [r5, #0]
   288aa:	2c00      	cmp	r4, #0
   288ac:	d0dd      	beq.n	2886a <sniprintf+0x16>
   288ae:	9b02      	ldr	r3, [sp, #8]
   288b0:	2200      	movs	r2, #0
   288b2:	701a      	strb	r2, [r3, #0]
   288b4:	e7d9      	b.n	2886a <sniprintf+0x16>
   288b6:	bf00      	nop
   288b8:	2000ca5c 	.word	0x2000ca5c

000288bc <strtod>:
   288bc:	460a      	mov	r2, r1
   288be:	4601      	mov	r1, r0
   288c0:	4802      	ldr	r0, [pc, #8]	; (288cc <strtod+0x10>)
   288c2:	4b03      	ldr	r3, [pc, #12]	; (288d0 <strtod+0x14>)
   288c4:	6800      	ldr	r0, [r0, #0]
   288c6:	f7e0 bf67 	b.w	9798 <_strtod_l>
   288ca:	bf00      	nop
   288cc:	2000ca5c 	.word	0x2000ca5c
   288d0:	2000cac0 	.word	0x2000cac0

000288d4 <_strtol_l.constprop.0>:
   288d4:	2b24      	cmp	r3, #36	; 0x24
   288d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   288da:	4686      	mov	lr, r0
   288dc:	4690      	mov	r8, r2
   288de:	d801      	bhi.n	288e4 <_strtol_l.constprop.0+0x10>
   288e0:	2b01      	cmp	r3, #1
   288e2:	d106      	bne.n	288f2 <_strtol_l.constprop.0+0x1e>
   288e4:	f003 fb3e 	bl	2bf64 <__errno>
   288e8:	2316      	movs	r3, #22
   288ea:	6003      	str	r3, [r0, #0]
   288ec:	2000      	movs	r0, #0
   288ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   288f2:	460d      	mov	r5, r1
   288f4:	4835      	ldr	r0, [pc, #212]	; (289cc <_strtol_l.constprop.0+0xf8>)
   288f6:	462a      	mov	r2, r5
   288f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   288fc:	5d06      	ldrb	r6, [r0, r4]
   288fe:	f016 0608 	ands.w	r6, r6, #8
   28902:	d1f8      	bne.n	288f6 <_strtol_l.constprop.0+0x22>
   28904:	2c2d      	cmp	r4, #45	; 0x2d
   28906:	d124      	bne.n	28952 <_strtol_l.constprop.0+0x7e>
   28908:	782c      	ldrb	r4, [r5, #0]
   2890a:	2601      	movs	r6, #1
   2890c:	1c95      	adds	r5, r2, #2
   2890e:	bb2b      	cbnz	r3, 2895c <_strtol_l.constprop.0+0x88>
   28910:	2c30      	cmp	r4, #48	; 0x30
   28912:	d030      	beq.n	28976 <_strtol_l.constprop.0+0xa2>
   28914:	230a      	movs	r3, #10
   28916:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   2891a:	2200      	movs	r2, #0
   2891c:	f10c 3cff 	add.w	ip, ip, #4294967295
   28920:	4610      	mov	r0, r2
   28922:	fbbc f9f3 	udiv	r9, ip, r3
   28926:	fb03 ca19 	mls	sl, r3, r9, ip
   2892a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2892e:	2f09      	cmp	r7, #9
   28930:	d828      	bhi.n	28984 <_strtol_l.constprop.0+0xb0>
   28932:	463c      	mov	r4, r7
   28934:	42a3      	cmp	r3, r4
   28936:	dd34      	ble.n	289a2 <_strtol_l.constprop.0+0xce>
   28938:	1c57      	adds	r7, r2, #1
   2893a:	d007      	beq.n	2894c <_strtol_l.constprop.0+0x78>
   2893c:	4581      	cmp	r9, r0
   2893e:	d32d      	bcc.n	2899c <_strtol_l.constprop.0+0xc8>
   28940:	d101      	bne.n	28946 <_strtol_l.constprop.0+0x72>
   28942:	45a2      	cmp	sl, r4
   28944:	db2a      	blt.n	2899c <_strtol_l.constprop.0+0xc8>
   28946:	fb00 4003 	mla	r0, r0, r3, r4
   2894a:	2201      	movs	r2, #1
   2894c:	f815 4b01 	ldrb.w	r4, [r5], #1
   28950:	e7eb      	b.n	2892a <_strtol_l.constprop.0+0x56>
   28952:	2c2b      	cmp	r4, #43	; 0x2b
   28954:	bf04      	itt	eq
   28956:	782c      	ldrbeq	r4, [r5, #0]
   28958:	1c95      	addeq	r5, r2, #2
   2895a:	e7d8      	b.n	2890e <_strtol_l.constprop.0+0x3a>
   2895c:	2b10      	cmp	r3, #16
   2895e:	d1da      	bne.n	28916 <_strtol_l.constprop.0+0x42>
   28960:	2c30      	cmp	r4, #48	; 0x30
   28962:	d1d8      	bne.n	28916 <_strtol_l.constprop.0+0x42>
   28964:	782a      	ldrb	r2, [r5, #0]
   28966:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2896a:	2a58      	cmp	r2, #88	; 0x58
   2896c:	d1d3      	bne.n	28916 <_strtol_l.constprop.0+0x42>
   2896e:	786c      	ldrb	r4, [r5, #1]
   28970:	2310      	movs	r3, #16
   28972:	3502      	adds	r5, #2
   28974:	e7cf      	b.n	28916 <_strtol_l.constprop.0+0x42>
   28976:	782b      	ldrb	r3, [r5, #0]
   28978:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2897c:	2b58      	cmp	r3, #88	; 0x58
   2897e:	d0f6      	beq.n	2896e <_strtol_l.constprop.0+0x9a>
   28980:	2308      	movs	r3, #8
   28982:	e7c8      	b.n	28916 <_strtol_l.constprop.0+0x42>
   28984:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   28988:	2f19      	cmp	r7, #25
   2898a:	d801      	bhi.n	28990 <_strtol_l.constprop.0+0xbc>
   2898c:	3c37      	subs	r4, #55	; 0x37
   2898e:	e7d1      	b.n	28934 <_strtol_l.constprop.0+0x60>
   28990:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   28994:	2f19      	cmp	r7, #25
   28996:	d804      	bhi.n	289a2 <_strtol_l.constprop.0+0xce>
   28998:	3c57      	subs	r4, #87	; 0x57
   2899a:	e7cb      	b.n	28934 <_strtol_l.constprop.0+0x60>
   2899c:	f04f 32ff 	mov.w	r2, #4294967295
   289a0:	e7d4      	b.n	2894c <_strtol_l.constprop.0+0x78>
   289a2:	1c53      	adds	r3, r2, #1
   289a4:	d108      	bne.n	289b8 <_strtol_l.constprop.0+0xe4>
   289a6:	2322      	movs	r3, #34	; 0x22
   289a8:	4660      	mov	r0, ip
   289aa:	f8ce 3000 	str.w	r3, [lr]
   289ae:	f1b8 0f00 	cmp.w	r8, #0
   289b2:	d09c      	beq.n	288ee <_strtol_l.constprop.0+0x1a>
   289b4:	1e69      	subs	r1, r5, #1
   289b6:	e006      	b.n	289c6 <_strtol_l.constprop.0+0xf2>
   289b8:	b106      	cbz	r6, 289bc <_strtol_l.constprop.0+0xe8>
   289ba:	4240      	negs	r0, r0
   289bc:	f1b8 0f00 	cmp.w	r8, #0
   289c0:	d095      	beq.n	288ee <_strtol_l.constprop.0+0x1a>
   289c2:	2a00      	cmp	r2, #0
   289c4:	d1f6      	bne.n	289b4 <_strtol_l.constprop.0+0xe0>
   289c6:	f8c8 1000 	str.w	r1, [r8]
   289ca:	e790      	b.n	288ee <_strtol_l.constprop.0+0x1a>
   289cc:	0003c002 	.word	0x0003c002

000289d0 <strtol>:
   289d0:	4613      	mov	r3, r2
   289d2:	460a      	mov	r2, r1
   289d4:	4601      	mov	r1, r0
   289d6:	4802      	ldr	r0, [pc, #8]	; (289e0 <strtol+0x10>)
   289d8:	6800      	ldr	r0, [r0, #0]
   289da:	f7ff bf7b 	b.w	288d4 <_strtol_l.constprop.0>
   289de:	bf00      	nop
   289e0:	2000ca5c 	.word	0x2000ca5c

000289e4 <_strtoll_l.constprop.0>:
   289e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289e8:	4690      	mov	r8, r2
   289ea:	b085      	sub	sp, #20
   289ec:	4689      	mov	r9, r1
   289ee:	461e      	mov	r6, r3
   289f0:	460d      	mov	r5, r1
   289f2:	4a45      	ldr	r2, [pc, #276]	; (28b08 <_strtoll_l.constprop.0+0x124>)
   289f4:	9002      	str	r0, [sp, #8]
   289f6:	462b      	mov	r3, r5
   289f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   289fc:	5d17      	ldrb	r7, [r2, r4]
   289fe:	f017 0708 	ands.w	r7, r7, #8
   28a02:	d1f8      	bne.n	289f6 <_strtoll_l.constprop.0+0x12>
   28a04:	2c2d      	cmp	r4, #45	; 0x2d
   28a06:	d141      	bne.n	28a8c <_strtoll_l.constprop.0+0xa8>
   28a08:	782c      	ldrb	r4, [r5, #0]
   28a0a:	2701      	movs	r7, #1
   28a0c:	1c9d      	adds	r5, r3, #2
   28a0e:	2e00      	cmp	r6, #0
   28a10:	d141      	bne.n	28a96 <_strtoll_l.constprop.0+0xb2>
   28a12:	2c30      	cmp	r4, #48	; 0x30
   28a14:	d04c      	beq.n	28ab0 <_strtoll_l.constprop.0+0xcc>
   28a16:	260a      	movs	r6, #10
   28a18:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   28a1c:	f107 3bff 	add.w	fp, r7, #4294967295
   28a20:	17f3      	asrs	r3, r6, #31
   28a22:	4632      	mov	r2, r6
   28a24:	f10a 3aff 	add.w	sl, sl, #4294967295
   28a28:	4658      	mov	r0, fp
   28a2a:	9303      	str	r3, [sp, #12]
   28a2c:	4651      	mov	r1, sl
   28a2e:	f7e0 fa31 	bl	8e94 <__aeabi_uldivmod>
   28a32:	9201      	str	r2, [sp, #4]
   28a34:	2200      	movs	r2, #0
   28a36:	468e      	mov	lr, r1
   28a38:	4684      	mov	ip, r0
   28a3a:	4611      	mov	r1, r2
   28a3c:	4610      	mov	r0, r2
   28a3e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   28a42:	2b09      	cmp	r3, #9
   28a44:	d905      	bls.n	28a52 <_strtoll_l.constprop.0+0x6e>
   28a46:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   28a4a:	2b19      	cmp	r3, #25
   28a4c:	d837      	bhi.n	28abe <_strtoll_l.constprop.0+0xda>
   28a4e:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   28a52:	429e      	cmp	r6, r3
   28a54:	dd3d      	ble.n	28ad2 <_strtoll_l.constprop.0+0xee>
   28a56:	1c54      	adds	r4, r2, #1
   28a58:	d015      	beq.n	28a86 <_strtoll_l.constprop.0+0xa2>
   28a5a:	4584      	cmp	ip, r0
   28a5c:	eb7e 0201 	sbcs.w	r2, lr, r1
   28a60:	d334      	bcc.n	28acc <_strtoll_l.constprop.0+0xe8>
   28a62:	458e      	cmp	lr, r1
   28a64:	bf08      	it	eq
   28a66:	4584      	cmpeq	ip, r0
   28a68:	d102      	bne.n	28a70 <_strtoll_l.constprop.0+0x8c>
   28a6a:	9a01      	ldr	r2, [sp, #4]
   28a6c:	429a      	cmp	r2, r3
   28a6e:	db2d      	blt.n	28acc <_strtoll_l.constprop.0+0xe8>
   28a70:	9a03      	ldr	r2, [sp, #12]
   28a72:	4371      	muls	r1, r6
   28a74:	fb00 1102 	mla	r1, r0, r2, r1
   28a78:	fba6 0200 	umull	r0, r2, r6, r0
   28a7c:	440a      	add	r2, r1
   28a7e:	1818      	adds	r0, r3, r0
   28a80:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   28a84:	2201      	movs	r2, #1
   28a86:	f815 4b01 	ldrb.w	r4, [r5], #1
   28a8a:	e7d8      	b.n	28a3e <_strtoll_l.constprop.0+0x5a>
   28a8c:	2c2b      	cmp	r4, #43	; 0x2b
   28a8e:	bf04      	itt	eq
   28a90:	782c      	ldrbeq	r4, [r5, #0]
   28a92:	1c9d      	addeq	r5, r3, #2
   28a94:	e7bb      	b.n	28a0e <_strtoll_l.constprop.0+0x2a>
   28a96:	2e10      	cmp	r6, #16
   28a98:	d1be      	bne.n	28a18 <_strtoll_l.constprop.0+0x34>
   28a9a:	2c30      	cmp	r4, #48	; 0x30
   28a9c:	d1bc      	bne.n	28a18 <_strtoll_l.constprop.0+0x34>
   28a9e:	782b      	ldrb	r3, [r5, #0]
   28aa0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28aa4:	2b58      	cmp	r3, #88	; 0x58
   28aa6:	d1b7      	bne.n	28a18 <_strtoll_l.constprop.0+0x34>
   28aa8:	786c      	ldrb	r4, [r5, #1]
   28aaa:	2610      	movs	r6, #16
   28aac:	3502      	adds	r5, #2
   28aae:	e7b3      	b.n	28a18 <_strtoll_l.constprop.0+0x34>
   28ab0:	782b      	ldrb	r3, [r5, #0]
   28ab2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28ab6:	2b58      	cmp	r3, #88	; 0x58
   28ab8:	d0f6      	beq.n	28aa8 <_strtoll_l.constprop.0+0xc4>
   28aba:	2608      	movs	r6, #8
   28abc:	e7ac      	b.n	28a18 <_strtoll_l.constprop.0+0x34>
   28abe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   28ac2:	2b19      	cmp	r3, #25
   28ac4:	d805      	bhi.n	28ad2 <_strtoll_l.constprop.0+0xee>
   28ac6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   28aca:	e7c2      	b.n	28a52 <_strtoll_l.constprop.0+0x6e>
   28acc:	f04f 32ff 	mov.w	r2, #4294967295
   28ad0:	e7d9      	b.n	28a86 <_strtoll_l.constprop.0+0xa2>
   28ad2:	1c53      	adds	r3, r2, #1
   28ad4:	d10a      	bne.n	28aec <_strtoll_l.constprop.0+0x108>
   28ad6:	2322      	movs	r3, #34	; 0x22
   28ad8:	9a02      	ldr	r2, [sp, #8]
   28ada:	4658      	mov	r0, fp
   28adc:	4651      	mov	r1, sl
   28ade:	6013      	str	r3, [r2, #0]
   28ae0:	f1b8 0f00 	cmp.w	r8, #0
   28ae4:	d10a      	bne.n	28afc <_strtoll_l.constprop.0+0x118>
   28ae6:	b005      	add	sp, #20
   28ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28aec:	b117      	cbz	r7, 28af4 <_strtoll_l.constprop.0+0x110>
   28aee:	4240      	negs	r0, r0
   28af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   28af4:	f1b8 0f00 	cmp.w	r8, #0
   28af8:	d0f5      	beq.n	28ae6 <_strtoll_l.constprop.0+0x102>
   28afa:	b10a      	cbz	r2, 28b00 <_strtoll_l.constprop.0+0x11c>
   28afc:	f105 39ff 	add.w	r9, r5, #4294967295
   28b00:	f8c8 9000 	str.w	r9, [r8]
   28b04:	e7ef      	b.n	28ae6 <_strtoll_l.constprop.0+0x102>
   28b06:	bf00      	nop
   28b08:	0003c002 	.word	0x0003c002

00028b0c <strtoll>:
   28b0c:	4613      	mov	r3, r2
   28b0e:	460a      	mov	r2, r1
   28b10:	4601      	mov	r1, r0
   28b12:	4802      	ldr	r0, [pc, #8]	; (28b1c <strtoll+0x10>)
   28b14:	6800      	ldr	r0, [r0, #0]
   28b16:	f7ff bf65 	b.w	289e4 <_strtoll_l.constprop.0>
   28b1a:	bf00      	nop
   28b1c:	2000ca5c 	.word	0x2000ca5c

00028b20 <_strtoul_l.constprop.0>:
   28b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b24:	4686      	mov	lr, r0
   28b26:	460d      	mov	r5, r1
   28b28:	4e35      	ldr	r6, [pc, #212]	; (28c00 <_strtoul_l.constprop.0+0xe0>)
   28b2a:	4628      	mov	r0, r5
   28b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   28b30:	5d37      	ldrb	r7, [r6, r4]
   28b32:	f017 0708 	ands.w	r7, r7, #8
   28b36:	d1f8      	bne.n	28b2a <_strtoul_l.constprop.0+0xa>
   28b38:	2c2d      	cmp	r4, #45	; 0x2d
   28b3a:	d126      	bne.n	28b8a <_strtoul_l.constprop.0+0x6a>
   28b3c:	782c      	ldrb	r4, [r5, #0]
   28b3e:	2701      	movs	r7, #1
   28b40:	1c85      	adds	r5, r0, #2
   28b42:	bb3b      	cbnz	r3, 28b94 <_strtoul_l.constprop.0+0x74>
   28b44:	2c30      	cmp	r4, #48	; 0x30
   28b46:	d032      	beq.n	28bae <_strtoul_l.constprop.0+0x8e>
   28b48:	230a      	movs	r3, #10
   28b4a:	f04f 38ff 	mov.w	r8, #4294967295
   28b4e:	2600      	movs	r6, #0
   28b50:	fbb8 f8f3 	udiv	r8, r8, r3
   28b54:	fb03 f908 	mul.w	r9, r3, r8
   28b58:	4630      	mov	r0, r6
   28b5a:	ea6f 0909 	mvn.w	r9, r9
   28b5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   28b62:	f1bc 0f09 	cmp.w	ip, #9
   28b66:	d829      	bhi.n	28bbc <_strtoul_l.constprop.0+0x9c>
   28b68:	4664      	mov	r4, ip
   28b6a:	42a3      	cmp	r3, r4
   28b6c:	dd37      	ble.n	28bde <_strtoul_l.constprop.0+0xbe>
   28b6e:	f1b6 3fff 	cmp.w	r6, #4294967295
   28b72:	d007      	beq.n	28b84 <_strtoul_l.constprop.0+0x64>
   28b74:	4580      	cmp	r8, r0
   28b76:	d32f      	bcc.n	28bd8 <_strtoul_l.constprop.0+0xb8>
   28b78:	d101      	bne.n	28b7e <_strtoul_l.constprop.0+0x5e>
   28b7a:	45a1      	cmp	r9, r4
   28b7c:	db2c      	blt.n	28bd8 <_strtoul_l.constprop.0+0xb8>
   28b7e:	fb00 4003 	mla	r0, r0, r3, r4
   28b82:	2601      	movs	r6, #1
   28b84:	f815 4b01 	ldrb.w	r4, [r5], #1
   28b88:	e7e9      	b.n	28b5e <_strtoul_l.constprop.0+0x3e>
   28b8a:	2c2b      	cmp	r4, #43	; 0x2b
   28b8c:	bf04      	itt	eq
   28b8e:	782c      	ldrbeq	r4, [r5, #0]
   28b90:	1c85      	addeq	r5, r0, #2
   28b92:	e7d6      	b.n	28b42 <_strtoul_l.constprop.0+0x22>
   28b94:	2b10      	cmp	r3, #16
   28b96:	d1d8      	bne.n	28b4a <_strtoul_l.constprop.0+0x2a>
   28b98:	2c30      	cmp	r4, #48	; 0x30
   28b9a:	d1d6      	bne.n	28b4a <_strtoul_l.constprop.0+0x2a>
   28b9c:	7828      	ldrb	r0, [r5, #0]
   28b9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   28ba2:	2858      	cmp	r0, #88	; 0x58
   28ba4:	d1d1      	bne.n	28b4a <_strtoul_l.constprop.0+0x2a>
   28ba6:	786c      	ldrb	r4, [r5, #1]
   28ba8:	2310      	movs	r3, #16
   28baa:	3502      	adds	r5, #2
   28bac:	e7cd      	b.n	28b4a <_strtoul_l.constprop.0+0x2a>
   28bae:	782b      	ldrb	r3, [r5, #0]
   28bb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28bb4:	2b58      	cmp	r3, #88	; 0x58
   28bb6:	d0f6      	beq.n	28ba6 <_strtoul_l.constprop.0+0x86>
   28bb8:	2308      	movs	r3, #8
   28bba:	e7c6      	b.n	28b4a <_strtoul_l.constprop.0+0x2a>
   28bbc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   28bc0:	f1bc 0f19 	cmp.w	ip, #25
   28bc4:	d801      	bhi.n	28bca <_strtoul_l.constprop.0+0xaa>
   28bc6:	3c37      	subs	r4, #55	; 0x37
   28bc8:	e7cf      	b.n	28b6a <_strtoul_l.constprop.0+0x4a>
   28bca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   28bce:	f1bc 0f19 	cmp.w	ip, #25
   28bd2:	d804      	bhi.n	28bde <_strtoul_l.constprop.0+0xbe>
   28bd4:	3c57      	subs	r4, #87	; 0x57
   28bd6:	e7c8      	b.n	28b6a <_strtoul_l.constprop.0+0x4a>
   28bd8:	f04f 36ff 	mov.w	r6, #4294967295
   28bdc:	e7d2      	b.n	28b84 <_strtoul_l.constprop.0+0x64>
   28bde:	1c73      	adds	r3, r6, #1
   28be0:	d106      	bne.n	28bf0 <_strtoul_l.constprop.0+0xd0>
   28be2:	2322      	movs	r3, #34	; 0x22
   28be4:	4630      	mov	r0, r6
   28be6:	f8ce 3000 	str.w	r3, [lr]
   28bea:	b932      	cbnz	r2, 28bfa <_strtoul_l.constprop.0+0xda>
   28bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28bf0:	b107      	cbz	r7, 28bf4 <_strtoul_l.constprop.0+0xd4>
   28bf2:	4240      	negs	r0, r0
   28bf4:	2a00      	cmp	r2, #0
   28bf6:	d0f9      	beq.n	28bec <_strtoul_l.constprop.0+0xcc>
   28bf8:	b106      	cbz	r6, 28bfc <_strtoul_l.constprop.0+0xdc>
   28bfa:	1e69      	subs	r1, r5, #1
   28bfc:	6011      	str	r1, [r2, #0]
   28bfe:	e7f5      	b.n	28bec <_strtoul_l.constprop.0+0xcc>
   28c00:	0003c002 	.word	0x0003c002

00028c04 <strtoul>:
   28c04:	4613      	mov	r3, r2
   28c06:	460a      	mov	r2, r1
   28c08:	4601      	mov	r1, r0
   28c0a:	4802      	ldr	r0, [pc, #8]	; (28c14 <strtoul+0x10>)
   28c0c:	6800      	ldr	r0, [r0, #0]
   28c0e:	f7ff bf87 	b.w	28b20 <_strtoul_l.constprop.0>
   28c12:	bf00      	nop
   28c14:	2000ca5c 	.word	0x2000ca5c

00028c18 <vsniprintf>:
   28c18:	b507      	push	{r0, r1, r2, lr}
   28c1a:	9300      	str	r3, [sp, #0]
   28c1c:	4613      	mov	r3, r2
   28c1e:	460a      	mov	r2, r1
   28c20:	4601      	mov	r1, r0
   28c22:	4803      	ldr	r0, [pc, #12]	; (28c30 <vsniprintf+0x18>)
   28c24:	6800      	ldr	r0, [r0, #0]
   28c26:	f008 f80c 	bl	30c42 <_vsniprintf_r>
   28c2a:	b003      	add	sp, #12
   28c2c:	f85d fb04 	ldr.w	pc, [sp], #4
   28c30:	2000ca5c 	.word	0x2000ca5c

00028c34 <_vsiscanf_r>:
   28c34:	b570      	push	{r4, r5, r6, lr}
   28c36:	461e      	mov	r6, r3
   28c38:	b09a      	sub	sp, #104	; 0x68
   28c3a:	f44f 7301 	mov.w	r3, #516	; 0x204
   28c3e:	4604      	mov	r4, r0
   28c40:	4608      	mov	r0, r1
   28c42:	4615      	mov	r5, r2
   28c44:	f8ad 300c 	strh.w	r3, [sp, #12]
   28c48:	9100      	str	r1, [sp, #0]
   28c4a:	9104      	str	r1, [sp, #16]
   28c4c:	f7e0 fae9 	bl	9222 <strlen>
   28c50:	4b09      	ldr	r3, [pc, #36]	; (28c78 <_vsiscanf_r+0x44>)
   28c52:	462a      	mov	r2, r5
   28c54:	4669      	mov	r1, sp
   28c56:	9001      	str	r0, [sp, #4]
   28c58:	9309      	str	r3, [sp, #36]	; 0x24
   28c5a:	2300      	movs	r3, #0
   28c5c:	9005      	str	r0, [sp, #20]
   28c5e:	4620      	mov	r0, r4
   28c60:	930d      	str	r3, [sp, #52]	; 0x34
   28c62:	9312      	str	r3, [sp, #72]	; 0x48
   28c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28c68:	f8ad 300e 	strh.w	r3, [sp, #14]
   28c6c:	4633      	mov	r3, r6
   28c6e:	f000 ff51 	bl	29b14 <__ssvfiscanf_r>
   28c72:	b01a      	add	sp, #104	; 0x68
   28c74:	bd70      	pop	{r4, r5, r6, pc}
   28c76:	bf00      	nop
   28c78:	00030ad9 	.word	0x00030ad9

00028c7c <vsiscanf>:
   28c7c:	4613      	mov	r3, r2
   28c7e:	460a      	mov	r2, r1
   28c80:	4601      	mov	r1, r0
   28c82:	4802      	ldr	r0, [pc, #8]	; (28c8c <vsiscanf+0x10>)
   28c84:	6800      	ldr	r0, [r0, #0]
   28c86:	f7ff bfd5 	b.w	28c34 <_vsiscanf_r>
   28c8a:	bf00      	nop
   28c8c:	2000ca5c 	.word	0x2000ca5c

00028c90 <_write_r>:
   28c90:	b538      	push	{r3, r4, r5, lr}
   28c92:	4604      	mov	r4, r0
   28c94:	4d06      	ldr	r5, [pc, #24]	; (28cb0 <_write_r+0x20>)
   28c96:	4608      	mov	r0, r1
   28c98:	4611      	mov	r1, r2
   28c9a:	2200      	movs	r2, #0
   28c9c:	602a      	str	r2, [r5, #0]
   28c9e:	461a      	mov	r2, r3
   28ca0:	f003 f949 	bl	2bf36 <_write>
   28ca4:	1c43      	adds	r3, r0, #1
   28ca6:	d102      	bne.n	28cae <_write_r+0x1e>
   28ca8:	682b      	ldr	r3, [r5, #0]
   28caa:	b103      	cbz	r3, 28cae <_write_r+0x1e>
   28cac:	6023      	str	r3, [r4, #0]
   28cae:	bd38      	pop	{r3, r4, r5, pc}
   28cb0:	2000ebac 	.word	0x2000ebac

00028cb4 <_close_r>:
   28cb4:	b538      	push	{r3, r4, r5, lr}
   28cb6:	2300      	movs	r3, #0
   28cb8:	4d05      	ldr	r5, [pc, #20]	; (28cd0 <_close_r+0x1c>)
   28cba:	4604      	mov	r4, r0
   28cbc:	4608      	mov	r0, r1
   28cbe:	602b      	str	r3, [r5, #0]
   28cc0:	f003 f93d 	bl	2bf3e <_close>
   28cc4:	1c43      	adds	r3, r0, #1
   28cc6:	d102      	bne.n	28cce <_close_r+0x1a>
   28cc8:	682b      	ldr	r3, [r5, #0]
   28cca:	b103      	cbz	r3, 28cce <_close_r+0x1a>
   28ccc:	6023      	str	r3, [r4, #0]
   28cce:	bd38      	pop	{r3, r4, r5, pc}
   28cd0:	2000ebac 	.word	0x2000ebac

00028cd4 <__gethex>:
   28cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cd8:	b08b      	sub	sp, #44	; 0x2c
   28cda:	468b      	mov	fp, r1
   28cdc:	4690      	mov	r8, r2
   28cde:	9305      	str	r3, [sp, #20]
   28ce0:	4bac      	ldr	r3, [pc, #688]	; (28f94 <__gethex+0x2c0>)
   28ce2:	9002      	str	r0, [sp, #8]
   28ce4:	681b      	ldr	r3, [r3, #0]
   28ce6:	4618      	mov	r0, r3
   28ce8:	9303      	str	r3, [sp, #12]
   28cea:	f7e0 fa9a 	bl	9222 <strlen>
   28cee:	9b03      	ldr	r3, [sp, #12]
   28cf0:	9001      	str	r0, [sp, #4]
   28cf2:	4403      	add	r3, r0
   28cf4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   28cf8:	9306      	str	r3, [sp, #24]
   28cfa:	f8db 3000 	ldr.w	r3, [fp]
   28cfe:	1c9a      	adds	r2, r3, #2
   28d00:	4617      	mov	r7, r2
   28d02:	f812 0b01 	ldrb.w	r0, [r2], #1
   28d06:	2830      	cmp	r0, #48	; 0x30
   28d08:	d0fa      	beq.n	28d00 <__gethex+0x2c>
   28d0a:	1afb      	subs	r3, r7, r3
   28d0c:	f1a3 0a02 	sub.w	sl, r3, #2
   28d10:	f008 f8a0 	bl	30e54 <__hexdig_fun>
   28d14:	4604      	mov	r4, r0
   28d16:	2800      	cmp	r0, #0
   28d18:	d138      	bne.n	28d8c <__gethex+0xb8>
   28d1a:	9a01      	ldr	r2, [sp, #4]
   28d1c:	4638      	mov	r0, r7
   28d1e:	9903      	ldr	r1, [sp, #12]
   28d20:	f007 ff23 	bl	30b6a <strncmp>
   28d24:	4605      	mov	r5, r0
   28d26:	2800      	cmp	r0, #0
   28d28:	d164      	bne.n	28df4 <__gethex+0x120>
   28d2a:	9b01      	ldr	r3, [sp, #4]
   28d2c:	5cf8      	ldrb	r0, [r7, r3]
   28d2e:	18fe      	adds	r6, r7, r3
   28d30:	f008 f890 	bl	30e54 <__hexdig_fun>
   28d34:	2800      	cmp	r0, #0
   28d36:	d05f      	beq.n	28df8 <__gethex+0x124>
   28d38:	4633      	mov	r3, r6
   28d3a:	7818      	ldrb	r0, [r3, #0]
   28d3c:	461f      	mov	r7, r3
   28d3e:	3301      	adds	r3, #1
   28d40:	2830      	cmp	r0, #48	; 0x30
   28d42:	d0fa      	beq.n	28d3a <__gethex+0x66>
   28d44:	f008 f886 	bl	30e54 <__hexdig_fun>
   28d48:	fab0 f480 	clz	r4, r0
   28d4c:	4635      	mov	r5, r6
   28d4e:	f04f 0a01 	mov.w	sl, #1
   28d52:	0964      	lsrs	r4, r4, #5
   28d54:	463a      	mov	r2, r7
   28d56:	4616      	mov	r6, r2
   28d58:	3201      	adds	r2, #1
   28d5a:	7830      	ldrb	r0, [r6, #0]
   28d5c:	f008 f87a 	bl	30e54 <__hexdig_fun>
   28d60:	2800      	cmp	r0, #0
   28d62:	d1f8      	bne.n	28d56 <__gethex+0x82>
   28d64:	9a01      	ldr	r2, [sp, #4]
   28d66:	4630      	mov	r0, r6
   28d68:	9903      	ldr	r1, [sp, #12]
   28d6a:	f007 fefe 	bl	30b6a <strncmp>
   28d6e:	b980      	cbnz	r0, 28d92 <__gethex+0xbe>
   28d70:	b94d      	cbnz	r5, 28d86 <__gethex+0xb2>
   28d72:	9b01      	ldr	r3, [sp, #4]
   28d74:	18f5      	adds	r5, r6, r3
   28d76:	462a      	mov	r2, r5
   28d78:	4616      	mov	r6, r2
   28d7a:	3201      	adds	r2, #1
   28d7c:	7830      	ldrb	r0, [r6, #0]
   28d7e:	f008 f869 	bl	30e54 <__hexdig_fun>
   28d82:	2800      	cmp	r0, #0
   28d84:	d1f8      	bne.n	28d78 <__gethex+0xa4>
   28d86:	1bad      	subs	r5, r5, r6
   28d88:	00ad      	lsls	r5, r5, #2
   28d8a:	e004      	b.n	28d96 <__gethex+0xc2>
   28d8c:	2400      	movs	r4, #0
   28d8e:	4625      	mov	r5, r4
   28d90:	e7e0      	b.n	28d54 <__gethex+0x80>
   28d92:	2d00      	cmp	r5, #0
   28d94:	d1f7      	bne.n	28d86 <__gethex+0xb2>
   28d96:	7833      	ldrb	r3, [r6, #0]
   28d98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28d9c:	2b50      	cmp	r3, #80	; 0x50
   28d9e:	d138      	bne.n	28e12 <__gethex+0x13e>
   28da0:	7873      	ldrb	r3, [r6, #1]
   28da2:	2b2b      	cmp	r3, #43	; 0x2b
   28da4:	d02a      	beq.n	28dfc <__gethex+0x128>
   28da6:	2b2d      	cmp	r3, #45	; 0x2d
   28da8:	d02c      	beq.n	28e04 <__gethex+0x130>
   28daa:	1c71      	adds	r1, r6, #1
   28dac:	f04f 0900 	mov.w	r9, #0
   28db0:	7808      	ldrb	r0, [r1, #0]
   28db2:	f008 f84f 	bl	30e54 <__hexdig_fun>
   28db6:	1e43      	subs	r3, r0, #1
   28db8:	b2db      	uxtb	r3, r3
   28dba:	2b18      	cmp	r3, #24
   28dbc:	d829      	bhi.n	28e12 <__gethex+0x13e>
   28dbe:	f1a0 0210 	sub.w	r2, r0, #16
   28dc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28dc6:	f008 f845 	bl	30e54 <__hexdig_fun>
   28dca:	1e43      	subs	r3, r0, #1
   28dcc:	b2db      	uxtb	r3, r3
   28dce:	2b18      	cmp	r3, #24
   28dd0:	d91b      	bls.n	28e0a <__gethex+0x136>
   28dd2:	f1b9 0f00 	cmp.w	r9, #0
   28dd6:	d000      	beq.n	28dda <__gethex+0x106>
   28dd8:	4252      	negs	r2, r2
   28dda:	4415      	add	r5, r2
   28ddc:	f8cb 1000 	str.w	r1, [fp]
   28de0:	b1cc      	cbz	r4, 28e16 <__gethex+0x142>
   28de2:	f1ba 0f00 	cmp.w	sl, #0
   28de6:	bf0c      	ite	eq
   28de8:	2606      	moveq	r6, #6
   28dea:	2600      	movne	r6, #0
   28dec:	4630      	mov	r0, r6
   28dee:	b00b      	add	sp, #44	; 0x2c
   28df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28df4:	463e      	mov	r6, r7
   28df6:	4625      	mov	r5, r4
   28df8:	2401      	movs	r4, #1
   28dfa:	e7cc      	b.n	28d96 <__gethex+0xc2>
   28dfc:	f04f 0900 	mov.w	r9, #0
   28e00:	1cb1      	adds	r1, r6, #2
   28e02:	e7d5      	b.n	28db0 <__gethex+0xdc>
   28e04:	f04f 0901 	mov.w	r9, #1
   28e08:	e7fa      	b.n	28e00 <__gethex+0x12c>
   28e0a:	230a      	movs	r3, #10
   28e0c:	fb03 0002 	mla	r0, r3, r2, r0
   28e10:	e7d5      	b.n	28dbe <__gethex+0xea>
   28e12:	4631      	mov	r1, r6
   28e14:	e7e2      	b.n	28ddc <__gethex+0x108>
   28e16:	1bf3      	subs	r3, r6, r7
   28e18:	4621      	mov	r1, r4
   28e1a:	3b01      	subs	r3, #1
   28e1c:	2b07      	cmp	r3, #7
   28e1e:	dc0a      	bgt.n	28e36 <__gethex+0x162>
   28e20:	9802      	ldr	r0, [sp, #8]
   28e22:	f000 f9a9 	bl	29178 <_Balloc>
   28e26:	4604      	mov	r4, r0
   28e28:	b940      	cbnz	r0, 28e3c <__gethex+0x168>
   28e2a:	4b5b      	ldr	r3, [pc, #364]	; (28f98 <__gethex+0x2c4>)
   28e2c:	4602      	mov	r2, r0
   28e2e:	21de      	movs	r1, #222	; 0xde
   28e30:	485a      	ldr	r0, [pc, #360]	; (28f9c <__gethex+0x2c8>)
   28e32:	f001 f957 	bl	2a0e4 <__assert_func>
   28e36:	3101      	adds	r1, #1
   28e38:	105b      	asrs	r3, r3, #1
   28e3a:	e7ef      	b.n	28e1c <__gethex+0x148>
   28e3c:	f04f 0b00 	mov.w	fp, #0
   28e40:	9b01      	ldr	r3, [sp, #4]
   28e42:	f100 0914 	add.w	r9, r0, #20
   28e46:	f1c3 0301 	rsb	r3, r3, #1
   28e4a:	46da      	mov	sl, fp
   28e4c:	f8cd 9010 	str.w	r9, [sp, #16]
   28e50:	9308      	str	r3, [sp, #32]
   28e52:	42b7      	cmp	r7, r6
   28e54:	d338      	bcc.n	28ec8 <__gethex+0x1f4>
   28e56:	9e04      	ldr	r6, [sp, #16]
   28e58:	4650      	mov	r0, sl
   28e5a:	f846 ab04 	str.w	sl, [r6], #4
   28e5e:	eba6 0609 	sub.w	r6, r6, r9
   28e62:	10b6      	asrs	r6, r6, #2
   28e64:	6126      	str	r6, [r4, #16]
   28e66:	0176      	lsls	r6, r6, #5
   28e68:	f008 f8dc 	bl	31024 <__hi0bits>
   28e6c:	f8d8 7000 	ldr.w	r7, [r8]
   28e70:	1a36      	subs	r6, r6, r0
   28e72:	42be      	cmp	r6, r7
   28e74:	dd60      	ble.n	28f38 <__gethex+0x264>
   28e76:	1bf6      	subs	r6, r6, r7
   28e78:	4620      	mov	r0, r4
   28e7a:	4631      	mov	r1, r6
   28e7c:	f008 f98f 	bl	3119e <__any_on>
   28e80:	4682      	mov	sl, r0
   28e82:	b178      	cbz	r0, 28ea4 <__gethex+0x1d0>
   28e84:	1e73      	subs	r3, r6, #1
   28e86:	f04f 0a01 	mov.w	sl, #1
   28e8a:	1159      	asrs	r1, r3, #5
   28e8c:	f003 021f 	and.w	r2, r3, #31
   28e90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   28e94:	fa0a f202 	lsl.w	r2, sl, r2
   28e98:	420a      	tst	r2, r1
   28e9a:	d003      	beq.n	28ea4 <__gethex+0x1d0>
   28e9c:	4553      	cmp	r3, sl
   28e9e:	dc42      	bgt.n	28f26 <__gethex+0x252>
   28ea0:	f04f 0a02 	mov.w	sl, #2
   28ea4:	4435      	add	r5, r6
   28ea6:	4631      	mov	r1, r6
   28ea8:	4620      	mov	r0, r4
   28eaa:	f007 ff82 	bl	30db2 <rshift>
   28eae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   28eb2:	42ab      	cmp	r3, r5
   28eb4:	da4e      	bge.n	28f54 <__gethex+0x280>
   28eb6:	4621      	mov	r1, r4
   28eb8:	9802      	ldr	r0, [sp, #8]
   28eba:	f000 f99d 	bl	291f8 <_Bfree>
   28ebe:	2300      	movs	r3, #0
   28ec0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   28ec2:	26a3      	movs	r6, #163	; 0xa3
   28ec4:	6013      	str	r3, [r2, #0]
   28ec6:	e791      	b.n	28dec <__gethex+0x118>
   28ec8:	1e73      	subs	r3, r6, #1
   28eca:	9a06      	ldr	r2, [sp, #24]
   28ecc:	9307      	str	r3, [sp, #28]
   28ece:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   28ed2:	4293      	cmp	r3, r2
   28ed4:	d017      	beq.n	28f06 <__gethex+0x232>
   28ed6:	f1bb 0f20 	cmp.w	fp, #32
   28eda:	d106      	bne.n	28eea <__gethex+0x216>
   28edc:	9b04      	ldr	r3, [sp, #16]
   28ede:	f843 ab04 	str.w	sl, [r3], #4
   28ee2:	f04f 0a00 	mov.w	sl, #0
   28ee6:	9304      	str	r3, [sp, #16]
   28ee8:	46d3      	mov	fp, sl
   28eea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   28eee:	f007 ffb1 	bl	30e54 <__hexdig_fun>
   28ef2:	f000 000f 	and.w	r0, r0, #15
   28ef6:	9b07      	ldr	r3, [sp, #28]
   28ef8:	fa00 f00b 	lsl.w	r0, r0, fp
   28efc:	f10b 0b04 	add.w	fp, fp, #4
   28f00:	ea4a 0a00 	orr.w	sl, sl, r0
   28f04:	e00d      	b.n	28f22 <__gethex+0x24e>
   28f06:	1e73      	subs	r3, r6, #1
   28f08:	9a08      	ldr	r2, [sp, #32]
   28f0a:	4413      	add	r3, r2
   28f0c:	42bb      	cmp	r3, r7
   28f0e:	d3e2      	bcc.n	28ed6 <__gethex+0x202>
   28f10:	4618      	mov	r0, r3
   28f12:	9a01      	ldr	r2, [sp, #4]
   28f14:	9903      	ldr	r1, [sp, #12]
   28f16:	9309      	str	r3, [sp, #36]	; 0x24
   28f18:	f007 fe27 	bl	30b6a <strncmp>
   28f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28f1e:	2800      	cmp	r0, #0
   28f20:	d1d9      	bne.n	28ed6 <__gethex+0x202>
   28f22:	461e      	mov	r6, r3
   28f24:	e795      	b.n	28e52 <__gethex+0x17e>
   28f26:	1eb1      	subs	r1, r6, #2
   28f28:	4620      	mov	r0, r4
   28f2a:	f008 f938 	bl	3119e <__any_on>
   28f2e:	2800      	cmp	r0, #0
   28f30:	d0b6      	beq.n	28ea0 <__gethex+0x1cc>
   28f32:	f04f 0a03 	mov.w	sl, #3
   28f36:	e7b5      	b.n	28ea4 <__gethex+0x1d0>
   28f38:	da09      	bge.n	28f4e <__gethex+0x27a>
   28f3a:	1bbe      	subs	r6, r7, r6
   28f3c:	4621      	mov	r1, r4
   28f3e:	9802      	ldr	r0, [sp, #8]
   28f40:	4632      	mov	r2, r6
   28f42:	1bad      	subs	r5, r5, r6
   28f44:	f000 fb26 	bl	29594 <__lshift>
   28f48:	4604      	mov	r4, r0
   28f4a:	f100 0914 	add.w	r9, r0, #20
   28f4e:	f04f 0a00 	mov.w	sl, #0
   28f52:	e7ac      	b.n	28eae <__gethex+0x1da>
   28f54:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28f58:	42ab      	cmp	r3, r5
   28f5a:	dd70      	ble.n	2903e <__gethex+0x36a>
   28f5c:	1b5d      	subs	r5, r3, r5
   28f5e:	42af      	cmp	r7, r5
   28f60:	dc35      	bgt.n	28fce <__gethex+0x2fa>
   28f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28f66:	2b02      	cmp	r3, #2
   28f68:	d029      	beq.n	28fbe <__gethex+0x2ea>
   28f6a:	2b03      	cmp	r3, #3
   28f6c:	d02b      	beq.n	28fc6 <__gethex+0x2f2>
   28f6e:	2b01      	cmp	r3, #1
   28f70:	d11c      	bne.n	28fac <__gethex+0x2d8>
   28f72:	42af      	cmp	r7, r5
   28f74:	d11a      	bne.n	28fac <__gethex+0x2d8>
   28f76:	2f01      	cmp	r7, #1
   28f78:	d112      	bne.n	28fa0 <__gethex+0x2cc>
   28f7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28f7e:	2662      	movs	r6, #98	; 0x62
   28f80:	9a05      	ldr	r2, [sp, #20]
   28f82:	6013      	str	r3, [r2, #0]
   28f84:	2301      	movs	r3, #1
   28f86:	6123      	str	r3, [r4, #16]
   28f88:	f8c9 3000 	str.w	r3, [r9]
   28f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   28f8e:	601c      	str	r4, [r3, #0]
   28f90:	e72c      	b.n	28dec <__gethex+0x118>
   28f92:	bf00      	nop
   28f94:	00032b0c 	.word	0x00032b0c
   28f98:	0003c1c8 	.word	0x0003c1c8
   28f9c:	0003c1d9 	.word	0x0003c1d9
   28fa0:	1e79      	subs	r1, r7, #1
   28fa2:	4620      	mov	r0, r4
   28fa4:	f008 f8fb 	bl	3119e <__any_on>
   28fa8:	2800      	cmp	r0, #0
   28faa:	d1e6      	bne.n	28f7a <__gethex+0x2a6>
   28fac:	4621      	mov	r1, r4
   28fae:	9802      	ldr	r0, [sp, #8]
   28fb0:	f000 f922 	bl	291f8 <_Bfree>
   28fb4:	2300      	movs	r3, #0
   28fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   28fb8:	2650      	movs	r6, #80	; 0x50
   28fba:	6013      	str	r3, [r2, #0]
   28fbc:	e716      	b.n	28dec <__gethex+0x118>
   28fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28fc0:	2b00      	cmp	r3, #0
   28fc2:	d1f3      	bne.n	28fac <__gethex+0x2d8>
   28fc4:	e7d9      	b.n	28f7a <__gethex+0x2a6>
   28fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28fc8:	2b00      	cmp	r3, #0
   28fca:	d1d6      	bne.n	28f7a <__gethex+0x2a6>
   28fcc:	e7ee      	b.n	28fac <__gethex+0x2d8>
   28fce:	1e6e      	subs	r6, r5, #1
   28fd0:	f1ba 0f00 	cmp.w	sl, #0
   28fd4:	d130      	bne.n	29038 <__gethex+0x364>
   28fd6:	b126      	cbz	r6, 28fe2 <__gethex+0x30e>
   28fd8:	4631      	mov	r1, r6
   28fda:	4620      	mov	r0, r4
   28fdc:	f008 f8df 	bl	3119e <__any_on>
   28fe0:	4682      	mov	sl, r0
   28fe2:	1172      	asrs	r2, r6, #5
   28fe4:	2301      	movs	r3, #1
   28fe6:	f006 061f 	and.w	r6, r6, #31
   28fea:	4629      	mov	r1, r5
   28fec:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   28ff0:	4620      	mov	r0, r4
   28ff2:	40b3      	lsls	r3, r6
   28ff4:	1b7f      	subs	r7, r7, r5
   28ff6:	2602      	movs	r6, #2
   28ff8:	4213      	tst	r3, r2
   28ffa:	bf18      	it	ne
   28ffc:	f04a 0a02 	orrne.w	sl, sl, #2
   29000:	f007 fed7 	bl	30db2 <rshift>
   29004:	f8d8 5004 	ldr.w	r5, [r8, #4]
   29008:	f1ba 0f00 	cmp.w	sl, #0
   2900c:	d047      	beq.n	2909e <__gethex+0x3ca>
   2900e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   29012:	2b02      	cmp	r3, #2
   29014:	d015      	beq.n	29042 <__gethex+0x36e>
   29016:	2b03      	cmp	r3, #3
   29018:	d017      	beq.n	2904a <__gethex+0x376>
   2901a:	2b01      	cmp	r3, #1
   2901c:	d109      	bne.n	29032 <__gethex+0x35e>
   2901e:	f01a 0f02 	tst.w	sl, #2
   29022:	d006      	beq.n	29032 <__gethex+0x35e>
   29024:	f8d9 3000 	ldr.w	r3, [r9]
   29028:	ea4a 0a03 	orr.w	sl, sl, r3
   2902c:	f01a 0f01 	tst.w	sl, #1
   29030:	d10e      	bne.n	29050 <__gethex+0x37c>
   29032:	f046 0610 	orr.w	r6, r6, #16
   29036:	e032      	b.n	2909e <__gethex+0x3ca>
   29038:	f04f 0a01 	mov.w	sl, #1
   2903c:	e7d1      	b.n	28fe2 <__gethex+0x30e>
   2903e:	2601      	movs	r6, #1
   29040:	e7e2      	b.n	29008 <__gethex+0x334>
   29042:	9b15      	ldr	r3, [sp, #84]	; 0x54
   29044:	f1c3 0301 	rsb	r3, r3, #1
   29048:	9315      	str	r3, [sp, #84]	; 0x54
   2904a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2904c:	2b00      	cmp	r3, #0
   2904e:	d0f0      	beq.n	29032 <__gethex+0x35e>
   29050:	f8d4 b010 	ldr.w	fp, [r4, #16]
   29054:	f104 0314 	add.w	r3, r4, #20
   29058:	f04f 0c00 	mov.w	ip, #0
   2905c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   29060:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   29064:	4618      	mov	r0, r3
   29066:	f853 2b04 	ldr.w	r2, [r3], #4
   2906a:	f1b2 3fff 	cmp.w	r2, #4294967295
   2906e:	d01b      	beq.n	290a8 <__gethex+0x3d4>
   29070:	3201      	adds	r2, #1
   29072:	6002      	str	r2, [r0, #0]
   29074:	2e02      	cmp	r6, #2
   29076:	f104 0314 	add.w	r3, r4, #20
   2907a:	d13c      	bne.n	290f6 <__gethex+0x422>
   2907c:	f8d8 2000 	ldr.w	r2, [r8]
   29080:	3a01      	subs	r2, #1
   29082:	42ba      	cmp	r2, r7
   29084:	d109      	bne.n	2909a <__gethex+0x3c6>
   29086:	1179      	asrs	r1, r7, #5
   29088:	2201      	movs	r2, #1
   2908a:	f007 071f 	and.w	r7, r7, #31
   2908e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   29092:	fa02 f707 	lsl.w	r7, r2, r7
   29096:	421f      	tst	r7, r3
   29098:	d13a      	bne.n	29110 <__gethex+0x43c>
   2909a:	f046 0620 	orr.w	r6, r6, #32
   2909e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   290a0:	601c      	str	r4, [r3, #0]
   290a2:	9b05      	ldr	r3, [sp, #20]
   290a4:	601d      	str	r5, [r3, #0]
   290a6:	e6a1      	b.n	28dec <__gethex+0x118>
   290a8:	4299      	cmp	r1, r3
   290aa:	f843 cc04 	str.w	ip, [r3, #-4]
   290ae:	d8d9      	bhi.n	29064 <__gethex+0x390>
   290b0:	68a3      	ldr	r3, [r4, #8]
   290b2:	459b      	cmp	fp, r3
   290b4:	db17      	blt.n	290e6 <__gethex+0x412>
   290b6:	6861      	ldr	r1, [r4, #4]
   290b8:	9802      	ldr	r0, [sp, #8]
   290ba:	3101      	adds	r1, #1
   290bc:	f000 f85c 	bl	29178 <_Balloc>
   290c0:	4681      	mov	r9, r0
   290c2:	b918      	cbnz	r0, 290cc <__gethex+0x3f8>
   290c4:	4b1a      	ldr	r3, [pc, #104]	; (29130 <__gethex+0x45c>)
   290c6:	4602      	mov	r2, r0
   290c8:	2184      	movs	r1, #132	; 0x84
   290ca:	e6b1      	b.n	28e30 <__gethex+0x15c>
   290cc:	6922      	ldr	r2, [r4, #16]
   290ce:	f104 010c 	add.w	r1, r4, #12
   290d2:	300c      	adds	r0, #12
   290d4:	3202      	adds	r2, #2
   290d6:	0092      	lsls	r2, r2, #2
   290d8:	f007 fbb3 	bl	30842 <memcpy>
   290dc:	4621      	mov	r1, r4
   290de:	464c      	mov	r4, r9
   290e0:	9802      	ldr	r0, [sp, #8]
   290e2:	f000 f889 	bl	291f8 <_Bfree>
   290e6:	6923      	ldr	r3, [r4, #16]
   290e8:	1c5a      	adds	r2, r3, #1
   290ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   290ee:	6122      	str	r2, [r4, #16]
   290f0:	2201      	movs	r2, #1
   290f2:	615a      	str	r2, [r3, #20]
   290f4:	e7be      	b.n	29074 <__gethex+0x3a0>
   290f6:	6922      	ldr	r2, [r4, #16]
   290f8:	455a      	cmp	r2, fp
   290fa:	dd0b      	ble.n	29114 <__gethex+0x440>
   290fc:	2101      	movs	r1, #1
   290fe:	4620      	mov	r0, r4
   29100:	f007 fe57 	bl	30db2 <rshift>
   29104:	3501      	adds	r5, #1
   29106:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2910a:	42ab      	cmp	r3, r5
   2910c:	f6ff aed3 	blt.w	28eb6 <__gethex+0x1e2>
   29110:	2601      	movs	r6, #1
   29112:	e7c2      	b.n	2909a <__gethex+0x3c6>
   29114:	f017 071f 	ands.w	r7, r7, #31
   29118:	d0fa      	beq.n	29110 <__gethex+0x43c>
   2911a:	4453      	add	r3, sl
   2911c:	f1c7 0720 	rsb	r7, r7, #32
   29120:	f853 0c04 	ldr.w	r0, [r3, #-4]
   29124:	f007 ff7e 	bl	31024 <__hi0bits>
   29128:	42b8      	cmp	r0, r7
   2912a:	dbe7      	blt.n	290fc <__gethex+0x428>
   2912c:	e7f0      	b.n	29110 <__gethex+0x43c>
   2912e:	bf00      	nop
   29130:	0003c1c8 	.word	0x0003c1c8

00029134 <_localeconv_r>:
   29134:	4800      	ldr	r0, [pc, #0]	; (29138 <_localeconv_r+0x4>)
   29136:	4770      	bx	lr
   29138:	2000cbb0 	.word	0x2000cbb0

0002913c <_lseek_r>:
   2913c:	b538      	push	{r3, r4, r5, lr}
   2913e:	4604      	mov	r4, r0
   29140:	4d06      	ldr	r5, [pc, #24]	; (2915c <_lseek_r+0x20>)
   29142:	4608      	mov	r0, r1
   29144:	4611      	mov	r1, r2
   29146:	2200      	movs	r2, #0
   29148:	602a      	str	r2, [r5, #0]
   2914a:	461a      	mov	r2, r3
   2914c:	f002 fefa 	bl	2bf44 <_lseek>
   29150:	1c43      	adds	r3, r0, #1
   29152:	d102      	bne.n	2915a <_lseek_r+0x1e>
   29154:	682b      	ldr	r3, [r5, #0]
   29156:	b103      	cbz	r3, 2915a <_lseek_r+0x1e>
   29158:	6023      	str	r3, [r4, #0]
   2915a:	bd38      	pop	{r3, r4, r5, pc}
   2915c:	2000ebac 	.word	0x2000ebac

00029160 <__malloc_lock>:
   29160:	4801      	ldr	r0, [pc, #4]	; (29168 <__malloc_lock+0x8>)
   29162:	f7e9 b9bd 	b.w	124e0 <__retarget_lock_acquire_recursive>
   29166:	bf00      	nop
   29168:	2000cdf0 	.word	0x2000cdf0

0002916c <__malloc_unlock>:
   2916c:	4801      	ldr	r0, [pc, #4]	; (29174 <__malloc_unlock+0x8>)
   2916e:	f7e9 b9d3 	b.w	12518 <__retarget_lock_release_recursive>
   29172:	bf00      	nop
   29174:	2000cdf0 	.word	0x2000cdf0

00029178 <_Balloc>:
   29178:	b570      	push	{r4, r5, r6, lr}
   2917a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2917c:	4604      	mov	r4, r0
   2917e:	460d      	mov	r5, r1
   29180:	b976      	cbnz	r6, 291a0 <_Balloc+0x28>
   29182:	2010      	movs	r0, #16
   29184:	f7fe ff36 	bl	27ff4 <malloc>
   29188:	4602      	mov	r2, r0
   2918a:	6260      	str	r0, [r4, #36]	; 0x24
   2918c:	b920      	cbnz	r0, 29198 <_Balloc+0x20>
   2918e:	4b18      	ldr	r3, [pc, #96]	; (291f0 <_Balloc+0x78>)
   29190:	2166      	movs	r1, #102	; 0x66
   29192:	4818      	ldr	r0, [pc, #96]	; (291f4 <_Balloc+0x7c>)
   29194:	f000 ffa6 	bl	2a0e4 <__assert_func>
   29198:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2919c:	6006      	str	r6, [r0, #0]
   2919e:	60c6      	str	r6, [r0, #12]
   291a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   291a2:	68f3      	ldr	r3, [r6, #12]
   291a4:	b183      	cbz	r3, 291c8 <_Balloc+0x50>
   291a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291a8:	68db      	ldr	r3, [r3, #12]
   291aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   291ae:	b9b8      	cbnz	r0, 291e0 <_Balloc+0x68>
   291b0:	2101      	movs	r1, #1
   291b2:	4620      	mov	r0, r4
   291b4:	fa01 f605 	lsl.w	r6, r1, r5
   291b8:	1d72      	adds	r2, r6, #5
   291ba:	0092      	lsls	r2, r2, #2
   291bc:	f008 f810 	bl	311e0 <_calloc_r>
   291c0:	b160      	cbz	r0, 291dc <_Balloc+0x64>
   291c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   291c6:	e00e      	b.n	291e6 <_Balloc+0x6e>
   291c8:	2221      	movs	r2, #33	; 0x21
   291ca:	2104      	movs	r1, #4
   291cc:	4620      	mov	r0, r4
   291ce:	f008 f807 	bl	311e0 <_calloc_r>
   291d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   291d4:	60f0      	str	r0, [r6, #12]
   291d6:	68db      	ldr	r3, [r3, #12]
   291d8:	2b00      	cmp	r3, #0
   291da:	d1e4      	bne.n	291a6 <_Balloc+0x2e>
   291dc:	2000      	movs	r0, #0
   291de:	bd70      	pop	{r4, r5, r6, pc}
   291e0:	6802      	ldr	r2, [r0, #0]
   291e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   291e6:	2300      	movs	r3, #0
   291e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   291ec:	e7f7      	b.n	291de <_Balloc+0x66>
   291ee:	bf00      	nop
   291f0:	0003c13d 	.word	0x0003c13d
   291f4:	0003c25b 	.word	0x0003c25b

000291f8 <_Bfree>:
   291f8:	b570      	push	{r4, r5, r6, lr}
   291fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   291fc:	4605      	mov	r5, r0
   291fe:	460c      	mov	r4, r1
   29200:	b976      	cbnz	r6, 29220 <_Bfree+0x28>
   29202:	2010      	movs	r0, #16
   29204:	f7fe fef6 	bl	27ff4 <malloc>
   29208:	4602      	mov	r2, r0
   2920a:	6268      	str	r0, [r5, #36]	; 0x24
   2920c:	b920      	cbnz	r0, 29218 <_Bfree+0x20>
   2920e:	4b09      	ldr	r3, [pc, #36]	; (29234 <_Bfree+0x3c>)
   29210:	218a      	movs	r1, #138	; 0x8a
   29212:	4809      	ldr	r0, [pc, #36]	; (29238 <_Bfree+0x40>)
   29214:	f000 ff66 	bl	2a0e4 <__assert_func>
   29218:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2921c:	6006      	str	r6, [r0, #0]
   2921e:	60c6      	str	r6, [r0, #12]
   29220:	b13c      	cbz	r4, 29232 <_Bfree+0x3a>
   29222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   29224:	6862      	ldr	r2, [r4, #4]
   29226:	68db      	ldr	r3, [r3, #12]
   29228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2922c:	6021      	str	r1, [r4, #0]
   2922e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   29232:	bd70      	pop	{r4, r5, r6, pc}
   29234:	0003c13d 	.word	0x0003c13d
   29238:	0003c25b 	.word	0x0003c25b

0002923c <__multadd>:
   2923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29240:	f101 0c14 	add.w	ip, r1, #20
   29244:	4607      	mov	r7, r0
   29246:	460c      	mov	r4, r1
   29248:	461e      	mov	r6, r3
   2924a:	690d      	ldr	r5, [r1, #16]
   2924c:	2000      	movs	r0, #0
   2924e:	f8dc 3000 	ldr.w	r3, [ip]
   29252:	3001      	adds	r0, #1
   29254:	b299      	uxth	r1, r3
   29256:	4285      	cmp	r5, r0
   29258:	fb02 6101 	mla	r1, r2, r1, r6
   2925c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29260:	ea4f 4311 	mov.w	r3, r1, lsr #16
   29264:	b289      	uxth	r1, r1
   29266:	fb02 3306 	mla	r3, r2, r6, r3
   2926a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2926e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29272:	f84c 1b04 	str.w	r1, [ip], #4
   29276:	dcea      	bgt.n	2924e <__multadd+0x12>
   29278:	b30e      	cbz	r6, 292be <__multadd+0x82>
   2927a:	68a3      	ldr	r3, [r4, #8]
   2927c:	42ab      	cmp	r3, r5
   2927e:	dc19      	bgt.n	292b4 <__multadd+0x78>
   29280:	6861      	ldr	r1, [r4, #4]
   29282:	4638      	mov	r0, r7
   29284:	3101      	adds	r1, #1
   29286:	f7ff ff77 	bl	29178 <_Balloc>
   2928a:	4680      	mov	r8, r0
   2928c:	b928      	cbnz	r0, 2929a <__multadd+0x5e>
   2928e:	4602      	mov	r2, r0
   29290:	4b0c      	ldr	r3, [pc, #48]	; (292c4 <__multadd+0x88>)
   29292:	21b5      	movs	r1, #181	; 0xb5
   29294:	480c      	ldr	r0, [pc, #48]	; (292c8 <__multadd+0x8c>)
   29296:	f000 ff25 	bl	2a0e4 <__assert_func>
   2929a:	6922      	ldr	r2, [r4, #16]
   2929c:	f104 010c 	add.w	r1, r4, #12
   292a0:	300c      	adds	r0, #12
   292a2:	3202      	adds	r2, #2
   292a4:	0092      	lsls	r2, r2, #2
   292a6:	f007 facc 	bl	30842 <memcpy>
   292aa:	4621      	mov	r1, r4
   292ac:	4644      	mov	r4, r8
   292ae:	4638      	mov	r0, r7
   292b0:	f7ff ffa2 	bl	291f8 <_Bfree>
   292b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   292b8:	3501      	adds	r5, #1
   292ba:	615e      	str	r6, [r3, #20]
   292bc:	6125      	str	r5, [r4, #16]
   292be:	4620      	mov	r0, r4
   292c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   292c4:	0003c1c8 	.word	0x0003c1c8
   292c8:	0003c25b 	.word	0x0003c25b

000292cc <__s2b>:
   292cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   292d0:	4615      	mov	r5, r2
   292d2:	461f      	mov	r7, r3
   292d4:	2209      	movs	r2, #9
   292d6:	3308      	adds	r3, #8
   292d8:	460c      	mov	r4, r1
   292da:	4606      	mov	r6, r0
   292dc:	2100      	movs	r1, #0
   292de:	fb93 f3f2 	sdiv	r3, r3, r2
   292e2:	2201      	movs	r2, #1
   292e4:	429a      	cmp	r2, r3
   292e6:	db09      	blt.n	292fc <__s2b+0x30>
   292e8:	4630      	mov	r0, r6
   292ea:	f7ff ff45 	bl	29178 <_Balloc>
   292ee:	b940      	cbnz	r0, 29302 <__s2b+0x36>
   292f0:	4602      	mov	r2, r0
   292f2:	4b19      	ldr	r3, [pc, #100]	; (29358 <__s2b+0x8c>)
   292f4:	21ce      	movs	r1, #206	; 0xce
   292f6:	4819      	ldr	r0, [pc, #100]	; (2935c <__s2b+0x90>)
   292f8:	f000 fef4 	bl	2a0e4 <__assert_func>
   292fc:	0052      	lsls	r2, r2, #1
   292fe:	3101      	adds	r1, #1
   29300:	e7f0      	b.n	292e4 <__s2b+0x18>
   29302:	9b08      	ldr	r3, [sp, #32]
   29304:	2d09      	cmp	r5, #9
   29306:	6143      	str	r3, [r0, #20]
   29308:	f04f 0301 	mov.w	r3, #1
   2930c:	6103      	str	r3, [r0, #16]
   2930e:	dd16      	ble.n	2933e <__s2b+0x72>
   29310:	f104 0909 	add.w	r9, r4, #9
   29314:	442c      	add	r4, r5
   29316:	46c8      	mov	r8, r9
   29318:	f818 3b01 	ldrb.w	r3, [r8], #1
   2931c:	4601      	mov	r1, r0
   2931e:	220a      	movs	r2, #10
   29320:	4630      	mov	r0, r6
   29322:	3b30      	subs	r3, #48	; 0x30
   29324:	f7ff ff8a 	bl	2923c <__multadd>
   29328:	45a0      	cmp	r8, r4
   2932a:	d1f5      	bne.n	29318 <__s2b+0x4c>
   2932c:	f1a5 0408 	sub.w	r4, r5, #8
   29330:	444c      	add	r4, r9
   29332:	1b2d      	subs	r5, r5, r4
   29334:	1963      	adds	r3, r4, r5
   29336:	42bb      	cmp	r3, r7
   29338:	db04      	blt.n	29344 <__s2b+0x78>
   2933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2933e:	340a      	adds	r4, #10
   29340:	2509      	movs	r5, #9
   29342:	e7f6      	b.n	29332 <__s2b+0x66>
   29344:	f814 3b01 	ldrb.w	r3, [r4], #1
   29348:	4601      	mov	r1, r0
   2934a:	220a      	movs	r2, #10
   2934c:	4630      	mov	r0, r6
   2934e:	3b30      	subs	r3, #48	; 0x30
   29350:	f7ff ff74 	bl	2923c <__multadd>
   29354:	e7ee      	b.n	29334 <__s2b+0x68>
   29356:	bf00      	nop
   29358:	0003c1c8 	.word	0x0003c1c8
   2935c:	0003c25b 	.word	0x0003c25b

00029360 <__i2b>:
   29360:	b510      	push	{r4, lr}
   29362:	460c      	mov	r4, r1
   29364:	2101      	movs	r1, #1
   29366:	f7ff ff07 	bl	29178 <_Balloc>
   2936a:	4602      	mov	r2, r0
   2936c:	b928      	cbnz	r0, 2937a <__i2b+0x1a>
   2936e:	4b05      	ldr	r3, [pc, #20]	; (29384 <__i2b+0x24>)
   29370:	f44f 71a0 	mov.w	r1, #320	; 0x140
   29374:	4804      	ldr	r0, [pc, #16]	; (29388 <__i2b+0x28>)
   29376:	f000 feb5 	bl	2a0e4 <__assert_func>
   2937a:	2301      	movs	r3, #1
   2937c:	6144      	str	r4, [r0, #20]
   2937e:	6103      	str	r3, [r0, #16]
   29380:	bd10      	pop	{r4, pc}
   29382:	bf00      	nop
   29384:	0003c1c8 	.word	0x0003c1c8
   29388:	0003c25b 	.word	0x0003c25b

0002938c <__multiply>:
   2938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29390:	4614      	mov	r4, r2
   29392:	690a      	ldr	r2, [r1, #16]
   29394:	460f      	mov	r7, r1
   29396:	b085      	sub	sp, #20
   29398:	6923      	ldr	r3, [r4, #16]
   2939a:	429a      	cmp	r2, r3
   2939c:	bfa2      	ittt	ge
   2939e:	4623      	movge	r3, r4
   293a0:	460c      	movge	r4, r1
   293a2:	461f      	movge	r7, r3
   293a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   293a8:	68a3      	ldr	r3, [r4, #8]
   293aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
   293ae:	6861      	ldr	r1, [r4, #4]
   293b0:	eb0a 0609 	add.w	r6, sl, r9
   293b4:	42b3      	cmp	r3, r6
   293b6:	bfb8      	it	lt
   293b8:	3101      	addlt	r1, #1
   293ba:	f7ff fedd 	bl	29178 <_Balloc>
   293be:	b930      	cbnz	r0, 293ce <__multiply+0x42>
   293c0:	4602      	mov	r2, r0
   293c2:	4b45      	ldr	r3, [pc, #276]	; (294d8 <__multiply+0x14c>)
   293c4:	f240 115d 	movw	r1, #349	; 0x15d
   293c8:	4844      	ldr	r0, [pc, #272]	; (294dc <__multiply+0x150>)
   293ca:	f000 fe8b 	bl	2a0e4 <__assert_func>
   293ce:	f100 0514 	add.w	r5, r0, #20
   293d2:	2200      	movs	r2, #0
   293d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   293d8:	462b      	mov	r3, r5
   293da:	4543      	cmp	r3, r8
   293dc:	d321      	bcc.n	29422 <__multiply+0x96>
   293de:	f107 0114 	add.w	r1, r7, #20
   293e2:	f104 0214 	add.w	r2, r4, #20
   293e6:	f104 0715 	add.w	r7, r4, #21
   293ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   293ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   293f2:	9302      	str	r3, [sp, #8]
   293f4:	1b13      	subs	r3, r2, r4
   293f6:	3b15      	subs	r3, #21
   293f8:	f023 0303 	bic.w	r3, r3, #3
   293fc:	3304      	adds	r3, #4
   293fe:	42ba      	cmp	r2, r7
   29400:	bf38      	it	cc
   29402:	2304      	movcc	r3, #4
   29404:	9301      	str	r3, [sp, #4]
   29406:	9b02      	ldr	r3, [sp, #8]
   29408:	9103      	str	r1, [sp, #12]
   2940a:	428b      	cmp	r3, r1
   2940c:	d80c      	bhi.n	29428 <__multiply+0x9c>
   2940e:	2e00      	cmp	r6, #0
   29410:	dd03      	ble.n	2941a <__multiply+0x8e>
   29412:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   29416:	2b00      	cmp	r3, #0
   29418:	d05b      	beq.n	294d2 <__multiply+0x146>
   2941a:	6106      	str	r6, [r0, #16]
   2941c:	b005      	add	sp, #20
   2941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29422:	f843 2b04 	str.w	r2, [r3], #4
   29426:	e7d8      	b.n	293da <__multiply+0x4e>
   29428:	f8b1 a000 	ldrh.w	sl, [r1]
   2942c:	f1ba 0f00 	cmp.w	sl, #0
   29430:	d024      	beq.n	2947c <__multiply+0xf0>
   29432:	f104 0e14 	add.w	lr, r4, #20
   29436:	46a9      	mov	r9, r5
   29438:	f04f 0c00 	mov.w	ip, #0
   2943c:	f85e 7b04 	ldr.w	r7, [lr], #4
   29440:	f8d9 3000 	ldr.w	r3, [r9]
   29444:	fa1f fb87 	uxth.w	fp, r7
   29448:	4572      	cmp	r2, lr
   2944a:	b29b      	uxth	r3, r3
   2944c:	ea4f 4717 	mov.w	r7, r7, lsr #16
   29450:	fb0a 330b 	mla	r3, sl, fp, r3
   29454:	4463      	add	r3, ip
   29456:	f8d9 c000 	ldr.w	ip, [r9]
   2945a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2945e:	fb0a c707 	mla	r7, sl, r7, ip
   29462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   29466:	b29b      	uxth	r3, r3
   29468:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   2946c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   29470:	f849 3b04 	str.w	r3, [r9], #4
   29474:	d8e2      	bhi.n	2943c <__multiply+0xb0>
   29476:	9b01      	ldr	r3, [sp, #4]
   29478:	f845 c003 	str.w	ip, [r5, r3]
   2947c:	9b03      	ldr	r3, [sp, #12]
   2947e:	3104      	adds	r1, #4
   29480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   29484:	f1b9 0f00 	cmp.w	r9, #0
   29488:	d021      	beq.n	294ce <__multiply+0x142>
   2948a:	682b      	ldr	r3, [r5, #0]
   2948c:	f104 0c14 	add.w	ip, r4, #20
   29490:	46ae      	mov	lr, r5
   29492:	f04f 0a00 	mov.w	sl, #0
   29496:	f8bc b000 	ldrh.w	fp, [ip]
   2949a:	b29b      	uxth	r3, r3
   2949c:	f8be 7002 	ldrh.w	r7, [lr, #2]
   294a0:	fb09 770b 	mla	r7, r9, fp, r7
   294a4:	4457      	add	r7, sl
   294a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   294aa:	f84e 3b04 	str.w	r3, [lr], #4
   294ae:	f85c 3b04 	ldr.w	r3, [ip], #4
   294b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294b6:	f8be 3000 	ldrh.w	r3, [lr]
   294ba:	4562      	cmp	r2, ip
   294bc:	fb09 330a 	mla	r3, r9, sl, r3
   294c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   294c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294c8:	d8e5      	bhi.n	29496 <__multiply+0x10a>
   294ca:	9f01      	ldr	r7, [sp, #4]
   294cc:	51eb      	str	r3, [r5, r7]
   294ce:	3504      	adds	r5, #4
   294d0:	e799      	b.n	29406 <__multiply+0x7a>
   294d2:	3e01      	subs	r6, #1
   294d4:	e79b      	b.n	2940e <__multiply+0x82>
   294d6:	bf00      	nop
   294d8:	0003c1c8 	.word	0x0003c1c8
   294dc:	0003c25b 	.word	0x0003c25b

000294e0 <__pow5mult>:
   294e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   294e4:	4615      	mov	r5, r2
   294e6:	f012 0203 	ands.w	r2, r2, #3
   294ea:	4607      	mov	r7, r0
   294ec:	460e      	mov	r6, r1
   294ee:	d007      	beq.n	29500 <__pow5mult+0x20>
   294f0:	3a01      	subs	r2, #1
   294f2:	4c25      	ldr	r4, [pc, #148]	; (29588 <__pow5mult+0xa8>)
   294f4:	2300      	movs	r3, #0
   294f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   294fa:	f7ff fe9f 	bl	2923c <__multadd>
   294fe:	4606      	mov	r6, r0
   29500:	10ad      	asrs	r5, r5, #2
   29502:	d03d      	beq.n	29580 <__pow5mult+0xa0>
   29504:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   29506:	b97c      	cbnz	r4, 29528 <__pow5mult+0x48>
   29508:	2010      	movs	r0, #16
   2950a:	f7fe fd73 	bl	27ff4 <malloc>
   2950e:	4602      	mov	r2, r0
   29510:	6278      	str	r0, [r7, #36]	; 0x24
   29512:	b928      	cbnz	r0, 29520 <__pow5mult+0x40>
   29514:	4b1d      	ldr	r3, [pc, #116]	; (2958c <__pow5mult+0xac>)
   29516:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2951a:	481d      	ldr	r0, [pc, #116]	; (29590 <__pow5mult+0xb0>)
   2951c:	f000 fde2 	bl	2a0e4 <__assert_func>
   29520:	e9c0 4401 	strd	r4, r4, [r0, #4]
   29524:	6004      	str	r4, [r0, #0]
   29526:	60c4      	str	r4, [r0, #12]
   29528:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   2952c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   29530:	b94c      	cbnz	r4, 29546 <__pow5mult+0x66>
   29532:	f240 2171 	movw	r1, #625	; 0x271
   29536:	4638      	mov	r0, r7
   29538:	f7ff ff12 	bl	29360 <__i2b>
   2953c:	2300      	movs	r3, #0
   2953e:	4604      	mov	r4, r0
   29540:	f8c8 0008 	str.w	r0, [r8, #8]
   29544:	6003      	str	r3, [r0, #0]
   29546:	f04f 0900 	mov.w	r9, #0
   2954a:	07eb      	lsls	r3, r5, #31
   2954c:	d50a      	bpl.n	29564 <__pow5mult+0x84>
   2954e:	4631      	mov	r1, r6
   29550:	4622      	mov	r2, r4
   29552:	4638      	mov	r0, r7
   29554:	f7ff ff1a 	bl	2938c <__multiply>
   29558:	4680      	mov	r8, r0
   2955a:	4631      	mov	r1, r6
   2955c:	4638      	mov	r0, r7
   2955e:	4646      	mov	r6, r8
   29560:	f7ff fe4a 	bl	291f8 <_Bfree>
   29564:	106d      	asrs	r5, r5, #1
   29566:	d00b      	beq.n	29580 <__pow5mult+0xa0>
   29568:	6820      	ldr	r0, [r4, #0]
   2956a:	b938      	cbnz	r0, 2957c <__pow5mult+0x9c>
   2956c:	4622      	mov	r2, r4
   2956e:	4621      	mov	r1, r4
   29570:	4638      	mov	r0, r7
   29572:	f7ff ff0b 	bl	2938c <__multiply>
   29576:	6020      	str	r0, [r4, #0]
   29578:	f8c0 9000 	str.w	r9, [r0]
   2957c:	4604      	mov	r4, r0
   2957e:	e7e4      	b.n	2954a <__pow5mult+0x6a>
   29580:	4630      	mov	r0, r6
   29582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29586:	bf00      	nop
   29588:	00032b18 	.word	0x00032b18
   2958c:	0003c13d 	.word	0x0003c13d
   29590:	0003c25b 	.word	0x0003c25b

00029594 <__lshift>:
   29594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29598:	460c      	mov	r4, r1
   2959a:	4607      	mov	r7, r0
   2959c:	4691      	mov	r9, r2
   2959e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   295a2:	6923      	ldr	r3, [r4, #16]
   295a4:	6849      	ldr	r1, [r1, #4]
   295a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   295aa:	68a3      	ldr	r3, [r4, #8]
   295ac:	f108 0601 	add.w	r6, r8, #1
   295b0:	42b3      	cmp	r3, r6
   295b2:	db0b      	blt.n	295cc <__lshift+0x38>
   295b4:	4638      	mov	r0, r7
   295b6:	f7ff fddf 	bl	29178 <_Balloc>
   295ba:	4605      	mov	r5, r0
   295bc:	b948      	cbnz	r0, 295d2 <__lshift+0x3e>
   295be:	4602      	mov	r2, r0
   295c0:	4b28      	ldr	r3, [pc, #160]	; (29664 <__lshift+0xd0>)
   295c2:	f240 11d9 	movw	r1, #473	; 0x1d9
   295c6:	4828      	ldr	r0, [pc, #160]	; (29668 <__lshift+0xd4>)
   295c8:	f000 fd8c 	bl	2a0e4 <__assert_func>
   295cc:	3101      	adds	r1, #1
   295ce:	005b      	lsls	r3, r3, #1
   295d0:	e7ee      	b.n	295b0 <__lshift+0x1c>
   295d2:	2300      	movs	r3, #0
   295d4:	f100 0114 	add.w	r1, r0, #20
   295d8:	f100 0210 	add.w	r2, r0, #16
   295dc:	4618      	mov	r0, r3
   295de:	4553      	cmp	r3, sl
   295e0:	db33      	blt.n	2964a <__lshift+0xb6>
   295e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   295e6:	f104 0314 	add.w	r3, r4, #20
   295ea:	6920      	ldr	r0, [r4, #16]
   295ec:	f019 091f 	ands.w	r9, r9, #31
   295f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   295f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   295f8:	d02b      	beq.n	29652 <__lshift+0xbe>
   295fa:	f1c9 0e20 	rsb	lr, r9, #32
   295fe:	468a      	mov	sl, r1
   29600:	2200      	movs	r2, #0
   29602:	6818      	ldr	r0, [r3, #0]
   29604:	fa00 f009 	lsl.w	r0, r0, r9
   29608:	4310      	orrs	r0, r2
   2960a:	f84a 0b04 	str.w	r0, [sl], #4
   2960e:	f853 2b04 	ldr.w	r2, [r3], #4
   29612:	459c      	cmp	ip, r3
   29614:	fa22 f20e 	lsr.w	r2, r2, lr
   29618:	d8f3      	bhi.n	29602 <__lshift+0x6e>
   2961a:	ebac 0304 	sub.w	r3, ip, r4
   2961e:	f104 0015 	add.w	r0, r4, #21
   29622:	3b15      	subs	r3, #21
   29624:	f023 0303 	bic.w	r3, r3, #3
   29628:	3304      	adds	r3, #4
   2962a:	4584      	cmp	ip, r0
   2962c:	bf38      	it	cc
   2962e:	2304      	movcc	r3, #4
   29630:	50ca      	str	r2, [r1, r3]
   29632:	b10a      	cbz	r2, 29638 <__lshift+0xa4>
   29634:	f108 0602 	add.w	r6, r8, #2
   29638:	3e01      	subs	r6, #1
   2963a:	4638      	mov	r0, r7
   2963c:	4621      	mov	r1, r4
   2963e:	612e      	str	r6, [r5, #16]
   29640:	f7ff fdda 	bl	291f8 <_Bfree>
   29644:	4628      	mov	r0, r5
   29646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2964a:	3301      	adds	r3, #1
   2964c:	f842 0f04 	str.w	r0, [r2, #4]!
   29650:	e7c5      	b.n	295de <__lshift+0x4a>
   29652:	3904      	subs	r1, #4
   29654:	f853 2b04 	ldr.w	r2, [r3], #4
   29658:	459c      	cmp	ip, r3
   2965a:	f841 2f04 	str.w	r2, [r1, #4]!
   2965e:	d8f9      	bhi.n	29654 <__lshift+0xc0>
   29660:	e7ea      	b.n	29638 <__lshift+0xa4>
   29662:	bf00      	nop
   29664:	0003c1c8 	.word	0x0003c1c8
   29668:	0003c25b 	.word	0x0003c25b

0002966c <__mdiff>:
   2966c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29670:	4689      	mov	r9, r1
   29672:	4606      	mov	r6, r0
   29674:	4611      	mov	r1, r2
   29676:	4614      	mov	r4, r2
   29678:	4648      	mov	r0, r9
   2967a:	f007 fd22 	bl	310c2 <__mcmp>
   2967e:	1e05      	subs	r5, r0, #0
   29680:	d112      	bne.n	296a8 <__mdiff+0x3c>
   29682:	4629      	mov	r1, r5
   29684:	4630      	mov	r0, r6
   29686:	f7ff fd77 	bl	29178 <_Balloc>
   2968a:	4602      	mov	r2, r0
   2968c:	b928      	cbnz	r0, 2969a <__mdiff+0x2e>
   2968e:	4b40      	ldr	r3, [pc, #256]	; (29790 <__mdiff+0x124>)
   29690:	f240 2132 	movw	r1, #562	; 0x232
   29694:	483f      	ldr	r0, [pc, #252]	; (29794 <__mdiff+0x128>)
   29696:	f000 fd25 	bl	2a0e4 <__assert_func>
   2969a:	2301      	movs	r3, #1
   2969c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   296a0:	4610      	mov	r0, r2
   296a2:	b003      	add	sp, #12
   296a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296a8:	bfbc      	itt	lt
   296aa:	464b      	movlt	r3, r9
   296ac:	46a1      	movlt	r9, r4
   296ae:	4630      	mov	r0, r6
   296b0:	bfb8      	it	lt
   296b2:	2501      	movlt	r5, #1
   296b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   296b8:	bfb4      	ite	lt
   296ba:	461c      	movlt	r4, r3
   296bc:	2500      	movge	r5, #0
   296be:	f7ff fd5b 	bl	29178 <_Balloc>
   296c2:	4602      	mov	r2, r0
   296c4:	b918      	cbnz	r0, 296ce <__mdiff+0x62>
   296c6:	4b32      	ldr	r3, [pc, #200]	; (29790 <__mdiff+0x124>)
   296c8:	f44f 7110 	mov.w	r1, #576	; 0x240
   296cc:	e7e2      	b.n	29694 <__mdiff+0x28>
   296ce:	f8d9 7010 	ldr.w	r7, [r9, #16]
   296d2:	f104 0e14 	add.w	lr, r4, #20
   296d6:	6926      	ldr	r6, [r4, #16]
   296d8:	f100 0b14 	add.w	fp, r0, #20
   296dc:	60c5      	str	r5, [r0, #12]
   296de:	f109 0514 	add.w	r5, r9, #20
   296e2:	f109 0310 	add.w	r3, r9, #16
   296e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   296ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   296ee:	46d9      	mov	r9, fp
   296f0:	f04f 0c00 	mov.w	ip, #0
   296f4:	9301      	str	r3, [sp, #4]
   296f6:	9b01      	ldr	r3, [sp, #4]
   296f8:	f85e 0b04 	ldr.w	r0, [lr], #4
   296fc:	f853 af04 	ldr.w	sl, [r3, #4]!
   29700:	b281      	uxth	r1, r0
   29702:	4576      	cmp	r6, lr
   29704:	9301      	str	r3, [sp, #4]
   29706:	fa1f f38a 	uxth.w	r3, sl
   2970a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2970e:	eba3 0301 	sub.w	r3, r3, r1
   29712:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   29716:	4463      	add	r3, ip
   29718:	eb00 4023 	add.w	r0, r0, r3, asr #16
   2971c:	b29b      	uxth	r3, r3
   2971e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   29722:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   29726:	f849 3b04 	str.w	r3, [r9], #4
   2972a:	d8e4      	bhi.n	296f6 <__mdiff+0x8a>
   2972c:	1b33      	subs	r3, r6, r4
   2972e:	3415      	adds	r4, #21
   29730:	3b15      	subs	r3, #21
   29732:	f023 0303 	bic.w	r3, r3, #3
   29736:	3304      	adds	r3, #4
   29738:	42a6      	cmp	r6, r4
   2973a:	bf38      	it	cc
   2973c:	2304      	movcc	r3, #4
   2973e:	441d      	add	r5, r3
   29740:	445b      	add	r3, fp
   29742:	462c      	mov	r4, r5
   29744:	461e      	mov	r6, r3
   29746:	4544      	cmp	r4, r8
   29748:	d30e      	bcc.n	29768 <__mdiff+0xfc>
   2974a:	f108 0103 	add.w	r1, r8, #3
   2974e:	1b49      	subs	r1, r1, r5
   29750:	3d03      	subs	r5, #3
   29752:	f021 0103 	bic.w	r1, r1, #3
   29756:	45a8      	cmp	r8, r5
   29758:	bf38      	it	cc
   2975a:	2100      	movcc	r1, #0
   2975c:	440b      	add	r3, r1
   2975e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   29762:	b199      	cbz	r1, 2978c <__mdiff+0x120>
   29764:	6117      	str	r7, [r2, #16]
   29766:	e79b      	b.n	296a0 <__mdiff+0x34>
   29768:	f854 1b04 	ldr.w	r1, [r4], #4
   2976c:	46e6      	mov	lr, ip
   2976e:	fa1f fc81 	uxth.w	ip, r1
   29772:	0c08      	lsrs	r0, r1, #16
   29774:	4471      	add	r1, lr
   29776:	44f4      	add	ip, lr
   29778:	b289      	uxth	r1, r1
   2977a:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2977e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   29782:	ea4f 4c20 	mov.w	ip, r0, asr #16
   29786:	f846 1b04 	str.w	r1, [r6], #4
   2978a:	e7dc      	b.n	29746 <__mdiff+0xda>
   2978c:	3f01      	subs	r7, #1
   2978e:	e7e6      	b.n	2975e <__mdiff+0xf2>
   29790:	0003c1c8 	.word	0x0003c1c8
   29794:	0003c25b 	.word	0x0003c25b

00029798 <__ulp>:
   29798:	4b0e      	ldr	r3, [pc, #56]	; (297d4 <__ulp+0x3c>)
   2979a:	400b      	ands	r3, r1
   2979c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   297a0:	2b00      	cmp	r3, #0
   297a2:	dc08      	bgt.n	297b6 <__ulp+0x1e>
   297a4:	425b      	negs	r3, r3
   297a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   297aa:	ea4f 5223 	mov.w	r2, r3, asr #20
   297ae:	da04      	bge.n	297ba <__ulp+0x22>
   297b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   297b4:	4113      	asrs	r3, r2
   297b6:	2200      	movs	r2, #0
   297b8:	e008      	b.n	297cc <__ulp+0x34>
   297ba:	f1a2 0314 	sub.w	r3, r2, #20
   297be:	2b1e      	cmp	r3, #30
   297c0:	bfd6      	itet	le
   297c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   297c6:	2201      	movgt	r2, #1
   297c8:	40da      	lsrle	r2, r3
   297ca:	2300      	movs	r3, #0
   297cc:	4619      	mov	r1, r3
   297ce:	4610      	mov	r0, r2
   297d0:	4770      	bx	lr
   297d2:	bf00      	nop
   297d4:	7ff00000 	.word	0x7ff00000

000297d8 <__b2d>:
   297d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   297da:	6902      	ldr	r2, [r0, #16]
   297dc:	f100 0614 	add.w	r6, r0, #20
   297e0:	4f21      	ldr	r7, [pc, #132]	; (29868 <__b2d+0x90>)
   297e2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   297e6:	f852 4c04 	ldr.w	r4, [r2, #-4]
   297ea:	1f15      	subs	r5, r2, #4
   297ec:	4620      	mov	r0, r4
   297ee:	f007 fc19 	bl	31024 <__hi0bits>
   297f2:	4603      	mov	r3, r0
   297f4:	f1c0 0020 	rsb	r0, r0, #32
   297f8:	2b0a      	cmp	r3, #10
   297fa:	6008      	str	r0, [r1, #0]
   297fc:	dc13      	bgt.n	29826 <__b2d+0x4e>
   297fe:	42ae      	cmp	r6, r5
   29800:	f1c3 0c0b 	rsb	ip, r3, #11
   29804:	f103 0315 	add.w	r3, r3, #21
   29808:	bf34      	ite	cc
   2980a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2980e:	2200      	movcs	r2, #0
   29810:	fa24 fe0c 	lsr.w	lr, r4, ip
   29814:	fa04 f303 	lsl.w	r3, r4, r3
   29818:	fa22 f20c 	lsr.w	r2, r2, ip
   2981c:	ea4e 0107 	orr.w	r1, lr, r7
   29820:	431a      	orrs	r2, r3
   29822:	4610      	mov	r0, r2
   29824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29826:	42ae      	cmp	r6, r5
   29828:	bf36      	itet	cc
   2982a:	f1a2 0508 	subcc.w	r5, r2, #8
   2982e:	2200      	movcs	r2, #0
   29830:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   29834:	3b0b      	subs	r3, #11
   29836:	d014      	beq.n	29862 <__b2d+0x8a>
   29838:	f1c3 0720 	rsb	r7, r3, #32
   2983c:	409c      	lsls	r4, r3
   2983e:	42b5      	cmp	r5, r6
   29840:	fa22 f107 	lsr.w	r1, r2, r7
   29844:	fa02 f203 	lsl.w	r2, r2, r3
   29848:	ea44 0401 	orr.w	r4, r4, r1
   2984c:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   29850:	bf8c      	ite	hi
   29852:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   29856:	2400      	movls	r4, #0
   29858:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2985c:	40fc      	lsrs	r4, r7
   2985e:	4322      	orrs	r2, r4
   29860:	e7df      	b.n	29822 <__b2d+0x4a>
   29862:	ea44 0107 	orr.w	r1, r4, r7
   29866:	e7dc      	b.n	29822 <__b2d+0x4a>
   29868:	3ff00000 	.word	0x3ff00000

0002986c <__d2b>:
   2986c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   29870:	2101      	movs	r1, #1
   29872:	4690      	mov	r8, r2
   29874:	4699      	mov	r9, r3
   29876:	9e08      	ldr	r6, [sp, #32]
   29878:	f7ff fc7e 	bl	29178 <_Balloc>
   2987c:	4604      	mov	r4, r0
   2987e:	b930      	cbnz	r0, 2988e <__d2b+0x22>
   29880:	4602      	mov	r2, r0
   29882:	4b24      	ldr	r3, [pc, #144]	; (29914 <__d2b+0xa8>)
   29884:	f240 310a 	movw	r1, #778	; 0x30a
   29888:	4823      	ldr	r0, [pc, #140]	; (29918 <__d2b+0xac>)
   2988a:	f000 fc2b 	bl	2a0e4 <__assert_func>
   2988e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   29892:	f3c9 0313 	ubfx	r3, r9, #0, #20
   29896:	b10d      	cbz	r5, 2989c <__d2b+0x30>
   29898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2989c:	9301      	str	r3, [sp, #4]
   2989e:	f1b8 0300 	subs.w	r3, r8, #0
   298a2:	d024      	beq.n	298ee <__d2b+0x82>
   298a4:	4668      	mov	r0, sp
   298a6:	9300      	str	r3, [sp, #0]
   298a8:	f007 fbde 	bl	31068 <__lo0bits>
   298ac:	e9dd 1200 	ldrd	r1, r2, [sp]
   298b0:	b1d8      	cbz	r0, 298ea <__d2b+0x7e>
   298b2:	f1c0 0320 	rsb	r3, r0, #32
   298b6:	fa02 f303 	lsl.w	r3, r2, r3
   298ba:	40c2      	lsrs	r2, r0
   298bc:	430b      	orrs	r3, r1
   298be:	9201      	str	r2, [sp, #4]
   298c0:	6163      	str	r3, [r4, #20]
   298c2:	9b01      	ldr	r3, [sp, #4]
   298c4:	2b00      	cmp	r3, #0
   298c6:	61a3      	str	r3, [r4, #24]
   298c8:	bf0c      	ite	eq
   298ca:	2201      	moveq	r2, #1
   298cc:	2202      	movne	r2, #2
   298ce:	6122      	str	r2, [r4, #16]
   298d0:	b1ad      	cbz	r5, 298fe <__d2b+0x92>
   298d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   298d6:	4405      	add	r5, r0
   298d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   298dc:	6035      	str	r5, [r6, #0]
   298de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   298e0:	6018      	str	r0, [r3, #0]
   298e2:	4620      	mov	r0, r4
   298e4:	b002      	add	sp, #8
   298e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   298ea:	6161      	str	r1, [r4, #20]
   298ec:	e7e9      	b.n	298c2 <__d2b+0x56>
   298ee:	a801      	add	r0, sp, #4
   298f0:	f007 fbba 	bl	31068 <__lo0bits>
   298f4:	9b01      	ldr	r3, [sp, #4]
   298f6:	3020      	adds	r0, #32
   298f8:	2201      	movs	r2, #1
   298fa:	6163      	str	r3, [r4, #20]
   298fc:	e7e7      	b.n	298ce <__d2b+0x62>
   298fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   29902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   29906:	6030      	str	r0, [r6, #0]
   29908:	6918      	ldr	r0, [r3, #16]
   2990a:	f007 fb8b 	bl	31024 <__hi0bits>
   2990e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   29912:	e7e4      	b.n	298de <__d2b+0x72>
   29914:	0003c1c8 	.word	0x0003c1c8
   29918:	0003c25b 	.word	0x0003c25b

0002991c <_svfiprintf_r>:
   2991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29920:	4698      	mov	r8, r3
   29922:	898b      	ldrh	r3, [r1, #12]
   29924:	b09d      	sub	sp, #116	; 0x74
   29926:	4607      	mov	r7, r0
   29928:	061b      	lsls	r3, r3, #24
   2992a:	460d      	mov	r5, r1
   2992c:	4614      	mov	r4, r2
   2992e:	d510      	bpl.n	29952 <_svfiprintf_r+0x36>
   29930:	690b      	ldr	r3, [r1, #16]
   29932:	b973      	cbnz	r3, 29952 <_svfiprintf_r+0x36>
   29934:	2140      	movs	r1, #64	; 0x40
   29936:	f7fe fbb7 	bl	280a8 <_malloc_r>
   2993a:	6028      	str	r0, [r5, #0]
   2993c:	6128      	str	r0, [r5, #16]
   2993e:	b930      	cbnz	r0, 2994e <_svfiprintf_r+0x32>
   29940:	230c      	movs	r3, #12
   29942:	603b      	str	r3, [r7, #0]
   29944:	f04f 30ff 	mov.w	r0, #4294967295
   29948:	b01d      	add	sp, #116	; 0x74
   2994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2994e:	2340      	movs	r3, #64	; 0x40
   29950:	616b      	str	r3, [r5, #20]
   29952:	2300      	movs	r3, #0
   29954:	f8cd 800c 	str.w	r8, [sp, #12]
   29958:	f04f 0901 	mov.w	r9, #1
   2995c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 29b00 <_svfiprintf_r+0x1e4>
   29960:	9309      	str	r3, [sp, #36]	; 0x24
   29962:	2320      	movs	r3, #32
   29964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   29968:	2330      	movs	r3, #48	; 0x30
   2996a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2996e:	4623      	mov	r3, r4
   29970:	469a      	mov	sl, r3
   29972:	f813 2b01 	ldrb.w	r2, [r3], #1
   29976:	b10a      	cbz	r2, 2997c <_svfiprintf_r+0x60>
   29978:	2a25      	cmp	r2, #37	; 0x25
   2997a:	d1f9      	bne.n	29970 <_svfiprintf_r+0x54>
   2997c:	ebba 0b04 	subs.w	fp, sl, r4
   29980:	d00b      	beq.n	2999a <_svfiprintf_r+0x7e>
   29982:	465b      	mov	r3, fp
   29984:	4622      	mov	r2, r4
   29986:	4629      	mov	r1, r5
   29988:	4638      	mov	r0, r7
   2998a:	f007 fc5c 	bl	31246 <__ssputs_r>
   2998e:	3001      	adds	r0, #1
   29990:	f000 80a7 	beq.w	29ae2 <_svfiprintf_r+0x1c6>
   29994:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29996:	445a      	add	r2, fp
   29998:	9209      	str	r2, [sp, #36]	; 0x24
   2999a:	f89a 3000 	ldrb.w	r3, [sl]
   2999e:	2b00      	cmp	r3, #0
   299a0:	f000 809f 	beq.w	29ae2 <_svfiprintf_r+0x1c6>
   299a4:	2300      	movs	r3, #0
   299a6:	f04f 32ff 	mov.w	r2, #4294967295
   299aa:	f10a 0a01 	add.w	sl, sl, #1
   299ae:	9304      	str	r3, [sp, #16]
   299b0:	9307      	str	r3, [sp, #28]
   299b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   299b6:	931a      	str	r3, [sp, #104]	; 0x68
   299b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   299bc:	4654      	mov	r4, sl
   299be:	2205      	movs	r2, #5
   299c0:	484f      	ldr	r0, [pc, #316]	; (29b00 <_svfiprintf_r+0x1e4>)
   299c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   299c6:	f006 ff1e 	bl	30806 <memchr>
   299ca:	9a04      	ldr	r2, [sp, #16]
   299cc:	b9d8      	cbnz	r0, 29a06 <_svfiprintf_r+0xea>
   299ce:	06d0      	lsls	r0, r2, #27
   299d0:	bf44      	itt	mi
   299d2:	2320      	movmi	r3, #32
   299d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   299d8:	0711      	lsls	r1, r2, #28
   299da:	bf44      	itt	mi
   299dc:	232b      	movmi	r3, #43	; 0x2b
   299de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   299e2:	f89a 3000 	ldrb.w	r3, [sl]
   299e6:	2b2a      	cmp	r3, #42	; 0x2a
   299e8:	d015      	beq.n	29a16 <_svfiprintf_r+0xfa>
   299ea:	9a07      	ldr	r2, [sp, #28]
   299ec:	4654      	mov	r4, sl
   299ee:	2000      	movs	r0, #0
   299f0:	f04f 0c0a 	mov.w	ip, #10
   299f4:	4621      	mov	r1, r4
   299f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   299fa:	3b30      	subs	r3, #48	; 0x30
   299fc:	2b09      	cmp	r3, #9
   299fe:	d94b      	bls.n	29a98 <_svfiprintf_r+0x17c>
   29a00:	b1b0      	cbz	r0, 29a30 <_svfiprintf_r+0x114>
   29a02:	9207      	str	r2, [sp, #28]
   29a04:	e014      	b.n	29a30 <_svfiprintf_r+0x114>
   29a06:	eba0 0308 	sub.w	r3, r0, r8
   29a0a:	46a2      	mov	sl, r4
   29a0c:	fa09 f303 	lsl.w	r3, r9, r3
   29a10:	4313      	orrs	r3, r2
   29a12:	9304      	str	r3, [sp, #16]
   29a14:	e7d2      	b.n	299bc <_svfiprintf_r+0xa0>
   29a16:	9b03      	ldr	r3, [sp, #12]
   29a18:	1d19      	adds	r1, r3, #4
   29a1a:	681b      	ldr	r3, [r3, #0]
   29a1c:	2b00      	cmp	r3, #0
   29a1e:	9103      	str	r1, [sp, #12]
   29a20:	bfbb      	ittet	lt
   29a22:	425b      	neglt	r3, r3
   29a24:	f042 0202 	orrlt.w	r2, r2, #2
   29a28:	9307      	strge	r3, [sp, #28]
   29a2a:	9307      	strlt	r3, [sp, #28]
   29a2c:	bfb8      	it	lt
   29a2e:	9204      	strlt	r2, [sp, #16]
   29a30:	7823      	ldrb	r3, [r4, #0]
   29a32:	2b2e      	cmp	r3, #46	; 0x2e
   29a34:	d10a      	bne.n	29a4c <_svfiprintf_r+0x130>
   29a36:	7863      	ldrb	r3, [r4, #1]
   29a38:	2b2a      	cmp	r3, #42	; 0x2a
   29a3a:	d132      	bne.n	29aa2 <_svfiprintf_r+0x186>
   29a3c:	9b03      	ldr	r3, [sp, #12]
   29a3e:	3402      	adds	r4, #2
   29a40:	1d1a      	adds	r2, r3, #4
   29a42:	681b      	ldr	r3, [r3, #0]
   29a44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   29a48:	9203      	str	r2, [sp, #12]
   29a4a:	9305      	str	r3, [sp, #20]
   29a4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 29b04 <_svfiprintf_r+0x1e8>
   29a50:	2203      	movs	r2, #3
   29a52:	7821      	ldrb	r1, [r4, #0]
   29a54:	4650      	mov	r0, sl
   29a56:	f006 fed6 	bl	30806 <memchr>
   29a5a:	b138      	cbz	r0, 29a6c <_svfiprintf_r+0x150>
   29a5c:	eba0 000a 	sub.w	r0, r0, sl
   29a60:	2240      	movs	r2, #64	; 0x40
   29a62:	9b04      	ldr	r3, [sp, #16]
   29a64:	3401      	adds	r4, #1
   29a66:	4082      	lsls	r2, r0
   29a68:	4313      	orrs	r3, r2
   29a6a:	9304      	str	r3, [sp, #16]
   29a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
   29a70:	2206      	movs	r2, #6
   29a72:	4825      	ldr	r0, [pc, #148]	; (29b08 <_svfiprintf_r+0x1ec>)
   29a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29a78:	f006 fec5 	bl	30806 <memchr>
   29a7c:	2800      	cmp	r0, #0
   29a7e:	d036      	beq.n	29aee <_svfiprintf_r+0x1d2>
   29a80:	4b22      	ldr	r3, [pc, #136]	; (29b0c <_svfiprintf_r+0x1f0>)
   29a82:	bb1b      	cbnz	r3, 29acc <_svfiprintf_r+0x1b0>
   29a84:	9b03      	ldr	r3, [sp, #12]
   29a86:	3307      	adds	r3, #7
   29a88:	f023 0307 	bic.w	r3, r3, #7
   29a8c:	3308      	adds	r3, #8
   29a8e:	9303      	str	r3, [sp, #12]
   29a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29a92:	4433      	add	r3, r6
   29a94:	9309      	str	r3, [sp, #36]	; 0x24
   29a96:	e76a      	b.n	2996e <_svfiprintf_r+0x52>
   29a98:	fb0c 3202 	mla	r2, ip, r2, r3
   29a9c:	460c      	mov	r4, r1
   29a9e:	2001      	movs	r0, #1
   29aa0:	e7a8      	b.n	299f4 <_svfiprintf_r+0xd8>
   29aa2:	2300      	movs	r3, #0
   29aa4:	3401      	adds	r4, #1
   29aa6:	f04f 0c0a 	mov.w	ip, #10
   29aaa:	4619      	mov	r1, r3
   29aac:	9305      	str	r3, [sp, #20]
   29aae:	4620      	mov	r0, r4
   29ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
   29ab4:	3a30      	subs	r2, #48	; 0x30
   29ab6:	2a09      	cmp	r2, #9
   29ab8:	d903      	bls.n	29ac2 <_svfiprintf_r+0x1a6>
   29aba:	2b00      	cmp	r3, #0
   29abc:	d0c6      	beq.n	29a4c <_svfiprintf_r+0x130>
   29abe:	9105      	str	r1, [sp, #20]
   29ac0:	e7c4      	b.n	29a4c <_svfiprintf_r+0x130>
   29ac2:	fb0c 2101 	mla	r1, ip, r1, r2
   29ac6:	4604      	mov	r4, r0
   29ac8:	2301      	movs	r3, #1
   29aca:	e7f0      	b.n	29aae <_svfiprintf_r+0x192>
   29acc:	ab03      	add	r3, sp, #12
   29ace:	462a      	mov	r2, r5
   29ad0:	a904      	add	r1, sp, #16
   29ad2:	4638      	mov	r0, r7
   29ad4:	9300      	str	r3, [sp, #0]
   29ad6:	4b0e      	ldr	r3, [pc, #56]	; (29b10 <_svfiprintf_r+0x1f4>)
   29ad8:	f7fe fb40 	bl	2815c <_printf_float>
   29adc:	1c42      	adds	r2, r0, #1
   29ade:	4606      	mov	r6, r0
   29ae0:	d1d6      	bne.n	29a90 <_svfiprintf_r+0x174>
   29ae2:	89ab      	ldrh	r3, [r5, #12]
   29ae4:	065b      	lsls	r3, r3, #25
   29ae6:	f53f af2d 	bmi.w	29944 <_svfiprintf_r+0x28>
   29aea:	9809      	ldr	r0, [sp, #36]	; 0x24
   29aec:	e72c      	b.n	29948 <_svfiprintf_r+0x2c>
   29aee:	ab03      	add	r3, sp, #12
   29af0:	462a      	mov	r2, r5
   29af2:	a904      	add	r1, sp, #16
   29af4:	4638      	mov	r0, r7
   29af6:	9300      	str	r3, [sp, #0]
   29af8:	4b05      	ldr	r3, [pc, #20]	; (29b10 <_svfiprintf_r+0x1f4>)
   29afa:	f7fe fd65 	bl	285c8 <_printf_i>
   29afe:	e7ed      	b.n	29adc <_svfiprintf_r+0x1c0>
   29b00:	0003c2d0 	.word	0x0003c2d0
   29b04:	0003c2d6 	.word	0x0003c2d6
   29b08:	0003c2da 	.word	0x0003c2da
   29b0c:	0002815d 	.word	0x0002815d
   29b10:	00031247 	.word	0x00031247

00029b14 <__ssvfiscanf_r>:
   29b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29b18:	460c      	mov	r4, r1
   29b1a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   29b1e:	2100      	movs	r1, #0
   29b20:	4606      	mov	r6, r0
   29b22:	f10d 0804 	add.w	r8, sp, #4
   29b26:	4fa7      	ldr	r7, [pc, #668]	; (29dc4 <__ssvfiscanf_r+0x2b0>)
   29b28:	9300      	str	r3, [sp, #0]
   29b2a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   29b2e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   29b32:	49a5      	ldr	r1, [pc, #660]	; (29dc8 <__ssvfiscanf_r+0x2b4>)
   29b34:	91a0      	str	r1, [sp, #640]	; 0x280
   29b36:	49a5      	ldr	r1, [pc, #660]	; (29dcc <__ssvfiscanf_r+0x2b8>)
   29b38:	91a1      	str	r1, [sp, #644]	; 0x284
   29b3a:	7813      	ldrb	r3, [r2, #0]
   29b3c:	2b00      	cmp	r3, #0
   29b3e:	f000 815c 	beq.w	29dfa <__ssvfiscanf_r+0x2e6>
   29b42:	5cf9      	ldrb	r1, [r7, r3]
   29b44:	1c55      	adds	r5, r2, #1
   29b46:	f011 0108 	ands.w	r1, r1, #8
   29b4a:	d019      	beq.n	29b80 <__ssvfiscanf_r+0x6c>
   29b4c:	6863      	ldr	r3, [r4, #4]
   29b4e:	2b00      	cmp	r3, #0
   29b50:	dd0f      	ble.n	29b72 <__ssvfiscanf_r+0x5e>
   29b52:	6823      	ldr	r3, [r4, #0]
   29b54:	781a      	ldrb	r2, [r3, #0]
   29b56:	5cba      	ldrb	r2, [r7, r2]
   29b58:	0712      	lsls	r2, r2, #28
   29b5a:	d401      	bmi.n	29b60 <__ssvfiscanf_r+0x4c>
   29b5c:	462a      	mov	r2, r5
   29b5e:	e7ec      	b.n	29b3a <__ssvfiscanf_r+0x26>
   29b60:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29b62:	3301      	adds	r3, #1
   29b64:	3201      	adds	r2, #1
   29b66:	6023      	str	r3, [r4, #0]
   29b68:	9245      	str	r2, [sp, #276]	; 0x114
   29b6a:	6862      	ldr	r2, [r4, #4]
   29b6c:	3a01      	subs	r2, #1
   29b6e:	6062      	str	r2, [r4, #4]
   29b70:	e7ec      	b.n	29b4c <__ssvfiscanf_r+0x38>
   29b72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29b74:	4621      	mov	r1, r4
   29b76:	4630      	mov	r0, r6
   29b78:	4798      	blx	r3
   29b7a:	2800      	cmp	r0, #0
   29b7c:	d0e9      	beq.n	29b52 <__ssvfiscanf_r+0x3e>
   29b7e:	e7ed      	b.n	29b5c <__ssvfiscanf_r+0x48>
   29b80:	2b25      	cmp	r3, #37	; 0x25
   29b82:	d012      	beq.n	29baa <__ssvfiscanf_r+0x96>
   29b84:	4699      	mov	r9, r3
   29b86:	6863      	ldr	r3, [r4, #4]
   29b88:	2b00      	cmp	r3, #0
   29b8a:	f340 8094 	ble.w	29cb6 <__ssvfiscanf_r+0x1a2>
   29b8e:	6822      	ldr	r2, [r4, #0]
   29b90:	7813      	ldrb	r3, [r2, #0]
   29b92:	454b      	cmp	r3, r9
   29b94:	f040 8131 	bne.w	29dfa <__ssvfiscanf_r+0x2e6>
   29b98:	6863      	ldr	r3, [r4, #4]
   29b9a:	3201      	adds	r2, #1
   29b9c:	3b01      	subs	r3, #1
   29b9e:	6022      	str	r2, [r4, #0]
   29ba0:	6063      	str	r3, [r4, #4]
   29ba2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   29ba4:	3301      	adds	r3, #1
   29ba6:	9345      	str	r3, [sp, #276]	; 0x114
   29ba8:	e7d8      	b.n	29b5c <__ssvfiscanf_r+0x48>
   29baa:	9141      	str	r1, [sp, #260]	; 0x104
   29bac:	9143      	str	r1, [sp, #268]	; 0x10c
   29bae:	7853      	ldrb	r3, [r2, #1]
   29bb0:	2b2a      	cmp	r3, #42	; 0x2a
   29bb2:	bf04      	itt	eq
   29bb4:	2310      	moveq	r3, #16
   29bb6:	1c95      	addeq	r5, r2, #2
   29bb8:	f04f 020a 	mov.w	r2, #10
   29bbc:	bf08      	it	eq
   29bbe:	9341      	streq	r3, [sp, #260]	; 0x104
   29bc0:	46a9      	mov	r9, r5
   29bc2:	f819 1b01 	ldrb.w	r1, [r9], #1
   29bc6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   29bca:	2b09      	cmp	r3, #9
   29bcc:	d91e      	bls.n	29c0c <__ssvfiscanf_r+0xf8>
   29bce:	f8df a200 	ldr.w	sl, [pc, #512]	; 29dd0 <__ssvfiscanf_r+0x2bc>
   29bd2:	2203      	movs	r2, #3
   29bd4:	4650      	mov	r0, sl
   29bd6:	f006 fe16 	bl	30806 <memchr>
   29bda:	b138      	cbz	r0, 29bec <__ssvfiscanf_r+0xd8>
   29bdc:	eba0 000a 	sub.w	r0, r0, sl
   29be0:	2301      	movs	r3, #1
   29be2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29be4:	464d      	mov	r5, r9
   29be6:	4083      	lsls	r3, r0
   29be8:	4313      	orrs	r3, r2
   29bea:	9341      	str	r3, [sp, #260]	; 0x104
   29bec:	f815 3b01 	ldrb.w	r3, [r5], #1
   29bf0:	2b78      	cmp	r3, #120	; 0x78
   29bf2:	d806      	bhi.n	29c02 <__ssvfiscanf_r+0xee>
   29bf4:	2b57      	cmp	r3, #87	; 0x57
   29bf6:	d810      	bhi.n	29c1a <__ssvfiscanf_r+0x106>
   29bf8:	2b25      	cmp	r3, #37	; 0x25
   29bfa:	d0c3      	beq.n	29b84 <__ssvfiscanf_r+0x70>
   29bfc:	d856      	bhi.n	29cac <__ssvfiscanf_r+0x198>
   29bfe:	2b00      	cmp	r3, #0
   29c00:	d064      	beq.n	29ccc <__ssvfiscanf_r+0x1b8>
   29c02:	2303      	movs	r3, #3
   29c04:	9347      	str	r3, [sp, #284]	; 0x11c
   29c06:	230a      	movs	r3, #10
   29c08:	9342      	str	r3, [sp, #264]	; 0x108
   29c0a:	e06a      	b.n	29ce2 <__ssvfiscanf_r+0x1ce>
   29c0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   29c0e:	464d      	mov	r5, r9
   29c10:	fb02 1103 	mla	r1, r2, r3, r1
   29c14:	3930      	subs	r1, #48	; 0x30
   29c16:	9143      	str	r1, [sp, #268]	; 0x10c
   29c18:	e7d2      	b.n	29bc0 <__ssvfiscanf_r+0xac>
   29c1a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   29c1e:	2a20      	cmp	r2, #32
   29c20:	d8ef      	bhi.n	29c02 <__ssvfiscanf_r+0xee>
   29c22:	a101      	add	r1, pc, #4	; (adr r1, 29c28 <__ssvfiscanf_r+0x114>)
   29c24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   29c28:	00029d17 	.word	0x00029d17
   29c2c:	00029c03 	.word	0x00029c03
   29c30:	00029c03 	.word	0x00029c03
   29c34:	00029d39 	.word	0x00029d39
   29c38:	00029c03 	.word	0x00029c03
   29c3c:	00029c03 	.word	0x00029c03
   29c40:	00029c03 	.word	0x00029c03
   29c44:	00029c03 	.word	0x00029c03
   29c48:	00029c03 	.word	0x00029c03
   29c4c:	00029c03 	.word	0x00029c03
   29c50:	00029c03 	.word	0x00029c03
   29c54:	00029d4f 	.word	0x00029d4f
   29c58:	00029d35 	.word	0x00029d35
   29c5c:	00029cb3 	.word	0x00029cb3
   29c60:	00029cb3 	.word	0x00029cb3
   29c64:	00029cb3 	.word	0x00029cb3
   29c68:	00029c03 	.word	0x00029c03
   29c6c:	00029d29 	.word	0x00029d29
   29c70:	00029c03 	.word	0x00029c03
   29c74:	00029c03 	.word	0x00029c03
   29c78:	00029c03 	.word	0x00029c03
   29c7c:	00029c03 	.word	0x00029c03
   29c80:	00029d5f 	.word	0x00029d5f
   29c84:	00029d31 	.word	0x00029d31
   29c88:	00029cd3 	.word	0x00029cd3
   29c8c:	00029c03 	.word	0x00029c03
   29c90:	00029c03 	.word	0x00029c03
   29c94:	00029d5b 	.word	0x00029d5b
   29c98:	00029c03 	.word	0x00029c03
   29c9c:	00029d35 	.word	0x00029d35
   29ca0:	00029c03 	.word	0x00029c03
   29ca4:	00029c03 	.word	0x00029c03
   29ca8:	00029d17 	.word	0x00029d17
   29cac:	3b45      	subs	r3, #69	; 0x45
   29cae:	2b02      	cmp	r3, #2
   29cb0:	d8a7      	bhi.n	29c02 <__ssvfiscanf_r+0xee>
   29cb2:	2305      	movs	r3, #5
   29cb4:	e014      	b.n	29ce0 <__ssvfiscanf_r+0x1cc>
   29cb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29cb8:	4621      	mov	r1, r4
   29cba:	4630      	mov	r0, r6
   29cbc:	4798      	blx	r3
   29cbe:	2800      	cmp	r0, #0
   29cc0:	f43f af65 	beq.w	29b8e <__ssvfiscanf_r+0x7a>
   29cc4:	9844      	ldr	r0, [sp, #272]	; 0x110
   29cc6:	2800      	cmp	r0, #0
   29cc8:	f040 808f 	bne.w	29dea <__ssvfiscanf_r+0x2d6>
   29ccc:	f04f 30ff 	mov.w	r0, #4294967295
   29cd0:	e08f      	b.n	29df2 <__ssvfiscanf_r+0x2de>
   29cd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29cd4:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   29cd8:	9341      	str	r3, [sp, #260]	; 0x104
   29cda:	2310      	movs	r3, #16
   29cdc:	9342      	str	r3, [sp, #264]	; 0x108
   29cde:	2304      	movs	r3, #4
   29ce0:	9347      	str	r3, [sp, #284]	; 0x11c
   29ce2:	6863      	ldr	r3, [r4, #4]
   29ce4:	2b00      	cmp	r3, #0
   29ce6:	dd4a      	ble.n	29d7e <__ssvfiscanf_r+0x26a>
   29ce8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29cea:	0659      	lsls	r1, r3, #25
   29cec:	d404      	bmi.n	29cf8 <__ssvfiscanf_r+0x1e4>
   29cee:	6823      	ldr	r3, [r4, #0]
   29cf0:	781a      	ldrb	r2, [r3, #0]
   29cf2:	5cba      	ldrb	r2, [r7, r2]
   29cf4:	0712      	lsls	r2, r2, #28
   29cf6:	d449      	bmi.n	29d8c <__ssvfiscanf_r+0x278>
   29cf8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   29cfa:	2b02      	cmp	r3, #2
   29cfc:	dc58      	bgt.n	29db0 <__ssvfiscanf_r+0x29c>
   29cfe:	466b      	mov	r3, sp
   29d00:	4622      	mov	r2, r4
   29d02:	a941      	add	r1, sp, #260	; 0x104
   29d04:	4630      	mov	r0, r6
   29d06:	f000 f87d 	bl	29e04 <_scanf_chars>
   29d0a:	2801      	cmp	r0, #1
   29d0c:	d075      	beq.n	29dfa <__ssvfiscanf_r+0x2e6>
   29d0e:	2802      	cmp	r0, #2
   29d10:	f47f af24 	bne.w	29b5c <__ssvfiscanf_r+0x48>
   29d14:	e7d6      	b.n	29cc4 <__ssvfiscanf_r+0x1b0>
   29d16:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29d1c:	9241      	str	r2, [sp, #260]	; 0x104
   29d1e:	2210      	movs	r2, #16
   29d20:	2b6e      	cmp	r3, #110	; 0x6e
   29d22:	9242      	str	r2, [sp, #264]	; 0x108
   29d24:	d902      	bls.n	29d2c <__ssvfiscanf_r+0x218>
   29d26:	e7da      	b.n	29cde <__ssvfiscanf_r+0x1ca>
   29d28:	2300      	movs	r3, #0
   29d2a:	9342      	str	r3, [sp, #264]	; 0x108
   29d2c:	2303      	movs	r3, #3
   29d2e:	e7d7      	b.n	29ce0 <__ssvfiscanf_r+0x1cc>
   29d30:	2308      	movs	r3, #8
   29d32:	e7d3      	b.n	29cdc <__ssvfiscanf_r+0x1c8>
   29d34:	220a      	movs	r2, #10
   29d36:	e7f3      	b.n	29d20 <__ssvfiscanf_r+0x20c>
   29d38:	4629      	mov	r1, r5
   29d3a:	4640      	mov	r0, r8
   29d3c:	f007 fb36 	bl	313ac <__sccl>
   29d40:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29d42:	4605      	mov	r5, r0
   29d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29d48:	9341      	str	r3, [sp, #260]	; 0x104
   29d4a:	2301      	movs	r3, #1
   29d4c:	e7c8      	b.n	29ce0 <__ssvfiscanf_r+0x1cc>
   29d4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29d54:	9341      	str	r3, [sp, #260]	; 0x104
   29d56:	2300      	movs	r3, #0
   29d58:	e7c2      	b.n	29ce0 <__ssvfiscanf_r+0x1cc>
   29d5a:	2302      	movs	r3, #2
   29d5c:	e7c0      	b.n	29ce0 <__ssvfiscanf_r+0x1cc>
   29d5e:	9841      	ldr	r0, [sp, #260]	; 0x104
   29d60:	06c3      	lsls	r3, r0, #27
   29d62:	f53f aefb 	bmi.w	29b5c <__ssvfiscanf_r+0x48>
   29d66:	9b00      	ldr	r3, [sp, #0]
   29d68:	f010 0f01 	tst.w	r0, #1
   29d6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29d6e:	f103 0104 	add.w	r1, r3, #4
   29d72:	9100      	str	r1, [sp, #0]
   29d74:	681b      	ldr	r3, [r3, #0]
   29d76:	bf14      	ite	ne
   29d78:	801a      	strhne	r2, [r3, #0]
   29d7a:	601a      	streq	r2, [r3, #0]
   29d7c:	e6ee      	b.n	29b5c <__ssvfiscanf_r+0x48>
   29d7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29d80:	4621      	mov	r1, r4
   29d82:	4630      	mov	r0, r6
   29d84:	4798      	blx	r3
   29d86:	2800      	cmp	r0, #0
   29d88:	d0ae      	beq.n	29ce8 <__ssvfiscanf_r+0x1d4>
   29d8a:	e79b      	b.n	29cc4 <__ssvfiscanf_r+0x1b0>
   29d8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29d8e:	3201      	adds	r2, #1
   29d90:	9245      	str	r2, [sp, #276]	; 0x114
   29d92:	6862      	ldr	r2, [r4, #4]
   29d94:	3a01      	subs	r2, #1
   29d96:	2a00      	cmp	r2, #0
   29d98:	6062      	str	r2, [r4, #4]
   29d9a:	dd02      	ble.n	29da2 <__ssvfiscanf_r+0x28e>
   29d9c:	3301      	adds	r3, #1
   29d9e:	6023      	str	r3, [r4, #0]
   29da0:	e7a5      	b.n	29cee <__ssvfiscanf_r+0x1da>
   29da2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29da4:	4621      	mov	r1, r4
   29da6:	4630      	mov	r0, r6
   29da8:	4798      	blx	r3
   29daa:	2800      	cmp	r0, #0
   29dac:	d09f      	beq.n	29cee <__ssvfiscanf_r+0x1da>
   29dae:	e789      	b.n	29cc4 <__ssvfiscanf_r+0x1b0>
   29db0:	2b04      	cmp	r3, #4
   29db2:	dc0f      	bgt.n	29dd4 <__ssvfiscanf_r+0x2c0>
   29db4:	466b      	mov	r3, sp
   29db6:	4622      	mov	r2, r4
   29db8:	a941      	add	r1, sp, #260	; 0x104
   29dba:	4630      	mov	r0, r6
   29dbc:	f000 f87c 	bl	29eb8 <_scanf_i>
   29dc0:	e7a3      	b.n	29d0a <__ssvfiscanf_r+0x1f6>
   29dc2:	bf00      	nop
   29dc4:	0003c002 	.word	0x0003c002
   29dc8:	000312fd 	.word	0x000312fd
   29dcc:	00031373 	.word	0x00031373
   29dd0:	0003c2d6 	.word	0x0003c2d6
   29dd4:	4b0a      	ldr	r3, [pc, #40]	; (29e00 <__ssvfiscanf_r+0x2ec>)
   29dd6:	2b00      	cmp	r3, #0
   29dd8:	f43f aec0 	beq.w	29b5c <__ssvfiscanf_r+0x48>
   29ddc:	466b      	mov	r3, sp
   29dde:	4622      	mov	r2, r4
   29de0:	a941      	add	r1, sp, #260	; 0x104
   29de2:	4630      	mov	r0, r6
   29de4:	f3af 8000 	nop.w
   29de8:	e78f      	b.n	29d0a <__ssvfiscanf_r+0x1f6>
   29dea:	89a3      	ldrh	r3, [r4, #12]
   29dec:	065b      	lsls	r3, r3, #25
   29dee:	f53f af6d 	bmi.w	29ccc <__ssvfiscanf_r+0x1b8>
   29df2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   29df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29dfa:	9844      	ldr	r0, [sp, #272]	; 0x110
   29dfc:	e7f9      	b.n	29df2 <__ssvfiscanf_r+0x2de>
   29dfe:	bf00      	nop
   29e00:	00000000 	.word	0x00000000

00029e04 <_scanf_chars>:
   29e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29e08:	4615      	mov	r5, r2
   29e0a:	688a      	ldr	r2, [r1, #8]
   29e0c:	4680      	mov	r8, r0
   29e0e:	460c      	mov	r4, r1
   29e10:	b932      	cbnz	r2, 29e20 <_scanf_chars+0x1c>
   29e12:	698a      	ldr	r2, [r1, #24]
   29e14:	2a00      	cmp	r2, #0
   29e16:	bf14      	ite	ne
   29e18:	f04f 32ff 	movne.w	r2, #4294967295
   29e1c:	2201      	moveq	r2, #1
   29e1e:	608a      	str	r2, [r1, #8]
   29e20:	6822      	ldr	r2, [r4, #0]
   29e22:	2700      	movs	r7, #0
   29e24:	f8df 908c 	ldr.w	r9, [pc, #140]	; 29eb4 <_scanf_chars+0xb0>
   29e28:	06d1      	lsls	r1, r2, #27
   29e2a:	bf5f      	itttt	pl
   29e2c:	681a      	ldrpl	r2, [r3, #0]
   29e2e:	1d11      	addpl	r1, r2, #4
   29e30:	6019      	strpl	r1, [r3, #0]
   29e32:	6816      	ldrpl	r6, [r2, #0]
   29e34:	69a0      	ldr	r0, [r4, #24]
   29e36:	b188      	cbz	r0, 29e5c <_scanf_chars+0x58>
   29e38:	2801      	cmp	r0, #1
   29e3a:	d107      	bne.n	29e4c <_scanf_chars+0x48>
   29e3c:	682b      	ldr	r3, [r5, #0]
   29e3e:	781a      	ldrb	r2, [r3, #0]
   29e40:	6963      	ldr	r3, [r4, #20]
   29e42:	5c9b      	ldrb	r3, [r3, r2]
   29e44:	b953      	cbnz	r3, 29e5c <_scanf_chars+0x58>
   29e46:	2f00      	cmp	r7, #0
   29e48:	d031      	beq.n	29eae <_scanf_chars+0xaa>
   29e4a:	e022      	b.n	29e92 <_scanf_chars+0x8e>
   29e4c:	2802      	cmp	r0, #2
   29e4e:	d120      	bne.n	29e92 <_scanf_chars+0x8e>
   29e50:	682b      	ldr	r3, [r5, #0]
   29e52:	781b      	ldrb	r3, [r3, #0]
   29e54:	f819 3003 	ldrb.w	r3, [r9, r3]
   29e58:	071b      	lsls	r3, r3, #28
   29e5a:	d41a      	bmi.n	29e92 <_scanf_chars+0x8e>
   29e5c:	6823      	ldr	r3, [r4, #0]
   29e5e:	3701      	adds	r7, #1
   29e60:	06da      	lsls	r2, r3, #27
   29e62:	bf5e      	ittt	pl
   29e64:	682b      	ldrpl	r3, [r5, #0]
   29e66:	781b      	ldrbpl	r3, [r3, #0]
   29e68:	f806 3b01 	strbpl.w	r3, [r6], #1
   29e6c:	682a      	ldr	r2, [r5, #0]
   29e6e:	686b      	ldr	r3, [r5, #4]
   29e70:	3201      	adds	r2, #1
   29e72:	3b01      	subs	r3, #1
   29e74:	602a      	str	r2, [r5, #0]
   29e76:	68a2      	ldr	r2, [r4, #8]
   29e78:	606b      	str	r3, [r5, #4]
   29e7a:	3a01      	subs	r2, #1
   29e7c:	60a2      	str	r2, [r4, #8]
   29e7e:	b142      	cbz	r2, 29e92 <_scanf_chars+0x8e>
   29e80:	2b00      	cmp	r3, #0
   29e82:	dcd7      	bgt.n	29e34 <_scanf_chars+0x30>
   29e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29e88:	4629      	mov	r1, r5
   29e8a:	4640      	mov	r0, r8
   29e8c:	4798      	blx	r3
   29e8e:	2800      	cmp	r0, #0
   29e90:	d0d0      	beq.n	29e34 <_scanf_chars+0x30>
   29e92:	6823      	ldr	r3, [r4, #0]
   29e94:	f013 0310 	ands.w	r3, r3, #16
   29e98:	d105      	bne.n	29ea6 <_scanf_chars+0xa2>
   29e9a:	68e2      	ldr	r2, [r4, #12]
   29e9c:	3201      	adds	r2, #1
   29e9e:	60e2      	str	r2, [r4, #12]
   29ea0:	69a2      	ldr	r2, [r4, #24]
   29ea2:	b102      	cbz	r2, 29ea6 <_scanf_chars+0xa2>
   29ea4:	7033      	strb	r3, [r6, #0]
   29ea6:	6923      	ldr	r3, [r4, #16]
   29ea8:	2000      	movs	r0, #0
   29eaa:	443b      	add	r3, r7
   29eac:	6123      	str	r3, [r4, #16]
   29eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29eb2:	bf00      	nop
   29eb4:	0003c002 	.word	0x0003c002

00029eb8 <_scanf_i>:
   29eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ebc:	4698      	mov	r8, r3
   29ebe:	b087      	sub	sp, #28
   29ec0:	4b78      	ldr	r3, [pc, #480]	; (2a0a4 <_scanf_i+0x1ec>)
   29ec2:	460c      	mov	r4, r1
   29ec4:	4682      	mov	sl, r0
   29ec6:	4616      	mov	r6, r2
   29ec8:	4627      	mov	r7, r4
   29eca:	f04f 0b00 	mov.w	fp, #0
   29ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29ed2:	ab03      	add	r3, sp, #12
   29ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29ed8:	4b73      	ldr	r3, [pc, #460]	; (2a0a8 <_scanf_i+0x1f0>)
   29eda:	69a1      	ldr	r1, [r4, #24]
   29edc:	4a73      	ldr	r2, [pc, #460]	; (2a0ac <_scanf_i+0x1f4>)
   29ede:	2903      	cmp	r1, #3
   29ee0:	bf08      	it	eq
   29ee2:	461a      	moveq	r2, r3
   29ee4:	68a3      	ldr	r3, [r4, #8]
   29ee6:	9201      	str	r2, [sp, #4]
   29ee8:	1e5a      	subs	r2, r3, #1
   29eea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   29eee:	bf89      	itett	hi
   29ef0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   29ef4:	f04f 0900 	movls.w	r9, #0
   29ef8:	eb03 0905 	addhi.w	r9, r3, r5
   29efc:	f240 135d 	movwhi	r3, #349	; 0x15d
   29f00:	bf88      	it	hi
   29f02:	60a3      	strhi	r3, [r4, #8]
   29f04:	f857 3b1c 	ldr.w	r3, [r7], #28
   29f08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   29f0c:	463d      	mov	r5, r7
   29f0e:	6023      	str	r3, [r4, #0]
   29f10:	6831      	ldr	r1, [r6, #0]
   29f12:	ab03      	add	r3, sp, #12
   29f14:	2202      	movs	r2, #2
   29f16:	7809      	ldrb	r1, [r1, #0]
   29f18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   29f1c:	f006 fc73 	bl	30806 <memchr>
   29f20:	2800      	cmp	r0, #0
   29f22:	d040      	beq.n	29fa6 <_scanf_i+0xee>
   29f24:	f1bb 0f01 	cmp.w	fp, #1
   29f28:	d112      	bne.n	29f50 <_scanf_i+0x98>
   29f2a:	6862      	ldr	r2, [r4, #4]
   29f2c:	b92a      	cbnz	r2, 29f3a <_scanf_i+0x82>
   29f2e:	6822      	ldr	r2, [r4, #0]
   29f30:	2108      	movs	r1, #8
   29f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29f36:	6061      	str	r1, [r4, #4]
   29f38:	6022      	str	r2, [r4, #0]
   29f3a:	6822      	ldr	r2, [r4, #0]
   29f3c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   29f40:	6022      	str	r2, [r4, #0]
   29f42:	68a2      	ldr	r2, [r4, #8]
   29f44:	1e51      	subs	r1, r2, #1
   29f46:	60a1      	str	r1, [r4, #8]
   29f48:	b9da      	cbnz	r2, 29f82 <_scanf_i+0xca>
   29f4a:	f04f 0b02 	mov.w	fp, #2
   29f4e:	e7df      	b.n	29f10 <_scanf_i+0x58>
   29f50:	f1bb 0f02 	cmp.w	fp, #2
   29f54:	d006      	beq.n	29f64 <_scanf_i+0xac>
   29f56:	68a2      	ldr	r2, [r4, #8]
   29f58:	1e51      	subs	r1, r2, #1
   29f5a:	60a1      	str	r1, [r4, #8]
   29f5c:	b98a      	cbnz	r2, 29f82 <_scanf_i+0xca>
   29f5e:	f04f 0b01 	mov.w	fp, #1
   29f62:	e7d5      	b.n	29f10 <_scanf_i+0x58>
   29f64:	6822      	ldr	r2, [r4, #0]
   29f66:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   29f6a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29f6e:	d11f      	bne.n	29fb0 <_scanf_i+0xf8>
   29f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   29f74:	2110      	movs	r1, #16
   29f76:	6022      	str	r2, [r4, #0]
   29f78:	68a2      	ldr	r2, [r4, #8]
   29f7a:	6061      	str	r1, [r4, #4]
   29f7c:	1e51      	subs	r1, r2, #1
   29f7e:	60a1      	str	r1, [r4, #8]
   29f80:	b1b2      	cbz	r2, 29fb0 <_scanf_i+0xf8>
   29f82:	6832      	ldr	r2, [r6, #0]
   29f84:	1c51      	adds	r1, r2, #1
   29f86:	6031      	str	r1, [r6, #0]
   29f88:	7812      	ldrb	r2, [r2, #0]
   29f8a:	f805 2b01 	strb.w	r2, [r5], #1
   29f8e:	6872      	ldr	r2, [r6, #4]
   29f90:	3a01      	subs	r2, #1
   29f92:	2a00      	cmp	r2, #0
   29f94:	6072      	str	r2, [r6, #4]
   29f96:	dc06      	bgt.n	29fa6 <_scanf_i+0xee>
   29f98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   29f9c:	4631      	mov	r1, r6
   29f9e:	4650      	mov	r0, sl
   29fa0:	4790      	blx	r2
   29fa2:	2800      	cmp	r0, #0
   29fa4:	d174      	bne.n	2a090 <_scanf_i+0x1d8>
   29fa6:	f10b 0b01 	add.w	fp, fp, #1
   29faa:	f1bb 0f03 	cmp.w	fp, #3
   29fae:	d1af      	bne.n	29f10 <_scanf_i+0x58>
   29fb0:	6863      	ldr	r3, [r4, #4]
   29fb2:	b90b      	cbnz	r3, 29fb8 <_scanf_i+0x100>
   29fb4:	230a      	movs	r3, #10
   29fb6:	6063      	str	r3, [r4, #4]
   29fb8:	6863      	ldr	r3, [r4, #4]
   29fba:	f04f 0b00 	mov.w	fp, #0
   29fbe:	493c      	ldr	r1, [pc, #240]	; (2a0b0 <_scanf_i+0x1f8>)
   29fc0:	6960      	ldr	r0, [r4, #20]
   29fc2:	1ac9      	subs	r1, r1, r3
   29fc4:	f007 f9f2 	bl	313ac <__sccl>
   29fc8:	68a3      	ldr	r3, [r4, #8]
   29fca:	6822      	ldr	r2, [r4, #0]
   29fcc:	b373      	cbz	r3, 2a02c <_scanf_i+0x174>
   29fce:	6831      	ldr	r1, [r6, #0]
   29fd0:	6960      	ldr	r0, [r4, #20]
   29fd2:	f891 c000 	ldrb.w	ip, [r1]
   29fd6:	f810 000c 	ldrb.w	r0, [r0, ip]
   29fda:	b338      	cbz	r0, 2a02c <_scanf_i+0x174>
   29fdc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   29fe0:	d116      	bne.n	2a010 <_scanf_i+0x158>
   29fe2:	0510      	lsls	r0, r2, #20
   29fe4:	d514      	bpl.n	2a010 <_scanf_i+0x158>
   29fe6:	f10b 0b01 	add.w	fp, fp, #1
   29fea:	f1b9 0f00 	cmp.w	r9, #0
   29fee:	d003      	beq.n	29ff8 <_scanf_i+0x140>
   29ff0:	3301      	adds	r3, #1
   29ff2:	f109 39ff 	add.w	r9, r9, #4294967295
   29ff6:	60a3      	str	r3, [r4, #8]
   29ff8:	6873      	ldr	r3, [r6, #4]
   29ffa:	3b01      	subs	r3, #1
   29ffc:	2b00      	cmp	r3, #0
   29ffe:	6073      	str	r3, [r6, #4]
   2a000:	dd0d      	ble.n	2a01e <_scanf_i+0x166>
   2a002:	6833      	ldr	r3, [r6, #0]
   2a004:	3301      	adds	r3, #1
   2a006:	6033      	str	r3, [r6, #0]
   2a008:	68a3      	ldr	r3, [r4, #8]
   2a00a:	3b01      	subs	r3, #1
   2a00c:	60a3      	str	r3, [r4, #8]
   2a00e:	e7db      	b.n	29fc8 <_scanf_i+0x110>
   2a010:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2a014:	6022      	str	r2, [r4, #0]
   2a016:	780b      	ldrb	r3, [r1, #0]
   2a018:	f805 3b01 	strb.w	r3, [r5], #1
   2a01c:	e7ec      	b.n	29ff8 <_scanf_i+0x140>
   2a01e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2a022:	4631      	mov	r1, r6
   2a024:	4650      	mov	r0, sl
   2a026:	4798      	blx	r3
   2a028:	2800      	cmp	r0, #0
   2a02a:	d0ed      	beq.n	2a008 <_scanf_i+0x150>
   2a02c:	6823      	ldr	r3, [r4, #0]
   2a02e:	05d9      	lsls	r1, r3, #23
   2a030:	d50d      	bpl.n	2a04e <_scanf_i+0x196>
   2a032:	42bd      	cmp	r5, r7
   2a034:	d909      	bls.n	2a04a <_scanf_i+0x192>
   2a036:	f105 39ff 	add.w	r9, r5, #4294967295
   2a03a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2a03e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2a042:	4632      	mov	r2, r6
   2a044:	464d      	mov	r5, r9
   2a046:	4650      	mov	r0, sl
   2a048:	4798      	blx	r3
   2a04a:	42bd      	cmp	r5, r7
   2a04c:	d028      	beq.n	2a0a0 <_scanf_i+0x1e8>
   2a04e:	6822      	ldr	r2, [r4, #0]
   2a050:	f012 0210 	ands.w	r2, r2, #16
   2a054:	d113      	bne.n	2a07e <_scanf_i+0x1c6>
   2a056:	702a      	strb	r2, [r5, #0]
   2a058:	4639      	mov	r1, r7
   2a05a:	6863      	ldr	r3, [r4, #4]
   2a05c:	4650      	mov	r0, sl
   2a05e:	9e01      	ldr	r6, [sp, #4]
   2a060:	47b0      	blx	r6
   2a062:	f8d8 3000 	ldr.w	r3, [r8]
   2a066:	6821      	ldr	r1, [r4, #0]
   2a068:	1d1a      	adds	r2, r3, #4
   2a06a:	f011 0f20 	tst.w	r1, #32
   2a06e:	f8c8 2000 	str.w	r2, [r8]
   2a072:	681b      	ldr	r3, [r3, #0]
   2a074:	d00f      	beq.n	2a096 <_scanf_i+0x1de>
   2a076:	6018      	str	r0, [r3, #0]
   2a078:	68e3      	ldr	r3, [r4, #12]
   2a07a:	3301      	adds	r3, #1
   2a07c:	60e3      	str	r3, [r4, #12]
   2a07e:	1bed      	subs	r5, r5, r7
   2a080:	6923      	ldr	r3, [r4, #16]
   2a082:	2000      	movs	r0, #0
   2a084:	445d      	add	r5, fp
   2a086:	442b      	add	r3, r5
   2a088:	6123      	str	r3, [r4, #16]
   2a08a:	b007      	add	sp, #28
   2a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a090:	f04f 0b00 	mov.w	fp, #0
   2a094:	e7ca      	b.n	2a02c <_scanf_i+0x174>
   2a096:	07ca      	lsls	r2, r1, #31
   2a098:	bf4c      	ite	mi
   2a09a:	8018      	strhmi	r0, [r3, #0]
   2a09c:	6018      	strpl	r0, [r3, #0]
   2a09e:	e7eb      	b.n	2a078 <_scanf_i+0x1c0>
   2a0a0:	2001      	movs	r0, #1
   2a0a2:	e7f2      	b.n	2a08a <_scanf_i+0x1d2>
   2a0a4:	00031dd0 	.word	0x00031dd0
   2a0a8:	00030c3b 	.word	0x00030c3b
   2a0ac:	00030c3f 	.word	0x00030c3f
   2a0b0:	0003c2f1 	.word	0x0003c2f1

0002a0b4 <_read_r>:
   2a0b4:	b538      	push	{r3, r4, r5, lr}
   2a0b6:	4604      	mov	r4, r0
   2a0b8:	4d06      	ldr	r5, [pc, #24]	; (2a0d4 <_read_r+0x20>)
   2a0ba:	4608      	mov	r0, r1
   2a0bc:	4611      	mov	r1, r2
   2a0be:	2200      	movs	r2, #0
   2a0c0:	602a      	str	r2, [r5, #0]
   2a0c2:	461a      	mov	r2, r3
   2a0c4:	f001 ff33 	bl	2bf2e <_read>
   2a0c8:	1c43      	adds	r3, r0, #1
   2a0ca:	d102      	bne.n	2a0d2 <_read_r+0x1e>
   2a0cc:	682b      	ldr	r3, [r5, #0]
   2a0ce:	b103      	cbz	r3, 2a0d2 <_read_r+0x1e>
   2a0d0:	6023      	str	r3, [r4, #0]
   2a0d2:	bd38      	pop	{r3, r4, r5, pc}
   2a0d4:	2000ebac 	.word	0x2000ebac

0002a0d8 <nan>:
   2a0d8:	2000      	movs	r0, #0
   2a0da:	4901      	ldr	r1, [pc, #4]	; (2a0e0 <nan+0x8>)
   2a0dc:	4770      	bx	lr
   2a0de:	bf00      	nop
   2a0e0:	7ff80000 	.word	0x7ff80000

0002a0e4 <__assert_func>:
   2a0e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a0e6:	4614      	mov	r4, r2
   2a0e8:	461a      	mov	r2, r3
   2a0ea:	4b09      	ldr	r3, [pc, #36]	; (2a110 <__assert_func+0x2c>)
   2a0ec:	4605      	mov	r5, r0
   2a0ee:	681b      	ldr	r3, [r3, #0]
   2a0f0:	68d8      	ldr	r0, [r3, #12]
   2a0f2:	b954      	cbnz	r4, 2a10a <__assert_func+0x26>
   2a0f4:	4b07      	ldr	r3, [pc, #28]	; (2a114 <__assert_func+0x30>)
   2a0f6:	461c      	mov	r4, r3
   2a0f8:	9100      	str	r1, [sp, #0]
   2a0fa:	4907      	ldr	r1, [pc, #28]	; (2a118 <__assert_func+0x34>)
   2a0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   2a100:	462b      	mov	r3, r5
   2a102:	f000 f909 	bl	2a318 <fiprintf>
   2a106:	f007 facb 	bl	316a0 <abort>
   2a10a:	4b04      	ldr	r3, [pc, #16]	; (2a11c <__assert_func+0x38>)
   2a10c:	e7f4      	b.n	2a0f8 <__assert_func+0x14>
   2a10e:	bf00      	nop
   2a110:	2000ca5c 	.word	0x2000ca5c
   2a114:	00034664 	.word	0x00034664
   2a118:	0003c306 	.word	0x0003c306
   2a11c:	0003c2f9 	.word	0x0003c2f9

0002a120 <_fflush_r>:
   2a120:	b538      	push	{r3, r4, r5, lr}
   2a122:	690b      	ldr	r3, [r1, #16]
   2a124:	4605      	mov	r5, r0
   2a126:	460c      	mov	r4, r1
   2a128:	b913      	cbnz	r3, 2a130 <_fflush_r+0x10>
   2a12a:	2500      	movs	r5, #0
   2a12c:	4628      	mov	r0, r5
   2a12e:	bd38      	pop	{r3, r4, r5, pc}
   2a130:	b118      	cbz	r0, 2a13a <_fflush_r+0x1a>
   2a132:	6983      	ldr	r3, [r0, #24]
   2a134:	b90b      	cbnz	r3, 2a13a <_fflush_r+0x1a>
   2a136:	f000 f871 	bl	2a21c <__sinit>
   2a13a:	4b14      	ldr	r3, [pc, #80]	; (2a18c <_fflush_r+0x6c>)
   2a13c:	429c      	cmp	r4, r3
   2a13e:	d11b      	bne.n	2a178 <_fflush_r+0x58>
   2a140:	686c      	ldr	r4, [r5, #4]
   2a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a146:	2b00      	cmp	r3, #0
   2a148:	d0ef      	beq.n	2a12a <_fflush_r+0xa>
   2a14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2a14c:	07d0      	lsls	r0, r2, #31
   2a14e:	d404      	bmi.n	2a15a <_fflush_r+0x3a>
   2a150:	0599      	lsls	r1, r3, #22
   2a152:	d402      	bmi.n	2a15a <_fflush_r+0x3a>
   2a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a156:	f7e8 f9c3 	bl	124e0 <__retarget_lock_acquire_recursive>
   2a15a:	4628      	mov	r0, r5
   2a15c:	4621      	mov	r1, r4
   2a15e:	f007 f9a2 	bl	314a6 <__sflush_r>
   2a162:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2a164:	4605      	mov	r5, r0
   2a166:	07da      	lsls	r2, r3, #31
   2a168:	d4e0      	bmi.n	2a12c <_fflush_r+0xc>
   2a16a:	89a3      	ldrh	r3, [r4, #12]
   2a16c:	059b      	lsls	r3, r3, #22
   2a16e:	d4dd      	bmi.n	2a12c <_fflush_r+0xc>
   2a170:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a172:	f7e8 f9d1 	bl	12518 <__retarget_lock_release_recursive>
   2a176:	e7d9      	b.n	2a12c <_fflush_r+0xc>
   2a178:	4b05      	ldr	r3, [pc, #20]	; (2a190 <_fflush_r+0x70>)
   2a17a:	429c      	cmp	r4, r3
   2a17c:	d101      	bne.n	2a182 <_fflush_r+0x62>
   2a17e:	68ac      	ldr	r4, [r5, #8]
   2a180:	e7df      	b.n	2a142 <_fflush_r+0x22>
   2a182:	4b04      	ldr	r3, [pc, #16]	; (2a194 <_fflush_r+0x74>)
   2a184:	429c      	cmp	r4, r3
   2a186:	bf08      	it	eq
   2a188:	68ec      	ldreq	r4, [r5, #12]
   2a18a:	e7da      	b.n	2a142 <_fflush_r+0x22>
   2a18c:	00032b64 	.word	0x00032b64
   2a190:	00032b44 	.word	0x00032b44
   2a194:	00032b24 	.word	0x00032b24

0002a198 <std>:
   2a198:	2300      	movs	r3, #0
   2a19a:	b510      	push	{r4, lr}
   2a19c:	4604      	mov	r4, r0
   2a19e:	6083      	str	r3, [r0, #8]
   2a1a0:	8181      	strh	r1, [r0, #12]
   2a1a2:	4619      	mov	r1, r3
   2a1a4:	6643      	str	r3, [r0, #100]	; 0x64
   2a1a6:	81c2      	strh	r2, [r0, #14]
   2a1a8:	2208      	movs	r2, #8
   2a1aa:	6183      	str	r3, [r0, #24]
   2a1ac:	e9c0 3300 	strd	r3, r3, [r0]
   2a1b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2a1b4:	305c      	adds	r0, #92	; 0x5c
   2a1b6:	f006 fb64 	bl	30882 <memset>
   2a1ba:	4b05      	ldr	r3, [pc, #20]	; (2a1d0 <std+0x38>)
   2a1bc:	6224      	str	r4, [r4, #32]
   2a1be:	6263      	str	r3, [r4, #36]	; 0x24
   2a1c0:	4b04      	ldr	r3, [pc, #16]	; (2a1d4 <std+0x3c>)
   2a1c2:	62a3      	str	r3, [r4, #40]	; 0x28
   2a1c4:	4b04      	ldr	r3, [pc, #16]	; (2a1d8 <std+0x40>)
   2a1c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   2a1c8:	4b04      	ldr	r3, [pc, #16]	; (2a1dc <std+0x44>)
   2a1ca:	6323      	str	r3, [r4, #48]	; 0x30
   2a1cc:	bd10      	pop	{r4, pc}
   2a1ce:	bf00      	nop
   2a1d0:	00030ab7 	.word	0x00030ab7
   2a1d4:	00030add 	.word	0x00030add
   2a1d8:	00030b15 	.word	0x00030b15
   2a1dc:	00030b39 	.word	0x00030b39

0002a1e0 <_cleanup_r>:
   2a1e0:	4901      	ldr	r1, [pc, #4]	; (2a1e8 <_cleanup_r+0x8>)
   2a1e2:	f007 b9f5 	b.w	315d0 <_fwalk_reent>
   2a1e6:	bf00      	nop
   2a1e8:	0002a121 	.word	0x0002a121

0002a1ec <__sfp_lock_acquire>:
   2a1ec:	4801      	ldr	r0, [pc, #4]	; (2a1f4 <__sfp_lock_acquire+0x8>)
   2a1ee:	f7e8 b977 	b.w	124e0 <__retarget_lock_acquire_recursive>
   2a1f2:	bf00      	nop
   2a1f4:	2000ce04 	.word	0x2000ce04

0002a1f8 <__sfp_lock_release>:
   2a1f8:	4801      	ldr	r0, [pc, #4]	; (2a200 <__sfp_lock_release+0x8>)
   2a1fa:	f7e8 b98d 	b.w	12518 <__retarget_lock_release_recursive>
   2a1fe:	bf00      	nop
   2a200:	2000ce04 	.word	0x2000ce04

0002a204 <__sinit_lock_acquire>:
   2a204:	4801      	ldr	r0, [pc, #4]	; (2a20c <__sinit_lock_acquire+0x8>)
   2a206:	f7e8 b96b 	b.w	124e0 <__retarget_lock_acquire_recursive>
   2a20a:	bf00      	nop
   2a20c:	2000ce18 	.word	0x2000ce18

0002a210 <__sinit_lock_release>:
   2a210:	4801      	ldr	r0, [pc, #4]	; (2a218 <__sinit_lock_release+0x8>)
   2a212:	f7e8 b981 	b.w	12518 <__retarget_lock_release_recursive>
   2a216:	bf00      	nop
   2a218:	2000ce18 	.word	0x2000ce18

0002a21c <__sinit>:
   2a21c:	b510      	push	{r4, lr}
   2a21e:	4604      	mov	r4, r0
   2a220:	f7ff fff0 	bl	2a204 <__sinit_lock_acquire>
   2a224:	69a3      	ldr	r3, [r4, #24]
   2a226:	b11b      	cbz	r3, 2a230 <__sinit+0x14>
   2a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a22c:	f7ff bff0 	b.w	2a210 <__sinit_lock_release>
   2a230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2a234:	6523      	str	r3, [r4, #80]	; 0x50
   2a236:	4620      	mov	r0, r4
   2a238:	4b12      	ldr	r3, [pc, #72]	; (2a284 <__sinit+0x68>)
   2a23a:	4a13      	ldr	r2, [pc, #76]	; (2a288 <__sinit+0x6c>)
   2a23c:	681b      	ldr	r3, [r3, #0]
   2a23e:	62a2      	str	r2, [r4, #40]	; 0x28
   2a240:	42a3      	cmp	r3, r4
   2a242:	bf04      	itt	eq
   2a244:	2301      	moveq	r3, #1
   2a246:	61a3      	streq	r3, [r4, #24]
   2a248:	f000 f820 	bl	2a28c <__sfp>
   2a24c:	6060      	str	r0, [r4, #4]
   2a24e:	4620      	mov	r0, r4
   2a250:	f000 f81c 	bl	2a28c <__sfp>
   2a254:	60a0      	str	r0, [r4, #8]
   2a256:	4620      	mov	r0, r4
   2a258:	f000 f818 	bl	2a28c <__sfp>
   2a25c:	2200      	movs	r2, #0
   2a25e:	2104      	movs	r1, #4
   2a260:	60e0      	str	r0, [r4, #12]
   2a262:	6860      	ldr	r0, [r4, #4]
   2a264:	f7ff ff98 	bl	2a198 <std>
   2a268:	2201      	movs	r2, #1
   2a26a:	2109      	movs	r1, #9
   2a26c:	68a0      	ldr	r0, [r4, #8]
   2a26e:	f7ff ff93 	bl	2a198 <std>
   2a272:	2202      	movs	r2, #2
   2a274:	2112      	movs	r1, #18
   2a276:	68e0      	ldr	r0, [r4, #12]
   2a278:	f7ff ff8e 	bl	2a198 <std>
   2a27c:	2301      	movs	r3, #1
   2a27e:	61a3      	str	r3, [r4, #24]
   2a280:	e7d2      	b.n	2a228 <__sinit+0xc>
   2a282:	bf00      	nop
   2a284:	00032b08 	.word	0x00032b08
   2a288:	0002a1e1 	.word	0x0002a1e1

0002a28c <__sfp>:
   2a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a28e:	4607      	mov	r7, r0
   2a290:	f7ff ffac 	bl	2a1ec <__sfp_lock_acquire>
   2a294:	4b1e      	ldr	r3, [pc, #120]	; (2a310 <__sfp+0x84>)
   2a296:	681e      	ldr	r6, [r3, #0]
   2a298:	69b3      	ldr	r3, [r6, #24]
   2a29a:	b913      	cbnz	r3, 2a2a2 <__sfp+0x16>
   2a29c:	4630      	mov	r0, r6
   2a29e:	f7ff ffbd 	bl	2a21c <__sinit>
   2a2a2:	3648      	adds	r6, #72	; 0x48
   2a2a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2a2a8:	3b01      	subs	r3, #1
   2a2aa:	d503      	bpl.n	2a2b4 <__sfp+0x28>
   2a2ac:	6833      	ldr	r3, [r6, #0]
   2a2ae:	b30b      	cbz	r3, 2a2f4 <__sfp+0x68>
   2a2b0:	6836      	ldr	r6, [r6, #0]
   2a2b2:	e7f7      	b.n	2a2a4 <__sfp+0x18>
   2a2b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2a2b8:	b9d5      	cbnz	r5, 2a2f0 <__sfp+0x64>
   2a2ba:	4b16      	ldr	r3, [pc, #88]	; (2a314 <__sfp+0x88>)
   2a2bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2a2c0:	6665      	str	r5, [r4, #100]	; 0x64
   2a2c2:	60e3      	str	r3, [r4, #12]
   2a2c4:	f7e8 f8dc 	bl	12480 <__retarget_lock_init_recursive>
   2a2c8:	f7ff ff96 	bl	2a1f8 <__sfp_lock_release>
   2a2cc:	2208      	movs	r2, #8
   2a2ce:	4629      	mov	r1, r5
   2a2d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2a2d4:	6025      	str	r5, [r4, #0]
   2a2d6:	61a5      	str	r5, [r4, #24]
   2a2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2a2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2a2e0:	f006 facf 	bl	30882 <memset>
   2a2e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2a2e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2a2ec:	4620      	mov	r0, r4
   2a2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a2f0:	3468      	adds	r4, #104	; 0x68
   2a2f2:	e7d9      	b.n	2a2a8 <__sfp+0x1c>
   2a2f4:	2104      	movs	r1, #4
   2a2f6:	4638      	mov	r0, r7
   2a2f8:	f007 f954 	bl	315a4 <__sfmoreglue>
   2a2fc:	4604      	mov	r4, r0
   2a2fe:	6030      	str	r0, [r6, #0]
   2a300:	2800      	cmp	r0, #0
   2a302:	d1d5      	bne.n	2a2b0 <__sfp+0x24>
   2a304:	f7ff ff78 	bl	2a1f8 <__sfp_lock_release>
   2a308:	230c      	movs	r3, #12
   2a30a:	603b      	str	r3, [r7, #0]
   2a30c:	e7ee      	b.n	2a2ec <__sfp+0x60>
   2a30e:	bf00      	nop
   2a310:	00032b08 	.word	0x00032b08
   2a314:	ffff0001 	.word	0xffff0001

0002a318 <fiprintf>:
   2a318:	b40e      	push	{r1, r2, r3}
   2a31a:	b503      	push	{r0, r1, lr}
   2a31c:	ab03      	add	r3, sp, #12
   2a31e:	4601      	mov	r1, r0
   2a320:	4805      	ldr	r0, [pc, #20]	; (2a338 <fiprintf+0x20>)
   2a322:	f853 2b04 	ldr.w	r2, [r3], #4
   2a326:	6800      	ldr	r0, [r0, #0]
   2a328:	9301      	str	r3, [sp, #4]
   2a32a:	f000 f807 	bl	2a33c <_vfiprintf_r>
   2a32e:	b002      	add	sp, #8
   2a330:	f85d eb04 	ldr.w	lr, [sp], #4
   2a334:	b003      	add	sp, #12
   2a336:	4770      	bx	lr
   2a338:	2000ca5c 	.word	0x2000ca5c

0002a33c <_vfiprintf_r>:
   2a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a340:	460d      	mov	r5, r1
   2a342:	b09d      	sub	sp, #116	; 0x74
   2a344:	4614      	mov	r4, r2
   2a346:	4698      	mov	r8, r3
   2a348:	4606      	mov	r6, r0
   2a34a:	b118      	cbz	r0, 2a354 <_vfiprintf_r+0x18>
   2a34c:	6983      	ldr	r3, [r0, #24]
   2a34e:	b90b      	cbnz	r3, 2a354 <_vfiprintf_r+0x18>
   2a350:	f7ff ff64 	bl	2a21c <__sinit>
   2a354:	4b87      	ldr	r3, [pc, #540]	; (2a574 <_vfiprintf_r+0x238>)
   2a356:	429d      	cmp	r5, r3
   2a358:	d11b      	bne.n	2a392 <_vfiprintf_r+0x56>
   2a35a:	6875      	ldr	r5, [r6, #4]
   2a35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2a35e:	07d9      	lsls	r1, r3, #31
   2a360:	d405      	bmi.n	2a36e <_vfiprintf_r+0x32>
   2a362:	89ab      	ldrh	r3, [r5, #12]
   2a364:	059a      	lsls	r2, r3, #22
   2a366:	d402      	bmi.n	2a36e <_vfiprintf_r+0x32>
   2a368:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2a36a:	f7e8 f8b9 	bl	124e0 <__retarget_lock_acquire_recursive>
   2a36e:	89ab      	ldrh	r3, [r5, #12]
   2a370:	071b      	lsls	r3, r3, #28
   2a372:	d501      	bpl.n	2a378 <_vfiprintf_r+0x3c>
   2a374:	692b      	ldr	r3, [r5, #16]
   2a376:	b9eb      	cbnz	r3, 2a3b4 <_vfiprintf_r+0x78>
   2a378:	4629      	mov	r1, r5
   2a37a:	4630      	mov	r0, r6
   2a37c:	f000 f95c 	bl	2a638 <__swsetup_r>
   2a380:	b1c0      	cbz	r0, 2a3b4 <_vfiprintf_r+0x78>
   2a382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2a384:	07dc      	lsls	r4, r3, #31
   2a386:	d50e      	bpl.n	2a3a6 <_vfiprintf_r+0x6a>
   2a388:	f04f 30ff 	mov.w	r0, #4294967295
   2a38c:	b01d      	add	sp, #116	; 0x74
   2a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a392:	4b79      	ldr	r3, [pc, #484]	; (2a578 <_vfiprintf_r+0x23c>)
   2a394:	429d      	cmp	r5, r3
   2a396:	d101      	bne.n	2a39c <_vfiprintf_r+0x60>
   2a398:	68b5      	ldr	r5, [r6, #8]
   2a39a:	e7df      	b.n	2a35c <_vfiprintf_r+0x20>
   2a39c:	4b77      	ldr	r3, [pc, #476]	; (2a57c <_vfiprintf_r+0x240>)
   2a39e:	429d      	cmp	r5, r3
   2a3a0:	bf08      	it	eq
   2a3a2:	68f5      	ldreq	r5, [r6, #12]
   2a3a4:	e7da      	b.n	2a35c <_vfiprintf_r+0x20>
   2a3a6:	89ab      	ldrh	r3, [r5, #12]
   2a3a8:	0598      	lsls	r0, r3, #22
   2a3aa:	d4ed      	bmi.n	2a388 <_vfiprintf_r+0x4c>
   2a3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2a3ae:	f7e8 f8b3 	bl	12518 <__retarget_lock_release_recursive>
   2a3b2:	e7e9      	b.n	2a388 <_vfiprintf_r+0x4c>
   2a3b4:	2300      	movs	r3, #0
   2a3b6:	f8cd 800c 	str.w	r8, [sp, #12]
   2a3ba:	f04f 0901 	mov.w	r9, #1
   2a3be:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2a580 <_vfiprintf_r+0x244>
   2a3c2:	9309      	str	r3, [sp, #36]	; 0x24
   2a3c4:	2320      	movs	r3, #32
   2a3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2a3ca:	2330      	movs	r3, #48	; 0x30
   2a3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2a3d0:	4623      	mov	r3, r4
   2a3d2:	469a      	mov	sl, r3
   2a3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a3d8:	b10a      	cbz	r2, 2a3de <_vfiprintf_r+0xa2>
   2a3da:	2a25      	cmp	r2, #37	; 0x25
   2a3dc:	d1f9      	bne.n	2a3d2 <_vfiprintf_r+0x96>
   2a3de:	ebba 0b04 	subs.w	fp, sl, r4
   2a3e2:	d00b      	beq.n	2a3fc <_vfiprintf_r+0xc0>
   2a3e4:	465b      	mov	r3, fp
   2a3e6:	4622      	mov	r2, r4
   2a3e8:	4629      	mov	r1, r5
   2a3ea:	4630      	mov	r0, r6
   2a3ec:	f007 f946 	bl	3167c <__sfputs_r>
   2a3f0:	3001      	adds	r0, #1
   2a3f2:	f000 80a6 	beq.w	2a542 <_vfiprintf_r+0x206>
   2a3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a3f8:	445a      	add	r2, fp
   2a3fa:	9209      	str	r2, [sp, #36]	; 0x24
   2a3fc:	f89a 3000 	ldrb.w	r3, [sl]
   2a400:	2b00      	cmp	r3, #0
   2a402:	f000 809e 	beq.w	2a542 <_vfiprintf_r+0x206>
   2a406:	2300      	movs	r3, #0
   2a408:	f04f 32ff 	mov.w	r2, #4294967295
   2a40c:	f10a 0a01 	add.w	sl, sl, #1
   2a410:	9304      	str	r3, [sp, #16]
   2a412:	9307      	str	r3, [sp, #28]
   2a414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2a418:	931a      	str	r3, [sp, #104]	; 0x68
   2a41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2a41e:	4654      	mov	r4, sl
   2a420:	2205      	movs	r2, #5
   2a422:	4857      	ldr	r0, [pc, #348]	; (2a580 <_vfiprintf_r+0x244>)
   2a424:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a428:	f006 f9ed 	bl	30806 <memchr>
   2a42c:	9b04      	ldr	r3, [sp, #16]
   2a42e:	b9d0      	cbnz	r0, 2a466 <_vfiprintf_r+0x12a>
   2a430:	06d9      	lsls	r1, r3, #27
   2a432:	bf44      	itt	mi
   2a434:	2220      	movmi	r2, #32
   2a436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2a43a:	071a      	lsls	r2, r3, #28
   2a43c:	bf44      	itt	mi
   2a43e:	222b      	movmi	r2, #43	; 0x2b
   2a440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2a444:	f89a 2000 	ldrb.w	r2, [sl]
   2a448:	2a2a      	cmp	r2, #42	; 0x2a
   2a44a:	d014      	beq.n	2a476 <_vfiprintf_r+0x13a>
   2a44c:	9a07      	ldr	r2, [sp, #28]
   2a44e:	4654      	mov	r4, sl
   2a450:	2000      	movs	r0, #0
   2a452:	f04f 0c0a 	mov.w	ip, #10
   2a456:	4621      	mov	r1, r4
   2a458:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a45c:	3b30      	subs	r3, #48	; 0x30
   2a45e:	2b09      	cmp	r3, #9
   2a460:	d94a      	bls.n	2a4f8 <_vfiprintf_r+0x1bc>
   2a462:	b970      	cbnz	r0, 2a482 <_vfiprintf_r+0x146>
   2a464:	e014      	b.n	2a490 <_vfiprintf_r+0x154>
   2a466:	eba0 0008 	sub.w	r0, r0, r8
   2a46a:	46a2      	mov	sl, r4
   2a46c:	fa09 f000 	lsl.w	r0, r9, r0
   2a470:	4318      	orrs	r0, r3
   2a472:	9004      	str	r0, [sp, #16]
   2a474:	e7d3      	b.n	2a41e <_vfiprintf_r+0xe2>
   2a476:	9a03      	ldr	r2, [sp, #12]
   2a478:	1d11      	adds	r1, r2, #4
   2a47a:	6812      	ldr	r2, [r2, #0]
   2a47c:	2a00      	cmp	r2, #0
   2a47e:	9103      	str	r1, [sp, #12]
   2a480:	db01      	blt.n	2a486 <_vfiprintf_r+0x14a>
   2a482:	9207      	str	r2, [sp, #28]
   2a484:	e004      	b.n	2a490 <_vfiprintf_r+0x154>
   2a486:	4252      	negs	r2, r2
   2a488:	f043 0302 	orr.w	r3, r3, #2
   2a48c:	9207      	str	r2, [sp, #28]
   2a48e:	9304      	str	r3, [sp, #16]
   2a490:	7823      	ldrb	r3, [r4, #0]
   2a492:	2b2e      	cmp	r3, #46	; 0x2e
   2a494:	d10a      	bne.n	2a4ac <_vfiprintf_r+0x170>
   2a496:	7863      	ldrb	r3, [r4, #1]
   2a498:	2b2a      	cmp	r3, #42	; 0x2a
   2a49a:	d132      	bne.n	2a502 <_vfiprintf_r+0x1c6>
   2a49c:	9b03      	ldr	r3, [sp, #12]
   2a49e:	3402      	adds	r4, #2
   2a4a0:	1d1a      	adds	r2, r3, #4
   2a4a2:	681b      	ldr	r3, [r3, #0]
   2a4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2a4a8:	9203      	str	r2, [sp, #12]
   2a4aa:	9305      	str	r3, [sp, #20]
   2a4ac:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2a584 <_vfiprintf_r+0x248>
   2a4b0:	2203      	movs	r2, #3
   2a4b2:	7821      	ldrb	r1, [r4, #0]
   2a4b4:	4650      	mov	r0, sl
   2a4b6:	f006 f9a6 	bl	30806 <memchr>
   2a4ba:	b138      	cbz	r0, 2a4cc <_vfiprintf_r+0x190>
   2a4bc:	eba0 000a 	sub.w	r0, r0, sl
   2a4c0:	2240      	movs	r2, #64	; 0x40
   2a4c2:	9b04      	ldr	r3, [sp, #16]
   2a4c4:	3401      	adds	r4, #1
   2a4c6:	4082      	lsls	r2, r0
   2a4c8:	4313      	orrs	r3, r2
   2a4ca:	9304      	str	r3, [sp, #16]
   2a4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a4d0:	2206      	movs	r2, #6
   2a4d2:	482d      	ldr	r0, [pc, #180]	; (2a588 <_vfiprintf_r+0x24c>)
   2a4d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2a4d8:	f006 f995 	bl	30806 <memchr>
   2a4dc:	2800      	cmp	r0, #0
   2a4de:	d03f      	beq.n	2a560 <_vfiprintf_r+0x224>
   2a4e0:	4b2a      	ldr	r3, [pc, #168]	; (2a58c <_vfiprintf_r+0x250>)
   2a4e2:	bb1b      	cbnz	r3, 2a52c <_vfiprintf_r+0x1f0>
   2a4e4:	9b03      	ldr	r3, [sp, #12]
   2a4e6:	3307      	adds	r3, #7
   2a4e8:	f023 0307 	bic.w	r3, r3, #7
   2a4ec:	3308      	adds	r3, #8
   2a4ee:	9303      	str	r3, [sp, #12]
   2a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a4f2:	443b      	add	r3, r7
   2a4f4:	9309      	str	r3, [sp, #36]	; 0x24
   2a4f6:	e76b      	b.n	2a3d0 <_vfiprintf_r+0x94>
   2a4f8:	fb0c 3202 	mla	r2, ip, r2, r3
   2a4fc:	460c      	mov	r4, r1
   2a4fe:	2001      	movs	r0, #1
   2a500:	e7a9      	b.n	2a456 <_vfiprintf_r+0x11a>
   2a502:	2300      	movs	r3, #0
   2a504:	3401      	adds	r4, #1
   2a506:	f04f 0c0a 	mov.w	ip, #10
   2a50a:	4619      	mov	r1, r3
   2a50c:	9305      	str	r3, [sp, #20]
   2a50e:	4620      	mov	r0, r4
   2a510:	f810 2b01 	ldrb.w	r2, [r0], #1
   2a514:	3a30      	subs	r2, #48	; 0x30
   2a516:	2a09      	cmp	r2, #9
   2a518:	d903      	bls.n	2a522 <_vfiprintf_r+0x1e6>
   2a51a:	2b00      	cmp	r3, #0
   2a51c:	d0c6      	beq.n	2a4ac <_vfiprintf_r+0x170>
   2a51e:	9105      	str	r1, [sp, #20]
   2a520:	e7c4      	b.n	2a4ac <_vfiprintf_r+0x170>
   2a522:	fb0c 2101 	mla	r1, ip, r1, r2
   2a526:	4604      	mov	r4, r0
   2a528:	2301      	movs	r3, #1
   2a52a:	e7f0      	b.n	2a50e <_vfiprintf_r+0x1d2>
   2a52c:	ab03      	add	r3, sp, #12
   2a52e:	462a      	mov	r2, r5
   2a530:	a904      	add	r1, sp, #16
   2a532:	4630      	mov	r0, r6
   2a534:	9300      	str	r3, [sp, #0]
   2a536:	4b16      	ldr	r3, [pc, #88]	; (2a590 <_vfiprintf_r+0x254>)
   2a538:	f7fd fe10 	bl	2815c <_printf_float>
   2a53c:	4607      	mov	r7, r0
   2a53e:	1c78      	adds	r0, r7, #1
   2a540:	d1d6      	bne.n	2a4f0 <_vfiprintf_r+0x1b4>
   2a542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2a544:	07d9      	lsls	r1, r3, #31
   2a546:	d405      	bmi.n	2a554 <_vfiprintf_r+0x218>
   2a548:	89ab      	ldrh	r3, [r5, #12]
   2a54a:	059a      	lsls	r2, r3, #22
   2a54c:	d402      	bmi.n	2a554 <_vfiprintf_r+0x218>
   2a54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2a550:	f7e7 ffe2 	bl	12518 <__retarget_lock_release_recursive>
   2a554:	89ab      	ldrh	r3, [r5, #12]
   2a556:	065b      	lsls	r3, r3, #25
   2a558:	f53f af16 	bmi.w	2a388 <_vfiprintf_r+0x4c>
   2a55c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a55e:	e715      	b.n	2a38c <_vfiprintf_r+0x50>
   2a560:	ab03      	add	r3, sp, #12
   2a562:	462a      	mov	r2, r5
   2a564:	a904      	add	r1, sp, #16
   2a566:	4630      	mov	r0, r6
   2a568:	9300      	str	r3, [sp, #0]
   2a56a:	4b09      	ldr	r3, [pc, #36]	; (2a590 <_vfiprintf_r+0x254>)
   2a56c:	f7fe f82c 	bl	285c8 <_printf_i>
   2a570:	e7e4      	b.n	2a53c <_vfiprintf_r+0x200>
   2a572:	bf00      	nop
   2a574:	00032b64 	.word	0x00032b64
   2a578:	00032b44 	.word	0x00032b44
   2a57c:	00032b24 	.word	0x00032b24
   2a580:	0003c2d0 	.word	0x0003c2d0
   2a584:	0003c2d6 	.word	0x0003c2d6
   2a588:	0003c2da 	.word	0x0003c2da
   2a58c:	0002815d 	.word	0x0002815d
   2a590:	0003167d 	.word	0x0003167d

0002a594 <__swbuf_r>:
   2a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a596:	460e      	mov	r6, r1
   2a598:	4614      	mov	r4, r2
   2a59a:	4605      	mov	r5, r0
   2a59c:	b118      	cbz	r0, 2a5a6 <__swbuf_r+0x12>
   2a59e:	6983      	ldr	r3, [r0, #24]
   2a5a0:	b90b      	cbnz	r3, 2a5a6 <__swbuf_r+0x12>
   2a5a2:	f7ff fe3b 	bl	2a21c <__sinit>
   2a5a6:	4b21      	ldr	r3, [pc, #132]	; (2a62c <__swbuf_r+0x98>)
   2a5a8:	429c      	cmp	r4, r3
   2a5aa:	d110      	bne.n	2a5ce <__swbuf_r+0x3a>
   2a5ac:	686c      	ldr	r4, [r5, #4]
   2a5ae:	69a3      	ldr	r3, [r4, #24]
   2a5b0:	60a3      	str	r3, [r4, #8]
   2a5b2:	89a3      	ldrh	r3, [r4, #12]
   2a5b4:	071a      	lsls	r2, r3, #28
   2a5b6:	d501      	bpl.n	2a5bc <__swbuf_r+0x28>
   2a5b8:	6923      	ldr	r3, [r4, #16]
   2a5ba:	b993      	cbnz	r3, 2a5e2 <__swbuf_r+0x4e>
   2a5bc:	4621      	mov	r1, r4
   2a5be:	4628      	mov	r0, r5
   2a5c0:	f000 f83a 	bl	2a638 <__swsetup_r>
   2a5c4:	b168      	cbz	r0, 2a5e2 <__swbuf_r+0x4e>
   2a5c6:	f04f 37ff 	mov.w	r7, #4294967295
   2a5ca:	4638      	mov	r0, r7
   2a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a5ce:	4b18      	ldr	r3, [pc, #96]	; (2a630 <__swbuf_r+0x9c>)
   2a5d0:	429c      	cmp	r4, r3
   2a5d2:	d101      	bne.n	2a5d8 <__swbuf_r+0x44>
   2a5d4:	68ac      	ldr	r4, [r5, #8]
   2a5d6:	e7ea      	b.n	2a5ae <__swbuf_r+0x1a>
   2a5d8:	4b16      	ldr	r3, [pc, #88]	; (2a634 <__swbuf_r+0xa0>)
   2a5da:	429c      	cmp	r4, r3
   2a5dc:	bf08      	it	eq
   2a5de:	68ec      	ldreq	r4, [r5, #12]
   2a5e0:	e7e5      	b.n	2a5ae <__swbuf_r+0x1a>
   2a5e2:	6923      	ldr	r3, [r4, #16]
   2a5e4:	b2f6      	uxtb	r6, r6
   2a5e6:	6820      	ldr	r0, [r4, #0]
   2a5e8:	4637      	mov	r7, r6
   2a5ea:	1ac0      	subs	r0, r0, r3
   2a5ec:	6963      	ldr	r3, [r4, #20]
   2a5ee:	4283      	cmp	r3, r0
   2a5f0:	dc05      	bgt.n	2a5fe <__swbuf_r+0x6a>
   2a5f2:	4621      	mov	r1, r4
   2a5f4:	4628      	mov	r0, r5
   2a5f6:	f7ff fd93 	bl	2a120 <_fflush_r>
   2a5fa:	2800      	cmp	r0, #0
   2a5fc:	d1e3      	bne.n	2a5c6 <__swbuf_r+0x32>
   2a5fe:	68a3      	ldr	r3, [r4, #8]
   2a600:	3001      	adds	r0, #1
   2a602:	3b01      	subs	r3, #1
   2a604:	60a3      	str	r3, [r4, #8]
   2a606:	6823      	ldr	r3, [r4, #0]
   2a608:	1c5a      	adds	r2, r3, #1
   2a60a:	6022      	str	r2, [r4, #0]
   2a60c:	701e      	strb	r6, [r3, #0]
   2a60e:	6963      	ldr	r3, [r4, #20]
   2a610:	4283      	cmp	r3, r0
   2a612:	d004      	beq.n	2a61e <__swbuf_r+0x8a>
   2a614:	89a3      	ldrh	r3, [r4, #12]
   2a616:	07db      	lsls	r3, r3, #31
   2a618:	d5d7      	bpl.n	2a5ca <__swbuf_r+0x36>
   2a61a:	2e0a      	cmp	r6, #10
   2a61c:	d1d5      	bne.n	2a5ca <__swbuf_r+0x36>
   2a61e:	4621      	mov	r1, r4
   2a620:	4628      	mov	r0, r5
   2a622:	f7ff fd7d 	bl	2a120 <_fflush_r>
   2a626:	2800      	cmp	r0, #0
   2a628:	d0cf      	beq.n	2a5ca <__swbuf_r+0x36>
   2a62a:	e7cc      	b.n	2a5c6 <__swbuf_r+0x32>
   2a62c:	00032b64 	.word	0x00032b64
   2a630:	00032b44 	.word	0x00032b44
   2a634:	00032b24 	.word	0x00032b24

0002a638 <__swsetup_r>:
   2a638:	4b31      	ldr	r3, [pc, #196]	; (2a700 <__swsetup_r+0xc8>)
   2a63a:	b570      	push	{r4, r5, r6, lr}
   2a63c:	681d      	ldr	r5, [r3, #0]
   2a63e:	4606      	mov	r6, r0
   2a640:	460c      	mov	r4, r1
   2a642:	b125      	cbz	r5, 2a64e <__swsetup_r+0x16>
   2a644:	69ab      	ldr	r3, [r5, #24]
   2a646:	b913      	cbnz	r3, 2a64e <__swsetup_r+0x16>
   2a648:	4628      	mov	r0, r5
   2a64a:	f7ff fde7 	bl	2a21c <__sinit>
   2a64e:	4b2d      	ldr	r3, [pc, #180]	; (2a704 <__swsetup_r+0xcc>)
   2a650:	429c      	cmp	r4, r3
   2a652:	d10e      	bne.n	2a672 <__swsetup_r+0x3a>
   2a654:	686c      	ldr	r4, [r5, #4]
   2a656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a65a:	071a      	lsls	r2, r3, #28
   2a65c:	d42c      	bmi.n	2a6b8 <__swsetup_r+0x80>
   2a65e:	06dd      	lsls	r5, r3, #27
   2a660:	d411      	bmi.n	2a686 <__swsetup_r+0x4e>
   2a662:	2209      	movs	r2, #9
   2a664:	6032      	str	r2, [r6, #0]
   2a666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a66a:	f04f 30ff 	mov.w	r0, #4294967295
   2a66e:	81a3      	strh	r3, [r4, #12]
   2a670:	e03d      	b.n	2a6ee <__swsetup_r+0xb6>
   2a672:	4b25      	ldr	r3, [pc, #148]	; (2a708 <__swsetup_r+0xd0>)
   2a674:	429c      	cmp	r4, r3
   2a676:	d101      	bne.n	2a67c <__swsetup_r+0x44>
   2a678:	68ac      	ldr	r4, [r5, #8]
   2a67a:	e7ec      	b.n	2a656 <__swsetup_r+0x1e>
   2a67c:	4b23      	ldr	r3, [pc, #140]	; (2a70c <__swsetup_r+0xd4>)
   2a67e:	429c      	cmp	r4, r3
   2a680:	bf08      	it	eq
   2a682:	68ec      	ldreq	r4, [r5, #12]
   2a684:	e7e7      	b.n	2a656 <__swsetup_r+0x1e>
   2a686:	0758      	lsls	r0, r3, #29
   2a688:	d512      	bpl.n	2a6b0 <__swsetup_r+0x78>
   2a68a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a68c:	b141      	cbz	r1, 2a6a0 <__swsetup_r+0x68>
   2a68e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2a692:	4299      	cmp	r1, r3
   2a694:	d002      	beq.n	2a69c <__swsetup_r+0x64>
   2a696:	4630      	mov	r0, r6
   2a698:	f7fd fcbc 	bl	28014 <_free_r>
   2a69c:	2300      	movs	r3, #0
   2a69e:	6363      	str	r3, [r4, #52]	; 0x34
   2a6a0:	89a3      	ldrh	r3, [r4, #12]
   2a6a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2a6a6:	81a3      	strh	r3, [r4, #12]
   2a6a8:	2300      	movs	r3, #0
   2a6aa:	6063      	str	r3, [r4, #4]
   2a6ac:	6923      	ldr	r3, [r4, #16]
   2a6ae:	6023      	str	r3, [r4, #0]
   2a6b0:	89a3      	ldrh	r3, [r4, #12]
   2a6b2:	f043 0308 	orr.w	r3, r3, #8
   2a6b6:	81a3      	strh	r3, [r4, #12]
   2a6b8:	6923      	ldr	r3, [r4, #16]
   2a6ba:	b94b      	cbnz	r3, 2a6d0 <__swsetup_r+0x98>
   2a6bc:	89a3      	ldrh	r3, [r4, #12]
   2a6be:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2a6c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a6c6:	d003      	beq.n	2a6d0 <__swsetup_r+0x98>
   2a6c8:	4621      	mov	r1, r4
   2a6ca:	4630      	mov	r0, r6
   2a6cc:	f000 f820 	bl	2a710 <__smakebuf_r>
   2a6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a6d4:	f013 0201 	ands.w	r2, r3, #1
   2a6d8:	d00a      	beq.n	2a6f0 <__swsetup_r+0xb8>
   2a6da:	2200      	movs	r2, #0
   2a6dc:	60a2      	str	r2, [r4, #8]
   2a6de:	6962      	ldr	r2, [r4, #20]
   2a6e0:	4252      	negs	r2, r2
   2a6e2:	61a2      	str	r2, [r4, #24]
   2a6e4:	6922      	ldr	r2, [r4, #16]
   2a6e6:	b942      	cbnz	r2, 2a6fa <__swsetup_r+0xc2>
   2a6e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2a6ec:	d1bb      	bne.n	2a666 <__swsetup_r+0x2e>
   2a6ee:	bd70      	pop	{r4, r5, r6, pc}
   2a6f0:	0799      	lsls	r1, r3, #30
   2a6f2:	bf58      	it	pl
   2a6f4:	6962      	ldrpl	r2, [r4, #20]
   2a6f6:	60a2      	str	r2, [r4, #8]
   2a6f8:	e7f4      	b.n	2a6e4 <__swsetup_r+0xac>
   2a6fa:	2000      	movs	r0, #0
   2a6fc:	e7f7      	b.n	2a6ee <__swsetup_r+0xb6>
   2a6fe:	bf00      	nop
   2a700:	2000ca5c 	.word	0x2000ca5c
   2a704:	00032b64 	.word	0x00032b64
   2a708:	00032b44 	.word	0x00032b44
   2a70c:	00032b24 	.word	0x00032b24

0002a710 <__smakebuf_r>:
   2a710:	898b      	ldrh	r3, [r1, #12]
   2a712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a714:	079d      	lsls	r5, r3, #30
   2a716:	4606      	mov	r6, r0
   2a718:	460c      	mov	r4, r1
   2a71a:	d507      	bpl.n	2a72c <__smakebuf_r+0x1c>
   2a71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2a720:	6023      	str	r3, [r4, #0]
   2a722:	6123      	str	r3, [r4, #16]
   2a724:	2301      	movs	r3, #1
   2a726:	6163      	str	r3, [r4, #20]
   2a728:	b003      	add	sp, #12
   2a72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a72c:	ab01      	add	r3, sp, #4
   2a72e:	466a      	mov	r2, sp
   2a730:	f006 ffbd 	bl	316ae <__swhatbuf_r>
   2a734:	9f00      	ldr	r7, [sp, #0]
   2a736:	4605      	mov	r5, r0
   2a738:	4630      	mov	r0, r6
   2a73a:	4639      	mov	r1, r7
   2a73c:	f7fd fcb4 	bl	280a8 <_malloc_r>
   2a740:	b948      	cbnz	r0, 2a756 <__smakebuf_r+0x46>
   2a742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a746:	059a      	lsls	r2, r3, #22
   2a748:	d4ee      	bmi.n	2a728 <__smakebuf_r+0x18>
   2a74a:	f023 0303 	bic.w	r3, r3, #3
   2a74e:	f043 0302 	orr.w	r3, r3, #2
   2a752:	81a3      	strh	r3, [r4, #12]
   2a754:	e7e2      	b.n	2a71c <__smakebuf_r+0xc>
   2a756:	4b0d      	ldr	r3, [pc, #52]	; (2a78c <__smakebuf_r+0x7c>)
   2a758:	62b3      	str	r3, [r6, #40]	; 0x28
   2a75a:	89a3      	ldrh	r3, [r4, #12]
   2a75c:	6020      	str	r0, [r4, #0]
   2a75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2a762:	81a3      	strh	r3, [r4, #12]
   2a764:	9b01      	ldr	r3, [sp, #4]
   2a766:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2a76a:	b15b      	cbz	r3, 2a784 <__smakebuf_r+0x74>
   2a76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2a770:	4630      	mov	r0, r6
   2a772:	f000 f839 	bl	2a7e8 <_isatty_r>
   2a776:	b128      	cbz	r0, 2a784 <__smakebuf_r+0x74>
   2a778:	89a3      	ldrh	r3, [r4, #12]
   2a77a:	f023 0303 	bic.w	r3, r3, #3
   2a77e:	f043 0301 	orr.w	r3, r3, #1
   2a782:	81a3      	strh	r3, [r4, #12]
   2a784:	89a3      	ldrh	r3, [r4, #12]
   2a786:	431d      	orrs	r5, r3
   2a788:	81a5      	strh	r5, [r4, #12]
   2a78a:	e7cd      	b.n	2a728 <__smakebuf_r+0x18>
   2a78c:	0002a1e1 	.word	0x0002a1e1

0002a790 <raise>:
   2a790:	4b02      	ldr	r3, [pc, #8]	; (2a79c <raise+0xc>)
   2a792:	4601      	mov	r1, r0
   2a794:	6818      	ldr	r0, [r3, #0]
   2a796:	f006 bfaf 	b.w	316f8 <_raise_r>
   2a79a:	bf00      	nop
   2a79c:	2000ca5c 	.word	0x2000ca5c

0002a7a0 <_kill_r>:
   2a7a0:	b538      	push	{r3, r4, r5, lr}
   2a7a2:	2300      	movs	r3, #0
   2a7a4:	4d06      	ldr	r5, [pc, #24]	; (2a7c0 <_kill_r+0x20>)
   2a7a6:	4604      	mov	r4, r0
   2a7a8:	4608      	mov	r0, r1
   2a7aa:	4611      	mov	r1, r2
   2a7ac:	602b      	str	r3, [r5, #0]
   2a7ae:	f001 fbd0 	bl	2bf52 <_kill>
   2a7b2:	1c43      	adds	r3, r0, #1
   2a7b4:	d102      	bne.n	2a7bc <_kill_r+0x1c>
   2a7b6:	682b      	ldr	r3, [r5, #0]
   2a7b8:	b103      	cbz	r3, 2a7bc <_kill_r+0x1c>
   2a7ba:	6023      	str	r3, [r4, #0]
   2a7bc:	bd38      	pop	{r3, r4, r5, pc}
   2a7be:	bf00      	nop
   2a7c0:	2000ebac 	.word	0x2000ebac

0002a7c4 <_fstat_r>:
   2a7c4:	b538      	push	{r3, r4, r5, lr}
   2a7c6:	2300      	movs	r3, #0
   2a7c8:	4d06      	ldr	r5, [pc, #24]	; (2a7e4 <_fstat_r+0x20>)
   2a7ca:	4604      	mov	r4, r0
   2a7cc:	4608      	mov	r0, r1
   2a7ce:	4611      	mov	r1, r2
   2a7d0:	602b      	str	r3, [r5, #0]
   2a7d2:	f001 fbc2 	bl	2bf5a <_fstat>
   2a7d6:	1c43      	adds	r3, r0, #1
   2a7d8:	d102      	bne.n	2a7e0 <_fstat_r+0x1c>
   2a7da:	682b      	ldr	r3, [r5, #0]
   2a7dc:	b103      	cbz	r3, 2a7e0 <_fstat_r+0x1c>
   2a7de:	6023      	str	r3, [r4, #0]
   2a7e0:	bd38      	pop	{r3, r4, r5, pc}
   2a7e2:	bf00      	nop
   2a7e4:	2000ebac 	.word	0x2000ebac

0002a7e8 <_isatty_r>:
   2a7e8:	b538      	push	{r3, r4, r5, lr}
   2a7ea:	2300      	movs	r3, #0
   2a7ec:	4d05      	ldr	r5, [pc, #20]	; (2a804 <_isatty_r+0x1c>)
   2a7ee:	4604      	mov	r4, r0
   2a7f0:	4608      	mov	r0, r1
   2a7f2:	602b      	str	r3, [r5, #0]
   2a7f4:	f001 fba8 	bl	2bf48 <_isatty>
   2a7f8:	1c43      	adds	r3, r0, #1
   2a7fa:	d102      	bne.n	2a802 <_isatty_r+0x1a>
   2a7fc:	682b      	ldr	r3, [r5, #0]
   2a7fe:	b103      	cbz	r3, 2a802 <_isatty_r+0x1a>
   2a800:	6023      	str	r3, [r4, #0]
   2a802:	bd38      	pop	{r3, r4, r5, pc}
   2a804:	2000ebac 	.word	0x2000ebac

0002a808 <z_log_msg_static_create.constprop.0>:
   2a808:	2300      	movs	r3, #0
   2a80a:	f7e4 bff1 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002a80e <fds_init>:

/**@brief Initialize the file descriptor structure used by poll.
 */
int fds_init(struct mqtt_client *c, struct pollfd *fds)
{
   2a80e:	4603      	mov	r3, r0
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   2a810:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2a814:	b920      	cbnz	r0, 2a820 <fds_init+0x12>
		fds->fd = c->transport.tcp.sock;
   2a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a818:	600b      	str	r3, [r1, #0]
	} else {
		return -ENOTSUP;
	}

	fds->events = POLLIN;
   2a81a:	2301      	movs	r3, #1
   2a81c:	808b      	strh	r3, [r1, #4]

	return 0;
   2a81e:	4770      	bx	lr
		return -ENOTSUP;
   2a820:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a824:	4770      	bx	lr

0002a826 <z_log_msg_static_create.constprop.0>:
   2a826:	2300      	movs	r3, #0
   2a828:	f7e4 bfe2 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002a82c <button_handler>:
	switch (has_changed) {
   2a82c:	2901      	cmp	r1, #1
   2a82e:	d103      	bne.n	2a838 <button_handler+0xc>
		if (buttons & DK_BTN1_MSK){
   2a830:	07c3      	lsls	r3, r0, #31
   2a832:	d501      	bpl.n	2a838 <button_handler+0xc>
   2a834:	f7e0 bf60 	b.w	b6f8 <button_handler.part.0>
}
   2a838:	4770      	bx	lr

0002a83a <nrf_modem_fault_handler>:
	sys_reboot(SYS_REBOOT_COLD);
   2a83a:	2001      	movs	r0, #1
{
   2a83c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_COLD);
   2a83e:	f7e4 fc37 	bl	f0b0 <sys_reboot>

0002a842 <z_log_msg_static_create>:
   2a842:	f7e4 bfd5 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002a846 <parse_hex4>:
    for (i = 0; i < 4; i++)
   2a846:	2100      	movs	r1, #0
{
   2a848:	b510      	push	{r4, lr}
    unsigned int h = 0;
   2a84a:	460a      	mov	r2, r1
{
   2a84c:	4604      	mov	r4, r0
        if ((input[i] >= '0') && (input[i] <= '9'))
   2a84e:	5c63      	ldrb	r3, [r4, r1]
   2a850:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2a854:	2809      	cmp	r0, #9
   2a856:	d807      	bhi.n	2a868 <parse_hex4+0x22>
            h += (unsigned int) input[i] - '0';
   2a858:	3a30      	subs	r2, #48	; 0x30
        if (i < 3)
   2a85a:	2903      	cmp	r1, #3
            h += (unsigned int) 10 + input[i] - 'a';
   2a85c:	eb03 0002 	add.w	r0, r3, r2
        if (i < 3)
   2a860:	d00f      	beq.n	2a882 <parse_hex4+0x3c>
            h = h << 4;
   2a862:	0102      	lsls	r2, r0, #4
    for (i = 0; i < 4; i++)
   2a864:	3101      	adds	r1, #1
   2a866:	e7f2      	b.n	2a84e <parse_hex4+0x8>
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   2a868:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   2a86c:	2805      	cmp	r0, #5
   2a86e:	d801      	bhi.n	2a874 <parse_hex4+0x2e>
            h += (unsigned int) 10 + input[i] - 'A';
   2a870:	3a37      	subs	r2, #55	; 0x37
   2a872:	e7f2      	b.n	2a85a <parse_hex4+0x14>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   2a874:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
   2a878:	2805      	cmp	r0, #5
   2a87a:	d801      	bhi.n	2a880 <parse_hex4+0x3a>
            h += (unsigned int) 10 + input[i] - 'a';
   2a87c:	3a57      	subs	r2, #87	; 0x57
   2a87e:	e7ec      	b.n	2a85a <parse_hex4+0x14>
            return 0;
   2a880:	2000      	movs	r0, #0
}
   2a882:	bd10      	pop	{r4, pc}

0002a884 <buffer_skip_whitespace>:
{
   2a884:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   2a886:	b128      	cbz	r0, 2a894 <buffer_skip_whitespace+0x10>
   2a888:	6801      	ldr	r1, [r0, #0]
   2a88a:	b181      	cbz	r1, 2a8ae <buffer_skip_whitespace+0x2a>
    if (cannot_access_at_index(buffer, 0))
   2a88c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   2a890:	429a      	cmp	r2, r3
   2a892:	d305      	bcc.n	2a8a0 <buffer_skip_whitespace+0x1c>
}
   2a894:	bd10      	pop	{r4, pc}
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   2a896:	5c8c      	ldrb	r4, [r1, r2]
   2a898:	2c20      	cmp	r4, #32
   2a89a:	d8fb      	bhi.n	2a894 <buffer_skip_whitespace+0x10>
       buffer->offset++;
   2a89c:	3201      	adds	r2, #1
   2a89e:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   2a8a0:	6882      	ldr	r2, [r0, #8]
   2a8a2:	4293      	cmp	r3, r2
   2a8a4:	d8f7      	bhi.n	2a896 <buffer_skip_whitespace+0x12>
    if (buffer->offset == buffer->length)
   2a8a6:	d1f5      	bne.n	2a894 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   2a8a8:	3b01      	subs	r3, #1
   2a8aa:	6083      	str	r3, [r0, #8]
   2a8ac:	e7f2      	b.n	2a894 <buffer_skip_whitespace+0x10>
        return NULL;
   2a8ae:	4608      	mov	r0, r1
   2a8b0:	e7f0      	b.n	2a894 <buffer_skip_whitespace+0x10>

0002a8b2 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2a8b2:	4603      	mov	r3, r0
   2a8b4:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2a8b6:	2028      	movs	r0, #40	; 0x28
   2a8b8:	4798      	blx	r3
    if (node)
   2a8ba:	4604      	mov	r4, r0
   2a8bc:	b118      	cbz	r0, 2a8c6 <cJSON_New_Item.isra.0+0x14>
   2a8be:	2228      	movs	r2, #40	; 0x28
   2a8c0:	2100      	movs	r1, #0
   2a8c2:	f005 ffde 	bl	30882 <memset>
}
   2a8c6:	4620      	mov	r0, r4
   2a8c8:	bd10      	pop	{r4, pc}

0002a8ca <cJSON_ParseWithOpts>:
{
   2a8ca:	b570      	push	{r4, r5, r6, lr}
   2a8cc:	460d      	mov	r5, r1
   2a8ce:	4616      	mov	r6, r2
    if (NULL == value)
   2a8d0:	4604      	mov	r4, r0
   2a8d2:	b148      	cbz	r0, 2a8e8 <cJSON_ParseWithOpts+0x1e>
    buffer_length = strlen(value) + sizeof("");
   2a8d4:	f7de fca5 	bl	9222 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   2a8d8:	4633      	mov	r3, r6
   2a8da:	462a      	mov	r2, r5
   2a8dc:	1c41      	adds	r1, r0, #1
   2a8de:	4620      	mov	r0, r4
}
   2a8e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   2a8e4:	f7e2 bb2e 	b.w	cf44 <cJSON_ParseWithLengthOpts>
}
   2a8e8:	bd70      	pop	{r4, r5, r6, pc}

0002a8ea <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   2a8ea:	2200      	movs	r2, #0
   2a8ec:	4611      	mov	r1, r2
   2a8ee:	f7ff bfec 	b.w	2a8ca <cJSON_ParseWithOpts>

0002a8f2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, false);
   2a8f2:	2200      	movs	r2, #0
   2a8f4:	f7e2 bac4 	b.w	ce80 <get_object_item>

0002a8f8 <cJSON_IsString>:
    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   2a8f8:	b120      	cbz	r0, 2a904 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   2a8fa:	7b00      	ldrb	r0, [r0, #12]
   2a8fc:	f1a0 0310 	sub.w	r3, r0, #16
   2a900:	4258      	negs	r0, r3
   2a902:	4158      	adcs	r0, r3
}
   2a904:	4770      	bx	lr

0002a906 <cbpprintf_external>:
{
   2a906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a90a:	4606      	mov	r6, r0
   2a90c:	460d      	mov	r5, r1
   2a90e:	4617      	mov	r7, r2
	if (buf == NULL) {
   2a910:	4698      	mov	r8, r3
   2a912:	b32b      	cbz	r3, 2a960 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2a914:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a918:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a91c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a920:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a922:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a924:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a928:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a92c:	441c      	add	r4, r3
   2a92e:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a930:	45ca      	cmp	sl, r9
   2a932:	d309      	bcc.n	2a948 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a934:	4639      	mov	r1, r7
   2a936:	4630      	mov	r0, r6
   2a938:	46ac      	mov	ip, r5
   2a93a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a93e:	f108 0308 	add.w	r3, r8, #8
}
   2a942:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a946:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a948:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a94c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a950:	4620      	mov	r0, r4
		*ps = s;
   2a952:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a956:	f7de fc64 	bl	9222 <strlen>
   2a95a:	3001      	adds	r0, #1
   2a95c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a95e:	e7e7      	b.n	2a930 <cbpprintf_external+0x2a>
}
   2a960:	f06f 0015 	mvn.w	r0, #21
   2a964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a968 <is_ptr>:
{
   2a968:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2a96a:	2500      	movs	r5, #0
{
   2a96c:	4602      	mov	r2, r0
	bool mod = false;
   2a96e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2a970:	4614      	mov	r4, r2
   2a972:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a976:	b90b      	cbnz	r3, 2a97c <is_ptr+0x14>
					return false;
   2a978:	4618      	mov	r0, r3
   2a97a:	e009      	b.n	2a990 <is_ptr+0x28>
		if (mod) {
   2a97c:	b198      	cbz	r0, 2a9a6 <is_ptr+0x3e>
			if (cnt == n) {
   2a97e:	428d      	cmp	r5, r1
   2a980:	d107      	bne.n	2a992 <is_ptr+0x2a>
				if (c == 'p') {
   2a982:	2b70      	cmp	r3, #112	; 0x70
   2a984:	d004      	beq.n	2a990 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2a986:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2a98a:	2a3a      	cmp	r2, #58	; 0x3a
   2a98c:	d80b      	bhi.n	2a9a6 <is_ptr+0x3e>
					return false;
   2a98e:	2000      	movs	r0, #0
}
   2a990:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2a992:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2a996:	2e3a      	cmp	r6, #58	; 0x3a
   2a998:	d805      	bhi.n	2a9a6 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2a99a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2a99c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2a99e:	1c94      	adds	r4, r2, #2
   2a9a0:	2b00      	cmp	r3, #0
   2a9a2:	d0e9      	beq.n	2a978 <is_ptr+0x10>
   2a9a4:	2000      	movs	r0, #0
		if (c == '%') {
   2a9a6:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2a9a8:	4622      	mov	r2, r4
			mod = !mod;
   2a9aa:	bf08      	it	eq
   2a9ac:	f080 0001 	eoreq.w	r0, r0, #1
   2a9b0:	e7de      	b.n	2a970 <is_ptr+0x8>

0002a9b2 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2a9b2:	b40c      	push	{r2, r3}
   2a9b4:	4603      	mov	r3, r0
   2a9b6:	b507      	push	{r0, r1, r2, lr}
   2a9b8:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   2a9ba:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   2a9bc:	f240 1105 	movw	r1, #261	; 0x105
   2a9c0:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2a9c2:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2a9c4:	4798      	blx	r3
	va_end(args);

	return res;
}
   2a9c6:	b003      	add	sp, #12
   2a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
   2a9cc:	b002      	add	sp, #8
   2a9ce:	4770      	bx	lr

0002a9d0 <arch_printk_char_out>:
}
   2a9d0:	2000      	movs	r0, #0
   2a9d2:	4770      	bx	lr

0002a9d4 <str_out>:
{
   2a9d4:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a9d6:	688a      	ldr	r2, [r1, #8]
   2a9d8:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a9da:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a9dc:	b114      	cbz	r4, 2a9e4 <str_out+0x10>
   2a9de:	684b      	ldr	r3, [r1, #4]
   2a9e0:	4293      	cmp	r3, r2
   2a9e2:	dc01      	bgt.n	2a9e8 <str_out+0x14>
		ctx->count++;
   2a9e4:	608d      	str	r5, [r1, #8]
}
   2a9e6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a9e8:	3b01      	subs	r3, #1
   2a9ea:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a9ec:	bf08      	it	eq
   2a9ee:	2200      	moveq	r2, #0
   2a9f0:	608d      	str	r5, [r1, #8]
   2a9f2:	bf0c      	ite	eq
   2a9f4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a9f6:	54a0      	strbne	r0, [r4, r2]
   2a9f8:	e7f5      	b.n	2a9e6 <str_out+0x12>

0002a9fa <vprintk>:
		z_log_vprintk(fmt, ap);
   2a9fa:	f000 bb23 	b.w	2b044 <z_log_vprintk>

0002a9fe <printk>:
{
   2a9fe:	b40f      	push	{r0, r1, r2, r3}
   2aa00:	b507      	push	{r0, r1, r2, lr}
   2aa02:	a904      	add	r1, sp, #16
   2aa04:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2aa08:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2aa0a:	f000 fb1b 	bl	2b044 <z_log_vprintk>
}
   2aa0e:	b003      	add	sp, #12
   2aa10:	f85d eb04 	ldr.w	lr, [sp], #4
   2aa14:	b004      	add	sp, #16
   2aa16:	4770      	bx	lr

0002aa18 <snprintk>:
{
   2aa18:	b40c      	push	{r2, r3}
   2aa1a:	b507      	push	{r0, r1, r2, lr}
   2aa1c:	ab04      	add	r3, sp, #16
   2aa1e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2aa22:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2aa24:	f7e2 ffee 	bl	da04 <vsnprintk>
}
   2aa28:	b003      	add	sp, #12
   2aa2a:	f85d eb04 	ldr.w	lr, [sp], #4
   2aa2e:	b002      	add	sp, #8
   2aa30:	4770      	bx	lr

0002aa32 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2aa32:	4604      	mov	r4, r0
   2aa34:	b508      	push	{r3, lr}
   2aa36:	4608      	mov	r0, r1
   2aa38:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2aa3a:	461a      	mov	r2, r3
   2aa3c:	47a0      	blx	r4
	return z_impl_z_current_get();
   2aa3e:	f7fc fa2d 	bl	26e9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2aa42:	f7e7 fa6f 	bl	11f24 <z_impl_k_thread_abort>

0002aa46 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2aa46:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2aa4a:	8840      	ldrh	r0, [r0, #2]
}
   2aa4c:	0840      	lsrs	r0, r0, #1
   2aa4e:	4770      	bx	lr

0002aa50 <free_list_add>:
{
   2aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa52:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2aa54:	f7ff fff7 	bl	2aa46 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2aa58:	fab0 f080 	clz	r0, r0
   2aa5c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2aa60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2aa64:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2aa68:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2aa6a:	1d17      	adds	r7, r2, #4
{
   2aa6c:	460c      	mov	r4, r1
   2aa6e:	3206      	adds	r2, #6
   2aa70:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2aa72:	b956      	cbnz	r6, 2aa8a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2aa74:	2101      	movs	r1, #1
   2aa76:	fa01 f000 	lsl.w	r0, r1, r0
   2aa7a:	68d9      	ldr	r1, [r3, #12]
   2aa7c:	4301      	orrs	r1, r0
   2aa7e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2aa80:	f8cc 4010 	str.w	r4, [ip, #16]
   2aa84:	53dd      	strh	r5, [r3, r7]
   2aa86:	529d      	strh	r5, [r3, r2]
}
   2aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2aa8a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2aa8c:	3104      	adds	r1, #4
   2aa8e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2aa90:	53d8      	strh	r0, [r3, r7]
   2aa92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2aa96:	529e      	strh	r6, [r3, r2]
   2aa98:	80c5      	strh	r5, [r0, #6]
   2aa9a:	525d      	strh	r5, [r3, r1]
   2aa9c:	e7f4      	b.n	2aa88 <free_list_add+0x38>

0002aa9e <free_list_remove_bidx>:
{
   2aa9e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2aaa0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2aaa4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2aaa6:	4299      	cmp	r1, r3
   2aaa8:	f102 0104 	add.w	r1, r2, #4
   2aaac:	d10a      	bne.n	2aac4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2aaae:	2301      	movs	r3, #1
   2aab0:	fa03 f202 	lsl.w	r2, r3, r2
   2aab4:	68c3      	ldr	r3, [r0, #12]
   2aab6:	ea23 0302 	bic.w	r3, r3, r2
   2aaba:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2aabc:	2300      	movs	r3, #0
   2aabe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2aac2:	bd10      	pop	{r4, pc}
   2aac4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2aac6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2aaca:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2aace:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2aad2:	80cb      	strh	r3, [r1, #6]
   2aad4:	8082      	strh	r2, [r0, #4]
}
   2aad6:	e7f4      	b.n	2aac2 <free_list_remove_bidx+0x24>

0002aad8 <free_list_remove>:
{
   2aad8:	b508      	push	{r3, lr}
   2aada:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2aadc:	f7ff ffb3 	bl	2aa46 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2aae0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2aae4:	4618      	mov	r0, r3
}
   2aae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2aaea:	f1c2 021f 	rsb	r2, r2, #31
   2aaee:	f7ff bfd6 	b.w	2aa9e <free_list_remove_bidx>

0002aaf2 <alloc_chunk>:
{
   2aaf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aaf6:	fab1 f581 	clz	r5, r1
   2aafa:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2aafe:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2ab02:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2ab06:	4603      	mov	r3, r0
   2ab08:	460e      	mov	r6, r1
	if (b->next) {
   2ab0a:	b1c2      	cbz	r2, 2ab3e <alloc_chunk+0x4c>
   2ab0c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2ab0e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2ab12:	4618      	mov	r0, r3
   2ab14:	4621      	mov	r1, r4
   2ab16:	f7ff ff96 	bl	2aa46 <chunk_size>
   2ab1a:	42b0      	cmp	r0, r6
   2ab1c:	d306      	bcc.n	2ab2c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2ab1e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2ab20:	4618      	mov	r0, r3
   2ab22:	f7ff ffbc 	bl	2aa9e <free_list_remove_bidx>
}
   2ab26:	4620      	mov	r0, r4
   2ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2ab2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2ab30:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2ab32:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2ab34:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2ab38:	d001      	beq.n	2ab3e <alloc_chunk+0x4c>
   2ab3a:	4282      	cmp	r2, r0
   2ab3c:	d1e7      	bne.n	2ab0e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2ab3e:	f04f 34ff 	mov.w	r4, #4294967295
   2ab42:	f1c5 0220 	rsb	r2, r5, #32
   2ab46:	4094      	lsls	r4, r2
   2ab48:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2ab4a:	4014      	ands	r4, r2
   2ab4c:	d0eb      	beq.n	2ab26 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2ab4e:	fa94 f2a4 	rbit	r2, r4
   2ab52:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2ab56:	1d11      	adds	r1, r2, #4
   2ab58:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2ab5c:	4621      	mov	r1, r4
   2ab5e:	e7df      	b.n	2ab20 <alloc_chunk+0x2e>

0002ab60 <merge_chunks>:
{
   2ab60:	b538      	push	{r3, r4, r5, lr}
   2ab62:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2ab64:	f7ff ff6f 	bl	2aa46 <chunk_size>
{
   2ab68:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2ab6a:	4604      	mov	r4, r0
   2ab6c:	4611      	mov	r1, r2
   2ab6e:	4618      	mov	r0, r3
   2ab70:	f7ff ff69 	bl	2aa46 <chunk_size>
   2ab74:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2ab76:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2ab78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2ab7c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2ab7e:	4618      	mov	r0, r3
   2ab80:	f7ff ff61 	bl	2aa46 <chunk_size>
	void *cmem = &buf[c];
   2ab84:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2ab86:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2ab8a:	bd38      	pop	{r3, r4, r5, pc}

0002ab8c <split_chunks>:
{
   2ab8c:	b538      	push	{r3, r4, r5, lr}
   2ab8e:	460c      	mov	r4, r1
   2ab90:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2ab92:	f7ff ff58 	bl	2aa46 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2ab96:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2ab98:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2ab9a:	4405      	add	r5, r0
   2ab9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aba0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2aba2:	8060      	strh	r0, [r4, #2]
   2aba4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aba8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2abaa:	8044      	strh	r4, [r0, #2]
   2abac:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2abb0:	4618      	mov	r0, r3
   2abb2:	4611      	mov	r1, r2
   2abb4:	f7ff ff47 	bl	2aa46 <chunk_size>
	void *cmem = &buf[c];
   2abb8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2abba:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2abbe:	bd38      	pop	{r3, r4, r5, pc}

0002abc0 <free_chunk>:
{
   2abc0:	b538      	push	{r3, r4, r5, lr}
   2abc2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2abc4:	f7ff ff3f 	bl	2aa46 <chunk_size>
   2abc8:	460c      	mov	r4, r1
   2abca:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2abcc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2abd0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2abd2:	07da      	lsls	r2, r3, #31
   2abd4:	d40a      	bmi.n	2abec <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2abd6:	4628      	mov	r0, r5
   2abd8:	f7ff ff7e 	bl	2aad8 <free_list_remove>
	return c + chunk_size(h, c);
   2abdc:	4621      	mov	r1, r4
   2abde:	4628      	mov	r0, r5
   2abe0:	f7ff ff31 	bl	2aa46 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2abe4:	1822      	adds	r2, r4, r0
   2abe6:	4628      	mov	r0, r5
   2abe8:	f7ff ffba 	bl	2ab60 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2abec:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2abf0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2abf2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2abf6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2abf8:	07db      	lsls	r3, r3, #31
   2abfa:	d40c      	bmi.n	2ac16 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2abfc:	4628      	mov	r0, r5
   2abfe:	f7ff ff6b 	bl	2aad8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2ac02:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2ac06:	4622      	mov	r2, r4
   2ac08:	1a61      	subs	r1, r4, r1
   2ac0a:	4628      	mov	r0, r5
   2ac0c:	f7ff ffa8 	bl	2ab60 <merge_chunks>
   2ac10:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2ac14:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2ac16:	4621      	mov	r1, r4
   2ac18:	4628      	mov	r0, r5
}
   2ac1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2ac1e:	f7ff bf17 	b.w	2aa50 <free_list_add>

0002ac22 <sys_heap_alloc>:
{
   2ac22:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2ac24:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ac26:	b909      	cbnz	r1, 2ac2c <sys_heap_alloc+0xa>
		return NULL;
   2ac28:	2000      	movs	r0, #0
}
   2ac2a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ac2c:	68ab      	ldr	r3, [r5, #8]
   2ac2e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2ac32:	d9f9      	bls.n	2ac28 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2ac34:	310b      	adds	r1, #11
   2ac36:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2ac38:	4621      	mov	r1, r4
   2ac3a:	4628      	mov	r0, r5
   2ac3c:	f7ff ff59 	bl	2aaf2 <alloc_chunk>
	if (c == 0U) {
   2ac40:	4606      	mov	r6, r0
   2ac42:	2800      	cmp	r0, #0
   2ac44:	d0f0      	beq.n	2ac28 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2ac46:	4601      	mov	r1, r0
   2ac48:	4628      	mov	r0, r5
   2ac4a:	f7ff fefc 	bl	2aa46 <chunk_size>
   2ac4e:	42a0      	cmp	r0, r4
   2ac50:	d907      	bls.n	2ac62 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2ac52:	4628      	mov	r0, r5
   2ac54:	1932      	adds	r2, r6, r4
   2ac56:	f7ff ff99 	bl	2ab8c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2ac5a:	4611      	mov	r1, r2
   2ac5c:	4628      	mov	r0, r5
   2ac5e:	f7ff fef7 	bl	2aa50 <free_list_add>
	void *cmem = &buf[c];
   2ac62:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2ac66:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2ac68:	8853      	ldrh	r3, [r2, #2]
   2ac6a:	3004      	adds	r0, #4
   2ac6c:	f043 0301 	orr.w	r3, r3, #1
   2ac70:	8053      	strh	r3, [r2, #2]
	return mem;
   2ac72:	e7da      	b.n	2ac2a <sys_heap_alloc+0x8>

0002ac74 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ac74:	2200      	movs	r2, #0
	return list->head;
   2ac76:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ac78:	b90b      	cbnz	r3, 2ac7e <sys_slist_find_and_remove+0xa>
   2ac7a:	4618      	mov	r0, r3
   2ac7c:	4770      	bx	lr
   2ac7e:	428b      	cmp	r3, r1
   2ac80:	d110      	bne.n	2aca4 <sys_slist_find_and_remove+0x30>
	return node->next;
   2ac82:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ac84:	b942      	cbnz	r2, 2ac98 <sys_slist_find_and_remove+0x24>
   2ac86:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2ac88:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ac8a:	4291      	cmp	r1, r2
   2ac8c:	d100      	bne.n	2ac90 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2ac8e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2ac90:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ac92:	2001      	movs	r0, #1
	parent->next = child;
   2ac94:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ac96:	4770      	bx	lr
	parent->next = child;
   2ac98:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ac9a:	6843      	ldr	r3, [r0, #4]
   2ac9c:	4299      	cmp	r1, r3
	list->tail = node;
   2ac9e:	bf08      	it	eq
   2aca0:	6042      	streq	r2, [r0, #4]
}
   2aca2:	e7f5      	b.n	2ac90 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2aca4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aca6:	681b      	ldr	r3, [r3, #0]
   2aca8:	e7e6      	b.n	2ac78 <sys_slist_find_and_remove+0x4>

0002acaa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2acaa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2acac:	f013 0307 	ands.w	r3, r3, #7
   2acb0:	d105      	bne.n	2acbe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2acb2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2acb4:	2b00      	cmp	r3, #0
   2acb6:	bf0c      	ite	eq
   2acb8:	2000      	moveq	r0, #0
   2acba:	2003      	movne	r0, #3
   2acbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2acbe:	2b02      	cmp	r3, #2
   2acc0:	d105      	bne.n	2acce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2acc2:	8bc0      	ldrh	r0, [r0, #30]
   2acc4:	fab0 f080 	clz	r0, r0
   2acc8:	0940      	lsrs	r0, r0, #5
   2acca:	0080      	lsls	r0, r0, #2
   2accc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2acce:	2b01      	cmp	r3, #1
   2acd0:	d105      	bne.n	2acde <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2acd2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2acd4:	2b00      	cmp	r3, #0
   2acd6:	bf0c      	ite	eq
   2acd8:	2000      	moveq	r0, #0
   2acda:	2005      	movne	r0, #5
   2acdc:	4770      	bx	lr
	int evt = EVT_NOP;
   2acde:	2000      	movs	r0, #0
}
   2ace0:	4770      	bx	lr

0002ace2 <validate_args>:
{
   2ace2:	b510      	push	{r4, lr}
   2ace4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2ace6:	b100      	cbz	r0, 2acea <validate_args+0x8>
   2ace8:	b911      	cbnz	r1, 2acf0 <validate_args+0xe>
		return -EINVAL;
   2acea:	f06f 0015 	mvn.w	r0, #21
}
   2acee:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2acf0:	1d08      	adds	r0, r1, #4
   2acf2:	f000 f82f 	bl	2ad54 <sys_notify_validate>
	if ((rv == 0)
   2acf6:	2800      	cmp	r0, #0
   2acf8:	d1f9      	bne.n	2acee <validate_args+0xc>
	    && ((cli->notify.flags
   2acfa:	68a3      	ldr	r3, [r4, #8]
   2acfc:	2b03      	cmp	r3, #3
   2acfe:	d9f6      	bls.n	2acee <validate_args+0xc>
   2ad00:	e7f3      	b.n	2acea <validate_args+0x8>

0002ad02 <notify_one>:
{
   2ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad06:	460d      	mov	r5, r1
   2ad08:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ad0a:	4619      	mov	r1, r3
   2ad0c:	1d28      	adds	r0, r5, #4
{
   2ad0e:	4690      	mov	r8, r2
   2ad10:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2ad12:	f7e3 fb55 	bl	e3c0 <sys_notify_finalize>
	if (cb) {
   2ad16:	4604      	mov	r4, r0
   2ad18:	b138      	cbz	r0, 2ad2a <notify_one+0x28>
		cb(mgr, cli, state, res);
   2ad1a:	4633      	mov	r3, r6
   2ad1c:	4642      	mov	r2, r8
   2ad1e:	4629      	mov	r1, r5
   2ad20:	4638      	mov	r0, r7
   2ad22:	46a4      	mov	ip, r4
}
   2ad24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2ad28:	4760      	bx	ip
}
   2ad2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ad2e <onoff_manager_init>:
{
   2ad2e:	b538      	push	{r3, r4, r5, lr}
   2ad30:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2ad32:	4605      	mov	r5, r0
   2ad34:	b158      	cbz	r0, 2ad4e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2ad36:	b151      	cbz	r1, 2ad4e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2ad38:	680b      	ldr	r3, [r1, #0]
   2ad3a:	b143      	cbz	r3, 2ad4e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2ad3c:	684b      	ldr	r3, [r1, #4]
   2ad3e:	b133      	cbz	r3, 2ad4e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2ad40:	2220      	movs	r2, #32
   2ad42:	2100      	movs	r1, #0
   2ad44:	f005 fd9d 	bl	30882 <memset>
	return 0;
   2ad48:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2ad4a:	612c      	str	r4, [r5, #16]
}
   2ad4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ad4e:	f06f 0015 	mvn.w	r0, #21
   2ad52:	e7fb      	b.n	2ad4c <onoff_manager_init+0x1e>

0002ad54 <sys_notify_validate>:
	if (notify == NULL) {
   2ad54:	4603      	mov	r3, r0
   2ad56:	b140      	cbz	r0, 2ad6a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ad58:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ad5a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2ad5e:	2a02      	cmp	r2, #2
   2ad60:	d006      	beq.n	2ad70 <sys_notify_validate+0x1c>
   2ad62:	2a03      	cmp	r2, #3
   2ad64:	d004      	beq.n	2ad70 <sys_notify_validate+0x1c>
   2ad66:	2a01      	cmp	r2, #1
   2ad68:	d005      	beq.n	2ad76 <sys_notify_validate+0x22>
   2ad6a:	f06f 0015 	mvn.w	r0, #21
}
   2ad6e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2ad70:	681a      	ldr	r2, [r3, #0]
   2ad72:	2a00      	cmp	r2, #0
   2ad74:	d0f9      	beq.n	2ad6a <sys_notify_validate+0x16>
		notify->result = 0;
   2ad76:	2000      	movs	r0, #0
   2ad78:	6098      	str	r0, [r3, #8]
   2ad7a:	4770      	bx	lr

0002ad7c <outs>:
{
   2ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad80:	4607      	mov	r7, r0
   2ad82:	4688      	mov	r8, r1
   2ad84:	4615      	mov	r5, r2
   2ad86:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ad88:	4614      	mov	r4, r2
   2ad8a:	42b4      	cmp	r4, r6
   2ad8c:	d305      	bcc.n	2ad9a <outs+0x1e>
   2ad8e:	b10e      	cbz	r6, 2ad94 <outs+0x18>
	return (int)count;
   2ad90:	1b60      	subs	r0, r4, r5
   2ad92:	e008      	b.n	2ada6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ad94:	7823      	ldrb	r3, [r4, #0]
   2ad96:	2b00      	cmp	r3, #0
   2ad98:	d0fa      	beq.n	2ad90 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2ad9a:	4641      	mov	r1, r8
   2ad9c:	f814 0b01 	ldrb.w	r0, [r4], #1
   2ada0:	47b8      	blx	r7
		if (rc < 0) {
   2ada2:	2800      	cmp	r0, #0
   2ada4:	daf1      	bge.n	2ad8a <outs+0xe>
}
   2ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002adaa <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2adaa:	4040      	eors	r0, r0
   2adac:	f380 8811 	msr	BASEPRI, r0
   2adb0:	f04f 0004 	mov.w	r0, #4
   2adb4:	df02      	svc	2
}
   2adb6:	4770      	bx	lr

0002adb8 <assert_print>:

void assert_print(const char *fmt, ...)
{
   2adb8:	b40f      	push	{r0, r1, r2, r3}
   2adba:	b507      	push	{r0, r1, r2, lr}
   2adbc:	a904      	add	r1, sp, #16
   2adbe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2adc2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2adc4:	f7ff fe19 	bl	2a9fa <vprintk>

	va_end(ap);
}
   2adc8:	b003      	add	sp, #12
   2adca:	f85d eb04 	ldr.w	lr, [sp], #4
   2adce:	b004      	add	sp, #16
   2add0:	4770      	bx	lr

0002add2 <free_space>:
{
   2add2:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   2add4:	6903      	ldr	r3, [r0, #16]
{
   2add6:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2add8:	f013 0008 	ands.w	r0, r3, #8
   2addc:	d109      	bne.n	2adf2 <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2adde:	6813      	ldr	r3, [r2, #0]
   2ade0:	68d4      	ldr	r4, [r2, #12]
   2ade2:	429c      	cmp	r4, r3
	return true;
   2ade4:	bf9b      	ittet	ls
   2ade6:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   2ade8:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2adea:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2adec:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2adee:	600b      	str	r3, [r1, #0]
}
   2adf0:	bd10      	pop	{r4, pc}
   2adf2:	2300      	movs	r3, #0
		return false;
   2adf4:	4618      	mov	r0, r3
   2adf6:	e7fa      	b.n	2adee <free_space+0x1c>

0002adf8 <get_usage>:
{
   2adf8:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2adfa:	a901      	add	r1, sp, #4
{
   2adfc:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2adfe:	f7ff ffe8 	bl	2add2 <free_space>
   2ae02:	b120      	cbz	r0, 2ae0e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2ae04:	9b01      	ldr	r3, [sp, #4]
   2ae06:	68e2      	ldr	r2, [r4, #12]
   2ae08:	3b01      	subs	r3, #1
   2ae0a:	4413      	add	r3, r2
   2ae0c:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2ae0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2ae10:	9b01      	ldr	r3, [sp, #4]
   2ae12:	1ac0      	subs	r0, r0, r3
}
   2ae14:	3801      	subs	r0, #1
   2ae16:	b002      	add	sp, #8
   2ae18:	bd10      	pop	{r4, pc}

0002ae1a <idx_inc>:
{
   2ae1a:	b510      	push	{r4, lr}
   2ae1c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2ae1e:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2ae20:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2ae22:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2ae24:	07d2      	lsls	r2, r2, #31
   2ae26:	d502      	bpl.n	2ae2e <idx_inc+0x14>
		return i & (buffer->size - 1);
   2ae28:	3b01      	subs	r3, #1
   2ae2a:	4018      	ands	r0, r3
}
   2ae2c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2ae2e:	4298      	cmp	r0, r3
   2ae30:	bf28      	it	cs
   2ae32:	1ac0      	subcs	r0, r0, r3
   2ae34:	e7fa      	b.n	2ae2c <idx_inc+0x12>

0002ae36 <rd_idx_inc>:
{
   2ae36:	b510      	push	{r4, lr}
   2ae38:	4604      	mov	r4, r0
   2ae3a:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2ae3c:	68c1      	ldr	r1, [r0, #12]
   2ae3e:	f7ff ffec 	bl	2ae1a <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2ae42:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2ae44:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2ae46:	f023 0308 	bic.w	r3, r3, #8
   2ae4a:	6123      	str	r3, [r4, #16]
}
   2ae4c:	bd10      	pop	{r4, pc}

0002ae4e <add_skip_item>:
{
   2ae4e:	b538      	push	{r3, r4, r5, lr}
   2ae50:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae52:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2ae54:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae56:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2ae58:	f043 0302 	orr.w	r3, r3, #2
{
   2ae5c:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2ae5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2ae62:	6801      	ldr	r1, [r0, #0]
   2ae64:	462a      	mov	r2, r5
   2ae66:	f7ff ffd8 	bl	2ae1a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ae6a:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ae6c:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2ae6e:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2ae70:	bf08      	it	eq
   2ae72:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2ae74:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2ae76:	bf08      	it	eq
   2ae78:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ae7c:	462a      	mov	r2, r5
   2ae7e:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   2ae80:	bf08      	it	eq
   2ae82:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2ae84:	f7ff ffc9 	bl	2ae1a <idx_inc>
   2ae88:	6060      	str	r0, [r4, #4]
}
   2ae8a:	bd38      	pop	{r3, r4, r5, pc}

0002ae8c <drop_item_locked>:
{
   2ae8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2ae90:	68c7      	ldr	r7, [r0, #12]
   2ae92:	6a06      	ldr	r6, [r0, #32]
{
   2ae94:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2ae96:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   2ae9a:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2ae9c:	f003 0303 	and.w	r3, r3, #3
   2aea0:	2b02      	cmp	r3, #2
{
   2aea2:	4688      	mov	r8, r1
   2aea4:	4691      	mov	r9, r2
   2aea6:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2aeaa:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2aeae:	d009      	beq.n	2aec4 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   2aeb0:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2aeb2:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2aeb6:	6923      	ldr	r3, [r4, #16]
   2aeb8:	0799      	lsls	r1, r3, #30
   2aeba:	d410      	bmi.n	2aede <drop_item_locked+0x52>
		return false;
   2aebc:	2000      	movs	r0, #0
}
   2aebe:	b003      	add	sp, #12
   2aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2aec4:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2aec8:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2aeca:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2aecc:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2aed0:	d0f1      	beq.n	2aeb6 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2aed2:	f7ff ffb0 	bl	2ae36 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2aed6:	68e3      	ldr	r3, [r4, #12]
   2aed8:	60a3      	str	r3, [r4, #8]
		return true;
   2aeda:	2001      	movs	r0, #1
   2aedc:	e7ef      	b.n	2aebe <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2aede:	69e3      	ldr	r3, [r4, #28]
   2aee0:	4650      	mov	r0, sl
   2aee2:	4798      	blx	r3
	return item->hdr.valid;
   2aee4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   2aee8:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2aeea:	07da      	lsls	r2, r3, #31
   2aeec:	d5e6      	bpl.n	2aebc <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2aeee:	f013 0302 	ands.w	r3, r3, #2
   2aef2:	d01d      	beq.n	2af30 <drop_item_locked+0xa4>
		if (free_wlen) {
   2aef4:	f1b8 0f00 	cmp.w	r8, #0
   2aef8:	d003      	beq.n	2af02 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2aefa:	4641      	mov	r1, r8
   2aefc:	4620      	mov	r0, r4
   2aefe:	f7ff ffa6 	bl	2ae4e <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2af02:	6861      	ldr	r1, [r4, #4]
   2af04:	462a      	mov	r2, r5
   2af06:	4620      	mov	r0, r4
   2af08:	f7ff ff87 	bl	2ae1a <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2af0c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2af10:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2af12:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2af14:	d104      	bne.n	2af20 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2af16:	462a      	mov	r2, r5
   2af18:	4620      	mov	r0, r4
   2af1a:	f7ff ff7e 	bl	2ae1a <idx_inc>
   2af1e:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2af20:	68a3      	ldr	r3, [r4, #8]
   2af22:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2af24:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2af26:	6923      	ldr	r3, [r4, #16]
   2af28:	f043 0308 	orr.w	r3, r3, #8
   2af2c:	6123      	str	r3, [r4, #16]
   2af2e:	e7d4      	b.n	2aeda <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2af30:	4601      	mov	r1, r0
   2af32:	4620      	mov	r0, r4
   2af34:	9301      	str	r3, [sp, #4]
   2af36:	f7ff ff7e 	bl	2ae36 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2af3a:	68e2      	ldr	r2, [r4, #12]
   2af3c:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2af3e:	f1b8 0f00 	cmp.w	r8, #0
   2af42:	d004      	beq.n	2af4e <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2af44:	6821      	ldr	r1, [r4, #0]
   2af46:	6a22      	ldr	r2, [r4, #32]
   2af48:	9b01      	ldr	r3, [sp, #4]
   2af4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2af4e:	eb05 0208 	add.w	r2, r5, r8
   2af52:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2af56:	6821      	ldr	r1, [r4, #0]
   2af58:	4620      	mov	r0, r4
   2af5a:	f7ff ff5e 	bl	2ae1a <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2af5e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2af60:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2af62:	f043 0308 	orr.w	r3, r3, #8
   2af66:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   2af68:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2af6c:	f36f 0300 	bfc	r3, #0, #1
   2af70:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   2af74:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2af78:	e7af      	b.n	2aeda <drop_item_locked+0x4e>

0002af7a <post_drop_action>:
{
   2af7a:	b570      	push	{r4, r5, r6, lr}
   2af7c:	4604      	mov	r4, r0
   2af7e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   2af80:	f7ff ff4b 	bl	2ae1a <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2af84:	6823      	ldr	r3, [r4, #0]
   2af86:	4283      	cmp	r3, r0
   2af88:	d105      	bne.n	2af96 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   2af8a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2af8c:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2af8e:	f023 0308 	bic.w	r3, r3, #8
   2af92:	6123      	str	r3, [r4, #16]
}
   2af94:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2af96:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   2af98:	00ab      	lsls	r3, r5, #2
   2af9a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2af9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2afa2:	6861      	ldr	r1, [r4, #4]
   2afa4:	462a      	mov	r2, r5
   2afa6:	4620      	mov	r0, r4
   2afa8:	f7ff ff37 	bl	2ae1a <idx_inc>
   2afac:	6060      	str	r0, [r4, #4]
   2afae:	e7f1      	b.n	2af94 <post_drop_action+0x1a>

0002afb0 <max_utilization_update>:
{
   2afb0:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2afb2:	6903      	ldr	r3, [r0, #16]
{
   2afb4:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2afb6:	075b      	lsls	r3, r3, #29
   2afb8:	d506      	bpl.n	2afc8 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2afba:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2afbc:	f7ff ff1c 	bl	2adf8 <get_usage>
   2afc0:	4285      	cmp	r5, r0
   2afc2:	bf2c      	ite	cs
   2afc4:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2afc6:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2afc8:	bd38      	pop	{r3, r4, r5, pc}

0002afca <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2afca:	6902      	ldr	r2, [r0, #16]
   2afcc:	6883      	ldr	r3, [r0, #8]
   2afce:	0712      	lsls	r2, r2, #28
   2afd0:	d402      	bmi.n	2afd8 <mpsc_pbuf_is_pending+0xe>
   2afd2:	6842      	ldr	r2, [r0, #4]
   2afd4:	429a      	cmp	r2, r3
   2afd6:	d200      	bcs.n	2afda <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2afd8:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2afda:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2afdc:	1e18      	subs	r0, r3, #0
   2afde:	bf18      	it	ne
   2afe0:	2001      	movne	r0, #1
   2afe2:	4770      	bx	lr

0002afe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2afe4:	4770      	bx	lr

0002afe6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2afe6:	2806      	cmp	r0, #6
   2afe8:	d108      	bne.n	2affc <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2afea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2afee:	2201      	movs	r2, #1
   2aff0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2aff4:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2aff8:	bf20      	wfe
    while (true)
   2affa:	e7fd      	b.n	2aff8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2affc:	4770      	bx	lr

0002affe <pm_state_exit_post_ops>:
   2affe:	2300      	movs	r3, #0
   2b000:	f383 8811 	msr	BASEPRI, r3
   2b004:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2b008:	4770      	bx	lr

0002b00a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2b00a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2b00c:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2b00e:	bf5f      	itttt	pl
   2b010:	6803      	ldrpl	r3, [r0, #0]
   2b012:	8842      	ldrhpl	r2, [r0, #2]
   2b014:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2b018:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2b01c:	bf5d      	ittte	pl
   2b01e:	3017      	addpl	r0, #23
   2b020:	f020 0007 	bicpl.w	r0, r0, #7
   2b024:	0880      	lsrpl	r0, r0, #2
	return 0;
   2b026:	2000      	movmi	r0, #0
}
   2b028:	4770      	bx	lr

0002b02a <dummy_timestamp>:
}
   2b02a:	2000      	movs	r0, #0
   2b02c:	4770      	bx	lr

0002b02e <default_get_timestamp>:
   2b02e:	f003 bed3 	b.w	2edd8 <sys_clock_cycle_get_32>

0002b032 <atomic_inc>:
{
   2b032:	4603      	mov	r3, r0
}
   2b034:	e8d3 0fef 	ldaex	r0, [r3]
   2b038:	1c42      	adds	r2, r0, #1
   2b03a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2b03e:	2900      	cmp	r1, #0
   2b040:	d1f8      	bne.n	2b034 <atomic_inc+0x2>
   2b042:	4770      	bx	lr

0002b044 <z_log_vprintk>:
{
   2b044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2b046:	2300      	movs	r3, #0
   2b048:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2b04c:	461a      	mov	r2, r3
   2b04e:	4619      	mov	r1, r3
   2b050:	4618      	mov	r0, r3
   2b052:	e9cd 3300 	strd	r3, r3, [sp]
   2b056:	f7e4 fc63 	bl	f920 <z_impl_z_log_msg_runtime_vcreate>
}
   2b05a:	b005      	add	sp, #20
   2b05c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b060 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2b060:	2001      	movs	r0, #1
   2b062:	f7e4 b957 	b.w	f314 <z_log_dropped>

0002b066 <z_log_get_tag>:
}
   2b066:	2000      	movs	r0, #0
   2b068:	4770      	bx	lr

0002b06a <z_cbprintf_cpy>:
{
   2b06a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2b06c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2b070:	1b9b      	subs	r3, r3, r6
   2b072:	428b      	cmp	r3, r1
{
   2b074:	460c      	mov	r4, r1
   2b076:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2b078:	d30a      	bcc.n	2b090 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2b07a:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b07c:	460a      	mov	r2, r1
   2b07e:	4601      	mov	r1, r0
   2b080:	1998      	adds	r0, r3, r6
   2b082:	f005 fbde 	bl	30842 <memcpy>
	return len;
   2b086:	4620      	mov	r0, r4
	desc->off += len;
   2b088:	68ab      	ldr	r3, [r5, #8]
   2b08a:	4423      	add	r3, r4
   2b08c:	60ab      	str	r3, [r5, #8]
}
   2b08e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2b090:	f06f 001b 	mvn.w	r0, #27
   2b094:	e7fb      	b.n	2b08e <z_cbprintf_cpy+0x24>

0002b096 <z_log_msg_finalize>:
{
   2b096:	b570      	push	{r4, r5, r6, lr}
   2b098:	460e      	mov	r6, r1
   2b09a:	4615      	mov	r5, r2
   2b09c:	4619      	mov	r1, r3
	if (!msg) {
   2b09e:	4604      	mov	r4, r0
   2b0a0:	0d12      	lsrs	r2, r2, #20
   2b0a2:	b918      	cbnz	r0, 2b0ac <z_log_msg_finalize+0x16>
}
   2b0a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2b0a8:	f7e4 b934 	b.w	f314 <z_log_dropped>
	if (data) {
   2b0ac:	b12b      	cbz	r3, 2b0ba <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2b0ae:	3010      	adds	r0, #16
   2b0b0:	f3c5 234a 	ubfx	r3, r5, #9, #11
   2b0b4:	4418      	add	r0, r3
   2b0b6:	f005 fbc4 	bl	30842 <memcpy>
	msg->hdr.source = source;
   2b0ba:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2b0be:	4620      	mov	r0, r4
}
   2b0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2b0c4:	f7e4 bb4e 	b.w	f764 <z_log_msg_commit>

0002b0c8 <buffer_write>:
{
   2b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b0ca:	4606      	mov	r6, r0
   2b0cc:	460d      	mov	r5, r1
   2b0ce:	4614      	mov	r4, r2
   2b0d0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2b0d2:	4621      	mov	r1, r4
   2b0d4:	4628      	mov	r0, r5
   2b0d6:	463a      	mov	r2, r7
   2b0d8:	47b0      	blx	r6
	} while (len != 0);
   2b0da:	1a24      	subs	r4, r4, r0
		buf += processed;
   2b0dc:	4405      	add	r5, r0
	} while (len != 0);
   2b0de:	d1f8      	bne.n	2b0d2 <buffer_write+0xa>
}
   2b0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b0e2 <cbvprintf>:
{
   2b0e2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2b0e4:	2400      	movs	r4, #0
   2b0e6:	9400      	str	r4, [sp, #0]
   2b0e8:	f7e3 f9f8 	bl	e4dc <z_cbvprintf_impl>
}
   2b0ec:	b002      	add	sp, #8
   2b0ee:	bd10      	pop	{r4, pc}

0002b0f0 <log_output_flush>:
{
   2b0f0:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2b0f2:	6842      	ldr	r2, [r0, #4]
{
   2b0f4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2b0f6:	e9d2 2300 	ldrd	r2, r3, [r2]
   2b0fa:	6881      	ldr	r1, [r0, #8]
   2b0fc:	6800      	ldr	r0, [r0, #0]
   2b0fe:	f7ff ffe3 	bl	2b0c8 <buffer_write>
	output->control_block->offset = 0;
   2b102:	2200      	movs	r2, #0
   2b104:	6863      	ldr	r3, [r4, #4]
   2b106:	601a      	str	r2, [r3, #0]
}
   2b108:	bd10      	pop	{r4, pc}

0002b10a <cr_out_func>:
	if (c == '\n') {
   2b10a:	280a      	cmp	r0, #10
{
   2b10c:	b538      	push	{r3, r4, r5, lr}
   2b10e:	4604      	mov	r4, r0
   2b110:	460d      	mov	r5, r1
	if (c == '\n') {
   2b112:	d102      	bne.n	2b11a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2b114:	200d      	movs	r0, #13
   2b116:	f7e4 fc83 	bl	fa20 <out_func>
	out_func(c, ctx);
   2b11a:	4629      	mov	r1, r5
   2b11c:	4620      	mov	r0, r4
   2b11e:	f7e4 fc7f 	bl	fa20 <out_func>
}
   2b122:	2000      	movs	r0, #0
   2b124:	bd38      	pop	{r3, r4, r5, pc}

0002b126 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2b126:	f7e5 b9d9 	b.w	104dc <socket_offload_getaddrinfo>

0002b12a <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2b12a:	f7e5 b9fd 	b.w	10528 <socket_offload_freeaddrinfo>

0002b12e <z_fdtable_call_ioctl>:
{
   2b12e:	b40c      	push	{r2, r3}
   2b130:	4603      	mov	r3, r0
   2b132:	b507      	push	{r0, r1, r2, lr}
   2b134:	aa04      	add	r2, sp, #16
   2b136:	4608      	mov	r0, r1
   2b138:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2b13c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2b13e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2b140:	4798      	blx	r3
}
   2b142:	b003      	add	sp, #12
   2b144:	f85d eb04 	ldr.w	lr, [sp], #4
   2b148:	b002      	add	sp, #8
   2b14a:	4770      	bx	lr

0002b14c <timeout_recalc>:
{
   2b14c:	b570      	push	{r4, r5, r6, lr}
   2b14e:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2b150:	e9d2 3200 	ldrd	r3, r2, [r2]
   2b154:	3301      	adds	r3, #1
   2b156:	f142 0200 	adc.w	r2, r2, #0
   2b15a:	2b02      	cmp	r3, #2
   2b15c:	f172 0200 	sbcs.w	r2, r2, #0
{
   2b160:	4605      	mov	r5, r0
   2b162:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2b164:	d30c      	bcc.n	2b180 <timeout_recalc+0x34>
		int64_t remaining = end - sys_clock_tick_get();
   2b166:	f7fc fa37 	bl	275d8 <sys_clock_tick_get>
   2b16a:	1a2d      	subs	r5, r5, r0
   2b16c:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   2b170:	2d01      	cmp	r5, #1
   2b172:	f171 0300 	sbcs.w	r3, r1, #0
   2b176:	da04      	bge.n	2b182 <timeout_recalc+0x36>
			*timeout = K_NO_WAIT;
   2b178:	2200      	movs	r2, #0
   2b17a:	2300      	movs	r3, #0
   2b17c:	e9c4 2300 	strd	r2, r3, [r4]
}
   2b180:	bd70      	pop	{r4, r5, r6, pc}
			*timeout = Z_TIMEOUT_TICKS(remaining);
   2b182:	e9c4 5100 	strd	r5, r1, [r4]
}
   2b186:	e7fb      	b.n	2b180 <timeout_recalc+0x34>

0002b188 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2b188:	f7f9 bda0 	b.w	24ccc <z_impl_k_mutex_lock>

0002b18c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2b18c:	f7f9 be6e 	b.w	24e6c <z_impl_k_mutex_unlock>

0002b190 <z_impl_zsock_close>:
{
   2b190:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2b192:	4669      	mov	r1, sp
   2b194:	aa01      	add	r2, sp, #4
{
   2b196:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2b198:	f7e2 fba8 	bl	d8ec <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2b19c:	4604      	mov	r4, r0
   2b19e:	b940      	cbnz	r0, 2b1b2 <z_impl_zsock_close+0x22>
		errno = EBADF;
   2b1a0:	f000 fee0 	bl	2bf64 <__errno>
   2b1a4:	2309      	movs	r3, #9
		return -1;
   2b1a6:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2b1aa:	6003      	str	r3, [r0, #0]
}
   2b1ac:	4620      	mov	r0, r4
   2b1ae:	b003      	add	sp, #12
   2b1b0:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2b1b2:	f04f 32ff 	mov.w	r2, #4294967295
   2b1b6:	9801      	ldr	r0, [sp, #4]
   2b1b8:	f04f 33ff 	mov.w	r3, #4294967295
   2b1bc:	f7ff ffe4 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   2b1c0:	9b00      	ldr	r3, [sp, #0]
   2b1c2:	4620      	mov	r0, r4
   2b1c4:	689b      	ldr	r3, [r3, #8]
   2b1c6:	4798      	blx	r3
   2b1c8:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2b1ca:	9801      	ldr	r0, [sp, #4]
   2b1cc:	f7ff ffde 	bl	2b18c <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   2b1d0:	4628      	mov	r0, r5
   2b1d2:	f7e2 fbf3 	bl	d9bc <z_free_fd>
	return ret;
   2b1d6:	e7e9      	b.n	2b1ac <z_impl_zsock_close+0x1c>

0002b1d8 <z_impl_zsock_connect>:
{
   2b1d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b1da:	460d      	mov	r5, r1
   2b1dc:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2b1de:	4669      	mov	r1, sp
   2b1e0:	aa01      	add	r2, sp, #4
   2b1e2:	f7e2 fb83 	bl	d8ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2b1e6:	4604      	mov	r4, r0
   2b1e8:	b940      	cbnz	r0, 2b1fc <z_impl_zsock_connect+0x24>
   2b1ea:	f000 febb 	bl	2bf64 <__errno>
   2b1ee:	2309      	movs	r3, #9
   2b1f0:	f04f 34ff 	mov.w	r4, #4294967295
   2b1f4:	6003      	str	r3, [r0, #0]
}
   2b1f6:	4620      	mov	r0, r4
   2b1f8:	b002      	add	sp, #8
   2b1fa:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2b1fc:	9b00      	ldr	r3, [sp, #0]
   2b1fe:	699b      	ldr	r3, [r3, #24]
   2b200:	b91b      	cbnz	r3, 2b20a <z_impl_zsock_connect+0x32>
   2b202:	f000 feaf 	bl	2bf64 <__errno>
   2b206:	235f      	movs	r3, #95	; 0x5f
   2b208:	e7f2      	b.n	2b1f0 <z_impl_zsock_connect+0x18>
   2b20a:	9801      	ldr	r0, [sp, #4]
   2b20c:	f04f 32ff 	mov.w	r2, #4294967295
   2b210:	f04f 33ff 	mov.w	r3, #4294967295
   2b214:	f7ff ffb8 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
   2b218:	9b00      	ldr	r3, [sp, #0]
   2b21a:	4632      	mov	r2, r6
   2b21c:	4629      	mov	r1, r5
   2b21e:	4620      	mov	r0, r4
   2b220:	699b      	ldr	r3, [r3, #24]
   2b222:	4798      	blx	r3
   2b224:	4604      	mov	r4, r0
   2b226:	9801      	ldr	r0, [sp, #4]
   2b228:	f7ff ffb0 	bl	2b18c <k_mutex_unlock.isra.0>
   2b22c:	e7e3      	b.n	2b1f6 <z_impl_zsock_connect+0x1e>

0002b22e <z_impl_zsock_sendto>:
{
   2b22e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b232:	460d      	mov	r5, r1
   2b234:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2b236:	a902      	add	r1, sp, #8
   2b238:	aa03      	add	r2, sp, #12
{
   2b23a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2b23c:	f7e2 fb56 	bl	d8ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2b240:	4604      	mov	r4, r0
   2b242:	b948      	cbnz	r0, 2b258 <z_impl_zsock_sendto+0x2a>
   2b244:	f000 fe8e 	bl	2bf64 <__errno>
   2b248:	2309      	movs	r3, #9
   2b24a:	f04f 34ff 	mov.w	r4, #4294967295
   2b24e:	6003      	str	r3, [r0, #0]
}
   2b250:	4620      	mov	r0, r4
   2b252:	b004      	add	sp, #16
   2b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2b258:	9b02      	ldr	r3, [sp, #8]
   2b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b25c:	b91b      	cbnz	r3, 2b266 <z_impl_zsock_sendto+0x38>
   2b25e:	f000 fe81 	bl	2bf64 <__errno>
   2b262:	235f      	movs	r3, #95	; 0x5f
   2b264:	e7f1      	b.n	2b24a <z_impl_zsock_sendto+0x1c>
   2b266:	9803      	ldr	r0, [sp, #12]
   2b268:	f04f 32ff 	mov.w	r2, #4294967295
   2b26c:	f04f 33ff 	mov.w	r3, #4294967295
   2b270:	f7ff ff8a 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
   2b274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b276:	4632      	mov	r2, r6
   2b278:	9301      	str	r3, [sp, #4]
   2b27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b27c:	4629      	mov	r1, r5
   2b27e:	9300      	str	r3, [sp, #0]
   2b280:	9b02      	ldr	r3, [sp, #8]
   2b282:	4620      	mov	r0, r4
   2b284:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2b288:	463b      	mov	r3, r7
   2b28a:	47c0      	blx	r8
   2b28c:	4604      	mov	r4, r0
   2b28e:	9803      	ldr	r0, [sp, #12]
   2b290:	f7ff ff7c 	bl	2b18c <k_mutex_unlock.isra.0>
   2b294:	e7dc      	b.n	2b250 <z_impl_zsock_sendto+0x22>

0002b296 <z_impl_zsock_sendmsg>:
{
   2b296:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b298:	460d      	mov	r5, r1
   2b29a:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2b29c:	4669      	mov	r1, sp
   2b29e:	aa01      	add	r2, sp, #4
   2b2a0:	f7e2 fb24 	bl	d8ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2b2a4:	4604      	mov	r4, r0
   2b2a6:	b940      	cbnz	r0, 2b2ba <z_impl_zsock_sendmsg+0x24>
   2b2a8:	f000 fe5c 	bl	2bf64 <__errno>
   2b2ac:	2309      	movs	r3, #9
   2b2ae:	f04f 34ff 	mov.w	r4, #4294967295
   2b2b2:	6003      	str	r3, [r0, #0]
}
   2b2b4:	4620      	mov	r0, r4
   2b2b6:	b002      	add	sp, #8
   2b2b8:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2b2ba:	9b00      	ldr	r3, [sp, #0]
   2b2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b2be:	b91b      	cbnz	r3, 2b2c8 <z_impl_zsock_sendmsg+0x32>
   2b2c0:	f000 fe50 	bl	2bf64 <__errno>
   2b2c4:	235f      	movs	r3, #95	; 0x5f
   2b2c6:	e7f2      	b.n	2b2ae <z_impl_zsock_sendmsg+0x18>
   2b2c8:	9801      	ldr	r0, [sp, #4]
   2b2ca:	f04f 32ff 	mov.w	r2, #4294967295
   2b2ce:	f04f 33ff 	mov.w	r3, #4294967295
   2b2d2:	f7ff ff59 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
   2b2d6:	9b00      	ldr	r3, [sp, #0]
   2b2d8:	4632      	mov	r2, r6
   2b2da:	4629      	mov	r1, r5
   2b2dc:	4620      	mov	r0, r4
   2b2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b2e0:	4798      	blx	r3
   2b2e2:	4604      	mov	r4, r0
   2b2e4:	9801      	ldr	r0, [sp, #4]
   2b2e6:	f7ff ff51 	bl	2b18c <k_mutex_unlock.isra.0>
   2b2ea:	e7e3      	b.n	2b2b4 <z_impl_zsock_sendmsg+0x1e>

0002b2ec <z_impl_zsock_recvfrom>:
{
   2b2ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2b2f0:	460d      	mov	r5, r1
   2b2f2:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2b2f4:	a902      	add	r1, sp, #8
   2b2f6:	aa03      	add	r2, sp, #12
{
   2b2f8:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2b2fa:	f7e2 faf7 	bl	d8ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2b2fe:	4604      	mov	r4, r0
   2b300:	b948      	cbnz	r0, 2b316 <z_impl_zsock_recvfrom+0x2a>
   2b302:	f000 fe2f 	bl	2bf64 <__errno>
   2b306:	2309      	movs	r3, #9
   2b308:	f04f 34ff 	mov.w	r4, #4294967295
   2b30c:	6003      	str	r3, [r0, #0]
}
   2b30e:	4620      	mov	r0, r4
   2b310:	b004      	add	sp, #16
   2b312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2b316:	9b02      	ldr	r3, [sp, #8]
   2b318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b31a:	b91b      	cbnz	r3, 2b324 <z_impl_zsock_recvfrom+0x38>
   2b31c:	f000 fe22 	bl	2bf64 <__errno>
   2b320:	235f      	movs	r3, #95	; 0x5f
   2b322:	e7f1      	b.n	2b308 <z_impl_zsock_recvfrom+0x1c>
   2b324:	9803      	ldr	r0, [sp, #12]
   2b326:	f04f 32ff 	mov.w	r2, #4294967295
   2b32a:	f04f 33ff 	mov.w	r3, #4294967295
   2b32e:	f7ff ff2b 	bl	2b188 <k_mutex_lock.constprop.0.isra.0>
   2b332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b334:	4632      	mov	r2, r6
   2b336:	9301      	str	r3, [sp, #4]
   2b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b33a:	4629      	mov	r1, r5
   2b33c:	9300      	str	r3, [sp, #0]
   2b33e:	9b02      	ldr	r3, [sp, #8]
   2b340:	4620      	mov	r0, r4
   2b342:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   2b346:	463b      	mov	r3, r7
   2b348:	47c0      	blx	r8
   2b34a:	4604      	mov	r4, r0
   2b34c:	9803      	ldr	r0, [sp, #12]
   2b34e:	f7ff ff1d 	bl	2b18c <k_mutex_unlock.isra.0>
   2b352:	e7dc      	b.n	2b30e <z_impl_zsock_recvfrom+0x22>

0002b354 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   2b358:	1e14      	subs	r4, r2, #0
{
   2b35a:	4605      	mov	r5, r0
   2b35c:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   2b35e:	db13      	blt.n	2b388 <z_impl_zsock_poll+0x34>
   2b360:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2b364:	f240 30e7 	movw	r0, #999	; 0x3e7
   2b368:	2100      	movs	r1, #0
   2b36a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b36e:	2300      	movs	r3, #0
   2b370:	fbc4 0107 	smlal	r0, r1, r4, r7
   2b374:	f7dd fd8e 	bl	8e94 <__aeabi_uldivmod>
   2b378:	4602      	mov	r2, r0
   2b37a:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   2b37c:	4631      	mov	r1, r6
   2b37e:	4628      	mov	r0, r5
}
   2b380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   2b384:	f7e4 bf8e 	b.w	102a4 <zsock_poll_internal>
		timeout = K_FOREVER;
   2b388:	f04f 32ff 	mov.w	r2, #4294967295
   2b38c:	4613      	mov	r3, r2
   2b38e:	e7f5      	b.n	2b37c <z_impl_zsock_poll+0x28>

0002b390 <attr_find_by_handle>:
{
   2b390:	b570      	push	{r4, r5, r6, lr}
   2b392:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   2b394:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2b398:	b1a8      	cbz	r0, 2b3c6 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   2b39a:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   2b39c:	1e45      	subs	r5, r0, #1
	while (upper >= lower) {
   2b39e:	42ae      	cmp	r6, r5
   2b3a0:	dd01      	ble.n	2b3a6 <attr_find_by_handle+0x16>
		return NULL;
   2b3a2:	2000      	movs	r0, #0
   2b3a4:	e00f      	b.n	2b3c6 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   2b3a6:	1972      	adds	r2, r6, r5
   2b3a8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2b3ac:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   2b3ae:	1cd0      	adds	r0, r2, #3
   2b3b0:	00c3      	lsls	r3, r0, #3
   2b3b2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2b3b6:	8900      	ldrh	r0, [r0, #8]
   2b3b8:	4288      	cmp	r0, r1
   2b3ba:	d201      	bcs.n	2b3c0 <attr_find_by_handle+0x30>
			lower = m + 1;
   2b3bc:	1c56      	adds	r6, r2, #1
   2b3be:	e7ee      	b.n	2b39e <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   2b3c0:	d802      	bhi.n	2b3c8 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2b3c2:	3304      	adds	r3, #4
   2b3c4:	18e0      	adds	r0, r4, r3
}
   2b3c6:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   2b3c8:	1e55      	subs	r5, r2, #1
   2b3ca:	e7e8      	b.n	2b39e <attr_find_by_handle+0xe>

0002b3cc <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   2b3cc:	2300      	movs	r3, #0
{
   2b3ce:	b510      	push	{r4, lr}
   2b3d0:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   2b3d2:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   2b3d6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   2b3da:	b910      	cbnz	r0, 2b3e2 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   2b3dc:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   2b3e0:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b3e2:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   2b3e6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b3e8:	4290      	cmp	r0, r2
	list->head = node;
   2b3ea:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	list->tail = node;
   2b3ee:	bf08      	it	eq
   2b3f0:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   2b3f4:	f005 f9ea 	bl	307cc <k_free>
   2b3f8:	e7ed      	b.n	2b3d6 <svc_attr_memory_release+0xa>

0002b3fa <atomic_and>:
{
   2b3fa:	4603      	mov	r3, r0
   2b3fc:	b510      	push	{r4, lr}
}
   2b3fe:	e8d3 0fef 	ldaex	r0, [r3]
   2b402:	ea00 0201 	and.w	r2, r0, r1
   2b406:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2b40a:	2c00      	cmp	r4, #0
   2b40c:	d1f7      	bne.n	2b3fe <atomic_and+0x4>
   2b40e:	bd10      	pop	{r4, pc}

0002b410 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2b410:	2300      	movs	r3, #0
   2b412:	f7e4 b9ed 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002b416 <discovery_complete_error>:
{
   2b416:	b570      	push	{r4, r5, r6, lr}
   2b418:	4604      	mov	r4, r0
   2b41a:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   2b41c:	f7ff ffd6 	bl	2b3cc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b420:	f06f 0101 	mvn.w	r1, #1
   2b424:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2b428:	f7ff ffe7 	bl	2b3fa <atomic_and>
	if (dm->callback->error_found) {
   2b42c:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2b430:	689b      	ldr	r3, [r3, #8]
   2b432:	b12b      	cbz	r3, 2b440 <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2b434:	4629      	mov	r1, r5
   2b436:	6862      	ldr	r2, [r4, #4]
   2b438:	6820      	ldr	r0, [r4, #0]
}
   2b43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   2b43e:	4718      	bx	r3
}
   2b440:	bd70      	pop	{r4, r5, r6, pc}

0002b442 <discovery_complete_not_found>:
{
   2b442:	b510      	push	{r4, lr}
   2b444:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   2b446:	f7ff ffc1 	bl	2b3cc <svc_attr_memory_release>
   2b44a:	f06f 0101 	mvn.w	r1, #1
   2b44e:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2b452:	f7ff ffd2 	bl	2b3fa <atomic_and>
	if (dm->callback->service_not_found) {
   2b456:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2b45a:	685b      	ldr	r3, [r3, #4]
   2b45c:	b123      	cbz	r3, 2b468 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   2b45e:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   2b462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   2b466:	4718      	bx	r3
}
   2b468:	bd10      	pop	{r4, pc}

0002b46a <bt_gatt_dm_attr_service_val>:
{
   2b46a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b46c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b470:	2400      	movs	r4, #0
{
   2b472:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b474:	6801      	ldr	r1, [r0, #0]
   2b476:	4668      	mov	r0, sp
   2b478:	f88d 4000 	strb.w	r4, [sp]
   2b47c:	f8ad 3002 	strh.w	r3, [sp, #2]
   2b480:	f000 fd72 	bl	2bf68 <bt_uuid_cmp>
   2b484:	b918      	cbnz	r0, 2b48e <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   2b486:	6828      	ldr	r0, [r5, #0]
   2b488:	3808      	subs	r0, #8
}
   2b48a:	b003      	add	sp, #12
   2b48c:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2b48e:	f642 0301 	movw	r3, #10241	; 0x2801
   2b492:	6829      	ldr	r1, [r5, #0]
   2b494:	a801      	add	r0, sp, #4
   2b496:	f88d 4004 	strb.w	r4, [sp, #4]
   2b49a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b49e:	f000 fd63 	bl	2bf68 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b4a2:	2800      	cmp	r0, #0
   2b4a4:	d0ef      	beq.n	2b486 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   2b4a6:	4620      	mov	r0, r4
   2b4a8:	e7ef      	b.n	2b48a <bt_gatt_dm_attr_service_val+0x20>

0002b4aa <bt_gatt_dm_attr_chrc_val>:
{
   2b4aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2b4ac:	f642 0303 	movw	r3, #10243	; 0x2803
   2b4b0:	2400      	movs	r4, #0
{
   2b4b2:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2b4b4:	6801      	ldr	r1, [r0, #0]
   2b4b6:	a801      	add	r0, sp, #4
   2b4b8:	f88d 4004 	strb.w	r4, [sp, #4]
   2b4bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b4c0:	f000 fd52 	bl	2bf68 <bt_uuid_cmp>
   2b4c4:	b918      	cbnz	r0, 2b4ce <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   2b4c6:	6828      	ldr	r0, [r5, #0]
   2b4c8:	3808      	subs	r0, #8
}
   2b4ca:	b003      	add	sp, #12
   2b4cc:	bd30      	pop	{r4, r5, pc}
	return NULL;
   2b4ce:	4620      	mov	r0, r4
   2b4d0:	e7fb      	b.n	2b4ca <bt_gatt_dm_attr_chrc_val+0x20>

0002b4d2 <bt_gatt_dm_conn_get>:
}
   2b4d2:	6800      	ldr	r0, [r0, #0]
   2b4d4:	4770      	bx	lr

0002b4d6 <bt_gatt_dm_char_next>:
{
   2b4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   2b4d8:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   2b4dc:	b131      	cbz	r1, 2b4ec <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   2b4de:	42a9      	cmp	r1, r5
   2b4e0:	d203      	bcs.n	2b4ea <bt_gatt_dm_char_next+0x14>
	return NULL;
   2b4e2:	2500      	movs	r5, #0
}
   2b4e4:	4628      	mov	r0, r5
   2b4e6:	b003      	add	sp, #12
   2b4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b4ea:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2b4ec:	2600      	movs	r6, #0
   2b4ee:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   2b4f2:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   2b4f6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2b4fa:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   2b4fe:	3508      	adds	r5, #8
   2b500:	42ac      	cmp	r4, r5
   2b502:	d9ee      	bls.n	2b4e2 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2b504:	6829      	ldr	r1, [r5, #0]
   2b506:	a801      	add	r0, sp, #4
   2b508:	f88d 6004 	strb.w	r6, [sp, #4]
   2b50c:	f8ad 7006 	strh.w	r7, [sp, #6]
   2b510:	f000 fd2a 	bl	2bf68 <bt_uuid_cmp>
   2b514:	2800      	cmp	r0, #0
   2b516:	d1f2      	bne.n	2b4fe <bt_gatt_dm_char_next+0x28>
   2b518:	e7e4      	b.n	2b4e4 <bt_gatt_dm_char_next+0xe>

0002b51a <bt_gatt_dm_attr_next>:
{
   2b51a:	4603      	mov	r3, r0
		prev = dm->attrs;
   2b51c:	f100 021c 	add.w	r2, r0, #28
	if (!prev) {
   2b520:	b119      	cbz	r1, 2b52a <bt_gatt_dm_attr_next+0x10>
	if (dm->attrs <= prev) {
   2b522:	4291      	cmp	r1, r2
   2b524:	d202      	bcs.n	2b52c <bt_gatt_dm_attr_next+0x12>
	return NULL;
   2b526:	2000      	movs	r0, #0
}
   2b528:	4770      	bx	lr
		prev = dm->attrs;
   2b52a:	4611      	mov	r1, r2
		const struct bt_gatt_dm_attr *const end =
   2b52c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		if (++prev < end) {
   2b530:	f101 0008 	add.w	r0, r1, #8
		const struct bt_gatt_dm_attr *const end =
   2b534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2b538:	331c      	adds	r3, #28
	return NULL;
   2b53a:	4298      	cmp	r0, r3
   2b53c:	bf28      	it	cs
   2b53e:	2000      	movcs	r0, #0
   2b540:	4770      	bx	lr

0002b542 <bt_gatt_dm_desc_next>:
{
   2b542:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2b544:	f7ff ffe9 	bl	2b51a <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2b548:	4604      	mov	r4, r0
   2b54a:	b918      	cbnz	r0, 2b554 <bt_gatt_dm_desc_next+0x12>
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2b54c:	2400      	movs	r4, #0
}
   2b54e:	4620      	mov	r0, r4
   2b550:	b002      	add	sp, #8
   2b552:	bd10      	pop	{r4, pc}
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2b554:	2300      	movs	r3, #0
   2b556:	f88d 3004 	strb.w	r3, [sp, #4]
   2b55a:	f642 0303 	movw	r3, #10243	; 0x2803
   2b55e:	6801      	ldr	r1, [r0, #0]
   2b560:	a801      	add	r0, sp, #4
   2b562:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b566:	f000 fcff 	bl	2bf68 <bt_uuid_cmp>
   2b56a:	2800      	cmp	r0, #0
   2b56c:	d1ef      	bne.n	2b54e <bt_gatt_dm_desc_next+0xc>
   2b56e:	e7ed      	b.n	2b54c <bt_gatt_dm_desc_next+0xa>

0002b570 <bt_gatt_dm_desc_by_uuid>:
{
   2b570:	b570      	push	{r4, r5, r6, lr}
   2b572:	4605      	mov	r5, r0
   2b574:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   2b576:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   2b578:	4621      	mov	r1, r4
   2b57a:	4628      	mov	r0, r5
   2b57c:	f7ff ffe1 	bl	2b542 <bt_gatt_dm_desc_next>
   2b580:	4604      	mov	r4, r0
   2b582:	b128      	cbz	r0, 2b590 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   2b584:	4630      	mov	r0, r6
   2b586:	6821      	ldr	r1, [r4, #0]
   2b588:	f000 fcee 	bl	2bf68 <bt_uuid_cmp>
   2b58c:	2800      	cmp	r0, #0
   2b58e:	d1f3      	bne.n	2b578 <bt_gatt_dm_desc_by_uuid+0x8>
}
   2b590:	4620      	mov	r0, r4
   2b592:	bd70      	pop	{r4, r5, r6, pc}

0002b594 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   2b594:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2b596:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   2b59a:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b59c:	f06f 0102 	mvn.w	r1, #2
   2b5a0:	4628      	mov	r0, r5
   2b5a2:	f7ff ff2a 	bl	2b3fa <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2b5a6:	0783      	lsls	r3, r0, #30
   2b5a8:	d509      	bpl.n	2b5be <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   2b5aa:	4620      	mov	r0, r4
   2b5ac:	f7ff ff0e 	bl	2b3cc <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b5b0:	f06f 0101 	mvn.w	r1, #1
   2b5b4:	4628      	mov	r0, r5
   2b5b6:	f7ff ff20 	bl	2b3fa <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   2b5ba:	2000      	movs	r0, #0
}
   2b5bc:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   2b5be:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b5c2:	e7fb      	b.n	2b5bc <bt_gatt_dm_data_release+0x28>

0002b5c4 <adv_data_found>:
{
   2b5c4:	b510      	push	{r4, lr}
   2b5c6:	4604      	mov	r4, r0
	switch (data->type) {
   2b5c8:	7823      	ldrb	r3, [r4, #0]
{
   2b5ca:	4608      	mov	r0, r1
	switch (data->type) {
   2b5cc:	2b05      	cmp	r3, #5
   2b5ce:	d806      	bhi.n	2b5de <adv_data_found+0x1a>
   2b5d0:	2b03      	cmp	r3, #3
   2b5d2:	d80e      	bhi.n	2b5f2 <adv_data_found+0x2e>
   2b5d4:	3b02      	subs	r3, #2
   2b5d6:	2b01      	cmp	r3, #1
   2b5d8:	d906      	bls.n	2b5e8 <adv_data_found+0x24>
}
   2b5da:	2001      	movs	r0, #1
   2b5dc:	bd10      	pop	{r4, pc}
	switch (data->type) {
   2b5de:	3b06      	subs	r3, #6
   2b5e0:	2b01      	cmp	r3, #1
   2b5e2:	d8fa      	bhi.n	2b5da <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2b5e4:	2202      	movs	r2, #2
   2b5e6:	e000      	b.n	2b5ea <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2b5e8:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2b5ea:	4621      	mov	r1, r4
   2b5ec:	f7e5 fae6 	bl	10bbc <uuid_check>
		break;
   2b5f0:	e7f3      	b.n	2b5da <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   2b5f2:	2201      	movs	r2, #1
   2b5f4:	e7f9      	b.n	2b5ea <adv_data_found+0x26>

0002b5f6 <bt_scan_stop>:
	return bt_le_scan_stop();
   2b5f6:	f7e9 bc6d 	b.w	14ed4 <bt_le_scan_stop>

0002b5fa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b5fa:	b538      	push	{r3, r4, r5, lr}
   2b5fc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b5fe:	42ab      	cmp	r3, r5
{
   2b600:	4611      	mov	r1, r2
   2b602:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b604:	d804      	bhi.n	2b610 <_copy+0x16>
   2b606:	461a      	mov	r2, r3
   2b608:	f005 f91b 	bl	30842 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b60c:	4620      	mov	r0, r4
   2b60e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b610:	2400      	movs	r4, #0
   2b612:	e7fb      	b.n	2b60c <_copy+0x12>

0002b614 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b614:	f005 b935 	b.w	30882 <memset>

0002b618 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b618:	09c3      	lsrs	r3, r0, #7
   2b61a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b61e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b622:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b626:	b2c0      	uxtb	r0, r0
   2b628:	4770      	bx	lr

0002b62a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b62a:	78cb      	ldrb	r3, [r1, #3]
   2b62c:	7802      	ldrb	r2, [r0, #0]
   2b62e:	4053      	eors	r3, r2
   2b630:	7003      	strb	r3, [r0, #0]
   2b632:	884b      	ldrh	r3, [r1, #2]
   2b634:	7842      	ldrb	r2, [r0, #1]
   2b636:	4053      	eors	r3, r2
   2b638:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b63a:	680a      	ldr	r2, [r1, #0]
   2b63c:	7883      	ldrb	r3, [r0, #2]
   2b63e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b642:	7083      	strb	r3, [r0, #2]
   2b644:	680a      	ldr	r2, [r1, #0]
   2b646:	78c3      	ldrb	r3, [r0, #3]
   2b648:	4053      	eors	r3, r2
   2b64a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b64c:	79cb      	ldrb	r3, [r1, #7]
   2b64e:	7902      	ldrb	r2, [r0, #4]
   2b650:	4053      	eors	r3, r2
   2b652:	7103      	strb	r3, [r0, #4]
   2b654:	88cb      	ldrh	r3, [r1, #6]
   2b656:	7942      	ldrb	r2, [r0, #5]
   2b658:	4053      	eors	r3, r2
   2b65a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b65c:	684a      	ldr	r2, [r1, #4]
   2b65e:	7983      	ldrb	r3, [r0, #6]
   2b660:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b664:	7183      	strb	r3, [r0, #6]
   2b666:	684a      	ldr	r2, [r1, #4]
   2b668:	79c3      	ldrb	r3, [r0, #7]
   2b66a:	4053      	eors	r3, r2
   2b66c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b66e:	7acb      	ldrb	r3, [r1, #11]
   2b670:	7a02      	ldrb	r2, [r0, #8]
   2b672:	4053      	eors	r3, r2
   2b674:	7203      	strb	r3, [r0, #8]
   2b676:	7a42      	ldrb	r2, [r0, #9]
   2b678:	894b      	ldrh	r3, [r1, #10]
   2b67a:	4053      	eors	r3, r2
   2b67c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b67e:	688a      	ldr	r2, [r1, #8]
   2b680:	7a83      	ldrb	r3, [r0, #10]
   2b682:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b686:	7283      	strb	r3, [r0, #10]
   2b688:	688a      	ldr	r2, [r1, #8]
   2b68a:	7ac3      	ldrb	r3, [r0, #11]
   2b68c:	4053      	eors	r3, r2
   2b68e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b690:	7bcb      	ldrb	r3, [r1, #15]
   2b692:	7b02      	ldrb	r2, [r0, #12]
   2b694:	4053      	eors	r3, r2
   2b696:	7303      	strb	r3, [r0, #12]
   2b698:	89cb      	ldrh	r3, [r1, #14]
   2b69a:	7b42      	ldrb	r2, [r0, #13]
   2b69c:	4053      	eors	r3, r2
   2b69e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b6a0:	68ca      	ldr	r2, [r1, #12]
   2b6a2:	7b83      	ldrb	r3, [r0, #14]
   2b6a4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b6a8:	7383      	strb	r3, [r0, #14]
   2b6aa:	68ca      	ldr	r2, [r1, #12]
   2b6ac:	7bc3      	ldrb	r3, [r0, #15]
   2b6ae:	4053      	eors	r3, r2
   2b6b0:	73c3      	strb	r3, [r0, #15]
}
   2b6b2:	4770      	bx	lr

0002b6b4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b6b6:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b6b8:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b6ba:	f88d 2000 	strb.w	r2, [sp]
   2b6be:	7942      	ldrb	r2, [r0, #5]
   2b6c0:	f88d 2001 	strb.w	r2, [sp, #1]
   2b6c4:	7a82      	ldrb	r2, [r0, #10]
   2b6c6:	f88d 2002 	strb.w	r2, [sp, #2]
   2b6ca:	7bc2      	ldrb	r2, [r0, #15]
   2b6cc:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b6d0:	7902      	ldrb	r2, [r0, #4]
   2b6d2:	f88d 2004 	strb.w	r2, [sp, #4]
   2b6d6:	7a42      	ldrb	r2, [r0, #9]
   2b6d8:	f88d 2005 	strb.w	r2, [sp, #5]
   2b6dc:	7b82      	ldrb	r2, [r0, #14]
   2b6de:	f88d 2006 	strb.w	r2, [sp, #6]
   2b6e2:	78c2      	ldrb	r2, [r0, #3]
   2b6e4:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b6e8:	7a02      	ldrb	r2, [r0, #8]
   2b6ea:	f88d 2008 	strb.w	r2, [sp, #8]
   2b6ee:	7b42      	ldrb	r2, [r0, #13]
   2b6f0:	f88d 2009 	strb.w	r2, [sp, #9]
   2b6f4:	7882      	ldrb	r2, [r0, #2]
   2b6f6:	f88d 200a 	strb.w	r2, [sp, #10]
   2b6fa:	79c2      	ldrb	r2, [r0, #7]
   2b6fc:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b700:	7b02      	ldrb	r2, [r0, #12]
   2b702:	f88d 200c 	strb.w	r2, [sp, #12]
   2b706:	7842      	ldrb	r2, [r0, #1]
   2b708:	f88d 200d 	strb.w	r2, [sp, #13]
   2b70c:	7982      	ldrb	r2, [r0, #6]
   2b70e:	f88d 200e 	strb.w	r2, [sp, #14]
   2b712:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b716:	2310      	movs	r3, #16
   2b718:	466a      	mov	r2, sp
   2b71a:	4619      	mov	r1, r3
   2b71c:	f7ff ff6d 	bl	2b5fa <_copy>
}
   2b720:	b005      	add	sp, #20
   2b722:	f85d fb04 	ldr.w	pc, [sp], #4

0002b726 <mult_row_column>:
{
   2b726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b728:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b72a:	7808      	ldrb	r0, [r1, #0]
{
   2b72c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b72e:	f7ff ff73 	bl	2b618 <_double_byte>
   2b732:	4605      	mov	r5, r0
   2b734:	7860      	ldrb	r0, [r4, #1]
   2b736:	f7ff ff6f 	bl	2b618 <_double_byte>
   2b73a:	78a2      	ldrb	r2, [r4, #2]
   2b73c:	7863      	ldrb	r3, [r4, #1]
   2b73e:	4053      	eors	r3, r2
   2b740:	78e2      	ldrb	r2, [r4, #3]
   2b742:	4053      	eors	r3, r2
   2b744:	405d      	eors	r5, r3
   2b746:	4068      	eors	r0, r5
   2b748:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b74a:	7860      	ldrb	r0, [r4, #1]
   2b74c:	7827      	ldrb	r7, [r4, #0]
   2b74e:	f7ff ff63 	bl	2b618 <_double_byte>
   2b752:	4605      	mov	r5, r0
   2b754:	78a0      	ldrb	r0, [r4, #2]
   2b756:	f7ff ff5f 	bl	2b618 <_double_byte>
   2b75a:	78a3      	ldrb	r3, [r4, #2]
   2b75c:	405f      	eors	r7, r3
   2b75e:	78e3      	ldrb	r3, [r4, #3]
   2b760:	405f      	eors	r7, r3
   2b762:	407d      	eors	r5, r7
   2b764:	4068      	eors	r0, r5
   2b766:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b768:	7863      	ldrb	r3, [r4, #1]
   2b76a:	7827      	ldrb	r7, [r4, #0]
   2b76c:	78a0      	ldrb	r0, [r4, #2]
   2b76e:	405f      	eors	r7, r3
   2b770:	f7ff ff52 	bl	2b618 <_double_byte>
   2b774:	4605      	mov	r5, r0
   2b776:	78e0      	ldrb	r0, [r4, #3]
   2b778:	f7ff ff4e 	bl	2b618 <_double_byte>
   2b77c:	78e3      	ldrb	r3, [r4, #3]
   2b77e:	405f      	eors	r7, r3
   2b780:	407d      	eors	r5, r7
   2b782:	4068      	eors	r0, r5
   2b784:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b786:	7820      	ldrb	r0, [r4, #0]
   2b788:	f7ff ff46 	bl	2b618 <_double_byte>
   2b78c:	7862      	ldrb	r2, [r4, #1]
   2b78e:	7823      	ldrb	r3, [r4, #0]
   2b790:	4053      	eors	r3, r2
   2b792:	78a2      	ldrb	r2, [r4, #2]
   2b794:	4053      	eors	r3, r2
   2b796:	ea80 0503 	eor.w	r5, r0, r3
   2b79a:	78e0      	ldrb	r0, [r4, #3]
   2b79c:	f7ff ff3c 	bl	2b618 <_double_byte>
   2b7a0:	b2ed      	uxtb	r5, r5
   2b7a2:	4045      	eors	r5, r0
   2b7a4:	70f5      	strb	r5, [r6, #3]
}
   2b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b7a8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b7a8:	b570      	push	{r4, r5, r6, lr}
   2b7aa:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b7ac:	4605      	mov	r5, r0
{
   2b7ae:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b7b0:	2800      	cmp	r0, #0
   2b7b2:	d049      	beq.n	2b848 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b7b4:	2900      	cmp	r1, #0
   2b7b6:	d049      	beq.n	2b84c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b7b8:	2a00      	cmp	r2, #0
   2b7ba:	d049      	beq.n	2b850 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b7bc:	2310      	movs	r3, #16
   2b7be:	460a      	mov	r2, r1
   2b7c0:	4668      	mov	r0, sp
   2b7c2:	4619      	mov	r1, r3
   2b7c4:	f7ff ff19 	bl	2b5fa <_copy>
	add_round_key(state, s->words);
   2b7c8:	4621      	mov	r1, r4
   2b7ca:	4668      	mov	r0, sp
   2b7cc:	f7ff ff2d 	bl	2b62a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b7d0:	3410      	adds	r4, #16
   2b7d2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b7d6:	4668      	mov	r0, sp
   2b7d8:	f7e5 fbe2 	bl	10fa0 <sub_bytes>
		shift_rows(state);
   2b7dc:	4668      	mov	r0, sp
   2b7de:	f7ff ff69 	bl	2b6b4 <shift_rows>
	mult_row_column(t, s);
   2b7e2:	4669      	mov	r1, sp
   2b7e4:	a804      	add	r0, sp, #16
   2b7e6:	f7ff ff9e 	bl	2b726 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b7ea:	a901      	add	r1, sp, #4
   2b7ec:	a805      	add	r0, sp, #20
   2b7ee:	f7ff ff9a 	bl	2b726 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b7f2:	a902      	add	r1, sp, #8
   2b7f4:	a806      	add	r0, sp, #24
   2b7f6:	f7ff ff96 	bl	2b726 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b7fa:	a903      	add	r1, sp, #12
   2b7fc:	a807      	add	r0, sp, #28
   2b7fe:	f7ff ff92 	bl	2b726 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b802:	2310      	movs	r3, #16
   2b804:	4668      	mov	r0, sp
   2b806:	4619      	mov	r1, r3
   2b808:	eb0d 0203 	add.w	r2, sp, r3
   2b80c:	f7ff fef5 	bl	2b5fa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b810:	4621      	mov	r1, r4
   2b812:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b814:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b816:	f7ff ff08 	bl	2b62a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b81a:	42b4      	cmp	r4, r6
   2b81c:	d1db      	bne.n	2b7d6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b81e:	f7e5 fbbf 	bl	10fa0 <sub_bytes>
	shift_rows(state);
   2b822:	4668      	mov	r0, sp
   2b824:	f7ff ff46 	bl	2b6b4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b828:	4621      	mov	r1, r4
   2b82a:	4668      	mov	r0, sp
   2b82c:	f7ff fefd 	bl	2b62a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b830:	2310      	movs	r3, #16
   2b832:	466a      	mov	r2, sp
   2b834:	4619      	mov	r1, r3
   2b836:	4628      	mov	r0, r5
   2b838:	f7ff fedf 	bl	2b5fa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b83c:	4668      	mov	r0, sp
   2b83e:	2210      	movs	r2, #16
   2b840:	2100      	movs	r1, #0
   2b842:	f7ff fee7 	bl	2b614 <_set>

	return TC_CRYPTO_SUCCESS;
   2b846:	2001      	movs	r0, #1
}
   2b848:	b008      	add	sp, #32
   2b84a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b84c:	4608      	mov	r0, r1
   2b84e:	e7fb      	b.n	2b848 <tc_aes_encrypt+0xa0>
   2b850:	4610      	mov	r0, r2
   2b852:	e7f9      	b.n	2b848 <tc_aes_encrypt+0xa0>

0002b854 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b854:	460a      	mov	r2, r1
{
   2b856:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b858:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b85c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b85e:	2b00      	cmp	r3, #0
   2b860:	bfac      	ite	ge
   2b862:	2300      	movge	r3, #0
   2b864:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b866:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b86a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b86e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b870:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b874:	d002      	beq.n	2b87c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b876:	7813      	ldrb	r3, [r2, #0]
   2b878:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b87a:	e7f4      	b.n	2b866 <gf_double+0x12>
	}
}
   2b87c:	bd10      	pop	{r4, pc}

0002b87e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b87e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b880:	b120      	cbz	r0, 2b88c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b882:	2258      	movs	r2, #88	; 0x58
   2b884:	2100      	movs	r1, #0
   2b886:	f7ff fec5 	bl	2b614 <_set>
   2b88a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b88c:	bd08      	pop	{r3, pc}

0002b88e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b88e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b890:	4604      	mov	r4, r0
   2b892:	b188      	cbz	r0, 2b8b8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b894:	2210      	movs	r2, #16
   2b896:	2100      	movs	r1, #0
   2b898:	f7ff febc 	bl	2b614 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b89c:	2210      	movs	r2, #16
   2b89e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b8a2:	2100      	movs	r1, #0
   2b8a4:	f7ff feb6 	bl	2b614 <_set>
	s->leftover_offset = 0;
   2b8a8:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b8aa:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b8ac:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b8ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b8b2:	2001      	movs	r0, #1
   2b8b4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b8b8:	bd10      	pop	{r4, pc}

0002b8ba <tc_cmac_setup>:
{
   2b8ba:	b570      	push	{r4, r5, r6, lr}
   2b8bc:	4604      	mov	r4, r0
   2b8be:	460d      	mov	r5, r1
   2b8c0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b8c2:	b310      	cbz	r0, 2b90a <tc_cmac_setup+0x50>
   2b8c4:	b311      	cbz	r1, 2b90c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b8c6:	2258      	movs	r2, #88	; 0x58
   2b8c8:	2100      	movs	r1, #0
   2b8ca:	f7ff fea3 	bl	2b614 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b8ce:	4629      	mov	r1, r5
   2b8d0:	4630      	mov	r0, r6
	s->sched = sched;
   2b8d2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b8d4:	f7e5 fb70 	bl	10fb8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b8d8:	2210      	movs	r2, #16
   2b8da:	2100      	movs	r1, #0
   2b8dc:	4620      	mov	r0, r4
   2b8de:	f7ff fe99 	bl	2b614 <_set>
	gf_double (s->K1, s->iv);
   2b8e2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b8e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b8e8:	4621      	mov	r1, r4
   2b8ea:	4620      	mov	r0, r4
   2b8ec:	f7ff ff5c 	bl	2b7a8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b8f0:	4621      	mov	r1, r4
   2b8f2:	4628      	mov	r0, r5
   2b8f4:	f7ff ffae 	bl	2b854 <gf_double>
	gf_double (s->K2, s->K1);
   2b8f8:	4629      	mov	r1, r5
   2b8fa:	f104 0020 	add.w	r0, r4, #32
   2b8fe:	f7ff ffa9 	bl	2b854 <gf_double>
	tc_cmac_init(s);
   2b902:	4620      	mov	r0, r4
   2b904:	f7ff ffc3 	bl	2b88e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b908:	2001      	movs	r0, #1
}
   2b90a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b90c:	4608      	mov	r0, r1
   2b90e:	e7fc      	b.n	2b90a <tc_cmac_setup+0x50>

0002b910 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b914:	460e      	mov	r6, r1
   2b916:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b918:	4604      	mov	r4, r0
   2b91a:	2800      	cmp	r0, #0
   2b91c:	d060      	beq.n	2b9e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b91e:	b1fa      	cbz	r2, 2b960 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b920:	2900      	cmp	r1, #0
   2b922:	d05d      	beq.n	2b9e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b924:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b928:	ea53 0102 	orrs.w	r1, r3, r2
   2b92c:	d058      	beq.n	2b9e0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b92e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b930:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b934:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b938:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b93c:	f1b8 0f00 	cmp.w	r8, #0
   2b940:	d02c      	beq.n	2b99c <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b942:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b946:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b94a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b94c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b94e:	d20a      	bcs.n	2b966 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b950:	462b      	mov	r3, r5
   2b952:	4632      	mov	r2, r6
   2b954:	4629      	mov	r1, r5
   2b956:	f7ff fe50 	bl	2b5fa <_copy>
			s->leftover_offset += data_length;
   2b95a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b95c:	442b      	add	r3, r5
   2b95e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b960:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b966:	463b      	mov	r3, r7
   2b968:	4632      	mov	r2, r6
   2b96a:	4639      	mov	r1, r7
   2b96c:	f7ff fe45 	bl	2b5fa <_copy>
		s->leftover_offset = 0;
   2b970:	2300      	movs	r3, #0
   2b972:	3d10      	subs	r5, #16
   2b974:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b976:	4445      	add	r5, r8
		data += remaining_space;
   2b978:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b97a:	1e63      	subs	r3, r4, #1
   2b97c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b980:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b984:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b988:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b98a:	ea82 0200 	eor.w	r2, r2, r0
   2b98e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b990:	d1f6      	bne.n	2b980 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b992:	4621      	mov	r1, r4
   2b994:	4620      	mov	r0, r4
   2b996:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b998:	f7ff ff06 	bl	2b7a8 <tc_aes_encrypt>
   2b99c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b9a0:	2d10      	cmp	r5, #16
   2b9a2:	d80a      	bhi.n	2b9ba <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b9a4:	2d00      	cmp	r5, #0
   2b9a6:	d0db      	beq.n	2b960 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b9a8:	462b      	mov	r3, r5
   2b9aa:	4632      	mov	r2, r6
   2b9ac:	4629      	mov	r1, r5
   2b9ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b9b2:	f7ff fe22 	bl	2b5fa <_copy>
		s->leftover_offset = data_length;
   2b9b6:	6465      	str	r5, [r4, #68]	; 0x44
   2b9b8:	e7d2      	b.n	2b960 <tc_cmac_update+0x50>
   2b9ba:	1e63      	subs	r3, r4, #1
   2b9bc:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b9be:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b9c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9c6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b9c8:	ea82 0200 	eor.w	r2, r2, r0
   2b9cc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9ce:	d1f6      	bne.n	2b9be <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b9d0:	4621      	mov	r1, r4
   2b9d2:	4620      	mov	r0, r4
   2b9d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b9d6:	f7ff fee7 	bl	2b7a8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b9da:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b9dc:	3d10      	subs	r5, #16
   2b9de:	e7df      	b.n	2b9a0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b9e0:	2000      	movs	r0, #0
   2b9e2:	e7be      	b.n	2b962 <tc_cmac_update+0x52>

0002b9e4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b9e4:	b570      	push	{r4, r5, r6, lr}
   2b9e6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b9e8:	4605      	mov	r5, r0
   2b9ea:	b1f0      	cbz	r0, 2ba2a <tc_cmac_final+0x46>
   2b9ec:	b371      	cbz	r1, 2ba4c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b9ee:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b9f0:	2a10      	cmp	r2, #16
   2b9f2:	d11b      	bne.n	2ba2c <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b9f4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b9f6:	1e63      	subs	r3, r4, #1
   2b9f8:	3901      	subs	r1, #1
   2b9fa:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b9fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ba02:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba06:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2ba08:	ea82 0206 	eor.w	r2, r2, r6
   2ba0c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2ba10:	ea82 0206 	eor.w	r2, r2, r6
   2ba14:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ba16:	d1f2      	bne.n	2b9fe <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2ba18:	4621      	mov	r1, r4
   2ba1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ba1c:	4628      	mov	r0, r5
   2ba1e:	f7ff fec3 	bl	2b7a8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2ba22:	4620      	mov	r0, r4
   2ba24:	f7ff ff2b 	bl	2b87e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2ba28:	2001      	movs	r0, #1
}
   2ba2a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2ba2c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2ba30:	2100      	movs	r1, #0
   2ba32:	f1c2 0210 	rsb	r2, r2, #16
   2ba36:	4420      	add	r0, r4
   2ba38:	f7ff fdec 	bl	2b614 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2ba3c:	2280      	movs	r2, #128	; 0x80
   2ba3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2ba40:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2ba44:	4423      	add	r3, r4
   2ba46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2ba4a:	e7d4      	b.n	2b9f6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2ba4c:	4608      	mov	r0, r1
   2ba4e:	e7ec      	b.n	2ba2a <tc_cmac_final+0x46>

0002ba50 <tc_sha256_update>:
{
   2ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba52:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2ba54:	b110      	cbz	r0, 2ba5c <tc_sha256_update+0xc>
   2ba56:	b1f9      	cbz	r1, 2ba98 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2ba58:	b90a      	cbnz	r2, 2ba5e <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2ba5a:	2001      	movs	r0, #1
}
   2ba5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2ba5e:	2700      	movs	r7, #0
   2ba60:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2ba62:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2ba66:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2ba68:	1c5a      	adds	r2, r3, #1
   2ba6a:	6682      	str	r2, [r0, #104]	; 0x68
   2ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2ba70:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2ba72:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2ba74:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2ba78:	d90b      	bls.n	2ba92 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2ba7a:	4631      	mov	r1, r6
   2ba7c:	f7e5 faf0 	bl	11060 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2ba80:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2ba84:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2ba88:	f142 0200 	adc.w	r2, r2, #0
   2ba8c:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2ba90:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2ba92:	42a5      	cmp	r5, r4
   2ba94:	d1e7      	bne.n	2ba66 <tc_sha256_update+0x16>
   2ba96:	e7e0      	b.n	2ba5a <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2ba98:	4608      	mov	r0, r1
   2ba9a:	e7df      	b.n	2ba5c <tc_sha256_update+0xc>

0002ba9c <tc_sha256_final>:
{
   2ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba9e:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2baa0:	4605      	mov	r5, r0
   2baa2:	2800      	cmp	r0, #0
   2baa4:	d054      	beq.n	2bb50 <tc_sha256_final+0xb4>
   2baa6:	2900      	cmp	r1, #0
   2baa8:	d053      	beq.n	2bb52 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2baaa:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2baac:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2bab0:	00d8      	lsls	r0, r3, #3
   2bab2:	1812      	adds	r2, r2, r0
   2bab4:	f141 0100 	adc.w	r1, r1, #0
   2bab8:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2babc:	2280      	movs	r2, #128	; 0x80
   2babe:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2bac0:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2bac2:	4423      	add	r3, r4
   2bac4:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2bac6:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2baca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2bace:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2bad2:	d90a      	bls.n	2baea <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2bad4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2bad8:	4639      	mov	r1, r7
   2bada:	4430      	add	r0, r6
   2badc:	f7ff fd9a 	bl	2b614 <_set>
		compress(s->iv, s->leftover);
   2bae0:	4631      	mov	r1, r6
   2bae2:	4620      	mov	r0, r4
   2bae4:	f7e5 fabc 	bl	11060 <compress>
		s->leftover_offset = 0;
   2bae8:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2baea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2baec:	2100      	movs	r1, #0
   2baee:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2baf2:	4430      	add	r0, r6
   2baf4:	f7ff fd8e 	bl	2b614 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2baf8:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2bafa:	4631      	mov	r1, r6
   2bafc:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2bafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2bb00:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2bb02:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2bb04:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2bb08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2bb0c:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2bb0e:	0e1b      	lsrs	r3, r3, #24
   2bb10:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2bb14:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2bb16:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2bb1a:	f7e5 faa1 	bl	11060 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2bb1e:	1d2b      	adds	r3, r5, #4
   2bb20:	1f21      	subs	r1, r4, #4
   2bb22:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2bb24:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2bb28:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2bb2a:	0e10      	lsrs	r0, r2, #24
   2bb2c:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2bb30:	0c10      	lsrs	r0, r2, #16
   2bb32:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2bb36:	0a10      	lsrs	r0, r2, #8
   2bb38:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2bb3c:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2bb40:	42ab      	cmp	r3, r5
   2bb42:	d1ef      	bne.n	2bb24 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2bb44:	4620      	mov	r0, r4
   2bb46:	2270      	movs	r2, #112	; 0x70
   2bb48:	2100      	movs	r1, #0
   2bb4a:	f7ff fd63 	bl	2b614 <_set>
	return TC_CRYPTO_SUCCESS;
   2bb4e:	2001      	movs	r0, #1
}
   2bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2bb52:	4608      	mov	r0, r1
   2bb54:	e7fc      	b.n	2bb50 <tc_sha256_final+0xb4>

0002bb56 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2bb56:	b570      	push	{r4, r5, r6, lr}
   2bb58:	4614      	mov	r4, r2
   2bb5a:	4605      	mov	r5, r0
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2bb5c:	1e43      	subs	r3, r0, #1
   2bb5e:	1888      	adds	r0, r1, r2
   2bb60:	4288      	cmp	r0, r1
   2bb62:	d112      	bne.n	2bb8a <rekey+0x34>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2bb64:	2c40      	cmp	r4, #64	; 0x40
   2bb66:	f1c4 0640 	rsb	r6, r4, #64	; 0x40
   2bb6a:	bf88      	it	hi
   2bb6c:	2600      	movhi	r6, #0
   2bb6e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2bb72:	4632      	mov	r2, r6
   2bb74:	215c      	movs	r1, #92	; 0x5c
   2bb76:	4428      	add	r0, r5
   2bb78:	f004 fe83 	bl	30882 <memset>
   2bb7c:	4632      	mov	r2, r6
   2bb7e:	1928      	adds	r0, r5, r4
   2bb80:	2136      	movs	r1, #54	; 0x36
	}
}
   2bb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2bb86:	f004 be7c 	b.w	30882 <memset>
		key[i] = inner_pad ^ new_key[i];
   2bb8a:	780a      	ldrb	r2, [r1, #0]
   2bb8c:	f082 0236 	eor.w	r2, r2, #54	; 0x36
   2bb90:	f803 2f01 	strb.w	r2, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2bb94:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bb98:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
   2bb9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2bba0:	e7de      	b.n	2bb60 <rekey+0xa>

0002bba2 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2bba2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bba4:	460e      	mov	r6, r1
   2bba6:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2bba8:	4605      	mov	r5, r0
{
   2bbaa:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2bbac:	b1b8      	cbz	r0, 2bbde <tc_hmac_set_key+0x3c>
   2bbae:	b341      	cbz	r1, 2bc02 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2bbb0:	b34a      	cbz	r2, 2bc06 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2bbb2:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2bbb4:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2bbb8:	d813      	bhi.n	2bbe2 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2bbba:	a810      	add	r0, sp, #64	; 0x40
   2bbbc:	f7e5 fb3a 	bl	11234 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2bbc0:	4622      	mov	r2, r4
   2bbc2:	4669      	mov	r1, sp
   2bbc4:	a810      	add	r0, sp, #64	; 0x40
   2bbc6:	f7ff ff43 	bl	2ba50 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2bbca:	a910      	add	r1, sp, #64	; 0x40
   2bbcc:	a834      	add	r0, sp, #208	; 0xd0
   2bbce:	f7ff ff65 	bl	2ba9c <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2bbd2:	4622      	mov	r2, r4
   2bbd4:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2bbd6:	4638      	mov	r0, r7
   2bbd8:	f7ff ffbd 	bl	2bb56 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2bbdc:	2001      	movs	r0, #1
}
   2bbde:	b04d      	add	sp, #308	; 0x134
   2bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2bbe2:	f7e5 fb27 	bl	11234 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2bbe6:	4622      	mov	r2, r4
   2bbe8:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2bbea:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2bbee:	4628      	mov	r0, r5
   2bbf0:	f7ff ff2e 	bl	2ba50 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2bbf4:	4629      	mov	r1, r5
   2bbf6:	4620      	mov	r0, r4
   2bbf8:	f7ff ff50 	bl	2ba9c <tc_sha256_final>
		rekey(ctx->key,
   2bbfc:	2220      	movs	r2, #32
   2bbfe:	4621      	mov	r1, r4
   2bc00:	e7e9      	b.n	2bbd6 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2bc02:	4608      	mov	r0, r1
   2bc04:	e7eb      	b.n	2bbde <tc_hmac_set_key+0x3c>
   2bc06:	4610      	mov	r0, r2
   2bc08:	e7e9      	b.n	2bbde <tc_hmac_set_key+0x3c>

0002bc0a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2bc0a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2bc0c:	4604      	mov	r4, r0
   2bc0e:	b140      	cbz	r0, 2bc22 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2bc10:	f7e5 fb10 	bl	11234 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2bc14:	2240      	movs	r2, #64	; 0x40
   2bc16:	4620      	mov	r0, r4
   2bc18:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2bc1c:	f7ff ff18 	bl	2ba50 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2bc20:	2001      	movs	r0, #1
}
   2bc22:	bd10      	pop	{r4, pc}

0002bc24 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2bc24:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2bc26:	b110      	cbz	r0, 2bc2e <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2bc28:	f7ff ff12 	bl	2ba50 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2bc2c:	2001      	movs	r0, #1
}
   2bc2e:	bd08      	pop	{r3, pc}

0002bc30 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2bc30:	b570      	push	{r4, r5, r6, lr}
   2bc32:	460e      	mov	r6, r1
   2bc34:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2bc36:	4605      	mov	r5, r0
   2bc38:	b1f0      	cbz	r0, 2bc78 <tc_hmac_final+0x48>
   2bc3a:	2920      	cmp	r1, #32
   2bc3c:	d11c      	bne.n	2bc78 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2bc3e:	b1ea      	cbz	r2, 2bc7c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2bc40:	4611      	mov	r1, r2
   2bc42:	f7ff ff2b 	bl	2ba9c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2bc46:	4620      	mov	r0, r4
   2bc48:	f7e5 faf4 	bl	11234 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2bc4c:	2240      	movs	r2, #64	; 0x40
   2bc4e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2bc52:	4620      	mov	r0, r4
   2bc54:	f7ff fefc 	bl	2ba50 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2bc58:	4632      	mov	r2, r6
   2bc5a:	4629      	mov	r1, r5
   2bc5c:	4620      	mov	r0, r4
   2bc5e:	f7ff fef7 	bl	2ba50 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2bc62:	4621      	mov	r1, r4
   2bc64:	4628      	mov	r0, r5
   2bc66:	f7ff ff19 	bl	2ba9c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2bc6a:	4620      	mov	r0, r4
   2bc6c:	22f0      	movs	r2, #240	; 0xf0
   2bc6e:	2100      	movs	r1, #0
   2bc70:	f7ff fcd0 	bl	2b614 <_set>

	return TC_CRYPTO_SUCCESS;
   2bc74:	2001      	movs	r0, #1
}
   2bc76:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bc78:	2000      	movs	r0, #0
   2bc7a:	e7fc      	b.n	2bc76 <tc_hmac_final+0x46>
   2bc7c:	4610      	mov	r0, r2
   2bc7e:	e7fa      	b.n	2bc76 <tc_hmac_final+0x46>

0002bc80 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2bc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc84:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2bc86:	f04f 0b01 	mov.w	fp, #1
{
   2bc8a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2bc8c:	2300      	movs	r3, #0
{
   2bc8e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bc90:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2bc94:	4631      	mov	r1, r6
{
   2bc96:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bc98:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2bc9a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2bc9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2bca2:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bca6:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bcaa:	f7ff ff7a 	bl	2bba2 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2bcae:	4620      	mov	r0, r4
   2bcb0:	f7ff ffab 	bl	2bc0a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcb4:	2220      	movs	r2, #32
   2bcb6:	4629      	mov	r1, r5
   2bcb8:	4620      	mov	r0, r4
   2bcba:	f7ff ffb3 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2bcbe:	465a      	mov	r2, fp
   2bcc0:	4620      	mov	r0, r4
   2bcc2:	f10d 0106 	add.w	r1, sp, #6
   2bcc6:	f7ff ffad 	bl	2bc24 <tc_hmac_update>

	if (data && datalen)
   2bcca:	f1b8 0f00 	cmp.w	r8, #0
   2bcce:	d007      	beq.n	2bce0 <update+0x60>
   2bcd0:	f1b9 0f00 	cmp.w	r9, #0
   2bcd4:	d004      	beq.n	2bce0 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2bcd6:	464a      	mov	r2, r9
   2bcd8:	4641      	mov	r1, r8
   2bcda:	4620      	mov	r0, r4
   2bcdc:	f7ff ffa2 	bl	2bc24 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bce0:	b13f      	cbz	r7, 2bcf2 <update+0x72>
   2bce2:	f1ba 0f00 	cmp.w	sl, #0
   2bce6:	d004      	beq.n	2bcf2 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bce8:	4652      	mov	r2, sl
   2bcea:	4639      	mov	r1, r7
   2bcec:	4620      	mov	r0, r4
   2bcee:	f7ff ff99 	bl	2bc24 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bcf2:	4622      	mov	r2, r4
   2bcf4:	2120      	movs	r1, #32
   2bcf6:	4630      	mov	r0, r6
   2bcf8:	f7ff ff9a 	bl	2bc30 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bcfc:	2220      	movs	r2, #32
   2bcfe:	4631      	mov	r1, r6
   2bd00:	4620      	mov	r0, r4
   2bd02:	f7ff ff4e 	bl	2bba2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bd06:	4620      	mov	r0, r4
   2bd08:	f7ff ff7f 	bl	2bc0a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bd0c:	2220      	movs	r2, #32
   2bd0e:	4629      	mov	r1, r5
   2bd10:	4620      	mov	r0, r4
   2bd12:	f7ff ff87 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bd16:	4622      	mov	r2, r4
   2bd18:	2120      	movs	r1, #32
   2bd1a:	4628      	mov	r0, r5
   2bd1c:	f7ff ff88 	bl	2bc30 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2bd20:	f1b8 0f00 	cmp.w	r8, #0
   2bd24:	d03a      	beq.n	2bd9c <update+0x11c>
   2bd26:	f1b9 0f00 	cmp.w	r9, #0
   2bd2a:	d037      	beq.n	2bd9c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bd2c:	2220      	movs	r2, #32
   2bd2e:	4631      	mov	r1, r6
   2bd30:	4620      	mov	r0, r4
   2bd32:	f7ff ff36 	bl	2bba2 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2bd36:	4620      	mov	r0, r4
   2bd38:	f7ff ff67 	bl	2bc0a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bd3c:	2220      	movs	r2, #32
   2bd3e:	4629      	mov	r1, r5
   2bd40:	4620      	mov	r0, r4
   2bd42:	f7ff ff6f 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2bd46:	2201      	movs	r2, #1
   2bd48:	f10d 0107 	add.w	r1, sp, #7
   2bd4c:	4620      	mov	r0, r4
   2bd4e:	f7ff ff69 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2bd52:	464a      	mov	r2, r9
   2bd54:	4641      	mov	r1, r8
   2bd56:	4620      	mov	r0, r4
   2bd58:	f7ff ff64 	bl	2bc24 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bd5c:	b13f      	cbz	r7, 2bd6e <update+0xee>
   2bd5e:	f1ba 0f00 	cmp.w	sl, #0
   2bd62:	d004      	beq.n	2bd6e <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bd64:	4652      	mov	r2, sl
   2bd66:	4639      	mov	r1, r7
   2bd68:	4620      	mov	r0, r4
   2bd6a:	f7ff ff5b 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bd6e:	4622      	mov	r2, r4
   2bd70:	2120      	movs	r1, #32
   2bd72:	4630      	mov	r0, r6
   2bd74:	f7ff ff5c 	bl	2bc30 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bd78:	2220      	movs	r2, #32
   2bd7a:	4631      	mov	r1, r6
   2bd7c:	4620      	mov	r0, r4
   2bd7e:	f7ff ff10 	bl	2bba2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bd82:	4620      	mov	r0, r4
   2bd84:	f7ff ff41 	bl	2bc0a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bd88:	2220      	movs	r2, #32
   2bd8a:	4629      	mov	r1, r5
   2bd8c:	4620      	mov	r0, r4
   2bd8e:	f7ff ff49 	bl	2bc24 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bd92:	4622      	mov	r2, r4
   2bd94:	2120      	movs	r1, #32
   2bd96:	4628      	mov	r0, r5
   2bd98:	f7ff ff4a 	bl	2bc30 <tc_hmac_final>
}
   2bd9c:	b003      	add	sp, #12
   2bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bda2 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2bda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bda4:	460c      	mov	r4, r1
   2bda6:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bda8:	4605      	mov	r5, r0
   2bdaa:	b1b0      	cbz	r0, 2bdda <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2bdac:	b1b9      	cbz	r1, 2bdde <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2bdae:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2bdb0:	2220      	movs	r2, #32
   2bdb2:	2100      	movs	r1, #0
   2bdb4:	30f0      	adds	r0, #240	; 0xf0
   2bdb6:	f7ff fc2d 	bl	2b614 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2bdba:	2220      	movs	r2, #32
   2bdbc:	2101      	movs	r1, #1
   2bdbe:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2bdc2:	f7ff fc27 	bl	2b614 <_set>
	update(prng, personalization, plen, 0, 0);
   2bdc6:	4628      	mov	r0, r5
   2bdc8:	4633      	mov	r3, r6
   2bdca:	463a      	mov	r2, r7
   2bdcc:	4621      	mov	r1, r4
   2bdce:	9600      	str	r6, [sp, #0]
   2bdd0:	f7ff ff56 	bl	2bc80 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2bdd4:	2001      	movs	r0, #1
	prng->countdown = 0;
   2bdd6:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2bdda:	b003      	add	sp, #12
   2bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2bdde:	4608      	mov	r0, r1
   2bde0:	e7fb      	b.n	2bdda <tc_hmac_prng_init+0x38>

0002bde2 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2bde2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bde4:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bde6:	4605      	mov	r5, r0
   2bde8:	b180      	cbz	r0, 2be0c <tc_hmac_prng_reseed+0x2a>
   2bdea:	b179      	cbz	r1, 2be0c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2bdec:	2a1f      	cmp	r2, #31
   2bdee:	d90d      	bls.n	2be0c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2bdf0:	b153      	cbz	r3, 2be08 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2bdf2:	b16c      	cbz	r4, 2be10 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2bdf4:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2bdf6:	f7ff ff43 	bl	2bc80 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2bdfa:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2bdfe:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2be00:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2be04:	b003      	add	sp, #12
   2be06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2be08:	9300      	str	r3, [sp, #0]
   2be0a:	e7f4      	b.n	2bdf6 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2be0c:	2000      	movs	r0, #0
   2be0e:	e7f9      	b.n	2be04 <tc_hmac_prng_reseed+0x22>
   2be10:	4620      	mov	r0, r4
   2be12:	e7f7      	b.n	2be04 <tc_hmac_prng_reseed+0x22>

0002be14 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2be14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2be18:	460d      	mov	r5, r1
   2be1a:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2be1c:	4680      	mov	r8, r0
   2be1e:	b3d8      	cbz	r0, 2be98 <tc_hmac_prng_generate+0x84>
   2be20:	b3d2      	cbz	r2, 2be98 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2be22:	1e4b      	subs	r3, r1, #1
   2be24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2be28:	d236      	bcs.n	2be98 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2be2a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2be2e:	b3ab      	cbz	r3, 2be9c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2be30:	3b01      	subs	r3, #1
   2be32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2be36:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2be3a:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2be3e:	2220      	movs	r2, #32
   2be40:	4649      	mov	r1, r9
   2be42:	4620      	mov	r0, r4
   2be44:	f7ff fead 	bl	2bba2 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2be48:	4620      	mov	r0, r4
   2be4a:	f7ff fede 	bl	2bc0a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2be4e:	2220      	movs	r2, #32
   2be50:	4639      	mov	r1, r7
   2be52:	4620      	mov	r0, r4
   2be54:	f7ff fee6 	bl	2bc24 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2be58:	4622      	mov	r2, r4
   2be5a:	2120      	movs	r1, #32
   2be5c:	4638      	mov	r0, r7
   2be5e:	f7ff fee7 	bl	2bc30 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2be62:	2d20      	cmp	r5, #32
   2be64:	462e      	mov	r6, r5
   2be66:	bf28      	it	cs
   2be68:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2be6a:	4640      	mov	r0, r8
   2be6c:	4633      	mov	r3, r6
   2be6e:	463a      	mov	r2, r7
   2be70:	4631      	mov	r1, r6
   2be72:	f7ff fbc2 	bl	2b5fa <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2be76:	2d20      	cmp	r5, #32
   2be78:	bf38      	it	cc
   2be7a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2be7c:	3d20      	subs	r5, #32
		out += bufferlen;
   2be7e:	44b0      	add	r8, r6
	while (outlen != 0) {
   2be80:	d1dd      	bne.n	2be3e <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2be82:	4620      	mov	r0, r4
   2be84:	462b      	mov	r3, r5
   2be86:	462a      	mov	r2, r5
   2be88:	4629      	mov	r1, r5
   2be8a:	9500      	str	r5, [sp, #0]
   2be8c:	f7ff fef8 	bl	2bc80 <update>

	return TC_CRYPTO_SUCCESS;
   2be90:	2001      	movs	r0, #1
}
   2be92:	b003      	add	sp, #12
   2be94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2be98:	2000      	movs	r0, #0
   2be9a:	e7fa      	b.n	2be92 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2be9c:	f04f 30ff 	mov.w	r0, #4294967295
   2bea0:	e7f7      	b.n	2be92 <tc_hmac_prng_generate+0x7e>

0002bea2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bea2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bea4:	6800      	ldr	r0, [r0, #0]
   2bea6:	f7e5 ba11 	b.w	112cc <z_arm_fatal_error>

0002beaa <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2beaa:	2100      	movs	r1, #0
   2beac:	2001      	movs	r0, #1
   2beae:	f7e5 ba0d 	b.w	112cc <z_arm_fatal_error>

0002beb2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2beb2:	b508      	push	{r3, lr}
	handler();
   2beb4:	f7e5 fada 	bl	1146c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2beb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bebc:	f7e5 bba4 	b.w	11608 <z_arm_exc_exit>

0002bec0 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bec0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2bec2:	f383 880b 	msr	PSPLIM, r3
}
   2bec6:	4770      	bx	lr

0002bec8 <z_log_msg_static_create.constprop.0>:
   2bec8:	2300      	movs	r3, #0
   2beca:	f7e3 bc91 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002bece <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bece:	4770      	bx	lr

0002bed0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2bed0:	4770      	bx	lr

0002bed2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bed2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bed6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2beda:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bedc:	bf08      	it	eq
   2bede:	f06f 0015 	mvneq.w	r0, #21
   2bee2:	4770      	bx	lr

0002bee4 <mpu_configure_region>:
{
   2bee4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2bee6:	890a      	ldrh	r2, [r1, #8]
   2bee8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2beea:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2beec:	684c      	ldr	r4, [r1, #4]
   2beee:	f002 021f 	and.w	r2, r2, #31
{
   2bef2:	b085      	sub	sp, #20
   2bef4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2bef8:	9300      	str	r3, [sp, #0]
   2befa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2befe:	f023 031f 	bic.w	r3, r3, #31
   2bf02:	1e62      	subs	r2, r4, #1
   2bf04:	4413      	add	r3, r2
   2bf06:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2bf0a:	280f      	cmp	r0, #15
   2bf0c:	9303      	str	r3, [sp, #12]
   2bf0e:	d904      	bls.n	2bf1a <mpu_configure_region+0x36>
}
   2bf10:	b005      	add	sp, #20
   2bf12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2bf16:	f7e6 b851 	b.w	11fbc <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2bf1a:	4669      	mov	r1, sp
   2bf1c:	f7e6 f834 	bl	11f88 <region_init>
}
   2bf20:	b005      	add	sp, #20
   2bf22:	bd30      	pop	{r4, r5, pc}

0002bf24 <_stdout_hook_default>:
}
   2bf24:	f04f 30ff 	mov.w	r0, #4294967295
   2bf28:	4770      	bx	lr

0002bf2a <_stdin_hook_default>:
}
   2bf2a:	2000      	movs	r0, #0
   2bf2c:	4770      	bx	lr

0002bf2e <_read>:
{
   2bf2e:	4608      	mov	r0, r1
   2bf30:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bf32:	f7e6 ba5d 	b.w	123f0 <z_impl_zephyr_read_stdin>

0002bf36 <_write>:
{
   2bf36:	4608      	mov	r0, r1
   2bf38:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bf3a:	f7e6 ba6d 	b.w	12418 <z_impl_zephyr_write_stdout>

0002bf3e <_close>:
int _close(int file)
   2bf3e:	f04f 30ff 	mov.w	r0, #4294967295
   2bf42:	4770      	bx	lr

0002bf44 <_lseek>:
}
   2bf44:	2000      	movs	r0, #0
   2bf46:	4770      	bx	lr

0002bf48 <_isatty>:
}
   2bf48:	2802      	cmp	r0, #2
   2bf4a:	bfcc      	ite	gt
   2bf4c:	2000      	movgt	r0, #0
   2bf4e:	2001      	movle	r0, #1
   2bf50:	4770      	bx	lr

0002bf52 <_kill>:
}
   2bf52:	2000      	movs	r0, #0
   2bf54:	4770      	bx	lr

0002bf56 <_getpid>:
}
   2bf56:	2000      	movs	r0, #0
   2bf58:	4770      	bx	lr

0002bf5a <_fstat>:
	st->st_mode = S_IFCHR;
   2bf5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2bf5e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2bf60:	604b      	str	r3, [r1, #4]
}
   2bf62:	4770      	bx	lr

0002bf64 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bf64:	f7f8 b99e 	b.w	242a4 <z_impl_z_errno>

0002bf68 <bt_uuid_cmp>:
{
   2bf68:	b510      	push	{r4, lr}
   2bf6a:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   2bf6c:	7801      	ldrb	r1, [r0, #0]
   2bf6e:	7822      	ldrb	r2, [r4, #0]
{
   2bf70:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2bf72:	428a      	cmp	r2, r1
   2bf74:	d00f      	beq.n	2bf96 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2bf76:	4669      	mov	r1, sp
   2bf78:	f7e6 fc6e 	bl	12858 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2bf7c:	4620      	mov	r0, r4
   2bf7e:	a905      	add	r1, sp, #20
   2bf80:	f7e6 fc6a 	bl	12858 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2bf84:	2210      	movs	r2, #16
   2bf86:	f10d 0115 	add.w	r1, sp, #21
   2bf8a:	f10d 0001 	add.w	r0, sp, #1
   2bf8e:	f004 fc48 	bl	30822 <memcmp>
}
   2bf92:	b00a      	add	sp, #40	; 0x28
   2bf94:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2bf96:	2a01      	cmp	r2, #1
   2bf98:	d006      	beq.n	2bfa8 <bt_uuid_cmp+0x40>
   2bf9a:	2a02      	cmp	r2, #2
   2bf9c:	d007      	beq.n	2bfae <bt_uuid_cmp+0x46>
   2bf9e:	b972      	cbnz	r2, 2bfbe <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2bfa0:	8840      	ldrh	r0, [r0, #2]
   2bfa2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2bfa4:	1ac0      	subs	r0, r0, r3
   2bfa6:	e7f4      	b.n	2bf92 <bt_uuid_cmp+0x2a>
   2bfa8:	6840      	ldr	r0, [r0, #4]
   2bfaa:	6863      	ldr	r3, [r4, #4]
   2bfac:	e7fa      	b.n	2bfa4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bfae:	2210      	movs	r2, #16
   2bfb0:	1c61      	adds	r1, r4, #1
   2bfb2:	3001      	adds	r0, #1
}
   2bfb4:	b00a      	add	sp, #40	; 0x28
   2bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bfba:	f004 bc32 	b.w	30822 <memcmp>
	switch (u1->type) {
   2bfbe:	f06f 0015 	mvn.w	r0, #21
   2bfc2:	e7e6      	b.n	2bf92 <bt_uuid_cmp+0x2a>

0002bfc4 <bt_uuid_create>:
	switch (data_len) {
   2bfc4:	2a04      	cmp	r2, #4
   2bfc6:	d00a      	beq.n	2bfde <bt_uuid_create+0x1a>
   2bfc8:	2a10      	cmp	r2, #16
   2bfca:	d00d      	beq.n	2bfe8 <bt_uuid_create+0x24>
   2bfcc:	2a02      	cmp	r2, #2
   2bfce:	f04f 0300 	mov.w	r3, #0
   2bfd2:	d115      	bne.n	2c000 <bt_uuid_create+0x3c>
		uuid->type = BT_UUID_TYPE_16;
   2bfd4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bfd6:	880b      	ldrh	r3, [r1, #0]
   2bfd8:	8043      	strh	r3, [r0, #2]
	return true;
   2bfda:	2001      	movs	r0, #1
   2bfdc:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2bfde:	2301      	movs	r3, #1
   2bfe0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bfe2:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bfe4:	6043      	str	r3, [r0, #4]
		break;
   2bfe6:	e7f8      	b.n	2bfda <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2bfe8:	2302      	movs	r3, #2
   2bfea:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bfee:	f101 0310 	add.w	r3, r1, #16
   2bff2:	f851 2b04 	ldr.w	r2, [r1], #4
   2bff6:	4299      	cmp	r1, r3
   2bff8:	f840 2b04 	str.w	r2, [r0], #4
   2bffc:	d1f9      	bne.n	2bff2 <bt_uuid_create+0x2e>
   2bffe:	e7ec      	b.n	2bfda <bt_uuid_create+0x16>
	switch (data_len) {
   2c000:	4618      	mov	r0, r3
}
   2c002:	4770      	bx	lr

0002c004 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2c004:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2c006:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2c008:	2106      	movs	r1, #6
{
   2c00a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2c00c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2c010:	f7e8 fffa 	bl	15008 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2c014:	b918      	cbnz	r0, 2c01e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2c016:	79a3      	ldrb	r3, [r4, #6]
   2c018:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2c01c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2c01e:	bd10      	pop	{r4, pc}

0002c020 <bt_addr_le_copy_resolved>:
   2c020:	680b      	ldr	r3, [r1, #0]
   2c022:	6003      	str	r3, [r0, #0]
   2c024:	888b      	ldrh	r3, [r1, #4]
   2c026:	8083      	strh	r3, [r0, #4]
   2c028:	798b      	ldrb	r3, [r1, #6]
   2c02a:	7183      	strb	r3, [r0, #6]

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2c02c:	7803      	ldrb	r3, [r0, #0]
   2c02e:	f023 0302 	bic.w	r3, r3, #2
   2c032:	7003      	strb	r3, [r0, #0]
}
   2c034:	4770      	bx	lr

0002c036 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   2c036:	7800      	ldrb	r0, [r0, #0]
}
   2c038:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2c03c:	4770      	bx	lr

0002c03e <bt_hci_evt_get_flags>:
   2c03e:	280f      	cmp	r0, #15
   2c040:	d807      	bhi.n	2c052 <bt_hci_evt_get_flags+0x14>
   2c042:	280d      	cmp	r0, #13
   2c044:	d80b      	bhi.n	2c05e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2c046:	2805      	cmp	r0, #5
   2c048:	bf08      	it	eq
   2c04a:	2003      	moveq	r0, #3
   2c04c:	bf18      	it	ne
   2c04e:	2002      	movne	r0, #2
   2c050:	4770      	bx	lr
	switch (evt) {
   2c052:	2813      	cmp	r0, #19
   2c054:	d003      	beq.n	2c05e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2c056:	281a      	cmp	r0, #26
   2c058:	bf08      	it	eq
   2c05a:	2001      	moveq	r0, #1
   2c05c:	e7f6      	b.n	2c04c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2c05e:	2001      	movs	r0, #1
	}
}
   2c060:	4770      	bx	lr

0002c062 <hci_vendor_event>:
}
   2c062:	4770      	bx	lr

0002c064 <atomic_or>:
{
   2c064:	4603      	mov	r3, r0
   2c066:	b510      	push	{r4, lr}
}
   2c068:	e8d3 0fef 	ldaex	r0, [r3]
   2c06c:	ea40 0201 	orr.w	r2, r0, r1
   2c070:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c074:	2c00      	cmp	r4, #0
   2c076:	d1f7      	bne.n	2c068 <atomic_or+0x4>
   2c078:	bd10      	pop	{r4, pc}

0002c07a <bt_addr_le_copy>:
   2c07a:	680b      	ldr	r3, [r1, #0]
   2c07c:	6003      	str	r3, [r0, #0]
   2c07e:	888b      	ldrh	r3, [r1, #4]
   2c080:	8083      	strh	r3, [r0, #4]
   2c082:	798b      	ldrb	r3, [r1, #6]
   2c084:	7183      	strb	r3, [r0, #6]
}
   2c086:	4770      	bx	lr

0002c088 <bt_addr_copy>:
   2c088:	680b      	ldr	r3, [r1, #0]
   2c08a:	6003      	str	r3, [r0, #0]
   2c08c:	888b      	ldrh	r3, [r1, #4]
   2c08e:	8083      	strh	r3, [r0, #4]
}
   2c090:	4770      	bx	lr

0002c092 <z_log_msg_static_create.constprop.0>:
   2c092:	2300      	movs	r3, #0
   2c094:	f7e3 bbac 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002c098 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c098:	e8d0 3fef 	ldaex	r3, [r0]
   2c09c:	400b      	ands	r3, r1
   2c09e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c0a2:	2a00      	cmp	r2, #0
   2c0a4:	d1f8      	bne.n	2c098 <atomic_and.isra.0>
}
   2c0a6:	4770      	bx	lr

0002c0a8 <bt_hci_disconnect>:
{
   2c0a8:	b570      	push	{r4, r5, r6, lr}
   2c0aa:	4606      	mov	r6, r0
   2c0ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2c0ae:	f240 4006 	movw	r0, #1030	; 0x406
   2c0b2:	2103      	movs	r1, #3
   2c0b4:	f7e7 f87a 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   2c0b8:	4604      	mov	r4, r0
   2c0ba:	b168      	cbz	r0, 2c0d8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2c0bc:	2103      	movs	r1, #3
   2c0be:	300c      	adds	r0, #12
   2c0c0:	f7ed feae 	bl	19e20 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2c0c4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2c0c6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c0c8:	4621      	mov	r1, r4
}
   2c0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c0ce:	2200      	movs	r2, #0
   2c0d0:	f240 4006 	movw	r0, #1030	; 0x406
   2c0d4:	f7e7 b8b8 	b.w	13248 <bt_hci_cmd_send_sync>
}
   2c0d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c0dc:	bd70      	pop	{r4, r5, r6, pc}

0002c0de <bt_le_set_phy>:
{
   2c0de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c0e2:	4681      	mov	r9, r0
   2c0e4:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c0e6:	f242 0032 	movw	r0, #8242	; 0x2032
   2c0ea:	2107      	movs	r1, #7
{
   2c0ec:	4617      	mov	r7, r2
   2c0ee:	461e      	mov	r6, r3
   2c0f0:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c0f4:	f7e7 f85a 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   2c0f8:	4605      	mov	r5, r0
   2c0fa:	b1a0      	cbz	r0, 2c126 <bt_le_set_phy+0x48>
   2c0fc:	2107      	movs	r1, #7
   2c0fe:	300c      	adds	r0, #12
   2c100:	f7ed fe8e 	bl	19e20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c104:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2c108:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c10c:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2c10e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c110:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c112:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c116:	4629      	mov	r1, r5
}
   2c118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c11c:	2200      	movs	r2, #0
   2c11e:	f242 0032 	movw	r0, #8242	; 0x2032
   2c122:	f7e7 b891 	b.w	13248 <bt_hci_cmd_send_sync>
}
   2c126:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c12e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c12e:	68c0      	ldr	r0, [r0, #12]
   2c130:	f7e7 b9a4 	b.w	1347c <bt_hci_le_enh_conn_complete>

0002c134 <bt_le_conn_params_valid>:
{
   2c134:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c136:	8803      	ldrh	r3, [r0, #0]
   2c138:	8842      	ldrh	r2, [r0, #2]
   2c13a:	4293      	cmp	r3, r2
   2c13c:	d819      	bhi.n	2c172 <bt_le_conn_params_valid+0x3e>
   2c13e:	2b05      	cmp	r3, #5
   2c140:	d917      	bls.n	2c172 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c142:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c146:	d814      	bhi.n	2c172 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c148:	8883      	ldrh	r3, [r0, #4]
   2c14a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c14e:	d210      	bcs.n	2c172 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c150:	f640 4476 	movw	r4, #3190	; 0xc76
   2c154:	88c0      	ldrh	r0, [r0, #6]
   2c156:	f1a0 010a 	sub.w	r1, r0, #10
   2c15a:	b289      	uxth	r1, r1
   2c15c:	42a1      	cmp	r1, r4
   2c15e:	d808      	bhi.n	2c172 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c160:	3301      	adds	r3, #1
   2c162:	b29b      	uxth	r3, r3
   2c164:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c166:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c16a:	bf34      	ite	cc
   2c16c:	2001      	movcc	r0, #1
   2c16e:	2000      	movcs	r0, #0
}
   2c170:	bd10      	pop	{r4, pc}
		return false;
   2c172:	2000      	movs	r0, #0
   2c174:	e7fc      	b.n	2c170 <bt_le_conn_params_valid+0x3c>

0002c176 <le_conn_param_neg_reply>:
{
   2c176:	b570      	push	{r4, r5, r6, lr}
   2c178:	4606      	mov	r6, r0
   2c17a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2c17c:	f242 0021 	movw	r0, #8225	; 0x2021
   2c180:	2103      	movs	r1, #3
   2c182:	f7e7 f813 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   2c186:	4604      	mov	r4, r0
   2c188:	b918      	cbnz	r0, 2c192 <le_conn_param_neg_reply+0x1c>
}
   2c18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c18e:	f7e6 bcd1 	b.w	12b34 <le_conn_param_neg_reply.part.0>
   2c192:	2103      	movs	r1, #3
   2c194:	300c      	adds	r0, #12
   2c196:	f7ed fe43 	bl	19e20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2c19a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2c19c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c19e:	4621      	mov	r1, r4
}
   2c1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c1a4:	f242 0021 	movw	r0, #8225	; 0x2021
   2c1a8:	f7e7 baf8 	b.w	1379c <bt_hci_cmd_send>

0002c1ac <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c1ac:	2000      	movs	r0, #0
   2c1ae:	4770      	bx	lr

0002c1b0 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2c1b0:	2000      	movs	r0, #0
   2c1b2:	4770      	bx	lr

0002c1b4 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2c1b4:	2207      	movs	r2, #7
{
   2c1b6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c1b8:	f004 fb33 	bl	30822 <memcmp>
}
   2c1bc:	fab0 f080 	clz	r0, r0
   2c1c0:	0940      	lsrs	r0, r0, #5
   2c1c2:	bd08      	pop	{r3, pc}

0002c1c4 <bt_addr_copy>:
   2c1c4:	680b      	ldr	r3, [r1, #0]
   2c1c6:	6003      	str	r3, [r0, #0]
   2c1c8:	888b      	ldrh	r3, [r1, #4]
   2c1ca:	8083      	strh	r3, [r0, #4]
}
   2c1cc:	4770      	bx	lr

0002c1ce <bt_addr_le_copy>:
   2c1ce:	680b      	ldr	r3, [r1, #0]
   2c1d0:	6003      	str	r3, [r0, #0]
   2c1d2:	888b      	ldrh	r3, [r1, #4]
   2c1d4:	8083      	strh	r3, [r0, #4]
   2c1d6:	798b      	ldrb	r3, [r1, #6]
   2c1d8:	7183      	strb	r3, [r0, #6]
}
   2c1da:	4770      	bx	lr

0002c1dc <z_log_msg_static_create.constprop.0>:
   2c1dc:	2300      	movs	r3, #0
   2c1de:	f7e3 bb07 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002c1e2 <bt_lookup_id_addr>:
	return addr;
   2c1e2:	2800      	cmp	r0, #0
}
   2c1e4:	bf0c      	ite	eq
   2c1e6:	4608      	moveq	r0, r1
   2c1e8:	2000      	movne	r0, #0
   2c1ea:	4770      	bx	lr

0002c1ec <bt_id_set_private_addr>:
{
   2c1ec:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   2c1ee:	b980      	cbnz	r0, 2c212 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c1f0:	2106      	movs	r1, #6
   2c1f2:	4668      	mov	r0, sp
   2c1f4:	f7e8 ff08 	bl	15008 <bt_rand>
	if (err) {
   2c1f8:	b940      	cbnz	r0, 2c20c <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   2c1fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2c1fe:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2c200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c204:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2c208:	f7e8 fa4c 	bl	146a4 <set_random_address>
}
   2c20c:	b003      	add	sp, #12
   2c20e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2c212:	f06f 0015 	mvn.w	r0, #21
   2c216:	e7f9      	b.n	2c20c <bt_id_set_private_addr+0x20>

0002c218 <bt_id_scan_random_addr_check>:
}
   2c218:	2001      	movs	r0, #1
   2c21a:	4770      	bx	lr

0002c21c <atomic_and>:
{
   2c21c:	4603      	mov	r3, r0
   2c21e:	b510      	push	{r4, lr}
}
   2c220:	e8d3 0fef 	ldaex	r0, [r3]
   2c224:	ea00 0201 	and.w	r2, r0, r1
   2c228:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c22c:	2c00      	cmp	r4, #0
   2c22e:	d1f7      	bne.n	2c220 <atomic_and+0x4>
   2c230:	bd10      	pop	{r4, pc}

0002c232 <bt_addr_le_copy>:
   2c232:	680b      	ldr	r3, [r1, #0]
   2c234:	6003      	str	r3, [r0, #0]
   2c236:	888b      	ldrh	r3, [r1, #4]
   2c238:	8083      	strh	r3, [r0, #4]
   2c23a:	798b      	ldrb	r3, [r1, #6]
   2c23c:	7183      	strb	r3, [r0, #6]
   2c23e:	4770      	bx	lr

0002c240 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c240:	e8d0 0faf 	lda	r0, [r0]
}
   2c244:	4770      	bx	lr

0002c246 <z_log_msg_static_create.constprop.0>:
   2c246:	2300      	movs	r3, #0
   2c248:	f7e3 bad2 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002c24c <tx_complete_work>:
	tx_notify(conn);
   2c24c:	3828      	subs	r0, #40	; 0x28
   2c24e:	f7e8 bf2f 	b.w	150b0 <tx_notify>

0002c252 <bt_conn_reset_rx_state>:
{
   2c252:	b510      	push	{r4, lr}
   2c254:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c256:	6900      	ldr	r0, [r0, #16]
   2c258:	b118      	cbz	r0, 2c262 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c25a:	f7ed fc5b 	bl	19b14 <net_buf_unref>
	conn->rx = NULL;
   2c25e:	2300      	movs	r3, #0
   2c260:	6123      	str	r3, [r4, #16]
}
   2c262:	bd10      	pop	{r4, pc}

0002c264 <conn_lookup_handle>:
{
   2c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c268:	4607      	mov	r7, r0
   2c26a:	460e      	mov	r6, r1
   2c26c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2c26e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c270:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2c274:	42b4      	cmp	r4, r6
   2c276:	d103      	bne.n	2c280 <conn_lookup_handle+0x1c>
	return NULL;
   2c278:	2300      	movs	r3, #0
}
   2c27a:	4618      	mov	r0, r3
   2c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c280:	fb09 7004 	mla	r0, r9, r4, r7
   2c284:	f7e9 fa64 	bl	15750 <bt_conn_ref>
   2c288:	4603      	mov	r3, r0
		if (!conn) {
   2c28a:	b158      	cbz	r0, 2c2a4 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2c28c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c28e:	2d01      	cmp	r5, #1
   2c290:	d002      	beq.n	2c298 <conn_lookup_handle+0x34>
   2c292:	3d07      	subs	r5, #7
   2c294:	2d01      	cmp	r5, #1
   2c296:	d803      	bhi.n	2c2a0 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2c298:	881a      	ldrh	r2, [r3, #0]
   2c29a:	4542      	cmp	r2, r8
   2c29c:	d0ed      	beq.n	2c27a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2c29e:	4618      	mov	r0, r3
   2c2a0:	f7e9 fa80 	bl	157a4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c2a4:	3401      	adds	r4, #1
   2c2a6:	e7e5      	b.n	2c274 <conn_lookup_handle+0x10>

0002c2a8 <bt_conn_connected>:
{
   2c2a8:	b510      	push	{r4, lr}
   2c2aa:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c2ac:	f7ea f826 	bl	162fc <bt_l2cap_connected>
	notify_connected(conn);
   2c2b0:	4620      	mov	r0, r4
}
   2c2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c2b6:	f7e8 bec5 	b.w	15044 <notify_connected>

0002c2ba <conn_le_create_helper>:
{
   2c2ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c2bc:	4605      	mov	r5, r0
   2c2be:	460c      	mov	r4, r1
	if (bt_addr_le_is_resolved(peer)) {
   2c2c0:	f7ff feb9 	bl	2c036 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(&dst, peer);
   2c2c4:	4629      	mov	r1, r5
	if (bt_addr_le_is_resolved(peer)) {
   2c2c6:	b1a8      	cbz	r0, 2c2f4 <conn_le_create_helper+0x3a>
		bt_addr_le_copy_resolved(&dst, peer);
   2c2c8:	4668      	mov	r0, sp
   2c2ca:	f7ff fea9 	bl	2c020 <bt_addr_le_copy_resolved>
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   2c2ce:	4669      	mov	r1, sp
   2c2d0:	2000      	movs	r0, #0
   2c2d2:	f7e9 fcd5 	bl	15c80 <bt_conn_add_le>
	if (!conn) {
   2c2d6:	b158      	cbz	r0, 2c2f0 <conn_le_create_helper+0x36>
	conn->le.interval_min = param->interval_min;
   2c2d8:	8823      	ldrh	r3, [r4, #0]
   2c2da:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   2c2de:	8863      	ldrh	r3, [r4, #2]
   2c2e0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   2c2e4:	88a3      	ldrh	r3, [r4, #4]
   2c2e6:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   2c2ea:	88e3      	ldrh	r3, [r4, #6]
   2c2ec:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
}
   2c2f0:	b003      	add	sp, #12
   2c2f2:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   2c2f4:	f7ff ff75 	bl	2c1e2 <bt_lookup_id_addr>
   2c2f8:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   2c2fa:	6800      	ldr	r0, [r0, #0]
   2c2fc:	9000      	str	r0, [sp, #0]
   2c2fe:	889a      	ldrh	r2, [r3, #4]
   2c300:	799b      	ldrb	r3, [r3, #6]
   2c302:	f8ad 2004 	strh.w	r2, [sp, #4]
   2c306:	f88d 3006 	strb.w	r3, [sp, #6]
}
   2c30a:	e7e0      	b.n	2c2ce <conn_le_create_helper+0x14>

0002c30c <bt_conn_is_peer_addr_le>:
{
   2c30c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c30e:	7a03      	ldrb	r3, [r0, #8]
{
   2c310:	4604      	mov	r4, r0
	if (id != conn->id) {
   2c312:	428b      	cmp	r3, r1
{
   2c314:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c316:	d115      	bne.n	2c344 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c318:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c31c:	2207      	movs	r2, #7
   2c31e:	4628      	mov	r0, r5
   2c320:	f004 fa7f 	bl	30822 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c324:	b180      	cbz	r0, 2c348 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c326:	78e3      	ldrb	r3, [r4, #3]
   2c328:	2207      	movs	r2, #7
   2c32a:	b943      	cbnz	r3, 2c33e <bt_conn_is_peer_addr_le+0x32>
   2c32c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2c330:	4628      	mov	r0, r5
   2c332:	f004 fa76 	bl	30822 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c336:	fab0 f080 	clz	r0, r0
   2c33a:	0940      	lsrs	r0, r0, #5
}
   2c33c:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c33e:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2c342:	e7f5      	b.n	2c330 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c344:	2000      	movs	r0, #0
   2c346:	e7f9      	b.n	2c33c <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c348:	2001      	movs	r0, #1
   2c34a:	e7f7      	b.n	2c33c <bt_conn_is_peer_addr_le+0x30>

0002c34c <bt_conn_get_dst>:
}
   2c34c:	3090      	adds	r0, #144	; 0x90
   2c34e:	4770      	bx	lr

0002c350 <bt_conn_le_conn_update>:
{
   2c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c352:	4607      	mov	r7, r0
   2c354:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c356:	f242 0013 	movw	r0, #8211	; 0x2013
   2c35a:	210e      	movs	r1, #14
   2c35c:	f7e6 ff26 	bl	131ac <bt_hci_cmd_create>
	if (!buf) {
   2c360:	4606      	mov	r6, r0
   2c362:	b1d0      	cbz	r0, 2c39a <bt_conn_le_conn_update+0x4a>
   2c364:	210e      	movs	r1, #14
   2c366:	300c      	adds	r0, #12
   2c368:	f7ed fd5a 	bl	19e20 <net_buf_simple_add>
   2c36c:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2c36e:	220e      	movs	r2, #14
   2c370:	2100      	movs	r1, #0
   2c372:	f004 fa86 	bl	30882 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c376:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c378:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c37a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c37c:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c37e:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c380:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c382:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c384:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c388:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c38a:	88ab      	ldrh	r3, [r5, #4]
   2c38c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c38e:	88eb      	ldrh	r3, [r5, #6]
   2c390:	8123      	strh	r3, [r4, #8]
}
   2c392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c396:	f7e6 bf57 	b.w	13248 <bt_hci_cmd_send_sync>
}
   2c39a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c3a0 <l2cap_connected>:
}
   2c3a0:	4770      	bx	lr

0002c3a2 <z_log_msg_static_create.constprop.0>:
   2c3a2:	2300      	movs	r3, #0
   2c3a4:	f7e3 ba24 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002c3a8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3aa:	4605      	mov	r5, r0
   2c3ac:	460f      	mov	r7, r1
   2c3ae:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2c3b0:	2300      	movs	r3, #0
   2c3b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c3b6:	2104      	movs	r1, #4
   2c3b8:	2000      	movs	r0, #0
   2c3ba:	f7e9 fb63 	bl	15a84 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2c3be:	4604      	mov	r4, r0
   2c3c0:	b920      	cbnz	r0, 2c3cc <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2c3c2:	4628      	mov	r0, r5
}
   2c3c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c3c8:	f7e9 bf54 	b.w	16274 <l2cap_create_le_sig_pdu.part.0>
   2c3cc:	2104      	movs	r1, #4
   2c3ce:	300c      	adds	r0, #12
   2c3d0:	f7ed fd26 	bl	19e20 <net_buf_simple_add>
	hdr->code = code;
   2c3d4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2c3d6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2c3d8:	8046      	strh	r6, [r0, #2]
}
   2c3da:	4620      	mov	r0, r4
   2c3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c3de <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c3de:	4770      	bx	lr

0002c3e0 <bt_l2cap_chan_del>:
{
   2c3e0:	b570      	push	{r4, r5, r6, lr}
   2c3e2:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c3e4:	e9d0 3500 	ldrd	r3, r5, [r0]
   2c3e8:	b123      	cbz	r3, 2c3f4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c3ea:	686b      	ldr	r3, [r5, #4]
   2c3ec:	b103      	cbz	r3, 2c3f0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c3ee:	4798      	blx	r3
	chan->conn = NULL;
   2c3f0:	2300      	movs	r3, #0
   2c3f2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c3f4:	68e3      	ldr	r3, [r4, #12]
   2c3f6:	b10b      	cbz	r3, 2c3fc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c3f8:	4620      	mov	r0, r4
   2c3fa:	4798      	blx	r3
	if (ops->released) {
   2c3fc:	6a2b      	ldr	r3, [r5, #32]
   2c3fe:	b11b      	cbz	r3, 2c408 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c400:	4620      	mov	r0, r4
}
   2c402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c406:	4718      	bx	r3
}
   2c408:	bd70      	pop	{r4, r5, r6, pc}

0002c40a <bt_l2cap_disconnected>:
{
   2c40a:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c40c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c40e:	b130      	cbz	r0, 2c41e <bt_l2cap_disconnected+0x14>
	return node->next;
   2c410:	f850 4908 	ldr.w	r4, [r0], #-8
   2c414:	b104      	cbz	r4, 2c418 <bt_l2cap_disconnected+0xe>
   2c416:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c418:	f7ff ffe2 	bl	2c3e0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c41c:	b904      	cbnz	r4, 2c420 <bt_l2cap_disconnected+0x16>
}
   2c41e:	bd38      	pop	{r3, r4, r5, pc}
   2c420:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c422:	b12d      	cbz	r5, 2c430 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c424:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c426:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c428:	f7ff ffda 	bl	2c3e0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c42c:	462c      	mov	r4, r5
   2c42e:	e7f7      	b.n	2c420 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c430:	4620      	mov	r0, r4
}
   2c432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c436:	f7ff bfd3 	b.w	2c3e0 <bt_l2cap_chan_del>

0002c43a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c43a:	3104      	adds	r1, #4
   2c43c:	f7e9 bb22 	b.w	15a84 <bt_conn_create_pdu_timeout>

0002c440 <bt_l2cap_send_cb>:
{
   2c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c444:	4614      	mov	r4, r2
   2c446:	4605      	mov	r5, r0
   2c448:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c44a:	f102 000c 	add.w	r0, r2, #12
   2c44e:	2104      	movs	r1, #4
   2c450:	461e      	mov	r6, r3
   2c452:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c456:	f7ed fc87 	bl	19d68 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c45a:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c45c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c45e:	3a04      	subs	r2, #4
   2c460:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c462:	4643      	mov	r3, r8
   2c464:	4632      	mov	r2, r6
   2c466:	4621      	mov	r1, r4
   2c468:	4628      	mov	r0, r5
}
   2c46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c46e:	f7e9 b8a1 	b.w	155b4 <bt_conn_send_cb>

0002c472 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2c472:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c474:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2c476:	2202      	movs	r2, #2
   2c478:	2001      	movs	r0, #1
   2c47a:	f7ff ff95 	bl	2c3a8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2c47e:	4604      	mov	r4, r0
   2c480:	b198      	cbz	r0, 2c4aa <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2c482:	2102      	movs	r1, #2
   2c484:	300c      	adds	r0, #12
   2c486:	f7ed fccb 	bl	19e20 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2c48a:	2300      	movs	r3, #0
   2c48c:	4622      	mov	r2, r4
   2c48e:	7003      	strb	r3, [r0, #0]
   2c490:	7043      	strb	r3, [r0, #1]
   2c492:	2105      	movs	r1, #5
   2c494:	4628      	mov	r0, r5
   2c496:	9300      	str	r3, [sp, #0]
   2c498:	f7ff ffd2 	bl	2c440 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2c49c:	b128      	cbz	r0, 2c4aa <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2c49e:	4620      	mov	r0, r4
}
   2c4a0:	b003      	add	sp, #12
   2c4a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c4a6:	f7ed bb35 	b.w	19b14 <net_buf_unref>
}
   2c4aa:	b003      	add	sp, #12
   2c4ac:	bd30      	pop	{r4, r5, pc}

0002c4ae <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c4ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c4b0:	b128      	cbz	r0, 2c4be <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c4b2:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c4b4:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c4b6:	428b      	cmp	r3, r1
   2c4b8:	d001      	beq.n	2c4be <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2c4ba:	6880      	ldr	r0, [r0, #8]
   2c4bc:	e7f8      	b.n	2c4b0 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c4be:	4770      	bx	lr

0002c4c0 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c4c0:	4770      	bx	lr

0002c4c2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c4c2:	4603      	mov	r3, r0
	return list->head;
   2c4c4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c4c6:	b128      	cbz	r0, 2c4d4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c4c8:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c4ca:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c4cc:	4288      	cmp	r0, r1
	list->head = node;
   2c4ce:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c4d0:	bf08      	it	eq
   2c4d2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c4d4:	4770      	bx	lr

0002c4d6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c4d6:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c4d8:	2000      	movs	r0, #0

	while (buf) {
   2c4da:	b903      	cbnz	r3, 2c4de <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c4dc:	4770      	bx	lr
		bytes += buf->len;
   2c4de:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c4e0:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c4e2:	4410      	add	r0, r2
		buf = buf->frags;
   2c4e4:	e7f9      	b.n	2c4da <net_buf_frags_len+0x4>

0002c4e6 <attr_read_type_cb>:
{
   2c4e6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c4e8:	68d4      	ldr	r4, [r2, #12]
   2c4ea:	3102      	adds	r1, #2
   2c4ec:	7823      	ldrb	r3, [r4, #0]
   2c4ee:	b913      	cbnz	r3, 2c4f6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c4f0:	7021      	strb	r1, [r4, #0]
	return true;
   2c4f2:	2001      	movs	r0, #1
}
   2c4f4:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c4f6:	428b      	cmp	r3, r1
   2c4f8:	d0fb      	beq.n	2c4f2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c4fa:	8a03      	ldrh	r3, [r0, #16]
   2c4fc:	3b02      	subs	r3, #2
   2c4fe:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c500:	2000      	movs	r0, #0
   2c502:	6110      	str	r0, [r2, #16]
		return false;
   2c504:	e7f6      	b.n	2c4f4 <attr_read_type_cb+0xe>

0002c506 <att_prepare_write_req>:
}
   2c506:	2006      	movs	r0, #6
   2c508:	4770      	bx	lr

0002c50a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c50a:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c50e:	4108      	asrs	r0, r1
}
   2c510:	f000 0001 	and.w	r0, r0, #1
   2c514:	4770      	bx	lr

0002c516 <att_notify_mult>:
{
   2c516:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2c518:	6803      	ldr	r3, [r0, #0]
   2c51a:	8a0a      	ldrh	r2, [r1, #16]
   2c51c:	6818      	ldr	r0, [r3, #0]
   2c51e:	68c9      	ldr	r1, [r1, #12]
   2c520:	f7ed f88e 	bl	19640 <bt_gatt_mult_notification>
}
   2c524:	2000      	movs	r0, #0
   2c526:	bd08      	pop	{r3, pc}

0002c528 <att_notify>:
{
   2c528:	b538      	push	{r3, r4, r5, lr}
   2c52a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2c52c:	f101 000c 	add.w	r0, r1, #12
   2c530:	460c      	mov	r4, r1
   2c532:	f001 f82a 	bl	2d58a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2c536:	682d      	ldr	r5, [r5, #0]
   2c538:	4601      	mov	r1, r0
   2c53a:	8a23      	ldrh	r3, [r4, #16]
   2c53c:	6828      	ldr	r0, [r5, #0]
   2c53e:	68e2      	ldr	r2, [r4, #12]
   2c540:	f000 ff7b 	bl	2d43a <bt_gatt_notification>
}
   2c544:	2000      	movs	r0, #0
   2c546:	bd38      	pop	{r3, r4, r5, pc}

0002c548 <att_chan_mtu_updated>:
{
   2c548:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c54a:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c54c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c54e:	b352      	cbz	r2, 2c5a6 <att_chan_mtu_updated+0x5e>
	return node->next;
   2c550:	6813      	ldr	r3, [r2, #0]
   2c552:	b103      	cbz	r3, 2c556 <att_chan_mtu_updated+0xe>
   2c554:	3b88      	subs	r3, #136	; 0x88
   2c556:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   2c55a:	2200      	movs	r2, #0
   2c55c:	4611      	mov	r1, r2
   2c55e:	e000      	b.n	2c562 <att_chan_mtu_updated+0x1a>
   2c560:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   2c562:	4284      	cmp	r4, r0
   2c564:	d007      	beq.n	2c576 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c566:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c568:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c56a:	42b1      	cmp	r1, r6
   2c56c:	bf38      	it	cc
   2c56e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c570:	42a2      	cmp	r2, r4
   2c572:	bf38      	it	cc
   2c574:	4622      	movcc	r2, r4
   2c576:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c578:	b12b      	cbz	r3, 2c586 <att_chan_mtu_updated+0x3e>
   2c57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2c57e:	2b00      	cmp	r3, #0
   2c580:	d1ee      	bne.n	2c560 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c582:	4284      	cmp	r4, r0
   2c584:	d1ef      	bne.n	2c566 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c586:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c588:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c58a:	428b      	cmp	r3, r1
   2c58c:	d801      	bhi.n	2c592 <att_chan_mtu_updated+0x4a>
   2c58e:	4290      	cmp	r0, r2
   2c590:	d90b      	bls.n	2c5aa <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c592:	4282      	cmp	r2, r0
   2c594:	bf38      	it	cc
   2c596:	4602      	movcc	r2, r0
   2c598:	4299      	cmp	r1, r3
   2c59a:	6828      	ldr	r0, [r5, #0]
   2c59c:	bf38      	it	cc
   2c59e:	4619      	movcc	r1, r3
}
   2c5a0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c5a2:	f7ed b8c7 	b.w	19734 <bt_gatt_att_max_mtu_changed>
   2c5a6:	4611      	mov	r1, r2
   2c5a8:	e7ed      	b.n	2c586 <att_chan_mtu_updated+0x3e>
}
   2c5aa:	bc70      	pop	{r4, r5, r6}
   2c5ac:	4770      	bx	lr

0002c5ae <write_cb>:
{
   2c5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c5b0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c5b2:	4601      	mov	r1, r0
{
   2c5b4:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c5b6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c5ba:	6820      	ldr	r0, [r4, #0]
   2c5bc:	f000 fe97 	bl	2d2ee <bt_gatt_check_perm>
   2c5c0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c5c2:	bb00      	cbnz	r0, 2c606 <write_cb+0x58>
	if (!data->req) {
   2c5c4:	7a23      	ldrb	r3, [r4, #8]
   2c5c6:	b1b3      	cbz	r3, 2c5f6 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c5c8:	f1a3 0218 	sub.w	r2, r3, #24
   2c5cc:	4253      	negs	r3, r2
   2c5ce:	4153      	adcs	r3, r2
   2c5d0:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c5d2:	9301      	str	r3, [sp, #4]
   2c5d4:	8a63      	ldrh	r3, [r4, #18]
   2c5d6:	4629      	mov	r1, r5
   2c5d8:	9300      	str	r3, [sp, #0]
   2c5da:	68ae      	ldr	r6, [r5, #8]
   2c5dc:	8a23      	ldrh	r3, [r4, #16]
   2c5de:	68e2      	ldr	r2, [r4, #12]
   2c5e0:	6820      	ldr	r0, [r4, #0]
   2c5e2:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c5e4:	2800      	cmp	r0, #0
   2c5e6:	db08      	blt.n	2c5fa <write_cb+0x4c>
   2c5e8:	8a23      	ldrh	r3, [r4, #16]
   2c5ea:	4298      	cmp	r0, r3
   2c5ec:	d10e      	bne.n	2c60c <write_cb+0x5e>
	data->err = 0U;
   2c5ee:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2c5f0:	2001      	movs	r0, #1
	data->err = 0U;
   2c5f2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c5f4:	e008      	b.n	2c608 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c5f6:	2302      	movs	r3, #2
   2c5f8:	e7eb      	b.n	2c5d2 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c5fa:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c5fe:	d305      	bcc.n	2c60c <write_cb+0x5e>
		return -err;
   2c600:	4240      	negs	r0, r0
   2c602:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c604:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c606:	2000      	movs	r0, #0
}
   2c608:	b002      	add	sp, #8
   2c60a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c60c:	200e      	movs	r0, #14
   2c60e:	e7f9      	b.n	2c604 <write_cb+0x56>

0002c610 <bt_gatt_foreach_attr>:
{
   2c610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c612:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c616:	2300      	movs	r3, #0
   2c618:	461a      	mov	r2, r3
   2c61a:	9300      	str	r3, [sp, #0]
   2c61c:	f7eb fd2a 	bl	18074 <bt_gatt_foreach_attr_type>
}
   2c620:	b005      	add	sp, #20
   2c622:	f85d fb04 	ldr.w	pc, [sp], #4

0002c626 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c626:	68d0      	ldr	r0, [r2, #12]
   2c628:	3104      	adds	r1, #4
   2c62a:	7803      	ldrb	r3, [r0, #0]
   2c62c:	b913      	cbnz	r3, 2c634 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c62e:	7001      	strb	r1, [r0, #0]
	return true;
   2c630:	2001      	movs	r0, #1
   2c632:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c634:	428b      	cmp	r3, r1
   2c636:	d0fb      	beq.n	2c630 <attr_read_group_cb+0xa>
		data->group = NULL;
   2c638:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c63a:	6891      	ldr	r1, [r2, #8]
   2c63c:	8a0b      	ldrh	r3, [r1, #16]
   2c63e:	3b04      	subs	r3, #4
   2c640:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c642:	6110      	str	r0, [r2, #16]
}
   2c644:	4770      	bx	lr

0002c646 <find_info_cb>:
{
   2c646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c648:	6893      	ldr	r3, [r2, #8]
{
   2c64a:	4605      	mov	r5, r0
   2c64c:	460f      	mov	r7, r1
   2c64e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c650:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2c652:	b963      	cbnz	r3, 2c66e <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c654:	6850      	ldr	r0, [r2, #4]
   2c656:	2101      	movs	r1, #1
   2c658:	300c      	adds	r0, #12
   2c65a:	f7ed fbe1 	bl	19e20 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c65e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c660:	682b      	ldr	r3, [r5, #0]
   2c662:	781b      	ldrb	r3, [r3, #0]
   2c664:	2b00      	cmp	r3, #0
   2c666:	bf14      	ite	ne
   2c668:	2302      	movne	r3, #2
   2c66a:	2301      	moveq	r3, #1
   2c66c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c66e:	68a3      	ldr	r3, [r4, #8]
   2c670:	781b      	ldrb	r3, [r3, #0]
   2c672:	2b01      	cmp	r3, #1
   2c674:	d003      	beq.n	2c67e <find_info_cb+0x38>
   2c676:	2b02      	cmp	r3, #2
   2c678:	d019      	beq.n	2c6ae <find_info_cb+0x68>
   2c67a:	2000      	movs	r0, #0
   2c67c:	e016      	b.n	2c6ac <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c67e:	682b      	ldr	r3, [r5, #0]
   2c680:	781b      	ldrb	r3, [r3, #0]
   2c682:	2b00      	cmp	r3, #0
   2c684:	d1f9      	bne.n	2c67a <find_info_cb+0x34>
   2c686:	6860      	ldr	r0, [r4, #4]
   2c688:	2104      	movs	r1, #4
   2c68a:	300c      	adds	r0, #12
   2c68c:	f7ed fbc8 	bl	19e20 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c690:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c692:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c694:	682a      	ldr	r2, [r5, #0]
   2c696:	68e3      	ldr	r3, [r4, #12]
   2c698:	8852      	ldrh	r2, [r2, #2]
   2c69a:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c69c:	6863      	ldr	r3, [r4, #4]
   2c69e:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2c6a0:	8a1b      	ldrh	r3, [r3, #16]
   2c6a2:	1ac0      	subs	r0, r0, r3
   2c6a4:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2c6a6:	bf94      	ite	ls
   2c6a8:	2000      	movls	r0, #0
   2c6aa:	2001      	movhi	r0, #1
}
   2c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c6ae:	682b      	ldr	r3, [r5, #0]
   2c6b0:	781b      	ldrb	r3, [r3, #0]
   2c6b2:	2b02      	cmp	r3, #2
   2c6b4:	d1e1      	bne.n	2c67a <find_info_cb+0x34>
   2c6b6:	6860      	ldr	r0, [r4, #4]
   2c6b8:	2112      	movs	r1, #18
   2c6ba:	300c      	adds	r0, #12
   2c6bc:	f7ed fbb0 	bl	19e20 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c6c0:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c6c2:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c6c4:	682b      	ldr	r3, [r5, #0]
   2c6c6:	68e2      	ldr	r2, [r4, #12]
   2c6c8:	1c59      	adds	r1, r3, #1
   2c6ca:	3202      	adds	r2, #2
   2c6cc:	3311      	adds	r3, #17
   2c6ce:	f851 0b04 	ldr.w	r0, [r1], #4
   2c6d2:	4299      	cmp	r1, r3
   2c6d4:	f842 0b04 	str.w	r0, [r2], #4
   2c6d8:	d1f9      	bne.n	2c6ce <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2c6da:	6863      	ldr	r3, [r4, #4]
   2c6dc:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2c6de:	8a1b      	ldrh	r3, [r3, #16]
   2c6e0:	1ac0      	subs	r0, r0, r3
   2c6e2:	2812      	cmp	r0, #18
   2c6e4:	e7df      	b.n	2c6a6 <find_info_cb+0x60>

0002c6e6 <z_log_msg_static_create.constprop.0>:
   2c6e6:	2300      	movs	r3, #0
   2c6e8:	f7e3 b882 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002c6ec <chan_req_send>:
{
   2c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c6ee:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2c6f0:	6888      	ldr	r0, [r1, #8]
   2c6f2:	f7ff fef0 	bl	2c4d6 <net_buf_frags_len>
   2c6f6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2c6f8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2c6fa:	4283      	cmp	r3, r0
   2c6fc:	d30b      	bcc.n	2c716 <chan_req_send+0x2a>
	req->buf = NULL;
   2c6fe:	2600      	movs	r6, #0
	chan->req = req;
   2c700:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   2c702:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2c704:	4628      	mov	r0, r5
	req->buf = NULL;
   2c706:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2c708:	4639      	mov	r1, r7
   2c70a:	f7ea f8c1 	bl	16890 <chan_send>
	if (err) {
   2c70e:	b108      	cbz	r0, 2c714 <chan_req_send+0x28>
		req->buf = buf;
   2c710:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2c712:	63ae      	str	r6, [r5, #56]	; 0x38
}
   2c714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2c716:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2c71a:	e7fb      	b.n	2c714 <chan_req_send+0x28>

0002c71c <process_queue>:
{
   2c71c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2c71e:	2200      	movs	r2, #0
{
   2c720:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2c722:	2300      	movs	r3, #0
   2c724:	4608      	mov	r0, r1
{
   2c726:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2c728:	f000 ff1f 	bl	2d56a <net_buf_get>
	if (buf) {
   2c72c:	4605      	mov	r5, r0
   2c72e:	b158      	cbz	r0, 2c748 <process_queue+0x2c>
	return chan_send(chan, buf);
   2c730:	4601      	mov	r1, r0
   2c732:	4620      	mov	r0, r4
   2c734:	f7ea f8ac 	bl	16890 <chan_send>
		if (err) {
   2c738:	4604      	mov	r4, r0
   2c73a:	b118      	cbz	r0, 2c744 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2c73c:	4629      	mov	r1, r5
   2c73e:	4630      	mov	r0, r6
   2c740:	f003 fe94 	bl	3046c <k_queue_prepend>
}
   2c744:	4620      	mov	r0, r4
   2c746:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2c748:	f06f 0401 	mvn.w	r4, #1
   2c74c:	e7fa      	b.n	2c744 <process_queue+0x28>

0002c74e <bt_att_chan_send_rsp>:
{
   2c74e:	b538      	push	{r3, r4, r5, lr}
   2c750:	4604      	mov	r4, r0
   2c752:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2c754:	f7ea f89c 	bl	16890 <chan_send>
	if (err) {
   2c758:	b130      	cbz	r0, 2c768 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2c75a:	4629      	mov	r1, r5
   2c75c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   2c760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2c764:	f7ed b9b0 	b.w	19ac8 <net_buf_put>
}
   2c768:	bd38      	pop	{r3, r4, r5, pc}

0002c76a <att_chan_read>:
{
   2c76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c76e:	4680      	mov	r8, r0
   2c770:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c772:	4610      	mov	r0, r2
{
   2c774:	4699      	mov	r9, r3
   2c776:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c778:	f7ff fead 	bl	2c4d6 <net_buf_frags_len>
   2c77c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2c780:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c782:	4283      	cmp	r3, r0
   2c784:	d97a      	bls.n	2c87c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2c786:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2c78a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2c78c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2c78e:	f7ed fa1d 	bl	19bcc <net_buf_frag_last>
	size_t len, total = 0;
   2c792:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2c796:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c798:	4630      	mov	r0, r6
   2c79a:	f7ff fe9c 	bl	2c4d6 <net_buf_frags_len>
   2c79e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2c7a2:	f105 070c 	add.w	r7, r5, #12
   2c7a6:	1a24      	subs	r4, r4, r0
   2c7a8:	4638      	mov	r0, r7
   2c7aa:	f000 fefa 	bl	2d5a2 <net_buf_simple_tailroom>
   2c7ae:	4284      	cmp	r4, r0
   2c7b0:	d211      	bcs.n	2c7d6 <att_chan_read+0x6c>
   2c7b2:	4630      	mov	r0, r6
   2c7b4:	f7ff fe8f 	bl	2c4d6 <net_buf_frags_len>
   2c7b8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c7bc:	1a24      	subs	r4, r4, r0
		if (!len) {
   2c7be:	bb34      	cbnz	r4, 2c80e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2c7c0:	7ab0      	ldrb	r0, [r6, #10]
   2c7c2:	f7ed f859 	bl	19878 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2c7c6:	2200      	movs	r2, #0
   2c7c8:	2300      	movs	r3, #0
   2c7ca:	f000 fec9 	bl	2d560 <net_buf_alloc_fixed>
			if (!frag) {
   2c7ce:	4605      	mov	r5, r0
   2c7d0:	b930      	cbnz	r0, 2c7e0 <att_chan_read+0x76>
	return total;
   2c7d2:	4657      	mov	r7, sl
   2c7d4:	e02c      	b.n	2c830 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2c7d6:	4638      	mov	r0, r7
   2c7d8:	f000 fee3 	bl	2d5a2 <net_buf_simple_tailroom>
   2c7dc:	4604      	mov	r4, r0
   2c7de:	e7ee      	b.n	2c7be <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2c7e0:	4601      	mov	r1, r0
   2c7e2:	4630      	mov	r0, r6
   2c7e4:	f7ed fa38 	bl	19c58 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c7e8:	4630      	mov	r0, r6
   2c7ea:	f7ff fe74 	bl	2c4d6 <net_buf_frags_len>
   2c7ee:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c7f2:	f105 070c 	add.w	r7, r5, #12
   2c7f6:	1a24      	subs	r4, r4, r0
   2c7f8:	4638      	mov	r0, r7
   2c7fa:	f000 fed2 	bl	2d5a2 <net_buf_simple_tailroom>
   2c7fe:	4284      	cmp	r4, r0
   2c800:	d21a      	bcs.n	2c838 <att_chan_read+0xce>
   2c802:	4630      	mov	r0, r6
   2c804:	f7ff fe67 	bl	2c4d6 <net_buf_frags_len>
   2c808:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c80c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2c80e:	68e9      	ldr	r1, [r5, #12]
   2c810:	8a2a      	ldrh	r2, [r5, #16]
   2c812:	f8cd 9000 	str.w	r9, [sp]
   2c816:	f8db 7004 	ldr.w	r7, [fp, #4]
   2c81a:	440a      	add	r2, r1
   2c81c:	9803      	ldr	r0, [sp, #12]
   2c81e:	4659      	mov	r1, fp
   2c820:	b2a3      	uxth	r3, r4
   2c822:	47b8      	blx	r7
		if (read < 0) {
   2c824:	1e07      	subs	r7, r0, #0
   2c826:	da0c      	bge.n	2c842 <att_chan_read+0xd8>
				return total;
   2c828:	f1ba 0f00 	cmp.w	sl, #0
   2c82c:	bf18      	it	ne
   2c82e:	4657      	movne	r7, sl
}
   2c830:	4638      	mov	r0, r7
   2c832:	b005      	add	sp, #20
   2c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c838:	4638      	mov	r0, r7
   2c83a:	f000 feb2 	bl	2d5a2 <net_buf_simple_tailroom>
   2c83e:	4604      	mov	r4, r0
   2c840:	e7e5      	b.n	2c80e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2c842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c844:	b993      	cbnz	r3, 2c86c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2c846:	4639      	mov	r1, r7
   2c848:	f105 000c 	add.w	r0, r5, #12
   2c84c:	f7ed fae8 	bl	19e20 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c850:	4630      	mov	r0, r6
   2c852:	f7ff fe40 	bl	2c4d6 <net_buf_frags_len>
   2c856:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2c85a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c85c:	4283      	cmp	r3, r0
		total += read;
   2c85e:	44ba      	add	sl, r7
		offset += read;
   2c860:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c864:	d9b5      	bls.n	2c7d2 <att_chan_read+0x68>
   2c866:	42a7      	cmp	r7, r4
   2c868:	d096      	beq.n	2c798 <att_chan_read+0x2e>
   2c86a:	e7b2      	b.n	2c7d2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2c86c:	4639      	mov	r1, r7
   2c86e:	4628      	mov	r0, r5
   2c870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c874:	4798      	blx	r3
   2c876:	2800      	cmp	r0, #0
   2c878:	d1e5      	bne.n	2c846 <att_chan_read+0xdc>
   2c87a:	e7aa      	b.n	2c7d2 <att_chan_read+0x68>
		return 0;
   2c87c:	2700      	movs	r7, #0
   2c87e:	e7d7      	b.n	2c830 <att_chan_read+0xc6>

0002c880 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c880:	2200      	movs	r2, #0
	return list->head;
   2c882:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c884:	b903      	cbnz	r3, 2c888 <sys_slist_find_and_remove.isra.0+0x8>
   2c886:	4770      	bx	lr
   2c888:	428b      	cmp	r3, r1
   2c88a:	d10f      	bne.n	2c8ac <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2c88c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c88e:	b93a      	cbnz	r2, 2c8a0 <sys_slist_find_and_remove.isra.0+0x20>
   2c890:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c892:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c894:	4291      	cmp	r1, r2
   2c896:	d100      	bne.n	2c89a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2c898:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c89a:	2300      	movs	r3, #0
   2c89c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c89e:	4770      	bx	lr
	parent->next = child;
   2c8a0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c8a2:	6843      	ldr	r3, [r0, #4]
   2c8a4:	4299      	cmp	r1, r3
	list->tail = node;
   2c8a6:	bf08      	it	eq
   2c8a8:	6042      	streq	r2, [r0, #4]
}
   2c8aa:	e7f6      	b.n	2c89a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2c8ac:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c8ae:	681b      	ldr	r3, [r3, #0]
   2c8b0:	e7e8      	b.n	2c884 <sys_slist_find_and_remove.isra.0+0x4>

0002c8b2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c8b2:	2301      	movs	r3, #1
   2c8b4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c8b6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c8b8:	e8d0 2fef 	ldaex	r2, [r0]
   2c8bc:	401a      	ands	r2, r3
   2c8be:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2c8c2:	2900      	cmp	r1, #0
   2c8c4:	d1f8      	bne.n	2c8b8 <atomic_clear_bit+0x6>
}
   2c8c6:	4770      	bx	lr

0002c8c8 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2c8c8:	2006      	movs	r0, #6
   2c8ca:	4770      	bx	lr

0002c8cc <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c8cc:	2301      	movs	r3, #1
{
   2c8ce:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c8d0:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c8d4:	e8d0 3fef 	ldaex	r3, [r0]
   2c8d8:	ea43 0201 	orr.w	r2, r3, r1
   2c8dc:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2c8e0:	2c00      	cmp	r4, #0
   2c8e2:	d1f7      	bne.n	2c8d4 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2c8e4:	4219      	tst	r1, r3
}
   2c8e6:	bf14      	ite	ne
   2c8e8:	2001      	movne	r0, #1
   2c8ea:	2000      	moveq	r0, #0
   2c8ec:	bd10      	pop	{r4, pc}

0002c8ee <read_cb>:
{
   2c8ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2c8f0:	2300      	movs	r3, #0
{
   2c8f2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2c8f4:	6816      	ldr	r6, [r2, #0]
{
   2c8f6:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2c8f8:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c8fa:	4629      	mov	r1, r5
	data->err = 0x00;
   2c8fc:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c8fe:	2295      	movs	r2, #149	; 0x95
   2c900:	f000 fcf5 	bl	2d2ee <bt_gatt_check_perm>
   2c904:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c906:	b980      	cbnz	r0, 2c92a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c908:	e9cd 0000 	strd	r0, r0, [sp]
   2c90c:	4629      	mov	r1, r5
   2c90e:	4630      	mov	r0, r6
   2c910:	88a3      	ldrh	r3, [r4, #4]
   2c912:	68a2      	ldr	r2, [r4, #8]
   2c914:	f7ff ff29 	bl	2c76a <att_chan_read>
	if (ret < 0) {
   2c918:	2800      	cmp	r0, #0
   2c91a:	da09      	bge.n	2c930 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2c91c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2c920:	bf32      	itee	cc
   2c922:	200e      	movcc	r0, #14
		return -err;
   2c924:	4240      	negcs	r0, r0
   2c926:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2c928:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c92a:	2000      	movs	r0, #0
}
   2c92c:	b002      	add	sp, #8
   2c92e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2c930:	2001      	movs	r0, #1
   2c932:	e7fb      	b.n	2c92c <read_cb+0x3e>

0002c934 <read_vl_cb>:
{
   2c934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2c938:	2300      	movs	r3, #0
{
   2c93a:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2c93c:	f8d2 8000 	ldr.w	r8, [r2]
{
   2c940:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2c942:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c946:	4631      	mov	r1, r6
	data->err = 0x00;
   2c948:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c94a:	2295      	movs	r2, #149	; 0x95
   2c94c:	f000 fccf 	bl	2d2ee <bt_gatt_check_perm>
   2c950:	4605      	mov	r5, r0
   2c952:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c954:	b9e0      	cbnz	r0, 2c990 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2c956:	68a0      	ldr	r0, [r4, #8]
   2c958:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2c95c:	8a02      	ldrh	r2, [r0, #16]
   2c95e:	1a9b      	subs	r3, r3, r2
   2c960:	2b01      	cmp	r3, #1
   2c962:	dd15      	ble.n	2c990 <read_vl_cb+0x5c>
   2c964:	2102      	movs	r1, #2
   2c966:	300c      	adds	r0, #12
   2c968:	f7ed fa5a 	bl	19e20 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c96c:	e9cd 5500 	strd	r5, r5, [sp]
   2c970:	4607      	mov	r7, r0
   2c972:	88a3      	ldrh	r3, [r4, #4]
   2c974:	4631      	mov	r1, r6
   2c976:	4640      	mov	r0, r8
   2c978:	68a2      	ldr	r2, [r4, #8]
   2c97a:	f7ff fef6 	bl	2c76a <att_chan_read>
	if (read < 0) {
   2c97e:	1e03      	subs	r3, r0, #0
   2c980:	da0a      	bge.n	2c998 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2c982:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2c986:	bf32      	itee	cc
   2c988:	230e      	movcc	r3, #14
		return -err;
   2c98a:	425b      	negcs	r3, r3
   2c98c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2c98e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c990:	2000      	movs	r0, #0
}
   2c992:	b002      	add	sp, #8
   2c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2c998:	2001      	movs	r0, #1
	rsp->len = read;
   2c99a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2c99c:	e7f9      	b.n	2c992 <read_vl_cb+0x5e>

0002c99e <bt_att_sent>:
{
   2c99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   2c9a0:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2c9a4:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2c9a6:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2c9a8:	2104      	movs	r1, #4
   2c9aa:	3030      	adds	r0, #48	; 0x30
   2c9ac:	f7ff ff81 	bl	2c8b2 <atomic_clear_bit>
	if (!att) {
   2c9b0:	b304      	cbz	r4, 2c9f4 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2c9b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2c9b4:	b98b      	cbnz	r3, 2c9da <bt_att_sent+0x3c>
   2c9b6:	6863      	ldr	r3, [r4, #4]
   2c9b8:	b17b      	cbz	r3, 2c9da <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2c9ba:	1d20      	adds	r0, r4, #4
   2c9bc:	f7ff fd81 	bl	2c4c2 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c9c0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2c9c2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c9c4:	4638      	mov	r0, r7
   2c9c6:	f7ff fe91 	bl	2c6ec <chan_req_send>
   2c9ca:	2800      	cmp	r0, #0
   2c9cc:	da12      	bge.n	2c9f4 <bt_att_sent+0x56>
	return list->head;
   2c9ce:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2c9d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c9d2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2c9d4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c9d6:	b903      	cbnz	r3, 2c9da <bt_att_sent+0x3c>
	list->tail = node;
   2c9d8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2c9da:	4638      	mov	r0, r7
   2c9dc:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2c9e0:	f7ff fe9c 	bl	2c71c <process_queue>
	if (!err) {
   2c9e4:	b130      	cbz	r0, 2c9f4 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   2c9e6:	4638      	mov	r0, r7
   2c9e8:	f104 010c 	add.w	r1, r4, #12
}
   2c9ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2c9f0:	f7ff be94 	b.w	2c71c <process_queue>
}
   2c9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c9f6 <att_req_send_process>:
{
   2c9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2c9fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2c9fc:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c9fe:	2c00      	cmp	r4, #0
   2ca00:	d03a      	beq.n	2ca78 <att_req_send_process+0x82>
	return node->next;
   2ca02:	f854 6988 	ldr.w	r6, [r4], #-136
   2ca06:	b106      	cbz	r6, 2ca0a <att_req_send_process+0x14>
   2ca08:	3e88      	subs	r6, #136	; 0x88
{
   2ca0a:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2ca0c:	f108 0704 	add.w	r7, r8, #4
{
   2ca10:	461d      	mov	r5, r3
   2ca12:	e013      	b.n	2ca3c <att_req_send_process+0x46>
		if (!req && prev &&
   2ca14:	b1bb      	cbz	r3, 2ca46 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2ca16:	2103      	movs	r1, #3
   2ca18:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2ca1c:	f7ff fd75 	bl	2c50a <atomic_test_bit>
   2ca20:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2ca22:	f103 0034 	add.w	r0, r3, #52	; 0x34
   2ca26:	f7ff fd70 	bl	2c50a <atomic_test_bit>
		if (!req && prev &&
   2ca2a:	4282      	cmp	r2, r0
   2ca2c:	d10b      	bne.n	2ca46 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ca2e:	b31e      	cbz	r6, 2ca78 <att_req_send_process+0x82>
   2ca30:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2ca34:	b102      	cbz	r2, 2ca38 <att_req_send_process+0x42>
   2ca36:	3a88      	subs	r2, #136	; 0x88
{
   2ca38:	4634      	mov	r4, r6
   2ca3a:	4616      	mov	r6, r2
		if (chan->req) {
   2ca3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2ca3e:	2a00      	cmp	r2, #0
   2ca40:	d1f5      	bne.n	2ca2e <att_req_send_process+0x38>
		if (!req && prev &&
   2ca42:	2d00      	cmp	r5, #0
   2ca44:	d0e6      	beq.n	2ca14 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2ca46:	4638      	mov	r0, r7
   2ca48:	f7ff fd3b 	bl	2c4c2 <sys_slist_get>
	if (node) {
   2ca4c:	4605      	mov	r5, r0
   2ca4e:	b908      	cbnz	r0, 2ca54 <att_req_send_process+0x5e>
   2ca50:	4623      	mov	r3, r4
   2ca52:	e7ec      	b.n	2ca2e <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2ca54:	4601      	mov	r1, r0
   2ca56:	4620      	mov	r0, r4
   2ca58:	f7e9 ffbc 	bl	169d4 <bt_att_chan_req_send>
   2ca5c:	2800      	cmp	r0, #0
   2ca5e:	da0b      	bge.n	2ca78 <att_req_send_process+0x82>
	return list->head;
   2ca60:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2ca64:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ca66:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2ca6a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ca6e:	2b00      	cmp	r3, #0
   2ca70:	d1ee      	bne.n	2ca50 <att_req_send_process+0x5a>
	list->tail = node;
   2ca72:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2ca76:	e7eb      	b.n	2ca50 <att_req_send_process+0x5a>
}
   2ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ca7c <bt_att_status>:
{
   2ca7c:	b538      	push	{r3, r4, r5, lr}
   2ca7e:	4605      	mov	r5, r0
   2ca80:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2ca82:	2100      	movs	r1, #0
   2ca84:	f7ff fd41 	bl	2c50a <atomic_test_bit>
   2ca88:	b1b8      	cbz	r0, 2caba <bt_att_status+0x3e>
	if (!chan->att) {
   2ca8a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2ca8e:	b1a0      	cbz	r0, 2caba <bt_att_status+0x3e>
	if (chan->req) {
   2ca90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2ca92:	b993      	cbnz	r3, 2caba <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   2ca94:	3004      	adds	r0, #4
   2ca96:	f7ff fd14 	bl	2c4c2 <sys_slist_get>
	if (!node) {
   2ca9a:	4604      	mov	r4, r0
   2ca9c:	b168      	cbz	r0, 2caba <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ca9e:	4601      	mov	r1, r0
   2caa0:	1f28      	subs	r0, r5, #4
   2caa2:	f7e9 ff97 	bl	169d4 <bt_att_chan_req_send>
   2caa6:	2800      	cmp	r0, #0
   2caa8:	da07      	bge.n	2caba <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   2caaa:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2caae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2cab0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cab2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2cab4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cab6:	b902      	cbnz	r2, 2caba <bt_att_status+0x3e>
	list->tail = node;
   2cab8:	609c      	str	r4, [r3, #8]
}
   2caba:	bd38      	pop	{r3, r4, r5, pc}

0002cabc <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2cabc:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2cabe:	6883      	ldr	r3, [r0, #8]
   2cac0:	699b      	ldr	r3, [r3, #24]
   2cac2:	b10b      	cbz	r3, 2cac8 <att_sent+0xc>
		chan->ops->sent(chan);
   2cac4:	3004      	adds	r0, #4
   2cac6:	4718      	bx	r3
}
   2cac8:	4770      	bx	lr

0002caca <att_tx_complete>:
{
   2caca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cace:	4606      	mov	r6, r0
   2cad0:	460d      	mov	r5, r1
	if (!err) {
   2cad2:	4614      	mov	r4, r2
   2cad4:	b122      	cbz	r2, 2cae0 <att_tx_complete+0x16>
}
   2cad6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2cada:	4608      	mov	r0, r1
   2cadc:	f7e9 bdf2 	b.w	166c4 <tx_meta_data_free>
		att_sent(conn, user_data);
   2cae0:	f7ff ffec 	bl	2cabc <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2cae4:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2cae6:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2cae8:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2caec:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2caf0:	f7e9 fde8 	bl	166c4 <tx_meta_data_free>
	if (!err && func) {
   2caf4:	b92f      	cbnz	r7, 2cb02 <att_tx_complete+0x38>
}
   2caf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2cafa:	4649      	mov	r1, r9
   2cafc:	4630      	mov	r0, r6
   2cafe:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2cb00:	3401      	adds	r4, #1
   2cb02:	b2a3      	uxth	r3, r4
   2cb04:	4543      	cmp	r3, r8
   2cb06:	d3f8      	bcc.n	2cafa <att_tx_complete+0x30>
   2cb08:	e7f5      	b.n	2caf6 <att_tx_complete+0x2c>

0002cb0a <att_req_sent>:
{
   2cb0a:	b510      	push	{r4, lr}
   2cb0c:	460c      	mov	r4, r1
	if (!err) {
   2cb0e:	b90a      	cbnz	r2, 2cb14 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2cb10:	f7ff ffd4 	bl	2cabc <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2cb14:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2cb16:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2cb18:	b12b      	cbz	r3, 2cb26 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2cb1a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2cb1e:	2300      	movs	r3, #0
   2cb20:	3058      	adds	r0, #88	; 0x58
   2cb22:	f7f9 f847 	bl	25bb4 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2cb26:	4620      	mov	r0, r4
}
   2cb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2cb2c:	f7e9 bdca 	b.w	166c4 <tx_meta_data_free>

0002cb30 <att_cfm_sent>:
{
   2cb30:	b510      	push	{r4, lr}
   2cb32:	460c      	mov	r4, r1
	if (!err) {
   2cb34:	b90a      	cbnz	r2, 2cb3a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2cb36:	f7ff ffc1 	bl	2cabc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   2cb3a:	6820      	ldr	r0, [r4, #0]
   2cb3c:	2101      	movs	r1, #1
   2cb3e:	3034      	adds	r0, #52	; 0x34
   2cb40:	f7ff feb7 	bl	2c8b2 <atomic_clear_bit>
	tx_meta_data_free(data);
   2cb44:	4620      	mov	r0, r4
}
   2cb46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2cb4a:	f7e9 bdbb 	b.w	166c4 <tx_meta_data_free>

0002cb4e <att_rsp_sent>:
{
   2cb4e:	b510      	push	{r4, lr}
   2cb50:	460c      	mov	r4, r1
	if (!err) {
   2cb52:	b90a      	cbnz	r2, 2cb58 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2cb54:	f7ff ffb2 	bl	2cabc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2cb58:	6820      	ldr	r0, [r4, #0]
   2cb5a:	2100      	movs	r1, #0
   2cb5c:	3034      	adds	r0, #52	; 0x34
   2cb5e:	f7ff fea8 	bl	2c8b2 <atomic_clear_bit>
	tx_meta_data_free(data);
   2cb62:	4620      	mov	r0, r4
}
   2cb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2cb68:	f7e9 bdac 	b.w	166c4 <tx_meta_data_free>

0002cb6c <att_indicate>:
{
   2cb6c:	b570      	push	{r4, r5, r6, lr}
   2cb6e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cb70:	f101 000c 	add.w	r0, r1, #12
   2cb74:	460d      	mov	r5, r1
   2cb76:	f000 fd08 	bl	2d58a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2cb7a:	6826      	ldr	r6, [r4, #0]
   2cb7c:	4601      	mov	r1, r0
   2cb7e:	8a2b      	ldrh	r3, [r5, #16]
   2cb80:	68ea      	ldr	r2, [r5, #12]
   2cb82:	6830      	ldr	r0, [r6, #0]
   2cb84:	f000 fc59 	bl	2d43a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   2cb88:	211e      	movs	r1, #30
   2cb8a:	2200      	movs	r2, #0
   2cb8c:	4620      	mov	r0, r4
   2cb8e:	f7ea f8fd 	bl	16d8c <bt_att_chan_create_pdu>
	if (!buf) {
   2cb92:	4601      	mov	r1, r0
   2cb94:	b110      	cbz	r0, 2cb9c <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   2cb96:	4620      	mov	r0, r4
   2cb98:	f7ff fdd9 	bl	2c74e <bt_att_chan_send_rsp>
}
   2cb9c:	2000      	movs	r0, #0
   2cb9e:	bd70      	pop	{r4, r5, r6, pc}

0002cba0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cba4:	4688      	mov	r8, r1
   2cba6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cba8:	2101      	movs	r1, #1
   2cbaa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cbac:	4605      	mov	r5, r0
   2cbae:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cbb0:	f7ea f8ec 	bl	16d8c <bt_att_chan_create_pdu>
	if (!buf) {
   2cbb4:	4604      	mov	r4, r0
   2cbb6:	b170      	cbz	r0, 2cbd6 <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   2cbb8:	2104      	movs	r1, #4
   2cbba:	300c      	adds	r0, #12
   2cbbc:	f7ed f930 	bl	19e20 <net_buf_simple_add>
	rsp->request = req;
   2cbc0:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2cbc4:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2cbc8:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2cbca:	4621      	mov	r1, r4
   2cbcc:	4628      	mov	r0, r5
}
   2cbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2cbd2:	f7ff bdbc 	b.w	2c74e <bt_att_chan_send_rsp>
}
   2cbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cbda <att_write_req>:
{
   2cbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cbdc:	460c      	mov	r4, r1
   2cbde:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cbe0:	f101 000c 	add.w	r0, r1, #12
   2cbe4:	f000 fcd1 	bl	2d58a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2cbe8:	8a22      	ldrh	r2, [r4, #16]
   2cbea:	4603      	mov	r3, r0
   2cbec:	9201      	str	r2, [sp, #4]
   2cbee:	68e2      	ldr	r2, [r4, #12]
   2cbf0:	2112      	movs	r1, #18
   2cbf2:	9200      	str	r2, [sp, #0]
   2cbf4:	4628      	mov	r0, r5
   2cbf6:	2213      	movs	r2, #19
   2cbf8:	f7ea fa04 	bl	17004 <att_write_rsp.constprop.0>
}
   2cbfc:	b003      	add	sp, #12
   2cbfe:	bd30      	pop	{r4, r5, pc}

0002cc00 <att_write_cmd>:
{
   2cc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cc02:	460c      	mov	r4, r1
   2cc04:	4605      	mov	r5, r0
   2cc06:	f101 000c 	add.w	r0, r1, #12
   2cc0a:	f000 fcbe 	bl	2d58a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cc0e:	8a22      	ldrh	r2, [r4, #16]
   2cc10:	4603      	mov	r3, r0
   2cc12:	9201      	str	r2, [sp, #4]
   2cc14:	68e2      	ldr	r2, [r4, #12]
   2cc16:	4628      	mov	r0, r5
   2cc18:	9200      	str	r2, [sp, #0]
   2cc1a:	2200      	movs	r2, #0
   2cc1c:	4611      	mov	r1, r2
   2cc1e:	f7ea f9f1 	bl	17004 <att_write_rsp.constprop.0>
}
   2cc22:	b003      	add	sp, #12
   2cc24:	bd30      	pop	{r4, r5, pc}

0002cc26 <att_read_blob_req>:
{
   2cc26:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cc28:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cc2a:	210c      	movs	r1, #12
   2cc2c:	8813      	ldrh	r3, [r2, #0]
   2cc2e:	8852      	ldrh	r2, [r2, #2]
   2cc30:	9200      	str	r2, [sp, #0]
   2cc32:	220d      	movs	r2, #13
   2cc34:	f7ea fbae 	bl	17394 <att_read_rsp>
}
   2cc38:	b003      	add	sp, #12
   2cc3a:	f85d fb04 	ldr.w	pc, [sp], #4

0002cc3e <att_read_req>:
{
   2cc3e:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cc40:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2cc42:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cc44:	210a      	movs	r1, #10
   2cc46:	881b      	ldrh	r3, [r3, #0]
   2cc48:	9200      	str	r2, [sp, #0]
   2cc4a:	220b      	movs	r2, #11
   2cc4c:	f7ea fba2 	bl	17394 <att_read_rsp>
}
   2cc50:	b003      	add	sp, #12
   2cc52:	f85d fb04 	ldr.w	pc, [sp], #4

0002cc56 <att_mtu_req>:
{
   2cc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cc5a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cc5c:	f850 2b34 	ldr.w	r2, [r0], #52
{
   2cc60:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cc62:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cc64:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cc66:	f7ff fc50 	bl	2c50a <atomic_test_bit>
   2cc6a:	4604      	mov	r4, r0
   2cc6c:	bb40      	cbnz	r0, 2ccc0 <att_mtu_req+0x6a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cc6e:	68db      	ldr	r3, [r3, #12]
   2cc70:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cc72:	2f16      	cmp	r7, #22
   2cc74:	d926      	bls.n	2ccc4 <att_mtu_req+0x6e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cc76:	2202      	movs	r2, #2
   2cc78:	4630      	mov	r0, r6
   2cc7a:	f7ea fa27 	bl	170cc <bt_att_create_pdu>
	if (!pdu) {
   2cc7e:	4680      	mov	r8, r0
   2cc80:	b310      	cbz	r0, 2ccc8 <att_mtu_req+0x72>
	return net_buf_simple_add(&buf->b, len);
   2cc82:	2102      	movs	r1, #2
   2cc84:	300c      	adds	r0, #12
   2cc86:	f7ed f8cb 	bl	19e20 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cc8a:	2364      	movs	r3, #100	; 0x64
   2cc8c:	7044      	strb	r4, [r0, #1]
   2cc8e:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu);
   2cc90:	4641      	mov	r1, r8
   2cc92:	4628      	mov	r0, r5
   2cc94:	f7ff fd5b 	bl	2c74e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cc98:	2f64      	cmp	r7, #100	; 0x64
   2cc9a:	bf28      	it	cs
   2cc9c:	2764      	movcs	r7, #100	; 0x64
   2cc9e:	3604      	adds	r6, #4
   2cca0:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cca2:	856f      	strh	r7, [r5, #42]	; 0x2a
   2cca4:	e8d6 3fef 	ldaex	r3, [r6]
   2cca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2ccac:	e8c6 3fe2 	stlex	r2, r3, [r6]
   2ccb0:	2a00      	cmp	r2, #0
   2ccb2:	d1f7      	bne.n	2cca4 <att_mtu_req+0x4e>
	att_chan_mtu_updated(chan);
   2ccb4:	4628      	mov	r0, r5
   2ccb6:	f7ff fc47 	bl	2c548 <att_chan_mtu_updated>
	return 0;
   2ccba:	4620      	mov	r0, r4
}
   2ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2ccc0:	2006      	movs	r0, #6
   2ccc2:	e7fb      	b.n	2ccbc <att_mtu_req+0x66>
		return BT_ATT_ERR_INVALID_PDU;
   2ccc4:	2004      	movs	r0, #4
   2ccc6:	e7f9      	b.n	2ccbc <att_mtu_req+0x66>
		return BT_ATT_ERR_UNLIKELY;
   2ccc8:	200e      	movs	r0, #14
   2ccca:	e7f7      	b.n	2ccbc <att_mtu_req+0x66>

0002cccc <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2cccc:	8a0a      	ldrh	r2, [r1, #16]
   2ccce:	2300      	movs	r3, #0
   2ccd0:	68c9      	ldr	r1, [r1, #12]
   2ccd2:	f7ea bd0d 	b.w	176f0 <att_handle_rsp>

0002ccd6 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   2ccd6:	f7ff bff9 	b.w	2cccc <att_handle_find_info_rsp>

0002ccda <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   2ccda:	f7ff bff7 	b.w	2cccc <att_handle_find_info_rsp>

0002ccde <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   2ccde:	f7ff bff5 	b.w	2cccc <att_handle_find_info_rsp>

0002cce2 <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   2cce2:	f7ff bff3 	b.w	2cccc <att_handle_find_info_rsp>

0002cce6 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   2cce6:	f7ff bff1 	b.w	2cccc <att_handle_find_info_rsp>

0002ccea <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   2ccea:	f7ff bfef 	b.w	2cccc <att_handle_find_info_rsp>

0002ccee <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   2ccee:	f7ff bfed 	b.w	2cccc <att_handle_find_info_rsp>

0002ccf2 <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   2ccf2:	f7ff bfeb 	b.w	2cccc <att_handle_find_info_rsp>

0002ccf6 <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   2ccf6:	f7ff bfe9 	b.w	2cccc <att_handle_find_info_rsp>

0002ccfa <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   2ccfa:	f7ff bfe7 	b.w	2cccc <att_handle_find_info_rsp>

0002ccfe <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   2ccfe:	f7ff bfe5 	b.w	2cccc <att_handle_find_info_rsp>

0002cd02 <att_mtu_rsp>:
{
   2cd02:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2cd04:	68ce      	ldr	r6, [r1, #12]
{
   2cd06:	4604      	mov	r4, r0
	mtu = sys_le16_to_cpu(rsp->mtu);
   2cd08:	8833      	ldrh	r3, [r6, #0]
{
   2cd0a:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2cd0c:	2b16      	cmp	r3, #22
   2cd0e:	d806      	bhi.n	2cd1e <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2cd10:	2200      	movs	r2, #0
   2cd12:	2304      	movs	r3, #4
   2cd14:	4611      	mov	r1, r2
}
   2cd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2cd1a:	f7ea bce9 	b.w	176f0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2cd1e:	2b64      	cmp	r3, #100	; 0x64
   2cd20:	bf28      	it	cs
   2cd22:	2364      	movcs	r3, #100	; 0x64
   2cd24:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cd26:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2cd28:	f7ff fc0e 	bl	2c548 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2cd2c:	2300      	movs	r3, #0
   2cd2e:	4631      	mov	r1, r6
   2cd30:	4620      	mov	r0, r4
   2cd32:	8a2a      	ldrh	r2, [r5, #16]
   2cd34:	e7ef      	b.n	2cd16 <att_mtu_rsp+0x14>

0002cd36 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2cd36:	b510      	push	{r4, lr}
   2cd38:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2cd3a:	f7e9 fe8d 	bl	16a58 <att_get>
	if (!att) {
   2cd3e:	b190      	cbz	r0, 2cd66 <bt_att_find_req_by_user_data+0x30>
	return list->head;
   2cd40:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2cd42:	b143      	cbz	r3, 2cd56 <bt_att_find_req_by_user_data+0x20>
		if (chan->req->user_data == user_data) {
   2cd44:	f853 2c50 	ldr.w	r2, [r3, #-80]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2cd48:	3b88      	subs	r3, #136	; 0x88
		if (chan->req->user_data == user_data) {
   2cd4a:	68d1      	ldr	r1, [r2, #12]
   2cd4c:	42a1      	cmp	r1, r4
   2cd4e:	d009      	beq.n	2cd64 <bt_att_find_req_by_user_data+0x2e>
	return node->next;
   2cd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2cd54:	e7f5      	b.n	2cd42 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2cd56:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2cd58:	b128      	cbz	r0, 2cd66 <bt_att_find_req_by_user_data+0x30>
		if (req->user_data == user_data) {
   2cd5a:	68c3      	ldr	r3, [r0, #12]
   2cd5c:	42a3      	cmp	r3, r4
   2cd5e:	d002      	beq.n	2cd66 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2cd60:	6800      	ldr	r0, [r0, #0]
   2cd62:	e7f9      	b.n	2cd58 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2cd64:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2cd66:	bd10      	pop	{r4, pc}

0002cd68 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2cd68:	2001      	movs	r0, #1
   2cd6a:	4770      	bx	lr

0002cd6c <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2cd6c:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   2cd6e:	f7e9 fe73 	bl	16a58 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2cd72:	b150      	cbz	r0, 2cd8a <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   2cd74:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2cd76:	b144      	cbz	r4, 2cd8a <bt_att_clear_out_of_sync_sent+0x1e>
   2cd78:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   2cd7a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2cd7e:	2105      	movs	r1, #5
   2cd80:	f7ff fd97 	bl	2c8b2 <atomic_clear_bit>
	return node->next;
   2cd84:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   2cd88:	e7f5      	b.n	2cd76 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   2cd8a:	bd10      	pop	{r4, pc}

0002cd8c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2cd8c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2cd8e:	2104      	movs	r1, #4
   2cd90:	f7ff fb8d 	bl	2c4ae <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2cd94:	b128      	cbz	r0, 2cda2 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2cd96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2cd9a:	2105      	movs	r1, #5
   2cd9c:	3030      	adds	r0, #48	; 0x30
   2cd9e:	f7ff bbb4 	b.w	2c50a <atomic_test_bit>
}
   2cda2:	bd08      	pop	{r3, pc}

0002cda4 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2cda4:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2cda6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2cdaa:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2cdac:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2cdae:	8082      	strh	r2, [r0, #4]
}
   2cdb0:	4770      	bx	lr

0002cdb2 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2cdb2:	6010      	str	r0, [r2, #0]
}
   2cdb4:	2000      	movs	r0, #0
   2cdb6:	4770      	bx	lr

0002cdb8 <gatt_ccc_changed>:
{
   2cdb8:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2cdba:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2cdbc:	895a      	ldrh	r2, [r3, #10]
   2cdbe:	428a      	cmp	r2, r1
   2cdc0:	d003      	beq.n	2cdca <gatt_ccc_changed+0x12>
		ccc->value = value;
   2cdc2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2cdc4:	68db      	ldr	r3, [r3, #12]
   2cdc6:	b103      	cbz	r3, 2cdca <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2cdc8:	4718      	bx	r3
}
   2cdca:	4770      	bx	lr

0002cdcc <gatt_indicate_rsp>:
{
   2cdcc:	b510      	push	{r4, lr}
   2cdce:	9c02      	ldr	r4, [sp, #8]
   2cdd0:	460a      	mov	r2, r1
	if (params->func) {
   2cdd2:	68a3      	ldr	r3, [r4, #8]
   2cdd4:	b10b      	cbz	r3, 2cdda <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2cdd6:	4621      	mov	r1, r4
   2cdd8:	4798      	blx	r3
	params->_ref--;
   2cdda:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2cddc:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2cdde:	3b01      	subs	r3, #1
   2cde0:	b2db      	uxtb	r3, r3
   2cde2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2cde4:	b122      	cbz	r2, 2cdf0 <gatt_indicate_rsp+0x24>
   2cde6:	b91b      	cbnz	r3, 2cdf0 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2cde8:	4620      	mov	r0, r4
}
   2cdea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2cdee:	4710      	bx	r2
}
   2cdf0:	bd10      	pop	{r4, pc}

0002cdf2 <match_uuid>:
	data->attr = attr;
   2cdf2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2cdf4:	8091      	strh	r1, [r2, #4]
}
   2cdf6:	2000      	movs	r0, #0
   2cdf8:	4770      	bx	lr

0002cdfa <gen_hash_m>:
{
   2cdfa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2cdfc:	6807      	ldr	r7, [r0, #0]
{
   2cdfe:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2ce00:	783d      	ldrb	r5, [r7, #0]
{
   2ce02:	4614      	mov	r4, r2
   2ce04:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2ce06:	b9dd      	cbnz	r5, 2ce40 <gen_hash_m+0x46>
	switch (u16->val) {
   2ce08:	887b      	ldrh	r3, [r7, #2]
   2ce0a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2ce0e:	d004      	beq.n	2ce1a <gen_hash_m+0x20>
   2ce10:	d810      	bhi.n	2ce34 <gen_hash_m+0x3a>
   2ce12:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2ce16:	2b03      	cmp	r3, #3
   2ce18:	d812      	bhi.n	2ce40 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2ce1a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce1e:	2202      	movs	r2, #2
   2ce20:	4620      	mov	r0, r4
   2ce22:	f10d 010a 	add.w	r1, sp, #10
   2ce26:	f7fe fd73 	bl	2b910 <tc_cmac_update>
   2ce2a:	b968      	cbnz	r0, 2ce48 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2ce2c:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2ce30:	65a2      	str	r2, [r4, #88]	; 0x58
   2ce32:	e006      	b.n	2ce42 <gen_hash_m+0x48>
	switch (u16->val) {
   2ce34:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2ce38:	33ff      	adds	r3, #255	; 0xff
   2ce3a:	b29b      	uxth	r3, r3
   2ce3c:	2b04      	cmp	r3, #4
   2ce3e:	d91e      	bls.n	2ce7e <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2ce40:	2501      	movs	r5, #1
}
   2ce42:	4628      	mov	r0, r5
   2ce44:	b009      	add	sp, #36	; 0x24
   2ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2ce48:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce4a:	2202      	movs	r2, #2
   2ce4c:	4620      	mov	r0, r4
   2ce4e:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2ce52:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce56:	f7fe fd5b 	bl	2b910 <tc_cmac_update>
   2ce5a:	2800      	cmp	r0, #0
   2ce5c:	d0e6      	beq.n	2ce2c <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2ce5e:	2000      	movs	r0, #0
   2ce60:	9000      	str	r0, [sp, #0]
   2ce62:	aa03      	add	r2, sp, #12
   2ce64:	2313      	movs	r3, #19
   2ce66:	4631      	mov	r1, r6
   2ce68:	6877      	ldr	r7, [r6, #4]
   2ce6a:	47b8      	blx	r7
		if (len < 0) {
   2ce6c:	1e02      	subs	r2, r0, #0
   2ce6e:	dbdf      	blt.n	2ce30 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2ce70:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce72:	4620      	mov	r0, r4
   2ce74:	f7fe fd4c 	bl	2b910 <tc_cmac_update>
   2ce78:	2800      	cmp	r0, #0
   2ce7a:	d1e1      	bne.n	2ce40 <gen_hash_m+0x46>
   2ce7c:	e7d6      	b.n	2ce2c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2ce7e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce82:	2202      	movs	r2, #2
   2ce84:	4620      	mov	r0, r4
   2ce86:	f10d 010a 	add.w	r1, sp, #10
   2ce8a:	f7fe fd41 	bl	2b910 <tc_cmac_update>
   2ce8e:	2800      	cmp	r0, #0
   2ce90:	d0cc      	beq.n	2ce2c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2ce92:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce94:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2ce96:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce9a:	f10d 010a 	add.w	r1, sp, #10
   2ce9e:	e7e8      	b.n	2ce72 <gen_hash_m+0x78>

0002cea0 <bt_addr_le_eq>:
   2cea0:	2207      	movs	r2, #7
{
   2cea2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2cea4:	f003 fcbd 	bl	30822 <memcmp>
}
   2cea8:	fab0 f080 	clz	r0, r0
   2ceac:	0940      	lsrs	r0, r0, #5
   2ceae:	bd08      	pop	{r3, pc}

0002ceb0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ceb0:	e8d0 0faf 	lda	r0, [r0]
}
   2ceb4:	4770      	bx	lr

0002ceb6 <atomic_or>:
{
   2ceb6:	4603      	mov	r3, r0
   2ceb8:	b510      	push	{r4, lr}
}
   2ceba:	e8d3 0fef 	ldaex	r0, [r3]
   2cebe:	ea40 0201 	orr.w	r2, r0, r1
   2cec2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2cec6:	2c00      	cmp	r4, #0
   2cec8:	d1f7      	bne.n	2ceba <atomic_or+0x4>
   2ceca:	bd10      	pop	{r4, pc}

0002cecc <atomic_and>:
{
   2cecc:	4603      	mov	r3, r0
   2cece:	b510      	push	{r4, lr}
}
   2ced0:	e8d3 0fef 	ldaex	r0, [r3]
   2ced4:	ea00 0201 	and.w	r2, r0, r1
   2ced8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2cedc:	2c00      	cmp	r4, #0
   2cede:	d1f7      	bne.n	2ced0 <atomic_and+0x4>
   2cee0:	bd10      	pop	{r4, pc}

0002cee2 <read_included_uuid_encode>:
{
   2cee2:	b510      	push	{r4, lr}
   2cee4:	4614      	mov	r4, r2
   2cee6:	2102      	movs	r1, #2
   2cee8:	300c      	adds	r0, #12
   2ceea:	f7ec ff99 	bl	19e20 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2ceee:	8963      	ldrh	r3, [r4, #10]
   2cef0:	8003      	strh	r3, [r0, #0]
}
   2cef2:	2000      	movs	r0, #0
   2cef4:	bd10      	pop	{r4, pc}

0002cef6 <gatt_find_info_encode>:
{
   2cef6:	b510      	push	{r4, lr}
   2cef8:	4614      	mov	r4, r2
   2cefa:	2104      	movs	r1, #4
   2cefc:	300c      	adds	r0, #12
   2cefe:	f7ec ff8f 	bl	19e20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2cf02:	8923      	ldrh	r3, [r4, #8]
   2cf04:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cf06:	89e3      	ldrh	r3, [r4, #14]
   2cf08:	8043      	strh	r3, [r0, #2]
}
   2cf0a:	2000      	movs	r0, #0
   2cf0c:	bd10      	pop	{r4, pc}

0002cf0e <gatt_read_group_encode>:
{
   2cf0e:	b538      	push	{r3, r4, r5, lr}
   2cf10:	4615      	mov	r5, r2
   2cf12:	f100 040c 	add.w	r4, r0, #12
   2cf16:	2104      	movs	r1, #4
   2cf18:	4620      	mov	r0, r4
   2cf1a:	f7ec ff81 	bl	19e20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2cf1e:	892b      	ldrh	r3, [r5, #8]
   2cf20:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cf22:	89eb      	ldrh	r3, [r5, #14]
   2cf24:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2cf26:	7c2b      	ldrb	r3, [r5, #16]
   2cf28:	b933      	cbnz	r3, 2cf38 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2cf2a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2cf2e:	4620      	mov	r0, r4
   2cf30:	f000 fb52 	bl	2d5d8 <net_buf_simple_add_le16>
}
   2cf34:	2000      	movs	r0, #0
   2cf36:	bd38      	pop	{r3, r4, r5, pc}
   2cf38:	f642 0101 	movw	r1, #10241	; 0x2801
   2cf3c:	e7f7      	b.n	2cf2e <gatt_read_group_encode+0x20>

0002cf3e <gatt_read_type_encode>:
{
   2cf3e:	b538      	push	{r3, r4, r5, lr}
   2cf40:	4615      	mov	r5, r2
	return net_buf_simple_add(&buf->b, len);
   2cf42:	f100 040c 	add.w	r4, r0, #12
   2cf46:	2104      	movs	r1, #4
   2cf48:	4620      	mov	r0, r4
   2cf4a:	f7ec ff69 	bl	19e20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2cf4e:	892b      	ldrh	r3, [r5, #8]
   2cf50:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cf52:	89eb      	ldrh	r3, [r5, #14]
   2cf54:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2cf56:	7c2b      	ldrb	r3, [r5, #16]
   2cf58:	2b02      	cmp	r3, #2
   2cf5a:	d004      	beq.n	2cf66 <gatt_read_type_encode+0x28>
   2cf5c:	2b03      	cmp	r3, #3
   2cf5e:	d009      	beq.n	2cf74 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2cf60:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2cf62:	8859      	ldrh	r1, [r3, #2]
   2cf64:	e001      	b.n	2cf6a <gatt_read_type_encode+0x2c>
   2cf66:	f642 0102 	movw	r1, #10242	; 0x2802
   2cf6a:	4620      	mov	r0, r4
   2cf6c:	f000 fb34 	bl	2d5d8 <net_buf_simple_add_le16>
}
   2cf70:	2000      	movs	r0, #0
   2cf72:	bd38      	pop	{r3, r4, r5, pc}
   2cf74:	f642 0103 	movw	r1, #10243	; 0x2803
   2cf78:	e7f7      	b.n	2cf6a <gatt_read_type_encode+0x2c>

0002cf7a <bt_addr_le_copy>:
   2cf7a:	680b      	ldr	r3, [r1, #0]
   2cf7c:	6003      	str	r3, [r0, #0]
   2cf7e:	888b      	ldrh	r3, [r1, #4]
   2cf80:	8083      	strh	r3, [r0, #4]
   2cf82:	798b      	ldrb	r3, [r1, #6]
   2cf84:	7183      	strb	r3, [r0, #6]
}
   2cf86:	4770      	bx	lr

0002cf88 <gatt_sub_remove>:
{
   2cf88:	b538      	push	{r3, r4, r5, lr}
   2cf8a:	460c      	mov	r4, r1
	if (params) {
   2cf8c:	4619      	mov	r1, r3
   2cf8e:	b16b      	cbz	r3, 2cfac <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2cf90:	f103 0518 	add.w	r5, r3, #24
   2cf94:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   2cf96:	b982      	cbnz	r2, 2cfba <gatt_sub_remove+0x32>
   2cf98:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2cf9a:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2cf9c:	4295      	cmp	r5, r2
   2cf9e:	d100      	bne.n	2cfa2 <gatt_sub_remove+0x1a>
	list->tail = node;
   2cfa0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2cfa2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2cfa4:	680d      	ldr	r5, [r1, #0]
   2cfa6:	461a      	mov	r2, r3
   2cfa8:	618b      	str	r3, [r1, #24]
   2cfaa:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2cfac:	68a3      	ldr	r3, [r4, #8]
   2cfae:	b953      	cbnz	r3, 2cfc6 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   2cfb0:	4620      	mov	r0, r4
}
   2cfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2cfb6:	f7ea bd99 	b.w	17aec <gatt_sub_free>
   2cfba:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cfbc:	68e3      	ldr	r3, [r4, #12]
   2cfbe:	429d      	cmp	r5, r3
	list->tail = node;
   2cfc0:	bf08      	it	eq
   2cfc2:	60e2      	streq	r2, [r4, #12]
}
   2cfc4:	e7ed      	b.n	2cfa2 <gatt_sub_remove+0x1a>
}
   2cfc6:	bd38      	pop	{r3, r4, r5, pc}

0002cfc8 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2cfc8:	2300      	movs	r3, #0
   2cfca:	6003      	str	r3, [r0, #0]
   2cfcc:	6043      	str	r3, [r0, #4]
   2cfce:	6083      	str	r3, [r0, #8]
}
   2cfd0:	4770      	bx	lr

0002cfd2 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2cfd2:	b538      	push	{r3, r4, r5, lr}
   2cfd4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2cfd8:	4615      	mov	r5, r2
	if (offset > value_len) {
   2cfda:	4294      	cmp	r4, r2
   2cfdc:	d30a      	bcc.n	2cff4 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2cfde:	1aa4      	subs	r4, r4, r2
   2cfe0:	428c      	cmp	r4, r1
   2cfe2:	bfa8      	it	ge
   2cfe4:	460c      	movge	r4, r1
   2cfe6:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cfe8:	4622      	mov	r2, r4
   2cfea:	1959      	adds	r1, r3, r5
   2cfec:	f003 fc29 	bl	30842 <memcpy>
}
   2cff0:	4620      	mov	r0, r4
   2cff2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2cff4:	f06f 0406 	mvn.w	r4, #6
   2cff8:	e7fa      	b.n	2cff0 <bt_gatt_attr_read.constprop.0+0x1e>

0002cffa <bt_gatt_attr_read_ccc>:
{
   2cffa:	b530      	push	{r4, r5, lr}
   2cffc:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2cffe:	68c9      	ldr	r1, [r1, #12]
{
   2d000:	4614      	mov	r4, r2
   2d002:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d004:	f7ea fd46 	bl	17a94 <find_ccc_cfg>
	if (cfg) {
   2d008:	b100      	cbz	r0, 2d00c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2d00a:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d00c:	2302      	movs	r3, #2
   2d00e:	f8ad 000e 	strh.w	r0, [sp, #14]
   2d012:	9300      	str	r3, [sp, #0]
   2d014:	4629      	mov	r1, r5
   2d016:	4620      	mov	r0, r4
   2d018:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d01c:	f10d 030e 	add.w	r3, sp, #14
   2d020:	f7ff ffd7 	bl	2cfd2 <bt_gatt_attr_read.constprop.0>
}
   2d024:	b005      	add	sp, #20
   2d026:	bd30      	pop	{r4, r5, pc}

0002d028 <bt_gatt_attr_read_service>:
{
   2d028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d02a:	460c      	mov	r4, r1
   2d02c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2d02e:	68e3      	ldr	r3, [r4, #12]
{
   2d030:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d032:	781c      	ldrb	r4, [r3, #0]
{
   2d034:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d038:	b13c      	cbz	r4, 2d04a <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d03a:	2410      	movs	r4, #16
   2d03c:	3301      	adds	r3, #1
   2d03e:	9406      	str	r4, [sp, #24]
}
   2d040:	b004      	add	sp, #16
   2d042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d046:	f7ff bfc4 	b.w	2cfd2 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d04a:	885b      	ldrh	r3, [r3, #2]
   2d04c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d050:	2302      	movs	r3, #2
   2d052:	9300      	str	r3, [sp, #0]
   2d054:	f10d 030e 	add.w	r3, sp, #14
   2d058:	f7ff ffbb 	bl	2cfd2 <bt_gatt_attr_read.constprop.0>
}
   2d05c:	b004      	add	sp, #16
   2d05e:	bd10      	pop	{r4, pc}

0002d060 <cf_read>:
{
   2d060:	b530      	push	{r4, r5, lr}
   2d062:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2d064:	2300      	movs	r3, #0
{
   2d066:	b085      	sub	sp, #20
   2d068:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2d06a:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2d06e:	f7ea fce7 	bl	17a40 <find_cf_cfg>
	if (cfg) {
   2d072:	b110      	cbz	r0, 2d07a <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2d074:	7a03      	ldrb	r3, [r0, #8]
   2d076:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d07a:	2301      	movs	r3, #1
   2d07c:	4629      	mov	r1, r5
   2d07e:	9300      	str	r3, [sp, #0]
   2d080:	4620      	mov	r0, r4
   2d082:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d086:	ab03      	add	r3, sp, #12
   2d088:	f7ff ffa3 	bl	2cfd2 <bt_gatt_attr_read.constprop.0>
}
   2d08c:	b005      	add	sp, #20
   2d08e:	bd30      	pop	{r4, r5, pc}

0002d090 <read_name>:
{
   2d090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d094:	4614      	mov	r4, r2
   2d096:	461d      	mov	r5, r3
   2d098:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2d09c:	f7e7 fab8 	bl	14610 <bt_get_name>
   2d0a0:	4606      	mov	r6, r0
				 strlen(name));
   2d0a2:	f7dc f8be 	bl	9222 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d0a6:	b280      	uxth	r0, r0
   2d0a8:	9006      	str	r0, [sp, #24]
   2d0aa:	4633      	mov	r3, r6
   2d0ac:	463a      	mov	r2, r7
   2d0ae:	4629      	mov	r1, r5
   2d0b0:	4620      	mov	r0, r4
}
   2d0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d0b6:	f7ff bf8c 	b.w	2cfd2 <bt_gatt_attr_read.constprop.0>

0002d0ba <read_appearance>:
{
   2d0ba:	b530      	push	{r4, r5, lr}
   2d0bc:	b085      	sub	sp, #20
   2d0be:	4614      	mov	r4, r2
   2d0c0:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d0c2:	f7ff f873 	bl	2c1ac <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d0c6:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d0c8:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d0cc:	9300      	str	r3, [sp, #0]
   2d0ce:	4629      	mov	r1, r5
   2d0d0:	4620      	mov	r0, r4
   2d0d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d0d6:	f10d 030e 	add.w	r3, sp, #14
   2d0da:	f7ff ff7a 	bl	2cfd2 <bt_gatt_attr_read.constprop.0>
}
   2d0de:	b005      	add	sp, #20
   2d0e0:	bd30      	pop	{r4, r5, pc}

0002d0e2 <z_log_msg_static_create.constprop.0>:
   2d0e2:	2300      	movs	r3, #0
   2d0e4:	f7e2 bb84 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002d0e8 <sc_clear>:
{
   2d0e8:	b538      	push	{r3, r4, r5, lr}
   2d0ea:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2d0ec:	f100 0590 	add.w	r5, r0, #144	; 0x90
   2d0f0:	4629      	mov	r1, r5
   2d0f2:	7a00      	ldrb	r0, [r0, #8]
   2d0f4:	f7ff f85c 	bl	2c1b0 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2d0f8:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d0fa:	7a20      	ldrb	r0, [r4, #8]
   2d0fc:	f7ea fcb8 	bl	17a70 <find_sc_cfg>
		if (cfg) {
   2d100:	b118      	cbz	r0, 2d10a <sc_clear+0x22>
}
   2d102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2d106:	f7ff bf5f 	b.w	2cfc8 <clear_sc_cfg>
}
   2d10a:	bd38      	pop	{r3, r4, r5, pc}

0002d10c <gatt_find_type_encode>:
{
   2d10c:	b538      	push	{r3, r4, r5, lr}
   2d10e:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   2d110:	f100 050c 	add.w	r5, r0, #12
   2d114:	2106      	movs	r1, #6
   2d116:	4628      	mov	r0, r5
   2d118:	f7ec fe82 	bl	19e20 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d11c:	8923      	ldrh	r3, [r4, #8]
   2d11e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d120:	89e3      	ldrh	r3, [r4, #14]
   2d122:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d124:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   2d126:	2b00      	cmp	r3, #0
   2d128:	f642 0301 	movw	r3, #10241	; 0x2801
   2d12c:	bf08      	it	eq
   2d12e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2d132:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2d134:	6821      	ldr	r1, [r4, #0]
   2d136:	780b      	ldrb	r3, [r1, #0]
   2d138:	b11b      	cbz	r3, 2d142 <gatt_find_type_encode+0x36>
   2d13a:	2b02      	cmp	r3, #2
   2d13c:	d006      	beq.n	2d14c <gatt_find_type_encode+0x40>
}
   2d13e:	2000      	movs	r0, #0
   2d140:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2d142:	4628      	mov	r0, r5
   2d144:	8849      	ldrh	r1, [r1, #2]
   2d146:	f000 fa47 	bl	2d5d8 <net_buf_simple_add_le16>
}
   2d14a:	e7f8      	b.n	2d13e <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d14c:	2210      	movs	r2, #16
   2d14e:	4628      	mov	r0, r5
   2d150:	3101      	adds	r1, #1
   2d152:	f000 fa2e 	bl	2d5b2 <net_buf_simple_add_mem>
   2d156:	e7f2      	b.n	2d13e <gatt_find_type_encode+0x32>

0002d158 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d158:	2a02      	cmp	r2, #2
{
   2d15a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d15c:	d108      	bne.n	2d170 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d15e:	2300      	movs	r3, #0
   2d160:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d164:	461a      	mov	r2, r3
   2d166:	7a00      	ldrb	r0, [r0, #8]
   2d168:	f7ea fdb8 	bl	17cdc <sc_save>
}
   2d16c:	2002      	movs	r0, #2
   2d16e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d170:	f7ff ffba 	bl	2d0e8 <sc_clear>
   2d174:	e7fa      	b.n	2d16c <sc_ccc_cfg_write+0x14>

0002d176 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d17a:	4606      	mov	r6, r0
   2d17c:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d17e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2d182:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d184:	4617      	mov	r7, r2
   2d186:	4698      	mov	r8, r3
   2d188:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d18c:	f7ea fa74 	bl	17678 <bt_att_req_alloc>
	if (!req) {
   2d190:	4604      	mov	r4, r0
   2d192:	b160      	cbz	r0, 2d1ae <gatt_req_send.constprop.0+0x38>
	req->func = func;
   2d194:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2d196:	60c7      	str	r7, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   2d198:	464a      	mov	r2, r9
   2d19a:	4630      	mov	r0, r6
   2d19c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2d1a0:	f7e9 ff94 	bl	170cc <bt_att_create_pdu>
   2d1a4:	4605      	mov	r5, r0
	if (!buf) {
   2d1a6:	b938      	cbnz	r0, 2d1b8 <gatt_req_send.constprop.0+0x42>
		bt_att_req_free(req);
   2d1a8:	4620      	mov	r0, r4
   2d1aa:	f7ea fa89 	bl	176c0 <bt_att_req_free>
		return -ENOMEM;
   2d1ae:	f06f 050b 	mvn.w	r5, #11
}
   2d1b2:	4628      	mov	r0, r5
   2d1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2d1b8:	2200      	movs	r2, #0
   2d1ba:	2301      	movs	r3, #1
   2d1bc:	4611      	mov	r1, r2
   2d1be:	f7ff fdf1 	bl	2cda4 <bt_att_set_tx_meta_data>
	err = encode(buf, len, params);
   2d1c2:	4628      	mov	r0, r5
	req->buf = buf;
   2d1c4:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   2d1c6:	463a      	mov	r2, r7
   2d1c8:	4649      	mov	r1, r9
   2d1ca:	47c0      	blx	r8
	if (err) {
   2d1cc:	4605      	mov	r5, r0
   2d1ce:	b118      	cbz	r0, 2d1d8 <gatt_req_send.constprop.0+0x62>
		bt_att_req_free(req);
   2d1d0:	4620      	mov	r0, r4
   2d1d2:	f7ea fa75 	bl	176c0 <bt_att_req_free>
   2d1d6:	e7ec      	b.n	2d1b2 <gatt_req_send.constprop.0+0x3c>
	err = bt_att_req_send(conn, req);
   2d1d8:	4621      	mov	r1, r4
   2d1da:	4630      	mov	r0, r6
   2d1dc:	f7ea fbd0 	bl	17980 <bt_att_req_send>
	if (err) {
   2d1e0:	4605      	mov	r5, r0
   2d1e2:	2800      	cmp	r0, #0
   2d1e4:	d0e5      	beq.n	2d1b2 <gatt_req_send.constprop.0+0x3c>
   2d1e6:	e7f3      	b.n	2d1d0 <gatt_req_send.constprop.0+0x5a>

0002d1e8 <gatt_write_ccc_buf>:
{
   2d1e8:	b538      	push	{r3, r4, r5, lr}
   2d1ea:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   2d1ec:	f100 050c 	add.w	r5, r0, #12
   2d1f0:	2102      	movs	r1, #2
   2d1f2:	4628      	mov	r0, r5
   2d1f4:	f7ec fe14 	bl	19e20 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2d1f8:	89e3      	ldrh	r3, [r4, #14]
   2d1fa:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2d1fc:	8a21      	ldrh	r1, [r4, #16]
   2d1fe:	4628      	mov	r0, r5
   2d200:	f000 f9ea 	bl	2d5d8 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d204:	2104      	movs	r1, #4
   2d206:	f104 0014 	add.w	r0, r4, #20
   2d20a:	f7ff fe54 	bl	2ceb6 <atomic_or>
}
   2d20e:	2000      	movs	r0, #0
   2d210:	bd38      	pop	{r3, r4, r5, pc}

0002d212 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d212:	2101      	movs	r1, #1
   2d214:	300c      	adds	r0, #12
   2d216:	f7ff be4e 	b.w	2ceb6 <atomic_or>

0002d21a <sc_restore_rsp>:
{
   2d21a:	b538      	push	{r3, r4, r5, lr}
   2d21c:	4604      	mov	r4, r0
   2d21e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d220:	f7ff fda2 	bl	2cd68 <bt_att_fixed_chan_only>
   2d224:	b140      	cbz	r0, 2d238 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   2d226:	4620      	mov	r0, r4
   2d228:	f7ea fc0a 	bl	17a40 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d22c:	b120      	cbz	r0, 2d238 <sc_restore_rsp+0x1e>
   2d22e:	7a03      	ldrb	r3, [r0, #8]
   2d230:	07db      	lsls	r3, r3, #31
   2d232:	d501      	bpl.n	2d238 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   2d234:	f7ff ffed 	bl	2d212 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d238:	b935      	cbnz	r5, 2d248 <sc_restore_rsp+0x2e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d23a:	7a20      	ldrb	r0, [r4, #8]
   2d23c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d240:	f7ea fc16 	bl	17a70 <find_sc_cfg>
		if (sc_cfg) {
   2d244:	b100      	cbz	r0, 2d248 <sc_restore_rsp+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2d246:	6085      	str	r5, [r0, #8]
}
   2d248:	bd38      	pop	{r3, r4, r5, pc}

0002d24a <bt_gatt_attr_value_handle>:
{
   2d24a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d24c:	4604      	mov	r4, r0
   2d24e:	b910      	cbnz	r0, 2d256 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d250:	2000      	movs	r0, #0
}
   2d252:	b002      	add	sp, #8
   2d254:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d256:	2300      	movs	r3, #0
   2d258:	f88d 3004 	strb.w	r3, [sp, #4]
   2d25c:	f642 0303 	movw	r3, #10243	; 0x2803
   2d260:	6800      	ldr	r0, [r0, #0]
   2d262:	a901      	add	r1, sp, #4
   2d264:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d268:	f7fe fe7e 	bl	2bf68 <bt_uuid_cmp>
   2d26c:	2800      	cmp	r0, #0
   2d26e:	d1ef      	bne.n	2d250 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d270:	68e3      	ldr	r3, [r4, #12]
   2d272:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d274:	2800      	cmp	r0, #0
   2d276:	d1ec      	bne.n	2d252 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d278:	4620      	mov	r0, r4
   2d27a:	f7ea feb3 	bl	17fe4 <bt_gatt_attr_get_handle>
   2d27e:	3001      	adds	r0, #1
   2d280:	b280      	uxth	r0, r0
	return handle;
   2d282:	e7e6      	b.n	2d252 <bt_gatt_attr_value_handle+0x8>

0002d284 <bt_gatt_attr_read_chrc>:
{
   2d284:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d286:	68cc      	ldr	r4, [r1, #12]
{
   2d288:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2d28a:	79a3      	ldrb	r3, [r4, #6]
{
   2d28c:	b088      	sub	sp, #32
   2d28e:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2d290:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2d294:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d296:	f7ff ffd8 	bl	2d24a <bt_gatt_attr_value_handle>
   2d29a:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d29e:	6824      	ldr	r4, [r4, #0]
   2d2a0:	7823      	ldrb	r3, [r4, #0]
   2d2a2:	b96b      	cbnz	r3, 2d2c0 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d2a4:	8863      	ldrh	r3, [r4, #2]
   2d2a6:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2d2aa:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d2ac:	9300      	str	r3, [sp, #0]
   2d2ae:	4631      	mov	r1, r6
   2d2b0:	4628      	mov	r0, r5
   2d2b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2d2b6:	ab03      	add	r3, sp, #12
   2d2b8:	f7ff fe8b 	bl	2cfd2 <bt_gatt_attr_read.constprop.0>
}
   2d2bc:	b008      	add	sp, #32
   2d2be:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d2c0:	1c63      	adds	r3, r4, #1
   2d2c2:	f10d 020f 	add.w	r2, sp, #15
   2d2c6:	3411      	adds	r4, #17
   2d2c8:	f853 1b04 	ldr.w	r1, [r3], #4
   2d2cc:	42a3      	cmp	r3, r4
   2d2ce:	f842 1b04 	str.w	r1, [r2], #4
   2d2d2:	d1f9      	bne.n	2d2c8 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2d2d4:	2313      	movs	r3, #19
   2d2d6:	e7e9      	b.n	2d2ac <bt_gatt_attr_read_chrc+0x28>

0002d2d8 <bt_gatt_foreach_attr>:
{
   2d2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d2da:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d2de:	2300      	movs	r3, #0
   2d2e0:	461a      	mov	r2, r3
   2d2e2:	9300      	str	r3, [sp, #0]
   2d2e4:	f7ea fec6 	bl	18074 <bt_gatt_foreach_attr_type>
}
   2d2e8:	b005      	add	sp, #20
   2d2ea:	f85d fb04 	ldr.w	pc, [sp], #4

0002d2ee <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2d2ee:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d2f2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2d2f4:	d004      	beq.n	2d300 <bt_gatt_check_perm+0x12>
   2d2f6:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d2fa:	d010      	beq.n	2d31e <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d2fc:	6848      	ldr	r0, [r1, #4]
   2d2fe:	b170      	cbz	r0, 2d31e <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d300:	f012 0f02 	tst.w	r2, #2
   2d304:	d004      	beq.n	2d310 <bt_gatt_check_perm+0x22>
   2d306:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d30a:	d00a      	beq.n	2d322 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d30c:	6889      	ldr	r1, [r1, #8]
   2d30e:	b141      	cbz	r1, 2d322 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   2d310:	401a      	ands	r2, r3
	return 0;
   2d312:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   2d316:	bf14      	ite	ne
   2d318:	2005      	movne	r0, #5
   2d31a:	2000      	moveq	r0, #0
   2d31c:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d31e:	2002      	movs	r0, #2
   2d320:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d322:	2003      	movs	r0, #3
}
   2d324:	4770      	bx	lr

0002d326 <gatt_discover_next>:
{
   2d326:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   2d328:	460b      	mov	r3, r1
{
   2d32a:	4605      	mov	r5, r0
   2d32c:	4614      	mov	r4, r2
	if (!last_handle)
   2d32e:	b929      	cbnz	r1, 2d33c <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   2d330:	4621      	mov	r1, r4
   2d332:	4628      	mov	r0, r5
   2d334:	f7eb fb94 	bl	18a60 <bt_gatt_discover>
   2d338:	b928      	cbnz	r0, 2d346 <gatt_discover_next+0x20>
}
   2d33a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2d33c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d340:	4291      	cmp	r1, r2
   2d342:	d107      	bne.n	2d354 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   2d344:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2d346:	4622      	mov	r2, r4
   2d348:	4628      	mov	r0, r5
   2d34a:	6863      	ldr	r3, [r4, #4]
   2d34c:	2100      	movs	r1, #0
}
   2d34e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2d352:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2d354:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2d356:	3301      	adds	r3, #1
   2d358:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2d35a:	429a      	cmp	r2, r3
		params->start_handle++;
   2d35c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2d35e:	d2e7      	bcs.n	2d330 <gatt_discover_next+0xa>
   2d360:	e7f1      	b.n	2d346 <gatt_discover_next+0x20>

0002d362 <gatt_find_type_rsp>:
{
   2d362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d366:	b089      	sub	sp, #36	; 0x24
   2d368:	4606      	mov	r6, r0
   2d36a:	4614      	mov	r4, r2
   2d36c:	9f12      	ldr	r7, [sp, #72]	; 0x48
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2d36e:	b911      	cbnz	r1, 2d376 <gatt_find_type_rsp+0x14>
   2d370:	f013 0803 	ands.w	r8, r3, #3
   2d374:	d007      	beq.n	2d386 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   2d376:	463a      	mov	r2, r7
   2d378:	2100      	movs	r1, #0
   2d37a:	4630      	mov	r0, r6
   2d37c:	687b      	ldr	r3, [r7, #4]
}
   2d37e:	b009      	add	sp, #36	; 0x24
   2d380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   2d384:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d386:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d388:	f642 0a01 	movw	sl, #10241	; 0x2801
   2d38c:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2d390:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   2d394:	42ac      	cmp	r4, r5
   2d396:	d107      	bne.n	2d3a8 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2d398:	463a      	mov	r2, r7
   2d39a:	4641      	mov	r1, r8
   2d39c:	4630      	mov	r0, r6
}
   2d39e:	b009      	add	sp, #36	; 0x24
   2d3a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   2d3a4:	f7ff bfbf 	b.w	2d326 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d3a8:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d3aa:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d3ac:	2a00      	cmp	r2, #0
   2d3ae:	bf14      	ite	ne
   2d3b0:	4652      	movne	r2, sl
   2d3b2:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   2d3b6:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   2d3ba:	2210      	movs	r2, #16
		value.end_handle = end_handle;
   2d3bc:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d3c0:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2d3c4:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2d3c6:	f8b4 b000 	ldrh.w	fp, [r4]
		attr = (struct bt_gatt_attr) {
   2d3ca:	2100      	movs	r1, #0
   2d3cc:	eb0d 0002 	add.w	r0, sp, r2
		value.uuid = params->uuid;
   2d3d0:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d3d2:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   2d3d6:	f003 fa54 	bl	30882 <memset>
   2d3da:	ab01      	add	r3, sp, #4
   2d3dc:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d3de:	463a      	mov	r2, r7
   2d3e0:	4630      	mov	r0, r6
   2d3e2:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   2d3e4:	f8cd d00c 	str.w	sp, [sp, #12]
   2d3e8:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d3ec:	a903      	add	r1, sp, #12
   2d3ee:	4798      	blx	r3
   2d3f0:	3404      	adds	r4, #4
   2d3f2:	2800      	cmp	r0, #0
   2d3f4:	d1ce      	bne.n	2d394 <gatt_find_type_rsp+0x32>
}
   2d3f6:	b009      	add	sp, #36	; 0x24
   2d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d3fc <bt_gatt_cancel>:
{
   2d3fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d3fe:	4604      	mov	r4, r0
   2d400:	460d      	mov	r5, r1
	k_sched_lock();
   2d402:	f7f8 fedd 	bl	261c0 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2d406:	4629      	mov	r1, r5
   2d408:	4620      	mov	r0, r4
   2d40a:	f7ff fc94 	bl	2cd36 <bt_att_find_req_by_user_data>
	if (req) {
   2d40e:	4601      	mov	r1, r0
   2d410:	b920      	cbnz	r0, 2d41c <bt_gatt_cancel+0x20>
}
   2d412:	b002      	add	sp, #8
   2d414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2d418:	f7f8 bf3e 	b.w	26298 <k_sched_unlock>
		func = req->func;
   2d41c:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2d41e:	4620      	mov	r0, r4
   2d420:	f7ea fae4 	bl	179ec <bt_att_req_cancel>
	k_sched_unlock();
   2d424:	f7f8 ff38 	bl	26298 <k_sched_unlock>
	if (func) {
   2d428:	b12e      	cbz	r6, 2d436 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2d42a:	2300      	movs	r3, #0
   2d42c:	210e      	movs	r1, #14
   2d42e:	461a      	mov	r2, r3
   2d430:	4620      	mov	r0, r4
   2d432:	9500      	str	r5, [sp, #0]
   2d434:	47b0      	blx	r6
}
   2d436:	b002      	add	sp, #8
   2d438:	bd70      	pop	{r4, r5, r6, pc}

0002d43a <bt_gatt_notification>:
{
   2d43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d43e:	4680      	mov	r8, r0
   2d440:	460e      	mov	r6, r1
   2d442:	4691      	mov	r9, r2
   2d444:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2d446:	f7ea fb39 	bl	17abc <gatt_sub_find>
	if (!sub) {
   2d44a:	b300      	cbz	r0, 2d48e <bt_gatt_notification+0x54>
	return list->head;
   2d44c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d44e:	b1f4      	cbz	r4, 2d48e <bt_gatt_notification+0x54>
	return node->next;
   2d450:	6825      	ldr	r5, [r4, #0]
   2d452:	b105      	cbz	r5, 2d456 <bt_gatt_notification+0x1c>
   2d454:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   2d456:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   2d45a:	42b3      	cmp	r3, r6
   2d45c:	d114      	bne.n	2d488 <bt_gatt_notification+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d45e:	3c18      	subs	r4, #24
   2d460:	e007      	b.n	2d472 <bt_gatt_notification+0x38>
   2d462:	462c      	mov	r4, r5
   2d464:	69ad      	ldr	r5, [r5, #24]
   2d466:	89a3      	ldrh	r3, [r4, #12]
   2d468:	b19d      	cbz	r5, 2d492 <bt_gatt_notification+0x58>
		if (handle != params->value_handle) {
   2d46a:	42b3      	cmp	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d46c:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   2d470:	d1f7      	bne.n	2d462 <bt_gatt_notification+0x28>
			if (params->notify(conn, params, data, length) ==
   2d472:	4653      	mov	r3, sl
   2d474:	464a      	mov	r2, r9
   2d476:	4621      	mov	r1, r4
   2d478:	4640      	mov	r0, r8
   2d47a:	6827      	ldr	r7, [r4, #0]
   2d47c:	47b8      	blx	r7
   2d47e:	b918      	cbnz	r0, 2d488 <bt_gatt_notification+0x4e>
				bt_gatt_unsubscribe(conn, params);
   2d480:	4621      	mov	r1, r4
   2d482:	4640      	mov	r0, r8
   2d484:	f7ec f84c 	bl	19520 <bt_gatt_unsubscribe>
   2d488:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d48a:	2d00      	cmp	r5, #0
   2d48c:	d1ea      	bne.n	2d464 <bt_gatt_notification+0x2a>
}
   2d48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   2d492:	42b3      	cmp	r3, r6
   2d494:	d0ed      	beq.n	2d472 <bt_gatt_notification+0x38>
   2d496:	e7fa      	b.n	2d48e <bt_gatt_notification+0x54>

0002d498 <bt_gatt_change_aware>:
{
   2d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d49c:	4605      	mov	r5, r0
   2d49e:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2d4a0:	f7ea face 	bl	17a40 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d4a4:	4604      	mov	r4, r0
   2d4a6:	b1d8      	cbz	r0, 2d4e0 <bt_gatt_change_aware+0x48>
   2d4a8:	7a03      	ldrb	r3, [r0, #8]
   2d4aa:	07db      	lsls	r3, r3, #31
   2d4ac:	d518      	bpl.n	2d4e0 <bt_gatt_change_aware+0x48>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d4ae:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d4b2:	4638      	mov	r0, r7
   2d4b4:	f7ff fcfc 	bl	2ceb0 <atomic_get>
   2d4b8:	f010 0601 	ands.w	r6, r0, #1
   2d4bc:	d110      	bne.n	2d4e0 <bt_gatt_change_aware+0x48>
	if (!req) {
   2d4be:	f1b8 0f00 	cmp.w	r8, #0
   2d4c2:	d00e      	beq.n	2d4e2 <bt_gatt_change_aware+0x4a>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4c4:	f06f 0102 	mvn.w	r1, #2
   2d4c8:	4638      	mov	r0, r7
   2d4ca:	f7ff fcff 	bl	2cecc <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4ce:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2d4d2:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4d4:	d008      	beq.n	2d4e8 <bt_gatt_change_aware+0x50>
		bt_att_clear_out_of_sync_sent(conn);
   2d4d6:	f7ff fc49 	bl	2cd6c <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   2d4da:	4620      	mov	r0, r4
   2d4dc:	f7ff fe99 	bl	2d212 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   2d4e0:	2601      	movs	r6, #1
}
   2d4e2:	4630      	mov	r0, r6
   2d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d4e8:	f7ff fc3e 	bl	2cd68 <bt_att_fixed_chan_only>
   2d4ec:	2800      	cmp	r0, #0
   2d4ee:	d0f8      	beq.n	2d4e2 <bt_gatt_change_aware+0x4a>
   2d4f0:	4628      	mov	r0, r5
   2d4f2:	f7ff fc4b 	bl	2cd8c <bt_att_out_of_sync_sent_on_fixed>
   2d4f6:	2800      	cmp	r0, #0
   2d4f8:	d0f3      	beq.n	2d4e2 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4fa:	f06f 0102 	mvn.w	r1, #2
   2d4fe:	4638      	mov	r0, r7
   2d500:	f7ff fce4 	bl	2cecc <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2d504:	4628      	mov	r0, r5
   2d506:	e7e6      	b.n	2d4d6 <bt_gatt_change_aware+0x3e>

0002d508 <bt_smp_recv>:
{
   2d508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2d50a:	2100      	movs	r1, #0
   2d50c:	f04f 32ff 	mov.w	r2, #4294967295
   2d510:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2d514:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2d516:	4608      	mov	r0, r1
   2d518:	f7fe ff8f 	bl	2c43a <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   2d51c:	f100 060c 	add.w	r6, r0, #12
   2d520:	4604      	mov	r4, r0
   2d522:	2101      	movs	r1, #1
   2d524:	4630      	mov	r0, r6
   2d526:	f7ec fc7b 	bl	19e20 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2d52a:	2505      	movs	r5, #5
   2d52c:	2101      	movs	r1, #1
   2d52e:	7005      	strb	r5, [r0, #0]
   2d530:	4630      	mov	r0, r6
   2d532:	f7ec fc75 	bl	19e20 <net_buf_simple_add>
   2d536:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2d538:	7005      	strb	r5, [r0, #0]
   2d53a:	4622      	mov	r2, r4
   2d53c:	2106      	movs	r1, #6
   2d53e:	4638      	mov	r0, r7
   2d540:	9300      	str	r3, [sp, #0]
   2d542:	f7fe ff7d 	bl	2c440 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2d546:	b110      	cbz	r0, 2d54e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2d548:	4620      	mov	r0, r4
   2d54a:	f7ec fae3 	bl	19b14 <net_buf_unref>
}
   2d54e:	2000      	movs	r0, #0
   2d550:	b003      	add	sp, #12
   2d552:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d554 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2d554:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d558:	4770      	bx	lr

0002d55a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2d55a:	2000      	movs	r0, #0
   2d55c:	4770      	bx	lr

0002d55e <fixed_data_unref>:
}
   2d55e:	4770      	bx	lr

0002d560 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d560:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d562:	6849      	ldr	r1, [r1, #4]
   2d564:	6809      	ldr	r1, [r1, #0]
   2d566:	f7ec b9b9 	b.w	198dc <net_buf_alloc_len>

0002d56a <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2d56a:	f7f7 bda7 	b.w	250bc <z_impl_k_queue_get>

0002d56e <net_buf_simple_init_with_data>:
	buf->size  = size;
   2d56e:	b292      	uxth	r2, r2
	buf->__buf = data;
   2d570:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2d572:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2d574:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2d576:	8082      	strh	r2, [r0, #4]
}
   2d578:	4770      	bx	lr

0002d57a <net_buf_simple_pull_u8>:
{
   2d57a:	b510      	push	{r4, lr}
	val = buf->data[0];
   2d57c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   2d57e:	2101      	movs	r1, #1
	val = buf->data[0];
   2d580:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2d582:	f7ec fc11 	bl	19da8 <net_buf_simple_pull>
}
   2d586:	4620      	mov	r0, r4
   2d588:	bd10      	pop	{r4, pc}

0002d58a <net_buf_simple_pull_le16>:
{
   2d58a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d58c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d58e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d590:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d592:	f7ec fc09 	bl	19da8 <net_buf_simple_pull>
}
   2d596:	4620      	mov	r0, r4
   2d598:	bd10      	pop	{r4, pc}

0002d59a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2d59a:	6802      	ldr	r2, [r0, #0]
   2d59c:	6880      	ldr	r0, [r0, #8]
}
   2d59e:	1a10      	subs	r0, r2, r0
   2d5a0:	4770      	bx	lr

0002d5a2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d5a2:	8883      	ldrh	r3, [r0, #4]
   2d5a4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2d5a6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d5a8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2d5aa:	6803      	ldr	r3, [r0, #0]
   2d5ac:	1a5b      	subs	r3, r3, r1
}
   2d5ae:	1ad0      	subs	r0, r2, r3
   2d5b0:	4770      	bx	lr

0002d5b2 <net_buf_simple_add_mem>:
{
   2d5b2:	b538      	push	{r3, r4, r5, lr}
   2d5b4:	460d      	mov	r5, r1
   2d5b6:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d5b8:	4611      	mov	r1, r2
   2d5ba:	f7ec fc31 	bl	19e20 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d5be:	4622      	mov	r2, r4
   2d5c0:	4629      	mov	r1, r5
}
   2d5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d5c6:	f003 b93c 	b.w	30842 <memcpy>

0002d5ca <net_buf_simple_add_u8>:
{
   2d5ca:	b510      	push	{r4, lr}
   2d5cc:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2d5ce:	2101      	movs	r1, #1
   2d5d0:	f7ec fc26 	bl	19e20 <net_buf_simple_add>
	*u8 = val;
   2d5d4:	7004      	strb	r4, [r0, #0]
}
   2d5d6:	bd10      	pop	{r4, pc}

0002d5d8 <net_buf_simple_add_le16>:
{
   2d5d8:	b510      	push	{r4, lr}
   2d5da:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2d5dc:	2102      	movs	r1, #2
   2d5de:	f7ec fc1f 	bl	19e20 <net_buf_simple_add>
	dst[0] = val;
   2d5e2:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2d5e4:	0a24      	lsrs	r4, r4, #8
   2d5e6:	7044      	strb	r4, [r0, #1]
}
   2d5e8:	bd10      	pop	{r4, pc}

0002d5ea <offloaded_netdev_if_enable>:
   2d5ea:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   2d5ec:	681b      	ldr	r3, [r3, #0]
   2d5ee:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   2d5f0:	b113      	cbz	r3, 2d5f8 <offloaded_netdev_if_enable+0xe>
   2d5f2:	685b      	ldr	r3, [r3, #4]
   2d5f4:	b103      	cbz	r3, 2d5f8 <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   2d5f6:	4718      	bx	r3
}
   2d5f8:	2000      	movs	r0, #0
   2d5fa:	4770      	bx	lr

0002d5fc <net_init>:

	return status;
}

static int net_init(void)
{
   2d5fc:	b508      	push	{r3, lr}
	net_if_init();
   2d5fe:	f7ec fd0f 	bl	1a020 <net_if_init>
	net_if_post_init();
   2d602:	f7ec fd4b 	bl	1a09c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2d606:	2000      	movs	r0, #0
   2d608:	bd08      	pop	{r3, pc}

0002d60a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2d60a:	b110      	cbz	r0, 2d612 <net_if_l2+0x8>
   2d60c:	6800      	ldr	r0, [r0, #0]
   2d60e:	b100      	cbz	r0, 2d612 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2d610:	6840      	ldr	r0, [r0, #4]
}
   2d612:	4770      	bx	lr

0002d614 <net_if_flag_is_set>:
	if (iface == NULL) {
   2d614:	b130      	cbz	r0, 2d624 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d616:	6803      	ldr	r3, [r0, #0]
   2d618:	330c      	adds	r3, #12
   2d61a:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d61e:	4108      	asrs	r0, r1
   2d620:	f000 0001 	and.w	r0, r0, #1
}
   2d624:	4770      	bx	lr

0002d626 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   2d626:	b510      	push	{r4, lr}
   2d628:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2d62a:	f7ff ffee 	bl	2d60a <net_if_l2>
   2d62e:	b128      	cbz	r0, 2d63c <l2_flags_get.isra.0+0x16>
   2d630:	68c2      	ldr	r2, [r0, #12]
   2d632:	b11a      	cbz	r2, 2d63c <l2_flags_get.isra.0+0x16>
}
   2d634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2d638:	4618      	mov	r0, r3
   2d63a:	4710      	bx	r2
}
   2d63c:	bd10      	pop	{r4, pc}

0002d63e <net_if_up>:
{
   2d63e:	b538      	push	{r3, r4, r5, lr}
   2d640:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   2d642:	f04f 31ff 	mov.w	r1, #4294967295
   2d646:	f04f 30ff 	mov.w	r0, #4294967295
   2d64a:	f7ec fc55 	bl	19ef8 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2d64e:	2100      	movs	r1, #0
   2d650:	4628      	mov	r0, r5
   2d652:	f7ff ffdf 	bl	2d614 <net_if_flag_is_set>
   2d656:	b9b0      	cbnz	r0, 2d686 <net_if_up+0x48>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2d658:	4628      	mov	r0, r5
   2d65a:	f7ff ffd6 	bl	2d60a <net_if_l2>
   2d65e:	4604      	mov	r4, r0
   2d660:	b130      	cbz	r0, 2d670 <net_if_up+0x32>
   2d662:	6884      	ldr	r4, [r0, #8]
   2d664:	b124      	cbz	r4, 2d670 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   2d666:	2101      	movs	r1, #1
   2d668:	4628      	mov	r0, r5
   2d66a:	47a0      	blx	r4
	if (status < 0) {
   2d66c:	1e04      	subs	r4, r0, #0
   2d66e:	db06      	blt.n	2d67e <net_if_up+0x40>
	net_if_flag_set(iface, NET_IF_UP);
   2d670:	4628      	mov	r0, r5
   2d672:	2100      	movs	r1, #0
   2d674:	f7ec fbf2 	bl	19e5c <net_if_flag_set>
	update_operational_state(iface);
   2d678:	4628      	mov	r0, r5
   2d67a:	f7ec fc4b 	bl	19f14 <update_operational_state>
	k_mutex_unlock(&lock);
   2d67e:	f7ec fc43 	bl	19f08 <k_mutex_unlock.constprop.0.isra.0>
}
   2d682:	4620      	mov	r0, r4
   2d684:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   2d686:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2d68a:	e7f8      	b.n	2d67e <net_if_up+0x40>

0002d68c <net_byte_to_hex>:
{
   2d68c:	b510      	push	{r4, lr}
   2d68e:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2d690:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   2d692:	b1b3      	cbz	r3, 2d6c2 <net_byte_to_hex+0x36>
		if (val < 10) {
   2d694:	2809      	cmp	r0, #9
   2d696:	d912      	bls.n	2d6be <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   2d698:	f1a2 030a 	sub.w	r3, r2, #10
   2d69c:	4418      	add	r0, r3
   2d69e:	b2c0      	uxtb	r0, r0
   2d6a0:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   2d6a4:	2300      	movs	r3, #0
   2d6a6:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   2d6aa:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   2d6ac:	bf83      	ittte	hi
   2d6ae:	3a0a      	subhi	r2, #10
   2d6b0:	1889      	addhi	r1, r1, r2
   2d6b2:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2d6b4:	3130      	addls	r1, #48	; 0x30
   2d6b6:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2d6b8:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   2d6ba:	1c60      	adds	r0, r4, #1
}
   2d6bc:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   2d6be:	3030      	adds	r0, #48	; 0x30
   2d6c0:	e7ee      	b.n	2d6a0 <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   2d6c2:	2800      	cmp	r0, #0
   2d6c4:	d1e6      	bne.n	2d694 <net_byte_to_hex+0x8>
   2d6c6:	e7ed      	b.n	2d6a4 <net_byte_to_hex+0x18>

0002d6c8 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", (void *)buf->cur, (void *)buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d6c8:	e9d0 3200 	ldrd	r3, r2, [r0]
   2d6cc:	1ad2      	subs	r2, r2, r3
   2d6ce:	2a01      	cmp	r2, #1
   2d6d0:	d90d      	bls.n	2d6ee <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2d6d2:	1c5a      	adds	r2, r3, #1
   2d6d4:	6002      	str	r2, [r0, #0]
   2d6d6:	781b      	ldrb	r3, [r3, #0]
   2d6d8:	021b      	lsls	r3, r3, #8
   2d6da:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   2d6dc:	6803      	ldr	r3, [r0, #0]
   2d6de:	1c5a      	adds	r2, r3, #1
   2d6e0:	6002      	str	r2, [r0, #0]
   2d6e2:	781b      	ldrb	r3, [r3, #0]
   2d6e4:	880a      	ldrh	r2, [r1, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   2d6e6:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2d6e8:	4313      	orrs	r3, r2
   2d6ea:	800b      	strh	r3, [r1, #0]
	return 0;
   2d6ec:	4770      	bx	lr
		return -EINVAL;
   2d6ee:	f06f 0015 	mvn.w	r0, #21
}
   2d6f2:	4770      	bx	lr

0002d6f4 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   2d6f4:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d6f6:	e9d0 3400 	ldrd	r3, r4, [r0]
   2d6fa:	429c      	cmp	r4, r3
   2d6fc:	d020      	beq.n	2d740 <fixed_header_decode+0x4c>
	*val = *(buf->cur++);
   2d6fe:	1c5c      	adds	r4, r3, #1
   2d700:	6004      	str	r4, [r0, #0]
   2d702:	781b      	ldrb	r3, [r3, #0]
   2d704:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2d706:	2300      	movs	r3, #0
   2d708:	6013      	str	r3, [r2, #0]
		if (buf->cur >= buf->end) {
   2d70a:	e9d0 1400 	ldrd	r1, r4, [r0]
   2d70e:	42a1      	cmp	r1, r4
   2d710:	d219      	bcs.n	2d746 <fixed_header_decode+0x52>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d712:	7809      	ldrb	r1, [r1, #0]
   2d714:	6814      	ldr	r4, [r2, #0]
   2d716:	f001 017f 	and.w	r1, r1, #127	; 0x7f
								<< shift;
   2d71a:	4099      	lsls	r1, r3
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d71c:	440c      	add	r4, r1
   2d71e:	6014      	str	r4, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2d720:	6801      	ldr	r1, [r0, #0]
   2d722:	1c4c      	adds	r4, r1, #1
   2d724:	6004      	str	r4, [r0, #0]
   2d726:	f991 1000 	ldrsb.w	r1, [r1]
   2d72a:	2900      	cmp	r1, #0
   2d72c:	db05      	blt.n	2d73a <fixed_header_decode+0x46>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2d72e:	6813      	ldr	r3, [r2, #0]
   2d730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2d734:	d204      	bcs.n	2d740 <fixed_header_decode+0x4c>
	return 0;
   2d736:	2000      	movs	r0, #0
   2d738:	e004      	b.n	2d744 <fixed_header_decode+0x50>
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2d73a:	3307      	adds	r3, #7
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   2d73c:	2b1c      	cmp	r3, #28
   2d73e:	d1e4      	bne.n	2d70a <fixed_header_decode+0x16>
			return -EINVAL;
   2d740:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2d744:	bd10      	pop	{r4, pc}
			return -EAGAIN;
   2d746:	f06f 000a 	mvn.w	r0, #10
   2d74a:	e7fb      	b.n	2d744 <fixed_header_decode+0x50>

0002d74c <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2d74c:	b570      	push	{r4, r5, r6, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d74e:	e9d1 3600 	ldrd	r3, r6, [r1]
   2d752:	429e      	cmp	r6, r3
   2d754:	d102      	bne.n	2d75c <connect_ack_decode+0x10>
		return -EINVAL;
   2d756:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2d75a:	bd70      	pop	{r4, r5, r6, pc}
	*val = *(buf->cur++);
   2d75c:	1c5d      	adds	r5, r3, #1
   2d75e:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d760:	42ae      	cmp	r6, r5
	*val = *(buf->cur++);
   2d762:	781c      	ldrb	r4, [r3, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d764:	d0f7      	beq.n	2d756 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2d766:	1c9d      	adds	r5, r3, #2
   2d768:	600d      	str	r5, [r1, #0]
   2d76a:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d76c:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   2d770:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d772:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2d774:	bf04      	itt	eq
   2d776:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   2d77a:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2d77c:	7051      	strb	r1, [r2, #1]
	return 0;
   2d77e:	e7ec      	b.n	2d75a <connect_ack_decode+0xe>

0002d780 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2d780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d782:	461c      	mov	r4, r3
   2d784:	4615      	mov	r5, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d786:	7da2      	ldrb	r2, [r4, #22]
   2d788:	0043      	lsls	r3, r0, #1
   2d78a:	f003 0302 	and.w	r3, r3, #2
   2d78e:	f022 0203 	bic.w	r2, r2, #3
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2d792:	f3c0 0041 	ubfx	r0, r0, #1, #2
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d796:	4313      	orrs	r3, r2
{
   2d798:	460e      	mov	r6, r1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2d79a:	7220      	strb	r0, [r4, #8]
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d79c:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2d79e:	4628      	mov	r0, r5
   2d7a0:	f10d 0106 	add.w	r1, sp, #6
   2d7a4:	f7ff ff90 	bl	2d6c8 <unpack_uint16>
	if (err_code != 0) {
   2d7a8:	b9d8      	cbnz	r0, 2d7e2 <publish_decode+0x62>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2d7aa:	e9d5 1200 	ldrd	r1, r2, [r5]
   2d7ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d7b2:	1a52      	subs	r2, r2, r1
   2d7b4:	429a      	cmp	r2, r3
   2d7b6:	db12      	blt.n	2d7de <publish_decode+0x5e>
	str->size = utf8_strlen;
   2d7b8:	6063      	str	r3, [r4, #4]
	if (utf8_strlen) {
   2d7ba:	b173      	cbz	r3, 2d7da <publish_decode+0x5a>
		str->utf8 = buf->cur;
   2d7bc:	682a      	ldr	r2, [r5, #0]
   2d7be:	6022      	str	r2, [r4, #0]
		buf->cur += utf8_strlen;
   2d7c0:	441a      	add	r2, r3
   2d7c2:	602a      	str	r2, [r5, #0]
		return err_code;
	}

	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);

	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d7c4:	7a23      	ldrb	r3, [r4, #8]
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2d7c6:	6867      	ldr	r7, [r4, #4]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d7c8:	b96b      	cbnz	r3, 2d7e6 <publish_decode+0x66>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2d7ca:	1cbb      	adds	r3, r7, #2
		}

		var_header_length += sizeof(uint16_t);
	}

	if (var_length < var_header_length) {
   2d7cc:	429e      	cmp	r6, r3
   2d7ce:	d306      	bcc.n	2d7de <publish_decode+0x5e>
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
	}

	param->message.payload.data = NULL;
   2d7d0:	2000      	movs	r0, #0
	param->message.payload.len = var_length - var_header_length;
   2d7d2:	1af6      	subs	r6, r6, r3
	param->message.payload.data = NULL;
   2d7d4:	60e0      	str	r0, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2d7d6:	6126      	str	r6, [r4, #16]

	return 0;
   2d7d8:	e003      	b.n	2d7e2 <publish_decode+0x62>
		str->utf8 = NULL;
   2d7da:	6023      	str	r3, [r4, #0]
	if (err_code != 0) {
   2d7dc:	e7f2      	b.n	2d7c4 <publish_decode+0x44>
		return -EINVAL;
   2d7de:	f06f 0015 	mvn.w	r0, #21
}
   2d7e2:	b003      	add	sp, #12
   2d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err_code = unpack_uint16(buf, &param->message_id);
   2d7e6:	4628      	mov	r0, r5
   2d7e8:	f104 0114 	add.w	r1, r4, #20
   2d7ec:	f7ff ff6c 	bl	2d6c8 <unpack_uint16>
		if (err_code != 0) {
   2d7f0:	2800      	cmp	r0, #0
   2d7f2:	d1f6      	bne.n	2d7e2 <publish_decode+0x62>
		var_header_length += sizeof(uint16_t);
   2d7f4:	1d3b      	adds	r3, r7, #4
   2d7f6:	e7e9      	b.n	2d7cc <publish_decode+0x4c>

0002d7f8 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d7f8:	f7ff bf66 	b.w	2d6c8 <unpack_uint16>

0002d7fc <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
   2d7fc:	f7ff bf64 	b.w	2d6c8 <unpack_uint16>

0002d800 <publish_release_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
   2d800:	f7ff bf62 	b.w	2d6c8 <unpack_uint16>

0002d804 <publish_complete_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_complete_decode(struct buf_ctx *buf,
   2d804:	f7ff bf60 	b.w	2d6c8 <unpack_uint16>

0002d808 <subscribe_ack_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2d808:	b538      	push	{r3, r4, r5, lr}
   2d80a:	4604      	mov	r4, r0
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   2d80c:	f7ff ff5c 	bl	2d6c8 <unpack_uint16>
	if (err_code != 0) {
   2d810:	b940      	cbnz	r0, 2d824 <subscribe_ack_decode+0x1c>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2d812:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d816:	1a9b      	subs	r3, r3, r2
	str->len = length;
   2d818:	608b      	str	r3, [r1, #8]
	if (length > 0) {
   2d81a:	b123      	cbz	r3, 2d826 <subscribe_ack_decode+0x1e>
		str->data = buf->cur;
   2d81c:	6822      	ldr	r2, [r4, #0]
   2d81e:	604a      	str	r2, [r1, #4]
		buf->cur += length;
   2d820:	441a      	add	r2, r3
   2d822:	6022      	str	r2, [r4, #0]
}
   2d824:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2d826:	6048      	str	r0, [r1, #4]
   2d828:	e7fc      	b.n	2d824 <subscribe_ack_decode+0x1c>

0002d82a <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
   2d82a:	f7ff bf4d 	b.w	2d6c8 <unpack_uint16>

0002d82e <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d82e:	e9d1 3200 	ldrd	r3, r2, [r1]
   2d832:	1ad2      	subs	r2, r2, r3
   2d834:	2a01      	cmp	r2, #1
   2d836:	d909      	bls.n	2d84c <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2d838:	1c5a      	adds	r2, r3, #1
   2d83a:	600a      	str	r2, [r1, #0]
   2d83c:	0a02      	lsrs	r2, r0, #8
   2d83e:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   2d840:	680b      	ldr	r3, [r1, #0]
   2d842:	1c5a      	adds	r2, r3, #1
   2d844:	600a      	str	r2, [r1, #0]
   2d846:	7018      	strb	r0, [r3, #0]
	return 0;
   2d848:	2000      	movs	r0, #0
   2d84a:	4770      	bx	lr
		return -ENOMEM;
   2d84c:	f06f 000b 	mvn.w	r0, #11
}
   2d850:	4770      	bx	lr

0002d852 <pack_utf8_str>:
{
   2d852:	b538      	push	{r3, r4, r5, lr}
   2d854:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d856:	e9d1 2300 	ldrd	r2, r3, [r1]
   2d85a:	6840      	ldr	r0, [r0, #4]
   2d85c:	1a9b      	subs	r3, r3, r2
   2d85e:	1c82      	adds	r2, r0, #2
   2d860:	4293      	cmp	r3, r2
{
   2d862:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d864:	d30d      	bcc.n	2d882 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2d866:	b280      	uxth	r0, r0
   2d868:	f7ff ffe1 	bl	2d82e <pack_uint16>
   2d86c:	e9d5 1200 	ldrd	r1, r2, [r5]
   2d870:	6820      	ldr	r0, [r4, #0]
   2d872:	f002 ffe6 	bl	30842 <memcpy>
	return 0;
   2d876:	2000      	movs	r0, #0
	buf->cur += str->size;
   2d878:	6823      	ldr	r3, [r4, #0]
   2d87a:	686a      	ldr	r2, [r5, #4]
   2d87c:	4413      	add	r3, r2
   2d87e:	6023      	str	r3, [r4, #0]
}
   2d880:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2d882:	f06f 000b 	mvn.w	r0, #11
   2d886:	e7fb      	b.n	2d880 <pack_utf8_str+0x2e>

0002d888 <mqtt_encode_fixed_header>:
{
   2d888:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   2d88a:	6814      	ldr	r4, [r2, #0]
   2d88c:	1a64      	subs	r4, r4, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2d88e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2d892:	d227      	bcs.n	2d8e4 <mqtt_encode_fixed_header+0x5c>
   2d894:	4625      	mov	r5, r4
   2d896:	2600      	movs	r6, #0
	} while (length > 0);
   2d898:	09ed      	lsrs	r5, r5, #7
   2d89a:	4633      	mov	r3, r6
   2d89c:	f106 0601 	add.w	r6, r6, #1
   2d8a0:	d1fa      	bne.n	2d898 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2d8a2:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d8a4:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2d8a6:	b2db      	uxtb	r3, r3
   2d8a8:	425d      	negs	r5, r3
   2d8aa:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d8ac:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2d8ae:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2d8b0:	bf1e      	ittt	ne
   2d8b2:	3301      	addne	r3, #1
   2d8b4:	6013      	strne	r3, [r2, #0]
   2d8b6:	5548      	strbne	r0, [r1, r5]
	return 0;
   2d8b8:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2d8ba:	6813      	ldr	r3, [r2, #0]
   2d8bc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2d8c0:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2d8c2:	09c0      	lsrs	r0, r0, #7
   2d8c4:	6813      	ldr	r3, [r2, #0]
   2d8c6:	d105      	bne.n	2d8d4 <mqtt_encode_fixed_header+0x4c>
			buf->cur++;
   2d8c8:	3301      	adds	r3, #1
	buf->cur = buf->cur - fixed_header_length;
   2d8ca:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   2d8cc:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2d8ce:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2d8d0:	6053      	str	r3, [r2, #4]
}
   2d8d2:	bd70      	pop	{r4, r5, r6, pc}
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2d8d4:	7819      	ldrb	r1, [r3, #0]
   2d8d6:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2d8da:	7019      	strb	r1, [r3, #0]
			buf->cur++;
   2d8dc:	6813      	ldr	r3, [r2, #0]
   2d8de:	3301      	adds	r3, #1
   2d8e0:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2d8e2:	e7ea      	b.n	2d8ba <mqtt_encode_fixed_header+0x32>
		return -EMSGSIZE;
   2d8e4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d8e8:	e7f3      	b.n	2d8d2 <mqtt_encode_fixed_header+0x4a>

0002d8ea <mqtt_message_id_only_enc>:
{
   2d8ea:	b570      	push	{r4, r5, r6, lr}
   2d8ec:	4606      	mov	r6, r0
   2d8ee:	4614      	mov	r4, r2
	if (message_id == 0U) {
   2d8f0:	4608      	mov	r0, r1
   2d8f2:	b169      	cbz	r1, 2d910 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d8f4:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   2d8f6:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d8f8:	3505      	adds	r5, #5
   2d8fa:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   2d8fc:	f7ff ff97 	bl	2d82e <pack_uint16>
	if (err_code != 0) {
   2d900:	b940      	cbnz	r0, 2d914 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   2d902:	4622      	mov	r2, r4
   2d904:	4629      	mov	r1, r5
   2d906:	4630      	mov	r0, r6
}
   2d908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   2d90c:	f7ff bfbc 	b.w	2d888 <mqtt_encode_fixed_header>
		return -EINVAL;
   2d910:	f06f 0015 	mvn.w	r0, #21
}
   2d914:	bd70      	pop	{r4, r5, r6, pc}

0002d916 <publish_encode>:
{
   2d916:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d91a:	7d87      	ldrb	r7, [r0, #22]
   2d91c:	7a04      	ldrb	r4, [r0, #8]
   2d91e:	f007 0801 	and.w	r8, r7, #1
{
   2d922:	4605      	mov	r5, r0
   2d924:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d926:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2d92a:	b10c      	cbz	r4, 2d930 <publish_encode+0x1a>
   2d92c:	8a83      	ldrh	r3, [r0, #20]
   2d92e:	b383      	cbz	r3, 2d992 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d930:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d934:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d936:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d938:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d93a:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d93e:	f7ff ff88 	bl	2d852 <pack_utf8_str>
	if (err_code != 0) {
   2d942:	b9b0      	cbnz	r0, 2d972 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2d944:	7a2b      	ldrb	r3, [r5, #8]
   2d946:	b9b3      	cbnz	r3, 2d976 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d948:	0060      	lsls	r0, r4, #1
   2d94a:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   2d94e:	692a      	ldr	r2, [r5, #16]
   2d950:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d954:	4338      	orrs	r0, r7
   2d956:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2d95a:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d95c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d960:	464a      	mov	r2, r9
   2d962:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2d964:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d968:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d96c:	f7ff ff8c 	bl	2d888 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   2d970:	b140      	cbz	r0, 2d984 <publish_encode+0x6e>
}
   2d972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2d976:	4649      	mov	r1, r9
   2d978:	8aa8      	ldrh	r0, [r5, #20]
   2d97a:	f7ff ff58 	bl	2d82e <pack_uint16>
		if (err_code != 0) {
   2d97e:	2800      	cmp	r0, #0
   2d980:	d0e2      	beq.n	2d948 <publish_encode+0x32>
   2d982:	e7f6      	b.n	2d972 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2d984:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d988:	692a      	ldr	r2, [r5, #16]
   2d98a:	1a9b      	subs	r3, r3, r2
   2d98c:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   2d990:	e7ef      	b.n	2d972 <publish_encode+0x5c>
		return -EINVAL;
   2d992:	f06f 0015 	mvn.w	r0, #21
   2d996:	e7ec      	b.n	2d972 <publish_encode+0x5c>

0002d998 <publish_ack_encode>:
{
   2d998:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   2d99a:	8801      	ldrh	r1, [r0, #0]
   2d99c:	2040      	movs	r0, #64	; 0x40
   2d99e:	f7ff bfa4 	b.w	2d8ea <mqtt_message_id_only_enc>

0002d9a2 <subscribe_encode>:
{
   2d9a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (param->message_id == 0U) {
   2d9a6:	88c3      	ldrh	r3, [r0, #6]
{
   2d9a8:	4606      	mov	r6, r0
   2d9aa:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   2d9ac:	b33b      	cbz	r3, 2d9fe <subscribe_encode+0x5c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d9ae:	680f      	ldr	r7, [r1, #0]
   2d9b0:	3705      	adds	r7, #5
   2d9b2:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   2d9b4:	88c0      	ldrh	r0, [r0, #6]
   2d9b6:	f7ff ff3a 	bl	2d82e <pack_uint16>
	if (err_code != 0) {
   2d9ba:	4604      	mov	r4, r0
   2d9bc:	bb08      	cbnz	r0, 2da02 <subscribe_encode+0x60>
   2d9be:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   2d9c2:	88b3      	ldrh	r3, [r6, #4]
   2d9c4:	42a3      	cmp	r3, r4
   2d9c6:	dc06      	bgt.n	2d9d6 <subscribe_encode+0x34>
	return mqtt_encode_fixed_header(message_type, start, buf);
   2d9c8:	462a      	mov	r2, r5
   2d9ca:	4639      	mov	r1, r7
}
   2d9cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   2d9d0:	2082      	movs	r0, #130	; 0x82
   2d9d2:	f7ff bf59 	b.w	2d888 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   2d9d6:	fb08 f904 	mul.w	r9, r8, r4
   2d9da:	6830      	ldr	r0, [r6, #0]
   2d9dc:	4629      	mov	r1, r5
   2d9de:	4448      	add	r0, r9
   2d9e0:	f7ff ff37 	bl	2d852 <pack_utf8_str>
		if (err_code != 0) {
   2d9e4:	b980      	cbnz	r0, 2da08 <subscribe_encode+0x66>
		err_code = pack_uint8(param->list[i].qos, buf);
   2d9e6:	6833      	ldr	r3, [r6, #0]
   2d9e8:	444b      	add	r3, r9
   2d9ea:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d9ec:	e9d5 3100 	ldrd	r3, r1, [r5]
   2d9f0:	4299      	cmp	r1, r3
   2d9f2:	d00b      	beq.n	2da0c <subscribe_encode+0x6a>
	*(buf->cur++) = val;
   2d9f4:	1c59      	adds	r1, r3, #1
   2d9f6:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   2d9f8:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   2d9fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   2d9fc:	e7e1      	b.n	2d9c2 <subscribe_encode+0x20>
		return -EINVAL;
   2d9fe:	f06f 0415 	mvn.w	r4, #21
}
   2da02:	4620      	mov	r0, r4
   2da04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   2da08:	4604      	mov	r4, r0
   2da0a:	e7fa      	b.n	2da02 <subscribe_encode+0x60>
		return -ENOMEM;
   2da0c:	f06f 040b 	mvn.w	r4, #11
   2da10:	e7f7      	b.n	2da02 <subscribe_encode+0x60>

0002da12 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   2da12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da14:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2da16:	e9d1 3100 	ldrd	r3, r1, [r1]
   2da1a:	1acb      	subs	r3, r1, r3
   2da1c:	4293      	cmp	r3, r2
{
   2da1e:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   2da20:	d301      	bcc.n	2da26 <mqtt_read_message_chunk+0x14>
		return 0;
   2da22:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2da26:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2da28:	190f      	adds	r7, r1, r4
   2da2a:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   2da2e:	4413      	add	r3, r2
   2da30:	429f      	cmp	r7, r3
   2da32:	d813      	bhi.n	2da5c <mqtt_read_message_chunk+0x4a>
   2da34:	4297      	cmp	r7, r2
   2da36:	d311      	bcc.n	2da5c <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2da38:	2300      	movs	r3, #0
   2da3a:	4622      	mov	r2, r4
   2da3c:	f7ec fd04 	bl	1a448 <mqtt_transport_read>
	if (len < 0) {
   2da40:	2800      	cmp	r0, #0
   2da42:	dbef      	blt.n	2da24 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2da44:	d00d      	beq.n	2da62 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2da46:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2da48:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   2da4a:	4403      	add	r3, r0
   2da4c:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2da4e:	686b      	ldr	r3, [r5, #4]
   2da50:	4403      	add	r3, r0
   2da52:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2da54:	d2e5      	bcs.n	2da22 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2da56:	f06f 000a 	mvn.w	r0, #10
   2da5a:	e7e3      	b.n	2da24 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   2da5c:	f06f 000b 	mvn.w	r0, #11
   2da60:	e7e0      	b.n	2da24 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2da62:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2da66:	e7dd      	b.n	2da24 <mqtt_read_message_chunk+0x12>

0002da68 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2da68:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   2da6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2da6c:	69c2      	ldr	r2, [r0, #28]
{
   2da6e:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2da70:	9302      	str	r3, [sp, #8]
{
   2da72:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2da74:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2da76:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2da78:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   2da7a:	4628      	mov	r0, r5
   2da7c:	a902      	add	r1, sp, #8
   2da7e:	f7ff ffc8 	bl	2da12 <mqtt_read_message_chunk>
		if (err_code < 0) {
   2da82:	1e04      	subs	r4, r0, #0
   2da84:	db2d      	blt.n	2dae2 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2da86:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2da88:	aa01      	add	r2, sp, #4
   2da8a:	f10d 0103 	add.w	r1, sp, #3
   2da8e:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2da90:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2da92:	f7ff fe2f 	bl	2d6f4 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2da96:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2da9a:	4604      	mov	r4, r0
		chunk_size = 1U;
   2da9c:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2daa0:	d0eb      	beq.n	2da7a <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2daa2:	2800      	cmp	r0, #0
   2daa4:	db3c      	blt.n	2db20 <mqtt_handle_rx+0xb8>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2daa6:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2daaa:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2daae:	2b30      	cmp	r3, #48	; 0x30
   2dab0:	d11b      	bne.n	2daea <mqtt_handle_rx+0x82>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2dab2:	2202      	movs	r2, #2
   2dab4:	4628      	mov	r0, r5
   2dab6:	a902      	add	r1, sp, #8
   2dab8:	f7ff ffab 	bl	2da12 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2dabc:	1e04      	subs	r4, r0, #0
   2dabe:	db10      	blt.n	2dae2 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2dac0:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2dac2:	f016 0f06 	tst.w	r6, #6
   2dac6:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   2dac8:	4628      	mov	r0, r5
   2daca:	ba52      	rev16	r2, r2
   2dacc:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2dace:	bf0c      	ite	eq
   2dad0:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2dad2:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   2dad4:	a902      	add	r1, sp, #8
   2dad6:	f7ff ff9c 	bl	2da12 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2dada:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   2dade:	2c00      	cmp	r4, #0
   2dae0:	da0a      	bge.n	2daf8 <mqtt_handle_rx+0x90>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2dae2:	f114 0f0b 	cmn.w	r4, #11
   2dae6:	d11b      	bne.n	2db20 <mqtt_handle_rx+0xb8>
   2dae8:	e019      	b.n	2db1e <mqtt_handle_rx+0xb6>
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2daea:	4628      	mov	r0, r5
   2daec:	9a01      	ldr	r2, [sp, #4]
   2daee:	a902      	add	r1, sp, #8
   2daf0:	f7ff ff8f 	bl	2da12 <mqtt_read_message_chunk>
   2daf4:	4604      	mov	r4, r0
   2daf6:	e7f2      	b.n	2dade <mqtt_handle_rx+0x76>
	evt.result = 0;
   2daf8:	2200      	movs	r2, #0
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	/* At this point, packet is ready to be passed to the application. */
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2dafa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2dafe:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2db00:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   2db04:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2db06:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2db08:	d06f      	beq.n	2dbea <mqtt_handle_rx+0x182>
   2db0a:	d816      	bhi.n	2db3a <mqtt_handle_rx+0xd2>
   2db0c:	2b40      	cmp	r3, #64	; 0x40
   2db0e:	d062      	beq.n	2dbd6 <mqtt_handle_rx+0x16e>
   2db10:	d809      	bhi.n	2db26 <mqtt_handle_rx+0xbe>
   2db12:	2b20      	cmp	r3, #32
   2db14:	d02f      	beq.n	2db76 <mqtt_handle_rx+0x10e>
   2db16:	2b30      	cmp	r3, #48	; 0x30
   2db18:	d04b      	beq.n	2dbb2 <mqtt_handle_rx+0x14a>
	if (err_code < 0) {
		return err_code;
	}

	client->internal.rx_buf_datalen = 0U;
   2db1a:	2300      	movs	r3, #0
   2db1c:	61eb      	str	r3, [r5, #28]
		return (err_code == -EAGAIN) ? 0 : err_code;
   2db1e:	2400      	movs	r4, #0

	return 0;
}
   2db20:	4620      	mov	r0, r4
   2db22:	b00c      	add	sp, #48	; 0x30
   2db24:	bd70      	pop	{r4, r5, r6, pc}
	switch (type_and_flags & 0xF0) {
   2db26:	2b50      	cmp	r3, #80	; 0x50
   2db28:	d1f7      	bne.n	2db1a <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_PUBREC;
   2db2a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2db2c:	a905      	add	r1, sp, #20
   2db2e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   2db30:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2db34:	f7ff fe62 	bl	2d7fc <publish_receive_decode>
   2db38:	e054      	b.n	2dbe4 <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   2db3a:	2bb0      	cmp	r3, #176	; 0xb0
   2db3c:	d065      	beq.n	2dc0a <mqtt_handle_rx+0x1a2>
   2db3e:	d80b      	bhi.n	2db58 <mqtt_handle_rx+0xf0>
   2db40:	2b70      	cmp	r3, #112	; 0x70
   2db42:	d05a      	beq.n	2dbfa <mqtt_handle_rx+0x192>
   2db44:	2b90      	cmp	r3, #144	; 0x90
   2db46:	d1e8      	bne.n	2db1a <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_SUBACK;
   2db48:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2db4a:	a905      	add	r1, sp, #20
   2db4c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   2db4e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2db52:	f7ff fe59 	bl	2d808 <subscribe_ack_decode>
   2db56:	e045      	b.n	2dbe4 <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   2db58:	2bd0      	cmp	r3, #208	; 0xd0
   2db5a:	d1de      	bne.n	2db1a <mqtt_handle_rx+0xb2>
		if (client->unacked_ping <= 0) {
   2db5c:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   2db60:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2db62:	bfc4      	itt	gt
   2db64:	f103 33ff 	addgt.w	r3, r3, #4294967295
   2db68:	b25a      	sxtbgt	r2, r3
		evt.type = MQTT_EVT_PINGRESP;
   2db6a:	2309      	movs	r3, #9
   2db6c:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
   2db70:	f88d 3010 	strb.w	r3, [sp, #16]
   2db74:	e010      	b.n	2db98 <mqtt_handle_rx+0x130>
		evt.type = MQTT_EVT_CONNACK;
   2db76:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   2db7a:	4628      	mov	r0, r5
   2db7c:	aa05      	add	r2, sp, #20
   2db7e:	a902      	add	r1, sp, #8
   2db80:	f7ff fde4 	bl	2d74c <connect_ack_decode>
		if (err_code == 0) {
   2db84:	4604      	mov	r4, r0
   2db86:	bb70      	cbnz	r0, 2dbe6 <mqtt_handle_rx+0x17e>
			if (evt.param.connack.return_code ==
   2db88:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2db8c:	b94b      	cbnz	r3, 2dba2 <mqtt_handle_rx+0x13a>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2db8e:	69ab      	ldr	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   2db90:	900b      	str	r0, [sp, #44]	; 0x2c
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2db92:	f043 0304 	orr.w	r3, r3, #4
   2db96:	61ab      	str	r3, [r5, #24]
		event_notify(client, &evt);
   2db98:	4628      	mov	r0, r5
   2db9a:	a904      	add	r1, sp, #16
   2db9c:	f000 f8fd 	bl	2dd9a <event_notify>
	if (err_code < 0) {
   2dba0:	e7bb      	b.n	2db1a <mqtt_handle_rx+0xb2>
		event_notify(client, &evt);
   2dba2:	4628      	mov	r0, r5
   2dba4:	a904      	add	r1, sp, #16
			evt.result = evt.param.connack.return_code;
   2dba6:	930b      	str	r3, [sp, #44]	; 0x2c
				err_code = -ECONNREFUSED;
   2dba8:	f06f 046e 	mvn.w	r4, #110	; 0x6e
		event_notify(client, &evt);
   2dbac:	f000 f8f5 	bl	2dd9a <event_notify>
	if (err_code < 0) {
   2dbb0:	e7b6      	b.n	2db20 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBLISH;
   2dbb2:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   2dbb4:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   2dbb6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2dbba:	ab05      	add	r3, sp, #20
   2dbbc:	f7ff fde0 	bl	2d780 <publish_decode>
   2dbc0:	4604      	mov	r4, r0
		client->internal.remaining_payload =
   2dbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		evt.result = err_code;
   2dbc4:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   2dbc6:	622b      	str	r3, [r5, #32]
		event_notify(client, &evt);
   2dbc8:	4628      	mov	r0, r5
   2dbca:	a904      	add	r1, sp, #16
   2dbcc:	f000 f8e5 	bl	2dd9a <event_notify>
	if (err_code < 0) {
   2dbd0:	2c00      	cmp	r4, #0
   2dbd2:	daa2      	bge.n	2db1a <mqtt_handle_rx+0xb2>
   2dbd4:	e7a4      	b.n	2db20 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBACK;
   2dbd6:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2dbd8:	a905      	add	r1, sp, #20
   2dbda:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2dbdc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2dbe0:	f7ff fe0a 	bl	2d7f8 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2dbe4:	4604      	mov	r4, r0
		evt.result = err_code;
   2dbe6:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2dbe8:	e7ee      	b.n	2dbc8 <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_PUBREL;
   2dbea:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2dbec:	a905      	add	r1, sp, #20
   2dbee:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   2dbf0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2dbf4:	f7ff fe04 	bl	2d800 <publish_release_decode>
   2dbf8:	e7f4      	b.n	2dbe4 <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_PUBCOMP;
   2dbfa:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2dbfc:	a905      	add	r1, sp, #20
   2dbfe:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2dc00:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2dc04:	f7ff fdfe 	bl	2d804 <publish_complete_decode>
   2dc08:	e7ec      	b.n	2dbe4 <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_UNSUBACK;
   2dc0a:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2dc0c:	a905      	add	r1, sp, #20
   2dc0e:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2dc12:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2dc16:	f7ff fe08 	bl	2d82a <unsubscribe_ack_decode>
   2dc1a:	e7e3      	b.n	2dbe4 <mqtt_handle_rx+0x17c>

0002dc1c <mqtt_client_tcp_connect>:
#include <zephyr/net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2dc1c:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   2dc1e:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2dc20:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   2dc22:	8828      	ldrh	r0, [r5, #0]
   2dc24:	2206      	movs	r2, #6
   2dc26:	2101      	movs	r1, #1
   2dc28:	f7e2 faec 	bl	10204 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2dc2c:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   2dc2e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2dc30:	da04      	bge.n	2dc3c <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   2dc32:	f7fe f997 	bl	2bf64 <__errno>
   2dc36:	6800      	ldr	r0, [r0, #0]
   2dc38:	4240      	negs	r0, r0
}
   2dc3a:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   2dc3c:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   2dc3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   2dc40:	2b01      	cmp	r3, #1
   2dc42:	bf0c      	ite	eq
   2dc44:	2208      	moveq	r2, #8
   2dc46:	2218      	movne	r2, #24
	return z_impl_zsock_connect(sock, addr, addrlen);
   2dc48:	f7fd fac6 	bl	2b1d8 <z_impl_zsock_connect>
	if (ret < 0) {
   2dc4c:	2800      	cmp	r0, #0
   2dc4e:	da03      	bge.n	2dc58 <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   2dc50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2dc52:	f7fd fa9d 	bl	2b190 <z_impl_zsock_close>
   2dc56:	e7ec      	b.n	2dc32 <mqtt_client_tcp_connect+0x16>
	return 0;
   2dc58:	2000      	movs	r0, #0
   2dc5a:	e7ee      	b.n	2dc3a <mqtt_client_tcp_connect+0x1e>

0002dc5c <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   2dc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2dc60:	2400      	movs	r4, #0
{
   2dc62:	4606      	mov	r6, r0
   2dc64:	460f      	mov	r7, r1
   2dc66:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2dc68:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   2dc6a:	42ac      	cmp	r4, r5
   2dc6c:	d301      	bcc.n	2dc72 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2dc6e:	2000      	movs	r0, #0
   2dc70:	e00d      	b.n	2dc8e <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   2dc72:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2dc74:	2300      	movs	r3, #0
   2dc76:	e9cd 8800 	strd	r8, r8, [sp]
   2dc7a:	1b2a      	subs	r2, r5, r4
   2dc7c:	1939      	adds	r1, r7, r4
   2dc7e:	f7fd fad6 	bl	2b22e <z_impl_zsock_sendto>
		if (ret < 0) {
   2dc82:	1e03      	subs	r3, r0, #0
   2dc84:	da06      	bge.n	2dc94 <mqtt_client_tcp_write+0x38>
			return -errno;
   2dc86:	f7fe f96d 	bl	2bf64 <__errno>
   2dc8a:	6800      	ldr	r0, [r0, #0]
   2dc8c:	4240      	negs	r0, r0
}
   2dc8e:	b002      	add	sp, #8
   2dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2dc94:	441c      	add	r4, r3
   2dc96:	e7e8      	b.n	2dc6a <mqtt_client_tcp_write+0xe>

0002dc98 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   2dc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   2dc9c:	2500      	movs	r5, #0
{
   2dc9e:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   2dca0:	462b      	mov	r3, r5
{
   2dca2:	460c      	mov	r4, r1
   2dca4:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   2dca6:	428b      	cmp	r3, r1
   2dca8:	d110      	bne.n	2dccc <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   2dcaa:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   2dcac:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   2dcae:	42ae      	cmp	r6, r5
   2dcb0:	d216      	bcs.n	2dce0 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   2dcb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2dcb4:	2200      	movs	r2, #0
   2dcb6:	4621      	mov	r1, r4
   2dcb8:	f7fd faed 	bl	2b296 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   2dcbc:	1e03      	subs	r3, r0, #0
   2dcbe:	da0c      	bge.n	2dcda <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   2dcc0:	f7fe f950 	bl	2bf64 <__errno>
   2dcc4:	6800      	ldr	r0, [r0, #0]
   2dcc6:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   2dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   2dccc:	68a2      	ldr	r2, [r4, #8]
   2dcce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2dcd2:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   2dcd4:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   2dcd6:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   2dcd8:	e7e5      	b.n	2dca6 <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   2dcda:	441e      	add	r6, r3
		if (offset >= total_len) {
   2dcdc:	42b5      	cmp	r5, r6
   2dcde:	d817      	bhi.n	2dd10 <mqtt_client_tcp_write_msg+0x78>
	return 0;
   2dce0:	2000      	movs	r0, #0
   2dce2:	e7f1      	b.n	2dcc8 <mqtt_client_tcp_write_msg+0x30>
			ret -= message->msg_iov[i].iov_len;
   2dce4:	1a1b      	subs	r3, r3, r0
			message->msg_iov[i].iov_len = 0;
   2dce6:	f8c1 8004 	str.w	r8, [r1, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   2dcea:	3201      	adds	r2, #1
   2dcec:	68e1      	ldr	r1, [r4, #12]
   2dcee:	4291      	cmp	r1, r2
   2dcf0:	d9dd      	bls.n	2dcae <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   2dcf2:	68a1      	ldr	r1, [r4, #8]
   2dcf4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   2dcf8:	6848      	ldr	r0, [r1, #4]
   2dcfa:	4298      	cmp	r0, r3
   2dcfc:	d9f2      	bls.n	2dce4 <mqtt_client_tcp_write_msg+0x4c>
				message->msg_iov[i].iov_len -= ret;
   2dcfe:	1ac0      	subs	r0, r0, r3
   2dd00:	6048      	str	r0, [r1, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   2dd02:	68a0      	ldr	r0, [r4, #8]
   2dd04:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   2dd08:	4419      	add	r1, r3
				message->msg_iov[i].iov_base =
   2dd0a:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
				break;
   2dd0e:	e7ce      	b.n	2dcae <mqtt_client_tcp_write_msg+0x16>
		for (i = 0; i < message->msg_iovlen; i++) {
   2dd10:	2200      	movs	r2, #0
   2dd12:	e7eb      	b.n	2dcec <mqtt_client_tcp_write_msg+0x54>

0002dd14 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2dd14:	b513      	push	{r0, r1, r4, lr}

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   2dd16:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2dd18:	2400      	movs	r4, #0
	if (!shall_block) {
   2dd1a:	f083 0301 	eor.w	r3, r3, #1
   2dd1e:	e9cd 4400 	strd	r4, r4, [sp]
   2dd22:	019b      	lsls	r3, r3, #6
   2dd24:	f7fd fae2 	bl	2b2ec <z_impl_zsock_recvfrom>
	if (ret < 0) {
   2dd28:	2800      	cmp	r0, #0
   2dd2a:	da03      	bge.n	2dd34 <mqtt_client_tcp_read+0x20>
		return -errno;
   2dd2c:	f7fe f91a 	bl	2bf64 <__errno>
   2dd30:	6800      	ldr	r0, [r0, #0]
   2dd32:	4240      	negs	r0, r0
	}

	return ret;
}
   2dd34:	b002      	add	sp, #8
   2dd36:	bd10      	pop	{r4, pc}

0002dd38 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2dd38:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   2dd3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2dd3c:	f7fd fa28 	bl	2b190 <z_impl_zsock_close>
	if (ret < 0) {
   2dd40:	2800      	cmp	r0, #0
   2dd42:	da04      	bge.n	2dd4e <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2dd44:	f7fe f90e 	bl	2bf64 <__errno>
   2dd48:	6800      	ldr	r0, [r0, #0]
   2dd4a:	4240      	negs	r0, r0
	}

	return 0;
}
   2dd4c:	bd08      	pop	{r3, pc}
	return 0;
   2dd4e:	2000      	movs	r0, #0
   2dd50:	e7fc      	b.n	2dd4c <mqtt_client_tcp_disconnect+0x14>

0002dd52 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2dd52:	f7ff bff1 	b.w	2dd38 <mqtt_client_tcp_disconnect>

0002dd56 <k_uptime_get_32>:
{
   2dd56:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   2dd58:	f002 fc44 	bl	305e4 <z_impl_k_uptime_ticks>
   2dd5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dd60:	fba0 0302 	umull	r0, r3, r0, r2
   2dd64:	fb02 3301 	mla	r3, r2, r1, r3
   2dd68:	0bc0      	lsrs	r0, r0, #15
}
   2dd6a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2dd6e:	bd08      	pop	{r3, pc}

0002dd70 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2dd70:	b538      	push	{r3, r4, r5, lr}
   2dd72:	4604      	mov	r4, r0
   2dd74:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   2dd76:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2dd78:	2100      	movs	r1, #0
   2dd7a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2dd7c:	f002 fd81 	bl	30882 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   2dd80:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2dd82:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   2dd84:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2dd86:	4413      	add	r3, r2
   2dd88:	606b      	str	r3, [r5, #4]
}
   2dd8a:	bd38      	pop	{r3, r4, r5, pc}

0002dd8c <verify_tx_state.isra.0>:
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
	}

	return 0;
   2dd8c:	f010 0f04 	tst.w	r0, #4
}
   2dd90:	bf0c      	ite	eq
   2dd92:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   2dd96:	2000      	movne	r0, #0
   2dd98:	4770      	bx	lr

0002dd9a <event_notify>:
{
   2dd9a:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   2dd9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2dd9e:	4604      	mov	r4, r0
   2dda0:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   2dda2:	b153      	cbz	r3, 2ddba <event_notify+0x20>
		mqtt_mutex_unlock(client);
   2dda4:	f7ec fb5e 	bl	1a464 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   2dda8:	4620      	mov	r0, r4
   2ddaa:	4629      	mov	r1, r5
   2ddac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2ddae:	4798      	blx	r3
		mqtt_mutex_lock(client);
   2ddb0:	4620      	mov	r0, r4
}
   2ddb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   2ddb6:	f7ec bb71 	b.w	1a49c <mqtt_mutex_lock>
}
   2ddba:	bd38      	pop	{r3, r4, r5, pc}

0002ddbc <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   2ddbc:	b530      	push	{r4, r5, lr}
   2ddbe:	b089      	sub	sp, #36	; 0x24
   2ddc0:	4604      	mov	r4, r0
   2ddc2:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   2ddc4:	f7ff ffc5 	bl	2dd52 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2ddc8:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   2ddca:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   2ddcc:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   2ddd0:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   2ddd4:	4668      	mov	r0, sp
   2ddd6:	f002 fd54 	bl	30882 <memset>
   2ddda:	2301      	movs	r3, #1
		event_notify(client, &evt);
   2dddc:	4669      	mov	r1, sp
   2ddde:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   2dde0:	f88d 3000 	strb.w	r3, [sp]
   2dde4:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   2dde6:	f7ff ffd8 	bl	2dd9a <event_notify>
}
   2ddea:	b009      	add	sp, #36	; 0x24
   2ddec:	bd30      	pop	{r4, r5, pc}

0002ddee <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2ddee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ddf2:	460f      	mov	r7, r1
   2ddf4:	4690      	mov	r8, r2
   2ddf6:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   2ddf8:	4605      	mov	r5, r0
   2ddfa:	b320      	cbz	r0, 2de46 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   2ddfc:	f7ec fb4e 	bl	1a49c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2de00:	6a2c      	ldr	r4, [r5, #32]
   2de02:	b1b4      	cbz	r4, 2de32 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2de04:	4544      	cmp	r4, r8
   2de06:	4622      	mov	r2, r4
   2de08:	4633      	mov	r3, r6
   2de0a:	bf28      	it	cs
   2de0c:	4642      	movcs	r2, r8
   2de0e:	4639      	mov	r1, r7
   2de10:	4628      	mov	r0, r5
   2de12:	f7ec fb19 	bl	1a448 <mqtt_transport_read>
   2de16:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   2de18:	b916      	cbnz	r6, 2de20 <read_publish_payload+0x32>
   2de1a:	f110 0f0b 	cmn.w	r0, #11
   2de1e:	d008      	beq.n	2de32 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   2de20:	2c00      	cmp	r4, #0
   2de22:	dc0c      	bgt.n	2de3e <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   2de24:	bf08      	it	eq
   2de26:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   2de2a:	4628      	mov	r0, r5
   2de2c:	4621      	mov	r1, r4
   2de2e:	f7ff ffc5 	bl	2ddbc <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2de32:	4628      	mov	r0, r5
   2de34:	f7ec fb16 	bl	1a464 <mqtt_mutex_unlock>

	return ret;
}
   2de38:	4620      	mov	r0, r4
   2de3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   2de3e:	6a2b      	ldr	r3, [r5, #32]
   2de40:	1b1b      	subs	r3, r3, r4
   2de42:	622b      	str	r3, [r5, #32]
   2de44:	e7f5      	b.n	2de32 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   2de46:	f06f 0415 	mvn.w	r4, #21
   2de4a:	e7f5      	b.n	2de38 <read_publish_payload+0x4a>

0002de4c <client_write>:
{
   2de4c:	b538      	push	{r3, r4, r5, lr}
   2de4e:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   2de50:	f7ec fae2 	bl	1a418 <mqtt_transport_write>
	if (err_code < 0) {
   2de54:	1e04      	subs	r4, r0, #0
   2de56:	da05      	bge.n	2de64 <client_write+0x18>
		client_disconnect(client, err_code, true);
   2de58:	4621      	mov	r1, r4
   2de5a:	4628      	mov	r0, r5
   2de5c:	f7ff ffae 	bl	2ddbc <client_disconnect.constprop.0>
}
   2de60:	4620      	mov	r0, r4
   2de62:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   2de64:	f7ff ff77 	bl	2dd56 <k_uptime_get_32>
	return 0;
   2de68:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   2de6a:	6168      	str	r0, [r5, #20]
	return 0;
   2de6c:	e7f8      	b.n	2de60 <client_write+0x14>

0002de6e <mqtt_client_init>:
{
   2de6e:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   2de70:	4604      	mov	r4, r0
   2de72:	b190      	cbz	r0, 2de9a <mqtt_client_init+0x2c>
   2de74:	2264      	movs	r2, #100	; 0x64
   2de76:	2100      	movs	r1, #0
   2de78:	f002 fd03 	bl	30882 <memset>
	return z_impl_k_mutex_init(mutex);
   2de7c:	4620      	mov	r0, r4
   2de7e:	f002 faca 	bl	30416 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2de82:	2304      	movs	r3, #4
   2de84:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   2de88:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2de8c:	f043 0302 	orr.w	r3, r3, #2
   2de90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   2de94:	233c      	movs	r3, #60	; 0x3c
   2de96:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2de9a:	bd10      	pop	{r4, pc}

0002de9c <mqtt_connect>:
{
   2de9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2de9e:	4605      	mov	r5, r0
   2dea0:	2800      	cmp	r0, #0
   2dea2:	d03a      	beq.n	2df1a <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   2dea4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2dea6:	b3c3      	cbz	r3, 2df1a <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   2dea8:	f7ec faf8 	bl	1a49c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   2deac:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2deae:	b38b      	cbz	r3, 2df14 <mqtt_connect+0x78>
   2deb0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2deb2:	b37b      	cbz	r3, 2df14 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   2deb4:	4628      	mov	r0, r5
   2deb6:	f7ec faa5 	bl	1a404 <mqtt_transport_connect>
	if (err_code < 0) {
   2deba:	1e04      	subs	r4, r0, #0
   2debc:	db24      	blt.n	2df08 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   2debe:	4669      	mov	r1, sp
   2dec0:	4628      	mov	r0, r5
   2dec2:	f7ff ff55 	bl	2dd70 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2dec6:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2dec8:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2deca:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   2dece:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2ded0:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2ded2:	f7ec f9f1 	bl	1a2b8 <connect_request_encode>
	if (err_code < 0) {
   2ded6:	1e04      	subs	r4, r0, #0
   2ded8:	db13      	blt.n	2df02 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   2deda:	e9dd 1200 	ldrd	r1, r2, [sp]
   2dede:	4628      	mov	r0, r5
   2dee0:	1a52      	subs	r2, r2, r1
   2dee2:	f7ec fa99 	bl	1a418 <mqtt_transport_write>
	if (err_code < 0) {
   2dee6:	1e04      	subs	r4, r0, #0
   2dee8:	db0b      	blt.n	2df02 <mqtt_connect+0x66>
   2deea:	f7ff ff34 	bl	2dd56 <k_uptime_get_32>
	client->unacked_ping = 0;
   2deee:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   2def0:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   2def2:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2def6:	4628      	mov	r0, r5
   2def8:	f7ec fab4 	bl	1a464 <mqtt_mutex_unlock>
}
   2defc:	4620      	mov	r0, r4
   2defe:	b003      	add	sp, #12
   2df00:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   2df02:	4628      	mov	r0, r5
   2df04:	f7ff ff25 	bl	2dd52 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2df08:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2df0a:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   2df0e:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   2df12:	e7f0      	b.n	2def6 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   2df14:	f06f 040b 	mvn.w	r4, #11
   2df18:	e7f6      	b.n	2df08 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   2df1a:	f06f 0415 	mvn.w	r4, #21
   2df1e:	e7ed      	b.n	2defc <mqtt_connect+0x60>

0002df20 <mqtt_publish>:
{
   2df20:	b570      	push	{r4, r5, r6, lr}
   2df22:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2df24:	4605      	mov	r5, r0
{
   2df26:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   2df28:	2800      	cmp	r0, #0
   2df2a:	d03a      	beq.n	2dfa2 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   2df2c:	2900      	cmp	r1, #0
   2df2e:	d038      	beq.n	2dfa2 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   2df30:	f7ec fab4 	bl	1a49c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2df34:	4628      	mov	r0, r5
   2df36:	a901      	add	r1, sp, #4
   2df38:	f7ff ff1a 	bl	2dd70 <tx_buf_init>
	err_code = verify_tx_state(client);
   2df3c:	69a8      	ldr	r0, [r5, #24]
   2df3e:	f7ff ff25 	bl	2dd8c <verify_tx_state.isra.0>
	if (err_code < 0) {
   2df42:	1e04      	subs	r4, r0, #0
   2df44:	db22      	blt.n	2df8c <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   2df46:	4630      	mov	r0, r6
   2df48:	a901      	add	r1, sp, #4
   2df4a:	f7ff fce4 	bl	2d916 <publish_encode>
	if (err_code < 0) {
   2df4e:	1e04      	subs	r4, r0, #0
   2df50:	db1c      	blt.n	2df8c <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   2df52:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   2df54:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   2df56:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   2df58:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   2df5a:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   2df5c:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   2df5e:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   2df60:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   2df62:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   2df64:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   2df66:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   2df6a:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   2df6c:	f002 fc89 	bl	30882 <memset>
	msg.msg_iov = io_vector;
   2df70:	ab03      	add	r3, sp, #12
   2df72:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2df74:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   2df76:	4628      	mov	r0, r5
   2df78:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2df7a:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   2df7c:	f7ec fa58 	bl	1a430 <mqtt_transport_write_msg>
	if (err_code < 0) {
   2df80:	1e04      	subs	r4, r0, #0
   2df82:	da09      	bge.n	2df98 <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   2df84:	4621      	mov	r1, r4
   2df86:	4628      	mov	r0, r5
   2df88:	f7ff ff18 	bl	2ddbc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2df8c:	4628      	mov	r0, r5
   2df8e:	f7ec fa69 	bl	1a464 <mqtt_mutex_unlock>
}
   2df92:	4620      	mov	r0, r4
   2df94:	b00e      	add	sp, #56	; 0x38
   2df96:	bd70      	pop	{r4, r5, r6, pc}
   2df98:	f7ff fedd 	bl	2dd56 <k_uptime_get_32>
	return 0;
   2df9c:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   2df9e:	6168      	str	r0, [r5, #20]
	return 0;
   2dfa0:	e7f4      	b.n	2df8c <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   2dfa2:	f06f 0415 	mvn.w	r4, #21
   2dfa6:	e7f4      	b.n	2df92 <mqtt_publish+0x72>

0002dfa8 <mqtt_publish_qos1_ack>:
{
   2dfa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2dfaa:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2dfac:	4605      	mov	r5, r0
   2dfae:	b1f0      	cbz	r0, 2dfee <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   2dfb0:	b1e9      	cbz	r1, 2dfee <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   2dfb2:	f7ec fa73 	bl	1a49c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2dfb6:	4628      	mov	r0, r5
   2dfb8:	4669      	mov	r1, sp
   2dfba:	f7ff fed9 	bl	2dd70 <tx_buf_init>
	err_code = verify_tx_state(client);
   2dfbe:	69a8      	ldr	r0, [r5, #24]
   2dfc0:	f7ff fee4 	bl	2dd8c <verify_tx_state.isra.0>
	if (err_code < 0) {
   2dfc4:	1e04      	subs	r4, r0, #0
   2dfc6:	db0c      	blt.n	2dfe2 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   2dfc8:	4669      	mov	r1, sp
   2dfca:	4630      	mov	r0, r6
   2dfcc:	f7ff fce4 	bl	2d998 <publish_ack_encode>
	if (err_code < 0) {
   2dfd0:	1e04      	subs	r4, r0, #0
   2dfd2:	db06      	blt.n	2dfe2 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2dfd4:	e9dd 1200 	ldrd	r1, r2, [sp]
   2dfd8:	4628      	mov	r0, r5
   2dfda:	1a52      	subs	r2, r2, r1
   2dfdc:	f7ff ff36 	bl	2de4c <client_write>
   2dfe0:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   2dfe2:	4628      	mov	r0, r5
   2dfe4:	f7ec fa3e 	bl	1a464 <mqtt_mutex_unlock>
}
   2dfe8:	4620      	mov	r0, r4
   2dfea:	b002      	add	sp, #8
   2dfec:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   2dfee:	f06f 0415 	mvn.w	r4, #21
   2dff2:	e7f9      	b.n	2dfe8 <mqtt_publish_qos1_ack+0x40>

0002dff4 <mqtt_disconnect>:
{
   2dff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2dff6:	4605      	mov	r5, r0
   2dff8:	b308      	cbz	r0, 2e03e <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   2dffa:	f7ec fa4f 	bl	1a49c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2dffe:	4628      	mov	r0, r5
   2e000:	4669      	mov	r1, sp
   2e002:	f7ff feb5 	bl	2dd70 <tx_buf_init>
	err_code = verify_tx_state(client);
   2e006:	69a8      	ldr	r0, [r5, #24]
   2e008:	f7ff fec0 	bl	2dd8c <verify_tx_state.isra.0>
	if (err_code < 0) {
   2e00c:	1e04      	subs	r4, r0, #0
   2e00e:	db10      	blt.n	2e032 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   2e010:	4668      	mov	r0, sp
   2e012:	f7ec f9d3 	bl	1a3bc <disconnect_encode>
	if (err_code < 0) {
   2e016:	1e04      	subs	r4, r0, #0
   2e018:	db0b      	blt.n	2e032 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2e01a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2e01e:	4628      	mov	r0, r5
   2e020:	1a52      	subs	r2, r2, r1
   2e022:	f7ff ff13 	bl	2de4c <client_write>
	if (err_code < 0) {
   2e026:	1e04      	subs	r4, r0, #0
   2e028:	db03      	blt.n	2e032 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   2e02a:	2100      	movs	r1, #0
   2e02c:	4628      	mov	r0, r5
   2e02e:	f7ff fec5 	bl	2ddbc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2e032:	4628      	mov	r0, r5
   2e034:	f7ec fa16 	bl	1a464 <mqtt_mutex_unlock>
}
   2e038:	4620      	mov	r0, r4
   2e03a:	b003      	add	sp, #12
   2e03c:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   2e03e:	f06f 0415 	mvn.w	r4, #21
   2e042:	e7f9      	b.n	2e038 <mqtt_disconnect+0x44>

0002e044 <mqtt_subscribe>:
{
   2e044:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e046:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2e048:	4605      	mov	r5, r0
   2e04a:	b1f0      	cbz	r0, 2e08a <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   2e04c:	b1e9      	cbz	r1, 2e08a <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   2e04e:	f7ec fa25 	bl	1a49c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2e052:	4628      	mov	r0, r5
   2e054:	4669      	mov	r1, sp
   2e056:	f7ff fe8b 	bl	2dd70 <tx_buf_init>
	err_code = verify_tx_state(client);
   2e05a:	69a8      	ldr	r0, [r5, #24]
   2e05c:	f7ff fe96 	bl	2dd8c <verify_tx_state.isra.0>
	if (err_code < 0) {
   2e060:	1e04      	subs	r4, r0, #0
   2e062:	db0c      	blt.n	2e07e <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   2e064:	4669      	mov	r1, sp
   2e066:	4630      	mov	r0, r6
   2e068:	f7ff fc9b 	bl	2d9a2 <subscribe_encode>
	if (err_code < 0) {
   2e06c:	1e04      	subs	r4, r0, #0
   2e06e:	db06      	blt.n	2e07e <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2e070:	e9dd 1200 	ldrd	r1, r2, [sp]
   2e074:	4628      	mov	r0, r5
   2e076:	1a52      	subs	r2, r2, r1
   2e078:	f7ff fee8 	bl	2de4c <client_write>
   2e07c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   2e07e:	4628      	mov	r0, r5
   2e080:	f7ec f9f0 	bl	1a464 <mqtt_mutex_unlock>
}
   2e084:	4620      	mov	r0, r4
   2e086:	b002      	add	sp, #8
   2e088:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   2e08a:	f06f 0415 	mvn.w	r4, #21
   2e08e:	e7f9      	b.n	2e084 <mqtt_subscribe+0x40>

0002e090 <mqtt_ping>:
{
   2e090:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2e092:	4605      	mov	r5, r0
   2e094:	b318      	cbz	r0, 2e0de <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   2e096:	f7ec fa01 	bl	1a49c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2e09a:	4628      	mov	r0, r5
   2e09c:	4669      	mov	r1, sp
   2e09e:	f7ff fe67 	bl	2dd70 <tx_buf_init>
	err_code = verify_tx_state(client);
   2e0a2:	69a8      	ldr	r0, [r5, #24]
   2e0a4:	f7ff fe72 	bl	2dd8c <verify_tx_state.isra.0>
	if (err_code < 0) {
   2e0a8:	1e04      	subs	r4, r0, #0
   2e0aa:	db12      	blt.n	2e0d2 <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   2e0ac:	4668      	mov	r0, sp
   2e0ae:	f7ec f997 	bl	1a3e0 <ping_request_encode>
	if (err_code < 0) {
   2e0b2:	1e04      	subs	r4, r0, #0
   2e0b4:	db0d      	blt.n	2e0d2 <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2e0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
   2e0ba:	4628      	mov	r0, r5
   2e0bc:	1a52      	subs	r2, r2, r1
   2e0be:	f7ff fec5 	bl	2de4c <client_write>
   2e0c2:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   2e0c4:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   2e0c8:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   2e0ca:	bf1c      	itt	ne
   2e0cc:	3301      	addne	r3, #1
   2e0ce:	f885 305f 	strbne.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2e0d2:	4628      	mov	r0, r5
   2e0d4:	f7ec f9c6 	bl	1a464 <mqtt_mutex_unlock>
}
   2e0d8:	4620      	mov	r0, r4
   2e0da:	b003      	add	sp, #12
   2e0dc:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   2e0de:	f06f 0415 	mvn.w	r4, #21
   2e0e2:	e7f9      	b.n	2e0d8 <mqtt_ping+0x48>

0002e0e4 <mqtt_live>:
{
   2e0e4:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2e0e6:	4604      	mov	r4, r0
   2e0e8:	b1f0      	cbz	r0, 2e128 <mqtt_live+0x44>
	mqtt_mutex_lock(client);
   2e0ea:	f7ec f9d7 	bl	1a49c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2e0ee:	6965      	ldr	r5, [r4, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   2e0f0:	f7ff fe31 	bl	2dd56 <k_uptime_get_32>

	if (diff < 0) {
   2e0f4:	1b40      	subs	r0, r0, r5
   2e0f6:	d506      	bpl.n	2e106 <mqtt_live+0x22>
	mqtt_mutex_unlock(client);
   2e0f8:	4620      	mov	r0, r4
   2e0fa:	f7ec f9b3 	bl	1a464 <mqtt_mutex_unlock>
		return -EAGAIN;
   2e0fe:	f06f 050a 	mvn.w	r5, #10
}
   2e102:	4628      	mov	r0, r5
   2e104:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->keepalive > 0) &&
   2e106:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   2e10a:	2b00      	cmp	r3, #0
   2e10c:	d0f4      	beq.n	2e0f8 <mqtt_live+0x14>
	    (elapsed_time >= (client->keepalive * 1000))) {
   2e10e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e112:	4353      	muls	r3, r2
	if ((client->keepalive > 0) &&
   2e114:	4283      	cmp	r3, r0
   2e116:	d8ef      	bhi.n	2e0f8 <mqtt_live+0x14>
		err_code = mqtt_ping(client);
   2e118:	4620      	mov	r0, r4
   2e11a:	f7ff ffb9 	bl	2e090 <mqtt_ping>
   2e11e:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   2e120:	4620      	mov	r0, r4
   2e122:	f7ec f99f 	bl	1a464 <mqtt_mutex_unlock>
	if (ping_sent) {
   2e126:	e7ec      	b.n	2e102 <mqtt_live+0x1e>
	NULL_PARAM_CHECK(client);
   2e128:	f06f 0515 	mvn.w	r5, #21
   2e12c:	e7e9      	b.n	2e102 <mqtt_live+0x1e>

0002e12e <mqtt_keepalive_time_left>:
{
   2e12e:	b538      	push	{r3, r4, r5, lr}
   2e130:	4604      	mov	r4, r0
					client->internal.last_activity);
   2e132:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   2e134:	f7ff fe0f 	bl	2dd56 <k_uptime_get_32>
   2e138:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2e13a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2e13e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		return 0;
   2e142:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2e146:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   2e148:	b11a      	cbz	r2, 2e152 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2e14a:	4298      	cmp	r0, r3
   2e14c:	d904      	bls.n	2e158 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   2e14e:	1ac0      	subs	r0, r0, r3
}
   2e150:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   2e152:	f04f 30ff 	mov.w	r0, #4294967295
   2e156:	e7fb      	b.n	2e150 <mqtt_keepalive_time_left+0x22>
		return 0;
   2e158:	2000      	movs	r0, #0
   2e15a:	e7f9      	b.n	2e150 <mqtt_keepalive_time_left+0x22>

0002e15c <mqtt_input>:
{
   2e15c:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2e15e:	4605      	mov	r5, r0
   2e160:	b1d0      	cbz	r0, 2e198 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2e162:	f7ec f99b 	bl	1a49c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2e166:	69ab      	ldr	r3, [r5, #24]
   2e168:	079b      	lsls	r3, r3, #30
   2e16a:	d50f      	bpl.n	2e18c <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   2e16c:	6a2b      	ldr	r3, [r5, #32]
   2e16e:	b983      	cbnz	r3, 2e192 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2e170:	4628      	mov	r0, r5
   2e172:	f7ff fc79 	bl	2da68 <mqtt_handle_rx>
	if (err_code < 0) {
   2e176:	1e04      	subs	r4, r0, #0
   2e178:	da03      	bge.n	2e182 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2e17a:	4621      	mov	r1, r4
   2e17c:	4628      	mov	r0, r5
   2e17e:	f7ff fe1d 	bl	2ddbc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2e182:	4628      	mov	r0, r5
   2e184:	f7ec f96e 	bl	1a464 <mqtt_mutex_unlock>
}
   2e188:	4620      	mov	r0, r4
   2e18a:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   2e18c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2e190:	e7f7      	b.n	2e182 <mqtt_input+0x26>
		return -EBUSY;
   2e192:	f06f 040f 	mvn.w	r4, #15
   2e196:	e7f4      	b.n	2e182 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2e198:	f06f 0415 	mvn.w	r4, #21
   2e19c:	e7f4      	b.n	2e188 <mqtt_input+0x2c>

0002e19e <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   2e19e:	2301      	movs	r3, #1
   2e1a0:	f7ff be25 	b.w	2ddee <read_publish_payload>

0002e1a4 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   2e1a4:	b570      	push	{r4, r5, r6, lr}
   2e1a6:	4606      	mov	r6, r0
   2e1a8:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   2e1aa:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   2e1ac:	42ac      	cmp	r4, r5
   2e1ae:	d301      	bcc.n	2e1b4 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   2e1b0:	2000      	movs	r0, #0
}
   2e1b2:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   2e1b4:	4621      	mov	r1, r4
   2e1b6:	4630      	mov	r0, r6
   2e1b8:	1b2a      	subs	r2, r5, r4
   2e1ba:	f7ff fff0 	bl	2e19e <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   2e1be:	2800      	cmp	r0, #0
   2e1c0:	dbf7      	blt.n	2e1b2 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   2e1c2:	d001      	beq.n	2e1c8 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   2e1c4:	4404      	add	r4, r0
   2e1c6:	e7f1      	b.n	2e1ac <mqtt_readall_publish_payload+0x8>
			return -EIO;
   2e1c8:	f06f 0004 	mvn.w	r0, #4
   2e1cc:	e7f1      	b.n	2e1b2 <mqtt_readall_publish_payload+0xe>

0002e1ce <z_log_msg_static_create.constprop.0>:
   2e1ce:	2300      	movs	r3, #0
   2e1d0:	f7e1 bb0e 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002e1d4 <set_on_state>:
	__asm__ volatile(
   2e1d4:	f04f 0320 	mov.w	r3, #32
   2e1d8:	f3ef 8211 	mrs	r2, BASEPRI
   2e1dc:	f383 8812 	msr	BASEPRI_MAX, r3
   2e1e0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e1e4:	6803      	ldr	r3, [r0, #0]
   2e1e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e1ea:	f043 0302 	orr.w	r3, r3, #2
   2e1ee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e1f0:	f382 8811 	msr	BASEPRI, r2
   2e1f4:	f3bf 8f6f 	isb	sy
}
   2e1f8:	4770      	bx	lr

0002e1fa <async_start>:
{
   2e1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e1fc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e1fe:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e200:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e202:	f04f 0520 	mov.w	r5, #32
   2e206:	f3ef 8611 	mrs	r6, BASEPRI
   2e20a:	f385 8812 	msr	BASEPRI_MAX, r5
   2e20e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e212:	250c      	movs	r5, #12
   2e214:	4369      	muls	r1, r5
   2e216:	440c      	add	r4, r1
   2e218:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e21a:	f005 0c07 	and.w	ip, r5, #7
   2e21e:	f1bc 0f01 	cmp.w	ip, #1
   2e222:	d10b      	bne.n	2e23c <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e224:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   2e226:	f386 8811 	msr	BASEPRI, r6
   2e22a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e22e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2e232:	6843      	ldr	r3, [r0, #4]
   2e234:	585b      	ldr	r3, [r3, r1]
   2e236:	4798      	blx	r3
	return 0;
   2e238:	2000      	movs	r0, #0
}
   2e23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e23c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e240:	42af      	cmp	r7, r5
   2e242:	f386 8811 	msr	BASEPRI, r6
   2e246:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e24a:	bf0c      	ite	eq
   2e24c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e250:	f04f 30ff 	movne.w	r0, #4294967295
   2e254:	e7f1      	b.n	2e23a <async_start+0x40>

0002e256 <api_start>:
{
   2e256:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e258:	2480      	movs	r4, #128	; 0x80
   2e25a:	9400      	str	r4, [sp, #0]
   2e25c:	f7ff ffcd 	bl	2e1fa <async_start>
}
   2e260:	b002      	add	sp, #8
   2e262:	bd10      	pop	{r4, pc}

0002e264 <onoff_started_callback>:
	return &data->mgr[type];
   2e264:	6900      	ldr	r0, [r0, #16]
   2e266:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e268:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2e26c:	2100      	movs	r1, #0
   2e26e:	4710      	bx	r2

0002e270 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e270:	2000      	movs	r0, #0
   2e272:	f7f3 ba07 	b.w	21684 <nrfx_clock_start>

0002e276 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e276:	2000      	movs	r0, #0
   2e278:	f7f3 ba66 	b.w	21748 <nrfx_clock_stop>

0002e27c <blocking_start_callback>:
{
   2e27c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e27e:	f7f6 bf87 	b.w	25190 <z_impl_k_sem_give>

0002e282 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e282:	2280      	movs	r2, #128	; 0x80
   2e284:	f7ec bce4 	b.w	1ac50 <stop>

0002e288 <debug_hook_out_nop>:
}
   2e288:	2000      	movs	r0, #0
   2e28a:	4770      	bx	lr

0002e28c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e28c:	2000      	movs	r0, #0
   2e28e:	4770      	bx	lr

0002e290 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e290:	b538      	push	{r3, r4, r5, lr}
   2e292:	460c      	mov	r4, r1
   2e294:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e296:	f7e6 f9b3 	bl	14600 <bt_is_ready>
   2e29a:	b128      	cbz	r0, 2e2a8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e29c:	4629      	mov	r1, r5
   2e29e:	4620      	mov	r0, r4
}
   2e2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e2a4:	f7e5 b854 	b.w	13350 <bt_hci_le_rand>
}
   2e2a8:	f06f 000a 	mvn.w	r0, #10
   2e2ac:	bd38      	pop	{r3, r4, r5, pc}

0002e2ae <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2e2ae:	4608      	mov	r0, r1
   2e2b0:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2e2b2:	4611      	mov	r1, r2
   2e2b4:	f7f3 f8b4 	bl	21420 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2e2b8:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e2ba:	bf18      	it	ne
   2e2bc:	f06f 0004 	mvnne.w	r0, #4
   2e2c0:	bd08      	pop	{r3, pc}

0002e2c2 <entropy_psa_crypto_rng_init>:
{
   2e2c2:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2e2c4:	f001 f92e 	bl	2f524 <psa_crypto_init>
		return -EIO;
   2e2c8:	2800      	cmp	r0, #0
}
   2e2ca:	bf18      	it	ne
   2e2cc:	f06f 0004 	mvnne.w	r0, #4
   2e2d0:	bd08      	pop	{r3, pc}

0002e2d2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2d2:	6843      	ldr	r3, [r0, #4]
}
   2e2d4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2d6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e2d8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2e2da:	600b      	str	r3, [r1, #0]
}
   2e2dc:	4770      	bx	lr

0002e2de <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2de:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2e2e0:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2e4:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2e2e6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e2ea:	6098      	str	r0, [r3, #8]
}
   2e2ec:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e2ee:	60d9      	str	r1, [r3, #12]
   2e2f0:	4770      	bx	lr

0002e2f2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2f2:	6843      	ldr	r3, [r0, #4]
}
   2e2f4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2f6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2e2f8:	6099      	str	r1, [r3, #8]
}
   2e2fa:	4770      	bx	lr

0002e2fc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e2fc:	6843      	ldr	r3, [r0, #4]
}
   2e2fe:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e300:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2e302:	60d9      	str	r1, [r3, #12]
}
   2e304:	4770      	bx	lr

0002e306 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e306:	6843      	ldr	r3, [r0, #4]
   2e308:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e30a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2e30c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e310:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e312:	6090      	str	r0, [r2, #8]
}
   2e314:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e316:	60d3      	str	r3, [r2, #12]
   2e318:	4770      	bx	lr

0002e31a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e31a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e31c:	6843      	ldr	r3, [r0, #4]
   2e31e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e320:	7a05      	ldrb	r5, [r0, #8]
   2e322:	6844      	ldr	r4, [r0, #4]
   2e324:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e328:	42a3      	cmp	r3, r4
   2e32a:	d302      	bcc.n	2e332 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e32c:	f06f 0001 	mvn.w	r0, #1
}
   2e330:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e332:	795c      	ldrb	r4, [r3, #5]
   2e334:	428c      	cmp	r4, r1
   2e336:	d001      	beq.n	2e33c <pinctrl_lookup_state+0x22>
		(*state)++;
   2e338:	3308      	adds	r3, #8
   2e33a:	e7f0      	b.n	2e31e <pinctrl_lookup_state+0x4>
			return 0;
   2e33c:	2000      	movs	r0, #0
   2e33e:	e7f7      	b.n	2e330 <pinctrl_lookup_state+0x16>

0002e340 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e344:	4615      	mov	r5, r2
   2e346:	4681      	mov	r9, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e348:	f04f 0801 	mov.w	r8, #1
   2e34c:	b085      	sub	sp, #20
   2e34e:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e352:	454f      	cmp	r7, r9
   2e354:	d103      	bne.n	2e35e <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e356:	2000      	movs	r0, #0
}
   2e358:	b005      	add	sp, #20
   2e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e35e:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e362:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e366:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e36a:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e36c:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e370:	bf08      	it	eq
   2e372:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e376:	2b19      	cmp	r3, #25
   2e378:	d873      	bhi.n	2e462 <pinctrl_configure_pins+0x122>
   2e37a:	e8df f003 	tbb	[pc, r3]
   2e37e:	190d      	.short	0x190d
   2e380:	3325221f 	.word	0x3325221f
   2e384:	72727222 	.word	0x72727222
   2e388:	725d3872 	.word	0x725d3872
   2e38c:	72727272 	.word	0x72727272
   2e390:	72727272 	.word	0x72727272
   2e394:	6f6c6960 	.word	0x6f6c6960
			NRF_PSEL_UART(reg, TXD) = pin;
   2e398:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e39c:	a803      	add	r0, sp, #12
   2e39e:	9403      	str	r4, [sp, #12]
   2e3a0:	f7ed f82c 	bl	1b3fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e3a4:	fa08 f304 	lsl.w	r3, r8, r4
        nrf_gpio_pin_set(pin_number);
   2e3a8:	f04f 0a01 	mov.w	sl, #1
    p_reg->OUTSET = set_mask;
   2e3ac:	6083      	str	r3, [r0, #8]
   2e3ae:	e003      	b.n	2e3b8 <pinctrl_configure_pins+0x78>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e3b0:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e3b4:	f04f 0a00 	mov.w	sl, #0
        nrf_gpio_pin_set(pin_number);
   2e3b8:	46d3      	mov	fp, sl
   2e3ba:	e020      	b.n	2e3fe <pinctrl_configure_pins+0xbe>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e3bc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e3c0:	e7ec      	b.n	2e39c <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   2e3c2:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e3c6:	e7f5      	b.n	2e3b4 <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e3c8:	f04f 0a00 	mov.w	sl, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e3cc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e3d0:	a803      	add	r0, sp, #12
   2e3d2:	9403      	str	r4, [sp, #12]
   2e3d4:	f7ed f812 	bl	1b3fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e3d8:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   2e3dc:	f04f 0b01 	mov.w	fp, #1
   2e3e0:	60c3      	str	r3, [r0, #12]
   2e3e2:	e00c      	b.n	2e3fe <pinctrl_configure_pins+0xbe>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e3e4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e3e8:	f04f 0a01 	mov.w	sl, #1
   2e3ec:	e7f0      	b.n	2e3d0 <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e3ee:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e3f2:	2e00      	cmp	r6, #0
   2e3f4:	d1de      	bne.n	2e3b4 <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e3f6:	f04f 0a00 	mov.w	sl, #0
				drive = NRF_DRIVE_S0D1;
   2e3fa:	2606      	movs	r6, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e3fc:	46d3      	mov	fp, sl
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e3fe:	f859 3b04 	ldr.w	r3, [r9], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e402:	a803      	add	r0, sp, #12
   2e404:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e408:	2a00      	cmp	r2, #0
   2e40a:	bf1c      	itt	ne
   2e40c:	f04f 0b00 	movne.w	fp, #0
   2e410:	f04f 0a01 	movne.w	sl, #1
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e414:	9301      	str	r3, [sp, #4]
   2e416:	9403      	str	r4, [sp, #12]
   2e418:	f7ec fff0 	bl	1b3fc <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e41c:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e41e:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e420:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   2e424:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   2e428:	ea46 060b 	orr.w	r6, r6, fp
   2e42c:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e430:	3480      	adds	r4, #128	; 0x80
   2e432:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e436:	e78c      	b.n	2e352 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e438:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e43c:	e7d9      	b.n	2e3f2 <pinctrl_configure_pins+0xb2>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e43e:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e442:	f8d9 3000 	ldr.w	r3, [r9]
   2e446:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e44a:	2b00      	cmp	r3, #0
   2e44c:	d0cc      	beq.n	2e3e8 <pinctrl_configure_pins+0xa8>
   2e44e:	e7a5      	b.n	2e39c <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e450:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e454:	e7f5      	b.n	2e442 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e456:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e45a:	e7f2      	b.n	2e442 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e45c:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e460:	e7ef      	b.n	2e442 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   2e462:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e466:	e777      	b.n	2e358 <pinctrl_configure_pins+0x18>

0002e468 <uarte_nrfx_config_get>:
{
   2e468:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2e46a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2e46c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e470:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e474:	2000      	movs	r0, #0
   2e476:	4770      	bx	lr

0002e478 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e478:	6843      	ldr	r3, [r0, #4]
   2e47a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e47c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e480:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e484:	4770      	bx	lr

0002e486 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   2e486:	4770      	bx	lr

0002e488 <user_callback>:
	if (data->async->user_callback) {
   2e488:	6903      	ldr	r3, [r0, #16]
   2e48a:	691a      	ldr	r2, [r3, #16]
   2e48c:	6813      	ldr	r3, [r2, #0]
   2e48e:	b10b      	cbz	r3, 2e494 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2e490:	6852      	ldr	r2, [r2, #4]
   2e492:	4718      	bx	r3
}
   2e494:	4770      	bx	lr

0002e496 <notify_uart_rx_rdy>:
{
   2e496:	b570      	push	{r4, r5, r6, lr}
   2e498:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2e49a:	6906      	ldr	r6, [r0, #16]
{
   2e49c:	4604      	mov	r4, r0
   2e49e:	460d      	mov	r5, r1
	struct uart_event evt = {
   2e4a0:	2214      	movs	r2, #20
   2e4a2:	2100      	movs	r1, #0
   2e4a4:	a801      	add	r0, sp, #4
   2e4a6:	f002 f9ec 	bl	30882 <memset>
   2e4aa:	2302      	movs	r3, #2
   2e4ac:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2e4b0:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   2e4b2:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e4b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e4b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2e4b8:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e4ba:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2e4be:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2e4c0:	f7ff ffe2 	bl	2e488 <user_callback>
}
   2e4c4:	b006      	add	sp, #24
   2e4c6:	bd70      	pop	{r4, r5, r6, pc}

0002e4c8 <rx_buf_release>:
{
   2e4c8:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2e4ca:	680e      	ldr	r6, [r1, #0]
{
   2e4cc:	4605      	mov	r5, r0
   2e4ce:	460c      	mov	r4, r1
   2e4d0:	b086      	sub	sp, #24
	if (*buf) {
   2e4d2:	b17e      	cbz	r6, 2e4f4 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2e4d4:	2214      	movs	r2, #20
   2e4d6:	2100      	movs	r1, #0
   2e4d8:	a801      	add	r0, sp, #4
   2e4da:	f002 f9d2 	bl	30882 <memset>
   2e4de:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2e4e0:	4628      	mov	r0, r5
   2e4e2:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2e4e6:	f88d 3004 	strb.w	r3, [sp, #4]
   2e4ea:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2e4ec:	f7ff ffcc 	bl	2e488 <user_callback>
		*buf = NULL;
   2e4f0:	2300      	movs	r3, #0
   2e4f2:	6023      	str	r3, [r4, #0]
}
   2e4f4:	b006      	add	sp, #24
   2e4f6:	bd70      	pop	{r4, r5, r6, pc}

0002e4f8 <notify_rx_disable>:
{
   2e4f8:	b510      	push	{r4, lr}
   2e4fa:	b086      	sub	sp, #24
   2e4fc:	4604      	mov	r4, r0
	struct uart_event evt = {
   2e4fe:	2214      	movs	r2, #20
   2e500:	2100      	movs	r1, #0
   2e502:	a801      	add	r0, sp, #4
   2e504:	f002 f9bd 	bl	30882 <memset>
   2e508:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2e50a:	4620      	mov	r0, r4
   2e50c:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e50e:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2e512:	f7ff ffb9 	bl	2e488 <user_callback>
}
   2e516:	b006      	add	sp, #24
   2e518:	bd10      	pop	{r4, pc}

0002e51a <uarte_nrfx_rx_buf_rsp>:
{
   2e51a:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e51c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e51e:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e520:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2e522:	f04f 0020 	mov.w	r0, #32
   2e526:	f3ef 8611 	mrs	r6, BASEPRI
   2e52a:	f380 8812 	msr	BASEPRI_MAX, r0
   2e52e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2e532:	692c      	ldr	r4, [r5, #16]
   2e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e536:	b198      	cbz	r0, 2e560 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2e538:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e53a:	b9a0      	cbnz	r0, 2e566 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2e53c:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2e53e:	692c      	ldr	r4, [r5, #16]
   2e540:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e542:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2e546:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2e54a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2e54e:	f042 0220 	orr.w	r2, r2, #32
   2e552:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2e556:	f386 8811 	msr	BASEPRI, r6
   2e55a:	f3bf 8f6f 	isb	sy
}
   2e55e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2e560:	f06f 000c 	mvn.w	r0, #12
   2e564:	e7f7      	b.n	2e556 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2e566:	f06f 000f 	mvn.w	r0, #15
   2e56a:	e7f4      	b.n	2e556 <uarte_nrfx_rx_buf_rsp+0x3c>

0002e56c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e56c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2e56e:	6918      	ldr	r0, [r3, #16]
   2e570:	b120      	cbz	r0, 2e57c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2e572:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2e574:	691b      	ldr	r3, [r3, #16]
	return 0;
   2e576:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2e578:	605a      	str	r2, [r3, #4]
	return 0;
   2e57a:	4770      	bx	lr
		return -ENOTSUP;
   2e57c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e580:	4770      	bx	lr

0002e582 <uarte_nrfx_poll_in>:
{
   2e582:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2e584:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e586:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2e588:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   2e58a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2e58c:	b960      	cbnz	r0, 2e5a8 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e58e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e592:	b164      	cbz	r4, 2e5ae <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2e594:	69d2      	ldr	r2, [r2, #28]
   2e596:	7812      	ldrb	r2, [r2, #0]
   2e598:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e59a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e59e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5a2:	2201      	movs	r2, #1
   2e5a4:	601a      	str	r2, [r3, #0]
}
   2e5a6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2e5a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e5ac:	e7fb      	b.n	2e5a6 <uarte_nrfx_poll_in+0x24>
		return -1;
   2e5ae:	f04f 30ff 	mov.w	r0, #4294967295
   2e5b2:	e7f8      	b.n	2e5a6 <uarte_nrfx_poll_in+0x24>

0002e5b4 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e5b4:	2a00      	cmp	r2, #0
{
   2e5b6:	b510      	push	{r4, lr}
   2e5b8:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e5ba:	dd10      	ble.n	2e5de <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   2e5bc:	6843      	ldr	r3, [r0, #4]
   2e5be:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e5c0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e5c4:	b150      	cbz	r0, 2e5dc <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5c6:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   2e5c8:	6922      	ldr	r2, [r4, #16]
   2e5ca:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e5ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5d2:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   2e5d4:	69d2      	ldr	r2, [r2, #28]
   2e5d6:	7812      	ldrb	r2, [r2, #0]
   2e5d8:	700a      	strb	r2, [r1, #0]
   2e5da:	6018      	str	r0, [r3, #0]
}
   2e5dc:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2e5de:	2000      	movs	r0, #0
   2e5e0:	e7fc      	b.n	2e5dc <uarte_nrfx_fifo_read+0x28>

0002e5e2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2e5e2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e5e4:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2e5e6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2e5e8:	f04f 0020 	mov.w	r0, #32
   2e5ec:	f3ef 8311 	mrs	r3, BASEPRI
   2e5f0:	f380 8812 	msr	BASEPRI_MAX, r0
   2e5f4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2e5f8:	2000      	movs	r0, #0
   2e5fa:	68c9      	ldr	r1, [r1, #12]
   2e5fc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2e5fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2e602:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2e606:	f383 8811 	msr	BASEPRI, r3
   2e60a:	f3bf 8f6f 	isb	sy
}
   2e60e:	4770      	bx	lr

0002e610 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2e610:	2201      	movs	r2, #1
   2e612:	6903      	ldr	r3, [r0, #16]
   2e614:	68db      	ldr	r3, [r3, #12]
   2e616:	739a      	strb	r2, [r3, #14]
}
   2e618:	4770      	bx	lr

0002e61a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2e61a:	6903      	ldr	r3, [r0, #16]
   2e61c:	68db      	ldr	r3, [r3, #12]
   2e61e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e620:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2e624:	b962      	cbnz	r2, 2e640 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2e626:	6842      	ldr	r2, [r0, #4]
   2e628:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e62a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2e62e:	b140      	cbz	r0, 2e642 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2e630:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e634:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2e638:	d003      	beq.n	2e642 <uarte_nrfx_irq_tx_ready_complete+0x28>
   2e63a:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   2e63c:	6119      	str	r1, [r3, #16]
   2e63e:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e640:	2000      	movs	r0, #0
}
   2e642:	4770      	bx	lr

0002e644 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2e644:	6843      	ldr	r3, [r0, #4]
   2e646:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e648:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2e64c:	3800      	subs	r0, #0
   2e64e:	bf18      	it	ne
   2e650:	2001      	movne	r0, #1
   2e652:	4770      	bx	lr

0002e654 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2e654:	2210      	movs	r2, #16
	return config->uarte_regs;
   2e656:	6843      	ldr	r3, [r0, #4]
   2e658:	681b      	ldr	r3, [r3, #0]
   2e65a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e65e:	4770      	bx	lr

0002e660 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2e660:	2210      	movs	r2, #16
	return config->uarte_regs;
   2e662:	6843      	ldr	r3, [r0, #4]
   2e664:	681b      	ldr	r3, [r3, #0]
   2e666:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2e66a:	4770      	bx	lr

0002e66c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2e66c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2e670:	6843      	ldr	r3, [r0, #4]
   2e672:	681b      	ldr	r3, [r3, #0]
   2e674:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e678:	4770      	bx	lr

0002e67a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2e67a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2e67e:	6843      	ldr	r3, [r0, #4]
   2e680:	681b      	ldr	r3, [r3, #0]
   2e682:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2e686:	4770      	bx	lr

0002e688 <uarte_nrfx_irq_is_pending>:
{
   2e688:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e68a:	6843      	ldr	r3, [r0, #4]
{
   2e68c:	4604      	mov	r4, r0
	return config->uarte_regs;
   2e68e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2e690:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2e694:	025b      	lsls	r3, r3, #9
   2e696:	d405      	bmi.n	2e6a4 <uarte_nrfx_irq_is_pending+0x1c>
   2e698:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2e69c:	f010 0010 	ands.w	r0, r0, #16
   2e6a0:	d106      	bne.n	2e6b0 <uarte_nrfx_irq_is_pending+0x28>
}
   2e6a2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2e6a4:	f7ff ffb9 	bl	2e61a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2e6a8:	2800      	cmp	r0, #0
   2e6aa:	d0f5      	beq.n	2e698 <uarte_nrfx_irq_is_pending+0x10>
		||
   2e6ac:	2001      	movs	r0, #1
   2e6ae:	e7f8      	b.n	2e6a2 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2e6b0:	4620      	mov	r0, r4
   2e6b2:	f7ff ffc7 	bl	2e644 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2e6b6:	3800      	subs	r0, #0
   2e6b8:	bf18      	it	ne
   2e6ba:	2001      	movne	r0, #1
   2e6bc:	e7f1      	b.n	2e6a2 <uarte_nrfx_irq_is_pending+0x1a>

0002e6be <uarte_nrfx_irq_update>:
}
   2e6be:	2001      	movs	r0, #1
   2e6c0:	4770      	bx	lr

0002e6c2 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e6c2:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2e6c4:	68d8      	ldr	r0, [r3, #12]
   2e6c6:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2e6c8:	68db      	ldr	r3, [r3, #12]
   2e6ca:	605a      	str	r2, [r3, #4]
}
   2e6cc:	4770      	bx	lr

0002e6ce <uarte_enable>:
{
   2e6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2e6d0:	6907      	ldr	r7, [r0, #16]
{
   2e6d2:	4604      	mov	r4, r0
	if (data->async) {
   2e6d4:	693b      	ldr	r3, [r7, #16]
   2e6d6:	b92b      	cbnz	r3, 2e6e4 <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e6d8:	2208      	movs	r2, #8
	return config->uarte_regs;
   2e6da:	6863      	ldr	r3, [r4, #4]
   2e6dc:	681b      	ldr	r3, [r3, #0]
   2e6de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2e6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   2e6e4:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	const struct uarte_nrfx_config *config = dev->config;
   2e6e8:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   2e6ea:	4329      	orrs	r1, r5
   2e6ec:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		if (HW_RX_COUNTING_ENABLED(data) && disabled) {
   2e6f0:	693b      	ldr	r3, [r7, #16]
   2e6f2:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   2e6f6:	2b00      	cmp	r3, #0
   2e6f8:	d0ee      	beq.n	2e6d8 <uarte_enable+0xa>
   2e6fa:	2d00      	cmp	r5, #0
   2e6fc:	d1ec      	bne.n	2e6d8 <uarte_enable+0xa>
			const nrfx_timer_t *timer = &config->timer;
   2e6fe:	3610      	adds	r6, #16
			nrfx_timer_enable(timer);
   2e700:	4630      	mov	r0, r6
   2e702:	f7f3 fe17 	bl	22334 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   2e706:	693b      	ldr	r3, [r7, #16]
   2e708:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   2e70c:	42ab      	cmp	r3, r5
   2e70e:	dde3      	ble.n	2e6d8 <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   2e710:	4630      	mov	r0, r6
   2e712:	f7f3 fe91 	bl	22438 <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   2e716:	3501      	adds	r5, #1
   2e718:	e7f5      	b.n	2e706 <uarte_enable+0x38>

0002e71a <tx_start>:
{
   2e71a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e71c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2e71e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e720:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e724:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e728:	2200      	movs	r2, #0
   2e72a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   2e72e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   2e732:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e736:	685b      	ldr	r3, [r3, #4]
   2e738:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   2e73c:	06db      	lsls	r3, r3, #27
   2e73e:	d506      	bpl.n	2e74e <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2e740:	2101      	movs	r1, #1
   2e742:	f7ff ffc4 	bl	2e6ce <uarte_enable>
    p_reg->INTENSET = mask;
   2e746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2e74a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e74e:	2301      	movs	r3, #1
   2e750:	60a3      	str	r3, [r4, #8]
}
   2e752:	bd10      	pop	{r4, pc}

0002e754 <uarte_nrfx_rx_disable>:
{
   2e754:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e756:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e758:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e75a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2e75c:	692b      	ldr	r3, [r5, #16]
   2e75e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e760:	b1d2      	cbz	r2, 2e798 <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   2e762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2e764:	b153      	cbz	r3, 2e77c <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2e766:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2e76a:	f023 0320 	bic.w	r3, r3, #32
   2e76e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e772:	2300      	movs	r3, #0
   2e774:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2e778:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2e77c:	6928      	ldr	r0, [r5, #16]
   2e77e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2e780:	f001 ff64 	bl	3064c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2e784:	2000      	movs	r0, #0
   2e786:	692b      	ldr	r3, [r5, #16]
   2e788:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   2e78c:	2301      	movs	r3, #1
   2e78e:	692a      	ldr	r2, [r5, #16]
   2e790:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e794:	6063      	str	r3, [r4, #4]
}
   2e796:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e798:	f06f 000d 	mvn.w	r0, #13
   2e79c:	e7fb      	b.n	2e796 <uarte_nrfx_rx_disable+0x42>

0002e79e <setup_tx_cache>:
{
   2e79e:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2e7a0:	6903      	ldr	r3, [r0, #16]
   2e7a2:	68da      	ldr	r2, [r3, #12]
   2e7a4:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2e7a6:	1a52      	subs	r2, r2, r1
   2e7a8:	d00f      	beq.n	2e7ca <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2e7aa:	2a08      	cmp	r2, #8
   2e7ac:	bf28      	it	cs
   2e7ae:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2e7b0:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2e7b2:	6903      	ldr	r3, [r0, #16]
   2e7b4:	6999      	ldr	r1, [r3, #24]
   2e7b6:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2e7b8:	6903      	ldr	r3, [r0, #16]
   2e7ba:	6898      	ldr	r0, [r3, #8]
   2e7bc:	69d9      	ldr	r1, [r3, #28]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e7be:	4401      	add	r1, r0
   2e7c0:	6998      	ldr	r0, [r3, #24]
   2e7c2:	f002 f83e 	bl	30842 <memcpy>
	return true;
   2e7c6:	2001      	movs	r0, #1
}
   2e7c8:	bd08      	pop	{r3, pc}
		return false;
   2e7ca:	4610      	mov	r0, r2
   2e7cc:	e7fc      	b.n	2e7c8 <setup_tx_cache+0x2a>

0002e7ce <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2e7d0:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e7d2:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2e7d4:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2e7d6:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2e7da:	b1f1      	cbz	r1, 2e81a <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2e7dc:	2100      	movs	r1, #0
   2e7de:	4618      	mov	r0, r3
   2e7e0:	f002 f84f 	bl	30882 <memset>
   2e7e4:	4603      	mov	r3, r0
   2e7e6:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e7e8:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e7ec:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e7ee:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2e7f0:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e7f4:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e7f8:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e7fc:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e7fe:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e802:	2800      	cmp	r0, #0
   2e804:	d0fb      	beq.n	2e7fe <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e806:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e80a:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2e80e:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2e812:	b92b      	cbnz	r3, 2e820 <rx_flush.isra.0+0x52>
			return rx_amount;
   2e814:	b2c0      	uxtb	r0, r0
}
   2e816:	b002      	add	sp, #8
   2e818:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2e81a:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2e81c:	4669      	mov	r1, sp
   2e81e:	e7e3      	b.n	2e7e8 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2e820:	4285      	cmp	r5, r0
   2e822:	d1f7      	bne.n	2e814 <rx_flush.isra.0+0x46>
   2e824:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2e826:	4293      	cmp	r3, r2
   2e828:	d101      	bne.n	2e82e <rx_flush.isra.0+0x60>
	return 0;
   2e82a:	2000      	movs	r0, #0
   2e82c:	e7f3      	b.n	2e816 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2e82e:	f813 1b01 	ldrb.w	r1, [r3], #1
   2e832:	2900      	cmp	r1, #0
   2e834:	d0f7      	beq.n	2e826 <rx_flush.isra.0+0x58>
   2e836:	e7ed      	b.n	2e814 <rx_flush.isra.0+0x46>

0002e838 <async_uart_release>:
{
   2e838:	b570      	push	{r4, r5, r6, lr}
   2e83a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2e83c:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2e83e:	f04f 0320 	mov.w	r3, #32
   2e842:	f3ef 8611 	mrs	r6, BASEPRI
   2e846:	f383 8812 	msr	BASEPRI_MAX, r3
   2e84a:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2e84e:	6910      	ldr	r0, [r2, #16]
   2e850:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2e854:	ea23 0301 	bic.w	r3, r3, r1
   2e858:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2e85c:	6915      	ldr	r5, [r2, #16]
   2e85e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2e862:	b9eb      	cbnz	r3, 2e8a0 <async_uart_release+0x68>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2e864:	2902      	cmp	r1, #2
   2e866:	d107      	bne.n	2e878 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2e868:	2205      	movs	r2, #5
   2e86a:	6860      	ldr	r0, [r4, #4]
   2e86c:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2e870:	f7ff ffad 	bl	2e7ce <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2e874:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	struct uarte_nrfx_data *data = dev->data;
   2e878:	6925      	ldr	r5, [r4, #16]
	if (data->async && HW_RX_COUNTING_ENABLED(data)) {
   2e87a:	692b      	ldr	r3, [r5, #16]
   2e87c:	b15b      	cbz	r3, 2e896 <async_uart_release+0x5e>
   2e87e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   2e882:	b143      	cbz	r3, 2e896 <async_uart_release+0x5e>
		nrfx_timer_disable(&config->timer);
   2e884:	6860      	ldr	r0, [r4, #4]
   2e886:	3010      	adds	r0, #16
   2e888:	f7f3 fd78 	bl	2237c <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   2e88c:	2300      	movs	r3, #0
   2e88e:	692a      	ldr	r2, [r5, #16]
   2e890:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_total_user_byte_cnt = 0;
   2e892:	692a      	ldr	r2, [r5, #16]
   2e894:	6713      	str	r3, [r2, #112]	; 0x70
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e896:	2200      	movs	r2, #0
	return config->uarte_regs;
   2e898:	6863      	ldr	r3, [r4, #4]
   2e89a:	681b      	ldr	r3, [r3, #0]
   2e89c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2e8a0:	f386 8811 	msr	BASEPRI, r6
   2e8a4:	f3bf 8f6f 	isb	sy
}
   2e8a8:	bd70      	pop	{r4, r5, r6, pc}

0002e8aa <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e8aa:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e8ac:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e8ae:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e8b2:	b940      	cbnz	r0, 2e8c6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e8b4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e8b6:	079b      	lsls	r3, r3, #30
   2e8b8:	d406      	bmi.n	2e8c8 <is_tx_ready.isra.0+0x1e>
   2e8ba:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e8be:	3800      	subs	r0, #0
   2e8c0:	bf18      	it	ne
   2e8c2:	2001      	movne	r0, #1
   2e8c4:	4770      	bx	lr
   2e8c6:	2001      	movs	r0, #1
}
   2e8c8:	4770      	bx	lr

0002e8ca <start_tx_locked>:
{
   2e8ca:	b510      	push	{r4, lr}
   2e8cc:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2e8ce:	6840      	ldr	r0, [r0, #4]
   2e8d0:	f7ff ffeb 	bl	2e8aa <is_tx_ready.isra.0>
   2e8d4:	690b      	ldr	r3, [r1, #16]
   2e8d6:	b918      	cbnz	r0, 2e8e0 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2e8d8:	2201      	movs	r2, #1
   2e8da:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   2e8de:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2e8e0:	2200      	movs	r2, #0
   2e8e2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   2e8e6:	f04f 32ff 	mov.w	r2, #4294967295
   2e8ea:	690b      	ldr	r3, [r1, #16]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e8ec:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2e8ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e8f2:	690b      	ldr	r3, [r1, #16]
}
   2e8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e8f8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2e8fc:	f7ff bf0d 	b.w	2e71a <tx_start>

0002e900 <uarte_nrfx_fifo_fill>:
{
   2e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2e902:	6906      	ldr	r6, [r0, #16]
{
   2e904:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   2e906:	68f3      	ldr	r3, [r6, #12]
   2e908:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e90a:	3310      	adds	r3, #16
   2e90c:	4294      	cmp	r4, r2
   2e90e:	bfa8      	it	ge
   2e910:	4614      	movge	r4, r2
   2e912:	2201      	movs	r2, #1
   2e914:	e8d3 0fef 	ldaex	r0, [r3]
   2e918:	2800      	cmp	r0, #0
   2e91a:	d103      	bne.n	2e924 <uarte_nrfx_fifo_fill+0x24>
   2e91c:	e8c3 2fe7 	stlex	r7, r2, [r3]
   2e920:	2f00      	cmp	r7, #0
   2e922:	d1f7      	bne.n	2e914 <uarte_nrfx_fifo_fill+0x14>
   2e924:	bf0c      	ite	eq
   2e926:	4613      	moveq	r3, r2
   2e928:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2e92a:	d11f      	bne.n	2e96c <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2e92c:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e92e:	4622      	mov	r2, r4
   2e930:	6898      	ldr	r0, [r3, #8]
   2e932:	f001 ff86 	bl	30842 <memcpy>
	__asm__ volatile(
   2e936:	f04f 0320 	mov.w	r3, #32
   2e93a:	f3ef 8711 	mrs	r7, BASEPRI
   2e93e:	f383 8812 	msr	BASEPRI_MAX, r3
   2e942:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2e946:	6868      	ldr	r0, [r5, #4]
   2e948:	f7ff ffaf 	bl	2e8aa <is_tx_ready.isra.0>
   2e94c:	68f3      	ldr	r3, [r6, #12]
   2e94e:	b938      	cbnz	r0, 2e960 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   2e950:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   2e952:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   2e954:	f387 8811 	msr	BASEPRI, r7
   2e958:	f3bf 8f6f 	isb	sy
}
   2e95c:	4620      	mov	r0, r4
   2e95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2e960:	4622      	mov	r2, r4
   2e962:	4628      	mov	r0, r5
   2e964:	6899      	ldr	r1, [r3, #8]
   2e966:	f7ff fed8 	bl	2e71a <tx_start>
   2e96a:	e7f3      	b.n	2e954 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   2e96c:	461c      	mov	r4, r3
   2e96e:	e7f5      	b.n	2e95c <uarte_nrfx_fifo_fill+0x5c>

0002e970 <endtx_isr.isra.0>:
	return config->uarte_regs;
   2e970:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
   2e972:	f04f 0120 	mov.w	r1, #32
   2e976:	f3ef 8211 	mrs	r2, BASEPRI
   2e97a:	f381 8812 	msr	BASEPRI_MAX, r1
   2e97e:	f3bf 8f6f 	isb	sy
   2e982:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e986:	b131      	cbz	r1, 2e996 <endtx_isr.isra.0+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e988:	2100      	movs	r1, #0
   2e98a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2e98e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e992:	2101      	movs	r1, #1
   2e994:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2e996:	f382 8811 	msr	BASEPRI, r2
   2e99a:	f3bf 8f6f 	isb	sy
}
   2e99e:	4770      	bx	lr

0002e9a0 <uarte_nrfx_isr_int>:
{
   2e9a0:	b570      	push	{r4, r5, r6, lr}
   2e9a2:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   2e9a4:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   2e9a6:	6804      	ldr	r4, [r0, #0]
    return p_reg->INTENSET & mask;
   2e9a8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2e9ac:	05da      	lsls	r2, r3, #23
   2e9ae:	d504      	bpl.n	2e9ba <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e9b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2e9b4:	b10b      	cbz	r3, 2e9ba <uarte_nrfx_isr_int+0x1a>
		endtx_isr(dev);
   2e9b6:	f7ff ffdb 	bl	2e970 <endtx_isr.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e9ba:	6843      	ldr	r3, [r0, #4]
   2e9bc:	06db      	lsls	r3, r3, #27
   2e9be:	d51a      	bpl.n	2e9f6 <uarte_nrfx_isr_int+0x56>
	__asm__ volatile(
   2e9c0:	f04f 0320 	mov.w	r3, #32
   2e9c4:	f3ef 8211 	mrs	r2, BASEPRI
   2e9c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2e9cc:	f3bf 8f6f 	isb	sy
   2e9d0:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2e9d4:	b113      	cbz	r3, 2e9dc <uarte_nrfx_isr_int+0x3c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e9d6:	2300      	movs	r3, #0
   2e9d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2e9dc:	692b      	ldr	r3, [r5, #16]
   2e9de:	68db      	ldr	r3, [r3, #12]
   2e9e0:	b10b      	cbz	r3, 2e9e6 <uarte_nrfx_isr_int+0x46>
   2e9e2:	691b      	ldr	r3, [r3, #16]
   2e9e4:	b91b      	cbnz	r3, 2e9ee <uarte_nrfx_isr_int+0x4e>
    p_reg->INTENCLR = mask;
   2e9e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2e9ea:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	__asm__ volatile(
   2e9ee:	f382 8811 	msr	BASEPRI, r2
   2e9f2:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   2e9f6:	692b      	ldr	r3, [r5, #16]
	if (!data->int_driven) {
   2e9f8:	68d9      	ldr	r1, [r3, #12]
   2e9fa:	b169      	cbz	r1, 2ea18 <uarte_nrfx_isr_int+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e9fc:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2ea00:	b15a      	cbz	r2, 2ea1a <uarte_nrfx_isr_int+0x7a>
		data->int_driven->fifo_fill_lock = 0;
   2ea02:	2200      	movs	r2, #0
   2ea04:	610a      	str	r2, [r1, #16]
		if (data->int_driven->disable_tx_irq) {
   2ea06:	68d9      	ldr	r1, [r3, #12]
   2ea08:	7b89      	ldrb	r1, [r1, #14]
   2ea0a:	b131      	cbz	r1, 2ea1a <uarte_nrfx_isr_int+0x7a>
    p_reg->INTENCLR = mask;
   2ea0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2ea10:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2ea14:	68db      	ldr	r3, [r3, #12]
   2ea16:	739a      	strb	r2, [r3, #14]
}
   2ea18:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ea1a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2ea1e:	b122      	cbz	r2, 2ea2a <uarte_nrfx_isr_int+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ea20:	2200      	movs	r2, #0
   2ea22:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2ea26:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (data->int_driven->cb) {
   2ea2a:	68da      	ldr	r2, [r3, #12]
   2ea2c:	6813      	ldr	r3, [r2, #0]
   2ea2e:	2b00      	cmp	r3, #0
   2ea30:	d0f2      	beq.n	2ea18 <uarte_nrfx_isr_int+0x78>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2ea32:	4628      	mov	r0, r5
}
   2ea34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2ea38:	6851      	ldr	r1, [r2, #4]
   2ea3a:	4718      	bx	r3

0002ea3c <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2ea3c:	b510      	push	{r4, lr}
   2ea3e:	4604      	mov	r4, r0
   2ea40:	2200      	movs	r2, #0
   2ea42:	2101      	movs	r1, #1
   2ea44:	200a      	movs	r0, #10
   2ea46:	f7e2 fcdf 	bl	11408 <z_arm_irq_priority_set>
   2ea4a:	200a      	movs	r0, #10
   2ea4c:	f7e2 fcac 	bl	113a8 <arch_irq_enable>
   2ea50:	4620      	mov	r0, r4
   2ea52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ea56:	f7ec bef7 	b.w	1b848 <uarte_instance_init.constprop.0>

0002ea5a <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2ea5a:	b510      	push	{r4, lr}
   2ea5c:	4604      	mov	r4, r0
   2ea5e:	2200      	movs	r2, #0
   2ea60:	2101      	movs	r1, #1
   2ea62:	2008      	movs	r0, #8
   2ea64:	f7e2 fcd0 	bl	11408 <z_arm_irq_priority_set>
   2ea68:	2008      	movs	r0, #8
   2ea6a:	f7e2 fc9d 	bl	113a8 <arch_irq_enable>
   2ea6e:	4620      	mov	r0, r4
   2ea70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ea74:	f7ec bee8 	b.w	1b848 <uarte_instance_init.constprop.0>

0002ea78 <rx_timeout>:
{
   2ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2ea7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2ea7c:	6923      	ldr	r3, [r4, #16]
   2ea7e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   2ea82:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2ea86:	bb5b      	cbnz	r3, 2eae0 <rx_timeout+0x68>
    p_reg->INTENCLR = mask;
   2ea88:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2ea8a:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
   2ea8c:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   2ea8e:	6803      	ldr	r3, [r0, #0]
   2ea90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (HW_RX_COUNTING_ENABLED(data)) {
   2ea94:	6923      	ldr	r3, [r4, #16]
   2ea96:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   2ea9a:	b312      	cbz	r2, 2eae2 <rx_timeout+0x6a>
		read = nrfx_timer_capture(&cfg->timer, 0);
   2ea9c:	4639      	mov	r1, r7
   2ea9e:	3010      	adds	r0, #16
   2eaa0:	f7f3 fcf6 	bl	22490 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   2eaa4:	6923      	ldr	r3, [r4, #16]
   2eaa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2eaa8:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
   2eaaa:	bf1f      	itttt	ne
   2eaac:	66d8      	strne	r0, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2eaae:	6923      	ldrne	r3, [r4, #16]
   2eab0:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2eab2:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2eab4:	6923      	ldr	r3, [r4, #16]
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2eab6:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
		    - data->async->rx_total_user_byte_cnt;
   2eaba:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2eabe:	1a52      	subs	r2, r2, r1
	int32_t len = data->async->rx_total_byte_cnt
   2eac0:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2eac2:	b988      	cbnz	r0, 2eae8 <rx_timeout+0x70>
   2eac4:	2a00      	cmp	r2, #0
   2eac6:	da0f      	bge.n	2eae8 <rx_timeout+0x70>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2eac8:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2eacc:	6923      	ldr	r3, [r4, #16]
   2eace:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2ead2:	4281      	cmp	r1, r0
   2ead4:	d80e      	bhi.n	2eaf4 <rx_timeout+0x7c>
    p_reg->INTENSET = mask;
   2ead6:	2210      	movs	r2, #16
	return config->uarte_regs;
   2ead8:	6873      	ldr	r3, [r6, #4]
   2eada:	681b      	ldr	r3, [r3, #0]
   2eadc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		read = data->async->rx_cnt.cnt;
   2eae2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   2eae6:	e7dd      	b.n	2eaa4 <rx_timeout+0x2c>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2eae8:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2eaec:	eb02 0c01 	add.w	ip, r2, r1
   2eaf0:	4584      	cmp	ip, r0
   2eaf2:	d904      	bls.n	2eafe <rx_timeout+0x86>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2eaf4:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2eaf6:	2d00      	cmp	r5, #0
   2eaf8:	dded      	ble.n	2ead6 <rx_timeout+0x5e>
		clipped = true;
   2eafa:	2701      	movs	r7, #1
   2eafc:	e005      	b.n	2eb0a <rx_timeout+0x92>
	if (len > 0) {
   2eafe:	2a00      	cmp	r2, #0
   2eb00:	dde9      	ble.n	2ead6 <rx_timeout+0x5e>
				< data->async->rx_timeout_slab)) {
   2eb02:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2eb06:	428a      	cmp	r2, r1
   2eb08:	da12      	bge.n	2eb30 <rx_timeout+0xb8>
			notify_uart_rx_rdy(dev, len);
   2eb0a:	4629      	mov	r1, r5
   2eb0c:	4630      	mov	r0, r6
   2eb0e:	f7ff fcc2 	bl	2e496 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2eb12:	6922      	ldr	r2, [r4, #16]
   2eb14:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2eb16:	442b      	add	r3, r5
   2eb18:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2eb1a:	6922      	ldr	r2, [r4, #16]
   2eb1c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2eb1e:	442b      	add	r3, r5
   2eb20:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2eb22:	2f00      	cmp	r7, #0
   2eb24:	d0d7      	beq.n	2ead6 <rx_timeout+0x5e>
			k_timer_stop(&data->async->rx_timeout_timer);
   2eb26:	6920      	ldr	r0, [r4, #16]
   2eb28:	3080      	adds	r0, #128	; 0x80
   2eb2a:	f001 fd8f 	bl	3064c <z_impl_k_timer_stop>
}
   2eb2e:	e7d2      	b.n	2ead6 <rx_timeout+0x5e>
			data->async->rx_timeout_left -=
   2eb30:	1a52      	subs	r2, r2, r1
   2eb32:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2eb34:	e7cf      	b.n	2ead6 <rx_timeout+0x5e>

0002eb36 <uarte_nrfx_tx_abort>:
{
   2eb36:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2eb38:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2eb3a:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2eb3c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2eb3e:	691a      	ldr	r2, [r3, #16]
   2eb40:	6891      	ldr	r1, [r2, #8]
   2eb42:	b151      	cbz	r1, 2eb5a <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2eb44:	2400      	movs	r4, #0
   2eb46:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   2eb4a:	6918      	ldr	r0, [r3, #16]
   2eb4c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2eb4e:	f001 fd7d 	bl	3064c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2eb52:	2301      	movs	r3, #1
	return 0;
   2eb54:	4620      	mov	r0, r4
   2eb56:	60eb      	str	r3, [r5, #12]
}
   2eb58:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2eb5a:	f06f 000d 	mvn.w	r0, #13
   2eb5e:	e7fb      	b.n	2eb58 <uarte_nrfx_tx_abort+0x22>

0002eb60 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2eb60:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2eb62:	6818      	ldr	r0, [r3, #0]
   2eb64:	f7ff bfe7 	b.w	2eb36 <uarte_nrfx_tx_abort>

0002eb68 <api_callback_set>:
	return dev->data;
   2eb68:	6903      	ldr	r3, [r0, #16]
}
   2eb6a:	2000      	movs	r0, #0
	data->user_data = user_data;
   2eb6c:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
}
   2eb70:	4770      	bx	lr

0002eb72 <user_callback>:
	return dev->data;
   2eb72:	6902      	ldr	r2, [r0, #16]
	if (data->user_callback) {
   2eb74:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2eb76:	b10b      	cbz	r3, 2eb7c <user_callback+0xa>
		data->user_callback(dev, evt, data->user_data);
   2eb78:	6e92      	ldr	r2, [r2, #104]	; 0x68
   2eb7a:	4718      	bx	r3
}
   2eb7c:	4770      	bx	lr

0002eb7e <api_irq_tx_enable>:
	data->int_driven.tx_enabled = true;
   2eb7e:	2201      	movs	r2, #1
	return dev->data;
   2eb80:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = true;
   2eb82:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	if (data->tx_buf == NULL) {
   2eb86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   2eb88:	b912      	cbnz	r2, 2eb90 <api_irq_tx_enable+0x12>
		data->int_driven.callback(dev, data->int_driven.user_data);
   2eb8a:	e9d3 2120 	ldrd	r2, r1, [r3, #128]	; 0x80
   2eb8e:	4710      	bx	r2
}
   2eb90:	4770      	bx	lr

0002eb92 <api_irq_tx_disable>:
	data->int_driven.tx_enabled = false;
   2eb92:	2200      	movs	r2, #0
	return dev->data;
   2eb94:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = false;
   2eb96:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
   2eb9a:	4770      	bx	lr

0002eb9c <api_irq_tx_ready>:
	return dev->data;
   2eb9c:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.tx_enabled && (data->tx_buf == NULL);
   2eb9e:	f893 0194 	ldrb.w	r0, [r3, #404]	; 0x194
   2eba2:	b118      	cbz	r0, 2ebac <api_irq_tx_ready+0x10>
   2eba4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2eba6:	fab0 f080 	clz	r0, r0
   2ebaa:	0940      	lsrs	r0, r0, #5
}
   2ebac:	4770      	bx	lr

0002ebae <api_irq_callback_set>:
	return dev->data;
   2ebae:	6903      	ldr	r3, [r0, #16]
	data->int_driven.user_data = user_data;
   2ebb0:	e9c3 1220 	strd	r1, r2, [r3, #128]	; 0x80
}
   2ebb4:	4770      	bx	lr

0002ebb6 <api_irq_rx_disable>:
	data->int_driven.rx_enabled = false;
   2ebb6:	2200      	movs	r2, #0
	return dev->data;
   2ebb8:	6903      	ldr	r3, [r0, #16]
	data->int_driven.rx_enabled = false;
   2ebba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
}
   2ebbe:	4770      	bx	lr

0002ebc0 <api_irq_rx_ready>:
	return dev->data;
   2ebc0:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.rx_enabled &&
   2ebc2:	f893 0195 	ldrb.w	r0, [r3, #405]	; 0x195
   2ebc6:	b120      	cbz	r0, 2ebd2 <api_irq_rx_ready+0x12>
   2ebc8:	e9d3 3063 	ldrd	r3, r0, [r3, #396]	; 0x18c
   2ebcc:	1ac0      	subs	r0, r0, r3
   2ebce:	bf18      	it	ne
   2ebd0:	2001      	movne	r0, #1
}
   2ebd2:	4770      	bx	lr

0002ebd4 <api_irq_tx_complete>:
	return api_irq_tx_ready(dev);
   2ebd4:	f7ff bfe2 	b.w	2eb9c <api_irq_tx_ready>

0002ebd8 <api_irq_err_enable>:
	data->int_driven.err_enabled = true;
   2ebd8:	2201      	movs	r2, #1
	return dev->data;
   2ebda:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = true;
   2ebdc:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   2ebe0:	4770      	bx	lr

0002ebe2 <api_irq_err_disable>:
	data->int_driven.err_enabled = false;
   2ebe2:	2200      	movs	r2, #0
	return dev->data;
   2ebe4:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = false;
   2ebe6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   2ebea:	4770      	bx	lr

0002ebec <api_irq_is_pending>:
{
   2ebec:	b508      	push	{r3, lr}
   2ebee:	4602      	mov	r2, r0
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   2ebf0:	f7ff ffe6 	bl	2ebc0 <api_irq_rx_ready>
   2ebf4:	b930      	cbnz	r0, 2ec04 <api_irq_is_pending+0x18>
   2ebf6:	4610      	mov	r0, r2
   2ebf8:	f7ff ffd0 	bl	2eb9c <api_irq_tx_ready>
   2ebfc:	3800      	subs	r0, #0
   2ebfe:	bf18      	it	ne
   2ec00:	2001      	movne	r0, #1
}
   2ec02:	bd08      	pop	{r3, pc}
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   2ec04:	2001      	movs	r0, #1
   2ec06:	e7fc      	b.n	2ec02 <api_irq_is_pending+0x16>

0002ec08 <api_irq_update>:
}
   2ec08:	2001      	movs	r0, #1
   2ec0a:	4770      	bx	lr

0002ec0c <api_configure>:

static int api_configure(const struct device *dev, const struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   2ec0c:	79ca      	ldrb	r2, [r1, #7]
	return dev->data;
   2ec0e:	6903      	ldr	r3, [r0, #16]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   2ec10:	b922      	cbnz	r2, 2ec1c <api_configure+0x10>
		return -ENOTSUP;
	}

	return uart_configure(data->uart, cfg);
   2ec12:	6818      	ldr	r0, [r3, #0]
	if (api->configure == NULL) {
   2ec14:	6883      	ldr	r3, [r0, #8]
   2ec16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ec18:	b11b      	cbz	r3, 2ec22 <api_configure+0x16>
	return api->configure(dev, cfg);
   2ec1a:	4718      	bx	r3
		return -ENOTSUP;
   2ec1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ec20:	4770      	bx	lr
		return -ENOSYS;
   2ec22:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   2ec26:	4770      	bx	lr

0002ec28 <api_config_get>:

static int api_config_get(const struct device *dev, struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	return uart_config_get(data->uart, cfg);
   2ec28:	6903      	ldr	r3, [r0, #16]
   2ec2a:	6818      	ldr	r0, [r3, #0]
	if (api->config_get == NULL) {
   2ec2c:	6883      	ldr	r3, [r0, #8]
   2ec2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ec30:	b103      	cbz	r3, 2ec34 <api_config_get+0xc>
	return api->config_get(dev, cfg);
   2ec32:	4718      	bx	r3
}
   2ec34:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2ec38:	4770      	bx	lr

0002ec3a <req_pin_idle>:
{
   2ec3a:	b513      	push	{r0, r1, r4, lr}
	nrf_gpio_cfg(data->req_pin,
   2ec3c:	6844      	ldr	r4, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec3e:	a801      	add	r0, sp, #4
   2ec40:	9401      	str	r4, [sp, #4]
   2ec42:	f7ed f913 	bl	1be6c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ec46:	2303      	movs	r3, #3
   2ec48:	3480      	adds	r4, #128	; 0x80
   2ec4a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   2ec4e:	b002      	add	sp, #8
   2ec50:	bd10      	pop	{r4, pc}

0002ec52 <api_fifo_read>:
{
   2ec52:	b538      	push	{r3, r4, r5, lr}
   2ec54:	4603      	mov	r3, r0
	return dev->data;
   2ec56:	691d      	ldr	r5, [r3, #16]
{
   2ec58:	4608      	mov	r0, r1
	return data->int_driven.rxlen - data->int_driven.rxrd;
   2ec5a:	e9d5 4363 	ldrd	r4, r3, [r5, #396]	; 0x18c
	if (available) {
   2ec5e:	1ae4      	subs	r4, r4, r3
   2ec60:	d00d      	beq.n	2ec7e <api_fifo_read+0x2c>
		cpylen = MIN(available, size);
   2ec62:	4294      	cmp	r4, r2
   2ec64:	bf28      	it	cs
   2ec66:	4614      	movcs	r4, r2
		memcpy(rx_data,
   2ec68:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   2ec6c:	18e9      	adds	r1, r5, r3
   2ec6e:	4622      	mov	r2, r4
   2ec70:	f001 fde7 	bl	30842 <memcpy>
		data->int_driven.rxrd += cpylen;
   2ec74:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   2ec78:	4423      	add	r3, r4
   2ec7a:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
}
   2ec7e:	4620      	mov	r0, r4
   2ec80:	bd38      	pop	{r3, r4, r5, pc}

0002ec82 <api_poll_in>:
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   2ec82:	2201      	movs	r2, #1
{
   2ec84:	b508      	push	{r3, lr}
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   2ec86:	f7ff ffe4 	bl	2ec52 <api_fifo_read>
   2ec8a:	fab0 f080 	clz	r0, r0
   2ec8e:	0940      	lsrs	r0, r0, #5
}
   2ec90:	4240      	negs	r0, r0
   2ec92:	bd08      	pop	{r3, pc}

0002ec94 <api_irq_rx_enable>:
{
   2ec94:	b538      	push	{r3, r4, r5, lr}
	data->int_driven.rx_enabled = true;
   2ec96:	2301      	movs	r3, #1
	return dev->data;
   2ec98:	6904      	ldr	r4, [r0, #16]
{
   2ec9a:	4605      	mov	r5, r0
	data->int_driven.rx_enabled = true;
   2ec9c:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if (int_driven_rd_available(data)) {
   2eca0:	e9d4 3263 	ldrd	r3, r2, [r4, #396]	; 0x18c
   2eca4:	429a      	cmp	r2, r3
   2eca6:	d109      	bne.n	2ecbc <api_irq_rx_enable+0x28>
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   2eca8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   2ecac:	2b05      	cmp	r3, #5
   2ecae:	d10c      	bne.n	2ecca <api_irq_rx_enable+0x36>
		int_driven_rx_feed(dev, data);
   2ecb0:	4621      	mov	r1, r4
   2ecb2:	4628      	mov	r0, r5
}
   2ecb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		int_driven_rx_feed(dev, data);
   2ecb8:	f7ed b986 	b.w	1bfc8 <int_driven_rx_feed>
		data->int_driven.callback(dev, data->int_driven.user_data);
   2ecbc:	e9d4 3120 	ldrd	r3, r1, [r4, #128]	; 0x80
   2ecc0:	4798      	blx	r3
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   2ecc2:	e9d4 2363 	ldrd	r2, r3, [r4, #396]	; 0x18c
   2ecc6:	429a      	cmp	r2, r3
   2ecc8:	d0ee      	beq.n	2eca8 <api_irq_rx_enable+0x14>
}
   2ecca:	bd38      	pop	{r3, r4, r5, pc}

0002eccc <z_log_msg_static_create.constprop.0>:
   2eccc:	2300      	movs	r3, #0
   2ecce:	f7e0 bd8f 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002ecd2 <req_pin_set>:
{
   2ecd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrf_gpio_reconfigure(data->req_pin, &dir, &input, NULL, NULL, NULL);
   2ecd4:	6845      	ldr	r5, [r0, #4]
{
   2ecd6:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ecd8:	a801      	add	r0, sp, #4
   2ecda:	9501      	str	r5, [sp, #4]
   2ecdc:	f7ed f8c6 	bl	1be6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ece0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   2ece4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   2ece8:	f023 0303 	bic.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   2ecec:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_disable(data->req_pin);
   2ecf0:	6860      	ldr	r0, [r4, #4]
}
   2ecf2:	b003      	add	sp, #12
   2ecf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	nrfx_gpiote_trigger_disable(data->req_pin);
   2ecf8:	f7f3 b85c 	b.w	21db4 <nrfx_gpiote_trigger_disable>

0002ecfc <tx_complete>:
{
   2ecfc:	b510      	push	{r4, lr}
	if (data->tx_active) {
   2ecfe:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
   2ed02:	4604      	mov	r4, r0
	if (data->tx_active) {
   2ed04:	b163      	cbz	r3, 2ed20 <tx_complete+0x24>
	while (!nrfx_gpiote_in_is_set(data->req_pin)) {
   2ed06:	6860      	ldr	r0, [r4, #4]
   2ed08:	f7f3 f8a0 	bl	21e4c <nrfx_gpiote_in_is_set>
   2ed0c:	2800      	cmp	r0, #0
   2ed0e:	d0fa      	beq.n	2ed06 <tx_complete+0xa>
	req_pin_idle(data);
   2ed10:	4620      	mov	r0, r4
   2ed12:	f7ff ff92 	bl	2ec3a <req_pin_idle>
	data->tx_buf = NULL;
   2ed16:	2300      	movs	r3, #0
   2ed18:	64e3      	str	r3, [r4, #76]	; 0x4c
	data->tx_active = false;
   2ed1a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   2ed1e:	bd10      	pop	{r4, pc}
		req_pin_set(data);
   2ed20:	f7ff ffd7 	bl	2ecd2 <req_pin_set>
   2ed24:	e7f4      	b.n	2ed10 <tx_complete+0x14>

0002ed26 <api_rx_disable>:
{
   2ed26:	b530      	push	{r4, r5, lr}
	return dev->data;
   2ed28:	6904      	ldr	r4, [r0, #16]
{
   2ed2a:	4605      	mov	r5, r0
	if (data->rx_state == RX_OFF) {
   2ed2c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
{
   2ed30:	b087      	sub	sp, #28
	if (data->rx_state == RX_OFF) {
   2ed32:	b1e3      	cbz	r3, 2ed6e <api_rx_disable+0x48>
	data->rx_state = RX_TO_OFF;
   2ed34:	2306      	movs	r3, #6
	err = uart_rx_disable(data->uart);
   2ed36:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_OFF;
   2ed38:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	return api->rx_disable(dev);
   2ed3c:	6883      	ldr	r3, [r0, #8]
   2ed3e:	695b      	ldr	r3, [r3, #20]
   2ed40:	4798      	blx	r3
	if (err == -EFAULT) {
   2ed42:	300e      	adds	r0, #14
   2ed44:	d002      	beq.n	2ed4c <api_rx_disable+0x26>
	return 0;
   2ed46:	2000      	movs	r0, #0
}
   2ed48:	b007      	add	sp, #28
   2ed4a:	bd30      	pop	{r4, r5, pc}
		struct uart_event event = {
   2ed4c:	2214      	movs	r2, #20
   2ed4e:	2100      	movs	r1, #0
   2ed50:	a801      	add	r0, sp, #4
   2ed52:	f001 fd96 	bl	30882 <memset>
   2ed56:	2305      	movs	r3, #5
   2ed58:	f88d 3004 	strb.w	r3, [sp, #4]
		data->rx_state = RX_OFF;
   2ed5c:	2300      	movs	r3, #0
		user_callback(dev, &event);
   2ed5e:	4628      	mov	r0, r5
		data->rx_state = RX_OFF;
   2ed60:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		data->rx_buf = NULL;
   2ed64:	65a3      	str	r3, [r4, #88]	; 0x58
		user_callback(dev, &event);
   2ed66:	a901      	add	r1, sp, #4
   2ed68:	f7ff ff03 	bl	2eb72 <user_callback>
   2ed6c:	e7eb      	b.n	2ed46 <api_rx_disable+0x20>
		return -EFAULT;
   2ed6e:	f06f 000d 	mvn.w	r0, #13
   2ed72:	e7e9      	b.n	2ed48 <api_rx_disable+0x22>

0002ed74 <api_tx_abort>:
{
   2ed74:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   2ed76:	6905      	ldr	r5, [r0, #16]
{
   2ed78:	4604      	mov	r4, r0
	const uint8_t *buf = data->tx_buf;
   2ed7a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
{
   2ed7c:	b087      	sub	sp, #28
	if (data->tx_buf == NULL) {
   2ed7e:	b336      	cbz	r6, 2edce <api_tx_abort+0x5a>
   2ed80:	f105 0010 	add.w	r0, r5, #16
   2ed84:	f001 fc62 	bl	3064c <z_impl_k_timer_stop>
	__asm__ volatile(
   2ed88:	f04f 0320 	mov.w	r3, #32
   2ed8c:	f3ef 8711 	mrs	r7, BASEPRI
   2ed90:	f383 8812 	msr	BASEPRI_MAX, r3
   2ed94:	f3bf 8f6f 	isb	sy
	tx_complete(data);
   2ed98:	4628      	mov	r0, r5
   2ed9a:	f7ff ffaf 	bl	2ecfc <tx_complete>
	__asm__ volatile(
   2ed9e:	f387 8811 	msr	BASEPRI, r7
   2eda2:	f3bf 8f6f 	isb	sy
	err = uart_tx_abort(data->uart);
   2eda6:	6828      	ldr	r0, [r5, #0]
	return api->tx_abort(dev);
   2eda8:	6883      	ldr	r3, [r0, #8]
   2edaa:	689b      	ldr	r3, [r3, #8]
   2edac:	4798      	blx	r3
	if (err != -EFAULT) {
   2edae:	f110 0f0e 	cmn.w	r0, #14
   2edb2:	d10e      	bne.n	2edd2 <api_tx_abort+0x5e>
	struct uart_event event = {
   2edb4:	2100      	movs	r1, #0
   2edb6:	2214      	movs	r2, #20
   2edb8:	a801      	add	r0, sp, #4
   2edba:	f001 fd62 	bl	30882 <memset>
   2edbe:	2301      	movs	r3, #1
	user_callback(dev, &event);
   2edc0:	4620      	mov	r0, r4
   2edc2:	a901      	add	r1, sp, #4
	struct uart_event event = {
   2edc4:	f88d 3004 	strb.w	r3, [sp, #4]
   2edc8:	9602      	str	r6, [sp, #8]
	user_callback(dev, &event);
   2edca:	f7ff fed2 	bl	2eb72 <user_callback>
		return -EFAULT;
   2edce:	f06f 000d 	mvn.w	r0, #13
}
   2edd2:	b007      	add	sp, #28
   2edd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002edd6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2edd6:	4770      	bx	lr

0002edd8 <sys_clock_cycle_get_32>:
{
   2edd8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2edda:	f7ed fde7 	bl	1c9ac <z_nrf_rtc_timer_read>
}
   2edde:	bd08      	pop	{r3, pc}

0002ede0 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   2ede0:	f001 bc02 	b.w	305e8 <z_impl_k_busy_wait>

0002ede4 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   2ede4:	f001 bafb 	b.w	303de <k_is_in_isr>

0002ede8 <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   2ede8:	2000      	movs	r0, #0
   2edea:	4770      	bx	lr

0002edec <nrf91_socket_offload_setsockopt>:
{
   2edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2edf0:	460e      	mov	r6, r1
   2edf2:	4615      	mov	r5, r2
   2edf4:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   2edf6:	2300      	movs	r3, #0
{
   2edf8:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   2edfa:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2edfe:	4629      	mov	r1, r5
   2ee00:	4630      	mov	r0, r6
   2ee02:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   2ee04:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   2ee08:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2ee0a:	f7ee f9bd 	bl	1d188 <z_to_nrf_optname>
   2ee0e:	2800      	cmp	r0, #0
   2ee10:	da08      	bge.n	2ee24 <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   2ee12:	f7fd f8a7 	bl	2bf64 <__errno>
   2ee16:	236d      	movs	r3, #109	; 0x6d
   2ee18:	6003      	str	r3, [r0, #0]
		return -1;
   2ee1a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ee1e:	b006      	add	sp, #24
   2ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2ee24:	2e01      	cmp	r6, #1
   2ee26:	d111      	bne.n	2ee4c <nrf91_socket_offload_setsockopt+0x60>
   2ee28:	3d14      	subs	r5, #20
   2ee2a:	2d01      	cmp	r5, #1
   2ee2c:	d806      	bhi.n	2ee3c <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   2ee2e:	b12c      	cbz	r4, 2ee3c <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   2ee30:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2ee32:	6823      	ldr	r3, [r4, #0]
   2ee34:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2ee36:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   2ee38:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2ee3a:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2ee3c:	4623      	mov	r3, r4
   2ee3e:	4631      	mov	r1, r6
   2ee40:	4640      	mov	r0, r8
   2ee42:	9a03      	ldr	r2, [sp, #12]
   2ee44:	9700      	str	r7, [sp, #0]
   2ee46:	f7f4 fd47 	bl	238d8 <nrf_setsockopt>
	return retval;
   2ee4a:	e7e8      	b.n	2ee1e <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2ee4c:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   2ee50:	d1f4      	bne.n	2ee3c <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2ee52:	2d0c      	cmp	r5, #12
   2ee54:	bf08      	it	eq
   2ee56:	2704      	moveq	r7, #4
   2ee58:	e7f0      	b.n	2ee3c <nrf91_socket_offload_setsockopt+0x50>

0002ee5a <nrf91_socket_offload_getsockopt>:
{
   2ee5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ee5e:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2ee60:	2300      	movs	r3, #0
{
   2ee62:	b086      	sub	sp, #24
   2ee64:	460f      	mov	r7, r1
   2ee66:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   2ee68:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   2ee6c:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   2ee6e:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2ee70:	4629      	mov	r1, r5
   2ee72:	4638      	mov	r0, r7
   2ee74:	eb0d 0203 	add.w	r2, sp, r3
{
   2ee78:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   2ee7c:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   2ee7e:	f7ee f983 	bl	1d188 <z_to_nrf_optname>
   2ee82:	2800      	cmp	r0, #0
   2ee84:	da09      	bge.n	2ee9a <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   2ee86:	f7fd f86d 	bl	2bf64 <__errno>
   2ee8a:	236d      	movs	r3, #109	; 0x6d
		return -1;
   2ee8c:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   2ee90:	6003      	str	r3, [r0, #0]
}
   2ee92:	4630      	mov	r0, r6
   2ee94:	b006      	add	sp, #24
   2ee96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2ee9a:	2f01      	cmp	r7, #1
   2ee9c:	d11c      	bne.n	2eed8 <nrf91_socket_offload_getsockopt+0x7e>
   2ee9e:	f1a5 0314 	sub.w	r3, r5, #20
   2eea2:	2b01      	cmp	r3, #1
   2eea4:	d818      	bhi.n	2eed8 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   2eea6:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   2eea8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2eeaa:	4630      	mov	r0, r6
   2eeac:	9200      	str	r2, [sp, #0]
   2eeae:	4639      	mov	r1, r7
   2eeb0:	9a02      	ldr	r2, [sp, #8]
   2eeb2:	f7f4 fe4f 	bl	23b54 <nrf_getsockopt>
	if (retval == 0) {
   2eeb6:	4606      	mov	r6, r0
   2eeb8:	2800      	cmp	r0, #0
   2eeba:	d1ea      	bne.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   2eebc:	2f01      	cmp	r7, #1
   2eebe:	d1e8      	bne.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   2eec0:	2d04      	cmp	r5, #4
   2eec2:	d10c      	bne.n	2eede <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   2eec4:	6820      	ldr	r0, [r4, #0]
   2eec6:	2800      	cmp	r0, #0
   2eec8:	d0e3      	beq.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   2eeca:	f7ee f84b 	bl	1cf64 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   2eece:	f7fd f849 	bl	2bf64 <__errno>
   2eed2:	6803      	ldr	r3, [r0, #0]
   2eed4:	6023      	str	r3, [r4, #0]
   2eed6:	e7dc      	b.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   2eed8:	4642      	mov	r2, r8
   2eeda:	4623      	mov	r3, r4
   2eedc:	e7e5      	b.n	2eeaa <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   2eede:	3d14      	subs	r5, #20
   2eee0:	2d01      	cmp	r5, #1
   2eee2:	d8d6      	bhi.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   2eee4:	9b04      	ldr	r3, [sp, #16]
   2eee6:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   2eeea:	9b05      	ldr	r3, [sp, #20]
   2eeec:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   2eeee:	2310      	movs	r3, #16
   2eef0:	f8c8 3000 	str.w	r3, [r8]
   2eef4:	e7cd      	b.n	2ee92 <nrf91_socket_offload_getsockopt+0x38>

0002eef6 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2eef6:	6800      	ldr	r0, [r0, #0]
   2eef8:	f000 bf06 	b.w	2fd08 <nrf_listen>

0002eefc <nrf91_socket_offload_freeaddrinfo>:
{
   2eefc:	b538      	push	{r3, r4, r5, lr}
   2eefe:	4604      	mov	r4, r0
	while (next != NULL) {
   2ef00:	b904      	cbnz	r4, 2ef04 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2ef02:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2ef04:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2ef06:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2ef08:	f001 fc60 	bl	307cc <k_free>
		k_free(this);
   2ef0c:	4620      	mov	r0, r4
   2ef0e:	f001 fc5d 	bl	307cc <k_free>
		next = next->ai_next;
   2ef12:	462c      	mov	r4, r5
   2ef14:	e7f4      	b.n	2ef00 <nrf91_socket_offload_freeaddrinfo+0x4>

0002ef16 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2ef16:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2ef18:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2ef1a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2ef1c:	4603      	mov	r3, r0
{
   2ef1e:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2ef20:	f823 2b04 	strh.w	r2, [r3], #4
   2ef24:	f101 0420 	add.w	r4, r1, #32
   2ef28:	f101 0210 	add.w	r2, r1, #16
   2ef2c:	f852 5b04 	ldr.w	r5, [r2], #4
   2ef30:	42a2      	cmp	r2, r4
   2ef32:	f843 5b04 	str.w	r5, [r3], #4
   2ef36:	d1f9      	bne.n	2ef2c <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2ef38:	6a0b      	ldr	r3, [r1, #32]
   2ef3a:	7503      	strb	r3, [r0, #20]
}
   2ef3c:	bd30      	pop	{r4, r5, pc}

0002ef3e <z_to_nrf_ipv6>:
{
   2ef3e:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2ef40:	2124      	movs	r1, #36	; 0x24
{
   2ef42:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2ef44:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2ef46:	8841      	ldrh	r1, [r0, #2]
{
   2ef48:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2ef4a:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2ef4c:	2102      	movs	r1, #2
   2ef4e:	1d04      	adds	r4, r0, #4
   2ef50:	6059      	str	r1, [r3, #4]
   2ef52:	f103 0610 	add.w	r6, r3, #16
   2ef56:	f100 0714 	add.w	r7, r0, #20
   2ef5a:	4635      	mov	r5, r6
   2ef5c:	6820      	ldr	r0, [r4, #0]
   2ef5e:	6861      	ldr	r1, [r4, #4]
   2ef60:	3408      	adds	r4, #8
   2ef62:	c503      	stmia	r5!, {r0, r1}
   2ef64:	42bc      	cmp	r4, r7
   2ef66:	462e      	mov	r6, r5
   2ef68:	d1f7      	bne.n	2ef5a <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2ef6a:	7d12      	ldrb	r2, [r2, #20]
   2ef6c:	621a      	str	r2, [r3, #32]
}
   2ef6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ef70 <nrf91_socket_offload_sendto>:
{
   2ef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ef74:	4604      	mov	r4, r0
   2ef76:	b08c      	sub	sp, #48	; 0x30
   2ef78:	9812      	ldr	r0, [sp, #72]	; 0x48
   2ef7a:	460d      	mov	r5, r1
   2ef7c:	4616      	mov	r6, r2
   2ef7e:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2ef80:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   2ef82:	b930      	cbnz	r0, 2ef92 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   2ef84:	9013      	str	r0, [sp, #76]	; 0x4c
   2ef86:	4620      	mov	r0, r4
}
   2ef88:	b00c      	add	sp, #48	; 0x30
   2ef8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   2ef8e:	f7f4 bb97 	b.w	236c0 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   2ef92:	f8b0 c000 	ldrh.w	ip, [r0]
   2ef96:	f1bc 0f01 	cmp.w	ip, #1
   2ef9a:	d112      	bne.n	2efc2 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2ef9c:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   2ef9e:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2efa0:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2efa2:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2efa6:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   2efa8:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   2efaa:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2efae:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   2efb2:	9501      	str	r5, [sp, #4]
   2efb4:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   2efb6:	4620      	mov	r0, r4
   2efb8:	f7f4 fb82 	bl	236c0 <nrf_sendto>
}
   2efbc:	b00c      	add	sp, #48	; 0x30
   2efbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   2efc2:	f1bc 0f02 	cmp.w	ip, #2
   2efc6:	d10b      	bne.n	2efe0 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   2efc8:	f10d 080c 	add.w	r8, sp, #12
   2efcc:	4641      	mov	r1, r8
   2efce:	f7ff ffb6 	bl	2ef3e <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   2efd2:	2324      	movs	r3, #36	; 0x24
   2efd4:	4632      	mov	r2, r6
   2efd6:	e9cd 8300 	strd	r8, r3, [sp]
   2efda:	4629      	mov	r1, r5
   2efdc:	463b      	mov	r3, r7
   2efde:	e7ea      	b.n	2efb6 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   2efe0:	f7fc ffc0 	bl	2bf64 <__errno>
   2efe4:	236a      	movs	r3, #106	; 0x6a
   2efe6:	6003      	str	r3, [r0, #0]
		retval = -1;
   2efe8:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   2efec:	e7e6      	b.n	2efbc <nrf91_socket_offload_sendto+0x4c>

0002efee <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2efee:	2300      	movs	r3, #0
{
   2eff0:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2eff2:	e9cd 3300 	strd	r3, r3, [sp]
   2eff6:	f7ff ffbb 	bl	2ef70 <nrf91_socket_offload_sendto>
}
   2effa:	b003      	add	sp, #12
   2effc:	f85d fb04 	ldr.w	pc, [sp], #4

0002f000 <nrf91_socket_offload_connect>:
{
   2f000:	4603      	mov	r3, r0
   2f002:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2f004:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2f006:	880b      	ldrh	r3, [r1, #0]
{
   2f008:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2f00a:	2b01      	cmp	r3, #1
{
   2f00c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2f00e:	d10e      	bne.n	2f02e <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f010:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2f012:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   2f014:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f016:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f018:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   2f01c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f020:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   2f022:	4620      	mov	r0, r4
   2f024:	a901      	add	r1, sp, #4
   2f026:	f000 fd8c 	bl	2fb42 <nrf_connect>
}
   2f02a:	b00a      	add	sp, #40	; 0x28
   2f02c:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2f02e:	2b02      	cmp	r3, #2
   2f030:	d104      	bne.n	2f03c <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   2f032:	a901      	add	r1, sp, #4
   2f034:	f7ff ff83 	bl	2ef3e <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   2f038:	2224      	movs	r2, #36	; 0x24
   2f03a:	e7f2      	b.n	2f022 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2f03c:	4620      	mov	r0, r4
}
   2f03e:	b00a      	add	sp, #40	; 0x28
   2f040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2f044:	f000 bd7d 	b.w	2fb42 <nrf_connect>

0002f048 <nrf91_socket_offload_bind>:
{
   2f048:	4603      	mov	r3, r0
   2f04a:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2f04c:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2f04e:	880b      	ldrh	r3, [r1, #0]
{
   2f050:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2f052:	2b01      	cmp	r3, #1
{
   2f054:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2f056:	d10e      	bne.n	2f076 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f058:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2f05a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   2f05c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f05e:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2f060:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   2f064:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2f068:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2f06a:	4620      	mov	r0, r4
   2f06c:	a901      	add	r1, sp, #4
   2f06e:	f000 fe02 	bl	2fc76 <nrf_bind>
}
   2f072:	b00a      	add	sp, #40	; 0x28
   2f074:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2f076:	2b02      	cmp	r3, #2
   2f078:	d104      	bne.n	2f084 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   2f07a:	a901      	add	r1, sp, #4
   2f07c:	f7ff ff5f 	bl	2ef3e <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2f080:	2224      	movs	r2, #36	; 0x24
   2f082:	e7f2      	b.n	2f06a <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   2f084:	f7fc ff6e 	bl	2bf64 <__errno>
   2f088:	236a      	movs	r3, #106	; 0x6a
   2f08a:	6003      	str	r3, [r0, #0]
		retval = -1;
   2f08c:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   2f090:	e7ef      	b.n	2f072 <nrf91_socket_offload_bind+0x2a>

0002f092 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2f092:	f7f5 be1b 	b.w	24ccc <z_impl_k_mutex_lock>

0002f096 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2f096:	f7f5 bee9 	b.w	24e6c <z_impl_k_mutex_unlock>

0002f09a <nrf91_socket_offload_recvfrom>:
{
   2f09a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f09e:	4605      	mov	r5, r0
	if (ctx->lock) {
   2f0a0:	6840      	ldr	r0, [r0, #4]
{
   2f0a2:	b08d      	sub	sp, #52	; 0x34
   2f0a4:	460c      	mov	r4, r1
   2f0a6:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   2f0aa:	4691      	mov	r9, r2
   2f0ac:	469a      	mov	sl, r3
	if (ctx->lock) {
   2f0ae:	b108      	cbz	r0, 2f0b4 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   2f0b0:	f7ff fff1 	bl	2f096 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2f0b4:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   2f0b8:	b106      	cbz	r6, 2f0bc <nrf91_socket_offload_recvfrom+0x22>
   2f0ba:	b9af      	cbnz	r7, 2f0e8 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2f0bc:	2300      	movs	r3, #0
   2f0be:	4621      	mov	r1, r4
   2f0c0:	e9cd 3300 	strd	r3, r3, [sp]
   2f0c4:	464a      	mov	r2, r9
   2f0c6:	4653      	mov	r3, sl
   2f0c8:	4658      	mov	r0, fp
   2f0ca:	f000 fee2 	bl	2fe92 <nrf_recvfrom>
   2f0ce:	4604      	mov	r4, r0
	if (ctx->lock) {
   2f0d0:	6868      	ldr	r0, [r5, #4]
   2f0d2:	b128      	cbz	r0, 2f0e0 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   2f0d4:	f04f 32ff 	mov.w	r2, #4294967295
   2f0d8:	f04f 33ff 	mov.w	r3, #4294967295
   2f0dc:	f7ff ffd9 	bl	2f092 <k_mutex_lock.constprop.0.isra.0>
}
   2f0e0:	4620      	mov	r0, r4
   2f0e2:	b00d      	add	sp, #52	; 0x34
   2f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   2f0e8:	f10d 080c 	add.w	r8, sp, #12
   2f0ec:	2224      	movs	r2, #36	; 0x24
   2f0ee:	2100      	movs	r1, #0
   2f0f0:	4640      	mov	r0, r8
   2f0f2:	f001 fbc6 	bl	30882 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2f0f6:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2f0f8:	ab02      	add	r3, sp, #8
   2f0fa:	4621      	mov	r1, r4
   2f0fc:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2f100:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   2f102:	4653      	mov	r3, sl
   2f104:	464a      	mov	r2, r9
   2f106:	4658      	mov	r0, fp
   2f108:	f000 fec3 	bl	2fe92 <nrf_recvfrom>
		if (retval < 0) {
   2f10c:	1e04      	subs	r4, r0, #0
   2f10e:	dbdf      	blt.n	2f0d0 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   2f110:	9b04      	ldr	r3, [sp, #16]
   2f112:	2b01      	cmp	r3, #1
   2f114:	d10b      	bne.n	2f12e <nrf91_socket_offload_recvfrom+0x94>
   2f116:	9a02      	ldr	r2, [sp, #8]
   2f118:	2a10      	cmp	r2, #16
   2f11a:	d1d9      	bne.n	2f0d0 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   2f11c:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f11e:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   2f120:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2f124:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2f126:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   2f128:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   2f12a:	603b      	str	r3, [r7, #0]
   2f12c:	e7d0      	b.n	2f0d0 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   2f12e:	2b02      	cmp	r3, #2
   2f130:	d1ce      	bne.n	2f0d0 <nrf91_socket_offload_recvfrom+0x36>
   2f132:	9b02      	ldr	r3, [sp, #8]
   2f134:	2b24      	cmp	r3, #36	; 0x24
   2f136:	d1cb      	bne.n	2f0d0 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2f138:	4641      	mov	r1, r8
   2f13a:	4630      	mov	r0, r6
   2f13c:	f7ff feeb 	bl	2ef16 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2f140:	2318      	movs	r3, #24
   2f142:	e7f2      	b.n	2f12a <nrf91_socket_offload_recvfrom+0x90>

0002f144 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2f144:	2300      	movs	r3, #0
{
   2f146:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2f148:	e9cd 3300 	strd	r3, r3, [sp]
   2f14c:	f7ff ffa5 	bl	2f09a <nrf91_socket_offload_recvfrom>
}
   2f150:	b003      	add	sp, #12
   2f152:	f85d fb04 	ldr.w	pc, [sp], #4

0002f156 <nrf91_socket_offload_close>:
{
   2f156:	b538      	push	{r3, r4, r5, lr}
   2f158:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   2f15a:	6800      	ldr	r0, [r0, #0]
   2f15c:	f7f4 fa7c 	bl	23658 <nrf_close>
	if (retval == 0) {
   2f160:	4604      	mov	r4, r0
   2f162:	b910      	cbnz	r0, 2f16a <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   2f164:	4628      	mov	r0, r5
   2f166:	f7ee fa05 	bl	1d574 <release_ctx>
}
   2f16a:	4620      	mov	r0, r4
   2f16c:	bd38      	pop	{r3, r4, r5, pc}

0002f16e <z_log_msg_static_create.constprop.0>:
   2f16e:	2300      	movs	r3, #0
   2f170:	f7e0 bb3e 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002f174 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2f174:	ea40 0301 	orr.w	r3, r0, r1
   2f178:	2b0f      	cmp	r3, #15
   2f17a:	d801      	bhi.n	2f180 <dk_set_leds_state+0xc>
   2f17c:	f7ee bd24 	b.w	1dbc8 <dk_set_leds_state.part.0>
}
   2f180:	f06f 0015 	mvn.w	r0, #21
   2f184:	4770      	bx	lr

0002f186 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   2f186:	210f      	movs	r1, #15
   2f188:	f7ff bff4 	b.w	2f174 <dk_set_leds_state>

0002f18c <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2f18c:	2101      	movs	r1, #1
   2f18e:	f7ee bfbf 	b.w	1e110 <dk_set_led>

0002f192 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   2f192:	2100      	movs	r1, #0
   2f194:	f7ee bfbc 	b.w	1e110 <dk_set_led>

0002f198 <response_handler>:
	write_uart_string(response);
   2f198:	f7ef b8fc 	b.w	1e394 <write_uart_string>

0002f19c <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2f19c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   2f1a0:	b2db      	uxtb	r3, r3
   2f1a2:	2b08      	cmp	r3, #8
   2f1a4:	bf9d      	ittte	ls
   2f1a6:	f240 1005 	movwls	r0, #261	; 0x105
   2f1aa:	40d8      	lsrls	r0, r3
   2f1ac:	f000 0001 	andls.w	r0, r0, #1
{
   2f1b0:	2000      	movhi	r0, #0
}
   2f1b2:	4770      	bx	lr

0002f1b4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2f1b4:	280d      	cmp	r0, #13
   2f1b6:	d004      	beq.n	2f1c2 <is_lfcr+0xe>
   2f1b8:	f1a0 030a 	sub.w	r3, r0, #10
   2f1bc:	4258      	negs	r0, r3
   2f1be:	4158      	adcs	r0, r3
   2f1c0:	4770      	bx	lr
		return true;
   2f1c2:	2001      	movs	r0, #1
}
   2f1c4:	4770      	bx	lr

0002f1c6 <skip_command_prefix>:
{
   2f1c6:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2f1c8:	6801      	ldr	r1, [r0, #0]
{
   2f1ca:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2f1cc:	1c8b      	adds	r3, r1, #2
   2f1ce:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2f1d0:	788c      	ldrb	r4, [r1, #2]
   2f1d2:	4620      	mov	r0, r4
   2f1d4:	f7ff ffee 	bl	2f1b4 <is_lfcr>
   2f1d8:	b910      	cbnz	r0, 2f1e0 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2f1da:	b10c      	cbz	r4, 2f1e0 <skip_command_prefix+0x1a>
	(*cmd)++;
   2f1dc:	3103      	adds	r1, #3
   2f1de:	6011      	str	r1, [r2, #0]
}
   2f1e0:	bd10      	pop	{r4, pc}

0002f1e2 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2f1e2:	6813      	ldr	r3, [r2, #0]
   2f1e4:	f7ef bcec 	b.w	1ebc0 <at_parser_max_params_from_str>

0002f1e8 <at_params_list_init>:
{
   2f1e8:	b538      	push	{r3, r4, r5, lr}
   2f1ea:	460d      	mov	r5, r1
	if (list == NULL) {
   2f1ec:	4604      	mov	r4, r0
   2f1ee:	b140      	cbz	r0, 2f202 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2f1f0:	2110      	movs	r1, #16
   2f1f2:	4628      	mov	r0, r5
   2f1f4:	f001 faf5 	bl	307e2 <k_calloc>
   2f1f8:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2f1fa:	b128      	cbz	r0, 2f208 <at_params_list_init+0x20>
	return 0;
   2f1fc:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2f1fe:	6025      	str	r5, [r4, #0]
}
   2f200:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f202:	f06f 0015 	mvn.w	r0, #21
   2f206:	e7fb      	b.n	2f200 <at_params_list_init+0x18>
		return -ENOMEM;
   2f208:	f06f 000b 	mvn.w	r0, #11
   2f20c:	e7f8      	b.n	2f200 <at_params_list_init+0x18>

0002f20e <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2f20e:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2f210:	4604      	mov	r4, r0
   2f212:	b148      	cbz	r0, 2f228 <at_params_list_free+0x1a>
   2f214:	6843      	ldr	r3, [r0, #4]
   2f216:	b13b      	cbz	r3, 2f228 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2f218:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2f21a:	f7ef fde5 	bl	1ede8 <at_params_list_clear>
	k_free(list->params);
   2f21e:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2f220:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2f222:	f001 fad3 	bl	307cc <k_free>
	list->params = NULL;
   2f226:	6065      	str	r5, [r4, #4]
}
   2f228:	bd38      	pop	{r3, r4, r5, pc}

0002f22a <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2f22a:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2f22c:	b178      	cbz	r0, 2f24e <at_params_empty_put+0x24>
   2f22e:	6843      	ldr	r3, [r0, #4]
   2f230:	b16b      	cbz	r3, 2f24e <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f232:	f7ef fd71 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f236:	4604      	mov	r4, r0
   2f238:	b148      	cbz	r0, 2f24e <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   2f23a:	f7ef fdb1 	bl	1eda0 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   2f23e:	2304      	movs	r3, #4
	param->value.int_val = 0;
   2f240:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2f242:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2f244:	2300      	movs	r3, #0

	return 0;
   2f246:	2000      	movs	r0, #0
	param->value.int_val = 0;
   2f248:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   2f24c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f24e:	f06f 0015 	mvn.w	r0, #21
   2f252:	e7fb      	b.n	2f24c <at_params_empty_put+0x22>

0002f254 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   2f254:	b570      	push	{r4, r5, r6, lr}
   2f256:	4616      	mov	r6, r2
   2f258:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   2f25a:	b168      	cbz	r0, 2f278 <at_params_int_put+0x24>
   2f25c:	6843      	ldr	r3, [r0, #4]
   2f25e:	b15b      	cbz	r3, 2f278 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f260:	f7ef fd5a 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f264:	4604      	mov	r4, r0
   2f266:	b138      	cbz	r0, 2f278 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   2f268:	f7ef fd9a 	bl	1eda0 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   2f26c:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   2f26e:	2000      	movs	r0, #0
	param->value.int_val = value;
   2f270:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   2f274:	7023      	strb	r3, [r4, #0]
}
   2f276:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f278:	f06f 0015 	mvn.w	r0, #21
   2f27c:	e7fb      	b.n	2f276 <at_params_int_put+0x22>

0002f27e <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2f27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f280:	4617      	mov	r7, r2
   2f282:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2f284:	b1c0      	cbz	r0, 2f2b8 <at_params_string_put+0x3a>
   2f286:	6843      	ldr	r3, [r0, #4]
   2f288:	b1b3      	cbz	r3, 2f2b8 <at_params_string_put+0x3a>
   2f28a:	b1aa      	cbz	r2, 2f2b8 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f28c:	f7ef fd44 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f290:	4604      	mov	r4, r0
   2f292:	b188      	cbz	r0, 2f2b8 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   2f294:	1c68      	adds	r0, r5, #1
   2f296:	f001 faa0 	bl	307da <k_malloc>

	if (param_value == NULL) {
   2f29a:	4606      	mov	r6, r0
   2f29c:	b178      	cbz	r0, 2f2be <at_params_string_put+0x40>
   2f29e:	462a      	mov	r2, r5
   2f2a0:	4639      	mov	r1, r7
   2f2a2:	f001 face 	bl	30842 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   2f2a6:	4620      	mov	r0, r4
   2f2a8:	f7ef fd7a 	bl	1eda0 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   2f2ac:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   2f2ae:	2000      	movs	r0, #0
	param->size = str_len;
   2f2b0:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2f2b2:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2f2b4:	60a6      	str	r6, [r4, #8]
}
   2f2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2f2b8:	f06f 0015 	mvn.w	r0, #21
   2f2bc:	e7fb      	b.n	2f2b6 <at_params_string_put+0x38>
		return -ENOMEM;
   2f2be:	f06f 000b 	mvn.w	r0, #11
   2f2c2:	e7f8      	b.n	2f2b6 <at_params_string_put+0x38>

0002f2c4 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2f2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f2c6:	4617      	mov	r7, r2
   2f2c8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2f2ca:	b1c0      	cbz	r0, 2f2fe <at_params_array_put+0x3a>
   2f2cc:	6843      	ldr	r3, [r0, #4]
   2f2ce:	b1b3      	cbz	r3, 2f2fe <at_params_array_put+0x3a>
   2f2d0:	b1aa      	cbz	r2, 2f2fe <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f2d2:	f7ef fd21 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f2d6:	4604      	mov	r4, r0
   2f2d8:	b188      	cbz	r0, 2f2fe <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2f2da:	4628      	mov	r0, r5
   2f2dc:	f001 fa7d 	bl	307da <k_malloc>

	if (param_value == NULL) {
   2f2e0:	4606      	mov	r6, r0
   2f2e2:	b178      	cbz	r0, 2f304 <at_params_array_put+0x40>
   2f2e4:	462a      	mov	r2, r5
   2f2e6:	4639      	mov	r1, r7
   2f2e8:	f001 faab 	bl	30842 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   2f2ec:	4620      	mov	r0, r4
   2f2ee:	f7ef fd57 	bl	1eda0 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2f2f2:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   2f2f4:	2000      	movs	r0, #0
	param->size = array_len;
   2f2f6:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2f2f8:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2f2fa:	60a6      	str	r6, [r4, #8]
}
   2f2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2f2fe:	f06f 0015 	mvn.w	r0, #21
   2f302:	e7fb      	b.n	2f2fc <at_params_array_put+0x38>
		return -ENOMEM;
   2f304:	f06f 000b 	mvn.w	r0, #11
   2f308:	e7f8      	b.n	2f2fc <at_params_array_put+0x38>

0002f30a <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   2f30a:	b510      	push	{r4, lr}
   2f30c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2f30e:	b1b0      	cbz	r0, 2f33e <at_params_short_get+0x34>
   2f310:	6843      	ldr	r3, [r0, #4]
   2f312:	b1a3      	cbz	r3, 2f33e <at_params_short_get+0x34>
   2f314:	b19a      	cbz	r2, 2f33e <at_params_short_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f316:	f7ef fcff 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f31a:	b180      	cbz	r0, 2f33e <at_params_short_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2f31c:	7803      	ldrb	r3, [r0, #0]
   2f31e:	2b01      	cmp	r3, #1
   2f320:	d10d      	bne.n	2f33e <at_params_short_get+0x34>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   2f322:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2f326:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   2f32a:	f142 0200 	adc.w	r2, r2, #0
   2f32e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2f332:	f172 0200 	sbcs.w	r2, r2, #0
   2f336:	d202      	bcs.n	2f33e <at_params_short_get+0x34>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   2f338:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   2f33a:	8023      	strh	r3, [r4, #0]
}
   2f33c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f33e:	f06f 0015 	mvn.w	r0, #21
   2f342:	e7fb      	b.n	2f33c <at_params_short_get+0x32>

0002f344 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2f344:	b510      	push	{r4, lr}
   2f346:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2f348:	b190      	cbz	r0, 2f370 <at_params_unsigned_short_get+0x2c>
   2f34a:	6843      	ldr	r3, [r0, #4]
   2f34c:	b183      	cbz	r3, 2f370 <at_params_unsigned_short_get+0x2c>
   2f34e:	b17a      	cbz	r2, 2f370 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f350:	f7ef fce2 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f354:	b160      	cbz	r0, 2f370 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2f356:	7803      	ldrb	r3, [r0, #0]
   2f358:	2b01      	cmp	r3, #1
   2f35a:	d109      	bne.n	2f370 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   2f35c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2f360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2f364:	f172 0200 	sbcs.w	r2, r2, #0
   2f368:	d202      	bcs.n	2f370 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   2f36a:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2f36c:	8023      	strh	r3, [r4, #0]
}
   2f36e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f370:	f06f 0015 	mvn.w	r0, #21
   2f374:	e7fb      	b.n	2f36e <at_params_unsigned_short_get+0x2a>

0002f376 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   2f376:	b510      	push	{r4, lr}
   2f378:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2f37a:	b190      	cbz	r0, 2f3a2 <at_params_int_get+0x2c>
   2f37c:	6843      	ldr	r3, [r0, #4]
   2f37e:	b183      	cbz	r3, 2f3a2 <at_params_int_get+0x2c>
   2f380:	b17a      	cbz	r2, 2f3a2 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f382:	f7ef fcc9 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f386:	b160      	cbz	r0, 2f3a2 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2f388:	7803      	ldrb	r3, [r0, #0]
   2f38a:	2b01      	cmp	r3, #1
   2f38c:	d109      	bne.n	2f3a2 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   2f38e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2f392:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   2f396:	f142 0200 	adc.w	r2, r2, #0
   2f39a:	b912      	cbnz	r2, 2f3a2 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   2f39c:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   2f39e:	6023      	str	r3, [r4, #0]
}
   2f3a0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f3a2:	f06f 0015 	mvn.w	r0, #21
   2f3a6:	e7fb      	b.n	2f3a0 <at_params_int_get+0x2a>

0002f3a8 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   2f3a8:	b510      	push	{r4, lr}
   2f3aa:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2f3ac:	b170      	cbz	r0, 2f3cc <at_params_int64_get+0x24>
   2f3ae:	6843      	ldr	r3, [r0, #4]
   2f3b0:	b163      	cbz	r3, 2f3cc <at_params_int64_get+0x24>
   2f3b2:	b15a      	cbz	r2, 2f3cc <at_params_int64_get+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f3b4:	f7ef fcb0 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f3b8:	b140      	cbz	r0, 2f3cc <at_params_int64_get+0x24>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2f3ba:	7803      	ldrb	r3, [r0, #0]
   2f3bc:	2b01      	cmp	r3, #1
   2f3be:	d105      	bne.n	2f3cc <at_params_int64_get+0x24>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   2f3c0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   2f3c4:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2f3c6:	e9c4 2300 	strd	r2, r3, [r4]
}
   2f3ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f3cc:	f06f 0015 	mvn.w	r0, #21
   2f3d0:	e7fb      	b.n	2f3ca <at_params_int64_get+0x22>

0002f3d2 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2f3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f3d4:	4617      	mov	r7, r2
   2f3d6:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   2f3d8:	b1c0      	cbz	r0, 2f40c <at_params_string_get+0x3a>
   2f3da:	6843      	ldr	r3, [r0, #4]
   2f3dc:	b1b3      	cbz	r3, 2f40c <at_params_string_get+0x3a>
   2f3de:	b1aa      	cbz	r2, 2f40c <at_params_string_get+0x3a>
   2f3e0:	b1a4      	cbz	r4, 2f40c <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2f3e2:	f7ef fc99 	bl	1ed18 <at_params_get>

	if (param == NULL) {
   2f3e6:	4606      	mov	r6, r0
   2f3e8:	b180      	cbz	r0, 2f40c <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   2f3ea:	7803      	ldrb	r3, [r0, #0]
   2f3ec:	2b02      	cmp	r3, #2
   2f3ee:	d10d      	bne.n	2f40c <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   2f3f0:	f7ef fcb2 	bl	1ed58 <at_param_size>

	if (*len < param_len) {
   2f3f4:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2f3f6:	4605      	mov	r5, r0
	if (*len < param_len) {
   2f3f8:	4283      	cmp	r3, r0
   2f3fa:	d30a      	bcc.n	2f412 <at_params_string_get+0x40>
   2f3fc:	4602      	mov	r2, r0
   2f3fe:	68b1      	ldr	r1, [r6, #8]
   2f400:	4638      	mov	r0, r7
   2f402:	f001 fa1e 	bl	30842 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   2f406:	2000      	movs	r0, #0
	*len = param_len;
   2f408:	6025      	str	r5, [r4, #0]
}
   2f40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2f40c:	f06f 0015 	mvn.w	r0, #21
   2f410:	e7fb      	b.n	2f40a <at_params_string_get+0x38>
		return -ENOMEM;
   2f412:	f06f 000b 	mvn.w	r0, #11
   2f416:	e7f8      	b.n	2f40a <at_params_string_get+0x38>

0002f418 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2f418:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2f41a:	4605      	mov	r5, r0
   2f41c:	b180      	cbz	r0, 2f440 <at_params_valid_count_get+0x28>
   2f41e:	6843      	ldr	r3, [r0, #4]
   2f420:	b173      	cbz	r3, 2f440 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2f422:	2100      	movs	r1, #0
   2f424:	f7ef fc78 	bl	1ed18 <at_params_get>
	size_t valid_i = 0;
   2f428:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2f42a:	b108      	cbz	r0, 2f430 <at_params_valid_count_get+0x18>
   2f42c:	7803      	ldrb	r3, [r0, #0]
   2f42e:	b90b      	cbnz	r3, 2f434 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2f430:	4620      	mov	r0, r4
   2f432:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2f434:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2f436:	4621      	mov	r1, r4
   2f438:	4628      	mov	r0, r5
   2f43a:	f7ef fc6d 	bl	1ed18 <at_params_get>
   2f43e:	e7f4      	b.n	2f42a <at_params_valid_count_get+0x12>
		return -EINVAL;
   2f440:	f06f 0415 	mvn.w	r4, #21
   2f444:	e7f4      	b.n	2f430 <at_params_valid_count_get+0x18>

0002f446 <z_log_msg_static_create.constprop.0>:
   2f446:	2300      	movs	r3, #0
   2f448:	f7e0 b9d2 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002f44c <lte_lc_connect_async>:
{
   2f44c:	b508      	push	{r3, lr}
	if (handler) {
   2f44e:	b130      	cbz	r0, 2f45e <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   2f450:	f7f0 fde8 	bl	20024 <event_handler_list_append_handler>
}
   2f454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   2f458:	2000      	movs	r0, #0
   2f45a:	f7f0 bd01 	b.w	1fe60 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   2f45e:	f7f0 fdd9 	bl	20014 <event_handler_list_is_empty>
   2f462:	2800      	cmp	r0, #0
   2f464:	d0f6      	beq.n	2f454 <lte_lc_connect_async+0x8>
}
   2f466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f46a:	f7ef bceb 	b.w	1ee44 <lte_lc_connect_async.part.0>

0002f46e <lte_lc_init_and_connect_async>:
{
   2f46e:	b510      	push	{r4, lr}
   2f470:	4604      	mov	r4, r0
	err = init_and_config();
   2f472:	f7f0 fbc9 	bl	1fc08 <init_and_config>
	if (err) {
   2f476:	b920      	cbnz	r0, 2f482 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   2f478:	4620      	mov	r0, r4
}
   2f47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   2f47e:	f7ff bfe5 	b.w	2f44c <lte_lc_connect_async>
}
   2f482:	f06f 000d 	mvn.w	r0, #13
   2f486:	bd10      	pop	{r4, pc}

0002f488 <z_log_msg_static_create.constprop.0>:
   2f488:	2300      	movs	r3, #0
   2f48a:	f7e0 b9b1 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002f48e <string_to_int>:
{
   2f48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f490:	460c      	mov	r4, r1
   2f492:	4605      	mov	r5, r0
   2f494:	4616      	mov	r6, r2
	errno = 0;
   2f496:	f7fc fd65 	bl	2bf64 <__errno>
   2f49a:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   2f49c:	4622      	mov	r2, r4
	errno = 0;
   2f49e:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   2f4a0:	a901      	add	r1, sp, #4
   2f4a2:	4628      	mov	r0, r5
   2f4a4:	f7f9 fa94 	bl	289d0 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2f4a8:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   2f4aa:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2f4ac:	42ab      	cmp	r3, r5
   2f4ae:	d103      	bne.n	2f4b8 <string_to_int+0x2a>
		return -ENODATA;
   2f4b0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   2f4b4:	b002      	add	sp, #8
   2f4b6:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2f4b8:	781b      	ldrb	r3, [r3, #0]
   2f4ba:	2b00      	cmp	r3, #0
   2f4bc:	d1f8      	bne.n	2f4b0 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2f4be:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   2f4c2:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2f4c4:	3303      	adds	r3, #3
   2f4c6:	d802      	bhi.n	2f4ce <string_to_int+0x40>
	return 0;
   2f4c8:	2000      	movs	r0, #0
	*output = temp;
   2f4ca:	6034      	str	r4, [r6, #0]
	return 0;
   2f4cc:	e7f2      	b.n	2f4b4 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2f4ce:	f7fc fd49 	bl	2bf64 <__errno>
   2f4d2:	6803      	ldr	r3, [r0, #0]
   2f4d4:	2b22      	cmp	r3, #34	; 0x22
   2f4d6:	d1f7      	bne.n	2f4c8 <string_to_int+0x3a>
   2f4d8:	e7ea      	b.n	2f4b0 <string_to_int+0x22>

0002f4da <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   2f4da:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   2f4dc:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   2f4de:	b087      	sub	sp, #28
   2f4e0:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2f4e2:	ab01      	add	r3, sp, #4
   2f4e4:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   2f4e6:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2f4e8:	f7ff ff73 	bl	2f3d2 <at_params_string_get>
	if (err) {
   2f4ec:	b968      	cbnz	r0, 2f50a <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   2f4ee:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   2f4f0:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   2f4f2:	3318      	adds	r3, #24
   2f4f4:	446b      	add	r3, sp
   2f4f6:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   2f4fa:	4629      	mov	r1, r5
   2f4fc:	a802      	add	r0, sp, #8
   2f4fe:	f7ff ffc6 	bl	2f48e <string_to_int>
		return -ENODATA;
   2f502:	2800      	cmp	r0, #0
   2f504:	bf18      	it	ne
   2f506:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   2f50a:	b007      	add	sp, #28
   2f50c:	bd30      	pop	{r4, r5, pc}

0002f50e <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   2f50e:	f7f0 bd6b 	b.w	1ffe8 <lte_lc_deinit>

0002f512 <z_log_msg_static_create.constprop.0>:
   2f512:	2300      	movs	r3, #0
   2f514:	f7e0 b96c 	b.w	f7f0 <z_impl_z_log_msg_static_create>

0002f518 <on_modem_lib_init>:
	if (ret != 0) {
   2f518:	b908      	cbnz	r0, 2f51e <on_modem_lib_init+0x6>
   2f51a:	f7f1 bf0f 	b.w	2133c <on_modem_lib_init.part.0>
}
   2f51e:	4770      	bx	lr

0002f520 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2f520:	2000      	movs	r0, #0
   2f522:	4770      	bx	lr

0002f524 <psa_crypto_init>:
}
   2f524:	2000      	movs	r0, #0
   2f526:	4770      	bx	lr

0002f528 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   2f528:	4770      	bx	lr

0002f52a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2f52a:	4700      	bx	r0

0002f52c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2f52c:	f001 b85c 	b.w	305e8 <z_impl_k_busy_wait>

0002f530 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   2f530:	40c8      	lsrs	r0, r1
   2f532:	43c0      	mvns	r0, r0
}
   2f534:	f000 0001 	and.w	r0, r0, #1
   2f538:	4770      	bx	lr

0002f53a <nrf_gpio_pin_present_check>:
    switch (port)
   2f53a:	0943      	lsrs	r3, r0, #5
   2f53c:	bf0c      	ite	eq
   2f53e:	f04f 33ff 	moveq.w	r3, #4294967295
   2f542:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2f544:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2f548:	fa23 f000 	lsr.w	r0, r3, r0
}
   2f54c:	f000 0001 	and.w	r0, r0, #1
   2f550:	4770      	bx	lr

0002f552 <pin_is_task_output>:
{
   2f552:	b508      	push	{r3, lr}
   2f554:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2f556:	f7f2 f97d 	bl	21854 <pin_is_output>
   2f55a:	b110      	cbz	r0, 2f562 <pin_is_task_output+0x10>
   2f55c:	4610      	mov	r0, r2
   2f55e:	f7f2 f963 	bl	21828 <pin_in_use_by_te>
}
   2f562:	f000 0001 	and.w	r0, r0, #1
   2f566:	bd08      	pop	{r3, pc}

0002f568 <nrf_gpio_reconfigure>:
{
   2f568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f56c:	4617      	mov	r7, r2
   2f56e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2f572:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f574:	a801      	add	r0, sp, #4
{
   2f576:	460c      	mov	r4, r1
   2f578:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f57a:	f7f2 f9ef 	bl	2195c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f57e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f580:	1e39      	subs	r1, r7, #0
   2f582:	bf18      	it	ne
   2f584:	2101      	movne	r1, #1
   2f586:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f58a:	1e23      	subs	r3, r4, #0
   2f58c:	bf18      	it	ne
   2f58e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f590:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f592:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f596:	bf14      	ite	ne
   2f598:	210c      	movne	r1, #12
   2f59a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f59c:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2f59e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2f5a2:	bf14      	ite	ne
   2f5a4:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2f5a8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2f5aa:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2f5ae:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2f5b2:	bf14      	ite	ne
   2f5b4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2f5b8:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2f5ba:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2f5be:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2f5c0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f5c4:	b104      	cbz	r4, 2f5c8 <nrf_gpio_reconfigure+0x60>
   2f5c6:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2f5c8:	b10f      	cbz	r7, 2f5ce <nrf_gpio_reconfigure+0x66>
   2f5ca:	783f      	ldrb	r7, [r7, #0]
   2f5cc:	007f      	lsls	r7, r7, #1
   2f5ce:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2f5d0:	b10e      	cbz	r6, 2f5d6 <nrf_gpio_reconfigure+0x6e>
   2f5d2:	7836      	ldrb	r6, [r6, #0]
   2f5d4:	00b6      	lsls	r6, r6, #2
   2f5d6:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2f5d8:	b18d      	cbz	r5, 2f5fe <nrf_gpio_reconfigure+0x96>
   2f5da:	7829      	ldrb	r1, [r5, #0]
   2f5dc:	0209      	lsls	r1, r1, #8
   2f5de:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2f5e0:	f1b8 0f00 	cmp.w	r8, #0
   2f5e4:	d003      	beq.n	2f5ee <nrf_gpio_reconfigure+0x86>
   2f5e6:	f898 8000 	ldrb.w	r8, [r8]
   2f5ea:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2f5ee:	4321      	orrs	r1, r4
   2f5f0:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2f5f4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2f5f8:	b002      	add	sp, #8
   2f5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2f5fe:	4629      	mov	r1, r5
   2f600:	e7ed      	b.n	2f5de <nrf_gpio_reconfigure+0x76>

0002f602 <nrf_gpio_cfg_sense_set>:
{
   2f602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2f604:	f10d 030f 	add.w	r3, sp, #15
   2f608:	9301      	str	r3, [sp, #4]
   2f60a:	2300      	movs	r3, #0
{
   2f60c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2f610:	461a      	mov	r2, r3
   2f612:	4619      	mov	r1, r3
   2f614:	9300      	str	r3, [sp, #0]
   2f616:	f7ff ffa7 	bl	2f568 <nrf_gpio_reconfigure>
}
   2f61a:	b005      	add	sp, #20
   2f61c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f620 <rpc_handle_ctrl_message>:
   2f620:	2902      	cmp	r1, #2
   2f622:	b510      	push	{r4, lr}
   2f624:	4604      	mov	r4, r0
   2f626:	d005      	beq.n	2f634 <rpc_handle_ctrl_message+0x14>
   2f628:	2904      	cmp	r1, #4
   2f62a:	d001      	beq.n	2f630 <rpc_handle_ctrl_message+0x10>
   2f62c:	2901      	cmp	r1, #1
   2f62e:	d107      	bne.n	2f640 <rpc_handle_ctrl_message+0x20>
   2f630:	2000      	movs	r0, #0
   2f632:	bd10      	pop	{r4, pc}
   2f634:	6880      	ldr	r0, [r0, #8]
   2f636:	2800      	cmp	r0, #0
   2f638:	d0fa      	beq.n	2f630 <rpc_handle_ctrl_message+0x10>
   2f63a:	f7ed fd7b 	bl	1d134 <nrf_modem_os_shm_tx_free>
   2f63e:	e7f7      	b.n	2f630 <rpc_handle_ctrl_message+0x10>
   2f640:	6880      	ldr	r0, [r0, #8]
   2f642:	b108      	cbz	r0, 2f648 <rpc_handle_ctrl_message+0x28>
   2f644:	f7ed fd76 	bl	1d134 <nrf_modem_os_shm_tx_free>
   2f648:	4620      	mov	r0, r4
   2f64a:	f7f2 ff83 	bl	22554 <rpc_transport_msg_rx_free>
   2f64e:	e7ef      	b.n	2f630 <rpc_handle_ctrl_message+0x10>

0002f650 <rpc_init>:
   2f650:	f7f2 bf6e 	b.w	22530 <rpc_transport_init>

0002f654 <rpc_list_preambles_init>:
   2f654:	2200      	movs	r2, #0
   2f656:	b510      	push	{r4, lr}
   2f658:	6804      	ldr	r4, [r0, #0]
   2f65a:	4294      	cmp	r4, r2
   2f65c:	d100      	bne.n	2f660 <rpc_list_preambles_init+0xc>
   2f65e:	bd10      	pop	{r4, pc}
   2f660:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2f664:	684b      	ldr	r3, [r1, #4]
   2f666:	3201      	adds	r2, #1
   2f668:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2f66c:	f043 0303 	orr.w	r3, r3, #3
   2f670:	604b      	str	r3, [r1, #4]
   2f672:	e7f2      	b.n	2f65a <rpc_list_preambles_init+0x6>

0002f674 <rpc_transport_ipc_data_rx_resume>:
   2f674:	2004      	movs	r0, #4
   2f676:	f7f2 bd63 	b.w	22140 <nrfx_ipc_receive_event_enable>

0002f67a <rpc_transport_ipc_data_rx_suspend>:
   2f67a:	2004      	movs	r0, #4
   2f67c:	f7f2 bd7e 	b.w	2217c <nrfx_ipc_receive_event_disable>

0002f680 <rpc_transport_ipc_shutdown>:
   2f680:	f7f2 bd1c 	b.w	220bc <nrfx_ipc_uninit>

0002f684 <rpc_transport_ipc_msg_alloc>:
   2f684:	b538      	push	{r3, r4, r5, lr}
   2f686:	4604      	mov	r4, r0
   2f688:	2500      	movs	r5, #0
   2f68a:	1d03      	adds	r3, r0, #4
   2f68c:	6822      	ldr	r2, [r4, #0]
   2f68e:	42aa      	cmp	r2, r5
   2f690:	d801      	bhi.n	2f696 <rpc_transport_ipc_msg_alloc+0x12>
   2f692:	2300      	movs	r3, #0
   2f694:	e019      	b.n	2f6ca <rpc_transport_ipc_msg_alloc+0x46>
   2f696:	f04f 0200 	mov.w	r2, #0
   2f69a:	e8d3 0fcf 	ldaexb	r0, [r3]
   2f69e:	2803      	cmp	r0, #3
   2f6a0:	d104      	bne.n	2f6ac <rpc_transport_ipc_msg_alloc+0x28>
   2f6a2:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   2f6a6:	f1bc 0f00 	cmp.w	ip, #0
   2f6aa:	d1f6      	bne.n	2f69a <rpc_transport_ipc_msg_alloc+0x16>
   2f6ac:	d002      	beq.n	2f6b4 <rpc_transport_ipc_msg_alloc+0x30>
   2f6ae:	3308      	adds	r3, #8
   2f6b0:	3501      	adds	r5, #1
   2f6b2:	e7eb      	b.n	2f68c <rpc_transport_ipc_msg_alloc+0x8>
   2f6b4:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   2f6b8:	4618      	mov	r0, r3
   2f6ba:	2240      	movs	r2, #64	; 0x40
   2f6bc:	2100      	movs	r1, #0
   2f6be:	f001 f8e0 	bl	30882 <memset>
   2f6c2:	4603      	mov	r3, r0
   2f6c4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2f6c8:	60a0      	str	r0, [r4, #8]
   2f6ca:	4618      	mov	r0, r3
   2f6cc:	bd38      	pop	{r3, r4, r5, pc}

0002f6ce <rpc_client_msg_from_rpc_msg_get>:
   2f6ce:	3008      	adds	r0, #8
   2f6d0:	4770      	bx	lr

0002f6d2 <rpc_client_msg_alloc>:
   2f6d2:	b538      	push	{r3, r4, r5, lr}
   2f6d4:	4605      	mov	r5, r0
   2f6d6:	b920      	cbnz	r0, 2f6e2 <rpc_client_msg_alloc+0x10>
   2f6d8:	f7f2 ff30 	bl	2253c <rpc_transport_msg_alloc>
   2f6dc:	b980      	cbnz	r0, 2f700 <rpc_client_msg_alloc+0x2e>
   2f6de:	2000      	movs	r0, #0
   2f6e0:	bd38      	pop	{r3, r4, r5, pc}
   2f6e2:	f7ed fd1f 	bl	1d124 <nrf_modem_os_shm_tx_alloc>
   2f6e6:	4604      	mov	r4, r0
   2f6e8:	2800      	cmp	r0, #0
   2f6ea:	d0f8      	beq.n	2f6de <rpc_client_msg_alloc+0xc>
   2f6ec:	f7f2 ff26 	bl	2253c <rpc_transport_msg_alloc>
   2f6f0:	b938      	cbnz	r0, 2f702 <rpc_client_msg_alloc+0x30>
   2f6f2:	4620      	mov	r0, r4
   2f6f4:	f7ed fd1e 	bl	1d134 <nrf_modem_os_shm_tx_free>
   2f6f8:	2001      	movs	r0, #1
   2f6fa:	f7ed fce9 	bl	1d0d0 <nrf_modem_os_event_notify>
   2f6fe:	e7ee      	b.n	2f6de <rpc_client_msg_alloc+0xc>
   2f700:	462c      	mov	r4, r5
   2f702:	60c5      	str	r5, [r0, #12]
   2f704:	f840 4f08 	str.w	r4, [r0, #8]!
   2f708:	e7ea      	b.n	2f6e0 <rpc_client_msg_alloc+0xe>

0002f70a <rpc_client_msg_send>:
   2f70a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2f70e:	4610      	mov	r0, r2
   2f710:	f840 1d08 	str.w	r1, [r0, #-8]!
   2f714:	f7f2 bf2a 	b.w	2256c <rpc_transport_msg_send>

0002f718 <rpc_client_msg_rx_free>:
   2f718:	3808      	subs	r0, #8
   2f71a:	f7f2 bf1b 	b.w	22554 <rpc_transport_msg_rx_free>

0002f71e <rpc_client_msg_data_rx_free>:
   2f71e:	f7f2 bf1f 	b.w	22560 <rpc_transport_msg_data_rx_free>

0002f722 <rpc_client_msg_data_tx_size>:
   2f722:	f7f2 bf11 	b.w	22548 <rpc_transport_msg_data_tx_size>

0002f726 <rpc_client_msg_data_tx_alloc>:
   2f726:	f7ed bcfd 	b.w	1d124 <nrf_modem_os_shm_tx_alloc>

0002f72a <rpc_client_msg_data_tx_free>:
   2f72a:	b508      	push	{r3, lr}
   2f72c:	f7ed fd02 	bl	1d134 <nrf_modem_os_shm_tx_free>
   2f730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f734:	2001      	movs	r0, #1
   2f736:	f7ed bccb 	b.w	1d0d0 <nrf_modem_os_event_notify>

0002f73a <sockaddr_init>:
   2f73a:	2904      	cmp	r1, #4
   2f73c:	b570      	push	{r4, r5, r6, lr}
   2f73e:	4605      	mov	r5, r0
   2f740:	4616      	mov	r6, r2
   2f742:	d003      	beq.n	2f74c <sockaddr_init+0x12>
   2f744:	2910      	cmp	r1, #16
   2f746:	d015      	beq.n	2f774 <sockaddr_init+0x3a>
   2f748:	2400      	movs	r4, #0
   2f74a:	e011      	b.n	2f770 <sockaddr_init+0x36>
   2f74c:	2010      	movs	r0, #16
   2f74e:	f7ed fcdb 	bl	1d108 <nrf_modem_os_alloc>
   2f752:	4604      	mov	r4, r0
   2f754:	2800      	cmp	r0, #0
   2f756:	d0f7      	beq.n	2f748 <sockaddr_init+0xe>
   2f758:	220f      	movs	r2, #15
   2f75a:	2100      	movs	r1, #0
   2f75c:	3001      	adds	r0, #1
   2f75e:	f001 f890 	bl	30882 <memset>
   2f762:	2310      	movs	r3, #16
   2f764:	7023      	strb	r3, [r4, #0]
   2f766:	2301      	movs	r3, #1
   2f768:	8126      	strh	r6, [r4, #8]
   2f76a:	6063      	str	r3, [r4, #4]
   2f76c:	682b      	ldr	r3, [r5, #0]
   2f76e:	60e3      	str	r3, [r4, #12]
   2f770:	4620      	mov	r0, r4
   2f772:	bd70      	pop	{r4, r5, r6, pc}
   2f774:	2024      	movs	r0, #36	; 0x24
   2f776:	f7ed fcc7 	bl	1d108 <nrf_modem_os_alloc>
   2f77a:	4604      	mov	r4, r0
   2f77c:	2800      	cmp	r0, #0
   2f77e:	d0e3      	beq.n	2f748 <sockaddr_init+0xe>
   2f780:	2223      	movs	r2, #35	; 0x23
   2f782:	2100      	movs	r1, #0
   2f784:	3001      	adds	r0, #1
   2f786:	f001 f87c 	bl	30882 <memset>
   2f78a:	2324      	movs	r3, #36	; 0x24
   2f78c:	7023      	strb	r3, [r4, #0]
   2f78e:	2302      	movs	r3, #2
   2f790:	4628      	mov	r0, r5
   2f792:	6063      	str	r3, [r4, #4]
   2f794:	8126      	strh	r6, [r4, #8]
   2f796:	f104 0310 	add.w	r3, r4, #16
   2f79a:	f105 0210 	add.w	r2, r5, #16
   2f79e:	f850 1b04 	ldr.w	r1, [r0], #4
   2f7a2:	4290      	cmp	r0, r2
   2f7a4:	f843 1b04 	str.w	r1, [r3], #4
   2f7a8:	d1f9      	bne.n	2f79e <sockaddr_init+0x64>
   2f7aa:	e7e1      	b.n	2f770 <sockaddr_init+0x36>

0002f7ac <sock_pollcb>:
   2f7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f7ae:	2500      	movs	r5, #0
   2f7b0:	6803      	ldr	r3, [r0, #0]
   2f7b2:	4604      	mov	r4, r0
   2f7b4:	9300      	str	r3, [sp, #0]
   2f7b6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2f7b8:	4668      	mov	r0, sp
   2f7ba:	f8ad 5006 	strh.w	r5, [sp, #6]
   2f7be:	f8ad 3004 	strh.w	r3, [sp, #4]
   2f7c2:	f000 fccb 	bl	3015c <nrf_poll_one>
   2f7c6:	b138      	cbz	r0, 2f7d8 <sock_pollcb+0x2c>
   2f7c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2f7ca:	4668      	mov	r0, sp
   2f7cc:	4798      	blx	r3
   2f7ce:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2f7d2:	b10b      	cbz	r3, 2f7d8 <sock_pollcb+0x2c>
   2f7d4:	6365      	str	r5, [r4, #52]	; 0x34
   2f7d6:	63a5      	str	r5, [r4, #56]	; 0x38
   2f7d8:	b003      	add	sp, #12
   2f7da:	bd30      	pop	{r4, r5, pc}

0002f7dc <sock_has_pkt>:
   2f7dc:	6840      	ldr	r0, [r0, #4]
   2f7de:	3800      	subs	r0, #0
   2f7e0:	bf18      	it	ne
   2f7e2:	2001      	movne	r0, #1
   2f7e4:	4770      	bx	lr

0002f7e6 <sock_pkt_append>:
   2f7e6:	2300      	movs	r3, #0
   2f7e8:	600b      	str	r3, [r1, #0]
   2f7ea:	6883      	ldr	r3, [r0, #8]
   2f7ec:	b913      	cbnz	r3, 2f7f4 <sock_pkt_append+0xe>
   2f7ee:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2f7f2:	4770      	bx	lr
   2f7f4:	6019      	str	r1, [r3, #0]
   2f7f6:	6081      	str	r1, [r0, #8]
   2f7f8:	4770      	bx	lr

0002f7fa <sock_pkt_remove>:
   2f7fa:	b538      	push	{r3, r4, r5, lr}
   2f7fc:	4605      	mov	r5, r0
   2f7fe:	460c      	mov	r4, r1
   2f800:	f7f2 feba 	bl	22578 <rpc_transport_data_rx_suspend>
   2f804:	68aa      	ldr	r2, [r5, #8]
   2f806:	6823      	ldr	r3, [r4, #0]
   2f808:	4294      	cmp	r4, r2
   2f80a:	606b      	str	r3, [r5, #4]
   2f80c:	bf08      	it	eq
   2f80e:	60ab      	streq	r3, [r5, #8]
   2f810:	2300      	movs	r3, #0
   2f812:	4620      	mov	r0, r4
   2f814:	6023      	str	r3, [r4, #0]
   2f816:	f000 f904 	bl	2fa22 <pkt_free>
   2f81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f81e:	f7f2 beb1 	b.w	22584 <rpc_transport_data_rx_resume>

0002f822 <sock_pkt_peek_head>:
   2f822:	6840      	ldr	r0, [r0, #4]
   2f824:	4770      	bx	lr

0002f826 <sock_is_stream>:
   2f826:	6900      	ldr	r0, [r0, #16]
   2f828:	1e43      	subs	r3, r0, #1
   2f82a:	4258      	negs	r0, r3
   2f82c:	4158      	adcs	r0, r3
   2f82e:	4770      	bx	lr

0002f830 <sock_is_datagram>:
   2f830:	6900      	ldr	r0, [r0, #16]
   2f832:	1e83      	subs	r3, r0, #2
   2f834:	4258      	negs	r0, r3
   2f836:	4158      	adcs	r0, r3
   2f838:	4770      	bx	lr

0002f83a <sock_is_raw>:
   2f83a:	6900      	ldr	r0, [r0, #16]
   2f83c:	1ec3      	subs	r3, r0, #3
   2f83e:	4258      	negs	r0, r3
   2f840:	4158      	adcs	r0, r3
   2f842:	4770      	bx	lr

0002f844 <sock_proto_is_secure>:
   2f844:	6940      	ldr	r0, [r0, #20]
   2f846:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2f84a:	d005      	beq.n	2f858 <sock_proto_is_secure+0x14>
   2f84c:	f240 1311 	movw	r3, #273	; 0x111
   2f850:	1ac3      	subs	r3, r0, r3
   2f852:	4258      	negs	r0, r3
   2f854:	4158      	adcs	r0, r3
   2f856:	4770      	bx	lr
   2f858:	2001      	movs	r0, #1
   2f85a:	4770      	bx	lr

0002f85c <sock_is_connecting>:
   2f85c:	7f00      	ldrb	r0, [r0, #28]
   2f85e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2f862:	4770      	bx	lr

0002f864 <sock_is_connected>:
   2f864:	7f00      	ldrb	r0, [r0, #28]
   2f866:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2f86a:	4770      	bx	lr

0002f86c <sock_is_attaching>:
   2f86c:	7f00      	ldrb	r0, [r0, #28]
   2f86e:	f3c0 1000 	ubfx	r0, r0, #4, #1
   2f872:	4770      	bx	lr

0002f874 <sock_is_nonblock>:
   2f874:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2f876:	f000 0001 	and.w	r0, r0, #1
   2f87a:	4770      	bx	lr

0002f87c <sock_is_closed>:
   2f87c:	7f00      	ldrb	r0, [r0, #28]
   2f87e:	f000 0001 	and.w	r0, r0, #1
   2f882:	4770      	bx	lr

0002f884 <sock_is_local_closed>:
   2f884:	7f00      	ldrb	r0, [r0, #28]
   2f886:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2f88a:	4770      	bx	lr

0002f88c <sock_is_eof>:
   2f88c:	6903      	ldr	r3, [r0, #16]
   2f88e:	2b01      	cmp	r3, #1
   2f890:	d105      	bne.n	2f89e <sock_is_eof+0x12>
   2f892:	6980      	ldr	r0, [r0, #24]
   2f894:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2f898:	4258      	negs	r0, r3
   2f89a:	4158      	adcs	r0, r3
   2f89c:	4770      	bx	lr
   2f89e:	2000      	movs	r0, #0
   2f8a0:	4770      	bx	lr

0002f8a2 <sock_has_stream_error>:
   2f8a2:	7f00      	ldrb	r0, [r0, #28]
   2f8a4:	09c0      	lsrs	r0, r0, #7
   2f8a6:	4770      	bx	lr

0002f8a8 <sock_has_error>:
   2f8a8:	6983      	ldr	r3, [r0, #24]
   2f8aa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   2f8ae:	bf14      	ite	ne
   2f8b0:	2001      	movne	r0, #1
   2f8b2:	2000      	moveq	r0, #0
   2f8b4:	4770      	bx	lr

0002f8b6 <sock_has_flow_control>:
   2f8b6:	7f00      	ldrb	r0, [r0, #28]
   2f8b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2f8bc:	4770      	bx	lr

0002f8be <sock_has_pollcb>:
   2f8be:	6b40      	ldr	r0, [r0, #52]	; 0x34
   2f8c0:	3800      	subs	r0, #0
   2f8c2:	bf18      	it	ne
   2f8c4:	2001      	movne	r0, #1
   2f8c6:	4770      	bx	lr

0002f8c8 <sock_has_rai_no_data>:
   2f8c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   2f8ca:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   2f8ce:	4258      	negs	r0, r3
   2f8d0:	4158      	adcs	r0, r3
   2f8d2:	4770      	bx	lr

0002f8d4 <sock_can_read>:
   2f8d4:	6840      	ldr	r0, [r0, #4]
   2f8d6:	3800      	subs	r0, #0
   2f8d8:	bf18      	it	ne
   2f8da:	2001      	movne	r0, #1
   2f8dc:	4770      	bx	lr

0002f8de <sock_can_accept>:
   2f8de:	7f40      	ldrb	r0, [r0, #29]
   2f8e0:	3800      	subs	r0, #0
   2f8e2:	bf18      	it	ne
   2f8e4:	2001      	movne	r0, #1
   2f8e6:	4770      	bx	lr

0002f8e8 <sock_can_send>:
   2f8e8:	b510      	push	{r4, lr}
   2f8ea:	4602      	mov	r2, r0
   2f8ec:	6904      	ldr	r4, [r0, #16]
   2f8ee:	f7ff ffa9 	bl	2f844 <sock_proto_is_secure>
   2f8f2:	2c01      	cmp	r4, #1
   2f8f4:	4601      	mov	r1, r0
   2f8f6:	7f13      	ldrb	r3, [r2, #28]
   2f8f8:	d103      	bne.n	2f902 <sock_can_send+0x1a>
   2f8fa:	071c      	lsls	r4, r3, #28
   2f8fc:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   2f900:	d50b      	bpl.n	2f91a <sock_can_send+0x32>
   2f902:	b931      	cbnz	r1, 2f912 <sock_can_send+0x2a>
   2f904:	07d9      	lsls	r1, r3, #31
   2f906:	d40b      	bmi.n	2f920 <sock_can_send+0x38>
   2f908:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2f90c:	f1c3 0001 	rsb	r0, r3, #1
   2f910:	e003      	b.n	2f91a <sock_can_send+0x32>
   2f912:	069a      	lsls	r2, r3, #26
   2f914:	f3c3 1040 	ubfx	r0, r3, #5, #1
   2f918:	d4f4      	bmi.n	2f904 <sock_can_send+0x1c>
   2f91a:	f000 0001 	and.w	r0, r0, #1
   2f91e:	bd10      	pop	{r4, pc}
   2f920:	2000      	movs	r0, #0
   2f922:	e7fa      	b.n	2f91a <sock_can_send+0x32>

0002f924 <sock_rcvtimeo_ms_get>:
   2f924:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   2f928:	ea53 0102 	orrs.w	r1, r3, r2
   2f92c:	d009      	beq.n	2f942 <sock_rcvtimeo_ms_get+0x1e>
   2f92e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2f932:	fbb3 f0f1 	udiv	r0, r3, r1
   2f936:	fb01 0002 	mla	r0, r1, r2, r0
   2f93a:	2801      	cmp	r0, #1
   2f93c:	bfb8      	it	lt
   2f93e:	2001      	movlt	r0, #1
   2f940:	4770      	bx	lr
   2f942:	f04f 30ff 	mov.w	r0, #4294967295
   2f946:	4770      	bx	lr

0002f948 <sock_sndtimeo_ms_get>:
   2f948:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2f94c:	ea53 0102 	orrs.w	r1, r3, r2
   2f950:	d009      	beq.n	2f966 <sock_sndtimeo_ms_get+0x1e>
   2f952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2f956:	fbb3 f0f1 	udiv	r0, r3, r1
   2f95a:	fb01 0002 	mla	r0, r1, r2, r0
   2f95e:	2801      	cmp	r0, #1
   2f960:	bfb8      	it	lt
   2f962:	2001      	movlt	r0, #1
   2f964:	4770      	bx	lr
   2f966:	f04f 30ff 	mov.w	r0, #4294967295
   2f96a:	4770      	bx	lr

0002f96c <sock_family_is_valid>:
   2f96c:	3801      	subs	r0, #1
   2f96e:	2802      	cmp	r0, #2
   2f970:	bf8c      	ite	hi
   2f972:	2000      	movhi	r0, #0
   2f974:	2001      	movls	r0, #1
   2f976:	4770      	bx	lr

0002f978 <sock_type_is_valid>:
   2f978:	3801      	subs	r0, #1
   2f97a:	2802      	cmp	r0, #2
   2f97c:	bf8c      	ite	hi
   2f97e:	2000      	movhi	r0, #0
   2f980:	2001      	movls	r0, #1
   2f982:	4770      	bx	lr

0002f984 <sock_proto_supports_type>:
   2f984:	2903      	cmp	r1, #3
   2f986:	d015      	beq.n	2f9b4 <sock_proto_supports_type+0x30>
   2f988:	2811      	cmp	r0, #17
   2f98a:	d00c      	beq.n	2f9a6 <sock_proto_supports_type+0x22>
   2f98c:	dc04      	bgt.n	2f998 <sock_proto_supports_type+0x14>
   2f98e:	b188      	cbz	r0, 2f9b4 <sock_proto_supports_type+0x30>
   2f990:	2806      	cmp	r0, #6
   2f992:	d00a      	beq.n	2f9aa <sock_proto_supports_type+0x26>
   2f994:	2000      	movs	r0, #0
   2f996:	4770      	bx	lr
   2f998:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2f99c:	d005      	beq.n	2f9aa <sock_proto_supports_type+0x26>
   2f99e:	f240 1311 	movw	r3, #273	; 0x111
   2f9a2:	4298      	cmp	r0, r3
   2f9a4:	d1f6      	bne.n	2f994 <sock_proto_supports_type+0x10>
   2f9a6:	2902      	cmp	r1, #2
   2f9a8:	e000      	b.n	2f9ac <sock_proto_supports_type+0x28>
   2f9aa:	2901      	cmp	r1, #1
   2f9ac:	bf14      	ite	ne
   2f9ae:	2000      	movne	r0, #0
   2f9b0:	2001      	moveq	r0, #1
   2f9b2:	4770      	bx	lr
   2f9b4:	2001      	movs	r0, #1
   2f9b6:	4770      	bx	lr

0002f9b8 <sock_sockaddr_len_is_valid>:
   2f9b8:	6843      	ldr	r3, [r0, #4]
   2f9ba:	2b01      	cmp	r3, #1
   2f9bc:	d003      	beq.n	2f9c6 <sock_sockaddr_len_is_valid+0xe>
   2f9be:	2b02      	cmp	r3, #2
   2f9c0:	d009      	beq.n	2f9d6 <sock_sockaddr_len_is_valid+0x1e>
   2f9c2:	2000      	movs	r0, #0
   2f9c4:	4770      	bx	lr
   2f9c6:	7803      	ldrb	r3, [r0, #0]
   2f9c8:	2b10      	cmp	r3, #16
   2f9ca:	d1fa      	bne.n	2f9c2 <sock_sockaddr_len_is_valid+0xa>
   2f9cc:	2910      	cmp	r1, #16
   2f9ce:	bf14      	ite	ne
   2f9d0:	2000      	movne	r0, #0
   2f9d2:	2001      	moveq	r0, #1
   2f9d4:	4770      	bx	lr
   2f9d6:	7803      	ldrb	r3, [r0, #0]
   2f9d8:	2b24      	cmp	r3, #36	; 0x24
   2f9da:	d1f2      	bne.n	2f9c2 <sock_sockaddr_len_is_valid+0xa>
   2f9dc:	2924      	cmp	r1, #36	; 0x24
   2f9de:	e7f6      	b.n	2f9ce <sock_sockaddr_len_is_valid+0x16>

0002f9e0 <sock_sockaddr_fam_is_valid>:
   2f9e0:	68c3      	ldr	r3, [r0, #12]
   2f9e2:	2b01      	cmp	r3, #1
   2f9e4:	d003      	beq.n	2f9ee <sock_sockaddr_fam_is_valid+0xe>
   2f9e6:	2b02      	cmp	r3, #2
   2f9e8:	d007      	beq.n	2f9fa <sock_sockaddr_fam_is_valid+0x1a>
   2f9ea:	2001      	movs	r0, #1
   2f9ec:	4770      	bx	lr
   2f9ee:	6848      	ldr	r0, [r1, #4]
   2f9f0:	2801      	cmp	r0, #1
   2f9f2:	bf14      	ite	ne
   2f9f4:	2000      	movne	r0, #0
   2f9f6:	2001      	moveq	r0, #1
   2f9f8:	4770      	bx	lr
   2f9fa:	6848      	ldr	r0, [r1, #4]
   2f9fc:	2802      	cmp	r0, #2
   2f9fe:	e7f8      	b.n	2f9f2 <sock_sockaddr_fam_is_valid+0x12>

0002fa00 <pkt_has_next>:
   2fa00:	b100      	cbz	r0, 2fa04 <pkt_has_next+0x4>
   2fa02:	6800      	ldr	r0, [r0, #0]
   2fa04:	3800      	subs	r0, #0
   2fa06:	bf18      	it	ne
   2fa08:	2001      	movne	r0, #1
   2fa0a:	4770      	bx	lr

0002fa0c <pkt_peek_next>:
   2fa0c:	b100      	cbz	r0, 2fa10 <pkt_peek_next+0x4>
   2fa0e:	6800      	ldr	r0, [r0, #0]
   2fa10:	4770      	bx	lr

0002fa12 <pkt_bytes_get>:
   2fa12:	8943      	ldrh	r3, [r0, #10]
   2fa14:	6840      	ldr	r0, [r0, #4]
   2fa16:	4418      	add	r0, r3
   2fa18:	4770      	bx	lr

0002fa1a <pkt_bytes_left>:
   2fa1a:	8902      	ldrh	r2, [r0, #8]
   2fa1c:	8940      	ldrh	r0, [r0, #10]
   2fa1e:	1a10      	subs	r0, r2, r0
   2fa20:	4770      	bx	lr

0002fa22 <pkt_free>:
   2fa22:	b510      	push	{r4, lr}
   2fa24:	4604      	mov	r4, r0
   2fa26:	6840      	ldr	r0, [r0, #4]
   2fa28:	f7ff fe79 	bl	2f71e <rpc_client_msg_data_rx_free>
   2fa2c:	68e0      	ldr	r0, [r4, #12]
   2fa2e:	b108      	cbz	r0, 2fa34 <pkt_free+0x12>
   2fa30:	f7ed fb72 	bl	1d118 <nrf_modem_os_free>
   2fa34:	4620      	mov	r0, r4
   2fa36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fa3a:	f7ed bb6d 	b.w	1d118 <nrf_modem_os_free>

0002fa3e <pkt_flush>:
   2fa3e:	b510      	push	{r4, lr}
   2fa40:	4604      	mov	r4, r0
   2fa42:	6820      	ldr	r0, [r4, #0]
   2fa44:	b900      	cbnz	r0, 2fa48 <pkt_flush+0xa>
   2fa46:	bd10      	pop	{r4, pc}
   2fa48:	6862      	ldr	r2, [r4, #4]
   2fa4a:	6803      	ldr	r3, [r0, #0]
   2fa4c:	4290      	cmp	r0, r2
   2fa4e:	6023      	str	r3, [r4, #0]
   2fa50:	bf08      	it	eq
   2fa52:	6063      	streq	r3, [r4, #4]
   2fa54:	f7ff ffe5 	bl	2fa22 <pkt_free>
   2fa58:	e7f3      	b.n	2fa42 <pkt_flush+0x4>

0002fa5a <on_conf_dnssrv_res>:
   2fa5a:	f000 bc71 	b.w	30340 <res_forward>

0002fa5e <nrf_freeaddrinfo>:
   2fa5e:	b510      	push	{r4, lr}
   2fa60:	4604      	mov	r4, r0
   2fa62:	b160      	cbz	r0, 2fa7e <nrf_freeaddrinfo+0x20>
   2fa64:	6940      	ldr	r0, [r0, #20]
   2fa66:	b108      	cbz	r0, 2fa6c <nrf_freeaddrinfo+0xe>
   2fa68:	f7ed fb56 	bl	1d118 <nrf_modem_os_free>
   2fa6c:	69a0      	ldr	r0, [r4, #24]
   2fa6e:	b108      	cbz	r0, 2fa74 <nrf_freeaddrinfo+0x16>
   2fa70:	f7ed fb52 	bl	1d118 <nrf_modem_os_free>
   2fa74:	4620      	mov	r0, r4
   2fa76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fa7a:	f7ed bb4d 	b.w	1d118 <nrf_modem_os_free>
   2fa7e:	bd10      	pop	{r4, pc}

0002fa80 <on_getifaddrs_res>:
   2fa80:	f000 bc5e 	b.w	30340 <res_forward>

0002fa84 <nrf_socket>:
   2fa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fa88:	4681      	mov	r9, r0
   2fa8a:	460f      	mov	r7, r1
   2fa8c:	4616      	mov	r6, r2
   2fa8e:	f7ff ff6d 	bl	2f96c <sock_family_is_valid>
   2fa92:	b930      	cbnz	r0, 2faa2 <nrf_socket+0x1e>
   2fa94:	206a      	movs	r0, #106	; 0x6a
   2fa96:	f7ed fa65 	bl	1cf64 <nrf_modem_os_errno_set>
   2fa9a:	f04f 30ff 	mov.w	r0, #4294967295
   2fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2faa2:	4630      	mov	r0, r6
   2faa4:	f7f3 fafe 	bl	230a4 <sock_proto_is_valid>
   2faa8:	b908      	cbnz	r0, 2faae <nrf_socket+0x2a>
   2faaa:	207b      	movs	r0, #123	; 0x7b
   2faac:	e7f3      	b.n	2fa96 <nrf_socket+0x12>
   2faae:	4638      	mov	r0, r7
   2fab0:	f7ff ff62 	bl	2f978 <sock_type_is_valid>
   2fab4:	b908      	cbnz	r0, 2faba <nrf_socket+0x36>
   2fab6:	206b      	movs	r0, #107	; 0x6b
   2fab8:	e7ed      	b.n	2fa96 <nrf_socket+0x12>
   2faba:	4639      	mov	r1, r7
   2fabc:	4630      	mov	r0, r6
   2fabe:	f7ff ff61 	bl	2f984 <sock_proto_supports_type>
   2fac2:	2800      	cmp	r0, #0
   2fac4:	d0f7      	beq.n	2fab6 <nrf_socket+0x32>
   2fac6:	f7f3 fa63 	bl	22f90 <sock_open>
   2faca:	4605      	mov	r5, r0
   2facc:	b908      	cbnz	r0, 2fad2 <nrf_socket+0x4e>
   2face:	2017      	movs	r0, #23
   2fad0:	e7e1      	b.n	2fa96 <nrf_socket+0x12>
   2fad2:	2000      	movs	r0, #0
   2fad4:	f7ff fdfd 	bl	2f6d2 <rpc_client_msg_alloc>
   2fad8:	4604      	mov	r4, r0
   2fada:	b920      	cbnz	r0, 2fae6 <nrf_socket+0x62>
   2fadc:	6828      	ldr	r0, [r5, #0]
   2fade:	f7f3 fa8f 	bl	23000 <_sock_close>
   2fae2:	2069      	movs	r0, #105	; 0x69
   2fae4:	e7d7      	b.n	2fa96 <nrf_socket+0x12>
   2fae6:	2300      	movs	r3, #0
   2fae8:	220c      	movs	r2, #12
   2faea:	f04f 38ff 	mov.w	r8, #4294967295
   2faee:	7202      	strb	r2, [r0, #8]
   2faf0:	7243      	strb	r3, [r0, #9]
   2faf2:	7283      	strb	r3, [r0, #10]
   2faf4:	72c3      	strb	r3, [r0, #11]
   2faf6:	f880 8010 	strb.w	r8, [r0, #16]
   2fafa:	f880 8011 	strb.w	r8, [r0, #17]
   2fafe:	f880 8012 	strb.w	r8, [r0, #18]
   2fb02:	f880 8013 	strb.w	r8, [r0, #19]
   2fb06:	4648      	mov	r0, r9
   2fb08:	f7f4 f9be 	bl	23e88 <nrf_af_to_rpc_af>
   2fb0c:	6160      	str	r0, [r4, #20]
   2fb0e:	4638      	mov	r0, r7
   2fb10:	f000 fb8e 	bl	30230 <nrf_type_to_rpc_type>
   2fb14:	4601      	mov	r1, r0
   2fb16:	61a0      	str	r0, [r4, #24]
   2fb18:	4630      	mov	r0, r6
   2fb1a:	f000 fb8a 	bl	30232 <nrf_proto_to_rpc_proto>
   2fb1e:	4621      	mov	r1, r4
   2fb20:	61e0      	str	r0, [r4, #28]
   2fb22:	f247 0001 	movw	r0, #28673	; 0x7001
   2fb26:	e9c5 9703 	strd	r9, r7, [r5, #12]
   2fb2a:	616e      	str	r6, [r5, #20]
   2fb2c:	f000 fbd8 	bl	302e0 <req_forward>
   2fb30:	4604      	mov	r4, r0
   2fb32:	b120      	cbz	r0, 2fb3e <nrf_socket+0xba>
   2fb34:	4640      	mov	r0, r8
   2fb36:	f7f3 fa63 	bl	23000 <_sock_close>
   2fb3a:	4620      	mov	r0, r4
   2fb3c:	e7ab      	b.n	2fa96 <nrf_socket+0x12>
   2fb3e:	6828      	ldr	r0, [r5, #0]
   2fb40:	e7ad      	b.n	2fa9e <nrf_socket+0x1a>

0002fb42 <nrf_connect>:
   2fb42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2fb44:	4607      	mov	r7, r0
   2fb46:	460d      	mov	r5, r1
   2fb48:	4616      	mov	r6, r2
   2fb4a:	f7f3 fa47 	bl	22fdc <sock_find>
   2fb4e:	4604      	mov	r4, r0
   2fb50:	b938      	cbnz	r0, 2fb62 <nrf_connect+0x20>
   2fb52:	2009      	movs	r0, #9
   2fb54:	f7ed fa06 	bl	1cf64 <nrf_modem_os_errno_set>
   2fb58:	f04f 35ff 	mov.w	r5, #4294967295
   2fb5c:	4628      	mov	r0, r5
   2fb5e:	b003      	add	sp, #12
   2fb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fb62:	f7ff fe8b 	bl	2f87c <sock_is_closed>
   2fb66:	b108      	cbz	r0, 2fb6c <nrf_connect+0x2a>
   2fb68:	69a0      	ldr	r0, [r4, #24]
   2fb6a:	e7f3      	b.n	2fb54 <nrf_connect+0x12>
   2fb6c:	4620      	mov	r0, r4
   2fb6e:	f7ff fe79 	bl	2f864 <sock_is_connected>
   2fb72:	b108      	cbz	r0, 2fb78 <nrf_connect+0x36>
   2fb74:	207f      	movs	r0, #127	; 0x7f
   2fb76:	e7ed      	b.n	2fb54 <nrf_connect+0x12>
   2fb78:	4620      	mov	r0, r4
   2fb7a:	f7ff fe6f 	bl	2f85c <sock_is_connecting>
   2fb7e:	b108      	cbz	r0, 2fb84 <nrf_connect+0x42>
   2fb80:	2078      	movs	r0, #120	; 0x78
   2fb82:	e7e7      	b.n	2fb54 <nrf_connect+0x12>
   2fb84:	b90d      	cbnz	r5, 2fb8a <nrf_connect+0x48>
   2fb86:	200e      	movs	r0, #14
   2fb88:	e7e4      	b.n	2fb54 <nrf_connect+0x12>
   2fb8a:	4631      	mov	r1, r6
   2fb8c:	4628      	mov	r0, r5
   2fb8e:	f7ff ff13 	bl	2f9b8 <sock_sockaddr_len_is_valid>
   2fb92:	b908      	cbnz	r0, 2fb98 <nrf_connect+0x56>
   2fb94:	2016      	movs	r0, #22
   2fb96:	e7dd      	b.n	2fb54 <nrf_connect+0x12>
   2fb98:	4629      	mov	r1, r5
   2fb9a:	4620      	mov	r0, r4
   2fb9c:	f7ff ff20 	bl	2f9e0 <sock_sockaddr_fam_is_valid>
   2fba0:	b908      	cbnz	r0, 2fba6 <nrf_connect+0x64>
   2fba2:	206a      	movs	r0, #106	; 0x6a
   2fba4:	e7d6      	b.n	2fb54 <nrf_connect+0x12>
   2fba6:	4620      	mov	r0, r4
   2fba8:	f7ff fe64 	bl	2f874 <sock_is_nonblock>
   2fbac:	4606      	mov	r6, r0
   2fbae:	b118      	cbz	r0, 2fbb8 <nrf_connect+0x76>
   2fbb0:	6966      	ldr	r6, [r4, #20]
   2fbb2:	3e11      	subs	r6, #17
   2fbb4:	bf18      	it	ne
   2fbb6:	2601      	movne	r6, #1
   2fbb8:	2000      	movs	r0, #0
   2fbba:	f7ff fd8a 	bl	2f6d2 <rpc_client_msg_alloc>
   2fbbe:	4602      	mov	r2, r0
   2fbc0:	b908      	cbnz	r0, 2fbc6 <nrf_connect+0x84>
   2fbc2:	2069      	movs	r0, #105	; 0x69
   2fbc4:	e7c6      	b.n	2fb54 <nrf_connect+0x12>
   2fbc6:	2300      	movs	r3, #0
   2fbc8:	2114      	movs	r1, #20
   2fbca:	6107      	str	r7, [r0, #16]
   2fbcc:	7201      	strb	r1, [r0, #8]
   2fbce:	7243      	strb	r3, [r0, #9]
   2fbd0:	7283      	strb	r3, [r0, #10]
   2fbd2:	72c3      	strb	r3, [r0, #11]
   2fbd4:	6869      	ldr	r1, [r5, #4]
   2fbd6:	2901      	cmp	r1, #1
   2fbd8:	d00e      	beq.n	2fbf8 <nrf_connect+0xb6>
   2fbda:	2902      	cmp	r1, #2
   2fbdc:	d014      	beq.n	2fc08 <nrf_connect+0xc6>
   2fbde:	7f23      	ldrb	r3, [r4, #28]
   2fbe0:	f247 0102 	movw	r1, #28674	; 0x7002
   2fbe4:	f043 0304 	orr.w	r3, r3, #4
   2fbe8:	7723      	strb	r3, [r4, #28]
   2fbea:	2004      	movs	r0, #4
   2fbec:	60d6      	str	r6, [r2, #12]
   2fbee:	f7ff fd8c 	bl	2f70a <rpc_client_msg_send>
   2fbf2:	b1ce      	cbz	r6, 2fc28 <nrf_connect+0xe6>
   2fbf4:	2077      	movs	r0, #119	; 0x77
   2fbf6:	e7ad      	b.n	2fb54 <nrf_connect+0x12>
   2fbf8:	8929      	ldrh	r1, [r5, #8]
   2fbfa:	75c3      	strb	r3, [r0, #23]
   2fbfc:	8281      	strh	r1, [r0, #20]
   2fbfe:	2104      	movs	r1, #4
   2fc00:	7581      	strb	r1, [r0, #22]
   2fc02:	68eb      	ldr	r3, [r5, #12]
   2fc04:	6183      	str	r3, [r0, #24]
   2fc06:	e7ea      	b.n	2fbde <nrf_connect+0x9c>
   2fc08:	8929      	ldrh	r1, [r5, #8]
   2fc0a:	75c3      	strb	r3, [r0, #23]
   2fc0c:	8281      	strh	r1, [r0, #20]
   2fc0e:	2110      	movs	r1, #16
   2fc10:	186b      	adds	r3, r5, r1
   2fc12:	7581      	strb	r1, [r0, #22]
   2fc14:	3520      	adds	r5, #32
   2fc16:	f100 0118 	add.w	r1, r0, #24
   2fc1a:	f853 0b04 	ldr.w	r0, [r3], #4
   2fc1e:	42ab      	cmp	r3, r5
   2fc20:	f841 0b04 	str.w	r0, [r1], #4
   2fc24:	d1f9      	bne.n	2fc1a <nrf_connect+0xd8>
   2fc26:	e7da      	b.n	2fbde <nrf_connect+0x9c>
   2fc28:	4620      	mov	r0, r4
   2fc2a:	f7ff fe8d 	bl	2f948 <sock_sndtimeo_ms_get>
   2fc2e:	9001      	str	r0, [sp, #4]
   2fc30:	4620      	mov	r0, r4
   2fc32:	f7ff fe13 	bl	2f85c <sock_is_connecting>
   2fc36:	b918      	cbnz	r0, 2fc40 <nrf_connect+0xfe>
   2fc38:	69a5      	ldr	r5, [r4, #24]
   2fc3a:	b185      	cbz	r5, 2fc5e <nrf_connect+0x11c>
   2fc3c:	4628      	mov	r0, r5
   2fc3e:	e789      	b.n	2fb54 <nrf_connect+0x12>
   2fc40:	2002      	movs	r0, #2
   2fc42:	a901      	add	r1, sp, #4
   2fc44:	f7ed f8cc 	bl	1cde0 <nrf_modem_os_timedwait>
   2fc48:	f110 0f0b 	cmn.w	r0, #11
   2fc4c:	d005      	beq.n	2fc5a <nrf_connect+0x118>
   2fc4e:	2800      	cmp	r0, #0
   2fc50:	d0ee      	beq.n	2fc30 <nrf_connect+0xee>
   2fc52:	2800      	cmp	r0, #0
   2fc54:	bfb8      	it	lt
   2fc56:	4240      	neglt	r0, r0
   2fc58:	e77c      	b.n	2fb54 <nrf_connect+0x12>
   2fc5a:	2074      	movs	r0, #116	; 0x74
   2fc5c:	e77a      	b.n	2fb54 <nrf_connect+0x12>
   2fc5e:	4620      	mov	r0, r4
   2fc60:	f7ff fdf0 	bl	2f844 <sock_proto_is_secure>
   2fc64:	2800      	cmp	r0, #0
   2fc66:	f43f af79 	beq.w	2fb5c <nrf_connect+0x1a>
   2fc6a:	4620      	mov	r0, r4
   2fc6c:	9901      	ldr	r1, [sp, #4]
   2fc6e:	f7f4 f893 	bl	23d98 <tls_attach>
   2fc72:	4605      	mov	r5, r0
   2fc74:	e772      	b.n	2fb5c <nrf_connect+0x1a>

0002fc76 <nrf_bind>:
   2fc76:	b538      	push	{r3, r4, r5, lr}
   2fc78:	4605      	mov	r5, r0
   2fc7a:	460c      	mov	r4, r1
   2fc7c:	f7f3 f9ae 	bl	22fdc <sock_find>
   2fc80:	b930      	cbnz	r0, 2fc90 <nrf_bind+0x1a>
   2fc82:	2009      	movs	r0, #9
   2fc84:	f7ed f96e 	bl	1cf64 <nrf_modem_os_errno_set>
   2fc88:	f04f 33ff 	mov.w	r3, #4294967295
   2fc8c:	4618      	mov	r0, r3
   2fc8e:	bd38      	pop	{r3, r4, r5, pc}
   2fc90:	b90c      	cbnz	r4, 2fc96 <nrf_bind+0x20>
   2fc92:	200e      	movs	r0, #14
   2fc94:	e7f6      	b.n	2fc84 <nrf_bind+0xe>
   2fc96:	4621      	mov	r1, r4
   2fc98:	f7ff fea2 	bl	2f9e0 <sock_sockaddr_fam_is_valid>
   2fc9c:	b908      	cbnz	r0, 2fca2 <nrf_bind+0x2c>
   2fc9e:	206a      	movs	r0, #106	; 0x6a
   2fca0:	e7f0      	b.n	2fc84 <nrf_bind+0xe>
   2fca2:	2000      	movs	r0, #0
   2fca4:	f7ff fd15 	bl	2f6d2 <rpc_client_msg_alloc>
   2fca8:	4601      	mov	r1, r0
   2fcaa:	b908      	cbnz	r0, 2fcb0 <nrf_bind+0x3a>
   2fcac:	2069      	movs	r0, #105	; 0x69
   2fcae:	e7e9      	b.n	2fc84 <nrf_bind+0xe>
   2fcb0:	2300      	movs	r3, #0
   2fcb2:	2214      	movs	r2, #20
   2fcb4:	6105      	str	r5, [r0, #16]
   2fcb6:	7202      	strb	r2, [r0, #8]
   2fcb8:	7243      	strb	r3, [r0, #9]
   2fcba:	7283      	strb	r3, [r0, #10]
   2fcbc:	72c3      	strb	r3, [r0, #11]
   2fcbe:	6862      	ldr	r2, [r4, #4]
   2fcc0:	2a01      	cmp	r2, #1
   2fcc2:	d009      	beq.n	2fcd8 <nrf_bind+0x62>
   2fcc4:	2a02      	cmp	r2, #2
   2fcc6:	d00f      	beq.n	2fce8 <nrf_bind+0x72>
   2fcc8:	f247 0005 	movw	r0, #28677	; 0x7005
   2fccc:	f000 fb08 	bl	302e0 <req_forward>
   2fcd0:	4603      	mov	r3, r0
   2fcd2:	2800      	cmp	r0, #0
   2fcd4:	d0da      	beq.n	2fc8c <nrf_bind+0x16>
   2fcd6:	e7d5      	b.n	2fc84 <nrf_bind+0xe>
   2fcd8:	8922      	ldrh	r2, [r4, #8]
   2fcda:	75c3      	strb	r3, [r0, #23]
   2fcdc:	8282      	strh	r2, [r0, #20]
   2fcde:	2204      	movs	r2, #4
   2fce0:	7582      	strb	r2, [r0, #22]
   2fce2:	68e3      	ldr	r3, [r4, #12]
   2fce4:	6183      	str	r3, [r0, #24]
   2fce6:	e7ef      	b.n	2fcc8 <nrf_bind+0x52>
   2fce8:	8922      	ldrh	r2, [r4, #8]
   2fcea:	75c3      	strb	r3, [r0, #23]
   2fcec:	8282      	strh	r2, [r0, #20]
   2fcee:	2210      	movs	r2, #16
   2fcf0:	18a3      	adds	r3, r4, r2
   2fcf2:	7582      	strb	r2, [r0, #22]
   2fcf4:	3420      	adds	r4, #32
   2fcf6:	f100 0218 	add.w	r2, r0, #24
   2fcfa:	f853 0b04 	ldr.w	r0, [r3], #4
   2fcfe:	42a3      	cmp	r3, r4
   2fd00:	f842 0b04 	str.w	r0, [r2], #4
   2fd04:	d1f9      	bne.n	2fcfa <nrf_bind+0x84>
   2fd06:	e7df      	b.n	2fcc8 <nrf_bind+0x52>

0002fd08 <nrf_listen>:
   2fd08:	b538      	push	{r3, r4, r5, lr}
   2fd0a:	4605      	mov	r5, r0
   2fd0c:	460c      	mov	r4, r1
   2fd0e:	f7f3 f965 	bl	22fdc <sock_find>
   2fd12:	b930      	cbnz	r0, 2fd22 <nrf_listen+0x1a>
   2fd14:	2009      	movs	r0, #9
   2fd16:	f7ed f925 	bl	1cf64 <nrf_modem_os_errno_set>
   2fd1a:	f04f 33ff 	mov.w	r3, #4294967295
   2fd1e:	4618      	mov	r0, r3
   2fd20:	bd38      	pop	{r3, r4, r5, pc}
   2fd22:	f7ff fd80 	bl	2f826 <sock_is_stream>
   2fd26:	b908      	cbnz	r0, 2fd2c <nrf_listen+0x24>
   2fd28:	205f      	movs	r0, #95	; 0x5f
   2fd2a:	e7f4      	b.n	2fd16 <nrf_listen+0xe>
   2fd2c:	2000      	movs	r0, #0
   2fd2e:	f7ff fcd0 	bl	2f6d2 <rpc_client_msg_alloc>
   2fd32:	4601      	mov	r1, r0
   2fd34:	b908      	cbnz	r0, 2fd3a <nrf_listen+0x32>
   2fd36:	2069      	movs	r0, #105	; 0x69
   2fd38:	e7ed      	b.n	2fd16 <nrf_listen+0xe>
   2fd3a:	2300      	movs	r3, #0
   2fd3c:	2204      	movs	r2, #4
   2fd3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2fd42:	7243      	strb	r3, [r0, #9]
   2fd44:	7283      	strb	r3, [r0, #10]
   2fd46:	72c3      	strb	r3, [r0, #11]
   2fd48:	6105      	str	r5, [r0, #16]
   2fd4a:	7202      	strb	r2, [r0, #8]
   2fd4c:	6144      	str	r4, [r0, #20]
   2fd4e:	f247 0008 	movw	r0, #28680	; 0x7008
   2fd52:	f000 fac5 	bl	302e0 <req_forward>
   2fd56:	4603      	mov	r3, r0
   2fd58:	2800      	cmp	r0, #0
   2fd5a:	d0e0      	beq.n	2fd1e <nrf_listen+0x16>
   2fd5c:	e7db      	b.n	2fd16 <nrf_listen+0xe>

0002fd5e <nrf_accept>:
   2fd5e:	2300      	movs	r3, #0
   2fd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fd64:	b08d      	sub	sp, #52	; 0x34
   2fd66:	4606      	mov	r6, r0
   2fd68:	4688      	mov	r8, r1
   2fd6a:	4614      	mov	r4, r2
   2fd6c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2fd70:	f7f3 f934 	bl	22fdc <sock_find>
   2fd74:	4605      	mov	r5, r0
   2fd76:	b938      	cbnz	r0, 2fd88 <nrf_accept+0x2a>
   2fd78:	2009      	movs	r0, #9
   2fd7a:	f7ed f8f3 	bl	1cf64 <nrf_modem_os_errno_set>
   2fd7e:	f04f 30ff 	mov.w	r0, #4294967295
   2fd82:	b00d      	add	sp, #52	; 0x34
   2fd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fd88:	f1b8 0f00 	cmp.w	r8, #0
   2fd8c:	d002      	beq.n	2fd94 <nrf_accept+0x36>
   2fd8e:	b91c      	cbnz	r4, 2fd98 <nrf_accept+0x3a>
   2fd90:	200e      	movs	r0, #14
   2fd92:	e7f2      	b.n	2fd7a <nrf_accept+0x1c>
   2fd94:	2c00      	cmp	r4, #0
   2fd96:	d1fb      	bne.n	2fd90 <nrf_accept+0x32>
   2fd98:	4628      	mov	r0, r5
   2fd9a:	f7ff fd44 	bl	2f826 <sock_is_stream>
   2fd9e:	b908      	cbnz	r0, 2fda4 <nrf_accept+0x46>
   2fda0:	205f      	movs	r0, #95	; 0x5f
   2fda2:	e7ea      	b.n	2fd7a <nrf_accept+0x1c>
   2fda4:	4628      	mov	r0, r5
   2fda6:	f7ff fd65 	bl	2f874 <sock_is_nonblock>
   2fdaa:	b128      	cbz	r0, 2fdb8 <nrf_accept+0x5a>
   2fdac:	4628      	mov	r0, r5
   2fdae:	f7ff fd96 	bl	2f8de <sock_can_accept>
   2fdb2:	b908      	cbnz	r0, 2fdb8 <nrf_accept+0x5a>
   2fdb4:	200b      	movs	r0, #11
   2fdb6:	e7e0      	b.n	2fd7a <nrf_accept+0x1c>
   2fdb8:	f7f3 f8ea 	bl	22f90 <sock_open>
   2fdbc:	4607      	mov	r7, r0
   2fdbe:	b908      	cbnz	r0, 2fdc4 <nrf_accept+0x66>
   2fdc0:	2017      	movs	r0, #23
   2fdc2:	e7da      	b.n	2fd7a <nrf_accept+0x1c>
   2fdc4:	2000      	movs	r0, #0
   2fdc6:	f7ff fc84 	bl	2f6d2 <rpc_client_msg_alloc>
   2fdca:	4605      	mov	r5, r0
   2fdcc:	b920      	cbnz	r0, 2fdd8 <nrf_accept+0x7a>
   2fdce:	6838      	ldr	r0, [r7, #0]
   2fdd0:	f7f3 f916 	bl	23000 <_sock_close>
   2fdd4:	2069      	movs	r0, #105	; 0x69
   2fdd6:	e7d0      	b.n	2fd7a <nrf_accept+0x1c>
   2fdd8:	6106      	str	r6, [r0, #16]
   2fdda:	a901      	add	r1, sp, #4
   2fddc:	9702      	str	r7, [sp, #8]
   2fdde:	f000 faab 	bl	30338 <req_cookie_set>
   2fde2:	4629      	mov	r1, r5
   2fde4:	f247 000c 	movw	r0, #28684	; 0x700c
   2fde8:	f000 fa7a 	bl	302e0 <req_forward>
   2fdec:	4606      	mov	r6, r0
   2fdee:	b120      	cbz	r0, 2fdfa <nrf_accept+0x9c>
   2fdf0:	6838      	ldr	r0, [r7, #0]
   2fdf2:	f7f3 f905 	bl	23000 <_sock_close>
   2fdf6:	4630      	mov	r0, r6
   2fdf8:	e7bf      	b.n	2fd7a <nrf_accept+0x1c>
   2fdfa:	9d01      	ldr	r5, [sp, #4]
   2fdfc:	f1b8 0f00 	cmp.w	r8, #0
   2fe00:	d006      	beq.n	2fe10 <nrf_accept+0xb2>
   2fe02:	b12c      	cbz	r4, 2fe10 <nrf_accept+0xb2>
   2fe04:	8beb      	ldrh	r3, [r5, #30]
   2fe06:	2b04      	cmp	r3, #4
   2fe08:	d007      	beq.n	2fe1a <nrf_accept+0xbc>
   2fe0a:	2b10      	cmp	r3, #16
   2fe0c:	d01e      	beq.n	2fe4c <nrf_accept+0xee>
   2fe0e:	6026      	str	r6, [r4, #0]
   2fe10:	4628      	mov	r0, r5
   2fe12:	f7ff fc81 	bl	2f718 <rpc_client_msg_rx_free>
   2fe16:	6838      	ldr	r0, [r7, #0]
   2fe18:	e7b3      	b.n	2fd82 <nrf_accept+0x24>
   2fe1a:	2310      	movs	r3, #16
   2fe1c:	9003      	str	r0, [sp, #12]
   2fe1e:	f88d 300c 	strb.w	r3, [sp, #12]
   2fe22:	2301      	movs	r3, #1
   2fe24:	6826      	ldr	r6, [r4, #0]
   2fe26:	9005      	str	r0, [sp, #20]
   2fe28:	2e10      	cmp	r6, #16
   2fe2a:	bf28      	it	cs
   2fe2c:	2610      	movcs	r6, #16
   2fe2e:	9304      	str	r3, [sp, #16]
   2fe30:	7f2b      	ldrb	r3, [r5, #28]
   2fe32:	7f6a      	ldrb	r2, [r5, #29]
   2fe34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fe38:	f8ad 3014 	strh.w	r3, [sp, #20]
   2fe3c:	6a2b      	ldr	r3, [r5, #32]
   2fe3e:	9306      	str	r3, [sp, #24]
   2fe40:	4632      	mov	r2, r6
   2fe42:	4640      	mov	r0, r8
   2fe44:	a903      	add	r1, sp, #12
   2fe46:	f000 fcfc 	bl	30842 <memcpy>
   2fe4a:	e7e0      	b.n	2fe0e <nrf_accept+0xb0>
   2fe4c:	f04f 0924 	mov.w	r9, #36	; 0x24
   2fe50:	4601      	mov	r1, r0
   2fe52:	464a      	mov	r2, r9
   2fe54:	a803      	add	r0, sp, #12
   2fe56:	f000 fd14 	bl	30882 <memset>
   2fe5a:	2302      	movs	r3, #2
   2fe5c:	f88d 900c 	strb.w	r9, [sp, #12]
   2fe60:	9304      	str	r3, [sp, #16]
   2fe62:	7f2b      	ldrb	r3, [r5, #28]
   2fe64:	7f6a      	ldrb	r2, [r5, #29]
   2fe66:	ae07      	add	r6, sp, #28
   2fe68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2fe6c:	f8ad 3014 	strh.w	r3, [sp, #20]
   2fe70:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   2fe74:	f105 0320 	add.w	r3, r5, #32
   2fe78:	4632      	mov	r2, r6
   2fe7a:	6818      	ldr	r0, [r3, #0]
   2fe7c:	6859      	ldr	r1, [r3, #4]
   2fe7e:	3308      	adds	r3, #8
   2fe80:	c203      	stmia	r2!, {r0, r1}
   2fe82:	4563      	cmp	r3, ip
   2fe84:	4616      	mov	r6, r2
   2fe86:	d1f7      	bne.n	2fe78 <nrf_accept+0x11a>
   2fe88:	6826      	ldr	r6, [r4, #0]
   2fe8a:	2e24      	cmp	r6, #36	; 0x24
   2fe8c:	bf28      	it	cs
   2fe8e:	2624      	movcs	r6, #36	; 0x24
   2fe90:	e7d6      	b.n	2fe40 <nrf_accept+0xe2>

0002fe92 <nrf_recvfrom>:
   2fe92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe96:	b085      	sub	sp, #20
   2fe98:	4690      	mov	r8, r2
   2fe9a:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   2fe9e:	461e      	mov	r6, r3
   2fea0:	9101      	str	r1, [sp, #4]
   2fea2:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   2fea6:	f7f3 f899 	bl	22fdc <sock_find>
   2feaa:	4604      	mov	r4, r0
   2feac:	b940      	cbnz	r0, 2fec0 <nrf_recvfrom+0x2e>
   2feae:	2009      	movs	r0, #9
   2feb0:	f7ed f858 	bl	1cf64 <nrf_modem_os_errno_set>
   2feb4:	f04f 39ff 	mov.w	r9, #4294967295
   2feb8:	4648      	mov	r0, r9
   2feba:	b005      	add	sp, #20
   2febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fec0:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   2fec4:	d001      	beq.n	2feca <nrf_recvfrom+0x38>
   2fec6:	205f      	movs	r0, #95	; 0x5f
   2fec8:	e7f2      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2feca:	f1bb 0f00 	cmp.w	fp, #0
   2fece:	d002      	beq.n	2fed6 <nrf_recvfrom+0x44>
   2fed0:	b91f      	cbnz	r7, 2feda <nrf_recvfrom+0x48>
   2fed2:	200e      	movs	r0, #14
   2fed4:	e7ec      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2fed6:	2f00      	cmp	r7, #0
   2fed8:	d1fb      	bne.n	2fed2 <nrf_recvfrom+0x40>
   2feda:	4620      	mov	r0, r4
   2fedc:	f7ff fca3 	bl	2f826 <sock_is_stream>
   2fee0:	b128      	cbz	r0, 2feee <nrf_recvfrom+0x5c>
   2fee2:	4620      	mov	r0, r4
   2fee4:	f7ff fcbe 	bl	2f864 <sock_is_connected>
   2fee8:	b908      	cbnz	r0, 2feee <nrf_recvfrom+0x5c>
   2feea:	2080      	movs	r0, #128	; 0x80
   2feec:	e7e0      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2feee:	f1ba 0f00 	cmp.w	sl, #0
   2fef2:	d117      	bne.n	2ff24 <nrf_recvfrom+0x92>
   2fef4:	4620      	mov	r0, r4
   2fef6:	f7ff fcbd 	bl	2f874 <sock_is_nonblock>
   2fefa:	b9a8      	cbnz	r0, 2ff28 <nrf_recvfrom+0x96>
   2fefc:	f3c6 1580 	ubfx	r5, r6, #6, #1
   2ff00:	4620      	mov	r0, r4
   2ff02:	f7ff fd0f 	bl	2f924 <sock_rcvtimeo_ms_get>
   2ff06:	9003      	str	r0, [sp, #12]
   2ff08:	4620      	mov	r0, r4
   2ff0a:	f7ff fcb7 	bl	2f87c <sock_is_closed>
   2ff0e:	b1b8      	cbz	r0, 2ff40 <nrf_recvfrom+0xae>
   2ff10:	4620      	mov	r0, r4
   2ff12:	f7ff fc63 	bl	2f7dc <sock_has_pkt>
   2ff16:	bb78      	cbnz	r0, 2ff78 <nrf_recvfrom+0xe6>
   2ff18:	4620      	mov	r0, r4
   2ff1a:	f7ff fcc5 	bl	2f8a8 <sock_has_error>
   2ff1e:	b1c0      	cbz	r0, 2ff52 <nrf_recvfrom+0xc0>
   2ff20:	69a0      	ldr	r0, [r4, #24]
   2ff22:	e7c5      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2ff24:	2500      	movs	r5, #0
   2ff26:	e7eb      	b.n	2ff00 <nrf_recvfrom+0x6e>
   2ff28:	2501      	movs	r5, #1
   2ff2a:	e7e9      	b.n	2ff00 <nrf_recvfrom+0x6e>
   2ff2c:	2002      	movs	r0, #2
   2ff2e:	a903      	add	r1, sp, #12
   2ff30:	f7ec ff56 	bl	1cde0 <nrf_modem_os_timedwait>
   2ff34:	2800      	cmp	r0, #0
   2ff36:	d0e7      	beq.n	2ff08 <nrf_recvfrom+0x76>
   2ff38:	2800      	cmp	r0, #0
   2ff3a:	bfb8      	it	lt
   2ff3c:	4240      	neglt	r0, r0
   2ff3e:	e7b7      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2ff40:	4620      	mov	r0, r4
   2ff42:	f7ff fc4b 	bl	2f7dc <sock_has_pkt>
   2ff46:	2800      	cmp	r0, #0
   2ff48:	d1e2      	bne.n	2ff10 <nrf_recvfrom+0x7e>
   2ff4a:	2d00      	cmp	r5, #0
   2ff4c:	d0ee      	beq.n	2ff2c <nrf_recvfrom+0x9a>
   2ff4e:	200b      	movs	r0, #11
   2ff50:	e7ae      	b.n	2feb0 <nrf_recvfrom+0x1e>
   2ff52:	4620      	mov	r0, r4
   2ff54:	f7ff fc9a 	bl	2f88c <sock_is_eof>
   2ff58:	2800      	cmp	r0, #0
   2ff5a:	d1ad      	bne.n	2feb8 <nrf_recvfrom+0x26>
   2ff5c:	4620      	mov	r0, r4
   2ff5e:	f7ff fc91 	bl	2f884 <sock_is_local_closed>
   2ff62:	b148      	cbz	r0, 2ff78 <nrf_recvfrom+0xe6>
   2ff64:	4620      	mov	r0, r4
   2ff66:	f7ff fc5e 	bl	2f826 <sock_is_stream>
   2ff6a:	2800      	cmp	r0, #0
   2ff6c:	d1a4      	bne.n	2feb8 <nrf_recvfrom+0x26>
   2ff6e:	4620      	mov	r0, r4
   2ff70:	f7ff fc5e 	bl	2f830 <sock_is_datagram>
   2ff74:	2800      	cmp	r0, #0
   2ff76:	d19a      	bne.n	2feae <nrf_recvfrom+0x1c>
   2ff78:	4620      	mov	r0, r4
   2ff7a:	f7ff fc52 	bl	2f822 <sock_pkt_peek_head>
   2ff7e:	4605      	mov	r5, r0
   2ff80:	f1bb 0f00 	cmp.w	fp, #0
   2ff84:	d00a      	beq.n	2ff9c <nrf_recvfrom+0x10a>
   2ff86:	68c1      	ldr	r1, [r0, #12]
   2ff88:	b369      	cbz	r1, 2ffe6 <nrf_recvfrom+0x154>
   2ff8a:	780a      	ldrb	r2, [r1, #0]
   2ff8c:	683b      	ldr	r3, [r7, #0]
   2ff8e:	4658      	mov	r0, fp
   2ff90:	429a      	cmp	r2, r3
   2ff92:	bf28      	it	cs
   2ff94:	461a      	movcs	r2, r3
   2ff96:	603a      	str	r2, [r7, #0]
   2ff98:	f000 fc53 	bl	30842 <memcpy>
   2ff9c:	f006 0602 	and.w	r6, r6, #2
   2ffa0:	4628      	mov	r0, r5
   2ffa2:	f7ff fd3a 	bl	2fa1a <pkt_bytes_left>
   2ffa6:	4540      	cmp	r0, r8
   2ffa8:	d81f      	bhi.n	2ffea <nrf_recvfrom+0x158>
   2ffaa:	4628      	mov	r0, r5
   2ffac:	f7ff fd35 	bl	2fa1a <pkt_bytes_left>
   2ffb0:	4607      	mov	r7, r0
   2ffb2:	2f00      	cmp	r7, #0
   2ffb4:	d080      	beq.n	2feb8 <nrf_recvfrom+0x26>
   2ffb6:	9b01      	ldr	r3, [sp, #4]
   2ffb8:	4628      	mov	r0, r5
   2ffba:	eb03 0b09 	add.w	fp, r3, r9
   2ffbe:	f7ff fd28 	bl	2fa12 <pkt_bytes_get>
   2ffc2:	463a      	mov	r2, r7
   2ffc4:	4601      	mov	r1, r0
   2ffc6:	4658      	mov	r0, fp
   2ffc8:	f000 fc3b 	bl	30842 <memcpy>
   2ffcc:	4620      	mov	r0, r4
   2ffce:	44b9      	add	r9, r7
   2ffd0:	f7ff fc2e 	bl	2f830 <sock_is_datagram>
   2ffd4:	b158      	cbz	r0, 2ffee <nrf_recvfrom+0x15c>
   2ffd6:	2e00      	cmp	r6, #0
   2ffd8:	f47f af6e 	bne.w	2feb8 <nrf_recvfrom+0x26>
   2ffdc:	4629      	mov	r1, r5
   2ffde:	4620      	mov	r0, r4
   2ffe0:	f7ff fc0b 	bl	2f7fa <sock_pkt_remove>
   2ffe4:	e768      	b.n	2feb8 <nrf_recvfrom+0x26>
   2ffe6:	6039      	str	r1, [r7, #0]
   2ffe8:	e7d8      	b.n	2ff9c <nrf_recvfrom+0x10a>
   2ffea:	4647      	mov	r7, r8
   2ffec:	e7e1      	b.n	2ffb2 <nrf_recvfrom+0x120>
   2ffee:	4620      	mov	r0, r4
   2fff0:	f7ff fc23 	bl	2f83a <sock_is_raw>
   2fff4:	2800      	cmp	r0, #0
   2fff6:	d1ee      	bne.n	2ffd6 <nrf_recvfrom+0x144>
   2fff8:	b956      	cbnz	r6, 30010 <CONFIG_FLASH_LOAD_SIZE+0x10>
   2fffa:	896b      	ldrh	r3, [r5, #10]
   2fffc:	4628      	mov	r0, r5
   2fffe:	443b      	add	r3, r7
   30000:	816b      	strh	r3, [r5, #10]
   30002:	f7ff fd0a 	bl	2fa1a <pkt_bytes_left>
   30006:	b918      	cbnz	r0, 30010 <CONFIG_FLASH_LOAD_SIZE+0x10>
   30008:	4629      	mov	r1, r5
   3000a:	4620      	mov	r0, r4
   3000c:	f7ff fbf5 	bl	2f7fa <sock_pkt_remove>
   30010:	45b8      	cmp	r8, r7
   30012:	f43f af51 	beq.w	2feb8 <nrf_recvfrom+0x26>
   30016:	f1ba 0f00 	cmp.w	sl, #0
   3001a:	d10a      	bne.n	30032 <CONFIG_FLASH_LOAD_SIZE+0x32>
   3001c:	b976      	cbnz	r6, 3003c <CONFIG_FLASH_LOAD_SIZE+0x3c>
   3001e:	4620      	mov	r0, r4
   30020:	f7ff fbff 	bl	2f822 <sock_pkt_peek_head>
   30024:	e00d      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
   30026:	4620      	mov	r0, r4
   30028:	f7ff fc28 	bl	2f87c <sock_is_closed>
   3002c:	2800      	cmp	r0, #0
   3002e:	f47f af43 	bne.w	2feb8 <nrf_recvfrom+0x26>
   30032:	b16e      	cbz	r6, 30050 <CONFIG_FLASH_LOAD_SIZE+0x50>
   30034:	4628      	mov	r0, r5
   30036:	f7ff fce3 	bl	2fa00 <pkt_has_next>
   3003a:	b170      	cbz	r0, 3005a <CONFIG_FLASH_LOAD_SIZE+0x5a>
   3003c:	4628      	mov	r0, r5
   3003e:	f7ff fce5 	bl	2fa0c <pkt_peek_next>
   30042:	4605      	mov	r5, r0
   30044:	2800      	cmp	r0, #0
   30046:	f43f af37 	beq.w	2feb8 <nrf_recvfrom+0x26>
   3004a:	eba8 0807 	sub.w	r8, r8, r7
   3004e:	e7a7      	b.n	2ffa0 <nrf_recvfrom+0x10e>
   30050:	4620      	mov	r0, r4
   30052:	f7ff fbc3 	bl	2f7dc <sock_has_pkt>
   30056:	2800      	cmp	r0, #0
   30058:	d1e1      	bne.n	3001e <CONFIG_FLASH_LOAD_SIZE+0x1e>
   3005a:	2002      	movs	r0, #2
   3005c:	a903      	add	r1, sp, #12
   3005e:	f7ec febf 	bl	1cde0 <nrf_modem_os_timedwait>
   30062:	2800      	cmp	r0, #0
   30064:	d0df      	beq.n	30026 <CONFIG_FLASH_LOAD_SIZE+0x26>
   30066:	f1b9 0f00 	cmp.w	r9, #0
   3006a:	f47f af25 	bne.w	2feb8 <nrf_recvfrom+0x26>
   3006e:	e763      	b.n	2ff38 <nrf_recvfrom+0xa6>

00030070 <rpc_ip_deinit>:
   30070:	b508      	push	{r3, lr}
   30072:	f7f2 ffdb 	bl	2302c <sock_shutdown>
   30076:	2000      	movs	r0, #0
   30078:	bd08      	pop	{r3, pc}

0003007a <tls_setopt_role>:
   3007a:	b508      	push	{r3, lr}
   3007c:	b109      	cbz	r1, 30082 <tls_setopt_role+0x8>
   3007e:	2a04      	cmp	r2, #4
   30080:	d005      	beq.n	3008e <tls_setopt_role+0x14>
   30082:	2016      	movs	r0, #22
   30084:	f7ec ff6e 	bl	1cf64 <nrf_modem_os_errno_set>
   30088:	f04f 30ff 	mov.w	r0, #4294967295
   3008c:	e006      	b.n	3009c <tls_setopt_role+0x22>
   3008e:	780b      	ldrb	r3, [r1, #0]
   30090:	b12b      	cbz	r3, 3009e <tls_setopt_role+0x24>
   30092:	2b01      	cmp	r3, #1
   30094:	d1f5      	bne.n	30082 <tls_setopt_role+0x8>
   30096:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   3009a:	2000      	movs	r0, #0
   3009c:	bd08      	pop	{r3, pc}
   3009e:	2302      	movs	r3, #2
   300a0:	e7f9      	b.n	30096 <tls_setopt_role+0x1c>

000300a2 <tls_setopt_taglist>:
   300a2:	b510      	push	{r4, lr}
   300a4:	1e54      	subs	r4, r2, #1
   300a6:	2c1b      	cmp	r4, #27
   300a8:	d802      	bhi.n	300b0 <tls_setopt_taglist+0xe>
   300aa:	f012 0403 	ands.w	r4, r2, #3
   300ae:	d005      	beq.n	300bc <tls_setopt_taglist+0x1a>
   300b0:	2016      	movs	r0, #22
   300b2:	f7ec ff57 	bl	1cf64 <nrf_modem_os_errno_set>
   300b6:	f04f 30ff 	mov.w	r0, #4294967295
   300ba:	bd10      	pop	{r4, pc}
   300bc:	0893      	lsrs	r3, r2, #2
   300be:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   300c2:	3048      	adds	r0, #72	; 0x48
   300c4:	f000 fbbd 	bl	30842 <memcpy>
   300c8:	4620      	mov	r0, r4
   300ca:	e7f6      	b.n	300ba <tls_setopt_taglist+0x18>

000300cc <tls_setopt_sess_cache>:
   300cc:	b508      	push	{r3, lr}
   300ce:	b109      	cbz	r1, 300d4 <tls_setopt_sess_cache+0x8>
   300d0:	2a04      	cmp	r2, #4
   300d2:	d005      	beq.n	300e0 <tls_setopt_sess_cache+0x14>
   300d4:	2016      	movs	r0, #22
   300d6:	f7ec ff45 	bl	1cf64 <nrf_modem_os_errno_set>
   300da:	f04f 30ff 	mov.w	r0, #4294967295
   300de:	bd08      	pop	{r3, pc}
   300e0:	780b      	ldrb	r3, [r1, #0]
   300e2:	3b00      	subs	r3, #0
   300e4:	bf18      	it	ne
   300e6:	2301      	movne	r3, #1
   300e8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   300ec:	2000      	movs	r0, #0
   300ee:	e7f6      	b.n	300de <tls_setopt_sess_cache+0x12>

000300f0 <tls_setopt_peer_verify>:
   300f0:	b508      	push	{r3, lr}
   300f2:	b109      	cbz	r1, 300f8 <tls_setopt_peer_verify+0x8>
   300f4:	2a04      	cmp	r2, #4
   300f6:	d005      	beq.n	30104 <tls_setopt_peer_verify+0x14>
   300f8:	2016      	movs	r0, #22
   300fa:	f7ec ff33 	bl	1cf64 <nrf_modem_os_errno_set>
   300fe:	f04f 30ff 	mov.w	r0, #4294967295
   30102:	bd08      	pop	{r3, pc}
   30104:	680b      	ldr	r3, [r1, #0]
   30106:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   3010a:	2000      	movs	r0, #0
   3010c:	e7f9      	b.n	30102 <tls_setopt_peer_verify+0x12>

0003010e <tls_setopt_hostname>:
   3010e:	b570      	push	{r4, r5, r6, lr}
   30110:	4605      	mov	r5, r0
   30112:	4614      	mov	r4, r2
   30114:	460e      	mov	r6, r1
   30116:	b931      	cbnz	r1, 30126 <tls_setopt_hostname+0x18>
   30118:	b192      	cbz	r2, 30140 <tls_setopt_hostname+0x32>
   3011a:	2016      	movs	r0, #22
   3011c:	f7ec ff22 	bl	1cf64 <nrf_modem_os_errno_set>
   30120:	f04f 30ff 	mov.w	r0, #4294967295
   30124:	bd70      	pop	{r4, r5, r6, pc}
   30126:	2a00      	cmp	r2, #0
   30128:	d0f7      	beq.n	3011a <tls_setopt_hostname+0xc>
   3012a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   3012c:	b108      	cbz	r0, 30132 <tls_setopt_hostname+0x24>
   3012e:	f7ec fff3 	bl	1d118 <nrf_modem_os_free>
   30132:	1c60      	adds	r0, r4, #1
   30134:	f7ec ffe8 	bl	1d108 <nrf_modem_os_alloc>
   30138:	6428      	str	r0, [r5, #64]	; 0x40
   3013a:	b938      	cbnz	r0, 3014c <tls_setopt_hostname+0x3e>
   3013c:	2069      	movs	r0, #105	; 0x69
   3013e:	e7ed      	b.n	3011c <tls_setopt_hostname+0xe>
   30140:	6c00      	ldr	r0, [r0, #64]	; 0x40
   30142:	b108      	cbz	r0, 30148 <tls_setopt_hostname+0x3a>
   30144:	f7ec ffe8 	bl	1d118 <nrf_modem_os_free>
   30148:	2000      	movs	r0, #0
   3014a:	e7eb      	b.n	30124 <tls_setopt_hostname+0x16>
   3014c:	4622      	mov	r2, r4
   3014e:	4631      	mov	r1, r6
   30150:	f000 fb77 	bl	30842 <memcpy>
   30154:	2200      	movs	r2, #0
   30156:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   30158:	551a      	strb	r2, [r3, r4]
   3015a:	e7f5      	b.n	30148 <tls_setopt_hostname+0x3a>

0003015c <nrf_poll_one>:
   3015c:	b538      	push	{r3, r4, r5, lr}
   3015e:	4604      	mov	r4, r0
   30160:	6800      	ldr	r0, [r0, #0]
   30162:	f7f2 ff3b 	bl	22fdc <sock_find>
   30166:	4605      	mov	r5, r0
   30168:	b928      	cbnz	r0, 30176 <nrf_poll_one+0x1a>
   3016a:	2001      	movs	r0, #1
   3016c:	88e3      	ldrh	r3, [r4, #6]
   3016e:	f043 0320 	orr.w	r3, r3, #32
   30172:	80e3      	strh	r3, [r4, #6]
   30174:	bd38      	pop	{r3, r4, r5, pc}
   30176:	f7ff fb85 	bl	2f884 <sock_is_local_closed>
   3017a:	2800      	cmp	r0, #0
   3017c:	d1f5      	bne.n	3016a <nrf_poll_one+0xe>
   3017e:	4628      	mov	r0, r5
   30180:	f7ff fb92 	bl	2f8a8 <sock_has_error>
   30184:	b1f8      	cbz	r0, 301c6 <nrf_poll_one+0x6a>
   30186:	88e3      	ldrh	r3, [r4, #6]
   30188:	f043 0308 	orr.w	r3, r3, #8
   3018c:	80e3      	strh	r3, [r4, #6]
   3018e:	88a3      	ldrh	r3, [r4, #4]
   30190:	07da      	lsls	r2, r3, #31
   30192:	d507      	bpl.n	301a4 <nrf_poll_one+0x48>
   30194:	4628      	mov	r0, r5
   30196:	f7ff fb9d 	bl	2f8d4 <sock_can_read>
   3019a:	b1e8      	cbz	r0, 301d8 <nrf_poll_one+0x7c>
   3019c:	88e3      	ldrh	r3, [r4, #6]
   3019e:	f043 0301 	orr.w	r3, r3, #1
   301a2:	80e3      	strh	r3, [r4, #6]
   301a4:	88a3      	ldrh	r3, [r4, #4]
   301a6:	075b      	lsls	r3, r3, #29
   301a8:	d507      	bpl.n	301ba <nrf_poll_one+0x5e>
   301aa:	4628      	mov	r0, r5
   301ac:	f7ff fb9c 	bl	2f8e8 <sock_can_send>
   301b0:	b118      	cbz	r0, 301ba <nrf_poll_one+0x5e>
   301b2:	88e3      	ldrh	r3, [r4, #6]
   301b4:	f043 0304 	orr.w	r3, r3, #4
   301b8:	80e3      	strh	r3, [r4, #6]
   301ba:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   301be:	3800      	subs	r0, #0
   301c0:	bf18      	it	ne
   301c2:	2001      	movne	r0, #1
   301c4:	e7d6      	b.n	30174 <nrf_poll_one+0x18>
   301c6:	4628      	mov	r0, r5
   301c8:	f7ff fb60 	bl	2f88c <sock_is_eof>
   301cc:	2800      	cmp	r0, #0
   301ce:	d0de      	beq.n	3018e <nrf_poll_one+0x32>
   301d0:	88e3      	ldrh	r3, [r4, #6]
   301d2:	f043 0310 	orr.w	r3, r3, #16
   301d6:	e7d9      	b.n	3018c <nrf_poll_one+0x30>
   301d8:	4628      	mov	r0, r5
   301da:	f7ff fb80 	bl	2f8de <sock_can_accept>
   301de:	2800      	cmp	r0, #0
   301e0:	d1dc      	bne.n	3019c <nrf_poll_one+0x40>
   301e2:	4628      	mov	r0, r5
   301e4:	f7ff fb52 	bl	2f88c <sock_is_eof>
   301e8:	2800      	cmp	r0, #0
   301ea:	d1d7      	bne.n	3019c <nrf_poll_one+0x40>
   301ec:	e7da      	b.n	301a4 <nrf_poll_one+0x48>

000301ee <nrf_fcntl>:
   301ee:	b538      	push	{r3, r4, r5, lr}
   301f0:	460d      	mov	r5, r1
   301f2:	4614      	mov	r4, r2
   301f4:	f7f2 fef2 	bl	22fdc <sock_find>
   301f8:	b928      	cbnz	r0, 30206 <nrf_fcntl+0x18>
   301fa:	2009      	movs	r0, #9
   301fc:	f7ec feb2 	bl	1cf64 <nrf_modem_os_errno_set>
   30200:	f04f 30ff 	mov.w	r0, #4294967295
   30204:	e006      	b.n	30214 <nrf_fcntl+0x26>
   30206:	2d03      	cmp	r5, #3
   30208:	d003      	beq.n	30212 <nrf_fcntl+0x24>
   3020a:	2d04      	cmp	r5, #4
   3020c:	d003      	beq.n	30216 <nrf_fcntl+0x28>
   3020e:	2016      	movs	r0, #22
   30210:	e7f4      	b.n	301fc <nrf_fcntl+0xe>
   30212:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   30214:	bd38      	pop	{r3, r4, r5, pc}
   30216:	2c01      	cmp	r4, #1
   30218:	d8f9      	bhi.n	3020e <nrf_fcntl+0x20>
   3021a:	63c4      	str	r4, [r0, #60]	; 0x3c
   3021c:	2000      	movs	r0, #0
   3021e:	e7f9      	b.n	30214 <nrf_fcntl+0x26>

00030220 <rpc_af_to_nrf_af>:
   30220:	1f43      	subs	r3, r0, #5
   30222:	2b00      	cmp	r3, #0
   30224:	d803      	bhi.n	3022e <rpc_af_to_nrf_af+0xe>
   30226:	e8df f003 	tbb	[pc, r3]
   3022a:	01          	.byte	0x01
   3022b:	00          	.byte	0x00
   3022c:	2003      	movs	r0, #3
   3022e:	4770      	bx	lr

00030230 <nrf_type_to_rpc_type>:
   30230:	4770      	bx	lr

00030232 <nrf_proto_to_rpc_proto>:
   30232:	2829      	cmp	r0, #41	; 0x29
   30234:	d015      	beq.n	30262 <nrf_proto_to_rpc_proto+0x30>
   30236:	dc05      	bgt.n	30244 <nrf_proto_to_rpc_proto+0x12>
   30238:	2806      	cmp	r0, #6
   3023a:	d014      	beq.n	30266 <nrf_proto_to_rpc_proto+0x34>
   3023c:	2811      	cmp	r0, #17
   3023e:	d014      	beq.n	3026a <nrf_proto_to_rpc_proto+0x38>
   30240:	b148      	cbz	r0, 30256 <nrf_proto_to_rpc_proto+0x24>
   30242:	4770      	bx	lr
   30244:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   30248:	d00d      	beq.n	30266 <nrf_proto_to_rpc_proto+0x34>
   3024a:	f240 1311 	movw	r3, #273	; 0x111
   3024e:	4298      	cmp	r0, r3
   30250:	d00b      	beq.n	3026a <nrf_proto_to_rpc_proto+0x38>
   30252:	28ff      	cmp	r0, #255	; 0xff
   30254:	d10c      	bne.n	30270 <nrf_proto_to_rpc_proto+0x3e>
   30256:	2901      	cmp	r1, #1
   30258:	d009      	beq.n	3026e <nrf_proto_to_rpc_proto+0x3c>
   3025a:	2902      	cmp	r1, #2
   3025c:	bf08      	it	eq
   3025e:	2002      	moveq	r0, #2
   30260:	4770      	bx	lr
   30262:	2006      	movs	r0, #6
   30264:	4770      	bx	lr
   30266:	2001      	movs	r0, #1
   30268:	4770      	bx	lr
   3026a:	2002      	movs	r0, #2
   3026c:	4770      	bx	lr
   3026e:	4608      	mov	r0, r1
   30270:	4770      	bx	lr

00030272 <nrf_sol_to_rpc_sol>:
   30272:	2829      	cmp	r0, #41	; 0x29
   30274:	d011      	beq.n	3029a <nrf_sol_to_rpc_sol+0x28>
   30276:	dc0a      	bgt.n	3028e <nrf_sol_to_rpc_sol+0x1c>
   30278:	2801      	cmp	r0, #1
   3027a:	d010      	beq.n	3029e <nrf_sol_to_rpc_sol+0x2c>
   3027c:	2806      	cmp	r0, #6
   3027e:	d010      	beq.n	302a2 <nrf_sol_to_rpc_sol+0x30>
   30280:	2800      	cmp	r0, #0
   30282:	bf08      	it	eq
   30284:	2004      	moveq	r0, #4
   30286:	bf18      	it	ne
   30288:	f04f 30ff 	movne.w	r0, #4294967295
   3028c:	4770      	bx	lr
   3028e:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   30292:	d008      	beq.n	302a6 <nrf_sol_to_rpc_sol+0x34>
   30294:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   30298:	e7f5      	b.n	30286 <nrf_sol_to_rpc_sol+0x14>
   3029a:	2006      	movs	r0, #6
   3029c:	4770      	bx	lr
   3029e:	2008      	movs	r0, #8
   302a0:	4770      	bx	lr
   302a2:	2001      	movs	r0, #1
   302a4:	4770      	bx	lr
   302a6:	f44f 7080 	mov.w	r0, #256	; 0x100
   302aa:	4770      	bx	lr

000302ac <rpc_error_to_nrf_gai_errno>:
   302ac:	b508      	push	{r3, lr}
   302ae:	1f03      	subs	r3, r0, #4
   302b0:	2b09      	cmp	r3, #9
   302b2:	d80f      	bhi.n	302d4 <rpc_error_to_nrf_gai_errno+0x28>
   302b4:	e8df f003 	tbb	[pc, r3]
   302b8:	0e051108 	.word	0x0e051108
   302bc:	0e0e0e0e 	.word	0x0e0e0e0e
   302c0:	050e      	.short	0x050e
   302c2:	f06f 0001 	mvn.w	r0, #1
   302c6:	bd08      	pop	{r3, pc}
   302c8:	2073      	movs	r0, #115	; 0x73
   302ca:	f7ec fe4b 	bl	1cf64 <nrf_modem_os_errno_set>
   302ce:	f06f 000a 	mvn.w	r0, #10
   302d2:	e7f8      	b.n	302c6 <rpc_error_to_nrf_gai_errno+0x1a>
   302d4:	f7f3 fdec 	bl	23eb0 <rpc_error_to_nrf_errno>
   302d8:	e7f7      	b.n	302ca <rpc_error_to_nrf_gai_errno+0x1e>
   302da:	f06f 0063 	mvn.w	r0, #99	; 0x63
   302de:	e7f2      	b.n	302c6 <rpc_error_to_nrf_gai_errno+0x1a>

000302e0 <req_forward>:
   302e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   302e2:	2300      	movs	r3, #0
   302e4:	460a      	mov	r2, r1
   302e6:	f04f 31ff 	mov.w	r1, #4294967295
   302ea:	9303      	str	r3, [sp, #12]
   302ec:	68d6      	ldr	r6, [r2, #12]
   302ee:	ad02      	add	r5, sp, #8
   302f0:	9302      	str	r3, [sp, #8]
   302f2:	9101      	str	r1, [sp, #4]
   302f4:	b18e      	cbz	r6, 3031a <req_forward+0x3a>
   302f6:	4635      	mov	r5, r6
   302f8:	b281      	uxth	r1, r0
   302fa:	602b      	str	r3, [r5, #0]
   302fc:	2004      	movs	r0, #4
   302fe:	f7ff fa04 	bl	2f70a <rpc_client_msg_send>
   30302:	682b      	ldr	r3, [r5, #0]
   30304:	b15b      	cbz	r3, 3031e <req_forward+0x3e>
   30306:	6958      	ldr	r0, [r3, #20]
   30308:	f7f3 fdd2 	bl	23eb0 <rpc_error_to_nrf_errno>
   3030c:	4604      	mov	r4, r0
   3030e:	b106      	cbz	r6, 30312 <req_forward+0x32>
   30310:	b178      	cbz	r0, 30332 <req_forward+0x52>
   30312:	6828      	ldr	r0, [r5, #0]
   30314:	f7ff fa00 	bl	2f718 <rpc_client_msg_rx_free>
   30318:	e00b      	b.n	30332 <req_forward+0x52>
   3031a:	60d5      	str	r5, [r2, #12]
   3031c:	e7ec      	b.n	302f8 <req_forward+0x18>
   3031e:	2002      	movs	r0, #2
   30320:	a901      	add	r1, sp, #4
   30322:	f7ec fd5d 	bl	1cde0 <nrf_modem_os_timedwait>
   30326:	2800      	cmp	r0, #0
   30328:	d0eb      	beq.n	30302 <req_forward+0x22>
   3032a:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   3032e:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   30332:	4620      	mov	r0, r4
   30334:	b004      	add	sp, #16
   30336:	bd70      	pop	{r4, r5, r6, pc}

00030338 <req_cookie_set>:
   30338:	60c1      	str	r1, [r0, #12]
   3033a:	4770      	bx	lr

0003033c <res_cookie_get>:
   3033c:	68c0      	ldr	r0, [r0, #12]
   3033e:	4770      	bx	lr

00030340 <res_forward>:
   30340:	68c3      	ldr	r3, [r0, #12]
   30342:	6018      	str	r0, [r3, #0]
   30344:	2001      	movs	r0, #1
   30346:	4770      	bx	lr

00030348 <rpc_dfu_event_handler>:
   30348:	b510      	push	{r4, lr}
   3034a:	4604      	mov	r4, r0
   3034c:	6800      	ldr	r0, [r0, #0]
   3034e:	b108      	cbz	r0, 30354 <rpc_dfu_event_handler+0xc>
   30350:	f7ff f9e5 	bl	2f71e <rpc_client_msg_data_rx_free>
   30354:	68e0      	ldr	r0, [r4, #12]
   30356:	b108      	cbz	r0, 3035c <rpc_dfu_event_handler+0x14>
   30358:	6004      	str	r4, [r0, #0]
   3035a:	2001      	movs	r0, #1
   3035c:	bd10      	pop	{r4, pc}

0003035e <rpc_at_deinit>:
   3035e:	2000      	movs	r0, #0
   30360:	4770      	bx	lr

00030362 <rpc_delta_dfu_deinit>:
   30362:	2000      	movs	r0, #0
   30364:	4770      	bx	lr

00030366 <rpc_delta_dfu_init>:
   30366:	2000      	movs	r0, #0
   30368:	4770      	bx	lr

0003036a <nrf_modem_is_initialized>:
   3036a:	f7f3 bf13 	b.w	24194 <nrf_modem_state_is_initialized>

0003036e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   3036e:	4770      	bx	lr

00030370 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30370:	b140      	cbz	r0, 30384 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30372:	68c3      	ldr	r3, [r0, #12]
   30374:	7858      	ldrb	r0, [r3, #1]
   30376:	f010 0001 	ands.w	r0, r0, #1
   3037a:	bf1e      	ittt	ne
   3037c:	7818      	ldrbne	r0, [r3, #0]
   3037e:	fab0 f080 	clzne	r0, r0
   30382:	0940      	lsrne	r0, r0, #5
}
   30384:	4770      	bx	lr

00030386 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   30386:	f000 ba7c 	b.w	30882 <memset>

0003038a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3038a:	f000 ba5a 	b.w	30842 <memcpy>

0003038e <k_heap_init>:
{
   3038e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   30390:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   30394:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30398:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   3039a:	f7dd bc11 	b.w	dbc0 <sys_heap_init>

0003039e <k_heap_alloc>:
{
   3039e:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   303a0:	e9cd 2300 	strd	r2, r3, [sp]
   303a4:	460a      	mov	r2, r1
   303a6:	2104      	movs	r1, #4
   303a8:	f7f4 f936 	bl	24618 <k_heap_aligned_alloc>
}
   303ac:	b003      	add	sp, #12
   303ae:	f85d fb04 	ldr.w	pc, [sp], #4

000303b2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   303b2:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   303b6:	4313      	orrs	r3, r2
   303b8:	f013 0303 	ands.w	r3, r3, #3
   303bc:	d10c      	bne.n	303d8 <create_free_list+0x26>
	slab->free_list = NULL;
   303be:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   303c0:	68c1      	ldr	r1, [r0, #12]
   303c2:	4299      	cmp	r1, r3
   303c4:	d801      	bhi.n	303ca <create_free_list+0x18>
	return 0;
   303c6:	2000      	movs	r0, #0
   303c8:	4770      	bx	lr
		*(char **)p = slab->free_list;
   303ca:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   303cc:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   303ce:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   303d0:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   303d2:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   303d4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   303d6:	e7f3      	b.n	303c0 <create_free_list+0xe>
		return -EINVAL;
   303d8:	f06f 0015 	mvn.w	r0, #21
}
   303dc:	4770      	bx	lr

000303de <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   303de:	f3ef 8005 	mrs	r0, IPSR
}
   303e2:	3800      	subs	r0, #0
   303e4:	bf18      	it	ne
   303e6:	2001      	movne	r0, #1
   303e8:	4770      	bx	lr

000303ea <z_impl_k_thread_name_set>:
}
   303ea:	f06f 0057 	mvn.w	r0, #87	; 0x57
   303ee:	4770      	bx	lr

000303f0 <k_thread_name_get>:
}
   303f0:	2000      	movs	r0, #0
   303f2:	4770      	bx	lr

000303f4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   303f4:	f7f5 be92 	b.w	2611c <z_sched_start>

000303f8 <z_pm_save_idle_exit>:
{
   303f8:	b508      	push	{r3, lr}
	pm_system_resume();
   303fa:	f7df fdcf 	bl	ff9c <pm_system_resume>
}
   303fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   30402:	f7fe bce8 	b.w	2edd6 <sys_clock_idle_exit>

00030406 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30406:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3040a:	428b      	cmp	r3, r1
   3040c:	d001      	beq.n	30412 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   3040e:	f7f6 b975 	b.w	266fc <z_set_prio>
}
   30412:	2000      	movs	r0, #0
   30414:	4770      	bx	lr

00030416 <z_impl_k_mutex_init>:
{
   30416:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30418:	2000      	movs	r0, #0
   3041a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   3041e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   30422:	4770      	bx	lr

00030424 <z_queue_node_peek>:
{
   30424:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30426:	4604      	mov	r4, r0
   30428:	b130      	cbz	r0, 30438 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3042a:	6802      	ldr	r2, [r0, #0]
   3042c:	0793      	lsls	r3, r2, #30
   3042e:	d003      	beq.n	30438 <z_queue_node_peek+0x14>
		ret = anode->data;
   30430:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30432:	b109      	cbz	r1, 30438 <z_queue_node_peek+0x14>
			k_free(anode);
   30434:	f000 f9ca 	bl	307cc <k_free>
}
   30438:	4620      	mov	r0, r4
   3043a:	bd10      	pop	{r4, pc}

0003043c <z_impl_k_queue_init>:
	list->head = NULL;
   3043c:	2300      	movs	r3, #0
	list->tail = NULL;
   3043e:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   30442:	6083      	str	r3, [r0, #8]
   30444:	f100 030c 	add.w	r3, r0, #12
   30448:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3044c:	f100 0314 	add.w	r3, r0, #20
   30450:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   30454:	4770      	bx	lr

00030456 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   30456:	2301      	movs	r3, #1
{
   30458:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3045a:	9300      	str	r3, [sp, #0]
   3045c:	2300      	movs	r3, #0
{
   3045e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30460:	4619      	mov	r1, r3
   30462:	f7f4 fd91 	bl	24f88 <queue_insert>
}
   30466:	b003      	add	sp, #12
   30468:	f85d fb04 	ldr.w	pc, [sp], #4

0003046c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   3046c:	2300      	movs	r3, #0
{
   3046e:	b507      	push	{r0, r1, r2, lr}
   30470:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30472:	9300      	str	r3, [sp, #0]
   30474:	4619      	mov	r1, r3
   30476:	f7f4 fd87 	bl	24f88 <queue_insert>
}
   3047a:	b003      	add	sp, #12
   3047c:	f85d fb04 	ldr.w	pc, [sp], #4

00030480 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   30480:	2100      	movs	r1, #0
   30482:	6800      	ldr	r0, [r0, #0]
   30484:	f7ff bfce 	b.w	30424 <z_queue_node_peek>

00030488 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30488:	b15a      	cbz	r2, 304a2 <z_impl_k_sem_init+0x1a>
   3048a:	428a      	cmp	r2, r1
   3048c:	d309      	bcc.n	304a2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3048e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   30492:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30496:	e9c0 0000 	strd	r0, r0, [r0]
   3049a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3049e:	2000      	movs	r0, #0
   304a0:	4770      	bx	lr
		return -EINVAL;
   304a2:	f06f 0015 	mvn.w	r0, #21
}
   304a6:	4770      	bx	lr

000304a8 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   304a8:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   304aa:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   304ac:	408b      	lsls	r3, r1
   304ae:	ea22 0303 	bic.w	r3, r2, r3
   304b2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   304b4:	fa22 f001 	lsr.w	r0, r2, r1
}
   304b8:	f000 0001 	and.w	r0, r0, #1
   304bc:	4770      	bx	lr

000304be <unschedule_locked>:
{
   304be:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   304c0:	2103      	movs	r1, #3
{
   304c2:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   304c4:	300c      	adds	r0, #12
   304c6:	f7ff ffef 	bl	304a8 <flag_test_and_clear>
   304ca:	b130      	cbz	r0, 304da <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   304cc:	f104 0010 	add.w	r0, r4, #16
   304d0:	f7f6 ff42 	bl	27358 <z_abort_timeout>
   304d4:	fab0 f080 	clz	r0, r0
   304d8:	0940      	lsrs	r0, r0, #5
}
   304da:	bd10      	pop	{r4, pc}

000304dc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   304dc:	b120      	cbz	r0, 304e8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   304de:	2200      	movs	r2, #0
   304e0:	3090      	adds	r0, #144	; 0x90
   304e2:	4611      	mov	r1, r2
   304e4:	f7f6 bda8 	b.w	27038 <z_sched_wake>
}
   304e8:	4770      	bx	lr

000304ea <cancel_async_locked>:
{
   304ea:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   304ec:	68c3      	ldr	r3, [r0, #12]
{
   304ee:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   304f0:	f3c3 0640 	ubfx	r6, r3, #1, #1
   304f4:	079b      	lsls	r3, r3, #30
   304f6:	d416      	bmi.n	30526 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   304f8:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   304fa:	2102      	movs	r1, #2
   304fc:	300c      	adds	r0, #12
   304fe:	f7ff ffd3 	bl	304a8 <flag_test_and_clear>
   30502:	b180      	cbz	r0, 30526 <cancel_async_locked+0x3c>
	return list->head;
   30504:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30508:	b16a      	cbz	r2, 30526 <cancel_async_locked+0x3c>
   3050a:	4294      	cmp	r4, r2
   3050c:	d11d      	bne.n	3054a <cancel_async_locked+0x60>
	return node->next;
   3050e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   30510:	b99e      	cbnz	r6, 3053a <cancel_async_locked+0x50>
   30512:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   30516:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   3051a:	429c      	cmp	r4, r3
   3051c:	d101      	bne.n	30522 <cancel_async_locked+0x38>
	list->tail = node;
   3051e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   30522:	2300      	movs	r3, #0
   30524:	6023      	str	r3, [r4, #0]
	return *flagp;
   30526:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30528:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   3052c:	bf1e      	ittt	ne
   3052e:	f043 0302 	orrne.w	r3, r3, #2
   30532:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   30534:	f040 0002 	orrne.w	r0, r0, #2
}
   30538:	bd70      	pop	{r4, r5, r6, pc}
   3053a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   3053c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   30540:	4294      	cmp	r4, r2
	list->tail = node;
   30542:	bf08      	it	eq
   30544:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   30548:	e7eb      	b.n	30522 <cancel_async_locked+0x38>
	return node->next;
   3054a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3054c:	6812      	ldr	r2, [r2, #0]
   3054e:	e7db      	b.n	30508 <cancel_async_locked+0x1e>

00030550 <k_work_submit_to_queue>:
{
   30550:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30552:	f7f5 f931 	bl	257b8 <z_work_submit_to_queue>
	if (ret > 0) {
   30556:	1e04      	subs	r4, r0, #0
   30558:	dd09      	ble.n	3056e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   3055a:	f04f 0320 	mov.w	r3, #32
   3055e:	f3ef 8011 	mrs	r0, BASEPRI
   30562:	f383 8812 	msr	BASEPRI_MAX, r3
   30566:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3056a:	f000 f80d 	bl	30588 <z_reschedule_irqlock>
}
   3056e:	4620      	mov	r0, r4
   30570:	bd10      	pop	{r4, pc}

00030572 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   30572:	f7f5 b8db 	b.w	2572c <k_work_busy_get>

00030576 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   30576:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3057a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3057e:	4283      	cmp	r3, r0
		return b2 - b1;
   30580:	bf14      	ite	ne
   30582:	1ac0      	subne	r0, r0, r3
	return 0;
   30584:	2000      	moveq	r0, #0
}
   30586:	4770      	bx	lr

00030588 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30588:	4603      	mov	r3, r0
   3058a:	b920      	cbnz	r0, 30596 <z_reschedule_irqlock+0xe>
   3058c:	f3ef 8205 	mrs	r2, IPSR
   30590:	b90a      	cbnz	r2, 30596 <z_reschedule_irqlock+0xe>
   30592:	f7e0 bf8b 	b.w	114ac <arch_swap>
	__asm__ volatile(
   30596:	f383 8811 	msr	BASEPRI, r3
   3059a:	f3bf 8f6f 	isb	sy
}
   3059e:	4770      	bx	lr

000305a0 <z_reschedule_unlocked>:
	__asm__ volatile(
   305a0:	f04f 0320 	mov.w	r3, #32
   305a4:	f3ef 8011 	mrs	r0, BASEPRI
   305a8:	f383 8812 	msr	BASEPRI_MAX, r3
   305ac:	f3bf 8f6f 	isb	sy
   305b0:	f7ff bfea 	b.w	30588 <z_reschedule_irqlock>

000305b4 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   305b4:	2101      	movs	r1, #1
   305b6:	3818      	subs	r0, #24
   305b8:	f7f6 ba06 	b.w	269c8 <z_sched_wake_thread>

000305bc <z_unpend_all>:
{
   305bc:	b538      	push	{r3, r4, r5, lr}
   305be:	4605      	mov	r5, r0
	int need_sched = 0;
   305c0:	2000      	movs	r0, #0
	return list->head == list;
   305c2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   305c4:	42a5      	cmp	r5, r4
   305c6:	d000      	beq.n	305ca <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   305c8:	b904      	cbnz	r4, 305cc <z_unpend_all+0x10>
}
   305ca:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   305cc:	4620      	mov	r0, r4
   305ce:	f7f6 f9af 	bl	26930 <z_unpend_thread>
		z_ready_thread(thread);
   305d2:	4620      	mov	r0, r4
   305d4:	f7f5 fcd2 	bl	25f7c <z_ready_thread>
		need_sched = 1;
   305d8:	2001      	movs	r0, #1
   305da:	e7f2      	b.n	305c2 <z_unpend_all+0x6>

000305dc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   305dc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   305de:	f7f6 fffb 	bl	275d8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   305e2:	bd08      	pop	{r3, pc}

000305e4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   305e4:	f7f6 bff8 	b.w	275d8 <sys_clock_tick_get>

000305e8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   305e8:	b108      	cbz	r0, 305ee <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   305ea:	f7de bd8d 	b.w	f108 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   305ee:	4770      	bx	lr

000305f0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   305f0:	f1b1 3fff 	cmp.w	r1, #4294967295
   305f4:	bf08      	it	eq
   305f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   305fa:	b538      	push	{r3, r4, r5, lr}
   305fc:	460c      	mov	r4, r1
   305fe:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30600:	d014      	beq.n	3062c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30602:	4308      	orrs	r0, r1
   30604:	d103      	bne.n	3060e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   30606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3060a:	f7f6 bfe5 	b.w	275d8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3060e:	f06f 0001 	mvn.w	r0, #1
   30612:	f04f 33ff 	mov.w	r3, #4294967295
   30616:	1b40      	subs	r0, r0, r5
   30618:	eb63 0101 	sbc.w	r1, r3, r1
   3061c:	2900      	cmp	r1, #0
   3061e:	da04      	bge.n	3062a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   30620:	f7f6 ffda 	bl	275d8 <sys_clock_tick_get>
   30624:	1940      	adds	r0, r0, r5
   30626:	eb41 0104 	adc.w	r1, r1, r4
}
   3062a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   3062c:	f04f 30ff 	mov.w	r0, #4294967295
   30630:	4601      	mov	r1, r0
   30632:	e7fa      	b.n	3062a <sys_clock_timeout_end_calc+0x3a>

00030634 <k_timer_init>:
	timer->status = 0U;
   30634:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   30636:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3063a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3063e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   30642:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   30646:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   30648:	6343      	str	r3, [r0, #52]	; 0x34
}
   3064a:	4770      	bx	lr

0003064c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3064c:	b510      	push	{r4, lr}
   3064e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   30650:	f7f6 fe82 	bl	27358 <z_abort_timeout>

	if (inactive) {
   30654:	b9b0      	cbnz	r0, 30684 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   30656:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30658:	b10b      	cbz	r3, 3065e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3065a:	4620      	mov	r0, r4
   3065c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3065e:	f104 0018 	add.w	r0, r4, #24
   30662:	f7f6 fa09 	bl	26a78 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   30666:	b168      	cbz	r0, 30684 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   30668:	f7f5 fc88 	bl	25f7c <z_ready_thread>
   3066c:	f04f 0320 	mov.w	r3, #32
   30670:	f3ef 8011 	mrs	r0, BASEPRI
   30674:	f383 8812 	msr	BASEPRI_MAX, r3
   30678:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   3067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30680:	f7ff bf82 	b.w	30588 <z_reschedule_irqlock>
   30684:	bd10      	pop	{r4, pc}

00030686 <add_event>:
{
   30686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30688:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3068a:	e9d0 1300 	ldrd	r1, r3, [r0]
   3068e:	4288      	cmp	r0, r1
   30690:	4604      	mov	r4, r0
   30692:	d105      	bne.n	306a0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   30694:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   30696:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3069a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3069c:	6065      	str	r5, [r4, #4]
   3069e:	e01d      	b.n	306dc <add_event+0x56>
	if ((pending == NULL) ||
   306a0:	2b00      	cmp	r3, #0
   306a2:	d0f7      	beq.n	30694 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   306a4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   306a6:	b100      	cbz	r0, 306aa <add_event+0x24>
   306a8:	3860      	subs	r0, #96	; 0x60
   306aa:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   306ae:	4639      	mov	r1, r7
   306b0:	f7ff ff61 	bl	30576 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   306b4:	2800      	cmp	r0, #0
   306b6:	dced      	bgt.n	30694 <add_event+0xe>
	return list->head == list;
   306b8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   306ba:	42b4      	cmp	r4, r6
   306bc:	d0ea      	beq.n	30694 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   306be:	2e00      	cmp	r6, #0
   306c0:	d0e8      	beq.n	30694 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   306c2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   306c4:	b101      	cbz	r1, 306c8 <add_event+0x42>
   306c6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   306c8:	4638      	mov	r0, r7
   306ca:	f7ff ff54 	bl	30576 <z_sched_prio_cmp>
   306ce:	2800      	cmp	r0, #0
   306d0:	dd05      	ble.n	306de <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   306d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   306d4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   306d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   306da:	6075      	str	r5, [r6, #4]
}
   306dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   306de:	6863      	ldr	r3, [r4, #4]
   306e0:	429e      	cmp	r6, r3
   306e2:	d0d7      	beq.n	30694 <add_event+0xe>
   306e4:	6836      	ldr	r6, [r6, #0]
   306e6:	e7ea      	b.n	306be <add_event+0x38>

000306e8 <signal_poll_event>:
{
   306e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   306ec:	6884      	ldr	r4, [r0, #8]
{
   306ee:	4605      	mov	r5, r0
   306f0:	460e      	mov	r6, r1
	if (poller != NULL) {
   306f2:	b144      	cbz	r4, 30706 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   306f4:	7863      	ldrb	r3, [r4, #1]
   306f6:	2b01      	cmp	r3, #1
   306f8:	d12e      	bne.n	30758 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   306fa:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   306fe:	f013 0302 	ands.w	r3, r3, #2
   30702:	d10a      	bne.n	3071a <signal_poll_event+0x32>
		poller->is_polling = false;
   30704:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   30706:	2000      	movs	r0, #0
	event->state |= state;
   30708:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3070a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3070c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30710:	4316      	orrs	r6, r2
   30712:	f366 3394 	bfi	r3, r6, #14, #7
   30716:	60eb      	str	r3, [r5, #12]
	return retcode;
   30718:	e03e      	b.n	30798 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3071a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   3071e:	f1b3 3fff 	cmp.w	r3, #4294967295
   30722:	bf08      	it	eq
   30724:	f112 0f02 	cmneq.w	r2, #2
   30728:	d032      	beq.n	30790 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3072a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   3072e:	4640      	mov	r0, r8
   30730:	f7f6 f8fe 	bl	26930 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   30734:	2e08      	cmp	r6, #8
   30736:	bf0c      	ite	eq
   30738:	f06f 0303 	mvneq.w	r3, #3
   3073c:	2300      	movne	r3, #0
   3073e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   30740:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   30744:	06db      	lsls	r3, r3, #27
   30746:	d109      	bne.n	3075c <signal_poll_event+0x74>
   30748:	f854 7c48 	ldr.w	r7, [r4, #-72]
   3074c:	b937      	cbnz	r7, 3075c <signal_poll_event+0x74>
	z_ready_thread(thread);
   3074e:	4640      	mov	r0, r8
   30750:	f7f5 fc14 	bl	25f7c <z_ready_thread>
		poller->is_polling = false;
   30754:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   30756:	e7d6      	b.n	30706 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   30758:	2b02      	cmp	r3, #2
   3075a:	d001      	beq.n	30760 <signal_poll_event+0x78>
		poller->is_polling = false;
   3075c:	2300      	movs	r3, #0
   3075e:	e7d1      	b.n	30704 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   30760:	7823      	ldrb	r3, [r4, #0]
   30762:	2b00      	cmp	r3, #0
   30764:	d0cf      	beq.n	30706 <signal_poll_event+0x1e>
   30766:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3076a:	2f00      	cmp	r7, #0
   3076c:	d0f2      	beq.n	30754 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3076e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   30772:	f1a4 0914 	sub.w	r9, r4, #20
   30776:	f104 0014 	add.w	r0, r4, #20
   3077a:	f7f6 fded 	bl	27358 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   3077e:	4649      	mov	r1, r9
   30780:	4638      	mov	r0, r7
		twork->poll_result = 0;
   30782:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   30786:	f7f5 f817 	bl	257b8 <z_work_submit_to_queue>
		poller->is_polling = false;
   3078a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3078e:	e7ba      	b.n	30706 <signal_poll_event+0x1e>
		poller->is_polling = false;
   30790:	2300      	movs	r3, #0
		return -EAGAIN;
   30792:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   30796:	7023      	strb	r3, [r4, #0]
}
   30798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003079c <z_handle_obj_poll_events>:
{
   3079c:	4603      	mov	r3, r0
	return list->head == list;
   3079e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   307a0:	4283      	cmp	r3, r0
   307a2:	d008      	beq.n	307b6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   307a4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   307a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   307aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   307ac:	2300      	movs	r3, #0
	node->prev = NULL;
   307ae:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   307b2:	f7ff bf99 	b.w	306e8 <signal_poll_event>
}
   307b6:	4770      	bx	lr

000307b8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   307b8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   307ba:	e9c0 0000 	strd	r0, r0, [r0]
   307be:	6083      	str	r3, [r0, #8]
}
   307c0:	4770      	bx	lr

000307c2 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   307c2:	6883      	ldr	r3, [r0, #8]
   307c4:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   307c6:	68c3      	ldr	r3, [r0, #12]
   307c8:	6013      	str	r3, [r2, #0]
}
   307ca:	4770      	bx	lr

000307cc <k_free>:
	if (ptr != NULL) {
   307cc:	b120      	cbz	r0, 307d8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   307ce:	1f01      	subs	r1, r0, #4
   307d0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   307d4:	f7f3 bfc0 	b.w	24758 <k_heap_free>
}
   307d8:	4770      	bx	lr

000307da <k_malloc>:
{
   307da:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   307dc:	2004      	movs	r0, #4
   307de:	f7f7 bbaf 	b.w	27f40 <k_aligned_alloc>

000307e2 <k_calloc>:
{
   307e2:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   307e4:	fba0 5401 	umull	r5, r4, r0, r1
   307e8:	b924      	cbnz	r4, 307f4 <k_calloc+0x12>
	ret = k_malloc(bounds);
   307ea:	4628      	mov	r0, r5
   307ec:	f7ff fff5 	bl	307da <k_malloc>
	if (ret != NULL) {
   307f0:	4606      	mov	r6, r0
   307f2:	b910      	cbnz	r0, 307fa <k_calloc+0x18>
		return NULL;
   307f4:	2600      	movs	r6, #0
}
   307f6:	4630      	mov	r0, r6
   307f8:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   307fa:	462a      	mov	r2, r5
   307fc:	4621      	mov	r1, r4
   307fe:	f000 f840 	bl	30882 <memset>
   30802:	e7f8      	b.n	307f6 <k_calloc+0x14>

00030804 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30804:	4770      	bx	lr

00030806 <memchr>:
   30806:	b2c9      	uxtb	r1, r1
   30808:	4603      	mov	r3, r0
   3080a:	4402      	add	r2, r0
   3080c:	b510      	push	{r4, lr}
   3080e:	4293      	cmp	r3, r2
   30810:	4618      	mov	r0, r3
   30812:	d101      	bne.n	30818 <memchr+0x12>
   30814:	2000      	movs	r0, #0
   30816:	e003      	b.n	30820 <memchr+0x1a>
   30818:	7804      	ldrb	r4, [r0, #0]
   3081a:	3301      	adds	r3, #1
   3081c:	428c      	cmp	r4, r1
   3081e:	d1f6      	bne.n	3080e <memchr+0x8>
   30820:	bd10      	pop	{r4, pc}

00030822 <memcmp>:
   30822:	3901      	subs	r1, #1
   30824:	4402      	add	r2, r0
   30826:	b510      	push	{r4, lr}
   30828:	4290      	cmp	r0, r2
   3082a:	d101      	bne.n	30830 <memcmp+0xe>
   3082c:	2000      	movs	r0, #0
   3082e:	e005      	b.n	3083c <memcmp+0x1a>
   30830:	7803      	ldrb	r3, [r0, #0]
   30832:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30836:	42a3      	cmp	r3, r4
   30838:	d001      	beq.n	3083e <memcmp+0x1c>
   3083a:	1b18      	subs	r0, r3, r4
   3083c:	bd10      	pop	{r4, pc}
   3083e:	3001      	adds	r0, #1
   30840:	e7f2      	b.n	30828 <memcmp+0x6>

00030842 <memcpy>:
   30842:	440a      	add	r2, r1
   30844:	1e43      	subs	r3, r0, #1
   30846:	4291      	cmp	r1, r2
   30848:	d100      	bne.n	3084c <memcpy+0xa>
   3084a:	4770      	bx	lr
   3084c:	b510      	push	{r4, lr}
   3084e:	f811 4b01 	ldrb.w	r4, [r1], #1
   30852:	4291      	cmp	r1, r2
   30854:	f803 4f01 	strb.w	r4, [r3, #1]!
   30858:	d1f9      	bne.n	3084e <memcpy+0xc>
   3085a:	bd10      	pop	{r4, pc}

0003085c <__memcpy_chk>:
   3085c:	429a      	cmp	r2, r3
   3085e:	b508      	push	{r3, lr}
   30860:	d901      	bls.n	30866 <__memcpy_chk+0xa>
   30862:	f7e1 fe71 	bl	12548 <__chk_fail>
   30866:	4281      	cmp	r1, r0
   30868:	d804      	bhi.n	30874 <__memcpy_chk+0x18>
   3086a:	188b      	adds	r3, r1, r2
   3086c:	4298      	cmp	r0, r3
   3086e:	d3f8      	bcc.n	30862 <__memcpy_chk+0x6>
   30870:	4281      	cmp	r1, r0
   30872:	d102      	bne.n	3087a <__memcpy_chk+0x1e>
   30874:	1883      	adds	r3, r0, r2
   30876:	4299      	cmp	r1, r3
   30878:	d3f3      	bcc.n	30862 <__memcpy_chk+0x6>
   3087a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3087e:	f7ff bfe0 	b.w	30842 <memcpy>

00030882 <memset>:
   30882:	4402      	add	r2, r0
   30884:	4603      	mov	r3, r0
   30886:	4293      	cmp	r3, r2
   30888:	d100      	bne.n	3088c <memset+0xa>
   3088a:	4770      	bx	lr
   3088c:	f803 1b01 	strb.w	r1, [r3], #1
   30890:	e7f9      	b.n	30886 <memset+0x4>

00030892 <__cvt>:
   30892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30896:	b089      	sub	sp, #36	; 0x24
   30898:	2b00      	cmp	r3, #0
   3089a:	461d      	mov	r5, r3
   3089c:	4614      	mov	r4, r2
   3089e:	bfba      	itte	lt
   308a0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   308a4:	4614      	movlt	r4, r2
   308a6:	2300      	movge	r3, #0
   308a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   308aa:	bfbc      	itt	lt
   308ac:	461d      	movlt	r5, r3
   308ae:	232d      	movlt	r3, #45	; 0x2d
   308b0:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   308b4:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   308b8:	f028 0a20 	bic.w	sl, r8, #32
   308bc:	7013      	strb	r3, [r2, #0]
   308be:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   308c2:	d005      	beq.n	308d0 <__cvt+0x3e>
   308c4:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   308c8:	d100      	bne.n	308cc <__cvt+0x3a>
   308ca:	3601      	adds	r6, #1
   308cc:	2302      	movs	r3, #2
   308ce:	e000      	b.n	308d2 <__cvt+0x40>
   308d0:	2303      	movs	r3, #3
   308d2:	aa07      	add	r2, sp, #28
   308d4:	9204      	str	r2, [sp, #16]
   308d6:	aa06      	add	r2, sp, #24
   308d8:	e9cd 3600 	strd	r3, r6, [sp]
   308dc:	e9cd 9202 	strd	r9, r2, [sp, #8]
   308e0:	462b      	mov	r3, r5
   308e2:	4622      	mov	r2, r4
   308e4:	f7d9 fd54 	bl	a390 <_dtoa_r>
   308e8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   308ec:	4607      	mov	r7, r0
   308ee:	d119      	bne.n	30924 <__cvt+0x92>
   308f0:	f01b 0f01 	tst.w	fp, #1
   308f4:	d00e      	beq.n	30914 <__cvt+0x82>
   308f6:	eb07 0806 	add.w	r8, r7, r6
   308fa:	2200      	movs	r2, #0
   308fc:	2300      	movs	r3, #0
   308fe:	4620      	mov	r0, r4
   30900:	4629      	mov	r1, r5
   30902:	f7d8 f8f9 	bl	8af8 <__aeabi_dcmpeq>
   30906:	b108      	cbz	r0, 3090c <__cvt+0x7a>
   30908:	f8cd 801c 	str.w	r8, [sp, #28]
   3090c:	2230      	movs	r2, #48	; 0x30
   3090e:	9b07      	ldr	r3, [sp, #28]
   30910:	4543      	cmp	r3, r8
   30912:	d321      	bcc.n	30958 <__cvt+0xc6>
   30914:	9b07      	ldr	r3, [sp, #28]
   30916:	4638      	mov	r0, r7
   30918:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   3091a:	1bdb      	subs	r3, r3, r7
   3091c:	6013      	str	r3, [r2, #0]
   3091e:	b009      	add	sp, #36	; 0x24
   30920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   30928:	d0e2      	beq.n	308f0 <__cvt+0x5e>
   3092a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3092e:	eb00 0806 	add.w	r8, r0, r6
   30932:	d1e2      	bne.n	308fa <__cvt+0x68>
   30934:	7803      	ldrb	r3, [r0, #0]
   30936:	2b30      	cmp	r3, #48	; 0x30
   30938:	d10a      	bne.n	30950 <__cvt+0xbe>
   3093a:	2200      	movs	r2, #0
   3093c:	2300      	movs	r3, #0
   3093e:	4620      	mov	r0, r4
   30940:	4629      	mov	r1, r5
   30942:	f7d8 f8d9 	bl	8af8 <__aeabi_dcmpeq>
   30946:	b918      	cbnz	r0, 30950 <__cvt+0xbe>
   30948:	f1c6 0601 	rsb	r6, r6, #1
   3094c:	f8c9 6000 	str.w	r6, [r9]
   30950:	f8d9 3000 	ldr.w	r3, [r9]
   30954:	4498      	add	r8, r3
   30956:	e7d0      	b.n	308fa <__cvt+0x68>
   30958:	1c59      	adds	r1, r3, #1
   3095a:	9107      	str	r1, [sp, #28]
   3095c:	701a      	strb	r2, [r3, #0]
   3095e:	e7d6      	b.n	3090e <__cvt+0x7c>

00030960 <__exponent>:
   30960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30962:	2900      	cmp	r1, #0
   30964:	7002      	strb	r2, [r0, #0]
   30966:	bfba      	itte	lt
   30968:	4249      	neglt	r1, r1
   3096a:	232d      	movlt	r3, #45	; 0x2d
   3096c:	232b      	movge	r3, #43	; 0x2b
   3096e:	2909      	cmp	r1, #9
   30970:	7043      	strb	r3, [r0, #1]
   30972:	dd28      	ble.n	309c6 <__exponent+0x66>
   30974:	f10d 0307 	add.w	r3, sp, #7
   30978:	270a      	movs	r7, #10
   3097a:	461d      	mov	r5, r3
   3097c:	461a      	mov	r2, r3
   3097e:	3b01      	subs	r3, #1
   30980:	fbb1 f6f7 	udiv	r6, r1, r7
   30984:	fb07 1416 	mls	r4, r7, r6, r1
   30988:	3430      	adds	r4, #48	; 0x30
   3098a:	f802 4c01 	strb.w	r4, [r2, #-1]
   3098e:	460c      	mov	r4, r1
   30990:	4631      	mov	r1, r6
   30992:	2c63      	cmp	r4, #99	; 0x63
   30994:	dcf2      	bgt.n	3097c <__exponent+0x1c>
   30996:	3130      	adds	r1, #48	; 0x30
   30998:	1e94      	subs	r4, r2, #2
   3099a:	f803 1c01 	strb.w	r1, [r3, #-1]
   3099e:	1c41      	adds	r1, r0, #1
   309a0:	4623      	mov	r3, r4
   309a2:	42ab      	cmp	r3, r5
   309a4:	d30a      	bcc.n	309bc <__exponent+0x5c>
   309a6:	f10d 0309 	add.w	r3, sp, #9
   309aa:	1a9b      	subs	r3, r3, r2
   309ac:	42ac      	cmp	r4, r5
   309ae:	bf88      	it	hi
   309b0:	2300      	movhi	r3, #0
   309b2:	3302      	adds	r3, #2
   309b4:	4403      	add	r3, r0
   309b6:	1a18      	subs	r0, r3, r0
   309b8:	b003      	add	sp, #12
   309ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   309bc:	f813 6b01 	ldrb.w	r6, [r3], #1
   309c0:	f801 6f01 	strb.w	r6, [r1, #1]!
   309c4:	e7ed      	b.n	309a2 <__exponent+0x42>
   309c6:	2330      	movs	r3, #48	; 0x30
   309c8:	3130      	adds	r1, #48	; 0x30
   309ca:	7083      	strb	r3, [r0, #2]
   309cc:	1d03      	adds	r3, r0, #4
   309ce:	70c1      	strb	r1, [r0, #3]
   309d0:	e7f1      	b.n	309b6 <__exponent+0x56>

000309d2 <_printf_common>:
   309d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   309d6:	4616      	mov	r6, r2
   309d8:	4698      	mov	r8, r3
   309da:	688a      	ldr	r2, [r1, #8]
   309dc:	4607      	mov	r7, r0
   309de:	690b      	ldr	r3, [r1, #16]
   309e0:	460c      	mov	r4, r1
   309e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
   309e6:	4293      	cmp	r3, r2
   309e8:	bfb8      	it	lt
   309ea:	4613      	movlt	r3, r2
   309ec:	6033      	str	r3, [r6, #0]
   309ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   309f2:	b10a      	cbz	r2, 309f8 <_printf_common+0x26>
   309f4:	3301      	adds	r3, #1
   309f6:	6033      	str	r3, [r6, #0]
   309f8:	6823      	ldr	r3, [r4, #0]
   309fa:	0699      	lsls	r1, r3, #26
   309fc:	bf42      	ittt	mi
   309fe:	6833      	ldrmi	r3, [r6, #0]
   30a00:	3302      	addmi	r3, #2
   30a02:	6033      	strmi	r3, [r6, #0]
   30a04:	6825      	ldr	r5, [r4, #0]
   30a06:	f015 0506 	ands.w	r5, r5, #6
   30a0a:	d106      	bne.n	30a1a <_printf_common+0x48>
   30a0c:	f104 0a19 	add.w	sl, r4, #25
   30a10:	68e3      	ldr	r3, [r4, #12]
   30a12:	6832      	ldr	r2, [r6, #0]
   30a14:	1a9b      	subs	r3, r3, r2
   30a16:	42ab      	cmp	r3, r5
   30a18:	dc2b      	bgt.n	30a72 <_printf_common+0xa0>
   30a1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   30a1e:	6822      	ldr	r2, [r4, #0]
   30a20:	3b00      	subs	r3, #0
   30a22:	bf18      	it	ne
   30a24:	2301      	movne	r3, #1
   30a26:	0692      	lsls	r2, r2, #26
   30a28:	d430      	bmi.n	30a8c <_printf_common+0xba>
   30a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30a2e:	4641      	mov	r1, r8
   30a30:	4638      	mov	r0, r7
   30a32:	47c8      	blx	r9
   30a34:	3001      	adds	r0, #1
   30a36:	d023      	beq.n	30a80 <_printf_common+0xae>
   30a38:	6823      	ldr	r3, [r4, #0]
   30a3a:	341a      	adds	r4, #26
   30a3c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   30a40:	f003 0306 	and.w	r3, r3, #6
   30a44:	2b04      	cmp	r3, #4
   30a46:	bf0a      	itet	eq
   30a48:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   30a4c:	2500      	movne	r5, #0
   30a4e:	6833      	ldreq	r3, [r6, #0]
   30a50:	f04f 0600 	mov.w	r6, #0
   30a54:	bf08      	it	eq
   30a56:	1aed      	subeq	r5, r5, r3
   30a58:	f854 3c12 	ldr.w	r3, [r4, #-18]
   30a5c:	bf08      	it	eq
   30a5e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30a62:	4293      	cmp	r3, r2
   30a64:	bfc4      	itt	gt
   30a66:	1a9b      	subgt	r3, r3, r2
   30a68:	18ed      	addgt	r5, r5, r3
   30a6a:	42b5      	cmp	r5, r6
   30a6c:	d11a      	bne.n	30aa4 <_printf_common+0xd2>
   30a6e:	2000      	movs	r0, #0
   30a70:	e008      	b.n	30a84 <_printf_common+0xb2>
   30a72:	2301      	movs	r3, #1
   30a74:	4652      	mov	r2, sl
   30a76:	4641      	mov	r1, r8
   30a78:	4638      	mov	r0, r7
   30a7a:	47c8      	blx	r9
   30a7c:	3001      	adds	r0, #1
   30a7e:	d103      	bne.n	30a88 <_printf_common+0xb6>
   30a80:	f04f 30ff 	mov.w	r0, #4294967295
   30a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30a88:	3501      	adds	r5, #1
   30a8a:	e7c1      	b.n	30a10 <_printf_common+0x3e>
   30a8c:	18e1      	adds	r1, r4, r3
   30a8e:	1c5a      	adds	r2, r3, #1
   30a90:	2030      	movs	r0, #48	; 0x30
   30a92:	3302      	adds	r3, #2
   30a94:	4422      	add	r2, r4
   30a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   30a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   30aa2:	e7c2      	b.n	30a2a <_printf_common+0x58>
   30aa4:	2301      	movs	r3, #1
   30aa6:	4622      	mov	r2, r4
   30aa8:	4641      	mov	r1, r8
   30aaa:	4638      	mov	r0, r7
   30aac:	47c8      	blx	r9
   30aae:	3001      	adds	r0, #1
   30ab0:	d0e6      	beq.n	30a80 <_printf_common+0xae>
   30ab2:	3601      	adds	r6, #1
   30ab4:	e7d9      	b.n	30a6a <_printf_common+0x98>

00030ab6 <__sread>:
   30ab6:	b510      	push	{r4, lr}
   30ab8:	460c      	mov	r4, r1
   30aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30abe:	f7f9 faf9 	bl	2a0b4 <_read_r>
   30ac2:	2800      	cmp	r0, #0
   30ac4:	bfab      	itete	ge
   30ac6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   30ac8:	89a3      	ldrhlt	r3, [r4, #12]
   30aca:	181b      	addge	r3, r3, r0
   30acc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   30ad0:	bfac      	ite	ge
   30ad2:	6563      	strge	r3, [r4, #84]	; 0x54
   30ad4:	81a3      	strhlt	r3, [r4, #12]
   30ad6:	bd10      	pop	{r4, pc}

00030ad8 <__seofread>:
   30ad8:	2000      	movs	r0, #0
   30ada:	4770      	bx	lr

00030adc <__swrite>:
   30adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30ae0:	461f      	mov	r7, r3
   30ae2:	898b      	ldrh	r3, [r1, #12]
   30ae4:	4605      	mov	r5, r0
   30ae6:	460c      	mov	r4, r1
   30ae8:	05db      	lsls	r3, r3, #23
   30aea:	4616      	mov	r6, r2
   30aec:	d505      	bpl.n	30afa <__swrite+0x1e>
   30aee:	2302      	movs	r3, #2
   30af0:	2200      	movs	r2, #0
   30af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30af6:	f7f8 fb21 	bl	2913c <_lseek_r>
   30afa:	89a3      	ldrh	r3, [r4, #12]
   30afc:	4632      	mov	r2, r6
   30afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30b02:	4628      	mov	r0, r5
   30b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   30b08:	81a3      	strh	r3, [r4, #12]
   30b0a:	463b      	mov	r3, r7
   30b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30b10:	f7f8 b8be 	b.w	28c90 <_write_r>

00030b14 <__sseek>:
   30b14:	b510      	push	{r4, lr}
   30b16:	460c      	mov	r4, r1
   30b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30b1c:	f7f8 fb0e 	bl	2913c <_lseek_r>
   30b20:	1c43      	adds	r3, r0, #1
   30b22:	89a3      	ldrh	r3, [r4, #12]
   30b24:	bf15      	itete	ne
   30b26:	6560      	strne	r0, [r4, #84]	; 0x54
   30b28:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   30b2c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   30b30:	81a3      	strheq	r3, [r4, #12]
   30b32:	bf18      	it	ne
   30b34:	81a3      	strhne	r3, [r4, #12]
   30b36:	bd10      	pop	{r4, pc}

00030b38 <__sclose>:
   30b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30b3c:	f7f8 b8ba 	b.w	28cb4 <_close_r>

00030b40 <strchr>:
   30b40:	b2c9      	uxtb	r1, r1
   30b42:	4603      	mov	r3, r0
   30b44:	4618      	mov	r0, r3
   30b46:	f813 2b01 	ldrb.w	r2, [r3], #1
   30b4a:	b112      	cbz	r2, 30b52 <strchr+0x12>
   30b4c:	428a      	cmp	r2, r1
   30b4e:	d1f9      	bne.n	30b44 <strchr+0x4>
   30b50:	4770      	bx	lr
   30b52:	2900      	cmp	r1, #0
   30b54:	bf18      	it	ne
   30b56:	2000      	movne	r0, #0
   30b58:	4770      	bx	lr

00030b5a <strcpy>:
   30b5a:	4603      	mov	r3, r0
   30b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
   30b60:	f803 2b01 	strb.w	r2, [r3], #1
   30b64:	2a00      	cmp	r2, #0
   30b66:	d1f9      	bne.n	30b5c <strcpy+0x2>
   30b68:	4770      	bx	lr

00030b6a <strncmp>:
   30b6a:	b510      	push	{r4, lr}
   30b6c:	b16a      	cbz	r2, 30b8a <strncmp+0x20>
   30b6e:	3901      	subs	r1, #1
   30b70:	1884      	adds	r4, r0, r2
   30b72:	f810 2b01 	ldrb.w	r2, [r0], #1
   30b76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   30b7a:	429a      	cmp	r2, r3
   30b7c:	d103      	bne.n	30b86 <strncmp+0x1c>
   30b7e:	42a0      	cmp	r0, r4
   30b80:	d001      	beq.n	30b86 <strncmp+0x1c>
   30b82:	2a00      	cmp	r2, #0
   30b84:	d1f5      	bne.n	30b72 <strncmp+0x8>
   30b86:	1ad0      	subs	r0, r2, r3
   30b88:	bd10      	pop	{r4, pc}
   30b8a:	4610      	mov	r0, r2
   30b8c:	e7fc      	b.n	30b88 <strncmp+0x1e>

00030b8e <strncpy>:
   30b8e:	3901      	subs	r1, #1
   30b90:	4603      	mov	r3, r0
   30b92:	b510      	push	{r4, lr}
   30b94:	b132      	cbz	r2, 30ba4 <strncpy+0x16>
   30b96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30b9a:	3a01      	subs	r2, #1
   30b9c:	f803 4b01 	strb.w	r4, [r3], #1
   30ba0:	2c00      	cmp	r4, #0
   30ba2:	d1f7      	bne.n	30b94 <strncpy+0x6>
   30ba4:	441a      	add	r2, r3
   30ba6:	2100      	movs	r1, #0
   30ba8:	4293      	cmp	r3, r2
   30baa:	d100      	bne.n	30bae <strncpy+0x20>
   30bac:	bd10      	pop	{r4, pc}
   30bae:	f803 1b01 	strb.w	r1, [r3], #1
   30bb2:	e7f9      	b.n	30ba8 <strncpy+0x1a>

00030bb4 <strnlen>:
   30bb4:	4602      	mov	r2, r0
   30bb6:	4401      	add	r1, r0
   30bb8:	b510      	push	{r4, lr}
   30bba:	428a      	cmp	r2, r1
   30bbc:	4613      	mov	r3, r2
   30bbe:	d003      	beq.n	30bc8 <strnlen+0x14>
   30bc0:	781c      	ldrb	r4, [r3, #0]
   30bc2:	3201      	adds	r2, #1
   30bc4:	2c00      	cmp	r4, #0
   30bc6:	d1f8      	bne.n	30bba <strnlen+0x6>
   30bc8:	1a18      	subs	r0, r3, r0
   30bca:	bd10      	pop	{r4, pc}

00030bcc <strstr>:
   30bcc:	780a      	ldrb	r2, [r1, #0]
   30bce:	b570      	push	{r4, r5, r6, lr}
   30bd0:	b96a      	cbnz	r2, 30bee <strstr+0x22>
   30bd2:	bd70      	pop	{r4, r5, r6, pc}
   30bd4:	429a      	cmp	r2, r3
   30bd6:	d109      	bne.n	30bec <strstr+0x20>
   30bd8:	460c      	mov	r4, r1
   30bda:	4605      	mov	r5, r0
   30bdc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   30be0:	2b00      	cmp	r3, #0
   30be2:	d0f6      	beq.n	30bd2 <strstr+0x6>
   30be4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   30be8:	429e      	cmp	r6, r3
   30bea:	d0f7      	beq.n	30bdc <strstr+0x10>
   30bec:	3001      	adds	r0, #1
   30bee:	7803      	ldrb	r3, [r0, #0]
   30bf0:	2b00      	cmp	r3, #0
   30bf2:	d1ef      	bne.n	30bd4 <strstr+0x8>
   30bf4:	4618      	mov	r0, r3
   30bf6:	e7ec      	b.n	30bd2 <strstr+0x6>

00030bf8 <sulp>:
   30bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30bfc:	4690      	mov	r8, r2
   30bfe:	460f      	mov	r7, r1
   30c00:	f7f8 fdca 	bl	29798 <__ulp>
   30c04:	4604      	mov	r4, r0
   30c06:	460d      	mov	r5, r1
   30c08:	f1b8 0f00 	cmp.w	r8, #0
   30c0c:	d011      	beq.n	30c32 <sulp+0x3a>
   30c0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   30c12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   30c16:	2b00      	cmp	r3, #0
   30c18:	dd0b      	ble.n	30c32 <sulp+0x3a>
   30c1a:	051b      	lsls	r3, r3, #20
   30c1c:	2400      	movs	r4, #0
   30c1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   30c22:	4622      	mov	r2, r4
   30c24:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   30c28:	462b      	mov	r3, r5
   30c2a:	f7d7 fcfd 	bl	8628 <__aeabi_dmul>
   30c2e:	4604      	mov	r4, r0
   30c30:	460d      	mov	r5, r1
   30c32:	4620      	mov	r0, r4
   30c34:	4629      	mov	r1, r5
   30c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030c3a <_strtol_r>:
   30c3a:	f7f7 be4b 	b.w	288d4 <_strtol_l.constprop.0>

00030c3e <_strtoul_r>:
   30c3e:	f7f7 bf6f 	b.w	28b20 <_strtoul_l.constprop.0>

00030c42 <_vsniprintf_r>:
   30c42:	b530      	push	{r4, r5, lr}
   30c44:	4614      	mov	r4, r2
   30c46:	b09b      	sub	sp, #108	; 0x6c
   30c48:	4605      	mov	r5, r0
   30c4a:	461a      	mov	r2, r3
   30c4c:	2c00      	cmp	r4, #0
   30c4e:	da05      	bge.n	30c5c <_vsniprintf_r+0x1a>
   30c50:	238b      	movs	r3, #139	; 0x8b
   30c52:	6003      	str	r3, [r0, #0]
   30c54:	f04f 30ff 	mov.w	r0, #4294967295
   30c58:	b01b      	add	sp, #108	; 0x6c
   30c5a:	bd30      	pop	{r4, r5, pc}
   30c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
   30c60:	9100      	str	r1, [sp, #0]
   30c62:	9104      	str	r1, [sp, #16]
   30c64:	4669      	mov	r1, sp
   30c66:	f8ad 300c 	strh.w	r3, [sp, #12]
   30c6a:	bf14      	ite	ne
   30c6c:	f104 33ff 	addne.w	r3, r4, #4294967295
   30c70:	4623      	moveq	r3, r4
   30c72:	9302      	str	r3, [sp, #8]
   30c74:	9305      	str	r3, [sp, #20]
   30c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   30c7a:	f8ad 300e 	strh.w	r3, [sp, #14]
   30c7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   30c80:	f7f8 fe4c 	bl	2991c <_svfiprintf_r>
   30c84:	1c43      	adds	r3, r0, #1
   30c86:	bfbc      	itt	lt
   30c88:	238b      	movlt	r3, #139	; 0x8b
   30c8a:	602b      	strlt	r3, [r5, #0]
   30c8c:	2c00      	cmp	r4, #0
   30c8e:	d0e3      	beq.n	30c58 <_vsniprintf_r+0x16>
   30c90:	9b00      	ldr	r3, [sp, #0]
   30c92:	2200      	movs	r2, #0
   30c94:	701a      	strb	r2, [r3, #0]
   30c96:	e7df      	b.n	30c58 <_vsniprintf_r+0x16>

00030c98 <quorem>:
   30c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30c9c:	6903      	ldr	r3, [r0, #16]
   30c9e:	4607      	mov	r7, r0
   30ca0:	690c      	ldr	r4, [r1, #16]
   30ca2:	42a3      	cmp	r3, r4
   30ca4:	f2c0 8083 	blt.w	30dae <quorem+0x116>
   30ca8:	3c01      	subs	r4, #1
   30caa:	f100 0514 	add.w	r5, r0, #20
   30cae:	f101 0814 	add.w	r8, r1, #20
   30cb2:	00a3      	lsls	r3, r4, #2
   30cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30cb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   30cbc:	9300      	str	r3, [sp, #0]
   30cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30cc2:	9301      	str	r3, [sp, #4]
   30cc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   30cc8:	3301      	adds	r3, #1
   30cca:	429a      	cmp	r2, r3
   30ccc:	fbb2 f6f3 	udiv	r6, r2, r3
   30cd0:	d331      	bcc.n	30d36 <quorem+0x9e>
   30cd2:	f04f 0a00 	mov.w	sl, #0
   30cd6:	46c4      	mov	ip, r8
   30cd8:	46ae      	mov	lr, r5
   30cda:	46d3      	mov	fp, sl
   30cdc:	f85c 3b04 	ldr.w	r3, [ip], #4
   30ce0:	b298      	uxth	r0, r3
   30ce2:	45e1      	cmp	r9, ip
   30ce4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   30ce8:	fb06 a000 	mla	r0, r6, r0, sl
   30cec:	ea4f 4210 	mov.w	r2, r0, lsr #16
   30cf0:	b280      	uxth	r0, r0
   30cf2:	fb06 2303 	mla	r3, r6, r3, r2
   30cf6:	f8de 2000 	ldr.w	r2, [lr]
   30cfa:	b292      	uxth	r2, r2
   30cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   30d00:	eba2 0200 	sub.w	r2, r2, r0
   30d04:	b29b      	uxth	r3, r3
   30d06:	f8de 0000 	ldr.w	r0, [lr]
   30d0a:	445a      	add	r2, fp
   30d0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   30d10:	b292      	uxth	r2, r2
   30d12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   30d16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   30d1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
   30d1e:	f84e 2b04 	str.w	r2, [lr], #4
   30d22:	d2db      	bcs.n	30cdc <quorem+0x44>
   30d24:	9b00      	ldr	r3, [sp, #0]
   30d26:	58eb      	ldr	r3, [r5, r3]
   30d28:	b92b      	cbnz	r3, 30d36 <quorem+0x9e>
   30d2a:	9b01      	ldr	r3, [sp, #4]
   30d2c:	3b04      	subs	r3, #4
   30d2e:	429d      	cmp	r5, r3
   30d30:	461a      	mov	r2, r3
   30d32:	d330      	bcc.n	30d96 <quorem+0xfe>
   30d34:	613c      	str	r4, [r7, #16]
   30d36:	4638      	mov	r0, r7
   30d38:	f000 f9c3 	bl	310c2 <__mcmp>
   30d3c:	2800      	cmp	r0, #0
   30d3e:	db26      	blt.n	30d8e <quorem+0xf6>
   30d40:	4629      	mov	r1, r5
   30d42:	2000      	movs	r0, #0
   30d44:	f858 2b04 	ldr.w	r2, [r8], #4
   30d48:	f8d1 c000 	ldr.w	ip, [r1]
   30d4c:	fa1f fe82 	uxth.w	lr, r2
   30d50:	45c1      	cmp	r9, r8
   30d52:	fa1f f38c 	uxth.w	r3, ip
   30d56:	ea4f 4212 	mov.w	r2, r2, lsr #16
   30d5a:	eba3 030e 	sub.w	r3, r3, lr
   30d5e:	4403      	add	r3, r0
   30d60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   30d64:	b29b      	uxth	r3, r3
   30d66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   30d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   30d6e:	ea4f 4022 	mov.w	r0, r2, asr #16
   30d72:	f841 3b04 	str.w	r3, [r1], #4
   30d76:	d2e5      	bcs.n	30d44 <quorem+0xac>
   30d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30d7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30d80:	b922      	cbnz	r2, 30d8c <quorem+0xf4>
   30d82:	3b04      	subs	r3, #4
   30d84:	429d      	cmp	r5, r3
   30d86:	461a      	mov	r2, r3
   30d88:	d30b      	bcc.n	30da2 <quorem+0x10a>
   30d8a:	613c      	str	r4, [r7, #16]
   30d8c:	3601      	adds	r6, #1
   30d8e:	4630      	mov	r0, r6
   30d90:	b003      	add	sp, #12
   30d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d96:	6812      	ldr	r2, [r2, #0]
   30d98:	3b04      	subs	r3, #4
   30d9a:	2a00      	cmp	r2, #0
   30d9c:	d1ca      	bne.n	30d34 <quorem+0x9c>
   30d9e:	3c01      	subs	r4, #1
   30da0:	e7c5      	b.n	30d2e <quorem+0x96>
   30da2:	6812      	ldr	r2, [r2, #0]
   30da4:	3b04      	subs	r3, #4
   30da6:	2a00      	cmp	r2, #0
   30da8:	d1ef      	bne.n	30d8a <quorem+0xf2>
   30daa:	3c01      	subs	r4, #1
   30dac:	e7ea      	b.n	30d84 <quorem+0xec>
   30dae:	2000      	movs	r0, #0
   30db0:	e7ee      	b.n	30d90 <quorem+0xf8>

00030db2 <rshift>:
   30db2:	6903      	ldr	r3, [r0, #16]
   30db4:	114a      	asrs	r2, r1, #5
   30db6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   30dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30dbe:	dc04      	bgt.n	30dca <rshift+0x18>
   30dc0:	2300      	movs	r3, #0
   30dc2:	6103      	str	r3, [r0, #16]
   30dc4:	2300      	movs	r3, #0
   30dc6:	6143      	str	r3, [r0, #20]
   30dc8:	e031      	b.n	30e2e <rshift+0x7c>
   30dca:	f100 0414 	add.w	r4, r0, #20
   30dce:	f011 011f 	ands.w	r1, r1, #31
   30dd2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   30dd6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   30dda:	d10c      	bne.n	30df6 <rshift+0x44>
   30ddc:	f100 0710 	add.w	r7, r0, #16
   30de0:	4629      	mov	r1, r5
   30de2:	42b1      	cmp	r1, r6
   30de4:	d331      	bcc.n	30e4a <rshift+0x98>
   30de6:	1a9b      	subs	r3, r3, r2
   30de8:	1eea      	subs	r2, r5, #3
   30dea:	009b      	lsls	r3, r3, #2
   30dec:	4296      	cmp	r6, r2
   30dee:	bf38      	it	cc
   30df0:	2300      	movcc	r3, #0
   30df2:	4423      	add	r3, r4
   30df4:	e015      	b.n	30e22 <rshift+0x70>
   30df6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   30dfa:	f1c1 0820 	rsb	r8, r1, #32
   30dfe:	f105 0e04 	add.w	lr, r5, #4
   30e02:	46a1      	mov	r9, r4
   30e04:	40cf      	lsrs	r7, r1
   30e06:	4576      	cmp	r6, lr
   30e08:	46f4      	mov	ip, lr
   30e0a:	d812      	bhi.n	30e32 <rshift+0x80>
   30e0c:	1a9a      	subs	r2, r3, r2
   30e0e:	3501      	adds	r5, #1
   30e10:	0092      	lsls	r2, r2, #2
   30e12:	3a04      	subs	r2, #4
   30e14:	42ae      	cmp	r6, r5
   30e16:	bf38      	it	cc
   30e18:	2200      	movcc	r2, #0
   30e1a:	18a3      	adds	r3, r4, r2
   30e1c:	50a7      	str	r7, [r4, r2]
   30e1e:	b107      	cbz	r7, 30e22 <rshift+0x70>
   30e20:	3304      	adds	r3, #4
   30e22:	1b1a      	subs	r2, r3, r4
   30e24:	42a3      	cmp	r3, r4
   30e26:	ea4f 02a2 	mov.w	r2, r2, asr #2
   30e2a:	6102      	str	r2, [r0, #16]
   30e2c:	d0ca      	beq.n	30dc4 <rshift+0x12>
   30e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30e32:	f8dc c000 	ldr.w	ip, [ip]
   30e36:	fa0c fc08 	lsl.w	ip, ip, r8
   30e3a:	ea4c 0707 	orr.w	r7, ip, r7
   30e3e:	f849 7b04 	str.w	r7, [r9], #4
   30e42:	f85e 7b04 	ldr.w	r7, [lr], #4
   30e46:	40cf      	lsrs	r7, r1
   30e48:	e7dd      	b.n	30e06 <rshift+0x54>
   30e4a:	f851 cb04 	ldr.w	ip, [r1], #4
   30e4e:	f847 cf04 	str.w	ip, [r7, #4]!
   30e52:	e7c6      	b.n	30de2 <rshift+0x30>

00030e54 <__hexdig_fun>:
   30e54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   30e58:	2b09      	cmp	r3, #9
   30e5a:	d802      	bhi.n	30e62 <__hexdig_fun+0xe>
   30e5c:	3820      	subs	r0, #32
   30e5e:	b2c0      	uxtb	r0, r0
   30e60:	4770      	bx	lr
   30e62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   30e66:	2b05      	cmp	r3, #5
   30e68:	d801      	bhi.n	30e6e <__hexdig_fun+0x1a>
   30e6a:	3847      	subs	r0, #71	; 0x47
   30e6c:	e7f7      	b.n	30e5e <__hexdig_fun+0xa>
   30e6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   30e72:	2b05      	cmp	r3, #5
   30e74:	d801      	bhi.n	30e7a <__hexdig_fun+0x26>
   30e76:	3827      	subs	r0, #39	; 0x27
   30e78:	e7f1      	b.n	30e5e <__hexdig_fun+0xa>
   30e7a:	2000      	movs	r0, #0
   30e7c:	4770      	bx	lr

00030e7e <L_shift>:
   30e7e:	f1c2 0208 	rsb	r2, r2, #8
   30e82:	0092      	lsls	r2, r2, #2
   30e84:	b570      	push	{r4, r5, r6, lr}
   30e86:	f1c2 0620 	rsb	r6, r2, #32
   30e8a:	6843      	ldr	r3, [r0, #4]
   30e8c:	6804      	ldr	r4, [r0, #0]
   30e8e:	fa03 f506 	lsl.w	r5, r3, r6
   30e92:	40d3      	lsrs	r3, r2
   30e94:	432c      	orrs	r4, r5
   30e96:	6004      	str	r4, [r0, #0]
   30e98:	f840 3f04 	str.w	r3, [r0, #4]!
   30e9c:	4288      	cmp	r0, r1
   30e9e:	d3f4      	bcc.n	30e8a <L_shift+0xc>
   30ea0:	bd70      	pop	{r4, r5, r6, pc}

00030ea2 <__match>:
   30ea2:	6803      	ldr	r3, [r0, #0]
   30ea4:	3301      	adds	r3, #1
   30ea6:	b530      	push	{r4, r5, lr}
   30ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
   30eac:	b914      	cbnz	r4, 30eb4 <__match+0x12>
   30eae:	6003      	str	r3, [r0, #0]
   30eb0:	2001      	movs	r0, #1
   30eb2:	bd30      	pop	{r4, r5, pc}
   30eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
   30eb8:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   30ebc:	2d19      	cmp	r5, #25
   30ebe:	bf98      	it	ls
   30ec0:	3220      	addls	r2, #32
   30ec2:	42a2      	cmp	r2, r4
   30ec4:	d0f0      	beq.n	30ea8 <__match+0x6>
   30ec6:	2000      	movs	r0, #0
   30ec8:	e7f3      	b.n	30eb2 <__match+0x10>

00030eca <__hexnan>:
   30eca:	680b      	ldr	r3, [r1, #0]
   30ecc:	6801      	ldr	r1, [r0, #0]
   30ece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ed2:	115e      	asrs	r6, r3, #5
   30ed4:	f013 031f 	ands.w	r3, r3, #31
   30ed8:	f04f 0500 	mov.w	r5, #0
   30edc:	b087      	sub	sp, #28
   30ede:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   30ee2:	4682      	mov	sl, r0
   30ee4:	4690      	mov	r8, r2
   30ee6:	46ab      	mov	fp, r5
   30ee8:	bf18      	it	ne
   30eea:	3604      	addne	r6, #4
   30eec:	9301      	str	r3, [sp, #4]
   30eee:	9502      	str	r5, [sp, #8]
   30ef0:	1f37      	subs	r7, r6, #4
   30ef2:	f846 5c04 	str.w	r5, [r6, #-4]
   30ef6:	46b9      	mov	r9, r7
   30ef8:	463c      	mov	r4, r7
   30efa:	1c4b      	adds	r3, r1, #1
   30efc:	784a      	ldrb	r2, [r1, #1]
   30efe:	9303      	str	r3, [sp, #12]
   30f00:	b342      	cbz	r2, 30f54 <__hexnan+0x8a>
   30f02:	4610      	mov	r0, r2
   30f04:	9105      	str	r1, [sp, #20]
   30f06:	9204      	str	r2, [sp, #16]
   30f08:	f7ff ffa4 	bl	30e54 <__hexdig_fun>
   30f0c:	2800      	cmp	r0, #0
   30f0e:	d151      	bne.n	30fb4 <__hexnan+0xea>
   30f10:	9a04      	ldr	r2, [sp, #16]
   30f12:	9905      	ldr	r1, [sp, #20]
   30f14:	2a20      	cmp	r2, #32
   30f16:	d818      	bhi.n	30f4a <__hexnan+0x80>
   30f18:	9b02      	ldr	r3, [sp, #8]
   30f1a:	459b      	cmp	fp, r3
   30f1c:	dd13      	ble.n	30f46 <__hexnan+0x7c>
   30f1e:	454c      	cmp	r4, r9
   30f20:	d206      	bcs.n	30f30 <__hexnan+0x66>
   30f22:	2d07      	cmp	r5, #7
   30f24:	dc04      	bgt.n	30f30 <__hexnan+0x66>
   30f26:	462a      	mov	r2, r5
   30f28:	4649      	mov	r1, r9
   30f2a:	4620      	mov	r0, r4
   30f2c:	f7ff ffa7 	bl	30e7e <L_shift>
   30f30:	4544      	cmp	r4, r8
   30f32:	d951      	bls.n	30fd8 <__hexnan+0x10e>
   30f34:	2300      	movs	r3, #0
   30f36:	f1a4 0904 	sub.w	r9, r4, #4
   30f3a:	f8cd b008 	str.w	fp, [sp, #8]
   30f3e:	f844 3c04 	str.w	r3, [r4, #-4]
   30f42:	461d      	mov	r5, r3
   30f44:	464c      	mov	r4, r9
   30f46:	9903      	ldr	r1, [sp, #12]
   30f48:	e7d7      	b.n	30efa <__hexnan+0x30>
   30f4a:	2a29      	cmp	r2, #41	; 0x29
   30f4c:	d156      	bne.n	30ffc <__hexnan+0x132>
   30f4e:	3102      	adds	r1, #2
   30f50:	f8ca 1000 	str.w	r1, [sl]
   30f54:	f1bb 0f00 	cmp.w	fp, #0
   30f58:	d050      	beq.n	30ffc <__hexnan+0x132>
   30f5a:	454c      	cmp	r4, r9
   30f5c:	d206      	bcs.n	30f6c <__hexnan+0xa2>
   30f5e:	2d07      	cmp	r5, #7
   30f60:	dc04      	bgt.n	30f6c <__hexnan+0xa2>
   30f62:	462a      	mov	r2, r5
   30f64:	4649      	mov	r1, r9
   30f66:	4620      	mov	r0, r4
   30f68:	f7ff ff89 	bl	30e7e <L_shift>
   30f6c:	4544      	cmp	r4, r8
   30f6e:	d935      	bls.n	30fdc <__hexnan+0x112>
   30f70:	f1a8 0204 	sub.w	r2, r8, #4
   30f74:	4623      	mov	r3, r4
   30f76:	f853 1b04 	ldr.w	r1, [r3], #4
   30f7a:	429f      	cmp	r7, r3
   30f7c:	f842 1f04 	str.w	r1, [r2, #4]!
   30f80:	d2f9      	bcs.n	30f76 <__hexnan+0xac>
   30f82:	1b3b      	subs	r3, r7, r4
   30f84:	3e03      	subs	r6, #3
   30f86:	3401      	adds	r4, #1
   30f88:	2200      	movs	r2, #0
   30f8a:	f023 0303 	bic.w	r3, r3, #3
   30f8e:	3304      	adds	r3, #4
   30f90:	42b4      	cmp	r4, r6
   30f92:	bf88      	it	hi
   30f94:	2304      	movhi	r3, #4
   30f96:	4443      	add	r3, r8
   30f98:	f843 2b04 	str.w	r2, [r3], #4
   30f9c:	429f      	cmp	r7, r3
   30f9e:	d2fb      	bcs.n	30f98 <__hexnan+0xce>
   30fa0:	683b      	ldr	r3, [r7, #0]
   30fa2:	b91b      	cbnz	r3, 30fac <__hexnan+0xe2>
   30fa4:	4547      	cmp	r7, r8
   30fa6:	d127      	bne.n	30ff8 <__hexnan+0x12e>
   30fa8:	2301      	movs	r3, #1
   30faa:	603b      	str	r3, [r7, #0]
   30fac:	2005      	movs	r0, #5
   30fae:	b007      	add	sp, #28
   30fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fb4:	3501      	adds	r5, #1
   30fb6:	f10b 0b01 	add.w	fp, fp, #1
   30fba:	2d08      	cmp	r5, #8
   30fbc:	dd05      	ble.n	30fca <__hexnan+0x100>
   30fbe:	4544      	cmp	r4, r8
   30fc0:	d9c1      	bls.n	30f46 <__hexnan+0x7c>
   30fc2:	2300      	movs	r3, #0
   30fc4:	3c04      	subs	r4, #4
   30fc6:	2501      	movs	r5, #1
   30fc8:	6023      	str	r3, [r4, #0]
   30fca:	6822      	ldr	r2, [r4, #0]
   30fcc:	f000 000f 	and.w	r0, r0, #15
   30fd0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   30fd4:	6020      	str	r0, [r4, #0]
   30fd6:	e7b6      	b.n	30f46 <__hexnan+0x7c>
   30fd8:	2508      	movs	r5, #8
   30fda:	e7b4      	b.n	30f46 <__hexnan+0x7c>
   30fdc:	9b01      	ldr	r3, [sp, #4]
   30fde:	2b00      	cmp	r3, #0
   30fe0:	d0de      	beq.n	30fa0 <__hexnan+0xd6>
   30fe2:	f1c3 0320 	rsb	r3, r3, #32
   30fe6:	f04f 32ff 	mov.w	r2, #4294967295
   30fea:	40da      	lsrs	r2, r3
   30fec:	f856 3c04 	ldr.w	r3, [r6, #-4]
   30ff0:	4013      	ands	r3, r2
   30ff2:	f846 3c04 	str.w	r3, [r6, #-4]
   30ff6:	e7d3      	b.n	30fa0 <__hexnan+0xd6>
   30ff8:	3f04      	subs	r7, #4
   30ffa:	e7d1      	b.n	30fa0 <__hexnan+0xd6>
   30ffc:	2004      	movs	r0, #4
   30ffe:	e7d6      	b.n	30fae <__hexnan+0xe4>

00031000 <__ascii_mbtowc>:
   31000:	b082      	sub	sp, #8
   31002:	b901      	cbnz	r1, 31006 <__ascii_mbtowc+0x6>
   31004:	a901      	add	r1, sp, #4
   31006:	b142      	cbz	r2, 3101a <__ascii_mbtowc+0x1a>
   31008:	b14b      	cbz	r3, 3101e <__ascii_mbtowc+0x1e>
   3100a:	7813      	ldrb	r3, [r2, #0]
   3100c:	600b      	str	r3, [r1, #0]
   3100e:	7812      	ldrb	r2, [r2, #0]
   31010:	1e10      	subs	r0, r2, #0
   31012:	bf18      	it	ne
   31014:	2001      	movne	r0, #1
   31016:	b002      	add	sp, #8
   31018:	4770      	bx	lr
   3101a:	4610      	mov	r0, r2
   3101c:	e7fb      	b.n	31016 <__ascii_mbtowc+0x16>
   3101e:	f06f 0001 	mvn.w	r0, #1
   31022:	e7f8      	b.n	31016 <__ascii_mbtowc+0x16>

00031024 <__hi0bits>:
   31024:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   31028:	4603      	mov	r3, r0
   3102a:	bf36      	itet	cc
   3102c:	0403      	lslcc	r3, r0, #16
   3102e:	2000      	movcs	r0, #0
   31030:	2010      	movcc	r0, #16
   31032:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   31036:	bf3c      	itt	cc
   31038:	021b      	lslcc	r3, r3, #8
   3103a:	3008      	addcc	r0, #8
   3103c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   31040:	bf3c      	itt	cc
   31042:	011b      	lslcc	r3, r3, #4
   31044:	3004      	addcc	r0, #4
   31046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3104a:	d303      	bcc.n	31054 <__hi0bits+0x30>
   3104c:	2b00      	cmp	r3, #0
   3104e:	db0a      	blt.n	31066 <__hi0bits+0x42>
   31050:	3001      	adds	r0, #1
   31052:	4770      	bx	lr
   31054:	009b      	lsls	r3, r3, #2
   31056:	d501      	bpl.n	3105c <__hi0bits+0x38>
   31058:	3002      	adds	r0, #2
   3105a:	4770      	bx	lr
   3105c:	005b      	lsls	r3, r3, #1
   3105e:	d501      	bpl.n	31064 <__hi0bits+0x40>
   31060:	3003      	adds	r0, #3
   31062:	4770      	bx	lr
   31064:	2020      	movs	r0, #32
   31066:	4770      	bx	lr

00031068 <__lo0bits>:
   31068:	6803      	ldr	r3, [r0, #0]
   3106a:	4602      	mov	r2, r0
   3106c:	f013 0007 	ands.w	r0, r3, #7
   31070:	d00b      	beq.n	3108a <__lo0bits+0x22>
   31072:	07d9      	lsls	r1, r3, #31
   31074:	d421      	bmi.n	310ba <__lo0bits+0x52>
   31076:	0798      	lsls	r0, r3, #30
   31078:	bf47      	ittee	mi
   3107a:	085b      	lsrmi	r3, r3, #1
   3107c:	2001      	movmi	r0, #1
   3107e:	089b      	lsrpl	r3, r3, #2
   31080:	2002      	movpl	r0, #2
   31082:	bf4c      	ite	mi
   31084:	6013      	strmi	r3, [r2, #0]
   31086:	6013      	strpl	r3, [r2, #0]
   31088:	4770      	bx	lr
   3108a:	b299      	uxth	r1, r3
   3108c:	b909      	cbnz	r1, 31092 <__lo0bits+0x2a>
   3108e:	0c1b      	lsrs	r3, r3, #16
   31090:	2010      	movs	r0, #16
   31092:	b2d9      	uxtb	r1, r3
   31094:	b909      	cbnz	r1, 3109a <__lo0bits+0x32>
   31096:	3008      	adds	r0, #8
   31098:	0a1b      	lsrs	r3, r3, #8
   3109a:	0719      	lsls	r1, r3, #28
   3109c:	bf04      	itt	eq
   3109e:	091b      	lsreq	r3, r3, #4
   310a0:	3004      	addeq	r0, #4
   310a2:	0799      	lsls	r1, r3, #30
   310a4:	bf04      	itt	eq
   310a6:	089b      	lsreq	r3, r3, #2
   310a8:	3002      	addeq	r0, #2
   310aa:	07d9      	lsls	r1, r3, #31
   310ac:	d403      	bmi.n	310b6 <__lo0bits+0x4e>
   310ae:	085b      	lsrs	r3, r3, #1
   310b0:	f100 0001 	add.w	r0, r0, #1
   310b4:	d003      	beq.n	310be <__lo0bits+0x56>
   310b6:	6013      	str	r3, [r2, #0]
   310b8:	4770      	bx	lr
   310ba:	2000      	movs	r0, #0
   310bc:	4770      	bx	lr
   310be:	2020      	movs	r0, #32
   310c0:	4770      	bx	lr

000310c2 <__mcmp>:
   310c2:	4603      	mov	r3, r0
   310c4:	690a      	ldr	r2, [r1, #16]
   310c6:	6900      	ldr	r0, [r0, #16]
   310c8:	1a80      	subs	r0, r0, r2
   310ca:	b530      	push	{r4, r5, lr}
   310cc:	d10e      	bne.n	310ec <__mcmp+0x2a>
   310ce:	3314      	adds	r3, #20
   310d0:	3114      	adds	r1, #20
   310d2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   310d6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   310da:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   310de:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   310e2:	4295      	cmp	r5, r2
   310e4:	d003      	beq.n	310ee <__mcmp+0x2c>
   310e6:	d205      	bcs.n	310f4 <__mcmp+0x32>
   310e8:	f04f 30ff 	mov.w	r0, #4294967295
   310ec:	bd30      	pop	{r4, r5, pc}
   310ee:	42a3      	cmp	r3, r4
   310f0:	d3f3      	bcc.n	310da <__mcmp+0x18>
   310f2:	e7fb      	b.n	310ec <__mcmp+0x2a>
   310f4:	2001      	movs	r0, #1
   310f6:	e7f9      	b.n	310ec <__mcmp+0x2a>

000310f8 <__ratio>:
   310f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   310fc:	b085      	sub	sp, #20
   310fe:	e9cd 1000 	strd	r1, r0, [sp]
   31102:	a902      	add	r1, sp, #8
   31104:	f7f8 fb68 	bl	297d8 <__b2d>
   31108:	468b      	mov	fp, r1
   3110a:	4606      	mov	r6, r0
   3110c:	460f      	mov	r7, r1
   3110e:	9800      	ldr	r0, [sp, #0]
   31110:	a903      	add	r1, sp, #12
   31112:	f7f8 fb61 	bl	297d8 <__b2d>
   31116:	9b01      	ldr	r3, [sp, #4]
   31118:	4689      	mov	r9, r1
   3111a:	460d      	mov	r5, r1
   3111c:	6919      	ldr	r1, [r3, #16]
   3111e:	4604      	mov	r4, r0
   31120:	9b00      	ldr	r3, [sp, #0]
   31122:	4630      	mov	r0, r6
   31124:	691b      	ldr	r3, [r3, #16]
   31126:	1ac9      	subs	r1, r1, r3
   31128:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3112c:	1a9b      	subs	r3, r3, r2
   3112e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   31132:	2b00      	cmp	r3, #0
   31134:	bfdb      	ittet	le
   31136:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   3113a:	462a      	movle	r2, r5
   3113c:	463a      	movgt	r2, r7
   3113e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   31142:	bfc8      	it	gt
   31144:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   31148:	4622      	mov	r2, r4
   3114a:	464b      	mov	r3, r9
   3114c:	4659      	mov	r1, fp
   3114e:	f7d7 fb95 	bl	887c <__aeabi_ddiv>
   31152:	b005      	add	sp, #20
   31154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031158 <__copybits>:
   31158:	3901      	subs	r1, #1
   3115a:	f102 0314 	add.w	r3, r2, #20
   3115e:	1149      	asrs	r1, r1, #5
   31160:	b570      	push	{r4, r5, r6, lr}
   31162:	3101      	adds	r1, #1
   31164:	6914      	ldr	r4, [r2, #16]
   31166:	1f05      	subs	r5, r0, #4
   31168:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   3116c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   31170:	42a3      	cmp	r3, r4
   31172:	d30c      	bcc.n	3118e <__copybits+0x36>
   31174:	1aa3      	subs	r3, r4, r2
   31176:	3211      	adds	r2, #17
   31178:	3b11      	subs	r3, #17
   3117a:	f023 0303 	bic.w	r3, r3, #3
   3117e:	42a2      	cmp	r2, r4
   31180:	bf88      	it	hi
   31182:	2300      	movhi	r3, #0
   31184:	4418      	add	r0, r3
   31186:	2300      	movs	r3, #0
   31188:	4288      	cmp	r0, r1
   3118a:	d305      	bcc.n	31198 <__copybits+0x40>
   3118c:	bd70      	pop	{r4, r5, r6, pc}
   3118e:	f853 6b04 	ldr.w	r6, [r3], #4
   31192:	f845 6f04 	str.w	r6, [r5, #4]!
   31196:	e7eb      	b.n	31170 <__copybits+0x18>
   31198:	f840 3b04 	str.w	r3, [r0], #4
   3119c:	e7f4      	b.n	31188 <__copybits+0x30>

0003119e <__any_on>:
   3119e:	f100 0214 	add.w	r2, r0, #20
   311a2:	114b      	asrs	r3, r1, #5
   311a4:	6900      	ldr	r0, [r0, #16]
   311a6:	4298      	cmp	r0, r3
   311a8:	b510      	push	{r4, lr}
   311aa:	db11      	blt.n	311d0 <__any_on+0x32>
   311ac:	dd0a      	ble.n	311c4 <__any_on+0x26>
   311ae:	f011 011f 	ands.w	r1, r1, #31
   311b2:	d007      	beq.n	311c4 <__any_on+0x26>
   311b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   311b8:	fa24 f001 	lsr.w	r0, r4, r1
   311bc:	fa00 f101 	lsl.w	r1, r0, r1
   311c0:	428c      	cmp	r4, r1
   311c2:	d10b      	bne.n	311dc <__any_on+0x3e>
   311c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   311c8:	4293      	cmp	r3, r2
   311ca:	d803      	bhi.n	311d4 <__any_on+0x36>
   311cc:	2000      	movs	r0, #0
   311ce:	bd10      	pop	{r4, pc}
   311d0:	4603      	mov	r3, r0
   311d2:	e7f7      	b.n	311c4 <__any_on+0x26>
   311d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   311d8:	2900      	cmp	r1, #0
   311da:	d0f5      	beq.n	311c8 <__any_on+0x2a>
   311dc:	2001      	movs	r0, #1
   311de:	e7f6      	b.n	311ce <__any_on+0x30>

000311e0 <_calloc_r>:
   311e0:	b538      	push	{r3, r4, r5, lr}
   311e2:	fb02 f501 	mul.w	r5, r2, r1
   311e6:	4629      	mov	r1, r5
   311e8:	f7f6 ff5e 	bl	280a8 <_malloc_r>
   311ec:	4604      	mov	r4, r0
   311ee:	b118      	cbz	r0, 311f8 <_calloc_r+0x18>
   311f0:	462a      	mov	r2, r5
   311f2:	2100      	movs	r1, #0
   311f4:	f7ff fb45 	bl	30882 <memset>
   311f8:	4620      	mov	r0, r4
   311fa:	bd38      	pop	{r3, r4, r5, pc}

000311fc <_realloc_r>:
   311fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   311fe:	4607      	mov	r7, r0
   31200:	4615      	mov	r5, r2
   31202:	460c      	mov	r4, r1
   31204:	b921      	cbnz	r1, 31210 <_realloc_r+0x14>
   31206:	4611      	mov	r1, r2
   31208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3120c:	f7f6 bf4c 	b.w	280a8 <_malloc_r>
   31210:	b922      	cbnz	r2, 3121c <_realloc_r+0x20>
   31212:	f7f6 feff 	bl	28014 <_free_r>
   31216:	2400      	movs	r4, #0
   31218:	4620      	mov	r0, r4
   3121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3121c:	f000 fa11 	bl	31642 <_malloc_usable_size_r>
   31220:	42a8      	cmp	r0, r5
   31222:	d2f9      	bcs.n	31218 <_realloc_r+0x1c>
   31224:	4629      	mov	r1, r5
   31226:	4638      	mov	r0, r7
   31228:	f7f6 ff3e 	bl	280a8 <_malloc_r>
   3122c:	4606      	mov	r6, r0
   3122e:	2800      	cmp	r0, #0
   31230:	d0f1      	beq.n	31216 <_realloc_r+0x1a>
   31232:	4621      	mov	r1, r4
   31234:	462a      	mov	r2, r5
   31236:	f7ff fb04 	bl	30842 <memcpy>
   3123a:	4621      	mov	r1, r4
   3123c:	4638      	mov	r0, r7
   3123e:	4634      	mov	r4, r6
   31240:	f7f6 fee8 	bl	28014 <_free_r>
   31244:	e7e8      	b.n	31218 <_realloc_r+0x1c>

00031246 <__ssputs_r>:
   31246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3124a:	461f      	mov	r7, r3
   3124c:	688e      	ldr	r6, [r1, #8]
   3124e:	4682      	mov	sl, r0
   31250:	460c      	mov	r4, r1
   31252:	42be      	cmp	r6, r7
   31254:	4690      	mov	r8, r2
   31256:	680b      	ldr	r3, [r1, #0]
   31258:	d82d      	bhi.n	312b6 <__ssputs_r+0x70>
   3125a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   3125e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   31262:	d026      	beq.n	312b2 <__ssputs_r+0x6c>
   31264:	6965      	ldr	r5, [r4, #20]
   31266:	6909      	ldr	r1, [r1, #16]
   31268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3126c:	eba3 0901 	sub.w	r9, r3, r1
   31270:	1c7b      	adds	r3, r7, #1
   31272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   31276:	444b      	add	r3, r9
   31278:	106d      	asrs	r5, r5, #1
   3127a:	429d      	cmp	r5, r3
   3127c:	bf38      	it	cc
   3127e:	461d      	movcc	r5, r3
   31280:	0553      	lsls	r3, r2, #21
   31282:	d527      	bpl.n	312d4 <__ssputs_r+0x8e>
   31284:	4629      	mov	r1, r5
   31286:	f7f6 ff0f 	bl	280a8 <_malloc_r>
   3128a:	4606      	mov	r6, r0
   3128c:	b360      	cbz	r0, 312e8 <__ssputs_r+0xa2>
   3128e:	464a      	mov	r2, r9
   31290:	6921      	ldr	r1, [r4, #16]
   31292:	f7ff fad6 	bl	30842 <memcpy>
   31296:	89a3      	ldrh	r3, [r4, #12]
   31298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   312a0:	81a3      	strh	r3, [r4, #12]
   312a2:	6126      	str	r6, [r4, #16]
   312a4:	444e      	add	r6, r9
   312a6:	6165      	str	r5, [r4, #20]
   312a8:	eba5 0509 	sub.w	r5, r5, r9
   312ac:	6026      	str	r6, [r4, #0]
   312ae:	463e      	mov	r6, r7
   312b0:	60a5      	str	r5, [r4, #8]
   312b2:	42be      	cmp	r6, r7
   312b4:	d900      	bls.n	312b8 <__ssputs_r+0x72>
   312b6:	463e      	mov	r6, r7
   312b8:	4632      	mov	r2, r6
   312ba:	4641      	mov	r1, r8
   312bc:	6820      	ldr	r0, [r4, #0]
   312be:	f000 f9a6 	bl	3160e <memmove>
   312c2:	68a3      	ldr	r3, [r4, #8]
   312c4:	2000      	movs	r0, #0
   312c6:	1b9b      	subs	r3, r3, r6
   312c8:	60a3      	str	r3, [r4, #8]
   312ca:	6823      	ldr	r3, [r4, #0]
   312cc:	4433      	add	r3, r6
   312ce:	6023      	str	r3, [r4, #0]
   312d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   312d4:	462a      	mov	r2, r5
   312d6:	f7ff ff91 	bl	311fc <_realloc_r>
   312da:	4606      	mov	r6, r0
   312dc:	2800      	cmp	r0, #0
   312de:	d1e0      	bne.n	312a2 <__ssputs_r+0x5c>
   312e0:	6921      	ldr	r1, [r4, #16]
   312e2:	4650      	mov	r0, sl
   312e4:	f7f6 fe96 	bl	28014 <_free_r>
   312e8:	230c      	movs	r3, #12
   312ea:	f04f 30ff 	mov.w	r0, #4294967295
   312ee:	f8ca 3000 	str.w	r3, [sl]
   312f2:	89a3      	ldrh	r3, [r4, #12]
   312f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   312f8:	81a3      	strh	r3, [r4, #12]
   312fa:	e7e9      	b.n	312d0 <__ssputs_r+0x8a>

000312fc <_sungetc_r>:
   312fc:	b538      	push	{r3, r4, r5, lr}
   312fe:	1c4b      	adds	r3, r1, #1
   31300:	4614      	mov	r4, r2
   31302:	d103      	bne.n	3130c <_sungetc_r+0x10>
   31304:	f04f 35ff 	mov.w	r5, #4294967295
   31308:	4628      	mov	r0, r5
   3130a:	bd38      	pop	{r3, r4, r5, pc}
   3130c:	8993      	ldrh	r3, [r2, #12]
   3130e:	b2cd      	uxtb	r5, r1
   31310:	f023 0320 	bic.w	r3, r3, #32
   31314:	8193      	strh	r3, [r2, #12]
   31316:	6853      	ldr	r3, [r2, #4]
   31318:	6b52      	ldr	r2, [r2, #52]	; 0x34
   3131a:	b18a      	cbz	r2, 31340 <_sungetc_r+0x44>
   3131c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3131e:	429a      	cmp	r2, r3
   31320:	dd08      	ble.n	31334 <_sungetc_r+0x38>
   31322:	6823      	ldr	r3, [r4, #0]
   31324:	1e5a      	subs	r2, r3, #1
   31326:	6022      	str	r2, [r4, #0]
   31328:	f803 5c01 	strb.w	r5, [r3, #-1]
   3132c:	6863      	ldr	r3, [r4, #4]
   3132e:	3301      	adds	r3, #1
   31330:	6063      	str	r3, [r4, #4]
   31332:	e7e9      	b.n	31308 <_sungetc_r+0xc>
   31334:	4621      	mov	r1, r4
   31336:	f000 f872 	bl	3141e <__submore>
   3133a:	2800      	cmp	r0, #0
   3133c:	d0f1      	beq.n	31322 <_sungetc_r+0x26>
   3133e:	e7e1      	b.n	31304 <_sungetc_r+0x8>
   31340:	6921      	ldr	r1, [r4, #16]
   31342:	6822      	ldr	r2, [r4, #0]
   31344:	b141      	cbz	r1, 31358 <_sungetc_r+0x5c>
   31346:	4291      	cmp	r1, r2
   31348:	d206      	bcs.n	31358 <_sungetc_r+0x5c>
   3134a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   3134e:	42a9      	cmp	r1, r5
   31350:	d102      	bne.n	31358 <_sungetc_r+0x5c>
   31352:	3a01      	subs	r2, #1
   31354:	6022      	str	r2, [r4, #0]
   31356:	e7ea      	b.n	3132e <_sungetc_r+0x32>
   31358:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   3135c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   31360:	6363      	str	r3, [r4, #52]	; 0x34
   31362:	2303      	movs	r3, #3
   31364:	63a3      	str	r3, [r4, #56]	; 0x38
   31366:	4623      	mov	r3, r4
   31368:	f803 5f46 	strb.w	r5, [r3, #70]!
   3136c:	6023      	str	r3, [r4, #0]
   3136e:	2301      	movs	r3, #1
   31370:	e7de      	b.n	31330 <_sungetc_r+0x34>

00031372 <__ssrefill_r>:
   31372:	b510      	push	{r4, lr}
   31374:	460c      	mov	r4, r1
   31376:	6b49      	ldr	r1, [r1, #52]	; 0x34
   31378:	b169      	cbz	r1, 31396 <__ssrefill_r+0x24>
   3137a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3137e:	4299      	cmp	r1, r3
   31380:	d001      	beq.n	31386 <__ssrefill_r+0x14>
   31382:	f7f6 fe47 	bl	28014 <_free_r>
   31386:	2000      	movs	r0, #0
   31388:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3138a:	6360      	str	r0, [r4, #52]	; 0x34
   3138c:	6063      	str	r3, [r4, #4]
   3138e:	b113      	cbz	r3, 31396 <__ssrefill_r+0x24>
   31390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   31392:	6023      	str	r3, [r4, #0]
   31394:	bd10      	pop	{r4, pc}
   31396:	6923      	ldr	r3, [r4, #16]
   31398:	f04f 30ff 	mov.w	r0, #4294967295
   3139c:	6023      	str	r3, [r4, #0]
   3139e:	2300      	movs	r3, #0
   313a0:	6063      	str	r3, [r4, #4]
   313a2:	89a3      	ldrh	r3, [r4, #12]
   313a4:	f043 0320 	orr.w	r3, r3, #32
   313a8:	81a3      	strh	r3, [r4, #12]
   313aa:	e7f3      	b.n	31394 <__ssrefill_r+0x22>

000313ac <__sccl>:
   313ac:	b570      	push	{r4, r5, r6, lr}
   313ae:	780b      	ldrb	r3, [r1, #0]
   313b0:	4604      	mov	r4, r0
   313b2:	3801      	subs	r0, #1
   313b4:	2b5e      	cmp	r3, #94	; 0x5e
   313b6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   313ba:	bf13      	iteet	ne
   313bc:	1c4a      	addne	r2, r1, #1
   313be:	1c8a      	addeq	r2, r1, #2
   313c0:	784b      	ldrbeq	r3, [r1, #1]
   313c2:	2100      	movne	r1, #0
   313c4:	bf08      	it	eq
   313c6:	2101      	moveq	r1, #1
   313c8:	f800 1f01 	strb.w	r1, [r0, #1]!
   313cc:	42a8      	cmp	r0, r5
   313ce:	d1fb      	bne.n	313c8 <__sccl+0x1c>
   313d0:	b90b      	cbnz	r3, 313d6 <__sccl+0x2a>
   313d2:	1e50      	subs	r0, r2, #1
   313d4:	bd70      	pop	{r4, r5, r6, pc}
   313d6:	f081 0101 	eor.w	r1, r1, #1
   313da:	4610      	mov	r0, r2
   313dc:	54e1      	strb	r1, [r4, r3]
   313de:	4602      	mov	r2, r0
   313e0:	f812 5b01 	ldrb.w	r5, [r2], #1
   313e4:	2d2d      	cmp	r5, #45	; 0x2d
   313e6:	d005      	beq.n	313f4 <__sccl+0x48>
   313e8:	2d5d      	cmp	r5, #93	; 0x5d
   313ea:	d016      	beq.n	3141a <__sccl+0x6e>
   313ec:	2d00      	cmp	r5, #0
   313ee:	d0f1      	beq.n	313d4 <__sccl+0x28>
   313f0:	462b      	mov	r3, r5
   313f2:	e7f2      	b.n	313da <__sccl+0x2e>
   313f4:	7846      	ldrb	r6, [r0, #1]
   313f6:	2e5d      	cmp	r6, #93	; 0x5d
   313f8:	d0fa      	beq.n	313f0 <__sccl+0x44>
   313fa:	42b3      	cmp	r3, r6
   313fc:	dcf8      	bgt.n	313f0 <__sccl+0x44>
   313fe:	3002      	adds	r0, #2
   31400:	461a      	mov	r2, r3
   31402:	3201      	adds	r2, #1
   31404:	4296      	cmp	r6, r2
   31406:	54a1      	strb	r1, [r4, r2]
   31408:	dcfb      	bgt.n	31402 <__sccl+0x56>
   3140a:	1af2      	subs	r2, r6, r3
   3140c:	1c5d      	adds	r5, r3, #1
   3140e:	3a01      	subs	r2, #1
   31410:	42b3      	cmp	r3, r6
   31412:	bfa8      	it	ge
   31414:	2200      	movge	r2, #0
   31416:	18ab      	adds	r3, r5, r2
   31418:	e7e1      	b.n	313de <__sccl+0x32>
   3141a:	4610      	mov	r0, r2
   3141c:	e7da      	b.n	313d4 <__sccl+0x28>

0003141e <__submore>:
   3141e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31422:	460c      	mov	r4, r1
   31424:	6b49      	ldr	r1, [r1, #52]	; 0x34
   31426:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3142a:	4299      	cmp	r1, r3
   3142c:	d11a      	bne.n	31464 <__submore+0x46>
   3142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   31432:	f7f6 fe39 	bl	280a8 <_malloc_r>
   31436:	b918      	cbnz	r0, 31440 <__submore+0x22>
   31438:	f04f 30ff 	mov.w	r0, #4294967295
   3143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31440:	f44f 6380 	mov.w	r3, #1024	; 0x400
   31444:	6360      	str	r0, [r4, #52]	; 0x34
   31446:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   3144a:	63a3      	str	r3, [r4, #56]	; 0x38
   3144c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   31450:	7083      	strb	r3, [r0, #2]
   31452:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   31456:	7043      	strb	r3, [r0, #1]
   31458:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3145c:	7003      	strb	r3, [r0, #0]
   3145e:	6020      	str	r0, [r4, #0]
   31460:	2000      	movs	r0, #0
   31462:	e7eb      	b.n	3143c <__submore+0x1e>
   31464:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   31466:	0077      	lsls	r7, r6, #1
   31468:	463a      	mov	r2, r7
   3146a:	f7ff fec7 	bl	311fc <_realloc_r>
   3146e:	4605      	mov	r5, r0
   31470:	2800      	cmp	r0, #0
   31472:	d0e1      	beq.n	31438 <__submore+0x1a>
   31474:	eb00 0806 	add.w	r8, r0, r6
   31478:	4601      	mov	r1, r0
   3147a:	4632      	mov	r2, r6
   3147c:	4640      	mov	r0, r8
   3147e:	f7ff f9e0 	bl	30842 <memcpy>
   31482:	f8c4 8000 	str.w	r8, [r4]
   31486:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   3148a:	e7e9      	b.n	31460 <__submore+0x42>

0003148c <__ascii_wctomb>:
   3148c:	4603      	mov	r3, r0
   3148e:	4608      	mov	r0, r1
   31490:	b141      	cbz	r1, 314a4 <__ascii_wctomb+0x18>
   31492:	2aff      	cmp	r2, #255	; 0xff
   31494:	d904      	bls.n	314a0 <__ascii_wctomb+0x14>
   31496:	228a      	movs	r2, #138	; 0x8a
   31498:	f04f 30ff 	mov.w	r0, #4294967295
   3149c:	601a      	str	r2, [r3, #0]
   3149e:	4770      	bx	lr
   314a0:	2001      	movs	r0, #1
   314a2:	700a      	strb	r2, [r1, #0]
   314a4:	4770      	bx	lr

000314a6 <__sflush_r>:
   314a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   314aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   314ac:	0717      	lsls	r7, r2, #28
   314ae:	4605      	mov	r5, r0
   314b0:	460c      	mov	r4, r1
   314b2:	d456      	bmi.n	31562 <__sflush_r+0xbc>
   314b4:	684b      	ldr	r3, [r1, #4]
   314b6:	2b00      	cmp	r3, #0
   314b8:	dc02      	bgt.n	314c0 <__sflush_r+0x1a>
   314ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   314bc:	2b00      	cmp	r3, #0
   314be:	dd3d      	ble.n	3153c <__sflush_r+0x96>
   314c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   314c2:	2e00      	cmp	r6, #0
   314c4:	d03a      	beq.n	3153c <__sflush_r+0x96>
   314c6:	2300      	movs	r3, #0
   314c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   314cc:	682f      	ldr	r7, [r5, #0]
   314ce:	6a21      	ldr	r1, [r4, #32]
   314d0:	602b      	str	r3, [r5, #0]
   314d2:	d025      	beq.n	31520 <__sflush_r+0x7a>
   314d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
   314d6:	89a3      	ldrh	r3, [r4, #12]
   314d8:	0758      	lsls	r0, r3, #29
   314da:	d505      	bpl.n	314e8 <__sflush_r+0x42>
   314dc:	6863      	ldr	r3, [r4, #4]
   314de:	1ad2      	subs	r2, r2, r3
   314e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   314e2:	b10b      	cbz	r3, 314e8 <__sflush_r+0x42>
   314e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   314e6:	1ad2      	subs	r2, r2, r3
   314e8:	6a21      	ldr	r1, [r4, #32]
   314ea:	2300      	movs	r3, #0
   314ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   314ee:	4628      	mov	r0, r5
   314f0:	47b0      	blx	r6
   314f2:	1c41      	adds	r1, r0, #1
   314f4:	d024      	beq.n	31540 <__sflush_r+0x9a>
   314f6:	2300      	movs	r3, #0
   314f8:	6063      	str	r3, [r4, #4]
   314fa:	6923      	ldr	r3, [r4, #16]
   314fc:	6023      	str	r3, [r4, #0]
   314fe:	89a3      	ldrh	r3, [r4, #12]
   31500:	04da      	lsls	r2, r3, #19
   31502:	d500      	bpl.n	31506 <__sflush_r+0x60>
   31504:	6560      	str	r0, [r4, #84]	; 0x54
   31506:	6b61      	ldr	r1, [r4, #52]	; 0x34
   31508:	602f      	str	r7, [r5, #0]
   3150a:	b1b9      	cbz	r1, 3153c <__sflush_r+0x96>
   3150c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   31510:	4299      	cmp	r1, r3
   31512:	d002      	beq.n	3151a <__sflush_r+0x74>
   31514:	4628      	mov	r0, r5
   31516:	f7f6 fd7d 	bl	28014 <_free_r>
   3151a:	2300      	movs	r3, #0
   3151c:	6363      	str	r3, [r4, #52]	; 0x34
   3151e:	e00d      	b.n	3153c <__sflush_r+0x96>
   31520:	2301      	movs	r3, #1
   31522:	4628      	mov	r0, r5
   31524:	47b0      	blx	r6
   31526:	1c46      	adds	r6, r0, #1
   31528:	4602      	mov	r2, r0
   3152a:	d1d4      	bne.n	314d6 <__sflush_r+0x30>
   3152c:	682b      	ldr	r3, [r5, #0]
   3152e:	2b00      	cmp	r3, #0
   31530:	d0d1      	beq.n	314d6 <__sflush_r+0x30>
   31532:	2b1d      	cmp	r3, #29
   31534:	d001      	beq.n	3153a <__sflush_r+0x94>
   31536:	2b16      	cmp	r3, #22
   31538:	d129      	bne.n	3158e <__sflush_r+0xe8>
   3153a:	602f      	str	r7, [r5, #0]
   3153c:	2000      	movs	r0, #0
   3153e:	e02d      	b.n	3159c <__sflush_r+0xf6>
   31540:	682a      	ldr	r2, [r5, #0]
   31542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   31546:	b142      	cbz	r2, 3155a <__sflush_r+0xb4>
   31548:	2a1d      	cmp	r2, #29
   3154a:	d001      	beq.n	31550 <__sflush_r+0xaa>
   3154c:	2a16      	cmp	r2, #22
   3154e:	d120      	bne.n	31592 <__sflush_r+0xec>
   31550:	2300      	movs	r3, #0
   31552:	6063      	str	r3, [r4, #4]
   31554:	6923      	ldr	r3, [r4, #16]
   31556:	6023      	str	r3, [r4, #0]
   31558:	e7d5      	b.n	31506 <__sflush_r+0x60>
   3155a:	6062      	str	r2, [r4, #4]
   3155c:	6922      	ldr	r2, [r4, #16]
   3155e:	6022      	str	r2, [r4, #0]
   31560:	e7ce      	b.n	31500 <__sflush_r+0x5a>
   31562:	690f      	ldr	r7, [r1, #16]
   31564:	2f00      	cmp	r7, #0
   31566:	d0e9      	beq.n	3153c <__sflush_r+0x96>
   31568:	0793      	lsls	r3, r2, #30
   3156a:	680e      	ldr	r6, [r1, #0]
   3156c:	600f      	str	r7, [r1, #0]
   3156e:	bf0c      	ite	eq
   31570:	694b      	ldreq	r3, [r1, #20]
   31572:	2300      	movne	r3, #0
   31574:	1bf6      	subs	r6, r6, r7
   31576:	608b      	str	r3, [r1, #8]
   31578:	2e00      	cmp	r6, #0
   3157a:	dddf      	ble.n	3153c <__sflush_r+0x96>
   3157c:	4633      	mov	r3, r6
   3157e:	463a      	mov	r2, r7
   31580:	6a21      	ldr	r1, [r4, #32]
   31582:	4628      	mov	r0, r5
   31584:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   31588:	47e0      	blx	ip
   3158a:	2800      	cmp	r0, #0
   3158c:	dc07      	bgt.n	3159e <__sflush_r+0xf8>
   3158e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   31592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   31596:	f04f 30ff 	mov.w	r0, #4294967295
   3159a:	81a3      	strh	r3, [r4, #12]
   3159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3159e:	4407      	add	r7, r0
   315a0:	1a36      	subs	r6, r6, r0
   315a2:	e7e9      	b.n	31578 <__sflush_r+0xd2>

000315a4 <__sfmoreglue>:
   315a4:	b570      	push	{r4, r5, r6, lr}
   315a6:	2368      	movs	r3, #104	; 0x68
   315a8:	1e4d      	subs	r5, r1, #1
   315aa:	460e      	mov	r6, r1
   315ac:	435d      	muls	r5, r3
   315ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
   315b2:	f7f6 fd79 	bl	280a8 <_malloc_r>
   315b6:	4604      	mov	r4, r0
   315b8:	b140      	cbz	r0, 315cc <__sfmoreglue+0x28>
   315ba:	2100      	movs	r1, #0
   315bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
   315c0:	e9c0 1600 	strd	r1, r6, [r0]
   315c4:	300c      	adds	r0, #12
   315c6:	60a0      	str	r0, [r4, #8]
   315c8:	f7ff f95b 	bl	30882 <memset>
   315cc:	4620      	mov	r0, r4
   315ce:	bd70      	pop	{r4, r5, r6, pc}

000315d0 <_fwalk_reent>:
   315d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   315d4:	4606      	mov	r6, r0
   315d6:	4688      	mov	r8, r1
   315d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   315dc:	2700      	movs	r7, #0
   315de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   315e2:	f1b9 0901 	subs.w	r9, r9, #1
   315e6:	d505      	bpl.n	315f4 <_fwalk_reent+0x24>
   315e8:	6824      	ldr	r4, [r4, #0]
   315ea:	2c00      	cmp	r4, #0
   315ec:	d1f7      	bne.n	315de <_fwalk_reent+0xe>
   315ee:	4638      	mov	r0, r7
   315f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   315f4:	89ab      	ldrh	r3, [r5, #12]
   315f6:	2b01      	cmp	r3, #1
   315f8:	d907      	bls.n	3160a <_fwalk_reent+0x3a>
   315fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   315fe:	3301      	adds	r3, #1
   31600:	d003      	beq.n	3160a <_fwalk_reent+0x3a>
   31602:	4629      	mov	r1, r5
   31604:	4630      	mov	r0, r6
   31606:	47c0      	blx	r8
   31608:	4307      	orrs	r7, r0
   3160a:	3568      	adds	r5, #104	; 0x68
   3160c:	e7e9      	b.n	315e2 <_fwalk_reent+0x12>

0003160e <memmove>:
   3160e:	4288      	cmp	r0, r1
   31610:	b510      	push	{r4, lr}
   31612:	eb01 0402 	add.w	r4, r1, r2
   31616:	d902      	bls.n	3161e <memmove+0x10>
   31618:	4284      	cmp	r4, r0
   3161a:	4623      	mov	r3, r4
   3161c:	d807      	bhi.n	3162e <memmove+0x20>
   3161e:	1e43      	subs	r3, r0, #1
   31620:	42a1      	cmp	r1, r4
   31622:	d008      	beq.n	31636 <memmove+0x28>
   31624:	f811 2b01 	ldrb.w	r2, [r1], #1
   31628:	f803 2f01 	strb.w	r2, [r3, #1]!
   3162c:	e7f8      	b.n	31620 <memmove+0x12>
   3162e:	4402      	add	r2, r0
   31630:	4601      	mov	r1, r0
   31632:	428a      	cmp	r2, r1
   31634:	d100      	bne.n	31638 <memmove+0x2a>
   31636:	bd10      	pop	{r4, pc}
   31638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3163c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   31640:	e7f7      	b.n	31632 <memmove+0x24>

00031642 <_malloc_usable_size_r>:
   31642:	f851 3c04 	ldr.w	r3, [r1, #-4]
   31646:	1f18      	subs	r0, r3, #4
   31648:	2b00      	cmp	r3, #0
   3164a:	bfbc      	itt	lt
   3164c:	580b      	ldrlt	r3, [r1, r0]
   3164e:	18c0      	addlt	r0, r0, r3
   31650:	4770      	bx	lr

00031652 <__sfputc_r>:
   31652:	6893      	ldr	r3, [r2, #8]
   31654:	3b01      	subs	r3, #1
   31656:	2b00      	cmp	r3, #0
   31658:	6093      	str	r3, [r2, #8]
   3165a:	b410      	push	{r4}
   3165c:	da07      	bge.n	3166e <__sfputc_r+0x1c>
   3165e:	6994      	ldr	r4, [r2, #24]
   31660:	42a3      	cmp	r3, r4
   31662:	db01      	blt.n	31668 <__sfputc_r+0x16>
   31664:	290a      	cmp	r1, #10
   31666:	d102      	bne.n	3166e <__sfputc_r+0x1c>
   31668:	bc10      	pop	{r4}
   3166a:	f7f8 bf93 	b.w	2a594 <__swbuf_r>
   3166e:	6813      	ldr	r3, [r2, #0]
   31670:	1c58      	adds	r0, r3, #1
   31672:	6010      	str	r0, [r2, #0]
   31674:	4608      	mov	r0, r1
   31676:	7019      	strb	r1, [r3, #0]
   31678:	bc10      	pop	{r4}
   3167a:	4770      	bx	lr

0003167c <__sfputs_r>:
   3167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3167e:	4606      	mov	r6, r0
   31680:	460f      	mov	r7, r1
   31682:	4614      	mov	r4, r2
   31684:	18d5      	adds	r5, r2, r3
   31686:	42ac      	cmp	r4, r5
   31688:	d101      	bne.n	3168e <__sfputs_r+0x12>
   3168a:	2000      	movs	r0, #0
   3168c:	e007      	b.n	3169e <__sfputs_r+0x22>
   3168e:	463a      	mov	r2, r7
   31690:	f814 1b01 	ldrb.w	r1, [r4], #1
   31694:	4630      	mov	r0, r6
   31696:	f7ff ffdc 	bl	31652 <__sfputc_r>
   3169a:	1c43      	adds	r3, r0, #1
   3169c:	d1f3      	bne.n	31686 <__sfputs_r+0xa>
   3169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000316a0 <abort>:
   316a0:	2006      	movs	r0, #6
   316a2:	b508      	push	{r3, lr}
   316a4:	f7f9 f874 	bl	2a790 <raise>
   316a8:	2001      	movs	r0, #1
   316aa:	f7e0 fecd 	bl	12448 <_exit>

000316ae <__swhatbuf_r>:
   316ae:	b570      	push	{r4, r5, r6, lr}
   316b0:	460c      	mov	r4, r1
   316b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   316b6:	b096      	sub	sp, #88	; 0x58
   316b8:	4615      	mov	r5, r2
   316ba:	2900      	cmp	r1, #0
   316bc:	461e      	mov	r6, r3
   316be:	da0c      	bge.n	316da <__swhatbuf_r+0x2c>
   316c0:	89a3      	ldrh	r3, [r4, #12]
   316c2:	2100      	movs	r1, #0
   316c4:	f013 0f80 	tst.w	r3, #128	; 0x80
   316c8:	bf14      	ite	ne
   316ca:	2340      	movne	r3, #64	; 0x40
   316cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   316d0:	2000      	movs	r0, #0
   316d2:	6031      	str	r1, [r6, #0]
   316d4:	602b      	str	r3, [r5, #0]
   316d6:	b016      	add	sp, #88	; 0x58
   316d8:	bd70      	pop	{r4, r5, r6, pc}
   316da:	466a      	mov	r2, sp
   316dc:	f7f9 f872 	bl	2a7c4 <_fstat_r>
   316e0:	2800      	cmp	r0, #0
   316e2:	dbed      	blt.n	316c0 <__swhatbuf_r+0x12>
   316e4:	9901      	ldr	r1, [sp, #4]
   316e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   316ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   316ee:	4259      	negs	r1, r3
   316f0:	4159      	adcs	r1, r3
   316f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   316f6:	e7eb      	b.n	316d0 <__swhatbuf_r+0x22>

000316f8 <_raise_r>:
   316f8:	291f      	cmp	r1, #31
   316fa:	b538      	push	{r3, r4, r5, lr}
   316fc:	4605      	mov	r5, r0
   316fe:	460c      	mov	r4, r1
   31700:	d904      	bls.n	3170c <_raise_r+0x14>
   31702:	2316      	movs	r3, #22
   31704:	6003      	str	r3, [r0, #0]
   31706:	f04f 30ff 	mov.w	r0, #4294967295
   3170a:	bd38      	pop	{r3, r4, r5, pc}
   3170c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3170e:	b112      	cbz	r2, 31716 <_raise_r+0x1e>
   31710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   31714:	b94b      	cbnz	r3, 3172a <_raise_r+0x32>
   31716:	4628      	mov	r0, r5
   31718:	f000 f816 	bl	31748 <_getpid_r>
   3171c:	4622      	mov	r2, r4
   3171e:	4601      	mov	r1, r0
   31720:	4628      	mov	r0, r5
   31722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   31726:	f7f9 b83b 	b.w	2a7a0 <_kill_r>
   3172a:	2b01      	cmp	r3, #1
   3172c:	d00a      	beq.n	31744 <_raise_r+0x4c>
   3172e:	1c59      	adds	r1, r3, #1
   31730:	d103      	bne.n	3173a <_raise_r+0x42>
   31732:	2316      	movs	r3, #22
   31734:	6003      	str	r3, [r0, #0]
   31736:	2001      	movs	r0, #1
   31738:	e7e7      	b.n	3170a <_raise_r+0x12>
   3173a:	2100      	movs	r1, #0
   3173c:	4620      	mov	r0, r4
   3173e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   31742:	4798      	blx	r3
   31744:	2000      	movs	r0, #0
   31746:	e7e0      	b.n	3170a <_raise_r+0x12>

00031748 <_getpid_r>:
   31748:	f7fa bc05 	b.w	2bf56 <_getpid>
